

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Thu Dec 15 06:41:44 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=3
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=3
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=3
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=2
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=2
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=2
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=2
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=2
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=2
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=2
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=2
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    77                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    78                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    79                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    80                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    81   000000                     
    82                           ; Version 2.35
    83                           ; Generated 05/05/2021 GMT
    84                           ; 
    85                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    86                           ; All rights reserved.
    87                           ; 
    88                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    89                           ; 
    90                           ; Redistribution and use in source and binary forms, with or without modification, are
    91                           ; permitted provided that the following conditions are met:
    92                           ; 
    93                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    94                           ;        conditions and the following disclaimer.
    95                           ; 
    96                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    97                           ;        of conditions and the following disclaimer in the documentation and/or other
    98                           ;        materials provided with the distribution. Publication is not required when
    99                           ;        this file is used in an embedded application.
   100                           ; 
   101                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   102                           ;        software without specific prior written permission.
   103                           ; 
   104                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   105                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   106                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   107                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   108                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   109                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   110                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   111                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   112                           ; 
   113                           ; 
   114                           ; Code-generator required, PIC18F67K40 Definitions
   115                           ; 
   116                           ; SFR Addresses
   117   000000                     
   118                           	psect	idataBANK0
   119   004D6A                     __pidataBANK0:
   120                           	callstack 0
   121                           
   122                           ;initializer for _reverse_time
   123   004D6A  02BC               	dw	700
   124                           
   125                           ;initializer for _turning_time45
   126   004D6C  00BB               	dw	187
   127   000000                     _TX4REG	set	3812
   128   000000                     _RC4STAbits	set	3815
   129   000000                     _SP4BRGH	set	3814
   130   000000                     _TRISFbits	set	3974
   131   000000                     _LATFbits	set	3966
   132   000000                     _TRISDbits	set	3972
   133   000000                     _TRISGbits	set	3975
   134   000000                     _LATGbits	set	3967
   135   000000                     _LATEbits	set	3965
   136   000000                     _SSP2CON2bits	set	3802
   137   000000                     _RX4PPS	set	3605
   138   000000                     _SSP2CLKPPS	set	3612
   139   000000                     _SSP2DATPPS	set	3613
   140   000000                     _RC7PPS	set	3689
   141   000000                     _RE2PPS	set	3700
   142   000000                     _LATCbits	set	3963
   143   000000                     _LATDbits	set	3964
   144   000000                     _TRISAbits	set	3969
   145   000000                     _LATHbits	set	3968
   146   000000                     _TRISCbits	set	3971
   147   000000                     _TRISEbits	set	3973
   148   000000                     _PORTFbits	set	3982
   149   000000                     _TRISHbits	set	3976
   150   000000                     _T2PR	set	4028
   151   000000                     _T2CONbits	set	4029
   152   000000                     _CCPR2H	set	4006
   153   000000                     _CCPR1H	set	4010
   154   000000                     _RE4PPS	set	3702
   155   000000                     _RG6PPS	set	3720
   156   000000                     _RD5PPS	set	3695
   157   000000                     _ANSELDbits	set	3751
   158   000000                     _SSP2ADD	set	3798
   159   000000                     _SSP2CON1bits	set	3801
   160   000000                     _CCPR4H	set	3873
   161   000000                     _CCPR3H	set	3877
   162   000000                     _TMR0L	set	4051
   163   000000                     _TMR0H	set	4052
   164   000000                     _T0CON0bits	set	4053
   165   000000                     _T0CON1bits	set	4054
   166   000000                     _T2CLKCONbits	set	4031
   167   000000                     _T2HLTbits	set	4030
   168   000000                     _CCP1CONbits	set	4011
   169   000000                     _CCPTMRS0bits	set	4013
   170   000000                     _CCP2CONbits	set	4007
   171   000000                     _LATAbits	set	3961
   172   000000                     _CCP3CONbits	set	3878
   173   000000                     _CCP4CONbits	set	3874
   174   000000                     _RC4REG	set	3811
   175   000000                     _SP4BRGL	set	3813
   176   000000                     _TX4STAbits	set	3816
   177   000000                     _BAUD4CONbits	set	3817
   178   000000                     _SSP2CON2	set	3802
   179   000000                     _SSP2STAT	set	3800
   180   000000                     _ANSELFbits	set	3764
   181   000000                     _SSP2BUF	set	3797
   182   000000                     _IPR4bits	set	3619
   183   000000                     _PIE4bits	set	3629
   184   000000                     _RC0PPS	set	3682
   185   000000                     _RD6PPS	set	3696
   186   000000                     _INTCONbits	set	4082
   187   000000                     _PIR4bits	set	3639
   188                           
   189                           	psect	smallconst
   190   000E00                     __psmallconst:
   191                           	callstack 0
   192   000E00  00                 	db	0
   193   000E01                     STR_1:
   194   000E01  4B                 	db	75	;'K'
   195   000E02  3A                 	db	58	;':'
   196   000E03  25                 	db	37
   197   000E04  64                 	db	100	;'d'
   198   000E05  20                 	db	32
   199   000E06  49                 	db	73	;'I'
   200   000E07  3A                 	db	58	;':'
   201   000E08  25                 	db	37
   202   000E09  64                 	db	100	;'d'
   203   000E0A  20                 	db	32
   204   000E0B  43                 	db	67	;'C'
   205   000E0C  3A                 	db	58	;':'
   206   000E0D  25                 	db	37
   207   000E0E  64                 	db	100	;'d'
   208   000E0F  20                 	db	32
   209   000E10  54                 	db	84	;'T'
   210   000E11  3A                 	db	58	;':'
   211   000E12  25                 	db	37
   212   000E13  64                 	db	100	;'d'
   213   000E14  20                 	db	32
   214   000E15  0D                 	db	13
   215   000E16  00                 	db	0
   216   000E17  25                 	db	37
   217   000E18  64                 	db	100	;'d'
   218   000E19  2C                 	db	44
   219   000E1A  25                 	db	37
   220   000E1B  64                 	db	100	;'d'
   221   000E1C  2C                 	db	44
   222   000E1D  25                 	db	37
   223   000E1E  64                 	db	100	;'d'
   224   000E1F  2C                 	db	44
   225   000E20  25                 	db	37
   226   000E21  64                 	db	100	;'d'
   227   000E22  20                 	db	32
   228   000E23  0D                 	db	13
   229   000E24  0A                 	db	10
   230   000E25  00                 	db	0
   231   000E26  00                 	db	0	; dummy byte at the end
   232   000000                     
   233                           ; #config settings
   234                           
   235                           	psect	cinit
   236   004804                     __pcinit:
   237                           	callstack 0
   238   004804                     start_initialization:
   239                           	callstack 0
   240   004804                     __initialization:
   241                           	callstack 0
   242                           
   243                           ; Initialize objects allocated to BANK0 (4 bytes)
   244                           ; load TBLPTR registers with __pidataBANK0
   245   004804  0E6A               	movlw	low __pidataBANK0
   246   004806  6EF6               	movwf	tblptrl,c
   247   004808  0E4D               	movlw	high __pidataBANK0
   248   00480A  6EF7               	movwf	tblptrh,c
   249   00480C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   250   00480E  6EF8               	movwf	tblptru,c
   251   004810  EE00  F0FC         	lfsr	0,__pdataBANK0
   252   004814  EE10 F004          	lfsr	1,4
   253   004818                     copy_data0:
   254   004818  0009               	tblrd		*+
   255   00481A  CFF5 FFEE          	movff	tablat,postinc0
   256   00481E  50E5               	movf	postdec1,w,c
   257   004820  50E1               	movf	fsr1l,w,c
   258   004822  E1FA               	bnz	copy_data0
   259                           
   260                           ; Clear objects allocated to BANK2 (60 bytes)
   261   004824  EE02  F000         	lfsr	0,__pbssBANK2
   262   004828  0E3C               	movlw	60
   263   00482A                     clear_0:
   264   00482A  6AEE               	clrf	postinc0,c
   265   00482C  06E8               	decf	wreg,f,c
   266   00482E  E1FD               	bnz	clear_0
   267                           
   268                           ; Clear objects allocated to BANK1 (52 bytes)
   269   004830  EE01  F0BC         	lfsr	0,__pbssBANK1
   270   004834  0E34               	movlw	52
   271   004836                     clear_1:
   272   004836  6AEE               	clrf	postinc0,c
   273   004838  06E8               	decf	wreg,f,c
   274   00483A  E1FD               	bnz	clear_1
   275                           
   276                           ; Clear objects allocated to BANK0 (9 bytes)
   277   00483C  EE00  F0F3         	lfsr	0,__pbssBANK0
   278   004840  0E09               	movlw	9
   279   004842                     clear_2:
   280   004842  6AEE               	clrf	postinc0,c
   281   004844  06E8               	decf	wreg,f,c
   282   004846  E1FD               	bnz	clear_2
   283                           
   284                           ; Clear objects allocated to COMRAM (4 bytes)
   285   004848  6A5A               	clrf	(__pbssCOMRAM+3)& (0+255),c
   286   00484A  6A59               	clrf	(__pbssCOMRAM+2)& (0+255),c
   287   00484C  6A58               	clrf	(__pbssCOMRAM+1)& (0+255),c
   288   00484E  6A57               	clrf	__pbssCOMRAM& (0+255),c
   289   004850                     end_of_initialization:
   290                           	callstack 0
   291   004850                     __end_of__initialization:
   292                           	callstack 0
   293   004850  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   294   004852  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   295   004854  0100               	movlb	0
   296   004856  EF5A  F00F         	goto	_main	;jump to C main() function
   297                           
   298                           	psect	bssCOMRAM
   299   000057                     __pbssCOMRAM:
   300                           	callstack 0
   301   000057                     _TxBufReadCnt:
   302                           	callstack 0
   303   000057                     	ds	1
   304   000058                     _TxBufWriteCnt:
   305                           	callstack 0
   306   000058                     	ds	1
   307   000059                     _RxBufReadCnt:
   308                           	callstack 0
   309   000059                     	ds	1
   310   00005A                     _RxBufWriteCnt:
   311                           	callstack 0
   312   00005A                     	ds	1
   313                           
   314                           	psect	bssBANK0
   315   0000F3                     __pbssBANK0:
   316                           	callstack 0
   317   0000F3                     _width:
   318                           	callstack 0
   319   0000F3                     	ds	2
   320   0000F5                     _prec:
   321                           	callstack 0
   322   0000F5                     	ds	2
   323   0000F7                     _off_period:
   324                           	callstack 0
   325   0000F7                     	ds	2
   326   0000F9                     _on_period:
   327                           	callstack 0
   328   0000F9                     	ds	2
   329   0000FB                     _flags:
   330                           	callstack 0
   331   0000FB                     	ds	1
   332                           
   333                           	psect	dataBANK0
   334   0000FC                     __pdataBANK0:
   335                           	callstack 0
   336   0000FC                     _reverse_time:
   337                           	callstack 0
   338   0000FC                     	ds	2
   339   0000FE                     _turning_time45:
   340                           	callstack 0
   341   0000FE                     	ds	2
   342                           
   343                           	psect	bssBANK1
   344   0001BC                     __pbssBANK1:
   345                           	callstack 0
   346   0001BC                     _EUSART4RXbuf:
   347                           	callstack 0
   348   0001BC                     	ds	20
   349   0001D0                     _dbuf:
   350                           	callstack 0
   351   0001D0                     	ds	32
   352                           
   353                           	psect	bssBANK2
   354   000200                     __pbssBANK2:
   355                           	callstack 0
   356   000200                     _EUSART4TXbuf:
   357                           	callstack 0
   358   000200                     	ds	60
   359                           
   360                           	psect	cstackBANK1
   361   000100                     __pcstackBANK1:
   362                           	callstack 0
   363   000100                     ??_main:
   364                           
   365                           ; 1 bytes @ 0x0
   366   000100                     	ds	3
   367   000103                     main@counter_history:
   368                           	callstack 0
   369                           
   370                           ; 64 bytes @ 0x3
   371   000103                     	ds	64
   372   000143                     main@turn_history:
   373                           	callstack 0
   374                           
   375                           ; 64 bytes @ 0x43
   376   000143                     	ds	64
   377   000183                     main@whiteC:
   378                           	callstack 0
   379                           
   380                           ; 4 bytes @ 0x83
   381   000183                     	ds	4
   382   000187                     main@forwardCount:
   383                           	callstack 0
   384                           
   385                           ; 2 bytes @ 0x87
   386   000187                     	ds	2
   387   000189                     main@clearRef:
   388                           	callstack 0
   389                           
   390                           ; 4 bytes @ 0x89
   391   000189                     	ds	4
   392   00018D                     main@colorNum:
   393                           	callstack 0
   394                           
   395                           ; 2 bytes @ 0x8D
   396   00018D                     	ds	2
   397   00018F                     main@RGBVal:
   398                           	callstack 0
   399                           
   400                           ; 8 bytes @ 0x8F
   401   00018F                     	ds	8
   402   000197                     main@carGo:
   403                           	callstack 0
   404                           
   405                           ; 1 bytes @ 0x97
   406   000197                     	ds	1
   407   000198                     main@ambientRGBVal:
   408                           	callstack 0
   409                           
   410                           ; 8 bytes @ 0x98
   411   000198                     	ds	8
   412   0001A0                     main@whiteRGBVal:
   413                           	callstack 0
   414                           
   415                           ; 8 bytes @ 0xA0
   416   0001A0                     	ds	8
   417   0001A8                     main@index:
   418                           	callstack 0
   419                           
   420                           ; 2 bytes @ 0xA8
   421   0001A8                     	ds	2
   422   0001AA                     main@motorRight:
   423                           	callstack 0
   424                           
   425                           ; 9 bytes @ 0xAA
   426   0001AA                     	ds	9
   427   0001B3                     main@motorLeft:
   428                           	callstack 0
   429                           
   430                           ; 9 bytes @ 0xB3
   431   0001B3                     	ds	9
   432                           
   433                           	psect	cstackBANK0
   434   000060                     __pcstackBANK0:
   435                           	callstack 0
   436   000060                     ?_vfprintf:
   437                           	callstack 0
   438   000060                     ?_colorDetect:
   439                           	callstack 0
   440   000060                     vfprintf@fp:
   441                           	callstack 0
   442   000060                     colorDetect@clearRef:
   443                           	callstack 0
   444                           
   445                           ; 4 bytes @ 0x0
   446   000060                     	ds	2
   447   000062                     vfprintf@fmt:
   448                           	callstack 0
   449                           
   450                           ; 2 bytes @ 0x2
   451   000062                     	ds	2
   452   000064                     colorDetect@ambientRGBVal:
   453                           	callstack 0
   454   000064                     vfprintf@ap:
   455                           	callstack 0
   456                           
   457                           ; 2 bytes @ 0x4
   458   000064                     	ds	2
   459   000066                     ?_sprintf:
   460                           	callstack 0
   461   000066                     colorDetect@whiteRGBVal:
   462                           	callstack 0
   463   000066                     sprintf@s:
   464                           	callstack 0
   465                           
   466                           ; 2 bytes @ 0x6
   467   000066                     	ds	2
   468   000068                     colorDetect@mL:
   469                           	callstack 0
   470   000068                     sprintf@fmt:
   471                           	callstack 0
   472                           
   473                           ; 2 bytes @ 0x8
   474   000068                     	ds	2
   475   00006A                     colorDetect@mR:
   476                           	callstack 0
   477                           
   478                           ; 2 bytes @ 0xA
   479   00006A                     	ds	2
   480   00006C                     colorDetect@whiteR:
   481                           	callstack 0
   482                           
   483                           ; 4 bytes @ 0xC
   484   00006C                     	ds	4
   485   000070                     colorDetect@whiteG:
   486                           	callstack 0
   487                           
   488                           ; 4 bytes @ 0x10
   489   000070                     	ds	2
   490   000072                     sprintf@ap:
   491                           	callstack 0
   492                           
   493                           ; 2 bytes @ 0x12
   494   000072                     	ds	2
   495   000074                     colorDetect@whiteB:
   496                           	callstack 0
   497   000074                     sprintf@f:
   498                           	callstack 0
   499                           
   500                           ; 11 bytes @ 0x14
   501   000074                     	ds	4
   502   000078                     colorDetect@ambientR:
   503                           	callstack 0
   504                           
   505                           ; 2 bytes @ 0x18
   506   000078                     	ds	2
   507   00007A                     colorDetect@ambientG:
   508                           	callstack 0
   509                           
   510                           ; 2 bytes @ 0x1A
   511   00007A                     	ds	2
   512   00007C                     colorDetect@ambientB:
   513                           	callstack 0
   514                           
   515                           ; 2 bytes @ 0x1C
   516   00007C                     	ds	2
   517   00007E                     colorDetect@colour_ref:
   518                           	callstack 0
   519                           
   520                           ; 2 bytes @ 0x1E
   521   00007E                     	ds	1
   522   00007F                     return_home_turns@turn_history:
   523                           	callstack 0
   524                           
   525                           ; 2 bytes @ 0x1F
   526   00007F                     	ds	1
   527   000080                     colorDetect@RGBVal:
   528                           	callstack 0
   529                           
   530                           ; 8 bytes @ 0x20
   531   000080                     	ds	1
   532   000081                     return_home_turns@counter_history:
   533                           	callstack 0
   534                           
   535                           ; 2 bytes @ 0x21
   536   000081                     	ds	2
   537   000083                     return_home_turns@index:
   538                           	callstack 0
   539                           
   540                           ; 2 bytes @ 0x23
   541   000083                     	ds	2
   542   000085                     return_home_turns@mL:
   543                           	callstack 0
   544                           
   545                           ; 2 bytes @ 0x25
   546   000085                     	ds	2
   547   000087                     return_home_turns@mR:
   548                           	callstack 0
   549                           
   550                           ; 2 bytes @ 0x27
   551   000087                     	ds	1
   552   000088                     colorDetect@redPrint:
   553                           	callstack 0
   554                           
   555                           ; 4 bytes @ 0x28
   556   000088                     	ds	1
   557   000089                     ??_return_home_turns:
   558                           
   559                           ; 1 bytes @ 0x29
   560   000089                     	ds	2
   561   00008B                     return_home_turns@string1:
   562                           	callstack 0
   563                           
   564                           ; 100 bytes @ 0x2B
   565   00008B                     	ds	1
   566   00008C                     colorDetect@greenPrint:
   567                           	callstack 0
   568                           
   569                           ; 4 bytes @ 0x2C
   570   00008C                     	ds	4
   571   000090                     colorDetect@bluePrint:
   572                           	callstack 0
   573                           
   574                           ; 4 bytes @ 0x30
   575   000090                     	ds	95
   576   0000EF                     return_home_turns@i:
   577                           	callstack 0
   578                           
   579                           ; 2 bytes @ 0x8F
   580   0000EF                     	ds	2
   581   0000F1                     return_home_turns@k:
   582                           	callstack 0
   583                           
   584                           ; 2 bytes @ 0x91
   585   0000F1                     	ds	2
   586                           
   587                           	psect	cstackCOMRAM
   588   000001                     __pcstackCOMRAM:
   589                           	callstack 0
   590   000001                     ??_getCharFromTxBuf:
   591   000001                     putCharToRxBuf@byte:
   592                           	callstack 0
   593   000001                     
   594                           ; 1 bytes @ 0x0
   595   000001                     	ds	2
   596   000003                     ??_HighISR:
   597                           
   598                           ; 1 bytes @ 0x2
   599   000003                     	ds	2
   600   000005                     ??_I2C_2_Master_Idle:
   601   000005                     ?___wmul:
   602                           	callstack 0
   603   000005                     ?___fladd:
   604                           	callstack 0
   605   000005                     ?___xxtofl:
   606                           	callstack 0
   607   000005                     ?___aodiv:
   608                           	callstack 0
   609   000005                     ?___aomod:
   610                           	callstack 0
   611   000005                     putCharToTxBuf@byte:
   612                           	callstack 0
   613   000005                     initDCmotorsPWM@PWMperiod:
   614                           	callstack 0
   615   000005                     DCmotorsInit@mL:
   616                           	callstack 0
   617   000005                     ___wmul@multiplier:
   618                           	callstack 0
   619   000005                     fputc@c:
   620                           	callstack 0
   621   000005                     ___fladd@b:
   622                           	callstack 0
   623   000005                     ___xxtofl@val:
   624                           	callstack 0
   625   000005                     ___aodiv@dividend:
   626                           	callstack 0
   627   000005                     ___aomod@dividend:
   628                           	callstack 0
   629                           
   630                           ; 8 bytes @ 0x4
   631   000005                     	ds	1
   632   000006                     ??_I2C_2_Master_Read:
   633   000006                     I2C_2_Master_Write@data_byte:
   634                           	callstack 0
   635   000006                     TxBufferedString@string:
   636                           	callstack 0
   637                           
   638                           ; 2 bytes @ 0x5
   639   000006                     	ds	1
   640   000007                     color_writetoaddr@value:
   641                           	callstack 0
   642   000007                     I2C_2_Master_Read@ack:
   643                           	callstack 0
   644   000007                     DCmotorsInit@mR:
   645                           	callstack 0
   646   000007                     ___wmul@multiplicand:
   647                           	callstack 0
   648   000007                     fputc@fp:
   649                           	callstack 0
   650                           
   651                           ; 2 bytes @ 0x6
   652   000007                     	ds	1
   653   000008                     color_writetoaddr@address:
   654                           	callstack 0
   655   000008                     I2C_2_Master_Read@tmp:
   656                           	callstack 0
   657                           
   658                           ; 1 bytes @ 0x7
   659   000008                     	ds	1
   660   000009                     ??_fputc:
   661   000009                     ??_color_click_init:
   662   000009                     ??___xxtofl:
   663   000009                     ?_color_read_Red:
   664                           	callstack 0
   665   000009                     ?_color_read_Green:
   666                           	callstack 0
   667   000009                     ?_color_read_Blue:
   668                           	callstack 0
   669   000009                     ?_color_read_Clear:
   670                           	callstack 0
   671   000009                     ___wmul@product:
   672                           	callstack 0
   673   000009                     ___fladd@a:
   674                           	callstack 0
   675                           
   676                           ; 4 bytes @ 0x8
   677   000009                     	ds	2
   678   00000B                     ??_color_read_Red:
   679   00000B                     ??_color_read_Green:
   680   00000B                     ??_color_read_Blue:
   681   00000B                     ??_color_read_Clear:
   682   00000B                     ?___lwdiv:
   683                           	callstack 0
   684   00000B                     ___lwdiv@dividend:
   685                           	callstack 0
   686                           
   687                           ; 2 bytes @ 0xA
   688   00000B                     	ds	2
   689   00000D                     ??___fladd:
   690   00000D                     ___xxtofl@sign:
   691                           	callstack 0
   692   00000D                     ___lwdiv@divisor:
   693                           	callstack 0
   694   00000D                     ___aodiv@divisor:
   695                           	callstack 0
   696   00000D                     ___aomod@divisor:
   697                           	callstack 0
   698                           
   699                           ; 8 bytes @ 0xC
   700   00000D                     	ds	1
   701   00000E                     ___xxtofl@exp:
   702                           	callstack 0
   703   00000E                     color_read_Red@tmp:
   704                           	callstack 0
   705   00000E                     color_read_Green@tmp:
   706                           	callstack 0
   707   00000E                     color_read_Blue@tmp:
   708                           	callstack 0
   709   00000E                     color_read_Clear@tmp:
   710                           	callstack 0
   711   00000E                     fputs@s:
   712                           	callstack 0
   713                           
   714                           ; 2 bytes @ 0xD
   715   00000E                     	ds	1
   716   00000F                     ___lwdiv@quotient:
   717                           	callstack 0
   718   00000F                     ___xxtofl@arg:
   719                           	callstack 0
   720                           
   721                           ; 4 bytes @ 0xE
   722   00000F                     	ds	1
   723   000010                     getColor@v:
   724                           	callstack 0
   725   000010                     fputs@fp:
   726                           	callstack 0
   727                           
   728                           ; 2 bytes @ 0xF
   729   000010                     	ds	1
   730   000011                     ___lwdiv@counter:
   731                           	callstack 0
   732   000011                     ___fladd@signs:
   733                           	callstack 0
   734                           
   735                           ; 1 bytes @ 0x10
   736   000011                     	ds	1
   737   000012                     ___fladd@aexp:
   738                           	callstack 0
   739   000012                     fputs@c:
   740                           	callstack 0
   741   000012                     ambientCal@v:
   742                           	callstack 0
   743   000012                     whiteCal@v:
   744                           	callstack 0
   745   000012                     setMotorPWM@m:
   746                           	callstack 0
   747                           
   748                           ; 2 bytes @ 0x11
   749   000012                     	ds	1
   750   000013                     ___fladd@bexp:
   751                           	callstack 0
   752   000013                     fputs@i:
   753                           	callstack 0
   754                           
   755                           ; 2 bytes @ 0x12
   756   000013                     	ds	1
   757   000014                     ??_ambientCal:
   758   000014                     ??_whiteCal:
   759   000014                     ??_setMotorPWM:
   760   000014                     ___fladd@grs:
   761                           	callstack 0
   762                           
   763                           ; 1 bytes @ 0x13
   764   000014                     	ds	1
   765   000015                     ?___flsub:
   766                           	callstack 0
   767   000015                     ___aodiv@counter:
   768                           	callstack 0
   769   000015                     ___aomod@counter:
   770                           	callstack 0
   771   000015                     pad@fp:
   772                           	callstack 0
   773   000015                     ___flsub@b:
   774                           	callstack 0
   775                           
   776                           ; 4 bytes @ 0x14
   777   000015                     	ds	1
   778   000016                     setMotorPWM@posDuty:
   779                           	callstack 0
   780   000016                     ___aodiv@sign:
   781                           	callstack 0
   782   000016                     ___aomod@sign:
   783                           	callstack 0
   784   000016                     ambientCal@i:
   785                           	callstack 0
   786   000016                     whiteCal@i:
   787                           	callstack 0
   788                           
   789                           ; 2 bytes @ 0x15
   790   000016                     	ds	1
   791   000017                     ?_abs:
   792                           	callstack 0
   793   000017                     setMotorPWM@negDuty:
   794                           	callstack 0
   795   000017                     pad@buf:
   796                           	callstack 0
   797   000017                     abs@a:
   798                           	callstack 0
   799   000017                     ___aodiv@quotient:
   800                           	callstack 0
   801                           
   802                           ; 8 bytes @ 0x16
   803   000017                     	ds	1
   804   000018                     stop@mL:
   805                           	callstack 0
   806   000018                     forward@mL:
   807                           	callstack 0
   808   000018                     reverse@mL:
   809                           	callstack 0
   810                           
   811                           ; 2 bytes @ 0x17
   812   000018                     	ds	1
   813   000019                     ??_abs:
   814   000019                     pad@p:
   815                           	callstack 0
   816   000019                     ___flsub@a:
   817                           	callstack 0
   818                           
   819                           ; 4 bytes @ 0x18
   820   000019                     	ds	1
   821   00001A                     stop@mR:
   822                           	callstack 0
   823   00001A                     forward@mR:
   824                           	callstack 0
   825   00001A                     reverse@mR:
   826                           	callstack 0
   827                           
   828                           ; 2 bytes @ 0x19
   829   00001A                     	ds	1
   830   00001B                     ??_pad:
   831                           
   832                           ; 1 bytes @ 0x1A
   833   00001B                     	ds	1
   834   00001C                     ??_stop:
   835   00001C                     pad@i:
   836                           	callstack 0
   837                           
   838                           ; 2 bytes @ 0x1B
   839   00001C                     	ds	1
   840   00001D                     ?___flmul:
   841                           	callstack 0
   842   00001D                     ___flge@ff1:
   843                           	callstack 0
   844   00001D                     ___flmul@b:
   845                           	callstack 0
   846                           
   847                           ; 4 bytes @ 0x1C
   848   00001D                     	ds	1
   849   00001E                     turnLeft_90@mL:
   850                           	callstack 0
   851   00001E                     turnRight_90@mL:
   852                           	callstack 0
   853   00001E                     turn_180@mL:
   854                           	callstack 0
   855   00001E                     turnRight_135@mL:
   856                           	callstack 0
   857   00001E                     turnLeft_135@mL:
   858                           	callstack 0
   859   00001E                     pad@w:
   860                           	callstack 0
   861                           
   862                           ; 2 bytes @ 0x1D
   863   00001E                     	ds	2
   864   000020                     turnLeft_90@mR:
   865                           	callstack 0
   866   000020                     turnRight_90@mR:
   867                           	callstack 0
   868   000020                     turn_180@mR:
   869                           	callstack 0
   870   000020                     turnRight_135@mR:
   871                           	callstack 0
   872   000020                     turnLeft_135@mR:
   873                           	callstack 0
   874   000020                     dtoa@fp:
   875                           	callstack 0
   876                           
   877                           ; 2 bytes @ 0x1F
   878   000020                     	ds	1
   879   000021                     ___flge@ff2:
   880                           	callstack 0
   881   000021                     ___flmul@a:
   882                           	callstack 0
   883                           
   884                           ; 4 bytes @ 0x20
   885   000021                     	ds	1
   886   000022                     ??_turnRight_90:
   887   000022                     ??_turnLeft_90:
   888   000022                     ??_turn_180:
   889   000022                     ??_turnRight_135:
   890   000022                     ??_turnLeft_135:
   891   000022                     dtoa@d:
   892                           	callstack 0
   893                           
   894                           ; 8 bytes @ 0x21
   895   000022                     	ds	2
   896   000024                     reverseSquareRight@mL:
   897                           	callstack 0
   898   000024                     reverseSquareLeft@mL:
   899                           	callstack 0
   900                           
   901                           ; 2 bytes @ 0x23
   902   000024                     	ds	1
   903   000025                     ??___flmul:
   904   000025                     ??___flge:
   905                           
   906                           ; 1 bytes @ 0x24
   907   000025                     	ds	1
   908   000026                     reverseSquareRight@mR:
   909                           	callstack 0
   910   000026                     reverseSquareLeft@mR:
   911                           	callstack 0
   912                           
   913                           ; 2 bytes @ 0x25
   914   000026                     	ds	2
   915   000028                     ??_reverseSquareRight:
   916   000028                     ??_reverseSquareLeft:
   917                           
   918                           ; 1 bytes @ 0x27
   919   000028                     	ds	1
   920   000029                     ___flmul@sign:
   921                           	callstack 0
   922                           
   923                           ; 1 bytes @ 0x28
   924   000029                     	ds	1
   925   00002A                     ??_dtoa:
   926   00002A                     ___flmul@grs:
   927                           	callstack 0
   928                           
   929                           ; 4 bytes @ 0x29
   930   00002A                     	ds	4
   931   00002E                     ___flmul@aexp:
   932                           	callstack 0
   933                           
   934                           ; 1 bytes @ 0x2D
   935   00002E                     	ds	1
   936   00002F                     ___flmul@bexp:
   937                           	callstack 0
   938                           
   939                           ; 1 bytes @ 0x2E
   940   00002F                     	ds	1
   941   000030                     ___flmul@prod:
   942                           	callstack 0
   943                           
   944                           ; 4 bytes @ 0x2F
   945   000030                     	ds	2
   946   000032                     _dtoa$2702:
   947                           	callstack 0
   948                           
   949                           ; 2 bytes @ 0x31
   950   000032                     	ds	2
   951   000034                     ___flmul@temp:
   952                           	callstack 0
   953   000034                     dtoa@p:
   954                           	callstack 0
   955                           
   956                           ; 2 bytes @ 0x33
   957   000034                     	ds	2
   958   000036                     ?___fldiv:
   959                           	callstack 0
   960   000036                     dtoa@w:
   961                           	callstack 0
   962   000036                     ___fldiv@b:
   963                           	callstack 0
   964                           
   965                           ; 4 bytes @ 0x35
   966   000036                     	ds	2
   967   000038                     dtoa@n:
   968                           	callstack 0
   969                           
   970                           ; 8 bytes @ 0x37
   971   000038                     	ds	2
   972   00003A                     ___fldiv@a:
   973                           	callstack 0
   974                           
   975                           ; 4 bytes @ 0x39
   976   00003A                     	ds	4
   977   00003E                     ??___fldiv:
   978                           
   979                           ; 1 bytes @ 0x3D
   980   00003E                     	ds	2
   981   000040                     dtoa@s:
   982                           	callstack 0
   983                           
   984                           ; 1 bytes @ 0x3F
   985   000040                     	ds	1
   986   000041                     dtoa@i:
   987                           	callstack 0
   988                           
   989                           ; 2 bytes @ 0x40
   990   000041                     	ds	1
   991   000042                     ___fldiv@rem:
   992                           	callstack 0
   993                           
   994                           ; 4 bytes @ 0x41
   995   000042                     	ds	1
   996   000043                     vfpfcnvrt@fp:
   997                           	callstack 0
   998                           
   999                           ; 2 bytes @ 0x42
  1000   000043                     	ds	2
  1001   000045                     vfpfcnvrt@fmt:
  1002                           	callstack 0
  1003                           
  1004                           ; 2 bytes @ 0x44
  1005   000045                     	ds	1
  1006   000046                     ___fldiv@sign:
  1007                           	callstack 0
  1008                           
  1009                           ; 1 bytes @ 0x45
  1010   000046                     	ds	1
  1011   000047                     ___fldiv@new_exp:
  1012                           	callstack 0
  1013   000047                     vfpfcnvrt@ap:
  1014                           	callstack 0
  1015                           
  1016                           ; 2 bytes @ 0x46
  1017   000047                     	ds	2
  1018   000049                     ??_vfpfcnvrt:
  1019   000049                     ___fldiv@grs:
  1020                           	callstack 0
  1021                           
  1022                           ; 4 bytes @ 0x48
  1023   000049                     	ds	2
  1024   00004B                     vfpfcnvrt@convarg:
  1025                           	callstack 0
  1026                           
  1027                           ; 8 bytes @ 0x4A
  1028   00004B                     	ds	2
  1029   00004D                     ___fldiv@bexp:
  1030                           	callstack 0
  1031                           
  1032                           ; 1 bytes @ 0x4C
  1033   00004D                     	ds	1
  1034   00004E                     ___fldiv@aexp:
  1035                           	callstack 0
  1036                           
  1037                           ; 1 bytes @ 0x4D
  1038   00004E                     	ds	1
  1039   00004F                     ??_colorDetect:
  1040                           
  1041                           ; 1 bytes @ 0x4E
  1042   00004F                     	ds	4
  1043   000053                     vfpfcnvrt@cp:
  1044                           	callstack 0
  1045                           
  1046                           ; 2 bytes @ 0x52
  1047   000053                     	ds	2
  1048   000055                     vfprintf@cfmt:
  1049                           	callstack 0
  1050                           
  1051                           ; 2 bytes @ 0x54
  1052   000055                     	ds	2
  1053   000057                     
  1054                           ; 1 bytes @ 0x56
  1055 ;;
  1056 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1057 ;;
  1058 ;; *************** function _main *****************
  1059 ;; Defined at:
  1060 ;;		line 25 in file "MazeRobot.X/main.c"
  1061 ;; Parameters:    Size  Location     Type
  1062 ;;		None
  1063 ;; Auto vars:     Size  Location     Type
  1064 ;;  turn_history   64   67[BANK1 ] unsigned int [32]
  1065 ;;  counter_hist   64    3[BANK1 ] unsigned int [32]
  1066 ;;  motorLeft       9  179[BANK1 ] struct DC_motor
  1067 ;;  motorRight      9  170[BANK1 ] struct DC_motor
  1068 ;;  whiteRGBVal     8  160[BANK1 ] struct RGB
  1069 ;;  ambientRGBVa    8  152[BANK1 ] struct RGB
  1070 ;;  RGBVal          8  143[BANK1 ] struct RGB
  1071 ;;  clearRef        4  137[BANK1 ] struct RGB
  1072 ;;  whiteC          4  131[BANK1 ] struct RGB
  1073 ;;  index           2  168[BANK1 ] unsigned int 
  1074 ;;  colorNum        2  141[BANK1 ] unsigned int 
  1075 ;;  forwardCount    2  135[BANK1 ] unsigned int 
  1076 ;;  carGo           1  151[BANK1 ] unsigned char 
  1077 ;; Return value:  Size  Location     Type
  1078 ;;                  1    wreg      void 
  1079 ;; Registers used:
  1080 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1081 ;; Tracked objects:
  1082 ;;		On entry : 0/0
  1083 ;;		On exit  : 0/0
  1084 ;;		Unchanged: 0/0
  1085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1087 ;;      Locals:         0       0     185       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1088 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1089 ;;      Totals:         0       0     188       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1090 ;;Total ram usage:      188 bytes
  1091 ;; Hardware stack levels required when called: 11
  1092 ;; This function calls:
  1093 ;;		_DCmotorsInit
  1094 ;;		___fldiv
  1095 ;;		___flge
  1096 ;;		___xxtofl
  1097 ;;		_ambientCal
  1098 ;;		_colorDetect
  1099 ;;		_color_click_init
  1100 ;;		_forward
  1101 ;;		_getColor
  1102 ;;		_initDCmotorsPWM
  1103 ;;		_initUSART4
  1104 ;;		_return_home_turns
  1105 ;;		_stop
  1106 ;;		_turn_180
  1107 ;;		_whiteCal
  1108 ;; This function is called by:
  1109 ;;		Startup code after reset
  1110 ;; This function uses a non-reentrant model
  1111 ;;
  1112                           
  1113                           	psect	text0
  1114   001EB4                     __ptext0:
  1115                           	callstack 0
  1116   001EB4                     _main:
  1117                           	callstack 20
  1118   001EB4                     
  1119                           ;MazeRobot.X/main.c: 27:     color_click_init();
  1120   001EB4  ECA6  F025         	call	_color_click_init	;wreg free
  1121   001EB8                     
  1122                           ;MazeRobot.X/main.c: 28:     initUSART4();
  1123   001EB8  ECD8  F025         	call	_initUSART4	;wreg free
  1124   001EBC                     
  1125                           ;MazeRobot.X/main.c: 29:     initDCmotorsPWM(199);
  1126   001EBC  0E00               	movlw	0
  1127   001EBE  6E06               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
  1128   001EC0  0EC7               	movlw	199
  1129   001EC2  6E05               	movwf	initDCmotorsPWM@PWMperiod^0,c
  1130   001EC4  EC14  F023         	call	_initDCmotorsPWM	;wreg free
  1131   001EC8                     
  1132                           ;MazeRobot.X/main.c: 36:     LATDbits.LATD7=0;
  1133   001EC8  9E7C               	bcf	124,7,c	;volatile
  1134   001ECA                     
  1135                           ;MazeRobot.X/main.c: 37:     TRISDbits.TRISD7=0;
  1136   001ECA  9E84               	bcf	132,7,c	;volatile
  1137   001ECC                     
  1138                           ;MazeRobot.X/main.c: 39:     LATHbits.LATH3=0;
  1139   001ECC  9680               	bcf	128,3,c	;volatile
  1140   001ECE                     
  1141                           ;MazeRobot.X/main.c: 40:     TRISHbits.TRISH3=0;
  1142   001ECE  9688               	bcf	136,3,c	;volatile
  1143   001ED0                     
  1144                           ;MazeRobot.X/main.c: 42:     LATDbits.LATD4 = 0;
  1145   001ED0  987C               	bcf	124,4,c	;volatile
  1146   001ED2                     
  1147                           ;MazeRobot.X/main.c: 43:     TRISDbits.TRISD4 = 0;
  1148   001ED2  9884               	bcf	132,4,c	;volatile
  1149   001ED4                     
  1150                           ;MazeRobot.X/main.c: 45:     LATHbits.LATH0 = 0;
  1151   001ED4  9080               	bcf	128,0,c	;volatile
  1152   001ED6                     
  1153                           ;MazeRobot.X/main.c: 46:     TRISHbits.TRISH0 = 0;
  1154   001ED6  9088               	bcf	136,0,c	;volatile
  1155   001ED8                     
  1156                           ;MazeRobot.X/main.c: 48:     LATFbits.LATF0 = 0;
  1157   001ED8  907E               	bcf	126,0,c	;volatile
  1158   001EDA                     
  1159                           ;MazeRobot.X/main.c: 49:     TRISFbits.TRISF0 = 0;
  1160   001EDA  9086               	bcf	134,0,c	;volatile
  1161   001EDC                     
  1162                           ;MazeRobot.X/main.c: 51:     LATHbits.LATH1 = 0;
  1163   001EDC  9280               	bcf	128,1,c	;volatile
  1164   001EDE                     
  1165                           ;MazeRobot.X/main.c: 52:     TRISHbits.TRISH1 = 0;
  1166   001EDE  9288               	bcf	136,1,c	;volatile
  1167   001EE0                     
  1168                           ;MazeRobot.X/main.c: 54:     LATDbits.LATD3 = 0;
  1169   001EE0  967C               	bcf	124,3,c	;volatile
  1170   001EE2                     
  1171                           ;MazeRobot.X/main.c: 55:     TRISDbits.TRISD3 = 0;
  1172   001EE2  9684               	bcf	132,3,c	;volatile
  1173   001EE4                     
  1174                           ;MazeRobot.X/main.c: 58:     LATDbits.LATD4 = 1;
  1175   001EE4  887C               	bsf	124,4,c	;volatile
  1176   001EE6                     
  1177                           ;MazeRobot.X/main.c: 59:     LATFbits.LATF0 = 1;
  1178   001EE6  807E               	bsf	126,0,c	;volatile
  1179   001EE8                     
  1180                           ;MazeRobot.X/main.c: 60:     LATHbits.LATH0 = 1;
  1181   001EE8  8080               	bsf	128,0,c	;volatile
  1182   001EEA                     
  1183                           ;MazeRobot.X/main.c: 61:     LATFbits.LATF0 = 1;
  1184   001EEA  807E               	bsf	126,0,c	;volatile
  1185   001EEC                     
  1186                           ;MazeRobot.X/main.c: 62:     LATDbits.LATD3 = 1;
  1187   001EEC  867C               	bsf	124,3,c	;volatile
  1188   001EEE                     
  1189                           ;MazeRobot.X/main.c: 67:     LATGbits.LATG0=1;
  1190   001EEE  807F               	bsf	127,0,c	;volatile
  1191   001EF0                     
  1192                           ;MazeRobot.X/main.c: 68:     LATEbits.LATE7=1;
  1193   001EF0  8E7D               	bsf	125,7,c	;volatile
  1194   001EF2                     
  1195                           ;MazeRobot.X/main.c: 69:     LATAbits.LATA3=1;
  1196   001EF2  8679               	bsf	121,3,c	;volatile
  1197   001EF4                     
  1198                           ;MazeRobot.X/main.c: 71:     TRISGbits.TRISG0=0;
  1199   001EF4  9087               	bcf	135,0,c	;volatile
  1200   001EF6                     
  1201                           ;MazeRobot.X/main.c: 72:     TRISEbits.TRISE7=0;
  1202   001EF6  9E85               	bcf	133,7,c	;volatile
  1203   001EF8                     
  1204                           ;MazeRobot.X/main.c: 73:     TRISAbits.TRISA3=0;
  1205   001EF8  9681               	bcf	129,3,c	;volatile
  1206   001EFA                     
  1207                           ;MazeRobot.X/main.c: 76:     TRISFbits.TRISF2=1;
  1208   001EFA  8486               	bsf	134,2,c	;volatile
  1209   001EFC                     
  1210                           ;MazeRobot.X/main.c: 77:     ANSELFbits.ANSELF2=0;
  1211   001EFC  010E               	movlb	14	; () banked
  1212   001EFE  95B4               	bcf	180,2,b	;volatile
  1213   001F00                     
  1214                           ; BSR set to: 14
  1215                           ;MazeRobot.X/main.c: 79:     TRISFbits.TRISF3=1;
  1216   001F00  8686               	bsf	134,3,c	;volatile
  1217   001F02                     
  1218                           ; BSR set to: 14
  1219                           ;MazeRobot.X/main.c: 80:     ANSELFbits.ANSELF3=0;
  1220   001F02  97B4               	bcf	180,3,b	;volatile
  1221   001F04                     
  1222                           ; BSR set to: 14
  1223                           ;MazeRobot.X/main.c: 87:     unsigned char carGo = 0;
  1224   001F04  0E00               	movlw	0
  1225   001F06  0101               	movlb	1	; () banked
  1226   001F08  6F97               	movwf	main@carGo& (0+255),b
  1227   001F0A                     
  1228                           ; BSR set to: 1
  1229                           ;MazeRobot.X/main.c: 89:     DC_motor motorLeft,motorRight;;MazeRobot.X/main.c: 90:     
      +                          DCmotorsInit(&motorLeft,&motorRight);
  1230   001F0A  0EB3               	movlw	low main@motorLeft
  1231   001F0C  6E05               	movwf	DCmotorsInit@mL^0,c
  1232   001F0E  0E01               	movlw	high main@motorLeft
  1233   001F10  6E06               	movwf	(DCmotorsInit@mL+1)^0,c
  1234   001F12  0EAA               	movlw	low main@motorRight
  1235   001F14  6E07               	movwf	DCmotorsInit@mR^0,c
  1236   001F16  0E01               	movlw	high main@motorRight
  1237   001F18  6E08               	movwf	(DCmotorsInit@mR+1)^0,c
  1238   001F1A  EC59  F021         	call	_DCmotorsInit	;wreg free
  1239   001F1E                     
  1240                           ;MazeRobot.X/main.c: 92:     unsigned int turn_history[32];;MazeRobot.X/main.c: 93:     
      +                          unsigned int counter_history[32];;MazeRobot.X/main.c: 94:     unsigned int index = 0;
  1241   001F1E  0E00               	movlw	0
  1242   001F20  0101               	movlb	1	; () banked
  1243   001F22  6FA9               	movwf	(main@index+1)& (0+255),b
  1244   001F24  0E00               	movlw	0
  1245   001F26  6FA8               	movwf	main@index& (0+255),b
  1246   001F28                     
  1247                           ; BSR set to: 1
  1248                           ;MazeRobot.X/main.c: 95:     unsigned int forwardCount = 0;
  1249   001F28  0E00               	movlw	0
  1250   001F2A  6F88               	movwf	(main@forwardCount+1)& (0+255),b
  1251   001F2C  0E00               	movlw	0
  1252   001F2E  6F87               	movwf	main@forwardCount& (0+255),b
  1253   001F30                     
  1254                           ; BSR set to: 1
  1255                           ;MazeRobot.X/main.c: 98:     ambientCal(&ambientRGBVal);
  1256   001F30  0E98               	movlw	low main@ambientRGBVal
  1257   001F32  6E12               	movwf	ambientCal@v^0,c
  1258   001F34  0E01               	movlw	high main@ambientRGBVal
  1259   001F36  6E13               	movwf	(ambientCal@v+1)^0,c
  1260   001F38  EC11  F020         	call	_ambientCal	;wreg free
  1261   001F3C                     l5421:
  1262                           
  1263                           ;MazeRobot.X/main.c: 101:         getColor(&RGBVal);
  1264   001F3C  0E8F               	movlw	low main@RGBVal
  1265   001F3E  6E10               	movwf	getColor@v^0,c
  1266   001F40  0E01               	movlw	high main@RGBVal
  1267   001F42  6E11               	movwf	(getColor@v+1)^0,c
  1268   001F44  ECD3  F023         	call	_getColor	;wreg free
  1269   001F48                     
  1270                           ;MazeRobot.X/main.c: 103:         if(!PORTFbits.RF2 && !PORTFbits.RF3){
  1271   001F48  B48E               	btfsc	142,2,c	;volatile
  1272   001F4A  EFA9  F00F         	goto	u5881
  1273   001F4E  EFAB  F00F         	goto	u5880
  1274   001F52                     u5881:
  1275   001F52  EFCE  F00F         	goto	l5437
  1276   001F56                     u5880:
  1277   001F56  B68E               	btfsc	142,3,c	;volatile
  1278   001F58  EFB0  F00F         	goto	u5891
  1279   001F5C  EFB2  F00F         	goto	u5890
  1280   001F60                     u5891:
  1281   001F60  EFCE  F00F         	goto	l5437
  1282   001F64                     u5890:
  1283   001F64                     
  1284                           ;MazeRobot.X/main.c: 104:             LATDbits.LATD7 = 1 , LATHbits.LATH3 = 1;
  1285   001F64  8E7C               	bsf	124,7,c	;volatile
  1286   001F66  8680               	bsf	128,3,c	;volatile
  1287   001F68                     
  1288                           ;MazeRobot.X/main.c: 105:             _delay((unsigned long)((500)*(64000000/4000.0)));
  1289   001F68  0E29               	movlw	41
  1290   001F6A  0101               	movlb	1	; () banked
  1291   001F6C  6F01               	movwf	(??_main+1)& (0+255),b
  1292   001F6E  0E96               	movlw	150
  1293   001F70  6F00               	movwf	??_main& (0+255),b
  1294   001F72  0E7F               	movlw	127
  1295   001F74                     u6087:
  1296   001F74  2EE8               	decfsz	wreg,f,c
  1297   001F76  D7FE               	bra	u6087
  1298   001F78  2F00               	decfsz	??_main& (0+255),f,b
  1299   001F7A  D7FC               	bra	u6087
  1300   001F7C  2F01               	decfsz	(??_main+1)& (0+255),f,b
  1301   001F7E  D7FA               	bra	u6087
  1302   001F80                     
  1303                           ;MazeRobot.X/main.c: 106:             LATDbits.LATD7 = 0 , LATHbits.LATH3 = 0;
  1304   001F80  9E7C               	bcf	124,7,c	;volatile
  1305   001F82  9680               	bcf	128,3,c	;volatile
  1306   001F84                     
  1307                           ;MazeRobot.X/main.c: 107:             carGo = !carGo;
  1308   001F84  0101               	movlb	1	; () banked
  1309   001F86  5197               	movf	main@carGo& (0+255),w,b
  1310   001F88  B4D8               	btfsc	status,2,c
  1311   001F8A  EFC9  F00F         	goto	u5901
  1312   001F8E  EFCC  F00F         	goto	u5900
  1313   001F92                     u5901:
  1314   001F92  0E01               	movlw	1
  1315   001F94  EFCD  F00F         	goto	u5910
  1316   001F98                     u5900:
  1317   001F98  0E00               	movlw	0
  1318   001F9A                     u5910:
  1319   001F9A  6F97               	movwf	main@carGo& (0+255),b
  1320   001F9C                     l5437:
  1321                           
  1322                           ;MazeRobot.X/main.c: 111:         if (!PORTFbits.RF2 & PORTFbits.RF3){
  1323   001F9C  A48E               	btfss	142,2,c	;volatile
  1324   001F9E  EFD3  F00F         	goto	u5921
  1325   001FA2  EFD6  F00F         	goto	u5920
  1326   001FA6                     u5921:
  1327   001FA6  0E01               	movlw	1
  1328   001FA8  EFD7  F00F         	goto	u5930
  1329   001FAC                     u5920:
  1330   001FAC  0E00               	movlw	0
  1331   001FAE                     u5930:
  1332   001FAE  0101               	movlb	1	; () banked
  1333   001FB0  6F00               	movwf	??_main& (0+255),b
  1334   001FB2  6B01               	clrf	(??_main+1)& (0+255),b
  1335   001FB4  B68E               	btfsc	142,3,c	;volatile
  1336   001FB6  EFDF  F00F         	goto	u5941
  1337   001FBA  EFE3  F00F         	goto	u5940
  1338   001FBE                     u5941:
  1339   001FBE  6B02               	clrf	(??_main+2)& (0+255),b
  1340   001FC0  2B02               	incf	(??_main+2)& (0+255),f,b
  1341   001FC2  EFE5  F00F         	goto	u5948
  1342   001FC6                     u5940:
  1343   001FC6  0101               	movlb	1	; () banked
  1344   001FC8  6B02               	clrf	(??_main+2)& (0+255),b
  1345   001FCA                     u5948:
  1346   001FCA  5102               	movf	(??_main+2)& (0+255),w,b
  1347   001FCC  1700               	andwf	??_main& (0+255),f,b
  1348   001FCE  0E00               	movlw	0
  1349   001FD0  1701               	andwf	(??_main+1)& (0+255),f,b
  1350   001FD2  5100               	movf	??_main& (0+255),w,b
  1351   001FD4  1101               	iorwf	(??_main+1)& (0+255),w,b
  1352   001FD6  B4D8               	btfsc	status,2,c
  1353   001FD8  EFF0  F00F         	goto	u5951
  1354   001FDC  EFF2  F00F         	goto	u5950
  1355   001FE0                     u5951:
  1356   001FE0  EFF8  F00F         	goto	l5441
  1357   001FE4                     u5950:
  1358   001FE4                     
  1359                           ; BSR set to: 1
  1360                           ;MazeRobot.X/main.c: 112:             ambientCal (&ambientRGBVal);
  1361   001FE4  0E98               	movlw	low main@ambientRGBVal
  1362   001FE6  6E12               	movwf	ambientCal@v^0,c
  1363   001FE8  0E01               	movlw	high main@ambientRGBVal
  1364   001FEA  6E13               	movwf	(ambientCal@v+1)^0,c
  1365   001FEC  EC11  F020         	call	_ambientCal	;wreg free
  1366   001FF0                     l5441:
  1367                           
  1368                           ;MazeRobot.X/main.c: 115:         if (!PORTFbits.RF3 & PORTFbits.RF2){
  1369   001FF0  A68E               	btfss	142,3,c	;volatile
  1370   001FF2  EFFD  F00F         	goto	u5961
  1371   001FF6  EF00  F010         	goto	u5960
  1372   001FFA                     u5961:
  1373   001FFA  0E01               	movlw	1
  1374   001FFC  EF01  F010         	goto	u5970
  1375   002000                     u5960:
  1376   002000  0E00               	movlw	0
  1377   002002                     u5970:
  1378   002002  0101               	movlb	1	; () banked
  1379   002004  6F00               	movwf	??_main& (0+255),b
  1380   002006  6B01               	clrf	(??_main+1)& (0+255),b
  1381   002008  B48E               	btfsc	142,2,c	;volatile
  1382   00200A  EF09  F010         	goto	u5981
  1383   00200E  EF0D  F010         	goto	u5980
  1384   002012                     u5981:
  1385   002012  6B02               	clrf	(??_main+2)& (0+255),b
  1386   002014  2B02               	incf	(??_main+2)& (0+255),f,b
  1387   002016  EF0F  F010         	goto	u5988
  1388   00201A                     u5980:
  1389   00201A  0101               	movlb	1	; () banked
  1390   00201C  6B02               	clrf	(??_main+2)& (0+255),b
  1391   00201E                     u5988:
  1392   00201E  5102               	movf	(??_main+2)& (0+255),w,b
  1393   002020  1700               	andwf	??_main& (0+255),f,b
  1394   002022  0E00               	movlw	0
  1395   002024  1701               	andwf	(??_main+1)& (0+255),f,b
  1396   002026  5100               	movf	??_main& (0+255),w,b
  1397   002028  1101               	iorwf	(??_main+1)& (0+255),w,b
  1398   00202A  B4D8               	btfsc	status,2,c
  1399   00202C  EF1A  F010         	goto	u5991
  1400   002030  EF1C  F010         	goto	u5990
  1401   002034                     u5991:
  1402   002034  EF22  F010         	goto	l5445
  1403   002038                     u5990:
  1404   002038                     
  1405                           ; BSR set to: 1
  1406                           ;MazeRobot.X/main.c: 116:             whiteCal (&whiteRGBVal);
  1407   002038  0EA0               	movlw	low main@whiteRGBVal
  1408   00203A  6E12               	movwf	whiteCal@v^0,c
  1409   00203C  0E01               	movlw	high main@whiteRGBVal
  1410   00203E  6E13               	movwf	(whiteCal@v+1)^0,c
  1411   002040  EC9F  F01F         	call	_whiteCal	;wreg free
  1412   002044                     l5445:
  1413                           
  1414                           ;MazeRobot.X/main.c: 119:         LATHbits.LATH3=!LATHbits.LATH3;
  1415   002044  A680               	btfss	128,3,c	;volatile
  1416   002046  EF27  F010         	goto	u6001
  1417   00204A  EF2C  F010         	goto	u6000
  1418   00204E                     u6001:
  1419   00204E  0101               	movlb	1	; () banked
  1420   002050  6B00               	clrf	??_main& (0+255),b
  1421   002052  2B00               	incf	??_main& (0+255),f,b
  1422   002054  EF2E  F010         	goto	u6018
  1423   002058                     u6000:
  1424   002058  0101               	movlb	1	; () banked
  1425   00205A  6B00               	clrf	??_main& (0+255),b
  1426   00205C                     u6018:
  1427   00205C  4700               	rlncf	??_main& (0+255),f,b
  1428   00205E  4700               	rlncf	??_main& (0+255),f,b
  1429   002060  4700               	rlncf	??_main& (0+255),f,b
  1430   002062  5080               	movf	128,w,c	;volatile
  1431   002064  1900               	xorwf	??_main& (0+255),w,b
  1432   002066  0BF7               	andlw	-9
  1433   002068  1900               	xorwf	??_main& (0+255),w,b
  1434   00206A  6E80               	movwf	128,c	;volatile
  1435   00206C                     
  1436                           ; BSR set to: 1
  1437                           ;MazeRobot.X/main.c: 121:         whiteC = whiteRGBVal.C;
  1438   00206C  C1A6  F005         	movff	main@whiteRGBVal+6,___xxtofl@val
  1439   002070  C1A7  F006         	movff	main@whiteRGBVal+7,___xxtofl@val+1
  1440   002074  6A07               	clrf	(___xxtofl@val+2)^0,c
  1441   002076  6A08               	clrf	(___xxtofl@val+3)^0,c
  1442   002078  0E00               	movlw	0
  1443   00207A  ECED  F018         	call	___xxtofl
  1444   00207E  C005  F183         	movff	?___xxtofl,main@whiteC
  1445   002082  C006  F184         	movff	?___xxtofl+1,main@whiteC+1
  1446   002086  C007  F185         	movff	?___xxtofl+2,main@whiteC+2
  1447   00208A  C008  F186         	movff	?___xxtofl+3,main@whiteC+3
  1448   00208E                     
  1449                           ;MazeRobot.X/main.c: 122:         clearRef = RGBVal.C/whiteC;
  1450   00208E  C195  F005         	movff	main@RGBVal+6,___xxtofl@val
  1451   002092  C196  F006         	movff	main@RGBVal+7,___xxtofl@val+1
  1452   002096  6A07               	clrf	(___xxtofl@val+2)^0,c
  1453   002098  6A08               	clrf	(___xxtofl@val+3)^0,c
  1454   00209A  0E00               	movlw	0
  1455   00209C  ECED  F018         	call	___xxtofl
  1456   0020A0  C005  F036         	movff	?___xxtofl,___fldiv@b
  1457   0020A4  C006  F037         	movff	?___xxtofl+1,___fldiv@b+1
  1458   0020A8  C007  F038         	movff	?___xxtofl+2,___fldiv@b+2
  1459   0020AC  C008  F039         	movff	?___xxtofl+3,___fldiv@b+3
  1460   0020B0  C183  F03A         	movff	main@whiteC,___fldiv@a
  1461   0020B4  C184  F03B         	movff	main@whiteC+1,___fldiv@a+1
  1462   0020B8  C185  F03C         	movff	main@whiteC+2,___fldiv@a+2
  1463   0020BC  C186  F03D         	movff	main@whiteC+3,___fldiv@a+3
  1464   0020C0  ECA6  F013         	call	___fldiv	;wreg free
  1465   0020C4  C036  F189         	movff	?___fldiv,main@clearRef
  1466   0020C8  C037  F18A         	movff	?___fldiv+1,main@clearRef+1
  1467   0020CC  C038  F18B         	movff	?___fldiv+2,main@clearRef+2
  1468   0020D0  C039  F18C         	movff	?___fldiv+3,main@clearRef+3
  1469   0020D4                     
  1470                           ;MazeRobot.X/main.c: 124:         if ((clearRef > 0.12) && carGo){
  1471   0020D4  0E8F               	movlw	143
  1472   0020D6  6E1D               	movwf	___flge@ff1^0,c
  1473   0020D8  0EC2               	movlw	194
  1474   0020DA  6E1E               	movwf	(___flge@ff1+1)^0,c
  1475   0020DC  0EF5               	movlw	245
  1476   0020DE  6E1F               	movwf	(___flge@ff1+2)^0,c
  1477   0020E0  0E3D               	movlw	61
  1478   0020E2  6E20               	movwf	(___flge@ff1+3)^0,c
  1479   0020E4  C189  F021         	movff	main@clearRef,___flge@ff2
  1480   0020E8  C18A  F022         	movff	main@clearRef+1,___flge@ff2+1
  1481   0020EC  C18B  F023         	movff	main@clearRef+2,___flge@ff2+2
  1482   0020F0  C18C  F024         	movff	main@clearRef+3,___flge@ff2+3
  1483   0020F4  EC1D  F01F         	call	___flge	;wreg free
  1484   0020F8  B0D8               	btfsc	status,0,c
  1485   0020FA  EF81  F010         	goto	u6021
  1486   0020FE  EF83  F010         	goto	u6020
  1487   002102                     u6021:
  1488   002102  EF4E  F011         	goto	l5485
  1489   002106                     u6020:
  1490   002106  0101               	movlb	1	; () banked
  1491   002108  5197               	movf	main@carGo& (0+255),w,b
  1492   00210A  B4D8               	btfsc	status,2,c
  1493   00210C  EF8A  F010         	goto	u6031
  1494   002110  EF8C  F010         	goto	u6030
  1495   002114                     u6031:
  1496   002114  EF4E  F011         	goto	l5485
  1497   002118                     u6030:
  1498   002118                     
  1499                           ; BSR set to: 1
  1500                           ;MazeRobot.X/main.c: 125:             turn_history[index] = 0;
  1501   002118  90D8               	bcf	status,0,c
  1502   00211A  35A8               	rlcf	main@index& (0+255),w,b
  1503   00211C  6ED9               	movwf	fsr2l,c
  1504   00211E  35A9               	rlcf	(main@index+1)& (0+255),w,b
  1505   002120  6EDA               	movwf	fsr2h,c
  1506   002122  0E43               	movlw	low main@turn_history
  1507   002124  26D9               	addwf	fsr2l,f,c
  1508   002126  0E01               	movlw	high main@turn_history
  1509   002128  22DA               	addwfc	fsr2h,f,c
  1510   00212A  0E00               	movlw	0
  1511   00212C  6EDE               	movwf	postinc2,c
  1512   00212E  0E00               	movlw	0
  1513   002130  6EDD               	movwf	postdec2,c
  1514                           
  1515                           ;MazeRobot.X/main.c: 126:             counter_history[index] = forwardCount;
  1516   002132  90D8               	bcf	status,0,c
  1517   002134  35A8               	rlcf	main@index& (0+255),w,b
  1518   002136  6ED9               	movwf	fsr2l,c
  1519   002138  35A9               	rlcf	(main@index+1)& (0+255),w,b
  1520   00213A  6EDA               	movwf	fsr2h,c
  1521   00213C  0E03               	movlw	low main@counter_history
  1522   00213E  26D9               	addwf	fsr2l,f,c
  1523   002140  0E01               	movlw	high main@counter_history
  1524   002142  22DA               	addwfc	fsr2h,f,c
  1525   002144  C187  FFDE         	movff	main@forwardCount,postinc2
  1526   002148  C188  FFDD         	movff	main@forwardCount+1,postdec2
  1527   00214C                     
  1528                           ; BSR set to: 1
  1529                           ;MazeRobot.X/main.c: 128:             index +=1;
  1530   00214C  4BA8               	infsnz	main@index& (0+255),f,b
  1531   00214E  2BA9               	incf	(main@index+1)& (0+255),f,b
  1532   002150                     
  1533                           ; BSR set to: 1
  1534                           ;MazeRobot.X/main.c: 129:             forwardCount = 0;
  1535   002150  0E00               	movlw	0
  1536   002152  6F88               	movwf	(main@forwardCount+1)& (0+255),b
  1537   002154  0E00               	movlw	0
  1538   002156  6F87               	movwf	main@forwardCount& (0+255),b
  1539   002158                     
  1540                           ; BSR set to: 1
  1541                           ;MazeRobot.X/main.c: 131:             colorNum = colorDetect(clearRef,&ambientRGBVal,&wh
      +                          iteRGBVal,&motorLeft,&motorRight);
  1542   002158  C189  F060         	movff	main@clearRef,colorDetect@clearRef
  1543   00215C  C18A  F061         	movff	main@clearRef+1,colorDetect@clearRef+1
  1544   002160  C18B  F062         	movff	main@clearRef+2,colorDetect@clearRef+2
  1545   002164  C18C  F063         	movff	main@clearRef+3,colorDetect@clearRef+3
  1546   002168  0E98               	movlw	low main@ambientRGBVal
  1547   00216A  0100               	movlb	0	; () banked
  1548   00216C  6F64               	movwf	colorDetect@ambientRGBVal& (0+255),b
  1549   00216E  0E01               	movlw	high main@ambientRGBVal
  1550   002170  6F65               	movwf	(colorDetect@ambientRGBVal+1)& (0+255),b
  1551   002172  0EA0               	movlw	low main@whiteRGBVal
  1552   002174  6F66               	movwf	colorDetect@whiteRGBVal& (0+255),b
  1553   002176  0E01               	movlw	high main@whiteRGBVal
  1554   002178  6F67               	movwf	(colorDetect@whiteRGBVal+1)& (0+255),b
  1555   00217A  0EB3               	movlw	low main@motorLeft
  1556   00217C  6F68               	movwf	colorDetect@mL& (0+255),b
  1557   00217E  0E01               	movlw	high main@motorLeft
  1558   002180  6F69               	movwf	(colorDetect@mL+1)& (0+255),b
  1559   002182  0EAA               	movlw	low main@motorRight
  1560   002184  6F6A               	movwf	colorDetect@mR& (0+255),b
  1561   002186  0E01               	movlw	high main@motorRight
  1562   002188  6F6B               	movwf	(colorDetect@mR+1)& (0+255),b
  1563   00218A  EC14  F007         	call	_colorDetect	;wreg free
  1564   00218E  C060  F18D         	movff	?_colorDetect,main@colorNum
  1565   002192  C061  F18E         	movff	?_colorDetect+1,main@colorNum+1
  1566   002196                     
  1567                           ;MazeRobot.X/main.c: 133:             _delay((unsigned long)((1000)*(64000000/4000.0)));
  1568   002196  0E52               	movlw	82
  1569   002198  0101               	movlb	1	; () banked
  1570   00219A  6F01               	movwf	(??_main+1)& (0+255),b
  1571   00219C  0E2B               	movlw	43
  1572   00219E  6F00               	movwf	??_main& (0+255),b
  1573   0021A0  0E00               	movlw	0
  1574   0021A2                     u6097:
  1575   0021A2  2EE8               	decfsz	wreg,f,c
  1576   0021A4  D7FE               	bra	u6097
  1577   0021A6  2F00               	decfsz	??_main& (0+255),f,b
  1578   0021A8  D7FC               	bra	u6097
  1579   0021AA  2F01               	decfsz	(??_main+1)& (0+255),f,b
  1580   0021AC  D7FA               	bra	u6097
  1581   0021AE  F000               	nop	
  1582   0021B0                     
  1583                           ;MazeRobot.X/main.c: 135:             if (colorNum == 8){
  1584   0021B0  0E08               	movlw	8
  1585   0021B2  0101               	movlb	1	; () banked
  1586   0021B4  198D               	xorwf	main@colorNum& (0+255),w,b
  1587   0021B6  118E               	iorwf	(main@colorNum+1)& (0+255),w,b
  1588   0021B8  A4D8               	btfss	status,2,c
  1589   0021BA  EFE1  F010         	goto	u6041
  1590   0021BE  EFE3  F010         	goto	u6040
  1591   0021C2                     u6041:
  1592   0021C2  EF25  F011         	goto	l5479
  1593   0021C6                     u6040:
  1594   0021C6                     
  1595                           ; BSR set to: 1
  1596                           ;MazeRobot.X/main.c: 136:                 turn_history[index] = colorNum;
  1597   0021C6  90D8               	bcf	status,0,c
  1598   0021C8  35A8               	rlcf	main@index& (0+255),w,b
  1599   0021CA  6ED9               	movwf	fsr2l,c
  1600   0021CC  35A9               	rlcf	(main@index+1)& (0+255),w,b
  1601   0021CE  6EDA               	movwf	fsr2h,c
  1602   0021D0  0E43               	movlw	low main@turn_history
  1603   0021D2  26D9               	addwf	fsr2l,f,c
  1604   0021D4  0E01               	movlw	high main@turn_history
  1605   0021D6  22DA               	addwfc	fsr2h,f,c
  1606   0021D8  C18D  FFDE         	movff	main@colorNum,postinc2
  1607   0021DC  C18E  FFDD         	movff	main@colorNum+1,postdec2
  1608                           
  1609                           ;MazeRobot.X/main.c: 137:                 counter_history[index] = 1;
  1610   0021E0  90D8               	bcf	status,0,c
  1611   0021E2  35A8               	rlcf	main@index& (0+255),w,b
  1612   0021E4  6ED9               	movwf	fsr2l,c
  1613   0021E6  35A9               	rlcf	(main@index+1)& (0+255),w,b
  1614   0021E8  6EDA               	movwf	fsr2h,c
  1615   0021EA  0E03               	movlw	low main@counter_history
  1616   0021EC  26D9               	addwf	fsr2l,f,c
  1617   0021EE  0E01               	movlw	high main@counter_history
  1618   0021F0  22DA               	addwfc	fsr2h,f,c
  1619   0021F2  0E01               	movlw	1
  1620   0021F4  6EDE               	movwf	postinc2,c
  1621   0021F6  0E00               	movlw	0
  1622   0021F8  6EDD               	movwf	postdec2,c
  1623   0021FA                     
  1624                           ; BSR set to: 1
  1625                           ;MazeRobot.X/main.c: 138:                 turn_180(&motorLeft,&motorRight);
  1626   0021FA  0EB3               	movlw	low main@motorLeft
  1627   0021FC  6E1E               	movwf	turn_180@mL^0,c
  1628   0021FE  0E01               	movlw	high main@motorLeft
  1629   002200  6E1F               	movwf	(turn_180@mL+1)^0,c
  1630   002202  0EAA               	movlw	low main@motorRight
  1631   002204  6E20               	movwf	turn_180@mR^0,c
  1632   002206  0E01               	movlw	high main@motorRight
  1633   002208  6E21               	movwf	(turn_180@mR+1)^0,c
  1634   00220A  ECDA  F017         	call	_turn_180	;wreg free
  1635   00220E                     
  1636                           ;MazeRobot.X/main.c: 139:                 LATDbits.LATD7 = 1 , LATHbits.LATH3 = 1;
  1637   00220E  8E7C               	bsf	124,7,c	;volatile
  1638   002210  8680               	bsf	128,3,c	;volatile
  1639   002212                     
  1640                           ;MazeRobot.X/main.c: 140:                 return_home_turns(&turn_history, &counter_hist
      +                          ory, (index), &motorLeft, &motorRight);
  1641   002212  0E43               	movlw	low main@turn_history
  1642   002214  0100               	movlb	0	; () banked
  1643   002216  6F7F               	movwf	return_home_turns@turn_history& (0+255),b
  1644   002218  0E01               	movlw	high main@turn_history
  1645   00221A  6F80               	movwf	(return_home_turns@turn_history+1)& (0+255),b
  1646   00221C  0E03               	movlw	low main@counter_history
  1647   00221E  6F81               	movwf	return_home_turns@counter_history& (0+255),b
  1648   002220  0E01               	movlw	high main@counter_history
  1649   002222  6F82               	movwf	(return_home_turns@counter_history+1)& (0+255),b
  1650   002224  C1A8  F083         	movff	main@index,return_home_turns@index
  1651   002228  C1A9  F084         	movff	main@index+1,return_home_turns@index+1
  1652   00222C  0EB3               	movlw	low main@motorLeft
  1653   00222E  6F85               	movwf	return_home_turns@mL& (0+255),b
  1654   002230  0E01               	movlw	high main@motorLeft
  1655   002232  6F86               	movwf	(return_home_turns@mL+1)& (0+255),b
  1656   002234  0EAA               	movlw	low main@motorRight
  1657   002236  6F87               	movwf	return_home_turns@mR& (0+255),b
  1658   002238  0E01               	movlw	high main@motorRight
  1659   00223A  6F88               	movwf	(return_home_turns@mR+1)& (0+255),b
  1660   00223C  ECB2  F016         	call	_return_home_turns	;wreg free
  1661   002240                     
  1662                           ;MazeRobot.X/main.c: 141:                 carGo = 0;
  1663   002240  0E00               	movlw	0
  1664   002242  0101               	movlb	1	; () banked
  1665   002244  6F97               	movwf	main@carGo& (0+255),b
  1666                           
  1667                           ;MazeRobot.X/main.c: 142:             }
  1668   002246  EF3F  F011         	goto	l5481
  1669   00224A                     l5479:
  1670                           
  1671                           ; BSR set to: 1
  1672                           ;MazeRobot.X/main.c: 145:             turn_history[index] = colorNum;
  1673   00224A  90D8               	bcf	status,0,c
  1674   00224C  35A8               	rlcf	main@index& (0+255),w,b
  1675   00224E  6ED9               	movwf	fsr2l,c
  1676   002250  35A9               	rlcf	(main@index+1)& (0+255),w,b
  1677   002252  6EDA               	movwf	fsr2h,c
  1678   002254  0E43               	movlw	low main@turn_history
  1679   002256  26D9               	addwf	fsr2l,f,c
  1680   002258  0E01               	movlw	high main@turn_history
  1681   00225A  22DA               	addwfc	fsr2h,f,c
  1682   00225C  C18D  FFDE         	movff	main@colorNum,postinc2
  1683   002260  C18E  FFDD         	movff	main@colorNum+1,postdec2
  1684                           
  1685                           ;MazeRobot.X/main.c: 146:             counter_history[index] = 1;
  1686   002264  90D8               	bcf	status,0,c
  1687   002266  35A8               	rlcf	main@index& (0+255),w,b
  1688   002268  6ED9               	movwf	fsr2l,c
  1689   00226A  35A9               	rlcf	(main@index+1)& (0+255),w,b
  1690   00226C  6EDA               	movwf	fsr2h,c
  1691   00226E  0E03               	movlw	low main@counter_history
  1692   002270  26D9               	addwf	fsr2l,f,c
  1693   002272  0E01               	movlw	high main@counter_history
  1694   002274  22DA               	addwfc	fsr2h,f,c
  1695   002276  0E01               	movlw	1
  1696   002278  6EDE               	movwf	postinc2,c
  1697   00227A  0E00               	movlw	0
  1698   00227C  6EDD               	movwf	postdec2,c
  1699   00227E                     l5481:
  1700                           
  1701                           ; BSR set to: 1
  1702                           ;MazeRobot.X/main.c: 149:             index += 1;
  1703   00227E  4BA8               	infsnz	main@index& (0+255),f,b
  1704   002280  2BA9               	incf	(main@index+1)& (0+255),f,b
  1705   002282                     
  1706                           ; BSR set to: 1
  1707                           ;MazeRobot.X/main.c: 150:             _delay((unsigned long)((1000)*(64000000/4000.0)));
  1708   002282  0E52               	movlw	82
  1709   002284  0101               	movlb	1	; () banked
  1710   002286  6F01               	movwf	(??_main+1)& (0+255),b
  1711   002288  0E2B               	movlw	43
  1712   00228A  6F00               	movwf	??_main& (0+255),b
  1713   00228C  0E00               	movlw	0
  1714   00228E                     u6107:
  1715   00228E  2EE8               	decfsz	wreg,f,c
  1716   002290  D7FE               	bra	u6107
  1717   002292  2F00               	decfsz	??_main& (0+255),f,b
  1718   002294  D7FC               	bra	u6107
  1719   002296  2F01               	decfsz	(??_main+1)& (0+255),f,b
  1720   002298  D7FA               	bra	u6107
  1721   00229A  F000               	nop	
  1722   00229C                     l5485:
  1723                           
  1724                           ;MazeRobot.X/main.c: 153:         if (carGo){
  1725   00229C  0101               	movlb	1	; () banked
  1726   00229E  5197               	movf	main@carGo& (0+255),w,b
  1727   0022A0  B4D8               	btfsc	status,2,c
  1728   0022A2  EF55  F011         	goto	u6051
  1729   0022A6  EF57  F011         	goto	u6050
  1730   0022AA                     u6051:
  1731   0022AA  EF77  F011         	goto	l5493
  1732   0022AE                     u6050:
  1733   0022AE                     
  1734                           ; BSR set to: 1
  1735                           ;MazeRobot.X/main.c: 154:             forward(&motorLeft,&motorRight);
  1736   0022AE  0EB3               	movlw	low main@motorLeft
  1737   0022B0  6E18               	movwf	forward@mL^0,c
  1738   0022B2  0E01               	movlw	high main@motorLeft
  1739   0022B4  6E19               	movwf	(forward@mL+1)^0,c
  1740   0022B6  0EAA               	movlw	low main@motorRight
  1741   0022B8  6E1A               	movwf	forward@mR^0,c
  1742   0022BA  0E01               	movlw	high main@motorRight
  1743   0022BC  6E1B               	movwf	(forward@mR+1)^0,c
  1744   0022BE  EC83  F020         	call	_forward	;wreg free
  1745   0022C2                     
  1746                           ;MazeRobot.X/main.c: 155:             LATDbits.LATD4 = !LATDbits.LATD4;
  1747   0022C2  A87C               	btfss	124,4,c	;volatile
  1748   0022C4  EF66  F011         	goto	u6061
  1749   0022C8  EF6B  F011         	goto	u6060
  1750   0022CC                     u6061:
  1751   0022CC  0101               	movlb	1	; () banked
  1752   0022CE  6B00               	clrf	??_main& (0+255),b
  1753   0022D0  2B00               	incf	??_main& (0+255),f,b
  1754   0022D2  EF6D  F011         	goto	u6078
  1755   0022D6                     u6060:
  1756   0022D6  0101               	movlb	1	; () banked
  1757   0022D8  6B00               	clrf	??_main& (0+255),b
  1758   0022DA                     u6078:
  1759   0022DA  3B00               	swapf	??_main& (0+255),f,b
  1760   0022DC  507C               	movf	124,w,c	;volatile
  1761   0022DE  1900               	xorwf	??_main& (0+255),w,b
  1762   0022E0  0BEF               	andlw	-17
  1763   0022E2  1900               	xorwf	??_main& (0+255),w,b
  1764   0022E4  6E7C               	movwf	124,c	;volatile
  1765   0022E6                     
  1766                           ; BSR set to: 1
  1767                           ;MazeRobot.X/main.c: 156:             forwardCount +=1;
  1768   0022E6  4B87               	infsnz	main@forwardCount& (0+255),f,b
  1769   0022E8  2B88               	incf	(main@forwardCount+1)& (0+255),f,b
  1770                           
  1771                           ;MazeRobot.X/main.c: 157:         }
  1772   0022EA  EF81  F011         	goto	l5495
  1773   0022EE                     l5493:
  1774                           
  1775                           ; BSR set to: 1
  1776   0022EE  0EB3               	movlw	low main@motorLeft
  1777   0022F0  6E18               	movwf	stop@mL^0,c
  1778   0022F2  0E01               	movlw	high main@motorLeft
  1779   0022F4  6E19               	movwf	(stop@mL+1)^0,c
  1780   0022F6  0EAA               	movlw	low main@motorRight
  1781   0022F8  6E1A               	movwf	stop@mR^0,c
  1782   0022FA  0E01               	movlw	high main@motorRight
  1783   0022FC  6E1B               	movwf	(stop@mR+1)^0,c
  1784   0022FE  EC27  F022         	call	_stop	;wreg free
  1785   002302                     l5495:
  1786                           
  1787                           ;MazeRobot.X/main.c: 161:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1788   002302  0E05               	movlw	5
  1789   002304  0101               	movlb	1	; () banked
  1790   002306  6F01               	movwf	(??_main+1)& (0+255),b
  1791   002308  0E0F               	movlw	15
  1792   00230A  6F00               	movwf	??_main& (0+255),b
  1793   00230C  0EF1               	movlw	241
  1794   00230E                     u6117:
  1795   00230E  2EE8               	decfsz	wreg,f,c
  1796   002310  D7FE               	bra	u6117
  1797   002312  2F00               	decfsz	??_main& (0+255),f,b
  1798   002314  D7FC               	bra	u6117
  1799   002316  2F01               	decfsz	(??_main+1)& (0+255),f,b
  1800   002318  D7FA               	bra	u6117
  1801   00231A  EF9E  F00F         	goto	l5421
  1802   00231E  EF3B  F000         	goto	start
  1803   002322                     __end_of_main:
  1804                           	callstack 0
  1805                           
  1806 ;; *************** function _whiteCal *****************
  1807 ;; Defined at:
  1808 ;;		line 115 in file "MazeRobot.X/color.c"
  1809 ;; Parameters:    Size  Location     Type
  1810 ;;  v               2   17[COMRAM] PTR struct RGB
  1811 ;;		 -> main@whiteRGBVal(8), 
  1812 ;; Auto vars:     Size  Location     Type
  1813 ;;  i               2   21[COMRAM] int 
  1814 ;; Return value:  Size  Location     Type
  1815 ;;                  1    wreg      void 
  1816 ;; Registers used:
  1817 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1818 ;; Tracked objects:
  1819 ;;		On entry : 0/0
  1820 ;;		On exit  : 0/0
  1821 ;;		Unchanged: 0/0
  1822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1823 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1824 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1825 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1826 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1827 ;;Total ram usage:        6 bytes
  1828 ;; Hardware stack levels used: 1
  1829 ;; Hardware stack levels required when called: 6
  1830 ;; This function calls:
  1831 ;;		_getColor
  1832 ;; This function is called by:
  1833 ;;		_main
  1834 ;; This function uses a non-reentrant model
  1835 ;;
  1836                           
  1837                           	psect	text1
  1838   003F3E                     __ptext1:
  1839                           	callstack 0
  1840   003F3E                     _whiteCal:
  1841                           	callstack 24
  1842   003F3E                     
  1843                           ;MazeRobot.X/color.c: 117:     for(int i = 0;i<20;i++){
  1844   003F3E  0E00               	movlw	0
  1845   003F40  6E17               	movwf	(whiteCal@i+1)^0,c
  1846   003F42  0E00               	movlw	0
  1847   003F44  6E16               	movwf	whiteCal@i^0,c
  1848   003F46                     l4329:
  1849                           
  1850                           ;MazeRobot.X/color.c: 118:             LATDbits.LATD7 = !LATDbits.LATD7;
  1851   003F46  AE7C               	btfss	124,7,c	;volatile
  1852   003F48  EFA8  F01F         	goto	u4381
  1853   003F4C  EFAC  F01F         	goto	u4380
  1854   003F50                     u4381:
  1855   003F50  6A14               	clrf	??_whiteCal^0,c
  1856   003F52  2A14               	incf	??_whiteCal^0,f,c
  1857   003F54  EFAD  F01F         	goto	u4398
  1858   003F58                     u4380:
  1859   003F58  6A14               	clrf	??_whiteCal^0,c
  1860   003F5A                     u4398:
  1861   003F5A  3214               	rrcf	??_whiteCal^0,f,c
  1862   003F5C  3214               	rrcf	??_whiteCal^0,f,c
  1863   003F5E  507C               	movf	124,w,c	;volatile
  1864   003F60  1814               	xorwf	??_whiteCal^0,w,c
  1865   003F62  0B7F               	andlw	-129
  1866   003F64  1814               	xorwf	??_whiteCal^0,w,c
  1867   003F66  6E7C               	movwf	124,c	;volatile
  1868   003F68                     
  1869                           ;MazeRobot.X/color.c: 119:             _delay((unsigned long)((100)*(64000000/4000.0)));
  1870   003F68  0E09               	movlw	9
  1871   003F6A  6E15               	movwf	(??_whiteCal+1)^0,c
  1872   003F6C  0E1E               	movlw	30
  1873   003F6E  6E14               	movwf	??_whiteCal^0,c
  1874   003F70  0EE4               	movlw	228
  1875   003F72                     u6127:
  1876   003F72  2EE8               	decfsz	wreg,f,c
  1877   003F74  D7FE               	bra	u6127
  1878   003F76  2E14               	decfsz	??_whiteCal^0,f,c
  1879   003F78  D7FC               	bra	u6127
  1880   003F7A  2E15               	decfsz	(??_whiteCal+1)^0,f,c
  1881   003F7C  D7FA               	bra	u6127
  1882   003F7E  D000               	nop2	
  1883                           
  1884                           ;MazeRobot.X/color.c: 120:             }
  1885   003F80  4A16               	infsnz	whiteCal@i^0,f,c
  1886   003F82  2A17               	incf	(whiteCal@i+1)^0,f,c
  1887   003F84  BE17               	btfsc	(whiteCal@i+1)^0,7,c
  1888   003F86  EFCE  F01F         	goto	u4401
  1889   003F8A  5017               	movf	(whiteCal@i+1)^0,w,c
  1890   003F8C  E109               	bnz	u4400
  1891   003F8E  0E14               	movlw	20
  1892   003F90  5C16               	subwf	whiteCal@i^0,w,c
  1893   003F92  A0D8               	btfss	status,0,c
  1894   003F94  EFCE  F01F         	goto	u4401
  1895   003F98  EFD0  F01F         	goto	u4400
  1896   003F9C                     u4401:
  1897   003F9C  EFA3  F01F         	goto	l4329
  1898   003FA0                     u4400:
  1899   003FA0                     
  1900                           ;MazeRobot.X/color.c: 121:             LATDbits.LATD7 = !LATDbits.LATD7;
  1901   003FA0  AE7C               	btfss	124,7,c	;volatile
  1902   003FA2  EFD5  F01F         	goto	u4411
  1903   003FA6  EFD9  F01F         	goto	u4410
  1904   003FAA                     u4411:
  1905   003FAA  6A14               	clrf	??_whiteCal^0,c
  1906   003FAC  2A14               	incf	??_whiteCal^0,f,c
  1907   003FAE  EFDA  F01F         	goto	u4428
  1908   003FB2                     u4410:
  1909   003FB2  6A14               	clrf	??_whiteCal^0,c
  1910   003FB4                     u4428:
  1911   003FB4  3214               	rrcf	??_whiteCal^0,f,c
  1912   003FB6  3214               	rrcf	??_whiteCal^0,f,c
  1913   003FB8  507C               	movf	124,w,c	;volatile
  1914   003FBA  1814               	xorwf	??_whiteCal^0,w,c
  1915   003FBC  0B7F               	andlw	-129
  1916   003FBE  1814               	xorwf	??_whiteCal^0,w,c
  1917   003FC0  6E7C               	movwf	124,c	;volatile
  1918   003FC2                     
  1919                           ;MazeRobot.X/color.c: 122:             _delay((unsigned long)((500)*(64000000/4000.0)));
  1920   003FC2  0E29               	movlw	41
  1921   003FC4  6E15               	movwf	(??_whiteCal+1)^0,c
  1922   003FC6  0E96               	movlw	150
  1923   003FC8  6E14               	movwf	??_whiteCal^0,c
  1924   003FCA  0E7F               	movlw	127
  1925   003FCC                     u6137:
  1926   003FCC  2EE8               	decfsz	wreg,f,c
  1927   003FCE  D7FE               	bra	u6137
  1928   003FD0  2E14               	decfsz	??_whiteCal^0,f,c
  1929   003FD2  D7FC               	bra	u6137
  1930   003FD4  2E15               	decfsz	(??_whiteCal+1)^0,f,c
  1931   003FD6  D7FA               	bra	u6137
  1932   003FD8  F000               	nop	
  1933   003FDA                     
  1934                           ;MazeRobot.X/color.c: 123:             getColor(v);
  1935   003FDA  C012  F010         	movff	whiteCal@v,getColor@v
  1936   003FDE  C013  F011         	movff	whiteCal@v+1,getColor@v+1
  1937   003FE2  ECD3  F023         	call	_getColor	;wreg free
  1938   003FE6                     
  1939                           ;MazeRobot.X/color.c: 124:             _delay((unsigned long)((500)*(64000000/4000.0)));
  1940   003FE6  0E29               	movlw	41
  1941   003FE8  6E15               	movwf	(??_whiteCal+1)^0,c
  1942   003FEA  0E96               	movlw	150
  1943   003FEC  6E14               	movwf	??_whiteCal^0,c
  1944   003FEE  0E7F               	movlw	127
  1945   003FF0                     u6147:
  1946   003FF0  2EE8               	decfsz	wreg,f,c
  1947   003FF2  D7FE               	bra	u6147
  1948   003FF4  2E14               	decfsz	??_whiteCal^0,f,c
  1949   003FF6  D7FC               	bra	u6147
  1950   003FF8  2E15               	decfsz	(??_whiteCal+1)^0,f,c
  1951   003FFA  D7FA               	bra	u6147
  1952   003FFC  F000               	nop	
  1953   003FFE                     
  1954                           ;MazeRobot.X/color.c: 125:             LATDbits.LATD7 = !LATDbits.LATD7;
  1955   003FFE  AE7C               	btfss	124,7,c	;volatile
  1956   004000  EF04  F020         	goto	u4431
  1957   004004  EF08  F020         	goto	u4430
  1958   004008                     u4431:
  1959   004008  6A14               	clrf	??_whiteCal^0,c
  1960   00400A  2A14               	incf	??_whiteCal^0,f,c
  1961   00400C  EF09  F020         	goto	u4448
  1962   004010                     u4430:
  1963   004010  6A14               	clrf	??_whiteCal^0,c
  1964   004012                     u4448:
  1965   004012  3214               	rrcf	??_whiteCal^0,f,c
  1966   004014  3214               	rrcf	??_whiteCal^0,f,c
  1967   004016  507C               	movf	124,w,c	;volatile
  1968   004018  1814               	xorwf	??_whiteCal^0,w,c
  1969   00401A  0B7F               	andlw	-129
  1970   00401C  1814               	xorwf	??_whiteCal^0,w,c
  1971   00401E  6E7C               	movwf	124,c	;volatile
  1972   004020  0012               	return		;funcret
  1973   004022                     __end_of_whiteCal:
  1974                           	callstack 0
  1975                           
  1976 ;; *************** function _return_home_turns *****************
  1977 ;; Defined at:
  1978 ;;		line 224 in file "MazeRobot.X/color.c"
  1979 ;; Parameters:    Size  Location     Type
  1980 ;;  turn_history    2   31[BANK0 ] PTR unsigned int 
  1981 ;;		 -> main@turn_history(64), 
  1982 ;;  counter_hist    2   33[BANK0 ] PTR unsigned int 
  1983 ;;		 -> main@counter_history(64), 
  1984 ;;  index           2   35[BANK0 ] unsigned int 
  1985 ;;  mL              2   37[BANK0 ] PTR struct DC_motor
  1986 ;;		 -> main@motorLeft(9), 
  1987 ;;  mR              2   39[BANK0 ] PTR struct DC_motor
  1988 ;;		 -> main@motorRight(9), 
  1989 ;; Auto vars:     Size  Location     Type
  1990 ;;  i               2  143[BANK0 ] int 
  1991 ;;  string1       100   43[BANK0 ] unsigned char [100]
  1992 ;;  k               2  145[BANK0 ] int 
  1993 ;; Return value:  Size  Location     Type
  1994 ;;                  1    wreg      void 
  1995 ;; Registers used:
  1996 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1997 ;; Tracked objects:
  1998 ;;		On entry : 0/0
  1999 ;;		On exit  : 0/0
  2000 ;;		Unchanged: 0/0
  2001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2002 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2003 ;;      Locals:         0     104       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2004 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2005 ;;      Totals:         0     116       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2006 ;;Total ram usage:      116 bytes
  2007 ;; Hardware stack levels used: 1
  2008 ;; Hardware stack levels required when called: 10
  2009 ;; This function calls:
  2010 ;;		_TxBufferedString
  2011 ;;		_forward
  2012 ;;		_sendTxBuf
  2013 ;;		_sprintf
  2014 ;;		_stop
  2015 ;;		_turnLeft_135
  2016 ;;		_turnLeft_90
  2017 ;;		_turnRight_135
  2018 ;;		_turnRight_90
  2019 ;;		_turn_180
  2020 ;; This function is called by:
  2021 ;;		_main
  2022 ;; This function uses a non-reentrant model
  2023 ;;
  2024                           
  2025                           	psect	text2
  2026   002D64                     __ptext2:
  2027                           	callstack 0
  2028   002D64                     _return_home_turns:
  2029                           	callstack 20
  2030   002D64                     
  2031                           ;MazeRobot.X/color.c: 224: void return_home_turns(unsigned int *turn_history, unsigned i
      +                          nt *counter_history, unsigned int index, DC_motor *mL, DC_motor *mR);MazeRobot.X/color.c
      +                          : 225: {;MazeRobot.X/color.c: 228:     for (int k = (index); k >= 0; k --){
  2032   002D64  C083  F0F1         	movff	return_home_turns@index,return_home_turns@k
  2033   002D68  C084  F0F2         	movff	return_home_turns@index+1,return_home_turns@k+1
  2034   002D6C  0100               	movlb	0	; () banked
  2035   002D6E  BFF2               	btfsc	(return_home_turns@k+1)& (0+255),7,b
  2036   002D70  EFBE  F016         	goto	u5850
  2037   002D74  EFBC  F016         	goto	u5851
  2038   002D78                     u5851:
  2039   002D78  EFC0  F016         	goto	l5295
  2040   002D7C                     u5850:
  2041   002D7C  EFD9  F017         	goto	l135
  2042   002D80                     l5295:
  2043                           
  2044                           ; BSR set to: 0
  2045                           ;MazeRobot.X/color.c: 229:             char string1[100];;MazeRobot.X/color.c: 230:     
      +                                  _delay((unsigned long)((2)*(64000000/4000.0)));
  2046   002D80  0E2A               	movlw	42
  2047   002D82  0100               	movlb	0	; () banked
  2048   002D84  6F89               	movwf	??_return_home_turns& (0+255),b
  2049   002D86  0E8D               	movlw	141
  2050   002D88                     u6157:
  2051   002D88  2EE8               	decfsz	wreg,f,c
  2052   002D8A  D7FE               	bra	u6157
  2053   002D8C  2F89               	decfsz	??_return_home_turns& (0+255),f,b
  2054   002D8E  D7FC               	bra	u6157
  2055   002D90  D000               	nop2	
  2056   002D92                     
  2057                           ;MazeRobot.X/color.c: 231:             sprintf(string1,"K:%d I:%d C:%d T:%d \r",k,index,
      +                          counter_history[k],turn_history[k]);
  2058   002D92  0E8B               	movlw	low return_home_turns@string1
  2059   002D94  0100               	movlb	0	; () banked
  2060   002D96  6F66               	movwf	sprintf@s& (0+255),b
  2061   002D98  0E00               	movlw	high return_home_turns@string1
  2062   002D9A  6F67               	movwf	(sprintf@s+1)& (0+255),b
  2063   002D9C  0E01               	movlw	low STR_1
  2064   002D9E  6F68               	movwf	sprintf@fmt& (0+255),b
  2065   002DA0  0E0E               	movlw	high STR_1
  2066   002DA2  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  2067   002DA4  C0F1  F06A         	movff	return_home_turns@k,?_sprintf+4
  2068   002DA8  C0F2  F06B         	movff	return_home_turns@k+1,?_sprintf+5
  2069   002DAC  C083  F06C         	movff	return_home_turns@index,?_sprintf+6
  2070   002DB0  C084  F06D         	movff	return_home_turns@index+1,?_sprintf+7
  2071   002DB4  90D8               	bcf	status,0,c
  2072   002DB6  35F1               	rlcf	return_home_turns@k& (0+255),w,b
  2073   002DB8  6ED9               	movwf	fsr2l,c
  2074   002DBA  35F2               	rlcf	(return_home_turns@k+1)& (0+255),w,b
  2075   002DBC  6EDA               	movwf	fsr2h,c
  2076   002DBE  5181               	movf	return_home_turns@counter_history& (0+255),w,b
  2077   002DC0  26D9               	addwf	fsr2l,f,c
  2078   002DC2  5182               	movf	(return_home_turns@counter_history+1)& (0+255),w,b
  2079   002DC4  22DA               	addwfc	fsr2h,f,c
  2080   002DC6  CFDE F06E          	movff	postinc2,?_sprintf+8
  2081   002DCA  CFDD F06F          	movff	postdec2,?_sprintf+9
  2082   002DCE  90D8               	bcf	status,0,c
  2083   002DD0  35F1               	rlcf	return_home_turns@k& (0+255),w,b
  2084   002DD2  6ED9               	movwf	fsr2l,c
  2085   002DD4  35F2               	rlcf	(return_home_turns@k+1)& (0+255),w,b
  2086   002DD6  6EDA               	movwf	fsr2h,c
  2087   002DD8  517F               	movf	return_home_turns@turn_history& (0+255),w,b
  2088   002DDA  26D9               	addwf	fsr2l,f,c
  2089   002DDC  5180               	movf	(return_home_turns@turn_history+1)& (0+255),w,b
  2090   002DDE  22DA               	addwfc	fsr2h,f,c
  2091   002DE0  CFDE F070          	movff	postinc2,?_sprintf+10
  2092   002DE4  CFDD F071          	movff	postdec2,?_sprintf+11
  2093   002DE8  EC57  F024         	call	_sprintf	;wreg free
  2094   002DEC                     
  2095                           ;MazeRobot.X/color.c: 232:             TxBufferedString(string1);
  2096   002DEC  0E8B               	movlw	low return_home_turns@string1
  2097   002DEE  6E06               	movwf	TxBufferedString@string^0,c
  2098   002DF0  0E00               	movlw	high return_home_turns@string1
  2099   002DF2  6E07               	movwf	(TxBufferedString@string+1)^0,c
  2100   002DF4  ECC0  F025         	call	_TxBufferedString	;wreg free
  2101   002DF8                     
  2102                           ;MazeRobot.X/color.c: 233:             sendTxBuf();
  2103   002DF8  EC7B  F026         	call	_sendTxBuf	;wreg free
  2104   002DFC                     
  2105                           ;MazeRobot.X/color.c: 234:             _delay((unsigned long)((2)*(64000000/4000.0)));
  2106   002DFC  0E2A               	movlw	42
  2107   002DFE  0100               	movlb	0	; () banked
  2108   002E00  6F89               	movwf	??_return_home_turns& (0+255),b
  2109   002E02  0E8D               	movlw	141
  2110   002E04                     u6167:
  2111   002E04  2EE8               	decfsz	wreg,f,c
  2112   002E06  D7FE               	bra	u6167
  2113   002E08  2F89               	decfsz	??_return_home_turns& (0+255),f,b
  2114   002E0A  D7FC               	bra	u6167
  2115   002E0C  D000               	nop2	
  2116                           
  2117                           ;MazeRobot.X/color.c: 236:             switch (turn_history[k]){
  2118   002E0E  EF8A  F017         	goto	l5331
  2119   002E12                     l5305:
  2120                           
  2121                           ; BSR set to: 0
  2122                           ;MazeRobot.X/color.c: 238:                     turnLeft_90(mL,mR);
  2123   002E12  C085  F01E         	movff	return_home_turns@mL,turnLeft_90@mL
  2124   002E16  C086  F01F         	movff	return_home_turns@mL+1,turnLeft_90@mL+1
  2125   002E1A  C087  F020         	movff	return_home_turns@mR,turnLeft_90@mR
  2126   002E1E  C088  F021         	movff	return_home_turns@mR+1,turnLeft_90@mR+1
  2127   002E22  ECE0  F01D         	call	_turnLeft_90	;wreg free
  2128                           
  2129                           ;MazeRobot.X/color.c: 239:                     break;
  2130   002E26  EFC2  F017         	goto	l5333
  2131   002E2A                     l5307:
  2132                           
  2133                           ; BSR set to: 0
  2134                           ;MazeRobot.X/color.c: 241:                     turnRight_90(mL,mR);
  2135   002E2A  C085  F01E         	movff	return_home_turns@mL,turnRight_90@mL
  2136   002E2E  C086  F01F         	movff	return_home_turns@mL+1,turnRight_90@mL+1
  2137   002E32  C087  F020         	movff	return_home_turns@mR,turnRight_90@mR
  2138   002E36  C088  F021         	movff	return_home_turns@mR+1,turnRight_90@mR+1
  2139   002E3A  EC41  F01D         	call	_turnRight_90	;wreg free
  2140                           
  2141                           ;MazeRobot.X/color.c: 242:                     break;
  2142   002E3E  EFC2  F017         	goto	l5333
  2143   002E42                     l5309:
  2144                           
  2145                           ; BSR set to: 0
  2146                           ;MazeRobot.X/color.c: 244:                     turn_180(mL,mR);
  2147   002E42  C085  F01E         	movff	return_home_turns@mL,turn_180@mL
  2148   002E46  C086  F01F         	movff	return_home_turns@mL+1,turn_180@mL+1
  2149   002E4A  C087  F020         	movff	return_home_turns@mR,turn_180@mR
  2150   002E4E  C088  F021         	movff	return_home_turns@mR+1,turn_180@mR+1
  2151   002E52  ECDA  F017         	call	_turn_180	;wreg free
  2152                           
  2153                           ;MazeRobot.X/color.c: 245:                     break;
  2154   002E56  EFC2  F017         	goto	l5333
  2155   002E5A                     l5315:
  2156                           
  2157                           ; BSR set to: 0
  2158                           ;MazeRobot.X/color.c: 253:                     turnLeft_135(mL,mR);
  2159   002E5A  C085  F01E         	movff	return_home_turns@mL,turnLeft_135@mL
  2160   002E5E  C086  F01F         	movff	return_home_turns@mL+1,turnLeft_135@mL+1
  2161   002E62  C087  F020         	movff	return_home_turns@mR,turnLeft_135@mR
  2162   002E66  C088  F021         	movff	return_home_turns@mR+1,turnLeft_135@mR+1
  2163   002E6A  EC7F  F01E         	call	_turnLeft_135	;wreg free
  2164                           
  2165                           ;MazeRobot.X/color.c: 254:                     break;
  2166   002E6E  EFC2  F017         	goto	l5333
  2167   002E72                     l5317:
  2168                           
  2169                           ; BSR set to: 0
  2170                           ;MazeRobot.X/color.c: 256:                     turnRight_135(mL,mR);
  2171   002E72  C085  F01E         	movff	return_home_turns@mL,turnRight_135@mL
  2172   002E76  C086  F01F         	movff	return_home_turns@mL+1,turnRight_135@mL+1
  2173   002E7A  C087  F020         	movff	return_home_turns@mR,turnRight_135@mR
  2174   002E7E  C088  F021         	movff	return_home_turns@mR+1,turnRight_135@mR+1
  2175   002E82  ECA2  F01C         	call	_turnRight_135	;wreg free
  2176                           
  2177                           ;MazeRobot.X/color.c: 257:                     break;
  2178   002E86  EFC2  F017         	goto	l5333
  2179   002E8A                     l5319:
  2180                           
  2181                           ; BSR set to: 0
  2182                           ;MazeRobot.X/color.c: 259:                     forward(mL,mR);
  2183   002E8A  C085  F018         	movff	return_home_turns@mL,forward@mL
  2184   002E8E  C086  F019         	movff	return_home_turns@mL+1,forward@mL+1
  2185   002E92  C087  F01A         	movff	return_home_turns@mR,forward@mR
  2186   002E96  C088  F01B         	movff	return_home_turns@mR+1,forward@mR+1
  2187   002E9A  EC83  F020         	call	_forward	;wreg free
  2188   002E9E                     
  2189                           ;MazeRobot.X/color.c: 260:                     int i = counter_history[k];
  2190   002E9E  90D8               	bcf	status,0,c
  2191   002EA0  0100               	movlb	0	; () banked
  2192   002EA2  35F1               	rlcf	return_home_turns@k& (0+255),w,b
  2193   002EA4  6ED9               	movwf	fsr2l,c
  2194   002EA6  35F2               	rlcf	(return_home_turns@k+1)& (0+255),w,b
  2195   002EA8  6EDA               	movwf	fsr2h,c
  2196   002EAA  5181               	movf	return_home_turns@counter_history& (0+255),w,b
  2197   002EAC  26D9               	addwf	fsr2l,f,c
  2198   002EAE  5182               	movf	(return_home_turns@counter_history+1)& (0+255),w,b
  2199   002EB0  22DA               	addwfc	fsr2h,f,c
  2200   002EB2  CFDE F0EF          	movff	postinc2,return_home_turns@i
  2201   002EB6  CFDD F0F0          	movff	postdec2,return_home_turns@i+1
  2202                           
  2203                           ;MazeRobot.X/color.c: 261:                     while(i>0){
  2204   002EBA  EF6E  F017         	goto	l131
  2205   002EBE                     l5323:
  2206                           
  2207                           ; BSR set to: 0
  2208                           ;MazeRobot.X/color.c: 262:                     i--;
  2209   002EBE  07EF               	decf	return_home_turns@i& (0+255),f,b
  2210   002EC0  A0D8               	btfss	status,0,c
  2211   002EC2  07F0               	decf	(return_home_turns@i+1)& (0+255),f,b
  2212   002EC4                     
  2213                           ; BSR set to: 0
  2214                           ;MazeRobot.X/color.c: 263:                     _delay((unsigned long)((50)*(64000000/400
      +                          0.0)));
  2215   002EC4  0E05               	movlw	5
  2216   002EC6  0100               	movlb	0	; () banked
  2217   002EC8  6F8A               	movwf	(??_return_home_turns+1)& (0+255),b
  2218   002ECA  0E0F               	movlw	15
  2219   002ECC  6F89               	movwf	??_return_home_turns& (0+255),b
  2220   002ECE  0EF1               	movlw	241
  2221   002ED0                     u6177:
  2222   002ED0  2EE8               	decfsz	wreg,f,c
  2223   002ED2  D7FE               	bra	u6177
  2224   002ED4  2F89               	decfsz	??_return_home_turns& (0+255),f,b
  2225   002ED6  D7FC               	bra	u6177
  2226   002ED8  2F8A               	decfsz	(??_return_home_turns+1)& (0+255),f,b
  2227   002EDA  D7FA               	bra	u6177
  2228   002EDC                     l131:
  2229                           
  2230                           ;MazeRobot.X/color.c: 261:                     while(i>0){
  2231   002EDC  0100               	movlb	0	; () banked
  2232   002EDE  BFF0               	btfsc	(return_home_turns@i+1)& (0+255),7,b
  2233   002EE0  EF7C  F017         	goto	u5860
  2234   002EE4  51F0               	movf	(return_home_turns@i+1)& (0+255),w,b
  2235   002EE6  E106               	bnz	u5861
  2236   002EE8  05EF               	decf	return_home_turns@i& (0+255),w,b
  2237   002EEA  B0D8               	btfsc	status,0,c
  2238   002EEC  EF7A  F017         	goto	u5861
  2239   002EF0  EF7C  F017         	goto	u5860
  2240   002EF4                     u5861:
  2241   002EF4  EF5F  F017         	goto	l5323
  2242   002EF8                     u5860:
  2243   002EF8  EFC2  F017         	goto	l5333
  2244   002EFC                     l5327:
  2245                           
  2246                           ; BSR set to: 0
  2247                           ;MazeRobot.X/color.c: 267:                     stop(mL,mR);
  2248   002EFC  C085  F018         	movff	return_home_turns@mL,stop@mL
  2249   002F00  C086  F019         	movff	return_home_turns@mL+1,stop@mL+1
  2250   002F04  C087  F01A         	movff	return_home_turns@mR,stop@mR
  2251   002F08  C088  F01B         	movff	return_home_turns@mR+1,stop@mR+1
  2252   002F0C  EC27  F022         	call	_stop	;wreg free
  2253                           
  2254                           ;MazeRobot.X/color.c: 268:                     break;
  2255   002F10  EFC2  F017         	goto	l5333
  2256   002F14                     l5331:
  2257   002F14  90D8               	bcf	status,0,c
  2258   002F16  0100               	movlb	0	; () banked
  2259   002F18  35F1               	rlcf	return_home_turns@k& (0+255),w,b
  2260   002F1A  6ED9               	movwf	fsr2l,c
  2261   002F1C  35F2               	rlcf	(return_home_turns@k+1)& (0+255),w,b
  2262   002F1E  6EDA               	movwf	fsr2h,c
  2263   002F20  517F               	movf	return_home_turns@turn_history& (0+255),w,b
  2264   002F22  26D9               	addwf	fsr2l,f,c
  2265   002F24  5180               	movf	(return_home_turns@turn_history+1)& (0+255),w,b
  2266   002F26  22DA               	addwfc	fsr2h,f,c
  2267   002F28  CFDE F089          	movff	postinc2,??_return_home_turns
  2268   002F2C  CFDD F08A          	movff	postdec2,??_return_home_turns+1
  2269                           
  2270                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2271                           ; Switch size 1, requested type "simple"
  2272                           ; Number of cases is 1, Range of values is 0 to 0
  2273                           ; switch strategies available:
  2274                           ; Name         Instructions Cycles
  2275                           ; simple_byte            4     3 (average)
  2276                           ;	Chosen strategy is simple_byte
  2277   002F30  518A               	movf	(??_return_home_turns+1)& (0+255),w,b
  2278   002F32  0A00               	xorlw	0	; case 0
  2279   002F34  B4D8               	btfsc	status,2,c
  2280   002F36  EF9F  F017         	goto	l5521
  2281   002F3A  EF7E  F017         	goto	l5327
  2282   002F3E                     l5521:
  2283                           
  2284                           ; BSR set to: 0
  2285                           ; Switch size 1, requested type "simple"
  2286                           ; Number of cases is 8, Range of values is 0 to 7
  2287                           ; switch strategies available:
  2288                           ; Name         Instructions Cycles
  2289                           ; simple_byte           25    13 (average)
  2290                           ;	Chosen strategy is simple_byte
  2291   002F3E  5189               	movf	??_return_home_turns& (0+255),w,b
  2292   002F40  0A00               	xorlw	0	; case 0
  2293   002F42  B4D8               	btfsc	status,2,c
  2294   002F44  EF45  F017         	goto	l5319
  2295   002F48  0A01               	xorlw	1	; case 1
  2296   002F4A  B4D8               	btfsc	status,2,c
  2297   002F4C  EF09  F017         	goto	l5305
  2298   002F50  0A03               	xorlw	3	; case 2
  2299   002F52  B4D8               	btfsc	status,2,c
  2300   002F54  EF15  F017         	goto	l5307
  2301   002F58  0A01               	xorlw	1	; case 3
  2302   002F5A  B4D8               	btfsc	status,2,c
  2303   002F5C  EF21  F017         	goto	l5309
  2304   002F60  0A07               	xorlw	7	; case 4
  2305   002F62  B4D8               	btfsc	status,2,c
  2306   002F64  EF09  F017         	goto	l5305
  2307   002F68  0A01               	xorlw	1	; case 5
  2308   002F6A  B4D8               	btfsc	status,2,c
  2309   002F6C  EF15  F017         	goto	l5307
  2310   002F70  0A03               	xorlw	3	; case 6
  2311   002F72  B4D8               	btfsc	status,2,c
  2312   002F74  EF2D  F017         	goto	l5315
  2313   002F78  0A01               	xorlw	1	; case 7
  2314   002F7A  B4D8               	btfsc	status,2,c
  2315   002F7C  EF39  F017         	goto	l5317
  2316   002F80  EF7E  F017         	goto	l5327
  2317   002F84                     l5333:
  2318                           
  2319                           ;MazeRobot.X/color.c: 285:             _delay((unsigned long)((50)*(64000000/4000.0)));
  2320   002F84  0E05               	movlw	5
  2321   002F86  0100               	movlb	0	; () banked
  2322   002F88  6F8A               	movwf	(??_return_home_turns+1)& (0+255),b
  2323   002F8A  0E0F               	movlw	15
  2324   002F8C  6F89               	movwf	??_return_home_turns& (0+255),b
  2325   002F8E  0EF1               	movlw	241
  2326   002F90                     u6187:
  2327   002F90  2EE8               	decfsz	wreg,f,c
  2328   002F92  D7FE               	bra	u6187
  2329   002F94  2F89               	decfsz	??_return_home_turns& (0+255),f,b
  2330   002F96  D7FC               	bra	u6187
  2331   002F98  2F8A               	decfsz	(??_return_home_turns+1)& (0+255),f,b
  2332   002F9A  D7FA               	bra	u6187
  2333   002F9C                     
  2334                           ;MazeRobot.X/color.c: 286:         }
  2335   002F9C  0100               	movlb	0	; () banked
  2336   002F9E  07F1               	decf	return_home_turns@k& (0+255),f,b
  2337   002FA0  A0D8               	btfss	status,0,c
  2338   002FA2  07F2               	decf	(return_home_turns@k+1)& (0+255),f,b
  2339   002FA4  BFF2               	btfsc	(return_home_turns@k+1)& (0+255),7,b
  2340   002FA6  EFD9  F017         	goto	u5870
  2341   002FAA  EFD7  F017         	goto	u5871
  2342   002FAE                     u5871:
  2343   002FAE  EFC0  F016         	goto	l5295
  2344   002FB2                     u5870:
  2345   002FB2                     l135:
  2346                           
  2347                           ; BSR set to: 0
  2348   002FB2  0012               	return		;funcret
  2349   002FB4                     __end_of_return_home_turns:
  2350                           	callstack 0
  2351                           
  2352 ;; *************** function _sprintf *****************
  2353 ;; Defined at:
  2354 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_sprintf.c"
  2355 ;; Parameters:    Size  Location     Type
  2356 ;;  s               2    6[BANK0 ] PTR unsigned char 
  2357 ;;		 -> ADC2String@buf(40), return_home_turns@string1(100), 
  2358 ;;  fmt             2    8[BANK0 ] PTR const unsigned char 
  2359 ;;		 -> STR_2(15), STR_1(22), 
  2360 ;; Auto vars:     Size  Location     Type
  2361 ;;  f              11   20[BANK0 ] struct _IO_FILE
  2362 ;;  ap              2   18[BANK0 ] PTR void [1]
  2363 ;;		 -> ?_sprintf(2), 
  2364 ;;  ret             2    0        int 
  2365 ;; Return value:  Size  Location     Type
  2366 ;;                  2    6[BANK0 ] int 
  2367 ;; Registers used:
  2368 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2369 ;; Tracked objects:
  2370 ;;		On entry : 0/0
  2371 ;;		On exit  : 0/0
  2372 ;;		Unchanged: 0/0
  2373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2374 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2375 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2377 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2378 ;;Total ram usage:       25 bytes
  2379 ;; Hardware stack levels used: 1
  2380 ;; Hardware stack levels required when called: 9
  2381 ;; This function calls:
  2382 ;;		_vfprintf
  2383 ;; This function is called by:
  2384 ;;		_return_home_turns
  2385 ;;		_ADC2String
  2386 ;; This function uses a non-reentrant model
  2387 ;;
  2388                           
  2389                           	psect	text3
  2390   0048AE                     __ptext3:
  2391                           	callstack 0
  2392   0048AE                     _sprintf:
  2393                           	callstack 20
  2394   0048AE  0E6A               	movlw	low (?_sprintf+4)
  2395   0048B0  0100               	movlb	0	; () banked
  2396   0048B2  6F72               	movwf	sprintf@ap& (0+255),b
  2397   0048B4  0E00               	movlw	high (?_sprintf+4)
  2398   0048B6  6F73               	movwf	(sprintf@ap+1)& (0+255),b
  2399   0048B8  C066  F074         	movff	sprintf@s,sprintf@f
  2400   0048BC  C067  F075         	movff	sprintf@s+1,sprintf@f+1
  2401   0048C0                     
  2402                           ; BSR set to: 0
  2403   0048C0  0E00               	movlw	0
  2404   0048C2  6F78               	movwf	(sprintf@f+4)& (0+255),b
  2405   0048C4  0E00               	movlw	0
  2406   0048C6  6F77               	movwf	(sprintf@f+3)& (0+255),b
  2407   0048C8                     
  2408                           ; BSR set to: 0
  2409   0048C8  0E00               	movlw	0
  2410   0048CA  6F7E               	movwf	(sprintf@f+10)& (0+255),b
  2411   0048CC  0E00               	movlw	0
  2412   0048CE  6F7D               	movwf	(sprintf@f+9)& (0+255),b
  2413   0048D0                     
  2414                           ; BSR set to: 0
  2415   0048D0  0E74               	movlw	low sprintf@f
  2416   0048D2  6F60               	movwf	vfprintf@fp& (0+255),b
  2417   0048D4  0E00               	movlw	high sprintf@f
  2418   0048D6  6F61               	movwf	(vfprintf@fp+1)& (0+255),b
  2419   0048D8  C068  F062         	movff	sprintf@fmt,vfprintf@fmt
  2420   0048DC  C069  F063         	movff	sprintf@fmt+1,vfprintf@fmt+1
  2421   0048E0  0E72               	movlw	low sprintf@ap
  2422   0048E2  6F64               	movwf	vfprintf@ap& (0+255),b
  2423   0048E4  0E00               	movlw	high sprintf@ap
  2424   0048E6  6F65               	movwf	(vfprintf@ap+1)& (0+255),b
  2425   0048E8  EC2D  F024         	call	_vfprintf	;wreg free
  2426   0048EC  0100               	movlb	0	; () banked
  2427   0048EE  5177               	movf	(sprintf@f+3)& (0+255),w,b
  2428   0048F0  2566               	addwf	sprintf@s& (0+255),w,b
  2429   0048F2  6ED9               	movwf	fsr2l,c
  2430   0048F4  5178               	movf	(sprintf@f+4)& (0+255),w,b
  2431   0048F6  2167               	addwfc	(sprintf@s+1)& (0+255),w,b
  2432   0048F8  6EDA               	movwf	fsr2h,c
  2433   0048FA  0E00               	movlw	0
  2434   0048FC  6EDF               	movwf	indf2,c
  2435   0048FE                     
  2436                           ; BSR set to: 0
  2437   0048FE  0012               	return		;funcret
  2438   004900                     __end_of_sprintf:
  2439                           	callstack 0
  2440                           
  2441 ;; *************** function _vfprintf *****************
  2442 ;; Defined at:
  2443 ;;		line 1520 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2444 ;; Parameters:    Size  Location     Type
  2445 ;;  fp              2    0[BANK0 ] PTR struct _IO_FILE
  2446 ;;		 -> sprintf@f(11), 
  2447 ;;  fmt             2    2[BANK0 ] PTR const unsigned char 
  2448 ;;		 -> STR_2(15), STR_1(22), 
  2449 ;;  ap              2    4[BANK0 ] PTR PTR void 
  2450 ;;		 -> sprintf@ap(2), 
  2451 ;; Auto vars:     Size  Location     Type
  2452 ;;  cfmt            2   84[COMRAM] PTR unsigned char 
  2453 ;;		 -> STR_2(15), STR_1(22), 
  2454 ;; Return value:  Size  Location     Type
  2455 ;;                  2    0[BANK0 ] int 
  2456 ;; Registers used:
  2457 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2458 ;; Tracked objects:
  2459 ;;		On entry : 0/0
  2460 ;;		On exit  : 0/0
  2461 ;;		Unchanged: 0/0
  2462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2463 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2464 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2466 ;;      Totals:         2       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2467 ;;Total ram usage:        8 bytes
  2468 ;; Hardware stack levels used: 1
  2469 ;; Hardware stack levels required when called: 8
  2470 ;; This function calls:
  2471 ;;		_vfpfcnvrt
  2472 ;; This function is called by:
  2473 ;;		_sprintf
  2474 ;; This function uses a non-reentrant model
  2475 ;;
  2476                           
  2477                           	psect	text4
  2478   00485A                     __ptext4:
  2479                           	callstack 0
  2480   00485A                     _vfprintf:
  2481                           	callstack 20
  2482   00485A                     
  2483                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1520: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\source
      +                          s\c99\common\doprnt.c: 1521: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\comm
      +                          on\doprnt.c: 1523:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\
      +                          common\doprnt.c: 1525:     cfmt = (char *)fmt;
  2484   00485A  C062  F055         	movff	vfprintf@fmt,vfprintf@cfmt
  2485   00485E  C063  F056         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  2486                           
  2487                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  2488   004862  EF41  F024         	goto	l5117
  2489   004866                     l5115:
  2490                           
  2491                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1533:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  2492   004866  C060  F043         	movff	vfprintf@fp,vfpfcnvrt@fp
  2493   00486A  C061  F044         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  2494   00486E  0E55               	movlw	low vfprintf@cfmt
  2495   004870  6E45               	movwf	vfpfcnvrt@fmt^0,c
  2496   004872  0E00               	movlw	high vfprintf@cfmt
  2497   004874  6E46               	movwf	(vfpfcnvrt@fmt+1)^0,c
  2498   004876  C064  F047         	movff	vfprintf@ap,vfpfcnvrt@ap
  2499   00487A  C065  F048         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  2500   00487E  ECF3  F01B         	call	_vfpfcnvrt	;wreg free
  2501   004882                     l5117:
  2502                           
  2503                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  2504   004882  C055  FFF6         	movff	vfprintf@cfmt,tblptrl
  2505   004886  C056  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  2506   00488A                     	if	0	;tblptru may be non-zero
  2507   00488A                     	endif
  2508   00488A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2509   00488A  0E00               	movlw	low (__mediumconst shr (0+16))
  2510   00488C  6EF8               	movwf	tblptru,c
  2511   00488E                     	endif
  2512   00488E  0008               	tblrd		*
  2513   004890  50F5               	movf	tablat,w,c
  2514   004892  0900               	iorlw	0
  2515   004894  A4D8               	btfss	status,2,c
  2516   004896  EF4F  F024         	goto	u5521
  2517   00489A  EF51  F024         	goto	u5520
  2518   00489E                     u5521:
  2519   00489E  EF33  F024         	goto	l5115
  2520   0048A2                     u5520:
  2521   0048A2                     
  2522                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1538:  return 0;
  2523   0048A2  0E00               	movlw	0
  2524   0048A4  0100               	movlb	0	; () banked
  2525   0048A6  6F61               	movwf	(?_vfprintf+1)& (0+255),b
  2526   0048A8  0E00               	movlw	0
  2527   0048AA  6F60               	movwf	?_vfprintf& (0+255),b
  2528   0048AC                     
  2529                           ; BSR set to: 0
  2530   0048AC  0012               	return		;funcret
  2531   0048AE                     __end_of_vfprintf:
  2532                           	callstack 0
  2533                           
  2534 ;; *************** function _vfpfcnvrt *****************
  2535 ;; Defined at:
  2536 ;;		line 1007 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2537 ;; Parameters:    Size  Location     Type
  2538 ;;  fp              2   66[COMRAM] PTR struct _IO_FILE
  2539 ;;		 -> sprintf@f(11), 
  2540 ;;  fmt             2   68[COMRAM] PTR PTR unsigned char 
  2541 ;;		 -> vfprintf@cfmt(2), 
  2542 ;;  ap              2   70[COMRAM] PTR PTR void 
  2543 ;;		 -> sprintf@ap(2), 
  2544 ;; Auto vars:     Size  Location     Type
  2545 ;;  convarg         8   74[COMRAM] struct .
  2546 ;;  cp              2   82[COMRAM] PTR unsigned char 
  2547 ;;		 -> STR_2(15), STR_1(22), 
  2548 ;;  i               2    0        int 
  2549 ;;  done            2    0        int 
  2550 ;;  c               1    0        unsigned char 
  2551 ;; Return value:  Size  Location     Type
  2552 ;;                  1    wreg      void 
  2553 ;; Registers used:
  2554 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2555 ;; Tracked objects:
  2556 ;;		On entry : 0/0
  2557 ;;		On exit  : 0/0
  2558 ;;		Unchanged: 0/0
  2559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2560 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2561 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2562 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2563 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2564 ;;Total ram usage:       18 bytes
  2565 ;; Hardware stack levels used: 1
  2566 ;; Hardware stack levels required when called: 7
  2567 ;; This function calls:
  2568 ;;		_dtoa
  2569 ;;		_fputc
  2570 ;; This function is called by:
  2571 ;;		_vfprintf
  2572 ;; This function uses a non-reentrant model
  2573 ;;
  2574                           
  2575                           	psect	text5
  2576   0037E6                     __ptext5:
  2577                           	callstack 0
  2578   0037E6                     _vfpfcnvrt:
  2579                           	callstack 20
  2580   0037E6                     
  2581                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1007: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1008: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\dopr
      +                          nt.c: 1009:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 1010:     int done, i;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1016:  } convarg;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1019:     if ((*fmt)[0] == '%') {
  2582   0037E6  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2583   0037EA  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2584   0037EE  CFDE FFF6          	movff	postinc2,tblptrl
  2585   0037F2  CFDD FFF7          	movff	postdec2,tblptrh
  2586   0037F6                     	if	0	;tblptru may be non-zero
  2587   0037F6                     	endif
  2588   0037F6                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2589   0037F6  0E00               	movlw	low (__mediumconst shr (0+16))
  2590   0037F8  6EF8               	movwf	tblptru,c
  2591   0037FA                     	endif
  2592   0037FA  0008               	tblrd		*
  2593   0037FC  50F5               	movf	tablat,w,c
  2594   0037FE  0A25               	xorlw	37
  2595   003800  A4D8               	btfss	status,2,c
  2596   003802  EF05  F01C         	goto	u5491
  2597   003806  EF07  F01C         	goto	u5490
  2598   00380A                     u5491:
  2599   00380A  EF8B  F01C         	goto	l5107
  2600   00380E                     u5490:
  2601   00380E                     
  2602                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1020:         ++*
      +                          fmt;
  2603   00380E  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2604   003812  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2605   003816  2ADE               	incf	postinc2,f,c
  2606   003818  0E00               	movlw	0
  2607   00381A  22DD               	addwfc	postdec2,f,c
  2608   00381C                     
  2609                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1022:         fla
      +                          gs = width = 0;
  2610   00381C  0E00               	movlw	0
  2611   00381E  0100               	movlb	0	; () banked
  2612   003820  6FF4               	movwf	(_width+1)& (0+255),b
  2613   003822  0E00               	movlw	0
  2614   003824  6FF3               	movwf	_width& (0+255),b
  2615   003826  C0F3  F0FB         	movff	_width,_flags
  2616   00382A                     
  2617                           ; BSR set to: 0
  2618                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1023:         pre
      +                          c = -1;
  2619   00382A  69F5               	setf	_prec& (0+255),b
  2620   00382C  69F6               	setf	(_prec+1)& (0+255),b
  2621   00382E                     
  2622                           ; BSR set to: 0
  2623                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1117:   cp = *fmt
      +                          ;
  2624   00382E  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2625   003832  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2626   003836  CFDE F053          	movff	postinc2,vfpfcnvrt@cp
  2627   00383A  CFDD F054          	movff	postdec2,vfpfcnvrt@cp+1
  2628   00383E                     
  2629                           ; BSR set to: 0
  2630                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1187:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  2631   00383E  C053  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2632   003842  C054  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  2633   003846                     	if	0	;tblptru may be non-zero
  2634   003846                     	endif
  2635   003846                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2636   003846  0E00               	movlw	low (__mediumconst shr (0+16))
  2637   003848  6EF8               	movwf	tblptru,c
  2638   00384A                     	endif
  2639   00384A  0008               	tblrd		*
  2640   00384C  50F5               	movf	tablat,w,c
  2641   00384E  0A64               	xorlw	100
  2642   003850  B4D8               	btfsc	status,2,c
  2643   003852  EF2D  F01C         	goto	u5501
  2644   003856  EF2F  F01C         	goto	u5500
  2645   00385A                     u5501:
  2646   00385A  EF3F  F01C         	goto	l5097
  2647   00385E                     u5500:
  2648   00385E                     
  2649                           ; BSR set to: 0
  2650   00385E  C053  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2651   003862  C054  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  2652   003866                     	if	0	;tblptru may be non-zero
  2653   003866                     	endif
  2654   003866                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2655   003866  0E00               	movlw	low (__mediumconst shr (0+16))
  2656   003868  6EF8               	movwf	tblptru,c
  2657   00386A                     	endif
  2658   00386A  0008               	tblrd		*
  2659   00386C  50F5               	movf	tablat,w,c
  2660   00386E  0A69               	xorlw	105
  2661   003870  A4D8               	btfss	status,2,c
  2662   003872  EF3D  F01C         	goto	u5511
  2663   003876  EF3F  F01C         	goto	u5510
  2664   00387A                     u5511:
  2665   00387A  EF82  F01C         	goto	l5103
  2666   00387E                     u5510:
  2667   00387E                     l5097:
  2668                           
  2669                           ; BSR set to: 0
  2670                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1230:    convarg.
      +                          ll = (long long)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  2671   00387E  C047  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2672   003882  C048  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2673   003886  CFDF F049          	movff	indf2,??_vfpfcnvrt
  2674   00388A  0E02               	movlw	2
  2675   00388C  26DE               	addwf	postinc2,f,c
  2676   00388E  CFDF F04A          	movff	indf2,??_vfpfcnvrt+1
  2677   003892  0E00               	movlw	0
  2678   003894  22DD               	addwfc	postdec2,f,c
  2679   003896  C049  FFD9         	movff	??_vfpfcnvrt,fsr2l
  2680   00389A  C04A  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2681   00389E  CFDE F04B          	movff	postinc2,vfpfcnvrt@convarg
  2682   0038A2  CFDD F04C          	movff	postdec2,vfpfcnvrt@convarg+1
  2683   0038A6  0E00               	movlw	0
  2684   0038A8  BE4C               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  2685   0038AA  0EFF               	movlw	-1
  2686   0038AC  6E4D               	movwf	(vfpfcnvrt@convarg+2)^0,c
  2687   0038AE  6E4E               	movwf	(vfpfcnvrt@convarg+3)^0,c
  2688   0038B0  6E4F               	movwf	(vfpfcnvrt@convarg+4)^0,c
  2689   0038B2  6E50               	movwf	(vfpfcnvrt@convarg+5)^0,c
  2690   0038B4  6E51               	movwf	(vfpfcnvrt@convarg+6)^0,c
  2691   0038B6  6E52               	movwf	(vfpfcnvrt@convarg+7)^0,c
  2692                           
  2693                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1232:    *fmt = c
      +                          p+1;
  2694   0038B8  0E01               	movlw	1
  2695   0038BA  2453               	addwf	vfpfcnvrt@cp^0,w,c
  2696   0038BC  6E49               	movwf	??_vfpfcnvrt^0,c
  2697   0038BE  0E00               	movlw	0
  2698   0038C0  2054               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  2699   0038C2  6E4A               	movwf	(??_vfpfcnvrt+1)^0,c
  2700   0038C4  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2701   0038C8  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2702   0038CC  C049  FFDE         	movff	??_vfpfcnvrt,postinc2
  2703   0038D0  C04A  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  2704   0038D4                     
  2705                           ; BSR set to: 0
  2706                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1233:    return (
      +                          void) dtoa(fp, convarg.ll);;	Return value of _vfpfcnvrt is never used
  2707   0038D4  C043  F020         	movff	vfpfcnvrt@fp,dtoa@fp
  2708   0038D8  C044  F021         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  2709   0038DC  C04B  F022         	movff	vfpfcnvrt@convarg,dtoa@d
  2710   0038E0  C04C  F023         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  2711   0038E4  C04D  F024         	movff	vfpfcnvrt@convarg+2,dtoa@d+2
  2712   0038E8  C04E  F025         	movff	vfpfcnvrt@convarg+3,dtoa@d+3
  2713   0038EC  C04F  F026         	movff	vfpfcnvrt@convarg+4,dtoa@d+4
  2714   0038F0  C050  F027         	movff	vfpfcnvrt@convarg+5,dtoa@d+5
  2715   0038F4  C051  F028         	movff	vfpfcnvrt@convarg+6,dtoa@d+6
  2716   0038F8  C052  F029         	movff	vfpfcnvrt@convarg+7,dtoa@d+7
  2717   0038FC  EC73  F015         	call	_dtoa	;wreg free
  2718   003900  EFA1  F01C         	goto	l1285
  2719   003904                     l5103:
  2720                           
  2721                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1509:         ++*
      +                          fmt;
  2722   003904  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2723   003908  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2724   00390C  2ADE               	incf	postinc2,f,c
  2725   00390E  0E00               	movlw	0
  2726   003910  22DD               	addwfc	postdec2,f,c
  2727   003912  EFA1  F01C         	goto	l1285
  2728   003916                     l5107:
  2729                           
  2730                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1514:     fputc((
      +                          int)(*fmt)[0], fp);
  2731   003916  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2732   00391A  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2733   00391E  CFDE FFF6          	movff	postinc2,tblptrl
  2734   003922  CFDD FFF7          	movff	postdec2,tblptrh
  2735   003926                     	if	0	;tblptru may be non-zero
  2736   003926                     	endif
  2737   003926                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2738   003926  0E00               	movlw	low (__mediumconst shr (0+16))
  2739   003928  6EF8               	movwf	tblptru,c
  2740   00392A                     	endif
  2741   00392A  0008               	tblrd		*
  2742   00392C  50F5               	movf	tablat,w,c
  2743   00392E  6E05               	movwf	fputc@c^0,c
  2744   003930  6A06               	clrf	(fputc@c+1)^0,c
  2745   003932  C043  F007         	movff	vfpfcnvrt@fp,fputc@fp
  2746   003936  C044  F008         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2747   00393A  ECC2  F021         	call	_fputc	;wreg free
  2748   00393E  EF82  F01C         	goto	l5103
  2749   003942                     l1285:
  2750   003942  0012               	return		;funcret
  2751   003944                     __end_of_vfpfcnvrt:
  2752                           	callstack 0
  2753                           
  2754 ;; *************** function _dtoa *****************
  2755 ;; Defined at:
  2756 ;;		line 443 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2757 ;; Parameters:    Size  Location     Type
  2758 ;;  fp              2   31[COMRAM] PTR struct _IO_FILE
  2759 ;;		 -> sprintf@f(11), 
  2760 ;;  d               8   33[COMRAM] long long 
  2761 ;; Auto vars:     Size  Location     Type
  2762 ;;  n               8   55[COMRAM] long long 
  2763 ;;  i               2   64[COMRAM] int 
  2764 ;;  w               2   53[COMRAM] int 
  2765 ;;  p               2   51[COMRAM] int 
  2766 ;;  s               1   63[COMRAM] unsigned char 
  2767 ;; Return value:  Size  Location     Type
  2768 ;;                  1    wreg      void 
  2769 ;; Registers used:
  2770 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2771 ;; Tracked objects:
  2772 ;;		On entry : 0/0
  2773 ;;		On exit  : 0/0
  2774 ;;		Unchanged: 0/0
  2775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2776 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2777 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2778 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2779 ;;      Totals:        35       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2780 ;;Total ram usage:       35 bytes
  2781 ;; Hardware stack levels used: 1
  2782 ;; Hardware stack levels required when called: 6
  2783 ;; This function calls:
  2784 ;;		___aodiv
  2785 ;;		___aomod
  2786 ;;		_abs
  2787 ;;		_pad
  2788 ;; This function is called by:
  2789 ;;		_vfpfcnvrt
  2790 ;; This function uses a non-reentrant model
  2791 ;;
  2792                           
  2793                           	psect	text6
  2794   002AE6                     __ptext6:
  2795                           	callstack 0
  2796   002AE6                     _dtoa:
  2797                           	callstack 20
  2798   002AE6                     
  2799                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 443: static void 
      +                          dtoa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\
      +                          doprnt.c: 444: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          45:  char s;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 446: 
      +                              int i, p, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          47:     long long n;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 450:     n = d;
  2800   002AE6  C022  F038         	movff	dtoa@d,dtoa@n
  2801   002AEA  C023  F039         	movff	dtoa@d+1,dtoa@n+1
  2802   002AEE  C024  F03A         	movff	dtoa@d+2,dtoa@n+2
  2803   002AF2  C025  F03B         	movff	dtoa@d+3,dtoa@n+3
  2804   002AF6  C026  F03C         	movff	dtoa@d+4,dtoa@n+4
  2805   002AFA  C027  F03D         	movff	dtoa@d+5,dtoa@n+5
  2806   002AFE  C028  F03E         	movff	dtoa@d+6,dtoa@n+6
  2807   002B02  C029  F03F         	movff	dtoa@d+7,dtoa@n+7
  2808   002B06                     
  2809                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 451:     s = n < 
      +                          0 ? 1 : 0;
  2810   002B06  BE3F               	btfsc	(dtoa@n+7)^0,7,c
  2811   002B08  EF88  F015         	goto	u5391
  2812   002B0C  EF8B  F015         	goto	u5390
  2813   002B10                     u5391:
  2814   002B10  0E01               	movlw	1
  2815   002B12  EF8C  F015         	goto	u5400
  2816   002B16                     u5390:
  2817   002B16  0E00               	movlw	0
  2818   002B18                     u5400:
  2819   002B18  6E40               	movwf	dtoa@s^0,c
  2820   002B1A                     
  2821                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 452:     if (s) {
  2822   002B1A  5040               	movf	dtoa@s^0,w,c
  2823   002B1C  B4D8               	btfsc	status,2,c
  2824   002B1E  EF93  F015         	goto	u5411
  2825   002B22  EF95  F015         	goto	u5410
  2826   002B26                     u5411:
  2827   002B26  EFA5  F015         	goto	l5039
  2828   002B2A                     u5410:
  2829   002B2A                     
  2830                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 453:         n = 
      +                          -n;
  2831   002B2A  1E3F               	comf	(dtoa@n+7)^0,f,c
  2832   002B2C  1E3E               	comf	(dtoa@n+6)^0,f,c
  2833   002B2E  1E3D               	comf	(dtoa@n+5)^0,f,c
  2834   002B30  1E3C               	comf	(dtoa@n+4)^0,f,c
  2835   002B32  1E3B               	comf	(dtoa@n+3)^0,f,c
  2836   002B34  1E3A               	comf	(dtoa@n+2)^0,f,c
  2837   002B36  1E39               	comf	(dtoa@n+1)^0,f,c
  2838   002B38  6C38               	negf	dtoa@n^0,c
  2839   002B3A  0E00               	movlw	0
  2840   002B3C  2239               	addwfc	(dtoa@n+1)^0,f,c
  2841   002B3E  223A               	addwfc	(dtoa@n+2)^0,f,c
  2842   002B40  223B               	addwfc	(dtoa@n+3)^0,f,c
  2843   002B42  223C               	addwfc	(dtoa@n+4)^0,f,c
  2844   002B44  223D               	addwfc	(dtoa@n+5)^0,f,c
  2845   002B46  223E               	addwfc	(dtoa@n+6)^0,f,c
  2846   002B48  223F               	addwfc	(dtoa@n+7)^0,f,c
  2847   002B4A                     l5039:
  2848                           
  2849                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 462:     p = (0 <
      +                           prec) ? prec : 1;
  2850   002B4A  0100               	movlb	0	; () banked
  2851   002B4C  BFF6               	btfsc	(_prec+1)& (0+255),7,b
  2852   002B4E  EFB3  F015         	goto	u5420
  2853   002B52  51F6               	movf	(_prec+1)& (0+255),w,b
  2854   002B54  E106               	bnz	u5421
  2855   002B56  05F5               	decf	_prec& (0+255),w,b
  2856   002B58  B0D8               	btfsc	status,0,c
  2857   002B5A  EFB1  F015         	goto	u5421
  2858   002B5E  EFB3  F015         	goto	u5420
  2859   002B62                     u5421:
  2860   002B62  EFB9  F015         	goto	l1264
  2861   002B66                     u5420:
  2862   002B66                     
  2863                           ; BSR set to: 0
  2864   002B66  0E00               	movlw	0
  2865   002B68  6E35               	movwf	(dtoa@p+1)^0,c
  2866   002B6A  0E01               	movlw	1
  2867   002B6C  6E34               	movwf	dtoa@p^0,c
  2868   002B6E  EFBD  F015         	goto	l1266
  2869   002B72                     l1264:
  2870                           
  2871                           ; BSR set to: 0
  2872   002B72  C0F5  F034         	movff	_prec,dtoa@p
  2873   002B76  C0F6  F035         	movff	_prec+1,dtoa@p+1
  2874   002B7A                     l1266:
  2875                           
  2876                           ; BSR set to: 0
  2877                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 463:     w = widt
      +                          h;
  2878   002B7A  C0F3  F036         	movff	_width,dtoa@w
  2879   002B7E  C0F4  F037         	movff	_width+1,dtoa@w+1
  2880   002B82                     
  2881                           ; BSR set to: 0
  2882                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 464:     if (s
  2883   002B82  5040               	movf	dtoa@s^0,w,c
  2884   002B84  B4D8               	btfsc	status,2,c
  2885   002B86  EFC7  F015         	goto	u5431
  2886   002B8A  EFC9  F015         	goto	u5430
  2887   002B8E                     u5431:
  2888   002B8E  EFE0  F015         	goto	l1267
  2889   002B92                     u5430:
  2890   002B92                     
  2891                           ; BSR set to: 0
  2892                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 468:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 469:         --w;
  2893   002B92  0636               	decf	dtoa@w^0,f,c
  2894   002B94  A0D8               	btfss	status,0,c
  2895   002B96  0637               	decf	(dtoa@w+1)^0,f,c
  2896   002B98                     
  2897                           ; BSR set to: 0
  2898                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 470:   s = s ? '-
      +                          ' : '+';
  2899   002B98  5040               	movf	dtoa@s^0,w,c
  2900   002B9A  A4D8               	btfss	status,2,c
  2901   002B9C  EFD2  F015         	goto	u5441
  2902   002BA0  EFD4  F015         	goto	u5440
  2903   002BA4                     u5441:
  2904   002BA4  EFDA  F015         	goto	l5051
  2905   002BA8                     u5440:
  2906   002BA8                     
  2907                           ; BSR set to: 0
  2908   002BA8  0E00               	movlw	0
  2909   002BAA  6E33               	movwf	(_dtoa$2702+1)^0,c
  2910   002BAC  0E2B               	movlw	43
  2911   002BAE  6E32               	movwf	_dtoa$2702^0,c
  2912   002BB0  EFDE  F015         	goto	l5053
  2913   002BB4                     l5051:
  2914                           
  2915                           ; BSR set to: 0
  2916   002BB4  0E00               	movlw	0
  2917   002BB6  6E33               	movwf	(_dtoa$2702+1)^0,c
  2918   002BB8  0E2D               	movlw	45
  2919   002BBA  6E32               	movwf	_dtoa$2702^0,c
  2920   002BBC                     l5053:
  2921                           
  2922                           ; BSR set to: 0
  2923   002BBC  C032  F040         	movff	_dtoa$2702,dtoa@s
  2924   002BC0                     l1267:
  2925                           
  2926                           ; BSR set to: 0
  2927                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 480:     i = size
      +                          of(dbuf) - 1;
  2928   002BC0  0E00               	movlw	0
  2929   002BC2  6E42               	movwf	(dtoa@i+1)^0,c
  2930   002BC4  0E1F               	movlw	31
  2931   002BC6  6E41               	movwf	dtoa@i^0,c
  2932   002BC8                     
  2933                           ; BSR set to: 0
  2934                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 481:     dbuf[i] 
      +                          = '\0';
  2935   002BC8  0E00               	movlw	0
  2936   002BCA  0101               	movlb	1	; () banked
  2937   002BCC  6FEF               	movwf	(_dbuf+31)& (0+255),b
  2938                           
  2939                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  2940   002BCE  EF65  F016         	goto	l5067
  2941   002BD2                     l5057:
  2942                           
  2943                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 486:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 487:         --i;
  2944   002BD2  0641               	decf	dtoa@i^0,f,c
  2945   002BD4  A0D8               	btfss	status,0,c
  2946   002BD6  0642               	decf	(dtoa@i+1)^0,f,c
  2947   002BD8                     
  2948                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 488:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  2949   002BD8  0ED0               	movlw	low _dbuf
  2950   002BDA  2441               	addwf	dtoa@i^0,w,c
  2951   002BDC  6ED9               	movwf	fsr2l,c
  2952   002BDE  0E01               	movlw	high _dbuf
  2953   002BE0  2042               	addwfc	(dtoa@i+1)^0,w,c
  2954   002BE2  6EDA               	movwf	fsr2h,c
  2955   002BE4  C038  F005         	movff	dtoa@n,___aomod@dividend
  2956   002BE8  C039  F006         	movff	dtoa@n+1,___aomod@dividend+1
  2957   002BEC  C03A  F007         	movff	dtoa@n+2,___aomod@dividend+2
  2958   002BF0  C03B  F008         	movff	dtoa@n+3,___aomod@dividend+3
  2959   002BF4  C03C  F009         	movff	dtoa@n+4,___aomod@dividend+4
  2960   002BF8  C03D  F00A         	movff	dtoa@n+5,___aomod@dividend+5
  2961   002BFC  C03E  F00B         	movff	dtoa@n+6,___aomod@dividend+6
  2962   002C00  C03F  F00C         	movff	dtoa@n+7,___aomod@dividend+7
  2963   002C04  0E0A               	movlw	10
  2964   002C06  6E0D               	movwf	___aomod@divisor^0,c
  2965   002C08  0E00               	movlw	0
  2966   002C0A  6E0E               	movwf	(___aomod@divisor+1)^0,c
  2967   002C0C  0E00               	movlw	0
  2968   002C0E  6E0F               	movwf	(___aomod@divisor+2)^0,c
  2969   002C10  0E00               	movlw	0
  2970   002C12  6E10               	movwf	(___aomod@divisor+3)^0,c
  2971   002C14  0E00               	movlw	0
  2972   002C16  6E11               	movwf	(___aomod@divisor+4)^0,c
  2973   002C18  0E00               	movlw	0
  2974   002C1A  6E12               	movwf	(___aomod@divisor+5)^0,c
  2975   002C1C  0E00               	movlw	0
  2976   002C1E  6E13               	movwf	(___aomod@divisor+6)^0,c
  2977   002C20  0E00               	movlw	0
  2978   002C22  6E14               	movwf	(___aomod@divisor+7)^0,c
  2979   002C24  EC41  F01B         	call	___aomod	;wreg free
  2980   002C28  C005  F02A         	movff	?___aomod,??_dtoa
  2981   002C2C  C006  F02B         	movff	?___aomod+1,??_dtoa+1
  2982   002C30  C007  F02C         	movff	?___aomod+2,??_dtoa+2
  2983   002C34  C008  F02D         	movff	?___aomod+3,??_dtoa+3
  2984   002C38  C009  F02E         	movff	?___aomod+4,??_dtoa+4
  2985   002C3C  C00A  F02F         	movff	?___aomod+5,??_dtoa+5
  2986   002C40  C00B  F030         	movff	?___aomod+6,??_dtoa+6
  2987   002C44  C00C  F031         	movff	?___aomod+7,??_dtoa+7
  2988   002C48  C02A  F017         	movff	??_dtoa,abs@a
  2989   002C4C  C02B  F018         	movff	??_dtoa+1,abs@a+1
  2990   002C50  EC86  F025         	call	_abs	;wreg free
  2991   002C54  5017               	movf	?_abs^0,w,c
  2992   002C56  0F30               	addlw	48
  2993   002C58  6EDF               	movwf	indf2,c
  2994   002C5A                     
  2995                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 489:         --p;
  2996   002C5A  0634               	decf	dtoa@p^0,f,c
  2997   002C5C  A0D8               	btfss	status,0,c
  2998   002C5E  0635               	decf	(dtoa@p+1)^0,f,c
  2999   002C60                     
  3000                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 490:         --w;
  3001   002C60  0636               	decf	dtoa@w^0,f,c
  3002   002C62  A0D8               	btfss	status,0,c
  3003   002C64  0637               	decf	(dtoa@w+1)^0,f,c
  3004   002C66                     
  3005                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 491:         n = 
      +                          n / 10;
  3006   002C66  C038  F005         	movff	dtoa@n,___aodiv@dividend
  3007   002C6A  C039  F006         	movff	dtoa@n+1,___aodiv@dividend+1
  3008   002C6E  C03A  F007         	movff	dtoa@n+2,___aodiv@dividend+2
  3009   002C72  C03B  F008         	movff	dtoa@n+3,___aodiv@dividend+3
  3010   002C76  C03C  F009         	movff	dtoa@n+4,___aodiv@dividend+4
  3011   002C7A  C03D  F00A         	movff	dtoa@n+5,___aodiv@dividend+5
  3012   002C7E  C03E  F00B         	movff	dtoa@n+6,___aodiv@dividend+6
  3013   002C82  C03F  F00C         	movff	dtoa@n+7,___aodiv@dividend+7
  3014   002C86  0E0A               	movlw	10
  3015   002C88  6E0D               	movwf	___aodiv@divisor^0,c
  3016   002C8A  0E00               	movlw	0
  3017   002C8C  6E0E               	movwf	(___aodiv@divisor+1)^0,c
  3018   002C8E  0E00               	movlw	0
  3019   002C90  6E0F               	movwf	(___aodiv@divisor+2)^0,c
  3020   002C92  0E00               	movlw	0
  3021   002C94  6E10               	movwf	(___aodiv@divisor+3)^0,c
  3022   002C96  0E00               	movlw	0
  3023   002C98  6E11               	movwf	(___aodiv@divisor+4)^0,c
  3024   002C9A  0E00               	movlw	0
  3025   002C9C  6E12               	movwf	(___aodiv@divisor+5)^0,c
  3026   002C9E  0E00               	movlw	0
  3027   002CA0  6E13               	movwf	(___aodiv@divisor+6)^0,c
  3028   002CA2  0E00               	movlw	0
  3029   002CA4  6E14               	movwf	(___aodiv@divisor+7)^0,c
  3030   002CA6  ECC7  F019         	call	___aodiv	;wreg free
  3031   002CAA  C005  F038         	movff	?___aodiv,dtoa@n
  3032   002CAE  C006  F039         	movff	?___aodiv+1,dtoa@n+1
  3033   002CB2  C007  F03A         	movff	?___aodiv+2,dtoa@n+2
  3034   002CB6  C008  F03B         	movff	?___aodiv+3,dtoa@n+3
  3035   002CBA  C009  F03C         	movff	?___aodiv+4,dtoa@n+4
  3036   002CBE  C00A  F03D         	movff	?___aodiv+5,dtoa@n+5
  3037   002CC2  C00B  F03E         	movff	?___aodiv+6,dtoa@n+6
  3038   002CC6  C00C  F03F         	movff	?___aodiv+7,dtoa@n+7
  3039   002CCA                     l5067:
  3040                           
  3041                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  3042   002CCA  BE42               	btfsc	(dtoa@i+1)^0,7,c
  3043   002CCC  EF70  F016         	goto	u5451
  3044   002CD0  5042               	movf	(dtoa@i+1)^0,w,c
  3045   002CD2  E108               	bnz	u5450
  3046   002CD4  0441               	decf	dtoa@i^0,w,c
  3047   002CD6  A0D8               	btfss	status,0,c
  3048   002CD8  EF70  F016         	goto	u5451
  3049   002CDC  EF72  F016         	goto	u5450
  3050   002CE0                     u5451:
  3051   002CE0  EF8E  F016         	goto	l5073
  3052   002CE4                     u5450:
  3053   002CE4  5038               	movf	dtoa@n^0,w,c
  3054   002CE6  1039               	iorwf	(dtoa@n+1)^0,w,c
  3055   002CE8  103A               	iorwf	(dtoa@n+2)^0,w,c
  3056   002CEA  103B               	iorwf	(dtoa@n+3)^0,w,c
  3057   002CEC  103C               	iorwf	(dtoa@n+4)^0,w,c
  3058   002CEE  103D               	iorwf	(dtoa@n+5)^0,w,c
  3059   002CF0  103E               	iorwf	(dtoa@n+6)^0,w,c
  3060   002CF2  103F               	iorwf	(dtoa@n+7)^0,w,c
  3061   002CF4  A4D8               	btfss	status,2,c
  3062   002CF6  EF7F  F016         	goto	u5461
  3063   002CFA  EF81  F016         	goto	u5460
  3064   002CFE                     u5461:
  3065   002CFE  EFE9  F015         	goto	l5057
  3066   002D02                     u5460:
  3067   002D02  BE35               	btfsc	(dtoa@p+1)^0,7,c
  3068   002D04  EF8E  F016         	goto	u5470
  3069   002D08  5035               	movf	(dtoa@p+1)^0,w,c
  3070   002D0A  E106               	bnz	u5471
  3071   002D0C  0434               	decf	dtoa@p^0,w,c
  3072   002D0E  B0D8               	btfsc	status,0,c
  3073   002D10  EF8C  F016         	goto	u5471
  3074   002D14  EF8E  F016         	goto	u5470
  3075   002D18                     u5471:
  3076   002D18  EFE9  F015         	goto	l5057
  3077   002D1C                     u5470:
  3078   002D1C                     l5073:
  3079                           
  3080                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 495:     if (s !=
      +                           0) {
  3081   002D1C  5040               	movf	dtoa@s^0,w,c
  3082   002D1E  B4D8               	btfsc	status,2,c
  3083   002D20  EF94  F016         	goto	u5481
  3084   002D24  EF96  F016         	goto	u5480
  3085   002D28                     u5481:
  3086   002D28  EFA1  F016         	goto	l5079
  3087   002D2C                     u5480:
  3088   002D2C                     
  3089                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 496:         --i;
  3090   002D2C  0641               	decf	dtoa@i^0,f,c
  3091   002D2E  A0D8               	btfss	status,0,c
  3092   002D30  0642               	decf	(dtoa@i+1)^0,f,c
  3093   002D32                     
  3094                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 497:         dbuf
      +                          [i] = s;
  3095   002D32  0ED0               	movlw	low _dbuf
  3096   002D34  2441               	addwf	dtoa@i^0,w,c
  3097   002D36  6ED9               	movwf	fsr2l,c
  3098   002D38  0E01               	movlw	high _dbuf
  3099   002D3A  2042               	addwfc	(dtoa@i+1)^0,w,c
  3100   002D3C  6EDA               	movwf	fsr2h,c
  3101   002D3E  C040  FFDF         	movff	dtoa@s,indf2
  3102   002D42                     l5079:
  3103                           
  3104                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 501:     return (
      +                          void) pad(fp, &dbuf[i], w);
  3105   002D42  C020  F015         	movff	dtoa@fp,pad@fp
  3106   002D46  C021  F016         	movff	dtoa@fp+1,pad@fp+1
  3107   002D4A  0ED0               	movlw	low _dbuf
  3108   002D4C  2441               	addwf	dtoa@i^0,w,c
  3109   002D4E  6E17               	movwf	pad@buf^0,c
  3110   002D50  0E01               	movlw	high _dbuf
  3111   002D52  2042               	addwfc	(dtoa@i+1)^0,w,c
  3112   002D54  6E18               	movwf	(pad@buf+1)^0,c
  3113   002D56  C036  F019         	movff	dtoa@w,pad@p
  3114   002D5A  C037  F01A         	movff	dtoa@w+1,pad@p+1
  3115   002D5E  EC5C  F023         	call	_pad	;wreg free
  3116   002D62  0012               	return		;funcret
  3117   002D64                     __end_of_dtoa:
  3118                           	callstack 0
  3119                           
  3120 ;; *************** function _pad *****************
  3121 ;; Defined at:
  3122 ;;		line 133 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  3123 ;; Parameters:    Size  Location     Type
  3124 ;;  fp              2   20[COMRAM] PTR struct _IO_FILE
  3125 ;;		 -> sprintf@f(11), 
  3126 ;;  buf             2   22[COMRAM] PTR unsigned char 
  3127 ;;		 -> dbuf(32), 
  3128 ;;  p               2   24[COMRAM] int 
  3129 ;; Auto vars:     Size  Location     Type
  3130 ;;  w               2   29[COMRAM] int 
  3131 ;;  i               2   27[COMRAM] int 
  3132 ;; Return value:  Size  Location     Type
  3133 ;;                  1    wreg      void 
  3134 ;; Registers used:
  3135 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3136 ;; Tracked objects:
  3137 ;;		On entry : 0/0
  3138 ;;		On exit  : 0/0
  3139 ;;		Unchanged: 0/0
  3140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3141 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3142 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3143 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3144 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3145 ;;Total ram usage:       11 bytes
  3146 ;; Hardware stack levels used: 1
  3147 ;; Hardware stack levels required when called: 5
  3148 ;; This function calls:
  3149 ;;		_fputc
  3150 ;;		_fputs
  3151 ;; This function is called by:
  3152 ;;		_dtoa
  3153 ;; This function uses a non-reentrant model
  3154 ;;
  3155                           
  3156                           	psect	text7
  3157   0046B8                     __ptext7:
  3158                           	callstack 0
  3159   0046B8                     _pad:
  3160                           	callstack 20
  3161   0046B8                     
  3162                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 133: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\com
      +                          mon\doprnt.c: 134: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 135:     int i, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt
      +                          .c: 145:     w = (p < 0) ? 0 : p;
  3163   0046B8  BE1A               	btfsc	(pad@p+1)^0,7,c
  3164   0046BA  EF61  F023         	goto	u5361
  3165   0046BE  EF63  F023         	goto	u5360
  3166   0046C2                     u5361:
  3167   0046C2  EF69  F023         	goto	l5017
  3168   0046C6                     u5360:
  3169   0046C6  C019  F01E         	movff	pad@p,pad@w
  3170   0046CA  C01A  F01F         	movff	pad@p+1,pad@w+1
  3171   0046CE  EF6D  F023         	goto	l1255
  3172   0046D2                     l5017:
  3173   0046D2  0E00               	movlw	0
  3174   0046D4  6E1F               	movwf	(pad@w+1)^0,c
  3175   0046D6  0E00               	movlw	0
  3176   0046D8  6E1E               	movwf	pad@w^0,c
  3177   0046DA                     l1255:
  3178                           
  3179                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 146:     i = 0;
  3180   0046DA  0E00               	movlw	0
  3181   0046DC  6E1D               	movwf	(pad@i+1)^0,c
  3182   0046DE  0E00               	movlw	0
  3183   0046E0  6E1C               	movwf	pad@i^0,c
  3184                           
  3185                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  3186   0046E2  EF7F  F023         	goto	l5023
  3187   0046E6                     l5019:
  3188                           
  3189                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 148:         fput
      +                          c(' ', fp);
  3190   0046E6  0E00               	movlw	0
  3191   0046E8  6E06               	movwf	(fputc@c+1)^0,c
  3192   0046EA  0E20               	movlw	32
  3193   0046EC  6E05               	movwf	fputc@c^0,c
  3194   0046EE  C015  F007         	movff	pad@fp,fputc@fp
  3195   0046F2  C016  F008         	movff	pad@fp+1,fputc@fp+1
  3196   0046F6  ECC2  F021         	call	_fputc	;wreg free
  3197   0046FA                     
  3198                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 149:         ++i;
  3199   0046FA  4A1C               	infsnz	pad@i^0,f,c
  3200   0046FC  2A1D               	incf	(pad@i+1)^0,f,c
  3201   0046FE                     l5023:
  3202                           
  3203                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  3204   0046FE  501E               	movf	pad@w^0,w,c
  3205   004700  5C1C               	subwf	pad@i^0,w,c
  3206   004702  501D               	movf	(pad@i+1)^0,w,c
  3207   004704  0A80               	xorlw	128
  3208   004706  6E1B               	movwf	??_pad^0,c
  3209   004708  501F               	movf	(pad@w+1)^0,w,c
  3210   00470A  0A80               	xorlw	128
  3211   00470C  581B               	subwfb	??_pad^0,w,c
  3212   00470E  A0D8               	btfss	status,0,c
  3213   004710  EF8C  F023         	goto	u5371
  3214   004714  EF8E  F023         	goto	u5370
  3215   004718                     u5371:
  3216   004718  EF73  F023         	goto	l5019
  3217   00471C                     u5370:
  3218   00471C                     
  3219                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 156:         fput
      +                          s((const char *)buf, fp);
  3220   00471C  C017  F00E         	movff	pad@buf,fputs@s
  3221   004720  C018  F00F         	movff	pad@buf+1,fputs@s+1
  3222   004724  C015  F010         	movff	pad@fp,fputs@fp
  3223   004728  C016  F011         	movff	pad@fp+1,fputs@fp+1
  3224   00472C  EC43  F025         	call	_fputs	;wreg free
  3225   004730  0012               	return		;funcret
  3226   004732                     __end_of_pad:
  3227                           	callstack 0
  3228                           
  3229 ;; *************** function _fputs *****************
  3230 ;; Defined at:
  3231 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputs.c"
  3232 ;; Parameters:    Size  Location     Type
  3233 ;;  s               2   13[COMRAM] PTR const unsigned char 
  3234 ;;		 -> dbuf(32), 
  3235 ;;  fp              2   15[COMRAM] PTR struct _IO_FILE
  3236 ;;		 -> sprintf@f(11), 
  3237 ;; Auto vars:     Size  Location     Type
  3238 ;;  i               2   18[COMRAM] int 
  3239 ;;  c               1   17[COMRAM] unsigned char 
  3240 ;; Return value:  Size  Location     Type
  3241 ;;                  2   13[COMRAM] int 
  3242 ;; Registers used:
  3243 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3244 ;; Tracked objects:
  3245 ;;		On entry : 0/0
  3246 ;;		On exit  : 0/0
  3247 ;;		Unchanged: 0/0
  3248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3249 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3250 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3252 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3253 ;;Total ram usage:        7 bytes
  3254 ;; Hardware stack levels used: 1
  3255 ;; Hardware stack levels required when called: 4
  3256 ;; This function calls:
  3257 ;;		_fputc
  3258 ;; This function is called by:
  3259 ;;		_pad
  3260 ;; This function uses a non-reentrant model
  3261 ;;
  3262                           
  3263                           	psect	text8
  3264   004A86                     __ptext8:
  3265                           	callstack 0
  3266   004A86                     _fputs:
  3267                           	callstack 20
  3268   004A86  0E00               	movlw	0
  3269   004A88  6E14               	movwf	(fputs@i+1)^0,c
  3270   004A8A  0E00               	movlw	0
  3271   004A8C  6E13               	movwf	fputs@i^0,c
  3272   004A8E  EF54  F025         	goto	l4931
  3273   004A92                     l4927:
  3274   004A92  C012  F005         	movff	fputs@c,fputc@c
  3275   004A96  6A06               	clrf	(fputc@c+1)^0,c
  3276   004A98  C010  F007         	movff	fputs@fp,fputc@fp
  3277   004A9C  C011  F008         	movff	fputs@fp+1,fputc@fp+1
  3278   004AA0  ECC2  F021         	call	_fputc	;wreg free
  3279   004AA4  4A13               	infsnz	fputs@i^0,f,c
  3280   004AA6  2A14               	incf	(fputs@i+1)^0,f,c
  3281   004AA8                     l4931:
  3282   004AA8  5013               	movf	fputs@i^0,w,c
  3283   004AAA  240E               	addwf	fputs@s^0,w,c
  3284   004AAC  6ED9               	movwf	fsr2l,c
  3285   004AAE  5014               	movf	(fputs@i+1)^0,w,c
  3286   004AB0  200F               	addwfc	(fputs@s+1)^0,w,c
  3287   004AB2  6EDA               	movwf	fsr2h,c
  3288   004AB4  50DF               	movf	indf2,w,c
  3289   004AB6  6E12               	movwf	fputs@c^0,c
  3290   004AB8  5012               	movf	fputs@c^0,w,c
  3291   004ABA  A4D8               	btfss	status,2,c
  3292   004ABC  EF62  F025         	goto	u5221
  3293   004AC0  EF64  F025         	goto	u5220
  3294   004AC4                     u5221:
  3295   004AC4  EF49  F025         	goto	l4927
  3296   004AC8                     u5220:
  3297   004AC8  0012               	return		;funcret
  3298   004ACA                     __end_of_fputs:
  3299                           	callstack 0
  3300                           
  3301 ;; *************** function _fputc *****************
  3302 ;; Defined at:
  3303 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputc.c"
  3304 ;; Parameters:    Size  Location     Type
  3305 ;;  c               2    4[COMRAM] int 
  3306 ;;  fp              2    6[COMRAM] PTR struct _IO_FILE
  3307 ;;		 -> sprintf@f(11), 
  3308 ;; Auto vars:     Size  Location     Type
  3309 ;;		None
  3310 ;; Return value:  Size  Location     Type
  3311 ;;                  2    4[COMRAM] int 
  3312 ;; Registers used:
  3313 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3314 ;; Tracked objects:
  3315 ;;		On entry : 0/0
  3316 ;;		On exit  : 0/0
  3317 ;;		Unchanged: 0/0
  3318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3319 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3321 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3322 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3323 ;;Total ram usage:        9 bytes
  3324 ;; Hardware stack levels used: 1
  3325 ;; Hardware stack levels required when called: 3
  3326 ;; This function calls:
  3327 ;;		_putch
  3328 ;; This function is called by:
  3329 ;;		_pad
  3330 ;;		_vfpfcnvrt
  3331 ;;		_fputs
  3332 ;; This function uses a non-reentrant model
  3333 ;;
  3334                           
  3335                           	psect	text9
  3336   004384                     __ptext9:
  3337                           	callstack 0
  3338   004384                     _fputc:
  3339                           	callstack 23
  3340   004384  5007               	movf	fputc@fp^0,w,c
  3341   004386  1008               	iorwf	(fputc@fp+1)^0,w,c
  3342   004388  B4D8               	btfsc	status,2,c
  3343   00438A  EFC9  F021         	goto	u5181
  3344   00438E  EFCB  F021         	goto	u5180
  3345   004392                     u5181:
  3346   004392  EFD4  F021         	goto	l4915
  3347   004396                     u5180:
  3348   004396  5007               	movf	fputc@fp^0,w,c
  3349   004398  1008               	iorwf	(fputc@fp+1)^0,w,c
  3350   00439A  A4D8               	btfss	status,2,c
  3351   00439C  EFD2  F021         	goto	u5191
  3352   0043A0  EFD4  F021         	goto	u5190
  3353   0043A4                     u5191:
  3354   0043A4  EFD9  F021         	goto	l4917
  3355   0043A8                     u5190:
  3356   0043A8                     l4915:
  3357   0043A8  5005               	movf	fputc@c^0,w,c
  3358   0043AA  ECB7  F026         	call	_putch
  3359   0043AE  EF26  F022         	goto	l1310
  3360   0043B2                     l4917:
  3361   0043B2  EE20 F009          	lfsr	2,9
  3362   0043B6  5007               	movf	fputc@fp^0,w,c
  3363   0043B8  26D9               	addwf	fsr2l,f,c
  3364   0043BA  5008               	movf	(fputc@fp+1)^0,w,c
  3365   0043BC  22DA               	addwfc	fsr2h,f,c
  3366   0043BE  50DE               	movf	postinc2,w,c
  3367   0043C0  10DE               	iorwf	postinc2,w,c
  3368   0043C2  B4D8               	btfsc	status,2,c
  3369   0043C4  EFE6  F021         	goto	u5201
  3370   0043C8  EFE8  F021         	goto	u5200
  3371   0043CC                     u5201:
  3372   0043CC  EF03  F022         	goto	l4921
  3373   0043D0                     u5200:
  3374   0043D0  EE20 F009          	lfsr	2,9
  3375   0043D4  5007               	movf	fputc@fp^0,w,c
  3376   0043D6  26D9               	addwf	fsr2l,f,c
  3377   0043D8  5008               	movf	(fputc@fp+1)^0,w,c
  3378   0043DA  22DA               	addwfc	fsr2h,f,c
  3379   0043DC  EE10 F003          	lfsr	1,3
  3380   0043E0  5007               	movf	fputc@fp^0,w,c
  3381   0043E2  26E1               	addwf	fsr1l,f,c
  3382   0043E4  5008               	movf	(fputc@fp+1)^0,w,c
  3383   0043E6  22E2               	addwfc	fsr1h,f,c
  3384   0043E8  50DE               	movf	postinc2,w,c
  3385   0043EA  5CE6               	subwf	postinc1,w,c
  3386   0043EC  50E6               	movf	postinc1,w,c
  3387   0043EE  0A80               	xorlw	128
  3388   0043F0  6E0D               	movwf	(??_fputc+4)^0,c
  3389   0043F2  50DE               	movf	postinc2,w,c
  3390   0043F4  0A80               	xorlw	128
  3391   0043F6  580D               	subwfb	(??_fputc+4)^0,w,c
  3392   0043F8  B0D8               	btfsc	status,0,c
  3393   0043FA  EF01  F022         	goto	u5211
  3394   0043FE  EF03  F022         	goto	u5210
  3395   004402                     u5211:
  3396   004402  EF26  F022         	goto	l1310
  3397   004406                     u5210:
  3398   004406                     l4921:
  3399   004406  EE20 F003          	lfsr	2,3
  3400   00440A  5007               	movf	fputc@fp^0,w,c
  3401   00440C  26D9               	addwf	fsr2l,f,c
  3402   00440E  5008               	movf	(fputc@fp+1)^0,w,c
  3403   004410  22DA               	addwfc	fsr2h,f,c
  3404   004412  CFDE F009          	movff	postinc2,??_fputc
  3405   004416  CFDD F00A          	movff	postdec2,??_fputc+1
  3406   00441A  C007  FFD9         	movff	fputc@fp,fsr2l
  3407   00441E  C008  FFDA         	movff	fputc@fp+1,fsr2h
  3408   004422  CFDE F00B          	movff	postinc2,??_fputc+2
  3409   004426  CFDD F00C          	movff	postdec2,??_fputc+3
  3410   00442A  5009               	movf	??_fputc^0,w,c
  3411   00442C  240B               	addwf	(??_fputc+2)^0,w,c
  3412   00442E  6ED9               	movwf	fsr2l,c
  3413   004430  500A               	movf	(??_fputc+1)^0,w,c
  3414   004432  200C               	addwfc	(??_fputc+3)^0,w,c
  3415   004434  6EDA               	movwf	fsr2h,c
  3416   004436  C005  FFDF         	movff	fputc@c,indf2
  3417   00443A  EE20 F003          	lfsr	2,3
  3418   00443E  5007               	movf	fputc@fp^0,w,c
  3419   004440  26D9               	addwf	fsr2l,f,c
  3420   004442  5008               	movf	(fputc@fp+1)^0,w,c
  3421   004444  22DA               	addwfc	fsr2h,f,c
  3422   004446  2ADE               	incf	postinc2,f,c
  3423   004448  0E00               	movlw	0
  3424   00444A  22DD               	addwfc	postdec2,f,c
  3425   00444C                     l1310:
  3426   00444C  0012               	return		;funcret
  3427   00444E                     __end_of_fputc:
  3428                           	callstack 0
  3429                           
  3430 ;; *************** function _putch *****************
  3431 ;; Defined at:
  3432 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\putch.c"
  3433 ;; Parameters:    Size  Location     Type
  3434 ;;  c               1    wreg     unsigned char 
  3435 ;; Auto vars:     Size  Location     Type
  3436 ;;  c               1    0[COMRAM] unsigned char 
  3437 ;; Return value:  Size  Location     Type
  3438 ;;                  1    wreg      void 
  3439 ;; Registers used:
  3440 ;;		wreg
  3441 ;; Tracked objects:
  3442 ;;		On entry : 0/0
  3443 ;;		On exit  : 0/0
  3444 ;;		Unchanged: 0/0
  3445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3449 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3450 ;;Total ram usage:        0 bytes
  3451 ;; Hardware stack levels used: 1
  3452 ;; Hardware stack levels required when called: 2
  3453 ;; This function calls:
  3454 ;;		Nothing
  3455 ;; This function is called by:
  3456 ;;		_fputc
  3457 ;; This function uses a non-reentrant model
  3458 ;;
  3459                           
  3460                           	psect	text10
  3461   004D6E                     __ptext10:
  3462                           	callstack 0
  3463   004D6E                     _putch:
  3464                           	callstack 23
  3465   004D6E  0012               	return		;funcret
  3466   004D70                     __end_of_putch:
  3467                           	callstack 0
  3468                           
  3469 ;; *************** function _abs *****************
  3470 ;; Defined at:
  3471 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\abs.c"
  3472 ;; Parameters:    Size  Location     Type
  3473 ;;  a               2   22[COMRAM] int 
  3474 ;; Auto vars:     Size  Location     Type
  3475 ;;		None
  3476 ;; Return value:  Size  Location     Type
  3477 ;;                  2   22[COMRAM] int 
  3478 ;; Registers used:
  3479 ;;		wreg, status,2, status,0
  3480 ;; Tracked objects:
  3481 ;;		On entry : 0/0
  3482 ;;		On exit  : 0/0
  3483 ;;		Unchanged: 0/0
  3484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3485 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3486 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3487 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3488 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3489 ;;Total ram usage:        4 bytes
  3490 ;; Hardware stack levels used: 1
  3491 ;; Hardware stack levels required when called: 2
  3492 ;; This function calls:
  3493 ;;		Nothing
  3494 ;; This function is called by:
  3495 ;;		_dtoa
  3496 ;; This function uses a non-reentrant model
  3497 ;;
  3498                           
  3499                           	psect	text11
  3500   004B0C                     __ptext11:
  3501                           	callstack 0
  3502   004B0C                     _abs:
  3503                           	callstack 23
  3504   004B0C  BE18               	btfsc	(abs@a+1)^0,7,c
  3505   004B0E  EF93  F025         	goto	u5380
  3506   004B12  5018               	movf	(abs@a+1)^0,w,c
  3507   004B14  E106               	bnz	u5381
  3508   004B16  0417               	decf	abs@a^0,w,c
  3509   004B18  B0D8               	btfsc	status,0,c
  3510   004B1A  EF91  F025         	goto	u5381
  3511   004B1E  EF93  F025         	goto	u5380
  3512   004B22                     u5381:
  3513   004B22  EFA1  F025         	goto	l1295
  3514   004B26                     u5380:
  3515   004B26  C017  F019         	movff	abs@a,??_abs
  3516   004B2A  C018  F01A         	movff	abs@a+1,??_abs+1
  3517   004B2E  1E19               	comf	??_abs^0,f,c
  3518   004B30  1E1A               	comf	(??_abs+1)^0,f,c
  3519   004B32  4A19               	infsnz	??_abs^0,f,c
  3520   004B34  2A1A               	incf	(??_abs+1)^0,f,c
  3521   004B36  C019  F017         	movff	??_abs,?_abs
  3522   004B3A  C01A  F018         	movff	??_abs+1,?_abs+1
  3523   004B3E  EFA5  F025         	goto	l1298
  3524   004B42                     l1295:
  3525   004B42  C017  F017         	movff	abs@a,?_abs
  3526   004B46  C018  F018         	movff	abs@a+1,?_abs+1
  3527   004B4A                     l1298:
  3528   004B4A  0012               	return		;funcret
  3529   004B4C                     __end_of_abs:
  3530                           	callstack 0
  3531                           
  3532 ;; *************** function ___aomod *****************
  3533 ;; Defined at:
  3534 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aomod.c"
  3535 ;; Parameters:    Size  Location     Type
  3536 ;;  dividend        8    4[COMRAM] long long 
  3537 ;;  divisor         8   12[COMRAM] long long 
  3538 ;; Auto vars:     Size  Location     Type
  3539 ;;  sign            1   21[COMRAM] unsigned char 
  3540 ;;  counter         1   20[COMRAM] unsigned char 
  3541 ;; Return value:  Size  Location     Type
  3542 ;;                  8    4[COMRAM] long long 
  3543 ;; Registers used:
  3544 ;;		wreg, status,2, status,0
  3545 ;; Tracked objects:
  3546 ;;		On entry : 0/0
  3547 ;;		On exit  : 0/0
  3548 ;;		Unchanged: 0/0
  3549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3550 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3551 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3553 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3554 ;;Total ram usage:       18 bytes
  3555 ;; Hardware stack levels used: 1
  3556 ;; Hardware stack levels required when called: 2
  3557 ;; This function calls:
  3558 ;;		Nothing
  3559 ;; This function is called by:
  3560 ;;		_dtoa
  3561 ;; This function uses a non-reentrant model
  3562 ;;
  3563                           
  3564                           	psect	text12
  3565   003682                     __ptext12:
  3566                           	callstack 0
  3567   003682                     ___aomod:
  3568                           	callstack 23
  3569   003682  0E00               	movlw	0
  3570   003684  6E16               	movwf	___aomod@sign^0,c
  3571   003686  BE0C               	btfsc	(___aomod@dividend+7)^0,7,c
  3572   003688  EF4A  F01B         	goto	u5300
  3573   00368C  EF48  F01B         	goto	u5301
  3574   003690                     u5301:
  3575   003690  EF5C  F01B         	goto	l4985
  3576   003694                     u5300:
  3577   003694  1E0C               	comf	(___aomod@dividend+7)^0,f,c
  3578   003696  1E0B               	comf	(___aomod@dividend+6)^0,f,c
  3579   003698  1E0A               	comf	(___aomod@dividend+5)^0,f,c
  3580   00369A  1E09               	comf	(___aomod@dividend+4)^0,f,c
  3581   00369C  1E08               	comf	(___aomod@dividend+3)^0,f,c
  3582   00369E  1E07               	comf	(___aomod@dividend+2)^0,f,c
  3583   0036A0  1E06               	comf	(___aomod@dividend+1)^0,f,c
  3584   0036A2  6C05               	negf	___aomod@dividend^0,c
  3585   0036A4  0E00               	movlw	0
  3586   0036A6  2206               	addwfc	(___aomod@dividend+1)^0,f,c
  3587   0036A8  2207               	addwfc	(___aomod@dividend+2)^0,f,c
  3588   0036AA  2208               	addwfc	(___aomod@dividend+3)^0,f,c
  3589   0036AC  2209               	addwfc	(___aomod@dividend+4)^0,f,c
  3590   0036AE  220A               	addwfc	(___aomod@dividend+5)^0,f,c
  3591   0036B0  220B               	addwfc	(___aomod@dividend+6)^0,f,c
  3592   0036B2  220C               	addwfc	(___aomod@dividend+7)^0,f,c
  3593   0036B4  0E01               	movlw	1
  3594   0036B6  6E16               	movwf	___aomod@sign^0,c
  3595   0036B8                     l4985:
  3596   0036B8  BE14               	btfsc	(___aomod@divisor+7)^0,7,c
  3597   0036BA  EF63  F01B         	goto	u5310
  3598   0036BE  EF61  F01B         	goto	u5311
  3599   0036C2                     u5311:
  3600   0036C2  EF73  F01B         	goto	l4989
  3601   0036C6                     u5310:
  3602   0036C6  1E14               	comf	(___aomod@divisor+7)^0,f,c
  3603   0036C8  1E13               	comf	(___aomod@divisor+6)^0,f,c
  3604   0036CA  1E12               	comf	(___aomod@divisor+5)^0,f,c
  3605   0036CC  1E11               	comf	(___aomod@divisor+4)^0,f,c
  3606   0036CE  1E10               	comf	(___aomod@divisor+3)^0,f,c
  3607   0036D0  1E0F               	comf	(___aomod@divisor+2)^0,f,c
  3608   0036D2  1E0E               	comf	(___aomod@divisor+1)^0,f,c
  3609   0036D4  6C0D               	negf	___aomod@divisor^0,c
  3610   0036D6  0E00               	movlw	0
  3611   0036D8  220E               	addwfc	(___aomod@divisor+1)^0,f,c
  3612   0036DA  220F               	addwfc	(___aomod@divisor+2)^0,f,c
  3613   0036DC  2210               	addwfc	(___aomod@divisor+3)^0,f,c
  3614   0036DE  2211               	addwfc	(___aomod@divisor+4)^0,f,c
  3615   0036E0  2212               	addwfc	(___aomod@divisor+5)^0,f,c
  3616   0036E2  2213               	addwfc	(___aomod@divisor+6)^0,f,c
  3617   0036E4  2214               	addwfc	(___aomod@divisor+7)^0,f,c
  3618   0036E6                     l4989:
  3619   0036E6  500D               	movf	___aomod@divisor^0,w,c
  3620   0036E8  100E               	iorwf	(___aomod@divisor+1)^0,w,c
  3621   0036EA  100F               	iorwf	(___aomod@divisor+2)^0,w,c
  3622   0036EC  1010               	iorwf	(___aomod@divisor+3)^0,w,c
  3623   0036EE  1011               	iorwf	(___aomod@divisor+4)^0,w,c
  3624   0036F0  1012               	iorwf	(___aomod@divisor+5)^0,w,c
  3625   0036F2  1013               	iorwf	(___aomod@divisor+6)^0,w,c
  3626   0036F4  1014               	iorwf	(___aomod@divisor+7)^0,w,c
  3627   0036F6  B4D8               	btfsc	status,2,c
  3628   0036F8  EF80  F01B         	goto	u5321
  3629   0036FC  EF82  F01B         	goto	u5320
  3630   003700                     u5321:
  3631   003700  EFCA  F01B         	goto	l5005
  3632   003704                     u5320:
  3633   003704  0E01               	movlw	1
  3634   003706  6E15               	movwf	___aomod@counter^0,c
  3635   003708  EF90  F01B         	goto	l4995
  3636   00370C                     l4993:
  3637   00370C  90D8               	bcf	status,0,c
  3638   00370E  360D               	rlcf	___aomod@divisor^0,f,c
  3639   003710  360E               	rlcf	(___aomod@divisor+1)^0,f,c
  3640   003712  360F               	rlcf	(___aomod@divisor+2)^0,f,c
  3641   003714  3610               	rlcf	(___aomod@divisor+3)^0,f,c
  3642   003716  3611               	rlcf	(___aomod@divisor+4)^0,f,c
  3643   003718  3612               	rlcf	(___aomod@divisor+5)^0,f,c
  3644   00371A  3613               	rlcf	(___aomod@divisor+6)^0,f,c
  3645   00371C  3614               	rlcf	(___aomod@divisor+7)^0,f,c
  3646   00371E  2A15               	incf	___aomod@counter^0,f,c
  3647   003720                     l4995:
  3648   003720  AE14               	btfss	(___aomod@divisor+7)^0,7,c
  3649   003722  EF95  F01B         	goto	u5331
  3650   003726  EF97  F01B         	goto	u5330
  3651   00372A                     u5331:
  3652   00372A  EF86  F01B         	goto	l4993
  3653   00372E                     u5330:
  3654   00372E                     l4997:
  3655   00372E  500D               	movf	___aomod@divisor^0,w,c
  3656   003730  5C05               	subwf	___aomod@dividend^0,w,c
  3657   003732  500E               	movf	(___aomod@divisor+1)^0,w,c
  3658   003734  5806               	subwfb	(___aomod@dividend+1)^0,w,c
  3659   003736  500F               	movf	(___aomod@divisor+2)^0,w,c
  3660   003738  5807               	subwfb	(___aomod@dividend+2)^0,w,c
  3661   00373A  5010               	movf	(___aomod@divisor+3)^0,w,c
  3662   00373C  5808               	subwfb	(___aomod@dividend+3)^0,w,c
  3663   00373E  5011               	movf	(___aomod@divisor+4)^0,w,c
  3664   003740  5809               	subwfb	(___aomod@dividend+4)^0,w,c
  3665   003742  5012               	movf	(___aomod@divisor+5)^0,w,c
  3666   003744  580A               	subwfb	(___aomod@dividend+5)^0,w,c
  3667   003746  5013               	movf	(___aomod@divisor+6)^0,w,c
  3668   003748  580B               	subwfb	(___aomod@dividend+6)^0,w,c
  3669   00374A  5014               	movf	(___aomod@divisor+7)^0,w,c
  3670   00374C  580C               	subwfb	(___aomod@dividend+7)^0,w,c
  3671   00374E  A0D8               	btfss	status,0,c
  3672   003750  EFAC  F01B         	goto	u5341
  3673   003754  EFAE  F01B         	goto	u5340
  3674   003758                     u5341:
  3675   003758  EFBE  F01B         	goto	l5001
  3676   00375C                     u5340:
  3677   00375C  500D               	movf	___aomod@divisor^0,w,c
  3678   00375E  5E05               	subwf	___aomod@dividend^0,f,c
  3679   003760  500E               	movf	(___aomod@divisor+1)^0,w,c
  3680   003762  5A06               	subwfb	(___aomod@dividend+1)^0,f,c
  3681   003764  500F               	movf	(___aomod@divisor+2)^0,w,c
  3682   003766  5A07               	subwfb	(___aomod@dividend+2)^0,f,c
  3683   003768  5010               	movf	(___aomod@divisor+3)^0,w,c
  3684   00376A  5A08               	subwfb	(___aomod@dividend+3)^0,f,c
  3685   00376C  5011               	movf	(___aomod@divisor+4)^0,w,c
  3686   00376E  5A09               	subwfb	(___aomod@dividend+4)^0,f,c
  3687   003770  5012               	movf	(___aomod@divisor+5)^0,w,c
  3688   003772  5A0A               	subwfb	(___aomod@dividend+5)^0,f,c
  3689   003774  5013               	movf	(___aomod@divisor+6)^0,w,c
  3690   003776  5A0B               	subwfb	(___aomod@dividend+6)^0,f,c
  3691   003778  5014               	movf	(___aomod@divisor+7)^0,w,c
  3692   00377A  5A0C               	subwfb	(___aomod@dividend+7)^0,f,c
  3693   00377C                     l5001:
  3694   00377C  90D8               	bcf	status,0,c
  3695   00377E  3214               	rrcf	(___aomod@divisor+7)^0,f,c
  3696   003780  3213               	rrcf	(___aomod@divisor+6)^0,f,c
  3697   003782  3212               	rrcf	(___aomod@divisor+5)^0,f,c
  3698   003784  3211               	rrcf	(___aomod@divisor+4)^0,f,c
  3699   003786  3210               	rrcf	(___aomod@divisor+3)^0,f,c
  3700   003788  320F               	rrcf	(___aomod@divisor+2)^0,f,c
  3701   00378A  320E               	rrcf	(___aomod@divisor+1)^0,f,c
  3702   00378C  320D               	rrcf	___aomod@divisor^0,f,c
  3703   00378E  2E15               	decfsz	___aomod@counter^0,f,c
  3704   003790  EF97  F01B         	goto	l4997
  3705   003794                     l5005:
  3706   003794  5016               	movf	___aomod@sign^0,w,c
  3707   003796  B4D8               	btfsc	status,2,c
  3708   003798  EFD0  F01B         	goto	u5351
  3709   00379C  EFD2  F01B         	goto	u5350
  3710   0037A0                     u5351:
  3711   0037A0  EFE2  F01B         	goto	l5009
  3712   0037A4                     u5350:
  3713   0037A4  1E0C               	comf	(___aomod@dividend+7)^0,f,c
  3714   0037A6  1E0B               	comf	(___aomod@dividend+6)^0,f,c
  3715   0037A8  1E0A               	comf	(___aomod@dividend+5)^0,f,c
  3716   0037AA  1E09               	comf	(___aomod@dividend+4)^0,f,c
  3717   0037AC  1E08               	comf	(___aomod@dividend+3)^0,f,c
  3718   0037AE  1E07               	comf	(___aomod@dividend+2)^0,f,c
  3719   0037B0  1E06               	comf	(___aomod@dividend+1)^0,f,c
  3720   0037B2  6C05               	negf	___aomod@dividend^0,c
  3721   0037B4  0E00               	movlw	0
  3722   0037B6  2206               	addwfc	(___aomod@dividend+1)^0,f,c
  3723   0037B8  2207               	addwfc	(___aomod@dividend+2)^0,f,c
  3724   0037BA  2208               	addwfc	(___aomod@dividend+3)^0,f,c
  3725   0037BC  2209               	addwfc	(___aomod@dividend+4)^0,f,c
  3726   0037BE  220A               	addwfc	(___aomod@dividend+5)^0,f,c
  3727   0037C0  220B               	addwfc	(___aomod@dividend+6)^0,f,c
  3728   0037C2  220C               	addwfc	(___aomod@dividend+7)^0,f,c
  3729   0037C4                     l5009:
  3730   0037C4  C005  F005         	movff	___aomod@dividend,?___aomod
  3731   0037C8  C006  F006         	movff	___aomod@dividend+1,?___aomod+1
  3732   0037CC  C007  F007         	movff	___aomod@dividend+2,?___aomod+2
  3733   0037D0  C008  F008         	movff	___aomod@dividend+3,?___aomod+3
  3734   0037D4  C009  F009         	movff	___aomod@dividend+4,?___aomod+4
  3735   0037D8  C00A  F00A         	movff	___aomod@dividend+5,?___aomod+5
  3736   0037DC  C00B  F00B         	movff	___aomod@dividend+6,?___aomod+6
  3737   0037E0  C00C  F00C         	movff	___aomod@dividend+7,?___aomod+7
  3738   0037E4  0012               	return		;funcret
  3739   0037E6                     __end_of___aomod:
  3740                           	callstack 0
  3741                           
  3742 ;; *************** function ___aodiv *****************
  3743 ;; Defined at:
  3744 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aodiv.c"
  3745 ;; Parameters:    Size  Location     Type
  3746 ;;  dividend        8    4[COMRAM] long long 
  3747 ;;  divisor         8   12[COMRAM] long long 
  3748 ;; Auto vars:     Size  Location     Type
  3749 ;;  quotient        8   22[COMRAM] long long 
  3750 ;;  sign            1   21[COMRAM] unsigned char 
  3751 ;;  counter         1   20[COMRAM] unsigned char 
  3752 ;; Return value:  Size  Location     Type
  3753 ;;                  8    4[COMRAM] long long 
  3754 ;; Registers used:
  3755 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3756 ;; Tracked objects:
  3757 ;;		On entry : 0/0
  3758 ;;		On exit  : 0/0
  3759 ;;		Unchanged: 0/0
  3760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3761 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3762 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3764 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3765 ;;Total ram usage:       26 bytes
  3766 ;; Hardware stack levels used: 1
  3767 ;; Hardware stack levels required when called: 2
  3768 ;; This function calls:
  3769 ;;		Nothing
  3770 ;; This function is called by:
  3771 ;;		_dtoa
  3772 ;; This function uses a non-reentrant model
  3773 ;;
  3774                           
  3775                           	psect	text13
  3776   00338E                     __ptext13:
  3777                           	callstack 0
  3778   00338E                     ___aodiv:
  3779                           	callstack 23
  3780   00338E  0E00               	movlw	0
  3781   003390  6E16               	movwf	___aodiv@sign^0,c
  3782   003392  BE14               	btfsc	(___aodiv@divisor+7)^0,7,c
  3783   003394  EFD0  F019         	goto	u5230
  3784   003398  EFCE  F019         	goto	u5231
  3785   00339C                     u5231:
  3786   00339C  EFE2  F019         	goto	l4941
  3787   0033A0                     u5230:
  3788   0033A0  1E14               	comf	(___aodiv@divisor+7)^0,f,c
  3789   0033A2  1E13               	comf	(___aodiv@divisor+6)^0,f,c
  3790   0033A4  1E12               	comf	(___aodiv@divisor+5)^0,f,c
  3791   0033A6  1E11               	comf	(___aodiv@divisor+4)^0,f,c
  3792   0033A8  1E10               	comf	(___aodiv@divisor+3)^0,f,c
  3793   0033AA  1E0F               	comf	(___aodiv@divisor+2)^0,f,c
  3794   0033AC  1E0E               	comf	(___aodiv@divisor+1)^0,f,c
  3795   0033AE  6C0D               	negf	___aodiv@divisor^0,c
  3796   0033B0  0E00               	movlw	0
  3797   0033B2  220E               	addwfc	(___aodiv@divisor+1)^0,f,c
  3798   0033B4  220F               	addwfc	(___aodiv@divisor+2)^0,f,c
  3799   0033B6  2210               	addwfc	(___aodiv@divisor+3)^0,f,c
  3800   0033B8  2211               	addwfc	(___aodiv@divisor+4)^0,f,c
  3801   0033BA  2212               	addwfc	(___aodiv@divisor+5)^0,f,c
  3802   0033BC  2213               	addwfc	(___aodiv@divisor+6)^0,f,c
  3803   0033BE  2214               	addwfc	(___aodiv@divisor+7)^0,f,c
  3804   0033C0  0E01               	movlw	1
  3805   0033C2  6E16               	movwf	___aodiv@sign^0,c
  3806   0033C4                     l4941:
  3807   0033C4  BE0C               	btfsc	(___aodiv@dividend+7)^0,7,c
  3808   0033C6  EFE9  F019         	goto	u5240
  3809   0033CA  EFE7  F019         	goto	u5241
  3810   0033CE                     u5241:
  3811   0033CE  EFFB  F019         	goto	l4947
  3812   0033D2                     u5240:
  3813   0033D2  1E0C               	comf	(___aodiv@dividend+7)^0,f,c
  3814   0033D4  1E0B               	comf	(___aodiv@dividend+6)^0,f,c
  3815   0033D6  1E0A               	comf	(___aodiv@dividend+5)^0,f,c
  3816   0033D8  1E09               	comf	(___aodiv@dividend+4)^0,f,c
  3817   0033DA  1E08               	comf	(___aodiv@dividend+3)^0,f,c
  3818   0033DC  1E07               	comf	(___aodiv@dividend+2)^0,f,c
  3819   0033DE  1E06               	comf	(___aodiv@dividend+1)^0,f,c
  3820   0033E0  6C05               	negf	___aodiv@dividend^0,c
  3821   0033E2  0E00               	movlw	0
  3822   0033E4  2206               	addwfc	(___aodiv@dividend+1)^0,f,c
  3823   0033E6  2207               	addwfc	(___aodiv@dividend+2)^0,f,c
  3824   0033E8  2208               	addwfc	(___aodiv@dividend+3)^0,f,c
  3825   0033EA  2209               	addwfc	(___aodiv@dividend+4)^0,f,c
  3826   0033EC  220A               	addwfc	(___aodiv@dividend+5)^0,f,c
  3827   0033EE  220B               	addwfc	(___aodiv@dividend+6)^0,f,c
  3828   0033F0  220C               	addwfc	(___aodiv@dividend+7)^0,f,c
  3829   0033F2  0E01               	movlw	1
  3830   0033F4  1A16               	xorwf	___aodiv@sign^0,f,c
  3831   0033F6                     l4947:
  3832   0033F6  EE20  F017         	lfsr	2,___aodiv@quotient
  3833   0033FA  0E07               	movlw	7
  3834   0033FC                     u5251:
  3835   0033FC  6ADE               	clrf	postinc2,c
  3836   0033FE  06E8               	decf	wreg,f,c
  3837   003400  E2FD               	bc	u5251
  3838   003402  500D               	movf	___aodiv@divisor^0,w,c
  3839   003404  100E               	iorwf	(___aodiv@divisor+1)^0,w,c
  3840   003406  100F               	iorwf	(___aodiv@divisor+2)^0,w,c
  3841   003408  1010               	iorwf	(___aodiv@divisor+3)^0,w,c
  3842   00340A  1011               	iorwf	(___aodiv@divisor+4)^0,w,c
  3843   00340C  1012               	iorwf	(___aodiv@divisor+5)^0,w,c
  3844   00340E  1013               	iorwf	(___aodiv@divisor+6)^0,w,c
  3845   003410  1014               	iorwf	(___aodiv@divisor+7)^0,w,c
  3846   003412  B4D8               	btfsc	status,2,c
  3847   003414  EF0E  F01A         	goto	u5261
  3848   003418  EF10  F01A         	goto	u5260
  3849   00341C                     u5261:
  3850   00341C  EF62  F01A         	goto	l4969
  3851   003420                     u5260:
  3852   003420  0E01               	movlw	1
  3853   003422  6E15               	movwf	___aodiv@counter^0,c
  3854   003424  EF1E  F01A         	goto	l4955
  3855   003428                     l4953:
  3856   003428  90D8               	bcf	status,0,c
  3857   00342A  360D               	rlcf	___aodiv@divisor^0,f,c
  3858   00342C  360E               	rlcf	(___aodiv@divisor+1)^0,f,c
  3859   00342E  360F               	rlcf	(___aodiv@divisor+2)^0,f,c
  3860   003430  3610               	rlcf	(___aodiv@divisor+3)^0,f,c
  3861   003432  3611               	rlcf	(___aodiv@divisor+4)^0,f,c
  3862   003434  3612               	rlcf	(___aodiv@divisor+5)^0,f,c
  3863   003436  3613               	rlcf	(___aodiv@divisor+6)^0,f,c
  3864   003438  3614               	rlcf	(___aodiv@divisor+7)^0,f,c
  3865   00343A  2A15               	incf	___aodiv@counter^0,f,c
  3866   00343C                     l4955:
  3867   00343C  AE14               	btfss	(___aodiv@divisor+7)^0,7,c
  3868   00343E  EF23  F01A         	goto	u5271
  3869   003442  EF25  F01A         	goto	u5270
  3870   003446                     u5271:
  3871   003446  EF14  F01A         	goto	l4953
  3872   00344A                     u5270:
  3873   00344A                     l4957:
  3874   00344A  90D8               	bcf	status,0,c
  3875   00344C  3617               	rlcf	___aodiv@quotient^0,f,c
  3876   00344E  3618               	rlcf	(___aodiv@quotient+1)^0,f,c
  3877   003450  3619               	rlcf	(___aodiv@quotient+2)^0,f,c
  3878   003452  361A               	rlcf	(___aodiv@quotient+3)^0,f,c
  3879   003454  361B               	rlcf	(___aodiv@quotient+4)^0,f,c
  3880   003456  361C               	rlcf	(___aodiv@quotient+5)^0,f,c
  3881   003458  361D               	rlcf	(___aodiv@quotient+6)^0,f,c
  3882   00345A  361E               	rlcf	(___aodiv@quotient+7)^0,f,c
  3883   00345C  500D               	movf	___aodiv@divisor^0,w,c
  3884   00345E  5C05               	subwf	___aodiv@dividend^0,w,c
  3885   003460  500E               	movf	(___aodiv@divisor+1)^0,w,c
  3886   003462  5806               	subwfb	(___aodiv@dividend+1)^0,w,c
  3887   003464  500F               	movf	(___aodiv@divisor+2)^0,w,c
  3888   003466  5807               	subwfb	(___aodiv@dividend+2)^0,w,c
  3889   003468  5010               	movf	(___aodiv@divisor+3)^0,w,c
  3890   00346A  5808               	subwfb	(___aodiv@dividend+3)^0,w,c
  3891   00346C  5011               	movf	(___aodiv@divisor+4)^0,w,c
  3892   00346E  5809               	subwfb	(___aodiv@dividend+4)^0,w,c
  3893   003470  5012               	movf	(___aodiv@divisor+5)^0,w,c
  3894   003472  580A               	subwfb	(___aodiv@dividend+5)^0,w,c
  3895   003474  5013               	movf	(___aodiv@divisor+6)^0,w,c
  3896   003476  580B               	subwfb	(___aodiv@dividend+6)^0,w,c
  3897   003478  5014               	movf	(___aodiv@divisor+7)^0,w,c
  3898   00347A  580C               	subwfb	(___aodiv@dividend+7)^0,w,c
  3899   00347C  A0D8               	btfss	status,0,c
  3900   00347E  EF43  F01A         	goto	u5281
  3901   003482  EF45  F01A         	goto	u5280
  3902   003486                     u5281:
  3903   003486  EF56  F01A         	goto	l4965
  3904   00348A                     u5280:
  3905   00348A  500D               	movf	___aodiv@divisor^0,w,c
  3906   00348C  5E05               	subwf	___aodiv@dividend^0,f,c
  3907   00348E  500E               	movf	(___aodiv@divisor+1)^0,w,c
  3908   003490  5A06               	subwfb	(___aodiv@dividend+1)^0,f,c
  3909   003492  500F               	movf	(___aodiv@divisor+2)^0,w,c
  3910   003494  5A07               	subwfb	(___aodiv@dividend+2)^0,f,c
  3911   003496  5010               	movf	(___aodiv@divisor+3)^0,w,c
  3912   003498  5A08               	subwfb	(___aodiv@dividend+3)^0,f,c
  3913   00349A  5011               	movf	(___aodiv@divisor+4)^0,w,c
  3914   00349C  5A09               	subwfb	(___aodiv@dividend+4)^0,f,c
  3915   00349E  5012               	movf	(___aodiv@divisor+5)^0,w,c
  3916   0034A0  5A0A               	subwfb	(___aodiv@dividend+5)^0,f,c
  3917   0034A2  5013               	movf	(___aodiv@divisor+6)^0,w,c
  3918   0034A4  5A0B               	subwfb	(___aodiv@dividend+6)^0,f,c
  3919   0034A6  5014               	movf	(___aodiv@divisor+7)^0,w,c
  3920   0034A8  5A0C               	subwfb	(___aodiv@dividend+7)^0,f,c
  3921   0034AA  8017               	bsf	___aodiv@quotient^0,0,c
  3922   0034AC                     l4965:
  3923   0034AC  90D8               	bcf	status,0,c
  3924   0034AE  3214               	rrcf	(___aodiv@divisor+7)^0,f,c
  3925   0034B0  3213               	rrcf	(___aodiv@divisor+6)^0,f,c
  3926   0034B2  3212               	rrcf	(___aodiv@divisor+5)^0,f,c
  3927   0034B4  3211               	rrcf	(___aodiv@divisor+4)^0,f,c
  3928   0034B6  3210               	rrcf	(___aodiv@divisor+3)^0,f,c
  3929   0034B8  320F               	rrcf	(___aodiv@divisor+2)^0,f,c
  3930   0034BA  320E               	rrcf	(___aodiv@divisor+1)^0,f,c
  3931   0034BC  320D               	rrcf	___aodiv@divisor^0,f,c
  3932   0034BE  2E15               	decfsz	___aodiv@counter^0,f,c
  3933   0034C0  EF25  F01A         	goto	l4957
  3934   0034C4                     l4969:
  3935   0034C4  5016               	movf	___aodiv@sign^0,w,c
  3936   0034C6  B4D8               	btfsc	status,2,c
  3937   0034C8  EF68  F01A         	goto	u5291
  3938   0034CC  EF6A  F01A         	goto	u5290
  3939   0034D0                     u5291:
  3940   0034D0  EF7A  F01A         	goto	l4973
  3941   0034D4                     u5290:
  3942   0034D4  1E1E               	comf	(___aodiv@quotient+7)^0,f,c
  3943   0034D6  1E1D               	comf	(___aodiv@quotient+6)^0,f,c
  3944   0034D8  1E1C               	comf	(___aodiv@quotient+5)^0,f,c
  3945   0034DA  1E1B               	comf	(___aodiv@quotient+4)^0,f,c
  3946   0034DC  1E1A               	comf	(___aodiv@quotient+3)^0,f,c
  3947   0034DE  1E19               	comf	(___aodiv@quotient+2)^0,f,c
  3948   0034E0  1E18               	comf	(___aodiv@quotient+1)^0,f,c
  3949   0034E2  6C17               	negf	___aodiv@quotient^0,c
  3950   0034E4  0E00               	movlw	0
  3951   0034E6  2218               	addwfc	(___aodiv@quotient+1)^0,f,c
  3952   0034E8  2219               	addwfc	(___aodiv@quotient+2)^0,f,c
  3953   0034EA  221A               	addwfc	(___aodiv@quotient+3)^0,f,c
  3954   0034EC  221B               	addwfc	(___aodiv@quotient+4)^0,f,c
  3955   0034EE  221C               	addwfc	(___aodiv@quotient+5)^0,f,c
  3956   0034F0  221D               	addwfc	(___aodiv@quotient+6)^0,f,c
  3957   0034F2  221E               	addwfc	(___aodiv@quotient+7)^0,f,c
  3958   0034F4                     l4973:
  3959   0034F4  C017  F005         	movff	___aodiv@quotient,?___aodiv
  3960   0034F8  C018  F006         	movff	___aodiv@quotient+1,?___aodiv+1
  3961   0034FC  C019  F007         	movff	___aodiv@quotient+2,?___aodiv+2
  3962   003500  C01A  F008         	movff	___aodiv@quotient+3,?___aodiv+3
  3963   003504  C01B  F009         	movff	___aodiv@quotient+4,?___aodiv+4
  3964   003508  C01C  F00A         	movff	___aodiv@quotient+5,?___aodiv+5
  3965   00350C  C01D  F00B         	movff	___aodiv@quotient+6,?___aodiv+6
  3966   003510  C01E  F00C         	movff	___aodiv@quotient+7,?___aodiv+7
  3967   003514  0012               	return		;funcret
  3968   003516                     __end_of___aodiv:
  3969                           	callstack 0
  3970                           
  3971 ;; *************** function _sendTxBuf *****************
  3972 ;; Defined at:
  3973 ;;		line 126 in file "serialTest.c"
  3974 ;; Parameters:    Size  Location     Type
  3975 ;;		None
  3976 ;; Auto vars:     Size  Location     Type
  3977 ;;		None
  3978 ;; Return value:  Size  Location     Type
  3979 ;;                  1    wreg      void 
  3980 ;; Registers used:
  3981 ;;		wreg, status,2, status,0, cstack
  3982 ;; Tracked objects:
  3983 ;;		On entry : 0/0
  3984 ;;		On exit  : 0/0
  3985 ;;		Unchanged: 0/0
  3986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3990 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3991 ;;Total ram usage:        0 bytes
  3992 ;; Hardware stack levels used: 1
  3993 ;; Hardware stack levels required when called: 3
  3994 ;; This function calls:
  3995 ;;		_isDataInTxBuf
  3996 ;; This function is called by:
  3997 ;;		_return_home_turns
  3998 ;; This function uses a non-reentrant model
  3999 ;;
  4000                           
  4001                           	psect	text14
  4002   004CF6                     __ptext14:
  4003                           	callstack 0
  4004   004CF6                     _sendTxBuf:
  4005                           	callstack 26
  4006   004CF6                     
  4007                           ;serialTest.c: 127:     if (isDataInTxBuf()) {PIE4bits.TX4IE=1;}
  4008   004CF6  EC88  F026         	call	_isDataInTxBuf	;wreg free
  4009   004CFA  0900               	iorlw	0
  4010   004CFC  B4D8               	btfsc	status,2,c
  4011   004CFE  EF83  F026         	goto	u3691
  4012   004D02  EF85  F026         	goto	u3690
  4013   004D06                     u3691:
  4014   004D06  EF87  F026         	goto	l543
  4015   004D0A                     u3690:
  4016   004D0A  010E               	movlb	14	; () banked
  4017   004D0C  852D               	bsf	45,2,b	;volatile
  4018   004D0E                     l543:
  4019   004D0E  0012               	return		;funcret
  4020   004D10                     __end_of_sendTxBuf:
  4021                           	callstack 0
  4022                           
  4023 ;; *************** function _isDataInTxBuf *****************
  4024 ;; Defined at:
  4025 ;;		line 113 in file "serialTest.c"
  4026 ;; Parameters:    Size  Location     Type
  4027 ;;		None
  4028 ;; Auto vars:     Size  Location     Type
  4029 ;;		None
  4030 ;; Return value:  Size  Location     Type
  4031 ;;                  1    wreg      unsigned char 
  4032 ;; Registers used:
  4033 ;;		wreg, status,2, status,0
  4034 ;; Tracked objects:
  4035 ;;		On entry : 0/0
  4036 ;;		On exit  : 0/0
  4037 ;;		Unchanged: 0/0
  4038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4040 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4042 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4043 ;;Total ram usage:        0 bytes
  4044 ;; Hardware stack levels used: 1
  4045 ;; Hardware stack levels required when called: 2
  4046 ;; This function calls:
  4047 ;;		Nothing
  4048 ;; This function is called by:
  4049 ;;		_sendTxBuf
  4050 ;; This function uses a non-reentrant model
  4051 ;;
  4052                           
  4053                           	psect	text15
  4054   004D10                     __ptext15:
  4055                           	callstack 0
  4056   004D10                     _isDataInTxBuf:
  4057                           	callstack 26
  4058   004D10                     
  4059                           ;serialTest.c: 114:     return (TxBufWriteCnt!=TxBufReadCnt);
  4060   004D10  5057               	movf	_TxBufReadCnt^0,w,c	;volatile
  4061   004D12  1858               	xorwf	_TxBufWriteCnt^0,w,c	;volatile
  4062   004D14  A4D8               	btfss	status,2,c
  4063   004D16  EF8F  F026         	goto	u3181
  4064   004D1A  EF92  F026         	goto	u3180
  4065   004D1E                     u3181:
  4066   004D1E  0E01               	movlw	1
  4067   004D20  EF93  F026         	goto	u3190
  4068   004D24                     u3180:
  4069   004D24  0E00               	movlw	0
  4070   004D26                     u3190:
  4071   004D26  0012               	return		;funcret
  4072   004D28                     __end_of_isDataInTxBuf:
  4073                           	callstack 0
  4074                           
  4075 ;; *************** function _forward *****************
  4076 ;; Defined at:
  4077 ;;		line 132 in file "MazeRobot.X/dc_motor.c"
  4078 ;; Parameters:    Size  Location     Type
  4079 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  4080 ;;		 -> main@motorLeft(9), 
  4081 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  4082 ;;		 -> main@motorRight(9), 
  4083 ;; Auto vars:     Size  Location     Type
  4084 ;;		None
  4085 ;; Return value:  Size  Location     Type
  4086 ;;                  1    wreg      void 
  4087 ;; Registers used:
  4088 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4089 ;; Tracked objects:
  4090 ;;		On entry : 0/0
  4091 ;;		On exit  : 0/0
  4092 ;;		Unchanged: 0/0
  4093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4094 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4096 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4097 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4098 ;;Total ram usage:        5 bytes
  4099 ;; Hardware stack levels used: 1
  4100 ;; Hardware stack levels required when called: 4
  4101 ;; This function calls:
  4102 ;;		_setMotorPWM
  4103 ;; This function is called by:
  4104 ;;		_return_home_turns
  4105 ;;		_main
  4106 ;; This function uses a non-reentrant model
  4107 ;;
  4108                           
  4109                           	psect	text16
  4110   004106                     __ptext16:
  4111                           	callstack 0
  4112   004106                     _forward:
  4113                           	callstack 25
  4114   004106                     
  4115                           ;MazeRobot.X/dc_motor.c: 132: void forward(DC_motor *mL, DC_motor *mR);MazeRobot.X/dc_mo
      +                          tor.c: 133: {;MazeRobot.X/dc_motor.c: 134:     mL->direction = 1;
  4116   004106  EE20 F001          	lfsr	2,1
  4117   00410A  5018               	movf	forward@mL^0,w,c
  4118   00410C  26D9               	addwf	fsr2l,f,c
  4119   00410E  5019               	movf	(forward@mL+1)^0,w,c
  4120   004110  22DA               	addwfc	fsr2h,f,c
  4121   004112  0E01               	movlw	1
  4122   004114  6EDF               	movwf	indf2,c
  4123                           
  4124                           ;MazeRobot.X/dc_motor.c: 135:     mR->direction = 1;
  4125   004116  EE20 F001          	lfsr	2,1
  4126   00411A  501A               	movf	forward@mR^0,w,c
  4127   00411C  26D9               	addwf	fsr2l,f,c
  4128   00411E  501B               	movf	(forward@mR+1)^0,w,c
  4129   004120  22DA               	addwfc	fsr2h,f,c
  4130   004122  0E01               	movlw	1
  4131   004124  6EDF               	movwf	indf2,c
  4132                           
  4133                           ;MazeRobot.X/dc_motor.c: 137:     mL->brakemode = 1;
  4134   004126  EE20 F002          	lfsr	2,2
  4135   00412A  5018               	movf	forward@mL^0,w,c
  4136   00412C  26D9               	addwf	fsr2l,f,c
  4137   00412E  5019               	movf	(forward@mL+1)^0,w,c
  4138   004130  22DA               	addwfc	fsr2h,f,c
  4139   004132  0E01               	movlw	1
  4140   004134  6EDF               	movwf	indf2,c
  4141                           
  4142                           ;MazeRobot.X/dc_motor.c: 138:     mL->brakemode = 1;
  4143   004136  EE20 F002          	lfsr	2,2
  4144   00413A  5018               	movf	forward@mL^0,w,c
  4145   00413C  26D9               	addwf	fsr2l,f,c
  4146   00413E  5019               	movf	(forward@mL+1)^0,w,c
  4147   004140  22DA               	addwfc	fsr2h,f,c
  4148   004142  0E01               	movlw	1
  4149   004144  6EDF               	movwf	indf2,c
  4150                           
  4151                           ;MazeRobot.X/dc_motor.c: 140:     while ((mL->power)<40 && (mR->power)<40){
  4152   004146  EFC9  F020         	goto	l3943
  4153   00414A                     l3935:
  4154                           
  4155                           ;MazeRobot.X/dc_motor.c: 141:         if ((mL->power) < 40){
  4156   00414A  C018  FFD9         	movff	forward@mL,fsr2l
  4157   00414E  C019  FFDA         	movff	forward@mL+1,fsr2h
  4158   004152  0E28               	movlw	40
  4159   004154  60DF               	cpfslt	indf2,c
  4160   004156  EFAF  F020         	goto	u3701
  4161   00415A  EFB1  F020         	goto	u3700
  4162   00415E                     u3701:
  4163   00415E  EFB7  F020         	goto	l3939
  4164   004162                     u3700:
  4165   004162                     
  4166                           ;MazeRobot.X/dc_motor.c: 142:             mL->power += 5;
  4167   004162  C018  FFD9         	movff	forward@mL,fsr2l
  4168   004166  C019  FFDA         	movff	forward@mL+1,fsr2h
  4169   00416A  0E05               	movlw	5
  4170   00416C  26DF               	addwf	indf2,f,c
  4171   00416E                     l3939:
  4172                           
  4173                           ;MazeRobot.X/dc_motor.c: 144:         if ((mR->power) < 40){
  4174   00416E  C01A  FFD9         	movff	forward@mR,fsr2l
  4175   004172  C01B  FFDA         	movff	forward@mR+1,fsr2h
  4176   004176  0E28               	movlw	40
  4177   004178  60DF               	cpfslt	indf2,c
  4178   00417A  EFC1  F020         	goto	u3711
  4179   00417E  EFC3  F020         	goto	u3710
  4180   004182                     u3711:
  4181   004182  EFC9  F020         	goto	l3943
  4182   004186                     u3710:
  4183   004186                     
  4184                           ;MazeRobot.X/dc_motor.c: 145:             mR->power += 5;
  4185   004186  C01A  FFD9         	movff	forward@mR,fsr2l
  4186   00418A  C01B  FFDA         	movff	forward@mR+1,fsr2h
  4187   00418E  0E05               	movlw	5
  4188   004190  26DF               	addwf	indf2,f,c
  4189   004192                     l3943:
  4190                           
  4191                           ;MazeRobot.X/dc_motor.c: 140:     while ((mL->power)<40 && (mR->power)<40){
  4192   004192  C018  FFD9         	movff	forward@mL,fsr2l
  4193   004196  C019  FFDA         	movff	forward@mL+1,fsr2h
  4194   00419A  0E28               	movlw	40
  4195   00419C  60DF               	cpfslt	indf2,c
  4196   00419E  EFD3  F020         	goto	u3721
  4197   0041A2  EFD5  F020         	goto	u3720
  4198   0041A6                     u3721:
  4199   0041A6  EFE1  F020         	goto	l3947
  4200   0041AA                     u3720:
  4201   0041AA  C01A  FFD9         	movff	forward@mR,fsr2l
  4202   0041AE  C01B  FFDA         	movff	forward@mR+1,fsr2h
  4203   0041B2  0E27               	movlw	39
  4204   0041B4  64DF               	cpfsgt	indf2,c
  4205   0041B6  EFDF  F020         	goto	u3731
  4206   0041BA  EFE1  F020         	goto	u3730
  4207   0041BE                     u3731:
  4208   0041BE  EFA5  F020         	goto	l3935
  4209   0041C2                     u3730:
  4210   0041C2                     l3947:
  4211                           
  4212                           ;MazeRobot.X/dc_motor.c: 149:     setMotorPWM(mL);
  4213   0041C2  C018  F012         	movff	forward@mL,setMotorPWM@m
  4214   0041C6  C019  F013         	movff	forward@mL+1,setMotorPWM@m+1
  4215   0041CA  EC8B  F01A         	call	_setMotorPWM	;wreg free
  4216                           
  4217                           ;MazeRobot.X/dc_motor.c: 150:     setMotorPWM(mR);
  4218   0041CE  C01A  F012         	movff	forward@mR,setMotorPWM@m
  4219   0041D2  C01B  F013         	movff	forward@mR+1,setMotorPWM@m+1
  4220   0041D6  EC8B  F01A         	call	_setMotorPWM	;wreg free
  4221   0041DA  0012               	return		;funcret
  4222   0041DC                     __end_of_forward:
  4223                           	callstack 0
  4224                           
  4225 ;; *************** function _TxBufferedString *****************
  4226 ;; Defined at:
  4227 ;;		line 118 in file "serialTest.c"
  4228 ;; Parameters:    Size  Location     Type
  4229 ;;  string          2    5[COMRAM] PTR unsigned char 
  4230 ;;		 -> return_home_turns@string1(100), 
  4231 ;; Auto vars:     Size  Location     Type
  4232 ;;		None
  4233 ;; Return value:  Size  Location     Type
  4234 ;;                  1    wreg      void 
  4235 ;; Registers used:
  4236 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4237 ;; Tracked objects:
  4238 ;;		On entry : 0/0
  4239 ;;		On exit  : 0/0
  4240 ;;		Unchanged: 0/0
  4241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4242 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4243 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4245 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4246 ;;Total ram usage:        2 bytes
  4247 ;; Hardware stack levels used: 1
  4248 ;; Hardware stack levels required when called: 3
  4249 ;; This function calls:
  4250 ;;		_putCharToTxBuf
  4251 ;; This function is called by:
  4252 ;;		_return_home_turns
  4253 ;; This function uses a non-reentrant model
  4254 ;;
  4255                           
  4256                           	psect	text17
  4257   004B80                     __ptext17:
  4258                           	callstack 0
  4259   004B80                     _TxBufferedString:
  4260                           	callstack 26
  4261   004B80                     
  4262                           ;serialTest.c: 121:     while(*string != 0) {putCharToTxBuf(*string++);}
  4263   004B80  EFCB  F025         	goto	l3927
  4264   004B84                     l3923:
  4265   004B84  C006  FFD9         	movff	TxBufferedString@string,fsr2l
  4266   004B88  C007  FFDA         	movff	TxBufferedString@string+1,fsr2h
  4267   004B8C  50DF               	movf	indf2,w,c
  4268   004B8E  EC05  F026         	call	_putCharToTxBuf
  4269   004B92  4A06               	infsnz	TxBufferedString@string^0,f,c
  4270   004B94  2A07               	incf	(TxBufferedString@string+1)^0,f,c
  4271   004B96                     l3927:
  4272   004B96  C006  FFD9         	movff	TxBufferedString@string,fsr2l
  4273   004B9A  C007  FFDA         	movff	TxBufferedString@string+1,fsr2h
  4274   004B9E  50DF               	movf	indf2,w,c
  4275   004BA0  A4D8               	btfss	status,2,c
  4276   004BA2  EFD5  F025         	goto	u3681
  4277   004BA6  EFD7  F025         	goto	u3680
  4278   004BAA                     u3681:
  4279   004BAA  EFC2  F025         	goto	l3923
  4280   004BAE                     u3680:
  4281   004BAE  0012               	return		;funcret
  4282   004BB0                     __end_of_TxBufferedString:
  4283                           	callstack 0
  4284                           
  4285 ;; *************** function _putCharToTxBuf *****************
  4286 ;; Defined at:
  4287 ;;		line 105 in file "serialTest.c"
  4288 ;; Parameters:    Size  Location     Type
  4289 ;;  byte            1    wreg     unsigned char 
  4290 ;; Auto vars:     Size  Location     Type
  4291 ;;  byte            1    4[COMRAM] unsigned char 
  4292 ;; Return value:  Size  Location     Type
  4293 ;;                  1    wreg      void 
  4294 ;; Registers used:
  4295 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4296 ;; Tracked objects:
  4297 ;;		On entry : 0/0
  4298 ;;		On exit  : 0/0
  4299 ;;		Unchanged: 0/0
  4300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4302 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4304 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4305 ;;Total ram usage:        1 bytes
  4306 ;; Hardware stack levels used: 1
  4307 ;; Hardware stack levels required when called: 2
  4308 ;; This function calls:
  4309 ;;		Nothing
  4310 ;; This function is called by:
  4311 ;;		_TxBufferedString
  4312 ;; This function uses a non-reentrant model
  4313 ;;
  4314                           
  4315                           	psect	text18
  4316   004C0A                     __ptext18:
  4317                           	callstack 0
  4318   004C0A                     _putCharToTxBuf:
  4319                           	callstack 26
  4320                           
  4321                           ;incstack = 0
  4322                           ;putCharToTxBuf@byte stored from wreg
  4323   004C0A  6E05               	movwf	putCharToTxBuf@byte^0,c
  4324   004C0C                     
  4325                           ;serialTest.c: 106:     if (TxBufWriteCnt>=60) {TxBufWriteCnt=0;}
  4326   004C0C  0E3B               	movlw	59
  4327   004C0E  6458               	cpfsgt	_TxBufWriteCnt^0,c	;volatile
  4328   004C10  EF0C  F026         	goto	u3171
  4329   004C14  EF0E  F026         	goto	u3170
  4330   004C18                     u3171:
  4331   004C18  EF10  F026         	goto	l3539
  4332   004C1C                     u3170:
  4333   004C1C  0E00               	movlw	0
  4334   004C1E  6E58               	movwf	_TxBufWriteCnt^0,c	;volatile
  4335   004C20                     l3539:
  4336                           
  4337                           ;serialTest.c: 107:     EUSART4TXbuf[TxBufWriteCnt++]=byte;
  4338   004C20  0E00               	movlw	low _EUSART4TXbuf
  4339   004C22  2458               	addwf	_TxBufWriteCnt^0,w,c	;volatile
  4340   004C24  6ED9               	movwf	fsr2l,c
  4341   004C26  6ADA               	clrf	fsr2h,c
  4342   004C28  0E02               	movlw	high _EUSART4TXbuf
  4343   004C2A  22DA               	addwfc	fsr2h,f,c
  4344   004C2C  C005  FFDF         	movff	putCharToTxBuf@byte,indf2
  4345   004C30  2A58               	incf	_TxBufWriteCnt^0,f,c	;volatile
  4346   004C32  0012               	return		;funcret
  4347   004C34                     __end_of_putCharToTxBuf:
  4348                           	callstack 0
  4349                           
  4350 ;; *************** function _initUSART4 *****************
  4351 ;; Defined at:
  4352 ;;		line 5 in file "serialTest.c"
  4353 ;; Parameters:    Size  Location     Type
  4354 ;;		None
  4355 ;; Auto vars:     Size  Location     Type
  4356 ;;		None
  4357 ;; Return value:  Size  Location     Type
  4358 ;;                  1    wreg      void 
  4359 ;; Registers used:
  4360 ;;		wreg, status,2
  4361 ;; Tracked objects:
  4362 ;;		On entry : 0/0
  4363 ;;		On exit  : 0/0
  4364 ;;		Unchanged: 0/0
  4365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4367 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4369 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4370 ;;Total ram usage:        0 bytes
  4371 ;; Hardware stack levels used: 1
  4372 ;; Hardware stack levels required when called: 2
  4373 ;; This function calls:
  4374 ;;		Nothing
  4375 ;; This function is called by:
  4376 ;;		_main
  4377 ;; This function uses a non-reentrant model
  4378 ;;
  4379                           
  4380                           	psect	text19
  4381   004BB0                     __ptext19:
  4382                           	callstack 0
  4383   004BB0                     _initUSART4:
  4384                           	callstack 28
  4385   004BB0                     
  4386                           ;serialTest.c: 9:     BAUD4CONbits.BRG16 = 0;
  4387   004BB0  010E               	movlb	14	; () banked
  4388   004BB2  97E9               	bcf	233,3,b	;volatile
  4389                           
  4390                           ;serialTest.c: 10:     TX4STAbits.BRGH = 0;
  4391   004BB4  95E8               	bcf	232,2,b	;volatile
  4392   004BB6                     
  4393                           ; BSR set to: 14
  4394                           ;serialTest.c: 19:     SP4BRGL = 51;
  4395   004BB6  0E33               	movlw	51
  4396   004BB8  6FE5               	movwf	229,b	;volatile
  4397                           
  4398                           ;serialTest.c: 20:     SP4BRGH = 0;
  4399   004BBA  0E00               	movlw	0
  4400   004BBC  6FE6               	movwf	230,b	;volatile
  4401   004BBE                     
  4402                           ; BSR set to: 14
  4403                           ;serialTest.c: 22:     RC4STAbits.CREN = 1;
  4404   004BBE  89E7               	bsf	231,4,b	;volatile
  4405   004BC0                     
  4406                           ; BSR set to: 14
  4407                           ;serialTest.c: 23:     TX4STAbits.TXEN = 1;
  4408   004BC0  8BE8               	bsf	232,5,b	;volatile
  4409   004BC2                     
  4410                           ; BSR set to: 14
  4411                           ;serialTest.c: 24:     RC4STAbits.SPEN = 1;
  4412   004BC2  8FE7               	bsf	231,7,b	;volatile
  4413   004BC4                     
  4414                           ; BSR set to: 14
  4415                           ;serialTest.c: 26:     TRISCbits.TRISC1 = 1;
  4416   004BC4  8283               	bsf	131,1,c	;volatile
  4417                           
  4418                           ;serialTest.c: 28:     RC0PPS = 0x12;
  4419   004BC6  0E12               	movlw	18
  4420   004BC8  6F62               	movwf	98,b	;volatile
  4421                           
  4422                           ;serialTest.c: 29:     RX4PPS = 0x11;
  4423   004BCA  0E11               	movlw	17
  4424   004BCC  6F15               	movwf	21,b	;volatile
  4425   004BCE                     
  4426                           ; BSR set to: 14
  4427                           ;serialTest.c: 32:     INTCONbits.GIE = 1;
  4428   004BCE  8EF2               	bsf	242,7,c	;volatile
  4429   004BD0                     
  4430                           ; BSR set to: 14
  4431                           ;serialTest.c: 33:     INTCONbits.IPEN = 1;
  4432   004BD0  8AF2               	bsf	242,5,c	;volatile
  4433   004BD2                     
  4434                           ; BSR set to: 14
  4435                           ;serialTest.c: 34:     INTCONbits.PEIE = 1;
  4436   004BD2  8CF2               	bsf	242,6,c	;volatile
  4437   004BD4                     
  4438                           ; BSR set to: 14
  4439                           ;serialTest.c: 36:     PIE4bits.RC4IE=1;
  4440   004BD4  872D               	bsf	45,3,b	;volatile
  4441   004BD6                     
  4442                           ; BSR set to: 14
  4443                           ;serialTest.c: 37:     PIE4bits.TX4IE=0;
  4444   004BD6  952D               	bcf	45,2,b	;volatile
  4445   004BD8                     
  4446                           ; BSR set to: 14
  4447                           ;serialTest.c: 39:     IPR4bits.RC4IP = 1;
  4448   004BD8  8723               	bsf	35,3,b	;volatile
  4449   004BDA                     
  4450                           ; BSR set to: 14
  4451                           ;serialTest.c: 40:     IPR4bits.TX4IP = 1;
  4452   004BDA  8523               	bsf	35,2,b	;volatile
  4453   004BDC                     
  4454                           ; BSR set to: 14
  4455   004BDC  0012               	return		;funcret
  4456   004BDE                     __end_of_initUSART4:
  4457                           	callstack 0
  4458                           
  4459 ;; *************** function _initDCmotorsPWM *****************
  4460 ;; Defined at:
  4461 ;;		line 10 in file "MazeRobot.X/dc_motor.c"
  4462 ;; Parameters:    Size  Location     Type
  4463 ;;  PWMperiod       2    4[COMRAM] int 
  4464 ;; Auto vars:     Size  Location     Type
  4465 ;;		None
  4466 ;; Return value:  Size  Location     Type
  4467 ;;                  1    wreg      void 
  4468 ;; Registers used:
  4469 ;;		wreg, status,2
  4470 ;; Tracked objects:
  4471 ;;		On entry : 0/0
  4472 ;;		On exit  : 0/0
  4473 ;;		Unchanged: 0/0
  4474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4475 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4478 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4479 ;;Total ram usage:        2 bytes
  4480 ;; Hardware stack levels used: 1
  4481 ;; Hardware stack levels required when called: 2
  4482 ;; This function calls:
  4483 ;;		Nothing
  4484 ;; This function is called by:
  4485 ;;		_main
  4486 ;; This function uses a non-reentrant model
  4487 ;;
  4488                           
  4489                           	psect	text20
  4490   004628                     __ptext20:
  4491                           	callstack 0
  4492   004628                     _initDCmotorsPWM:
  4493                           	callstack 28
  4494   004628                     
  4495                           ;MazeRobot.X/dc_motor.c: 14:     LATEbits.LATE2 = 0;
  4496   004628  947D               	bcf	125,2,c	;volatile
  4497                           
  4498                           ;MazeRobot.X/dc_motor.c: 15:     LATEbits.LATE4 = 0;
  4499   00462A  987D               	bcf	125,4,c	;volatile
  4500                           
  4501                           ;MazeRobot.X/dc_motor.c: 16:     LATCbits.LATC7 = 0;
  4502   00462C  9E7B               	bcf	123,7,c	;volatile
  4503                           
  4504                           ;MazeRobot.X/dc_motor.c: 17:     LATGbits.LATG6 = 0;
  4505   00462E  9C7F               	bcf	127,6,c	;volatile
  4506                           
  4507                           ;MazeRobot.X/dc_motor.c: 20:     TRISEbits.TRISE2 = 0 ;
  4508   004630  9485               	bcf	133,2,c	;volatile
  4509                           
  4510                           ;MazeRobot.X/dc_motor.c: 21:     TRISEbits.TRISE4 = 0 ;
  4511   004632  9885               	bcf	133,4,c	;volatile
  4512                           
  4513                           ;MazeRobot.X/dc_motor.c: 22:     TRISCbits.TRISC7 = 0 ;
  4514   004634  9E83               	bcf	131,7,c	;volatile
  4515                           
  4516                           ;MazeRobot.X/dc_motor.c: 23:     TRISGbits.TRISG6 = 0 ;
  4517   004636  9C87               	bcf	135,6,c	;volatile
  4518   004638                     
  4519                           ;MazeRobot.X/dc_motor.c: 26:     RE2PPS=0x05;
  4520   004638  0E05               	movlw	5
  4521   00463A  010E               	movlb	14	; () banked
  4522   00463C  6F74               	movwf	116,b	;volatile
  4523                           
  4524                           ;MazeRobot.X/dc_motor.c: 27:     RE4PPS=0x06;
  4525   00463E  0E06               	movlw	6
  4526   004640  6F76               	movwf	118,b	;volatile
  4527                           
  4528                           ;MazeRobot.X/dc_motor.c: 28:     RC7PPS=0x07;
  4529   004642  0E07               	movlw	7
  4530   004644  6F69               	movwf	105,b	;volatile
  4531                           
  4532                           ;MazeRobot.X/dc_motor.c: 29:     RG6PPS=0x08;
  4533   004646  0E08               	movlw	8
  4534   004648  6F88               	movwf	136,b	;volatile
  4535                           
  4536                           ;MazeRobot.X/dc_motor.c: 32:     T2CONbits.CKPS=0b011;
  4537   00464A  50BD               	movf	189,w,c	;volatile
  4538   00464C  0B8F               	andlw	-113
  4539   00464E  0930               	iorlw	48
  4540   004650  6EBD               	movwf	189,c	;volatile
  4541                           
  4542                           ;MazeRobot.X/dc_motor.c: 33:     T2HLTbits.MODE=0b00000;
  4543   004652  0EE0               	movlw	-32
  4544   004654  16BE               	andwf	190,f,c	;volatile
  4545                           
  4546                           ;MazeRobot.X/dc_motor.c: 34:     T2CLKCONbits.CS=0b0001;
  4547   004656  50BF               	movf	191,w,c	;volatile
  4548   004658  0BF0               	andlw	-16
  4549   00465A  0901               	iorlw	1
  4550   00465C  6EBF               	movwf	191,c	;volatile
  4551                           
  4552                           ;MazeRobot.X/dc_motor.c: 38:     T2PR=199;
  4553   00465E  0EC7               	movlw	199
  4554   004660  6EBC               	movwf	188,c	;volatile
  4555   004662                     
  4556                           ; BSR set to: 14
  4557                           ;MazeRobot.X/dc_motor.c: 39:     T2CONbits.ON=1;
  4558   004662  8EBD               	bsf	189,7,c	;volatile
  4559                           
  4560                           ;MazeRobot.X/dc_motor.c: 43:     CCPR1H=0;
  4561   004664  0E00               	movlw	0
  4562   004666  6EAA               	movwf	170,c	;volatile
  4563                           
  4564                           ;MazeRobot.X/dc_motor.c: 44:     CCPR2H=0;
  4565   004668  0E00               	movlw	0
  4566   00466A  6EA6               	movwf	166,c	;volatile
  4567                           
  4568                           ;MazeRobot.X/dc_motor.c: 45:     CCPR3H=0;
  4569   00466C  0E00               	movlw	0
  4570   00466E  010F               	movlb	15	; () banked
  4571   004670  6F25               	movwf	37,b	;volatile
  4572                           
  4573                           ;MazeRobot.X/dc_motor.c: 46:     CCPR4H=0;
  4574   004672  0E00               	movlw	0
  4575   004674  6F21               	movwf	33,b	;volatile
  4576                           
  4577                           ;MazeRobot.X/dc_motor.c: 49:     CCPTMRS0bits.C1TSEL=0;
  4578   004676  0EFC               	movlw	-4
  4579   004678  16AD               	andwf	173,f,c	;volatile
  4580                           
  4581                           ;MazeRobot.X/dc_motor.c: 50:     CCPTMRS0bits.C2TSEL=0;
  4582   00467A  0EF3               	movlw	-13
  4583   00467C  16AD               	andwf	173,f,c	;volatile
  4584                           
  4585                           ;MazeRobot.X/dc_motor.c: 51:     CCPTMRS0bits.C3TSEL=0;
  4586   00467E  0ECF               	movlw	-49
  4587   004680  16AD               	andwf	173,f,c	;volatile
  4588                           
  4589                           ;MazeRobot.X/dc_motor.c: 52:     CCPTMRS0bits.C4TSEL=0;
  4590   004682  0E3F               	movlw	-193
  4591   004684  16AD               	andwf	173,f,c	;volatile
  4592   004686                     
  4593                           ; BSR set to: 15
  4594                           ;MazeRobot.X/dc_motor.c: 55:     CCP1CONbits.FMT=1;
  4595   004686  88AB               	bsf	171,4,c	;volatile
  4596                           
  4597                           ;MazeRobot.X/dc_motor.c: 56:     CCP1CONbits.CCP1MODE=0b1100;
  4598   004688  50AB               	movf	171,w,c	;volatile
  4599   00468A  0BF0               	andlw	-16
  4600   00468C  090C               	iorlw	12
  4601   00468E  6EAB               	movwf	171,c	;volatile
  4602   004690                     
  4603                           ; BSR set to: 15
  4604                           ;MazeRobot.X/dc_motor.c: 57:     CCP1CONbits.EN=1;
  4605   004690  8EAB               	bsf	171,7,c	;volatile
  4606   004692                     
  4607                           ; BSR set to: 15
  4608                           ;MazeRobot.X/dc_motor.c: 59:     CCP2CONbits.FMT=1;
  4609   004692  88A7               	bsf	167,4,c	;volatile
  4610                           
  4611                           ;MazeRobot.X/dc_motor.c: 60:     CCP2CONbits.CCP2MODE=0b1100;
  4612   004694  50A7               	movf	167,w,c	;volatile
  4613   004696  0BF0               	andlw	-16
  4614   004698  090C               	iorlw	12
  4615   00469A  6EA7               	movwf	167,c	;volatile
  4616   00469C                     
  4617                           ; BSR set to: 15
  4618                           ;MazeRobot.X/dc_motor.c: 61:     CCP2CONbits.EN=1;
  4619   00469C  8EA7               	bsf	167,7,c	;volatile
  4620   00469E                     
  4621                           ; BSR set to: 15
  4622                           ;MazeRobot.X/dc_motor.c: 63:     CCP3CONbits.FMT=1;
  4623   00469E  8926               	bsf	38,4,b	;volatile
  4624                           
  4625                           ;MazeRobot.X/dc_motor.c: 64:     CCP3CONbits.CCP3MODE=0b1100;
  4626   0046A0  5126               	movf	38,w,b	;volatile
  4627   0046A2  0BF0               	andlw	-16
  4628   0046A4  090C               	iorlw	12
  4629   0046A6  6F26               	movwf	38,b	;volatile
  4630   0046A8                     
  4631                           ; BSR set to: 15
  4632                           ;MazeRobot.X/dc_motor.c: 65:     CCP3CONbits.EN=1;
  4633   0046A8  8F26               	bsf	38,7,b	;volatile
  4634   0046AA                     
  4635                           ; BSR set to: 15
  4636                           ;MazeRobot.X/dc_motor.c: 67:     CCP4CONbits.FMT=1;
  4637   0046AA  8922               	bsf	34,4,b	;volatile
  4638                           
  4639                           ;MazeRobot.X/dc_motor.c: 68:     CCP4CONbits.CCP4MODE=0b1100;
  4640   0046AC  5122               	movf	34,w,b	;volatile
  4641   0046AE  0BF0               	andlw	-16
  4642   0046B0  090C               	iorlw	12
  4643   0046B2  6F22               	movwf	34,b	;volatile
  4644   0046B4                     
  4645                           ; BSR set to: 15
  4646                           ;MazeRobot.X/dc_motor.c: 69:     CCP4CONbits.EN=1;
  4647   0046B4  8F22               	bsf	34,7,b	;volatile
  4648   0046B6                     
  4649                           ; BSR set to: 15
  4650   0046B6  0012               	return		;funcret
  4651   0046B8                     __end_of_initDCmotorsPWM:
  4652                           	callstack 0
  4653                           
  4654 ;; *************** function _color_click_init *****************
  4655 ;; Defined at:
  4656 ;;		line 8 in file "MazeRobot.X/color.c"
  4657 ;; Parameters:    Size  Location     Type
  4658 ;;		None
  4659 ;; Auto vars:     Size  Location     Type
  4660 ;;		None
  4661 ;; Return value:  Size  Location     Type
  4662 ;;                  1    wreg      void 
  4663 ;; Registers used:
  4664 ;;		wreg, status,2, status,0, cstack
  4665 ;; Tracked objects:
  4666 ;;		On entry : 0/0
  4667 ;;		On exit  : 0/0
  4668 ;;		Unchanged: 0/0
  4669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4672 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4673 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4674 ;;Total ram usage:        1 bytes
  4675 ;; Hardware stack levels used: 1
  4676 ;; Hardware stack levels required when called: 5
  4677 ;; This function calls:
  4678 ;;		_I2C_2_Master_Init
  4679 ;;		_color_writetoaddr
  4680 ;; This function is called by:
  4681 ;;		_main
  4682 ;; This function uses a non-reentrant model
  4683 ;;
  4684                           
  4685                           	psect	text21
  4686   004B4C                     __ptext21:
  4687                           	callstack 0
  4688   004B4C                     _color_click_init:
  4689                           	callstack 25
  4690   004B4C                     
  4691                           ;MazeRobot.X/color.c: 11:     I2C_2_Master_Init();
  4692   004B4C  EC1A  F026         	call	_I2C_2_Master_Init	;wreg free
  4693   004B50                     
  4694                           ;MazeRobot.X/color.c: 14:   color_writetoaddr(0x00, 0x01);
  4695   004B50  0E01               	movlw	1
  4696   004B52  6E07               	movwf	color_writetoaddr@value^0,c
  4697   004B54  0E00               	movlw	0
  4698   004B56  EC6B  F026         	call	_color_writetoaddr
  4699   004B5A                     
  4700                           ;MazeRobot.X/color.c: 15:     _delay((unsigned long)((3)*(64000000/4000.0)));
  4701   004B5A  0E3F               	movlw	63
  4702   004B5C  6E09               	movwf	??_color_click_init^0,c
  4703   004B5E  0E55               	movlw	85
  4704   004B60                     u6197:
  4705   004B60  2EE8               	decfsz	wreg,f,c
  4706   004B62  D7FE               	bra	u6197
  4707   004B64  2E09               	decfsz	??_color_click_init^0,f,c
  4708   004B66  D7FC               	bra	u6197
  4709   004B68  F000               	nop	
  4710   004B6A                     
  4711                           ;MazeRobot.X/color.c: 18:  color_writetoaddr(0x00, 0x03);
  4712   004B6A  0E03               	movlw	3
  4713   004B6C  6E07               	movwf	color_writetoaddr@value^0,c
  4714   004B6E  0E00               	movlw	0
  4715   004B70  EC6B  F026         	call	_color_writetoaddr
  4716   004B74                     
  4717                           ;MazeRobot.X/color.c: 21:  color_writetoaddr(0x01, 0xD5);
  4718   004B74  0ED5               	movlw	213
  4719   004B76  6E07               	movwf	color_writetoaddr@value^0,c
  4720   004B78  0E01               	movlw	1
  4721   004B7A  EC6B  F026         	call	_color_writetoaddr
  4722   004B7E  0012               	return		;funcret
  4723   004B80                     __end_of_color_click_init:
  4724                           	callstack 0
  4725                           
  4726 ;; *************** function _color_writetoaddr *****************
  4727 ;; Defined at:
  4728 ;;		line 25 in file "MazeRobot.X/color.c"
  4729 ;; Parameters:    Size  Location     Type
  4730 ;;  address         1    wreg     unsigned char 
  4731 ;;  value           1    6[COMRAM] unsigned char 
  4732 ;; Auto vars:     Size  Location     Type
  4733 ;;  address         1    7[COMRAM] unsigned char 
  4734 ;; Return value:  Size  Location     Type
  4735 ;;                  1    wreg      void 
  4736 ;; Registers used:
  4737 ;;		wreg, status,2, status,0, cstack
  4738 ;; Tracked objects:
  4739 ;;		On entry : 0/0
  4740 ;;		On exit  : 0/0
  4741 ;;		Unchanged: 0/0
  4742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4743 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4744 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4746 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4747 ;;Total ram usage:        2 bytes
  4748 ;; Hardware stack levels used: 1
  4749 ;; Hardware stack levels required when called: 4
  4750 ;; This function calls:
  4751 ;;		_I2C_2_Master_Start
  4752 ;;		_I2C_2_Master_Stop
  4753 ;;		_I2C_2_Master_Write
  4754 ;; This function is called by:
  4755 ;;		_color_click_init
  4756 ;; This function uses a non-reentrant model
  4757 ;;
  4758                           
  4759                           	psect	text22
  4760   004CD6                     __ptext22:
  4761                           	callstack 0
  4762   004CD6                     _color_writetoaddr:
  4763                           	callstack 25
  4764                           
  4765                           ;incstack = 0
  4766                           ;color_writetoaddr@address stored from wreg
  4767   004CD6  6E08               	movwf	color_writetoaddr@address^0,c
  4768   004CD8                     
  4769                           ;MazeRobot.X/color.c: 26:     I2C_2_Master_Start();
  4770   004CD8  ECAB  F026         	call	_I2C_2_Master_Start	;wreg free
  4771                           
  4772                           ;MazeRobot.X/color.c: 27:     I2C_2_Master_Write(0x52 | 0x00);
  4773   004CDC  0E52               	movlw	82
  4774   004CDE  ECA0  F026         	call	_I2C_2_Master_Write
  4775                           
  4776                           ;MazeRobot.X/color.c: 28:     I2C_2_Master_Write(0x80 | address);
  4777   004CE2  5008               	movf	color_writetoaddr@address^0,w,c
  4778   004CE4  0980               	iorlw	128
  4779   004CE6  ECA0  F026         	call	_I2C_2_Master_Write
  4780                           
  4781                           ;MazeRobot.X/color.c: 29:     I2C_2_Master_Write(value);
  4782   004CEA  5007               	movf	color_writetoaddr@value^0,w,c
  4783   004CEC  ECA0  F026         	call	_I2C_2_Master_Write
  4784                           
  4785                           ;MazeRobot.X/color.c: 30:     I2C_2_Master_Stop();
  4786   004CF0  ECA6  F026         	call	_I2C_2_Master_Stop	;wreg free
  4787   004CF4  0012               	return		;funcret
  4788   004CF6                     __end_of_color_writetoaddr:
  4789                           	callstack 0
  4790                           
  4791 ;; *************** function _I2C_2_Master_Init *****************
  4792 ;; Defined at:
  4793 ;;		line 4 in file "MazeRobot.X/i2c.c"
  4794 ;; Parameters:    Size  Location     Type
  4795 ;;		None
  4796 ;; Auto vars:     Size  Location     Type
  4797 ;;		None
  4798 ;; Return value:  Size  Location     Type
  4799 ;;                  1    wreg      void 
  4800 ;; Registers used:
  4801 ;;		wreg, status,2
  4802 ;; Tracked objects:
  4803 ;;		On entry : 0/0
  4804 ;;		On exit  : 0/0
  4805 ;;		Unchanged: 0/0
  4806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4810 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4811 ;;Total ram usage:        0 bytes
  4812 ;; Hardware stack levels used: 1
  4813 ;; Hardware stack levels required when called: 2
  4814 ;; This function calls:
  4815 ;;		Nothing
  4816 ;; This function is called by:
  4817 ;;		_color_click_init
  4818 ;; This function uses a non-reentrant model
  4819 ;;
  4820                           
  4821                           	psect	text23
  4822   004C34                     __ptext23:
  4823                           	callstack 0
  4824   004C34                     _I2C_2_Master_Init:
  4825                           	callstack 27
  4826   004C34                     
  4827                           ;MazeRobot.X/i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  4828   004C34  010E               	movlb	14	; () banked
  4829   004C36  51D9               	movf	217,w,b	;volatile
  4830   004C38  0BF0               	andlw	-16
  4831   004C3A  0908               	iorlw	8
  4832   004C3C  6FD9               	movwf	217,b	;volatile
  4833   004C3E                     
  4834                           ; BSR set to: 14
  4835                           ;MazeRobot.X/i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  4836   004C3E  8BD9               	bsf	217,5,b	;volatile
  4837                           
  4838                           ;MazeRobot.X/i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  4839   004C40  0E9F               	movlw	159
  4840   004C42  6FD6               	movwf	214,b	;volatile
  4841   004C44                     
  4842                           ; BSR set to: 14
  4843                           ;MazeRobot.X/i2c.c: 12:   TRISDbits.TRISD5 = 1;
  4844   004C44  8A84               	bsf	132,5,c	;volatile
  4845   004C46                     
  4846                           ; BSR set to: 14
  4847                           ;MazeRobot.X/i2c.c: 13:   TRISDbits.TRISD6 = 1;
  4848   004C46  8C84               	bsf	132,6,c	;volatile
  4849   004C48                     
  4850                           ; BSR set to: 14
  4851                           ;MazeRobot.X/i2c.c: 14:   ANSELDbits.ANSELD5=0;
  4852   004C48  9BA7               	bcf	167,5,b	;volatile
  4853   004C4A                     
  4854                           ; BSR set to: 14
  4855                           ;MazeRobot.X/i2c.c: 15:   ANSELDbits.ANSELD6=0;
  4856   004C4A  9DA7               	bcf	167,6,b	;volatile
  4857                           
  4858                           ;MazeRobot.X/i2c.c: 16:   SSP2DATPPS=0x1D;
  4859   004C4C  0E1D               	movlw	29
  4860   004C4E  6F1D               	movwf	29,b	;volatile
  4861                           
  4862                           ;MazeRobot.X/i2c.c: 17:   SSP2CLKPPS=0x1E;
  4863   004C50  0E1E               	movlw	30
  4864   004C52  6F1C               	movwf	28,b	;volatile
  4865                           
  4866                           ;MazeRobot.X/i2c.c: 18:   RD5PPS=0x1C;
  4867   004C54  0E1C               	movlw	28
  4868   004C56  6F6F               	movwf	111,b	;volatile
  4869                           
  4870                           ;MazeRobot.X/i2c.c: 19:   RD6PPS=0x1B;
  4871   004C58  0E1B               	movlw	27
  4872   004C5A  6F70               	movwf	112,b	;volatile
  4873   004C5C                     
  4874                           ; BSR set to: 14
  4875   004C5C  0012               	return		;funcret
  4876   004C5E                     __end_of_I2C_2_Master_Init:
  4877                           	callstack 0
  4878                           
  4879 ;; *************** function _colorDetect *****************
  4880 ;; Defined at:
  4881 ;;		line 130 in file "MazeRobot.X/color.c"
  4882 ;; Parameters:    Size  Location     Type
  4883 ;;  clearRef        4    0[BANK0 ] void 
  4884 ;;  ambientRGBVa    2    4[BANK0 ] PTR struct RGB
  4885 ;;		 -> main@ambientRGBVal(8), 
  4886 ;;  whiteRGBVal     2    6[BANK0 ] PTR struct RGB
  4887 ;;		 -> main@whiteRGBVal(8), 
  4888 ;;  mL              2    8[BANK0 ] PTR struct DC_motor
  4889 ;;		 -> main@motorLeft(9), 
  4890 ;;  mR              2   10[BANK0 ] PTR struct DC_motor
  4891 ;;		 -> main@motorRight(9), 
  4892 ;; Auto vars:     Size  Location     Type
  4893 ;;  RGBVal          8   32[BANK0 ] struct RGB
  4894 ;;  bluePrint       4   48[BANK0 ] float 
  4895 ;;  greenPrint      4   44[BANK0 ] float 
  4896 ;;  redPrint        4   40[BANK0 ] float 
  4897 ;;  whiteB          4   20[BANK0 ] float 
  4898 ;;  whiteG          4   16[BANK0 ] float 
  4899 ;;  whiteR          4   12[BANK0 ] float 
  4900 ;;  whiteC          4    0        float 
  4901 ;;  colour_ref      2   30[BANK0 ] unsigned int 
  4902 ;;  ambientB        2   28[BANK0 ] unsigned int 
  4903 ;;  ambientG        2   26[BANK0 ] unsigned int 
  4904 ;;  ambientR        2   24[BANK0 ] unsigned int 
  4905 ;; Return value:  Size  Location     Type
  4906 ;;                  2    0[BANK0 ] unsigned int 
  4907 ;; Registers used:
  4908 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4909 ;; Tracked objects:
  4910 ;;		On entry : 0/0
  4911 ;;		On exit  : 0/0
  4912 ;;		Unchanged: 0/0
  4913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4914 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4915 ;;      Locals:         0      40       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4916 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4917 ;;      Totals:         2      52       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4918 ;;Total ram usage:       54 bytes
  4919 ;; Hardware stack levels used: 1
  4920 ;; Hardware stack levels required when called: 7
  4921 ;; This function calls:
  4922 ;;		___fldiv
  4923 ;;		___flge
  4924 ;;		___flmul
  4925 ;;		___flsub
  4926 ;;		___xxtofl
  4927 ;;		_getColor
  4928 ;;		_reverseSquareLeft
  4929 ;;		_reverseSquareRight
  4930 ;;		_turnLeft_135
  4931 ;;		_turnLeft_90
  4932 ;;		_turnRight_135
  4933 ;;		_turnRight_90
  4934 ;;		_turn_180
  4935 ;; This function is called by:
  4936 ;;		_main
  4937 ;; This function uses a non-reentrant model
  4938 ;;
  4939                           
  4940                           	psect	text24
  4941   000E28                     __ptext24:
  4942                           	callstack 0
  4943   000E28                     _colorDetect:
  4944                           	callstack 23
  4945   000E28                     
  4946                           ;MazeRobot.X/color.c: 133:         RGB RGBVal;;MazeRobot.X/color.c: 134:         getColo
      +                          r(&RGBVal);
  4947   000E28  0E80               	movlw	low colorDetect@RGBVal
  4948   000E2A  6E10               	movwf	getColor@v^0,c
  4949   000E2C  0E00               	movlw	high colorDetect@RGBVal
  4950   000E2E  6E11               	movwf	(getColor@v+1)^0,c
  4951   000E30  ECD3  F023         	call	_getColor	;wreg free
  4952   000E34                     
  4953                           ;MazeRobot.X/color.c: 136:         unsigned int ambientR = ambientRGBVal->R;
  4954   000E34  C064  FFD9         	movff	colorDetect@ambientRGBVal,fsr2l
  4955   000E38  C065  FFDA         	movff	colorDetect@ambientRGBVal+1,fsr2h
  4956   000E3C  CFDE F078          	movff	postinc2,colorDetect@ambientR
  4957   000E40  CFDD F079          	movff	postdec2,colorDetect@ambientR+1
  4958   000E44                     
  4959                           ;MazeRobot.X/color.c: 137:         unsigned int ambientG = ambientRGBVal->G;
  4960   000E44  0100               	movlb	0	; () banked
  4961   000E46  EE20 F002          	lfsr	2,2
  4962   000E4A  5164               	movf	colorDetect@ambientRGBVal& (0+255),w,b
  4963   000E4C  26D9               	addwf	fsr2l,f,c
  4964   000E4E  5165               	movf	(colorDetect@ambientRGBVal+1)& (0+255),w,b
  4965   000E50  22DA               	addwfc	fsr2h,f,c
  4966   000E52  CFDE F07A          	movff	postinc2,colorDetect@ambientG
  4967   000E56  CFDD F07B          	movff	postdec2,colorDetect@ambientG+1
  4968   000E5A                     
  4969                           ; BSR set to: 0
  4970                           ;MazeRobot.X/color.c: 138:         unsigned int ambientB = ambientRGBVal->B;
  4971   000E5A  EE20 F004          	lfsr	2,4
  4972   000E5E  5164               	movf	colorDetect@ambientRGBVal& (0+255),w,b
  4973   000E60  26D9               	addwf	fsr2l,f,c
  4974   000E62  5165               	movf	(colorDetect@ambientRGBVal+1)& (0+255),w,b
  4975   000E64  22DA               	addwfc	fsr2h,f,c
  4976   000E66  CFDE F07C          	movff	postinc2,colorDetect@ambientB
  4977   000E6A  CFDD F07D          	movff	postdec2,colorDetect@ambientB+1
  4978   000E6E                     
  4979                           ; BSR set to: 0
  4980                           ;MazeRobot.X/color.c: 140:         float whiteR = whiteRGBVal->R;
  4981   000E6E  C066  FFD9         	movff	colorDetect@whiteRGBVal,fsr2l
  4982   000E72  C067  FFDA         	movff	colorDetect@whiteRGBVal+1,fsr2h
  4983   000E76  CFDE F04F          	movff	postinc2,??_colorDetect
  4984   000E7A  CFDD F050          	movff	postdec2,??_colorDetect+1
  4985   000E7E  C04F  F005         	movff	??_colorDetect,___xxtofl@val
  4986   000E82  C050  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  4987   000E86  6A07               	clrf	(___xxtofl@val+2)^0,c
  4988   000E88  6A08               	clrf	(___xxtofl@val+3)^0,c
  4989   000E8A  0E00               	movlw	0
  4990   000E8C  ECED  F018         	call	___xxtofl
  4991   000E90  C005  F06C         	movff	?___xxtofl,colorDetect@whiteR
  4992   000E94  C006  F06D         	movff	?___xxtofl+1,colorDetect@whiteR+1
  4993   000E98  C007  F06E         	movff	?___xxtofl+2,colorDetect@whiteR+2
  4994   000E9C  C008  F06F         	movff	?___xxtofl+3,colorDetect@whiteR+3
  4995   000EA0                     
  4996                           ;MazeRobot.X/color.c: 141:         float whiteG = whiteRGBVal->G;
  4997   000EA0  0100               	movlb	0	; () banked
  4998   000EA2  EE20 F002          	lfsr	2,2
  4999   000EA6  5166               	movf	colorDetect@whiteRGBVal& (0+255),w,b
  5000   000EA8  26D9               	addwf	fsr2l,f,c
  5001   000EAA  5167               	movf	(colorDetect@whiteRGBVal+1)& (0+255),w,b
  5002   000EAC  22DA               	addwfc	fsr2h,f,c
  5003   000EAE  CFDE F04F          	movff	postinc2,??_colorDetect
  5004   000EB2  CFDD F050          	movff	postdec2,??_colorDetect+1
  5005   000EB6  C04F  F005         	movff	??_colorDetect,___xxtofl@val
  5006   000EBA  C050  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  5007   000EBE  6A07               	clrf	(___xxtofl@val+2)^0,c
  5008   000EC0  6A08               	clrf	(___xxtofl@val+3)^0,c
  5009   000EC2  0E00               	movlw	0
  5010   000EC4  ECED  F018         	call	___xxtofl
  5011   000EC8  C005  F070         	movff	?___xxtofl,colorDetect@whiteG
  5012   000ECC  C006  F071         	movff	?___xxtofl+1,colorDetect@whiteG+1
  5013   000ED0  C007  F072         	movff	?___xxtofl+2,colorDetect@whiteG+2
  5014   000ED4  C008  F073         	movff	?___xxtofl+3,colorDetect@whiteG+3
  5015   000ED8                     
  5016                           ;MazeRobot.X/color.c: 142:         float whiteB = whiteRGBVal->B;
  5017   000ED8  0100               	movlb	0	; () banked
  5018   000EDA  EE20 F004          	lfsr	2,4
  5019   000EDE  5166               	movf	colorDetect@whiteRGBVal& (0+255),w,b
  5020   000EE0  26D9               	addwf	fsr2l,f,c
  5021   000EE2  5167               	movf	(colorDetect@whiteRGBVal+1)& (0+255),w,b
  5022   000EE4  22DA               	addwfc	fsr2h,f,c
  5023   000EE6  CFDE F04F          	movff	postinc2,??_colorDetect
  5024   000EEA  CFDD F050          	movff	postdec2,??_colorDetect+1
  5025   000EEE  C04F  F005         	movff	??_colorDetect,___xxtofl@val
  5026   000EF2  C050  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  5027   000EF6  6A07               	clrf	(___xxtofl@val+2)^0,c
  5028   000EF8  6A08               	clrf	(___xxtofl@val+3)^0,c
  5029   000EFA  0E00               	movlw	0
  5030   000EFC  ECED  F018         	call	___xxtofl
  5031   000F00  C005  F074         	movff	?___xxtofl,colorDetect@whiteB
  5032   000F04  C006  F075         	movff	?___xxtofl+1,colorDetect@whiteB+1
  5033   000F08  C007  F076         	movff	?___xxtofl+2,colorDetect@whiteB+2
  5034   000F0C  C008  F077         	movff	?___xxtofl+3,colorDetect@whiteB+3
  5035   000F10  0100               	movlb	0	; () banked
  5036   000F12  EE20 F006          	lfsr	2,6
  5037   000F16  5166               	movf	colorDetect@whiteRGBVal& (0+255),w,b
  5038   000F18  26D9               	addwf	fsr2l,f,c
  5039   000F1A  5167               	movf	(colorDetect@whiteRGBVal+1)& (0+255),w,b
  5040   000F1C  22DA               	addwfc	fsr2h,f,c
  5041   000F1E  CFDE F04F          	movff	postinc2,??_colorDetect
  5042   000F22  CFDD F050          	movff	postdec2,??_colorDetect+1
  5043   000F26  C04F  F005         	movff	??_colorDetect,___xxtofl@val
  5044   000F2A  C050  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  5045   000F2E  6A07               	clrf	(___xxtofl@val+2)^0,c
  5046   000F30  6A08               	clrf	(___xxtofl@val+3)^0,c
  5047   000F32  0E00               	movlw	0
  5048   000F34  ECED  F018         	call	___xxtofl
  5049   000F38                     
  5050                           ;MazeRobot.X/color.c: 145:         float redPrint = (RGBVal.R-ambientR)/((whiteR-(float)
      +                          ambientR)*(clearRef));
  5051   000F38  0100               	movlb	0	; () banked
  5052   000F3A  5178               	movf	colorDetect@ambientR& (0+255),w,b
  5053   000F3C  5D80               	subwf	colorDetect@RGBVal& (0+255),w,b
  5054   000F3E  6E4F               	movwf	??_colorDetect^0,c
  5055   000F40  5179               	movf	(colorDetect@ambientR+1)& (0+255),w,b
  5056   000F42  5981               	subwfb	(colorDetect@RGBVal+1)& (0+255),w,b
  5057   000F44  6E50               	movwf	(??_colorDetect+1)^0,c
  5058   000F46  C04F  F005         	movff	??_colorDetect,___xxtofl@val
  5059   000F4A  C050  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  5060   000F4E  6A07               	clrf	(___xxtofl@val+2)^0,c
  5061   000F50  6A08               	clrf	(___xxtofl@val+3)^0,c
  5062   000F52  0E00               	movlw	0
  5063   000F54  ECED  F018         	call	___xxtofl
  5064   000F58  C005  F036         	movff	?___xxtofl,___fldiv@b
  5065   000F5C  C006  F037         	movff	?___xxtofl+1,___fldiv@b+1
  5066   000F60  C007  F038         	movff	?___xxtofl+2,___fldiv@b+2
  5067   000F64  C008  F039         	movff	?___xxtofl+3,___fldiv@b+3
  5068   000F68  C060  F021         	movff	colorDetect@clearRef,___flmul@a
  5069   000F6C  C061  F022         	movff	colorDetect@clearRef+1,___flmul@a+1
  5070   000F70  C062  F023         	movff	colorDetect@clearRef+2,___flmul@a+2
  5071   000F74  C063  F024         	movff	colorDetect@clearRef+3,___flmul@a+3
  5072   000F78  C078  F005         	movff	colorDetect@ambientR,___xxtofl@val
  5073   000F7C  C079  F006         	movff	colorDetect@ambientR+1,___xxtofl@val+1
  5074   000F80  6A07               	clrf	(___xxtofl@val+2)^0,c
  5075   000F82  6A08               	clrf	(___xxtofl@val+3)^0,c
  5076   000F84  0E00               	movlw	0
  5077   000F86  ECED  F018         	call	___xxtofl
  5078   000F8A  C005  F019         	movff	?___xxtofl,___flsub@a
  5079   000F8E  C006  F01A         	movff	?___xxtofl+1,___flsub@a+1
  5080   000F92  C007  F01B         	movff	?___xxtofl+2,___flsub@a+2
  5081   000F96  C008  F01C         	movff	?___xxtofl+3,___flsub@a+3
  5082   000F9A  C06C  F015         	movff	colorDetect@whiteR,___flsub@b
  5083   000F9E  C06D  F016         	movff	colorDetect@whiteR+1,___flsub@b+1
  5084   000FA2  C06E  F017         	movff	colorDetect@whiteR+2,___flsub@b+2
  5085   000FA6  C06F  F018         	movff	colorDetect@whiteR+3,___flsub@b+3
  5086   000FAA  EC20  F025         	call	___flsub	;wreg free
  5087   000FAE  C015  F01D         	movff	?___flsub,___flmul@b
  5088   000FB2  C016  F01E         	movff	?___flsub+1,___flmul@b+1
  5089   000FB6  C017  F01F         	movff	?___flsub+2,___flmul@b+2
  5090   000FBA  C018  F020         	movff	?___flsub+3,___flmul@b+3
  5091   000FBE  EC91  F011         	call	___flmul	;wreg free
  5092   000FC2  C01D  F03A         	movff	?___flmul,___fldiv@a
  5093   000FC6  C01E  F03B         	movff	?___flmul+1,___fldiv@a+1
  5094   000FCA  C01F  F03C         	movff	?___flmul+2,___fldiv@a+2
  5095   000FCE  C020  F03D         	movff	?___flmul+3,___fldiv@a+3
  5096   000FD2  ECA6  F013         	call	___fldiv	;wreg free
  5097   000FD6  C036  F088         	movff	?___fldiv,colorDetect@redPrint
  5098   000FDA  C037  F089         	movff	?___fldiv+1,colorDetect@redPrint+1
  5099   000FDE  C038  F08A         	movff	?___fldiv+2,colorDetect@redPrint+2
  5100   000FE2  C039  F08B         	movff	?___fldiv+3,colorDetect@redPrint+3
  5101   000FE6                     
  5102                           ;MazeRobot.X/color.c: 146:         float greenPrint = (RGBVal.G-ambientG)/((whiteG-(floa
      +                          t)ambientG)*(clearRef));
  5103   000FE6  0100               	movlb	0	; () banked
  5104   000FE8  517A               	movf	colorDetect@ambientG& (0+255),w,b
  5105   000FEA  5D82               	subwf	(colorDetect@RGBVal+2)& (0+255),w,b
  5106   000FEC  6E4F               	movwf	??_colorDetect^0,c
  5107   000FEE  517B               	movf	(colorDetect@ambientG+1)& (0+255),w,b
  5108   000FF0  5983               	subwfb	(colorDetect@RGBVal+3)& (0+255),w,b
  5109   000FF2  6E50               	movwf	(??_colorDetect+1)^0,c
  5110   000FF4  C04F  F005         	movff	??_colorDetect,___xxtofl@val
  5111   000FF8  C050  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  5112   000FFC  6A07               	clrf	(___xxtofl@val+2)^0,c
  5113   000FFE  6A08               	clrf	(___xxtofl@val+3)^0,c
  5114   001000  0E00               	movlw	0
  5115   001002  ECED  F018         	call	___xxtofl
  5116   001006  C005  F036         	movff	?___xxtofl,___fldiv@b
  5117   00100A  C006  F037         	movff	?___xxtofl+1,___fldiv@b+1
  5118   00100E  C007  F038         	movff	?___xxtofl+2,___fldiv@b+2
  5119   001012  C008  F039         	movff	?___xxtofl+3,___fldiv@b+3
  5120   001016  C060  F021         	movff	colorDetect@clearRef,___flmul@a
  5121   00101A  C061  F022         	movff	colorDetect@clearRef+1,___flmul@a+1
  5122   00101E  C062  F023         	movff	colorDetect@clearRef+2,___flmul@a+2
  5123   001022  C063  F024         	movff	colorDetect@clearRef+3,___flmul@a+3
  5124   001026  C07A  F005         	movff	colorDetect@ambientG,___xxtofl@val
  5125   00102A  C07B  F006         	movff	colorDetect@ambientG+1,___xxtofl@val+1
  5126   00102E  6A07               	clrf	(___xxtofl@val+2)^0,c
  5127   001030  6A08               	clrf	(___xxtofl@val+3)^0,c
  5128   001032  0E00               	movlw	0
  5129   001034  ECED  F018         	call	___xxtofl
  5130   001038  C005  F019         	movff	?___xxtofl,___flsub@a
  5131   00103C  C006  F01A         	movff	?___xxtofl+1,___flsub@a+1
  5132   001040  C007  F01B         	movff	?___xxtofl+2,___flsub@a+2
  5133   001044  C008  F01C         	movff	?___xxtofl+3,___flsub@a+3
  5134   001048  C070  F015         	movff	colorDetect@whiteG,___flsub@b
  5135   00104C  C071  F016         	movff	colorDetect@whiteG+1,___flsub@b+1
  5136   001050  C072  F017         	movff	colorDetect@whiteG+2,___flsub@b+2
  5137   001054  C073  F018         	movff	colorDetect@whiteG+3,___flsub@b+3
  5138   001058  EC20  F025         	call	___flsub	;wreg free
  5139   00105C  C015  F01D         	movff	?___flsub,___flmul@b
  5140   001060  C016  F01E         	movff	?___flsub+1,___flmul@b+1
  5141   001064  C017  F01F         	movff	?___flsub+2,___flmul@b+2
  5142   001068  C018  F020         	movff	?___flsub+3,___flmul@b+3
  5143   00106C  EC91  F011         	call	___flmul	;wreg free
  5144   001070  C01D  F03A         	movff	?___flmul,___fldiv@a
  5145   001074  C01E  F03B         	movff	?___flmul+1,___fldiv@a+1
  5146   001078  C01F  F03C         	movff	?___flmul+2,___fldiv@a+2
  5147   00107C  C020  F03D         	movff	?___flmul+3,___fldiv@a+3
  5148   001080  ECA6  F013         	call	___fldiv	;wreg free
  5149   001084  C036  F08C         	movff	?___fldiv,colorDetect@greenPrint
  5150   001088  C037  F08D         	movff	?___fldiv+1,colorDetect@greenPrint+1
  5151   00108C  C038  F08E         	movff	?___fldiv+2,colorDetect@greenPrint+2
  5152   001090  C039  F08F         	movff	?___fldiv+3,colorDetect@greenPrint+3
  5153   001094                     
  5154                           ;MazeRobot.X/color.c: 147:         float bluePrint = (RGBVal.B-ambientB)/((whiteB-(float
      +                          )ambientB)*(clearRef));
  5155   001094  0100               	movlb	0	; () banked
  5156   001096  517C               	movf	colorDetect@ambientB& (0+255),w,b
  5157   001098  5D84               	subwf	(colorDetect@RGBVal+4)& (0+255),w,b
  5158   00109A  6E4F               	movwf	??_colorDetect^0,c
  5159   00109C  517D               	movf	(colorDetect@ambientB+1)& (0+255),w,b
  5160   00109E  5985               	subwfb	(colorDetect@RGBVal+5)& (0+255),w,b
  5161   0010A0  6E50               	movwf	(??_colorDetect+1)^0,c
  5162   0010A2  C04F  F005         	movff	??_colorDetect,___xxtofl@val
  5163   0010A6  C050  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  5164   0010AA  6A07               	clrf	(___xxtofl@val+2)^0,c
  5165   0010AC  6A08               	clrf	(___xxtofl@val+3)^0,c
  5166   0010AE  0E00               	movlw	0
  5167   0010B0  ECED  F018         	call	___xxtofl
  5168   0010B4  C005  F036         	movff	?___xxtofl,___fldiv@b
  5169   0010B8  C006  F037         	movff	?___xxtofl+1,___fldiv@b+1
  5170   0010BC  C007  F038         	movff	?___xxtofl+2,___fldiv@b+2
  5171   0010C0  C008  F039         	movff	?___xxtofl+3,___fldiv@b+3
  5172   0010C4  C060  F021         	movff	colorDetect@clearRef,___flmul@a
  5173   0010C8  C061  F022         	movff	colorDetect@clearRef+1,___flmul@a+1
  5174   0010CC  C062  F023         	movff	colorDetect@clearRef+2,___flmul@a+2
  5175   0010D0  C063  F024         	movff	colorDetect@clearRef+3,___flmul@a+3
  5176   0010D4  C07C  F005         	movff	colorDetect@ambientB,___xxtofl@val
  5177   0010D8  C07D  F006         	movff	colorDetect@ambientB+1,___xxtofl@val+1
  5178   0010DC  6A07               	clrf	(___xxtofl@val+2)^0,c
  5179   0010DE  6A08               	clrf	(___xxtofl@val+3)^0,c
  5180   0010E0  0E00               	movlw	0
  5181   0010E2  ECED  F018         	call	___xxtofl
  5182   0010E6  C005  F019         	movff	?___xxtofl,___flsub@a
  5183   0010EA  C006  F01A         	movff	?___xxtofl+1,___flsub@a+1
  5184   0010EE  C007  F01B         	movff	?___xxtofl+2,___flsub@a+2
  5185   0010F2  C008  F01C         	movff	?___xxtofl+3,___flsub@a+3
  5186   0010F6  C074  F015         	movff	colorDetect@whiteB,___flsub@b
  5187   0010FA  C075  F016         	movff	colorDetect@whiteB+1,___flsub@b+1
  5188   0010FE  C076  F017         	movff	colorDetect@whiteB+2,___flsub@b+2
  5189   001102  C077  F018         	movff	colorDetect@whiteB+3,___flsub@b+3
  5190   001106  EC20  F025         	call	___flsub	;wreg free
  5191   00110A  C015  F01D         	movff	?___flsub,___flmul@b
  5192   00110E  C016  F01E         	movff	?___flsub+1,___flmul@b+1
  5193   001112  C017  F01F         	movff	?___flsub+2,___flmul@b+2
  5194   001116  C018  F020         	movff	?___flsub+3,___flmul@b+3
  5195   00111A  EC91  F011         	call	___flmul	;wreg free
  5196   00111E  C01D  F03A         	movff	?___flmul,___fldiv@a
  5197   001122  C01E  F03B         	movff	?___flmul+1,___fldiv@a+1
  5198   001126  C01F  F03C         	movff	?___flmul+2,___fldiv@a+2
  5199   00112A  C020  F03D         	movff	?___flmul+3,___fldiv@a+3
  5200   00112E  ECA6  F013         	call	___fldiv	;wreg free
  5201   001132  C036  F090         	movff	?___fldiv,colorDetect@bluePrint
  5202   001136  C037  F091         	movff	?___fldiv+1,colorDetect@bluePrint+1
  5203   00113A  C038  F092         	movff	?___fldiv+2,colorDetect@bluePrint+2
  5204   00113E  C039  F093         	movff	?___fldiv+3,colorDetect@bluePrint+3
  5205   001142                     
  5206                           ;MazeRobot.X/color.c: 149:         unsigned int colour_ref;;MazeRobot.X/color.c: 151:   
      +                                if ((redPrint < 0) | (redPrint > 2)) { redPrint = 0.0;}
  5207   001142  0100               	movlb	0	; () banked
  5208   001144  BF8B               	btfsc	(colorDetect@redPrint+3)& (0+255),7,b
  5209   001146  EFA7  F008         	goto	u5531
  5210   00114A  EFA9  F008         	goto	u5530
  5211   00114E                     u5531:
  5212   00114E  EFC2  F008         	goto	l5161
  5213   001152                     u5530:
  5214   001152                     
  5215                           ; BSR set to: 0
  5216   001152  0E00               	movlw	0
  5217   001154  6E1D               	movwf	___flge@ff1^0,c
  5218   001156  0E00               	movlw	0
  5219   001158  6E1E               	movwf	(___flge@ff1+1)^0,c
  5220   00115A  0E00               	movlw	0
  5221   00115C  6E1F               	movwf	(___flge@ff1+2)^0,c
  5222   00115E  0E40               	movlw	64
  5223   001160  6E20               	movwf	(___flge@ff1+3)^0,c
  5224   001162  C088  F021         	movff	colorDetect@redPrint,___flge@ff2
  5225   001166  C089  F022         	movff	colorDetect@redPrint+1,___flge@ff2+1
  5226   00116A  C08A  F023         	movff	colorDetect@redPrint+2,___flge@ff2+2
  5227   00116E  C08B  F024         	movff	colorDetect@redPrint+3,___flge@ff2+3
  5228   001172  EC1D  F01F         	call	___flge	;wreg free
  5229   001176  B0D8               	btfsc	status,0,c
  5230   001178  EFC0  F008         	goto	u5541
  5231   00117C  EFC2  F008         	goto	u5540
  5232   001180                     u5541:
  5233   001180  EFCB  F008         	goto	l5163
  5234   001184                     u5540:
  5235   001184                     l5161:
  5236   001184  0E00               	movlw	0
  5237   001186  0100               	movlb	0	; () banked
  5238   001188  6F88               	movwf	colorDetect@redPrint& (0+255),b
  5239   00118A  0E00               	movlw	0
  5240   00118C  6F89               	movwf	(colorDetect@redPrint+1)& (0+255),b
  5241   00118E  0E00               	movlw	0
  5242   001190  6F8A               	movwf	(colorDetect@redPrint+2)& (0+255),b
  5243   001192  0E00               	movlw	0
  5244   001194  6F8B               	movwf	(colorDetect@redPrint+3)& (0+255),b
  5245   001196                     l5163:
  5246                           
  5247                           ;MazeRobot.X/color.c: 152:         if ((greenPrint < 0) | (greenPrint > 2)) {greenPrint 
      +                          = 0.0;}
  5248   001196  0100               	movlb	0	; () banked
  5249   001198  BF8F               	btfsc	(colorDetect@greenPrint+3)& (0+255),7,b
  5250   00119A  EFD1  F008         	goto	u5551
  5251   00119E  EFD3  F008         	goto	u5550
  5252   0011A2                     u5551:
  5253   0011A2  EFEC  F008         	goto	l5167
  5254   0011A6                     u5550:
  5255   0011A6                     
  5256                           ; BSR set to: 0
  5257   0011A6  0E00               	movlw	0
  5258   0011A8  6E1D               	movwf	___flge@ff1^0,c
  5259   0011AA  0E00               	movlw	0
  5260   0011AC  6E1E               	movwf	(___flge@ff1+1)^0,c
  5261   0011AE  0E00               	movlw	0
  5262   0011B0  6E1F               	movwf	(___flge@ff1+2)^0,c
  5263   0011B2  0E40               	movlw	64
  5264   0011B4  6E20               	movwf	(___flge@ff1+3)^0,c
  5265   0011B6  C08C  F021         	movff	colorDetect@greenPrint,___flge@ff2
  5266   0011BA  C08D  F022         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  5267   0011BE  C08E  F023         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  5268   0011C2  C08F  F024         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  5269   0011C6  EC1D  F01F         	call	___flge	;wreg free
  5270   0011CA  B0D8               	btfsc	status,0,c
  5271   0011CC  EFEA  F008         	goto	u5561
  5272   0011D0  EFEC  F008         	goto	u5560
  5273   0011D4                     u5561:
  5274   0011D4  EFF5  F008         	goto	l5169
  5275   0011D8                     u5560:
  5276   0011D8                     l5167:
  5277   0011D8  0E00               	movlw	0
  5278   0011DA  0100               	movlb	0	; () banked
  5279   0011DC  6F8C               	movwf	colorDetect@greenPrint& (0+255),b
  5280   0011DE  0E00               	movlw	0
  5281   0011E0  6F8D               	movwf	(colorDetect@greenPrint+1)& (0+255),b
  5282   0011E2  0E00               	movlw	0
  5283   0011E4  6F8E               	movwf	(colorDetect@greenPrint+2)& (0+255),b
  5284   0011E6  0E00               	movlw	0
  5285   0011E8  6F8F               	movwf	(colorDetect@greenPrint+3)& (0+255),b
  5286   0011EA                     l5169:
  5287                           
  5288                           ;MazeRobot.X/color.c: 153:         if ((bluePrint < 0) | (bluePrint > 2)){ bluePrint = 0
      +                          .0;}
  5289   0011EA  0100               	movlb	0	; () banked
  5290   0011EC  BF93               	btfsc	(colorDetect@bluePrint+3)& (0+255),7,b
  5291   0011EE  EFFB  F008         	goto	u5571
  5292   0011F2  EFFD  F008         	goto	u5570
  5293   0011F6                     u5571:
  5294   0011F6  EF16  F009         	goto	l5173
  5295   0011FA                     u5570:
  5296   0011FA                     
  5297                           ; BSR set to: 0
  5298   0011FA  0E00               	movlw	0
  5299   0011FC  6E1D               	movwf	___flge@ff1^0,c
  5300   0011FE  0E00               	movlw	0
  5301   001200  6E1E               	movwf	(___flge@ff1+1)^0,c
  5302   001202  0E00               	movlw	0
  5303   001204  6E1F               	movwf	(___flge@ff1+2)^0,c
  5304   001206  0E40               	movlw	64
  5305   001208  6E20               	movwf	(___flge@ff1+3)^0,c
  5306   00120A  C090  F021         	movff	colorDetect@bluePrint,___flge@ff2
  5307   00120E  C091  F022         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  5308   001212  C092  F023         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  5309   001216  C093  F024         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  5310   00121A  EC1D  F01F         	call	___flge	;wreg free
  5311   00121E  B0D8               	btfsc	status,0,c
  5312   001220  EF14  F009         	goto	u5581
  5313   001224  EF16  F009         	goto	u5580
  5314   001228                     u5581:
  5315   001228  EF1F  F009         	goto	l5175
  5316   00122C                     u5580:
  5317   00122C                     l5173:
  5318   00122C  0E00               	movlw	0
  5319   00122E  0100               	movlb	0	; () banked
  5320   001230  6F90               	movwf	colorDetect@bluePrint& (0+255),b
  5321   001232  0E00               	movlw	0
  5322   001234  6F91               	movwf	(colorDetect@bluePrint+1)& (0+255),b
  5323   001236  0E00               	movlw	0
  5324   001238  6F92               	movwf	(colorDetect@bluePrint+2)& (0+255),b
  5325   00123A  0E00               	movlw	0
  5326   00123C  6F93               	movwf	(colorDetect@bluePrint+3)& (0+255),b
  5327   00123E                     l5175:
  5328                           
  5329                           ;MazeRobot.X/color.c: 156:         if ((redPrint > 0.9) & (greenPrint > 0.9) & (bluePrin
      +                          t > 0.9)){
  5330   00123E  0E66               	movlw	102
  5331   001240  6E1D               	movwf	___flge@ff1^0,c
  5332   001242  0E66               	movlw	102
  5333   001244  6E1E               	movwf	(___flge@ff1+1)^0,c
  5334   001246  0E66               	movlw	102
  5335   001248  6E1F               	movwf	(___flge@ff1+2)^0,c
  5336   00124A  0E3F               	movlw	63
  5337   00124C  6E20               	movwf	(___flge@ff1+3)^0,c
  5338   00124E  C088  F021         	movff	colorDetect@redPrint,___flge@ff2
  5339   001252  C089  F022         	movff	colorDetect@redPrint+1,___flge@ff2+1
  5340   001256  C08A  F023         	movff	colorDetect@redPrint+2,___flge@ff2+2
  5341   00125A  C08B  F024         	movff	colorDetect@redPrint+3,___flge@ff2+3
  5342   00125E  EC1D  F01F         	call	___flge	;wreg free
  5343   001262  B0D8               	btfsc	status,0,c
  5344   001264  EF36  F009         	goto	u5591
  5345   001268  EF38  F009         	goto	u5590
  5346   00126C                     u5591:
  5347   00126C  EF71  F009         	goto	l5183
  5348   001270                     u5590:
  5349   001270  0E66               	movlw	102
  5350   001272  6E1D               	movwf	___flge@ff1^0,c
  5351   001274  0E66               	movlw	102
  5352   001276  6E1E               	movwf	(___flge@ff1+1)^0,c
  5353   001278  0E66               	movlw	102
  5354   00127A  6E1F               	movwf	(___flge@ff1+2)^0,c
  5355   00127C  0E3F               	movlw	63
  5356   00127E  6E20               	movwf	(___flge@ff1+3)^0,c
  5357   001280  C08C  F021         	movff	colorDetect@greenPrint,___flge@ff2
  5358   001284  C08D  F022         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  5359   001288  C08E  F023         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  5360   00128C  C08F  F024         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  5361   001290  EC1D  F01F         	call	___flge	;wreg free
  5362   001294  B0D8               	btfsc	status,0,c
  5363   001296  EF4F  F009         	goto	u5601
  5364   00129A  EF51  F009         	goto	u5600
  5365   00129E                     u5601:
  5366   00129E  EF71  F009         	goto	l5183
  5367   0012A2                     u5600:
  5368   0012A2  0E66               	movlw	102
  5369   0012A4  6E1D               	movwf	___flge@ff1^0,c
  5370   0012A6  0E66               	movlw	102
  5371   0012A8  6E1E               	movwf	(___flge@ff1+1)^0,c
  5372   0012AA  0E66               	movlw	102
  5373   0012AC  6E1F               	movwf	(___flge@ff1+2)^0,c
  5374   0012AE  0E3F               	movlw	63
  5375   0012B0  6E20               	movwf	(___flge@ff1+3)^0,c
  5376   0012B2  C090  F021         	movff	colorDetect@bluePrint,___flge@ff2
  5377   0012B6  C091  F022         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  5378   0012BA  C092  F023         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  5379   0012BE  C093  F024         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  5380   0012C2  EC1D  F01F         	call	___flge	;wreg free
  5381   0012C6  B0D8               	btfsc	status,0,c
  5382   0012C8  EF68  F009         	goto	u5611
  5383   0012CC  EF6A  F009         	goto	u5610
  5384   0012D0                     u5611:
  5385   0012D0  EF71  F009         	goto	l5183
  5386   0012D4                     u5610:
  5387   0012D4                     
  5388                           ;MazeRobot.X/color.c: 157:         colour_ref = 8;
  5389   0012D4  0E00               	movlw	0
  5390   0012D6  0100               	movlb	0	; () banked
  5391   0012D8  6F7F               	movwf	(colorDetect@colour_ref+1)& (0+255),b
  5392   0012DA  0E08               	movlw	8
  5393   0012DC  6F7E               	movwf	colorDetect@colour_ref& (0+255),b
  5394                           
  5395                           ;MazeRobot.X/color.c: 158:         }
  5396   0012DE  EFF5  F00C         	goto	l5285
  5397   0012E2                     l5183:
  5398   0012E2  0E00               	movlw	0
  5399   0012E4  6E1D               	movwf	___flge@ff1^0,c
  5400   0012E6  0E00               	movlw	0
  5401   0012E8  6E1E               	movwf	(___flge@ff1+1)^0,c
  5402   0012EA  0EC0               	movlw	192
  5403   0012EC  6E1F               	movwf	(___flge@ff1+2)^0,c
  5404   0012EE  0E3F               	movlw	63
  5405   0012F0  6E20               	movwf	(___flge@ff1+3)^0,c
  5406   0012F2  C088  F021         	movff	colorDetect@redPrint,___flge@ff2
  5407   0012F6  C089  F022         	movff	colorDetect@redPrint+1,___flge@ff2+1
  5408   0012FA  C08A  F023         	movff	colorDetect@redPrint+2,___flge@ff2+2
  5409   0012FE  C08B  F024         	movff	colorDetect@redPrint+3,___flge@ff2+3
  5410   001302  EC1D  F01F         	call	___flge	;wreg free
  5411   001306  B0D8               	btfsc	status,0,c
  5412   001308  EF88  F009         	goto	u5621
  5413   00130C  EF8A  F009         	goto	u5620
  5414   001310                     u5621:
  5415   001310  EFFF  F009         	goto	l5197
  5416   001314                     u5620:
  5417   001314  0ECD               	movlw	205
  5418   001316  6E1D               	movwf	___flge@ff1^0,c
  5419   001318  0ECC               	movlw	204
  5420   00131A  6E1E               	movwf	(___flge@ff1+1)^0,c
  5421   00131C  0E4C               	movlw	76
  5422   00131E  6E1F               	movwf	(___flge@ff1+2)^0,c
  5423   001320  0E3F               	movlw	63
  5424   001322  6E20               	movwf	(___flge@ff1+3)^0,c
  5425   001324  C08C  F019         	movff	colorDetect@greenPrint,___flsub@a
  5426   001328  C08D  F01A         	movff	colorDetect@greenPrint+1,___flsub@a+1
  5427   00132C  C08E  F01B         	movff	colorDetect@greenPrint+2,___flsub@a+2
  5428   001330  C08F  F01C         	movff	colorDetect@greenPrint+3,___flsub@a+3
  5429   001334  C088  F015         	movff	colorDetect@redPrint,___flsub@b
  5430   001338  C089  F016         	movff	colorDetect@redPrint+1,___flsub@b+1
  5431   00133C  C08A  F017         	movff	colorDetect@redPrint+2,___flsub@b+2
  5432   001340  C08B  F018         	movff	colorDetect@redPrint+3,___flsub@b+3
  5433   001344  EC20  F025         	call	___flsub	;wreg free
  5434   001348  C015  F021         	movff	?___flsub,___flge@ff2
  5435   00134C  C016  F022         	movff	?___flsub+1,___flge@ff2+1
  5436   001350  C017  F023         	movff	?___flsub+2,___flge@ff2+2
  5437   001354  C018  F024         	movff	?___flsub+3,___flge@ff2+3
  5438   001358  EC1D  F01F         	call	___flge	;wreg free
  5439   00135C  B0D8               	btfsc	status,0,c
  5440   00135E  EFB3  F009         	goto	u5631
  5441   001362  EFB5  F009         	goto	u5630
  5442   001366                     u5631:
  5443   001366  EFFF  F009         	goto	l5197
  5444   00136A                     u5630:
  5445   00136A  0ECD               	movlw	205
  5446   00136C  6E1D               	movwf	___flge@ff1^0,c
  5447   00136E  0ECC               	movlw	204
  5448   001370  6E1E               	movwf	(___flge@ff1+1)^0,c
  5449   001372  0E4C               	movlw	76
  5450   001374  6E1F               	movwf	(___flge@ff1+2)^0,c
  5451   001376  0E3F               	movlw	63
  5452   001378  6E20               	movwf	(___flge@ff1+3)^0,c
  5453   00137A  C090  F019         	movff	colorDetect@bluePrint,___flsub@a
  5454   00137E  C091  F01A         	movff	colorDetect@bluePrint+1,___flsub@a+1
  5455   001382  C092  F01B         	movff	colorDetect@bluePrint+2,___flsub@a+2
  5456   001386  C093  F01C         	movff	colorDetect@bluePrint+3,___flsub@a+3
  5457   00138A  C088  F015         	movff	colorDetect@redPrint,___flsub@b
  5458   00138E  C089  F016         	movff	colorDetect@redPrint+1,___flsub@b+1
  5459   001392  C08A  F017         	movff	colorDetect@redPrint+2,___flsub@b+2
  5460   001396  C08B  F018         	movff	colorDetect@redPrint+3,___flsub@b+3
  5461   00139A  EC20  F025         	call	___flsub	;wreg free
  5462   00139E  C015  F021         	movff	?___flsub,___flge@ff2
  5463   0013A2  C016  F022         	movff	?___flsub+1,___flge@ff2+1
  5464   0013A6  C017  F023         	movff	?___flsub+2,___flge@ff2+2
  5465   0013AA  C018  F024         	movff	?___flsub+3,___flge@ff2+3
  5466   0013AE  EC1D  F01F         	call	___flge	;wreg free
  5467   0013B2  B0D8               	btfsc	status,0,c
  5468   0013B4  EFDE  F009         	goto	u5641
  5469   0013B8  EFE0  F009         	goto	u5640
  5470   0013BC                     u5641:
  5471   0013BC  EFFF  F009         	goto	l5197
  5472   0013C0                     u5640:
  5473   0013C0                     
  5474                           ;MazeRobot.X/color.c: 162:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5475   0013C0  0E2A               	movlw	42
  5476   0013C2  6E4F               	movwf	??_colorDetect^0,c
  5477   0013C4  0E8E               	movlw	142
  5478   0013C6                     u6207:
  5479   0013C6  2EE8               	decfsz	wreg,f,c
  5480   0013C8  D7FE               	bra	u6207
  5481   0013CA  2E4F               	decfsz	??_colorDetect^0,f,c
  5482   0013CC  D7FC               	bra	u6207
  5483   0013CE                     
  5484                           ;MazeRobot.X/color.c: 163:         turnRight_90(mL,mR);
  5485   0013CE  C068  F01E         	movff	colorDetect@mL,turnRight_90@mL
  5486   0013D2  C069  F01F         	movff	colorDetect@mL+1,turnRight_90@mL+1
  5487   0013D6  C06A  F020         	movff	colorDetect@mR,turnRight_90@mR
  5488   0013DA  C06B  F021         	movff	colorDetect@mR+1,turnRight_90@mR+1
  5489   0013DE  EC41  F01D         	call	_turnRight_90	;wreg free
  5490   0013E2                     
  5491                           ;MazeRobot.X/color.c: 164:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5492   0013E2  0E2A               	movlw	42
  5493   0013E4  6E4F               	movwf	??_colorDetect^0,c
  5494   0013E6  0E8E               	movlw	142
  5495   0013E8                     u6217:
  5496   0013E8  2EE8               	decfsz	wreg,f,c
  5497   0013EA  D7FE               	bra	u6217
  5498   0013EC  2E4F               	decfsz	??_colorDetect^0,f,c
  5499   0013EE  D7FC               	bra	u6217
  5500   0013F0                     
  5501                           ;MazeRobot.X/color.c: 165:         colour_ref = 1;
  5502   0013F0  0E00               	movlw	0
  5503   0013F2  0100               	movlb	0	; () banked
  5504   0013F4  6F7F               	movwf	(colorDetect@colour_ref+1)& (0+255),b
  5505   0013F6  0E01               	movlw	1
  5506   0013F8  6F7E               	movwf	colorDetect@colour_ref& (0+255),b
  5507                           
  5508                           ;MazeRobot.X/color.c: 167:         }
  5509   0013FA  EFF5  F00C         	goto	l5285
  5510   0013FE                     l5197:
  5511   0013FE  0ECD               	movlw	205
  5512   001400  6E1D               	movwf	___flge@ff1^0,c
  5513   001402  0ECC               	movlw	204
  5514   001404  6E1E               	movwf	(___flge@ff1+1)^0,c
  5515   001406  0ECC               	movlw	204
  5516   001408  6E1F               	movwf	(___flge@ff1+2)^0,c
  5517   00140A  0E3E               	movlw	62
  5518   00140C  6E20               	movwf	(___flge@ff1+3)^0,c
  5519   00140E  C088  F019         	movff	colorDetect@redPrint,___flsub@a
  5520   001412  C089  F01A         	movff	colorDetect@redPrint+1,___flsub@a+1
  5521   001416  C08A  F01B         	movff	colorDetect@redPrint+2,___flsub@a+2
  5522   00141A  C08B  F01C         	movff	colorDetect@redPrint+3,___flsub@a+3
  5523   00141E  C08C  F015         	movff	colorDetect@greenPrint,___flsub@b
  5524   001422  C08D  F016         	movff	colorDetect@greenPrint+1,___flsub@b+1
  5525   001426  C08E  F017         	movff	colorDetect@greenPrint+2,___flsub@b+2
  5526   00142A  C08F  F018         	movff	colorDetect@greenPrint+3,___flsub@b+3
  5527   00142E  EC20  F025         	call	___flsub	;wreg free
  5528   001432  C015  F021         	movff	?___flsub,___flge@ff2
  5529   001436  C016  F022         	movff	?___flsub+1,___flge@ff2+1
  5530   00143A  C017  F023         	movff	?___flsub+2,___flge@ff2+2
  5531   00143E  C018  F024         	movff	?___flsub+3,___flge@ff2+3
  5532   001442  EC1D  F01F         	call	___flge	;wreg free
  5533   001446  B0D8               	btfsc	status,0,c
  5534   001448  EF28  F00A         	goto	u5651
  5535   00144C  EF2A  F00A         	goto	u5650
  5536   001450                     u5651:
  5537   001450  EF8D  F00A         	goto	l5211
  5538   001454                     u5650:
  5539   001454  0E00               	movlw	0
  5540   001456  6E1D               	movwf	___flge@ff1^0,c
  5541   001458  0E00               	movlw	0
  5542   00145A  6E1E               	movwf	(___flge@ff1+1)^0,c
  5543   00145C  0E80               	movlw	128
  5544   00145E  6E1F               	movwf	(___flge@ff1+2)^0,c
  5545   001460  0E3F               	movlw	63
  5546   001462  6E20               	movwf	(___flge@ff1+3)^0,c
  5547   001464  C08C  F021         	movff	colorDetect@greenPrint,___flge@ff2
  5548   001468  C08D  F022         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  5549   00146C  C08E  F023         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  5550   001470  C08F  F024         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  5551   001474  EC1D  F01F         	call	___flge	;wreg free
  5552   001478  B0D8               	btfsc	status,0,c
  5553   00147A  EF41  F00A         	goto	u5661
  5554   00147E  EF43  F00A         	goto	u5660
  5555   001482                     u5661:
  5556   001482  EF8D  F00A         	goto	l5211
  5557   001486                     u5660:
  5558   001486  0ECD               	movlw	205
  5559   001488  6E1D               	movwf	___flge@ff1^0,c
  5560   00148A  0ECC               	movlw	204
  5561   00148C  6E1E               	movwf	(___flge@ff1+1)^0,c
  5562   00148E  0ECC               	movlw	204
  5563   001490  6E1F               	movwf	(___flge@ff1+2)^0,c
  5564   001492  0E3E               	movlw	62
  5565   001494  6E20               	movwf	(___flge@ff1+3)^0,c
  5566   001496  C090  F019         	movff	colorDetect@bluePrint,___flsub@a
  5567   00149A  C091  F01A         	movff	colorDetect@bluePrint+1,___flsub@a+1
  5568   00149E  C092  F01B         	movff	colorDetect@bluePrint+2,___flsub@a+2
  5569   0014A2  C093  F01C         	movff	colorDetect@bluePrint+3,___flsub@a+3
  5570   0014A6  C08C  F015         	movff	colorDetect@greenPrint,___flsub@b
  5571   0014AA  C08D  F016         	movff	colorDetect@greenPrint+1,___flsub@b+1
  5572   0014AE  C08E  F017         	movff	colorDetect@greenPrint+2,___flsub@b+2
  5573   0014B2  C08F  F018         	movff	colorDetect@greenPrint+3,___flsub@b+3
  5574   0014B6  EC20  F025         	call	___flsub	;wreg free
  5575   0014BA  C015  F021         	movff	?___flsub,___flge@ff2
  5576   0014BE  C016  F022         	movff	?___flsub+1,___flge@ff2+1
  5577   0014C2  C017  F023         	movff	?___flsub+2,___flge@ff2+2
  5578   0014C6  C018  F024         	movff	?___flsub+3,___flge@ff2+3
  5579   0014CA  EC1D  F01F         	call	___flge	;wreg free
  5580   0014CE  B0D8               	btfsc	status,0,c
  5581   0014D0  EF6C  F00A         	goto	u5671
  5582   0014D4  EF6E  F00A         	goto	u5670
  5583   0014D8                     u5671:
  5584   0014D8  EF8D  F00A         	goto	l5211
  5585   0014DC                     u5670:
  5586   0014DC                     
  5587                           ;MazeRobot.X/color.c: 171:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5588   0014DC  0E2A               	movlw	42
  5589   0014DE  6E4F               	movwf	??_colorDetect^0,c
  5590   0014E0  0E8E               	movlw	142
  5591   0014E2                     u6227:
  5592   0014E2  2EE8               	decfsz	wreg,f,c
  5593   0014E4  D7FE               	bra	u6227
  5594   0014E6  2E4F               	decfsz	??_colorDetect^0,f,c
  5595   0014E8  D7FC               	bra	u6227
  5596   0014EA                     
  5597                           ;MazeRobot.X/color.c: 172:         turnLeft_90(mL,mR);
  5598   0014EA  C068  F01E         	movff	colorDetect@mL,turnLeft_90@mL
  5599   0014EE  C069  F01F         	movff	colorDetect@mL+1,turnLeft_90@mL+1
  5600   0014F2  C06A  F020         	movff	colorDetect@mR,turnLeft_90@mR
  5601   0014F6  C06B  F021         	movff	colorDetect@mR+1,turnLeft_90@mR+1
  5602   0014FA  ECE0  F01D         	call	_turnLeft_90	;wreg free
  5603   0014FE                     
  5604                           ;MazeRobot.X/color.c: 173:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5605   0014FE  0E2A               	movlw	42
  5606   001500  6E4F               	movwf	??_colorDetect^0,c
  5607   001502  0E8E               	movlw	142
  5608   001504                     u6237:
  5609   001504  2EE8               	decfsz	wreg,f,c
  5610   001506  D7FE               	bra	u6237
  5611   001508  2E4F               	decfsz	??_colorDetect^0,f,c
  5612   00150A  D7FC               	bra	u6237
  5613   00150C                     
  5614                           ;MazeRobot.X/color.c: 174:         colour_ref = 2;
  5615   00150C  0E00               	movlw	0
  5616   00150E  0100               	movlb	0	; () banked
  5617   001510  6F7F               	movwf	(colorDetect@colour_ref+1)& (0+255),b
  5618   001512  0E02               	movlw	2
  5619   001514  6F7E               	movwf	colorDetect@colour_ref& (0+255),b
  5620                           
  5621                           ;MazeRobot.X/color.c: 175:         }
  5622   001516  EFF5  F00C         	goto	l5285
  5623   00151A                     l5211:
  5624   00151A  0E33               	movlw	51
  5625   00151C  6E1D               	movwf	___flge@ff1^0,c
  5626   00151E  0E33               	movlw	51
  5627   001520  6E1E               	movwf	(___flge@ff1+1)^0,c
  5628   001522  0E33               	movlw	51
  5629   001524  6E1F               	movwf	(___flge@ff1+2)^0,c
  5630   001526  0E3F               	movlw	63
  5631   001528  6E20               	movwf	(___flge@ff1+3)^0,c
  5632   00152A  C088  F019         	movff	colorDetect@redPrint,___flsub@a
  5633   00152E  C089  F01A         	movff	colorDetect@redPrint+1,___flsub@a+1
  5634   001532  C08A  F01B         	movff	colorDetect@redPrint+2,___flsub@a+2
  5635   001536  C08B  F01C         	movff	colorDetect@redPrint+3,___flsub@a+3
  5636   00153A  C090  F015         	movff	colorDetect@bluePrint,___flsub@b
  5637   00153E  C091  F016         	movff	colorDetect@bluePrint+1,___flsub@b+1
  5638   001542  C092  F017         	movff	colorDetect@bluePrint+2,___flsub@b+2
  5639   001546  C093  F018         	movff	colorDetect@bluePrint+3,___flsub@b+3
  5640   00154A  EC20  F025         	call	___flsub	;wreg free
  5641   00154E  C015  F021         	movff	?___flsub,___flge@ff2
  5642   001552  C016  F022         	movff	?___flsub+1,___flge@ff2+1
  5643   001556  C017  F023         	movff	?___flsub+2,___flge@ff2+2
  5644   00155A  C018  F024         	movff	?___flsub+3,___flge@ff2+3
  5645   00155E  EC1D  F01F         	call	___flge	;wreg free
  5646   001562  B0D8               	btfsc	status,0,c
  5647   001564  EFB6  F00A         	goto	u5681
  5648   001568  EFB8  F00A         	goto	u5680
  5649   00156C                     u5681:
  5650   00156C  EF1B  F00B         	goto	l5225
  5651   001570                     u5680:
  5652   001570  0E9A               	movlw	154
  5653   001572  6E1D               	movwf	___flge@ff1^0,c
  5654   001574  0E99               	movlw	153
  5655   001576  6E1E               	movwf	(___flge@ff1+1)^0,c
  5656   001578  0E99               	movlw	153
  5657   00157A  6E1F               	movwf	(___flge@ff1+2)^0,c
  5658   00157C  0E3E               	movlw	62
  5659   00157E  6E20               	movwf	(___flge@ff1+3)^0,c
  5660   001580  C08C  F019         	movff	colorDetect@greenPrint,___flsub@a
  5661   001584  C08D  F01A         	movff	colorDetect@greenPrint+1,___flsub@a+1
  5662   001588  C08E  F01B         	movff	colorDetect@greenPrint+2,___flsub@a+2
  5663   00158C  C08F  F01C         	movff	colorDetect@greenPrint+3,___flsub@a+3
  5664   001590  C090  F015         	movff	colorDetect@bluePrint,___flsub@b
  5665   001594  C091  F016         	movff	colorDetect@bluePrint+1,___flsub@b+1
  5666   001598  C092  F017         	movff	colorDetect@bluePrint+2,___flsub@b+2
  5667   00159C  C093  F018         	movff	colorDetect@bluePrint+3,___flsub@b+3
  5668   0015A0  EC20  F025         	call	___flsub	;wreg free
  5669   0015A4  C015  F021         	movff	?___flsub,___flge@ff2
  5670   0015A8  C016  F022         	movff	?___flsub+1,___flge@ff2+1
  5671   0015AC  C017  F023         	movff	?___flsub+2,___flge@ff2+2
  5672   0015B0  C018  F024         	movff	?___flsub+3,___flge@ff2+3
  5673   0015B4  EC1D  F01F         	call	___flge	;wreg free
  5674   0015B8  B0D8               	btfsc	status,0,c
  5675   0015BA  EFE1  F00A         	goto	u5691
  5676   0015BE  EFE3  F00A         	goto	u5690
  5677   0015C2                     u5691:
  5678   0015C2  EF1B  F00B         	goto	l5225
  5679   0015C6                     u5690:
  5680   0015C6  0E33               	movlw	51
  5681   0015C8  6E1D               	movwf	___flge@ff1^0,c
  5682   0015CA  0E33               	movlw	51
  5683   0015CC  6E1E               	movwf	(___flge@ff1+1)^0,c
  5684   0015CE  0E33               	movlw	51
  5685   0015D0  6E1F               	movwf	(___flge@ff1+2)^0,c
  5686   0015D2  0E3F               	movlw	63
  5687   0015D4  6E20               	movwf	(___flge@ff1+3)^0,c
  5688   0015D6  C090  F021         	movff	colorDetect@bluePrint,___flge@ff2
  5689   0015DA  C091  F022         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  5690   0015DE  C092  F023         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  5691   0015E2  C093  F024         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  5692   0015E6  EC1D  F01F         	call	___flge	;wreg free
  5693   0015EA  B0D8               	btfsc	status,0,c
  5694   0015EC  EFFA  F00A         	goto	u5701
  5695   0015F0  EFFC  F00A         	goto	u5700
  5696   0015F4                     u5701:
  5697   0015F4  EF1B  F00B         	goto	l5225
  5698   0015F8                     u5700:
  5699   0015F8                     
  5700                           ;MazeRobot.X/color.c: 179:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5701   0015F8  0E2A               	movlw	42
  5702   0015FA  6E4F               	movwf	??_colorDetect^0,c
  5703   0015FC  0E8E               	movlw	142
  5704   0015FE                     u6247:
  5705   0015FE  2EE8               	decfsz	wreg,f,c
  5706   001600  D7FE               	bra	u6247
  5707   001602  2E4F               	decfsz	??_colorDetect^0,f,c
  5708   001604  D7FC               	bra	u6247
  5709   001606                     
  5710                           ;MazeRobot.X/color.c: 180:         turn_180(mL,mR);
  5711   001606  C068  F01E         	movff	colorDetect@mL,turn_180@mL
  5712   00160A  C069  F01F         	movff	colorDetect@mL+1,turn_180@mL+1
  5713   00160E  C06A  F020         	movff	colorDetect@mR,turn_180@mR
  5714   001612  C06B  F021         	movff	colorDetect@mR+1,turn_180@mR+1
  5715   001616  ECDA  F017         	call	_turn_180	;wreg free
  5716   00161A                     
  5717                           ;MazeRobot.X/color.c: 181:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5718   00161A  0E2A               	movlw	42
  5719   00161C  6E4F               	movwf	??_colorDetect^0,c
  5720   00161E  0E8E               	movlw	142
  5721   001620                     u6257:
  5722   001620  2EE8               	decfsz	wreg,f,c
  5723   001622  D7FE               	bra	u6257
  5724   001624  2E4F               	decfsz	??_colorDetect^0,f,c
  5725   001626  D7FC               	bra	u6257
  5726   001628                     
  5727                           ;MazeRobot.X/color.c: 182:         colour_ref = 3;
  5728   001628  0E00               	movlw	0
  5729   00162A  0100               	movlb	0	; () banked
  5730   00162C  6F7F               	movwf	(colorDetect@colour_ref+1)& (0+255),b
  5731   00162E  0E03               	movlw	3
  5732   001630  6F7E               	movwf	colorDetect@colour_ref& (0+255),b
  5733                           
  5734                           ;MazeRobot.X/color.c: 183:         }
  5735   001632  EFF5  F00C         	goto	l5285
  5736   001636                     l5225:
  5737   001636  0E00               	movlw	0
  5738   001638  6E1D               	movwf	___flge@ff1^0,c
  5739   00163A  0E00               	movlw	0
  5740   00163C  6E1E               	movwf	(___flge@ff1+1)^0,c
  5741   00163E  0E80               	movlw	128
  5742   001640  6E1F               	movwf	(___flge@ff1+2)^0,c
  5743   001642  0E3F               	movlw	63
  5744   001644  6E20               	movwf	(___flge@ff1+3)^0,c
  5745   001646  C088  F021         	movff	colorDetect@redPrint,___flge@ff2
  5746   00164A  C089  F022         	movff	colorDetect@redPrint+1,___flge@ff2+1
  5747   00164E  C08A  F023         	movff	colorDetect@redPrint+2,___flge@ff2+2
  5748   001652  C08B  F024         	movff	colorDetect@redPrint+3,___flge@ff2+3
  5749   001656  EC1D  F01F         	call	___flge	;wreg free
  5750   00165A  B0D8               	btfsc	status,0,c
  5751   00165C  EF32  F00B         	goto	u5711
  5752   001660  EF34  F00B         	goto	u5710
  5753   001664                     u5711:
  5754   001664  EF85  F00B         	goto	l5239
  5755   001668                     u5710:
  5756   001668  0ECD               	movlw	205
  5757   00166A  6E1D               	movwf	___flge@ff1^0,c
  5758   00166C  0ECC               	movlw	204
  5759   00166E  6E1E               	movwf	(___flge@ff1+1)^0,c
  5760   001670  0E4C               	movlw	76
  5761   001672  6E1F               	movwf	(___flge@ff1+2)^0,c
  5762   001674  0E3F               	movlw	63
  5763   001676  6E20               	movwf	(___flge@ff1+3)^0,c
  5764   001678  C08C  F021         	movff	colorDetect@greenPrint,___flge@ff2
  5765   00167C  C08D  F022         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  5766   001680  C08E  F023         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  5767   001684  C08F  F024         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  5768   001688  EC1D  F01F         	call	___flge	;wreg free
  5769   00168C  B0D8               	btfsc	status,0,c
  5770   00168E  EF4B  F00B         	goto	u5721
  5771   001692  EF4D  F00B         	goto	u5720
  5772   001696                     u5721:
  5773   001696  EF85  F00B         	goto	l5239
  5774   00169A                     u5720:
  5775   00169A  C090  F01D         	movff	colorDetect@bluePrint,___flge@ff1
  5776   00169E  C091  F01E         	movff	colorDetect@bluePrint+1,___flge@ff1+1
  5777   0016A2  C092  F01F         	movff	colorDetect@bluePrint+2,___flge@ff1+2
  5778   0016A6  C093  F020         	movff	colorDetect@bluePrint+3,___flge@ff1+3
  5779   0016AA  0ECD               	movlw	205
  5780   0016AC  6E21               	movwf	___flge@ff2^0,c
  5781   0016AE  0ECC               	movlw	204
  5782   0016B0  6E22               	movwf	(___flge@ff2+1)^0,c
  5783   0016B2  0E4C               	movlw	76
  5784   0016B4  6E23               	movwf	(___flge@ff2+2)^0,c
  5785   0016B6  0E3F               	movlw	63
  5786   0016B8  6E24               	movwf	(___flge@ff2+3)^0,c
  5787   0016BA  EC1D  F01F         	call	___flge	;wreg free
  5788   0016BE  B0D8               	btfsc	status,0,c
  5789   0016C0  EF64  F00B         	goto	u5731
  5790   0016C4  EF66  F00B         	goto	u5730
  5791   0016C8                     u5731:
  5792   0016C8  EF85  F00B         	goto	l5239
  5793   0016CC                     u5730:
  5794   0016CC                     
  5795                           ;MazeRobot.X/color.c: 188:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5796   0016CC  0E2A               	movlw	42
  5797   0016CE  6E4F               	movwf	??_colorDetect^0,c
  5798   0016D0  0E8E               	movlw	142
  5799   0016D2                     u6267:
  5800   0016D2  2EE8               	decfsz	wreg,f,c
  5801   0016D4  D7FE               	bra	u6267
  5802   0016D6  2E4F               	decfsz	??_colorDetect^0,f,c
  5803   0016D8  D7FC               	bra	u6267
  5804   0016DA                     
  5805                           ;MazeRobot.X/color.c: 189:         reverseSquareRight(mL,mR);
  5806   0016DA  C068  F024         	movff	colorDetect@mL,reverseSquareRight@mL
  5807   0016DE  C069  F025         	movff	colorDetect@mL+1,reverseSquareRight@mL+1
  5808   0016E2  C06A  F026         	movff	colorDetect@mR,reverseSquareRight@mR
  5809   0016E6  C06B  F027         	movff	colorDetect@mR+1,reverseSquareRight@mR+1
  5810   0016EA  EC7E  F022         	call	_reverseSquareRight	;wreg free
  5811   0016EE                     
  5812                           ;MazeRobot.X/color.c: 190:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5813   0016EE  0E2A               	movlw	42
  5814   0016F0  6E4F               	movwf	??_colorDetect^0,c
  5815   0016F2  0E8E               	movlw	142
  5816   0016F4                     u6277:
  5817   0016F4  2EE8               	decfsz	wreg,f,c
  5818   0016F6  D7FE               	bra	u6277
  5819   0016F8  2E4F               	decfsz	??_colorDetect^0,f,c
  5820   0016FA  D7FC               	bra	u6277
  5821   0016FC                     
  5822                           ;MazeRobot.X/color.c: 191:         colour_ref = 4;
  5823   0016FC  0E00               	movlw	0
  5824   0016FE  0100               	movlb	0	; () banked
  5825   001700  6F7F               	movwf	(colorDetect@colour_ref+1)& (0+255),b
  5826   001702  0E04               	movlw	4
  5827   001704  6F7E               	movwf	colorDetect@colour_ref& (0+255),b
  5828                           
  5829                           ;MazeRobot.X/color.c: 192:         }
  5830   001706  EFF5  F00C         	goto	l5285
  5831   00170A                     l5239:
  5832   00170A  0E33               	movlw	51
  5833   00170C  6E1D               	movwf	___flge@ff1^0,c
  5834   00170E  0E33               	movlw	51
  5835   001710  6E1E               	movwf	(___flge@ff1+1)^0,c
  5836   001712  0E73               	movlw	115
  5837   001714  6E1F               	movwf	(___flge@ff1+2)^0,c
  5838   001716  0E3F               	movlw	63
  5839   001718  6E20               	movwf	(___flge@ff1+3)^0,c
  5840   00171A  C088  F021         	movff	colorDetect@redPrint,___flge@ff2
  5841   00171E  C089  F022         	movff	colorDetect@redPrint+1,___flge@ff2+1
  5842   001722  C08A  F023         	movff	colorDetect@redPrint+2,___flge@ff2+2
  5843   001726  C08B  F024         	movff	colorDetect@redPrint+3,___flge@ff2+3
  5844   00172A  EC1D  F01F         	call	___flge	;wreg free
  5845   00172E  B0D8               	btfsc	status,0,c
  5846   001730  EF9C  F00B         	goto	u5741
  5847   001734  EF9E  F00B         	goto	u5740
  5848   001738                     u5741:
  5849   001738  EF21  F00C         	goto	l5257
  5850   00173C                     u5740:
  5851   00173C  0ECD               	movlw	205
  5852   00173E  6E1D               	movwf	___flge@ff1^0,c
  5853   001740  0ECC               	movlw	204
  5854   001742  6E1E               	movwf	(___flge@ff1+1)^0,c
  5855   001744  0E4C               	movlw	76
  5856   001746  6E1F               	movwf	(___flge@ff1+2)^0,c
  5857   001748  0E3F               	movlw	63
  5858   00174A  6E20               	movwf	(___flge@ff1+3)^0,c
  5859   00174C  C08C  F021         	movff	colorDetect@greenPrint,___flge@ff2
  5860   001750  C08D  F022         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  5861   001754  C08E  F023         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  5862   001758  C08F  F024         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  5863   00175C  EC1D  F01F         	call	___flge	;wreg free
  5864   001760  B0D8               	btfsc	status,0,c
  5865   001762  EFB5  F00B         	goto	u5751
  5866   001766  EFB7  F00B         	goto	u5750
  5867   00176A                     u5751:
  5868   00176A  EF21  F00C         	goto	l5257
  5869   00176E                     u5750:
  5870   00176E  C08C  F01D         	movff	colorDetect@greenPrint,___flge@ff1
  5871   001772  C08D  F01E         	movff	colorDetect@greenPrint+1,___flge@ff1+1
  5872   001776  C08E  F01F         	movff	colorDetect@greenPrint+2,___flge@ff1+2
  5873   00177A  C08F  F020         	movff	colorDetect@greenPrint+3,___flge@ff1+3
  5874   00177E  0E66               	movlw	102
  5875   001780  6E21               	movwf	___flge@ff2^0,c
  5876   001782  0E66               	movlw	102
  5877   001784  6E22               	movwf	(___flge@ff2+1)^0,c
  5878   001786  0E66               	movlw	102
  5879   001788  6E23               	movwf	(___flge@ff2+2)^0,c
  5880   00178A  0E3F               	movlw	63
  5881   00178C  6E24               	movwf	(___flge@ff2+3)^0,c
  5882   00178E  EC1D  F01F         	call	___flge	;wreg free
  5883   001792  B0D8               	btfsc	status,0,c
  5884   001794  EFCE  F00B         	goto	u5761
  5885   001798  EFD0  F00B         	goto	u5760
  5886   00179C                     u5761:
  5887   00179C  EF21  F00C         	goto	l5257
  5888   0017A0                     u5760:
  5889   0017A0  0ECD               	movlw	205
  5890   0017A2  6E1D               	movwf	___flge@ff1^0,c
  5891   0017A4  0ECC               	movlw	204
  5892   0017A6  6E1E               	movwf	(___flge@ff1+1)^0,c
  5893   0017A8  0E4C               	movlw	76
  5894   0017AA  6E1F               	movwf	(___flge@ff1+2)^0,c
  5895   0017AC  0E3F               	movlw	63
  5896   0017AE  6E20               	movwf	(___flge@ff1+3)^0,c
  5897   0017B0  C090  F021         	movff	colorDetect@bluePrint,___flge@ff2
  5898   0017B4  C091  F022         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  5899   0017B8  C092  F023         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  5900   0017BC  C093  F024         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  5901   0017C0  EC1D  F01F         	call	___flge	;wreg free
  5902   0017C4  B0D8               	btfsc	status,0,c
  5903   0017C6  EFE7  F00B         	goto	u5771
  5904   0017CA  EFE9  F00B         	goto	u5770
  5905   0017CE                     u5771:
  5906   0017CE  EF21  F00C         	goto	l5257
  5907   0017D2                     u5770:
  5908   0017D2  C090  F01D         	movff	colorDetect@bluePrint,___flge@ff1
  5909   0017D6  C091  F01E         	movff	colorDetect@bluePrint+1,___flge@ff1+1
  5910   0017DA  C092  F01F         	movff	colorDetect@bluePrint+2,___flge@ff1+2
  5911   0017DE  C093  F020         	movff	colorDetect@bluePrint+3,___flge@ff1+3
  5912   0017E2  0E33               	movlw	51
  5913   0017E4  6E21               	movwf	___flge@ff2^0,c
  5914   0017E6  0E33               	movlw	51
  5915   0017E8  6E22               	movwf	(___flge@ff2+1)^0,c
  5916   0017EA  0E73               	movlw	115
  5917   0017EC  6E23               	movwf	(___flge@ff2+2)^0,c
  5918   0017EE  0E3F               	movlw	63
  5919   0017F0  6E24               	movwf	(___flge@ff2+3)^0,c
  5920   0017F2  EC1D  F01F         	call	___flge	;wreg free
  5921   0017F6  B0D8               	btfsc	status,0,c
  5922   0017F8  EF00  F00C         	goto	u5781
  5923   0017FC  EF02  F00C         	goto	u5780
  5924   001800                     u5781:
  5925   001800  EF21  F00C         	goto	l5257
  5926   001804                     u5780:
  5927   001804                     
  5928                           ;MazeRobot.X/color.c: 196:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5929   001804  0E2A               	movlw	42
  5930   001806  6E4F               	movwf	??_colorDetect^0,c
  5931   001808  0E8E               	movlw	142
  5932   00180A                     u6287:
  5933   00180A  2EE8               	decfsz	wreg,f,c
  5934   00180C  D7FE               	bra	u6287
  5935   00180E  2E4F               	decfsz	??_colorDetect^0,f,c
  5936   001810  D7FC               	bra	u6287
  5937   001812                     
  5938                           ;MazeRobot.X/color.c: 197:         reverseSquareLeft(mL,mR);
  5939   001812  C068  F024         	movff	colorDetect@mL,reverseSquareLeft@mL
  5940   001816  C069  F025         	movff	colorDetect@mL+1,reverseSquareLeft@mL+1
  5941   00181A  C06A  F026         	movff	colorDetect@mR,reverseSquareLeft@mR
  5942   00181E  C06B  F027         	movff	colorDetect@mR+1,reverseSquareLeft@mR+1
  5943   001822  ECC9  F022         	call	_reverseSquareLeft	;wreg free
  5944   001826                     
  5945                           ;MazeRobot.X/color.c: 198:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5946   001826  0E2A               	movlw	42
  5947   001828  6E4F               	movwf	??_colorDetect^0,c
  5948   00182A  0E8E               	movlw	142
  5949   00182C                     u6297:
  5950   00182C  2EE8               	decfsz	wreg,f,c
  5951   00182E  D7FE               	bra	u6297
  5952   001830  2E4F               	decfsz	??_colorDetect^0,f,c
  5953   001832  D7FC               	bra	u6297
  5954   001834                     
  5955                           ;MazeRobot.X/color.c: 199:         colour_ref = 5;
  5956   001834  0E00               	movlw	0
  5957   001836  0100               	movlb	0	; () banked
  5958   001838  6F7F               	movwf	(colorDetect@colour_ref+1)& (0+255),b
  5959   00183A  0E05               	movlw	5
  5960   00183C  6F7E               	movwf	colorDetect@colour_ref& (0+255),b
  5961                           
  5962                           ;MazeRobot.X/color.c: 200:         }
  5963   00183E  EFF5  F00C         	goto	l5285
  5964   001842                     l5257:
  5965   001842  0E66               	movlw	102
  5966   001844  6E1D               	movwf	___flge@ff1^0,c
  5967   001846  0E66               	movlw	102
  5968   001848  6E1E               	movwf	(___flge@ff1+1)^0,c
  5969   00184A  0EA6               	movlw	166
  5970   00184C  6E1F               	movwf	(___flge@ff1+2)^0,c
  5971   00184E  0E3F               	movlw	63
  5972   001850  6E20               	movwf	(___flge@ff1+3)^0,c
  5973   001852  C088  F021         	movff	colorDetect@redPrint,___flge@ff2
  5974   001856  C089  F022         	movff	colorDetect@redPrint+1,___flge@ff2+1
  5975   00185A  C08A  F023         	movff	colorDetect@redPrint+2,___flge@ff2+2
  5976   00185E  C08B  F024         	movff	colorDetect@redPrint+3,___flge@ff2+3
  5977   001862  EC1D  F01F         	call	___flge	;wreg free
  5978   001866  B0D8               	btfsc	status,0,c
  5979   001868  EF38  F00C         	goto	u5791
  5980   00186C  EF3A  F00C         	goto	u5790
  5981   001870                     u5791:
  5982   001870  EF8B  F00C         	goto	l5271
  5983   001874                     u5790:
  5984   001874  0E00               	movlw	0
  5985   001876  6E1D               	movwf	___flge@ff1^0,c
  5986   001878  0E00               	movlw	0
  5987   00187A  6E1E               	movwf	(___flge@ff1+1)^0,c
  5988   00187C  0E00               	movlw	0
  5989   00187E  6E1F               	movwf	(___flge@ff1+2)^0,c
  5990   001880  0E3F               	movlw	63
  5991   001882  6E20               	movwf	(___flge@ff1+3)^0,c
  5992   001884  C08C  F021         	movff	colorDetect@greenPrint,___flge@ff2
  5993   001888  C08D  F022         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  5994   00188C  C08E  F023         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  5995   001890  C08F  F024         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  5996   001894  EC1D  F01F         	call	___flge	;wreg free
  5997   001898  B0D8               	btfsc	status,0,c
  5998   00189A  EF51  F00C         	goto	u5801
  5999   00189E  EF53  F00C         	goto	u5800
  6000   0018A2                     u5801:
  6001   0018A2  EF8B  F00C         	goto	l5271
  6002   0018A6                     u5800:
  6003   0018A6  0E00               	movlw	0
  6004   0018A8  6E1D               	movwf	___flge@ff1^0,c
  6005   0018AA  0E00               	movlw	0
  6006   0018AC  6E1E               	movwf	(___flge@ff1+1)^0,c
  6007   0018AE  0E00               	movlw	0
  6008   0018B0  6E1F               	movwf	(___flge@ff1+2)^0,c
  6009   0018B2  0E3F               	movlw	63
  6010   0018B4  6E20               	movwf	(___flge@ff1+3)^0,c
  6011   0018B6  C090  F021         	movff	colorDetect@bluePrint,___flge@ff2
  6012   0018BA  C091  F022         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  6013   0018BE  C092  F023         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  6014   0018C2  C093  F024         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  6015   0018C6  EC1D  F01F         	call	___flge	;wreg free
  6016   0018CA  B0D8               	btfsc	status,0,c
  6017   0018CC  EF6A  F00C         	goto	u5811
  6018   0018D0  EF6C  F00C         	goto	u5810
  6019   0018D4                     u5811:
  6020   0018D4  EF8B  F00C         	goto	l5271
  6021   0018D8                     u5810:
  6022   0018D8                     
  6023                           ;MazeRobot.X/color.c: 204:         _delay((unsigned long)((2)*(64000000/4000.0)));
  6024   0018D8  0E2A               	movlw	42
  6025   0018DA  6E4F               	movwf	??_colorDetect^0,c
  6026   0018DC  0E8E               	movlw	142
  6027   0018DE                     u6307:
  6028   0018DE  2EE8               	decfsz	wreg,f,c
  6029   0018E0  D7FE               	bra	u6307
  6030   0018E2  2E4F               	decfsz	??_colorDetect^0,f,c
  6031   0018E4  D7FC               	bra	u6307
  6032   0018E6                     
  6033                           ;MazeRobot.X/color.c: 205:         turnRight_135(mL,mR);
  6034   0018E6  C068  F01E         	movff	colorDetect@mL,turnRight_135@mL
  6035   0018EA  C069  F01F         	movff	colorDetect@mL+1,turnRight_135@mL+1
  6036   0018EE  C06A  F020         	movff	colorDetect@mR,turnRight_135@mR
  6037   0018F2  C06B  F021         	movff	colorDetect@mR+1,turnRight_135@mR+1
  6038   0018F6  ECA2  F01C         	call	_turnRight_135	;wreg free
  6039   0018FA                     
  6040                           ;MazeRobot.X/color.c: 206:         _delay((unsigned long)((2)*(64000000/4000.0)));
  6041   0018FA  0E2A               	movlw	42
  6042   0018FC  6E4F               	movwf	??_colorDetect^0,c
  6043   0018FE  0E8E               	movlw	142
  6044   001900                     u6317:
  6045   001900  2EE8               	decfsz	wreg,f,c
  6046   001902  D7FE               	bra	u6317
  6047   001904  2E4F               	decfsz	??_colorDetect^0,f,c
  6048   001906  D7FC               	bra	u6317
  6049   001908                     
  6050                           ;MazeRobot.X/color.c: 207:         colour_ref = 6;
  6051   001908  0E00               	movlw	0
  6052   00190A  0100               	movlb	0	; () banked
  6053   00190C  6F7F               	movwf	(colorDetect@colour_ref+1)& (0+255),b
  6054   00190E  0E06               	movlw	6
  6055   001910  6F7E               	movwf	colorDetect@colour_ref& (0+255),b
  6056                           
  6057                           ;MazeRobot.X/color.c: 209:         }
  6058   001912  EFF5  F00C         	goto	l5285
  6059   001916                     l5271:
  6060   001916  C088  F01D         	movff	colorDetect@redPrint,___flge@ff1
  6061   00191A  C089  F01E         	movff	colorDetect@redPrint+1,___flge@ff1+1
  6062   00191E  C08A  F01F         	movff	colorDetect@redPrint+2,___flge@ff1+2
  6063   001922  C08B  F020         	movff	colorDetect@redPrint+3,___flge@ff1+3
  6064   001926  0E33               	movlw	51
  6065   001928  6E21               	movwf	___flge@ff2^0,c
  6066   00192A  0E33               	movlw	51
  6067   00192C  6E22               	movwf	(___flge@ff2+1)^0,c
  6068   00192E  0E33               	movlw	51
  6069   001930  6E23               	movwf	(___flge@ff2+2)^0,c
  6070   001932  0E3F               	movlw	63
  6071   001934  6E24               	movwf	(___flge@ff2+3)^0,c
  6072   001936  EC1D  F01F         	call	___flge	;wreg free
  6073   00193A  B0D8               	btfsc	status,0,c
  6074   00193C  EFA2  F00C         	goto	u5821
  6075   001940  EFA4  F00C         	goto	u5820
  6076   001944                     u5821:
  6077   001944  EFF5  F00C         	goto	l110
  6078   001948                     u5820:
  6079   001948  0E00               	movlw	0
  6080   00194A  6E1D               	movwf	___flge@ff1^0,c
  6081   00194C  0E00               	movlw	0
  6082   00194E  6E1E               	movwf	(___flge@ff1+1)^0,c
  6083   001950  0E80               	movlw	128
  6084   001952  6E1F               	movwf	(___flge@ff1+2)^0,c
  6085   001954  0E3F               	movlw	63
  6086   001956  6E20               	movwf	(___flge@ff1+3)^0,c
  6087   001958  C08C  F021         	movff	colorDetect@greenPrint,___flge@ff2
  6088   00195C  C08D  F022         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  6089   001960  C08E  F023         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  6090   001964  C08F  F024         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  6091   001968  EC1D  F01F         	call	___flge	;wreg free
  6092   00196C  B0D8               	btfsc	status,0,c
  6093   00196E  EFBB  F00C         	goto	u5831
  6094   001972  EFBD  F00C         	goto	u5830
  6095   001976                     u5831:
  6096   001976  EFF5  F00C         	goto	l110
  6097   00197A                     u5830:
  6098   00197A  0E00               	movlw	0
  6099   00197C  6E1D               	movwf	___flge@ff1^0,c
  6100   00197E  0E00               	movlw	0
  6101   001980  6E1E               	movwf	(___flge@ff1+1)^0,c
  6102   001982  0E80               	movlw	128
  6103   001984  6E1F               	movwf	(___flge@ff1+2)^0,c
  6104   001986  0E3F               	movlw	63
  6105   001988  6E20               	movwf	(___flge@ff1+3)^0,c
  6106   00198A  C090  F021         	movff	colorDetect@bluePrint,___flge@ff2
  6107   00198E  C091  F022         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  6108   001992  C092  F023         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  6109   001996  C093  F024         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  6110   00199A  EC1D  F01F         	call	___flge	;wreg free
  6111   00199E  B0D8               	btfsc	status,0,c
  6112   0019A0  EFD4  F00C         	goto	u5841
  6113   0019A4  EFD6  F00C         	goto	u5840
  6114   0019A8                     u5841:
  6115   0019A8  EFF5  F00C         	goto	l110
  6116   0019AC                     u5840:
  6117   0019AC                     
  6118                           ;MazeRobot.X/color.c: 213:         _delay((unsigned long)((2)*(64000000/4000.0)));
  6119   0019AC  0E2A               	movlw	42
  6120   0019AE  6E4F               	movwf	??_colorDetect^0,c
  6121   0019B0  0E8E               	movlw	142
  6122   0019B2                     u6327:
  6123   0019B2  2EE8               	decfsz	wreg,f,c
  6124   0019B4  D7FE               	bra	u6327
  6125   0019B6  2E4F               	decfsz	??_colorDetect^0,f,c
  6126   0019B8  D7FC               	bra	u6327
  6127   0019BA                     
  6128                           ;MazeRobot.X/color.c: 214:         turnLeft_135(mL,mR);
  6129   0019BA  C068  F01E         	movff	colorDetect@mL,turnLeft_135@mL
  6130   0019BE  C069  F01F         	movff	colorDetect@mL+1,turnLeft_135@mL+1
  6131   0019C2  C06A  F020         	movff	colorDetect@mR,turnLeft_135@mR
  6132   0019C6  C06B  F021         	movff	colorDetect@mR+1,turnLeft_135@mR+1
  6133   0019CA  EC7F  F01E         	call	_turnLeft_135	;wreg free
  6134   0019CE                     
  6135                           ;MazeRobot.X/color.c: 215:         _delay((unsigned long)((2)*(64000000/4000.0)));
  6136   0019CE  0E2A               	movlw	42
  6137   0019D0  6E4F               	movwf	??_colorDetect^0,c
  6138   0019D2  0E8E               	movlw	142
  6139   0019D4                     u6337:
  6140   0019D4  2EE8               	decfsz	wreg,f,c
  6141   0019D6  D7FE               	bra	u6337
  6142   0019D8  2E4F               	decfsz	??_colorDetect^0,f,c
  6143   0019DA  D7FC               	bra	u6337
  6144   0019DC                     
  6145                           ;MazeRobot.X/color.c: 216:         colour_ref = 7;
  6146   0019DC  0E00               	movlw	0
  6147   0019DE  0100               	movlb	0	; () banked
  6148   0019E0  6F7F               	movwf	(colorDetect@colour_ref+1)& (0+255),b
  6149   0019E2  0E07               	movlw	7
  6150   0019E4  6F7E               	movwf	colorDetect@colour_ref& (0+255),b
  6151   0019E6  EFF5  F00C         	goto	l5285
  6152   0019EA                     l110:
  6153   0019EA                     l5285:
  6154                           
  6155                           ;MazeRobot.X/color.c: 220:         return colour_ref;
  6156   0019EA  C07E  F060         	movff	colorDetect@colour_ref,?_colorDetect
  6157   0019EE  C07F  F061         	movff	colorDetect@colour_ref+1,?_colorDetect+1
  6158   0019F2  0012               	return		;funcret
  6159   0019F4                     __end_of_colorDetect:
  6160                           	callstack 0
  6161                           
  6162 ;; *************** function _turn_180 *****************
  6163 ;; Defined at:
  6164 ;;		line 295 in file "MazeRobot.X/dc_motor.c"
  6165 ;; Parameters:    Size  Location     Type
  6166 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  6167 ;;		 -> main@motorLeft(9), 
  6168 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  6169 ;;		 -> main@motorRight(9), 
  6170 ;; Auto vars:     Size  Location     Type
  6171 ;;		None
  6172 ;; Return value:  Size  Location     Type
  6173 ;;                  1    wreg      void 
  6174 ;; Registers used:
  6175 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6176 ;; Tracked objects:
  6177 ;;		On entry : 0/0
  6178 ;;		On exit  : 0/0
  6179 ;;		Unchanged: 0/0
  6180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6181 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6183 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6184 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6185 ;;Total ram usage:        6 bytes
  6186 ;; Hardware stack levels used: 1
  6187 ;; Hardware stack levels required when called: 5
  6188 ;; This function calls:
  6189 ;;		_reverse
  6190 ;;		_setMotorPWM
  6191 ;;		_stop
  6192 ;; This function is called by:
  6193 ;;		_colorDetect
  6194 ;;		_return_home_turns
  6195 ;;		_main
  6196 ;; This function uses a non-reentrant model
  6197 ;;
  6198                           
  6199                           	psect	text25
  6200   002FB4                     __ptext25:
  6201                           	callstack 0
  6202   002FB4                     _turn_180:
  6203                           	callstack 25
  6204   002FB4                     
  6205                           ;MazeRobot.X/dc_motor.c: 295: void turn_180(DC_motor *mL, DC_motor *mR);MazeRobot.X/dc_m
      +                          otor.c: 296: {;MazeRobot.X/dc_motor.c: 298:     stop(mL, mR);
  6206   002FB4  C01E  F018         	movff	turn_180@mL,stop@mL
  6207   002FB8  C01F  F019         	movff	turn_180@mL+1,stop@mL+1
  6208   002FBC  C020  F01A         	movff	turn_180@mR,stop@mR
  6209   002FC0  C021  F01B         	movff	turn_180@mR+1,stop@mR+1
  6210   002FC4  EC27  F022         	call	_stop	;wreg free
  6211   002FC8                     
  6212                           ;MazeRobot.X/dc_motor.c: 299:     _delay((unsigned long)((100)*(64000000/4000.0)));
  6213   002FC8  0E09               	movlw	9
  6214   002FCA  6E23               	movwf	(??_turn_180+1)^0,c
  6215   002FCC  0E1E               	movlw	30
  6216   002FCE  6E22               	movwf	??_turn_180^0,c
  6217   002FD0  0EE4               	movlw	228
  6218   002FD2                     u6347:
  6219   002FD2  2EE8               	decfsz	wreg,f,c
  6220   002FD4  D7FE               	bra	u6347
  6221   002FD6  2E22               	decfsz	??_turn_180^0,f,c
  6222   002FD8  D7FC               	bra	u6347
  6223   002FDA  2E23               	decfsz	(??_turn_180+1)^0,f,c
  6224   002FDC  D7FA               	bra	u6347
  6225   002FDE  D000               	nop2	
  6226   002FE0                     
  6227                           ;MazeRobot.X/dc_motor.c: 301:     reverse(mL, mR);
  6228   002FE0  C01E  F018         	movff	turn_180@mL,reverse@mL
  6229   002FE4  C01F  F019         	movff	turn_180@mL+1,reverse@mL+1
  6230   002FE8  C020  F01A         	movff	turn_180@mR,reverse@mR
  6231   002FEC  C021  F01B         	movff	turn_180@mR+1,reverse@mR+1
  6232   002FF0  ECEE  F020         	call	_reverse	;wreg free
  6233                           
  6234                           ;MazeRobot.X/dc_motor.c: 302:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  6235   002FF4  0E39               	movlw	57
  6236   002FF6  6E23               	movwf	(??_turn_180+1)^0,c
  6237   002FF8  0ED2               	movlw	210
  6238   002FFA  6E22               	movwf	??_turn_180^0,c
  6239   002FFC  0E4C               	movlw	76
  6240   002FFE                     u6357:
  6241   002FFE  2EE8               	decfsz	wreg,f,c
  6242   003000  D7FE               	bra	u6357
  6243   003002  2E22               	decfsz	??_turn_180^0,f,c
  6244   003004  D7FC               	bra	u6357
  6245   003006  2E23               	decfsz	(??_turn_180+1)^0,f,c
  6246   003008  D7FA               	bra	u6357
  6247   00300A  D000               	nop2	
  6248   00300C                     
  6249                           ;MazeRobot.X/dc_motor.c: 304:     stop(mL, mR);
  6250   00300C  C01E  F018         	movff	turn_180@mL,stop@mL
  6251   003010  C01F  F019         	movff	turn_180@mL+1,stop@mL+1
  6252   003014  C020  F01A         	movff	turn_180@mR,stop@mR
  6253   003018  C021  F01B         	movff	turn_180@mR+1,stop@mR+1
  6254   00301C  EC27  F022         	call	_stop	;wreg free
  6255   003020                     
  6256                           ;MazeRobot.X/dc_motor.c: 306:     mL->direction = 1;
  6257   003020  EE20 F001          	lfsr	2,1
  6258   003024  501E               	movf	turn_180@mL^0,w,c
  6259   003026  26D9               	addwf	fsr2l,f,c
  6260   003028  501F               	movf	(turn_180@mL+1)^0,w,c
  6261   00302A  22DA               	addwfc	fsr2h,f,c
  6262   00302C  0E01               	movlw	1
  6263   00302E  6EDF               	movwf	indf2,c
  6264   003030                     
  6265                           ;MazeRobot.X/dc_motor.c: 307:     mR->direction = 0;
  6266   003030  EE20 F001          	lfsr	2,1
  6267   003034  5020               	movf	turn_180@mR^0,w,c
  6268   003036  26D9               	addwf	fsr2l,f,c
  6269   003038  5021               	movf	(turn_180@mR+1)^0,w,c
  6270   00303A  22DA               	addwfc	fsr2h,f,c
  6271   00303C  0E00               	movlw	0
  6272   00303E  6EDF               	movwf	indf2,c
  6273   003040                     
  6274                           ;MazeRobot.X/dc_motor.c: 309:     mL->brakemode = 1;
  6275   003040  EE20 F002          	lfsr	2,2
  6276   003044  501E               	movf	turn_180@mL^0,w,c
  6277   003046  26D9               	addwf	fsr2l,f,c
  6278   003048  501F               	movf	(turn_180@mL+1)^0,w,c
  6279   00304A  22DA               	addwfc	fsr2h,f,c
  6280   00304C  0E01               	movlw	1
  6281   00304E  6EDF               	movwf	indf2,c
  6282   003050                     
  6283                           ;MazeRobot.X/dc_motor.c: 310:     mL->brakemode = 1;
  6284   003050  EE20 F002          	lfsr	2,2
  6285   003054  501E               	movf	turn_180@mL^0,w,c
  6286   003056  26D9               	addwf	fsr2l,f,c
  6287   003058  501F               	movf	(turn_180@mL+1)^0,w,c
  6288   00305A  22DA               	addwfc	fsr2h,f,c
  6289   00305C  0E01               	movlw	1
  6290   00305E  6EDF               	movwf	indf2,c
  6291                           
  6292                           ;MazeRobot.X/dc_motor.c: 312:     while((mL->power < 80) || (mR->power < 80)){
  6293   003060  EF4A  F018         	goto	l3797
  6294   003064                     l3791:
  6295                           
  6296                           ;MazeRobot.X/dc_motor.c: 313:         mL->power += 10;
  6297   003064  C01E  FFD9         	movff	turn_180@mL,fsr2l
  6298   003068  C01F  FFDA         	movff	turn_180@mL+1,fsr2h
  6299   00306C  0E0A               	movlw	10
  6300   00306E  26DF               	addwf	indf2,f,c
  6301                           
  6302                           ;MazeRobot.X/dc_motor.c: 314:         mR->power += 10;
  6303   003070  C020  FFD9         	movff	turn_180@mR,fsr2l
  6304   003074  C021  FFDA         	movff	turn_180@mR+1,fsr2h
  6305   003078  0E0A               	movlw	10
  6306   00307A  26DF               	addwf	indf2,f,c
  6307   00307C                     
  6308                           ;MazeRobot.X/dc_motor.c: 315:         setMotorPWM(mL);
  6309   00307C  C01E  F012         	movff	turn_180@mL,setMotorPWM@m
  6310   003080  C01F  F013         	movff	turn_180@mL+1,setMotorPWM@m+1
  6311   003084  EC8B  F01A         	call	_setMotorPWM	;wreg free
  6312   003088                     
  6313                           ;MazeRobot.X/dc_motor.c: 316:         setMotorPWM(mR);
  6314   003088  C020  F012         	movff	turn_180@mR,setMotorPWM@m
  6315   00308C  C021  F013         	movff	turn_180@mR+1,setMotorPWM@m+1
  6316   003090  EC8B  F01A         	call	_setMotorPWM	;wreg free
  6317   003094                     l3797:
  6318                           
  6319                           ;MazeRobot.X/dc_motor.c: 312:     while((mL->power < 80) || (mR->power < 80)){
  6320   003094  C01E  FFD9         	movff	turn_180@mL,fsr2l
  6321   003098  C01F  FFDA         	movff	turn_180@mL+1,fsr2h
  6322   00309C  0E4F               	movlw	79
  6323   00309E  64DF               	cpfsgt	indf2,c
  6324   0030A0  EF54  F018         	goto	u3601
  6325   0030A4  EF56  F018         	goto	u3600
  6326   0030A8                     u3601:
  6327   0030A8  EF32  F018         	goto	l3791
  6328   0030AC                     u3600:
  6329   0030AC  C020  FFD9         	movff	turn_180@mR,fsr2l
  6330   0030B0  C021  FFDA         	movff	turn_180@mR+1,fsr2h
  6331   0030B4  0E4F               	movlw	79
  6332   0030B6  64DF               	cpfsgt	indf2,c
  6333   0030B8  EF60  F018         	goto	u3611
  6334   0030BC  EF62  F018         	goto	u3610
  6335   0030C0                     u3611:
  6336   0030C0  EF32  F018         	goto	l3791
  6337   0030C4                     u3610:
  6338   0030C4                     
  6339                           ;MazeRobot.X/dc_motor.c: 318:    _delay((unsigned long)((turning_time45)*(64000000/4000.
      +                          0)));
  6340   0030C4  0E10               	movlw	16
  6341   0030C6  6E23               	movwf	(??_turn_180+1)^0,c
  6342   0030C8  0E2E               	movlw	46
  6343   0030CA  6E22               	movwf	??_turn_180^0,c
  6344   0030CC  0EAA               	movlw	170
  6345   0030CE                     u6367:
  6346   0030CE  2EE8               	decfsz	wreg,f,c
  6347   0030D0  D7FE               	bra	u6367
  6348   0030D2  2E22               	decfsz	??_turn_180^0,f,c
  6349   0030D4  D7FC               	bra	u6367
  6350   0030D6  2E23               	decfsz	(??_turn_180+1)^0,f,c
  6351   0030D8  D7FA               	bra	u6367
  6352   0030DA  D000               	nop2	
  6353   0030DC                     
  6354                           ;MazeRobot.X/dc_motor.c: 320:    stop(mL, mR);
  6355   0030DC  C01E  F018         	movff	turn_180@mL,stop@mL
  6356   0030E0  C01F  F019         	movff	turn_180@mL+1,stop@mL+1
  6357   0030E4  C020  F01A         	movff	turn_180@mR,stop@mR
  6358   0030E8  C021  F01B         	movff	turn_180@mR+1,stop@mR+1
  6359   0030EC  EC27  F022         	call	_stop	;wreg free
  6360   0030F0                     
  6361                           ;MazeRobot.X/dc_motor.c: 321:     _delay((unsigned long)((100)*(64000000/4000.0)));
  6362   0030F0  0E09               	movlw	9
  6363   0030F2  6E23               	movwf	(??_turn_180+1)^0,c
  6364   0030F4  0E1E               	movlw	30
  6365   0030F6  6E22               	movwf	??_turn_180^0,c
  6366   0030F8  0EE4               	movlw	228
  6367   0030FA                     u6377:
  6368   0030FA  2EE8               	decfsz	wreg,f,c
  6369   0030FC  D7FE               	bra	u6377
  6370   0030FE  2E22               	decfsz	??_turn_180^0,f,c
  6371   003100  D7FC               	bra	u6377
  6372   003102  2E23               	decfsz	(??_turn_180+1)^0,f,c
  6373   003104  D7FA               	bra	u6377
  6374   003106  D000               	nop2	
  6375   003108                     
  6376                           ;MazeRobot.X/dc_motor.c: 323:     mL->direction = 1;
  6377   003108  EE20 F001          	lfsr	2,1
  6378   00310C  501E               	movf	turn_180@mL^0,w,c
  6379   00310E  26D9               	addwf	fsr2l,f,c
  6380   003110  501F               	movf	(turn_180@mL+1)^0,w,c
  6381   003112  22DA               	addwfc	fsr2h,f,c
  6382   003114  0E01               	movlw	1
  6383   003116  6EDF               	movwf	indf2,c
  6384   003118                     
  6385                           ;MazeRobot.X/dc_motor.c: 324:     mR->direction = 0;
  6386   003118  EE20 F001          	lfsr	2,1
  6387   00311C  5020               	movf	turn_180@mR^0,w,c
  6388   00311E  26D9               	addwf	fsr2l,f,c
  6389   003120  5021               	movf	(turn_180@mR+1)^0,w,c
  6390   003122  22DA               	addwfc	fsr2h,f,c
  6391   003124  0E00               	movlw	0
  6392   003126  6EDF               	movwf	indf2,c
  6393   003128                     
  6394                           ;MazeRobot.X/dc_motor.c: 326:     mL->brakemode = 1;
  6395   003128  EE20 F002          	lfsr	2,2
  6396   00312C  501E               	movf	turn_180@mL^0,w,c
  6397   00312E  26D9               	addwf	fsr2l,f,c
  6398   003130  501F               	movf	(turn_180@mL+1)^0,w,c
  6399   003132  22DA               	addwfc	fsr2h,f,c
  6400   003134  0E01               	movlw	1
  6401   003136  6EDF               	movwf	indf2,c
  6402   003138                     
  6403                           ;MazeRobot.X/dc_motor.c: 327:     mL->brakemode = 1;
  6404   003138  EE20 F002          	lfsr	2,2
  6405   00313C  501E               	movf	turn_180@mL^0,w,c
  6406   00313E  26D9               	addwf	fsr2l,f,c
  6407   003140  501F               	movf	(turn_180@mL+1)^0,w,c
  6408   003142  22DA               	addwfc	fsr2h,f,c
  6409   003144  0E01               	movlw	1
  6410   003146  6EDF               	movwf	indf2,c
  6411                           
  6412                           ;MazeRobot.X/dc_motor.c: 329:     while((mL->power < 80) || (mR->power < 80)){
  6413   003148  EFBE  F018         	goto	l3821
  6414   00314C                     l3815:
  6415                           
  6416                           ;MazeRobot.X/dc_motor.c: 330:         mL->power += 10;
  6417   00314C  C01E  FFD9         	movff	turn_180@mL,fsr2l
  6418   003150  C01F  FFDA         	movff	turn_180@mL+1,fsr2h
  6419   003154  0E0A               	movlw	10
  6420   003156  26DF               	addwf	indf2,f,c
  6421                           
  6422                           ;MazeRobot.X/dc_motor.c: 331:         mR->power += 10;
  6423   003158  C020  FFD9         	movff	turn_180@mR,fsr2l
  6424   00315C  C021  FFDA         	movff	turn_180@mR+1,fsr2h
  6425   003160  0E0A               	movlw	10
  6426   003162  26DF               	addwf	indf2,f,c
  6427   003164                     
  6428                           ;MazeRobot.X/dc_motor.c: 332:         setMotorPWM(mL);
  6429   003164  C01E  F012         	movff	turn_180@mL,setMotorPWM@m
  6430   003168  C01F  F013         	movff	turn_180@mL+1,setMotorPWM@m+1
  6431   00316C  EC8B  F01A         	call	_setMotorPWM	;wreg free
  6432   003170                     
  6433                           ;MazeRobot.X/dc_motor.c: 333:         setMotorPWM(mR);
  6434   003170  C020  F012         	movff	turn_180@mR,setMotorPWM@m
  6435   003174  C021  F013         	movff	turn_180@mR+1,setMotorPWM@m+1
  6436   003178  EC8B  F01A         	call	_setMotorPWM	;wreg free
  6437   00317C                     l3821:
  6438                           
  6439                           ;MazeRobot.X/dc_motor.c: 329:     while((mL->power < 80) || (mR->power < 80)){
  6440   00317C  C01E  FFD9         	movff	turn_180@mL,fsr2l
  6441   003180  C01F  FFDA         	movff	turn_180@mL+1,fsr2h
  6442   003184  0E4F               	movlw	79
  6443   003186  64DF               	cpfsgt	indf2,c
  6444   003188  EFC8  F018         	goto	u3621
  6445   00318C  EFCA  F018         	goto	u3620
  6446   003190                     u3621:
  6447   003190  EFA6  F018         	goto	l3815
  6448   003194                     u3620:
  6449   003194  C020  FFD9         	movff	turn_180@mR,fsr2l
  6450   003198  C021  FFDA         	movff	turn_180@mR+1,fsr2h
  6451   00319C  0E4F               	movlw	79
  6452   00319E  64DF               	cpfsgt	indf2,c
  6453   0031A0  EFD4  F018         	goto	u3631
  6454   0031A4  EFD6  F018         	goto	u3630
  6455   0031A8                     u3631:
  6456   0031A8  EFA6  F018         	goto	l3815
  6457   0031AC                     u3630:
  6458   0031AC                     
  6459                           ;MazeRobot.X/dc_motor.c: 335:    _delay((unsigned long)((turning_time45)*(64000000/4000.
      +                          0)));
  6460   0031AC  0E10               	movlw	16
  6461   0031AE  6E23               	movwf	(??_turn_180+1)^0,c
  6462   0031B0  0E2E               	movlw	46
  6463   0031B2  6E22               	movwf	??_turn_180^0,c
  6464   0031B4  0EAA               	movlw	170
  6465   0031B6                     u6387:
  6466   0031B6  2EE8               	decfsz	wreg,f,c
  6467   0031B8  D7FE               	bra	u6387
  6468   0031BA  2E22               	decfsz	??_turn_180^0,f,c
  6469   0031BC  D7FC               	bra	u6387
  6470   0031BE  2E23               	decfsz	(??_turn_180+1)^0,f,c
  6471   0031C0  D7FA               	bra	u6387
  6472   0031C2  D000               	nop2	
  6473   0031C4                     
  6474                           ;MazeRobot.X/dc_motor.c: 337:     stop(mL, mR);
  6475   0031C4  C01E  F018         	movff	turn_180@mL,stop@mL
  6476   0031C8  C01F  F019         	movff	turn_180@mL+1,stop@mL+1
  6477   0031CC  C020  F01A         	movff	turn_180@mR,stop@mR
  6478   0031D0  C021  F01B         	movff	turn_180@mR+1,stop@mR+1
  6479   0031D4  EC27  F022         	call	_stop	;wreg free
  6480   0031D8  0012               	return		;funcret
  6481   0031DA                     __end_of_turn_180:
  6482                           	callstack 0
  6483                           
  6484 ;; *************** function _turnRight_135 *****************
  6485 ;; Defined at:
  6486 ;;		line 341 in file "MazeRobot.X/dc_motor.c"
  6487 ;; Parameters:    Size  Location     Type
  6488 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  6489 ;;		 -> main@motorLeft(9), 
  6490 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  6491 ;;		 -> main@motorRight(9), 
  6492 ;; Auto vars:     Size  Location     Type
  6493 ;;		None
  6494 ;; Return value:  Size  Location     Type
  6495 ;;                  1    wreg      void 
  6496 ;; Registers used:
  6497 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6498 ;; Tracked objects:
  6499 ;;		On entry : 0/0
  6500 ;;		On exit  : 0/0
  6501 ;;		Unchanged: 0/0
  6502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6503 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6505 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6506 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6507 ;;Total ram usage:        6 bytes
  6508 ;; Hardware stack levels used: 1
  6509 ;; Hardware stack levels required when called: 5
  6510 ;; This function calls:
  6511 ;;		_reverse
  6512 ;;		_setMotorPWM
  6513 ;;		_stop
  6514 ;; This function is called by:
  6515 ;;		_colorDetect
  6516 ;;		_return_home_turns
  6517 ;; This function uses a non-reentrant model
  6518 ;;
  6519                           
  6520                           	psect	text26
  6521   003944                     __ptext26:
  6522                           	callstack 0
  6523   003944                     _turnRight_135:
  6524                           	callstack 24
  6525   003944                     
  6526                           ;MazeRobot.X/dc_motor.c: 341: void turnRight_135(DC_motor *mL, DC_motor *mR);MazeRobot.X
      +                          /dc_motor.c: 342: {;MazeRobot.X/dc_motor.c: 343:     stop(mL, mR);
  6527   003944  C01E  F018         	movff	turnRight_135@mL,stop@mL
  6528   003948  C01F  F019         	movff	turnRight_135@mL+1,stop@mL+1
  6529   00394C  C020  F01A         	movff	turnRight_135@mR,stop@mR
  6530   003950  C021  F01B         	movff	turnRight_135@mR+1,stop@mR+1
  6531   003954  EC27  F022         	call	_stop	;wreg free
  6532   003958                     
  6533                           ;MazeRobot.X/dc_motor.c: 344:     _delay((unsigned long)((100)*(64000000/4000.0)));
  6534   003958  0E09               	movlw	9
  6535   00395A  6E23               	movwf	(??_turnRight_135+1)^0,c
  6536   00395C  0E1E               	movlw	30
  6537   00395E  6E22               	movwf	??_turnRight_135^0,c
  6538   003960  0EE4               	movlw	228
  6539   003962                     u6397:
  6540   003962  2EE8               	decfsz	wreg,f,c
  6541   003964  D7FE               	bra	u6397
  6542   003966  2E22               	decfsz	??_turnRight_135^0,f,c
  6543   003968  D7FC               	bra	u6397
  6544   00396A  2E23               	decfsz	(??_turnRight_135+1)^0,f,c
  6545   00396C  D7FA               	bra	u6397
  6546   00396E  D000               	nop2	
  6547   003970                     
  6548                           ;MazeRobot.X/dc_motor.c: 346:     reverse(mL, mR);
  6549   003970  C01E  F018         	movff	turnRight_135@mL,reverse@mL
  6550   003974  C01F  F019         	movff	turnRight_135@mL+1,reverse@mL+1
  6551   003978  C020  F01A         	movff	turnRight_135@mR,reverse@mR
  6552   00397C  C021  F01B         	movff	turnRight_135@mR+1,reverse@mR+1
  6553   003980  ECEE  F020         	call	_reverse	;wreg free
  6554                           
  6555                           ;MazeRobot.X/dc_motor.c: 347:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  6556   003984  0E39               	movlw	57
  6557   003986  6E23               	movwf	(??_turnRight_135+1)^0,c
  6558   003988  0ED2               	movlw	210
  6559   00398A  6E22               	movwf	??_turnRight_135^0,c
  6560   00398C  0E4C               	movlw	76
  6561   00398E                     u6407:
  6562   00398E  2EE8               	decfsz	wreg,f,c
  6563   003990  D7FE               	bra	u6407
  6564   003992  2E22               	decfsz	??_turnRight_135^0,f,c
  6565   003994  D7FC               	bra	u6407
  6566   003996  2E23               	decfsz	(??_turnRight_135+1)^0,f,c
  6567   003998  D7FA               	bra	u6407
  6568   00399A  D000               	nop2	
  6569   00399C                     
  6570                           ;MazeRobot.X/dc_motor.c: 349:     stop(mL, mR);
  6571   00399C  C01E  F018         	movff	turnRight_135@mL,stop@mL
  6572   0039A0  C01F  F019         	movff	turnRight_135@mL+1,stop@mL+1
  6573   0039A4  C020  F01A         	movff	turnRight_135@mR,stop@mR
  6574   0039A8  C021  F01B         	movff	turnRight_135@mR+1,stop@mR+1
  6575   0039AC  EC27  F022         	call	_stop	;wreg free
  6576   0039B0                     
  6577                           ;MazeRobot.X/dc_motor.c: 351:     mL->direction = 1;
  6578   0039B0  EE20 F001          	lfsr	2,1
  6579   0039B4  501E               	movf	turnRight_135@mL^0,w,c
  6580   0039B6  26D9               	addwf	fsr2l,f,c
  6581   0039B8  501F               	movf	(turnRight_135@mL+1)^0,w,c
  6582   0039BA  22DA               	addwfc	fsr2h,f,c
  6583   0039BC  0E01               	movlw	1
  6584   0039BE  6EDF               	movwf	indf2,c
  6585   0039C0                     
  6586                           ;MazeRobot.X/dc_motor.c: 352:     mR->direction = 0;
  6587   0039C0  EE20 F001          	lfsr	2,1
  6588   0039C4  5020               	movf	turnRight_135@mR^0,w,c
  6589   0039C6  26D9               	addwf	fsr2l,f,c
  6590   0039C8  5021               	movf	(turnRight_135@mR+1)^0,w,c
  6591   0039CA  22DA               	addwfc	fsr2h,f,c
  6592   0039CC  0E00               	movlw	0
  6593   0039CE  6EDF               	movwf	indf2,c
  6594   0039D0                     
  6595                           ;MazeRobot.X/dc_motor.c: 354:     mL->brakemode = 1;
  6596   0039D0  EE20 F002          	lfsr	2,2
  6597   0039D4  501E               	movf	turnRight_135@mL^0,w,c
  6598   0039D6  26D9               	addwf	fsr2l,f,c
  6599   0039D8  501F               	movf	(turnRight_135@mL+1)^0,w,c
  6600   0039DA  22DA               	addwfc	fsr2h,f,c
  6601   0039DC  0E01               	movlw	1
  6602   0039DE  6EDF               	movwf	indf2,c
  6603   0039E0                     
  6604                           ;MazeRobot.X/dc_motor.c: 355:     mL->brakemode = 1;
  6605   0039E0  EE20 F002          	lfsr	2,2
  6606   0039E4  501E               	movf	turnRight_135@mL^0,w,c
  6607   0039E6  26D9               	addwf	fsr2l,f,c
  6608   0039E8  501F               	movf	(turnRight_135@mL+1)^0,w,c
  6609   0039EA  22DA               	addwfc	fsr2h,f,c
  6610   0039EC  0E01               	movlw	1
  6611   0039EE  6EDF               	movwf	indf2,c
  6612                           
  6613                           ;MazeRobot.X/dc_motor.c: 357:     while((mL->power < 80) || (mR->power < 80)){
  6614   0039F0  EF12  F01D         	goto	l3871
  6615   0039F4                     l3865:
  6616                           
  6617                           ;MazeRobot.X/dc_motor.c: 358:         mL->power += 10;
  6618   0039F4  C01E  FFD9         	movff	turnRight_135@mL,fsr2l
  6619   0039F8  C01F  FFDA         	movff	turnRight_135@mL+1,fsr2h
  6620   0039FC  0E0A               	movlw	10
  6621   0039FE  26DF               	addwf	indf2,f,c
  6622                           
  6623                           ;MazeRobot.X/dc_motor.c: 359:         mR->power += 10;
  6624   003A00  C020  FFD9         	movff	turnRight_135@mR,fsr2l
  6625   003A04  C021  FFDA         	movff	turnRight_135@mR+1,fsr2h
  6626   003A08  0E0A               	movlw	10
  6627   003A0A  26DF               	addwf	indf2,f,c
  6628   003A0C                     
  6629                           ;MazeRobot.X/dc_motor.c: 360:         setMotorPWM(mL);
  6630   003A0C  C01E  F012         	movff	turnRight_135@mL,setMotorPWM@m
  6631   003A10  C01F  F013         	movff	turnRight_135@mL+1,setMotorPWM@m+1
  6632   003A14  EC8B  F01A         	call	_setMotorPWM	;wreg free
  6633   003A18                     
  6634                           ;MazeRobot.X/dc_motor.c: 361:         setMotorPWM(mR);
  6635   003A18  C020  F012         	movff	turnRight_135@mR,setMotorPWM@m
  6636   003A1C  C021  F013         	movff	turnRight_135@mR+1,setMotorPWM@m+1
  6637   003A20  EC8B  F01A         	call	_setMotorPWM	;wreg free
  6638   003A24                     l3871:
  6639                           
  6640                           ;MazeRobot.X/dc_motor.c: 357:     while((mL->power < 80) || (mR->power < 80)){
  6641   003A24  C01E  FFD9         	movff	turnRight_135@mL,fsr2l
  6642   003A28  C01F  FFDA         	movff	turnRight_135@mL+1,fsr2h
  6643   003A2C  0E4F               	movlw	79
  6644   003A2E  64DF               	cpfsgt	indf2,c
  6645   003A30  EF1C  F01D         	goto	u3641
  6646   003A34  EF1E  F01D         	goto	u3640
  6647   003A38                     u3641:
  6648   003A38  EFFA  F01C         	goto	l3865
  6649   003A3C                     u3640:
  6650   003A3C  C020  FFD9         	movff	turnRight_135@mR,fsr2l
  6651   003A40  C021  FFDA         	movff	turnRight_135@mR+1,fsr2h
  6652   003A44  0E4F               	movlw	79
  6653   003A46  64DF               	cpfsgt	indf2,c
  6654   003A48  EF28  F01D         	goto	u3651
  6655   003A4C  EF2A  F01D         	goto	u3650
  6656   003A50                     u3651:
  6657   003A50  EFFA  F01C         	goto	l3865
  6658   003A54                     u3650:
  6659   003A54                     
  6660                           ;MazeRobot.X/dc_motor.c: 363:    _delay((unsigned long)((1.5*turning_time45)*(64000000/4
      +                          000.0)));
  6661   003A54  0E17               	movlw	23
  6662   003A56  6E23               	movwf	(??_turnRight_135+1)^0,c
  6663   003A58  0EC5               	movlw	197
  6664   003A5A  6E22               	movwf	??_turnRight_135^0,c
  6665   003A5C  0E81               	movlw	129
  6666   003A5E                     u6417:
  6667   003A5E  2EE8               	decfsz	wreg,f,c
  6668   003A60  D7FE               	bra	u6417
  6669   003A62  2E22               	decfsz	??_turnRight_135^0,f,c
  6670   003A64  D7FC               	bra	u6417
  6671   003A66  2E23               	decfsz	(??_turnRight_135+1)^0,f,c
  6672   003A68  D7FA               	bra	u6417
  6673   003A6A  F000               	nop	
  6674   003A6C                     
  6675                           ;MazeRobot.X/dc_motor.c: 365:     stop(mL, mR);
  6676   003A6C  C01E  F018         	movff	turnRight_135@mL,stop@mL
  6677   003A70  C01F  F019         	movff	turnRight_135@mL+1,stop@mL+1
  6678   003A74  C020  F01A         	movff	turnRight_135@mR,stop@mR
  6679   003A78  C021  F01B         	movff	turnRight_135@mR+1,stop@mR+1
  6680   003A7C  EC27  F022         	call	_stop	;wreg free
  6681   003A80  0012               	return		;funcret
  6682   003A82                     __end_of_turnRight_135:
  6683                           	callstack 0
  6684                           
  6685 ;; *************** function _turnLeft_135 *****************
  6686 ;; Defined at:
  6687 ;;		line 370 in file "MazeRobot.X/dc_motor.c"
  6688 ;; Parameters:    Size  Location     Type
  6689 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  6690 ;;		 -> main@motorLeft(9), 
  6691 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  6692 ;;		 -> main@motorRight(9), 
  6693 ;; Auto vars:     Size  Location     Type
  6694 ;;		None
  6695 ;; Return value:  Size  Location     Type
  6696 ;;                  1    wreg      void 
  6697 ;; Registers used:
  6698 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6699 ;; Tracked objects:
  6700 ;;		On entry : 0/0
  6701 ;;		On exit  : 0/0
  6702 ;;		Unchanged: 0/0
  6703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6704 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6706 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6707 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6708 ;;Total ram usage:        6 bytes
  6709 ;; Hardware stack levels used: 1
  6710 ;; Hardware stack levels required when called: 5
  6711 ;; This function calls:
  6712 ;;		_reverse
  6713 ;;		_setMotorPWM
  6714 ;;		_stop
  6715 ;; This function is called by:
  6716 ;;		_colorDetect
  6717 ;;		_return_home_turns
  6718 ;; This function uses a non-reentrant model
  6719 ;;
  6720                           
  6721                           	psect	text27
  6722   003CFE                     __ptext27:
  6723                           	callstack 0
  6724   003CFE                     _turnLeft_135:
  6725                           	callstack 24
  6726   003CFE                     
  6727                           ;MazeRobot.X/dc_motor.c: 370: void turnLeft_135(DC_motor *mL, DC_motor *mR);MazeRobot.X/
      +                          dc_motor.c: 371: {;MazeRobot.X/dc_motor.c: 373:     stop(mL, mR);
  6728   003CFE  C01E  F018         	movff	turnLeft_135@mL,stop@mL
  6729   003D02  C01F  F019         	movff	turnLeft_135@mL+1,stop@mL+1
  6730   003D06  C020  F01A         	movff	turnLeft_135@mR,stop@mR
  6731   003D0A  C021  F01B         	movff	turnLeft_135@mR+1,stop@mR+1
  6732   003D0E  EC27  F022         	call	_stop	;wreg free
  6733   003D12                     
  6734                           ;MazeRobot.X/dc_motor.c: 374:     _delay((unsigned long)((100)*(64000000/4000.0)));
  6735   003D12  0E09               	movlw	9
  6736   003D14  6E23               	movwf	(??_turnLeft_135+1)^0,c
  6737   003D16  0E1E               	movlw	30
  6738   003D18  6E22               	movwf	??_turnLeft_135^0,c
  6739   003D1A  0EE4               	movlw	228
  6740   003D1C                     u6427:
  6741   003D1C  2EE8               	decfsz	wreg,f,c
  6742   003D1E  D7FE               	bra	u6427
  6743   003D20  2E22               	decfsz	??_turnLeft_135^0,f,c
  6744   003D22  D7FC               	bra	u6427
  6745   003D24  2E23               	decfsz	(??_turnLeft_135+1)^0,f,c
  6746   003D26  D7FA               	bra	u6427
  6747   003D28  D000               	nop2	
  6748   003D2A                     
  6749                           ;MazeRobot.X/dc_motor.c: 376:     reverse(mL, mR);
  6750   003D2A  C01E  F018         	movff	turnLeft_135@mL,reverse@mL
  6751   003D2E  C01F  F019         	movff	turnLeft_135@mL+1,reverse@mL+1
  6752   003D32  C020  F01A         	movff	turnLeft_135@mR,reverse@mR
  6753   003D36  C021  F01B         	movff	turnLeft_135@mR+1,reverse@mR+1
  6754   003D3A  ECEE  F020         	call	_reverse	;wreg free
  6755                           
  6756                           ;MazeRobot.X/dc_motor.c: 377:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  6757   003D3E  0E39               	movlw	57
  6758   003D40  6E23               	movwf	(??_turnLeft_135+1)^0,c
  6759   003D42  0ED2               	movlw	210
  6760   003D44  6E22               	movwf	??_turnLeft_135^0,c
  6761   003D46  0E4C               	movlw	76
  6762   003D48                     u6437:
  6763   003D48  2EE8               	decfsz	wreg,f,c
  6764   003D4A  D7FE               	bra	u6437
  6765   003D4C  2E22               	decfsz	??_turnLeft_135^0,f,c
  6766   003D4E  D7FC               	bra	u6437
  6767   003D50  2E23               	decfsz	(??_turnLeft_135+1)^0,f,c
  6768   003D52  D7FA               	bra	u6437
  6769   003D54  D000               	nop2	
  6770   003D56                     
  6771                           ;MazeRobot.X/dc_motor.c: 379:     stop(mL, mR);
  6772   003D56  C01E  F018         	movff	turnLeft_135@mL,stop@mL
  6773   003D5A  C01F  F019         	movff	turnLeft_135@mL+1,stop@mL+1
  6774   003D5E  C020  F01A         	movff	turnLeft_135@mR,stop@mR
  6775   003D62  C021  F01B         	movff	turnLeft_135@mR+1,stop@mR+1
  6776   003D66  EC27  F022         	call	_stop	;wreg free
  6777   003D6A                     
  6778                           ;MazeRobot.X/dc_motor.c: 381:     mL->direction = 0;
  6779   003D6A  EE20 F001          	lfsr	2,1
  6780   003D6E  501E               	movf	turnLeft_135@mL^0,w,c
  6781   003D70  26D9               	addwf	fsr2l,f,c
  6782   003D72  501F               	movf	(turnLeft_135@mL+1)^0,w,c
  6783   003D74  22DA               	addwfc	fsr2h,f,c
  6784   003D76  0E00               	movlw	0
  6785   003D78  6EDF               	movwf	indf2,c
  6786   003D7A                     
  6787                           ;MazeRobot.X/dc_motor.c: 382:     mR->direction = 1;
  6788   003D7A  EE20 F001          	lfsr	2,1
  6789   003D7E  5020               	movf	turnLeft_135@mR^0,w,c
  6790   003D80  26D9               	addwf	fsr2l,f,c
  6791   003D82  5021               	movf	(turnLeft_135@mR+1)^0,w,c
  6792   003D84  22DA               	addwfc	fsr2h,f,c
  6793   003D86  0E01               	movlw	1
  6794   003D88  6EDF               	movwf	indf2,c
  6795   003D8A                     
  6796                           ;MazeRobot.X/dc_motor.c: 384:     mL->brakemode = 1;
  6797   003D8A  EE20 F002          	lfsr	2,2
  6798   003D8E  501E               	movf	turnLeft_135@mL^0,w,c
  6799   003D90  26D9               	addwf	fsr2l,f,c
  6800   003D92  501F               	movf	(turnLeft_135@mL+1)^0,w,c
  6801   003D94  22DA               	addwfc	fsr2h,f,c
  6802   003D96  0E01               	movlw	1
  6803   003D98  6EDF               	movwf	indf2,c
  6804   003D9A                     
  6805                           ;MazeRobot.X/dc_motor.c: 385:     mL->brakemode = 1;
  6806   003D9A  EE20 F002          	lfsr	2,2
  6807   003D9E  501E               	movf	turnLeft_135@mL^0,w,c
  6808   003DA0  26D9               	addwf	fsr2l,f,c
  6809   003DA2  501F               	movf	(turnLeft_135@mL+1)^0,w,c
  6810   003DA4  22DA               	addwfc	fsr2h,f,c
  6811   003DA6  0E01               	movlw	1
  6812   003DA8  6EDF               	movwf	indf2,c
  6813                           
  6814                           ;MazeRobot.X/dc_motor.c: 387:     while((mL->power < 80) || (mR->power < 80)){
  6815   003DAA  EFEF  F01E         	goto	l3901
  6816   003DAE                     l3895:
  6817                           
  6818                           ;MazeRobot.X/dc_motor.c: 388:         mL->power += 10;
  6819   003DAE  C01E  FFD9         	movff	turnLeft_135@mL,fsr2l
  6820   003DB2  C01F  FFDA         	movff	turnLeft_135@mL+1,fsr2h
  6821   003DB6  0E0A               	movlw	10
  6822   003DB8  26DF               	addwf	indf2,f,c
  6823                           
  6824                           ;MazeRobot.X/dc_motor.c: 389:         mR->power += 10;
  6825   003DBA  C020  FFD9         	movff	turnLeft_135@mR,fsr2l
  6826   003DBE  C021  FFDA         	movff	turnLeft_135@mR+1,fsr2h
  6827   003DC2  0E0A               	movlw	10
  6828   003DC4  26DF               	addwf	indf2,f,c
  6829   003DC6                     
  6830                           ;MazeRobot.X/dc_motor.c: 390:         setMotorPWM(mL);
  6831   003DC6  C01E  F012         	movff	turnLeft_135@mL,setMotorPWM@m
  6832   003DCA  C01F  F013         	movff	turnLeft_135@mL+1,setMotorPWM@m+1
  6833   003DCE  EC8B  F01A         	call	_setMotorPWM	;wreg free
  6834   003DD2                     
  6835                           ;MazeRobot.X/dc_motor.c: 391:         setMotorPWM(mR);
  6836   003DD2  C020  F012         	movff	turnLeft_135@mR,setMotorPWM@m
  6837   003DD6  C021  F013         	movff	turnLeft_135@mR+1,setMotorPWM@m+1
  6838   003DDA  EC8B  F01A         	call	_setMotorPWM	;wreg free
  6839   003DDE                     l3901:
  6840                           
  6841                           ;MazeRobot.X/dc_motor.c: 387:     while((mL->power < 80) || (mR->power < 80)){
  6842   003DDE  C01E  FFD9         	movff	turnLeft_135@mL,fsr2l
  6843   003DE2  C01F  FFDA         	movff	turnLeft_135@mL+1,fsr2h
  6844   003DE6  0E4F               	movlw	79
  6845   003DE8  64DF               	cpfsgt	indf2,c
  6846   003DEA  EFF9  F01E         	goto	u3661
  6847   003DEE  EFFB  F01E         	goto	u3660
  6848   003DF2                     u3661:
  6849   003DF2  EFD7  F01E         	goto	l3895
  6850   003DF6                     u3660:
  6851   003DF6  C020  FFD9         	movff	turnLeft_135@mR,fsr2l
  6852   003DFA  C021  FFDA         	movff	turnLeft_135@mR+1,fsr2h
  6853   003DFE  0E4F               	movlw	79
  6854   003E00  64DF               	cpfsgt	indf2,c
  6855   003E02  EF05  F01F         	goto	u3671
  6856   003E06  EF07  F01F         	goto	u3670
  6857   003E0A                     u3671:
  6858   003E0A  EFD7  F01E         	goto	l3895
  6859   003E0E                     u3670:
  6860   003E0E                     
  6861                           ;MazeRobot.X/dc_motor.c: 393:    _delay((unsigned long)((3*turning_time45)*(64000000/400
      +                          0.0)));
  6862   003E0E  0E2E               	movlw	46
  6863   003E10  6E23               	movwf	(??_turnLeft_135+1)^0,c
  6864   003E12  0E8A               	movlw	138
  6865   003E14  6E22               	movwf	??_turnLeft_135^0,c
  6866   003E16  0E04               	movlw	4
  6867   003E18                     u6447:
  6868   003E18  2EE8               	decfsz	wreg,f,c
  6869   003E1A  D7FE               	bra	u6447
  6870   003E1C  2E22               	decfsz	??_turnLeft_135^0,f,c
  6871   003E1E  D7FC               	bra	u6447
  6872   003E20  2E23               	decfsz	(??_turnLeft_135+1)^0,f,c
  6873   003E22  D7FA               	bra	u6447
  6874   003E24                     
  6875                           ;MazeRobot.X/dc_motor.c: 394:     stop(mL, mR);
  6876   003E24  C01E  F018         	movff	turnLeft_135@mL,stop@mL
  6877   003E28  C01F  F019         	movff	turnLeft_135@mL+1,stop@mL+1
  6878   003E2C  C020  F01A         	movff	turnLeft_135@mR,stop@mR
  6879   003E30  C021  F01B         	movff	turnLeft_135@mR+1,stop@mR+1
  6880   003E34  EC27  F022         	call	_stop	;wreg free
  6881   003E38  0012               	return		;funcret
  6882   003E3A                     __end_of_turnLeft_135:
  6883                           	callstack 0
  6884                           
  6885 ;; *************** function _reverseSquareRight *****************
  6886 ;; Defined at:
  6887 ;;		line 398 in file "MazeRobot.X/dc_motor.c"
  6888 ;; Parameters:    Size  Location     Type
  6889 ;;  mL              2   35[COMRAM] PTR struct DC_motor
  6890 ;;		 -> main@motorLeft(9), 
  6891 ;;  mR              2   37[COMRAM] PTR struct DC_motor
  6892 ;;		 -> main@motorRight(9), 
  6893 ;; Auto vars:     Size  Location     Type
  6894 ;;		None
  6895 ;; Return value:  Size  Location     Type
  6896 ;;                  1    wreg      void 
  6897 ;; Registers used:
  6898 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6899 ;; Tracked objects:
  6900 ;;		On entry : 0/0
  6901 ;;		On exit  : 0/0
  6902 ;;		Unchanged: 0/0
  6903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6904 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6906 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6907 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6908 ;;Total ram usage:        6 bytes
  6909 ;; Hardware stack levels used: 1
  6910 ;; Hardware stack levels required when called: 6
  6911 ;; This function calls:
  6912 ;;		_reverse
  6913 ;;		_stop
  6914 ;;		_turnRight_90
  6915 ;; This function is called by:
  6916 ;;		_colorDetect
  6917 ;; This function uses a non-reentrant model
  6918 ;;
  6919                           
  6920                           	psect	text28
  6921   0044FC                     __ptext28:
  6922                           	callstack 0
  6923   0044FC                     _reverseSquareRight:
  6924                           	callstack 23
  6925   0044FC                     
  6926                           ;MazeRobot.X/dc_motor.c: 398: void reverseSquareRight(DC_motor *mL, DC_motor *mR);MazeRo
      +                          bot.X/dc_motor.c: 399: {;MazeRobot.X/dc_motor.c: 401:     reverse(mL, mR);
  6927   0044FC  C024  F018         	movff	reverseSquareRight@mL,reverse@mL
  6928   004500  C025  F019         	movff	reverseSquareRight@mL+1,reverse@mL+1
  6929   004504  C026  F01A         	movff	reverseSquareRight@mR,reverse@mR
  6930   004508  C027  F01B         	movff	reverseSquareRight@mR+1,reverse@mR+1
  6931   00450C  ECEE  F020         	call	_reverse	;wreg free
  6932   004510                     
  6933                           ;MazeRobot.X/dc_motor.c: 402:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  6934   004510  0E39               	movlw	57
  6935   004512  6E29               	movwf	(??_reverseSquareRight+1)^0,c
  6936   004514  0ED2               	movlw	210
  6937   004516  6E28               	movwf	??_reverseSquareRight^0,c
  6938   004518  0E4C               	movlw	76
  6939   00451A                     u6457:
  6940   00451A  2EE8               	decfsz	wreg,f,c
  6941   00451C  D7FE               	bra	u6457
  6942   00451E  2E28               	decfsz	??_reverseSquareRight^0,f,c
  6943   004520  D7FC               	bra	u6457
  6944   004522  2E29               	decfsz	(??_reverseSquareRight+1)^0,f,c
  6945   004524  D7FA               	bra	u6457
  6946   004526  D000               	nop2	
  6947   004528                     
  6948                           ;MazeRobot.X/dc_motor.c: 404:     stop(mL, mR);
  6949   004528  C024  F018         	movff	reverseSquareRight@mL,stop@mL
  6950   00452C  C025  F019         	movff	reverseSquareRight@mL+1,stop@mL+1
  6951   004530  C026  F01A         	movff	reverseSquareRight@mR,stop@mR
  6952   004534  C027  F01B         	movff	reverseSquareRight@mR+1,stop@mR+1
  6953   004538  EC27  F022         	call	_stop	;wreg free
  6954   00453C                     
  6955                           ;MazeRobot.X/dc_motor.c: 406:     reverse(mL, mR);
  6956   00453C  C024  F018         	movff	reverseSquareRight@mL,reverse@mL
  6957   004540  C025  F019         	movff	reverseSquareRight@mL+1,reverse@mL+1
  6958   004544  C026  F01A         	movff	reverseSquareRight@mR,reverse@mR
  6959   004548  C027  F01B         	movff	reverseSquareRight@mR+1,reverse@mR+1
  6960   00454C  ECEE  F020         	call	_reverse	;wreg free
  6961   004550                     
  6962                           ;MazeRobot.X/dc_motor.c: 407:     _delay((unsigned long)((2*reverse_time)*(64000000/4000
      +                          .0)));
  6963   004550  0E72               	movlw	114
  6964   004552  6E29               	movwf	(??_reverseSquareRight+1)^0,c
  6965   004554  0EA3               	movlw	163
  6966   004556  6E28               	movwf	??_reverseSquareRight^0,c
  6967   004558  0E9B               	movlw	155
  6968   00455A                     u6467:
  6969   00455A  2EE8               	decfsz	wreg,f,c
  6970   00455C  D7FE               	bra	u6467
  6971   00455E  2E28               	decfsz	??_reverseSquareRight^0,f,c
  6972   004560  D7FC               	bra	u6467
  6973   004562  2E29               	decfsz	(??_reverseSquareRight+1)^0,f,c
  6974   004564  D7FA               	bra	u6467
  6975   004566  F000               	nop	
  6976                           
  6977                           ;MazeRobot.X/dc_motor.c: 409:     turnRight_90(mL,mR);
  6978   004568  C024  F01E         	movff	reverseSquareRight@mL,turnRight_90@mL
  6979   00456C  C025  F01F         	movff	reverseSquareRight@mL+1,turnRight_90@mL+1
  6980   004570  C026  F020         	movff	reverseSquareRight@mR,turnRight_90@mR
  6981   004574  C027  F021         	movff	reverseSquareRight@mR+1,turnRight_90@mR+1
  6982   004578  EC41  F01D         	call	_turnRight_90	;wreg free
  6983                           
  6984                           ;MazeRobot.X/dc_motor.c: 411:     stop(mL, mR);
  6985   00457C  C024  F018         	movff	reverseSquareRight@mL,stop@mL
  6986   004580  C025  F019         	movff	reverseSquareRight@mL+1,stop@mL+1
  6987   004584  C026  F01A         	movff	reverseSquareRight@mR,stop@mR
  6988   004588  C027  F01B         	movff	reverseSquareRight@mR+1,stop@mR+1
  6989   00458C  EC27  F022         	call	_stop	;wreg free
  6990   004590  0012               	return		;funcret
  6991   004592                     __end_of_reverseSquareRight:
  6992                           	callstack 0
  6993                           
  6994 ;; *************** function _turnRight_90 *****************
  6995 ;; Defined at:
  6996 ;;		line 267 in file "MazeRobot.X/dc_motor.c"
  6997 ;; Parameters:    Size  Location     Type
  6998 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  6999 ;;		 -> main@motorLeft(9), 
  7000 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  7001 ;;		 -> main@motorRight(9), 
  7002 ;; Auto vars:     Size  Location     Type
  7003 ;;		None
  7004 ;; Return value:  Size  Location     Type
  7005 ;;                  1    wreg      void 
  7006 ;; Registers used:
  7007 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7008 ;; Tracked objects:
  7009 ;;		On entry : 0/0
  7010 ;;		On exit  : 0/0
  7011 ;;		Unchanged: 0/0
  7012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7013 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7014 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7015 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7016 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7017 ;;Total ram usage:        6 bytes
  7018 ;; Hardware stack levels used: 1
  7019 ;; Hardware stack levels required when called: 5
  7020 ;; This function calls:
  7021 ;;		_reverse
  7022 ;;		_setMotorPWM
  7023 ;;		_stop
  7024 ;; This function is called by:
  7025 ;;		_colorDetect
  7026 ;;		_return_home_turns
  7027 ;;		_reverseSquareRight
  7028 ;; This function uses a non-reentrant model
  7029 ;;
  7030                           
  7031                           	psect	text29
  7032   003A82                     __ptext29:
  7033                           	callstack 0
  7034   003A82                     _turnRight_90:
  7035                           	callstack 24
  7036   003A82                     
  7037                           ;MazeRobot.X/dc_motor.c: 267: void turnRight_90(DC_motor *mL, DC_motor *mR);MazeRobot.X/
      +                          dc_motor.c: 268: {;MazeRobot.X/dc_motor.c: 269:     stop(mL, mR);
  7038   003A82  C01E  F018         	movff	turnRight_90@mL,stop@mL
  7039   003A86  C01F  F019         	movff	turnRight_90@mL+1,stop@mL+1
  7040   003A8A  C020  F01A         	movff	turnRight_90@mR,stop@mR
  7041   003A8E  C021  F01B         	movff	turnRight_90@mR+1,stop@mR+1
  7042   003A92  EC27  F022         	call	_stop	;wreg free
  7043   003A96                     
  7044                           ;MazeRobot.X/dc_motor.c: 270:     _delay((unsigned long)((100)*(64000000/4000.0)));
  7045   003A96  0E09               	movlw	9
  7046   003A98  6E23               	movwf	(??_turnRight_90+1)^0,c
  7047   003A9A  0E1E               	movlw	30
  7048   003A9C  6E22               	movwf	??_turnRight_90^0,c
  7049   003A9E  0EE4               	movlw	228
  7050   003AA0                     u6477:
  7051   003AA0  2EE8               	decfsz	wreg,f,c
  7052   003AA2  D7FE               	bra	u6477
  7053   003AA4  2E22               	decfsz	??_turnRight_90^0,f,c
  7054   003AA6  D7FC               	bra	u6477
  7055   003AA8  2E23               	decfsz	(??_turnRight_90+1)^0,f,c
  7056   003AAA  D7FA               	bra	u6477
  7057   003AAC  D000               	nop2	
  7058   003AAE                     
  7059                           ;MazeRobot.X/dc_motor.c: 272:     reverse(mL, mR);
  7060   003AAE  C01E  F018         	movff	turnRight_90@mL,reverse@mL
  7061   003AB2  C01F  F019         	movff	turnRight_90@mL+1,reverse@mL+1
  7062   003AB6  C020  F01A         	movff	turnRight_90@mR,reverse@mR
  7063   003ABA  C021  F01B         	movff	turnRight_90@mR+1,reverse@mR+1
  7064   003ABE  ECEE  F020         	call	_reverse	;wreg free
  7065                           
  7066                           ;MazeRobot.X/dc_motor.c: 273:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  7067   003AC2  0E39               	movlw	57
  7068   003AC4  6E23               	movwf	(??_turnRight_90+1)^0,c
  7069   003AC6  0ED2               	movlw	210
  7070   003AC8  6E22               	movwf	??_turnRight_90^0,c
  7071   003ACA  0E4C               	movlw	76
  7072   003ACC                     u6487:
  7073   003ACC  2EE8               	decfsz	wreg,f,c
  7074   003ACE  D7FE               	bra	u6487
  7075   003AD0  2E22               	decfsz	??_turnRight_90^0,f,c
  7076   003AD2  D7FC               	bra	u6487
  7077   003AD4  2E23               	decfsz	(??_turnRight_90+1)^0,f,c
  7078   003AD6  D7FA               	bra	u6487
  7079   003AD8  D000               	nop2	
  7080   003ADA                     
  7081                           ;MazeRobot.X/dc_motor.c: 275:     stop(mL, mR);
  7082   003ADA  C01E  F018         	movff	turnRight_90@mL,stop@mL
  7083   003ADE  C01F  F019         	movff	turnRight_90@mL+1,stop@mL+1
  7084   003AE2  C020  F01A         	movff	turnRight_90@mR,stop@mR
  7085   003AE6  C021  F01B         	movff	turnRight_90@mR+1,stop@mR+1
  7086   003AEA  EC27  F022         	call	_stop	;wreg free
  7087   003AEE                     
  7088                           ;MazeRobot.X/dc_motor.c: 277:     mL->direction = 1;
  7089   003AEE  EE20 F001          	lfsr	2,1
  7090   003AF2  501E               	movf	turnRight_90@mL^0,w,c
  7091   003AF4  26D9               	addwf	fsr2l,f,c
  7092   003AF6  501F               	movf	(turnRight_90@mL+1)^0,w,c
  7093   003AF8  22DA               	addwfc	fsr2h,f,c
  7094   003AFA  0E01               	movlw	1
  7095   003AFC  6EDF               	movwf	indf2,c
  7096   003AFE                     
  7097                           ;MazeRobot.X/dc_motor.c: 278:     mR->direction = 0;
  7098   003AFE  EE20 F001          	lfsr	2,1
  7099   003B02  5020               	movf	turnRight_90@mR^0,w,c
  7100   003B04  26D9               	addwf	fsr2l,f,c
  7101   003B06  5021               	movf	(turnRight_90@mR+1)^0,w,c
  7102   003B08  22DA               	addwfc	fsr2h,f,c
  7103   003B0A  0E00               	movlw	0
  7104   003B0C  6EDF               	movwf	indf2,c
  7105   003B0E                     
  7106                           ;MazeRobot.X/dc_motor.c: 280:     mL->brakemode = 1;
  7107   003B0E  EE20 F002          	lfsr	2,2
  7108   003B12  501E               	movf	turnRight_90@mL^0,w,c
  7109   003B14  26D9               	addwf	fsr2l,f,c
  7110   003B16  501F               	movf	(turnRight_90@mL+1)^0,w,c
  7111   003B18  22DA               	addwfc	fsr2h,f,c
  7112   003B1A  0E01               	movlw	1
  7113   003B1C  6EDF               	movwf	indf2,c
  7114   003B1E                     
  7115                           ;MazeRobot.X/dc_motor.c: 281:     mL->brakemode = 1;
  7116   003B1E  EE20 F002          	lfsr	2,2
  7117   003B22  501E               	movf	turnRight_90@mL^0,w,c
  7118   003B24  26D9               	addwf	fsr2l,f,c
  7119   003B26  501F               	movf	(turnRight_90@mL+1)^0,w,c
  7120   003B28  22DA               	addwfc	fsr2h,f,c
  7121   003B2A  0E01               	movlw	1
  7122   003B2C  6EDF               	movwf	indf2,c
  7123                           
  7124                           ;MazeRobot.X/dc_motor.c: 283:     while((mL->power < 80) || (mR->power < 80)){
  7125   003B2E  EFB1  F01D         	goto	l3497
  7126   003B32                     l3491:
  7127                           
  7128                           ;MazeRobot.X/dc_motor.c: 284:         mL->power += 10;
  7129   003B32  C01E  FFD9         	movff	turnRight_90@mL,fsr2l
  7130   003B36  C01F  FFDA         	movff	turnRight_90@mL+1,fsr2h
  7131   003B3A  0E0A               	movlw	10
  7132   003B3C  26DF               	addwf	indf2,f,c
  7133                           
  7134                           ;MazeRobot.X/dc_motor.c: 285:         mR->power += 10;
  7135   003B3E  C020  FFD9         	movff	turnRight_90@mR,fsr2l
  7136   003B42  C021  FFDA         	movff	turnRight_90@mR+1,fsr2h
  7137   003B46  0E0A               	movlw	10
  7138   003B48  26DF               	addwf	indf2,f,c
  7139   003B4A                     
  7140                           ;MazeRobot.X/dc_motor.c: 286:         setMotorPWM(mL);
  7141   003B4A  C01E  F012         	movff	turnRight_90@mL,setMotorPWM@m
  7142   003B4E  C01F  F013         	movff	turnRight_90@mL+1,setMotorPWM@m+1
  7143   003B52  EC8B  F01A         	call	_setMotorPWM	;wreg free
  7144   003B56                     
  7145                           ;MazeRobot.X/dc_motor.c: 287:         setMotorPWM(mR);
  7146   003B56  C020  F012         	movff	turnRight_90@mR,setMotorPWM@m
  7147   003B5A  C021  F013         	movff	turnRight_90@mR+1,setMotorPWM@m+1
  7148   003B5E  EC8B  F01A         	call	_setMotorPWM	;wreg free
  7149   003B62                     l3497:
  7150                           
  7151                           ;MazeRobot.X/dc_motor.c: 283:     while((mL->power < 80) || (mR->power < 80)){
  7152   003B62  C01E  FFD9         	movff	turnRight_90@mL,fsr2l
  7153   003B66  C01F  FFDA         	movff	turnRight_90@mL+1,fsr2h
  7154   003B6A  0E4F               	movlw	79
  7155   003B6C  64DF               	cpfsgt	indf2,c
  7156   003B6E  EFBB  F01D         	goto	u3131
  7157   003B72  EFBD  F01D         	goto	u3130
  7158   003B76                     u3131:
  7159   003B76  EF99  F01D         	goto	l3491
  7160   003B7A                     u3130:
  7161   003B7A  C020  FFD9         	movff	turnRight_90@mR,fsr2l
  7162   003B7E  C021  FFDA         	movff	turnRight_90@mR+1,fsr2h
  7163   003B82  0E4F               	movlw	79
  7164   003B84  64DF               	cpfsgt	indf2,c
  7165   003B86  EFC7  F01D         	goto	u3141
  7166   003B8A  EFC9  F01D         	goto	u3140
  7167   003B8E                     u3141:
  7168   003B8E  EF99  F01D         	goto	l3491
  7169   003B92                     u3140:
  7170   003B92                     
  7171                           ;MazeRobot.X/dc_motor.c: 289:    _delay((unsigned long)((turning_time45)*(64000000/4000.
      +                          0)));
  7172   003B92  0E10               	movlw	16
  7173   003B94  6E23               	movwf	(??_turnRight_90+1)^0,c
  7174   003B96  0E2E               	movlw	46
  7175   003B98  6E22               	movwf	??_turnRight_90^0,c
  7176   003B9A  0EAA               	movlw	170
  7177   003B9C                     u6497:
  7178   003B9C  2EE8               	decfsz	wreg,f,c
  7179   003B9E  D7FE               	bra	u6497
  7180   003BA0  2E22               	decfsz	??_turnRight_90^0,f,c
  7181   003BA2  D7FC               	bra	u6497
  7182   003BA4  2E23               	decfsz	(??_turnRight_90+1)^0,f,c
  7183   003BA6  D7FA               	bra	u6497
  7184   003BA8  D000               	nop2	
  7185   003BAA                     
  7186                           ;MazeRobot.X/dc_motor.c: 291:     stop(mL, mR);
  7187   003BAA  C01E  F018         	movff	turnRight_90@mL,stop@mL
  7188   003BAE  C01F  F019         	movff	turnRight_90@mL+1,stop@mL+1
  7189   003BB2  C020  F01A         	movff	turnRight_90@mR,stop@mR
  7190   003BB6  C021  F01B         	movff	turnRight_90@mR+1,stop@mR+1
  7191   003BBA  EC27  F022         	call	_stop	;wreg free
  7192   003BBE  0012               	return		;funcret
  7193   003BC0                     __end_of_turnRight_90:
  7194                           	callstack 0
  7195                           
  7196 ;; *************** function _reverseSquareLeft *****************
  7197 ;; Defined at:
  7198 ;;		line 416 in file "MazeRobot.X/dc_motor.c"
  7199 ;; Parameters:    Size  Location     Type
  7200 ;;  mL              2   35[COMRAM] PTR struct DC_motor
  7201 ;;		 -> main@motorLeft(9), 
  7202 ;;  mR              2   37[COMRAM] PTR struct DC_motor
  7203 ;;		 -> main@motorRight(9), 
  7204 ;; Auto vars:     Size  Location     Type
  7205 ;;		None
  7206 ;; Return value:  Size  Location     Type
  7207 ;;                  1    wreg      void 
  7208 ;; Registers used:
  7209 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7210 ;; Tracked objects:
  7211 ;;		On entry : 0/0
  7212 ;;		On exit  : 0/0
  7213 ;;		Unchanged: 0/0
  7214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7215 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7216 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7217 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7218 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7219 ;;Total ram usage:        6 bytes
  7220 ;; Hardware stack levels used: 1
  7221 ;; Hardware stack levels required when called: 6
  7222 ;; This function calls:
  7223 ;;		_reverse
  7224 ;;		_stop
  7225 ;;		_turnLeft_90
  7226 ;; This function is called by:
  7227 ;;		_colorDetect
  7228 ;; This function uses a non-reentrant model
  7229 ;;
  7230                           
  7231                           	psect	text30
  7232   004592                     __ptext30:
  7233                           	callstack 0
  7234   004592                     _reverseSquareLeft:
  7235                           	callstack 23
  7236   004592                     
  7237                           ;MazeRobot.X/dc_motor.c: 416: void reverseSquareLeft(DC_motor *mL, DC_motor *mR);MazeRob
      +                          ot.X/dc_motor.c: 417: {;MazeRobot.X/dc_motor.c: 418:     reverse(mL, mR);
  7238   004592  C024  F018         	movff	reverseSquareLeft@mL,reverse@mL
  7239   004596  C025  F019         	movff	reverseSquareLeft@mL+1,reverse@mL+1
  7240   00459A  C026  F01A         	movff	reverseSquareLeft@mR,reverse@mR
  7241   00459E  C027  F01B         	movff	reverseSquareLeft@mR+1,reverse@mR+1
  7242   0045A2  ECEE  F020         	call	_reverse	;wreg free
  7243   0045A6                     
  7244                           ;MazeRobot.X/dc_motor.c: 419:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  7245   0045A6  0E39               	movlw	57
  7246   0045A8  6E29               	movwf	(??_reverseSquareLeft+1)^0,c
  7247   0045AA  0ED2               	movlw	210
  7248   0045AC  6E28               	movwf	??_reverseSquareLeft^0,c
  7249   0045AE  0E4C               	movlw	76
  7250   0045B0                     u6507:
  7251   0045B0  2EE8               	decfsz	wreg,f,c
  7252   0045B2  D7FE               	bra	u6507
  7253   0045B4  2E28               	decfsz	??_reverseSquareLeft^0,f,c
  7254   0045B6  D7FC               	bra	u6507
  7255   0045B8  2E29               	decfsz	(??_reverseSquareLeft+1)^0,f,c
  7256   0045BA  D7FA               	bra	u6507
  7257   0045BC  D000               	nop2	
  7258   0045BE                     
  7259                           ;MazeRobot.X/dc_motor.c: 421:     stop(mL, mR);
  7260   0045BE  C024  F018         	movff	reverseSquareLeft@mL,stop@mL
  7261   0045C2  C025  F019         	movff	reverseSquareLeft@mL+1,stop@mL+1
  7262   0045C6  C026  F01A         	movff	reverseSquareLeft@mR,stop@mR
  7263   0045CA  C027  F01B         	movff	reverseSquareLeft@mR+1,stop@mR+1
  7264   0045CE  EC27  F022         	call	_stop	;wreg free
  7265   0045D2                     
  7266                           ;MazeRobot.X/dc_motor.c: 423:     reverse(mL, mR);
  7267   0045D2  C024  F018         	movff	reverseSquareLeft@mL,reverse@mL
  7268   0045D6  C025  F019         	movff	reverseSquareLeft@mL+1,reverse@mL+1
  7269   0045DA  C026  F01A         	movff	reverseSquareLeft@mR,reverse@mR
  7270   0045DE  C027  F01B         	movff	reverseSquareLeft@mR+1,reverse@mR+1
  7271   0045E2  ECEE  F020         	call	_reverse	;wreg free
  7272   0045E6                     
  7273                           ;MazeRobot.X/dc_motor.c: 424:     _delay((unsigned long)((2*reverse_time)*(64000000/4000
      +                          .0)));
  7274   0045E6  0E72               	movlw	114
  7275   0045E8  6E29               	movwf	(??_reverseSquareLeft+1)^0,c
  7276   0045EA  0EA3               	movlw	163
  7277   0045EC  6E28               	movwf	??_reverseSquareLeft^0,c
  7278   0045EE  0E9B               	movlw	155
  7279   0045F0                     u6517:
  7280   0045F0  2EE8               	decfsz	wreg,f,c
  7281   0045F2  D7FE               	bra	u6517
  7282   0045F4  2E28               	decfsz	??_reverseSquareLeft^0,f,c
  7283   0045F6  D7FC               	bra	u6517
  7284   0045F8  2E29               	decfsz	(??_reverseSquareLeft+1)^0,f,c
  7285   0045FA  D7FA               	bra	u6517
  7286   0045FC  F000               	nop	
  7287                           
  7288                           ;MazeRobot.X/dc_motor.c: 426:     turnLeft_90(mL,mR);
  7289   0045FE  C024  F01E         	movff	reverseSquareLeft@mL,turnLeft_90@mL
  7290   004602  C025  F01F         	movff	reverseSquareLeft@mL+1,turnLeft_90@mL+1
  7291   004606  C026  F020         	movff	reverseSquareLeft@mR,turnLeft_90@mR
  7292   00460A  C027  F021         	movff	reverseSquareLeft@mR+1,turnLeft_90@mR+1
  7293   00460E  ECE0  F01D         	call	_turnLeft_90	;wreg free
  7294                           
  7295                           ;MazeRobot.X/dc_motor.c: 428:     stop(mL, mR);
  7296   004612  C024  F018         	movff	reverseSquareLeft@mL,stop@mL
  7297   004616  C025  F019         	movff	reverseSquareLeft@mL+1,stop@mL+1
  7298   00461A  C026  F01A         	movff	reverseSquareLeft@mR,stop@mR
  7299   00461E  C027  F01B         	movff	reverseSquareLeft@mR+1,stop@mR+1
  7300   004622  EC27  F022         	call	_stop	;wreg free
  7301   004626  0012               	return		;funcret
  7302   004628                     __end_of_reverseSquareLeft:
  7303                           	callstack 0
  7304                           
  7305 ;; *************** function _turnLeft_90 *****************
  7306 ;; Defined at:
  7307 ;;		line 238 in file "MazeRobot.X/dc_motor.c"
  7308 ;; Parameters:    Size  Location     Type
  7309 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  7310 ;;		 -> main@motorLeft(9), 
  7311 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  7312 ;;		 -> main@motorRight(9), 
  7313 ;; Auto vars:     Size  Location     Type
  7314 ;;		None
  7315 ;; Return value:  Size  Location     Type
  7316 ;;                  1    wreg      void 
  7317 ;; Registers used:
  7318 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7319 ;; Tracked objects:
  7320 ;;		On entry : 0/0
  7321 ;;		On exit  : 0/0
  7322 ;;		Unchanged: 0/0
  7323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7324 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7325 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7326 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7327 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7328 ;;Total ram usage:        6 bytes
  7329 ;; Hardware stack levels used: 1
  7330 ;; Hardware stack levels required when called: 5
  7331 ;; This function calls:
  7332 ;;		_reverse
  7333 ;;		_setMotorPWM
  7334 ;;		_stop
  7335 ;; This function is called by:
  7336 ;;		_colorDetect
  7337 ;;		_return_home_turns
  7338 ;;		_reverseSquareLeft
  7339 ;; This function uses a non-reentrant model
  7340 ;;
  7341                           
  7342                           	psect	text31
  7343   003BC0                     __ptext31:
  7344                           	callstack 0
  7345   003BC0                     _turnLeft_90:
  7346                           	callstack 24
  7347   003BC0                     
  7348                           ;MazeRobot.X/dc_motor.c: 238: void turnLeft_90(DC_motor *mL, DC_motor *mR);MazeRobot.X/d
      +                          c_motor.c: 239: {;MazeRobot.X/dc_motor.c: 241:     stop(mL, mR);
  7349   003BC0  C01E  F018         	movff	turnLeft_90@mL,stop@mL
  7350   003BC4  C01F  F019         	movff	turnLeft_90@mL+1,stop@mL+1
  7351   003BC8  C020  F01A         	movff	turnLeft_90@mR,stop@mR
  7352   003BCC  C021  F01B         	movff	turnLeft_90@mR+1,stop@mR+1
  7353   003BD0  EC27  F022         	call	_stop	;wreg free
  7354   003BD4                     
  7355                           ;MazeRobot.X/dc_motor.c: 242:     _delay((unsigned long)((100)*(64000000/4000.0)));
  7356   003BD4  0E09               	movlw	9
  7357   003BD6  6E23               	movwf	(??_turnLeft_90+1)^0,c
  7358   003BD8  0E1E               	movlw	30
  7359   003BDA  6E22               	movwf	??_turnLeft_90^0,c
  7360   003BDC  0EE4               	movlw	228
  7361   003BDE                     u6527:
  7362   003BDE  2EE8               	decfsz	wreg,f,c
  7363   003BE0  D7FE               	bra	u6527
  7364   003BE2  2E22               	decfsz	??_turnLeft_90^0,f,c
  7365   003BE4  D7FC               	bra	u6527
  7366   003BE6  2E23               	decfsz	(??_turnLeft_90+1)^0,f,c
  7367   003BE8  D7FA               	bra	u6527
  7368   003BEA  D000               	nop2	
  7369   003BEC                     
  7370                           ;MazeRobot.X/dc_motor.c: 244:     reverse(mL, mR);
  7371   003BEC  C01E  F018         	movff	turnLeft_90@mL,reverse@mL
  7372   003BF0  C01F  F019         	movff	turnLeft_90@mL+1,reverse@mL+1
  7373   003BF4  C020  F01A         	movff	turnLeft_90@mR,reverse@mR
  7374   003BF8  C021  F01B         	movff	turnLeft_90@mR+1,reverse@mR+1
  7375   003BFC  ECEE  F020         	call	_reverse	;wreg free
  7376                           
  7377                           ;MazeRobot.X/dc_motor.c: 245:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  7378   003C00  0E39               	movlw	57
  7379   003C02  6E23               	movwf	(??_turnLeft_90+1)^0,c
  7380   003C04  0ED2               	movlw	210
  7381   003C06  6E22               	movwf	??_turnLeft_90^0,c
  7382   003C08  0E4C               	movlw	76
  7383   003C0A                     u6537:
  7384   003C0A  2EE8               	decfsz	wreg,f,c
  7385   003C0C  D7FE               	bra	u6537
  7386   003C0E  2E22               	decfsz	??_turnLeft_90^0,f,c
  7387   003C10  D7FC               	bra	u6537
  7388   003C12  2E23               	decfsz	(??_turnLeft_90+1)^0,f,c
  7389   003C14  D7FA               	bra	u6537
  7390   003C16  D000               	nop2	
  7391   003C18                     
  7392                           ;MazeRobot.X/dc_motor.c: 247:     stop(mL, mR);
  7393   003C18  C01E  F018         	movff	turnLeft_90@mL,stop@mL
  7394   003C1C  C01F  F019         	movff	turnLeft_90@mL+1,stop@mL+1
  7395   003C20  C020  F01A         	movff	turnLeft_90@mR,stop@mR
  7396   003C24  C021  F01B         	movff	turnLeft_90@mR+1,stop@mR+1
  7397   003C28  EC27  F022         	call	_stop	;wreg free
  7398   003C2C                     
  7399                           ;MazeRobot.X/dc_motor.c: 249:     mL->direction = 0;
  7400   003C2C  EE20 F001          	lfsr	2,1
  7401   003C30  501E               	movf	turnLeft_90@mL^0,w,c
  7402   003C32  26D9               	addwf	fsr2l,f,c
  7403   003C34  501F               	movf	(turnLeft_90@mL+1)^0,w,c
  7404   003C36  22DA               	addwfc	fsr2h,f,c
  7405   003C38  0E00               	movlw	0
  7406   003C3A  6EDF               	movwf	indf2,c
  7407   003C3C                     
  7408                           ;MazeRobot.X/dc_motor.c: 250:     mR->direction = 1;
  7409   003C3C  EE20 F001          	lfsr	2,1
  7410   003C40  5020               	movf	turnLeft_90@mR^0,w,c
  7411   003C42  26D9               	addwf	fsr2l,f,c
  7412   003C44  5021               	movf	(turnLeft_90@mR+1)^0,w,c
  7413   003C46  22DA               	addwfc	fsr2h,f,c
  7414   003C48  0E01               	movlw	1
  7415   003C4A  6EDF               	movwf	indf2,c
  7416   003C4C                     
  7417                           ;MazeRobot.X/dc_motor.c: 252:     mL->brakemode = 1;
  7418   003C4C  EE20 F002          	lfsr	2,2
  7419   003C50  501E               	movf	turnLeft_90@mL^0,w,c
  7420   003C52  26D9               	addwf	fsr2l,f,c
  7421   003C54  501F               	movf	(turnLeft_90@mL+1)^0,w,c
  7422   003C56  22DA               	addwfc	fsr2h,f,c
  7423   003C58  0E01               	movlw	1
  7424   003C5A  6EDF               	movwf	indf2,c
  7425   003C5C                     
  7426                           ;MazeRobot.X/dc_motor.c: 253:     mL->brakemode = 1;
  7427   003C5C  EE20 F002          	lfsr	2,2
  7428   003C60  501E               	movf	turnLeft_90@mL^0,w,c
  7429   003C62  26D9               	addwf	fsr2l,f,c
  7430   003C64  501F               	movf	(turnLeft_90@mL+1)^0,w,c
  7431   003C66  22DA               	addwfc	fsr2h,f,c
  7432   003C68  0E01               	movlw	1
  7433   003C6A  6EDF               	movwf	indf2,c
  7434                           
  7435                           ;MazeRobot.X/dc_motor.c: 255:     while((mL->power < 80) || (mR->power < 80)){
  7436   003C6C  EF50  F01E         	goto	l3527
  7437   003C70                     l3521:
  7438                           
  7439                           ;MazeRobot.X/dc_motor.c: 256:         mL->power += 10;
  7440   003C70  C01E  FFD9         	movff	turnLeft_90@mL,fsr2l
  7441   003C74  C01F  FFDA         	movff	turnLeft_90@mL+1,fsr2h
  7442   003C78  0E0A               	movlw	10
  7443   003C7A  26DF               	addwf	indf2,f,c
  7444                           
  7445                           ;MazeRobot.X/dc_motor.c: 257:         mR->power += 10;
  7446   003C7C  C020  FFD9         	movff	turnLeft_90@mR,fsr2l
  7447   003C80  C021  FFDA         	movff	turnLeft_90@mR+1,fsr2h
  7448   003C84  0E0A               	movlw	10
  7449   003C86  26DF               	addwf	indf2,f,c
  7450   003C88                     
  7451                           ;MazeRobot.X/dc_motor.c: 258:         setMotorPWM(mL);
  7452   003C88  C01E  F012         	movff	turnLeft_90@mL,setMotorPWM@m
  7453   003C8C  C01F  F013         	movff	turnLeft_90@mL+1,setMotorPWM@m+1
  7454   003C90  EC8B  F01A         	call	_setMotorPWM	;wreg free
  7455   003C94                     
  7456                           ;MazeRobot.X/dc_motor.c: 259:         setMotorPWM(mR);
  7457   003C94  C020  F012         	movff	turnLeft_90@mR,setMotorPWM@m
  7458   003C98  C021  F013         	movff	turnLeft_90@mR+1,setMotorPWM@m+1
  7459   003C9C  EC8B  F01A         	call	_setMotorPWM	;wreg free
  7460   003CA0                     l3527:
  7461                           
  7462                           ;MazeRobot.X/dc_motor.c: 255:     while((mL->power < 80) || (mR->power < 80)){
  7463   003CA0  C01E  FFD9         	movff	turnLeft_90@mL,fsr2l
  7464   003CA4  C01F  FFDA         	movff	turnLeft_90@mL+1,fsr2h
  7465   003CA8  0E4F               	movlw	79
  7466   003CAA  64DF               	cpfsgt	indf2,c
  7467   003CAC  EF5A  F01E         	goto	u3151
  7468   003CB0  EF5C  F01E         	goto	u3150
  7469   003CB4                     u3151:
  7470   003CB4  EF38  F01E         	goto	l3521
  7471   003CB8                     u3150:
  7472   003CB8  C020  FFD9         	movff	turnLeft_90@mR,fsr2l
  7473   003CBC  C021  FFDA         	movff	turnLeft_90@mR+1,fsr2h
  7474   003CC0  0E4F               	movlw	79
  7475   003CC2  64DF               	cpfsgt	indf2,c
  7476   003CC4  EF66  F01E         	goto	u3161
  7477   003CC8  EF68  F01E         	goto	u3160
  7478   003CCC                     u3161:
  7479   003CCC  EF38  F01E         	goto	l3521
  7480   003CD0                     u3160:
  7481   003CD0                     
  7482                           ;MazeRobot.X/dc_motor.c: 261:    _delay((unsigned long)((turning_time45)*(64000000/4000.
      +                          0)));
  7483   003CD0  0E10               	movlw	16
  7484   003CD2  6E23               	movwf	(??_turnLeft_90+1)^0,c
  7485   003CD4  0E2E               	movlw	46
  7486   003CD6  6E22               	movwf	??_turnLeft_90^0,c
  7487   003CD8  0EAA               	movlw	170
  7488   003CDA                     u6547:
  7489   003CDA  2EE8               	decfsz	wreg,f,c
  7490   003CDC  D7FE               	bra	u6547
  7491   003CDE  2E22               	decfsz	??_turnLeft_90^0,f,c
  7492   003CE0  D7FC               	bra	u6547
  7493   003CE2  2E23               	decfsz	(??_turnLeft_90+1)^0,f,c
  7494   003CE4  D7FA               	bra	u6547
  7495   003CE6  D000               	nop2	
  7496   003CE8                     
  7497                           ;MazeRobot.X/dc_motor.c: 262:     stop(mL, mR);
  7498   003CE8  C01E  F018         	movff	turnLeft_90@mL,stop@mL
  7499   003CEC  C01F  F019         	movff	turnLeft_90@mL+1,stop@mL+1
  7500   003CF0  C020  F01A         	movff	turnLeft_90@mR,stop@mR
  7501   003CF4  C021  F01B         	movff	turnLeft_90@mR+1,stop@mR+1
  7502   003CF8  EC27  F022         	call	_stop	;wreg free
  7503   003CFC  0012               	return		;funcret
  7504   003CFE                     __end_of_turnLeft_90:
  7505                           	callstack 0
  7506                           
  7507 ;; *************** function _stop *****************
  7508 ;; Defined at:
  7509 ;;		line 115 in file "MazeRobot.X/dc_motor.c"
  7510 ;; Parameters:    Size  Location     Type
  7511 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  7512 ;;		 -> main@motorLeft(9), 
  7513 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  7514 ;;		 -> main@motorRight(9), 
  7515 ;; Auto vars:     Size  Location     Type
  7516 ;;		None
  7517 ;; Return value:  Size  Location     Type
  7518 ;;                  1    wreg      void 
  7519 ;; Registers used:
  7520 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7521 ;; Tracked objects:
  7522 ;;		On entry : 0/0
  7523 ;;		On exit  : 0/0
  7524 ;;		Unchanged: 0/0
  7525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7526 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7527 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7528 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7529 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7530 ;;Total ram usage:        6 bytes
  7531 ;; Hardware stack levels used: 1
  7532 ;; Hardware stack levels required when called: 4
  7533 ;; This function calls:
  7534 ;;		_setMotorPWM
  7535 ;; This function is called by:
  7536 ;;		_return_home_turns
  7537 ;;		_turnLeft_90
  7538 ;;		_turnRight_90
  7539 ;;		_turn_180
  7540 ;;		_turnRight_135
  7541 ;;		_turnLeft_135
  7542 ;;		_reverseSquareRight
  7543 ;;		_reverseSquareLeft
  7544 ;;		_main
  7545 ;;		_turnLeft
  7546 ;;		_turnRight
  7547 ;; This function uses a non-reentrant model
  7548 ;;
  7549                           
  7550                           	psect	text32
  7551   00444E                     __ptext32:
  7552                           	callstack 0
  7553   00444E                     _stop:
  7554                           	callstack 25
  7555   00444E                     
  7556                           ;MazeRobot.X/dc_motor.c: 117:     while ((mL->power)>0 && (mR->power)>0){
  7557   00444E  EF59  F022         	goto	l3399
  7558   004452                     l3387:
  7559                           
  7560                           ;MazeRobot.X/dc_motor.c: 118:         if ((mL->power) >0){
  7561   004452  C018  FFD9         	movff	stop@mL,fsr2l
  7562   004456  C019  FFDA         	movff	stop@mL+1,fsr2h
  7563   00445A  50DF               	movf	indf2,w,c
  7564   00445C  B4D8               	btfsc	status,2,c
  7565   00445E  EF33  F022         	goto	u3021
  7566   004462  EF35  F022         	goto	u3020
  7567   004466                     u3021:
  7568   004466  EF3B  F022         	goto	l3391
  7569   00446A                     u3020:
  7570   00446A                     
  7571                           ;MazeRobot.X/dc_motor.c: 119:             mL->power -= 5;
  7572   00446A  C018  FFD9         	movff	stop@mL,fsr2l
  7573   00446E  C019  FFDA         	movff	stop@mL+1,fsr2h
  7574   004472  0E05               	movlw	5
  7575   004474  5EDF               	subwf	indf2,f,c
  7576   004476                     l3391:
  7577                           
  7578                           ;MazeRobot.X/dc_motor.c: 121:         if ((mR->power) >0){
  7579   004476  C01A  FFD9         	movff	stop@mR,fsr2l
  7580   00447A  C01B  FFDA         	movff	stop@mR+1,fsr2h
  7581   00447E  50DF               	movf	indf2,w,c
  7582   004480  B4D8               	btfsc	status,2,c
  7583   004482  EF45  F022         	goto	u3031
  7584   004486  EF47  F022         	goto	u3030
  7585   00448A                     u3031:
  7586   00448A  EF4D  F022         	goto	l3395
  7587   00448E                     u3030:
  7588   00448E                     
  7589                           ;MazeRobot.X/dc_motor.c: 122:             mR->power -= 5;
  7590   00448E  C01A  FFD9         	movff	stop@mR,fsr2l
  7591   004492  C01B  FFDA         	movff	stop@mR+1,fsr2h
  7592   004496  0E05               	movlw	5
  7593   004498  5EDF               	subwf	indf2,f,c
  7594   00449A                     l3395:
  7595                           
  7596                           ;MazeRobot.X/dc_motor.c: 125:         setMotorPWM(mL);
  7597   00449A  C018  F012         	movff	stop@mL,setMotorPWM@m
  7598   00449E  C019  F013         	movff	stop@mL+1,setMotorPWM@m+1
  7599   0044A2  EC8B  F01A         	call	_setMotorPWM	;wreg free
  7600   0044A6                     
  7601                           ;MazeRobot.X/dc_motor.c: 126:         setMotorPWM(mR);
  7602   0044A6  C01A  F012         	movff	stop@mR,setMotorPWM@m
  7603   0044AA  C01B  F013         	movff	stop@mR+1,setMotorPWM@m+1
  7604   0044AE  EC8B  F01A         	call	_setMotorPWM	;wreg free
  7605   0044B2                     l3399:
  7606                           
  7607                           ;MazeRobot.X/dc_motor.c: 117:     while ((mL->power)>0 && (mR->power)>0){
  7608   0044B2  C018  FFD9         	movff	stop@mL,fsr2l
  7609   0044B6  C019  FFDA         	movff	stop@mL+1,fsr2h
  7610   0044BA  50DF               	movf	indf2,w,c
  7611   0044BC  B4D8               	btfsc	status,2,c
  7612   0044BE  EF63  F022         	goto	u3041
  7613   0044C2  EF65  F022         	goto	u3040
  7614   0044C6                     u3041:
  7615   0044C6  EF71  F022         	goto	l3403
  7616   0044CA                     u3040:
  7617   0044CA  C01A  FFD9         	movff	stop@mR,fsr2l
  7618   0044CE  C01B  FFDA         	movff	stop@mR+1,fsr2h
  7619   0044D2  50DF               	movf	indf2,w,c
  7620   0044D4  A4D8               	btfss	status,2,c
  7621   0044D6  EF6F  F022         	goto	u3051
  7622   0044DA  EF71  F022         	goto	u3050
  7623   0044DE                     u3051:
  7624   0044DE  EF29  F022         	goto	l3387
  7625   0044E2                     u3050:
  7626   0044E2                     l3403:
  7627                           
  7628                           ;MazeRobot.X/dc_motor.c: 128:     _delay((unsigned long)((100)*(64000000/4000.0)));
  7629   0044E2  0E09               	movlw	9
  7630   0044E4  6E1D               	movwf	(??_stop+1)^0,c
  7631   0044E6  0E1E               	movlw	30
  7632   0044E8  6E1C               	movwf	??_stop^0,c
  7633   0044EA  0EE4               	movlw	228
  7634   0044EC                     u6557:
  7635   0044EC  2EE8               	decfsz	wreg,f,c
  7636   0044EE  D7FE               	bra	u6557
  7637   0044F0  2E1C               	decfsz	??_stop^0,f,c
  7638   0044F2  D7FC               	bra	u6557
  7639   0044F4  2E1D               	decfsz	(??_stop+1)^0,f,c
  7640   0044F6  D7FA               	bra	u6557
  7641   0044F8  D000               	nop2	
  7642   0044FA  0012               	return		;funcret
  7643   0044FC                     __end_of_stop:
  7644                           	callstack 0
  7645                           
  7646 ;; *************** function _reverse *****************
  7647 ;; Defined at:
  7648 ;;		line 155 in file "MazeRobot.X/dc_motor.c"
  7649 ;; Parameters:    Size  Location     Type
  7650 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  7651 ;;		 -> main@motorLeft(9), 
  7652 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  7653 ;;		 -> main@motorRight(9), 
  7654 ;; Auto vars:     Size  Location     Type
  7655 ;;		None
  7656 ;; Return value:  Size  Location     Type
  7657 ;;                  1    wreg      void 
  7658 ;; Registers used:
  7659 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7660 ;; Tracked objects:
  7661 ;;		On entry : 0/0
  7662 ;;		On exit  : 0/0
  7663 ;;		Unchanged: 0/0
  7664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7665 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7666 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7667 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7668 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7669 ;;Total ram usage:        5 bytes
  7670 ;; Hardware stack levels used: 1
  7671 ;; Hardware stack levels required when called: 4
  7672 ;; This function calls:
  7673 ;;		_setMotorPWM
  7674 ;; This function is called by:
  7675 ;;		_turnLeft_90
  7676 ;;		_turnRight_90
  7677 ;;		_turn_180
  7678 ;;		_turnRight_135
  7679 ;;		_turnLeft_135
  7680 ;;		_reverseSquareRight
  7681 ;;		_reverseSquareLeft
  7682 ;;		_turnLeft
  7683 ;;		_turnRight
  7684 ;; This function uses a non-reentrant model
  7685 ;;
  7686                           
  7687                           	psect	text33
  7688   0041DC                     __ptext33:
  7689                           	callstack 0
  7690   0041DC                     _reverse:
  7691                           	callstack 25
  7692   0041DC                     
  7693                           ;MazeRobot.X/dc_motor.c: 155: void reverse(DC_motor *mL, DC_motor *mR);MazeRobot.X/dc_mo
      +                          tor.c: 156: {;MazeRobot.X/dc_motor.c: 157:     mL->direction = 0;
  7694   0041DC  EE20 F001          	lfsr	2,1
  7695   0041E0  5018               	movf	reverse@mL^0,w,c
  7696   0041E2  26D9               	addwf	fsr2l,f,c
  7697   0041E4  5019               	movf	(reverse@mL+1)^0,w,c
  7698   0041E6  22DA               	addwfc	fsr2h,f,c
  7699   0041E8  0E00               	movlw	0
  7700   0041EA  6EDF               	movwf	indf2,c
  7701                           
  7702                           ;MazeRobot.X/dc_motor.c: 158:     mR->direction = 0;
  7703   0041EC  EE20 F001          	lfsr	2,1
  7704   0041F0  501A               	movf	reverse@mR^0,w,c
  7705   0041F2  26D9               	addwf	fsr2l,f,c
  7706   0041F4  501B               	movf	(reverse@mR+1)^0,w,c
  7707   0041F6  22DA               	addwfc	fsr2h,f,c
  7708   0041F8  0E00               	movlw	0
  7709   0041FA  6EDF               	movwf	indf2,c
  7710                           
  7711                           ;MazeRobot.X/dc_motor.c: 160:     mL->brakemode = 1;
  7712   0041FC  EE20 F002          	lfsr	2,2
  7713   004200  5018               	movf	reverse@mL^0,w,c
  7714   004202  26D9               	addwf	fsr2l,f,c
  7715   004204  5019               	movf	(reverse@mL+1)^0,w,c
  7716   004206  22DA               	addwfc	fsr2h,f,c
  7717   004208  0E01               	movlw	1
  7718   00420A  6EDF               	movwf	indf2,c
  7719                           
  7720                           ;MazeRobot.X/dc_motor.c: 161:     mL->brakemode = 1;
  7721   00420C  EE20 F002          	lfsr	2,2
  7722   004210  5018               	movf	reverse@mL^0,w,c
  7723   004212  26D9               	addwf	fsr2l,f,c
  7724   004214  5019               	movf	(reverse@mL+1)^0,w,c
  7725   004216  22DA               	addwfc	fsr2h,f,c
  7726   004218  0E01               	movlw	1
  7727   00421A  6EDF               	movwf	indf2,c
  7728                           
  7729                           ;MazeRobot.X/dc_motor.c: 163:     while ((mL->power)<25 && (mR->power)<25){
  7730   00421C  EF34  F021         	goto	l3415
  7731   004220                     l3407:
  7732                           
  7733                           ;MazeRobot.X/dc_motor.c: 164:         if ((mL->power) < 25){
  7734   004220  C018  FFD9         	movff	reverse@mL,fsr2l
  7735   004224  C019  FFDA         	movff	reverse@mL+1,fsr2h
  7736   004228  0E19               	movlw	25
  7737   00422A  60DF               	cpfslt	indf2,c
  7738   00422C  EF1A  F021         	goto	u3061
  7739   004230  EF1C  F021         	goto	u3060
  7740   004234                     u3061:
  7741   004234  EF22  F021         	goto	l3411
  7742   004238                     u3060:
  7743   004238                     
  7744                           ;MazeRobot.X/dc_motor.c: 165:             mL->power += 5;
  7745   004238  C018  FFD9         	movff	reverse@mL,fsr2l
  7746   00423C  C019  FFDA         	movff	reverse@mL+1,fsr2h
  7747   004240  0E05               	movlw	5
  7748   004242  26DF               	addwf	indf2,f,c
  7749   004244                     l3411:
  7750                           
  7751                           ;MazeRobot.X/dc_motor.c: 167:         if ((mR->power) <25){
  7752   004244  C01A  FFD9         	movff	reverse@mR,fsr2l
  7753   004248  C01B  FFDA         	movff	reverse@mR+1,fsr2h
  7754   00424C  0E19               	movlw	25
  7755   00424E  60DF               	cpfslt	indf2,c
  7756   004250  EF2C  F021         	goto	u3071
  7757   004254  EF2E  F021         	goto	u3070
  7758   004258                     u3071:
  7759   004258  EF34  F021         	goto	l3415
  7760   00425C                     u3070:
  7761   00425C                     
  7762                           ;MazeRobot.X/dc_motor.c: 168:             mR->power += 5;
  7763   00425C  C01A  FFD9         	movff	reverse@mR,fsr2l
  7764   004260  C01B  FFDA         	movff	reverse@mR+1,fsr2h
  7765   004264  0E05               	movlw	5
  7766   004266  26DF               	addwf	indf2,f,c
  7767   004268                     l3415:
  7768                           
  7769                           ;MazeRobot.X/dc_motor.c: 163:     while ((mL->power)<25 && (mR->power)<25){
  7770   004268  C018  FFD9         	movff	reverse@mL,fsr2l
  7771   00426C  C019  FFDA         	movff	reverse@mL+1,fsr2h
  7772   004270  0E19               	movlw	25
  7773   004272  60DF               	cpfslt	indf2,c
  7774   004274  EF3E  F021         	goto	u3081
  7775   004278  EF40  F021         	goto	u3080
  7776   00427C                     u3081:
  7777   00427C  EF4C  F021         	goto	l3419
  7778   004280                     u3080:
  7779   004280  C01A  FFD9         	movff	reverse@mR,fsr2l
  7780   004284  C01B  FFDA         	movff	reverse@mR+1,fsr2h
  7781   004288  0E18               	movlw	24
  7782   00428A  64DF               	cpfsgt	indf2,c
  7783   00428C  EF4A  F021         	goto	u3091
  7784   004290  EF4C  F021         	goto	u3090
  7785   004294                     u3091:
  7786   004294  EF10  F021         	goto	l3407
  7787   004298                     u3090:
  7788   004298                     l3419:
  7789                           
  7790                           ;MazeRobot.X/dc_motor.c: 172:     setMotorPWM(mL);
  7791   004298  C018  F012         	movff	reverse@mL,setMotorPWM@m
  7792   00429C  C019  F013         	movff	reverse@mL+1,setMotorPWM@m+1
  7793   0042A0  EC8B  F01A         	call	_setMotorPWM	;wreg free
  7794                           
  7795                           ;MazeRobot.X/dc_motor.c: 173:     setMotorPWM(mR);
  7796   0042A4  C01A  F012         	movff	reverse@mR,setMotorPWM@m
  7797   0042A8  C01B  F013         	movff	reverse@mR+1,setMotorPWM@m+1
  7798   0042AC  EC8B  F01A         	call	_setMotorPWM	;wreg free
  7799   0042B0  0012               	return		;funcret
  7800   0042B2                     __end_of_reverse:
  7801                           	callstack 0
  7802                           
  7803 ;; *************** function _setMotorPWM *****************
  7804 ;; Defined at:
  7805 ;;		line 92 in file "MazeRobot.X/dc_motor.c"
  7806 ;; Parameters:    Size  Location     Type
  7807 ;;  m               2   17[COMRAM] PTR struct DC_motor
  7808 ;;		 -> main@motorRight(9), main@motorLeft(9), 
  7809 ;; Auto vars:     Size  Location     Type
  7810 ;;  negDuty         1   22[COMRAM] unsigned char 
  7811 ;;  posDuty         1   21[COMRAM] unsigned char 
  7812 ;; Return value:  Size  Location     Type
  7813 ;;                  1    wreg      void 
  7814 ;; Registers used:
  7815 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7816 ;; Tracked objects:
  7817 ;;		On entry : 0/0
  7818 ;;		On exit  : 0/0
  7819 ;;		Unchanged: 0/0
  7820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7821 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7822 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7823 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7824 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7825 ;;Total ram usage:        6 bytes
  7826 ;; Hardware stack levels used: 1
  7827 ;; Hardware stack levels required when called: 3
  7828 ;; This function calls:
  7829 ;;		___lwdiv
  7830 ;;		___wmul
  7831 ;; This function is called by:
  7832 ;;		_stop
  7833 ;;		_forward
  7834 ;;		_reverse
  7835 ;;		_turnLeft_90
  7836 ;;		_turnRight_90
  7837 ;;		_turn_180
  7838 ;;		_turnRight_135
  7839 ;;		_turnLeft_135
  7840 ;;		_turnLeft
  7841 ;;		_turnRight
  7842 ;; This function uses a non-reentrant model
  7843 ;;
  7844                           
  7845                           	psect	text34
  7846   003516                     __ptext34:
  7847                           	callstack 0
  7848   003516                     _setMotorPWM:
  7849                           	callstack 25
  7850   003516                     
  7851                           ;MazeRobot.X/dc_motor.c: 92: void setMotorPWM(DC_motor *m);MazeRobot.X/dc_motor.c: 93: {
      +                          ;MazeRobot.X/dc_motor.c: 94:     unsigned char posDuty, negDuty;;MazeRobot.X/dc_motor.c:
      +                           96:     if(m->brakemode) {
  7852   003516  EE20 F002          	lfsr	2,2
  7853   00351A  5012               	movf	setMotorPWM@m^0,w,c
  7854   00351C  26D9               	addwf	fsr2l,f,c
  7855   00351E  5013               	movf	(setMotorPWM@m+1)^0,w,c
  7856   003520  22DA               	addwfc	fsr2h,f,c
  7857   003522  50DF               	movf	indf2,w,c
  7858   003524  B4D8               	btfsc	status,2,c
  7859   003526  EF97  F01A         	goto	u2861
  7860   00352A  EF99  F01A         	goto	u2860
  7861   00352E                     u2861:
  7862   00352E  EFCD  F01A         	goto	l3289
  7863   003532                     u2860:
  7864   003532                     
  7865                           ;MazeRobot.X/dc_motor.c: 97:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m
      +                          ->PWMperiod))/100;
  7866   003532  C012  FFD9         	movff	setMotorPWM@m,fsr2l
  7867   003536  C013  FFDA         	movff	setMotorPWM@m+1,fsr2h
  7868   00353A  50DF               	movf	indf2,w,c
  7869   00353C  6E14               	movwf	??_setMotorPWM^0,c
  7870   00353E  5014               	movf	??_setMotorPWM^0,w,c
  7871   003540  6E05               	movwf	___wmul@multiplier^0,c
  7872   003542  6A06               	clrf	(___wmul@multiplier+1)^0,c
  7873   003544  EE20 F003          	lfsr	2,3
  7874   003548  5012               	movf	setMotorPWM@m^0,w,c
  7875   00354A  26D9               	addwf	fsr2l,f,c
  7876   00354C  5013               	movf	(setMotorPWM@m+1)^0,w,c
  7877   00354E  22DA               	addwfc	fsr2h,f,c
  7878   003550  CFDE F007          	movff	postinc2,___wmul@multiplicand
  7879   003554  CFDD F008          	movff	postdec2,___wmul@multiplicand+1
  7880   003558  EC58  F026         	call	___wmul	;wreg free
  7881   00355C  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  7882   003560  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  7883   003564  0E00               	movlw	0
  7884   003566  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  7885   003568  0E64               	movlw	100
  7886   00356A  6E0D               	movwf	___lwdiv@divisor^0,c
  7887   00356C  EC99  F023         	call	___lwdiv	;wreg free
  7888   003570  EE20 F003          	lfsr	2,3
  7889   003574  5012               	movf	setMotorPWM@m^0,w,c
  7890   003576  26D9               	addwf	fsr2l,f,c
  7891   003578  5013               	movf	(setMotorPWM@m+1)^0,w,c
  7892   00357A  22DA               	addwfc	fsr2h,f,c
  7893   00357C  50DF               	movf	indf2,w,c
  7894   00357E  6E15               	movwf	(??_setMotorPWM+1)^0,c
  7895   003580  500B               	movf	?___lwdiv^0,w,c
  7896   003582  5C15               	subwf	(??_setMotorPWM+1)^0,w,c
  7897   003584  6E16               	movwf	setMotorPWM@posDuty^0,c
  7898   003586                     
  7899                           ;MazeRobot.X/dc_motor.c: 98:         negDuty=m->PWMperiod;
  7900   003586  EE20 F003          	lfsr	2,3
  7901   00358A  5012               	movf	setMotorPWM@m^0,w,c
  7902   00358C  26D9               	addwf	fsr2l,f,c
  7903   00358E  5013               	movf	(setMotorPWM@m+1)^0,w,c
  7904   003590  22DA               	addwfc	fsr2h,f,c
  7905   003592  50DF               	movf	indf2,w,c
  7906   003594  6E17               	movwf	setMotorPWM@negDuty^0,c
  7907                           
  7908                           ;MazeRobot.X/dc_motor.c: 99:     }
  7909   003596  EFF0  F01A         	goto	l3293
  7910   00359A                     l3289:
  7911                           
  7912                           ;MazeRobot.X/dc_motor.c: 101:         posDuty=0;
  7913   00359A  0E00               	movlw	0
  7914   00359C  6E16               	movwf	setMotorPWM@posDuty^0,c
  7915   00359E                     
  7916                           ;MazeRobot.X/dc_motor.c: 102:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  7917   00359E  C012  FFD9         	movff	setMotorPWM@m,fsr2l
  7918   0035A2  C013  FFDA         	movff	setMotorPWM@m+1,fsr2h
  7919   0035A6  50DF               	movf	indf2,w,c
  7920   0035A8  6E14               	movwf	??_setMotorPWM^0,c
  7921   0035AA  5014               	movf	??_setMotorPWM^0,w,c
  7922   0035AC  6E05               	movwf	___wmul@multiplier^0,c
  7923   0035AE  6A06               	clrf	(___wmul@multiplier+1)^0,c
  7924   0035B0  EE20 F003          	lfsr	2,3
  7925   0035B4  5012               	movf	setMotorPWM@m^0,w,c
  7926   0035B6  26D9               	addwf	fsr2l,f,c
  7927   0035B8  5013               	movf	(setMotorPWM@m+1)^0,w,c
  7928   0035BA  22DA               	addwfc	fsr2h,f,c
  7929   0035BC  CFDE F007          	movff	postinc2,___wmul@multiplicand
  7930   0035C0  CFDD F008          	movff	postdec2,___wmul@multiplicand+1
  7931   0035C4  EC58  F026         	call	___wmul	;wreg free
  7932   0035C8  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  7933   0035CC  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  7934   0035D0  0E00               	movlw	0
  7935   0035D2  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  7936   0035D4  0E64               	movlw	100
  7937   0035D6  6E0D               	movwf	___lwdiv@divisor^0,c
  7938   0035D8  EC99  F023         	call	___lwdiv	;wreg free
  7939   0035DC  500B               	movf	?___lwdiv^0,w,c
  7940   0035DE  6E17               	movwf	setMotorPWM@negDuty^0,c
  7941   0035E0                     l3293:
  7942                           
  7943                           ;MazeRobot.X/dc_motor.c: 105:     if (m->direction) {
  7944   0035E0  EE20 F001          	lfsr	2,1
  7945   0035E4  5012               	movf	setMotorPWM@m^0,w,c
  7946   0035E6  26D9               	addwf	fsr2l,f,c
  7947   0035E8  5013               	movf	(setMotorPWM@m+1)^0,w,c
  7948   0035EA  22DA               	addwfc	fsr2h,f,c
  7949   0035EC  50DF               	movf	indf2,w,c
  7950   0035EE  B4D8               	btfsc	status,2,c
  7951   0035F0  EFFC  F01A         	goto	u2871
  7952   0035F4  EFFE  F01A         	goto	u2870
  7953   0035F8                     u2871:
  7954   0035F8  EF20  F01B         	goto	l3297
  7955   0035FC                     u2870:
  7956   0035FC                     
  7957                           ;MazeRobot.X/dc_motor.c: 106:         *(m->posDutyHighByte)=posDuty;
  7958   0035FC  EE20 F005          	lfsr	2,5
  7959   003600  5012               	movf	setMotorPWM@m^0,w,c
  7960   003602  26D9               	addwf	fsr2l,f,c
  7961   003604  5013               	movf	(setMotorPWM@m+1)^0,w,c
  7962   003606  22DA               	addwfc	fsr2h,f,c
  7963   003608  CFDE F014          	movff	postinc2,??_setMotorPWM
  7964   00360C  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  7965   003610  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  7966   003614  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7967   003618  C016  FFDF         	movff	setMotorPWM@posDuty,indf2
  7968                           
  7969                           ;MazeRobot.X/dc_motor.c: 107:         *(m->negDutyHighByte)=negDuty;
  7970   00361C  EE20 F007          	lfsr	2,7
  7971   003620  5012               	movf	setMotorPWM@m^0,w,c
  7972   003622  26D9               	addwf	fsr2l,f,c
  7973   003624  5013               	movf	(setMotorPWM@m+1)^0,w,c
  7974   003626  22DA               	addwfc	fsr2h,f,c
  7975   003628  CFDE F014          	movff	postinc2,??_setMotorPWM
  7976   00362C  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  7977   003630  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  7978   003634  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7979   003638  C017  FFDF         	movff	setMotorPWM@negDuty,indf2
  7980                           
  7981                           ;MazeRobot.X/dc_motor.c: 108:     } else {
  7982   00363C  EF40  F01B         	goto	l204
  7983   003640                     l3297:
  7984                           
  7985                           ;MazeRobot.X/dc_motor.c: 109:         *(m->posDutyHighByte)=negDuty;
  7986   003640  EE20 F005          	lfsr	2,5
  7987   003644  5012               	movf	setMotorPWM@m^0,w,c
  7988   003646  26D9               	addwf	fsr2l,f,c
  7989   003648  5013               	movf	(setMotorPWM@m+1)^0,w,c
  7990   00364A  22DA               	addwfc	fsr2h,f,c
  7991   00364C  CFDE F014          	movff	postinc2,??_setMotorPWM
  7992   003650  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  7993   003654  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  7994   003658  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7995   00365C  C017  FFDF         	movff	setMotorPWM@negDuty,indf2
  7996                           
  7997                           ;MazeRobot.X/dc_motor.c: 110:         *(m->negDutyHighByte)=posDuty;
  7998   003660  EE20 F007          	lfsr	2,7
  7999   003664  5012               	movf	setMotorPWM@m^0,w,c
  8000   003666  26D9               	addwf	fsr2l,f,c
  8001   003668  5013               	movf	(setMotorPWM@m+1)^0,w,c
  8002   00366A  22DA               	addwfc	fsr2h,f,c
  8003   00366C  CFDE F014          	movff	postinc2,??_setMotorPWM
  8004   003670  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  8005   003674  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  8006   003678  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  8007   00367C  C016  FFDF         	movff	setMotorPWM@posDuty,indf2
  8008   003680                     l204:
  8009   003680  0012               	return		;funcret
  8010   003682                     __end_of_setMotorPWM:
  8011                           	callstack 0
  8012                           
  8013 ;; *************** function ___wmul *****************
  8014 ;; Defined at:
  8015 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  8016 ;; Parameters:    Size  Location     Type
  8017 ;;  multiplier      2    4[COMRAM] unsigned int 
  8018 ;;  multiplicand    2    6[COMRAM] unsigned int 
  8019 ;; Auto vars:     Size  Location     Type
  8020 ;;  product         2    8[COMRAM] unsigned int 
  8021 ;; Return value:  Size  Location     Type
  8022 ;;                  2    4[COMRAM] unsigned int 
  8023 ;; Registers used:
  8024 ;;		wreg, status,2, status,0, prodl, prodh
  8025 ;; Tracked objects:
  8026 ;;		On entry : 0/0
  8027 ;;		On exit  : 0/0
  8028 ;;		Unchanged: 0/0
  8029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8030 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8031 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8033 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8034 ;;Total ram usage:        6 bytes
  8035 ;; Hardware stack levels used: 1
  8036 ;; Hardware stack levels required when called: 2
  8037 ;; This function calls:
  8038 ;;		Nothing
  8039 ;; This function is called by:
  8040 ;;		_setMotorPWM
  8041 ;;		_turnLeft_135
  8042 ;; This function uses a non-reentrant model
  8043 ;;
  8044                           
  8045                           	psect	text35
  8046   004CB0                     __ptext35:
  8047                           	callstack 0
  8048   004CB0                     ___wmul:
  8049                           	callstack 25
  8050   004CB0  5005               	movf	___wmul@multiplier^0,w,c
  8051   004CB2  0207               	mulwf	___wmul@multiplicand^0,c
  8052   004CB4  CFF3 F009          	movff	prodl,___wmul@product
  8053   004CB8  CFF4 F00A          	movff	prodh,___wmul@product+1
  8054   004CBC  5005               	movf	___wmul@multiplier^0,w,c
  8055   004CBE  0208               	mulwf	(___wmul@multiplicand+1)^0,c
  8056   004CC0  50F3               	movf	243,w,c
  8057   004CC2  260A               	addwf	(___wmul@product+1)^0,f,c
  8058   004CC4  5006               	movf	(___wmul@multiplier+1)^0,w,c
  8059   004CC6  0207               	mulwf	___wmul@multiplicand^0,c
  8060   004CC8  50F3               	movf	243,w,c
  8061   004CCA  260A               	addwf	(___wmul@product+1)^0,f,c
  8062   004CCC  C009  F005         	movff	___wmul@product,?___wmul
  8063   004CD0  C00A  F006         	movff	___wmul@product+1,?___wmul+1
  8064   004CD4  0012               	return		;funcret
  8065   004CD6                     __end_of___wmul:
  8066                           	callstack 0
  8067                           
  8068 ;; *************** function ___lwdiv *****************
  8069 ;; Defined at:
  8070 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  8071 ;; Parameters:    Size  Location     Type
  8072 ;;  dividend        2   10[COMRAM] unsigned int 
  8073 ;;  divisor         2   12[COMRAM] unsigned int 
  8074 ;; Auto vars:     Size  Location     Type
  8075 ;;  quotient        2   14[COMRAM] unsigned int 
  8076 ;;  counter         1   16[COMRAM] unsigned char 
  8077 ;; Return value:  Size  Location     Type
  8078 ;;                  2   10[COMRAM] unsigned int 
  8079 ;; Registers used:
  8080 ;;		wreg, status,2, status,0
  8081 ;; Tracked objects:
  8082 ;;		On entry : 0/0
  8083 ;;		On exit  : 0/0
  8084 ;;		Unchanged: 0/0
  8085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8086 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8087 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8089 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8090 ;;Total ram usage:        7 bytes
  8091 ;; Hardware stack levels used: 1
  8092 ;; Hardware stack levels required when called: 2
  8093 ;; This function calls:
  8094 ;;		Nothing
  8095 ;; This function is called by:
  8096 ;;		_setMotorPWM
  8097 ;; This function uses a non-reentrant model
  8098 ;;
  8099                           
  8100                           	psect	text36
  8101   004732                     __ptext36:
  8102                           	callstack 0
  8103   004732                     ___lwdiv:
  8104                           	callstack 25
  8105   004732  0E00               	movlw	0
  8106   004734  6E10               	movwf	(___lwdiv@quotient+1)^0,c
  8107   004736  0E00               	movlw	0
  8108   004738  6E0F               	movwf	___lwdiv@quotient^0,c
  8109   00473A  500D               	movf	___lwdiv@divisor^0,w,c
  8110   00473C  100E               	iorwf	(___lwdiv@divisor+1)^0,w,c
  8111   00473E  B4D8               	btfsc	status,2,c
  8112   004740  EFA4  F023         	goto	u2801
  8113   004744  EFA6  F023         	goto	u2800
  8114   004748                     u2801:
  8115   004748  EFCE  F023         	goto	l1046
  8116   00474C                     u2800:
  8117   00474C  0E01               	movlw	1
  8118   00474E  6E11               	movwf	___lwdiv@counter^0,c
  8119   004750  EFAE  F023         	goto	l3251
  8120   004754                     l3249:
  8121   004754  90D8               	bcf	status,0,c
  8122   004756  360D               	rlcf	___lwdiv@divisor^0,f,c
  8123   004758  360E               	rlcf	(___lwdiv@divisor+1)^0,f,c
  8124   00475A  2A11               	incf	___lwdiv@counter^0,f,c
  8125   00475C                     l3251:
  8126   00475C  AE0E               	btfss	(___lwdiv@divisor+1)^0,7,c
  8127   00475E  EFB3  F023         	goto	u2811
  8128   004762  EFB5  F023         	goto	u2810
  8129   004766                     u2811:
  8130   004766  EFAA  F023         	goto	l3249
  8131   00476A                     u2810:
  8132   00476A                     l3253:
  8133   00476A  90D8               	bcf	status,0,c
  8134   00476C  360F               	rlcf	___lwdiv@quotient^0,f,c
  8135   00476E  3610               	rlcf	(___lwdiv@quotient+1)^0,f,c
  8136   004770  500D               	movf	___lwdiv@divisor^0,w,c
  8137   004772  5C0B               	subwf	___lwdiv@dividend^0,w,c
  8138   004774  500E               	movf	(___lwdiv@divisor+1)^0,w,c
  8139   004776  580C               	subwfb	(___lwdiv@dividend+1)^0,w,c
  8140   004778  A0D8               	btfss	status,0,c
  8141   00477A  EFC1  F023         	goto	u2821
  8142   00477E  EFC3  F023         	goto	u2820
  8143   004782                     u2821:
  8144   004782  EFC8  F023         	goto	l3261
  8145   004786                     u2820:
  8146   004786  500D               	movf	___lwdiv@divisor^0,w,c
  8147   004788  5E0B               	subwf	___lwdiv@dividend^0,f,c
  8148   00478A  500E               	movf	(___lwdiv@divisor+1)^0,w,c
  8149   00478C  5A0C               	subwfb	(___lwdiv@dividend+1)^0,f,c
  8150   00478E  800F               	bsf	___lwdiv@quotient^0,0,c
  8151   004790                     l3261:
  8152   004790  90D8               	bcf	status,0,c
  8153   004792  320E               	rrcf	(___lwdiv@divisor+1)^0,f,c
  8154   004794  320D               	rrcf	___lwdiv@divisor^0,f,c
  8155   004796  2E11               	decfsz	___lwdiv@counter^0,f,c
  8156   004798  EFB5  F023         	goto	l3253
  8157   00479C                     l1046:
  8158   00479C  C00F  F00B         	movff	___lwdiv@quotient,?___lwdiv
  8159   0047A0  C010  F00C         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8160   0047A4  0012               	return		;funcret
  8161   0047A6                     __end_of___lwdiv:
  8162                           	callstack 0
  8163                           
  8164 ;; *************** function ___xxtofl *****************
  8165 ;; Defined at:
  8166 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\xxtofl.c"
  8167 ;; Parameters:    Size  Location     Type
  8168 ;;  sign            1    wreg     unsigned char 
  8169 ;;  val             4    4[COMRAM] long 
  8170 ;; Auto vars:     Size  Location     Type
  8171 ;;  sign            1   12[COMRAM] unsigned char 
  8172 ;;  arg             4   14[COMRAM] unsigned long 
  8173 ;;  exp             1   13[COMRAM] unsigned char 
  8174 ;; Return value:  Size  Location     Type
  8175 ;;                  4    4[COMRAM] unsigned char 
  8176 ;; Registers used:
  8177 ;;		wreg, status,2, status,0
  8178 ;; Tracked objects:
  8179 ;;		On entry : 0/0
  8180 ;;		On exit  : 0/0
  8181 ;;		Unchanged: 0/0
  8182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8183 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8184 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8185 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8186 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8187 ;;Total ram usage:       14 bytes
  8188 ;; Hardware stack levels used: 1
  8189 ;; Hardware stack levels required when called: 2
  8190 ;; This function calls:
  8191 ;;		Nothing
  8192 ;; This function is called by:
  8193 ;;		_colorDetect
  8194 ;;		_turnLeft_90
  8195 ;;		_turnRight_90
  8196 ;;		_turn_180
  8197 ;;		_turnRight_135
  8198 ;;		_turnLeft_135
  8199 ;;		_reverseSquareRight
  8200 ;;		_reverseSquareLeft
  8201 ;;		_main
  8202 ;;		_turnLeft
  8203 ;;		_turnRight
  8204 ;; This function uses a non-reentrant model
  8205 ;;
  8206                           
  8207                           	psect	text37
  8208   0031DA                     __ptext37:
  8209                           	callstack 0
  8210   0031DA                     ___xxtofl:
  8211                           	callstack 27
  8212                           
  8213                           ;incstack = 0
  8214                           ;___xxtofl@sign stored from wreg
  8215   0031DA  6E0D               	movwf	___xxtofl@sign^0,c
  8216   0031DC  500D               	movf	___xxtofl@sign^0,w,c
  8217   0031DE  B4D8               	btfsc	status,2,c
  8218   0031E0  EFF4  F018         	goto	u4211
  8219   0031E4  EFF6  F018         	goto	u4210
  8220   0031E8                     u4211:
  8221   0031E8  EF18  F019         	goto	l1210
  8222   0031EC                     u4210:
  8223   0031EC  BE08               	btfsc	(___xxtofl@val+3)^0,7,c
  8224   0031EE  EFFD  F018         	goto	u4220
  8225   0031F2  EFFB  F018         	goto	u4221
  8226   0031F6                     u4221:
  8227   0031F6  EF18  F019         	goto	l1210
  8228   0031FA                     u4220:
  8229   0031FA  C005  F009         	movff	___xxtofl@val,??___xxtofl
  8230   0031FE  C006  F00A         	movff	___xxtofl@val+1,??___xxtofl+1
  8231   003202  C007  F00B         	movff	___xxtofl@val+2,??___xxtofl+2
  8232   003206  C008  F00C         	movff	___xxtofl@val+3,??___xxtofl+3
  8233   00320A  1E09               	comf	??___xxtofl^0,f,c
  8234   00320C  1E0A               	comf	(??___xxtofl+1)^0,f,c
  8235   00320E  1E0B               	comf	(??___xxtofl+2)^0,f,c
  8236   003210  1E0C               	comf	(??___xxtofl+3)^0,f,c
  8237   003212  2A09               	incf	??___xxtofl^0,f,c
  8238   003214  0E00               	movlw	0
  8239   003216  220A               	addwfc	(??___xxtofl+1)^0,f,c
  8240   003218  220B               	addwfc	(??___xxtofl+2)^0,f,c
  8241   00321A  220C               	addwfc	(??___xxtofl+3)^0,f,c
  8242   00321C  C009  F00F         	movff	??___xxtofl,___xxtofl@arg
  8243   003220  C00A  F010         	movff	??___xxtofl+1,___xxtofl@arg+1
  8244   003224  C00B  F011         	movff	??___xxtofl+2,___xxtofl@arg+2
  8245   003228  C00C  F012         	movff	??___xxtofl+3,___xxtofl@arg+3
  8246   00322C  EF20  F019         	goto	l4251
  8247   003230                     l1210:
  8248   003230  C005  F00F         	movff	___xxtofl@val,___xxtofl@arg
  8249   003234  C006  F010         	movff	___xxtofl@val+1,___xxtofl@arg+1
  8250   003238  C007  F011         	movff	___xxtofl@val+2,___xxtofl@arg+2
  8251   00323C  C008  F012         	movff	___xxtofl@val+3,___xxtofl@arg+3
  8252   003240                     l4251:
  8253   003240  5005               	movf	___xxtofl@val^0,w,c
  8254   003242  1006               	iorwf	(___xxtofl@val+1)^0,w,c
  8255   003244  1007               	iorwf	(___xxtofl@val+2)^0,w,c
  8256   003246  1008               	iorwf	(___xxtofl@val+3)^0,w,c
  8257   003248  A4D8               	btfss	status,2,c
  8258   00324A  EF29  F019         	goto	u4231
  8259   00324E  EF2B  F019         	goto	u4230
  8260   003252                     u4231:
  8261   003252  EF35  F019         	goto	l4257
  8262   003256                     u4230:
  8263   003256  0E00               	movlw	0
  8264   003258  6E05               	movwf	?___xxtofl^0,c
  8265   00325A  0E00               	movlw	0
  8266   00325C  6E06               	movwf	(?___xxtofl+1)^0,c
  8267   00325E  0E00               	movlw	0
  8268   003260  6E07               	movwf	(?___xxtofl+2)^0,c
  8269   003262  0E00               	movlw	0
  8270   003264  6E08               	movwf	(?___xxtofl+3)^0,c
  8271   003266  EFC6  F019         	goto	l1213
  8272   00326A                     l4257:
  8273   00326A  0E96               	movlw	150
  8274   00326C  6E0E               	movwf	___xxtofl@exp^0,c
  8275   00326E  EF3F  F019         	goto	l4261
  8276   003272                     l4259:
  8277   003272  2A0E               	incf	___xxtofl@exp^0,f,c
  8278   003274  90D8               	bcf	status,0,c
  8279   003276  3212               	rrcf	(___xxtofl@arg+3)^0,f,c
  8280   003278  3211               	rrcf	(___xxtofl@arg+2)^0,f,c
  8281   00327A  3210               	rrcf	(___xxtofl@arg+1)^0,f,c
  8282   00327C  320F               	rrcf	___xxtofl@arg^0,f,c
  8283   00327E                     l4261:
  8284   00327E  0E00               	movlw	0
  8285   003280  140F               	andwf	___xxtofl@arg^0,w,c
  8286   003282  6E09               	movwf	??___xxtofl^0,c
  8287   003284  0E00               	movlw	0
  8288   003286  1410               	andwf	(___xxtofl@arg+1)^0,w,c
  8289   003288  6E0A               	movwf	(??___xxtofl+1)^0,c
  8290   00328A  0E00               	movlw	0
  8291   00328C  1411               	andwf	(___xxtofl@arg+2)^0,w,c
  8292   00328E  6E0B               	movwf	(??___xxtofl+2)^0,c
  8293   003290  0EFE               	movlw	254
  8294   003292  1412               	andwf	(___xxtofl@arg+3)^0,w,c
  8295   003294  6E0C               	movwf	(??___xxtofl+3)^0,c
  8296   003296  5009               	movf	??___xxtofl^0,w,c
  8297   003298  100A               	iorwf	(??___xxtofl+1)^0,w,c
  8298   00329A  100B               	iorwf	(??___xxtofl+2)^0,w,c
  8299   00329C  100C               	iorwf	(??___xxtofl+3)^0,w,c
  8300   00329E  A4D8               	btfss	status,2,c
  8301   0032A0  EF54  F019         	goto	u4241
  8302   0032A4  EF56  F019         	goto	u4240
  8303   0032A8                     u4241:
  8304   0032A8  EF39  F019         	goto	l4259
  8305   0032AC                     u4240:
  8306   0032AC  EF64  F019         	goto	l1217
  8307   0032B0                     l4263:
  8308   0032B0  2A0E               	incf	___xxtofl@exp^0,f,c
  8309   0032B2  0E01               	movlw	1
  8310   0032B4  260F               	addwf	___xxtofl@arg^0,f,c
  8311   0032B6  0E00               	movlw	0
  8312   0032B8  2210               	addwfc	(___xxtofl@arg+1)^0,f,c
  8313   0032BA  2211               	addwfc	(___xxtofl@arg+2)^0,f,c
  8314   0032BC  2212               	addwfc	(___xxtofl@arg+3)^0,f,c
  8315   0032BE  90D8               	bcf	status,0,c
  8316   0032C0  3212               	rrcf	(___xxtofl@arg+3)^0,f,c
  8317   0032C2  3211               	rrcf	(___xxtofl@arg+2)^0,f,c
  8318   0032C4  3210               	rrcf	(___xxtofl@arg+1)^0,f,c
  8319   0032C6  320F               	rrcf	___xxtofl@arg^0,f,c
  8320   0032C8                     l1217:
  8321   0032C8  0E00               	movlw	0
  8322   0032CA  140F               	andwf	___xxtofl@arg^0,w,c
  8323   0032CC  6E09               	movwf	??___xxtofl^0,c
  8324   0032CE  0E00               	movlw	0
  8325   0032D0  1410               	andwf	(___xxtofl@arg+1)^0,w,c
  8326   0032D2  6E0A               	movwf	(??___xxtofl+1)^0,c
  8327   0032D4  0E00               	movlw	0
  8328   0032D6  1411               	andwf	(___xxtofl@arg+2)^0,w,c
  8329   0032D8  6E0B               	movwf	(??___xxtofl+2)^0,c
  8330   0032DA  0EFF               	movlw	255
  8331   0032DC  1412               	andwf	(___xxtofl@arg+3)^0,w,c
  8332   0032DE  6E0C               	movwf	(??___xxtofl+3)^0,c
  8333   0032E0  5009               	movf	??___xxtofl^0,w,c
  8334   0032E2  100A               	iorwf	(??___xxtofl+1)^0,w,c
  8335   0032E4  100B               	iorwf	(??___xxtofl+2)^0,w,c
  8336   0032E6  100C               	iorwf	(??___xxtofl+3)^0,w,c
  8337   0032E8  A4D8               	btfss	status,2,c
  8338   0032EA  EF79  F019         	goto	u4251
  8339   0032EE  EF7B  F019         	goto	u4250
  8340   0032F2                     u4251:
  8341   0032F2  EF58  F019         	goto	l4263
  8342   0032F6                     u4250:
  8343   0032F6  EF83  F019         	goto	l4271
  8344   0032FA                     l4269:
  8345   0032FA  060E               	decf	___xxtofl@exp^0,f,c
  8346   0032FC  90D8               	bcf	status,0,c
  8347   0032FE  360F               	rlcf	___xxtofl@arg^0,f,c
  8348   003300  3610               	rlcf	(___xxtofl@arg+1)^0,f,c
  8349   003302  3611               	rlcf	(___xxtofl@arg+2)^0,f,c
  8350   003304  3612               	rlcf	(___xxtofl@arg+3)^0,f,c
  8351   003306                     l4271:
  8352   003306  BE11               	btfsc	(___xxtofl@arg+2)^0,7,c
  8353   003308  EF88  F019         	goto	u4261
  8354   00330C  EF8A  F019         	goto	u4260
  8355   003310                     u4261:
  8356   003310  EF92  F019         	goto	l1224
  8357   003314                     u4260:
  8358   003314  0E02               	movlw	2
  8359   003316  600E               	cpfslt	___xxtofl@exp^0,c
  8360   003318  EF90  F019         	goto	u4271
  8361   00331C  EF92  F019         	goto	u4270
  8362   003320                     u4271:
  8363   003320  EF7D  F019         	goto	l4269
  8364   003324                     u4270:
  8365   003324                     l1224:
  8366   003324  B00E               	btfsc	___xxtofl@exp^0,0,c
  8367   003326  EF97  F019         	goto	u4281
  8368   00332A  EF99  F019         	goto	u4280
  8369   00332E                     u4281:
  8370   00332E  EF9A  F019         	goto	l4277
  8371   003332                     u4280:
  8372   003332  9E11               	bcf	(___xxtofl@arg+2)^0,7,c
  8373   003334                     l4277:
  8374   003334  90D8               	bcf	status,0,c
  8375   003336  320E               	rrcf	___xxtofl@exp^0,f,c
  8376   003338  C00E  F009         	movff	___xxtofl@exp,??___xxtofl
  8377   00333C  6A0A               	clrf	(??___xxtofl+1)^0,c
  8378   00333E  6A0B               	clrf	(??___xxtofl+2)^0,c
  8379   003340  6A0C               	clrf	(??___xxtofl+3)^0,c
  8380   003342  C009  F00C         	movff	??___xxtofl,??___xxtofl+3
  8381   003346  6A0B               	clrf	(??___xxtofl+2)^0,c
  8382   003348  6A0A               	clrf	(??___xxtofl+1)^0,c
  8383   00334A  6A09               	clrf	??___xxtofl^0,c
  8384   00334C  5009               	movf	??___xxtofl^0,w,c
  8385   00334E  120F               	iorwf	___xxtofl@arg^0,f,c
  8386   003350  500A               	movf	(??___xxtofl+1)^0,w,c
  8387   003352  1210               	iorwf	(___xxtofl@arg+1)^0,f,c
  8388   003354  500B               	movf	(??___xxtofl+2)^0,w,c
  8389   003356  1211               	iorwf	(___xxtofl@arg+2)^0,f,c
  8390   003358  500C               	movf	(??___xxtofl+3)^0,w,c
  8391   00335A  1212               	iorwf	(___xxtofl@arg+3)^0,f,c
  8392   00335C  500D               	movf	___xxtofl@sign^0,w,c
  8393   00335E  B4D8               	btfsc	status,2,c
  8394   003360  EFB4  F019         	goto	u4291
  8395   003364  EFB6  F019         	goto	u4290
  8396   003368                     u4291:
  8397   003368  EFBE  F019         	goto	l4287
  8398   00336C                     u4290:
  8399   00336C  BE08               	btfsc	(___xxtofl@val+3)^0,7,c
  8400   00336E  EFBD  F019         	goto	u4300
  8401   003372  EFBB  F019         	goto	u4301
  8402   003376                     u4301:
  8403   003376  EFBE  F019         	goto	l4287
  8404   00337A                     u4300:
  8405   00337A  8E12               	bsf	(___xxtofl@arg+3)^0,7,c
  8406   00337C                     l4287:
  8407   00337C  C00F  F005         	movff	___xxtofl@arg,?___xxtofl
  8408   003380  C010  F006         	movff	___xxtofl@arg+1,?___xxtofl+1
  8409   003384  C011  F007         	movff	___xxtofl@arg+2,?___xxtofl+2
  8410   003388  C012  F008         	movff	___xxtofl@arg+3,?___xxtofl+3
  8411   00338C                     l1213:
  8412   00338C  0012               	return		;funcret
  8413   00338E                     __end_of___xxtofl:
  8414                           	callstack 0
  8415                           
  8416 ;; *************** function ___flsub *****************
  8417 ;; Defined at:
  8418 ;;		line 245 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\sprcadd.c"
  8419 ;; Parameters:    Size  Location     Type
  8420 ;;  b               4   20[COMRAM] unsigned char 
  8421 ;;  a               4   24[COMRAM] unsigned char 
  8422 ;; Auto vars:     Size  Location     Type
  8423 ;;		None
  8424 ;; Return value:  Size  Location     Type
  8425 ;;                  4   20[COMRAM] unsigned char 
  8426 ;; Registers used:
  8427 ;;		wreg, status,2, status,0, cstack
  8428 ;; Tracked objects:
  8429 ;;		On entry : 0/0
  8430 ;;		On exit  : 0/0
  8431 ;;		Unchanged: 0/0
  8432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8433 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8436 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8437 ;;Total ram usage:        8 bytes
  8438 ;; Hardware stack levels used: 1
  8439 ;; Hardware stack levels required when called: 3
  8440 ;; This function calls:
  8441 ;;		___fladd
  8442 ;; This function is called by:
  8443 ;;		_colorDetect
  8444 ;; This function uses a non-reentrant model
  8445 ;;
  8446                           
  8447                           	psect	text38
  8448   004A40                     __ptext38:
  8449                           	callstack 0
  8450   004A40                     ___flsub:
  8451                           	callstack 26
  8452   004A40  0E00               	movlw	0
  8453   004A42  1A19               	xorwf	___flsub@a^0,f,c
  8454   004A44  0E00               	movlw	0
  8455   004A46  1A1A               	xorwf	(___flsub@a+1)^0,f,c
  8456   004A48  0E00               	movlw	0
  8457   004A4A  1A1B               	xorwf	(___flsub@a+2)^0,f,c
  8458   004A4C  0E80               	movlw	128
  8459   004A4E  1A1C               	xorwf	(___flsub@a+3)^0,f,c
  8460   004A50  C015  F005         	movff	___flsub@b,___fladd@b
  8461   004A54  C016  F006         	movff	___flsub@b+1,___fladd@b+1
  8462   004A58  C017  F007         	movff	___flsub@b+2,___fladd@b+2
  8463   004A5C  C018  F008         	movff	___flsub@b+3,___fladd@b+3
  8464   004A60  C019  F009         	movff	___flsub@a,___fladd@a
  8465   004A64  C01A  F00A         	movff	___flsub@a+1,___fladd@a+1
  8466   004A68  C01B  F00B         	movff	___flsub@a+2,___fladd@a+2
  8467   004A6C  C01C  F00C         	movff	___flsub@a+3,___fladd@a+3
  8468   004A70  ECFA  F00C         	call	___fladd	;wreg free
  8469   004A74  C005  F015         	movff	?___fladd,?___flsub
  8470   004A78  C006  F016         	movff	?___fladd+1,?___flsub+1
  8471   004A7C  C007  F017         	movff	?___fladd+2,?___flsub+2
  8472   004A80  C008  F018         	movff	?___fladd+3,?___flsub+3
  8473   004A84  0012               	return		;funcret
  8474   004A86                     __end_of___flsub:
  8475                           	callstack 0
  8476                           
  8477 ;; *************** function ___fladd *****************
  8478 ;; Defined at:
  8479 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\sprcadd.c"
  8480 ;; Parameters:    Size  Location     Type
  8481 ;;  b               4    4[COMRAM] unsigned char 
  8482 ;;  a               4    8[COMRAM] unsigned char 
  8483 ;; Auto vars:     Size  Location     Type
  8484 ;;  grs             1   19[COMRAM] unsigned char 
  8485 ;;  bexp            1   18[COMRAM] unsigned char 
  8486 ;;  aexp            1   17[COMRAM] unsigned char 
  8487 ;;  signs           1   16[COMRAM] unsigned char 
  8488 ;; Return value:  Size  Location     Type
  8489 ;;                  4    4[COMRAM] unsigned char 
  8490 ;; Registers used:
  8491 ;;		wreg, status,2, status,0
  8492 ;; Tracked objects:
  8493 ;;		On entry : 0/0
  8494 ;;		On exit  : 0/0
  8495 ;;		Unchanged: 0/0
  8496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8497 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8498 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8499 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8500 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8501 ;;Total ram usage:       16 bytes
  8502 ;; Hardware stack levels used: 1
  8503 ;; Hardware stack levels required when called: 2
  8504 ;; This function calls:
  8505 ;;		Nothing
  8506 ;; This function is called by:
  8507 ;;		___flsub
  8508 ;; This function uses a non-reentrant model
  8509 ;;
  8510                           
  8511                           	psect	text39
  8512   0019F4                     __ptext39:
  8513                           	callstack 0
  8514   0019F4                     ___fladd:
  8515                           	callstack 26
  8516   0019F4  5008               	movf	(___fladd@b+3)^0,w,c
  8517   0019F6  0B80               	andlw	128
  8518   0019F8  6E11               	movwf	___fladd@signs^0,c
  8519   0019FA  5008               	movf	(___fladd@b+3)^0,w,c
  8520   0019FC  2408               	addwf	(___fladd@b+3)^0,w,c
  8521   0019FE  6E13               	movwf	___fladd@bexp^0,c
  8522   001A00  AE07               	btfss	(___fladd@b+2)^0,7,c
  8523   001A02  EF05  F00D         	goto	u3201
  8524   001A06  EF07  F00D         	goto	u3200
  8525   001A0A                     u3201:
  8526   001A0A  EF08  F00D         	goto	l3553
  8527   001A0E                     u3200:
  8528   001A0E  8013               	bsf	___fladd@bexp^0,0,c
  8529   001A10                     l3553:
  8530   001A10  5013               	movf	___fladd@bexp^0,w,c
  8531   001A12  B4D8               	btfsc	status,2,c
  8532   001A14  EF0E  F00D         	goto	u3211
  8533   001A18  EF10  F00D         	goto	u3210
  8534   001A1C                     u3211:
  8535   001A1C  EF25  F00D         	goto	l3563
  8536   001A20                     u3210:
  8537   001A20  2813               	incf	___fladd@bexp^0,w,c
  8538   001A22  A4D8               	btfss	status,2,c
  8539   001A24  EF16  F00D         	goto	u3221
  8540   001A28  EF18  F00D         	goto	u3220
  8541   001A2C                     u3221:
  8542   001A2C  EF20  F00D         	goto	l3559
  8543   001A30                     u3220:
  8544   001A30  0E00               	movlw	0
  8545   001A32  6E05               	movwf	___fladd@b^0,c
  8546   001A34  0E00               	movlw	0
  8547   001A36  6E06               	movwf	(___fladd@b+1)^0,c
  8548   001A38  0E00               	movlw	0
  8549   001A3A  6E07               	movwf	(___fladd@b+2)^0,c
  8550   001A3C  0E00               	movlw	0
  8551   001A3E  6E08               	movwf	(___fladd@b+3)^0,c
  8552   001A40                     l3559:
  8553   001A40  8E07               	bsf	(___fladd@b+2)^0,7,c
  8554   001A42  0E00               	movlw	0
  8555   001A44  6E08               	movwf	(___fladd@b+3)^0,c
  8556   001A46  EF2D  F00D         	goto	l3565
  8557   001A4A                     l3563:
  8558   001A4A  0E00               	movlw	0
  8559   001A4C  6E05               	movwf	___fladd@b^0,c
  8560   001A4E  0E00               	movlw	0
  8561   001A50  6E06               	movwf	(___fladd@b+1)^0,c
  8562   001A52  0E00               	movlw	0
  8563   001A54  6E07               	movwf	(___fladd@b+2)^0,c
  8564   001A56  0E00               	movlw	0
  8565   001A58  6E08               	movwf	(___fladd@b+3)^0,c
  8566   001A5A                     l3565:
  8567   001A5A  500C               	movf	(___fladd@a+3)^0,w,c
  8568   001A5C  0B80               	andlw	128
  8569   001A5E  6E12               	movwf	___fladd@aexp^0,c
  8570   001A60  5011               	movf	___fladd@signs^0,w,c
  8571   001A62  1812               	xorwf	___fladd@aexp^0,w,c
  8572   001A64  B4D8               	btfsc	status,2,c
  8573   001A66  EF37  F00D         	goto	u3231
  8574   001A6A  EF39  F00D         	goto	u3230
  8575   001A6E                     u3231:
  8576   001A6E  EF3A  F00D         	goto	l3571
  8577   001A72                     u3230:
  8578   001A72  8C11               	bsf	___fladd@signs^0,6,c
  8579   001A74                     l3571:
  8580   001A74  500C               	movf	(___fladd@a+3)^0,w,c
  8581   001A76  240C               	addwf	(___fladd@a+3)^0,w,c
  8582   001A78  6E12               	movwf	___fladd@aexp^0,c
  8583   001A7A  AE0B               	btfss	(___fladd@a+2)^0,7,c
  8584   001A7C  EF42  F00D         	goto	u3241
  8585   001A80  EF44  F00D         	goto	u3240
  8586   001A84                     u3241:
  8587   001A84  EF45  F00D         	goto	l3577
  8588   001A88                     u3240:
  8589   001A88  8012               	bsf	___fladd@aexp^0,0,c
  8590   001A8A                     l3577:
  8591   001A8A  5012               	movf	___fladd@aexp^0,w,c
  8592   001A8C  B4D8               	btfsc	status,2,c
  8593   001A8E  EF4B  F00D         	goto	u3251
  8594   001A92  EF4D  F00D         	goto	u3250
  8595   001A96                     u3251:
  8596   001A96  EF62  F00D         	goto	l3587
  8597   001A9A                     u3250:
  8598   001A9A  2812               	incf	___fladd@aexp^0,w,c
  8599   001A9C  A4D8               	btfss	status,2,c
  8600   001A9E  EF53  F00D         	goto	u3261
  8601   001AA2  EF55  F00D         	goto	u3260
  8602   001AA6                     u3261:
  8603   001AA6  EF5D  F00D         	goto	l3583
  8604   001AAA                     u3260:
  8605   001AAA  0E00               	movlw	0
  8606   001AAC  6E09               	movwf	___fladd@a^0,c
  8607   001AAE  0E00               	movlw	0
  8608   001AB0  6E0A               	movwf	(___fladd@a+1)^0,c
  8609   001AB2  0E00               	movlw	0
  8610   001AB4  6E0B               	movwf	(___fladd@a+2)^0,c
  8611   001AB6  0E00               	movlw	0
  8612   001AB8  6E0C               	movwf	(___fladd@a+3)^0,c
  8613   001ABA                     l3583:
  8614   001ABA  8E0B               	bsf	(___fladd@a+2)^0,7,c
  8615   001ABC  0E00               	movlw	0
  8616   001ABE  6E0C               	movwf	(___fladd@a+3)^0,c
  8617   001AC0  EF6A  F00D         	goto	l3589
  8618   001AC4                     l3587:
  8619   001AC4  0E00               	movlw	0
  8620   001AC6  6E09               	movwf	___fladd@a^0,c
  8621   001AC8  0E00               	movlw	0
  8622   001ACA  6E0A               	movwf	(___fladd@a+1)^0,c
  8623   001ACC  0E00               	movlw	0
  8624   001ACE  6E0B               	movwf	(___fladd@a+2)^0,c
  8625   001AD0  0E00               	movlw	0
  8626   001AD2  6E0C               	movwf	(___fladd@a+3)^0,c
  8627   001AD4                     l3589:
  8628   001AD4  5013               	movf	___fladd@bexp^0,w,c
  8629   001AD6  5C12               	subwf	___fladd@aexp^0,w,c
  8630   001AD8  B0D8               	btfsc	status,0,c
  8631   001ADA  EF71  F00D         	goto	u3271
  8632   001ADE  EF73  F00D         	goto	u3270
  8633   001AE2                     u3271:
  8634   001AE2  EF9A  F00D         	goto	l3625
  8635   001AE6                     u3270:
  8636   001AE6  AC11               	btfss	___fladd@signs^0,6,c
  8637   001AE8  EF78  F00D         	goto	u3281
  8638   001AEC  EF7A  F00D         	goto	u3280
  8639   001AF0                     u3281:
  8640   001AF0  EF7C  F00D         	goto	l3595
  8641   001AF4                     u3280:
  8642   001AF4  0E80               	movlw	128
  8643   001AF6  1A11               	xorwf	___fladd@signs^0,f,c
  8644   001AF8                     l3595:
  8645   001AF8  C013  F014         	movff	___fladd@bexp,___fladd@grs
  8646   001AFC  C012  F013         	movff	___fladd@aexp,___fladd@bexp
  8647   001B00  C014  F012         	movff	___fladd@grs,___fladd@aexp
  8648   001B04  C005  F014         	movff	___fladd@b,___fladd@grs
  8649   001B08  C009  F005         	movff	___fladd@a,___fladd@b
  8650   001B0C  C014  F009         	movff	___fladd@grs,___fladd@a
  8651   001B10  C006  F014         	movff	___fladd@b+1,___fladd@grs
  8652   001B14  C00A  F006         	movff	___fladd@a+1,___fladd@b+1
  8653   001B18  C014  F00A         	movff	___fladd@grs,___fladd@a+1
  8654   001B1C  C007  F014         	movff	___fladd@b+2,___fladd@grs
  8655   001B20  C00B  F007         	movff	___fladd@a+2,___fladd@b+2
  8656   001B24  C014  F00B         	movff	___fladd@grs,___fladd@a+2
  8657   001B28  C008  F014         	movff	___fladd@b+3,___fladd@grs
  8658   001B2C  C00C  F008         	movff	___fladd@a+3,___fladd@b+3
  8659   001B30  C014  F00C         	movff	___fladd@grs,___fladd@a+3
  8660   001B34                     l3625:
  8661   001B34  0E00               	movlw	0
  8662   001B36  6E14               	movwf	___fladd@grs^0,c
  8663   001B38  5013               	movf	___fladd@bexp^0,w,c
  8664   001B3A  C012  F00D         	movff	___fladd@aexp,??___fladd
  8665   001B3E  6A0E               	clrf	(??___fladd+1)^0,c
  8666   001B40  5E0D               	subwf	??___fladd^0,f,c
  8667   001B42  0E00               	movlw	0
  8668   001B44  5A0E               	subwfb	(??___fladd+1)^0,f,c
  8669   001B46  BE0E               	btfsc	(??___fladd+1)^0,7,c
  8670   001B48  EFAF  F00D         	goto	u3291
  8671   001B4C  500E               	movf	(??___fladd+1)^0,w,c
  8672   001B4E  E109               	bnz	u3290
  8673   001B50  0E1A               	movlw	26
  8674   001B52  5C0D               	subwf	??___fladd^0,w,c
  8675   001B54  A0D8               	btfss	status,0,c
  8676   001B56  EFAF  F00D         	goto	u3291
  8677   001B5A  EFB1  F00D         	goto	u3290
  8678   001B5E                     u3291:
  8679   001B5E  EFE8  F00D         	goto	l1084
  8680   001B62                     u3290:
  8681   001B62  5005               	movf	___fladd@b^0,w,c
  8682   001B64  1006               	iorwf	(___fladd@b+1)^0,w,c
  8683   001B66  1007               	iorwf	(___fladd@b+2)^0,w,c
  8684   001B68  1008               	iorwf	(___fladd@b+3)^0,w,c
  8685   001B6A  A4D8               	btfss	status,2,c
  8686   001B6C  EFBA  F00D         	goto	u3301
  8687   001B70  EFBD  F00D         	goto	u3300
  8688   001B74                     u3301:
  8689   001B74  0E01               	movlw	1
  8690   001B76  EFBE  F00D         	goto	u3310
  8691   001B7A                     u3300:
  8692   001B7A  0E00               	movlw	0
  8693   001B7C                     u3310:
  8694   001B7C  6E14               	movwf	___fladd@grs^0,c
  8695   001B7E  0E00               	movlw	0
  8696   001B80  6E05               	movwf	___fladd@b^0,c
  8697   001B82  0E00               	movlw	0
  8698   001B84  6E06               	movwf	(___fladd@b+1)^0,c
  8699   001B86  0E00               	movlw	0
  8700   001B88  6E07               	movwf	(___fladd@b+2)^0,c
  8701   001B8A  0E00               	movlw	0
  8702   001B8C  6E08               	movwf	(___fladd@b+3)^0,c
  8703   001B8E  C012  F013         	movff	___fladd@aexp,___fladd@bexp
  8704   001B92  EFF1  F00D         	goto	l1083
  8705   001B96                     l1085:
  8706   001B96  A014               	btfss	___fladd@grs^0,0,c
  8707   001B98  EFD0  F00D         	goto	u3321
  8708   001B9C  EFD2  F00D         	goto	u3320
  8709   001BA0                     u3321:
  8710   001BA0  EFD8  F00D         	goto	l3637
  8711   001BA4                     u3320:
  8712   001BA4  90D8               	bcf	status,0,c
  8713   001BA6  3014               	rrcf	___fladd@grs^0,w,c
  8714   001BA8  0901               	iorlw	1
  8715   001BAA  6E14               	movwf	___fladd@grs^0,c
  8716   001BAC  EFDA  F00D         	goto	l3639
  8717   001BB0                     l3637:
  8718   001BB0  90D8               	bcf	status,0,c
  8719   001BB2  3214               	rrcf	___fladd@grs^0,f,c
  8720   001BB4                     l3639:
  8721   001BB4  A005               	btfss	___fladd@b^0,0,c
  8722   001BB6  EFDF  F00D         	goto	u3331
  8723   001BBA  EFE1  F00D         	goto	u3330
  8724   001BBE                     u3331:
  8725   001BBE  EFE2  F00D         	goto	l3643
  8726   001BC2                     u3330:
  8727   001BC2  8E14               	bsf	___fladd@grs^0,7,c
  8728   001BC4                     l3643:
  8729   001BC4  3408               	rlcf	(___fladd@b+3)^0,w,c
  8730   001BC6  3208               	rrcf	(___fladd@b+3)^0,f,c
  8731   001BC8  3207               	rrcf	(___fladd@b+2)^0,f,c
  8732   001BCA  3206               	rrcf	(___fladd@b+1)^0,f,c
  8733   001BCC  3205               	rrcf	___fladd@b^0,f,c
  8734   001BCE  2A13               	incf	___fladd@bexp^0,f,c
  8735   001BD0                     l1084:
  8736   001BD0  5012               	movf	___fladd@aexp^0,w,c
  8737   001BD2  5C13               	subwf	___fladd@bexp^0,w,c
  8738   001BD4  A0D8               	btfss	status,0,c
  8739   001BD6  EFEF  F00D         	goto	u3341
  8740   001BDA  EFF1  F00D         	goto	u3340
  8741   001BDE                     u3341:
  8742   001BDE  EFCB  F00D         	goto	l1085
  8743   001BE2                     u3340:
  8744   001BE2                     l1083:
  8745   001BE2  BC11               	btfsc	___fladd@signs^0,6,c
  8746   001BE4  EFF6  F00D         	goto	u3351
  8747   001BE8  EFF8  F00D         	goto	u3350
  8748   001BEC                     u3351:
  8749   001BEC  EF38  F00E         	goto	l3671
  8750   001BF0                     u3350:
  8751   001BF0  5013               	movf	___fladd@bexp^0,w,c
  8752   001BF2  A4D8               	btfss	status,2,c
  8753   001BF4  EFFE  F00D         	goto	u3361
  8754   001BF8  EF00  F00E         	goto	u3360
  8755   001BFC                     u3361:
  8756   001BFC  EF0A  F00E         	goto	l3653
  8757   001C00                     u3360:
  8758   001C00  0E00               	movlw	0
  8759   001C02  6E05               	movwf	?___fladd^0,c
  8760   001C04  0E00               	movlw	0
  8761   001C06  6E06               	movwf	(?___fladd+1)^0,c
  8762   001C08  0E00               	movlw	0
  8763   001C0A  6E07               	movwf	(?___fladd+2)^0,c
  8764   001C0C  0E00               	movlw	0
  8765   001C0E  6E08               	movwf	(?___fladd+3)^0,c
  8766   001C10  EF59  F00F         	goto	l1092
  8767   001C14                     l3653:
  8768   001C14  5009               	movf	___fladd@a^0,w,c
  8769   001C16  2605               	addwf	___fladd@b^0,f,c
  8770   001C18  500A               	movf	(___fladd@a+1)^0,w,c
  8771   001C1A  2206               	addwfc	(___fladd@b+1)^0,f,c
  8772   001C1C  500B               	movf	(___fladd@a+2)^0,w,c
  8773   001C1E  2207               	addwfc	(___fladd@b+2)^0,f,c
  8774   001C20  500C               	movf	(___fladd@a+3)^0,w,c
  8775   001C22  2208               	addwfc	(___fladd@b+3)^0,f,c
  8776   001C24  A008               	btfss	(___fladd@b+3)^0,0,c
  8777   001C26  EF17  F00E         	goto	u3371
  8778   001C2A  EF19  F00E         	goto	u3370
  8779   001C2E                     u3371:
  8780   001C2E  EFC5  F00E         	goto	l3707
  8781   001C32                     u3370:
  8782   001C32  A014               	btfss	___fladd@grs^0,0,c
  8783   001C34  EF1E  F00E         	goto	u3381
  8784   001C38  EF20  F00E         	goto	u3380
  8785   001C3C                     u3381:
  8786   001C3C  EF26  F00E         	goto	l3661
  8787   001C40                     u3380:
  8788   001C40  90D8               	bcf	status,0,c
  8789   001C42  3014               	rrcf	___fladd@grs^0,w,c
  8790   001C44  0901               	iorlw	1
  8791   001C46  6E14               	movwf	___fladd@grs^0,c
  8792   001C48  EF28  F00E         	goto	l3663
  8793   001C4C                     l3661:
  8794   001C4C  90D8               	bcf	status,0,c
  8795   001C4E  3214               	rrcf	___fladd@grs^0,f,c
  8796   001C50                     l3663:
  8797   001C50  A005               	btfss	___fladd@b^0,0,c
  8798   001C52  EF2D  F00E         	goto	u3391
  8799   001C56  EF2F  F00E         	goto	u3390
  8800   001C5A                     u3391:
  8801   001C5A  EF30  F00E         	goto	l3667
  8802   001C5E                     u3390:
  8803   001C5E  8E14               	bsf	___fladd@grs^0,7,c
  8804   001C60                     l3667:
  8805   001C60  3408               	rlcf	(___fladd@b+3)^0,w,c
  8806   001C62  3208               	rrcf	(___fladd@b+3)^0,f,c
  8807   001C64  3207               	rrcf	(___fladd@b+2)^0,f,c
  8808   001C66  3206               	rrcf	(___fladd@b+1)^0,f,c
  8809   001C68  3205               	rrcf	___fladd@b^0,f,c
  8810   001C6A  2A13               	incf	___fladd@bexp^0,f,c
  8811   001C6C  EFC5  F00E         	goto	l3707
  8812   001C70                     l3671:
  8813   001C70  5009               	movf	___fladd@a^0,w,c
  8814   001C72  5C05               	subwf	___fladd@b^0,w,c
  8815   001C74  500A               	movf	(___fladd@a+1)^0,w,c
  8816   001C76  5806               	subwfb	(___fladd@b+1)^0,w,c
  8817   001C78  500B               	movf	(___fladd@a+2)^0,w,c
  8818   001C7A  5807               	subwfb	(___fladd@b+2)^0,w,c
  8819   001C7C  5008               	movf	(___fladd@b+3)^0,w,c
  8820   001C7E  0A80               	xorlw	128
  8821   001C80  6E0D               	movwf	??___fladd^0,c
  8822   001C82  500C               	movf	(___fladd@a+3)^0,w,c
  8823   001C84  0A80               	xorlw	128
  8824   001C86  580D               	subwfb	??___fladd^0,w,c
  8825   001C88  B0D8               	btfsc	status,0,c
  8826   001C8A  EF49  F00E         	goto	u3401
  8827   001C8E  EF4B  F00E         	goto	u3400
  8828   001C92                     u3401:
  8829   001C92  EF76  F00E         	goto	l3681
  8830   001C96                     u3400:
  8831   001C96  5005               	movf	___fladd@b^0,w,c
  8832   001C98  5C09               	subwf	___fladd@a^0,w,c
  8833   001C9A  6E0D               	movwf	??___fladd^0,c
  8834   001C9C  5006               	movf	(___fladd@b+1)^0,w,c
  8835   001C9E  580A               	subwfb	(___fladd@a+1)^0,w,c
  8836   001CA0  6E0E               	movwf	(??___fladd+1)^0,c
  8837   001CA2  5007               	movf	(___fladd@b+2)^0,w,c
  8838   001CA4  580B               	subwfb	(___fladd@a+2)^0,w,c
  8839   001CA6  6E0F               	movwf	(??___fladd+2)^0,c
  8840   001CA8  5008               	movf	(___fladd@b+3)^0,w,c
  8841   001CAA  580C               	subwfb	(___fladd@a+3)^0,w,c
  8842   001CAC  6E10               	movwf	(??___fladd+3)^0,c
  8843   001CAE  0EFF               	movlw	255
  8844   001CB0  240D               	addwf	??___fladd^0,w,c
  8845   001CB2  6E05               	movwf	___fladd@b^0,c
  8846   001CB4  0EFF               	movlw	255
  8847   001CB6  200E               	addwfc	(??___fladd+1)^0,w,c
  8848   001CB8  6E06               	movwf	(___fladd@b+1)^0,c
  8849   001CBA  0EFF               	movlw	255
  8850   001CBC  200F               	addwfc	(??___fladd+2)^0,w,c
  8851   001CBE  6E07               	movwf	(___fladd@b+2)^0,c
  8852   001CC0  0EFF               	movlw	255
  8853   001CC2  2010               	addwfc	(??___fladd+3)^0,w,c
  8854   001CC4  6E08               	movwf	(___fladd@b+3)^0,c
  8855   001CC6  0E80               	movlw	128
  8856   001CC8  1A11               	xorwf	___fladd@signs^0,f,c
  8857   001CCA  6C14               	negf	___fladd@grs^0,c
  8858   001CCC  5014               	movf	___fladd@grs^0,w,c
  8859   001CCE  A4D8               	btfss	status,2,c
  8860   001CD0  EF6C  F00E         	goto	u3411
  8861   001CD4  EF6E  F00E         	goto	u3410
  8862   001CD8                     u3411:
  8863   001CD8  EF7E  F00E         	goto	l1100
  8864   001CDC                     u3410:
  8865   001CDC  0E01               	movlw	1
  8866   001CDE  2605               	addwf	___fladd@b^0,f,c
  8867   001CE0  0E00               	movlw	0
  8868   001CE2  2206               	addwfc	(___fladd@b+1)^0,f,c
  8869   001CE4  2207               	addwfc	(___fladd@b+2)^0,f,c
  8870   001CE6  2208               	addwfc	(___fladd@b+3)^0,f,c
  8871   001CE8  EF7E  F00E         	goto	l1100
  8872   001CEC                     l3681:
  8873   001CEC  5009               	movf	___fladd@a^0,w,c
  8874   001CEE  5E05               	subwf	___fladd@b^0,f,c
  8875   001CF0  500A               	movf	(___fladd@a+1)^0,w,c
  8876   001CF2  5A06               	subwfb	(___fladd@b+1)^0,f,c
  8877   001CF4  500B               	movf	(___fladd@a+2)^0,w,c
  8878   001CF6  5A07               	subwfb	(___fladd@b+2)^0,f,c
  8879   001CF8  500C               	movf	(___fladd@a+3)^0,w,c
  8880   001CFA  5A08               	subwfb	(___fladd@b+3)^0,f,c
  8881   001CFC                     l1100:
  8882   001CFC  5005               	movf	___fladd@b^0,w,c
  8883   001CFE  1006               	iorwf	(___fladd@b+1)^0,w,c
  8884   001D00  1007               	iorwf	(___fladd@b+2)^0,w,c
  8885   001D02  1008               	iorwf	(___fladd@b+3)^0,w,c
  8886   001D04  A4D8               	btfss	status,2,c
  8887   001D06  EF87  F00E         	goto	u3421
  8888   001D0A  EF89  F00E         	goto	u3420
  8889   001D0E                     u3421:
  8890   001D0E  EFBE  F00E         	goto	l3705
  8891   001D12                     u3420:
  8892   001D12  5014               	movf	___fladd@grs^0,w,c
  8893   001D14  A4D8               	btfss	status,2,c
  8894   001D16  EF8F  F00E         	goto	u3431
  8895   001D1A  EF91  F00E         	goto	u3430
  8896   001D1E                     u3431:
  8897   001D1E  EFBE  F00E         	goto	l3705
  8898   001D22                     u3430:
  8899   001D22  0E00               	movlw	0
  8900   001D24  6E05               	movwf	?___fladd^0,c
  8901   001D26  0E00               	movlw	0
  8902   001D28  6E06               	movwf	(?___fladd+1)^0,c
  8903   001D2A  0E00               	movlw	0
  8904   001D2C  6E07               	movwf	(?___fladd+2)^0,c
  8905   001D2E  0E00               	movlw	0
  8906   001D30  6E08               	movwf	(?___fladd+3)^0,c
  8907   001D32  EF59  F00F         	goto	l1092
  8908   001D36                     l3689:
  8909   001D36  90D8               	bcf	status,0,c
  8910   001D38  3605               	rlcf	___fladd@b^0,f,c
  8911   001D3A  3606               	rlcf	(___fladd@b+1)^0,f,c
  8912   001D3C  3607               	rlcf	(___fladd@b+2)^0,f,c
  8913   001D3E  3608               	rlcf	(___fladd@b+3)^0,f,c
  8914   001D40  AE14               	btfss	___fladd@grs^0,7,c
  8915   001D42  EFA5  F00E         	goto	u3441
  8916   001D46  EFA7  F00E         	goto	u3440
  8917   001D4A                     u3441:
  8918   001D4A  EFA8  F00E         	goto	l3695
  8919   001D4E                     u3440:
  8920   001D4E  8005               	bsf	___fladd@b^0,0,c
  8921   001D50                     l3695:
  8922   001D50  A014               	btfss	___fladd@grs^0,0,c
  8923   001D52  EFAD  F00E         	goto	u3451
  8924   001D56  EFAF  F00E         	goto	u3450
  8925   001D5A                     u3451:
  8926   001D5A  EFB3  F00E         	goto	l3699
  8927   001D5E                     u3450:
  8928   001D5E  80D8               	bsf	status,0,c
  8929   001D60  3614               	rlcf	___fladd@grs^0,f,c
  8930   001D62  EFB5  F00E         	goto	l3701
  8931   001D66                     l3699:
  8932   001D66  90D8               	bcf	status,0,c
  8933   001D68  3614               	rlcf	___fladd@grs^0,f,c
  8934   001D6A                     l3701:
  8935   001D6A  5013               	movf	___fladd@bexp^0,w,c
  8936   001D6C  B4D8               	btfsc	status,2,c
  8937   001D6E  EFBB  F00E         	goto	u3461
  8938   001D72  EFBD  F00E         	goto	u3460
  8939   001D76                     u3461:
  8940   001D76  EFBE  F00E         	goto	l3705
  8941   001D7A                     u3460:
  8942   001D7A  0613               	decf	___fladd@bexp^0,f,c
  8943   001D7C                     l3705:
  8944   001D7C  AE07               	btfss	(___fladd@b+2)^0,7,c
  8945   001D7E  EFC3  F00E         	goto	u3471
  8946   001D82  EFC5  F00E         	goto	u3470
  8947   001D86                     u3471:
  8948   001D86  EF9B  F00E         	goto	l3689
  8949   001D8A                     u3470:
  8950   001D8A                     l3707:
  8951   001D8A  0E00               	movlw	0
  8952   001D8C  6E12               	movwf	___fladd@aexp^0,c
  8953   001D8E  AE14               	btfss	___fladd@grs^0,7,c
  8954   001D90  EFCC  F00E         	goto	u3481
  8955   001D94  EFCE  F00E         	goto	u3480
  8956   001D98                     u3481:
  8957   001D98  EFE6  F00E         	goto	l1109
  8958   001D9C                     u3480:
  8959   001D9C  C014  F00D         	movff	___fladd@grs,??___fladd
  8960   001DA0  0E7F               	movlw	127
  8961   001DA2  160D               	andwf	??___fladd^0,f,c
  8962   001DA4  B4D8               	btfsc	status,2,c
  8963   001DA6  EFD7  F00E         	goto	u3491
  8964   001DAA  EFD9  F00E         	goto	u3490
  8965   001DAE                     u3491:
  8966   001DAE  EFDD  F00E         	goto	l1110
  8967   001DB2                     u3490:
  8968   001DB2                     l3713:
  8969   001DB2  0E01               	movlw	1
  8970   001DB4  6E12               	movwf	___fladd@aexp^0,c
  8971   001DB6  EFE6  F00E         	goto	l1109
  8972   001DBA                     l1110:
  8973   001DBA  A005               	btfss	___fladd@b^0,0,c
  8974   001DBC  EFE2  F00E         	goto	u3501
  8975   001DC0  EFE4  F00E         	goto	u3500
  8976   001DC4                     u3501:
  8977   001DC4  EFE6  F00E         	goto	l1109
  8978   001DC8                     u3500:
  8979   001DC8  EFD9  F00E         	goto	l3713
  8980   001DCC                     l1109:
  8981   001DCC  5012               	movf	___fladd@aexp^0,w,c
  8982   001DCE  B4D8               	btfsc	status,2,c
  8983   001DD0  EFEC  F00E         	goto	u3511
  8984   001DD4  EFEE  F00E         	goto	u3510
  8985   001DD8                     u3511:
  8986   001DD8  EF19  F00F         	goto	l3725
  8987   001DDC                     u3510:
  8988   001DDC  0E01               	movlw	1
  8989   001DDE  2605               	addwf	___fladd@b^0,f,c
  8990   001DE0  0E00               	movlw	0
  8991   001DE2  2206               	addwfc	(___fladd@b+1)^0,f,c
  8992   001DE4  2207               	addwfc	(___fladd@b+2)^0,f,c
  8993   001DE6  2208               	addwfc	(___fladd@b+3)^0,f,c
  8994   001DE8  A008               	btfss	(___fladd@b+3)^0,0,c
  8995   001DEA  EFF9  F00E         	goto	u3521
  8996   001DEE  EFFB  F00E         	goto	u3520
  8997   001DF2                     u3521:
  8998   001DF2  EF19  F00F         	goto	l3725
  8999   001DF6                     u3520:
  9000   001DF6  C005  F00D         	movff	___fladd@b,??___fladd
  9001   001DFA  C006  F00E         	movff	___fladd@b+1,??___fladd+1
  9002   001DFE  C007  F00F         	movff	___fladd@b+2,??___fladd+2
  9003   001E02  C008  F010         	movff	___fladd@b+3,??___fladd+3
  9004   001E06  3410               	rlcf	(??___fladd+3)^0,w,c
  9005   001E08  3210               	rrcf	(??___fladd+3)^0,f,c
  9006   001E0A  320F               	rrcf	(??___fladd+2)^0,f,c
  9007   001E0C  320E               	rrcf	(??___fladd+1)^0,f,c
  9008   001E0E  320D               	rrcf	??___fladd^0,f,c
  9009   001E10  C00D  F005         	movff	??___fladd,___fladd@b
  9010   001E14  C00E  F006         	movff	??___fladd+1,___fladd@b+1
  9011   001E18  C00F  F007         	movff	??___fladd+2,___fladd@b+2
  9012   001E1C  C010  F008         	movff	??___fladd+3,___fladd@b+3
  9013   001E20  2813               	incf	___fladd@bexp^0,w,c
  9014   001E22  B4D8               	btfsc	status,2,c
  9015   001E24  EF16  F00F         	goto	u3531
  9016   001E28  EF18  F00F         	goto	u3530
  9017   001E2C                     u3531:
  9018   001E2C  EF19  F00F         	goto	l3725
  9019   001E30                     u3530:
  9020   001E30  2A13               	incf	___fladd@bexp^0,f,c
  9021   001E32                     l3725:
  9022   001E32  2813               	incf	___fladd@bexp^0,w,c
  9023   001E34  B4D8               	btfsc	status,2,c
  9024   001E36  EF1F  F00F         	goto	u3541
  9025   001E3A  EF21  F00F         	goto	u3540
  9026   001E3E                     u3541:
  9027   001E3E  EF29  F00F         	goto	l3729
  9028   001E42                     u3540:
  9029   001E42  5013               	movf	___fladd@bexp^0,w,c
  9030   001E44  A4D8               	btfss	status,2,c
  9031   001E46  EF27  F00F         	goto	u3551
  9032   001E4A  EF29  F00F         	goto	u3550
  9033   001E4E                     u3551:
  9034   001E4E  EF3B  F00F         	goto	l3733
  9035   001E52                     u3550:
  9036   001E52                     l3729:
  9037   001E52  0E00               	movlw	0
  9038   001E54  6E05               	movwf	___fladd@b^0,c
  9039   001E56  0E00               	movlw	0
  9040   001E58  6E06               	movwf	(___fladd@b+1)^0,c
  9041   001E5A  0E00               	movlw	0
  9042   001E5C  6E07               	movwf	(___fladd@b+2)^0,c
  9043   001E5E  0E00               	movlw	0
  9044   001E60  6E08               	movwf	(___fladd@b+3)^0,c
  9045   001E62  5013               	movf	___fladd@bexp^0,w,c
  9046   001E64  A4D8               	btfss	status,2,c
  9047   001E66  EF37  F00F         	goto	u3561
  9048   001E6A  EF39  F00F         	goto	u3560
  9049   001E6E                     u3561:
  9050   001E6E  EF3B  F00F         	goto	l3733
  9051   001E72                     u3560:
  9052   001E72  0E00               	movlw	0
  9053   001E74  6E11               	movwf	___fladd@signs^0,c
  9054   001E76                     l3733:
  9055   001E76  A013               	btfss	___fladd@bexp^0,0,c
  9056   001E78  EF40  F00F         	goto	u3571
  9057   001E7C  EF42  F00F         	goto	u3570
  9058   001E80                     u3571:
  9059   001E80  EF45  F00F         	goto	l3737
  9060   001E84                     u3570:
  9061   001E84  8E07               	bsf	(___fladd@b+2)^0,7,c
  9062   001E86  EF46  F00F         	goto	l3739
  9063   001E8A                     l3737:
  9064   001E8A  9E07               	bcf	(___fladd@b+2)^0,7,c
  9065   001E8C                     l3739:
  9066   001E8C  90D8               	bcf	status,0,c
  9067   001E8E  3013               	rrcf	___fladd@bexp^0,w,c
  9068   001E90  6E08               	movwf	(___fladd@b+3)^0,c
  9069   001E92  AE11               	btfss	___fladd@signs^0,7,c
  9070   001E94  EF4E  F00F         	goto	u3581
  9071   001E98  EF50  F00F         	goto	u3580
  9072   001E9C                     u3581:
  9073   001E9C  EF51  F00F         	goto	l3745
  9074   001EA0                     u3580:
  9075   001EA0  8E08               	bsf	(___fladd@b+3)^0,7,c
  9076   001EA2                     l3745:
  9077   001EA2  C005  F005         	movff	___fladd@b,?___fladd
  9078   001EA6  C006  F006         	movff	___fladd@b+1,?___fladd+1
  9079   001EAA  C007  F007         	movff	___fladd@b+2,?___fladd+2
  9080   001EAE  C008  F008         	movff	___fladd@b+3,?___fladd+3
  9081   001EB2                     l1092:
  9082   001EB2  0012               	return		;funcret
  9083   001EB4                     __end_of___fladd:
  9084                           	callstack 0
  9085                           
  9086 ;; *************** function ___flmul *****************
  9087 ;; Defined at:
  9088 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\sprcmul.c"
  9089 ;; Parameters:    Size  Location     Type
  9090 ;;  b               4   28[COMRAM] unsigned char 
  9091 ;;  a               4   32[COMRAM] unsigned char 
  9092 ;; Auto vars:     Size  Location     Type
  9093 ;;  prod            4   47[COMRAM] struct .
  9094 ;;  grs             4   41[COMRAM] unsigned long 
  9095 ;;  temp            2   51[COMRAM] struct .
  9096 ;;  bexp            1   46[COMRAM] unsigned char 
  9097 ;;  aexp            1   45[COMRAM] unsigned char 
  9098 ;;  sign            1   40[COMRAM] unsigned char 
  9099 ;; Return value:  Size  Location     Type
  9100 ;;                  4   28[COMRAM] unsigned char 
  9101 ;; Registers used:
  9102 ;;		wreg, status,2, status,0, prodl, prodh
  9103 ;; Tracked objects:
  9104 ;;		On entry : 0/0
  9105 ;;		On exit  : 0/0
  9106 ;;		Unchanged: 0/0
  9107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9108 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9109 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9110 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9111 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9112 ;;Total ram usage:       25 bytes
  9113 ;; Hardware stack levels used: 1
  9114 ;; Hardware stack levels required when called: 2
  9115 ;; This function calls:
  9116 ;;		Nothing
  9117 ;; This function is called by:
  9118 ;;		_colorDetect
  9119 ;;		_turnLeft_90
  9120 ;;		_turnRight_90
  9121 ;;		_turn_180
  9122 ;;		_turnRight_135
  9123 ;;		_turnLeft_135
  9124 ;;		_reverseSquareRight
  9125 ;;		_reverseSquareLeft
  9126 ;;		_turnLeft
  9127 ;;		_turnRight
  9128 ;; This function uses a non-reentrant model
  9129 ;;
  9130                           
  9131                           	psect	text40
  9132   002322                     __ptext40:
  9133                           	callstack 0
  9134   002322                     ___flmul:
  9135                           	callstack 27
  9136   002322  5020               	movf	(___flmul@b+3)^0,w,c
  9137   002324  0B80               	andlw	128
  9138   002326  6E29               	movwf	___flmul@sign^0,c
  9139   002328  5020               	movf	(___flmul@b+3)^0,w,c
  9140   00232A  2420               	addwf	(___flmul@b+3)^0,w,c
  9141   00232C  6E2F               	movwf	___flmul@bexp^0,c
  9142   00232E  AE1F               	btfss	(___flmul@b+2)^0,7,c
  9143   002330  EF9C  F011         	goto	u3971
  9144   002334  EF9E  F011         	goto	u3970
  9145   002338                     u3971:
  9146   002338  EF9F  F011         	goto	l4093
  9147   00233C                     u3970:
  9148   00233C  802F               	bsf	___flmul@bexp^0,0,c
  9149   00233E                     l4093:
  9150   00233E  502F               	movf	___flmul@bexp^0,w,c
  9151   002340  B4D8               	btfsc	status,2,c
  9152   002342  EFA5  F011         	goto	u3981
  9153   002346  EFA7  F011         	goto	u3980
  9154   00234A                     u3981:
  9155   00234A  EFBA  F011         	goto	l4101
  9156   00234E                     u3980:
  9157   00234E  282F               	incf	___flmul@bexp^0,w,c
  9158   002350  A4D8               	btfss	status,2,c
  9159   002352  EFAD  F011         	goto	u3991
  9160   002356  EFAF  F011         	goto	u3990
  9161   00235A                     u3991:
  9162   00235A  EFB7  F011         	goto	l4099
  9163   00235E                     u3990:
  9164   00235E  0E00               	movlw	0
  9165   002360  6E1D               	movwf	___flmul@b^0,c
  9166   002362  0E00               	movlw	0
  9167   002364  6E1E               	movwf	(___flmul@b+1)^0,c
  9168   002366  0E00               	movlw	0
  9169   002368  6E1F               	movwf	(___flmul@b+2)^0,c
  9170   00236A  0E00               	movlw	0
  9171   00236C  6E20               	movwf	(___flmul@b+3)^0,c
  9172   00236E                     l4099:
  9173   00236E  8E1F               	bsf	(___flmul@b+2)^0,7,c
  9174   002370  EFC2  F011         	goto	l4103
  9175   002374                     l4101:
  9176   002374  0E00               	movlw	0
  9177   002376  6E1D               	movwf	___flmul@b^0,c
  9178   002378  0E00               	movlw	0
  9179   00237A  6E1E               	movwf	(___flmul@b+1)^0,c
  9180   00237C  0E00               	movlw	0
  9181   00237E  6E1F               	movwf	(___flmul@b+2)^0,c
  9182   002380  0E00               	movlw	0
  9183   002382  6E20               	movwf	(___flmul@b+3)^0,c
  9184   002384                     l4103:
  9185   002384  5024               	movf	(___flmul@a+3)^0,w,c
  9186   002386  0B80               	andlw	128
  9187   002388  1A29               	xorwf	___flmul@sign^0,f,c
  9188   00238A  5024               	movf	(___flmul@a+3)^0,w,c
  9189   00238C  2424               	addwf	(___flmul@a+3)^0,w,c
  9190   00238E  6E2E               	movwf	___flmul@aexp^0,c
  9191   002390  AE23               	btfss	(___flmul@a+2)^0,7,c
  9192   002392  EFCD  F011         	goto	u4001
  9193   002396  EFCF  F011         	goto	u4000
  9194   00239A                     u4001:
  9195   00239A  EFD0  F011         	goto	l4111
  9196   00239E                     u4000:
  9197   00239E  802E               	bsf	___flmul@aexp^0,0,c
  9198   0023A0                     l4111:
  9199   0023A0  502E               	movf	___flmul@aexp^0,w,c
  9200   0023A2  B4D8               	btfsc	status,2,c
  9201   0023A4  EFD6  F011         	goto	u4011
  9202   0023A8  EFD8  F011         	goto	u4010
  9203   0023AC                     u4011:
  9204   0023AC  EFEB  F011         	goto	l4119
  9205   0023B0                     u4010:
  9206   0023B0  282E               	incf	___flmul@aexp^0,w,c
  9207   0023B2  A4D8               	btfss	status,2,c
  9208   0023B4  EFDE  F011         	goto	u4021
  9209   0023B8  EFE0  F011         	goto	u4020
  9210   0023BC                     u4021:
  9211   0023BC  EFE8  F011         	goto	l4117
  9212   0023C0                     u4020:
  9213   0023C0  0E00               	movlw	0
  9214   0023C2  6E21               	movwf	___flmul@a^0,c
  9215   0023C4  0E00               	movlw	0
  9216   0023C6  6E22               	movwf	(___flmul@a+1)^0,c
  9217   0023C8  0E00               	movlw	0
  9218   0023CA  6E23               	movwf	(___flmul@a+2)^0,c
  9219   0023CC  0E00               	movlw	0
  9220   0023CE  6E24               	movwf	(___flmul@a+3)^0,c
  9221   0023D0                     l4117:
  9222   0023D0  8E23               	bsf	(___flmul@a+2)^0,7,c
  9223   0023D2  EFF3  F011         	goto	l1169
  9224   0023D6                     l4119:
  9225   0023D6  0E00               	movlw	0
  9226   0023D8  6E21               	movwf	___flmul@a^0,c
  9227   0023DA  0E00               	movlw	0
  9228   0023DC  6E22               	movwf	(___flmul@a+1)^0,c
  9229   0023DE  0E00               	movlw	0
  9230   0023E0  6E23               	movwf	(___flmul@a+2)^0,c
  9231   0023E2  0E00               	movlw	0
  9232   0023E4  6E24               	movwf	(___flmul@a+3)^0,c
  9233   0023E6                     l1169:
  9234   0023E6  502E               	movf	___flmul@aexp^0,w,c
  9235   0023E8  B4D8               	btfsc	status,2,c
  9236   0023EA  EFF9  F011         	goto	u4031
  9237   0023EE  EFFB  F011         	goto	u4030
  9238   0023F2                     u4031:
  9239   0023F2  EF03  F012         	goto	l4123
  9240   0023F6                     u4030:
  9241   0023F6  502F               	movf	___flmul@bexp^0,w,c
  9242   0023F8  A4D8               	btfss	status,2,c
  9243   0023FA  EF01  F012         	goto	u4041
  9244   0023FE  EF03  F012         	goto	u4040
  9245   002402                     u4041:
  9246   002402  EF0D  F012         	goto	l4127
  9247   002406                     u4040:
  9248   002406                     l4123:
  9249   002406  0E00               	movlw	0
  9250   002408  6E1D               	movwf	?___flmul^0,c
  9251   00240A  0E00               	movlw	0
  9252   00240C  6E1E               	movwf	(?___flmul+1)^0,c
  9253   00240E  0E00               	movlw	0
  9254   002410  6E1F               	movwf	(?___flmul+2)^0,c
  9255   002412  0E00               	movlw	0
  9256   002414  6E20               	movwf	(?___flmul+3)^0,c
  9257   002416  EFA5  F013         	goto	l1173
  9258   00241A                     l4127:
  9259   00241A  5023               	movf	(___flmul@a+2)^0,w,c
  9260   00241C  021D               	mulwf	___flmul@b^0,c
  9261   00241E  CFF3 F034          	movff	prodl,___flmul@temp
  9262   002422  CFF4 F035          	movff	prodh,___flmul@temp+1
  9263   002426  5034               	movf	___flmul@temp^0,w,c
  9264   002428  6E2A               	movwf	___flmul@grs^0,c
  9265   00242A  6A2B               	clrf	(___flmul@grs+1)^0,c
  9266   00242C  6A2C               	clrf	(___flmul@grs+2)^0,c
  9267   00242E  6A2D               	clrf	(___flmul@grs+3)^0,c
  9268   002430  5035               	movf	(___flmul@temp+1)^0,w,c
  9269   002432  6E30               	movwf	___flmul@prod^0,c
  9270   002434  6A31               	clrf	(___flmul@prod+1)^0,c
  9271   002436  6A32               	clrf	(___flmul@prod+2)^0,c
  9272   002438  6A33               	clrf	(___flmul@prod+3)^0,c
  9273   00243A  5022               	movf	(___flmul@a+1)^0,w,c
  9274   00243C  021E               	mulwf	(___flmul@b+1)^0,c
  9275   00243E  CFF3 F034          	movff	prodl,___flmul@temp
  9276   002442  CFF4 F035          	movff	prodh,___flmul@temp+1
  9277   002446  5034               	movf	___flmul@temp^0,w,c
  9278   002448  262A               	addwf	___flmul@grs^0,f,c
  9279   00244A  0E00               	movlw	0
  9280   00244C  222B               	addwfc	(___flmul@grs+1)^0,f,c
  9281   00244E  222C               	addwfc	(___flmul@grs+2)^0,f,c
  9282   002450  222D               	addwfc	(___flmul@grs+3)^0,f,c
  9283   002452  5035               	movf	(___flmul@temp+1)^0,w,c
  9284   002454  2630               	addwf	___flmul@prod^0,f,c
  9285   002456  0E00               	movlw	0
  9286   002458  2231               	addwfc	(___flmul@prod+1)^0,f,c
  9287   00245A  2232               	addwfc	(___flmul@prod+2)^0,f,c
  9288   00245C  2233               	addwfc	(___flmul@prod+3)^0,f,c
  9289   00245E  5021               	movf	___flmul@a^0,w,c
  9290   002460  021F               	mulwf	(___flmul@b+2)^0,c
  9291   002462  CFF3 F034          	movff	prodl,___flmul@temp
  9292   002466  CFF4 F035          	movff	prodh,___flmul@temp+1
  9293   00246A  5034               	movf	___flmul@temp^0,w,c
  9294   00246C  262A               	addwf	___flmul@grs^0,f,c
  9295   00246E  0E00               	movlw	0
  9296   002470  222B               	addwfc	(___flmul@grs+1)^0,f,c
  9297   002472  222C               	addwfc	(___flmul@grs+2)^0,f,c
  9298   002474  222D               	addwfc	(___flmul@grs+3)^0,f,c
  9299   002476  5035               	movf	(___flmul@temp+1)^0,w,c
  9300   002478  2630               	addwf	___flmul@prod^0,f,c
  9301   00247A  0E00               	movlw	0
  9302   00247C  2231               	addwfc	(___flmul@prod+1)^0,f,c
  9303   00247E  2232               	addwfc	(___flmul@prod+2)^0,f,c
  9304   002480  2233               	addwfc	(___flmul@prod+3)^0,f,c
  9305   002482  C02C  F02D         	movff	___flmul@grs+2,___flmul@grs+3
  9306   002486  C02B  F02C         	movff	___flmul@grs+1,___flmul@grs+2
  9307   00248A  C02A  F02B         	movff	___flmul@grs,___flmul@grs+1
  9308   00248E  6A2A               	clrf	___flmul@grs^0,c
  9309   002490  5021               	movf	___flmul@a^0,w,c
  9310   002492  021E               	mulwf	(___flmul@b+1)^0,c
  9311   002494  CFF3 F034          	movff	prodl,___flmul@temp
  9312   002498  CFF4 F035          	movff	prodh,___flmul@temp+1
  9313   00249C  5034               	movf	___flmul@temp^0,w,c
  9314   00249E  262A               	addwf	___flmul@grs^0,f,c
  9315   0024A0  5035               	movf	(___flmul@temp+1)^0,w,c
  9316   0024A2  222B               	addwfc	(___flmul@grs+1)^0,f,c
  9317   0024A4  0E00               	movlw	0
  9318   0024A6  222C               	addwfc	(___flmul@grs+2)^0,f,c
  9319   0024A8  0E00               	movlw	0
  9320   0024AA  222D               	addwfc	(___flmul@grs+3)^0,f,c
  9321   0024AC  5022               	movf	(___flmul@a+1)^0,w,c
  9322   0024AE  021D               	mulwf	___flmul@b^0,c
  9323   0024B0  CFF3 F034          	movff	prodl,___flmul@temp
  9324   0024B4  CFF4 F035          	movff	prodh,___flmul@temp+1
  9325   0024B8  5034               	movf	___flmul@temp^0,w,c
  9326   0024BA  262A               	addwf	___flmul@grs^0,f,c
  9327   0024BC  5035               	movf	(___flmul@temp+1)^0,w,c
  9328   0024BE  222B               	addwfc	(___flmul@grs+1)^0,f,c
  9329   0024C0  0E00               	movlw	0
  9330   0024C2  222C               	addwfc	(___flmul@grs+2)^0,f,c
  9331   0024C4  0E00               	movlw	0
  9332   0024C6  222D               	addwfc	(___flmul@grs+3)^0,f,c
  9333   0024C8  C02C  F02D         	movff	___flmul@grs+2,___flmul@grs+3
  9334   0024CC  C02B  F02C         	movff	___flmul@grs+1,___flmul@grs+2
  9335   0024D0  C02A  F02B         	movff	___flmul@grs,___flmul@grs+1
  9336   0024D4  6A2A               	clrf	___flmul@grs^0,c
  9337   0024D6  5021               	movf	___flmul@a^0,w,c
  9338   0024D8  021D               	mulwf	___flmul@b^0,c
  9339   0024DA  CFF3 F034          	movff	prodl,___flmul@temp
  9340   0024DE  CFF4 F035          	movff	prodh,___flmul@temp+1
  9341   0024E2  5034               	movf	___flmul@temp^0,w,c
  9342   0024E4  262A               	addwf	___flmul@grs^0,f,c
  9343   0024E6  5035               	movf	(___flmul@temp+1)^0,w,c
  9344   0024E8  222B               	addwfc	(___flmul@grs+1)^0,f,c
  9345   0024EA  0E00               	movlw	0
  9346   0024EC  222C               	addwfc	(___flmul@grs+2)^0,f,c
  9347   0024EE  0E00               	movlw	0
  9348   0024F0  222D               	addwfc	(___flmul@grs+3)^0,f,c
  9349   0024F2  5023               	movf	(___flmul@a+2)^0,w,c
  9350   0024F4  021E               	mulwf	(___flmul@b+1)^0,c
  9351   0024F6  CFF3 F034          	movff	prodl,___flmul@temp
  9352   0024FA  CFF4 F035          	movff	prodh,___flmul@temp+1
  9353   0024FE  5034               	movf	___flmul@temp^0,w,c
  9354   002500  2630               	addwf	___flmul@prod^0,f,c
  9355   002502  5035               	movf	(___flmul@temp+1)^0,w,c
  9356   002504  2231               	addwfc	(___flmul@prod+1)^0,f,c
  9357   002506  0E00               	movlw	0
  9358   002508  2232               	addwfc	(___flmul@prod+2)^0,f,c
  9359   00250A  0E00               	movlw	0
  9360   00250C  2233               	addwfc	(___flmul@prod+3)^0,f,c
  9361   00250E  5022               	movf	(___flmul@a+1)^0,w,c
  9362   002510  021F               	mulwf	(___flmul@b+2)^0,c
  9363   002512  CFF3 F034          	movff	prodl,___flmul@temp
  9364   002516  CFF4 F035          	movff	prodh,___flmul@temp+1
  9365   00251A  5034               	movf	___flmul@temp^0,w,c
  9366   00251C  2630               	addwf	___flmul@prod^0,f,c
  9367   00251E  5035               	movf	(___flmul@temp+1)^0,w,c
  9368   002520  2231               	addwfc	(___flmul@prod+1)^0,f,c
  9369   002522  0E00               	movlw	0
  9370   002524  2232               	addwfc	(___flmul@prod+2)^0,f,c
  9371   002526  0E00               	movlw	0
  9372   002528  2233               	addwfc	(___flmul@prod+3)^0,f,c
  9373   00252A  5023               	movf	(___flmul@a+2)^0,w,c
  9374   00252C  021F               	mulwf	(___flmul@b+2)^0,c
  9375   00252E  CFF3 F034          	movff	prodl,___flmul@temp
  9376   002532  CFF4 F035          	movff	prodh,___flmul@temp+1
  9377   002536  5034               	movf	___flmul@temp^0,w,c
  9378   002538  6E25               	movwf	??___flmul^0,c
  9379   00253A  5035               	movf	(___flmul@temp+1)^0,w,c
  9380   00253C  6E26               	movwf	(??___flmul+1)^0,c
  9381   00253E  6A27               	clrf	(??___flmul+2)^0,c
  9382   002540  6A28               	clrf	(??___flmul+3)^0,c
  9383   002542  C027  F028         	movff	??___flmul+2,??___flmul+3
  9384   002546  C026  F027         	movff	??___flmul+1,??___flmul+2
  9385   00254A  C025  F026         	movff	??___flmul,??___flmul+1
  9386   00254E  6A25               	clrf	??___flmul^0,c
  9387   002550  5025               	movf	??___flmul^0,w,c
  9388   002552  2630               	addwf	___flmul@prod^0,f,c
  9389   002554  5026               	movf	(??___flmul+1)^0,w,c
  9390   002556  2231               	addwfc	(___flmul@prod+1)^0,f,c
  9391   002558  5027               	movf	(??___flmul+2)^0,w,c
  9392   00255A  2232               	addwfc	(___flmul@prod+2)^0,f,c
  9393   00255C  5028               	movf	(??___flmul+3)^0,w,c
  9394   00255E  2233               	addwfc	(___flmul@prod+3)^0,f,c
  9395   002560  C02A  F025         	movff	___flmul@grs,??___flmul
  9396   002564  C02B  F026         	movff	___flmul@grs+1,??___flmul+1
  9397   002568  C02C  F027         	movff	___flmul@grs+2,??___flmul+2
  9398   00256C  C02D  F028         	movff	___flmul@grs+3,??___flmul+3
  9399   002570  0E19               	movlw	25
  9400   002572  EFC0  F012         	goto	u4050
  9401   002576                     u4055:
  9402   002576  90D8               	bcf	status,0,c
  9403   002578  3228               	rrcf	(??___flmul+3)^0,f,c
  9404   00257A  3227               	rrcf	(??___flmul+2)^0,f,c
  9405   00257C  3226               	rrcf	(??___flmul+1)^0,f,c
  9406   00257E  3225               	rrcf	??___flmul^0,f,c
  9407   002580                     u4050:
  9408   002580  2EE8               	decfsz	wreg,f,c
  9409   002582  EFBB  F012         	goto	u4055
  9410   002586  5025               	movf	??___flmul^0,w,c
  9411   002588  2630               	addwf	___flmul@prod^0,f,c
  9412   00258A  5026               	movf	(??___flmul+1)^0,w,c
  9413   00258C  2231               	addwfc	(___flmul@prod+1)^0,f,c
  9414   00258E  5027               	movf	(??___flmul+2)^0,w,c
  9415   002590  2232               	addwfc	(___flmul@prod+2)^0,f,c
  9416   002592  5028               	movf	(??___flmul+3)^0,w,c
  9417   002594  2233               	addwfc	(___flmul@prod+3)^0,f,c
  9418   002596  C02C  F02D         	movff	___flmul@grs+2,___flmul@grs+3
  9419   00259A  C02B  F02C         	movff	___flmul@grs+1,___flmul@grs+2
  9420   00259E  C02A  F02B         	movff	___flmul@grs,___flmul@grs+1
  9421   0025A2  6A2A               	clrf	___flmul@grs^0,c
  9422   0025A4  502E               	movf	___flmul@aexp^0,w,c
  9423   0025A6  C02F  F025         	movff	___flmul@bexp,??___flmul
  9424   0025AA  6A26               	clrf	(??___flmul+1)^0,c
  9425   0025AC  2625               	addwf	??___flmul^0,f,c
  9426   0025AE  0E00               	movlw	0
  9427   0025B0  2226               	addwfc	(??___flmul+1)^0,f,c
  9428   0025B2  0E82               	movlw	130
  9429   0025B4  2425               	addwf	??___flmul^0,w,c
  9430   0025B6  6E34               	movwf	___flmul@temp^0,c
  9431   0025B8  0EFF               	movlw	255
  9432   0025BA  2026               	addwfc	(??___flmul+1)^0,w,c
  9433   0025BC  6E35               	movwf	(___flmul@temp+1)^0,c
  9434   0025BE  EFF6  F012         	goto	l4175
  9435   0025C2                     l4169:
  9436   0025C2  90D8               	bcf	status,0,c
  9437   0025C4  3630               	rlcf	___flmul@prod^0,f,c
  9438   0025C6  3631               	rlcf	(___flmul@prod+1)^0,f,c
  9439   0025C8  3632               	rlcf	(___flmul@prod+2)^0,f,c
  9440   0025CA  3633               	rlcf	(___flmul@prod+3)^0,f,c
  9441   0025CC  AE2D               	btfss	(___flmul@grs+3)^0,7,c
  9442   0025CE  EFEB  F012         	goto	u4061
  9443   0025D2  EFED  F012         	goto	u4060
  9444   0025D6                     u4061:
  9445   0025D6  EFEE  F012         	goto	l1176
  9446   0025DA                     u4060:
  9447   0025DA  8030               	bsf	___flmul@prod^0,0,c
  9448   0025DC                     l1176:
  9449   0025DC  90D8               	bcf	status,0,c
  9450   0025DE  362A               	rlcf	___flmul@grs^0,f,c
  9451   0025E0  362B               	rlcf	(___flmul@grs+1)^0,f,c
  9452   0025E2  362C               	rlcf	(___flmul@grs+2)^0,f,c
  9453   0025E4  362D               	rlcf	(___flmul@grs+3)^0,f,c
  9454   0025E6  0634               	decf	___flmul@temp^0,f,c
  9455   0025E8  A0D8               	btfss	status,0,c
  9456   0025EA  0635               	decf	(___flmul@temp+1)^0,f,c
  9457   0025EC                     l4175:
  9458   0025EC  AE32               	btfss	(___flmul@prod+2)^0,7,c
  9459   0025EE  EFFB  F012         	goto	u4071
  9460   0025F2  EFFD  F012         	goto	u4070
  9461   0025F6                     u4071:
  9462   0025F6  EFE1  F012         	goto	l4169
  9463   0025FA                     u4070:
  9464   0025FA  0E00               	movlw	0
  9465   0025FC  6E2E               	movwf	___flmul@aexp^0,c
  9466   0025FE  AE2D               	btfss	(___flmul@grs+3)^0,7,c
  9467   002600  EF04  F013         	goto	u4081
  9468   002604  EF06  F013         	goto	u4080
  9469   002608                     u4081:
  9470   002608  EF2A  F013         	goto	l1178
  9471   00260C                     u4080:
  9472   00260C  0EFF               	movlw	255
  9473   00260E  142A               	andwf	___flmul@grs^0,w,c
  9474   002610  6E25               	movwf	??___flmul^0,c
  9475   002612  0EFF               	movlw	255
  9476   002614  142B               	andwf	(___flmul@grs+1)^0,w,c
  9477   002616  6E26               	movwf	(??___flmul+1)^0,c
  9478   002618  0EFF               	movlw	255
  9479   00261A  142C               	andwf	(___flmul@grs+2)^0,w,c
  9480   00261C  6E27               	movwf	(??___flmul+2)^0,c
  9481   00261E  0E7F               	movlw	127
  9482   002620  142D               	andwf	(___flmul@grs+3)^0,w,c
  9483   002622  6E28               	movwf	(??___flmul+3)^0,c
  9484   002624  5025               	movf	??___flmul^0,w,c
  9485   002626  1026               	iorwf	(??___flmul+1)^0,w,c
  9486   002628  1027               	iorwf	(??___flmul+2)^0,w,c
  9487   00262A  1028               	iorwf	(??___flmul+3)^0,w,c
  9488   00262C  B4D8               	btfsc	status,2,c
  9489   00262E  EF1B  F013         	goto	u4091
  9490   002632  EF1D  F013         	goto	u4090
  9491   002636                     u4091:
  9492   002636  EF21  F013         	goto	l1179
  9493   00263A                     u4090:
  9494   00263A                     l4183:
  9495   00263A  0E01               	movlw	1
  9496   00263C  6E2E               	movwf	___flmul@aexp^0,c
  9497   00263E  EF2A  F013         	goto	l1178
  9498   002642                     l1179:
  9499   002642  A030               	btfss	___flmul@prod^0,0,c
  9500   002644  EF26  F013         	goto	u4101
  9501   002648  EF28  F013         	goto	u4100
  9502   00264C                     u4101:
  9503   00264C  EF2A  F013         	goto	l1178
  9504   002650                     u4100:
  9505   002650  EF1D  F013         	goto	l4183
  9506   002654                     l1178:
  9507   002654  502E               	movf	___flmul@aexp^0,w,c
  9508   002656  B4D8               	btfsc	status,2,c
  9509   002658  EF30  F013         	goto	u4111
  9510   00265C  EF32  F013         	goto	u4110
  9511   002660                     u4111:
  9512   002660  EF56  F013         	goto	l4195
  9513   002664                     u4110:
  9514   002664  0E01               	movlw	1
  9515   002666  2630               	addwf	___flmul@prod^0,f,c
  9516   002668  0E00               	movlw	0
  9517   00266A  2231               	addwfc	(___flmul@prod+1)^0,f,c
  9518   00266C  2232               	addwfc	(___flmul@prod+2)^0,f,c
  9519   00266E  2233               	addwfc	(___flmul@prod+3)^0,f,c
  9520   002670  A033               	btfss	(___flmul@prod+3)^0,0,c
  9521   002672  EF3D  F013         	goto	u4121
  9522   002676  EF3F  F013         	goto	u4120
  9523   00267A                     u4121:
  9524   00267A  EF56  F013         	goto	l4195
  9525   00267E                     u4120:
  9526   00267E  C030  F025         	movff	___flmul@prod,??___flmul
  9527   002682  C031  F026         	movff	___flmul@prod+1,??___flmul+1
  9528   002686  C032  F027         	movff	___flmul@prod+2,??___flmul+2
  9529   00268A  C033  F028         	movff	___flmul@prod+3,??___flmul+3
  9530   00268E  3428               	rlcf	(??___flmul+3)^0,w,c
  9531   002690  3228               	rrcf	(??___flmul+3)^0,f,c
  9532   002692  3227               	rrcf	(??___flmul+2)^0,f,c
  9533   002694  3226               	rrcf	(??___flmul+1)^0,f,c
  9534   002696  3225               	rrcf	??___flmul^0,f,c
  9535   002698  C025  F030         	movff	??___flmul,___flmul@prod
  9536   00269C  C026  F031         	movff	??___flmul+1,___flmul@prod+1
  9537   0026A0  C027  F032         	movff	??___flmul+2,___flmul@prod+2
  9538   0026A4  C028  F033         	movff	??___flmul+3,___flmul@prod+3
  9539   0026A8  4A34               	infsnz	___flmul@temp^0,f,c
  9540   0026AA  2A35               	incf	(___flmul@temp+1)^0,f,c
  9541   0026AC                     l4195:
  9542   0026AC  BE35               	btfsc	(___flmul@temp+1)^0,7,c
  9543   0026AE  EF61  F013         	goto	u4131
  9544   0026B2  5035               	movf	(___flmul@temp+1)^0,w,c
  9545   0026B4  E108               	bnz	u4130
  9546   0026B6  2834               	incf	___flmul@temp^0,w,c
  9547   0026B8  A0D8               	btfss	status,0,c
  9548   0026BA  EF61  F013         	goto	u4131
  9549   0026BE  EF63  F013         	goto	u4130
  9550   0026C2                     u4131:
  9551   0026C2  EF6D  F013         	goto	l4199
  9552   0026C6                     u4130:
  9553   0026C6  0E00               	movlw	0
  9554   0026C8  6E30               	movwf	___flmul@prod^0,c
  9555   0026CA  0E00               	movlw	0
  9556   0026CC  6E31               	movwf	(___flmul@prod+1)^0,c
  9557   0026CE  0E80               	movlw	128
  9558   0026D0  6E32               	movwf	(___flmul@prod+2)^0,c
  9559   0026D2  0E7F               	movlw	127
  9560   0026D4  6E33               	movwf	(___flmul@prod+3)^0,c
  9561   0026D6  EF9B  F013         	goto	l4211
  9562   0026DA                     l4199:
  9563   0026DA  BE35               	btfsc	(___flmul@temp+1)^0,7,c
  9564   0026DC  EF7A  F013         	goto	u4140
  9565   0026E0  5035               	movf	(___flmul@temp+1)^0,w,c
  9566   0026E2  E106               	bnz	u4141
  9567   0026E4  0434               	decf	___flmul@temp^0,w,c
  9568   0026E6  B0D8               	btfsc	status,0,c
  9569   0026E8  EF78  F013         	goto	u4141
  9570   0026EC  EF7A  F013         	goto	u4140
  9571   0026F0                     u4141:
  9572   0026F0  EF86  F013         	goto	l1186
  9573   0026F4                     u4140:
  9574   0026F4  0E00               	movlw	0
  9575   0026F6  6E30               	movwf	___flmul@prod^0,c
  9576   0026F8  0E00               	movlw	0
  9577   0026FA  6E31               	movwf	(___flmul@prod+1)^0,c
  9578   0026FC  0E00               	movlw	0
  9579   0026FE  6E32               	movwf	(___flmul@prod+2)^0,c
  9580   002700  0E00               	movlw	0
  9581   002702  6E33               	movwf	(___flmul@prod+3)^0,c
  9582   002704  0E00               	movlw	0
  9583   002706  6E29               	movwf	___flmul@sign^0,c
  9584   002708  EF9B  F013         	goto	l4211
  9585   00270C                     l1186:
  9586   00270C  C034  F02F         	movff	___flmul@temp,___flmul@bexp
  9587   002710  0EFF               	movlw	255
  9588   002712  1630               	andwf	___flmul@prod^0,f,c
  9589   002714  0EFF               	movlw	255
  9590   002716  1631               	andwf	(___flmul@prod+1)^0,f,c
  9591   002718  0E7F               	movlw	127
  9592   00271A  1632               	andwf	(___flmul@prod+2)^0,f,c
  9593   00271C  0E00               	movlw	0
  9594   00271E  1633               	andwf	(___flmul@prod+3)^0,f,c
  9595   002720  A02F               	btfss	___flmul@bexp^0,0,c
  9596   002722  EF95  F013         	goto	u4151
  9597   002726  EF97  F013         	goto	u4150
  9598   00272A                     u4151:
  9599   00272A  EF98  F013         	goto	l4209
  9600   00272E                     u4150:
  9601   00272E  8E32               	bsf	(___flmul@prod+2)^0,7,c
  9602   002730                     l4209:
  9603   002730  90D8               	bcf	status,0,c
  9604   002732  302F               	rrcf	___flmul@bexp^0,w,c
  9605   002734  6E33               	movwf	(___flmul@prod+3)^0,c
  9606   002736                     l4211:
  9607   002736  5029               	movf	___flmul@sign^0,w,c
  9608   002738  1233               	iorwf	(___flmul@prod+3)^0,f,c
  9609   00273A  C030  F01D         	movff	___flmul@prod,?___flmul
  9610   00273E  C031  F01E         	movff	___flmul@prod+1,?___flmul+1
  9611   002742  C032  F01F         	movff	___flmul@prod+2,?___flmul+2
  9612   002746  C033  F020         	movff	___flmul@prod+3,?___flmul+3
  9613   00274A                     l1173:
  9614   00274A  0012               	return		;funcret
  9615   00274C                     __end_of___flmul:
  9616                           	callstack 0
  9617                           
  9618 ;; *************** function ___flge *****************
  9619 ;; Defined at:
  9620 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\flge.c"
  9621 ;; Parameters:    Size  Location     Type
  9622 ;;  ff1             4   28[COMRAM] unsigned char 
  9623 ;;  ff2             4   32[COMRAM] unsigned char 
  9624 ;; Auto vars:     Size  Location     Type
  9625 ;;		None
  9626 ;; Return value:  Size  Location     Type
  9627 ;;		None               void
  9628 ;; Registers used:
  9629 ;;		wreg, status,2, status,0
  9630 ;; Tracked objects:
  9631 ;;		On entry : 0/0
  9632 ;;		On exit  : 0/0
  9633 ;;		Unchanged: 0/0
  9634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9635 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9636 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9637 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9638 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9639 ;;Total ram usage:       12 bytes
  9640 ;; Hardware stack levels used: 1
  9641 ;; Hardware stack levels required when called: 2
  9642 ;; This function calls:
  9643 ;;		Nothing
  9644 ;; This function is called by:
  9645 ;;		_colorDetect
  9646 ;;		_main
  9647 ;; This function uses a non-reentrant model
  9648 ;;
  9649                           
  9650                           	psect	text41
  9651   003E3A                     __ptext41:
  9652                           	callstack 0
  9653   003E3A                     ___flge:
  9654                           	callstack 27
  9655   003E3A  0E00               	movlw	0
  9656   003E3C  141D               	andwf	___flge@ff1^0,w,c
  9657   003E3E  6E25               	movwf	??___flge^0,c
  9658   003E40  0E00               	movlw	0
  9659   003E42  141E               	andwf	(___flge@ff1+1)^0,w,c
  9660   003E44  6E26               	movwf	(??___flge+1)^0,c
  9661   003E46  0E80               	movlw	128
  9662   003E48  141F               	andwf	(___flge@ff1+2)^0,w,c
  9663   003E4A  6E27               	movwf	(??___flge+2)^0,c
  9664   003E4C  0E7F               	movlw	127
  9665   003E4E  1420               	andwf	(___flge@ff1+3)^0,w,c
  9666   003E50  6E28               	movwf	(??___flge+3)^0,c
  9667   003E52  5025               	movf	??___flge^0,w,c
  9668   003E54  1026               	iorwf	(??___flge+1)^0,w,c
  9669   003E56  1027               	iorwf	(??___flge+2)^0,w,c
  9670   003E58  1028               	iorwf	(??___flge+3)^0,w,c
  9671   003E5A  A4D8               	btfss	status,2,c
  9672   003E5C  EF32  F01F         	goto	u4161
  9673   003E60  EF34  F01F         	goto	u4160
  9674   003E64                     u4161:
  9675   003E64  EF3C  F01F         	goto	l4227
  9676   003E68                     u4160:
  9677   003E68  0E00               	movlw	0
  9678   003E6A  6E1D               	movwf	___flge@ff1^0,c
  9679   003E6C  0E00               	movlw	0
  9680   003E6E  6E1E               	movwf	(___flge@ff1+1)^0,c
  9681   003E70  0E00               	movlw	0
  9682   003E72  6E1F               	movwf	(___flge@ff1+2)^0,c
  9683   003E74  0E00               	movlw	0
  9684   003E76  6E20               	movwf	(___flge@ff1+3)^0,c
  9685   003E78                     l4227:
  9686   003E78  0E00               	movlw	0
  9687   003E7A  1421               	andwf	___flge@ff2^0,w,c
  9688   003E7C  6E25               	movwf	??___flge^0,c
  9689   003E7E  0E00               	movlw	0
  9690   003E80  1422               	andwf	(___flge@ff2+1)^0,w,c
  9691   003E82  6E26               	movwf	(??___flge+1)^0,c
  9692   003E84  0E80               	movlw	128
  9693   003E86  1423               	andwf	(___flge@ff2+2)^0,w,c
  9694   003E88  6E27               	movwf	(??___flge+2)^0,c
  9695   003E8A  0E7F               	movlw	127
  9696   003E8C  1424               	andwf	(___flge@ff2+3)^0,w,c
  9697   003E8E  6E28               	movwf	(??___flge+3)^0,c
  9698   003E90  5025               	movf	??___flge^0,w,c
  9699   003E92  1026               	iorwf	(??___flge+1)^0,w,c
  9700   003E94  1027               	iorwf	(??___flge+2)^0,w,c
  9701   003E96  1028               	iorwf	(??___flge+3)^0,w,c
  9702   003E98  A4D8               	btfss	status,2,c
  9703   003E9A  EF51  F01F         	goto	u4171
  9704   003E9E  EF53  F01F         	goto	u4170
  9705   003EA2                     u4171:
  9706   003EA2  EF5B  F01F         	goto	l4231
  9707   003EA6                     u4170:
  9708   003EA6  0E00               	movlw	0
  9709   003EA8  6E21               	movwf	___flge@ff2^0,c
  9710   003EAA  0E00               	movlw	0
  9711   003EAC  6E22               	movwf	(___flge@ff2+1)^0,c
  9712   003EAE  0E00               	movlw	0
  9713   003EB0  6E23               	movwf	(___flge@ff2+2)^0,c
  9714   003EB2  0E00               	movlw	0
  9715   003EB4  6E24               	movwf	(___flge@ff2+3)^0,c
  9716   003EB6                     l4231:
  9717   003EB6  AE20               	btfss	(___flge@ff1+3)^0,7,c
  9718   003EB8  EF60  F01F         	goto	u4181
  9719   003EBC  EF62  F01F         	goto	u4180
  9720   003EC0                     u4181:
  9721   003EC0  EF6B  F01F         	goto	l4235
  9722   003EC4                     u4180:
  9723   003EC4  6C1D               	negf	___flge@ff1^0,c
  9724   003EC6  1E1E               	comf	(___flge@ff1+1)^0,f,c
  9725   003EC8  B0D8               	btfsc	status,0,c
  9726   003ECA  2A1E               	incf	(___flge@ff1+1)^0,f,c
  9727   003ECC  1E1F               	comf	(___flge@ff1+2)^0,f,c
  9728   003ECE  B0D8               	btfsc	status,0,c
  9729   003ED0  2A1F               	incf	(___flge@ff1+2)^0,f,c
  9730   003ED2  0E80               	movlw	128
  9731   003ED4  5620               	subfwb	(___flge@ff1+3)^0,f,c
  9732   003ED6                     l4235:
  9733   003ED6  AE24               	btfss	(___flge@ff2+3)^0,7,c
  9734   003ED8  EF70  F01F         	goto	u4191
  9735   003EDC  EF72  F01F         	goto	u4190
  9736   003EE0                     u4191:
  9737   003EE0  EF7B  F01F         	goto	l820
  9738   003EE4                     u4190:
  9739   003EE4  6C21               	negf	___flge@ff2^0,c
  9740   003EE6  1E22               	comf	(___flge@ff2+1)^0,f,c
  9741   003EE8  B0D8               	btfsc	status,0,c
  9742   003EEA  2A22               	incf	(___flge@ff2+1)^0,f,c
  9743   003EEC  1E23               	comf	(___flge@ff2+2)^0,f,c
  9744   003EEE  B0D8               	btfsc	status,0,c
  9745   003EF0  2A23               	incf	(___flge@ff2+2)^0,f,c
  9746   003EF2  0E80               	movlw	128
  9747   003EF4  5624               	subfwb	(___flge@ff2+3)^0,f,c
  9748   003EF6                     l820:
  9749   003EF6  0E00               	movlw	0
  9750   003EF8  1A1D               	xorwf	___flge@ff1^0,f,c
  9751   003EFA  0E00               	movlw	0
  9752   003EFC  1A1E               	xorwf	(___flge@ff1+1)^0,f,c
  9753   003EFE  0E00               	movlw	0
  9754   003F00  1A1F               	xorwf	(___flge@ff1+2)^0,f,c
  9755   003F02  0E80               	movlw	128
  9756   003F04  1A20               	xorwf	(___flge@ff1+3)^0,f,c
  9757   003F06  0E00               	movlw	0
  9758   003F08  1A21               	xorwf	___flge@ff2^0,f,c
  9759   003F0A  0E00               	movlw	0
  9760   003F0C  1A22               	xorwf	(___flge@ff2+1)^0,f,c
  9761   003F0E  0E00               	movlw	0
  9762   003F10  1A23               	xorwf	(___flge@ff2+2)^0,f,c
  9763   003F12  0E80               	movlw	128
  9764   003F14  1A24               	xorwf	(___flge@ff2+3)^0,f,c
  9765   003F16  5021               	movf	___flge@ff2^0,w,c
  9766   003F18  5C1D               	subwf	___flge@ff1^0,w,c
  9767   003F1A  5022               	movf	(___flge@ff2+1)^0,w,c
  9768   003F1C  581E               	subwfb	(___flge@ff1+1)^0,w,c
  9769   003F1E  5023               	movf	(___flge@ff2+2)^0,w,c
  9770   003F20  581F               	subwfb	(___flge@ff1+2)^0,w,c
  9771   003F22  5024               	movf	(___flge@ff2+3)^0,w,c
  9772   003F24  5820               	subwfb	(___flge@ff1+3)^0,w,c
  9773   003F26  B0D8               	btfsc	status,0,c
  9774   003F28  EF98  F01F         	goto	u4201
  9775   003F2C  EF9A  F01F         	goto	u4200
  9776   003F30                     u4201:
  9777   003F30  EF9D  F01F         	goto	l4241
  9778   003F34                     u4200:
  9779   003F34  90D8               	bcf	status,0,c
  9780   003F36  EF9E  F01F         	goto	l825
  9781   003F3A                     l4241:
  9782   003F3A  80D8               	bsf	status,0,c
  9783   003F3C                     l825:
  9784   003F3C  0012               	return		;funcret
  9785   003F3E                     __end_of___flge:
  9786                           	callstack 0
  9787                           
  9788 ;; *************** function ___fldiv *****************
  9789 ;; Defined at:
  9790 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\sprcdiv.c"
  9791 ;; Parameters:    Size  Location     Type
  9792 ;;  b               4   53[COMRAM] unsigned char 
  9793 ;;  a               4   57[COMRAM] unsigned char 
  9794 ;; Auto vars:     Size  Location     Type
  9795 ;;  grs             4   72[COMRAM] unsigned long 
  9796 ;;  rem             4   65[COMRAM] unsigned long 
  9797 ;;  new_exp         2   70[COMRAM] short 
  9798 ;;  aexp            1   77[COMRAM] unsigned char 
  9799 ;;  bexp            1   76[COMRAM] unsigned char 
  9800 ;;  sign            1   69[COMRAM] unsigned char 
  9801 ;; Return value:  Size  Location     Type
  9802 ;;                  4   53[COMRAM] unsigned char 
  9803 ;; Registers used:
  9804 ;;		wreg, status,2, status,0
  9805 ;; Tracked objects:
  9806 ;;		On entry : 0/0
  9807 ;;		On exit  : 0/0
  9808 ;;		Unchanged: 0/0
  9809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9810 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9811 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9812 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9813 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9814 ;;Total ram usage:       25 bytes
  9815 ;; Hardware stack levels used: 1
  9816 ;; Hardware stack levels required when called: 2
  9817 ;; This function calls:
  9818 ;;		Nothing
  9819 ;; This function is called by:
  9820 ;;		_colorDetect
  9821 ;;		_main
  9822 ;; This function uses a non-reentrant model
  9823 ;;
  9824                           
  9825                           	psect	text42
  9826   00274C                     __ptext42:
  9827                           	callstack 0
  9828   00274C                     ___fldiv:
  9829                           	callstack 27
  9830   00274C  5039               	movf	(___fldiv@b+3)^0,w,c
  9831   00274E  0B80               	andlw	128
  9832   002750  6E46               	movwf	___fldiv@sign^0,c
  9833   002752  5039               	movf	(___fldiv@b+3)^0,w,c
  9834   002754  2439               	addwf	(___fldiv@b+3)^0,w,c
  9835   002756  6E4D               	movwf	___fldiv@bexp^0,c
  9836   002758  AE38               	btfss	(___fldiv@b+2)^0,7,c
  9837   00275A  EFB1  F013         	goto	u3741
  9838   00275E  EFB3  F013         	goto	u3740
  9839   002762                     u3741:
  9840   002762  EFB4  F013         	goto	l3955
  9841   002766                     u3740:
  9842   002766  804D               	bsf	___fldiv@bexp^0,0,c
  9843   002768                     l3955:
  9844   002768  504D               	movf	___fldiv@bexp^0,w,c
  9845   00276A  B4D8               	btfsc	status,2,c
  9846   00276C  EFBA  F013         	goto	u3751
  9847   002770  EFBC  F013         	goto	u3750
  9848   002774                     u3751:
  9849   002774  EFD1  F013         	goto	l3965
  9850   002778                     u3750:
  9851   002778  284D               	incf	___fldiv@bexp^0,w,c
  9852   00277A  A4D8               	btfss	status,2,c
  9853   00277C  EFC2  F013         	goto	u3761
  9854   002780  EFC4  F013         	goto	u3760
  9855   002784                     u3761:
  9856   002784  EFCC  F013         	goto	l3961
  9857   002788                     u3760:
  9858   002788  0E00               	movlw	0
  9859   00278A  6E36               	movwf	___fldiv@b^0,c
  9860   00278C  0E00               	movlw	0
  9861   00278E  6E37               	movwf	(___fldiv@b+1)^0,c
  9862   002790  0E00               	movlw	0
  9863   002792  6E38               	movwf	(___fldiv@b+2)^0,c
  9864   002794  0E00               	movlw	0
  9865   002796  6E39               	movwf	(___fldiv@b+3)^0,c
  9866   002798                     l3961:
  9867   002798  8E38               	bsf	(___fldiv@b+2)^0,7,c
  9868   00279A  0E00               	movlw	0
  9869   00279C  6E39               	movwf	(___fldiv@b+3)^0,c
  9870   00279E  EFD9  F013         	goto	l3967
  9871   0027A2                     l3965:
  9872   0027A2  0E00               	movlw	0
  9873   0027A4  6E36               	movwf	___fldiv@b^0,c
  9874   0027A6  0E00               	movlw	0
  9875   0027A8  6E37               	movwf	(___fldiv@b+1)^0,c
  9876   0027AA  0E00               	movlw	0
  9877   0027AC  6E38               	movwf	(___fldiv@b+2)^0,c
  9878   0027AE  0E00               	movlw	0
  9879   0027B0  6E39               	movwf	(___fldiv@b+3)^0,c
  9880   0027B2                     l3967:
  9881   0027B2  503D               	movf	(___fldiv@a+3)^0,w,c
  9882   0027B4  0B80               	andlw	128
  9883   0027B6  1A46               	xorwf	___fldiv@sign^0,f,c
  9884   0027B8  503D               	movf	(___fldiv@a+3)^0,w,c
  9885   0027BA  243D               	addwf	(___fldiv@a+3)^0,w,c
  9886   0027BC  6E4E               	movwf	___fldiv@aexp^0,c
  9887   0027BE  AE3C               	btfss	(___fldiv@a+2)^0,7,c
  9888   0027C0  EFE4  F013         	goto	u3771
  9889   0027C4  EFE6  F013         	goto	u3770
  9890   0027C8                     u3771:
  9891   0027C8  EFE7  F013         	goto	l3975
  9892   0027CC                     u3770:
  9893   0027CC  804E               	bsf	___fldiv@aexp^0,0,c
  9894   0027CE                     l3975:
  9895   0027CE  504E               	movf	___fldiv@aexp^0,w,c
  9896   0027D0  B4D8               	btfsc	status,2,c
  9897   0027D2  EFED  F013         	goto	u3781
  9898   0027D6  EFEF  F013         	goto	u3780
  9899   0027DA                     u3781:
  9900   0027DA  EF04  F014         	goto	l3985
  9901   0027DE                     u3780:
  9902   0027DE  284E               	incf	___fldiv@aexp^0,w,c
  9903   0027E0  A4D8               	btfss	status,2,c
  9904   0027E2  EFF5  F013         	goto	u3791
  9905   0027E6  EFF7  F013         	goto	u3790
  9906   0027EA                     u3791:
  9907   0027EA  EFFF  F013         	goto	l3981
  9908   0027EE                     u3790:
  9909   0027EE  0E00               	movlw	0
  9910   0027F0  6E3A               	movwf	___fldiv@a^0,c
  9911   0027F2  0E00               	movlw	0
  9912   0027F4  6E3B               	movwf	(___fldiv@a+1)^0,c
  9913   0027F6  0E00               	movlw	0
  9914   0027F8  6E3C               	movwf	(___fldiv@a+2)^0,c
  9915   0027FA  0E00               	movlw	0
  9916   0027FC  6E3D               	movwf	(___fldiv@a+3)^0,c
  9917   0027FE                     l3981:
  9918   0027FE  8E3C               	bsf	(___fldiv@a+2)^0,7,c
  9919   002800  0E00               	movlw	0
  9920   002802  6E3D               	movwf	(___fldiv@a+3)^0,c
  9921   002804  EF0C  F014         	goto	l3987
  9922   002808                     l3985:
  9923   002808  0E00               	movlw	0
  9924   00280A  6E3A               	movwf	___fldiv@a^0,c
  9925   00280C  0E00               	movlw	0
  9926   00280E  6E3B               	movwf	(___fldiv@a+1)^0,c
  9927   002810  0E00               	movlw	0
  9928   002812  6E3C               	movwf	(___fldiv@a+2)^0,c
  9929   002814  0E00               	movlw	0
  9930   002816  6E3D               	movwf	(___fldiv@a+3)^0,c
  9931   002818                     l3987:
  9932   002818  503A               	movf	___fldiv@a^0,w,c
  9933   00281A  103B               	iorwf	(___fldiv@a+1)^0,w,c
  9934   00281C  103C               	iorwf	(___fldiv@a+2)^0,w,c
  9935   00281E  103D               	iorwf	(___fldiv@a+3)^0,w,c
  9936   002820  A4D8               	btfss	status,2,c
  9937   002822  EF15  F014         	goto	u3801
  9938   002826  EF17  F014         	goto	u3800
  9939   00282A                     u3801:
  9940   00282A  EF2F  F014         	goto	l3999
  9941   00282E                     u3800:
  9942   00282E  0E00               	movlw	0
  9943   002830  6E36               	movwf	___fldiv@b^0,c
  9944   002832  0E00               	movlw	0
  9945   002834  6E37               	movwf	(___fldiv@b+1)^0,c
  9946   002836  0E00               	movlw	0
  9947   002838  6E38               	movwf	(___fldiv@b+2)^0,c
  9948   00283A  0E00               	movlw	0
  9949   00283C  6E39               	movwf	(___fldiv@b+3)^0,c
  9950   00283E  0E80               	movlw	128
  9951   002840  1238               	iorwf	(___fldiv@b+2)^0,f,c
  9952   002842  0E7F               	movlw	127
  9953   002844  1239               	iorwf	(___fldiv@b+3)^0,f,c
  9954   002846                     l3993:
  9955   002846  5046               	movf	___fldiv@sign^0,w,c
  9956   002848  1239               	iorwf	(___fldiv@b+3)^0,f,c
  9957   00284A  C036  F036         	movff	___fldiv@b,?___fldiv
  9958   00284E  C037  F037         	movff	___fldiv@b+1,?___fldiv+1
  9959   002852  C038  F038         	movff	___fldiv@b+2,?___fldiv+2
  9960   002856  C039  F039         	movff	___fldiv@b+3,?___fldiv+3
  9961   00285A  EF72  F015         	goto	l1137
  9962   00285E                     l3999:
  9963   00285E  504D               	movf	___fldiv@bexp^0,w,c
  9964   002860  A4D8               	btfss	status,2,c
  9965   002862  EF35  F014         	goto	u3811
  9966   002866  EF37  F014         	goto	u3810
  9967   00286A                     u3811:
  9968   00286A  EF41  F014         	goto	l4007
  9969   00286E                     u3810:
  9970   00286E  0E00               	movlw	0
  9971   002870  6E36               	movwf	?___fldiv^0,c
  9972   002872  0E00               	movlw	0
  9973   002874  6E37               	movwf	(?___fldiv+1)^0,c
  9974   002876  0E00               	movlw	0
  9975   002878  6E38               	movwf	(?___fldiv+2)^0,c
  9976   00287A  0E00               	movlw	0
  9977   00287C  6E39               	movwf	(?___fldiv+3)^0,c
  9978   00287E  EF72  F015         	goto	l1137
  9979   002882                     l4007:
  9980   002882  504E               	movf	___fldiv@aexp^0,w,c
  9981   002884  C04D  F03E         	movff	___fldiv@bexp,??___fldiv
  9982   002888  6A3F               	clrf	(??___fldiv+1)^0,c
  9983   00288A  5E3E               	subwf	??___fldiv^0,f,c
  9984   00288C  0E00               	movlw	0
  9985   00288E  5A3F               	subwfb	(??___fldiv+1)^0,f,c
  9986   002890  0E7F               	movlw	127
  9987   002892  243E               	addwf	??___fldiv^0,w,c
  9988   002894  6E47               	movwf	___fldiv@new_exp^0,c
  9989   002896  0E00               	movlw	0
  9990   002898  203F               	addwfc	(??___fldiv+1)^0,w,c
  9991   00289A  6E48               	movwf	(___fldiv@new_exp+1)^0,c
  9992   00289C  C036  F042         	movff	___fldiv@b,___fldiv@rem
  9993   0028A0  C037  F043         	movff	___fldiv@b+1,___fldiv@rem+1
  9994   0028A4  C038  F044         	movff	___fldiv@b+2,___fldiv@rem+2
  9995   0028A8  C039  F045         	movff	___fldiv@b+3,___fldiv@rem+3
  9996   0028AC  0E00               	movlw	0
  9997   0028AE  6E36               	movwf	___fldiv@b^0,c
  9998   0028B0  0E00               	movlw	0
  9999   0028B2  6E37               	movwf	(___fldiv@b+1)^0,c
 10000   0028B4  0E00               	movlw	0
 10001   0028B6  6E38               	movwf	(___fldiv@b+2)^0,c
 10002   0028B8  0E00               	movlw	0
 10003   0028BA  6E39               	movwf	(___fldiv@b+3)^0,c
 10004   0028BC  0E00               	movlw	0
 10005   0028BE  6E49               	movwf	___fldiv@grs^0,c
 10006   0028C0  0E00               	movlw	0
 10007   0028C2  6E4A               	movwf	(___fldiv@grs+1)^0,c
 10008   0028C4  0E00               	movlw	0
 10009   0028C6  6E4B               	movwf	(___fldiv@grs+2)^0,c
 10010   0028C8  0E00               	movlw	0
 10011   0028CA  6E4C               	movwf	(___fldiv@grs+3)^0,c
 10012   0028CC  0E00               	movlw	0
 10013   0028CE  6E4E               	movwf	___fldiv@aexp^0,c
 10014   0028D0  EFA2  F014         	goto	l1139
 10015   0028D4                     l4017:
 10016   0028D4  504E               	movf	___fldiv@aexp^0,w,c
 10017   0028D6  B4D8               	btfsc	status,2,c
 10018   0028D8  EF70  F014         	goto	u3821
 10019   0028DC  EF72  F014         	goto	u3820
 10020   0028E0                     u3821:
 10021   0028E0  EF89  F014         	goto	l4025
 10022   0028E4                     u3820:
 10023   0028E4  90D8               	bcf	status,0,c
 10024   0028E6  3642               	rlcf	___fldiv@rem^0,f,c
 10025   0028E8  3643               	rlcf	(___fldiv@rem+1)^0,f,c
 10026   0028EA  3644               	rlcf	(___fldiv@rem+2)^0,f,c
 10027   0028EC  3645               	rlcf	(___fldiv@rem+3)^0,f,c
 10028   0028EE  90D8               	bcf	status,0,c
 10029   0028F0  3636               	rlcf	___fldiv@b^0,f,c
 10030   0028F2  3637               	rlcf	(___fldiv@b+1)^0,f,c
 10031   0028F4  3638               	rlcf	(___fldiv@b+2)^0,f,c
 10032   0028F6  3639               	rlcf	(___fldiv@b+3)^0,f,c
 10033   0028F8  AE4C               	btfss	(___fldiv@grs+3)^0,7,c
 10034   0028FA  EF81  F014         	goto	u3831
 10035   0028FE  EF83  F014         	goto	u3830
 10036   002902                     u3831:
 10037   002902  EF84  F014         	goto	l1142
 10038   002906                     u3830:
 10039   002906  8036               	bsf	___fldiv@b^0,0,c
 10040   002908                     l1142:
 10041   002908  90D8               	bcf	status,0,c
 10042   00290A  3649               	rlcf	___fldiv@grs^0,f,c
 10043   00290C  364A               	rlcf	(___fldiv@grs+1)^0,f,c
 10044   00290E  364B               	rlcf	(___fldiv@grs+2)^0,f,c
 10045   002910  364C               	rlcf	(___fldiv@grs+3)^0,f,c
 10046   002912                     l4025:
 10047   002912  503A               	movf	___fldiv@a^0,w,c
 10048   002914  5C42               	subwf	___fldiv@rem^0,w,c
 10049   002916  503B               	movf	(___fldiv@a+1)^0,w,c
 10050   002918  5843               	subwfb	(___fldiv@rem+1)^0,w,c
 10051   00291A  503C               	movf	(___fldiv@a+2)^0,w,c
 10052   00291C  5844               	subwfb	(___fldiv@rem+2)^0,w,c
 10053   00291E  503D               	movf	(___fldiv@a+3)^0,w,c
 10054   002920  5845               	subwfb	(___fldiv@rem+3)^0,w,c
 10055   002922  A0D8               	btfss	status,0,c
 10056   002924  EF96  F014         	goto	u3841
 10057   002928  EF98  F014         	goto	u3840
 10058   00292C                     u3841:
 10059   00292C  EFA1  F014         	goto	l4031
 10060   002930                     u3840:
 10061   002930  8C4C               	bsf	(___fldiv@grs+3)^0,6,c
 10062   002932  503A               	movf	___fldiv@a^0,w,c
 10063   002934  5E42               	subwf	___fldiv@rem^0,f,c
 10064   002936  503B               	movf	(___fldiv@a+1)^0,w,c
 10065   002938  5A43               	subwfb	(___fldiv@rem+1)^0,f,c
 10066   00293A  503C               	movf	(___fldiv@a+2)^0,w,c
 10067   00293C  5A44               	subwfb	(___fldiv@rem+2)^0,f,c
 10068   00293E  503D               	movf	(___fldiv@a+3)^0,w,c
 10069   002940  5A45               	subwfb	(___fldiv@rem+3)^0,f,c
 10070   002942                     l4031:
 10071   002942  2A4E               	incf	___fldiv@aexp^0,f,c
 10072   002944                     l1139:
 10073   002944  0E19               	movlw	25
 10074   002946  644E               	cpfsgt	___fldiv@aexp^0,c
 10075   002948  EFA8  F014         	goto	u3851
 10076   00294C  EFAA  F014         	goto	u3850
 10077   002950                     u3851:
 10078   002950  EF6A  F014         	goto	l4017
 10079   002954                     u3850:
 10080   002954  5042               	movf	___fldiv@rem^0,w,c
 10081   002956  1043               	iorwf	(___fldiv@rem+1)^0,w,c
 10082   002958  1044               	iorwf	(___fldiv@rem+2)^0,w,c
 10083   00295A  1045               	iorwf	(___fldiv@rem+3)^0,w,c
 10084   00295C  B4D8               	btfsc	status,2,c
 10085   00295E  EFB3  F014         	goto	u3861
 10086   002962  EFB5  F014         	goto	u3860
 10087   002966                     u3861:
 10088   002966  EFCD  F014         	goto	l4043
 10089   00296A                     u3860:
 10090   00296A  8049               	bsf	___fldiv@grs^0,0,c
 10091   00296C  EFCD  F014         	goto	l4043
 10092   002970                     l4037:
 10093   002970  90D8               	bcf	status,0,c
 10094   002972  3636               	rlcf	___fldiv@b^0,f,c
 10095   002974  3637               	rlcf	(___fldiv@b+1)^0,f,c
 10096   002976  3638               	rlcf	(___fldiv@b+2)^0,f,c
 10097   002978  3639               	rlcf	(___fldiv@b+3)^0,f,c
 10098   00297A  AE4C               	btfss	(___fldiv@grs+3)^0,7,c
 10099   00297C  EFC2  F014         	goto	u3871
 10100   002980  EFC4  F014         	goto	u3870
 10101   002984                     u3871:
 10102   002984  EFC5  F014         	goto	l1148
 10103   002988                     u3870:
 10104   002988  8036               	bsf	___fldiv@b^0,0,c
 10105   00298A                     l1148:
 10106   00298A  90D8               	bcf	status,0,c
 10107   00298C  3649               	rlcf	___fldiv@grs^0,f,c
 10108   00298E  364A               	rlcf	(___fldiv@grs+1)^0,f,c
 10109   002990  364B               	rlcf	(___fldiv@grs+2)^0,f,c
 10110   002992  364C               	rlcf	(___fldiv@grs+3)^0,f,c
 10111   002994  0647               	decf	___fldiv@new_exp^0,f,c
 10112   002996  A0D8               	btfss	status,0,c
 10113   002998  0648               	decf	(___fldiv@new_exp+1)^0,f,c
 10114   00299A                     l4043:
 10115   00299A  AE38               	btfss	(___fldiv@b+2)^0,7,c
 10116   00299C  EFD2  F014         	goto	u3881
 10117   0029A0  EFD4  F014         	goto	u3880
 10118   0029A4                     u3881:
 10119   0029A4  EFB8  F014         	goto	l4037
 10120   0029A8                     u3880:
 10121   0029A8  0E00               	movlw	0
 10122   0029AA  6E4E               	movwf	___fldiv@aexp^0,c
 10123   0029AC  AE4C               	btfss	(___fldiv@grs+3)^0,7,c
 10124   0029AE  EFDB  F014         	goto	u3891
 10125   0029B2  EFDD  F014         	goto	u3890
 10126   0029B6                     u3891:
 10127   0029B6  EF01  F015         	goto	l1150
 10128   0029BA                     u3890:
 10129   0029BA  0EFF               	movlw	255
 10130   0029BC  1449               	andwf	___fldiv@grs^0,w,c
 10131   0029BE  6E3E               	movwf	??___fldiv^0,c
 10132   0029C0  0EFF               	movlw	255
 10133   0029C2  144A               	andwf	(___fldiv@grs+1)^0,w,c
 10134   0029C4  6E3F               	movwf	(??___fldiv+1)^0,c
 10135   0029C6  0EFF               	movlw	255
 10136   0029C8  144B               	andwf	(___fldiv@grs+2)^0,w,c
 10137   0029CA  6E40               	movwf	(??___fldiv+2)^0,c
 10138   0029CC  0E7F               	movlw	127
 10139   0029CE  144C               	andwf	(___fldiv@grs+3)^0,w,c
 10140   0029D0  6E41               	movwf	(??___fldiv+3)^0,c
 10141   0029D2  503E               	movf	??___fldiv^0,w,c
 10142   0029D4  103F               	iorwf	(??___fldiv+1)^0,w,c
 10143   0029D6  1040               	iorwf	(??___fldiv+2)^0,w,c
 10144   0029D8  1041               	iorwf	(??___fldiv+3)^0,w,c
 10145   0029DA  B4D8               	btfsc	status,2,c
 10146   0029DC  EFF2  F014         	goto	u3901
 10147   0029E0  EFF4  F014         	goto	u3900
 10148   0029E4                     u3901:
 10149   0029E4  EFF8  F014         	goto	l1151
 10150   0029E8                     u3900:
 10151   0029E8                     l4051:
 10152   0029E8  0E01               	movlw	1
 10153   0029EA  6E4E               	movwf	___fldiv@aexp^0,c
 10154   0029EC  EF01  F015         	goto	l1150
 10155   0029F0                     l1151:
 10156   0029F0  A036               	btfss	___fldiv@b^0,0,c
 10157   0029F2  EFFD  F014         	goto	u3911
 10158   0029F6  EFFF  F014         	goto	u3910
 10159   0029FA                     u3911:
 10160   0029FA  EF01  F015         	goto	l1150
 10161   0029FE                     u3910:
 10162   0029FE  EFF4  F014         	goto	l4051
 10163   002A02                     l1150:
 10164   002A02  504E               	movf	___fldiv@aexp^0,w,c
 10165   002A04  B4D8               	btfsc	status,2,c
 10166   002A06  EF07  F015         	goto	u3921
 10167   002A0A  EF09  F015         	goto	u3920
 10168   002A0E                     u3921:
 10169   002A0E  EF2D  F015         	goto	l4063
 10170   002A12                     u3920:
 10171   002A12  0E01               	movlw	1
 10172   002A14  2636               	addwf	___fldiv@b^0,f,c
 10173   002A16  0E00               	movlw	0
 10174   002A18  2237               	addwfc	(___fldiv@b+1)^0,f,c
 10175   002A1A  2238               	addwfc	(___fldiv@b+2)^0,f,c
 10176   002A1C  2239               	addwfc	(___fldiv@b+3)^0,f,c
 10177   002A1E  A039               	btfss	(___fldiv@b+3)^0,0,c
 10178   002A20  EF14  F015         	goto	u3931
 10179   002A24  EF16  F015         	goto	u3930
 10180   002A28                     u3931:
 10181   002A28  EF2D  F015         	goto	l4063
 10182   002A2C                     u3930:
 10183   002A2C  C036  F03E         	movff	___fldiv@b,??___fldiv
 10184   002A30  C037  F03F         	movff	___fldiv@b+1,??___fldiv+1
 10185   002A34  C038  F040         	movff	___fldiv@b+2,??___fldiv+2
 10186   002A38  C039  F041         	movff	___fldiv@b+3,??___fldiv+3
 10187   002A3C  3441               	rlcf	(??___fldiv+3)^0,w,c
 10188   002A3E  3241               	rrcf	(??___fldiv+3)^0,f,c
 10189   002A40  3240               	rrcf	(??___fldiv+2)^0,f,c
 10190   002A42  323F               	rrcf	(??___fldiv+1)^0,f,c
 10191   002A44  323E               	rrcf	??___fldiv^0,f,c
 10192   002A46  C03E  F036         	movff	??___fldiv,___fldiv@b
 10193   002A4A  C03F  F037         	movff	??___fldiv+1,___fldiv@b+1
 10194   002A4E  C040  F038         	movff	??___fldiv+2,___fldiv@b+2
 10195   002A52  C041  F039         	movff	??___fldiv+3,___fldiv@b+3
 10196   002A56  4A47               	infsnz	___fldiv@new_exp^0,f,c
 10197   002A58  2A48               	incf	(___fldiv@new_exp+1)^0,f,c
 10198   002A5A                     l4063:
 10199   002A5A  BE48               	btfsc	(___fldiv@new_exp+1)^0,7,c
 10200   002A5C  EF38  F015         	goto	u3941
 10201   002A60  5048               	movf	(___fldiv@new_exp+1)^0,w,c
 10202   002A62  E108               	bnz	u3940
 10203   002A64  2847               	incf	___fldiv@new_exp^0,w,c
 10204   002A66  A0D8               	btfss	status,0,c
 10205   002A68  EF38  F015         	goto	u3941
 10206   002A6C  EF3A  F015         	goto	u3940
 10207   002A70                     u3941:
 10208   002A70  EF45  F015         	goto	l4067
 10209   002A74                     u3940:
 10210   002A74  0E00               	movlw	0
 10211   002A76  6E48               	movwf	(___fldiv@new_exp+1)^0,c
 10212   002A78  6847               	setf	___fldiv@new_exp^0,c
 10213   002A7A  0E00               	movlw	0
 10214   002A7C  6E36               	movwf	___fldiv@b^0,c
 10215   002A7E  0E00               	movlw	0
 10216   002A80  6E37               	movwf	(___fldiv@b+1)^0,c
 10217   002A82  0E00               	movlw	0
 10218   002A84  6E38               	movwf	(___fldiv@b+2)^0,c
 10219   002A86  0E00               	movlw	0
 10220   002A88  6E39               	movwf	(___fldiv@b+3)^0,c
 10221   002A8A                     l4067:
 10222   002A8A  BE48               	btfsc	(___fldiv@new_exp+1)^0,7,c
 10223   002A8C  EF52  F015         	goto	u3950
 10224   002A90  5048               	movf	(___fldiv@new_exp+1)^0,w,c
 10225   002A92  E106               	bnz	u3951
 10226   002A94  0447               	decf	___fldiv@new_exp^0,w,c
 10227   002A96  B0D8               	btfsc	status,0,c
 10228   002A98  EF50  F015         	goto	u3951
 10229   002A9C  EF52  F015         	goto	u3950
 10230   002AA0                     u3951:
 10231   002AA0  EF60  F015         	goto	l4071
 10232   002AA4                     u3950:
 10233   002AA4  0E00               	movlw	0
 10234   002AA6  6E48               	movwf	(___fldiv@new_exp+1)^0,c
 10235   002AA8  0E00               	movlw	0
 10236   002AAA  6E47               	movwf	___fldiv@new_exp^0,c
 10237   002AAC  0E00               	movlw	0
 10238   002AAE  6E36               	movwf	___fldiv@b^0,c
 10239   002AB0  0E00               	movlw	0
 10240   002AB2  6E37               	movwf	(___fldiv@b+1)^0,c
 10241   002AB4  0E00               	movlw	0
 10242   002AB6  6E38               	movwf	(___fldiv@b+2)^0,c
 10243   002AB8  0E00               	movlw	0
 10244   002ABA  6E39               	movwf	(___fldiv@b+3)^0,c
 10245   002ABC  0E00               	movlw	0
 10246   002ABE  6E46               	movwf	___fldiv@sign^0,c
 10247   002AC0                     l4071:
 10248   002AC0  C047  F04D         	movff	___fldiv@new_exp,___fldiv@bexp
 10249   002AC4  A04D               	btfss	___fldiv@bexp^0,0,c
 10250   002AC6  EF67  F015         	goto	u3961
 10251   002ACA  EF69  F015         	goto	u3960
 10252   002ACE                     u3961:
 10253   002ACE  EF6C  F015         	goto	l4077
 10254   002AD2                     u3960:
 10255   002AD2  8E38               	bsf	(___fldiv@b+2)^0,7,c
 10256   002AD4  EF6D  F015         	goto	l4079
 10257   002AD8                     l4077:
 10258   002AD8  9E38               	bcf	(___fldiv@b+2)^0,7,c
 10259   002ADA                     l4079:
 10260   002ADA  90D8               	bcf	status,0,c
 10261   002ADC  304D               	rrcf	___fldiv@bexp^0,w,c
 10262   002ADE  6E39               	movwf	(___fldiv@b+3)^0,c
 10263   002AE0  EF23  F014         	goto	l3993
 10264   002AE4                     l1137:
 10265   002AE4  0012               	return		;funcret
 10266   002AE6                     __end_of___fldiv:
 10267                           	callstack 0
 10268                           
 10269 ;; *************** function _ambientCal *****************
 10270 ;; Defined at:
 10271 ;;		line 99 in file "MazeRobot.X/color.c"
 10272 ;; Parameters:    Size  Location     Type
 10273 ;;  v               2   17[COMRAM] PTR struct RGB
 10274 ;;		 -> main@ambientRGBVal(8), 
 10275 ;; Auto vars:     Size  Location     Type
 10276 ;;  i               2   21[COMRAM] int 
 10277 ;; Return value:  Size  Location     Type
 10278 ;;                  1    wreg      void 
 10279 ;; Registers used:
 10280 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10281 ;; Tracked objects:
 10282 ;;		On entry : 0/0
 10283 ;;		On exit  : 0/0
 10284 ;;		Unchanged: 0/0
 10285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10286 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10287 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10288 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10289 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10290 ;;Total ram usage:        6 bytes
 10291 ;; Hardware stack levels used: 1
 10292 ;; Hardware stack levels required when called: 6
 10293 ;; This function calls:
 10294 ;;		_getColor
 10295 ;; This function is called by:
 10296 ;;		_main
 10297 ;; This function uses a non-reentrant model
 10298 ;;
 10299                           
 10300                           	psect	text43
 10301   004022                     __ptext43:
 10302                           	callstack 0
 10303   004022                     _ambientCal:
 10304                           	callstack 24
 10305   004022                     
 10306                           ;MazeRobot.X/color.c: 102:     for(int i = 0;i<20;i++){
 10307   004022  0E00               	movlw	0
 10308   004024  6E17               	movwf	(ambientCal@i+1)^0,c
 10309   004026  0E00               	movlw	0
 10310   004028  6E16               	movwf	ambientCal@i^0,c
 10311   00402A                     l4307:
 10312                           
 10313                           ;MazeRobot.X/color.c: 103:             LATDbits.LATD7 = !LATDbits.LATD7;
 10314   00402A  AE7C               	btfss	124,7,c	;volatile
 10315   00402C  EF1A  F020         	goto	u4311
 10316   004030  EF1E  F020         	goto	u4310
 10317   004034                     u4311:
 10318   004034  6A14               	clrf	??_ambientCal^0,c
 10319   004036  2A14               	incf	??_ambientCal^0,f,c
 10320   004038  EF1F  F020         	goto	u4328
 10321   00403C                     u4310:
 10322   00403C  6A14               	clrf	??_ambientCal^0,c
 10323   00403E                     u4328:
 10324   00403E  3214               	rrcf	??_ambientCal^0,f,c
 10325   004040  3214               	rrcf	??_ambientCal^0,f,c
 10326   004042  507C               	movf	124,w,c	;volatile
 10327   004044  1814               	xorwf	??_ambientCal^0,w,c
 10328   004046  0B7F               	andlw	-129
 10329   004048  1814               	xorwf	??_ambientCal^0,w,c
 10330   00404A  6E7C               	movwf	124,c	;volatile
 10331   00404C                     
 10332                           ;MazeRobot.X/color.c: 104:             _delay((unsigned long)((100)*(64000000/4000.0)));
 10333   00404C  0E09               	movlw	9
 10334   00404E  6E15               	movwf	(??_ambientCal+1)^0,c
 10335   004050  0E1E               	movlw	30
 10336   004052  6E14               	movwf	??_ambientCal^0,c
 10337   004054  0EE4               	movlw	228
 10338   004056                     u6567:
 10339   004056  2EE8               	decfsz	wreg,f,c
 10340   004058  D7FE               	bra	u6567
 10341   00405A  2E14               	decfsz	??_ambientCal^0,f,c
 10342   00405C  D7FC               	bra	u6567
 10343   00405E  2E15               	decfsz	(??_ambientCal+1)^0,f,c
 10344   004060  D7FA               	bra	u6567
 10345   004062  D000               	nop2	
 10346                           
 10347                           ;MazeRobot.X/color.c: 105:             }
 10348   004064  4A16               	infsnz	ambientCal@i^0,f,c
 10349   004066  2A17               	incf	(ambientCal@i+1)^0,f,c
 10350   004068  BE17               	btfsc	(ambientCal@i+1)^0,7,c
 10351   00406A  EF40  F020         	goto	u4331
 10352   00406E  5017               	movf	(ambientCal@i+1)^0,w,c
 10353   004070  E109               	bnz	u4330
 10354   004072  0E14               	movlw	20
 10355   004074  5C16               	subwf	ambientCal@i^0,w,c
 10356   004076  A0D8               	btfss	status,0,c
 10357   004078  EF40  F020         	goto	u4331
 10358   00407C  EF42  F020         	goto	u4330
 10359   004080                     u4331:
 10360   004080  EF15  F020         	goto	l4307
 10361   004084                     u4330:
 10362   004084                     
 10363                           ;MazeRobot.X/color.c: 106:             LATDbits.LATD7 = !LATDbits.LATD7;
 10364   004084  AE7C               	btfss	124,7,c	;volatile
 10365   004086  EF47  F020         	goto	u4341
 10366   00408A  EF4B  F020         	goto	u4340
 10367   00408E                     u4341:
 10368   00408E  6A14               	clrf	??_ambientCal^0,c
 10369   004090  2A14               	incf	??_ambientCal^0,f,c
 10370   004092  EF4C  F020         	goto	u4358
 10371   004096                     u4340:
 10372   004096  6A14               	clrf	??_ambientCal^0,c
 10373   004098                     u4358:
 10374   004098  3214               	rrcf	??_ambientCal^0,f,c
 10375   00409A  3214               	rrcf	??_ambientCal^0,f,c
 10376   00409C  507C               	movf	124,w,c	;volatile
 10377   00409E  1814               	xorwf	??_ambientCal^0,w,c
 10378   0040A0  0B7F               	andlw	-129
 10379   0040A2  1814               	xorwf	??_ambientCal^0,w,c
 10380   0040A4  6E7C               	movwf	124,c	;volatile
 10381   0040A6                     
 10382                           ;MazeRobot.X/color.c: 107:             _delay((unsigned long)((500)*(64000000/4000.0)));
 10383   0040A6  0E29               	movlw	41
 10384   0040A8  6E15               	movwf	(??_ambientCal+1)^0,c
 10385   0040AA  0E96               	movlw	150
 10386   0040AC  6E14               	movwf	??_ambientCal^0,c
 10387   0040AE  0E7F               	movlw	127
 10388   0040B0                     u6577:
 10389   0040B0  2EE8               	decfsz	wreg,f,c
 10390   0040B2  D7FE               	bra	u6577
 10391   0040B4  2E14               	decfsz	??_ambientCal^0,f,c
 10392   0040B6  D7FC               	bra	u6577
 10393   0040B8  2E15               	decfsz	(??_ambientCal+1)^0,f,c
 10394   0040BA  D7FA               	bra	u6577
 10395   0040BC  F000               	nop	
 10396   0040BE                     
 10397                           ;MazeRobot.X/color.c: 108:             getColor(v);
 10398   0040BE  C012  F010         	movff	ambientCal@v,getColor@v
 10399   0040C2  C013  F011         	movff	ambientCal@v+1,getColor@v+1
 10400   0040C6  ECD3  F023         	call	_getColor	;wreg free
 10401   0040CA                     
 10402                           ;MazeRobot.X/color.c: 109:             _delay((unsigned long)((500)*(64000000/4000.0)));
 10403   0040CA  0E29               	movlw	41
 10404   0040CC  6E15               	movwf	(??_ambientCal+1)^0,c
 10405   0040CE  0E96               	movlw	150
 10406   0040D0  6E14               	movwf	??_ambientCal^0,c
 10407   0040D2  0E7F               	movlw	127
 10408   0040D4                     u6587:
 10409   0040D4  2EE8               	decfsz	wreg,f,c
 10410   0040D6  D7FE               	bra	u6587
 10411   0040D8  2E14               	decfsz	??_ambientCal^0,f,c
 10412   0040DA  D7FC               	bra	u6587
 10413   0040DC  2E15               	decfsz	(??_ambientCal+1)^0,f,c
 10414   0040DE  D7FA               	bra	u6587
 10415   0040E0  F000               	nop	
 10416   0040E2                     
 10417                           ;MazeRobot.X/color.c: 110:             LATDbits.LATD7 = !LATDbits.LATD7;
 10418   0040E2  AE7C               	btfss	124,7,c	;volatile
 10419   0040E4  EF76  F020         	goto	u4361
 10420   0040E8  EF7A  F020         	goto	u4360
 10421   0040EC                     u4361:
 10422   0040EC  6A14               	clrf	??_ambientCal^0,c
 10423   0040EE  2A14               	incf	??_ambientCal^0,f,c
 10424   0040F0  EF7B  F020         	goto	u4378
 10425   0040F4                     u4360:
 10426   0040F4  6A14               	clrf	??_ambientCal^0,c
 10427   0040F6                     u4378:
 10428   0040F6  3214               	rrcf	??_ambientCal^0,f,c
 10429   0040F8  3214               	rrcf	??_ambientCal^0,f,c
 10430   0040FA  507C               	movf	124,w,c	;volatile
 10431   0040FC  1814               	xorwf	??_ambientCal^0,w,c
 10432   0040FE  0B7F               	andlw	-129
 10433   004100  1814               	xorwf	??_ambientCal^0,w,c
 10434   004102  6E7C               	movwf	124,c	;volatile
 10435   004104  0012               	return		;funcret
 10436   004106                     __end_of_ambientCal:
 10437                           	callstack 0
 10438                           
 10439 ;; *************** function _getColor *****************
 10440 ;; Defined at:
 10441 ;;		line 91 in file "MazeRobot.X/color.c"
 10442 ;; Parameters:    Size  Location     Type
 10443 ;;  v               2   15[COMRAM] PTR struct RGB
 10444 ;;		 -> main@whiteRGBVal(8), main@RGBVal(8), main@ambientRGBVal(8), colorDetect@RGBVal(8), 
 10445 ;; Auto vars:     Size  Location     Type
 10446 ;;		None
 10447 ;; Return value:  Size  Location     Type
 10448 ;;                  1    wreg      void 
 10449 ;; Registers used:
 10450 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10451 ;; Tracked objects:
 10452 ;;		On entry : 0/0
 10453 ;;		On exit  : 0/0
 10454 ;;		Unchanged: 0/0
 10455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10456 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10459 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10460 ;;Total ram usage:        2 bytes
 10461 ;; Hardware stack levels used: 1
 10462 ;; Hardware stack levels required when called: 5
 10463 ;; This function calls:
 10464 ;;		_color_read_Blue
 10465 ;;		_color_read_Clear
 10466 ;;		_color_read_Green
 10467 ;;		_color_read_Red
 10468 ;; This function is called by:
 10469 ;;		_ambientCal
 10470 ;;		_whiteCal
 10471 ;;		_colorDetect
 10472 ;;		_main
 10473 ;; This function uses a non-reentrant model
 10474 ;;
 10475                           
 10476                           	psect	text44
 10477   0047A6                     __ptext44:
 10478                           	callstack 0
 10479   0047A6                     _getColor:
 10480                           	callstack 24
 10481   0047A6                     
 10482                           ;MazeRobot.X/color.c: 92:     v->R = color_read_Red();
 10483   0047A6  EC80  F024         	call	_color_read_Red	;wreg free
 10484   0047AA  C010  FFD9         	movff	getColor@v,fsr2l
 10485   0047AE  C011  FFDA         	movff	getColor@v+1,fsr2h
 10486   0047B2  C009  FFDE         	movff	?_color_read_Red,postinc2
 10487   0047B6  C00A  FFDD         	movff	?_color_read_Red+1,postdec2
 10488                           
 10489                           ;MazeRobot.X/color.c: 93:     v->G = color_read_Green();
 10490   0047BA  ECA8  F024         	call	_color_read_Green	;wreg free
 10491   0047BE  EE20 F002          	lfsr	2,2
 10492   0047C2  5010               	movf	getColor@v^0,w,c
 10493   0047C4  26D9               	addwf	fsr2l,f,c
 10494   0047C6  5011               	movf	(getColor@v+1)^0,w,c
 10495   0047C8  22DA               	addwfc	fsr2h,f,c
 10496   0047CA  C009  FFDE         	movff	?_color_read_Green,postinc2
 10497   0047CE  C00A  FFDD         	movff	?_color_read_Green+1,postdec2
 10498                           
 10499                           ;MazeRobot.X/color.c: 94:     v->B = color_read_Blue();
 10500   0047D2  ECF8  F024         	call	_color_read_Blue	;wreg free
 10501   0047D6  EE20 F004          	lfsr	2,4
 10502   0047DA  5010               	movf	getColor@v^0,w,c
 10503   0047DC  26D9               	addwf	fsr2l,f,c
 10504   0047DE  5011               	movf	(getColor@v+1)^0,w,c
 10505   0047E0  22DA               	addwfc	fsr2h,f,c
 10506   0047E2  C009  FFDE         	movff	?_color_read_Blue,postinc2
 10507   0047E6  C00A  FFDD         	movff	?_color_read_Blue+1,postdec2
 10508                           
 10509                           ;MazeRobot.X/color.c: 95:     v->C = color_read_Clear();
 10510   0047EA  ECD0  F024         	call	_color_read_Clear	;wreg free
 10511   0047EE  EE20 F006          	lfsr	2,6
 10512   0047F2  5010               	movf	getColor@v^0,w,c
 10513   0047F4  26D9               	addwf	fsr2l,f,c
 10514   0047F6  5011               	movf	(getColor@v+1)^0,w,c
 10515   0047F8  22DA               	addwfc	fsr2h,f,c
 10516   0047FA  C009  FFDE         	movff	?_color_read_Clear,postinc2
 10517   0047FE  C00A  FFDD         	movff	?_color_read_Clear+1,postdec2
 10518   004802  0012               	return		;funcret
 10519   004804                     __end_of_getColor:
 10520                           	callstack 0
 10521                           
 10522 ;; *************** function _color_read_Red *****************
 10523 ;; Defined at:
 10524 ;;		line 33 in file "MazeRobot.X/color.c"
 10525 ;; Parameters:    Size  Location     Type
 10526 ;;		None
 10527 ;; Auto vars:     Size  Location     Type
 10528 ;;  tmp             2   13[COMRAM] unsigned int 
 10529 ;; Return value:  Size  Location     Type
 10530 ;;                  2    8[COMRAM] unsigned int 
 10531 ;; Registers used:
 10532 ;;		wreg, status,2, status,0, cstack
 10533 ;; Tracked objects:
 10534 ;;		On entry : 0/0
 10535 ;;		On exit  : 0/0
 10536 ;;		Unchanged: 0/0
 10537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10538 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10539 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10540 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10541 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10542 ;;Total ram usage:        7 bytes
 10543 ;; Hardware stack levels used: 1
 10544 ;; Hardware stack levels required when called: 4
 10545 ;; This function calls:
 10546 ;;		_I2C_2_Master_Read
 10547 ;;		_I2C_2_Master_RepStart
 10548 ;;		_I2C_2_Master_Start
 10549 ;;		_I2C_2_Master_Stop
 10550 ;;		_I2C_2_Master_Write
 10551 ;; This function is called by:
 10552 ;;		_getColor
 10553 ;; This function uses a non-reentrant model
 10554 ;;
 10555                           
 10556                           	psect	text45
 10557   004900                     __ptext45:
 10558                           	callstack 0
 10559   004900                     _color_read_Red:
 10560                           	callstack 24
 10561   004900                     
 10562                           ;MazeRobot.X/color.c: 35:  unsigned int tmp;;MazeRobot.X/color.c: 36:  I2C_2_Master_Star
      +                          t();
 10563   004900  ECAB  F026         	call	_I2C_2_Master_Start	;wreg free
 10564                           
 10565                           ;MazeRobot.X/color.c: 37:  I2C_2_Master_Write(0x52 | 0x00);
 10566   004904  0E52               	movlw	82
 10567   004906  ECA0  F026         	call	_I2C_2_Master_Write
 10568                           
 10569                           ;MazeRobot.X/color.c: 38:  I2C_2_Master_Write(0xA0 | 0x16);
 10570   00490A  0EB6               	movlw	182
 10571   00490C  ECA0  F026         	call	_I2C_2_Master_Write
 10572                           
 10573                           ;MazeRobot.X/color.c: 39:  I2C_2_Master_RepStart();
 10574   004910  ECB0  F026         	call	_I2C_2_Master_RepStart	;wreg free
 10575                           
 10576                           ;MazeRobot.X/color.c: 40:  I2C_2_Master_Write(0x52 | 0x01);
 10577   004914  0E53               	movlw	83
 10578   004916  ECA0  F026         	call	_I2C_2_Master_Write
 10579                           
 10580                           ;MazeRobot.X/color.c: 41:  tmp=I2C_2_Master_Read(1);
 10581   00491A  0E01               	movlw	1
 10582   00491C  EC65  F025         	call	_I2C_2_Master_Read
 10583   004920  6E0B               	movwf	??_color_read_Red^0,c
 10584   004922  500B               	movf	??_color_read_Red^0,w,c
 10585   004924  6E0E               	movwf	color_read_Red@tmp^0,c
 10586   004926  6A0F               	clrf	(color_read_Red@tmp+1)^0,c
 10587                           
 10588                           ;MazeRobot.X/color.c: 42:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10589   004928  0E00               	movlw	0
 10590   00492A  EC65  F025         	call	_I2C_2_Master_Read
 10591   00492E  6E0B               	movwf	??_color_read_Red^0,c
 10592   004930  500B               	movf	??_color_read_Red^0,w,c
 10593   004932  6E0D               	movwf	(??_color_read_Red+2)^0,c
 10594   004934  6A0C               	clrf	(??_color_read_Red+1)^0,c
 10595   004936  500E               	movf	color_read_Red@tmp^0,w,c
 10596   004938  100C               	iorwf	(??_color_read_Red+1)^0,w,c
 10597   00493A  6E0E               	movwf	color_read_Red@tmp^0,c
 10598   00493C  500F               	movf	(color_read_Red@tmp+1)^0,w,c
 10599   00493E  100D               	iorwf	(??_color_read_Red+2)^0,w,c
 10600   004940  6E0F               	movwf	(color_read_Red@tmp+1)^0,c
 10601                           
 10602                           ;MazeRobot.X/color.c: 43:  I2C_2_Master_Stop();
 10603   004942  ECA6  F026         	call	_I2C_2_Master_Stop	;wreg free
 10604   004946                     
 10605                           ;MazeRobot.X/color.c: 44:  return tmp;
 10606   004946  C00E  F009         	movff	color_read_Red@tmp,?_color_read_Red
 10607   00494A  C00F  F00A         	movff	color_read_Red@tmp+1,?_color_read_Red+1
 10608   00494E  0012               	return		;funcret
 10609   004950                     __end_of_color_read_Red:
 10610                           	callstack 0
 10611                           
 10612 ;; *************** function _color_read_Green *****************
 10613 ;; Defined at:
 10614 ;;		line 47 in file "MazeRobot.X/color.c"
 10615 ;; Parameters:    Size  Location     Type
 10616 ;;		None
 10617 ;; Auto vars:     Size  Location     Type
 10618 ;;  tmp             2   13[COMRAM] unsigned int 
 10619 ;; Return value:  Size  Location     Type
 10620 ;;                  2    8[COMRAM] unsigned int 
 10621 ;; Registers used:
 10622 ;;		wreg, status,2, status,0, cstack
 10623 ;; Tracked objects:
 10624 ;;		On entry : 0/0
 10625 ;;		On exit  : 0/0
 10626 ;;		Unchanged: 0/0
 10627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10628 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10629 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10630 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10631 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10632 ;;Total ram usage:        7 bytes
 10633 ;; Hardware stack levels used: 1
 10634 ;; Hardware stack levels required when called: 4
 10635 ;; This function calls:
 10636 ;;		_I2C_2_Master_Read
 10637 ;;		_I2C_2_Master_RepStart
 10638 ;;		_I2C_2_Master_Start
 10639 ;;		_I2C_2_Master_Stop
 10640 ;;		_I2C_2_Master_Write
 10641 ;; This function is called by:
 10642 ;;		_getColor
 10643 ;; This function uses a non-reentrant model
 10644 ;;
 10645                           
 10646                           	psect	text46
 10647   004950                     __ptext46:
 10648                           	callstack 0
 10649   004950                     _color_read_Green:
 10650                           	callstack 24
 10651   004950                     
 10652                           ;MazeRobot.X/color.c: 49:  unsigned int tmp;;MazeRobot.X/color.c: 50:  I2C_2_Master_Star
      +                          t();
 10653   004950  ECAB  F026         	call	_I2C_2_Master_Start	;wreg free
 10654                           
 10655                           ;MazeRobot.X/color.c: 51:  I2C_2_Master_Write(0x52 | 0x00);
 10656   004954  0E52               	movlw	82
 10657   004956  ECA0  F026         	call	_I2C_2_Master_Write
 10658                           
 10659                           ;MazeRobot.X/color.c: 52:  I2C_2_Master_Write(0xA0 | 0x18);
 10660   00495A  0EB8               	movlw	184
 10661   00495C  ECA0  F026         	call	_I2C_2_Master_Write
 10662                           
 10663                           ;MazeRobot.X/color.c: 53:  I2C_2_Master_RepStart();
 10664   004960  ECB0  F026         	call	_I2C_2_Master_RepStart	;wreg free
 10665                           
 10666                           ;MazeRobot.X/color.c: 54:  I2C_2_Master_Write(0x52 | 0x01);
 10667   004964  0E53               	movlw	83
 10668   004966  ECA0  F026         	call	_I2C_2_Master_Write
 10669                           
 10670                           ;MazeRobot.X/color.c: 55:  tmp=I2C_2_Master_Read(1);
 10671   00496A  0E01               	movlw	1
 10672   00496C  EC65  F025         	call	_I2C_2_Master_Read
 10673   004970  6E0B               	movwf	??_color_read_Green^0,c
 10674   004972  500B               	movf	??_color_read_Green^0,w,c
 10675   004974  6E0E               	movwf	color_read_Green@tmp^0,c
 10676   004976  6A0F               	clrf	(color_read_Green@tmp+1)^0,c
 10677                           
 10678                           ;MazeRobot.X/color.c: 56:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10679   004978  0E00               	movlw	0
 10680   00497A  EC65  F025         	call	_I2C_2_Master_Read
 10681   00497E  6E0B               	movwf	??_color_read_Green^0,c
 10682   004980  500B               	movf	??_color_read_Green^0,w,c
 10683   004982  6E0D               	movwf	(??_color_read_Green+2)^0,c
 10684   004984  6A0C               	clrf	(??_color_read_Green+1)^0,c
 10685   004986  500E               	movf	color_read_Green@tmp^0,w,c
 10686   004988  100C               	iorwf	(??_color_read_Green+1)^0,w,c
 10687   00498A  6E0E               	movwf	color_read_Green@tmp^0,c
 10688   00498C  500F               	movf	(color_read_Green@tmp+1)^0,w,c
 10689   00498E  100D               	iorwf	(??_color_read_Green+2)^0,w,c
 10690   004990  6E0F               	movwf	(color_read_Green@tmp+1)^0,c
 10691                           
 10692                           ;MazeRobot.X/color.c: 57:  I2C_2_Master_Stop();
 10693   004992  ECA6  F026         	call	_I2C_2_Master_Stop	;wreg free
 10694   004996                     
 10695                           ;MazeRobot.X/color.c: 58:  return tmp;
 10696   004996  C00E  F009         	movff	color_read_Green@tmp,?_color_read_Green
 10697   00499A  C00F  F00A         	movff	color_read_Green@tmp+1,?_color_read_Green+1
 10698   00499E  0012               	return		;funcret
 10699   0049A0                     __end_of_color_read_Green:
 10700                           	callstack 0
 10701                           
 10702 ;; *************** function _color_read_Clear *****************
 10703 ;; Defined at:
 10704 ;;		line 76 in file "MazeRobot.X/color.c"
 10705 ;; Parameters:    Size  Location     Type
 10706 ;;		None
 10707 ;; Auto vars:     Size  Location     Type
 10708 ;;  tmp             2   13[COMRAM] unsigned int 
 10709 ;; Return value:  Size  Location     Type
 10710 ;;                  2    8[COMRAM] unsigned int 
 10711 ;; Registers used:
 10712 ;;		wreg, status,2, status,0, cstack
 10713 ;; Tracked objects:
 10714 ;;		On entry : 0/0
 10715 ;;		On exit  : 0/0
 10716 ;;		Unchanged: 0/0
 10717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10718 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10719 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10720 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10721 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10722 ;;Total ram usage:        7 bytes
 10723 ;; Hardware stack levels used: 1
 10724 ;; Hardware stack levels required when called: 4
 10725 ;; This function calls:
 10726 ;;		_I2C_2_Master_Read
 10727 ;;		_I2C_2_Master_RepStart
 10728 ;;		_I2C_2_Master_Start
 10729 ;;		_I2C_2_Master_Stop
 10730 ;;		_I2C_2_Master_Write
 10731 ;; This function is called by:
 10732 ;;		_getColor
 10733 ;; This function uses a non-reentrant model
 10734 ;;
 10735                           
 10736                           	psect	text47
 10737   0049A0                     __ptext47:
 10738                           	callstack 0
 10739   0049A0                     _color_read_Clear:
 10740                           	callstack 24
 10741   0049A0                     
 10742                           ;MazeRobot.X/color.c: 78:  unsigned int tmp;;MazeRobot.X/color.c: 79:  I2C_2_Master_Star
      +                          t();
 10743   0049A0  ECAB  F026         	call	_I2C_2_Master_Start	;wreg free
 10744                           
 10745                           ;MazeRobot.X/color.c: 80:  I2C_2_Master_Write(0x52 | 0x00);
 10746   0049A4  0E52               	movlw	82
 10747   0049A6  ECA0  F026         	call	_I2C_2_Master_Write
 10748                           
 10749                           ;MazeRobot.X/color.c: 81:  I2C_2_Master_Write(0xA0 | 0x14);
 10750   0049AA  0EB4               	movlw	180
 10751   0049AC  ECA0  F026         	call	_I2C_2_Master_Write
 10752                           
 10753                           ;MazeRobot.X/color.c: 82:  I2C_2_Master_RepStart();
 10754   0049B0  ECB0  F026         	call	_I2C_2_Master_RepStart	;wreg free
 10755                           
 10756                           ;MazeRobot.X/color.c: 83:  I2C_2_Master_Write(0x52 | 0x01);
 10757   0049B4  0E53               	movlw	83
 10758   0049B6  ECA0  F026         	call	_I2C_2_Master_Write
 10759                           
 10760                           ;MazeRobot.X/color.c: 84:  tmp=I2C_2_Master_Read(1);
 10761   0049BA  0E01               	movlw	1
 10762   0049BC  EC65  F025         	call	_I2C_2_Master_Read
 10763   0049C0  6E0B               	movwf	??_color_read_Clear^0,c
 10764   0049C2  500B               	movf	??_color_read_Clear^0,w,c
 10765   0049C4  6E0E               	movwf	color_read_Clear@tmp^0,c
 10766   0049C6  6A0F               	clrf	(color_read_Clear@tmp+1)^0,c
 10767                           
 10768                           ;MazeRobot.X/color.c: 85:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10769   0049C8  0E00               	movlw	0
 10770   0049CA  EC65  F025         	call	_I2C_2_Master_Read
 10771   0049CE  6E0B               	movwf	??_color_read_Clear^0,c
 10772   0049D0  500B               	movf	??_color_read_Clear^0,w,c
 10773   0049D2  6E0D               	movwf	(??_color_read_Clear+2)^0,c
 10774   0049D4  6A0C               	clrf	(??_color_read_Clear+1)^0,c
 10775   0049D6  500E               	movf	color_read_Clear@tmp^0,w,c
 10776   0049D8  100C               	iorwf	(??_color_read_Clear+1)^0,w,c
 10777   0049DA  6E0E               	movwf	color_read_Clear@tmp^0,c
 10778   0049DC  500F               	movf	(color_read_Clear@tmp+1)^0,w,c
 10779   0049DE  100D               	iorwf	(??_color_read_Clear+2)^0,w,c
 10780   0049E0  6E0F               	movwf	(color_read_Clear@tmp+1)^0,c
 10781                           
 10782                           ;MazeRobot.X/color.c: 86:  I2C_2_Master_Stop();
 10783   0049E2  ECA6  F026         	call	_I2C_2_Master_Stop	;wreg free
 10784   0049E6                     
 10785                           ;MazeRobot.X/color.c: 87:  return tmp;
 10786   0049E6  C00E  F009         	movff	color_read_Clear@tmp,?_color_read_Clear
 10787   0049EA  C00F  F00A         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
 10788   0049EE  0012               	return		;funcret
 10789   0049F0                     __end_of_color_read_Clear:
 10790                           	callstack 0
 10791                           
 10792 ;; *************** function _color_read_Blue *****************
 10793 ;; Defined at:
 10794 ;;		line 62 in file "MazeRobot.X/color.c"
 10795 ;; Parameters:    Size  Location     Type
 10796 ;;		None
 10797 ;; Auto vars:     Size  Location     Type
 10798 ;;  tmp             2   13[COMRAM] unsigned int 
 10799 ;; Return value:  Size  Location     Type
 10800 ;;                  2    8[COMRAM] unsigned int 
 10801 ;; Registers used:
 10802 ;;		wreg, status,2, status,0, cstack
 10803 ;; Tracked objects:
 10804 ;;		On entry : 0/0
 10805 ;;		On exit  : 0/0
 10806 ;;		Unchanged: 0/0
 10807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10808 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10809 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10810 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10811 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10812 ;;Total ram usage:        7 bytes
 10813 ;; Hardware stack levels used: 1
 10814 ;; Hardware stack levels required when called: 4
 10815 ;; This function calls:
 10816 ;;		_I2C_2_Master_Read
 10817 ;;		_I2C_2_Master_RepStart
 10818 ;;		_I2C_2_Master_Start
 10819 ;;		_I2C_2_Master_Stop
 10820 ;;		_I2C_2_Master_Write
 10821 ;; This function is called by:
 10822 ;;		_getColor
 10823 ;; This function uses a non-reentrant model
 10824 ;;
 10825                           
 10826                           	psect	text48
 10827   0049F0                     __ptext48:
 10828                           	callstack 0
 10829   0049F0                     _color_read_Blue:
 10830                           	callstack 24
 10831   0049F0                     
 10832                           ;MazeRobot.X/color.c: 64:  unsigned int tmp;;MazeRobot.X/color.c: 65:  I2C_2_Master_Star
      +                          t();
 10833   0049F0  ECAB  F026         	call	_I2C_2_Master_Start	;wreg free
 10834                           
 10835                           ;MazeRobot.X/color.c: 66:  I2C_2_Master_Write(0x52 | 0x00);
 10836   0049F4  0E52               	movlw	82
 10837   0049F6  ECA0  F026         	call	_I2C_2_Master_Write
 10838                           
 10839                           ;MazeRobot.X/color.c: 67:  I2C_2_Master_Write(0xA0 | 0x1A);
 10840   0049FA  0EBA               	movlw	186
 10841   0049FC  ECA0  F026         	call	_I2C_2_Master_Write
 10842                           
 10843                           ;MazeRobot.X/color.c: 68:  I2C_2_Master_RepStart();
 10844   004A00  ECB0  F026         	call	_I2C_2_Master_RepStart	;wreg free
 10845                           
 10846                           ;MazeRobot.X/color.c: 69:  I2C_2_Master_Write(0x52 | 0x01);
 10847   004A04  0E53               	movlw	83
 10848   004A06  ECA0  F026         	call	_I2C_2_Master_Write
 10849                           
 10850                           ;MazeRobot.X/color.c: 70:  tmp=I2C_2_Master_Read(1);
 10851   004A0A  0E01               	movlw	1
 10852   004A0C  EC65  F025         	call	_I2C_2_Master_Read
 10853   004A10  6E0B               	movwf	??_color_read_Blue^0,c
 10854   004A12  500B               	movf	??_color_read_Blue^0,w,c
 10855   004A14  6E0E               	movwf	color_read_Blue@tmp^0,c
 10856   004A16  6A0F               	clrf	(color_read_Blue@tmp+1)^0,c
 10857                           
 10858                           ;MazeRobot.X/color.c: 71:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10859   004A18  0E00               	movlw	0
 10860   004A1A  EC65  F025         	call	_I2C_2_Master_Read
 10861   004A1E  6E0B               	movwf	??_color_read_Blue^0,c
 10862   004A20  500B               	movf	??_color_read_Blue^0,w,c
 10863   004A22  6E0D               	movwf	(??_color_read_Blue+2)^0,c
 10864   004A24  6A0C               	clrf	(??_color_read_Blue+1)^0,c
 10865   004A26  500E               	movf	color_read_Blue@tmp^0,w,c
 10866   004A28  100C               	iorwf	(??_color_read_Blue+1)^0,w,c
 10867   004A2A  6E0E               	movwf	color_read_Blue@tmp^0,c
 10868   004A2C  500F               	movf	(color_read_Blue@tmp+1)^0,w,c
 10869   004A2E  100D               	iorwf	(??_color_read_Blue+2)^0,w,c
 10870   004A30  6E0F               	movwf	(color_read_Blue@tmp+1)^0,c
 10871                           
 10872                           ;MazeRobot.X/color.c: 72:  I2C_2_Master_Stop();
 10873   004A32  ECA6  F026         	call	_I2C_2_Master_Stop	;wreg free
 10874   004A36                     
 10875                           ;MazeRobot.X/color.c: 73:  return tmp;
 10876   004A36  C00E  F009         	movff	color_read_Blue@tmp,?_color_read_Blue
 10877   004A3A  C00F  F00A         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
 10878   004A3E  0012               	return		;funcret
 10879   004A40                     __end_of_color_read_Blue:
 10880                           	callstack 0
 10881                           
 10882 ;; *************** function _I2C_2_Master_Write *****************
 10883 ;; Defined at:
 10884 ;;		line 45 in file "MazeRobot.X/i2c.c"
 10885 ;; Parameters:    Size  Location     Type
 10886 ;;  data_byte       1    wreg     unsigned char 
 10887 ;; Auto vars:     Size  Location     Type
 10888 ;;  data_byte       1    5[COMRAM] unsigned char 
 10889 ;; Return value:  Size  Location     Type
 10890 ;;                  1    wreg      void 
 10891 ;; Registers used:
 10892 ;;		wreg, status,2, status,0, cstack
 10893 ;; Tracked objects:
 10894 ;;		On entry : 0/0
 10895 ;;		On exit  : 0/0
 10896 ;;		Unchanged: 0/0
 10897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10899 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10901 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10902 ;;Total ram usage:        1 bytes
 10903 ;; Hardware stack levels used: 1
 10904 ;; Hardware stack levels required when called: 3
 10905 ;; This function calls:
 10906 ;;		_I2C_2_Master_Idle
 10907 ;; This function is called by:
 10908 ;;		_color_writetoaddr
 10909 ;;		_color_read_Red
 10910 ;;		_color_read_Green
 10911 ;;		_color_read_Blue
 10912 ;;		_color_read_Clear
 10913 ;; This function uses a non-reentrant model
 10914 ;;
 10915                           
 10916                           	psect	text49
 10917   004D40                     __ptext49:
 10918                           	callstack 0
 10919   004D40                     _I2C_2_Master_Write:
 10920                           	callstack 24
 10921                           
 10922                           ;incstack = 0
 10923                           ;I2C_2_Master_Write@data_byte stored from wreg
 10924   004D40  6E06               	movwf	I2C_2_Master_Write@data_byte^0,c
 10925   004D42                     
 10926                           ;MazeRobot.X/i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);MazeRobot.X/i2c
      +                          .c: 46: {;MazeRobot.X/i2c.c: 47:   I2C_2_Master_Idle();
 10927   004D42  EC44  F026         	call	_I2C_2_Master_Idle	;wreg free
 10928   004D46                     
 10929                           ;MazeRobot.X/i2c.c: 48:   SSP2BUF = data_byte;
 10930   004D46  C006  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
 10931   004D4A  0012               	return		;funcret
 10932   004D4C                     __end_of_I2C_2_Master_Write:
 10933                           	callstack 0
 10934                           
 10935 ;; *************** function _I2C_2_Master_Stop *****************
 10936 ;; Defined at:
 10937 ;;		line 39 in file "MazeRobot.X/i2c.c"
 10938 ;; Parameters:    Size  Location     Type
 10939 ;;		None
 10940 ;; Auto vars:     Size  Location     Type
 10941 ;;		None
 10942 ;; Return value:  Size  Location     Type
 10943 ;;                  1    wreg      void 
 10944 ;; Registers used:
 10945 ;;		wreg, status,2, status,0, cstack
 10946 ;; Tracked objects:
 10947 ;;		On entry : 0/0
 10948 ;;		On exit  : 0/0
 10949 ;;		Unchanged: 0/0
 10950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10954 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10955 ;;Total ram usage:        0 bytes
 10956 ;; Hardware stack levels used: 1
 10957 ;; Hardware stack levels required when called: 3
 10958 ;; This function calls:
 10959 ;;		_I2C_2_Master_Idle
 10960 ;; This function is called by:
 10961 ;;		_color_writetoaddr
 10962 ;;		_color_read_Red
 10963 ;;		_color_read_Green
 10964 ;;		_color_read_Blue
 10965 ;;		_color_read_Clear
 10966 ;; This function uses a non-reentrant model
 10967 ;;
 10968                           
 10969                           	psect	text50
 10970   004D4C                     __ptext50:
 10971                           	callstack 0
 10972   004D4C                     _I2C_2_Master_Stop:
 10973                           	callstack 24
 10974   004D4C                     
 10975                           ;MazeRobot.X/i2c.c: 41:   I2C_2_Master_Idle();
 10976   004D4C  EC44  F026         	call	_I2C_2_Master_Idle	;wreg free
 10977   004D50                     
 10978                           ;MazeRobot.X/i2c.c: 42:   SSP2CON2bits.PEN = 1;
 10979   004D50  010E               	movlb	14	; () banked
 10980   004D52  85DA               	bsf	218,2,b	;volatile
 10981   004D54                     
 10982                           ; BSR set to: 14
 10983   004D54  0012               	return		;funcret
 10984   004D56                     __end_of_I2C_2_Master_Stop:
 10985                           	callstack 0
 10986                           
 10987 ;; *************** function _I2C_2_Master_Start *****************
 10988 ;; Defined at:
 10989 ;;		line 27 in file "MazeRobot.X/i2c.c"
 10990 ;; Parameters:    Size  Location     Type
 10991 ;;		None
 10992 ;; Auto vars:     Size  Location     Type
 10993 ;;		None
 10994 ;; Return value:  Size  Location     Type
 10995 ;;                  1    wreg      void 
 10996 ;; Registers used:
 10997 ;;		wreg, status,2, status,0, cstack
 10998 ;; Tracked objects:
 10999 ;;		On entry : 0/0
 11000 ;;		On exit  : 0/0
 11001 ;;		Unchanged: 0/0
 11002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11006 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11007 ;;Total ram usage:        0 bytes
 11008 ;; Hardware stack levels used: 1
 11009 ;; Hardware stack levels required when called: 3
 11010 ;; This function calls:
 11011 ;;		_I2C_2_Master_Idle
 11012 ;; This function is called by:
 11013 ;;		_color_writetoaddr
 11014 ;;		_color_read_Red
 11015 ;;		_color_read_Green
 11016 ;;		_color_read_Blue
 11017 ;;		_color_read_Clear
 11018 ;; This function uses a non-reentrant model
 11019 ;;
 11020                           
 11021                           	psect	text51
 11022   004D56                     __ptext51:
 11023                           	callstack 0
 11024   004D56                     _I2C_2_Master_Start:
 11025                           	callstack 24
 11026   004D56                     
 11027                           ;MazeRobot.X/i2c.c: 29:   I2C_2_Master_Idle();
 11028   004D56  EC44  F026         	call	_I2C_2_Master_Idle	;wreg free
 11029   004D5A                     
 11030                           ;MazeRobot.X/i2c.c: 30:   SSP2CON2bits.SEN = 1;
 11031   004D5A  010E               	movlb	14	; () banked
 11032   004D5C  81DA               	bsf	218,0,b	;volatile
 11033   004D5E                     
 11034                           ; BSR set to: 14
 11035   004D5E  0012               	return		;funcret
 11036   004D60                     __end_of_I2C_2_Master_Start:
 11037                           	callstack 0
 11038                           
 11039 ;; *************** function _I2C_2_Master_RepStart *****************
 11040 ;; Defined at:
 11041 ;;		line 33 in file "MazeRobot.X/i2c.c"
 11042 ;; Parameters:    Size  Location     Type
 11043 ;;		None
 11044 ;; Auto vars:     Size  Location     Type
 11045 ;;		None
 11046 ;; Return value:  Size  Location     Type
 11047 ;;                  1    wreg      void 
 11048 ;; Registers used:
 11049 ;;		wreg, status,2, status,0, cstack
 11050 ;; Tracked objects:
 11051 ;;		On entry : 0/0
 11052 ;;		On exit  : 0/0
 11053 ;;		Unchanged: 0/0
 11054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11056 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11058 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11059 ;;Total ram usage:        0 bytes
 11060 ;; Hardware stack levels used: 1
 11061 ;; Hardware stack levels required when called: 3
 11062 ;; This function calls:
 11063 ;;		_I2C_2_Master_Idle
 11064 ;; This function is called by:
 11065 ;;		_color_read_Red
 11066 ;;		_color_read_Green
 11067 ;;		_color_read_Blue
 11068 ;;		_color_read_Clear
 11069 ;; This function uses a non-reentrant model
 11070 ;;
 11071                           
 11072                           	psect	text52
 11073   004D60                     __ptext52:
 11074                           	callstack 0
 11075   004D60                     _I2C_2_Master_RepStart:
 11076                           	callstack 24
 11077   004D60                     
 11078                           ;MazeRobot.X/i2c.c: 35:   I2C_2_Master_Idle();
 11079   004D60  EC44  F026         	call	_I2C_2_Master_Idle	;wreg free
 11080   004D64                     
 11081                           ;MazeRobot.X/i2c.c: 36:   SSP2CON2bits.RSEN = 1;
 11082   004D64  010E               	movlb	14	; () banked
 11083   004D66  83DA               	bsf	218,1,b	;volatile
 11084   004D68                     
 11085                           ; BSR set to: 14
 11086   004D68  0012               	return		;funcret
 11087   004D6A                     __end_of_I2C_2_Master_RepStart:
 11088                           	callstack 0
 11089                           
 11090 ;; *************** function _I2C_2_Master_Read *****************
 11091 ;; Defined at:
 11092 ;;		line 51 in file "MazeRobot.X/i2c.c"
 11093 ;; Parameters:    Size  Location     Type
 11094 ;;  ack             1    wreg     unsigned char 
 11095 ;; Auto vars:     Size  Location     Type
 11096 ;;  ack             1    6[COMRAM] unsigned char 
 11097 ;;  tmp             1    7[COMRAM] unsigned char 
 11098 ;; Return value:  Size  Location     Type
 11099 ;;                  1    wreg      unsigned char 
 11100 ;; Registers used:
 11101 ;;		wreg, status,2, status,0, cstack
 11102 ;; Tracked objects:
 11103 ;;		On entry : 0/0
 11104 ;;		On exit  : 0/0
 11105 ;;		Unchanged: 0/0
 11106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11108 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11109 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11110 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11111 ;;Total ram usage:        3 bytes
 11112 ;; Hardware stack levels used: 1
 11113 ;; Hardware stack levels required when called: 3
 11114 ;; This function calls:
 11115 ;;		_I2C_2_Master_Idle
 11116 ;; This function is called by:
 11117 ;;		_color_read_Red
 11118 ;;		_color_read_Green
 11119 ;;		_color_read_Blue
 11120 ;;		_color_read_Clear
 11121 ;; This function uses a non-reentrant model
 11122 ;;
 11123                           
 11124                           	psect	text53
 11125   004ACA                     __ptext53:
 11126                           	callstack 0
 11127   004ACA                     _I2C_2_Master_Read:
 11128                           	callstack 24
 11129                           
 11130                           ; BSR set to: 14
 11131                           ;incstack = 0
 11132                           ;I2C_2_Master_Read@ack stored from wreg
 11133   004ACA  6E07               	movwf	I2C_2_Master_Read@ack^0,c
 11134   004ACC                     
 11135                           ;MazeRobot.X/i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);MazeRobot.X/i
      +                          2c.c: 52: {;MazeRobot.X/i2c.c: 53:   unsigned char tmp;;MazeRobot.X/i2c.c: 54:   I2C_2_M
      +                          aster_Idle();
 11136   004ACC  EC44  F026         	call	_I2C_2_Master_Idle	;wreg free
 11137   004AD0                     
 11138                           ;MazeRobot.X/i2c.c: 55:   SSP2CON2bits.RCEN = 1;
 11139   004AD0  010E               	movlb	14	; () banked
 11140   004AD2  87DA               	bsf	218,3,b	;volatile
 11141                           
 11142                           ;MazeRobot.X/i2c.c: 56:   I2C_2_Master_Idle();
 11143   004AD4  EC44  F026         	call	_I2C_2_Master_Idle	;wreg free
 11144   004AD8                     
 11145                           ;MazeRobot.X/i2c.c: 57:   tmp = SSP2BUF;
 11146   004AD8  CED5 F008          	movff	3797,I2C_2_Master_Read@tmp	;volatile
 11147                           
 11148                           ;MazeRobot.X/i2c.c: 58:   I2C_2_Master_Idle();
 11149   004ADC  EC44  F026         	call	_I2C_2_Master_Idle	;wreg free
 11150   004AE0                     
 11151                           ;MazeRobot.X/i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
 11152   004AE0  5007               	movf	I2C_2_Master_Read@ack^0,w,c
 11153   004AE2  B4D8               	btfsc	status,2,c
 11154   004AE4  EF76  F025         	goto	u3001
 11155   004AE8  EF7A  F025         	goto	u3000
 11156   004AEC                     u3001:
 11157   004AEC  6A06               	clrf	??_I2C_2_Master_Read^0,c
 11158   004AEE  2A06               	incf	??_I2C_2_Master_Read^0,f,c
 11159   004AF0  EF7B  F025         	goto	u3018
 11160   004AF4                     u3000:
 11161   004AF4  6A06               	clrf	??_I2C_2_Master_Read^0,c
 11162   004AF6                     u3018:
 11163   004AF6  3A06               	swapf	??_I2C_2_Master_Read^0,f,c
 11164   004AF8  4606               	rlncf	??_I2C_2_Master_Read^0,f,c
 11165   004AFA  010E               	movlb	14	; () banked
 11166   004AFC  51DA               	movf	218,w,b	;volatile
 11167   004AFE  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
 11168   004B00  0BDF               	andlw	-33
 11169   004B02  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
 11170   004B04  6FDA               	movwf	218,b	;volatile
 11171   004B06                     
 11172                           ; BSR set to: 14
 11173                           ;MazeRobot.X/i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
 11174   004B06  89DA               	bsf	218,4,b	;volatile
 11175   004B08                     
 11176                           ; BSR set to: 14
 11177                           ;MazeRobot.X/i2c.c: 61:   return tmp;
 11178   004B08  5008               	movf	I2C_2_Master_Read@tmp^0,w,c
 11179   004B0A                     
 11180                           ; BSR set to: 14
 11181   004B0A  0012               	return		;funcret
 11182   004B0C                     __end_of_I2C_2_Master_Read:
 11183                           	callstack 0
 11184                           
 11185 ;; *************** function _I2C_2_Master_Idle *****************
 11186 ;; Defined at:
 11187 ;;		line 22 in file "MazeRobot.X/i2c.c"
 11188 ;; Parameters:    Size  Location     Type
 11189 ;;		None
 11190 ;; Auto vars:     Size  Location     Type
 11191 ;;		None
 11192 ;; Return value:  Size  Location     Type
 11193 ;;                  1    wreg      void 
 11194 ;; Registers used:
 11195 ;;		wreg, status,2, status,0
 11196 ;; Tracked objects:
 11197 ;;		On entry : 0/0
 11198 ;;		On exit  : 0/0
 11199 ;;		Unchanged: 0/0
 11200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11202 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11203 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11204 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11205 ;;Total ram usage:        1 bytes
 11206 ;; Hardware stack levels used: 1
 11207 ;; Hardware stack levels required when called: 2
 11208 ;; This function calls:
 11209 ;;		Nothing
 11210 ;; This function is called by:
 11211 ;;		_I2C_2_Master_Start
 11212 ;;		_I2C_2_Master_RepStart
 11213 ;;		_I2C_2_Master_Stop
 11214 ;;		_I2C_2_Master_Write
 11215 ;;		_I2C_2_Master_Read
 11216 ;; This function uses a non-reentrant model
 11217 ;;
 11218                           
 11219                           	psect	text54
 11220   004C88                     __ptext54:
 11221                           	callstack 0
 11222   004C88                     _I2C_2_Master_Idle:
 11223                           	callstack 24
 11224   004C88                     l315:
 11225   004C88  010E               	movlb	14	; () banked
 11226   004C8A  B5D8               	btfsc	216,2,b	;volatile
 11227   004C8C  EF4A  F026         	goto	u2881
 11228   004C90  EF4C  F026         	goto	u2880
 11229   004C94                     u2881:
 11230   004C94  EF44  F026         	goto	l315
 11231   004C98                     u2880:
 11232   004C98                     
 11233                           ; BSR set to: 14
 11234   004C98  CEDA F005          	movff	3802,??_I2C_2_Master_Idle	;volatile
 11235   004C9C  0E1F               	movlw	31
 11236   004C9E  1605               	andwf	??_I2C_2_Master_Idle^0,f,c
 11237   004CA0  A4D8               	btfss	status,2,c
 11238   004CA2  EF55  F026         	goto	u2891
 11239   004CA6  EF57  F026         	goto	u2890
 11240   004CAA                     u2891:
 11241   004CAA  EF44  F026         	goto	l315
 11242   004CAE                     u2890:
 11243   004CAE                     
 11244                           ; BSR set to: 14
 11245   004CAE  0012               	return		;funcret
 11246   004CB0                     __end_of_I2C_2_Master_Idle:
 11247                           	callstack 0
 11248                           
 11249 ;; *************** function _DCmotorsInit *****************
 11250 ;; Defined at:
 11251 ;;		line 73 in file "MazeRobot.X/dc_motor.c"
 11252 ;; Parameters:    Size  Location     Type
 11253 ;;  mL              2    4[COMRAM] PTR struct DC_motor
 11254 ;;		 -> main@motorLeft(9), 
 11255 ;;  mR              2    6[COMRAM] PTR struct DC_motor
 11256 ;;		 -> main@motorRight(9), 
 11257 ;; Auto vars:     Size  Location     Type
 11258 ;;		None
 11259 ;; Return value:  Size  Location     Type
 11260 ;;                  1    wreg      void 
 11261 ;; Registers used:
 11262 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11263 ;; Tracked objects:
 11264 ;;		On entry : 0/0
 11265 ;;		On exit  : 0/0
 11266 ;;		Unchanged: 0/0
 11267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11268 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11271 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11272 ;;Total ram usage:        4 bytes
 11273 ;; Hardware stack levels used: 1
 11274 ;; Hardware stack levels required when called: 2
 11275 ;; This function calls:
 11276 ;;		Nothing
 11277 ;; This function is called by:
 11278 ;;		_main
 11279 ;; This function uses a non-reentrant model
 11280 ;;
 11281                           
 11282                           	psect	text55
 11283   0042B2                     __ptext55:
 11284                           	callstack 0
 11285   0042B2                     _DCmotorsInit:
 11286                           	callstack 28
 11287   0042B2                     
 11288                           ;MazeRobot.X/dc_motor.c: 75:     mL->power = 0;
 11289   0042B2  C005  FFD9         	movff	DCmotorsInit@mL,fsr2l
 11290   0042B6  C006  FFDA         	movff	DCmotorsInit@mL+1,fsr2h
 11291   0042BA  0E00               	movlw	0
 11292   0042BC  6EDF               	movwf	indf2,c
 11293   0042BE                     
 11294                           ;MazeRobot.X/dc_motor.c: 76:     mL->direction = 1;
 11295   0042BE  EE20 F001          	lfsr	2,1
 11296   0042C2  5005               	movf	DCmotorsInit@mL^0,w,c
 11297   0042C4  26D9               	addwf	fsr2l,f,c
 11298   0042C6  5006               	movf	(DCmotorsInit@mL+1)^0,w,c
 11299   0042C8  22DA               	addwfc	fsr2h,f,c
 11300   0042CA  0E01               	movlw	1
 11301   0042CC  6EDF               	movwf	indf2,c
 11302   0042CE                     
 11303                           ;MazeRobot.X/dc_motor.c: 77:     mL->brakemode = 1;
 11304   0042CE  EE20 F002          	lfsr	2,2
 11305   0042D2  5005               	movf	DCmotorsInit@mL^0,w,c
 11306   0042D4  26D9               	addwf	fsr2l,f,c
 11307   0042D6  5006               	movf	(DCmotorsInit@mL+1)^0,w,c
 11308   0042D8  22DA               	addwfc	fsr2h,f,c
 11309   0042DA  0E01               	movlw	1
 11310   0042DC  6EDF               	movwf	indf2,c
 11311   0042DE                     
 11312                           ;MazeRobot.X/dc_motor.c: 78:     mL->posDutyHighByte = (unsigned char *)(&CCPR1H);
 11313   0042DE  EE20 F005          	lfsr	2,5
 11314   0042E2  5005               	movf	DCmotorsInit@mL^0,w,c
 11315   0042E4  26D9               	addwf	fsr2l,f,c
 11316   0042E6  5006               	movf	(DCmotorsInit@mL+1)^0,w,c
 11317   0042E8  22DA               	addwfc	fsr2h,f,c
 11318   0042EA  0EAA               	movlw	170
 11319   0042EC  6EDE               	movwf	postinc2,c
 11320   0042EE  0E0F               	movlw	15
 11321   0042F0  6EDD               	movwf	postdec2,c
 11322   0042F2                     
 11323                           ;MazeRobot.X/dc_motor.c: 79:     mL->negDutyHighByte = (unsigned char *)(&CCPR2H);
 11324   0042F2  EE20 F007          	lfsr	2,7
 11325   0042F6  5005               	movf	DCmotorsInit@mL^0,w,c
 11326   0042F8  26D9               	addwf	fsr2l,f,c
 11327   0042FA  5006               	movf	(DCmotorsInit@mL+1)^0,w,c
 11328   0042FC  22DA               	addwfc	fsr2h,f,c
 11329   0042FE  0EA6               	movlw	166
 11330   004300  6EDE               	movwf	postinc2,c
 11331   004302  0E0F               	movlw	15
 11332   004304  6EDD               	movwf	postdec2,c
 11333   004306                     
 11334                           ;MazeRobot.X/dc_motor.c: 80:     mL->PWMperiod = 199 ;
 11335   004306  EE20 F003          	lfsr	2,3
 11336   00430A  5005               	movf	DCmotorsInit@mL^0,w,c
 11337   00430C  26D9               	addwf	fsr2l,f,c
 11338   00430E  5006               	movf	(DCmotorsInit@mL+1)^0,w,c
 11339   004310  22DA               	addwfc	fsr2h,f,c
 11340   004312  0EC7               	movlw	199
 11341   004314  6EDE               	movwf	postinc2,c
 11342   004316  0E00               	movlw	0
 11343   004318  6EDD               	movwf	postdec2,c
 11344   00431A                     
 11345                           ;MazeRobot.X/dc_motor.c: 82:     mR->power = 0;
 11346   00431A  C007  FFD9         	movff	DCmotorsInit@mR,fsr2l
 11347   00431E  C008  FFDA         	movff	DCmotorsInit@mR+1,fsr2h
 11348   004322  0E00               	movlw	0
 11349   004324  6EDF               	movwf	indf2,c
 11350                           
 11351                           ;MazeRobot.X/dc_motor.c: 83:     mR->direction = 1;
 11352   004326  EE20 F001          	lfsr	2,1
 11353   00432A  5007               	movf	DCmotorsInit@mR^0,w,c
 11354   00432C  26D9               	addwf	fsr2l,f,c
 11355   00432E  5008               	movf	(DCmotorsInit@mR+1)^0,w,c
 11356   004330  22DA               	addwfc	fsr2h,f,c
 11357   004332  0E01               	movlw	1
 11358   004334  6EDF               	movwf	indf2,c
 11359                           
 11360                           ;MazeRobot.X/dc_motor.c: 84:     mR->brakemode = 1;
 11361   004336  EE20 F002          	lfsr	2,2
 11362   00433A  5007               	movf	DCmotorsInit@mR^0,w,c
 11363   00433C  26D9               	addwf	fsr2l,f,c
 11364   00433E  5008               	movf	(DCmotorsInit@mR+1)^0,w,c
 11365   004340  22DA               	addwfc	fsr2h,f,c
 11366   004342  0E01               	movlw	1
 11367   004344  6EDF               	movwf	indf2,c
 11368                           
 11369                           ;MazeRobot.X/dc_motor.c: 85:     mR->posDutyHighByte = (unsigned char *)(&CCPR3H);
 11370   004346  EE20 F005          	lfsr	2,5
 11371   00434A  5007               	movf	DCmotorsInit@mR^0,w,c
 11372   00434C  26D9               	addwf	fsr2l,f,c
 11373   00434E  5008               	movf	(DCmotorsInit@mR+1)^0,w,c
 11374   004350  22DA               	addwfc	fsr2h,f,c
 11375   004352  0E25               	movlw	37
 11376   004354  6EDE               	movwf	postinc2,c
 11377   004356  0E0F               	movlw	15
 11378   004358  6EDD               	movwf	postdec2,c
 11379                           
 11380                           ;MazeRobot.X/dc_motor.c: 86:     mR->negDutyHighByte = (unsigned char *)(&CCPR4H);
 11381   00435A  EE20 F007          	lfsr	2,7
 11382   00435E  5007               	movf	DCmotorsInit@mR^0,w,c
 11383   004360  26D9               	addwf	fsr2l,f,c
 11384   004362  5008               	movf	(DCmotorsInit@mR+1)^0,w,c
 11385   004364  22DA               	addwfc	fsr2h,f,c
 11386   004366  0E21               	movlw	33
 11387   004368  6EDE               	movwf	postinc2,c
 11388   00436A  0E0F               	movlw	15
 11389   00436C  6EDD               	movwf	postdec2,c
 11390                           
 11391                           ;MazeRobot.X/dc_motor.c: 87:     mR->PWMperiod = 199 ;
 11392   00436E  EE20 F003          	lfsr	2,3
 11393   004372  5007               	movf	DCmotorsInit@mR^0,w,c
 11394   004374  26D9               	addwf	fsr2l,f,c
 11395   004376  5008               	movf	(DCmotorsInit@mR+1)^0,w,c
 11396   004378  22DA               	addwfc	fsr2h,f,c
 11397   00437A  0EC7               	movlw	199
 11398   00437C  6EDE               	movwf	postinc2,c
 11399   00437E  0E00               	movlw	0
 11400   004380  6EDD               	movwf	postdec2,c
 11401   004382  0012               	return		;funcret
 11402   004384                     __end_of_DCmotorsInit:
 11403                           	callstack 0
 11404                           
 11405 ;; *************** function _HighISR *****************
 11406 ;; Defined at:
 11407 ;;		line 132 in file "serialTest.c"
 11408 ;; Parameters:    Size  Location     Type
 11409 ;;		None
 11410 ;; Auto vars:     Size  Location     Type
 11411 ;;		None
 11412 ;; Return value:  Size  Location     Type
 11413 ;;                  1    wreg      void 
 11414 ;; Registers used:
 11415 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11416 ;; Tracked objects:
 11417 ;;		On entry : 0/0
 11418 ;;		On exit  : 0/0
 11419 ;;		Unchanged: 0/0
 11420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11423 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11424 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11425 ;;Total ram usage:        2 bytes
 11426 ;; Hardware stack levels used: 1
 11427 ;; Hardware stack levels required when called: 1
 11428 ;; This function calls:
 11429 ;;		_getCharFromTxBuf
 11430 ;;		_putCharToRxBuf
 11431 ;;		i2_isDataInTxBuf
 11432 ;; This function is called by:
 11433 ;;		Interrupt level 2
 11434 ;; This function uses a non-reentrant model
 11435 ;;
 11436                           
 11437                           	psect	intcode
 11438   000008                     __pintcode:
 11439                           	callstack 0
 11440   000008                     _HighISR:
 11441                           	callstack 20
 11442                           
 11443                           ;incstack = 0
 11444   000008  825B               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
 11445   00000A  CFD9 F003          	movff	fsr2l,??_HighISR
 11446   00000E  CFDA F004          	movff	fsr2h,??_HighISR+1
 11447   000012                     
 11448                           ;serialTest.c: 134:     if (PIR4bits.RC4IF){
 11449   000012  010E               	movlb	14	; () banked
 11450   000014  A737               	btfss	55,3,b	;volatile
 11451   000016  EF0F  F000         	goto	i2u507_41
 11452   00001A  EF11  F000         	goto	i2u507_40
 11453   00001E                     i2u507_41:
 11454   00001E  EF14  F000         	goto	i2l4839
 11455   000022                     i2u507_40:
 11456   000022                     
 11457                           ; BSR set to: 14
 11458                           ;serialTest.c: 135:         putCharToRxBuf(RC4REG);
 11459   000022  51E3               	movf	227,w,b	;volatile
 11460   000024  EC2F  F026         	call	_putCharToRxBuf
 11461   000028                     i2l4839:
 11462                           
 11463                           ;serialTest.c: 138:     if (PIR4bits.TX4IF && PIE4bits.TX4IE == 1){
 11464   000028  010E               	movlb	14	; () banked
 11465   00002A  A537               	btfss	55,2,b	;volatile
 11466   00002C  EF1A  F000         	goto	i2u508_41
 11467   000030  EF1C  F000         	goto	i2u508_40
 11468   000034                     i2u508_41:
 11469   000034  EF35  F000         	goto	i2l552
 11470   000038                     i2u508_40:
 11471   000038                     
 11472                           ; BSR set to: 14
 11473   000038  A52D               	btfss	45,2,b	;volatile
 11474   00003A  EF21  F000         	goto	i2u509_41
 11475   00003E  EF23  F000         	goto	i2u509_40
 11476   000042                     i2u509_41:
 11477   000042  EF35  F000         	goto	i2l552
 11478   000046                     i2u509_40:
 11479   000046                     
 11480                           ; BSR set to: 14
 11481                           ;serialTest.c: 139:         if (isDataInTxBuf() == 1){
 11482   000046  EC94  F026         	call	i2_isDataInTxBuf	;wreg free
 11483   00004A  06E8               	decf	wreg,f,c
 11484   00004C  A4D8               	btfss	status,2,c
 11485   00004E  EF2B  F000         	goto	i2u510_41
 11486   000052  EF2D  F000         	goto	i2u510_40
 11487   000056                     i2u510_41:
 11488   000056  EF33  F000         	goto	i2l550
 11489   00005A                     i2u510_40:
 11490   00005A                     
 11491                           ;serialTest.c: 140:            TX4REG = getCharFromTxBuf();
 11492   00005A  ECEF  F025         	call	_getCharFromTxBuf	;wreg free
 11493   00005E  010E               	movlb	14	; () banked
 11494   000060  6FE4               	movwf	228,b	;volatile
 11495                           
 11496                           ;serialTest.c: 141:         }
 11497   000062  EF35  F000         	goto	i2l552
 11498   000066                     i2l550:
 11499                           
 11500                           ;serialTest.c: 143:            PIE4bits.TX4IE = 0;
 11501   000066  010E               	movlb	14	; () banked
 11502   000068  952D               	bcf	45,2,b	;volatile
 11503   00006A                     i2l552:
 11504                           
 11505                           ; BSR set to: 14
 11506   00006A  C004  FFDA         	movff	??_HighISR+1,fsr2h
 11507   00006E  C003  FFD9         	movff	??_HighISR,fsr2l
 11508   000072  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
 11509   000074  0011               	retfie		f
 11510   000076                     __end_of_HighISR:
 11511                           	callstack 0
 11512                           
 11513 ;; *************** function i2_isDataInTxBuf *****************
 11514 ;; Defined at:
 11515 ;;		line 113 in file "serialTest.c"
 11516 ;; Parameters:    Size  Location     Type
 11517 ;;		None
 11518 ;; Auto vars:     Size  Location     Type
 11519 ;;		None
 11520 ;; Return value:  Size  Location     Type
 11521 ;;                  1    wreg      unsigned char 
 11522 ;; Registers used:
 11523 ;;		wreg, status,2, status,0
 11524 ;; Tracked objects:
 11525 ;;		On entry : 0/0
 11526 ;;		On exit  : 0/0
 11527 ;;		Unchanged: 0/0
 11528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11532 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11533 ;;Total ram usage:        0 bytes
 11534 ;; Hardware stack levels used: 1
 11535 ;; This function calls:
 11536 ;;		Nothing
 11537 ;; This function is called by:
 11538 ;;		_HighISR
 11539 ;; This function uses a non-reentrant model
 11540 ;;
 11541                           
 11542                           	psect	text57
 11543   004D28                     __ptext57:
 11544                           	callstack 0
 11545   004D28                     i2_isDataInTxBuf:
 11546                           	callstack 20
 11547   004D28                     
 11548                           ;serialTest.c: 114:     return (TxBufWriteCnt!=TxBufReadCnt);
 11549   004D28  5057               	movf	_TxBufReadCnt^0,w,c	;volatile
 11550   004D2A  1858               	xorwf	_TxBufWriteCnt^0,w,c	;volatile
 11551   004D2C  A4D8               	btfss	status,2,c
 11552   004D2E  EF9B  F026         	goto	i2u223_41
 11553   004D32  EF9E  F026         	goto	i2u223_40
 11554   004D36                     i2u223_41:
 11555   004D36  0E01               	movlw	1
 11556   004D38  EF9F  F026         	goto	i2u224_40
 11557   004D3C                     i2u223_40:
 11558   004D3C  0E00               	movlw	0
 11559   004D3E                     i2u224_40:
 11560   004D3E  0012               	return		;funcret
 11561   004D40                     __end_ofi2_isDataInTxBuf:
 11562                           	callstack 0
 11563                           
 11564 ;; *************** function _putCharToRxBuf *****************
 11565 ;; Defined at:
 11566 ;;		line 85 in file "serialTest.c"
 11567 ;; Parameters:    Size  Location     Type
 11568 ;;  byte            1    wreg     unsigned char 
 11569 ;; Auto vars:     Size  Location     Type
 11570 ;;  byte            1    0[COMRAM] unsigned char 
 11571 ;; Return value:  Size  Location     Type
 11572 ;;                  1    wreg      void 
 11573 ;; Registers used:
 11574 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11575 ;; Tracked objects:
 11576 ;;		On entry : 0/0
 11577 ;;		On exit  : 0/0
 11578 ;;		Unchanged: 0/0
 11579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11581 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11583 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11584 ;;Total ram usage:        1 bytes
 11585 ;; Hardware stack levels used: 1
 11586 ;; This function calls:
 11587 ;;		Nothing
 11588 ;; This function is called by:
 11589 ;;		_HighISR
 11590 ;; This function uses a non-reentrant model
 11591 ;;
 11592                           
 11593                           	psect	text58
 11594   004C5E                     __ptext58:
 11595                           	callstack 0
 11596   004C5E                     _putCharToRxBuf:
 11597                           	callstack 20
 11598                           
 11599                           ;incstack = 0
 11600                           ;putCharToRxBuf@byte stored from wreg
 11601   004C5E  6E01               	movwf	putCharToRxBuf@byte^0,c
 11602   004C60                     
 11603                           ;serialTest.c: 86:     if (RxBufWriteCnt>=20) {RxBufWriteCnt=0;}
 11604   004C60  0E13               	movlw	19
 11605   004C62  645A               	cpfsgt	_RxBufWriteCnt^0,c	;volatile
 11606   004C64  EF36  F026         	goto	i2u480_41
 11607   004C68  EF38  F026         	goto	i2u480_40
 11608   004C6C                     i2u480_41:
 11609   004C6C  EF3A  F026         	goto	i2l4617
 11610   004C70                     i2u480_40:
 11611   004C70  0E00               	movlw	0
 11612   004C72  6E5A               	movwf	_RxBufWriteCnt^0,c	;volatile
 11613   004C74                     i2l4617:
 11614                           
 11615                           ;serialTest.c: 87:     EUSART4RXbuf[RxBufWriteCnt++]=byte;
 11616   004C74  0EBC               	movlw	low _EUSART4RXbuf
 11617   004C76  245A               	addwf	_RxBufWriteCnt^0,w,c	;volatile
 11618   004C78  6ED9               	movwf	fsr2l,c
 11619   004C7A  6ADA               	clrf	fsr2h,c
 11620   004C7C  0E01               	movlw	high _EUSART4RXbuf
 11621   004C7E  22DA               	addwfc	fsr2h,f,c
 11622   004C80  C001  FFDF         	movff	putCharToRxBuf@byte,indf2
 11623   004C84  2A5A               	incf	_RxBufWriteCnt^0,f,c	;volatile
 11624   004C86  0012               	return		;funcret
 11625   004C88                     __end_of_putCharToRxBuf:
 11626                           	callstack 0
 11627                           
 11628 ;; *************** function _getCharFromTxBuf *****************
 11629 ;; Defined at:
 11630 ;;		line 99 in file "serialTest.c"
 11631 ;; Parameters:    Size  Location     Type
 11632 ;;		None
 11633 ;; Auto vars:     Size  Location     Type
 11634 ;;		None
 11635 ;; Return value:  Size  Location     Type
 11636 ;;                  1    wreg      unsigned char 
 11637 ;; Registers used:
 11638 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11639 ;; Tracked objects:
 11640 ;;		On entry : 0/0
 11641 ;;		On exit  : 0/0
 11642 ;;		Unchanged: 0/0
 11643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11645 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11646 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11647 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11648 ;;Total ram usage:        2 bytes
 11649 ;; Hardware stack levels used: 1
 11650 ;; This function calls:
 11651 ;;		Nothing
 11652 ;; This function is called by:
 11653 ;;		_HighISR
 11654 ;; This function uses a non-reentrant model
 11655 ;;
 11656                           
 11657                           	psect	text59
 11658   004BDE                     __ptext59:
 11659                           	callstack 0
 11660   004BDE                     _getCharFromTxBuf:
 11661                           	callstack 20
 11662   004BDE                     
 11663                           ;serialTest.c: 100:     if (TxBufReadCnt>=60) {TxBufReadCnt=0;}
 11664   004BDE  0E3B               	movlw	59
 11665   004BE0  6457               	cpfsgt	_TxBufReadCnt^0,c	;volatile
 11666   004BE2  EFF5  F025         	goto	i2u481_41
 11667   004BE6  EFF7  F025         	goto	i2u481_40
 11668   004BEA                     i2u481_41:
 11669   004BEA  EFF9  F025         	goto	i2l4625
 11670   004BEE                     i2u481_40:
 11671   004BEE  0E00               	movlw	0
 11672   004BF0  6E57               	movwf	_TxBufReadCnt^0,c	;volatile
 11673   004BF2                     i2l4625:
 11674                           
 11675                           ;serialTest.c: 101:     return EUSART4TXbuf[TxBufReadCnt++];
 11676   004BF2  2A57               	incf	_TxBufReadCnt^0,f,c	;volatile
 11677   004BF4  0457               	decf	_TxBufReadCnt^0,w,c	;volatile
 11678   004BF6  6E01               	movwf	??_getCharFromTxBuf^0,c
 11679   004BF8  6A02               	clrf	(??_getCharFromTxBuf+1)^0,c
 11680   004BFA  0E00               	movlw	low _EUSART4TXbuf
 11681   004BFC  2401               	addwf	??_getCharFromTxBuf^0,w,c
 11682   004BFE  6ED9               	movwf	fsr2l,c
 11683   004C00  0E02               	movlw	high _EUSART4TXbuf
 11684   004C02  2002               	addwfc	(??_getCharFromTxBuf+1)^0,w,c
 11685   004C04  6EDA               	movwf	fsr2h,c
 11686   004C06  50DF               	movf	indf2,w,c
 11687   004C08  0012               	return		;funcret
 11688   004C0A                     __end_of_getCharFromTxBuf:
 11689                           	callstack 0
 11690                           
 11691                           	psect	rparam
 11692   000000                     
 11693                           	psect	temp
 11694   00005B                     btemp:
 11695                           	callstack 0
 11696   00005B                     	ds	1
 11697   000000                     int$flags	set	btemp
 11698   000000                     wtemp8	set	btemp+1
 11699   000000                     ttemp5	set	btemp+1
 11700   000000                     ttemp6	set	btemp+4
 11701   000000                     ttemp7	set	btemp+8
 11702                           
 11703                           	psect	idloc
 11704                           
 11705                           ;Config register IDLOC0 @ 0x200000
 11706                           ;	unspecified, using default values
 11707   200000                     	org	2097152
 11708   200000  0FFF               	dw	4095
 11709                           
 11710                           ;Config register IDLOC1 @ 0x200002
 11711                           ;	unspecified, using default values
 11712   200002                     	org	2097154
 11713   200002  0FFF               	dw	4095
 11714                           
 11715                           ;Config register IDLOC2 @ 0x200004
 11716                           ;	unspecified, using default values
 11717   200004                     	org	2097156
 11718   200004  0FFF               	dw	4095
 11719                           
 11720                           ;Config register IDLOC3 @ 0x200006
 11721                           ;	unspecified, using default values
 11722   200006                     	org	2097158
 11723   200006  0FFF               	dw	4095
 11724                           
 11725                           ;Config register IDLOC4 @ 0x200008
 11726                           ;	unspecified, using default values
 11727   200008                     	org	2097160
 11728   200008  0FFF               	dw	4095
 11729                           
 11730                           ;Config register IDLOC5 @ 0x20000A
 11731                           ;	unspecified, using default values
 11732   20000A                     	org	2097162
 11733   20000A  0FFF               	dw	4095
 11734                           
 11735                           ;Config register IDLOC6 @ 0x20000C
 11736                           ;	unspecified, using default values
 11737   20000C                     	org	2097164
 11738   20000C  0FFF               	dw	4095
 11739                           
 11740                           ;Config register IDLOC7 @ 0x20000E
 11741                           ;	unspecified, using default values
 11742   20000E                     	org	2097166
 11743   20000E  0FFF               	dw	4095
 11744                           
 11745                           	psect	config
 11746                           
 11747                           ;Config register CONFIG1L @ 0x300000
 11748                           ;	External Oscillator mode Selection bits
 11749                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
 11750                           ;	Power-up default value for COSC bits
 11751                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
 11752   300000                     	org	3145728
 11753   300000  AA                 	db	170
 11754                           
 11755                           ;Config register CONFIG1H @ 0x300001
 11756                           ;	unspecified, using default values
 11757                           ;	Clock Out Enable bit
 11758                           ;	CLKOUTEN = 0x1, unprogrammed default
 11759                           ;	Clock Switch Enable bit
 11760                           ;	CSWEN = 0x1, unprogrammed default
 11761                           ;	Fail-Safe Clock Monitor Enable bit
 11762                           ;	FCMEN = 0x1, unprogrammed default
 11763   300001                     	org	3145729
 11764   300001  FF                 	db	255
 11765                           
 11766                           ;Config register CONFIG2L @ 0x300002
 11767                           ;	unspecified, using default values
 11768                           ;	Master Clear Enable bit
 11769                           ;	MCLRE = 0x1, unprogrammed default
 11770                           ;	Power-up Timer Enable bit
 11771                           ;	PWRTE = 0x1, unprogrammed default
 11772                           ;	Low-power BOR enable bit
 11773                           ;	LPBOREN = 0x1, unprogrammed default
 11774                           ;	Brown-out Reset Enable bits
 11775                           ;	BOREN = 0x3, unprogrammed default
 11776   300002                     	org	3145730
 11777   300002  FF                 	db	255
 11778                           
 11779                           ;Config register CONFIG2H @ 0x300003
 11780                           ;	unspecified, using default values
 11781                           ;	Brown Out Reset Voltage selection bits
 11782                           ;	BORV = 0x3, unprogrammed default
 11783                           ;	ZCD Disable bit
 11784                           ;	ZCD = 0x1, unprogrammed default
 11785                           ;	PPSLOCK bit One-Way Set Enable bit
 11786                           ;	PPS1WAY = 0x1, unprogrammed default
 11787                           ;	Stack Full/Underflow Reset Enable bit
 11788                           ;	STVREN = 0x1, unprogrammed default
 11789                           ;	Debugger Enable bit
 11790                           ;	DEBUG = 0x1, unprogrammed default
 11791                           ;	Extended Instruction Set Enable bit
 11792                           ;	XINST = 0x1, unprogrammed default
 11793   300003                     	org	3145731
 11794   300003  FF                 	db	255
 11795                           
 11796                           ;Config register CONFIG3L @ 0x300004
 11797                           ;	WDT Period Select bits
 11798                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
 11799                           ;	WDT operating mode
 11800                           ;	WDTE = OFF, WDT Disabled
 11801   300004                     	org	3145732
 11802   300004  9F                 	db	159
 11803                           
 11804                           ;Config register CONFIG3H @ 0x300005
 11805                           ;	unspecified, using default values
 11806                           ;	WDT Window Select bits
 11807                           ;	WDTCWS = 0x7, unprogrammed default
 11808                           ;	WDT input clock selector
 11809                           ;	WDTCCS = 0x7, unprogrammed default
 11810   300005                     	org	3145733
 11811   300005  FF                 	db	255
 11812                           
 11813                           ;Config register CONFIG4L @ 0x300006
 11814                           ;	unspecified, using default values
 11815                           ;	Write Protection Block 0
 11816                           ;	WRT0 = 0x1, unprogrammed default
 11817                           ;	Write Protection Block 1
 11818                           ;	WRT1 = 0x1, unprogrammed default
 11819                           ;	Write Protection Block 2
 11820                           ;	WRT2 = 0x1, unprogrammed default
 11821                           ;	Write Protection Block 3
 11822                           ;	WRT3 = 0x1, unprogrammed default
 11823                           ;	Write Protection Block 3
 11824                           ;	WRT4 = 0x1, unprogrammed default
 11825                           ;	Write Protection Block 3
 11826                           ;	WRT5 = 0x1, unprogrammed default
 11827                           ;	Write Protection Block 3
 11828                           ;	WRT6 = 0x1, unprogrammed default
 11829                           ;	Write Protection Block 3
 11830                           ;	WRT7 = 0x1, unprogrammed default
 11831   300006                     	org	3145734
 11832   300006  FF                 	db	255
 11833                           
 11834                           ;Config register CONFIG4H @ 0x300007
 11835                           ;	unspecified, using default values
 11836                           ;	Configuration Register Write Protection bit
 11837                           ;	WRTC = 0x1, unprogrammed default
 11838                           ;	Boot Block Write Protection bit
 11839                           ;	WRTB = 0x1, unprogrammed default
 11840                           ;	Data EEPROM Write Protection bit
 11841                           ;	WRTD = 0x1, unprogrammed default
 11842                           ;	Scanner Enable bit
 11843                           ;	SCANE = 0x1, unprogrammed default
 11844                           ;	Low Voltage Programming Enable bit
 11845                           ;	LVP = 0x1, unprogrammed default
 11846   300007                     	org	3145735
 11847   300007  FF                 	db	255
 11848                           
 11849                           ;Config register CONFIG5L @ 0x300008
 11850                           ;	unspecified, using default values
 11851                           ;	UserNVM Program Memory Code Protection bit
 11852                           ;	CP = 0x1, unprogrammed default
 11853                           ;	DataNVM Memory Code Protection bit
 11854                           ;	CPD = 0x1, unprogrammed default
 11855   300008                     	org	3145736
 11856   300008  FF                 	db	255
 11857                           
 11858                           ;Config register CONFIG5H @ 0x300009
 11859                           ;	unspecified, using default values
 11860   300009                     	org	3145737
 11861   300009  FF                 	db	255
 11862                           
 11863                           ;Config register CONFIG6L @ 0x30000A
 11864                           ;	unspecified, using default values
 11865                           ;	Table Read Protection Block 0
 11866                           ;	EBTR0 = 0x1, unprogrammed default
 11867                           ;	Table Read Protection Block 1
 11868                           ;	EBTR1 = 0x1, unprogrammed default
 11869                           ;	Table Read Protection Block 2
 11870                           ;	EBTR2 = 0x1, unprogrammed default
 11871                           ;	Table Read Protection Block 3
 11872                           ;	EBTR3 = 0x1, unprogrammed default
 11873                           ;	Table Read Protection Block 4
 11874                           ;	EBTR4 = 0x1, unprogrammed default
 11875                           ;	Table Read Protection Block 5
 11876                           ;	EBTR5 = 0x1, unprogrammed default
 11877                           ;	Table Read Protection Block 6
 11878                           ;	EBTR6 = 0x1, unprogrammed default
 11879                           ;	Table Read Protection Block 7
 11880                           ;	EBTR7 = 0x1, unprogrammed default
 11881   30000A                     	org	3145738
 11882   30000A  FF                 	db	255
 11883                           
 11884                           ;Config register CONFIG6H @ 0x30000B
 11885                           ;	unspecified, using default values
 11886                           ;	Boot Block Table Read Protection bit
 11887                           ;	EBTRB = 0x1, unprogrammed default
 11888   30000B                     	org	3145739
 11889   30000B  FF                 	db	255
 11890                           tosu	equ	0xFFF
 11891                           tosh	equ	0xFFE
 11892                           tosl	equ	0xFFD
 11893                           stkptr	equ	0xFFC
 11894                           pclatu	equ	0xFFB
 11895                           pclath	equ	0xFFA
 11896                           pcl	equ	0xFF9
 11897                           tblptru	equ	0xFF8
 11898                           tblptrh	equ	0xFF7
 11899                           tblptrl	equ	0xFF6
 11900                           tablat	equ	0xFF5
 11901                           prodh	equ	0xFF4
 11902                           prodl	equ	0xFF3
 11903                           indf0	equ	0xFEF
 11904                           postinc0	equ	0xFEE
 11905                           postdec0	equ	0xFED
 11906                           preinc0	equ	0xFEC
 11907                           plusw0	equ	0xFEB
 11908                           fsr0h	equ	0xFEA
 11909                           fsr0l	equ	0xFE9
 11910                           wreg	equ	0xFE8
 11911                           indf1	equ	0xFE7
 11912                           postinc1	equ	0xFE6
 11913                           postdec1	equ	0xFE5
 11914                           preinc1	equ	0xFE4
 11915                           plusw1	equ	0xFE3
 11916                           fsr1h	equ	0xFE2
 11917                           fsr1l	equ	0xFE1
 11918                           bsr	equ	0xFE0
 11919                           indf2	equ	0xFDF
 11920                           postinc2	equ	0xFDE
 11921                           postdec2	equ	0xFDD
 11922                           preinc2	equ	0xFDC
 11923                           plusw2	equ	0xFDB
 11924                           fsr2h	equ	0xFDA
 11925                           fsr2l	equ	0xFD9
 11926                           status	equ	0xFD8

Data Sizes:
    Strings     37
    Constant    0
    Data        4
    BSS         125
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     86      90
    BANK0           160    147     160
    BANK1           256    188     240
    BANK2           256      0      60
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_2(CODE[15]), STR_1(CODE[22]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 22
		 -> STR_2(CODE[15]), STR_1(CODE[22]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 22
		 -> STR_2(CODE[15]), STR_1(CODE[22]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    S2674$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_2(CODE[15]), STR_1(CODE[22]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 100
		 -> ADC2String@buf(COMRAM[40]), return_home_turns@string1(BANK0[100]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2621$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2621$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    TxBufferedString@string	PTR unsigned char  size(2) Largest target is 100
		 -> return_home_turns@string1(BANK0[100]), 

    motorRight.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    motorRight.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    motorLeft.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    motorLeft.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    reverseSquareLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    reverseSquareLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    reverseSquareRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    reverseSquareRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    turnLeft_135@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft_135@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft_135@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft_135@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft_135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    turnLeft_135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    turnRight_135@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight_135@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight_135@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight_135@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight_135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    turnRight_135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    turn_180@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turn_180@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turn_180@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turn_180@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turn_180@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    turn_180@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    turnRight_90@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight_90@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight_90@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight_90@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight_90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    turnRight_90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    turnLeft_90@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft_90@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft_90@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft_90@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft_90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    turnLeft_90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    turnRight@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    reverse@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    reverse@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    reverse@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    reverse@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    reverse@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    reverse@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    forward@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    forward@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    forward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    forward@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    forward@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    forward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), main@motorLeft(BANK1[9]), 

    DCmotorsInit@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    S107DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    S107DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    return_home_turns@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    return_home_turns@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    return_home_turns@turn_history	PTR unsigned int  size(2) Largest target is 64
		 -> main@turn_history(BANK1[64]), 

    return_home_turns@counter_history	PTR unsigned int  size(2) Largest target is 64
		 -> main@counter_history(BANK1[64]), 

    colorDetect@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    colorDetect@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    colorDetect@whiteRGBVal	PTR struct RGB size(2) Largest target is 8
		 -> main@whiteRGBVal(BANK1[8]), 

    colorDetect@ambientRGBVal	PTR struct RGB size(2) Largest target is 8
		 -> main@ambientRGBVal(BANK1[8]), 

    whiteCal@v	PTR struct RGB size(2) Largest target is 8
		 -> main@whiteRGBVal(BANK1[8]), 

    ambientCal@v	PTR struct RGB size(2) Largest target is 8
		 -> main@ambientRGBVal(BANK1[8]), 

    getColor@v	PTR struct RGB size(2) Largest target is 8
		 -> main@whiteRGBVal(BANK1[8]), main@RGBVal(BANK1[8]), main@ambientRGBVal(BANK1[8]), colorDetect@RGBVal(BANK0[8]), 


Critical Paths under _main in COMRAM

    _whiteCal->_getColor
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _forward->_setMotorPWM
    _TxBufferedString->_putCharToTxBuf
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _colorDetect->___fldiv
    _turn_180->_stop
    _turnRight_135->_stop
    _turnLeft_135->_stop
    _reverseSquareRight->_turnRight_90
    _turnRight_90->_stop
    _reverseSquareLeft->_turnLeft_90
    _turnLeft_90->_stop
    _stop->_setMotorPWM
    _reverse->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    ___flsub->___fladd
    ___flmul->___flsub
    ___flge->___flsub
    ___fldiv->___flmul
    _ambientCal->_getColor
    _getColor->_color_read_Blue
    _getColor->_color_read_Clear
    _getColor->_color_read_Green
    _getColor->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle

Critical Paths under _HighISR in COMRAM

    _HighISR->_getCharFromTxBuf

Critical Paths under _main in BANK0

    _main->_return_home_turns
    _return_home_turns->_sprintf
    _sprintf->_vfprintf

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               188   188      0  298964
                                              0 BANK1    188   188      0
                       _DCmotorsInit
                            ___fldiv
                             ___flge
                           ___xxtofl
                         _ambientCal
                        _colorDetect
                   _color_click_init
                            _forward
                           _getColor
                    _initDCmotorsPWM
                         _initUSART4
                  _return_home_turns
                               _stop
                           _turn_180
                           _whiteCal
 ---------------------------------------------------------------------------------
 (1) _whiteCal                                             6     4      2     988
                                             17 COMRAM     6     4      2
                           _getColor
 ---------------------------------------------------------------------------------
 (1) _return_home_turns                                  116   106     10   99449
                                             31 BANK0    116   106     10
                   _TxBufferedString
                            _forward
                          _sendTxBuf
                            _sprintf
                               _stop
                       _turnLeft_135
                        _turnLeft_90
                      _turnRight_135
                       _turnRight_90
                           _turn_180
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             27    15     12    7496
                                              6 BANK0     25    13     12
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             8     2      6    6830
                                             84 COMRAM     2     2      0
                                              0 BANK0      6     0      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           23    17      6    6369
                                             66 COMRAM    18    12      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                35    25     10    4802
                                             31 COMRAM    35    25     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                 11     5      6    2533
                                             20 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (7) _fputs                                                7     3      4    1177
                                             13 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                9     5      4     857
                                              4 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     183
                                             22 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___aomod                                             18     2     16     613
                                              4 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (6) ___aodiv                                             26    10     16     625
                                              4 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (2) _sendTxBuf                                            0     0      0       0
                      _isDataInTxBuf
 ---------------------------------------------------------------------------------
 (3) _isDataInTxBuf                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _forward                                              5     1      4    3445
                                             23 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _TxBufferedString                                     2     0      2     143
                                              5 COMRAM     2     0      2
                     _putCharToTxBuf
 ---------------------------------------------------------------------------------
 (3) _putCharToTxBuf                                       1     1      0      22
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      76
                                              4 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              8 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              6 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _colorDetect                                         58    46     12  157843
                                             78 COMRAM     2     2      0
                                              0 BANK0     52    40     12
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                           ___xxtofl
                           _getColor
                  _reverseSquareLeft
                 _reverseSquareRight
                       _turnLeft_135
                        _turnLeft_90
                      _turnRight_135
                       _turnRight_90
                           _turn_180
 ---------------------------------------------------------------------------------
 (1) _turn_180                                             6     2      4   16115
                                             29 COMRAM     6     2      4
                            _reverse
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _turnRight_135                                        6     2      4   15702
                                             29 COMRAM     6     2      4
                            _reverse
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _turnLeft_135                                         6     2      4   15699
                                             29 COMRAM     6     2      4
                            _reverse
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _reverseSquareRight                                   6     2      4   28497
                                             35 COMRAM     6     2      4
                            _reverse
                               _stop
                       _turnRight_90
 ---------------------------------------------------------------------------------
 (2) _turnRight_90                                         6     2      4   16003
                                             29 COMRAM     6     2      4
                            _reverse
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _reverseSquareLeft                                    6     2      4   28497
                                             35 COMRAM     6     2      4
                            _reverse
                               _stop
                        _turnLeft_90
 ---------------------------------------------------------------------------------
 (2) _turnLeft_90                                          6     2      4   16003
                                             29 COMRAM     6     2      4
                            _reverse
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _stop                                                 6     2      4    7309
                                             23 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _reverse                                              5     1      4    4813
                                             23 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          6     4      2    2877
                                             17 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     491
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     358
                                             10 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4    2418
                                              4 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    3801
                                             20 COMRAM     8     0      8
                            ___fladd
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             16     8      8    2262
                                              4 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             25    17      8    4768
                                             28 COMRAM    25    17      8
                            ___flsub (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8    4742
                                             28 COMRAM    12     4      8
                            ___flsub (ARG)
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             25    17      8    1855
                                             53 COMRAM    25    17      8
                            ___flmul (ARG)
                            ___flsub (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _ambientCal                                           6     4      2    1064
                                             17 COMRAM     6     4      2
                           _getColor
 ---------------------------------------------------------------------------------
 (2) _getColor                                             2     0      2     844
                                             15 COMRAM     2     0      2
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (3) _color_read_Red                                       7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Green                                     7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Clear                                     7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Blue                                      7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Write                                   1     1      0      22
                                              5 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Read                                    3     3      0      45
                                              5 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Idle                                    1     1      0       0
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DCmotorsInit                                         4     0      4     416
                                              4 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _HighISR                                             2     2      0      22
                                              2 COMRAM     2     2      0
                   _getCharFromTxBuf
                     _putCharToRxBuf
                    i2_isDataInTxBuf
 ---------------------------------------------------------------------------------
 (11) i2_isDataInTxBuf                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _putCharToRxBuf                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (11) _getCharFromTxBuf                                    2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DCmotorsInit
   ___fldiv
     ___flmul (ARG)
       ___flsub (ARG)
         ___fladd
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___flsub (ARG)
     ___xxtofl (ARG)
   ___flge
     ___flsub (ARG)
   ___xxtofl
   _ambientCal
     _getColor
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_read_Clear
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
   _colorDetect
     ___fldiv
     ___flge
     ___flmul
     ___flsub
     ___xxtofl
     _getColor
     _reverseSquareLeft
       _reverse
         _setMotorPWM
           ___lwdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
       _turnLeft_90
         _reverse
         _setMotorPWM
         _stop
     _reverseSquareRight
       _reverse
       _stop
       _turnRight_90
         _reverse
         _setMotorPWM
         _stop
     _turnLeft_135
       _reverse
       _setMotorPWM
       _stop
     _turnLeft_90
     _turnRight_135
       _reverse
       _setMotorPWM
       _stop
     _turnRight_90
     _turn_180
       _reverse
       _setMotorPWM
       _stop
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _forward
     _setMotorPWM
   _getColor
   _initDCmotorsPWM
   _initUSART4
   _return_home_turns
     _TxBufferedString
       _putCharToTxBuf
     _forward
     _sendTxBuf
       _isDataInTxBuf
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
           _fputc
     _stop
     _turnLeft_135
     _turnLeft_90
     _turnRight_135
     _turnRight_90
     _turn_180
   _stop
   _turn_180
   _whiteCal
     _getColor

 _HighISR (ROOT)
   _getCharFromTxBuf
   _putCharToRxBuf
   i2_isDataInTxBuf

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      62        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      3C       9       23.4%
BITBANK1           100      0       0       6        0.0%
BANK1              100     BC      F0       7       93.8%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     93      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     56      5A       1       95.7%
BITBIGSFRlhhhhl     52      0       0      42        0.0%
BITBIGSFRlhhhll     37      0       0      44        0.0%
BITBIGSFRlllhlh     2A      0       0      55        0.0%
BITBIGSFRlllll      26      0       0      60        0.0%
BITBIGSFRlhhhll     20      0       0      47        0.0%
BITBIGSFRlhhhll     1E      0       0      49        0.0%
BITBIGSFRhhhhhh     1B      0       0      33        0.0%
BITBIGSFRhhhhll     17      0       0      38        0.0%
BITBIGSFRhhhhhl     13      0       0      34        0.0%
BITBIGSFRlhhl       11      0       0      50        0.0%
BITBIGSFRhhhhlh      E      0       0      35        0.0%
BITBIGSFRhhhhhh      D      0       0      32        0.0%
BITBIGSFRlhhhll      C      0       0      48        0.0%
BITBIGSFRlllhll      9      0       0      57        0.0%
BITBIGSFRlllhlh      9      0       0      56        0.0%
BITBIGSFRlhhhll      8      0       0      45        0.0%
BITBIGSFRllllh       6      0       0      59        0.0%
BITBIGSFRlllhh       6      0       0      54        0.0%
BITBIGSFRlllhll      5      0       0      58        0.0%
BITBIGSFRllhl        5      0       0      53        0.0%
BITBIGSFRhhhhll      5      0       0      39        0.0%
BITBIGSFRllhh        3      0       0      52        0.0%
BITBIGSFRlhhhlh      2      0       0      43        0.0%
BITBIGSFRhhhhll      2      0       0      37        0.0%
BITBIGSFRlhhhhh      1      0       0      41        0.0%
BITBIGSFRlhhhll      1      0       0      46        0.0%
BITBIGSFRhhhhlh      1      0       0      36        0.0%
BITBIGSFRlhl         1      0       0      51        0.0%
BITBIGSFRhhll        1      0       0      40        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     226      61        0.0%
DATA                 0      0     226       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Thu Dec 15 06:41:44 2022

                  _color_read_Red 4900                      ___fldiv@aexp 004E  
                    ___fldiv@bexp 004D                      ___fldiv@sign 0046  
                 _color_read_Blue 49F0                                l61 4B7E  
                              l70 499E                                l64 4CF4  
                              l73 4A3E                                l67 494E  
                              l76 49EE                                l84 4104  
                              l79 4802                                l89 4020  
             ___wmul@multiplicand 0007        __end_of_reverseSquareRight 4592  
                _color_read_Clear 49A0                  _color_read_Green 4950  
                             l110 19EA                               l131 2EDC  
                             l204 3680                               l116 19F2  
                             l214 44FA                               l135 2FB2  
                             l312 4C5C                               l224 41DA  
                             l321 4D5E                               l330 4D4A  
                             l234 42B0                               l315 4C88  
                             l324 4D68                               l252 3CFC  
                             l333 4B0A                               l318 4CAE  
                             l327 4D54                               l273 3A80  
                             l258 3BBE                               l282 4590  
                             l194 46B6                               l530 4C32  
                             l267 31D8                               l197 4382  
                             l285 4626                               l533 4D26  
                             l279 3E38                               l543 4D0E  
                             l490 4BDC                               l555 4CD4  
                             l539 4BAE                               l820 3EF6  
                             l825 3F3C                               l682 37E4  
                             l669 3514                               _abs 4B0C  
                             _pad 46B8                               wreg 000FE8  
                    ___flmul@aexp 002E                      ___flmul@bexp 002F  
                    ___flmul@sign 0029                      ___flmul@temp 0034  
                    ___flmul@prod 0030              reverseSquareRight@mL 0024  
            reverseSquareRight@mR 0026                              l1100 1CFC  
                            l1110 1DBA                              l1210 3230  
                            ?_abs 0017                              l1109 1DCC  
                            l1125 4A84                              l1213 338C  
                            l1053 47A4                              l1150 2A02  
                            l1142 2908                              l1046 479C  
                            l1310 444C                              l1151 29F0  
                            l1224 3324                              l1137 2AE4  
                            l1217 32C8                              l1321 4D6E  
                            l1233 48FE                              l1139 2944  
                            l1083 1BE2                              l1148 298A  
                            l1092 1EB2                              l1084 1BD0  
                            l1173 274A                              l1085 1B96  
                            l1318 4AC8                              l1255 46DA  
                            l1176 25DC                              l1264 2B72  
                            l4001 286E                              l1169 23E6  
                            l1186 270C                              l1178 2654  
                            l1266 2B7A                              l4011 28AC  
                            l4003 286E                              l1179 2642  
                            l1259 4730                              l1267 2BC0  
                            l1291 48AC                              l3301 4C98  
                            l4021 28F8                              l4013 28BC  
                            l4101 2374                              l1285 3942  
                            l1278 2D62                              l4031 2942  
                            l4023 2906                              l4015 28CC  
                            l4007 2882                              l4111 23A0  
                            l4103 2384                              l1295 4B42  
                            l4041 2988                              l4033 2954  
                            l4025 2912                              l4017 28D4  
                            l4009 289C                              l4201 26F4  
                            l4121 23F6                              l4113 23B0  
                            l4105 238A                              l3401 44CA  
                            l5001 377C                              l1298 4B4A  
                            l4051 29E8                              l4035 296A  
                            l4043 299A                              l4027 2930  
                            l4019 28E4                              l4203 2710  
                            l4211 2736                              l4131 2430  
                            l4123 2406                              l4115 23C0  
                            l4107 2390                              l3251 475C  
                            l3243 4732                              l3411 4244  
                            l3403 44E2                              l5003 378E  
                            l4301 4022                              l4061 2A56  
                            l4045 29A8                              l4037 2970  
                            l4029 2932                              l4213 273A  
                            l4205 2720                              l4141 2482  
                            l4133 2446                              l4117 23D0  
                            l4109 239E                              l3261 4790  
                            l3253 476A                              l3245 473A  
                            l3157 4CB0                              l3413 425C  
                            l3405 41DC                              l3501 3B92  
                            l5005 3794                              l5021 46FA  
                            l5013 46B8                              l4311 4068  
                            l4071 2AC0                              l4055 2A12  
                            l4063 2A5A                              l4047 29AC  
                            l4039 297A                              l4231 3EB6  
                            l4223 3E3A                              l4207 272E  
                            l4151 24C8                              l4143 2490  
                            l4135 2452                              l4127 241A  
                            l4119 23D6                              l3263 4796  
                            l3255 4770                              l3247 474C  
                            l3159 4CCC                              l3407 4220  
                            l3415 4268                              l3511 3C18  
                            l3503 3BAA                              l5007 37A4  
                            l5023 46FE                              l5015 46C6  
                            l5031 2AE6                              l5103 3904  
                            l3361 4D46                              l4321 40E2  
                            l4313 4084                              l4073 2AC4  
                            l4065 2A74                              l4057 2A1E  
                            l4049 29BA                              l4241 3F3A  
                            l4233 3EC4                              l4225 3E68  
                            l4209 2730                              l4161 2536  
                            l4153 24E2                              l4145 249C  
                            l4137 246A                              l4129 2426  
                            l3601 1B04                              l4217 4A40  
                            l3257 4786                              l3249 4754  
                            l3417 4280                              l3409 4238  
                            l3521 3C70                              l3513 3C2C  
                            l3505 3BC0                              l5201 1486  
                            l5009 37C4                              l5025 471C  
                            l5017 46D2                              l5041 2B66  
                            l5033 2B06                              l5113 485A  
                            l3371 4ACC                              l3355 4D56  
                            l3363 4D4C                              l3451 4900  
                            l4315 40A6                              l4307 402A  
                            l4075 2AD2                              l4067 2A8A  
                            l4059 2A2C                              l4235 3ED6  
                            l4227 3E78                              l4171 25CC  
                            l4163 2560                              l4155 24F2  
                            l4147 24AC                              l4139 2476  
                            l4091 233C                              l3611 1B18  
                            l3603 1B08                              l4219 4A50  
                            l4251 3240                              l3259 478E  
                            l3291 359E                              l3283 3516  
                            l3419 4298                              l3531 3CD0  
                            l3523 3C88                              l3515 3C3C  
                            l3507 3BD4                              l5203 14DC  
                            l5211 151A                              l5027 4B0C  
                            l5019 46E6                              l5051 2BB4  
                            l5043 2B82                              l5035 2B1A  
                            l5107 3916                              l5115 4866  
                            l5131 48EC                              l5123 48AE  
                            l4331 3F68                              l4323 3F3E  
                            l3381 4B08                              l3373 4AD0  
                            l3357 4D5A                              l3365 4D50  
                            l3453 4946                              l4317 40BE  
                            l4309 404C                              l4077 2AD8  
                            l4069 2AA4                              l4237 3EE4  
                            l4229 3EA6                              l4181 260C  
                            l4173 25DA                              l4165 2596  
                            l4157 250E                              l4149 24B8  
                            l4093 233E                              l3701 1D6A  
                            l3621 1B2C                              l3613 1B1C  
                            l3605 1B0C                              l4261 327E  
                            l4253 3256                              l4245 31DC  
                            l3293 35E0                              l3285 3532  
                            l3533 3CE8                              l3525 3C94  
                            l3517 3C4C                              l3509 3BEC  
                            l5221 161A                              l5213 1570  
                            l5205 14EA                              l5141 0E5A  
                            l3541 4C30                              l5029 4B26  
                            l5061 2C5A                              l5053 2BBC  
                            l5045 2B92                              l5037 2B2A  
                            l5117 4882                              l5125 48C0  
                            l5301 2DF8                              l4341 3FE6  
                            l4333 3F84                              l3375 4AD8  
                            l3367 4D60                              l3359 4D42  
                            l3463 49F0                              l3471 49E6  
                            l4319 40CA                              l4079 2ADA  
                            l4239 3F34                              l4191 267E  
                            l4183 263A                              l4175 25EC  
                            l4167 25A4                              l4159 251A  
                            l4095 234E                              l4087 2322  
                            l3711 1D9C                              l3703 1D7A  
                            l3631 1B7E                              l3623 1B30  
                            l3615 1B20                              l3607 1B10  
                            l3551 1A0E                              l4271 3306  
                            l4263 32B0                              l4247 31EC  
                            l3295 35FC                              l3287 3586  
                            l3391 4476                              l3527 3CA0  
                            l3519 3C5C                              l5231 16CC  
                            l5223 1628                              l5215 15C6  
                            l5207 14FE                              l5151 0F38  
                            l5143 0E6E                              l5135 0E28  
                            l3535 4C0C                              l3543 4D10  
                            l5071 2D02                              l5063 2C60  
                            l5055 2BC8                              l5047 2B98  
                            l5039 2B4A                              l5119 48A2  
                            l5127 48C8                              l5303 2DFC  
                            l4343 3FFE                              l4335 3FA0  
                            l3377 4AE0                              l3369 4D64  
                            l3465 4A36                              l3457 4950  
                            l4193 26A8                              l4177 25FA  
                            l4169 25C2                              l4097 235E  
                            l4089 232E                              l3721 1DF6  
                            l3713 1DB2                              l3705 1D7C  
                            l3641 1BC2                              l3633 1B8E  
                            l3617 1B24                              l3609 1B14  
                            l3625 1B34                              l3561 1A42  
                            l3553 1A10                              l4281 335C  
                            l4273 3314                              l4265 32B2  
                            l4257 326A                              l4249 31FA  
                            l3297 3640                              l3289 359A  
                            l3393 448E                              l3385 444E  
                            l3529 3CB8                              l3481 3ADA  
                            l3801 30C4                              l5241 173C  
                            l5233 16DA                              l5217 15F8  
                            l5225 1636                              l5209 150C  
                            l5161 1184                              l5153 0FE6  
                            l5145 0EA0                              l5137 0E34  
                            l4601 4BD0                              l3537 4C1C  
                            l5073 2D1C                              l5065 2C66  
                            l5057 2BD2                              l5049 2BA8  
                            l5129 48D0                              l5321 2E9E  
                            l5305 2E12                              l4337 3FC2  
                            l4329 3F46                              l5401 1F00  
                            l3299 4C88                              l3379 4B06  
                            l3459 4996                              l4187 2664  
                            l4195 26AC                              l4179 25FE  
                            l4099 236E                              l3731 1E72  
                            l3723 1E30                              l3707 1D8A  
                            l3643 1BC4                              l3635 1BA4  
                            l3627 1B38                              l3619 1B28  
                            l3571 1A74                              l3555 1A20  
                            l3563 1A4A                              l3547 19F4  
                            l4283 336C                              l4275 3332  
                            l4267 32BE                              l4259 3272  
                            l3395 449A                              l3387 4452  
                            l3491 3B32                              l3483 3AEE  
                            l3475 3A82                              l3811 3128  
                            l3803 30DC                              l5251 1812  
                            l5243 176E                              l5235 16EE  
                            l5227 1668                              l5219 1606  
                            l5171 11FA                              l5163 1196  
                            l5155 1094                              l5147 0ED8  
                            l5139 0E44                              l4291 4B4C  
                            l4611 4BDA                              l4603 4BD2  
                            l3539 4C20                              l5075 2D2C  
                            l5059 2BD8                              l5067 2CCA  
                            l5091 382E                              l5083 37E6  
                            l5323 2EBE                              l5315 2E5A  
                            l5307 2E2A                              l5331 2F14  
                            l4339 3FDA                              l5411 1F0A  
                            l5403 1F02                              l3469 49A0  
                            l4197 26C6                              l4189 2670  
                            l3741 1E92                              l3733 1E76  
                            l3717 1DDC                              l3725 1E32  
                            l3709 1D8E                              l3661 1C4C  
                            l3653 1C14                              l3645 1BCE  
                            l3637 1BB0                              l3629 1B62  
                            l3581 1AAA                              l3573 1A7A  
                            l3565 1A5A                              l3557 1A30  
                            l3549 1A00                              l4285 337A  
                            l4277 3334                              l4269 32FA  
                            l3397 44A6                              l3389 446A  
                            l3493 3B4A                              l3485 3AFE  
                            l3477 3A96                              l3901 3DDE  
                            l3821 317C                              l3813 3138  
                            l3805 30F0                              l5261 18A6  
                            l5253 1826                              l5245 17A0  
                            l5237 16FC                              l5229 169A  
                            l5181 12D4                              l5173 122C  
                            l5165 11A6                              l5157 1142  
                            l5149 0F10                              l4293 4B50  
                            l4605 4BD4                              l5077 2D32  
                            l5069 2CE4                              l5093 383E  
                            l5085 380E                              l5325 2EC4  
                            l5317 2E72                              l5309 2E42  
                            l5333 2F84                              l5421 1F3C  
                            l5413 1F1E                              l5405 1F04  
                            l5341 1EB4                              ?_pad 0015  
                            l4199 26DA                              l3743 1EA0  
                            l3735 1E84                              l3727 1E42  
                            l3719 1DE8                              l3663 1C50  
                            l3655 1C24                              l3647 1BF0  
                            l3671 1C70                              l3639 1BB4  
                            l3591 1AE6                              l3583 1ABA  
                            l3575 1A88                              l3567 1A60  
                            l3559 1A40                              l4287 337C  
                            l4279 3338                              l3399 44B2  
                            l3495 3B56                              l3487 3B0E  
                            l3479 3AAE                              l3831 4510  
                            l3903 3DF6                              l3823 3194  
                            l3815 314C                              l3807 3108  
                            l5263 18D8                              l5271 1916  
                            l5255 1834                              l5247 17D2  
                            l5239 170A                              l5191 13CE  
                            l5183 12E2                              l5175 123E  
                            l5167 11D8                              l5159 1152  
                            l4295 4B5A                              l4551 4628  
                            l4607 4BD6                              l5079 2D42  
                            l5095 385E                              l5087 381C  
                            l5335 2F9C                              l5327 2EFC  
                            l5319 2E8A                              l5431 1F80  
                            l5423 1F48                              l5415 1F28  
                            l5407 1F04                              l5351 1ECC  
                            l5343 1EB8                              l3745 1EA2  
                            l3737 1E8A                              l3729 1E52  
                            l3673 1C96                              l3681 1CEC  
                            l3665 1C5E                              l3657 1C32  
                            l3649 1C00                              l3593 1AF4  
                            l3585 1ABC                              l3577 1A8A  
                            l3569 1A72                              l3841 45A6  
                            l3497 3B62                              l3489 3B1E  
                            l3833 4528                              l3905 3E0E  
                            l3825 31AC                              l3817 3164  
                            l3809 3118                              l5281 19CE  
                            l5273 1948                              l5265 18E6  
                            l5249 1804                              l5257 1842  
                            l5193 13E2                              l5185 1314  
                            l5177 1270                              l5169 11EA  
                            l3761 4C3E                              l4297 4B6A  
                            l4561 4692                              l4553 4638  
                            l4609 4BD8                              l3921 4B80  
                            l5097 387E                              l5089 382A  
                            l5521 2F3E                              l5441 1FF0  
                            l5433 1F82                              l5425 1F56  
                            l5417 1F30                              l5409 1F04  
                            l5361 1ED6                              l5353 1ECE  
                            l5345 1EBC                              l3739 1E8C  
                            l3691 1D40                              l3683 1D12  
                            l3675 1CCA                              l3667 1C60  
                            l3659 1C40                              l3595 1AF8  
                            l3579 1A9A                              l3587 1AC4  
                            l3843 45BE                              l3499 3B7A  
                            l3835 453C                              l3907 3E24  
                            l3851 3958                              l3827 31C4  
                            l3819 3170                              l5283 19DC  
                            l5275 197A                              l5267 18FA  
                            l5259 1874                              l5195 13F0  
                            l5187 136A                              l5179 12A2  
                            l3763 4C44                              l3771 4CD8  
                            l4299 4B74                              l4571 46B4  
                            l4563 469C                              l4555 4662  
                            l3923 4B84                              l3931 4D0A  
                            l5099 38D4                              l5291 2D6C  
                            l5451 20D4                              l5443 2038  
                            l5435 1F84                              l5427 1F64  
                            l5419 1F30                              l5371 1EE0  
                            l5363 1ED8                              l5355 1ED0  
                            l5347 1EC8                              l4581 42F2  
                            l4573 42B2                              l3773 47A6  
                            l3693 1D4E                              l3685 1D22  
                            l3677 1CCC                              l3669 1C6A  
                            l3597 1AFC                              l3589 1AD4  
                            l3845 45D2                              l3837 4550  
                            l3829 44FC                              l3861 39D0  
                            l3853 3970                              l3781 300C  
                            l5277 19AC                              l5269 1908  
                            l5189 13C0                              l5197 13FE  
                            l5285 19EA                              l3765 4C46  
                            l4565 469E                              l4557 4686  
                            l3925 4B92                              l3941 4186  
                            l3933 4106                              l5461 2158  
                            l5453 2106                              l5445 2044  
                            l5429 1F68                              l5437 1F9C  
                            l5381 1EEA                              l5373 1EE2  
                            l5365 1EDA                              l5357 1ED2  
                            l5349 1ECA                              l4583 4306  
                            l4575 42BE                              l3951 2758  
                            l3695 1D50                              l3679 1CDC  
                            l3599 1B00                              l3847 45E6  
                            l3839 4592                              l3871 3A24  
                            l3863 39E0                              l3855 399C  
                            l3791 3064                              l3783 3020  
                            l3775 2FB4                              l5279 19BA  
                            l5199 1454                              l3767 4C48  
                            l3759 4C34                              l4567 46A8  
                            l4559 4690                              l4591 4BBE  
                            l3927 4B96                              l3935 414A  
                            l3943 4192                              l4911 4384  
                            l5295 2D80                              l5471 220E  
                            l5463 2196                              l5455 2118  
                            l5447 206C                              l5439 1FE4  
                            l5391 1EF4                              l5383 1EEC  
                            l5375 1EE4                              l5367 1EDC  
                            l5359 1ED4                              l4585 431A  
                            l4577 42CE                              l3961 2798  
                            l3953 2766                              l3697 1D5E  
                            l3689 1D36                              l3881 3D12  
                            l3873 3A3C                              l3865 39F4  
                            l3857 39B0                              l3849 3944  
                            l3793 307C                              l3785 3030  
                            l3777 2FC8                              l3769 4C4A  
                            l4569 46AA                              l4593 4BC0  
                            l3945 41AA                              l3937 4162  
                            l3929 4CF6                              l4921 4406  
                            l4913 4396                              l5297 2D92  
                            l5289 2D64                              l5481 227E  
                            l5473 2210                              l5465 21B0  
                            l5457 214C                              l5449 208E  
                            l5393 1EF6                              l5385 1EEE  
                            l5377 1EE6                              l5369 1EDE  
                            l4579 42DE                              l3971 27BE  
                            l3963 279A                              l3955 2768  
                            l3699 1D66                              l3891 3D8A  
                            l3883 3D2A                              l3875 3A54  
                            l3867 3A0C                              l3859 39C0  
                            l3795 3088                              l3787 3040  
                            l3779 2FE0                              l4595 4BC2  
                            l4587 4BB0                              l3947 41C2  
                            l3939 416E                              l4915 43A8  
                            l4931 4AA8                              l5299 2DEC  
                            l5491 22E6                              l5483 2282  
                            l5475 2212                              l5467 21C6  
                            l5459 2150                              l5395 1EF8  
                            l5387 1EF0                              l5379 1EE8  
                            l3981 27FE                              l3973 27CC  
                            l3957 2778                              l3965 27A2  
                            l3949 274C                              l3893 3D9A  
                            l3885 3D56                              l3877 3A6C  
                            l3869 3A18                              l3797 3094  
                            l3789 3050                              l4597 4BC4  
                            l4589 4BB6                              l4941 33C4  
                            l4933 338E                              l4917 43B2  
                            l4925 4A86                              l5493 22EE  
                            l5477 2240                              l5469 21FA  
                            l5485 229C                              l5397 1EFA  
                            l5389 1EF2                              l3991 283E  
                            l3983 2800                              l3975 27CE  
                            l3967 27B2                              l3959 2788  
                            l3895 3DAE                              l3887 3D6A  
                            l3879 3CFE                              l3799 30AC  
                            l4599 4BCE                              l4951 3420  
                            l4943 33D2                              l4935 3392  
                            l4919 43D0                              l4927 4A92  
                            l5495 2302                              l5487 22AE  
                            l5479 224A                              l5399 1EFC  
                            l3993 2846                              l3977 27DE  
                            l3985 2808                              l3969 27B8  
                            l3897 3DC6                              l3889 3D7A  
                            l4961 348A                              l4953 3428  
                            l4945 33F2                              l4937 33A0  
                            l4929 4AA4                              l5489 22C2  
                            l3995 284A                              l3987 2818  
                            l3979 27EE                              l3899 3DD2  
                            l4971 34D4                              l4963 34AA  
                            l4955 343C                              l4947 33F6  
                            l4939 33C0                              l3989 282E  
                            l4973 34F4                              l4965 34AC  
                            l4957 344A                              l4949 3402  
                            l4981 3694                              l3999 285E  
                            l4967 34BE                              l4959 345C  
                            l4991 3704                              l4983 36B4  
                            l4969 34C4                              l4993 370C  
                            l4985 36B8                              l4977 3682  
                            l4995 3720                              l4987 36C6  
                            l4979 3686                              l4997 372E  
                            l4989 36E6                              l4999 375C  
                            STR_1 0E01                              STR_2 0E17  
                            u3000 4AF4                              u3001 4AEC  
                            u3020 446A                              u3021 4466  
                            u3030 448E                              u3031 448A  
                            u4000 239E                              u3200 1A0E  
                            u3040 44CA                      _BAUD4CONbits 000EE9  
                            u4001 239A                              u3201 1A0A  
                            u3041 44C6                              u3018 4AF6  
                            u4010 23B0                              u3210 1A20  
                            u3050 44E2                              u3130 3B7A  
                            u4011 23AC                              u3211 1A1C  
                            u3051 44DE                              u3131 3B76  
                            u4100 2650                              u4020 23C0  
                            u3300 1B7A                              u3220 1A30  
                            u3060 4238                              u3140 3B92  
                            u4101 264C                              u4021 23BC  
                            u3301 1B74                              u3221 1A2C  
                            u3061 4234                              u3141 3B8E  
                            u4110 2664                              u4030 23F6  
                            u3310 1B7C                              u3230 1A72  
                            u3070 425C                              u3150 3CB8  
                            u4111 2660                              u4031 23F2  
                            u3231 1A6E                              u3071 4258  
                            u3151 3CB4                              u4200 3F34  
                            u4120 267E                              u4040 2406  
                            u3400 1C96                              u3320 1BA4  
                            u3240 1A88                              u3080 4280  
                            u3160 3CD0                              u4201 3F30  
                            u4121 267A                              u4041 2402  
                            u3401 1C92                              u3321 1BA0  
                            u3241 1A84                              u3081 427C  
                            u3161 3CCC                              u4130 26C6  
                            u4050 2580                              u3410 1CDC  
                            u3330 1BC2                              u3250 1A9A  
                            u4210 31EC                              u3090 4298  
                            u3170 4C1C                              _T2PR 000FBC  
                            u4131 26C2                              u3411 1CD8  
                            u3331 1BBE                              u3251 1A96  
                            u4211 31E8                              u3091 4294  
                            u3171 4C18                              u4140 26F4  
                            u4060 25DA                              u3500 1DC8  
                            u3420 1D12                              u3340 1BE2  
                            u3260 1AAA                              u4300 337A  
                            u4220 31FA                              u3180 4D24  
                            u4141 26F0                              u4061 25D6  
                            u3501 1DC4                              u3421 1D0E  
                            u3341 1BDE                              u3261 1AA6  
                            u4301 3376                              u4221 31F6  
                            u3181 4D1E                              u4310 403C  
                            u4150 272E                              u4070 25FA  
                            u3510 1DDC                              u3430 1D22  
                            u3350 1BF0                              u3270 1AE6  
                            u4230 3256                              u3190 4D26  
                            u4311 4034                              u4151 272A  
                            u4071 25F6                              u4055 2576  
                            u3511 1DD8                              u3431 1D1E  
                            u3351 1BEC                              u3271 1AE2  
                            u4231 3252                              u4160 3E68  
                            u4080 260C                              u3520 1DF6  
                            u3440 1D4E                              u3360 1C00  
                            u3280 1AF4                              u4240 32AC  
                            u2800 474C                              u3600 30AC  
                            u5200 43D0                              u4400 3FA0  
                            u6000 2058                              u4161 3E64  
                            u4081 2608                              u3521 1DF2  
                            u3441 1D4A                              u3361 1BFC  
                            u3281 1AF0                              u4241 32A8  
                            u2801 4748                              u3601 30A8  
                            u5201 43CC                              u4401 3F9C  
                            u6001 204E                              u4330 4084  
                            u4170 3EA6                              u4090 263A  
                            u3530 1E30                              u3450 1D5E  
                            u3370 1C32                              u3290 1B62  
                            u4250 32F6                              u2810 476A  
                            u3610 30C4                              u5210 4406  
                            u4410 3FB2                              u4331 4080  
                            u4171 3EA2                              u4091 2636  
                            u3531 1E2C                              u3451 1D5A  
                            u3371 1C2E                              u3291 1B5E  
                            u4251 32F2                              u2811 4766  
                            u3611 30C0                              u5211 4402  
                            u4411 3FAA                              u4340 4096  
                            u4180 3EC4                              u3540 1E42  
                            u3460 1D7A                              u3380 1C40  
                            u4260 3314                              u2820 4786  
                            u3620 3194                              u3700 4162  
                            u5300 3694                              u5220 4AC8  
                            u6020 2106                              u4341 408E  
                            u4181 3EC0                              u3541 1E3E  
                            u3461 1D76                              u3381 1C3C  
                            u4261 3310                              u2821 4782  
                            u3621 3190                              u3701 415E  
                            u5301 3690                              u5221 4AC4  
                            u6021 2102                              u4190 3EE4  
                            u3550 1E52                              u3470 1D8A  
                            u3390 1C5E                              u4270 3324  
                            u3630 31AC                              u3710 4186  
                            u5230 33A0                              u5310 36C6  
                            u4430 4010                              u6030 2118  
                            u4191 3EE0                              u3551 1E4E  
                            u3471 1D86                              u3391 1C5A  
                            u4271 3320                              u3631 31A8  
                            u3711 4182                              u5231 339C  
                            u5311 36C2                              u4431 4008  
                            u6031 2114                              u4360 40F4  
                            u4328 403E                              u3800 282E  
                            u3560 1E72                              u3480 1D9C  
                            u4280 3332                              u3640 3A3C  
                            u3720 41AA                              u5240 33D2  
                            u5320 3704                              u5400 2B18  
                            u6040 21C6                              u4361 40EC  
                            u3801 282A                              u3561 1E6E  
                            u3481 1D98                              u4281 332E  
                            u3641 3A38                              u3721 41A6  
                            u5241 33CE                              u5321 3700  
                            u6041 21C2                              u3810 286E  
                            u3570 1E84                              u3490 1DB2  
                            u4290 336C                              u3650 3A54  
                            u3730 41C2                              u5330 372E  
                            u5410 2B2A                              u6050 22AE  
                            u6018 205C                              u3811 286A  
                            u3571 1E80                              u3491 1DAE  
                            u4291 3368                              u3651 3A50  
                            u3731 41BE                              u5251 33FC  
                            u5331 372A                              u5411 2B26  
                            u6051 22AA                              u6107 228E  
                            u3900 29E8                              u3820 28E4  
                            u3740 2766                              u3580 1EA0  
                            u2860 3532                              u3660 3DF6  
                            u5260 3420                              u5340 375C  
                            u5180 4396                              u5420 2B66  
                            u5500 385E                              u4428 3FB4  
                            u4380 3F58                              u6060 22D6  
                            u3901 29E4                              u3821 28E0  
                            u3741 2762                              u3581 1E9C  
                            u2861 352E                              u3661 3DF2  
                            u5261 341C                              u5341 3758  
                            u5181 4392                              u5421 2B62  
                            u5501 385A                              u4381 3F50  
                            u6117 230E                              u6061 22CC  
                            u4358 4098                              u3910 29FE  
                            u3830 2906                              u3750 2778  
                            u2870 35FC                              u3670 3E0E  
                            u5270 344A                              u5350 37A4  
                            u5190 43A8                              u5430 2B92  
                            u5510 387E                              u3911 29FA  
                            u3831 2902                              u3751 2774  
                            u2871 35F8                              u3671 3E0A  
                            u6207 13C6                              u5271 3446  
                            u5351 37A0                              u5191 43A4  
                            u5431 2B8E                              u5511 387A  
                            u6127 3F72                              u2880 4C98  
                            u3920 2A12                              u3840 2930  
                            u3760 2788                              u5600 12A2  
                            u3680 4BAE                              u5280 348A  
                            u5360 46C6                              u5440 2BA8  
                            u5520 48A2                              u4448 4012  
                            u2881 4C94                              u3921 2A0E  
                            u3841 292C                              u3761 2784  
                            u6217 13E8                              u5601 129E  
                            u3681 4BAA                              u5281 3486  
                            u5361 46C2                              u5441 2BA4  
                            u5521 489E                              u6137 3FCC  
                            u2890 4CAE                              u4378 40F6  
                            u3930 2A2C                              u3850 2954  
                            u3770 27CC                              u5610 12D4  
                            u5530 1152                              u3690 4D0A  
                            u5290 34D4                              u5370 471C  
                            u5450 2CE4                              u2891 4CAA  
                            u3931 2A28                              u3851 2950  
                            u3771 27C8                              u6307 18DE  
                            u6227 14E2                              u5611 12D0  
                            u5531 114E                              u3691 4D06  
                            u5291 34D0                              u5371 4718  
                            u5451 2CE0                              u6147 3FF0  
                            u3940 2A74                              u3860 296A  
                            u3780 27DE                              u5700 15F8  
                            u5620 1314                              u5540 1184  
                            u5380 4B26                              u5460 2D02  
                            u3941 2A70                              u3861 2966  
                            u3781 27DA                              u6317 1900  
                            u5701 15F4                              u6237 1504  
                            u5621 1310                              u5541 1180  
                            u5381 4B22                              u5461 2CFE  
                            u6157 2D88                              u3950 2AA4  
                            u3870 2988                              u3790 27EE  
                            u5710 1668                              u5630 136A  
                            u5550 11A6                              u5470 2D1C  
                            u5390 2B16                              u4398 3F5A  
                            u6078 22DA                              u3951 2AA0  
                            u3871 2984                              u3791 27EA  
                            u6407 398E                              u6327 19B2  
                            u5711 1664                              u6247 15FE  
                            u5631 1366                              u5551 11A2  
                            u5471 2D18                              u5391 2B10  
                            u6167 2E04                              u6087 1F74  
                            u3960 2AD2                              u3880 29A8  
                            u5800 18A6                              u5720 169A  
                            u5640 13C0                              u5560 11D8  
                            u5480 2D2C                              u3961 2ACE  
                            u3881 29A4                              u6417 3A5E  
                            u6337 19D4                              u5801 18A2  
                            u5721 1696                              u6257 1620  
                            u5641 13BC                              u5561 11D4  
                            u5481 2D28                              u6177 2ED0  
                            u6097 21A2                              u3890 29BA  
                            u3970 233C                              u5810 18D8  
                            u5730 16CC                              u5650 1454  
                            u5570 11FA                              u5490 380E  
                            u3891 29B6                              u3971 2338  
                            u6507 45B0                              u6427 3D1C  
                            u6347 2FD2                              u5811 18D4  
                            u6267 16D2                              u5731 16C8  
                            u5651 1450                              u5571 11F6  
                            u5491 380A                              u6187 2F90  
                            u3980 234E                              u5820 1948  
                            u5740 173C                              u5660 1486  
                            u5580 122C                              u5900 1F98  
                            u3981 234A                              u6517 45F0  
                            u6437 3D48                              u6357 2FFE  
                            u5821 1944                              u5741 1738  
                            u6277 16F4                              u5661 1482  
                            u5581 1228                              u6197 4B60  
                            u5901 1F92                              u3990 235E  
                            u5830 197A                              u5750 176E  
                            u5670 14DC                              u5590 1270  
                            u5910 1F9A                              u3991 235A  
                            u6527 3BDE                              u6447 3E18  
                            u6367 30CE                              u5831 1976  
                            u6287 180A                              u5751 176A  
                            u5671 14D8                              u5591 126C  
                            u5840 19AC                              u5760 17A0  
                            u5680 1570                              u5920 1FAC  
                            u6537 3C0A                              u6457 451A  
                            u6377 30FA                              u5841 19A8  
                            u6297 182C                              u5761 179C  
                            u5681 156C                              u5921 1FA6  
                            u5770 17D2                              u5690 15C6  
                            u5850 2D7C                              u5930 1FAE  
                            u6547 3CDA                              u6467 455A  
                            u6387 31B6                              u5771 17CE  
                            u5691 15C2                              u5851 2D78  
                            u5780 1804                              u5860 2EF8  
                            u5940 1FC6                              u6557 44EC  
                            u6477 3AA0                              u6397 3962  
                            u5781 1800                              u5861 2EF4  
                            u5941 1FBE                              u5790 1874  
                            u5870 2FB2                              u5950 1FE4  
                            u6567 4056                              u6487 3ACC  
                            u5791 1870                              u5871 2FAE  
                            u5951 1FE0                              u5960 2000  
                            u5880 1F56                              u6577 40B0  
                            u6497 3B9C                              u5961 1FFA  
                            u5881 1F52                              u5970 2002  
                            u5890 1F64                              u6587 40D4  
                            u5891 1F60                              u5980 201A  
                            u5948 1FCA                              u5981 2012  
                            u5990 2038                              u5991 2034  
                            u5988 201E                              abs@a 0017  
                            _dbuf 01D0                              _main 1EB4  
                            _dtoa 2AE6                              _prec 00F5  
                            pad@i 001C                              pad@p 0019  
                            fsr1h 000FE2                              fsr2h 000FDA  
                            indf2 000FDF                              fsr1l 000FE1  
                            pad@w 001E                              fsr2l 000FD9  
                            btemp 005B                              _stop 444E  
                            prodh 000FF4                              prodl 000FF3  
                            start 0076                   ___fldiv@new_exp 0047  
                main@turn_history 0143            __end_of_color_read_Red 4950  
                 __end_of_HighISR 0076                      ___param_bank 000000  
                     _turnLeft_90 3BC0                      main@clearRef 0189  
                           ??_abs 0019                             ??_pad 001B  
                    main@colorNum 018D                   __end_of___aodiv 3516  
                 __end_of___fladd 1EB4                             ?_main 0001  
                           ?_dtoa 0020                   __end_of___aomod 37E6  
                 __end_of___fldiv 2AE6                   __end_of___flmul 274C  
                 __end_of___flsub 4A86                             ?_stop 0018  
                 __end_of___lwdiv 47A6                             i2l533 4D3E  
                           i2l526 4C08                             i2l550 0066  
                           i2l519 4C86                             i2l552 006A  
                    vfpfcnvrt@fmt 0045                             _TMR0H 000FD4  
                           _TMR0L 000FD3        __end_of_I2C_2_Master_Start 4D60  
      __end_of_I2C_2_Master_Write 4D4C                             _flags 00FB  
                           _fputc 4384                   __end_of_forward 41DC  
                           _fputs 4A86                             pad@fp 0015  
                           _width 00F3                             _putch 4D6E  
                           dtoa@d 0022                             dtoa@i 0041  
                           dtoa@n 0038                             dtoa@p 0034  
                           dtoa@s 0040                             dtoa@w 0036  
                           tablat 000FF5                   __end_of_reverse 42B2  
                           ttemp5 005C                             ttemp6 005F  
                           ttemp7 0063                             status 000FD8  
                           wtemp8 005C                   __end_of_sprintf 4900  
         __end_of_color_read_Blue 4A40             _I2C_2_Master_RepStart 4D60  
              putCharToRxBuf@byte 0001                   ?_color_read_Red 0009  
                 __initialization 4804                      __end_of_main 2322  
                    __end_of_dtoa 2D64                   i2_isDataInTxBuf 4D28  
                    __end_of_stop 44FC                      _turnLeft_135 3CFE  
              putCharToTxBuf@byte 0005                     colorDetect@mL 0068  
                   colorDetect@mR 006A                            ??_main 0100  
                          ??_dtoa 002A                            ??_stop 001C  
                   __activetblptr 000003                      _turnRight_90 3A82  
               _return_home_turns 2D64             colorDetect@colour_ref 007E  
                    ?_setMotorPWM 0012                ?_return_home_turns 007F  
                          ?_fputc 0005                            ?_fputs 000E  
                          _CCPR1H 000FAA                            _CCPR2H 000FA6  
                          _CCPR3H 000F25                            _CCPR4H 000F21  
                          ?_putch 0001             colorDetect@greenPrint 008C  
                          _RC0PPS 000E62                            _RC4REG 000EE3  
                          _RE2PPS 000E74                            _RD5PPS 000E6F  
                          _RC7PPS 000E69                            _RD6PPS 000E70  
                          _RE4PPS 000E76                            i2l4621 4BDE  
                          i2l4613 4C60                            i2l2829 4D28  
                          i2l4623 4BEE                            i2l4615 4C70  
                          i2l4625 4BF2                            i2l4617 4C74  
                          i2l4619 4C84                            _RG6PPS 000E88  
                          i2l4841 0038                            i2l4843 0046  
                          i2l4835 0012                            i2l4845 005A  
                          i2l4837 0022                            i2l4839 0028  
        return_home_turns@string1 008B                         ??_HighISR 0003  
        __end_of_color_click_init 4B80                            _RX4PPS 000E15  
                          _TX4REG 000EE4               ??_return_home_turns 0089  
                __end_of___xxtofl 338E                  __end_of_getColor 4804  
                    _CCPTMRS0bits 000FAD                      vfprintf@cfmt 0055  
                          ___flge 3E3A                  _getCharFromTxBuf 4BDE  
                       ??___aodiv 0015                         ??___fladd 000D  
                       ??___aomod 0015                            ___wmul 4CB0  
                       ??___fldiv 003E                         ??___flmul 0025  
                       ??___flsub 001D                         ??___lwdiv 000F  
                          clear_0 482A                            clear_1 4836  
                          clear_2 4842                            isa$std 000001  
                          pad@buf 0017                     main@motorLeft 01B3  
                          dtoa@fp 0020         __end_of_return_home_turns 2FB4  
                          fputc@c 0005                 ?_TxBufferedString 0006  
                          fputs@c 0012                            fputs@i 0013  
                          fputs@s 000E                         ??_forward 001C  
                    __mediumconst 0000                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
              ??_TxBufferedString 0008                         ??_reverse 001C  
                __end_of_whiteCal 4022                            putch@c 0001  
                __end_of_vfprintf 48AE                            stop@mL 0018  
                          stop@mR 001A                 ??_initDCmotorsPWM 0007  
                       ??_sprintf 0057                  __end_of_turn_180 31DA  
                      ___flge@ff1 001D                        ___flge@ff2 0021  
                    ___xxtofl@arg 000F                      ___xxtofl@exp 000E  
                    ___xxtofl@val 0005             __end_of_isDataInTxBuf 4D28  
                      __accesstop 0060           __end_of__initialization 4850  
        __end_of_color_read_Clear 49F0          __end_of_color_read_Green 49A0  
          ?_I2C_2_Master_RepStart 0001           __end_ofi2_isDataInTxBuf 4D40  
                   ___rparam_used 000001                  ?_color_read_Blue 0009  
               main@ambientRGBVal 0198                    __pcstackCOMRAM 0001  
                   ?_DCmotorsInit 0005                      __pidataBANK0 4D6A  
                   __end_of_fputc 444E                     __end_of_fputs 4ACA  
                   __end_of_putch 4D70                return_home_turns@i 00EF  
              return_home_turns@k 00F1                           ??_fputc 0009  
                         ??_fputs 0012                _reverseSquareRight 44FC  
                         ??_putch 0005                        __pbssBANK0 00F3  
                      __pbssBANK1 01BC                        __pbssBANK2 0200  
                      _ambientCal 4022               ?_reverseSquareRight 0024  
                   _turnRight_135 3944                 _color_writetoaddr 4CD6  
                    _T2CLKCONbits 000FBF                    ??_DCmotorsInit 0009  
                         ?___flge 001D                      ?_turnLeft_90 001E  
              ?_color_writetoaddr 0007                           ?___wmul 0005  
             ??_color_writetoaddr 0008              ??_reverseSquareRight 0028  
                       ?___xxtofl 0005                           _SP4BRGH 000EE6  
                         _SP4BRGL 000EE5                         ?_getColor 0010  
                         _SSP2ADD 000ED6                           _SSP2BUF 000ED5  
          color_writetoaddr@value 0007                  ??_color_read_Red 000B  
                         _HighISR 0008                    ?_turnRight_135 001E  
       __end_of_color_writetoaddr 4CF6                  ?i2_isDataInTxBuf 0001  
              _I2C_2_Master_Start 4D56                        _initUSART4 4BB0  
              _I2C_2_Master_Write 4D40                           __Hparam 0000  
                         __Lparam 0000                 color_read_Red@tmp 000E  
                         ___aodiv 338E                           ___fladd 19F4  
                         ___aomod 3682                           ___fldiv 274C  
                         ___flmul 2322                         ?_whiteCal 0012  
                         ___flsub 4A40               ?_I2C_2_Master_Start 0001  
                         ___lwdiv 4732               ?_I2C_2_Master_Write 0001  
                      _off_period 00F7                         ?_vfprintf 0060  
                    __psmallconst 0E00                         ?_turn_180 001E  
                         __pcinit 4804                           __ramtop 0E00  
                         __ptext0 1EB4                           __ptext1 3F3E  
                         __ptext2 2D64                           __ptext3 48AE  
                         __ptext4 485A                           __ptext5 37E6  
                         __ptext6 2AE6                           __ptext7 46B8  
                         __ptext8 4A86                           __ptext9 4384  
               colorDetect@RGBVal 0080                         _T2CONbits 000FBD  
                         _forward 4106                        ??___xxtofl 0009  
                       _T2HLTbits 000FBE                           _reverse 41DC  
                      ??_getColor 0012                     _RxBufWriteCnt 005A  
        __end_of_getCharFromTxBuf 4C0A                    main@motorRight 01AA  
                         _sprintf 48AE              ??_I2C_2_Master_Start 0006  
            ??_I2C_2_Master_Write 0006              end_of_initialization 4850  
               __end_of_sendTxBuf 4D10                    DCmotorsInit@mL 0005  
                  DCmotorsInit@mR 0007                       ?_ambientCal 0012  
                         fputc@fp 0007                           fputs@fp 0010  
               ?_color_click_init 0001                 colorDetect@whiteB 0074  
               colorDetect@whiteG 0070                 colorDetect@whiteR 006C  
              ??_color_click_init 0009                 __end_of_vfpfcnvrt 3944  
                         postdec1 000FE5                           postdec2 000FDD  
                         postinc0 000FEE                           postinc1 000FE6  
                         postinc2 000FDE                  vfpfcnvrt@convarg 004B  
                      ??_whiteCal 0014                        ??_vfprintf 0055  
                      ??_turn_180 0022                   _initDCmotorsPWM 4628  
                       _PORTFbits 000F8E                setMotorPWM@negDuty 0017  
                     ___fladd@grs 0014                        main@RGBVal 018F  
                   ___xxtofl@sign 000D                         _TRISAbits 000F81  
              setMotorPWM@posDuty 0016                         _TRISCbits 000F83  
                       _TRISDbits 000F84                         _TRISEbits 000F85  
                       _TRISFbits 000F86                         _TRISGbits 000F87  
                       _TRISHbits 000F88              __end_of_DCmotorsInit 4384  
                     ___fldiv@grs 0049                       ___fldiv@rem 0042  
             reverseSquareLeft@mL 0024               reverseSquareLeft@mR 0026  
        color_writetoaddr@address 0008           ??_I2C_2_Master_RepStart 0006  
                 ??_turnRight_135 0022                       ___flmul@grs 002A  
                     _CCP1CONbits 000FAB                 ?_color_read_Clear 0009  
                    _EUSART4RXbuf 01BC                      _EUSART4TXbuf 0200  
                     _CCP2CONbits 000FA7                 ?_color_read_Green 0009  
                     _CCP3CONbits 000F26                  main@forwardCount 0187  
                     ?_initUSART4 0001                       _CCP4CONbits 000F22  
return_home_turns@counter_history 0081                        main@whiteC 0183  
              ??_color_read_Clear 000B                ??_color_read_Green 000B  
                   ??_colorDetect 004F                    __end_of___flge 3F3E  
                     vfpfcnvrt@ap 0047                       vfpfcnvrt@cp 0053  
                     vfpfcnvrt@fp 0043                    __end_of___wmul 4CD6  
          colorDetect@whiteRGBVal 0066               color_read_Clear@tmp 000E  
             start_initialization 4804              colorDetect@bluePrint 0090  
                     __end_of_abs 4B4C                       __end_of_pad 4732  
                   _TxBufWriteCnt 0058               color_read_Green@tmp 000E  
             return_home_turns@mL 0085               return_home_turns@mR 0087  
         __end_of_initDCmotorsPWM 46B8                       vfprintf@fmt 0062  
                        ??___flge 0025               main@counter_history 0103  
                        ??___wmul 0009                    _putCharToRxBuf 4C5E  
                  _putCharToTxBuf 4C0A                       __pdataBANK0 00FC  
             __end_of_colorDetect 19F4                         ___fladd@a 0009  
                       ___fladd@b 0005                         ___fldiv@a 003A  
                       ___fldiv@b 0036                         ___flmul@a 0021  
                       ___flmul@b 001D                       __pbssCOMRAM 0057  
                       ___flsub@a 0019                         ___flsub@b 0015  
                   __pcstackBANK0 0060                     __pcstackBANK1 0100  
                ___aodiv@dividend 0005                          ?_HighISR 0001  
               _reverseSquareLeft 4592                ?_reverseSquareLeft 0024  
                ___lwdiv@dividend 000B                         _dtoa$2702 0032  
          __end_of_putCharToRxBuf 4C88            __end_of_putCharToTxBuf 4C34  
                       __pintcode 0008                          ?___aodiv 0005  
                        ?___fladd 0005                          ?___aomod 0005  
                        ?___fldiv 0036                  ___aodiv@quotient 0017  
                        ?___flmul 001D                          ?___flsub 0015  
                   ?_turnLeft_135 001E                          ?___lwdiv 000B  
             ??_reverseSquareLeft 0028                   turnRight_135@mL 001E  
                 turnRight_135@mR 0020            TxBufferedString@string 0006  
                  turnLeft_135@mL 001E                    turnLeft_135@mR 0020  
            I2C_2_Master_Read@ack 0007              I2C_2_Master_Read@tmp 0008  
                     __smallconst 0E00                          ?_forward 0018  
               _I2C_2_Master_Idle 4C88                     ?_turnRight_90 001E  
               _I2C_2_Master_Init 4C34                 _I2C_2_Master_Read 4ACA  
               _I2C_2_Master_Stop 4D4C                      _RxBufReadCnt 0059  
                        ?_reverse 0018                ?_I2C_2_Master_Idle 0001  
              ?_I2C_2_Master_Init 0001                ?_I2C_2_Master_Read 0001  
                   ??_setMotorPWM 0014                ?_I2C_2_Master_Stop 0001  
                ___lwdiv@quotient 000F          initDCmotorsPWM@PWMperiod 0005  
                        ?_sprintf 0066                 ?_getCharFromTxBuf 0001  
       __end_of_reverseSquareLeft 4628                ??_getCharFromTxBuf 0001  
                    ??_ambientCal 0014               ??_I2C_2_Master_Idle 0005  
             ??_I2C_2_Master_Init 0005               ??_I2C_2_Master_Read 0006  
                  ___wmul@product 0009                          _LATAbits 000F79  
             ??_I2C_2_Master_Stop 0006                          _LATCbits 000F7B  
                   _isDataInTxBuf 4D10                          _LATDbits 000F7C  
                        _LATEbits 000F7D                          _LATFbits 000F7E  
                       _on_period 00F9                  _TxBufferedString 4B80  
                        _LATGbits 000F7F                          _LATHbits 000F80  
                       _sendTxBuf 4CF6                          _IPR4bits 000E23  
                        _PIE4bits 000E2D                         getColor@v 0010  
                        i2u223_40 4D3C                          i2u223_41 4D36  
                        i2u224_40 4D3E                          i2u510_40 005A  
                        i2u510_41 0056                          i2u507_40 0022  
                        i2u507_41 001E                          i2u508_40 0038  
                        i2u508_41 0034                          i2u509_40 0046  
                        i2u509_41 0042                          _PIR4bits 000E37  
                        i2u480_40 4C70                          i2u480_41 4C6C  
                        i2u481_40 4BEE                          i2u481_41 4BEA  
                 ?_putCharToRxBuf 0001                  ?_initDCmotorsPWM 0005  
                     _colorDetect 0E28                   ?_putCharToTxBuf 0001  
                  ??_turnLeft_135 0022                      _DCmotorsInit 42B2  
                        _SSP2CON2 000EDA                          _SSP2STAT 000ED8  
                       _vfpfcnvrt 37E6         __end_of_I2C_2_Master_Idle 4CB0  
       __end_of_I2C_2_Master_Init 4C5E         __end_of_I2C_2_Master_Read 4B0C  
               ___wmul@multiplier 0005         __end_of_I2C_2_Master_Stop 4D56  
                  ??_turnRight_90 0022                      setMotorPWM@m 0012  
                       main@carGo 0197       I2C_2_Master_Write@data_byte 0006  
              __end_of_ambientCal 4106                         main@index 01A8  
               ??_color_read_Blue 000B                      _TxBufReadCnt 0057  
                       copy_data0 4818               colorDetect@ambientB 007C  
             colorDetect@ambientG 007A               colorDetect@ambientR 0078  
             colorDetect@clearRef 0060                    ?_isDataInTxBuf 0001  
   __end_of_I2C_2_Master_RepStart 4D6A                color_read_Blue@tmp 000E  
             __end_of_setMotorPWM 3682                        ?_sendTxBuf 0001  
          return_home_turns@index 0083                      ??_initUSART4 0005  
                        __Hrparam 0000               colorDetect@redPrint 0088  
                      vfprintf@ap 0064                          __Lrparam 0000  
                      vfprintf@fp 0060                         forward@mL 0018  
                       forward@mR 001A     return_home_turns@turn_history 007F  
                      ?_vfpfcnvrt 0043          colorDetect@ambientRGBVal 0064  
                 ___aodiv@divisor 000D                   ___aodiv@counter 0015  
                      _ANSELDbits 000EA7                        _ANSELFbits 000EB4  
                      sprintf@fmt 0068                        turn_180@mL 001E  
                      turn_180@mR 0020                          ___xxtofl 31DA  
                      _T0CON0bits 000FD5                        _T0CON1bits 000FD6  
                 ___lwdiv@divisor 000D                __end_of_initUSART4 4BDE  
                        _getColor 47A6                   ___lwdiv@counter 0011  
                        __ptext10 4D6E                          __ptext11 4B0C  
                        __ptext20 4628                          __ptext12 3682  
                        __ptext21 4B4C                          __ptext13 338E  
                        __ptext30 4592                          __ptext22 4CD6  
                        __ptext14 4CF6                          __ptext31 3BC0  
                        __ptext23 4C34                          __ptext15 4D10  
                        __ptext40 2322                          __ptext32 444E  
                        __ptext24 0E28                          __ptext16 4106  
                        __ptext41 3E3A                          __ptext33 41DC  
                        __ptext25 2FB4                          __ptext17 4B80  
                        __ptext50 4D4C                          __ptext42 274C  
                        __ptext34 3516                          __ptext26 3944  
                        __ptext18 4C0A                          __ptext51 4D56  
                        __ptext43 4022                          __ptext35 4CB0  
                        __ptext27 3CFE                          __ptext19 4BB0  
                        __ptext52 4D60                          __ptext44 47A6  
                        __ptext36 4732                          __ptext28 44FC  
                        __ptext53 4ACA                          __ptext45 4900  
                        __ptext37 31DA                          __ptext29 3A82  
                        __ptext54 4C88                          __ptext46 4950  
                        __ptext38 4A40                          __ptext55 42B2  
                        __ptext47 49A0                          __ptext39 19F4  
                        __ptext48 49F0                          __ptext57 4D28  
                        __ptext49 4D40                          __ptext58 4C5E  
                        __ptext59 4BDE                       ambientCal@i 0016  
                     ambientCal@v 0012                    turnRight_90@mL 001E  
                  turnRight_90@mR 0020                      _SSP2CON1bits 000ED9  
                    _SSP2CON2bits 000EDA                     turnLeft_90@mL 001E  
                   turnLeft_90@mR 0020             __end_of_turnRight_135 3A82  
                       reverse@mL 0018                         reverse@mR 001A  
                   ??_turnLeft_90 0022                    _turning_time45 00FE  
                        isa$xinst 000000                        _RC4STAbits 000EE7  
                        int$flags 005B                          _whiteCal 3F3E  
                        _vfprintf 485A                          _turn_180 2FB4  
                ___aomod@dividend 0005                         whiteCal@i 0016  
                       whiteCal@v 0012                        _INTCONbits 000FF2  
               ??i2_isDataInTxBuf 0001                      _reverse_time 00FC  
                     _setMotorPWM 3516              __end_of_turnLeft_135 3E3A  
                 ??_isDataInTxBuf 0005                          intlevel2 0000  
                       sprintf@ap 0072                       ??_sendTxBuf 0005  
                 main@whiteRGBVal 01A0              __end_of_turnRight_90 3BC0  
                 ___aomod@divisor 000D                       ??_vfpfcnvrt 0049  
                 ___aomod@counter 0015                  _color_click_init 4B4C  
             __end_of_turnLeft_90 3CFE          __end_of_TxBufferedString 4BB0  
                        sprintf@f 0074                          sprintf@s 0066  
                      _SSP2DATPPS 000E1D                        _SSP2CLKPPS 000E1C  
                   ___fladd@signs 0011                        _TX4STAbits 000EE8  
                    ___aodiv@sign 0016                      ___fladd@aexp 0012  
                    ___fladd@bexp 0013                  ??_putCharToRxBuf 0001  
                ??_putCharToTxBuf 0005                      ___aomod@sign 0016  
                    ?_colorDetect 0060  

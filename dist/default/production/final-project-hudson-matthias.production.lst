

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Tue Dec 13 21:00:08 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=3
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=3
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=3
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=3
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=3
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=3
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=2
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=2
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=2
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=2
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=2
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=2
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=2
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=3
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=3
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=3
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=3
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=2
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=2
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=2
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=2
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=2
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1
    81                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    82                           	psect	text66,global,reloc=2,class=CODE,delta=1
    83                           	psect	text67,global,reloc=2,class=CODE,delta=1
    84                           	psect	text68,global,reloc=2,class=CODE,delta=1
    85                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    86                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    87                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    88                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    89                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    90   000000                     
    91                           ; Version 2.35
    92                           ; Generated 05/05/2021 GMT
    93                           ; 
    94                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    95                           ; All rights reserved.
    96                           ; 
    97                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    98                           ; 
    99                           ; Redistribution and use in source and binary forms, with or without modification, are
   100                           ; permitted provided that the following conditions are met:
   101                           ; 
   102                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   103                           ;        conditions and the following disclaimer.
   104                           ; 
   105                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   106                           ;        of conditions and the following disclaimer in the documentation and/or other
   107                           ;        materials provided with the distribution. Publication is not required when
   108                           ;        this file is used in an embedded application.
   109                           ; 
   110                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   111                           ;        software without specific prior written permission.
   112                           ; 
   113                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   114                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   115                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   116                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   117                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   118                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   119                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   120                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   121                           ; 
   122                           ; 
   123                           ; Code-generator required, PIC18F67K40 Definitions
   124                           ; 
   125                           ; SFR Addresses
   126   000000                     
   127                           	psect	idataBANK0
   128   005B30                     __pidataBANK0:
   129                           	callstack 0
   130                           
   131                           ;initializer for _reverse_time
   132   005B30  02BC               	dw	700
   133                           
   134                           ;initializer for _turning_time45
   135   005B32  00BB               	dw	187
   136   000000                     _TX4REG	set	3812
   137   000000                     _RC4STAbits	set	3815
   138   000000                     _SP4BRGH	set	3814
   139   000000                     _TRISFbits	set	3974
   140   000000                     _LATFbits	set	3966
   141   000000                     _TRISDbits	set	3972
   142   000000                     _TRISGbits	set	3975
   143   000000                     _LATGbits	set	3967
   144   000000                     _LATEbits	set	3965
   145   000000                     _SSP2CON2bits	set	3802
   146   000000                     _RX4PPS	set	3605
   147   000000                     _SSP2CLKPPS	set	3612
   148   000000                     _SSP2DATPPS	set	3613
   149   000000                     _RC7PPS	set	3689
   150   000000                     _RE2PPS	set	3700
   151   000000                     _LATCbits	set	3963
   152   000000                     _LATDbits	set	3964
   153   000000                     _TRISAbits	set	3969
   154   000000                     _LATHbits	set	3968
   155   000000                     _TRISCbits	set	3971
   156   000000                     _TRISEbits	set	3973
   157   000000                     _PORTFbits	set	3982
   158   000000                     _TRISHbits	set	3976
   159   000000                     _T2PR	set	4028
   160   000000                     _T2CONbits	set	4029
   161   000000                     _CCPR2H	set	4006
   162   000000                     _CCPR1H	set	4010
   163   000000                     _RE4PPS	set	3702
   164   000000                     _RG6PPS	set	3720
   165   000000                     _RD5PPS	set	3695
   166   000000                     _ANSELDbits	set	3751
   167   000000                     _SSP2ADD	set	3798
   168   000000                     _SSP2CON1bits	set	3801
   169   000000                     _CCPR4H	set	3873
   170   000000                     _CCPR3H	set	3877
   171   000000                     _TMR0L	set	4051
   172   000000                     _TMR0H	set	4052
   173   000000                     _T0CON0bits	set	4053
   174   000000                     _T0CON1bits	set	4054
   175   000000                     _T2CLKCONbits	set	4031
   176   000000                     _T2HLTbits	set	4030
   177   000000                     _CCP1CONbits	set	4011
   178   000000                     _CCPTMRS0bits	set	4013
   179   000000                     _CCP2CONbits	set	4007
   180   000000                     _LATAbits	set	3961
   181   000000                     _CCP3CONbits	set	3878
   182   000000                     _CCP4CONbits	set	3874
   183   000000                     _RC4REG	set	3811
   184   000000                     _SP4BRGL	set	3813
   185   000000                     _TX4STAbits	set	3816
   186   000000                     _BAUD4CONbits	set	3817
   187   000000                     _SSP2CON2	set	3802
   188   000000                     _SSP2STAT	set	3800
   189   000000                     _ANSELFbits	set	3764
   190   000000                     _SSP2BUF	set	3797
   191   000000                     _IPR4bits	set	3619
   192   000000                     _PIE4bits	set	3629
   193   000000                     _RC0PPS	set	3682
   194   000000                     _RD6PPS	set	3696
   195   000000                     _INTCONbits	set	4082
   196   000000                     _PIR4bits	set	3639
   197                           
   198                           	psect	smallconst
   199   000E00                     __psmallconst:
   200                           	callstack 0
   201   000E00  00                 	db	0
   202   000E01                     STR_1:
   203   000E01  52                 	db	82	;'R'
   204   000E02  3A                 	db	58	;':'
   205   000E03  20                 	db	32
   206   000E04  25                 	db	37
   207   000E05  66                 	db	102	;'f'
   208   000E06  20                 	db	32
   209   000E07  47                 	db	71	;'G'
   210   000E08  3A                 	db	58	;':'
   211   000E09  20                 	db	32
   212   000E0A  25                 	db	37
   213   000E0B  66                 	db	102	;'f'
   214   000E0C  20                 	db	32
   215   000E0D  42                 	db	66	;'B'
   216   000E0E  3A                 	db	58	;':'
   217   000E0F  25                 	db	37
   218   000E10  66                 	db	102	;'f'
   219   000E11  20                 	db	32
   220   000E12  0D                 	db	13
   221   000E13  00                 	db	0
   222   000E14  25                 	db	37
   223   000E15  64                 	db	100	;'d'
   224   000E16  2C                 	db	44
   225   000E17  25                 	db	37
   226   000E18  64                 	db	100	;'d'
   227   000E19  2C                 	db	44
   228   000E1A  25                 	db	37
   229   000E1B  64                 	db	100	;'d'
   230   000E1C  2C                 	db	44
   231   000E1D  25                 	db	37
   232   000E1E  64                 	db	100	;'d'
   233   000E1F  20                 	db	32
   234   000E20  0D                 	db	13
   235   000E21  0A                 	db	10
   236   000E22  00                 	db	0
   237   000E23                     STR_3:
   238   000E23  69                 	db	105	;'i'
   239   000E24  6E                 	db	110	;'n'
   240   000E25  66                 	db	102	;'f'
   241   000E26  00                 	db	0
   242   000E27                     STR_6:
   243   000E27  6E                 	db	110	;'n'
   244   000E28  61                 	db	97	;'a'
   245   000E29  6E                 	db	110	;'n'
   246   000E2A  00                 	db	0
   247   000E2B  00                 	db	0	; dummy byte at the end
   248   000000                     
   249                           ; #config settings
   250                           
   251                           	psect	cinit
   252   0054BE                     __pcinit:
   253                           	callstack 0
   254   0054BE                     start_initialization:
   255                           	callstack 0
   256   0054BE                     __initialization:
   257                           	callstack 0
   258                           
   259                           ; Initialize objects allocated to BANK0 (4 bytes)
   260                           ; load TBLPTR registers with __pidataBANK0
   261   0054BE  0E30               	movlw	low __pidataBANK0
   262   0054C0  6EF6               	movwf	tblptrl,c
   263   0054C2  0E5B               	movlw	high __pidataBANK0
   264   0054C4  6EF7               	movwf	tblptrh,c
   265   0054C6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   266   0054C8  6EF8               	movwf	tblptru,c
   267   0054CA  EE00  F0FB         	lfsr	0,__pdataBANK0
   268   0054CE  EE10 F004          	lfsr	1,4
   269   0054D2                     copy_data0:
   270   0054D2  0009               	tblrd		*+
   271   0054D4  CFF5 FFEE          	movff	tablat,postinc0
   272   0054D8  50E5               	movf	postdec1,w,c
   273   0054DA  50E1               	movf	fsr1l,w,c
   274   0054DC  E1FA               	bnz	copy_data0
   275                           
   276                           ; Clear objects allocated to BANK2 (60 bytes)
   277   0054DE  EE02  F000         	lfsr	0,__pbssBANK2
   278   0054E2  0E3C               	movlw	60
   279   0054E4                     clear_0:
   280   0054E4  6AEE               	clrf	postinc0,c
   281   0054E6  06E8               	decf	wreg,f,c
   282   0054E8  E1FD               	bnz	clear_0
   283                           
   284                           ; Clear objects allocated to BANK1 (100 bytes)
   285   0054EA  EE01  F06D         	lfsr	0,__pbssBANK1
   286   0054EE  0E64               	movlw	100
   287   0054F0                     clear_1:
   288   0054F0  6AEE               	clrf	postinc0,c
   289   0054F2  06E8               	decf	wreg,f,c
   290   0054F4  E1FD               	bnz	clear_1
   291                           
   292                           ; Clear objects allocated to BANK0 (17 bytes)
   293   0054F6  EE00  F0EA         	lfsr	0,__pbssBANK0
   294   0054FA  0E11               	movlw	17
   295   0054FC                     clear_2:
   296   0054FC  6AEE               	clrf	postinc0,c
   297   0054FE  06E8               	decf	wreg,f,c
   298   005500  E1FD               	bnz	clear_2
   299                           
   300                           ; Clear objects allocated to COMRAM (4 bytes)
   301   005502  6A5A               	clrf	(__pbssCOMRAM+3)& (0+255),c
   302   005504  6A59               	clrf	(__pbssCOMRAM+2)& (0+255),c
   303   005506  6A58               	clrf	(__pbssCOMRAM+1)& (0+255),c
   304   005508  6A57               	clrf	__pbssCOMRAM& (0+255),c
   305   00550A                     end_of_initialization:
   306                           	callstack 0
   307   00550A                     __end_of__initialization:
   308                           	callstack 0
   309   00550A  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   310   00550C  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   311   00550E  0100               	movlb	0
   312   005510  EF6A  F018         	goto	_main	;jump to C main() function
   313                           
   314                           	psect	bssCOMRAM
   315   000057                     __pbssCOMRAM:
   316                           	callstack 0
   317   000057                     _TxBufReadCnt:
   318                           	callstack 0
   319   000057                     	ds	1
   320   000058                     _TxBufWriteCnt:
   321                           	callstack 0
   322   000058                     	ds	1
   323   000059                     _RxBufReadCnt:
   324                           	callstack 0
   325   000059                     	ds	1
   326   00005A                     _RxBufWriteCnt:
   327                           	callstack 0
   328   00005A                     	ds	1
   329                           
   330                           	psect	bssBANK0
   331   0000EA                     __pbssBANK0:
   332                           	callstack 0
   333   0000EA                     floorf@F526:
   334                           	callstack 0
   335   0000EA                     	ds	4
   336   0000EE                     ___fpclassifyf@F465:
   337                           	callstack 0
   338   0000EE                     	ds	4
   339   0000F2                     _width:
   340                           	callstack 0
   341   0000F2                     	ds	2
   342   0000F4                     _prec:
   343                           	callstack 0
   344   0000F4                     	ds	2
   345   0000F6                     _off_period:
   346                           	callstack 0
   347   0000F6                     	ds	2
   348   0000F8                     _on_period:
   349                           	callstack 0
   350   0000F8                     	ds	2
   351   0000FA                     _flags:
   352                           	callstack 0
   353   0000FA                     	ds	1
   354                           
   355                           	psect	dataBANK0
   356   0000FB                     __pdataBANK0:
   357                           	callstack 0
   358   0000FB                     _reverse_time:
   359                           	callstack 0
   360   0000FB                     	ds	2
   361   0000FD                     _turning_time45:
   362                           	callstack 0
   363   0000FD                     	ds	2
   364                           
   365                           	psect	bssBANK1
   366   00016D                     __pbssBANK1:
   367                           	callstack 0
   368   00016D                     _EUSART4RXbuf:
   369                           	callstack 0
   370   00016D                     	ds	20
   371   000181                     _dbuf:
   372                           	callstack 0
   373   000181                     	ds	80
   374                           
   375                           	psect	bssBANK2
   376   000200                     __pbssBANK2:
   377                           	callstack 0
   378   000200                     _EUSART4TXbuf:
   379                           	callstack 0
   380   000200                     	ds	60
   381                           
   382                           	psect	cstackBANK1
   383   000100                     __pcstackBANK1:
   384                           	callstack 0
   385   000100                     colorDetect@string1:
   386                           	callstack 0
   387                           
   388                           ; 20 bytes @ 0x0
   389   000100                     	ds	20
   390   000114                     colorDetect@whiteR:
   391                           	callstack 0
   392                           
   393                           ; 4 bytes @ 0x14
   394   000114                     	ds	4
   395   000118                     colorDetect@whiteG:
   396                           	callstack 0
   397                           
   398                           ; 4 bytes @ 0x18
   399   000118                     	ds	4
   400   00011C                     colorDetect@whiteB:
   401                           	callstack 0
   402                           
   403                           ; 4 bytes @ 0x1C
   404   00011C                     	ds	4
   405   000120                     colorDetect@ambientR:
   406                           	callstack 0
   407                           
   408                           ; 2 bytes @ 0x20
   409   000120                     	ds	2
   410   000122                     colorDetect@ambientG:
   411                           	callstack 0
   412                           
   413                           ; 2 bytes @ 0x22
   414   000122                     	ds	2
   415   000124                     colorDetect@ambientB:
   416                           	callstack 0
   417                           
   418                           ; 2 bytes @ 0x24
   419   000124                     	ds	2
   420   000126                     colorDetect@RGBVal:
   421                           	callstack 0
   422                           
   423                           ; 8 bytes @ 0x26
   424   000126                     	ds	8
   425   00012E                     colorDetect@redPrint:
   426                           	callstack 0
   427                           
   428                           ; 4 bytes @ 0x2E
   429   00012E                     	ds	4
   430   000132                     colorDetect@greenPrint:
   431                           	callstack 0
   432                           
   433                           ; 4 bytes @ 0x32
   434   000132                     	ds	4
   435   000136                     colorDetect@bluePrint:
   436                           	callstack 0
   437                           
   438                           ; 4 bytes @ 0x36
   439   000136                     	ds	4
   440   00013A                     main@whiteC:
   441                           	callstack 0
   442                           
   443                           ; 4 bytes @ 0x3A
   444   00013A                     	ds	4
   445   00013E                     main@clearRef:
   446                           	callstack 0
   447                           
   448                           ; 4 bytes @ 0x3E
   449   00013E                     	ds	4
   450   000142                     main@RGBVal:
   451                           	callstack 0
   452                           
   453                           ; 8 bytes @ 0x42
   454   000142                     	ds	8
   455   00014A                     main@carGo:
   456                           	callstack 0
   457                           
   458                           ; 1 bytes @ 0x4A
   459   00014A                     	ds	1
   460   00014B                     main@ambientRGBVal:
   461                           	callstack 0
   462                           
   463                           ; 8 bytes @ 0x4B
   464   00014B                     	ds	8
   465   000153                     main@whiteRGBVal:
   466                           	callstack 0
   467                           
   468                           ; 8 bytes @ 0x53
   469   000153                     	ds	8
   470   00015B                     main@motorRight:
   471                           	callstack 0
   472                           
   473                           ; 9 bytes @ 0x5B
   474   00015B                     	ds	9
   475   000164                     main@motorLeft:
   476                           	callstack 0
   477                           
   478                           ; 9 bytes @ 0x64
   479   000164                     	ds	9
   480                           
   481                           	psect	cstackBANK0
   482   000060                     __pcstackBANK0:
   483                           	callstack 0
   484   000060                     ??_floorf:
   485                           
   486                           ; 1 bytes @ 0x0
   487   000060                     	ds	6
   488   000066                     floorf@m:
   489                           	callstack 0
   490                           
   491                           ; 4 bytes @ 0x6
   492   000066                     	ds	4
   493   00006A                     floorf@e:
   494                           	callstack 0
   495                           
   496                           ; 2 bytes @ 0xA
   497   00006A                     	ds	2
   498   00006C                     floorf@u:
   499                           	callstack 0
   500                           
   501                           ; 4 bytes @ 0xC
   502   00006C                     	ds	4
   503   000070                     efgtoa@fp:
   504                           	callstack 0
   505                           
   506                           ; 2 bytes @ 0x10
   507   000070                     	ds	2
   508   000072                     efgtoa@f:
   509                           	callstack 0
   510                           
   511                           ; 4 bytes @ 0x12
   512   000072                     	ds	4
   513   000076                     efgtoa@c:
   514                           	callstack 0
   515                           
   516                           ; 1 bytes @ 0x16
   517   000076                     	ds	1
   518   000077                     efgtoa@ne:
   519                           	callstack 0
   520                           
   521                           ; 2 bytes @ 0x17
   522   000077                     	ds	2
   523   000079                     efgtoa@p:
   524                           	callstack 0
   525                           
   526                           ; 2 bytes @ 0x19
   527   000079                     	ds	2
   528   00007B                     efgtoa@t:
   529                           	callstack 0
   530                           
   531                           ; 2 bytes @ 0x1B
   532   00007B                     	ds	2
   533   00007D                     _efgtoa$2732:
   534                           	callstack 0
   535                           
   536                           ; 2 bytes @ 0x1D
   537   00007D                     	ds	2
   538   00007F                     efgtoa@pp:
   539                           	callstack 0
   540                           
   541                           ; 1 bytes @ 0x1F
   542   00007F                     	ds	1
   543   000080                     efgtoa@mode:
   544                           	callstack 0
   545                           
   546                           ; 1 bytes @ 0x20
   547   000080                     	ds	1
   548   000081                     efgtoa@nmode:
   549                           	callstack 0
   550                           
   551                           ; 1 bytes @ 0x21
   552   000081                     	ds	1
   553   000082                     efgtoa@d:
   554                           	callstack 0
   555                           
   556                           ; 2 bytes @ 0x22
   557   000082                     	ds	2
   558   000084                     efgtoa@m:
   559                           	callstack 0
   560                           
   561                           ; 2 bytes @ 0x24
   562   000084                     	ds	2
   563   000086                     efgtoa@e:
   564                           	callstack 0
   565                           
   566                           ; 2 bytes @ 0x26
   567   000086                     	ds	2
   568   000088                     efgtoa@w:
   569                           	callstack 0
   570                           
   571                           ; 2 bytes @ 0x28
   572   000088                     	ds	2
   573   00008A                     efgtoa@ou:
   574                           	callstack 0
   575                           
   576                           ; 4 bytes @ 0x2A
   577   00008A                     	ds	4
   578   00008E                     efgtoa@i:
   579                           	callstack 0
   580                           
   581                           ; 2 bytes @ 0x2E
   582   00008E                     	ds	2
   583   000090                     efgtoa@h:
   584                           	callstack 0
   585                           
   586                           ; 4 bytes @ 0x30
   587   000090                     	ds	4
   588   000094                     efgtoa@l:
   589                           	callstack 0
   590                           
   591                           ; 4 bytes @ 0x34
   592   000094                     	ds	4
   593   000098                     efgtoa@sign:
   594                           	callstack 0
   595                           
   596                           ; 1 bytes @ 0x38
   597   000098                     	ds	1
   598   000099                     efgtoa@g:
   599                           	callstack 0
   600                           
   601                           ; 4 bytes @ 0x39
   602   000099                     	ds	4
   603   00009D                     efgtoa@n:
   604                           	callstack 0
   605                           
   606                           ; 2 bytes @ 0x3D
   607   00009D                     	ds	2
   608   00009F                     efgtoa@u:
   609                           	callstack 0
   610                           
   611                           ; 4 bytes @ 0x3F
   612   00009F                     	ds	4
   613   0000A3                     vfpfcnvrt@fp:
   614                           	callstack 0
   615                           
   616                           ; 2 bytes @ 0x43
   617   0000A3                     	ds	2
   618   0000A5                     vfpfcnvrt@fmt:
   619                           	callstack 0
   620                           
   621                           ; 2 bytes @ 0x45
   622   0000A5                     	ds	2
   623   0000A7                     vfpfcnvrt@ap:
   624                           	callstack 0
   625                           
   626                           ; 2 bytes @ 0x47
   627   0000A7                     	ds	2
   628   0000A9                     vfpfcnvrt@convarg:
   629                           	callstack 0
   630                           
   631                           ; 8 bytes @ 0x49
   632   0000A9                     	ds	8
   633   0000B1                     vfpfcnvrt@c:
   634                           	callstack 0
   635                           
   636                           ; 1 bytes @ 0x51
   637   0000B1                     	ds	1
   638   0000B2                     vfpfcnvrt@cp:
   639                           	callstack 0
   640                           
   641                           ; 2 bytes @ 0x52
   642   0000B2                     	ds	2
   643   0000B4                     ?_vfprintf:
   644                           	callstack 0
   645   0000B4                     vfprintf@fp:
   646                           	callstack 0
   647                           
   648                           ; 2 bytes @ 0x54
   649   0000B4                     	ds	2
   650   0000B6                     vfprintf@fmt:
   651                           	callstack 0
   652                           
   653                           ; 2 bytes @ 0x56
   654   0000B6                     	ds	2
   655   0000B8                     vfprintf@ap:
   656                           	callstack 0
   657                           
   658                           ; 2 bytes @ 0x58
   659   0000B8                     	ds	2
   660   0000BA                     vfprintf@cfmt:
   661                           	callstack 0
   662                           
   663                           ; 2 bytes @ 0x5A
   664   0000BA                     	ds	2
   665   0000BC                     ?_sprintf:
   666                           	callstack 0
   667   0000BC                     sprintf@s:
   668                           	callstack 0
   669                           
   670                           ; 2 bytes @ 0x5C
   671   0000BC                     	ds	2
   672   0000BE                     sprintf@fmt:
   673                           	callstack 0
   674                           
   675                           ; 2 bytes @ 0x5E
   676   0000BE                     	ds	14
   677   0000CC                     sprintf@ap:
   678                           	callstack 0
   679                           
   680                           ; 2 bytes @ 0x6C
   681   0000CC                     	ds	2
   682   0000CE                     sprintf@f:
   683                           	callstack 0
   684                           
   685                           ; 11 bytes @ 0x6E
   686   0000CE                     	ds	11
   687   0000D9                     colorDetect@clearRef:
   688                           	callstack 0
   689                           
   690                           ; 4 bytes @ 0x79
   691   0000D9                     	ds	4
   692   0000DD                     colorDetect@ambientRGBVal:
   693                           	callstack 0
   694                           
   695                           ; 2 bytes @ 0x7D
   696   0000DD                     	ds	2
   697   0000DF                     colorDetect@whiteRGBVal:
   698                           	callstack 0
   699                           
   700                           ; 2 bytes @ 0x7F
   701   0000DF                     	ds	2
   702   0000E1                     colorDetect@mL:
   703                           	callstack 0
   704                           
   705                           ; 2 bytes @ 0x81
   706   0000E1                     	ds	2
   707   0000E3                     colorDetect@mR:
   708                           	callstack 0
   709                           
   710                           ; 2 bytes @ 0x83
   711   0000E3                     	ds	2
   712   0000E5                     ??_colorDetect:
   713                           
   714                           ; 1 bytes @ 0x85
   715   0000E5                     	ds	2
   716   0000E7                     ??_main:
   717                           
   718                           ; 1 bytes @ 0x87
   719   0000E7                     	ds	3
   720                           
   721                           	psect	cstackCOMRAM
   722   000001                     __pcstackCOMRAM:
   723                           	callstack 0
   724   000001                     ??_getCharFromTxBuf:
   725   000001                     putCharToRxBuf@byte:
   726                           	callstack 0
   727   000001                     
   728                           ; 1 bytes @ 0x0
   729   000001                     	ds	2
   730   000003                     ??_HighISR:
   731                           
   732                           ; 1 bytes @ 0x2
   733   000003                     	ds	2
   734   000005                     ??_I2C_2_Master_Idle:
   735   000005                     ?___fpclassifyf:
   736                           	callstack 0
   737   000005                     ?___wmul:
   738                           	callstack 0
   739   000005                     ?___fladd:
   740                           	callstack 0
   741   000005                     ?_labs:
   742                           	callstack 0
   743   000005                     ?___flneg:
   744                           	callstack 0
   745   000005                     ?___fltol:
   746                           	callstack 0
   747   000005                     ?___xxtofl:
   748                           	callstack 0
   749   000005                     ?___aodiv:
   750                           	callstack 0
   751   000005                     ?___aomod:
   752                           	callstack 0
   753   000005                     putCharToTxBuf@byte:
   754                           	callstack 0
   755   000005                     initDCmotorsPWM@PWMperiod:
   756                           	callstack 0
   757   000005                     DCmotorsInit@mL:
   758                           	callstack 0
   759   000005                     ___wmul@multiplier:
   760                           	callstack 0
   761   000005                     memcpy@d1:
   762                           	callstack 0
   763   000005                     fputc@c:
   764                           	callstack 0
   765   000005                     strcpy@dest:
   766                           	callstack 0
   767   000005                     ___fleq@ff1:
   768                           	callstack 0
   769   000005                     ___flneg@f1:
   770                           	callstack 0
   771   000005                     ___fltol@f1:
   772                           	callstack 0
   773   000005                     ___fladd@b:
   774                           	callstack 0
   775   000005                     ___xxtofl@val:
   776                           	callstack 0
   777   000005                     ___fpclassifyf@x:
   778                           	callstack 0
   779   000005                     labs@a:
   780                           	callstack 0
   781   000005                     ___aodiv@dividend:
   782                           	callstack 0
   783   000005                     ___aomod@dividend:
   784                           	callstack 0
   785                           
   786                           ; 8 bytes @ 0x4
   787   000005                     	ds	1
   788   000006                     ??_I2C_2_Master_Read:
   789   000006                     I2C_2_Master_Write@data_byte:
   790                           	callstack 0
   791   000006                     TxBufferedString@string:
   792                           	callstack 0
   793                           
   794                           ; 2 bytes @ 0x5
   795   000006                     	ds	1
   796   000007                     color_writetoaddr@value:
   797                           	callstack 0
   798   000007                     I2C_2_Master_Read@ack:
   799                           	callstack 0
   800   000007                     DCmotorsInit@mR:
   801                           	callstack 0
   802   000007                     ___wmul@multiplicand:
   803                           	callstack 0
   804   000007                     memcpy@s1:
   805                           	callstack 0
   806   000007                     fputc@fp:
   807                           	callstack 0
   808   000007                     strcpy@src:
   809                           	callstack 0
   810                           
   811                           ; 2 bytes @ 0x6
   812   000007                     	ds	1
   813   000008                     color_writetoaddr@address:
   814                           	callstack 0
   815   000008                     I2C_2_Master_Read@tmp:
   816                           	callstack 0
   817                           
   818                           ; 1 bytes @ 0x7
   819   000008                     	ds	1
   820   000009                     ??_fputc:
   821   000009                     ??___fpclassifyf:
   822   000009                     ??_labs:
   823   000009                     ??_color_click_init:
   824   000009                     ??___fltol:
   825   000009                     ??___xxtofl:
   826   000009                     ?_color_read_Red:
   827                           	callstack 0
   828   000009                     ?_color_read_Green:
   829                           	callstack 0
   830   000009                     ?_color_read_Blue:
   831                           	callstack 0
   832   000009                     ?_color_read_Clear:
   833                           	callstack 0
   834   000009                     ___wmul@product:
   835                           	callstack 0
   836   000009                     memcpy@n:
   837                           	callstack 0
   838   000009                     strcpy@s:
   839                           	callstack 0
   840   000009                     ___fleq@ff2:
   841                           	callstack 0
   842   000009                     ___fladd@a:
   843                           	callstack 0
   844                           
   845                           ; 4 bytes @ 0x8
   846   000009                     	ds	2
   847   00000B                     ??_color_read_Red:
   848   00000B                     ??_color_read_Green:
   849   00000B                     ??_color_read_Blue:
   850   00000B                     ??_color_read_Clear:
   851   00000B                     ?___lwdiv:
   852                           	callstack 0
   853   00000B                     ___lwdiv@dividend:
   854                           	callstack 0
   855   00000B                     memcpy@d:
   856                           	callstack 0
   857   00000B                     strcpy@d:
   858                           	callstack 0
   859                           
   860                           ; 2 bytes @ 0xA
   861   00000B                     	ds	2
   862   00000D                     ??___fladd:
   863   00000D                     ??___fleq:
   864   00000D                     ___fltol@sign1:
   865                           	callstack 0
   866   00000D                     ___xxtofl@sign:
   867                           	callstack 0
   868   00000D                     ___lwdiv@divisor:
   869                           	callstack 0
   870   00000D                     ___fpclassifyf@e:
   871                           	callstack 0
   872   00000D                     memcpy@s:
   873                           	callstack 0
   874   00000D                     ___aodiv@divisor:
   875                           	callstack 0
   876   00000D                     ___aomod@divisor:
   877                           	callstack 0
   878                           
   879                           ; 8 bytes @ 0xC
   880   00000D                     	ds	1
   881   00000E                     ___fltol@exp1:
   882                           	callstack 0
   883   00000E                     ___xxtofl@exp:
   884                           	callstack 0
   885   00000E                     color_read_Red@tmp:
   886                           	callstack 0
   887   00000E                     color_read_Green@tmp:
   888                           	callstack 0
   889   00000E                     color_read_Blue@tmp:
   890                           	callstack 0
   891   00000E                     color_read_Clear@tmp:
   892                           	callstack 0
   893   00000E                     fputs@s:
   894                           	callstack 0
   895                           
   896                           ; 2 bytes @ 0xD
   897   00000E                     	ds	1
   898   00000F                     memcpy@tmp:
   899                           	callstack 0
   900   00000F                     ___lwdiv@quotient:
   901                           	callstack 0
   902   00000F                     ___xxtofl@arg:
   903                           	callstack 0
   904   00000F                     ___fpclassifyf@u:
   905                           	callstack 0
   906                           
   907                           ; 4 bytes @ 0xE
   908   00000F                     	ds	1
   909   000010                     getColor@v:
   910                           	callstack 0
   911   000010                     fputs@fp:
   912                           	callstack 0
   913                           
   914                           ; 2 bytes @ 0xF
   915   000010                     	ds	1
   916   000011                     ___lwdiv@counter:
   917                           	callstack 0
   918   000011                     ___fladd@signs:
   919                           	callstack 0
   920                           
   921                           ; 1 bytes @ 0x10
   922   000011                     	ds	1
   923   000012                     ___fladd@aexp:
   924                           	callstack 0
   925   000012                     fputs@c:
   926                           	callstack 0
   927   000012                     ambientCal@v:
   928                           	callstack 0
   929   000012                     whiteCal@v:
   930                           	callstack 0
   931   000012                     setMotorPWM@m:
   932                           	callstack 0
   933                           
   934                           ; 2 bytes @ 0x11
   935   000012                     	ds	1
   936   000013                     ___fladd@bexp:
   937                           	callstack 0
   938   000013                     fputs@i:
   939                           	callstack 0
   940                           
   941                           ; 2 bytes @ 0x12
   942   000013                     	ds	1
   943   000014                     ??_ambientCal:
   944   000014                     ??_whiteCal:
   945   000014                     ??_setMotorPWM:
   946   000014                     ___fladd@grs:
   947                           	callstack 0
   948                           
   949                           ; 1 bytes @ 0x13
   950   000014                     	ds	1
   951   000015                     ?___flsub:
   952                           	callstack 0
   953   000015                     ___aodiv@counter:
   954                           	callstack 0
   955   000015                     ___aomod@counter:
   956                           	callstack 0
   957   000015                     pad@fp:
   958                           	callstack 0
   959   000015                     ___flsub@b:
   960                           	callstack 0
   961                           
   962                           ; 4 bytes @ 0x14
   963   000015                     	ds	1
   964   000016                     setMotorPWM@posDuty:
   965                           	callstack 0
   966   000016                     ___aodiv@sign:
   967                           	callstack 0
   968   000016                     ___aomod@sign:
   969                           	callstack 0
   970   000016                     ambientCal@i:
   971                           	callstack 0
   972   000016                     whiteCal@i:
   973                           	callstack 0
   974                           
   975                           ; 2 bytes @ 0x15
   976   000016                     	ds	1
   977   000017                     ?_abs:
   978                           	callstack 0
   979   000017                     setMotorPWM@negDuty:
   980                           	callstack 0
   981   000017                     pad@buf:
   982                           	callstack 0
   983   000017                     abs@a:
   984                           	callstack 0
   985   000017                     ___aodiv@quotient:
   986                           	callstack 0
   987                           
   988                           ; 8 bytes @ 0x16
   989   000017                     	ds	1
   990   000018                     stop@mL:
   991                           	callstack 0
   992   000018                     forward@mL:
   993                           	callstack 0
   994   000018                     reverse@mL:
   995                           	callstack 0
   996                           
   997                           ; 2 bytes @ 0x17
   998   000018                     	ds	1
   999   000019                     ??_abs:
  1000   000019                     pad@p:
  1001                           	callstack 0
  1002   000019                     ___flsub@a:
  1003                           	callstack 0
  1004                           
  1005                           ; 4 bytes @ 0x18
  1006   000019                     	ds	1
  1007   00001A                     stop@mR:
  1008                           	callstack 0
  1009   00001A                     forward@mR:
  1010                           	callstack 0
  1011   00001A                     reverse@mR:
  1012                           	callstack 0
  1013                           
  1014                           ; 2 bytes @ 0x19
  1015   00001A                     	ds	1
  1016   00001B                     ??_pad:
  1017                           
  1018                           ; 1 bytes @ 0x1A
  1019   00001B                     	ds	1
  1020   00001C                     ??_stop:
  1021   00001C                     pad@i:
  1022                           	callstack 0
  1023                           
  1024                           ; 2 bytes @ 0x1B
  1025   00001C                     	ds	1
  1026   00001D                     ?___flmul:
  1027                           	callstack 0
  1028   00001D                     ___flmul@b:
  1029                           	callstack 0
  1030                           
  1031                           ; 4 bytes @ 0x1C
  1032   00001D                     	ds	1
  1033   00001E                     turnRight@mL:
  1034                           	callstack 0
  1035   00001E                     turnLeft_90@mL:
  1036                           	callstack 0
  1037   00001E                     turnRight_90@mL:
  1038                           	callstack 0
  1039   00001E                     turnRight_135@mL:
  1040                           	callstack 0
  1041   00001E                     turnLeft_135@mL:
  1042                           	callstack 0
  1043   00001E                     pad@w:
  1044                           	callstack 0
  1045                           
  1046                           ; 2 bytes @ 0x1D
  1047   00001E                     	ds	2
  1048   000020                     turnRight@mR:
  1049                           	callstack 0
  1050   000020                     turnLeft_90@mR:
  1051                           	callstack 0
  1052   000020                     turnRight_90@mR:
  1053                           	callstack 0
  1054   000020                     turnRight_135@mR:
  1055                           	callstack 0
  1056   000020                     turnLeft_135@mR:
  1057                           	callstack 0
  1058   000020                     dtoa@fp:
  1059                           	callstack 0
  1060                           
  1061                           ; 2 bytes @ 0x1F
  1062   000020                     	ds	1
  1063   000021                     ___flmul@a:
  1064                           	callstack 0
  1065                           
  1066                           ; 4 bytes @ 0x20
  1067   000021                     	ds	1
  1068   000022                     ??_turnRight_90:
  1069   000022                     ??_turnRight_135:
  1070   000022                     ??_turnLeft_90:
  1071   000022                     ??_turnLeft_135:
  1072   000022                     ??_turnRight:
  1073   000022                     dtoa@d:
  1074                           	callstack 0
  1075                           
  1076                           ; 8 bytes @ 0x21
  1077   000022                     	ds	2
  1078   000024                     turn_180@mL:
  1079                           	callstack 0
  1080   000024                     reverseSquareRight@mL:
  1081                           	callstack 0
  1082   000024                     reverseSquareLeft@mL:
  1083                           	callstack 0
  1084                           
  1085                           ; 2 bytes @ 0x23
  1086   000024                     	ds	1
  1087   000025                     ??___flmul:
  1088                           
  1089                           ; 1 bytes @ 0x24
  1090   000025                     	ds	1
  1091   000026                     turn_180@mR:
  1092                           	callstack 0
  1093   000026                     reverseSquareRight@mR:
  1094                           	callstack 0
  1095   000026                     reverseSquareLeft@mR:
  1096                           	callstack 0
  1097                           
  1098                           ; 2 bytes @ 0x25
  1099   000026                     	ds	2
  1100   000028                     ??_reverseSquareRight:
  1101   000028                     ??_reverseSquareLeft:
  1102                           
  1103                           ; 1 bytes @ 0x27
  1104   000028                     	ds	1
  1105   000029                     ___flmul@sign:
  1106                           	callstack 0
  1107                           
  1108                           ; 1 bytes @ 0x28
  1109   000029                     	ds	1
  1110   00002A                     ??_dtoa:
  1111   00002A                     ___flmul@grs:
  1112                           	callstack 0
  1113                           
  1114                           ; 4 bytes @ 0x29
  1115   00002A                     	ds	4
  1116   00002E                     ___flmul@aexp:
  1117                           	callstack 0
  1118                           
  1119                           ; 1 bytes @ 0x2D
  1120   00002E                     	ds	1
  1121   00002F                     ___flmul@bexp:
  1122                           	callstack 0
  1123                           
  1124                           ; 1 bytes @ 0x2E
  1125   00002F                     	ds	1
  1126   000030                     ___flmul@prod:
  1127                           	callstack 0
  1128                           
  1129                           ; 4 bytes @ 0x2F
  1130   000030                     	ds	2
  1131   000032                     _dtoa$2701:
  1132                           	callstack 0
  1133                           
  1134                           ; 2 bytes @ 0x31
  1135   000032                     	ds	2
  1136   000034                     ___flmul@temp:
  1137                           	callstack 0
  1138   000034                     dtoa@p:
  1139                           	callstack 0
  1140                           
  1141                           ; 2 bytes @ 0x33
  1142   000034                     	ds	2
  1143   000036                     ?___fldiv:
  1144                           	callstack 0
  1145   000036                     dtoa@w:
  1146                           	callstack 0
  1147   000036                     ___flge@ff1:
  1148                           	callstack 0
  1149   000036                     ___fldiv@b:
  1150                           	callstack 0
  1151                           
  1152                           ; 4 bytes @ 0x35
  1153   000036                     	ds	2
  1154   000038                     dtoa@n:
  1155                           	callstack 0
  1156                           
  1157                           ; 8 bytes @ 0x37
  1158   000038                     	ds	2
  1159   00003A                     ___flge@ff2:
  1160                           	callstack 0
  1161   00003A                     ___fldiv@a:
  1162                           	callstack 0
  1163                           
  1164                           ; 4 bytes @ 0x39
  1165   00003A                     	ds	4
  1166   00003E                     ??___fldiv:
  1167   00003E                     ??___flge:
  1168                           
  1169                           ; 1 bytes @ 0x3D
  1170   00003E                     	ds	2
  1171   000040                     dtoa@i:
  1172                           	callstack 0
  1173                           
  1174                           ; 2 bytes @ 0x3F
  1175   000040                     	ds	2
  1176   000042                     dtoa@s:
  1177                           	callstack 0
  1178   000042                     ___fldiv@rem:
  1179                           	callstack 0
  1180                           
  1181                           ; 4 bytes @ 0x41
  1182   000042                     	ds	4
  1183   000046                     ___fldiv@sign:
  1184                           	callstack 0
  1185                           
  1186                           ; 1 bytes @ 0x45
  1187   000046                     	ds	1
  1188   000047                     ___fldiv@new_exp:
  1189                           	callstack 0
  1190                           
  1191                           ; 2 bytes @ 0x46
  1192   000047                     	ds	2
  1193   000049                     ___fldiv@grs:
  1194                           	callstack 0
  1195                           
  1196                           ; 4 bytes @ 0x48
  1197   000049                     	ds	4
  1198   00004D                     ___fldiv@bexp:
  1199                           	callstack 0
  1200                           
  1201                           ; 1 bytes @ 0x4C
  1202   00004D                     	ds	1
  1203   00004E                     ___fldiv@aexp:
  1204                           	callstack 0
  1205                           
  1206                           ; 1 bytes @ 0x4D
  1207   00004E                     	ds	1
  1208   00004F                     ?_floorf:
  1209                           	callstack 0
  1210   00004F                     floorf@x:
  1211                           	callstack 0
  1212                           
  1213                           ; 4 bytes @ 0x4E
  1214   00004F                     	ds	4
  1215   000053                     ??_efgtoa:
  1216                           
  1217                           ; 1 bytes @ 0x52
  1218   000053                     	ds	2
  1219   000055                     ??_vfpfcnvrt:
  1220                           
  1221                           ; 1 bytes @ 0x54
  1222   000055                     	ds	2
  1223   000057                     
  1224                           ; 1 bytes @ 0x56
  1225 ;;
  1226 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1227 ;;
  1228 ;; *************** function _main *****************
  1229 ;; Defined at:
  1230 ;;		line 25 in file "MazeRobot.X/main.c"
  1231 ;; Parameters:    Size  Location     Type
  1232 ;;		None
  1233 ;; Auto vars:     Size  Location     Type
  1234 ;;  string5        20    0        unsigned char [20]
  1235 ;;  string4        20    0        unsigned char [20]
  1236 ;;  string3        20    0        unsigned char [20]
  1237 ;;  string2        20    0        unsigned char [20]
  1238 ;;  string1        20    0        unsigned char [20]
  1239 ;;  testString     20    0        unsigned char [20]
  1240 ;;  motorLeft       9  100[BANK1 ] struct DC_motor
  1241 ;;  motorRight      9   91[BANK1 ] struct DC_motor
  1242 ;;  whiteRGBVal     8   83[BANK1 ] struct RGB
  1243 ;;  ambientRGBVa    8   75[BANK1 ] struct RGB
  1244 ;;  RGBVal          8   66[BANK1 ] struct RGB
  1245 ;;  clearRef        4   62[BANK1 ] struct RGB
  1246 ;;  whiteC          4   58[BANK1 ] struct RGB
  1247 ;;  carGo           1   74[BANK1 ] unsigned char 
  1248 ;; Return value:  Size  Location     Type
  1249 ;;                  1    wreg      void 
  1250 ;; Registers used:
  1251 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1252 ;; Tracked objects:
  1253 ;;		On entry : 0/0
  1254 ;;		On exit  : 0/0
  1255 ;;		Unchanged: 0/0
  1256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1258 ;;      Locals:         0       0      51       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1259 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1260 ;;      Totals:         0       3      51       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1261 ;;Total ram usage:       54 bytes
  1262 ;; Hardware stack levels required when called: 11
  1263 ;; This function calls:
  1264 ;;		_DCmotorsInit
  1265 ;;		___fldiv
  1266 ;;		___flge
  1267 ;;		___xxtofl
  1268 ;;		_ambientCal
  1269 ;;		_colorDetect
  1270 ;;		_color_click_init
  1271 ;;		_forward
  1272 ;;		_getColor
  1273 ;;		_initDCmotorsPWM
  1274 ;;		_initUSART4
  1275 ;;		_stop
  1276 ;;		_whiteCal
  1277 ;; This function is called by:
  1278 ;;		Startup code after reset
  1279 ;; This function uses a non-reentrant model
  1280 ;;
  1281                           
  1282                           	psect	text0
  1283   0030D4                     __ptext0:
  1284                           	callstack 0
  1285   0030D4                     _main:
  1286                           	callstack 20
  1287   0030D4                     
  1288                           ;MazeRobot.X/main.c: 27:     color_click_init();
  1289   0030D4  EC89  F02C         	call	_color_click_init	;wreg free
  1290   0030D8                     
  1291                           ;MazeRobot.X/main.c: 28:     initUSART4();
  1292   0030D8  ECBB  F02C         	call	_initUSART4	;wreg free
  1293   0030DC                     
  1294                           ;MazeRobot.X/main.c: 29:     initDCmotorsPWM(199);
  1295   0030DC  0E00               	movlw	0
  1296   0030DE  6E06               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
  1297   0030E0  0EC7               	movlw	199
  1298   0030E2  6E05               	movwf	initDCmotorsPWM@PWMperiod^0,c
  1299   0030E4  EC3E  F029         	call	_initDCmotorsPWM	;wreg free
  1300   0030E8                     
  1301                           ;MazeRobot.X/main.c: 36:     LATDbits.LATD7=0;
  1302   0030E8  9E7C               	bcf	124,7,c	;volatile
  1303   0030EA                     
  1304                           ;MazeRobot.X/main.c: 37:     TRISDbits.TRISD7=0;
  1305   0030EA  9E84               	bcf	132,7,c	;volatile
  1306   0030EC                     
  1307                           ;MazeRobot.X/main.c: 39:     LATHbits.LATH3=0;
  1308   0030EC  9680               	bcf	128,3,c	;volatile
  1309   0030EE                     
  1310                           ;MazeRobot.X/main.c: 40:     TRISHbits.TRISH3=0;
  1311   0030EE  9688               	bcf	136,3,c	;volatile
  1312   0030F0                     
  1313                           ;MazeRobot.X/main.c: 42:     LATDbits.LATD4 = 0;
  1314   0030F0  987C               	bcf	124,4,c	;volatile
  1315   0030F2                     
  1316                           ;MazeRobot.X/main.c: 43:     TRISDbits.TRISD4 = 0;
  1317   0030F2  9884               	bcf	132,4,c	;volatile
  1318   0030F4                     
  1319                           ;MazeRobot.X/main.c: 45:     LATHbits.LATH0 = 0;
  1320   0030F4  9080               	bcf	128,0,c	;volatile
  1321   0030F6                     
  1322                           ;MazeRobot.X/main.c: 46:     TRISHbits.TRISH0 = 0;
  1323   0030F6  9088               	bcf	136,0,c	;volatile
  1324   0030F8                     
  1325                           ;MazeRobot.X/main.c: 48:     LATFbits.LATF0 = 0;
  1326   0030F8  907E               	bcf	126,0,c	;volatile
  1327   0030FA                     
  1328                           ;MazeRobot.X/main.c: 49:     TRISFbits.TRISF0 = 0;
  1329   0030FA  9086               	bcf	134,0,c	;volatile
  1330   0030FC                     
  1331                           ;MazeRobot.X/main.c: 51:     LATHbits.LATH1 = 0;
  1332   0030FC  9280               	bcf	128,1,c	;volatile
  1333   0030FE                     
  1334                           ;MazeRobot.X/main.c: 52:     TRISHbits.TRISH1 = 0;
  1335   0030FE  9288               	bcf	136,1,c	;volatile
  1336   003100                     
  1337                           ;MazeRobot.X/main.c: 54:     LATDbits.LATD3 = 0;
  1338   003100  967C               	bcf	124,3,c	;volatile
  1339   003102                     
  1340                           ;MazeRobot.X/main.c: 55:     TRISDbits.TRISD3 = 0;
  1341   003102  9684               	bcf	132,3,c	;volatile
  1342   003104                     
  1343                           ;MazeRobot.X/main.c: 58:     LATDbits.LATD4 = 1;
  1344   003104  887C               	bsf	124,4,c	;volatile
  1345   003106                     
  1346                           ;MazeRobot.X/main.c: 59:     LATFbits.LATF0 = 1;
  1347   003106  807E               	bsf	126,0,c	;volatile
  1348   003108                     
  1349                           ;MazeRobot.X/main.c: 60:     LATHbits.LATH0 = 1;
  1350   003108  8080               	bsf	128,0,c	;volatile
  1351   00310A                     
  1352                           ;MazeRobot.X/main.c: 61:     LATFbits.LATF0 = 1;
  1353   00310A  807E               	bsf	126,0,c	;volatile
  1354   00310C                     
  1355                           ;MazeRobot.X/main.c: 62:     LATDbits.LATD3 = 1;
  1356   00310C  867C               	bsf	124,3,c	;volatile
  1357   00310E                     
  1358                           ;MazeRobot.X/main.c: 67:     LATGbits.LATG0=1;
  1359   00310E  807F               	bsf	127,0,c	;volatile
  1360   003110                     
  1361                           ;MazeRobot.X/main.c: 68:     LATEbits.LATE7=1;
  1362   003110  8E7D               	bsf	125,7,c	;volatile
  1363   003112                     
  1364                           ;MazeRobot.X/main.c: 69:     LATAbits.LATA3=1;
  1365   003112  8679               	bsf	121,3,c	;volatile
  1366   003114                     
  1367                           ;MazeRobot.X/main.c: 71:     TRISGbits.TRISG0=0;
  1368   003114  9087               	bcf	135,0,c	;volatile
  1369   003116                     
  1370                           ;MazeRobot.X/main.c: 72:     TRISEbits.TRISE7=0;
  1371   003116  9E85               	bcf	133,7,c	;volatile
  1372   003118                     
  1373                           ;MazeRobot.X/main.c: 73:     TRISAbits.TRISA3=0;
  1374   003118  9681               	bcf	129,3,c	;volatile
  1375   00311A                     
  1376                           ;MazeRobot.X/main.c: 76:     TRISFbits.TRISF2=1;
  1377   00311A  8486               	bsf	134,2,c	;volatile
  1378   00311C                     
  1379                           ;MazeRobot.X/main.c: 77:     ANSELFbits.ANSELF2=0;
  1380   00311C  010E               	movlb	14	; () banked
  1381   00311E  95B4               	bcf	180,2,b	;volatile
  1382   003120                     
  1383                           ; BSR set to: 14
  1384                           ;MazeRobot.X/main.c: 79:     TRISFbits.TRISF3=1;
  1385   003120  8686               	bsf	134,3,c	;volatile
  1386   003122                     
  1387                           ; BSR set to: 14
  1388                           ;MazeRobot.X/main.c: 80:     ANSELFbits.ANSELF3=0;
  1389   003122  97B4               	bcf	180,3,b	;volatile
  1390   003124                     
  1391                           ; BSR set to: 14
  1392                           ;MazeRobot.X/main.c: 95:     unsigned char carGo = 0;
  1393   003124  0E00               	movlw	0
  1394   003126  0101               	movlb	1	; () banked
  1395   003128  6F4A               	movwf	main@carGo& (0+255),b
  1396   00312A                     
  1397                           ; BSR set to: 1
  1398                           ;MazeRobot.X/main.c: 97:     DC_motor motorLeft,motorRight;;MazeRobot.X/main.c: 98:     
      +                          DCmotorsInit(&motorLeft,&motorRight);
  1399   00312A  0E64               	movlw	low main@motorLeft
  1400   00312C  6E05               	movwf	DCmotorsInit@mL^0,c
  1401   00312E  0E01               	movlw	high main@motorLeft
  1402   003130  6E06               	movwf	(DCmotorsInit@mL+1)^0,c
  1403   003132  0E5B               	movlw	low main@motorRight
  1404   003134  6E07               	movwf	DCmotorsInit@mR^0,c
  1405   003136  0E01               	movlw	high main@motorRight
  1406   003138  6E08               	movwf	(DCmotorsInit@mR+1)^0,c
  1407   00313A  EC2E  F027         	call	_DCmotorsInit	;wreg free
  1408   00313E                     
  1409                           ;MazeRobot.X/main.c: 118:     ambientCal (&ambientRGBVal);
  1410   00313E  0E4B               	movlw	low main@ambientRGBVal
  1411   003140  6E12               	movwf	ambientCal@v^0,c
  1412   003142  0E01               	movlw	high main@ambientRGBVal
  1413   003144  6E13               	movwf	(ambientCal@v+1)^0,c
  1414   003146  ECE6  F025         	call	_ambientCal	;wreg free
  1415   00314A                     l6154:
  1416                           
  1417                           ;MazeRobot.X/main.c: 121:         getColor(&RGBVal);
  1418   00314A  0E42               	movlw	low main@RGBVal
  1419   00314C  6E10               	movwf	getColor@v^0,c
  1420   00314E  0E01               	movlw	high main@RGBVal
  1421   003150  6E11               	movwf	(getColor@v+1)^0,c
  1422   003152  EC30  F02A         	call	_getColor	;wreg free
  1423   003156                     
  1424                           ;MazeRobot.X/main.c: 123:         if(!PORTFbits.RF2 & !PORTFbits.RF3){
  1425   003156  A68E               	btfss	142,3,c	;volatile
  1426   003158  EFB0  F018         	goto	u6951
  1427   00315C  EFB3  F018         	goto	u6950
  1428   003160                     u6951:
  1429   003160  0E01               	movlw	1
  1430   003162  EFB4  F018         	goto	u6952
  1431   003166                     u6950:
  1432   003166  0E00               	movlw	0
  1433   003168                     u6952:
  1434   003168  0100               	movlb	0	; () banked
  1435   00316A  6FE7               	movwf	??_main& (0+255),b
  1436   00316C  A48E               	btfss	142,2,c	;volatile
  1437   00316E  EFBB  F018         	goto	u6961
  1438   003172  EFBE  F018         	goto	u6960
  1439   003176                     u6961:
  1440   003176  0E01               	movlw	1
  1441   003178  EFBF  F018         	goto	u6962
  1442   00317C                     u6960:
  1443   00317C  0E00               	movlw	0
  1444   00317E                     u6962:
  1445   00317E  15E7               	andwf	??_main& (0+255),w,b
  1446   003180  A0E8               	btfss	wreg,0,c
  1447   003182  EFC5  F018         	goto	u6971
  1448   003186  EFC7  F018         	goto	u6970
  1449   00318A                     u6971:
  1450   00318A  EFE4  F018         	goto	l6168
  1451   00318E                     u6970:
  1452   00318E                     
  1453                           ; BSR set to: 0
  1454                           ;MazeRobot.X/main.c: 124:             LATDbits.LATD7 = 1 , LATHbits.LATH3 = 1;
  1455   00318E  8E7C               	bsf	124,7,c	;volatile
  1456   003190  8680               	bsf	128,3,c	;volatile
  1457   003192                     
  1458                           ; BSR set to: 0
  1459                           ;MazeRobot.X/main.c: 125:             _delay((unsigned long)((1000)*(64000000/4000.0)));
  1460   003192  0E52               	movlw	82
  1461   003194  0100               	movlb	0	; () banked
  1462   003196  6FE8               	movwf	(??_main+1)& (0+255),b
  1463   003198  0E2B               	movlw	43
  1464   00319A  6FE7               	movwf	??_main& (0+255),b
  1465   00319C  0E00               	movlw	0
  1466   00319E                     u7147:
  1467   00319E  2EE8               	decfsz	wreg,f,c
  1468   0031A0  D7FE               	bra	u7147
  1469   0031A2  2FE7               	decfsz	??_main& (0+255),f,b
  1470   0031A4  D7FC               	bra	u7147
  1471   0031A6  2FE8               	decfsz	(??_main+1)& (0+255),f,b
  1472   0031A8  D7FA               	bra	u7147
  1473   0031AA  F000               	nop	
  1474   0031AC                     
  1475                           ;MazeRobot.X/main.c: 126:             LATDbits.LATD7 = 0 , LATHbits.LATH3 = 0;
  1476   0031AC  9E7C               	bcf	124,7,c	;volatile
  1477   0031AE  9680               	bcf	128,3,c	;volatile
  1478   0031B0                     
  1479                           ;MazeRobot.X/main.c: 127:             carGo = !carGo;}
  1480   0031B0  0101               	movlb	1	; () banked
  1481   0031B2  514A               	movf	main@carGo& (0+255),w,b
  1482   0031B4  B4D8               	btfsc	status,2,c
  1483   0031B6  EFDF  F018         	goto	u6981
  1484   0031BA  EFE2  F018         	goto	u6980
  1485   0031BE                     u6981:
  1486   0031BE  0E01               	movlw	1
  1487   0031C0  EFE3  F018         	goto	u6990
  1488   0031C4                     u6980:
  1489   0031C4  0E00               	movlw	0
  1490   0031C6                     u6990:
  1491   0031C6  6F4A               	movwf	main@carGo& (0+255),b
  1492   0031C8                     l6168:
  1493                           
  1494                           ;MazeRobot.X/main.c: 130:         if (!PORTFbits.RF2 & PORTFbits.RF3){
  1495   0031C8  A48E               	btfss	142,2,c	;volatile
  1496   0031CA  EFE9  F018         	goto	u7001
  1497   0031CE  EFEC  F018         	goto	u7000
  1498   0031D2                     u7001:
  1499   0031D2  0E01               	movlw	1
  1500   0031D4  EFED  F018         	goto	u7010
  1501   0031D8                     u7000:
  1502   0031D8  0E00               	movlw	0
  1503   0031DA                     u7010:
  1504   0031DA  0100               	movlb	0	; () banked
  1505   0031DC  6FE7               	movwf	??_main& (0+255),b
  1506   0031DE  6BE8               	clrf	(??_main+1)& (0+255),b
  1507   0031E0  B68E               	btfsc	142,3,c	;volatile
  1508   0031E2  EFF5  F018         	goto	u7021
  1509   0031E6  EFF9  F018         	goto	u7020
  1510   0031EA                     u7021:
  1511   0031EA  6BE9               	clrf	(??_main+2)& (0+255),b
  1512   0031EC  2BE9               	incf	(??_main+2)& (0+255),f,b
  1513   0031EE  EFFB  F018         	goto	u7028
  1514   0031F2                     u7020:
  1515   0031F2  0100               	movlb	0	; () banked
  1516   0031F4  6BE9               	clrf	(??_main+2)& (0+255),b
  1517   0031F6                     u7028:
  1518   0031F6  51E9               	movf	(??_main+2)& (0+255),w,b
  1519   0031F8  17E7               	andwf	??_main& (0+255),f,b
  1520   0031FA  0E00               	movlw	0
  1521   0031FC  17E8               	andwf	(??_main+1)& (0+255),f,b
  1522   0031FE  51E7               	movf	??_main& (0+255),w,b
  1523   003200  11E8               	iorwf	(??_main+1)& (0+255),w,b
  1524   003202  B4D8               	btfsc	status,2,c
  1525   003204  EF06  F019         	goto	u7031
  1526   003208  EF08  F019         	goto	u7030
  1527   00320C                     u7031:
  1528   00320C  EF0E  F019         	goto	l6172
  1529   003210                     u7030:
  1530   003210                     
  1531                           ; BSR set to: 0
  1532                           ;MazeRobot.X/main.c: 131:             ambientCal (&ambientRGBVal);
  1533   003210  0E4B               	movlw	low main@ambientRGBVal
  1534   003212  6E12               	movwf	ambientCal@v^0,c
  1535   003214  0E01               	movlw	high main@ambientRGBVal
  1536   003216  6E13               	movwf	(ambientCal@v+1)^0,c
  1537   003218  ECE6  F025         	call	_ambientCal	;wreg free
  1538   00321C                     l6172:
  1539                           
  1540                           ;MazeRobot.X/main.c: 134:         if (!PORTFbits.RF3 & PORTFbits.RF2){
  1541   00321C  A68E               	btfss	142,3,c	;volatile
  1542   00321E  EF13  F019         	goto	u7041
  1543   003222  EF16  F019         	goto	u7040
  1544   003226                     u7041:
  1545   003226  0E01               	movlw	1
  1546   003228  EF17  F019         	goto	u7050
  1547   00322C                     u7040:
  1548   00322C  0E00               	movlw	0
  1549   00322E                     u7050:
  1550   00322E  0100               	movlb	0	; () banked
  1551   003230  6FE7               	movwf	??_main& (0+255),b
  1552   003232  6BE8               	clrf	(??_main+1)& (0+255),b
  1553   003234  B48E               	btfsc	142,2,c	;volatile
  1554   003236  EF1F  F019         	goto	u7061
  1555   00323A  EF23  F019         	goto	u7060
  1556   00323E                     u7061:
  1557   00323E  6BE9               	clrf	(??_main+2)& (0+255),b
  1558   003240  2BE9               	incf	(??_main+2)& (0+255),f,b
  1559   003242  EF25  F019         	goto	u7068
  1560   003246                     u7060:
  1561   003246  0100               	movlb	0	; () banked
  1562   003248  6BE9               	clrf	(??_main+2)& (0+255),b
  1563   00324A                     u7068:
  1564   00324A  51E9               	movf	(??_main+2)& (0+255),w,b
  1565   00324C  17E7               	andwf	??_main& (0+255),f,b
  1566   00324E  0E00               	movlw	0
  1567   003250  17E8               	andwf	(??_main+1)& (0+255),f,b
  1568   003252  51E7               	movf	??_main& (0+255),w,b
  1569   003254  11E8               	iorwf	(??_main+1)& (0+255),w,b
  1570   003256  B4D8               	btfsc	status,2,c
  1571   003258  EF30  F019         	goto	u7071
  1572   00325C  EF32  F019         	goto	u7070
  1573   003260                     u7071:
  1574   003260  EF38  F019         	goto	l6176
  1575   003264                     u7070:
  1576   003264                     
  1577                           ; BSR set to: 0
  1578                           ;MazeRobot.X/main.c: 135:             whiteCal (&whiteRGBVal);
  1579   003264  0E53               	movlw	low main@whiteRGBVal
  1580   003266  6E12               	movwf	whiteCal@v^0,c
  1581   003268  0E01               	movlw	high main@whiteRGBVal
  1582   00326A  6E13               	movwf	(whiteCal@v+1)^0,c
  1583   00326C  EC74  F025         	call	_whiteCal	;wreg free
  1584   003270                     l6176:
  1585                           
  1586                           ;MazeRobot.X/main.c: 138:         LATHbits.LATH3=!LATHbits.LATH3;
  1587   003270  A680               	btfss	128,3,c	;volatile
  1588   003272  EF3D  F019         	goto	u7081
  1589   003276  EF42  F019         	goto	u7080
  1590   00327A                     u7081:
  1591   00327A  0100               	movlb	0	; () banked
  1592   00327C  6BE7               	clrf	??_main& (0+255),b
  1593   00327E  2BE7               	incf	??_main& (0+255),f,b
  1594   003280  EF44  F019         	goto	u7098
  1595   003284                     u7080:
  1596   003284  0100               	movlb	0	; () banked
  1597   003286  6BE7               	clrf	??_main& (0+255),b
  1598   003288                     u7098:
  1599   003288  47E7               	rlncf	??_main& (0+255),f,b
  1600   00328A  47E7               	rlncf	??_main& (0+255),f,b
  1601   00328C  47E7               	rlncf	??_main& (0+255),f,b
  1602   00328E  5080               	movf	128,w,c	;volatile
  1603   003290  19E7               	xorwf	??_main& (0+255),w,b
  1604   003292  0BF7               	andlw	-9
  1605   003294  19E7               	xorwf	??_main& (0+255),w,b
  1606   003296  6E80               	movwf	128,c	;volatile
  1607   003298                     
  1608                           ; BSR set to: 0
  1609                           ;MazeRobot.X/main.c: 141:         whiteC = whiteRGBVal.C;
  1610   003298  C159  F005         	movff	main@whiteRGBVal+6,___xxtofl@val
  1611   00329C  C15A  F006         	movff	main@whiteRGBVal+7,___xxtofl@val+1
  1612   0032A0  6A07               	clrf	(___xxtofl@val+2)^0,c
  1613   0032A2  6A08               	clrf	(___xxtofl@val+3)^0,c
  1614   0032A4  0E00               	movlw	0
  1615   0032A6  ECD0  F01D         	call	___xxtofl
  1616   0032AA  C005  F13A         	movff	?___xxtofl,main@whiteC
  1617   0032AE  C006  F13B         	movff	?___xxtofl+1,main@whiteC+1
  1618   0032B2  C007  F13C         	movff	?___xxtofl+2,main@whiteC+2
  1619   0032B6  C008  F13D         	movff	?___xxtofl+3,main@whiteC+3
  1620   0032BA                     
  1621                           ;MazeRobot.X/main.c: 142:         clearRef = RGBVal.C/whiteC;
  1622   0032BA  C148  F005         	movff	main@RGBVal+6,___xxtofl@val
  1623   0032BE  C149  F006         	movff	main@RGBVal+7,___xxtofl@val+1
  1624   0032C2  6A07               	clrf	(___xxtofl@val+2)^0,c
  1625   0032C4  6A08               	clrf	(___xxtofl@val+3)^0,c
  1626   0032C6  0E00               	movlw	0
  1627   0032C8  ECD0  F01D         	call	___xxtofl
  1628   0032CC  C005  F036         	movff	?___xxtofl,___fldiv@b
  1629   0032D0  C006  F037         	movff	?___xxtofl+1,___fldiv@b+1
  1630   0032D4  C007  F038         	movff	?___xxtofl+2,___fldiv@b+2
  1631   0032D8  C008  F039         	movff	?___xxtofl+3,___fldiv@b+3
  1632   0032DC  C13A  F03A         	movff	main@whiteC,___fldiv@a
  1633   0032E0  C13B  F03B         	movff	main@whiteC+1,___fldiv@a+1
  1634   0032E4  C13C  F03C         	movff	main@whiteC+2,___fldiv@a+2
  1635   0032E8  C13D  F03D         	movff	main@whiteC+3,___fldiv@a+3
  1636   0032EC  EC9D  F016         	call	___fldiv	;wreg free
  1637   0032F0  C036  F13E         	movff	?___fldiv,main@clearRef
  1638   0032F4  C037  F13F         	movff	?___fldiv+1,main@clearRef+1
  1639   0032F8  C038  F140         	movff	?___fldiv+2,main@clearRef+2
  1640   0032FC  C039  F141         	movff	?___fldiv+3,main@clearRef+3
  1641   003300                     
  1642                           ;MazeRobot.X/main.c: 144:         if ((clearRef > 0.12) & carGo){
  1643   003300  0E8F               	movlw	143
  1644   003302  6E36               	movwf	___flge@ff1^0,c
  1645   003304  0EC2               	movlw	194
  1646   003306  6E37               	movwf	(___flge@ff1+1)^0,c
  1647   003308  0EF5               	movlw	245
  1648   00330A  6E38               	movwf	(___flge@ff1+2)^0,c
  1649   00330C  0E3D               	movlw	61
  1650   00330E  6E39               	movwf	(___flge@ff1+3)^0,c
  1651   003310  C13E  F03A         	movff	main@clearRef,___flge@ff2
  1652   003314  C13F  F03B         	movff	main@clearRef+1,___flge@ff2+1
  1653   003318  C140  F03C         	movff	main@clearRef+2,___flge@ff2+2
  1654   00331C  C141  F03D         	movff	main@clearRef+3,___flge@ff2+3
  1655   003320  EC73  F024         	call	___flge	;wreg free
  1656   003324  A0D8               	btfss	status,0,c
  1657   003326  EF97  F019         	goto	u7101
  1658   00332A  EF9A  F019         	goto	u7100
  1659   00332E                     u7101:
  1660   00332E  0E01               	movlw	1
  1661   003330  EF9B  F019         	goto	u7110
  1662   003334                     u7100:
  1663   003334  0E00               	movlw	0
  1664   003336                     u7110:
  1665   003336  0100               	movlb	0	; () banked
  1666   003338  6FE7               	movwf	??_main& (0+255),b
  1667   00333A  6BE8               	clrf	(??_main+1)& (0+255),b
  1668   00333C  0101               	movlb	1	; () banked
  1669   00333E  514A               	movf	main@carGo& (0+255),w,b
  1670   003340  0100               	movlb	0	; () banked
  1671   003342  17E7               	andwf	??_main& (0+255),f,b
  1672   003344  0E00               	movlw	0
  1673   003346  17E8               	andwf	(??_main+1)& (0+255),f,b
  1674   003348  51E7               	movf	??_main& (0+255),w,b
  1675   00334A  11E8               	iorwf	(??_main+1)& (0+255),w,b
  1676   00334C  B4D8               	btfsc	status,2,c
  1677   00334E  EFAB  F019         	goto	u7121
  1678   003352  EFAD  F019         	goto	u7120
  1679   003356                     u7121:
  1680   003356  EFD3  F019         	goto	l6188
  1681   00335A                     u7120:
  1682   00335A                     
  1683                           ; BSR set to: 0
  1684                           ;MazeRobot.X/main.c: 145:             colorDetect (clearRef,&ambientRGBVal,&whiteRGBVal,
      +                          &motorLeft,&motorRight);
  1685   00335A  C13E  F0D9         	movff	main@clearRef,colorDetect@clearRef
  1686   00335E  C13F  F0DA         	movff	main@clearRef+1,colorDetect@clearRef+1
  1687   003362  C140  F0DB         	movff	main@clearRef+2,colorDetect@clearRef+2
  1688   003366  C141  F0DC         	movff	main@clearRef+3,colorDetect@clearRef+3
  1689   00336A  0E4B               	movlw	low main@ambientRGBVal
  1690   00336C  6FDD               	movwf	colorDetect@ambientRGBVal& (0+255),b
  1691   00336E  0E01               	movlw	high main@ambientRGBVal
  1692   003370  6FDE               	movwf	(colorDetect@ambientRGBVal+1)& (0+255),b
  1693   003372  0E53               	movlw	low main@whiteRGBVal
  1694   003374  6FDF               	movwf	colorDetect@whiteRGBVal& (0+255),b
  1695   003376  0E01               	movlw	high main@whiteRGBVal
  1696   003378  6FE0               	movwf	(colorDetect@whiteRGBVal+1)& (0+255),b
  1697   00337A  0E64               	movlw	low main@motorLeft
  1698   00337C  6FE1               	movwf	colorDetect@mL& (0+255),b
  1699   00337E  0E01               	movlw	high main@motorLeft
  1700   003380  6FE2               	movwf	(colorDetect@mL+1)& (0+255),b
  1701   003382  0E5B               	movlw	low main@motorRight
  1702   003384  6FE3               	movwf	colorDetect@mR& (0+255),b
  1703   003386  0E01               	movlw	high main@motorRight
  1704   003388  6FE4               	movwf	(colorDetect@mR+1)& (0+255),b
  1705   00338A  EC16  F007         	call	_colorDetect	;wreg free
  1706   00338E                     
  1707                           ;MazeRobot.X/main.c: 147:             _delay((unsigned long)((500)*(64000000/4000.0)));
  1708   00338E  0E29               	movlw	41
  1709   003390  0100               	movlb	0	; () banked
  1710   003392  6FE8               	movwf	(??_main+1)& (0+255),b
  1711   003394  0E96               	movlw	150
  1712   003396  6FE7               	movwf	??_main& (0+255),b
  1713   003398  0E7F               	movlw	127
  1714   00339A                     u7157:
  1715   00339A  2EE8               	decfsz	wreg,f,c
  1716   00339C  D7FE               	bra	u7157
  1717   00339E  2FE7               	decfsz	??_main& (0+255),f,b
  1718   0033A0  D7FC               	bra	u7157
  1719   0033A2  2FE8               	decfsz	(??_main+1)& (0+255),f,b
  1720   0033A4  D7FA               	bra	u7157
  1721   0033A6                     l6188:
  1722                           
  1723                           ;MazeRobot.X/main.c: 150:         if (carGo){forward(&motorLeft,&motorRight);}
  1724   0033A6  0101               	movlb	1	; () banked
  1725   0033A8  514A               	movf	main@carGo& (0+255),w,b
  1726   0033AA  B4D8               	btfsc	status,2,c
  1727   0033AC  EFDA  F019         	goto	u7131
  1728   0033B0  EFDC  F019         	goto	u7130
  1729   0033B4                     u7131:
  1730   0033B4  EFE8  F019         	goto	l6192
  1731   0033B8                     u7130:
  1732   0033B8                     
  1733                           ; BSR set to: 1
  1734   0033B8  0E64               	movlw	low main@motorLeft
  1735   0033BA  6E18               	movwf	forward@mL^0,c
  1736   0033BC  0E01               	movlw	high main@motorLeft
  1737   0033BE  6E19               	movwf	(forward@mL+1)^0,c
  1738   0033C0  0E5B               	movlw	low main@motorRight
  1739   0033C2  6E1A               	movwf	forward@mR^0,c
  1740   0033C4  0E01               	movlw	high main@motorRight
  1741   0033C6  6E1B               	movwf	(forward@mR+1)^0,c
  1742   0033C8  EC58  F026         	call	_forward	;wreg free
  1743   0033CC  EFF2  F019         	goto	l6194
  1744   0033D0                     l6192:
  1745                           
  1746                           ; BSR set to: 1
  1747   0033D0  0E64               	movlw	low main@motorLeft
  1748   0033D2  6E18               	movwf	stop@mL^0,c
  1749   0033D4  0E01               	movlw	high main@motorLeft
  1750   0033D6  6E19               	movwf	(stop@mL+1)^0,c
  1751   0033D8  0E5B               	movlw	low main@motorRight
  1752   0033DA  6E1A               	movwf	stop@mR^0,c
  1753   0033DC  0E01               	movlw	high main@motorRight
  1754   0033DE  6E1B               	movwf	(stop@mR+1)^0,c
  1755   0033E0  ECFC  F027         	call	_stop	;wreg free
  1756   0033E4                     l6194:
  1757                           
  1758                           ;MazeRobot.X/main.c: 154:         _delay((unsigned long)((100)*(64000000/4000.0)));
  1759   0033E4  0E09               	movlw	9
  1760   0033E6  0100               	movlb	0	; () banked
  1761   0033E8  6FE8               	movwf	(??_main+1)& (0+255),b
  1762   0033EA  0E1E               	movlw	30
  1763   0033EC  6FE7               	movwf	??_main& (0+255),b
  1764   0033EE  0EE4               	movlw	228
  1765   0033F0                     u7167:
  1766   0033F0  2EE8               	decfsz	wreg,f,c
  1767   0033F2  D7FE               	bra	u7167
  1768   0033F4  2FE7               	decfsz	??_main& (0+255),f,b
  1769   0033F6  D7FC               	bra	u7167
  1770   0033F8  2FE8               	decfsz	(??_main+1)& (0+255),f,b
  1771   0033FA  D7FA               	bra	u7167
  1772   0033FC  F000               	nop	
  1773   0033FE  EFA5  F018         	goto	l6154
  1774   003402  EF3B  F000         	goto	start
  1775   003406                     __end_of_main:
  1776                           	callstack 0
  1777                           
  1778 ;; *************** function _whiteCal *****************
  1779 ;; Defined at:
  1780 ;;		line 115 in file "MazeRobot.X/color.c"
  1781 ;; Parameters:    Size  Location     Type
  1782 ;;  v               2   17[COMRAM] PTR struct RGB
  1783 ;;		 -> main@whiteRGBVal(8), 
  1784 ;; Auto vars:     Size  Location     Type
  1785 ;;  i               2   21[COMRAM] int 
  1786 ;; Return value:  Size  Location     Type
  1787 ;;                  1    wreg      void 
  1788 ;; Registers used:
  1789 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1790 ;; Tracked objects:
  1791 ;;		On entry : 0/0
  1792 ;;		On exit  : 0/0
  1793 ;;		Unchanged: 0/0
  1794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1795 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1796 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1797 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1798 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1799 ;;Total ram usage:        6 bytes
  1800 ;; Hardware stack levels used: 1
  1801 ;; Hardware stack levels required when called: 6
  1802 ;; This function calls:
  1803 ;;		_getColor
  1804 ;; This function is called by:
  1805 ;;		_main
  1806 ;; This function uses a non-reentrant model
  1807 ;;
  1808                           
  1809                           	psect	text1
  1810   004AE8                     __ptext1:
  1811                           	callstack 0
  1812   004AE8                     _whiteCal:
  1813                           	callstack 24
  1814   004AE8                     
  1815                           ;MazeRobot.X/color.c: 117:     for(int i = 0;i<20;i++){
  1816   004AE8  0E00               	movlw	0
  1817   004AEA  6E17               	movwf	(whiteCal@i+1)^0,c
  1818   004AEC  0E00               	movlw	0
  1819   004AEE  6E16               	movwf	whiteCal@i^0,c
  1820   004AF0                     l5078:
  1821                           
  1822                           ;MazeRobot.X/color.c: 118:             LATDbits.LATD7 = !LATDbits.LATD7;
  1823   004AF0  AE7C               	btfss	124,7,c	;volatile
  1824   004AF2  EF7D  F025         	goto	u5451
  1825   004AF6  EF81  F025         	goto	u5450
  1826   004AFA                     u5451:
  1827   004AFA  6A14               	clrf	??_whiteCal^0,c
  1828   004AFC  2A14               	incf	??_whiteCal^0,f,c
  1829   004AFE  EF82  F025         	goto	u5468
  1830   004B02                     u5450:
  1831   004B02  6A14               	clrf	??_whiteCal^0,c
  1832   004B04                     u5468:
  1833   004B04  3214               	rrcf	??_whiteCal^0,f,c
  1834   004B06  3214               	rrcf	??_whiteCal^0,f,c
  1835   004B08  507C               	movf	124,w,c	;volatile
  1836   004B0A  1814               	xorwf	??_whiteCal^0,w,c
  1837   004B0C  0B7F               	andlw	-129
  1838   004B0E  1814               	xorwf	??_whiteCal^0,w,c
  1839   004B10  6E7C               	movwf	124,c	;volatile
  1840   004B12                     
  1841                           ;MazeRobot.X/color.c: 119:             _delay((unsigned long)((100)*(64000000/4000.0)));
  1842   004B12  0E09               	movlw	9
  1843   004B14  6E15               	movwf	(??_whiteCal+1)^0,c
  1844   004B16  0E1E               	movlw	30
  1845   004B18  6E14               	movwf	??_whiteCal^0,c
  1846   004B1A  0EE4               	movlw	228
  1847   004B1C                     u7177:
  1848   004B1C  2EE8               	decfsz	wreg,f,c
  1849   004B1E  D7FE               	bra	u7177
  1850   004B20  2E14               	decfsz	??_whiteCal^0,f,c
  1851   004B22  D7FC               	bra	u7177
  1852   004B24  2E15               	decfsz	(??_whiteCal+1)^0,f,c
  1853   004B26  D7FA               	bra	u7177
  1854   004B28  D000               	nop2	
  1855                           
  1856                           ;MazeRobot.X/color.c: 120:             }
  1857   004B2A  4A16               	infsnz	whiteCal@i^0,f,c
  1858   004B2C  2A17               	incf	(whiteCal@i+1)^0,f,c
  1859   004B2E  BE17               	btfsc	(whiteCal@i+1)^0,7,c
  1860   004B30  EFA3  F025         	goto	u5471
  1861   004B34  5017               	movf	(whiteCal@i+1)^0,w,c
  1862   004B36  E109               	bnz	u5470
  1863   004B38  0E14               	movlw	20
  1864   004B3A  5C16               	subwf	whiteCal@i^0,w,c
  1865   004B3C  A0D8               	btfss	status,0,c
  1866   004B3E  EFA3  F025         	goto	u5471
  1867   004B42  EFA5  F025         	goto	u5470
  1868   004B46                     u5471:
  1869   004B46  EF78  F025         	goto	l5078
  1870   004B4A                     u5470:
  1871   004B4A                     
  1872                           ;MazeRobot.X/color.c: 121:             LATDbits.LATD7 = !LATDbits.LATD7;
  1873   004B4A  AE7C               	btfss	124,7,c	;volatile
  1874   004B4C  EFAA  F025         	goto	u5481
  1875   004B50  EFAE  F025         	goto	u5480
  1876   004B54                     u5481:
  1877   004B54  6A14               	clrf	??_whiteCal^0,c
  1878   004B56  2A14               	incf	??_whiteCal^0,f,c
  1879   004B58  EFAF  F025         	goto	u5498
  1880   004B5C                     u5480:
  1881   004B5C  6A14               	clrf	??_whiteCal^0,c
  1882   004B5E                     u5498:
  1883   004B5E  3214               	rrcf	??_whiteCal^0,f,c
  1884   004B60  3214               	rrcf	??_whiteCal^0,f,c
  1885   004B62  507C               	movf	124,w,c	;volatile
  1886   004B64  1814               	xorwf	??_whiteCal^0,w,c
  1887   004B66  0B7F               	andlw	-129
  1888   004B68  1814               	xorwf	??_whiteCal^0,w,c
  1889   004B6A  6E7C               	movwf	124,c	;volatile
  1890   004B6C                     
  1891                           ;MazeRobot.X/color.c: 122:             _delay((unsigned long)((500)*(64000000/4000.0)));
  1892   004B6C  0E29               	movlw	41
  1893   004B6E  6E15               	movwf	(??_whiteCal+1)^0,c
  1894   004B70  0E96               	movlw	150
  1895   004B72  6E14               	movwf	??_whiteCal^0,c
  1896   004B74  0E7F               	movlw	127
  1897   004B76                     u7187:
  1898   004B76  2EE8               	decfsz	wreg,f,c
  1899   004B78  D7FE               	bra	u7187
  1900   004B7A  2E14               	decfsz	??_whiteCal^0,f,c
  1901   004B7C  D7FC               	bra	u7187
  1902   004B7E  2E15               	decfsz	(??_whiteCal+1)^0,f,c
  1903   004B80  D7FA               	bra	u7187
  1904   004B82  F000               	nop	
  1905   004B84                     
  1906                           ;MazeRobot.X/color.c: 123:             getColor(v);
  1907   004B84  C012  F010         	movff	whiteCal@v,getColor@v
  1908   004B88  C013  F011         	movff	whiteCal@v+1,getColor@v+1
  1909   004B8C  EC30  F02A         	call	_getColor	;wreg free
  1910   004B90                     
  1911                           ;MazeRobot.X/color.c: 124:             _delay((unsigned long)((500)*(64000000/4000.0)));
  1912   004B90  0E29               	movlw	41
  1913   004B92  6E15               	movwf	(??_whiteCal+1)^0,c
  1914   004B94  0E96               	movlw	150
  1915   004B96  6E14               	movwf	??_whiteCal^0,c
  1916   004B98  0E7F               	movlw	127
  1917   004B9A                     u7197:
  1918   004B9A  2EE8               	decfsz	wreg,f,c
  1919   004B9C  D7FE               	bra	u7197
  1920   004B9E  2E14               	decfsz	??_whiteCal^0,f,c
  1921   004BA0  D7FC               	bra	u7197
  1922   004BA2  2E15               	decfsz	(??_whiteCal+1)^0,f,c
  1923   004BA4  D7FA               	bra	u7197
  1924   004BA6  F000               	nop	
  1925   004BA8                     
  1926                           ;MazeRobot.X/color.c: 125:             LATDbits.LATD7 = !LATDbits.LATD7;
  1927   004BA8  AE7C               	btfss	124,7,c	;volatile
  1928   004BAA  EFD9  F025         	goto	u5501
  1929   004BAE  EFDD  F025         	goto	u5500
  1930   004BB2                     u5501:
  1931   004BB2  6A14               	clrf	??_whiteCal^0,c
  1932   004BB4  2A14               	incf	??_whiteCal^0,f,c
  1933   004BB6  EFDE  F025         	goto	u5518
  1934   004BBA                     u5500:
  1935   004BBA  6A14               	clrf	??_whiteCal^0,c
  1936   004BBC                     u5518:
  1937   004BBC  3214               	rrcf	??_whiteCal^0,f,c
  1938   004BBE  3214               	rrcf	??_whiteCal^0,f,c
  1939   004BC0  507C               	movf	124,w,c	;volatile
  1940   004BC2  1814               	xorwf	??_whiteCal^0,w,c
  1941   004BC4  0B7F               	andlw	-129
  1942   004BC6  1814               	xorwf	??_whiteCal^0,w,c
  1943   004BC8  6E7C               	movwf	124,c	;volatile
  1944   004BCA  0012               	return		;funcret
  1945   004BCC                     __end_of_whiteCal:
  1946                           	callstack 0
  1947                           
  1948 ;; *************** function _initUSART4 *****************
  1949 ;; Defined at:
  1950 ;;		line 5 in file "serialTest.c"
  1951 ;; Parameters:    Size  Location     Type
  1952 ;;		None
  1953 ;; Auto vars:     Size  Location     Type
  1954 ;;		None
  1955 ;; Return value:  Size  Location     Type
  1956 ;;                  1    wreg      void 
  1957 ;; Registers used:
  1958 ;;		wreg, status,2
  1959 ;; Tracked objects:
  1960 ;;		On entry : 0/0
  1961 ;;		On exit  : 0/0
  1962 ;;		Unchanged: 0/0
  1963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1967 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1968 ;;Total ram usage:        0 bytes
  1969 ;; Hardware stack levels used: 1
  1970 ;; Hardware stack levels required when called: 2
  1971 ;; This function calls:
  1972 ;;		Nothing
  1973 ;; This function is called by:
  1974 ;;		_main
  1975 ;; This function uses a non-reentrant model
  1976 ;;
  1977                           
  1978                           	psect	text2
  1979   005976                     __ptext2:
  1980                           	callstack 0
  1981   005976                     _initUSART4:
  1982                           	callstack 28
  1983   005976                     
  1984                           ;serialTest.c: 9:     BAUD4CONbits.BRG16 = 0;
  1985   005976  010E               	movlb	14	; () banked
  1986   005978  97E9               	bcf	233,3,b	;volatile
  1987                           
  1988                           ;serialTest.c: 10:     TX4STAbits.BRGH = 0;
  1989   00597A  95E8               	bcf	232,2,b	;volatile
  1990   00597C                     
  1991                           ; BSR set to: 14
  1992                           ;serialTest.c: 19:     SP4BRGL = 51;
  1993   00597C  0E33               	movlw	51
  1994   00597E  6FE5               	movwf	229,b	;volatile
  1995                           
  1996                           ;serialTest.c: 20:     SP4BRGH = 0;
  1997   005980  0E00               	movlw	0
  1998   005982  6FE6               	movwf	230,b	;volatile
  1999   005984                     
  2000                           ; BSR set to: 14
  2001                           ;serialTest.c: 22:     RC4STAbits.CREN = 1;
  2002   005984  89E7               	bsf	231,4,b	;volatile
  2003   005986                     
  2004                           ; BSR set to: 14
  2005                           ;serialTest.c: 23:     TX4STAbits.TXEN = 1;
  2006   005986  8BE8               	bsf	232,5,b	;volatile
  2007   005988                     
  2008                           ; BSR set to: 14
  2009                           ;serialTest.c: 24:     RC4STAbits.SPEN = 1;
  2010   005988  8FE7               	bsf	231,7,b	;volatile
  2011   00598A                     
  2012                           ; BSR set to: 14
  2013                           ;serialTest.c: 26:     TRISCbits.TRISC1 = 1;
  2014   00598A  8283               	bsf	131,1,c	;volatile
  2015                           
  2016                           ;serialTest.c: 28:     RC0PPS = 0x12;
  2017   00598C  0E12               	movlw	18
  2018   00598E  6F62               	movwf	98,b	;volatile
  2019                           
  2020                           ;serialTest.c: 29:     RX4PPS = 0x11;
  2021   005990  0E11               	movlw	17
  2022   005992  6F15               	movwf	21,b	;volatile
  2023   005994                     
  2024                           ; BSR set to: 14
  2025                           ;serialTest.c: 32:     INTCONbits.GIE = 1;
  2026   005994  8EF2               	bsf	242,7,c	;volatile
  2027   005996                     
  2028                           ; BSR set to: 14
  2029                           ;serialTest.c: 33:     INTCONbits.IPEN = 1;
  2030   005996  8AF2               	bsf	242,5,c	;volatile
  2031   005998                     
  2032                           ; BSR set to: 14
  2033                           ;serialTest.c: 34:     INTCONbits.PEIE = 1;
  2034   005998  8CF2               	bsf	242,6,c	;volatile
  2035   00599A                     
  2036                           ; BSR set to: 14
  2037                           ;serialTest.c: 36:     PIE4bits.RC4IE=1;
  2038   00599A  872D               	bsf	45,3,b	;volatile
  2039   00599C                     
  2040                           ; BSR set to: 14
  2041                           ;serialTest.c: 37:     PIE4bits.TX4IE=0;
  2042   00599C  952D               	bcf	45,2,b	;volatile
  2043   00599E                     
  2044                           ; BSR set to: 14
  2045                           ;serialTest.c: 39:     IPR4bits.RC4IP = 1;
  2046   00599E  8723               	bsf	35,3,b	;volatile
  2047   0059A0                     
  2048                           ; BSR set to: 14
  2049                           ;serialTest.c: 40:     IPR4bits.TX4IP = 1;
  2050   0059A0  8523               	bsf	35,2,b	;volatile
  2051   0059A2                     
  2052                           ; BSR set to: 14
  2053   0059A2  0012               	return		;funcret
  2054   0059A4                     __end_of_initUSART4:
  2055                           	callstack 0
  2056                           
  2057 ;; *************** function _initDCmotorsPWM *****************
  2058 ;; Defined at:
  2059 ;;		line 10 in file "MazeRobot.X/dc_motor.c"
  2060 ;; Parameters:    Size  Location     Type
  2061 ;;  PWMperiod       2    4[COMRAM] int 
  2062 ;; Auto vars:     Size  Location     Type
  2063 ;;		None
  2064 ;; Return value:  Size  Location     Type
  2065 ;;                  1    wreg      void 
  2066 ;; Registers used:
  2067 ;;		wreg, status,2
  2068 ;; Tracked objects:
  2069 ;;		On entry : 0/0
  2070 ;;		On exit  : 0/0
  2071 ;;		Unchanged: 0/0
  2072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2073 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2074 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2076 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2077 ;;Total ram usage:        2 bytes
  2078 ;; Hardware stack levels used: 1
  2079 ;; Hardware stack levels required when called: 2
  2080 ;; This function calls:
  2081 ;;		Nothing
  2082 ;; This function is called by:
  2083 ;;		_main
  2084 ;; This function uses a non-reentrant model
  2085 ;;
  2086                           
  2087                           	psect	text3
  2088   00527C                     __ptext3:
  2089                           	callstack 0
  2090   00527C                     _initDCmotorsPWM:
  2091                           	callstack 28
  2092   00527C                     
  2093                           ;MazeRobot.X/dc_motor.c: 14:     LATEbits.LATE2 = 0;
  2094   00527C  947D               	bcf	125,2,c	;volatile
  2095                           
  2096                           ;MazeRobot.X/dc_motor.c: 15:     LATEbits.LATE4 = 0;
  2097   00527E  987D               	bcf	125,4,c	;volatile
  2098                           
  2099                           ;MazeRobot.X/dc_motor.c: 16:     LATCbits.LATC7 = 0;
  2100   005280  9E7B               	bcf	123,7,c	;volatile
  2101                           
  2102                           ;MazeRobot.X/dc_motor.c: 17:     LATGbits.LATG6 = 0;
  2103   005282  9C7F               	bcf	127,6,c	;volatile
  2104                           
  2105                           ;MazeRobot.X/dc_motor.c: 20:     TRISEbits.TRISE2 = 0 ;
  2106   005284  9485               	bcf	133,2,c	;volatile
  2107                           
  2108                           ;MazeRobot.X/dc_motor.c: 21:     TRISEbits.TRISE4 = 0 ;
  2109   005286  9885               	bcf	133,4,c	;volatile
  2110                           
  2111                           ;MazeRobot.X/dc_motor.c: 22:     TRISCbits.TRISC7 = 0 ;
  2112   005288  9E83               	bcf	131,7,c	;volatile
  2113                           
  2114                           ;MazeRobot.X/dc_motor.c: 23:     TRISGbits.TRISG6 = 0 ;
  2115   00528A  9C87               	bcf	135,6,c	;volatile
  2116   00528C                     
  2117                           ;MazeRobot.X/dc_motor.c: 26:     RE2PPS=0x05;
  2118   00528C  0E05               	movlw	5
  2119   00528E  010E               	movlb	14	; () banked
  2120   005290  6F74               	movwf	116,b	;volatile
  2121                           
  2122                           ;MazeRobot.X/dc_motor.c: 27:     RE4PPS=0x06;
  2123   005292  0E06               	movlw	6
  2124   005294  6F76               	movwf	118,b	;volatile
  2125                           
  2126                           ;MazeRobot.X/dc_motor.c: 28:     RC7PPS=0x07;
  2127   005296  0E07               	movlw	7
  2128   005298  6F69               	movwf	105,b	;volatile
  2129                           
  2130                           ;MazeRobot.X/dc_motor.c: 29:     RG6PPS=0x08;
  2131   00529A  0E08               	movlw	8
  2132   00529C  6F88               	movwf	136,b	;volatile
  2133                           
  2134                           ;MazeRobot.X/dc_motor.c: 32:     T2CONbits.CKPS=0b011;
  2135   00529E  50BD               	movf	189,w,c	;volatile
  2136   0052A0  0B8F               	andlw	-113
  2137   0052A2  0930               	iorlw	48
  2138   0052A4  6EBD               	movwf	189,c	;volatile
  2139                           
  2140                           ;MazeRobot.X/dc_motor.c: 33:     T2HLTbits.MODE=0b00000;
  2141   0052A6  0EE0               	movlw	-32
  2142   0052A8  16BE               	andwf	190,f,c	;volatile
  2143                           
  2144                           ;MazeRobot.X/dc_motor.c: 34:     T2CLKCONbits.CS=0b0001;
  2145   0052AA  50BF               	movf	191,w,c	;volatile
  2146   0052AC  0BF0               	andlw	-16
  2147   0052AE  0901               	iorlw	1
  2148   0052B0  6EBF               	movwf	191,c	;volatile
  2149                           
  2150                           ;MazeRobot.X/dc_motor.c: 38:     T2PR=199;
  2151   0052B2  0EC7               	movlw	199
  2152   0052B4  6EBC               	movwf	188,c	;volatile
  2153   0052B6                     
  2154                           ; BSR set to: 14
  2155                           ;MazeRobot.X/dc_motor.c: 39:     T2CONbits.ON=1;
  2156   0052B6  8EBD               	bsf	189,7,c	;volatile
  2157                           
  2158                           ;MazeRobot.X/dc_motor.c: 43:     CCPR1H=0;
  2159   0052B8  0E00               	movlw	0
  2160   0052BA  6EAA               	movwf	170,c	;volatile
  2161                           
  2162                           ;MazeRobot.X/dc_motor.c: 44:     CCPR2H=0;
  2163   0052BC  0E00               	movlw	0
  2164   0052BE  6EA6               	movwf	166,c	;volatile
  2165                           
  2166                           ;MazeRobot.X/dc_motor.c: 45:     CCPR3H=0;
  2167   0052C0  0E00               	movlw	0
  2168   0052C2  010F               	movlb	15	; () banked
  2169   0052C4  6F25               	movwf	37,b	;volatile
  2170                           
  2171                           ;MazeRobot.X/dc_motor.c: 46:     CCPR4H=0;
  2172   0052C6  0E00               	movlw	0
  2173   0052C8  6F21               	movwf	33,b	;volatile
  2174                           
  2175                           ;MazeRobot.X/dc_motor.c: 49:     CCPTMRS0bits.C1TSEL=0;
  2176   0052CA  0EFC               	movlw	-4
  2177   0052CC  16AD               	andwf	173,f,c	;volatile
  2178                           
  2179                           ;MazeRobot.X/dc_motor.c: 50:     CCPTMRS0bits.C2TSEL=0;
  2180   0052CE  0EF3               	movlw	-13
  2181   0052D0  16AD               	andwf	173,f,c	;volatile
  2182                           
  2183                           ;MazeRobot.X/dc_motor.c: 51:     CCPTMRS0bits.C3TSEL=0;
  2184   0052D2  0ECF               	movlw	-49
  2185   0052D4  16AD               	andwf	173,f,c	;volatile
  2186                           
  2187                           ;MazeRobot.X/dc_motor.c: 52:     CCPTMRS0bits.C4TSEL=0;
  2188   0052D6  0E3F               	movlw	-193
  2189   0052D8  16AD               	andwf	173,f,c	;volatile
  2190   0052DA                     
  2191                           ; BSR set to: 15
  2192                           ;MazeRobot.X/dc_motor.c: 55:     CCP1CONbits.FMT=1;
  2193   0052DA  88AB               	bsf	171,4,c	;volatile
  2194                           
  2195                           ;MazeRobot.X/dc_motor.c: 56:     CCP1CONbits.CCP1MODE=0b1100;
  2196   0052DC  50AB               	movf	171,w,c	;volatile
  2197   0052DE  0BF0               	andlw	-16
  2198   0052E0  090C               	iorlw	12
  2199   0052E2  6EAB               	movwf	171,c	;volatile
  2200   0052E4                     
  2201                           ; BSR set to: 15
  2202                           ;MazeRobot.X/dc_motor.c: 57:     CCP1CONbits.EN=1;
  2203   0052E4  8EAB               	bsf	171,7,c	;volatile
  2204   0052E6                     
  2205                           ; BSR set to: 15
  2206                           ;MazeRobot.X/dc_motor.c: 59:     CCP2CONbits.FMT=1;
  2207   0052E6  88A7               	bsf	167,4,c	;volatile
  2208                           
  2209                           ;MazeRobot.X/dc_motor.c: 60:     CCP2CONbits.CCP2MODE=0b1100;
  2210   0052E8  50A7               	movf	167,w,c	;volatile
  2211   0052EA  0BF0               	andlw	-16
  2212   0052EC  090C               	iorlw	12
  2213   0052EE  6EA7               	movwf	167,c	;volatile
  2214   0052F0                     
  2215                           ; BSR set to: 15
  2216                           ;MazeRobot.X/dc_motor.c: 61:     CCP2CONbits.EN=1;
  2217   0052F0  8EA7               	bsf	167,7,c	;volatile
  2218   0052F2                     
  2219                           ; BSR set to: 15
  2220                           ;MazeRobot.X/dc_motor.c: 63:     CCP3CONbits.FMT=1;
  2221   0052F2  8926               	bsf	38,4,b	;volatile
  2222                           
  2223                           ;MazeRobot.X/dc_motor.c: 64:     CCP3CONbits.CCP3MODE=0b1100;
  2224   0052F4  5126               	movf	38,w,b	;volatile
  2225   0052F6  0BF0               	andlw	-16
  2226   0052F8  090C               	iorlw	12
  2227   0052FA  6F26               	movwf	38,b	;volatile
  2228   0052FC                     
  2229                           ; BSR set to: 15
  2230                           ;MazeRobot.X/dc_motor.c: 65:     CCP3CONbits.EN=1;
  2231   0052FC  8F26               	bsf	38,7,b	;volatile
  2232   0052FE                     
  2233                           ; BSR set to: 15
  2234                           ;MazeRobot.X/dc_motor.c: 67:     CCP4CONbits.FMT=1;
  2235   0052FE  8922               	bsf	34,4,b	;volatile
  2236                           
  2237                           ;MazeRobot.X/dc_motor.c: 68:     CCP4CONbits.CCP4MODE=0b1100;
  2238   005300  5122               	movf	34,w,b	;volatile
  2239   005302  0BF0               	andlw	-16
  2240   005304  090C               	iorlw	12
  2241   005306  6F22               	movwf	34,b	;volatile
  2242   005308                     
  2243                           ; BSR set to: 15
  2244                           ;MazeRobot.X/dc_motor.c: 69:     CCP4CONbits.EN=1;
  2245   005308  8F22               	bsf	34,7,b	;volatile
  2246   00530A                     
  2247                           ; BSR set to: 15
  2248   00530A  0012               	return		;funcret
  2249   00530C                     __end_of_initDCmotorsPWM:
  2250                           	callstack 0
  2251                           
  2252 ;; *************** function _forward *****************
  2253 ;; Defined at:
  2254 ;;		line 132 in file "MazeRobot.X/dc_motor.c"
  2255 ;; Parameters:    Size  Location     Type
  2256 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  2257 ;;		 -> main@motorLeft(9), 
  2258 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  2259 ;;		 -> main@motorRight(9), 
  2260 ;; Auto vars:     Size  Location     Type
  2261 ;;		None
  2262 ;; Return value:  Size  Location     Type
  2263 ;;                  1    wreg      void 
  2264 ;; Registers used:
  2265 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2266 ;; Tracked objects:
  2267 ;;		On entry : 0/0
  2268 ;;		On exit  : 0/0
  2269 ;;		Unchanged: 0/0
  2270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2271 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2272 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2273 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2274 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2275 ;;Total ram usage:        5 bytes
  2276 ;; Hardware stack levels used: 1
  2277 ;; Hardware stack levels required when called: 4
  2278 ;; This function calls:
  2279 ;;		_setMotorPWM
  2280 ;; This function is called by:
  2281 ;;		_main
  2282 ;; This function uses a non-reentrant model
  2283 ;;
  2284                           
  2285                           	psect	text4
  2286   004CB0                     __ptext4:
  2287                           	callstack 0
  2288   004CB0                     _forward:
  2289                           	callstack 26
  2290   004CB0                     
  2291                           ;MazeRobot.X/dc_motor.c: 132: void forward(DC_motor *mL, DC_motor *mR);MazeRobot.X/dc_mo
      +                          tor.c: 133: {;MazeRobot.X/dc_motor.c: 134:     mL->direction = 1;
  2292   004CB0  EE20 F001          	lfsr	2,1
  2293   004CB4  5018               	movf	forward@mL^0,w,c
  2294   004CB6  26D9               	addwf	fsr2l,f,c
  2295   004CB8  5019               	movf	(forward@mL+1)^0,w,c
  2296   004CBA  22DA               	addwfc	fsr2h,f,c
  2297   004CBC  0E01               	movlw	1
  2298   004CBE  6EDF               	movwf	indf2,c
  2299                           
  2300                           ;MazeRobot.X/dc_motor.c: 135:     mR->direction = 1;
  2301   004CC0  EE20 F001          	lfsr	2,1
  2302   004CC4  501A               	movf	forward@mR^0,w,c
  2303   004CC6  26D9               	addwf	fsr2l,f,c
  2304   004CC8  501B               	movf	(forward@mR+1)^0,w,c
  2305   004CCA  22DA               	addwfc	fsr2h,f,c
  2306   004CCC  0E01               	movlw	1
  2307   004CCE  6EDF               	movwf	indf2,c
  2308                           
  2309                           ;MazeRobot.X/dc_motor.c: 137:     mL->brakemode = 1;
  2310   004CD0  EE20 F002          	lfsr	2,2
  2311   004CD4  5018               	movf	forward@mL^0,w,c
  2312   004CD6  26D9               	addwf	fsr2l,f,c
  2313   004CD8  5019               	movf	(forward@mL+1)^0,w,c
  2314   004CDA  22DA               	addwfc	fsr2h,f,c
  2315   004CDC  0E01               	movlw	1
  2316   004CDE  6EDF               	movwf	indf2,c
  2317                           
  2318                           ;MazeRobot.X/dc_motor.c: 138:     mL->brakemode = 1;
  2319   004CE0  EE20 F002          	lfsr	2,2
  2320   004CE4  5018               	movf	forward@mL^0,w,c
  2321   004CE6  26D9               	addwf	fsr2l,f,c
  2322   004CE8  5019               	movf	(forward@mL+1)^0,w,c
  2323   004CEA  22DA               	addwfc	fsr2h,f,c
  2324   004CEC  0E01               	movlw	1
  2325   004CEE  6EDF               	movwf	indf2,c
  2326                           
  2327                           ;MazeRobot.X/dc_motor.c: 140:     while ((mL->power)<25 && (mR->power)<25){
  2328   004CF0  EF9E  F026         	goto	l5284
  2329   004CF4                     l5276:
  2330                           
  2331                           ;MazeRobot.X/dc_motor.c: 141:         if ((mL->power) < 25){
  2332   004CF4  C018  FFD9         	movff	forward@mL,fsr2l
  2333   004CF8  C019  FFDA         	movff	forward@mL+1,fsr2h
  2334   004CFC  0E19               	movlw	25
  2335   004CFE  60DF               	cpfslt	indf2,c
  2336   004D00  EF84  F026         	goto	u5841
  2337   004D04  EF86  F026         	goto	u5840
  2338   004D08                     u5841:
  2339   004D08  EF8C  F026         	goto	l5280
  2340   004D0C                     u5840:
  2341   004D0C                     
  2342                           ;MazeRobot.X/dc_motor.c: 142:             mL->power += 5;
  2343   004D0C  C018  FFD9         	movff	forward@mL,fsr2l
  2344   004D10  C019  FFDA         	movff	forward@mL+1,fsr2h
  2345   004D14  0E05               	movlw	5
  2346   004D16  26DF               	addwf	indf2,f,c
  2347   004D18                     l5280:
  2348                           
  2349                           ;MazeRobot.X/dc_motor.c: 144:         if ((mR->power) <25){
  2350   004D18  C01A  FFD9         	movff	forward@mR,fsr2l
  2351   004D1C  C01B  FFDA         	movff	forward@mR+1,fsr2h
  2352   004D20  0E19               	movlw	25
  2353   004D22  60DF               	cpfslt	indf2,c
  2354   004D24  EF96  F026         	goto	u5851
  2355   004D28  EF98  F026         	goto	u5850
  2356   004D2C                     u5851:
  2357   004D2C  EF9E  F026         	goto	l5284
  2358   004D30                     u5850:
  2359   004D30                     
  2360                           ;MazeRobot.X/dc_motor.c: 145:             mR->power += 5;
  2361   004D30  C01A  FFD9         	movff	forward@mR,fsr2l
  2362   004D34  C01B  FFDA         	movff	forward@mR+1,fsr2h
  2363   004D38  0E05               	movlw	5
  2364   004D3A  26DF               	addwf	indf2,f,c
  2365   004D3C                     l5284:
  2366                           
  2367                           ;MazeRobot.X/dc_motor.c: 140:     while ((mL->power)<25 && (mR->power)<25){
  2368   004D3C  C018  FFD9         	movff	forward@mL,fsr2l
  2369   004D40  C019  FFDA         	movff	forward@mL+1,fsr2h
  2370   004D44  0E19               	movlw	25
  2371   004D46  60DF               	cpfslt	indf2,c
  2372   004D48  EFA8  F026         	goto	u5861
  2373   004D4C  EFAA  F026         	goto	u5860
  2374   004D50                     u5861:
  2375   004D50  EFB6  F026         	goto	l5288
  2376   004D54                     u5860:
  2377   004D54  C01A  FFD9         	movff	forward@mR,fsr2l
  2378   004D58  C01B  FFDA         	movff	forward@mR+1,fsr2h
  2379   004D5C  0E18               	movlw	24
  2380   004D5E  64DF               	cpfsgt	indf2,c
  2381   004D60  EFB4  F026         	goto	u5871
  2382   004D64  EFB6  F026         	goto	u5870
  2383   004D68                     u5871:
  2384   004D68  EF7A  F026         	goto	l5276
  2385   004D6C                     u5870:
  2386   004D6C                     l5288:
  2387                           
  2388                           ;MazeRobot.X/dc_motor.c: 149:     setMotorPWM(mL);
  2389   004D6C  C018  F012         	movff	forward@mL,setMotorPWM@m
  2390   004D70  C019  F013         	movff	forward@mL+1,setMotorPWM@m+1
  2391   004D74  EC6E  F01F         	call	_setMotorPWM	;wreg free
  2392                           
  2393                           ;MazeRobot.X/dc_motor.c: 150:     setMotorPWM(mR);
  2394   004D78  C01A  F012         	movff	forward@mR,setMotorPWM@m
  2395   004D7C  C01B  F013         	movff	forward@mR+1,setMotorPWM@m+1
  2396   004D80  EC6E  F01F         	call	_setMotorPWM	;wreg free
  2397   004D84  0012               	return		;funcret
  2398   004D86                     __end_of_forward:
  2399                           	callstack 0
  2400                           
  2401 ;; *************** function _color_click_init *****************
  2402 ;; Defined at:
  2403 ;;		line 8 in file "MazeRobot.X/color.c"
  2404 ;; Parameters:    Size  Location     Type
  2405 ;;		None
  2406 ;; Auto vars:     Size  Location     Type
  2407 ;;		None
  2408 ;; Return value:  Size  Location     Type
  2409 ;;                  1    wreg      void 
  2410 ;; Registers used:
  2411 ;;		wreg, status,2, status,0, cstack
  2412 ;; Tracked objects:
  2413 ;;		On entry : 0/0
  2414 ;;		On exit  : 0/0
  2415 ;;		Unchanged: 0/0
  2416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2419 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2420 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2421 ;;Total ram usage:        1 bytes
  2422 ;; Hardware stack levels used: 1
  2423 ;; Hardware stack levels required when called: 5
  2424 ;; This function calls:
  2425 ;;		_I2C_2_Master_Init
  2426 ;;		_color_writetoaddr
  2427 ;; This function is called by:
  2428 ;;		_main
  2429 ;; This function uses a non-reentrant model
  2430 ;;
  2431                           
  2432                           	psect	text5
  2433   005912                     __ptext5:
  2434                           	callstack 0
  2435   005912                     _color_click_init:
  2436                           	callstack 25
  2437   005912                     
  2438                           ;MazeRobot.X/color.c: 11:     I2C_2_Master_Init();
  2439   005912  ECE8  F02C         	call	_I2C_2_Master_Init	;wreg free
  2440   005916                     
  2441                           ;MazeRobot.X/color.c: 14:   color_writetoaddr(0x00, 0x01);
  2442   005916  0E01               	movlw	1
  2443   005918  6E07               	movwf	color_writetoaddr@value^0,c
  2444   00591A  0E00               	movlw	0
  2445   00591C  EC4E  F02D         	call	_color_writetoaddr
  2446   005920                     
  2447                           ;MazeRobot.X/color.c: 15:     _delay((unsigned long)((3)*(64000000/4000.0)));
  2448   005920  0E3F               	movlw	63
  2449   005922  6E09               	movwf	??_color_click_init^0,c
  2450   005924  0E55               	movlw	85
  2451   005926                     u7207:
  2452   005926  2EE8               	decfsz	wreg,f,c
  2453   005928  D7FE               	bra	u7207
  2454   00592A  2E09               	decfsz	??_color_click_init^0,f,c
  2455   00592C  D7FC               	bra	u7207
  2456   00592E  F000               	nop	
  2457   005930                     
  2458                           ;MazeRobot.X/color.c: 18:  color_writetoaddr(0x00, 0x03);
  2459   005930  0E03               	movlw	3
  2460   005932  6E07               	movwf	color_writetoaddr@value^0,c
  2461   005934  0E00               	movlw	0
  2462   005936  EC4E  F02D         	call	_color_writetoaddr
  2463   00593A                     
  2464                           ;MazeRobot.X/color.c: 21:  color_writetoaddr(0x01, 0xD5);
  2465   00593A  0ED5               	movlw	213
  2466   00593C  6E07               	movwf	color_writetoaddr@value^0,c
  2467   00593E  0E01               	movlw	1
  2468   005940  EC4E  F02D         	call	_color_writetoaddr
  2469   005944  0012               	return		;funcret
  2470   005946                     __end_of_color_click_init:
  2471                           	callstack 0
  2472                           
  2473 ;; *************** function _color_writetoaddr *****************
  2474 ;; Defined at:
  2475 ;;		line 25 in file "MazeRobot.X/color.c"
  2476 ;; Parameters:    Size  Location     Type
  2477 ;;  address         1    wreg     unsigned char 
  2478 ;;  value           1    6[COMRAM] unsigned char 
  2479 ;; Auto vars:     Size  Location     Type
  2480 ;;  address         1    7[COMRAM] unsigned char 
  2481 ;; Return value:  Size  Location     Type
  2482 ;;                  1    wreg      void 
  2483 ;; Registers used:
  2484 ;;		wreg, status,2, status,0, cstack
  2485 ;; Tracked objects:
  2486 ;;		On entry : 0/0
  2487 ;;		On exit  : 0/0
  2488 ;;		Unchanged: 0/0
  2489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2490 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2491 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2493 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2494 ;;Total ram usage:        2 bytes
  2495 ;; Hardware stack levels used: 1
  2496 ;; Hardware stack levels required when called: 4
  2497 ;; This function calls:
  2498 ;;		_I2C_2_Master_Start
  2499 ;;		_I2C_2_Master_Stop
  2500 ;;		_I2C_2_Master_Write
  2501 ;; This function is called by:
  2502 ;;		_color_click_init
  2503 ;; This function uses a non-reentrant model
  2504 ;;
  2505                           
  2506                           	psect	text6
  2507   005A9C                     __ptext6:
  2508                           	callstack 0
  2509   005A9C                     _color_writetoaddr:
  2510                           	callstack 25
  2511                           
  2512                           ;incstack = 0
  2513                           ;color_writetoaddr@address stored from wreg
  2514   005A9C  6E08               	movwf	color_writetoaddr@address^0,c
  2515   005A9E                     
  2516                           ;MazeRobot.X/color.c: 26:     I2C_2_Master_Start();
  2517   005A9E  EC8E  F02D         	call	_I2C_2_Master_Start	;wreg free
  2518                           
  2519                           ;MazeRobot.X/color.c: 27:     I2C_2_Master_Write(0x52 | 0x00);
  2520   005AA2  0E52               	movlw	82
  2521   005AA4  EC83  F02D         	call	_I2C_2_Master_Write
  2522                           
  2523                           ;MazeRobot.X/color.c: 28:     I2C_2_Master_Write(0x80 | address);
  2524   005AA8  5008               	movf	color_writetoaddr@address^0,w,c
  2525   005AAA  0980               	iorlw	128
  2526   005AAC  EC83  F02D         	call	_I2C_2_Master_Write
  2527                           
  2528                           ;MazeRobot.X/color.c: 29:     I2C_2_Master_Write(value);
  2529   005AB0  5007               	movf	color_writetoaddr@value^0,w,c
  2530   005AB2  EC83  F02D         	call	_I2C_2_Master_Write
  2531                           
  2532                           ;MazeRobot.X/color.c: 30:     I2C_2_Master_Stop();
  2533   005AB6  EC89  F02D         	call	_I2C_2_Master_Stop	;wreg free
  2534   005ABA  0012               	return		;funcret
  2535   005ABC                     __end_of_color_writetoaddr:
  2536                           	callstack 0
  2537                           
  2538 ;; *************** function _I2C_2_Master_Init *****************
  2539 ;; Defined at:
  2540 ;;		line 4 in file "MazeRobot.X/i2c.c"
  2541 ;; Parameters:    Size  Location     Type
  2542 ;;		None
  2543 ;; Auto vars:     Size  Location     Type
  2544 ;;		None
  2545 ;; Return value:  Size  Location     Type
  2546 ;;                  1    wreg      void 
  2547 ;; Registers used:
  2548 ;;		wreg, status,2
  2549 ;; Tracked objects:
  2550 ;;		On entry : 0/0
  2551 ;;		On exit  : 0/0
  2552 ;;		Unchanged: 0/0
  2553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2555 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2557 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2558 ;;Total ram usage:        0 bytes
  2559 ;; Hardware stack levels used: 1
  2560 ;; Hardware stack levels required when called: 2
  2561 ;; This function calls:
  2562 ;;		Nothing
  2563 ;; This function is called by:
  2564 ;;		_color_click_init
  2565 ;; This function uses a non-reentrant model
  2566 ;;
  2567                           
  2568                           	psect	text7
  2569   0059D0                     __ptext7:
  2570                           	callstack 0
  2571   0059D0                     _I2C_2_Master_Init:
  2572                           	callstack 27
  2573   0059D0                     
  2574                           ;MazeRobot.X/i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  2575   0059D0  010E               	movlb	14	; () banked
  2576   0059D2  51D9               	movf	217,w,b	;volatile
  2577   0059D4  0BF0               	andlw	-16
  2578   0059D6  0908               	iorlw	8
  2579   0059D8  6FD9               	movwf	217,b	;volatile
  2580   0059DA                     
  2581                           ; BSR set to: 14
  2582                           ;MazeRobot.X/i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  2583   0059DA  8BD9               	bsf	217,5,b	;volatile
  2584                           
  2585                           ;MazeRobot.X/i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  2586   0059DC  0E9F               	movlw	159
  2587   0059DE  6FD6               	movwf	214,b	;volatile
  2588   0059E0                     
  2589                           ; BSR set to: 14
  2590                           ;MazeRobot.X/i2c.c: 12:   TRISDbits.TRISD5 = 1;
  2591   0059E0  8A84               	bsf	132,5,c	;volatile
  2592   0059E2                     
  2593                           ; BSR set to: 14
  2594                           ;MazeRobot.X/i2c.c: 13:   TRISDbits.TRISD6 = 1;
  2595   0059E2  8C84               	bsf	132,6,c	;volatile
  2596   0059E4                     
  2597                           ; BSR set to: 14
  2598                           ;MazeRobot.X/i2c.c: 14:   ANSELDbits.ANSELD5=0;
  2599   0059E4  9BA7               	bcf	167,5,b	;volatile
  2600   0059E6                     
  2601                           ; BSR set to: 14
  2602                           ;MazeRobot.X/i2c.c: 15:   ANSELDbits.ANSELD6=0;
  2603   0059E6  9DA7               	bcf	167,6,b	;volatile
  2604                           
  2605                           ;MazeRobot.X/i2c.c: 16:   SSP2DATPPS=0x1D;
  2606   0059E8  0E1D               	movlw	29
  2607   0059EA  6F1D               	movwf	29,b	;volatile
  2608                           
  2609                           ;MazeRobot.X/i2c.c: 17:   SSP2CLKPPS=0x1E;
  2610   0059EC  0E1E               	movlw	30
  2611   0059EE  6F1C               	movwf	28,b	;volatile
  2612                           
  2613                           ;MazeRobot.X/i2c.c: 18:   RD5PPS=0x1C;
  2614   0059F0  0E1C               	movlw	28
  2615   0059F2  6F6F               	movwf	111,b	;volatile
  2616                           
  2617                           ;MazeRobot.X/i2c.c: 19:   RD6PPS=0x1B;
  2618   0059F4  0E1B               	movlw	27
  2619   0059F6  6F70               	movwf	112,b	;volatile
  2620   0059F8                     
  2621                           ; BSR set to: 14
  2622   0059F8  0012               	return		;funcret
  2623   0059FA                     __end_of_I2C_2_Master_Init:
  2624                           	callstack 0
  2625                           
  2626 ;; *************** function _colorDetect *****************
  2627 ;; Defined at:
  2628 ;;		line 130 in file "MazeRobot.X/color.c"
  2629 ;; Parameters:    Size  Location     Type
  2630 ;;  clearRef        4  121[BANK0 ] void 
  2631 ;;  ambientRGBVa    2  125[BANK0 ] PTR struct RGB
  2632 ;;		 -> main@ambientRGBVal(8), 
  2633 ;;  whiteRGBVal     2  127[BANK0 ] PTR struct RGB
  2634 ;;		 -> main@whiteRGBVal(8), 
  2635 ;;  mL              2  129[BANK0 ] PTR struct DC_motor
  2636 ;;		 -> main@motorLeft(9), 
  2637 ;;  mR              2  131[BANK0 ] PTR struct DC_motor
  2638 ;;		 -> main@motorRight(9), 
  2639 ;; Auto vars:     Size  Location     Type
  2640 ;;  string1        20    0[BANK1 ] unsigned char [20]
  2641 ;;  RGBVal          8   38[BANK1 ] struct RGB
  2642 ;;  bluePrint       4   54[BANK1 ] float 
  2643 ;;  greenPrint      4   50[BANK1 ] float 
  2644 ;;  redPrint        4   46[BANK1 ] float 
  2645 ;;  whiteB          4   28[BANK1 ] float 
  2646 ;;  whiteG          4   24[BANK1 ] float 
  2647 ;;  whiteR          4   20[BANK1 ] float 
  2648 ;;  whiteC          4    0        float 
  2649 ;;  ambientB        2   36[BANK1 ] unsigned int 
  2650 ;;  ambientG        2   34[BANK1 ] unsigned int 
  2651 ;;  ambientR        2   32[BANK1 ] unsigned int 
  2652 ;; Return value:  Size  Location     Type
  2653 ;;                  1    wreg      void 
  2654 ;; Registers used:
  2655 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2656 ;; Tracked objects:
  2657 ;;		On entry : 0/0
  2658 ;;		On exit  : 0/0
  2659 ;;		Unchanged: 0/0
  2660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2661 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2662 ;;      Locals:         0       0      58       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2663 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2664 ;;      Totals:         0      14      58       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2665 ;;Total ram usage:       72 bytes
  2666 ;; Hardware stack levels used: 1
  2667 ;; Hardware stack levels required when called: 10
  2668 ;; This function calls:
  2669 ;;		_TxBufferedString
  2670 ;;		___fldiv
  2671 ;;		___flge
  2672 ;;		___flmul
  2673 ;;		___flsub
  2674 ;;		___xxtofl
  2675 ;;		_getColor
  2676 ;;		_reverseSquareLeft
  2677 ;;		_reverseSquareRight
  2678 ;;		_sendTxBuf
  2679 ;;		_sprintf
  2680 ;;		_turnLeft_135
  2681 ;;		_turnLeft_90
  2682 ;;		_turnRight_135
  2683 ;;		_turnRight_90
  2684 ;;		_turn_180
  2685 ;; This function is called by:
  2686 ;;		_main
  2687 ;; This function uses a non-reentrant model
  2688 ;;
  2689                           
  2690                           	psect	text8
  2691   000E2C                     __ptext8:
  2692                           	callstack 0
  2693   000E2C                     _colorDetect:
  2694                           	callstack 20
  2695   000E2C                     
  2696                           ;MazeRobot.X/color.c: 133:         RGB RGBVal;;MazeRobot.X/color.c: 134:         getColo
      +                          r(&RGBVal);
  2697   000E2C  0E26               	movlw	low colorDetect@RGBVal
  2698   000E2E  6E10               	movwf	getColor@v^0,c
  2699   000E30  0E01               	movlw	high colorDetect@RGBVal
  2700   000E32  6E11               	movwf	(getColor@v+1)^0,c
  2701   000E34  EC30  F02A         	call	_getColor	;wreg free
  2702   000E38                     
  2703                           ;MazeRobot.X/color.c: 136:         unsigned int ambientR = ambientRGBVal->R;
  2704   000E38  C0DD  FFD9         	movff	colorDetect@ambientRGBVal,fsr2l
  2705   000E3C  C0DE  FFDA         	movff	colorDetect@ambientRGBVal+1,fsr2h
  2706   000E40  CFDE F120          	movff	postinc2,colorDetect@ambientR
  2707   000E44  CFDD F121          	movff	postdec2,colorDetect@ambientR+1
  2708   000E48                     
  2709                           ;MazeRobot.X/color.c: 137:         unsigned int ambientG = ambientRGBVal->G;
  2710   000E48  0100               	movlb	0	; () banked
  2711   000E4A  EE20 F002          	lfsr	2,2
  2712   000E4E  51DD               	movf	colorDetect@ambientRGBVal& (0+255),w,b
  2713   000E50  26D9               	addwf	fsr2l,f,c
  2714   000E52  51DE               	movf	(colorDetect@ambientRGBVal+1)& (0+255),w,b
  2715   000E54  22DA               	addwfc	fsr2h,f,c
  2716   000E56  CFDE F122          	movff	postinc2,colorDetect@ambientG
  2717   000E5A  CFDD F123          	movff	postdec2,colorDetect@ambientG+1
  2718   000E5E                     
  2719                           ; BSR set to: 0
  2720                           ;MazeRobot.X/color.c: 138:         unsigned int ambientB = ambientRGBVal->B;
  2721   000E5E  EE20 F004          	lfsr	2,4
  2722   000E62  51DD               	movf	colorDetect@ambientRGBVal& (0+255),w,b
  2723   000E64  26D9               	addwf	fsr2l,f,c
  2724   000E66  51DE               	movf	(colorDetect@ambientRGBVal+1)& (0+255),w,b
  2725   000E68  22DA               	addwfc	fsr2h,f,c
  2726   000E6A  CFDE F124          	movff	postinc2,colorDetect@ambientB
  2727   000E6E  CFDD F125          	movff	postdec2,colorDetect@ambientB+1
  2728   000E72                     
  2729                           ; BSR set to: 0
  2730                           ;MazeRobot.X/color.c: 140:         float whiteR = whiteRGBVal->R;
  2731   000E72  C0DF  FFD9         	movff	colorDetect@whiteRGBVal,fsr2l
  2732   000E76  C0E0  FFDA         	movff	colorDetect@whiteRGBVal+1,fsr2h
  2733   000E7A  CFDE F0E5          	movff	postinc2,??_colorDetect
  2734   000E7E  CFDD F0E6          	movff	postdec2,??_colorDetect+1
  2735   000E82  C0E5  F005         	movff	??_colorDetect,___xxtofl@val
  2736   000E86  C0E6  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  2737   000E8A  6A07               	clrf	(___xxtofl@val+2)^0,c
  2738   000E8C  6A08               	clrf	(___xxtofl@val+3)^0,c
  2739   000E8E  0E00               	movlw	0
  2740   000E90  ECD0  F01D         	call	___xxtofl
  2741   000E94  C005  F114         	movff	?___xxtofl,colorDetect@whiteR
  2742   000E98  C006  F115         	movff	?___xxtofl+1,colorDetect@whiteR+1
  2743   000E9C  C007  F116         	movff	?___xxtofl+2,colorDetect@whiteR+2
  2744   000EA0  C008  F117         	movff	?___xxtofl+3,colorDetect@whiteR+3
  2745   000EA4                     
  2746                           ;MazeRobot.X/color.c: 141:         float whiteG = whiteRGBVal->G;
  2747   000EA4  0100               	movlb	0	; () banked
  2748   000EA6  EE20 F002          	lfsr	2,2
  2749   000EAA  51DF               	movf	colorDetect@whiteRGBVal& (0+255),w,b
  2750   000EAC  26D9               	addwf	fsr2l,f,c
  2751   000EAE  51E0               	movf	(colorDetect@whiteRGBVal+1)& (0+255),w,b
  2752   000EB0  22DA               	addwfc	fsr2h,f,c
  2753   000EB2  CFDE F0E5          	movff	postinc2,??_colorDetect
  2754   000EB6  CFDD F0E6          	movff	postdec2,??_colorDetect+1
  2755   000EBA  C0E5  F005         	movff	??_colorDetect,___xxtofl@val
  2756   000EBE  C0E6  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  2757   000EC2  6A07               	clrf	(___xxtofl@val+2)^0,c
  2758   000EC4  6A08               	clrf	(___xxtofl@val+3)^0,c
  2759   000EC6  0E00               	movlw	0
  2760   000EC8  ECD0  F01D         	call	___xxtofl
  2761   000ECC  C005  F118         	movff	?___xxtofl,colorDetect@whiteG
  2762   000ED0  C006  F119         	movff	?___xxtofl+1,colorDetect@whiteG+1
  2763   000ED4  C007  F11A         	movff	?___xxtofl+2,colorDetect@whiteG+2
  2764   000ED8  C008  F11B         	movff	?___xxtofl+3,colorDetect@whiteG+3
  2765   000EDC                     
  2766                           ;MazeRobot.X/color.c: 142:         float whiteB = whiteRGBVal->B;
  2767   000EDC  0100               	movlb	0	; () banked
  2768   000EDE  EE20 F004          	lfsr	2,4
  2769   000EE2  51DF               	movf	colorDetect@whiteRGBVal& (0+255),w,b
  2770   000EE4  26D9               	addwf	fsr2l,f,c
  2771   000EE6  51E0               	movf	(colorDetect@whiteRGBVal+1)& (0+255),w,b
  2772   000EE8  22DA               	addwfc	fsr2h,f,c
  2773   000EEA  CFDE F0E5          	movff	postinc2,??_colorDetect
  2774   000EEE  CFDD F0E6          	movff	postdec2,??_colorDetect+1
  2775   000EF2  C0E5  F005         	movff	??_colorDetect,___xxtofl@val
  2776   000EF6  C0E6  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  2777   000EFA  6A07               	clrf	(___xxtofl@val+2)^0,c
  2778   000EFC  6A08               	clrf	(___xxtofl@val+3)^0,c
  2779   000EFE  0E00               	movlw	0
  2780   000F00  ECD0  F01D         	call	___xxtofl
  2781   000F04  C005  F11C         	movff	?___xxtofl,colorDetect@whiteB
  2782   000F08  C006  F11D         	movff	?___xxtofl+1,colorDetect@whiteB+1
  2783   000F0C  C007  F11E         	movff	?___xxtofl+2,colorDetect@whiteB+2
  2784   000F10  C008  F11F         	movff	?___xxtofl+3,colorDetect@whiteB+3
  2785   000F14  0100               	movlb	0	; () banked
  2786   000F16  EE20 F006          	lfsr	2,6
  2787   000F1A  51DF               	movf	colorDetect@whiteRGBVal& (0+255),w,b
  2788   000F1C  26D9               	addwf	fsr2l,f,c
  2789   000F1E  51E0               	movf	(colorDetect@whiteRGBVal+1)& (0+255),w,b
  2790   000F20  22DA               	addwfc	fsr2h,f,c
  2791   000F22  CFDE F0E5          	movff	postinc2,??_colorDetect
  2792   000F26  CFDD F0E6          	movff	postdec2,??_colorDetect+1
  2793   000F2A  C0E5  F005         	movff	??_colorDetect,___xxtofl@val
  2794   000F2E  C0E6  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  2795   000F32  6A07               	clrf	(___xxtofl@val+2)^0,c
  2796   000F34  6A08               	clrf	(___xxtofl@val+3)^0,c
  2797   000F36  0E00               	movlw	0
  2798   000F38  ECD0  F01D         	call	___xxtofl
  2799   000F3C                     
  2800                           ;MazeRobot.X/color.c: 145:         float redPrint = (RGBVal.R-ambientR)/((whiteR-(float)
      +                          ambientR)*(clearRef));
  2801   000F3C  0101               	movlb	1	; () banked
  2802   000F3E  5120               	movf	colorDetect@ambientR& (0+255),w,b
  2803   000F40  5D26               	subwf	colorDetect@RGBVal& (0+255),w,b
  2804   000F42  0100               	movlb	0	; () banked
  2805   000F44  6FE5               	movwf	??_colorDetect& (0+255),b
  2806   000F46  0101               	movlb	1	; () banked
  2807   000F48  5121               	movf	(colorDetect@ambientR+1)& (0+255),w,b
  2808   000F4A  5927               	subwfb	(colorDetect@RGBVal+1)& (0+255),w,b
  2809   000F4C  0100               	movlb	0	; () banked
  2810   000F4E  6FE6               	movwf	(??_colorDetect+1)& (0+255),b
  2811   000F50  C0E5  F005         	movff	??_colorDetect,___xxtofl@val
  2812   000F54  C0E6  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  2813   000F58  6A07               	clrf	(___xxtofl@val+2)^0,c
  2814   000F5A  6A08               	clrf	(___xxtofl@val+3)^0,c
  2815   000F5C  0E00               	movlw	0
  2816   000F5E  ECD0  F01D         	call	___xxtofl
  2817   000F62  C005  F036         	movff	?___xxtofl,___fldiv@b
  2818   000F66  C006  F037         	movff	?___xxtofl+1,___fldiv@b+1
  2819   000F6A  C007  F038         	movff	?___xxtofl+2,___fldiv@b+2
  2820   000F6E  C008  F039         	movff	?___xxtofl+3,___fldiv@b+3
  2821   000F72  C0D9  F021         	movff	colorDetect@clearRef,___flmul@a
  2822   000F76  C0DA  F022         	movff	colorDetect@clearRef+1,___flmul@a+1
  2823   000F7A  C0DB  F023         	movff	colorDetect@clearRef+2,___flmul@a+2
  2824   000F7E  C0DC  F024         	movff	colorDetect@clearRef+3,___flmul@a+3
  2825   000F82  C120  F005         	movff	colorDetect@ambientR,___xxtofl@val
  2826   000F86  C121  F006         	movff	colorDetect@ambientR+1,___xxtofl@val+1
  2827   000F8A  6A07               	clrf	(___xxtofl@val+2)^0,c
  2828   000F8C  6A08               	clrf	(___xxtofl@val+3)^0,c
  2829   000F8E  0E00               	movlw	0
  2830   000F90  ECD0  F01D         	call	___xxtofl
  2831   000F94  C005  F019         	movff	?___xxtofl,___flsub@a
  2832   000F98  C006  F01A         	movff	?___xxtofl+1,___flsub@a+1
  2833   000F9C  C007  F01B         	movff	?___xxtofl+2,___flsub@a+2
  2834   000FA0  C008  F01C         	movff	?___xxtofl+3,___flsub@a+3
  2835   000FA4  C114  F015         	movff	colorDetect@whiteR,___flsub@b
  2836   000FA8  C115  F016         	movff	colorDetect@whiteR+1,___flsub@b+1
  2837   000FAC  C116  F017         	movff	colorDetect@whiteR+2,___flsub@b+2
  2838   000FB0  C117  F018         	movff	colorDetect@whiteR+3,___flsub@b+3
  2839   000FB4  ECA6  F02B         	call	___flsub	;wreg free
  2840   000FB8  C015  F01D         	movff	?___flsub,___flmul@b
  2841   000FBC  C016  F01E         	movff	?___flsub+1,___flmul@b+1
  2842   000FC0  C017  F01F         	movff	?___flsub+2,___flmul@b+2
  2843   000FC4  C018  F020         	movff	?___flsub+3,___flmul@b+3
  2844   000FC8  EC88  F014         	call	___flmul	;wreg free
  2845   000FCC  C01D  F03A         	movff	?___flmul,___fldiv@a
  2846   000FD0  C01E  F03B         	movff	?___flmul+1,___fldiv@a+1
  2847   000FD4  C01F  F03C         	movff	?___flmul+2,___fldiv@a+2
  2848   000FD8  C020  F03D         	movff	?___flmul+3,___fldiv@a+3
  2849   000FDC  EC9D  F016         	call	___fldiv	;wreg free
  2850   000FE0  C036  F12E         	movff	?___fldiv,colorDetect@redPrint
  2851   000FE4  C037  F12F         	movff	?___fldiv+1,colorDetect@redPrint+1
  2852   000FE8  C038  F130         	movff	?___fldiv+2,colorDetect@redPrint+2
  2853   000FEC  C039  F131         	movff	?___fldiv+3,colorDetect@redPrint+3
  2854   000FF0                     
  2855                           ;MazeRobot.X/color.c: 146:         float greenPrint = (RGBVal.G-ambientG)/((whiteG-(floa
      +                          t)ambientG)*(clearRef));
  2856   000FF0  0101               	movlb	1	; () banked
  2857   000FF2  5122               	movf	colorDetect@ambientG& (0+255),w,b
  2858   000FF4  5D28               	subwf	(colorDetect@RGBVal+2)& (0+255),w,b
  2859   000FF6  0100               	movlb	0	; () banked
  2860   000FF8  6FE5               	movwf	??_colorDetect& (0+255),b
  2861   000FFA  0101               	movlb	1	; () banked
  2862   000FFC  5123               	movf	(colorDetect@ambientG+1)& (0+255),w,b
  2863   000FFE  5929               	subwfb	(colorDetect@RGBVal+3)& (0+255),w,b
  2864   001000  0100               	movlb	0	; () banked
  2865   001002  6FE6               	movwf	(??_colorDetect+1)& (0+255),b
  2866   001004  C0E5  F005         	movff	??_colorDetect,___xxtofl@val
  2867   001008  C0E6  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  2868   00100C  6A07               	clrf	(___xxtofl@val+2)^0,c
  2869   00100E  6A08               	clrf	(___xxtofl@val+3)^0,c
  2870   001010  0E00               	movlw	0
  2871   001012  ECD0  F01D         	call	___xxtofl
  2872   001016  C005  F036         	movff	?___xxtofl,___fldiv@b
  2873   00101A  C006  F037         	movff	?___xxtofl+1,___fldiv@b+1
  2874   00101E  C007  F038         	movff	?___xxtofl+2,___fldiv@b+2
  2875   001022  C008  F039         	movff	?___xxtofl+3,___fldiv@b+3
  2876   001026  C0D9  F021         	movff	colorDetect@clearRef,___flmul@a
  2877   00102A  C0DA  F022         	movff	colorDetect@clearRef+1,___flmul@a+1
  2878   00102E  C0DB  F023         	movff	colorDetect@clearRef+2,___flmul@a+2
  2879   001032  C0DC  F024         	movff	colorDetect@clearRef+3,___flmul@a+3
  2880   001036  C122  F005         	movff	colorDetect@ambientG,___xxtofl@val
  2881   00103A  C123  F006         	movff	colorDetect@ambientG+1,___xxtofl@val+1
  2882   00103E  6A07               	clrf	(___xxtofl@val+2)^0,c
  2883   001040  6A08               	clrf	(___xxtofl@val+3)^0,c
  2884   001042  0E00               	movlw	0
  2885   001044  ECD0  F01D         	call	___xxtofl
  2886   001048  C005  F019         	movff	?___xxtofl,___flsub@a
  2887   00104C  C006  F01A         	movff	?___xxtofl+1,___flsub@a+1
  2888   001050  C007  F01B         	movff	?___xxtofl+2,___flsub@a+2
  2889   001054  C008  F01C         	movff	?___xxtofl+3,___flsub@a+3
  2890   001058  C118  F015         	movff	colorDetect@whiteG,___flsub@b
  2891   00105C  C119  F016         	movff	colorDetect@whiteG+1,___flsub@b+1
  2892   001060  C11A  F017         	movff	colorDetect@whiteG+2,___flsub@b+2
  2893   001064  C11B  F018         	movff	colorDetect@whiteG+3,___flsub@b+3
  2894   001068  ECA6  F02B         	call	___flsub	;wreg free
  2895   00106C  C015  F01D         	movff	?___flsub,___flmul@b
  2896   001070  C016  F01E         	movff	?___flsub+1,___flmul@b+1
  2897   001074  C017  F01F         	movff	?___flsub+2,___flmul@b+2
  2898   001078  C018  F020         	movff	?___flsub+3,___flmul@b+3
  2899   00107C  EC88  F014         	call	___flmul	;wreg free
  2900   001080  C01D  F03A         	movff	?___flmul,___fldiv@a
  2901   001084  C01E  F03B         	movff	?___flmul+1,___fldiv@a+1
  2902   001088  C01F  F03C         	movff	?___flmul+2,___fldiv@a+2
  2903   00108C  C020  F03D         	movff	?___flmul+3,___fldiv@a+3
  2904   001090  EC9D  F016         	call	___fldiv	;wreg free
  2905   001094  C036  F132         	movff	?___fldiv,colorDetect@greenPrint
  2906   001098  C037  F133         	movff	?___fldiv+1,colorDetect@greenPrint+1
  2907   00109C  C038  F134         	movff	?___fldiv+2,colorDetect@greenPrint+2
  2908   0010A0  C039  F135         	movff	?___fldiv+3,colorDetect@greenPrint+3
  2909   0010A4                     
  2910                           ;MazeRobot.X/color.c: 147:         float bluePrint = (RGBVal.B-ambientB)/((whiteB-(float
      +                          )ambientB)*(clearRef));
  2911   0010A4  0101               	movlb	1	; () banked
  2912   0010A6  5124               	movf	colorDetect@ambientB& (0+255),w,b
  2913   0010A8  5D2A               	subwf	(colorDetect@RGBVal+4)& (0+255),w,b
  2914   0010AA  0100               	movlb	0	; () banked
  2915   0010AC  6FE5               	movwf	??_colorDetect& (0+255),b
  2916   0010AE  0101               	movlb	1	; () banked
  2917   0010B0  5125               	movf	(colorDetect@ambientB+1)& (0+255),w,b
  2918   0010B2  592B               	subwfb	(colorDetect@RGBVal+5)& (0+255),w,b
  2919   0010B4  0100               	movlb	0	; () banked
  2920   0010B6  6FE6               	movwf	(??_colorDetect+1)& (0+255),b
  2921   0010B8  C0E5  F005         	movff	??_colorDetect,___xxtofl@val
  2922   0010BC  C0E6  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  2923   0010C0  6A07               	clrf	(___xxtofl@val+2)^0,c
  2924   0010C2  6A08               	clrf	(___xxtofl@val+3)^0,c
  2925   0010C4  0E00               	movlw	0
  2926   0010C6  ECD0  F01D         	call	___xxtofl
  2927   0010CA  C005  F036         	movff	?___xxtofl,___fldiv@b
  2928   0010CE  C006  F037         	movff	?___xxtofl+1,___fldiv@b+1
  2929   0010D2  C007  F038         	movff	?___xxtofl+2,___fldiv@b+2
  2930   0010D6  C008  F039         	movff	?___xxtofl+3,___fldiv@b+3
  2931   0010DA  C0D9  F021         	movff	colorDetect@clearRef,___flmul@a
  2932   0010DE  C0DA  F022         	movff	colorDetect@clearRef+1,___flmul@a+1
  2933   0010E2  C0DB  F023         	movff	colorDetect@clearRef+2,___flmul@a+2
  2934   0010E6  C0DC  F024         	movff	colorDetect@clearRef+3,___flmul@a+3
  2935   0010EA  C124  F005         	movff	colorDetect@ambientB,___xxtofl@val
  2936   0010EE  C125  F006         	movff	colorDetect@ambientB+1,___xxtofl@val+1
  2937   0010F2  6A07               	clrf	(___xxtofl@val+2)^0,c
  2938   0010F4  6A08               	clrf	(___xxtofl@val+3)^0,c
  2939   0010F6  0E00               	movlw	0
  2940   0010F8  ECD0  F01D         	call	___xxtofl
  2941   0010FC  C005  F019         	movff	?___xxtofl,___flsub@a
  2942   001100  C006  F01A         	movff	?___xxtofl+1,___flsub@a+1
  2943   001104  C007  F01B         	movff	?___xxtofl+2,___flsub@a+2
  2944   001108  C008  F01C         	movff	?___xxtofl+3,___flsub@a+3
  2945   00110C  C11C  F015         	movff	colorDetect@whiteB,___flsub@b
  2946   001110  C11D  F016         	movff	colorDetect@whiteB+1,___flsub@b+1
  2947   001114  C11E  F017         	movff	colorDetect@whiteB+2,___flsub@b+2
  2948   001118  C11F  F018         	movff	colorDetect@whiteB+3,___flsub@b+3
  2949   00111C  ECA6  F02B         	call	___flsub	;wreg free
  2950   001120  C015  F01D         	movff	?___flsub,___flmul@b
  2951   001124  C016  F01E         	movff	?___flsub+1,___flmul@b+1
  2952   001128  C017  F01F         	movff	?___flsub+2,___flmul@b+2
  2953   00112C  C018  F020         	movff	?___flsub+3,___flmul@b+3
  2954   001130  EC88  F014         	call	___flmul	;wreg free
  2955   001134  C01D  F03A         	movff	?___flmul,___fldiv@a
  2956   001138  C01E  F03B         	movff	?___flmul+1,___fldiv@a+1
  2957   00113C  C01F  F03C         	movff	?___flmul+2,___fldiv@a+2
  2958   001140  C020  F03D         	movff	?___flmul+3,___fldiv@a+3
  2959   001144  EC9D  F016         	call	___fldiv	;wreg free
  2960   001148  C036  F136         	movff	?___fldiv,colorDetect@bluePrint
  2961   00114C  C037  F137         	movff	?___fldiv+1,colorDetect@bluePrint+1
  2962   001150  C038  F138         	movff	?___fldiv+2,colorDetect@bluePrint+2
  2963   001154  C039  F139         	movff	?___fldiv+3,colorDetect@bluePrint+3
  2964   001158                     
  2965                           ;MazeRobot.X/color.c: 149:         char string1[20];;MazeRobot.X/color.c: 150:         _
      +                          delay((unsigned long)((2)*(64000000/4000.0)));
  2966   001158  0E2A               	movlw	42
  2967   00115A  0100               	movlb	0	; () banked
  2968   00115C  6FE5               	movwf	??_colorDetect& (0+255),b
  2969   00115E  0E8D               	movlw	141
  2970   001160                     u7217:
  2971   001160  2EE8               	decfsz	wreg,f,c
  2972   001162  D7FE               	bra	u7217
  2973   001164  2FE5               	decfsz	??_colorDetect& (0+255),f,b
  2974   001166  D7FC               	bra	u7217
  2975   001168  D000               	nop2	
  2976   00116A                     
  2977                           ;MazeRobot.X/color.c: 151:         sprintf(string1,"R: %f G: %f B:%f \r",redPrint,greenP
      +                          rint,bluePrint);
  2978   00116A  0E00               	movlw	low colorDetect@string1
  2979   00116C  0100               	movlb	0	; () banked
  2980   00116E  6FBC               	movwf	sprintf@s& (0+255),b
  2981   001170  0E01               	movlw	high colorDetect@string1
  2982   001172  6FBD               	movwf	(sprintf@s+1)& (0+255),b
  2983   001174  0E01               	movlw	low STR_1
  2984   001176  6FBE               	movwf	sprintf@fmt& (0+255),b
  2985   001178  0E0E               	movlw	high STR_1
  2986   00117A  6FBF               	movwf	(sprintf@fmt+1)& (0+255),b
  2987   00117C  C12E  F0C0         	movff	colorDetect@redPrint,?_sprintf+4
  2988   001180  C12F  F0C1         	movff	colorDetect@redPrint+1,?_sprintf+5
  2989   001184  C130  F0C2         	movff	colorDetect@redPrint+2,?_sprintf+6
  2990   001188  C131  F0C3         	movff	colorDetect@redPrint+3,?_sprintf+7
  2991   00118C  C132  F0C4         	movff	colorDetect@greenPrint,?_sprintf+8
  2992   001190  C133  F0C5         	movff	colorDetect@greenPrint+1,?_sprintf+9
  2993   001194  C134  F0C6         	movff	colorDetect@greenPrint+2,?_sprintf+10
  2994   001198  C135  F0C7         	movff	colorDetect@greenPrint+3,?_sprintf+11
  2995   00119C  C136  F0C8         	movff	colorDetect@bluePrint,?_sprintf+12
  2996   0011A0  C137  F0C9         	movff	colorDetect@bluePrint+1,?_sprintf+13
  2997   0011A4  C138  F0CA         	movff	colorDetect@bluePrint+2,?_sprintf+14
  2998   0011A8  C139  F0CB         	movff	colorDetect@bluePrint+3,?_sprintf+15
  2999   0011AC  ECB5  F02A         	call	_sprintf	;wreg free
  3000   0011B0                     
  3001                           ;MazeRobot.X/color.c: 152:         TxBufferedString(string1);
  3002   0011B0  0E00               	movlw	low colorDetect@string1
  3003   0011B2  6E06               	movwf	TxBufferedString@string^0,c
  3004   0011B4  0E01               	movlw	high colorDetect@string1
  3005   0011B6  6E07               	movwf	(TxBufferedString@string+1)^0,c
  3006   0011B8  ECA3  F02C         	call	_TxBufferedString	;wreg free
  3007   0011BC                     
  3008                           ;MazeRobot.X/color.c: 153:         sendTxBuf();
  3009   0011BC  EC5E  F02D         	call	_sendTxBuf	;wreg free
  3010   0011C0                     
  3011                           ;MazeRobot.X/color.c: 154:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3012   0011C0  0E2A               	movlw	42
  3013   0011C2  0100               	movlb	0	; () banked
  3014   0011C4  6FE5               	movwf	??_colorDetect& (0+255),b
  3015   0011C6  0E8D               	movlw	141
  3016   0011C8                     u7227:
  3017   0011C8  2EE8               	decfsz	wreg,f,c
  3018   0011CA  D7FE               	bra	u7227
  3019   0011CC  2FE5               	decfsz	??_colorDetect& (0+255),f,b
  3020   0011CE  D7FC               	bra	u7227
  3021   0011D0  D000               	nop2	
  3022   0011D2                     
  3023                           ;MazeRobot.X/color.c: 156:         if ((redPrint < 0) | (redPrint > 2)) { redPrint = 0.0
      +                          ;}
  3024   0011D2  0101               	movlb	1	; () banked
  3025   0011D4  BF31               	btfsc	(colorDetect@redPrint+3)& (0+255),7,b
  3026   0011D6  EFEF  F008         	goto	u6631
  3027   0011DA  EFF1  F008         	goto	u6630
  3028   0011DE                     u6631:
  3029   0011DE  EF0A  F009         	goto	l5972
  3030   0011E2                     u6630:
  3031   0011E2                     
  3032                           ; BSR set to: 1
  3033   0011E2  0E00               	movlw	0
  3034   0011E4  6E36               	movwf	___flge@ff1^0,c
  3035   0011E6  0E00               	movlw	0
  3036   0011E8  6E37               	movwf	(___flge@ff1+1)^0,c
  3037   0011EA  0E00               	movlw	0
  3038   0011EC  6E38               	movwf	(___flge@ff1+2)^0,c
  3039   0011EE  0E40               	movlw	64
  3040   0011F0  6E39               	movwf	(___flge@ff1+3)^0,c
  3041   0011F2  C12E  F03A         	movff	colorDetect@redPrint,___flge@ff2
  3042   0011F6  C12F  F03B         	movff	colorDetect@redPrint+1,___flge@ff2+1
  3043   0011FA  C130  F03C         	movff	colorDetect@redPrint+2,___flge@ff2+2
  3044   0011FE  C131  F03D         	movff	colorDetect@redPrint+3,___flge@ff2+3
  3045   001202  EC73  F024         	call	___flge	;wreg free
  3046   001206  B0D8               	btfsc	status,0,c
  3047   001208  EF08  F009         	goto	u6641
  3048   00120C  EF0A  F009         	goto	u6640
  3049   001210                     u6641:
  3050   001210  EF13  F009         	goto	l5974
  3051   001214                     u6640:
  3052   001214                     l5972:
  3053   001214  0E00               	movlw	0
  3054   001216  0101               	movlb	1	; () banked
  3055   001218  6F2E               	movwf	colorDetect@redPrint& (0+255),b
  3056   00121A  0E00               	movlw	0
  3057   00121C  6F2F               	movwf	(colorDetect@redPrint+1)& (0+255),b
  3058   00121E  0E00               	movlw	0
  3059   001220  6F30               	movwf	(colorDetect@redPrint+2)& (0+255),b
  3060   001222  0E00               	movlw	0
  3061   001224  6F31               	movwf	(colorDetect@redPrint+3)& (0+255),b
  3062   001226                     l5974:
  3063                           
  3064                           ;MazeRobot.X/color.c: 157:         if ((greenPrint < 0) | (greenPrint > 2)) {greenPrint 
      +                          = 0.0;}
  3065   001226  0101               	movlb	1	; () banked
  3066   001228  BF35               	btfsc	(colorDetect@greenPrint+3)& (0+255),7,b
  3067   00122A  EF19  F009         	goto	u6651
  3068   00122E  EF1B  F009         	goto	u6650
  3069   001232                     u6651:
  3070   001232  EF34  F009         	goto	l5978
  3071   001236                     u6650:
  3072   001236                     
  3073                           ; BSR set to: 1
  3074   001236  0E00               	movlw	0
  3075   001238  6E36               	movwf	___flge@ff1^0,c
  3076   00123A  0E00               	movlw	0
  3077   00123C  6E37               	movwf	(___flge@ff1+1)^0,c
  3078   00123E  0E00               	movlw	0
  3079   001240  6E38               	movwf	(___flge@ff1+2)^0,c
  3080   001242  0E40               	movlw	64
  3081   001244  6E39               	movwf	(___flge@ff1+3)^0,c
  3082   001246  C132  F03A         	movff	colorDetect@greenPrint,___flge@ff2
  3083   00124A  C133  F03B         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  3084   00124E  C134  F03C         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  3085   001252  C135  F03D         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  3086   001256  EC73  F024         	call	___flge	;wreg free
  3087   00125A  B0D8               	btfsc	status,0,c
  3088   00125C  EF32  F009         	goto	u6661
  3089   001260  EF34  F009         	goto	u6660
  3090   001264                     u6661:
  3091   001264  EF3D  F009         	goto	l5980
  3092   001268                     u6660:
  3093   001268                     l5978:
  3094   001268  0E00               	movlw	0
  3095   00126A  0101               	movlb	1	; () banked
  3096   00126C  6F32               	movwf	colorDetect@greenPrint& (0+255),b
  3097   00126E  0E00               	movlw	0
  3098   001270  6F33               	movwf	(colorDetect@greenPrint+1)& (0+255),b
  3099   001272  0E00               	movlw	0
  3100   001274  6F34               	movwf	(colorDetect@greenPrint+2)& (0+255),b
  3101   001276  0E00               	movlw	0
  3102   001278  6F35               	movwf	(colorDetect@greenPrint+3)& (0+255),b
  3103   00127A                     l5980:
  3104                           
  3105                           ;MazeRobot.X/color.c: 158:         if ((bluePrint < 0) | (bluePrint > 2)){ bluePrint = 0
      +                          .0;}
  3106   00127A  0101               	movlb	1	; () banked
  3107   00127C  BF39               	btfsc	(colorDetect@bluePrint+3)& (0+255),7,b
  3108   00127E  EF43  F009         	goto	u6671
  3109   001282  EF45  F009         	goto	u6670
  3110   001286                     u6671:
  3111   001286  EF5E  F009         	goto	l5984
  3112   00128A                     u6670:
  3113   00128A                     
  3114                           ; BSR set to: 1
  3115   00128A  0E00               	movlw	0
  3116   00128C  6E36               	movwf	___flge@ff1^0,c
  3117   00128E  0E00               	movlw	0
  3118   001290  6E37               	movwf	(___flge@ff1+1)^0,c
  3119   001292  0E00               	movlw	0
  3120   001294  6E38               	movwf	(___flge@ff1+2)^0,c
  3121   001296  0E40               	movlw	64
  3122   001298  6E39               	movwf	(___flge@ff1+3)^0,c
  3123   00129A  C136  F03A         	movff	colorDetect@bluePrint,___flge@ff2
  3124   00129E  C137  F03B         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  3125   0012A2  C138  F03C         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  3126   0012A6  C139  F03D         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  3127   0012AA  EC73  F024         	call	___flge	;wreg free
  3128   0012AE  B0D8               	btfsc	status,0,c
  3129   0012B0  EF5C  F009         	goto	u6681
  3130   0012B4  EF5E  F009         	goto	u6680
  3131   0012B8                     u6681:
  3132   0012B8  EF67  F009         	goto	l5986
  3133   0012BC                     u6680:
  3134   0012BC                     l5984:
  3135   0012BC  0E00               	movlw	0
  3136   0012BE  0101               	movlb	1	; () banked
  3137   0012C0  6F36               	movwf	colorDetect@bluePrint& (0+255),b
  3138   0012C2  0E00               	movlw	0
  3139   0012C4  6F37               	movwf	(colorDetect@bluePrint+1)& (0+255),b
  3140   0012C6  0E00               	movlw	0
  3141   0012C8  6F38               	movwf	(colorDetect@bluePrint+2)& (0+255),b
  3142   0012CA  0E00               	movlw	0
  3143   0012CC  6F39               	movwf	(colorDetect@bluePrint+3)& (0+255),b
  3144   0012CE                     l5986:
  3145                           
  3146                           ;MazeRobot.X/color.c: 161:         if ((redPrint > 0.9) & (greenPrint > 0.9) & (bluePrin
      +                          t > 0.9)){
  3147   0012CE  0E66               	movlw	102
  3148   0012D0  6E36               	movwf	___flge@ff1^0,c
  3149   0012D2  0E66               	movlw	102
  3150   0012D4  6E37               	movwf	(___flge@ff1+1)^0,c
  3151   0012D6  0E66               	movlw	102
  3152   0012D8  6E38               	movwf	(___flge@ff1+2)^0,c
  3153   0012DA  0E3F               	movlw	63
  3154   0012DC  6E39               	movwf	(___flge@ff1+3)^0,c
  3155   0012DE  C12E  F03A         	movff	colorDetect@redPrint,___flge@ff2
  3156   0012E2  C12F  F03B         	movff	colorDetect@redPrint+1,___flge@ff2+1
  3157   0012E6  C130  F03C         	movff	colorDetect@redPrint+2,___flge@ff2+2
  3158   0012EA  C131  F03D         	movff	colorDetect@redPrint+3,___flge@ff2+3
  3159   0012EE  EC73  F024         	call	___flge	;wreg free
  3160   0012F2  B0D8               	btfsc	status,0,c
  3161   0012F4  EF7E  F009         	goto	u6691
  3162   0012F8  EF80  F009         	goto	u6690
  3163   0012FC                     u6691:
  3164   0012FC  EFC4  F009         	goto	l5994
  3165   001300                     u6690:
  3166   001300  0E66               	movlw	102
  3167   001302  6E36               	movwf	___flge@ff1^0,c
  3168   001304  0E66               	movlw	102
  3169   001306  6E37               	movwf	(___flge@ff1+1)^0,c
  3170   001308  0E66               	movlw	102
  3171   00130A  6E38               	movwf	(___flge@ff1+2)^0,c
  3172   00130C  0E3F               	movlw	63
  3173   00130E  6E39               	movwf	(___flge@ff1+3)^0,c
  3174   001310  C132  F03A         	movff	colorDetect@greenPrint,___flge@ff2
  3175   001314  C133  F03B         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  3176   001318  C134  F03C         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  3177   00131C  C135  F03D         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  3178   001320  EC73  F024         	call	___flge	;wreg free
  3179   001324  B0D8               	btfsc	status,0,c
  3180   001326  EF97  F009         	goto	u6701
  3181   00132A  EF99  F009         	goto	u6700
  3182   00132E                     u6701:
  3183   00132E  EFC4  F009         	goto	l5994
  3184   001332                     u6700:
  3185   001332  0E66               	movlw	102
  3186   001334  6E36               	movwf	___flge@ff1^0,c
  3187   001336  0E66               	movlw	102
  3188   001338  6E37               	movwf	(___flge@ff1+1)^0,c
  3189   00133A  0E66               	movlw	102
  3190   00133C  6E38               	movwf	(___flge@ff1+2)^0,c
  3191   00133E  0E3F               	movlw	63
  3192   001340  6E39               	movwf	(___flge@ff1+3)^0,c
  3193   001342  C136  F03A         	movff	colorDetect@bluePrint,___flge@ff2
  3194   001346  C137  F03B         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  3195   00134A  C138  F03C         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  3196   00134E  C139  F03D         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  3197   001352  EC73  F024         	call	___flge	;wreg free
  3198   001356  B0D8               	btfsc	status,0,c
  3199   001358  EFB0  F009         	goto	u6711
  3200   00135C  EFB2  F009         	goto	u6710
  3201   001360                     u6711:
  3202   001360  EFC4  F009         	goto	l5994
  3203   001364                     u6710:
  3204   001364                     
  3205                           ;MazeRobot.X/color.c: 162:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3206   001364  0E2A               	movlw	42
  3207   001366  0100               	movlb	0	; () banked
  3208   001368  6FE5               	movwf	??_colorDetect& (0+255),b
  3209   00136A  0E8D               	movlw	141
  3210   00136C                     u7237:
  3211   00136C  2EE8               	decfsz	wreg,f,c
  3212   00136E  D7FE               	bra	u7237
  3213   001370  2FE5               	decfsz	??_colorDetect& (0+255),f,b
  3214   001372  D7FC               	bra	u7237
  3215   001374  D000               	nop2	
  3216                           
  3217                           ;MazeRobot.X/color.c: 164:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3218   001376  0E2A               	movlw	42
  3219   001378  0100               	movlb	0	; () banked
  3220   00137A  6FE5               	movwf	??_colorDetect& (0+255),b
  3221   00137C  0E8D               	movlw	141
  3222   00137E                     u7247:
  3223   00137E  2EE8               	decfsz	wreg,f,c
  3224   001380  D7FE               	bra	u7247
  3225   001382  2FE5               	decfsz	??_colorDetect& (0+255),f,b
  3226   001384  D7FC               	bra	u7247
  3227   001386  D000               	nop2	
  3228   001388                     l5994:
  3229                           
  3230                           ;MazeRobot.X/color.c: 168:         if ((redPrint > 1.5) & (redPrint - greenPrint > 0.8) 
      +                          & (redPrint -bluePrint > 0.8)){
  3231   001388  0E00               	movlw	0
  3232   00138A  6E36               	movwf	___flge@ff1^0,c
  3233   00138C  0E00               	movlw	0
  3234   00138E  6E37               	movwf	(___flge@ff1+1)^0,c
  3235   001390  0EC0               	movlw	192
  3236   001392  6E38               	movwf	(___flge@ff1+2)^0,c
  3237   001394  0E3F               	movlw	63
  3238   001396  6E39               	movwf	(___flge@ff1+3)^0,c
  3239   001398  C12E  F03A         	movff	colorDetect@redPrint,___flge@ff2
  3240   00139C  C12F  F03B         	movff	colorDetect@redPrint+1,___flge@ff2+1
  3241   0013A0  C130  F03C         	movff	colorDetect@redPrint+2,___flge@ff2+2
  3242   0013A4  C131  F03D         	movff	colorDetect@redPrint+3,___flge@ff2+3
  3243   0013A8  EC73  F024         	call	___flge	;wreg free
  3244   0013AC  B0D8               	btfsc	status,0,c
  3245   0013AE  EFDB  F009         	goto	u6721
  3246   0013B2  EFDD  F009         	goto	u6720
  3247   0013B6                     u6721:
  3248   0013B6  EF46  F00A         	goto	l6004
  3249   0013BA                     u6720:
  3250   0013BA  0ECD               	movlw	205
  3251   0013BC  6E36               	movwf	___flge@ff1^0,c
  3252   0013BE  0ECC               	movlw	204
  3253   0013C0  6E37               	movwf	(___flge@ff1+1)^0,c
  3254   0013C2  0E4C               	movlw	76
  3255   0013C4  6E38               	movwf	(___flge@ff1+2)^0,c
  3256   0013C6  0E3F               	movlw	63
  3257   0013C8  6E39               	movwf	(___flge@ff1+3)^0,c
  3258   0013CA  C132  F019         	movff	colorDetect@greenPrint,___flsub@a
  3259   0013CE  C133  F01A         	movff	colorDetect@greenPrint+1,___flsub@a+1
  3260   0013D2  C134  F01B         	movff	colorDetect@greenPrint+2,___flsub@a+2
  3261   0013D6  C135  F01C         	movff	colorDetect@greenPrint+3,___flsub@a+3
  3262   0013DA  C12E  F015         	movff	colorDetect@redPrint,___flsub@b
  3263   0013DE  C12F  F016         	movff	colorDetect@redPrint+1,___flsub@b+1
  3264   0013E2  C130  F017         	movff	colorDetect@redPrint+2,___flsub@b+2
  3265   0013E6  C131  F018         	movff	colorDetect@redPrint+3,___flsub@b+3
  3266   0013EA  ECA6  F02B         	call	___flsub	;wreg free
  3267   0013EE  C015  F03A         	movff	?___flsub,___flge@ff2
  3268   0013F2  C016  F03B         	movff	?___flsub+1,___flge@ff2+1
  3269   0013F6  C017  F03C         	movff	?___flsub+2,___flge@ff2+2
  3270   0013FA  C018  F03D         	movff	?___flsub+3,___flge@ff2+3
  3271   0013FE  EC73  F024         	call	___flge	;wreg free
  3272   001402  B0D8               	btfsc	status,0,c
  3273   001404  EF06  F00A         	goto	u6731
  3274   001408  EF08  F00A         	goto	u6730
  3275   00140C                     u6731:
  3276   00140C  EF46  F00A         	goto	l6004
  3277   001410                     u6730:
  3278   001410  0ECD               	movlw	205
  3279   001412  6E36               	movwf	___flge@ff1^0,c
  3280   001414  0ECC               	movlw	204
  3281   001416  6E37               	movwf	(___flge@ff1+1)^0,c
  3282   001418  0E4C               	movlw	76
  3283   00141A  6E38               	movwf	(___flge@ff1+2)^0,c
  3284   00141C  0E3F               	movlw	63
  3285   00141E  6E39               	movwf	(___flge@ff1+3)^0,c
  3286   001420  C136  F019         	movff	colorDetect@bluePrint,___flsub@a
  3287   001424  C137  F01A         	movff	colorDetect@bluePrint+1,___flsub@a+1
  3288   001428  C138  F01B         	movff	colorDetect@bluePrint+2,___flsub@a+2
  3289   00142C  C139  F01C         	movff	colorDetect@bluePrint+3,___flsub@a+3
  3290   001430  C12E  F015         	movff	colorDetect@redPrint,___flsub@b
  3291   001434  C12F  F016         	movff	colorDetect@redPrint+1,___flsub@b+1
  3292   001438  C130  F017         	movff	colorDetect@redPrint+2,___flsub@b+2
  3293   00143C  C131  F018         	movff	colorDetect@redPrint+3,___flsub@b+3
  3294   001440  ECA6  F02B         	call	___flsub	;wreg free
  3295   001444  C015  F03A         	movff	?___flsub,___flge@ff2
  3296   001448  C016  F03B         	movff	?___flsub+1,___flge@ff2+1
  3297   00144C  C017  F03C         	movff	?___flsub+2,___flge@ff2+2
  3298   001450  C018  F03D         	movff	?___flsub+3,___flge@ff2+3
  3299   001454  EC73  F024         	call	___flge	;wreg free
  3300   001458  B0D8               	btfsc	status,0,c
  3301   00145A  EF31  F00A         	goto	u6741
  3302   00145E  EF33  F00A         	goto	u6740
  3303   001462                     u6741:
  3304   001462  EF46  F00A         	goto	l6004
  3305   001466                     u6740:
  3306   001466                     
  3307                           ;MazeRobot.X/color.c: 169:             turnRight_90(mL,mR);
  3308   001466  C0E1  F01E         	movff	colorDetect@mL,turnRight_90@mL
  3309   00146A  C0E2  F01F         	movff	colorDetect@mL+1,turnRight_90@mL+1
  3310   00146E  C0E3  F020         	movff	colorDetect@mR,turnRight_90@mR
  3311   001472  C0E4  F021         	movff	colorDetect@mR+1,turnRight_90@mR+1
  3312   001476  EC14  F022         	call	_turnRight_90	;wreg free
  3313   00147A                     
  3314                           ;MazeRobot.X/color.c: 170:             _delay((unsigned long)((2)*(64000000/4000.0)));
  3315   00147A  0E2A               	movlw	42
  3316   00147C  0100               	movlb	0	; () banked
  3317   00147E  6FE5               	movwf	??_colorDetect& (0+255),b
  3318   001480  0E8D               	movlw	141
  3319   001482                     u7257:
  3320   001482  2EE8               	decfsz	wreg,f,c
  3321   001484  D7FE               	bra	u7257
  3322   001486  2FE5               	decfsz	??_colorDetect& (0+255),f,b
  3323   001488  D7FC               	bra	u7257
  3324   00148A  D000               	nop2	
  3325   00148C                     l6004:
  3326                           
  3327                           ;MazeRobot.X/color.c: 174:         if ((redPrint > 1.3) & (greenPrint > 0.5) & (bluePrin
      +                          t > 0.5)){
  3328   00148C  0E66               	movlw	102
  3329   00148E  6E36               	movwf	___flge@ff1^0,c
  3330   001490  0E66               	movlw	102
  3331   001492  6E37               	movwf	(___flge@ff1+1)^0,c
  3332   001494  0EA6               	movlw	166
  3333   001496  6E38               	movwf	(___flge@ff1+2)^0,c
  3334   001498  0E3F               	movlw	63
  3335   00149A  6E39               	movwf	(___flge@ff1+3)^0,c
  3336   00149C  C12E  F03A         	movff	colorDetect@redPrint,___flge@ff2
  3337   0014A0  C12F  F03B         	movff	colorDetect@redPrint+1,___flge@ff2+1
  3338   0014A4  C130  F03C         	movff	colorDetect@redPrint+2,___flge@ff2+2
  3339   0014A8  C131  F03D         	movff	colorDetect@redPrint+3,___flge@ff2+3
  3340   0014AC  EC73  F024         	call	___flge	;wreg free
  3341   0014B0  B0D8               	btfsc	status,0,c
  3342   0014B2  EF5D  F00A         	goto	u6751
  3343   0014B6  EF5F  F00A         	goto	u6750
  3344   0014BA                     u6751:
  3345   0014BA  EFAD  F00A         	goto	l6016
  3346   0014BE                     u6750:
  3347   0014BE  0E00               	movlw	0
  3348   0014C0  6E36               	movwf	___flge@ff1^0,c
  3349   0014C2  0E00               	movlw	0
  3350   0014C4  6E37               	movwf	(___flge@ff1+1)^0,c
  3351   0014C6  0E00               	movlw	0
  3352   0014C8  6E38               	movwf	(___flge@ff1+2)^0,c
  3353   0014CA  0E3F               	movlw	63
  3354   0014CC  6E39               	movwf	(___flge@ff1+3)^0,c
  3355   0014CE  C132  F03A         	movff	colorDetect@greenPrint,___flge@ff2
  3356   0014D2  C133  F03B         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  3357   0014D6  C134  F03C         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  3358   0014DA  C135  F03D         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  3359   0014DE  EC73  F024         	call	___flge	;wreg free
  3360   0014E2  B0D8               	btfsc	status,0,c
  3361   0014E4  EF76  F00A         	goto	u6761
  3362   0014E8  EF78  F00A         	goto	u6760
  3363   0014EC                     u6761:
  3364   0014EC  EFAD  F00A         	goto	l6016
  3365   0014F0                     u6760:
  3366   0014F0  0E00               	movlw	0
  3367   0014F2  6E36               	movwf	___flge@ff1^0,c
  3368   0014F4  0E00               	movlw	0
  3369   0014F6  6E37               	movwf	(___flge@ff1+1)^0,c
  3370   0014F8  0E00               	movlw	0
  3371   0014FA  6E38               	movwf	(___flge@ff1+2)^0,c
  3372   0014FC  0E3F               	movlw	63
  3373   0014FE  6E39               	movwf	(___flge@ff1+3)^0,c
  3374   001500  C136  F03A         	movff	colorDetect@bluePrint,___flge@ff2
  3375   001504  C137  F03B         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  3376   001508  C138  F03C         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  3377   00150C  C139  F03D         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  3378   001510  EC73  F024         	call	___flge	;wreg free
  3379   001514  B0D8               	btfsc	status,0,c
  3380   001516  EF8F  F00A         	goto	u6771
  3381   00151A  EF91  F00A         	goto	u6770
  3382   00151E                     u6771:
  3383   00151E  EFAD  F00A         	goto	l6016
  3384   001522                     u6770:
  3385   001522                     
  3386                           ;MazeRobot.X/color.c: 175:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3387   001522  0E2A               	movlw	42
  3388   001524  0100               	movlb	0	; () banked
  3389   001526  6FE5               	movwf	??_colorDetect& (0+255),b
  3390   001528  0E8D               	movlw	141
  3391   00152A                     u7267:
  3392   00152A  2EE8               	decfsz	wreg,f,c
  3393   00152C  D7FE               	bra	u7267
  3394   00152E  2FE5               	decfsz	??_colorDetect& (0+255),f,b
  3395   001530  D7FC               	bra	u7267
  3396   001532  D000               	nop2	
  3397   001534                     
  3398                           ;MazeRobot.X/color.c: 176:         turnRight_135(mL,mR);
  3399   001534  C0E1  F01E         	movff	colorDetect@mL,turnRight_135@mL
  3400   001538  C0E2  F01F         	movff	colorDetect@mL+1,turnRight_135@mL+1
  3401   00153C  C0E3  F020         	movff	colorDetect@mR,turnRight_135@mR
  3402   001540  C0E4  F021         	movff	colorDetect@mR+1,turnRight_135@mR+1
  3403   001544  EC75  F021         	call	_turnRight_135	;wreg free
  3404   001548                     
  3405                           ;MazeRobot.X/color.c: 177:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3406   001548  0E2A               	movlw	42
  3407   00154A  0100               	movlb	0	; () banked
  3408   00154C  6FE5               	movwf	??_colorDetect& (0+255),b
  3409   00154E  0E8D               	movlw	141
  3410   001550                     u7277:
  3411   001550  2EE8               	decfsz	wreg,f,c
  3412   001552  D7FE               	bra	u7277
  3413   001554  2FE5               	decfsz	??_colorDetect& (0+255),f,b
  3414   001556  D7FC               	bra	u7277
  3415   001558  D000               	nop2	
  3416   00155A                     l6016:
  3417                           
  3418                           ;MazeRobot.X/color.c: 182:         if ((redPrint > 1.0) & (greenPrint > 0.8) & (bluePrin
      +                          t < 0.8)){
  3419   00155A  0E00               	movlw	0
  3420   00155C  6E36               	movwf	___flge@ff1^0,c
  3421   00155E  0E00               	movlw	0
  3422   001560  6E37               	movwf	(___flge@ff1+1)^0,c
  3423   001562  0E80               	movlw	128
  3424   001564  6E38               	movwf	(___flge@ff1+2)^0,c
  3425   001566  0E3F               	movlw	63
  3426   001568  6E39               	movwf	(___flge@ff1+3)^0,c
  3427   00156A  C12E  F03A         	movff	colorDetect@redPrint,___flge@ff2
  3428   00156E  C12F  F03B         	movff	colorDetect@redPrint+1,___flge@ff2+1
  3429   001572  C130  F03C         	movff	colorDetect@redPrint+2,___flge@ff2+2
  3430   001576  C131  F03D         	movff	colorDetect@redPrint+3,___flge@ff2+3
  3431   00157A  EC73  F024         	call	___flge	;wreg free
  3432   00157E  B0D8               	btfsc	status,0,c
  3433   001580  EFC4  F00A         	goto	u6781
  3434   001584  EFC6  F00A         	goto	u6780
  3435   001588                     u6781:
  3436   001588  EF14  F00B         	goto	l6028
  3437   00158C                     u6780:
  3438   00158C  0ECD               	movlw	205
  3439   00158E  6E36               	movwf	___flge@ff1^0,c
  3440   001590  0ECC               	movlw	204
  3441   001592  6E37               	movwf	(___flge@ff1+1)^0,c
  3442   001594  0E4C               	movlw	76
  3443   001596  6E38               	movwf	(___flge@ff1+2)^0,c
  3444   001598  0E3F               	movlw	63
  3445   00159A  6E39               	movwf	(___flge@ff1+3)^0,c
  3446   00159C  C132  F03A         	movff	colorDetect@greenPrint,___flge@ff2
  3447   0015A0  C133  F03B         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  3448   0015A4  C134  F03C         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  3449   0015A8  C135  F03D         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  3450   0015AC  EC73  F024         	call	___flge	;wreg free
  3451   0015B0  B0D8               	btfsc	status,0,c
  3452   0015B2  EFDD  F00A         	goto	u6791
  3453   0015B6  EFDF  F00A         	goto	u6790
  3454   0015BA                     u6791:
  3455   0015BA  EF14  F00B         	goto	l6028
  3456   0015BE                     u6790:
  3457   0015BE  C136  F036         	movff	colorDetect@bluePrint,___flge@ff1
  3458   0015C2  C137  F037         	movff	colorDetect@bluePrint+1,___flge@ff1+1
  3459   0015C6  C138  F038         	movff	colorDetect@bluePrint+2,___flge@ff1+2
  3460   0015CA  C139  F039         	movff	colorDetect@bluePrint+3,___flge@ff1+3
  3461   0015CE  0ECD               	movlw	205
  3462   0015D0  6E3A               	movwf	___flge@ff2^0,c
  3463   0015D2  0ECC               	movlw	204
  3464   0015D4  6E3B               	movwf	(___flge@ff2+1)^0,c
  3465   0015D6  0E4C               	movlw	76
  3466   0015D8  6E3C               	movwf	(___flge@ff2+2)^0,c
  3467   0015DA  0E3F               	movlw	63
  3468   0015DC  6E3D               	movwf	(___flge@ff2+3)^0,c
  3469   0015DE  EC73  F024         	call	___flge	;wreg free
  3470   0015E2  B0D8               	btfsc	status,0,c
  3471   0015E4  EFF6  F00A         	goto	u6801
  3472   0015E8  EFF8  F00A         	goto	u6800
  3473   0015EC                     u6801:
  3474   0015EC  EF14  F00B         	goto	l6028
  3475   0015F0                     u6800:
  3476   0015F0                     
  3477                           ;MazeRobot.X/color.c: 184:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3478   0015F0  0E2A               	movlw	42
  3479   0015F2  0100               	movlb	0	; () banked
  3480   0015F4  6FE5               	movwf	??_colorDetect& (0+255),b
  3481   0015F6  0E8D               	movlw	141
  3482   0015F8                     u7287:
  3483   0015F8  2EE8               	decfsz	wreg,f,c
  3484   0015FA  D7FE               	bra	u7287
  3485   0015FC  2FE5               	decfsz	??_colorDetect& (0+255),f,b
  3486   0015FE  D7FC               	bra	u7287
  3487   001600  D000               	nop2	
  3488   001602                     
  3489                           ;MazeRobot.X/color.c: 185:         reverseSquareRight(mL,mR);
  3490   001602  C0E1  F024         	movff	colorDetect@mL,reverseSquareRight@mL
  3491   001606  C0E2  F025         	movff	colorDetect@mL+1,reverseSquareRight@mL+1
  3492   00160A  C0E3  F026         	movff	colorDetect@mR,reverseSquareRight@mR
  3493   00160E  C0E4  F027         	movff	colorDetect@mR+1,reverseSquareRight@mR+1
  3494   001612  ECA8  F028         	call	_reverseSquareRight	;wreg free
  3495   001616                     
  3496                           ;MazeRobot.X/color.c: 186:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3497   001616  0E2A               	movlw	42
  3498   001618  0100               	movlb	0	; () banked
  3499   00161A  6FE5               	movwf	??_colorDetect& (0+255),b
  3500   00161C  0E8D               	movlw	141
  3501   00161E                     u7297:
  3502   00161E  2EE8               	decfsz	wreg,f,c
  3503   001620  D7FE               	bra	u7297
  3504   001622  2FE5               	decfsz	??_colorDetect& (0+255),f,b
  3505   001624  D7FC               	bra	u7297
  3506   001626  D000               	nop2	
  3507   001628                     l6028:
  3508                           
  3509                           ;MazeRobot.X/color.c: 190:         if ((bluePrint - redPrint > 0.7) & (bluePrint - green
      +                          Print > 0.3) & (bluePrint > 0.7 )){
  3510   001628  0E33               	movlw	51
  3511   00162A  6E36               	movwf	___flge@ff1^0,c
  3512   00162C  0E33               	movlw	51
  3513   00162E  6E37               	movwf	(___flge@ff1+1)^0,c
  3514   001630  0E33               	movlw	51
  3515   001632  6E38               	movwf	(___flge@ff1+2)^0,c
  3516   001634  0E3F               	movlw	63
  3517   001636  6E39               	movwf	(___flge@ff1+3)^0,c
  3518   001638  C12E  F019         	movff	colorDetect@redPrint,___flsub@a
  3519   00163C  C12F  F01A         	movff	colorDetect@redPrint+1,___flsub@a+1
  3520   001640  C130  F01B         	movff	colorDetect@redPrint+2,___flsub@a+2
  3521   001644  C131  F01C         	movff	colorDetect@redPrint+3,___flsub@a+3
  3522   001648  C136  F015         	movff	colorDetect@bluePrint,___flsub@b
  3523   00164C  C137  F016         	movff	colorDetect@bluePrint+1,___flsub@b+1
  3524   001650  C138  F017         	movff	colorDetect@bluePrint+2,___flsub@b+2
  3525   001654  C139  F018         	movff	colorDetect@bluePrint+3,___flsub@b+3
  3526   001658  ECA6  F02B         	call	___flsub	;wreg free
  3527   00165C  C015  F03A         	movff	?___flsub,___flge@ff2
  3528   001660  C016  F03B         	movff	?___flsub+1,___flge@ff2+1
  3529   001664  C017  F03C         	movff	?___flsub+2,___flge@ff2+2
  3530   001668  C018  F03D         	movff	?___flsub+3,___flge@ff2+3
  3531   00166C  EC73  F024         	call	___flge	;wreg free
  3532   001670  B0D8               	btfsc	status,0,c
  3533   001672  EF3D  F00B         	goto	u6811
  3534   001676  EF3F  F00B         	goto	u6810
  3535   00167A                     u6811:
  3536   00167A  EF9F  F00B         	goto	l6040
  3537   00167E                     u6810:
  3538   00167E  0E9A               	movlw	154
  3539   001680  6E36               	movwf	___flge@ff1^0,c
  3540   001682  0E99               	movlw	153
  3541   001684  6E37               	movwf	(___flge@ff1+1)^0,c
  3542   001686  0E99               	movlw	153
  3543   001688  6E38               	movwf	(___flge@ff1+2)^0,c
  3544   00168A  0E3E               	movlw	62
  3545   00168C  6E39               	movwf	(___flge@ff1+3)^0,c
  3546   00168E  C132  F019         	movff	colorDetect@greenPrint,___flsub@a
  3547   001692  C133  F01A         	movff	colorDetect@greenPrint+1,___flsub@a+1
  3548   001696  C134  F01B         	movff	colorDetect@greenPrint+2,___flsub@a+2
  3549   00169A  C135  F01C         	movff	colorDetect@greenPrint+3,___flsub@a+3
  3550   00169E  C136  F015         	movff	colorDetect@bluePrint,___flsub@b
  3551   0016A2  C137  F016         	movff	colorDetect@bluePrint+1,___flsub@b+1
  3552   0016A6  C138  F017         	movff	colorDetect@bluePrint+2,___flsub@b+2
  3553   0016AA  C139  F018         	movff	colorDetect@bluePrint+3,___flsub@b+3
  3554   0016AE  ECA6  F02B         	call	___flsub	;wreg free
  3555   0016B2  C015  F03A         	movff	?___flsub,___flge@ff2
  3556   0016B6  C016  F03B         	movff	?___flsub+1,___flge@ff2+1
  3557   0016BA  C017  F03C         	movff	?___flsub+2,___flge@ff2+2
  3558   0016BE  C018  F03D         	movff	?___flsub+3,___flge@ff2+3
  3559   0016C2  EC73  F024         	call	___flge	;wreg free
  3560   0016C6  B0D8               	btfsc	status,0,c
  3561   0016C8  EF68  F00B         	goto	u6821
  3562   0016CC  EF6A  F00B         	goto	u6820
  3563   0016D0                     u6821:
  3564   0016D0  EF9F  F00B         	goto	l6040
  3565   0016D4                     u6820:
  3566   0016D4  0E33               	movlw	51
  3567   0016D6  6E36               	movwf	___flge@ff1^0,c
  3568   0016D8  0E33               	movlw	51
  3569   0016DA  6E37               	movwf	(___flge@ff1+1)^0,c
  3570   0016DC  0E33               	movlw	51
  3571   0016DE  6E38               	movwf	(___flge@ff1+2)^0,c
  3572   0016E0  0E3F               	movlw	63
  3573   0016E2  6E39               	movwf	(___flge@ff1+3)^0,c
  3574   0016E4  C136  F03A         	movff	colorDetect@bluePrint,___flge@ff2
  3575   0016E8  C137  F03B         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  3576   0016EC  C138  F03C         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  3577   0016F0  C139  F03D         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  3578   0016F4  EC73  F024         	call	___flge	;wreg free
  3579   0016F8  B0D8               	btfsc	status,0,c
  3580   0016FA  EF81  F00B         	goto	u6831
  3581   0016FE  EF83  F00B         	goto	u6830
  3582   001702                     u6831:
  3583   001702  EF9F  F00B         	goto	l6040
  3584   001706                     u6830:
  3585   001706                     
  3586                           ;MazeRobot.X/color.c: 191:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3587   001706  0E2A               	movlw	42
  3588   001708  0100               	movlb	0	; () banked
  3589   00170A  6FE5               	movwf	??_colorDetect& (0+255),b
  3590   00170C  0E8D               	movlw	141
  3591   00170E                     u7307:
  3592   00170E  2EE8               	decfsz	wreg,f,c
  3593   001710  D7FE               	bra	u7307
  3594   001712  2FE5               	decfsz	??_colorDetect& (0+255),f,b
  3595   001714  D7FC               	bra	u7307
  3596   001716  D000               	nop2	
  3597   001718                     
  3598                           ;MazeRobot.X/color.c: 192:         turn_180(mL,mR);
  3599   001718  C0E1  F024         	movff	colorDetect@mL,turn_180@mL
  3600   00171C  C0E2  F025         	movff	colorDetect@mL+1,turn_180@mL+1
  3601   001720  C0E3  F026         	movff	colorDetect@mR,turn_180@mR
  3602   001724  C0E4  F027         	movff	colorDetect@mR+1,turn_180@mR+1
  3603   001728  EC4E  F02C         	call	_turn_180	;wreg free
  3604   00172C                     
  3605                           ;MazeRobot.X/color.c: 193:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3606   00172C  0E2A               	movlw	42
  3607   00172E  0100               	movlb	0	; () banked
  3608   001730  6FE5               	movwf	??_colorDetect& (0+255),b
  3609   001732  0E8D               	movlw	141
  3610   001734                     u7317:
  3611   001734  2EE8               	decfsz	wreg,f,c
  3612   001736  D7FE               	bra	u7317
  3613   001738  2FE5               	decfsz	??_colorDetect& (0+255),f,b
  3614   00173A  D7FC               	bra	u7317
  3615   00173C  D000               	nop2	
  3616   00173E                     l6040:
  3617                           
  3618                           ;MazeRobot.X/color.c: 197:         if ((greenPrint - redPrint > 0.4 ) & (greenPrint > 1)
      +                           & (greenPrint - bluePrint > 0.4 )){
  3619   00173E  0ECD               	movlw	205
  3620   001740  6E36               	movwf	___flge@ff1^0,c
  3621   001742  0ECC               	movlw	204
  3622   001744  6E37               	movwf	(___flge@ff1+1)^0,c
  3623   001746  0ECC               	movlw	204
  3624   001748  6E38               	movwf	(___flge@ff1+2)^0,c
  3625   00174A  0E3E               	movlw	62
  3626   00174C  6E39               	movwf	(___flge@ff1+3)^0,c
  3627   00174E  C12E  F019         	movff	colorDetect@redPrint,___flsub@a
  3628   001752  C12F  F01A         	movff	colorDetect@redPrint+1,___flsub@a+1
  3629   001756  C130  F01B         	movff	colorDetect@redPrint+2,___flsub@a+2
  3630   00175A  C131  F01C         	movff	colorDetect@redPrint+3,___flsub@a+3
  3631   00175E  C132  F015         	movff	colorDetect@greenPrint,___flsub@b
  3632   001762  C133  F016         	movff	colorDetect@greenPrint+1,___flsub@b+1
  3633   001766  C134  F017         	movff	colorDetect@greenPrint+2,___flsub@b+2
  3634   00176A  C135  F018         	movff	colorDetect@greenPrint+3,___flsub@b+3
  3635   00176E  ECA6  F02B         	call	___flsub	;wreg free
  3636   001772  C015  F03A         	movff	?___flsub,___flge@ff2
  3637   001776  C016  F03B         	movff	?___flsub+1,___flge@ff2+1
  3638   00177A  C017  F03C         	movff	?___flsub+2,___flge@ff2+2
  3639   00177E  C018  F03D         	movff	?___flsub+3,___flge@ff2+3
  3640   001782  EC73  F024         	call	___flge	;wreg free
  3641   001786  B0D8               	btfsc	status,0,c
  3642   001788  EFC8  F00B         	goto	u6841
  3643   00178C  EFCA  F00B         	goto	u6840
  3644   001790                     u6841:
  3645   001790  EF2A  F00C         	goto	l6052
  3646   001794                     u6840:
  3647   001794  0E00               	movlw	0
  3648   001796  6E36               	movwf	___flge@ff1^0,c
  3649   001798  0E00               	movlw	0
  3650   00179A  6E37               	movwf	(___flge@ff1+1)^0,c
  3651   00179C  0E80               	movlw	128
  3652   00179E  6E38               	movwf	(___flge@ff1+2)^0,c
  3653   0017A0  0E3F               	movlw	63
  3654   0017A2  6E39               	movwf	(___flge@ff1+3)^0,c
  3655   0017A4  C132  F03A         	movff	colorDetect@greenPrint,___flge@ff2
  3656   0017A8  C133  F03B         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  3657   0017AC  C134  F03C         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  3658   0017B0  C135  F03D         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  3659   0017B4  EC73  F024         	call	___flge	;wreg free
  3660   0017B8  B0D8               	btfsc	status,0,c
  3661   0017BA  EFE1  F00B         	goto	u6851
  3662   0017BE  EFE3  F00B         	goto	u6850
  3663   0017C2                     u6851:
  3664   0017C2  EF2A  F00C         	goto	l6052
  3665   0017C6                     u6850:
  3666   0017C6  0ECD               	movlw	205
  3667   0017C8  6E36               	movwf	___flge@ff1^0,c
  3668   0017CA  0ECC               	movlw	204
  3669   0017CC  6E37               	movwf	(___flge@ff1+1)^0,c
  3670   0017CE  0ECC               	movlw	204
  3671   0017D0  6E38               	movwf	(___flge@ff1+2)^0,c
  3672   0017D2  0E3E               	movlw	62
  3673   0017D4  6E39               	movwf	(___flge@ff1+3)^0,c
  3674   0017D6  C136  F019         	movff	colorDetect@bluePrint,___flsub@a
  3675   0017DA  C137  F01A         	movff	colorDetect@bluePrint+1,___flsub@a+1
  3676   0017DE  C138  F01B         	movff	colorDetect@bluePrint+2,___flsub@a+2
  3677   0017E2  C139  F01C         	movff	colorDetect@bluePrint+3,___flsub@a+3
  3678   0017E6  C132  F015         	movff	colorDetect@greenPrint,___flsub@b
  3679   0017EA  C133  F016         	movff	colorDetect@greenPrint+1,___flsub@b+1
  3680   0017EE  C134  F017         	movff	colorDetect@greenPrint+2,___flsub@b+2
  3681   0017F2  C135  F018         	movff	colorDetect@greenPrint+3,___flsub@b+3
  3682   0017F6  ECA6  F02B         	call	___flsub	;wreg free
  3683   0017FA  C015  F03A         	movff	?___flsub,___flge@ff2
  3684   0017FE  C016  F03B         	movff	?___flsub+1,___flge@ff2+1
  3685   001802  C017  F03C         	movff	?___flsub+2,___flge@ff2+2
  3686   001806  C018  F03D         	movff	?___flsub+3,___flge@ff2+3
  3687   00180A  EC73  F024         	call	___flge	;wreg free
  3688   00180E  B0D8               	btfsc	status,0,c
  3689   001810  EF0C  F00C         	goto	u6861
  3690   001814  EF0E  F00C         	goto	u6860
  3691   001818                     u6861:
  3692   001818  EF2A  F00C         	goto	l6052
  3693   00181C                     u6860:
  3694   00181C                     
  3695                           ;MazeRobot.X/color.c: 198:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3696   00181C  0E2A               	movlw	42
  3697   00181E  0100               	movlb	0	; () banked
  3698   001820  6FE5               	movwf	??_colorDetect& (0+255),b
  3699   001822  0E8D               	movlw	141
  3700   001824                     u7327:
  3701   001824  2EE8               	decfsz	wreg,f,c
  3702   001826  D7FE               	bra	u7327
  3703   001828  2FE5               	decfsz	??_colorDetect& (0+255),f,b
  3704   00182A  D7FC               	bra	u7327
  3705   00182C  D000               	nop2	
  3706   00182E                     
  3707                           ;MazeRobot.X/color.c: 199:         turnLeft_90(mL,mR);
  3708   00182E  C0E1  F01E         	movff	colorDetect@mL,turnLeft_90@mL
  3709   001832  C0E2  F01F         	movff	colorDetect@mL+1,turnLeft_90@mL+1
  3710   001836  C0E3  F020         	movff	colorDetect@mR,turnLeft_90@mR
  3711   00183A  C0E4  F021         	movff	colorDetect@mR+1,turnLeft_90@mR+1
  3712   00183E  ECB3  F022         	call	_turnLeft_90	;wreg free
  3713   001842                     
  3714                           ;MazeRobot.X/color.c: 200:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3715   001842  0E2A               	movlw	42
  3716   001844  0100               	movlb	0	; () banked
  3717   001846  6FE5               	movwf	??_colorDetect& (0+255),b
  3718   001848  0E8D               	movlw	141
  3719   00184A                     u7337:
  3720   00184A  2EE8               	decfsz	wreg,f,c
  3721   00184C  D7FE               	bra	u7337
  3722   00184E  2FE5               	decfsz	??_colorDetect& (0+255),f,b
  3723   001850  D7FC               	bra	u7337
  3724   001852  D000               	nop2	
  3725   001854                     l6052:
  3726                           
  3727                           ;MazeRobot.X/color.c: 204:         if ((redPrint < 0.7) & (greenPrint > 1.0)& (bluePrint
      +                           > 1.0)){
  3728   001854  C12E  F036         	movff	colorDetect@redPrint,___flge@ff1
  3729   001858  C12F  F037         	movff	colorDetect@redPrint+1,___flge@ff1+1
  3730   00185C  C130  F038         	movff	colorDetect@redPrint+2,___flge@ff1+2
  3731   001860  C131  F039         	movff	colorDetect@redPrint+3,___flge@ff1+3
  3732   001864  0E33               	movlw	51
  3733   001866  6E3A               	movwf	___flge@ff2^0,c
  3734   001868  0E33               	movlw	51
  3735   00186A  6E3B               	movwf	(___flge@ff2+1)^0,c
  3736   00186C  0E33               	movlw	51
  3737   00186E  6E3C               	movwf	(___flge@ff2+2)^0,c
  3738   001870  0E3F               	movlw	63
  3739   001872  6E3D               	movwf	(___flge@ff2+3)^0,c
  3740   001874  EC73  F024         	call	___flge	;wreg free
  3741   001878  B0D8               	btfsc	status,0,c
  3742   00187A  EF41  F00C         	goto	u6871
  3743   00187E  EF43  F00C         	goto	u6870
  3744   001882                     u6871:
  3745   001882  EF91  F00C         	goto	l6064
  3746   001886                     u6870:
  3747   001886  0E00               	movlw	0
  3748   001888  6E36               	movwf	___flge@ff1^0,c
  3749   00188A  0E00               	movlw	0
  3750   00188C  6E37               	movwf	(___flge@ff1+1)^0,c
  3751   00188E  0E80               	movlw	128
  3752   001890  6E38               	movwf	(___flge@ff1+2)^0,c
  3753   001892  0E3F               	movlw	63
  3754   001894  6E39               	movwf	(___flge@ff1+3)^0,c
  3755   001896  C132  F03A         	movff	colorDetect@greenPrint,___flge@ff2
  3756   00189A  C133  F03B         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  3757   00189E  C134  F03C         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  3758   0018A2  C135  F03D         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  3759   0018A6  EC73  F024         	call	___flge	;wreg free
  3760   0018AA  B0D8               	btfsc	status,0,c
  3761   0018AC  EF5A  F00C         	goto	u6881
  3762   0018B0  EF5C  F00C         	goto	u6880
  3763   0018B4                     u6881:
  3764   0018B4  EF91  F00C         	goto	l6064
  3765   0018B8                     u6880:
  3766   0018B8  0E00               	movlw	0
  3767   0018BA  6E36               	movwf	___flge@ff1^0,c
  3768   0018BC  0E00               	movlw	0
  3769   0018BE  6E37               	movwf	(___flge@ff1+1)^0,c
  3770   0018C0  0E80               	movlw	128
  3771   0018C2  6E38               	movwf	(___flge@ff1+2)^0,c
  3772   0018C4  0E3F               	movlw	63
  3773   0018C6  6E39               	movwf	(___flge@ff1+3)^0,c
  3774   0018C8  C136  F03A         	movff	colorDetect@bluePrint,___flge@ff2
  3775   0018CC  C137  F03B         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  3776   0018D0  C138  F03C         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  3777   0018D4  C139  F03D         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  3778   0018D8  EC73  F024         	call	___flge	;wreg free
  3779   0018DC  B0D8               	btfsc	status,0,c
  3780   0018DE  EF73  F00C         	goto	u6891
  3781   0018E2  EF75  F00C         	goto	u6890
  3782   0018E6                     u6891:
  3783   0018E6  EF91  F00C         	goto	l6064
  3784   0018EA                     u6890:
  3785   0018EA                     
  3786                           ;MazeRobot.X/color.c: 205:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3787   0018EA  0E2A               	movlw	42
  3788   0018EC  0100               	movlb	0	; () banked
  3789   0018EE  6FE5               	movwf	??_colorDetect& (0+255),b
  3790   0018F0  0E8D               	movlw	141
  3791   0018F2                     u7347:
  3792   0018F2  2EE8               	decfsz	wreg,f,c
  3793   0018F4  D7FE               	bra	u7347
  3794   0018F6  2FE5               	decfsz	??_colorDetect& (0+255),f,b
  3795   0018F8  D7FC               	bra	u7347
  3796   0018FA  D000               	nop2	
  3797   0018FC                     
  3798                           ;MazeRobot.X/color.c: 206:         turnLeft_135(mL,mR);
  3799   0018FC  C0E1  F01E         	movff	colorDetect@mL,turnLeft_135@mL
  3800   001900  C0E2  F01F         	movff	colorDetect@mL+1,turnLeft_135@mL+1
  3801   001904  C0E3  F020         	movff	colorDetect@mR,turnLeft_135@mR
  3802   001908  C0E4  F021         	movff	colorDetect@mR+1,turnLeft_135@mR+1
  3803   00190C  EC52  F023         	call	_turnLeft_135	;wreg free
  3804   001910                     
  3805                           ;MazeRobot.X/color.c: 207:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3806   001910  0E2A               	movlw	42
  3807   001912  0100               	movlb	0	; () banked
  3808   001914  6FE5               	movwf	??_colorDetect& (0+255),b
  3809   001916  0E8D               	movlw	141
  3810   001918                     u7357:
  3811   001918  2EE8               	decfsz	wreg,f,c
  3812   00191A  D7FE               	bra	u7357
  3813   00191C  2FE5               	decfsz	??_colorDetect& (0+255),f,b
  3814   00191E  D7FC               	bra	u7357
  3815   001920  D000               	nop2	
  3816   001922                     l6064:
  3817                           
  3818                           ;MazeRobot.X/color.c: 211:         if ((redPrint > 0.95) & (greenPrint > 0.8 & greenPrin
      +                          t < 0.9) & (bluePrint > 0.8 & bluePrint < 0.95)){
  3819   001922  0E33               	movlw	51
  3820   001924  6E36               	movwf	___flge@ff1^0,c
  3821   001926  0E33               	movlw	51
  3822   001928  6E37               	movwf	(___flge@ff1+1)^0,c
  3823   00192A  0E73               	movlw	115
  3824   00192C  6E38               	movwf	(___flge@ff1+2)^0,c
  3825   00192E  0E3F               	movlw	63
  3826   001930  6E39               	movwf	(___flge@ff1+3)^0,c
  3827   001932  C12E  F03A         	movff	colorDetect@redPrint,___flge@ff2
  3828   001936  C12F  F03B         	movff	colorDetect@redPrint+1,___flge@ff2+1
  3829   00193A  C130  F03C         	movff	colorDetect@redPrint+2,___flge@ff2+2
  3830   00193E  C131  F03D         	movff	colorDetect@redPrint+3,___flge@ff2+3
  3831   001942  EC73  F024         	call	___flge	;wreg free
  3832   001946  B0D8               	btfsc	status,0,c
  3833   001948  EFA8  F00C         	goto	u6901
  3834   00194C  EFAA  F00C         	goto	u6900
  3835   001950                     u6901:
  3836   001950  EF2A  F00D         	goto	l105
  3837   001954                     u6900:
  3838   001954  0ECD               	movlw	205
  3839   001956  6E36               	movwf	___flge@ff1^0,c
  3840   001958  0ECC               	movlw	204
  3841   00195A  6E37               	movwf	(___flge@ff1+1)^0,c
  3842   00195C  0E4C               	movlw	76
  3843   00195E  6E38               	movwf	(___flge@ff1+2)^0,c
  3844   001960  0E3F               	movlw	63
  3845   001962  6E39               	movwf	(___flge@ff1+3)^0,c
  3846   001964  C132  F03A         	movff	colorDetect@greenPrint,___flge@ff2
  3847   001968  C133  F03B         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  3848   00196C  C134  F03C         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  3849   001970  C135  F03D         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  3850   001974  EC73  F024         	call	___flge	;wreg free
  3851   001978  B0D8               	btfsc	status,0,c
  3852   00197A  EFC1  F00C         	goto	u6911
  3853   00197E  EFC3  F00C         	goto	u6910
  3854   001982                     u6911:
  3855   001982  EF2A  F00D         	goto	l105
  3856   001986                     u6910:
  3857   001986  C132  F036         	movff	colorDetect@greenPrint,___flge@ff1
  3858   00198A  C133  F037         	movff	colorDetect@greenPrint+1,___flge@ff1+1
  3859   00198E  C134  F038         	movff	colorDetect@greenPrint+2,___flge@ff1+2
  3860   001992  C135  F039         	movff	colorDetect@greenPrint+3,___flge@ff1+3
  3861   001996  0E66               	movlw	102
  3862   001998  6E3A               	movwf	___flge@ff2^0,c
  3863   00199A  0E66               	movlw	102
  3864   00199C  6E3B               	movwf	(___flge@ff2+1)^0,c
  3865   00199E  0E66               	movlw	102
  3866   0019A0  6E3C               	movwf	(___flge@ff2+2)^0,c
  3867   0019A2  0E3F               	movlw	63
  3868   0019A4  6E3D               	movwf	(___flge@ff2+3)^0,c
  3869   0019A6  EC73  F024         	call	___flge	;wreg free
  3870   0019AA  B0D8               	btfsc	status,0,c
  3871   0019AC  EFDA  F00C         	goto	u6921
  3872   0019B0  EFDC  F00C         	goto	u6920
  3873   0019B4                     u6921:
  3874   0019B4  EF2A  F00D         	goto	l105
  3875   0019B8                     u6920:
  3876   0019B8  0ECD               	movlw	205
  3877   0019BA  6E36               	movwf	___flge@ff1^0,c
  3878   0019BC  0ECC               	movlw	204
  3879   0019BE  6E37               	movwf	(___flge@ff1+1)^0,c
  3880   0019C0  0E4C               	movlw	76
  3881   0019C2  6E38               	movwf	(___flge@ff1+2)^0,c
  3882   0019C4  0E3F               	movlw	63
  3883   0019C6  6E39               	movwf	(___flge@ff1+3)^0,c
  3884   0019C8  C136  F03A         	movff	colorDetect@bluePrint,___flge@ff2
  3885   0019CC  C137  F03B         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  3886   0019D0  C138  F03C         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  3887   0019D4  C139  F03D         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  3888   0019D8  EC73  F024         	call	___flge	;wreg free
  3889   0019DC  B0D8               	btfsc	status,0,c
  3890   0019DE  EFF3  F00C         	goto	u6931
  3891   0019E2  EFF5  F00C         	goto	u6930
  3892   0019E6                     u6931:
  3893   0019E6  EF2A  F00D         	goto	l105
  3894   0019EA                     u6930:
  3895   0019EA  C136  F036         	movff	colorDetect@bluePrint,___flge@ff1
  3896   0019EE  C137  F037         	movff	colorDetect@bluePrint+1,___flge@ff1+1
  3897   0019F2  C138  F038         	movff	colorDetect@bluePrint+2,___flge@ff1+2
  3898   0019F6  C139  F039         	movff	colorDetect@bluePrint+3,___flge@ff1+3
  3899   0019FA  0E33               	movlw	51
  3900   0019FC  6E3A               	movwf	___flge@ff2^0,c
  3901   0019FE  0E33               	movlw	51
  3902   001A00  6E3B               	movwf	(___flge@ff2+1)^0,c
  3903   001A02  0E73               	movlw	115
  3904   001A04  6E3C               	movwf	(___flge@ff2+2)^0,c
  3905   001A06  0E3F               	movlw	63
  3906   001A08  6E3D               	movwf	(___flge@ff2+3)^0,c
  3907   001A0A  EC73  F024         	call	___flge	;wreg free
  3908   001A0E  B0D8               	btfsc	status,0,c
  3909   001A10  EF0C  F00D         	goto	u6941
  3910   001A14  EF0E  F00D         	goto	u6940
  3911   001A18                     u6941:
  3912   001A18  EF2A  F00D         	goto	l105
  3913   001A1C                     u6940:
  3914   001A1C                     
  3915                           ;MazeRobot.X/color.c: 212:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3916   001A1C  0E2A               	movlw	42
  3917   001A1E  0100               	movlb	0	; () banked
  3918   001A20  6FE5               	movwf	??_colorDetect& (0+255),b
  3919   001A22  0E8D               	movlw	141
  3920   001A24                     u7367:
  3921   001A24  2EE8               	decfsz	wreg,f,c
  3922   001A26  D7FE               	bra	u7367
  3923   001A28  2FE5               	decfsz	??_colorDetect& (0+255),f,b
  3924   001A2A  D7FC               	bra	u7367
  3925   001A2C  D000               	nop2	
  3926   001A2E                     
  3927                           ;MazeRobot.X/color.c: 213:         reverseSquareLeft(mL,mR);
  3928   001A2E  C0E1  F024         	movff	colorDetect@mL,reverseSquareLeft@mL
  3929   001A32  C0E2  F025         	movff	colorDetect@mL+1,reverseSquareLeft@mL+1
  3930   001A36  C0E3  F026         	movff	colorDetect@mR,reverseSquareLeft@mR
  3931   001A3A  C0E4  F027         	movff	colorDetect@mR+1,reverseSquareLeft@mR+1
  3932   001A3E  ECF3  F028         	call	_reverseSquareLeft	;wreg free
  3933   001A42                     
  3934                           ;MazeRobot.X/color.c: 214:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3935   001A42  0E2A               	movlw	42
  3936   001A44  0100               	movlb	0	; () banked
  3937   001A46  6FE5               	movwf	??_colorDetect& (0+255),b
  3938   001A48  0E8D               	movlw	141
  3939   001A4A                     u7377:
  3940   001A4A  2EE8               	decfsz	wreg,f,c
  3941   001A4C  D7FE               	bra	u7377
  3942   001A4E  2FE5               	decfsz	??_colorDetect& (0+255),f,b
  3943   001A50  D7FC               	bra	u7377
  3944   001A52  D000               	nop2	
  3945   001A54                     l105:
  3946   001A54  0012               	return		;funcret
  3947   001A56                     __end_of_colorDetect:
  3948                           	callstack 0
  3949                           
  3950 ;; *************** function _turn_180 *****************
  3951 ;; Defined at:
  3952 ;;		line 295 in file "MazeRobot.X/dc_motor.c"
  3953 ;; Parameters:    Size  Location     Type
  3954 ;;  mL              2   35[COMRAM] PTR struct DC_motor
  3955 ;;		 -> main@motorLeft(9), 
  3956 ;;  mR              2   37[COMRAM] PTR struct DC_motor
  3957 ;;		 -> main@motorRight(9), 
  3958 ;; Auto vars:     Size  Location     Type
  3959 ;;		None
  3960 ;; Return value:  Size  Location     Type
  3961 ;;                  1    wreg      void 
  3962 ;; Registers used:
  3963 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3964 ;; Tracked objects:
  3965 ;;		On entry : 0/0
  3966 ;;		On exit  : 0/0
  3967 ;;		Unchanged: 0/0
  3968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3969 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3970 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3972 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3973 ;;Total ram usage:        4 bytes
  3974 ;; Hardware stack levels used: 1
  3975 ;; Hardware stack levels required when called: 6
  3976 ;; This function calls:
  3977 ;;		_stop
  3978 ;;		_turnRight
  3979 ;; This function is called by:
  3980 ;;		_colorDetect
  3981 ;; This function uses a non-reentrant model
  3982 ;;
  3983                           
  3984                           	psect	text9
  3985   00589C                     __ptext9:
  3986                           	callstack 0
  3987   00589C                     _turn_180:
  3988                           	callstack 23
  3989   00589C                     
  3990                           ;MazeRobot.X/dc_motor.c: 295: void turn_180(DC_motor *mL, DC_motor *mR);MazeRobot.X/dc_m
      +                          otor.c: 296: {;MazeRobot.X/dc_motor.c: 298:     turnRight(mL,mR);
  3991   00589C  C024  F01E         	movff	turn_180@mL,turnRight@mL
  3992   0058A0  C025  F01F         	movff	turn_180@mL+1,turnRight@mL+1
  3993   0058A4  C026  F020         	movff	turn_180@mR,turnRight@mR
  3994   0058A8  C027  F021         	movff	turn_180@mR+1,turnRight@mR+1
  3995   0058AC  ECD6  F020         	call	_turnRight	;wreg free
  3996                           
  3997                           ;MazeRobot.X/dc_motor.c: 299:     turnRight(mL,mR);
  3998   0058B0  C024  F01E         	movff	turn_180@mL,turnRight@mL
  3999   0058B4  C025  F01F         	movff	turn_180@mL+1,turnRight@mL+1
  4000   0058B8  C026  F020         	movff	turn_180@mR,turnRight@mR
  4001   0058BC  C027  F021         	movff	turn_180@mR+1,turnRight@mR+1
  4002   0058C0  ECD6  F020         	call	_turnRight	;wreg free
  4003                           
  4004                           ;MazeRobot.X/dc_motor.c: 300:     stop(mL, mR);
  4005   0058C4  C024  F018         	movff	turn_180@mL,stop@mL
  4006   0058C8  C025  F019         	movff	turn_180@mL+1,stop@mL+1
  4007   0058CC  C026  F01A         	movff	turn_180@mR,stop@mR
  4008   0058D0  C027  F01B         	movff	turn_180@mR+1,stop@mR+1
  4009   0058D4  ECFC  F027         	call	_stop	;wreg free
  4010   0058D8  0012               	return		;funcret
  4011   0058DA                     __end_of_turn_180:
  4012                           	callstack 0
  4013                           
  4014 ;; *************** function _turnRight *****************
  4015 ;; Defined at:
  4016 ;;		line 209 in file "MazeRobot.X/dc_motor.c"
  4017 ;; Parameters:    Size  Location     Type
  4018 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  4019 ;;		 -> main@motorLeft(9), 
  4020 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  4021 ;;		 -> main@motorRight(9), 
  4022 ;; Auto vars:     Size  Location     Type
  4023 ;;		None
  4024 ;; Return value:  Size  Location     Type
  4025 ;;                  1    wreg      void 
  4026 ;; Registers used:
  4027 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4028 ;; Tracked objects:
  4029 ;;		On entry : 0/0
  4030 ;;		On exit  : 0/0
  4031 ;;		Unchanged: 0/0
  4032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4033 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4035 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4036 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4037 ;;Total ram usage:        6 bytes
  4038 ;; Hardware stack levels used: 1
  4039 ;; Hardware stack levels required when called: 5
  4040 ;; This function calls:
  4041 ;;		_reverse
  4042 ;;		_setMotorPWM
  4043 ;;		_stop
  4044 ;; This function is called by:
  4045 ;;		_turn_180
  4046 ;; This function uses a non-reentrant model
  4047 ;;
  4048                           
  4049                           	psect	text10
  4050   0041AC                     __ptext10:
  4051                           	callstack 0
  4052   0041AC                     _turnRight:
  4053                           	callstack 23
  4054   0041AC                     
  4055                           ;MazeRobot.X/dc_motor.c: 209: void turnRight(DC_motor *mL, DC_motor *mR);MazeRobot.X/dc_
      +                          motor.c: 210: {;MazeRobot.X/dc_motor.c: 211:     stop(mL, mR);
  4056   0041AC  C01E  F018         	movff	turnRight@mL,stop@mL
  4057   0041B0  C01F  F019         	movff	turnRight@mL+1,stop@mL+1
  4058   0041B4  C020  F01A         	movff	turnRight@mR,stop@mR
  4059   0041B8  C021  F01B         	movff	turnRight@mR+1,stop@mR+1
  4060   0041BC  ECFC  F027         	call	_stop	;wreg free
  4061   0041C0                     
  4062                           ;MazeRobot.X/dc_motor.c: 212:     _delay((unsigned long)((100)*(64000000/4000.0)));
  4063   0041C0  0E09               	movlw	9
  4064   0041C2  6E23               	movwf	(??_turnRight+1)^0,c
  4065   0041C4  0E1E               	movlw	30
  4066   0041C6  6E22               	movwf	??_turnRight^0,c
  4067   0041C8  0EE4               	movlw	228
  4068   0041CA                     u7387:
  4069   0041CA  2EE8               	decfsz	wreg,f,c
  4070   0041CC  D7FE               	bra	u7387
  4071   0041CE  2E22               	decfsz	??_turnRight^0,f,c
  4072   0041D0  D7FC               	bra	u7387
  4073   0041D2  2E23               	decfsz	(??_turnRight+1)^0,f,c
  4074   0041D4  D7FA               	bra	u7387
  4075   0041D6  D000               	nop2	
  4076   0041D8                     
  4077                           ;MazeRobot.X/dc_motor.c: 214:     reverse(mL, mR);
  4078   0041D8  C01E  F018         	movff	turnRight@mL,reverse@mL
  4079   0041DC  C01F  F019         	movff	turnRight@mL+1,reverse@mL+1
  4080   0041E0  C020  F01A         	movff	turnRight@mR,reverse@mR
  4081   0041E4  C021  F01B         	movff	turnRight@mR+1,reverse@mR+1
  4082   0041E8  ECC3  F026         	call	_reverse	;wreg free
  4083                           
  4084                           ;MazeRobot.X/dc_motor.c: 215:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  4085   0041EC  0E39               	movlw	57
  4086   0041EE  6E23               	movwf	(??_turnRight+1)^0,c
  4087   0041F0  0ED2               	movlw	210
  4088   0041F2  6E22               	movwf	??_turnRight^0,c
  4089   0041F4  0E4C               	movlw	76
  4090   0041F6                     u7397:
  4091   0041F6  2EE8               	decfsz	wreg,f,c
  4092   0041F8  D7FE               	bra	u7397
  4093   0041FA  2E22               	decfsz	??_turnRight^0,f,c
  4094   0041FC  D7FC               	bra	u7397
  4095   0041FE  2E23               	decfsz	(??_turnRight+1)^0,f,c
  4096   004200  D7FA               	bra	u7397
  4097   004202  D000               	nop2	
  4098   004204                     
  4099                           ;MazeRobot.X/dc_motor.c: 217:     stop(mL, mR);
  4100   004204  C01E  F018         	movff	turnRight@mL,stop@mL
  4101   004208  C01F  F019         	movff	turnRight@mL+1,stop@mL+1
  4102   00420C  C020  F01A         	movff	turnRight@mR,stop@mR
  4103   004210  C021  F01B         	movff	turnRight@mR+1,stop@mR+1
  4104   004214  ECFC  F027         	call	_stop	;wreg free
  4105   004218                     
  4106                           ;MazeRobot.X/dc_motor.c: 219:     mL->direction = 1;
  4107   004218  EE20 F001          	lfsr	2,1
  4108   00421C  501E               	movf	turnRight@mL^0,w,c
  4109   00421E  26D9               	addwf	fsr2l,f,c
  4110   004220  501F               	movf	(turnRight@mL+1)^0,w,c
  4111   004222  22DA               	addwfc	fsr2h,f,c
  4112   004224  0E01               	movlw	1
  4113   004226  6EDF               	movwf	indf2,c
  4114   004228                     
  4115                           ;MazeRobot.X/dc_motor.c: 220:     mR->direction = 0;
  4116   004228  EE20 F001          	lfsr	2,1
  4117   00422C  5020               	movf	turnRight@mR^0,w,c
  4118   00422E  26D9               	addwf	fsr2l,f,c
  4119   004230  5021               	movf	(turnRight@mR+1)^0,w,c
  4120   004232  22DA               	addwfc	fsr2h,f,c
  4121   004234  0E00               	movlw	0
  4122   004236  6EDF               	movwf	indf2,c
  4123   004238                     
  4124                           ;MazeRobot.X/dc_motor.c: 222:     mL->brakemode = 1;
  4125   004238  EE20 F002          	lfsr	2,2
  4126   00423C  501E               	movf	turnRight@mL^0,w,c
  4127   00423E  26D9               	addwf	fsr2l,f,c
  4128   004240  501F               	movf	(turnRight@mL+1)^0,w,c
  4129   004242  22DA               	addwfc	fsr2h,f,c
  4130   004244  0E01               	movlw	1
  4131   004246  6EDF               	movwf	indf2,c
  4132   004248                     
  4133                           ;MazeRobot.X/dc_motor.c: 223:     mL->brakemode = 1;
  4134   004248  EE20 F002          	lfsr	2,2
  4135   00424C  501E               	movf	turnRight@mL^0,w,c
  4136   00424E  26D9               	addwf	fsr2l,f,c
  4137   004250  501F               	movf	(turnRight@mL+1)^0,w,c
  4138   004252  22DA               	addwfc	fsr2h,f,c
  4139   004254  0E01               	movlw	1
  4140   004256  6EDF               	movwf	indf2,c
  4141                           
  4142                           ;MazeRobot.X/dc_motor.c: 225:     while((mL->power < 80) || (mR->power < 80)){
  4143   004258  EF46  F021         	goto	l4842
  4144   00425C                     l4836:
  4145                           
  4146                           ;MazeRobot.X/dc_motor.c: 226:         mL->power += 10;
  4147   00425C  C01E  FFD9         	movff	turnRight@mL,fsr2l
  4148   004260  C01F  FFDA         	movff	turnRight@mL+1,fsr2h
  4149   004264  0E0A               	movlw	10
  4150   004266  26DF               	addwf	indf2,f,c
  4151                           
  4152                           ;MazeRobot.X/dc_motor.c: 227:         mR->power += 10;
  4153   004268  C020  FFD9         	movff	turnRight@mR,fsr2l
  4154   00426C  C021  FFDA         	movff	turnRight@mR+1,fsr2h
  4155   004270  0E0A               	movlw	10
  4156   004272  26DF               	addwf	indf2,f,c
  4157   004274                     
  4158                           ;MazeRobot.X/dc_motor.c: 228:         setMotorPWM(mL);
  4159   004274  C01E  F012         	movff	turnRight@mL,setMotorPWM@m
  4160   004278  C01F  F013         	movff	turnRight@mL+1,setMotorPWM@m+1
  4161   00427C  EC6E  F01F         	call	_setMotorPWM	;wreg free
  4162   004280                     
  4163                           ;MazeRobot.X/dc_motor.c: 229:         setMotorPWM(mR);
  4164   004280  C020  F012         	movff	turnRight@mR,setMotorPWM@m
  4165   004284  C021  F013         	movff	turnRight@mR+1,setMotorPWM@m+1
  4166   004288  EC6E  F01F         	call	_setMotorPWM	;wreg free
  4167   00428C                     l4842:
  4168                           
  4169                           ;MazeRobot.X/dc_motor.c: 225:     while((mL->power < 80) || (mR->power < 80)){
  4170   00428C  C01E  FFD9         	movff	turnRight@mL,fsr2l
  4171   004290  C01F  FFDA         	movff	turnRight@mL+1,fsr2h
  4172   004294  0E4F               	movlw	79
  4173   004296  64DF               	cpfsgt	indf2,c
  4174   004298  EF50  F021         	goto	u5161
  4175   00429C  EF52  F021         	goto	u5160
  4176   0042A0                     u5161:
  4177   0042A0  EF2E  F021         	goto	l4836
  4178   0042A4                     u5160:
  4179   0042A4  C020  FFD9         	movff	turnRight@mR,fsr2l
  4180   0042A8  C021  FFDA         	movff	turnRight@mR+1,fsr2h
  4181   0042AC  0E4F               	movlw	79
  4182   0042AE  64DF               	cpfsgt	indf2,c
  4183   0042B0  EF5C  F021         	goto	u5171
  4184   0042B4  EF5E  F021         	goto	u5170
  4185   0042B8                     u5171:
  4186   0042B8  EF2E  F021         	goto	l4836
  4187   0042BC                     u5170:
  4188   0042BC                     
  4189                           ;MazeRobot.X/dc_motor.c: 231:    _delay((unsigned long)((turning_time45)*(64000000/4000.
      +                          0)));
  4190   0042BC  0E10               	movlw	16
  4191   0042BE  6E23               	movwf	(??_turnRight+1)^0,c
  4192   0042C0  0E2E               	movlw	46
  4193   0042C2  6E22               	movwf	??_turnRight^0,c
  4194   0042C4  0EAA               	movlw	170
  4195   0042C6                     u7407:
  4196   0042C6  2EE8               	decfsz	wreg,f,c
  4197   0042C8  D7FE               	bra	u7407
  4198   0042CA  2E22               	decfsz	??_turnRight^0,f,c
  4199   0042CC  D7FC               	bra	u7407
  4200   0042CE  2E23               	decfsz	(??_turnRight+1)^0,f,c
  4201   0042D0  D7FA               	bra	u7407
  4202   0042D2  D000               	nop2	
  4203   0042D4                     
  4204                           ;MazeRobot.X/dc_motor.c: 233:     stop(mL, mR);
  4205   0042D4  C01E  F018         	movff	turnRight@mL,stop@mL
  4206   0042D8  C01F  F019         	movff	turnRight@mL+1,stop@mL+1
  4207   0042DC  C020  F01A         	movff	turnRight@mR,stop@mR
  4208   0042E0  C021  F01B         	movff	turnRight@mR+1,stop@mR+1
  4209   0042E4  ECFC  F027         	call	_stop	;wreg free
  4210   0042E8  0012               	return		;funcret
  4211   0042EA                     __end_of_turnRight:
  4212                           	callstack 0
  4213                           
  4214 ;; *************** function _turnRight_135 *****************
  4215 ;; Defined at:
  4216 ;;		line 304 in file "MazeRobot.X/dc_motor.c"
  4217 ;; Parameters:    Size  Location     Type
  4218 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  4219 ;;		 -> main@motorLeft(9), 
  4220 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  4221 ;;		 -> main@motorRight(9), 
  4222 ;; Auto vars:     Size  Location     Type
  4223 ;;		None
  4224 ;; Return value:  Size  Location     Type
  4225 ;;                  1    wreg      void 
  4226 ;; Registers used:
  4227 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4228 ;; Tracked objects:
  4229 ;;		On entry : 0/0
  4230 ;;		On exit  : 0/0
  4231 ;;		Unchanged: 0/0
  4232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4233 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4234 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4235 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4236 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4237 ;;Total ram usage:        6 bytes
  4238 ;; Hardware stack levels used: 1
  4239 ;; Hardware stack levels required when called: 5
  4240 ;; This function calls:
  4241 ;;		_reverse
  4242 ;;		_setMotorPWM
  4243 ;;		_stop
  4244 ;; This function is called by:
  4245 ;;		_colorDetect
  4246 ;; This function uses a non-reentrant model
  4247 ;;
  4248                           
  4249                           	psect	text11
  4250   0042EA                     __ptext11:
  4251                           	callstack 0
  4252   0042EA                     _turnRight_135:
  4253                           	callstack 24
  4254   0042EA                     
  4255                           ;MazeRobot.X/dc_motor.c: 304: void turnRight_135(DC_motor *mL, DC_motor *mR);MazeRobot.X
      +                          /dc_motor.c: 305: {;MazeRobot.X/dc_motor.c: 306:     stop(mL, mR);
  4256   0042EA  C01E  F018         	movff	turnRight_135@mL,stop@mL
  4257   0042EE  C01F  F019         	movff	turnRight_135@mL+1,stop@mL+1
  4258   0042F2  C020  F01A         	movff	turnRight_135@mR,stop@mR
  4259   0042F6  C021  F01B         	movff	turnRight_135@mR+1,stop@mR+1
  4260   0042FA  ECFC  F027         	call	_stop	;wreg free
  4261   0042FE                     
  4262                           ;MazeRobot.X/dc_motor.c: 307:     _delay((unsigned long)((100)*(64000000/4000.0)));
  4263   0042FE  0E09               	movlw	9
  4264   004300  6E23               	movwf	(??_turnRight_135+1)^0,c
  4265   004302  0E1E               	movlw	30
  4266   004304  6E22               	movwf	??_turnRight_135^0,c
  4267   004306  0EE4               	movlw	228
  4268   004308                     u7417:
  4269   004308  2EE8               	decfsz	wreg,f,c
  4270   00430A  D7FE               	bra	u7417
  4271   00430C  2E22               	decfsz	??_turnRight_135^0,f,c
  4272   00430E  D7FC               	bra	u7417
  4273   004310  2E23               	decfsz	(??_turnRight_135+1)^0,f,c
  4274   004312  D7FA               	bra	u7417
  4275   004314  D000               	nop2	
  4276   004316                     
  4277                           ;MazeRobot.X/dc_motor.c: 309:     reverse(mL, mR);
  4278   004316  C01E  F018         	movff	turnRight_135@mL,reverse@mL
  4279   00431A  C01F  F019         	movff	turnRight_135@mL+1,reverse@mL+1
  4280   00431E  C020  F01A         	movff	turnRight_135@mR,reverse@mR
  4281   004322  C021  F01B         	movff	turnRight_135@mR+1,reverse@mR+1
  4282   004326  ECC3  F026         	call	_reverse	;wreg free
  4283                           
  4284                           ;MazeRobot.X/dc_motor.c: 310:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  4285   00432A  0E39               	movlw	57
  4286   00432C  6E23               	movwf	(??_turnRight_135+1)^0,c
  4287   00432E  0ED2               	movlw	210
  4288   004330  6E22               	movwf	??_turnRight_135^0,c
  4289   004332  0E4C               	movlw	76
  4290   004334                     u7427:
  4291   004334  2EE8               	decfsz	wreg,f,c
  4292   004336  D7FE               	bra	u7427
  4293   004338  2E22               	decfsz	??_turnRight_135^0,f,c
  4294   00433A  D7FC               	bra	u7427
  4295   00433C  2E23               	decfsz	(??_turnRight_135+1)^0,f,c
  4296   00433E  D7FA               	bra	u7427
  4297   004340  D000               	nop2	
  4298   004342                     
  4299                           ;MazeRobot.X/dc_motor.c: 312:     stop(mL, mR);
  4300   004342  C01E  F018         	movff	turnRight_135@mL,stop@mL
  4301   004346  C01F  F019         	movff	turnRight_135@mL+1,stop@mL+1
  4302   00434A  C020  F01A         	movff	turnRight_135@mR,stop@mR
  4303   00434E  C021  F01B         	movff	turnRight_135@mR+1,stop@mR+1
  4304   004352  ECFC  F027         	call	_stop	;wreg free
  4305   004356                     
  4306                           ;MazeRobot.X/dc_motor.c: 314:     mL->direction = 1;
  4307   004356  EE20 F001          	lfsr	2,1
  4308   00435A  501E               	movf	turnRight_135@mL^0,w,c
  4309   00435C  26D9               	addwf	fsr2l,f,c
  4310   00435E  501F               	movf	(turnRight_135@mL+1)^0,w,c
  4311   004360  22DA               	addwfc	fsr2h,f,c
  4312   004362  0E01               	movlw	1
  4313   004364  6EDF               	movwf	indf2,c
  4314   004366                     
  4315                           ;MazeRobot.X/dc_motor.c: 315:     mR->direction = 0;
  4316   004366  EE20 F001          	lfsr	2,1
  4317   00436A  5020               	movf	turnRight_135@mR^0,w,c
  4318   00436C  26D9               	addwf	fsr2l,f,c
  4319   00436E  5021               	movf	(turnRight_135@mR+1)^0,w,c
  4320   004370  22DA               	addwfc	fsr2h,f,c
  4321   004372  0E00               	movlw	0
  4322   004374  6EDF               	movwf	indf2,c
  4323   004376                     
  4324                           ;MazeRobot.X/dc_motor.c: 317:     mL->brakemode = 1;
  4325   004376  EE20 F002          	lfsr	2,2
  4326   00437A  501E               	movf	turnRight_135@mL^0,w,c
  4327   00437C  26D9               	addwf	fsr2l,f,c
  4328   00437E  501F               	movf	(turnRight_135@mL+1)^0,w,c
  4329   004380  22DA               	addwfc	fsr2h,f,c
  4330   004382  0E01               	movlw	1
  4331   004384  6EDF               	movwf	indf2,c
  4332   004386                     
  4333                           ;MazeRobot.X/dc_motor.c: 318:     mL->brakemode = 1;
  4334   004386  EE20 F002          	lfsr	2,2
  4335   00438A  501E               	movf	turnRight_135@mL^0,w,c
  4336   00438C  26D9               	addwf	fsr2l,f,c
  4337   00438E  501F               	movf	(turnRight_135@mL+1)^0,w,c
  4338   004390  22DA               	addwfc	fsr2h,f,c
  4339   004392  0E01               	movlw	1
  4340   004394  6EDF               	movwf	indf2,c
  4341                           
  4342                           ;MazeRobot.X/dc_motor.c: 320:     while((mL->power < 80) || (mR->power < 80)){
  4343   004396  EFE5  F021         	goto	l4934
  4344   00439A                     l4928:
  4345                           
  4346                           ;MazeRobot.X/dc_motor.c: 321:         mL->power += 10;
  4347   00439A  C01E  FFD9         	movff	turnRight_135@mL,fsr2l
  4348   00439E  C01F  FFDA         	movff	turnRight_135@mL+1,fsr2h
  4349   0043A2  0E0A               	movlw	10
  4350   0043A4  26DF               	addwf	indf2,f,c
  4351                           
  4352                           ;MazeRobot.X/dc_motor.c: 322:         mR->power += 10;
  4353   0043A6  C020  FFD9         	movff	turnRight_135@mR,fsr2l
  4354   0043AA  C021  FFDA         	movff	turnRight_135@mR+1,fsr2h
  4355   0043AE  0E0A               	movlw	10
  4356   0043B0  26DF               	addwf	indf2,f,c
  4357   0043B2                     
  4358                           ;MazeRobot.X/dc_motor.c: 323:         setMotorPWM(mL);
  4359   0043B2  C01E  F012         	movff	turnRight_135@mL,setMotorPWM@m
  4360   0043B6  C01F  F013         	movff	turnRight_135@mL+1,setMotorPWM@m+1
  4361   0043BA  EC6E  F01F         	call	_setMotorPWM	;wreg free
  4362   0043BE                     
  4363                           ;MazeRobot.X/dc_motor.c: 324:         setMotorPWM(mR);
  4364   0043BE  C020  F012         	movff	turnRight_135@mR,setMotorPWM@m
  4365   0043C2  C021  F013         	movff	turnRight_135@mR+1,setMotorPWM@m+1
  4366   0043C6  EC6E  F01F         	call	_setMotorPWM	;wreg free
  4367   0043CA                     l4934:
  4368                           
  4369                           ;MazeRobot.X/dc_motor.c: 320:     while((mL->power < 80) || (mR->power < 80)){
  4370   0043CA  C01E  FFD9         	movff	turnRight_135@mL,fsr2l
  4371   0043CE  C01F  FFDA         	movff	turnRight_135@mL+1,fsr2h
  4372   0043D2  0E4F               	movlw	79
  4373   0043D4  64DF               	cpfsgt	indf2,c
  4374   0043D6  EFEF  F021         	goto	u5241
  4375   0043DA  EFF1  F021         	goto	u5240
  4376   0043DE                     u5241:
  4377   0043DE  EFCD  F021         	goto	l4928
  4378   0043E2                     u5240:
  4379   0043E2  C020  FFD9         	movff	turnRight_135@mR,fsr2l
  4380   0043E6  C021  FFDA         	movff	turnRight_135@mR+1,fsr2h
  4381   0043EA  0E4F               	movlw	79
  4382   0043EC  64DF               	cpfsgt	indf2,c
  4383   0043EE  EFFB  F021         	goto	u5251
  4384   0043F2  EFFD  F021         	goto	u5250
  4385   0043F6                     u5251:
  4386   0043F6  EFCD  F021         	goto	l4928
  4387   0043FA                     u5250:
  4388   0043FA                     
  4389                           ;MazeRobot.X/dc_motor.c: 326:    _delay((unsigned long)((1.5*turning_time45)*(64000000/4
      +                          000.0)));
  4390   0043FA  0E17               	movlw	23
  4391   0043FC  6E23               	movwf	(??_turnRight_135+1)^0,c
  4392   0043FE  0EC5               	movlw	197
  4393   004400  6E22               	movwf	??_turnRight_135^0,c
  4394   004402  0E81               	movlw	129
  4395   004404                     u7437:
  4396   004404  2EE8               	decfsz	wreg,f,c
  4397   004406  D7FE               	bra	u7437
  4398   004408  2E22               	decfsz	??_turnRight_135^0,f,c
  4399   00440A  D7FC               	bra	u7437
  4400   00440C  2E23               	decfsz	(??_turnRight_135+1)^0,f,c
  4401   00440E  D7FA               	bra	u7437
  4402   004410  F000               	nop	
  4403   004412                     
  4404                           ;MazeRobot.X/dc_motor.c: 328:     stop(mL, mR);
  4405   004412  C01E  F018         	movff	turnRight_135@mL,stop@mL
  4406   004416  C01F  F019         	movff	turnRight_135@mL+1,stop@mL+1
  4407   00441A  C020  F01A         	movff	turnRight_135@mR,stop@mR
  4408   00441E  C021  F01B         	movff	turnRight_135@mR+1,stop@mR+1
  4409   004422  ECFC  F027         	call	_stop	;wreg free
  4410   004426  0012               	return		;funcret
  4411   004428                     __end_of_turnRight_135:
  4412                           	callstack 0
  4413                           
  4414 ;; *************** function _turnLeft_135 *****************
  4415 ;; Defined at:
  4416 ;;		line 333 in file "MazeRobot.X/dc_motor.c"
  4417 ;; Parameters:    Size  Location     Type
  4418 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  4419 ;;		 -> main@motorLeft(9), 
  4420 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  4421 ;;		 -> main@motorRight(9), 
  4422 ;; Auto vars:     Size  Location     Type
  4423 ;;		None
  4424 ;; Return value:  Size  Location     Type
  4425 ;;                  1    wreg      void 
  4426 ;; Registers used:
  4427 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4428 ;; Tracked objects:
  4429 ;;		On entry : 0/0
  4430 ;;		On exit  : 0/0
  4431 ;;		Unchanged: 0/0
  4432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4433 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4435 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4436 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4437 ;;Total ram usage:        6 bytes
  4438 ;; Hardware stack levels used: 1
  4439 ;; Hardware stack levels required when called: 5
  4440 ;; This function calls:
  4441 ;;		_reverse
  4442 ;;		_setMotorPWM
  4443 ;;		_stop
  4444 ;; This function is called by:
  4445 ;;		_colorDetect
  4446 ;; This function uses a non-reentrant model
  4447 ;;
  4448                           
  4449                           	psect	text12
  4450   0046A4                     __ptext12:
  4451                           	callstack 0
  4452   0046A4                     _turnLeft_135:
  4453                           	callstack 24
  4454   0046A4                     
  4455                           ;MazeRobot.X/dc_motor.c: 333: void turnLeft_135(DC_motor *mL, DC_motor *mR);MazeRobot.X/
      +                          dc_motor.c: 334: {;MazeRobot.X/dc_motor.c: 336:     stop(mL, mR);
  4456   0046A4  C01E  F018         	movff	turnLeft_135@mL,stop@mL
  4457   0046A8  C01F  F019         	movff	turnLeft_135@mL+1,stop@mL+1
  4458   0046AC  C020  F01A         	movff	turnLeft_135@mR,stop@mR
  4459   0046B0  C021  F01B         	movff	turnLeft_135@mR+1,stop@mR+1
  4460   0046B4  ECFC  F027         	call	_stop	;wreg free
  4461   0046B8                     
  4462                           ;MazeRobot.X/dc_motor.c: 337:     _delay((unsigned long)((100)*(64000000/4000.0)));
  4463   0046B8  0E09               	movlw	9
  4464   0046BA  6E23               	movwf	(??_turnLeft_135+1)^0,c
  4465   0046BC  0E1E               	movlw	30
  4466   0046BE  6E22               	movwf	??_turnLeft_135^0,c
  4467   0046C0  0EE4               	movlw	228
  4468   0046C2                     u7447:
  4469   0046C2  2EE8               	decfsz	wreg,f,c
  4470   0046C4  D7FE               	bra	u7447
  4471   0046C6  2E22               	decfsz	??_turnLeft_135^0,f,c
  4472   0046C8  D7FC               	bra	u7447
  4473   0046CA  2E23               	decfsz	(??_turnLeft_135+1)^0,f,c
  4474   0046CC  D7FA               	bra	u7447
  4475   0046CE  D000               	nop2	
  4476   0046D0                     
  4477                           ;MazeRobot.X/dc_motor.c: 339:     reverse(mL, mR);
  4478   0046D0  C01E  F018         	movff	turnLeft_135@mL,reverse@mL
  4479   0046D4  C01F  F019         	movff	turnLeft_135@mL+1,reverse@mL+1
  4480   0046D8  C020  F01A         	movff	turnLeft_135@mR,reverse@mR
  4481   0046DC  C021  F01B         	movff	turnLeft_135@mR+1,reverse@mR+1
  4482   0046E0  ECC3  F026         	call	_reverse	;wreg free
  4483                           
  4484                           ;MazeRobot.X/dc_motor.c: 340:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  4485   0046E4  0E39               	movlw	57
  4486   0046E6  6E23               	movwf	(??_turnLeft_135+1)^0,c
  4487   0046E8  0ED2               	movlw	210
  4488   0046EA  6E22               	movwf	??_turnLeft_135^0,c
  4489   0046EC  0E4C               	movlw	76
  4490   0046EE                     u7457:
  4491   0046EE  2EE8               	decfsz	wreg,f,c
  4492   0046F0  D7FE               	bra	u7457
  4493   0046F2  2E22               	decfsz	??_turnLeft_135^0,f,c
  4494   0046F4  D7FC               	bra	u7457
  4495   0046F6  2E23               	decfsz	(??_turnLeft_135+1)^0,f,c
  4496   0046F8  D7FA               	bra	u7457
  4497   0046FA  D000               	nop2	
  4498   0046FC                     
  4499                           ;MazeRobot.X/dc_motor.c: 342:     stop(mL, mR);
  4500   0046FC  C01E  F018         	movff	turnLeft_135@mL,stop@mL
  4501   004700  C01F  F019         	movff	turnLeft_135@mL+1,stop@mL+1
  4502   004704  C020  F01A         	movff	turnLeft_135@mR,stop@mR
  4503   004708  C021  F01B         	movff	turnLeft_135@mR+1,stop@mR+1
  4504   00470C  ECFC  F027         	call	_stop	;wreg free
  4505   004710                     
  4506                           ;MazeRobot.X/dc_motor.c: 344:     mL->direction = 0;
  4507   004710  EE20 F001          	lfsr	2,1
  4508   004714  501E               	movf	turnLeft_135@mL^0,w,c
  4509   004716  26D9               	addwf	fsr2l,f,c
  4510   004718  501F               	movf	(turnLeft_135@mL+1)^0,w,c
  4511   00471A  22DA               	addwfc	fsr2h,f,c
  4512   00471C  0E00               	movlw	0
  4513   00471E  6EDF               	movwf	indf2,c
  4514   004720                     
  4515                           ;MazeRobot.X/dc_motor.c: 345:     mR->direction = 1;
  4516   004720  EE20 F001          	lfsr	2,1
  4517   004724  5020               	movf	turnLeft_135@mR^0,w,c
  4518   004726  26D9               	addwf	fsr2l,f,c
  4519   004728  5021               	movf	(turnLeft_135@mR+1)^0,w,c
  4520   00472A  22DA               	addwfc	fsr2h,f,c
  4521   00472C  0E01               	movlw	1
  4522   00472E  6EDF               	movwf	indf2,c
  4523   004730                     
  4524                           ;MazeRobot.X/dc_motor.c: 347:     mL->brakemode = 1;
  4525   004730  EE20 F002          	lfsr	2,2
  4526   004734  501E               	movf	turnLeft_135@mL^0,w,c
  4527   004736  26D9               	addwf	fsr2l,f,c
  4528   004738  501F               	movf	(turnLeft_135@mL+1)^0,w,c
  4529   00473A  22DA               	addwfc	fsr2h,f,c
  4530   00473C  0E01               	movlw	1
  4531   00473E  6EDF               	movwf	indf2,c
  4532   004740                     
  4533                           ;MazeRobot.X/dc_motor.c: 348:     mL->brakemode = 1;
  4534   004740  EE20 F002          	lfsr	2,2
  4535   004744  501E               	movf	turnLeft_135@mL^0,w,c
  4536   004746  26D9               	addwf	fsr2l,f,c
  4537   004748  501F               	movf	(turnLeft_135@mL+1)^0,w,c
  4538   00474A  22DA               	addwfc	fsr2h,f,c
  4539   00474C  0E01               	movlw	1
  4540   00474E  6EDF               	movwf	indf2,c
  4541                           
  4542                           ;MazeRobot.X/dc_motor.c: 350:     while((mL->power < 80) || (mR->power < 80)){
  4543   004750  EFC2  F023         	goto	l4976
  4544   004754                     l4970:
  4545                           
  4546                           ;MazeRobot.X/dc_motor.c: 351:         mL->power += 10;
  4547   004754  C01E  FFD9         	movff	turnLeft_135@mL,fsr2l
  4548   004758  C01F  FFDA         	movff	turnLeft_135@mL+1,fsr2h
  4549   00475C  0E0A               	movlw	10
  4550   00475E  26DF               	addwf	indf2,f,c
  4551                           
  4552                           ;MazeRobot.X/dc_motor.c: 352:         mR->power += 10;
  4553   004760  C020  FFD9         	movff	turnLeft_135@mR,fsr2l
  4554   004764  C021  FFDA         	movff	turnLeft_135@mR+1,fsr2h
  4555   004768  0E0A               	movlw	10
  4556   00476A  26DF               	addwf	indf2,f,c
  4557   00476C                     
  4558                           ;MazeRobot.X/dc_motor.c: 353:         setMotorPWM(mL);
  4559   00476C  C01E  F012         	movff	turnLeft_135@mL,setMotorPWM@m
  4560   004770  C01F  F013         	movff	turnLeft_135@mL+1,setMotorPWM@m+1
  4561   004774  EC6E  F01F         	call	_setMotorPWM	;wreg free
  4562   004778                     
  4563                           ;MazeRobot.X/dc_motor.c: 354:         setMotorPWM(mR);
  4564   004778  C020  F012         	movff	turnLeft_135@mR,setMotorPWM@m
  4565   00477C  C021  F013         	movff	turnLeft_135@mR+1,setMotorPWM@m+1
  4566   004780  EC6E  F01F         	call	_setMotorPWM	;wreg free
  4567   004784                     l4976:
  4568                           
  4569                           ;MazeRobot.X/dc_motor.c: 350:     while((mL->power < 80) || (mR->power < 80)){
  4570   004784  C01E  FFD9         	movff	turnLeft_135@mL,fsr2l
  4571   004788  C01F  FFDA         	movff	turnLeft_135@mL+1,fsr2h
  4572   00478C  0E4F               	movlw	79
  4573   00478E  64DF               	cpfsgt	indf2,c
  4574   004790  EFCC  F023         	goto	u5261
  4575   004794  EFCE  F023         	goto	u5260
  4576   004798                     u5261:
  4577   004798  EFAA  F023         	goto	l4970
  4578   00479C                     u5260:
  4579   00479C  C020  FFD9         	movff	turnLeft_135@mR,fsr2l
  4580   0047A0  C021  FFDA         	movff	turnLeft_135@mR+1,fsr2h
  4581   0047A4  0E4F               	movlw	79
  4582   0047A6  64DF               	cpfsgt	indf2,c
  4583   0047A8  EFD8  F023         	goto	u5271
  4584   0047AC  EFDA  F023         	goto	u5270
  4585   0047B0                     u5271:
  4586   0047B0  EFAA  F023         	goto	l4970
  4587   0047B4                     u5270:
  4588   0047B4                     
  4589                           ;MazeRobot.X/dc_motor.c: 356:    _delay((unsigned long)((3*turning_time45)*(64000000/400
      +                          0.0)));
  4590   0047B4  0E2E               	movlw	46
  4591   0047B6  6E23               	movwf	(??_turnLeft_135+1)^0,c
  4592   0047B8  0E8A               	movlw	138
  4593   0047BA  6E22               	movwf	??_turnLeft_135^0,c
  4594   0047BC  0E04               	movlw	4
  4595   0047BE                     u7467:
  4596   0047BE  2EE8               	decfsz	wreg,f,c
  4597   0047C0  D7FE               	bra	u7467
  4598   0047C2  2E22               	decfsz	??_turnLeft_135^0,f,c
  4599   0047C4  D7FC               	bra	u7467
  4600   0047C6  2E23               	decfsz	(??_turnLeft_135+1)^0,f,c
  4601   0047C8  D7FA               	bra	u7467
  4602   0047CA                     
  4603                           ;MazeRobot.X/dc_motor.c: 357:     stop(mL, mR);
  4604   0047CA  C01E  F018         	movff	turnLeft_135@mL,stop@mL
  4605   0047CE  C01F  F019         	movff	turnLeft_135@mL+1,stop@mL+1
  4606   0047D2  C020  F01A         	movff	turnLeft_135@mR,stop@mR
  4607   0047D6  C021  F01B         	movff	turnLeft_135@mR+1,stop@mR+1
  4608   0047DA  ECFC  F027         	call	_stop	;wreg free
  4609   0047DE  0012               	return		;funcret
  4610   0047E0                     __end_of_turnLeft_135:
  4611                           	callstack 0
  4612                           
  4613 ;; *************** function _sprintf *****************
  4614 ;; Defined at:
  4615 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_sprintf.c"
  4616 ;; Parameters:    Size  Location     Type
  4617 ;;  s               2   92[BANK0 ] PTR unsigned char 
  4618 ;;		 -> ADC2String@buf(40), colorDetect@string1(20), 
  4619 ;;  fmt             2   94[BANK0 ] PTR const unsigned char 
  4620 ;;		 -> STR_2(15), STR_1(19), 
  4621 ;; Auto vars:     Size  Location     Type
  4622 ;;  f              11  110[BANK0 ] struct _IO_FILE
  4623 ;;  ap              2  108[BANK0 ] PTR void [1]
  4624 ;;		 -> ?_sprintf(2), 
  4625 ;;  ret             2    0        int 
  4626 ;; Return value:  Size  Location     Type
  4627 ;;                  2   92[BANK0 ] int 
  4628 ;; Registers used:
  4629 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4630 ;; Tracked objects:
  4631 ;;		On entry : 0/0
  4632 ;;		On exit  : 0/0
  4633 ;;		Unchanged: 0/0
  4634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4635 ;;      Params:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4636 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4638 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4639 ;;Total ram usage:       29 bytes
  4640 ;; Hardware stack levels used: 1
  4641 ;; Hardware stack levels required when called: 9
  4642 ;; This function calls:
  4643 ;;		_vfprintf
  4644 ;; This function is called by:
  4645 ;;		_colorDetect
  4646 ;;		_ADC2String
  4647 ;; This function uses a non-reentrant model
  4648 ;;
  4649                           
  4650                           	psect	text13
  4651   00556A                     __ptext13:
  4652                           	callstack 0
  4653   00556A                     _sprintf:
  4654                           	callstack 20
  4655   00556A  0EC0               	movlw	low (?_sprintf+4)
  4656   00556C  0100               	movlb	0	; () banked
  4657   00556E  6FCC               	movwf	sprintf@ap& (0+255),b
  4658   005570  0E00               	movlw	high (?_sprintf+4)
  4659   005572  6FCD               	movwf	(sprintf@ap+1)& (0+255),b
  4660   005574  C0BC  F0CE         	movff	sprintf@s,sprintf@f
  4661   005578  C0BD  F0CF         	movff	sprintf@s+1,sprintf@f+1
  4662   00557C                     
  4663                           ; BSR set to: 0
  4664   00557C  0E00               	movlw	0
  4665   00557E  6FD2               	movwf	(sprintf@f+4)& (0+255),b
  4666   005580  0E00               	movlw	0
  4667   005582  6FD1               	movwf	(sprintf@f+3)& (0+255),b
  4668   005584                     
  4669                           ; BSR set to: 0
  4670   005584  0E00               	movlw	0
  4671   005586  6FD8               	movwf	(sprintf@f+10)& (0+255),b
  4672   005588  0E00               	movlw	0
  4673   00558A  6FD7               	movwf	(sprintf@f+9)& (0+255),b
  4674   00558C                     
  4675                           ; BSR set to: 0
  4676   00558C  0ECE               	movlw	low sprintf@f
  4677   00558E  6FB4               	movwf	vfprintf@fp& (0+255),b
  4678   005590  0E00               	movlw	high sprintf@f
  4679   005592  6FB5               	movwf	(vfprintf@fp+1)& (0+255),b
  4680   005594  C0BE  F0B6         	movff	sprintf@fmt,vfprintf@fmt
  4681   005598  C0BF  F0B7         	movff	sprintf@fmt+1,vfprintf@fmt+1
  4682   00559C  0ECC               	movlw	low sprintf@ap
  4683   00559E  6FB8               	movwf	vfprintf@ap& (0+255),b
  4684   0055A0  0E00               	movlw	high sprintf@ap
  4685   0055A2  6FB9               	movwf	(vfprintf@ap+1)& (0+255),b
  4686   0055A4  EC8A  F02A         	call	_vfprintf	;wreg free
  4687   0055A8  0100               	movlb	0	; () banked
  4688   0055AA  51D1               	movf	(sprintf@f+3)& (0+255),w,b
  4689   0055AC  25BC               	addwf	sprintf@s& (0+255),w,b
  4690   0055AE  6ED9               	movwf	fsr2l,c
  4691   0055B0  51D2               	movf	(sprintf@f+4)& (0+255),w,b
  4692   0055B2  21BD               	addwfc	(sprintf@s+1)& (0+255),w,b
  4693   0055B4  6EDA               	movwf	fsr2h,c
  4694   0055B6  0E00               	movlw	0
  4695   0055B8  6EDF               	movwf	indf2,c
  4696   0055BA                     
  4697                           ; BSR set to: 0
  4698   0055BA  0012               	return		;funcret
  4699   0055BC                     __end_of_sprintf:
  4700                           	callstack 0
  4701                           
  4702 ;; *************** function _vfprintf *****************
  4703 ;; Defined at:
  4704 ;;		line 1520 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  4705 ;; Parameters:    Size  Location     Type
  4706 ;;  fp              2   84[BANK0 ] PTR struct _IO_FILE
  4707 ;;		 -> sprintf@f(11), 
  4708 ;;  fmt             2   86[BANK0 ] PTR const unsigned char 
  4709 ;;		 -> STR_2(15), STR_1(19), 
  4710 ;;  ap              2   88[BANK0 ] PTR PTR void 
  4711 ;;		 -> sprintf@ap(2), 
  4712 ;; Auto vars:     Size  Location     Type
  4713 ;;  cfmt            2   90[BANK0 ] PTR unsigned char 
  4714 ;;		 -> STR_2(15), STR_1(19), 
  4715 ;; Return value:  Size  Location     Type
  4716 ;;                  2   84[BANK0 ] int 
  4717 ;; Registers used:
  4718 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4719 ;; Tracked objects:
  4720 ;;		On entry : 0/0
  4721 ;;		On exit  : 0/0
  4722 ;;		Unchanged: 0/0
  4723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4724 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4725 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4727 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4728 ;;Total ram usage:        8 bytes
  4729 ;; Hardware stack levels used: 1
  4730 ;; Hardware stack levels required when called: 8
  4731 ;; This function calls:
  4732 ;;		_vfpfcnvrt
  4733 ;; This function is called by:
  4734 ;;		_sprintf
  4735 ;; This function uses a non-reentrant model
  4736 ;;
  4737                           
  4738                           	psect	text14
  4739   005514                     __ptext14:
  4740                           	callstack 0
  4741   005514                     _vfprintf:
  4742                           	callstack 20
  4743   005514                     
  4744                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1520: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\source
      +                          s\c99\common\doprnt.c: 1521: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\comm
      +                          on\doprnt.c: 1523:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\
      +                          common\doprnt.c: 1525:     cfmt = (char *)fmt;
  4745   005514  C0B6  F0BA         	movff	vfprintf@fmt,vfprintf@cfmt
  4746   005518  C0B7  F0BB         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  4747                           
  4748                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  4749   00551C  EF9F  F02A         	goto	l5918
  4750   005520                     l5916:
  4751                           
  4752                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1533:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  4753   005520  C0B4  F0A3         	movff	vfprintf@fp,vfpfcnvrt@fp
  4754   005524  C0B5  F0A4         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  4755   005528  0EBA               	movlw	low vfprintf@cfmt
  4756   00552A  0100               	movlb	0	; () banked
  4757   00552C  6FA5               	movwf	vfpfcnvrt@fmt& (0+255),b
  4758   00552E  0E00               	movlw	high vfprintf@cfmt
  4759   005530  6FA6               	movwf	(vfpfcnvrt@fmt+1)& (0+255),b
  4760   005532  C0B8  F0A7         	movff	vfprintf@ap,vfpfcnvrt@ap
  4761   005536  C0B9  F0A8         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  4762   00553A  EC03  F01A         	call	_vfpfcnvrt	;wreg free
  4763   00553E                     l5918:
  4764                           
  4765                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  4766   00553E  C0BA  FFF6         	movff	vfprintf@cfmt,tblptrl
  4767   005542  C0BB  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  4768   005546                     	if	0	;tblptru may be non-zero
  4769   005546                     	endif
  4770   005546                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4771   005546  0E00               	movlw	low (__mediumconst shr (0+16))
  4772   005548  6EF8               	movwf	tblptru,c
  4773   00554A                     	endif
  4774   00554A  0008               	tblrd		*
  4775   00554C  50F5               	movf	tablat,w,c
  4776   00554E  0900               	iorlw	0
  4777   005550  A4D8               	btfss	status,2,c
  4778   005552  EFAD  F02A         	goto	u6621
  4779   005556  EFAF  F02A         	goto	u6620
  4780   00555A                     u6621:
  4781   00555A  EF90  F02A         	goto	l5916
  4782   00555E                     u6620:
  4783   00555E                     
  4784                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1538:  return 0;
  4785   00555E  0E00               	movlw	0
  4786   005560  0100               	movlb	0	; () banked
  4787   005562  6FB5               	movwf	(?_vfprintf+1)& (0+255),b
  4788   005564  0E00               	movlw	0
  4789   005566  6FB4               	movwf	?_vfprintf& (0+255),b
  4790   005568                     
  4791                           ; BSR set to: 0
  4792   005568  0012               	return		;funcret
  4793   00556A                     __end_of_vfprintf:
  4794                           	callstack 0
  4795                           
  4796 ;; *************** function _vfpfcnvrt *****************
  4797 ;; Defined at:
  4798 ;;		line 1007 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  4799 ;; Parameters:    Size  Location     Type
  4800 ;;  fp              2   67[BANK0 ] PTR struct _IO_FILE
  4801 ;;		 -> sprintf@f(11), 
  4802 ;;  fmt             2   69[BANK0 ] PTR PTR unsigned char 
  4803 ;;		 -> vfprintf@cfmt(2), 
  4804 ;;  ap              2   71[BANK0 ] PTR PTR void 
  4805 ;;		 -> sprintf@ap(2), 
  4806 ;; Auto vars:     Size  Location     Type
  4807 ;;  convarg         8   73[BANK0 ] struct .
  4808 ;;  cp              2   82[BANK0 ] PTR unsigned char 
  4809 ;;		 -> STR_2(15), STR_1(19), 
  4810 ;;  i               2    0        int 
  4811 ;;  done            2    0        int 
  4812 ;;  c               1   81[BANK0 ] unsigned char 
  4813 ;; Return value:  Size  Location     Type
  4814 ;;                  1    wreg      void 
  4815 ;; Registers used:
  4816 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4817 ;; Tracked objects:
  4818 ;;		On entry : 0/0
  4819 ;;		On exit  : 0/0
  4820 ;;		Unchanged: 0/0
  4821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4822 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4823 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4824 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4825 ;;      Totals:         2      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4826 ;;Total ram usage:       19 bytes
  4827 ;; Hardware stack levels used: 1
  4828 ;; Hardware stack levels required when called: 7
  4829 ;; This function calls:
  4830 ;;		_dtoa
  4831 ;;		_efgtoa
  4832 ;;		_fputc
  4833 ;; This function is called by:
  4834 ;;		_vfprintf
  4835 ;; This function uses a non-reentrant model
  4836 ;;
  4837                           
  4838                           	psect	text15
  4839   003406                     __ptext15:
  4840                           	callstack 0
  4841   003406                     _vfpfcnvrt:
  4842                           	callstack 20
  4843   003406                     
  4844                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1007: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1008: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\dopr
      +                          nt.c: 1009:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 1010:     int done, i;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1016:  } convarg;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1019:     if ((*fmt)[0] == '%') {
  4845   003406  C0A5  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4846   00340A  C0A6  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4847   00340E  CFDE FFF6          	movff	postinc2,tblptrl
  4848   003412  CFDD FFF7          	movff	postdec2,tblptrh
  4849   003416                     	if	0	;tblptru may be non-zero
  4850   003416                     	endif
  4851   003416                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4852   003416  0E00               	movlw	low (__mediumconst shr (0+16))
  4853   003418  6EF8               	movwf	tblptru,c
  4854   00341A                     	endif
  4855   00341A  0008               	tblrd		*
  4856   00341C  50F5               	movf	tablat,w,c
  4857   00341E  0A25               	xorlw	37
  4858   003420  A4D8               	btfss	status,2,c
  4859   003422  EF15  F01A         	goto	u6581
  4860   003426  EF17  F01A         	goto	u6580
  4861   00342A                     u6581:
  4862   00342A  EF6F  F01B         	goto	l5890
  4863   00342E                     u6580:
  4864   00342E                     
  4865                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1020:         ++*
      +                          fmt;
  4866   00342E  C0A5  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4867   003432  C0A6  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4868   003436  2ADE               	incf	postinc2,f,c
  4869   003438  0E00               	movlw	0
  4870   00343A  22DD               	addwfc	postdec2,f,c
  4871   00343C                     
  4872                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1022:         fla
      +                          gs = width = 0;
  4873   00343C  0E00               	movlw	0
  4874   00343E  0100               	movlb	0	; () banked
  4875   003440  6FF3               	movwf	(_width+1)& (0+255),b
  4876   003442  0E00               	movlw	0
  4877   003444  6FF2               	movwf	_width& (0+255),b
  4878   003446  C0F2  F0FA         	movff	_width,_flags
  4879   00344A                     
  4880                           ; BSR set to: 0
  4881                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1023:         pre
      +                          c = -1;
  4882   00344A  69F4               	setf	_prec& (0+255),b
  4883   00344C  69F5               	setf	(_prec+1)& (0+255),b
  4884   00344E                     
  4885                           ; BSR set to: 0
  4886                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1117:   cp = *fmt
      +                          ;
  4887   00344E  C0A5  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4888   003452  C0A6  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4889   003456  CFDE F0B2          	movff	postinc2,vfpfcnvrt@cp
  4890   00345A  CFDD F0B3          	movff	postdec2,vfpfcnvrt@cp+1
  4891   00345E                     
  4892                           ; BSR set to: 0
  4893                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1187:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  4894   00345E  C0B2  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  4895   003462  C0B3  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  4896   003466                     	if	0	;tblptru may be non-zero
  4897   003466                     	endif
  4898   003466                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4899   003466  0E00               	movlw	low (__mediumconst shr (0+16))
  4900   003468  6EF8               	movwf	tblptru,c
  4901   00346A                     	endif
  4902   00346A  0008               	tblrd		*
  4903   00346C  50F5               	movf	tablat,w,c
  4904   00346E  0A64               	xorlw	100
  4905   003470  B4D8               	btfsc	status,2,c
  4906   003472  EF3D  F01A         	goto	u6591
  4907   003476  EF3F  F01A         	goto	u6590
  4908   00347A                     u6591:
  4909   00347A  EF4F  F01A         	goto	l5846
  4910   00347E                     u6590:
  4911   00347E                     
  4912                           ; BSR set to: 0
  4913   00347E  C0B2  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  4914   003482  C0B3  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  4915   003486                     	if	0	;tblptru may be non-zero
  4916   003486                     	endif
  4917   003486                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4918   003486  0E00               	movlw	low (__mediumconst shr (0+16))
  4919   003488  6EF8               	movwf	tblptru,c
  4920   00348A                     	endif
  4921   00348A  0008               	tblrd		*
  4922   00348C  50F5               	movf	tablat,w,c
  4923   00348E  0A69               	xorlw	105
  4924   003490  A4D8               	btfss	status,2,c
  4925   003492  EF4D  F01A         	goto	u6601
  4926   003496  EF4F  F01A         	goto	u6600
  4927   00349A                     u6601:
  4928   00349A  EF92  F01A         	goto	l5852
  4929   00349E                     u6600:
  4930   00349E                     l5846:
  4931                           
  4932                           ; BSR set to: 0
  4933                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1230:    convarg.
      +                          ll = (long long)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  4934   00349E  C0A7  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  4935   0034A2  C0A8  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  4936   0034A6  CFDF F055          	movff	indf2,??_vfpfcnvrt
  4937   0034AA  0E02               	movlw	2
  4938   0034AC  26DE               	addwf	postinc2,f,c
  4939   0034AE  CFDF F056          	movff	indf2,??_vfpfcnvrt+1
  4940   0034B2  0E00               	movlw	0
  4941   0034B4  22DD               	addwfc	postdec2,f,c
  4942   0034B6  C055  FFD9         	movff	??_vfpfcnvrt,fsr2l
  4943   0034BA  C056  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  4944   0034BE  CFDE F0A9          	movff	postinc2,vfpfcnvrt@convarg
  4945   0034C2  CFDD F0AA          	movff	postdec2,vfpfcnvrt@convarg+1
  4946   0034C6  0E00               	movlw	0
  4947   0034C8  BFAA               	btfsc	(vfpfcnvrt@convarg+1)& (0+255),7,b
  4948   0034CA  0EFF               	movlw	-1
  4949   0034CC  6FAB               	movwf	(vfpfcnvrt@convarg+2)& (0+255),b
  4950   0034CE  6FAC               	movwf	(vfpfcnvrt@convarg+3)& (0+255),b
  4951   0034D0  6FAD               	movwf	(vfpfcnvrt@convarg+4)& (0+255),b
  4952   0034D2  6FAE               	movwf	(vfpfcnvrt@convarg+5)& (0+255),b
  4953   0034D4  6FAF               	movwf	(vfpfcnvrt@convarg+6)& (0+255),b
  4954   0034D6  6FB0               	movwf	(vfpfcnvrt@convarg+7)& (0+255),b
  4955                           
  4956                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1232:    *fmt = c
      +                          p+1;
  4957   0034D8  0E01               	movlw	1
  4958   0034DA  25B2               	addwf	vfpfcnvrt@cp& (0+255),w,b
  4959   0034DC  6E55               	movwf	??_vfpfcnvrt^0,c
  4960   0034DE  0E00               	movlw	0
  4961   0034E0  21B3               	addwfc	(vfpfcnvrt@cp+1)& (0+255),w,b
  4962   0034E2  6E56               	movwf	(??_vfpfcnvrt+1)^0,c
  4963   0034E4  C0A5  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4964   0034E8  C0A6  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4965   0034EC  C055  FFDE         	movff	??_vfpfcnvrt,postinc2
  4966   0034F0  C056  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  4967   0034F4                     
  4968                           ; BSR set to: 0
  4969                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1233:    return (
      +                          void) dtoa(fp, convarg.ll);;	Return value of _vfpfcnvrt is never used
  4970   0034F4  C0A3  F020         	movff	vfpfcnvrt@fp,dtoa@fp
  4971   0034F8  C0A4  F021         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  4972   0034FC  C0A9  F022         	movff	vfpfcnvrt@convarg,dtoa@d
  4973   003500  C0AA  F023         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  4974   003504  C0AB  F024         	movff	vfpfcnvrt@convarg+2,dtoa@d+2
  4975   003508  C0AC  F025         	movff	vfpfcnvrt@convarg+3,dtoa@d+3
  4976   00350C  C0AD  F026         	movff	vfpfcnvrt@convarg+4,dtoa@d+4
  4977   003510  C0AE  F027         	movff	vfpfcnvrt@convarg+5,dtoa@d+5
  4978   003514  C0AF  F028         	movff	vfpfcnvrt@convarg+6,dtoa@d+6
  4979   003518  C0B0  F029         	movff	vfpfcnvrt@convarg+7,dtoa@d+7
  4980   00351C  EC86  F01B         	call	_dtoa	;wreg free
  4981   003520  EF85  F01B         	goto	l1305
  4982   003524                     l5852:
  4983                           
  4984                           ; BSR set to: 0
  4985                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1392:   cp = *fmt
      +                          ;
  4986   003524  C0A5  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4987   003528  C0A6  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4988   00352C  CFDE F0B2          	movff	postinc2,vfpfcnvrt@cp
  4989   003530  CFDD F0B3          	movff	postdec2,vfpfcnvrt@cp+1
  4990   003534                     
  4991                           ; BSR set to: 0
  4992                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1393:   c = *cp;
  4993   003534  C0B2  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  4994   003538  C0B3  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  4995   00353C                     	if	0	;tblptru may be non-zero
  4996   00353C                     	endif
  4997   00353C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4998   00353C  0E00               	movlw	low (__mediumconst shr (0+16))
  4999   00353E  6EF8               	movwf	tblptru,c
  5000   003540                     	endif
  5001   003540  0008               	tblrd		*
  5002   003542  CFF5 F0B1          	movff	tablat,vfpfcnvrt@c
  5003                           
  5004                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1394:   switch(c)
      +                           {
  5005   003546  EFB1  F01A         	goto	l5864
  5006   00354A                     l5856:
  5007                           
  5008                           ; BSR set to: 0
  5009                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1398:     cp++;
  5010   00354A  4BB2               	infsnz	vfpfcnvrt@cp& (0+255),f,b
  5011   00354C  2BB3               	incf	(vfpfcnvrt@cp+1)& (0+255),f,b
  5012                           
  5013                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1399:     break;
  5014   00354E  EFCA  F01A         	goto	l5866
  5015   003552                     l5858:
  5016                           
  5017                           ; BSR set to: 0
  5018                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1424:     c = 'l'
      +                          ;
  5019   003552  0E6C               	movlw	108
  5020   003554  6FB1               	movwf	vfpfcnvrt@c& (0+255),b
  5021                           
  5022                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1425:     break;
  5023   003556  EFCA  F01A         	goto	l5866
  5024   00355A                     l5860:
  5025                           
  5026                           ; BSR set to: 0
  5027                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1427:     c = 0;
  5028   00355A  0E00               	movlw	0
  5029   00355C  6FB1               	movwf	vfpfcnvrt@c& (0+255),b
  5030                           
  5031                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1428:     break;
  5032   00355E  EFCA  F01A         	goto	l5866
  5033   003562                     l5864:
  5034                           
  5035                           ; BSR set to: 0
  5036   003562  51B1               	movf	vfpfcnvrt@c& (0+255),w,b
  5037   003564  6E55               	movwf	??_vfpfcnvrt^0,c
  5038   003566  6A56               	clrf	(??_vfpfcnvrt+1)^0,c
  5039                           
  5040                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5041                           ; Switch size 1, requested type "simple"
  5042                           ; Number of cases is 1, Range of values is 0 to 0
  5043                           ; switch strategies available:
  5044                           ; Name         Instructions Cycles
  5045                           ; simple_byte            4     3 (average)
  5046                           ;	Chosen strategy is simple_byte
  5047   003568  5056               	movf	(??_vfpfcnvrt+1)^0,w,c
  5048   00356A  0A00               	xorlw	0	; case 0
  5049   00356C  B4D8               	btfsc	status,2,c
  5050   00356E  EFBB  F01A         	goto	l6290
  5051   003572  EFAD  F01A         	goto	l5860
  5052   003576                     l6290:
  5053                           
  5054                           ; BSR set to: 0
  5055                           ; Switch size 1, requested type "simple"
  5056                           ; Number of cases is 3, Range of values is 76 to 108
  5057                           ; switch strategies available:
  5058                           ; Name         Instructions Cycles
  5059                           ; simple_byte           10     6 (average)
  5060                           ;	Chosen strategy is simple_byte
  5061   003576  5055               	movf	??_vfpfcnvrt^0,w,c
  5062   003578  0A4C               	xorlw	76	; case 76
  5063   00357A  B4D8               	btfsc	status,2,c
  5064   00357C  EFA5  F01A         	goto	l5856
  5065   003580  0A2A               	xorlw	42	; case 102
  5066   003582  B4D8               	btfsc	status,2,c
  5067   003584  EFA9  F01A         	goto	l5858
  5068   003588  0A0A               	xorlw	10	; case 108
  5069   00358A  B4D8               	btfsc	status,2,c
  5070   00358C  EFA5  F01A         	goto	l5856
  5071   003590  EFAD  F01A         	goto	l5860
  5072   003594                     l5866:
  5073                           
  5074                           ; BSR set to: 0
  5075   003594  C0B2  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  5076   003598  C0B3  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  5077   00359C                     	if	0	;tblptru may be non-zero
  5078   00359C                     	endif
  5079   00359C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  5080   00359C  0E00               	movlw	low (__mediumconst shr (0+16))
  5081   00359E  6EF8               	movwf	tblptru,c
  5082   0035A0                     	endif
  5083   0035A0  0008               	tblrd		*
  5084   0035A2  50F5               	movf	tablat,w,c
  5085   0035A4  0A66               	xorlw	102
  5086   0035A6  A4D8               	btfss	status,2,c
  5087   0035A8  EFD8  F01A         	goto	u6611
  5088   0035AC  EFDA  F01A         	goto	u6610
  5089   0035B0                     u6611:
  5090   0035B0  EF66  F01B         	goto	l5886
  5091   0035B4                     u6610:
  5092   0035B4  EF10  F01B         	goto	l5874
  5093   0035B8                     l5868:
  5094                           
  5095                           ; BSR set to: 0
  5096                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1459:      convar
      +                          g.f = (long double)(*(double *)__va_arg(*(double **)ap, (double)0));
  5097   0035B8  C0A7  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  5098   0035BC  C0A8  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  5099   0035C0  CFDF F055          	movff	indf2,??_vfpfcnvrt
  5100   0035C4  0E04               	movlw	4
  5101   0035C6  26DE               	addwf	postinc2,f,c
  5102   0035C8  CFDF F056          	movff	indf2,??_vfpfcnvrt+1
  5103   0035CC  0E00               	movlw	0
  5104   0035CE  22DD               	addwfc	postdec2,f,c
  5105   0035D0  C055  FFD9         	movff	??_vfpfcnvrt,fsr2l
  5106   0035D4  C056  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  5107   0035D8  CFDE F0A9          	movff	postinc2,vfpfcnvrt@convarg
  5108   0035DC  CFDE F0AA          	movff	postinc2,vfpfcnvrt@convarg+1
  5109   0035E0  CFDE F0AB          	movff	postinc2,vfpfcnvrt@convarg+2
  5110   0035E4  CFDE F0AC          	movff	postinc2,vfpfcnvrt@convarg+3
  5111                           
  5112                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1460:      break;
  5113   0035E8  EF25  F01B         	goto	l5876
  5114   0035EC                     l5870:
  5115                           
  5116                           ; BSR set to: 0
  5117                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1462:      convar
      +                          g.f = (long double)(*(long double *)__va_arg(*(long double **)ap, (long double)0));
  5118   0035EC  C0A7  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  5119   0035F0  C0A8  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  5120   0035F4  CFDF F055          	movff	indf2,??_vfpfcnvrt
  5121   0035F8  0E04               	movlw	4
  5122   0035FA  26DE               	addwf	postinc2,f,c
  5123   0035FC  CFDF F056          	movff	indf2,??_vfpfcnvrt+1
  5124   003600  0E00               	movlw	0
  5125   003602  22DD               	addwfc	postdec2,f,c
  5126   003604  C055  FFD9         	movff	??_vfpfcnvrt,fsr2l
  5127   003608  C056  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  5128   00360C  CFDE F0A9          	movff	postinc2,vfpfcnvrt@convarg
  5129   003610  CFDE F0AA          	movff	postinc2,vfpfcnvrt@convarg+1
  5130   003614  CFDE F0AB          	movff	postinc2,vfpfcnvrt@convarg+2
  5131   003618  CFDE F0AC          	movff	postinc2,vfpfcnvrt@convarg+3
  5132                           
  5133                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1463:      break;
  5134   00361C  EF25  F01B         	goto	l5876
  5135   003620                     l5874:
  5136                           
  5137                           ; BSR set to: 0
  5138   003620  51B1               	movf	vfpfcnvrt@c& (0+255),w,b
  5139   003622  6E55               	movwf	??_vfpfcnvrt^0,c
  5140   003624  6A56               	clrf	(??_vfpfcnvrt+1)^0,c
  5141                           
  5142                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5143                           ; Switch size 1, requested type "simple"
  5144                           ; Number of cases is 1, Range of values is 0 to 0
  5145                           ; switch strategies available:
  5146                           ; Name         Instructions Cycles
  5147                           ; simple_byte            4     3 (average)
  5148                           ;	Chosen strategy is simple_byte
  5149   003626  5056               	movf	(??_vfpfcnvrt+1)^0,w,c
  5150   003628  0A00               	xorlw	0	; case 0
  5151   00362A  B4D8               	btfsc	status,2,c
  5152   00362C  EF1A  F01B         	goto	l6292
  5153   003630  EF25  F01B         	goto	l5876
  5154   003634                     l6292:
  5155                           
  5156                           ; BSR set to: 0
  5157                           ; Switch size 1, requested type "simple"
  5158                           ; Number of cases is 2, Range of values is 76 to 108
  5159                           ; switch strategies available:
  5160                           ; Name         Instructions Cycles
  5161                           ; simple_byte            7     4 (average)
  5162                           ;	Chosen strategy is simple_byte
  5163   003634  5055               	movf	??_vfpfcnvrt^0,w,c
  5164   003636  0A4C               	xorlw	76	; case 76
  5165   003638  B4D8               	btfsc	status,2,c
  5166   00363A  EFF6  F01A         	goto	l5870
  5167   00363E  0A20               	xorlw	32	; case 108
  5168   003640  B4D8               	btfsc	status,2,c
  5169   003642  EFDC  F01A         	goto	l5868
  5170   003646  EF25  F01B         	goto	l5876
  5171   00364A                     l5876:
  5172                           
  5173                           ; BSR set to: 0
  5174                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1465:    *fmt = c
      +                          p+1;
  5175   00364A  0E01               	movlw	1
  5176   00364C  25B2               	addwf	vfpfcnvrt@cp& (0+255),w,b
  5177   00364E  6E55               	movwf	??_vfpfcnvrt^0,c
  5178   003650  0E00               	movlw	0
  5179   003652  21B3               	addwfc	(vfpfcnvrt@cp+1)& (0+255),w,b
  5180   003654  6E56               	movwf	(??_vfpfcnvrt+1)^0,c
  5181   003656  C0A5  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  5182   00365A  C0A6  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  5183   00365E  C055  FFDE         	movff	??_vfpfcnvrt,postinc2
  5184   003662  C056  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  5185                           
  5186                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1466:    switch (
      +                          *cp) {
  5187   003666  EF4E  F01B         	goto	l5884
  5188   00366A                     l5878:
  5189                           
  5190                           ; BSR set to: 0
  5191                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1493:      return
      +                           (void) efgtoa(fp, convarg.f, *cp);;	Return value of _vfpfcnvrt is never used
  5192   00366A  C0A3  F070         	movff	vfpfcnvrt@fp,efgtoa@fp
  5193   00366E  C0A4  F071         	movff	vfpfcnvrt@fp+1,efgtoa@fp+1
  5194   003672  C0A9  F072         	movff	vfpfcnvrt@convarg,efgtoa@f
  5195   003676  C0AA  F073         	movff	vfpfcnvrt@convarg+1,efgtoa@f+1
  5196   00367A  C0AB  F074         	movff	vfpfcnvrt@convarg+2,efgtoa@f+2
  5197   00367E  C0AC  F075         	movff	vfpfcnvrt@convarg+3,efgtoa@f+3
  5198   003682  C0B2  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  5199   003686  C0B3  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  5200   00368A                     	if	0	;tblptru may be non-zero
  5201   00368A                     	endif
  5202   00368A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  5203   00368A  0E00               	movlw	low (__mediumconst shr (0+16))
  5204   00368C  6EF8               	movwf	tblptru,c
  5205   00368E                     	endif
  5206   00368E  0008               	tblrd		*
  5207   003690  CFF5 F076          	movff	tablat,efgtoa@c
  5208   003694  EC2B  F00D         	call	_efgtoa	;wreg free
  5209   003698  EF85  F01B         	goto	l1305
  5210   00369C                     l5884:
  5211                           
  5212                           ; BSR set to: 0
  5213   00369C  C0B2  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  5214   0036A0  C0B3  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  5215   0036A4                     	if	0	;tblptru may be non-zero
  5216   0036A4                     	endif
  5217   0036A4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  5218   0036A4  0E00               	movlw	low (__mediumconst shr (0+16))
  5219   0036A6  6EF8               	movwf	tblptru,c
  5220   0036A8                     	endif
  5221   0036A8  0008               	tblrd		*
  5222   0036AA  50F5               	movf	tablat,w,c
  5223   0036AC  6E55               	movwf	??_vfpfcnvrt^0,c
  5224   0036AE  6A56               	clrf	(??_vfpfcnvrt+1)^0,c
  5225                           
  5226                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5227                           ; Switch size 1, requested type "simple"
  5228                           ; Number of cases is 1, Range of values is 0 to 0
  5229                           ; switch strategies available:
  5230                           ; Name         Instructions Cycles
  5231                           ; simple_byte            4     3 (average)
  5232                           ;	Chosen strategy is simple_byte
  5233   0036B0  5056               	movf	(??_vfpfcnvrt+1)^0,w,c
  5234   0036B2  0A00               	xorlw	0	; case 0
  5235   0036B4  B4D8               	btfsc	status,2,c
  5236   0036B6  EF5F  F01B         	goto	l6294
  5237   0036BA  EF66  F01B         	goto	l5886
  5238   0036BE                     l6294:
  5239                           
  5240                           ; BSR set to: 0
  5241                           ; Switch size 1, requested type "simple"
  5242                           ; Number of cases is 1, Range of values is 102 to 102
  5243                           ; switch strategies available:
  5244                           ; Name         Instructions Cycles
  5245                           ; simple_byte            4     3 (average)
  5246                           ;	Chosen strategy is simple_byte
  5247   0036BE  5055               	movf	??_vfpfcnvrt^0,w,c
  5248   0036C0  0A66               	xorlw	102	; case 102
  5249   0036C2  B4D8               	btfsc	status,2,c
  5250   0036C4  EF35  F01B         	goto	l5878
  5251   0036C8  EF66  F01B         	goto	l5886
  5252   0036CC                     l5886:
  5253                           
  5254                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1509:         ++*
      +                          fmt;
  5255   0036CC  C0A5  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  5256   0036D0  C0A6  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  5257   0036D4  2ADE               	incf	postinc2,f,c
  5258   0036D6  0E00               	movlw	0
  5259   0036D8  22DD               	addwfc	postdec2,f,c
  5260   0036DA  EF85  F01B         	goto	l1305
  5261   0036DE                     l5890:
  5262                           
  5263                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1514:     fputc((
      +                          int)(*fmt)[0], fp);
  5264   0036DE  C0A5  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  5265   0036E2  C0A6  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  5266   0036E6  CFDE FFF6          	movff	postinc2,tblptrl
  5267   0036EA  CFDD FFF7          	movff	postdec2,tblptrh
  5268   0036EE                     	if	0	;tblptru may be non-zero
  5269   0036EE                     	endif
  5270   0036EE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  5271   0036EE  0E00               	movlw	low (__mediumconst shr (0+16))
  5272   0036F0  6EF8               	movwf	tblptru,c
  5273   0036F2                     	endif
  5274   0036F2  0008               	tblrd		*
  5275   0036F4  50F5               	movf	tablat,w,c
  5276   0036F6  6E05               	movwf	fputc@c^0,c
  5277   0036F8  6A06               	clrf	(fputc@c+1)^0,c
  5278   0036FA  C0A3  F007         	movff	vfpfcnvrt@fp,fputc@fp
  5279   0036FE  C0A4  F008         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  5280   003702  EC97  F027         	call	_fputc	;wreg free
  5281   003706  EF66  F01B         	goto	l5886
  5282   00370A                     l1305:
  5283   00370A  0012               	return		;funcret
  5284   00370C                     __end_of_vfpfcnvrt:
  5285                           	callstack 0
  5286                           
  5287 ;; *************** function _efgtoa *****************
  5288 ;; Defined at:
  5289 ;;		line 506 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  5290 ;; Parameters:    Size  Location     Type
  5291 ;;  fp              2   16[BANK0 ] PTR struct _IO_FILE
  5292 ;;		 -> sprintf@f(11), 
  5293 ;;  f               4   18[BANK0 ] PTR struct _IO_FILE
  5294 ;;  c               1   22[BANK0 ] unsigned char 
  5295 ;; Auto vars:     Size  Location     Type
  5296 ;;  u               4   63[BANK0 ] struct flui
  5297 ;;  g               4   57[BANK0 ] struct flui
  5298 ;;  l               4   52[BANK0 ] struct flui
  5299 ;;  h               4   48[BANK0 ] struct flui
  5300 ;;  ou              4   42[BANK0 ] struct flui
  5301 ;;  n               2   61[BANK0 ] int 
  5302 ;;  i               2   46[BANK0 ] int 
  5303 ;;  w               2   40[BANK0 ] int 
  5304 ;;  e               2   38[BANK0 ] int 
  5305 ;;  m               2   36[BANK0 ] int 
  5306 ;;  d               2   34[BANK0 ] int 
  5307 ;;  t               2   27[BANK0 ] int 
  5308 ;;  p               2   25[BANK0 ] int 
  5309 ;;  ne              2   23[BANK0 ] int 
  5310 ;;  sign            1   56[BANK0 ] unsigned char 
  5311 ;;  nmode           1   33[BANK0 ] unsigned char 
  5312 ;;  mode            1   32[BANK0 ] unsigned char 
  5313 ;;  pp              1   31[BANK0 ] unsigned char 
  5314 ;;  esign           1    0        unsigned char 
  5315 ;; Return value:  Size  Location     Type
  5316 ;;                  1    wreg      void 
  5317 ;; Registers used:
  5318 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5319 ;; Tracked objects:
  5320 ;;		On entry : 0/0
  5321 ;;		On exit  : 0/0
  5322 ;;		Unchanged: 0/0
  5323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5324 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5325 ;;      Locals:         0      44       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5326 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5327 ;;      Totals:         2      51       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5328 ;;Total ram usage:       53 bytes
  5329 ;; Hardware stack levels used: 1
  5330 ;; Hardware stack levels required when called: 6
  5331 ;; This function calls:
  5332 ;;		___fladd
  5333 ;;		___fldiv
  5334 ;;		___fleq
  5335 ;;		___flge
  5336 ;;		___flmul
  5337 ;;		___flneg
  5338 ;;		___flsub
  5339 ;;		___fltol
  5340 ;;		___fpclassifyf
  5341 ;;		_floorf
  5342 ;;		_labs
  5343 ;;		_memcpy
  5344 ;;		_pad
  5345 ;;		_strcpy
  5346 ;; This function is called by:
  5347 ;;		_vfpfcnvrt
  5348 ;; This function uses a non-reentrant model
  5349 ;;
  5350                           
  5351                           	psect	text16
  5352   001A56                     __ptext16:
  5353                           	callstack 0
  5354   001A56                     _efgtoa:
  5355                           	callstack 20
  5356   001A56                     
  5357                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 506: static void 
      +                          efgtoa(FILE *fp, long double f, char c);C:\Program Files\Microchip\xc8\v2.40\pic\sources
      +                          \c99\common\doprnt.c: 507: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 508:     char mode, nmode, pp, sign, esign;;C:\Program Files\Microchip\xc8\v2
      +                          .40\pic\sources\c99\common\doprnt.c: 509:     int d, e, i, m, n, ne, p, t, w;;C:\Program
      +                           Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 510:     long double h, l;
  5358   001A56  0E00               	movlw	0
  5359   001A58  0100               	movlb	0	; () banked
  5360   001A5A  6F98               	movwf	efgtoa@sign& (0+255),b
  5361   001A5C                     
  5362                           ; BSR set to: 0
  5363                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 515:     g.f = f;
  5364   001A5C  C072  F099         	movff	efgtoa@f,efgtoa@g
  5365   001A60  C073  F09A         	movff	efgtoa@f+1,efgtoa@g+1
  5366   001A64  C074  F09B         	movff	efgtoa@f+2,efgtoa@g+2
  5367   001A68  C075  F09C         	movff	efgtoa@f+3,efgtoa@g+3
  5368   001A6C                     
  5369                           ; BSR set to: 0
  5370                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 516:     if (g.f 
      +                          < 0.0) {
  5371   001A6C  BF9C               	btfsc	(efgtoa@g+3)& (0+255),7,b
  5372   001A6E  EF3D  F00D         	goto	u6260
  5373   001A72  EF3B  F00D         	goto	u6261
  5374   001A76                     u6261:
  5375   001A76  EF51  F00D         	goto	l5620
  5376   001A7A                     u6260:
  5377   001A7A                     
  5378                           ; BSR set to: 0
  5379                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 517:         sign
      +                           = 1;
  5380   001A7A  0E01               	movlw	1
  5381   001A7C  6F98               	movwf	efgtoa@sign& (0+255),b
  5382   001A7E                     
  5383                           ; BSR set to: 0
  5384                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 518:         g.f 
      +                          = -g.f;
  5385   001A7E  C099  F005         	movff	efgtoa@g,___flneg@f1
  5386   001A82  C09A  F006         	movff	efgtoa@g+1,___flneg@f1+1
  5387   001A86  C09B  F007         	movff	efgtoa@g+2,___flneg@f1+2
  5388   001A8A  C09C  F008         	movff	efgtoa@g+3,___flneg@f1+3
  5389   001A8E  EC6D  F02C         	call	___flneg	;wreg free
  5390   001A92  C005  F099         	movff	?___flneg,efgtoa@g
  5391   001A96  C006  F09A         	movff	?___flneg+1,efgtoa@g+1
  5392   001A9A  C007  F09B         	movff	?___flneg+2,efgtoa@g+2
  5393   001A9E  C008  F09C         	movff	?___flneg+3,efgtoa@g+3
  5394   001AA2                     l5620:
  5395                           
  5396                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 522:     n = 0;
  5397   001AA2  0E00               	movlw	0
  5398   001AA4  0100               	movlb	0	; () banked
  5399   001AA6  6F9E               	movwf	(efgtoa@n+1)& (0+255),b
  5400   001AA8  0E00               	movlw	0
  5401   001AAA  6F9D               	movwf	efgtoa@n& (0+255),b
  5402   001AAC                     
  5403                           ; BSR set to: 0
  5404                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 523:     w = widt
      +                          h;
  5405   001AAC  C0F2  F088         	movff	_width,efgtoa@w
  5406   001AB0  C0F3  F089         	movff	_width+1,efgtoa@w+1
  5407   001AB4                     
  5408                           ; BSR set to: 0
  5409                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 524:     if (sign
  5410   001AB4  5198               	movf	efgtoa@sign& (0+255),w,b
  5411   001AB6  B4D8               	btfsc	status,2,c
  5412   001AB8  EF60  F00D         	goto	u6271
  5413   001ABC  EF62  F00D         	goto	u6270
  5414   001AC0                     u6271:
  5415   001AC0  EF76  F00D         	goto	l5634
  5416   001AC4                     u6270:
  5417   001AC4                     
  5418                           ; BSR set to: 0
  5419                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 528:    ) {;C:\Pr
      +                          ogram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 529:   sign = sign ? '-
      +                          ' : '+';
  5420   001AC4  5198               	movf	efgtoa@sign& (0+255),w,b
  5421   001AC6  A4D8               	btfss	status,2,c
  5422   001AC8  EF68  F00D         	goto	u6281
  5423   001ACC  EF6A  F00D         	goto	u6280
  5424   001AD0                     u6281:
  5425   001AD0  EF70  F00D         	goto	l5630
  5426   001AD4                     u6280:
  5427   001AD4                     
  5428                           ; BSR set to: 0
  5429   001AD4  0E00               	movlw	0
  5430   001AD6  6F7E               	movwf	(_efgtoa$2732+1)& (0+255),b
  5431   001AD8  0E2B               	movlw	43
  5432   001ADA  6F7D               	movwf	_efgtoa$2732& (0+255),b
  5433   001ADC  EF74  F00D         	goto	l5632
  5434   001AE0                     l5630:
  5435                           
  5436                           ; BSR set to: 0
  5437   001AE0  0E00               	movlw	0
  5438   001AE2  6F7E               	movwf	(_efgtoa$2732+1)& (0+255),b
  5439   001AE4  0E2D               	movlw	45
  5440   001AE6  6F7D               	movwf	_efgtoa$2732& (0+255),b
  5441   001AE8                     l5632:
  5442                           
  5443                           ; BSR set to: 0
  5444   001AE8  C07D  F098         	movff	_efgtoa$2732,efgtoa@sign
  5445   001AEC                     l5634:
  5446                           
  5447                           ; BSR set to: 0
  5448                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 538:     if (( __
      +                          fpclassifyf(g.f) == 1 )) {
  5449   001AEC  C099  F005         	movff	efgtoa@g,___fpclassifyf@x
  5450   001AF0  C09A  F006         	movff	efgtoa@g+1,___fpclassifyf@x+1
  5451   001AF4  C09B  F007         	movff	efgtoa@g+2,___fpclassifyf@x+2
  5452   001AF8  C09C  F008         	movff	efgtoa@g+3,___fpclassifyf@x+3
  5453   001AFC  ECF5  F024         	call	___fpclassifyf	;wreg free
  5454   001B00  0405               	decf	?___fpclassifyf^0,w,c
  5455   001B02  1006               	iorwf	(?___fpclassifyf+1)^0,w,c
  5456   001B04  A4D8               	btfss	status,2,c
  5457   001B06  EF87  F00D         	goto	u6291
  5458   001B0A  EF89  F00D         	goto	u6290
  5459   001B0E                     u6291:
  5460   001B0E  EFBC  F00D         	goto	l5652
  5461   001B12                     u6290:
  5462   001B12                     
  5463                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 539:   if (sign) 
      +                          {
  5464   001B12  0100               	movlb	0	; () banked
  5465   001B14  5198               	movf	efgtoa@sign& (0+255),w,b
  5466   001B16  B4D8               	btfsc	status,2,c
  5467   001B18  EF90  F00D         	goto	u6301
  5468   001B1C  EF92  F00D         	goto	u6300
  5469   001B20                     u6301:
  5470   001B20  EF9B  F00D         	goto	l5644
  5471   001B24                     u6300:
  5472   001B24                     
  5473                           ; BSR set to: 0
  5474                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 540:    dbuf[0] =
      +                           sign;
  5475   001B24  C098  F181         	movff	efgtoa@sign,_dbuf
  5476   001B28                     
  5477                           ; BSR set to: 0
  5478                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 541:    w--;
  5479   001B28  0788               	decf	efgtoa@w& (0+255),f,b
  5480   001B2A  A0D8               	btfss	status,0,c
  5481   001B2C  0789               	decf	(efgtoa@w+1)& (0+255),f,b
  5482   001B2E                     
  5483                           ; BSR set to: 0
  5484                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 542:    n = 1;
  5485   001B2E  0E00               	movlw	0
  5486   001B30  6F9E               	movwf	(efgtoa@n+1)& (0+255),b
  5487   001B32  0E01               	movlw	1
  5488   001B34  6F9D               	movwf	efgtoa@n& (0+255),b
  5489   001B36                     l5644:
  5490                           
  5491                           ; BSR set to: 0
  5492                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 550:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 551:             strcpy(&d
      +                          buf[n], "inf");
  5493   001B36  0E81               	movlw	low _dbuf
  5494   001B38  259D               	addwf	efgtoa@n& (0+255),w,b
  5495   001B3A  6E05               	movwf	strcpy@dest^0,c
  5496   001B3C  0E01               	movlw	high _dbuf
  5497   001B3E  219E               	addwfc	(efgtoa@n+1)& (0+255),w,b
  5498   001B40  6E06               	movwf	(strcpy@dest+1)^0,c
  5499   001B42  0E23               	movlw	low STR_3
  5500   001B44  6E07               	movwf	strcpy@src^0,c
  5501   001B46  0E0E               	movlw	high STR_3
  5502   001B48  6E08               	movwf	(strcpy@src+1)^0,c
  5503   001B4A  ECC9  F02B         	call	_strcpy	;wreg free
  5504   001B4E                     l5646:
  5505                           
  5506                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 552:         };C:
      +                          \Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 553:         w -= ((
      +                          sizeof("inf")/sizeof("inf"[0]))-1);
  5507   001B4E  0100               	movlb	0	; () banked
  5508   001B50  0EFD               	movlw	253
  5509   001B52  2788               	addwf	efgtoa@w& (0+255),f,b
  5510   001B54  0EFF               	movlw	255
  5511   001B56  2389               	addwfc	(efgtoa@w+1)& (0+255),f,b
  5512   001B58                     
  5513                           ; BSR set to: 0
  5514                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 554:         retu
      +                          rn (void) pad(fp, &dbuf[0], w);
  5515   001B58  C070  F015         	movff	efgtoa@fp,pad@fp
  5516   001B5C  C071  F016         	movff	efgtoa@fp+1,pad@fp+1
  5517   001B60  0E81               	movlw	low _dbuf
  5518   001B62  6E17               	movwf	pad@buf^0,c
  5519   001B64  0E01               	movlw	high _dbuf
  5520   001B66  6E18               	movwf	(pad@buf+1)^0,c
  5521   001B68  C088  F019         	movff	efgtoa@w,pad@p
  5522   001B6C  C089  F01A         	movff	efgtoa@w+1,pad@p+1
  5523   001B70  EC86  F029         	call	_pad	;wreg free
  5524   001B74  EF27  F012         	goto	l1257
  5525   001B78                     l5652:
  5526                           
  5527                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 556:     if (( __
      +                          fpclassifyf(g.f) == 0 )) {
  5528   001B78  C099  F005         	movff	efgtoa@g,___fpclassifyf@x
  5529   001B7C  C09A  F006         	movff	efgtoa@g+1,___fpclassifyf@x+1
  5530   001B80  C09B  F007         	movff	efgtoa@g+2,___fpclassifyf@x+2
  5531   001B84  C09C  F008         	movff	efgtoa@g+3,___fpclassifyf@x+3
  5532   001B88  ECF5  F024         	call	___fpclassifyf	;wreg free
  5533   001B8C  5005               	movf	?___fpclassifyf^0,w,c
  5534   001B8E  1006               	iorwf	(?___fpclassifyf+1)^0,w,c
  5535   001B90  A4D8               	btfss	status,2,c
  5536   001B92  EFCD  F00D         	goto	u6311
  5537   001B96  EFCF  F00D         	goto	u6310
  5538   001B9A                     u6311:
  5539   001B9A  EFEF  F00D         	goto	l5670
  5540   001B9E                     u6310:
  5541   001B9E                     
  5542                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 557:   if (sign) 
      +                          {
  5543   001B9E  0100               	movlb	0	; () banked
  5544   001BA0  5198               	movf	efgtoa@sign& (0+255),w,b
  5545   001BA2  B4D8               	btfsc	status,2,c
  5546   001BA4  EFD6  F00D         	goto	u6321
  5547   001BA8  EFD8  F00D         	goto	u6320
  5548   001BAC                     u6321:
  5549   001BAC  EFE1  F00D         	goto	l5662
  5550   001BB0                     u6320:
  5551   001BB0                     
  5552                           ; BSR set to: 0
  5553                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 558:    dbuf[0] =
      +                           sign;
  5554   001BB0  C098  F181         	movff	efgtoa@sign,_dbuf
  5555   001BB4                     
  5556                           ; BSR set to: 0
  5557                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 559:    w--;
  5558   001BB4  0788               	decf	efgtoa@w& (0+255),f,b
  5559   001BB6  A0D8               	btfss	status,0,c
  5560   001BB8  0789               	decf	(efgtoa@w+1)& (0+255),f,b
  5561   001BBA                     
  5562                           ; BSR set to: 0
  5563                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 560:    n = 1;
  5564   001BBA  0E00               	movlw	0
  5565   001BBC  6F9E               	movwf	(efgtoa@n+1)& (0+255),b
  5566   001BBE  0E01               	movlw	1
  5567   001BC0  6F9D               	movwf	efgtoa@n& (0+255),b
  5568   001BC2                     l5662:
  5569                           
  5570                           ; BSR set to: 0
  5571                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 568:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 569:             strcpy(&d
      +                          buf[n], "nan");
  5572   001BC2  0E81               	movlw	low _dbuf
  5573   001BC4  259D               	addwf	efgtoa@n& (0+255),w,b
  5574   001BC6  6E05               	movwf	strcpy@dest^0,c
  5575   001BC8  0E01               	movlw	high _dbuf
  5576   001BCA  219E               	addwfc	(efgtoa@n+1)& (0+255),w,b
  5577   001BCC  6E06               	movwf	(strcpy@dest+1)^0,c
  5578   001BCE  0E27               	movlw	low STR_6
  5579   001BD0  6E07               	movwf	strcpy@src^0,c
  5580   001BD2  0E0E               	movlw	high STR_6
  5581   001BD4  6E08               	movwf	(strcpy@src+1)^0,c
  5582   001BD6  ECC9  F02B         	call	_strcpy	;wreg free
  5583   001BDA  EFA7  F00D         	goto	l5646
  5584   001BDE                     l5670:
  5585                           
  5586                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 576:     u.f = 1.
      +                          0;
  5587   001BDE  0E00               	movlw	0
  5588   001BE0  0100               	movlb	0	; () banked
  5589   001BE2  6F9F               	movwf	efgtoa@u& (0+255),b
  5590   001BE4  0E00               	movlw	0
  5591   001BE6  6FA0               	movwf	(efgtoa@u+1)& (0+255),b
  5592   001BE8  0E80               	movlw	128
  5593   001BEA  6FA1               	movwf	(efgtoa@u+2)& (0+255),b
  5594   001BEC  0E3F               	movlw	63
  5595   001BEE  6FA2               	movwf	(efgtoa@u+3)& (0+255),b
  5596                           
  5597                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 577:     e = 0;
  5598   001BF0  0E00               	movlw	0
  5599   001BF2  6F87               	movwf	(efgtoa@e+1)& (0+255),b
  5600   001BF4  0E00               	movlw	0
  5601   001BF6  6F86               	movwf	efgtoa@e& (0+255),b
  5602   001BF8                     
  5603                           ; BSR set to: 0
  5604                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 578:  if (!(g.f =
      +                          = 0.0)) {
  5605   001BF8  C099  F005         	movff	efgtoa@g,___fleq@ff1
  5606   001BFC  C09A  F006         	movff	efgtoa@g+1,___fleq@ff1+1
  5607   001C00  C09B  F007         	movff	efgtoa@g+2,___fleq@ff1+2
  5608   001C04  C09C  F008         	movff	efgtoa@g+3,___fleq@ff1+3
  5609   001C08  0E00               	movlw	0
  5610   001C0A  6E09               	movwf	___fleq@ff2^0,c
  5611   001C0C  0E00               	movlw	0
  5612   001C0E  6E0A               	movwf	(___fleq@ff2+1)^0,c
  5613   001C10  0E00               	movlw	0
  5614   001C12  6E0B               	movwf	(___fleq@ff2+2)^0,c
  5615   001C14  0E00               	movlw	0
  5616   001C16  6E0C               	movwf	(___fleq@ff2+3)^0,c
  5617   001C18  EC53  F028         	call	___fleq	;wreg free
  5618   001C1C  B0D8               	btfsc	status,0,c
  5619   001C1E  EF13  F00E         	goto	u6331
  5620   001C22  EF15  F00E         	goto	u6330
  5621   001C26                     u6331:
  5622   001C26  EFF4  F00E         	goto	l1260
  5623   001C2A                     u6330:
  5624   001C2A  EF22  F00E         	goto	l5678
  5625   001C2E                     l1262:
  5626                           
  5627                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 580:    u = ou;
  5628   001C2E  C08A  F09F         	movff	efgtoa@ou,efgtoa@u
  5629   001C32  C08B  F0A0         	movff	efgtoa@ou+1,efgtoa@u+1
  5630   001C36  C08C  F0A1         	movff	efgtoa@ou+2,efgtoa@u+2
  5631   001C3A  C08D  F0A2         	movff	efgtoa@ou+3,efgtoa@u+3
  5632   001C3E                     
  5633                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 581:    ++e;
  5634   001C3E  0100               	movlb	0	; () banked
  5635   001C40  4B86               	infsnz	efgtoa@e& (0+255),f,b
  5636   001C42  2B87               	incf	(efgtoa@e+1)& (0+255),f,b
  5637   001C44                     l5678:
  5638                           
  5639                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 579:   while ((la
      +                          bs((g).u-((ou.f = u.f*10.0,ou)).u) <= 1) || g.f > ou.f) {
  5640   001C44  C09F  F01D         	movff	efgtoa@u,___flmul@b
  5641   001C48  C0A0  F01E         	movff	efgtoa@u+1,___flmul@b+1
  5642   001C4C  C0A1  F01F         	movff	efgtoa@u+2,___flmul@b+2
  5643   001C50  C0A2  F020         	movff	efgtoa@u+3,___flmul@b+3
  5644   001C54  0E00               	movlw	0
  5645   001C56  6E21               	movwf	___flmul@a^0,c
  5646   001C58  0E00               	movlw	0
  5647   001C5A  6E22               	movwf	(___flmul@a+1)^0,c
  5648   001C5C  0E20               	movlw	32
  5649   001C5E  6E23               	movwf	(___flmul@a+2)^0,c
  5650   001C60  0E41               	movlw	65
  5651   001C62  6E24               	movwf	(___flmul@a+3)^0,c
  5652   001C64  EC88  F014         	call	___flmul	;wreg free
  5653   001C68  C01D  F08A         	movff	?___flmul,efgtoa@ou
  5654   001C6C  C01E  F08B         	movff	?___flmul+1,efgtoa@ou+1
  5655   001C70  C01F  F08C         	movff	?___flmul+2,efgtoa@ou+2
  5656   001C74  C020  F08D         	movff	?___flmul+3,efgtoa@ou+3
  5657   001C78  0100               	movlb	0	; () banked
  5658   001C7A  518A               	movf	efgtoa@ou& (0+255),w,b
  5659   001C7C  5D99               	subwf	efgtoa@g& (0+255),w,b
  5660   001C7E  6E05               	movwf	labs@a^0,c
  5661   001C80  518B               	movf	(efgtoa@ou+1)& (0+255),w,b
  5662   001C82  599A               	subwfb	(efgtoa@g+1)& (0+255),w,b
  5663   001C84  6E06               	movwf	(labs@a+1)^0,c
  5664   001C86  518C               	movf	(efgtoa@ou+2)& (0+255),w,b
  5665   001C88  599B               	subwfb	(efgtoa@g+2)& (0+255),w,b
  5666   001C8A  6E07               	movwf	(labs@a+2)^0,c
  5667   001C8C  518D               	movf	(efgtoa@ou+3)& (0+255),w,b
  5668   001C8E  599C               	subwfb	(efgtoa@g+3)& (0+255),w,b
  5669   001C90  6E08               	movwf	(labs@a+3)^0,c
  5670   001C92  ECFD  F029         	call	_labs	;wreg free
  5671   001C96  BE08               	btfsc	(?_labs+3)^0,7,c
  5672   001C98  EF59  F00E         	goto	u6341
  5673   001C9C  5008               	movf	(?_labs+3)^0,w,c
  5674   001C9E  1007               	iorwf	(?_labs+2)^0,w,c
  5675   001CA0  1006               	iorwf	(?_labs+1)^0,w,c
  5676   001CA2  E109               	bnz	u6340
  5677   001CA4  0E02               	movlw	2
  5678   001CA6  5C05               	subwf	?_labs^0,w,c
  5679   001CA8  A0D8               	btfss	status,0,c
  5680   001CAA  EF59  F00E         	goto	u6341
  5681   001CAE  EF5B  F00E         	goto	u6340
  5682   001CB2                     u6341:
  5683   001CB2  EF17  F00E         	goto	l1262
  5684   001CB6                     u6340:
  5685   001CB6  C08A  F036         	movff	efgtoa@ou,___flge@ff1
  5686   001CBA  C08B  F037         	movff	efgtoa@ou+1,___flge@ff1+1
  5687   001CBE  C08C  F038         	movff	efgtoa@ou+2,___flge@ff1+2
  5688   001CC2  C08D  F039         	movff	efgtoa@ou+3,___flge@ff1+3
  5689   001CC6  C099  F03A         	movff	efgtoa@g,___flge@ff2
  5690   001CCA  C09A  F03B         	movff	efgtoa@g+1,___flge@ff2+1
  5691   001CCE  C09B  F03C         	movff	efgtoa@g+2,___flge@ff2+2
  5692   001CD2  C09C  F03D         	movff	efgtoa@g+3,___flge@ff2+3
  5693   001CD6  EC73  F024         	call	___flge	;wreg free
  5694   001CDA  A0D8               	btfss	status,0,c
  5695   001CDC  EF72  F00E         	goto	u6351
  5696   001CE0  EF74  F00E         	goto	u6350
  5697   001CE4                     u6351:
  5698   001CE4  EF17  F00E         	goto	l1262
  5699   001CE8                     u6350:
  5700   001CE8                     
  5701                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 583:   if ((labs(
      +                          (g).u-(u).u) <= 1)) {
  5702   001CE8  0100               	movlb	0	; () banked
  5703   001CEA  519F               	movf	efgtoa@u& (0+255),w,b
  5704   001CEC  5D99               	subwf	efgtoa@g& (0+255),w,b
  5705   001CEE  6E05               	movwf	labs@a^0,c
  5706   001CF0  51A0               	movf	(efgtoa@u+1)& (0+255),w,b
  5707   001CF2  599A               	subwfb	(efgtoa@g+1)& (0+255),w,b
  5708   001CF4  6E06               	movwf	(labs@a+1)^0,c
  5709   001CF6  51A1               	movf	(efgtoa@u+2)& (0+255),w,b
  5710   001CF8  599B               	subwfb	(efgtoa@g+2)& (0+255),w,b
  5711   001CFA  6E07               	movwf	(labs@a+2)^0,c
  5712   001CFC  51A2               	movf	(efgtoa@u+3)& (0+255),w,b
  5713   001CFE  599C               	subwfb	(efgtoa@g+3)& (0+255),w,b
  5714   001D00  6E08               	movwf	(labs@a+3)^0,c
  5715   001D02  ECFD  F029         	call	_labs	;wreg free
  5716   001D06  BE08               	btfsc	(?_labs+3)^0,7,c
  5717   001D08  EF93  F00E         	goto	u6360
  5718   001D0C  5008               	movf	(?_labs+3)^0,w,c
  5719   001D0E  1007               	iorwf	(?_labs+2)^0,w,c
  5720   001D10  1006               	iorwf	(?_labs+1)^0,w,c
  5721   001D12  E107               	bnz	u6361
  5722   001D14  0E02               	movlw	2
  5723   001D16  5C05               	subwf	?_labs^0,w,c
  5724   001D18  B0D8               	btfsc	status,0,c
  5725   001D1A  EF91  F00E         	goto	u6361
  5726   001D1E  EF93  F00E         	goto	u6360
  5727   001D22                     u6361:
  5728   001D22  EFDB  F00E         	goto	l5696
  5729   001D26                     u6360:
  5730   001D26                     l5686:
  5731                           
  5732                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 584:    g = u;
  5733   001D26  C09F  F099         	movff	efgtoa@u,efgtoa@g
  5734   001D2A  C0A0  F09A         	movff	efgtoa@u+1,efgtoa@g+1
  5735   001D2E  C0A1  F09B         	movff	efgtoa@u+2,efgtoa@g+2
  5736   001D32  C0A2  F09C         	movff	efgtoa@u+3,efgtoa@g+3
  5737                           
  5738                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 585:   }
  5739   001D36  EFF4  F00E         	goto	l1260
  5740   001D3A                     l5688:
  5741                           
  5742                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 588:     u.f = u.
      +                          f/10.0;
  5743   001D3A  C09F  F036         	movff	efgtoa@u,___fldiv@b
  5744   001D3E  C0A0  F037         	movff	efgtoa@u+1,___fldiv@b+1
  5745   001D42  C0A1  F038         	movff	efgtoa@u+2,___fldiv@b+2
  5746   001D46  C0A2  F039         	movff	efgtoa@u+3,___fldiv@b+3
  5747   001D4A  0E00               	movlw	0
  5748   001D4C  6E3A               	movwf	___fldiv@a^0,c
  5749   001D4E  0E00               	movlw	0
  5750   001D50  6E3B               	movwf	(___fldiv@a+1)^0,c
  5751   001D52  0E20               	movlw	32
  5752   001D54  6E3C               	movwf	(___fldiv@a+2)^0,c
  5753   001D56  0E41               	movlw	65
  5754   001D58  6E3D               	movwf	(___fldiv@a+3)^0,c
  5755   001D5A  EC9D  F016         	call	___fldiv	;wreg free
  5756   001D5E  C036  F09F         	movff	?___fldiv,efgtoa@u
  5757   001D62  C037  F0A0         	movff	?___fldiv+1,efgtoa@u+1
  5758   001D66  C038  F0A1         	movff	?___fldiv+2,efgtoa@u+2
  5759   001D6A  C039  F0A2         	movff	?___fldiv+3,efgtoa@u+3
  5760   001D6E                     
  5761                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 589:     --e;
  5762   001D6E  0100               	movlb	0	; () banked
  5763   001D70  0786               	decf	efgtoa@e& (0+255),f,b
  5764   001D72  A0D8               	btfss	status,0,c
  5765   001D74  0787               	decf	(efgtoa@e+1)& (0+255),f,b
  5766   001D76                     
  5767                           ; BSR set to: 0
  5768                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 590:     if ((lab
      +                          s((g).u-(u).u) <= 1)) {
  5769   001D76  519F               	movf	efgtoa@u& (0+255),w,b
  5770   001D78  5D99               	subwf	efgtoa@g& (0+255),w,b
  5771   001D7A  6E05               	movwf	labs@a^0,c
  5772   001D7C  51A0               	movf	(efgtoa@u+1)& (0+255),w,b
  5773   001D7E  599A               	subwfb	(efgtoa@g+1)& (0+255),w,b
  5774   001D80  6E06               	movwf	(labs@a+1)^0,c
  5775   001D82  51A1               	movf	(efgtoa@u+2)& (0+255),w,b
  5776   001D84  599B               	subwfb	(efgtoa@g+2)& (0+255),w,b
  5777   001D86  6E07               	movwf	(labs@a+2)^0,c
  5778   001D88  51A2               	movf	(efgtoa@u+3)& (0+255),w,b
  5779   001D8A  599C               	subwfb	(efgtoa@g+3)& (0+255),w,b
  5780   001D8C  6E08               	movwf	(labs@a+3)^0,c
  5781   001D8E  ECFD  F029         	call	_labs	;wreg free
  5782   001D92  BE08               	btfsc	(?_labs+3)^0,7,c
  5783   001D94  EFD9  F00E         	goto	u6370
  5784   001D98  5008               	movf	(?_labs+3)^0,w,c
  5785   001D9A  1007               	iorwf	(?_labs+2)^0,w,c
  5786   001D9C  1006               	iorwf	(?_labs+1)^0,w,c
  5787   001D9E  E107               	bnz	u6371
  5788   001DA0  0E02               	movlw	2
  5789   001DA2  5C05               	subwf	?_labs^0,w,c
  5790   001DA4  B0D8               	btfsc	status,0,c
  5791   001DA6  EFD7  F00E         	goto	u6371
  5792   001DAA  EFD9  F00E         	goto	u6370
  5793   001DAE                     u6371:
  5794   001DAE  EFDB  F00E         	goto	l5696
  5795   001DB2                     u6370:
  5796   001DB2  EF93  F00E         	goto	l5686
  5797   001DB6                     l5696:
  5798                           
  5799                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 587:    while (g.
      +                          f < u.f) {
  5800   001DB6  C099  F036         	movff	efgtoa@g,___flge@ff1
  5801   001DBA  C09A  F037         	movff	efgtoa@g+1,___flge@ff1+1
  5802   001DBE  C09B  F038         	movff	efgtoa@g+2,___flge@ff1+2
  5803   001DC2  C09C  F039         	movff	efgtoa@g+3,___flge@ff1+3
  5804   001DC6  C09F  F03A         	movff	efgtoa@u,___flge@ff2
  5805   001DCA  C0A0  F03B         	movff	efgtoa@u+1,___flge@ff2+1
  5806   001DCE  C0A1  F03C         	movff	efgtoa@u+2,___flge@ff2+2
  5807   001DD2  C0A2  F03D         	movff	efgtoa@u+3,___flge@ff2+3
  5808   001DD6  EC73  F024         	call	___flge	;wreg free
  5809   001DDA  A0D8               	btfss	status,0,c
  5810   001DDC  EFF2  F00E         	goto	u6381
  5811   001DE0  EFF4  F00E         	goto	u6380
  5812   001DE4                     u6381:
  5813   001DE4  EF9D  F00E         	goto	l5688
  5814   001DE8                     u6380:
  5815   001DE8                     l1260:
  5816                           
  5817                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 602:  mode = c;
  5818   001DE8  C076  F080         	movff	efgtoa@c,efgtoa@mode
  5819                           
  5820                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 604:     nmode = 
      +                          mode;
  5821   001DEC  C080  F081         	movff	efgtoa@mode,efgtoa@nmode
  5822   001DF0                     
  5823                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 614:  {;C:\Progra
      +                          m Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 615:         p = (prec < 0)
      +                           ? 6 : prec;
  5824   001DF0  0100               	movlb	0	; () banked
  5825   001DF2  BFF5               	btfsc	(_prec+1)& (0+255),7,b
  5826   001DF4  EFFE  F00E         	goto	u6391
  5827   001DF8  EF00  F00F         	goto	u6390
  5828   001DFC                     u6391:
  5829   001DFC  EF06  F00F         	goto	l5702
  5830   001E00                     u6390:
  5831   001E00                     
  5832                           ; BSR set to: 0
  5833   001E00  C0F4  F079         	movff	_prec,efgtoa@p
  5834   001E04  C0F5  F07A         	movff	_prec+1,efgtoa@p+1
  5835   001E08  EF0A  F00F         	goto	l5704
  5836   001E0C                     l5702:
  5837                           
  5838                           ; BSR set to: 0
  5839   001E0C  0E00               	movlw	0
  5840   001E0E  6F7A               	movwf	(efgtoa@p+1)& (0+255),b
  5841   001E10  0E06               	movlw	6
  5842   001E12  6F79               	movwf	efgtoa@p& (0+255),b
  5843   001E14                     l5704:
  5844                           
  5845                           ; BSR set to: 0
  5846                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 616:     };C:\Pro
      +                          gram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 630:     m = p;
  5847   001E14  C079  F084         	movff	efgtoa@p,efgtoa@m
  5848   001E18  C07A  F085         	movff	efgtoa@p+1,efgtoa@m+1
  5849   001E1C                     
  5850                           ; BSR set to: 0
  5851                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 634:  {;C:\Progra
      +                          m Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 635:         ++m;
  5852   001E1C  4B84               	infsnz	efgtoa@m& (0+255),f,b
  5853   001E1E  2B85               	incf	(efgtoa@m+1)& (0+255),f,b
  5854   001E20                     
  5855                           ; BSR set to: 0
  5856                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 636:     };C:\Pro
      +                          gram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 640:     if (nmode == 'f
      +                          ') {
  5857   001E20  0E66               	movlw	102
  5858   001E22  1981               	xorwf	efgtoa@nmode& (0+255),w,b
  5859   001E24  A4D8               	btfss	status,2,c
  5860   001E26  EF17  F00F         	goto	u6401
  5861   001E2A  EF19  F00F         	goto	u6400
  5862   001E2E                     u6401:
  5863   001E2E  EF39  F00F         	goto	l5718
  5864   001E32                     u6400:
  5865   001E32                     
  5866                           ; BSR set to: 0
  5867                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 641:         if (
      +                          e < 0) {
  5868   001E32  BF87               	btfsc	(efgtoa@e+1)& (0+255),7,b
  5869   001E34  EF20  F00F         	goto	u6410
  5870   001E38  EF1E  F00F         	goto	u6411
  5871   001E3C                     u6411:
  5872   001E3C  EF2C  F00F         	goto	l5714
  5873   001E40                     u6410:
  5874   001E40                     
  5875                           ; BSR set to: 0
  5876                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 642:             
      +                          u.f = 1.0;
  5877   001E40  0E00               	movlw	0
  5878   001E42  6F9F               	movwf	efgtoa@u& (0+255),b
  5879   001E44  0E00               	movlw	0
  5880   001E46  6FA0               	movwf	(efgtoa@u+1)& (0+255),b
  5881   001E48  0E80               	movlw	128
  5882   001E4A  6FA1               	movwf	(efgtoa@u+2)& (0+255),b
  5883   001E4C  0E3F               	movlw	63
  5884   001E4E  6FA2               	movwf	(efgtoa@u+3)& (0+255),b
  5885                           
  5886                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 643:             
      +                          e = 0;
  5887   001E50  0E00               	movlw	0
  5888   001E52  6F87               	movwf	(efgtoa@e+1)& (0+255),b
  5889   001E54  0E00               	movlw	0
  5890   001E56  6F86               	movwf	efgtoa@e& (0+255),b
  5891   001E58                     l5714:
  5892                           
  5893                           ; BSR set to: 0
  5894                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 645:         if (
      +                          !(mode == 'g')) {
  5895   001E58  0E67               	movlw	103
  5896   001E5A  1980               	xorwf	efgtoa@mode& (0+255),w,b
  5897   001E5C  B4D8               	btfsc	status,2,c
  5898   001E5E  EF33  F00F         	goto	u6421
  5899   001E62  EF35  F00F         	goto	u6420
  5900   001E66                     u6421:
  5901   001E66  EF39  F00F         	goto	l5718
  5902   001E6A                     u6420:
  5903   001E6A                     
  5904                           ; BSR set to: 0
  5905                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 646:             
      +                          m += e;
  5906   001E6A  5186               	movf	efgtoa@e& (0+255),w,b
  5907   001E6C  2784               	addwf	efgtoa@m& (0+255),f,b
  5908   001E6E  5187               	movf	(efgtoa@e+1)& (0+255),w,b
  5909   001E70  2385               	addwfc	(efgtoa@m+1)& (0+255),f,b
  5910   001E72                     l5718:
  5911                           
  5912                           ; BSR set to: 0
  5913                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 652:     i = 0;
  5914   001E72  0E00               	movlw	0
  5915   001E74  6F8F               	movwf	(efgtoa@i+1)& (0+255),b
  5916   001E76  0E00               	movlw	0
  5917   001E78  6F8E               	movwf	efgtoa@i& (0+255),b
  5918   001E7A                     
  5919                           ; BSR set to: 0
  5920                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 653:     h = g.f;
  5921   001E7A  C099  F090         	movff	efgtoa@g,efgtoa@h
  5922   001E7E  C09A  F091         	movff	efgtoa@g+1,efgtoa@h+1
  5923   001E82  C09B  F092         	movff	efgtoa@g+2,efgtoa@h+2
  5924   001E86  C09C  F093         	movff	efgtoa@g+3,efgtoa@h+3
  5925   001E8A                     
  5926                           ; BSR set to: 0
  5927                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 654:     ou = u;
  5928   001E8A  C09F  F08A         	movff	efgtoa@u,efgtoa@ou
  5929   001E8E  C0A0  F08B         	movff	efgtoa@u+1,efgtoa@ou+1
  5930   001E92  C0A1  F08C         	movff	efgtoa@u+2,efgtoa@ou+2
  5931   001E96  C0A2  F08D         	movff	efgtoa@u+3,efgtoa@ou+3
  5932                           
  5933                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 655:     while (i
      +                           < m) {
  5934   001E9A  EFCA  F00F         	goto	l5732
  5935   001E9E                     l5724:
  5936                           
  5937                           ; BSR set to: 0
  5938                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 656:         l = 
      +                          floorf(h/u.f);
  5939   001E9E  C090  F036         	movff	efgtoa@h,___fldiv@b
  5940   001EA2  C091  F037         	movff	efgtoa@h+1,___fldiv@b+1
  5941   001EA6  C092  F038         	movff	efgtoa@h+2,___fldiv@b+2
  5942   001EAA  C093  F039         	movff	efgtoa@h+3,___fldiv@b+3
  5943   001EAE  C09F  F03A         	movff	efgtoa@u,___fldiv@a
  5944   001EB2  C0A0  F03B         	movff	efgtoa@u+1,___fldiv@a+1
  5945   001EB6  C0A1  F03C         	movff	efgtoa@u+2,___fldiv@a+2
  5946   001EBA  C0A2  F03D         	movff	efgtoa@u+3,___fldiv@a+3
  5947   001EBE  EC9D  F016         	call	___fldiv	;wreg free
  5948   001EC2  C036  F04F         	movff	?___fldiv,floorf@x
  5949   001EC6  C037  F050         	movff	?___fldiv+1,floorf@x+1
  5950   001ECA  C038  F051         	movff	?___fldiv+2,floorf@x+2
  5951   001ECE  C039  F052         	movff	?___fldiv+3,floorf@x+3
  5952   001ED2  ECC5  F01C         	call	_floorf	;wreg free
  5953   001ED6  C04F  F094         	movff	?_floorf,efgtoa@l
  5954   001EDA  C050  F095         	movff	?_floorf+1,efgtoa@l+1
  5955   001EDE  C051  F096         	movff	?_floorf+2,efgtoa@l+2
  5956   001EE2  C052  F097         	movff	?_floorf+3,efgtoa@l+3
  5957                           
  5958                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 657:         d = 
      +                          (int)l;
  5959   001EE6  C094  F005         	movff	efgtoa@l,___fltol@f1
  5960   001EEA  C095  F006         	movff	efgtoa@l+1,___fltol@f1+1
  5961   001EEE  C096  F007         	movff	efgtoa@l+2,___fltol@f1+2
  5962   001EF2  C097  F008         	movff	efgtoa@l+3,___fltol@f1+3
  5963   001EF6  ECF0  F023         	call	___fltol	;wreg free
  5964   001EFA  C005  F082         	movff	?___fltol,efgtoa@d
  5965   001EFE  C006  F083         	movff	?___fltol+1,efgtoa@d+1
  5966   001F02                     
  5967                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 658:         h -=
      +                           l*u.f;
  5968   001F02  C090  F015         	movff	efgtoa@h,___flsub@b
  5969   001F06  C091  F016         	movff	efgtoa@h+1,___flsub@b+1
  5970   001F0A  C092  F017         	movff	efgtoa@h+2,___flsub@b+2
  5971   001F0E  C093  F018         	movff	efgtoa@h+3,___flsub@b+3
  5972   001F12  C094  F021         	movff	efgtoa@l,___flmul@a
  5973   001F16  C095  F022         	movff	efgtoa@l+1,___flmul@a+1
  5974   001F1A  C096  F023         	movff	efgtoa@l+2,___flmul@a+2
  5975   001F1E  C097  F024         	movff	efgtoa@l+3,___flmul@a+3
  5976   001F22  C09F  F01D         	movff	efgtoa@u,___flmul@b
  5977   001F26  C0A0  F01E         	movff	efgtoa@u+1,___flmul@b+1
  5978   001F2A  C0A1  F01F         	movff	efgtoa@u+2,___flmul@b+2
  5979   001F2E  C0A2  F020         	movff	efgtoa@u+3,___flmul@b+3
  5980   001F32  EC88  F014         	call	___flmul	;wreg free
  5981   001F36  C01D  F019         	movff	?___flmul,___flsub@a
  5982   001F3A  C01E  F01A         	movff	?___flmul+1,___flsub@a+1
  5983   001F3E  C01F  F01B         	movff	?___flmul+2,___flsub@a+2
  5984   001F42  C020  F01C         	movff	?___flmul+3,___flsub@a+3
  5985   001F46  ECA6  F02B         	call	___flsub	;wreg free
  5986   001F4A  C015  F090         	movff	?___flsub,efgtoa@h
  5987   001F4E  C016  F091         	movff	?___flsub+1,efgtoa@h+1
  5988   001F52  C017  F092         	movff	?___flsub+2,efgtoa@h+2
  5989   001F56  C018  F093         	movff	?___flsub+3,efgtoa@h+3
  5990   001F5A                     
  5991                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 659:         u.f 
      +                          = u.f/10.0;
  5992   001F5A  C09F  F036         	movff	efgtoa@u,___fldiv@b
  5993   001F5E  C0A0  F037         	movff	efgtoa@u+1,___fldiv@b+1
  5994   001F62  C0A1  F038         	movff	efgtoa@u+2,___fldiv@b+2
  5995   001F66  C0A2  F039         	movff	efgtoa@u+3,___fldiv@b+3
  5996   001F6A  0E00               	movlw	0
  5997   001F6C  6E3A               	movwf	___fldiv@a^0,c
  5998   001F6E  0E00               	movlw	0
  5999   001F70  6E3B               	movwf	(___fldiv@a+1)^0,c
  6000   001F72  0E20               	movlw	32
  6001   001F74  6E3C               	movwf	(___fldiv@a+2)^0,c
  6002   001F76  0E41               	movlw	65
  6003   001F78  6E3D               	movwf	(___fldiv@a+3)^0,c
  6004   001F7A  EC9D  F016         	call	___fldiv	;wreg free
  6005   001F7E  C036  F09F         	movff	?___fldiv,efgtoa@u
  6006   001F82  C037  F0A0         	movff	?___fldiv+1,efgtoa@u+1
  6007   001F86  C038  F0A1         	movff	?___fldiv+2,efgtoa@u+2
  6008   001F8A  C039  F0A2         	movff	?___fldiv+3,efgtoa@u+3
  6009   001F8E                     
  6010                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 660:         ++i;
  6011   001F8E  0100               	movlb	0	; () banked
  6012   001F90  4B8E               	infsnz	efgtoa@i& (0+255),f,b
  6013   001F92  2B8F               	incf	(efgtoa@i+1)& (0+255),f,b
  6014   001F94                     l5732:
  6015                           
  6016                           ; BSR set to: 0
  6017                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 655:     while (i
      +                           < m) {
  6018   001F94  5184               	movf	efgtoa@m& (0+255),w,b
  6019   001F96  5D8E               	subwf	efgtoa@i& (0+255),w,b
  6020   001F98  518F               	movf	(efgtoa@i+1)& (0+255),w,b
  6021   001F9A  0A80               	xorlw	128
  6022   001F9C  6E53               	movwf	??_efgtoa^0,c
  6023   001F9E  5185               	movf	(efgtoa@m+1)& (0+255),w,b
  6024   001FA0  0A80               	xorlw	128
  6025   001FA2  5853               	subwfb	??_efgtoa^0,w,c
  6026   001FA4  A0D8               	btfss	status,0,c
  6027   001FA6  EFD7  F00F         	goto	u6431
  6028   001FAA  EFD9  F00F         	goto	u6430
  6029   001FAE                     u6431:
  6030   001FAE  EF4F  F00F         	goto	l5724
  6031   001FB2                     u6430:
  6032   001FB2                     
  6033                           ; BSR set to: 0
  6034                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 664:     l = u.f*
      +                          5.0;
  6035   001FB2  C09F  F01D         	movff	efgtoa@u,___flmul@b
  6036   001FB6  C0A0  F01E         	movff	efgtoa@u+1,___flmul@b+1
  6037   001FBA  C0A1  F01F         	movff	efgtoa@u+2,___flmul@b+2
  6038   001FBE  C0A2  F020         	movff	efgtoa@u+3,___flmul@b+3
  6039   001FC2  0E00               	movlw	0
  6040   001FC4  6E21               	movwf	___flmul@a^0,c
  6041   001FC6  0E00               	movlw	0
  6042   001FC8  6E22               	movwf	(___flmul@a+1)^0,c
  6043   001FCA  0EA0               	movlw	160
  6044   001FCC  6E23               	movwf	(___flmul@a+2)^0,c
  6045   001FCE  0E40               	movlw	64
  6046   001FD0  6E24               	movwf	(___flmul@a+3)^0,c
  6047   001FD2  EC88  F014         	call	___flmul	;wreg free
  6048   001FD6  C01D  F094         	movff	?___flmul,efgtoa@l
  6049   001FDA  C01E  F095         	movff	?___flmul+1,efgtoa@l+1
  6050   001FDE  C01F  F096         	movff	?___flmul+2,efgtoa@l+2
  6051   001FE2  C020  F097         	movff	?___flmul+3,efgtoa@l+3
  6052   001FE6                     
  6053                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 665:     if (h < 
      +                          l) {
  6054   001FE6  C090  F036         	movff	efgtoa@h,___flge@ff1
  6055   001FEA  C091  F037         	movff	efgtoa@h+1,___flge@ff1+1
  6056   001FEE  C092  F038         	movff	efgtoa@h+2,___flge@ff1+2
  6057   001FF2  C093  F039         	movff	efgtoa@h+3,___flge@ff1+3
  6058   001FF6  C094  F03A         	movff	efgtoa@l,___flge@ff2
  6059   001FFA  C095  F03B         	movff	efgtoa@l+1,___flge@ff2+1
  6060   001FFE  C096  F03C         	movff	efgtoa@l+2,___flge@ff2+2
  6061   002002  C097  F03D         	movff	efgtoa@l+3,___flge@ff2+3
  6062   002006  EC73  F024         	call	___flge	;wreg free
  6063   00200A  B0D8               	btfsc	status,0,c
  6064   00200C  EF0A  F010         	goto	u6441
  6065   002010  EF0C  F010         	goto	u6440
  6066   002014                     u6441:
  6067   002014  EF17  F010         	goto	l5740
  6068   002018                     u6440:
  6069   002018                     
  6070                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 666:         l = 
      +                          0.0;
  6071   002018  0E00               	movlw	0
  6072   00201A  0100               	movlb	0	; () banked
  6073   00201C  6F94               	movwf	efgtoa@l& (0+255),b
  6074   00201E  0E00               	movlw	0
  6075   002020  6F95               	movwf	(efgtoa@l+1)& (0+255),b
  6076   002022  0E00               	movlw	0
  6077   002024  6F96               	movwf	(efgtoa@l+2)& (0+255),b
  6078   002026  0E00               	movlw	0
  6079   002028  6F97               	movwf	(efgtoa@l+3)& (0+255),b
  6080                           
  6081                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 667:     } else {
  6082   00202A  EF40  F010         	goto	l5746
  6083   00202E                     l5740:
  6084                           
  6085                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 669:         if (
      +                          (h == l) && !(d % 2)) {
  6086   00202E  C090  F005         	movff	efgtoa@h,___fleq@ff1
  6087   002032  C091  F006         	movff	efgtoa@h+1,___fleq@ff1+1
  6088   002036  C092  F007         	movff	efgtoa@h+2,___fleq@ff1+2
  6089   00203A  C093  F008         	movff	efgtoa@h+3,___fleq@ff1+3
  6090   00203E  C094  F009         	movff	efgtoa@l,___fleq@ff2
  6091   002042  C095  F00A         	movff	efgtoa@l+1,___fleq@ff2+1
  6092   002046  C096  F00B         	movff	efgtoa@l+2,___fleq@ff2+2
  6093   00204A  C097  F00C         	movff	efgtoa@l+3,___fleq@ff2+3
  6094   00204E  EC53  F028         	call	___fleq	;wreg free
  6095   002052  A0D8               	btfss	status,0,c
  6096   002054  EF2E  F010         	goto	u6451
  6097   002058  EF30  F010         	goto	u6450
  6098   00205C                     u6451:
  6099   00205C  EF40  F010         	goto	l5746
  6100   002060                     u6450:
  6101   002060  0100               	movlb	0	; () banked
  6102   002062  B182               	btfsc	efgtoa@d& (0+255),0,b
  6103   002064  EF36  F010         	goto	u6461
  6104   002068  EF38  F010         	goto	u6460
  6105   00206C                     u6461:
  6106   00206C  EF40  F010         	goto	l5746
  6107   002070                     u6460:
  6108   002070                     
  6109                           ; BSR set to: 0
  6110                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 670:             
      +                          l = 0.0;
  6111   002070  0E00               	movlw	0
  6112   002072  6F94               	movwf	efgtoa@l& (0+255),b
  6113   002074  0E00               	movlw	0
  6114   002076  6F95               	movwf	(efgtoa@l+1)& (0+255),b
  6115   002078  0E00               	movlw	0
  6116   00207A  6F96               	movwf	(efgtoa@l+2)& (0+255),b
  6117   00207C  0E00               	movlw	0
  6118   00207E  6F97               	movwf	(efgtoa@l+3)& (0+255),b
  6119   002080                     l5746:
  6120                           
  6121                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 675:     h = g.f 
      +                          + l;
  6122   002080  C099  F005         	movff	efgtoa@g,___fladd@b
  6123   002084  C09A  F006         	movff	efgtoa@g+1,___fladd@b+1
  6124   002088  C09B  F007         	movff	efgtoa@g+2,___fladd@b+2
  6125   00208C  C09C  F008         	movff	efgtoa@g+3,___fladd@b+3
  6126   002090  C094  F009         	movff	efgtoa@l,___fladd@a
  6127   002094  C095  F00A         	movff	efgtoa@l+1,___fladd@a+1
  6128   002098  C096  F00B         	movff	efgtoa@l+2,___fladd@a+2
  6129   00209C  C097  F00C         	movff	efgtoa@l+3,___fladd@a+3
  6130   0020A0  EC28  F012         	call	___fladd	;wreg free
  6131   0020A4  C005  F090         	movff	?___fladd,efgtoa@h
  6132   0020A8  C006  F091         	movff	?___fladd+1,efgtoa@h+1
  6133   0020AC  C007  F092         	movff	?___fladd+2,efgtoa@h+2
  6134   0020B0  C008  F093         	movff	?___fladd+3,efgtoa@h+3
  6135   0020B4                     
  6136                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 677:  if (h >= (o
      +                          u.f*10.0)) {
  6137   0020B4  C090  F036         	movff	efgtoa@h,___flge@ff1
  6138   0020B8  C091  F037         	movff	efgtoa@h+1,___flge@ff1+1
  6139   0020BC  C092  F038         	movff	efgtoa@h+2,___flge@ff1+2
  6140   0020C0  C093  F039         	movff	efgtoa@h+3,___flge@ff1+3
  6141   0020C4  0E00               	movlw	0
  6142   0020C6  6E21               	movwf	___flmul@a^0,c
  6143   0020C8  0E00               	movlw	0
  6144   0020CA  6E22               	movwf	(___flmul@a+1)^0,c
  6145   0020CC  0E20               	movlw	32
  6146   0020CE  6E23               	movwf	(___flmul@a+2)^0,c
  6147   0020D0  0E41               	movlw	65
  6148   0020D2  6E24               	movwf	(___flmul@a+3)^0,c
  6149   0020D4  C08A  F01D         	movff	efgtoa@ou,___flmul@b
  6150   0020D8  C08B  F01E         	movff	efgtoa@ou+1,___flmul@b+1
  6151   0020DC  C08C  F01F         	movff	efgtoa@ou+2,___flmul@b+2
  6152   0020E0  C08D  F020         	movff	efgtoa@ou+3,___flmul@b+3
  6153   0020E4  EC88  F014         	call	___flmul	;wreg free
  6154   0020E8  C01D  F03A         	movff	?___flmul,___flge@ff2
  6155   0020EC  C01E  F03B         	movff	?___flmul+1,___flge@ff2+1
  6156   0020F0  C01F  F03C         	movff	?___flmul+2,___flge@ff2+2
  6157   0020F4  C020  F03D         	movff	?___flmul+3,___flge@ff2+3
  6158   0020F8  EC73  F024         	call	___flge	;wreg free
  6159   0020FC  A0D8               	btfss	status,0,c
  6160   0020FE  EF83  F010         	goto	u6471
  6161   002102  EF85  F010         	goto	u6470
  6162   002106                     u6471:
  6163   002106  EFAE  F010         	goto	l5758
  6164   00210A                     u6470:
  6165   00210A                     
  6166                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 678:   e++;
  6167   00210A  0100               	movlb	0	; () banked
  6168   00210C  4B86               	infsnz	efgtoa@e& (0+255),f,b
  6169   00210E  2B87               	incf	(efgtoa@e+1)& (0+255),f,b
  6170   002110                     
  6171                           ; BSR set to: 0
  6172                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 679:   ou.f *= 10
      +                          .0;
  6173   002110  C08A  F01D         	movff	efgtoa@ou,___flmul@b
  6174   002114  C08B  F01E         	movff	efgtoa@ou+1,___flmul@b+1
  6175   002118  C08C  F01F         	movff	efgtoa@ou+2,___flmul@b+2
  6176   00211C  C08D  F020         	movff	efgtoa@ou+3,___flmul@b+3
  6177   002120  0E00               	movlw	0
  6178   002122  6E21               	movwf	___flmul@a^0,c
  6179   002124  0E00               	movlw	0
  6180   002126  6E22               	movwf	(___flmul@a+1)^0,c
  6181   002128  0E20               	movlw	32
  6182   00212A  6E23               	movwf	(___flmul@a+2)^0,c
  6183   00212C  0E41               	movlw	65
  6184   00212E  6E24               	movwf	(___flmul@a+3)^0,c
  6185   002130  EC88  F014         	call	___flmul	;wreg free
  6186   002134  C01D  F08A         	movff	?___flmul,efgtoa@ou
  6187   002138  C01E  F08B         	movff	?___flmul+1,efgtoa@ou+1
  6188   00213C  C01F  F08C         	movff	?___flmul+2,efgtoa@ou+2
  6189   002140  C020  F08D         	movff	?___flmul+3,efgtoa@ou+3
  6190   002144                     
  6191                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 681:   if (nmode 
      +                          == 'f') {
  6192   002144  0E66               	movlw	102
  6193   002146  0100               	movlb	0	; () banked
  6194   002148  1981               	xorwf	efgtoa@nmode& (0+255),w,b
  6195   00214A  A4D8               	btfss	status,2,c
  6196   00214C  EFAA  F010         	goto	u6481
  6197   002150  EFAC  F010         	goto	u6480
  6198   002154                     u6481:
  6199   002154  EFAE  F010         	goto	l5758
  6200   002158                     u6480:
  6201   002158                     
  6202                           ; BSR set to: 0
  6203                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 683:    m++;
  6204   002158  4B84               	infsnz	efgtoa@m& (0+255),f,b
  6205   00215A  2B85               	incf	(efgtoa@m+1)& (0+255),f,b
  6206   00215C                     l5758:
  6207                           
  6208                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 689:     u = ou;
  6209   00215C  C08A  F09F         	movff	efgtoa@ou,efgtoa@u
  6210   002160  C08B  F0A0         	movff	efgtoa@ou+1,efgtoa@u+1
  6211   002164  C08C  F0A1         	movff	efgtoa@ou+2,efgtoa@u+2
  6212   002168  C08D  F0A2         	movff	efgtoa@ou+3,efgtoa@u+3
  6213   00216C                     
  6214                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 693:  ne = e;
  6215   00216C  C086  F077         	movff	efgtoa@e,efgtoa@ne
  6216   002170  C087  F078         	movff	efgtoa@e+1,efgtoa@ne+1
  6217   002174                     
  6218                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 695:     pp = 0;
  6219   002174  0E00               	movlw	0
  6220   002176  0100               	movlb	0	; () banked
  6221   002178  6F7F               	movwf	efgtoa@pp& (0+255),b
  6222   00217A                     
  6223                           ; BSR set to: 0
  6224                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 696:     t = 0;
  6225   00217A  0E00               	movlw	0
  6226   00217C  6F7C               	movwf	(efgtoa@t+1)& (0+255),b
  6227   00217E  0E00               	movlw	0
  6228   002180  6F7B               	movwf	efgtoa@t& (0+255),b
  6229   002182                     
  6230                           ; BSR set to: 0
  6231                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 697:     i = 0;
  6232   002182  0E00               	movlw	0
  6233   002184  6F8F               	movwf	(efgtoa@i+1)& (0+255),b
  6234   002186  0E00               	movlw	0
  6235   002188  6F8E               	movwf	efgtoa@i& (0+255),b
  6236                           
  6237                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 698:     while ((
      +                          i < m) && (n < (80 - 5))) {
  6238   00218A  EFAC  F011         	goto	l5808
  6239   00218E                     l5768:
  6240                           
  6241                           ; BSR set to: 0
  6242                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 699:         l = 
      +                          floorf(h/u.f);
  6243   00218E  C090  F036         	movff	efgtoa@h,___fldiv@b
  6244   002192  C091  F037         	movff	efgtoa@h+1,___fldiv@b+1
  6245   002196  C092  F038         	movff	efgtoa@h+2,___fldiv@b+2
  6246   00219A  C093  F039         	movff	efgtoa@h+3,___fldiv@b+3
  6247   00219E  C09F  F03A         	movff	efgtoa@u,___fldiv@a
  6248   0021A2  C0A0  F03B         	movff	efgtoa@u+1,___fldiv@a+1
  6249   0021A6  C0A1  F03C         	movff	efgtoa@u+2,___fldiv@a+2
  6250   0021AA  C0A2  F03D         	movff	efgtoa@u+3,___fldiv@a+3
  6251   0021AE  EC9D  F016         	call	___fldiv	;wreg free
  6252   0021B2  C036  F04F         	movff	?___fldiv,floorf@x
  6253   0021B6  C037  F050         	movff	?___fldiv+1,floorf@x+1
  6254   0021BA  C038  F051         	movff	?___fldiv+2,floorf@x+2
  6255   0021BE  C039  F052         	movff	?___fldiv+3,floorf@x+3
  6256   0021C2  ECC5  F01C         	call	_floorf	;wreg free
  6257   0021C6  C04F  F094         	movff	?_floorf,efgtoa@l
  6258   0021CA  C050  F095         	movff	?_floorf+1,efgtoa@l+1
  6259   0021CE  C051  F096         	movff	?_floorf+2,efgtoa@l+2
  6260   0021D2  C052  F097         	movff	?_floorf+3,efgtoa@l+3
  6261                           
  6262                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 700:         d = 
      +                          (int)l > 9 ? 9 : (int)l;
  6263   0021D6  C094  F005         	movff	efgtoa@l,___fltol@f1
  6264   0021DA  C095  F006         	movff	efgtoa@l+1,___fltol@f1+1
  6265   0021DE  C096  F007         	movff	efgtoa@l+2,___fltol@f1+2
  6266   0021E2  C097  F008         	movff	efgtoa@l+3,___fltol@f1+3
  6267   0021E6  ECF0  F023         	call	___fltol	;wreg free
  6268   0021EA  BE06               	btfsc	(?___fltol+1)^0,7,c
  6269   0021EC  EF03  F011         	goto	u6490
  6270   0021F0  5006               	movf	(?___fltol+1)^0,w,c
  6271   0021F2  E107               	bnz	u6491
  6272   0021F4  0E0A               	movlw	10
  6273   0021F6  5C05               	subwf	?___fltol^0,w,c
  6274   0021F8  B0D8               	btfsc	status,0,c
  6275   0021FA  EF01  F011         	goto	u6491
  6276   0021FE  EF03  F011         	goto	u6490
  6277   002202                     u6491:
  6278   002202  EF13  F011         	goto	l5772
  6279   002206                     u6490:
  6280   002206  C094  F005         	movff	efgtoa@l,___fltol@f1
  6281   00220A  C095  F006         	movff	efgtoa@l+1,___fltol@f1+1
  6282   00220E  C096  F007         	movff	efgtoa@l+2,___fltol@f1+2
  6283   002212  C097  F008         	movff	efgtoa@l+3,___fltol@f1+3
  6284   002216  ECF0  F023         	call	___fltol	;wreg free
  6285   00221A  C005  F082         	movff	?___fltol,efgtoa@d
  6286   00221E  C006  F083         	movff	?___fltol+1,efgtoa@d+1
  6287   002222  EF18  F011         	goto	l1290
  6288   002226                     l5772:
  6289   002226  0E00               	movlw	0
  6290   002228  0100               	movlb	0	; () banked
  6291   00222A  6F83               	movwf	(efgtoa@d+1)& (0+255),b
  6292   00222C  0E09               	movlw	9
  6293   00222E  6F82               	movwf	efgtoa@d& (0+255),b
  6294   002230                     l1290:
  6295                           
  6296                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 711:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 712:             if (!pp &
      +                          & (ne < 0)) {
  6297   002230  0100               	movlb	0	; () banked
  6298   002232  517F               	movf	efgtoa@pp& (0+255),w,b
  6299   002234  A4D8               	btfss	status,2,c
  6300   002236  EF1F  F011         	goto	u6501
  6301   00223A  EF21  F011         	goto	u6500
  6302   00223E                     u6501:
  6303   00223E  EF49  F011         	goto	l5792
  6304   002242                     u6500:
  6305   002242                     
  6306                           ; BSR set to: 0
  6307   002242  BF78               	btfsc	(efgtoa@ne+1)& (0+255),7,b
  6308   002244  EF28  F011         	goto	u6510
  6309   002248  EF26  F011         	goto	u6511
  6310   00224C                     u6511:
  6311   00224C  EF49  F011         	goto	l5792
  6312   002250                     u6510:
  6313   002250                     
  6314                           ; BSR set to: 0
  6315                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 713:             
      +                              dbuf[n++] = '.';
  6316   002250  0E81               	movlw	low _dbuf
  6317   002252  259D               	addwf	efgtoa@n& (0+255),w,b
  6318   002254  6ED9               	movwf	fsr2l,c
  6319   002256  0E01               	movlw	high _dbuf
  6320   002258  219E               	addwfc	(efgtoa@n+1)& (0+255),w,b
  6321   00225A  6EDA               	movwf	fsr2h,c
  6322   00225C  0E2E               	movlw	46
  6323   00225E  6EDF               	movwf	indf2,c
  6324   002260                     
  6325                           ; BSR set to: 0
  6326   002260  4B9D               	infsnz	efgtoa@n& (0+255),f,b
  6327   002262  2B9E               	incf	(efgtoa@n+1)& (0+255),f,b
  6328   002264                     
  6329                           ; BSR set to: 0
  6330                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 714:             
      +                              --w;
  6331   002264  0788               	decf	efgtoa@w& (0+255),f,b
  6332   002266  A0D8               	btfss	status,0,c
  6333   002268  0789               	decf	(efgtoa@w+1)& (0+255),f,b
  6334   00226A                     
  6335                           ; BSR set to: 0
  6336                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 715:             
      +                              pp = 1;
  6337   00226A  0E01               	movlw	1
  6338   00226C  6F7F               	movwf	efgtoa@pp& (0+255),b
  6339   00226E  EF49  F011         	goto	l5792
  6340   002272                     l5784:
  6341                           
  6342                           ; BSR set to: 0
  6343                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 718:             
      +                              dbuf[n++] = '0';
  6344   002272  0E81               	movlw	low _dbuf
  6345   002274  259D               	addwf	efgtoa@n& (0+255),w,b
  6346   002276  6ED9               	movwf	fsr2l,c
  6347   002278  0E01               	movlw	high _dbuf
  6348   00227A  219E               	addwfc	(efgtoa@n+1)& (0+255),w,b
  6349   00227C  6EDA               	movwf	fsr2h,c
  6350   00227E  0E30               	movlw	48
  6351   002280  6EDF               	movwf	indf2,c
  6352   002282                     
  6353                           ; BSR set to: 0
  6354   002282  4B9D               	infsnz	efgtoa@n& (0+255),f,b
  6355   002284  2B9E               	incf	(efgtoa@n+1)& (0+255),f,b
  6356   002286                     
  6357                           ; BSR set to: 0
  6358                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 719:             
      +                              --w;
  6359   002286  0788               	decf	efgtoa@w& (0+255),f,b
  6360   002288  A0D8               	btfss	status,0,c
  6361   00228A  0789               	decf	(efgtoa@w+1)& (0+255),f,b
  6362   00228C                     
  6363                           ; BSR set to: 0
  6364                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 720:             
      +                              --t;
  6365   00228C  077B               	decf	efgtoa@t& (0+255),f,b
  6366   00228E  A0D8               	btfss	status,0,c
  6367   002290  077C               	decf	(efgtoa@t+1)& (0+255),f,b
  6368   002292                     l5792:
  6369                           
  6370                           ; BSR set to: 0
  6371                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 717:             
      +                          while (t) {
  6372   002292  517B               	movf	efgtoa@t& (0+255),w,b
  6373   002294  117C               	iorwf	(efgtoa@t+1)& (0+255),w,b
  6374   002296  A4D8               	btfss	status,2,c
  6375   002298  EF50  F011         	goto	u6521
  6376   00229C  EF52  F011         	goto	u6520
  6377   0022A0                     u6521:
  6378   0022A0  EF39  F011         	goto	l5784
  6379   0022A4                     u6520:
  6380   0022A4                     
  6381                           ; BSR set to: 0
  6382                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 722:             
      +                          dbuf[n++] = (char)((int)'0' + d);
  6383   0022A4  0E81               	movlw	low _dbuf
  6384   0022A6  259D               	addwf	efgtoa@n& (0+255),w,b
  6385   0022A8  6ED9               	movwf	fsr2l,c
  6386   0022AA  0E01               	movlw	high _dbuf
  6387   0022AC  219E               	addwfc	(efgtoa@n+1)& (0+255),w,b
  6388   0022AE  6EDA               	movwf	fsr2h,c
  6389   0022B0  5182               	movf	efgtoa@d& (0+255),w,b
  6390   0022B2  0F30               	addlw	48
  6391   0022B4  6EDF               	movwf	indf2,c
  6392   0022B6                     
  6393                           ; BSR set to: 0
  6394   0022B6  4B9D               	infsnz	efgtoa@n& (0+255),f,b
  6395   0022B8  2B9E               	incf	(efgtoa@n+1)& (0+255),f,b
  6396   0022BA                     
  6397                           ; BSR set to: 0
  6398                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 723:             
      +                          --w;
  6399   0022BA  0788               	decf	efgtoa@w& (0+255),f,b
  6400   0022BC  A0D8               	btfss	status,0,c
  6401   0022BE  0789               	decf	(efgtoa@w+1)& (0+255),f,b
  6402   0022C0                     
  6403                           ; BSR set to: 0
  6404                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 724:         };C:
      +                          \Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 725:         h -= l*
      +                          u.f;
  6405   0022C0  C090  F015         	movff	efgtoa@h,___flsub@b
  6406   0022C4  C091  F016         	movff	efgtoa@h+1,___flsub@b+1
  6407   0022C8  C092  F017         	movff	efgtoa@h+2,___flsub@b+2
  6408   0022CC  C093  F018         	movff	efgtoa@h+3,___flsub@b+3
  6409   0022D0  C094  F021         	movff	efgtoa@l,___flmul@a
  6410   0022D4  C095  F022         	movff	efgtoa@l+1,___flmul@a+1
  6411   0022D8  C096  F023         	movff	efgtoa@l+2,___flmul@a+2
  6412   0022DC  C097  F024         	movff	efgtoa@l+3,___flmul@a+3
  6413   0022E0  C09F  F01D         	movff	efgtoa@u,___flmul@b
  6414   0022E4  C0A0  F01E         	movff	efgtoa@u+1,___flmul@b+1
  6415   0022E8  C0A1  F01F         	movff	efgtoa@u+2,___flmul@b+2
  6416   0022EC  C0A2  F020         	movff	efgtoa@u+3,___flmul@b+3
  6417   0022F0  EC88  F014         	call	___flmul	;wreg free
  6418   0022F4  C01D  F019         	movff	?___flmul,___flsub@a
  6419   0022F8  C01E  F01A         	movff	?___flmul+1,___flsub@a+1
  6420   0022FC  C01F  F01B         	movff	?___flmul+2,___flsub@a+2
  6421   002300  C020  F01C         	movff	?___flmul+3,___flsub@a+3
  6422   002304  ECA6  F02B         	call	___flsub	;wreg free
  6423   002308  C015  F090         	movff	?___flsub,efgtoa@h
  6424   00230C  C016  F091         	movff	?___flsub+1,efgtoa@h+1
  6425   002310  C017  F092         	movff	?___flsub+2,efgtoa@h+2
  6426   002314  C018  F093         	movff	?___flsub+3,efgtoa@h+3
  6427   002318                     
  6428                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 726:         u.f 
      +                          = u.f/10.0;
  6429   002318  C09F  F036         	movff	efgtoa@u,___fldiv@b
  6430   00231C  C0A0  F037         	movff	efgtoa@u+1,___fldiv@b+1
  6431   002320  C0A1  F038         	movff	efgtoa@u+2,___fldiv@b+2
  6432   002324  C0A2  F039         	movff	efgtoa@u+3,___fldiv@b+3
  6433   002328  0E00               	movlw	0
  6434   00232A  6E3A               	movwf	___fldiv@a^0,c
  6435   00232C  0E00               	movlw	0
  6436   00232E  6E3B               	movwf	(___fldiv@a+1)^0,c
  6437   002330  0E20               	movlw	32
  6438   002332  6E3C               	movwf	(___fldiv@a+2)^0,c
  6439   002334  0E41               	movlw	65
  6440   002336  6E3D               	movwf	(___fldiv@a+3)^0,c
  6441   002338  EC9D  F016         	call	___fldiv	;wreg free
  6442   00233C  C036  F09F         	movff	?___fldiv,efgtoa@u
  6443   002340  C037  F0A0         	movff	?___fldiv+1,efgtoa@u+1
  6444   002344  C038  F0A1         	movff	?___fldiv+2,efgtoa@u+2
  6445   002348  C039  F0A2         	movff	?___fldiv+3,efgtoa@u+3
  6446   00234C                     
  6447                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 727:         --ne
      +                          ;
  6448   00234C  0100               	movlb	0	; () banked
  6449   00234E  0777               	decf	efgtoa@ne& (0+255),f,b
  6450   002350  A0D8               	btfss	status,0,c
  6451   002352  0778               	decf	(efgtoa@ne+1)& (0+255),f,b
  6452   002354                     
  6453                           ; BSR set to: 0
  6454                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 728:         ++i;
  6455   002354  4B8E               	infsnz	efgtoa@i& (0+255),f,b
  6456   002356  2B8F               	incf	(efgtoa@i+1)& (0+255),f,b
  6457   002358                     l5808:
  6458                           
  6459                           ; BSR set to: 0
  6460                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 698:     while ((
      +                          i < m) && (n < (80 - 5))) {
  6461   002358  5184               	movf	efgtoa@m& (0+255),w,b
  6462   00235A  5D8E               	subwf	efgtoa@i& (0+255),w,b
  6463   00235C  518F               	movf	(efgtoa@i+1)& (0+255),w,b
  6464   00235E  0A80               	xorlw	128
  6465   002360  6E53               	movwf	??_efgtoa^0,c
  6466   002362  5185               	movf	(efgtoa@m+1)& (0+255),w,b
  6467   002364  0A80               	xorlw	128
  6468   002366  5853               	subwfb	??_efgtoa^0,w,c
  6469   002368  B0D8               	btfsc	status,0,c
  6470   00236A  EFB9  F011         	goto	u6531
  6471   00236E  EFBB  F011         	goto	u6530
  6472   002372                     u6531:
  6473   002372  EFC9  F011         	goto	l5812
  6474   002376                     u6530:
  6475   002376                     
  6476                           ; BSR set to: 0
  6477   002376  BF9E               	btfsc	(efgtoa@n+1)& (0+255),7,b
  6478   002378  EFC7  F011         	goto	u6541
  6479   00237C  519E               	movf	(efgtoa@n+1)& (0+255),w,b
  6480   00237E  E109               	bnz	u6540
  6481   002380  0E4B               	movlw	75
  6482   002382  5D9D               	subwf	efgtoa@n& (0+255),w,b
  6483   002384  A0D8               	btfss	status,0,c
  6484   002386  EFC7  F011         	goto	u6541
  6485   00238A  EFC9  F011         	goto	u6540
  6486   00238E                     u6541:
  6487   00238E  EFC7  F010         	goto	l5768
  6488   002392                     u6540:
  6489   002392                     l5812:
  6490                           
  6491                           ; BSR set to: 0
  6492                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 735:  i = sizeof(
      +                          dbuf) - 1;
  6493   002392  0E00               	movlw	0
  6494   002394  6F8F               	movwf	(efgtoa@i+1)& (0+255),b
  6495   002396  0E4F               	movlw	79
  6496   002398  6F8E               	movwf	efgtoa@i& (0+255),b
  6497   00239A                     
  6498                           ; BSR set to: 0
  6499                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 736:     dbuf[i] 
      +                          = '\0';
  6500   00239A  0E81               	movlw	low _dbuf
  6501   00239C  258E               	addwf	efgtoa@i& (0+255),w,b
  6502   00239E  6ED9               	movwf	fsr2l,c
  6503   0023A0  0E01               	movlw	high _dbuf
  6504   0023A2  218F               	addwfc	(efgtoa@i+1)& (0+255),w,b
  6505   0023A4  6EDA               	movwf	fsr2h,c
  6506   0023A6  0E00               	movlw	0
  6507   0023A8  6EDF               	movwf	indf2,c
  6508   0023AA                     
  6509                           ; BSR set to: 0
  6510                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 767:  memcpy(&dbu
      +                          f[i-n], &dbuf[0], (size_t)n);
  6511   0023AA  0E81               	movlw	low _dbuf
  6512   0023AC  6E53               	movwf	??_efgtoa^0,c
  6513   0023AE  0E01               	movlw	high _dbuf
  6514   0023B0  6E54               	movwf	(??_efgtoa+1)^0,c
  6515   0023B2  519D               	movf	efgtoa@n& (0+255),w,b
  6516   0023B4  5E53               	subwf	??_efgtoa^0,f,c
  6517   0023B6  519E               	movf	(efgtoa@n+1)& (0+255),w,b
  6518   0023B8  5A54               	subwfb	(??_efgtoa+1)^0,f,c
  6519   0023BA  518E               	movf	efgtoa@i& (0+255),w,b
  6520   0023BC  2453               	addwf	??_efgtoa^0,w,c
  6521   0023BE  6E05               	movwf	memcpy@d1^0,c
  6522   0023C0  518F               	movf	(efgtoa@i+1)& (0+255),w,b
  6523   0023C2  2054               	addwfc	(??_efgtoa+1)^0,w,c
  6524   0023C4  6E06               	movwf	(memcpy@d1+1)^0,c
  6525   0023C6  0E81               	movlw	low _dbuf
  6526   0023C8  6E07               	movwf	memcpy@s1^0,c
  6527   0023CA  0E01               	movlw	high _dbuf
  6528   0023CC  6E08               	movwf	(memcpy@s1+1)^0,c
  6529   0023CE  C09D  F009         	movff	efgtoa@n,memcpy@n
  6530   0023D2  C09E  F00A         	movff	efgtoa@n+1,memcpy@n+1
  6531   0023D6  ECDE  F02A         	call	_memcpy	;wreg free
  6532   0023DA                     
  6533                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 768:  n = i-n;
  6534   0023DA  0100               	movlb	0	; () banked
  6535   0023DC  519D               	movf	efgtoa@n& (0+255),w,b
  6536   0023DE  5D8E               	subwf	efgtoa@i& (0+255),w,b
  6537   0023E0  6F9D               	movwf	efgtoa@n& (0+255),b
  6538   0023E2  519E               	movf	(efgtoa@n+1)& (0+255),w,b
  6539   0023E4  598F               	subwfb	(efgtoa@i+1)& (0+255),w,b
  6540   0023E6  6F9E               	movwf	(efgtoa@n+1)& (0+255),b
  6541   0023E8                     
  6542                           ; BSR set to: 0
  6543                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 769:  i = sign ==
      +                           0 ? 0 : 1;
  6544   0023E8  5198               	movf	efgtoa@sign& (0+255),w,b
  6545   0023EA  A4D8               	btfss	status,2,c
  6546   0023EC  EFFA  F011         	goto	u6551
  6547   0023F0  EFFD  F011         	goto	u6550
  6548   0023F4                     u6551:
  6549   0023F4  0E01               	movlw	1
  6550   0023F6  EFFE  F011         	goto	u6560
  6551   0023FA                     u6550:
  6552   0023FA  0E00               	movlw	0
  6553   0023FC                     u6560:
  6554   0023FC  6F8E               	movwf	efgtoa@i& (0+255),b
  6555   0023FE  6B8F               	clrf	(efgtoa@i+1)& (0+255),b
  6556   002400                     
  6557                           ; BSR set to: 0
  6558                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 780:  if (sign) {
  6559   002400  5198               	movf	efgtoa@sign& (0+255),w,b
  6560   002402  B4D8               	btfsc	status,2,c
  6561   002404  EF06  F012         	goto	u6571
  6562   002408  EF08  F012         	goto	u6570
  6563   00240C                     u6571:
  6564   00240C  EF13  F012         	goto	l5826
  6565   002410                     u6570:
  6566   002410                     
  6567                           ; BSR set to: 0
  6568                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 781:   dbuf[--n] 
      +                          = sign;
  6569   002410  079D               	decf	efgtoa@n& (0+255),f,b
  6570   002412  A0D8               	btfss	status,0,c
  6571   002414  079E               	decf	(efgtoa@n+1)& (0+255),f,b
  6572   002416  0E81               	movlw	low _dbuf
  6573   002418  259D               	addwf	efgtoa@n& (0+255),w,b
  6574   00241A  6ED9               	movwf	fsr2l,c
  6575   00241C  0E01               	movlw	high _dbuf
  6576   00241E  219E               	addwfc	(efgtoa@n+1)& (0+255),w,b
  6577   002420  6EDA               	movwf	fsr2h,c
  6578   002422  C098  FFDF         	movff	efgtoa@sign,indf2
  6579   002426                     l5826:
  6580                           
  6581                           ; BSR set to: 0
  6582                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 783:  w -= i;
  6583   002426  518E               	movf	efgtoa@i& (0+255),w,b
  6584   002428  5F88               	subwf	efgtoa@w& (0+255),f,b
  6585   00242A  518F               	movf	(efgtoa@i+1)& (0+255),w,b
  6586   00242C  5B89               	subwfb	(efgtoa@w+1)& (0+255),f,b
  6587   00242E                     
  6588                           ; BSR set to: 0
  6589                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 786:     return (
      +                          void) pad(fp, &dbuf[n], w);
  6590   00242E  C070  F015         	movff	efgtoa@fp,pad@fp
  6591   002432  C071  F016         	movff	efgtoa@fp+1,pad@fp+1
  6592   002436  0E81               	movlw	low _dbuf
  6593   002438  259D               	addwf	efgtoa@n& (0+255),w,b
  6594   00243A  6E17               	movwf	pad@buf^0,c
  6595   00243C  0E01               	movlw	high _dbuf
  6596   00243E  219E               	addwfc	(efgtoa@n+1)& (0+255),w,b
  6597   002440  6E18               	movwf	(pad@buf+1)^0,c
  6598   002442  C088  F019         	movff	efgtoa@w,pad@p
  6599   002446  C089  F01A         	movff	efgtoa@w+1,pad@p+1
  6600   00244A  EC86  F029         	call	_pad	;wreg free
  6601   00244E                     l1257:
  6602   00244E  0012               	return		;funcret
  6603   002450                     __end_of_efgtoa:
  6604                           	callstack 0
  6605                           
  6606 ;; *************** function _strcpy *****************
  6607 ;; Defined at:
  6608 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\strcpy.c"
  6609 ;; Parameters:    Size  Location     Type
  6610 ;;  dest            2    4[COMRAM] PTR unsigned char 
  6611 ;;		 -> dbuf(80), 
  6612 ;;  src             2    6[COMRAM] PTR const unsigned char 
  6613 ;;		 -> STR_6(4), STR_3(4), 
  6614 ;; Auto vars:     Size  Location     Type
  6615 ;;  d               2   10[COMRAM] PTR unsigned char 
  6616 ;;		 -> dbuf(80), 
  6617 ;;  s               2    8[COMRAM] PTR const unsigned char 
  6618 ;;		 -> STR_6(4), STR_3(4), 
  6619 ;; Return value:  Size  Location     Type
  6620 ;;                  2    4[COMRAM] PTR unsigned char 
  6621 ;; Registers used:
  6622 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  6623 ;; Tracked objects:
  6624 ;;		On entry : 0/0
  6625 ;;		On exit  : 0/0
  6626 ;;		Unchanged: 0/0
  6627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6628 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6629 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6631 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6632 ;;Total ram usage:        8 bytes
  6633 ;; Hardware stack levels used: 1
  6634 ;; Hardware stack levels required when called: 2
  6635 ;; This function calls:
  6636 ;;		Nothing
  6637 ;; This function is called by:
  6638 ;;		_efgtoa
  6639 ;; This function uses a non-reentrant model
  6640 ;;
  6641                           
  6642                           	psect	text17
  6643   005792                     __ptext17:
  6644                           	callstack 0
  6645   005792                     _strcpy:
  6646                           	callstack 23
  6647   005792  C007  F009         	movff	strcpy@src,strcpy@s
  6648   005796  C008  F00A         	movff	strcpy@src+1,strcpy@s+1
  6649   00579A  C005  F00B         	movff	strcpy@dest,strcpy@d
  6650   00579E  C006  F00C         	movff	strcpy@dest+1,strcpy@d+1
  6651   0057A2                     l4248:
  6652   0057A2  C009  FFF6         	movff	strcpy@s,tblptrl
  6653   0057A6  C00A  FFF7         	movff	strcpy@s+1,tblptrh
  6654   0057AA  4A09               	infsnz	strcpy@s^0,f,c
  6655   0057AC  2A0A               	incf	(strcpy@s+1)^0,f,c
  6656   0057AE                     	if	0	;tblptru may be non-zero
  6657   0057AE                     	endif
  6658   0057AE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  6659   0057AE  0E00               	movlw	low (__mediumconst shr (0+16))
  6660   0057B0  6EF8               	movwf	tblptru,c
  6661   0057B2                     	endif
  6662   0057B2  C00B  FFD9         	movff	strcpy@d,fsr2l
  6663   0057B6  C00C  FFDA         	movff	strcpy@d+1,fsr2h
  6664   0057BA  4A0B               	infsnz	strcpy@d^0,f,c
  6665   0057BC  2A0C               	incf	(strcpy@d+1)^0,f,c
  6666   0057BE  0008               	tblrd		*
  6667   0057C0  CFF5 FFDF          	movff	tablat,indf2
  6668   0057C4  50DF               	movf	indf2,w,c
  6669   0057C6  A4D8               	btfss	status,2,c
  6670   0057C8  EFE8  F02B         	goto	u4391
  6671   0057CC  EFEA  F02B         	goto	u4390
  6672   0057D0                     u4391:
  6673   0057D0  EFD1  F02B         	goto	l4248
  6674   0057D4                     u4390:
  6675   0057D4  0012               	return		;funcret
  6676   0057D6                     __end_of_strcpy:
  6677                           	callstack 0
  6678                           
  6679 ;; *************** function _memcpy *****************
  6680 ;; Defined at:
  6681 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\memcpy.c"
  6682 ;; Parameters:    Size  Location     Type
  6683 ;;  d1              2    4[COMRAM] PTR void 
  6684 ;;		 -> dbuf(80), 
  6685 ;;  s1              2    6[COMRAM] PTR const void 
  6686 ;;		 -> dbuf(80), 
  6687 ;;  n               2    8[COMRAM] unsigned int 
  6688 ;; Auto vars:     Size  Location     Type
  6689 ;;  s               2   12[COMRAM] PTR const unsigned char 
  6690 ;;		 -> dbuf(80), 
  6691 ;;  d               2   10[COMRAM] PTR unsigned char 
  6692 ;;		 -> dbuf(80), 
  6693 ;;  tmp             1   14[COMRAM] unsigned char 
  6694 ;; Return value:  Size  Location     Type
  6695 ;;                  2    4[COMRAM] PTR void 
  6696 ;; Registers used:
  6697 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6698 ;; Tracked objects:
  6699 ;;		On entry : 0/0
  6700 ;;		On exit  : 0/0
  6701 ;;		Unchanged: 0/0
  6702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6703 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6704 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6706 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6707 ;;Total ram usage:       11 bytes
  6708 ;; Hardware stack levels used: 1
  6709 ;; Hardware stack levels required when called: 2
  6710 ;; This function calls:
  6711 ;;		Nothing
  6712 ;; This function is called by:
  6713 ;;		_efgtoa
  6714 ;; This function uses a non-reentrant model
  6715 ;;
  6716                           
  6717                           	psect	text18
  6718   0055BC                     __ptext18:
  6719                           	callstack 0
  6720   0055BC                     _memcpy:
  6721                           	callstack 23
  6722   0055BC  C007  F00D         	movff	memcpy@s1,memcpy@s
  6723   0055C0  C008  F00E         	movff	memcpy@s1+1,memcpy@s+1
  6724   0055C4  C005  F00B         	movff	memcpy@d1,memcpy@d
  6725   0055C8  C006  F00C         	movff	memcpy@d1+1,memcpy@d+1
  6726   0055CC  EFF8  F02A         	goto	l4292
  6727   0055D0                     l4284:
  6728   0055D0  C00D  FFD9         	movff	memcpy@s,fsr2l
  6729   0055D4  C00E  FFDA         	movff	memcpy@s+1,fsr2h
  6730   0055D8  50DF               	movf	indf2,w,c
  6731   0055DA  6E0F               	movwf	memcpy@tmp^0,c
  6732   0055DC  4A0D               	infsnz	memcpy@s^0,f,c
  6733   0055DE  2A0E               	incf	(memcpy@s+1)^0,f,c
  6734   0055E0  C00B  FFD9         	movff	memcpy@d,fsr2l
  6735   0055E4  C00C  FFDA         	movff	memcpy@d+1,fsr2h
  6736   0055E8  C00F  FFDF         	movff	memcpy@tmp,indf2
  6737   0055EC  4A0B               	infsnz	memcpy@d^0,f,c
  6738   0055EE  2A0C               	incf	(memcpy@d+1)^0,f,c
  6739   0055F0                     l4292:
  6740   0055F0  0609               	decf	memcpy@n^0,f,c
  6741   0055F2  A0D8               	btfss	status,0,c
  6742   0055F4  060A               	decf	(memcpy@n+1)^0,f,c
  6743   0055F6  2809               	incf	memcpy@n^0,w,c
  6744   0055F8  E106               	bnz	u4511
  6745   0055FA  280A               	incf	(memcpy@n+1)^0,w,c
  6746   0055FC  A4D8               	btfss	status,2,c
  6747   0055FE  EF03  F02B         	goto	u4511
  6748   005602  EF05  F02B         	goto	u4510
  6749   005606                     u4511:
  6750   005606  EFE8  F02A         	goto	l4284
  6751   00560A                     u4510:
  6752   00560A  0012               	return		;funcret
  6753   00560C                     __end_of_memcpy:
  6754                           	callstack 0
  6755                           
  6756 ;; *************** function _labs *****************
  6757 ;; Defined at:
  6758 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\labs.c"
  6759 ;; Parameters:    Size  Location     Type
  6760 ;;  a               4    4[COMRAM] long 
  6761 ;; Auto vars:     Size  Location     Type
  6762 ;;		None
  6763 ;; Return value:  Size  Location     Type
  6764 ;;                  4    4[COMRAM] long 
  6765 ;; Registers used:
  6766 ;;		wreg, status,2, status,0
  6767 ;; Tracked objects:
  6768 ;;		On entry : 0/0
  6769 ;;		On exit  : 0/0
  6770 ;;		Unchanged: 0/0
  6771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6772 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6774 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6775 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6776 ;;Total ram usage:        8 bytes
  6777 ;; Hardware stack levels used: 1
  6778 ;; Hardware stack levels required when called: 2
  6779 ;; This function calls:
  6780 ;;		Nothing
  6781 ;; This function is called by:
  6782 ;;		_efgtoa
  6783 ;; This function uses a non-reentrant model
  6784 ;;
  6785                           
  6786                           	psect	text19
  6787   0053FA                     __ptext19:
  6788                           	callstack 0
  6789   0053FA                     _labs:
  6790                           	callstack 23
  6791   0053FA  BE08               	btfsc	(labs@a+3)^0,7,c
  6792   0053FC  EF0C  F02A         	goto	u4400
  6793   005400  5008               	movf	(labs@a+3)^0,w,c
  6794   005402  1007               	iorwf	(labs@a+2)^0,w,c
  6795   005404  1006               	iorwf	(labs@a+1)^0,w,c
  6796   005406  E106               	bnz	u4401
  6797   005408  0405               	decf	labs@a^0,w,c
  6798   00540A  B0D8               	btfsc	status,0,c
  6799   00540C  EF0A  F02A         	goto	u4401
  6800   005410  EF0C  F02A         	goto	u4400
  6801   005414                     u4401:
  6802   005414  EF27  F02A         	goto	l1362
  6803   005418                     u4400:
  6804   005418  C005  F009         	movff	labs@a,??_labs
  6805   00541C  C006  F00A         	movff	labs@a+1,??_labs+1
  6806   005420  C007  F00B         	movff	labs@a+2,??_labs+2
  6807   005424  C008  F00C         	movff	labs@a+3,??_labs+3
  6808   005428  1E09               	comf	??_labs^0,f,c
  6809   00542A  1E0A               	comf	(??_labs+1)^0,f,c
  6810   00542C  1E0B               	comf	(??_labs+2)^0,f,c
  6811   00542E  1E0C               	comf	(??_labs+3)^0,f,c
  6812   005430  2A09               	incf	??_labs^0,f,c
  6813   005432  0E00               	movlw	0
  6814   005434  220A               	addwfc	(??_labs+1)^0,f,c
  6815   005436  220B               	addwfc	(??_labs+2)^0,f,c
  6816   005438  220C               	addwfc	(??_labs+3)^0,f,c
  6817   00543A  C009  F005         	movff	??_labs,?_labs
  6818   00543E  C00A  F006         	movff	??_labs+1,?_labs+1
  6819   005442  C00B  F007         	movff	??_labs+2,?_labs+2
  6820   005446  C00C  F008         	movff	??_labs+3,?_labs+3
  6821   00544A  EF2F  F02A         	goto	l1365
  6822   00544E                     l1362:
  6823   00544E  C005  F005         	movff	labs@a,?_labs
  6824   005452  C006  F006         	movff	labs@a+1,?_labs+1
  6825   005456  C007  F007         	movff	labs@a+2,?_labs+2
  6826   00545A  C008  F008         	movff	labs@a+3,?_labs+3
  6827   00545E                     l1365:
  6828   00545E  0012               	return		;funcret
  6829   005460                     __end_of_labs:
  6830                           	callstack 0
  6831                           
  6832 ;; *************** function _floorf *****************
  6833 ;; Defined at:
  6834 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\floorf.c"
  6835 ;; Parameters:    Size  Location     Type
  6836 ;;  x               4   78[COMRAM] float 
  6837 ;; Auto vars:     Size  Location     Type
  6838 ;;  u               4   12[BANK0 ] struct .
  6839 ;;  m               4    6[BANK0 ] unsigned long 
  6840 ;;  e               2   10[BANK0 ] int 
  6841 ;; Return value:  Size  Location     Type
  6842 ;;                  4   78[COMRAM] float 
  6843 ;; Registers used:
  6844 ;;		wreg, status,2, status,0
  6845 ;; Tracked objects:
  6846 ;;		On entry : 0/0
  6847 ;;		On exit  : 0/0
  6848 ;;		Unchanged: 0/0
  6849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6850 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6851 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6852 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6853 ;;      Totals:         4      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6854 ;;Total ram usage:       20 bytes
  6855 ;; Hardware stack levels used: 1
  6856 ;; Hardware stack levels required when called: 2
  6857 ;; This function calls:
  6858 ;;		Nothing
  6859 ;; This function is called by:
  6860 ;;		_efgtoa
  6861 ;; This function uses a non-reentrant model
  6862 ;;
  6863                           
  6864                           	psect	text20
  6865   00398A                     __ptext20:
  6866                           	callstack 0
  6867   00398A                     _floorf:
  6868                           	callstack 23
  6869   00398A  C0EA  F06C         	movff	floorf@F526,floorf@u
  6870   00398E  C0EB  F06D         	movff	floorf@F526+1,floorf@u+1
  6871   003992  C0EC  F06E         	movff	floorf@F526+2,floorf@u+2
  6872   003996  C0ED  F06F         	movff	floorf@F526+3,floorf@u+3
  6873   00399A  C04F  F06C         	movff	floorf@x,floorf@u
  6874   00399E  C050  F06D         	movff	floorf@x+1,floorf@u+1
  6875   0039A2  C051  F06E         	movff	floorf@x+2,floorf@u+2
  6876   0039A6  C052  F06F         	movff	floorf@x+3,floorf@u+3
  6877   0039AA  0E81               	movlw	129
  6878   0039AC  0100               	movlb	0	; () banked
  6879   0039AE  6F60               	movwf	??_floorf& (0+255),b
  6880   0039B0  0EFF               	movlw	255
  6881   0039B2  6F61               	movwf	(??_floorf+1)& (0+255),b
  6882   0039B4  C06C  F062         	movff	floorf@u,??_floorf+2
  6883   0039B8  C06D  F063         	movff	floorf@u+1,??_floorf+3
  6884   0039BC  C06E  F064         	movff	floorf@u+2,??_floorf+4
  6885   0039C0  C06F  F065         	movff	floorf@u+3,??_floorf+5
  6886   0039C4  0E18               	movlw	24
  6887   0039C6  EFEA  F01C         	goto	u6160
  6888   0039CA                     u6165:
  6889   0039CA  90D8               	bcf	status,0,c
  6890   0039CC  3365               	rrcf	(??_floorf+5)& (0+255),f,b
  6891   0039CE  3364               	rrcf	(??_floorf+4)& (0+255),f,b
  6892   0039D0  3363               	rrcf	(??_floorf+3)& (0+255),f,b
  6893   0039D2  3362               	rrcf	(??_floorf+2)& (0+255),f,b
  6894   0039D4                     u6160:
  6895   0039D4  2EE8               	decfsz	wreg,f,c
  6896   0039D6  EFE5  F01C         	goto	u6165
  6897   0039DA  5162               	movf	(??_floorf+2)& (0+255),w,b
  6898   0039DC  2560               	addwf	??_floorf& (0+255),w,b
  6899   0039DE  6F6A               	movwf	floorf@e& (0+255),b
  6900   0039E0  0E00               	movlw	0
  6901   0039E2  2161               	addwfc	(??_floorf+1)& (0+255),w,b
  6902   0039E4  6F6B               	movwf	(floorf@e+1)& (0+255),b
  6903   0039E6  BF6B               	btfsc	(floorf@e+1)& (0+255),7,b
  6904   0039E8  EFFF  F01C         	goto	u6171
  6905   0039EC  516B               	movf	(floorf@e+1)& (0+255),w,b
  6906   0039EE  E109               	bnz	u6170
  6907   0039F0  0E17               	movlw	23
  6908   0039F2  5D6A               	subwf	floorf@e& (0+255),w,b
  6909   0039F4  A0D8               	btfss	status,0,c
  6910   0039F6  EFFF  F01C         	goto	u6171
  6911   0039FA  EF01  F01D         	goto	u6170
  6912   0039FE                     u6171:
  6913   0039FE  EF0B  F01D         	goto	l5588
  6914   003A02                     u6170:
  6915   003A02                     l5586:
  6916                           
  6917                           ; BSR set to: 0
  6918   003A02  C04F  F04F         	movff	floorf@x,?_floorf
  6919   003A06  C050  F050         	movff	floorf@x+1,?_floorf+1
  6920   003A0A  C051  F051         	movff	floorf@x+2,?_floorf+2
  6921   003A0E  C052  F052         	movff	floorf@x+3,?_floorf+3
  6922   003A12  EFCF  F01D         	goto	l1351
  6923   003A16                     l5588:
  6924                           
  6925                           ; BSR set to: 0
  6926   003A16  BF6B               	btfsc	(floorf@e+1)& (0+255),7,b
  6927   003A18  EF10  F01D         	goto	u6181
  6928   003A1C  EF12  F01D         	goto	u6180
  6929   003A20                     u6181:
  6930   003A20  EF83  F01D         	goto	l5598
  6931   003A24                     u6180:
  6932   003A24                     
  6933                           ; BSR set to: 0
  6934   003A24  C06A  F060         	movff	floorf@e,??_floorf
  6935   003A28  0EFF               	movlw	255
  6936   003A2A  6F61               	movwf	(??_floorf+1)& (0+255),b
  6937   003A2C  0EFF               	movlw	255
  6938   003A2E  6F62               	movwf	(??_floorf+2)& (0+255),b
  6939   003A30  0E7F               	movlw	127
  6940   003A32  6F63               	movwf	(??_floorf+3)& (0+255),b
  6941   003A34  0E00               	movlw	0
  6942   003A36  6F64               	movwf	(??_floorf+4)& (0+255),b
  6943   003A38                     u6195:
  6944   003A38  6760               	tstfsz	??_floorf& (0+255),b
  6945   003A3A  EF21  F01D         	goto	u6196
  6946   003A3E  EF29  F01D         	goto	u6197
  6947   003A42                     u6196:
  6948   003A42  3564               	rlcf	(??_floorf+4)& (0+255),w,b
  6949   003A44  3364               	rrcf	(??_floorf+4)& (0+255),f,b
  6950   003A46  3363               	rrcf	(??_floorf+3)& (0+255),f,b
  6951   003A48  3362               	rrcf	(??_floorf+2)& (0+255),f,b
  6952   003A4A  3361               	rrcf	(??_floorf+1)& (0+255),f,b
  6953   003A4C  2F60               	decfsz	??_floorf& (0+255),f,b
  6954   003A4E  EF1C  F01D         	goto	u6195
  6955   003A52                     u6197:
  6956   003A52  C061  F066         	movff	??_floorf+1,floorf@m
  6957   003A56  C062  F067         	movff	??_floorf+2,floorf@m+1
  6958   003A5A  C063  F068         	movff	??_floorf+3,floorf@m+2
  6959   003A5E  C064  F069         	movff	??_floorf+4,floorf@m+3
  6960   003A62  0100               	movlb	0	; () banked
  6961   003A64  5166               	movf	floorf@m& (0+255),w,b
  6962   003A66  156C               	andwf	floorf@u& (0+255),w,b
  6963   003A68  6F60               	movwf	??_floorf& (0+255),b
  6964   003A6A  5167               	movf	(floorf@m+1)& (0+255),w,b
  6965   003A6C  156D               	andwf	(floorf@u+1)& (0+255),w,b
  6966   003A6E  6F61               	movwf	(??_floorf+1)& (0+255),b
  6967   003A70  5168               	movf	(floorf@m+2)& (0+255),w,b
  6968   003A72  156E               	andwf	(floorf@u+2)& (0+255),w,b
  6969   003A74  6F62               	movwf	(??_floorf+2)& (0+255),b
  6970   003A76  5169               	movf	(floorf@m+3)& (0+255),w,b
  6971   003A78  156F               	andwf	(floorf@u+3)& (0+255),w,b
  6972   003A7A  6F63               	movwf	(??_floorf+3)& (0+255),b
  6973   003A7C  5160               	movf	??_floorf& (0+255),w,b
  6974   003A7E  1161               	iorwf	(??_floorf+1)& (0+255),w,b
  6975   003A80  1162               	iorwf	(??_floorf+2)& (0+255),w,b
  6976   003A82  1163               	iorwf	(??_floorf+3)& (0+255),w,b
  6977   003A84  A4D8               	btfss	status,2,c
  6978   003A86  EF47  F01D         	goto	u6201
  6979   003A8A  EF49  F01D         	goto	u6200
  6980   003A8E                     u6201:
  6981   003A8E  EF4B  F01D         	goto	l5594
  6982   003A92                     u6200:
  6983   003A92  EF01  F01D         	goto	l5586
  6984   003A96                     l5594:
  6985                           
  6986                           ; BSR set to: 0
  6987   003A96  C06C  F060         	movff	floorf@u,??_floorf
  6988   003A9A  C06D  F061         	movff	floorf@u+1,??_floorf+1
  6989   003A9E  C06E  F062         	movff	floorf@u+2,??_floorf+2
  6990   003AA2  C06F  F063         	movff	floorf@u+3,??_floorf+3
  6991   003AA6  0E20               	movlw	32
  6992   003AA8  EF5B  F01D         	goto	u6210
  6993   003AAC                     u6215:
  6994   003AAC  90D8               	bcf	status,0,c
  6995   003AAE  3363               	rrcf	(??_floorf+3)& (0+255),f,b
  6996   003AB0  3362               	rrcf	(??_floorf+2)& (0+255),f,b
  6997   003AB2  3361               	rrcf	(??_floorf+1)& (0+255),f,b
  6998   003AB4  3360               	rrcf	??_floorf& (0+255),f,b
  6999   003AB6                     u6210:
  7000   003AB6  2EE8               	decfsz	wreg,f,c
  7001   003AB8  EF56  F01D         	goto	u6215
  7002   003ABC  5160               	movf	??_floorf& (0+255),w,b
  7003   003ABE  1161               	iorwf	(??_floorf+1)& (0+255),w,b
  7004   003AC0  1162               	iorwf	(??_floorf+2)& (0+255),w,b
  7005   003AC2  1163               	iorwf	(??_floorf+3)& (0+255),w,b
  7006   003AC4  B4D8               	btfsc	status,2,c
  7007   003AC6  EF67  F01D         	goto	u6221
  7008   003ACA  EF69  F01D         	goto	u6220
  7009   003ACE                     u6221:
  7010   003ACE  EF71  F01D         	goto	l1354
  7011   003AD2                     u6220:
  7012   003AD2                     
  7013                           ; BSR set to: 0
  7014   003AD2  5166               	movf	floorf@m& (0+255),w,b
  7015   003AD4  276C               	addwf	floorf@u& (0+255),f,b
  7016   003AD6  5167               	movf	(floorf@m+1)& (0+255),w,b
  7017   003AD8  236D               	addwfc	(floorf@u+1)& (0+255),f,b
  7018   003ADA  5168               	movf	(floorf@m+2)& (0+255),w,b
  7019   003ADC  236E               	addwfc	(floorf@u+2)& (0+255),f,b
  7020   003ADE  5169               	movf	(floorf@m+3)& (0+255),w,b
  7021   003AE0  236F               	addwfc	(floorf@u+3)& (0+255),f,b
  7022   003AE2                     l1354:
  7023                           
  7024                           ; BSR set to: 0
  7025   003AE2  1D66               	comf	floorf@m& (0+255),w,b
  7026   003AE4  6F60               	movwf	??_floorf& (0+255),b
  7027   003AE6  1D67               	comf	(floorf@m+1)& (0+255),w,b
  7028   003AE8  6F61               	movwf	(??_floorf+1)& (0+255),b
  7029   003AEA  1D68               	comf	(floorf@m+2)& (0+255),w,b
  7030   003AEC  6F62               	movwf	(??_floorf+2)& (0+255),b
  7031   003AEE  1D69               	comf	(floorf@m+3)& (0+255),w,b
  7032   003AF0  6F63               	movwf	(??_floorf+3)& (0+255),b
  7033   003AF2  5160               	movf	??_floorf& (0+255),w,b
  7034   003AF4  176C               	andwf	floorf@u& (0+255),f,b
  7035   003AF6  5161               	movf	(??_floorf+1)& (0+255),w,b
  7036   003AF8  176D               	andwf	(floorf@u+1)& (0+255),f,b
  7037   003AFA  5162               	movf	(??_floorf+2)& (0+255),w,b
  7038   003AFC  176E               	andwf	(floorf@u+2)& (0+255),f,b
  7039   003AFE  5163               	movf	(??_floorf+3)& (0+255),w,b
  7040   003B00  176F               	andwf	(floorf@u+3)& (0+255),f,b
  7041   003B02  EFC7  F01D         	goto	l5606
  7042   003B06                     l5598:
  7043                           
  7044                           ; BSR set to: 0
  7045   003B06  C06C  F060         	movff	floorf@u,??_floorf
  7046   003B0A  C06D  F061         	movff	floorf@u+1,??_floorf+1
  7047   003B0E  C06E  F062         	movff	floorf@u+2,??_floorf+2
  7048   003B12  C06F  F063         	movff	floorf@u+3,??_floorf+3
  7049   003B16  0E20               	movlw	32
  7050   003B18  EF93  F01D         	goto	u6230
  7051   003B1C                     u6235:
  7052   003B1C  90D8               	bcf	status,0,c
  7053   003B1E  3363               	rrcf	(??_floorf+3)& (0+255),f,b
  7054   003B20  3362               	rrcf	(??_floorf+2)& (0+255),f,b
  7055   003B22  3361               	rrcf	(??_floorf+1)& (0+255),f,b
  7056   003B24  3360               	rrcf	??_floorf& (0+255),f,b
  7057   003B26                     u6230:
  7058   003B26  2EE8               	decfsz	wreg,f,c
  7059   003B28  EF8E  F01D         	goto	u6235
  7060   003B2C  5160               	movf	??_floorf& (0+255),w,b
  7061   003B2E  1161               	iorwf	(??_floorf+1)& (0+255),w,b
  7062   003B30  1162               	iorwf	(??_floorf+2)& (0+255),w,b
  7063   003B32  1163               	iorwf	(??_floorf+3)& (0+255),w,b
  7064   003B34  A4D8               	btfss	status,2,c
  7065   003B36  EF9F  F01D         	goto	u6241
  7066   003B3A  EFA1  F01D         	goto	u6240
  7067   003B3E                     u6241:
  7068   003B3E  EFAB  F01D         	goto	l5602
  7069   003B42                     u6240:
  7070   003B42                     
  7071                           ; BSR set to: 0
  7072   003B42  0E00               	movlw	0
  7073   003B44  6F6C               	movwf	floorf@u& (0+255),b
  7074   003B46  0E00               	movlw	0
  7075   003B48  6F6D               	movwf	(floorf@u+1)& (0+255),b
  7076   003B4A  0E00               	movlw	0
  7077   003B4C  6F6E               	movwf	(floorf@u+2)& (0+255),b
  7078   003B4E  0E00               	movlw	0
  7079   003B50  6F6F               	movwf	(floorf@u+3)& (0+255),b
  7080   003B52  EFC7  F01D         	goto	l5606
  7081   003B56                     l5602:
  7082                           
  7083                           ; BSR set to: 0
  7084   003B56  90D8               	bcf	status,0,c
  7085   003B58  356C               	rlcf	floorf@u& (0+255),w,b
  7086   003B5A  6F60               	movwf	??_floorf& (0+255),b
  7087   003B5C  356D               	rlcf	(floorf@u+1)& (0+255),w,b
  7088   003B5E  6F61               	movwf	(??_floorf+1)& (0+255),b
  7089   003B60  356E               	rlcf	(floorf@u+2)& (0+255),w,b
  7090   003B62  6F62               	movwf	(??_floorf+2)& (0+255),b
  7091   003B64  356F               	rlcf	(floorf@u+3)& (0+255),w,b
  7092   003B66  6F63               	movwf	(??_floorf+3)& (0+255),b
  7093   003B68  5160               	movf	??_floorf& (0+255),w,b
  7094   003B6A  1161               	iorwf	(??_floorf+1)& (0+255),w,b
  7095   003B6C  1162               	iorwf	(??_floorf+2)& (0+255),w,b
  7096   003B6E  1163               	iorwf	(??_floorf+3)& (0+255),w,b
  7097   003B70  B4D8               	btfsc	status,2,c
  7098   003B72  EFBD  F01D         	goto	u6251
  7099   003B76  EFBF  F01D         	goto	u6250
  7100   003B7A                     u6251:
  7101   003B7A  EFC7  F01D         	goto	l5606
  7102   003B7E                     u6250:
  7103   003B7E                     
  7104                           ; BSR set to: 0
  7105   003B7E  0E00               	movlw	0
  7106   003B80  6F6C               	movwf	floorf@u& (0+255),b
  7107   003B82  0E00               	movlw	0
  7108   003B84  6F6D               	movwf	(floorf@u+1)& (0+255),b
  7109   003B86  0E80               	movlw	128
  7110   003B88  6F6E               	movwf	(floorf@u+2)& (0+255),b
  7111   003B8A  0EBF               	movlw	191
  7112   003B8C  6F6F               	movwf	(floorf@u+3)& (0+255),b
  7113   003B8E                     l5606:
  7114                           
  7115                           ; BSR set to: 0
  7116   003B8E  C06C  F04F         	movff	floorf@u,?_floorf
  7117   003B92  C06D  F050         	movff	floorf@u+1,?_floorf+1
  7118   003B96  C06E  F051         	movff	floorf@u+2,?_floorf+2
  7119   003B9A  C06F  F052         	movff	floorf@u+3,?_floorf+3
  7120   003B9E                     l1351:
  7121                           
  7122                           ; BSR set to: 0
  7123   003B9E  0012               	return		;funcret
  7124   003BA0                     __end_of_floorf:
  7125                           	callstack 0
  7126                           
  7127 ;; *************** function ___fpclassifyf *****************
  7128 ;; Defined at:
  7129 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\__fpclassifyf.c"
  7130 ;; Parameters:    Size  Location     Type
  7131 ;;  x               4    4[COMRAM] float 
  7132 ;; Auto vars:     Size  Location     Type
  7133 ;;  u               4   14[COMRAM] struct .
  7134 ;;  e               2   12[COMRAM] int 
  7135 ;; Return value:  Size  Location     Type
  7136 ;;                  2    4[COMRAM] int 
  7137 ;; Registers used:
  7138 ;;		wreg, status,2, status,0
  7139 ;; Tracked objects:
  7140 ;;		On entry : 0/0
  7141 ;;		On exit  : 0/0
  7142 ;;		Unchanged: 0/0
  7143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7144 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7145 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7146 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7147 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7148 ;;Total ram usage:       14 bytes
  7149 ;; Hardware stack levels used: 1
  7150 ;; Hardware stack levels required when called: 2
  7151 ;; This function calls:
  7152 ;;		Nothing
  7153 ;; This function is called by:
  7154 ;;		_efgtoa
  7155 ;; This function uses a non-reentrant model
  7156 ;;
  7157                           
  7158                           	psect	text21
  7159   0049EA                     __ptext21:
  7160                           	callstack 0
  7161   0049EA                     ___fpclassifyf:
  7162                           	callstack 23
  7163   0049EA  C0EE  F00F         	movff	___fpclassifyf@F465,___fpclassifyf@u
  7164   0049EE  C0EF  F010         	movff	___fpclassifyf@F465+1,___fpclassifyf@u+1
  7165   0049F2  C0F0  F011         	movff	___fpclassifyf@F465+2,___fpclassifyf@u+2
  7166   0049F6  C0F1  F012         	movff	___fpclassifyf@F465+3,___fpclassifyf@u+3
  7167   0049FA  C005  F00F         	movff	___fpclassifyf@x,___fpclassifyf@u
  7168   0049FE  C006  F010         	movff	___fpclassifyf@x+1,___fpclassifyf@u+1
  7169   004A02  C007  F011         	movff	___fpclassifyf@x+2,___fpclassifyf@u+2
  7170   004A06  C008  F012         	movff	___fpclassifyf@x+3,___fpclassifyf@u+3
  7171   004A0A  C00F  F009         	movff	___fpclassifyf@u,??___fpclassifyf
  7172   004A0E  C010  F00A         	movff	___fpclassifyf@u+1,??___fpclassifyf+1
  7173   004A12  C011  F00B         	movff	___fpclassifyf@u+2,??___fpclassifyf+2
  7174   004A16  C012  F00C         	movff	___fpclassifyf@u+3,??___fpclassifyf+3
  7175   004A1A  0E18               	movlw	24
  7176   004A1C  EF15  F025         	goto	u4320
  7177   004A20                     u4325:
  7178   004A20  90D8               	bcf	status,0,c
  7179   004A22  320C               	rrcf	(??___fpclassifyf+3)^0,f,c
  7180   004A24  320B               	rrcf	(??___fpclassifyf+2)^0,f,c
  7181   004A26  320A               	rrcf	(??___fpclassifyf+1)^0,f,c
  7182   004A28  3209               	rrcf	??___fpclassifyf^0,f,c
  7183   004A2A                     u4320:
  7184   004A2A  2EE8               	decfsz	wreg,f,c
  7185   004A2C  EF10  F025         	goto	u4325
  7186   004A30  5009               	movf	??___fpclassifyf^0,w,c
  7187   004A32  6E0D               	movwf	___fpclassifyf@e^0,c
  7188   004A34  6A0E               	clrf	(___fpclassifyf@e+1)^0,c
  7189   004A36  500D               	movf	___fpclassifyf@e^0,w,c
  7190   004A38  100E               	iorwf	(___fpclassifyf@e+1)^0,w,c
  7191   004A3A  A4D8               	btfss	status,2,c
  7192   004A3C  EF22  F025         	goto	u4331
  7193   004A40  EF24  F025         	goto	u4330
  7194   004A44                     u4331:
  7195   004A44  EF44  F025         	goto	l4236
  7196   004A48                     u4330:
  7197   004A48  90D8               	bcf	status,0,c
  7198   004A4A  340F               	rlcf	___fpclassifyf@u^0,w,c
  7199   004A4C  6E09               	movwf	??___fpclassifyf^0,c
  7200   004A4E  3410               	rlcf	(___fpclassifyf@u+1)^0,w,c
  7201   004A50  6E0A               	movwf	(??___fpclassifyf+1)^0,c
  7202   004A52  3411               	rlcf	(___fpclassifyf@u+2)^0,w,c
  7203   004A54  6E0B               	movwf	(??___fpclassifyf+2)^0,c
  7204   004A56  3412               	rlcf	(___fpclassifyf@u+3)^0,w,c
  7205   004A58  6E0C               	movwf	(??___fpclassifyf+3)^0,c
  7206   004A5A  5009               	movf	??___fpclassifyf^0,w,c
  7207   004A5C  100A               	iorwf	(??___fpclassifyf+1)^0,w,c
  7208   004A5E  100B               	iorwf	(??___fpclassifyf+2)^0,w,c
  7209   004A60  100C               	iorwf	(??___fpclassifyf+3)^0,w,c
  7210   004A62  A4D8               	btfss	status,2,c
  7211   004A64  EF36  F025         	goto	u4341
  7212   004A68  EF38  F025         	goto	u4340
  7213   004A6C                     u4341:
  7214   004A6C  EF3E  F025         	goto	l4232
  7215   004A70                     u4340:
  7216   004A70  0E00               	movlw	0
  7217   004A72  6E06               	movwf	(?___fpclassifyf+1)^0,c
  7218   004A74  0E02               	movlw	2
  7219   004A76  6E05               	movwf	?___fpclassifyf^0,c
  7220   004A78  EF73  F025         	goto	l1337
  7221   004A7C                     l4232:
  7222   004A7C  0E00               	movlw	0
  7223   004A7E  6E06               	movwf	(?___fpclassifyf+1)^0,c
  7224   004A80  0E03               	movlw	3
  7225   004A82  6E05               	movwf	?___fpclassifyf^0,c
  7226   004A84  EF73  F025         	goto	l1337
  7227   004A88                     l4236:
  7228   004A88  280D               	incf	___fpclassifyf@e^0,w,c
  7229   004A8A  100E               	iorwf	(___fpclassifyf@e+1)^0,w,c
  7230   004A8C  A4D8               	btfss	status,2,c
  7231   004A8E  EF4B  F025         	goto	u4351
  7232   004A92  EF4D  F025         	goto	u4350
  7233   004A96                     u4351:
  7234   004A96  EF6F  F025         	goto	l4242
  7235   004A9A                     u4350:
  7236   004A9A  C00F  F009         	movff	___fpclassifyf@u,??___fpclassifyf
  7237   004A9E  C010  F00A         	movff	___fpclassifyf@u+1,??___fpclassifyf+1
  7238   004AA2  C011  F00B         	movff	___fpclassifyf@u+2,??___fpclassifyf+2
  7239   004AA6  C012  F00C         	movff	___fpclassifyf@u+3,??___fpclassifyf+3
  7240   004AAA  0E09               	movlw	9
  7241   004AAC                     u4365:
  7242   004AAC  90D8               	bcf	status,0,c
  7243   004AAE  3609               	rlcf	??___fpclassifyf^0,f,c
  7244   004AB0  360A               	rlcf	(??___fpclassifyf+1)^0,f,c
  7245   004AB2  360B               	rlcf	(??___fpclassifyf+2)^0,f,c
  7246   004AB4  360C               	rlcf	(??___fpclassifyf+3)^0,f,c
  7247   004AB6  2EE8               	decfsz	wreg,f,c
  7248   004AB8  EF56  F025         	goto	u4365
  7249   004ABC  5009               	movf	??___fpclassifyf^0,w,c
  7250   004ABE  100A               	iorwf	(??___fpclassifyf+1)^0,w,c
  7251   004AC0  100B               	iorwf	(??___fpclassifyf+2)^0,w,c
  7252   004AC2  100C               	iorwf	(??___fpclassifyf+3)^0,w,c
  7253   004AC4  B4D8               	btfsc	status,2,c
  7254   004AC6  EF67  F025         	goto	u4371
  7255   004ACA  EF6A  F025         	goto	u4370
  7256   004ACE                     u4371:
  7257   004ACE  0E01               	movlw	1
  7258   004AD0  EF6B  F025         	goto	u4380
  7259   004AD4                     u4370:
  7260   004AD4  0E00               	movlw	0
  7261   004AD6                     u4380:
  7262   004AD6  6E05               	movwf	?___fpclassifyf^0,c
  7263   004AD8  6A06               	clrf	(?___fpclassifyf+1)^0,c
  7264   004ADA  EF73  F025         	goto	l1337
  7265   004ADE                     l4242:
  7266   004ADE  0E00               	movlw	0
  7267   004AE0  6E06               	movwf	(?___fpclassifyf+1)^0,c
  7268   004AE2  0E04               	movlw	4
  7269   004AE4  6E05               	movwf	?___fpclassifyf^0,c
  7270   004AE6                     l1337:
  7271   004AE6  0012               	return		;funcret
  7272   004AE8                     __end_of___fpclassifyf:
  7273                           	callstack 0
  7274                           
  7275 ;; *************** function ___fltol *****************
  7276 ;; Defined at:
  7277 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\fltol.c"
  7278 ;; Parameters:    Size  Location     Type
  7279 ;;  f1              4    4[COMRAM] int 
  7280 ;; Auto vars:     Size  Location     Type
  7281 ;;  exp1            1   13[COMRAM] unsigned char 
  7282 ;;  sign1           1   12[COMRAM] unsigned char 
  7283 ;; Return value:  Size  Location     Type
  7284 ;;                  4    4[COMRAM] long 
  7285 ;; Registers used:
  7286 ;;		wreg, status,2, status,0
  7287 ;; Tracked objects:
  7288 ;;		On entry : 0/0
  7289 ;;		On exit  : 0/0
  7290 ;;		Unchanged: 0/0
  7291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7292 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7293 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7294 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7295 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7296 ;;Total ram usage:       10 bytes
  7297 ;; Hardware stack levels used: 1
  7298 ;; Hardware stack levels required when called: 2
  7299 ;; This function calls:
  7300 ;;		Nothing
  7301 ;; This function is called by:
  7302 ;;		_turnRight
  7303 ;;		_turnLeft_90
  7304 ;;		_turnRight_90
  7305 ;;		_turnRight_135
  7306 ;;		_turnLeft_135
  7307 ;;		_reverseSquareRight
  7308 ;;		_reverseSquareLeft
  7309 ;;		_efgtoa
  7310 ;;		_turnLeft
  7311 ;; This function uses a non-reentrant model
  7312 ;;
  7313                           
  7314                           	psect	text22
  7315   0047E0                     __ptext22:
  7316                           	callstack 0
  7317   0047E0                     ___fltol:
  7318                           	callstack 23
  7319   0047E0  3407               	rlcf	(___fltol@f1+2)^0,w,c
  7320   0047E2  3408               	rlcf	(___fltol@f1+3)^0,w,c
  7321   0047E4  6E0E               	movwf	___fltol@exp1^0,c
  7322   0047E6  500E               	movf	___fltol@exp1^0,w,c
  7323   0047E8  A4D8               	btfss	status,2,c
  7324   0047EA  EFF9  F023         	goto	u4191
  7325   0047EE  EFFB  F023         	goto	u4190
  7326   0047F2                     u4191:
  7327   0047F2  EF05  F024         	goto	l4146
  7328   0047F6                     u4190:
  7329   0047F6                     l4142:
  7330   0047F6  0E00               	movlw	0
  7331   0047F8  6E05               	movwf	?___fltol^0,c
  7332   0047FA  0E00               	movlw	0
  7333   0047FC  6E06               	movwf	(?___fltol+1)^0,c
  7334   0047FE  0E00               	movlw	0
  7335   004800  6E07               	movwf	(?___fltol+2)^0,c
  7336   004802  0E00               	movlw	0
  7337   004804  6E08               	movwf	(?___fltol+3)^0,c
  7338   004806  EF72  F024         	goto	l810
  7339   00480A                     l4146:
  7340   00480A  C005  F009         	movff	___fltol@f1,??___fltol
  7341   00480E  C006  F00A         	movff	___fltol@f1+1,??___fltol+1
  7342   004812  C007  F00B         	movff	___fltol@f1+2,??___fltol+2
  7343   004816  C008  F00C         	movff	___fltol@f1+3,??___fltol+3
  7344   00481A  0E20               	movlw	32
  7345   00481C  EF15  F024         	goto	u4200
  7346   004820                     u4205:
  7347   004820  90D8               	bcf	status,0,c
  7348   004822  320C               	rrcf	(??___fltol+3)^0,f,c
  7349   004824  320B               	rrcf	(??___fltol+2)^0,f,c
  7350   004826  320A               	rrcf	(??___fltol+1)^0,f,c
  7351   004828  3209               	rrcf	??___fltol^0,f,c
  7352   00482A                     u4200:
  7353   00482A  2EE8               	decfsz	wreg,f,c
  7354   00482C  EF10  F024         	goto	u4205
  7355   004830  5009               	movf	??___fltol^0,w,c
  7356   004832  6E0D               	movwf	___fltol@sign1^0,c
  7357   004834  8E07               	bsf	(___fltol@f1+2)^0,7,c
  7358   004836  0EFF               	movlw	255
  7359   004838  1605               	andwf	___fltol@f1^0,f,c
  7360   00483A  0EFF               	movlw	255
  7361   00483C  1606               	andwf	(___fltol@f1+1)^0,f,c
  7362   00483E  0EFF               	movlw	255
  7363   004840  1607               	andwf	(___fltol@f1+2)^0,f,c
  7364   004842  0E00               	movlw	0
  7365   004844  1608               	andwf	(___fltol@f1+3)^0,f,c
  7366   004846  0E96               	movlw	150
  7367   004848  5E0E               	subwf	___fltol@exp1^0,f,c
  7368   00484A  BE0E               	btfsc	___fltol@exp1^0,7,c
  7369   00484C  EF2C  F024         	goto	u4210
  7370   004850  EF2A  F024         	goto	u4211
  7371   004854                     u4211:
  7372   004854  EF42  F024         	goto	l4166
  7373   004858                     u4210:
  7374   004858  500E               	movf	___fltol@exp1^0,w,c
  7375   00485A  0A80               	xorlw	128
  7376   00485C  0F97               	addlw	151
  7377   00485E  B0D8               	btfsc	status,0,c
  7378   004860  EF34  F024         	goto	u4221
  7379   004864  EF36  F024         	goto	u4220
  7380   004868                     u4221:
  7381   004868  EF38  F024         	goto	l4162
  7382   00486C                     u4220:
  7383   00486C  EFFB  F023         	goto	l4142
  7384   004870                     l4162:
  7385   004870  90D8               	bcf	status,0,c
  7386   004872  3208               	rrcf	(___fltol@f1+3)^0,f,c
  7387   004874  3207               	rrcf	(___fltol@f1+2)^0,f,c
  7388   004876  3206               	rrcf	(___fltol@f1+1)^0,f,c
  7389   004878  3205               	rrcf	___fltol@f1^0,f,c
  7390   00487A  3E0E               	incfsz	___fltol@exp1^0,f,c
  7391   00487C  EF38  F024         	goto	l4162
  7392   004880  EF5A  F024         	goto	l4176
  7393   004884                     l4166:
  7394   004884  0E1F               	movlw	31
  7395   004886  640E               	cpfsgt	___fltol@exp1^0,c
  7396   004888  EF48  F024         	goto	u4231
  7397   00488C  EF4A  F024         	goto	u4230
  7398   004890                     u4231:
  7399   004890  EF52  F024         	goto	l4174
  7400   004894                     u4230:
  7401   004894  EFFB  F023         	goto	l4142
  7402   004898                     l4172:
  7403   004898  90D8               	bcf	status,0,c
  7404   00489A  3605               	rlcf	___fltol@f1^0,f,c
  7405   00489C  3606               	rlcf	(___fltol@f1+1)^0,f,c
  7406   00489E  3607               	rlcf	(___fltol@f1+2)^0,f,c
  7407   0048A0  3608               	rlcf	(___fltol@f1+3)^0,f,c
  7408   0048A2  060E               	decf	___fltol@exp1^0,f,c
  7409   0048A4                     l4174:
  7410   0048A4  500E               	movf	___fltol@exp1^0,w,c
  7411   0048A6  A4D8               	btfss	status,2,c
  7412   0048A8  EF58  F024         	goto	u4241
  7413   0048AC  EF5A  F024         	goto	u4240
  7414   0048B0                     u4241:
  7415   0048B0  EF4C  F024         	goto	l4172
  7416   0048B4                     u4240:
  7417   0048B4                     l4176:
  7418   0048B4  500D               	movf	___fltol@sign1^0,w,c
  7419   0048B6  B4D8               	btfsc	status,2,c
  7420   0048B8  EF60  F024         	goto	u4251
  7421   0048BC  EF62  F024         	goto	u4250
  7422   0048C0                     u4251:
  7423   0048C0  EF6A  F024         	goto	l4180
  7424   0048C4                     u4250:
  7425   0048C4  1E08               	comf	(___fltol@f1+3)^0,f,c
  7426   0048C6  1E07               	comf	(___fltol@f1+2)^0,f,c
  7427   0048C8  1E06               	comf	(___fltol@f1+1)^0,f,c
  7428   0048CA  6C05               	negf	___fltol@f1^0,c
  7429   0048CC  0E00               	movlw	0
  7430   0048CE  2206               	addwfc	(___fltol@f1+1)^0,f,c
  7431   0048D0  2207               	addwfc	(___fltol@f1+2)^0,f,c
  7432   0048D2  2208               	addwfc	(___fltol@f1+3)^0,f,c
  7433   0048D4                     l4180:
  7434   0048D4  C005  F005         	movff	___fltol@f1,?___fltol
  7435   0048D8  C006  F006         	movff	___fltol@f1+1,?___fltol+1
  7436   0048DC  C007  F007         	movff	___fltol@f1+2,?___fltol+2
  7437   0048E0  C008  F008         	movff	___fltol@f1+3,?___fltol+3
  7438   0048E4                     l810:
  7439   0048E4  0012               	return		;funcret
  7440   0048E6                     __end_of___fltol:
  7441                           	callstack 0
  7442                           
  7443 ;; *************** function ___flsub *****************
  7444 ;; Defined at:
  7445 ;;		line 245 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\sprcadd.c"
  7446 ;; Parameters:    Size  Location     Type
  7447 ;;  b               4   20[COMRAM] long 
  7448 ;;  a               4   24[COMRAM] long 
  7449 ;; Auto vars:     Size  Location     Type
  7450 ;;		None
  7451 ;; Return value:  Size  Location     Type
  7452 ;;                  4   20[COMRAM] long 
  7453 ;; Registers used:
  7454 ;;		wreg, status,2, status,0, cstack
  7455 ;; Tracked objects:
  7456 ;;		On entry : 0/0
  7457 ;;		On exit  : 0/0
  7458 ;;		Unchanged: 0/0
  7459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7460 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7461 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7463 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7464 ;;Total ram usage:        8 bytes
  7465 ;; Hardware stack levels used: 1
  7466 ;; Hardware stack levels required when called: 3
  7467 ;; This function calls:
  7468 ;;		___fladd
  7469 ;; This function is called by:
  7470 ;;		_colorDetect
  7471 ;;		_efgtoa
  7472 ;; This function uses a non-reentrant model
  7473 ;;
  7474                           
  7475                           	psect	text23
  7476   00574C                     __ptext23:
  7477                           	callstack 0
  7478   00574C                     ___flsub:
  7479                           	callstack 22
  7480   00574C  0E00               	movlw	0
  7481   00574E  1A19               	xorwf	___flsub@a^0,f,c
  7482   005750  0E00               	movlw	0
  7483   005752  1A1A               	xorwf	(___flsub@a+1)^0,f,c
  7484   005754  0E00               	movlw	0
  7485   005756  1A1B               	xorwf	(___flsub@a+2)^0,f,c
  7486   005758  0E80               	movlw	128
  7487   00575A  1A1C               	xorwf	(___flsub@a+3)^0,f,c
  7488   00575C  C015  F005         	movff	___flsub@b,___fladd@b
  7489   005760  C016  F006         	movff	___flsub@b+1,___fladd@b+1
  7490   005764  C017  F007         	movff	___flsub@b+2,___fladd@b+2
  7491   005768  C018  F008         	movff	___flsub@b+3,___fladd@b+3
  7492   00576C  C019  F009         	movff	___flsub@a,___fladd@a
  7493   005770  C01A  F00A         	movff	___flsub@a+1,___fladd@a+1
  7494   005774  C01B  F00B         	movff	___flsub@a+2,___fladd@a+2
  7495   005778  C01C  F00C         	movff	___flsub@a+3,___fladd@a+3
  7496   00577C  EC28  F012         	call	___fladd	;wreg free
  7497   005780  C005  F015         	movff	?___fladd,?___flsub
  7498   005784  C006  F016         	movff	?___fladd+1,?___flsub+1
  7499   005788  C007  F017         	movff	?___fladd+2,?___flsub+2
  7500   00578C  C008  F018         	movff	?___fladd+3,?___flsub+3
  7501   005790  0012               	return		;funcret
  7502   005792                     __end_of___flsub:
  7503                           	callstack 0
  7504                           
  7505 ;; *************** function ___fladd *****************
  7506 ;; Defined at:
  7507 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\sprcadd.c"
  7508 ;; Parameters:    Size  Location     Type
  7509 ;;  b               4    4[COMRAM] long 
  7510 ;;  a               4    8[COMRAM] long 
  7511 ;; Auto vars:     Size  Location     Type
  7512 ;;  grs             1   19[COMRAM] unsigned char 
  7513 ;;  bexp            1   18[COMRAM] unsigned char 
  7514 ;;  aexp            1   17[COMRAM] unsigned char 
  7515 ;;  signs           1   16[COMRAM] unsigned char 
  7516 ;; Return value:  Size  Location     Type
  7517 ;;                  4    4[COMRAM] unsigned char 
  7518 ;; Registers used:
  7519 ;;		wreg, status,2, status,0
  7520 ;; Tracked objects:
  7521 ;;		On entry : 0/0
  7522 ;;		On exit  : 0/0
  7523 ;;		Unchanged: 0/0
  7524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7525 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7526 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7527 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7528 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7529 ;;Total ram usage:       16 bytes
  7530 ;; Hardware stack levels used: 1
  7531 ;; Hardware stack levels required when called: 2
  7532 ;; This function calls:
  7533 ;;		Nothing
  7534 ;; This function is called by:
  7535 ;;		___flsub
  7536 ;;		_efgtoa
  7537 ;; This function uses a non-reentrant model
  7538 ;;
  7539                           
  7540                           	psect	text24
  7541   002450                     __ptext24:
  7542                           	callstack 0
  7543   002450                     ___fladd:
  7544                           	callstack 22
  7545   002450  5008               	movf	(___fladd@b+3)^0,w,c
  7546   002452  0B80               	andlw	128
  7547   002454  6E11               	movwf	___fladd@signs^0,c
  7548   002456  5008               	movf	(___fladd@b+3)^0,w,c
  7549   002458  2408               	addwf	(___fladd@b+3)^0,w,c
  7550   00245A  6E13               	movwf	___fladd@bexp^0,c
  7551   00245C  AE07               	btfss	(___fladd@b+2)^0,7,c
  7552   00245E  EF33  F012         	goto	u3151
  7553   002462  EF35  F012         	goto	u3150
  7554   002466                     u3151:
  7555   002466  EF36  F012         	goto	l3530
  7556   00246A                     u3150:
  7557   00246A  8013               	bsf	___fladd@bexp^0,0,c
  7558   00246C                     l3530:
  7559   00246C  5013               	movf	___fladd@bexp^0,w,c
  7560   00246E  B4D8               	btfsc	status,2,c
  7561   002470  EF3C  F012         	goto	u3161
  7562   002474  EF3E  F012         	goto	u3160
  7563   002478                     u3161:
  7564   002478  EF53  F012         	goto	l3540
  7565   00247C                     u3160:
  7566   00247C  2813               	incf	___fladd@bexp^0,w,c
  7567   00247E  A4D8               	btfss	status,2,c
  7568   002480  EF44  F012         	goto	u3171
  7569   002484  EF46  F012         	goto	u3170
  7570   002488                     u3171:
  7571   002488  EF4E  F012         	goto	l3536
  7572   00248C                     u3170:
  7573   00248C  0E00               	movlw	0
  7574   00248E  6E05               	movwf	___fladd@b^0,c
  7575   002490  0E00               	movlw	0
  7576   002492  6E06               	movwf	(___fladd@b+1)^0,c
  7577   002494  0E00               	movlw	0
  7578   002496  6E07               	movwf	(___fladd@b+2)^0,c
  7579   002498  0E00               	movlw	0
  7580   00249A  6E08               	movwf	(___fladd@b+3)^0,c
  7581   00249C                     l3536:
  7582   00249C  8E07               	bsf	(___fladd@b+2)^0,7,c
  7583   00249E  0E00               	movlw	0
  7584   0024A0  6E08               	movwf	(___fladd@b+3)^0,c
  7585   0024A2  EF5B  F012         	goto	l3542
  7586   0024A6                     l3540:
  7587   0024A6  0E00               	movlw	0
  7588   0024A8  6E05               	movwf	___fladd@b^0,c
  7589   0024AA  0E00               	movlw	0
  7590   0024AC  6E06               	movwf	(___fladd@b+1)^0,c
  7591   0024AE  0E00               	movlw	0
  7592   0024B0  6E07               	movwf	(___fladd@b+2)^0,c
  7593   0024B2  0E00               	movlw	0
  7594   0024B4  6E08               	movwf	(___fladd@b+3)^0,c
  7595   0024B6                     l3542:
  7596   0024B6  500C               	movf	(___fladd@a+3)^0,w,c
  7597   0024B8  0B80               	andlw	128
  7598   0024BA  6E12               	movwf	___fladd@aexp^0,c
  7599   0024BC  5011               	movf	___fladd@signs^0,w,c
  7600   0024BE  1812               	xorwf	___fladd@aexp^0,w,c
  7601   0024C0  B4D8               	btfsc	status,2,c
  7602   0024C2  EF65  F012         	goto	u3181
  7603   0024C6  EF67  F012         	goto	u3180
  7604   0024CA                     u3181:
  7605   0024CA  EF68  F012         	goto	l3548
  7606   0024CE                     u3180:
  7607   0024CE  8C11               	bsf	___fladd@signs^0,6,c
  7608   0024D0                     l3548:
  7609   0024D0  500C               	movf	(___fladd@a+3)^0,w,c
  7610   0024D2  240C               	addwf	(___fladd@a+3)^0,w,c
  7611   0024D4  6E12               	movwf	___fladd@aexp^0,c
  7612   0024D6  AE0B               	btfss	(___fladd@a+2)^0,7,c
  7613   0024D8  EF70  F012         	goto	u3191
  7614   0024DC  EF72  F012         	goto	u3190
  7615   0024E0                     u3191:
  7616   0024E0  EF73  F012         	goto	l3554
  7617   0024E4                     u3190:
  7618   0024E4  8012               	bsf	___fladd@aexp^0,0,c
  7619   0024E6                     l3554:
  7620   0024E6  5012               	movf	___fladd@aexp^0,w,c
  7621   0024E8  B4D8               	btfsc	status,2,c
  7622   0024EA  EF79  F012         	goto	u3201
  7623   0024EE  EF7B  F012         	goto	u3200
  7624   0024F2                     u3201:
  7625   0024F2  EF90  F012         	goto	l3564
  7626   0024F6                     u3200:
  7627   0024F6  2812               	incf	___fladd@aexp^0,w,c
  7628   0024F8  A4D8               	btfss	status,2,c
  7629   0024FA  EF81  F012         	goto	u3211
  7630   0024FE  EF83  F012         	goto	u3210
  7631   002502                     u3211:
  7632   002502  EF8B  F012         	goto	l3560
  7633   002506                     u3210:
  7634   002506  0E00               	movlw	0
  7635   002508  6E09               	movwf	___fladd@a^0,c
  7636   00250A  0E00               	movlw	0
  7637   00250C  6E0A               	movwf	(___fladd@a+1)^0,c
  7638   00250E  0E00               	movlw	0
  7639   002510  6E0B               	movwf	(___fladd@a+2)^0,c
  7640   002512  0E00               	movlw	0
  7641   002514  6E0C               	movwf	(___fladd@a+3)^0,c
  7642   002516                     l3560:
  7643   002516  8E0B               	bsf	(___fladd@a+2)^0,7,c
  7644   002518  0E00               	movlw	0
  7645   00251A  6E0C               	movwf	(___fladd@a+3)^0,c
  7646   00251C  EF98  F012         	goto	l3566
  7647   002520                     l3564:
  7648   002520  0E00               	movlw	0
  7649   002522  6E09               	movwf	___fladd@a^0,c
  7650   002524  0E00               	movlw	0
  7651   002526  6E0A               	movwf	(___fladd@a+1)^0,c
  7652   002528  0E00               	movlw	0
  7653   00252A  6E0B               	movwf	(___fladd@a+2)^0,c
  7654   00252C  0E00               	movlw	0
  7655   00252E  6E0C               	movwf	(___fladd@a+3)^0,c
  7656   002530                     l3566:
  7657   002530  5013               	movf	___fladd@bexp^0,w,c
  7658   002532  5C12               	subwf	___fladd@aexp^0,w,c
  7659   002534  B0D8               	btfsc	status,0,c
  7660   002536  EF9F  F012         	goto	u3221
  7661   00253A  EFA1  F012         	goto	u3220
  7662   00253E                     u3221:
  7663   00253E  EFC8  F012         	goto	l3602
  7664   002542                     u3220:
  7665   002542  AC11               	btfss	___fladd@signs^0,6,c
  7666   002544  EFA6  F012         	goto	u3231
  7667   002548  EFA8  F012         	goto	u3230
  7668   00254C                     u3231:
  7669   00254C  EFAA  F012         	goto	l3572
  7670   002550                     u3230:
  7671   002550  0E80               	movlw	128
  7672   002552  1A11               	xorwf	___fladd@signs^0,f,c
  7673   002554                     l3572:
  7674   002554  C013  F014         	movff	___fladd@bexp,___fladd@grs
  7675   002558  C012  F013         	movff	___fladd@aexp,___fladd@bexp
  7676   00255C  C014  F012         	movff	___fladd@grs,___fladd@aexp
  7677   002560  C005  F014         	movff	___fladd@b,___fladd@grs
  7678   002564  C009  F005         	movff	___fladd@a,___fladd@b
  7679   002568  C014  F009         	movff	___fladd@grs,___fladd@a
  7680   00256C  C006  F014         	movff	___fladd@b+1,___fladd@grs
  7681   002570  C00A  F006         	movff	___fladd@a+1,___fladd@b+1
  7682   002574  C014  F00A         	movff	___fladd@grs,___fladd@a+1
  7683   002578  C007  F014         	movff	___fladd@b+2,___fladd@grs
  7684   00257C  C00B  F007         	movff	___fladd@a+2,___fladd@b+2
  7685   002580  C014  F00B         	movff	___fladd@grs,___fladd@a+2
  7686   002584  C008  F014         	movff	___fladd@b+3,___fladd@grs
  7687   002588  C00C  F008         	movff	___fladd@a+3,___fladd@b+3
  7688   00258C  C014  F00C         	movff	___fladd@grs,___fladd@a+3
  7689   002590                     l3602:
  7690   002590  0E00               	movlw	0
  7691   002592  6E14               	movwf	___fladd@grs^0,c
  7692   002594  5013               	movf	___fladd@bexp^0,w,c
  7693   002596  C012  F00D         	movff	___fladd@aexp,??___fladd
  7694   00259A  6A0E               	clrf	(??___fladd+1)^0,c
  7695   00259C  5E0D               	subwf	??___fladd^0,f,c
  7696   00259E  0E00               	movlw	0
  7697   0025A0  5A0E               	subwfb	(??___fladd+1)^0,f,c
  7698   0025A2  BE0E               	btfsc	(??___fladd+1)^0,7,c
  7699   0025A4  EFDD  F012         	goto	u3241
  7700   0025A8  500E               	movf	(??___fladd+1)^0,w,c
  7701   0025AA  E109               	bnz	u3240
  7702   0025AC  0E1A               	movlw	26
  7703   0025AE  5C0D               	subwf	??___fladd^0,w,c
  7704   0025B0  A0D8               	btfss	status,0,c
  7705   0025B2  EFDD  F012         	goto	u3241
  7706   0025B6  EFDF  F012         	goto	u3240
  7707   0025BA                     u3241:
  7708   0025BA  EF16  F013         	goto	l1042
  7709   0025BE                     u3240:
  7710   0025BE  5005               	movf	___fladd@b^0,w,c
  7711   0025C0  1006               	iorwf	(___fladd@b+1)^0,w,c
  7712   0025C2  1007               	iorwf	(___fladd@b+2)^0,w,c
  7713   0025C4  1008               	iorwf	(___fladd@b+3)^0,w,c
  7714   0025C6  A4D8               	btfss	status,2,c
  7715   0025C8  EFE8  F012         	goto	u3251
  7716   0025CC  EFEB  F012         	goto	u3250
  7717   0025D0                     u3251:
  7718   0025D0  0E01               	movlw	1
  7719   0025D2  EFEC  F012         	goto	u3260
  7720   0025D6                     u3250:
  7721   0025D6  0E00               	movlw	0
  7722   0025D8                     u3260:
  7723   0025D8  6E14               	movwf	___fladd@grs^0,c
  7724   0025DA  0E00               	movlw	0
  7725   0025DC  6E05               	movwf	___fladd@b^0,c
  7726   0025DE  0E00               	movlw	0
  7727   0025E0  6E06               	movwf	(___fladd@b+1)^0,c
  7728   0025E2  0E00               	movlw	0
  7729   0025E4  6E07               	movwf	(___fladd@b+2)^0,c
  7730   0025E6  0E00               	movlw	0
  7731   0025E8  6E08               	movwf	(___fladd@b+3)^0,c
  7732   0025EA  C012  F013         	movff	___fladd@aexp,___fladd@bexp
  7733   0025EE  EF1F  F013         	goto	l1041
  7734   0025F2                     l1043:
  7735   0025F2  A014               	btfss	___fladd@grs^0,0,c
  7736   0025F4  EFFE  F012         	goto	u3271
  7737   0025F8  EF00  F013         	goto	u3270
  7738   0025FC                     u3271:
  7739   0025FC  EF06  F013         	goto	l3614
  7740   002600                     u3270:
  7741   002600  90D8               	bcf	status,0,c
  7742   002602  3014               	rrcf	___fladd@grs^0,w,c
  7743   002604  0901               	iorlw	1
  7744   002606  6E14               	movwf	___fladd@grs^0,c
  7745   002608  EF08  F013         	goto	l3616
  7746   00260C                     l3614:
  7747   00260C  90D8               	bcf	status,0,c
  7748   00260E  3214               	rrcf	___fladd@grs^0,f,c
  7749   002610                     l3616:
  7750   002610  A005               	btfss	___fladd@b^0,0,c
  7751   002612  EF0D  F013         	goto	u3281
  7752   002616  EF0F  F013         	goto	u3280
  7753   00261A                     u3281:
  7754   00261A  EF10  F013         	goto	l3620
  7755   00261E                     u3280:
  7756   00261E  8E14               	bsf	___fladd@grs^0,7,c
  7757   002620                     l3620:
  7758   002620  3408               	rlcf	(___fladd@b+3)^0,w,c
  7759   002622  3208               	rrcf	(___fladd@b+3)^0,f,c
  7760   002624  3207               	rrcf	(___fladd@b+2)^0,f,c
  7761   002626  3206               	rrcf	(___fladd@b+1)^0,f,c
  7762   002628  3205               	rrcf	___fladd@b^0,f,c
  7763   00262A  2A13               	incf	___fladd@bexp^0,f,c
  7764   00262C                     l1042:
  7765   00262C  5012               	movf	___fladd@aexp^0,w,c
  7766   00262E  5C13               	subwf	___fladd@bexp^0,w,c
  7767   002630  A0D8               	btfss	status,0,c
  7768   002632  EF1D  F013         	goto	u3291
  7769   002636  EF1F  F013         	goto	u3290
  7770   00263A                     u3291:
  7771   00263A  EFF9  F012         	goto	l1043
  7772   00263E                     u3290:
  7773   00263E                     l1041:
  7774   00263E  BC11               	btfsc	___fladd@signs^0,6,c
  7775   002640  EF24  F013         	goto	u3301
  7776   002644  EF26  F013         	goto	u3300
  7777   002648                     u3301:
  7778   002648  EF66  F013         	goto	l3648
  7779   00264C                     u3300:
  7780   00264C  5013               	movf	___fladd@bexp^0,w,c
  7781   00264E  A4D8               	btfss	status,2,c
  7782   002650  EF2C  F013         	goto	u3311
  7783   002654  EF2E  F013         	goto	u3310
  7784   002658                     u3311:
  7785   002658  EF38  F013         	goto	l3630
  7786   00265C                     u3310:
  7787   00265C  0E00               	movlw	0
  7788   00265E  6E05               	movwf	?___fladd^0,c
  7789   002660  0E00               	movlw	0
  7790   002662  6E06               	movwf	(?___fladd+1)^0,c
  7791   002664  0E00               	movlw	0
  7792   002666  6E07               	movwf	(?___fladd+2)^0,c
  7793   002668  0E00               	movlw	0
  7794   00266A  6E08               	movwf	(?___fladd+3)^0,c
  7795   00266C  EF87  F014         	goto	l1050
  7796   002670                     l3630:
  7797   002670  5009               	movf	___fladd@a^0,w,c
  7798   002672  2605               	addwf	___fladd@b^0,f,c
  7799   002674  500A               	movf	(___fladd@a+1)^0,w,c
  7800   002676  2206               	addwfc	(___fladd@b+1)^0,f,c
  7801   002678  500B               	movf	(___fladd@a+2)^0,w,c
  7802   00267A  2207               	addwfc	(___fladd@b+2)^0,f,c
  7803   00267C  500C               	movf	(___fladd@a+3)^0,w,c
  7804   00267E  2208               	addwfc	(___fladd@b+3)^0,f,c
  7805   002680  A008               	btfss	(___fladd@b+3)^0,0,c
  7806   002682  EF45  F013         	goto	u3321
  7807   002686  EF47  F013         	goto	u3320
  7808   00268A                     u3321:
  7809   00268A  EFF3  F013         	goto	l3684
  7810   00268E                     u3320:
  7811   00268E  A014               	btfss	___fladd@grs^0,0,c
  7812   002690  EF4C  F013         	goto	u3331
  7813   002694  EF4E  F013         	goto	u3330
  7814   002698                     u3331:
  7815   002698  EF54  F013         	goto	l3638
  7816   00269C                     u3330:
  7817   00269C  90D8               	bcf	status,0,c
  7818   00269E  3014               	rrcf	___fladd@grs^0,w,c
  7819   0026A0  0901               	iorlw	1
  7820   0026A2  6E14               	movwf	___fladd@grs^0,c
  7821   0026A4  EF56  F013         	goto	l3640
  7822   0026A8                     l3638:
  7823   0026A8  90D8               	bcf	status,0,c
  7824   0026AA  3214               	rrcf	___fladd@grs^0,f,c
  7825   0026AC                     l3640:
  7826   0026AC  A005               	btfss	___fladd@b^0,0,c
  7827   0026AE  EF5B  F013         	goto	u3341
  7828   0026B2  EF5D  F013         	goto	u3340
  7829   0026B6                     u3341:
  7830   0026B6  EF5E  F013         	goto	l3644
  7831   0026BA                     u3340:
  7832   0026BA  8E14               	bsf	___fladd@grs^0,7,c
  7833   0026BC                     l3644:
  7834   0026BC  3408               	rlcf	(___fladd@b+3)^0,w,c
  7835   0026BE  3208               	rrcf	(___fladd@b+3)^0,f,c
  7836   0026C0  3207               	rrcf	(___fladd@b+2)^0,f,c
  7837   0026C2  3206               	rrcf	(___fladd@b+1)^0,f,c
  7838   0026C4  3205               	rrcf	___fladd@b^0,f,c
  7839   0026C6  2A13               	incf	___fladd@bexp^0,f,c
  7840   0026C8  EFF3  F013         	goto	l3684
  7841   0026CC                     l3648:
  7842   0026CC  5009               	movf	___fladd@a^0,w,c
  7843   0026CE  5C05               	subwf	___fladd@b^0,w,c
  7844   0026D0  500A               	movf	(___fladd@a+1)^0,w,c
  7845   0026D2  5806               	subwfb	(___fladd@b+1)^0,w,c
  7846   0026D4  500B               	movf	(___fladd@a+2)^0,w,c
  7847   0026D6  5807               	subwfb	(___fladd@b+2)^0,w,c
  7848   0026D8  5008               	movf	(___fladd@b+3)^0,w,c
  7849   0026DA  0A80               	xorlw	128
  7850   0026DC  6E0D               	movwf	??___fladd^0,c
  7851   0026DE  500C               	movf	(___fladd@a+3)^0,w,c
  7852   0026E0  0A80               	xorlw	128
  7853   0026E2  580D               	subwfb	??___fladd^0,w,c
  7854   0026E4  B0D8               	btfsc	status,0,c
  7855   0026E6  EF77  F013         	goto	u3351
  7856   0026EA  EF79  F013         	goto	u3350
  7857   0026EE                     u3351:
  7858   0026EE  EFA4  F013         	goto	l3658
  7859   0026F2                     u3350:
  7860   0026F2  5005               	movf	___fladd@b^0,w,c
  7861   0026F4  5C09               	subwf	___fladd@a^0,w,c
  7862   0026F6  6E0D               	movwf	??___fladd^0,c
  7863   0026F8  5006               	movf	(___fladd@b+1)^0,w,c
  7864   0026FA  580A               	subwfb	(___fladd@a+1)^0,w,c
  7865   0026FC  6E0E               	movwf	(??___fladd+1)^0,c
  7866   0026FE  5007               	movf	(___fladd@b+2)^0,w,c
  7867   002700  580B               	subwfb	(___fladd@a+2)^0,w,c
  7868   002702  6E0F               	movwf	(??___fladd+2)^0,c
  7869   002704  5008               	movf	(___fladd@b+3)^0,w,c
  7870   002706  580C               	subwfb	(___fladd@a+3)^0,w,c
  7871   002708  6E10               	movwf	(??___fladd+3)^0,c
  7872   00270A  0EFF               	movlw	255
  7873   00270C  240D               	addwf	??___fladd^0,w,c
  7874   00270E  6E05               	movwf	___fladd@b^0,c
  7875   002710  0EFF               	movlw	255
  7876   002712  200E               	addwfc	(??___fladd+1)^0,w,c
  7877   002714  6E06               	movwf	(___fladd@b+1)^0,c
  7878   002716  0EFF               	movlw	255
  7879   002718  200F               	addwfc	(??___fladd+2)^0,w,c
  7880   00271A  6E07               	movwf	(___fladd@b+2)^0,c
  7881   00271C  0EFF               	movlw	255
  7882   00271E  2010               	addwfc	(??___fladd+3)^0,w,c
  7883   002720  6E08               	movwf	(___fladd@b+3)^0,c
  7884   002722  0E80               	movlw	128
  7885   002724  1A11               	xorwf	___fladd@signs^0,f,c
  7886   002726  6C14               	negf	___fladd@grs^0,c
  7887   002728  5014               	movf	___fladd@grs^0,w,c
  7888   00272A  A4D8               	btfss	status,2,c
  7889   00272C  EF9A  F013         	goto	u3361
  7890   002730  EF9C  F013         	goto	u3360
  7891   002734                     u3361:
  7892   002734  EFAC  F013         	goto	l1058
  7893   002738                     u3360:
  7894   002738  0E01               	movlw	1
  7895   00273A  2605               	addwf	___fladd@b^0,f,c
  7896   00273C  0E00               	movlw	0
  7897   00273E  2206               	addwfc	(___fladd@b+1)^0,f,c
  7898   002740  2207               	addwfc	(___fladd@b+2)^0,f,c
  7899   002742  2208               	addwfc	(___fladd@b+3)^0,f,c
  7900   002744  EFAC  F013         	goto	l1058
  7901   002748                     l3658:
  7902   002748  5009               	movf	___fladd@a^0,w,c
  7903   00274A  5E05               	subwf	___fladd@b^0,f,c
  7904   00274C  500A               	movf	(___fladd@a+1)^0,w,c
  7905   00274E  5A06               	subwfb	(___fladd@b+1)^0,f,c
  7906   002750  500B               	movf	(___fladd@a+2)^0,w,c
  7907   002752  5A07               	subwfb	(___fladd@b+2)^0,f,c
  7908   002754  500C               	movf	(___fladd@a+3)^0,w,c
  7909   002756  5A08               	subwfb	(___fladd@b+3)^0,f,c
  7910   002758                     l1058:
  7911   002758  5005               	movf	___fladd@b^0,w,c
  7912   00275A  1006               	iorwf	(___fladd@b+1)^0,w,c
  7913   00275C  1007               	iorwf	(___fladd@b+2)^0,w,c
  7914   00275E  1008               	iorwf	(___fladd@b+3)^0,w,c
  7915   002760  A4D8               	btfss	status,2,c
  7916   002762  EFB5  F013         	goto	u3371
  7917   002766  EFB7  F013         	goto	u3370
  7918   00276A                     u3371:
  7919   00276A  EFEC  F013         	goto	l3682
  7920   00276E                     u3370:
  7921   00276E  5014               	movf	___fladd@grs^0,w,c
  7922   002770  A4D8               	btfss	status,2,c
  7923   002772  EFBD  F013         	goto	u3381
  7924   002776  EFBF  F013         	goto	u3380
  7925   00277A                     u3381:
  7926   00277A  EFEC  F013         	goto	l3682
  7927   00277E                     u3380:
  7928   00277E  0E00               	movlw	0
  7929   002780  6E05               	movwf	?___fladd^0,c
  7930   002782  0E00               	movlw	0
  7931   002784  6E06               	movwf	(?___fladd+1)^0,c
  7932   002786  0E00               	movlw	0
  7933   002788  6E07               	movwf	(?___fladd+2)^0,c
  7934   00278A  0E00               	movlw	0
  7935   00278C  6E08               	movwf	(?___fladd+3)^0,c
  7936   00278E  EF87  F014         	goto	l1050
  7937   002792                     l3666:
  7938   002792  90D8               	bcf	status,0,c
  7939   002794  3605               	rlcf	___fladd@b^0,f,c
  7940   002796  3606               	rlcf	(___fladd@b+1)^0,f,c
  7941   002798  3607               	rlcf	(___fladd@b+2)^0,f,c
  7942   00279A  3608               	rlcf	(___fladd@b+3)^0,f,c
  7943   00279C  AE14               	btfss	___fladd@grs^0,7,c
  7944   00279E  EFD3  F013         	goto	u3391
  7945   0027A2  EFD5  F013         	goto	u3390
  7946   0027A6                     u3391:
  7947   0027A6  EFD6  F013         	goto	l3672
  7948   0027AA                     u3390:
  7949   0027AA  8005               	bsf	___fladd@b^0,0,c
  7950   0027AC                     l3672:
  7951   0027AC  A014               	btfss	___fladd@grs^0,0,c
  7952   0027AE  EFDB  F013         	goto	u3401
  7953   0027B2  EFDD  F013         	goto	u3400
  7954   0027B6                     u3401:
  7955   0027B6  EFE1  F013         	goto	l3676
  7956   0027BA                     u3400:
  7957   0027BA  80D8               	bsf	status,0,c
  7958   0027BC  3614               	rlcf	___fladd@grs^0,f,c
  7959   0027BE  EFE3  F013         	goto	l3678
  7960   0027C2                     l3676:
  7961   0027C2  90D8               	bcf	status,0,c
  7962   0027C4  3614               	rlcf	___fladd@grs^0,f,c
  7963   0027C6                     l3678:
  7964   0027C6  5013               	movf	___fladd@bexp^0,w,c
  7965   0027C8  B4D8               	btfsc	status,2,c
  7966   0027CA  EFE9  F013         	goto	u3411
  7967   0027CE  EFEB  F013         	goto	u3410
  7968   0027D2                     u3411:
  7969   0027D2  EFEC  F013         	goto	l3682
  7970   0027D6                     u3410:
  7971   0027D6  0613               	decf	___fladd@bexp^0,f,c
  7972   0027D8                     l3682:
  7973   0027D8  AE07               	btfss	(___fladd@b+2)^0,7,c
  7974   0027DA  EFF1  F013         	goto	u3421
  7975   0027DE  EFF3  F013         	goto	u3420
  7976   0027E2                     u3421:
  7977   0027E2  EFC9  F013         	goto	l3666
  7978   0027E6                     u3420:
  7979   0027E6                     l3684:
  7980   0027E6  0E00               	movlw	0
  7981   0027E8  6E12               	movwf	___fladd@aexp^0,c
  7982   0027EA  AE14               	btfss	___fladd@grs^0,7,c
  7983   0027EC  EFFA  F013         	goto	u3431
  7984   0027F0  EFFC  F013         	goto	u3430
  7985   0027F4                     u3431:
  7986   0027F4  EF14  F014         	goto	l1067
  7987   0027F8                     u3430:
  7988   0027F8  C014  F00D         	movff	___fladd@grs,??___fladd
  7989   0027FC  0E7F               	movlw	127
  7990   0027FE  160D               	andwf	??___fladd^0,f,c
  7991   002800  B4D8               	btfsc	status,2,c
  7992   002802  EF05  F014         	goto	u3441
  7993   002806  EF07  F014         	goto	u3440
  7994   00280A                     u3441:
  7995   00280A  EF0B  F014         	goto	l1068
  7996   00280E                     u3440:
  7997   00280E                     l3690:
  7998   00280E  0E01               	movlw	1
  7999   002810  6E12               	movwf	___fladd@aexp^0,c
  8000   002812  EF14  F014         	goto	l1067
  8001   002816                     l1068:
  8002   002816  A005               	btfss	___fladd@b^0,0,c
  8003   002818  EF10  F014         	goto	u3451
  8004   00281C  EF12  F014         	goto	u3450
  8005   002820                     u3451:
  8006   002820  EF14  F014         	goto	l1067
  8007   002824                     u3450:
  8008   002824  EF07  F014         	goto	l3690
  8009   002828                     l1067:
  8010   002828  5012               	movf	___fladd@aexp^0,w,c
  8011   00282A  B4D8               	btfsc	status,2,c
  8012   00282C  EF1A  F014         	goto	u3461
  8013   002830  EF1C  F014         	goto	u3460
  8014   002834                     u3461:
  8015   002834  EF47  F014         	goto	l3702
  8016   002838                     u3460:
  8017   002838  0E01               	movlw	1
  8018   00283A  2605               	addwf	___fladd@b^0,f,c
  8019   00283C  0E00               	movlw	0
  8020   00283E  2206               	addwfc	(___fladd@b+1)^0,f,c
  8021   002840  2207               	addwfc	(___fladd@b+2)^0,f,c
  8022   002842  2208               	addwfc	(___fladd@b+3)^0,f,c
  8023   002844  A008               	btfss	(___fladd@b+3)^0,0,c
  8024   002846  EF27  F014         	goto	u3471
  8025   00284A  EF29  F014         	goto	u3470
  8026   00284E                     u3471:
  8027   00284E  EF47  F014         	goto	l3702
  8028   002852                     u3470:
  8029   002852  C005  F00D         	movff	___fladd@b,??___fladd
  8030   002856  C006  F00E         	movff	___fladd@b+1,??___fladd+1
  8031   00285A  C007  F00F         	movff	___fladd@b+2,??___fladd+2
  8032   00285E  C008  F010         	movff	___fladd@b+3,??___fladd+3
  8033   002862  3410               	rlcf	(??___fladd+3)^0,w,c
  8034   002864  3210               	rrcf	(??___fladd+3)^0,f,c
  8035   002866  320F               	rrcf	(??___fladd+2)^0,f,c
  8036   002868  320E               	rrcf	(??___fladd+1)^0,f,c
  8037   00286A  320D               	rrcf	??___fladd^0,f,c
  8038   00286C  C00D  F005         	movff	??___fladd,___fladd@b
  8039   002870  C00E  F006         	movff	??___fladd+1,___fladd@b+1
  8040   002874  C00F  F007         	movff	??___fladd+2,___fladd@b+2
  8041   002878  C010  F008         	movff	??___fladd+3,___fladd@b+3
  8042   00287C  2813               	incf	___fladd@bexp^0,w,c
  8043   00287E  B4D8               	btfsc	status,2,c
  8044   002880  EF44  F014         	goto	u3481
  8045   002884  EF46  F014         	goto	u3480
  8046   002888                     u3481:
  8047   002888  EF47  F014         	goto	l3702
  8048   00288C                     u3480:
  8049   00288C  2A13               	incf	___fladd@bexp^0,f,c
  8050   00288E                     l3702:
  8051   00288E  2813               	incf	___fladd@bexp^0,w,c
  8052   002890  B4D8               	btfsc	status,2,c
  8053   002892  EF4D  F014         	goto	u3491
  8054   002896  EF4F  F014         	goto	u3490
  8055   00289A                     u3491:
  8056   00289A  EF57  F014         	goto	l3706
  8057   00289E                     u3490:
  8058   00289E  5013               	movf	___fladd@bexp^0,w,c
  8059   0028A0  A4D8               	btfss	status,2,c
  8060   0028A2  EF55  F014         	goto	u3501
  8061   0028A6  EF57  F014         	goto	u3500
  8062   0028AA                     u3501:
  8063   0028AA  EF69  F014         	goto	l3710
  8064   0028AE                     u3500:
  8065   0028AE                     l3706:
  8066   0028AE  0E00               	movlw	0
  8067   0028B0  6E05               	movwf	___fladd@b^0,c
  8068   0028B2  0E00               	movlw	0
  8069   0028B4  6E06               	movwf	(___fladd@b+1)^0,c
  8070   0028B6  0E00               	movlw	0
  8071   0028B8  6E07               	movwf	(___fladd@b+2)^0,c
  8072   0028BA  0E00               	movlw	0
  8073   0028BC  6E08               	movwf	(___fladd@b+3)^0,c
  8074   0028BE  5013               	movf	___fladd@bexp^0,w,c
  8075   0028C0  A4D8               	btfss	status,2,c
  8076   0028C2  EF65  F014         	goto	u3511
  8077   0028C6  EF67  F014         	goto	u3510
  8078   0028CA                     u3511:
  8079   0028CA  EF69  F014         	goto	l3710
  8080   0028CE                     u3510:
  8081   0028CE  0E00               	movlw	0
  8082   0028D0  6E11               	movwf	___fladd@signs^0,c
  8083   0028D2                     l3710:
  8084   0028D2  A013               	btfss	___fladd@bexp^0,0,c
  8085   0028D4  EF6E  F014         	goto	u3521
  8086   0028D8  EF70  F014         	goto	u3520
  8087   0028DC                     u3521:
  8088   0028DC  EF73  F014         	goto	l3714
  8089   0028E0                     u3520:
  8090   0028E0  8E07               	bsf	(___fladd@b+2)^0,7,c
  8091   0028E2  EF74  F014         	goto	l3716
  8092   0028E6                     l3714:
  8093   0028E6  9E07               	bcf	(___fladd@b+2)^0,7,c
  8094   0028E8                     l3716:
  8095   0028E8  90D8               	bcf	status,0,c
  8096   0028EA  3013               	rrcf	___fladd@bexp^0,w,c
  8097   0028EC  6E08               	movwf	(___fladd@b+3)^0,c
  8098   0028EE  AE11               	btfss	___fladd@signs^0,7,c
  8099   0028F0  EF7C  F014         	goto	u3531
  8100   0028F4  EF7E  F014         	goto	u3530
  8101   0028F8                     u3531:
  8102   0028F8  EF7F  F014         	goto	l3722
  8103   0028FC                     u3530:
  8104   0028FC  8E08               	bsf	(___fladd@b+3)^0,7,c
  8105   0028FE                     l3722:
  8106   0028FE  C005  F005         	movff	___fladd@b,?___fladd
  8107   002902  C006  F006         	movff	___fladd@b+1,?___fladd+1
  8108   002906  C007  F007         	movff	___fladd@b+2,?___fladd+2
  8109   00290A  C008  F008         	movff	___fladd@b+3,?___fladd+3
  8110   00290E                     l1050:
  8111   00290E  0012               	return		;funcret
  8112   002910                     __end_of___fladd:
  8113                           	callstack 0
  8114                           
  8115 ;; *************** function ___flneg *****************
  8116 ;; Defined at:
  8117 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\flneg.c"
  8118 ;; Parameters:    Size  Location     Type
  8119 ;;  f1              4    4[COMRAM] unsigned char 
  8120 ;; Auto vars:     Size  Location     Type
  8121 ;;		None
  8122 ;; Return value:  Size  Location     Type
  8123 ;;                  4    4[COMRAM] unsigned char 
  8124 ;; Registers used:
  8125 ;;		wreg, status,2, status,0
  8126 ;; Tracked objects:
  8127 ;;		On entry : 0/0
  8128 ;;		On exit  : 0/0
  8129 ;;		Unchanged: 0/0
  8130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8131 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8132 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8134 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8135 ;;Total ram usage:        4 bytes
  8136 ;; Hardware stack levels used: 1
  8137 ;; Hardware stack levels required when called: 2
  8138 ;; This function calls:
  8139 ;;		Nothing
  8140 ;; This function is called by:
  8141 ;;		_efgtoa
  8142 ;; This function uses a non-reentrant model
  8143 ;;
  8144                           
  8145                           	psect	text25
  8146   0058DA                     __ptext25:
  8147                           	callstack 0
  8148   0058DA                     ___flneg:
  8149                           	callstack 23
  8150   0058DA  5005               	movf	___flneg@f1^0,w,c
  8151   0058DC  1006               	iorwf	(___flneg@f1+1)^0,w,c
  8152   0058DE  1007               	iorwf	(___flneg@f1+2)^0,w,c
  8153   0058E0  1008               	iorwf	(___flneg@f1+3)^0,w,c
  8154   0058E2  B4D8               	btfsc	status,2,c
  8155   0058E4  EF76  F02C         	goto	u4181
  8156   0058E8  EF78  F02C         	goto	u4180
  8157   0058EC                     u4181:
  8158   0058EC  EF80  F02C         	goto	l4136
  8159   0058F0                     u4180:
  8160   0058F0  0E00               	movlw	0
  8161   0058F2  1A05               	xorwf	___flneg@f1^0,f,c
  8162   0058F4  0E00               	movlw	0
  8163   0058F6  1A06               	xorwf	(___flneg@f1+1)^0,f,c
  8164   0058F8  0E00               	movlw	0
  8165   0058FA  1A07               	xorwf	(___flneg@f1+2)^0,f,c
  8166   0058FC  0E80               	movlw	128
  8167   0058FE  1A08               	xorwf	(___flneg@f1+3)^0,f,c
  8168   005900                     l4136:
  8169   005900  C005  F005         	movff	___flneg@f1,?___flneg
  8170   005904  C006  F006         	movff	___flneg@f1+1,?___flneg+1
  8171   005908  C007  F007         	movff	___flneg@f1+2,?___flneg+2
  8172   00590C  C008  F008         	movff	___flneg@f1+3,?___flneg+3
  8173   005910  0012               	return		;funcret
  8174   005912                     __end_of___flneg:
  8175                           	callstack 0
  8176                           
  8177 ;; *************** function ___flmul *****************
  8178 ;; Defined at:
  8179 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\sprcmul.c"
  8180 ;; Parameters:    Size  Location     Type
  8181 ;;  b               4   28[COMRAM] unsigned char 
  8182 ;;  a               4   32[COMRAM] unsigned char 
  8183 ;; Auto vars:     Size  Location     Type
  8184 ;;  prod            4   47[COMRAM] struct .
  8185 ;;  grs             4   41[COMRAM] unsigned long 
  8186 ;;  temp            2   51[COMRAM] struct .
  8187 ;;  bexp            1   46[COMRAM] unsigned char 
  8188 ;;  aexp            1   45[COMRAM] unsigned char 
  8189 ;;  sign            1   40[COMRAM] unsigned char 
  8190 ;; Return value:  Size  Location     Type
  8191 ;;                  4   28[COMRAM] unsigned char 
  8192 ;; Registers used:
  8193 ;;		wreg, status,2, status,0, prodl, prodh
  8194 ;; Tracked objects:
  8195 ;;		On entry : 0/0
  8196 ;;		On exit  : 0/0
  8197 ;;		Unchanged: 0/0
  8198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8199 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8200 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8201 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8202 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8203 ;;Total ram usage:       25 bytes
  8204 ;; Hardware stack levels used: 1
  8205 ;; Hardware stack levels required when called: 2
  8206 ;; This function calls:
  8207 ;;		Nothing
  8208 ;; This function is called by:
  8209 ;;		_colorDetect
  8210 ;;		_turnRight
  8211 ;;		_turnLeft_90
  8212 ;;		_turnRight_90
  8213 ;;		_turnRight_135
  8214 ;;		_turnLeft_135
  8215 ;;		_reverseSquareRight
  8216 ;;		_reverseSquareLeft
  8217 ;;		_efgtoa
  8218 ;;		_turnLeft
  8219 ;; This function uses a non-reentrant model
  8220 ;;
  8221                           
  8222                           	psect	text26
  8223   002910                     __ptext26:
  8224                           	callstack 0
  8225   002910                     ___flmul:
  8226                           	callstack 23
  8227   002910  5020               	movf	(___flmul@b+3)^0,w,c
  8228   002912  0B80               	andlw	128
  8229   002914  6E29               	movwf	___flmul@sign^0,c
  8230   002916  5020               	movf	(___flmul@b+3)^0,w,c
  8231   002918  2420               	addwf	(___flmul@b+3)^0,w,c
  8232   00291A  6E2F               	movwf	___flmul@bexp^0,c
  8233   00291C  AE1F               	btfss	(___flmul@b+2)^0,7,c
  8234   00291E  EF93  F014         	goto	u3911
  8235   002922  EF95  F014         	goto	u3910
  8236   002926                     u3911:
  8237   002926  EF96  F014         	goto	l3964
  8238   00292A                     u3910:
  8239   00292A  802F               	bsf	___flmul@bexp^0,0,c
  8240   00292C                     l3964:
  8241   00292C  502F               	movf	___flmul@bexp^0,w,c
  8242   00292E  B4D8               	btfsc	status,2,c
  8243   002930  EF9C  F014         	goto	u3921
  8244   002934  EF9E  F014         	goto	u3920
  8245   002938                     u3921:
  8246   002938  EFB1  F014         	goto	l3972
  8247   00293C                     u3920:
  8248   00293C  282F               	incf	___flmul@bexp^0,w,c
  8249   00293E  A4D8               	btfss	status,2,c
  8250   002940  EFA4  F014         	goto	u3931
  8251   002944  EFA6  F014         	goto	u3930
  8252   002948                     u3931:
  8253   002948  EFAE  F014         	goto	l3970
  8254   00294C                     u3930:
  8255   00294C  0E00               	movlw	0
  8256   00294E  6E1D               	movwf	___flmul@b^0,c
  8257   002950  0E00               	movlw	0
  8258   002952  6E1E               	movwf	(___flmul@b+1)^0,c
  8259   002954  0E00               	movlw	0
  8260   002956  6E1F               	movwf	(___flmul@b+2)^0,c
  8261   002958  0E00               	movlw	0
  8262   00295A  6E20               	movwf	(___flmul@b+3)^0,c
  8263   00295C                     l3970:
  8264   00295C  8E1F               	bsf	(___flmul@b+2)^0,7,c
  8265   00295E  EFB9  F014         	goto	l3974
  8266   002962                     l3972:
  8267   002962  0E00               	movlw	0
  8268   002964  6E1D               	movwf	___flmul@b^0,c
  8269   002966  0E00               	movlw	0
  8270   002968  6E1E               	movwf	(___flmul@b+1)^0,c
  8271   00296A  0E00               	movlw	0
  8272   00296C  6E1F               	movwf	(___flmul@b+2)^0,c
  8273   00296E  0E00               	movlw	0
  8274   002970  6E20               	movwf	(___flmul@b+3)^0,c
  8275   002972                     l3974:
  8276   002972  5024               	movf	(___flmul@a+3)^0,w,c
  8277   002974  0B80               	andlw	128
  8278   002976  1A29               	xorwf	___flmul@sign^0,f,c
  8279   002978  5024               	movf	(___flmul@a+3)^0,w,c
  8280   00297A  2424               	addwf	(___flmul@a+3)^0,w,c
  8281   00297C  6E2E               	movwf	___flmul@aexp^0,c
  8282   00297E  AE23               	btfss	(___flmul@a+2)^0,7,c
  8283   002980  EFC4  F014         	goto	u3941
  8284   002984  EFC6  F014         	goto	u3940
  8285   002988                     u3941:
  8286   002988  EFC7  F014         	goto	l3982
  8287   00298C                     u3940:
  8288   00298C  802E               	bsf	___flmul@aexp^0,0,c
  8289   00298E                     l3982:
  8290   00298E  502E               	movf	___flmul@aexp^0,w,c
  8291   002990  B4D8               	btfsc	status,2,c
  8292   002992  EFCD  F014         	goto	u3951
  8293   002996  EFCF  F014         	goto	u3950
  8294   00299A                     u3951:
  8295   00299A  EFE2  F014         	goto	l3990
  8296   00299E                     u3950:
  8297   00299E  282E               	incf	___flmul@aexp^0,w,c
  8298   0029A0  A4D8               	btfss	status,2,c
  8299   0029A2  EFD5  F014         	goto	u3961
  8300   0029A6  EFD7  F014         	goto	u3960
  8301   0029AA                     u3961:
  8302   0029AA  EFDF  F014         	goto	l3988
  8303   0029AE                     u3960:
  8304   0029AE  0E00               	movlw	0
  8305   0029B0  6E21               	movwf	___flmul@a^0,c
  8306   0029B2  0E00               	movlw	0
  8307   0029B4  6E22               	movwf	(___flmul@a+1)^0,c
  8308   0029B6  0E00               	movlw	0
  8309   0029B8  6E23               	movwf	(___flmul@a+2)^0,c
  8310   0029BA  0E00               	movlw	0
  8311   0029BC  6E24               	movwf	(___flmul@a+3)^0,c
  8312   0029BE                     l3988:
  8313   0029BE  8E23               	bsf	(___flmul@a+2)^0,7,c
  8314   0029C0  EFEA  F014         	goto	l1127
  8315   0029C4                     l3990:
  8316   0029C4  0E00               	movlw	0
  8317   0029C6  6E21               	movwf	___flmul@a^0,c
  8318   0029C8  0E00               	movlw	0
  8319   0029CA  6E22               	movwf	(___flmul@a+1)^0,c
  8320   0029CC  0E00               	movlw	0
  8321   0029CE  6E23               	movwf	(___flmul@a+2)^0,c
  8322   0029D0  0E00               	movlw	0
  8323   0029D2  6E24               	movwf	(___flmul@a+3)^0,c
  8324   0029D4                     l1127:
  8325   0029D4  502E               	movf	___flmul@aexp^0,w,c
  8326   0029D6  B4D8               	btfsc	status,2,c
  8327   0029D8  EFF0  F014         	goto	u3971
  8328   0029DC  EFF2  F014         	goto	u3970
  8329   0029E0                     u3971:
  8330   0029E0  EFFA  F014         	goto	l3994
  8331   0029E4                     u3970:
  8332   0029E4  502F               	movf	___flmul@bexp^0,w,c
  8333   0029E6  A4D8               	btfss	status,2,c
  8334   0029E8  EFF8  F014         	goto	u3981
  8335   0029EC  EFFA  F014         	goto	u3980
  8336   0029F0                     u3981:
  8337   0029F0  EF04  F015         	goto	l3998
  8338   0029F4                     u3980:
  8339   0029F4                     l3994:
  8340   0029F4  0E00               	movlw	0
  8341   0029F6  6E1D               	movwf	?___flmul^0,c
  8342   0029F8  0E00               	movlw	0
  8343   0029FA  6E1E               	movwf	(?___flmul+1)^0,c
  8344   0029FC  0E00               	movlw	0
  8345   0029FE  6E1F               	movwf	(?___flmul+2)^0,c
  8346   002A00  0E00               	movlw	0
  8347   002A02  6E20               	movwf	(?___flmul+3)^0,c
  8348   002A04  EF9C  F016         	goto	l1131
  8349   002A08                     l3998:
  8350   002A08  5023               	movf	(___flmul@a+2)^0,w,c
  8351   002A0A  021D               	mulwf	___flmul@b^0,c
  8352   002A0C  CFF3 F034          	movff	prodl,___flmul@temp
  8353   002A10  CFF4 F035          	movff	prodh,___flmul@temp+1
  8354   002A14  5034               	movf	___flmul@temp^0,w,c
  8355   002A16  6E2A               	movwf	___flmul@grs^0,c
  8356   002A18  6A2B               	clrf	(___flmul@grs+1)^0,c
  8357   002A1A  6A2C               	clrf	(___flmul@grs+2)^0,c
  8358   002A1C  6A2D               	clrf	(___flmul@grs+3)^0,c
  8359   002A1E  5035               	movf	(___flmul@temp+1)^0,w,c
  8360   002A20  6E30               	movwf	___flmul@prod^0,c
  8361   002A22  6A31               	clrf	(___flmul@prod+1)^0,c
  8362   002A24  6A32               	clrf	(___flmul@prod+2)^0,c
  8363   002A26  6A33               	clrf	(___flmul@prod+3)^0,c
  8364   002A28  5022               	movf	(___flmul@a+1)^0,w,c
  8365   002A2A  021E               	mulwf	(___flmul@b+1)^0,c
  8366   002A2C  CFF3 F034          	movff	prodl,___flmul@temp
  8367   002A30  CFF4 F035          	movff	prodh,___flmul@temp+1
  8368   002A34  5034               	movf	___flmul@temp^0,w,c
  8369   002A36  262A               	addwf	___flmul@grs^0,f,c
  8370   002A38  0E00               	movlw	0
  8371   002A3A  222B               	addwfc	(___flmul@grs+1)^0,f,c
  8372   002A3C  222C               	addwfc	(___flmul@grs+2)^0,f,c
  8373   002A3E  222D               	addwfc	(___flmul@grs+3)^0,f,c
  8374   002A40  5035               	movf	(___flmul@temp+1)^0,w,c
  8375   002A42  2630               	addwf	___flmul@prod^0,f,c
  8376   002A44  0E00               	movlw	0
  8377   002A46  2231               	addwfc	(___flmul@prod+1)^0,f,c
  8378   002A48  2232               	addwfc	(___flmul@prod+2)^0,f,c
  8379   002A4A  2233               	addwfc	(___flmul@prod+3)^0,f,c
  8380   002A4C  5021               	movf	___flmul@a^0,w,c
  8381   002A4E  021F               	mulwf	(___flmul@b+2)^0,c
  8382   002A50  CFF3 F034          	movff	prodl,___flmul@temp
  8383   002A54  CFF4 F035          	movff	prodh,___flmul@temp+1
  8384   002A58  5034               	movf	___flmul@temp^0,w,c
  8385   002A5A  262A               	addwf	___flmul@grs^0,f,c
  8386   002A5C  0E00               	movlw	0
  8387   002A5E  222B               	addwfc	(___flmul@grs+1)^0,f,c
  8388   002A60  222C               	addwfc	(___flmul@grs+2)^0,f,c
  8389   002A62  222D               	addwfc	(___flmul@grs+3)^0,f,c
  8390   002A64  5035               	movf	(___flmul@temp+1)^0,w,c
  8391   002A66  2630               	addwf	___flmul@prod^0,f,c
  8392   002A68  0E00               	movlw	0
  8393   002A6A  2231               	addwfc	(___flmul@prod+1)^0,f,c
  8394   002A6C  2232               	addwfc	(___flmul@prod+2)^0,f,c
  8395   002A6E  2233               	addwfc	(___flmul@prod+3)^0,f,c
  8396   002A70  C02C  F02D         	movff	___flmul@grs+2,___flmul@grs+3
  8397   002A74  C02B  F02C         	movff	___flmul@grs+1,___flmul@grs+2
  8398   002A78  C02A  F02B         	movff	___flmul@grs,___flmul@grs+1
  8399   002A7C  6A2A               	clrf	___flmul@grs^0,c
  8400   002A7E  5021               	movf	___flmul@a^0,w,c
  8401   002A80  021E               	mulwf	(___flmul@b+1)^0,c
  8402   002A82  CFF3 F034          	movff	prodl,___flmul@temp
  8403   002A86  CFF4 F035          	movff	prodh,___flmul@temp+1
  8404   002A8A  5034               	movf	___flmul@temp^0,w,c
  8405   002A8C  262A               	addwf	___flmul@grs^0,f,c
  8406   002A8E  5035               	movf	(___flmul@temp+1)^0,w,c
  8407   002A90  222B               	addwfc	(___flmul@grs+1)^0,f,c
  8408   002A92  0E00               	movlw	0
  8409   002A94  222C               	addwfc	(___flmul@grs+2)^0,f,c
  8410   002A96  0E00               	movlw	0
  8411   002A98  222D               	addwfc	(___flmul@grs+3)^0,f,c
  8412   002A9A  5022               	movf	(___flmul@a+1)^0,w,c
  8413   002A9C  021D               	mulwf	___flmul@b^0,c
  8414   002A9E  CFF3 F034          	movff	prodl,___flmul@temp
  8415   002AA2  CFF4 F035          	movff	prodh,___flmul@temp+1
  8416   002AA6  5034               	movf	___flmul@temp^0,w,c
  8417   002AA8  262A               	addwf	___flmul@grs^0,f,c
  8418   002AAA  5035               	movf	(___flmul@temp+1)^0,w,c
  8419   002AAC  222B               	addwfc	(___flmul@grs+1)^0,f,c
  8420   002AAE  0E00               	movlw	0
  8421   002AB0  222C               	addwfc	(___flmul@grs+2)^0,f,c
  8422   002AB2  0E00               	movlw	0
  8423   002AB4  222D               	addwfc	(___flmul@grs+3)^0,f,c
  8424   002AB6  C02C  F02D         	movff	___flmul@grs+2,___flmul@grs+3
  8425   002ABA  C02B  F02C         	movff	___flmul@grs+1,___flmul@grs+2
  8426   002ABE  C02A  F02B         	movff	___flmul@grs,___flmul@grs+1
  8427   002AC2  6A2A               	clrf	___flmul@grs^0,c
  8428   002AC4  5021               	movf	___flmul@a^0,w,c
  8429   002AC6  021D               	mulwf	___flmul@b^0,c
  8430   002AC8  CFF3 F034          	movff	prodl,___flmul@temp
  8431   002ACC  CFF4 F035          	movff	prodh,___flmul@temp+1
  8432   002AD0  5034               	movf	___flmul@temp^0,w,c
  8433   002AD2  262A               	addwf	___flmul@grs^0,f,c
  8434   002AD4  5035               	movf	(___flmul@temp+1)^0,w,c
  8435   002AD6  222B               	addwfc	(___flmul@grs+1)^0,f,c
  8436   002AD8  0E00               	movlw	0
  8437   002ADA  222C               	addwfc	(___flmul@grs+2)^0,f,c
  8438   002ADC  0E00               	movlw	0
  8439   002ADE  222D               	addwfc	(___flmul@grs+3)^0,f,c
  8440   002AE0  5023               	movf	(___flmul@a+2)^0,w,c
  8441   002AE2  021E               	mulwf	(___flmul@b+1)^0,c
  8442   002AE4  CFF3 F034          	movff	prodl,___flmul@temp
  8443   002AE8  CFF4 F035          	movff	prodh,___flmul@temp+1
  8444   002AEC  5034               	movf	___flmul@temp^0,w,c
  8445   002AEE  2630               	addwf	___flmul@prod^0,f,c
  8446   002AF0  5035               	movf	(___flmul@temp+1)^0,w,c
  8447   002AF2  2231               	addwfc	(___flmul@prod+1)^0,f,c
  8448   002AF4  0E00               	movlw	0
  8449   002AF6  2232               	addwfc	(___flmul@prod+2)^0,f,c
  8450   002AF8  0E00               	movlw	0
  8451   002AFA  2233               	addwfc	(___flmul@prod+3)^0,f,c
  8452   002AFC  5022               	movf	(___flmul@a+1)^0,w,c
  8453   002AFE  021F               	mulwf	(___flmul@b+2)^0,c
  8454   002B00  CFF3 F034          	movff	prodl,___flmul@temp
  8455   002B04  CFF4 F035          	movff	prodh,___flmul@temp+1
  8456   002B08  5034               	movf	___flmul@temp^0,w,c
  8457   002B0A  2630               	addwf	___flmul@prod^0,f,c
  8458   002B0C  5035               	movf	(___flmul@temp+1)^0,w,c
  8459   002B0E  2231               	addwfc	(___flmul@prod+1)^0,f,c
  8460   002B10  0E00               	movlw	0
  8461   002B12  2232               	addwfc	(___flmul@prod+2)^0,f,c
  8462   002B14  0E00               	movlw	0
  8463   002B16  2233               	addwfc	(___flmul@prod+3)^0,f,c
  8464   002B18  5023               	movf	(___flmul@a+2)^0,w,c
  8465   002B1A  021F               	mulwf	(___flmul@b+2)^0,c
  8466   002B1C  CFF3 F034          	movff	prodl,___flmul@temp
  8467   002B20  CFF4 F035          	movff	prodh,___flmul@temp+1
  8468   002B24  5034               	movf	___flmul@temp^0,w,c
  8469   002B26  6E25               	movwf	??___flmul^0,c
  8470   002B28  5035               	movf	(___flmul@temp+1)^0,w,c
  8471   002B2A  6E26               	movwf	(??___flmul+1)^0,c
  8472   002B2C  6A27               	clrf	(??___flmul+2)^0,c
  8473   002B2E  6A28               	clrf	(??___flmul+3)^0,c
  8474   002B30  C027  F028         	movff	??___flmul+2,??___flmul+3
  8475   002B34  C026  F027         	movff	??___flmul+1,??___flmul+2
  8476   002B38  C025  F026         	movff	??___flmul,??___flmul+1
  8477   002B3C  6A25               	clrf	??___flmul^0,c
  8478   002B3E  5025               	movf	??___flmul^0,w,c
  8479   002B40  2630               	addwf	___flmul@prod^0,f,c
  8480   002B42  5026               	movf	(??___flmul+1)^0,w,c
  8481   002B44  2231               	addwfc	(___flmul@prod+1)^0,f,c
  8482   002B46  5027               	movf	(??___flmul+2)^0,w,c
  8483   002B48  2232               	addwfc	(___flmul@prod+2)^0,f,c
  8484   002B4A  5028               	movf	(??___flmul+3)^0,w,c
  8485   002B4C  2233               	addwfc	(___flmul@prod+3)^0,f,c
  8486   002B4E  C02A  F025         	movff	___flmul@grs,??___flmul
  8487   002B52  C02B  F026         	movff	___flmul@grs+1,??___flmul+1
  8488   002B56  C02C  F027         	movff	___flmul@grs+2,??___flmul+2
  8489   002B5A  C02D  F028         	movff	___flmul@grs+3,??___flmul+3
  8490   002B5E  0E19               	movlw	25
  8491   002B60  EFB7  F015         	goto	u3990
  8492   002B64                     u3995:
  8493   002B64  90D8               	bcf	status,0,c
  8494   002B66  3228               	rrcf	(??___flmul+3)^0,f,c
  8495   002B68  3227               	rrcf	(??___flmul+2)^0,f,c
  8496   002B6A  3226               	rrcf	(??___flmul+1)^0,f,c
  8497   002B6C  3225               	rrcf	??___flmul^0,f,c
  8498   002B6E                     u3990:
  8499   002B6E  2EE8               	decfsz	wreg,f,c
  8500   002B70  EFB2  F015         	goto	u3995
  8501   002B74  5025               	movf	??___flmul^0,w,c
  8502   002B76  2630               	addwf	___flmul@prod^0,f,c
  8503   002B78  5026               	movf	(??___flmul+1)^0,w,c
  8504   002B7A  2231               	addwfc	(___flmul@prod+1)^0,f,c
  8505   002B7C  5027               	movf	(??___flmul+2)^0,w,c
  8506   002B7E  2232               	addwfc	(___flmul@prod+2)^0,f,c
  8507   002B80  5028               	movf	(??___flmul+3)^0,w,c
  8508   002B82  2233               	addwfc	(___flmul@prod+3)^0,f,c
  8509   002B84  C02C  F02D         	movff	___flmul@grs+2,___flmul@grs+3
  8510   002B88  C02B  F02C         	movff	___flmul@grs+1,___flmul@grs+2
  8511   002B8C  C02A  F02B         	movff	___flmul@grs,___flmul@grs+1
  8512   002B90  6A2A               	clrf	___flmul@grs^0,c
  8513   002B92  502E               	movf	___flmul@aexp^0,w,c
  8514   002B94  C02F  F025         	movff	___flmul@bexp,??___flmul
  8515   002B98  6A26               	clrf	(??___flmul+1)^0,c
  8516   002B9A  2625               	addwf	??___flmul^0,f,c
  8517   002B9C  0E00               	movlw	0
  8518   002B9E  2226               	addwfc	(??___flmul+1)^0,f,c
  8519   002BA0  0E82               	movlw	130
  8520   002BA2  2425               	addwf	??___flmul^0,w,c
  8521   002BA4  6E34               	movwf	___flmul@temp^0,c
  8522   002BA6  0EFF               	movlw	255
  8523   002BA8  2026               	addwfc	(??___flmul+1)^0,w,c
  8524   002BAA  6E35               	movwf	(___flmul@temp+1)^0,c
  8525   002BAC  EFED  F015         	goto	l4046
  8526   002BB0                     l4040:
  8527   002BB0  90D8               	bcf	status,0,c
  8528   002BB2  3630               	rlcf	___flmul@prod^0,f,c
  8529   002BB4  3631               	rlcf	(___flmul@prod+1)^0,f,c
  8530   002BB6  3632               	rlcf	(___flmul@prod+2)^0,f,c
  8531   002BB8  3633               	rlcf	(___flmul@prod+3)^0,f,c
  8532   002BBA  AE2D               	btfss	(___flmul@grs+3)^0,7,c
  8533   002BBC  EFE2  F015         	goto	u4001
  8534   002BC0  EFE4  F015         	goto	u4000
  8535   002BC4                     u4001:
  8536   002BC4  EFE5  F015         	goto	l1134
  8537   002BC8                     u4000:
  8538   002BC8  8030               	bsf	___flmul@prod^0,0,c
  8539   002BCA                     l1134:
  8540   002BCA  90D8               	bcf	status,0,c
  8541   002BCC  362A               	rlcf	___flmul@grs^0,f,c
  8542   002BCE  362B               	rlcf	(___flmul@grs+1)^0,f,c
  8543   002BD0  362C               	rlcf	(___flmul@grs+2)^0,f,c
  8544   002BD2  362D               	rlcf	(___flmul@grs+3)^0,f,c
  8545   002BD4  0634               	decf	___flmul@temp^0,f,c
  8546   002BD6  A0D8               	btfss	status,0,c
  8547   002BD8  0635               	decf	(___flmul@temp+1)^0,f,c
  8548   002BDA                     l4046:
  8549   002BDA  AE32               	btfss	(___flmul@prod+2)^0,7,c
  8550   002BDC  EFF2  F015         	goto	u4011
  8551   002BE0  EFF4  F015         	goto	u4010
  8552   002BE4                     u4011:
  8553   002BE4  EFD8  F015         	goto	l4040
  8554   002BE8                     u4010:
  8555   002BE8  0E00               	movlw	0
  8556   002BEA  6E2E               	movwf	___flmul@aexp^0,c
  8557   002BEC  AE2D               	btfss	(___flmul@grs+3)^0,7,c
  8558   002BEE  EFFB  F015         	goto	u4021
  8559   002BF2  EFFD  F015         	goto	u4020
  8560   002BF6                     u4021:
  8561   002BF6  EF21  F016         	goto	l1136
  8562   002BFA                     u4020:
  8563   002BFA  0EFF               	movlw	255
  8564   002BFC  142A               	andwf	___flmul@grs^0,w,c
  8565   002BFE  6E25               	movwf	??___flmul^0,c
  8566   002C00  0EFF               	movlw	255
  8567   002C02  142B               	andwf	(___flmul@grs+1)^0,w,c
  8568   002C04  6E26               	movwf	(??___flmul+1)^0,c
  8569   002C06  0EFF               	movlw	255
  8570   002C08  142C               	andwf	(___flmul@grs+2)^0,w,c
  8571   002C0A  6E27               	movwf	(??___flmul+2)^0,c
  8572   002C0C  0E7F               	movlw	127
  8573   002C0E  142D               	andwf	(___flmul@grs+3)^0,w,c
  8574   002C10  6E28               	movwf	(??___flmul+3)^0,c
  8575   002C12  5025               	movf	??___flmul^0,w,c
  8576   002C14  1026               	iorwf	(??___flmul+1)^0,w,c
  8577   002C16  1027               	iorwf	(??___flmul+2)^0,w,c
  8578   002C18  1028               	iorwf	(??___flmul+3)^0,w,c
  8579   002C1A  B4D8               	btfsc	status,2,c
  8580   002C1C  EF12  F016         	goto	u4031
  8581   002C20  EF14  F016         	goto	u4030
  8582   002C24                     u4031:
  8583   002C24  EF18  F016         	goto	l1137
  8584   002C28                     u4030:
  8585   002C28                     l4054:
  8586   002C28  0E01               	movlw	1
  8587   002C2A  6E2E               	movwf	___flmul@aexp^0,c
  8588   002C2C  EF21  F016         	goto	l1136
  8589   002C30                     l1137:
  8590   002C30  A030               	btfss	___flmul@prod^0,0,c
  8591   002C32  EF1D  F016         	goto	u4041
  8592   002C36  EF1F  F016         	goto	u4040
  8593   002C3A                     u4041:
  8594   002C3A  EF21  F016         	goto	l1136
  8595   002C3E                     u4040:
  8596   002C3E  EF14  F016         	goto	l4054
  8597   002C42                     l1136:
  8598   002C42  502E               	movf	___flmul@aexp^0,w,c
  8599   002C44  B4D8               	btfsc	status,2,c
  8600   002C46  EF27  F016         	goto	u4051
  8601   002C4A  EF29  F016         	goto	u4050
  8602   002C4E                     u4051:
  8603   002C4E  EF4D  F016         	goto	l4066
  8604   002C52                     u4050:
  8605   002C52  0E01               	movlw	1
  8606   002C54  2630               	addwf	___flmul@prod^0,f,c
  8607   002C56  0E00               	movlw	0
  8608   002C58  2231               	addwfc	(___flmul@prod+1)^0,f,c
  8609   002C5A  2232               	addwfc	(___flmul@prod+2)^0,f,c
  8610   002C5C  2233               	addwfc	(___flmul@prod+3)^0,f,c
  8611   002C5E  A033               	btfss	(___flmul@prod+3)^0,0,c
  8612   002C60  EF34  F016         	goto	u4061
  8613   002C64  EF36  F016         	goto	u4060
  8614   002C68                     u4061:
  8615   002C68  EF4D  F016         	goto	l4066
  8616   002C6C                     u4060:
  8617   002C6C  C030  F025         	movff	___flmul@prod,??___flmul
  8618   002C70  C031  F026         	movff	___flmul@prod+1,??___flmul+1
  8619   002C74  C032  F027         	movff	___flmul@prod+2,??___flmul+2
  8620   002C78  C033  F028         	movff	___flmul@prod+3,??___flmul+3
  8621   002C7C  3428               	rlcf	(??___flmul+3)^0,w,c
  8622   002C7E  3228               	rrcf	(??___flmul+3)^0,f,c
  8623   002C80  3227               	rrcf	(??___flmul+2)^0,f,c
  8624   002C82  3226               	rrcf	(??___flmul+1)^0,f,c
  8625   002C84  3225               	rrcf	??___flmul^0,f,c
  8626   002C86  C025  F030         	movff	??___flmul,___flmul@prod
  8627   002C8A  C026  F031         	movff	??___flmul+1,___flmul@prod+1
  8628   002C8E  C027  F032         	movff	??___flmul+2,___flmul@prod+2
  8629   002C92  C028  F033         	movff	??___flmul+3,___flmul@prod+3
  8630   002C96  4A34               	infsnz	___flmul@temp^0,f,c
  8631   002C98  2A35               	incf	(___flmul@temp+1)^0,f,c
  8632   002C9A                     l4066:
  8633   002C9A  BE35               	btfsc	(___flmul@temp+1)^0,7,c
  8634   002C9C  EF58  F016         	goto	u4071
  8635   002CA0  5035               	movf	(___flmul@temp+1)^0,w,c
  8636   002CA2  E108               	bnz	u4070
  8637   002CA4  2834               	incf	___flmul@temp^0,w,c
  8638   002CA6  A0D8               	btfss	status,0,c
  8639   002CA8  EF58  F016         	goto	u4071
  8640   002CAC  EF5A  F016         	goto	u4070
  8641   002CB0                     u4071:
  8642   002CB0  EF64  F016         	goto	l4070
  8643   002CB4                     u4070:
  8644   002CB4  0E00               	movlw	0
  8645   002CB6  6E30               	movwf	___flmul@prod^0,c
  8646   002CB8  0E00               	movlw	0
  8647   002CBA  6E31               	movwf	(___flmul@prod+1)^0,c
  8648   002CBC  0E80               	movlw	128
  8649   002CBE  6E32               	movwf	(___flmul@prod+2)^0,c
  8650   002CC0  0E7F               	movlw	127
  8651   002CC2  6E33               	movwf	(___flmul@prod+3)^0,c
  8652   002CC4  EF92  F016         	goto	l4082
  8653   002CC8                     l4070:
  8654   002CC8  BE35               	btfsc	(___flmul@temp+1)^0,7,c
  8655   002CCA  EF71  F016         	goto	u4080
  8656   002CCE  5035               	movf	(___flmul@temp+1)^0,w,c
  8657   002CD0  E106               	bnz	u4081
  8658   002CD2  0434               	decf	___flmul@temp^0,w,c
  8659   002CD4  B0D8               	btfsc	status,0,c
  8660   002CD6  EF6F  F016         	goto	u4081
  8661   002CDA  EF71  F016         	goto	u4080
  8662   002CDE                     u4081:
  8663   002CDE  EF7D  F016         	goto	l1144
  8664   002CE2                     u4080:
  8665   002CE2  0E00               	movlw	0
  8666   002CE4  6E30               	movwf	___flmul@prod^0,c
  8667   002CE6  0E00               	movlw	0
  8668   002CE8  6E31               	movwf	(___flmul@prod+1)^0,c
  8669   002CEA  0E00               	movlw	0
  8670   002CEC  6E32               	movwf	(___flmul@prod+2)^0,c
  8671   002CEE  0E00               	movlw	0
  8672   002CF0  6E33               	movwf	(___flmul@prod+3)^0,c
  8673   002CF2  0E00               	movlw	0
  8674   002CF4  6E29               	movwf	___flmul@sign^0,c
  8675   002CF6  EF92  F016         	goto	l4082
  8676   002CFA                     l1144:
  8677   002CFA  C034  F02F         	movff	___flmul@temp,___flmul@bexp
  8678   002CFE  0EFF               	movlw	255
  8679   002D00  1630               	andwf	___flmul@prod^0,f,c
  8680   002D02  0EFF               	movlw	255
  8681   002D04  1631               	andwf	(___flmul@prod+1)^0,f,c
  8682   002D06  0E7F               	movlw	127
  8683   002D08  1632               	andwf	(___flmul@prod+2)^0,f,c
  8684   002D0A  0E00               	movlw	0
  8685   002D0C  1633               	andwf	(___flmul@prod+3)^0,f,c
  8686   002D0E  A02F               	btfss	___flmul@bexp^0,0,c
  8687   002D10  EF8C  F016         	goto	u4091
  8688   002D14  EF8E  F016         	goto	u4090
  8689   002D18                     u4091:
  8690   002D18  EF8F  F016         	goto	l4080
  8691   002D1C                     u4090:
  8692   002D1C  8E32               	bsf	(___flmul@prod+2)^0,7,c
  8693   002D1E                     l4080:
  8694   002D1E  90D8               	bcf	status,0,c
  8695   002D20  302F               	rrcf	___flmul@bexp^0,w,c
  8696   002D22  6E33               	movwf	(___flmul@prod+3)^0,c
  8697   002D24                     l4082:
  8698   002D24  5029               	movf	___flmul@sign^0,w,c
  8699   002D26  1233               	iorwf	(___flmul@prod+3)^0,f,c
  8700   002D28  C030  F01D         	movff	___flmul@prod,?___flmul
  8701   002D2C  C031  F01E         	movff	___flmul@prod+1,?___flmul+1
  8702   002D30  C032  F01F         	movff	___flmul@prod+2,?___flmul+2
  8703   002D34  C033  F020         	movff	___flmul@prod+3,?___flmul+3
  8704   002D38                     l1131:
  8705   002D38  0012               	return		;funcret
  8706   002D3A                     __end_of___flmul:
  8707                           	callstack 0
  8708                           
  8709 ;; *************** function ___flge *****************
  8710 ;; Defined at:
  8711 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\flge.c"
  8712 ;; Parameters:    Size  Location     Type
  8713 ;;  ff1             4   53[COMRAM] unsigned char 
  8714 ;;  ff2             4   57[COMRAM] unsigned char 
  8715 ;; Auto vars:     Size  Location     Type
  8716 ;;		None
  8717 ;; Return value:  Size  Location     Type
  8718 ;;		None               void
  8719 ;; Registers used:
  8720 ;;		wreg, status,2, status,0
  8721 ;; Tracked objects:
  8722 ;;		On entry : 0/0
  8723 ;;		On exit  : 0/0
  8724 ;;		Unchanged: 0/0
  8725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8726 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8728 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8729 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8730 ;;Total ram usage:       12 bytes
  8731 ;; Hardware stack levels used: 1
  8732 ;; Hardware stack levels required when called: 2
  8733 ;; This function calls:
  8734 ;;		Nothing
  8735 ;; This function is called by:
  8736 ;;		_colorDetect
  8737 ;;		_main
  8738 ;;		_efgtoa
  8739 ;; This function uses a non-reentrant model
  8740 ;;
  8741                           
  8742                           	psect	text27
  8743   0048E6                     __ptext27:
  8744                           	callstack 0
  8745   0048E6                     ___flge:
  8746                           	callstack 23
  8747   0048E6  0E00               	movlw	0
  8748   0048E8  1436               	andwf	___flge@ff1^0,w,c
  8749   0048EA  6E3E               	movwf	??___flge^0,c
  8750   0048EC  0E00               	movlw	0
  8751   0048EE  1437               	andwf	(___flge@ff1+1)^0,w,c
  8752   0048F0  6E3F               	movwf	(??___flge+1)^0,c
  8753   0048F2  0E80               	movlw	128
  8754   0048F4  1438               	andwf	(___flge@ff1+2)^0,w,c
  8755   0048F6  6E40               	movwf	(??___flge+2)^0,c
  8756   0048F8  0E7F               	movlw	127
  8757   0048FA  1439               	andwf	(___flge@ff1+3)^0,w,c
  8758   0048FC  6E41               	movwf	(??___flge+3)^0,c
  8759   0048FE  503E               	movf	??___flge^0,w,c
  8760   004900  103F               	iorwf	(??___flge+1)^0,w,c
  8761   004902  1040               	iorwf	(??___flge+2)^0,w,c
  8762   004904  1041               	iorwf	(??___flge+3)^0,w,c
  8763   004906  A4D8               	btfss	status,2,c
  8764   004908  EF88  F024         	goto	u4131
  8765   00490C  EF8A  F024         	goto	u4130
  8766   004910                     u4131:
  8767   004910  EF92  F024         	goto	l4114
  8768   004914                     u4130:
  8769   004914  0E00               	movlw	0
  8770   004916  6E36               	movwf	___flge@ff1^0,c
  8771   004918  0E00               	movlw	0
  8772   00491A  6E37               	movwf	(___flge@ff1+1)^0,c
  8773   00491C  0E00               	movlw	0
  8774   00491E  6E38               	movwf	(___flge@ff1+2)^0,c
  8775   004920  0E00               	movlw	0
  8776   004922  6E39               	movwf	(___flge@ff1+3)^0,c
  8777   004924                     l4114:
  8778   004924  0E00               	movlw	0
  8779   004926  143A               	andwf	___flge@ff2^0,w,c
  8780   004928  6E3E               	movwf	??___flge^0,c
  8781   00492A  0E00               	movlw	0
  8782   00492C  143B               	andwf	(___flge@ff2+1)^0,w,c
  8783   00492E  6E3F               	movwf	(??___flge+1)^0,c
  8784   004930  0E80               	movlw	128
  8785   004932  143C               	andwf	(___flge@ff2+2)^0,w,c
  8786   004934  6E40               	movwf	(??___flge+2)^0,c
  8787   004936  0E7F               	movlw	127
  8788   004938  143D               	andwf	(___flge@ff2+3)^0,w,c
  8789   00493A  6E41               	movwf	(??___flge+3)^0,c
  8790   00493C  503E               	movf	??___flge^0,w,c
  8791   00493E  103F               	iorwf	(??___flge+1)^0,w,c
  8792   004940  1040               	iorwf	(??___flge+2)^0,w,c
  8793   004942  1041               	iorwf	(??___flge+3)^0,w,c
  8794   004944  A4D8               	btfss	status,2,c
  8795   004946  EFA7  F024         	goto	u4141
  8796   00494A  EFA9  F024         	goto	u4140
  8797   00494E                     u4141:
  8798   00494E  EFB1  F024         	goto	l4118
  8799   004952                     u4140:
  8800   004952  0E00               	movlw	0
  8801   004954  6E3A               	movwf	___flge@ff2^0,c
  8802   004956  0E00               	movlw	0
  8803   004958  6E3B               	movwf	(___flge@ff2+1)^0,c
  8804   00495A  0E00               	movlw	0
  8805   00495C  6E3C               	movwf	(___flge@ff2+2)^0,c
  8806   00495E  0E00               	movlw	0
  8807   004960  6E3D               	movwf	(___flge@ff2+3)^0,c
  8808   004962                     l4118:
  8809   004962  AE39               	btfss	(___flge@ff1+3)^0,7,c
  8810   004964  EFB6  F024         	goto	u4151
  8811   004968  EFB8  F024         	goto	u4150
  8812   00496C                     u4151:
  8813   00496C  EFC1  F024         	goto	l4122
  8814   004970                     u4150:
  8815   004970  6C36               	negf	___flge@ff1^0,c
  8816   004972  1E37               	comf	(___flge@ff1+1)^0,f,c
  8817   004974  B0D8               	btfsc	status,0,c
  8818   004976  2A37               	incf	(___flge@ff1+1)^0,f,c
  8819   004978  1E38               	comf	(___flge@ff1+2)^0,f,c
  8820   00497A  B0D8               	btfsc	status,0,c
  8821   00497C  2A38               	incf	(___flge@ff1+2)^0,f,c
  8822   00497E  0E80               	movlw	128
  8823   004980  5639               	subfwb	(___flge@ff1+3)^0,f,c
  8824   004982                     l4122:
  8825   004982  AE3D               	btfss	(___flge@ff2+3)^0,7,c
  8826   004984  EFC6  F024         	goto	u4161
  8827   004988  EFC8  F024         	goto	u4160
  8828   00498C                     u4161:
  8829   00498C  EFD1  F024         	goto	l778
  8830   004990                     u4160:
  8831   004990  6C3A               	negf	___flge@ff2^0,c
  8832   004992  1E3B               	comf	(___flge@ff2+1)^0,f,c
  8833   004994  B0D8               	btfsc	status,0,c
  8834   004996  2A3B               	incf	(___flge@ff2+1)^0,f,c
  8835   004998  1E3C               	comf	(___flge@ff2+2)^0,f,c
  8836   00499A  B0D8               	btfsc	status,0,c
  8837   00499C  2A3C               	incf	(___flge@ff2+2)^0,f,c
  8838   00499E  0E80               	movlw	128
  8839   0049A0  563D               	subfwb	(___flge@ff2+3)^0,f,c
  8840   0049A2                     l778:
  8841   0049A2  0E00               	movlw	0
  8842   0049A4  1A36               	xorwf	___flge@ff1^0,f,c
  8843   0049A6  0E00               	movlw	0
  8844   0049A8  1A37               	xorwf	(___flge@ff1+1)^0,f,c
  8845   0049AA  0E00               	movlw	0
  8846   0049AC  1A38               	xorwf	(___flge@ff1+2)^0,f,c
  8847   0049AE  0E80               	movlw	128
  8848   0049B0  1A39               	xorwf	(___flge@ff1+3)^0,f,c
  8849   0049B2  0E00               	movlw	0
  8850   0049B4  1A3A               	xorwf	___flge@ff2^0,f,c
  8851   0049B6  0E00               	movlw	0
  8852   0049B8  1A3B               	xorwf	(___flge@ff2+1)^0,f,c
  8853   0049BA  0E00               	movlw	0
  8854   0049BC  1A3C               	xorwf	(___flge@ff2+2)^0,f,c
  8855   0049BE  0E80               	movlw	128
  8856   0049C0  1A3D               	xorwf	(___flge@ff2+3)^0,f,c
  8857   0049C2  503A               	movf	___flge@ff2^0,w,c
  8858   0049C4  5C36               	subwf	___flge@ff1^0,w,c
  8859   0049C6  503B               	movf	(___flge@ff2+1)^0,w,c
  8860   0049C8  5837               	subwfb	(___flge@ff1+1)^0,w,c
  8861   0049CA  503C               	movf	(___flge@ff2+2)^0,w,c
  8862   0049CC  5838               	subwfb	(___flge@ff1+2)^0,w,c
  8863   0049CE  503D               	movf	(___flge@ff2+3)^0,w,c
  8864   0049D0  5839               	subwfb	(___flge@ff1+3)^0,w,c
  8865   0049D2  B0D8               	btfsc	status,0,c
  8866   0049D4  EFEE  F024         	goto	u4171
  8867   0049D8  EFF0  F024         	goto	u4170
  8868   0049DC                     u4171:
  8869   0049DC  EFF3  F024         	goto	l4128
  8870   0049E0                     u4170:
  8871   0049E0  90D8               	bcf	status,0,c
  8872   0049E2  EFF4  F024         	goto	l783
  8873   0049E6                     l4128:
  8874   0049E6  80D8               	bsf	status,0,c
  8875   0049E8                     l783:
  8876   0049E8  0012               	return		;funcret
  8877   0049EA                     __end_of___flge:
  8878                           	callstack 0
  8879                           
  8880 ;; *************** function ___fleq *****************
  8881 ;; Defined at:
  8882 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\fleq.c"
  8883 ;; Parameters:    Size  Location     Type
  8884 ;;  ff1             4    4[COMRAM] unsigned char 
  8885 ;;  ff2             4    8[COMRAM] unsigned char 
  8886 ;; Auto vars:     Size  Location     Type
  8887 ;;		None
  8888 ;; Return value:  Size  Location     Type
  8889 ;;		None               void
  8890 ;; Registers used:
  8891 ;;		wreg, status,2, status,0
  8892 ;; Tracked objects:
  8893 ;;		On entry : 0/0
  8894 ;;		On exit  : 0/0
  8895 ;;		Unchanged: 0/0
  8896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8897 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8899 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8900 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8901 ;;Total ram usage:       12 bytes
  8902 ;; Hardware stack levels used: 1
  8903 ;; Hardware stack levels required when called: 2
  8904 ;; This function calls:
  8905 ;;		Nothing
  8906 ;; This function is called by:
  8907 ;;		_efgtoa
  8908 ;; This function uses a non-reentrant model
  8909 ;;
  8910                           
  8911                           	psect	text28
  8912   0050A6                     __ptext28:
  8913                           	callstack 0
  8914   0050A6                     ___fleq:
  8915                           	callstack 23
  8916   0050A6  0E00               	movlw	0
  8917   0050A8  1405               	andwf	___fleq@ff1^0,w,c
  8918   0050AA  6E0D               	movwf	??___fleq^0,c
  8919   0050AC  0E00               	movlw	0
  8920   0050AE  1406               	andwf	(___fleq@ff1+1)^0,w,c
  8921   0050B0  6E0E               	movwf	(??___fleq+1)^0,c
  8922   0050B2  0E80               	movlw	128
  8923   0050B4  1407               	andwf	(___fleq@ff1+2)^0,w,c
  8924   0050B6  6E0F               	movwf	(??___fleq+2)^0,c
  8925   0050B8  0E7F               	movlw	127
  8926   0050BA  1408               	andwf	(___fleq@ff1+3)^0,w,c
  8927   0050BC  6E10               	movwf	(??___fleq+3)^0,c
  8928   0050BE  500D               	movf	??___fleq^0,w,c
  8929   0050C0  100E               	iorwf	(??___fleq+1)^0,w,c
  8930   0050C2  100F               	iorwf	(??___fleq+2)^0,w,c
  8931   0050C4  1010               	iorwf	(??___fleq+3)^0,w,c
  8932   0050C6  A4D8               	btfss	status,2,c
  8933   0050C8  EF68  F028         	goto	u4101
  8934   0050CC  EF6A  F028         	goto	u4100
  8935   0050D0                     u4101:
  8936   0050D0  EF72  F028         	goto	l4098
  8937   0050D4                     u4100:
  8938   0050D4  0E00               	movlw	0
  8939   0050D6  6E05               	movwf	___fleq@ff1^0,c
  8940   0050D8  0E00               	movlw	0
  8941   0050DA  6E06               	movwf	(___fleq@ff1+1)^0,c
  8942   0050DC  0E00               	movlw	0
  8943   0050DE  6E07               	movwf	(___fleq@ff1+2)^0,c
  8944   0050E0  0E00               	movlw	0
  8945   0050E2  6E08               	movwf	(___fleq@ff1+3)^0,c
  8946   0050E4                     l4098:
  8947   0050E4  0E00               	movlw	0
  8948   0050E6  1409               	andwf	___fleq@ff2^0,w,c
  8949   0050E8  6E0D               	movwf	??___fleq^0,c
  8950   0050EA  0E00               	movlw	0
  8951   0050EC  140A               	andwf	(___fleq@ff2+1)^0,w,c
  8952   0050EE  6E0E               	movwf	(??___fleq+1)^0,c
  8953   0050F0  0E80               	movlw	128
  8954   0050F2  140B               	andwf	(___fleq@ff2+2)^0,w,c
  8955   0050F4  6E0F               	movwf	(??___fleq+2)^0,c
  8956   0050F6  0E7F               	movlw	127
  8957   0050F8  140C               	andwf	(___fleq@ff2+3)^0,w,c
  8958   0050FA  6E10               	movwf	(??___fleq+3)^0,c
  8959   0050FC  500D               	movf	??___fleq^0,w,c
  8960   0050FE  100E               	iorwf	(??___fleq+1)^0,w,c
  8961   005100  100F               	iorwf	(??___fleq+2)^0,w,c
  8962   005102  1010               	iorwf	(??___fleq+3)^0,w,c
  8963   005104  A4D8               	btfss	status,2,c
  8964   005106  EF87  F028         	goto	u4111
  8965   00510A  EF89  F028         	goto	u4110
  8966   00510E                     u4111:
  8967   00510E  EF91  F028         	goto	l4102
  8968   005112                     u4110:
  8969   005112  0E00               	movlw	0
  8970   005114  6E09               	movwf	___fleq@ff2^0,c
  8971   005116  0E00               	movlw	0
  8972   005118  6E0A               	movwf	(___fleq@ff2+1)^0,c
  8973   00511A  0E00               	movlw	0
  8974   00511C  6E0B               	movwf	(___fleq@ff2+2)^0,c
  8975   00511E  0E00               	movlw	0
  8976   005120  6E0C               	movwf	(___fleq@ff2+3)^0,c
  8977   005122                     l4102:
  8978   005122  5009               	movf	___fleq@ff2^0,w,c
  8979   005124  1805               	xorwf	___fleq@ff1^0,w,c
  8980   005126  E10F               	bnz	u4120
  8981   005128  500A               	movf	(___fleq@ff2+1)^0,w,c
  8982   00512A  1806               	xorwf	(___fleq@ff1+1)^0,w,c
  8983   00512C  E10C               	bnz	u4120
  8984   00512E  500B               	movf	(___fleq@ff2+2)^0,w,c
  8985   005130  1807               	xorwf	(___fleq@ff1+2)^0,w,c
  8986   005132  E109               	bnz	u4120
  8987   005134  500C               	movf	(___fleq@ff2+3)^0,w,c
  8988   005136  1808               	xorwf	(___fleq@ff1+3)^0,w,c
  8989   005138  B4D8               	btfsc	status,2,c
  8990   00513A  EFA1  F028         	goto	u4121
  8991   00513E  EFA3  F028         	goto	u4120
  8992   005142                     u4121:
  8993   005142  EFA6  F028         	goto	l4106
  8994   005146                     u4120:
  8995   005146  90D8               	bcf	status,0,c
  8996   005148  EFA7  F028         	goto	l772
  8997   00514C                     l4106:
  8998   00514C  80D8               	bsf	status,0,c
  8999   00514E                     l772:
  9000   00514E  0012               	return		;funcret
  9001   005150                     __end_of___fleq:
  9002                           	callstack 0
  9003                           
  9004 ;; *************** function ___fldiv *****************
  9005 ;; Defined at:
  9006 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\sprcdiv.c"
  9007 ;; Parameters:    Size  Location     Type
  9008 ;;  b               4   53[COMRAM] unsigned char 
  9009 ;;  a               4   57[COMRAM] unsigned char 
  9010 ;; Auto vars:     Size  Location     Type
  9011 ;;  grs             4   72[COMRAM] unsigned long 
  9012 ;;  rem             4   65[COMRAM] unsigned long 
  9013 ;;  new_exp         2   70[COMRAM] short 
  9014 ;;  aexp            1   77[COMRAM] unsigned char 
  9015 ;;  bexp            1   76[COMRAM] unsigned char 
  9016 ;;  sign            1   69[COMRAM] unsigned char 
  9017 ;; Return value:  Size  Location     Type
  9018 ;;                  4   53[COMRAM] unsigned char 
  9019 ;; Registers used:
  9020 ;;		wreg, status,2, status,0
  9021 ;; Tracked objects:
  9022 ;;		On entry : 0/0
  9023 ;;		On exit  : 0/0
  9024 ;;		Unchanged: 0/0
  9025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9026 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9027 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9028 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9029 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9030 ;;Total ram usage:       25 bytes
  9031 ;; Hardware stack levels used: 1
  9032 ;; Hardware stack levels required when called: 2
  9033 ;; This function calls:
  9034 ;;		Nothing
  9035 ;; This function is called by:
  9036 ;;		_colorDetect
  9037 ;;		_main
  9038 ;;		_efgtoa
  9039 ;; This function uses a non-reentrant model
  9040 ;;
  9041                           
  9042                           	psect	text29
  9043   002D3A                     __ptext29:
  9044                           	callstack 0
  9045   002D3A                     ___fldiv:
  9046                           	callstack 23
  9047   002D3A  5039               	movf	(___fldiv@b+3)^0,w,c
  9048   002D3C  0B80               	andlw	128
  9049   002D3E  6E46               	movwf	___fldiv@sign^0,c
  9050   002D40  5039               	movf	(___fldiv@b+3)^0,w,c
  9051   002D42  2439               	addwf	(___fldiv@b+3)^0,w,c
  9052   002D44  6E4D               	movwf	___fldiv@bexp^0,c
  9053   002D46  AE38               	btfss	(___fldiv@b+2)^0,7,c
  9054   002D48  EFA8  F016         	goto	u3681
  9055   002D4C  EFAA  F016         	goto	u3680
  9056   002D50                     u3681:
  9057   002D50  EFAB  F016         	goto	l3826
  9058   002D54                     u3680:
  9059   002D54  804D               	bsf	___fldiv@bexp^0,0,c
  9060   002D56                     l3826:
  9061   002D56  504D               	movf	___fldiv@bexp^0,w,c
  9062   002D58  B4D8               	btfsc	status,2,c
  9063   002D5A  EFB1  F016         	goto	u3691
  9064   002D5E  EFB3  F016         	goto	u3690
  9065   002D62                     u3691:
  9066   002D62  EFC8  F016         	goto	l3836
  9067   002D66                     u3690:
  9068   002D66  284D               	incf	___fldiv@bexp^0,w,c
  9069   002D68  A4D8               	btfss	status,2,c
  9070   002D6A  EFB9  F016         	goto	u3701
  9071   002D6E  EFBB  F016         	goto	u3700
  9072   002D72                     u3701:
  9073   002D72  EFC3  F016         	goto	l3832
  9074   002D76                     u3700:
  9075   002D76  0E00               	movlw	0
  9076   002D78  6E36               	movwf	___fldiv@b^0,c
  9077   002D7A  0E00               	movlw	0
  9078   002D7C  6E37               	movwf	(___fldiv@b+1)^0,c
  9079   002D7E  0E00               	movlw	0
  9080   002D80  6E38               	movwf	(___fldiv@b+2)^0,c
  9081   002D82  0E00               	movlw	0
  9082   002D84  6E39               	movwf	(___fldiv@b+3)^0,c
  9083   002D86                     l3832:
  9084   002D86  8E38               	bsf	(___fldiv@b+2)^0,7,c
  9085   002D88  0E00               	movlw	0
  9086   002D8A  6E39               	movwf	(___fldiv@b+3)^0,c
  9087   002D8C  EFD0  F016         	goto	l3838
  9088   002D90                     l3836:
  9089   002D90  0E00               	movlw	0
  9090   002D92  6E36               	movwf	___fldiv@b^0,c
  9091   002D94  0E00               	movlw	0
  9092   002D96  6E37               	movwf	(___fldiv@b+1)^0,c
  9093   002D98  0E00               	movlw	0
  9094   002D9A  6E38               	movwf	(___fldiv@b+2)^0,c
  9095   002D9C  0E00               	movlw	0
  9096   002D9E  6E39               	movwf	(___fldiv@b+3)^0,c
  9097   002DA0                     l3838:
  9098   002DA0  503D               	movf	(___fldiv@a+3)^0,w,c
  9099   002DA2  0B80               	andlw	128
  9100   002DA4  1A46               	xorwf	___fldiv@sign^0,f,c
  9101   002DA6  503D               	movf	(___fldiv@a+3)^0,w,c
  9102   002DA8  243D               	addwf	(___fldiv@a+3)^0,w,c
  9103   002DAA  6E4E               	movwf	___fldiv@aexp^0,c
  9104   002DAC  AE3C               	btfss	(___fldiv@a+2)^0,7,c
  9105   002DAE  EFDB  F016         	goto	u3711
  9106   002DB2  EFDD  F016         	goto	u3710
  9107   002DB6                     u3711:
  9108   002DB6  EFDE  F016         	goto	l3846
  9109   002DBA                     u3710:
  9110   002DBA  804E               	bsf	___fldiv@aexp^0,0,c
  9111   002DBC                     l3846:
  9112   002DBC  504E               	movf	___fldiv@aexp^0,w,c
  9113   002DBE  B4D8               	btfsc	status,2,c
  9114   002DC0  EFE4  F016         	goto	u3721
  9115   002DC4  EFE6  F016         	goto	u3720
  9116   002DC8                     u3721:
  9117   002DC8  EFFB  F016         	goto	l3856
  9118   002DCC                     u3720:
  9119   002DCC  284E               	incf	___fldiv@aexp^0,w,c
  9120   002DCE  A4D8               	btfss	status,2,c
  9121   002DD0  EFEC  F016         	goto	u3731
  9122   002DD4  EFEE  F016         	goto	u3730
  9123   002DD8                     u3731:
  9124   002DD8  EFF6  F016         	goto	l3852
  9125   002DDC                     u3730:
  9126   002DDC  0E00               	movlw	0
  9127   002DDE  6E3A               	movwf	___fldiv@a^0,c
  9128   002DE0  0E00               	movlw	0
  9129   002DE2  6E3B               	movwf	(___fldiv@a+1)^0,c
  9130   002DE4  0E00               	movlw	0
  9131   002DE6  6E3C               	movwf	(___fldiv@a+2)^0,c
  9132   002DE8  0E00               	movlw	0
  9133   002DEA  6E3D               	movwf	(___fldiv@a+3)^0,c
  9134   002DEC                     l3852:
  9135   002DEC  8E3C               	bsf	(___fldiv@a+2)^0,7,c
  9136   002DEE  0E00               	movlw	0
  9137   002DF0  6E3D               	movwf	(___fldiv@a+3)^0,c
  9138   002DF2  EF03  F017         	goto	l3858
  9139   002DF6                     l3856:
  9140   002DF6  0E00               	movlw	0
  9141   002DF8  6E3A               	movwf	___fldiv@a^0,c
  9142   002DFA  0E00               	movlw	0
  9143   002DFC  6E3B               	movwf	(___fldiv@a+1)^0,c
  9144   002DFE  0E00               	movlw	0
  9145   002E00  6E3C               	movwf	(___fldiv@a+2)^0,c
  9146   002E02  0E00               	movlw	0
  9147   002E04  6E3D               	movwf	(___fldiv@a+3)^0,c
  9148   002E06                     l3858:
  9149   002E06  503A               	movf	___fldiv@a^0,w,c
  9150   002E08  103B               	iorwf	(___fldiv@a+1)^0,w,c
  9151   002E0A  103C               	iorwf	(___fldiv@a+2)^0,w,c
  9152   002E0C  103D               	iorwf	(___fldiv@a+3)^0,w,c
  9153   002E0E  A4D8               	btfss	status,2,c
  9154   002E10  EF0C  F017         	goto	u3741
  9155   002E14  EF0E  F017         	goto	u3740
  9156   002E18                     u3741:
  9157   002E18  EF26  F017         	goto	l3870
  9158   002E1C                     u3740:
  9159   002E1C  0E00               	movlw	0
  9160   002E1E  6E36               	movwf	___fldiv@b^0,c
  9161   002E20  0E00               	movlw	0
  9162   002E22  6E37               	movwf	(___fldiv@b+1)^0,c
  9163   002E24  0E00               	movlw	0
  9164   002E26  6E38               	movwf	(___fldiv@b+2)^0,c
  9165   002E28  0E00               	movlw	0
  9166   002E2A  6E39               	movwf	(___fldiv@b+3)^0,c
  9167   002E2C  0E80               	movlw	128
  9168   002E2E  1238               	iorwf	(___fldiv@b+2)^0,f,c
  9169   002E30  0E7F               	movlw	127
  9170   002E32  1239               	iorwf	(___fldiv@b+3)^0,f,c
  9171   002E34                     l3864:
  9172   002E34  5046               	movf	___fldiv@sign^0,w,c
  9173   002E36  1239               	iorwf	(___fldiv@b+3)^0,f,c
  9174   002E38  C036  F036         	movff	___fldiv@b,?___fldiv
  9175   002E3C  C037  F037         	movff	___fldiv@b+1,?___fldiv+1
  9176   002E40  C038  F038         	movff	___fldiv@b+2,?___fldiv+2
  9177   002E44  C039  F039         	movff	___fldiv@b+3,?___fldiv+3
  9178   002E48  EF69  F018         	goto	l1095
  9179   002E4C                     l3870:
  9180   002E4C  504D               	movf	___fldiv@bexp^0,w,c
  9181   002E4E  A4D8               	btfss	status,2,c
  9182   002E50  EF2C  F017         	goto	u3751
  9183   002E54  EF2E  F017         	goto	u3750
  9184   002E58                     u3751:
  9185   002E58  EF38  F017         	goto	l3878
  9186   002E5C                     u3750:
  9187   002E5C  0E00               	movlw	0
  9188   002E5E  6E36               	movwf	?___fldiv^0,c
  9189   002E60  0E00               	movlw	0
  9190   002E62  6E37               	movwf	(?___fldiv+1)^0,c
  9191   002E64  0E00               	movlw	0
  9192   002E66  6E38               	movwf	(?___fldiv+2)^0,c
  9193   002E68  0E00               	movlw	0
  9194   002E6A  6E39               	movwf	(?___fldiv+3)^0,c
  9195   002E6C  EF69  F018         	goto	l1095
  9196   002E70                     l3878:
  9197   002E70  504E               	movf	___fldiv@aexp^0,w,c
  9198   002E72  C04D  F03E         	movff	___fldiv@bexp,??___fldiv
  9199   002E76  6A3F               	clrf	(??___fldiv+1)^0,c
  9200   002E78  5E3E               	subwf	??___fldiv^0,f,c
  9201   002E7A  0E00               	movlw	0
  9202   002E7C  5A3F               	subwfb	(??___fldiv+1)^0,f,c
  9203   002E7E  0E7F               	movlw	127
  9204   002E80  243E               	addwf	??___fldiv^0,w,c
  9205   002E82  6E47               	movwf	___fldiv@new_exp^0,c
  9206   002E84  0E00               	movlw	0
  9207   002E86  203F               	addwfc	(??___fldiv+1)^0,w,c
  9208   002E88  6E48               	movwf	(___fldiv@new_exp+1)^0,c
  9209   002E8A  C036  F042         	movff	___fldiv@b,___fldiv@rem
  9210   002E8E  C037  F043         	movff	___fldiv@b+1,___fldiv@rem+1
  9211   002E92  C038  F044         	movff	___fldiv@b+2,___fldiv@rem+2
  9212   002E96  C039  F045         	movff	___fldiv@b+3,___fldiv@rem+3
  9213   002E9A  0E00               	movlw	0
  9214   002E9C  6E36               	movwf	___fldiv@b^0,c
  9215   002E9E  0E00               	movlw	0
  9216   002EA0  6E37               	movwf	(___fldiv@b+1)^0,c
  9217   002EA2  0E00               	movlw	0
  9218   002EA4  6E38               	movwf	(___fldiv@b+2)^0,c
  9219   002EA6  0E00               	movlw	0
  9220   002EA8  6E39               	movwf	(___fldiv@b+3)^0,c
  9221   002EAA  0E00               	movlw	0
  9222   002EAC  6E49               	movwf	___fldiv@grs^0,c
  9223   002EAE  0E00               	movlw	0
  9224   002EB0  6E4A               	movwf	(___fldiv@grs+1)^0,c
  9225   002EB2  0E00               	movlw	0
  9226   002EB4  6E4B               	movwf	(___fldiv@grs+2)^0,c
  9227   002EB6  0E00               	movlw	0
  9228   002EB8  6E4C               	movwf	(___fldiv@grs+3)^0,c
  9229   002EBA  0E00               	movlw	0
  9230   002EBC  6E4E               	movwf	___fldiv@aexp^0,c
  9231   002EBE  EF99  F017         	goto	l1097
  9232   002EC2                     l3888:
  9233   002EC2  504E               	movf	___fldiv@aexp^0,w,c
  9234   002EC4  B4D8               	btfsc	status,2,c
  9235   002EC6  EF67  F017         	goto	u3761
  9236   002ECA  EF69  F017         	goto	u3760
  9237   002ECE                     u3761:
  9238   002ECE  EF80  F017         	goto	l3896
  9239   002ED2                     u3760:
  9240   002ED2  90D8               	bcf	status,0,c
  9241   002ED4  3642               	rlcf	___fldiv@rem^0,f,c
  9242   002ED6  3643               	rlcf	(___fldiv@rem+1)^0,f,c
  9243   002ED8  3644               	rlcf	(___fldiv@rem+2)^0,f,c
  9244   002EDA  3645               	rlcf	(___fldiv@rem+3)^0,f,c
  9245   002EDC  90D8               	bcf	status,0,c
  9246   002EDE  3636               	rlcf	___fldiv@b^0,f,c
  9247   002EE0  3637               	rlcf	(___fldiv@b+1)^0,f,c
  9248   002EE2  3638               	rlcf	(___fldiv@b+2)^0,f,c
  9249   002EE4  3639               	rlcf	(___fldiv@b+3)^0,f,c
  9250   002EE6  AE4C               	btfss	(___fldiv@grs+3)^0,7,c
  9251   002EE8  EF78  F017         	goto	u3771
  9252   002EEC  EF7A  F017         	goto	u3770
  9253   002EF0                     u3771:
  9254   002EF0  EF7B  F017         	goto	l1100
  9255   002EF4                     u3770:
  9256   002EF4  8036               	bsf	___fldiv@b^0,0,c
  9257   002EF6                     l1100:
  9258   002EF6  90D8               	bcf	status,0,c
  9259   002EF8  3649               	rlcf	___fldiv@grs^0,f,c
  9260   002EFA  364A               	rlcf	(___fldiv@grs+1)^0,f,c
  9261   002EFC  364B               	rlcf	(___fldiv@grs+2)^0,f,c
  9262   002EFE  364C               	rlcf	(___fldiv@grs+3)^0,f,c
  9263   002F00                     l3896:
  9264   002F00  503A               	movf	___fldiv@a^0,w,c
  9265   002F02  5C42               	subwf	___fldiv@rem^0,w,c
  9266   002F04  503B               	movf	(___fldiv@a+1)^0,w,c
  9267   002F06  5843               	subwfb	(___fldiv@rem+1)^0,w,c
  9268   002F08  503C               	movf	(___fldiv@a+2)^0,w,c
  9269   002F0A  5844               	subwfb	(___fldiv@rem+2)^0,w,c
  9270   002F0C  503D               	movf	(___fldiv@a+3)^0,w,c
  9271   002F0E  5845               	subwfb	(___fldiv@rem+3)^0,w,c
  9272   002F10  A0D8               	btfss	status,0,c
  9273   002F12  EF8D  F017         	goto	u3781
  9274   002F16  EF8F  F017         	goto	u3780
  9275   002F1A                     u3781:
  9276   002F1A  EF98  F017         	goto	l3902
  9277   002F1E                     u3780:
  9278   002F1E  8C4C               	bsf	(___fldiv@grs+3)^0,6,c
  9279   002F20  503A               	movf	___fldiv@a^0,w,c
  9280   002F22  5E42               	subwf	___fldiv@rem^0,f,c
  9281   002F24  503B               	movf	(___fldiv@a+1)^0,w,c
  9282   002F26  5A43               	subwfb	(___fldiv@rem+1)^0,f,c
  9283   002F28  503C               	movf	(___fldiv@a+2)^0,w,c
  9284   002F2A  5A44               	subwfb	(___fldiv@rem+2)^0,f,c
  9285   002F2C  503D               	movf	(___fldiv@a+3)^0,w,c
  9286   002F2E  5A45               	subwfb	(___fldiv@rem+3)^0,f,c
  9287   002F30                     l3902:
  9288   002F30  2A4E               	incf	___fldiv@aexp^0,f,c
  9289   002F32                     l1097:
  9290   002F32  0E19               	movlw	25
  9291   002F34  644E               	cpfsgt	___fldiv@aexp^0,c
  9292   002F36  EF9F  F017         	goto	u3791
  9293   002F3A  EFA1  F017         	goto	u3790
  9294   002F3E                     u3791:
  9295   002F3E  EF61  F017         	goto	l3888
  9296   002F42                     u3790:
  9297   002F42  5042               	movf	___fldiv@rem^0,w,c
  9298   002F44  1043               	iorwf	(___fldiv@rem+1)^0,w,c
  9299   002F46  1044               	iorwf	(___fldiv@rem+2)^0,w,c
  9300   002F48  1045               	iorwf	(___fldiv@rem+3)^0,w,c
  9301   002F4A  B4D8               	btfsc	status,2,c
  9302   002F4C  EFAA  F017         	goto	u3801
  9303   002F50  EFAC  F017         	goto	u3800
  9304   002F54                     u3801:
  9305   002F54  EFC4  F017         	goto	l3914
  9306   002F58                     u3800:
  9307   002F58  8049               	bsf	___fldiv@grs^0,0,c
  9308   002F5A  EFC4  F017         	goto	l3914
  9309   002F5E                     l3908:
  9310   002F5E  90D8               	bcf	status,0,c
  9311   002F60  3636               	rlcf	___fldiv@b^0,f,c
  9312   002F62  3637               	rlcf	(___fldiv@b+1)^0,f,c
  9313   002F64  3638               	rlcf	(___fldiv@b+2)^0,f,c
  9314   002F66  3639               	rlcf	(___fldiv@b+3)^0,f,c
  9315   002F68  AE4C               	btfss	(___fldiv@grs+3)^0,7,c
  9316   002F6A  EFB9  F017         	goto	u3811
  9317   002F6E  EFBB  F017         	goto	u3810
  9318   002F72                     u3811:
  9319   002F72  EFBC  F017         	goto	l1106
  9320   002F76                     u3810:
  9321   002F76  8036               	bsf	___fldiv@b^0,0,c
  9322   002F78                     l1106:
  9323   002F78  90D8               	bcf	status,0,c
  9324   002F7A  3649               	rlcf	___fldiv@grs^0,f,c
  9325   002F7C  364A               	rlcf	(___fldiv@grs+1)^0,f,c
  9326   002F7E  364B               	rlcf	(___fldiv@grs+2)^0,f,c
  9327   002F80  364C               	rlcf	(___fldiv@grs+3)^0,f,c
  9328   002F82  0647               	decf	___fldiv@new_exp^0,f,c
  9329   002F84  A0D8               	btfss	status,0,c
  9330   002F86  0648               	decf	(___fldiv@new_exp+1)^0,f,c
  9331   002F88                     l3914:
  9332   002F88  AE38               	btfss	(___fldiv@b+2)^0,7,c
  9333   002F8A  EFC9  F017         	goto	u3821
  9334   002F8E  EFCB  F017         	goto	u3820
  9335   002F92                     u3821:
  9336   002F92  EFAF  F017         	goto	l3908
  9337   002F96                     u3820:
  9338   002F96  0E00               	movlw	0
  9339   002F98  6E4E               	movwf	___fldiv@aexp^0,c
  9340   002F9A  AE4C               	btfss	(___fldiv@grs+3)^0,7,c
  9341   002F9C  EFD2  F017         	goto	u3831
  9342   002FA0  EFD4  F017         	goto	u3830
  9343   002FA4                     u3831:
  9344   002FA4  EFF8  F017         	goto	l1108
  9345   002FA8                     u3830:
  9346   002FA8  0EFF               	movlw	255
  9347   002FAA  1449               	andwf	___fldiv@grs^0,w,c
  9348   002FAC  6E3E               	movwf	??___fldiv^0,c
  9349   002FAE  0EFF               	movlw	255
  9350   002FB0  144A               	andwf	(___fldiv@grs+1)^0,w,c
  9351   002FB2  6E3F               	movwf	(??___fldiv+1)^0,c
  9352   002FB4  0EFF               	movlw	255
  9353   002FB6  144B               	andwf	(___fldiv@grs+2)^0,w,c
  9354   002FB8  6E40               	movwf	(??___fldiv+2)^0,c
  9355   002FBA  0E7F               	movlw	127
  9356   002FBC  144C               	andwf	(___fldiv@grs+3)^0,w,c
  9357   002FBE  6E41               	movwf	(??___fldiv+3)^0,c
  9358   002FC0  503E               	movf	??___fldiv^0,w,c
  9359   002FC2  103F               	iorwf	(??___fldiv+1)^0,w,c
  9360   002FC4  1040               	iorwf	(??___fldiv+2)^0,w,c
  9361   002FC6  1041               	iorwf	(??___fldiv+3)^0,w,c
  9362   002FC8  B4D8               	btfsc	status,2,c
  9363   002FCA  EFE9  F017         	goto	u3841
  9364   002FCE  EFEB  F017         	goto	u3840
  9365   002FD2                     u3841:
  9366   002FD2  EFEF  F017         	goto	l1109
  9367   002FD6                     u3840:
  9368   002FD6                     l3922:
  9369   002FD6  0E01               	movlw	1
  9370   002FD8  6E4E               	movwf	___fldiv@aexp^0,c
  9371   002FDA  EFF8  F017         	goto	l1108
  9372   002FDE                     l1109:
  9373   002FDE  A036               	btfss	___fldiv@b^0,0,c
  9374   002FE0  EFF4  F017         	goto	u3851
  9375   002FE4  EFF6  F017         	goto	u3850
  9376   002FE8                     u3851:
  9377   002FE8  EFF8  F017         	goto	l1108
  9378   002FEC                     u3850:
  9379   002FEC  EFEB  F017         	goto	l3922
  9380   002FF0                     l1108:
  9381   002FF0  504E               	movf	___fldiv@aexp^0,w,c
  9382   002FF2  B4D8               	btfsc	status,2,c
  9383   002FF4  EFFE  F017         	goto	u3861
  9384   002FF8  EF00  F018         	goto	u3860
  9385   002FFC                     u3861:
  9386   002FFC  EF24  F018         	goto	l3934
  9387   003000                     u3860:
  9388   003000  0E01               	movlw	1
  9389   003002  2636               	addwf	___fldiv@b^0,f,c
  9390   003004  0E00               	movlw	0
  9391   003006  2237               	addwfc	(___fldiv@b+1)^0,f,c
  9392   003008  2238               	addwfc	(___fldiv@b+2)^0,f,c
  9393   00300A  2239               	addwfc	(___fldiv@b+3)^0,f,c
  9394   00300C  A039               	btfss	(___fldiv@b+3)^0,0,c
  9395   00300E  EF0B  F018         	goto	u3871
  9396   003012  EF0D  F018         	goto	u3870
  9397   003016                     u3871:
  9398   003016  EF24  F018         	goto	l3934
  9399   00301A                     u3870:
  9400   00301A  C036  F03E         	movff	___fldiv@b,??___fldiv
  9401   00301E  C037  F03F         	movff	___fldiv@b+1,??___fldiv+1
  9402   003022  C038  F040         	movff	___fldiv@b+2,??___fldiv+2
  9403   003026  C039  F041         	movff	___fldiv@b+3,??___fldiv+3
  9404   00302A  3441               	rlcf	(??___fldiv+3)^0,w,c
  9405   00302C  3241               	rrcf	(??___fldiv+3)^0,f,c
  9406   00302E  3240               	rrcf	(??___fldiv+2)^0,f,c
  9407   003030  323F               	rrcf	(??___fldiv+1)^0,f,c
  9408   003032  323E               	rrcf	??___fldiv^0,f,c
  9409   003034  C03E  F036         	movff	??___fldiv,___fldiv@b
  9410   003038  C03F  F037         	movff	??___fldiv+1,___fldiv@b+1
  9411   00303C  C040  F038         	movff	??___fldiv+2,___fldiv@b+2
  9412   003040  C041  F039         	movff	??___fldiv+3,___fldiv@b+3
  9413   003044  4A47               	infsnz	___fldiv@new_exp^0,f,c
  9414   003046  2A48               	incf	(___fldiv@new_exp+1)^0,f,c
  9415   003048                     l3934:
  9416   003048  BE48               	btfsc	(___fldiv@new_exp+1)^0,7,c
  9417   00304A  EF2F  F018         	goto	u3881
  9418   00304E  5048               	movf	(___fldiv@new_exp+1)^0,w,c
  9419   003050  E108               	bnz	u3880
  9420   003052  2847               	incf	___fldiv@new_exp^0,w,c
  9421   003054  A0D8               	btfss	status,0,c
  9422   003056  EF2F  F018         	goto	u3881
  9423   00305A  EF31  F018         	goto	u3880
  9424   00305E                     u3881:
  9425   00305E  EF3C  F018         	goto	l3938
  9426   003062                     u3880:
  9427   003062  0E00               	movlw	0
  9428   003064  6E48               	movwf	(___fldiv@new_exp+1)^0,c
  9429   003066  6847               	setf	___fldiv@new_exp^0,c
  9430   003068  0E00               	movlw	0
  9431   00306A  6E36               	movwf	___fldiv@b^0,c
  9432   00306C  0E00               	movlw	0
  9433   00306E  6E37               	movwf	(___fldiv@b+1)^0,c
  9434   003070  0E00               	movlw	0
  9435   003072  6E38               	movwf	(___fldiv@b+2)^0,c
  9436   003074  0E00               	movlw	0
  9437   003076  6E39               	movwf	(___fldiv@b+3)^0,c
  9438   003078                     l3938:
  9439   003078  BE48               	btfsc	(___fldiv@new_exp+1)^0,7,c
  9440   00307A  EF49  F018         	goto	u3890
  9441   00307E  5048               	movf	(___fldiv@new_exp+1)^0,w,c
  9442   003080  E106               	bnz	u3891
  9443   003082  0447               	decf	___fldiv@new_exp^0,w,c
  9444   003084  B0D8               	btfsc	status,0,c
  9445   003086  EF47  F018         	goto	u3891
  9446   00308A  EF49  F018         	goto	u3890
  9447   00308E                     u3891:
  9448   00308E  EF57  F018         	goto	l3942
  9449   003092                     u3890:
  9450   003092  0E00               	movlw	0
  9451   003094  6E48               	movwf	(___fldiv@new_exp+1)^0,c
  9452   003096  0E00               	movlw	0
  9453   003098  6E47               	movwf	___fldiv@new_exp^0,c
  9454   00309A  0E00               	movlw	0
  9455   00309C  6E36               	movwf	___fldiv@b^0,c
  9456   00309E  0E00               	movlw	0
  9457   0030A0  6E37               	movwf	(___fldiv@b+1)^0,c
  9458   0030A2  0E00               	movlw	0
  9459   0030A4  6E38               	movwf	(___fldiv@b+2)^0,c
  9460   0030A6  0E00               	movlw	0
  9461   0030A8  6E39               	movwf	(___fldiv@b+3)^0,c
  9462   0030AA  0E00               	movlw	0
  9463   0030AC  6E46               	movwf	___fldiv@sign^0,c
  9464   0030AE                     l3942:
  9465   0030AE  C047  F04D         	movff	___fldiv@new_exp,___fldiv@bexp
  9466   0030B2  A04D               	btfss	___fldiv@bexp^0,0,c
  9467   0030B4  EF5E  F018         	goto	u3901
  9468   0030B8  EF60  F018         	goto	u3900
  9469   0030BC                     u3901:
  9470   0030BC  EF63  F018         	goto	l3948
  9471   0030C0                     u3900:
  9472   0030C0  8E38               	bsf	(___fldiv@b+2)^0,7,c
  9473   0030C2  EF64  F018         	goto	l3950
  9474   0030C6                     l3948:
  9475   0030C6  9E38               	bcf	(___fldiv@b+2)^0,7,c
  9476   0030C8                     l3950:
  9477   0030C8  90D8               	bcf	status,0,c
  9478   0030CA  304D               	rrcf	___fldiv@bexp^0,w,c
  9479   0030CC  6E39               	movwf	(___fldiv@b+3)^0,c
  9480   0030CE  EF1A  F017         	goto	l3864
  9481   0030D2                     l1095:
  9482   0030D2  0012               	return		;funcret
  9483   0030D4                     __end_of___fldiv:
  9484                           	callstack 0
  9485                           
  9486 ;; *************** function _dtoa *****************
  9487 ;; Defined at:
  9488 ;;		line 443 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  9489 ;; Parameters:    Size  Location     Type
  9490 ;;  fp              2   31[COMRAM] PTR struct _IO_FILE
  9491 ;;		 -> sprintf@f(11), 
  9492 ;;  d               8   33[COMRAM] long long 
  9493 ;; Auto vars:     Size  Location     Type
  9494 ;;  n               8   55[COMRAM] long long 
  9495 ;;  i               2   63[COMRAM] int 
  9496 ;;  w               2   53[COMRAM] int 
  9497 ;;  p               2   51[COMRAM] int 
  9498 ;;  s               1   65[COMRAM] unsigned char 
  9499 ;; Return value:  Size  Location     Type
  9500 ;;                  1    wreg      void 
  9501 ;; Registers used:
  9502 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9503 ;; Tracked objects:
  9504 ;;		On entry : 0/0
  9505 ;;		On exit  : 0/0
  9506 ;;		Unchanged: 0/0
  9507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9508 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9509 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9510 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9511 ;;      Totals:        35       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9512 ;;Total ram usage:       35 bytes
  9513 ;; Hardware stack levels used: 1
  9514 ;; Hardware stack levels required when called: 6
  9515 ;; This function calls:
  9516 ;;		___aodiv
  9517 ;;		___aomod
  9518 ;;		_abs
  9519 ;;		_pad
  9520 ;; This function is called by:
  9521 ;;		_vfpfcnvrt
  9522 ;; This function uses a non-reentrant model
  9523 ;;
  9524                           
  9525                           	psect	text30
  9526   00370C                     __ptext30:
  9527                           	callstack 0
  9528   00370C                     _dtoa:
  9529                           	callstack 20
  9530   00370C                     
  9531                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 443: static void 
      +                          dtoa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\
      +                          doprnt.c: 444: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          45:  char s;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 446: 
      +                              int i, p, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          47:     long long n;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 450:     n = d;
  9532   00370C  C022  F038         	movff	dtoa@d,dtoa@n
  9533   003710  C023  F039         	movff	dtoa@d+1,dtoa@n+1
  9534   003714  C024  F03A         	movff	dtoa@d+2,dtoa@n+2
  9535   003718  C025  F03B         	movff	dtoa@d+3,dtoa@n+3
  9536   00371C  C026  F03C         	movff	dtoa@d+4,dtoa@n+4
  9537   003720  C027  F03D         	movff	dtoa@d+5,dtoa@n+5
  9538   003724  C028  F03E         	movff	dtoa@d+6,dtoa@n+6
  9539   003728  C029  F03F         	movff	dtoa@d+7,dtoa@n+7
  9540   00372C                     
  9541                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 451:     s = n < 
      +                          0 ? 1 : 0;
  9542   00372C  BE3F               	btfsc	(dtoa@n+7)^0,7,c
  9543   00372E  EF9B  F01B         	goto	u4561
  9544   003732  EF9E  F01B         	goto	u4560
  9545   003736                     u4561:
  9546   003736  0E01               	movlw	1
  9547   003738  EF9F  F01B         	goto	u4570
  9548   00373C                     u4560:
  9549   00373C  0E00               	movlw	0
  9550   00373E                     u4570:
  9551   00373E  6E42               	movwf	dtoa@s^0,c
  9552   003740                     
  9553                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 452:     if (s) {
  9554   003740  5042               	movf	dtoa@s^0,w,c
  9555   003742  B4D8               	btfsc	status,2,c
  9556   003744  EFA6  F01B         	goto	u4581
  9557   003748  EFA8  F01B         	goto	u4580
  9558   00374C                     u4581:
  9559   00374C  EFB8  F01B         	goto	l4322
  9560   003750                     u4580:
  9561   003750                     
  9562                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 453:         n = 
      +                          -n;
  9563   003750  1E3F               	comf	(dtoa@n+7)^0,f,c
  9564   003752  1E3E               	comf	(dtoa@n+6)^0,f,c
  9565   003754  1E3D               	comf	(dtoa@n+5)^0,f,c
  9566   003756  1E3C               	comf	(dtoa@n+4)^0,f,c
  9567   003758  1E3B               	comf	(dtoa@n+3)^0,f,c
  9568   00375A  1E3A               	comf	(dtoa@n+2)^0,f,c
  9569   00375C  1E39               	comf	(dtoa@n+1)^0,f,c
  9570   00375E  6C38               	negf	dtoa@n^0,c
  9571   003760  0E00               	movlw	0
  9572   003762  2239               	addwfc	(dtoa@n+1)^0,f,c
  9573   003764  223A               	addwfc	(dtoa@n+2)^0,f,c
  9574   003766  223B               	addwfc	(dtoa@n+3)^0,f,c
  9575   003768  223C               	addwfc	(dtoa@n+4)^0,f,c
  9576   00376A  223D               	addwfc	(dtoa@n+5)^0,f,c
  9577   00376C  223E               	addwfc	(dtoa@n+6)^0,f,c
  9578   00376E  223F               	addwfc	(dtoa@n+7)^0,f,c
  9579   003770                     l4322:
  9580                           
  9581                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 462:     p = (0 <
      +                           prec) ? prec : 1;
  9582   003770  0100               	movlb	0	; () banked
  9583   003772  BFF5               	btfsc	(_prec+1)& (0+255),7,b
  9584   003774  EFC6  F01B         	goto	u4590
  9585   003778  51F5               	movf	(_prec+1)& (0+255),w,b
  9586   00377A  E106               	bnz	u4591
  9587   00377C  05F4               	decf	_prec& (0+255),w,b
  9588   00377E  B0D8               	btfsc	status,0,c
  9589   003780  EFC4  F01B         	goto	u4591
  9590   003784  EFC6  F01B         	goto	u4590
  9591   003788                     u4591:
  9592   003788  EFCC  F01B         	goto	l1232
  9593   00378C                     u4590:
  9594   00378C                     
  9595                           ; BSR set to: 0
  9596   00378C  0E00               	movlw	0
  9597   00378E  6E35               	movwf	(dtoa@p+1)^0,c
  9598   003790  0E01               	movlw	1
  9599   003792  6E34               	movwf	dtoa@p^0,c
  9600   003794  EFD0  F01B         	goto	l1234
  9601   003798                     l1232:
  9602                           
  9603                           ; BSR set to: 0
  9604   003798  C0F4  F034         	movff	_prec,dtoa@p
  9605   00379C  C0F5  F035         	movff	_prec+1,dtoa@p+1
  9606   0037A0                     l1234:
  9607                           
  9608                           ; BSR set to: 0
  9609                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 463:     w = widt
      +                          h;
  9610   0037A0  C0F2  F036         	movff	_width,dtoa@w
  9611   0037A4  C0F3  F037         	movff	_width+1,dtoa@w+1
  9612   0037A8                     
  9613                           ; BSR set to: 0
  9614                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 464:     if (s
  9615   0037A8  5042               	movf	dtoa@s^0,w,c
  9616   0037AA  B4D8               	btfsc	status,2,c
  9617   0037AC  EFDA  F01B         	goto	u4601
  9618   0037B0  EFDC  F01B         	goto	u4600
  9619   0037B4                     u4601:
  9620   0037B4  EFF3  F01B         	goto	l1235
  9621   0037B8                     u4600:
  9622   0037B8                     
  9623                           ; BSR set to: 0
  9624                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 468:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 469:         --w;
  9625   0037B8  0636               	decf	dtoa@w^0,f,c
  9626   0037BA  A0D8               	btfss	status,0,c
  9627   0037BC  0637               	decf	(dtoa@w+1)^0,f,c
  9628   0037BE                     
  9629                           ; BSR set to: 0
  9630                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 470:   s = s ? '-
      +                          ' : '+';
  9631   0037BE  5042               	movf	dtoa@s^0,w,c
  9632   0037C0  A4D8               	btfss	status,2,c
  9633   0037C2  EFE5  F01B         	goto	u4611
  9634   0037C6  EFE7  F01B         	goto	u4610
  9635   0037CA                     u4611:
  9636   0037CA  EFED  F01B         	goto	l4334
  9637   0037CE                     u4610:
  9638   0037CE                     
  9639                           ; BSR set to: 0
  9640   0037CE  0E00               	movlw	0
  9641   0037D0  6E33               	movwf	(_dtoa$2701+1)^0,c
  9642   0037D2  0E2B               	movlw	43
  9643   0037D4  6E32               	movwf	_dtoa$2701^0,c
  9644   0037D6  EFF1  F01B         	goto	l4336
  9645   0037DA                     l4334:
  9646                           
  9647                           ; BSR set to: 0
  9648   0037DA  0E00               	movlw	0
  9649   0037DC  6E33               	movwf	(_dtoa$2701+1)^0,c
  9650   0037DE  0E2D               	movlw	45
  9651   0037E0  6E32               	movwf	_dtoa$2701^0,c
  9652   0037E2                     l4336:
  9653                           
  9654                           ; BSR set to: 0
  9655   0037E2  C032  F042         	movff	_dtoa$2701,dtoa@s
  9656   0037E6                     l1235:
  9657                           
  9658                           ; BSR set to: 0
  9659                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 480:     i = size
      +                          of(dbuf) - 1;
  9660   0037E6  0E00               	movlw	0
  9661   0037E8  6E41               	movwf	(dtoa@i+1)^0,c
  9662   0037EA  0E4F               	movlw	79
  9663   0037EC  6E40               	movwf	dtoa@i^0,c
  9664   0037EE                     
  9665                           ; BSR set to: 0
  9666                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 481:     dbuf[i] 
      +                          = '\0';
  9667   0037EE  0E00               	movlw	0
  9668   0037F0  0101               	movlb	1	; () banked
  9669   0037F2  6FD0               	movwf	(_dbuf+79)& (0+255),b
  9670                           
  9671                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  9672   0037F4  EF78  F01C         	goto	l4350
  9673   0037F8                     l4340:
  9674                           
  9675                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 486:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 487:         --i;
  9676   0037F8  0640               	decf	dtoa@i^0,f,c
  9677   0037FA  A0D8               	btfss	status,0,c
  9678   0037FC  0641               	decf	(dtoa@i+1)^0,f,c
  9679   0037FE                     
  9680                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 488:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  9681   0037FE  0E81               	movlw	low _dbuf
  9682   003800  2440               	addwf	dtoa@i^0,w,c
  9683   003802  6ED9               	movwf	fsr2l,c
  9684   003804  0E01               	movlw	high _dbuf
  9685   003806  2041               	addwfc	(dtoa@i+1)^0,w,c
  9686   003808  6EDA               	movwf	fsr2h,c
  9687   00380A  C038  F005         	movff	dtoa@n,___aomod@dividend
  9688   00380E  C039  F006         	movff	dtoa@n+1,___aomod@dividend+1
  9689   003812  C03A  F007         	movff	dtoa@n+2,___aomod@dividend+2
  9690   003816  C03B  F008         	movff	dtoa@n+3,___aomod@dividend+3
  9691   00381A  C03C  F009         	movff	dtoa@n+4,___aomod@dividend+4
  9692   00381E  C03D  F00A         	movff	dtoa@n+5,___aomod@dividend+5
  9693   003822  C03E  F00B         	movff	dtoa@n+6,___aomod@dividend+6
  9694   003826  C03F  F00C         	movff	dtoa@n+7,___aomod@dividend+7
  9695   00382A  0E0A               	movlw	10
  9696   00382C  6E0D               	movwf	___aomod@divisor^0,c
  9697   00382E  0E00               	movlw	0
  9698   003830  6E0E               	movwf	(___aomod@divisor+1)^0,c
  9699   003832  0E00               	movlw	0
  9700   003834  6E0F               	movwf	(___aomod@divisor+2)^0,c
  9701   003836  0E00               	movlw	0
  9702   003838  6E10               	movwf	(___aomod@divisor+3)^0,c
  9703   00383A  0E00               	movlw	0
  9704   00383C  6E11               	movwf	(___aomod@divisor+4)^0,c
  9705   00383E  0E00               	movlw	0
  9706   003840  6E12               	movwf	(___aomod@divisor+5)^0,c
  9707   003842  0E00               	movlw	0
  9708   003844  6E13               	movwf	(___aomod@divisor+6)^0,c
  9709   003846  0E00               	movlw	0
  9710   003848  6E14               	movwf	(___aomod@divisor+7)^0,c
  9711   00384A  EC24  F020         	call	___aomod	;wreg free
  9712   00384E  C005  F02A         	movff	?___aomod,??_dtoa
  9713   003852  C006  F02B         	movff	?___aomod+1,??_dtoa+1
  9714   003856  C007  F02C         	movff	?___aomod+2,??_dtoa+2
  9715   00385A  C008  F02D         	movff	?___aomod+3,??_dtoa+3
  9716   00385E  C009  F02E         	movff	?___aomod+4,??_dtoa+4
  9717   003862  C00A  F02F         	movff	?___aomod+5,??_dtoa+5
  9718   003866  C00B  F030         	movff	?___aomod+6,??_dtoa+6
  9719   00386A  C00C  F031         	movff	?___aomod+7,??_dtoa+7
  9720   00386E  C02A  F017         	movff	??_dtoa,abs@a
  9721   003872  C02B  F018         	movff	??_dtoa+1,abs@a+1
  9722   003876  EC2E  F02C         	call	_abs	;wreg free
  9723   00387A  5017               	movf	?_abs^0,w,c
  9724   00387C  0F30               	addlw	48
  9725   00387E  6EDF               	movwf	indf2,c
  9726   003880                     
  9727                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 489:         --p;
  9728   003880  0634               	decf	dtoa@p^0,f,c
  9729   003882  A0D8               	btfss	status,0,c
  9730   003884  0635               	decf	(dtoa@p+1)^0,f,c
  9731   003886                     
  9732                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 490:         --w;
  9733   003886  0636               	decf	dtoa@w^0,f,c
  9734   003888  A0D8               	btfss	status,0,c
  9735   00388A  0637               	decf	(dtoa@w+1)^0,f,c
  9736   00388C                     
  9737                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 491:         n = 
      +                          n / 10;
  9738   00388C  C038  F005         	movff	dtoa@n,___aodiv@dividend
  9739   003890  C039  F006         	movff	dtoa@n+1,___aodiv@dividend+1
  9740   003894  C03A  F007         	movff	dtoa@n+2,___aodiv@dividend+2
  9741   003898  C03B  F008         	movff	dtoa@n+3,___aodiv@dividend+3
  9742   00389C  C03C  F009         	movff	dtoa@n+4,___aodiv@dividend+4
  9743   0038A0  C03D  F00A         	movff	dtoa@n+5,___aodiv@dividend+5
  9744   0038A4  C03E  F00B         	movff	dtoa@n+6,___aodiv@dividend+6
  9745   0038A8  C03F  F00C         	movff	dtoa@n+7,___aodiv@dividend+7
  9746   0038AC  0E0A               	movlw	10
  9747   0038AE  6E0D               	movwf	___aodiv@divisor^0,c
  9748   0038B0  0E00               	movlw	0
  9749   0038B2  6E0E               	movwf	(___aodiv@divisor+1)^0,c
  9750   0038B4  0E00               	movlw	0
  9751   0038B6  6E0F               	movwf	(___aodiv@divisor+2)^0,c
  9752   0038B8  0E00               	movlw	0
  9753   0038BA  6E10               	movwf	(___aodiv@divisor+3)^0,c
  9754   0038BC  0E00               	movlw	0
  9755   0038BE  6E11               	movwf	(___aodiv@divisor+4)^0,c
  9756   0038C0  0E00               	movlw	0
  9757   0038C2  6E12               	movwf	(___aodiv@divisor+5)^0,c
  9758   0038C4  0E00               	movlw	0
  9759   0038C6  6E13               	movwf	(___aodiv@divisor+6)^0,c
  9760   0038C8  0E00               	movlw	0
  9761   0038CA  6E14               	movwf	(___aodiv@divisor+7)^0,c
  9762   0038CC  ECAA  F01E         	call	___aodiv	;wreg free
  9763   0038D0  C005  F038         	movff	?___aodiv,dtoa@n
  9764   0038D4  C006  F039         	movff	?___aodiv+1,dtoa@n+1
  9765   0038D8  C007  F03A         	movff	?___aodiv+2,dtoa@n+2
  9766   0038DC  C008  F03B         	movff	?___aodiv+3,dtoa@n+3
  9767   0038E0  C009  F03C         	movff	?___aodiv+4,dtoa@n+4
  9768   0038E4  C00A  F03D         	movff	?___aodiv+5,dtoa@n+5
  9769   0038E8  C00B  F03E         	movff	?___aodiv+6,dtoa@n+6
  9770   0038EC  C00C  F03F         	movff	?___aodiv+7,dtoa@n+7
  9771   0038F0                     l4350:
  9772                           
  9773                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  9774   0038F0  BE41               	btfsc	(dtoa@i+1)^0,7,c
  9775   0038F2  EF83  F01C         	goto	u4621
  9776   0038F6  5041               	movf	(dtoa@i+1)^0,w,c
  9777   0038F8  E108               	bnz	u4620
  9778   0038FA  0440               	decf	dtoa@i^0,w,c
  9779   0038FC  A0D8               	btfss	status,0,c
  9780   0038FE  EF83  F01C         	goto	u4621
  9781   003902  EF85  F01C         	goto	u4620
  9782   003906                     u4621:
  9783   003906  EFA1  F01C         	goto	l4356
  9784   00390A                     u4620:
  9785   00390A  5038               	movf	dtoa@n^0,w,c
  9786   00390C  1039               	iorwf	(dtoa@n+1)^0,w,c
  9787   00390E  103A               	iorwf	(dtoa@n+2)^0,w,c
  9788   003910  103B               	iorwf	(dtoa@n+3)^0,w,c
  9789   003912  103C               	iorwf	(dtoa@n+4)^0,w,c
  9790   003914  103D               	iorwf	(dtoa@n+5)^0,w,c
  9791   003916  103E               	iorwf	(dtoa@n+6)^0,w,c
  9792   003918  103F               	iorwf	(dtoa@n+7)^0,w,c
  9793   00391A  A4D8               	btfss	status,2,c
  9794   00391C  EF92  F01C         	goto	u4631
  9795   003920  EF94  F01C         	goto	u4630
  9796   003924                     u4631:
  9797   003924  EFFC  F01B         	goto	l4340
  9798   003928                     u4630:
  9799   003928  BE35               	btfsc	(dtoa@p+1)^0,7,c
  9800   00392A  EFA1  F01C         	goto	u4640
  9801   00392E  5035               	movf	(dtoa@p+1)^0,w,c
  9802   003930  E106               	bnz	u4641
  9803   003932  0434               	decf	dtoa@p^0,w,c
  9804   003934  B0D8               	btfsc	status,0,c
  9805   003936  EF9F  F01C         	goto	u4641
  9806   00393A  EFA1  F01C         	goto	u4640
  9807   00393E                     u4641:
  9808   00393E  EFFC  F01B         	goto	l4340
  9809   003942                     u4640:
  9810   003942                     l4356:
  9811                           
  9812                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 495:     if (s !=
      +                           0) {
  9813   003942  5042               	movf	dtoa@s^0,w,c
  9814   003944  B4D8               	btfsc	status,2,c
  9815   003946  EFA7  F01C         	goto	u4651
  9816   00394A  EFA9  F01C         	goto	u4650
  9817   00394E                     u4651:
  9818   00394E  EFB4  F01C         	goto	l4362
  9819   003952                     u4650:
  9820   003952                     
  9821                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 496:         --i;
  9822   003952  0640               	decf	dtoa@i^0,f,c
  9823   003954  A0D8               	btfss	status,0,c
  9824   003956  0641               	decf	(dtoa@i+1)^0,f,c
  9825   003958                     
  9826                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 497:         dbuf
      +                          [i] = s;
  9827   003958  0E81               	movlw	low _dbuf
  9828   00395A  2440               	addwf	dtoa@i^0,w,c
  9829   00395C  6ED9               	movwf	fsr2l,c
  9830   00395E  0E01               	movlw	high _dbuf
  9831   003960  2041               	addwfc	(dtoa@i+1)^0,w,c
  9832   003962  6EDA               	movwf	fsr2h,c
  9833   003964  C042  FFDF         	movff	dtoa@s,indf2
  9834   003968                     l4362:
  9835                           
  9836                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 501:     return (
      +                          void) pad(fp, &dbuf[i], w);
  9837   003968  C020  F015         	movff	dtoa@fp,pad@fp
  9838   00396C  C021  F016         	movff	dtoa@fp+1,pad@fp+1
  9839   003970  0E81               	movlw	low _dbuf
  9840   003972  2440               	addwf	dtoa@i^0,w,c
  9841   003974  6E17               	movwf	pad@buf^0,c
  9842   003976  0E01               	movlw	high _dbuf
  9843   003978  2041               	addwfc	(dtoa@i+1)^0,w,c
  9844   00397A  6E18               	movwf	(pad@buf+1)^0,c
  9845   00397C  C036  F019         	movff	dtoa@w,pad@p
  9846   003980  C037  F01A         	movff	dtoa@w+1,pad@p+1
  9847   003984  EC86  F029         	call	_pad	;wreg free
  9848   003988  0012               	return		;funcret
  9849   00398A                     __end_of_dtoa:
  9850                           	callstack 0
  9851                           
  9852 ;; *************** function _pad *****************
  9853 ;; Defined at:
  9854 ;;		line 133 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  9855 ;; Parameters:    Size  Location     Type
  9856 ;;  fp              2   20[COMRAM] PTR struct _IO_FILE
  9857 ;;		 -> sprintf@f(11), 
  9858 ;;  buf             2   22[COMRAM] PTR unsigned char 
  9859 ;;		 -> dbuf(80), 
  9860 ;;  p               2   24[COMRAM] int 
  9861 ;; Auto vars:     Size  Location     Type
  9862 ;;  w               2   29[COMRAM] int 
  9863 ;;  i               2   27[COMRAM] int 
  9864 ;; Return value:  Size  Location     Type
  9865 ;;                  1    wreg      void 
  9866 ;; Registers used:
  9867 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9868 ;; Tracked objects:
  9869 ;;		On entry : 0/0
  9870 ;;		On exit  : 0/0
  9871 ;;		Unchanged: 0/0
  9872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9873 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9874 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9875 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9876 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9877 ;;Total ram usage:       11 bytes
  9878 ;; Hardware stack levels used: 1
  9879 ;; Hardware stack levels required when called: 5
  9880 ;; This function calls:
  9881 ;;		_fputc
  9882 ;;		_fputs
  9883 ;; This function is called by:
  9884 ;;		_dtoa
  9885 ;;		_efgtoa
  9886 ;; This function uses a non-reentrant model
  9887 ;;
  9888                           
  9889                           	psect	text31
  9890   00530C                     __ptext31:
  9891                           	callstack 0
  9892   00530C                     _pad:
  9893                           	callstack 20
  9894   00530C                     
  9895                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 133: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\com
      +                          mon\doprnt.c: 134: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 135:     int i, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt
      +                          .c: 145:     w = (p < 0) ? 0 : p;
  9896   00530C  BE1A               	btfsc	(pad@p+1)^0,7,c
  9897   00530E  EF8B  F029         	goto	u4291
  9898   005312  EF8D  F029         	goto	u4290
  9899   005316                     u4291:
  9900   005316  EF93  F029         	goto	l4210
  9901   00531A                     u4290:
  9902   00531A  C019  F01E         	movff	pad@p,pad@w
  9903   00531E  C01A  F01F         	movff	pad@p+1,pad@w+1
  9904   005322  EF97  F029         	goto	l1223
  9905   005326                     l4210:
  9906   005326  0E00               	movlw	0
  9907   005328  6E1F               	movwf	(pad@w+1)^0,c
  9908   00532A  0E00               	movlw	0
  9909   00532C  6E1E               	movwf	pad@w^0,c
  9910   00532E                     l1223:
  9911                           
  9912                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 146:     i = 0;
  9913   00532E  0E00               	movlw	0
  9914   005330  6E1D               	movwf	(pad@i+1)^0,c
  9915   005332  0E00               	movlw	0
  9916   005334  6E1C               	movwf	pad@i^0,c
  9917                           
  9918                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  9919   005336  EFA9  F029         	goto	l4216
  9920   00533A                     l4212:
  9921                           
  9922                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 148:         fput
      +                          c(' ', fp);
  9923   00533A  0E00               	movlw	0
  9924   00533C  6E06               	movwf	(fputc@c+1)^0,c
  9925   00533E  0E20               	movlw	32
  9926   005340  6E05               	movwf	fputc@c^0,c
  9927   005342  C015  F007         	movff	pad@fp,fputc@fp
  9928   005346  C016  F008         	movff	pad@fp+1,fputc@fp+1
  9929   00534A  EC97  F027         	call	_fputc	;wreg free
  9930   00534E                     
  9931                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 149:         ++i;
  9932   00534E  4A1C               	infsnz	pad@i^0,f,c
  9933   005350  2A1D               	incf	(pad@i+1)^0,f,c
  9934   005352                     l4216:
  9935                           
  9936                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  9937   005352  501E               	movf	pad@w^0,w,c
  9938   005354  5C1C               	subwf	pad@i^0,w,c
  9939   005356  501D               	movf	(pad@i+1)^0,w,c
  9940   005358  0A80               	xorlw	128
  9941   00535A  6E1B               	movwf	??_pad^0,c
  9942   00535C  501F               	movf	(pad@w+1)^0,w,c
  9943   00535E  0A80               	xorlw	128
  9944   005360  581B               	subwfb	??_pad^0,w,c
  9945   005362  A0D8               	btfss	status,0,c
  9946   005364  EFB6  F029         	goto	u4301
  9947   005368  EFB8  F029         	goto	u4300
  9948   00536C                     u4301:
  9949   00536C  EF9D  F029         	goto	l4212
  9950   005370                     u4300:
  9951   005370                     
  9952                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 156:         fput
      +                          s((const char *)buf, fp);
  9953   005370  C017  F00E         	movff	pad@buf,fputs@s
  9954   005374  C018  F00F         	movff	pad@buf+1,fputs@s+1
  9955   005378  C015  F010         	movff	pad@fp,fputs@fp
  9956   00537C  C016  F011         	movff	pad@fp+1,fputs@fp+1
  9957   005380  ECEB  F02B         	call	_fputs	;wreg free
  9958   005384  0012               	return		;funcret
  9959   005386                     __end_of_pad:
  9960                           	callstack 0
  9961                           
  9962 ;; *************** function _fputs *****************
  9963 ;; Defined at:
  9964 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputs.c"
  9965 ;; Parameters:    Size  Location     Type
  9966 ;;  s               2   13[COMRAM] PTR const unsigned char 
  9967 ;;		 -> dbuf(80), 
  9968 ;;  fp              2   15[COMRAM] PTR struct _IO_FILE
  9969 ;;		 -> sprintf@f(11), 
  9970 ;; Auto vars:     Size  Location     Type
  9971 ;;  i               2   18[COMRAM] int 
  9972 ;;  c               1   17[COMRAM] unsigned char 
  9973 ;; Return value:  Size  Location     Type
  9974 ;;                  2   13[COMRAM] int 
  9975 ;; Registers used:
  9976 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9977 ;; Tracked objects:
  9978 ;;		On entry : 0/0
  9979 ;;		On exit  : 0/0
  9980 ;;		Unchanged: 0/0
  9981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9982 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9983 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9985 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9986 ;;Total ram usage:        7 bytes
  9987 ;; Hardware stack levels used: 1
  9988 ;; Hardware stack levels required when called: 4
  9989 ;; This function calls:
  9990 ;;		_fputc
  9991 ;; This function is called by:
  9992 ;;		_pad
  9993 ;; This function uses a non-reentrant model
  9994 ;;
  9995                           
  9996                           	psect	text32
  9997   0057D6                     __ptext32:
  9998                           	callstack 0
  9999   0057D6                     _fputs:
 10000                           	callstack 20
 10001   0057D6  0E00               	movlw	0
 10002   0057D8  6E14               	movwf	(fputs@i+1)^0,c
 10003   0057DA  0E00               	movlw	0
 10004   0057DC  6E13               	movwf	fputs@i^0,c
 10005   0057DE  EFFC  F02B         	goto	l3732
 10006   0057E2                     l3728:
 10007   0057E2  C012  F005         	movff	fputs@c,fputc@c
 10008   0057E6  6A06               	clrf	(fputc@c+1)^0,c
 10009   0057E8  C010  F007         	movff	fputs@fp,fputc@fp
 10010   0057EC  C011  F008         	movff	fputs@fp+1,fputc@fp+1
 10011   0057F0  EC97  F027         	call	_fputc	;wreg free
 10012   0057F4  4A13               	infsnz	fputs@i^0,f,c
 10013   0057F6  2A14               	incf	(fputs@i+1)^0,f,c
 10014   0057F8                     l3732:
 10015   0057F8  5013               	movf	fputs@i^0,w,c
 10016   0057FA  240E               	addwf	fputs@s^0,w,c
 10017   0057FC  6ED9               	movwf	fsr2l,c
 10018   0057FE  5014               	movf	(fputs@i+1)^0,w,c
 10019   005800  200F               	addwfc	(fputs@s+1)^0,w,c
 10020   005802  6EDA               	movwf	fsr2h,c
 10021   005804  50DF               	movf	indf2,w,c
 10022   005806  6E12               	movwf	fputs@c^0,c
 10023   005808  5012               	movf	fputs@c^0,w,c
 10024   00580A  A4D8               	btfss	status,2,c
 10025   00580C  EF0A  F02C         	goto	u3541
 10026   005810  EF0C  F02C         	goto	u3540
 10027   005814                     u3541:
 10028   005814  EFF1  F02B         	goto	l3728
 10029   005818                     u3540:
 10030   005818  0012               	return		;funcret
 10031   00581A                     __end_of_fputs:
 10032                           	callstack 0
 10033                           
 10034 ;; *************** function _fputc *****************
 10035 ;; Defined at:
 10036 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputc.c"
 10037 ;; Parameters:    Size  Location     Type
 10038 ;;  c               2    4[COMRAM] int 
 10039 ;;  fp              2    6[COMRAM] PTR struct _IO_FILE
 10040 ;;		 -> sprintf@f(11), 
 10041 ;; Auto vars:     Size  Location     Type
 10042 ;;		None
 10043 ;; Return value:  Size  Location     Type
 10044 ;;                  2    4[COMRAM] int 
 10045 ;; Registers used:
 10046 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10047 ;; Tracked objects:
 10048 ;;		On entry : 0/0
 10049 ;;		On exit  : 0/0
 10050 ;;		Unchanged: 0/0
 10051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10052 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10054 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10055 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10056 ;;Total ram usage:        9 bytes
 10057 ;; Hardware stack levels used: 1
 10058 ;; Hardware stack levels required when called: 3
 10059 ;; This function calls:
 10060 ;;		_putch
 10061 ;; This function is called by:
 10062 ;;		_pad
 10063 ;;		_vfpfcnvrt
 10064 ;;		_fputs
 10065 ;; This function uses a non-reentrant model
 10066 ;;
 10067                           
 10068                           	psect	text33
 10069   004F2E                     __ptext33:
 10070                           	callstack 0
 10071   004F2E                     _fputc:
 10072                           	callstack 23
 10073   004F2E  5007               	movf	fputc@fp^0,w,c
 10074   004F30  1008               	iorwf	(fputc@fp+1)^0,w,c
 10075   004F32  B4D8               	btfsc	status,2,c
 10076   004F34  EF9E  F027         	goto	u3111
 10077   004F38  EFA0  F027         	goto	u3110
 10078   004F3C                     u3111:
 10079   004F3C  EFA9  F027         	goto	l3514
 10080   004F40                     u3110:
 10081   004F40  5007               	movf	fputc@fp^0,w,c
 10082   004F42  1008               	iorwf	(fputc@fp+1)^0,w,c
 10083   004F44  A4D8               	btfss	status,2,c
 10084   004F46  EFA7  F027         	goto	u3121
 10085   004F4A  EFA9  F027         	goto	u3120
 10086   004F4E                     u3121:
 10087   004F4E  EFAE  F027         	goto	l3516
 10088   004F52                     u3120:
 10089   004F52                     l3514:
 10090   004F52  5005               	movf	fputc@c^0,w,c
 10091   004F54  EC9A  F02D         	call	_putch
 10092   004F58  EFFB  F027         	goto	l1383
 10093   004F5C                     l3516:
 10094   004F5C  EE20 F009          	lfsr	2,9
 10095   004F60  5007               	movf	fputc@fp^0,w,c
 10096   004F62  26D9               	addwf	fsr2l,f,c
 10097   004F64  5008               	movf	(fputc@fp+1)^0,w,c
 10098   004F66  22DA               	addwfc	fsr2h,f,c
 10099   004F68  50DE               	movf	postinc2,w,c
 10100   004F6A  10DE               	iorwf	postinc2,w,c
 10101   004F6C  B4D8               	btfsc	status,2,c
 10102   004F6E  EFBB  F027         	goto	u3131
 10103   004F72  EFBD  F027         	goto	u3130
 10104   004F76                     u3131:
 10105   004F76  EFD8  F027         	goto	l3520
 10106   004F7A                     u3130:
 10107   004F7A  EE20 F009          	lfsr	2,9
 10108   004F7E  5007               	movf	fputc@fp^0,w,c
 10109   004F80  26D9               	addwf	fsr2l,f,c
 10110   004F82  5008               	movf	(fputc@fp+1)^0,w,c
 10111   004F84  22DA               	addwfc	fsr2h,f,c
 10112   004F86  EE10 F003          	lfsr	1,3
 10113   004F8A  5007               	movf	fputc@fp^0,w,c
 10114   004F8C  26E1               	addwf	fsr1l,f,c
 10115   004F8E  5008               	movf	(fputc@fp+1)^0,w,c
 10116   004F90  22E2               	addwfc	fsr1h,f,c
 10117   004F92  50DE               	movf	postinc2,w,c
 10118   004F94  5CE6               	subwf	postinc1,w,c
 10119   004F96  50E6               	movf	postinc1,w,c
 10120   004F98  0A80               	xorlw	128
 10121   004F9A  6E0D               	movwf	(??_fputc+4)^0,c
 10122   004F9C  50DE               	movf	postinc2,w,c
 10123   004F9E  0A80               	xorlw	128
 10124   004FA0  580D               	subwfb	(??_fputc+4)^0,w,c
 10125   004FA2  B0D8               	btfsc	status,0,c
 10126   004FA4  EFD6  F027         	goto	u3141
 10127   004FA8  EFD8  F027         	goto	u3140
 10128   004FAC                     u3141:
 10129   004FAC  EFFB  F027         	goto	l1383
 10130   004FB0                     u3140:
 10131   004FB0                     l3520:
 10132   004FB0  EE20 F003          	lfsr	2,3
 10133   004FB4  5007               	movf	fputc@fp^0,w,c
 10134   004FB6  26D9               	addwf	fsr2l,f,c
 10135   004FB8  5008               	movf	(fputc@fp+1)^0,w,c
 10136   004FBA  22DA               	addwfc	fsr2h,f,c
 10137   004FBC  CFDE F009          	movff	postinc2,??_fputc
 10138   004FC0  CFDD F00A          	movff	postdec2,??_fputc+1
 10139   004FC4  C007  FFD9         	movff	fputc@fp,fsr2l
 10140   004FC8  C008  FFDA         	movff	fputc@fp+1,fsr2h
 10141   004FCC  CFDE F00B          	movff	postinc2,??_fputc+2
 10142   004FD0  CFDD F00C          	movff	postdec2,??_fputc+3
 10143   004FD4  5009               	movf	??_fputc^0,w,c
 10144   004FD6  240B               	addwf	(??_fputc+2)^0,w,c
 10145   004FD8  6ED9               	movwf	fsr2l,c
 10146   004FDA  500A               	movf	(??_fputc+1)^0,w,c
 10147   004FDC  200C               	addwfc	(??_fputc+3)^0,w,c
 10148   004FDE  6EDA               	movwf	fsr2h,c
 10149   004FE0  C005  FFDF         	movff	fputc@c,indf2
 10150   004FE4  EE20 F003          	lfsr	2,3
 10151   004FE8  5007               	movf	fputc@fp^0,w,c
 10152   004FEA  26D9               	addwf	fsr2l,f,c
 10153   004FEC  5008               	movf	(fputc@fp+1)^0,w,c
 10154   004FEE  22DA               	addwfc	fsr2h,f,c
 10155   004FF0  2ADE               	incf	postinc2,f,c
 10156   004FF2  0E00               	movlw	0
 10157   004FF4  22DD               	addwfc	postdec2,f,c
 10158   004FF6                     l1383:
 10159   004FF6  0012               	return		;funcret
 10160   004FF8                     __end_of_fputc:
 10161                           	callstack 0
 10162                           
 10163 ;; *************** function _putch *****************
 10164 ;; Defined at:
 10165 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\putch.c"
 10166 ;; Parameters:    Size  Location     Type
 10167 ;;  c               1    wreg     unsigned char 
 10168 ;; Auto vars:     Size  Location     Type
 10169 ;;  c               1    0[COMRAM] unsigned char 
 10170 ;; Return value:  Size  Location     Type
 10171 ;;                  1    wreg      void 
 10172 ;; Registers used:
 10173 ;;		wreg
 10174 ;; Tracked objects:
 10175 ;;		On entry : 0/0
 10176 ;;		On exit  : 0/0
 10177 ;;		Unchanged: 0/0
 10178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10182 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10183 ;;Total ram usage:        0 bytes
 10184 ;; Hardware stack levels used: 1
 10185 ;; Hardware stack levels required when called: 2
 10186 ;; This function calls:
 10187 ;;		Nothing
 10188 ;; This function is called by:
 10189 ;;		_fputc
 10190 ;; This function uses a non-reentrant model
 10191 ;;
 10192                           
 10193                           	psect	text34
 10194   005B34                     __ptext34:
 10195                           	callstack 0
 10196   005B34                     _putch:
 10197                           	callstack 23
 10198   005B34  0012               	return		;funcret
 10199   005B36                     __end_of_putch:
 10200                           	callstack 0
 10201                           
 10202 ;; *************** function _abs *****************
 10203 ;; Defined at:
 10204 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\abs.c"
 10205 ;; Parameters:    Size  Location     Type
 10206 ;;  a               2   22[COMRAM] int 
 10207 ;; Auto vars:     Size  Location     Type
 10208 ;;		None
 10209 ;; Return value:  Size  Location     Type
 10210 ;;                  2   22[COMRAM] int 
 10211 ;; Registers used:
 10212 ;;		wreg, status,2, status,0
 10213 ;; Tracked objects:
 10214 ;;		On entry : 0/0
 10215 ;;		On exit  : 0/0
 10216 ;;		Unchanged: 0/0
 10217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10218 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10220 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10221 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10222 ;;Total ram usage:        4 bytes
 10223 ;; Hardware stack levels used: 1
 10224 ;; Hardware stack levels required when called: 2
 10225 ;; This function calls:
 10226 ;;		Nothing
 10227 ;; This function is called by:
 10228 ;;		_dtoa
 10229 ;; This function uses a non-reentrant model
 10230 ;;
 10231                           
 10232                           	psect	text35
 10233   00585C                     __ptext35:
 10234                           	callstack 0
 10235   00585C                     _abs:
 10236                           	callstack 23
 10237   00585C  BE18               	btfsc	(abs@a+1)^0,7,c
 10238   00585E  EF3B  F02C         	goto	u4310
 10239   005862  5018               	movf	(abs@a+1)^0,w,c
 10240   005864  E106               	bnz	u4311
 10241   005866  0417               	decf	abs@a^0,w,c
 10242   005868  B0D8               	btfsc	status,0,c
 10243   00586A  EF39  F02C         	goto	u4311
 10244   00586E  EF3B  F02C         	goto	u4310
 10245   005872                     u4311:
 10246   005872  EF49  F02C         	goto	l1342
 10247   005876                     u4310:
 10248   005876  C017  F019         	movff	abs@a,??_abs
 10249   00587A  C018  F01A         	movff	abs@a+1,??_abs+1
 10250   00587E  1E19               	comf	??_abs^0,f,c
 10251   005880  1E1A               	comf	(??_abs+1)^0,f,c
 10252   005882  4A19               	infsnz	??_abs^0,f,c
 10253   005884  2A1A               	incf	(??_abs+1)^0,f,c
 10254   005886  C019  F017         	movff	??_abs,?_abs
 10255   00588A  C01A  F018         	movff	??_abs+1,?_abs+1
 10256   00588E  EF4D  F02C         	goto	l1345
 10257   005892                     l1342:
 10258   005892  C017  F017         	movff	abs@a,?_abs
 10259   005896  C018  F018         	movff	abs@a+1,?_abs+1
 10260   00589A                     l1345:
 10261   00589A  0012               	return		;funcret
 10262   00589C                     __end_of_abs:
 10263                           	callstack 0
 10264                           
 10265 ;; *************** function ___aomod *****************
 10266 ;; Defined at:
 10267 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aomod.c"
 10268 ;; Parameters:    Size  Location     Type
 10269 ;;  dividend        8    4[COMRAM] long long 
 10270 ;;  divisor         8   12[COMRAM] long long 
 10271 ;; Auto vars:     Size  Location     Type
 10272 ;;  sign            1   21[COMRAM] unsigned char 
 10273 ;;  counter         1   20[COMRAM] unsigned char 
 10274 ;; Return value:  Size  Location     Type
 10275 ;;                  8    4[COMRAM] long long 
 10276 ;; Registers used:
 10277 ;;		wreg, status,2, status,0
 10278 ;; Tracked objects:
 10279 ;;		On entry : 0/0
 10280 ;;		On exit  : 0/0
 10281 ;;		Unchanged: 0/0
 10282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10283 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10284 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10286 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10287 ;;Total ram usage:       18 bytes
 10288 ;; Hardware stack levels used: 1
 10289 ;; Hardware stack levels required when called: 2
 10290 ;; This function calls:
 10291 ;;		Nothing
 10292 ;; This function is called by:
 10293 ;;		_dtoa
 10294 ;; This function uses a non-reentrant model
 10295 ;;
 10296                           
 10297                           	psect	text36
 10298   004048                     __ptext36:
 10299                           	callstack 0
 10300   004048                     ___aomod:
 10301                           	callstack 23
 10302   004048  0E00               	movlw	0
 10303   00404A  6E16               	movwf	___aomod@sign^0,c
 10304   00404C  BE0C               	btfsc	(___aomod@dividend+7)^0,7,c
 10305   00404E  EF2D  F020         	goto	u3620
 10306   004052  EF2B  F020         	goto	u3621
 10307   004056                     u3621:
 10308   004056  EF3F  F020         	goto	l3792
 10309   00405A                     u3620:
 10310   00405A  1E0C               	comf	(___aomod@dividend+7)^0,f,c
 10311   00405C  1E0B               	comf	(___aomod@dividend+6)^0,f,c
 10312   00405E  1E0A               	comf	(___aomod@dividend+5)^0,f,c
 10313   004060  1E09               	comf	(___aomod@dividend+4)^0,f,c
 10314   004062  1E08               	comf	(___aomod@dividend+3)^0,f,c
 10315   004064  1E07               	comf	(___aomod@dividend+2)^0,f,c
 10316   004066  1E06               	comf	(___aomod@dividend+1)^0,f,c
 10317   004068  6C05               	negf	___aomod@dividend^0,c
 10318   00406A  0E00               	movlw	0
 10319   00406C  2206               	addwfc	(___aomod@dividend+1)^0,f,c
 10320   00406E  2207               	addwfc	(___aomod@dividend+2)^0,f,c
 10321   004070  2208               	addwfc	(___aomod@dividend+3)^0,f,c
 10322   004072  2209               	addwfc	(___aomod@dividend+4)^0,f,c
 10323   004074  220A               	addwfc	(___aomod@dividend+5)^0,f,c
 10324   004076  220B               	addwfc	(___aomod@dividend+6)^0,f,c
 10325   004078  220C               	addwfc	(___aomod@dividend+7)^0,f,c
 10326   00407A  0E01               	movlw	1
 10327   00407C  6E16               	movwf	___aomod@sign^0,c
 10328   00407E                     l3792:
 10329   00407E  BE14               	btfsc	(___aomod@divisor+7)^0,7,c
 10330   004080  EF46  F020         	goto	u3630
 10331   004084  EF44  F020         	goto	u3631
 10332   004088                     u3631:
 10333   004088  EF56  F020         	goto	l3796
 10334   00408C                     u3630:
 10335   00408C  1E14               	comf	(___aomod@divisor+7)^0,f,c
 10336   00408E  1E13               	comf	(___aomod@divisor+6)^0,f,c
 10337   004090  1E12               	comf	(___aomod@divisor+5)^0,f,c
 10338   004092  1E11               	comf	(___aomod@divisor+4)^0,f,c
 10339   004094  1E10               	comf	(___aomod@divisor+3)^0,f,c
 10340   004096  1E0F               	comf	(___aomod@divisor+2)^0,f,c
 10341   004098  1E0E               	comf	(___aomod@divisor+1)^0,f,c
 10342   00409A  6C0D               	negf	___aomod@divisor^0,c
 10343   00409C  0E00               	movlw	0
 10344   00409E  220E               	addwfc	(___aomod@divisor+1)^0,f,c
 10345   0040A0  220F               	addwfc	(___aomod@divisor+2)^0,f,c
 10346   0040A2  2210               	addwfc	(___aomod@divisor+3)^0,f,c
 10347   0040A4  2211               	addwfc	(___aomod@divisor+4)^0,f,c
 10348   0040A6  2212               	addwfc	(___aomod@divisor+5)^0,f,c
 10349   0040A8  2213               	addwfc	(___aomod@divisor+6)^0,f,c
 10350   0040AA  2214               	addwfc	(___aomod@divisor+7)^0,f,c
 10351   0040AC                     l3796:
 10352   0040AC  500D               	movf	___aomod@divisor^0,w,c
 10353   0040AE  100E               	iorwf	(___aomod@divisor+1)^0,w,c
 10354   0040B0  100F               	iorwf	(___aomod@divisor+2)^0,w,c
 10355   0040B2  1010               	iorwf	(___aomod@divisor+3)^0,w,c
 10356   0040B4  1011               	iorwf	(___aomod@divisor+4)^0,w,c
 10357   0040B6  1012               	iorwf	(___aomod@divisor+5)^0,w,c
 10358   0040B8  1013               	iorwf	(___aomod@divisor+6)^0,w,c
 10359   0040BA  1014               	iorwf	(___aomod@divisor+7)^0,w,c
 10360   0040BC  B4D8               	btfsc	status,2,c
 10361   0040BE  EF63  F020         	goto	u3641
 10362   0040C2  EF65  F020         	goto	u3640
 10363   0040C6                     u3641:
 10364   0040C6  EFAD  F020         	goto	l3812
 10365   0040CA                     u3640:
 10366   0040CA  0E01               	movlw	1
 10367   0040CC  6E15               	movwf	___aomod@counter^0,c
 10368   0040CE  EF73  F020         	goto	l3802
 10369   0040D2                     l3800:
 10370   0040D2  90D8               	bcf	status,0,c
 10371   0040D4  360D               	rlcf	___aomod@divisor^0,f,c
 10372   0040D6  360E               	rlcf	(___aomod@divisor+1)^0,f,c
 10373   0040D8  360F               	rlcf	(___aomod@divisor+2)^0,f,c
 10374   0040DA  3610               	rlcf	(___aomod@divisor+3)^0,f,c
 10375   0040DC  3611               	rlcf	(___aomod@divisor+4)^0,f,c
 10376   0040DE  3612               	rlcf	(___aomod@divisor+5)^0,f,c
 10377   0040E0  3613               	rlcf	(___aomod@divisor+6)^0,f,c
 10378   0040E2  3614               	rlcf	(___aomod@divisor+7)^0,f,c
 10379   0040E4  2A15               	incf	___aomod@counter^0,f,c
 10380   0040E6                     l3802:
 10381   0040E6  AE14               	btfss	(___aomod@divisor+7)^0,7,c
 10382   0040E8  EF78  F020         	goto	u3651
 10383   0040EC  EF7A  F020         	goto	u3650
 10384   0040F0                     u3651:
 10385   0040F0  EF69  F020         	goto	l3800
 10386   0040F4                     u3650:
 10387   0040F4                     l3804:
 10388   0040F4  500D               	movf	___aomod@divisor^0,w,c
 10389   0040F6  5C05               	subwf	___aomod@dividend^0,w,c
 10390   0040F8  500E               	movf	(___aomod@divisor+1)^0,w,c
 10391   0040FA  5806               	subwfb	(___aomod@dividend+1)^0,w,c
 10392   0040FC  500F               	movf	(___aomod@divisor+2)^0,w,c
 10393   0040FE  5807               	subwfb	(___aomod@dividend+2)^0,w,c
 10394   004100  5010               	movf	(___aomod@divisor+3)^0,w,c
 10395   004102  5808               	subwfb	(___aomod@dividend+3)^0,w,c
 10396   004104  5011               	movf	(___aomod@divisor+4)^0,w,c
 10397   004106  5809               	subwfb	(___aomod@dividend+4)^0,w,c
 10398   004108  5012               	movf	(___aomod@divisor+5)^0,w,c
 10399   00410A  580A               	subwfb	(___aomod@dividend+5)^0,w,c
 10400   00410C  5013               	movf	(___aomod@divisor+6)^0,w,c
 10401   00410E  580B               	subwfb	(___aomod@dividend+6)^0,w,c
 10402   004110  5014               	movf	(___aomod@divisor+7)^0,w,c
 10403   004112  580C               	subwfb	(___aomod@dividend+7)^0,w,c
 10404   004114  A0D8               	btfss	status,0,c
 10405   004116  EF8F  F020         	goto	u3661
 10406   00411A  EF91  F020         	goto	u3660
 10407   00411E                     u3661:
 10408   00411E  EFA1  F020         	goto	l3808
 10409   004122                     u3660:
 10410   004122  500D               	movf	___aomod@divisor^0,w,c
 10411   004124  5E05               	subwf	___aomod@dividend^0,f,c
 10412   004126  500E               	movf	(___aomod@divisor+1)^0,w,c
 10413   004128  5A06               	subwfb	(___aomod@dividend+1)^0,f,c
 10414   00412A  500F               	movf	(___aomod@divisor+2)^0,w,c
 10415   00412C  5A07               	subwfb	(___aomod@dividend+2)^0,f,c
 10416   00412E  5010               	movf	(___aomod@divisor+3)^0,w,c
 10417   004130  5A08               	subwfb	(___aomod@dividend+3)^0,f,c
 10418   004132  5011               	movf	(___aomod@divisor+4)^0,w,c
 10419   004134  5A09               	subwfb	(___aomod@dividend+4)^0,f,c
 10420   004136  5012               	movf	(___aomod@divisor+5)^0,w,c
 10421   004138  5A0A               	subwfb	(___aomod@dividend+5)^0,f,c
 10422   00413A  5013               	movf	(___aomod@divisor+6)^0,w,c
 10423   00413C  5A0B               	subwfb	(___aomod@dividend+6)^0,f,c
 10424   00413E  5014               	movf	(___aomod@divisor+7)^0,w,c
 10425   004140  5A0C               	subwfb	(___aomod@dividend+7)^0,f,c
 10426   004142                     l3808:
 10427   004142  90D8               	bcf	status,0,c
 10428   004144  3214               	rrcf	(___aomod@divisor+7)^0,f,c
 10429   004146  3213               	rrcf	(___aomod@divisor+6)^0,f,c
 10430   004148  3212               	rrcf	(___aomod@divisor+5)^0,f,c
 10431   00414A  3211               	rrcf	(___aomod@divisor+4)^0,f,c
 10432   00414C  3210               	rrcf	(___aomod@divisor+3)^0,f,c
 10433   00414E  320F               	rrcf	(___aomod@divisor+2)^0,f,c
 10434   004150  320E               	rrcf	(___aomod@divisor+1)^0,f,c
 10435   004152  320D               	rrcf	___aomod@divisor^0,f,c
 10436   004154  2E15               	decfsz	___aomod@counter^0,f,c
 10437   004156  EF7A  F020         	goto	l3804
 10438   00415A                     l3812:
 10439   00415A  5016               	movf	___aomod@sign^0,w,c
 10440   00415C  B4D8               	btfsc	status,2,c
 10441   00415E  EFB3  F020         	goto	u3671
 10442   004162  EFB5  F020         	goto	u3670
 10443   004166                     u3671:
 10444   004166  EFC5  F020         	goto	l3816
 10445   00416A                     u3670:
 10446   00416A  1E0C               	comf	(___aomod@dividend+7)^0,f,c
 10447   00416C  1E0B               	comf	(___aomod@dividend+6)^0,f,c
 10448   00416E  1E0A               	comf	(___aomod@dividend+5)^0,f,c
 10449   004170  1E09               	comf	(___aomod@dividend+4)^0,f,c
 10450   004172  1E08               	comf	(___aomod@dividend+3)^0,f,c
 10451   004174  1E07               	comf	(___aomod@dividend+2)^0,f,c
 10452   004176  1E06               	comf	(___aomod@dividend+1)^0,f,c
 10453   004178  6C05               	negf	___aomod@dividend^0,c
 10454   00417A  0E00               	movlw	0
 10455   00417C  2206               	addwfc	(___aomod@dividend+1)^0,f,c
 10456   00417E  2207               	addwfc	(___aomod@dividend+2)^0,f,c
 10457   004180  2208               	addwfc	(___aomod@dividend+3)^0,f,c
 10458   004182  2209               	addwfc	(___aomod@dividend+4)^0,f,c
 10459   004184  220A               	addwfc	(___aomod@dividend+5)^0,f,c
 10460   004186  220B               	addwfc	(___aomod@dividend+6)^0,f,c
 10461   004188  220C               	addwfc	(___aomod@dividend+7)^0,f,c
 10462   00418A                     l3816:
 10463   00418A  C005  F005         	movff	___aomod@dividend,?___aomod
 10464   00418E  C006  F006         	movff	___aomod@dividend+1,?___aomod+1
 10465   004192  C007  F007         	movff	___aomod@dividend+2,?___aomod+2
 10466   004196  C008  F008         	movff	___aomod@dividend+3,?___aomod+3
 10467   00419A  C009  F009         	movff	___aomod@dividend+4,?___aomod+4
 10468   00419E  C00A  F00A         	movff	___aomod@dividend+5,?___aomod+5
 10469   0041A2  C00B  F00B         	movff	___aomod@dividend+6,?___aomod+6
 10470   0041A6  C00C  F00C         	movff	___aomod@dividend+7,?___aomod+7
 10471   0041AA  0012               	return		;funcret
 10472   0041AC                     __end_of___aomod:
 10473                           	callstack 0
 10474                           
 10475 ;; *************** function ___aodiv *****************
 10476 ;; Defined at:
 10477 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aodiv.c"
 10478 ;; Parameters:    Size  Location     Type
 10479 ;;  dividend        8    4[COMRAM] long long 
 10480 ;;  divisor         8   12[COMRAM] long long 
 10481 ;; Auto vars:     Size  Location     Type
 10482 ;;  quotient        8   22[COMRAM] long long 
 10483 ;;  sign            1   21[COMRAM] unsigned char 
 10484 ;;  counter         1   20[COMRAM] unsigned char 
 10485 ;; Return value:  Size  Location     Type
 10486 ;;                  8    4[COMRAM] long long 
 10487 ;; Registers used:
 10488 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10489 ;; Tracked objects:
 10490 ;;		On entry : 0/0
 10491 ;;		On exit  : 0/0
 10492 ;;		Unchanged: 0/0
 10493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10494 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10495 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10497 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10498 ;;Total ram usage:       26 bytes
 10499 ;; Hardware stack levels used: 1
 10500 ;; Hardware stack levels required when called: 2
 10501 ;; This function calls:
 10502 ;;		Nothing
 10503 ;; This function is called by:
 10504 ;;		_dtoa
 10505 ;; This function uses a non-reentrant model
 10506 ;;
 10507                           
 10508                           	psect	text37
 10509   003D54                     __ptext37:
 10510                           	callstack 0
 10511   003D54                     ___aodiv:
 10512                           	callstack 23
 10513   003D54  0E00               	movlw	0
 10514   003D56  6E16               	movwf	___aodiv@sign^0,c
 10515   003D58  BE14               	btfsc	(___aodiv@divisor+7)^0,7,c
 10516   003D5A  EFB3  F01E         	goto	u3550
 10517   003D5E  EFB1  F01E         	goto	u3551
 10518   003D62                     u3551:
 10519   003D62  EFC5  F01E         	goto	l3748
 10520   003D66                     u3550:
 10521   003D66  1E14               	comf	(___aodiv@divisor+7)^0,f,c
 10522   003D68  1E13               	comf	(___aodiv@divisor+6)^0,f,c
 10523   003D6A  1E12               	comf	(___aodiv@divisor+5)^0,f,c
 10524   003D6C  1E11               	comf	(___aodiv@divisor+4)^0,f,c
 10525   003D6E  1E10               	comf	(___aodiv@divisor+3)^0,f,c
 10526   003D70  1E0F               	comf	(___aodiv@divisor+2)^0,f,c
 10527   003D72  1E0E               	comf	(___aodiv@divisor+1)^0,f,c
 10528   003D74  6C0D               	negf	___aodiv@divisor^0,c
 10529   003D76  0E00               	movlw	0
 10530   003D78  220E               	addwfc	(___aodiv@divisor+1)^0,f,c
 10531   003D7A  220F               	addwfc	(___aodiv@divisor+2)^0,f,c
 10532   003D7C  2210               	addwfc	(___aodiv@divisor+3)^0,f,c
 10533   003D7E  2211               	addwfc	(___aodiv@divisor+4)^0,f,c
 10534   003D80  2212               	addwfc	(___aodiv@divisor+5)^0,f,c
 10535   003D82  2213               	addwfc	(___aodiv@divisor+6)^0,f,c
 10536   003D84  2214               	addwfc	(___aodiv@divisor+7)^0,f,c
 10537   003D86  0E01               	movlw	1
 10538   003D88  6E16               	movwf	___aodiv@sign^0,c
 10539   003D8A                     l3748:
 10540   003D8A  BE0C               	btfsc	(___aodiv@dividend+7)^0,7,c
 10541   003D8C  EFCC  F01E         	goto	u3560
 10542   003D90  EFCA  F01E         	goto	u3561
 10543   003D94                     u3561:
 10544   003D94  EFDE  F01E         	goto	l3754
 10545   003D98                     u3560:
 10546   003D98  1E0C               	comf	(___aodiv@dividend+7)^0,f,c
 10547   003D9A  1E0B               	comf	(___aodiv@dividend+6)^0,f,c
 10548   003D9C  1E0A               	comf	(___aodiv@dividend+5)^0,f,c
 10549   003D9E  1E09               	comf	(___aodiv@dividend+4)^0,f,c
 10550   003DA0  1E08               	comf	(___aodiv@dividend+3)^0,f,c
 10551   003DA2  1E07               	comf	(___aodiv@dividend+2)^0,f,c
 10552   003DA4  1E06               	comf	(___aodiv@dividend+1)^0,f,c
 10553   003DA6  6C05               	negf	___aodiv@dividend^0,c
 10554   003DA8  0E00               	movlw	0
 10555   003DAA  2206               	addwfc	(___aodiv@dividend+1)^0,f,c
 10556   003DAC  2207               	addwfc	(___aodiv@dividend+2)^0,f,c
 10557   003DAE  2208               	addwfc	(___aodiv@dividend+3)^0,f,c
 10558   003DB0  2209               	addwfc	(___aodiv@dividend+4)^0,f,c
 10559   003DB2  220A               	addwfc	(___aodiv@dividend+5)^0,f,c
 10560   003DB4  220B               	addwfc	(___aodiv@dividend+6)^0,f,c
 10561   003DB6  220C               	addwfc	(___aodiv@dividend+7)^0,f,c
 10562   003DB8  0E01               	movlw	1
 10563   003DBA  1A16               	xorwf	___aodiv@sign^0,f,c
 10564   003DBC                     l3754:
 10565   003DBC  EE20  F017         	lfsr	2,___aodiv@quotient
 10566   003DC0  0E07               	movlw	7
 10567   003DC2                     u3571:
 10568   003DC2  6ADE               	clrf	postinc2,c
 10569   003DC4  06E8               	decf	wreg,f,c
 10570   003DC6  E2FD               	bc	u3571
 10571   003DC8  500D               	movf	___aodiv@divisor^0,w,c
 10572   003DCA  100E               	iorwf	(___aodiv@divisor+1)^0,w,c
 10573   003DCC  100F               	iorwf	(___aodiv@divisor+2)^0,w,c
 10574   003DCE  1010               	iorwf	(___aodiv@divisor+3)^0,w,c
 10575   003DD0  1011               	iorwf	(___aodiv@divisor+4)^0,w,c
 10576   003DD2  1012               	iorwf	(___aodiv@divisor+5)^0,w,c
 10577   003DD4  1013               	iorwf	(___aodiv@divisor+6)^0,w,c
 10578   003DD6  1014               	iorwf	(___aodiv@divisor+7)^0,w,c
 10579   003DD8  B4D8               	btfsc	status,2,c
 10580   003DDA  EFF1  F01E         	goto	u3581
 10581   003DDE  EFF3  F01E         	goto	u3580
 10582   003DE2                     u3581:
 10583   003DE2  EF45  F01F         	goto	l3776
 10584   003DE6                     u3580:
 10585   003DE6  0E01               	movlw	1
 10586   003DE8  6E15               	movwf	___aodiv@counter^0,c
 10587   003DEA  EF01  F01F         	goto	l3762
 10588   003DEE                     l3760:
 10589   003DEE  90D8               	bcf	status,0,c
 10590   003DF0  360D               	rlcf	___aodiv@divisor^0,f,c
 10591   003DF2  360E               	rlcf	(___aodiv@divisor+1)^0,f,c
 10592   003DF4  360F               	rlcf	(___aodiv@divisor+2)^0,f,c
 10593   003DF6  3610               	rlcf	(___aodiv@divisor+3)^0,f,c
 10594   003DF8  3611               	rlcf	(___aodiv@divisor+4)^0,f,c
 10595   003DFA  3612               	rlcf	(___aodiv@divisor+5)^0,f,c
 10596   003DFC  3613               	rlcf	(___aodiv@divisor+6)^0,f,c
 10597   003DFE  3614               	rlcf	(___aodiv@divisor+7)^0,f,c
 10598   003E00  2A15               	incf	___aodiv@counter^0,f,c
 10599   003E02                     l3762:
 10600   003E02  AE14               	btfss	(___aodiv@divisor+7)^0,7,c
 10601   003E04  EF06  F01F         	goto	u3591
 10602   003E08  EF08  F01F         	goto	u3590
 10603   003E0C                     u3591:
 10604   003E0C  EFF7  F01E         	goto	l3760
 10605   003E10                     u3590:
 10606   003E10                     l3764:
 10607   003E10  90D8               	bcf	status,0,c
 10608   003E12  3617               	rlcf	___aodiv@quotient^0,f,c
 10609   003E14  3618               	rlcf	(___aodiv@quotient+1)^0,f,c
 10610   003E16  3619               	rlcf	(___aodiv@quotient+2)^0,f,c
 10611   003E18  361A               	rlcf	(___aodiv@quotient+3)^0,f,c
 10612   003E1A  361B               	rlcf	(___aodiv@quotient+4)^0,f,c
 10613   003E1C  361C               	rlcf	(___aodiv@quotient+5)^0,f,c
 10614   003E1E  361D               	rlcf	(___aodiv@quotient+6)^0,f,c
 10615   003E20  361E               	rlcf	(___aodiv@quotient+7)^0,f,c
 10616   003E22  500D               	movf	___aodiv@divisor^0,w,c
 10617   003E24  5C05               	subwf	___aodiv@dividend^0,w,c
 10618   003E26  500E               	movf	(___aodiv@divisor+1)^0,w,c
 10619   003E28  5806               	subwfb	(___aodiv@dividend+1)^0,w,c
 10620   003E2A  500F               	movf	(___aodiv@divisor+2)^0,w,c
 10621   003E2C  5807               	subwfb	(___aodiv@dividend+2)^0,w,c
 10622   003E2E  5010               	movf	(___aodiv@divisor+3)^0,w,c
 10623   003E30  5808               	subwfb	(___aodiv@dividend+3)^0,w,c
 10624   003E32  5011               	movf	(___aodiv@divisor+4)^0,w,c
 10625   003E34  5809               	subwfb	(___aodiv@dividend+4)^0,w,c
 10626   003E36  5012               	movf	(___aodiv@divisor+5)^0,w,c
 10627   003E38  580A               	subwfb	(___aodiv@dividend+5)^0,w,c
 10628   003E3A  5013               	movf	(___aodiv@divisor+6)^0,w,c
 10629   003E3C  580B               	subwfb	(___aodiv@dividend+6)^0,w,c
 10630   003E3E  5014               	movf	(___aodiv@divisor+7)^0,w,c
 10631   003E40  580C               	subwfb	(___aodiv@dividend+7)^0,w,c
 10632   003E42  A0D8               	btfss	status,0,c
 10633   003E44  EF26  F01F         	goto	u3601
 10634   003E48  EF28  F01F         	goto	u3600
 10635   003E4C                     u3601:
 10636   003E4C  EF39  F01F         	goto	l3772
 10637   003E50                     u3600:
 10638   003E50  500D               	movf	___aodiv@divisor^0,w,c
 10639   003E52  5E05               	subwf	___aodiv@dividend^0,f,c
 10640   003E54  500E               	movf	(___aodiv@divisor+1)^0,w,c
 10641   003E56  5A06               	subwfb	(___aodiv@dividend+1)^0,f,c
 10642   003E58  500F               	movf	(___aodiv@divisor+2)^0,w,c
 10643   003E5A  5A07               	subwfb	(___aodiv@dividend+2)^0,f,c
 10644   003E5C  5010               	movf	(___aodiv@divisor+3)^0,w,c
 10645   003E5E  5A08               	subwfb	(___aodiv@dividend+3)^0,f,c
 10646   003E60  5011               	movf	(___aodiv@divisor+4)^0,w,c
 10647   003E62  5A09               	subwfb	(___aodiv@dividend+4)^0,f,c
 10648   003E64  5012               	movf	(___aodiv@divisor+5)^0,w,c
 10649   003E66  5A0A               	subwfb	(___aodiv@dividend+5)^0,f,c
 10650   003E68  5013               	movf	(___aodiv@divisor+6)^0,w,c
 10651   003E6A  5A0B               	subwfb	(___aodiv@dividend+6)^0,f,c
 10652   003E6C  5014               	movf	(___aodiv@divisor+7)^0,w,c
 10653   003E6E  5A0C               	subwfb	(___aodiv@dividend+7)^0,f,c
 10654   003E70  8017               	bsf	___aodiv@quotient^0,0,c
 10655   003E72                     l3772:
 10656   003E72  90D8               	bcf	status,0,c
 10657   003E74  3214               	rrcf	(___aodiv@divisor+7)^0,f,c
 10658   003E76  3213               	rrcf	(___aodiv@divisor+6)^0,f,c
 10659   003E78  3212               	rrcf	(___aodiv@divisor+5)^0,f,c
 10660   003E7A  3211               	rrcf	(___aodiv@divisor+4)^0,f,c
 10661   003E7C  3210               	rrcf	(___aodiv@divisor+3)^0,f,c
 10662   003E7E  320F               	rrcf	(___aodiv@divisor+2)^0,f,c
 10663   003E80  320E               	rrcf	(___aodiv@divisor+1)^0,f,c
 10664   003E82  320D               	rrcf	___aodiv@divisor^0,f,c
 10665   003E84  2E15               	decfsz	___aodiv@counter^0,f,c
 10666   003E86  EF08  F01F         	goto	l3764
 10667   003E8A                     l3776:
 10668   003E8A  5016               	movf	___aodiv@sign^0,w,c
 10669   003E8C  B4D8               	btfsc	status,2,c
 10670   003E8E  EF4B  F01F         	goto	u3611
 10671   003E92  EF4D  F01F         	goto	u3610
 10672   003E96                     u3611:
 10673   003E96  EF5D  F01F         	goto	l3780
 10674   003E9A                     u3610:
 10675   003E9A  1E1E               	comf	(___aodiv@quotient+7)^0,f,c
 10676   003E9C  1E1D               	comf	(___aodiv@quotient+6)^0,f,c
 10677   003E9E  1E1C               	comf	(___aodiv@quotient+5)^0,f,c
 10678   003EA0  1E1B               	comf	(___aodiv@quotient+4)^0,f,c
 10679   003EA2  1E1A               	comf	(___aodiv@quotient+3)^0,f,c
 10680   003EA4  1E19               	comf	(___aodiv@quotient+2)^0,f,c
 10681   003EA6  1E18               	comf	(___aodiv@quotient+1)^0,f,c
 10682   003EA8  6C17               	negf	___aodiv@quotient^0,c
 10683   003EAA  0E00               	movlw	0
 10684   003EAC  2218               	addwfc	(___aodiv@quotient+1)^0,f,c
 10685   003EAE  2219               	addwfc	(___aodiv@quotient+2)^0,f,c
 10686   003EB0  221A               	addwfc	(___aodiv@quotient+3)^0,f,c
 10687   003EB2  221B               	addwfc	(___aodiv@quotient+4)^0,f,c
 10688   003EB4  221C               	addwfc	(___aodiv@quotient+5)^0,f,c
 10689   003EB6  221D               	addwfc	(___aodiv@quotient+6)^0,f,c
 10690   003EB8  221E               	addwfc	(___aodiv@quotient+7)^0,f,c
 10691   003EBA                     l3780:
 10692   003EBA  C017  F005         	movff	___aodiv@quotient,?___aodiv
 10693   003EBE  C018  F006         	movff	___aodiv@quotient+1,?___aodiv+1
 10694   003EC2  C019  F007         	movff	___aodiv@quotient+2,?___aodiv+2
 10695   003EC6  C01A  F008         	movff	___aodiv@quotient+3,?___aodiv+3
 10696   003ECA  C01B  F009         	movff	___aodiv@quotient+4,?___aodiv+4
 10697   003ECE  C01C  F00A         	movff	___aodiv@quotient+5,?___aodiv+5
 10698   003ED2  C01D  F00B         	movff	___aodiv@quotient+6,?___aodiv+6
 10699   003ED6  C01E  F00C         	movff	___aodiv@quotient+7,?___aodiv+7
 10700   003EDA  0012               	return		;funcret
 10701   003EDC                     __end_of___aodiv:
 10702                           	callstack 0
 10703                           
 10704 ;; *************** function _sendTxBuf *****************
 10705 ;; Defined at:
 10706 ;;		line 126 in file "serialTest.c"
 10707 ;; Parameters:    Size  Location     Type
 10708 ;;		None
 10709 ;; Auto vars:     Size  Location     Type
 10710 ;;		None
 10711 ;; Return value:  Size  Location     Type
 10712 ;;                  1    wreg      void 
 10713 ;; Registers used:
 10714 ;;		wreg, status,2, status,0, cstack
 10715 ;; Tracked objects:
 10716 ;;		On entry : 0/0
 10717 ;;		On exit  : 0/0
 10718 ;;		Unchanged: 0/0
 10719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10721 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10722 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10723 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10724 ;;Total ram usage:        0 bytes
 10725 ;; Hardware stack levels used: 1
 10726 ;; Hardware stack levels required when called: 3
 10727 ;; This function calls:
 10728 ;;		_isDataInTxBuf
 10729 ;; This function is called by:
 10730 ;;		_colorDetect
 10731 ;; This function uses a non-reentrant model
 10732 ;;
 10733                           
 10734                           	psect	text38
 10735   005ABC                     __ptext38:
 10736                           	callstack 0
 10737   005ABC                     _sendTxBuf:
 10738                           	callstack 26
 10739   005ABC                     
 10740                           ;serialTest.c: 127:     if (isDataInTxBuf()) {PIE4bits.TX4IE=1;}
 10741   005ABC  EC6B  F02D         	call	_isDataInTxBuf	;wreg free
 10742   005AC0  0900               	iorlw	0
 10743   005AC2  B4D8               	btfsc	status,2,c
 10744   005AC4  EF66  F02D         	goto	u5231
 10745   005AC8  EF68  F02D         	goto	u5230
 10746   005ACC                     u5231:
 10747   005ACC  EF6A  F02D         	goto	l501
 10748   005AD0                     u5230:
 10749   005AD0  010E               	movlb	14	; () banked
 10750   005AD2  852D               	bsf	45,2,b	;volatile
 10751   005AD4                     l501:
 10752   005AD4  0012               	return		;funcret
 10753   005AD6                     __end_of_sendTxBuf:
 10754                           	callstack 0
 10755                           
 10756 ;; *************** function _isDataInTxBuf *****************
 10757 ;; Defined at:
 10758 ;;		line 113 in file "serialTest.c"
 10759 ;; Parameters:    Size  Location     Type
 10760 ;;		None
 10761 ;; Auto vars:     Size  Location     Type
 10762 ;;		None
 10763 ;; Return value:  Size  Location     Type
 10764 ;;                  1    wreg      unsigned char 
 10765 ;; Registers used:
 10766 ;;		wreg, status,2, status,0
 10767 ;; Tracked objects:
 10768 ;;		On entry : 0/0
 10769 ;;		On exit  : 0/0
 10770 ;;		Unchanged: 0/0
 10771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10775 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10776 ;;Total ram usage:        0 bytes
 10777 ;; Hardware stack levels used: 1
 10778 ;; Hardware stack levels required when called: 2
 10779 ;; This function calls:
 10780 ;;		Nothing
 10781 ;; This function is called by:
 10782 ;;		_sendTxBuf
 10783 ;; This function uses a non-reentrant model
 10784 ;;
 10785                           
 10786                           	psect	text39
 10787   005AD6                     __ptext39:
 10788                           	callstack 0
 10789   005AD6                     _isDataInTxBuf:
 10790                           	callstack 26
 10791   005AD6                     
 10792                           ;serialTest.c: 114:     return (TxBufWriteCnt!=TxBufReadCnt);
 10793   005AD6  5057               	movf	_TxBufReadCnt^0,w,c	;volatile
 10794   005AD8  1858               	xorwf	_TxBufWriteCnt^0,w,c	;volatile
 10795   005ADA  A4D8               	btfss	status,2,c
 10796   005ADC  EF72  F02D         	goto	u5191
 10797   005AE0  EF75  F02D         	goto	u5190
 10798   005AE4                     u5191:
 10799   005AE4  0E01               	movlw	1
 10800   005AE6  EF76  F02D         	goto	u5200
 10801   005AEA                     u5190:
 10802   005AEA  0E00               	movlw	0
 10803   005AEC                     u5200:
 10804   005AEC  0012               	return		;funcret
 10805   005AEE                     __end_of_isDataInTxBuf:
 10806                           	callstack 0
 10807                           
 10808 ;; *************** function _reverseSquareRight *****************
 10809 ;; Defined at:
 10810 ;;		line 361 in file "MazeRobot.X/dc_motor.c"
 10811 ;; Parameters:    Size  Location     Type
 10812 ;;  mL              2   35[COMRAM] PTR struct DC_motor
 10813 ;;		 -> main@motorLeft(9), 
 10814 ;;  mR              2   37[COMRAM] PTR struct DC_motor
 10815 ;;		 -> main@motorRight(9), 
 10816 ;; Auto vars:     Size  Location     Type
 10817 ;;		None
 10818 ;; Return value:  Size  Location     Type
 10819 ;;                  1    wreg      void 
 10820 ;; Registers used:
 10821 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10822 ;; Tracked objects:
 10823 ;;		On entry : 0/0
 10824 ;;		On exit  : 0/0
 10825 ;;		Unchanged: 0/0
 10826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10827 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10829 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10830 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10831 ;;Total ram usage:        6 bytes
 10832 ;; Hardware stack levels used: 1
 10833 ;; Hardware stack levels required when called: 6
 10834 ;; This function calls:
 10835 ;;		_reverse
 10836 ;;		_stop
 10837 ;;		_turnRight_90
 10838 ;; This function is called by:
 10839 ;;		_colorDetect
 10840 ;; This function uses a non-reentrant model
 10841 ;;
 10842                           
 10843                           	psect	text40
 10844   005150                     __ptext40:
 10845                           	callstack 0
 10846   005150                     _reverseSquareRight:
 10847                           	callstack 23
 10848   005150                     
 10849                           ;MazeRobot.X/dc_motor.c: 361: void reverseSquareRight(DC_motor *mL, DC_motor *mR);MazeRo
      +                          bot.X/dc_motor.c: 362: {;MazeRobot.X/dc_motor.c: 364:     reverse(mL, mR);
 10850   005150  C024  F018         	movff	reverseSquareRight@mL,reverse@mL
 10851   005154  C025  F019         	movff	reverseSquareRight@mL+1,reverse@mL+1
 10852   005158  C026  F01A         	movff	reverseSquareRight@mR,reverse@mR
 10853   00515C  C027  F01B         	movff	reverseSquareRight@mR+1,reverse@mR+1
 10854   005160  ECC3  F026         	call	_reverse	;wreg free
 10855   005164                     
 10856                           ;MazeRobot.X/dc_motor.c: 365:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
 10857   005164  0E39               	movlw	57
 10858   005166  6E29               	movwf	(??_reverseSquareRight+1)^0,c
 10859   005168  0ED2               	movlw	210
 10860   00516A  6E28               	movwf	??_reverseSquareRight^0,c
 10861   00516C  0E4C               	movlw	76
 10862   00516E                     u7477:
 10863   00516E  2EE8               	decfsz	wreg,f,c
 10864   005170  D7FE               	bra	u7477
 10865   005172  2E28               	decfsz	??_reverseSquareRight^0,f,c
 10866   005174  D7FC               	bra	u7477
 10867   005176  2E29               	decfsz	(??_reverseSquareRight+1)^0,f,c
 10868   005178  D7FA               	bra	u7477
 10869   00517A  D000               	nop2	
 10870   00517C                     
 10871                           ;MazeRobot.X/dc_motor.c: 367:     stop(mL, mR);
 10872   00517C  C024  F018         	movff	reverseSquareRight@mL,stop@mL
 10873   005180  C025  F019         	movff	reverseSquareRight@mL+1,stop@mL+1
 10874   005184  C026  F01A         	movff	reverseSquareRight@mR,stop@mR
 10875   005188  C027  F01B         	movff	reverseSquareRight@mR+1,stop@mR+1
 10876   00518C  ECFC  F027         	call	_stop	;wreg free
 10877   005190                     
 10878                           ;MazeRobot.X/dc_motor.c: 369:     reverse(mL, mR);
 10879   005190  C024  F018         	movff	reverseSquareRight@mL,reverse@mL
 10880   005194  C025  F019         	movff	reverseSquareRight@mL+1,reverse@mL+1
 10881   005198  C026  F01A         	movff	reverseSquareRight@mR,reverse@mR
 10882   00519C  C027  F01B         	movff	reverseSquareRight@mR+1,reverse@mR+1
 10883   0051A0  ECC3  F026         	call	_reverse	;wreg free
 10884   0051A4                     
 10885                           ;MazeRobot.X/dc_motor.c: 370:     _delay((unsigned long)((2*reverse_time)*(64000000/4000
      +                          .0)));
 10886   0051A4  0E72               	movlw	114
 10887   0051A6  6E29               	movwf	(??_reverseSquareRight+1)^0,c
 10888   0051A8  0EA3               	movlw	163
 10889   0051AA  6E28               	movwf	??_reverseSquareRight^0,c
 10890   0051AC  0E9B               	movlw	155
 10891   0051AE                     u7487:
 10892   0051AE  2EE8               	decfsz	wreg,f,c
 10893   0051B0  D7FE               	bra	u7487
 10894   0051B2  2E28               	decfsz	??_reverseSquareRight^0,f,c
 10895   0051B4  D7FC               	bra	u7487
 10896   0051B6  2E29               	decfsz	(??_reverseSquareRight+1)^0,f,c
 10897   0051B8  D7FA               	bra	u7487
 10898   0051BA  F000               	nop	
 10899                           
 10900                           ;MazeRobot.X/dc_motor.c: 372:     turnRight_90(mL,mR);
 10901   0051BC  C024  F01E         	movff	reverseSquareRight@mL,turnRight_90@mL
 10902   0051C0  C025  F01F         	movff	reverseSquareRight@mL+1,turnRight_90@mL+1
 10903   0051C4  C026  F020         	movff	reverseSquareRight@mR,turnRight_90@mR
 10904   0051C8  C027  F021         	movff	reverseSquareRight@mR+1,turnRight_90@mR+1
 10905   0051CC  EC14  F022         	call	_turnRight_90	;wreg free
 10906                           
 10907                           ;MazeRobot.X/dc_motor.c: 374:     stop(mL, mR);
 10908   0051D0  C024  F018         	movff	reverseSquareRight@mL,stop@mL
 10909   0051D4  C025  F019         	movff	reverseSquareRight@mL+1,stop@mL+1
 10910   0051D8  C026  F01A         	movff	reverseSquareRight@mR,stop@mR
 10911   0051DC  C027  F01B         	movff	reverseSquareRight@mR+1,stop@mR+1
 10912   0051E0  ECFC  F027         	call	_stop	;wreg free
 10913   0051E4  0012               	return		;funcret
 10914   0051E6                     __end_of_reverseSquareRight:
 10915                           	callstack 0
 10916                           
 10917 ;; *************** function _turnRight_90 *****************
 10918 ;; Defined at:
 10919 ;;		line 267 in file "MazeRobot.X/dc_motor.c"
 10920 ;; Parameters:    Size  Location     Type
 10921 ;;  mL              2   29[COMRAM] PTR struct DC_motor
 10922 ;;		 -> main@motorLeft(9), 
 10923 ;;  mR              2   31[COMRAM] PTR struct DC_motor
 10924 ;;		 -> main@motorRight(9), 
 10925 ;; Auto vars:     Size  Location     Type
 10926 ;;		None
 10927 ;; Return value:  Size  Location     Type
 10928 ;;                  1    wreg      void 
 10929 ;; Registers used:
 10930 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10931 ;; Tracked objects:
 10932 ;;		On entry : 0/0
 10933 ;;		On exit  : 0/0
 10934 ;;		Unchanged: 0/0
 10935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10936 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10938 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10939 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10940 ;;Total ram usage:        6 bytes
 10941 ;; Hardware stack levels used: 1
 10942 ;; Hardware stack levels required when called: 5
 10943 ;; This function calls:
 10944 ;;		_reverse
 10945 ;;		_setMotorPWM
 10946 ;;		_stop
 10947 ;; This function is called by:
 10948 ;;		_colorDetect
 10949 ;;		_reverseSquareRight
 10950 ;; This function uses a non-reentrant model
 10951 ;;
 10952                           
 10953                           	psect	text41
 10954   004428                     __ptext41:
 10955                           	callstack 0
 10956   004428                     _turnRight_90:
 10957                           	callstack 24
 10958   004428                     
 10959                           ;MazeRobot.X/dc_motor.c: 267: void turnRight_90(DC_motor *mL, DC_motor *mR);MazeRobot.X/
      +                          dc_motor.c: 268: {;MazeRobot.X/dc_motor.c: 269:     stop(mL, mR);
 10960   004428  C01E  F018         	movff	turnRight_90@mL,stop@mL
 10961   00442C  C01F  F019         	movff	turnRight_90@mL+1,stop@mL+1
 10962   004430  C020  F01A         	movff	turnRight_90@mR,stop@mR
 10963   004434  C021  F01B         	movff	turnRight_90@mR+1,stop@mR+1
 10964   004438  ECFC  F027         	call	_stop	;wreg free
 10965   00443C                     
 10966                           ;MazeRobot.X/dc_motor.c: 270:     _delay((unsigned long)((100)*(64000000/4000.0)));
 10967   00443C  0E09               	movlw	9
 10968   00443E  6E23               	movwf	(??_turnRight_90+1)^0,c
 10969   004440  0E1E               	movlw	30
 10970   004442  6E22               	movwf	??_turnRight_90^0,c
 10971   004444  0EE4               	movlw	228
 10972   004446                     u7497:
 10973   004446  2EE8               	decfsz	wreg,f,c
 10974   004448  D7FE               	bra	u7497
 10975   00444A  2E22               	decfsz	??_turnRight_90^0,f,c
 10976   00444C  D7FC               	bra	u7497
 10977   00444E  2E23               	decfsz	(??_turnRight_90+1)^0,f,c
 10978   004450  D7FA               	bra	u7497
 10979   004452  D000               	nop2	
 10980   004454                     
 10981                           ;MazeRobot.X/dc_motor.c: 272:     reverse(mL, mR);
 10982   004454  C01E  F018         	movff	turnRight_90@mL,reverse@mL
 10983   004458  C01F  F019         	movff	turnRight_90@mL+1,reverse@mL+1
 10984   00445C  C020  F01A         	movff	turnRight_90@mR,reverse@mR
 10985   004460  C021  F01B         	movff	turnRight_90@mR+1,reverse@mR+1
 10986   004464  ECC3  F026         	call	_reverse	;wreg free
 10987                           
 10988                           ;MazeRobot.X/dc_motor.c: 273:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
 10989   004468  0E39               	movlw	57
 10990   00446A  6E23               	movwf	(??_turnRight_90+1)^0,c
 10991   00446C  0ED2               	movlw	210
 10992   00446E  6E22               	movwf	??_turnRight_90^0,c
 10993   004470  0E4C               	movlw	76
 10994   004472                     u7507:
 10995   004472  2EE8               	decfsz	wreg,f,c
 10996   004474  D7FE               	bra	u7507
 10997   004476  2E22               	decfsz	??_turnRight_90^0,f,c
 10998   004478  D7FC               	bra	u7507
 10999   00447A  2E23               	decfsz	(??_turnRight_90+1)^0,f,c
 11000   00447C  D7FA               	bra	u7507
 11001   00447E  D000               	nop2	
 11002   004480                     
 11003                           ;MazeRobot.X/dc_motor.c: 275:     stop(mL, mR);
 11004   004480  C01E  F018         	movff	turnRight_90@mL,stop@mL
 11005   004484  C01F  F019         	movff	turnRight_90@mL+1,stop@mL+1
 11006   004488  C020  F01A         	movff	turnRight_90@mR,stop@mR
 11007   00448C  C021  F01B         	movff	turnRight_90@mR+1,stop@mR+1
 11008   004490  ECFC  F027         	call	_stop	;wreg free
 11009   004494                     
 11010                           ;MazeRobot.X/dc_motor.c: 277:     mL->direction = 1;
 11011   004494  EE20 F001          	lfsr	2,1
 11012   004498  501E               	movf	turnRight_90@mL^0,w,c
 11013   00449A  26D9               	addwf	fsr2l,f,c
 11014   00449C  501F               	movf	(turnRight_90@mL+1)^0,w,c
 11015   00449E  22DA               	addwfc	fsr2h,f,c
 11016   0044A0  0E01               	movlw	1
 11017   0044A2  6EDF               	movwf	indf2,c
 11018   0044A4                     
 11019                           ;MazeRobot.X/dc_motor.c: 278:     mR->direction = 0;
 11020   0044A4  EE20 F001          	lfsr	2,1
 11021   0044A8  5020               	movf	turnRight_90@mR^0,w,c
 11022   0044AA  26D9               	addwf	fsr2l,f,c
 11023   0044AC  5021               	movf	(turnRight_90@mR+1)^0,w,c
 11024   0044AE  22DA               	addwfc	fsr2h,f,c
 11025   0044B0  0E00               	movlw	0
 11026   0044B2  6EDF               	movwf	indf2,c
 11027   0044B4                     
 11028                           ;MazeRobot.X/dc_motor.c: 280:     mL->brakemode = 1;
 11029   0044B4  EE20 F002          	lfsr	2,2
 11030   0044B8  501E               	movf	turnRight_90@mL^0,w,c
 11031   0044BA  26D9               	addwf	fsr2l,f,c
 11032   0044BC  501F               	movf	(turnRight_90@mL+1)^0,w,c
 11033   0044BE  22DA               	addwfc	fsr2h,f,c
 11034   0044C0  0E01               	movlw	1
 11035   0044C2  6EDF               	movwf	indf2,c
 11036   0044C4                     
 11037                           ;MazeRobot.X/dc_motor.c: 281:     mL->brakemode = 1;
 11038   0044C4  EE20 F002          	lfsr	2,2
 11039   0044C8  501E               	movf	turnRight_90@mL^0,w,c
 11040   0044CA  26D9               	addwf	fsr2l,f,c
 11041   0044CC  501F               	movf	(turnRight_90@mL+1)^0,w,c
 11042   0044CE  22DA               	addwfc	fsr2h,f,c
 11043   0044D0  0E01               	movlw	1
 11044   0044D2  6EDF               	movwf	indf2,c
 11045                           
 11046                           ;MazeRobot.X/dc_motor.c: 283:     while((mL->power < 80) || (mR->power < 80)){
 11047   0044D4  EF84  F022         	goto	l4782
 11048   0044D8                     l4776:
 11049                           
 11050                           ;MazeRobot.X/dc_motor.c: 284:         mL->power += 10;
 11051   0044D8  C01E  FFD9         	movff	turnRight_90@mL,fsr2l
 11052   0044DC  C01F  FFDA         	movff	turnRight_90@mL+1,fsr2h
 11053   0044E0  0E0A               	movlw	10
 11054   0044E2  26DF               	addwf	indf2,f,c
 11055                           
 11056                           ;MazeRobot.X/dc_motor.c: 285:         mR->power += 10;
 11057   0044E4  C020  FFD9         	movff	turnRight_90@mR,fsr2l
 11058   0044E8  C021  FFDA         	movff	turnRight_90@mR+1,fsr2h
 11059   0044EC  0E0A               	movlw	10
 11060   0044EE  26DF               	addwf	indf2,f,c
 11061   0044F0                     
 11062                           ;MazeRobot.X/dc_motor.c: 286:         setMotorPWM(mL);
 11063   0044F0  C01E  F012         	movff	turnRight_90@mL,setMotorPWM@m
 11064   0044F4  C01F  F013         	movff	turnRight_90@mL+1,setMotorPWM@m+1
 11065   0044F8  EC6E  F01F         	call	_setMotorPWM	;wreg free
 11066   0044FC                     
 11067                           ;MazeRobot.X/dc_motor.c: 287:         setMotorPWM(mR);
 11068   0044FC  C020  F012         	movff	turnRight_90@mR,setMotorPWM@m
 11069   004500  C021  F013         	movff	turnRight_90@mR+1,setMotorPWM@m+1
 11070   004504  EC6E  F01F         	call	_setMotorPWM	;wreg free
 11071   004508                     l4782:
 11072                           
 11073                           ;MazeRobot.X/dc_motor.c: 283:     while((mL->power < 80) || (mR->power < 80)){
 11074   004508  C01E  FFD9         	movff	turnRight_90@mL,fsr2l
 11075   00450C  C01F  FFDA         	movff	turnRight_90@mL+1,fsr2h
 11076   004510  0E4F               	movlw	79
 11077   004512  64DF               	cpfsgt	indf2,c
 11078   004514  EF8E  F022         	goto	u5121
 11079   004518  EF90  F022         	goto	u5120
 11080   00451C                     u5121:
 11081   00451C  EF6C  F022         	goto	l4776
 11082   004520                     u5120:
 11083   004520  C020  FFD9         	movff	turnRight_90@mR,fsr2l
 11084   004524  C021  FFDA         	movff	turnRight_90@mR+1,fsr2h
 11085   004528  0E4F               	movlw	79
 11086   00452A  64DF               	cpfsgt	indf2,c
 11087   00452C  EF9A  F022         	goto	u5131
 11088   004530  EF9C  F022         	goto	u5130
 11089   004534                     u5131:
 11090   004534  EF6C  F022         	goto	l4776
 11091   004538                     u5130:
 11092   004538                     
 11093                           ;MazeRobot.X/dc_motor.c: 289:    _delay((unsigned long)((turning_time45)*(64000000/4000.
      +                          0)));
 11094   004538  0E10               	movlw	16
 11095   00453A  6E23               	movwf	(??_turnRight_90+1)^0,c
 11096   00453C  0E2E               	movlw	46
 11097   00453E  6E22               	movwf	??_turnRight_90^0,c
 11098   004540  0EAA               	movlw	170
 11099   004542                     u7517:
 11100   004542  2EE8               	decfsz	wreg,f,c
 11101   004544  D7FE               	bra	u7517
 11102   004546  2E22               	decfsz	??_turnRight_90^0,f,c
 11103   004548  D7FC               	bra	u7517
 11104   00454A  2E23               	decfsz	(??_turnRight_90+1)^0,f,c
 11105   00454C  D7FA               	bra	u7517
 11106   00454E  D000               	nop2	
 11107   004550                     
 11108                           ;MazeRobot.X/dc_motor.c: 291:     stop(mL, mR);
 11109   004550  C01E  F018         	movff	turnRight_90@mL,stop@mL
 11110   004554  C01F  F019         	movff	turnRight_90@mL+1,stop@mL+1
 11111   004558  C020  F01A         	movff	turnRight_90@mR,stop@mR
 11112   00455C  C021  F01B         	movff	turnRight_90@mR+1,stop@mR+1
 11113   004560  ECFC  F027         	call	_stop	;wreg free
 11114   004564  0012               	return		;funcret
 11115   004566                     __end_of_turnRight_90:
 11116                           	callstack 0
 11117                           
 11118 ;; *************** function _reverseSquareLeft *****************
 11119 ;; Defined at:
 11120 ;;		line 379 in file "MazeRobot.X/dc_motor.c"
 11121 ;; Parameters:    Size  Location     Type
 11122 ;;  mL              2   35[COMRAM] PTR struct DC_motor
 11123 ;;		 -> main@motorLeft(9), 
 11124 ;;  mR              2   37[COMRAM] PTR struct DC_motor
 11125 ;;		 -> main@motorRight(9), 
 11126 ;; Auto vars:     Size  Location     Type
 11127 ;;		None
 11128 ;; Return value:  Size  Location     Type
 11129 ;;                  1    wreg      void 
 11130 ;; Registers used:
 11131 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11132 ;; Tracked objects:
 11133 ;;		On entry : 0/0
 11134 ;;		On exit  : 0/0
 11135 ;;		Unchanged: 0/0
 11136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11137 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11139 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11140 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11141 ;;Total ram usage:        6 bytes
 11142 ;; Hardware stack levels used: 1
 11143 ;; Hardware stack levels required when called: 6
 11144 ;; This function calls:
 11145 ;;		_reverse
 11146 ;;		_stop
 11147 ;;		_turnLeft_90
 11148 ;; This function is called by:
 11149 ;;		_colorDetect
 11150 ;; This function uses a non-reentrant model
 11151 ;;
 11152                           
 11153                           	psect	text42
 11154   0051E6                     __ptext42:
 11155                           	callstack 0
 11156   0051E6                     _reverseSquareLeft:
 11157                           	callstack 23
 11158   0051E6                     
 11159                           ;MazeRobot.X/dc_motor.c: 379: void reverseSquareLeft(DC_motor *mL, DC_motor *mR);MazeRob
      +                          ot.X/dc_motor.c: 380: {;MazeRobot.X/dc_motor.c: 381:     reverse(mL, mR);
 11160   0051E6  C024  F018         	movff	reverseSquareLeft@mL,reverse@mL
 11161   0051EA  C025  F019         	movff	reverseSquareLeft@mL+1,reverse@mL+1
 11162   0051EE  C026  F01A         	movff	reverseSquareLeft@mR,reverse@mR
 11163   0051F2  C027  F01B         	movff	reverseSquareLeft@mR+1,reverse@mR+1
 11164   0051F6  ECC3  F026         	call	_reverse	;wreg free
 11165   0051FA                     
 11166                           ;MazeRobot.X/dc_motor.c: 382:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
 11167   0051FA  0E39               	movlw	57
 11168   0051FC  6E29               	movwf	(??_reverseSquareLeft+1)^0,c
 11169   0051FE  0ED2               	movlw	210
 11170   005200  6E28               	movwf	??_reverseSquareLeft^0,c
 11171   005202  0E4C               	movlw	76
 11172   005204                     u7527:
 11173   005204  2EE8               	decfsz	wreg,f,c
 11174   005206  D7FE               	bra	u7527
 11175   005208  2E28               	decfsz	??_reverseSquareLeft^0,f,c
 11176   00520A  D7FC               	bra	u7527
 11177   00520C  2E29               	decfsz	(??_reverseSquareLeft+1)^0,f,c
 11178   00520E  D7FA               	bra	u7527
 11179   005210  D000               	nop2	
 11180   005212                     
 11181                           ;MazeRobot.X/dc_motor.c: 384:     stop(mL, mR);
 11182   005212  C024  F018         	movff	reverseSquareLeft@mL,stop@mL
 11183   005216  C025  F019         	movff	reverseSquareLeft@mL+1,stop@mL+1
 11184   00521A  C026  F01A         	movff	reverseSquareLeft@mR,stop@mR
 11185   00521E  C027  F01B         	movff	reverseSquareLeft@mR+1,stop@mR+1
 11186   005222  ECFC  F027         	call	_stop	;wreg free
 11187   005226                     
 11188                           ;MazeRobot.X/dc_motor.c: 386:     reverse(mL, mR);
 11189   005226  C024  F018         	movff	reverseSquareLeft@mL,reverse@mL
 11190   00522A  C025  F019         	movff	reverseSquareLeft@mL+1,reverse@mL+1
 11191   00522E  C026  F01A         	movff	reverseSquareLeft@mR,reverse@mR
 11192   005232  C027  F01B         	movff	reverseSquareLeft@mR+1,reverse@mR+1
 11193   005236  ECC3  F026         	call	_reverse	;wreg free
 11194   00523A                     
 11195                           ;MazeRobot.X/dc_motor.c: 387:     _delay((unsigned long)((2*reverse_time)*(64000000/4000
      +                          .0)));
 11196   00523A  0E72               	movlw	114
 11197   00523C  6E29               	movwf	(??_reverseSquareLeft+1)^0,c
 11198   00523E  0EA3               	movlw	163
 11199   005240  6E28               	movwf	??_reverseSquareLeft^0,c
 11200   005242  0E9B               	movlw	155
 11201   005244                     u7537:
 11202   005244  2EE8               	decfsz	wreg,f,c
 11203   005246  D7FE               	bra	u7537
 11204   005248  2E28               	decfsz	??_reverseSquareLeft^0,f,c
 11205   00524A  D7FC               	bra	u7537
 11206   00524C  2E29               	decfsz	(??_reverseSquareLeft+1)^0,f,c
 11207   00524E  D7FA               	bra	u7537
 11208   005250  F000               	nop	
 11209                           
 11210                           ;MazeRobot.X/dc_motor.c: 389:     turnLeft_90(mL,mR);
 11211   005252  C024  F01E         	movff	reverseSquareLeft@mL,turnLeft_90@mL
 11212   005256  C025  F01F         	movff	reverseSquareLeft@mL+1,turnLeft_90@mL+1
 11213   00525A  C026  F020         	movff	reverseSquareLeft@mR,turnLeft_90@mR
 11214   00525E  C027  F021         	movff	reverseSquareLeft@mR+1,turnLeft_90@mR+1
 11215   005262  ECB3  F022         	call	_turnLeft_90	;wreg free
 11216                           
 11217                           ;MazeRobot.X/dc_motor.c: 391:     stop(mL, mR);
 11218   005266  C024  F018         	movff	reverseSquareLeft@mL,stop@mL
 11219   00526A  C025  F019         	movff	reverseSquareLeft@mL+1,stop@mL+1
 11220   00526E  C026  F01A         	movff	reverseSquareLeft@mR,stop@mR
 11221   005272  C027  F01B         	movff	reverseSquareLeft@mR+1,stop@mR+1
 11222   005276  ECFC  F027         	call	_stop	;wreg free
 11223   00527A  0012               	return		;funcret
 11224   00527C                     __end_of_reverseSquareLeft:
 11225                           	callstack 0
 11226                           
 11227 ;; *************** function _turnLeft_90 *****************
 11228 ;; Defined at:
 11229 ;;		line 238 in file "MazeRobot.X/dc_motor.c"
 11230 ;; Parameters:    Size  Location     Type
 11231 ;;  mL              2   29[COMRAM] PTR struct DC_motor
 11232 ;;		 -> main@motorLeft(9), 
 11233 ;;  mR              2   31[COMRAM] PTR struct DC_motor
 11234 ;;		 -> main@motorRight(9), 
 11235 ;; Auto vars:     Size  Location     Type
 11236 ;;		None
 11237 ;; Return value:  Size  Location     Type
 11238 ;;                  1    wreg      void 
 11239 ;; Registers used:
 11240 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11241 ;; Tracked objects:
 11242 ;;		On entry : 0/0
 11243 ;;		On exit  : 0/0
 11244 ;;		Unchanged: 0/0
 11245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11246 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11247 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11248 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11249 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11250 ;;Total ram usage:        6 bytes
 11251 ;; Hardware stack levels used: 1
 11252 ;; Hardware stack levels required when called: 5
 11253 ;; This function calls:
 11254 ;;		_reverse
 11255 ;;		_setMotorPWM
 11256 ;;		_stop
 11257 ;; This function is called by:
 11258 ;;		_colorDetect
 11259 ;;		_reverseSquareLeft
 11260 ;; This function uses a non-reentrant model
 11261 ;;
 11262                           
 11263                           	psect	text43
 11264   004566                     __ptext43:
 11265                           	callstack 0
 11266   004566                     _turnLeft_90:
 11267                           	callstack 24
 11268   004566                     
 11269                           ;MazeRobot.X/dc_motor.c: 238: void turnLeft_90(DC_motor *mL, DC_motor *mR);MazeRobot.X/d
      +                          c_motor.c: 239: {;MazeRobot.X/dc_motor.c: 241:     stop(mL, mR);
 11270   004566  C01E  F018         	movff	turnLeft_90@mL,stop@mL
 11271   00456A  C01F  F019         	movff	turnLeft_90@mL+1,stop@mL+1
 11272   00456E  C020  F01A         	movff	turnLeft_90@mR,stop@mR
 11273   004572  C021  F01B         	movff	turnLeft_90@mR+1,stop@mR+1
 11274   004576  ECFC  F027         	call	_stop	;wreg free
 11275   00457A                     
 11276                           ;MazeRobot.X/dc_motor.c: 242:     _delay((unsigned long)((100)*(64000000/4000.0)));
 11277   00457A  0E09               	movlw	9
 11278   00457C  6E23               	movwf	(??_turnLeft_90+1)^0,c
 11279   00457E  0E1E               	movlw	30
 11280   004580  6E22               	movwf	??_turnLeft_90^0,c
 11281   004582  0EE4               	movlw	228
 11282   004584                     u7547:
 11283   004584  2EE8               	decfsz	wreg,f,c
 11284   004586  D7FE               	bra	u7547
 11285   004588  2E22               	decfsz	??_turnLeft_90^0,f,c
 11286   00458A  D7FC               	bra	u7547
 11287   00458C  2E23               	decfsz	(??_turnLeft_90+1)^0,f,c
 11288   00458E  D7FA               	bra	u7547
 11289   004590  D000               	nop2	
 11290   004592                     
 11291                           ;MazeRobot.X/dc_motor.c: 244:     reverse(mL, mR);
 11292   004592  C01E  F018         	movff	turnLeft_90@mL,reverse@mL
 11293   004596  C01F  F019         	movff	turnLeft_90@mL+1,reverse@mL+1
 11294   00459A  C020  F01A         	movff	turnLeft_90@mR,reverse@mR
 11295   00459E  C021  F01B         	movff	turnLeft_90@mR+1,reverse@mR+1
 11296   0045A2  ECC3  F026         	call	_reverse	;wreg free
 11297                           
 11298                           ;MazeRobot.X/dc_motor.c: 245:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
 11299   0045A6  0E39               	movlw	57
 11300   0045A8  6E23               	movwf	(??_turnLeft_90+1)^0,c
 11301   0045AA  0ED2               	movlw	210
 11302   0045AC  6E22               	movwf	??_turnLeft_90^0,c
 11303   0045AE  0E4C               	movlw	76
 11304   0045B0                     u7557:
 11305   0045B0  2EE8               	decfsz	wreg,f,c
 11306   0045B2  D7FE               	bra	u7557
 11307   0045B4  2E22               	decfsz	??_turnLeft_90^0,f,c
 11308   0045B6  D7FC               	bra	u7557
 11309   0045B8  2E23               	decfsz	(??_turnLeft_90+1)^0,f,c
 11310   0045BA  D7FA               	bra	u7557
 11311   0045BC  D000               	nop2	
 11312   0045BE                     
 11313                           ;MazeRobot.X/dc_motor.c: 247:     stop(mL, mR);
 11314   0045BE  C01E  F018         	movff	turnLeft_90@mL,stop@mL
 11315   0045C2  C01F  F019         	movff	turnLeft_90@mL+1,stop@mL+1
 11316   0045C6  C020  F01A         	movff	turnLeft_90@mR,stop@mR
 11317   0045CA  C021  F01B         	movff	turnLeft_90@mR+1,stop@mR+1
 11318   0045CE  ECFC  F027         	call	_stop	;wreg free
 11319   0045D2                     
 11320                           ;MazeRobot.X/dc_motor.c: 249:     mL->direction = 0;
 11321   0045D2  EE20 F001          	lfsr	2,1
 11322   0045D6  501E               	movf	turnLeft_90@mL^0,w,c
 11323   0045D8  26D9               	addwf	fsr2l,f,c
 11324   0045DA  501F               	movf	(turnLeft_90@mL+1)^0,w,c
 11325   0045DC  22DA               	addwfc	fsr2h,f,c
 11326   0045DE  0E00               	movlw	0
 11327   0045E0  6EDF               	movwf	indf2,c
 11328   0045E2                     
 11329                           ;MazeRobot.X/dc_motor.c: 250:     mR->direction = 1;
 11330   0045E2  EE20 F001          	lfsr	2,1
 11331   0045E6  5020               	movf	turnLeft_90@mR^0,w,c
 11332   0045E8  26D9               	addwf	fsr2l,f,c
 11333   0045EA  5021               	movf	(turnLeft_90@mR+1)^0,w,c
 11334   0045EC  22DA               	addwfc	fsr2h,f,c
 11335   0045EE  0E01               	movlw	1
 11336   0045F0  6EDF               	movwf	indf2,c
 11337   0045F2                     
 11338                           ;MazeRobot.X/dc_motor.c: 252:     mL->brakemode = 1;
 11339   0045F2  EE20 F002          	lfsr	2,2
 11340   0045F6  501E               	movf	turnLeft_90@mL^0,w,c
 11341   0045F8  26D9               	addwf	fsr2l,f,c
 11342   0045FA  501F               	movf	(turnLeft_90@mL+1)^0,w,c
 11343   0045FC  22DA               	addwfc	fsr2h,f,c
 11344   0045FE  0E01               	movlw	1
 11345   004600  6EDF               	movwf	indf2,c
 11346   004602                     
 11347                           ;MazeRobot.X/dc_motor.c: 253:     mL->brakemode = 1;
 11348   004602  EE20 F002          	lfsr	2,2
 11349   004606  501E               	movf	turnLeft_90@mL^0,w,c
 11350   004608  26D9               	addwf	fsr2l,f,c
 11351   00460A  501F               	movf	(turnLeft_90@mL+1)^0,w,c
 11352   00460C  22DA               	addwfc	fsr2h,f,c
 11353   00460E  0E01               	movlw	1
 11354   004610  6EDF               	movwf	indf2,c
 11355                           
 11356                           ;MazeRobot.X/dc_motor.c: 255:     while((mL->power < 80) || (mR->power < 80)){
 11357   004612  EF23  F023         	goto	l4812
 11358   004616                     l4806:
 11359                           
 11360                           ;MazeRobot.X/dc_motor.c: 256:         mL->power += 10;
 11361   004616  C01E  FFD9         	movff	turnLeft_90@mL,fsr2l
 11362   00461A  C01F  FFDA         	movff	turnLeft_90@mL+1,fsr2h
 11363   00461E  0E0A               	movlw	10
 11364   004620  26DF               	addwf	indf2,f,c
 11365                           
 11366                           ;MazeRobot.X/dc_motor.c: 257:         mR->power += 10;
 11367   004622  C020  FFD9         	movff	turnLeft_90@mR,fsr2l
 11368   004626  C021  FFDA         	movff	turnLeft_90@mR+1,fsr2h
 11369   00462A  0E0A               	movlw	10
 11370   00462C  26DF               	addwf	indf2,f,c
 11371   00462E                     
 11372                           ;MazeRobot.X/dc_motor.c: 258:         setMotorPWM(mL);
 11373   00462E  C01E  F012         	movff	turnLeft_90@mL,setMotorPWM@m
 11374   004632  C01F  F013         	movff	turnLeft_90@mL+1,setMotorPWM@m+1
 11375   004636  EC6E  F01F         	call	_setMotorPWM	;wreg free
 11376   00463A                     
 11377                           ;MazeRobot.X/dc_motor.c: 259:         setMotorPWM(mR);
 11378   00463A  C020  F012         	movff	turnLeft_90@mR,setMotorPWM@m
 11379   00463E  C021  F013         	movff	turnLeft_90@mR+1,setMotorPWM@m+1
 11380   004642  EC6E  F01F         	call	_setMotorPWM	;wreg free
 11381   004646                     l4812:
 11382                           
 11383                           ;MazeRobot.X/dc_motor.c: 255:     while((mL->power < 80) || (mR->power < 80)){
 11384   004646  C01E  FFD9         	movff	turnLeft_90@mL,fsr2l
 11385   00464A  C01F  FFDA         	movff	turnLeft_90@mL+1,fsr2h
 11386   00464E  0E4F               	movlw	79
 11387   004650  64DF               	cpfsgt	indf2,c
 11388   004652  EF2D  F023         	goto	u5141
 11389   004656  EF2F  F023         	goto	u5140
 11390   00465A                     u5141:
 11391   00465A  EF0B  F023         	goto	l4806
 11392   00465E                     u5140:
 11393   00465E  C020  FFD9         	movff	turnLeft_90@mR,fsr2l
 11394   004662  C021  FFDA         	movff	turnLeft_90@mR+1,fsr2h
 11395   004666  0E4F               	movlw	79
 11396   004668  64DF               	cpfsgt	indf2,c
 11397   00466A  EF39  F023         	goto	u5151
 11398   00466E  EF3B  F023         	goto	u5150
 11399   004672                     u5151:
 11400   004672  EF0B  F023         	goto	l4806
 11401   004676                     u5150:
 11402   004676                     
 11403                           ;MazeRobot.X/dc_motor.c: 261:    _delay((unsigned long)((turning_time45)*(64000000/4000.
      +                          0)));
 11404   004676  0E10               	movlw	16
 11405   004678  6E23               	movwf	(??_turnLeft_90+1)^0,c
 11406   00467A  0E2E               	movlw	46
 11407   00467C  6E22               	movwf	??_turnLeft_90^0,c
 11408   00467E  0EAA               	movlw	170
 11409   004680                     u7567:
 11410   004680  2EE8               	decfsz	wreg,f,c
 11411   004682  D7FE               	bra	u7567
 11412   004684  2E22               	decfsz	??_turnLeft_90^0,f,c
 11413   004686  D7FC               	bra	u7567
 11414   004688  2E23               	decfsz	(??_turnLeft_90+1)^0,f,c
 11415   00468A  D7FA               	bra	u7567
 11416   00468C  D000               	nop2	
 11417   00468E                     
 11418                           ;MazeRobot.X/dc_motor.c: 262:     stop(mL, mR);
 11419   00468E  C01E  F018         	movff	turnLeft_90@mL,stop@mL
 11420   004692  C01F  F019         	movff	turnLeft_90@mL+1,stop@mL+1
 11421   004696  C020  F01A         	movff	turnLeft_90@mR,stop@mR
 11422   00469A  C021  F01B         	movff	turnLeft_90@mR+1,stop@mR+1
 11423   00469E  ECFC  F027         	call	_stop	;wreg free
 11424   0046A2  0012               	return		;funcret
 11425   0046A4                     __end_of_turnLeft_90:
 11426                           	callstack 0
 11427                           
 11428 ;; *************** function _stop *****************
 11429 ;; Defined at:
 11430 ;;		line 115 in file "MazeRobot.X/dc_motor.c"
 11431 ;; Parameters:    Size  Location     Type
 11432 ;;  mL              2   23[COMRAM] PTR struct DC_motor
 11433 ;;		 -> main@motorLeft(9), 
 11434 ;;  mR              2   25[COMRAM] PTR struct DC_motor
 11435 ;;		 -> main@motorRight(9), 
 11436 ;; Auto vars:     Size  Location     Type
 11437 ;;		None
 11438 ;; Return value:  Size  Location     Type
 11439 ;;                  1    wreg      void 
 11440 ;; Registers used:
 11441 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11442 ;; Tracked objects:
 11443 ;;		On entry : 0/0
 11444 ;;		On exit  : 0/0
 11445 ;;		Unchanged: 0/0
 11446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11447 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11448 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11449 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11450 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11451 ;;Total ram usage:        6 bytes
 11452 ;; Hardware stack levels used: 1
 11453 ;; Hardware stack levels required when called: 4
 11454 ;; This function calls:
 11455 ;;		_setMotorPWM
 11456 ;; This function is called by:
 11457 ;;		_turnRight
 11458 ;;		_turnLeft_90
 11459 ;;		_turnRight_90
 11460 ;;		_turn_180
 11461 ;;		_turnRight_135
 11462 ;;		_turnLeft_135
 11463 ;;		_reverseSquareRight
 11464 ;;		_reverseSquareLeft
 11465 ;;		_main
 11466 ;;		_turnLeft
 11467 ;; This function uses a non-reentrant model
 11468 ;;
 11469                           
 11470                           	psect	text44
 11471   004FF8                     __ptext44:
 11472                           	callstack 0
 11473   004FF8                     _stop:
 11474                           	callstack 26
 11475   004FF8                     
 11476                           ;MazeRobot.X/dc_motor.c: 117:     while ((mL->power)>0 && (mR->power)>0){
 11477   004FF8  EF2E  F028         	goto	l4632
 11478   004FFC                     l4620:
 11479                           
 11480                           ;MazeRobot.X/dc_motor.c: 118:         if ((mL->power) >0){
 11481   004FFC  C018  FFD9         	movff	stop@mL,fsr2l
 11482   005000  C019  FFDA         	movff	stop@mL+1,fsr2h
 11483   005004  50DF               	movf	indf2,w,c
 11484   005006  B4D8               	btfsc	status,2,c
 11485   005008  EF08  F028         	goto	u5001
 11486   00500C  EF0A  F028         	goto	u5000
 11487   005010                     u5001:
 11488   005010  EF10  F028         	goto	l4624
 11489   005014                     u5000:
 11490   005014                     
 11491                           ;MazeRobot.X/dc_motor.c: 119:             mL->power -= 5;
 11492   005014  C018  FFD9         	movff	stop@mL,fsr2l
 11493   005018  C019  FFDA         	movff	stop@mL+1,fsr2h
 11494   00501C  0E05               	movlw	5
 11495   00501E  5EDF               	subwf	indf2,f,c
 11496   005020                     l4624:
 11497                           
 11498                           ;MazeRobot.X/dc_motor.c: 121:         if ((mR->power) >0){
 11499   005020  C01A  FFD9         	movff	stop@mR,fsr2l
 11500   005024  C01B  FFDA         	movff	stop@mR+1,fsr2h
 11501   005028  50DF               	movf	indf2,w,c
 11502   00502A  B4D8               	btfsc	status,2,c
 11503   00502C  EF1A  F028         	goto	u5011
 11504   005030  EF1C  F028         	goto	u5010
 11505   005034                     u5011:
 11506   005034  EF22  F028         	goto	l4628
 11507   005038                     u5010:
 11508   005038                     
 11509                           ;MazeRobot.X/dc_motor.c: 122:             mR->power -= 5;
 11510   005038  C01A  FFD9         	movff	stop@mR,fsr2l
 11511   00503C  C01B  FFDA         	movff	stop@mR+1,fsr2h
 11512   005040  0E05               	movlw	5
 11513   005042  5EDF               	subwf	indf2,f,c
 11514   005044                     l4628:
 11515                           
 11516                           ;MazeRobot.X/dc_motor.c: 125:         setMotorPWM(mL);
 11517   005044  C018  F012         	movff	stop@mL,setMotorPWM@m
 11518   005048  C019  F013         	movff	stop@mL+1,setMotorPWM@m+1
 11519   00504C  EC6E  F01F         	call	_setMotorPWM	;wreg free
 11520   005050                     
 11521                           ;MazeRobot.X/dc_motor.c: 126:         setMotorPWM(mR);
 11522   005050  C01A  F012         	movff	stop@mR,setMotorPWM@m
 11523   005054  C01B  F013         	movff	stop@mR+1,setMotorPWM@m+1
 11524   005058  EC6E  F01F         	call	_setMotorPWM	;wreg free
 11525   00505C                     l4632:
 11526                           
 11527                           ;MazeRobot.X/dc_motor.c: 117:     while ((mL->power)>0 && (mR->power)>0){
 11528   00505C  C018  FFD9         	movff	stop@mL,fsr2l
 11529   005060  C019  FFDA         	movff	stop@mL+1,fsr2h
 11530   005064  50DF               	movf	indf2,w,c
 11531   005066  B4D8               	btfsc	status,2,c
 11532   005068  EF38  F028         	goto	u5021
 11533   00506C  EF3A  F028         	goto	u5020
 11534   005070                     u5021:
 11535   005070  EF46  F028         	goto	l4636
 11536   005074                     u5020:
 11537   005074  C01A  FFD9         	movff	stop@mR,fsr2l
 11538   005078  C01B  FFDA         	movff	stop@mR+1,fsr2h
 11539   00507C  50DF               	movf	indf2,w,c
 11540   00507E  A4D8               	btfss	status,2,c
 11541   005080  EF44  F028         	goto	u5031
 11542   005084  EF46  F028         	goto	u5030
 11543   005088                     u5031:
 11544   005088  EFFE  F027         	goto	l4620
 11545   00508C                     u5030:
 11546   00508C                     l4636:
 11547                           
 11548                           ;MazeRobot.X/dc_motor.c: 128:     _delay((unsigned long)((100)*(64000000/4000.0)));
 11549   00508C  0E09               	movlw	9
 11550   00508E  6E1D               	movwf	(??_stop+1)^0,c
 11551   005090  0E1E               	movlw	30
 11552   005092  6E1C               	movwf	??_stop^0,c
 11553   005094  0EE4               	movlw	228
 11554   005096                     u7577:
 11555   005096  2EE8               	decfsz	wreg,f,c
 11556   005098  D7FE               	bra	u7577
 11557   00509A  2E1C               	decfsz	??_stop^0,f,c
 11558   00509C  D7FC               	bra	u7577
 11559   00509E  2E1D               	decfsz	(??_stop+1)^0,f,c
 11560   0050A0  D7FA               	bra	u7577
 11561   0050A2  D000               	nop2	
 11562   0050A4  0012               	return		;funcret
 11563   0050A6                     __end_of_stop:
 11564                           	callstack 0
 11565                           
 11566 ;; *************** function _reverse *****************
 11567 ;; Defined at:
 11568 ;;		line 155 in file "MazeRobot.X/dc_motor.c"
 11569 ;; Parameters:    Size  Location     Type
 11570 ;;  mL              2   23[COMRAM] PTR struct DC_motor
 11571 ;;		 -> main@motorLeft(9), 
 11572 ;;  mR              2   25[COMRAM] PTR struct DC_motor
 11573 ;;		 -> main@motorRight(9), 
 11574 ;; Auto vars:     Size  Location     Type
 11575 ;;		None
 11576 ;; Return value:  Size  Location     Type
 11577 ;;                  1    wreg      void 
 11578 ;; Registers used:
 11579 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11580 ;; Tracked objects:
 11581 ;;		On entry : 0/0
 11582 ;;		On exit  : 0/0
 11583 ;;		Unchanged: 0/0
 11584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11585 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11586 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11587 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11588 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11589 ;;Total ram usage:        5 bytes
 11590 ;; Hardware stack levels used: 1
 11591 ;; Hardware stack levels required when called: 4
 11592 ;; This function calls:
 11593 ;;		_setMotorPWM
 11594 ;; This function is called by:
 11595 ;;		_turnRight
 11596 ;;		_turnLeft_90
 11597 ;;		_turnRight_90
 11598 ;;		_turnRight_135
 11599 ;;		_turnLeft_135
 11600 ;;		_reverseSquareRight
 11601 ;;		_reverseSquareLeft
 11602 ;;		_turnLeft
 11603 ;; This function uses a non-reentrant model
 11604 ;;
 11605                           
 11606                           	psect	text45
 11607   004D86                     __ptext45:
 11608                           	callstack 0
 11609   004D86                     _reverse:
 11610                           	callstack 23
 11611   004D86                     
 11612                           ;MazeRobot.X/dc_motor.c: 155: void reverse(DC_motor *mL, DC_motor *mR);MazeRobot.X/dc_mo
      +                          tor.c: 156: {;MazeRobot.X/dc_motor.c: 157:     mL->direction = 0;
 11613   004D86  EE20 F001          	lfsr	2,1
 11614   004D8A  5018               	movf	reverse@mL^0,w,c
 11615   004D8C  26D9               	addwf	fsr2l,f,c
 11616   004D8E  5019               	movf	(reverse@mL+1)^0,w,c
 11617   004D90  22DA               	addwfc	fsr2h,f,c
 11618   004D92  0E00               	movlw	0
 11619   004D94  6EDF               	movwf	indf2,c
 11620                           
 11621                           ;MazeRobot.X/dc_motor.c: 158:     mR->direction = 0;
 11622   004D96  EE20 F001          	lfsr	2,1
 11623   004D9A  501A               	movf	reverse@mR^0,w,c
 11624   004D9C  26D9               	addwf	fsr2l,f,c
 11625   004D9E  501B               	movf	(reverse@mR+1)^0,w,c
 11626   004DA0  22DA               	addwfc	fsr2h,f,c
 11627   004DA2  0E00               	movlw	0
 11628   004DA4  6EDF               	movwf	indf2,c
 11629                           
 11630                           ;MazeRobot.X/dc_motor.c: 160:     mL->brakemode = 1;
 11631   004DA6  EE20 F002          	lfsr	2,2
 11632   004DAA  5018               	movf	reverse@mL^0,w,c
 11633   004DAC  26D9               	addwf	fsr2l,f,c
 11634   004DAE  5019               	movf	(reverse@mL+1)^0,w,c
 11635   004DB0  22DA               	addwfc	fsr2h,f,c
 11636   004DB2  0E01               	movlw	1
 11637   004DB4  6EDF               	movwf	indf2,c
 11638                           
 11639                           ;MazeRobot.X/dc_motor.c: 161:     mL->brakemode = 1;
 11640   004DB6  EE20 F002          	lfsr	2,2
 11641   004DBA  5018               	movf	reverse@mL^0,w,c
 11642   004DBC  26D9               	addwf	fsr2l,f,c
 11643   004DBE  5019               	movf	(reverse@mL+1)^0,w,c
 11644   004DC0  22DA               	addwfc	fsr2h,f,c
 11645   004DC2  0E01               	movlw	1
 11646   004DC4  6EDF               	movwf	indf2,c
 11647                           
 11648                           ;MazeRobot.X/dc_motor.c: 163:     while ((mL->power)<25 && (mR->power)<25){
 11649   004DC6  EF09  F027         	goto	l4648
 11650   004DCA                     l4640:
 11651                           
 11652                           ;MazeRobot.X/dc_motor.c: 164:         if ((mL->power) < 25){
 11653   004DCA  C018  FFD9         	movff	reverse@mL,fsr2l
 11654   004DCE  C019  FFDA         	movff	reverse@mL+1,fsr2h
 11655   004DD2  0E19               	movlw	25
 11656   004DD4  60DF               	cpfslt	indf2,c
 11657   004DD6  EFEF  F026         	goto	u5041
 11658   004DDA  EFF1  F026         	goto	u5040
 11659   004DDE                     u5041:
 11660   004DDE  EFF7  F026         	goto	l4644
 11661   004DE2                     u5040:
 11662   004DE2                     
 11663                           ;MazeRobot.X/dc_motor.c: 165:             mL->power += 5;
 11664   004DE2  C018  FFD9         	movff	reverse@mL,fsr2l
 11665   004DE6  C019  FFDA         	movff	reverse@mL+1,fsr2h
 11666   004DEA  0E05               	movlw	5
 11667   004DEC  26DF               	addwf	indf2,f,c
 11668   004DEE                     l4644:
 11669                           
 11670                           ;MazeRobot.X/dc_motor.c: 167:         if ((mR->power) <25){
 11671   004DEE  C01A  FFD9         	movff	reverse@mR,fsr2l
 11672   004DF2  C01B  FFDA         	movff	reverse@mR+1,fsr2h
 11673   004DF6  0E19               	movlw	25
 11674   004DF8  60DF               	cpfslt	indf2,c
 11675   004DFA  EF01  F027         	goto	u5051
 11676   004DFE  EF03  F027         	goto	u5050
 11677   004E02                     u5051:
 11678   004E02  EF09  F027         	goto	l4648
 11679   004E06                     u5050:
 11680   004E06                     
 11681                           ;MazeRobot.X/dc_motor.c: 168:             mR->power += 5;
 11682   004E06  C01A  FFD9         	movff	reverse@mR,fsr2l
 11683   004E0A  C01B  FFDA         	movff	reverse@mR+1,fsr2h
 11684   004E0E  0E05               	movlw	5
 11685   004E10  26DF               	addwf	indf2,f,c
 11686   004E12                     l4648:
 11687                           
 11688                           ;MazeRobot.X/dc_motor.c: 163:     while ((mL->power)<25 && (mR->power)<25){
 11689   004E12  C018  FFD9         	movff	reverse@mL,fsr2l
 11690   004E16  C019  FFDA         	movff	reverse@mL+1,fsr2h
 11691   004E1A  0E19               	movlw	25
 11692   004E1C  60DF               	cpfslt	indf2,c
 11693   004E1E  EF13  F027         	goto	u5061
 11694   004E22  EF15  F027         	goto	u5060
 11695   004E26                     u5061:
 11696   004E26  EF21  F027         	goto	l4652
 11697   004E2A                     u5060:
 11698   004E2A  C01A  FFD9         	movff	reverse@mR,fsr2l
 11699   004E2E  C01B  FFDA         	movff	reverse@mR+1,fsr2h
 11700   004E32  0E18               	movlw	24
 11701   004E34  64DF               	cpfsgt	indf2,c
 11702   004E36  EF1F  F027         	goto	u5071
 11703   004E3A  EF21  F027         	goto	u5070
 11704   004E3E                     u5071:
 11705   004E3E  EFE5  F026         	goto	l4640
 11706   004E42                     u5070:
 11707   004E42                     l4652:
 11708                           
 11709                           ;MazeRobot.X/dc_motor.c: 172:     setMotorPWM(mL);
 11710   004E42  C018  F012         	movff	reverse@mL,setMotorPWM@m
 11711   004E46  C019  F013         	movff	reverse@mL+1,setMotorPWM@m+1
 11712   004E4A  EC6E  F01F         	call	_setMotorPWM	;wreg free
 11713                           
 11714                           ;MazeRobot.X/dc_motor.c: 173:     setMotorPWM(mR);
 11715   004E4E  C01A  F012         	movff	reverse@mR,setMotorPWM@m
 11716   004E52  C01B  F013         	movff	reverse@mR+1,setMotorPWM@m+1
 11717   004E56  EC6E  F01F         	call	_setMotorPWM	;wreg free
 11718   004E5A  0012               	return		;funcret
 11719   004E5C                     __end_of_reverse:
 11720                           	callstack 0
 11721                           
 11722 ;; *************** function _setMotorPWM *****************
 11723 ;; Defined at:
 11724 ;;		line 92 in file "MazeRobot.X/dc_motor.c"
 11725 ;; Parameters:    Size  Location     Type
 11726 ;;  m               2   17[COMRAM] PTR struct DC_motor
 11727 ;;		 -> main@motorRight(9), main@motorLeft(9), 
 11728 ;; Auto vars:     Size  Location     Type
 11729 ;;  negDuty         1   22[COMRAM] unsigned char 
 11730 ;;  posDuty         1   21[COMRAM] unsigned char 
 11731 ;; Return value:  Size  Location     Type
 11732 ;;                  1    wreg      void 
 11733 ;; Registers used:
 11734 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11735 ;; Tracked objects:
 11736 ;;		On entry : 0/0
 11737 ;;		On exit  : 0/0
 11738 ;;		Unchanged: 0/0
 11739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11740 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11741 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11742 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11743 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11744 ;;Total ram usage:        6 bytes
 11745 ;; Hardware stack levels used: 1
 11746 ;; Hardware stack levels required when called: 3
 11747 ;; This function calls:
 11748 ;;		___lwdiv
 11749 ;;		___wmul
 11750 ;; This function is called by:
 11751 ;;		_stop
 11752 ;;		_forward
 11753 ;;		_reverse
 11754 ;;		_turnRight
 11755 ;;		_turnLeft_90
 11756 ;;		_turnRight_90
 11757 ;;		_turnRight_135
 11758 ;;		_turnLeft_135
 11759 ;;		_turnLeft
 11760 ;; This function uses a non-reentrant model
 11761 ;;
 11762                           
 11763                           	psect	text46
 11764   003EDC                     __ptext46:
 11765                           	callstack 0
 11766   003EDC                     _setMotorPWM:
 11767                           	callstack 26
 11768   003EDC                     
 11769                           ;MazeRobot.X/dc_motor.c: 92: void setMotorPWM(DC_motor *m);MazeRobot.X/dc_motor.c: 93: {
      +                          ;MazeRobot.X/dc_motor.c: 94:     unsigned char posDuty, negDuty;;MazeRobot.X/dc_motor.c:
      +                           96:     if(m->brakemode) {
 11770   003EDC  EE20 F002          	lfsr	2,2
 11771   003EE0  5012               	movf	setMotorPWM@m^0,w,c
 11772   003EE2  26D9               	addwf	fsr2l,f,c
 11773   003EE4  5013               	movf	(setMotorPWM@m+1)^0,w,c
 11774   003EE6  22DA               	addwfc	fsr2h,f,c
 11775   003EE8  50DF               	movf	indf2,w,c
 11776   003EEA  B4D8               	btfsc	status,2,c
 11777   003EEC  EF7A  F01F         	goto	u4521
 11778   003EF0  EF7C  F01F         	goto	u4520
 11779   003EF4                     u4521:
 11780   003EF4  EFB0  F01F         	goto	l4300
 11781   003EF8                     u4520:
 11782   003EF8                     
 11783                           ;MazeRobot.X/dc_motor.c: 97:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m
      +                          ->PWMperiod))/100;
 11784   003EF8  C012  FFD9         	movff	setMotorPWM@m,fsr2l
 11785   003EFC  C013  FFDA         	movff	setMotorPWM@m+1,fsr2h
 11786   003F00  50DF               	movf	indf2,w,c
 11787   003F02  6E14               	movwf	??_setMotorPWM^0,c
 11788   003F04  5014               	movf	??_setMotorPWM^0,w,c
 11789   003F06  6E05               	movwf	___wmul@multiplier^0,c
 11790   003F08  6A06               	clrf	(___wmul@multiplier+1)^0,c
 11791   003F0A  EE20 F003          	lfsr	2,3
 11792   003F0E  5012               	movf	setMotorPWM@m^0,w,c
 11793   003F10  26D9               	addwf	fsr2l,f,c
 11794   003F12  5013               	movf	(setMotorPWM@m+1)^0,w,c
 11795   003F14  22DA               	addwfc	fsr2h,f,c
 11796   003F16  CFDE F007          	movff	postinc2,___wmul@multiplicand
 11797   003F1A  CFDD F008          	movff	postdec2,___wmul@multiplicand+1
 11798   003F1E  EC3B  F02D         	call	___wmul	;wreg free
 11799   003F22  C005  F00B         	movff	?___wmul,___lwdiv@dividend
 11800   003F26  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
 11801   003F2A  0E00               	movlw	0
 11802   003F2C  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
 11803   003F2E  0E64               	movlw	100
 11804   003F30  6E0D               	movwf	___lwdiv@divisor^0,c
 11805   003F32  ECC3  F029         	call	___lwdiv	;wreg free
 11806   003F36  EE20 F003          	lfsr	2,3
 11807   003F3A  5012               	movf	setMotorPWM@m^0,w,c
 11808   003F3C  26D9               	addwf	fsr2l,f,c
 11809   003F3E  5013               	movf	(setMotorPWM@m+1)^0,w,c
 11810   003F40  22DA               	addwfc	fsr2h,f,c
 11811   003F42  50DF               	movf	indf2,w,c
 11812   003F44  6E15               	movwf	(??_setMotorPWM+1)^0,c
 11813   003F46  500B               	movf	?___lwdiv^0,w,c
 11814   003F48  5C15               	subwf	(??_setMotorPWM+1)^0,w,c
 11815   003F4A  6E16               	movwf	setMotorPWM@posDuty^0,c
 11816   003F4C                     
 11817                           ;MazeRobot.X/dc_motor.c: 98:         negDuty=m->PWMperiod;
 11818   003F4C  EE20 F003          	lfsr	2,3
 11819   003F50  5012               	movf	setMotorPWM@m^0,w,c
 11820   003F52  26D9               	addwf	fsr2l,f,c
 11821   003F54  5013               	movf	(setMotorPWM@m+1)^0,w,c
 11822   003F56  22DA               	addwfc	fsr2h,f,c
 11823   003F58  50DF               	movf	indf2,w,c
 11824   003F5A  6E17               	movwf	setMotorPWM@negDuty^0,c
 11825                           
 11826                           ;MazeRobot.X/dc_motor.c: 99:     }
 11827   003F5C  EFD3  F01F         	goto	l4304
 11828   003F60                     l4300:
 11829                           
 11830                           ;MazeRobot.X/dc_motor.c: 101:         posDuty=0;
 11831   003F60  0E00               	movlw	0
 11832   003F62  6E16               	movwf	setMotorPWM@posDuty^0,c
 11833   003F64                     
 11834                           ;MazeRobot.X/dc_motor.c: 102:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
 11835   003F64  C012  FFD9         	movff	setMotorPWM@m,fsr2l
 11836   003F68  C013  FFDA         	movff	setMotorPWM@m+1,fsr2h
 11837   003F6C  50DF               	movf	indf2,w,c
 11838   003F6E  6E14               	movwf	??_setMotorPWM^0,c
 11839   003F70  5014               	movf	??_setMotorPWM^0,w,c
 11840   003F72  6E05               	movwf	___wmul@multiplier^0,c
 11841   003F74  6A06               	clrf	(___wmul@multiplier+1)^0,c
 11842   003F76  EE20 F003          	lfsr	2,3
 11843   003F7A  5012               	movf	setMotorPWM@m^0,w,c
 11844   003F7C  26D9               	addwf	fsr2l,f,c
 11845   003F7E  5013               	movf	(setMotorPWM@m+1)^0,w,c
 11846   003F80  22DA               	addwfc	fsr2h,f,c
 11847   003F82  CFDE F007          	movff	postinc2,___wmul@multiplicand
 11848   003F86  CFDD F008          	movff	postdec2,___wmul@multiplicand+1
 11849   003F8A  EC3B  F02D         	call	___wmul	;wreg free
 11850   003F8E  C005  F00B         	movff	?___wmul,___lwdiv@dividend
 11851   003F92  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
 11852   003F96  0E00               	movlw	0
 11853   003F98  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
 11854   003F9A  0E64               	movlw	100
 11855   003F9C  6E0D               	movwf	___lwdiv@divisor^0,c
 11856   003F9E  ECC3  F029         	call	___lwdiv	;wreg free
 11857   003FA2  500B               	movf	?___lwdiv^0,w,c
 11858   003FA4  6E17               	movwf	setMotorPWM@negDuty^0,c
 11859   003FA6                     l4304:
 11860                           
 11861                           ;MazeRobot.X/dc_motor.c: 105:     if (m->direction) {
 11862   003FA6  EE20 F001          	lfsr	2,1
 11863   003FAA  5012               	movf	setMotorPWM@m^0,w,c
 11864   003FAC  26D9               	addwf	fsr2l,f,c
 11865   003FAE  5013               	movf	(setMotorPWM@m+1)^0,w,c
 11866   003FB0  22DA               	addwfc	fsr2h,f,c
 11867   003FB2  50DF               	movf	indf2,w,c
 11868   003FB4  B4D8               	btfsc	status,2,c
 11869   003FB6  EFDF  F01F         	goto	u4531
 11870   003FBA  EFE1  F01F         	goto	u4530
 11871   003FBE                     u4531:
 11872   003FBE  EF03  F020         	goto	l4308
 11873   003FC2                     u4530:
 11874   003FC2                     
 11875                           ;MazeRobot.X/dc_motor.c: 106:         *(m->posDutyHighByte)=posDuty;
 11876   003FC2  EE20 F005          	lfsr	2,5
 11877   003FC6  5012               	movf	setMotorPWM@m^0,w,c
 11878   003FC8  26D9               	addwf	fsr2l,f,c
 11879   003FCA  5013               	movf	(setMotorPWM@m+1)^0,w,c
 11880   003FCC  22DA               	addwfc	fsr2h,f,c
 11881   003FCE  CFDE F014          	movff	postinc2,??_setMotorPWM
 11882   003FD2  CFDD F015          	movff	postdec2,??_setMotorPWM+1
 11883   003FD6  C014  FFD9         	movff	??_setMotorPWM,fsr2l
 11884   003FDA  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
 11885   003FDE  C016  FFDF         	movff	setMotorPWM@posDuty,indf2
 11886                           
 11887                           ;MazeRobot.X/dc_motor.c: 107:         *(m->negDutyHighByte)=negDuty;
 11888   003FE2  EE20 F007          	lfsr	2,7
 11889   003FE6  5012               	movf	setMotorPWM@m^0,w,c
 11890   003FE8  26D9               	addwf	fsr2l,f,c
 11891   003FEA  5013               	movf	(setMotorPWM@m+1)^0,w,c
 11892   003FEC  22DA               	addwfc	fsr2h,f,c
 11893   003FEE  CFDE F014          	movff	postinc2,??_setMotorPWM
 11894   003FF2  CFDD F015          	movff	postdec2,??_setMotorPWM+1
 11895   003FF6  C014  FFD9         	movff	??_setMotorPWM,fsr2l
 11896   003FFA  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
 11897   003FFE  C017  FFDF         	movff	setMotorPWM@negDuty,indf2
 11898                           
 11899                           ;MazeRobot.X/dc_motor.c: 108:     } else {
 11900   004002  EF23  F020         	goto	l174
 11901   004006                     l4308:
 11902                           
 11903                           ;MazeRobot.X/dc_motor.c: 109:         *(m->posDutyHighByte)=negDuty;
 11904   004006  EE20 F005          	lfsr	2,5
 11905   00400A  5012               	movf	setMotorPWM@m^0,w,c
 11906   00400C  26D9               	addwf	fsr2l,f,c
 11907   00400E  5013               	movf	(setMotorPWM@m+1)^0,w,c
 11908   004010  22DA               	addwfc	fsr2h,f,c
 11909   004012  CFDE F014          	movff	postinc2,??_setMotorPWM
 11910   004016  CFDD F015          	movff	postdec2,??_setMotorPWM+1
 11911   00401A  C014  FFD9         	movff	??_setMotorPWM,fsr2l
 11912   00401E  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
 11913   004022  C017  FFDF         	movff	setMotorPWM@negDuty,indf2
 11914                           
 11915                           ;MazeRobot.X/dc_motor.c: 110:         *(m->negDutyHighByte)=posDuty;
 11916   004026  EE20 F007          	lfsr	2,7
 11917   00402A  5012               	movf	setMotorPWM@m^0,w,c
 11918   00402C  26D9               	addwf	fsr2l,f,c
 11919   00402E  5013               	movf	(setMotorPWM@m+1)^0,w,c
 11920   004030  22DA               	addwfc	fsr2h,f,c
 11921   004032  CFDE F014          	movff	postinc2,??_setMotorPWM
 11922   004036  CFDD F015          	movff	postdec2,??_setMotorPWM+1
 11923   00403A  C014  FFD9         	movff	??_setMotorPWM,fsr2l
 11924   00403E  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
 11925   004042  C016  FFDF         	movff	setMotorPWM@posDuty,indf2
 11926   004046                     l174:
 11927   004046  0012               	return		;funcret
 11928   004048                     __end_of_setMotorPWM:
 11929                           	callstack 0
 11930                           
 11931 ;; *************** function ___wmul *****************
 11932 ;; Defined at:
 11933 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
 11934 ;; Parameters:    Size  Location     Type
 11935 ;;  multiplier      2    4[COMRAM] unsigned int 
 11936 ;;  multiplicand    2    6[COMRAM] unsigned int 
 11937 ;; Auto vars:     Size  Location     Type
 11938 ;;  product         2    8[COMRAM] unsigned int 
 11939 ;; Return value:  Size  Location     Type
 11940 ;;                  2    4[COMRAM] unsigned int 
 11941 ;; Registers used:
 11942 ;;		wreg, status,2, status,0, prodl, prodh
 11943 ;; Tracked objects:
 11944 ;;		On entry : 0/0
 11945 ;;		On exit  : 0/0
 11946 ;;		Unchanged: 0/0
 11947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11948 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11949 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11951 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11952 ;;Total ram usage:        6 bytes
 11953 ;; Hardware stack levels used: 1
 11954 ;; Hardware stack levels required when called: 2
 11955 ;; This function calls:
 11956 ;;		Nothing
 11957 ;; This function is called by:
 11958 ;;		_setMotorPWM
 11959 ;;		_turnLeft_135
 11960 ;; This function uses a non-reentrant model
 11961 ;;
 11962                           
 11963                           	psect	text47
 11964   005A76                     __ptext47:
 11965                           	callstack 0
 11966   005A76                     ___wmul:
 11967                           	callstack 26
 11968   005A76  5005               	movf	___wmul@multiplier^0,w,c
 11969   005A78  0207               	mulwf	___wmul@multiplicand^0,c
 11970   005A7A  CFF3 F009          	movff	prodl,___wmul@product
 11971   005A7E  CFF4 F00A          	movff	prodh,___wmul@product+1
 11972   005A82  5005               	movf	___wmul@multiplier^0,w,c
 11973   005A84  0208               	mulwf	(___wmul@multiplicand+1)^0,c
 11974   005A86  50F3               	movf	243,w,c
 11975   005A88  260A               	addwf	(___wmul@product+1)^0,f,c
 11976   005A8A  5006               	movf	(___wmul@multiplier+1)^0,w,c
 11977   005A8C  0207               	mulwf	___wmul@multiplicand^0,c
 11978   005A8E  50F3               	movf	243,w,c
 11979   005A90  260A               	addwf	(___wmul@product+1)^0,f,c
 11980   005A92  C009  F005         	movff	___wmul@product,?___wmul
 11981   005A96  C00A  F006         	movff	___wmul@product+1,?___wmul+1
 11982   005A9A  0012               	return		;funcret
 11983   005A9C                     __end_of___wmul:
 11984                           	callstack 0
 11985                           
 11986 ;; *************** function ___lwdiv *****************
 11987 ;; Defined at:
 11988 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
 11989 ;; Parameters:    Size  Location     Type
 11990 ;;  dividend        2   10[COMRAM] unsigned int 
 11991 ;;  divisor         2   12[COMRAM] unsigned int 
 11992 ;; Auto vars:     Size  Location     Type
 11993 ;;  quotient        2   14[COMRAM] unsigned int 
 11994 ;;  counter         1   16[COMRAM] unsigned char 
 11995 ;; Return value:  Size  Location     Type
 11996 ;;                  2   10[COMRAM] unsigned int 
 11997 ;; Registers used:
 11998 ;;		wreg, status,2, status,0
 11999 ;; Tracked objects:
 12000 ;;		On entry : 0/0
 12001 ;;		On exit  : 0/0
 12002 ;;		Unchanged: 0/0
 12003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12004 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12005 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12007 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12008 ;;Total ram usage:        7 bytes
 12009 ;; Hardware stack levels used: 1
 12010 ;; Hardware stack levels required when called: 2
 12011 ;; This function calls:
 12012 ;;		Nothing
 12013 ;; This function is called by:
 12014 ;;		_setMotorPWM
 12015 ;; This function uses a non-reentrant model
 12016 ;;
 12017                           
 12018                           	psect	text48
 12019   005386                     __ptext48:
 12020                           	callstack 0
 12021   005386                     ___lwdiv:
 12022                           	callstack 26
 12023   005386  0E00               	movlw	0
 12024   005388  6E10               	movwf	(___lwdiv@quotient+1)^0,c
 12025   00538A  0E00               	movlw	0
 12026   00538C  6E0F               	movwf	___lwdiv@quotient^0,c
 12027   00538E  500D               	movf	___lwdiv@divisor^0,w,c
 12028   005390  100E               	iorwf	(___lwdiv@divisor+1)^0,w,c
 12029   005392  B4D8               	btfsc	status,2,c
 12030   005394  EFCE  F029         	goto	u4261
 12031   005398  EFD0  F029         	goto	u4260
 12032   00539C                     u4261:
 12033   00539C  EFF8  F029         	goto	l1004
 12034   0053A0                     u4260:
 12035   0053A0  0E01               	movlw	1
 12036   0053A2  6E11               	movwf	___lwdiv@counter^0,c
 12037   0053A4  EFD8  F029         	goto	l4192
 12038   0053A8                     l4190:
 12039   0053A8  90D8               	bcf	status,0,c
 12040   0053AA  360D               	rlcf	___lwdiv@divisor^0,f,c
 12041   0053AC  360E               	rlcf	(___lwdiv@divisor+1)^0,f,c
 12042   0053AE  2A11               	incf	___lwdiv@counter^0,f,c
 12043   0053B0                     l4192:
 12044   0053B0  AE0E               	btfss	(___lwdiv@divisor+1)^0,7,c
 12045   0053B2  EFDD  F029         	goto	u4271
 12046   0053B6  EFDF  F029         	goto	u4270
 12047   0053BA                     u4271:
 12048   0053BA  EFD4  F029         	goto	l4190
 12049   0053BE                     u4270:
 12050   0053BE                     l4194:
 12051   0053BE  90D8               	bcf	status,0,c
 12052   0053C0  360F               	rlcf	___lwdiv@quotient^0,f,c
 12053   0053C2  3610               	rlcf	(___lwdiv@quotient+1)^0,f,c
 12054   0053C4  500D               	movf	___lwdiv@divisor^0,w,c
 12055   0053C6  5C0B               	subwf	___lwdiv@dividend^0,w,c
 12056   0053C8  500E               	movf	(___lwdiv@divisor+1)^0,w,c
 12057   0053CA  580C               	subwfb	(___lwdiv@dividend+1)^0,w,c
 12058   0053CC  A0D8               	btfss	status,0,c
 12059   0053CE  EFEB  F029         	goto	u4281
 12060   0053D2  EFED  F029         	goto	u4280
 12061   0053D6                     u4281:
 12062   0053D6  EFF2  F029         	goto	l4202
 12063   0053DA                     u4280:
 12064   0053DA  500D               	movf	___lwdiv@divisor^0,w,c
 12065   0053DC  5E0B               	subwf	___lwdiv@dividend^0,f,c
 12066   0053DE  500E               	movf	(___lwdiv@divisor+1)^0,w,c
 12067   0053E0  5A0C               	subwfb	(___lwdiv@dividend+1)^0,f,c
 12068   0053E2  800F               	bsf	___lwdiv@quotient^0,0,c
 12069   0053E4                     l4202:
 12070   0053E4  90D8               	bcf	status,0,c
 12071   0053E6  320E               	rrcf	(___lwdiv@divisor+1)^0,f,c
 12072   0053E8  320D               	rrcf	___lwdiv@divisor^0,f,c
 12073   0053EA  2E11               	decfsz	___lwdiv@counter^0,f,c
 12074   0053EC  EFDF  F029         	goto	l4194
 12075   0053F0                     l1004:
 12076   0053F0  C00F  F00B         	movff	___lwdiv@quotient,?___lwdiv
 12077   0053F4  C010  F00C         	movff	___lwdiv@quotient+1,?___lwdiv+1
 12078   0053F8  0012               	return		;funcret
 12079   0053FA                     __end_of___lwdiv:
 12080                           	callstack 0
 12081                           
 12082 ;; *************** function ___xxtofl *****************
 12083 ;; Defined at:
 12084 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\xxtofl.c"
 12085 ;; Parameters:    Size  Location     Type
 12086 ;;  sign            1    wreg     unsigned char 
 12087 ;;  val             4    4[COMRAM] long 
 12088 ;; Auto vars:     Size  Location     Type
 12089 ;;  sign            1   12[COMRAM] unsigned char 
 12090 ;;  arg             4   14[COMRAM] unsigned long 
 12091 ;;  exp             1   13[COMRAM] unsigned char 
 12092 ;; Return value:  Size  Location     Type
 12093 ;;                  4    4[COMRAM] unsigned char 
 12094 ;; Registers used:
 12095 ;;		wreg, status,2, status,0
 12096 ;; Tracked objects:
 12097 ;;		On entry : 0/0
 12098 ;;		On exit  : 0/0
 12099 ;;		Unchanged: 0/0
 12100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12101 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12102 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12103 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12104 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12105 ;;Total ram usage:       14 bytes
 12106 ;; Hardware stack levels used: 1
 12107 ;; Hardware stack levels required when called: 2
 12108 ;; This function calls:
 12109 ;;		Nothing
 12110 ;; This function is called by:
 12111 ;;		_colorDetect
 12112 ;;		_turnRight
 12113 ;;		_turnLeft_90
 12114 ;;		_turnRight_90
 12115 ;;		_turnRight_135
 12116 ;;		_turnLeft_135
 12117 ;;		_reverseSquareRight
 12118 ;;		_reverseSquareLeft
 12119 ;;		_main
 12120 ;;		_turnLeft
 12121 ;; This function uses a non-reentrant model
 12122 ;;
 12123                           
 12124                           	psect	text49
 12125   003BA0                     __ptext49:
 12126                           	callstack 0
 12127   003BA0                     ___xxtofl:
 12128                           	callstack 27
 12129                           
 12130                           ;incstack = 0
 12131                           ;___xxtofl@sign stored from wreg
 12132   003BA0  6E0D               	movwf	___xxtofl@sign^0,c
 12133   003BA2  500D               	movf	___xxtofl@sign^0,w,c
 12134   003BA4  B4D8               	btfsc	status,2,c
 12135   003BA6  EFD7  F01D         	goto	u5281
 12136   003BAA  EFD9  F01D         	goto	u5280
 12137   003BAE                     u5281:
 12138   003BAE  EFFB  F01D         	goto	l1168
 12139   003BB2                     u5280:
 12140   003BB2  BE08               	btfsc	(___xxtofl@val+3)^0,7,c
 12141   003BB4  EFE0  F01D         	goto	u5290
 12142   003BB8  EFDE  F01D         	goto	u5291
 12143   003BBC                     u5291:
 12144   003BBC  EFFB  F01D         	goto	l1168
 12145   003BC0                     u5290:
 12146   003BC0  C005  F009         	movff	___xxtofl@val,??___xxtofl
 12147   003BC4  C006  F00A         	movff	___xxtofl@val+1,??___xxtofl+1
 12148   003BC8  C007  F00B         	movff	___xxtofl@val+2,??___xxtofl+2
 12149   003BCC  C008  F00C         	movff	___xxtofl@val+3,??___xxtofl+3
 12150   003BD0  1E09               	comf	??___xxtofl^0,f,c
 12151   003BD2  1E0A               	comf	(??___xxtofl+1)^0,f,c
 12152   003BD4  1E0B               	comf	(??___xxtofl+2)^0,f,c
 12153   003BD6  1E0C               	comf	(??___xxtofl+3)^0,f,c
 12154   003BD8  2A09               	incf	??___xxtofl^0,f,c
 12155   003BDA  0E00               	movlw	0
 12156   003BDC  220A               	addwfc	(??___xxtofl+1)^0,f,c
 12157   003BDE  220B               	addwfc	(??___xxtofl+2)^0,f,c
 12158   003BE0  220C               	addwfc	(??___xxtofl+3)^0,f,c
 12159   003BE2  C009  F00F         	movff	??___xxtofl,___xxtofl@arg
 12160   003BE6  C00A  F010         	movff	??___xxtofl+1,___xxtofl@arg+1
 12161   003BEA  C00B  F011         	movff	??___xxtofl+2,___xxtofl@arg+2
 12162   003BEE  C00C  F012         	movff	??___xxtofl+3,___xxtofl@arg+3
 12163   003BF2  EF03  F01E         	goto	l5000
 12164   003BF6                     l1168:
 12165   003BF6  C005  F00F         	movff	___xxtofl@val,___xxtofl@arg
 12166   003BFA  C006  F010         	movff	___xxtofl@val+1,___xxtofl@arg+1
 12167   003BFE  C007  F011         	movff	___xxtofl@val+2,___xxtofl@arg+2
 12168   003C02  C008  F012         	movff	___xxtofl@val+3,___xxtofl@arg+3
 12169   003C06                     l5000:
 12170   003C06  5005               	movf	___xxtofl@val^0,w,c
 12171   003C08  1006               	iorwf	(___xxtofl@val+1)^0,w,c
 12172   003C0A  1007               	iorwf	(___xxtofl@val+2)^0,w,c
 12173   003C0C  1008               	iorwf	(___xxtofl@val+3)^0,w,c
 12174   003C0E  A4D8               	btfss	status,2,c
 12175   003C10  EF0C  F01E         	goto	u5301
 12176   003C14  EF0E  F01E         	goto	u5300
 12177   003C18                     u5301:
 12178   003C18  EF18  F01E         	goto	l5006
 12179   003C1C                     u5300:
 12180   003C1C  0E00               	movlw	0
 12181   003C1E  6E05               	movwf	?___xxtofl^0,c
 12182   003C20  0E00               	movlw	0
 12183   003C22  6E06               	movwf	(?___xxtofl+1)^0,c
 12184   003C24  0E00               	movlw	0
 12185   003C26  6E07               	movwf	(?___xxtofl+2)^0,c
 12186   003C28  0E00               	movlw	0
 12187   003C2A  6E08               	movwf	(?___xxtofl+3)^0,c
 12188   003C2C  EFA9  F01E         	goto	l1171
 12189   003C30                     l5006:
 12190   003C30  0E96               	movlw	150
 12191   003C32  6E0E               	movwf	___xxtofl@exp^0,c
 12192   003C34  EF22  F01E         	goto	l5010
 12193   003C38                     l5008:
 12194   003C38  2A0E               	incf	___xxtofl@exp^0,f,c
 12195   003C3A  90D8               	bcf	status,0,c
 12196   003C3C  3212               	rrcf	(___xxtofl@arg+3)^0,f,c
 12197   003C3E  3211               	rrcf	(___xxtofl@arg+2)^0,f,c
 12198   003C40  3210               	rrcf	(___xxtofl@arg+1)^0,f,c
 12199   003C42  320F               	rrcf	___xxtofl@arg^0,f,c
 12200   003C44                     l5010:
 12201   003C44  0E00               	movlw	0
 12202   003C46  140F               	andwf	___xxtofl@arg^0,w,c
 12203   003C48  6E09               	movwf	??___xxtofl^0,c
 12204   003C4A  0E00               	movlw	0
 12205   003C4C  1410               	andwf	(___xxtofl@arg+1)^0,w,c
 12206   003C4E  6E0A               	movwf	(??___xxtofl+1)^0,c
 12207   003C50  0E00               	movlw	0
 12208   003C52  1411               	andwf	(___xxtofl@arg+2)^0,w,c
 12209   003C54  6E0B               	movwf	(??___xxtofl+2)^0,c
 12210   003C56  0EFE               	movlw	254
 12211   003C58  1412               	andwf	(___xxtofl@arg+3)^0,w,c
 12212   003C5A  6E0C               	movwf	(??___xxtofl+3)^0,c
 12213   003C5C  5009               	movf	??___xxtofl^0,w,c
 12214   003C5E  100A               	iorwf	(??___xxtofl+1)^0,w,c
 12215   003C60  100B               	iorwf	(??___xxtofl+2)^0,w,c
 12216   003C62  100C               	iorwf	(??___xxtofl+3)^0,w,c
 12217   003C64  A4D8               	btfss	status,2,c
 12218   003C66  EF37  F01E         	goto	u5311
 12219   003C6A  EF39  F01E         	goto	u5310
 12220   003C6E                     u5311:
 12221   003C6E  EF1C  F01E         	goto	l5008
 12222   003C72                     u5310:
 12223   003C72  EF47  F01E         	goto	l1175
 12224   003C76                     l5012:
 12225   003C76  2A0E               	incf	___xxtofl@exp^0,f,c
 12226   003C78  0E01               	movlw	1
 12227   003C7A  260F               	addwf	___xxtofl@arg^0,f,c
 12228   003C7C  0E00               	movlw	0
 12229   003C7E  2210               	addwfc	(___xxtofl@arg+1)^0,f,c
 12230   003C80  2211               	addwfc	(___xxtofl@arg+2)^0,f,c
 12231   003C82  2212               	addwfc	(___xxtofl@arg+3)^0,f,c
 12232   003C84  90D8               	bcf	status,0,c
 12233   003C86  3212               	rrcf	(___xxtofl@arg+3)^0,f,c
 12234   003C88  3211               	rrcf	(___xxtofl@arg+2)^0,f,c
 12235   003C8A  3210               	rrcf	(___xxtofl@arg+1)^0,f,c
 12236   003C8C  320F               	rrcf	___xxtofl@arg^0,f,c
 12237   003C8E                     l1175:
 12238   003C8E  0E00               	movlw	0
 12239   003C90  140F               	andwf	___xxtofl@arg^0,w,c
 12240   003C92  6E09               	movwf	??___xxtofl^0,c
 12241   003C94  0E00               	movlw	0
 12242   003C96  1410               	andwf	(___xxtofl@arg+1)^0,w,c
 12243   003C98  6E0A               	movwf	(??___xxtofl+1)^0,c
 12244   003C9A  0E00               	movlw	0
 12245   003C9C  1411               	andwf	(___xxtofl@arg+2)^0,w,c
 12246   003C9E  6E0B               	movwf	(??___xxtofl+2)^0,c
 12247   003CA0  0EFF               	movlw	255
 12248   003CA2  1412               	andwf	(___xxtofl@arg+3)^0,w,c
 12249   003CA4  6E0C               	movwf	(??___xxtofl+3)^0,c
 12250   003CA6  5009               	movf	??___xxtofl^0,w,c
 12251   003CA8  100A               	iorwf	(??___xxtofl+1)^0,w,c
 12252   003CAA  100B               	iorwf	(??___xxtofl+2)^0,w,c
 12253   003CAC  100C               	iorwf	(??___xxtofl+3)^0,w,c
 12254   003CAE  A4D8               	btfss	status,2,c
 12255   003CB0  EF5C  F01E         	goto	u5321
 12256   003CB4  EF5E  F01E         	goto	u5320
 12257   003CB8                     u5321:
 12258   003CB8  EF3B  F01E         	goto	l5012
 12259   003CBC                     u5320:
 12260   003CBC  EF66  F01E         	goto	l5020
 12261   003CC0                     l5018:
 12262   003CC0  060E               	decf	___xxtofl@exp^0,f,c
 12263   003CC2  90D8               	bcf	status,0,c
 12264   003CC4  360F               	rlcf	___xxtofl@arg^0,f,c
 12265   003CC6  3610               	rlcf	(___xxtofl@arg+1)^0,f,c
 12266   003CC8  3611               	rlcf	(___xxtofl@arg+2)^0,f,c
 12267   003CCA  3612               	rlcf	(___xxtofl@arg+3)^0,f,c
 12268   003CCC                     l5020:
 12269   003CCC  BE11               	btfsc	(___xxtofl@arg+2)^0,7,c
 12270   003CCE  EF6B  F01E         	goto	u5331
 12271   003CD2  EF6D  F01E         	goto	u5330
 12272   003CD6                     u5331:
 12273   003CD6  EF75  F01E         	goto	l1182
 12274   003CDA                     u5330:
 12275   003CDA  0E02               	movlw	2
 12276   003CDC  600E               	cpfslt	___xxtofl@exp^0,c
 12277   003CDE  EF73  F01E         	goto	u5341
 12278   003CE2  EF75  F01E         	goto	u5340
 12279   003CE6                     u5341:
 12280   003CE6  EF60  F01E         	goto	l5018
 12281   003CEA                     u5340:
 12282   003CEA                     l1182:
 12283   003CEA  B00E               	btfsc	___xxtofl@exp^0,0,c
 12284   003CEC  EF7A  F01E         	goto	u5351
 12285   003CF0  EF7C  F01E         	goto	u5350
 12286   003CF4                     u5351:
 12287   003CF4  EF7D  F01E         	goto	l5026
 12288   003CF8                     u5350:
 12289   003CF8  9E11               	bcf	(___xxtofl@arg+2)^0,7,c
 12290   003CFA                     l5026:
 12291   003CFA  90D8               	bcf	status,0,c
 12292   003CFC  320E               	rrcf	___xxtofl@exp^0,f,c
 12293   003CFE  C00E  F009         	movff	___xxtofl@exp,??___xxtofl
 12294   003D02  6A0A               	clrf	(??___xxtofl+1)^0,c
 12295   003D04  6A0B               	clrf	(??___xxtofl+2)^0,c
 12296   003D06  6A0C               	clrf	(??___xxtofl+3)^0,c
 12297   003D08  C009  F00C         	movff	??___xxtofl,??___xxtofl+3
 12298   003D0C  6A0B               	clrf	(??___xxtofl+2)^0,c
 12299   003D0E  6A0A               	clrf	(??___xxtofl+1)^0,c
 12300   003D10  6A09               	clrf	??___xxtofl^0,c
 12301   003D12  5009               	movf	??___xxtofl^0,w,c
 12302   003D14  120F               	iorwf	___xxtofl@arg^0,f,c
 12303   003D16  500A               	movf	(??___xxtofl+1)^0,w,c
 12304   003D18  1210               	iorwf	(___xxtofl@arg+1)^0,f,c
 12305   003D1A  500B               	movf	(??___xxtofl+2)^0,w,c
 12306   003D1C  1211               	iorwf	(___xxtofl@arg+2)^0,f,c
 12307   003D1E  500C               	movf	(??___xxtofl+3)^0,w,c
 12308   003D20  1212               	iorwf	(___xxtofl@arg+3)^0,f,c
 12309   003D22  500D               	movf	___xxtofl@sign^0,w,c
 12310   003D24  B4D8               	btfsc	status,2,c
 12311   003D26  EF97  F01E         	goto	u5361
 12312   003D2A  EF99  F01E         	goto	u5360
 12313   003D2E                     u5361:
 12314   003D2E  EFA1  F01E         	goto	l5036
 12315   003D32                     u5360:
 12316   003D32  BE08               	btfsc	(___xxtofl@val+3)^0,7,c
 12317   003D34  EFA0  F01E         	goto	u5370
 12318   003D38  EF9E  F01E         	goto	u5371
 12319   003D3C                     u5371:
 12320   003D3C  EFA1  F01E         	goto	l5036
 12321   003D40                     u5370:
 12322   003D40  8E12               	bsf	(___xxtofl@arg+3)^0,7,c
 12323   003D42                     l5036:
 12324   003D42  C00F  F005         	movff	___xxtofl@arg,?___xxtofl
 12325   003D46  C010  F006         	movff	___xxtofl@arg+1,?___xxtofl+1
 12326   003D4A  C011  F007         	movff	___xxtofl@arg+2,?___xxtofl+2
 12327   003D4E  C012  F008         	movff	___xxtofl@arg+3,?___xxtofl+3
 12328   003D52                     l1171:
 12329   003D52  0012               	return		;funcret
 12330   003D54                     __end_of___xxtofl:
 12331                           	callstack 0
 12332                           
 12333 ;; *************** function _TxBufferedString *****************
 12334 ;; Defined at:
 12335 ;;		line 118 in file "serialTest.c"
 12336 ;; Parameters:    Size  Location     Type
 12337 ;;  string          2    5[COMRAM] PTR unsigned char 
 12338 ;;		 -> colorDetect@string1(20), 
 12339 ;; Auto vars:     Size  Location     Type
 12340 ;;		None
 12341 ;; Return value:  Size  Location     Type
 12342 ;;                  1    wreg      void 
 12343 ;; Registers used:
 12344 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12345 ;; Tracked objects:
 12346 ;;		On entry : 0/0
 12347 ;;		On exit  : 0/0
 12348 ;;		Unchanged: 0/0
 12349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12350 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12351 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12353 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12354 ;;Total ram usage:        2 bytes
 12355 ;; Hardware stack levels used: 1
 12356 ;; Hardware stack levels required when called: 3
 12357 ;; This function calls:
 12358 ;;		_putCharToTxBuf
 12359 ;; This function is called by:
 12360 ;;		_colorDetect
 12361 ;; This function uses a non-reentrant model
 12362 ;;
 12363                           
 12364                           	psect	text50
 12365   005946                     __ptext50:
 12366                           	callstack 0
 12367   005946                     _TxBufferedString:
 12368                           	callstack 26
 12369   005946                     
 12370                           ;serialTest.c: 121:     while(*string != 0) {putCharToTxBuf(*string++);}
 12371   005946  EFAE  F02C         	goto	l4906
 12372   00594A                     l4902:
 12373   00594A  C006  FFD9         	movff	TxBufferedString@string,fsr2l
 12374   00594E  C007  FFDA         	movff	TxBufferedString@string+1,fsr2h
 12375   005952  50DF               	movf	indf2,w,c
 12376   005954  ECFD  F02C         	call	_putCharToTxBuf
 12377   005958  4A06               	infsnz	TxBufferedString@string^0,f,c
 12378   00595A  2A07               	incf	(TxBufferedString@string+1)^0,f,c
 12379   00595C                     l4906:
 12380   00595C  C006  FFD9         	movff	TxBufferedString@string,fsr2l
 12381   005960  C007  FFDA         	movff	TxBufferedString@string+1,fsr2h
 12382   005964  50DF               	movf	indf2,w,c
 12383   005966  A4D8               	btfss	status,2,c
 12384   005968  EFB8  F02C         	goto	u5221
 12385   00596C  EFBA  F02C         	goto	u5220
 12386   005970                     u5221:
 12387   005970  EFA5  F02C         	goto	l4902
 12388   005974                     u5220:
 12389   005974  0012               	return		;funcret
 12390   005976                     __end_of_TxBufferedString:
 12391                           	callstack 0
 12392                           
 12393 ;; *************** function _putCharToTxBuf *****************
 12394 ;; Defined at:
 12395 ;;		line 105 in file "serialTest.c"
 12396 ;; Parameters:    Size  Location     Type
 12397 ;;  byte            1    wreg     unsigned char 
 12398 ;; Auto vars:     Size  Location     Type
 12399 ;;  byte            1    4[COMRAM] unsigned char 
 12400 ;; Return value:  Size  Location     Type
 12401 ;;                  1    wreg      void 
 12402 ;; Registers used:
 12403 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12404 ;; Tracked objects:
 12405 ;;		On entry : 0/0
 12406 ;;		On exit  : 0/0
 12407 ;;		Unchanged: 0/0
 12408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12410 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12412 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12413 ;;Total ram usage:        1 bytes
 12414 ;; Hardware stack levels used: 1
 12415 ;; Hardware stack levels required when called: 2
 12416 ;; This function calls:
 12417 ;;		Nothing
 12418 ;; This function is called by:
 12419 ;;		_TxBufferedString
 12420 ;; This function uses a non-reentrant model
 12421 ;;
 12422                           
 12423                           	psect	text51
 12424   0059FA                     __ptext51:
 12425                           	callstack 0
 12426   0059FA                     _putCharToTxBuf:
 12427                           	callstack 26
 12428                           
 12429                           ;incstack = 0
 12430                           ;putCharToTxBuf@byte stored from wreg
 12431   0059FA  6E05               	movwf	putCharToTxBuf@byte^0,c
 12432   0059FC                     
 12433                           ;serialTest.c: 106:     if (TxBufWriteCnt>=60) {TxBufWriteCnt=0;}
 12434   0059FC  0E3B               	movlw	59
 12435   0059FE  6458               	cpfsgt	_TxBufWriteCnt^0,c	;volatile
 12436   005A00  EF04  F02D         	goto	u5181
 12437   005A04  EF06  F02D         	goto	u5180
 12438   005A08                     u5181:
 12439   005A08  EF08  F02D         	goto	l4854
 12440   005A0C                     u5180:
 12441   005A0C  0E00               	movlw	0
 12442   005A0E  6E58               	movwf	_TxBufWriteCnt^0,c	;volatile
 12443   005A10                     l4854:
 12444                           
 12445                           ;serialTest.c: 107:     EUSART4TXbuf[TxBufWriteCnt++]=byte;
 12446   005A10  0E00               	movlw	low _EUSART4TXbuf
 12447   005A12  2458               	addwf	_TxBufWriteCnt^0,w,c	;volatile
 12448   005A14  6ED9               	movwf	fsr2l,c
 12449   005A16  6ADA               	clrf	fsr2h,c
 12450   005A18  0E02               	movlw	high _EUSART4TXbuf
 12451   005A1A  22DA               	addwfc	fsr2h,f,c
 12452   005A1C  C005  FFDF         	movff	putCharToTxBuf@byte,indf2
 12453   005A20  2A58               	incf	_TxBufWriteCnt^0,f,c	;volatile
 12454   005A22  0012               	return		;funcret
 12455   005A24                     __end_of_putCharToTxBuf:
 12456                           	callstack 0
 12457                           
 12458 ;; *************** function _ambientCal *****************
 12459 ;; Defined at:
 12460 ;;		line 99 in file "MazeRobot.X/color.c"
 12461 ;; Parameters:    Size  Location     Type
 12462 ;;  v               2   17[COMRAM] PTR struct RGB
 12463 ;;		 -> main@ambientRGBVal(8), 
 12464 ;; Auto vars:     Size  Location     Type
 12465 ;;  i               2   21[COMRAM] int 
 12466 ;; Return value:  Size  Location     Type
 12467 ;;                  1    wreg      void 
 12468 ;; Registers used:
 12469 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12470 ;; Tracked objects:
 12471 ;;		On entry : 0/0
 12472 ;;		On exit  : 0/0
 12473 ;;		Unchanged: 0/0
 12474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12475 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12476 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12477 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12478 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12479 ;;Total ram usage:        6 bytes
 12480 ;; Hardware stack levels used: 1
 12481 ;; Hardware stack levels required when called: 6
 12482 ;; This function calls:
 12483 ;;		_getColor
 12484 ;; This function is called by:
 12485 ;;		_main
 12486 ;; This function uses a non-reentrant model
 12487 ;;
 12488                           
 12489                           	psect	text52
 12490   004BCC                     __ptext52:
 12491                           	callstack 0
 12492   004BCC                     _ambientCal:
 12493                           	callstack 24
 12494   004BCC                     
 12495                           ;MazeRobot.X/color.c: 102:     for(int i = 0;i<20;i++){
 12496   004BCC  0E00               	movlw	0
 12497   004BCE  6E17               	movwf	(ambientCal@i+1)^0,c
 12498   004BD0  0E00               	movlw	0
 12499   004BD2  6E16               	movwf	ambientCal@i^0,c
 12500   004BD4                     l5056:
 12501                           
 12502                           ;MazeRobot.X/color.c: 103:             LATDbits.LATD7 = !LATDbits.LATD7;
 12503   004BD4  AE7C               	btfss	124,7,c	;volatile
 12504   004BD6  EFEF  F025         	goto	u5381
 12505   004BDA  EFF3  F025         	goto	u5380
 12506   004BDE                     u5381:
 12507   004BDE  6A14               	clrf	??_ambientCal^0,c
 12508   004BE0  2A14               	incf	??_ambientCal^0,f,c
 12509   004BE2  EFF4  F025         	goto	u5398
 12510   004BE6                     u5380:
 12511   004BE6  6A14               	clrf	??_ambientCal^0,c
 12512   004BE8                     u5398:
 12513   004BE8  3214               	rrcf	??_ambientCal^0,f,c
 12514   004BEA  3214               	rrcf	??_ambientCal^0,f,c
 12515   004BEC  507C               	movf	124,w,c	;volatile
 12516   004BEE  1814               	xorwf	??_ambientCal^0,w,c
 12517   004BF0  0B7F               	andlw	-129
 12518   004BF2  1814               	xorwf	??_ambientCal^0,w,c
 12519   004BF4  6E7C               	movwf	124,c	;volatile
 12520   004BF6                     
 12521                           ;MazeRobot.X/color.c: 104:             _delay((unsigned long)((100)*(64000000/4000.0)));
 12522   004BF6  0E09               	movlw	9
 12523   004BF8  6E15               	movwf	(??_ambientCal+1)^0,c
 12524   004BFA  0E1E               	movlw	30
 12525   004BFC  6E14               	movwf	??_ambientCal^0,c
 12526   004BFE  0EE4               	movlw	228
 12527   004C00                     u7587:
 12528   004C00  2EE8               	decfsz	wreg,f,c
 12529   004C02  D7FE               	bra	u7587
 12530   004C04  2E14               	decfsz	??_ambientCal^0,f,c
 12531   004C06  D7FC               	bra	u7587
 12532   004C08  2E15               	decfsz	(??_ambientCal+1)^0,f,c
 12533   004C0A  D7FA               	bra	u7587
 12534   004C0C  D000               	nop2	
 12535                           
 12536                           ;MazeRobot.X/color.c: 105:             }
 12537   004C0E  4A16               	infsnz	ambientCal@i^0,f,c
 12538   004C10  2A17               	incf	(ambientCal@i+1)^0,f,c
 12539   004C12  BE17               	btfsc	(ambientCal@i+1)^0,7,c
 12540   004C14  EF15  F026         	goto	u5401
 12541   004C18  5017               	movf	(ambientCal@i+1)^0,w,c
 12542   004C1A  E109               	bnz	u5400
 12543   004C1C  0E14               	movlw	20
 12544   004C1E  5C16               	subwf	ambientCal@i^0,w,c
 12545   004C20  A0D8               	btfss	status,0,c
 12546   004C22  EF15  F026         	goto	u5401
 12547   004C26  EF17  F026         	goto	u5400
 12548   004C2A                     u5401:
 12549   004C2A  EFEA  F025         	goto	l5056
 12550   004C2E                     u5400:
 12551   004C2E                     
 12552                           ;MazeRobot.X/color.c: 106:             LATDbits.LATD7 = !LATDbits.LATD7;
 12553   004C2E  AE7C               	btfss	124,7,c	;volatile
 12554   004C30  EF1C  F026         	goto	u5411
 12555   004C34  EF20  F026         	goto	u5410
 12556   004C38                     u5411:
 12557   004C38  6A14               	clrf	??_ambientCal^0,c
 12558   004C3A  2A14               	incf	??_ambientCal^0,f,c
 12559   004C3C  EF21  F026         	goto	u5428
 12560   004C40                     u5410:
 12561   004C40  6A14               	clrf	??_ambientCal^0,c
 12562   004C42                     u5428:
 12563   004C42  3214               	rrcf	??_ambientCal^0,f,c
 12564   004C44  3214               	rrcf	??_ambientCal^0,f,c
 12565   004C46  507C               	movf	124,w,c	;volatile
 12566   004C48  1814               	xorwf	??_ambientCal^0,w,c
 12567   004C4A  0B7F               	andlw	-129
 12568   004C4C  1814               	xorwf	??_ambientCal^0,w,c
 12569   004C4E  6E7C               	movwf	124,c	;volatile
 12570   004C50                     
 12571                           ;MazeRobot.X/color.c: 107:             _delay((unsigned long)((500)*(64000000/4000.0)));
 12572   004C50  0E29               	movlw	41
 12573   004C52  6E15               	movwf	(??_ambientCal+1)^0,c
 12574   004C54  0E96               	movlw	150
 12575   004C56  6E14               	movwf	??_ambientCal^0,c
 12576   004C58  0E7F               	movlw	127
 12577   004C5A                     u7597:
 12578   004C5A  2EE8               	decfsz	wreg,f,c
 12579   004C5C  D7FE               	bra	u7597
 12580   004C5E  2E14               	decfsz	??_ambientCal^0,f,c
 12581   004C60  D7FC               	bra	u7597
 12582   004C62  2E15               	decfsz	(??_ambientCal+1)^0,f,c
 12583   004C64  D7FA               	bra	u7597
 12584   004C66  F000               	nop	
 12585   004C68                     
 12586                           ;MazeRobot.X/color.c: 108:             getColor(v);
 12587   004C68  C012  F010         	movff	ambientCal@v,getColor@v
 12588   004C6C  C013  F011         	movff	ambientCal@v+1,getColor@v+1
 12589   004C70  EC30  F02A         	call	_getColor	;wreg free
 12590   004C74                     
 12591                           ;MazeRobot.X/color.c: 109:             _delay((unsigned long)((500)*(64000000/4000.0)));
 12592   004C74  0E29               	movlw	41
 12593   004C76  6E15               	movwf	(??_ambientCal+1)^0,c
 12594   004C78  0E96               	movlw	150
 12595   004C7A  6E14               	movwf	??_ambientCal^0,c
 12596   004C7C  0E7F               	movlw	127
 12597   004C7E                     u7607:
 12598   004C7E  2EE8               	decfsz	wreg,f,c
 12599   004C80  D7FE               	bra	u7607
 12600   004C82  2E14               	decfsz	??_ambientCal^0,f,c
 12601   004C84  D7FC               	bra	u7607
 12602   004C86  2E15               	decfsz	(??_ambientCal+1)^0,f,c
 12603   004C88  D7FA               	bra	u7607
 12604   004C8A  F000               	nop	
 12605   004C8C                     
 12606                           ;MazeRobot.X/color.c: 110:             LATDbits.LATD7 = !LATDbits.LATD7;
 12607   004C8C  AE7C               	btfss	124,7,c	;volatile
 12608   004C8E  EF4B  F026         	goto	u5431
 12609   004C92  EF4F  F026         	goto	u5430
 12610   004C96                     u5431:
 12611   004C96  6A14               	clrf	??_ambientCal^0,c
 12612   004C98  2A14               	incf	??_ambientCal^0,f,c
 12613   004C9A  EF50  F026         	goto	u5448
 12614   004C9E                     u5430:
 12615   004C9E  6A14               	clrf	??_ambientCal^0,c
 12616   004CA0                     u5448:
 12617   004CA0  3214               	rrcf	??_ambientCal^0,f,c
 12618   004CA2  3214               	rrcf	??_ambientCal^0,f,c
 12619   004CA4  507C               	movf	124,w,c	;volatile
 12620   004CA6  1814               	xorwf	??_ambientCal^0,w,c
 12621   004CA8  0B7F               	andlw	-129
 12622   004CAA  1814               	xorwf	??_ambientCal^0,w,c
 12623   004CAC  6E7C               	movwf	124,c	;volatile
 12624   004CAE  0012               	return		;funcret
 12625   004CB0                     __end_of_ambientCal:
 12626                           	callstack 0
 12627                           
 12628 ;; *************** function _getColor *****************
 12629 ;; Defined at:
 12630 ;;		line 91 in file "MazeRobot.X/color.c"
 12631 ;; Parameters:    Size  Location     Type
 12632 ;;  v               2   15[COMRAM] PTR struct RGB
 12633 ;;		 -> main@whiteRGBVal(8), main@RGBVal(8), main@ambientRGBVal(8), colorDetect@RGBVal(8), 
 12634 ;; Auto vars:     Size  Location     Type
 12635 ;;		None
 12636 ;; Return value:  Size  Location     Type
 12637 ;;                  1    wreg      void 
 12638 ;; Registers used:
 12639 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12640 ;; Tracked objects:
 12641 ;;		On entry : 0/0
 12642 ;;		On exit  : 0/0
 12643 ;;		Unchanged: 0/0
 12644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12645 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12648 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12649 ;;Total ram usage:        2 bytes
 12650 ;; Hardware stack levels used: 1
 12651 ;; Hardware stack levels required when called: 5
 12652 ;; This function calls:
 12653 ;;		_color_read_Blue
 12654 ;;		_color_read_Clear
 12655 ;;		_color_read_Green
 12656 ;;		_color_read_Red
 12657 ;; This function is called by:
 12658 ;;		_ambientCal
 12659 ;;		_whiteCal
 12660 ;;		_colorDetect
 12661 ;;		_main
 12662 ;; This function uses a non-reentrant model
 12663 ;;
 12664                           
 12665                           	psect	text53
 12666   005460                     __ptext53:
 12667                           	callstack 0
 12668   005460                     _getColor:
 12669                           	callstack 24
 12670   005460                     
 12671                           ;MazeRobot.X/color.c: 92:     v->R = color_read_Red();
 12672   005460  EC06  F02B         	call	_color_read_Red	;wreg free
 12673   005464  C010  FFD9         	movff	getColor@v,fsr2l
 12674   005468  C011  FFDA         	movff	getColor@v+1,fsr2h
 12675   00546C  C009  FFDE         	movff	?_color_read_Red,postinc2
 12676   005470  C00A  FFDD         	movff	?_color_read_Red+1,postdec2
 12677                           
 12678                           ;MazeRobot.X/color.c: 93:     v->G = color_read_Green();
 12679   005474  EC2E  F02B         	call	_color_read_Green	;wreg free
 12680   005478  EE20 F002          	lfsr	2,2
 12681   00547C  5010               	movf	getColor@v^0,w,c
 12682   00547E  26D9               	addwf	fsr2l,f,c
 12683   005480  5011               	movf	(getColor@v+1)^0,w,c
 12684   005482  22DA               	addwfc	fsr2h,f,c
 12685   005484  C009  FFDE         	movff	?_color_read_Green,postinc2
 12686   005488  C00A  FFDD         	movff	?_color_read_Green+1,postdec2
 12687                           
 12688                           ;MazeRobot.X/color.c: 94:     v->B = color_read_Blue();
 12689   00548C  EC7E  F02B         	call	_color_read_Blue	;wreg free
 12690   005490  EE20 F004          	lfsr	2,4
 12691   005494  5010               	movf	getColor@v^0,w,c
 12692   005496  26D9               	addwf	fsr2l,f,c
 12693   005498  5011               	movf	(getColor@v+1)^0,w,c
 12694   00549A  22DA               	addwfc	fsr2h,f,c
 12695   00549C  C009  FFDE         	movff	?_color_read_Blue,postinc2
 12696   0054A0  C00A  FFDD         	movff	?_color_read_Blue+1,postdec2
 12697                           
 12698                           ;MazeRobot.X/color.c: 95:     v->C = color_read_Clear();
 12699   0054A4  EC56  F02B         	call	_color_read_Clear	;wreg free
 12700   0054A8  EE20 F006          	lfsr	2,6
 12701   0054AC  5010               	movf	getColor@v^0,w,c
 12702   0054AE  26D9               	addwf	fsr2l,f,c
 12703   0054B0  5011               	movf	(getColor@v+1)^0,w,c
 12704   0054B2  22DA               	addwfc	fsr2h,f,c
 12705   0054B4  C009  FFDE         	movff	?_color_read_Clear,postinc2
 12706   0054B8  C00A  FFDD         	movff	?_color_read_Clear+1,postdec2
 12707   0054BC  0012               	return		;funcret
 12708   0054BE                     __end_of_getColor:
 12709                           	callstack 0
 12710                           
 12711 ;; *************** function _color_read_Red *****************
 12712 ;; Defined at:
 12713 ;;		line 33 in file "MazeRobot.X/color.c"
 12714 ;; Parameters:    Size  Location     Type
 12715 ;;		None
 12716 ;; Auto vars:     Size  Location     Type
 12717 ;;  tmp             2   13[COMRAM] unsigned int 
 12718 ;; Return value:  Size  Location     Type
 12719 ;;                  2    8[COMRAM] unsigned int 
 12720 ;; Registers used:
 12721 ;;		wreg, status,2, status,0, cstack
 12722 ;; Tracked objects:
 12723 ;;		On entry : 0/0
 12724 ;;		On exit  : 0/0
 12725 ;;		Unchanged: 0/0
 12726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12727 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12728 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12729 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12730 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12731 ;;Total ram usage:        7 bytes
 12732 ;; Hardware stack levels used: 1
 12733 ;; Hardware stack levels required when called: 4
 12734 ;; This function calls:
 12735 ;;		_I2C_2_Master_Read
 12736 ;;		_I2C_2_Master_RepStart
 12737 ;;		_I2C_2_Master_Start
 12738 ;;		_I2C_2_Master_Stop
 12739 ;;		_I2C_2_Master_Write
 12740 ;; This function is called by:
 12741 ;;		_getColor
 12742 ;; This function uses a non-reentrant model
 12743 ;;
 12744                           
 12745                           	psect	text54
 12746   00560C                     __ptext54:
 12747                           	callstack 0
 12748   00560C                     _color_read_Red:
 12749                           	callstack 24
 12750   00560C                     
 12751                           ;MazeRobot.X/color.c: 35:  unsigned int tmp;;MazeRobot.X/color.c: 36:  I2C_2_Master_Star
      +                          t();
 12752   00560C  EC8E  F02D         	call	_I2C_2_Master_Start	;wreg free
 12753                           
 12754                           ;MazeRobot.X/color.c: 37:  I2C_2_Master_Write(0x52 | 0x00);
 12755   005610  0E52               	movlw	82
 12756   005612  EC83  F02D         	call	_I2C_2_Master_Write
 12757                           
 12758                           ;MazeRobot.X/color.c: 38:  I2C_2_Master_Write(0xA0 | 0x16);
 12759   005616  0EB6               	movlw	182
 12760   005618  EC83  F02D         	call	_I2C_2_Master_Write
 12761                           
 12762                           ;MazeRobot.X/color.c: 39:  I2C_2_Master_RepStart();
 12763   00561C  EC93  F02D         	call	_I2C_2_Master_RepStart	;wreg free
 12764                           
 12765                           ;MazeRobot.X/color.c: 40:  I2C_2_Master_Write(0x52 | 0x01);
 12766   005620  0E53               	movlw	83
 12767   005622  EC83  F02D         	call	_I2C_2_Master_Write
 12768                           
 12769                           ;MazeRobot.X/color.c: 41:  tmp=I2C_2_Master_Read(1);
 12770   005626  0E01               	movlw	1
 12771   005628  EC0D  F02C         	call	_I2C_2_Master_Read
 12772   00562C  6E0B               	movwf	??_color_read_Red^0,c
 12773   00562E  500B               	movf	??_color_read_Red^0,w,c
 12774   005630  6E0E               	movwf	color_read_Red@tmp^0,c
 12775   005632  6A0F               	clrf	(color_read_Red@tmp+1)^0,c
 12776                           
 12777                           ;MazeRobot.X/color.c: 42:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 12778   005634  0E00               	movlw	0
 12779   005636  EC0D  F02C         	call	_I2C_2_Master_Read
 12780   00563A  6E0B               	movwf	??_color_read_Red^0,c
 12781   00563C  500B               	movf	??_color_read_Red^0,w,c
 12782   00563E  6E0D               	movwf	(??_color_read_Red+2)^0,c
 12783   005640  6A0C               	clrf	(??_color_read_Red+1)^0,c
 12784   005642  500E               	movf	color_read_Red@tmp^0,w,c
 12785   005644  100C               	iorwf	(??_color_read_Red+1)^0,w,c
 12786   005646  6E0E               	movwf	color_read_Red@tmp^0,c
 12787   005648  500F               	movf	(color_read_Red@tmp+1)^0,w,c
 12788   00564A  100D               	iorwf	(??_color_read_Red+2)^0,w,c
 12789   00564C  6E0F               	movwf	(color_read_Red@tmp+1)^0,c
 12790                           
 12791                           ;MazeRobot.X/color.c: 43:  I2C_2_Master_Stop();
 12792   00564E  EC89  F02D         	call	_I2C_2_Master_Stop	;wreg free
 12793   005652                     
 12794                           ;MazeRobot.X/color.c: 44:  return tmp;
 12795   005652  C00E  F009         	movff	color_read_Red@tmp,?_color_read_Red
 12796   005656  C00F  F00A         	movff	color_read_Red@tmp+1,?_color_read_Red+1
 12797   00565A  0012               	return		;funcret
 12798   00565C                     __end_of_color_read_Red:
 12799                           	callstack 0
 12800                           
 12801 ;; *************** function _color_read_Green *****************
 12802 ;; Defined at:
 12803 ;;		line 47 in file "MazeRobot.X/color.c"
 12804 ;; Parameters:    Size  Location     Type
 12805 ;;		None
 12806 ;; Auto vars:     Size  Location     Type
 12807 ;;  tmp             2   13[COMRAM] unsigned int 
 12808 ;; Return value:  Size  Location     Type
 12809 ;;                  2    8[COMRAM] unsigned int 
 12810 ;; Registers used:
 12811 ;;		wreg, status,2, status,0, cstack
 12812 ;; Tracked objects:
 12813 ;;		On entry : 0/0
 12814 ;;		On exit  : 0/0
 12815 ;;		Unchanged: 0/0
 12816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12817 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12818 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12819 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12820 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12821 ;;Total ram usage:        7 bytes
 12822 ;; Hardware stack levels used: 1
 12823 ;; Hardware stack levels required when called: 4
 12824 ;; This function calls:
 12825 ;;		_I2C_2_Master_Read
 12826 ;;		_I2C_2_Master_RepStart
 12827 ;;		_I2C_2_Master_Start
 12828 ;;		_I2C_2_Master_Stop
 12829 ;;		_I2C_2_Master_Write
 12830 ;; This function is called by:
 12831 ;;		_getColor
 12832 ;; This function uses a non-reentrant model
 12833 ;;
 12834                           
 12835                           	psect	text55
 12836   00565C                     __ptext55:
 12837                           	callstack 0
 12838   00565C                     _color_read_Green:
 12839                           	callstack 24
 12840   00565C                     
 12841                           ;MazeRobot.X/color.c: 49:  unsigned int tmp;;MazeRobot.X/color.c: 50:  I2C_2_Master_Star
      +                          t();
 12842   00565C  EC8E  F02D         	call	_I2C_2_Master_Start	;wreg free
 12843                           
 12844                           ;MazeRobot.X/color.c: 51:  I2C_2_Master_Write(0x52 | 0x00);
 12845   005660  0E52               	movlw	82
 12846   005662  EC83  F02D         	call	_I2C_2_Master_Write
 12847                           
 12848                           ;MazeRobot.X/color.c: 52:  I2C_2_Master_Write(0xA0 | 0x18);
 12849   005666  0EB8               	movlw	184
 12850   005668  EC83  F02D         	call	_I2C_2_Master_Write
 12851                           
 12852                           ;MazeRobot.X/color.c: 53:  I2C_2_Master_RepStart();
 12853   00566C  EC93  F02D         	call	_I2C_2_Master_RepStart	;wreg free
 12854                           
 12855                           ;MazeRobot.X/color.c: 54:  I2C_2_Master_Write(0x52 | 0x01);
 12856   005670  0E53               	movlw	83
 12857   005672  EC83  F02D         	call	_I2C_2_Master_Write
 12858                           
 12859                           ;MazeRobot.X/color.c: 55:  tmp=I2C_2_Master_Read(1);
 12860   005676  0E01               	movlw	1
 12861   005678  EC0D  F02C         	call	_I2C_2_Master_Read
 12862   00567C  6E0B               	movwf	??_color_read_Green^0,c
 12863   00567E  500B               	movf	??_color_read_Green^0,w,c
 12864   005680  6E0E               	movwf	color_read_Green@tmp^0,c
 12865   005682  6A0F               	clrf	(color_read_Green@tmp+1)^0,c
 12866                           
 12867                           ;MazeRobot.X/color.c: 56:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 12868   005684  0E00               	movlw	0
 12869   005686  EC0D  F02C         	call	_I2C_2_Master_Read
 12870   00568A  6E0B               	movwf	??_color_read_Green^0,c
 12871   00568C  500B               	movf	??_color_read_Green^0,w,c
 12872   00568E  6E0D               	movwf	(??_color_read_Green+2)^0,c
 12873   005690  6A0C               	clrf	(??_color_read_Green+1)^0,c
 12874   005692  500E               	movf	color_read_Green@tmp^0,w,c
 12875   005694  100C               	iorwf	(??_color_read_Green+1)^0,w,c
 12876   005696  6E0E               	movwf	color_read_Green@tmp^0,c
 12877   005698  500F               	movf	(color_read_Green@tmp+1)^0,w,c
 12878   00569A  100D               	iorwf	(??_color_read_Green+2)^0,w,c
 12879   00569C  6E0F               	movwf	(color_read_Green@tmp+1)^0,c
 12880                           
 12881                           ;MazeRobot.X/color.c: 57:  I2C_2_Master_Stop();
 12882   00569E  EC89  F02D         	call	_I2C_2_Master_Stop	;wreg free
 12883   0056A2                     
 12884                           ;MazeRobot.X/color.c: 58:  return tmp;
 12885   0056A2  C00E  F009         	movff	color_read_Green@tmp,?_color_read_Green
 12886   0056A6  C00F  F00A         	movff	color_read_Green@tmp+1,?_color_read_Green+1
 12887   0056AA  0012               	return		;funcret
 12888   0056AC                     __end_of_color_read_Green:
 12889                           	callstack 0
 12890                           
 12891 ;; *************** function _color_read_Clear *****************
 12892 ;; Defined at:
 12893 ;;		line 76 in file "MazeRobot.X/color.c"
 12894 ;; Parameters:    Size  Location     Type
 12895 ;;		None
 12896 ;; Auto vars:     Size  Location     Type
 12897 ;;  tmp             2   13[COMRAM] unsigned int 
 12898 ;; Return value:  Size  Location     Type
 12899 ;;                  2    8[COMRAM] unsigned int 
 12900 ;; Registers used:
 12901 ;;		wreg, status,2, status,0, cstack
 12902 ;; Tracked objects:
 12903 ;;		On entry : 0/0
 12904 ;;		On exit  : 0/0
 12905 ;;		Unchanged: 0/0
 12906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12907 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12908 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12909 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12910 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12911 ;;Total ram usage:        7 bytes
 12912 ;; Hardware stack levels used: 1
 12913 ;; Hardware stack levels required when called: 4
 12914 ;; This function calls:
 12915 ;;		_I2C_2_Master_Read
 12916 ;;		_I2C_2_Master_RepStart
 12917 ;;		_I2C_2_Master_Start
 12918 ;;		_I2C_2_Master_Stop
 12919 ;;		_I2C_2_Master_Write
 12920 ;; This function is called by:
 12921 ;;		_getColor
 12922 ;; This function uses a non-reentrant model
 12923 ;;
 12924                           
 12925                           	psect	text56
 12926   0056AC                     __ptext56:
 12927                           	callstack 0
 12928   0056AC                     _color_read_Clear:
 12929                           	callstack 24
 12930   0056AC                     
 12931                           ;MazeRobot.X/color.c: 78:  unsigned int tmp;;MazeRobot.X/color.c: 79:  I2C_2_Master_Star
      +                          t();
 12932   0056AC  EC8E  F02D         	call	_I2C_2_Master_Start	;wreg free
 12933                           
 12934                           ;MazeRobot.X/color.c: 80:  I2C_2_Master_Write(0x52 | 0x00);
 12935   0056B0  0E52               	movlw	82
 12936   0056B2  EC83  F02D         	call	_I2C_2_Master_Write
 12937                           
 12938                           ;MazeRobot.X/color.c: 81:  I2C_2_Master_Write(0xA0 | 0x14);
 12939   0056B6  0EB4               	movlw	180
 12940   0056B8  EC83  F02D         	call	_I2C_2_Master_Write
 12941                           
 12942                           ;MazeRobot.X/color.c: 82:  I2C_2_Master_RepStart();
 12943   0056BC  EC93  F02D         	call	_I2C_2_Master_RepStart	;wreg free
 12944                           
 12945                           ;MazeRobot.X/color.c: 83:  I2C_2_Master_Write(0x52 | 0x01);
 12946   0056C0  0E53               	movlw	83
 12947   0056C2  EC83  F02D         	call	_I2C_2_Master_Write
 12948                           
 12949                           ;MazeRobot.X/color.c: 84:  tmp=I2C_2_Master_Read(1);
 12950   0056C6  0E01               	movlw	1
 12951   0056C8  EC0D  F02C         	call	_I2C_2_Master_Read
 12952   0056CC  6E0B               	movwf	??_color_read_Clear^0,c
 12953   0056CE  500B               	movf	??_color_read_Clear^0,w,c
 12954   0056D0  6E0E               	movwf	color_read_Clear@tmp^0,c
 12955   0056D2  6A0F               	clrf	(color_read_Clear@tmp+1)^0,c
 12956                           
 12957                           ;MazeRobot.X/color.c: 85:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 12958   0056D4  0E00               	movlw	0
 12959   0056D6  EC0D  F02C         	call	_I2C_2_Master_Read
 12960   0056DA  6E0B               	movwf	??_color_read_Clear^0,c
 12961   0056DC  500B               	movf	??_color_read_Clear^0,w,c
 12962   0056DE  6E0D               	movwf	(??_color_read_Clear+2)^0,c
 12963   0056E0  6A0C               	clrf	(??_color_read_Clear+1)^0,c
 12964   0056E2  500E               	movf	color_read_Clear@tmp^0,w,c
 12965   0056E4  100C               	iorwf	(??_color_read_Clear+1)^0,w,c
 12966   0056E6  6E0E               	movwf	color_read_Clear@tmp^0,c
 12967   0056E8  500F               	movf	(color_read_Clear@tmp+1)^0,w,c
 12968   0056EA  100D               	iorwf	(??_color_read_Clear+2)^0,w,c
 12969   0056EC  6E0F               	movwf	(color_read_Clear@tmp+1)^0,c
 12970                           
 12971                           ;MazeRobot.X/color.c: 86:  I2C_2_Master_Stop();
 12972   0056EE  EC89  F02D         	call	_I2C_2_Master_Stop	;wreg free
 12973   0056F2                     
 12974                           ;MazeRobot.X/color.c: 87:  return tmp;
 12975   0056F2  C00E  F009         	movff	color_read_Clear@tmp,?_color_read_Clear
 12976   0056F6  C00F  F00A         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
 12977   0056FA  0012               	return		;funcret
 12978   0056FC                     __end_of_color_read_Clear:
 12979                           	callstack 0
 12980                           
 12981 ;; *************** function _color_read_Blue *****************
 12982 ;; Defined at:
 12983 ;;		line 62 in file "MazeRobot.X/color.c"
 12984 ;; Parameters:    Size  Location     Type
 12985 ;;		None
 12986 ;; Auto vars:     Size  Location     Type
 12987 ;;  tmp             2   13[COMRAM] unsigned int 
 12988 ;; Return value:  Size  Location     Type
 12989 ;;                  2    8[COMRAM] unsigned int 
 12990 ;; Registers used:
 12991 ;;		wreg, status,2, status,0, cstack
 12992 ;; Tracked objects:
 12993 ;;		On entry : 0/0
 12994 ;;		On exit  : 0/0
 12995 ;;		Unchanged: 0/0
 12996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12997 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12998 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12999 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13000 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13001 ;;Total ram usage:        7 bytes
 13002 ;; Hardware stack levels used: 1
 13003 ;; Hardware stack levels required when called: 4
 13004 ;; This function calls:
 13005 ;;		_I2C_2_Master_Read
 13006 ;;		_I2C_2_Master_RepStart
 13007 ;;		_I2C_2_Master_Start
 13008 ;;		_I2C_2_Master_Stop
 13009 ;;		_I2C_2_Master_Write
 13010 ;; This function is called by:
 13011 ;;		_getColor
 13012 ;; This function uses a non-reentrant model
 13013 ;;
 13014                           
 13015                           	psect	text57
 13016   0056FC                     __ptext57:
 13017                           	callstack 0
 13018   0056FC                     _color_read_Blue:
 13019                           	callstack 24
 13020   0056FC                     
 13021                           ;MazeRobot.X/color.c: 64:  unsigned int tmp;;MazeRobot.X/color.c: 65:  I2C_2_Master_Star
      +                          t();
 13022   0056FC  EC8E  F02D         	call	_I2C_2_Master_Start	;wreg free
 13023                           
 13024                           ;MazeRobot.X/color.c: 66:  I2C_2_Master_Write(0x52 | 0x00);
 13025   005700  0E52               	movlw	82
 13026   005702  EC83  F02D         	call	_I2C_2_Master_Write
 13027                           
 13028                           ;MazeRobot.X/color.c: 67:  I2C_2_Master_Write(0xA0 | 0x1A);
 13029   005706  0EBA               	movlw	186
 13030   005708  EC83  F02D         	call	_I2C_2_Master_Write
 13031                           
 13032                           ;MazeRobot.X/color.c: 68:  I2C_2_Master_RepStart();
 13033   00570C  EC93  F02D         	call	_I2C_2_Master_RepStart	;wreg free
 13034                           
 13035                           ;MazeRobot.X/color.c: 69:  I2C_2_Master_Write(0x52 | 0x01);
 13036   005710  0E53               	movlw	83
 13037   005712  EC83  F02D         	call	_I2C_2_Master_Write
 13038                           
 13039                           ;MazeRobot.X/color.c: 70:  tmp=I2C_2_Master_Read(1);
 13040   005716  0E01               	movlw	1
 13041   005718  EC0D  F02C         	call	_I2C_2_Master_Read
 13042   00571C  6E0B               	movwf	??_color_read_Blue^0,c
 13043   00571E  500B               	movf	??_color_read_Blue^0,w,c
 13044   005720  6E0E               	movwf	color_read_Blue@tmp^0,c
 13045   005722  6A0F               	clrf	(color_read_Blue@tmp+1)^0,c
 13046                           
 13047                           ;MazeRobot.X/color.c: 71:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 13048   005724  0E00               	movlw	0
 13049   005726  EC0D  F02C         	call	_I2C_2_Master_Read
 13050   00572A  6E0B               	movwf	??_color_read_Blue^0,c
 13051   00572C  500B               	movf	??_color_read_Blue^0,w,c
 13052   00572E  6E0D               	movwf	(??_color_read_Blue+2)^0,c
 13053   005730  6A0C               	clrf	(??_color_read_Blue+1)^0,c
 13054   005732  500E               	movf	color_read_Blue@tmp^0,w,c
 13055   005734  100C               	iorwf	(??_color_read_Blue+1)^0,w,c
 13056   005736  6E0E               	movwf	color_read_Blue@tmp^0,c
 13057   005738  500F               	movf	(color_read_Blue@tmp+1)^0,w,c
 13058   00573A  100D               	iorwf	(??_color_read_Blue+2)^0,w,c
 13059   00573C  6E0F               	movwf	(color_read_Blue@tmp+1)^0,c
 13060                           
 13061                           ;MazeRobot.X/color.c: 72:  I2C_2_Master_Stop();
 13062   00573E  EC89  F02D         	call	_I2C_2_Master_Stop	;wreg free
 13063   005742                     
 13064                           ;MazeRobot.X/color.c: 73:  return tmp;
 13065   005742  C00E  F009         	movff	color_read_Blue@tmp,?_color_read_Blue
 13066   005746  C00F  F00A         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
 13067   00574A  0012               	return		;funcret
 13068   00574C                     __end_of_color_read_Blue:
 13069                           	callstack 0
 13070                           
 13071 ;; *************** function _I2C_2_Master_Write *****************
 13072 ;; Defined at:
 13073 ;;		line 45 in file "MazeRobot.X/i2c.c"
 13074 ;; Parameters:    Size  Location     Type
 13075 ;;  data_byte       1    wreg     unsigned char 
 13076 ;; Auto vars:     Size  Location     Type
 13077 ;;  data_byte       1    5[COMRAM] unsigned char 
 13078 ;; Return value:  Size  Location     Type
 13079 ;;                  1    wreg      void 
 13080 ;; Registers used:
 13081 ;;		wreg, status,2, status,0, cstack
 13082 ;; Tracked objects:
 13083 ;;		On entry : 0/0
 13084 ;;		On exit  : 0/0
 13085 ;;		Unchanged: 0/0
 13086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13088 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13090 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13091 ;;Total ram usage:        1 bytes
 13092 ;; Hardware stack levels used: 1
 13093 ;; Hardware stack levels required when called: 3
 13094 ;; This function calls:
 13095 ;;		_I2C_2_Master_Idle
 13096 ;; This function is called by:
 13097 ;;		_color_writetoaddr
 13098 ;;		_color_read_Red
 13099 ;;		_color_read_Green
 13100 ;;		_color_read_Blue
 13101 ;;		_color_read_Clear
 13102 ;; This function uses a non-reentrant model
 13103 ;;
 13104                           
 13105                           	psect	text58
 13106   005B06                     __ptext58:
 13107                           	callstack 0
 13108   005B06                     _I2C_2_Master_Write:
 13109                           	callstack 24
 13110                           
 13111                           ;incstack = 0
 13112                           ;I2C_2_Master_Write@data_byte stored from wreg
 13113   005B06  6E06               	movwf	I2C_2_Master_Write@data_byte^0,c
 13114   005B08                     
 13115                           ;MazeRobot.X/i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);MazeRobot.X/i2c
      +                          .c: 46: {;MazeRobot.X/i2c.c: 47:   I2C_2_Master_Idle();
 13116   005B08  EC27  F02D         	call	_I2C_2_Master_Idle	;wreg free
 13117   005B0C                     
 13118                           ;MazeRobot.X/i2c.c: 48:   SSP2BUF = data_byte;
 13119   005B0C  C006  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
 13120   005B10  0012               	return		;funcret
 13121   005B12                     __end_of_I2C_2_Master_Write:
 13122                           	callstack 0
 13123                           
 13124 ;; *************** function _I2C_2_Master_Stop *****************
 13125 ;; Defined at:
 13126 ;;		line 39 in file "MazeRobot.X/i2c.c"
 13127 ;; Parameters:    Size  Location     Type
 13128 ;;		None
 13129 ;; Auto vars:     Size  Location     Type
 13130 ;;		None
 13131 ;; Return value:  Size  Location     Type
 13132 ;;                  1    wreg      void 
 13133 ;; Registers used:
 13134 ;;		wreg, status,2, status,0, cstack
 13135 ;; Tracked objects:
 13136 ;;		On entry : 0/0
 13137 ;;		On exit  : 0/0
 13138 ;;		Unchanged: 0/0
 13139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13141 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13143 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13144 ;;Total ram usage:        0 bytes
 13145 ;; Hardware stack levels used: 1
 13146 ;; Hardware stack levels required when called: 3
 13147 ;; This function calls:
 13148 ;;		_I2C_2_Master_Idle
 13149 ;; This function is called by:
 13150 ;;		_color_writetoaddr
 13151 ;;		_color_read_Red
 13152 ;;		_color_read_Green
 13153 ;;		_color_read_Blue
 13154 ;;		_color_read_Clear
 13155 ;; This function uses a non-reentrant model
 13156 ;;
 13157                           
 13158                           	psect	text59
 13159   005B12                     __ptext59:
 13160                           	callstack 0
 13161   005B12                     _I2C_2_Master_Stop:
 13162                           	callstack 24
 13163   005B12                     
 13164                           ;MazeRobot.X/i2c.c: 41:   I2C_2_Master_Idle();
 13165   005B12  EC27  F02D         	call	_I2C_2_Master_Idle	;wreg free
 13166   005B16                     
 13167                           ;MazeRobot.X/i2c.c: 42:   SSP2CON2bits.PEN = 1;
 13168   005B16  010E               	movlb	14	; () banked
 13169   005B18  85DA               	bsf	218,2,b	;volatile
 13170   005B1A                     
 13171                           ; BSR set to: 14
 13172   005B1A  0012               	return		;funcret
 13173   005B1C                     __end_of_I2C_2_Master_Stop:
 13174                           	callstack 0
 13175                           
 13176 ;; *************** function _I2C_2_Master_Start *****************
 13177 ;; Defined at:
 13178 ;;		line 27 in file "MazeRobot.X/i2c.c"
 13179 ;; Parameters:    Size  Location     Type
 13180 ;;		None
 13181 ;; Auto vars:     Size  Location     Type
 13182 ;;		None
 13183 ;; Return value:  Size  Location     Type
 13184 ;;                  1    wreg      void 
 13185 ;; Registers used:
 13186 ;;		wreg, status,2, status,0, cstack
 13187 ;; Tracked objects:
 13188 ;;		On entry : 0/0
 13189 ;;		On exit  : 0/0
 13190 ;;		Unchanged: 0/0
 13191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13195 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13196 ;;Total ram usage:        0 bytes
 13197 ;; Hardware stack levels used: 1
 13198 ;; Hardware stack levels required when called: 3
 13199 ;; This function calls:
 13200 ;;		_I2C_2_Master_Idle
 13201 ;; This function is called by:
 13202 ;;		_color_writetoaddr
 13203 ;;		_color_read_Red
 13204 ;;		_color_read_Green
 13205 ;;		_color_read_Blue
 13206 ;;		_color_read_Clear
 13207 ;; This function uses a non-reentrant model
 13208 ;;
 13209                           
 13210                           	psect	text60
 13211   005B1C                     __ptext60:
 13212                           	callstack 0
 13213   005B1C                     _I2C_2_Master_Start:
 13214                           	callstack 24
 13215   005B1C                     
 13216                           ;MazeRobot.X/i2c.c: 29:   I2C_2_Master_Idle();
 13217   005B1C  EC27  F02D         	call	_I2C_2_Master_Idle	;wreg free
 13218   005B20                     
 13219                           ;MazeRobot.X/i2c.c: 30:   SSP2CON2bits.SEN = 1;
 13220   005B20  010E               	movlb	14	; () banked
 13221   005B22  81DA               	bsf	218,0,b	;volatile
 13222   005B24                     
 13223                           ; BSR set to: 14
 13224   005B24  0012               	return		;funcret
 13225   005B26                     __end_of_I2C_2_Master_Start:
 13226                           	callstack 0
 13227                           
 13228 ;; *************** function _I2C_2_Master_RepStart *****************
 13229 ;; Defined at:
 13230 ;;		line 33 in file "MazeRobot.X/i2c.c"
 13231 ;; Parameters:    Size  Location     Type
 13232 ;;		None
 13233 ;; Auto vars:     Size  Location     Type
 13234 ;;		None
 13235 ;; Return value:  Size  Location     Type
 13236 ;;                  1    wreg      void 
 13237 ;; Registers used:
 13238 ;;		wreg, status,2, status,0, cstack
 13239 ;; Tracked objects:
 13240 ;;		On entry : 0/0
 13241 ;;		On exit  : 0/0
 13242 ;;		Unchanged: 0/0
 13243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13245 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13247 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13248 ;;Total ram usage:        0 bytes
 13249 ;; Hardware stack levels used: 1
 13250 ;; Hardware stack levels required when called: 3
 13251 ;; This function calls:
 13252 ;;		_I2C_2_Master_Idle
 13253 ;; This function is called by:
 13254 ;;		_color_read_Red
 13255 ;;		_color_read_Green
 13256 ;;		_color_read_Blue
 13257 ;;		_color_read_Clear
 13258 ;; This function uses a non-reentrant model
 13259 ;;
 13260                           
 13261                           	psect	text61
 13262   005B26                     __ptext61:
 13263                           	callstack 0
 13264   005B26                     _I2C_2_Master_RepStart:
 13265                           	callstack 24
 13266   005B26                     
 13267                           ;MazeRobot.X/i2c.c: 35:   I2C_2_Master_Idle();
 13268   005B26  EC27  F02D         	call	_I2C_2_Master_Idle	;wreg free
 13269   005B2A                     
 13270                           ;MazeRobot.X/i2c.c: 36:   SSP2CON2bits.RSEN = 1;
 13271   005B2A  010E               	movlb	14	; () banked
 13272   005B2C  83DA               	bsf	218,1,b	;volatile
 13273   005B2E                     
 13274                           ; BSR set to: 14
 13275   005B2E  0012               	return		;funcret
 13276   005B30                     __end_of_I2C_2_Master_RepStart:
 13277                           	callstack 0
 13278                           
 13279 ;; *************** function _I2C_2_Master_Read *****************
 13280 ;; Defined at:
 13281 ;;		line 51 in file "MazeRobot.X/i2c.c"
 13282 ;; Parameters:    Size  Location     Type
 13283 ;;  ack             1    wreg     unsigned char 
 13284 ;; Auto vars:     Size  Location     Type
 13285 ;;  ack             1    6[COMRAM] unsigned char 
 13286 ;;  tmp             1    7[COMRAM] unsigned char 
 13287 ;; Return value:  Size  Location     Type
 13288 ;;                  1    wreg      unsigned char 
 13289 ;; Registers used:
 13290 ;;		wreg, status,2, status,0, cstack
 13291 ;; Tracked objects:
 13292 ;;		On entry : 0/0
 13293 ;;		On exit  : 0/0
 13294 ;;		Unchanged: 0/0
 13295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13297 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13298 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13299 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13300 ;;Total ram usage:        3 bytes
 13301 ;; Hardware stack levels used: 1
 13302 ;; Hardware stack levels required when called: 3
 13303 ;; This function calls:
 13304 ;;		_I2C_2_Master_Idle
 13305 ;; This function is called by:
 13306 ;;		_color_read_Red
 13307 ;;		_color_read_Green
 13308 ;;		_color_read_Blue
 13309 ;;		_color_read_Clear
 13310 ;; This function uses a non-reentrant model
 13311 ;;
 13312                           
 13313                           	psect	text62
 13314   00581A                     __ptext62:
 13315                           	callstack 0
 13316   00581A                     _I2C_2_Master_Read:
 13317                           	callstack 24
 13318                           
 13319                           ; BSR set to: 14
 13320                           ;incstack = 0
 13321                           ;I2C_2_Master_Read@ack stored from wreg
 13322   00581A  6E07               	movwf	I2C_2_Master_Read@ack^0,c
 13323   00581C                     
 13324                           ;MazeRobot.X/i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);MazeRobot.X/i
      +                          2c.c: 52: {;MazeRobot.X/i2c.c: 53:   unsigned char tmp;;MazeRobot.X/i2c.c: 54:   I2C_2_M
      +                          aster_Idle();
 13325   00581C  EC27  F02D         	call	_I2C_2_Master_Idle	;wreg free
 13326   005820                     
 13327                           ;MazeRobot.X/i2c.c: 55:   SSP2CON2bits.RCEN = 1;
 13328   005820  010E               	movlb	14	; () banked
 13329   005822  87DA               	bsf	218,3,b	;volatile
 13330                           
 13331                           ;MazeRobot.X/i2c.c: 56:   I2C_2_Master_Idle();
 13332   005824  EC27  F02D         	call	_I2C_2_Master_Idle	;wreg free
 13333   005828                     
 13334                           ;MazeRobot.X/i2c.c: 57:   tmp = SSP2BUF;
 13335   005828  CED5 F008          	movff	3797,I2C_2_Master_Read@tmp	;volatile
 13336                           
 13337                           ;MazeRobot.X/i2c.c: 58:   I2C_2_Master_Idle();
 13338   00582C  EC27  F02D         	call	_I2C_2_Master_Idle	;wreg free
 13339   005830                     
 13340                           ;MazeRobot.X/i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
 13341   005830  5007               	movf	I2C_2_Master_Read@ack^0,w,c
 13342   005832  B4D8               	btfsc	status,2,c
 13343   005834  EF1E  F02C         	goto	u4981
 13344   005838  EF22  F02C         	goto	u4980
 13345   00583C                     u4981:
 13346   00583C  6A06               	clrf	??_I2C_2_Master_Read^0,c
 13347   00583E  2A06               	incf	??_I2C_2_Master_Read^0,f,c
 13348   005840  EF23  F02C         	goto	u4998
 13349   005844                     u4980:
 13350   005844  6A06               	clrf	??_I2C_2_Master_Read^0,c
 13351   005846                     u4998:
 13352   005846  3A06               	swapf	??_I2C_2_Master_Read^0,f,c
 13353   005848  4606               	rlncf	??_I2C_2_Master_Read^0,f,c
 13354   00584A  010E               	movlb	14	; () banked
 13355   00584C  51DA               	movf	218,w,b	;volatile
 13356   00584E  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
 13357   005850  0BDF               	andlw	-33
 13358   005852  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
 13359   005854  6FDA               	movwf	218,b	;volatile
 13360   005856                     
 13361                           ; BSR set to: 14
 13362                           ;MazeRobot.X/i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
 13363   005856  89DA               	bsf	218,4,b	;volatile
 13364   005858                     
 13365                           ; BSR set to: 14
 13366                           ;MazeRobot.X/i2c.c: 61:   return tmp;
 13367   005858  5008               	movf	I2C_2_Master_Read@tmp^0,w,c
 13368   00585A                     
 13369                           ; BSR set to: 14
 13370   00585A  0012               	return		;funcret
 13371   00585C                     __end_of_I2C_2_Master_Read:
 13372                           	callstack 0
 13373                           
 13374 ;; *************** function _I2C_2_Master_Idle *****************
 13375 ;; Defined at:
 13376 ;;		line 22 in file "MazeRobot.X/i2c.c"
 13377 ;; Parameters:    Size  Location     Type
 13378 ;;		None
 13379 ;; Auto vars:     Size  Location     Type
 13380 ;;		None
 13381 ;; Return value:  Size  Location     Type
 13382 ;;                  1    wreg      void 
 13383 ;; Registers used:
 13384 ;;		wreg, status,2, status,0
 13385 ;; Tracked objects:
 13386 ;;		On entry : 0/0
 13387 ;;		On exit  : 0/0
 13388 ;;		Unchanged: 0/0
 13389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13391 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13392 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13393 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13394 ;;Total ram usage:        1 bytes
 13395 ;; Hardware stack levels used: 1
 13396 ;; Hardware stack levels required when called: 2
 13397 ;; This function calls:
 13398 ;;		Nothing
 13399 ;; This function is called by:
 13400 ;;		_I2C_2_Master_Start
 13401 ;;		_I2C_2_Master_RepStart
 13402 ;;		_I2C_2_Master_Stop
 13403 ;;		_I2C_2_Master_Write
 13404 ;;		_I2C_2_Master_Read
 13405 ;; This function uses a non-reentrant model
 13406 ;;
 13407                           
 13408                           	psect	text63
 13409   005A4E                     __ptext63:
 13410                           	callstack 0
 13411   005A4E                     _I2C_2_Master_Idle:
 13412                           	callstack 24
 13413   005A4E                     l279:
 13414   005A4E  010E               	movlb	14	; () banked
 13415   005A50  B5D8               	btfsc	216,2,b	;volatile
 13416   005A52  EF2D  F02D         	goto	u4541
 13417   005A56  EF2F  F02D         	goto	u4540
 13418   005A5A                     u4541:
 13419   005A5A  EF27  F02D         	goto	l279
 13420   005A5E                     u4540:
 13421   005A5E                     
 13422                           ; BSR set to: 14
 13423   005A5E  CEDA F005          	movff	3802,??_I2C_2_Master_Idle	;volatile
 13424   005A62  0E1F               	movlw	31
 13425   005A64  1605               	andwf	??_I2C_2_Master_Idle^0,f,c
 13426   005A66  A4D8               	btfss	status,2,c
 13427   005A68  EF38  F02D         	goto	u4551
 13428   005A6C  EF3A  F02D         	goto	u4550
 13429   005A70                     u4551:
 13430   005A70  EF27  F02D         	goto	l279
 13431   005A74                     u4550:
 13432   005A74                     
 13433                           ; BSR set to: 14
 13434   005A74  0012               	return		;funcret
 13435   005A76                     __end_of_I2C_2_Master_Idle:
 13436                           	callstack 0
 13437                           
 13438 ;; *************** function _DCmotorsInit *****************
 13439 ;; Defined at:
 13440 ;;		line 73 in file "MazeRobot.X/dc_motor.c"
 13441 ;; Parameters:    Size  Location     Type
 13442 ;;  mL              2    4[COMRAM] PTR struct DC_motor
 13443 ;;		 -> main@motorLeft(9), 
 13444 ;;  mR              2    6[COMRAM] PTR struct DC_motor
 13445 ;;		 -> main@motorRight(9), 
 13446 ;; Auto vars:     Size  Location     Type
 13447 ;;		None
 13448 ;; Return value:  Size  Location     Type
 13449 ;;                  1    wreg      void 
 13450 ;; Registers used:
 13451 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13452 ;; Tracked objects:
 13453 ;;		On entry : 0/0
 13454 ;;		On exit  : 0/0
 13455 ;;		Unchanged: 0/0
 13456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13457 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13460 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13461 ;;Total ram usage:        4 bytes
 13462 ;; Hardware stack levels used: 1
 13463 ;; Hardware stack levels required when called: 2
 13464 ;; This function calls:
 13465 ;;		Nothing
 13466 ;; This function is called by:
 13467 ;;		_main
 13468 ;; This function uses a non-reentrant model
 13469 ;;
 13470                           
 13471                           	psect	text64
 13472   004E5C                     __ptext64:
 13473                           	callstack 0
 13474   004E5C                     _DCmotorsInit:
 13475                           	callstack 28
 13476   004E5C                     
 13477                           ;MazeRobot.X/dc_motor.c: 75:     mL->power = 0;
 13478   004E5C  C005  FFD9         	movff	DCmotorsInit@mL,fsr2l
 13479   004E60  C006  FFDA         	movff	DCmotorsInit@mL+1,fsr2h
 13480   004E64  0E00               	movlw	0
 13481   004E66  6EDF               	movwf	indf2,c
 13482   004E68                     
 13483                           ;MazeRobot.X/dc_motor.c: 76:     mL->direction = 1;
 13484   004E68  EE20 F001          	lfsr	2,1
 13485   004E6C  5005               	movf	DCmotorsInit@mL^0,w,c
 13486   004E6E  26D9               	addwf	fsr2l,f,c
 13487   004E70  5006               	movf	(DCmotorsInit@mL+1)^0,w,c
 13488   004E72  22DA               	addwfc	fsr2h,f,c
 13489   004E74  0E01               	movlw	1
 13490   004E76  6EDF               	movwf	indf2,c
 13491   004E78                     
 13492                           ;MazeRobot.X/dc_motor.c: 77:     mL->brakemode = 1;
 13493   004E78  EE20 F002          	lfsr	2,2
 13494   004E7C  5005               	movf	DCmotorsInit@mL^0,w,c
 13495   004E7E  26D9               	addwf	fsr2l,f,c
 13496   004E80  5006               	movf	(DCmotorsInit@mL+1)^0,w,c
 13497   004E82  22DA               	addwfc	fsr2h,f,c
 13498   004E84  0E01               	movlw	1
 13499   004E86  6EDF               	movwf	indf2,c
 13500   004E88                     
 13501                           ;MazeRobot.X/dc_motor.c: 78:     mL->posDutyHighByte = (unsigned char *)(&CCPR1H);
 13502   004E88  EE20 F005          	lfsr	2,5
 13503   004E8C  5005               	movf	DCmotorsInit@mL^0,w,c
 13504   004E8E  26D9               	addwf	fsr2l,f,c
 13505   004E90  5006               	movf	(DCmotorsInit@mL+1)^0,w,c
 13506   004E92  22DA               	addwfc	fsr2h,f,c
 13507   004E94  0EAA               	movlw	170
 13508   004E96  6EDE               	movwf	postinc2,c
 13509   004E98  0E0F               	movlw	15
 13510   004E9A  6EDD               	movwf	postdec2,c
 13511   004E9C                     
 13512                           ;MazeRobot.X/dc_motor.c: 79:     mL->negDutyHighByte = (unsigned char *)(&CCPR2H);
 13513   004E9C  EE20 F007          	lfsr	2,7
 13514   004EA0  5005               	movf	DCmotorsInit@mL^0,w,c
 13515   004EA2  26D9               	addwf	fsr2l,f,c
 13516   004EA4  5006               	movf	(DCmotorsInit@mL+1)^0,w,c
 13517   004EA6  22DA               	addwfc	fsr2h,f,c
 13518   004EA8  0EA6               	movlw	166
 13519   004EAA  6EDE               	movwf	postinc2,c
 13520   004EAC  0E0F               	movlw	15
 13521   004EAE  6EDD               	movwf	postdec2,c
 13522   004EB0                     
 13523                           ;MazeRobot.X/dc_motor.c: 80:     mL->PWMperiod = 199 ;
 13524   004EB0  EE20 F003          	lfsr	2,3
 13525   004EB4  5005               	movf	DCmotorsInit@mL^0,w,c
 13526   004EB6  26D9               	addwf	fsr2l,f,c
 13527   004EB8  5006               	movf	(DCmotorsInit@mL+1)^0,w,c
 13528   004EBA  22DA               	addwfc	fsr2h,f,c
 13529   004EBC  0EC7               	movlw	199
 13530   004EBE  6EDE               	movwf	postinc2,c
 13531   004EC0  0E00               	movlw	0
 13532   004EC2  6EDD               	movwf	postdec2,c
 13533   004EC4                     
 13534                           ;MazeRobot.X/dc_motor.c: 82:     mR->power = 0;
 13535   004EC4  C007  FFD9         	movff	DCmotorsInit@mR,fsr2l
 13536   004EC8  C008  FFDA         	movff	DCmotorsInit@mR+1,fsr2h
 13537   004ECC  0E00               	movlw	0
 13538   004ECE  6EDF               	movwf	indf2,c
 13539                           
 13540                           ;MazeRobot.X/dc_motor.c: 83:     mR->direction = 1;
 13541   004ED0  EE20 F001          	lfsr	2,1
 13542   004ED4  5007               	movf	DCmotorsInit@mR^0,w,c
 13543   004ED6  26D9               	addwf	fsr2l,f,c
 13544   004ED8  5008               	movf	(DCmotorsInit@mR+1)^0,w,c
 13545   004EDA  22DA               	addwfc	fsr2h,f,c
 13546   004EDC  0E01               	movlw	1
 13547   004EDE  6EDF               	movwf	indf2,c
 13548                           
 13549                           ;MazeRobot.X/dc_motor.c: 84:     mR->brakemode = 1;
 13550   004EE0  EE20 F002          	lfsr	2,2
 13551   004EE4  5007               	movf	DCmotorsInit@mR^0,w,c
 13552   004EE6  26D9               	addwf	fsr2l,f,c
 13553   004EE8  5008               	movf	(DCmotorsInit@mR+1)^0,w,c
 13554   004EEA  22DA               	addwfc	fsr2h,f,c
 13555   004EEC  0E01               	movlw	1
 13556   004EEE  6EDF               	movwf	indf2,c
 13557                           
 13558                           ;MazeRobot.X/dc_motor.c: 85:     mR->posDutyHighByte = (unsigned char *)(&CCPR3H);
 13559   004EF0  EE20 F005          	lfsr	2,5
 13560   004EF4  5007               	movf	DCmotorsInit@mR^0,w,c
 13561   004EF6  26D9               	addwf	fsr2l,f,c
 13562   004EF8  5008               	movf	(DCmotorsInit@mR+1)^0,w,c
 13563   004EFA  22DA               	addwfc	fsr2h,f,c
 13564   004EFC  0E25               	movlw	37
 13565   004EFE  6EDE               	movwf	postinc2,c
 13566   004F00  0E0F               	movlw	15
 13567   004F02  6EDD               	movwf	postdec2,c
 13568                           
 13569                           ;MazeRobot.X/dc_motor.c: 86:     mR->negDutyHighByte = (unsigned char *)(&CCPR4H);
 13570   004F04  EE20 F007          	lfsr	2,7
 13571   004F08  5007               	movf	DCmotorsInit@mR^0,w,c
 13572   004F0A  26D9               	addwf	fsr2l,f,c
 13573   004F0C  5008               	movf	(DCmotorsInit@mR+1)^0,w,c
 13574   004F0E  22DA               	addwfc	fsr2h,f,c
 13575   004F10  0E21               	movlw	33
 13576   004F12  6EDE               	movwf	postinc2,c
 13577   004F14  0E0F               	movlw	15
 13578   004F16  6EDD               	movwf	postdec2,c
 13579                           
 13580                           ;MazeRobot.X/dc_motor.c: 87:     mR->PWMperiod = 199 ;
 13581   004F18  EE20 F003          	lfsr	2,3
 13582   004F1C  5007               	movf	DCmotorsInit@mR^0,w,c
 13583   004F1E  26D9               	addwf	fsr2l,f,c
 13584   004F20  5008               	movf	(DCmotorsInit@mR+1)^0,w,c
 13585   004F22  22DA               	addwfc	fsr2h,f,c
 13586   004F24  0EC7               	movlw	199
 13587   004F26  6EDE               	movwf	postinc2,c
 13588   004F28  0E00               	movlw	0
 13589   004F2A  6EDD               	movwf	postdec2,c
 13590   004F2C  0012               	return		;funcret
 13591   004F2E                     __end_of_DCmotorsInit:
 13592                           	callstack 0
 13593                           
 13594 ;; *************** function _HighISR *****************
 13595 ;; Defined at:
 13596 ;;		line 132 in file "serialTest.c"
 13597 ;; Parameters:    Size  Location     Type
 13598 ;;		None
 13599 ;; Auto vars:     Size  Location     Type
 13600 ;;		None
 13601 ;; Return value:  Size  Location     Type
 13602 ;;                  1    wreg      void 
 13603 ;; Registers used:
 13604 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13605 ;; Tracked objects:
 13606 ;;		On entry : 0/0
 13607 ;;		On exit  : 0/0
 13608 ;;		Unchanged: 0/0
 13609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13612 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13613 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13614 ;;Total ram usage:        2 bytes
 13615 ;; Hardware stack levels used: 1
 13616 ;; Hardware stack levels required when called: 1
 13617 ;; This function calls:
 13618 ;;		_getCharFromTxBuf
 13619 ;;		_putCharToRxBuf
 13620 ;;		i2_isDataInTxBuf
 13621 ;; This function is called by:
 13622 ;;		Interrupt level 2
 13623 ;; This function uses a non-reentrant model
 13624 ;;
 13625                           
 13626                           	psect	intcode
 13627   000008                     __pintcode:
 13628                           	callstack 0
 13629   000008                     _HighISR:
 13630                           	callstack 20
 13631                           
 13632                           ;incstack = 0
 13633   000008  825B               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
 13634   00000A  CFD9 F003          	movff	fsr2l,??_HighISR
 13635   00000E  CFDA F004          	movff	fsr2h,??_HighISR+1
 13636   000012                     
 13637                           ;serialTest.c: 134:     if (PIR4bits.RC4IF){
 13638   000012  010E               	movlb	14	; () banked
 13639   000014  A737               	btfss	55,3,b	;volatile
 13640   000016  EF0F  F000         	goto	i2u612_41
 13641   00001A  EF11  F000         	goto	i2u612_40
 13642   00001E                     i2u612_41:
 13643   00001E  EF14  F000         	goto	i2l5484
 13644   000022                     i2u612_40:
 13645   000022                     
 13646                           ; BSR set to: 14
 13647                           ;serialTest.c: 135:         putCharToRxBuf(RC4REG);
 13648   000022  51E3               	movf	227,w,b	;volatile
 13649   000024  EC12  F02D         	call	_putCharToRxBuf
 13650   000028                     i2l5484:
 13651                           
 13652                           ;serialTest.c: 138:     if (PIR4bits.TX4IF && PIE4bits.TX4IE == 1){
 13653   000028  010E               	movlb	14	; () banked
 13654   00002A  A537               	btfss	55,2,b	;volatile
 13655   00002C  EF1A  F000         	goto	i2u613_41
 13656   000030  EF1C  F000         	goto	i2u613_40
 13657   000034                     i2u613_41:
 13658   000034  EF35  F000         	goto	i2l510
 13659   000038                     i2u613_40:
 13660   000038                     
 13661                           ; BSR set to: 14
 13662   000038  A52D               	btfss	45,2,b	;volatile
 13663   00003A  EF21  F000         	goto	i2u614_41
 13664   00003E  EF23  F000         	goto	i2u614_40
 13665   000042                     i2u614_41:
 13666   000042  EF35  F000         	goto	i2l510
 13667   000046                     i2u614_40:
 13668   000046                     
 13669                           ; BSR set to: 14
 13670                           ;serialTest.c: 139:         if (isDataInTxBuf() == 1){
 13671   000046  EC77  F02D         	call	i2_isDataInTxBuf	;wreg free
 13672   00004A  06E8               	decf	wreg,f,c
 13673   00004C  A4D8               	btfss	status,2,c
 13674   00004E  EF2B  F000         	goto	i2u615_41
 13675   000052  EF2D  F000         	goto	i2u615_40
 13676   000056                     i2u615_41:
 13677   000056  EF33  F000         	goto	i2l508
 13678   00005A                     i2u615_40:
 13679   00005A                     
 13680                           ;serialTest.c: 140:            TX4REG = getCharFromTxBuf();
 13681   00005A  ECD2  F02C         	call	_getCharFromTxBuf	;wreg free
 13682   00005E  010E               	movlb	14	; () banked
 13683   000060  6FE4               	movwf	228,b	;volatile
 13684                           
 13685                           ;serialTest.c: 141:         }
 13686   000062  EF35  F000         	goto	i2l510
 13687   000066                     i2l508:
 13688                           
 13689                           ;serialTest.c: 143:            PIE4bits.TX4IE = 0;
 13690   000066  010E               	movlb	14	; () banked
 13691   000068  952D               	bcf	45,2,b	;volatile
 13692   00006A                     i2l510:
 13693                           
 13694                           ; BSR set to: 14
 13695   00006A  C004  FFDA         	movff	??_HighISR+1,fsr2h
 13696   00006E  C003  FFD9         	movff	??_HighISR,fsr2l
 13697   000072  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
 13698   000074  0011               	retfie		f
 13699   000076                     __end_of_HighISR:
 13700                           	callstack 0
 13701                           
 13702 ;; *************** function i2_isDataInTxBuf *****************
 13703 ;; Defined at:
 13704 ;;		line 113 in file "serialTest.c"
 13705 ;; Parameters:    Size  Location     Type
 13706 ;;		None
 13707 ;; Auto vars:     Size  Location     Type
 13708 ;;		None
 13709 ;; Return value:  Size  Location     Type
 13710 ;;                  1    wreg      unsigned char 
 13711 ;; Registers used:
 13712 ;;		wreg, status,2, status,0
 13713 ;; Tracked objects:
 13714 ;;		On entry : 0/0
 13715 ;;		On exit  : 0/0
 13716 ;;		Unchanged: 0/0
 13717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13721 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13722 ;;Total ram usage:        0 bytes
 13723 ;; Hardware stack levels used: 1
 13724 ;; This function calls:
 13725 ;;		Nothing
 13726 ;; This function is called by:
 13727 ;;		_HighISR
 13728 ;; This function uses a non-reentrant model
 13729 ;;
 13730                           
 13731                           	psect	text66
 13732   005AEE                     __ptext66:
 13733                           	callstack 0
 13734   005AEE                     i2_isDataInTxBuf:
 13735                           	callstack 20
 13736   005AEE                     
 13737                           ;serialTest.c: 114:     return (TxBufWriteCnt!=TxBufReadCnt);
 13738   005AEE  5057               	movf	_TxBufReadCnt^0,w,c	;volatile
 13739   005AF0  1858               	xorwf	_TxBufWriteCnt^0,w,c	;volatile
 13740   005AF2  A4D8               	btfss	status,2,c
 13741   005AF4  EF7E  F02D         	goto	i2u282_41
 13742   005AF8  EF81  F02D         	goto	i2u282_40
 13743   005AFC                     i2u282_41:
 13744   005AFC  0E01               	movlw	1
 13745   005AFE  EF82  F02D         	goto	i2u283_40
 13746   005B02                     i2u282_40:
 13747   005B02  0E00               	movlw	0
 13748   005B04                     i2u283_40:
 13749   005B04  0012               	return		;funcret
 13750   005B06                     __end_ofi2_isDataInTxBuf:
 13751                           	callstack 0
 13752                           
 13753 ;; *************** function _putCharToRxBuf *****************
 13754 ;; Defined at:
 13755 ;;		line 85 in file "serialTest.c"
 13756 ;; Parameters:    Size  Location     Type
 13757 ;;  byte            1    wreg     unsigned char 
 13758 ;; Auto vars:     Size  Location     Type
 13759 ;;  byte            1    0[COMRAM] unsigned char 
 13760 ;; Return value:  Size  Location     Type
 13761 ;;                  1    wreg      void 
 13762 ;; Registers used:
 13763 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13764 ;; Tracked objects:
 13765 ;;		On entry : 0/0
 13766 ;;		On exit  : 0/0
 13767 ;;		Unchanged: 0/0
 13768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13770 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13772 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13773 ;;Total ram usage:        1 bytes
 13774 ;; Hardware stack levels used: 1
 13775 ;; This function calls:
 13776 ;;		Nothing
 13777 ;; This function is called by:
 13778 ;;		_HighISR
 13779 ;; This function uses a non-reentrant model
 13780 ;;
 13781                           
 13782                           	psect	text67
 13783   005A24                     __ptext67:
 13784                           	callstack 0
 13785   005A24                     _putCharToRxBuf:
 13786                           	callstack 20
 13787                           
 13788                           ;incstack = 0
 13789                           ;putCharToRxBuf@byte stored from wreg
 13790   005A24  6E01               	movwf	putCharToRxBuf@byte^0,c
 13791   005A26                     
 13792                           ;serialTest.c: 86:     if (RxBufWriteCnt>=20) {RxBufWriteCnt=0;}
 13793   005A26  0E13               	movlw	19
 13794   005A28  645A               	cpfsgt	_RxBufWriteCnt^0,c	;volatile
 13795   005A2A  EF19  F02D         	goto	i2u588_41
 13796   005A2E  EF1B  F02D         	goto	i2u588_40
 13797   005A32                     i2u588_41:
 13798   005A32  EF1D  F02D         	goto	i2l5320
 13799   005A36                     i2u588_40:
 13800   005A36  0E00               	movlw	0
 13801   005A38  6E5A               	movwf	_RxBufWriteCnt^0,c	;volatile
 13802   005A3A                     i2l5320:
 13803                           
 13804                           ;serialTest.c: 87:     EUSART4RXbuf[RxBufWriteCnt++]=byte;
 13805   005A3A  0E6D               	movlw	low _EUSART4RXbuf
 13806   005A3C  245A               	addwf	_RxBufWriteCnt^0,w,c	;volatile
 13807   005A3E  6ED9               	movwf	fsr2l,c
 13808   005A40  6ADA               	clrf	fsr2h,c
 13809   005A42  0E01               	movlw	high _EUSART4RXbuf
 13810   005A44  22DA               	addwfc	fsr2h,f,c
 13811   005A46  C001  FFDF         	movff	putCharToRxBuf@byte,indf2
 13812   005A4A  2A5A               	incf	_RxBufWriteCnt^0,f,c	;volatile
 13813   005A4C  0012               	return		;funcret
 13814   005A4E                     __end_of_putCharToRxBuf:
 13815                           	callstack 0
 13816                           
 13817 ;; *************** function _getCharFromTxBuf *****************
 13818 ;; Defined at:
 13819 ;;		line 99 in file "serialTest.c"
 13820 ;; Parameters:    Size  Location     Type
 13821 ;;		None
 13822 ;; Auto vars:     Size  Location     Type
 13823 ;;		None
 13824 ;; Return value:  Size  Location     Type
 13825 ;;                  1    wreg      unsigned char 
 13826 ;; Registers used:
 13827 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13828 ;; Tracked objects:
 13829 ;;		On entry : 0/0
 13830 ;;		On exit  : 0/0
 13831 ;;		Unchanged: 0/0
 13832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13835 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13836 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13837 ;;Total ram usage:        2 bytes
 13838 ;; Hardware stack levels used: 1
 13839 ;; This function calls:
 13840 ;;		Nothing
 13841 ;; This function is called by:
 13842 ;;		_HighISR
 13843 ;; This function uses a non-reentrant model
 13844 ;;
 13845                           
 13846                           	psect	text68
 13847   0059A4                     __ptext68:
 13848                           	callstack 0
 13849   0059A4                     _getCharFromTxBuf:
 13850                           	callstack 20
 13851   0059A4                     
 13852                           ;serialTest.c: 100:     if (TxBufReadCnt>=60) {TxBufReadCnt=0;}
 13853   0059A4  0E3B               	movlw	59
 13854   0059A6  6457               	cpfsgt	_TxBufReadCnt^0,c	;volatile
 13855   0059A8  EFD8  F02C         	goto	i2u589_41
 13856   0059AC  EFDA  F02C         	goto	i2u589_40
 13857   0059B0                     i2u589_41:
 13858   0059B0  EFDC  F02C         	goto	i2l5328
 13859   0059B4                     i2u589_40:
 13860   0059B4  0E00               	movlw	0
 13861   0059B6  6E57               	movwf	_TxBufReadCnt^0,c	;volatile
 13862   0059B8                     i2l5328:
 13863                           
 13864                           ;serialTest.c: 101:     return EUSART4TXbuf[TxBufReadCnt++];
 13865   0059B8  2A57               	incf	_TxBufReadCnt^0,f,c	;volatile
 13866   0059BA  0457               	decf	_TxBufReadCnt^0,w,c	;volatile
 13867   0059BC  6E01               	movwf	??_getCharFromTxBuf^0,c
 13868   0059BE  6A02               	clrf	(??_getCharFromTxBuf+1)^0,c
 13869   0059C0  0E00               	movlw	low _EUSART4TXbuf
 13870   0059C2  2401               	addwf	??_getCharFromTxBuf^0,w,c
 13871   0059C4  6ED9               	movwf	fsr2l,c
 13872   0059C6  0E02               	movlw	high _EUSART4TXbuf
 13873   0059C8  2002               	addwfc	(??_getCharFromTxBuf+1)^0,w,c
 13874   0059CA  6EDA               	movwf	fsr2h,c
 13875   0059CC  50DF               	movf	indf2,w,c
 13876   0059CE  0012               	return		;funcret
 13877   0059D0                     __end_of_getCharFromTxBuf:
 13878                           	callstack 0
 13879                           
 13880                           	psect	rparam
 13881   000000                     
 13882                           	psect	temp
 13883   00005B                     btemp:
 13884                           	callstack 0
 13885   00005B                     	ds	1
 13886   000000                     int$flags	set	btemp
 13887   000000                     wtemp8	set	btemp+1
 13888   000000                     ttemp5	set	btemp+1
 13889   000000                     ttemp6	set	btemp+4
 13890   000000                     ttemp7	set	btemp+8
 13891                           
 13892                           	psect	idloc
 13893                           
 13894                           ;Config register IDLOC0 @ 0x200000
 13895                           ;	unspecified, using default values
 13896   200000                     	org	2097152
 13897   200000  0FFF               	dw	4095
 13898                           
 13899                           ;Config register IDLOC1 @ 0x200002
 13900                           ;	unspecified, using default values
 13901   200002                     	org	2097154
 13902   200002  0FFF               	dw	4095
 13903                           
 13904                           ;Config register IDLOC2 @ 0x200004
 13905                           ;	unspecified, using default values
 13906   200004                     	org	2097156
 13907   200004  0FFF               	dw	4095
 13908                           
 13909                           ;Config register IDLOC3 @ 0x200006
 13910                           ;	unspecified, using default values
 13911   200006                     	org	2097158
 13912   200006  0FFF               	dw	4095
 13913                           
 13914                           ;Config register IDLOC4 @ 0x200008
 13915                           ;	unspecified, using default values
 13916   200008                     	org	2097160
 13917   200008  0FFF               	dw	4095
 13918                           
 13919                           ;Config register IDLOC5 @ 0x20000A
 13920                           ;	unspecified, using default values
 13921   20000A                     	org	2097162
 13922   20000A  0FFF               	dw	4095
 13923                           
 13924                           ;Config register IDLOC6 @ 0x20000C
 13925                           ;	unspecified, using default values
 13926   20000C                     	org	2097164
 13927   20000C  0FFF               	dw	4095
 13928                           
 13929                           ;Config register IDLOC7 @ 0x20000E
 13930                           ;	unspecified, using default values
 13931   20000E                     	org	2097166
 13932   20000E  0FFF               	dw	4095
 13933                           
 13934                           	psect	config
 13935                           
 13936                           ;Config register CONFIG1L @ 0x300000
 13937                           ;	External Oscillator mode Selection bits
 13938                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
 13939                           ;	Power-up default value for COSC bits
 13940                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
 13941   300000                     	org	3145728
 13942   300000  AA                 	db	170
 13943                           
 13944                           ;Config register CONFIG1H @ 0x300001
 13945                           ;	unspecified, using default values
 13946                           ;	Clock Out Enable bit
 13947                           ;	CLKOUTEN = 0x1, unprogrammed default
 13948                           ;	Clock Switch Enable bit
 13949                           ;	CSWEN = 0x1, unprogrammed default
 13950                           ;	Fail-Safe Clock Monitor Enable bit
 13951                           ;	FCMEN = 0x1, unprogrammed default
 13952   300001                     	org	3145729
 13953   300001  FF                 	db	255
 13954                           
 13955                           ;Config register CONFIG2L @ 0x300002
 13956                           ;	unspecified, using default values
 13957                           ;	Master Clear Enable bit
 13958                           ;	MCLRE = 0x1, unprogrammed default
 13959                           ;	Power-up Timer Enable bit
 13960                           ;	PWRTE = 0x1, unprogrammed default
 13961                           ;	Low-power BOR enable bit
 13962                           ;	LPBOREN = 0x1, unprogrammed default
 13963                           ;	Brown-out Reset Enable bits
 13964                           ;	BOREN = 0x3, unprogrammed default
 13965   300002                     	org	3145730
 13966   300002  FF                 	db	255
 13967                           
 13968                           ;Config register CONFIG2H @ 0x300003
 13969                           ;	unspecified, using default values
 13970                           ;	Brown Out Reset Voltage selection bits
 13971                           ;	BORV = 0x3, unprogrammed default
 13972                           ;	ZCD Disable bit
 13973                           ;	ZCD = 0x1, unprogrammed default
 13974                           ;	PPSLOCK bit One-Way Set Enable bit
 13975                           ;	PPS1WAY = 0x1, unprogrammed default
 13976                           ;	Stack Full/Underflow Reset Enable bit
 13977                           ;	STVREN = 0x1, unprogrammed default
 13978                           ;	Debugger Enable bit
 13979                           ;	DEBUG = 0x1, unprogrammed default
 13980                           ;	Extended Instruction Set Enable bit
 13981                           ;	XINST = 0x1, unprogrammed default
 13982   300003                     	org	3145731
 13983   300003  FF                 	db	255
 13984                           
 13985                           ;Config register CONFIG3L @ 0x300004
 13986                           ;	WDT Period Select bits
 13987                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
 13988                           ;	WDT operating mode
 13989                           ;	WDTE = OFF, WDT Disabled
 13990   300004                     	org	3145732
 13991   300004  9F                 	db	159
 13992                           
 13993                           ;Config register CONFIG3H @ 0x300005
 13994                           ;	unspecified, using default values
 13995                           ;	WDT Window Select bits
 13996                           ;	WDTCWS = 0x7, unprogrammed default
 13997                           ;	WDT input clock selector
 13998                           ;	WDTCCS = 0x7, unprogrammed default
 13999   300005                     	org	3145733
 14000   300005  FF                 	db	255
 14001                           
 14002                           ;Config register CONFIG4L @ 0x300006
 14003                           ;	unspecified, using default values
 14004                           ;	Write Protection Block 0
 14005                           ;	WRT0 = 0x1, unprogrammed default
 14006                           ;	Write Protection Block 1
 14007                           ;	WRT1 = 0x1, unprogrammed default
 14008                           ;	Write Protection Block 2
 14009                           ;	WRT2 = 0x1, unprogrammed default
 14010                           ;	Write Protection Block 3
 14011                           ;	WRT3 = 0x1, unprogrammed default
 14012                           ;	Write Protection Block 3
 14013                           ;	WRT4 = 0x1, unprogrammed default
 14014                           ;	Write Protection Block 3
 14015                           ;	WRT5 = 0x1, unprogrammed default
 14016                           ;	Write Protection Block 3
 14017                           ;	WRT6 = 0x1, unprogrammed default
 14018                           ;	Write Protection Block 3
 14019                           ;	WRT7 = 0x1, unprogrammed default
 14020   300006                     	org	3145734
 14021   300006  FF                 	db	255
 14022                           
 14023                           ;Config register CONFIG4H @ 0x300007
 14024                           ;	unspecified, using default values
 14025                           ;	Configuration Register Write Protection bit
 14026                           ;	WRTC = 0x1, unprogrammed default
 14027                           ;	Boot Block Write Protection bit
 14028                           ;	WRTB = 0x1, unprogrammed default
 14029                           ;	Data EEPROM Write Protection bit
 14030                           ;	WRTD = 0x1, unprogrammed default
 14031                           ;	Scanner Enable bit
 14032                           ;	SCANE = 0x1, unprogrammed default
 14033                           ;	Low Voltage Programming Enable bit
 14034                           ;	LVP = 0x1, unprogrammed default
 14035   300007                     	org	3145735
 14036   300007  FF                 	db	255
 14037                           
 14038                           ;Config register CONFIG5L @ 0x300008
 14039                           ;	unspecified, using default values
 14040                           ;	UserNVM Program Memory Code Protection bit
 14041                           ;	CP = 0x1, unprogrammed default
 14042                           ;	DataNVM Memory Code Protection bit
 14043                           ;	CPD = 0x1, unprogrammed default
 14044   300008                     	org	3145736
 14045   300008  FF                 	db	255
 14046                           
 14047                           ;Config register CONFIG5H @ 0x300009
 14048                           ;	unspecified, using default values
 14049   300009                     	org	3145737
 14050   300009  FF                 	db	255
 14051                           
 14052                           ;Config register CONFIG6L @ 0x30000A
 14053                           ;	unspecified, using default values
 14054                           ;	Table Read Protection Block 0
 14055                           ;	EBTR0 = 0x1, unprogrammed default
 14056                           ;	Table Read Protection Block 1
 14057                           ;	EBTR1 = 0x1, unprogrammed default
 14058                           ;	Table Read Protection Block 2
 14059                           ;	EBTR2 = 0x1, unprogrammed default
 14060                           ;	Table Read Protection Block 3
 14061                           ;	EBTR3 = 0x1, unprogrammed default
 14062                           ;	Table Read Protection Block 4
 14063                           ;	EBTR4 = 0x1, unprogrammed default
 14064                           ;	Table Read Protection Block 5
 14065                           ;	EBTR5 = 0x1, unprogrammed default
 14066                           ;	Table Read Protection Block 6
 14067                           ;	EBTR6 = 0x1, unprogrammed default
 14068                           ;	Table Read Protection Block 7
 14069                           ;	EBTR7 = 0x1, unprogrammed default
 14070   30000A                     	org	3145738
 14071   30000A  FF                 	db	255
 14072                           
 14073                           ;Config register CONFIG6H @ 0x30000B
 14074                           ;	unspecified, using default values
 14075                           ;	Boot Block Table Read Protection bit
 14076                           ;	EBTRB = 0x1, unprogrammed default
 14077   30000B                     	org	3145739
 14078   30000B  FF                 	db	255
 14079                           tosu	equ	0xFFF
 14080                           tosh	equ	0xFFE
 14081                           tosl	equ	0xFFD
 14082                           stkptr	equ	0xFFC
 14083                           pclatu	equ	0xFFB
 14084                           pclath	equ	0xFFA
 14085                           pcl	equ	0xFF9
 14086                           tblptru	equ	0xFF8
 14087                           tblptrh	equ	0xFF7
 14088                           tblptrl	equ	0xFF6
 14089                           tablat	equ	0xFF5
 14090                           prodh	equ	0xFF4
 14091                           prodl	equ	0xFF3
 14092                           indf0	equ	0xFEF
 14093                           postinc0	equ	0xFEE
 14094                           postdec0	equ	0xFED
 14095                           preinc0	equ	0xFEC
 14096                           plusw0	equ	0xFEB
 14097                           fsr0h	equ	0xFEA
 14098                           fsr0l	equ	0xFE9
 14099                           wreg	equ	0xFE8
 14100                           indf1	equ	0xFE7
 14101                           postinc1	equ	0xFE6
 14102                           postdec1	equ	0xFE5
 14103                           preinc1	equ	0xFE4
 14104                           plusw1	equ	0xFE3
 14105                           fsr1h	equ	0xFE2
 14106                           fsr1l	equ	0xFE1
 14107                           bsr	equ	0xFE0
 14108                           indf2	equ	0xFDF
 14109                           postinc2	equ	0xFDE
 14110                           postdec2	equ	0xFDD
 14111                           preinc2	equ	0xFDC
 14112                           plusw2	equ	0xFDB
 14113                           fsr2h	equ	0xFDA
 14114                           fsr2l	equ	0xFD9
 14115                           status	equ	0xFD8

Data Sizes:
    Strings     42
    Constant    0
    Data        4
    BSS         181
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     86      90
    BANK0           160    138     159
    BANK1           256    109     209
    BANK2           256      0      60
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    strcpy@dest	PTR unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    strcpy@d	PTR unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    strcpy@src	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_6(CODE[4]), STR_3(CODE[4]), 

    strcpy@s	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_6(CODE[4]), STR_3(CODE[4]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    memcpy@d1	PTR void  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    memcpy@s1	PTR const void  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_2(CODE[15]), STR_1(CODE[19]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 19
		 -> STR_2(CODE[15]), STR_1(CODE[19]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 19
		 -> STR_2(CODE[15]), STR_1(CODE[19]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    S2673$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    sp__memcpy	PTR void  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    efgtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_2(CODE[15]), STR_1(CODE[19]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 40
		 -> ADC2String@buf(COMRAM[40]), colorDetect@string1(BANK1[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2589$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2589$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    TxBufferedString@string	PTR unsigned char  size(2) Largest target is 20
		 -> colorDetect@string1(BANK1[20]), 

    motorRight.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    motorRight.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    motorLeft.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    motorLeft.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    reverseSquareLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    reverseSquareLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    reverseSquareRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    reverseSquareRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    turnLeft_135@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft_135@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft_135@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft_135@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft_135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    turnLeft_135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    turnRight_135@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight_135@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight_135@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight_135@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight_135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    turnRight_135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    turn_180@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    turn_180@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    turnRight_90@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight_90@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight_90@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight_90@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight_90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    turnRight_90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    turnLeft_90@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft_90@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft_90@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft_90@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft_90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    turnLeft_90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    turnRight@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    turnLeft@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    reverse@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    reverse@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    reverse@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    reverse@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    reverse@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    reverse@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    forward@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    forward@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    forward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    forward@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    forward@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    forward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), main@motorLeft(BANK1[9]), 

    DCmotorsInit@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    S107DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    S107DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    colorDetect@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    colorDetect@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    colorDetect@whiteRGBVal	PTR struct RGB size(2) Largest target is 8
		 -> main@whiteRGBVal(BANK1[8]), 

    colorDetect@ambientRGBVal	PTR struct RGB size(2) Largest target is 8
		 -> main@ambientRGBVal(BANK1[8]), 

    whiteCal@v	PTR struct RGB size(2) Largest target is 8
		 -> main@whiteRGBVal(BANK1[8]), 

    ambientCal@v	PTR struct RGB size(2) Largest target is 8
		 -> main@ambientRGBVal(BANK1[8]), 

    getColor@v	PTR struct RGB size(2) Largest target is 8
		 -> main@whiteRGBVal(BANK1[8]), main@RGBVal(BANK1[8]), main@ambientRGBVal(BANK1[8]), colorDetect@RGBVal(BANK1[8]), 


Critical Paths under _main in COMRAM

    _whiteCal->_getColor
    _forward->_setMotorPWM
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _turn_180->_turnRight
    _turnRight->_stop
    _turnRight_135->_stop
    _turnLeft_135->_stop
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_efgtoa
    _efgtoa->_floorf
    _floorf->___fldiv
    ___flsub->___fladd
    ___flmul->___flsub
    ___flge->___flmul
    ___fldiv->___flmul
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _reverseSquareRight->_turnRight_90
    _turnRight_90->_stop
    _reverseSquareLeft->_turnLeft_90
    _turnLeft_90->_stop
    _stop->_setMotorPWM
    _reverse->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _TxBufferedString->_putCharToTxBuf
    _ambientCal->_getColor
    _getColor->_color_read_Blue
    _getColor->_color_read_Clear
    _getColor->_color_read_Green
    _getColor->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle

Critical Paths under _HighISR in COMRAM

    _HighISR->_getCharFromTxBuf

Critical Paths under _main in BANK0

    _main->_colorDetect
    _colorDetect->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_efgtoa
    _efgtoa->_floorf

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_colorDetect

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               174   174      0  212798
                                            135 BANK0      3     3      0
                                             58 BANK1     51    51      0
                       _DCmotorsInit
                            ___fldiv
                             ___flge
                           ___xxtofl
                         _ambientCal
                        _colorDetect
                   _color_click_init
                            _forward
                           _getColor
                    _initDCmotorsPWM
                         _initUSART4
                               _stop
                           _whiteCal
 ---------------------------------------------------------------------------------
 (1) _whiteCal                                             6     4      2     988
                                             17 COMRAM     6     4      2
                           _getColor
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      76
                                              4 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _forward                                              5     1      4    2989
                                             23 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              8 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              6 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _colorDetect                                         76    64     12  188278
                                            121 BANK0     14     2     12
                                              0 BANK1     58    58      0
                   _TxBufferedString
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                           ___xxtofl
                           _getColor
                  _reverseSquareLeft
                 _reverseSquareRight
                          _sendTxBuf
                            _sprintf
                       _turnLeft_135
                        _turnLeft_90
                      _turnRight_135
                       _turnRight_90
                           _turn_180
 ---------------------------------------------------------------------------------
 (2) _turn_180                                             4     0      4   20708
                                             35 COMRAM     4     0      4
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (3) _turnRight                                            6     2      4   14027
                                             29 COMRAM     6     2      4
                            _reverse
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _turnRight_135                                        6     2      4   13878
                                             29 COMRAM     6     2      4
                            _reverse
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _turnLeft_135                                         6     2      4   13875
                                             29 COMRAM     6     2      4
                            _reverse
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             31    15     16   37745
                                             92 BANK0     29    13     16
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             8     2      6   37067
                                             84 BANK0      8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           23    17      6   36597
                                             84 COMRAM     2     2      0
                                             67 BANK0     17    11      6
                               _dtoa
                             _efgtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _efgtoa                                              54    47      7   30448
                                             82 COMRAM     2     2      0
                                             16 BANK0     51    44      7
                            ___fladd
                            ___fldiv
                             ___fleq
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                      ___fpclassifyf
                             _floorf
                               _labs
                             _memcpy
                                _pad
                             _strcpy
 ---------------------------------------------------------------------------------
 (6) _strcpy                                               8     4      4     400
                                              4 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (6) _memcpy                                              11     5      6     371
                                              4 COMRAM    11     5      6
 ---------------------------------------------------------------------------------
 (6) _labs                                                 8     4      4     294
                                              4 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (6) _floorf                                              20    16      4     669
                                             78 COMRAM     4     0      4
                                              0 BANK0     16    16      0
                            ___fldiv (ARG)
 ---------------------------------------------------------------------------------
 (6) ___fpclassifyf                                       14    10      4     287
                                              4 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (6) ___fltol                                             10     6      4    1545
                                              4 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (6) ___flsub                                              8     0      8    4257
                                             20 COMRAM     8     0      8
                            ___fladd
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (7) ___fladd                                             16     8      8    2414
                                              4 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 (6) ___flneg                                              4     0      4     121
                                              4 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (6) ___flmul                                             25    17      8    5272
                                             28 COMRAM    25    17      8
                            ___flsub (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (6) ___flge                                              12     4      8    5350
                                             53 COMRAM    12     4      8
                            ___flmul (ARG)
                            ___flsub (ARG)
 ---------------------------------------------------------------------------------
 (6) ___fleq                                              12     4      8     646
                                              4 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (6) ___fldiv                                             25    17      8    2615
                                             53 COMRAM    25    17      8
                            ___flmul (ARG)
                            ___flsub (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                35    25     10    4333
                                             31 COMRAM    35    25     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                 11     5      6    2683
                                             20 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (7) _fputs                                                7     3      4     931
                                             13 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                9     5      4     682
                                              4 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     142
                                             22 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___aomod                                             18     2     16     448
                                              4 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (6) ___aodiv                                             26    10     16     452
                                              4 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (2) _sendTxBuf                                            0     0      0       0
                      _isDataInTxBuf
 ---------------------------------------------------------------------------------
 (3) _isDataInTxBuf                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _reverseSquareRight                                   6     2      4   25153
                                             35 COMRAM     6     2      4
                            _reverse
                               _stop
                       _turnRight_90
 ---------------------------------------------------------------------------------
 (2) _turnRight_90                                         6     2      4   14027
                                             29 COMRAM     6     2      4
                            _reverse
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _reverseSquareLeft                                    6     2      4   25153
                                             35 COMRAM     6     2      4
                            _reverse
                               _stop
                        _turnLeft_90
 ---------------------------------------------------------------------------------
 (2) _turnLeft_90                                          6     2      4   14027
                                             29 COMRAM     6     2      4
                            _reverse
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 6     2      4    6397
                                             23 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _reverse                                              5     1      4    4357
                                             23 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          6     4      2    2573
                                             17 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     491
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     358
                                             10 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4    2214
                                              4 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (2) _TxBufferedString                                     2     0      2     143
                                              5 COMRAM     2     0      2
                     _putCharToTxBuf
 ---------------------------------------------------------------------------------
 (3) _putCharToTxBuf                                       1     1      0      22
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ambientCal                                           6     4      2    1064
                                             17 COMRAM     6     4      2
                           _getColor
 ---------------------------------------------------------------------------------
 (2) _getColor                                             2     0      2     844
                                             15 COMRAM     2     0      2
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (3) _color_read_Red                                       7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Green                                     7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Clear                                     7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Blue                                      7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Write                                   1     1      0      22
                                              5 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Read                                    3     3      0      45
                                              5 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Idle                                    1     1      0       0
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DCmotorsInit                                         4     0      4     416
                                              4 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _HighISR                                             2     2      0      22
                                              2 COMRAM     2     2      0
                   _getCharFromTxBuf
                     _putCharToRxBuf
                    i2_isDataInTxBuf
 ---------------------------------------------------------------------------------
 (11) i2_isDataInTxBuf                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _putCharToRxBuf                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (11) _getCharFromTxBuf                                    2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DCmotorsInit
   ___fldiv
     ___flmul (ARG)
       ___flsub (ARG)
         ___fladd
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___flsub (ARG)
     ___xxtofl (ARG)
   ___flge
     ___flmul (ARG)
     ___flsub (ARG)
   ___xxtofl
   _ambientCal
     _getColor
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_read_Clear
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
   _colorDetect
     _TxBufferedString
       _putCharToTxBuf
     ___fldiv
     ___flge
     ___flmul
     ___flsub
     ___xxtofl
     _getColor
     _reverseSquareLeft
       _reverse
         _setMotorPWM
           ___lwdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
       _turnLeft_90
         _reverse
         _setMotorPWM
         _stop
     _reverseSquareRight
       _reverse
       _stop
       _turnRight_90
         _reverse
         _setMotorPWM
         _stop
     _sendTxBuf
       _isDataInTxBuf
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
           _efgtoa
             ___fladd
             ___fldiv
             ___fleq
             ___flge
             ___flmul
             ___flneg
             ___flsub
             ___fltol
             ___fpclassifyf
             _floorf
               ___fldiv (ARG)
             _labs
             _memcpy
             _pad
             _strcpy
           _fputc
     _turnLeft_135
       _reverse
       _setMotorPWM
       _stop
     _turnLeft_90
     _turnRight_135
       _reverse
       _setMotorPWM
       _stop
     _turnRight_90
     _turn_180
       _stop
       _turnRight
         _reverse
         _setMotorPWM
         _stop
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _forward
     _setMotorPWM
   _getColor
   _initDCmotorsPWM
   _initUSART4
   _stop
   _whiteCal
     _getColor

 _HighISR (ROOT)
   _getCharFromTxBuf
   _putCharToRxBuf
   i2_isDataInTxBuf

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      62        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      3C       9       23.4%
BITBANK1           100      0       0       6        0.0%
BANK1              100     6D      D1       7       81.6%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     8A      9F       5       99.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     56      5A       1       95.7%
BITBIGSFRlhhhhl     52      0       0      42        0.0%
BITBIGSFRlhhhll     37      0       0      44        0.0%
BITBIGSFRlllhlh     2A      0       0      55        0.0%
BITBIGSFRlllll      26      0       0      60        0.0%
BITBIGSFRlhhhll     20      0       0      47        0.0%
BITBIGSFRlhhhll     1E      0       0      49        0.0%
BITBIGSFRhhhhhh     1B      0       0      33        0.0%
BITBIGSFRhhhhll     17      0       0      38        0.0%
BITBIGSFRhhhhhl     13      0       0      34        0.0%
BITBIGSFRlhhl       11      0       0      50        0.0%
BITBIGSFRhhhhlh      E      0       0      35        0.0%
BITBIGSFRhhhhhh      D      0       0      32        0.0%
BITBIGSFRlhhhll      C      0       0      48        0.0%
BITBIGSFRlllhll      9      0       0      57        0.0%
BITBIGSFRlllhlh      9      0       0      56        0.0%
BITBIGSFRlhhhll      8      0       0      45        0.0%
BITBIGSFRllllh       6      0       0      59        0.0%
BITBIGSFRlllhh       6      0       0      54        0.0%
BITBIGSFRlllhll      5      0       0      58        0.0%
BITBIGSFRllhl        5      0       0      53        0.0%
BITBIGSFRhhhhll      5      0       0      39        0.0%
BITBIGSFRllhh        3      0       0      52        0.0%
BITBIGSFRlhhhlh      2      0       0      43        0.0%
BITBIGSFRhhhhll      2      0       0      37        0.0%
BITBIGSFRlhhhhh      1      0       0      41        0.0%
BITBIGSFRlhhhll      1      0       0      46        0.0%
BITBIGSFRhhhhlh      1      0       0      36        0.0%
BITBIGSFRlhl         1      0       0      51        0.0%
BITBIGSFRhhll        1      0       0      40        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     206      61        0.0%
DATA                 0      0     206       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Tue Dec 13 21:00:08 2022

               _color_read_Red 560C                   ___fldiv@aexp 004E                   ___fldiv@bexp 004D  
                 ___fldiv@sign 0046                _color_read_Blue 56FC                             l60 5ABA  
                           l63 565A                             l72 56FA                             l80 4CAE  
                           l57 5944                             l66 56AA                             l75 54BC  
                           l69 574A                             l85 4BCA            ___wmul@multiplicand 0007  
   __end_of_reverseSquareRight 51E6               _color_read_Clear 56AC               _color_read_Green 565C  
                          l105 1A54                            l204 4E5A                            l222 46A2  
                          l231 58D8                            l216 42E8                            l243 47DE  
                          l228 4564                            l164 530A                            l501 5AD4  
                          l237 4426                            l174 4046                            l246 51E4  
                          l167 4F2C                            l184 50A4                            l513 5A9A  
                          l249 527A                            l282 5A74                            l194 4D84  
                          l291 5B1A                            l276 59F8                            l285 5B24  
                          l294 5B10                            l279 5A4E                            l288 5B2E  
                          l640 41AA                            l448 59A2                            l297 585A  
                          l810 48E4                            l491 5AEC                            l627 3EDA  
                          l488 5A22                            l497 5974                            l772 514E  
                          l783 49E8                            l778 49A2                            l787 5910  
                          _abs 585C                            _pad 530C                            wreg 000FE8  
                 ___flmul@aexp 002E                   ___flmul@bexp 002F                   ___flmul@sign 0029  
                 ___flmul@temp 0034                   ___flmul@prod 0030           reverseSquareRight@mL 0024  
         reverseSquareRight@mR 0026                   ___fltol@exp1 000E                           l1011 53F8  
                         l1004 53F0                           l1100 2EF6                           l1041 263E  
                         l1106 2F78                           l1050 290E                           l1042 262C  
                         l1131 2D38                           l1043 25F2                           ?_abs 0017  
                         l1108 2FF0                           l1109 2FDE                           l1134 2BCA  
                         l1223 532E                           l1127 29D4                           l1232 3798  
                         l1144 2CFA                           l1136 2C42                           l1400 57D4  
                         l1137 2C30                           l1305 370A                           l1234 37A0  
                         l1058 2758                           l1171 3D52                           l1227 5384  
                         l1235 37E6                           l1067 2828                           l1083 5790  
                         l1068 2816                           l1260 1DE8                           l1182 3CEA  
                         l1342 5892                           l1246 3988                           l1262 1C2E  
                         l1175 3C8E                           l1095 30D2                           l1351 3B9E  
                         l1327 5568                           l1191 55BA                           l1168 3BF6  
                         l4000 2A14                           l1345 589A                           l1097 2F32  
                         l1337 4AE6                           l1257 244E                           l4010 2A64  
                         l4002 2A1E                           l1354 3AE2                           l1362 544E  
                         l1290 2230                           l1371 560A                           l4100 5112  
                         l4020 2AA6                           l4012 2A70                           l4004 2A34  
                         l1365 545E                           l4102 5122                           l4110 48E6  
                         l4030 2B08                           l4022 2AB6                           l4014 2A7E  
                         l4006 2A40                           l1383 4FF6                           l1391 5818  
                         l5000 3C06                           l4200 53E2                           l4104 5146  
                         l4120 4970                           l4112 4914                           l4040 2BB0  
                         l4032 2B24                           l4024 2AD0                           l4016 2A8A  
                         l4008 2A58                           l5010 3C44                           l5002 3C1C  
                         l4202 53E4                           l1394 5B34                           l4210 5326  
                         l4106 514C                           l4122 4982                           l4114 4924  
                         l4050 2BEC                           l4042 2BBA                           l4034 2B4E  
                         l4026 2AE0                           l4018 2A9A                           l5020 3CCC  
                         l5012 3C76                           l4204 53EA                           l4300 3F60  
                         l4220 585C                           l4212 533A                           l4124 4990  
                         l4116 4952                           l4060 2C5E                           l4052 2BFA  
                         l4044 2BC8                           l4036 2B84                           l4028 2AFC  
                         l4132 58DA                           l4140 47E0                           l4310 5A4E  
                         l5030 3D22                           l5022 3CDA                           l5014 3C78  
                         l5006 3C30                           l4302 3F64                           l4222 5876  
                         l3510 4F2E                           l4214 534E                           l4206 530C  
                         l4126 49E0                           l4118 4962                           l4070 2CC8  
                         l4062 2C6C                           l4054 2C28                           l4046 2BDA  
                         l4038 2B92                           l4134 58F0                           l4150 4836  
                         l4142 47F6                           l4230 4A70                           l4312 5A5E  
                         l5032 3D32                           l5024 3CF8                           l5016 3C84  
                         l5008 3C38                           l4304 3FA6                           l3520 4FB0  
                         l3512 4F40                           l4216 5352                           l4208 531A  
                         l4320 3750                           l4128 49E6                           l4080 2D1E  
                         l4072 2CE2                           l4064 2C96                           l4048 2BE8  
                         l4136 5900                           l3600 258C                           l4152 4846  
                         l4232 4A7C                           l4224 49EA                           l6000 1466  
                         l5040 5912                           l5050 4BCC                           l5034 3D40  
                         l5026 3CFA                           l5018 3CC0                           l4306 3FC2  
                         l3514 4F52                           l4218 5370                           l4330 37BE  
                         l4322 3770                           l4314 370C                           l4074 2CFE  
                         l4082 2D24                           l4058 2C52                           l4066 2C9A  
                         l3610 25EA                           l3602 2590                           l3530 246C  
                         l4090 575C                           l4162 4870                           l4154 484A  
                         l4146 480A                           l4242 4ADE                           l4226 4A0A  
                         l4250 53FA                           l6010 1522                           l6002 147A  
                         l5042 5916                           l5060 4C12                           l5036 3D42  
                         l5028 3CFE                           l4308 4006                           l3516 4F5C  
                         l4340 37F8                           l4332 37CE                           l4324 378C  
                         l4316 372C                           l4084 2D28                           l4076 2D0E  
                         l4068 2CB4                           l3700 288C                           l3620 2620  
                         l3612 2600                           l3604 2594                           l3532 247C  
                         l3540 24A6                           l3524 2450                           l4180 48D4  
                         l4172 4898                           l4164 487A                           l4156 4858  
                         l4148 4834                           l4228 4A48                           l4236 4A88  
                         l4252 5418                           l6020 15BE                           l6012 1534  
                         l6004 148C                           l5044 5920                           l5300 598A  
                         l6100 30F6                           l5070 4C8C                           l5062 4C2E  
                         l4190 53A8                           l3518 4F7A                           l4342 37FE  
                         l4350 38F0                           l4334 37DA                           l4326 37A8  
                         l4318 3740                           l4094 50A6                           l4078 2D1C  
                         l3710 28D2                           l3702 288E                           l3630 2670  
                         l3622 262A                           l3614 260C                           l3606 25BE  
                         l3550 24D6                           l3542 24B6                           l3534 248C  
                         l3526 245C                           l4174 48A4                           l4166 4884  
                         l4238 4A9A                           l4246 5792                           l6030 167E  
                         l6022 15F0                           l6014 1548                           l6006 14BE  
                         l5046 5930                           l5310 599C                           l5302 5994  
                         l6110 3100                           l6102 30F8                           l4600 5B26  
                         l5064 4C50                           l5056 4BD4                           l4192 53B0  
                         l4184 5386                           l3800 40D2                           l4360 3958  
                         l4352 390A                           l4344 3880                           l4336 37E2  
                         l4328 37B8                           l4096 50D4                           l3720 28FC  
                         l3712 28E0                           l3704 289E                           l3640 26AC  
                         l3632 2680                           l3624 264C                           l3616 2610  
                         l3608 25DA                           l3560 2516                           l3552 24E4  
                         l3544 24BC                           l3536 249C                           l3528 246A  
                         l4088 574C                           l4176 48B4                           l4248 57A2  
                         l6032 16D4                           l6040 173E                           l6024 1602  
                         l6008 14F0                           l6016 155A                           l5048 593A  
                         l5240 528C                           l5312 599E                           l5304 5996  
                         l5080 4B12                           l5072 4AE8                           l6120 310A  
                         l6112 3102                           l6104 30FA                           l4610 5830  
                         l4602 5B2A                           l5066 4C68                           l5058 4BF6  
                         l4194 53BE                           l4186 538E                           l3810 4154  
                         l3802 40E6                           l3730 57F4                           l4362 3968  
                         l4354 3928                           l4346 3886                           l4338 37EE  
                         l4098 50E4                           l3722 28FE                           l3714 28E6  
                         l3706 28AE                           l3650 26F2                           l3642 26BA  
                         l3634 268E                           l3626 265C                           l3618 261E  
                         l3570 2550                           l3562 2518                           l3554 24E6  
                         l3546 24CE                           l3538 249E                           l4178 48C4  
                         l4290 55EC                           l4282 55BC                           l6050 1842  
                         l6042 1794                           l6034 1706                           l6026 1616  
                         l6018 158C                           l5250 52F0                           l5242 52B6  
                         l5314 59A0                           l5306 5998                           l5090 4B90  
                         l5082 4B2E                           l6130 3114                           l6122 310C  
                         l6114 3104                           l6106 30FC                           l5260 4E5C  
                         l4612 5856                           l4604 581C                           l5068 4C74  
                         l4196 53C4                           l4188 53A0                           l4620 4FFC  
                         l3740 3D54                           l3804 40F4                           l3812 415A  
                         l3732 57F8                           l4356 3942                           l4348 388C  
                         l3900 2F20                           l3820 2D3A                           l3716 28E8  
                         l3708 28CE                           l3660 276E                           l3652 2726  
                         l3644 26BC                           l3636 269C                           l3580 2564  
                         l3572 2554                           l3556 24F6                           l3564 2520  
                         l3548 24D0                           l4284 55D0                           l4292 55F0  
                         l6060 18FC                           l6044 17C6                           l6052 1854  
                         l6036 1718                           l6028 1628                           l5252 52F2  
                         l5244 52DA                           l5308 599A                           l5092 4BA8  
                         l5084 4B4A                           l6140 3120                           l6132 3116  
                         l6124 310E                           l6116 3106                           l6108 30FE  
                         l5270 4EB0                           l5262 4E68                           l4614 5858  
                         l4606 5820                           l4198 53DA                           l3734 5A76  
                         l4294 3EDC                           l4630 5050                           l4622 5014  
                         l3750 3D98                           l3742 3D58                           l3814 416A  
                         l3806 4122                           l3726 57D6                           l4358 3952  
                         l3910 2F68                           l3902 2F30                           l3830 2D76  
                         l3822 2D46                           l3718 28EE                           l3670 27AA  
                         l3662 277E                           l3654 2728                           l3646 26C6  
                         l3638 26A8                           l3590 2578                           l3582 2568  
                         l3574 2558                           l3566 2530                           l3558 2506  
                         l4286 55DC                           l6070 19B8                           l6062 1910  
                         l6054 1886                           l6046 181C                           l6038 172C  
                         l5254 52FC                           l5246 52E4                           l5238 527C  
                         l5086 4B6C                           l5078 4AF0                           l6150 312A  
                         l6142 3122                           l6134 3118                           l6126 3110  
                         l6118 3108                           ?_pad 0015                           l5272 4EC4  
                         l5264 4E78                           l4608 5828                           l3736 5A92  
                         l4296 3EF8                           l4640 4DCA                           l4624 5020  
                         l4632 505C                           l4800 45E2                           l3760 3DEE  
                         l3752 3DB8                           l3744 3D66                           l3816 418A  
                         l3808 4142                           l3728 57E2                           l3920 2FA8  
                         l3912 2F76                           l3904 2F42                           l3840 2DA6  
                         l3832 2D86                           l3824 2D54                           l3680 27D6  
                         l3672 27AC                           l3656 2738                           l3648 26CC  
                         l3592 257C                           l3584 256C                           l3576 255C  
                         l3568 2542                           l5600 3B42                           l4288 55E0  
                         l6072 19EA                           l6056 18B8                           l6064 1922  
                         l6048 182E                           l5280 4D18                           l5256 52FE  
                         l5248 52E6                           l5088 4B84                           l6160 3192  
                         l6152 313E                           l6144 3124                           l6136 311A  
                         l6128 3112                           l6080 30D4                           l5266 4E88  
                         l4298 3F4C                           l4650 4E2A                           l4642 4DE2  
                         l4634 5074                           l4626 5038                           l4618 4FF8  
                         l4810 463A                           l4802 45F2                           l3770 3E70  
                         l3762 3E02                           l3754 3DBC                           l3746 3D86  
                         l3930 301A                           l3922 2FD6                           l3906 2F58  
                         l3914 2F88                           l3850 2DDC                           l3842 2DAC  
                         l3834 2D88                           l3826 2D56                           l3690 280E  
                         l3674 27BA                           l3666 2792                           l3682 27D8  
                         l3658 2748                           l3594 2580                           l3586 2570  
                         l3578 2560                           l5602 3B56                           l5610 1A56  
                         l6074 1A1C                           l6066 1954                           l6058 18EA  
                         l5282 4D30                           l5274 4CB0                           l5258 5308  
                         l5290 5976                           l6170 3210                           l6162 31AC  
                         l6154 314A                           l6146 3124                           l6138 311C  
                         l6090 30EC                           l6082 30D8                           l5268 4E9C  
                         l4900 5946                           l4652 4E42                           l4644 4DEE  
                         l4636 508C                           l4628 5044                           l4812 4646  
                         l4804 4602                           l3780 3EBA                           l3772 3E72  
                         l3764 3E10                           l3756 3DC8                           l3748 3D8A  
                         l3940 3092                           l3932 3044                           l3916 2F96  
                         l3908 2F5E                           l3860 2E1C                           l3852 2DEC  
                         l3844 2DBA                           l3828 2D66                           l3836 2D90  
                         l3676 27C2                           l3668 279C                           l3684 27E6  
                         l3596 2584                           l3588 2574                           l5604 3B7E  
                         l5700 1E00                           l5620 1AA2                           l5612 1A5C  
                         l4820 41AC                           l6076 1A2E                           l6068 1986  
                         l5276 4CF4                           l5284 4D3C                           l5292 597C  
                         l6180 32BA                           l6172 321C                           l6164 31AE  
                         l6156 3156                           l6148 3124                           l6092 30EE  
                         l6084 30DC                           l4590 5B20                           l4750 5742  
                         l4742 565C                           l4902 594A                           l4646 4E06  
                         l4638 4D86                           l4814 465E                           l4806 4616  
                         l4910 5AD0                           l3774 3E84                           l3766 3E22  
                         l3758 3DE6                           l3790 407A                           l3950 30C8  
                         l3942 30AE                           l3926 3000                           l3934 3048  
                         l3918 2F9A                           l3862 2E2C                           l3870 2E4C  
                         l3854 2DEE                           l3846 2DBC                           l3838 2DA0  
                         l3694 2838                           l3686 27EA                           l3678 27C6  
                         l3598 2588                           l5606 3B8E                           l5710 1E32  
                         l5702 1E0C                           l5630 1AE0                           l5622 1AAC  
                         l5614 1A6C                           l4830 4228                           l4822 41C0  
                         l6078 1A42                           l5286 4D54                           l5278 4D0C  
                         l5294 5984                           l6190 33B8                           l6182 3300  
                         l6174 3264                           l6166 31B0                           l6158 318E  
                         l6094 30F0                           l6086 30E8                           l4592 5B08  
                         l4744 56A2                           l4736 560C                           l4904 5958  
                         l4648 4E12                           l4816 4676                           l4808 462E  
                         l4760 4428                           l3768 3E50                           l3776 3E8A  
                         l3792 407E                           l3784 4048                           l3944 30B2  
                         l3936 3062                           l3928 300C                           l3880 2E8A  
                         l3872 2E5C                           l3864 2E34                           l3848 2DCC  
                         l3856 2DF6                           l3960 291C                           l3696 2844  
                         l3688 27F8                           l5800 22C0                           l5720 1E7A  
                         l5712 1E40                           l5704 1E14                           l5640 1B28  
                         l5632 1AE8                           l5624 1AB4                           l5616 1A7A  
                         l4920 4356                           l4912 42EA                           l4840 4280  
                         l4832 4238                           l4824 41D8                           l5288 4D6C  
                         l5296 5986                           l6192 33D0                           l6184 335A  
                         l6176 3270                           l6168 31C8                           l6096 30F2  
                         l6088 30EA                           l4594 5B0C                           l4754 56AC  
                         l4738 5652                           l4850 59FC                           l4906 595C  
                         l4818 468E                           l4770 44A4                           l4762 443C  
                         l3778 3E9A                           l3794 408C                           l3786 404C  
                         l3946 30C0                           l3938 3078                           l3890 2ED2  
                         l3882 2E9A                           l3874 2E5C                           l3866 2E38  
                         l3858 2E06                           l3970 295C                           l3962 292A  
                         l3698 2852                           l5810 2376                           l5802 2318  
                         l5730 1F8E                           l5722 1E8A                           l5714 1E58  
                         l5706 1E1C                           l5642 1B2E                           l5626 1AC4  
                         l5634 1AEC                           l5618 1A7E                           l6290 3576  
                         l4930 43B2                           l4922 4366                           l4914 42FE  
                         l4842 428C                           l4834 4248                           l4826 4204  
                         l5298 5988                           l6194 33E4                           l6186 338E  
                         l6178 3298                           l6098 30F4                           l4588 5B1C  
                         l4596 5B12                           l4748 56FC                           l4756 56F2  
                         l4852 5A0C                           l4780 44FC                           l4772 44B4  
                         l4764 4454                           l4908 5ABC                           l3796 40AC  
                         l3788 405A                           l3948 30C6                           l3892 2EE6  
                         l3884 2EAA                           l3980 298C                           l3972 2962  
                         l3964 292C                           l5820 23E8                           l5812 2392  
                         l5804 234C                           l5740 202E                           l5724 1E9E  
                         l5732 1F94                           l5716 1E6A                           l5708 1E20  
                         l5660 1BBA                           l5644 1B36                           l5636 1B12  
                         l5652 1B78                           l5628 1AD4                           l6292 3634  
                         l4940 4412                           l4932 43BE                           l4924 4376  
                         l4916 4316                           l4844 42A4                           l4836 425C  
                         l4828 4218                           l6188 33A6                           l4598 5B16  
                         l4854 5A10                           l4790 4566                           l4782 4508  
                         l4774 44C4                           l4766 4480                           l4950 51A4  
                         l4942 5150                           l3798 40CA                           l3894 2EF4  
                         l3886 2EBA                           l3878 2E70                           l3990 29C4  
                         l3982 298E                           l3974 2972                           l3966 293C  
                         l3958 2910                           l5590 3A24                           l5582 398A  
                         l5822 2400                           l5814 239A                           l5806 2354  
                         l5750 210A                           l5742 2060                           l5734 1FB2  
                         l5726 1F02                           l5718 1E72                           l5662 1BC2  
                         l5654 1B9E                           l5670 1BDE                           l5646 1B4E  
                         l5638 1B24                           l6294 36BE                           l4934 43CA  
                         l4926 4386                           l4918 4342                           l4846 42BC  
                         l4838 4274                           l4856 5A20                           l4792 457A  
                         l4784 4520                           l4776 44D8                           l4768 4494  
                         l4944 5164                           l3896 2F00                           l3888 2EC2  
                         l3992 29E4                           l3984 299E                           l3976 2978  
                         l3968 294C                           l5584 39AA                           l5824 2410  
                         l5816 23AA                           l5808 2358                           l5760 216C  
                         l5752 2110                           l5744 2070                           l5736 1FE6  
                         l5728 1F5A                           l5680 1C78                           l5672 1BF8  
                         l5656 1BB0                           l5648 1B58                           l5840 344E  
                         l5832 3406                           l5920 555E                           l4960 46FC  
                         l4936 43E2                           l4928 439A                           l4848 42D4  
                         l4952 589C                           l4880 59E4                           l4872 59D0  
                         l4794 4592                           l4786 4538                           l4778 44F0  
                         l4946 517C                           l4858 5AD6                           l3898 2F1E  
                         l3994 29F4                           l3986 29AE                           l3978 297E  
                         l5594 3A96                           l5586 3A02                           l5826 2426  
                         l5818 23DA                           l5770 2206                           l5762 2174  
                         l5754 2144                           l5746 2080                           l5738 2018  
                         l5690 1D6E                           l5682 1CB6                           l5658 1BB4  
                         l5842 345E                           l5834 342E                           l5914 5514  
                         l5930 558C                           l4970 4754                           l4962 4710  
                         l4954 46A4                           l4938 43FA                           l4882 59E6  
                         l4874 59DA                           l4796 45BE                           l4788 4550  
                         l4948 5190                           l3988 29BE                           l5596 3AD2  
                         l5588 3A16                           l5828 242E                           l5780 2264  
                         l5772 2226                           l5764 217A                           l5756 2158  
                         l5748 20B4                           l5692 1D76                           l5684 1CE8  
                         l5676 1C3E                           l5860 355A                           l5852 3524  
                         l5844 347E                           l5836 343C                           l5916 5520  
                         l5932 55A8                           l5924 556A                           l4980 47B4  
                         l4972 476C                           l4964 4720                           l4956 46B8  
                         l5940 0E48                           l4876 59E0                           l4884 5A9E  
                         l4886 5460                           l4798 45D2                           l4990 5226  
                         l3998 2A08                           l5598 3B06                           l5790 228C  
                         l5782 226A                           l5774 2242                           l5766 2182  
                         l5758 215C                           l5686 1D26                           l5678 1C44  
                         l5870 35EC                           l5854 3534                           l5846 349E  
                         l5838 344A                           l5918 553E                           l5926 557C  
                         l4982 47CA                           l4974 4778                           l4966 4730  
                         l4958 46D0                           l5950 0F14                           l5942 0E5E  
                         l4878 59E2                           l4992 523A                           l4984 51E6  
                         l5784 2272                           l5776 2250                           l5792 2292  
                         l5768 218E                           l5688 1D3A                           l5696 1DB6  
                         l5856 354A                           l5864 3562                           l5848 34F4  
                         l5928 5584                           l4976 4784                           l4968 4740  
                         l5960 116A                           l5952 0F3C                           l5944 0E72  
                         l5936 0E2C                           l4994 3BA2                           l4986 51FA  
                         l5794 22A4                           l5786 2282                           l5778 2260  
                         l5698 1DF0                           l5874 3620                           l5858 3552  
                         l5866 3594                           l5890 36DE                           l4978 479C  
                         l5970 11E2                           l5962 11B0                           l5954 0FF0  
                         l5946 0EA4                           l5938 0E38                           l4996 3BB2  
                         l4988 5212                           l5796 22B6                           l5788 2286  
                         l5884 369C                           l5876 364A                           l5868 35B8  
                         l5980 127A                           l5972 1214                           l5964 11BC  
                         l5956 10A4                           l5948 0EDC                           l4998 3BC0  
                         l5798 22BA                           l5878 366A                           l5886 36CC  
                         l5990 1332                           l5982 128A                           l5974 1226  
                         l5966 11C0                           l5958 1158                           l5992 1364  
                         l5984 12BC                           l5976 1236                           l5968 11D2  
                         l5994 1388                           l5986 12CE                           l5978 1268  
                         l5996 13BA                           l5988 1300                           l5998 1410  
                         STR_1 0E01                           STR_2 0E14                           STR_3 0E23  
                         STR_6 0E27                           u3110 4F40                           u3111 4F3C  
                         u3120 4F52                           u4000 2BC8                           u3200 24F6  
                 _BAUD4CONbits 000EE9                           u3121 4F4E                           u4001 2BC4  
                         u3201 24F2                           u3130 4F7A                           u4010 2BE8  
                         u3210 2506                           u3131 4F76                           u4011 2BE4  
                         u3211 2502                           u3140 4FB0                           u4100 50D4  
                         u4020 2BFA                           u3300 264C                           u3220 2542  
                         u3141 4FAC                           u4101 50D0                           u4021 2BF6  
                         u3301 2648                           u3221 253E                           u4110 5112  
                         u4030 2C28                           u3310 265C                           u3230 2550  
                         u3150 246A                           u4111 510E                           u4031 2C24  
                         u3311 2658                           u3231 254C                           u3151 2466  
                         u5000 5014                           u4120 5146                           u4040 2C3E  
                         u3400 27BA                           u3320 268E                           u3240 25BE  
                         u3160 247C                           u4200 482A                           u5001 5010  
                         u4121 5142                           u4041 2C3A                           u3401 27B6  
                         u3321 268A                           u3241 25BA                           u3161 2478  
                         u5010 5038                           u4130 4914                           u4050 2C52  
                         u3410 27D6                           u3330 269C                           u3250 25D6  
                         u3170 248C                           u4210 4858                           _T2PR 000FBC  
                         u5011 5034                           u4131 4910                           u4051 2C4E  
                         u3411 27D2                           u3331 2698                           u3251 25D0  
                         u3171 2488                           u4211 4854                           u5020 5074  
                         u4300 5370                           u4140 4952                           u4060 2C6C  
                         u3500 28AE                           u3420 27E6                           u3340 26BA  
                         u3260 25D8                           u3180 24CE                           u4220 486C  
                         u5021 5070                           u4301 536C                           u4141 494E  
                         u4061 2C68                           u3501 28AA                           u3421 27E2  
                         u3341 26B6                           u3181 24CA                           u4221 4868  
                         u4205 4820                           u5030 508C                           u4310 5876  
                         u4150 4970                           u4070 2CB4                           u3510 28CE  
                         u3430 27F8                           u3350 26F2                           u3270 2600  
                         u3190 24E4                           u4230 4894                           u5031 5088  
                         u4311 5872                           u4151 496C                           u4071 2CB0  
                         u3511 28CA                           u3431 27F4                           u3351 26EE  
                         u3271 25FC                           u3191 24E0                           u4231 4890  
                         u5040 4DE2                           u5120 4520                           u5200 5AEC  
                         u3600 3E50                           u4160 4990                           u4080 2CE2  
                         u3520 28E0                           u3440 280E                           u3360 2738  
                         u3280 261E                           u4240 48B4                           u4320 4A2A  
                         u4400 5418                           u5041 4DDE                           u5121 451C  
                         u3601 3E4C                           u4161 498C                           u4081 2CDE  
                         u3521 28DC                           u3441 280A                           u3361 2734  
                         u3281 261A                           u4241 48B0                           u4401 5414  
                         u5050 4E06                           u5130 4538                           u3610 3E9A  
                         u4170 49E0                           u4090 2D1C                           u3530 28FC  
                         u3450 2824                           u3370 276E                           u3290 263E  
                         u4250 48C4                           u4330 4A48                           u5051 4E02  
                         u5131 4534                           u3611 3E96                           u4171 49DC  
                         u4091 2D18                           u3531 28F8                           u3451 2820  
                         u3371 276A                           u3291 263A                           u4251 48C0  
                         u4331 4A44                           u5220 5974                           u5300 3C1C  
                         u4260 53A0                           u5060 4E2A                           u5140 465E  
                         u3620 405A                           u3540 5818                           u3700 2D76  
                         u4180 58F0                           u3460 2838                           u3380 277E  
                         u4340 4A70                           u5221 5970                           u5301 3C18  
                         u4261 539C                           u5061 4E26                           u5141 465A  
                         u3621 4056                           u3541 5814                           u3701 2D72  
                         u4181 58EC                           u3461 2834                           u3381 277A  
                         u4341 4A6C                           u4325 4A20                           u5310 3C72  
                         u4270 53BE                           u5070 4E42                           u5150 4676  
                         u5230 5AD0                           u3550 3D66                           u3630 408C  
                         u3710 2DBA                           u3470 2852                           u3390 27AA  
                         u4190 47F6                           u4350 4A9A                           u4510 560A  
                         u5311 3C6E                           u4271 53BA                           u5071 4E3E  
                         u5151 4672                           u5231 5ACC                           u3551 3D62  
                         u3631 4088                           u3711 2DB6                           u3471 284E  
                         u3391 27A6                           u4191 47F2                           u4351 4A96  
                         u4511 5606                           u5400 4C2E                           u5320 3CBC  
                         u4280 53DA                           u4520 3EF8                           u3560 3D98  
                         u3640 40CA                           u4600 37B8                           u3800 2F58  
                         u3720 2DCC                           u3480 288C                           u6200 3A92  
                         u5240 43E2                           u5160 42A4                           u7000 31D8  
                         u5401 4C2A                           u5321 3CB8                           u4281 53D6  
                         u4521 3EF4                           u3561 3D94                           u3641 40C6  
                         u4601 37B4                           u3801 2F54                           u3721 2DC8  
                         u3481 2888                           u6201 3A8E                           u5241 43DE  
                         u5161 42A0                           u7001 31D2                           u5410 4C40  
                         u5330 3CDA                           u4530 3FC2                           u3650 40F4  
                         u4290 531A                           u4610 37CE                           u3810 2F76  
                         u3730 2DDC                           u3490 289E                           u4370 4AD4  
                         u6210 3AB6                           u5250 43FA                           u5170 42BC  
                         u7010 31DA                           u5411 4C38                           u5331 3CD6  
                         u4531 3FBE                           u3571 3DC2                           u3651 40F0  
                         u4291 5316                           u4611 37CA                           u3811 2F72  
                         u3731 2DD8                           u3491 289A                           u4371 4ACE  
                         u5251 43F6                           u5171 42B8                           u4540 5A5E  
                         u5180 5A0C                           u5340 3CEA                           u3580 3DE6  
                         u3660 4122                           u4620 390A                           u3900 30C0  
                         u3820 2F96                           u3740 2E1C                           u4380 4AD6  
                         u6220 3AD2                           u6300 1B24                           u5260 479C  
                         u5500 4BBA                           u7100 3334                           u7020 31F2  
                         u4541 5A5A                           u5181 5A08                           u5341 3CE6  
                         u3581 3DE2                           u3661 411E                           u4621 3906  
                         u3901 30BC                           u3821 2F92                           u3741 2E18  
                         u4365 4AAC                           u6221 3ACE                           u6301 1B20  
                         u5261 4798                           u5501 4BB2                           u7101 332E  
                         u7021 31EA                           u4550 5A74                           u5430 4C9E  
                         u5350 3CF8                           u5190 5AEA                           u3590 3E10  
                         u3670 416A                           u4630 3928                           u3830 2FA8  
                         u3750 2E5C                           u3910 292A                           u6230 3B26  
                         u4390 57D4                           u6310 1B9E                           u5270 47B4  
                         u7110 3336                           u7030 3210                           u4551 5A70  
                         u5431 4C96                           u5351 3CF4                           u5191 5AE4  
                         u3591 3E0C                           u3671 4166                           u4631 3924  
                         u3831 2FA4                           u3751 2E58                           u3911 2926  
                         u6215 3AAC                           u4391 57D0                           u6311 1B9A  
                         u5271 47B0                           u7031 320C                           u5360 3D32  
                         u5280 3BB2                           u4640 3942                           u4560 373C  
                         u3840 2FD6                           u3760 2ED2                           u3680 2D54  
                         u3920 293C                           u6240 3B42                           u6160 39D4  
                         u6400 1E32                           u6320 1BB0                           u7120 335A  
                         u7040 322C                           u5361 3D2E                           u5281 3BAE  
                         u4641 393E                           u4561 3736                           u3841 2FD2  
                         u3761 2ECE                           u3681 2D50                           u3921 2938  
                         u6241 3B3E                           u6401 1E2E                           u6321 1BAC  
                         u7121 3356                           u7041 3226                           u5370 3D40  
                         u5290 3BC0                           u4650 3952                           u4570 373E  
                         u3850 2FEC                           u3770 2EF4                           u3690 2D66  
                         u3930 294C                           u6250 3B7E                           u6170 3A02  
                         u6410 1E40                           u6330 1C2A                           u5450 4B02  
                         u7130 33B8                           u7050 322E                           u5371 3D3C  
                         u5291 3BBC                           u4651 394E                           u3851 2FE8  
                         u3771 2EF0                           u3691 2D62                           u3931 2948  
                         u6251 3B7A                           u6235 3B1C                           u6171 39FE  
                         u6411 1E3C                           u6331 1C26                           u5451 4AFA  
                         u7131 33B4                           u5428 4C42                           u5380 4BE6  
                         u4580 3750                           u3860 3000                           u3780 2F1E  
                         u3940 298C                           u6180 3A24                           u6500 2242  
                         u6420 1E6A                           u6340 1CB6                           u6260 1A7A  
                         u7060 3246                           u7028 31F6                           u5381 4BDE  
                         u4581 374C                           u3861 2FFC                           u3781 2F1A  
                         u3941 2988                           u6181 3A20                           u6165 39CA  
                         u6501 223E                           u6421 1E66                           u6341 1CB2  
                         u6261 1A76                           u7061 323E                           u4590 378C  
                         u3870 301A                           u3790 2F42                           u3950 299E  
                         u6510 2250                           u6430 1FB2                           u6350 1CE8  
                         u6270 1AC4                           u5518 4BBC                           u5470 4B4A  
                         u7070 3264                           u4591 3788                           u3871 3016  
                         u3791 2F3E                           u3951 299A                           u6511 224C  
                         u6431 1FAE                           u6351 1CE4                           u6271 1AC0  
                         u7207 5926                           u5471 4B46                           u7071 3260  
                         u5448 4CA0                           u3880 3062                           u3960 29AE  
                         u6520 22A4                           u6440 2018                           u6360 1D26  
                         u6280 1AD4                           u6600 349E                           u5480 4B5C  
                         u7080 3284                           u3881 305E                           u3961 29AA  
                         u6521 22A0                           u6441 2014                           u6361 1D22  
                         u6281 1AD0                           u6601 349A                           u7217 1160  
                         u5481 4B54                           u7081 327A                           u3890 3092  
                         u3970 29E4                           u6530 2376                           u6450 2060  
                         u6370 1DB2                           u6290 1B12                           u6610 35B4  
                         u3891 308E                           u3971 29E0                           u6195 3A38  
                         u6531 2372                           u6451 205C                           u6371 1DAE  
                         u6291 1B0E                           u6611 35B0                           u7307 170E  
                         u7227 11C8                           u7147 319E                           u3980 29F4  
                         u6196 3A42                           u6540 2392                           u6460 2070  
                         u6380 1DE8                           u6620 555E                           u6700 1332  
                         u5468 4B04                           u7068 324A                           u3981 29F0  
                         u6197 3A52                           u6541 238E                           u6461 206C  
                         u6381 1DE4                           u6621 555A                           u7317 1734  
                         u7237 136C                           u6701 132E                           u7157 339A  
                         u5398 4BE8                           u3990 2B6E                           u6550 23FA  
                         u6470 210A                           u6390 1E00                           u6710 1364  
                         u6630 11E2                           u6551 23F4                           u6471 2106  
                         u6391 1DFC                           u7407 42C6                           u7327 1824  
                         u7247 137E                           u6711 1360                           u6631 11DE  
                         u7167 33F0                           u6560 23FC                           u6480 2158  
                         u6800 15F0                           u6720 13BA                           u6640 1214  
                         u5840 4D0C                           u6481 2154                           u7417 4308  
                         u7337 184A                           u6801 15EC                           u7257 1482  
                         u6721 13B6                           u6641 1210                           u5841 4D08  
                         u7177 4B1C                           u6570 2410                           u6490 2206  
                         u6810 167E                           u6730 1410                           u6650 1236  
                         u5850 4D30                           u5498 4B5E                           u7098 3288  
                         u7507 4472                           u3995 2B64                           u6571 240C  
                         u6491 2202                           u7427 4334                           u7347 18F2  
                         u6811 167A                           u7267 152A                           u6731 140C  
                         u6651 1232                           u5851 4D2C                           u7187 4B76  
                         u4980 5844                           u6580 342E                           u6900 1954  
                         u6820 16D4                           u6740 1466                           u6660 1268  
                         u5860 4D54                           u4981 583C                           u7517 4542  
                         u6581 342A                           u7437 4404                           u6901 1950  
                         u7357 1918                           u6821 16D0                           u7277 1550  
                         u6741 1462                           u6661 1264                           u5861 4D50  
                         u7197 4B9A                           u6590 347E                           u6910 1986  
                         u6830 1706                           u6750 14BE                           u6670 128A  
                         u5870 4D6C                           u7607 4C7E                           u7527 5204  
                         u6591 347A                           u7447 46C2                           u7367 1A24  
                         u6911 1982                           u6831 1702                           u7287 15F8  
                         u6751 14BA                           u6671 1286                           u5871 4D68  
                         u6920 19B8                           u6840 1794                           u6760 14F0  
                         u6680 12BC                           u7537 5244                           u7457 46EE  
                         u7377 1A4A                           u6921 19B4                           u6841 1790  
                         u7297 161E                           u6761 14EC                           u6681 12B8  
                         u6930 19EA                           u6850 17C6                           u6770 1522  
                         u6690 1300                           u7547 4584                           u7467 47BE  
                         u7387 41CA                           u6931 19E6                           u6851 17C2  
                         u6771 151E                           u6691 12FC                           u6940 1A1C  
                         u6860 181C                           u6780 158C                           u7557 45B0  
                         u7477 516E                           u7397 41F6                           u6941 1A18  
                         u6861 1818                           u6781 1588                           u4998 5846  
                         u6870 1886                           u6790 15BE                           u6950 3166  
                         u7567 4680                           u7487 51AE                           u6871 1882  
                         u6791 15BA                           u6951 3160                           u6880 18B8  
                         u6960 317C                           u6952 3168                           u7577 5096  
                         u7497 4446                           u6881 18B4                           u6961 3176  
                         u6890 18EA                           u6970 318E                           u6962 317E  
                         u7587 4C00                           u6891 18E6                           u6971 318A  
                         u6980 31C4                           u7597 4C5A                           u6981 31BE  
                         u6990 31C6                           abs@a 0017                           _dbuf 0181  
                         _labs 53FA                           _main 30D4                           _dtoa 370C  
                         _prec 00F4                           pad@i 001C                           pad@p 0019  
                         fsr1h 000FE2                           fsr2h 000FDA                           indf2 000FDF  
                         fsr1l 000FE1                           pad@w 001E                           fsr2l 000FD9  
                         btemp 005B                           _stop 4FF8                  ___fpclassifyf 49EA  
                         prodh 000FF4                           prodl 000FF3                           start 0076  
              ___fldiv@new_exp 0047         __end_of_color_read_Red 565C                __end_of_HighISR 0076  
                 ___param_bank 000000                    _turnLeft_90 4566                   main@clearRef 013E  
                        ??_abs 0019                          ??_pad 001B                  ___fltol@sign1 000D  
              __end_of___aodiv 3EDC                          ?_labs 0005                __end_of___fladd 2910  
                        ?_main 0001                          ?_dtoa 0020                __end_of___aomod 41AC  
              __end_of___fldiv 30D4                __end_of___flneg 5912                __end_of___flmul 2D3A  
              __end_of___flsub 5792                __end_of___fltol 48E6                          ?_stop 0018  
              __end_of___lwdiv 53FA                          i2l510 006A                          i2l508 0066  
                        i2l491 5B04                          i2l484 59CE                          i2l477 5A4C  
                 vfpfcnvrt@fmt 00A5                          _TMR0H 000FD4                          _TMR0L 000FD3  
   __end_of_I2C_2_Master_Start 5B26     __end_of_I2C_2_Master_Write 5B12                          _flags 00FA  
                        _fputc 4F2E                __end_of_forward 4D86                          _fputs 57D6  
                        labs@a 0005                          pad@fp 0015                          _width 00F2  
                        _putch 5B34                          dtoa@d 0022                          dtoa@i 0040  
                        dtoa@n 0038                          dtoa@p 0034                          dtoa@s 0042  
                        dtoa@w 0036                          tablat 000FF5                __end_of_reverse 4E5C  
                        ttemp5 005C                          ttemp6 005F                          ttemp7 0063  
                        status 000FD8                          wtemp8 005C                __end_of_sprintf 55BC  
               ?___fpclassifyf 0005        __end_of_color_read_Blue 574C          _I2C_2_Master_RepStart 5B26  
           putCharToRxBuf@byte 0001                ?_color_read_Red 0009                __initialization 54BE  
                 __end_of_labs 5460                   __end_of_main 3406                   __end_of_dtoa 398A  
              i2_isDataInTxBuf 5AEE                   __end_of_stop 50A6                   _turnLeft_135 46A4  
           putCharToTxBuf@byte 0005                  colorDetect@mL 00E1                         ??_labs 0009  
                colorDetect@mR 00E3                         ??_main 00E7                         ??_dtoa 002A  
                       ??_stop 001C                  __activetblptr 000003                   _turnRight_90 4428  
                 ?_setMotorPWM 0012                         ?_fputc 0005                         ?_fputs 000E  
                       _CCPR1H 000FAA                         _CCPR2H 000FA6                         _CCPR3H 000F25  
                       _CCPR4H 000F21                         ?_putch 0001          colorDetect@greenPrint 0132  
                       _RC0PPS 000E62                         _RC4REG 000EE3                         _RE2PPS 000E74  
                       _RD5PPS 000E6F                         _RC7PPS 000E69                         _RD6PPS 000E70  
                       _RE4PPS 000E76                         i2l3236 5AEE                         i2l5320 5A3A  
                       i2l5322 5A4A                         i2l5324 59A4                         i2l5316 5A26  
                       i2l5326 59B4                         i2l5318 5A36                         i2l5328 59B8  
                       _RG6PPS 000E88                         i2l5480 0012                         i2l5490 005A  
                       i2l5482 0022                         i2l5484 0028                         i2l5486 0038  
                       i2l5488 0046                      ??_HighISR 0003       __end_of_color_click_init 5946  
                       _RX4PPS 000E15                         _TX4REG 000EE4               __end_of___xxtofl 3D54  
             __end_of_getColor 54BE                   _CCPTMRS0bits 000FAD                   vfprintf@cfmt 00BA  
                       ___flge 48E6               _getCharFromTxBuf 59A4                         ___fleq 50A6  
                    ??___aodiv 0015                      ??___fladd 000D                      ??___aomod 0015  
                       ___wmul 5A76                      ??___fldiv 003E                      ??___flneg 0009  
                    ??___flmul 0025                      ??___flsub 001D                      ??___fltol 0009  
                       _efgtoa 1A56                      ??___lwdiv 000F                         _floorf 398A  
                       _memcpy 55BC                         clear_0 54E4                         clear_1 54F0  
                       clear_2 54FC                         isa$std 000001                         pad@buf 0017  
                main@motorLeft 0164                         dtoa@fp 0020                         _strcpy 5792  
                       fputc@c 0005              ?_TxBufferedString 0006                         fputs@c 0012  
                       fputs@i 0013                         fputs@s 000E                      ??_forward 001C  
              ___fpclassifyf@e 000D                ___fpclassifyf@u 000F                ___fpclassifyf@x 0005  
                 __mediumconst 0000                         tblptrh 000FF7                         tblptrl 000FF6  
                       tblptru 000FF8             ??_TxBufferedString 0008                      ??_reverse 001C  
             __end_of_whiteCal 4BCC                         putch@c 0001               __end_of_vfprintf 556A  
                       stop@mL 0018                         stop@mR 001A              ??_initDCmotorsPWM 0007  
                    ??_sprintf 0057               __end_of_turn_180 58DA                     ___flge@ff1 0036  
                   ___flge@ff2 003A                ??___fpclassifyf 0009                   ___xxtofl@arg 000F  
                 ___xxtofl@exp 000E                   ___xxtofl@val 0005                     ___fleq@ff1 0005  
                   ___fleq@ff2 0009          __end_of_isDataInTxBuf 5AEE                     __accesstop 0060  
      __end_of__initialization 550A       __end_of_color_read_Clear 56FC                     ___flneg@f1 0005  
     __end_of_color_read_Green 56AC         ?_I2C_2_Master_RepStart 0001        __end_ofi2_isDataInTxBuf 5B06  
                ___rparam_used 000001                     ___fltol@f1 0005               ?_color_read_Blue 0009  
            main@ambientRGBVal 014B                 __pcstackCOMRAM 0001                  ?_DCmotorsInit 0005  
                 __pidataBANK0 5B30                  __end_of_fputc 4FF8                  __end_of_fputs 581A  
                __end_of_putch 5B36                        ??_fputc 0009                        ??_fputs 0012  
           _reverseSquareRight 5150                        ??_putch 0005                     __pbssBANK0 00EA  
                   __pbssBANK1 016D                     __pbssBANK2 0200                     _ambientCal 4BCC  
          ?_reverseSquareRight 0024                  _turnRight_135 42EA              _color_writetoaddr 5A9C  
                 _T2CLKCONbits 000FBF                 ??_DCmotorsInit 0009                        ?___flge 0036  
                      ?___fleq 0005                   ?_turnLeft_90 001E             ?_color_writetoaddr 0007  
                      ?___wmul 0005                        ?_efgtoa 0070                        ?_floorf 004F  
                      ?_memcpy 0005            ??_color_writetoaddr 0008                        ?_strcpy 0005  
         ??_reverseSquareRight 0028                      ?___xxtofl 0005                        _SP4BRGH 000EE6  
                      _SP4BRGL 000EE5                      ?_getColor 0010                        _SSP2ADD 000ED6  
                      _SSP2BUF 000ED5         color_writetoaddr@value 0007               ??_color_read_Red 000B  
                      _HighISR 0008                 ?_turnRight_135 001E      __end_of_color_writetoaddr 5ABC  
             ?i2_isDataInTxBuf 0001             _I2C_2_Master_Start 5B1C                     _initUSART4 5976  
           _I2C_2_Master_Write 5B06                        __Hparam 0000                        __Lparam 0000  
            color_read_Red@tmp 000E                        ___aodiv 3D54                        ___fladd 2450  
                      ___aomod 4048                        ___fldiv 2D3A                        ___flneg 58DA  
                      ___flmul 2910                      ?_whiteCal 0012                        ___flsub 574C  
                      ___fltol 47E0            ?_I2C_2_Master_Start 0001                        ___lwdiv 5386  
          ?_I2C_2_Master_Write 0001                     _off_period 00F6                      ?_vfprintf 00B4  
                 __psmallconst 0E00                      ?_turn_180 0024                        __pcinit 54BE  
                      __ramtop 0E00                        __ptext0 30D4                        __ptext1 4AE8  
                      __ptext2 5976                        __ptext3 527C                        __ptext4 4CB0  
                      __ptext5 5912                        __ptext6 5A9C                        __ptext7 59D0  
                      __ptext8 0E2C                        __ptext9 589C              colorDetect@RGBVal 0126  
                    _T2CONbits 000FBD                        _forward 4CB0                     ??___xxtofl 0009  
                    _T2HLTbits 000FBE                        efgtoa@c 0076                        efgtoa@d 0082  
                      efgtoa@e 0086                        efgtoa@f 0072                        efgtoa@g 0099  
                      efgtoa@h 0090                        efgtoa@i 008E                        efgtoa@l 0094  
                      efgtoa@m 0084                        efgtoa@n 009D                        efgtoa@p 0079  
                      efgtoa@t 007B                        efgtoa@u 009F                        efgtoa@w 0088  
                      _reverse 4D86                     ??_getColor 0012                  _RxBufWriteCnt 005A  
     __end_of_getCharFromTxBuf 59D0                 main@motorRight 015B                        _sprintf 556A  
         ??_I2C_2_Master_Start 0006           ??_I2C_2_Master_Write 0006           end_of_initialization 550A  
            __end_of_sendTxBuf 5AD6                        floorf@e 006A                        floorf@m 0066  
                      floorf@u 006C                        floorf@x 004F                 DCmotorsInit@mL 0005  
               DCmotorsInit@mR 0007                        memcpy@d 000B                        memcpy@n 0009  
                      memcpy@s 000D                    ?_ambientCal 0012                        fputc@fp 0007  
                      fputs@fp 0010              ?_color_click_init 0001              colorDetect@whiteB 011C  
            colorDetect@whiteG 0118              colorDetect@whiteR 0114             ??_color_click_init 0009  
            __end_of_vfpfcnvrt 370C                     efgtoa@mode 0080                     efgtoa@sign 0098  
                      postdec1 000FE5                        postdec2 000FDD                        postinc0 000FEE  
                      postinc1 000FE6                        postinc2 000FDE               vfpfcnvrt@convarg 00A9  
                   ??_whiteCal 0014                     ??_vfprintf 0057                     ??_turn_180 0028  
                      strcpy@d 000B                        strcpy@s 0009                _initDCmotorsPWM 527C  
                    _PORTFbits 000F8E             setMotorPWM@negDuty 0017              __end_of_turnRight 42EA  
                  ___fladd@grs 0014                     main@RGBVal 0142                  ___xxtofl@sign 000D  
                    _TRISAbits 000F81             setMotorPWM@posDuty 0016                      _TRISCbits 000F83  
                    _TRISDbits 000F84                      _TRISEbits 000F85                      _TRISFbits 000F86  
                    _TRISGbits 000F87                      _TRISHbits 000F88           __end_of_DCmotorsInit 4F2E  
                  ___fldiv@grs 0049                    ___fldiv@rem 0042            reverseSquareLeft@mL 0024  
          reverseSquareLeft@mR 0026       color_writetoaddr@address 0008        ??_I2C_2_Master_RepStart 0006  
              ??_turnRight_135 0022                    ___flmul@grs 002A                    _CCP1CONbits 000FAB  
            ?_color_read_Clear 0009                   _EUSART4RXbuf 016D                   _EUSART4TXbuf 0200  
                  _CCP2CONbits 000FA7              ?_color_read_Green 0009                    _CCP3CONbits 000F26  
                  ?_initUSART4 0001                    _CCP4CONbits 000F22                     main@whiteC 013A  
           ??_color_read_Clear 000B             ??_color_read_Green 000B                  ??_colorDetect 00E5  
               __end_of___flge 49EA                 __end_of___fleq 5150                    vfpfcnvrt@ap 00A7  
                  vfpfcnvrt@cp 00B2                    vfpfcnvrt@fp 00A3                 __end_of___wmul 5A9C  
               __end_of_efgtoa 2450                 __end_of_floorf 3BA0                 __end_of_memcpy 560C  
                   floorf@F526 00EA         colorDetect@whiteRGBVal 00DF                 __end_of_strcpy 57D6  
          color_read_Clear@tmp 000E            start_initialization 54BE           colorDetect@bluePrint 0136  
                  __end_of_abs 589C                    __end_of_pad 5386                  _TxBufWriteCnt 0058  
        __end_of___fpclassifyf 4AE8            color_read_Green@tmp 000E        __end_of_initDCmotorsPWM 530C  
                  vfprintf@fmt 00B6                       ??___flge 003E                       ??___fleq 000D  
                     ??___wmul 0009                       ??_efgtoa 0053                 _putCharToRxBuf 5A24  
               _putCharToTxBuf 59FA                    __pdataBANK0 00FB                       ??_floorf 0060  
                     ??_memcpy 000B            __end_of_colorDetect 1A56                       ??_strcpy 0009  
                    ___fladd@a 0009                      ___fladd@b 0005                      ___fldiv@a 003A  
                    ___fldiv@b 0036                      ___flmul@a 0021                      ___flmul@b 001D  
                  __pbssCOMRAM 0057                      ___flsub@a 0019                      ___flsub@b 0015  
                __pcstackBANK0 0060                  __pcstackBANK1 0100               ___aodiv@dividend 0005  
                     ?_HighISR 0001              _reverseSquareLeft 51E6             ?_reverseSquareLeft 0024  
                  _efgtoa$2732 007D               ___lwdiv@dividend 000B                      _dtoa$2701 0032  
       __end_of_putCharToRxBuf 5A4E         __end_of_putCharToTxBuf 5A24                      __pintcode 0008  
                     ?___aodiv 0005                       ?___fladd 0005                       ?___aomod 0005  
                     ?___fldiv 0036               ___aodiv@quotient 0017                       ?___flneg 0005  
                     ?___flmul 001D                       ?___flsub 0015                  ?_turnLeft_135 001E  
                     ?___fltol 0005                       ?___lwdiv 000B            ??_reverseSquareLeft 0028  
              turnRight_135@mL 001E                turnRight_135@mR 0020         TxBufferedString@string 0006  
               turnLeft_135@mL 001E                 turnLeft_135@mR 0020           I2C_2_Master_Read@ack 0007  
         I2C_2_Master_Read@tmp 0008                    __smallconst 0E00                       ?_forward 0018  
            _I2C_2_Master_Idle 5A4E                  ?_turnRight_90 001E              _I2C_2_Master_Init 59D0  
            _I2C_2_Master_Read 581A              _I2C_2_Master_Stop 5B12                   _RxBufReadCnt 0059  
                     ?_reverse 0018             ?_I2C_2_Master_Idle 0001             ?_I2C_2_Master_Init 0001  
           ?_I2C_2_Master_Read 0001                  ??_setMotorPWM 0014             ?_I2C_2_Master_Stop 0001  
             ___lwdiv@quotient 000F       initDCmotorsPWM@PWMperiod 0005                       ?_sprintf 00BC  
            ?_getCharFromTxBuf 0001      __end_of_reverseSquareLeft 527C             ??_getCharFromTxBuf 0001  
                 ??_ambientCal 0014            ??_I2C_2_Master_Idle 0005            ??_I2C_2_Master_Init 0005  
          ??_I2C_2_Master_Read 0006                 ___wmul@product 0009                       _LATAbits 000F79  
          ??_I2C_2_Master_Stop 0006                       _LATCbits 000F7B                  _isDataInTxBuf 5AD6  
                     _LATDbits 000F7C                       _LATEbits 000F7D                       _LATFbits 000F7E  
                    _on_period 00F8               _TxBufferedString 5946                       _LATGbits 000F7F  
                     _LATHbits 000F80                      _sendTxBuf 5ABC                       _IPR4bits 000E23  
                     _PIE4bits 000E2D                      getColor@v 0010                    turnRight@mL 001E  
                  turnRight@mR 0020                       i2u282_40 5B02                       i2u282_41 5AFC  
                     i2u283_40 5B04                       i2u612_40 0022                       i2u612_41 001E  
                     i2u613_40 0038                       i2u613_41 0034                       i2u614_40 0046  
                     i2u614_41 0042                       i2u615_40 005A                       i2u615_41 0056  
                     _PIR4bits 000E37                       i2u588_40 5A36                       i2u588_41 5A32  
                     i2u589_40 59B4                       i2u589_41 59B0                ?_putCharToRxBuf 0001  
             ?_initDCmotorsPWM 0005                    _colorDetect 0E2C                ?_putCharToTxBuf 0001  
               ??_turnLeft_135 0022                   _DCmotorsInit 4E5C                       _SSP2CON2 000EDA  
                     _SSP2STAT 000ED8                      _vfpfcnvrt 3406      __end_of_I2C_2_Master_Idle 5A76  
    __end_of_I2C_2_Master_Init 59FA      __end_of_I2C_2_Master_Read 585C              ___wmul@multiplier 0005  
    __end_of_I2C_2_Master_Stop 5B1C                 ??_turnRight_90 0022                   setMotorPWM@m 0012  
                    main@carGo 014A    I2C_2_Master_Write@data_byte 0006             __end_of_ambientCal 4CB0  
            ??_color_read_Blue 000B                   _TxBufReadCnt 0057                      _turnRight 41AC  
                   vfpfcnvrt@c 00B1                      copy_data0 54D2            colorDetect@ambientB 0124  
          colorDetect@ambientG 0122            colorDetect@ambientR 0120            colorDetect@clearRef 00D9  
               ?_isDataInTxBuf 0001  __end_of_I2C_2_Master_RepStart 5B30             color_read_Blue@tmp 000E  
          __end_of_setMotorPWM 4048                     ?_sendTxBuf 0001                   ??_initUSART4 0005  
                     __Hrparam 0000            colorDetect@redPrint 012E                      memcpy@tmp 000F  
                   vfprintf@ap 00B8                       __Lrparam 0000                     vfprintf@fp 00B4  
                    forward@mL 0018                      forward@mR 001A                     ?_vfpfcnvrt 00A3  
     colorDetect@ambientRGBVal 00DD                ___aodiv@divisor 000D                ___aodiv@counter 0015  
                   _ANSELDbits 000EA7             ___fpclassifyf@F465 00EE                     _ANSELFbits 000EB4  
                   sprintf@fmt 00BE                     turn_180@mL 0024                     turn_180@mR 0026  
                     ___xxtofl 3BA0                     _T0CON0bits 000FD5                     _T0CON1bits 000FD6  
              ___lwdiv@divisor 000D             __end_of_initUSART4 59A4                       _getColor 5460  
              ___lwdiv@counter 0011                     ?_turnRight 001E                       __ptext10 41AC  
                     __ptext11 42EA                       __ptext20 398A                       __ptext12 46A4  
                     __ptext21 49EA                       __ptext13 556A                       __ptext30 370C  
                     __ptext22 47E0                       __ptext14 5514                       __ptext31 530C  
                     __ptext23 574C                       __ptext15 3406                       __ptext40 5150  
                     __ptext32 57D6                       __ptext24 2450                       __ptext16 1A56  
                     __ptext41 4428                       __ptext33 4F2E                       __ptext25 58DA  
                     __ptext17 5792                       __ptext50 5946                       __ptext42 51E6  
                     __ptext34 5B34                       __ptext26 2910                       __ptext18 55BC  
                     __ptext51 59FA                       __ptext43 4566                       __ptext35 585C  
                     __ptext27 48E6                       __ptext19 53FA                       __ptext60 5B1C  
                     __ptext52 4BCC                       __ptext44 4FF8                       __ptext36 4048  
                     __ptext28 50A6                       __ptext61 5B26                       __ptext53 5460  
                     __ptext45 4D86                       __ptext37 3D54                       __ptext29 2D3A  
                     __ptext62 581A                       __ptext54 560C                       __ptext46 3EDC  
                     __ptext38 5ABC                       __ptext63 5A4E                       __ptext55 565C  
                     __ptext47 5A76                       __ptext39 5AD6                       __ptext64 4E5C  
                     __ptext56 56AC                       __ptext48 5386                       __ptext57 56FC  
                     __ptext49 3BA0                       __ptext66 5AEE                       __ptext58 5B06  
                     __ptext67 5A24                       __ptext59 5B12                    ambientCal@i 0016  
                     __ptext68 59A4                    ambientCal@v 0012                 turnRight_90@mL 001E  
               turnRight_90@mR 0020                   _SSP2CON1bits 000ED9                   _SSP2CON2bits 000EDA  
                turnLeft_90@mL 001E                  turnLeft_90@mR 0020                     strcpy@dest 0005  
        __end_of_turnRight_135 4428                      reverse@mL 0018                      reverse@mR 001A  
                     efgtoa@fp 0070                       efgtoa@ne 0077                       efgtoa@pp 007F  
                     efgtoa@ou 008A                  ??_turnLeft_90 0022                 _turning_time45 00FD  
                     isa$xinst 000000                     _RC4STAbits 000EE7                       int$flags 005B  
                     _whiteCal 4AE8                       _vfprintf 5514                       _turn_180 589C  
             ___aomod@dividend 0005                      whiteCal@i 0016                      whiteCal@v 0012  
                   _INTCONbits 000FF2              ??i2_isDataInTxBuf 0001                       memcpy@d1 0005  
                 _reverse_time 00FB                       memcpy@s1 0007                    _setMotorPWM 3EDC  
         __end_of_turnLeft_135 47E0                ??_isDataInTxBuf 0005                       intlevel2 0000  
                    sprintf@ap 00CC             colorDetect@string1 0100                    ??_sendTxBuf 0005  
              main@whiteRGBVal 0153                      strcpy@src 0007           __end_of_turnRight_90 4566  
                  efgtoa@nmode 0081                ___aomod@divisor 000D                    ??_vfpfcnvrt 0055  
              ___aomod@counter 0015               _color_click_init 5912            __end_of_turnLeft_90 46A4  
     __end_of_TxBufferedString 5976                       sprintf@f 00CE                       sprintf@s 00BC  
                   _SSP2DATPPS 000E1D                     _SSP2CLKPPS 000E1C                    ??_turnRight 0022  
                ___fladd@signs 0011                     _TX4STAbits 000EE8                   ___aodiv@sign 0016  
                 ___fladd@aexp 0012                   ___fladd@bexp 0013               ??_putCharToRxBuf 0001  
             ??_putCharToTxBuf 0005                   ___aomod@sign 0016                   ?_colorDetect 00D9  

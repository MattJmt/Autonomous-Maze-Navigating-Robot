

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Tue Dec 13 19:01:43 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=3
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=3
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=3
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=3
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=3
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=2
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=2
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=2
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=2
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=2
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=2
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=2
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=2
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=2
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=2
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    74                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    75                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    76                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    77                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    78   000000                     
    79                           ; Version 2.35
    80                           ; Generated 05/05/2021 GMT
    81                           ; 
    82                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    83                           ; All rights reserved.
    84                           ; 
    85                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    86                           ; 
    87                           ; Redistribution and use in source and binary forms, with or without modification, are
    88                           ; permitted provided that the following conditions are met:
    89                           ; 
    90                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    91                           ;        conditions and the following disclaimer.
    92                           ; 
    93                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    94                           ;        of conditions and the following disclaimer in the documentation and/or other
    95                           ;        materials provided with the distribution. Publication is not required when
    96                           ;        this file is used in an embedded application.
    97                           ; 
    98                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    99                           ;        software without specific prior written permission.
   100                           ; 
   101                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   102                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   103                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   104                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   105                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   106                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   107                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   108                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   109                           ; 
   110                           ; 
   111                           ; Code-generator required, PIC18F67K40 Definitions
   112                           ; 
   113                           ; SFR Addresses
   114   000000                     
   115                           	psect	idataBANK1
   116   0046CC                     __pidataBANK1:
   117                           	callstack 0
   118                           
   119                           ;initializer for _reverse_time
   120   0046CC  00C8               	dw	200
   121                           
   122                           ;initializer for _turning_time45
   123   0046CE  00C8               	dw	200
   124   000000                     _TX4REG	set	3812
   125   000000                     _RC4STAbits	set	3815
   126   000000                     _SP4BRGH	set	3814
   127   000000                     _TRISFbits	set	3974
   128   000000                     _LATFbits	set	3966
   129   000000                     _TRISDbits	set	3972
   130   000000                     _TRISGbits	set	3975
   131   000000                     _LATGbits	set	3967
   132   000000                     _LATEbits	set	3965
   133   000000                     _SSP2CON2bits	set	3802
   134   000000                     _RX4PPS	set	3605
   135   000000                     _SSP2CLKPPS	set	3612
   136   000000                     _SSP2DATPPS	set	3613
   137   000000                     _RC7PPS	set	3689
   138   000000                     _RE2PPS	set	3700
   139   000000                     _LATCbits	set	3963
   140   000000                     _LATDbits	set	3964
   141   000000                     _TRISAbits	set	3969
   142   000000                     _LATHbits	set	3968
   143   000000                     _TRISCbits	set	3971
   144   000000                     _TRISEbits	set	3973
   145   000000                     _PORTFbits	set	3982
   146   000000                     _TRISHbits	set	3976
   147   000000                     _T2PR	set	4028
   148   000000                     _T2CONbits	set	4029
   149   000000                     _CCPR2H	set	4006
   150   000000                     _CCPR1H	set	4010
   151   000000                     _RE4PPS	set	3702
   152   000000                     _RG6PPS	set	3720
   153   000000                     _RD5PPS	set	3695
   154   000000                     _ANSELDbits	set	3751
   155   000000                     _SSP2ADD	set	3798
   156   000000                     _SSP2CON1bits	set	3801
   157   000000                     _CCPR4H	set	3873
   158   000000                     _CCPR3H	set	3877
   159   000000                     _TMR0L	set	4051
   160   000000                     _TMR0H	set	4052
   161   000000                     _T0CON0bits	set	4053
   162   000000                     _T0CON1bits	set	4054
   163   000000                     _T2CLKCONbits	set	4031
   164   000000                     _T2HLTbits	set	4030
   165   000000                     _CCP1CONbits	set	4011
   166   000000                     _CCPTMRS0bits	set	4013
   167   000000                     _CCP2CONbits	set	4007
   168   000000                     _LATAbits	set	3961
   169   000000                     _CCP3CONbits	set	3878
   170   000000                     _CCP4CONbits	set	3874
   171   000000                     _RC4REG	set	3811
   172   000000                     _SP4BRGL	set	3813
   173   000000                     _TX4STAbits	set	3816
   174   000000                     _BAUD4CONbits	set	3817
   175   000000                     _SSP2CON2	set	3802
   176   000000                     _SSP2STAT	set	3800
   177   000000                     _ANSELFbits	set	3764
   178   000000                     _SSP2BUF	set	3797
   179   000000                     _IPR4bits	set	3619
   180   000000                     _PIE4bits	set	3629
   181   000000                     _RC0PPS	set	3682
   182   000000                     _RD6PPS	set	3696
   183   000000                     _INTCONbits	set	4082
   184   000000                     _PIR4bits	set	3639
   185                           
   186                           	psect	smallconst
   187   000E00                     __psmallconst:
   188                           	callstack 0
   189   000E00  00                 	db	0
   190   000E01  25                 	db	37
   191   000E02  64                 	db	100	;'d'
   192   000E03  2C                 	db	44
   193   000E04  25                 	db	37
   194   000E05  64                 	db	100	;'d'
   195   000E06  2C                 	db	44
   196   000E07  25                 	db	37
   197   000E08  64                 	db	100	;'d'
   198   000E09  2C                 	db	44
   199   000E0A  25                 	db	37
   200   000E0B  64                 	db	100	;'d'
   201   000E0C  20                 	db	32
   202   000E0D  0D                 	db	13
   203   000E0E  0A                 	db	10
   204   000E0F  00                 	db	0
   205   000E10                     STR_1:
   206   000E10  25                 	db	37
   207   000E11  64                 	db	100	;'d'
   208   000E12  20                 	db	32
   209   000E13  20                 	db	32
   210   000E14  25                 	db	37
   211   000E15  66                 	db	102	;'f'
   212   000E16  20                 	db	32
   213   000E17  20                 	db	32
   214   000E18  25                 	db	37
   215   000E19  66                 	db	102	;'f'
   216   000E1A  20                 	db	32
   217   000E1B  0D                 	db	13
   218   000E1C  00                 	db	0
   219   000E1D  00                 	db	0	; dummy byte at the end
   220   000000                     
   221                           ; #config settings
   222                           
   223                           	psect	cinit
   224   00416E                     __pcinit:
   225                           	callstack 0
   226   00416E                     start_initialization:
   227                           	callstack 0
   228   00416E                     __initialization:
   229                           	callstack 0
   230                           
   231                           ; Initialize objects allocated to BANK1 (4 bytes)
   232                           ; load TBLPTR registers with __pidataBANK1
   233   00416E  0ECC               	movlw	low __pidataBANK1
   234   004170  6EF6               	movwf	tblptrl,c
   235   004172  0E46               	movlw	high __pidataBANK1
   236   004174  6EF7               	movwf	tblptrh,c
   237   004176  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   238   004178  6EF8               	movwf	tblptru,c
   239   00417A  EE01  F0A6         	lfsr	0,__pdataBANK1
   240   00417E  EE10 F004          	lfsr	1,4
   241   004182                     copy_data0:
   242   004182  0009               	tblrd		*+
   243   004184  CFF5 FFEE          	movff	tablat,postinc0
   244   004188  50E5               	movf	postdec1,w,c
   245   00418A  50E1               	movf	fsr1l,w,c
   246   00418C  E1FA               	bnz	copy_data0
   247                           
   248                           ; Clear objects allocated to BANK1 (116 bytes)
   249   00418E  EE01  F000         	lfsr	0,__pbssBANK1
   250   004192  0E74               	movlw	116
   251   004194                     clear_0:
   252   004194  6AEE               	clrf	postinc0,c
   253   004196  06E8               	decf	wreg,f,c
   254   004198  E1FD               	bnz	clear_0
   255                           
   256                           ; Clear objects allocated to BANK0 (5 bytes)
   257   00419A  0100               	movlb	0
   258   00419C  6BD1               	clrf	(__pbssBANK0+4)& (0+255),b
   259   00419E  6BD0               	clrf	(__pbssBANK0+3)& (0+255),b
   260   0041A0  6BCF               	clrf	(__pbssBANK0+2)& (0+255),b
   261   0041A2  6BCE               	clrf	(__pbssBANK0+1)& (0+255),b
   262   0041A4  6BCD               	clrf	__pbssBANK0& (0+255),b
   263                           
   264                           ; Clear objects allocated to COMRAM (4 bytes)
   265   0041A6  6A5A               	clrf	(__pbssCOMRAM+3)& (0+255),c
   266   0041A8  6A59               	clrf	(__pbssCOMRAM+2)& (0+255),c
   267   0041AA  6A58               	clrf	(__pbssCOMRAM+1)& (0+255),c
   268   0041AC  6A57               	clrf	__pbssCOMRAM& (0+255),c
   269   0041AE                     end_of_initialization:
   270                           	callstack 0
   271   0041AE                     __end_of__initialization:
   272                           	callstack 0
   273   0041AE  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   274   0041B0  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   275   0041B2  0E00               	movlw	low (__Lsmallconst shr (0+16))
   276   0041B4  6EF8               	movwf	tblptru,c
   277   0041B6  0E0E               	movlw	high __Lsmallconst
   278   0041B8  6EF7               	movwf	tblptrh,c
   279   0041BA  0100               	movlb	0
   280   0041BC  EF93  F014         	goto	_main	;jump to C main() function
   281                           
   282                           	psect	bssCOMRAM
   283   000057                     __pbssCOMRAM:
   284                           	callstack 0
   285   000057                     _TxBufReadCnt:
   286                           	callstack 0
   287   000057                     	ds	1
   288   000058                     _TxBufWriteCnt:
   289                           	callstack 0
   290   000058                     	ds	1
   291   000059                     _RxBufReadCnt:
   292                           	callstack 0
   293   000059                     	ds	1
   294   00005A                     _RxBufWriteCnt:
   295                           	callstack 0
   296   00005A                     	ds	1
   297                           
   298                           	psect	bssBANK0
   299   0000CD                     __pbssBANK0:
   300                           	callstack 0
   301   0000CD                     _width:
   302                           	callstack 0
   303   0000CD                     	ds	2
   304   0000CF                     _prec:
   305                           	callstack 0
   306   0000CF                     	ds	2
   307   0000D1                     _flags:
   308                           	callstack 0
   309   0000D1                     	ds	1
   310                           
   311                           	psect	bssBANK1
   312   000100                     __pbssBANK1:
   313                           	callstack 0
   314   000100                     _EUSART4TXbuf:
   315                           	callstack 0
   316   000100                     	ds	60
   317   00013C                     _EUSART4RXbuf:
   318                           	callstack 0
   319   00013C                     	ds	20
   320   000150                     _off_period:
   321                           	callstack 0
   322   000150                     	ds	2
   323   000152                     _on_period:
   324                           	callstack 0
   325   000152                     	ds	2
   326   000154                     _dbuf:
   327                           	callstack 0
   328   000154                     	ds	32
   329                           
   330                           	psect	dataBANK1
   331   0001A6                     __pdataBANK1:
   332                           	callstack 0
   333   0001A6                     _reverse_time:
   334                           	callstack 0
   335   0001A6                     	ds	2
   336   0001A8                     _turning_time45:
   337                           	callstack 0
   338   0001A8                     	ds	2
   339                           
   340                           	psect	cstackBANK1
   341   000174                     __pcstackBANK1:
   342                           	callstack 0
   343   000174                     main@whiteC:
   344                           	callstack 0
   345                           
   346                           ; 4 bytes @ 0x0
   347   000174                     	ds	4
   348   000178                     main@clearRef:
   349                           	callstack 0
   350                           
   351                           ; 4 bytes @ 0x4
   352   000178                     	ds	4
   353   00017C                     main@RGBVal:
   354                           	callstack 0
   355                           
   356                           ; 8 bytes @ 0x8
   357   00017C                     	ds	8
   358   000184                     main@ambientRGBVal:
   359                           	callstack 0
   360                           
   361                           ; 8 bytes @ 0x10
   362   000184                     	ds	8
   363   00018C                     main@whiteRGBVal:
   364                           	callstack 0
   365                           
   366                           ; 8 bytes @ 0x18
   367   00018C                     	ds	8
   368   000194                     main@motorRight:
   369                           	callstack 0
   370                           
   371                           ; 9 bytes @ 0x20
   372   000194                     	ds	9
   373   00019D                     main@motorLeft:
   374                           	callstack 0
   375                           
   376                           ; 9 bytes @ 0x29
   377   00019D                     	ds	9
   378                           
   379                           	psect	cstackBANK0
   380   000060                     __pcstackBANK0:
   381                           	callstack 0
   382   000060                     ?_vfprintf:
   383                           	callstack 0
   384   000060                     vfprintf@fp:
   385                           	callstack 0
   386                           
   387                           ; 2 bytes @ 0x0
   388   000060                     	ds	2
   389   000062                     vfprintf@fmt:
   390                           	callstack 0
   391                           
   392                           ; 2 bytes @ 0x2
   393   000062                     	ds	2
   394   000064                     vfprintf@ap:
   395                           	callstack 0
   396                           
   397                           ; 2 bytes @ 0x4
   398   000064                     	ds	2
   399   000066                     ?_sprintf:
   400                           	callstack 0
   401   000066                     sprintf@s:
   402                           	callstack 0
   403                           
   404                           ; 2 bytes @ 0x6
   405   000066                     	ds	2
   406   000068                     sprintf@fmt:
   407                           	callstack 0
   408                           
   409                           ; 2 bytes @ 0x8
   410   000068                     	ds	14
   411   000076                     sprintf@ap:
   412                           	callstack 0
   413                           
   414                           ; 2 bytes @ 0x16
   415   000076                     	ds	2
   416   000078                     sprintf@f:
   417                           	callstack 0
   418                           
   419                           ; 11 bytes @ 0x18
   420   000078                     	ds	11
   421   000083                     colorDetect@clearRef:
   422                           	callstack 0
   423                           
   424                           ; 4 bytes @ 0x23
   425   000083                     	ds	4
   426   000087                     colorDetect@ambientRGBVal:
   427                           	callstack 0
   428                           
   429                           ; 2 bytes @ 0x27
   430   000087                     	ds	2
   431   000089                     colorDetect@whiteRGBVal:
   432                           	callstack 0
   433                           
   434                           ; 2 bytes @ 0x29
   435   000089                     	ds	2
   436   00008B                     colorDetect@mL:
   437                           	callstack 0
   438                           
   439                           ; 2 bytes @ 0x2B
   440   00008B                     	ds	2
   441   00008D                     colorDetect@mR:
   442                           	callstack 0
   443                           
   444                           ; 2 bytes @ 0x2D
   445   00008D                     	ds	2
   446   00008F                     ??_colorDetect:
   447                           
   448                           ; 1 bytes @ 0x2F
   449   00008F                     	ds	2
   450   000091                     colorDetect@testString:
   451                           	callstack 0
   452                           
   453                           ; 20 bytes @ 0x31
   454   000091                     	ds	20
   455   0000A5                     colorDetect@whiteR:
   456                           	callstack 0
   457                           
   458                           ; 4 bytes @ 0x45
   459   0000A5                     	ds	4
   460   0000A9                     colorDetect@whiteG:
   461                           	callstack 0
   462                           
   463                           ; 4 bytes @ 0x49
   464   0000A9                     	ds	4
   465   0000AD                     colorDetect@whiteB:
   466                           	callstack 0
   467                           
   468                           ; 4 bytes @ 0x4D
   469   0000AD                     	ds	4
   470   0000B1                     colorDetect@ambientR:
   471                           	callstack 0
   472                           
   473                           ; 2 bytes @ 0x51
   474   0000B1                     	ds	2
   475   0000B3                     colorDetect@ambientG:
   476                           	callstack 0
   477                           
   478                           ; 2 bytes @ 0x53
   479   0000B3                     	ds	2
   480   0000B5                     colorDetect@ambientB:
   481                           	callstack 0
   482                           
   483                           ; 2 bytes @ 0x55
   484   0000B5                     	ds	2
   485   0000B7                     colorDetect@RGBVal:
   486                           	callstack 0
   487                           
   488                           ; 8 bytes @ 0x57
   489   0000B7                     	ds	8
   490   0000BF                     colorDetect@redPrint:
   491                           	callstack 0
   492                           
   493                           ; 4 bytes @ 0x5F
   494   0000BF                     	ds	4
   495   0000C3                     colorDetect@greenPrint:
   496                           	callstack 0
   497                           
   498                           ; 4 bytes @ 0x63
   499   0000C3                     	ds	4
   500   0000C7                     colorDetect@bluePrint:
   501                           	callstack 0
   502                           
   503                           ; 4 bytes @ 0x67
   504   0000C7                     	ds	4
   505   0000CB                     ??_main:
   506                           
   507                           ; 1 bytes @ 0x6B
   508   0000CB                     	ds	2
   509                           
   510                           	psect	cstackCOMRAM
   511   000001                     __pcstackCOMRAM:
   512                           	callstack 0
   513   000001                     ??_getCharFromTxBuf:
   514   000001                     putCharToRxBuf@byte:
   515                           	callstack 0
   516   000001                     
   517                           ; 1 bytes @ 0x0
   518   000001                     	ds	2
   519   000003                     ??_HighISR:
   520                           
   521                           ; 1 bytes @ 0x2
   522   000003                     	ds	2
   523   000005                     ??_I2C_2_Master_Idle:
   524   000005                     ?___wmul:
   525                           	callstack 0
   526   000005                     ?___fladd:
   527                           	callstack 0
   528   000005                     ?___xxtofl:
   529                           	callstack 0
   530   000005                     ?___aodiv:
   531                           	callstack 0
   532   000005                     ?___aomod:
   533                           	callstack 0
   534   000005                     putCharToTxBuf@byte:
   535                           	callstack 0
   536   000005                     initDCmotorsPWM@PWMperiod:
   537                           	callstack 0
   538   000005                     DCmotorsInit@mL:
   539                           	callstack 0
   540   000005                     ___wmul@multiplier:
   541                           	callstack 0
   542   000005                     fputc@c:
   543                           	callstack 0
   544   000005                     ___fladd@b:
   545                           	callstack 0
   546   000005                     ___xxtofl@val:
   547                           	callstack 0
   548   000005                     ___aodiv@dividend:
   549                           	callstack 0
   550   000005                     ___aomod@dividend:
   551                           	callstack 0
   552                           
   553                           ; 8 bytes @ 0x4
   554   000005                     	ds	1
   555   000006                     ??_I2C_2_Master_Read:
   556   000006                     I2C_2_Master_Write@data_byte:
   557                           	callstack 0
   558   000006                     TxBufferedString@string:
   559                           	callstack 0
   560                           
   561                           ; 2 bytes @ 0x5
   562   000006                     	ds	1
   563   000007                     color_writetoaddr@value:
   564                           	callstack 0
   565   000007                     I2C_2_Master_Read@ack:
   566                           	callstack 0
   567   000007                     DCmotorsInit@mR:
   568                           	callstack 0
   569   000007                     ___wmul@multiplicand:
   570                           	callstack 0
   571   000007                     fputc@fp:
   572                           	callstack 0
   573                           
   574                           ; 2 bytes @ 0x6
   575   000007                     	ds	1
   576   000008                     color_writetoaddr@address:
   577                           	callstack 0
   578   000008                     I2C_2_Master_Read@tmp:
   579                           	callstack 0
   580                           
   581                           ; 1 bytes @ 0x7
   582   000008                     	ds	1
   583   000009                     ??_fputc:
   584   000009                     ??_color_click_init:
   585   000009                     ??___xxtofl:
   586   000009                     ?_color_read_Red:
   587                           	callstack 0
   588   000009                     ?_color_read_Green:
   589                           	callstack 0
   590   000009                     ?_color_read_Blue:
   591                           	callstack 0
   592   000009                     ?_color_read_Clear:
   593                           	callstack 0
   594   000009                     ___wmul@product:
   595                           	callstack 0
   596   000009                     ___fladd@a:
   597                           	callstack 0
   598                           
   599                           ; 4 bytes @ 0x8
   600   000009                     	ds	2
   601   00000B                     ??_color_read_Red:
   602   00000B                     ??_color_read_Green:
   603   00000B                     ??_color_read_Blue:
   604   00000B                     ??_color_read_Clear:
   605   00000B                     ?___lwdiv:
   606                           	callstack 0
   607   00000B                     ___lwdiv@dividend:
   608                           	callstack 0
   609                           
   610                           ; 2 bytes @ 0xA
   611   00000B                     	ds	2
   612   00000D                     ??___fladd:
   613   00000D                     ___xxtofl@sign:
   614                           	callstack 0
   615   00000D                     ___lwdiv@divisor:
   616                           	callstack 0
   617   00000D                     ___aodiv@divisor:
   618                           	callstack 0
   619   00000D                     ___aomod@divisor:
   620                           	callstack 0
   621                           
   622                           ; 8 bytes @ 0xC
   623   00000D                     	ds	1
   624   00000E                     ___xxtofl@exp:
   625                           	callstack 0
   626   00000E                     color_read_Red@tmp:
   627                           	callstack 0
   628   00000E                     color_read_Green@tmp:
   629                           	callstack 0
   630   00000E                     color_read_Blue@tmp:
   631                           	callstack 0
   632   00000E                     color_read_Clear@tmp:
   633                           	callstack 0
   634   00000E                     fputs@s:
   635                           	callstack 0
   636                           
   637                           ; 2 bytes @ 0xD
   638   00000E                     	ds	1
   639   00000F                     ___lwdiv@counter:
   640                           	callstack 0
   641   00000F                     ___xxtofl@arg:
   642                           	callstack 0
   643                           
   644                           ; 4 bytes @ 0xE
   645   00000F                     	ds	1
   646   000010                     getColor@v:
   647                           	callstack 0
   648   000010                     ___lwdiv@quotient:
   649                           	callstack 0
   650   000010                     fputs@fp:
   651                           	callstack 0
   652                           
   653                           ; 2 bytes @ 0xF
   654   000010                     	ds	1
   655   000011                     ___fladd@signs:
   656                           	callstack 0
   657                           
   658                           ; 1 bytes @ 0x10
   659   000011                     	ds	1
   660   000012                     ___fladd@aexp:
   661                           	callstack 0
   662   000012                     fputs@c:
   663                           	callstack 0
   664   000012                     ambientCal@v:
   665                           	callstack 0
   666   000012                     whiteCal@v:
   667                           	callstack 0
   668   000012                     setMotorPWM@m:
   669                           	callstack 0
   670                           
   671                           ; 2 bytes @ 0x11
   672   000012                     	ds	1
   673   000013                     ___fladd@bexp:
   674                           	callstack 0
   675   000013                     fputs@i:
   676                           	callstack 0
   677                           
   678                           ; 2 bytes @ 0x12
   679   000013                     	ds	1
   680   000014                     ??_ambientCal:
   681   000014                     ??_whiteCal:
   682   000014                     ??_setMotorPWM:
   683   000014                     ___fladd@grs:
   684                           	callstack 0
   685                           
   686                           ; 1 bytes @ 0x13
   687   000014                     	ds	1
   688   000015                     ?___flsub:
   689                           	callstack 0
   690   000015                     ___aodiv@counter:
   691                           	callstack 0
   692   000015                     ___aomod@counter:
   693                           	callstack 0
   694   000015                     pad@fp:
   695                           	callstack 0
   696   000015                     ___flsub@b:
   697                           	callstack 0
   698                           
   699                           ; 4 bytes @ 0x14
   700   000015                     	ds	1
   701   000016                     setMotorPWM@posDuty:
   702                           	callstack 0
   703   000016                     ___aodiv@sign:
   704                           	callstack 0
   705   000016                     ___aomod@sign:
   706                           	callstack 0
   707   000016                     ambientCal@i:
   708                           	callstack 0
   709   000016                     whiteCal@i:
   710                           	callstack 0
   711                           
   712                           ; 2 bytes @ 0x15
   713   000016                     	ds	1
   714   000017                     ?_abs:
   715                           	callstack 0
   716   000017                     setMotorPWM@negDuty:
   717                           	callstack 0
   718   000017                     pad@buf:
   719                           	callstack 0
   720   000017                     abs@a:
   721                           	callstack 0
   722   000017                     ___aodiv@quotient:
   723                           	callstack 0
   724                           
   725                           ; 8 bytes @ 0x16
   726   000017                     	ds	1
   727   000018                     stop@mL:
   728                           	callstack 0
   729   000018                     reverse@mL:
   730                           	callstack 0
   731                           
   732                           ; 2 bytes @ 0x17
   733   000018                     	ds	1
   734   000019                     ??_abs:
   735   000019                     pad@p:
   736                           	callstack 0
   737   000019                     ___flsub@a:
   738                           	callstack 0
   739                           
   740                           ; 4 bytes @ 0x18
   741   000019                     	ds	1
   742   00001A                     stop@mR:
   743                           	callstack 0
   744   00001A                     reverse@mR:
   745                           	callstack 0
   746                           
   747                           ; 2 bytes @ 0x19
   748   00001A                     	ds	1
   749   00001B                     ??_pad:
   750                           
   751                           ; 1 bytes @ 0x1A
   752   00001B                     	ds	1
   753   00001C                     ??_stop:
   754   00001C                     pad@i:
   755                           	callstack 0
   756                           
   757                           ; 2 bytes @ 0x1B
   758   00001C                     	ds	1
   759   00001D                     ?___flmul:
   760                           	callstack 0
   761   00001D                     ___flge@ff1:
   762                           	callstack 0
   763   00001D                     ___flmul@b:
   764                           	callstack 0
   765                           
   766                           ; 4 bytes @ 0x1C
   767   00001D                     	ds	1
   768   00001E                     turnLeft_90@mL:
   769                           	callstack 0
   770   00001E                     turnRight_90@mL:
   771                           	callstack 0
   772   00001E                     turn_180@mL:
   773                           	callstack 0
   774   00001E                     turnRight_135@mL:
   775                           	callstack 0
   776   00001E                     turnLeft_135@mL:
   777                           	callstack 0
   778   00001E                     pad@w:
   779                           	callstack 0
   780                           
   781                           ; 2 bytes @ 0x1D
   782   00001E                     	ds	2
   783   000020                     turnLeft_90@mR:
   784                           	callstack 0
   785   000020                     turnRight_90@mR:
   786                           	callstack 0
   787   000020                     turn_180@mR:
   788                           	callstack 0
   789   000020                     turnRight_135@mR:
   790                           	callstack 0
   791   000020                     turnLeft_135@mR:
   792                           	callstack 0
   793   000020                     dtoa@fp:
   794                           	callstack 0
   795                           
   796                           ; 2 bytes @ 0x1F
   797   000020                     	ds	1
   798   000021                     ___flge@ff2:
   799                           	callstack 0
   800   000021                     ___flmul@a:
   801                           	callstack 0
   802                           
   803                           ; 4 bytes @ 0x20
   804   000021                     	ds	1
   805   000022                     ??_turnRight_90:
   806   000022                     ??_turnRight_135:
   807   000022                     ??_turn_180:
   808   000022                     ??_turnLeft_90:
   809   000022                     ??_turnLeft_135:
   810   000022                     dtoa@d:
   811                           	callstack 0
   812                           
   813                           ; 8 bytes @ 0x21
   814   000022                     	ds	2
   815   000024                     reverseSquareRight@mL:
   816                           	callstack 0
   817   000024                     reverseSquareLeft@mL:
   818                           	callstack 0
   819                           
   820                           ; 2 bytes @ 0x23
   821   000024                     	ds	1
   822   000025                     ??___flmul:
   823   000025                     ??___flge:
   824                           
   825                           ; 1 bytes @ 0x24
   826   000025                     	ds	1
   827   000026                     reverseSquareRight@mR:
   828                           	callstack 0
   829   000026                     reverseSquareLeft@mR:
   830                           	callstack 0
   831                           
   832                           ; 2 bytes @ 0x25
   833   000026                     	ds	2
   834   000028                     ??_reverseSquareRight:
   835   000028                     ??_reverseSquareLeft:
   836                           
   837                           ; 1 bytes @ 0x27
   838   000028                     	ds	1
   839   000029                     ___flmul@sign:
   840                           	callstack 0
   841                           
   842                           ; 1 bytes @ 0x28
   843   000029                     	ds	1
   844   00002A                     ??_dtoa:
   845   00002A                     ___flmul@aexp:
   846                           	callstack 0
   847                           
   848                           ; 1 bytes @ 0x29
   849   00002A                     	ds	1
   850   00002B                     ___flmul@grs:
   851                           	callstack 0
   852                           
   853                           ; 4 bytes @ 0x2A
   854   00002B                     	ds	4
   855   00002F                     ___flmul@bexp:
   856                           	callstack 0
   857                           
   858                           ; 1 bytes @ 0x2E
   859   00002F                     	ds	1
   860   000030                     ___flmul@prod:
   861                           	callstack 0
   862                           
   863                           ; 4 bytes @ 0x2F
   864   000030                     	ds	2
   865   000032                     _dtoa$2676:
   866                           	callstack 0
   867                           
   868                           ; 2 bytes @ 0x31
   869   000032                     	ds	2
   870   000034                     ___flmul@temp:
   871                           	callstack 0
   872   000034                     dtoa@p:
   873                           	callstack 0
   874                           
   875                           ; 2 bytes @ 0x33
   876   000034                     	ds	2
   877   000036                     ?___fldiv:
   878                           	callstack 0
   879   000036                     dtoa@w:
   880                           	callstack 0
   881   000036                     ___fldiv@b:
   882                           	callstack 0
   883                           
   884                           ; 4 bytes @ 0x35
   885   000036                     	ds	2
   886   000038                     dtoa@n:
   887                           	callstack 0
   888                           
   889                           ; 8 bytes @ 0x37
   890   000038                     	ds	2
   891   00003A                     ___fldiv@a:
   892                           	callstack 0
   893                           
   894                           ; 4 bytes @ 0x39
   895   00003A                     	ds	4
   896   00003E                     ??___fldiv:
   897                           
   898                           ; 1 bytes @ 0x3D
   899   00003E                     	ds	2
   900   000040                     dtoa@s:
   901                           	callstack 0
   902                           
   903                           ; 1 bytes @ 0x3F
   904   000040                     	ds	1
   905   000041                     dtoa@i:
   906                           	callstack 0
   907                           
   908                           ; 2 bytes @ 0x40
   909   000041                     	ds	1
   910   000042                     ___fldiv@rem:
   911                           	callstack 0
   912                           
   913                           ; 4 bytes @ 0x41
   914   000042                     	ds	1
   915   000043                     vfpfcnvrt@fp:
   916                           	callstack 0
   917                           
   918                           ; 2 bytes @ 0x42
   919   000043                     	ds	2
   920   000045                     vfpfcnvrt@fmt:
   921                           	callstack 0
   922                           
   923                           ; 2 bytes @ 0x44
   924   000045                     	ds	1
   925   000046                     ___fldiv@sign:
   926                           	callstack 0
   927                           
   928                           ; 1 bytes @ 0x45
   929   000046                     	ds	1
   930   000047                     ___fldiv@new_exp:
   931                           	callstack 0
   932   000047                     vfpfcnvrt@ap:
   933                           	callstack 0
   934                           
   935                           ; 2 bytes @ 0x46
   936   000047                     	ds	2
   937   000049                     ??_vfpfcnvrt:
   938   000049                     ___fldiv@grs:
   939                           	callstack 0
   940                           
   941                           ; 4 bytes @ 0x48
   942   000049                     	ds	2
   943   00004B                     vfpfcnvrt@convarg:
   944                           	callstack 0
   945                           
   946                           ; 8 bytes @ 0x4A
   947   00004B                     	ds	2
   948   00004D                     ___fldiv@bexp:
   949                           	callstack 0
   950                           
   951                           ; 1 bytes @ 0x4C
   952   00004D                     	ds	1
   953   00004E                     ___fldiv@aexp:
   954                           	callstack 0
   955                           
   956                           ; 1 bytes @ 0x4D
   957   00004E                     	ds	5
   958   000053                     vfpfcnvrt@cp:
   959                           	callstack 0
   960                           
   961                           ; 2 bytes @ 0x52
   962   000053                     	ds	2
   963   000055                     vfprintf@cfmt:
   964                           	callstack 0
   965                           
   966                           ; 2 bytes @ 0x54
   967   000055                     	ds	2
   968   000057                     
   969                           ; 1 bytes @ 0x56
   970 ;;
   971 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   972 ;;
   973 ;; *************** function _main *****************
   974 ;; Defined at:
   975 ;;		line 24 in file "MazeRobot.X/main.c"
   976 ;; Parameters:    Size  Location     Type
   977 ;;		None
   978 ;; Auto vars:     Size  Location     Type
   979 ;;  string5        20    0        unsigned char [20]
   980 ;;  string4        20    0        unsigned char [20]
   981 ;;  string3        20    0        unsigned char [20]
   982 ;;  string2        20    0        unsigned char [20]
   983 ;;  string1        20    0        unsigned char [20]
   984 ;;  testString     20    0        unsigned char [20]
   985 ;;  motorLeft       9   41[BANK1 ] struct DC_motor
   986 ;;  motorRight      9   32[BANK1 ] struct DC_motor
   987 ;;  whiteRGBVal     8   24[BANK1 ] struct RGB
   988 ;;  ambientRGBVa    8   16[BANK1 ] struct RGB
   989 ;;  RGBVal          8    8[BANK1 ] struct RGB
   990 ;;  clearRef        4    4[BANK1 ] struct RGB
   991 ;;  whiteC          4    0[BANK1 ] struct RGB
   992 ;; Return value:  Size  Location     Type
   993 ;;                  1    wreg      void 
   994 ;; Registers used:
   995 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   996 ;; Tracked objects:
   997 ;;		On entry : 0/0
   998 ;;		On exit  : 0/0
   999 ;;		Unchanged: 0/0
  1000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1002 ;;      Locals:         0       0      50       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1003 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1004 ;;      Totals:         0       2      50       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1005 ;;Total ram usage:       52 bytes
  1006 ;; Hardware stack levels required when called: 11
  1007 ;; This function calls:
  1008 ;;		_DCmotorsInit
  1009 ;;		___fldiv
  1010 ;;		___flge
  1011 ;;		___xxtofl
  1012 ;;		_ambientCal
  1013 ;;		_colorDetect
  1014 ;;		_color_click_init
  1015 ;;		_getColor
  1016 ;;		_initDCmotorsPWM
  1017 ;;		_initUSART4
  1018 ;;		_stop
  1019 ;;		_whiteCal
  1020 ;; This function is called by:
  1021 ;;		Startup code after reset
  1022 ;; This function uses a non-reentrant model
  1023 ;;
  1024                           
  1025                           	psect	text0
  1026   002926                     __ptext0:
  1027                           	callstack 0
  1028   002926                     _main:
  1029                           	callstack 20
  1030   002926                     
  1031                           ;MazeRobot.X/main.c: 26:     color_click_init();
  1032   002926  EC57  F022         	call	_color_click_init	;wreg free
  1033   00292A                     
  1034                           ;MazeRobot.X/main.c: 27:     initUSART4();
  1035   00292A  EC89  F022         	call	_initUSART4	;wreg free
  1036   00292E                     
  1037                           ;MazeRobot.X/main.c: 28:     initDCmotorsPWM(199);
  1038   00292E  0E00               	movlw	0
  1039   002930  6E06               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
  1040   002932  0EC7               	movlw	199
  1041   002934  6E05               	movwf	initDCmotorsPWM@PWMperiod^0,c
  1042   002936  EC47  F01F         	call	_initDCmotorsPWM	;wreg free
  1043   00293A                     
  1044                           ;MazeRobot.X/main.c: 35:     LATDbits.LATD7=0;
  1045   00293A  9E7C               	bcf	124,7,c	;volatile
  1046   00293C                     
  1047                           ;MazeRobot.X/main.c: 36:     TRISDbits.TRISD7=0;
  1048   00293C  9E84               	bcf	132,7,c	;volatile
  1049   00293E                     
  1050                           ;MazeRobot.X/main.c: 38:     LATHbits.LATH3=0;
  1051   00293E  9680               	bcf	128,3,c	;volatile
  1052   002940                     
  1053                           ;MazeRobot.X/main.c: 39:     TRISHbits.TRISH3=0;
  1054   002940  9688               	bcf	136,3,c	;volatile
  1055   002942                     
  1056                           ;MazeRobot.X/main.c: 41:     LATDbits.LATD4 = 0;
  1057   002942  987C               	bcf	124,4,c	;volatile
  1058   002944                     
  1059                           ;MazeRobot.X/main.c: 42:     TRISDbits.TRISD4 = 0;
  1060   002944  9884               	bcf	132,4,c	;volatile
  1061   002946                     
  1062                           ;MazeRobot.X/main.c: 44:     LATHbits.LATH0 = 0;
  1063   002946  9080               	bcf	128,0,c	;volatile
  1064   002948                     
  1065                           ;MazeRobot.X/main.c: 45:     TRISHbits.TRISH0 = 0;
  1066   002948  9088               	bcf	136,0,c	;volatile
  1067   00294A                     
  1068                           ;MazeRobot.X/main.c: 47:     LATFbits.LATF0 = 0;
  1069   00294A  907E               	bcf	126,0,c	;volatile
  1070   00294C                     
  1071                           ;MazeRobot.X/main.c: 48:     TRISFbits.TRISF0 = 0;
  1072   00294C  9086               	bcf	134,0,c	;volatile
  1073   00294E                     
  1074                           ;MazeRobot.X/main.c: 50:     LATHbits.LATH1 = 0;
  1075   00294E  9280               	bcf	128,1,c	;volatile
  1076   002950                     
  1077                           ;MazeRobot.X/main.c: 51:     TRISHbits.TRISH1 = 0;
  1078   002950  9288               	bcf	136,1,c	;volatile
  1079   002952                     
  1080                           ;MazeRobot.X/main.c: 53:     LATDbits.LATD3 = 0;
  1081   002952  967C               	bcf	124,3,c	;volatile
  1082   002954                     
  1083                           ;MazeRobot.X/main.c: 54:     TRISDbits.TRISD3 = 0;
  1084   002954  9684               	bcf	132,3,c	;volatile
  1085   002956                     
  1086                           ;MazeRobot.X/main.c: 57:     LATDbits.LATD4 = 1;
  1087   002956  887C               	bsf	124,4,c	;volatile
  1088   002958                     
  1089                           ;MazeRobot.X/main.c: 58:     LATFbits.LATF0 = 1;
  1090   002958  807E               	bsf	126,0,c	;volatile
  1091   00295A                     
  1092                           ;MazeRobot.X/main.c: 59:     LATHbits.LATH0 = 1;
  1093   00295A  8080               	bsf	128,0,c	;volatile
  1094   00295C                     
  1095                           ;MazeRobot.X/main.c: 60:     LATFbits.LATF0 = 1;
  1096   00295C  807E               	bsf	126,0,c	;volatile
  1097   00295E                     
  1098                           ;MazeRobot.X/main.c: 61:     LATDbits.LATD3 = 1;
  1099   00295E  867C               	bsf	124,3,c	;volatile
  1100   002960                     
  1101                           ;MazeRobot.X/main.c: 66:     LATGbits.LATG0=1;
  1102   002960  807F               	bsf	127,0,c	;volatile
  1103   002962                     
  1104                           ;MazeRobot.X/main.c: 67:     LATEbits.LATE7=1;
  1105   002962  8E7D               	bsf	125,7,c	;volatile
  1106   002964                     
  1107                           ;MazeRobot.X/main.c: 68:     LATAbits.LATA3=1;
  1108   002964  8679               	bsf	121,3,c	;volatile
  1109   002966                     
  1110                           ;MazeRobot.X/main.c: 70:     TRISGbits.TRISG0=0;
  1111   002966  9087               	bcf	135,0,c	;volatile
  1112   002968                     
  1113                           ;MazeRobot.X/main.c: 71:     TRISEbits.TRISE7=0;
  1114   002968  9E85               	bcf	133,7,c	;volatile
  1115   00296A                     
  1116                           ;MazeRobot.X/main.c: 72:     TRISAbits.TRISA3=0;
  1117   00296A  9681               	bcf	129,3,c	;volatile
  1118   00296C                     
  1119                           ;MazeRobot.X/main.c: 75:     TRISFbits.TRISF2=1;
  1120   00296C  8486               	bsf	134,2,c	;volatile
  1121   00296E                     
  1122                           ;MazeRobot.X/main.c: 76:     ANSELFbits.ANSELF2=0;
  1123   00296E  010E               	movlb	14	; () banked
  1124   002970  95B4               	bcf	180,2,b	;volatile
  1125   002972                     
  1126                           ; BSR set to: 14
  1127                           ;MazeRobot.X/main.c: 78:     TRISFbits.TRISF3=1;
  1128   002972  8686               	bsf	134,3,c	;volatile
  1129   002974                     
  1130                           ; BSR set to: 14
  1131                           ;MazeRobot.X/main.c: 79:     ANSELFbits.ANSELF3=0;
  1132   002974  97B4               	bcf	180,3,b	;volatile
  1133   002976                     
  1134                           ; BSR set to: 14
  1135                           ;MazeRobot.X/main.c: 95:     DC_motor motorLeft,motorRight;;MazeRobot.X/main.c: 96:     
      +                          DCmotorsInit(&motorLeft,&motorRight);
  1136   002976  0E9D               	movlw	low main@motorLeft
  1137   002978  6E05               	movwf	DCmotorsInit@mL^0,c
  1138   00297A  0E01               	movlw	high main@motorLeft
  1139   00297C  6E06               	movwf	(DCmotorsInit@mL+1)^0,c
  1140   00297E  0E94               	movlw	low main@motorRight
  1141   002980  6E07               	movwf	DCmotorsInit@mR^0,c
  1142   002982  0E01               	movlw	high main@motorRight
  1143   002984  6E08               	movwf	(DCmotorsInit@mR+1)^0,c
  1144   002986  EC22  F01E         	call	_DCmotorsInit	;wreg free
  1145   00298A                     l6016:
  1146                           
  1147                           ;MazeRobot.X/main.c: 117:         getColor(&RGBVal);
  1148   00298A  0E7C               	movlw	low main@RGBVal
  1149   00298C  6E10               	movwf	getColor@v^0,c
  1150   00298E  0E01               	movlw	high main@RGBVal
  1151   002990  6E11               	movwf	(getColor@v+1)^0,c
  1152   002992  EC88  F020         	call	_getColor	;wreg free
  1153   002996                     
  1154                           ;MazeRobot.X/main.c: 120:         if (!PORTFbits.RF2){
  1155   002996  B48E               	btfsc	142,2,c	;volatile
  1156   002998  EFD0  F014         	goto	u6891
  1157   00299C  EFD2  F014         	goto	u6890
  1158   0029A0                     u6891:
  1159   0029A0  EFD8  F014         	goto	l6022
  1160   0029A4                     u6890:
  1161   0029A4                     
  1162                           ;MazeRobot.X/main.c: 121:             ambientCal (&ambientRGBVal);
  1163   0029A4  0E84               	movlw	low main@ambientRGBVal
  1164   0029A6  6E12               	movwf	ambientCal@v^0,c
  1165   0029A8  0E01               	movlw	high main@ambientRGBVal
  1166   0029AA  6E13               	movwf	(ambientCal@v+1)^0,c
  1167   0029AC  EC45  F01D         	call	_ambientCal	;wreg free
  1168   0029B0                     l6022:
  1169                           
  1170                           ;MazeRobot.X/main.c: 124:         if (!PORTFbits.RF3){
  1171   0029B0  B68E               	btfsc	142,3,c	;volatile
  1172   0029B2  EFDD  F014         	goto	u6901
  1173   0029B6  EFDF  F014         	goto	u6900
  1174   0029BA                     u6901:
  1175   0029BA  EFE5  F014         	goto	l6026
  1176   0029BE                     u6900:
  1177   0029BE                     
  1178                           ;MazeRobot.X/main.c: 125:             whiteCal (&whiteRGBVal);
  1179   0029BE  0E8C               	movlw	low main@whiteRGBVal
  1180   0029C0  6E12               	movwf	whiteCal@v^0,c
  1181   0029C2  0E01               	movlw	high main@whiteRGBVal
  1182   0029C4  6E13               	movwf	(whiteCal@v+1)^0,c
  1183   0029C6  ECD3  F01C         	call	_whiteCal	;wreg free
  1184   0029CA                     l6026:
  1185                           
  1186                           ;MazeRobot.X/main.c: 129:         LATHbits.LATH3=!LATHbits.LATH3;
  1187   0029CA  A680               	btfss	128,3,c	;volatile
  1188   0029CC  EFEA  F014         	goto	u6911
  1189   0029D0  EFEF  F014         	goto	u6910
  1190   0029D4                     u6911:
  1191   0029D4  0100               	movlb	0	; () banked
  1192   0029D6  6BCB               	clrf	??_main& (0+255),b
  1193   0029D8  2BCB               	incf	??_main& (0+255),f,b
  1194   0029DA  EFF1  F014         	goto	u6928
  1195   0029DE                     u6910:
  1196   0029DE  0100               	movlb	0	; () banked
  1197   0029E0  6BCB               	clrf	??_main& (0+255),b
  1198   0029E2                     u6928:
  1199   0029E2  47CB               	rlncf	??_main& (0+255),f,b
  1200   0029E4  47CB               	rlncf	??_main& (0+255),f,b
  1201   0029E6  47CB               	rlncf	??_main& (0+255),f,b
  1202   0029E8  5080               	movf	128,w,c	;volatile
  1203   0029EA  19CB               	xorwf	??_main& (0+255),w,b
  1204   0029EC  0BF7               	andlw	-9
  1205   0029EE  19CB               	xorwf	??_main& (0+255),w,b
  1206   0029F0  6E80               	movwf	128,c	;volatile
  1207   0029F2                     
  1208                           ; BSR set to: 0
  1209                           ;MazeRobot.X/main.c: 132:         whiteC = whiteRGBVal.C;
  1210   0029F2  C192  F005         	movff	main@whiteRGBVal+6,___xxtofl@val
  1211   0029F6  C193  F006         	movff	main@whiteRGBVal+7,___xxtofl@val+1
  1212   0029FA  6A07               	clrf	(___xxtofl@val+2)^0,c
  1213   0029FC  6A08               	clrf	(___xxtofl@val+3)^0,c
  1214   0029FE  0E00               	movlw	0
  1215   002A00  EC8A  F015         	call	___xxtofl
  1216   002A04  C005  F174         	movff	?___xxtofl,main@whiteC
  1217   002A08  C006  F175         	movff	?___xxtofl+1,main@whiteC+1
  1218   002A0C  C007  F176         	movff	?___xxtofl+2,main@whiteC+2
  1219   002A10  C008  F177         	movff	?___xxtofl+3,main@whiteC+3
  1220   002A14                     
  1221                           ;MazeRobot.X/main.c: 133:         clearRef = RGBVal.C/whiteC;
  1222   002A14  C182  F005         	movff	main@RGBVal+6,___xxtofl@val
  1223   002A18  C183  F006         	movff	main@RGBVal+7,___xxtofl@val+1
  1224   002A1C  6A07               	clrf	(___xxtofl@val+2)^0,c
  1225   002A1E  6A08               	clrf	(___xxtofl@val+3)^0,c
  1226   002A20  0E00               	movlw	0
  1227   002A22  EC8A  F015         	call	___xxtofl
  1228   002A26  C005  F036         	movff	?___xxtofl,___fldiv@b
  1229   002A2A  C006  F037         	movff	?___xxtofl+1,___fldiv@b+1
  1230   002A2E  C007  F038         	movff	?___xxtofl+2,___fldiv@b+2
  1231   002A32  C008  F039         	movff	?___xxtofl+3,___fldiv@b+3
  1232   002A36  C174  F03A         	movff	main@whiteC,___fldiv@a
  1233   002A3A  C175  F03B         	movff	main@whiteC+1,___fldiv@a+1
  1234   002A3E  C176  F03C         	movff	main@whiteC+2,___fldiv@a+2
  1235   002A42  C177  F03D         	movff	main@whiteC+3,___fldiv@a+3
  1236   002A46  EC87  F011         	call	___fldiv	;wreg free
  1237   002A4A  C036  F178         	movff	?___fldiv,main@clearRef
  1238   002A4E  C037  F179         	movff	?___fldiv+1,main@clearRef+1
  1239   002A52  C038  F17A         	movff	?___fldiv+2,main@clearRef+2
  1240   002A56  C039  F17B         	movff	?___fldiv+3,main@clearRef+3
  1241   002A5A                     
  1242                           ;MazeRobot.X/main.c: 135:         if (clearRef > 0.12){
  1243   002A5A  0E8F               	movlw	143
  1244   002A5C  6E1D               	movwf	___flge@ff1^0,c
  1245   002A5E  0EC2               	movlw	194
  1246   002A60  6E1E               	movwf	(___flge@ff1+1)^0,c
  1247   002A62  0EF5               	movlw	245
  1248   002A64  6E1F               	movwf	(___flge@ff1+2)^0,c
  1249   002A66  0E3D               	movlw	61
  1250   002A68  6E20               	movwf	(___flge@ff1+3)^0,c
  1251   002A6A  C178  F021         	movff	main@clearRef,___flge@ff2
  1252   002A6E  C179  F022         	movff	main@clearRef+1,___flge@ff2+1
  1253   002A72  C17A  F023         	movff	main@clearRef+2,___flge@ff2+2
  1254   002A76  C17B  F024         	movff	main@clearRef+3,___flge@ff2+3
  1255   002A7A  EC51  F01C         	call	___flge	;wreg free
  1256   002A7E  B0D8               	btfsc	status,0,c
  1257   002A80  EF44  F015         	goto	u6931
  1258   002A84  EF46  F015         	goto	u6930
  1259   002A88                     u6931:
  1260   002A88  EF6F  F015         	goto	l6038
  1261   002A8C                     u6930:
  1262   002A8C                     
  1263                           ;MazeRobot.X/main.c: 136:             colorDetect (clearRef,&ambientRGBVal,&whiteRGBVal,
      +                          &motorLeft,&motorRight);
  1264   002A8C  C178  F083         	movff	main@clearRef,colorDetect@clearRef
  1265   002A90  C179  F084         	movff	main@clearRef+1,colorDetect@clearRef+1
  1266   002A94  C17A  F085         	movff	main@clearRef+2,colorDetect@clearRef+2
  1267   002A98  C17B  F086         	movff	main@clearRef+3,colorDetect@clearRef+3
  1268   002A9C  0E84               	movlw	low main@ambientRGBVal
  1269   002A9E  0100               	movlb	0	; () banked
  1270   002AA0  6F87               	movwf	colorDetect@ambientRGBVal& (0+255),b
  1271   002AA2  0E01               	movlw	high main@ambientRGBVal
  1272   002AA4  6F88               	movwf	(colorDetect@ambientRGBVal+1)& (0+255),b
  1273   002AA6  0E8C               	movlw	low main@whiteRGBVal
  1274   002AA8  6F89               	movwf	colorDetect@whiteRGBVal& (0+255),b
  1275   002AAA  0E01               	movlw	high main@whiteRGBVal
  1276   002AAC  6F8A               	movwf	(colorDetect@whiteRGBVal+1)& (0+255),b
  1277   002AAE  0E9D               	movlw	low main@motorLeft
  1278   002AB0  6F8B               	movwf	colorDetect@mL& (0+255),b
  1279   002AB2  0E01               	movlw	high main@motorLeft
  1280   002AB4  6F8C               	movwf	(colorDetect@mL+1)& (0+255),b
  1281   002AB6  0E94               	movlw	low main@motorRight
  1282   002AB8  6F8D               	movwf	colorDetect@mR& (0+255),b
  1283   002ABA  0E01               	movlw	high main@motorRight
  1284   002ABC  6F8E               	movwf	(colorDetect@mR+1)& (0+255),b
  1285   002ABE  EC0F  F007         	call	_colorDetect	;wreg free
  1286   002AC2                     
  1287                           ;MazeRobot.X/main.c: 138:             _delay((unsigned long)((500)*(64000000/4000.0)));
  1288   002AC2  0E29               	movlw	41
  1289   002AC4  0100               	movlb	0	; () banked
  1290   002AC6  6FCC               	movwf	(??_main+1)& (0+255),b
  1291   002AC8  0E96               	movlw	150
  1292   002ACA  6FCB               	movwf	??_main& (0+255),b
  1293   002ACC  0E7F               	movlw	127
  1294   002ACE                     u7017:
  1295   002ACE  2EE8               	decfsz	wreg,f,c
  1296   002AD0  D7FE               	bra	u7017
  1297   002AD2  2FCB               	decfsz	??_main& (0+255),f,b
  1298   002AD4  D7FC               	bra	u7017
  1299   002AD6  2FCC               	decfsz	(??_main+1)& (0+255),f,b
  1300   002AD8  D7FA               	bra	u7017
  1301                           
  1302                           ;MazeRobot.X/main.c: 139:         }
  1303   002ADA  EF79  F015         	goto	l6040
  1304   002ADE                     l6038:
  1305   002ADE  0E9D               	movlw	low main@motorLeft
  1306   002AE0  6E18               	movwf	stop@mL^0,c
  1307   002AE2  0E01               	movlw	high main@motorLeft
  1308   002AE4  6E19               	movwf	(stop@mL+1)^0,c
  1309   002AE6  0E94               	movlw	low main@motorRight
  1310   002AE8  6E1A               	movwf	stop@mR^0,c
  1311   002AEA  0E01               	movlw	high main@motorRight
  1312   002AEC  6E1B               	movwf	(stop@mR+1)^0,c
  1313   002AEE  ECF0  F01E         	call	_stop	;wreg free
  1314   002AF2                     l6040:
  1315                           
  1316                           ;MazeRobot.X/main.c: 142:         _delay((unsigned long)((100)*(64000000/4000.0)));
  1317   002AF2  0E09               	movlw	9
  1318   002AF4  0100               	movlb	0	; () banked
  1319   002AF6  6FCC               	movwf	(??_main+1)& (0+255),b
  1320   002AF8  0E1E               	movlw	30
  1321   002AFA  6FCB               	movwf	??_main& (0+255),b
  1322   002AFC  0EE4               	movlw	228
  1323   002AFE                     u7027:
  1324   002AFE  2EE8               	decfsz	wreg,f,c
  1325   002B00  D7FE               	bra	u7027
  1326   002B02  2FCB               	decfsz	??_main& (0+255),f,b
  1327   002B04  D7FC               	bra	u7027
  1328   002B06  2FCC               	decfsz	(??_main+1)& (0+255),f,b
  1329   002B08  D7FA               	bra	u7027
  1330   002B0A  F000               	nop	
  1331   002B0C  EFC5  F014         	goto	l6016
  1332   002B10  EF3B  F000         	goto	start
  1333   002B14                     __end_of_main:
  1334                           	callstack 0
  1335                           
  1336 ;; *************** function _whiteCal *****************
  1337 ;; Defined at:
  1338 ;;		line 114 in file "MazeRobot.X/color.c"
  1339 ;; Parameters:    Size  Location     Type
  1340 ;;  v               2   17[COMRAM] PTR struct RGB
  1341 ;;		 -> main@whiteRGBVal(8), 
  1342 ;; Auto vars:     Size  Location     Type
  1343 ;;  i               2   21[COMRAM] int 
  1344 ;; Return value:  Size  Location     Type
  1345 ;;                  1    wreg      void 
  1346 ;; Registers used:
  1347 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1348 ;; Tracked objects:
  1349 ;;		On entry : 0/0
  1350 ;;		On exit  : 0/0
  1351 ;;		Unchanged: 0/0
  1352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1353 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1354 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1355 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1356 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1357 ;;Total ram usage:        6 bytes
  1358 ;; Hardware stack levels used: 1
  1359 ;; Hardware stack levels required when called: 6
  1360 ;; This function calls:
  1361 ;;		_getColor
  1362 ;; This function is called by:
  1363 ;;		_main
  1364 ;; This function uses a non-reentrant model
  1365 ;;
  1366                           
  1367                           	psect	text1
  1368   0039A6                     __ptext1:
  1369                           	callstack 0
  1370   0039A6                     _whiteCal:
  1371                           	callstack 24
  1372   0039A6                     
  1373                           ;MazeRobot.X/color.c: 116:     for(int i = 0;i<20;i++){
  1374   0039A6  0E00               	movlw	0
  1375   0039A8  6E17               	movwf	(whiteCal@i+1)^0,c
  1376   0039AA  0E00               	movlw	0
  1377   0039AC  6E16               	movwf	whiteCal@i^0,c
  1378   0039AE                     l5678:
  1379                           
  1380                           ;MazeRobot.X/color.c: 117:             LATDbits.LATD7 = !LATDbits.LATD7;
  1381   0039AE  AE7C               	btfss	124,7,c	;volatile
  1382   0039B0  EFDC  F01C         	goto	u6441
  1383   0039B4  EFE0  F01C         	goto	u6440
  1384   0039B8                     u6441:
  1385   0039B8  6A14               	clrf	??_whiteCal^0,c
  1386   0039BA  2A14               	incf	??_whiteCal^0,f,c
  1387   0039BC  EFE1  F01C         	goto	u6458
  1388   0039C0                     u6440:
  1389   0039C0  6A14               	clrf	??_whiteCal^0,c
  1390   0039C2                     u6458:
  1391   0039C2  3214               	rrcf	??_whiteCal^0,f,c
  1392   0039C4  3214               	rrcf	??_whiteCal^0,f,c
  1393   0039C6  507C               	movf	124,w,c	;volatile
  1394   0039C8  1814               	xorwf	??_whiteCal^0,w,c
  1395   0039CA  0B7F               	andlw	-129
  1396   0039CC  1814               	xorwf	??_whiteCal^0,w,c
  1397   0039CE  6E7C               	movwf	124,c	;volatile
  1398   0039D0                     
  1399                           ;MazeRobot.X/color.c: 118:             _delay((unsigned long)((100)*(64000000/4000.0)));
  1400   0039D0  0E09               	movlw	9
  1401   0039D2  6E15               	movwf	(??_whiteCal+1)^0,c
  1402   0039D4  0E1E               	movlw	30
  1403   0039D6  6E14               	movwf	??_whiteCal^0,c
  1404   0039D8  0EE4               	movlw	228
  1405   0039DA                     u7037:
  1406   0039DA  2EE8               	decfsz	wreg,f,c
  1407   0039DC  D7FE               	bra	u7037
  1408   0039DE  2E14               	decfsz	??_whiteCal^0,f,c
  1409   0039E0  D7FC               	bra	u7037
  1410   0039E2  2E15               	decfsz	(??_whiteCal+1)^0,f,c
  1411   0039E4  D7FA               	bra	u7037
  1412   0039E6  D000               	nop2	
  1413                           
  1414                           ;MazeRobot.X/color.c: 119:             }
  1415   0039E8  4A16               	infsnz	whiteCal@i^0,f,c
  1416   0039EA  2A17               	incf	(whiteCal@i+1)^0,f,c
  1417   0039EC  BE17               	btfsc	(whiteCal@i+1)^0,7,c
  1418   0039EE  EF02  F01D         	goto	u6461
  1419   0039F2  5017               	movf	(whiteCal@i+1)^0,w,c
  1420   0039F4  E109               	bnz	u6460
  1421   0039F6  0E14               	movlw	20
  1422   0039F8  5C16               	subwf	whiteCal@i^0,w,c
  1423   0039FA  A0D8               	btfss	status,0,c
  1424   0039FC  EF02  F01D         	goto	u6461
  1425   003A00  EF04  F01D         	goto	u6460
  1426   003A04                     u6461:
  1427   003A04  EFD7  F01C         	goto	l5678
  1428   003A08                     u6460:
  1429   003A08                     
  1430                           ;MazeRobot.X/color.c: 120:             LATDbits.LATD7 = !LATDbits.LATD7;
  1431   003A08  AE7C               	btfss	124,7,c	;volatile
  1432   003A0A  EF09  F01D         	goto	u6471
  1433   003A0E  EF0D  F01D         	goto	u6470
  1434   003A12                     u6471:
  1435   003A12  6A14               	clrf	??_whiteCal^0,c
  1436   003A14  2A14               	incf	??_whiteCal^0,f,c
  1437   003A16  EF0E  F01D         	goto	u6488
  1438   003A1A                     u6470:
  1439   003A1A  6A14               	clrf	??_whiteCal^0,c
  1440   003A1C                     u6488:
  1441   003A1C  3214               	rrcf	??_whiteCal^0,f,c
  1442   003A1E  3214               	rrcf	??_whiteCal^0,f,c
  1443   003A20  507C               	movf	124,w,c	;volatile
  1444   003A22  1814               	xorwf	??_whiteCal^0,w,c
  1445   003A24  0B7F               	andlw	-129
  1446   003A26  1814               	xorwf	??_whiteCal^0,w,c
  1447   003A28  6E7C               	movwf	124,c	;volatile
  1448   003A2A                     
  1449                           ;MazeRobot.X/color.c: 121:             _delay((unsigned long)((500)*(64000000/4000.0)));
  1450   003A2A  0E29               	movlw	41
  1451   003A2C  6E15               	movwf	(??_whiteCal+1)^0,c
  1452   003A2E  0E96               	movlw	150
  1453   003A30  6E14               	movwf	??_whiteCal^0,c
  1454   003A32  0E7F               	movlw	127
  1455   003A34                     u7047:
  1456   003A34  2EE8               	decfsz	wreg,f,c
  1457   003A36  D7FE               	bra	u7047
  1458   003A38  2E14               	decfsz	??_whiteCal^0,f,c
  1459   003A3A  D7FC               	bra	u7047
  1460   003A3C  2E15               	decfsz	(??_whiteCal+1)^0,f,c
  1461   003A3E  D7FA               	bra	u7047
  1462   003A40  F000               	nop	
  1463   003A42                     
  1464                           ;MazeRobot.X/color.c: 122:             getColor(v);
  1465   003A42  C012  F010         	movff	whiteCal@v,getColor@v
  1466   003A46  C013  F011         	movff	whiteCal@v+1,getColor@v+1
  1467   003A4A  EC88  F020         	call	_getColor	;wreg free
  1468   003A4E                     
  1469                           ;MazeRobot.X/color.c: 123:             _delay((unsigned long)((500)*(64000000/4000.0)));
  1470   003A4E  0E29               	movlw	41
  1471   003A50  6E15               	movwf	(??_whiteCal+1)^0,c
  1472   003A52  0E96               	movlw	150
  1473   003A54  6E14               	movwf	??_whiteCal^0,c
  1474   003A56  0E7F               	movlw	127
  1475   003A58                     u7057:
  1476   003A58  2EE8               	decfsz	wreg,f,c
  1477   003A5A  D7FE               	bra	u7057
  1478   003A5C  2E14               	decfsz	??_whiteCal^0,f,c
  1479   003A5E  D7FC               	bra	u7057
  1480   003A60  2E15               	decfsz	(??_whiteCal+1)^0,f,c
  1481   003A62  D7FA               	bra	u7057
  1482   003A64  F000               	nop	
  1483   003A66                     
  1484                           ;MazeRobot.X/color.c: 124:             LATDbits.LATD7 = !LATDbits.LATD7;
  1485   003A66  AE7C               	btfss	124,7,c	;volatile
  1486   003A68  EF38  F01D         	goto	u6491
  1487   003A6C  EF3C  F01D         	goto	u6490
  1488   003A70                     u6491:
  1489   003A70  6A14               	clrf	??_whiteCal^0,c
  1490   003A72  2A14               	incf	??_whiteCal^0,f,c
  1491   003A74  EF3D  F01D         	goto	u6508
  1492   003A78                     u6490:
  1493   003A78  6A14               	clrf	??_whiteCal^0,c
  1494   003A7A                     u6508:
  1495   003A7A  3214               	rrcf	??_whiteCal^0,f,c
  1496   003A7C  3214               	rrcf	??_whiteCal^0,f,c
  1497   003A7E  507C               	movf	124,w,c	;volatile
  1498   003A80  1814               	xorwf	??_whiteCal^0,w,c
  1499   003A82  0B7F               	andlw	-129
  1500   003A84  1814               	xorwf	??_whiteCal^0,w,c
  1501   003A86  6E7C               	movwf	124,c	;volatile
  1502   003A88  0012               	return		;funcret
  1503   003A8A                     __end_of_whiteCal:
  1504                           	callstack 0
  1505                           
  1506 ;; *************** function _initUSART4 *****************
  1507 ;; Defined at:
  1508 ;;		line 5 in file "serialTest.c"
  1509 ;; Parameters:    Size  Location     Type
  1510 ;;		None
  1511 ;; Auto vars:     Size  Location     Type
  1512 ;;		None
  1513 ;; Return value:  Size  Location     Type
  1514 ;;                  1    wreg      void 
  1515 ;; Registers used:
  1516 ;;		wreg, status,2
  1517 ;; Tracked objects:
  1518 ;;		On entry : 0/0
  1519 ;;		On exit  : 0/0
  1520 ;;		Unchanged: 0/0
  1521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1525 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1526 ;;Total ram usage:        0 bytes
  1527 ;; Hardware stack levels used: 1
  1528 ;; Hardware stack levels required when called: 2
  1529 ;; This function calls:
  1530 ;;		Nothing
  1531 ;; This function is called by:
  1532 ;;		_main
  1533 ;; This function uses a non-reentrant model
  1534 ;;
  1535                           
  1536                           	psect	text2
  1537   004512                     __ptext2:
  1538                           	callstack 0
  1539   004512                     _initUSART4:
  1540                           	callstack 28
  1541   004512                     
  1542                           ;serialTest.c: 9:     BAUD4CONbits.BRG16 = 0;
  1543   004512  010E               	movlb	14	; () banked
  1544   004514  97E9               	bcf	233,3,b	;volatile
  1545                           
  1546                           ;serialTest.c: 10:     TX4STAbits.BRGH = 0;
  1547   004516  95E8               	bcf	232,2,b	;volatile
  1548   004518                     
  1549                           ; BSR set to: 14
  1550                           ;serialTest.c: 19:     SP4BRGL = 51;
  1551   004518  0E33               	movlw	51
  1552   00451A  6FE5               	movwf	229,b	;volatile
  1553                           
  1554                           ;serialTest.c: 20:     SP4BRGH = 0;
  1555   00451C  0E00               	movlw	0
  1556   00451E  6FE6               	movwf	230,b	;volatile
  1557   004520                     
  1558                           ; BSR set to: 14
  1559                           ;serialTest.c: 22:     RC4STAbits.CREN = 1;
  1560   004520  89E7               	bsf	231,4,b	;volatile
  1561   004522                     
  1562                           ; BSR set to: 14
  1563                           ;serialTest.c: 23:     TX4STAbits.TXEN = 1;
  1564   004522  8BE8               	bsf	232,5,b	;volatile
  1565   004524                     
  1566                           ; BSR set to: 14
  1567                           ;serialTest.c: 24:     RC4STAbits.SPEN = 1;
  1568   004524  8FE7               	bsf	231,7,b	;volatile
  1569   004526                     
  1570                           ; BSR set to: 14
  1571                           ;serialTest.c: 26:     TRISCbits.TRISC1 = 1;
  1572   004526  8283               	bsf	131,1,c	;volatile
  1573                           
  1574                           ;serialTest.c: 28:     RC0PPS = 0x12;
  1575   004528  0E12               	movlw	18
  1576   00452A  6F62               	movwf	98,b	;volatile
  1577                           
  1578                           ;serialTest.c: 29:     RX4PPS = 0x11;
  1579   00452C  0E11               	movlw	17
  1580   00452E  6F15               	movwf	21,b	;volatile
  1581   004530                     
  1582                           ; BSR set to: 14
  1583                           ;serialTest.c: 32:     INTCONbits.GIE = 1;
  1584   004530  8EF2               	bsf	242,7,c	;volatile
  1585   004532                     
  1586                           ; BSR set to: 14
  1587                           ;serialTest.c: 33:     INTCONbits.IPEN = 1;
  1588   004532  8AF2               	bsf	242,5,c	;volatile
  1589   004534                     
  1590                           ; BSR set to: 14
  1591                           ;serialTest.c: 34:     INTCONbits.PEIE = 1;
  1592   004534  8CF2               	bsf	242,6,c	;volatile
  1593   004536                     
  1594                           ; BSR set to: 14
  1595                           ;serialTest.c: 36:     PIE4bits.RC4IE=1;
  1596   004536  872D               	bsf	45,3,b	;volatile
  1597   004538                     
  1598                           ; BSR set to: 14
  1599                           ;serialTest.c: 37:     PIE4bits.TX4IE=0;
  1600   004538  952D               	bcf	45,2,b	;volatile
  1601   00453A                     
  1602                           ; BSR set to: 14
  1603                           ;serialTest.c: 39:     IPR4bits.RC4IP = 1;
  1604   00453A  8723               	bsf	35,3,b	;volatile
  1605   00453C                     
  1606                           ; BSR set to: 14
  1607                           ;serialTest.c: 40:     IPR4bits.TX4IP = 1;
  1608   00453C  8523               	bsf	35,2,b	;volatile
  1609   00453E                     
  1610                           ; BSR set to: 14
  1611   00453E  0012               	return		;funcret
  1612   004540                     __end_of_initUSART4:
  1613                           	callstack 0
  1614                           
  1615 ;; *************** function _initDCmotorsPWM *****************
  1616 ;; Defined at:
  1617 ;;		line 10 in file "MazeRobot.X/dc_motor.c"
  1618 ;; Parameters:    Size  Location     Type
  1619 ;;  PWMperiod       2    4[COMRAM] int 
  1620 ;; Auto vars:     Size  Location     Type
  1621 ;;		None
  1622 ;; Return value:  Size  Location     Type
  1623 ;;                  1    wreg      void 
  1624 ;; Registers used:
  1625 ;;		wreg, status,2
  1626 ;; Tracked objects:
  1627 ;;		On entry : 0/0
  1628 ;;		On exit  : 0/0
  1629 ;;		Unchanged: 0/0
  1630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1631 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1634 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1635 ;;Total ram usage:        2 bytes
  1636 ;; Hardware stack levels used: 1
  1637 ;; Hardware stack levels required when called: 2
  1638 ;; This function calls:
  1639 ;;		Nothing
  1640 ;; This function is called by:
  1641 ;;		_main
  1642 ;; This function uses a non-reentrant model
  1643 ;;
  1644                           
  1645                           	psect	text3
  1646   003E8E                     __ptext3:
  1647                           	callstack 0
  1648   003E8E                     _initDCmotorsPWM:
  1649                           	callstack 28
  1650   003E8E                     
  1651                           ;MazeRobot.X/dc_motor.c: 14:     LATEbits.LATE2 = 0;
  1652   003E8E  947D               	bcf	125,2,c	;volatile
  1653                           
  1654                           ;MazeRobot.X/dc_motor.c: 15:     LATEbits.LATE4 = 0;
  1655   003E90  987D               	bcf	125,4,c	;volatile
  1656                           
  1657                           ;MazeRobot.X/dc_motor.c: 16:     LATCbits.LATC7 = 0;
  1658   003E92  9E7B               	bcf	123,7,c	;volatile
  1659                           
  1660                           ;MazeRobot.X/dc_motor.c: 17:     LATGbits.LATG6 = 0;
  1661   003E94  9C7F               	bcf	127,6,c	;volatile
  1662                           
  1663                           ;MazeRobot.X/dc_motor.c: 20:     TRISEbits.TRISE2 = 0 ;
  1664   003E96  9485               	bcf	133,2,c	;volatile
  1665                           
  1666                           ;MazeRobot.X/dc_motor.c: 21:     TRISEbits.TRISE4 = 0 ;
  1667   003E98  9885               	bcf	133,4,c	;volatile
  1668                           
  1669                           ;MazeRobot.X/dc_motor.c: 22:     TRISCbits.TRISC7 = 0 ;
  1670   003E9A  9E83               	bcf	131,7,c	;volatile
  1671                           
  1672                           ;MazeRobot.X/dc_motor.c: 23:     TRISGbits.TRISG6 = 0 ;
  1673   003E9C  9C87               	bcf	135,6,c	;volatile
  1674   003E9E                     
  1675                           ;MazeRobot.X/dc_motor.c: 26:     RE2PPS=0x05;
  1676   003E9E  0E05               	movlw	5
  1677   003EA0  010E               	movlb	14	; () banked
  1678   003EA2  6F74               	movwf	116,b	;volatile
  1679                           
  1680                           ;MazeRobot.X/dc_motor.c: 27:     RE4PPS=0x06;
  1681   003EA4  0E06               	movlw	6
  1682   003EA6  6F76               	movwf	118,b	;volatile
  1683                           
  1684                           ;MazeRobot.X/dc_motor.c: 28:     RC7PPS=0x07;
  1685   003EA8  0E07               	movlw	7
  1686   003EAA  6F69               	movwf	105,b	;volatile
  1687                           
  1688                           ;MazeRobot.X/dc_motor.c: 29:     RG6PPS=0x08;
  1689   003EAC  0E08               	movlw	8
  1690   003EAE  6F88               	movwf	136,b	;volatile
  1691                           
  1692                           ;MazeRobot.X/dc_motor.c: 32:     T2CONbits.CKPS=0b011;
  1693   003EB0  50BD               	movf	189,w,c	;volatile
  1694   003EB2  0B8F               	andlw	-113
  1695   003EB4  0930               	iorlw	48
  1696   003EB6  6EBD               	movwf	189,c	;volatile
  1697                           
  1698                           ;MazeRobot.X/dc_motor.c: 33:     T2HLTbits.MODE=0b00000;
  1699   003EB8  0EE0               	movlw	-32
  1700   003EBA  16BE               	andwf	190,f,c	;volatile
  1701                           
  1702                           ;MazeRobot.X/dc_motor.c: 34:     T2CLKCONbits.CS=0b0001;
  1703   003EBC  50BF               	movf	191,w,c	;volatile
  1704   003EBE  0BF0               	andlw	-16
  1705   003EC0  0901               	iorlw	1
  1706   003EC2  6EBF               	movwf	191,c	;volatile
  1707                           
  1708                           ;MazeRobot.X/dc_motor.c: 38:     T2PR=199;
  1709   003EC4  0EC7               	movlw	199
  1710   003EC6  6EBC               	movwf	188,c	;volatile
  1711   003EC8                     
  1712                           ; BSR set to: 14
  1713                           ;MazeRobot.X/dc_motor.c: 39:     T2CONbits.ON=1;
  1714   003EC8  8EBD               	bsf	189,7,c	;volatile
  1715                           
  1716                           ;MazeRobot.X/dc_motor.c: 43:     CCPR1H=0;
  1717   003ECA  0E00               	movlw	0
  1718   003ECC  6EAA               	movwf	170,c	;volatile
  1719                           
  1720                           ;MazeRobot.X/dc_motor.c: 44:     CCPR2H=0;
  1721   003ECE  0E00               	movlw	0
  1722   003ED0  6EA6               	movwf	166,c	;volatile
  1723                           
  1724                           ;MazeRobot.X/dc_motor.c: 45:     CCPR3H=0;
  1725   003ED2  0E00               	movlw	0
  1726   003ED4  010F               	movlb	15	; () banked
  1727   003ED6  6F25               	movwf	37,b	;volatile
  1728                           
  1729                           ;MazeRobot.X/dc_motor.c: 46:     CCPR4H=0;
  1730   003ED8  0E00               	movlw	0
  1731   003EDA  6F21               	movwf	33,b	;volatile
  1732                           
  1733                           ;MazeRobot.X/dc_motor.c: 49:     CCPTMRS0bits.C1TSEL=0;
  1734   003EDC  0EFC               	movlw	-4
  1735   003EDE  16AD               	andwf	173,f,c	;volatile
  1736                           
  1737                           ;MazeRobot.X/dc_motor.c: 50:     CCPTMRS0bits.C2TSEL=0;
  1738   003EE0  0EF3               	movlw	-13
  1739   003EE2  16AD               	andwf	173,f,c	;volatile
  1740                           
  1741                           ;MazeRobot.X/dc_motor.c: 51:     CCPTMRS0bits.C3TSEL=0;
  1742   003EE4  0ECF               	movlw	-49
  1743   003EE6  16AD               	andwf	173,f,c	;volatile
  1744                           
  1745                           ;MazeRobot.X/dc_motor.c: 52:     CCPTMRS0bits.C4TSEL=0;
  1746   003EE8  0E3F               	movlw	-193
  1747   003EEA  16AD               	andwf	173,f,c	;volatile
  1748   003EEC                     
  1749                           ; BSR set to: 15
  1750                           ;MazeRobot.X/dc_motor.c: 55:     CCP1CONbits.FMT=1;
  1751   003EEC  88AB               	bsf	171,4,c	;volatile
  1752                           
  1753                           ;MazeRobot.X/dc_motor.c: 56:     CCP1CONbits.CCP1MODE=0b1100;
  1754   003EEE  50AB               	movf	171,w,c	;volatile
  1755   003EF0  0BF0               	andlw	-16
  1756   003EF2  090C               	iorlw	12
  1757   003EF4  6EAB               	movwf	171,c	;volatile
  1758   003EF6                     
  1759                           ; BSR set to: 15
  1760                           ;MazeRobot.X/dc_motor.c: 57:     CCP1CONbits.EN=1;
  1761   003EF6  8EAB               	bsf	171,7,c	;volatile
  1762   003EF8                     
  1763                           ; BSR set to: 15
  1764                           ;MazeRobot.X/dc_motor.c: 59:     CCP2CONbits.FMT=1;
  1765   003EF8  88A7               	bsf	167,4,c	;volatile
  1766                           
  1767                           ;MazeRobot.X/dc_motor.c: 60:     CCP2CONbits.CCP2MODE=0b1100;
  1768   003EFA  50A7               	movf	167,w,c	;volatile
  1769   003EFC  0BF0               	andlw	-16
  1770   003EFE  090C               	iorlw	12
  1771   003F00  6EA7               	movwf	167,c	;volatile
  1772   003F02                     
  1773                           ; BSR set to: 15
  1774                           ;MazeRobot.X/dc_motor.c: 61:     CCP2CONbits.EN=1;
  1775   003F02  8EA7               	bsf	167,7,c	;volatile
  1776   003F04                     
  1777                           ; BSR set to: 15
  1778                           ;MazeRobot.X/dc_motor.c: 63:     CCP3CONbits.FMT=1;
  1779   003F04  8926               	bsf	38,4,b	;volatile
  1780                           
  1781                           ;MazeRobot.X/dc_motor.c: 64:     CCP3CONbits.CCP3MODE=0b1100;
  1782   003F06  5126               	movf	38,w,b	;volatile
  1783   003F08  0BF0               	andlw	-16
  1784   003F0A  090C               	iorlw	12
  1785   003F0C  6F26               	movwf	38,b	;volatile
  1786   003F0E                     
  1787                           ; BSR set to: 15
  1788                           ;MazeRobot.X/dc_motor.c: 65:     CCP3CONbits.EN=1;
  1789   003F0E  8F26               	bsf	38,7,b	;volatile
  1790   003F10                     
  1791                           ; BSR set to: 15
  1792                           ;MazeRobot.X/dc_motor.c: 67:     CCP4CONbits.FMT=1;
  1793   003F10  8922               	bsf	34,4,b	;volatile
  1794                           
  1795                           ;MazeRobot.X/dc_motor.c: 68:     CCP4CONbits.CCP4MODE=0b1100;
  1796   003F12  5122               	movf	34,w,b	;volatile
  1797   003F14  0BF0               	andlw	-16
  1798   003F16  090C               	iorlw	12
  1799   003F18  6F22               	movwf	34,b	;volatile
  1800   003F1A                     
  1801                           ; BSR set to: 15
  1802                           ;MazeRobot.X/dc_motor.c: 69:     CCP4CONbits.EN=1;
  1803   003F1A  8F22               	bsf	34,7,b	;volatile
  1804   003F1C                     
  1805                           ; BSR set to: 15
  1806   003F1C  0012               	return		;funcret
  1807   003F1E                     __end_of_initDCmotorsPWM:
  1808                           	callstack 0
  1809                           
  1810 ;; *************** function _color_click_init *****************
  1811 ;; Defined at:
  1812 ;;		line 7 in file "MazeRobot.X/color.c"
  1813 ;; Parameters:    Size  Location     Type
  1814 ;;		None
  1815 ;; Auto vars:     Size  Location     Type
  1816 ;;		None
  1817 ;; Return value:  Size  Location     Type
  1818 ;;                  1    wreg      void 
  1819 ;; Registers used:
  1820 ;;		wreg, status,2, status,0, cstack
  1821 ;; Tracked objects:
  1822 ;;		On entry : 0/0
  1823 ;;		On exit  : 0/0
  1824 ;;		Unchanged: 0/0
  1825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1827 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1828 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1829 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1830 ;;Total ram usage:        1 bytes
  1831 ;; Hardware stack levels used: 1
  1832 ;; Hardware stack levels required when called: 5
  1833 ;; This function calls:
  1834 ;;		_I2C_2_Master_Init
  1835 ;;		_color_writetoaddr
  1836 ;; This function is called by:
  1837 ;;		_main
  1838 ;; This function uses a non-reentrant model
  1839 ;;
  1840                           
  1841                           	psect	text4
  1842   0044AE                     __ptext4:
  1843                           	callstack 0
  1844   0044AE                     _color_click_init:
  1845                           	callstack 25
  1846   0044AE                     
  1847                           ;MazeRobot.X/color.c: 10:     I2C_2_Master_Init();
  1848   0044AE  ECB6  F022         	call	_I2C_2_Master_Init	;wreg free
  1849   0044B2                     
  1850                           ;MazeRobot.X/color.c: 13:   color_writetoaddr(0x00, 0x01);
  1851   0044B2  0E01               	movlw	1
  1852   0044B4  6E07               	movwf	color_writetoaddr@value^0,c
  1853   0044B6  0E00               	movlw	0
  1854   0044B8  EC1C  F023         	call	_color_writetoaddr
  1855   0044BC                     
  1856                           ;MazeRobot.X/color.c: 14:     _delay((unsigned long)((3)*(64000000/4000.0)));
  1857   0044BC  0E3F               	movlw	63
  1858   0044BE  6E09               	movwf	??_color_click_init^0,c
  1859   0044C0  0E55               	movlw	85
  1860   0044C2                     u7067:
  1861   0044C2  2EE8               	decfsz	wreg,f,c
  1862   0044C4  D7FE               	bra	u7067
  1863   0044C6  2E09               	decfsz	??_color_click_init^0,f,c
  1864   0044C8  D7FC               	bra	u7067
  1865   0044CA  F000               	nop	
  1866   0044CC                     
  1867                           ;MazeRobot.X/color.c: 17:  color_writetoaddr(0x00, 0x03);
  1868   0044CC  0E03               	movlw	3
  1869   0044CE  6E07               	movwf	color_writetoaddr@value^0,c
  1870   0044D0  0E00               	movlw	0
  1871   0044D2  EC1C  F023         	call	_color_writetoaddr
  1872   0044D6                     
  1873                           ;MazeRobot.X/color.c: 20:  color_writetoaddr(0x01, 0xD5);
  1874   0044D6  0ED5               	movlw	213
  1875   0044D8  6E07               	movwf	color_writetoaddr@value^0,c
  1876   0044DA  0E01               	movlw	1
  1877   0044DC  EC1C  F023         	call	_color_writetoaddr
  1878   0044E0  0012               	return		;funcret
  1879   0044E2                     __end_of_color_click_init:
  1880                           	callstack 0
  1881                           
  1882 ;; *************** function _color_writetoaddr *****************
  1883 ;; Defined at:
  1884 ;;		line 24 in file "MazeRobot.X/color.c"
  1885 ;; Parameters:    Size  Location     Type
  1886 ;;  address         1    wreg     unsigned char 
  1887 ;;  value           1    6[COMRAM] unsigned char 
  1888 ;; Auto vars:     Size  Location     Type
  1889 ;;  address         1    7[COMRAM] unsigned char 
  1890 ;; Return value:  Size  Location     Type
  1891 ;;                  1    wreg      void 
  1892 ;; Registers used:
  1893 ;;		wreg, status,2, status,0, cstack
  1894 ;; Tracked objects:
  1895 ;;		On entry : 0/0
  1896 ;;		On exit  : 0/0
  1897 ;;		Unchanged: 0/0
  1898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1899 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1900 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1902 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1903 ;;Total ram usage:        2 bytes
  1904 ;; Hardware stack levels used: 1
  1905 ;; Hardware stack levels required when called: 4
  1906 ;; This function calls:
  1907 ;;		_I2C_2_Master_Start
  1908 ;;		_I2C_2_Master_Stop
  1909 ;;		_I2C_2_Master_Write
  1910 ;; This function is called by:
  1911 ;;		_color_click_init
  1912 ;; This function uses a non-reentrant model
  1913 ;;
  1914                           
  1915                           	psect	text5
  1916   004638                     __ptext5:
  1917                           	callstack 0
  1918   004638                     _color_writetoaddr:
  1919                           	callstack 25
  1920                           
  1921                           ;incstack = 0
  1922                           ;color_writetoaddr@address stored from wreg
  1923   004638  6E08               	movwf	color_writetoaddr@address^0,c
  1924   00463A                     
  1925                           ;MazeRobot.X/color.c: 25:     I2C_2_Master_Start();
  1926   00463A  EC5C  F023         	call	_I2C_2_Master_Start	;wreg free
  1927                           
  1928                           ;MazeRobot.X/color.c: 26:     I2C_2_Master_Write(0x52 | 0x00);
  1929   00463E  0E52               	movlw	82
  1930   004640  EC51  F023         	call	_I2C_2_Master_Write
  1931                           
  1932                           ;MazeRobot.X/color.c: 27:     I2C_2_Master_Write(0x80 | address);
  1933   004644  5008               	movf	color_writetoaddr@address^0,w,c
  1934   004646  0980               	iorlw	128
  1935   004648  EC51  F023         	call	_I2C_2_Master_Write
  1936                           
  1937                           ;MazeRobot.X/color.c: 28:     I2C_2_Master_Write(value);
  1938   00464C  5007               	movf	color_writetoaddr@value^0,w,c
  1939   00464E  EC51  F023         	call	_I2C_2_Master_Write
  1940                           
  1941                           ;MazeRobot.X/color.c: 29:     I2C_2_Master_Stop();
  1942   004652  EC57  F023         	call	_I2C_2_Master_Stop	;wreg free
  1943   004656  0012               	return		;funcret
  1944   004658                     __end_of_color_writetoaddr:
  1945                           	callstack 0
  1946                           
  1947 ;; *************** function _I2C_2_Master_Init *****************
  1948 ;; Defined at:
  1949 ;;		line 4 in file "MazeRobot.X/i2c.c"
  1950 ;; Parameters:    Size  Location     Type
  1951 ;;		None
  1952 ;; Auto vars:     Size  Location     Type
  1953 ;;		None
  1954 ;; Return value:  Size  Location     Type
  1955 ;;                  1    wreg      void 
  1956 ;; Registers used:
  1957 ;;		wreg, status,2
  1958 ;; Tracked objects:
  1959 ;;		On entry : 0/0
  1960 ;;		On exit  : 0/0
  1961 ;;		Unchanged: 0/0
  1962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1964 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1966 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1967 ;;Total ram usage:        0 bytes
  1968 ;; Hardware stack levels used: 1
  1969 ;; Hardware stack levels required when called: 2
  1970 ;; This function calls:
  1971 ;;		Nothing
  1972 ;; This function is called by:
  1973 ;;		_color_click_init
  1974 ;; This function uses a non-reentrant model
  1975 ;;
  1976                           
  1977                           	psect	text6
  1978   00456C                     __ptext6:
  1979                           	callstack 0
  1980   00456C                     _I2C_2_Master_Init:
  1981                           	callstack 27
  1982   00456C                     
  1983                           ;MazeRobot.X/i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  1984   00456C  010E               	movlb	14	; () banked
  1985   00456E  51D9               	movf	217,w,b	;volatile
  1986   004570  0BF0               	andlw	-16
  1987   004572  0908               	iorlw	8
  1988   004574  6FD9               	movwf	217,b	;volatile
  1989   004576                     
  1990                           ; BSR set to: 14
  1991                           ;MazeRobot.X/i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  1992   004576  8BD9               	bsf	217,5,b	;volatile
  1993                           
  1994                           ;MazeRobot.X/i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  1995   004578  0E9F               	movlw	159
  1996   00457A  6FD6               	movwf	214,b	;volatile
  1997   00457C                     
  1998                           ; BSR set to: 14
  1999                           ;MazeRobot.X/i2c.c: 12:   TRISDbits.TRISD5 = 1;
  2000   00457C  8A84               	bsf	132,5,c	;volatile
  2001   00457E                     
  2002                           ; BSR set to: 14
  2003                           ;MazeRobot.X/i2c.c: 13:   TRISDbits.TRISD6 = 1;
  2004   00457E  8C84               	bsf	132,6,c	;volatile
  2005   004580                     
  2006                           ; BSR set to: 14
  2007                           ;MazeRobot.X/i2c.c: 14:   ANSELDbits.ANSELD5=0;
  2008   004580  9BA7               	bcf	167,5,b	;volatile
  2009   004582                     
  2010                           ; BSR set to: 14
  2011                           ;MazeRobot.X/i2c.c: 15:   ANSELDbits.ANSELD6=0;
  2012   004582  9DA7               	bcf	167,6,b	;volatile
  2013                           
  2014                           ;MazeRobot.X/i2c.c: 16:   SSP2DATPPS=0x1D;
  2015   004584  0E1D               	movlw	29
  2016   004586  6F1D               	movwf	29,b	;volatile
  2017                           
  2018                           ;MazeRobot.X/i2c.c: 17:   SSP2CLKPPS=0x1E;
  2019   004588  0E1E               	movlw	30
  2020   00458A  6F1C               	movwf	28,b	;volatile
  2021                           
  2022                           ;MazeRobot.X/i2c.c: 18:   RD5PPS=0x1C;
  2023   00458C  0E1C               	movlw	28
  2024   00458E  6F6F               	movwf	111,b	;volatile
  2025                           
  2026                           ;MazeRobot.X/i2c.c: 19:   RD6PPS=0x1B;
  2027   004590  0E1B               	movlw	27
  2028   004592  6F70               	movwf	112,b	;volatile
  2029   004594                     
  2030                           ; BSR set to: 14
  2031   004594  0012               	return		;funcret
  2032   004596                     __end_of_I2C_2_Master_Init:
  2033                           	callstack 0
  2034                           
  2035 ;; *************** function _colorDetect *****************
  2036 ;; Defined at:
  2037 ;;		line 129 in file "MazeRobot.X/color.c"
  2038 ;; Parameters:    Size  Location     Type
  2039 ;;  clearRef        4   35[BANK0 ] void 
  2040 ;;  ambientRGBVa    2   39[BANK0 ] PTR struct RGB
  2041 ;;		 -> main@ambientRGBVal(8), 
  2042 ;;  whiteRGBVal     2   41[BANK0 ] PTR struct RGB
  2043 ;;		 -> main@whiteRGBVal(8), 
  2044 ;;  mL              2   43[BANK0 ] PTR struct DC_motor
  2045 ;;		 -> main@motorLeft(9), 
  2046 ;;  mR              2   45[BANK0 ] PTR struct DC_motor
  2047 ;;		 -> main@motorRight(9), 
  2048 ;; Auto vars:     Size  Location     Type
  2049 ;;  testString     20   49[BANK0 ] unsigned char [20]
  2050 ;;  RGBVal          8   87[BANK0 ] struct RGB
  2051 ;;  bluePrint       4  103[BANK0 ] float 
  2052 ;;  greenPrint      4   99[BANK0 ] float 
  2053 ;;  redPrint        4   95[BANK0 ] float 
  2054 ;;  whiteB          4   77[BANK0 ] float 
  2055 ;;  whiteG          4   73[BANK0 ] float 
  2056 ;;  whiteR          4   69[BANK0 ] float 
  2057 ;;  whiteC          4    0        float 
  2058 ;;  ambientB        2   85[BANK0 ] unsigned int 
  2059 ;;  ambientG        2   83[BANK0 ] unsigned int 
  2060 ;;  ambientR        2   81[BANK0 ] unsigned int 
  2061 ;; Return value:  Size  Location     Type
  2062 ;;                  1    wreg      void 
  2063 ;; Registers used:
  2064 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2065 ;; Tracked objects:
  2066 ;;		On entry : 0/0
  2067 ;;		On exit  : 0/0
  2068 ;;		Unchanged: 0/0
  2069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2070 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2071 ;;      Locals:         0      58       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2072 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2073 ;;      Totals:         0      72       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2074 ;;Total ram usage:       72 bytes
  2075 ;; Hardware stack levels used: 1
  2076 ;; Hardware stack levels required when called: 10
  2077 ;; This function calls:
  2078 ;;		_TxBufferedString
  2079 ;;		___fldiv
  2080 ;;		___flge
  2081 ;;		___flmul
  2082 ;;		___flsub
  2083 ;;		___xxtofl
  2084 ;;		_getColor
  2085 ;;		_reverseSquareLeft
  2086 ;;		_reverseSquareRight
  2087 ;;		_sendTxBuf
  2088 ;;		_sprintf
  2089 ;;		_turnLeft_135
  2090 ;;		_turnLeft_90
  2091 ;;		_turnRight_135
  2092 ;;		_turnRight_90
  2093 ;;		_turn_180
  2094 ;; This function is called by:
  2095 ;;		_main
  2096 ;; This function uses a non-reentrant model
  2097 ;;
  2098                           
  2099                           	psect	text7
  2100   000E1E                     __ptext7:
  2101                           	callstack 0
  2102   000E1E                     _colorDetect:
  2103                           	callstack 20
  2104   000E1E                     
  2105                           ;MazeRobot.X/color.c: 132:         RGB RGBVal;;MazeRobot.X/color.c: 133:         getColo
      +                          r(&RGBVal);
  2106   000E1E  0EB7               	movlw	low colorDetect@RGBVal
  2107   000E20  6E10               	movwf	getColor@v^0,c
  2108   000E22  0E00               	movlw	high colorDetect@RGBVal
  2109   000E24  6E11               	movwf	(getColor@v+1)^0,c
  2110   000E26  EC88  F020         	call	_getColor	;wreg free
  2111   000E2A                     
  2112                           ;MazeRobot.X/color.c: 135:         unsigned int ambientR = ambientRGBVal->R;
  2113   000E2A  C087  FFD9         	movff	colorDetect@ambientRGBVal,fsr2l
  2114   000E2E  C088  FFDA         	movff	colorDetect@ambientRGBVal+1,fsr2h
  2115   000E32  CFDE F0B1          	movff	postinc2,colorDetect@ambientR
  2116   000E36  CFDD F0B2          	movff	postdec2,colorDetect@ambientR+1
  2117   000E3A                     
  2118                           ;MazeRobot.X/color.c: 136:         unsigned int ambientG = ambientRGBVal->G;
  2119   000E3A  0100               	movlb	0	; () banked
  2120   000E3C  EE20 F002          	lfsr	2,2
  2121   000E40  5187               	movf	colorDetect@ambientRGBVal& (0+255),w,b
  2122   000E42  26D9               	addwf	fsr2l,f,c
  2123   000E44  5188               	movf	(colorDetect@ambientRGBVal+1)& (0+255),w,b
  2124   000E46  22DA               	addwfc	fsr2h,f,c
  2125   000E48  CFDE F0B3          	movff	postinc2,colorDetect@ambientG
  2126   000E4C  CFDD F0B4          	movff	postdec2,colorDetect@ambientG+1
  2127   000E50                     
  2128                           ; BSR set to: 0
  2129                           ;MazeRobot.X/color.c: 137:         unsigned int ambientB = ambientRGBVal->B;
  2130   000E50  EE20 F004          	lfsr	2,4
  2131   000E54  5187               	movf	colorDetect@ambientRGBVal& (0+255),w,b
  2132   000E56  26D9               	addwf	fsr2l,f,c
  2133   000E58  5188               	movf	(colorDetect@ambientRGBVal+1)& (0+255),w,b
  2134   000E5A  22DA               	addwfc	fsr2h,f,c
  2135   000E5C  CFDE F0B5          	movff	postinc2,colorDetect@ambientB
  2136   000E60  CFDD F0B6          	movff	postdec2,colorDetect@ambientB+1
  2137   000E64                     
  2138                           ; BSR set to: 0
  2139                           ;MazeRobot.X/color.c: 139:         float whiteR = whiteRGBVal->R;
  2140   000E64  C089  FFD9         	movff	colorDetect@whiteRGBVal,fsr2l
  2141   000E68  C08A  FFDA         	movff	colorDetect@whiteRGBVal+1,fsr2h
  2142   000E6C  CFDE F08F          	movff	postinc2,??_colorDetect
  2143   000E70  CFDD F090          	movff	postdec2,??_colorDetect+1
  2144   000E74  C08F  F005         	movff	??_colorDetect,___xxtofl@val
  2145   000E78  C090  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  2146   000E7C  6A07               	clrf	(___xxtofl@val+2)^0,c
  2147   000E7E  6A08               	clrf	(___xxtofl@val+3)^0,c
  2148   000E80  0E00               	movlw	0
  2149   000E82  EC8A  F015         	call	___xxtofl
  2150   000E86  C005  F0A5         	movff	?___xxtofl,colorDetect@whiteR
  2151   000E8A  C006  F0A6         	movff	?___xxtofl+1,colorDetect@whiteR+1
  2152   000E8E  C007  F0A7         	movff	?___xxtofl+2,colorDetect@whiteR+2
  2153   000E92  C008  F0A8         	movff	?___xxtofl+3,colorDetect@whiteR+3
  2154   000E96                     
  2155                           ;MazeRobot.X/color.c: 140:         float whiteG = whiteRGBVal->G;
  2156   000E96  0100               	movlb	0	; () banked
  2157   000E98  EE20 F002          	lfsr	2,2
  2158   000E9C  5189               	movf	colorDetect@whiteRGBVal& (0+255),w,b
  2159   000E9E  26D9               	addwf	fsr2l,f,c
  2160   000EA0  518A               	movf	(colorDetect@whiteRGBVal+1)& (0+255),w,b
  2161   000EA2  22DA               	addwfc	fsr2h,f,c
  2162   000EA4  CFDE F08F          	movff	postinc2,??_colorDetect
  2163   000EA8  CFDD F090          	movff	postdec2,??_colorDetect+1
  2164   000EAC  C08F  F005         	movff	??_colorDetect,___xxtofl@val
  2165   000EB0  C090  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  2166   000EB4  6A07               	clrf	(___xxtofl@val+2)^0,c
  2167   000EB6  6A08               	clrf	(___xxtofl@val+3)^0,c
  2168   000EB8  0E00               	movlw	0
  2169   000EBA  EC8A  F015         	call	___xxtofl
  2170   000EBE  C005  F0A9         	movff	?___xxtofl,colorDetect@whiteG
  2171   000EC2  C006  F0AA         	movff	?___xxtofl+1,colorDetect@whiteG+1
  2172   000EC6  C007  F0AB         	movff	?___xxtofl+2,colorDetect@whiteG+2
  2173   000ECA  C008  F0AC         	movff	?___xxtofl+3,colorDetect@whiteG+3
  2174   000ECE                     
  2175                           ;MazeRobot.X/color.c: 141:         float whiteB = whiteRGBVal->B;
  2176   000ECE  0100               	movlb	0	; () banked
  2177   000ED0  EE20 F004          	lfsr	2,4
  2178   000ED4  5189               	movf	colorDetect@whiteRGBVal& (0+255),w,b
  2179   000ED6  26D9               	addwf	fsr2l,f,c
  2180   000ED8  518A               	movf	(colorDetect@whiteRGBVal+1)& (0+255),w,b
  2181   000EDA  22DA               	addwfc	fsr2h,f,c
  2182   000EDC  CFDE F08F          	movff	postinc2,??_colorDetect
  2183   000EE0  CFDD F090          	movff	postdec2,??_colorDetect+1
  2184   000EE4  C08F  F005         	movff	??_colorDetect,___xxtofl@val
  2185   000EE8  C090  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  2186   000EEC  6A07               	clrf	(___xxtofl@val+2)^0,c
  2187   000EEE  6A08               	clrf	(___xxtofl@val+3)^0,c
  2188   000EF0  0E00               	movlw	0
  2189   000EF2  EC8A  F015         	call	___xxtofl
  2190   000EF6  C005  F0AD         	movff	?___xxtofl,colorDetect@whiteB
  2191   000EFA  C006  F0AE         	movff	?___xxtofl+1,colorDetect@whiteB+1
  2192   000EFE  C007  F0AF         	movff	?___xxtofl+2,colorDetect@whiteB+2
  2193   000F02  C008  F0B0         	movff	?___xxtofl+3,colorDetect@whiteB+3
  2194   000F06  0100               	movlb	0	; () banked
  2195   000F08  EE20 F006          	lfsr	2,6
  2196   000F0C  5189               	movf	colorDetect@whiteRGBVal& (0+255),w,b
  2197   000F0E  26D9               	addwf	fsr2l,f,c
  2198   000F10  518A               	movf	(colorDetect@whiteRGBVal+1)& (0+255),w,b
  2199   000F12  22DA               	addwfc	fsr2h,f,c
  2200   000F14  CFDE F08F          	movff	postinc2,??_colorDetect
  2201   000F18  CFDD F090          	movff	postdec2,??_colorDetect+1
  2202   000F1C  C08F  F005         	movff	??_colorDetect,___xxtofl@val
  2203   000F20  C090  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  2204   000F24  6A07               	clrf	(___xxtofl@val+2)^0,c
  2205   000F26  6A08               	clrf	(___xxtofl@val+3)^0,c
  2206   000F28  0E00               	movlw	0
  2207   000F2A  EC8A  F015         	call	___xxtofl
  2208   000F2E                     
  2209                           ;MazeRobot.X/color.c: 144:         float redPrint = (RGBVal.R-ambientR)/((whiteR-(float)
      +                          ambientR)*(clearRef));
  2210   000F2E  0100               	movlb	0	; () banked
  2211   000F30  51B1               	movf	colorDetect@ambientR& (0+255),w,b
  2212   000F32  5DB7               	subwf	colorDetect@RGBVal& (0+255),w,b
  2213   000F34  6F8F               	movwf	??_colorDetect& (0+255),b
  2214   000F36  51B2               	movf	(colorDetect@ambientR+1)& (0+255),w,b
  2215   000F38  59B8               	subwfb	(colorDetect@RGBVal+1)& (0+255),w,b
  2216   000F3A  6F90               	movwf	(??_colorDetect+1)& (0+255),b
  2217   000F3C  C08F  F005         	movff	??_colorDetect,___xxtofl@val
  2218   000F40  C090  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  2219   000F44  6A07               	clrf	(___xxtofl@val+2)^0,c
  2220   000F46  6A08               	clrf	(___xxtofl@val+3)^0,c
  2221   000F48  0E00               	movlw	0
  2222   000F4A  EC8A  F015         	call	___xxtofl
  2223   000F4E  C005  F036         	movff	?___xxtofl,___fldiv@b
  2224   000F52  C006  F037         	movff	?___xxtofl+1,___fldiv@b+1
  2225   000F56  C007  F038         	movff	?___xxtofl+2,___fldiv@b+2
  2226   000F5A  C008  F039         	movff	?___xxtofl+3,___fldiv@b+3
  2227   000F5E  C083  F021         	movff	colorDetect@clearRef,___flmul@a
  2228   000F62  C084  F022         	movff	colorDetect@clearRef+1,___flmul@a+1
  2229   000F66  C085  F023         	movff	colorDetect@clearRef+2,___flmul@a+2
  2230   000F6A  C086  F024         	movff	colorDetect@clearRef+3,___flmul@a+3
  2231   000F6E  C0B1  F005         	movff	colorDetect@ambientR,___xxtofl@val
  2232   000F72  C0B2  F006         	movff	colorDetect@ambientR+1,___xxtofl@val+1
  2233   000F76  6A07               	clrf	(___xxtofl@val+2)^0,c
  2234   000F78  6A08               	clrf	(___xxtofl@val+3)^0,c
  2235   000F7A  0E00               	movlw	0
  2236   000F7C  EC8A  F015         	call	___xxtofl
  2237   000F80  C005  F019         	movff	?___xxtofl,___flsub@a
  2238   000F84  C006  F01A         	movff	?___xxtofl+1,___flsub@a+1
  2239   000F88  C007  F01B         	movff	?___xxtofl+2,___flsub@a+2
  2240   000F8C  C008  F01C         	movff	?___xxtofl+3,___flsub@a+3
  2241   000F90  C0A5  F015         	movff	colorDetect@whiteR,___flsub@b
  2242   000F94  C0A6  F016         	movff	colorDetect@whiteR+1,___flsub@b+1
  2243   000F98  C0A7  F017         	movff	colorDetect@whiteR+2,___flsub@b+2
  2244   000F9C  C0A8  F018         	movff	colorDetect@whiteR+3,___flsub@b+3
  2245   000FA0  ECD1  F021         	call	___flsub	;wreg free
  2246   000FA4  C015  F01D         	movff	?___flsub,___flmul@b
  2247   000FA8  C016  F01E         	movff	?___flsub+1,___flmul@b+1
  2248   000FAC  C017  F01F         	movff	?___flsub+2,___flmul@b+2
  2249   000FB0  C018  F020         	movff	?___flsub+3,___flmul@b+3
  2250   000FB4  EC72  F00F         	call	___flmul	;wreg free
  2251   000FB8  C01D  F03A         	movff	?___flmul,___fldiv@a
  2252   000FBC  C01E  F03B         	movff	?___flmul+1,___fldiv@a+1
  2253   000FC0  C01F  F03C         	movff	?___flmul+2,___fldiv@a+2
  2254   000FC4  C020  F03D         	movff	?___flmul+3,___fldiv@a+3
  2255   000FC8  EC87  F011         	call	___fldiv	;wreg free
  2256   000FCC  C036  F0BF         	movff	?___fldiv,colorDetect@redPrint
  2257   000FD0  C037  F0C0         	movff	?___fldiv+1,colorDetect@redPrint+1
  2258   000FD4  C038  F0C1         	movff	?___fldiv+2,colorDetect@redPrint+2
  2259   000FD8  C039  F0C2         	movff	?___fldiv+3,colorDetect@redPrint+3
  2260   000FDC                     
  2261                           ;MazeRobot.X/color.c: 145:         float greenPrint = (RGBVal.G-ambientG)/((whiteG-(floa
      +                          t)ambientG)*(clearRef));
  2262   000FDC  0100               	movlb	0	; () banked
  2263   000FDE  51B3               	movf	colorDetect@ambientG& (0+255),w,b
  2264   000FE0  5DB9               	subwf	(colorDetect@RGBVal+2)& (0+255),w,b
  2265   000FE2  6F8F               	movwf	??_colorDetect& (0+255),b
  2266   000FE4  51B4               	movf	(colorDetect@ambientG+1)& (0+255),w,b
  2267   000FE6  59BA               	subwfb	(colorDetect@RGBVal+3)& (0+255),w,b
  2268   000FE8  6F90               	movwf	(??_colorDetect+1)& (0+255),b
  2269   000FEA  C08F  F005         	movff	??_colorDetect,___xxtofl@val
  2270   000FEE  C090  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  2271   000FF2  6A07               	clrf	(___xxtofl@val+2)^0,c
  2272   000FF4  6A08               	clrf	(___xxtofl@val+3)^0,c
  2273   000FF6  0E00               	movlw	0
  2274   000FF8  EC8A  F015         	call	___xxtofl
  2275   000FFC  C005  F036         	movff	?___xxtofl,___fldiv@b
  2276   001000  C006  F037         	movff	?___xxtofl+1,___fldiv@b+1
  2277   001004  C007  F038         	movff	?___xxtofl+2,___fldiv@b+2
  2278   001008  C008  F039         	movff	?___xxtofl+3,___fldiv@b+3
  2279   00100C  C083  F021         	movff	colorDetect@clearRef,___flmul@a
  2280   001010  C084  F022         	movff	colorDetect@clearRef+1,___flmul@a+1
  2281   001014  C085  F023         	movff	colorDetect@clearRef+2,___flmul@a+2
  2282   001018  C086  F024         	movff	colorDetect@clearRef+3,___flmul@a+3
  2283   00101C  C0B3  F005         	movff	colorDetect@ambientG,___xxtofl@val
  2284   001020  C0B4  F006         	movff	colorDetect@ambientG+1,___xxtofl@val+1
  2285   001024  6A07               	clrf	(___xxtofl@val+2)^0,c
  2286   001026  6A08               	clrf	(___xxtofl@val+3)^0,c
  2287   001028  0E00               	movlw	0
  2288   00102A  EC8A  F015         	call	___xxtofl
  2289   00102E  C005  F019         	movff	?___xxtofl,___flsub@a
  2290   001032  C006  F01A         	movff	?___xxtofl+1,___flsub@a+1
  2291   001036  C007  F01B         	movff	?___xxtofl+2,___flsub@a+2
  2292   00103A  C008  F01C         	movff	?___xxtofl+3,___flsub@a+3
  2293   00103E  C0A9  F015         	movff	colorDetect@whiteG,___flsub@b
  2294   001042  C0AA  F016         	movff	colorDetect@whiteG+1,___flsub@b+1
  2295   001046  C0AB  F017         	movff	colorDetect@whiteG+2,___flsub@b+2
  2296   00104A  C0AC  F018         	movff	colorDetect@whiteG+3,___flsub@b+3
  2297   00104E  ECD1  F021         	call	___flsub	;wreg free
  2298   001052  C015  F01D         	movff	?___flsub,___flmul@b
  2299   001056  C016  F01E         	movff	?___flsub+1,___flmul@b+1
  2300   00105A  C017  F01F         	movff	?___flsub+2,___flmul@b+2
  2301   00105E  C018  F020         	movff	?___flsub+3,___flmul@b+3
  2302   001062  EC72  F00F         	call	___flmul	;wreg free
  2303   001066  C01D  F03A         	movff	?___flmul,___fldiv@a
  2304   00106A  C01E  F03B         	movff	?___flmul+1,___fldiv@a+1
  2305   00106E  C01F  F03C         	movff	?___flmul+2,___fldiv@a+2
  2306   001072  C020  F03D         	movff	?___flmul+3,___fldiv@a+3
  2307   001076  EC87  F011         	call	___fldiv	;wreg free
  2308   00107A  C036  F0C3         	movff	?___fldiv,colorDetect@greenPrint
  2309   00107E  C037  F0C4         	movff	?___fldiv+1,colorDetect@greenPrint+1
  2310   001082  C038  F0C5         	movff	?___fldiv+2,colorDetect@greenPrint+2
  2311   001086  C039  F0C6         	movff	?___fldiv+3,colorDetect@greenPrint+3
  2312   00108A                     
  2313                           ;MazeRobot.X/color.c: 146:         float bluePrint = (RGBVal.B-ambientB)/((whiteB-(float
      +                          )ambientB)*(clearRef));
  2314   00108A  0100               	movlb	0	; () banked
  2315   00108C  51B5               	movf	colorDetect@ambientB& (0+255),w,b
  2316   00108E  5DBB               	subwf	(colorDetect@RGBVal+4)& (0+255),w,b
  2317   001090  6F8F               	movwf	??_colorDetect& (0+255),b
  2318   001092  51B6               	movf	(colorDetect@ambientB+1)& (0+255),w,b
  2319   001094  59BC               	subwfb	(colorDetect@RGBVal+5)& (0+255),w,b
  2320   001096  6F90               	movwf	(??_colorDetect+1)& (0+255),b
  2321   001098  C08F  F005         	movff	??_colorDetect,___xxtofl@val
  2322   00109C  C090  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  2323   0010A0  6A07               	clrf	(___xxtofl@val+2)^0,c
  2324   0010A2  6A08               	clrf	(___xxtofl@val+3)^0,c
  2325   0010A4  0E00               	movlw	0
  2326   0010A6  EC8A  F015         	call	___xxtofl
  2327   0010AA  C005  F036         	movff	?___xxtofl,___fldiv@b
  2328   0010AE  C006  F037         	movff	?___xxtofl+1,___fldiv@b+1
  2329   0010B2  C007  F038         	movff	?___xxtofl+2,___fldiv@b+2
  2330   0010B6  C008  F039         	movff	?___xxtofl+3,___fldiv@b+3
  2331   0010BA  C083  F021         	movff	colorDetect@clearRef,___flmul@a
  2332   0010BE  C084  F022         	movff	colorDetect@clearRef+1,___flmul@a+1
  2333   0010C2  C085  F023         	movff	colorDetect@clearRef+2,___flmul@a+2
  2334   0010C6  C086  F024         	movff	colorDetect@clearRef+3,___flmul@a+3
  2335   0010CA  C0B5  F005         	movff	colorDetect@ambientB,___xxtofl@val
  2336   0010CE  C0B6  F006         	movff	colorDetect@ambientB+1,___xxtofl@val+1
  2337   0010D2  6A07               	clrf	(___xxtofl@val+2)^0,c
  2338   0010D4  6A08               	clrf	(___xxtofl@val+3)^0,c
  2339   0010D6  0E00               	movlw	0
  2340   0010D8  EC8A  F015         	call	___xxtofl
  2341   0010DC  C005  F019         	movff	?___xxtofl,___flsub@a
  2342   0010E0  C006  F01A         	movff	?___xxtofl+1,___flsub@a+1
  2343   0010E4  C007  F01B         	movff	?___xxtofl+2,___flsub@a+2
  2344   0010E8  C008  F01C         	movff	?___xxtofl+3,___flsub@a+3
  2345   0010EC  C0AD  F015         	movff	colorDetect@whiteB,___flsub@b
  2346   0010F0  C0AE  F016         	movff	colorDetect@whiteB+1,___flsub@b+1
  2347   0010F4  C0AF  F017         	movff	colorDetect@whiteB+2,___flsub@b+2
  2348   0010F8  C0B0  F018         	movff	colorDetect@whiteB+3,___flsub@b+3
  2349   0010FC  ECD1  F021         	call	___flsub	;wreg free
  2350   001100  C015  F01D         	movff	?___flsub,___flmul@b
  2351   001104  C016  F01E         	movff	?___flsub+1,___flmul@b+1
  2352   001108  C017  F01F         	movff	?___flsub+2,___flmul@b+2
  2353   00110C  C018  F020         	movff	?___flsub+3,___flmul@b+3
  2354   001110  EC72  F00F         	call	___flmul	;wreg free
  2355   001114  C01D  F03A         	movff	?___flmul,___fldiv@a
  2356   001118  C01E  F03B         	movff	?___flmul+1,___fldiv@a+1
  2357   00111C  C01F  F03C         	movff	?___flmul+2,___fldiv@a+2
  2358   001120  C020  F03D         	movff	?___flmul+3,___fldiv@a+3
  2359   001124  EC87  F011         	call	___fldiv	;wreg free
  2360   001128  C036  F0C7         	movff	?___fldiv,colorDetect@bluePrint
  2361   00112C  C037  F0C8         	movff	?___fldiv+1,colorDetect@bluePrint+1
  2362   001130  C038  F0C9         	movff	?___fldiv+2,colorDetect@bluePrint+2
  2363   001134  C039  F0CA         	movff	?___fldiv+3,colorDetect@bluePrint+3
  2364   001138                     
  2365                           ;MazeRobot.X/color.c: 148:         if ((redPrint < 0) | (redPrint > 2)) { redPrint = 0.0
      +                          ;}
  2366   001138  0100               	movlb	0	; () banked
  2367   00113A  BFC2               	btfsc	(colorDetect@redPrint+3)& (0+255),7,b
  2368   00113C  EFA2  F008         	goto	u6511
  2369   001140  EFA4  F008         	goto	u6510
  2370   001144                     u6511:
  2371   001144  EFBD  F008         	goto	l5720
  2372   001148                     u6510:
  2373   001148                     
  2374                           ; BSR set to: 0
  2375   001148  0E00               	movlw	0
  2376   00114A  6E1D               	movwf	___flge@ff1^0,c
  2377   00114C  0E00               	movlw	0
  2378   00114E  6E1E               	movwf	(___flge@ff1+1)^0,c
  2379   001150  0E00               	movlw	0
  2380   001152  6E1F               	movwf	(___flge@ff1+2)^0,c
  2381   001154  0E40               	movlw	64
  2382   001156  6E20               	movwf	(___flge@ff1+3)^0,c
  2383   001158  C0BF  F021         	movff	colorDetect@redPrint,___flge@ff2
  2384   00115C  C0C0  F022         	movff	colorDetect@redPrint+1,___flge@ff2+1
  2385   001160  C0C1  F023         	movff	colorDetect@redPrint+2,___flge@ff2+2
  2386   001164  C0C2  F024         	movff	colorDetect@redPrint+3,___flge@ff2+3
  2387   001168  EC51  F01C         	call	___flge	;wreg free
  2388   00116C  B0D8               	btfsc	status,0,c
  2389   00116E  EFBB  F008         	goto	u6521
  2390   001172  EFBD  F008         	goto	u6520
  2391   001176                     u6521:
  2392   001176  EFC6  F008         	goto	l5722
  2393   00117A                     u6520:
  2394   00117A                     l5720:
  2395   00117A  0E00               	movlw	0
  2396   00117C  0100               	movlb	0	; () banked
  2397   00117E  6FBF               	movwf	colorDetect@redPrint& (0+255),b
  2398   001180  0E00               	movlw	0
  2399   001182  6FC0               	movwf	(colorDetect@redPrint+1)& (0+255),b
  2400   001184  0E00               	movlw	0
  2401   001186  6FC1               	movwf	(colorDetect@redPrint+2)& (0+255),b
  2402   001188  0E00               	movlw	0
  2403   00118A  6FC2               	movwf	(colorDetect@redPrint+3)& (0+255),b
  2404   00118C                     l5722:
  2405                           
  2406                           ;MazeRobot.X/color.c: 149:         if ((greenPrint < 0) | (greenPrint > 2)) {greenPrint 
      +                          = 0.0;}
  2407   00118C  0100               	movlb	0	; () banked
  2408   00118E  BFC6               	btfsc	(colorDetect@greenPrint+3)& (0+255),7,b
  2409   001190  EFCC  F008         	goto	u6531
  2410   001194  EFCE  F008         	goto	u6530
  2411   001198                     u6531:
  2412   001198  EFE7  F008         	goto	l5726
  2413   00119C                     u6530:
  2414   00119C                     
  2415                           ; BSR set to: 0
  2416   00119C  0E00               	movlw	0
  2417   00119E  6E1D               	movwf	___flge@ff1^0,c
  2418   0011A0  0E00               	movlw	0
  2419   0011A2  6E1E               	movwf	(___flge@ff1+1)^0,c
  2420   0011A4  0E00               	movlw	0
  2421   0011A6  6E1F               	movwf	(___flge@ff1+2)^0,c
  2422   0011A8  0E40               	movlw	64
  2423   0011AA  6E20               	movwf	(___flge@ff1+3)^0,c
  2424   0011AC  C0C3  F021         	movff	colorDetect@greenPrint,___flge@ff2
  2425   0011B0  C0C4  F022         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  2426   0011B4  C0C5  F023         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  2427   0011B8  C0C6  F024         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  2428   0011BC  EC51  F01C         	call	___flge	;wreg free
  2429   0011C0  B0D8               	btfsc	status,0,c
  2430   0011C2  EFE5  F008         	goto	u6541
  2431   0011C6  EFE7  F008         	goto	u6540
  2432   0011CA                     u6541:
  2433   0011CA  EFF0  F008         	goto	l5728
  2434   0011CE                     u6540:
  2435   0011CE                     l5726:
  2436   0011CE  0E00               	movlw	0
  2437   0011D0  0100               	movlb	0	; () banked
  2438   0011D2  6FC3               	movwf	colorDetect@greenPrint& (0+255),b
  2439   0011D4  0E00               	movlw	0
  2440   0011D6  6FC4               	movwf	(colorDetect@greenPrint+1)& (0+255),b
  2441   0011D8  0E00               	movlw	0
  2442   0011DA  6FC5               	movwf	(colorDetect@greenPrint+2)& (0+255),b
  2443   0011DC  0E00               	movlw	0
  2444   0011DE  6FC6               	movwf	(colorDetect@greenPrint+3)& (0+255),b
  2445   0011E0                     l5728:
  2446                           
  2447                           ;MazeRobot.X/color.c: 150:         if ((bluePrint < 0) | (bluePrint > 2)){ bluePrint = 0
      +                          .0;}
  2448   0011E0  0100               	movlb	0	; () banked
  2449   0011E2  BFCA               	btfsc	(colorDetect@bluePrint+3)& (0+255),7,b
  2450   0011E4  EFF6  F008         	goto	u6551
  2451   0011E8  EFF8  F008         	goto	u6550
  2452   0011EC                     u6551:
  2453   0011EC  EF11  F009         	goto	l5732
  2454   0011F0                     u6550:
  2455   0011F0                     
  2456                           ; BSR set to: 0
  2457   0011F0  0E00               	movlw	0
  2458   0011F2  6E1D               	movwf	___flge@ff1^0,c
  2459   0011F4  0E00               	movlw	0
  2460   0011F6  6E1E               	movwf	(___flge@ff1+1)^0,c
  2461   0011F8  0E00               	movlw	0
  2462   0011FA  6E1F               	movwf	(___flge@ff1+2)^0,c
  2463   0011FC  0E40               	movlw	64
  2464   0011FE  6E20               	movwf	(___flge@ff1+3)^0,c
  2465   001200  C0C7  F021         	movff	colorDetect@bluePrint,___flge@ff2
  2466   001204  C0C8  F022         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  2467   001208  C0C9  F023         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  2468   00120C  C0CA  F024         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  2469   001210  EC51  F01C         	call	___flge	;wreg free
  2470   001214  B0D8               	btfsc	status,0,c
  2471   001216  EF0F  F009         	goto	u6561
  2472   00121A  EF11  F009         	goto	u6560
  2473   00121E                     u6561:
  2474   00121E  EF1A  F009         	goto	l5734
  2475   001222                     u6560:
  2476   001222                     l5732:
  2477   001222  0E00               	movlw	0
  2478   001224  0100               	movlb	0	; () banked
  2479   001226  6FC7               	movwf	colorDetect@bluePrint& (0+255),b
  2480   001228  0E00               	movlw	0
  2481   00122A  6FC8               	movwf	(colorDetect@bluePrint+1)& (0+255),b
  2482   00122C  0E00               	movlw	0
  2483   00122E  6FC9               	movwf	(colorDetect@bluePrint+2)& (0+255),b
  2484   001230  0E00               	movlw	0
  2485   001232  6FCA               	movwf	(colorDetect@bluePrint+3)& (0+255),b
  2486   001234                     l5734:
  2487                           
  2488                           ;MazeRobot.X/color.c: 153:         if ((redPrint > 0.9) & (greenPrint > 0.9) & (bluePrin
      +                          t > 0.9)){
  2489   001234  0E66               	movlw	102
  2490   001236  6E1D               	movwf	___flge@ff1^0,c
  2491   001238  0E66               	movlw	102
  2492   00123A  6E1E               	movwf	(___flge@ff1+1)^0,c
  2493   00123C  0E66               	movlw	102
  2494   00123E  6E1F               	movwf	(___flge@ff1+2)^0,c
  2495   001240  0E3F               	movlw	63
  2496   001242  6E20               	movwf	(___flge@ff1+3)^0,c
  2497   001244  C0BF  F021         	movff	colorDetect@redPrint,___flge@ff2
  2498   001248  C0C0  F022         	movff	colorDetect@redPrint+1,___flge@ff2+1
  2499   00124C  C0C1  F023         	movff	colorDetect@redPrint+2,___flge@ff2+2
  2500   001250  C0C2  F024         	movff	colorDetect@redPrint+3,___flge@ff2+3
  2501   001254  EC51  F01C         	call	___flge	;wreg free
  2502   001258  B0D8               	btfsc	status,0,c
  2503   00125A  EF31  F009         	goto	u6571
  2504   00125E  EF33  F009         	goto	u6570
  2505   001262                     u6571:
  2506   001262  EF77  F009         	goto	l5742
  2507   001266                     u6570:
  2508   001266  0E66               	movlw	102
  2509   001268  6E1D               	movwf	___flge@ff1^0,c
  2510   00126A  0E66               	movlw	102
  2511   00126C  6E1E               	movwf	(___flge@ff1+1)^0,c
  2512   00126E  0E66               	movlw	102
  2513   001270  6E1F               	movwf	(___flge@ff1+2)^0,c
  2514   001272  0E3F               	movlw	63
  2515   001274  6E20               	movwf	(___flge@ff1+3)^0,c
  2516   001276  C0C3  F021         	movff	colorDetect@greenPrint,___flge@ff2
  2517   00127A  C0C4  F022         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  2518   00127E  C0C5  F023         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  2519   001282  C0C6  F024         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  2520   001286  EC51  F01C         	call	___flge	;wreg free
  2521   00128A  B0D8               	btfsc	status,0,c
  2522   00128C  EF4A  F009         	goto	u6581
  2523   001290  EF4C  F009         	goto	u6580
  2524   001294                     u6581:
  2525   001294  EF77  F009         	goto	l5742
  2526   001298                     u6580:
  2527   001298  0E66               	movlw	102
  2528   00129A  6E1D               	movwf	___flge@ff1^0,c
  2529   00129C  0E66               	movlw	102
  2530   00129E  6E1E               	movwf	(___flge@ff1+1)^0,c
  2531   0012A0  0E66               	movlw	102
  2532   0012A2  6E1F               	movwf	(___flge@ff1+2)^0,c
  2533   0012A4  0E3F               	movlw	63
  2534   0012A6  6E20               	movwf	(___flge@ff1+3)^0,c
  2535   0012A8  C0C7  F021         	movff	colorDetect@bluePrint,___flge@ff2
  2536   0012AC  C0C8  F022         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  2537   0012B0  C0C9  F023         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  2538   0012B4  C0CA  F024         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  2539   0012B8  EC51  F01C         	call	___flge	;wreg free
  2540   0012BC  B0D8               	btfsc	status,0,c
  2541   0012BE  EF63  F009         	goto	u6591
  2542   0012C2  EF65  F009         	goto	u6590
  2543   0012C6                     u6591:
  2544   0012C6  EF77  F009         	goto	l5742
  2545   0012CA                     u6590:
  2546   0012CA                     
  2547                           ;MazeRobot.X/color.c: 154:         _delay((unsigned long)((2)*(64000000/4000.0)));
  2548   0012CA  0E2A               	movlw	42
  2549   0012CC  0100               	movlb	0	; () banked
  2550   0012CE  6F8F               	movwf	??_colorDetect& (0+255),b
  2551   0012D0  0E8D               	movlw	141
  2552   0012D2                     u7077:
  2553   0012D2  2EE8               	decfsz	wreg,f,c
  2554   0012D4  D7FE               	bra	u7077
  2555   0012D6  2F8F               	decfsz	??_colorDetect& (0+255),f,b
  2556   0012D8  D7FC               	bra	u7077
  2557   0012DA  D000               	nop2	
  2558                           
  2559                           ;MazeRobot.X/color.c: 156:         _delay((unsigned long)((2)*(64000000/4000.0)));
  2560   0012DC  0E2A               	movlw	42
  2561   0012DE  0100               	movlb	0	; () banked
  2562   0012E0  6F8F               	movwf	??_colorDetect& (0+255),b
  2563   0012E2  0E8D               	movlw	141
  2564   0012E4                     u7087:
  2565   0012E4  2EE8               	decfsz	wreg,f,c
  2566   0012E6  D7FE               	bra	u7087
  2567   0012E8  2F8F               	decfsz	??_colorDetect& (0+255),f,b
  2568   0012EA  D7FC               	bra	u7087
  2569   0012EC  D000               	nop2	
  2570   0012EE                     l5742:
  2571                           
  2572                           ;MazeRobot.X/color.c: 160:         if ((redPrint > 1.5) & (redPrint - greenPrint > 0.8) 
      +                          & (redPrint -bluePrint > 0.8)){
  2573   0012EE  0E00               	movlw	0
  2574   0012F0  6E1D               	movwf	___flge@ff1^0,c
  2575   0012F2  0E00               	movlw	0
  2576   0012F4  6E1E               	movwf	(___flge@ff1+1)^0,c
  2577   0012F6  0EC0               	movlw	192
  2578   0012F8  6E1F               	movwf	(___flge@ff1+2)^0,c
  2579   0012FA  0E3F               	movlw	63
  2580   0012FC  6E20               	movwf	(___flge@ff1+3)^0,c
  2581   0012FE  C0BF  F021         	movff	colorDetect@redPrint,___flge@ff2
  2582   001302  C0C0  F022         	movff	colorDetect@redPrint+1,___flge@ff2+1
  2583   001306  C0C1  F023         	movff	colorDetect@redPrint+2,___flge@ff2+2
  2584   00130A  C0C2  F024         	movff	colorDetect@redPrint+3,___flge@ff2+3
  2585   00130E  EC51  F01C         	call	___flge	;wreg free
  2586   001312  B0D8               	btfsc	status,0,c
  2587   001314  EF8E  F009         	goto	u6601
  2588   001318  EF90  F009         	goto	u6600
  2589   00131C                     u6601:
  2590   00131C  EFF9  F009         	goto	l5752
  2591   001320                     u6600:
  2592   001320  0ECD               	movlw	205
  2593   001322  6E1D               	movwf	___flge@ff1^0,c
  2594   001324  0ECC               	movlw	204
  2595   001326  6E1E               	movwf	(___flge@ff1+1)^0,c
  2596   001328  0E4C               	movlw	76
  2597   00132A  6E1F               	movwf	(___flge@ff1+2)^0,c
  2598   00132C  0E3F               	movlw	63
  2599   00132E  6E20               	movwf	(___flge@ff1+3)^0,c
  2600   001330  C0C3  F019         	movff	colorDetect@greenPrint,___flsub@a
  2601   001334  C0C4  F01A         	movff	colorDetect@greenPrint+1,___flsub@a+1
  2602   001338  C0C5  F01B         	movff	colorDetect@greenPrint+2,___flsub@a+2
  2603   00133C  C0C6  F01C         	movff	colorDetect@greenPrint+3,___flsub@a+3
  2604   001340  C0BF  F015         	movff	colorDetect@redPrint,___flsub@b
  2605   001344  C0C0  F016         	movff	colorDetect@redPrint+1,___flsub@b+1
  2606   001348  C0C1  F017         	movff	colorDetect@redPrint+2,___flsub@b+2
  2607   00134C  C0C2  F018         	movff	colorDetect@redPrint+3,___flsub@b+3
  2608   001350  ECD1  F021         	call	___flsub	;wreg free
  2609   001354  C015  F021         	movff	?___flsub,___flge@ff2
  2610   001358  C016  F022         	movff	?___flsub+1,___flge@ff2+1
  2611   00135C  C017  F023         	movff	?___flsub+2,___flge@ff2+2
  2612   001360  C018  F024         	movff	?___flsub+3,___flge@ff2+3
  2613   001364  EC51  F01C         	call	___flge	;wreg free
  2614   001368  B0D8               	btfsc	status,0,c
  2615   00136A  EFB9  F009         	goto	u6611
  2616   00136E  EFBB  F009         	goto	u6610
  2617   001372                     u6611:
  2618   001372  EFF9  F009         	goto	l5752
  2619   001376                     u6610:
  2620   001376  0ECD               	movlw	205
  2621   001378  6E1D               	movwf	___flge@ff1^0,c
  2622   00137A  0ECC               	movlw	204
  2623   00137C  6E1E               	movwf	(___flge@ff1+1)^0,c
  2624   00137E  0E4C               	movlw	76
  2625   001380  6E1F               	movwf	(___flge@ff1+2)^0,c
  2626   001382  0E3F               	movlw	63
  2627   001384  6E20               	movwf	(___flge@ff1+3)^0,c
  2628   001386  C0C7  F019         	movff	colorDetect@bluePrint,___flsub@a
  2629   00138A  C0C8  F01A         	movff	colorDetect@bluePrint+1,___flsub@a+1
  2630   00138E  C0C9  F01B         	movff	colorDetect@bluePrint+2,___flsub@a+2
  2631   001392  C0CA  F01C         	movff	colorDetect@bluePrint+3,___flsub@a+3
  2632   001396  C0BF  F015         	movff	colorDetect@redPrint,___flsub@b
  2633   00139A  C0C0  F016         	movff	colorDetect@redPrint+1,___flsub@b+1
  2634   00139E  C0C1  F017         	movff	colorDetect@redPrint+2,___flsub@b+2
  2635   0013A2  C0C2  F018         	movff	colorDetect@redPrint+3,___flsub@b+3
  2636   0013A6  ECD1  F021         	call	___flsub	;wreg free
  2637   0013AA  C015  F021         	movff	?___flsub,___flge@ff2
  2638   0013AE  C016  F022         	movff	?___flsub+1,___flge@ff2+1
  2639   0013B2  C017  F023         	movff	?___flsub+2,___flge@ff2+2
  2640   0013B6  C018  F024         	movff	?___flsub+3,___flge@ff2+3
  2641   0013BA  EC51  F01C         	call	___flge	;wreg free
  2642   0013BE  B0D8               	btfsc	status,0,c
  2643   0013C0  EFE4  F009         	goto	u6621
  2644   0013C4  EFE6  F009         	goto	u6620
  2645   0013C8                     u6621:
  2646   0013C8  EFF9  F009         	goto	l5752
  2647   0013CC                     u6620:
  2648   0013CC                     
  2649                           ;MazeRobot.X/color.c: 161:             turnRight_90(mL,mR);
  2650   0013CC  C08B  F01E         	movff	colorDetect@mL,turnRight_90@mL
  2651   0013D0  C08C  F01F         	movff	colorDetect@mL+1,turnRight_90@mL+1
  2652   0013D4  C08D  F020         	movff	colorDetect@mR,turnRight_90@mR
  2653   0013D8  C08E  F021         	movff	colorDetect@mR+1,turnRight_90@mR+1
  2654   0013DC  EC75  F01A         	call	_turnRight_90	;wreg free
  2655   0013E0                     
  2656                           ;MazeRobot.X/color.c: 162:             _delay((unsigned long)((2)*(64000000/4000.0)));
  2657   0013E0  0E2A               	movlw	42
  2658   0013E2  0100               	movlb	0	; () banked
  2659   0013E4  6F8F               	movwf	??_colorDetect& (0+255),b
  2660   0013E6  0E8D               	movlw	141
  2661   0013E8                     u7097:
  2662   0013E8  2EE8               	decfsz	wreg,f,c
  2663   0013EA  D7FE               	bra	u7097
  2664   0013EC  2F8F               	decfsz	??_colorDetect& (0+255),f,b
  2665   0013EE  D7FC               	bra	u7097
  2666   0013F0  D000               	nop2	
  2667   0013F2                     l5752:
  2668                           
  2669                           ;MazeRobot.X/color.c: 166:         if ((redPrint > 1.3) & (greenPrint > 0.5) & (bluePrin
      +                          t > 0.5)){
  2670   0013F2  0E66               	movlw	102
  2671   0013F4  6E1D               	movwf	___flge@ff1^0,c
  2672   0013F6  0E66               	movlw	102
  2673   0013F8  6E1E               	movwf	(___flge@ff1+1)^0,c
  2674   0013FA  0EA6               	movlw	166
  2675   0013FC  6E1F               	movwf	(___flge@ff1+2)^0,c
  2676   0013FE  0E3F               	movlw	63
  2677   001400  6E20               	movwf	(___flge@ff1+3)^0,c
  2678   001402  C0BF  F021         	movff	colorDetect@redPrint,___flge@ff2
  2679   001406  C0C0  F022         	movff	colorDetect@redPrint+1,___flge@ff2+1
  2680   00140A  C0C1  F023         	movff	colorDetect@redPrint+2,___flge@ff2+2
  2681   00140E  C0C2  F024         	movff	colorDetect@redPrint+3,___flge@ff2+3
  2682   001412  EC51  F01C         	call	___flge	;wreg free
  2683   001416  B0D8               	btfsc	status,0,c
  2684   001418  EF10  F00A         	goto	u6631
  2685   00141C  EF12  F00A         	goto	u6630
  2686   001420                     u6631:
  2687   001420  EF60  F00A         	goto	l5764
  2688   001424                     u6630:
  2689   001424  0E00               	movlw	0
  2690   001426  6E1D               	movwf	___flge@ff1^0,c
  2691   001428  0E00               	movlw	0
  2692   00142A  6E1E               	movwf	(___flge@ff1+1)^0,c
  2693   00142C  0E00               	movlw	0
  2694   00142E  6E1F               	movwf	(___flge@ff1+2)^0,c
  2695   001430  0E3F               	movlw	63
  2696   001432  6E20               	movwf	(___flge@ff1+3)^0,c
  2697   001434  C0C3  F021         	movff	colorDetect@greenPrint,___flge@ff2
  2698   001438  C0C4  F022         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  2699   00143C  C0C5  F023         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  2700   001440  C0C6  F024         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  2701   001444  EC51  F01C         	call	___flge	;wreg free
  2702   001448  B0D8               	btfsc	status,0,c
  2703   00144A  EF29  F00A         	goto	u6641
  2704   00144E  EF2B  F00A         	goto	u6640
  2705   001452                     u6641:
  2706   001452  EF60  F00A         	goto	l5764
  2707   001456                     u6640:
  2708   001456  0E00               	movlw	0
  2709   001458  6E1D               	movwf	___flge@ff1^0,c
  2710   00145A  0E00               	movlw	0
  2711   00145C  6E1E               	movwf	(___flge@ff1+1)^0,c
  2712   00145E  0E00               	movlw	0
  2713   001460  6E1F               	movwf	(___flge@ff1+2)^0,c
  2714   001462  0E3F               	movlw	63
  2715   001464  6E20               	movwf	(___flge@ff1+3)^0,c
  2716   001466  C0C7  F021         	movff	colorDetect@bluePrint,___flge@ff2
  2717   00146A  C0C8  F022         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  2718   00146E  C0C9  F023         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  2719   001472  C0CA  F024         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  2720   001476  EC51  F01C         	call	___flge	;wreg free
  2721   00147A  B0D8               	btfsc	status,0,c
  2722   00147C  EF42  F00A         	goto	u6651
  2723   001480  EF44  F00A         	goto	u6650
  2724   001484                     u6651:
  2725   001484  EF60  F00A         	goto	l5764
  2726   001488                     u6650:
  2727   001488                     
  2728                           ;MazeRobot.X/color.c: 167:         _delay((unsigned long)((2)*(64000000/4000.0)));
  2729   001488  0E2A               	movlw	42
  2730   00148A  0100               	movlb	0	; () banked
  2731   00148C  6F8F               	movwf	??_colorDetect& (0+255),b
  2732   00148E  0E8D               	movlw	141
  2733   001490                     u7107:
  2734   001490  2EE8               	decfsz	wreg,f,c
  2735   001492  D7FE               	bra	u7107
  2736   001494  2F8F               	decfsz	??_colorDetect& (0+255),f,b
  2737   001496  D7FC               	bra	u7107
  2738   001498  D000               	nop2	
  2739   00149A                     
  2740                           ;MazeRobot.X/color.c: 168:         turnRight_135(mL,mR);
  2741   00149A  C08B  F01E         	movff	colorDetect@mL,turnRight_135@mL
  2742   00149E  C08C  F01F         	movff	colorDetect@mL+1,turnRight_135@mL+1
  2743   0014A2  C08D  F020         	movff	colorDetect@mR,turnRight_135@mR
  2744   0014A6  C08E  F021         	movff	colorDetect@mR+1,turnRight_135@mR+1
  2745   0014AA  ECD6  F019         	call	_turnRight_135	;wreg free
  2746   0014AE                     
  2747                           ;MazeRobot.X/color.c: 169:         _delay((unsigned long)((2)*(64000000/4000.0)));
  2748   0014AE  0E2A               	movlw	42
  2749   0014B0  0100               	movlb	0	; () banked
  2750   0014B2  6F8F               	movwf	??_colorDetect& (0+255),b
  2751   0014B4  0E8D               	movlw	141
  2752   0014B6                     u7117:
  2753   0014B6  2EE8               	decfsz	wreg,f,c
  2754   0014B8  D7FE               	bra	u7117
  2755   0014BA  2F8F               	decfsz	??_colorDetect& (0+255),f,b
  2756   0014BC  D7FC               	bra	u7117
  2757   0014BE  D000               	nop2	
  2758   0014C0                     l5764:
  2759                           
  2760                           ;MazeRobot.X/color.c: 174:         if ((redPrint > 1.0) & (greenPrint > 0.8) & (bluePrin
      +                          t < 0.8)){
  2761   0014C0  0E00               	movlw	0
  2762   0014C2  6E1D               	movwf	___flge@ff1^0,c
  2763   0014C4  0E00               	movlw	0
  2764   0014C6  6E1E               	movwf	(___flge@ff1+1)^0,c
  2765   0014C8  0E80               	movlw	128
  2766   0014CA  6E1F               	movwf	(___flge@ff1+2)^0,c
  2767   0014CC  0E3F               	movlw	63
  2768   0014CE  6E20               	movwf	(___flge@ff1+3)^0,c
  2769   0014D0  C0BF  F021         	movff	colorDetect@redPrint,___flge@ff2
  2770   0014D4  C0C0  F022         	movff	colorDetect@redPrint+1,___flge@ff2+1
  2771   0014D8  C0C1  F023         	movff	colorDetect@redPrint+2,___flge@ff2+2
  2772   0014DC  C0C2  F024         	movff	colorDetect@redPrint+3,___flge@ff2+3
  2773   0014E0  EC51  F01C         	call	___flge	;wreg free
  2774   0014E4  B0D8               	btfsc	status,0,c
  2775   0014E6  EF77  F00A         	goto	u6661
  2776   0014EA  EF79  F00A         	goto	u6660
  2777   0014EE                     u6661:
  2778   0014EE  EFC7  F00A         	goto	l5776
  2779   0014F2                     u6660:
  2780   0014F2  0ECD               	movlw	205
  2781   0014F4  6E1D               	movwf	___flge@ff1^0,c
  2782   0014F6  0ECC               	movlw	204
  2783   0014F8  6E1E               	movwf	(___flge@ff1+1)^0,c
  2784   0014FA  0E4C               	movlw	76
  2785   0014FC  6E1F               	movwf	(___flge@ff1+2)^0,c
  2786   0014FE  0E3F               	movlw	63
  2787   001500  6E20               	movwf	(___flge@ff1+3)^0,c
  2788   001502  C0C3  F021         	movff	colorDetect@greenPrint,___flge@ff2
  2789   001506  C0C4  F022         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  2790   00150A  C0C5  F023         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  2791   00150E  C0C6  F024         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  2792   001512  EC51  F01C         	call	___flge	;wreg free
  2793   001516  B0D8               	btfsc	status,0,c
  2794   001518  EF90  F00A         	goto	u6671
  2795   00151C  EF92  F00A         	goto	u6670
  2796   001520                     u6671:
  2797   001520  EFC7  F00A         	goto	l5776
  2798   001524                     u6670:
  2799   001524  C0C7  F01D         	movff	colorDetect@bluePrint,___flge@ff1
  2800   001528  C0C8  F01E         	movff	colorDetect@bluePrint+1,___flge@ff1+1
  2801   00152C  C0C9  F01F         	movff	colorDetect@bluePrint+2,___flge@ff1+2
  2802   001530  C0CA  F020         	movff	colorDetect@bluePrint+3,___flge@ff1+3
  2803   001534  0ECD               	movlw	205
  2804   001536  6E21               	movwf	___flge@ff2^0,c
  2805   001538  0ECC               	movlw	204
  2806   00153A  6E22               	movwf	(___flge@ff2+1)^0,c
  2807   00153C  0E4C               	movlw	76
  2808   00153E  6E23               	movwf	(___flge@ff2+2)^0,c
  2809   001540  0E3F               	movlw	63
  2810   001542  6E24               	movwf	(___flge@ff2+3)^0,c
  2811   001544  EC51  F01C         	call	___flge	;wreg free
  2812   001548  B0D8               	btfsc	status,0,c
  2813   00154A  EFA9  F00A         	goto	u6681
  2814   00154E  EFAB  F00A         	goto	u6680
  2815   001552                     u6681:
  2816   001552  EFC7  F00A         	goto	l5776
  2817   001556                     u6680:
  2818   001556                     
  2819                           ;MazeRobot.X/color.c: 176:         _delay((unsigned long)((2)*(64000000/4000.0)));
  2820   001556  0E2A               	movlw	42
  2821   001558  0100               	movlb	0	; () banked
  2822   00155A  6F8F               	movwf	??_colorDetect& (0+255),b
  2823   00155C  0E8D               	movlw	141
  2824   00155E                     u7127:
  2825   00155E  2EE8               	decfsz	wreg,f,c
  2826   001560  D7FE               	bra	u7127
  2827   001562  2F8F               	decfsz	??_colorDetect& (0+255),f,b
  2828   001564  D7FC               	bra	u7127
  2829   001566  D000               	nop2	
  2830   001568                     
  2831                           ;MazeRobot.X/color.c: 177:         reverseSquareRight(mL,mR);
  2832   001568  C08B  F024         	movff	colorDetect@mL,reverseSquareRight@mL
  2833   00156C  C08C  F025         	movff	colorDetect@mL+1,reverseSquareRight@mL+1
  2834   001570  C08D  F026         	movff	colorDetect@mR,reverseSquareRight@mR
  2835   001574  C08E  F027         	movff	colorDetect@mR+1,reverseSquareRight@mR+1
  2836   001578  EC8F  F01F         	call	_reverseSquareRight	;wreg free
  2837   00157C                     
  2838                           ;MazeRobot.X/color.c: 178:         _delay((unsigned long)((2)*(64000000/4000.0)));
  2839   00157C  0E2A               	movlw	42
  2840   00157E  0100               	movlb	0	; () banked
  2841   001580  6F8F               	movwf	??_colorDetect& (0+255),b
  2842   001582  0E8D               	movlw	141
  2843   001584                     u7137:
  2844   001584  2EE8               	decfsz	wreg,f,c
  2845   001586  D7FE               	bra	u7137
  2846   001588  2F8F               	decfsz	??_colorDetect& (0+255),f,b
  2847   00158A  D7FC               	bra	u7137
  2848   00158C  D000               	nop2	
  2849   00158E                     l5776:
  2850                           
  2851                           ;MazeRobot.X/color.c: 182:         if ((bluePrint - redPrint > 0.7) & (bluePrint - green
      +                          Print > 0.3) & (bluePrint > 0.7 )){
  2852   00158E  0E33               	movlw	51
  2853   001590  6E1D               	movwf	___flge@ff1^0,c
  2854   001592  0E33               	movlw	51
  2855   001594  6E1E               	movwf	(___flge@ff1+1)^0,c
  2856   001596  0E33               	movlw	51
  2857   001598  6E1F               	movwf	(___flge@ff1+2)^0,c
  2858   00159A  0E3F               	movlw	63
  2859   00159C  6E20               	movwf	(___flge@ff1+3)^0,c
  2860   00159E  C0BF  F019         	movff	colorDetect@redPrint,___flsub@a
  2861   0015A2  C0C0  F01A         	movff	colorDetect@redPrint+1,___flsub@a+1
  2862   0015A6  C0C1  F01B         	movff	colorDetect@redPrint+2,___flsub@a+2
  2863   0015AA  C0C2  F01C         	movff	colorDetect@redPrint+3,___flsub@a+3
  2864   0015AE  C0C7  F015         	movff	colorDetect@bluePrint,___flsub@b
  2865   0015B2  C0C8  F016         	movff	colorDetect@bluePrint+1,___flsub@b+1
  2866   0015B6  C0C9  F017         	movff	colorDetect@bluePrint+2,___flsub@b+2
  2867   0015BA  C0CA  F018         	movff	colorDetect@bluePrint+3,___flsub@b+3
  2868   0015BE  ECD1  F021         	call	___flsub	;wreg free
  2869   0015C2  C015  F021         	movff	?___flsub,___flge@ff2
  2870   0015C6  C016  F022         	movff	?___flsub+1,___flge@ff2+1
  2871   0015CA  C017  F023         	movff	?___flsub+2,___flge@ff2+2
  2872   0015CE  C018  F024         	movff	?___flsub+3,___flge@ff2+3
  2873   0015D2  EC51  F01C         	call	___flge	;wreg free
  2874   0015D6  B0D8               	btfsc	status,0,c
  2875   0015D8  EFF0  F00A         	goto	u6691
  2876   0015DC  EFF2  F00A         	goto	u6690
  2877   0015E0                     u6691:
  2878   0015E0  EF52  F00B         	goto	l5788
  2879   0015E4                     u6690:
  2880   0015E4  0E9A               	movlw	154
  2881   0015E6  6E1D               	movwf	___flge@ff1^0,c
  2882   0015E8  0E99               	movlw	153
  2883   0015EA  6E1E               	movwf	(___flge@ff1+1)^0,c
  2884   0015EC  0E99               	movlw	153
  2885   0015EE  6E1F               	movwf	(___flge@ff1+2)^0,c
  2886   0015F0  0E3E               	movlw	62
  2887   0015F2  6E20               	movwf	(___flge@ff1+3)^0,c
  2888   0015F4  C0C3  F019         	movff	colorDetect@greenPrint,___flsub@a
  2889   0015F8  C0C4  F01A         	movff	colorDetect@greenPrint+1,___flsub@a+1
  2890   0015FC  C0C5  F01B         	movff	colorDetect@greenPrint+2,___flsub@a+2
  2891   001600  C0C6  F01C         	movff	colorDetect@greenPrint+3,___flsub@a+3
  2892   001604  C0C7  F015         	movff	colorDetect@bluePrint,___flsub@b
  2893   001608  C0C8  F016         	movff	colorDetect@bluePrint+1,___flsub@b+1
  2894   00160C  C0C9  F017         	movff	colorDetect@bluePrint+2,___flsub@b+2
  2895   001610  C0CA  F018         	movff	colorDetect@bluePrint+3,___flsub@b+3
  2896   001614  ECD1  F021         	call	___flsub	;wreg free
  2897   001618  C015  F021         	movff	?___flsub,___flge@ff2
  2898   00161C  C016  F022         	movff	?___flsub+1,___flge@ff2+1
  2899   001620  C017  F023         	movff	?___flsub+2,___flge@ff2+2
  2900   001624  C018  F024         	movff	?___flsub+3,___flge@ff2+3
  2901   001628  EC51  F01C         	call	___flge	;wreg free
  2902   00162C  B0D8               	btfsc	status,0,c
  2903   00162E  EF1B  F00B         	goto	u6701
  2904   001632  EF1D  F00B         	goto	u6700
  2905   001636                     u6701:
  2906   001636  EF52  F00B         	goto	l5788
  2907   00163A                     u6700:
  2908   00163A  0E33               	movlw	51
  2909   00163C  6E1D               	movwf	___flge@ff1^0,c
  2910   00163E  0E33               	movlw	51
  2911   001640  6E1E               	movwf	(___flge@ff1+1)^0,c
  2912   001642  0E33               	movlw	51
  2913   001644  6E1F               	movwf	(___flge@ff1+2)^0,c
  2914   001646  0E3F               	movlw	63
  2915   001648  6E20               	movwf	(___flge@ff1+3)^0,c
  2916   00164A  C0C7  F021         	movff	colorDetect@bluePrint,___flge@ff2
  2917   00164E  C0C8  F022         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  2918   001652  C0C9  F023         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  2919   001656  C0CA  F024         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  2920   00165A  EC51  F01C         	call	___flge	;wreg free
  2921   00165E  B0D8               	btfsc	status,0,c
  2922   001660  EF34  F00B         	goto	u6711
  2923   001664  EF36  F00B         	goto	u6710
  2924   001668                     u6711:
  2925   001668  EF52  F00B         	goto	l5788
  2926   00166C                     u6710:
  2927   00166C                     
  2928                           ;MazeRobot.X/color.c: 183:         _delay((unsigned long)((2)*(64000000/4000.0)));
  2929   00166C  0E2A               	movlw	42
  2930   00166E  0100               	movlb	0	; () banked
  2931   001670  6F8F               	movwf	??_colorDetect& (0+255),b
  2932   001672  0E8D               	movlw	141
  2933   001674                     u7147:
  2934   001674  2EE8               	decfsz	wreg,f,c
  2935   001676  D7FE               	bra	u7147
  2936   001678  2F8F               	decfsz	??_colorDetect& (0+255),f,b
  2937   00167A  D7FC               	bra	u7147
  2938   00167C  D000               	nop2	
  2939   00167E                     
  2940                           ;MazeRobot.X/color.c: 184:         turn_180(mL,mR);
  2941   00167E  C08B  F01E         	movff	colorDetect@mL,turn_180@mL
  2942   001682  C08C  F01F         	movff	colorDetect@mL+1,turn_180@mL+1
  2943   001686  C08D  F020         	movff	colorDetect@mR,turn_180@mR
  2944   00168A  C08E  F021         	movff	colorDetect@mR+1,turn_180@mR+1
  2945   00168E  EC37  F019         	call	_turn_180	;wreg free
  2946   001692                     
  2947                           ;MazeRobot.X/color.c: 185:         _delay((unsigned long)((2)*(64000000/4000.0)));
  2948   001692  0E2A               	movlw	42
  2949   001694  0100               	movlb	0	; () banked
  2950   001696  6F8F               	movwf	??_colorDetect& (0+255),b
  2951   001698  0E8D               	movlw	141
  2952   00169A                     u7157:
  2953   00169A  2EE8               	decfsz	wreg,f,c
  2954   00169C  D7FE               	bra	u7157
  2955   00169E  2F8F               	decfsz	??_colorDetect& (0+255),f,b
  2956   0016A0  D7FC               	bra	u7157
  2957   0016A2  D000               	nop2	
  2958   0016A4                     l5788:
  2959                           
  2960                           ;MazeRobot.X/color.c: 189:         if ((greenPrint - redPrint > 0.4 ) & (greenPrint > 1)
      +                           & (greenPrint - bluePrint > 0.4 )){
  2961   0016A4  0ECD               	movlw	205
  2962   0016A6  6E1D               	movwf	___flge@ff1^0,c
  2963   0016A8  0ECC               	movlw	204
  2964   0016AA  6E1E               	movwf	(___flge@ff1+1)^0,c
  2965   0016AC  0ECC               	movlw	204
  2966   0016AE  6E1F               	movwf	(___flge@ff1+2)^0,c
  2967   0016B0  0E3E               	movlw	62
  2968   0016B2  6E20               	movwf	(___flge@ff1+3)^0,c
  2969   0016B4  C0BF  F019         	movff	colorDetect@redPrint,___flsub@a
  2970   0016B8  C0C0  F01A         	movff	colorDetect@redPrint+1,___flsub@a+1
  2971   0016BC  C0C1  F01B         	movff	colorDetect@redPrint+2,___flsub@a+2
  2972   0016C0  C0C2  F01C         	movff	colorDetect@redPrint+3,___flsub@a+3
  2973   0016C4  C0C3  F015         	movff	colorDetect@greenPrint,___flsub@b
  2974   0016C8  C0C4  F016         	movff	colorDetect@greenPrint+1,___flsub@b+1
  2975   0016CC  C0C5  F017         	movff	colorDetect@greenPrint+2,___flsub@b+2
  2976   0016D0  C0C6  F018         	movff	colorDetect@greenPrint+3,___flsub@b+3
  2977   0016D4  ECD1  F021         	call	___flsub	;wreg free
  2978   0016D8  C015  F021         	movff	?___flsub,___flge@ff2
  2979   0016DC  C016  F022         	movff	?___flsub+1,___flge@ff2+1
  2980   0016E0  C017  F023         	movff	?___flsub+2,___flge@ff2+2
  2981   0016E4  C018  F024         	movff	?___flsub+3,___flge@ff2+3
  2982   0016E8  EC51  F01C         	call	___flge	;wreg free
  2983   0016EC  B0D8               	btfsc	status,0,c
  2984   0016EE  EF7B  F00B         	goto	u6721
  2985   0016F2  EF7D  F00B         	goto	u6720
  2986   0016F6                     u6721:
  2987   0016F6  EFDD  F00B         	goto	l5800
  2988   0016FA                     u6720:
  2989   0016FA  0E00               	movlw	0
  2990   0016FC  6E1D               	movwf	___flge@ff1^0,c
  2991   0016FE  0E00               	movlw	0
  2992   001700  6E1E               	movwf	(___flge@ff1+1)^0,c
  2993   001702  0E80               	movlw	128
  2994   001704  6E1F               	movwf	(___flge@ff1+2)^0,c
  2995   001706  0E3F               	movlw	63
  2996   001708  6E20               	movwf	(___flge@ff1+3)^0,c
  2997   00170A  C0C3  F021         	movff	colorDetect@greenPrint,___flge@ff2
  2998   00170E  C0C4  F022         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  2999   001712  C0C5  F023         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  3000   001716  C0C6  F024         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  3001   00171A  EC51  F01C         	call	___flge	;wreg free
  3002   00171E  B0D8               	btfsc	status,0,c
  3003   001720  EF94  F00B         	goto	u6731
  3004   001724  EF96  F00B         	goto	u6730
  3005   001728                     u6731:
  3006   001728  EFDD  F00B         	goto	l5800
  3007   00172C                     u6730:
  3008   00172C  0ECD               	movlw	205
  3009   00172E  6E1D               	movwf	___flge@ff1^0,c
  3010   001730  0ECC               	movlw	204
  3011   001732  6E1E               	movwf	(___flge@ff1+1)^0,c
  3012   001734  0ECC               	movlw	204
  3013   001736  6E1F               	movwf	(___flge@ff1+2)^0,c
  3014   001738  0E3E               	movlw	62
  3015   00173A  6E20               	movwf	(___flge@ff1+3)^0,c
  3016   00173C  C0C7  F019         	movff	colorDetect@bluePrint,___flsub@a
  3017   001740  C0C8  F01A         	movff	colorDetect@bluePrint+1,___flsub@a+1
  3018   001744  C0C9  F01B         	movff	colorDetect@bluePrint+2,___flsub@a+2
  3019   001748  C0CA  F01C         	movff	colorDetect@bluePrint+3,___flsub@a+3
  3020   00174C  C0C3  F015         	movff	colorDetect@greenPrint,___flsub@b
  3021   001750  C0C4  F016         	movff	colorDetect@greenPrint+1,___flsub@b+1
  3022   001754  C0C5  F017         	movff	colorDetect@greenPrint+2,___flsub@b+2
  3023   001758  C0C6  F018         	movff	colorDetect@greenPrint+3,___flsub@b+3
  3024   00175C  ECD1  F021         	call	___flsub	;wreg free
  3025   001760  C015  F021         	movff	?___flsub,___flge@ff2
  3026   001764  C016  F022         	movff	?___flsub+1,___flge@ff2+1
  3027   001768  C017  F023         	movff	?___flsub+2,___flge@ff2+2
  3028   00176C  C018  F024         	movff	?___flsub+3,___flge@ff2+3
  3029   001770  EC51  F01C         	call	___flge	;wreg free
  3030   001774  B0D8               	btfsc	status,0,c
  3031   001776  EFBF  F00B         	goto	u6741
  3032   00177A  EFC1  F00B         	goto	u6740
  3033   00177E                     u6741:
  3034   00177E  EFDD  F00B         	goto	l5800
  3035   001782                     u6740:
  3036   001782                     
  3037                           ;MazeRobot.X/color.c: 190:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3038   001782  0E2A               	movlw	42
  3039   001784  0100               	movlb	0	; () banked
  3040   001786  6F8F               	movwf	??_colorDetect& (0+255),b
  3041   001788  0E8D               	movlw	141
  3042   00178A                     u7167:
  3043   00178A  2EE8               	decfsz	wreg,f,c
  3044   00178C  D7FE               	bra	u7167
  3045   00178E  2F8F               	decfsz	??_colorDetect& (0+255),f,b
  3046   001790  D7FC               	bra	u7167
  3047   001792  D000               	nop2	
  3048   001794                     
  3049                           ;MazeRobot.X/color.c: 191:         turnLeft_90(mL,mR);
  3050   001794  C08B  F01E         	movff	colorDetect@mL,turnLeft_90@mL
  3051   001798  C08C  F01F         	movff	colorDetect@mL+1,turnLeft_90@mL+1
  3052   00179C  C08D  F020         	movff	colorDetect@mR,turnLeft_90@mR
  3053   0017A0  C08E  F021         	movff	colorDetect@mR+1,turnLeft_90@mR+1
  3054   0017A4  EC14  F01B         	call	_turnLeft_90	;wreg free
  3055   0017A8                     
  3056                           ;MazeRobot.X/color.c: 192:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3057   0017A8  0E2A               	movlw	42
  3058   0017AA  0100               	movlb	0	; () banked
  3059   0017AC  6F8F               	movwf	??_colorDetect& (0+255),b
  3060   0017AE  0E8D               	movlw	141
  3061   0017B0                     u7177:
  3062   0017B0  2EE8               	decfsz	wreg,f,c
  3063   0017B2  D7FE               	bra	u7177
  3064   0017B4  2F8F               	decfsz	??_colorDetect& (0+255),f,b
  3065   0017B6  D7FC               	bra	u7177
  3066   0017B8  D000               	nop2	
  3067   0017BA                     l5800:
  3068                           
  3069                           ;MazeRobot.X/color.c: 196:         if ((redPrint < 0.7) & (greenPrint > 1.0)& (bluePrint
      +                           > 1.0)){
  3070   0017BA  C0BF  F01D         	movff	colorDetect@redPrint,___flge@ff1
  3071   0017BE  C0C0  F01E         	movff	colorDetect@redPrint+1,___flge@ff1+1
  3072   0017C2  C0C1  F01F         	movff	colorDetect@redPrint+2,___flge@ff1+2
  3073   0017C6  C0C2  F020         	movff	colorDetect@redPrint+3,___flge@ff1+3
  3074   0017CA  0E33               	movlw	51
  3075   0017CC  6E21               	movwf	___flge@ff2^0,c
  3076   0017CE  0E33               	movlw	51
  3077   0017D0  6E22               	movwf	(___flge@ff2+1)^0,c
  3078   0017D2  0E33               	movlw	51
  3079   0017D4  6E23               	movwf	(___flge@ff2+2)^0,c
  3080   0017D6  0E3F               	movlw	63
  3081   0017D8  6E24               	movwf	(___flge@ff2+3)^0,c
  3082   0017DA  EC51  F01C         	call	___flge	;wreg free
  3083   0017DE  B0D8               	btfsc	status,0,c
  3084   0017E0  EFF4  F00B         	goto	u6751
  3085   0017E4  EFF6  F00B         	goto	u6750
  3086   0017E8                     u6751:
  3087   0017E8  EF44  F00C         	goto	l5812
  3088   0017EC                     u6750:
  3089   0017EC  0E00               	movlw	0
  3090   0017EE  6E1D               	movwf	___flge@ff1^0,c
  3091   0017F0  0E00               	movlw	0
  3092   0017F2  6E1E               	movwf	(___flge@ff1+1)^0,c
  3093   0017F4  0E80               	movlw	128
  3094   0017F6  6E1F               	movwf	(___flge@ff1+2)^0,c
  3095   0017F8  0E3F               	movlw	63
  3096   0017FA  6E20               	movwf	(___flge@ff1+3)^0,c
  3097   0017FC  C0C3  F021         	movff	colorDetect@greenPrint,___flge@ff2
  3098   001800  C0C4  F022         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  3099   001804  C0C5  F023         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  3100   001808  C0C6  F024         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  3101   00180C  EC51  F01C         	call	___flge	;wreg free
  3102   001810  B0D8               	btfsc	status,0,c
  3103   001812  EF0D  F00C         	goto	u6761
  3104   001816  EF0F  F00C         	goto	u6760
  3105   00181A                     u6761:
  3106   00181A  EF44  F00C         	goto	l5812
  3107   00181E                     u6760:
  3108   00181E  0E00               	movlw	0
  3109   001820  6E1D               	movwf	___flge@ff1^0,c
  3110   001822  0E00               	movlw	0
  3111   001824  6E1E               	movwf	(___flge@ff1+1)^0,c
  3112   001826  0E80               	movlw	128
  3113   001828  6E1F               	movwf	(___flge@ff1+2)^0,c
  3114   00182A  0E3F               	movlw	63
  3115   00182C  6E20               	movwf	(___flge@ff1+3)^0,c
  3116   00182E  C0C7  F021         	movff	colorDetect@bluePrint,___flge@ff2
  3117   001832  C0C8  F022         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  3118   001836  C0C9  F023         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  3119   00183A  C0CA  F024         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  3120   00183E  EC51  F01C         	call	___flge	;wreg free
  3121   001842  B0D8               	btfsc	status,0,c
  3122   001844  EF26  F00C         	goto	u6771
  3123   001848  EF28  F00C         	goto	u6770
  3124   00184C                     u6771:
  3125   00184C  EF44  F00C         	goto	l5812
  3126   001850                     u6770:
  3127   001850                     
  3128                           ;MazeRobot.X/color.c: 197:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3129   001850  0E2A               	movlw	42
  3130   001852  0100               	movlb	0	; () banked
  3131   001854  6F8F               	movwf	??_colorDetect& (0+255),b
  3132   001856  0E8D               	movlw	141
  3133   001858                     u7187:
  3134   001858  2EE8               	decfsz	wreg,f,c
  3135   00185A  D7FE               	bra	u7187
  3136   00185C  2F8F               	decfsz	??_colorDetect& (0+255),f,b
  3137   00185E  D7FC               	bra	u7187
  3138   001860  D000               	nop2	
  3139   001862                     
  3140                           ;MazeRobot.X/color.c: 198:         turnLeft_135(mL,mR);
  3141   001862  C08B  F01E         	movff	colorDetect@mL,turnLeft_135@mL
  3142   001866  C08C  F01F         	movff	colorDetect@mL+1,turnLeft_135@mL+1
  3143   00186A  C08D  F020         	movff	colorDetect@mR,turnLeft_135@mR
  3144   00186E  C08E  F021         	movff	colorDetect@mR+1,turnLeft_135@mR+1
  3145   001872  ECB3  F01B         	call	_turnLeft_135	;wreg free
  3146   001876                     
  3147                           ;MazeRobot.X/color.c: 199:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3148   001876  0E2A               	movlw	42
  3149   001878  0100               	movlb	0	; () banked
  3150   00187A  6F8F               	movwf	??_colorDetect& (0+255),b
  3151   00187C  0E8D               	movlw	141
  3152   00187E                     u7197:
  3153   00187E  2EE8               	decfsz	wreg,f,c
  3154   001880  D7FE               	bra	u7197
  3155   001882  2F8F               	decfsz	??_colorDetect& (0+255),f,b
  3156   001884  D7FC               	bra	u7197
  3157   001886  D000               	nop2	
  3158   001888                     l5812:
  3159                           
  3160                           ;MazeRobot.X/color.c: 203:         if ((redPrint > 0.95) & (greenPrint > 0.8 & greenPrin
      +                          t < 0.9) & (bluePrint > 0.8 & bluePrint < 0.95)){
  3161   001888  0E33               	movlw	51
  3162   00188A  6E1D               	movwf	___flge@ff1^0,c
  3163   00188C  0E33               	movlw	51
  3164   00188E  6E1E               	movwf	(___flge@ff1+1)^0,c
  3165   001890  0E73               	movlw	115
  3166   001892  6E1F               	movwf	(___flge@ff1+2)^0,c
  3167   001894  0E3F               	movlw	63
  3168   001896  6E20               	movwf	(___flge@ff1+3)^0,c
  3169   001898  C0BF  F021         	movff	colorDetect@redPrint,___flge@ff2
  3170   00189C  C0C0  F022         	movff	colorDetect@redPrint+1,___flge@ff2+1
  3171   0018A0  C0C1  F023         	movff	colorDetect@redPrint+2,___flge@ff2+2
  3172   0018A4  C0C2  F024         	movff	colorDetect@redPrint+3,___flge@ff2+3
  3173   0018A8  EC51  F01C         	call	___flge	;wreg free
  3174   0018AC  B0D8               	btfsc	status,0,c
  3175   0018AE  EF5B  F00C         	goto	u6781
  3176   0018B2  EF5D  F00C         	goto	u6780
  3177   0018B6                     u6781:
  3178   0018B6  EFDD  F00C         	goto	l5828
  3179   0018BA                     u6780:
  3180   0018BA  0ECD               	movlw	205
  3181   0018BC  6E1D               	movwf	___flge@ff1^0,c
  3182   0018BE  0ECC               	movlw	204
  3183   0018C0  6E1E               	movwf	(___flge@ff1+1)^0,c
  3184   0018C2  0E4C               	movlw	76
  3185   0018C4  6E1F               	movwf	(___flge@ff1+2)^0,c
  3186   0018C6  0E3F               	movlw	63
  3187   0018C8  6E20               	movwf	(___flge@ff1+3)^0,c
  3188   0018CA  C0C3  F021         	movff	colorDetect@greenPrint,___flge@ff2
  3189   0018CE  C0C4  F022         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  3190   0018D2  C0C5  F023         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  3191   0018D6  C0C6  F024         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  3192   0018DA  EC51  F01C         	call	___flge	;wreg free
  3193   0018DE  B0D8               	btfsc	status,0,c
  3194   0018E0  EF74  F00C         	goto	u6791
  3195   0018E4  EF76  F00C         	goto	u6790
  3196   0018E8                     u6791:
  3197   0018E8  EFDD  F00C         	goto	l5828
  3198   0018EC                     u6790:
  3199   0018EC  C0C3  F01D         	movff	colorDetect@greenPrint,___flge@ff1
  3200   0018F0  C0C4  F01E         	movff	colorDetect@greenPrint+1,___flge@ff1+1
  3201   0018F4  C0C5  F01F         	movff	colorDetect@greenPrint+2,___flge@ff1+2
  3202   0018F8  C0C6  F020         	movff	colorDetect@greenPrint+3,___flge@ff1+3
  3203   0018FC  0E66               	movlw	102
  3204   0018FE  6E21               	movwf	___flge@ff2^0,c
  3205   001900  0E66               	movlw	102
  3206   001902  6E22               	movwf	(___flge@ff2+1)^0,c
  3207   001904  0E66               	movlw	102
  3208   001906  6E23               	movwf	(___flge@ff2+2)^0,c
  3209   001908  0E3F               	movlw	63
  3210   00190A  6E24               	movwf	(___flge@ff2+3)^0,c
  3211   00190C  EC51  F01C         	call	___flge	;wreg free
  3212   001910  B0D8               	btfsc	status,0,c
  3213   001912  EF8D  F00C         	goto	u6801
  3214   001916  EF8F  F00C         	goto	u6800
  3215   00191A                     u6801:
  3216   00191A  EFDD  F00C         	goto	l5828
  3217   00191E                     u6800:
  3218   00191E  0ECD               	movlw	205
  3219   001920  6E1D               	movwf	___flge@ff1^0,c
  3220   001922  0ECC               	movlw	204
  3221   001924  6E1E               	movwf	(___flge@ff1+1)^0,c
  3222   001926  0E4C               	movlw	76
  3223   001928  6E1F               	movwf	(___flge@ff1+2)^0,c
  3224   00192A  0E3F               	movlw	63
  3225   00192C  6E20               	movwf	(___flge@ff1+3)^0,c
  3226   00192E  C0C7  F021         	movff	colorDetect@bluePrint,___flge@ff2
  3227   001932  C0C8  F022         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  3228   001936  C0C9  F023         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  3229   00193A  C0CA  F024         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  3230   00193E  EC51  F01C         	call	___flge	;wreg free
  3231   001942  B0D8               	btfsc	status,0,c
  3232   001944  EFA6  F00C         	goto	u6811
  3233   001948  EFA8  F00C         	goto	u6810
  3234   00194C                     u6811:
  3235   00194C  EFDD  F00C         	goto	l5828
  3236   001950                     u6810:
  3237   001950  C0C7  F01D         	movff	colorDetect@bluePrint,___flge@ff1
  3238   001954  C0C8  F01E         	movff	colorDetect@bluePrint+1,___flge@ff1+1
  3239   001958  C0C9  F01F         	movff	colorDetect@bluePrint+2,___flge@ff1+2
  3240   00195C  C0CA  F020         	movff	colorDetect@bluePrint+3,___flge@ff1+3
  3241   001960  0E33               	movlw	51
  3242   001962  6E21               	movwf	___flge@ff2^0,c
  3243   001964  0E33               	movlw	51
  3244   001966  6E22               	movwf	(___flge@ff2+1)^0,c
  3245   001968  0E73               	movlw	115
  3246   00196A  6E23               	movwf	(___flge@ff2+2)^0,c
  3247   00196C  0E3F               	movlw	63
  3248   00196E  6E24               	movwf	(___flge@ff2+3)^0,c
  3249   001970  EC51  F01C         	call	___flge	;wreg free
  3250   001974  B0D8               	btfsc	status,0,c
  3251   001976  EFBF  F00C         	goto	u6821
  3252   00197A  EFC1  F00C         	goto	u6820
  3253   00197E                     u6821:
  3254   00197E  EFDD  F00C         	goto	l5828
  3255   001982                     u6820:
  3256   001982                     
  3257                           ;MazeRobot.X/color.c: 204:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3258   001982  0E2A               	movlw	42
  3259   001984  0100               	movlb	0	; () banked
  3260   001986  6F8F               	movwf	??_colorDetect& (0+255),b
  3261   001988  0E8D               	movlw	141
  3262   00198A                     u7207:
  3263   00198A  2EE8               	decfsz	wreg,f,c
  3264   00198C  D7FE               	bra	u7207
  3265   00198E  2F8F               	decfsz	??_colorDetect& (0+255),f,b
  3266   001990  D7FC               	bra	u7207
  3267   001992  D000               	nop2	
  3268   001994                     
  3269                           ;MazeRobot.X/color.c: 205:         reverseSquareLeft(mL,mR);
  3270   001994  C08B  F024         	movff	colorDetect@mL,reverseSquareLeft@mL
  3271   001998  C08C  F025         	movff	colorDetect@mL+1,reverseSquareLeft@mL+1
  3272   00199C  C08D  F026         	movff	colorDetect@mR,reverseSquareLeft@mR
  3273   0019A0  C08E  F027         	movff	colorDetect@mR+1,reverseSquareLeft@mR+1
  3274   0019A4  ECD0  F01F         	call	_reverseSquareLeft	;wreg free
  3275   0019A8                     
  3276                           ;MazeRobot.X/color.c: 206:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3277   0019A8  0E2A               	movlw	42
  3278   0019AA  0100               	movlb	0	; () banked
  3279   0019AC  6F8F               	movwf	??_colorDetect& (0+255),b
  3280   0019AE  0E8D               	movlw	141
  3281   0019B0                     u7217:
  3282   0019B0  2EE8               	decfsz	wreg,f,c
  3283   0019B2  D7FE               	bra	u7217
  3284   0019B4  2F8F               	decfsz	??_colorDetect& (0+255),f,b
  3285   0019B6  D7FC               	bra	u7217
  3286   0019B8  D000               	nop2	
  3287   0019BA                     l5828:
  3288                           
  3289                           ;MazeRobot.X/color.c: 210:         char testString[20];;MazeRobot.X/color.c: 211:       
      +                            sprintf(testString,"%d  %f  %f \r",redPrint, greenPrint, bluePrint);
  3290   0019BA  0E91               	movlw	low colorDetect@testString
  3291   0019BC  0100               	movlb	0	; () banked
  3292   0019BE  6F66               	movwf	sprintf@s& (0+255),b
  3293   0019C0  0E00               	movlw	high colorDetect@testString
  3294   0019C2  6F67               	movwf	(sprintf@s+1)& (0+255),b
  3295   0019C4  0E10               	movlw	low STR_1
  3296   0019C6  6F68               	movwf	sprintf@fmt& (0+255),b
  3297   0019C8  0E0E               	movlw	high STR_1
  3298   0019CA  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  3299   0019CC  C0BF  F06A         	movff	colorDetect@redPrint,?_sprintf+4
  3300   0019D0  C0C0  F06B         	movff	colorDetect@redPrint+1,?_sprintf+5
  3301   0019D4  C0C1  F06C         	movff	colorDetect@redPrint+2,?_sprintf+6
  3302   0019D8  C0C2  F06D         	movff	colorDetect@redPrint+3,?_sprintf+7
  3303   0019DC  C0C3  F06E         	movff	colorDetect@greenPrint,?_sprintf+8
  3304   0019E0  C0C4  F06F         	movff	colorDetect@greenPrint+1,?_sprintf+9
  3305   0019E4  C0C5  F070         	movff	colorDetect@greenPrint+2,?_sprintf+10
  3306   0019E8  C0C6  F071         	movff	colorDetect@greenPrint+3,?_sprintf+11
  3307   0019EC  C0C7  F072         	movff	colorDetect@bluePrint,?_sprintf+12
  3308   0019F0  C0C8  F073         	movff	colorDetect@bluePrint+1,?_sprintf+13
  3309   0019F4  C0C9  F074         	movff	colorDetect@bluePrint+2,?_sprintf+14
  3310   0019F8  C0CA  F075         	movff	colorDetect@bluePrint+3,?_sprintf+15
  3311   0019FC  ECE0  F020         	call	_sprintf	;wreg free
  3312   001A00                     
  3313                           ;MazeRobot.X/color.c: 212:         TxBufferedString(testString);
  3314   001A00  0E91               	movlw	low colorDetect@testString
  3315   001A02  6E06               	movwf	TxBufferedString@string^0,c
  3316   001A04  0E00               	movlw	high colorDetect@testString
  3317   001A06  6E07               	movwf	(TxBufferedString@string+1)^0,c
  3318   001A08  EC71  F022         	call	_TxBufferedString	;wreg free
  3319   001A0C                     
  3320                           ;MazeRobot.X/color.c: 213:         sendTxBuf();
  3321   001A0C  EC2C  F023         	call	_sendTxBuf	;wreg free
  3322   001A10                     
  3323                           ;MazeRobot.X/color.c: 214:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3324   001A10  0E2A               	movlw	42
  3325   001A12  0100               	movlb	0	; () banked
  3326   001A14  6F8F               	movwf	??_colorDetect& (0+255),b
  3327   001A16  0E8D               	movlw	141
  3328   001A18                     u7227:
  3329   001A18  2EE8               	decfsz	wreg,f,c
  3330   001A1A  D7FE               	bra	u7227
  3331   001A1C  2F8F               	decfsz	??_colorDetect& (0+255),f,b
  3332   001A1E  D7FC               	bra	u7227
  3333   001A20  D000               	nop2	
  3334   001A22  0012               	return		;funcret
  3335   001A24                     __end_of_colorDetect:
  3336                           	callstack 0
  3337                           
  3338 ;; *************** function _turn_180 *****************
  3339 ;; Defined at:
  3340 ;;		line 295 in file "MazeRobot.X/dc_motor.c"
  3341 ;; Parameters:    Size  Location     Type
  3342 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  3343 ;;		 -> main@motorLeft(9), 
  3344 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  3345 ;;		 -> main@motorRight(9), 
  3346 ;; Auto vars:     Size  Location     Type
  3347 ;;		None
  3348 ;; Return value:  Size  Location     Type
  3349 ;;                  1    wreg      void 
  3350 ;; Registers used:
  3351 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3352 ;; Tracked objects:
  3353 ;;		On entry : 0/0
  3354 ;;		On exit  : 0/0
  3355 ;;		Unchanged: 0/0
  3356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3357 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3358 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3359 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3360 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3361 ;;Total ram usage:        6 bytes
  3362 ;; Hardware stack levels used: 1
  3363 ;; Hardware stack levels required when called: 5
  3364 ;; This function calls:
  3365 ;;		_reverse
  3366 ;;		_setMotorPWM
  3367 ;;		_stop
  3368 ;; This function is called by:
  3369 ;;		_colorDetect
  3370 ;; This function uses a non-reentrant model
  3371 ;;
  3372                           
  3373                           	psect	text8
  3374   00326E                     __ptext8:
  3375                           	callstack 0
  3376   00326E                     _turn_180:
  3377                           	callstack 24
  3378   00326E                     
  3379                           ;MazeRobot.X/dc_motor.c: 295: void turn_180(DC_motor *mL, DC_motor *mR);MazeRobot.X/dc_m
      +                          otor.c: 296: {;MazeRobot.X/dc_motor.c: 298:     stop(mL, mR);
  3380   00326E  C01E  F018         	movff	turn_180@mL,stop@mL
  3381   003272  C01F  F019         	movff	turn_180@mL+1,stop@mL+1
  3382   003276  C020  F01A         	movff	turn_180@mR,stop@mR
  3383   00327A  C021  F01B         	movff	turn_180@mR+1,stop@mR+1
  3384   00327E  ECF0  F01E         	call	_stop	;wreg free
  3385   003282                     
  3386                           ;MazeRobot.X/dc_motor.c: 299:     _delay((unsigned long)((100)*(64000000/4000.0)));
  3387   003282  0E09               	movlw	9
  3388   003284  6E23               	movwf	(??_turn_180+1)^0,c
  3389   003286  0E1E               	movlw	30
  3390   003288  6E22               	movwf	??_turn_180^0,c
  3391   00328A  0EE4               	movlw	228
  3392   00328C                     u7237:
  3393   00328C  2EE8               	decfsz	wreg,f,c
  3394   00328E  D7FE               	bra	u7237
  3395   003290  2E22               	decfsz	??_turn_180^0,f,c
  3396   003292  D7FC               	bra	u7237
  3397   003294  2E23               	decfsz	(??_turn_180+1)^0,f,c
  3398   003296  D7FA               	bra	u7237
  3399   003298  D000               	nop2	
  3400   00329A                     
  3401                           ;MazeRobot.X/dc_motor.c: 301:     reverse(mL, mR);
  3402   00329A  C01E  F018         	movff	turn_180@mL,reverse@mL
  3403   00329E  C01F  F019         	movff	turn_180@mL+1,reverse@mL+1
  3404   0032A2  C020  F01A         	movff	turn_180@mR,reverse@mR
  3405   0032A6  C021  F01B         	movff	turn_180@mR+1,reverse@mR+1
  3406   0032AA  ECB7  F01D         	call	_reverse	;wreg free
  3407                           
  3408                           ;MazeRobot.X/dc_motor.c: 302:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  3409   0032AE  0E11               	movlw	17
  3410   0032B0  6E23               	movwf	(??_turn_180+1)^0,c
  3411   0032B2  0E3C               	movlw	60
  3412   0032B4  6E22               	movwf	??_turn_180^0,c
  3413   0032B6  0ECB               	movlw	203
  3414   0032B8                     u7247:
  3415   0032B8  2EE8               	decfsz	wreg,f,c
  3416   0032BA  D7FE               	bra	u7247
  3417   0032BC  2E22               	decfsz	??_turn_180^0,f,c
  3418   0032BE  D7FC               	bra	u7247
  3419   0032C0  2E23               	decfsz	(??_turn_180+1)^0,f,c
  3420   0032C2  D7FA               	bra	u7247
  3421   0032C4  F000               	nop	
  3422   0032C6                     
  3423                           ;MazeRobot.X/dc_motor.c: 304:     stop(mL, mR);
  3424   0032C6  C01E  F018         	movff	turn_180@mL,stop@mL
  3425   0032CA  C01F  F019         	movff	turn_180@mL+1,stop@mL+1
  3426   0032CE  C020  F01A         	movff	turn_180@mR,stop@mR
  3427   0032D2  C021  F01B         	movff	turn_180@mR+1,stop@mR+1
  3428   0032D6  ECF0  F01E         	call	_stop	;wreg free
  3429   0032DA                     
  3430                           ;MazeRobot.X/dc_motor.c: 306:     mL->direction = 0;
  3431   0032DA  EE20 F001          	lfsr	2,1
  3432   0032DE  501E               	movf	turn_180@mL^0,w,c
  3433   0032E0  26D9               	addwf	fsr2l,f,c
  3434   0032E2  501F               	movf	(turn_180@mL+1)^0,w,c
  3435   0032E4  22DA               	addwfc	fsr2h,f,c
  3436   0032E6  0E00               	movlw	0
  3437   0032E8  6EDF               	movwf	indf2,c
  3438   0032EA                     
  3439                           ;MazeRobot.X/dc_motor.c: 307:     mR->direction = 1;
  3440   0032EA  EE20 F001          	lfsr	2,1
  3441   0032EE  5020               	movf	turn_180@mR^0,w,c
  3442   0032F0  26D9               	addwf	fsr2l,f,c
  3443   0032F2  5021               	movf	(turn_180@mR+1)^0,w,c
  3444   0032F4  22DA               	addwfc	fsr2h,f,c
  3445   0032F6  0E01               	movlw	1
  3446   0032F8  6EDF               	movwf	indf2,c
  3447   0032FA                     
  3448                           ;MazeRobot.X/dc_motor.c: 309:     mL->brakemode = 1;
  3449   0032FA  EE20 F002          	lfsr	2,2
  3450   0032FE  501E               	movf	turn_180@mL^0,w,c
  3451   003300  26D9               	addwf	fsr2l,f,c
  3452   003302  501F               	movf	(turn_180@mL+1)^0,w,c
  3453   003304  22DA               	addwfc	fsr2h,f,c
  3454   003306  0E01               	movlw	1
  3455   003308  6EDF               	movwf	indf2,c
  3456   00330A                     
  3457                           ;MazeRobot.X/dc_motor.c: 310:     mL->brakemode = 1;
  3458   00330A  EE20 F002          	lfsr	2,2
  3459   00330E  501E               	movf	turn_180@mL^0,w,c
  3460   003310  26D9               	addwf	fsr2l,f,c
  3461   003312  501F               	movf	(turn_180@mL+1)^0,w,c
  3462   003314  22DA               	addwfc	fsr2h,f,c
  3463   003316  0E01               	movlw	1
  3464   003318  6EDF               	movwf	indf2,c
  3465                           
  3466                           ;MazeRobot.X/dc_motor.c: 312:     while((mL->power < 70) || (mR->power < 70)){
  3467   00331A  EFA7  F019         	goto	l5226
  3468   00331E                     l5220:
  3469                           
  3470                           ;MazeRobot.X/dc_motor.c: 313:         mL->power += 10;
  3471   00331E  C01E  FFD9         	movff	turn_180@mL,fsr2l
  3472   003322  C01F  FFDA         	movff	turn_180@mL+1,fsr2h
  3473   003326  0E0A               	movlw	10
  3474   003328  26DF               	addwf	indf2,f,c
  3475                           
  3476                           ;MazeRobot.X/dc_motor.c: 314:         mR->power += 10;
  3477   00332A  C020  FFD9         	movff	turn_180@mR,fsr2l
  3478   00332E  C021  FFDA         	movff	turn_180@mR+1,fsr2h
  3479   003332  0E0A               	movlw	10
  3480   003334  26DF               	addwf	indf2,f,c
  3481   003336                     
  3482                           ;MazeRobot.X/dc_motor.c: 315:         setMotorPWM(mL);
  3483   003336  C01E  F012         	movff	turn_180@mL,setMotorPWM@m
  3484   00333A  C01F  F013         	movff	turn_180@mL+1,setMotorPWM@m+1
  3485   00333E  EC28  F017         	call	_setMotorPWM	;wreg free
  3486   003342                     
  3487                           ;MazeRobot.X/dc_motor.c: 316:         setMotorPWM(mR);
  3488   003342  C020  F012         	movff	turn_180@mR,setMotorPWM@m
  3489   003346  C021  F013         	movff	turn_180@mR+1,setMotorPWM@m+1
  3490   00334A  EC28  F017         	call	_setMotorPWM	;wreg free
  3491   00334E                     l5226:
  3492                           
  3493                           ;MazeRobot.X/dc_motor.c: 312:     while((mL->power < 70) || (mR->power < 70)){
  3494   00334E  C01E  FFD9         	movff	turn_180@mL,fsr2l
  3495   003352  C01F  FFDA         	movff	turn_180@mL+1,fsr2h
  3496   003356  0E45               	movlw	69
  3497   003358  64DF               	cpfsgt	indf2,c
  3498   00335A  EFB1  F019         	goto	u5741
  3499   00335E  EFB3  F019         	goto	u5740
  3500   003362                     u5741:
  3501   003362  EF8F  F019         	goto	l5220
  3502   003366                     u5740:
  3503   003366  C020  FFD9         	movff	turn_180@mR,fsr2l
  3504   00336A  C021  FFDA         	movff	turn_180@mR+1,fsr2h
  3505   00336E  0E45               	movlw	69
  3506   003370  64DF               	cpfsgt	indf2,c
  3507   003372  EFBD  F019         	goto	u5751
  3508   003376  EFBF  F019         	goto	u5750
  3509   00337A                     u5751:
  3510   00337A  EF8F  F019         	goto	l5220
  3511   00337E                     u5750:
  3512   00337E                     
  3513                           ;MazeRobot.X/dc_motor.c: 318:    _delay((unsigned long)((4*turning_time45)*(64000000/400
      +                          0.0)));
  3514   00337E  0E41               	movlw	65
  3515   003380  6E23               	movwf	(??_turn_180+1)^0,c
  3516   003382  0EF0               	movlw	240
  3517   003384  6E22               	movwf	??_turn_180^0,c
  3518   003386  0E33               	movlw	51
  3519   003388                     u7257:
  3520   003388  2EE8               	decfsz	wreg,f,c
  3521   00338A  D7FE               	bra	u7257
  3522   00338C  2E22               	decfsz	??_turn_180^0,f,c
  3523   00338E  D7FC               	bra	u7257
  3524   003390  2E23               	decfsz	(??_turn_180+1)^0,f,c
  3525   003392  D7FA               	bra	u7257
  3526   003394  F000               	nop	
  3527   003396                     
  3528                           ;MazeRobot.X/dc_motor.c: 319:     stop(mL, mR);
  3529   003396  C01E  F018         	movff	turn_180@mL,stop@mL
  3530   00339A  C01F  F019         	movff	turn_180@mL+1,stop@mL+1
  3531   00339E  C020  F01A         	movff	turn_180@mR,stop@mR
  3532   0033A2  C021  F01B         	movff	turn_180@mR+1,stop@mR+1
  3533   0033A6  ECF0  F01E         	call	_stop	;wreg free
  3534   0033AA  0012               	return		;funcret
  3535   0033AC                     __end_of_turn_180:
  3536                           	callstack 0
  3537                           
  3538 ;; *************** function _turnRight_135 *****************
  3539 ;; Defined at:
  3540 ;;		line 323 in file "MazeRobot.X/dc_motor.c"
  3541 ;; Parameters:    Size  Location     Type
  3542 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  3543 ;;		 -> main@motorLeft(9), 
  3544 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  3545 ;;		 -> main@motorRight(9), 
  3546 ;; Auto vars:     Size  Location     Type
  3547 ;;		None
  3548 ;; Return value:  Size  Location     Type
  3549 ;;                  1    wreg      void 
  3550 ;; Registers used:
  3551 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3552 ;; Tracked objects:
  3553 ;;		On entry : 0/0
  3554 ;;		On exit  : 0/0
  3555 ;;		Unchanged: 0/0
  3556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3557 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3559 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3560 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3561 ;;Total ram usage:        6 bytes
  3562 ;; Hardware stack levels used: 1
  3563 ;; Hardware stack levels required when called: 5
  3564 ;; This function calls:
  3565 ;;		_reverse
  3566 ;;		_setMotorPWM
  3567 ;;		_stop
  3568 ;; This function is called by:
  3569 ;;		_colorDetect
  3570 ;; This function uses a non-reentrant model
  3571 ;;
  3572                           
  3573                           	psect	text9
  3574   0033AC                     __ptext9:
  3575                           	callstack 0
  3576   0033AC                     _turnRight_135:
  3577                           	callstack 24
  3578   0033AC                     
  3579                           ;MazeRobot.X/dc_motor.c: 323: void turnRight_135(DC_motor *mL, DC_motor *mR);MazeRobot.X
      +                          /dc_motor.c: 324: {;MazeRobot.X/dc_motor.c: 325:     stop(mL, mR);
  3580   0033AC  C01E  F018         	movff	turnRight_135@mL,stop@mL
  3581   0033B0  C01F  F019         	movff	turnRight_135@mL+1,stop@mL+1
  3582   0033B4  C020  F01A         	movff	turnRight_135@mR,stop@mR
  3583   0033B8  C021  F01B         	movff	turnRight_135@mR+1,stop@mR+1
  3584   0033BC  ECF0  F01E         	call	_stop	;wreg free
  3585   0033C0                     
  3586                           ;MazeRobot.X/dc_motor.c: 326:     _delay((unsigned long)((100)*(64000000/4000.0)));
  3587   0033C0  0E09               	movlw	9
  3588   0033C2  6E23               	movwf	(??_turnRight_135+1)^0,c
  3589   0033C4  0E1E               	movlw	30
  3590   0033C6  6E22               	movwf	??_turnRight_135^0,c
  3591   0033C8  0EE4               	movlw	228
  3592   0033CA                     u7267:
  3593   0033CA  2EE8               	decfsz	wreg,f,c
  3594   0033CC  D7FE               	bra	u7267
  3595   0033CE  2E22               	decfsz	??_turnRight_135^0,f,c
  3596   0033D0  D7FC               	bra	u7267
  3597   0033D2  2E23               	decfsz	(??_turnRight_135+1)^0,f,c
  3598   0033D4  D7FA               	bra	u7267
  3599   0033D6  D000               	nop2	
  3600   0033D8                     
  3601                           ;MazeRobot.X/dc_motor.c: 328:     reverse(mL, mR);
  3602   0033D8  C01E  F018         	movff	turnRight_135@mL,reverse@mL
  3603   0033DC  C01F  F019         	movff	turnRight_135@mL+1,reverse@mL+1
  3604   0033E0  C020  F01A         	movff	turnRight_135@mR,reverse@mR
  3605   0033E4  C021  F01B         	movff	turnRight_135@mR+1,reverse@mR+1
  3606   0033E8  ECB7  F01D         	call	_reverse	;wreg free
  3607                           
  3608                           ;MazeRobot.X/dc_motor.c: 329:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  3609   0033EC  0E11               	movlw	17
  3610   0033EE  6E23               	movwf	(??_turnRight_135+1)^0,c
  3611   0033F0  0E3C               	movlw	60
  3612   0033F2  6E22               	movwf	??_turnRight_135^0,c
  3613   0033F4  0ECB               	movlw	203
  3614   0033F6                     u7277:
  3615   0033F6  2EE8               	decfsz	wreg,f,c
  3616   0033F8  D7FE               	bra	u7277
  3617   0033FA  2E22               	decfsz	??_turnRight_135^0,f,c
  3618   0033FC  D7FC               	bra	u7277
  3619   0033FE  2E23               	decfsz	(??_turnRight_135+1)^0,f,c
  3620   003400  D7FA               	bra	u7277
  3621   003402  F000               	nop	
  3622   003404                     
  3623                           ;MazeRobot.X/dc_motor.c: 331:     stop(mL, mR);
  3624   003404  C01E  F018         	movff	turnRight_135@mL,stop@mL
  3625   003408  C01F  F019         	movff	turnRight_135@mL+1,stop@mL+1
  3626   00340C  C020  F01A         	movff	turnRight_135@mR,stop@mR
  3627   003410  C021  F01B         	movff	turnRight_135@mR+1,stop@mR+1
  3628   003414  ECF0  F01E         	call	_stop	;wreg free
  3629   003418                     
  3630                           ;MazeRobot.X/dc_motor.c: 333:     mL->direction = 1;
  3631   003418  EE20 F001          	lfsr	2,1
  3632   00341C  501E               	movf	turnRight_135@mL^0,w,c
  3633   00341E  26D9               	addwf	fsr2l,f,c
  3634   003420  501F               	movf	(turnRight_135@mL+1)^0,w,c
  3635   003422  22DA               	addwfc	fsr2h,f,c
  3636   003424  0E01               	movlw	1
  3637   003426  6EDF               	movwf	indf2,c
  3638   003428                     
  3639                           ;MazeRobot.X/dc_motor.c: 334:     mR->direction = 0;
  3640   003428  EE20 F001          	lfsr	2,1
  3641   00342C  5020               	movf	turnRight_135@mR^0,w,c
  3642   00342E  26D9               	addwf	fsr2l,f,c
  3643   003430  5021               	movf	(turnRight_135@mR+1)^0,w,c
  3644   003432  22DA               	addwfc	fsr2h,f,c
  3645   003434  0E00               	movlw	0
  3646   003436  6EDF               	movwf	indf2,c
  3647   003438                     
  3648                           ;MazeRobot.X/dc_motor.c: 336:     mL->brakemode = 1;
  3649   003438  EE20 F002          	lfsr	2,2
  3650   00343C  501E               	movf	turnRight_135@mL^0,w,c
  3651   00343E  26D9               	addwf	fsr2l,f,c
  3652   003440  501F               	movf	(turnRight_135@mL+1)^0,w,c
  3653   003442  22DA               	addwfc	fsr2h,f,c
  3654   003444  0E01               	movlw	1
  3655   003446  6EDF               	movwf	indf2,c
  3656   003448                     
  3657                           ;MazeRobot.X/dc_motor.c: 337:     mL->brakemode = 1;
  3658   003448  EE20 F002          	lfsr	2,2
  3659   00344C  501E               	movf	turnRight_135@mL^0,w,c
  3660   00344E  26D9               	addwf	fsr2l,f,c
  3661   003450  501F               	movf	(turnRight_135@mL+1)^0,w,c
  3662   003452  22DA               	addwfc	fsr2h,f,c
  3663   003454  0E01               	movlw	1
  3664   003456  6EDF               	movwf	indf2,c
  3665                           
  3666                           ;MazeRobot.X/dc_motor.c: 339:     while((mL->power < 80) || (mR->power < 80)){
  3667   003458  EF46  F01A         	goto	l5186
  3668   00345C                     l5180:
  3669                           
  3670                           ;MazeRobot.X/dc_motor.c: 340:         mL->power += 10;
  3671   00345C  C01E  FFD9         	movff	turnRight_135@mL,fsr2l
  3672   003460  C01F  FFDA         	movff	turnRight_135@mL+1,fsr2h
  3673   003464  0E0A               	movlw	10
  3674   003466  26DF               	addwf	indf2,f,c
  3675                           
  3676                           ;MazeRobot.X/dc_motor.c: 341:         mR->power += 10;
  3677   003468  C020  FFD9         	movff	turnRight_135@mR,fsr2l
  3678   00346C  C021  FFDA         	movff	turnRight_135@mR+1,fsr2h
  3679   003470  0E0A               	movlw	10
  3680   003472  26DF               	addwf	indf2,f,c
  3681   003474                     
  3682                           ;MazeRobot.X/dc_motor.c: 342:         setMotorPWM(mL);
  3683   003474  C01E  F012         	movff	turnRight_135@mL,setMotorPWM@m
  3684   003478  C01F  F013         	movff	turnRight_135@mL+1,setMotorPWM@m+1
  3685   00347C  EC28  F017         	call	_setMotorPWM	;wreg free
  3686   003480                     
  3687                           ;MazeRobot.X/dc_motor.c: 343:         setMotorPWM(mR);
  3688   003480  C020  F012         	movff	turnRight_135@mR,setMotorPWM@m
  3689   003484  C021  F013         	movff	turnRight_135@mR+1,setMotorPWM@m+1
  3690   003488  EC28  F017         	call	_setMotorPWM	;wreg free
  3691   00348C                     l5186:
  3692                           
  3693                           ;MazeRobot.X/dc_motor.c: 339:     while((mL->power < 80) || (mR->power < 80)){
  3694   00348C  C01E  FFD9         	movff	turnRight_135@mL,fsr2l
  3695   003490  C01F  FFDA         	movff	turnRight_135@mL+1,fsr2h
  3696   003494  0E4F               	movlw	79
  3697   003496  64DF               	cpfsgt	indf2,c
  3698   003498  EF50  F01A         	goto	u5721
  3699   00349C  EF52  F01A         	goto	u5720
  3700   0034A0                     u5721:
  3701   0034A0  EF2E  F01A         	goto	l5180
  3702   0034A4                     u5720:
  3703   0034A4  C020  FFD9         	movff	turnRight_135@mR,fsr2l
  3704   0034A8  C021  FFDA         	movff	turnRight_135@mR+1,fsr2h
  3705   0034AC  0E4F               	movlw	79
  3706   0034AE  64DF               	cpfsgt	indf2,c
  3707   0034B0  EF5C  F01A         	goto	u5731
  3708   0034B4  EF5E  F01A         	goto	u5730
  3709   0034B8                     u5731:
  3710   0034B8  EF2E  F01A         	goto	l5180
  3711   0034BC                     u5730:
  3712   0034BC                     
  3713                           ;MazeRobot.X/dc_motor.c: 345:    _delay((unsigned long)((turning_time45)*(64000000/4000.
      +                          0)));
  3714   0034BC  0E11               	movlw	17
  3715   0034BE  6E23               	movwf	(??_turnRight_135+1)^0,c
  3716   0034C0  0E3C               	movlw	60
  3717   0034C2  6E22               	movwf	??_turnRight_135^0,c
  3718   0034C4  0ECB               	movlw	203
  3719   0034C6                     u7287:
  3720   0034C6  2EE8               	decfsz	wreg,f,c
  3721   0034C8  D7FE               	bra	u7287
  3722   0034CA  2E22               	decfsz	??_turnRight_135^0,f,c
  3723   0034CC  D7FC               	bra	u7287
  3724   0034CE  2E23               	decfsz	(??_turnRight_135+1)^0,f,c
  3725   0034D0  D7FA               	bra	u7287
  3726   0034D2  F000               	nop	
  3727   0034D4                     
  3728                           ;MazeRobot.X/dc_motor.c: 347:     stop(mL, mR);
  3729   0034D4  C01E  F018         	movff	turnRight_135@mL,stop@mL
  3730   0034D8  C01F  F019         	movff	turnRight_135@mL+1,stop@mL+1
  3731   0034DC  C020  F01A         	movff	turnRight_135@mR,stop@mR
  3732   0034E0  C021  F01B         	movff	turnRight_135@mR+1,stop@mR+1
  3733   0034E4  ECF0  F01E         	call	_stop	;wreg free
  3734   0034E8  0012               	return		;funcret
  3735   0034EA                     __end_of_turnRight_135:
  3736                           	callstack 0
  3737                           
  3738 ;; *************** function _turnLeft_135 *****************
  3739 ;; Defined at:
  3740 ;;		line 352 in file "MazeRobot.X/dc_motor.c"
  3741 ;; Parameters:    Size  Location     Type
  3742 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  3743 ;;		 -> main@motorLeft(9), 
  3744 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  3745 ;;		 -> main@motorRight(9), 
  3746 ;; Auto vars:     Size  Location     Type
  3747 ;;		None
  3748 ;; Return value:  Size  Location     Type
  3749 ;;                  1    wreg      void 
  3750 ;; Registers used:
  3751 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3752 ;; Tracked objects:
  3753 ;;		On entry : 0/0
  3754 ;;		On exit  : 0/0
  3755 ;;		Unchanged: 0/0
  3756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3757 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3759 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3760 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3761 ;;Total ram usage:        6 bytes
  3762 ;; Hardware stack levels used: 1
  3763 ;; Hardware stack levels required when called: 5
  3764 ;; This function calls:
  3765 ;;		_reverse
  3766 ;;		_setMotorPWM
  3767 ;;		_stop
  3768 ;; This function is called by:
  3769 ;;		_colorDetect
  3770 ;; This function uses a non-reentrant model
  3771 ;;
  3772                           
  3773                           	psect	text10
  3774   003766                     __ptext10:
  3775                           	callstack 0
  3776   003766                     _turnLeft_135:
  3777                           	callstack 24
  3778   003766                     
  3779                           ;MazeRobot.X/dc_motor.c: 352: void turnLeft_135(DC_motor *mL, DC_motor *mR);MazeRobot.X/
      +                          dc_motor.c: 353: {;MazeRobot.X/dc_motor.c: 355:     stop(mL, mR);
  3780   003766  C01E  F018         	movff	turnLeft_135@mL,stop@mL
  3781   00376A  C01F  F019         	movff	turnLeft_135@mL+1,stop@mL+1
  3782   00376E  C020  F01A         	movff	turnLeft_135@mR,stop@mR
  3783   003772  C021  F01B         	movff	turnLeft_135@mR+1,stop@mR+1
  3784   003776  ECF0  F01E         	call	_stop	;wreg free
  3785   00377A                     
  3786                           ;MazeRobot.X/dc_motor.c: 356:     _delay((unsigned long)((100)*(64000000/4000.0)));
  3787   00377A  0E09               	movlw	9
  3788   00377C  6E23               	movwf	(??_turnLeft_135+1)^0,c
  3789   00377E  0E1E               	movlw	30
  3790   003780  6E22               	movwf	??_turnLeft_135^0,c
  3791   003782  0EE4               	movlw	228
  3792   003784                     u7297:
  3793   003784  2EE8               	decfsz	wreg,f,c
  3794   003786  D7FE               	bra	u7297
  3795   003788  2E22               	decfsz	??_turnLeft_135^0,f,c
  3796   00378A  D7FC               	bra	u7297
  3797   00378C  2E23               	decfsz	(??_turnLeft_135+1)^0,f,c
  3798   00378E  D7FA               	bra	u7297
  3799   003790  D000               	nop2	
  3800   003792                     
  3801                           ;MazeRobot.X/dc_motor.c: 358:     reverse(mL, mR);
  3802   003792  C01E  F018         	movff	turnLeft_135@mL,reverse@mL
  3803   003796  C01F  F019         	movff	turnLeft_135@mL+1,reverse@mL+1
  3804   00379A  C020  F01A         	movff	turnLeft_135@mR,reverse@mR
  3805   00379E  C021  F01B         	movff	turnLeft_135@mR+1,reverse@mR+1
  3806   0037A2  ECB7  F01D         	call	_reverse	;wreg free
  3807                           
  3808                           ;MazeRobot.X/dc_motor.c: 359:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  3809   0037A6  0E11               	movlw	17
  3810   0037A8  6E23               	movwf	(??_turnLeft_135+1)^0,c
  3811   0037AA  0E3C               	movlw	60
  3812   0037AC  6E22               	movwf	??_turnLeft_135^0,c
  3813   0037AE  0ECB               	movlw	203
  3814   0037B0                     u7307:
  3815   0037B0  2EE8               	decfsz	wreg,f,c
  3816   0037B2  D7FE               	bra	u7307
  3817   0037B4  2E22               	decfsz	??_turnLeft_135^0,f,c
  3818   0037B6  D7FC               	bra	u7307
  3819   0037B8  2E23               	decfsz	(??_turnLeft_135+1)^0,f,c
  3820   0037BA  D7FA               	bra	u7307
  3821   0037BC  F000               	nop	
  3822   0037BE                     
  3823                           ;MazeRobot.X/dc_motor.c: 361:     stop(mL, mR);
  3824   0037BE  C01E  F018         	movff	turnLeft_135@mL,stop@mL
  3825   0037C2  C01F  F019         	movff	turnLeft_135@mL+1,stop@mL+1
  3826   0037C6  C020  F01A         	movff	turnLeft_135@mR,stop@mR
  3827   0037CA  C021  F01B         	movff	turnLeft_135@mR+1,stop@mR+1
  3828   0037CE  ECF0  F01E         	call	_stop	;wreg free
  3829   0037D2                     
  3830                           ;MazeRobot.X/dc_motor.c: 363:     mL->direction = 0;
  3831   0037D2  EE20 F001          	lfsr	2,1
  3832   0037D6  501E               	movf	turnLeft_135@mL^0,w,c
  3833   0037D8  26D9               	addwf	fsr2l,f,c
  3834   0037DA  501F               	movf	(turnLeft_135@mL+1)^0,w,c
  3835   0037DC  22DA               	addwfc	fsr2h,f,c
  3836   0037DE  0E00               	movlw	0
  3837   0037E0  6EDF               	movwf	indf2,c
  3838   0037E2                     
  3839                           ;MazeRobot.X/dc_motor.c: 364:     mR->direction = 1;
  3840   0037E2  EE20 F001          	lfsr	2,1
  3841   0037E6  5020               	movf	turnLeft_135@mR^0,w,c
  3842   0037E8  26D9               	addwf	fsr2l,f,c
  3843   0037EA  5021               	movf	(turnLeft_135@mR+1)^0,w,c
  3844   0037EC  22DA               	addwfc	fsr2h,f,c
  3845   0037EE  0E01               	movlw	1
  3846   0037F0  6EDF               	movwf	indf2,c
  3847   0037F2                     
  3848                           ;MazeRobot.X/dc_motor.c: 366:     mL->brakemode = 1;
  3849   0037F2  EE20 F002          	lfsr	2,2
  3850   0037F6  501E               	movf	turnLeft_135@mL^0,w,c
  3851   0037F8  26D9               	addwf	fsr2l,f,c
  3852   0037FA  501F               	movf	(turnLeft_135@mL+1)^0,w,c
  3853   0037FC  22DA               	addwfc	fsr2h,f,c
  3854   0037FE  0E01               	movlw	1
  3855   003800  6EDF               	movwf	indf2,c
  3856   003802                     
  3857                           ;MazeRobot.X/dc_motor.c: 367:     mL->brakemode = 1;
  3858   003802  EE20 F002          	lfsr	2,2
  3859   003806  501E               	movf	turnLeft_135@mL^0,w,c
  3860   003808  26D9               	addwf	fsr2l,f,c
  3861   00380A  501F               	movf	(turnLeft_135@mL+1)^0,w,c
  3862   00380C  22DA               	addwfc	fsr2h,f,c
  3863   00380E  0E01               	movlw	1
  3864   003810  6EDF               	movwf	indf2,c
  3865                           
  3866                           ;MazeRobot.X/dc_motor.c: 369:     while((mL->power < 80) || (mR->power < 80)){
  3867   003812  EF23  F01C         	goto	l5256
  3868   003816                     l5250:
  3869                           
  3870                           ;MazeRobot.X/dc_motor.c: 370:         mL->power += 10;
  3871   003816  C01E  FFD9         	movff	turnLeft_135@mL,fsr2l
  3872   00381A  C01F  FFDA         	movff	turnLeft_135@mL+1,fsr2h
  3873   00381E  0E0A               	movlw	10
  3874   003820  26DF               	addwf	indf2,f,c
  3875                           
  3876                           ;MazeRobot.X/dc_motor.c: 371:         mR->power += 10;
  3877   003822  C020  FFD9         	movff	turnLeft_135@mR,fsr2l
  3878   003826  C021  FFDA         	movff	turnLeft_135@mR+1,fsr2h
  3879   00382A  0E0A               	movlw	10
  3880   00382C  26DF               	addwf	indf2,f,c
  3881   00382E                     
  3882                           ;MazeRobot.X/dc_motor.c: 372:         setMotorPWM(mL);
  3883   00382E  C01E  F012         	movff	turnLeft_135@mL,setMotorPWM@m
  3884   003832  C01F  F013         	movff	turnLeft_135@mL+1,setMotorPWM@m+1
  3885   003836  EC28  F017         	call	_setMotorPWM	;wreg free
  3886   00383A                     
  3887                           ;MazeRobot.X/dc_motor.c: 373:         setMotorPWM(mR);
  3888   00383A  C020  F012         	movff	turnLeft_135@mR,setMotorPWM@m
  3889   00383E  C021  F013         	movff	turnLeft_135@mR+1,setMotorPWM@m+1
  3890   003842  EC28  F017         	call	_setMotorPWM	;wreg free
  3891   003846                     l5256:
  3892                           
  3893                           ;MazeRobot.X/dc_motor.c: 369:     while((mL->power < 80) || (mR->power < 80)){
  3894   003846  C01E  FFD9         	movff	turnLeft_135@mL,fsr2l
  3895   00384A  C01F  FFDA         	movff	turnLeft_135@mL+1,fsr2h
  3896   00384E  0E4F               	movlw	79
  3897   003850  64DF               	cpfsgt	indf2,c
  3898   003852  EF2D  F01C         	goto	u5761
  3899   003856  EF2F  F01C         	goto	u5760
  3900   00385A                     u5761:
  3901   00385A  EF0B  F01C         	goto	l5250
  3902   00385E                     u5760:
  3903   00385E  C020  FFD9         	movff	turnLeft_135@mR,fsr2l
  3904   003862  C021  FFDA         	movff	turnLeft_135@mR+1,fsr2h
  3905   003866  0E4F               	movlw	79
  3906   003868  64DF               	cpfsgt	indf2,c
  3907   00386A  EF39  F01C         	goto	u5771
  3908   00386E  EF3B  F01C         	goto	u5770
  3909   003872                     u5771:
  3910   003872  EF0B  F01C         	goto	l5250
  3911   003876                     u5770:
  3912   003876                     
  3913                           ;MazeRobot.X/dc_motor.c: 375:    _delay((unsigned long)((3*turning_time45)*(64000000/400
      +                          0.0)));
  3914   003876  0E31               	movlw	49
  3915   003878  6E23               	movwf	(??_turnLeft_135+1)^0,c
  3916   00387A  0EB4               	movlw	180
  3917   00387C  6E22               	movwf	??_turnLeft_135^0,c
  3918   00387E  0E66               	movlw	102
  3919   003880                     u7317:
  3920   003880  2EE8               	decfsz	wreg,f,c
  3921   003882  D7FE               	bra	u7317
  3922   003884  2E22               	decfsz	??_turnLeft_135^0,f,c
  3923   003886  D7FC               	bra	u7317
  3924   003888  2E23               	decfsz	(??_turnLeft_135+1)^0,f,c
  3925   00388A  D7FA               	bra	u7317
  3926   00388C                     
  3927                           ;MazeRobot.X/dc_motor.c: 376:     stop(mL, mR);
  3928   00388C  C01E  F018         	movff	turnLeft_135@mL,stop@mL
  3929   003890  C01F  F019         	movff	turnLeft_135@mL+1,stop@mL+1
  3930   003894  C020  F01A         	movff	turnLeft_135@mR,stop@mR
  3931   003898  C021  F01B         	movff	turnLeft_135@mR+1,stop@mR+1
  3932   00389C  ECF0  F01E         	call	_stop	;wreg free
  3933   0038A0  0012               	return		;funcret
  3934   0038A2                     __end_of_turnLeft_135:
  3935                           	callstack 0
  3936                           
  3937 ;; *************** function _sprintf *****************
  3938 ;; Defined at:
  3939 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_sprintf.c"
  3940 ;; Parameters:    Size  Location     Type
  3941 ;;  s               2    6[BANK0 ] PTR unsigned char 
  3942 ;;		 -> ADC2String@buf(40), colorDetect@testString(20), 
  3943 ;;  fmt             2    8[BANK0 ] PTR const unsigned char 
  3944 ;;		 -> STR_2(15), STR_1(13), 
  3945 ;; Auto vars:     Size  Location     Type
  3946 ;;  f              11   24[BANK0 ] struct _IO_FILE
  3947 ;;  ap              2   22[BANK0 ] PTR void [1]
  3948 ;;		 -> ?_sprintf(2), 
  3949 ;;  ret             2    0        int 
  3950 ;; Return value:  Size  Location     Type
  3951 ;;                  2    6[BANK0 ] int 
  3952 ;; Registers used:
  3953 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3954 ;; Tracked objects:
  3955 ;;		On entry : 0/0
  3956 ;;		On exit  : 0/0
  3957 ;;		Unchanged: 0/0
  3958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3959 ;;      Params:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3960 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3962 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3963 ;;Total ram usage:       29 bytes
  3964 ;; Hardware stack levels used: 1
  3965 ;; Hardware stack levels required when called: 9
  3966 ;; This function calls:
  3967 ;;		_vfprintf
  3968 ;; This function is called by:
  3969 ;;		_colorDetect
  3970 ;;		_ADC2String
  3971 ;; This function uses a non-reentrant model
  3972 ;;
  3973                           
  3974                           	psect	text11
  3975   0041C0                     __ptext11:
  3976                           	callstack 0
  3977   0041C0                     _sprintf:
  3978                           	callstack 20
  3979   0041C0  0E6A               	movlw	low (?_sprintf+4)
  3980   0041C2  0100               	movlb	0	; () banked
  3981   0041C4  6F76               	movwf	sprintf@ap& (0+255),b
  3982   0041C6  0E00               	movlw	high (?_sprintf+4)
  3983   0041C8  6F77               	movwf	(sprintf@ap+1)& (0+255),b
  3984   0041CA  C066  F078         	movff	sprintf@s,sprintf@f
  3985   0041CE  C067  F079         	movff	sprintf@s+1,sprintf@f+1
  3986   0041D2                     
  3987                           ; BSR set to: 0
  3988   0041D2  0E00               	movlw	0
  3989   0041D4  6F7C               	movwf	(sprintf@f+4)& (0+255),b
  3990   0041D6  0E00               	movlw	0
  3991   0041D8  6F7B               	movwf	(sprintf@f+3)& (0+255),b
  3992   0041DA                     
  3993                           ; BSR set to: 0
  3994   0041DA  0E00               	movlw	0
  3995   0041DC  6F82               	movwf	(sprintf@f+10)& (0+255),b
  3996   0041DE  0E00               	movlw	0
  3997   0041E0  6F81               	movwf	(sprintf@f+9)& (0+255),b
  3998   0041E2                     
  3999                           ; BSR set to: 0
  4000   0041E2  0E78               	movlw	low sprintf@f
  4001   0041E4  6F60               	movwf	vfprintf@fp& (0+255),b
  4002   0041E6  0E00               	movlw	high sprintf@f
  4003   0041E8  6F61               	movwf	(vfprintf@fp+1)& (0+255),b
  4004   0041EA  C068  F062         	movff	sprintf@fmt,vfprintf@fmt
  4005   0041EE  C069  F063         	movff	sprintf@fmt+1,vfprintf@fmt+1
  4006   0041F2  0E76               	movlw	low sprintf@ap
  4007   0041F4  6F64               	movwf	vfprintf@ap& (0+255),b
  4008   0041F6  0E00               	movlw	high sprintf@ap
  4009   0041F8  6F65               	movwf	(vfprintf@ap+1)& (0+255),b
  4010   0041FA  EC09  F021         	call	_vfprintf	;wreg free
  4011   0041FE  0100               	movlb	0	; () banked
  4012   004200  517B               	movf	(sprintf@f+3)& (0+255),w,b
  4013   004202  2566               	addwf	sprintf@s& (0+255),w,b
  4014   004204  6ED9               	movwf	fsr2l,c
  4015   004206  517C               	movf	(sprintf@f+4)& (0+255),w,b
  4016   004208  2167               	addwfc	(sprintf@s+1)& (0+255),w,b
  4017   00420A  6EDA               	movwf	fsr2h,c
  4018   00420C  0E00               	movlw	0
  4019   00420E  6EDF               	movwf	indf2,c
  4020   004210                     
  4021                           ; BSR set to: 0
  4022   004210  0012               	return		;funcret
  4023   004212                     __end_of_sprintf:
  4024                           	callstack 0
  4025                           
  4026 ;; *************** function _vfprintf *****************
  4027 ;; Defined at:
  4028 ;;		line 1520 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  4029 ;; Parameters:    Size  Location     Type
  4030 ;;  fp              2    0[BANK0 ] PTR struct _IO_FILE
  4031 ;;		 -> sprintf@f(11), 
  4032 ;;  fmt             2    2[BANK0 ] PTR const unsigned char 
  4033 ;;		 -> STR_2(15), STR_1(13), 
  4034 ;;  ap              2    4[BANK0 ] PTR PTR void 
  4035 ;;		 -> sprintf@ap(2), 
  4036 ;; Auto vars:     Size  Location     Type
  4037 ;;  cfmt            2   84[COMRAM] PTR unsigned char 
  4038 ;;		 -> STR_2(15), STR_1(13), 
  4039 ;; Return value:  Size  Location     Type
  4040 ;;                  2    0[BANK0 ] int 
  4041 ;; Registers used:
  4042 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4043 ;; Tracked objects:
  4044 ;;		On entry : 0/0
  4045 ;;		On exit  : 0/0
  4046 ;;		Unchanged: 0/0
  4047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4048 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4049 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4051 ;;      Totals:         2       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4052 ;;Total ram usage:        8 bytes
  4053 ;; Hardware stack levels used: 1
  4054 ;; Hardware stack levels required when called: 8
  4055 ;; This function calls:
  4056 ;;		_vfpfcnvrt
  4057 ;; This function is called by:
  4058 ;;		_sprintf
  4059 ;; This function uses a non-reentrant model
  4060 ;;
  4061                           
  4062                           	psect	text12
  4063   004212                     __ptext12:
  4064                           	callstack 0
  4065   004212                     _vfprintf:
  4066                           	callstack 20
  4067   004212                     
  4068                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1520: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\source
      +                          s\c99\common\doprnt.c: 1521: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\comm
      +                          on\doprnt.c: 1523:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\
      +                          common\doprnt.c: 1525:     cfmt = (char *)fmt;
  4069   004212  C062  F055         	movff	vfprintf@fmt,vfprintf@cfmt
  4070   004216  C063  F056         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  4071                           
  4072                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  4073   00421A  EF1D  F021         	goto	l5142
  4074   00421E                     l5140:
  4075                           
  4076                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1533:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  4077   00421E  C060  F043         	movff	vfprintf@fp,vfpfcnvrt@fp
  4078   004222  C061  F044         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  4079   004226  0E55               	movlw	low vfprintf@cfmt
  4080   004228  6E45               	movwf	vfpfcnvrt@fmt^0,c
  4081   00422A  0E00               	movlw	high vfprintf@cfmt
  4082   00422C  6E46               	movwf	(vfpfcnvrt@fmt+1)^0,c
  4083   00422E  C064  F047         	movff	vfprintf@ap,vfpfcnvrt@ap
  4084   004232  C065  F048         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  4085   004236  EC90  F018         	call	_vfpfcnvrt	;wreg free
  4086   00423A                     l5142:
  4087                           
  4088                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  4089   00423A  C055  FFF6         	movff	vfprintf@cfmt,tblptrl
  4090   00423E  C056  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  4091   004242                     	if	0	;tblptru may be non-zero
  4092   004242                     	endif
  4093   004242                     	if	0	;tblptru may be non-zero
  4094   004242                     	endif
  4095   004242  0008               	tblrd		*
  4096   004244  50F5               	movf	tablat,w,c
  4097   004246  0900               	iorlw	0
  4098   004248  A4D8               	btfss	status,2,c
  4099   00424A  EF29  F021         	goto	u5711
  4100   00424E  EF2B  F021         	goto	u5710
  4101   004252                     u5711:
  4102   004252  EF0F  F021         	goto	l5140
  4103   004256                     u5710:
  4104   004256                     
  4105                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1538:  return 0;
  4106   004256  0E00               	movlw	0
  4107   004258  0100               	movlb	0	; () banked
  4108   00425A  6F61               	movwf	(?_vfprintf+1)& (0+255),b
  4109   00425C  0E00               	movlw	0
  4110   00425E  6F60               	movwf	?_vfprintf& (0+255),b
  4111   004260                     
  4112                           ; BSR set to: 0
  4113   004260  0012               	return		;funcret
  4114   004262                     __end_of_vfprintf:
  4115                           	callstack 0
  4116                           
  4117 ;; *************** function _vfpfcnvrt *****************
  4118 ;; Defined at:
  4119 ;;		line 1007 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  4120 ;; Parameters:    Size  Location     Type
  4121 ;;  fp              2   66[COMRAM] PTR struct _IO_FILE
  4122 ;;		 -> sprintf@f(11), 
  4123 ;;  fmt             2   68[COMRAM] PTR PTR unsigned char 
  4124 ;;		 -> vfprintf@cfmt(2), 
  4125 ;;  ap              2   70[COMRAM] PTR PTR void 
  4126 ;;		 -> sprintf@ap(2), 
  4127 ;; Auto vars:     Size  Location     Type
  4128 ;;  convarg         8   74[COMRAM] struct .
  4129 ;;  cp              2   82[COMRAM] PTR unsigned char 
  4130 ;;		 -> STR_2(15), STR_1(13), 
  4131 ;;  i               2    0        int 
  4132 ;;  done            2    0        int 
  4133 ;;  c               1    0        unsigned char 
  4134 ;; Return value:  Size  Location     Type
  4135 ;;                  1    wreg      void 
  4136 ;; Registers used:
  4137 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4138 ;; Tracked objects:
  4139 ;;		On entry : 0/0
  4140 ;;		On exit  : 0/0
  4141 ;;		Unchanged: 0/0
  4142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4143 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4144 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4145 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4146 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4147 ;;Total ram usage:       18 bytes
  4148 ;; Hardware stack levels used: 1
  4149 ;; Hardware stack levels required when called: 7
  4150 ;; This function calls:
  4151 ;;		_dtoa
  4152 ;;		_fputc
  4153 ;; This function is called by:
  4154 ;;		_vfprintf
  4155 ;; This function uses a non-reentrant model
  4156 ;;
  4157                           
  4158                           	psect	text13
  4159   003120                     __ptext13:
  4160                           	callstack 0
  4161   003120                     _vfpfcnvrt:
  4162                           	callstack 20
  4163   003120                     
  4164                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1007: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1008: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\dopr
      +                          nt.c: 1009:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 1010:     int done, i;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1016:  } convarg;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1019:     if ((*fmt)[0] == '%') {
  4165   003120  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4166   003124  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4167   003128  CFDE FFF6          	movff	postinc2,tblptrl
  4168   00312C  CFDD FFF7          	movff	postdec2,tblptrh
  4169   003130                     	if	0	;tblptru may be non-zero
  4170   003130                     	endif
  4171   003130                     	if	0	;tblptru may be non-zero
  4172   003130                     	endif
  4173   003130  0008               	tblrd		*
  4174   003132  50F5               	movf	tablat,w,c
  4175   003134  0A25               	xorlw	37
  4176   003136  A4D8               	btfss	status,2,c
  4177   003138  EFA0  F018         	goto	u5221
  4178   00313C  EFA2  F018         	goto	u5220
  4179   003140                     u5221:
  4180   003140  EF22  F019         	goto	l4834
  4181   003144                     u5220:
  4182   003144                     
  4183                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1020:         ++*
      +                          fmt;
  4184   003144  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4185   003148  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4186   00314C  2ADE               	incf	postinc2,f,c
  4187   00314E  0E00               	movlw	0
  4188   003150  22DD               	addwfc	postdec2,f,c
  4189   003152                     
  4190                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1022:         fla
      +                          gs = width = 0;
  4191   003152  0E00               	movlw	0
  4192   003154  0100               	movlb	0	; () banked
  4193   003156  6FCE               	movwf	(_width+1)& (0+255),b
  4194   003158  0E00               	movlw	0
  4195   00315A  6FCD               	movwf	_width& (0+255),b
  4196   00315C  C0CD  F0D1         	movff	_width,_flags
  4197   003160                     
  4198                           ; BSR set to: 0
  4199                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1023:         pre
      +                          c = -1;
  4200   003160  69CF               	setf	_prec& (0+255),b
  4201   003162  69D0               	setf	(_prec+1)& (0+255),b
  4202   003164                     
  4203                           ; BSR set to: 0
  4204                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1117:   cp = *fmt
      +                          ;
  4205   003164  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4206   003168  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4207   00316C  CFDE F053          	movff	postinc2,vfpfcnvrt@cp
  4208   003170  CFDD F054          	movff	postdec2,vfpfcnvrt@cp+1
  4209   003174                     
  4210                           ; BSR set to: 0
  4211                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1187:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  4212   003174  C053  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  4213   003178  C054  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  4214   00317C                     	if	0	;tblptru may be non-zero
  4215   00317C                     	endif
  4216   00317C                     	if	0	;tblptru may be non-zero
  4217   00317C                     	endif
  4218   00317C  0008               	tblrd		*
  4219   00317E  50F5               	movf	tablat,w,c
  4220   003180  0A64               	xorlw	100
  4221   003182  B4D8               	btfsc	status,2,c
  4222   003184  EFC6  F018         	goto	u5231
  4223   003188  EFC8  F018         	goto	u5230
  4224   00318C                     u5231:
  4225   00318C  EFD6  F018         	goto	l4824
  4226   003190                     u5230:
  4227   003190                     
  4228                           ; BSR set to: 0
  4229   003190  C053  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  4230   003194  C054  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  4231   003198                     	if	0	;tblptru may be non-zero
  4232   003198                     	endif
  4233   003198                     	if	0	;tblptru may be non-zero
  4234   003198                     	endif
  4235   003198  0008               	tblrd		*
  4236   00319A  50F5               	movf	tablat,w,c
  4237   00319C  0A69               	xorlw	105
  4238   00319E  A4D8               	btfss	status,2,c
  4239   0031A0  EFD4  F018         	goto	u5241
  4240   0031A4  EFD6  F018         	goto	u5240
  4241   0031A8                     u5241:
  4242   0031A8  EF19  F019         	goto	l4830
  4243   0031AC                     u5240:
  4244   0031AC                     l4824:
  4245                           
  4246                           ; BSR set to: 0
  4247                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1230:    convarg.
      +                          ll = (long long)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  4248   0031AC  C047  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  4249   0031B0  C048  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  4250   0031B4  CFDF F049          	movff	indf2,??_vfpfcnvrt
  4251   0031B8  0E02               	movlw	2
  4252   0031BA  26DE               	addwf	postinc2,f,c
  4253   0031BC  CFDF F04A          	movff	indf2,??_vfpfcnvrt+1
  4254   0031C0  0E00               	movlw	0
  4255   0031C2  22DD               	addwfc	postdec2,f,c
  4256   0031C4  C049  FFD9         	movff	??_vfpfcnvrt,fsr2l
  4257   0031C8  C04A  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  4258   0031CC  CFDE F04B          	movff	postinc2,vfpfcnvrt@convarg
  4259   0031D0  CFDD F04C          	movff	postdec2,vfpfcnvrt@convarg+1
  4260   0031D4  0E00               	movlw	0
  4261   0031D6  BE4C               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  4262   0031D8  0EFF               	movlw	-1
  4263   0031DA  6E4D               	movwf	(vfpfcnvrt@convarg+2)^0,c
  4264   0031DC  6E4E               	movwf	(vfpfcnvrt@convarg+3)^0,c
  4265   0031DE  6E4F               	movwf	(vfpfcnvrt@convarg+4)^0,c
  4266   0031E0  6E50               	movwf	(vfpfcnvrt@convarg+5)^0,c
  4267   0031E2  6E51               	movwf	(vfpfcnvrt@convarg+6)^0,c
  4268   0031E4  6E52               	movwf	(vfpfcnvrt@convarg+7)^0,c
  4269                           
  4270                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1232:    *fmt = c
      +                          p+1;
  4271   0031E6  0E01               	movlw	1
  4272   0031E8  2453               	addwf	vfpfcnvrt@cp^0,w,c
  4273   0031EA  6E49               	movwf	??_vfpfcnvrt^0,c
  4274   0031EC  0E00               	movlw	0
  4275   0031EE  2054               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  4276   0031F0  6E4A               	movwf	(??_vfpfcnvrt+1)^0,c
  4277   0031F2  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4278   0031F6  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4279   0031FA  C049  FFDE         	movff	??_vfpfcnvrt,postinc2
  4280   0031FE  C04A  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  4281   003202                     
  4282                           ; BSR set to: 0
  4283                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1233:    return (
      +                          void) dtoa(fp, convarg.ll);;	Return value of _vfpfcnvrt is never used
  4284   003202  C043  F020         	movff	vfpfcnvrt@fp,dtoa@fp
  4285   003206  C044  F021         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  4286   00320A  C04B  F022         	movff	vfpfcnvrt@convarg,dtoa@d
  4287   00320E  C04C  F023         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  4288   003212  C04D  F024         	movff	vfpfcnvrt@convarg+2,dtoa@d+2
  4289   003216  C04E  F025         	movff	vfpfcnvrt@convarg+3,dtoa@d+3
  4290   00321A  C04F  F026         	movff	vfpfcnvrt@convarg+4,dtoa@d+4
  4291   00321E  C050  F027         	movff	vfpfcnvrt@convarg+5,dtoa@d+5
  4292   003222  C051  F028         	movff	vfpfcnvrt@convarg+6,dtoa@d+6
  4293   003226  C052  F029         	movff	vfpfcnvrt@convarg+7,dtoa@d+7
  4294   00322A  EC54  F013         	call	_dtoa	;wreg free
  4295   00322E  EF36  F019         	goto	l1242
  4296   003232                     l4830:
  4297                           
  4298                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1509:         ++*
      +                          fmt;
  4299   003232  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4300   003236  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4301   00323A  2ADE               	incf	postinc2,f,c
  4302   00323C  0E00               	movlw	0
  4303   00323E  22DD               	addwfc	postdec2,f,c
  4304   003240  EF36  F019         	goto	l1242
  4305   003244                     l4834:
  4306                           
  4307                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1514:     fputc((
      +                          int)(*fmt)[0], fp);
  4308   003244  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4309   003248  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4310   00324C  CFDE FFF6          	movff	postinc2,tblptrl
  4311   003250  CFDD FFF7          	movff	postdec2,tblptrh
  4312   003254                     	if	0	;tblptru may be non-zero
  4313   003254                     	endif
  4314   003254                     	if	0	;tblptru may be non-zero
  4315   003254                     	endif
  4316   003254  0008               	tblrd		*
  4317   003256  50F5               	movf	tablat,w,c
  4318   003258  6E05               	movwf	fputc@c^0,c
  4319   00325A  6A06               	clrf	(fputc@c+1)^0,c
  4320   00325C  C043  F007         	movff	vfpfcnvrt@fp,fputc@fp
  4321   003260  C044  F008         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  4322   003264  EC8B  F01E         	call	_fputc	;wreg free
  4323   003268  EF19  F019         	goto	l4830
  4324   00326C                     l1242:
  4325   00326C  0012               	return		;funcret
  4326   00326E                     __end_of_vfpfcnvrt:
  4327                           	callstack 0
  4328                           
  4329 ;; *************** function _dtoa *****************
  4330 ;; Defined at:
  4331 ;;		line 443 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  4332 ;; Parameters:    Size  Location     Type
  4333 ;;  fp              2   31[COMRAM] PTR struct _IO_FILE
  4334 ;;		 -> sprintf@f(11), 
  4335 ;;  d               8   33[COMRAM] long long 
  4336 ;; Auto vars:     Size  Location     Type
  4337 ;;  n               8   55[COMRAM] long long 
  4338 ;;  i               2   64[COMRAM] int 
  4339 ;;  w               2   53[COMRAM] int 
  4340 ;;  p               2   51[COMRAM] int 
  4341 ;;  s               1   63[COMRAM] unsigned char 
  4342 ;; Return value:  Size  Location     Type
  4343 ;;                  1    wreg      void 
  4344 ;; Registers used:
  4345 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4346 ;; Tracked objects:
  4347 ;;		On entry : 0/0
  4348 ;;		On exit  : 0/0
  4349 ;;		Unchanged: 0/0
  4350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4351 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4352 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4353 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4354 ;;      Totals:        35       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4355 ;;Total ram usage:       35 bytes
  4356 ;; Hardware stack levels used: 1
  4357 ;; Hardware stack levels required when called: 6
  4358 ;; This function calls:
  4359 ;;		___aodiv
  4360 ;;		___aomod
  4361 ;;		_abs
  4362 ;;		_pad
  4363 ;; This function is called by:
  4364 ;;		_vfpfcnvrt
  4365 ;; This function uses a non-reentrant model
  4366 ;;
  4367                           
  4368                           	psect	text14
  4369   0026A8                     __ptext14:
  4370                           	callstack 0
  4371   0026A8                     _dtoa:
  4372                           	callstack 20
  4373   0026A8                     
  4374                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 443: static void 
      +                          dtoa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\
      +                          doprnt.c: 444: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          45:  char s;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 446: 
      +                              int i, p, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          47:     long long n;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 450:     n = d;
  4375   0026A8  C022  F038         	movff	dtoa@d,dtoa@n
  4376   0026AC  C023  F039         	movff	dtoa@d+1,dtoa@n+1
  4377   0026B0  C024  F03A         	movff	dtoa@d+2,dtoa@n+2
  4378   0026B4  C025  F03B         	movff	dtoa@d+3,dtoa@n+3
  4379   0026B8  C026  F03C         	movff	dtoa@d+4,dtoa@n+4
  4380   0026BC  C027  F03D         	movff	dtoa@d+5,dtoa@n+5
  4381   0026C0  C028  F03E         	movff	dtoa@d+6,dtoa@n+6
  4382   0026C4  C029  F03F         	movff	dtoa@d+7,dtoa@n+7
  4383   0026C8                     
  4384                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 451:     s = n < 
      +                          0 ? 1 : 0;
  4385   0026C8  BE3F               	btfsc	(dtoa@n+7)^0,7,c
  4386   0026CA  EF69  F013         	goto	u5021
  4387   0026CE  EF6C  F013         	goto	u5020
  4388   0026D2                     u5021:
  4389   0026D2  0E01               	movlw	1
  4390   0026D4  EF6D  F013         	goto	u5030
  4391   0026D8                     u5020:
  4392   0026D8  0E00               	movlw	0
  4393   0026DA                     u5030:
  4394   0026DA  6E40               	movwf	dtoa@s^0,c
  4395   0026DC                     
  4396                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 452:     if (s) {
  4397   0026DC  5040               	movf	dtoa@s^0,w,c
  4398   0026DE  B4D8               	btfsc	status,2,c
  4399   0026E0  EF74  F013         	goto	u5041
  4400   0026E4  EF76  F013         	goto	u5040
  4401   0026E8                     u5041:
  4402   0026E8  EF86  F013         	goto	l4700
  4403   0026EC                     u5040:
  4404   0026EC                     
  4405                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 453:         n = 
      +                          -n;
  4406   0026EC  1E3F               	comf	(dtoa@n+7)^0,f,c
  4407   0026EE  1E3E               	comf	(dtoa@n+6)^0,f,c
  4408   0026F0  1E3D               	comf	(dtoa@n+5)^0,f,c
  4409   0026F2  1E3C               	comf	(dtoa@n+4)^0,f,c
  4410   0026F4  1E3B               	comf	(dtoa@n+3)^0,f,c
  4411   0026F6  1E3A               	comf	(dtoa@n+2)^0,f,c
  4412   0026F8  1E39               	comf	(dtoa@n+1)^0,f,c
  4413   0026FA  6C38               	negf	dtoa@n^0,c
  4414   0026FC  0E00               	movlw	0
  4415   0026FE  2239               	addwfc	(dtoa@n+1)^0,f,c
  4416   002700  223A               	addwfc	(dtoa@n+2)^0,f,c
  4417   002702  223B               	addwfc	(dtoa@n+3)^0,f,c
  4418   002704  223C               	addwfc	(dtoa@n+4)^0,f,c
  4419   002706  223D               	addwfc	(dtoa@n+5)^0,f,c
  4420   002708  223E               	addwfc	(dtoa@n+6)^0,f,c
  4421   00270A  223F               	addwfc	(dtoa@n+7)^0,f,c
  4422   00270C                     l4700:
  4423                           
  4424                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 462:     p = (0 <
      +                           prec) ? prec : 1;
  4425   00270C  0100               	movlb	0	; () banked
  4426   00270E  BFD0               	btfsc	(_prec+1)& (0+255),7,b
  4427   002710  EF94  F013         	goto	u5050
  4428   002714  51D0               	movf	(_prec+1)& (0+255),w,b
  4429   002716  E106               	bnz	u5051
  4430   002718  05CF               	decf	_prec& (0+255),w,b
  4431   00271A  B0D8               	btfsc	status,0,c
  4432   00271C  EF92  F013         	goto	u5051
  4433   002720  EF94  F013         	goto	u5050
  4434   002724                     u5051:
  4435   002724  EF9A  F013         	goto	l1221
  4436   002728                     u5050:
  4437   002728                     
  4438                           ; BSR set to: 0
  4439   002728  0E00               	movlw	0
  4440   00272A  6E35               	movwf	(dtoa@p+1)^0,c
  4441   00272C  0E01               	movlw	1
  4442   00272E  6E34               	movwf	dtoa@p^0,c
  4443   002730  EF9E  F013         	goto	l1223
  4444   002734                     l1221:
  4445                           
  4446                           ; BSR set to: 0
  4447   002734  C0CF  F034         	movff	_prec,dtoa@p
  4448   002738  C0D0  F035         	movff	_prec+1,dtoa@p+1
  4449   00273C                     l1223:
  4450                           
  4451                           ; BSR set to: 0
  4452                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 463:     w = widt
      +                          h;
  4453   00273C  C0CD  F036         	movff	_width,dtoa@w
  4454   002740  C0CE  F037         	movff	_width+1,dtoa@w+1
  4455   002744                     
  4456                           ; BSR set to: 0
  4457                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 464:     if (s
  4458   002744  5040               	movf	dtoa@s^0,w,c
  4459   002746  B4D8               	btfsc	status,2,c
  4460   002748  EFA8  F013         	goto	u5061
  4461   00274C  EFAA  F013         	goto	u5060
  4462   002750                     u5061:
  4463   002750  EFC1  F013         	goto	l1224
  4464   002754                     u5060:
  4465   002754                     
  4466                           ; BSR set to: 0
  4467                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 468:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 469:         --w;
  4468   002754  0636               	decf	dtoa@w^0,f,c
  4469   002756  A0D8               	btfss	status,0,c
  4470   002758  0637               	decf	(dtoa@w+1)^0,f,c
  4471   00275A                     
  4472                           ; BSR set to: 0
  4473                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 470:   s = s ? '-
      +                          ' : '+';
  4474   00275A  5040               	movf	dtoa@s^0,w,c
  4475   00275C  A4D8               	btfss	status,2,c
  4476   00275E  EFB3  F013         	goto	u5071
  4477   002762  EFB5  F013         	goto	u5070
  4478   002766                     u5071:
  4479   002766  EFBB  F013         	goto	l4712
  4480   00276A                     u5070:
  4481   00276A                     
  4482                           ; BSR set to: 0
  4483   00276A  0E00               	movlw	0
  4484   00276C  6E33               	movwf	(_dtoa$2676+1)^0,c
  4485   00276E  0E2B               	movlw	43
  4486   002770  6E32               	movwf	_dtoa$2676^0,c
  4487   002772  EFBF  F013         	goto	l4714
  4488   002776                     l4712:
  4489                           
  4490                           ; BSR set to: 0
  4491   002776  0E00               	movlw	0
  4492   002778  6E33               	movwf	(_dtoa$2676+1)^0,c
  4493   00277A  0E2D               	movlw	45
  4494   00277C  6E32               	movwf	_dtoa$2676^0,c
  4495   00277E                     l4714:
  4496                           
  4497                           ; BSR set to: 0
  4498   00277E  C032  F040         	movff	_dtoa$2676,dtoa@s
  4499   002782                     l1224:
  4500                           
  4501                           ; BSR set to: 0
  4502                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 480:     i = size
      +                          of(dbuf) - 1;
  4503   002782  0E00               	movlw	0
  4504   002784  6E42               	movwf	(dtoa@i+1)^0,c
  4505   002786  0E1F               	movlw	31
  4506   002788  6E41               	movwf	dtoa@i^0,c
  4507   00278A                     
  4508                           ; BSR set to: 0
  4509                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 481:     dbuf[i] 
      +                          = '\0';
  4510   00278A  0E00               	movlw	0
  4511   00278C  0101               	movlb	1	; () banked
  4512   00278E  6F73               	movwf	(_dbuf+31)& (0+255),b
  4513                           
  4514                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  4515   002790  EF46  F014         	goto	l4728
  4516   002794                     l4718:
  4517                           
  4518                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 486:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 487:         --i;
  4519   002794  0641               	decf	dtoa@i^0,f,c
  4520   002796  A0D8               	btfss	status,0,c
  4521   002798  0642               	decf	(dtoa@i+1)^0,f,c
  4522   00279A                     
  4523                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 488:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  4524   00279A  0E54               	movlw	low _dbuf
  4525   00279C  2441               	addwf	dtoa@i^0,w,c
  4526   00279E  6ED9               	movwf	fsr2l,c
  4527   0027A0  0E01               	movlw	high _dbuf
  4528   0027A2  2042               	addwfc	(dtoa@i+1)^0,w,c
  4529   0027A4  6EDA               	movwf	fsr2h,c
  4530   0027A6  C038  F005         	movff	dtoa@n,___aomod@dividend
  4531   0027AA  C039  F006         	movff	dtoa@n+1,___aomod@dividend+1
  4532   0027AE  C03A  F007         	movff	dtoa@n+2,___aomod@dividend+2
  4533   0027B2  C03B  F008         	movff	dtoa@n+3,___aomod@dividend+3
  4534   0027B6  C03C  F009         	movff	dtoa@n+4,___aomod@dividend+4
  4535   0027BA  C03D  F00A         	movff	dtoa@n+5,___aomod@dividend+5
  4536   0027BE  C03E  F00B         	movff	dtoa@n+6,___aomod@dividend+6
  4537   0027C2  C03F  F00C         	movff	dtoa@n+7,___aomod@dividend+7
  4538   0027C6  0E0A               	movlw	10
  4539   0027C8  6E0D               	movwf	___aomod@divisor^0,c
  4540   0027CA  0E00               	movlw	0
  4541   0027CC  6E0E               	movwf	(___aomod@divisor+1)^0,c
  4542   0027CE  0E00               	movlw	0
  4543   0027D0  6E0F               	movwf	(___aomod@divisor+2)^0,c
  4544   0027D2  0E00               	movlw	0
  4545   0027D4  6E10               	movwf	(___aomod@divisor+3)^0,c
  4546   0027D6  0E00               	movlw	0
  4547   0027D8  6E11               	movwf	(___aomod@divisor+4)^0,c
  4548   0027DA  0E00               	movlw	0
  4549   0027DC  6E12               	movwf	(___aomod@divisor+5)^0,c
  4550   0027DE  0E00               	movlw	0
  4551   0027E0  6E13               	movwf	(___aomod@divisor+6)^0,c
  4552   0027E2  0E00               	movlw	0
  4553   0027E4  6E14               	movwf	(___aomod@divisor+7)^0,c
  4554   0027E6  ECDE  F017         	call	___aomod	;wreg free
  4555   0027EA  C005  F02A         	movff	?___aomod,??_dtoa
  4556   0027EE  C006  F02B         	movff	?___aomod+1,??_dtoa+1
  4557   0027F2  C007  F02C         	movff	?___aomod+2,??_dtoa+2
  4558   0027F6  C008  F02D         	movff	?___aomod+3,??_dtoa+3
  4559   0027FA  C009  F02E         	movff	?___aomod+4,??_dtoa+4
  4560   0027FE  C00A  F02F         	movff	?___aomod+5,??_dtoa+5
  4561   002802  C00B  F030         	movff	?___aomod+6,??_dtoa+6
  4562   002806  C00C  F031         	movff	?___aomod+7,??_dtoa+7
  4563   00280A  C02A  F017         	movff	??_dtoa,abs@a
  4564   00280E  C02B  F018         	movff	??_dtoa+1,abs@a+1
  4565   002812  EC37  F022         	call	_abs	;wreg free
  4566   002816  5017               	movf	?_abs^0,w,c
  4567   002818  0F30               	addlw	48
  4568   00281A  6EDF               	movwf	indf2,c
  4569   00281C                     
  4570                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 489:         --p;
  4571   00281C  0634               	decf	dtoa@p^0,f,c
  4572   00281E  A0D8               	btfss	status,0,c
  4573   002820  0635               	decf	(dtoa@p+1)^0,f,c
  4574   002822                     
  4575                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 490:         --w;
  4576   002822  0636               	decf	dtoa@w^0,f,c
  4577   002824  A0D8               	btfss	status,0,c
  4578   002826  0637               	decf	(dtoa@w+1)^0,f,c
  4579   002828                     
  4580                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 491:         n = 
      +                          n / 10;
  4581   002828  C038  F005         	movff	dtoa@n,___aodiv@dividend
  4582   00282C  C039  F006         	movff	dtoa@n+1,___aodiv@dividend+1
  4583   002830  C03A  F007         	movff	dtoa@n+2,___aodiv@dividend+2
  4584   002834  C03B  F008         	movff	dtoa@n+3,___aodiv@dividend+3
  4585   002838  C03C  F009         	movff	dtoa@n+4,___aodiv@dividend+4
  4586   00283C  C03D  F00A         	movff	dtoa@n+5,___aodiv@dividend+5
  4587   002840  C03E  F00B         	movff	dtoa@n+6,___aodiv@dividend+6
  4588   002844  C03F  F00C         	movff	dtoa@n+7,___aodiv@dividend+7
  4589   002848  0E0A               	movlw	10
  4590   00284A  6E0D               	movwf	___aodiv@divisor^0,c
  4591   00284C  0E00               	movlw	0
  4592   00284E  6E0E               	movwf	(___aodiv@divisor+1)^0,c
  4593   002850  0E00               	movlw	0
  4594   002852  6E0F               	movwf	(___aodiv@divisor+2)^0,c
  4595   002854  0E00               	movlw	0
  4596   002856  6E10               	movwf	(___aodiv@divisor+3)^0,c
  4597   002858  0E00               	movlw	0
  4598   00285A  6E11               	movwf	(___aodiv@divisor+4)^0,c
  4599   00285C  0E00               	movlw	0
  4600   00285E  6E12               	movwf	(___aodiv@divisor+5)^0,c
  4601   002860  0E00               	movlw	0
  4602   002862  6E13               	movwf	(___aodiv@divisor+6)^0,c
  4603   002864  0E00               	movlw	0
  4604   002866  6E14               	movwf	(___aodiv@divisor+7)^0,c
  4605   002868  EC64  F016         	call	___aodiv	;wreg free
  4606   00286C  C005  F038         	movff	?___aodiv,dtoa@n
  4607   002870  C006  F039         	movff	?___aodiv+1,dtoa@n+1
  4608   002874  C007  F03A         	movff	?___aodiv+2,dtoa@n+2
  4609   002878  C008  F03B         	movff	?___aodiv+3,dtoa@n+3
  4610   00287C  C009  F03C         	movff	?___aodiv+4,dtoa@n+4
  4611   002880  C00A  F03D         	movff	?___aodiv+5,dtoa@n+5
  4612   002884  C00B  F03E         	movff	?___aodiv+6,dtoa@n+6
  4613   002888  C00C  F03F         	movff	?___aodiv+7,dtoa@n+7
  4614   00288C                     l4728:
  4615                           
  4616                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  4617   00288C  BE42               	btfsc	(dtoa@i+1)^0,7,c
  4618   00288E  EF51  F014         	goto	u5081
  4619   002892  5042               	movf	(dtoa@i+1)^0,w,c
  4620   002894  E108               	bnz	u5080
  4621   002896  0441               	decf	dtoa@i^0,w,c
  4622   002898  A0D8               	btfss	status,0,c
  4623   00289A  EF51  F014         	goto	u5081
  4624   00289E  EF53  F014         	goto	u5080
  4625   0028A2                     u5081:
  4626   0028A2  EF6F  F014         	goto	l4734
  4627   0028A6                     u5080:
  4628   0028A6  5038               	movf	dtoa@n^0,w,c
  4629   0028A8  1039               	iorwf	(dtoa@n+1)^0,w,c
  4630   0028AA  103A               	iorwf	(dtoa@n+2)^0,w,c
  4631   0028AC  103B               	iorwf	(dtoa@n+3)^0,w,c
  4632   0028AE  103C               	iorwf	(dtoa@n+4)^0,w,c
  4633   0028B0  103D               	iorwf	(dtoa@n+5)^0,w,c
  4634   0028B2  103E               	iorwf	(dtoa@n+6)^0,w,c
  4635   0028B4  103F               	iorwf	(dtoa@n+7)^0,w,c
  4636   0028B6  A4D8               	btfss	status,2,c
  4637   0028B8  EF60  F014         	goto	u5091
  4638   0028BC  EF62  F014         	goto	u5090
  4639   0028C0                     u5091:
  4640   0028C0  EFCA  F013         	goto	l4718
  4641   0028C4                     u5090:
  4642   0028C4  BE35               	btfsc	(dtoa@p+1)^0,7,c
  4643   0028C6  EF6F  F014         	goto	u5100
  4644   0028CA  5035               	movf	(dtoa@p+1)^0,w,c
  4645   0028CC  E106               	bnz	u5101
  4646   0028CE  0434               	decf	dtoa@p^0,w,c
  4647   0028D0  B0D8               	btfsc	status,0,c
  4648   0028D2  EF6D  F014         	goto	u5101
  4649   0028D6  EF6F  F014         	goto	u5100
  4650   0028DA                     u5101:
  4651   0028DA  EFCA  F013         	goto	l4718
  4652   0028DE                     u5100:
  4653   0028DE                     l4734:
  4654                           
  4655                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 495:     if (s !=
      +                           0) {
  4656   0028DE  5040               	movf	dtoa@s^0,w,c
  4657   0028E0  B4D8               	btfsc	status,2,c
  4658   0028E2  EF75  F014         	goto	u5111
  4659   0028E6  EF77  F014         	goto	u5110
  4660   0028EA                     u5111:
  4661   0028EA  EF82  F014         	goto	l4740
  4662   0028EE                     u5110:
  4663   0028EE                     
  4664                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 496:         --i;
  4665   0028EE  0641               	decf	dtoa@i^0,f,c
  4666   0028F0  A0D8               	btfss	status,0,c
  4667   0028F2  0642               	decf	(dtoa@i+1)^0,f,c
  4668   0028F4                     
  4669                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 497:         dbuf
      +                          [i] = s;
  4670   0028F4  0E54               	movlw	low _dbuf
  4671   0028F6  2441               	addwf	dtoa@i^0,w,c
  4672   0028F8  6ED9               	movwf	fsr2l,c
  4673   0028FA  0E01               	movlw	high _dbuf
  4674   0028FC  2042               	addwfc	(dtoa@i+1)^0,w,c
  4675   0028FE  6EDA               	movwf	fsr2h,c
  4676   002900  C040  FFDF         	movff	dtoa@s,indf2
  4677   002904                     l4740:
  4678                           
  4679                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 501:     return (
      +                          void) pad(fp, &dbuf[i], w);
  4680   002904  C020  F015         	movff	dtoa@fp,pad@fp
  4681   002908  C021  F016         	movff	dtoa@fp+1,pad@fp+1
  4682   00290C  0E54               	movlw	low _dbuf
  4683   00290E  2441               	addwf	dtoa@i^0,w,c
  4684   002910  6E17               	movwf	pad@buf^0,c
  4685   002912  0E01               	movlw	high _dbuf
  4686   002914  2042               	addwfc	(dtoa@i+1)^0,w,c
  4687   002916  6E18               	movwf	(pad@buf+1)^0,c
  4688   002918  C036  F019         	movff	dtoa@w,pad@p
  4689   00291C  C037  F01A         	movff	dtoa@w+1,pad@p+1
  4690   002920  EC11  F020         	call	_pad	;wreg free
  4691   002924  0012               	return		;funcret
  4692   002926                     __end_of_dtoa:
  4693                           	callstack 0
  4694                           
  4695 ;; *************** function _pad *****************
  4696 ;; Defined at:
  4697 ;;		line 133 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  4698 ;; Parameters:    Size  Location     Type
  4699 ;;  fp              2   20[COMRAM] PTR struct _IO_FILE
  4700 ;;		 -> sprintf@f(11), 
  4701 ;;  buf             2   22[COMRAM] PTR unsigned char 
  4702 ;;		 -> dbuf(32), 
  4703 ;;  p               2   24[COMRAM] int 
  4704 ;; Auto vars:     Size  Location     Type
  4705 ;;  w               2   29[COMRAM] int 
  4706 ;;  i               2   27[COMRAM] int 
  4707 ;; Return value:  Size  Location     Type
  4708 ;;                  1    wreg      void 
  4709 ;; Registers used:
  4710 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4711 ;; Tracked objects:
  4712 ;;		On entry : 0/0
  4713 ;;		On exit  : 0/0
  4714 ;;		Unchanged: 0/0
  4715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4716 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4717 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4718 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4719 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4720 ;;Total ram usage:       11 bytes
  4721 ;; Hardware stack levels used: 1
  4722 ;; Hardware stack levels required when called: 5
  4723 ;; This function calls:
  4724 ;;		_fputc
  4725 ;;		_fputs
  4726 ;; This function is called by:
  4727 ;;		_dtoa
  4728 ;; This function uses a non-reentrant model
  4729 ;;
  4730                           
  4731                           	psect	text15
  4732   004022                     __ptext15:
  4733                           	callstack 0
  4734   004022                     _pad:
  4735                           	callstack 20
  4736   004022                     
  4737                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 133: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\com
      +                          mon\doprnt.c: 134: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 135:     int i, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt
      +                          .c: 145:     w = (p < 0) ? 0 : p;
  4738   004022  BE1A               	btfsc	(pad@p+1)^0,7,c
  4739   004024  EF16  F020         	goto	u4951
  4740   004028  EF18  F020         	goto	u4950
  4741   00402C                     u4951:
  4742   00402C  EF1E  F020         	goto	l4658
  4743   004030                     u4950:
  4744   004030  C019  F01E         	movff	pad@p,pad@w
  4745   004034  C01A  F01F         	movff	pad@p+1,pad@w+1
  4746   004038  EF22  F020         	goto	l1212
  4747   00403C                     l4658:
  4748   00403C  0E00               	movlw	0
  4749   00403E  6E1F               	movwf	(pad@w+1)^0,c
  4750   004040  0E00               	movlw	0
  4751   004042  6E1E               	movwf	pad@w^0,c
  4752   004044                     l1212:
  4753                           
  4754                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 146:     i = 0;
  4755   004044  0E00               	movlw	0
  4756   004046  6E1D               	movwf	(pad@i+1)^0,c
  4757   004048  0E00               	movlw	0
  4758   00404A  6E1C               	movwf	pad@i^0,c
  4759                           
  4760                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  4761   00404C  EF34  F020         	goto	l4664
  4762   004050                     l4660:
  4763                           
  4764                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 148:         fput
      +                          c(' ', fp);
  4765   004050  0E00               	movlw	0
  4766   004052  6E06               	movwf	(fputc@c+1)^0,c
  4767   004054  0E20               	movlw	32
  4768   004056  6E05               	movwf	fputc@c^0,c
  4769   004058  C015  F007         	movff	pad@fp,fputc@fp
  4770   00405C  C016  F008         	movff	pad@fp+1,fputc@fp+1
  4771   004060  EC8B  F01E         	call	_fputc	;wreg free
  4772   004064                     
  4773                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 149:         ++i;
  4774   004064  4A1C               	infsnz	pad@i^0,f,c
  4775   004066  2A1D               	incf	(pad@i+1)^0,f,c
  4776   004068                     l4664:
  4777                           
  4778                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  4779   004068  501E               	movf	pad@w^0,w,c
  4780   00406A  5C1C               	subwf	pad@i^0,w,c
  4781   00406C  501D               	movf	(pad@i+1)^0,w,c
  4782   00406E  0A80               	xorlw	128
  4783   004070  6E1B               	movwf	??_pad^0,c
  4784   004072  501F               	movf	(pad@w+1)^0,w,c
  4785   004074  0A80               	xorlw	128
  4786   004076  581B               	subwfb	??_pad^0,w,c
  4787   004078  A0D8               	btfss	status,0,c
  4788   00407A  EF41  F020         	goto	u4961
  4789   00407E  EF43  F020         	goto	u4960
  4790   004082                     u4961:
  4791   004082  EF28  F020         	goto	l4660
  4792   004086                     u4960:
  4793   004086                     
  4794                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 156:         fput
      +                          s((const char *)buf, fp);
  4795   004086  C017  F00E         	movff	pad@buf,fputs@s
  4796   00408A  C018  F00F         	movff	pad@buf+1,fputs@s+1
  4797   00408E  C015  F010         	movff	pad@fp,fputs@fp
  4798   004092  C016  F011         	movff	pad@fp+1,fputs@fp+1
  4799   004096  ECF4  F021         	call	_fputs	;wreg free
  4800   00409A  0012               	return		;funcret
  4801   00409C                     __end_of_pad:
  4802                           	callstack 0
  4803                           
  4804 ;; *************** function _fputs *****************
  4805 ;; Defined at:
  4806 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputs.c"
  4807 ;; Parameters:    Size  Location     Type
  4808 ;;  s               2   13[COMRAM] PTR const unsigned char 
  4809 ;;		 -> dbuf(32), 
  4810 ;;  fp              2   15[COMRAM] PTR struct _IO_FILE
  4811 ;;		 -> sprintf@f(11), 
  4812 ;; Auto vars:     Size  Location     Type
  4813 ;;  i               2   18[COMRAM] int 
  4814 ;;  c               1   17[COMRAM] unsigned char 
  4815 ;; Return value:  Size  Location     Type
  4816 ;;                  2   13[COMRAM] int 
  4817 ;; Registers used:
  4818 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4819 ;; Tracked objects:
  4820 ;;		On entry : 0/0
  4821 ;;		On exit  : 0/0
  4822 ;;		Unchanged: 0/0
  4823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4824 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4825 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4827 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4828 ;;Total ram usage:        7 bytes
  4829 ;; Hardware stack levels used: 1
  4830 ;; Hardware stack levels required when called: 4
  4831 ;; This function calls:
  4832 ;;		_fputc
  4833 ;; This function is called by:
  4834 ;;		_pad
  4835 ;; This function uses a non-reentrant model
  4836 ;;
  4837                           
  4838                           	psect	text16
  4839   0043E8                     __ptext16:
  4840                           	callstack 0
  4841   0043E8                     _fputs:
  4842                           	callstack 20
  4843   0043E8  0E00               	movlw	0
  4844   0043EA  6E14               	movwf	(fputs@i+1)^0,c
  4845   0043EC  0E00               	movlw	0
  4846   0043EE  6E13               	movwf	fputs@i^0,c
  4847   0043F0  EF05  F022         	goto	l4544
  4848   0043F4                     l4540:
  4849   0043F4  C012  F005         	movff	fputs@c,fputc@c
  4850   0043F8  6A06               	clrf	(fputc@c+1)^0,c
  4851   0043FA  C010  F007         	movff	fputs@fp,fputc@fp
  4852   0043FE  C011  F008         	movff	fputs@fp+1,fputc@fp+1
  4853   004402  EC8B  F01E         	call	_fputc	;wreg free
  4854   004406  4A13               	infsnz	fputs@i^0,f,c
  4855   004408  2A14               	incf	(fputs@i+1)^0,f,c
  4856   00440A                     l4544:
  4857   00440A  5013               	movf	fputs@i^0,w,c
  4858   00440C  240E               	addwf	fputs@s^0,w,c
  4859   00440E  6ED9               	movwf	fsr2l,c
  4860   004410  5014               	movf	(fputs@i+1)^0,w,c
  4861   004412  200F               	addwfc	(fputs@s+1)^0,w,c
  4862   004414  6EDA               	movwf	fsr2h,c
  4863   004416  50DF               	movf	indf2,w,c
  4864   004418  6E12               	movwf	fputs@c^0,c
  4865   00441A  5012               	movf	fputs@c^0,w,c
  4866   00441C  A4D8               	btfss	status,2,c
  4867   00441E  EF13  F022         	goto	u4781
  4868   004422  EF15  F022         	goto	u4780
  4869   004426                     u4781:
  4870   004426  EFFA  F021         	goto	l4540
  4871   00442A                     u4780:
  4872   00442A  0012               	return		;funcret
  4873   00442C                     __end_of_fputs:
  4874                           	callstack 0
  4875                           
  4876 ;; *************** function _fputc *****************
  4877 ;; Defined at:
  4878 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputc.c"
  4879 ;; Parameters:    Size  Location     Type
  4880 ;;  c               2    4[COMRAM] int 
  4881 ;;  fp              2    6[COMRAM] PTR struct _IO_FILE
  4882 ;;		 -> sprintf@f(11), 
  4883 ;; Auto vars:     Size  Location     Type
  4884 ;;		None
  4885 ;; Return value:  Size  Location     Type
  4886 ;;                  2    4[COMRAM] int 
  4887 ;; Registers used:
  4888 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4889 ;; Tracked objects:
  4890 ;;		On entry : 0/0
  4891 ;;		On exit  : 0/0
  4892 ;;		Unchanged: 0/0
  4893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4894 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4896 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4897 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4898 ;;Total ram usage:        9 bytes
  4899 ;; Hardware stack levels used: 1
  4900 ;; Hardware stack levels required when called: 3
  4901 ;; This function calls:
  4902 ;;		_putch
  4903 ;; This function is called by:
  4904 ;;		_pad
  4905 ;;		_vfpfcnvrt
  4906 ;;		_fputs
  4907 ;; This function uses a non-reentrant model
  4908 ;;
  4909                           
  4910                           	psect	text17
  4911   003D16                     __ptext17:
  4912                           	callstack 0
  4913   003D16                     _fputc:
  4914                           	callstack 23
  4915   003D16  5007               	movf	fputc@fp^0,w,c
  4916   003D18  1008               	iorwf	(fputc@fp+1)^0,w,c
  4917   003D1A  B4D8               	btfsc	status,2,c
  4918   003D1C  EF92  F01E         	goto	u4741
  4919   003D20  EF94  F01E         	goto	u4740
  4920   003D24                     u4741:
  4921   003D24  EF9D  F01E         	goto	l4528
  4922   003D28                     u4740:
  4923   003D28  5007               	movf	fputc@fp^0,w,c
  4924   003D2A  1008               	iorwf	(fputc@fp+1)^0,w,c
  4925   003D2C  A4D8               	btfss	status,2,c
  4926   003D2E  EF9B  F01E         	goto	u4751
  4927   003D32  EF9D  F01E         	goto	u4750
  4928   003D36                     u4751:
  4929   003D36  EFA2  F01E         	goto	l4530
  4930   003D3A                     u4750:
  4931   003D3A                     l4528:
  4932   003D3A  5005               	movf	fputc@c^0,w,c
  4933   003D3C  EC68  F023         	call	_putch
  4934   003D40  EFEF  F01E         	goto	l1267
  4935   003D44                     l4530:
  4936   003D44  EE20 F009          	lfsr	2,9
  4937   003D48  5007               	movf	fputc@fp^0,w,c
  4938   003D4A  26D9               	addwf	fsr2l,f,c
  4939   003D4C  5008               	movf	(fputc@fp+1)^0,w,c
  4940   003D4E  22DA               	addwfc	fsr2h,f,c
  4941   003D50  50DE               	movf	postinc2,w,c
  4942   003D52  10DE               	iorwf	postinc2,w,c
  4943   003D54  B4D8               	btfsc	status,2,c
  4944   003D56  EFAF  F01E         	goto	u4761
  4945   003D5A  EFB1  F01E         	goto	u4760
  4946   003D5E                     u4761:
  4947   003D5E  EFCC  F01E         	goto	l4534
  4948   003D62                     u4760:
  4949   003D62  EE20 F009          	lfsr	2,9
  4950   003D66  5007               	movf	fputc@fp^0,w,c
  4951   003D68  26D9               	addwf	fsr2l,f,c
  4952   003D6A  5008               	movf	(fputc@fp+1)^0,w,c
  4953   003D6C  22DA               	addwfc	fsr2h,f,c
  4954   003D6E  EE10 F003          	lfsr	1,3
  4955   003D72  5007               	movf	fputc@fp^0,w,c
  4956   003D74  26E1               	addwf	fsr1l,f,c
  4957   003D76  5008               	movf	(fputc@fp+1)^0,w,c
  4958   003D78  22E2               	addwfc	fsr1h,f,c
  4959   003D7A  50DE               	movf	postinc2,w,c
  4960   003D7C  5CE6               	subwf	postinc1,w,c
  4961   003D7E  50E6               	movf	postinc1,w,c
  4962   003D80  0A80               	xorlw	128
  4963   003D82  6E0D               	movwf	(??_fputc+4)^0,c
  4964   003D84  50DE               	movf	postinc2,w,c
  4965   003D86  0A80               	xorlw	128
  4966   003D88  580D               	subwfb	(??_fputc+4)^0,w,c
  4967   003D8A  B0D8               	btfsc	status,0,c
  4968   003D8C  EFCA  F01E         	goto	u4771
  4969   003D90  EFCC  F01E         	goto	u4770
  4970   003D94                     u4771:
  4971   003D94  EFEF  F01E         	goto	l1267
  4972   003D98                     u4770:
  4973   003D98                     l4534:
  4974   003D98  EE20 F003          	lfsr	2,3
  4975   003D9C  5007               	movf	fputc@fp^0,w,c
  4976   003D9E  26D9               	addwf	fsr2l,f,c
  4977   003DA0  5008               	movf	(fputc@fp+1)^0,w,c
  4978   003DA2  22DA               	addwfc	fsr2h,f,c
  4979   003DA4  CFDE F009          	movff	postinc2,??_fputc
  4980   003DA8  CFDD F00A          	movff	postdec2,??_fputc+1
  4981   003DAC  C007  FFD9         	movff	fputc@fp,fsr2l
  4982   003DB0  C008  FFDA         	movff	fputc@fp+1,fsr2h
  4983   003DB4  CFDE F00B          	movff	postinc2,??_fputc+2
  4984   003DB8  CFDD F00C          	movff	postdec2,??_fputc+3
  4985   003DBC  5009               	movf	??_fputc^0,w,c
  4986   003DBE  240B               	addwf	(??_fputc+2)^0,w,c
  4987   003DC0  6ED9               	movwf	fsr2l,c
  4988   003DC2  500A               	movf	(??_fputc+1)^0,w,c
  4989   003DC4  200C               	addwfc	(??_fputc+3)^0,w,c
  4990   003DC6  6EDA               	movwf	fsr2h,c
  4991   003DC8  C005  FFDF         	movff	fputc@c,indf2
  4992   003DCC  EE20 F003          	lfsr	2,3
  4993   003DD0  5007               	movf	fputc@fp^0,w,c
  4994   003DD2  26D9               	addwf	fsr2l,f,c
  4995   003DD4  5008               	movf	(fputc@fp+1)^0,w,c
  4996   003DD6  22DA               	addwfc	fsr2h,f,c
  4997   003DD8  2ADE               	incf	postinc2,f,c
  4998   003DDA  0E00               	movlw	0
  4999   003DDC  22DD               	addwfc	postdec2,f,c
  5000   003DDE                     l1267:
  5001   003DDE  0012               	return		;funcret
  5002   003DE0                     __end_of_fputc:
  5003                           	callstack 0
  5004                           
  5005 ;; *************** function _putch *****************
  5006 ;; Defined at:
  5007 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\putch.c"
  5008 ;; Parameters:    Size  Location     Type
  5009 ;;  c               1    wreg     unsigned char 
  5010 ;; Auto vars:     Size  Location     Type
  5011 ;;  c               1    0[COMRAM] unsigned char 
  5012 ;; Return value:  Size  Location     Type
  5013 ;;                  1    wreg      void 
  5014 ;; Registers used:
  5015 ;;		wreg
  5016 ;; Tracked objects:
  5017 ;;		On entry : 0/0
  5018 ;;		On exit  : 0/0
  5019 ;;		Unchanged: 0/0
  5020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5022 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5024 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5025 ;;Total ram usage:        0 bytes
  5026 ;; Hardware stack levels used: 1
  5027 ;; Hardware stack levels required when called: 2
  5028 ;; This function calls:
  5029 ;;		Nothing
  5030 ;; This function is called by:
  5031 ;;		_fputc
  5032 ;; This function uses a non-reentrant model
  5033 ;;
  5034                           
  5035                           	psect	text18
  5036   0046D0                     __ptext18:
  5037                           	callstack 0
  5038   0046D0                     _putch:
  5039                           	callstack 23
  5040   0046D0  0012               	return		;funcret
  5041   0046D2                     __end_of_putch:
  5042                           	callstack 0
  5043                           
  5044 ;; *************** function _abs *****************
  5045 ;; Defined at:
  5046 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\abs.c"
  5047 ;; Parameters:    Size  Location     Type
  5048 ;;  a               2   22[COMRAM] int 
  5049 ;; Auto vars:     Size  Location     Type
  5050 ;;		None
  5051 ;; Return value:  Size  Location     Type
  5052 ;;                  2   22[COMRAM] int 
  5053 ;; Registers used:
  5054 ;;		wreg, status,2, status,0
  5055 ;; Tracked objects:
  5056 ;;		On entry : 0/0
  5057 ;;		On exit  : 0/0
  5058 ;;		Unchanged: 0/0
  5059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5060 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5062 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5063 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5064 ;;Total ram usage:        4 bytes
  5065 ;; Hardware stack levels used: 1
  5066 ;; Hardware stack levels required when called: 2
  5067 ;; This function calls:
  5068 ;;		Nothing
  5069 ;; This function is called by:
  5070 ;;		_dtoa
  5071 ;; This function uses a non-reentrant model
  5072 ;;
  5073                           
  5074                           	psect	text19
  5075   00446E                     __ptext19:
  5076                           	callstack 0
  5077   00446E                     _abs:
  5078                           	callstack 23
  5079   00446E  BE18               	btfsc	(abs@a+1)^0,7,c
  5080   004470  EF44  F022         	goto	u4970
  5081   004474  5018               	movf	(abs@a+1)^0,w,c
  5082   004476  E106               	bnz	u4971
  5083   004478  0417               	decf	abs@a^0,w,c
  5084   00447A  B0D8               	btfsc	status,0,c
  5085   00447C  EF42  F022         	goto	u4971
  5086   004480  EF44  F022         	goto	u4970
  5087   004484                     u4971:
  5088   004484  EF52  F022         	goto	l1252
  5089   004488                     u4970:
  5090   004488  C017  F019         	movff	abs@a,??_abs
  5091   00448C  C018  F01A         	movff	abs@a+1,??_abs+1
  5092   004490  1E19               	comf	??_abs^0,f,c
  5093   004492  1E1A               	comf	(??_abs+1)^0,f,c
  5094   004494  4A19               	infsnz	??_abs^0,f,c
  5095   004496  2A1A               	incf	(??_abs+1)^0,f,c
  5096   004498  C019  F017         	movff	??_abs,?_abs
  5097   00449C  C01A  F018         	movff	??_abs+1,?_abs+1
  5098   0044A0  EF56  F022         	goto	l1255
  5099   0044A4                     l1252:
  5100   0044A4  C017  F017         	movff	abs@a,?_abs
  5101   0044A8  C018  F018         	movff	abs@a+1,?_abs+1
  5102   0044AC                     l1255:
  5103   0044AC  0012               	return		;funcret
  5104   0044AE                     __end_of_abs:
  5105                           	callstack 0
  5106                           
  5107 ;; *************** function ___aomod *****************
  5108 ;; Defined at:
  5109 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aomod.c"
  5110 ;; Parameters:    Size  Location     Type
  5111 ;;  dividend        8    4[COMRAM] long long 
  5112 ;;  divisor         8   12[COMRAM] long long 
  5113 ;; Auto vars:     Size  Location     Type
  5114 ;;  sign            1   21[COMRAM] unsigned char 
  5115 ;;  counter         1   20[COMRAM] unsigned char 
  5116 ;; Return value:  Size  Location     Type
  5117 ;;                  8    4[COMRAM] long long 
  5118 ;; Registers used:
  5119 ;;		wreg, status,2, status,0
  5120 ;; Tracked objects:
  5121 ;;		On entry : 0/0
  5122 ;;		On exit  : 0/0
  5123 ;;		Unchanged: 0/0
  5124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5125 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5126 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5128 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5129 ;;Total ram usage:       18 bytes
  5130 ;; Hardware stack levels used: 1
  5131 ;; Hardware stack levels required when called: 2
  5132 ;; This function calls:
  5133 ;;		Nothing
  5134 ;; This function is called by:
  5135 ;;		_dtoa
  5136 ;; This function uses a non-reentrant model
  5137 ;;
  5138                           
  5139                           	psect	text20
  5140   002FBC                     __ptext20:
  5141                           	callstack 0
  5142   002FBC                     ___aomod:
  5143                           	callstack 23
  5144   002FBC  0E00               	movlw	0
  5145   002FBE  6E16               	movwf	___aomod@sign^0,c
  5146   002FC0  BE0C               	btfsc	(___aomod@dividend+7)^0,7,c
  5147   002FC2  EFE7  F017         	goto	u4860
  5148   002FC6  EFE5  F017         	goto	u4861
  5149   002FCA                     u4861:
  5150   002FCA  EFF9  F017         	goto	l4604
  5151   002FCE                     u4860:
  5152   002FCE  1E0C               	comf	(___aomod@dividend+7)^0,f,c
  5153   002FD0  1E0B               	comf	(___aomod@dividend+6)^0,f,c
  5154   002FD2  1E0A               	comf	(___aomod@dividend+5)^0,f,c
  5155   002FD4  1E09               	comf	(___aomod@dividend+4)^0,f,c
  5156   002FD6  1E08               	comf	(___aomod@dividend+3)^0,f,c
  5157   002FD8  1E07               	comf	(___aomod@dividend+2)^0,f,c
  5158   002FDA  1E06               	comf	(___aomod@dividend+1)^0,f,c
  5159   002FDC  6C05               	negf	___aomod@dividend^0,c
  5160   002FDE  0E00               	movlw	0
  5161   002FE0  2206               	addwfc	(___aomod@dividend+1)^0,f,c
  5162   002FE2  2207               	addwfc	(___aomod@dividend+2)^0,f,c
  5163   002FE4  2208               	addwfc	(___aomod@dividend+3)^0,f,c
  5164   002FE6  2209               	addwfc	(___aomod@dividend+4)^0,f,c
  5165   002FE8  220A               	addwfc	(___aomod@dividend+5)^0,f,c
  5166   002FEA  220B               	addwfc	(___aomod@dividend+6)^0,f,c
  5167   002FEC  220C               	addwfc	(___aomod@dividend+7)^0,f,c
  5168   002FEE  0E01               	movlw	1
  5169   002FF0  6E16               	movwf	___aomod@sign^0,c
  5170   002FF2                     l4604:
  5171   002FF2  BE14               	btfsc	(___aomod@divisor+7)^0,7,c
  5172   002FF4  EF00  F018         	goto	u4870
  5173   002FF8  EFFE  F017         	goto	u4871
  5174   002FFC                     u4871:
  5175   002FFC  EF10  F018         	goto	l4608
  5176   003000                     u4870:
  5177   003000  1E14               	comf	(___aomod@divisor+7)^0,f,c
  5178   003002  1E13               	comf	(___aomod@divisor+6)^0,f,c
  5179   003004  1E12               	comf	(___aomod@divisor+5)^0,f,c
  5180   003006  1E11               	comf	(___aomod@divisor+4)^0,f,c
  5181   003008  1E10               	comf	(___aomod@divisor+3)^0,f,c
  5182   00300A  1E0F               	comf	(___aomod@divisor+2)^0,f,c
  5183   00300C  1E0E               	comf	(___aomod@divisor+1)^0,f,c
  5184   00300E  6C0D               	negf	___aomod@divisor^0,c
  5185   003010  0E00               	movlw	0
  5186   003012  220E               	addwfc	(___aomod@divisor+1)^0,f,c
  5187   003014  220F               	addwfc	(___aomod@divisor+2)^0,f,c
  5188   003016  2210               	addwfc	(___aomod@divisor+3)^0,f,c
  5189   003018  2211               	addwfc	(___aomod@divisor+4)^0,f,c
  5190   00301A  2212               	addwfc	(___aomod@divisor+5)^0,f,c
  5191   00301C  2213               	addwfc	(___aomod@divisor+6)^0,f,c
  5192   00301E  2214               	addwfc	(___aomod@divisor+7)^0,f,c
  5193   003020                     l4608:
  5194   003020  500D               	movf	___aomod@divisor^0,w,c
  5195   003022  100E               	iorwf	(___aomod@divisor+1)^0,w,c
  5196   003024  100F               	iorwf	(___aomod@divisor+2)^0,w,c
  5197   003026  1010               	iorwf	(___aomod@divisor+3)^0,w,c
  5198   003028  1011               	iorwf	(___aomod@divisor+4)^0,w,c
  5199   00302A  1012               	iorwf	(___aomod@divisor+5)^0,w,c
  5200   00302C  1013               	iorwf	(___aomod@divisor+6)^0,w,c
  5201   00302E  1014               	iorwf	(___aomod@divisor+7)^0,w,c
  5202   003030  B4D8               	btfsc	status,2,c
  5203   003032  EF1D  F018         	goto	u4881
  5204   003036  EF1F  F018         	goto	u4880
  5205   00303A                     u4881:
  5206   00303A  EF67  F018         	goto	l4624
  5207   00303E                     u4880:
  5208   00303E  0E01               	movlw	1
  5209   003040  6E15               	movwf	___aomod@counter^0,c
  5210   003042  EF2D  F018         	goto	l4614
  5211   003046                     l4612:
  5212   003046  90D8               	bcf	status,0,c
  5213   003048  360D               	rlcf	___aomod@divisor^0,f,c
  5214   00304A  360E               	rlcf	(___aomod@divisor+1)^0,f,c
  5215   00304C  360F               	rlcf	(___aomod@divisor+2)^0,f,c
  5216   00304E  3610               	rlcf	(___aomod@divisor+3)^0,f,c
  5217   003050  3611               	rlcf	(___aomod@divisor+4)^0,f,c
  5218   003052  3612               	rlcf	(___aomod@divisor+5)^0,f,c
  5219   003054  3613               	rlcf	(___aomod@divisor+6)^0,f,c
  5220   003056  3614               	rlcf	(___aomod@divisor+7)^0,f,c
  5221   003058  2A15               	incf	___aomod@counter^0,f,c
  5222   00305A                     l4614:
  5223   00305A  AE14               	btfss	(___aomod@divisor+7)^0,7,c
  5224   00305C  EF32  F018         	goto	u4891
  5225   003060  EF34  F018         	goto	u4890
  5226   003064                     u4891:
  5227   003064  EF23  F018         	goto	l4612
  5228   003068                     u4890:
  5229   003068                     l4616:
  5230   003068  500D               	movf	___aomod@divisor^0,w,c
  5231   00306A  5C05               	subwf	___aomod@dividend^0,w,c
  5232   00306C  500E               	movf	(___aomod@divisor+1)^0,w,c
  5233   00306E  5806               	subwfb	(___aomod@dividend+1)^0,w,c
  5234   003070  500F               	movf	(___aomod@divisor+2)^0,w,c
  5235   003072  5807               	subwfb	(___aomod@dividend+2)^0,w,c
  5236   003074  5010               	movf	(___aomod@divisor+3)^0,w,c
  5237   003076  5808               	subwfb	(___aomod@dividend+3)^0,w,c
  5238   003078  5011               	movf	(___aomod@divisor+4)^0,w,c
  5239   00307A  5809               	subwfb	(___aomod@dividend+4)^0,w,c
  5240   00307C  5012               	movf	(___aomod@divisor+5)^0,w,c
  5241   00307E  580A               	subwfb	(___aomod@dividend+5)^0,w,c
  5242   003080  5013               	movf	(___aomod@divisor+6)^0,w,c
  5243   003082  580B               	subwfb	(___aomod@dividend+6)^0,w,c
  5244   003084  5014               	movf	(___aomod@divisor+7)^0,w,c
  5245   003086  580C               	subwfb	(___aomod@dividend+7)^0,w,c
  5246   003088  A0D8               	btfss	status,0,c
  5247   00308A  EF49  F018         	goto	u4901
  5248   00308E  EF4B  F018         	goto	u4900
  5249   003092                     u4901:
  5250   003092  EF5B  F018         	goto	l4620
  5251   003096                     u4900:
  5252   003096  500D               	movf	___aomod@divisor^0,w,c
  5253   003098  5E05               	subwf	___aomod@dividend^0,f,c
  5254   00309A  500E               	movf	(___aomod@divisor+1)^0,w,c
  5255   00309C  5A06               	subwfb	(___aomod@dividend+1)^0,f,c
  5256   00309E  500F               	movf	(___aomod@divisor+2)^0,w,c
  5257   0030A0  5A07               	subwfb	(___aomod@dividend+2)^0,f,c
  5258   0030A2  5010               	movf	(___aomod@divisor+3)^0,w,c
  5259   0030A4  5A08               	subwfb	(___aomod@dividend+3)^0,f,c
  5260   0030A6  5011               	movf	(___aomod@divisor+4)^0,w,c
  5261   0030A8  5A09               	subwfb	(___aomod@dividend+4)^0,f,c
  5262   0030AA  5012               	movf	(___aomod@divisor+5)^0,w,c
  5263   0030AC  5A0A               	subwfb	(___aomod@dividend+5)^0,f,c
  5264   0030AE  5013               	movf	(___aomod@divisor+6)^0,w,c
  5265   0030B0  5A0B               	subwfb	(___aomod@dividend+6)^0,f,c
  5266   0030B2  5014               	movf	(___aomod@divisor+7)^0,w,c
  5267   0030B4  5A0C               	subwfb	(___aomod@dividend+7)^0,f,c
  5268   0030B6                     l4620:
  5269   0030B6  90D8               	bcf	status,0,c
  5270   0030B8  3214               	rrcf	(___aomod@divisor+7)^0,f,c
  5271   0030BA  3213               	rrcf	(___aomod@divisor+6)^0,f,c
  5272   0030BC  3212               	rrcf	(___aomod@divisor+5)^0,f,c
  5273   0030BE  3211               	rrcf	(___aomod@divisor+4)^0,f,c
  5274   0030C0  3210               	rrcf	(___aomod@divisor+3)^0,f,c
  5275   0030C2  320F               	rrcf	(___aomod@divisor+2)^0,f,c
  5276   0030C4  320E               	rrcf	(___aomod@divisor+1)^0,f,c
  5277   0030C6  320D               	rrcf	___aomod@divisor^0,f,c
  5278   0030C8  2E15               	decfsz	___aomod@counter^0,f,c
  5279   0030CA  EF34  F018         	goto	l4616
  5280   0030CE                     l4624:
  5281   0030CE  5016               	movf	___aomod@sign^0,w,c
  5282   0030D0  B4D8               	btfsc	status,2,c
  5283   0030D2  EF6D  F018         	goto	u4911
  5284   0030D6  EF6F  F018         	goto	u4910
  5285   0030DA                     u4911:
  5286   0030DA  EF7F  F018         	goto	l4628
  5287   0030DE                     u4910:
  5288   0030DE  1E0C               	comf	(___aomod@dividend+7)^0,f,c
  5289   0030E0  1E0B               	comf	(___aomod@dividend+6)^0,f,c
  5290   0030E2  1E0A               	comf	(___aomod@dividend+5)^0,f,c
  5291   0030E4  1E09               	comf	(___aomod@dividend+4)^0,f,c
  5292   0030E6  1E08               	comf	(___aomod@dividend+3)^0,f,c
  5293   0030E8  1E07               	comf	(___aomod@dividend+2)^0,f,c
  5294   0030EA  1E06               	comf	(___aomod@dividend+1)^0,f,c
  5295   0030EC  6C05               	negf	___aomod@dividend^0,c
  5296   0030EE  0E00               	movlw	0
  5297   0030F0  2206               	addwfc	(___aomod@dividend+1)^0,f,c
  5298   0030F2  2207               	addwfc	(___aomod@dividend+2)^0,f,c
  5299   0030F4  2208               	addwfc	(___aomod@dividend+3)^0,f,c
  5300   0030F6  2209               	addwfc	(___aomod@dividend+4)^0,f,c
  5301   0030F8  220A               	addwfc	(___aomod@dividend+5)^0,f,c
  5302   0030FA  220B               	addwfc	(___aomod@dividend+6)^0,f,c
  5303   0030FC  220C               	addwfc	(___aomod@dividend+7)^0,f,c
  5304   0030FE                     l4628:
  5305   0030FE  C005  F005         	movff	___aomod@dividend,?___aomod
  5306   003102  C006  F006         	movff	___aomod@dividend+1,?___aomod+1
  5307   003106  C007  F007         	movff	___aomod@dividend+2,?___aomod+2
  5308   00310A  C008  F008         	movff	___aomod@dividend+3,?___aomod+3
  5309   00310E  C009  F009         	movff	___aomod@dividend+4,?___aomod+4
  5310   003112  C00A  F00A         	movff	___aomod@dividend+5,?___aomod+5
  5311   003116  C00B  F00B         	movff	___aomod@dividend+6,?___aomod+6
  5312   00311A  C00C  F00C         	movff	___aomod@dividend+7,?___aomod+7
  5313   00311E  0012               	return		;funcret
  5314   003120                     __end_of___aomod:
  5315                           	callstack 0
  5316                           
  5317 ;; *************** function ___aodiv *****************
  5318 ;; Defined at:
  5319 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aodiv.c"
  5320 ;; Parameters:    Size  Location     Type
  5321 ;;  dividend        8    4[COMRAM] long long 
  5322 ;;  divisor         8   12[COMRAM] long long 
  5323 ;; Auto vars:     Size  Location     Type
  5324 ;;  quotient        8   22[COMRAM] long long 
  5325 ;;  sign            1   21[COMRAM] unsigned char 
  5326 ;;  counter         1   20[COMRAM] unsigned char 
  5327 ;; Return value:  Size  Location     Type
  5328 ;;                  8    4[COMRAM] long long 
  5329 ;; Registers used:
  5330 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5331 ;; Tracked objects:
  5332 ;;		On entry : 0/0
  5333 ;;		On exit  : 0/0
  5334 ;;		Unchanged: 0/0
  5335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5336 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5337 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5339 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5340 ;;Total ram usage:       26 bytes
  5341 ;; Hardware stack levels used: 1
  5342 ;; Hardware stack levels required when called: 2
  5343 ;; This function calls:
  5344 ;;		Nothing
  5345 ;; This function is called by:
  5346 ;;		_dtoa
  5347 ;; This function uses a non-reentrant model
  5348 ;;
  5349                           
  5350                           	psect	text21
  5351   002CC8                     __ptext21:
  5352                           	callstack 0
  5353   002CC8                     ___aodiv:
  5354                           	callstack 23
  5355   002CC8  0E00               	movlw	0
  5356   002CCA  6E16               	movwf	___aodiv@sign^0,c
  5357   002CCC  BE14               	btfsc	(___aodiv@divisor+7)^0,7,c
  5358   002CCE  EF6D  F016         	goto	u4790
  5359   002CD2  EF6B  F016         	goto	u4791
  5360   002CD6                     u4791:
  5361   002CD6  EF7F  F016         	goto	l4560
  5362   002CDA                     u4790:
  5363   002CDA  1E14               	comf	(___aodiv@divisor+7)^0,f,c
  5364   002CDC  1E13               	comf	(___aodiv@divisor+6)^0,f,c
  5365   002CDE  1E12               	comf	(___aodiv@divisor+5)^0,f,c
  5366   002CE0  1E11               	comf	(___aodiv@divisor+4)^0,f,c
  5367   002CE2  1E10               	comf	(___aodiv@divisor+3)^0,f,c
  5368   002CE4  1E0F               	comf	(___aodiv@divisor+2)^0,f,c
  5369   002CE6  1E0E               	comf	(___aodiv@divisor+1)^0,f,c
  5370   002CE8  6C0D               	negf	___aodiv@divisor^0,c
  5371   002CEA  0E00               	movlw	0
  5372   002CEC  220E               	addwfc	(___aodiv@divisor+1)^0,f,c
  5373   002CEE  220F               	addwfc	(___aodiv@divisor+2)^0,f,c
  5374   002CF0  2210               	addwfc	(___aodiv@divisor+3)^0,f,c
  5375   002CF2  2211               	addwfc	(___aodiv@divisor+4)^0,f,c
  5376   002CF4  2212               	addwfc	(___aodiv@divisor+5)^0,f,c
  5377   002CF6  2213               	addwfc	(___aodiv@divisor+6)^0,f,c
  5378   002CF8  2214               	addwfc	(___aodiv@divisor+7)^0,f,c
  5379   002CFA  0E01               	movlw	1
  5380   002CFC  6E16               	movwf	___aodiv@sign^0,c
  5381   002CFE                     l4560:
  5382   002CFE  BE0C               	btfsc	(___aodiv@dividend+7)^0,7,c
  5383   002D00  EF86  F016         	goto	u4800
  5384   002D04  EF84  F016         	goto	u4801
  5385   002D08                     u4801:
  5386   002D08  EF98  F016         	goto	l4566
  5387   002D0C                     u4800:
  5388   002D0C  1E0C               	comf	(___aodiv@dividend+7)^0,f,c
  5389   002D0E  1E0B               	comf	(___aodiv@dividend+6)^0,f,c
  5390   002D10  1E0A               	comf	(___aodiv@dividend+5)^0,f,c
  5391   002D12  1E09               	comf	(___aodiv@dividend+4)^0,f,c
  5392   002D14  1E08               	comf	(___aodiv@dividend+3)^0,f,c
  5393   002D16  1E07               	comf	(___aodiv@dividend+2)^0,f,c
  5394   002D18  1E06               	comf	(___aodiv@dividend+1)^0,f,c
  5395   002D1A  6C05               	negf	___aodiv@dividend^0,c
  5396   002D1C  0E00               	movlw	0
  5397   002D1E  2206               	addwfc	(___aodiv@dividend+1)^0,f,c
  5398   002D20  2207               	addwfc	(___aodiv@dividend+2)^0,f,c
  5399   002D22  2208               	addwfc	(___aodiv@dividend+3)^0,f,c
  5400   002D24  2209               	addwfc	(___aodiv@dividend+4)^0,f,c
  5401   002D26  220A               	addwfc	(___aodiv@dividend+5)^0,f,c
  5402   002D28  220B               	addwfc	(___aodiv@dividend+6)^0,f,c
  5403   002D2A  220C               	addwfc	(___aodiv@dividend+7)^0,f,c
  5404   002D2C  0E01               	movlw	1
  5405   002D2E  1A16               	xorwf	___aodiv@sign^0,f,c
  5406   002D30                     l4566:
  5407   002D30  EE20  F017         	lfsr	2,___aodiv@quotient
  5408   002D34  0E07               	movlw	7
  5409   002D36                     u4811:
  5410   002D36  6ADE               	clrf	postinc2,c
  5411   002D38  06E8               	decf	wreg,f,c
  5412   002D3A  E2FD               	bc	u4811
  5413   002D3C  500D               	movf	___aodiv@divisor^0,w,c
  5414   002D3E  100E               	iorwf	(___aodiv@divisor+1)^0,w,c
  5415   002D40  100F               	iorwf	(___aodiv@divisor+2)^0,w,c
  5416   002D42  1010               	iorwf	(___aodiv@divisor+3)^0,w,c
  5417   002D44  1011               	iorwf	(___aodiv@divisor+4)^0,w,c
  5418   002D46  1012               	iorwf	(___aodiv@divisor+5)^0,w,c
  5419   002D48  1013               	iorwf	(___aodiv@divisor+6)^0,w,c
  5420   002D4A  1014               	iorwf	(___aodiv@divisor+7)^0,w,c
  5421   002D4C  B4D8               	btfsc	status,2,c
  5422   002D4E  EFAB  F016         	goto	u4821
  5423   002D52  EFAD  F016         	goto	u4820
  5424   002D56                     u4821:
  5425   002D56  EFFF  F016         	goto	l4588
  5426   002D5A                     u4820:
  5427   002D5A  0E01               	movlw	1
  5428   002D5C  6E15               	movwf	___aodiv@counter^0,c
  5429   002D5E  EFBB  F016         	goto	l4574
  5430   002D62                     l4572:
  5431   002D62  90D8               	bcf	status,0,c
  5432   002D64  360D               	rlcf	___aodiv@divisor^0,f,c
  5433   002D66  360E               	rlcf	(___aodiv@divisor+1)^0,f,c
  5434   002D68  360F               	rlcf	(___aodiv@divisor+2)^0,f,c
  5435   002D6A  3610               	rlcf	(___aodiv@divisor+3)^0,f,c
  5436   002D6C  3611               	rlcf	(___aodiv@divisor+4)^0,f,c
  5437   002D6E  3612               	rlcf	(___aodiv@divisor+5)^0,f,c
  5438   002D70  3613               	rlcf	(___aodiv@divisor+6)^0,f,c
  5439   002D72  3614               	rlcf	(___aodiv@divisor+7)^0,f,c
  5440   002D74  2A15               	incf	___aodiv@counter^0,f,c
  5441   002D76                     l4574:
  5442   002D76  AE14               	btfss	(___aodiv@divisor+7)^0,7,c
  5443   002D78  EFC0  F016         	goto	u4831
  5444   002D7C  EFC2  F016         	goto	u4830
  5445   002D80                     u4831:
  5446   002D80  EFB1  F016         	goto	l4572
  5447   002D84                     u4830:
  5448   002D84                     l4576:
  5449   002D84  90D8               	bcf	status,0,c
  5450   002D86  3617               	rlcf	___aodiv@quotient^0,f,c
  5451   002D88  3618               	rlcf	(___aodiv@quotient+1)^0,f,c
  5452   002D8A  3619               	rlcf	(___aodiv@quotient+2)^0,f,c
  5453   002D8C  361A               	rlcf	(___aodiv@quotient+3)^0,f,c
  5454   002D8E  361B               	rlcf	(___aodiv@quotient+4)^0,f,c
  5455   002D90  361C               	rlcf	(___aodiv@quotient+5)^0,f,c
  5456   002D92  361D               	rlcf	(___aodiv@quotient+6)^0,f,c
  5457   002D94  361E               	rlcf	(___aodiv@quotient+7)^0,f,c
  5458   002D96  500D               	movf	___aodiv@divisor^0,w,c
  5459   002D98  5C05               	subwf	___aodiv@dividend^0,w,c
  5460   002D9A  500E               	movf	(___aodiv@divisor+1)^0,w,c
  5461   002D9C  5806               	subwfb	(___aodiv@dividend+1)^0,w,c
  5462   002D9E  500F               	movf	(___aodiv@divisor+2)^0,w,c
  5463   002DA0  5807               	subwfb	(___aodiv@dividend+2)^0,w,c
  5464   002DA2  5010               	movf	(___aodiv@divisor+3)^0,w,c
  5465   002DA4  5808               	subwfb	(___aodiv@dividend+3)^0,w,c
  5466   002DA6  5011               	movf	(___aodiv@divisor+4)^0,w,c
  5467   002DA8  5809               	subwfb	(___aodiv@dividend+4)^0,w,c
  5468   002DAA  5012               	movf	(___aodiv@divisor+5)^0,w,c
  5469   002DAC  580A               	subwfb	(___aodiv@dividend+5)^0,w,c
  5470   002DAE  5013               	movf	(___aodiv@divisor+6)^0,w,c
  5471   002DB0  580B               	subwfb	(___aodiv@dividend+6)^0,w,c
  5472   002DB2  5014               	movf	(___aodiv@divisor+7)^0,w,c
  5473   002DB4  580C               	subwfb	(___aodiv@dividend+7)^0,w,c
  5474   002DB6  A0D8               	btfss	status,0,c
  5475   002DB8  EFE0  F016         	goto	u4841
  5476   002DBC  EFE2  F016         	goto	u4840
  5477   002DC0                     u4841:
  5478   002DC0  EFF3  F016         	goto	l4584
  5479   002DC4                     u4840:
  5480   002DC4  500D               	movf	___aodiv@divisor^0,w,c
  5481   002DC6  5E05               	subwf	___aodiv@dividend^0,f,c
  5482   002DC8  500E               	movf	(___aodiv@divisor+1)^0,w,c
  5483   002DCA  5A06               	subwfb	(___aodiv@dividend+1)^0,f,c
  5484   002DCC  500F               	movf	(___aodiv@divisor+2)^0,w,c
  5485   002DCE  5A07               	subwfb	(___aodiv@dividend+2)^0,f,c
  5486   002DD0  5010               	movf	(___aodiv@divisor+3)^0,w,c
  5487   002DD2  5A08               	subwfb	(___aodiv@dividend+3)^0,f,c
  5488   002DD4  5011               	movf	(___aodiv@divisor+4)^0,w,c
  5489   002DD6  5A09               	subwfb	(___aodiv@dividend+4)^0,f,c
  5490   002DD8  5012               	movf	(___aodiv@divisor+5)^0,w,c
  5491   002DDA  5A0A               	subwfb	(___aodiv@dividend+5)^0,f,c
  5492   002DDC  5013               	movf	(___aodiv@divisor+6)^0,w,c
  5493   002DDE  5A0B               	subwfb	(___aodiv@dividend+6)^0,f,c
  5494   002DE0  5014               	movf	(___aodiv@divisor+7)^0,w,c
  5495   002DE2  5A0C               	subwfb	(___aodiv@dividend+7)^0,f,c
  5496   002DE4  8017               	bsf	___aodiv@quotient^0,0,c
  5497   002DE6                     l4584:
  5498   002DE6  90D8               	bcf	status,0,c
  5499   002DE8  3214               	rrcf	(___aodiv@divisor+7)^0,f,c
  5500   002DEA  3213               	rrcf	(___aodiv@divisor+6)^0,f,c
  5501   002DEC  3212               	rrcf	(___aodiv@divisor+5)^0,f,c
  5502   002DEE  3211               	rrcf	(___aodiv@divisor+4)^0,f,c
  5503   002DF0  3210               	rrcf	(___aodiv@divisor+3)^0,f,c
  5504   002DF2  320F               	rrcf	(___aodiv@divisor+2)^0,f,c
  5505   002DF4  320E               	rrcf	(___aodiv@divisor+1)^0,f,c
  5506   002DF6  320D               	rrcf	___aodiv@divisor^0,f,c
  5507   002DF8  2E15               	decfsz	___aodiv@counter^0,f,c
  5508   002DFA  EFC2  F016         	goto	l4576
  5509   002DFE                     l4588:
  5510   002DFE  5016               	movf	___aodiv@sign^0,w,c
  5511   002E00  B4D8               	btfsc	status,2,c
  5512   002E02  EF05  F017         	goto	u4851
  5513   002E06  EF07  F017         	goto	u4850
  5514   002E0A                     u4851:
  5515   002E0A  EF17  F017         	goto	l4592
  5516   002E0E                     u4850:
  5517   002E0E  1E1E               	comf	(___aodiv@quotient+7)^0,f,c
  5518   002E10  1E1D               	comf	(___aodiv@quotient+6)^0,f,c
  5519   002E12  1E1C               	comf	(___aodiv@quotient+5)^0,f,c
  5520   002E14  1E1B               	comf	(___aodiv@quotient+4)^0,f,c
  5521   002E16  1E1A               	comf	(___aodiv@quotient+3)^0,f,c
  5522   002E18  1E19               	comf	(___aodiv@quotient+2)^0,f,c
  5523   002E1A  1E18               	comf	(___aodiv@quotient+1)^0,f,c
  5524   002E1C  6C17               	negf	___aodiv@quotient^0,c
  5525   002E1E  0E00               	movlw	0
  5526   002E20  2218               	addwfc	(___aodiv@quotient+1)^0,f,c
  5527   002E22  2219               	addwfc	(___aodiv@quotient+2)^0,f,c
  5528   002E24  221A               	addwfc	(___aodiv@quotient+3)^0,f,c
  5529   002E26  221B               	addwfc	(___aodiv@quotient+4)^0,f,c
  5530   002E28  221C               	addwfc	(___aodiv@quotient+5)^0,f,c
  5531   002E2A  221D               	addwfc	(___aodiv@quotient+6)^0,f,c
  5532   002E2C  221E               	addwfc	(___aodiv@quotient+7)^0,f,c
  5533   002E2E                     l4592:
  5534   002E2E  C017  F005         	movff	___aodiv@quotient,?___aodiv
  5535   002E32  C018  F006         	movff	___aodiv@quotient+1,?___aodiv+1
  5536   002E36  C019  F007         	movff	___aodiv@quotient+2,?___aodiv+2
  5537   002E3A  C01A  F008         	movff	___aodiv@quotient+3,?___aodiv+3
  5538   002E3E  C01B  F009         	movff	___aodiv@quotient+4,?___aodiv+4
  5539   002E42  C01C  F00A         	movff	___aodiv@quotient+5,?___aodiv+5
  5540   002E46  C01D  F00B         	movff	___aodiv@quotient+6,?___aodiv+6
  5541   002E4A  C01E  F00C         	movff	___aodiv@quotient+7,?___aodiv+7
  5542   002E4E  0012               	return		;funcret
  5543   002E50                     __end_of___aodiv:
  5544                           	callstack 0
  5545                           
  5546 ;; *************** function _sendTxBuf *****************
  5547 ;; Defined at:
  5548 ;;		line 126 in file "serialTest.c"
  5549 ;; Parameters:    Size  Location     Type
  5550 ;;		None
  5551 ;; Auto vars:     Size  Location     Type
  5552 ;;		None
  5553 ;; Return value:  Size  Location     Type
  5554 ;;                  1    wreg      void 
  5555 ;; Registers used:
  5556 ;;		wreg, status,2, status,0, cstack
  5557 ;; Tracked objects:
  5558 ;;		On entry : 0/0
  5559 ;;		On exit  : 0/0
  5560 ;;		Unchanged: 0/0
  5561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5563 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5565 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5566 ;;Total ram usage:        0 bytes
  5567 ;; Hardware stack levels used: 1
  5568 ;; Hardware stack levels required when called: 3
  5569 ;; This function calls:
  5570 ;;		_isDataInTxBuf
  5571 ;; This function is called by:
  5572 ;;		_colorDetect
  5573 ;; This function uses a non-reentrant model
  5574 ;;
  5575                           
  5576                           	psect	text22
  5577   004658                     __ptext22:
  5578                           	callstack 0
  5579   004658                     _sendTxBuf:
  5580                           	callstack 26
  5581   004658                     
  5582                           ;serialTest.c: 127:     if (isDataInTxBuf()) {PIE4bits.TX4IE=1;}
  5583   004658  EC39  F023         	call	_isDataInTxBuf	;wreg free
  5584   00465C  0900               	iorlw	0
  5585   00465E  B4D8               	btfsc	status,2,c
  5586   004660  EF34  F023         	goto	u5791
  5587   004664  EF36  F023         	goto	u5790
  5588   004668                     u5791:
  5589   004668  EF38  F023         	goto	l500
  5590   00466C                     u5790:
  5591   00466C  010E               	movlb	14	; () banked
  5592   00466E  852D               	bsf	45,2,b	;volatile
  5593   004670                     l500:
  5594   004670  0012               	return		;funcret
  5595   004672                     __end_of_sendTxBuf:
  5596                           	callstack 0
  5597                           
  5598 ;; *************** function _isDataInTxBuf *****************
  5599 ;; Defined at:
  5600 ;;		line 113 in file "serialTest.c"
  5601 ;; Parameters:    Size  Location     Type
  5602 ;;		None
  5603 ;; Auto vars:     Size  Location     Type
  5604 ;;		None
  5605 ;; Return value:  Size  Location     Type
  5606 ;;                  1    wreg      unsigned char 
  5607 ;; Registers used:
  5608 ;;		wreg, status,2, status,0
  5609 ;; Tracked objects:
  5610 ;;		On entry : 0/0
  5611 ;;		On exit  : 0/0
  5612 ;;		Unchanged: 0/0
  5613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5617 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5618 ;;Total ram usage:        0 bytes
  5619 ;; Hardware stack levels used: 1
  5620 ;; Hardware stack levels required when called: 2
  5621 ;; This function calls:
  5622 ;;		Nothing
  5623 ;; This function is called by:
  5624 ;;		_sendTxBuf
  5625 ;; This function uses a non-reentrant model
  5626 ;;
  5627                           
  5628                           	psect	text23
  5629   004672                     __ptext23:
  5630                           	callstack 0
  5631   004672                     _isDataInTxBuf:
  5632                           	callstack 26
  5633   004672                     
  5634                           ;serialTest.c: 114:     return (TxBufWriteCnt!=TxBufReadCnt);
  5635   004672  5057               	movf	_TxBufReadCnt^0,w,c	;volatile
  5636   004674  1858               	xorwf	_TxBufWriteCnt^0,w,c	;volatile
  5637   004676  A4D8               	btfss	status,2,c
  5638   004678  EF40  F023         	goto	u5301
  5639   00467C  EF43  F023         	goto	u5300
  5640   004680                     u5301:
  5641   004680  0E01               	movlw	1
  5642   004682  EF44  F023         	goto	u5310
  5643   004686                     u5300:
  5644   004686  0E00               	movlw	0
  5645   004688                     u5310:
  5646   004688  0012               	return		;funcret
  5647   00468A                     __end_of_isDataInTxBuf:
  5648                           	callstack 0
  5649                           
  5650 ;; *************** function _reverseSquareRight *****************
  5651 ;; Defined at:
  5652 ;;		line 380 in file "MazeRobot.X/dc_motor.c"
  5653 ;; Parameters:    Size  Location     Type
  5654 ;;  mL              2   35[COMRAM] PTR struct DC_motor
  5655 ;;		 -> main@motorLeft(9), 
  5656 ;;  mR              2   37[COMRAM] PTR struct DC_motor
  5657 ;;		 -> main@motorRight(9), 
  5658 ;; Auto vars:     Size  Location     Type
  5659 ;;		None
  5660 ;; Return value:  Size  Location     Type
  5661 ;;                  1    wreg      void 
  5662 ;; Registers used:
  5663 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5664 ;; Tracked objects:
  5665 ;;		On entry : 0/0
  5666 ;;		On exit  : 0/0
  5667 ;;		Unchanged: 0/0
  5668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5669 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5670 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5671 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5672 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5673 ;;Total ram usage:        6 bytes
  5674 ;; Hardware stack levels used: 1
  5675 ;; Hardware stack levels required when called: 6
  5676 ;; This function calls:
  5677 ;;		_reverse
  5678 ;;		_stop
  5679 ;;		_turnRight_90
  5680 ;; This function is called by:
  5681 ;;		_colorDetect
  5682 ;; This function uses a non-reentrant model
  5683 ;;
  5684                           
  5685                           	psect	text24
  5686   003F1E                     __ptext24:
  5687                           	callstack 0
  5688   003F1E                     _reverseSquareRight:
  5689                           	callstack 23
  5690   003F1E                     
  5691                           ;MazeRobot.X/dc_motor.c: 380: void reverseSquareRight(DC_motor *mL, DC_motor *mR);MazeRo
      +                          bot.X/dc_motor.c: 381: {;MazeRobot.X/dc_motor.c: 383:     stop(mL, mR);
  5692   003F1E  C024  F018         	movff	reverseSquareRight@mL,stop@mL
  5693   003F22  C025  F019         	movff	reverseSquareRight@mL+1,stop@mL+1
  5694   003F26  C026  F01A         	movff	reverseSquareRight@mR,stop@mR
  5695   003F2A  C027  F01B         	movff	reverseSquareRight@mR+1,stop@mR+1
  5696   003F2E  ECF0  F01E         	call	_stop	;wreg free
  5697   003F32                     
  5698                           ;MazeRobot.X/dc_motor.c: 384:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5699   003F32  0E09               	movlw	9
  5700   003F34  6E29               	movwf	(??_reverseSquareRight+1)^0,c
  5701   003F36  0E1E               	movlw	30
  5702   003F38  6E28               	movwf	??_reverseSquareRight^0,c
  5703   003F3A  0EE4               	movlw	228
  5704   003F3C                     u7327:
  5705   003F3C  2EE8               	decfsz	wreg,f,c
  5706   003F3E  D7FE               	bra	u7327
  5707   003F40  2E28               	decfsz	??_reverseSquareRight^0,f,c
  5708   003F42  D7FC               	bra	u7327
  5709   003F44  2E29               	decfsz	(??_reverseSquareRight+1)^0,f,c
  5710   003F46  D7FA               	bra	u7327
  5711   003F48  D000               	nop2	
  5712   003F4A                     
  5713                           ;MazeRobot.X/dc_motor.c: 386:     reverse(mL, mR);
  5714   003F4A  C024  F018         	movff	reverseSquareRight@mL,reverse@mL
  5715   003F4E  C025  F019         	movff	reverseSquareRight@mL+1,reverse@mL+1
  5716   003F52  C026  F01A         	movff	reverseSquareRight@mR,reverse@mR
  5717   003F56  C027  F01B         	movff	reverseSquareRight@mR+1,reverse@mR+1
  5718   003F5A  ECB7  F01D         	call	_reverse	;wreg free
  5719                           
  5720                           ;MazeRobot.X/dc_motor.c: 387:     _delay((unsigned long)((500)*(64000000/4000.0)));
  5721   003F5E  0E29               	movlw	41
  5722   003F60  6E29               	movwf	(??_reverseSquareRight+1)^0,c
  5723   003F62  0E96               	movlw	150
  5724   003F64  6E28               	movwf	??_reverseSquareRight^0,c
  5725   003F66  0E7F               	movlw	127
  5726   003F68                     u7337:
  5727   003F68  2EE8               	decfsz	wreg,f,c
  5728   003F6A  D7FE               	bra	u7337
  5729   003F6C  2E28               	decfsz	??_reverseSquareRight^0,f,c
  5730   003F6E  D7FC               	bra	u7337
  5731   003F70  2E29               	decfsz	(??_reverseSquareRight+1)^0,f,c
  5732   003F72  D7FA               	bra	u7337
  5733   003F74  F000               	nop	
  5734   003F76                     
  5735                           ;MazeRobot.X/dc_motor.c: 389:     turnRight_90(mL,mR);
  5736   003F76  C024  F01E         	movff	reverseSquareRight@mL,turnRight_90@mL
  5737   003F7A  C025  F01F         	movff	reverseSquareRight@mL+1,turnRight_90@mL+1
  5738   003F7E  C026  F020         	movff	reverseSquareRight@mR,turnRight_90@mR
  5739   003F82  C027  F021         	movff	reverseSquareRight@mR+1,turnRight_90@mR+1
  5740   003F86  EC75  F01A         	call	_turnRight_90	;wreg free
  5741   003F8A                     
  5742                           ;MazeRobot.X/dc_motor.c: 391:     stop(mL, mR);
  5743   003F8A  C024  F018         	movff	reverseSquareRight@mL,stop@mL
  5744   003F8E  C025  F019         	movff	reverseSquareRight@mL+1,stop@mL+1
  5745   003F92  C026  F01A         	movff	reverseSquareRight@mR,stop@mR
  5746   003F96  C027  F01B         	movff	reverseSquareRight@mR+1,stop@mR+1
  5747   003F9A  ECF0  F01E         	call	_stop	;wreg free
  5748   003F9E  0012               	return		;funcret
  5749   003FA0                     __end_of_reverseSquareRight:
  5750                           	callstack 0
  5751                           
  5752 ;; *************** function _turnRight_90 *****************
  5753 ;; Defined at:
  5754 ;;		line 267 in file "MazeRobot.X/dc_motor.c"
  5755 ;; Parameters:    Size  Location     Type
  5756 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  5757 ;;		 -> main@motorLeft(9), 
  5758 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  5759 ;;		 -> main@motorRight(9), 
  5760 ;; Auto vars:     Size  Location     Type
  5761 ;;		None
  5762 ;; Return value:  Size  Location     Type
  5763 ;;                  1    wreg      void 
  5764 ;; Registers used:
  5765 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5766 ;; Tracked objects:
  5767 ;;		On entry : 0/0
  5768 ;;		On exit  : 0/0
  5769 ;;		Unchanged: 0/0
  5770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5771 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5773 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5774 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5775 ;;Total ram usage:        6 bytes
  5776 ;; Hardware stack levels used: 1
  5777 ;; Hardware stack levels required when called: 5
  5778 ;; This function calls:
  5779 ;;		_reverse
  5780 ;;		_setMotorPWM
  5781 ;;		_stop
  5782 ;; This function is called by:
  5783 ;;		_colorDetect
  5784 ;;		_reverseSquareRight
  5785 ;; This function uses a non-reentrant model
  5786 ;;
  5787                           
  5788                           	psect	text25
  5789   0034EA                     __ptext25:
  5790                           	callstack 0
  5791   0034EA                     _turnRight_90:
  5792                           	callstack 24
  5793   0034EA                     
  5794                           ;MazeRobot.X/dc_motor.c: 267: void turnRight_90(DC_motor *mL, DC_motor *mR);MazeRobot.X/
      +                          dc_motor.c: 268: {;MazeRobot.X/dc_motor.c: 269:     stop(mL, mR);
  5795   0034EA  C01E  F018         	movff	turnRight_90@mL,stop@mL
  5796   0034EE  C01F  F019         	movff	turnRight_90@mL+1,stop@mL+1
  5797   0034F2  C020  F01A         	movff	turnRight_90@mR,stop@mR
  5798   0034F6  C021  F01B         	movff	turnRight_90@mR+1,stop@mR+1
  5799   0034FA  ECF0  F01E         	call	_stop	;wreg free
  5800   0034FE                     
  5801                           ;MazeRobot.X/dc_motor.c: 270:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5802   0034FE  0E09               	movlw	9
  5803   003500  6E23               	movwf	(??_turnRight_90+1)^0,c
  5804   003502  0E1E               	movlw	30
  5805   003504  6E22               	movwf	??_turnRight_90^0,c
  5806   003506  0EE4               	movlw	228
  5807   003508                     u7347:
  5808   003508  2EE8               	decfsz	wreg,f,c
  5809   00350A  D7FE               	bra	u7347
  5810   00350C  2E22               	decfsz	??_turnRight_90^0,f,c
  5811   00350E  D7FC               	bra	u7347
  5812   003510  2E23               	decfsz	(??_turnRight_90+1)^0,f,c
  5813   003512  D7FA               	bra	u7347
  5814   003514  D000               	nop2	
  5815   003516                     
  5816                           ;MazeRobot.X/dc_motor.c: 272:     reverse(mL, mR);
  5817   003516  C01E  F018         	movff	turnRight_90@mL,reverse@mL
  5818   00351A  C01F  F019         	movff	turnRight_90@mL+1,reverse@mL+1
  5819   00351E  C020  F01A         	movff	turnRight_90@mR,reverse@mR
  5820   003522  C021  F01B         	movff	turnRight_90@mR+1,reverse@mR+1
  5821   003526  ECB7  F01D         	call	_reverse	;wreg free
  5822                           
  5823                           ;MazeRobot.X/dc_motor.c: 273:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  5824   00352A  0E11               	movlw	17
  5825   00352C  6E23               	movwf	(??_turnRight_90+1)^0,c
  5826   00352E  0E3C               	movlw	60
  5827   003530  6E22               	movwf	??_turnRight_90^0,c
  5828   003532  0ECB               	movlw	203
  5829   003534                     u7357:
  5830   003534  2EE8               	decfsz	wreg,f,c
  5831   003536  D7FE               	bra	u7357
  5832   003538  2E22               	decfsz	??_turnRight_90^0,f,c
  5833   00353A  D7FC               	bra	u7357
  5834   00353C  2E23               	decfsz	(??_turnRight_90+1)^0,f,c
  5835   00353E  D7FA               	bra	u7357
  5836   003540  F000               	nop	
  5837   003542                     
  5838                           ;MazeRobot.X/dc_motor.c: 275:     stop(mL, mR);
  5839   003542  C01E  F018         	movff	turnRight_90@mL,stop@mL
  5840   003546  C01F  F019         	movff	turnRight_90@mL+1,stop@mL+1
  5841   00354A  C020  F01A         	movff	turnRight_90@mR,stop@mR
  5842   00354E  C021  F01B         	movff	turnRight_90@mR+1,stop@mR+1
  5843   003552  ECF0  F01E         	call	_stop	;wreg free
  5844   003556                     
  5845                           ;MazeRobot.X/dc_motor.c: 277:     mL->direction = 1;
  5846   003556  EE20 F001          	lfsr	2,1
  5847   00355A  501E               	movf	turnRight_90@mL^0,w,c
  5848   00355C  26D9               	addwf	fsr2l,f,c
  5849   00355E  501F               	movf	(turnRight_90@mL+1)^0,w,c
  5850   003560  22DA               	addwfc	fsr2h,f,c
  5851   003562  0E01               	movlw	1
  5852   003564  6EDF               	movwf	indf2,c
  5853   003566                     
  5854                           ;MazeRobot.X/dc_motor.c: 278:     mR->direction = 0;
  5855   003566  EE20 F001          	lfsr	2,1
  5856   00356A  5020               	movf	turnRight_90@mR^0,w,c
  5857   00356C  26D9               	addwf	fsr2l,f,c
  5858   00356E  5021               	movf	(turnRight_90@mR+1)^0,w,c
  5859   003570  22DA               	addwfc	fsr2h,f,c
  5860   003572  0E00               	movlw	0
  5861   003574  6EDF               	movwf	indf2,c
  5862   003576                     
  5863                           ;MazeRobot.X/dc_motor.c: 280:     mL->brakemode = 1;
  5864   003576  EE20 F002          	lfsr	2,2
  5865   00357A  501E               	movf	turnRight_90@mL^0,w,c
  5866   00357C  26D9               	addwf	fsr2l,f,c
  5867   00357E  501F               	movf	(turnRight_90@mL+1)^0,w,c
  5868   003580  22DA               	addwfc	fsr2h,f,c
  5869   003582  0E01               	movlw	1
  5870   003584  6EDF               	movwf	indf2,c
  5871   003586                     
  5872                           ;MazeRobot.X/dc_motor.c: 281:     mL->brakemode = 1;
  5873   003586  EE20 F002          	lfsr	2,2
  5874   00358A  501E               	movf	turnRight_90@mL^0,w,c
  5875   00358C  26D9               	addwf	fsr2l,f,c
  5876   00358E  501F               	movf	(turnRight_90@mL+1)^0,w,c
  5877   003590  22DA               	addwfc	fsr2h,f,c
  5878   003592  0E01               	movlw	1
  5879   003594  6EDF               	movwf	indf2,c
  5880                           
  5881                           ;MazeRobot.X/dc_motor.c: 283:     while((mL->power < 80) || (mR->power < 80)){
  5882   003596  EFE5  F01A         	goto	l4886
  5883   00359A                     l4880:
  5884                           
  5885                           ;MazeRobot.X/dc_motor.c: 284:         mL->power += 10;
  5886   00359A  C01E  FFD9         	movff	turnRight_90@mL,fsr2l
  5887   00359E  C01F  FFDA         	movff	turnRight_90@mL+1,fsr2h
  5888   0035A2  0E0A               	movlw	10
  5889   0035A4  26DF               	addwf	indf2,f,c
  5890                           
  5891                           ;MazeRobot.X/dc_motor.c: 285:         mR->power += 10;
  5892   0035A6  C020  FFD9         	movff	turnRight_90@mR,fsr2l
  5893   0035AA  C021  FFDA         	movff	turnRight_90@mR+1,fsr2h
  5894   0035AE  0E0A               	movlw	10
  5895   0035B0  26DF               	addwf	indf2,f,c
  5896   0035B2                     
  5897                           ;MazeRobot.X/dc_motor.c: 286:         setMotorPWM(mL);
  5898   0035B2  C01E  F012         	movff	turnRight_90@mL,setMotorPWM@m
  5899   0035B6  C01F  F013         	movff	turnRight_90@mL+1,setMotorPWM@m+1
  5900   0035BA  EC28  F017         	call	_setMotorPWM	;wreg free
  5901   0035BE                     
  5902                           ;MazeRobot.X/dc_motor.c: 287:         setMotorPWM(mR);
  5903   0035BE  C020  F012         	movff	turnRight_90@mR,setMotorPWM@m
  5904   0035C2  C021  F013         	movff	turnRight_90@mR+1,setMotorPWM@m+1
  5905   0035C6  EC28  F017         	call	_setMotorPWM	;wreg free
  5906   0035CA                     l4886:
  5907                           
  5908                           ;MazeRobot.X/dc_motor.c: 283:     while((mL->power < 80) || (mR->power < 80)){
  5909   0035CA  C01E  FFD9         	movff	turnRight_90@mL,fsr2l
  5910   0035CE  C01F  FFDA         	movff	turnRight_90@mL+1,fsr2h
  5911   0035D2  0E4F               	movlw	79
  5912   0035D4  64DF               	cpfsgt	indf2,c
  5913   0035D6  EFEF  F01A         	goto	u5251
  5914   0035DA  EFF1  F01A         	goto	u5250
  5915   0035DE                     u5251:
  5916   0035DE  EFCD  F01A         	goto	l4880
  5917   0035E2                     u5250:
  5918   0035E2  C020  FFD9         	movff	turnRight_90@mR,fsr2l
  5919   0035E6  C021  FFDA         	movff	turnRight_90@mR+1,fsr2h
  5920   0035EA  0E4F               	movlw	79
  5921   0035EC  64DF               	cpfsgt	indf2,c
  5922   0035EE  EFFB  F01A         	goto	u5261
  5923   0035F2  EFFD  F01A         	goto	u5260
  5924   0035F6                     u5261:
  5925   0035F6  EFCD  F01A         	goto	l4880
  5926   0035FA                     u5260:
  5927   0035FA                     
  5928                           ;MazeRobot.X/dc_motor.c: 289:    _delay((unsigned long)((turning_time45)*(64000000/4000.
      +                          0)));
  5929   0035FA  0E11               	movlw	17
  5930   0035FC  6E23               	movwf	(??_turnRight_90+1)^0,c
  5931   0035FE  0E3C               	movlw	60
  5932   003600  6E22               	movwf	??_turnRight_90^0,c
  5933   003602  0ECB               	movlw	203
  5934   003604                     u7367:
  5935   003604  2EE8               	decfsz	wreg,f,c
  5936   003606  D7FE               	bra	u7367
  5937   003608  2E22               	decfsz	??_turnRight_90^0,f,c
  5938   00360A  D7FC               	bra	u7367
  5939   00360C  2E23               	decfsz	(??_turnRight_90+1)^0,f,c
  5940   00360E  D7FA               	bra	u7367
  5941   003610  F000               	nop	
  5942   003612                     
  5943                           ;MazeRobot.X/dc_motor.c: 291:     stop(mL, mR);
  5944   003612  C01E  F018         	movff	turnRight_90@mL,stop@mL
  5945   003616  C01F  F019         	movff	turnRight_90@mL+1,stop@mL+1
  5946   00361A  C020  F01A         	movff	turnRight_90@mR,stop@mR
  5947   00361E  C021  F01B         	movff	turnRight_90@mR+1,stop@mR+1
  5948   003622  ECF0  F01E         	call	_stop	;wreg free
  5949   003626  0012               	return		;funcret
  5950   003628                     __end_of_turnRight_90:
  5951                           	callstack 0
  5952                           
  5953 ;; *************** function _reverseSquareLeft *****************
  5954 ;; Defined at:
  5955 ;;		line 396 in file "MazeRobot.X/dc_motor.c"
  5956 ;; Parameters:    Size  Location     Type
  5957 ;;  mL              2   35[COMRAM] PTR struct DC_motor
  5958 ;;		 -> main@motorLeft(9), 
  5959 ;;  mR              2   37[COMRAM] PTR struct DC_motor
  5960 ;;		 -> main@motorRight(9), 
  5961 ;; Auto vars:     Size  Location     Type
  5962 ;;		None
  5963 ;; Return value:  Size  Location     Type
  5964 ;;                  1    wreg      void 
  5965 ;; Registers used:
  5966 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5967 ;; Tracked objects:
  5968 ;;		On entry : 0/0
  5969 ;;		On exit  : 0/0
  5970 ;;		Unchanged: 0/0
  5971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5972 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5974 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5975 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5976 ;;Total ram usage:        6 bytes
  5977 ;; Hardware stack levels used: 1
  5978 ;; Hardware stack levels required when called: 6
  5979 ;; This function calls:
  5980 ;;		_reverse
  5981 ;;		_stop
  5982 ;;		_turnLeft_90
  5983 ;; This function is called by:
  5984 ;;		_colorDetect
  5985 ;; This function uses a non-reentrant model
  5986 ;;
  5987                           
  5988                           	psect	text26
  5989   003FA0                     __ptext26:
  5990                           	callstack 0
  5991   003FA0                     _reverseSquareLeft:
  5992                           	callstack 23
  5993   003FA0                     
  5994                           ;MazeRobot.X/dc_motor.c: 396: void reverseSquareLeft(DC_motor *mL, DC_motor *mR);MazeRob
      +                          ot.X/dc_motor.c: 397: {;MazeRobot.X/dc_motor.c: 399:     stop(mL, mR);
  5995   003FA0  C024  F018         	movff	reverseSquareLeft@mL,stop@mL
  5996   003FA4  C025  F019         	movff	reverseSquareLeft@mL+1,stop@mL+1
  5997   003FA8  C026  F01A         	movff	reverseSquareLeft@mR,stop@mR
  5998   003FAC  C027  F01B         	movff	reverseSquareLeft@mR+1,stop@mR+1
  5999   003FB0  ECF0  F01E         	call	_stop	;wreg free
  6000   003FB4                     
  6001                           ;MazeRobot.X/dc_motor.c: 400:     _delay((unsigned long)((100)*(64000000/4000.0)));
  6002   003FB4  0E09               	movlw	9
  6003   003FB6  6E29               	movwf	(??_reverseSquareLeft+1)^0,c
  6004   003FB8  0E1E               	movlw	30
  6005   003FBA  6E28               	movwf	??_reverseSquareLeft^0,c
  6006   003FBC  0EE4               	movlw	228
  6007   003FBE                     u7377:
  6008   003FBE  2EE8               	decfsz	wreg,f,c
  6009   003FC0  D7FE               	bra	u7377
  6010   003FC2  2E28               	decfsz	??_reverseSquareLeft^0,f,c
  6011   003FC4  D7FC               	bra	u7377
  6012   003FC6  2E29               	decfsz	(??_reverseSquareLeft+1)^0,f,c
  6013   003FC8  D7FA               	bra	u7377
  6014   003FCA  D000               	nop2	
  6015   003FCC                     
  6016                           ;MazeRobot.X/dc_motor.c: 402:     reverse(mL, mR);
  6017   003FCC  C024  F018         	movff	reverseSquareLeft@mL,reverse@mL
  6018   003FD0  C025  F019         	movff	reverseSquareLeft@mL+1,reverse@mL+1
  6019   003FD4  C026  F01A         	movff	reverseSquareLeft@mR,reverse@mR
  6020   003FD8  C027  F01B         	movff	reverseSquareLeft@mR+1,reverse@mR+1
  6021   003FDC  ECB7  F01D         	call	_reverse	;wreg free
  6022                           
  6023                           ;MazeRobot.X/dc_motor.c: 403:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6024   003FE0  0E29               	movlw	41
  6025   003FE2  6E29               	movwf	(??_reverseSquareLeft+1)^0,c
  6026   003FE4  0E96               	movlw	150
  6027   003FE6  6E28               	movwf	??_reverseSquareLeft^0,c
  6028   003FE8  0E7F               	movlw	127
  6029   003FEA                     u7387:
  6030   003FEA  2EE8               	decfsz	wreg,f,c
  6031   003FEC  D7FE               	bra	u7387
  6032   003FEE  2E28               	decfsz	??_reverseSquareLeft^0,f,c
  6033   003FF0  D7FC               	bra	u7387
  6034   003FF2  2E29               	decfsz	(??_reverseSquareLeft+1)^0,f,c
  6035   003FF4  D7FA               	bra	u7387
  6036   003FF6  F000               	nop	
  6037   003FF8                     
  6038                           ;MazeRobot.X/dc_motor.c: 405:     turnLeft_90(mL,mR);
  6039   003FF8  C024  F01E         	movff	reverseSquareLeft@mL,turnLeft_90@mL
  6040   003FFC  C025  F01F         	movff	reverseSquareLeft@mL+1,turnLeft_90@mL+1
  6041   004000  C026  F020         	movff	reverseSquareLeft@mR,turnLeft_90@mR
  6042   004004  C027  F021         	movff	reverseSquareLeft@mR+1,turnLeft_90@mR+1
  6043   004008  EC14  F01B         	call	_turnLeft_90	;wreg free
  6044   00400C                     
  6045                           ;MazeRobot.X/dc_motor.c: 407:     stop(mL, mR);
  6046   00400C  C024  F018         	movff	reverseSquareLeft@mL,stop@mL
  6047   004010  C025  F019         	movff	reverseSquareLeft@mL+1,stop@mL+1
  6048   004014  C026  F01A         	movff	reverseSquareLeft@mR,stop@mR
  6049   004018  C027  F01B         	movff	reverseSquareLeft@mR+1,stop@mR+1
  6050   00401C  ECF0  F01E         	call	_stop	;wreg free
  6051   004020  0012               	return		;funcret
  6052   004022                     __end_of_reverseSquareLeft:
  6053                           	callstack 0
  6054                           
  6055 ;; *************** function _turnLeft_90 *****************
  6056 ;; Defined at:
  6057 ;;		line 238 in file "MazeRobot.X/dc_motor.c"
  6058 ;; Parameters:    Size  Location     Type
  6059 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  6060 ;;		 -> main@motorLeft(9), 
  6061 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  6062 ;;		 -> main@motorRight(9), 
  6063 ;; Auto vars:     Size  Location     Type
  6064 ;;		None
  6065 ;; Return value:  Size  Location     Type
  6066 ;;                  1    wreg      void 
  6067 ;; Registers used:
  6068 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6069 ;; Tracked objects:
  6070 ;;		On entry : 0/0
  6071 ;;		On exit  : 0/0
  6072 ;;		Unchanged: 0/0
  6073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6074 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6075 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6076 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6077 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6078 ;;Total ram usage:        6 bytes
  6079 ;; Hardware stack levels used: 1
  6080 ;; Hardware stack levels required when called: 5
  6081 ;; This function calls:
  6082 ;;		_reverse
  6083 ;;		_setMotorPWM
  6084 ;;		_stop
  6085 ;; This function is called by:
  6086 ;;		_colorDetect
  6087 ;;		_reverseSquareLeft
  6088 ;; This function uses a non-reentrant model
  6089 ;;
  6090                           
  6091                           	psect	text27
  6092   003628                     __ptext27:
  6093                           	callstack 0
  6094   003628                     _turnLeft_90:
  6095                           	callstack 24
  6096   003628                     
  6097                           ;MazeRobot.X/dc_motor.c: 238: void turnLeft_90(DC_motor *mL, DC_motor *mR);MazeRobot.X/d
      +                          c_motor.c: 239: {;MazeRobot.X/dc_motor.c: 241:     stop(mL, mR);
  6098   003628  C01E  F018         	movff	turnLeft_90@mL,stop@mL
  6099   00362C  C01F  F019         	movff	turnLeft_90@mL+1,stop@mL+1
  6100   003630  C020  F01A         	movff	turnLeft_90@mR,stop@mR
  6101   003634  C021  F01B         	movff	turnLeft_90@mR+1,stop@mR+1
  6102   003638  ECF0  F01E         	call	_stop	;wreg free
  6103   00363C                     
  6104                           ;MazeRobot.X/dc_motor.c: 242:     _delay((unsigned long)((100)*(64000000/4000.0)));
  6105   00363C  0E09               	movlw	9
  6106   00363E  6E23               	movwf	(??_turnLeft_90+1)^0,c
  6107   003640  0E1E               	movlw	30
  6108   003642  6E22               	movwf	??_turnLeft_90^0,c
  6109   003644  0EE4               	movlw	228
  6110   003646                     u7397:
  6111   003646  2EE8               	decfsz	wreg,f,c
  6112   003648  D7FE               	bra	u7397
  6113   00364A  2E22               	decfsz	??_turnLeft_90^0,f,c
  6114   00364C  D7FC               	bra	u7397
  6115   00364E  2E23               	decfsz	(??_turnLeft_90+1)^0,f,c
  6116   003650  D7FA               	bra	u7397
  6117   003652  D000               	nop2	
  6118   003654                     
  6119                           ;MazeRobot.X/dc_motor.c: 244:     reverse(mL, mR);
  6120   003654  C01E  F018         	movff	turnLeft_90@mL,reverse@mL
  6121   003658  C01F  F019         	movff	turnLeft_90@mL+1,reverse@mL+1
  6122   00365C  C020  F01A         	movff	turnLeft_90@mR,reverse@mR
  6123   003660  C021  F01B         	movff	turnLeft_90@mR+1,reverse@mR+1
  6124   003664  ECB7  F01D         	call	_reverse	;wreg free
  6125                           
  6126                           ;MazeRobot.X/dc_motor.c: 245:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  6127   003668  0E11               	movlw	17
  6128   00366A  6E23               	movwf	(??_turnLeft_90+1)^0,c
  6129   00366C  0E3C               	movlw	60
  6130   00366E  6E22               	movwf	??_turnLeft_90^0,c
  6131   003670  0ECB               	movlw	203
  6132   003672                     u7407:
  6133   003672  2EE8               	decfsz	wreg,f,c
  6134   003674  D7FE               	bra	u7407
  6135   003676  2E22               	decfsz	??_turnLeft_90^0,f,c
  6136   003678  D7FC               	bra	u7407
  6137   00367A  2E23               	decfsz	(??_turnLeft_90+1)^0,f,c
  6138   00367C  D7FA               	bra	u7407
  6139   00367E  F000               	nop	
  6140   003680                     
  6141                           ;MazeRobot.X/dc_motor.c: 247:     stop(mL, mR);
  6142   003680  C01E  F018         	movff	turnLeft_90@mL,stop@mL
  6143   003684  C01F  F019         	movff	turnLeft_90@mL+1,stop@mL+1
  6144   003688  C020  F01A         	movff	turnLeft_90@mR,stop@mR
  6145   00368C  C021  F01B         	movff	turnLeft_90@mR+1,stop@mR+1
  6146   003690  ECF0  F01E         	call	_stop	;wreg free
  6147   003694                     
  6148                           ;MazeRobot.X/dc_motor.c: 249:     mL->direction = 0;
  6149   003694  EE20 F001          	lfsr	2,1
  6150   003698  501E               	movf	turnLeft_90@mL^0,w,c
  6151   00369A  26D9               	addwf	fsr2l,f,c
  6152   00369C  501F               	movf	(turnLeft_90@mL+1)^0,w,c
  6153   00369E  22DA               	addwfc	fsr2h,f,c
  6154   0036A0  0E00               	movlw	0
  6155   0036A2  6EDF               	movwf	indf2,c
  6156   0036A4                     
  6157                           ;MazeRobot.X/dc_motor.c: 250:     mR->direction = 1;
  6158   0036A4  EE20 F001          	lfsr	2,1
  6159   0036A8  5020               	movf	turnLeft_90@mR^0,w,c
  6160   0036AA  26D9               	addwf	fsr2l,f,c
  6161   0036AC  5021               	movf	(turnLeft_90@mR+1)^0,w,c
  6162   0036AE  22DA               	addwfc	fsr2h,f,c
  6163   0036B0  0E01               	movlw	1
  6164   0036B2  6EDF               	movwf	indf2,c
  6165   0036B4                     
  6166                           ;MazeRobot.X/dc_motor.c: 252:     mL->brakemode = 1;
  6167   0036B4  EE20 F002          	lfsr	2,2
  6168   0036B8  501E               	movf	turnLeft_90@mL^0,w,c
  6169   0036BA  26D9               	addwf	fsr2l,f,c
  6170   0036BC  501F               	movf	(turnLeft_90@mL+1)^0,w,c
  6171   0036BE  22DA               	addwfc	fsr2h,f,c
  6172   0036C0  0E01               	movlw	1
  6173   0036C2  6EDF               	movwf	indf2,c
  6174   0036C4                     
  6175                           ;MazeRobot.X/dc_motor.c: 253:     mL->brakemode = 1;
  6176   0036C4  EE20 F002          	lfsr	2,2
  6177   0036C8  501E               	movf	turnLeft_90@mL^0,w,c
  6178   0036CA  26D9               	addwf	fsr2l,f,c
  6179   0036CC  501F               	movf	(turnLeft_90@mL+1)^0,w,c
  6180   0036CE  22DA               	addwfc	fsr2h,f,c
  6181   0036D0  0E01               	movlw	1
  6182   0036D2  6EDF               	movwf	indf2,c
  6183                           
  6184                           ;MazeRobot.X/dc_motor.c: 255:     while((mL->power < 80) || (mR->power < 80)){
  6185   0036D4  EF84  F01B         	goto	l4916
  6186   0036D8                     l4910:
  6187                           
  6188                           ;MazeRobot.X/dc_motor.c: 256:         mL->power += 10;
  6189   0036D8  C01E  FFD9         	movff	turnLeft_90@mL,fsr2l
  6190   0036DC  C01F  FFDA         	movff	turnLeft_90@mL+1,fsr2h
  6191   0036E0  0E0A               	movlw	10
  6192   0036E2  26DF               	addwf	indf2,f,c
  6193                           
  6194                           ;MazeRobot.X/dc_motor.c: 257:         mR->power += 10;
  6195   0036E4  C020  FFD9         	movff	turnLeft_90@mR,fsr2l
  6196   0036E8  C021  FFDA         	movff	turnLeft_90@mR+1,fsr2h
  6197   0036EC  0E0A               	movlw	10
  6198   0036EE  26DF               	addwf	indf2,f,c
  6199   0036F0                     
  6200                           ;MazeRobot.X/dc_motor.c: 258:         setMotorPWM(mL);
  6201   0036F0  C01E  F012         	movff	turnLeft_90@mL,setMotorPWM@m
  6202   0036F4  C01F  F013         	movff	turnLeft_90@mL+1,setMotorPWM@m+1
  6203   0036F8  EC28  F017         	call	_setMotorPWM	;wreg free
  6204   0036FC                     
  6205                           ;MazeRobot.X/dc_motor.c: 259:         setMotorPWM(mR);
  6206   0036FC  C020  F012         	movff	turnLeft_90@mR,setMotorPWM@m
  6207   003700  C021  F013         	movff	turnLeft_90@mR+1,setMotorPWM@m+1
  6208   003704  EC28  F017         	call	_setMotorPWM	;wreg free
  6209   003708                     l4916:
  6210                           
  6211                           ;MazeRobot.X/dc_motor.c: 255:     while((mL->power < 80) || (mR->power < 80)){
  6212   003708  C01E  FFD9         	movff	turnLeft_90@mL,fsr2l
  6213   00370C  C01F  FFDA         	movff	turnLeft_90@mL+1,fsr2h
  6214   003710  0E4F               	movlw	79
  6215   003712  64DF               	cpfsgt	indf2,c
  6216   003714  EF8E  F01B         	goto	u5271
  6217   003718  EF90  F01B         	goto	u5270
  6218   00371C                     u5271:
  6219   00371C  EF6C  F01B         	goto	l4910
  6220   003720                     u5270:
  6221   003720  C020  FFD9         	movff	turnLeft_90@mR,fsr2l
  6222   003724  C021  FFDA         	movff	turnLeft_90@mR+1,fsr2h
  6223   003728  0E4F               	movlw	79
  6224   00372A  64DF               	cpfsgt	indf2,c
  6225   00372C  EF9A  F01B         	goto	u5281
  6226   003730  EF9C  F01B         	goto	u5280
  6227   003734                     u5281:
  6228   003734  EF6C  F01B         	goto	l4910
  6229   003738                     u5280:
  6230   003738                     
  6231                           ;MazeRobot.X/dc_motor.c: 261:    _delay((unsigned long)((2*turning_time45)*(64000000/400
      +                          0.0)));
  6232   003738  0E21               	movlw	33
  6233   00373A  6E23               	movwf	(??_turnLeft_90+1)^0,c
  6234   00373C  0E78               	movlw	120
  6235   00373E  6E22               	movwf	??_turnLeft_90^0,c
  6236   003740  0E98               	movlw	152
  6237   003742                     u7417:
  6238   003742  2EE8               	decfsz	wreg,f,c
  6239   003744  D7FE               	bra	u7417
  6240   003746  2E22               	decfsz	??_turnLeft_90^0,f,c
  6241   003748  D7FC               	bra	u7417
  6242   00374A  2E23               	decfsz	(??_turnLeft_90+1)^0,f,c
  6243   00374C  D7FA               	bra	u7417
  6244   00374E  D000               	nop2	
  6245   003750                     
  6246                           ;MazeRobot.X/dc_motor.c: 262:     stop(mL, mR);
  6247   003750  C01E  F018         	movff	turnLeft_90@mL,stop@mL
  6248   003754  C01F  F019         	movff	turnLeft_90@mL+1,stop@mL+1
  6249   003758  C020  F01A         	movff	turnLeft_90@mR,stop@mR
  6250   00375C  C021  F01B         	movff	turnLeft_90@mR+1,stop@mR+1
  6251   003760  ECF0  F01E         	call	_stop	;wreg free
  6252   003764  0012               	return		;funcret
  6253   003766                     __end_of_turnLeft_90:
  6254                           	callstack 0
  6255                           
  6256 ;; *************** function _stop *****************
  6257 ;; Defined at:
  6258 ;;		line 115 in file "MazeRobot.X/dc_motor.c"
  6259 ;; Parameters:    Size  Location     Type
  6260 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  6261 ;;		 -> main@motorLeft(9), 
  6262 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  6263 ;;		 -> main@motorRight(9), 
  6264 ;; Auto vars:     Size  Location     Type
  6265 ;;		None
  6266 ;; Return value:  Size  Location     Type
  6267 ;;                  1    wreg      void 
  6268 ;; Registers used:
  6269 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6270 ;; Tracked objects:
  6271 ;;		On entry : 0/0
  6272 ;;		On exit  : 0/0
  6273 ;;		Unchanged: 0/0
  6274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6275 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6277 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6278 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6279 ;;Total ram usage:        6 bytes
  6280 ;; Hardware stack levels used: 1
  6281 ;; Hardware stack levels required when called: 4
  6282 ;; This function calls:
  6283 ;;		_setMotorPWM
  6284 ;; This function is called by:
  6285 ;;		_turnLeft_90
  6286 ;;		_turnRight_90
  6287 ;;		_turn_180
  6288 ;;		_turnRight_135
  6289 ;;		_turnLeft_135
  6290 ;;		_reverseSquareRight
  6291 ;;		_reverseSquareLeft
  6292 ;;		_main
  6293 ;;		_turnLeft
  6294 ;;		_turnRight
  6295 ;; This function uses a non-reentrant model
  6296 ;;
  6297                           
  6298                           	psect	text28
  6299   003DE0                     __ptext28:
  6300                           	callstack 0
  6301   003DE0                     _stop:
  6302                           	callstack 26
  6303   003DE0                     
  6304                           ;MazeRobot.X/dc_motor.c: 117:     while ((mL->power)>0 && (mR->power)>0){
  6305   003DE0  EF22  F01F         	goto	l4788
  6306   003DE4                     l4776:
  6307                           
  6308                           ;MazeRobot.X/dc_motor.c: 118:         if ((mL->power) >0){
  6309   003DE4  C018  FFD9         	movff	stop@mL,fsr2l
  6310   003DE8  C019  FFDA         	movff	stop@mL+1,fsr2h
  6311   003DEC  50DF               	movf	indf2,w,c
  6312   003DEE  B4D8               	btfsc	status,2,c
  6313   003DF0  EFFC  F01E         	goto	u5141
  6314   003DF4  EFFE  F01E         	goto	u5140
  6315   003DF8                     u5141:
  6316   003DF8  EF04  F01F         	goto	l4780
  6317   003DFC                     u5140:
  6318   003DFC                     
  6319                           ;MazeRobot.X/dc_motor.c: 119:             mL->power -= 5;
  6320   003DFC  C018  FFD9         	movff	stop@mL,fsr2l
  6321   003E00  C019  FFDA         	movff	stop@mL+1,fsr2h
  6322   003E04  0E05               	movlw	5
  6323   003E06  5EDF               	subwf	indf2,f,c
  6324   003E08                     l4780:
  6325                           
  6326                           ;MazeRobot.X/dc_motor.c: 121:         if ((mR->power) >0){
  6327   003E08  C01A  FFD9         	movff	stop@mR,fsr2l
  6328   003E0C  C01B  FFDA         	movff	stop@mR+1,fsr2h
  6329   003E10  50DF               	movf	indf2,w,c
  6330   003E12  B4D8               	btfsc	status,2,c
  6331   003E14  EF0E  F01F         	goto	u5151
  6332   003E18  EF10  F01F         	goto	u5150
  6333   003E1C                     u5151:
  6334   003E1C  EF16  F01F         	goto	l4784
  6335   003E20                     u5150:
  6336   003E20                     
  6337                           ;MazeRobot.X/dc_motor.c: 122:             mR->power -= 5;
  6338   003E20  C01A  FFD9         	movff	stop@mR,fsr2l
  6339   003E24  C01B  FFDA         	movff	stop@mR+1,fsr2h
  6340   003E28  0E05               	movlw	5
  6341   003E2A  5EDF               	subwf	indf2,f,c
  6342   003E2C                     l4784:
  6343                           
  6344                           ;MazeRobot.X/dc_motor.c: 125:         setMotorPWM(mL);
  6345   003E2C  C018  F012         	movff	stop@mL,setMotorPWM@m
  6346   003E30  C019  F013         	movff	stop@mL+1,setMotorPWM@m+1
  6347   003E34  EC28  F017         	call	_setMotorPWM	;wreg free
  6348   003E38                     
  6349                           ;MazeRobot.X/dc_motor.c: 126:         setMotorPWM(mR);
  6350   003E38  C01A  F012         	movff	stop@mR,setMotorPWM@m
  6351   003E3C  C01B  F013         	movff	stop@mR+1,setMotorPWM@m+1
  6352   003E40  EC28  F017         	call	_setMotorPWM	;wreg free
  6353   003E44                     l4788:
  6354                           
  6355                           ;MazeRobot.X/dc_motor.c: 117:     while ((mL->power)>0 && (mR->power)>0){
  6356   003E44  C018  FFD9         	movff	stop@mL,fsr2l
  6357   003E48  C019  FFDA         	movff	stop@mL+1,fsr2h
  6358   003E4C  50DF               	movf	indf2,w,c
  6359   003E4E  B4D8               	btfsc	status,2,c
  6360   003E50  EF2C  F01F         	goto	u5161
  6361   003E54  EF2E  F01F         	goto	u5160
  6362   003E58                     u5161:
  6363   003E58  EF3A  F01F         	goto	l4792
  6364   003E5C                     u5160:
  6365   003E5C  C01A  FFD9         	movff	stop@mR,fsr2l
  6366   003E60  C01B  FFDA         	movff	stop@mR+1,fsr2h
  6367   003E64  50DF               	movf	indf2,w,c
  6368   003E66  A4D8               	btfss	status,2,c
  6369   003E68  EF38  F01F         	goto	u5171
  6370   003E6C  EF3A  F01F         	goto	u5170
  6371   003E70                     u5171:
  6372   003E70  EFF2  F01E         	goto	l4776
  6373   003E74                     u5170:
  6374   003E74                     l4792:
  6375                           
  6376                           ;MazeRobot.X/dc_motor.c: 128:     _delay((unsigned long)((100)*(64000000/4000.0)));
  6377   003E74  0E09               	movlw	9
  6378   003E76  6E1D               	movwf	(??_stop+1)^0,c
  6379   003E78  0E1E               	movlw	30
  6380   003E7A  6E1C               	movwf	??_stop^0,c
  6381   003E7C  0EE4               	movlw	228
  6382   003E7E                     u7427:
  6383   003E7E  2EE8               	decfsz	wreg,f,c
  6384   003E80  D7FE               	bra	u7427
  6385   003E82  2E1C               	decfsz	??_stop^0,f,c
  6386   003E84  D7FC               	bra	u7427
  6387   003E86  2E1D               	decfsz	(??_stop+1)^0,f,c
  6388   003E88  D7FA               	bra	u7427
  6389   003E8A  D000               	nop2	
  6390   003E8C  0012               	return		;funcret
  6391   003E8E                     __end_of_stop:
  6392                           	callstack 0
  6393                           
  6394 ;; *************** function _reverse *****************
  6395 ;; Defined at:
  6396 ;;		line 155 in file "MazeRobot.X/dc_motor.c"
  6397 ;; Parameters:    Size  Location     Type
  6398 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  6399 ;;		 -> main@motorLeft(9), 
  6400 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  6401 ;;		 -> main@motorRight(9), 
  6402 ;; Auto vars:     Size  Location     Type
  6403 ;;		None
  6404 ;; Return value:  Size  Location     Type
  6405 ;;                  1    wreg      void 
  6406 ;; Registers used:
  6407 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6408 ;; Tracked objects:
  6409 ;;		On entry : 0/0
  6410 ;;		On exit  : 0/0
  6411 ;;		Unchanged: 0/0
  6412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6413 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6415 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6416 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6417 ;;Total ram usage:        5 bytes
  6418 ;; Hardware stack levels used: 1
  6419 ;; Hardware stack levels required when called: 4
  6420 ;; This function calls:
  6421 ;;		_setMotorPWM
  6422 ;; This function is called by:
  6423 ;;		_turnLeft_90
  6424 ;;		_turnRight_90
  6425 ;;		_turn_180
  6426 ;;		_turnRight_135
  6427 ;;		_turnLeft_135
  6428 ;;		_reverseSquareRight
  6429 ;;		_reverseSquareLeft
  6430 ;;		_turnLeft
  6431 ;;		_turnRight
  6432 ;; This function uses a non-reentrant model
  6433 ;;
  6434                           
  6435                           	psect	text29
  6436   003B6E                     __ptext29:
  6437                           	callstack 0
  6438   003B6E                     _reverse:
  6439                           	callstack 24
  6440   003B6E                     
  6441                           ;MazeRobot.X/dc_motor.c: 155: void reverse(DC_motor *mL, DC_motor *mR);MazeRobot.X/dc_mo
      +                          tor.c: 156: {;MazeRobot.X/dc_motor.c: 157:     mL->direction = 0;
  6442   003B6E  EE20 F001          	lfsr	2,1
  6443   003B72  5018               	movf	reverse@mL^0,w,c
  6444   003B74  26D9               	addwf	fsr2l,f,c
  6445   003B76  5019               	movf	(reverse@mL+1)^0,w,c
  6446   003B78  22DA               	addwfc	fsr2h,f,c
  6447   003B7A  0E00               	movlw	0
  6448   003B7C  6EDF               	movwf	indf2,c
  6449                           
  6450                           ;MazeRobot.X/dc_motor.c: 158:     mR->direction = 0;
  6451   003B7E  EE20 F001          	lfsr	2,1
  6452   003B82  501A               	movf	reverse@mR^0,w,c
  6453   003B84  26D9               	addwf	fsr2l,f,c
  6454   003B86  501B               	movf	(reverse@mR+1)^0,w,c
  6455   003B88  22DA               	addwfc	fsr2h,f,c
  6456   003B8A  0E00               	movlw	0
  6457   003B8C  6EDF               	movwf	indf2,c
  6458                           
  6459                           ;MazeRobot.X/dc_motor.c: 160:     mL->brakemode = 1;
  6460   003B8E  EE20 F002          	lfsr	2,2
  6461   003B92  5018               	movf	reverse@mL^0,w,c
  6462   003B94  26D9               	addwf	fsr2l,f,c
  6463   003B96  5019               	movf	(reverse@mL+1)^0,w,c
  6464   003B98  22DA               	addwfc	fsr2h,f,c
  6465   003B9A  0E01               	movlw	1
  6466   003B9C  6EDF               	movwf	indf2,c
  6467                           
  6468                           ;MazeRobot.X/dc_motor.c: 161:     mL->brakemode = 1;
  6469   003B9E  EE20 F002          	lfsr	2,2
  6470   003BA2  5018               	movf	reverse@mL^0,w,c
  6471   003BA4  26D9               	addwf	fsr2l,f,c
  6472   003BA6  5019               	movf	(reverse@mL+1)^0,w,c
  6473   003BA8  22DA               	addwfc	fsr2h,f,c
  6474   003BAA  0E01               	movlw	1
  6475   003BAC  6EDF               	movwf	indf2,c
  6476                           
  6477                           ;MazeRobot.X/dc_motor.c: 163:     while ((mL->power)<25 && (mR->power)<25){
  6478   003BAE  EFFD  F01D         	goto	l4804
  6479   003BB2                     l4796:
  6480                           
  6481                           ;MazeRobot.X/dc_motor.c: 164:         if ((mL->power) < 25){
  6482   003BB2  C018  FFD9         	movff	reverse@mL,fsr2l
  6483   003BB6  C019  FFDA         	movff	reverse@mL+1,fsr2h
  6484   003BBA  0E19               	movlw	25
  6485   003BBC  60DF               	cpfslt	indf2,c
  6486   003BBE  EFE3  F01D         	goto	u5181
  6487   003BC2  EFE5  F01D         	goto	u5180
  6488   003BC6                     u5181:
  6489   003BC6  EFEB  F01D         	goto	l4800
  6490   003BCA                     u5180:
  6491   003BCA                     
  6492                           ;MazeRobot.X/dc_motor.c: 165:             mL->power += 5;
  6493   003BCA  C018  FFD9         	movff	reverse@mL,fsr2l
  6494   003BCE  C019  FFDA         	movff	reverse@mL+1,fsr2h
  6495   003BD2  0E05               	movlw	5
  6496   003BD4  26DF               	addwf	indf2,f,c
  6497   003BD6                     l4800:
  6498                           
  6499                           ;MazeRobot.X/dc_motor.c: 167:         if ((mR->power) <25){
  6500   003BD6  C01A  FFD9         	movff	reverse@mR,fsr2l
  6501   003BDA  C01B  FFDA         	movff	reverse@mR+1,fsr2h
  6502   003BDE  0E19               	movlw	25
  6503   003BE0  60DF               	cpfslt	indf2,c
  6504   003BE2  EFF5  F01D         	goto	u5191
  6505   003BE6  EFF7  F01D         	goto	u5190
  6506   003BEA                     u5191:
  6507   003BEA  EFFD  F01D         	goto	l4804
  6508   003BEE                     u5190:
  6509   003BEE                     
  6510                           ;MazeRobot.X/dc_motor.c: 168:             mR->power += 5;
  6511   003BEE  C01A  FFD9         	movff	reverse@mR,fsr2l
  6512   003BF2  C01B  FFDA         	movff	reverse@mR+1,fsr2h
  6513   003BF6  0E05               	movlw	5
  6514   003BF8  26DF               	addwf	indf2,f,c
  6515   003BFA                     l4804:
  6516                           
  6517                           ;MazeRobot.X/dc_motor.c: 163:     while ((mL->power)<25 && (mR->power)<25){
  6518   003BFA  C018  FFD9         	movff	reverse@mL,fsr2l
  6519   003BFE  C019  FFDA         	movff	reverse@mL+1,fsr2h
  6520   003C02  0E19               	movlw	25
  6521   003C04  60DF               	cpfslt	indf2,c
  6522   003C06  EF07  F01E         	goto	u5201
  6523   003C0A  EF09  F01E         	goto	u5200
  6524   003C0E                     u5201:
  6525   003C0E  EF15  F01E         	goto	l4808
  6526   003C12                     u5200:
  6527   003C12  C01A  FFD9         	movff	reverse@mR,fsr2l
  6528   003C16  C01B  FFDA         	movff	reverse@mR+1,fsr2h
  6529   003C1A  0E18               	movlw	24
  6530   003C1C  64DF               	cpfsgt	indf2,c
  6531   003C1E  EF13  F01E         	goto	u5211
  6532   003C22  EF15  F01E         	goto	u5210
  6533   003C26                     u5211:
  6534   003C26  EFD9  F01D         	goto	l4796
  6535   003C2A                     u5210:
  6536   003C2A                     l4808:
  6537                           
  6538                           ;MazeRobot.X/dc_motor.c: 172:     setMotorPWM(mL);
  6539   003C2A  C018  F012         	movff	reverse@mL,setMotorPWM@m
  6540   003C2E  C019  F013         	movff	reverse@mL+1,setMotorPWM@m+1
  6541   003C32  EC28  F017         	call	_setMotorPWM	;wreg free
  6542                           
  6543                           ;MazeRobot.X/dc_motor.c: 173:     setMotorPWM(mR);
  6544   003C36  C01A  F012         	movff	reverse@mR,setMotorPWM@m
  6545   003C3A  C01B  F013         	movff	reverse@mR+1,setMotorPWM@m+1
  6546   003C3E  EC28  F017         	call	_setMotorPWM	;wreg free
  6547   003C42  0012               	return		;funcret
  6548   003C44                     __end_of_reverse:
  6549                           	callstack 0
  6550                           
  6551 ;; *************** function _setMotorPWM *****************
  6552 ;; Defined at:
  6553 ;;		line 92 in file "MazeRobot.X/dc_motor.c"
  6554 ;; Parameters:    Size  Location     Type
  6555 ;;  m               2   17[COMRAM] PTR struct DC_motor
  6556 ;;		 -> main@motorRight(9), main@motorLeft(9), 
  6557 ;; Auto vars:     Size  Location     Type
  6558 ;;  negDuty         1   22[COMRAM] unsigned char 
  6559 ;;  posDuty         1   21[COMRAM] unsigned char 
  6560 ;; Return value:  Size  Location     Type
  6561 ;;                  1    wreg      void 
  6562 ;; Registers used:
  6563 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6564 ;; Tracked objects:
  6565 ;;		On entry : 0/0
  6566 ;;		On exit  : 0/0
  6567 ;;		Unchanged: 0/0
  6568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6569 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6570 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6571 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6572 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6573 ;;Total ram usage:        6 bytes
  6574 ;; Hardware stack levels used: 1
  6575 ;; Hardware stack levels required when called: 3
  6576 ;; This function calls:
  6577 ;;		___lwdiv
  6578 ;;		___wmul
  6579 ;; This function is called by:
  6580 ;;		_stop
  6581 ;;		_reverse
  6582 ;;		_turnLeft_90
  6583 ;;		_turnRight_90
  6584 ;;		_turn_180
  6585 ;;		_turnRight_135
  6586 ;;		_turnLeft_135
  6587 ;;		_forward
  6588 ;;		_turnLeft
  6589 ;;		_turnRight
  6590 ;; This function uses a non-reentrant model
  6591 ;;
  6592                           
  6593                           	psect	text30
  6594   002E50                     __ptext30:
  6595                           	callstack 0
  6596   002E50                     _setMotorPWM:
  6597                           	callstack 26
  6598   002E50                     
  6599                           ;MazeRobot.X/dc_motor.c: 92: void setMotorPWM(DC_motor *m);MazeRobot.X/dc_motor.c: 93: {
      +                          ;MazeRobot.X/dc_motor.c: 94:     unsigned char posDuty, negDuty;;MazeRobot.X/dc_motor.c:
      +                           96:     if(m->brakemode) {
  6600   002E50  EE20 F002          	lfsr	2,2
  6601   002E54  5012               	movf	setMotorPWM@m^0,w,c
  6602   002E56  26D9               	addwf	fsr2l,f,c
  6603   002E58  5013               	movf	(setMotorPWM@m+1)^0,w,c
  6604   002E5A  22DA               	addwfc	fsr2h,f,c
  6605   002E5C  50DF               	movf	indf2,w,c
  6606   002E5E  B4D8               	btfsc	status,2,c
  6607   002E60  EF34  F017         	goto	u4981
  6608   002E64  EF36  F017         	goto	u4980
  6609   002E68                     u4981:
  6610   002E68  EF6A  F017         	goto	l4678
  6611   002E6C                     u4980:
  6612   002E6C                     
  6613                           ;MazeRobot.X/dc_motor.c: 97:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m
      +                          ->PWMperiod))/100;
  6614   002E6C  C012  FFD9         	movff	setMotorPWM@m,fsr2l
  6615   002E70  C013  FFDA         	movff	setMotorPWM@m+1,fsr2h
  6616   002E74  50DF               	movf	indf2,w,c
  6617   002E76  6E14               	movwf	??_setMotorPWM^0,c
  6618   002E78  5014               	movf	??_setMotorPWM^0,w,c
  6619   002E7A  6E05               	movwf	___wmul@multiplier^0,c
  6620   002E7C  6A06               	clrf	(___wmul@multiplier+1)^0,c
  6621   002E7E  EE20 F003          	lfsr	2,3
  6622   002E82  5012               	movf	setMotorPWM@m^0,w,c
  6623   002E84  26D9               	addwf	fsr2l,f,c
  6624   002E86  5013               	movf	(setMotorPWM@m+1)^0,w,c
  6625   002E88  22DA               	addwfc	fsr2h,f,c
  6626   002E8A  CFDE F007          	movff	postinc2,___wmul@multiplicand
  6627   002E8E  CFDD F008          	movff	postdec2,___wmul@multiplicand+1
  6628   002E92  EC09  F023         	call	___wmul	;wreg free
  6629   002E96  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  6630   002E9A  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  6631   002E9E  0E00               	movlw	0
  6632   002EA0  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  6633   002EA2  0E64               	movlw	100
  6634   002EA4  6E0D               	movwf	___lwdiv@divisor^0,c
  6635   002EA6  EC4E  F020         	call	___lwdiv	;wreg free
  6636   002EAA  EE20 F003          	lfsr	2,3
  6637   002EAE  5012               	movf	setMotorPWM@m^0,w,c
  6638   002EB0  26D9               	addwf	fsr2l,f,c
  6639   002EB2  5013               	movf	(setMotorPWM@m+1)^0,w,c
  6640   002EB4  22DA               	addwfc	fsr2h,f,c
  6641   002EB6  50DF               	movf	indf2,w,c
  6642   002EB8  6E15               	movwf	(??_setMotorPWM+1)^0,c
  6643   002EBA  500B               	movf	?___lwdiv^0,w,c
  6644   002EBC  5C15               	subwf	(??_setMotorPWM+1)^0,w,c
  6645   002EBE  6E16               	movwf	setMotorPWM@posDuty^0,c
  6646   002EC0                     
  6647                           ;MazeRobot.X/dc_motor.c: 98:         negDuty=m->PWMperiod;
  6648   002EC0  EE20 F003          	lfsr	2,3
  6649   002EC4  5012               	movf	setMotorPWM@m^0,w,c
  6650   002EC6  26D9               	addwf	fsr2l,f,c
  6651   002EC8  5013               	movf	(setMotorPWM@m+1)^0,w,c
  6652   002ECA  22DA               	addwfc	fsr2h,f,c
  6653   002ECC  50DF               	movf	indf2,w,c
  6654   002ECE  6E17               	movwf	setMotorPWM@negDuty^0,c
  6655                           
  6656                           ;MazeRobot.X/dc_motor.c: 99:     }
  6657   002ED0  EF8D  F017         	goto	l4682
  6658   002ED4                     l4678:
  6659                           
  6660                           ;MazeRobot.X/dc_motor.c: 101:         posDuty=0;
  6661   002ED4  0E00               	movlw	0
  6662   002ED6  6E16               	movwf	setMotorPWM@posDuty^0,c
  6663   002ED8                     
  6664                           ;MazeRobot.X/dc_motor.c: 102:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  6665   002ED8  C012  FFD9         	movff	setMotorPWM@m,fsr2l
  6666   002EDC  C013  FFDA         	movff	setMotorPWM@m+1,fsr2h
  6667   002EE0  50DF               	movf	indf2,w,c
  6668   002EE2  6E14               	movwf	??_setMotorPWM^0,c
  6669   002EE4  5014               	movf	??_setMotorPWM^0,w,c
  6670   002EE6  6E05               	movwf	___wmul@multiplier^0,c
  6671   002EE8  6A06               	clrf	(___wmul@multiplier+1)^0,c
  6672   002EEA  EE20 F003          	lfsr	2,3
  6673   002EEE  5012               	movf	setMotorPWM@m^0,w,c
  6674   002EF0  26D9               	addwf	fsr2l,f,c
  6675   002EF2  5013               	movf	(setMotorPWM@m+1)^0,w,c
  6676   002EF4  22DA               	addwfc	fsr2h,f,c
  6677   002EF6  CFDE F007          	movff	postinc2,___wmul@multiplicand
  6678   002EFA  CFDD F008          	movff	postdec2,___wmul@multiplicand+1
  6679   002EFE  EC09  F023         	call	___wmul	;wreg free
  6680   002F02  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  6681   002F06  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  6682   002F0A  0E00               	movlw	0
  6683   002F0C  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  6684   002F0E  0E64               	movlw	100
  6685   002F10  6E0D               	movwf	___lwdiv@divisor^0,c
  6686   002F12  EC4E  F020         	call	___lwdiv	;wreg free
  6687   002F16  500B               	movf	?___lwdiv^0,w,c
  6688   002F18  6E17               	movwf	setMotorPWM@negDuty^0,c
  6689   002F1A                     l4682:
  6690                           
  6691                           ;MazeRobot.X/dc_motor.c: 105:     if (m->direction) {
  6692   002F1A  EE20 F001          	lfsr	2,1
  6693   002F1E  5012               	movf	setMotorPWM@m^0,w,c
  6694   002F20  26D9               	addwf	fsr2l,f,c
  6695   002F22  5013               	movf	(setMotorPWM@m+1)^0,w,c
  6696   002F24  22DA               	addwfc	fsr2h,f,c
  6697   002F26  50DF               	movf	indf2,w,c
  6698   002F28  B4D8               	btfsc	status,2,c
  6699   002F2A  EF99  F017         	goto	u4991
  6700   002F2E  EF9B  F017         	goto	u4990
  6701   002F32                     u4991:
  6702   002F32  EFBD  F017         	goto	l4686
  6703   002F36                     u4990:
  6704   002F36                     
  6705                           ;MazeRobot.X/dc_motor.c: 106:         *(m->posDutyHighByte)=posDuty;
  6706   002F36  EE20 F005          	lfsr	2,5
  6707   002F3A  5012               	movf	setMotorPWM@m^0,w,c
  6708   002F3C  26D9               	addwf	fsr2l,f,c
  6709   002F3E  5013               	movf	(setMotorPWM@m+1)^0,w,c
  6710   002F40  22DA               	addwfc	fsr2h,f,c
  6711   002F42  CFDE F014          	movff	postinc2,??_setMotorPWM
  6712   002F46  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  6713   002F4A  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  6714   002F4E  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6715   002F52  C016  FFDF         	movff	setMotorPWM@posDuty,indf2
  6716                           
  6717                           ;MazeRobot.X/dc_motor.c: 107:         *(m->negDutyHighByte)=negDuty;
  6718   002F56  EE20 F007          	lfsr	2,7
  6719   002F5A  5012               	movf	setMotorPWM@m^0,w,c
  6720   002F5C  26D9               	addwf	fsr2l,f,c
  6721   002F5E  5013               	movf	(setMotorPWM@m+1)^0,w,c
  6722   002F60  22DA               	addwfc	fsr2h,f,c
  6723   002F62  CFDE F014          	movff	postinc2,??_setMotorPWM
  6724   002F66  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  6725   002F6A  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  6726   002F6E  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6727   002F72  C017  FFDF         	movff	setMotorPWM@negDuty,indf2
  6728                           
  6729                           ;MazeRobot.X/dc_motor.c: 108:     } else {
  6730   002F76  EFDD  F017         	goto	l174
  6731   002F7A                     l4686:
  6732                           
  6733                           ;MazeRobot.X/dc_motor.c: 109:         *(m->posDutyHighByte)=negDuty;
  6734   002F7A  EE20 F005          	lfsr	2,5
  6735   002F7E  5012               	movf	setMotorPWM@m^0,w,c
  6736   002F80  26D9               	addwf	fsr2l,f,c
  6737   002F82  5013               	movf	(setMotorPWM@m+1)^0,w,c
  6738   002F84  22DA               	addwfc	fsr2h,f,c
  6739   002F86  CFDE F014          	movff	postinc2,??_setMotorPWM
  6740   002F8A  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  6741   002F8E  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  6742   002F92  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6743   002F96  C017  FFDF         	movff	setMotorPWM@negDuty,indf2
  6744                           
  6745                           ;MazeRobot.X/dc_motor.c: 110:         *(m->negDutyHighByte)=posDuty;
  6746   002F9A  EE20 F007          	lfsr	2,7
  6747   002F9E  5012               	movf	setMotorPWM@m^0,w,c
  6748   002FA0  26D9               	addwf	fsr2l,f,c
  6749   002FA2  5013               	movf	(setMotorPWM@m+1)^0,w,c
  6750   002FA4  22DA               	addwfc	fsr2h,f,c
  6751   002FA6  CFDE F014          	movff	postinc2,??_setMotorPWM
  6752   002FAA  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  6753   002FAE  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  6754   002FB2  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6755   002FB6  C016  FFDF         	movff	setMotorPWM@posDuty,indf2
  6756   002FBA                     l174:
  6757   002FBA  0012               	return		;funcret
  6758   002FBC                     __end_of_setMotorPWM:
  6759                           	callstack 0
  6760                           
  6761 ;; *************** function ___wmul *****************
  6762 ;; Defined at:
  6763 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  6764 ;; Parameters:    Size  Location     Type
  6765 ;;  multiplier      2    4[COMRAM] unsigned int 
  6766 ;;  multiplicand    2    6[COMRAM] unsigned int 
  6767 ;; Auto vars:     Size  Location     Type
  6768 ;;  product         2    8[COMRAM] unsigned int 
  6769 ;; Return value:  Size  Location     Type
  6770 ;;                  2    4[COMRAM] unsigned int 
  6771 ;; Registers used:
  6772 ;;		wreg, status,2, status,0, prodl, prodh
  6773 ;; Tracked objects:
  6774 ;;		On entry : 0/0
  6775 ;;		On exit  : 0/0
  6776 ;;		Unchanged: 0/0
  6777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6778 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6779 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6781 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6782 ;;Total ram usage:        6 bytes
  6783 ;; Hardware stack levels used: 1
  6784 ;; Hardware stack levels required when called: 2
  6785 ;; This function calls:
  6786 ;;		Nothing
  6787 ;; This function is called by:
  6788 ;;		_setMotorPWM
  6789 ;;		_turnLeft_135
  6790 ;; This function uses a non-reentrant model
  6791 ;;
  6792                           
  6793                           	psect	text31
  6794   004612                     __ptext31:
  6795                           	callstack 0
  6796   004612                     ___wmul:
  6797                           	callstack 26
  6798   004612  5005               	movf	___wmul@multiplier^0,w,c
  6799   004614  0207               	mulwf	___wmul@multiplicand^0,c
  6800   004616  CFF3 F009          	movff	prodl,___wmul@product
  6801   00461A  CFF4 F00A          	movff	prodh,___wmul@product+1
  6802   00461E  5005               	movf	___wmul@multiplier^0,w,c
  6803   004620  0208               	mulwf	(___wmul@multiplicand+1)^0,c
  6804   004622  50F3               	movf	243,w,c
  6805   004624  260A               	addwf	(___wmul@product+1)^0,f,c
  6806   004626  5006               	movf	(___wmul@multiplier+1)^0,w,c
  6807   004628  0207               	mulwf	___wmul@multiplicand^0,c
  6808   00462A  50F3               	movf	243,w,c
  6809   00462C  260A               	addwf	(___wmul@product+1)^0,f,c
  6810   00462E  C009  F005         	movff	___wmul@product,?___wmul
  6811   004632  C00A  F006         	movff	___wmul@product+1,?___wmul+1
  6812   004636  0012               	return		;funcret
  6813   004638                     __end_of___wmul:
  6814                           	callstack 0
  6815                           
  6816 ;; *************** function ___lwdiv *****************
  6817 ;; Defined at:
  6818 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  6819 ;; Parameters:    Size  Location     Type
  6820 ;;  dividend        2   10[COMRAM] unsigned int 
  6821 ;;  divisor         2   12[COMRAM] unsigned int 
  6822 ;; Auto vars:     Size  Location     Type
  6823 ;;  quotient        2   15[COMRAM] unsigned int 
  6824 ;;  counter         1   14[COMRAM] unsigned char 
  6825 ;; Return value:  Size  Location     Type
  6826 ;;                  2   10[COMRAM] unsigned int 
  6827 ;; Registers used:
  6828 ;;		wreg, status,2, status,0
  6829 ;; Tracked objects:
  6830 ;;		On entry : 0/0
  6831 ;;		On exit  : 0/0
  6832 ;;		Unchanged: 0/0
  6833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6834 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6835 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6837 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6838 ;;Total ram usage:        7 bytes
  6839 ;; Hardware stack levels used: 1
  6840 ;; Hardware stack levels required when called: 2
  6841 ;; This function calls:
  6842 ;;		Nothing
  6843 ;; This function is called by:
  6844 ;;		_setMotorPWM
  6845 ;; This function uses a non-reentrant model
  6846 ;;
  6847                           
  6848                           	psect	text32
  6849   00409C                     __ptext32:
  6850                           	callstack 0
  6851   00409C                     ___lwdiv:
  6852                           	callstack 26
  6853   00409C  0E00               	movlw	0
  6854   00409E  6E11               	movwf	(___lwdiv@quotient+1)^0,c
  6855   0040A0  0E00               	movlw	0
  6856   0040A2  6E10               	movwf	___lwdiv@quotient^0,c
  6857   0040A4  500D               	movf	___lwdiv@divisor^0,w,c
  6858   0040A6  100E               	iorwf	(___lwdiv@divisor+1)^0,w,c
  6859   0040A8  B4D8               	btfsc	status,2,c
  6860   0040AA  EF59  F020         	goto	u4921
  6861   0040AE  EF5B  F020         	goto	u4920
  6862   0040B2                     u4921:
  6863   0040B2  EF83  F020         	goto	l1003
  6864   0040B6                     u4920:
  6865   0040B6  0E01               	movlw	1
  6866   0040B8  6E0F               	movwf	___lwdiv@counter^0,c
  6867   0040BA  EF63  F020         	goto	l4640
  6868   0040BE                     l4638:
  6869   0040BE  90D8               	bcf	status,0,c
  6870   0040C0  360D               	rlcf	___lwdiv@divisor^0,f,c
  6871   0040C2  360E               	rlcf	(___lwdiv@divisor+1)^0,f,c
  6872   0040C4  2A0F               	incf	___lwdiv@counter^0,f,c
  6873   0040C6                     l4640:
  6874   0040C6  AE0E               	btfss	(___lwdiv@divisor+1)^0,7,c
  6875   0040C8  EF68  F020         	goto	u4931
  6876   0040CC  EF6A  F020         	goto	u4930
  6877   0040D0                     u4931:
  6878   0040D0  EF5F  F020         	goto	l4638
  6879   0040D4                     u4930:
  6880   0040D4                     l4642:
  6881   0040D4  90D8               	bcf	status,0,c
  6882   0040D6  3610               	rlcf	___lwdiv@quotient^0,f,c
  6883   0040D8  3611               	rlcf	(___lwdiv@quotient+1)^0,f,c
  6884   0040DA  500D               	movf	___lwdiv@divisor^0,w,c
  6885   0040DC  5C0B               	subwf	___lwdiv@dividend^0,w,c
  6886   0040DE  500E               	movf	(___lwdiv@divisor+1)^0,w,c
  6887   0040E0  580C               	subwfb	(___lwdiv@dividend+1)^0,w,c
  6888   0040E2  A0D8               	btfss	status,0,c
  6889   0040E4  EF76  F020         	goto	u4941
  6890   0040E8  EF78  F020         	goto	u4940
  6891   0040EC                     u4941:
  6892   0040EC  EF7D  F020         	goto	l4650
  6893   0040F0                     u4940:
  6894   0040F0  500D               	movf	___lwdiv@divisor^0,w,c
  6895   0040F2  5E0B               	subwf	___lwdiv@dividend^0,f,c
  6896   0040F4  500E               	movf	(___lwdiv@divisor+1)^0,w,c
  6897   0040F6  5A0C               	subwfb	(___lwdiv@dividend+1)^0,f,c
  6898   0040F8  8010               	bsf	___lwdiv@quotient^0,0,c
  6899   0040FA                     l4650:
  6900   0040FA  90D8               	bcf	status,0,c
  6901   0040FC  320E               	rrcf	(___lwdiv@divisor+1)^0,f,c
  6902   0040FE  320D               	rrcf	___lwdiv@divisor^0,f,c
  6903   004100  2E0F               	decfsz	___lwdiv@counter^0,f,c
  6904   004102  EF6A  F020         	goto	l4642
  6905   004106                     l1003:
  6906   004106  C010  F00B         	movff	___lwdiv@quotient,?___lwdiv
  6907   00410A  C011  F00C         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6908   00410E  0012               	return		;funcret
  6909   004110                     __end_of___lwdiv:
  6910                           	callstack 0
  6911                           
  6912 ;; *************** function ___xxtofl *****************
  6913 ;; Defined at:
  6914 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\xxtofl.c"
  6915 ;; Parameters:    Size  Location     Type
  6916 ;;  sign            1    wreg     unsigned char 
  6917 ;;  val             4    4[COMRAM] long 
  6918 ;; Auto vars:     Size  Location     Type
  6919 ;;  sign            1   12[COMRAM] unsigned char 
  6920 ;;  arg             4   14[COMRAM] unsigned long 
  6921 ;;  exp             1   13[COMRAM] unsigned char 
  6922 ;; Return value:  Size  Location     Type
  6923 ;;                  4    4[COMRAM] unsigned char 
  6924 ;; Registers used:
  6925 ;;		wreg, status,2, status,0
  6926 ;; Tracked objects:
  6927 ;;		On entry : 0/0
  6928 ;;		On exit  : 0/0
  6929 ;;		Unchanged: 0/0
  6930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6931 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6932 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6933 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6934 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6935 ;;Total ram usage:       14 bytes
  6936 ;; Hardware stack levels used: 1
  6937 ;; Hardware stack levels required when called: 2
  6938 ;; This function calls:
  6939 ;;		Nothing
  6940 ;; This function is called by:
  6941 ;;		_colorDetect
  6942 ;;		_turnLeft_90
  6943 ;;		_turnRight_90
  6944 ;;		_turn_180
  6945 ;;		_turnRight_135
  6946 ;;		_turnLeft_135
  6947 ;;		_main
  6948 ;;		_turnLeft
  6949 ;;		_turnRight
  6950 ;; This function uses a non-reentrant model
  6951 ;;
  6952                           
  6953                           	psect	text33
  6954   002B14                     __ptext33:
  6955                           	callstack 0
  6956   002B14                     ___xxtofl:
  6957                           	callstack 27
  6958                           
  6959                           ;incstack = 0
  6960                           ;___xxtofl@sign stored from wreg
  6961   002B14  6E0D               	movwf	___xxtofl@sign^0,c
  6962   002B16  500D               	movf	___xxtofl@sign^0,w,c
  6963   002B18  B4D8               	btfsc	status,2,c
  6964   002B1A  EF91  F015         	goto	u6271
  6965   002B1E  EF93  F015         	goto	u6270
  6966   002B22                     u6271:
  6967   002B22  EFB5  F015         	goto	l1167
  6968   002B26                     u6270:
  6969   002B26  BE08               	btfsc	(___xxtofl@val+3)^0,7,c
  6970   002B28  EF9A  F015         	goto	u6280
  6971   002B2C  EF98  F015         	goto	u6281
  6972   002B30                     u6281:
  6973   002B30  EFB5  F015         	goto	l1167
  6974   002B34                     u6280:
  6975   002B34  C005  F009         	movff	___xxtofl@val,??___xxtofl
  6976   002B38  C006  F00A         	movff	___xxtofl@val+1,??___xxtofl+1
  6977   002B3C  C007  F00B         	movff	___xxtofl@val+2,??___xxtofl+2
  6978   002B40  C008  F00C         	movff	___xxtofl@val+3,??___xxtofl+3
  6979   002B44  1E09               	comf	??___xxtofl^0,f,c
  6980   002B46  1E0A               	comf	(??___xxtofl+1)^0,f,c
  6981   002B48  1E0B               	comf	(??___xxtofl+2)^0,f,c
  6982   002B4A  1E0C               	comf	(??___xxtofl+3)^0,f,c
  6983   002B4C  2A09               	incf	??___xxtofl^0,f,c
  6984   002B4E  0E00               	movlw	0
  6985   002B50  220A               	addwfc	(??___xxtofl+1)^0,f,c
  6986   002B52  220B               	addwfc	(??___xxtofl+2)^0,f,c
  6987   002B54  220C               	addwfc	(??___xxtofl+3)^0,f,c
  6988   002B56  C009  F00F         	movff	??___xxtofl,___xxtofl@arg
  6989   002B5A  C00A  F010         	movff	??___xxtofl+1,___xxtofl@arg+1
  6990   002B5E  C00B  F011         	movff	??___xxtofl+2,___xxtofl@arg+2
  6991   002B62  C00C  F012         	movff	??___xxtofl+3,___xxtofl@arg+3
  6992   002B66  EFBD  F015         	goto	l5600
  6993   002B6A                     l1167:
  6994   002B6A  C005  F00F         	movff	___xxtofl@val,___xxtofl@arg
  6995   002B6E  C006  F010         	movff	___xxtofl@val+1,___xxtofl@arg+1
  6996   002B72  C007  F011         	movff	___xxtofl@val+2,___xxtofl@arg+2
  6997   002B76  C008  F012         	movff	___xxtofl@val+3,___xxtofl@arg+3
  6998   002B7A                     l5600:
  6999   002B7A  5005               	movf	___xxtofl@val^0,w,c
  7000   002B7C  1006               	iorwf	(___xxtofl@val+1)^0,w,c
  7001   002B7E  1007               	iorwf	(___xxtofl@val+2)^0,w,c
  7002   002B80  1008               	iorwf	(___xxtofl@val+3)^0,w,c
  7003   002B82  A4D8               	btfss	status,2,c
  7004   002B84  EFC6  F015         	goto	u6291
  7005   002B88  EFC8  F015         	goto	u6290
  7006   002B8C                     u6291:
  7007   002B8C  EFD2  F015         	goto	l5606
  7008   002B90                     u6290:
  7009   002B90  0E00               	movlw	0
  7010   002B92  6E05               	movwf	?___xxtofl^0,c
  7011   002B94  0E00               	movlw	0
  7012   002B96  6E06               	movwf	(?___xxtofl+1)^0,c
  7013   002B98  0E00               	movlw	0
  7014   002B9A  6E07               	movwf	(?___xxtofl+2)^0,c
  7015   002B9C  0E00               	movlw	0
  7016   002B9E  6E08               	movwf	(?___xxtofl+3)^0,c
  7017   002BA0  EF63  F016         	goto	l1170
  7018   002BA4                     l5606:
  7019   002BA4  0E96               	movlw	150
  7020   002BA6  6E0E               	movwf	___xxtofl@exp^0,c
  7021   002BA8  EFDC  F015         	goto	l5610
  7022   002BAC                     l5608:
  7023   002BAC  2A0E               	incf	___xxtofl@exp^0,f,c
  7024   002BAE  90D8               	bcf	status,0,c
  7025   002BB0  3212               	rrcf	(___xxtofl@arg+3)^0,f,c
  7026   002BB2  3211               	rrcf	(___xxtofl@arg+2)^0,f,c
  7027   002BB4  3210               	rrcf	(___xxtofl@arg+1)^0,f,c
  7028   002BB6  320F               	rrcf	___xxtofl@arg^0,f,c
  7029   002BB8                     l5610:
  7030   002BB8  0E00               	movlw	0
  7031   002BBA  140F               	andwf	___xxtofl@arg^0,w,c
  7032   002BBC  6E09               	movwf	??___xxtofl^0,c
  7033   002BBE  0E00               	movlw	0
  7034   002BC0  1410               	andwf	(___xxtofl@arg+1)^0,w,c
  7035   002BC2  6E0A               	movwf	(??___xxtofl+1)^0,c
  7036   002BC4  0E00               	movlw	0
  7037   002BC6  1411               	andwf	(___xxtofl@arg+2)^0,w,c
  7038   002BC8  6E0B               	movwf	(??___xxtofl+2)^0,c
  7039   002BCA  0EFE               	movlw	254
  7040   002BCC  1412               	andwf	(___xxtofl@arg+3)^0,w,c
  7041   002BCE  6E0C               	movwf	(??___xxtofl+3)^0,c
  7042   002BD0  5009               	movf	??___xxtofl^0,w,c
  7043   002BD2  100A               	iorwf	(??___xxtofl+1)^0,w,c
  7044   002BD4  100B               	iorwf	(??___xxtofl+2)^0,w,c
  7045   002BD6  100C               	iorwf	(??___xxtofl+3)^0,w,c
  7046   002BD8  A4D8               	btfss	status,2,c
  7047   002BDA  EFF1  F015         	goto	u6301
  7048   002BDE  EFF3  F015         	goto	u6300
  7049   002BE2                     u6301:
  7050   002BE2  EFD6  F015         	goto	l5608
  7051   002BE6                     u6300:
  7052   002BE6  EF01  F016         	goto	l1174
  7053   002BEA                     l5612:
  7054   002BEA  2A0E               	incf	___xxtofl@exp^0,f,c
  7055   002BEC  0E01               	movlw	1
  7056   002BEE  260F               	addwf	___xxtofl@arg^0,f,c
  7057   002BF0  0E00               	movlw	0
  7058   002BF2  2210               	addwfc	(___xxtofl@arg+1)^0,f,c
  7059   002BF4  2211               	addwfc	(___xxtofl@arg+2)^0,f,c
  7060   002BF6  2212               	addwfc	(___xxtofl@arg+3)^0,f,c
  7061   002BF8  90D8               	bcf	status,0,c
  7062   002BFA  3212               	rrcf	(___xxtofl@arg+3)^0,f,c
  7063   002BFC  3211               	rrcf	(___xxtofl@arg+2)^0,f,c
  7064   002BFE  3210               	rrcf	(___xxtofl@arg+1)^0,f,c
  7065   002C00  320F               	rrcf	___xxtofl@arg^0,f,c
  7066   002C02                     l1174:
  7067   002C02  0E00               	movlw	0
  7068   002C04  140F               	andwf	___xxtofl@arg^0,w,c
  7069   002C06  6E09               	movwf	??___xxtofl^0,c
  7070   002C08  0E00               	movlw	0
  7071   002C0A  1410               	andwf	(___xxtofl@arg+1)^0,w,c
  7072   002C0C  6E0A               	movwf	(??___xxtofl+1)^0,c
  7073   002C0E  0E00               	movlw	0
  7074   002C10  1411               	andwf	(___xxtofl@arg+2)^0,w,c
  7075   002C12  6E0B               	movwf	(??___xxtofl+2)^0,c
  7076   002C14  0EFF               	movlw	255
  7077   002C16  1412               	andwf	(___xxtofl@arg+3)^0,w,c
  7078   002C18  6E0C               	movwf	(??___xxtofl+3)^0,c
  7079   002C1A  5009               	movf	??___xxtofl^0,w,c
  7080   002C1C  100A               	iorwf	(??___xxtofl+1)^0,w,c
  7081   002C1E  100B               	iorwf	(??___xxtofl+2)^0,w,c
  7082   002C20  100C               	iorwf	(??___xxtofl+3)^0,w,c
  7083   002C22  A4D8               	btfss	status,2,c
  7084   002C24  EF16  F016         	goto	u6311
  7085   002C28  EF18  F016         	goto	u6310
  7086   002C2C                     u6311:
  7087   002C2C  EFF5  F015         	goto	l5612
  7088   002C30                     u6310:
  7089   002C30  EF20  F016         	goto	l5620
  7090   002C34                     l5618:
  7091   002C34  060E               	decf	___xxtofl@exp^0,f,c
  7092   002C36  90D8               	bcf	status,0,c
  7093   002C38  360F               	rlcf	___xxtofl@arg^0,f,c
  7094   002C3A  3610               	rlcf	(___xxtofl@arg+1)^0,f,c
  7095   002C3C  3611               	rlcf	(___xxtofl@arg+2)^0,f,c
  7096   002C3E  3612               	rlcf	(___xxtofl@arg+3)^0,f,c
  7097   002C40                     l5620:
  7098   002C40  BE11               	btfsc	(___xxtofl@arg+2)^0,7,c
  7099   002C42  EF25  F016         	goto	u6321
  7100   002C46  EF27  F016         	goto	u6320
  7101   002C4A                     u6321:
  7102   002C4A  EF2F  F016         	goto	l1181
  7103   002C4E                     u6320:
  7104   002C4E  0E02               	movlw	2
  7105   002C50  600E               	cpfslt	___xxtofl@exp^0,c
  7106   002C52  EF2D  F016         	goto	u6331
  7107   002C56  EF2F  F016         	goto	u6330
  7108   002C5A                     u6331:
  7109   002C5A  EF1A  F016         	goto	l5618
  7110   002C5E                     u6330:
  7111   002C5E                     l1181:
  7112   002C5E  B00E               	btfsc	___xxtofl@exp^0,0,c
  7113   002C60  EF34  F016         	goto	u6341
  7114   002C64  EF36  F016         	goto	u6340
  7115   002C68                     u6341:
  7116   002C68  EF37  F016         	goto	l5626
  7117   002C6C                     u6340:
  7118   002C6C  9E11               	bcf	(___xxtofl@arg+2)^0,7,c
  7119   002C6E                     l5626:
  7120   002C6E  90D8               	bcf	status,0,c
  7121   002C70  320E               	rrcf	___xxtofl@exp^0,f,c
  7122   002C72  C00E  F009         	movff	___xxtofl@exp,??___xxtofl
  7123   002C76  6A0A               	clrf	(??___xxtofl+1)^0,c
  7124   002C78  6A0B               	clrf	(??___xxtofl+2)^0,c
  7125   002C7A  6A0C               	clrf	(??___xxtofl+3)^0,c
  7126   002C7C  C009  F00C         	movff	??___xxtofl,??___xxtofl+3
  7127   002C80  6A0B               	clrf	(??___xxtofl+2)^0,c
  7128   002C82  6A0A               	clrf	(??___xxtofl+1)^0,c
  7129   002C84  6A09               	clrf	??___xxtofl^0,c
  7130   002C86  5009               	movf	??___xxtofl^0,w,c
  7131   002C88  120F               	iorwf	___xxtofl@arg^0,f,c
  7132   002C8A  500A               	movf	(??___xxtofl+1)^0,w,c
  7133   002C8C  1210               	iorwf	(___xxtofl@arg+1)^0,f,c
  7134   002C8E  500B               	movf	(??___xxtofl+2)^0,w,c
  7135   002C90  1211               	iorwf	(___xxtofl@arg+2)^0,f,c
  7136   002C92  500C               	movf	(??___xxtofl+3)^0,w,c
  7137   002C94  1212               	iorwf	(___xxtofl@arg+3)^0,f,c
  7138   002C96  500D               	movf	___xxtofl@sign^0,w,c
  7139   002C98  B4D8               	btfsc	status,2,c
  7140   002C9A  EF51  F016         	goto	u6351
  7141   002C9E  EF53  F016         	goto	u6350
  7142   002CA2                     u6351:
  7143   002CA2  EF5B  F016         	goto	l5636
  7144   002CA6                     u6350:
  7145   002CA6  BE08               	btfsc	(___xxtofl@val+3)^0,7,c
  7146   002CA8  EF5A  F016         	goto	u6360
  7147   002CAC  EF58  F016         	goto	u6361
  7148   002CB0                     u6361:
  7149   002CB0  EF5B  F016         	goto	l5636
  7150   002CB4                     u6360:
  7151   002CB4  8E12               	bsf	(___xxtofl@arg+3)^0,7,c
  7152   002CB6                     l5636:
  7153   002CB6  C00F  F005         	movff	___xxtofl@arg,?___xxtofl
  7154   002CBA  C010  F006         	movff	___xxtofl@arg+1,?___xxtofl+1
  7155   002CBE  C011  F007         	movff	___xxtofl@arg+2,?___xxtofl+2
  7156   002CC2  C012  F008         	movff	___xxtofl@arg+3,?___xxtofl+3
  7157   002CC6                     l1170:
  7158   002CC6  0012               	return		;funcret
  7159   002CC8                     __end_of___xxtofl:
  7160                           	callstack 0
  7161                           
  7162 ;; *************** function ___flsub *****************
  7163 ;; Defined at:
  7164 ;;		line 245 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\sprcadd.c"
  7165 ;; Parameters:    Size  Location     Type
  7166 ;;  b               4   20[COMRAM] unsigned char 
  7167 ;;  a               4   24[COMRAM] unsigned char 
  7168 ;; Auto vars:     Size  Location     Type
  7169 ;;		None
  7170 ;; Return value:  Size  Location     Type
  7171 ;;                  4   20[COMRAM] unsigned char 
  7172 ;; Registers used:
  7173 ;;		wreg, status,2, status,0, cstack
  7174 ;; Tracked objects:
  7175 ;;		On entry : 0/0
  7176 ;;		On exit  : 0/0
  7177 ;;		Unchanged: 0/0
  7178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7179 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7182 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7183 ;;Total ram usage:        8 bytes
  7184 ;; Hardware stack levels used: 1
  7185 ;; Hardware stack levels required when called: 3
  7186 ;; This function calls:
  7187 ;;		___fladd
  7188 ;; This function is called by:
  7189 ;;		_colorDetect
  7190 ;; This function uses a non-reentrant model
  7191 ;;
  7192                           
  7193                           	psect	text34
  7194   0043A2                     __ptext34:
  7195                           	callstack 0
  7196   0043A2                     ___flsub:
  7197                           	callstack 26
  7198   0043A2  0E00               	movlw	0
  7199   0043A4  1A19               	xorwf	___flsub@a^0,f,c
  7200   0043A6  0E00               	movlw	0
  7201   0043A8  1A1A               	xorwf	(___flsub@a+1)^0,f,c
  7202   0043AA  0E00               	movlw	0
  7203   0043AC  1A1B               	xorwf	(___flsub@a+2)^0,f,c
  7204   0043AE  0E80               	movlw	128
  7205   0043B0  1A1C               	xorwf	(___flsub@a+3)^0,f,c
  7206   0043B2  C015  F005         	movff	___flsub@b,___fladd@b
  7207   0043B6  C016  F006         	movff	___flsub@b+1,___fladd@b+1
  7208   0043BA  C017  F007         	movff	___flsub@b+2,___fladd@b+2
  7209   0043BE  C018  F008         	movff	___flsub@b+3,___fladd@b+3
  7210   0043C2  C019  F009         	movff	___flsub@a,___fladd@a
  7211   0043C6  C01A  F00A         	movff	___flsub@a+1,___fladd@a+1
  7212   0043CA  C01B  F00B         	movff	___flsub@a+2,___fladd@a+2
  7213   0043CE  C01C  F00C         	movff	___flsub@a+3,___fladd@a+3
  7214   0043D2  EC12  F00D         	call	___fladd	;wreg free
  7215   0043D6  C005  F015         	movff	?___fladd,?___flsub
  7216   0043DA  C006  F016         	movff	?___fladd+1,?___flsub+1
  7217   0043DE  C007  F017         	movff	?___fladd+2,?___flsub+2
  7218   0043E2  C008  F018         	movff	?___fladd+3,?___flsub+3
  7219   0043E6  0012               	return		;funcret
  7220   0043E8                     __end_of___flsub:
  7221                           	callstack 0
  7222                           
  7223 ;; *************** function ___fladd *****************
  7224 ;; Defined at:
  7225 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\sprcadd.c"
  7226 ;; Parameters:    Size  Location     Type
  7227 ;;  b               4    4[COMRAM] unsigned char 
  7228 ;;  a               4    8[COMRAM] unsigned char 
  7229 ;; Auto vars:     Size  Location     Type
  7230 ;;  grs             1   19[COMRAM] unsigned char 
  7231 ;;  bexp            1   18[COMRAM] unsigned char 
  7232 ;;  aexp            1   17[COMRAM] unsigned char 
  7233 ;;  signs           1   16[COMRAM] unsigned char 
  7234 ;; Return value:  Size  Location     Type
  7235 ;;                  4    4[COMRAM] unsigned char 
  7236 ;; Registers used:
  7237 ;;		wreg, status,2, status,0
  7238 ;; Tracked objects:
  7239 ;;		On entry : 0/0
  7240 ;;		On exit  : 0/0
  7241 ;;		Unchanged: 0/0
  7242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7243 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7244 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7245 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7246 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7247 ;;Total ram usage:       16 bytes
  7248 ;; Hardware stack levels used: 1
  7249 ;; Hardware stack levels required when called: 2
  7250 ;; This function calls:
  7251 ;;		Nothing
  7252 ;; This function is called by:
  7253 ;;		___flsub
  7254 ;; This function uses a non-reentrant model
  7255 ;;
  7256                           
  7257                           	psect	text35
  7258   001A24                     __ptext35:
  7259                           	callstack 0
  7260   001A24                     ___fladd:
  7261                           	callstack 26
  7262   001A24  5008               	movf	(___fladd@b+3)^0,w,c
  7263   001A26  0B80               	andlw	128
  7264   001A28  6E11               	movwf	___fladd@signs^0,c
  7265   001A2A  5008               	movf	(___fladd@b+3)^0,w,c
  7266   001A2C  2408               	addwf	(___fladd@b+3)^0,w,c
  7267   001A2E  6E13               	movwf	___fladd@bexp^0,c
  7268   001A30  AE07               	btfss	(___fladd@b+2)^0,7,c
  7269   001A32  EF1D  F00D         	goto	u5321
  7270   001A36  EF1F  F00D         	goto	u5320
  7271   001A3A                     u5321:
  7272   001A3A  EF20  F00D         	goto	l4942
  7273   001A3E                     u5320:
  7274   001A3E  8013               	bsf	___fladd@bexp^0,0,c
  7275   001A40                     l4942:
  7276   001A40  5013               	movf	___fladd@bexp^0,w,c
  7277   001A42  B4D8               	btfsc	status,2,c
  7278   001A44  EF26  F00D         	goto	u5331
  7279   001A48  EF28  F00D         	goto	u5330
  7280   001A4C                     u5331:
  7281   001A4C  EF3D  F00D         	goto	l4952
  7282   001A50                     u5330:
  7283   001A50  2813               	incf	___fladd@bexp^0,w,c
  7284   001A52  A4D8               	btfss	status,2,c
  7285   001A54  EF2E  F00D         	goto	u5341
  7286   001A58  EF30  F00D         	goto	u5340
  7287   001A5C                     u5341:
  7288   001A5C  EF38  F00D         	goto	l4948
  7289   001A60                     u5340:
  7290   001A60  0E00               	movlw	0
  7291   001A62  6E05               	movwf	___fladd@b^0,c
  7292   001A64  0E00               	movlw	0
  7293   001A66  6E06               	movwf	(___fladd@b+1)^0,c
  7294   001A68  0E00               	movlw	0
  7295   001A6A  6E07               	movwf	(___fladd@b+2)^0,c
  7296   001A6C  0E00               	movlw	0
  7297   001A6E  6E08               	movwf	(___fladd@b+3)^0,c
  7298   001A70                     l4948:
  7299   001A70  8E07               	bsf	(___fladd@b+2)^0,7,c
  7300   001A72  0E00               	movlw	0
  7301   001A74  6E08               	movwf	(___fladd@b+3)^0,c
  7302   001A76  EF45  F00D         	goto	l4954
  7303   001A7A                     l4952:
  7304   001A7A  0E00               	movlw	0
  7305   001A7C  6E05               	movwf	___fladd@b^0,c
  7306   001A7E  0E00               	movlw	0
  7307   001A80  6E06               	movwf	(___fladd@b+1)^0,c
  7308   001A82  0E00               	movlw	0
  7309   001A84  6E07               	movwf	(___fladd@b+2)^0,c
  7310   001A86  0E00               	movlw	0
  7311   001A88  6E08               	movwf	(___fladd@b+3)^0,c
  7312   001A8A                     l4954:
  7313   001A8A  500C               	movf	(___fladd@a+3)^0,w,c
  7314   001A8C  0B80               	andlw	128
  7315   001A8E  6E12               	movwf	___fladd@aexp^0,c
  7316   001A90  5011               	movf	___fladd@signs^0,w,c
  7317   001A92  1812               	xorwf	___fladd@aexp^0,w,c
  7318   001A94  B4D8               	btfsc	status,2,c
  7319   001A96  EF4F  F00D         	goto	u5351
  7320   001A9A  EF51  F00D         	goto	u5350
  7321   001A9E                     u5351:
  7322   001A9E  EF52  F00D         	goto	l4960
  7323   001AA2                     u5350:
  7324   001AA2  8C11               	bsf	___fladd@signs^0,6,c
  7325   001AA4                     l4960:
  7326   001AA4  500C               	movf	(___fladd@a+3)^0,w,c
  7327   001AA6  240C               	addwf	(___fladd@a+3)^0,w,c
  7328   001AA8  6E12               	movwf	___fladd@aexp^0,c
  7329   001AAA  AE0B               	btfss	(___fladd@a+2)^0,7,c
  7330   001AAC  EF5A  F00D         	goto	u5361
  7331   001AB0  EF5C  F00D         	goto	u5360
  7332   001AB4                     u5361:
  7333   001AB4  EF5D  F00D         	goto	l4966
  7334   001AB8                     u5360:
  7335   001AB8  8012               	bsf	___fladd@aexp^0,0,c
  7336   001ABA                     l4966:
  7337   001ABA  5012               	movf	___fladd@aexp^0,w,c
  7338   001ABC  B4D8               	btfsc	status,2,c
  7339   001ABE  EF63  F00D         	goto	u5371
  7340   001AC2  EF65  F00D         	goto	u5370
  7341   001AC6                     u5371:
  7342   001AC6  EF7A  F00D         	goto	l4976
  7343   001ACA                     u5370:
  7344   001ACA  2812               	incf	___fladd@aexp^0,w,c
  7345   001ACC  A4D8               	btfss	status,2,c
  7346   001ACE  EF6B  F00D         	goto	u5381
  7347   001AD2  EF6D  F00D         	goto	u5380
  7348   001AD6                     u5381:
  7349   001AD6  EF75  F00D         	goto	l4972
  7350   001ADA                     u5380:
  7351   001ADA  0E00               	movlw	0
  7352   001ADC  6E09               	movwf	___fladd@a^0,c
  7353   001ADE  0E00               	movlw	0
  7354   001AE0  6E0A               	movwf	(___fladd@a+1)^0,c
  7355   001AE2  0E00               	movlw	0
  7356   001AE4  6E0B               	movwf	(___fladd@a+2)^0,c
  7357   001AE6  0E00               	movlw	0
  7358   001AE8  6E0C               	movwf	(___fladd@a+3)^0,c
  7359   001AEA                     l4972:
  7360   001AEA  8E0B               	bsf	(___fladd@a+2)^0,7,c
  7361   001AEC  0E00               	movlw	0
  7362   001AEE  6E0C               	movwf	(___fladd@a+3)^0,c
  7363   001AF0  EF82  F00D         	goto	l4978
  7364   001AF4                     l4976:
  7365   001AF4  0E00               	movlw	0
  7366   001AF6  6E09               	movwf	___fladd@a^0,c
  7367   001AF8  0E00               	movlw	0
  7368   001AFA  6E0A               	movwf	(___fladd@a+1)^0,c
  7369   001AFC  0E00               	movlw	0
  7370   001AFE  6E0B               	movwf	(___fladd@a+2)^0,c
  7371   001B00  0E00               	movlw	0
  7372   001B02  6E0C               	movwf	(___fladd@a+3)^0,c
  7373   001B04                     l4978:
  7374   001B04  5013               	movf	___fladd@bexp^0,w,c
  7375   001B06  5C12               	subwf	___fladd@aexp^0,w,c
  7376   001B08  B0D8               	btfsc	status,0,c
  7377   001B0A  EF89  F00D         	goto	u5391
  7378   001B0E  EF8B  F00D         	goto	u5390
  7379   001B12                     u5391:
  7380   001B12  EFB2  F00D         	goto	l5014
  7381   001B16                     u5390:
  7382   001B16  AC11               	btfss	___fladd@signs^0,6,c
  7383   001B18  EF90  F00D         	goto	u5401
  7384   001B1C  EF92  F00D         	goto	u5400
  7385   001B20                     u5401:
  7386   001B20  EF94  F00D         	goto	l4984
  7387   001B24                     u5400:
  7388   001B24  0E80               	movlw	128
  7389   001B26  1A11               	xorwf	___fladd@signs^0,f,c
  7390   001B28                     l4984:
  7391   001B28  C013  F014         	movff	___fladd@bexp,___fladd@grs
  7392   001B2C  C012  F013         	movff	___fladd@aexp,___fladd@bexp
  7393   001B30  C014  F012         	movff	___fladd@grs,___fladd@aexp
  7394   001B34  C005  F014         	movff	___fladd@b,___fladd@grs
  7395   001B38  C009  F005         	movff	___fladd@a,___fladd@b
  7396   001B3C  C014  F009         	movff	___fladd@grs,___fladd@a
  7397   001B40  C006  F014         	movff	___fladd@b+1,___fladd@grs
  7398   001B44  C00A  F006         	movff	___fladd@a+1,___fladd@b+1
  7399   001B48  C014  F00A         	movff	___fladd@grs,___fladd@a+1
  7400   001B4C  C007  F014         	movff	___fladd@b+2,___fladd@grs
  7401   001B50  C00B  F007         	movff	___fladd@a+2,___fladd@b+2
  7402   001B54  C014  F00B         	movff	___fladd@grs,___fladd@a+2
  7403   001B58  C008  F014         	movff	___fladd@b+3,___fladd@grs
  7404   001B5C  C00C  F008         	movff	___fladd@a+3,___fladd@b+3
  7405   001B60  C014  F00C         	movff	___fladd@grs,___fladd@a+3
  7406   001B64                     l5014:
  7407   001B64  0E00               	movlw	0
  7408   001B66  6E14               	movwf	___fladd@grs^0,c
  7409   001B68  5013               	movf	___fladd@bexp^0,w,c
  7410   001B6A  C012  F00D         	movff	___fladd@aexp,??___fladd
  7411   001B6E  6A0E               	clrf	(??___fladd+1)^0,c
  7412   001B70  5E0D               	subwf	??___fladd^0,f,c
  7413   001B72  0E00               	movlw	0
  7414   001B74  5A0E               	subwfb	(??___fladd+1)^0,f,c
  7415   001B76  BE0E               	btfsc	(??___fladd+1)^0,7,c
  7416   001B78  EFC7  F00D         	goto	u5411
  7417   001B7C  500E               	movf	(??___fladd+1)^0,w,c
  7418   001B7E  E109               	bnz	u5410
  7419   001B80  0E1A               	movlw	26
  7420   001B82  5C0D               	subwf	??___fladd^0,w,c
  7421   001B84  A0D8               	btfss	status,0,c
  7422   001B86  EFC7  F00D         	goto	u5411
  7423   001B8A  EFC9  F00D         	goto	u5410
  7424   001B8E                     u5411:
  7425   001B8E  EF00  F00E         	goto	l1041
  7426   001B92                     u5410:
  7427   001B92  5005               	movf	___fladd@b^0,w,c
  7428   001B94  1006               	iorwf	(___fladd@b+1)^0,w,c
  7429   001B96  1007               	iorwf	(___fladd@b+2)^0,w,c
  7430   001B98  1008               	iorwf	(___fladd@b+3)^0,w,c
  7431   001B9A  A4D8               	btfss	status,2,c
  7432   001B9C  EFD2  F00D         	goto	u5421
  7433   001BA0  EFD5  F00D         	goto	u5420
  7434   001BA4                     u5421:
  7435   001BA4  0E01               	movlw	1
  7436   001BA6  EFD6  F00D         	goto	u5430
  7437   001BAA                     u5420:
  7438   001BAA  0E00               	movlw	0
  7439   001BAC                     u5430:
  7440   001BAC  6E14               	movwf	___fladd@grs^0,c
  7441   001BAE  0E00               	movlw	0
  7442   001BB0  6E05               	movwf	___fladd@b^0,c
  7443   001BB2  0E00               	movlw	0
  7444   001BB4  6E06               	movwf	(___fladd@b+1)^0,c
  7445   001BB6  0E00               	movlw	0
  7446   001BB8  6E07               	movwf	(___fladd@b+2)^0,c
  7447   001BBA  0E00               	movlw	0
  7448   001BBC  6E08               	movwf	(___fladd@b+3)^0,c
  7449   001BBE  C012  F013         	movff	___fladd@aexp,___fladd@bexp
  7450   001BC2  EF09  F00E         	goto	l1040
  7451   001BC6                     l1042:
  7452   001BC6  A014               	btfss	___fladd@grs^0,0,c
  7453   001BC8  EFE8  F00D         	goto	u5441
  7454   001BCC  EFEA  F00D         	goto	u5440
  7455   001BD0                     u5441:
  7456   001BD0  EFF0  F00D         	goto	l5026
  7457   001BD4                     u5440:
  7458   001BD4  90D8               	bcf	status,0,c
  7459   001BD6  3014               	rrcf	___fladd@grs^0,w,c
  7460   001BD8  0901               	iorlw	1
  7461   001BDA  6E14               	movwf	___fladd@grs^0,c
  7462   001BDC  EFF2  F00D         	goto	l5028
  7463   001BE0                     l5026:
  7464   001BE0  90D8               	bcf	status,0,c
  7465   001BE2  3214               	rrcf	___fladd@grs^0,f,c
  7466   001BE4                     l5028:
  7467   001BE4  A005               	btfss	___fladd@b^0,0,c
  7468   001BE6  EFF7  F00D         	goto	u5451
  7469   001BEA  EFF9  F00D         	goto	u5450
  7470   001BEE                     u5451:
  7471   001BEE  EFFA  F00D         	goto	l5032
  7472   001BF2                     u5450:
  7473   001BF2  8E14               	bsf	___fladd@grs^0,7,c
  7474   001BF4                     l5032:
  7475   001BF4  3408               	rlcf	(___fladd@b+3)^0,w,c
  7476   001BF6  3208               	rrcf	(___fladd@b+3)^0,f,c
  7477   001BF8  3207               	rrcf	(___fladd@b+2)^0,f,c
  7478   001BFA  3206               	rrcf	(___fladd@b+1)^0,f,c
  7479   001BFC  3205               	rrcf	___fladd@b^0,f,c
  7480   001BFE  2A13               	incf	___fladd@bexp^0,f,c
  7481   001C00                     l1041:
  7482   001C00  5012               	movf	___fladd@aexp^0,w,c
  7483   001C02  5C13               	subwf	___fladd@bexp^0,w,c
  7484   001C04  A0D8               	btfss	status,0,c
  7485   001C06  EF07  F00E         	goto	u5461
  7486   001C0A  EF09  F00E         	goto	u5460
  7487   001C0E                     u5461:
  7488   001C0E  EFE3  F00D         	goto	l1042
  7489   001C12                     u5460:
  7490   001C12                     l1040:
  7491   001C12  BC11               	btfsc	___fladd@signs^0,6,c
  7492   001C14  EF0E  F00E         	goto	u5471
  7493   001C18  EF10  F00E         	goto	u5470
  7494   001C1C                     u5471:
  7495   001C1C  EF50  F00E         	goto	l5060
  7496   001C20                     u5470:
  7497   001C20  5013               	movf	___fladd@bexp^0,w,c
  7498   001C22  A4D8               	btfss	status,2,c
  7499   001C24  EF16  F00E         	goto	u5481
  7500   001C28  EF18  F00E         	goto	u5480
  7501   001C2C                     u5481:
  7502   001C2C  EF22  F00E         	goto	l5042
  7503   001C30                     u5480:
  7504   001C30  0E00               	movlw	0
  7505   001C32  6E05               	movwf	?___fladd^0,c
  7506   001C34  0E00               	movlw	0
  7507   001C36  6E06               	movwf	(?___fladd+1)^0,c
  7508   001C38  0E00               	movlw	0
  7509   001C3A  6E07               	movwf	(?___fladd+2)^0,c
  7510   001C3C  0E00               	movlw	0
  7511   001C3E  6E08               	movwf	(?___fladd+3)^0,c
  7512   001C40  EF71  F00F         	goto	l1049
  7513   001C44                     l5042:
  7514   001C44  5009               	movf	___fladd@a^0,w,c
  7515   001C46  2605               	addwf	___fladd@b^0,f,c
  7516   001C48  500A               	movf	(___fladd@a+1)^0,w,c
  7517   001C4A  2206               	addwfc	(___fladd@b+1)^0,f,c
  7518   001C4C  500B               	movf	(___fladd@a+2)^0,w,c
  7519   001C4E  2207               	addwfc	(___fladd@b+2)^0,f,c
  7520   001C50  500C               	movf	(___fladd@a+3)^0,w,c
  7521   001C52  2208               	addwfc	(___fladd@b+3)^0,f,c
  7522   001C54  A008               	btfss	(___fladd@b+3)^0,0,c
  7523   001C56  EF2F  F00E         	goto	u5491
  7524   001C5A  EF31  F00E         	goto	u5490
  7525   001C5E                     u5491:
  7526   001C5E  EFDD  F00E         	goto	l5096
  7527   001C62                     u5490:
  7528   001C62  A014               	btfss	___fladd@grs^0,0,c
  7529   001C64  EF36  F00E         	goto	u5501
  7530   001C68  EF38  F00E         	goto	u5500
  7531   001C6C                     u5501:
  7532   001C6C  EF3E  F00E         	goto	l5050
  7533   001C70                     u5500:
  7534   001C70  90D8               	bcf	status,0,c
  7535   001C72  3014               	rrcf	___fladd@grs^0,w,c
  7536   001C74  0901               	iorlw	1
  7537   001C76  6E14               	movwf	___fladd@grs^0,c
  7538   001C78  EF40  F00E         	goto	l5052
  7539   001C7C                     l5050:
  7540   001C7C  90D8               	bcf	status,0,c
  7541   001C7E  3214               	rrcf	___fladd@grs^0,f,c
  7542   001C80                     l5052:
  7543   001C80  A005               	btfss	___fladd@b^0,0,c
  7544   001C82  EF45  F00E         	goto	u5511
  7545   001C86  EF47  F00E         	goto	u5510
  7546   001C8A                     u5511:
  7547   001C8A  EF48  F00E         	goto	l5056
  7548   001C8E                     u5510:
  7549   001C8E  8E14               	bsf	___fladd@grs^0,7,c
  7550   001C90                     l5056:
  7551   001C90  3408               	rlcf	(___fladd@b+3)^0,w,c
  7552   001C92  3208               	rrcf	(___fladd@b+3)^0,f,c
  7553   001C94  3207               	rrcf	(___fladd@b+2)^0,f,c
  7554   001C96  3206               	rrcf	(___fladd@b+1)^0,f,c
  7555   001C98  3205               	rrcf	___fladd@b^0,f,c
  7556   001C9A  2A13               	incf	___fladd@bexp^0,f,c
  7557   001C9C  EFDD  F00E         	goto	l5096
  7558   001CA0                     l5060:
  7559   001CA0  5009               	movf	___fladd@a^0,w,c
  7560   001CA2  5C05               	subwf	___fladd@b^0,w,c
  7561   001CA4  500A               	movf	(___fladd@a+1)^0,w,c
  7562   001CA6  5806               	subwfb	(___fladd@b+1)^0,w,c
  7563   001CA8  500B               	movf	(___fladd@a+2)^0,w,c
  7564   001CAA  5807               	subwfb	(___fladd@b+2)^0,w,c
  7565   001CAC  5008               	movf	(___fladd@b+3)^0,w,c
  7566   001CAE  0A80               	xorlw	128
  7567   001CB0  6E0D               	movwf	??___fladd^0,c
  7568   001CB2  500C               	movf	(___fladd@a+3)^0,w,c
  7569   001CB4  0A80               	xorlw	128
  7570   001CB6  580D               	subwfb	??___fladd^0,w,c
  7571   001CB8  B0D8               	btfsc	status,0,c
  7572   001CBA  EF61  F00E         	goto	u5521
  7573   001CBE  EF63  F00E         	goto	u5520
  7574   001CC2                     u5521:
  7575   001CC2  EF8E  F00E         	goto	l5070
  7576   001CC6                     u5520:
  7577   001CC6  5005               	movf	___fladd@b^0,w,c
  7578   001CC8  5C09               	subwf	___fladd@a^0,w,c
  7579   001CCA  6E0D               	movwf	??___fladd^0,c
  7580   001CCC  5006               	movf	(___fladd@b+1)^0,w,c
  7581   001CCE  580A               	subwfb	(___fladd@a+1)^0,w,c
  7582   001CD0  6E0E               	movwf	(??___fladd+1)^0,c
  7583   001CD2  5007               	movf	(___fladd@b+2)^0,w,c
  7584   001CD4  580B               	subwfb	(___fladd@a+2)^0,w,c
  7585   001CD6  6E0F               	movwf	(??___fladd+2)^0,c
  7586   001CD8  5008               	movf	(___fladd@b+3)^0,w,c
  7587   001CDA  580C               	subwfb	(___fladd@a+3)^0,w,c
  7588   001CDC  6E10               	movwf	(??___fladd+3)^0,c
  7589   001CDE  0EFF               	movlw	255
  7590   001CE0  240D               	addwf	??___fladd^0,w,c
  7591   001CE2  6E05               	movwf	___fladd@b^0,c
  7592   001CE4  0EFF               	movlw	255
  7593   001CE6  200E               	addwfc	(??___fladd+1)^0,w,c
  7594   001CE8  6E06               	movwf	(___fladd@b+1)^0,c
  7595   001CEA  0EFF               	movlw	255
  7596   001CEC  200F               	addwfc	(??___fladd+2)^0,w,c
  7597   001CEE  6E07               	movwf	(___fladd@b+2)^0,c
  7598   001CF0  0EFF               	movlw	255
  7599   001CF2  2010               	addwfc	(??___fladd+3)^0,w,c
  7600   001CF4  6E08               	movwf	(___fladd@b+3)^0,c
  7601   001CF6  0E80               	movlw	128
  7602   001CF8  1A11               	xorwf	___fladd@signs^0,f,c
  7603   001CFA  6C14               	negf	___fladd@grs^0,c
  7604   001CFC  5014               	movf	___fladd@grs^0,w,c
  7605   001CFE  A4D8               	btfss	status,2,c
  7606   001D00  EF84  F00E         	goto	u5531
  7607   001D04  EF86  F00E         	goto	u5530
  7608   001D08                     u5531:
  7609   001D08  EF96  F00E         	goto	l1057
  7610   001D0C                     u5530:
  7611   001D0C  0E01               	movlw	1
  7612   001D0E  2605               	addwf	___fladd@b^0,f,c
  7613   001D10  0E00               	movlw	0
  7614   001D12  2206               	addwfc	(___fladd@b+1)^0,f,c
  7615   001D14  2207               	addwfc	(___fladd@b+2)^0,f,c
  7616   001D16  2208               	addwfc	(___fladd@b+3)^0,f,c
  7617   001D18  EF96  F00E         	goto	l1057
  7618   001D1C                     l5070:
  7619   001D1C  5009               	movf	___fladd@a^0,w,c
  7620   001D1E  5E05               	subwf	___fladd@b^0,f,c
  7621   001D20  500A               	movf	(___fladd@a+1)^0,w,c
  7622   001D22  5A06               	subwfb	(___fladd@b+1)^0,f,c
  7623   001D24  500B               	movf	(___fladd@a+2)^0,w,c
  7624   001D26  5A07               	subwfb	(___fladd@b+2)^0,f,c
  7625   001D28  500C               	movf	(___fladd@a+3)^0,w,c
  7626   001D2A  5A08               	subwfb	(___fladd@b+3)^0,f,c
  7627   001D2C                     l1057:
  7628   001D2C  5005               	movf	___fladd@b^0,w,c
  7629   001D2E  1006               	iorwf	(___fladd@b+1)^0,w,c
  7630   001D30  1007               	iorwf	(___fladd@b+2)^0,w,c
  7631   001D32  1008               	iorwf	(___fladd@b+3)^0,w,c
  7632   001D34  A4D8               	btfss	status,2,c
  7633   001D36  EF9F  F00E         	goto	u5541
  7634   001D3A  EFA1  F00E         	goto	u5540
  7635   001D3E                     u5541:
  7636   001D3E  EFD6  F00E         	goto	l5094
  7637   001D42                     u5540:
  7638   001D42  5014               	movf	___fladd@grs^0,w,c
  7639   001D44  A4D8               	btfss	status,2,c
  7640   001D46  EFA7  F00E         	goto	u5551
  7641   001D4A  EFA9  F00E         	goto	u5550
  7642   001D4E                     u5551:
  7643   001D4E  EFD6  F00E         	goto	l5094
  7644   001D52                     u5550:
  7645   001D52  0E00               	movlw	0
  7646   001D54  6E05               	movwf	?___fladd^0,c
  7647   001D56  0E00               	movlw	0
  7648   001D58  6E06               	movwf	(?___fladd+1)^0,c
  7649   001D5A  0E00               	movlw	0
  7650   001D5C  6E07               	movwf	(?___fladd+2)^0,c
  7651   001D5E  0E00               	movlw	0
  7652   001D60  6E08               	movwf	(?___fladd+3)^0,c
  7653   001D62  EF71  F00F         	goto	l1049
  7654   001D66                     l5078:
  7655   001D66  90D8               	bcf	status,0,c
  7656   001D68  3605               	rlcf	___fladd@b^0,f,c
  7657   001D6A  3606               	rlcf	(___fladd@b+1)^0,f,c
  7658   001D6C  3607               	rlcf	(___fladd@b+2)^0,f,c
  7659   001D6E  3608               	rlcf	(___fladd@b+3)^0,f,c
  7660   001D70  AE14               	btfss	___fladd@grs^0,7,c
  7661   001D72  EFBD  F00E         	goto	u5561
  7662   001D76  EFBF  F00E         	goto	u5560
  7663   001D7A                     u5561:
  7664   001D7A  EFC0  F00E         	goto	l5084
  7665   001D7E                     u5560:
  7666   001D7E  8005               	bsf	___fladd@b^0,0,c
  7667   001D80                     l5084:
  7668   001D80  A014               	btfss	___fladd@grs^0,0,c
  7669   001D82  EFC5  F00E         	goto	u5571
  7670   001D86  EFC7  F00E         	goto	u5570
  7671   001D8A                     u5571:
  7672   001D8A  EFCB  F00E         	goto	l5088
  7673   001D8E                     u5570:
  7674   001D8E  80D8               	bsf	status,0,c
  7675   001D90  3614               	rlcf	___fladd@grs^0,f,c
  7676   001D92  EFCD  F00E         	goto	l5090
  7677   001D96                     l5088:
  7678   001D96  90D8               	bcf	status,0,c
  7679   001D98  3614               	rlcf	___fladd@grs^0,f,c
  7680   001D9A                     l5090:
  7681   001D9A  5013               	movf	___fladd@bexp^0,w,c
  7682   001D9C  B4D8               	btfsc	status,2,c
  7683   001D9E  EFD3  F00E         	goto	u5581
  7684   001DA2  EFD5  F00E         	goto	u5580
  7685   001DA6                     u5581:
  7686   001DA6  EFD6  F00E         	goto	l5094
  7687   001DAA                     u5580:
  7688   001DAA  0613               	decf	___fladd@bexp^0,f,c
  7689   001DAC                     l5094:
  7690   001DAC  AE07               	btfss	(___fladd@b+2)^0,7,c
  7691   001DAE  EFDB  F00E         	goto	u5591
  7692   001DB2  EFDD  F00E         	goto	u5590
  7693   001DB6                     u5591:
  7694   001DB6  EFB3  F00E         	goto	l5078
  7695   001DBA                     u5590:
  7696   001DBA                     l5096:
  7697   001DBA  0E00               	movlw	0
  7698   001DBC  6E12               	movwf	___fladd@aexp^0,c
  7699   001DBE  AE14               	btfss	___fladd@grs^0,7,c
  7700   001DC0  EFE4  F00E         	goto	u5601
  7701   001DC4  EFE6  F00E         	goto	u5600
  7702   001DC8                     u5601:
  7703   001DC8  EFFE  F00E         	goto	l1066
  7704   001DCC                     u5600:
  7705   001DCC  C014  F00D         	movff	___fladd@grs,??___fladd
  7706   001DD0  0E7F               	movlw	127
  7707   001DD2  160D               	andwf	??___fladd^0,f,c
  7708   001DD4  B4D8               	btfsc	status,2,c
  7709   001DD6  EFEF  F00E         	goto	u5611
  7710   001DDA  EFF1  F00E         	goto	u5610
  7711   001DDE                     u5611:
  7712   001DDE  EFF5  F00E         	goto	l1067
  7713   001DE2                     u5610:
  7714   001DE2                     l5102:
  7715   001DE2  0E01               	movlw	1
  7716   001DE4  6E12               	movwf	___fladd@aexp^0,c
  7717   001DE6  EFFE  F00E         	goto	l1066
  7718   001DEA                     l1067:
  7719   001DEA  A005               	btfss	___fladd@b^0,0,c
  7720   001DEC  EFFA  F00E         	goto	u5621
  7721   001DF0  EFFC  F00E         	goto	u5620
  7722   001DF4                     u5621:
  7723   001DF4  EFFE  F00E         	goto	l1066
  7724   001DF8                     u5620:
  7725   001DF8  EFF1  F00E         	goto	l5102
  7726   001DFC                     l1066:
  7727   001DFC  5012               	movf	___fladd@aexp^0,w,c
  7728   001DFE  B4D8               	btfsc	status,2,c
  7729   001E00  EF04  F00F         	goto	u5631
  7730   001E04  EF06  F00F         	goto	u5630
  7731   001E08                     u5631:
  7732   001E08  EF31  F00F         	goto	l5114
  7733   001E0C                     u5630:
  7734   001E0C  0E01               	movlw	1
  7735   001E0E  2605               	addwf	___fladd@b^0,f,c
  7736   001E10  0E00               	movlw	0
  7737   001E12  2206               	addwfc	(___fladd@b+1)^0,f,c
  7738   001E14  2207               	addwfc	(___fladd@b+2)^0,f,c
  7739   001E16  2208               	addwfc	(___fladd@b+3)^0,f,c
  7740   001E18  A008               	btfss	(___fladd@b+3)^0,0,c
  7741   001E1A  EF11  F00F         	goto	u5641
  7742   001E1E  EF13  F00F         	goto	u5640
  7743   001E22                     u5641:
  7744   001E22  EF31  F00F         	goto	l5114
  7745   001E26                     u5640:
  7746   001E26  C005  F00D         	movff	___fladd@b,??___fladd
  7747   001E2A  C006  F00E         	movff	___fladd@b+1,??___fladd+1
  7748   001E2E  C007  F00F         	movff	___fladd@b+2,??___fladd+2
  7749   001E32  C008  F010         	movff	___fladd@b+3,??___fladd+3
  7750   001E36  3410               	rlcf	(??___fladd+3)^0,w,c
  7751   001E38  3210               	rrcf	(??___fladd+3)^0,f,c
  7752   001E3A  320F               	rrcf	(??___fladd+2)^0,f,c
  7753   001E3C  320E               	rrcf	(??___fladd+1)^0,f,c
  7754   001E3E  320D               	rrcf	??___fladd^0,f,c
  7755   001E40  C00D  F005         	movff	??___fladd,___fladd@b
  7756   001E44  C00E  F006         	movff	??___fladd+1,___fladd@b+1
  7757   001E48  C00F  F007         	movff	??___fladd+2,___fladd@b+2
  7758   001E4C  C010  F008         	movff	??___fladd+3,___fladd@b+3
  7759   001E50  2813               	incf	___fladd@bexp^0,w,c
  7760   001E52  B4D8               	btfsc	status,2,c
  7761   001E54  EF2E  F00F         	goto	u5651
  7762   001E58  EF30  F00F         	goto	u5650
  7763   001E5C                     u5651:
  7764   001E5C  EF31  F00F         	goto	l5114
  7765   001E60                     u5650:
  7766   001E60  2A13               	incf	___fladd@bexp^0,f,c
  7767   001E62                     l5114:
  7768   001E62  2813               	incf	___fladd@bexp^0,w,c
  7769   001E64  B4D8               	btfsc	status,2,c
  7770   001E66  EF37  F00F         	goto	u5661
  7771   001E6A  EF39  F00F         	goto	u5660
  7772   001E6E                     u5661:
  7773   001E6E  EF41  F00F         	goto	l5118
  7774   001E72                     u5660:
  7775   001E72  5013               	movf	___fladd@bexp^0,w,c
  7776   001E74  A4D8               	btfss	status,2,c
  7777   001E76  EF3F  F00F         	goto	u5671
  7778   001E7A  EF41  F00F         	goto	u5670
  7779   001E7E                     u5671:
  7780   001E7E  EF53  F00F         	goto	l5122
  7781   001E82                     u5670:
  7782   001E82                     l5118:
  7783   001E82  0E00               	movlw	0
  7784   001E84  6E05               	movwf	___fladd@b^0,c
  7785   001E86  0E00               	movlw	0
  7786   001E88  6E06               	movwf	(___fladd@b+1)^0,c
  7787   001E8A  0E00               	movlw	0
  7788   001E8C  6E07               	movwf	(___fladd@b+2)^0,c
  7789   001E8E  0E00               	movlw	0
  7790   001E90  6E08               	movwf	(___fladd@b+3)^0,c
  7791   001E92  5013               	movf	___fladd@bexp^0,w,c
  7792   001E94  A4D8               	btfss	status,2,c
  7793   001E96  EF4F  F00F         	goto	u5681
  7794   001E9A  EF51  F00F         	goto	u5680
  7795   001E9E                     u5681:
  7796   001E9E  EF53  F00F         	goto	l5122
  7797   001EA2                     u5680:
  7798   001EA2  0E00               	movlw	0
  7799   001EA4  6E11               	movwf	___fladd@signs^0,c
  7800   001EA6                     l5122:
  7801   001EA6  A013               	btfss	___fladd@bexp^0,0,c
  7802   001EA8  EF58  F00F         	goto	u5691
  7803   001EAC  EF5A  F00F         	goto	u5690
  7804   001EB0                     u5691:
  7805   001EB0  EF5D  F00F         	goto	l5126
  7806   001EB4                     u5690:
  7807   001EB4  8E07               	bsf	(___fladd@b+2)^0,7,c
  7808   001EB6  EF5E  F00F         	goto	l5128
  7809   001EBA                     l5126:
  7810   001EBA  9E07               	bcf	(___fladd@b+2)^0,7,c
  7811   001EBC                     l5128:
  7812   001EBC  90D8               	bcf	status,0,c
  7813   001EBE  3013               	rrcf	___fladd@bexp^0,w,c
  7814   001EC0  6E08               	movwf	(___fladd@b+3)^0,c
  7815   001EC2  AE11               	btfss	___fladd@signs^0,7,c
  7816   001EC4  EF66  F00F         	goto	u5701
  7817   001EC8  EF68  F00F         	goto	u5700
  7818   001ECC                     u5701:
  7819   001ECC  EF69  F00F         	goto	l5134
  7820   001ED0                     u5700:
  7821   001ED0  8E08               	bsf	(___fladd@b+3)^0,7,c
  7822   001ED2                     l5134:
  7823   001ED2  C005  F005         	movff	___fladd@b,?___fladd
  7824   001ED6  C006  F006         	movff	___fladd@b+1,?___fladd+1
  7825   001EDA  C007  F007         	movff	___fladd@b+2,?___fladd+2
  7826   001EDE  C008  F008         	movff	___fladd@b+3,?___fladd+3
  7827   001EE2                     l1049:
  7828   001EE2  0012               	return		;funcret
  7829   001EE4                     __end_of___fladd:
  7830                           	callstack 0
  7831                           
  7832 ;; *************** function ___flmul *****************
  7833 ;; Defined at:
  7834 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\sprcmul.c"
  7835 ;; Parameters:    Size  Location     Type
  7836 ;;  b               4   28[COMRAM] unsigned char 
  7837 ;;  a               4   32[COMRAM] unsigned char 
  7838 ;; Auto vars:     Size  Location     Type
  7839 ;;  prod            4   47[COMRAM] struct .
  7840 ;;  grs             4   42[COMRAM] unsigned long 
  7841 ;;  temp            2   51[COMRAM] struct .
  7842 ;;  bexp            1   46[COMRAM] unsigned char 
  7843 ;;  aexp            1   41[COMRAM] unsigned char 
  7844 ;;  sign            1   40[COMRAM] unsigned char 
  7845 ;; Return value:  Size  Location     Type
  7846 ;;                  4   28[COMRAM] unsigned char 
  7847 ;; Registers used:
  7848 ;;		wreg, status,2, status,0, prodl, prodh
  7849 ;; Tracked objects:
  7850 ;;		On entry : 0/0
  7851 ;;		On exit  : 0/0
  7852 ;;		Unchanged: 0/0
  7853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7854 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7855 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7856 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7857 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7858 ;;Total ram usage:       25 bytes
  7859 ;; Hardware stack levels used: 1
  7860 ;; Hardware stack levels required when called: 2
  7861 ;; This function calls:
  7862 ;;		Nothing
  7863 ;; This function is called by:
  7864 ;;		_colorDetect
  7865 ;;		_turnLeft_90
  7866 ;;		_turnRight_90
  7867 ;;		_turn_180
  7868 ;;		_turnRight_135
  7869 ;;		_turnLeft_135
  7870 ;;		_turnLeft
  7871 ;;		_turnRight
  7872 ;; This function uses a non-reentrant model
  7873 ;;
  7874                           
  7875                           	psect	text36
  7876   001EE4                     __ptext36:
  7877                           	callstack 0
  7878   001EE4                     ___flmul:
  7879                           	callstack 27
  7880   001EE4  5020               	movf	(___flmul@b+3)^0,w,c
  7881   001EE6  0B80               	andlw	128
  7882   001EE8  6E29               	movwf	___flmul@sign^0,c
  7883   001EEA  5020               	movf	(___flmul@b+3)^0,w,c
  7884   001EEC  2420               	addwf	(___flmul@b+3)^0,w,c
  7885   001EEE  6E2F               	movwf	___flmul@bexp^0,c
  7886   001EF0  AE1F               	btfss	(___flmul@b+2)^0,7,c
  7887   001EF2  EF7D  F00F         	goto	u6031
  7888   001EF6  EF7F  F00F         	goto	u6030
  7889   001EFA                     u6031:
  7890   001EFA  EF80  F00F         	goto	l5442
  7891   001EFE                     u6030:
  7892   001EFE  802F               	bsf	___flmul@bexp^0,0,c
  7893   001F00                     l5442:
  7894   001F00  502F               	movf	___flmul@bexp^0,w,c
  7895   001F02  B4D8               	btfsc	status,2,c
  7896   001F04  EF86  F00F         	goto	u6041
  7897   001F08  EF88  F00F         	goto	u6040
  7898   001F0C                     u6041:
  7899   001F0C  EF9B  F00F         	goto	l5450
  7900   001F10                     u6040:
  7901   001F10  282F               	incf	___flmul@bexp^0,w,c
  7902   001F12  A4D8               	btfss	status,2,c
  7903   001F14  EF8E  F00F         	goto	u6051
  7904   001F18  EF90  F00F         	goto	u6050
  7905   001F1C                     u6051:
  7906   001F1C  EF98  F00F         	goto	l5448
  7907   001F20                     u6050:
  7908   001F20  0E00               	movlw	0
  7909   001F22  6E1D               	movwf	___flmul@b^0,c
  7910   001F24  0E00               	movlw	0
  7911   001F26  6E1E               	movwf	(___flmul@b+1)^0,c
  7912   001F28  0E00               	movlw	0
  7913   001F2A  6E1F               	movwf	(___flmul@b+2)^0,c
  7914   001F2C  0E00               	movlw	0
  7915   001F2E  6E20               	movwf	(___flmul@b+3)^0,c
  7916   001F30                     l5448:
  7917   001F30  8E1F               	bsf	(___flmul@b+2)^0,7,c
  7918   001F32  EFA3  F00F         	goto	l5452
  7919   001F36                     l5450:
  7920   001F36  0E00               	movlw	0
  7921   001F38  6E1D               	movwf	___flmul@b^0,c
  7922   001F3A  0E00               	movlw	0
  7923   001F3C  6E1E               	movwf	(___flmul@b+1)^0,c
  7924   001F3E  0E00               	movlw	0
  7925   001F40  6E1F               	movwf	(___flmul@b+2)^0,c
  7926   001F42  0E00               	movlw	0
  7927   001F44  6E20               	movwf	(___flmul@b+3)^0,c
  7928   001F46                     l5452:
  7929   001F46  5024               	movf	(___flmul@a+3)^0,w,c
  7930   001F48  0B80               	andlw	128
  7931   001F4A  1A29               	xorwf	___flmul@sign^0,f,c
  7932   001F4C  5024               	movf	(___flmul@a+3)^0,w,c
  7933   001F4E  2424               	addwf	(___flmul@a+3)^0,w,c
  7934   001F50  6E2A               	movwf	___flmul@aexp^0,c
  7935   001F52  AE23               	btfss	(___flmul@a+2)^0,7,c
  7936   001F54  EFAE  F00F         	goto	u6061
  7937   001F58  EFB0  F00F         	goto	u6060
  7938   001F5C                     u6061:
  7939   001F5C  EFB1  F00F         	goto	l5460
  7940   001F60                     u6060:
  7941   001F60  802A               	bsf	___flmul@aexp^0,0,c
  7942   001F62                     l5460:
  7943   001F62  502A               	movf	___flmul@aexp^0,w,c
  7944   001F64  B4D8               	btfsc	status,2,c
  7945   001F66  EFB7  F00F         	goto	u6071
  7946   001F6A  EFB9  F00F         	goto	u6070
  7947   001F6E                     u6071:
  7948   001F6E  EFCC  F00F         	goto	l5468
  7949   001F72                     u6070:
  7950   001F72  282A               	incf	___flmul@aexp^0,w,c
  7951   001F74  A4D8               	btfss	status,2,c
  7952   001F76  EFBF  F00F         	goto	u6081
  7953   001F7A  EFC1  F00F         	goto	u6080
  7954   001F7E                     u6081:
  7955   001F7E  EFC9  F00F         	goto	l5466
  7956   001F82                     u6080:
  7957   001F82  0E00               	movlw	0
  7958   001F84  6E21               	movwf	___flmul@a^0,c
  7959   001F86  0E00               	movlw	0
  7960   001F88  6E22               	movwf	(___flmul@a+1)^0,c
  7961   001F8A  0E00               	movlw	0
  7962   001F8C  6E23               	movwf	(___flmul@a+2)^0,c
  7963   001F8E  0E00               	movlw	0
  7964   001F90  6E24               	movwf	(___flmul@a+3)^0,c
  7965   001F92                     l5466:
  7966   001F92  8E23               	bsf	(___flmul@a+2)^0,7,c
  7967   001F94  EFD4  F00F         	goto	l1126
  7968   001F98                     l5468:
  7969   001F98  0E00               	movlw	0
  7970   001F9A  6E21               	movwf	___flmul@a^0,c
  7971   001F9C  0E00               	movlw	0
  7972   001F9E  6E22               	movwf	(___flmul@a+1)^0,c
  7973   001FA0  0E00               	movlw	0
  7974   001FA2  6E23               	movwf	(___flmul@a+2)^0,c
  7975   001FA4  0E00               	movlw	0
  7976   001FA6  6E24               	movwf	(___flmul@a+3)^0,c
  7977   001FA8                     l1126:
  7978   001FA8  502A               	movf	___flmul@aexp^0,w,c
  7979   001FAA  B4D8               	btfsc	status,2,c
  7980   001FAC  EFDA  F00F         	goto	u6091
  7981   001FB0  EFDC  F00F         	goto	u6090
  7982   001FB4                     u6091:
  7983   001FB4  EFE4  F00F         	goto	l5472
  7984   001FB8                     u6090:
  7985   001FB8  502F               	movf	___flmul@bexp^0,w,c
  7986   001FBA  A4D8               	btfss	status,2,c
  7987   001FBC  EFE2  F00F         	goto	u6101
  7988   001FC0  EFE4  F00F         	goto	u6100
  7989   001FC4                     u6101:
  7990   001FC4  EFEE  F00F         	goto	l5476
  7991   001FC8                     u6100:
  7992   001FC8                     l5472:
  7993   001FC8  0E00               	movlw	0
  7994   001FCA  6E1D               	movwf	?___flmul^0,c
  7995   001FCC  0E00               	movlw	0
  7996   001FCE  6E1E               	movwf	(?___flmul+1)^0,c
  7997   001FD0  0E00               	movlw	0
  7998   001FD2  6E1F               	movwf	(?___flmul+2)^0,c
  7999   001FD4  0E00               	movlw	0
  8000   001FD6  6E20               	movwf	(?___flmul+3)^0,c
  8001   001FD8  EF86  F011         	goto	l1130
  8002   001FDC                     l5476:
  8003   001FDC  5023               	movf	(___flmul@a+2)^0,w,c
  8004   001FDE  021D               	mulwf	___flmul@b^0,c
  8005   001FE0  CFF3 F034          	movff	prodl,___flmul@temp
  8006   001FE4  CFF4 F035          	movff	prodh,___flmul@temp+1
  8007   001FE8  5034               	movf	___flmul@temp^0,w,c
  8008   001FEA  6E2B               	movwf	___flmul@grs^0,c
  8009   001FEC  6A2C               	clrf	(___flmul@grs+1)^0,c
  8010   001FEE  6A2D               	clrf	(___flmul@grs+2)^0,c
  8011   001FF0  6A2E               	clrf	(___flmul@grs+3)^0,c
  8012   001FF2  5035               	movf	(___flmul@temp+1)^0,w,c
  8013   001FF4  6E30               	movwf	___flmul@prod^0,c
  8014   001FF6  6A31               	clrf	(___flmul@prod+1)^0,c
  8015   001FF8  6A32               	clrf	(___flmul@prod+2)^0,c
  8016   001FFA  6A33               	clrf	(___flmul@prod+3)^0,c
  8017   001FFC  5022               	movf	(___flmul@a+1)^0,w,c
  8018   001FFE  021E               	mulwf	(___flmul@b+1)^0,c
  8019   002000  CFF3 F034          	movff	prodl,___flmul@temp
  8020   002004  CFF4 F035          	movff	prodh,___flmul@temp+1
  8021   002008  5034               	movf	___flmul@temp^0,w,c
  8022   00200A  262B               	addwf	___flmul@grs^0,f,c
  8023   00200C  0E00               	movlw	0
  8024   00200E  222C               	addwfc	(___flmul@grs+1)^0,f,c
  8025   002010  222D               	addwfc	(___flmul@grs+2)^0,f,c
  8026   002012  222E               	addwfc	(___flmul@grs+3)^0,f,c
  8027   002014  5035               	movf	(___flmul@temp+1)^0,w,c
  8028   002016  2630               	addwf	___flmul@prod^0,f,c
  8029   002018  0E00               	movlw	0
  8030   00201A  2231               	addwfc	(___flmul@prod+1)^0,f,c
  8031   00201C  2232               	addwfc	(___flmul@prod+2)^0,f,c
  8032   00201E  2233               	addwfc	(___flmul@prod+3)^0,f,c
  8033   002020  5021               	movf	___flmul@a^0,w,c
  8034   002022  021F               	mulwf	(___flmul@b+2)^0,c
  8035   002024  CFF3 F034          	movff	prodl,___flmul@temp
  8036   002028  CFF4 F035          	movff	prodh,___flmul@temp+1
  8037   00202C  5034               	movf	___flmul@temp^0,w,c
  8038   00202E  262B               	addwf	___flmul@grs^0,f,c
  8039   002030  0E00               	movlw	0
  8040   002032  222C               	addwfc	(___flmul@grs+1)^0,f,c
  8041   002034  222D               	addwfc	(___flmul@grs+2)^0,f,c
  8042   002036  222E               	addwfc	(___flmul@grs+3)^0,f,c
  8043   002038  5035               	movf	(___flmul@temp+1)^0,w,c
  8044   00203A  2630               	addwf	___flmul@prod^0,f,c
  8045   00203C  0E00               	movlw	0
  8046   00203E  2231               	addwfc	(___flmul@prod+1)^0,f,c
  8047   002040  2232               	addwfc	(___flmul@prod+2)^0,f,c
  8048   002042  2233               	addwfc	(___flmul@prod+3)^0,f,c
  8049   002044  C02D  F02E         	movff	___flmul@grs+2,___flmul@grs+3
  8050   002048  C02C  F02D         	movff	___flmul@grs+1,___flmul@grs+2
  8051   00204C  C02B  F02C         	movff	___flmul@grs,___flmul@grs+1
  8052   002050  6A2B               	clrf	___flmul@grs^0,c
  8053   002052  5021               	movf	___flmul@a^0,w,c
  8054   002054  021E               	mulwf	(___flmul@b+1)^0,c
  8055   002056  CFF3 F034          	movff	prodl,___flmul@temp
  8056   00205A  CFF4 F035          	movff	prodh,___flmul@temp+1
  8057   00205E  5034               	movf	___flmul@temp^0,w,c
  8058   002060  262B               	addwf	___flmul@grs^0,f,c
  8059   002062  5035               	movf	(___flmul@temp+1)^0,w,c
  8060   002064  222C               	addwfc	(___flmul@grs+1)^0,f,c
  8061   002066  0E00               	movlw	0
  8062   002068  222D               	addwfc	(___flmul@grs+2)^0,f,c
  8063   00206A  0E00               	movlw	0
  8064   00206C  222E               	addwfc	(___flmul@grs+3)^0,f,c
  8065   00206E  5022               	movf	(___flmul@a+1)^0,w,c
  8066   002070  021D               	mulwf	___flmul@b^0,c
  8067   002072  CFF3 F034          	movff	prodl,___flmul@temp
  8068   002076  CFF4 F035          	movff	prodh,___flmul@temp+1
  8069   00207A  5034               	movf	___flmul@temp^0,w,c
  8070   00207C  262B               	addwf	___flmul@grs^0,f,c
  8071   00207E  5035               	movf	(___flmul@temp+1)^0,w,c
  8072   002080  222C               	addwfc	(___flmul@grs+1)^0,f,c
  8073   002082  0E00               	movlw	0
  8074   002084  222D               	addwfc	(___flmul@grs+2)^0,f,c
  8075   002086  0E00               	movlw	0
  8076   002088  222E               	addwfc	(___flmul@grs+3)^0,f,c
  8077   00208A  C02D  F02E         	movff	___flmul@grs+2,___flmul@grs+3
  8078   00208E  C02C  F02D         	movff	___flmul@grs+1,___flmul@grs+2
  8079   002092  C02B  F02C         	movff	___flmul@grs,___flmul@grs+1
  8080   002096  6A2B               	clrf	___flmul@grs^0,c
  8081   002098  5021               	movf	___flmul@a^0,w,c
  8082   00209A  021D               	mulwf	___flmul@b^0,c
  8083   00209C  CFF3 F034          	movff	prodl,___flmul@temp
  8084   0020A0  CFF4 F035          	movff	prodh,___flmul@temp+1
  8085   0020A4  5034               	movf	___flmul@temp^0,w,c
  8086   0020A6  262B               	addwf	___flmul@grs^0,f,c
  8087   0020A8  5035               	movf	(___flmul@temp+1)^0,w,c
  8088   0020AA  222C               	addwfc	(___flmul@grs+1)^0,f,c
  8089   0020AC  0E00               	movlw	0
  8090   0020AE  222D               	addwfc	(___flmul@grs+2)^0,f,c
  8091   0020B0  0E00               	movlw	0
  8092   0020B2  222E               	addwfc	(___flmul@grs+3)^0,f,c
  8093   0020B4  5023               	movf	(___flmul@a+2)^0,w,c
  8094   0020B6  021E               	mulwf	(___flmul@b+1)^0,c
  8095   0020B8  CFF3 F034          	movff	prodl,___flmul@temp
  8096   0020BC  CFF4 F035          	movff	prodh,___flmul@temp+1
  8097   0020C0  5034               	movf	___flmul@temp^0,w,c
  8098   0020C2  2630               	addwf	___flmul@prod^0,f,c
  8099   0020C4  5035               	movf	(___flmul@temp+1)^0,w,c
  8100   0020C6  2231               	addwfc	(___flmul@prod+1)^0,f,c
  8101   0020C8  0E00               	movlw	0
  8102   0020CA  2232               	addwfc	(___flmul@prod+2)^0,f,c
  8103   0020CC  0E00               	movlw	0
  8104   0020CE  2233               	addwfc	(___flmul@prod+3)^0,f,c
  8105   0020D0  5022               	movf	(___flmul@a+1)^0,w,c
  8106   0020D2  021F               	mulwf	(___flmul@b+2)^0,c
  8107   0020D4  CFF3 F034          	movff	prodl,___flmul@temp
  8108   0020D8  CFF4 F035          	movff	prodh,___flmul@temp+1
  8109   0020DC  5034               	movf	___flmul@temp^0,w,c
  8110   0020DE  2630               	addwf	___flmul@prod^0,f,c
  8111   0020E0  5035               	movf	(___flmul@temp+1)^0,w,c
  8112   0020E2  2231               	addwfc	(___flmul@prod+1)^0,f,c
  8113   0020E4  0E00               	movlw	0
  8114   0020E6  2232               	addwfc	(___flmul@prod+2)^0,f,c
  8115   0020E8  0E00               	movlw	0
  8116   0020EA  2233               	addwfc	(___flmul@prod+3)^0,f,c
  8117   0020EC  5023               	movf	(___flmul@a+2)^0,w,c
  8118   0020EE  021F               	mulwf	(___flmul@b+2)^0,c
  8119   0020F0  CFF3 F034          	movff	prodl,___flmul@temp
  8120   0020F4  CFF4 F035          	movff	prodh,___flmul@temp+1
  8121   0020F8  5034               	movf	___flmul@temp^0,w,c
  8122   0020FA  6E25               	movwf	??___flmul^0,c
  8123   0020FC  5035               	movf	(___flmul@temp+1)^0,w,c
  8124   0020FE  6E26               	movwf	(??___flmul+1)^0,c
  8125   002100  6A27               	clrf	(??___flmul+2)^0,c
  8126   002102  6A28               	clrf	(??___flmul+3)^0,c
  8127   002104  C027  F028         	movff	??___flmul+2,??___flmul+3
  8128   002108  C026  F027         	movff	??___flmul+1,??___flmul+2
  8129   00210C  C025  F026         	movff	??___flmul,??___flmul+1
  8130   002110  6A25               	clrf	??___flmul^0,c
  8131   002112  5025               	movf	??___flmul^0,w,c
  8132   002114  2630               	addwf	___flmul@prod^0,f,c
  8133   002116  5026               	movf	(??___flmul+1)^0,w,c
  8134   002118  2231               	addwfc	(___flmul@prod+1)^0,f,c
  8135   00211A  5027               	movf	(??___flmul+2)^0,w,c
  8136   00211C  2232               	addwfc	(___flmul@prod+2)^0,f,c
  8137   00211E  5028               	movf	(??___flmul+3)^0,w,c
  8138   002120  2233               	addwfc	(___flmul@prod+3)^0,f,c
  8139   002122  C02B  F025         	movff	___flmul@grs,??___flmul
  8140   002126  C02C  F026         	movff	___flmul@grs+1,??___flmul+1
  8141   00212A  C02D  F027         	movff	___flmul@grs+2,??___flmul+2
  8142   00212E  C02E  F028         	movff	___flmul@grs+3,??___flmul+3
  8143   002132  0E19               	movlw	25
  8144   002134  EFA1  F010         	goto	u6110
  8145   002138                     u6115:
  8146   002138  90D8               	bcf	status,0,c
  8147   00213A  3228               	rrcf	(??___flmul+3)^0,f,c
  8148   00213C  3227               	rrcf	(??___flmul+2)^0,f,c
  8149   00213E  3226               	rrcf	(??___flmul+1)^0,f,c
  8150   002140  3225               	rrcf	??___flmul^0,f,c
  8151   002142                     u6110:
  8152   002142  2EE8               	decfsz	wreg,f,c
  8153   002144  EF9C  F010         	goto	u6115
  8154   002148  5025               	movf	??___flmul^0,w,c
  8155   00214A  2630               	addwf	___flmul@prod^0,f,c
  8156   00214C  5026               	movf	(??___flmul+1)^0,w,c
  8157   00214E  2231               	addwfc	(___flmul@prod+1)^0,f,c
  8158   002150  5027               	movf	(??___flmul+2)^0,w,c
  8159   002152  2232               	addwfc	(___flmul@prod+2)^0,f,c
  8160   002154  5028               	movf	(??___flmul+3)^0,w,c
  8161   002156  2233               	addwfc	(___flmul@prod+3)^0,f,c
  8162   002158  C02D  F02E         	movff	___flmul@grs+2,___flmul@grs+3
  8163   00215C  C02C  F02D         	movff	___flmul@grs+1,___flmul@grs+2
  8164   002160  C02B  F02C         	movff	___flmul@grs,___flmul@grs+1
  8165   002164  6A2B               	clrf	___flmul@grs^0,c
  8166   002166  502A               	movf	___flmul@aexp^0,w,c
  8167   002168  C02F  F025         	movff	___flmul@bexp,??___flmul
  8168   00216C  6A26               	clrf	(??___flmul+1)^0,c
  8169   00216E  2625               	addwf	??___flmul^0,f,c
  8170   002170  0E00               	movlw	0
  8171   002172  2226               	addwfc	(??___flmul+1)^0,f,c
  8172   002174  0E82               	movlw	130
  8173   002176  2425               	addwf	??___flmul^0,w,c
  8174   002178  6E34               	movwf	___flmul@temp^0,c
  8175   00217A  0EFF               	movlw	255
  8176   00217C  2026               	addwfc	(??___flmul+1)^0,w,c
  8177   00217E  6E35               	movwf	(___flmul@temp+1)^0,c
  8178   002180  EFD7  F010         	goto	l5524
  8179   002184                     l5518:
  8180   002184  90D8               	bcf	status,0,c
  8181   002186  3630               	rlcf	___flmul@prod^0,f,c
  8182   002188  3631               	rlcf	(___flmul@prod+1)^0,f,c
  8183   00218A  3632               	rlcf	(___flmul@prod+2)^0,f,c
  8184   00218C  3633               	rlcf	(___flmul@prod+3)^0,f,c
  8185   00218E  AE2E               	btfss	(___flmul@grs+3)^0,7,c
  8186   002190  EFCC  F010         	goto	u6121
  8187   002194  EFCE  F010         	goto	u6120
  8188   002198                     u6121:
  8189   002198  EFCF  F010         	goto	l1133
  8190   00219C                     u6120:
  8191   00219C  8030               	bsf	___flmul@prod^0,0,c
  8192   00219E                     l1133:
  8193   00219E  90D8               	bcf	status,0,c
  8194   0021A0  362B               	rlcf	___flmul@grs^0,f,c
  8195   0021A2  362C               	rlcf	(___flmul@grs+1)^0,f,c
  8196   0021A4  362D               	rlcf	(___flmul@grs+2)^0,f,c
  8197   0021A6  362E               	rlcf	(___flmul@grs+3)^0,f,c
  8198   0021A8  0634               	decf	___flmul@temp^0,f,c
  8199   0021AA  A0D8               	btfss	status,0,c
  8200   0021AC  0635               	decf	(___flmul@temp+1)^0,f,c
  8201   0021AE                     l5524:
  8202   0021AE  AE32               	btfss	(___flmul@prod+2)^0,7,c
  8203   0021B0  EFDC  F010         	goto	u6131
  8204   0021B4  EFDE  F010         	goto	u6130
  8205   0021B8                     u6131:
  8206   0021B8  EFC2  F010         	goto	l5518
  8207   0021BC                     u6130:
  8208   0021BC  0E00               	movlw	0
  8209   0021BE  6E2A               	movwf	___flmul@aexp^0,c
  8210   0021C0  AE2E               	btfss	(___flmul@grs+3)^0,7,c
  8211   0021C2  EFE5  F010         	goto	u6141
  8212   0021C6  EFE7  F010         	goto	u6140
  8213   0021CA                     u6141:
  8214   0021CA  EF0B  F011         	goto	l1135
  8215   0021CE                     u6140:
  8216   0021CE  0EFF               	movlw	255
  8217   0021D0  142B               	andwf	___flmul@grs^0,w,c
  8218   0021D2  6E25               	movwf	??___flmul^0,c
  8219   0021D4  0EFF               	movlw	255
  8220   0021D6  142C               	andwf	(___flmul@grs+1)^0,w,c
  8221   0021D8  6E26               	movwf	(??___flmul+1)^0,c
  8222   0021DA  0EFF               	movlw	255
  8223   0021DC  142D               	andwf	(___flmul@grs+2)^0,w,c
  8224   0021DE  6E27               	movwf	(??___flmul+2)^0,c
  8225   0021E0  0E7F               	movlw	127
  8226   0021E2  142E               	andwf	(___flmul@grs+3)^0,w,c
  8227   0021E4  6E28               	movwf	(??___flmul+3)^0,c
  8228   0021E6  5025               	movf	??___flmul^0,w,c
  8229   0021E8  1026               	iorwf	(??___flmul+1)^0,w,c
  8230   0021EA  1027               	iorwf	(??___flmul+2)^0,w,c
  8231   0021EC  1028               	iorwf	(??___flmul+3)^0,w,c
  8232   0021EE  B4D8               	btfsc	status,2,c
  8233   0021F0  EFFC  F010         	goto	u6151
  8234   0021F4  EFFE  F010         	goto	u6150
  8235   0021F8                     u6151:
  8236   0021F8  EF02  F011         	goto	l1136
  8237   0021FC                     u6150:
  8238   0021FC                     l5532:
  8239   0021FC  0E01               	movlw	1
  8240   0021FE  6E2A               	movwf	___flmul@aexp^0,c
  8241   002200  EF0B  F011         	goto	l1135
  8242   002204                     l1136:
  8243   002204  A030               	btfss	___flmul@prod^0,0,c
  8244   002206  EF07  F011         	goto	u6161
  8245   00220A  EF09  F011         	goto	u6160
  8246   00220E                     u6161:
  8247   00220E  EF0B  F011         	goto	l1135
  8248   002212                     u6160:
  8249   002212  EFFE  F010         	goto	l5532
  8250   002216                     l1135:
  8251   002216  502A               	movf	___flmul@aexp^0,w,c
  8252   002218  B4D8               	btfsc	status,2,c
  8253   00221A  EF11  F011         	goto	u6171
  8254   00221E  EF13  F011         	goto	u6170
  8255   002222                     u6171:
  8256   002222  EF37  F011         	goto	l5544
  8257   002226                     u6170:
  8258   002226  0E01               	movlw	1
  8259   002228  2630               	addwf	___flmul@prod^0,f,c
  8260   00222A  0E00               	movlw	0
  8261   00222C  2231               	addwfc	(___flmul@prod+1)^0,f,c
  8262   00222E  2232               	addwfc	(___flmul@prod+2)^0,f,c
  8263   002230  2233               	addwfc	(___flmul@prod+3)^0,f,c
  8264   002232  A033               	btfss	(___flmul@prod+3)^0,0,c
  8265   002234  EF1E  F011         	goto	u6181
  8266   002238  EF20  F011         	goto	u6180
  8267   00223C                     u6181:
  8268   00223C  EF37  F011         	goto	l5544
  8269   002240                     u6180:
  8270   002240  C030  F025         	movff	___flmul@prod,??___flmul
  8271   002244  C031  F026         	movff	___flmul@prod+1,??___flmul+1
  8272   002248  C032  F027         	movff	___flmul@prod+2,??___flmul+2
  8273   00224C  C033  F028         	movff	___flmul@prod+3,??___flmul+3
  8274   002250  3428               	rlcf	(??___flmul+3)^0,w,c
  8275   002252  3228               	rrcf	(??___flmul+3)^0,f,c
  8276   002254  3227               	rrcf	(??___flmul+2)^0,f,c
  8277   002256  3226               	rrcf	(??___flmul+1)^0,f,c
  8278   002258  3225               	rrcf	??___flmul^0,f,c
  8279   00225A  C025  F030         	movff	??___flmul,___flmul@prod
  8280   00225E  C026  F031         	movff	??___flmul+1,___flmul@prod+1
  8281   002262  C027  F032         	movff	??___flmul+2,___flmul@prod+2
  8282   002266  C028  F033         	movff	??___flmul+3,___flmul@prod+3
  8283   00226A  4A34               	infsnz	___flmul@temp^0,f,c
  8284   00226C  2A35               	incf	(___flmul@temp+1)^0,f,c
  8285   00226E                     l5544:
  8286   00226E  BE35               	btfsc	(___flmul@temp+1)^0,7,c
  8287   002270  EF42  F011         	goto	u6191
  8288   002274  5035               	movf	(___flmul@temp+1)^0,w,c
  8289   002276  E108               	bnz	u6190
  8290   002278  2834               	incf	___flmul@temp^0,w,c
  8291   00227A  A0D8               	btfss	status,0,c
  8292   00227C  EF42  F011         	goto	u6191
  8293   002280  EF44  F011         	goto	u6190
  8294   002284                     u6191:
  8295   002284  EF4E  F011         	goto	l5548
  8296   002288                     u6190:
  8297   002288  0E00               	movlw	0
  8298   00228A  6E30               	movwf	___flmul@prod^0,c
  8299   00228C  0E00               	movlw	0
  8300   00228E  6E31               	movwf	(___flmul@prod+1)^0,c
  8301   002290  0E80               	movlw	128
  8302   002292  6E32               	movwf	(___flmul@prod+2)^0,c
  8303   002294  0E7F               	movlw	127
  8304   002296  6E33               	movwf	(___flmul@prod+3)^0,c
  8305   002298  EF7C  F011         	goto	l5560
  8306   00229C                     l5548:
  8307   00229C  BE35               	btfsc	(___flmul@temp+1)^0,7,c
  8308   00229E  EF5B  F011         	goto	u6200
  8309   0022A2  5035               	movf	(___flmul@temp+1)^0,w,c
  8310   0022A4  E106               	bnz	u6201
  8311   0022A6  0434               	decf	___flmul@temp^0,w,c
  8312   0022A8  B0D8               	btfsc	status,0,c
  8313   0022AA  EF59  F011         	goto	u6201
  8314   0022AE  EF5B  F011         	goto	u6200
  8315   0022B2                     u6201:
  8316   0022B2  EF67  F011         	goto	l1143
  8317   0022B6                     u6200:
  8318   0022B6  0E00               	movlw	0
  8319   0022B8  6E30               	movwf	___flmul@prod^0,c
  8320   0022BA  0E00               	movlw	0
  8321   0022BC  6E31               	movwf	(___flmul@prod+1)^0,c
  8322   0022BE  0E00               	movlw	0
  8323   0022C0  6E32               	movwf	(___flmul@prod+2)^0,c
  8324   0022C2  0E00               	movlw	0
  8325   0022C4  6E33               	movwf	(___flmul@prod+3)^0,c
  8326   0022C6  0E00               	movlw	0
  8327   0022C8  6E29               	movwf	___flmul@sign^0,c
  8328   0022CA  EF7C  F011         	goto	l5560
  8329   0022CE                     l1143:
  8330   0022CE  C034  F02F         	movff	___flmul@temp,___flmul@bexp
  8331   0022D2  0EFF               	movlw	255
  8332   0022D4  1630               	andwf	___flmul@prod^0,f,c
  8333   0022D6  0EFF               	movlw	255
  8334   0022D8  1631               	andwf	(___flmul@prod+1)^0,f,c
  8335   0022DA  0E7F               	movlw	127
  8336   0022DC  1632               	andwf	(___flmul@prod+2)^0,f,c
  8337   0022DE  0E00               	movlw	0
  8338   0022E0  1633               	andwf	(___flmul@prod+3)^0,f,c
  8339   0022E2  A02F               	btfss	___flmul@bexp^0,0,c
  8340   0022E4  EF76  F011         	goto	u6211
  8341   0022E8  EF78  F011         	goto	u6210
  8342   0022EC                     u6211:
  8343   0022EC  EF79  F011         	goto	l5558
  8344   0022F0                     u6210:
  8345   0022F0  8E32               	bsf	(___flmul@prod+2)^0,7,c
  8346   0022F2                     l5558:
  8347   0022F2  90D8               	bcf	status,0,c
  8348   0022F4  302F               	rrcf	___flmul@bexp^0,w,c
  8349   0022F6  6E33               	movwf	(___flmul@prod+3)^0,c
  8350   0022F8                     l5560:
  8351   0022F8  5029               	movf	___flmul@sign^0,w,c
  8352   0022FA  1233               	iorwf	(___flmul@prod+3)^0,f,c
  8353   0022FC  C030  F01D         	movff	___flmul@prod,?___flmul
  8354   002300  C031  F01E         	movff	___flmul@prod+1,?___flmul+1
  8355   002304  C032  F01F         	movff	___flmul@prod+2,?___flmul+2
  8356   002308  C033  F020         	movff	___flmul@prod+3,?___flmul+3
  8357   00230C                     l1130:
  8358   00230C  0012               	return		;funcret
  8359   00230E                     __end_of___flmul:
  8360                           	callstack 0
  8361                           
  8362 ;; *************** function ___flge *****************
  8363 ;; Defined at:
  8364 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\flge.c"
  8365 ;; Parameters:    Size  Location     Type
  8366 ;;  ff1             4   28[COMRAM] unsigned char 
  8367 ;;  ff2             4   32[COMRAM] unsigned char 
  8368 ;; Auto vars:     Size  Location     Type
  8369 ;;		None
  8370 ;; Return value:  Size  Location     Type
  8371 ;;		None               void
  8372 ;; Registers used:
  8373 ;;		wreg, status,2, status,0
  8374 ;; Tracked objects:
  8375 ;;		On entry : 0/0
  8376 ;;		On exit  : 0/0
  8377 ;;		Unchanged: 0/0
  8378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8379 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8381 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8382 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8383 ;;Total ram usage:       12 bytes
  8384 ;; Hardware stack levels used: 1
  8385 ;; Hardware stack levels required when called: 2
  8386 ;; This function calls:
  8387 ;;		Nothing
  8388 ;; This function is called by:
  8389 ;;		_colorDetect
  8390 ;;		_main
  8391 ;; This function uses a non-reentrant model
  8392 ;;
  8393                           
  8394                           	psect	text37
  8395   0038A2                     __ptext37:
  8396                           	callstack 0
  8397   0038A2                     ___flge:
  8398                           	callstack 27
  8399   0038A2  0E00               	movlw	0
  8400   0038A4  141D               	andwf	___flge@ff1^0,w,c
  8401   0038A6  6E25               	movwf	??___flge^0,c
  8402   0038A8  0E00               	movlw	0
  8403   0038AA  141E               	andwf	(___flge@ff1+1)^0,w,c
  8404   0038AC  6E26               	movwf	(??___flge+1)^0,c
  8405   0038AE  0E80               	movlw	128
  8406   0038B0  141F               	andwf	(___flge@ff1+2)^0,w,c
  8407   0038B2  6E27               	movwf	(??___flge+2)^0,c
  8408   0038B4  0E7F               	movlw	127
  8409   0038B6  1420               	andwf	(___flge@ff1+3)^0,w,c
  8410   0038B8  6E28               	movwf	(??___flge+3)^0,c
  8411   0038BA  5025               	movf	??___flge^0,w,c
  8412   0038BC  1026               	iorwf	(??___flge+1)^0,w,c
  8413   0038BE  1027               	iorwf	(??___flge+2)^0,w,c
  8414   0038C0  1028               	iorwf	(??___flge+3)^0,w,c
  8415   0038C2  A4D8               	btfss	status,2,c
  8416   0038C4  EF66  F01C         	goto	u6221
  8417   0038C8  EF68  F01C         	goto	u6220
  8418   0038CC                     u6221:
  8419   0038CC  EF70  F01C         	goto	l5576
  8420   0038D0                     u6220:
  8421   0038D0  0E00               	movlw	0
  8422   0038D2  6E1D               	movwf	___flge@ff1^0,c
  8423   0038D4  0E00               	movlw	0
  8424   0038D6  6E1E               	movwf	(___flge@ff1+1)^0,c
  8425   0038D8  0E00               	movlw	0
  8426   0038DA  6E1F               	movwf	(___flge@ff1+2)^0,c
  8427   0038DC  0E00               	movlw	0
  8428   0038DE  6E20               	movwf	(___flge@ff1+3)^0,c
  8429   0038E0                     l5576:
  8430   0038E0  0E00               	movlw	0
  8431   0038E2  1421               	andwf	___flge@ff2^0,w,c
  8432   0038E4  6E25               	movwf	??___flge^0,c
  8433   0038E6  0E00               	movlw	0
  8434   0038E8  1422               	andwf	(___flge@ff2+1)^0,w,c
  8435   0038EA  6E26               	movwf	(??___flge+1)^0,c
  8436   0038EC  0E80               	movlw	128
  8437   0038EE  1423               	andwf	(___flge@ff2+2)^0,w,c
  8438   0038F0  6E27               	movwf	(??___flge+2)^0,c
  8439   0038F2  0E7F               	movlw	127
  8440   0038F4  1424               	andwf	(___flge@ff2+3)^0,w,c
  8441   0038F6  6E28               	movwf	(??___flge+3)^0,c
  8442   0038F8  5025               	movf	??___flge^0,w,c
  8443   0038FA  1026               	iorwf	(??___flge+1)^0,w,c
  8444   0038FC  1027               	iorwf	(??___flge+2)^0,w,c
  8445   0038FE  1028               	iorwf	(??___flge+3)^0,w,c
  8446   003900  A4D8               	btfss	status,2,c
  8447   003902  EF85  F01C         	goto	u6231
  8448   003906  EF87  F01C         	goto	u6230
  8449   00390A                     u6231:
  8450   00390A  EF8F  F01C         	goto	l5580
  8451   00390E                     u6230:
  8452   00390E  0E00               	movlw	0
  8453   003910  6E21               	movwf	___flge@ff2^0,c
  8454   003912  0E00               	movlw	0
  8455   003914  6E22               	movwf	(___flge@ff2+1)^0,c
  8456   003916  0E00               	movlw	0
  8457   003918  6E23               	movwf	(___flge@ff2+2)^0,c
  8458   00391A  0E00               	movlw	0
  8459   00391C  6E24               	movwf	(___flge@ff2+3)^0,c
  8460   00391E                     l5580:
  8461   00391E  AE20               	btfss	(___flge@ff1+3)^0,7,c
  8462   003920  EF94  F01C         	goto	u6241
  8463   003924  EF96  F01C         	goto	u6240
  8464   003928                     u6241:
  8465   003928  EF9F  F01C         	goto	l5584
  8466   00392C                     u6240:
  8467   00392C  6C1D               	negf	___flge@ff1^0,c
  8468   00392E  1E1E               	comf	(___flge@ff1+1)^0,f,c
  8469   003930  B0D8               	btfsc	status,0,c
  8470   003932  2A1E               	incf	(___flge@ff1+1)^0,f,c
  8471   003934  1E1F               	comf	(___flge@ff1+2)^0,f,c
  8472   003936  B0D8               	btfsc	status,0,c
  8473   003938  2A1F               	incf	(___flge@ff1+2)^0,f,c
  8474   00393A  0E80               	movlw	128
  8475   00393C  5620               	subfwb	(___flge@ff1+3)^0,f,c
  8476   00393E                     l5584:
  8477   00393E  AE24               	btfss	(___flge@ff2+3)^0,7,c
  8478   003940  EFA4  F01C         	goto	u6251
  8479   003944  EFA6  F01C         	goto	u6250
  8480   003948                     u6251:
  8481   003948  EFAF  F01C         	goto	l777
  8482   00394C                     u6250:
  8483   00394C  6C21               	negf	___flge@ff2^0,c
  8484   00394E  1E22               	comf	(___flge@ff2+1)^0,f,c
  8485   003950  B0D8               	btfsc	status,0,c
  8486   003952  2A22               	incf	(___flge@ff2+1)^0,f,c
  8487   003954  1E23               	comf	(___flge@ff2+2)^0,f,c
  8488   003956  B0D8               	btfsc	status,0,c
  8489   003958  2A23               	incf	(___flge@ff2+2)^0,f,c
  8490   00395A  0E80               	movlw	128
  8491   00395C  5624               	subfwb	(___flge@ff2+3)^0,f,c
  8492   00395E                     l777:
  8493   00395E  0E00               	movlw	0
  8494   003960  1A1D               	xorwf	___flge@ff1^0,f,c
  8495   003962  0E00               	movlw	0
  8496   003964  1A1E               	xorwf	(___flge@ff1+1)^0,f,c
  8497   003966  0E00               	movlw	0
  8498   003968  1A1F               	xorwf	(___flge@ff1+2)^0,f,c
  8499   00396A  0E80               	movlw	128
  8500   00396C  1A20               	xorwf	(___flge@ff1+3)^0,f,c
  8501   00396E  0E00               	movlw	0
  8502   003970  1A21               	xorwf	___flge@ff2^0,f,c
  8503   003972  0E00               	movlw	0
  8504   003974  1A22               	xorwf	(___flge@ff2+1)^0,f,c
  8505   003976  0E00               	movlw	0
  8506   003978  1A23               	xorwf	(___flge@ff2+2)^0,f,c
  8507   00397A  0E80               	movlw	128
  8508   00397C  1A24               	xorwf	(___flge@ff2+3)^0,f,c
  8509   00397E  5021               	movf	___flge@ff2^0,w,c
  8510   003980  5C1D               	subwf	___flge@ff1^0,w,c
  8511   003982  5022               	movf	(___flge@ff2+1)^0,w,c
  8512   003984  581E               	subwfb	(___flge@ff1+1)^0,w,c
  8513   003986  5023               	movf	(___flge@ff2+2)^0,w,c
  8514   003988  581F               	subwfb	(___flge@ff1+2)^0,w,c
  8515   00398A  5024               	movf	(___flge@ff2+3)^0,w,c
  8516   00398C  5820               	subwfb	(___flge@ff1+3)^0,w,c
  8517   00398E  B0D8               	btfsc	status,0,c
  8518   003990  EFCC  F01C         	goto	u6261
  8519   003994  EFCE  F01C         	goto	u6260
  8520   003998                     u6261:
  8521   003998  EFD1  F01C         	goto	l5590
  8522   00399C                     u6260:
  8523   00399C  90D8               	bcf	status,0,c
  8524   00399E  EFD2  F01C         	goto	l782
  8525   0039A2                     l5590:
  8526   0039A2  80D8               	bsf	status,0,c
  8527   0039A4                     l782:
  8528   0039A4  0012               	return		;funcret
  8529   0039A6                     __end_of___flge:
  8530                           	callstack 0
  8531                           
  8532 ;; *************** function ___fldiv *****************
  8533 ;; Defined at:
  8534 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\sprcdiv.c"
  8535 ;; Parameters:    Size  Location     Type
  8536 ;;  b               4   53[COMRAM] unsigned char 
  8537 ;;  a               4   57[COMRAM] unsigned char 
  8538 ;; Auto vars:     Size  Location     Type
  8539 ;;  grs             4   72[COMRAM] unsigned long 
  8540 ;;  rem             4   65[COMRAM] unsigned long 
  8541 ;;  new_exp         2   70[COMRAM] short 
  8542 ;;  aexp            1   77[COMRAM] unsigned char 
  8543 ;;  bexp            1   76[COMRAM] unsigned char 
  8544 ;;  sign            1   69[COMRAM] unsigned char 
  8545 ;; Return value:  Size  Location     Type
  8546 ;;                  4   53[COMRAM] unsigned char 
  8547 ;; Registers used:
  8548 ;;		wreg, status,2, status,0
  8549 ;; Tracked objects:
  8550 ;;		On entry : 0/0
  8551 ;;		On exit  : 0/0
  8552 ;;		Unchanged: 0/0
  8553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8554 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8555 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8556 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8557 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8558 ;;Total ram usage:       25 bytes
  8559 ;; Hardware stack levels used: 1
  8560 ;; Hardware stack levels required when called: 2
  8561 ;; This function calls:
  8562 ;;		Nothing
  8563 ;; This function is called by:
  8564 ;;		_colorDetect
  8565 ;;		_main
  8566 ;; This function uses a non-reentrant model
  8567 ;;
  8568                           
  8569                           	psect	text38
  8570   00230E                     __ptext38:
  8571                           	callstack 0
  8572   00230E                     ___fldiv:
  8573                           	callstack 27
  8574   00230E  5039               	movf	(___fldiv@b+3)^0,w,c
  8575   002310  0B80               	andlw	128
  8576   002312  6E46               	movwf	___fldiv@sign^0,c
  8577   002314  5039               	movf	(___fldiv@b+3)^0,w,c
  8578   002316  2439               	addwf	(___fldiv@b+3)^0,w,c
  8579   002318  6E4D               	movwf	___fldiv@bexp^0,c
  8580   00231A  AE38               	btfss	(___fldiv@b+2)^0,7,c
  8581   00231C  EF92  F011         	goto	u5801
  8582   002320  EF94  F011         	goto	u5800
  8583   002324                     u5801:
  8584   002324  EF95  F011         	goto	l5304
  8585   002328                     u5800:
  8586   002328  804D               	bsf	___fldiv@bexp^0,0,c
  8587   00232A                     l5304:
  8588   00232A  504D               	movf	___fldiv@bexp^0,w,c
  8589   00232C  B4D8               	btfsc	status,2,c
  8590   00232E  EF9B  F011         	goto	u5811
  8591   002332  EF9D  F011         	goto	u5810
  8592   002336                     u5811:
  8593   002336  EFB2  F011         	goto	l5314
  8594   00233A                     u5810:
  8595   00233A  284D               	incf	___fldiv@bexp^0,w,c
  8596   00233C  A4D8               	btfss	status,2,c
  8597   00233E  EFA3  F011         	goto	u5821
  8598   002342  EFA5  F011         	goto	u5820
  8599   002346                     u5821:
  8600   002346  EFAD  F011         	goto	l5310
  8601   00234A                     u5820:
  8602   00234A  0E00               	movlw	0
  8603   00234C  6E36               	movwf	___fldiv@b^0,c
  8604   00234E  0E00               	movlw	0
  8605   002350  6E37               	movwf	(___fldiv@b+1)^0,c
  8606   002352  0E00               	movlw	0
  8607   002354  6E38               	movwf	(___fldiv@b+2)^0,c
  8608   002356  0E00               	movlw	0
  8609   002358  6E39               	movwf	(___fldiv@b+3)^0,c
  8610   00235A                     l5310:
  8611   00235A  8E38               	bsf	(___fldiv@b+2)^0,7,c
  8612   00235C  0E00               	movlw	0
  8613   00235E  6E39               	movwf	(___fldiv@b+3)^0,c
  8614   002360  EFBA  F011         	goto	l5316
  8615   002364                     l5314:
  8616   002364  0E00               	movlw	0
  8617   002366  6E36               	movwf	___fldiv@b^0,c
  8618   002368  0E00               	movlw	0
  8619   00236A  6E37               	movwf	(___fldiv@b+1)^0,c
  8620   00236C  0E00               	movlw	0
  8621   00236E  6E38               	movwf	(___fldiv@b+2)^0,c
  8622   002370  0E00               	movlw	0
  8623   002372  6E39               	movwf	(___fldiv@b+3)^0,c
  8624   002374                     l5316:
  8625   002374  503D               	movf	(___fldiv@a+3)^0,w,c
  8626   002376  0B80               	andlw	128
  8627   002378  1A46               	xorwf	___fldiv@sign^0,f,c
  8628   00237A  503D               	movf	(___fldiv@a+3)^0,w,c
  8629   00237C  243D               	addwf	(___fldiv@a+3)^0,w,c
  8630   00237E  6E4E               	movwf	___fldiv@aexp^0,c
  8631   002380  AE3C               	btfss	(___fldiv@a+2)^0,7,c
  8632   002382  EFC5  F011         	goto	u5831
  8633   002386  EFC7  F011         	goto	u5830
  8634   00238A                     u5831:
  8635   00238A  EFC8  F011         	goto	l5324
  8636   00238E                     u5830:
  8637   00238E  804E               	bsf	___fldiv@aexp^0,0,c
  8638   002390                     l5324:
  8639   002390  504E               	movf	___fldiv@aexp^0,w,c
  8640   002392  B4D8               	btfsc	status,2,c
  8641   002394  EFCE  F011         	goto	u5841
  8642   002398  EFD0  F011         	goto	u5840
  8643   00239C                     u5841:
  8644   00239C  EFE5  F011         	goto	l5334
  8645   0023A0                     u5840:
  8646   0023A0  284E               	incf	___fldiv@aexp^0,w,c
  8647   0023A2  A4D8               	btfss	status,2,c
  8648   0023A4  EFD6  F011         	goto	u5851
  8649   0023A8  EFD8  F011         	goto	u5850
  8650   0023AC                     u5851:
  8651   0023AC  EFE0  F011         	goto	l5330
  8652   0023B0                     u5850:
  8653   0023B0  0E00               	movlw	0
  8654   0023B2  6E3A               	movwf	___fldiv@a^0,c
  8655   0023B4  0E00               	movlw	0
  8656   0023B6  6E3B               	movwf	(___fldiv@a+1)^0,c
  8657   0023B8  0E00               	movlw	0
  8658   0023BA  6E3C               	movwf	(___fldiv@a+2)^0,c
  8659   0023BC  0E00               	movlw	0
  8660   0023BE  6E3D               	movwf	(___fldiv@a+3)^0,c
  8661   0023C0                     l5330:
  8662   0023C0  8E3C               	bsf	(___fldiv@a+2)^0,7,c
  8663   0023C2  0E00               	movlw	0
  8664   0023C4  6E3D               	movwf	(___fldiv@a+3)^0,c
  8665   0023C6  EFED  F011         	goto	l5336
  8666   0023CA                     l5334:
  8667   0023CA  0E00               	movlw	0
  8668   0023CC  6E3A               	movwf	___fldiv@a^0,c
  8669   0023CE  0E00               	movlw	0
  8670   0023D0  6E3B               	movwf	(___fldiv@a+1)^0,c
  8671   0023D2  0E00               	movlw	0
  8672   0023D4  6E3C               	movwf	(___fldiv@a+2)^0,c
  8673   0023D6  0E00               	movlw	0
  8674   0023D8  6E3D               	movwf	(___fldiv@a+3)^0,c
  8675   0023DA                     l5336:
  8676   0023DA  503A               	movf	___fldiv@a^0,w,c
  8677   0023DC  103B               	iorwf	(___fldiv@a+1)^0,w,c
  8678   0023DE  103C               	iorwf	(___fldiv@a+2)^0,w,c
  8679   0023E0  103D               	iorwf	(___fldiv@a+3)^0,w,c
  8680   0023E2  A4D8               	btfss	status,2,c
  8681   0023E4  EFF6  F011         	goto	u5861
  8682   0023E8  EFF8  F011         	goto	u5860
  8683   0023EC                     u5861:
  8684   0023EC  EF10  F012         	goto	l5348
  8685   0023F0                     u5860:
  8686   0023F0  0E00               	movlw	0
  8687   0023F2  6E36               	movwf	___fldiv@b^0,c
  8688   0023F4  0E00               	movlw	0
  8689   0023F6  6E37               	movwf	(___fldiv@b+1)^0,c
  8690   0023F8  0E00               	movlw	0
  8691   0023FA  6E38               	movwf	(___fldiv@b+2)^0,c
  8692   0023FC  0E00               	movlw	0
  8693   0023FE  6E39               	movwf	(___fldiv@b+3)^0,c
  8694   002400  0E80               	movlw	128
  8695   002402  1238               	iorwf	(___fldiv@b+2)^0,f,c
  8696   002404  0E7F               	movlw	127
  8697   002406  1239               	iorwf	(___fldiv@b+3)^0,f,c
  8698   002408                     l5342:
  8699   002408  5046               	movf	___fldiv@sign^0,w,c
  8700   00240A  1239               	iorwf	(___fldiv@b+3)^0,f,c
  8701   00240C  C036  F036         	movff	___fldiv@b,?___fldiv
  8702   002410  C037  F037         	movff	___fldiv@b+1,?___fldiv+1
  8703   002414  C038  F038         	movff	___fldiv@b+2,?___fldiv+2
  8704   002418  C039  F039         	movff	___fldiv@b+3,?___fldiv+3
  8705   00241C  EF53  F013         	goto	l1094
  8706   002420                     l5348:
  8707   002420  504D               	movf	___fldiv@bexp^0,w,c
  8708   002422  A4D8               	btfss	status,2,c
  8709   002424  EF16  F012         	goto	u5871
  8710   002428  EF18  F012         	goto	u5870
  8711   00242C                     u5871:
  8712   00242C  EF22  F012         	goto	l5356
  8713   002430                     u5870:
  8714   002430  0E00               	movlw	0
  8715   002432  6E36               	movwf	?___fldiv^0,c
  8716   002434  0E00               	movlw	0
  8717   002436  6E37               	movwf	(?___fldiv+1)^0,c
  8718   002438  0E00               	movlw	0
  8719   00243A  6E38               	movwf	(?___fldiv+2)^0,c
  8720   00243C  0E00               	movlw	0
  8721   00243E  6E39               	movwf	(?___fldiv+3)^0,c
  8722   002440  EF53  F013         	goto	l1094
  8723   002444                     l5356:
  8724   002444  504E               	movf	___fldiv@aexp^0,w,c
  8725   002446  C04D  F03E         	movff	___fldiv@bexp,??___fldiv
  8726   00244A  6A3F               	clrf	(??___fldiv+1)^0,c
  8727   00244C  5E3E               	subwf	??___fldiv^0,f,c
  8728   00244E  0E00               	movlw	0
  8729   002450  5A3F               	subwfb	(??___fldiv+1)^0,f,c
  8730   002452  0E7F               	movlw	127
  8731   002454  243E               	addwf	??___fldiv^0,w,c
  8732   002456  6E47               	movwf	___fldiv@new_exp^0,c
  8733   002458  0E00               	movlw	0
  8734   00245A  203F               	addwfc	(??___fldiv+1)^0,w,c
  8735   00245C  6E48               	movwf	(___fldiv@new_exp+1)^0,c
  8736   00245E  C036  F042         	movff	___fldiv@b,___fldiv@rem
  8737   002462  C037  F043         	movff	___fldiv@b+1,___fldiv@rem+1
  8738   002466  C038  F044         	movff	___fldiv@b+2,___fldiv@rem+2
  8739   00246A  C039  F045         	movff	___fldiv@b+3,___fldiv@rem+3
  8740   00246E  0E00               	movlw	0
  8741   002470  6E36               	movwf	___fldiv@b^0,c
  8742   002472  0E00               	movlw	0
  8743   002474  6E37               	movwf	(___fldiv@b+1)^0,c
  8744   002476  0E00               	movlw	0
  8745   002478  6E38               	movwf	(___fldiv@b+2)^0,c
  8746   00247A  0E00               	movlw	0
  8747   00247C  6E39               	movwf	(___fldiv@b+3)^0,c
  8748   00247E  0E00               	movlw	0
  8749   002480  6E49               	movwf	___fldiv@grs^0,c
  8750   002482  0E00               	movlw	0
  8751   002484  6E4A               	movwf	(___fldiv@grs+1)^0,c
  8752   002486  0E00               	movlw	0
  8753   002488  6E4B               	movwf	(___fldiv@grs+2)^0,c
  8754   00248A  0E00               	movlw	0
  8755   00248C  6E4C               	movwf	(___fldiv@grs+3)^0,c
  8756   00248E  0E00               	movlw	0
  8757   002490  6E4E               	movwf	___fldiv@aexp^0,c
  8758   002492  EF83  F012         	goto	l1096
  8759   002496                     l5366:
  8760   002496  504E               	movf	___fldiv@aexp^0,w,c
  8761   002498  B4D8               	btfsc	status,2,c
  8762   00249A  EF51  F012         	goto	u5881
  8763   00249E  EF53  F012         	goto	u5880
  8764   0024A2                     u5881:
  8765   0024A2  EF6A  F012         	goto	l5374
  8766   0024A6                     u5880:
  8767   0024A6  90D8               	bcf	status,0,c
  8768   0024A8  3642               	rlcf	___fldiv@rem^0,f,c
  8769   0024AA  3643               	rlcf	(___fldiv@rem+1)^0,f,c
  8770   0024AC  3644               	rlcf	(___fldiv@rem+2)^0,f,c
  8771   0024AE  3645               	rlcf	(___fldiv@rem+3)^0,f,c
  8772   0024B0  90D8               	bcf	status,0,c
  8773   0024B2  3636               	rlcf	___fldiv@b^0,f,c
  8774   0024B4  3637               	rlcf	(___fldiv@b+1)^0,f,c
  8775   0024B6  3638               	rlcf	(___fldiv@b+2)^0,f,c
  8776   0024B8  3639               	rlcf	(___fldiv@b+3)^0,f,c
  8777   0024BA  AE4C               	btfss	(___fldiv@grs+3)^0,7,c
  8778   0024BC  EF62  F012         	goto	u5891
  8779   0024C0  EF64  F012         	goto	u5890
  8780   0024C4                     u5891:
  8781   0024C4  EF65  F012         	goto	l1099
  8782   0024C8                     u5890:
  8783   0024C8  8036               	bsf	___fldiv@b^0,0,c
  8784   0024CA                     l1099:
  8785   0024CA  90D8               	bcf	status,0,c
  8786   0024CC  3649               	rlcf	___fldiv@grs^0,f,c
  8787   0024CE  364A               	rlcf	(___fldiv@grs+1)^0,f,c
  8788   0024D0  364B               	rlcf	(___fldiv@grs+2)^0,f,c
  8789   0024D2  364C               	rlcf	(___fldiv@grs+3)^0,f,c
  8790   0024D4                     l5374:
  8791   0024D4  503A               	movf	___fldiv@a^0,w,c
  8792   0024D6  5C42               	subwf	___fldiv@rem^0,w,c
  8793   0024D8  503B               	movf	(___fldiv@a+1)^0,w,c
  8794   0024DA  5843               	subwfb	(___fldiv@rem+1)^0,w,c
  8795   0024DC  503C               	movf	(___fldiv@a+2)^0,w,c
  8796   0024DE  5844               	subwfb	(___fldiv@rem+2)^0,w,c
  8797   0024E0  503D               	movf	(___fldiv@a+3)^0,w,c
  8798   0024E2  5845               	subwfb	(___fldiv@rem+3)^0,w,c
  8799   0024E4  A0D8               	btfss	status,0,c
  8800   0024E6  EF77  F012         	goto	u5901
  8801   0024EA  EF79  F012         	goto	u5900
  8802   0024EE                     u5901:
  8803   0024EE  EF82  F012         	goto	l5380
  8804   0024F2                     u5900:
  8805   0024F2  8C4C               	bsf	(___fldiv@grs+3)^0,6,c
  8806   0024F4  503A               	movf	___fldiv@a^0,w,c
  8807   0024F6  5E42               	subwf	___fldiv@rem^0,f,c
  8808   0024F8  503B               	movf	(___fldiv@a+1)^0,w,c
  8809   0024FA  5A43               	subwfb	(___fldiv@rem+1)^0,f,c
  8810   0024FC  503C               	movf	(___fldiv@a+2)^0,w,c
  8811   0024FE  5A44               	subwfb	(___fldiv@rem+2)^0,f,c
  8812   002500  503D               	movf	(___fldiv@a+3)^0,w,c
  8813   002502  5A45               	subwfb	(___fldiv@rem+3)^0,f,c
  8814   002504                     l5380:
  8815   002504  2A4E               	incf	___fldiv@aexp^0,f,c
  8816   002506                     l1096:
  8817   002506  0E19               	movlw	25
  8818   002508  644E               	cpfsgt	___fldiv@aexp^0,c
  8819   00250A  EF89  F012         	goto	u5911
  8820   00250E  EF8B  F012         	goto	u5910
  8821   002512                     u5911:
  8822   002512  EF4B  F012         	goto	l5366
  8823   002516                     u5910:
  8824   002516  5042               	movf	___fldiv@rem^0,w,c
  8825   002518  1043               	iorwf	(___fldiv@rem+1)^0,w,c
  8826   00251A  1044               	iorwf	(___fldiv@rem+2)^0,w,c
  8827   00251C  1045               	iorwf	(___fldiv@rem+3)^0,w,c
  8828   00251E  B4D8               	btfsc	status,2,c
  8829   002520  EF94  F012         	goto	u5921
  8830   002524  EF96  F012         	goto	u5920
  8831   002528                     u5921:
  8832   002528  EFAE  F012         	goto	l5392
  8833   00252C                     u5920:
  8834   00252C  8049               	bsf	___fldiv@grs^0,0,c
  8835   00252E  EFAE  F012         	goto	l5392
  8836   002532                     l5386:
  8837   002532  90D8               	bcf	status,0,c
  8838   002534  3636               	rlcf	___fldiv@b^0,f,c
  8839   002536  3637               	rlcf	(___fldiv@b+1)^0,f,c
  8840   002538  3638               	rlcf	(___fldiv@b+2)^0,f,c
  8841   00253A  3639               	rlcf	(___fldiv@b+3)^0,f,c
  8842   00253C  AE4C               	btfss	(___fldiv@grs+3)^0,7,c
  8843   00253E  EFA3  F012         	goto	u5931
  8844   002542  EFA5  F012         	goto	u5930
  8845   002546                     u5931:
  8846   002546  EFA6  F012         	goto	l1105
  8847   00254A                     u5930:
  8848   00254A  8036               	bsf	___fldiv@b^0,0,c
  8849   00254C                     l1105:
  8850   00254C  90D8               	bcf	status,0,c
  8851   00254E  3649               	rlcf	___fldiv@grs^0,f,c
  8852   002550  364A               	rlcf	(___fldiv@grs+1)^0,f,c
  8853   002552  364B               	rlcf	(___fldiv@grs+2)^0,f,c
  8854   002554  364C               	rlcf	(___fldiv@grs+3)^0,f,c
  8855   002556  0647               	decf	___fldiv@new_exp^0,f,c
  8856   002558  A0D8               	btfss	status,0,c
  8857   00255A  0648               	decf	(___fldiv@new_exp+1)^0,f,c
  8858   00255C                     l5392:
  8859   00255C  AE38               	btfss	(___fldiv@b+2)^0,7,c
  8860   00255E  EFB3  F012         	goto	u5941
  8861   002562  EFB5  F012         	goto	u5940
  8862   002566                     u5941:
  8863   002566  EF99  F012         	goto	l5386
  8864   00256A                     u5940:
  8865   00256A  0E00               	movlw	0
  8866   00256C  6E4E               	movwf	___fldiv@aexp^0,c
  8867   00256E  AE4C               	btfss	(___fldiv@grs+3)^0,7,c
  8868   002570  EFBC  F012         	goto	u5951
  8869   002574  EFBE  F012         	goto	u5950
  8870   002578                     u5951:
  8871   002578  EFE2  F012         	goto	l1107
  8872   00257C                     u5950:
  8873   00257C  0EFF               	movlw	255
  8874   00257E  1449               	andwf	___fldiv@grs^0,w,c
  8875   002580  6E3E               	movwf	??___fldiv^0,c
  8876   002582  0EFF               	movlw	255
  8877   002584  144A               	andwf	(___fldiv@grs+1)^0,w,c
  8878   002586  6E3F               	movwf	(??___fldiv+1)^0,c
  8879   002588  0EFF               	movlw	255
  8880   00258A  144B               	andwf	(___fldiv@grs+2)^0,w,c
  8881   00258C  6E40               	movwf	(??___fldiv+2)^0,c
  8882   00258E  0E7F               	movlw	127
  8883   002590  144C               	andwf	(___fldiv@grs+3)^0,w,c
  8884   002592  6E41               	movwf	(??___fldiv+3)^0,c
  8885   002594  503E               	movf	??___fldiv^0,w,c
  8886   002596  103F               	iorwf	(??___fldiv+1)^0,w,c
  8887   002598  1040               	iorwf	(??___fldiv+2)^0,w,c
  8888   00259A  1041               	iorwf	(??___fldiv+3)^0,w,c
  8889   00259C  B4D8               	btfsc	status,2,c
  8890   00259E  EFD3  F012         	goto	u5961
  8891   0025A2  EFD5  F012         	goto	u5960
  8892   0025A6                     u5961:
  8893   0025A6  EFD9  F012         	goto	l1108
  8894   0025AA                     u5960:
  8895   0025AA                     l5400:
  8896   0025AA  0E01               	movlw	1
  8897   0025AC  6E4E               	movwf	___fldiv@aexp^0,c
  8898   0025AE  EFE2  F012         	goto	l1107
  8899   0025B2                     l1108:
  8900   0025B2  A036               	btfss	___fldiv@b^0,0,c
  8901   0025B4  EFDE  F012         	goto	u5971
  8902   0025B8  EFE0  F012         	goto	u5970
  8903   0025BC                     u5971:
  8904   0025BC  EFE2  F012         	goto	l1107
  8905   0025C0                     u5970:
  8906   0025C0  EFD5  F012         	goto	l5400
  8907   0025C4                     l1107:
  8908   0025C4  504E               	movf	___fldiv@aexp^0,w,c
  8909   0025C6  B4D8               	btfsc	status,2,c
  8910   0025C8  EFE8  F012         	goto	u5981
  8911   0025CC  EFEA  F012         	goto	u5980
  8912   0025D0                     u5981:
  8913   0025D0  EF0E  F013         	goto	l5412
  8914   0025D4                     u5980:
  8915   0025D4  0E01               	movlw	1
  8916   0025D6  2636               	addwf	___fldiv@b^0,f,c
  8917   0025D8  0E00               	movlw	0
  8918   0025DA  2237               	addwfc	(___fldiv@b+1)^0,f,c
  8919   0025DC  2238               	addwfc	(___fldiv@b+2)^0,f,c
  8920   0025DE  2239               	addwfc	(___fldiv@b+3)^0,f,c
  8921   0025E0  A039               	btfss	(___fldiv@b+3)^0,0,c
  8922   0025E2  EFF5  F012         	goto	u5991
  8923   0025E6  EFF7  F012         	goto	u5990
  8924   0025EA                     u5991:
  8925   0025EA  EF0E  F013         	goto	l5412
  8926   0025EE                     u5990:
  8927   0025EE  C036  F03E         	movff	___fldiv@b,??___fldiv
  8928   0025F2  C037  F03F         	movff	___fldiv@b+1,??___fldiv+1
  8929   0025F6  C038  F040         	movff	___fldiv@b+2,??___fldiv+2
  8930   0025FA  C039  F041         	movff	___fldiv@b+3,??___fldiv+3
  8931   0025FE  3441               	rlcf	(??___fldiv+3)^0,w,c
  8932   002600  3241               	rrcf	(??___fldiv+3)^0,f,c
  8933   002602  3240               	rrcf	(??___fldiv+2)^0,f,c
  8934   002604  323F               	rrcf	(??___fldiv+1)^0,f,c
  8935   002606  323E               	rrcf	??___fldiv^0,f,c
  8936   002608  C03E  F036         	movff	??___fldiv,___fldiv@b
  8937   00260C  C03F  F037         	movff	??___fldiv+1,___fldiv@b+1
  8938   002610  C040  F038         	movff	??___fldiv+2,___fldiv@b+2
  8939   002614  C041  F039         	movff	??___fldiv+3,___fldiv@b+3
  8940   002618  4A47               	infsnz	___fldiv@new_exp^0,f,c
  8941   00261A  2A48               	incf	(___fldiv@new_exp+1)^0,f,c
  8942   00261C                     l5412:
  8943   00261C  BE48               	btfsc	(___fldiv@new_exp+1)^0,7,c
  8944   00261E  EF19  F013         	goto	u6001
  8945   002622  5048               	movf	(___fldiv@new_exp+1)^0,w,c
  8946   002624  E108               	bnz	u6000
  8947   002626  2847               	incf	___fldiv@new_exp^0,w,c
  8948   002628  A0D8               	btfss	status,0,c
  8949   00262A  EF19  F013         	goto	u6001
  8950   00262E  EF1B  F013         	goto	u6000
  8951   002632                     u6001:
  8952   002632  EF26  F013         	goto	l5416
  8953   002636                     u6000:
  8954   002636  0E00               	movlw	0
  8955   002638  6E48               	movwf	(___fldiv@new_exp+1)^0,c
  8956   00263A  6847               	setf	___fldiv@new_exp^0,c
  8957   00263C  0E00               	movlw	0
  8958   00263E  6E36               	movwf	___fldiv@b^0,c
  8959   002640  0E00               	movlw	0
  8960   002642  6E37               	movwf	(___fldiv@b+1)^0,c
  8961   002644  0E00               	movlw	0
  8962   002646  6E38               	movwf	(___fldiv@b+2)^0,c
  8963   002648  0E00               	movlw	0
  8964   00264A  6E39               	movwf	(___fldiv@b+3)^0,c
  8965   00264C                     l5416:
  8966   00264C  BE48               	btfsc	(___fldiv@new_exp+1)^0,7,c
  8967   00264E  EF33  F013         	goto	u6010
  8968   002652  5048               	movf	(___fldiv@new_exp+1)^0,w,c
  8969   002654  E106               	bnz	u6011
  8970   002656  0447               	decf	___fldiv@new_exp^0,w,c
  8971   002658  B0D8               	btfsc	status,0,c
  8972   00265A  EF31  F013         	goto	u6011
  8973   00265E  EF33  F013         	goto	u6010
  8974   002662                     u6011:
  8975   002662  EF41  F013         	goto	l5420
  8976   002666                     u6010:
  8977   002666  0E00               	movlw	0
  8978   002668  6E48               	movwf	(___fldiv@new_exp+1)^0,c
  8979   00266A  0E00               	movlw	0
  8980   00266C  6E47               	movwf	___fldiv@new_exp^0,c
  8981   00266E  0E00               	movlw	0
  8982   002670  6E36               	movwf	___fldiv@b^0,c
  8983   002672  0E00               	movlw	0
  8984   002674  6E37               	movwf	(___fldiv@b+1)^0,c
  8985   002676  0E00               	movlw	0
  8986   002678  6E38               	movwf	(___fldiv@b+2)^0,c
  8987   00267A  0E00               	movlw	0
  8988   00267C  6E39               	movwf	(___fldiv@b+3)^0,c
  8989   00267E  0E00               	movlw	0
  8990   002680  6E46               	movwf	___fldiv@sign^0,c
  8991   002682                     l5420:
  8992   002682  C047  F04D         	movff	___fldiv@new_exp,___fldiv@bexp
  8993   002686  A04D               	btfss	___fldiv@bexp^0,0,c
  8994   002688  EF48  F013         	goto	u6021
  8995   00268C  EF4A  F013         	goto	u6020
  8996   002690                     u6021:
  8997   002690  EF4D  F013         	goto	l5426
  8998   002694                     u6020:
  8999   002694  8E38               	bsf	(___fldiv@b+2)^0,7,c
  9000   002696  EF4E  F013         	goto	l5428
  9001   00269A                     l5426:
  9002   00269A  9E38               	bcf	(___fldiv@b+2)^0,7,c
  9003   00269C                     l5428:
  9004   00269C  90D8               	bcf	status,0,c
  9005   00269E  304D               	rrcf	___fldiv@bexp^0,w,c
  9006   0026A0  6E39               	movwf	(___fldiv@b+3)^0,c
  9007   0026A2  EF04  F012         	goto	l5342
  9008   0026A6                     l1094:
  9009   0026A6  0012               	return		;funcret
  9010   0026A8                     __end_of___fldiv:
  9011                           	callstack 0
  9012                           
  9013 ;; *************** function _TxBufferedString *****************
  9014 ;; Defined at:
  9015 ;;		line 118 in file "serialTest.c"
  9016 ;; Parameters:    Size  Location     Type
  9017 ;;  string          2    5[COMRAM] PTR unsigned char 
  9018 ;;		 -> colorDetect@testString(20), 
  9019 ;; Auto vars:     Size  Location     Type
  9020 ;;		None
  9021 ;; Return value:  Size  Location     Type
  9022 ;;                  1    wreg      void 
  9023 ;; Registers used:
  9024 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9025 ;; Tracked objects:
  9026 ;;		On entry : 0/0
  9027 ;;		On exit  : 0/0
  9028 ;;		Unchanged: 0/0
  9029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9030 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9031 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9033 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9034 ;;Total ram usage:        2 bytes
  9035 ;; Hardware stack levels used: 1
  9036 ;; Hardware stack levels required when called: 3
  9037 ;; This function calls:
  9038 ;;		_putCharToTxBuf
  9039 ;; This function is called by:
  9040 ;;		_colorDetect
  9041 ;; This function uses a non-reentrant model
  9042 ;;
  9043                           
  9044                           	psect	text39
  9045   0044E2                     __ptext39:
  9046                           	callstack 0
  9047   0044E2                     _TxBufferedString:
  9048                           	callstack 26
  9049   0044E2                     
  9050                           ;serialTest.c: 121:     while(*string != 0) {putCharToTxBuf(*string++);}
  9051   0044E2  EF7C  F022         	goto	l5292
  9052   0044E6                     l5288:
  9053   0044E6  C006  FFD9         	movff	TxBufferedString@string,fsr2l
  9054   0044EA  C007  FFDA         	movff	TxBufferedString@string+1,fsr2h
  9055   0044EE  50DF               	movf	indf2,w,c
  9056   0044F0  ECCB  F022         	call	_putCharToTxBuf
  9057   0044F4  4A06               	infsnz	TxBufferedString@string^0,f,c
  9058   0044F6  2A07               	incf	(TxBufferedString@string+1)^0,f,c
  9059   0044F8                     l5292:
  9060   0044F8  C006  FFD9         	movff	TxBufferedString@string,fsr2l
  9061   0044FC  C007  FFDA         	movff	TxBufferedString@string+1,fsr2h
  9062   004500  50DF               	movf	indf2,w,c
  9063   004502  A4D8               	btfss	status,2,c
  9064   004504  EF86  F022         	goto	u5781
  9065   004508  EF88  F022         	goto	u5780
  9066   00450C                     u5781:
  9067   00450C  EF73  F022         	goto	l5288
  9068   004510                     u5780:
  9069   004510  0012               	return		;funcret
  9070   004512                     __end_of_TxBufferedString:
  9071                           	callstack 0
  9072                           
  9073 ;; *************** function _putCharToTxBuf *****************
  9074 ;; Defined at:
  9075 ;;		line 105 in file "serialTest.c"
  9076 ;; Parameters:    Size  Location     Type
  9077 ;;  byte            1    wreg     unsigned char 
  9078 ;; Auto vars:     Size  Location     Type
  9079 ;;  byte            1    4[COMRAM] unsigned char 
  9080 ;; Return value:  Size  Location     Type
  9081 ;;                  1    wreg      void 
  9082 ;; Registers used:
  9083 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9084 ;; Tracked objects:
  9085 ;;		On entry : 0/0
  9086 ;;		On exit  : 0/0
  9087 ;;		Unchanged: 0/0
  9088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9090 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9092 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9093 ;;Total ram usage:        1 bytes
  9094 ;; Hardware stack levels used: 1
  9095 ;; Hardware stack levels required when called: 2
  9096 ;; This function calls:
  9097 ;;		Nothing
  9098 ;; This function is called by:
  9099 ;;		_TxBufferedString
  9100 ;; This function uses a non-reentrant model
  9101 ;;
  9102                           
  9103                           	psect	text40
  9104   004596                     __ptext40:
  9105                           	callstack 0
  9106   004596                     _putCharToTxBuf:
  9107                           	callstack 26
  9108                           
  9109                           ;incstack = 0
  9110                           ;putCharToTxBuf@byte stored from wreg
  9111   004596  6E05               	movwf	putCharToTxBuf@byte^0,c
  9112   004598                     
  9113                           ;serialTest.c: 106:     if (TxBufWriteCnt>=60) {TxBufWriteCnt=0;}
  9114   004598  0E3B               	movlw	59
  9115   00459A  6458               	cpfsgt	_TxBufWriteCnt^0,c	;volatile
  9116   00459C  EFD2  F022         	goto	u5291
  9117   0045A0  EFD4  F022         	goto	u5290
  9118   0045A4                     u5291:
  9119   0045A4  EFD6  F022         	goto	l4928
  9120   0045A8                     u5290:
  9121   0045A8  0E00               	movlw	0
  9122   0045AA  6E58               	movwf	_TxBufWriteCnt^0,c	;volatile
  9123   0045AC                     l4928:
  9124                           
  9125                           ;serialTest.c: 107:     EUSART4TXbuf[TxBufWriteCnt++]=byte;
  9126   0045AC  0E00               	movlw	low _EUSART4TXbuf
  9127   0045AE  2458               	addwf	_TxBufWriteCnt^0,w,c	;volatile
  9128   0045B0  6ED9               	movwf	fsr2l,c
  9129   0045B2  6ADA               	clrf	fsr2h,c
  9130   0045B4  0E01               	movlw	high _EUSART4TXbuf
  9131   0045B6  22DA               	addwfc	fsr2h,f,c
  9132   0045B8  C005  FFDF         	movff	putCharToTxBuf@byte,indf2
  9133   0045BC  2A58               	incf	_TxBufWriteCnt^0,f,c	;volatile
  9134   0045BE  0012               	return		;funcret
  9135   0045C0                     __end_of_putCharToTxBuf:
  9136                           	callstack 0
  9137                           
  9138 ;; *************** function _ambientCal *****************
  9139 ;; Defined at:
  9140 ;;		line 98 in file "MazeRobot.X/color.c"
  9141 ;; Parameters:    Size  Location     Type
  9142 ;;  v               2   17[COMRAM] PTR struct RGB
  9143 ;;		 -> main@ambientRGBVal(8), 
  9144 ;; Auto vars:     Size  Location     Type
  9145 ;;  i               2   21[COMRAM] int 
  9146 ;; Return value:  Size  Location     Type
  9147 ;;                  1    wreg      void 
  9148 ;; Registers used:
  9149 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9150 ;; Tracked objects:
  9151 ;;		On entry : 0/0
  9152 ;;		On exit  : 0/0
  9153 ;;		Unchanged: 0/0
  9154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9155 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9156 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9157 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9158 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9159 ;;Total ram usage:        6 bytes
  9160 ;; Hardware stack levels used: 1
  9161 ;; Hardware stack levels required when called: 6
  9162 ;; This function calls:
  9163 ;;		_getColor
  9164 ;; This function is called by:
  9165 ;;		_main
  9166 ;; This function uses a non-reentrant model
  9167 ;;
  9168                           
  9169                           	psect	text41
  9170   003A8A                     __ptext41:
  9171                           	callstack 0
  9172   003A8A                     _ambientCal:
  9173                           	callstack 24
  9174   003A8A                     
  9175                           ;MazeRobot.X/color.c: 101:     for(int i = 0;i<20;i++){
  9176   003A8A  0E00               	movlw	0
  9177   003A8C  6E17               	movwf	(ambientCal@i+1)^0,c
  9178   003A8E  0E00               	movlw	0
  9179   003A90  6E16               	movwf	ambientCal@i^0,c
  9180   003A92                     l5656:
  9181                           
  9182                           ;MazeRobot.X/color.c: 102:             LATDbits.LATD7 = !LATDbits.LATD7;
  9183   003A92  AE7C               	btfss	124,7,c	;volatile
  9184   003A94  EF4E  F01D         	goto	u6371
  9185   003A98  EF52  F01D         	goto	u6370
  9186   003A9C                     u6371:
  9187   003A9C  6A14               	clrf	??_ambientCal^0,c
  9188   003A9E  2A14               	incf	??_ambientCal^0,f,c
  9189   003AA0  EF53  F01D         	goto	u6388
  9190   003AA4                     u6370:
  9191   003AA4  6A14               	clrf	??_ambientCal^0,c
  9192   003AA6                     u6388:
  9193   003AA6  3214               	rrcf	??_ambientCal^0,f,c
  9194   003AA8  3214               	rrcf	??_ambientCal^0,f,c
  9195   003AAA  507C               	movf	124,w,c	;volatile
  9196   003AAC  1814               	xorwf	??_ambientCal^0,w,c
  9197   003AAE  0B7F               	andlw	-129
  9198   003AB0  1814               	xorwf	??_ambientCal^0,w,c
  9199   003AB2  6E7C               	movwf	124,c	;volatile
  9200   003AB4                     
  9201                           ;MazeRobot.X/color.c: 103:             _delay((unsigned long)((100)*(64000000/4000.0)));
  9202   003AB4  0E09               	movlw	9
  9203   003AB6  6E15               	movwf	(??_ambientCal+1)^0,c
  9204   003AB8  0E1E               	movlw	30
  9205   003ABA  6E14               	movwf	??_ambientCal^0,c
  9206   003ABC  0EE4               	movlw	228
  9207   003ABE                     u7437:
  9208   003ABE  2EE8               	decfsz	wreg,f,c
  9209   003AC0  D7FE               	bra	u7437
  9210   003AC2  2E14               	decfsz	??_ambientCal^0,f,c
  9211   003AC4  D7FC               	bra	u7437
  9212   003AC6  2E15               	decfsz	(??_ambientCal+1)^0,f,c
  9213   003AC8  D7FA               	bra	u7437
  9214   003ACA  D000               	nop2	
  9215                           
  9216                           ;MazeRobot.X/color.c: 104:             }
  9217   003ACC  4A16               	infsnz	ambientCal@i^0,f,c
  9218   003ACE  2A17               	incf	(ambientCal@i+1)^0,f,c
  9219   003AD0  BE17               	btfsc	(ambientCal@i+1)^0,7,c
  9220   003AD2  EF74  F01D         	goto	u6391
  9221   003AD6  5017               	movf	(ambientCal@i+1)^0,w,c
  9222   003AD8  E109               	bnz	u6390
  9223   003ADA  0E14               	movlw	20
  9224   003ADC  5C16               	subwf	ambientCal@i^0,w,c
  9225   003ADE  A0D8               	btfss	status,0,c
  9226   003AE0  EF74  F01D         	goto	u6391
  9227   003AE4  EF76  F01D         	goto	u6390
  9228   003AE8                     u6391:
  9229   003AE8  EF49  F01D         	goto	l5656
  9230   003AEC                     u6390:
  9231   003AEC                     
  9232                           ;MazeRobot.X/color.c: 105:             LATDbits.LATD7 = !LATDbits.LATD7;
  9233   003AEC  AE7C               	btfss	124,7,c	;volatile
  9234   003AEE  EF7B  F01D         	goto	u6401
  9235   003AF2  EF7F  F01D         	goto	u6400
  9236   003AF6                     u6401:
  9237   003AF6  6A14               	clrf	??_ambientCal^0,c
  9238   003AF8  2A14               	incf	??_ambientCal^0,f,c
  9239   003AFA  EF80  F01D         	goto	u6418
  9240   003AFE                     u6400:
  9241   003AFE  6A14               	clrf	??_ambientCal^0,c
  9242   003B00                     u6418:
  9243   003B00  3214               	rrcf	??_ambientCal^0,f,c
  9244   003B02  3214               	rrcf	??_ambientCal^0,f,c
  9245   003B04  507C               	movf	124,w,c	;volatile
  9246   003B06  1814               	xorwf	??_ambientCal^0,w,c
  9247   003B08  0B7F               	andlw	-129
  9248   003B0A  1814               	xorwf	??_ambientCal^0,w,c
  9249   003B0C  6E7C               	movwf	124,c	;volatile
  9250   003B0E                     
  9251                           ;MazeRobot.X/color.c: 106:             _delay((unsigned long)((500)*(64000000/4000.0)));
  9252   003B0E  0E29               	movlw	41
  9253   003B10  6E15               	movwf	(??_ambientCal+1)^0,c
  9254   003B12  0E96               	movlw	150
  9255   003B14  6E14               	movwf	??_ambientCal^0,c
  9256   003B16  0E7F               	movlw	127
  9257   003B18                     u7447:
  9258   003B18  2EE8               	decfsz	wreg,f,c
  9259   003B1A  D7FE               	bra	u7447
  9260   003B1C  2E14               	decfsz	??_ambientCal^0,f,c
  9261   003B1E  D7FC               	bra	u7447
  9262   003B20  2E15               	decfsz	(??_ambientCal+1)^0,f,c
  9263   003B22  D7FA               	bra	u7447
  9264   003B24  F000               	nop	
  9265   003B26                     
  9266                           ;MazeRobot.X/color.c: 107:             getColor(v);
  9267   003B26  C012  F010         	movff	ambientCal@v,getColor@v
  9268   003B2A  C013  F011         	movff	ambientCal@v+1,getColor@v+1
  9269   003B2E  EC88  F020         	call	_getColor	;wreg free
  9270   003B32                     
  9271                           ;MazeRobot.X/color.c: 108:             _delay((unsigned long)((500)*(64000000/4000.0)));
  9272   003B32  0E29               	movlw	41
  9273   003B34  6E15               	movwf	(??_ambientCal+1)^0,c
  9274   003B36  0E96               	movlw	150
  9275   003B38  6E14               	movwf	??_ambientCal^0,c
  9276   003B3A  0E7F               	movlw	127
  9277   003B3C                     u7457:
  9278   003B3C  2EE8               	decfsz	wreg,f,c
  9279   003B3E  D7FE               	bra	u7457
  9280   003B40  2E14               	decfsz	??_ambientCal^0,f,c
  9281   003B42  D7FC               	bra	u7457
  9282   003B44  2E15               	decfsz	(??_ambientCal+1)^0,f,c
  9283   003B46  D7FA               	bra	u7457
  9284   003B48  F000               	nop	
  9285   003B4A                     
  9286                           ;MazeRobot.X/color.c: 109:             LATDbits.LATD7 = !LATDbits.LATD7;
  9287   003B4A  AE7C               	btfss	124,7,c	;volatile
  9288   003B4C  EFAA  F01D         	goto	u6421
  9289   003B50  EFAE  F01D         	goto	u6420
  9290   003B54                     u6421:
  9291   003B54  6A14               	clrf	??_ambientCal^0,c
  9292   003B56  2A14               	incf	??_ambientCal^0,f,c
  9293   003B58  EFAF  F01D         	goto	u6438
  9294   003B5C                     u6420:
  9295   003B5C  6A14               	clrf	??_ambientCal^0,c
  9296   003B5E                     u6438:
  9297   003B5E  3214               	rrcf	??_ambientCal^0,f,c
  9298   003B60  3214               	rrcf	??_ambientCal^0,f,c
  9299   003B62  507C               	movf	124,w,c	;volatile
  9300   003B64  1814               	xorwf	??_ambientCal^0,w,c
  9301   003B66  0B7F               	andlw	-129
  9302   003B68  1814               	xorwf	??_ambientCal^0,w,c
  9303   003B6A  6E7C               	movwf	124,c	;volatile
  9304   003B6C  0012               	return		;funcret
  9305   003B6E                     __end_of_ambientCal:
  9306                           	callstack 0
  9307                           
  9308 ;; *************** function _getColor *****************
  9309 ;; Defined at:
  9310 ;;		line 90 in file "MazeRobot.X/color.c"
  9311 ;; Parameters:    Size  Location     Type
  9312 ;;  v               2   15[COMRAM] PTR struct RGB
  9313 ;;		 -> main@whiteRGBVal(8), main@ambientRGBVal(8), main@RGBVal(8), colorDetect@RGBVal(8), 
  9314 ;; Auto vars:     Size  Location     Type
  9315 ;;		None
  9316 ;; Return value:  Size  Location     Type
  9317 ;;                  1    wreg      void 
  9318 ;; Registers used:
  9319 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9320 ;; Tracked objects:
  9321 ;;		On entry : 0/0
  9322 ;;		On exit  : 0/0
  9323 ;;		Unchanged: 0/0
  9324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9325 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9328 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9329 ;;Total ram usage:        2 bytes
  9330 ;; Hardware stack levels used: 1
  9331 ;; Hardware stack levels required when called: 5
  9332 ;; This function calls:
  9333 ;;		_color_read_Blue
  9334 ;;		_color_read_Clear
  9335 ;;		_color_read_Green
  9336 ;;		_color_read_Red
  9337 ;; This function is called by:
  9338 ;;		_ambientCal
  9339 ;;		_whiteCal
  9340 ;;		_colorDetect
  9341 ;;		_main
  9342 ;; This function uses a non-reentrant model
  9343 ;;
  9344                           
  9345                           	psect	text42
  9346   004110                     __ptext42:
  9347                           	callstack 0
  9348   004110                     _getColor:
  9349                           	callstack 24
  9350   004110                     
  9351                           ;MazeRobot.X/color.c: 91:     v->R = color_read_Red();
  9352   004110  EC31  F021         	call	_color_read_Red	;wreg free
  9353   004114  C010  FFD9         	movff	getColor@v,fsr2l
  9354   004118  C011  FFDA         	movff	getColor@v+1,fsr2h
  9355   00411C  C009  FFDE         	movff	?_color_read_Red,postinc2
  9356   004120  C00A  FFDD         	movff	?_color_read_Red+1,postdec2
  9357                           
  9358                           ;MazeRobot.X/color.c: 92:     v->G = color_read_Green();
  9359   004124  EC59  F021         	call	_color_read_Green	;wreg free
  9360   004128  EE20 F002          	lfsr	2,2
  9361   00412C  5010               	movf	getColor@v^0,w,c
  9362   00412E  26D9               	addwf	fsr2l,f,c
  9363   004130  5011               	movf	(getColor@v+1)^0,w,c
  9364   004132  22DA               	addwfc	fsr2h,f,c
  9365   004134  C009  FFDE         	movff	?_color_read_Green,postinc2
  9366   004138  C00A  FFDD         	movff	?_color_read_Green+1,postdec2
  9367                           
  9368                           ;MazeRobot.X/color.c: 93:     v->B = color_read_Blue();
  9369   00413C  ECA9  F021         	call	_color_read_Blue	;wreg free
  9370   004140  EE20 F004          	lfsr	2,4
  9371   004144  5010               	movf	getColor@v^0,w,c
  9372   004146  26D9               	addwf	fsr2l,f,c
  9373   004148  5011               	movf	(getColor@v+1)^0,w,c
  9374   00414A  22DA               	addwfc	fsr2h,f,c
  9375   00414C  C009  FFDE         	movff	?_color_read_Blue,postinc2
  9376   004150  C00A  FFDD         	movff	?_color_read_Blue+1,postdec2
  9377                           
  9378                           ;MazeRobot.X/color.c: 94:     v->C = color_read_Clear();
  9379   004154  EC81  F021         	call	_color_read_Clear	;wreg free
  9380   004158  EE20 F006          	lfsr	2,6
  9381   00415C  5010               	movf	getColor@v^0,w,c
  9382   00415E  26D9               	addwf	fsr2l,f,c
  9383   004160  5011               	movf	(getColor@v+1)^0,w,c
  9384   004162  22DA               	addwfc	fsr2h,f,c
  9385   004164  C009  FFDE         	movff	?_color_read_Clear,postinc2
  9386   004168  C00A  FFDD         	movff	?_color_read_Clear+1,postdec2
  9387   00416C  0012               	return		;funcret
  9388   00416E                     __end_of_getColor:
  9389                           	callstack 0
  9390                           
  9391 ;; *************** function _color_read_Red *****************
  9392 ;; Defined at:
  9393 ;;		line 32 in file "MazeRobot.X/color.c"
  9394 ;; Parameters:    Size  Location     Type
  9395 ;;		None
  9396 ;; Auto vars:     Size  Location     Type
  9397 ;;  tmp             2   13[COMRAM] unsigned int 
  9398 ;; Return value:  Size  Location     Type
  9399 ;;                  2    8[COMRAM] unsigned int 
  9400 ;; Registers used:
  9401 ;;		wreg, status,2, status,0, cstack
  9402 ;; Tracked objects:
  9403 ;;		On entry : 0/0
  9404 ;;		On exit  : 0/0
  9405 ;;		Unchanged: 0/0
  9406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9407 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9408 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9409 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9410 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9411 ;;Total ram usage:        7 bytes
  9412 ;; Hardware stack levels used: 1
  9413 ;; Hardware stack levels required when called: 4
  9414 ;; This function calls:
  9415 ;;		_I2C_2_Master_Read
  9416 ;;		_I2C_2_Master_RepStart
  9417 ;;		_I2C_2_Master_Start
  9418 ;;		_I2C_2_Master_Stop
  9419 ;;		_I2C_2_Master_Write
  9420 ;; This function is called by:
  9421 ;;		_getColor
  9422 ;; This function uses a non-reentrant model
  9423 ;;
  9424                           
  9425                           	psect	text43
  9426   004262                     __ptext43:
  9427                           	callstack 0
  9428   004262                     _color_read_Red:
  9429                           	callstack 24
  9430   004262                     
  9431                           ;MazeRobot.X/color.c: 34:  unsigned int tmp;;MazeRobot.X/color.c: 35:  I2C_2_Master_Star
      +                          t();
  9432   004262  EC5C  F023         	call	_I2C_2_Master_Start	;wreg free
  9433                           
  9434                           ;MazeRobot.X/color.c: 36:  I2C_2_Master_Write(0x52 | 0x00);
  9435   004266  0E52               	movlw	82
  9436   004268  EC51  F023         	call	_I2C_2_Master_Write
  9437                           
  9438                           ;MazeRobot.X/color.c: 37:  I2C_2_Master_Write(0xA0 | 0x16);
  9439   00426C  0EB6               	movlw	182
  9440   00426E  EC51  F023         	call	_I2C_2_Master_Write
  9441                           
  9442                           ;MazeRobot.X/color.c: 38:  I2C_2_Master_RepStart();
  9443   004272  EC61  F023         	call	_I2C_2_Master_RepStart	;wreg free
  9444                           
  9445                           ;MazeRobot.X/color.c: 39:  I2C_2_Master_Write(0x52 | 0x01);
  9446   004276  0E53               	movlw	83
  9447   004278  EC51  F023         	call	_I2C_2_Master_Write
  9448                           
  9449                           ;MazeRobot.X/color.c: 40:  tmp=I2C_2_Master_Read(1);
  9450   00427C  0E01               	movlw	1
  9451   00427E  EC16  F022         	call	_I2C_2_Master_Read
  9452   004282  6E0B               	movwf	??_color_read_Red^0,c
  9453   004284  500B               	movf	??_color_read_Red^0,w,c
  9454   004286  6E0E               	movwf	color_read_Red@tmp^0,c
  9455   004288  6A0F               	clrf	(color_read_Red@tmp+1)^0,c
  9456                           
  9457                           ;MazeRobot.X/color.c: 41:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  9458   00428A  0E00               	movlw	0
  9459   00428C  EC16  F022         	call	_I2C_2_Master_Read
  9460   004290  6E0B               	movwf	??_color_read_Red^0,c
  9461   004292  500B               	movf	??_color_read_Red^0,w,c
  9462   004294  6E0D               	movwf	(??_color_read_Red+2)^0,c
  9463   004296  6A0C               	clrf	(??_color_read_Red+1)^0,c
  9464   004298  500E               	movf	color_read_Red@tmp^0,w,c
  9465   00429A  100C               	iorwf	(??_color_read_Red+1)^0,w,c
  9466   00429C  6E0E               	movwf	color_read_Red@tmp^0,c
  9467   00429E  500F               	movf	(color_read_Red@tmp+1)^0,w,c
  9468   0042A0  100D               	iorwf	(??_color_read_Red+2)^0,w,c
  9469   0042A2  6E0F               	movwf	(color_read_Red@tmp+1)^0,c
  9470                           
  9471                           ;MazeRobot.X/color.c: 42:  I2C_2_Master_Stop();
  9472   0042A4  EC57  F023         	call	_I2C_2_Master_Stop	;wreg free
  9473   0042A8                     
  9474                           ;MazeRobot.X/color.c: 43:  return tmp;
  9475   0042A8  C00E  F009         	movff	color_read_Red@tmp,?_color_read_Red
  9476   0042AC  C00F  F00A         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  9477   0042B0  0012               	return		;funcret
  9478   0042B2                     __end_of_color_read_Red:
  9479                           	callstack 0
  9480                           
  9481 ;; *************** function _color_read_Green *****************
  9482 ;; Defined at:
  9483 ;;		line 46 in file "MazeRobot.X/color.c"
  9484 ;; Parameters:    Size  Location     Type
  9485 ;;		None
  9486 ;; Auto vars:     Size  Location     Type
  9487 ;;  tmp             2   13[COMRAM] unsigned int 
  9488 ;; Return value:  Size  Location     Type
  9489 ;;                  2    8[COMRAM] unsigned int 
  9490 ;; Registers used:
  9491 ;;		wreg, status,2, status,0, cstack
  9492 ;; Tracked objects:
  9493 ;;		On entry : 0/0
  9494 ;;		On exit  : 0/0
  9495 ;;		Unchanged: 0/0
  9496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9497 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9498 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9499 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9500 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9501 ;;Total ram usage:        7 bytes
  9502 ;; Hardware stack levels used: 1
  9503 ;; Hardware stack levels required when called: 4
  9504 ;; This function calls:
  9505 ;;		_I2C_2_Master_Read
  9506 ;;		_I2C_2_Master_RepStart
  9507 ;;		_I2C_2_Master_Start
  9508 ;;		_I2C_2_Master_Stop
  9509 ;;		_I2C_2_Master_Write
  9510 ;; This function is called by:
  9511 ;;		_getColor
  9512 ;; This function uses a non-reentrant model
  9513 ;;
  9514                           
  9515                           	psect	text44
  9516   0042B2                     __ptext44:
  9517                           	callstack 0
  9518   0042B2                     _color_read_Green:
  9519                           	callstack 24
  9520   0042B2                     
  9521                           ;MazeRobot.X/color.c: 48:  unsigned int tmp;;MazeRobot.X/color.c: 49:  I2C_2_Master_Star
      +                          t();
  9522   0042B2  EC5C  F023         	call	_I2C_2_Master_Start	;wreg free
  9523                           
  9524                           ;MazeRobot.X/color.c: 50:  I2C_2_Master_Write(0x52 | 0x00);
  9525   0042B6  0E52               	movlw	82
  9526   0042B8  EC51  F023         	call	_I2C_2_Master_Write
  9527                           
  9528                           ;MazeRobot.X/color.c: 51:  I2C_2_Master_Write(0xA0 | 0x18);
  9529   0042BC  0EB8               	movlw	184
  9530   0042BE  EC51  F023         	call	_I2C_2_Master_Write
  9531                           
  9532                           ;MazeRobot.X/color.c: 52:  I2C_2_Master_RepStart();
  9533   0042C2  EC61  F023         	call	_I2C_2_Master_RepStart	;wreg free
  9534                           
  9535                           ;MazeRobot.X/color.c: 53:  I2C_2_Master_Write(0x52 | 0x01);
  9536   0042C6  0E53               	movlw	83
  9537   0042C8  EC51  F023         	call	_I2C_2_Master_Write
  9538                           
  9539                           ;MazeRobot.X/color.c: 54:  tmp=I2C_2_Master_Read(1);
  9540   0042CC  0E01               	movlw	1
  9541   0042CE  EC16  F022         	call	_I2C_2_Master_Read
  9542   0042D2  6E0B               	movwf	??_color_read_Green^0,c
  9543   0042D4  500B               	movf	??_color_read_Green^0,w,c
  9544   0042D6  6E0E               	movwf	color_read_Green@tmp^0,c
  9545   0042D8  6A0F               	clrf	(color_read_Green@tmp+1)^0,c
  9546                           
  9547                           ;MazeRobot.X/color.c: 55:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  9548   0042DA  0E00               	movlw	0
  9549   0042DC  EC16  F022         	call	_I2C_2_Master_Read
  9550   0042E0  6E0B               	movwf	??_color_read_Green^0,c
  9551   0042E2  500B               	movf	??_color_read_Green^0,w,c
  9552   0042E4  6E0D               	movwf	(??_color_read_Green+2)^0,c
  9553   0042E6  6A0C               	clrf	(??_color_read_Green+1)^0,c
  9554   0042E8  500E               	movf	color_read_Green@tmp^0,w,c
  9555   0042EA  100C               	iorwf	(??_color_read_Green+1)^0,w,c
  9556   0042EC  6E0E               	movwf	color_read_Green@tmp^0,c
  9557   0042EE  500F               	movf	(color_read_Green@tmp+1)^0,w,c
  9558   0042F0  100D               	iorwf	(??_color_read_Green+2)^0,w,c
  9559   0042F2  6E0F               	movwf	(color_read_Green@tmp+1)^0,c
  9560                           
  9561                           ;MazeRobot.X/color.c: 56:  I2C_2_Master_Stop();
  9562   0042F4  EC57  F023         	call	_I2C_2_Master_Stop	;wreg free
  9563   0042F8                     
  9564                           ;MazeRobot.X/color.c: 57:  return tmp;
  9565   0042F8  C00E  F009         	movff	color_read_Green@tmp,?_color_read_Green
  9566   0042FC  C00F  F00A         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  9567   004300  0012               	return		;funcret
  9568   004302                     __end_of_color_read_Green:
  9569                           	callstack 0
  9570                           
  9571 ;; *************** function _color_read_Clear *****************
  9572 ;; Defined at:
  9573 ;;		line 75 in file "MazeRobot.X/color.c"
  9574 ;; Parameters:    Size  Location     Type
  9575 ;;		None
  9576 ;; Auto vars:     Size  Location     Type
  9577 ;;  tmp             2   13[COMRAM] unsigned int 
  9578 ;; Return value:  Size  Location     Type
  9579 ;;                  2    8[COMRAM] unsigned int 
  9580 ;; Registers used:
  9581 ;;		wreg, status,2, status,0, cstack
  9582 ;; Tracked objects:
  9583 ;;		On entry : 0/0
  9584 ;;		On exit  : 0/0
  9585 ;;		Unchanged: 0/0
  9586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9587 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9588 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9589 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9590 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9591 ;;Total ram usage:        7 bytes
  9592 ;; Hardware stack levels used: 1
  9593 ;; Hardware stack levels required when called: 4
  9594 ;; This function calls:
  9595 ;;		_I2C_2_Master_Read
  9596 ;;		_I2C_2_Master_RepStart
  9597 ;;		_I2C_2_Master_Start
  9598 ;;		_I2C_2_Master_Stop
  9599 ;;		_I2C_2_Master_Write
  9600 ;; This function is called by:
  9601 ;;		_getColor
  9602 ;; This function uses a non-reentrant model
  9603 ;;
  9604                           
  9605                           	psect	text45
  9606   004302                     __ptext45:
  9607                           	callstack 0
  9608   004302                     _color_read_Clear:
  9609                           	callstack 24
  9610   004302                     
  9611                           ;MazeRobot.X/color.c: 77:  unsigned int tmp;;MazeRobot.X/color.c: 78:  I2C_2_Master_Star
      +                          t();
  9612   004302  EC5C  F023         	call	_I2C_2_Master_Start	;wreg free
  9613                           
  9614                           ;MazeRobot.X/color.c: 79:  I2C_2_Master_Write(0x52 | 0x00);
  9615   004306  0E52               	movlw	82
  9616   004308  EC51  F023         	call	_I2C_2_Master_Write
  9617                           
  9618                           ;MazeRobot.X/color.c: 80:  I2C_2_Master_Write(0xA0 | 0x14);
  9619   00430C  0EB4               	movlw	180
  9620   00430E  EC51  F023         	call	_I2C_2_Master_Write
  9621                           
  9622                           ;MazeRobot.X/color.c: 81:  I2C_2_Master_RepStart();
  9623   004312  EC61  F023         	call	_I2C_2_Master_RepStart	;wreg free
  9624                           
  9625                           ;MazeRobot.X/color.c: 82:  I2C_2_Master_Write(0x52 | 0x01);
  9626   004316  0E53               	movlw	83
  9627   004318  EC51  F023         	call	_I2C_2_Master_Write
  9628                           
  9629                           ;MazeRobot.X/color.c: 83:  tmp=I2C_2_Master_Read(1);
  9630   00431C  0E01               	movlw	1
  9631   00431E  EC16  F022         	call	_I2C_2_Master_Read
  9632   004322  6E0B               	movwf	??_color_read_Clear^0,c
  9633   004324  500B               	movf	??_color_read_Clear^0,w,c
  9634   004326  6E0E               	movwf	color_read_Clear@tmp^0,c
  9635   004328  6A0F               	clrf	(color_read_Clear@tmp+1)^0,c
  9636                           
  9637                           ;MazeRobot.X/color.c: 84:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  9638   00432A  0E00               	movlw	0
  9639   00432C  EC16  F022         	call	_I2C_2_Master_Read
  9640   004330  6E0B               	movwf	??_color_read_Clear^0,c
  9641   004332  500B               	movf	??_color_read_Clear^0,w,c
  9642   004334  6E0D               	movwf	(??_color_read_Clear+2)^0,c
  9643   004336  6A0C               	clrf	(??_color_read_Clear+1)^0,c
  9644   004338  500E               	movf	color_read_Clear@tmp^0,w,c
  9645   00433A  100C               	iorwf	(??_color_read_Clear+1)^0,w,c
  9646   00433C  6E0E               	movwf	color_read_Clear@tmp^0,c
  9647   00433E  500F               	movf	(color_read_Clear@tmp+1)^0,w,c
  9648   004340  100D               	iorwf	(??_color_read_Clear+2)^0,w,c
  9649   004342  6E0F               	movwf	(color_read_Clear@tmp+1)^0,c
  9650                           
  9651                           ;MazeRobot.X/color.c: 85:  I2C_2_Master_Stop();
  9652   004344  EC57  F023         	call	_I2C_2_Master_Stop	;wreg free
  9653   004348                     
  9654                           ;MazeRobot.X/color.c: 86:  return tmp;
  9655   004348  C00E  F009         	movff	color_read_Clear@tmp,?_color_read_Clear
  9656   00434C  C00F  F00A         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  9657   004350  0012               	return		;funcret
  9658   004352                     __end_of_color_read_Clear:
  9659                           	callstack 0
  9660                           
  9661 ;; *************** function _color_read_Blue *****************
  9662 ;; Defined at:
  9663 ;;		line 61 in file "MazeRobot.X/color.c"
  9664 ;; Parameters:    Size  Location     Type
  9665 ;;		None
  9666 ;; Auto vars:     Size  Location     Type
  9667 ;;  tmp             2   13[COMRAM] unsigned int 
  9668 ;; Return value:  Size  Location     Type
  9669 ;;                  2    8[COMRAM] unsigned int 
  9670 ;; Registers used:
  9671 ;;		wreg, status,2, status,0, cstack
  9672 ;; Tracked objects:
  9673 ;;		On entry : 0/0
  9674 ;;		On exit  : 0/0
  9675 ;;		Unchanged: 0/0
  9676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9677 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9678 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9679 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9680 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9681 ;;Total ram usage:        7 bytes
  9682 ;; Hardware stack levels used: 1
  9683 ;; Hardware stack levels required when called: 4
  9684 ;; This function calls:
  9685 ;;		_I2C_2_Master_Read
  9686 ;;		_I2C_2_Master_RepStart
  9687 ;;		_I2C_2_Master_Start
  9688 ;;		_I2C_2_Master_Stop
  9689 ;;		_I2C_2_Master_Write
  9690 ;; This function is called by:
  9691 ;;		_getColor
  9692 ;; This function uses a non-reentrant model
  9693 ;;
  9694                           
  9695                           	psect	text46
  9696   004352                     __ptext46:
  9697                           	callstack 0
  9698   004352                     _color_read_Blue:
  9699                           	callstack 24
  9700   004352                     
  9701                           ;MazeRobot.X/color.c: 63:  unsigned int tmp;;MazeRobot.X/color.c: 64:  I2C_2_Master_Star
      +                          t();
  9702   004352  EC5C  F023         	call	_I2C_2_Master_Start	;wreg free
  9703                           
  9704                           ;MazeRobot.X/color.c: 65:  I2C_2_Master_Write(0x52 | 0x00);
  9705   004356  0E52               	movlw	82
  9706   004358  EC51  F023         	call	_I2C_2_Master_Write
  9707                           
  9708                           ;MazeRobot.X/color.c: 66:  I2C_2_Master_Write(0xA0 | 0x1A);
  9709   00435C  0EBA               	movlw	186
  9710   00435E  EC51  F023         	call	_I2C_2_Master_Write
  9711                           
  9712                           ;MazeRobot.X/color.c: 67:  I2C_2_Master_RepStart();
  9713   004362  EC61  F023         	call	_I2C_2_Master_RepStart	;wreg free
  9714                           
  9715                           ;MazeRobot.X/color.c: 68:  I2C_2_Master_Write(0x52 | 0x01);
  9716   004366  0E53               	movlw	83
  9717   004368  EC51  F023         	call	_I2C_2_Master_Write
  9718                           
  9719                           ;MazeRobot.X/color.c: 69:  tmp=I2C_2_Master_Read(1);
  9720   00436C  0E01               	movlw	1
  9721   00436E  EC16  F022         	call	_I2C_2_Master_Read
  9722   004372  6E0B               	movwf	??_color_read_Blue^0,c
  9723   004374  500B               	movf	??_color_read_Blue^0,w,c
  9724   004376  6E0E               	movwf	color_read_Blue@tmp^0,c
  9725   004378  6A0F               	clrf	(color_read_Blue@tmp+1)^0,c
  9726                           
  9727                           ;MazeRobot.X/color.c: 70:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  9728   00437A  0E00               	movlw	0
  9729   00437C  EC16  F022         	call	_I2C_2_Master_Read
  9730   004380  6E0B               	movwf	??_color_read_Blue^0,c
  9731   004382  500B               	movf	??_color_read_Blue^0,w,c
  9732   004384  6E0D               	movwf	(??_color_read_Blue+2)^0,c
  9733   004386  6A0C               	clrf	(??_color_read_Blue+1)^0,c
  9734   004388  500E               	movf	color_read_Blue@tmp^0,w,c
  9735   00438A  100C               	iorwf	(??_color_read_Blue+1)^0,w,c
  9736   00438C  6E0E               	movwf	color_read_Blue@tmp^0,c
  9737   00438E  500F               	movf	(color_read_Blue@tmp+1)^0,w,c
  9738   004390  100D               	iorwf	(??_color_read_Blue+2)^0,w,c
  9739   004392  6E0F               	movwf	(color_read_Blue@tmp+1)^0,c
  9740                           
  9741                           ;MazeRobot.X/color.c: 71:  I2C_2_Master_Stop();
  9742   004394  EC57  F023         	call	_I2C_2_Master_Stop	;wreg free
  9743   004398                     
  9744                           ;MazeRobot.X/color.c: 72:  return tmp;
  9745   004398  C00E  F009         	movff	color_read_Blue@tmp,?_color_read_Blue
  9746   00439C  C00F  F00A         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  9747   0043A0  0012               	return		;funcret
  9748   0043A2                     __end_of_color_read_Blue:
  9749                           	callstack 0
  9750                           
  9751 ;; *************** function _I2C_2_Master_Write *****************
  9752 ;; Defined at:
  9753 ;;		line 45 in file "MazeRobot.X/i2c.c"
  9754 ;; Parameters:    Size  Location     Type
  9755 ;;  data_byte       1    wreg     unsigned char 
  9756 ;; Auto vars:     Size  Location     Type
  9757 ;;  data_byte       1    5[COMRAM] unsigned char 
  9758 ;; Return value:  Size  Location     Type
  9759 ;;                  1    wreg      void 
  9760 ;; Registers used:
  9761 ;;		wreg, status,2, status,0, cstack
  9762 ;; Tracked objects:
  9763 ;;		On entry : 0/0
  9764 ;;		On exit  : 0/0
  9765 ;;		Unchanged: 0/0
  9766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9768 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9770 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9771 ;;Total ram usage:        1 bytes
  9772 ;; Hardware stack levels used: 1
  9773 ;; Hardware stack levels required when called: 3
  9774 ;; This function calls:
  9775 ;;		_I2C_2_Master_Idle
  9776 ;; This function is called by:
  9777 ;;		_color_writetoaddr
  9778 ;;		_color_read_Red
  9779 ;;		_color_read_Green
  9780 ;;		_color_read_Blue
  9781 ;;		_color_read_Clear
  9782 ;; This function uses a non-reentrant model
  9783 ;;
  9784                           
  9785                           	psect	text47
  9786   0046A2                     __ptext47:
  9787                           	callstack 0
  9788   0046A2                     _I2C_2_Master_Write:
  9789                           	callstack 24
  9790                           
  9791                           ;incstack = 0
  9792                           ;I2C_2_Master_Write@data_byte stored from wreg
  9793   0046A2  6E06               	movwf	I2C_2_Master_Write@data_byte^0,c
  9794   0046A4                     
  9795                           ;MazeRobot.X/i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);MazeRobot.X/i2c
      +                          .c: 46: {;MazeRobot.X/i2c.c: 47:   I2C_2_Master_Idle();
  9796   0046A4  ECF5  F022         	call	_I2C_2_Master_Idle	;wreg free
  9797   0046A8                     
  9798                           ;MazeRobot.X/i2c.c: 48:   SSP2BUF = data_byte;
  9799   0046A8  C006  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  9800   0046AC  0012               	return		;funcret
  9801   0046AE                     __end_of_I2C_2_Master_Write:
  9802                           	callstack 0
  9803                           
  9804 ;; *************** function _I2C_2_Master_Stop *****************
  9805 ;; Defined at:
  9806 ;;		line 39 in file "MazeRobot.X/i2c.c"
  9807 ;; Parameters:    Size  Location     Type
  9808 ;;		None
  9809 ;; Auto vars:     Size  Location     Type
  9810 ;;		None
  9811 ;; Return value:  Size  Location     Type
  9812 ;;                  1    wreg      void 
  9813 ;; Registers used:
  9814 ;;		wreg, status,2, status,0, cstack
  9815 ;; Tracked objects:
  9816 ;;		On entry : 0/0
  9817 ;;		On exit  : 0/0
  9818 ;;		Unchanged: 0/0
  9819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9823 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9824 ;;Total ram usage:        0 bytes
  9825 ;; Hardware stack levels used: 1
  9826 ;; Hardware stack levels required when called: 3
  9827 ;; This function calls:
  9828 ;;		_I2C_2_Master_Idle
  9829 ;; This function is called by:
  9830 ;;		_color_writetoaddr
  9831 ;;		_color_read_Red
  9832 ;;		_color_read_Green
  9833 ;;		_color_read_Blue
  9834 ;;		_color_read_Clear
  9835 ;; This function uses a non-reentrant model
  9836 ;;
  9837                           
  9838                           	psect	text48
  9839   0046AE                     __ptext48:
  9840                           	callstack 0
  9841   0046AE                     _I2C_2_Master_Stop:
  9842                           	callstack 24
  9843   0046AE                     
  9844                           ;MazeRobot.X/i2c.c: 41:   I2C_2_Master_Idle();
  9845   0046AE  ECF5  F022         	call	_I2C_2_Master_Idle	;wreg free
  9846   0046B2                     
  9847                           ;MazeRobot.X/i2c.c: 42:   SSP2CON2bits.PEN = 1;
  9848   0046B2  010E               	movlb	14	; () banked
  9849   0046B4  85DA               	bsf	218,2,b	;volatile
  9850   0046B6                     
  9851                           ; BSR set to: 14
  9852   0046B6  0012               	return		;funcret
  9853   0046B8                     __end_of_I2C_2_Master_Stop:
  9854                           	callstack 0
  9855                           
  9856 ;; *************** function _I2C_2_Master_Start *****************
  9857 ;; Defined at:
  9858 ;;		line 27 in file "MazeRobot.X/i2c.c"
  9859 ;; Parameters:    Size  Location     Type
  9860 ;;		None
  9861 ;; Auto vars:     Size  Location     Type
  9862 ;;		None
  9863 ;; Return value:  Size  Location     Type
  9864 ;;                  1    wreg      void 
  9865 ;; Registers used:
  9866 ;;		wreg, status,2, status,0, cstack
  9867 ;; Tracked objects:
  9868 ;;		On entry : 0/0
  9869 ;;		On exit  : 0/0
  9870 ;;		Unchanged: 0/0
  9871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9873 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9875 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9876 ;;Total ram usage:        0 bytes
  9877 ;; Hardware stack levels used: 1
  9878 ;; Hardware stack levels required when called: 3
  9879 ;; This function calls:
  9880 ;;		_I2C_2_Master_Idle
  9881 ;; This function is called by:
  9882 ;;		_color_writetoaddr
  9883 ;;		_color_read_Red
  9884 ;;		_color_read_Green
  9885 ;;		_color_read_Blue
  9886 ;;		_color_read_Clear
  9887 ;; This function uses a non-reentrant model
  9888 ;;
  9889                           
  9890                           	psect	text49
  9891   0046B8                     __ptext49:
  9892                           	callstack 0
  9893   0046B8                     _I2C_2_Master_Start:
  9894                           	callstack 24
  9895   0046B8                     
  9896                           ;MazeRobot.X/i2c.c: 29:   I2C_2_Master_Idle();
  9897   0046B8  ECF5  F022         	call	_I2C_2_Master_Idle	;wreg free
  9898   0046BC                     
  9899                           ;MazeRobot.X/i2c.c: 30:   SSP2CON2bits.SEN = 1;
  9900   0046BC  010E               	movlb	14	; () banked
  9901   0046BE  81DA               	bsf	218,0,b	;volatile
  9902   0046C0                     
  9903                           ; BSR set to: 14
  9904   0046C0  0012               	return		;funcret
  9905   0046C2                     __end_of_I2C_2_Master_Start:
  9906                           	callstack 0
  9907                           
  9908 ;; *************** function _I2C_2_Master_RepStart *****************
  9909 ;; Defined at:
  9910 ;;		line 33 in file "MazeRobot.X/i2c.c"
  9911 ;; Parameters:    Size  Location     Type
  9912 ;;		None
  9913 ;; Auto vars:     Size  Location     Type
  9914 ;;		None
  9915 ;; Return value:  Size  Location     Type
  9916 ;;                  1    wreg      void 
  9917 ;; Registers used:
  9918 ;;		wreg, status,2, status,0, cstack
  9919 ;; Tracked objects:
  9920 ;;		On entry : 0/0
  9921 ;;		On exit  : 0/0
  9922 ;;		Unchanged: 0/0
  9923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9927 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9928 ;;Total ram usage:        0 bytes
  9929 ;; Hardware stack levels used: 1
  9930 ;; Hardware stack levels required when called: 3
  9931 ;; This function calls:
  9932 ;;		_I2C_2_Master_Idle
  9933 ;; This function is called by:
  9934 ;;		_color_read_Red
  9935 ;;		_color_read_Green
  9936 ;;		_color_read_Blue
  9937 ;;		_color_read_Clear
  9938 ;; This function uses a non-reentrant model
  9939 ;;
  9940                           
  9941                           	psect	text50
  9942   0046C2                     __ptext50:
  9943                           	callstack 0
  9944   0046C2                     _I2C_2_Master_RepStart:
  9945                           	callstack 24
  9946   0046C2                     
  9947                           ;MazeRobot.X/i2c.c: 35:   I2C_2_Master_Idle();
  9948   0046C2  ECF5  F022         	call	_I2C_2_Master_Idle	;wreg free
  9949   0046C6                     
  9950                           ;MazeRobot.X/i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  9951   0046C6  010E               	movlb	14	; () banked
  9952   0046C8  83DA               	bsf	218,1,b	;volatile
  9953   0046CA                     
  9954                           ; BSR set to: 14
  9955   0046CA  0012               	return		;funcret
  9956   0046CC                     __end_of_I2C_2_Master_RepStart:
  9957                           	callstack 0
  9958                           
  9959 ;; *************** function _I2C_2_Master_Read *****************
  9960 ;; Defined at:
  9961 ;;		line 51 in file "MazeRobot.X/i2c.c"
  9962 ;; Parameters:    Size  Location     Type
  9963 ;;  ack             1    wreg     unsigned char 
  9964 ;; Auto vars:     Size  Location     Type
  9965 ;;  ack             1    6[COMRAM] unsigned char 
  9966 ;;  tmp             1    7[COMRAM] unsigned char 
  9967 ;; Return value:  Size  Location     Type
  9968 ;;                  1    wreg      unsigned char 
  9969 ;; Registers used:
  9970 ;;		wreg, status,2, status,0, cstack
  9971 ;; Tracked objects:
  9972 ;;		On entry : 0/0
  9973 ;;		On exit  : 0/0
  9974 ;;		Unchanged: 0/0
  9975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9977 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9978 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9979 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9980 ;;Total ram usage:        3 bytes
  9981 ;; Hardware stack levels used: 1
  9982 ;; Hardware stack levels required when called: 3
  9983 ;; This function calls:
  9984 ;;		_I2C_2_Master_Idle
  9985 ;; This function is called by:
  9986 ;;		_color_read_Red
  9987 ;;		_color_read_Green
  9988 ;;		_color_read_Blue
  9989 ;;		_color_read_Clear
  9990 ;; This function uses a non-reentrant model
  9991 ;;
  9992                           
  9993                           	psect	text51
  9994   00442C                     __ptext51:
  9995                           	callstack 0
  9996   00442C                     _I2C_2_Master_Read:
  9997                           	callstack 24
  9998                           
  9999                           ; BSR set to: 14
 10000                           ;incstack = 0
 10001                           ;I2C_2_Master_Read@ack stored from wreg
 10002   00442C  6E07               	movwf	I2C_2_Master_Read@ack^0,c
 10003   00442E                     
 10004                           ;MazeRobot.X/i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);MazeRobot.X/i
      +                          2c.c: 52: {;MazeRobot.X/i2c.c: 53:   unsigned char tmp;;MazeRobot.X/i2c.c: 54:   I2C_2_M
      +                          aster_Idle();
 10005   00442E  ECF5  F022         	call	_I2C_2_Master_Idle	;wreg free
 10006   004432                     
 10007                           ;MazeRobot.X/i2c.c: 55:   SSP2CON2bits.RCEN = 1;
 10008   004432  010E               	movlb	14	; () banked
 10009   004434  87DA               	bsf	218,3,b	;volatile
 10010                           
 10011                           ;MazeRobot.X/i2c.c: 56:   I2C_2_Master_Idle();
 10012   004436  ECF5  F022         	call	_I2C_2_Master_Idle	;wreg free
 10013   00443A                     
 10014                           ;MazeRobot.X/i2c.c: 57:   tmp = SSP2BUF;
 10015   00443A  CED5 F008          	movff	3797,I2C_2_Master_Read@tmp	;volatile
 10016                           
 10017                           ;MazeRobot.X/i2c.c: 58:   I2C_2_Master_Idle();
 10018   00443E  ECF5  F022         	call	_I2C_2_Master_Idle	;wreg free
 10019   004442                     
 10020                           ;MazeRobot.X/i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
 10021   004442  5007               	movf	I2C_2_Master_Read@ack^0,w,c
 10022   004444  B4D8               	btfsc	status,2,c
 10023   004446  EF27  F022         	goto	u5121
 10024   00444A  EF2B  F022         	goto	u5120
 10025   00444E                     u5121:
 10026   00444E  6A06               	clrf	??_I2C_2_Master_Read^0,c
 10027   004450  2A06               	incf	??_I2C_2_Master_Read^0,f,c
 10028   004452  EF2C  F022         	goto	u5138
 10029   004456                     u5120:
 10030   004456  6A06               	clrf	??_I2C_2_Master_Read^0,c
 10031   004458                     u5138:
 10032   004458  3A06               	swapf	??_I2C_2_Master_Read^0,f,c
 10033   00445A  4606               	rlncf	??_I2C_2_Master_Read^0,f,c
 10034   00445C  010E               	movlb	14	; () banked
 10035   00445E  51DA               	movf	218,w,b	;volatile
 10036   004460  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
 10037   004462  0BDF               	andlw	-33
 10038   004464  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
 10039   004466  6FDA               	movwf	218,b	;volatile
 10040   004468                     
 10041                           ; BSR set to: 14
 10042                           ;MazeRobot.X/i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
 10043   004468  89DA               	bsf	218,4,b	;volatile
 10044   00446A                     
 10045                           ; BSR set to: 14
 10046                           ;MazeRobot.X/i2c.c: 61:   return tmp;
 10047   00446A  5008               	movf	I2C_2_Master_Read@tmp^0,w,c
 10048   00446C                     
 10049                           ; BSR set to: 14
 10050   00446C  0012               	return		;funcret
 10051   00446E                     __end_of_I2C_2_Master_Read:
 10052                           	callstack 0
 10053                           
 10054 ;; *************** function _I2C_2_Master_Idle *****************
 10055 ;; Defined at:
 10056 ;;		line 22 in file "MazeRobot.X/i2c.c"
 10057 ;; Parameters:    Size  Location     Type
 10058 ;;		None
 10059 ;; Auto vars:     Size  Location     Type
 10060 ;;		None
 10061 ;; Return value:  Size  Location     Type
 10062 ;;                  1    wreg      void 
 10063 ;; Registers used:
 10064 ;;		wreg, status,2, status,0
 10065 ;; Tracked objects:
 10066 ;;		On entry : 0/0
 10067 ;;		On exit  : 0/0
 10068 ;;		Unchanged: 0/0
 10069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10071 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10072 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10073 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10074 ;;Total ram usage:        1 bytes
 10075 ;; Hardware stack levels used: 1
 10076 ;; Hardware stack levels required when called: 2
 10077 ;; This function calls:
 10078 ;;		Nothing
 10079 ;; This function is called by:
 10080 ;;		_I2C_2_Master_Start
 10081 ;;		_I2C_2_Master_RepStart
 10082 ;;		_I2C_2_Master_Stop
 10083 ;;		_I2C_2_Master_Write
 10084 ;;		_I2C_2_Master_Read
 10085 ;; This function uses a non-reentrant model
 10086 ;;
 10087                           
 10088                           	psect	text52
 10089   0045EA                     __ptext52:
 10090                           	callstack 0
 10091   0045EA                     _I2C_2_Master_Idle:
 10092                           	callstack 24
 10093   0045EA                     l282:
 10094   0045EA  010E               	movlb	14	; () banked
 10095   0045EC  B5D8               	btfsc	216,2,b	;volatile
 10096   0045EE  EFFB  F022         	goto	u5001
 10097   0045F2  EFFD  F022         	goto	u5000
 10098   0045F6                     u5001:
 10099   0045F6  EFF5  F022         	goto	l282
 10100   0045FA                     u5000:
 10101   0045FA                     
 10102                           ; BSR set to: 14
 10103   0045FA  CEDA F005          	movff	3802,??_I2C_2_Master_Idle	;volatile
 10104   0045FE  0E1F               	movlw	31
 10105   004600  1605               	andwf	??_I2C_2_Master_Idle^0,f,c
 10106   004602  A4D8               	btfss	status,2,c
 10107   004604  EF06  F023         	goto	u5011
 10108   004608  EF08  F023         	goto	u5010
 10109   00460C                     u5011:
 10110   00460C  EFF5  F022         	goto	l282
 10111   004610                     u5010:
 10112   004610                     
 10113                           ; BSR set to: 14
 10114   004610  0012               	return		;funcret
 10115   004612                     __end_of_I2C_2_Master_Idle:
 10116                           	callstack 0
 10117                           
 10118 ;; *************** function _DCmotorsInit *****************
 10119 ;; Defined at:
 10120 ;;		line 73 in file "MazeRobot.X/dc_motor.c"
 10121 ;; Parameters:    Size  Location     Type
 10122 ;;  mL              2    4[COMRAM] PTR struct DC_motor
 10123 ;;		 -> main@motorLeft(9), 
 10124 ;;  mR              2    6[COMRAM] PTR struct DC_motor
 10125 ;;		 -> main@motorRight(9), 
 10126 ;; Auto vars:     Size  Location     Type
 10127 ;;		None
 10128 ;; Return value:  Size  Location     Type
 10129 ;;                  1    wreg      void 
 10130 ;; Registers used:
 10131 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10132 ;; Tracked objects:
 10133 ;;		On entry : 0/0
 10134 ;;		On exit  : 0/0
 10135 ;;		Unchanged: 0/0
 10136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10137 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10140 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10141 ;;Total ram usage:        4 bytes
 10142 ;; Hardware stack levels used: 1
 10143 ;; Hardware stack levels required when called: 2
 10144 ;; This function calls:
 10145 ;;		Nothing
 10146 ;; This function is called by:
 10147 ;;		_main
 10148 ;; This function uses a non-reentrant model
 10149 ;;
 10150                           
 10151                           	psect	text53
 10152   003C44                     __ptext53:
 10153                           	callstack 0
 10154   003C44                     _DCmotorsInit:
 10155                           	callstack 28
 10156   003C44                     
 10157                           ;MazeRobot.X/dc_motor.c: 75:     mL->power = 0;
 10158   003C44  C005  FFD9         	movff	DCmotorsInit@mL,fsr2l
 10159   003C48  C006  FFDA         	movff	DCmotorsInit@mL+1,fsr2h
 10160   003C4C  0E00               	movlw	0
 10161   003C4E  6EDF               	movwf	indf2,c
 10162   003C50                     
 10163                           ;MazeRobot.X/dc_motor.c: 76:     mL->direction = 1;
 10164   003C50  EE20 F001          	lfsr	2,1
 10165   003C54  5005               	movf	DCmotorsInit@mL^0,w,c
 10166   003C56  26D9               	addwf	fsr2l,f,c
 10167   003C58  5006               	movf	(DCmotorsInit@mL+1)^0,w,c
 10168   003C5A  22DA               	addwfc	fsr2h,f,c
 10169   003C5C  0E01               	movlw	1
 10170   003C5E  6EDF               	movwf	indf2,c
 10171   003C60                     
 10172                           ;MazeRobot.X/dc_motor.c: 77:     mL->brakemode = 1;
 10173   003C60  EE20 F002          	lfsr	2,2
 10174   003C64  5005               	movf	DCmotorsInit@mL^0,w,c
 10175   003C66  26D9               	addwf	fsr2l,f,c
 10176   003C68  5006               	movf	(DCmotorsInit@mL+1)^0,w,c
 10177   003C6A  22DA               	addwfc	fsr2h,f,c
 10178   003C6C  0E01               	movlw	1
 10179   003C6E  6EDF               	movwf	indf2,c
 10180   003C70                     
 10181                           ;MazeRobot.X/dc_motor.c: 78:     mL->posDutyHighByte = (unsigned char *)(&CCPR1H);
 10182   003C70  EE20 F005          	lfsr	2,5
 10183   003C74  5005               	movf	DCmotorsInit@mL^0,w,c
 10184   003C76  26D9               	addwf	fsr2l,f,c
 10185   003C78  5006               	movf	(DCmotorsInit@mL+1)^0,w,c
 10186   003C7A  22DA               	addwfc	fsr2h,f,c
 10187   003C7C  0EAA               	movlw	170
 10188   003C7E  6EDE               	movwf	postinc2,c
 10189   003C80  0E0F               	movlw	15
 10190   003C82  6EDD               	movwf	postdec2,c
 10191   003C84                     
 10192                           ;MazeRobot.X/dc_motor.c: 79:     mL->negDutyHighByte = (unsigned char *)(&CCPR2H);
 10193   003C84  EE20 F007          	lfsr	2,7
 10194   003C88  5005               	movf	DCmotorsInit@mL^0,w,c
 10195   003C8A  26D9               	addwf	fsr2l,f,c
 10196   003C8C  5006               	movf	(DCmotorsInit@mL+1)^0,w,c
 10197   003C8E  22DA               	addwfc	fsr2h,f,c
 10198   003C90  0EA6               	movlw	166
 10199   003C92  6EDE               	movwf	postinc2,c
 10200   003C94  0E0F               	movlw	15
 10201   003C96  6EDD               	movwf	postdec2,c
 10202   003C98                     
 10203                           ;MazeRobot.X/dc_motor.c: 80:     mL->PWMperiod = 199 ;
 10204   003C98  EE20 F003          	lfsr	2,3
 10205   003C9C  5005               	movf	DCmotorsInit@mL^0,w,c
 10206   003C9E  26D9               	addwf	fsr2l,f,c
 10207   003CA0  5006               	movf	(DCmotorsInit@mL+1)^0,w,c
 10208   003CA2  22DA               	addwfc	fsr2h,f,c
 10209   003CA4  0EC7               	movlw	199
 10210   003CA6  6EDE               	movwf	postinc2,c
 10211   003CA8  0E00               	movlw	0
 10212   003CAA  6EDD               	movwf	postdec2,c
 10213   003CAC                     
 10214                           ;MazeRobot.X/dc_motor.c: 82:     mR->power = 0;
 10215   003CAC  C007  FFD9         	movff	DCmotorsInit@mR,fsr2l
 10216   003CB0  C008  FFDA         	movff	DCmotorsInit@mR+1,fsr2h
 10217   003CB4  0E00               	movlw	0
 10218   003CB6  6EDF               	movwf	indf2,c
 10219                           
 10220                           ;MazeRobot.X/dc_motor.c: 83:     mR->direction = 1;
 10221   003CB8  EE20 F001          	lfsr	2,1
 10222   003CBC  5007               	movf	DCmotorsInit@mR^0,w,c
 10223   003CBE  26D9               	addwf	fsr2l,f,c
 10224   003CC0  5008               	movf	(DCmotorsInit@mR+1)^0,w,c
 10225   003CC2  22DA               	addwfc	fsr2h,f,c
 10226   003CC4  0E01               	movlw	1
 10227   003CC6  6EDF               	movwf	indf2,c
 10228                           
 10229                           ;MazeRobot.X/dc_motor.c: 84:     mR->brakemode = 1;
 10230   003CC8  EE20 F002          	lfsr	2,2
 10231   003CCC  5007               	movf	DCmotorsInit@mR^0,w,c
 10232   003CCE  26D9               	addwf	fsr2l,f,c
 10233   003CD0  5008               	movf	(DCmotorsInit@mR+1)^0,w,c
 10234   003CD2  22DA               	addwfc	fsr2h,f,c
 10235   003CD4  0E01               	movlw	1
 10236   003CD6  6EDF               	movwf	indf2,c
 10237                           
 10238                           ;MazeRobot.X/dc_motor.c: 85:     mR->posDutyHighByte = (unsigned char *)(&CCPR3H);
 10239   003CD8  EE20 F005          	lfsr	2,5
 10240   003CDC  5007               	movf	DCmotorsInit@mR^0,w,c
 10241   003CDE  26D9               	addwf	fsr2l,f,c
 10242   003CE0  5008               	movf	(DCmotorsInit@mR+1)^0,w,c
 10243   003CE2  22DA               	addwfc	fsr2h,f,c
 10244   003CE4  0E25               	movlw	37
 10245   003CE6  6EDE               	movwf	postinc2,c
 10246   003CE8  0E0F               	movlw	15
 10247   003CEA  6EDD               	movwf	postdec2,c
 10248                           
 10249                           ;MazeRobot.X/dc_motor.c: 86:     mR->negDutyHighByte = (unsigned char *)(&CCPR4H);
 10250   003CEC  EE20 F007          	lfsr	2,7
 10251   003CF0  5007               	movf	DCmotorsInit@mR^0,w,c
 10252   003CF2  26D9               	addwf	fsr2l,f,c
 10253   003CF4  5008               	movf	(DCmotorsInit@mR+1)^0,w,c
 10254   003CF6  22DA               	addwfc	fsr2h,f,c
 10255   003CF8  0E21               	movlw	33
 10256   003CFA  6EDE               	movwf	postinc2,c
 10257   003CFC  0E0F               	movlw	15
 10258   003CFE  6EDD               	movwf	postdec2,c
 10259                           
 10260                           ;MazeRobot.X/dc_motor.c: 87:     mR->PWMperiod = 199 ;
 10261   003D00  EE20 F003          	lfsr	2,3
 10262   003D04  5007               	movf	DCmotorsInit@mR^0,w,c
 10263   003D06  26D9               	addwf	fsr2l,f,c
 10264   003D08  5008               	movf	(DCmotorsInit@mR+1)^0,w,c
 10265   003D0A  22DA               	addwfc	fsr2h,f,c
 10266   003D0C  0EC7               	movlw	199
 10267   003D0E  6EDE               	movwf	postinc2,c
 10268   003D10  0E00               	movlw	0
 10269   003D12  6EDD               	movwf	postdec2,c
 10270   003D14  0012               	return		;funcret
 10271   003D16                     __end_of_DCmotorsInit:
 10272                           	callstack 0
 10273                           
 10274 ;; *************** function _HighISR *****************
 10275 ;; Defined at:
 10276 ;;		line 132 in file "serialTest.c"
 10277 ;; Parameters:    Size  Location     Type
 10278 ;;		None
 10279 ;; Auto vars:     Size  Location     Type
 10280 ;;		None
 10281 ;; Return value:  Size  Location     Type
 10282 ;;                  1    wreg      void 
 10283 ;; Registers used:
 10284 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10285 ;; Tracked objects:
 10286 ;;		On entry : 0/0
 10287 ;;		On exit  : 0/0
 10288 ;;		Unchanged: 0/0
 10289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10291 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10292 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10293 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10294 ;;Total ram usage:        2 bytes
 10295 ;; Hardware stack levels used: 1
 10296 ;; Hardware stack levels required when called: 1
 10297 ;; This function calls:
 10298 ;;		_getCharFromTxBuf
 10299 ;;		_putCharToRxBuf
 10300 ;;		i2_isDataInTxBuf
 10301 ;; This function is called by:
 10302 ;;		Interrupt level 2
 10303 ;; This function uses a non-reentrant model
 10304 ;;
 10305                           
 10306                           	psect	intcode
 10307   000008                     __pintcode:
 10308                           	callstack 0
 10309   000008                     _HighISR:
 10310                           	callstack 20
 10311                           
 10312                           ;incstack = 0
 10313   000008  825B               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
 10314   00000A  CFD9 F003          	movff	fsr2l,??_HighISR
 10315   00000E  CFDA F004          	movff	fsr2h,??_HighISR+1
 10316   000012                     
 10317                           ;serialTest.c: 134:     if (PIR4bits.RC4IF){
 10318   000012  010E               	movlb	14	; () banked
 10319   000014  A737               	btfss	55,3,b	;volatile
 10320   000016  EF0F  F000         	goto	i2u463_41
 10321   00001A  EF11  F000         	goto	i2u463_40
 10322   00001E                     i2u463_41:
 10323   00001E  EF14  F000         	goto	i2l4472
 10324   000022                     i2u463_40:
 10325   000022                     
 10326                           ; BSR set to: 14
 10327                           ;serialTest.c: 135:         putCharToRxBuf(RC4REG);
 10328   000022  51E3               	movf	227,w,b	;volatile
 10329   000024  ECE0  F022         	call	_putCharToRxBuf
 10330   000028                     i2l4472:
 10331                           
 10332                           ;serialTest.c: 138:     if (PIR4bits.TX4IF && PIE4bits.TX4IE == 1){
 10333   000028  010E               	movlb	14	; () banked
 10334   00002A  A537               	btfss	55,2,b	;volatile
 10335   00002C  EF1A  F000         	goto	i2u464_41
 10336   000030  EF1C  F000         	goto	i2u464_40
 10337   000034                     i2u464_41:
 10338   000034  EF35  F000         	goto	i2l509
 10339   000038                     i2u464_40:
 10340   000038                     
 10341                           ; BSR set to: 14
 10342   000038  A52D               	btfss	45,2,b	;volatile
 10343   00003A  EF21  F000         	goto	i2u465_41
 10344   00003E  EF23  F000         	goto	i2u465_40
 10345   000042                     i2u465_41:
 10346   000042  EF35  F000         	goto	i2l509
 10347   000046                     i2u465_40:
 10348   000046                     
 10349                           ; BSR set to: 14
 10350                           ;serialTest.c: 139:         if (isDataInTxBuf() == 1){
 10351   000046  EC45  F023         	call	i2_isDataInTxBuf	;wreg free
 10352   00004A  06E8               	decf	wreg,f,c
 10353   00004C  A4D8               	btfss	status,2,c
 10354   00004E  EF2B  F000         	goto	i2u466_41
 10355   000052  EF2D  F000         	goto	i2u466_40
 10356   000056                     i2u466_41:
 10357   000056  EF33  F000         	goto	i2l507
 10358   00005A                     i2u466_40:
 10359   00005A                     
 10360                           ;serialTest.c: 140:            TX4REG = getCharFromTxBuf();
 10361   00005A  ECA0  F022         	call	_getCharFromTxBuf	;wreg free
 10362   00005E  010E               	movlb	14	; () banked
 10363   000060  6FE4               	movwf	228,b	;volatile
 10364                           
 10365                           ;serialTest.c: 141:         }
 10366   000062  EF35  F000         	goto	i2l509
 10367   000066                     i2l507:
 10368                           
 10369                           ;serialTest.c: 143:            PIE4bits.TX4IE = 0;
 10370   000066  010E               	movlb	14	; () banked
 10371   000068  952D               	bcf	45,2,b	;volatile
 10372   00006A                     i2l509:
 10373                           
 10374                           ; BSR set to: 14
 10375   00006A  C004  FFDA         	movff	??_HighISR+1,fsr2h
 10376   00006E  C003  FFD9         	movff	??_HighISR,fsr2l
 10377   000072  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
 10378   000074  0011               	retfie		f
 10379   000076                     __end_of_HighISR:
 10380                           	callstack 0
 10381                           
 10382 ;; *************** function i2_isDataInTxBuf *****************
 10383 ;; Defined at:
 10384 ;;		line 113 in file "serialTest.c"
 10385 ;; Parameters:    Size  Location     Type
 10386 ;;		None
 10387 ;; Auto vars:     Size  Location     Type
 10388 ;;		None
 10389 ;; Return value:  Size  Location     Type
 10390 ;;                  1    wreg      unsigned char 
 10391 ;; Registers used:
 10392 ;;		wreg, status,2, status,0
 10393 ;; Tracked objects:
 10394 ;;		On entry : 0/0
 10395 ;;		On exit  : 0/0
 10396 ;;		Unchanged: 0/0
 10397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10401 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10402 ;;Total ram usage:        0 bytes
 10403 ;; Hardware stack levels used: 1
 10404 ;; This function calls:
 10405 ;;		Nothing
 10406 ;; This function is called by:
 10407 ;;		_HighISR
 10408 ;; This function uses a non-reentrant model
 10409 ;;
 10410                           
 10411                           	psect	text55
 10412   00468A                     __ptext55:
 10413                           	callstack 0
 10414   00468A                     i2_isDataInTxBuf:
 10415                           	callstack 20
 10416   00468A                     
 10417                           ;serialTest.c: 114:     return (TxBufWriteCnt!=TxBufReadCnt);
 10418   00468A  5057               	movf	_TxBufReadCnt^0,w,c	;volatile
 10419   00468C  1858               	xorwf	_TxBufWriteCnt^0,w,c	;volatile
 10420   00468E  A4D8               	btfss	status,2,c
 10421   004690  EF4C  F023         	goto	i2u214_41
 10422   004694  EF4F  F023         	goto	i2u214_40
 10423   004698                     i2u214_41:
 10424   004698  0E01               	movlw	1
 10425   00469A  EF50  F023         	goto	i2u215_40
 10426   00469E                     i2u214_40:
 10427   00469E  0E00               	movlw	0
 10428   0046A0                     i2u215_40:
 10429   0046A0  0012               	return		;funcret
 10430   0046A2                     __end_ofi2_isDataInTxBuf:
 10431                           	callstack 0
 10432                           
 10433 ;; *************** function _putCharToRxBuf *****************
 10434 ;; Defined at:
 10435 ;;		line 85 in file "serialTest.c"
 10436 ;; Parameters:    Size  Location     Type
 10437 ;;  byte            1    wreg     unsigned char 
 10438 ;; Auto vars:     Size  Location     Type
 10439 ;;  byte            1    0[COMRAM] unsigned char 
 10440 ;; Return value:  Size  Location     Type
 10441 ;;                  1    wreg      void 
 10442 ;; Registers used:
 10443 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10444 ;; Tracked objects:
 10445 ;;		On entry : 0/0
 10446 ;;		On exit  : 0/0
 10447 ;;		Unchanged: 0/0
 10448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10450 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10452 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10453 ;;Total ram usage:        1 bytes
 10454 ;; Hardware stack levels used: 1
 10455 ;; This function calls:
 10456 ;;		Nothing
 10457 ;; This function is called by:
 10458 ;;		_HighISR
 10459 ;; This function uses a non-reentrant model
 10460 ;;
 10461                           
 10462                           	psect	text56
 10463   0045C0                     __ptext56:
 10464                           	callstack 0
 10465   0045C0                     _putCharToRxBuf:
 10466                           	callstack 20
 10467                           
 10468                           ;incstack = 0
 10469                           ;putCharToRxBuf@byte stored from wreg
 10470   0045C0  6E01               	movwf	putCharToRxBuf@byte^0,c
 10471   0045C2                     
 10472                           ;serialTest.c: 86:     if (RxBufWriteCnt>=20) {RxBufWriteCnt=0;}
 10473   0045C2  0E13               	movlw	19
 10474   0045C4  645A               	cpfsgt	_RxBufWriteCnt^0,c	;volatile
 10475   0045C6  EFE7  F022         	goto	i2u449_41
 10476   0045CA  EFE9  F022         	goto	i2u449_40
 10477   0045CE                     i2u449_41:
 10478   0045CE  EFEB  F022         	goto	i2l4298
 10479   0045D2                     i2u449_40:
 10480   0045D2  0E00               	movlw	0
 10481   0045D4  6E5A               	movwf	_RxBufWriteCnt^0,c	;volatile
 10482   0045D6                     i2l4298:
 10483                           
 10484                           ;serialTest.c: 87:     EUSART4RXbuf[RxBufWriteCnt++]=byte;
 10485   0045D6  0E3C               	movlw	low _EUSART4RXbuf
 10486   0045D8  245A               	addwf	_RxBufWriteCnt^0,w,c	;volatile
 10487   0045DA  6ED9               	movwf	fsr2l,c
 10488   0045DC  6ADA               	clrf	fsr2h,c
 10489   0045DE  0E01               	movlw	high _EUSART4RXbuf
 10490   0045E0  22DA               	addwfc	fsr2h,f,c
 10491   0045E2  C001  FFDF         	movff	putCharToRxBuf@byte,indf2
 10492   0045E6  2A5A               	incf	_RxBufWriteCnt^0,f,c	;volatile
 10493   0045E8  0012               	return		;funcret
 10494   0045EA                     __end_of_putCharToRxBuf:
 10495                           	callstack 0
 10496                           
 10497 ;; *************** function _getCharFromTxBuf *****************
 10498 ;; Defined at:
 10499 ;;		line 99 in file "serialTest.c"
 10500 ;; Parameters:    Size  Location     Type
 10501 ;;		None
 10502 ;; Auto vars:     Size  Location     Type
 10503 ;;		None
 10504 ;; Return value:  Size  Location     Type
 10505 ;;                  1    wreg      unsigned char 
 10506 ;; Registers used:
 10507 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10508 ;; Tracked objects:
 10509 ;;		On entry : 0/0
 10510 ;;		On exit  : 0/0
 10511 ;;		Unchanged: 0/0
 10512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10515 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10516 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10517 ;;Total ram usage:        2 bytes
 10518 ;; Hardware stack levels used: 1
 10519 ;; This function calls:
 10520 ;;		Nothing
 10521 ;; This function is called by:
 10522 ;;		_HighISR
 10523 ;; This function uses a non-reentrant model
 10524 ;;
 10525                           
 10526                           	psect	text57
 10527   004540                     __ptext57:
 10528                           	callstack 0
 10529   004540                     _getCharFromTxBuf:
 10530                           	callstack 20
 10531   004540                     
 10532                           ;serialTest.c: 100:     if (TxBufReadCnt>=60) {TxBufReadCnt=0;}
 10533   004540  0E3B               	movlw	59
 10534   004542  6457               	cpfsgt	_TxBufReadCnt^0,c	;volatile
 10535   004544  EFA6  F022         	goto	i2u450_41
 10536   004548  EFA8  F022         	goto	i2u450_40
 10537   00454C                     i2u450_41:
 10538   00454C  EFAA  F022         	goto	i2l4306
 10539   004550                     i2u450_40:
 10540   004550  0E00               	movlw	0
 10541   004552  6E57               	movwf	_TxBufReadCnt^0,c	;volatile
 10542   004554                     i2l4306:
 10543                           
 10544                           ;serialTest.c: 101:     return EUSART4TXbuf[TxBufReadCnt++];
 10545   004554  2A57               	incf	_TxBufReadCnt^0,f,c	;volatile
 10546   004556  0457               	decf	_TxBufReadCnt^0,w,c	;volatile
 10547   004558  6E01               	movwf	??_getCharFromTxBuf^0,c
 10548   00455A  6A02               	clrf	(??_getCharFromTxBuf+1)^0,c
 10549   00455C  0E00               	movlw	low _EUSART4TXbuf
 10550   00455E  2401               	addwf	??_getCharFromTxBuf^0,w,c
 10551   004560  6ED9               	movwf	fsr2l,c
 10552   004562  0E01               	movlw	high _EUSART4TXbuf
 10553   004564  2002               	addwfc	(??_getCharFromTxBuf+1)^0,w,c
 10554   004566  6EDA               	movwf	fsr2h,c
 10555   004568  50DF               	movf	indf2,w,c
 10556   00456A  0012               	return		;funcret
 10557   00456C                     __end_of_getCharFromTxBuf:
 10558                           	callstack 0
 10559                           
 10560                           	psect	rparam
 10561   000000                     
 10562                           	psect	temp
 10563   00005B                     btemp:
 10564                           	callstack 0
 10565   00005B                     	ds	1
 10566   000000                     int$flags	set	btemp
 10567   000000                     wtemp8	set	btemp+1
 10568   000000                     ttemp5	set	btemp+1
 10569   000000                     ttemp6	set	btemp+4
 10570   000000                     ttemp7	set	btemp+8
 10571                           
 10572                           	psect	idloc
 10573                           
 10574                           ;Config register IDLOC0 @ 0x200000
 10575                           ;	unspecified, using default values
 10576   200000                     	org	2097152
 10577   200000  0FFF               	dw	4095
 10578                           
 10579                           ;Config register IDLOC1 @ 0x200002
 10580                           ;	unspecified, using default values
 10581   200002                     	org	2097154
 10582   200002  0FFF               	dw	4095
 10583                           
 10584                           ;Config register IDLOC2 @ 0x200004
 10585                           ;	unspecified, using default values
 10586   200004                     	org	2097156
 10587   200004  0FFF               	dw	4095
 10588                           
 10589                           ;Config register IDLOC3 @ 0x200006
 10590                           ;	unspecified, using default values
 10591   200006                     	org	2097158
 10592   200006  0FFF               	dw	4095
 10593                           
 10594                           ;Config register IDLOC4 @ 0x200008
 10595                           ;	unspecified, using default values
 10596   200008                     	org	2097160
 10597   200008  0FFF               	dw	4095
 10598                           
 10599                           ;Config register IDLOC5 @ 0x20000A
 10600                           ;	unspecified, using default values
 10601   20000A                     	org	2097162
 10602   20000A  0FFF               	dw	4095
 10603                           
 10604                           ;Config register IDLOC6 @ 0x20000C
 10605                           ;	unspecified, using default values
 10606   20000C                     	org	2097164
 10607   20000C  0FFF               	dw	4095
 10608                           
 10609                           ;Config register IDLOC7 @ 0x20000E
 10610                           ;	unspecified, using default values
 10611   20000E                     	org	2097166
 10612   20000E  0FFF               	dw	4095
 10613                           
 10614                           	psect	config
 10615                           
 10616                           ;Config register CONFIG1L @ 0x300000
 10617                           ;	External Oscillator mode Selection bits
 10618                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
 10619                           ;	Power-up default value for COSC bits
 10620                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
 10621   300000                     	org	3145728
 10622   300000  AA                 	db	170
 10623                           
 10624                           ;Config register CONFIG1H @ 0x300001
 10625                           ;	unspecified, using default values
 10626                           ;	Clock Out Enable bit
 10627                           ;	CLKOUTEN = 0x1, unprogrammed default
 10628                           ;	Clock Switch Enable bit
 10629                           ;	CSWEN = 0x1, unprogrammed default
 10630                           ;	Fail-Safe Clock Monitor Enable bit
 10631                           ;	FCMEN = 0x1, unprogrammed default
 10632   300001                     	org	3145729
 10633   300001  FF                 	db	255
 10634                           
 10635                           ;Config register CONFIG2L @ 0x300002
 10636                           ;	unspecified, using default values
 10637                           ;	Master Clear Enable bit
 10638                           ;	MCLRE = 0x1, unprogrammed default
 10639                           ;	Power-up Timer Enable bit
 10640                           ;	PWRTE = 0x1, unprogrammed default
 10641                           ;	Low-power BOR enable bit
 10642                           ;	LPBOREN = 0x1, unprogrammed default
 10643                           ;	Brown-out Reset Enable bits
 10644                           ;	BOREN = 0x3, unprogrammed default
 10645   300002                     	org	3145730
 10646   300002  FF                 	db	255
 10647                           
 10648                           ;Config register CONFIG2H @ 0x300003
 10649                           ;	unspecified, using default values
 10650                           ;	Brown Out Reset Voltage selection bits
 10651                           ;	BORV = 0x3, unprogrammed default
 10652                           ;	ZCD Disable bit
 10653                           ;	ZCD = 0x1, unprogrammed default
 10654                           ;	PPSLOCK bit One-Way Set Enable bit
 10655                           ;	PPS1WAY = 0x1, unprogrammed default
 10656                           ;	Stack Full/Underflow Reset Enable bit
 10657                           ;	STVREN = 0x1, unprogrammed default
 10658                           ;	Debugger Enable bit
 10659                           ;	DEBUG = 0x1, unprogrammed default
 10660                           ;	Extended Instruction Set Enable bit
 10661                           ;	XINST = 0x1, unprogrammed default
 10662   300003                     	org	3145731
 10663   300003  FF                 	db	255
 10664                           
 10665                           ;Config register CONFIG3L @ 0x300004
 10666                           ;	WDT Period Select bits
 10667                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
 10668                           ;	WDT operating mode
 10669                           ;	WDTE = OFF, WDT Disabled
 10670   300004                     	org	3145732
 10671   300004  9F                 	db	159
 10672                           
 10673                           ;Config register CONFIG3H @ 0x300005
 10674                           ;	unspecified, using default values
 10675                           ;	WDT Window Select bits
 10676                           ;	WDTCWS = 0x7, unprogrammed default
 10677                           ;	WDT input clock selector
 10678                           ;	WDTCCS = 0x7, unprogrammed default
 10679   300005                     	org	3145733
 10680   300005  FF                 	db	255
 10681                           
 10682                           ;Config register CONFIG4L @ 0x300006
 10683                           ;	unspecified, using default values
 10684                           ;	Write Protection Block 0
 10685                           ;	WRT0 = 0x1, unprogrammed default
 10686                           ;	Write Protection Block 1
 10687                           ;	WRT1 = 0x1, unprogrammed default
 10688                           ;	Write Protection Block 2
 10689                           ;	WRT2 = 0x1, unprogrammed default
 10690                           ;	Write Protection Block 3
 10691                           ;	WRT3 = 0x1, unprogrammed default
 10692                           ;	Write Protection Block 3
 10693                           ;	WRT4 = 0x1, unprogrammed default
 10694                           ;	Write Protection Block 3
 10695                           ;	WRT5 = 0x1, unprogrammed default
 10696                           ;	Write Protection Block 3
 10697                           ;	WRT6 = 0x1, unprogrammed default
 10698                           ;	Write Protection Block 3
 10699                           ;	WRT7 = 0x1, unprogrammed default
 10700   300006                     	org	3145734
 10701   300006  FF                 	db	255
 10702                           
 10703                           ;Config register CONFIG4H @ 0x300007
 10704                           ;	unspecified, using default values
 10705                           ;	Configuration Register Write Protection bit
 10706                           ;	WRTC = 0x1, unprogrammed default
 10707                           ;	Boot Block Write Protection bit
 10708                           ;	WRTB = 0x1, unprogrammed default
 10709                           ;	Data EEPROM Write Protection bit
 10710                           ;	WRTD = 0x1, unprogrammed default
 10711                           ;	Scanner Enable bit
 10712                           ;	SCANE = 0x1, unprogrammed default
 10713                           ;	Low Voltage Programming Enable bit
 10714                           ;	LVP = 0x1, unprogrammed default
 10715   300007                     	org	3145735
 10716   300007  FF                 	db	255
 10717                           
 10718                           ;Config register CONFIG5L @ 0x300008
 10719                           ;	unspecified, using default values
 10720                           ;	UserNVM Program Memory Code Protection bit
 10721                           ;	CP = 0x1, unprogrammed default
 10722                           ;	DataNVM Memory Code Protection bit
 10723                           ;	CPD = 0x1, unprogrammed default
 10724   300008                     	org	3145736
 10725   300008  FF                 	db	255
 10726                           
 10727                           ;Config register CONFIG5H @ 0x300009
 10728                           ;	unspecified, using default values
 10729   300009                     	org	3145737
 10730   300009  FF                 	db	255
 10731                           
 10732                           ;Config register CONFIG6L @ 0x30000A
 10733                           ;	unspecified, using default values
 10734                           ;	Table Read Protection Block 0
 10735                           ;	EBTR0 = 0x1, unprogrammed default
 10736                           ;	Table Read Protection Block 1
 10737                           ;	EBTR1 = 0x1, unprogrammed default
 10738                           ;	Table Read Protection Block 2
 10739                           ;	EBTR2 = 0x1, unprogrammed default
 10740                           ;	Table Read Protection Block 3
 10741                           ;	EBTR3 = 0x1, unprogrammed default
 10742                           ;	Table Read Protection Block 4
 10743                           ;	EBTR4 = 0x1, unprogrammed default
 10744                           ;	Table Read Protection Block 5
 10745                           ;	EBTR5 = 0x1, unprogrammed default
 10746                           ;	Table Read Protection Block 6
 10747                           ;	EBTR6 = 0x1, unprogrammed default
 10748                           ;	Table Read Protection Block 7
 10749                           ;	EBTR7 = 0x1, unprogrammed default
 10750   30000A                     	org	3145738
 10751   30000A  FF                 	db	255
 10752                           
 10753                           ;Config register CONFIG6H @ 0x30000B
 10754                           ;	unspecified, using default values
 10755                           ;	Boot Block Table Read Protection bit
 10756                           ;	EBTRB = 0x1, unprogrammed default
 10757   30000B                     	org	3145739
 10758   30000B  FF                 	db	255
 10759                           tosu	equ	0xFFF
 10760                           tosh	equ	0xFFE
 10761                           tosl	equ	0xFFD
 10762                           stkptr	equ	0xFFC
 10763                           pclatu	equ	0xFFB
 10764                           pclath	equ	0xFFA
 10765                           pcl	equ	0xFF9
 10766                           tblptru	equ	0xFF8
 10767                           tblptrh	equ	0xFF7
 10768                           tblptrl	equ	0xFF6
 10769                           tablat	equ	0xFF5
 10770                           prodh	equ	0xFF4
 10771                           prodl	equ	0xFF3
 10772                           indf0	equ	0xFEF
 10773                           postinc0	equ	0xFEE
 10774                           postdec0	equ	0xFED
 10775                           preinc0	equ	0xFEC
 10776                           plusw0	equ	0xFEB
 10777                           fsr0h	equ	0xFEA
 10778                           fsr0l	equ	0xFE9
 10779                           wreg	equ	0xFE8
 10780                           indf1	equ	0xFE7
 10781                           postinc1	equ	0xFE6
 10782                           postdec1	equ	0xFE5
 10783                           preinc1	equ	0xFE4
 10784                           plusw1	equ	0xFE3
 10785                           fsr1h	equ	0xFE2
 10786                           fsr1l	equ	0xFE1
 10787                           bsr	equ	0xFE0
 10788                           indf2	equ	0xFDF
 10789                           postinc2	equ	0xFDE
 10790                           postdec2	equ	0xFDD
 10791                           preinc2	equ	0xFDC
 10792                           plusw2	equ	0xFDB
 10793                           fsr2h	equ	0xFDA
 10794                           fsr2l	equ	0xFD9
 10795                           status	equ	0xFD8

Data Sizes:
    Strings     28
    Constant    0
    Data        4
    BSS         125
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     86      90
    BANK0           160    109     114
    BANK1           256     50     170
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_2(CODE[15]), STR_1(CODE[13]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 15
		 -> STR_2(CODE[15]), STR_1(CODE[13]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 15
		 -> STR_2(CODE[15]), STR_1(CODE[13]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    S2648$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_2(CODE[15]), STR_1(CODE[13]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 40
		 -> ADC2String@buf(COMRAM[40]), colorDetect@testString(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2595$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2595$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    TxBufferedString@string	PTR unsigned char  size(2) Largest target is 20
		 -> colorDetect@testString(BANK0[20]), 

    motorRight.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    motorRight.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    motorLeft.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    motorLeft.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    reverseSquareLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    reverseSquareLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    reverseSquareRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    reverseSquareRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    turnLeft_135@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft_135@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft_135@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft_135@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft_135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    turnLeft_135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    turnRight_135@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight_135@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight_135@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight_135@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight_135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    turnRight_135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    turn_180@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turn_180@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turn_180@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turn_180@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turn_180@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    turn_180@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    turnRight_90@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight_90@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight_90@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight_90@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight_90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    turnRight_90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    turnLeft_90@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft_90@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft_90@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft_90@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft_90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    turnLeft_90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    turnRight@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    reverse@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    reverse@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    reverse@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    reverse@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    reverse@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    reverse@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    forward@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    forward@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    forward@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    forward@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), main@motorLeft(BANK1[9]), 

    DCmotorsInit@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    S107DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    S107DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    colorDetect@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    colorDetect@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    colorDetect@whiteRGBVal	PTR struct RGB size(2) Largest target is 8
		 -> main@whiteRGBVal(BANK1[8]), 

    colorDetect@ambientRGBVal	PTR struct RGB size(2) Largest target is 8
		 -> main@ambientRGBVal(BANK1[8]), 

    whiteCal@v	PTR struct RGB size(2) Largest target is 8
		 -> main@whiteRGBVal(BANK1[8]), 

    ambientCal@v	PTR struct RGB size(2) Largest target is 8
		 -> main@ambientRGBVal(BANK1[8]), 

    getColor@v	PTR struct RGB size(2) Largest target is 8
		 -> main@whiteRGBVal(BANK1[8]), main@ambientRGBVal(BANK1[8]), main@RGBVal(BANK1[8]), colorDetect@RGBVal(BANK0[8]), 


Critical Paths under _main in COMRAM

    _whiteCal->_getColor
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _turn_180->_stop
    _turnRight_135->_stop
    _turnLeft_135->_stop
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _reverseSquareRight->_turnRight_90
    _turnRight_90->_stop
    _reverseSquareLeft->_turnLeft_90
    _turnLeft_90->_stop
    _stop->_setMotorPWM
    _reverse->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    ___flsub->___fladd
    ___flmul->___flsub
    ___flge->___flsub
    ___fldiv->___flmul
    _TxBufferedString->_putCharToTxBuf
    _ambientCal->_getColor
    _getColor->_color_read_Blue
    _getColor->_color_read_Clear
    _getColor->_color_read_Green
    _getColor->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle

Critical Paths under _HighISR in COMRAM

    _HighISR->_getCharFromTxBuf

Critical Paths under _main in BANK0

    _main->_colorDetect
    _colorDetect->_sprintf
    _sprintf->_vfprintf

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               172   172      0  211869
                                            107 BANK0      2     2      0
                                              0 BANK1     50    50      0
                       _DCmotorsInit
                            ___fldiv
                             ___flge
                           ___xxtofl
                         _ambientCal
                        _colorDetect
                   _color_click_init
                           _getColor
                    _initDCmotorsPWM
                         _initUSART4
                               _stop
                           _whiteCal
 ---------------------------------------------------------------------------------
 (1) _whiteCal                                             6     4      2    1329
                                             17 COMRAM     6     4      2
                           _getColor
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      90
                                              4 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     363
                                              8 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     363
                                              6 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _colorDetect                                         76    64     12  186983
                                             35 BANK0     72    60     12
                   _TxBufferedString
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                           ___xxtofl
                           _getColor
                  _reverseSquareLeft
                 _reverseSquareRight
                          _sendTxBuf
                            _sprintf
                       _turnLeft_135
                        _turnLeft_90
                      _turnRight_135
                       _turnRight_90
                           _turn_180
 ---------------------------------------------------------------------------------
 (2) _turn_180                                             6     2      4   17897
                                             29 COMRAM     6     2      4
                            _reverse
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _turnRight_135                                        6     2      4   17897
                                             29 COMRAM     6     2      4
                            _reverse
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _turnLeft_135                                         6     2      4   17897
                                             29 COMRAM     6     2      4
                            _reverse
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             31    15     16    7496
                                              6 BANK0     29    13     16
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             8     2      6    6830
                                             84 COMRAM     2     2      0
                                              0 BANK0      6     0      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           23    17      6    6369
                                             66 COMRAM    18    12      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                35    25     10    4802
                                             31 COMRAM    35    25     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                 11     5      6    2533
                                             20 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (7) _fputs                                                7     3      4    1177
                                             13 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                9     5      4     857
                                              4 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     183
                                             22 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___aomod                                             18     2     16     613
                                              4 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (6) ___aodiv                                             26    10     16     625
                                              4 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (2) _sendTxBuf                                            0     0      0       0
                      _isDataInTxBuf
 ---------------------------------------------------------------------------------
 (3) _isDataInTxBuf                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _reverseSquareRight                                   6     2      4   32251
                                             35 COMRAM     6     2      4
                            _reverse
                               _stop
                       _turnRight_90
 ---------------------------------------------------------------------------------
 (2) _turnRight_90                                         6     2      4   18077
                                             29 COMRAM     6     2      4
                            _reverse
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _reverseSquareLeft                                    6     2      4   32251
                                             35 COMRAM     6     2      4
                            _reverse
                               _stop
                        _turnLeft_90
 ---------------------------------------------------------------------------------
 (2) _turnLeft_90                                          6     2      4   18077
                                             29 COMRAM     6     2      4
                            _reverse
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 6     2      4    8341
                                             23 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _reverse                                              5     1      4    5405
                                             23 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          6     4      2    3413
                                             17 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     624
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     481
                                             10 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4    2500
                                              4 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    5087
                                             20 COMRAM     8     0      8
                            ___fladd
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             16     8      8    3262
                                              4 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             25    17      8    5001
                                             28 COMRAM    25    17      8
                            ___flsub (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8    5666
                                             28 COMRAM    12     4      8
                            ___flsub (ARG)
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             25    17      8    2543
                                             53 COMRAM    25    17      8
                            ___flmul (ARG)
                            ___flsub (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _TxBufferedString                                     2     0      2     186
                                              5 COMRAM     2     0      2
                     _putCharToTxBuf
 ---------------------------------------------------------------------------------
 (3) _putCharToTxBuf                                       1     1      0      31
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ambientCal                                           6     4      2    1329
                                             17 COMRAM     6     4      2
                           _getColor
 ---------------------------------------------------------------------------------
 (2) _getColor                                             2     0      2    1140
                                             15 COMRAM     2     0      2
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (3) _color_read_Red                                       7     5      2     164
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Green                                     7     5      2     164
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Clear                                     7     5      2     164
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Blue                                      7     5      2     164
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Write                                   1     1      0      31
                                              5 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Read                                    3     3      0      65
                                              5 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Idle                                    1     1      0       0
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DCmotorsInit                                         4     0      4     552
                                              4 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _HighISR                                             2     2      0      22
                                              2 COMRAM     2     2      0
                   _getCharFromTxBuf
                     _putCharToRxBuf
                    i2_isDataInTxBuf
 ---------------------------------------------------------------------------------
 (11) i2_isDataInTxBuf                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _putCharToRxBuf                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (11) _getCharFromTxBuf                                    2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DCmotorsInit
   ___fldiv
     ___flmul (ARG)
       ___flsub (ARG)
         ___fladd
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___flsub (ARG)
     ___xxtofl (ARG)
   ___flge
     ___flsub (ARG)
   ___xxtofl
   _ambientCal
     _getColor
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_read_Clear
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
   _colorDetect
     _TxBufferedString
       _putCharToTxBuf
     ___fldiv
     ___flge
     ___flmul
     ___flsub
     ___xxtofl
     _getColor
     _reverseSquareLeft
       _reverse
         _setMotorPWM
           ___lwdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
       _turnLeft_90
         _reverse
         _setMotorPWM
         _stop
     _reverseSquareRight
       _reverse
       _stop
       _turnRight_90
         _reverse
         _setMotorPWM
         _stop
     _sendTxBuf
       _isDataInTxBuf
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
           _fputc
     _turnLeft_135
       _reverse
       _setMotorPWM
       _stop
     _turnLeft_90
     _turnRight_135
       _reverse
       _setMotorPWM
       _stop
     _turnRight_90
     _turn_180
       _reverse
       _setMotorPWM
       _stop
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _getColor
   _initDCmotorsPWM
   _initUSART4
   _stop
   _whiteCal
     _getColor

 _HighISR (ROOT)
   _getCharFromTxBuf
   _putCharToRxBuf
   i2_isDataInTxBuf

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      62        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     32      AA       7       66.4%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     6D      72       5       71.2%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     56      5A       1       95.7%
BITBIGSFRlhhhhl     52      0       0      42        0.0%
BITBIGSFRlhhhll     37      0       0      44        0.0%
BITBIGSFRlllhlh     2A      0       0      55        0.0%
BITBIGSFRlllll      26      0       0      60        0.0%
BITBIGSFRlhhhll     20      0       0      47        0.0%
BITBIGSFRlhhhll     1E      0       0      49        0.0%
BITBIGSFRhhhhhh     1B      0       0      33        0.0%
BITBIGSFRhhhhll     17      0       0      38        0.0%
BITBIGSFRhhhhhl     13      0       0      34        0.0%
BITBIGSFRlhhl       11      0       0      50        0.0%
BITBIGSFRhhhhlh      E      0       0      35        0.0%
BITBIGSFRhhhhhh      D      0       0      32        0.0%
BITBIGSFRlhhhll      C      0       0      48        0.0%
BITBIGSFRlllhll      9      0       0      57        0.0%
BITBIGSFRlllhlh      9      0       0      56        0.0%
BITBIGSFRlhhhll      8      0       0      45        0.0%
BITBIGSFRllllh       6      0       0      59        0.0%
BITBIGSFRlllhh       6      0       0      54        0.0%
BITBIGSFRlllhll      5      0       0      58        0.0%
BITBIGSFRllhl        5      0       0      53        0.0%
BITBIGSFRhhhhll      5      0       0      39        0.0%
BITBIGSFRllhh        3      0       0      52        0.0%
BITBIGSFRlhhhlh      2      0       0      43        0.0%
BITBIGSFRhhhhll      2      0       0      37        0.0%
BITBIGSFRlhhhhh      1      0       0      41        0.0%
BITBIGSFRlhhhll      1      0       0      46        0.0%
BITBIGSFRhhhhlh      1      0       0      36        0.0%
BITBIGSFRlhl         1      0       0      51        0.0%
BITBIGSFRhhll        1      0       0      40        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     176      61        0.0%
DATA                 0      0     176       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Tue Dec 13 19:01:43 2022

               _color_read_Red 4262                   ___fldiv@aexp 004E                   ___fldiv@bexp 004D  
                 ___fldiv@sign 0046                _color_read_Blue 4352                             l60 4656  
                           l63 42B0                             l72 4350                             l80 3B6C  
                           l57 44E0                             l66 4300                             l75 416C  
                           l69 43A0                             l85 3A88            ___wmul@multiplicand 0007  
   __end_of_reverseSquareRight 3FA0               _color_read_Clear 4302               _color_read_Green 42B2  
                          l105 1A22                            l300 446C                            l204 3C42  
                          l222 3764                            l240 34E8                            l234 33AA  
                          l252 4020                            l228 3626                            l500 4670  
                          l164 3F1C                            l174 2FBA                            l246 38A0  
                          l167 3D14                            l512 4636                            l184 3E8C  
                          l249 3F9E                            l282 45EA                            l291 46CA  
                          l285 4610                            l294 46B6                            l279 4594  
                          l447 453E                            l288 46C0                            l297 46AC  
                          l490 4688                            l626 2E4E                            l487 45BE  
                          l639 311E                            l496 4510                            l782 39A4  
                          l777 395E                            _abs 446E                            _pad 4022  
                          wreg 000FE8                   ___flmul@aexp 002A                   ___flmul@bexp 002F  
                 ___flmul@sign 0029                   ___flmul@temp 0034                   ___flmul@prod 0030  
         reverseSquareRight@mL 0024           reverseSquareRight@mR 0026                           l1010 410E  
                         l1003 4106                           l1040 1C12                           l1105 254C  
                         l1041 1C00                           l1130 230C                           l1042 1BC6  
                         l1107 25C4                           ?_abs 0017                           l1108 25B2  
                         l1212 4044                           l1133 219E                           l1221 2734  
                         l1126 1FA8                           l1143 22CE                           l1135 2216  
                         l1223 273C                           l1136 2204                           l1216 409A  
                         l1224 2782                           l1057 1D2C                           l1049 1EE2  
                         l1066 1DFC                           l1082 43E6                           l1170 2CC6  
                         l1242 326C                           l1067 1DEA                           l1235 2924  
                         l1252 44A4                           l1181 2C5E                           l1094 26A6  
                         l1174 2C02                           l1190 4210                           l1167 2B6A  
                         l1255 44AC                           l1096 2506                           l1248 4260  
                         l1099 24CA                           l1267 3DDE                           l1275 442A  
                         l1278 46D0                           l5000 1B48                           l5010 1B5C  
                         l5002 1B4C                           l5100 1DCC                           l5020 1BAE  
                         l5012 1B60                           l5004 1B50                           l5110 1E26  
                         l5102 1DE2                           l5030 1BF2                           l5022 1BBE  
                         l5006 1B54                           l5014 1B64                           l5120 1EA2  
                         l5112 1E60                           l5032 1BF4                           l5024 1BD4  
                         l5016 1B68                           l5008 1B58                           l5200 3F76  
                         l6000 296A                           l5130 1EC2                           l5122 1EA6  
                         l5106 1E0C                           l5114 1E62                           l5050 1C7C  
                         l5042 1C44                           l5034 1BFE                           l5026 1BE0  
                         l5018 1B92                           l5202 3F8A                           l5210 32C6  
                         l6010 2976                           l6002 296C                           l5300 231A  
                         l5132 1ED0                           l5124 1EB4                           l5116 1E72  
                         l5108 1E18                           l5052 1C80                           l5044 1C54  
                         l5036 1C20                           l5060 1CA0                           l5028 1BE4  
                         l5140 421E                           l5220 331E                           l5212 32DA  
                         l5204 326E                           l6020 29A4                           l6012 2976  
                         l6004 296E                           l5310 235A                           l5302 2328  
                         l5134 1ED2                           l5126 1EBA                           l5118 1E82  
                         l5062 1CC6                           l5070 1D1C                           l5054 1C8E  
                         l5046 1C62                           l5038 1C30                           l5142 423A  
                         l5230 337E                           l5222 3336                           l5214 32EA  
                         l5206 3282                           l5150 4576                           l6030 2A14  
                         l6022 29B0                           l6014 2976                           l6006 2972  
                         l5400 25AA                           l5320 2380                           l5312 235C  
                         l5304 232A                           l5128 1EBC                           l5080 1D70  
                         l5072 1D42                           l5064 1CFA                           l5056 1C90  
                         l5048 1C70                           l4600 2FCE                           l5144 4256  
                         l5240 37BE                           l5232 3396                           l5224 3342  
                         l5216 32FA                           l5208 329A                           l5152 457C  
                         l5160 463A                           l6040 2AF2                           l6032 2A5A  
                         l6024 29BE                           l6016 298A                           l6008 2974  
                         l5162 4110                           l5410 2618                           l5330 23C0  
                         l5322 238E                           l5306 233A                           l5314 2364  
                         l5090 1D9A                           l5082 1D7E                           l5074 1D52  
                         l5066 1CFC                           l5058 1C9A                           l4610 303E  
                         l4602 2FEE                           l4530 3D44                           l5138 4212  
                         l5250 3816                           l5242 37D2                           l5234 3766  
                         l5170 3404                           l5226 334E                           l5218 330A  
                         l5154 457E                           l6034 2A8C                           l6026 29CA  
                         l6018 2996                           l5420 2682                           l5404 25D4  
                         l5412 261C                           l5340 2400                           l5332 23C2  
                         l5324 2390                           l5316 2374                           l5308 234A  
                         l5500 208A                           l5092 1DAA                           l5084 1D80  
                         l5068 1D0C                           l4620 30B6                           l4612 3046  
                         l4604 2FF2                           l4532 3D62                           l4524 3D16  
                         l4540 43F4                           l4700 270C                           l5260 3876  
                         l5252 382E                           l5244 37E2                           l5236 377A  
                         l5180 345C                           l5172 3418                           l5164 33AC  
                         l5228 3366                           l5156 4580                           l5148 456C  
                         l6036 2AC2                           l6028 29F2                           l5422 2686  
                         l5414 2636                           l5406 25E0                           l5350 2430  
                         l5342 2408                           l5326 23A0                           l5334 23CA  
                         l5318 237A                           l5510 20F8                           l5502 20A4  
                         l5086 1D8E                           l5078 1D66                           l5094 1DAC  
                         l5270 3FF8                           l4622 30C8                           l4614 305A  
                         l4606 3000                           l4534 3D98                           l4526 3D28  
                         l4542 4406                           l4710 276A                           l4702 2728  
                         l5262 388C                           l5254 383A                           l5246 37F2  
                         l5238 3792                           l5190 34BC                           l5182 3474  
                         l5174 3428                           l5166 33C0                           l5158 4582  
                         l6038 2ADE                           ?_pad 0015                           l5424 2694  
                         l5416 264C                           l5408 25EE                           l5360 246E  
                         l5352 2430                           l5344 240C                           l5336 23DA  
                         l5328 23B0                           l5520 218E                           l5512 2122  
                         l5504 20B4                           l5440 1EFE                           l5088 1D96  
                         l5096 1DBA                           l5600 2B7A                           l4640 40C6  
                         l4632 409C                           l4800 3BD6                           l5272 400C  
                         l5264 3FA0                           l4560 2CFE                           l4552 2CC8  
                         l4616 3068                           l4624 30CE                           l4608 3020  
                         l4528 3D3A                           l4544 440A                           l4720 279A  
                         l4712 2776                           l4704 2744                           l5280 41E2  
                         l5256 3846                           l5248 3802                           l5192 34D4  
                         l5184 3480                           l5176 3438                           l5168 33D8  
                         l5290 44F4                           l5426 269A                           l5418 2666  
                         l5370 24BA                           l5362 247E                           l5338 23F0  
                         l5530 21CE                           l5522 219C                           l5514 2158  
                         l5506 20D0                           l5450 1F36                           l5442 1F00  
                         l5098 1DBE                           l5610 2BB8                           l5602 2B90  
                         l4650 40FA                           l4642 40D4                           l4634 40A4  
                         l4546 4612                           l4802 3BEE                           l5266 3FB4  
                         l5194 3F1E                           l4570 2D5A                           l4562 2D0C  
                         l4554 2CCC                           l4626 30DE                           l4618 3096  
                         l4538 43E8                           l4730 28A6                           l4722 281C  
                         l4714 277E                           l4706 2754                           l4810 3120  
                         l5282 41FE                           l5274 41C0                           l5258 385E  
                         l5186 348C                           l5178 3448                           l5292 44F8  
                         l5428 269C                           l5380 2504                           l5372 24C8  
                         l5364 248E                           l5356 2444                           l5348 2420  
                         l5540 2240                           l5532 21FC                           l5524 21AE  
                         l5516 2166                           l5508 20DC                           l5460 1F62  
                         l5452 1F46                           l5444 1F10                           l5436 1EE4  
                         l5620 2C40                           l5612 2BEA                           l4652 4100  
                         l4644 40DA                           l4636 40B6                           l4548 462E  
                         l4804 3BFA                           l4900 3680                           l5268 3FCC  
                         l5196 3F32                           l4580 2DC4                           l4572 2D62  
                         l4564 2D2C                           l4556 2CDA                           l4628 30FE  
                         l4660 4050                           l4740 2904                           l4732 28C4  
                         l4724 2822                           l4716 278A                           l4708 275A  
                         l4820 3174                           l4812 3144                           l5276 41D2  
                         l5188 34A4                           l5700 0E50                           l4750 46A8  
                         l5286 44E2                           l5390 254A                           l5382 2516  
                         l5374 24D4                           l5366 2496                           l5358 245E  
                         l5550 22B6                           l5542 226A                           l5526 21BC  
                         l5518 2184                           l5470 1FB8                           l5462 1F72  
                         l5454 1F4C                           l5446 1F20                           l5438 1EF0  
                         l5630 2C96                           l5622 2C4E                           l5614 2BEC  
                         l5606 2BA4                           l4646 40F0                           l4638 40BE  
                         l4806 3C12                           l4910 36D8                           l4902 3694  
                         l5198 3F4A                           l5294 4658                           l4590 2E0E  
                         l4582 2DE4                           l4574 2D76                           l4566 2D30  
                         l4558 2CFA                           l4670 4488                           l4662 4064  
                         l4654 4022                           l4734 28DE                           l4726 2828  
                         l4718 2794                           l4830 3232                           l4822 3190  
                         l4814 3152                           l5278 41DA                           l5710 0F2E  
                         l5702 0E64                           l4760 442E                           l4744 46B8  
                         l4752 46AE                           l4840 4262                           l5288 44E6  
                         l5384 252C                           l5392 255C                           l5376 24F2  
                         l5368 24A6                           l5552 22D2                           l5560 22F8  
                         l5536 2226                           l5544 226E                           l5528 21C0  
                         l5480 1FF2                           l5472 1FC8                           l5464 1F82  
                         l5456 1F52                           l5448 1F30                           l5632 2CA6  
                         l5624 2C6C                           l5616 2BF8                           l5608 2BAC  
                         l4648 40F8                           l4680 2ED8                           l4672 2E50  
                         l4808 3C2A                           l4920 3738                           l4912 36F0  
                         l4904 36A4                           l5296 466C                           l4592 2E2E  
                         l4584 2DE6                           l4576 2D84                           l4568 2D3C  
                         l4664 4068                           l4656 4030                           l4736 28EE  
                         l4728 288C                           l4824 31AC                           l4816 3160  
                         l5800 17BA                           l5720 117A                           l5712 0FDC  
                         l5704 0E96                           l5640 44AE                           l4690 45FA  
                         l4770 446A                           l4762 4432                           l4746 46BC  
                         l4754 46B2                           l4842 42A8                           l5650 3A8A  
                         l4930 45BC                           l5394 256A                           l5386 2532  
                         l5378 24F4                           l5298 230E                           l5562 22FC  
                         l5554 22E2                           l5546 2288                           l5538 2232  
                         l5490 2044                           l5482 2008                           l5466 1F92  
                         l5458 1F60                           l5634 2CB4                           l5626 2C6E  
                         l5618 2C34                           l4682 2F1A                           l4674 2E6C  
                         l4922 3750                           l4914 36FC                           l4906 36B4  
                         l4586 2DF8                           l4578 2D96                           l4666 4086  
                         l4658 403C                           l4738 28F4                           l4826 3202  
                         l4818 3164                           l4834 3244                           l5810 1876  
                         l5802 17EC                           l5730 11F0                           l5722 118C  
                         l5714 108A                           l5706 0ECE                           l5642 44B2  
                         l4764 443A                           l4756 46C2                           l4748 46A4  
                         l4852 4352                           l4860 4348                           l5660 3AD0  
                         l4924 4598                           l5396 256E                           l5388 253C  
                         l5580 391E                           l5572 38A2                           l5556 22F0  
                         l5548 229C                           l5492 2052                           l5484 2014  
                         l5476 1FDC                           l5468 1F98                           l4940 1A3E  
                         l5636 2CB6                           l5628 2C72                           l4684 2F36  
                         l4676 2EC0                           l4780 3E08                           l4916 3708  
                         l4908 36C4                           l4932 4672                           l4588 2DFE  
                         l4596 2FBC                           l4668 446E                           l4692 26A8  
                         l5820 1950                           l5804 181E                           l5812 1888  
                         l5740 12CA                           l5732 1222                           l5724 119C  
                         l5716 1138                           l5708 0F06                           l5644 44BC  
                         l4766 4442                           l4758 46C6                           l4854 4398  
                         l4846 42B2                           l5670 3B4A                           l5662 3AEC  
                         l4926 45A8                           l5398 257C                           l5590 39A2  
                         l5582 392C                           l5574 38D0                           l5558 22F2  
                         l5494 205E                           l5486 202C                           l5478 1FE8  
                         l4950 1A72                           l4942 1A40                           l5566 43A2  
                         l4686 2F7A                           l4678 2ED4                           l4790 3E5C  
                         l4782 3E20                           l4774 3DE0                           l4918 3720  
                         l4870 3542                           l4598 2FC0                           l4694 26C8  
                         l5830 1A00                           l5822 1982                           l5814 18BA  
                         l5806 1850                           l5750 13E0                           l5742 12EE  
                         l5734 1234                           l5726 11CE                           l5718 1148  
                         l5646 44CC                           l4688 45EA                           l4768 4468  
                         l4848 42F8                           l5664 3B0E                           l5656 3A92  
                         l4928 45AC                           l5584 393E                           l5576 38E0  
                         l5496 206E                           l5488 2038                           l4960 1AA4  
                         l4944 1A50                           l4952 1A7A                           l4936 1A24  
                         l5568 43B2                           l4792 3E74                           l4784 3E2C  
                         l4776 3DE4                           l4880 359A                           l4872 3556  
                         l4864 34EA                           l4696 26DC                           l5832 1A0C  
                         l5824 1994                           l5816 18EC                           l5808 1862  
                         l5760 149A                           l5744 1320                           l5752 13F2  
                         l5736 1266                           l5728 11E0                           l5648 44D6  
                         l5840 3EC8                           l5680 39D0                           l5672 39A6  
                         l4858 4302                           l5666 3B26                           l5658 3AB4  
                         l5586 394C                           l5578 390E                           l5498 207A  
                         l4970 1ADA                           l4962 1AAA                           l4954 1A8A  
                         l4946 1A60                           l4938 1A30                           l5594 2B16  
                         l4794 3B6E                           l4786 3E38                           l4778 3DFC  
                         l4890 35FA                           l4882 35B2                           l4874 3566  
                         l4866 34FE                           l4698 26EC                           l5834 1A10  
                         l5826 19A8                           l5818 191E                           l5770 1556  
                         l5762 14AE                           l5754 1424                           l5746 1376  
                         l5738 1298                           l5850 3F04                           l5842 3EEC  
                         l5690 3A4E                           l5682 39EC                           l5860 3C50  
                         l5668 3B32                           l5588 399C                           l4980 1B16  
                         l4972 1AEA                           l4964 1AB8                           l4956 1A90  
                         l4948 1A70                           l5596 2B26                           l4796 3BB2  
                         l4788 3E44                           l4892 3612                           l4884 35BE  
                         l4876 3576                           l4868 3516                           l5828 19BA  
                         l5780 163A                           l5772 1568                           l5756 1456  
                         l5764 14C0                           l5748 13CC                           l5852 3F0E  
                         l5844 3EF6                           l5836 3E8E                           l5692 3A66  
                         l5684 3A08                           l5870 3CAC                           l5862 3C60  
                         l4990 1B34                           l4982 1B24                           l4974 1AEC  
                         l4966 1ABA                           l4958 1AA2                           l5598 2B34  
                         l4798 3BCA                           l4894 3628                           l4886 35CA  
                         l4878 3586                           l5790 16FA                           l5782 166C  
                         l5774 157C                           l5766 14F2                           l5758 1488  
                         l5694 0E1E                           l5854 3F10                           l5846 3EF8  
                         l5838 3E9E                           l5686 3A2A                           l5678 39AE  
                         l5950 292E                           l5864 3C70                           l4992 1B38  
                         l4984 1B28                           l4968 1ACA                           l4976 1AF4  
                         l4896 363C                           l4888 35E2                           l5792 172C  
                         l5784 167E                           l5768 1524                           l5776 158E  
                         l5696 0E2A                           l5856 3F1A                           l5848 3F02  
                         l5880 4524                           l5872 4512                           l5688 3A42  
                         l5960 2942                           l5952 293A                           l5866 3C84  
                         l5858 3C44                           l4994 1B3C                           l4986 1B2C  
                         l4978 1B04                           l4898 3654                           l5794 1782  
                         l5786 1692                           l5778 15E4                           l5698 0E3A  
                         l5890 4536                           l5882 4526                           l5874 4518  
                         l5970 294C                           l5962 2944                           l5954 293C  
                         l5946 2926                           l5868 3C98                           l4996 1B40  
                         l4988 1B30                           l5796 1794                           l5788 16A4  
                         l5892 4538                           l5884 4530                           l5876 4520  
                         l5980 2956                           l5972 294E                           l5964 2946  
                         l5956 293E                           l5948 292A                           l4998 1B44  
                         l5798 17A8                           l5894 453A                           l5886 4532  
                         l5878 4522                           l5990 2960                           l5982 2958  
                         l5974 2950                           l5966 2948                           l5958 2940  
                         l5896 453C                           l5888 4534                           l5992 2962  
                         l5984 295A                           l5976 2952                           l5968 294A  
                         l5994 2964                           l5986 295C                           l5978 2954  
                         l5996 2966                           l5988 295E                           l5998 2968  
                         STR_1 0E10                           STR_2 0E01                   _BAUD4CONbits 000EE9  
                         u5000 45FA                           u5001 45F6                           u5010 4610  
                         _T2PR 000FBC                           u5011 460C                           u5100 28DE  
                         u5020 26D8                           u5101 28DA                           u5021 26D2  
                         u5110 28EE                           u5030 26DA                           u5111 28EA  
                         u5120 4456                           u6000 2636                           u5200 3C12  
                         u5040 26EC                           u5121 444E                           u6001 2632  
                         u5201 3C0E                           u5041 26E8                           u6010 2666  
                         u5210 3C2A                           u5050 2728                           u6011 2662  
                         u5211 3C26                           u5051 2724                           u6020 2694  
                         u6100 1FC8                           u5140 3DFC                           u5300 4686  
                         u5060 2754                           u5220 3144                           u6021 2690  
                         u6101 1FC4                           u5141 3DF8                           u5301 4680  
                         u5061 2750                           u5221 3140                           u6110 2142  
                         u6030 1EFE                           u5150 3E20                           u5310 4688  
                         u5070 276A                           u5230 3190                           u6031 1EFA  
                         u5151 3E1C                           u5071 2766                           u5231 318C  
                         u6200 22B6                           u6120 219C                           u6040 1F10  
                         u5400 1B24                           u5320 1A3E                           u5160 3E5C  
                         u5080 28A6                           u5240 31AC                           u6201 22B2  
                         u6121 2198                           u6041 1F0C                           u5401 1B20  
                         u5321 1A3A                           u5161 3E58                           u5081 28A2  
                         u5241 31A8                           u5138 4458                           u6210 22F0  
                         u6130 21BC                           u6050 1F20                           u5410 1B92  
                         u5330 1A50                           u5170 3E74                           u5250 35E2  
                         u5090 28C4                           u6211 22EC                           u6131 21B8  
                         u6115 2138                           u6051 1F1C                           u5411 1B8E  
                         u5331 1A4C                           u5171 3E70                           u5251 35DE  
                         u5091 28C0                           u6220 38D0                           u6140 21CE  
                         u6060 1F60                           u5500 1C70                           u5420 1BAA  
                         u5340 1A60                           u6300 2BE6                           u5180 3BCA  
                         u5260 35FA                           u6221 38CC                           u6141 21CA  
                         u6061 1F5C                           u5501 1C6C                           u5421 1BA4  
                         u5341 1A5C                           u6301 2BE2                           u5181 3BC6  
                         u5261 35F6                           u6230 390E                           u6150 21FC  
                         u6070 1F72                           u5510 1C8E                           u5430 1BAC  
                         u5350 1AA2                           u6310 2C30                           u5190 3BEE  
                         u5270 3720                           u6231 390A                           u6151 21F8  
                         u6071 1F6E                           u5511 1C8A                           u5351 1A9E  
                         u6311 2C2C                           u5191 3BEA                           u5271 371C  
                         u6400 3AFE                           u6240 392C                           u6160 2212  
                         u6080 1F82                           u5600 1DCC                           u5520 1CC6  
                         u5440 1BD4                           u5360 1AB8                           u6320 2C4E  
                         u5280 3738                           u4800 2D0C                           u6401 3AF6  
                         u6241 3928                           u6161 220E                           u6081 1F7E  
                         u5601 1DC8                           u5521 1CC2                           u5441 1BD0  
                         u5361 1AB4                           u6321 2C4A                           u5281 3734  
                         u4801 2D08                           u7017 2ACE                           u5290 45A8  
                         u6250 394C                           u6170 2226                           u6090 1FB8  
                         u5610 1DE2                           u5530 1D0C                           u5450 1BF2  
                         u5370 1ACA                           u6330 2C5E                           u5291 45A4  
                         u6251 3948                           u6171 2222                           u6091 1FB4  
                         u5611 1DDE                           u5531 1D08                           u5451 1BEE  
                         u5371 1AC6                           u6331 2C5A                           u4811 2D36  
                         u7107 1490                           u7027 2AFE                           u6420 3B5C  
                         u6260 399C                           u6180 2240                           u5700 1ED0  
                         u5620 1DF8                           u5540 1D42                           u5460 1C12  
                         u5380 1ADA                           u6340 2C6C                           u4820 2D5A  
                         u4900 3096                           u4740 3D28                           u6421 3B54  
                         u6261 3998                           u6181 223C                           u5701 1ECC  
                         u5621 1DF4                           u5541 1D3E                           u5461 1C0E  
                         u5381 1AD6                           u6341 2C68                           u4821 2D56  
                         u4901 3092                           u4741 3D24                           u7117 14B6  
                         u7037 39DA                           u6190 2288                           u5630 1E0C  
                         u5550 1D52                           u5470 1C20                           u5390 1B16  
                         u6350 2CA6                           u6270 2B26                           u4830 2D84  
                         u4910 30DE                           u4750 3D3A                           u5710 4256  
                         u6510 1148                           u6191 2284                           u5631 1E08  
                         u5551 1D4E                           u5471 1C1C                           u5391 1B12  
                         u6351 2CA2                           u6271 2B22                           u4831 2D80  
                         u4911 30DA                           u4751 3D36                           u5711 4252  
                         u7207 198A                           u7127 155E                           u6511 1144  
                         u7047 3A34                           u5800 2328                           u5640 1E26  
                         u5560 1D7E                           u5480 1C30                           u6360 2CB4  
                         u6280 2B34                           u4920 40B6                           u4840 2DC4  
                         u4760 3D62                           u5720 34A4                           u6600 1320  
                         u6520 117A                           u6440 39C0                           u5801 2324  
                         u5641 1E22                           u5561 1D7A                           u5481 1C2C  
                         u6361 2CB0                           u6281 2B30                           u4921 40B2  
                         u4841 2DC0                           u4761 3D5E                           u5721 34A0  
                         u7217 19B0                           u7137 1584                           u6601 131C  
                         u6521 1176                           u7057 3A58                           u6441 39B8  
                         u6418 3B00                           u6370 3AA4                           u5810 233A  
                         u5650 1E60                           u5570 1D8E                           u5490 1C62  
                         u6290 2B90                           u4930 40D4                           u4850 2E0E  
                         u4770 3D98                           u5730 34BC                           u6610 1376  
                         u6530 119C                           u6371 3A9C                           u5811 2336  
                         u5651 1E5C                           u5571 1D8A                           u5491 1C5E  
                         u6291 2B8C                           u4931 40D0                           u4851 2E0A  
                         u4771 3D94                           u7307 37B0                           u5731 34B8  
                         u7227 1A18                           u7147 1674                           u6611 1372  
                         u6531 1198                           u7067 44C2                           u5900 24F2  
                         u5820 234A                           u5660 1E72                           u5580 1DAA  
                         u4940 40F0                           u4860 2FCE                           u4780 442A  
                         u5740 3366                           u6700 163A                           u6620 13CC  
                         u6540 11CE                           u6508 3A7A                           u6460 3A08  
                         u5901 24EE                           u5821 2346                           u5661 1E6E  
                         u5581 1DA6                           u4941 40EC                           u4861 2FCA  
                         u4781 4426                           u7317 3880                           u5741 3362  
                         u7237 328C                           u7157 169A                           u6701 1636  
                         u6621 13C8                           u7077 12D2                           u6541 11CA  
                         u6461 3A04                           u6438 3B5E                           u6390 3AEC  
                         u5910 2516                           u5830 238E                           u5670 1E82  
                         u5590 1DBA                           u4790 2CDA                           u4870 3000  
                         u4950 4030                           u5750 337E                           u6710 166C  
                         u6630 1424                           u6550 11F0                           u6470 3A1A  
                         u6391 3AE8                           u5911 2512                           u5831 238A  
                         u5671 1E7E                           u5591 1DB6                           u7407 3672  
                         u7327 3F3C                           u4791 2CD6                           u4871 2FFC  
                         u4951 402C                           u5751 337A                           u7247 32B8  
                         u7167 178A                           u6711 1668                           u6631 1420  
                         u7087 12E4                           u6551 11EC                           u6471 3A12  
                         u5920 252C                           u5840 23A0                           u5680 1EA2  
                         u4880 303E                           u4960 4086                           u5760 385E  
                         u6800 191E                           u6720 16FA                           u6640 1456  
                         u6560 1222                           u5921 2528                           u5841 239C  
                         u5681 1E9E                           u7417 3742                           u7337 3F68  
                         u4881 303A                           u4961 4082                           u5761 385A  
                         u7257 3388                           u6801 191A                           u7177 17B0  
                         u6721 16F6                           u6641 1452                           u7097 13E8  
                         u6561 121E                           u5930 254A                           u5850 23B0  
                         u5690 1EB4                           u4890 3068                           u4970 4488  
                         u5770 3876                           u6810 1950                           u6730 172C  
                         u6650 1488                           u6570 1266                           u6490 3A78  
                         u6458 39C2                           u5931 2546                           u5851 23AC  
                         u5691 1EB0                           u7427 3E7E                           u7347 3508  
                         u4891 3064                           u4971 4484                           u5771 3872  
                         u7267 33CA                           u6811 194C                           u7187 1858  
                         u6731 1728                           u6651 1484                           u6571 1262  
                         u6491 3A70                           u6388 3AA6                           u5780 4510  
                         u5940 256A                           u5860 23F0                           u4980 2E6C  
                         u6820 1982                           u6740 1782                           u6660 14F2  
                         u6580 1298                           u6900 29BE                           u7437 3ABE  
                         u5781 450C                           u5941 2566                           u5861 23EC  
                         u4981 2E68                           u7357 3534                           u7277 33F6  
                         u6821 197E                           u7197 187E                           u6741 177E  
                         u6661 14EE                           u6581 1294                           u6901 29BA  
                         u5950 257C                           u5870 2430                           u4990 2F36  
                         u5790 466C                           u6750 17EC                           u6670 1524  
                         u6590 12CA                           u6910 29DE                           u7447 3B18  
                         u5951 2578                           u5871 242C                           u4991 2F32  
                         u7367 3604                           u5791 4668                           u7287 34C6  
                         u6751 17E8                           u6671 1520                           u6591 12C6  
                         u6911 29D4                           u5960 25AA                           u5880 24A6  
                         u6760 181E                           u6680 1556                           u6488 3A1C  
                         u7457 3B3C                           u5961 25A6                           u5881 24A2  
                         u7377 3FBE                           u7297 3784                           u6761 181A  
                         u6681 1552                           u5970 25C0                           u5890 24C8  
                         u6770 1850                           u6690 15E4                           u6930 2A8C  
                         u5971 25BC                           u5891 24C4                           u7387 3FEA  
                         u6771 184C                           u6691 15E0                           u6931 2A88  
                         u5980 25D4                           u6780 18BA                           u5981 25D0  
                         u7397 3646                           u6781 18B6                           u5990 25EE  
                         u6790 18EC                           u5991 25EA                           u6791 18E8  
                         u6928 29E2                           u6890 29A4                           u6891 29A0  
                         abs@a 0017                           _dbuf 0154                           _main 2926  
                         _dtoa 26A8                           _prec 00CF                           pad@i 001C  
                         pad@p 0019                           fsr1h 000FE2                           fsr2h 000FDA  
                         indf2 000FDF                           fsr1l 000FE1                           pad@w 001E  
                         fsr2l 000FD9                           btemp 005B                           _stop 3DE0  
                         prodh 000FF4                           prodl 000FF3                           start 0076  
              ___fldiv@new_exp 0047         __end_of_color_read_Red 42B2                __end_of_HighISR 0076  
                 ___param_bank 000000                    _turnLeft_90 3628                   main@clearRef 0178  
                        ??_abs 0019                          ??_pad 001B                __end_of___aodiv 2E50  
              __end_of___fladd 1EE4                          ?_main 0001                          ?_dtoa 0020  
              __end_of___aomod 3120                __end_of___fldiv 26A8                __end_of___flmul 230E  
              __end_of___flsub 43E8                          ?_stop 0018                __end_of___lwdiv 4110  
                        i2l507 0066                          i2l509 006A                          i2l490 46A0  
                        i2l483 456A                          i2l476 45E8                   vfpfcnvrt@fmt 0045  
                        _TMR0H 000FD4                          _TMR0L 000FD3     __end_of_I2C_2_Master_Start 46C2  
   __end_of_I2C_2_Master_Write 46AE                          _flags 00D1                          _fputc 3D16  
                        _fputs 43E8                          pad@fp 0015                          _width 00CD  
                        _putch 46D0                          dtoa@d 0022                          dtoa@i 0041  
                        dtoa@n 0038                          dtoa@p 0034                          dtoa@s 0040  
                        dtoa@w 0036                          tablat 000FF5                __end_of_reverse 3C44  
                        ttemp5 005C                          ttemp6 005F                          ttemp7 0063  
                        status 000FD8                          wtemp8 005C                __end_of_sprintf 4212  
      __end_of_color_read_Blue 43A2          _I2C_2_Master_RepStart 46C2             putCharToRxBuf@byte 0001  
              ?_color_read_Red 0009                __initialization 416E                   __end_of_main 2B14  
                 __end_of_dtoa 2926                i2_isDataInTxBuf 468A                   __end_of_stop 3E8E  
                 _turnLeft_135 3766             putCharToTxBuf@byte 0005                  colorDetect@mL 008B  
                colorDetect@mR 008D                         ??_main 00CB                         ??_dtoa 002A  
                       ??_stop 001C                  __activetblptr 000001                   _turnRight_90 34EA  
                 ?_setMotorPWM 0012                         ?_fputc 0005                         ?_fputs 000E  
                       _CCPR1H 000FAA                         _CCPR2H 000FA6                         _CCPR3H 000F25  
                       _CCPR4H 000F21                         ?_putch 0001          colorDetect@greenPrint 00C3  
                       _RC0PPS 000E62                         _RC4REG 000EE3                         _RE2PPS 000E74  
                       _RD5PPS 000E6F                         _RC7PPS 000E69                         _RD6PPS 000E70  
                       _RE4PPS 000E76                         i2l4300 45E6                         i2l4302 4540  
                       i2l4304 4550                         i2l4306 4554                         i2l2682 468A  
                       i2l4294 45C2                         i2l4470 0022                         i2l4296 45D2  
                       i2l4472 0028                         i2l4298 45D6                         i2l4474 0038  
                       _RG6PPS 000E88                         i2l4476 0046                         i2l4468 0012  
                       i2l4478 005A                      ??_HighISR 0003       __end_of_color_click_init 44E2  
                       _RX4PPS 000E15                         _TX4REG 000EE4               __end_of___xxtofl 2CC8  
             __end_of_getColor 416E                   _CCPTMRS0bits 000FAD                   vfprintf@cfmt 0055  
                       ___flge 38A2               _getCharFromTxBuf 4540                      ??___aodiv 0015  
                    ??___fladd 000D                      ??___aomod 0015                         ___wmul 4612  
                    ??___fldiv 003E                      ??___flmul 0025                      ??___flsub 001D  
                    ??___lwdiv 000F                         clear_0 4194                         isa$std 000001  
                       pad@buf 0017                  main@motorLeft 019D                         dtoa@fp 0020  
                       fputc@c 0005              ?_TxBufferedString 0006                         fputs@c 0012  
                       fputs@i 0013                         fputs@s 000E                   __mediumconst 0000  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
           ??_TxBufferedString 0008                      ??_reverse 001C               __end_of_whiteCal 3A8A  
                       putch@c 0001               __end_of_vfprintf 4262                         stop@mL 0018  
                       stop@mR 001A              ??_initDCmotorsPWM 0007                      ??_sprintf 0057  
             __end_of_turn_180 33AC                     ___flge@ff1 001D                     ___flge@ff2 0021  
                 ___xxtofl@arg 000F                   ___xxtofl@exp 000E                   ___xxtofl@val 0005  
        __end_of_isDataInTxBuf 468A                     __accesstop 0060        __end_of__initialization 41AE  
     __end_of_color_read_Clear 4352       __end_of_color_read_Green 4302         ?_I2C_2_Master_RepStart 0001  
      __end_ofi2_isDataInTxBuf 46A2                  ___rparam_used 000001               ?_color_read_Blue 0009  
            main@ambientRGBVal 0184                 __pcstackCOMRAM 0001                  ?_DCmotorsInit 0005  
        colorDetect@testString 0091                   __pidataBANK1 46CC                  __end_of_fputc 3DE0  
                __end_of_fputs 442C                  __end_of_putch 46D2                        ??_fputc 0009  
                      ??_fputs 0012             _reverseSquareRight 3F1E                        ??_putch 0005  
                   __pbssBANK0 00CD                     __pbssBANK1 0100                     _ambientCal 3A8A  
          ?_reverseSquareRight 0024                  _turnRight_135 33AC              _color_writetoaddr 4638  
                 _T2CLKCONbits 000FBF                 ??_DCmotorsInit 0009                        ?___flge 001D  
                 ?_turnLeft_90 001E             ?_color_writetoaddr 0007                        ?___wmul 0005  
          ??_color_writetoaddr 0008           ??_reverseSquareRight 0028                      ?___xxtofl 0005  
                      _SP4BRGH 000EE6                        _SP4BRGL 000EE5                      ?_getColor 0010  
                      _SSP2ADD 000ED6                        _SSP2BUF 000ED5         color_writetoaddr@value 0007  
             ??_color_read_Red 000B                        _HighISR 0008                 ?_turnRight_135 001E  
    __end_of_color_writetoaddr 4658               ?i2_isDataInTxBuf 0001             _I2C_2_Master_Start 46B8  
                   _initUSART4 4512             _I2C_2_Master_Write 46A2                        __Hparam 0000  
                      __Lparam 0000              color_read_Red@tmp 000E                        ___aodiv 2CC8  
                      ___fladd 1A24                        ___aomod 2FBC                        ___fldiv 230E  
                      ___flmul 1EE4                      ?_whiteCal 0012                        ___flsub 43A2  
          ?_I2C_2_Master_Start 0001                        ___lwdiv 409C            ?_I2C_2_Master_Write 0001  
                   _off_period 0150                      ?_vfprintf 0060                   __psmallconst 0E00  
                    ?_turn_180 001E                        __pcinit 416E                        __ramtop 0E00  
                      __ptext0 2926                        __ptext1 39A6                        __ptext2 4512  
                      __ptext3 3E8E                        __ptext4 44AE                        __ptext5 4638  
                      __ptext6 456C                        __ptext7 0E1E                        __ptext8 326E  
                      __ptext9 33AC              colorDetect@RGBVal 00B7                      _T2CONbits 000FBD  
                   ??___xxtofl 0009                      _T2HLTbits 000FBE                        _reverse 3B6E  
                   ??_getColor 0012                  _RxBufWriteCnt 005A       __end_of_getCharFromTxBuf 456C  
               main@motorRight 0194                        _sprintf 41C0           ??_I2C_2_Master_Start 0006  
         ??_I2C_2_Master_Write 0006           end_of_initialization 41AE              __end_of_sendTxBuf 4672  
               DCmotorsInit@mL 0005                 DCmotorsInit@mR 0007                    ?_ambientCal 0012  
                      fputc@fp 0007                        fputs@fp 0010              ?_color_click_init 0001  
            colorDetect@whiteB 00AD              colorDetect@whiteG 00A9              colorDetect@whiteR 00A5  
           ??_color_click_init 0009              __end_of_vfpfcnvrt 326E                        postdec1 000FE5  
                      postdec2 000FDD                        postinc0 000FEE                        postinc1 000FE6  
                      postinc2 000FDE               vfpfcnvrt@convarg 004B                     ??_whiteCal 0014  
                   ??_vfprintf 0055                     ??_turn_180 0022                _initDCmotorsPWM 3E8E  
                    _PORTFbits 000F8E             setMotorPWM@negDuty 0017                    ___fladd@grs 0014  
                   main@RGBVal 017C                  ___xxtofl@sign 000D                      _TRISAbits 000F81  
           setMotorPWM@posDuty 0016                      _TRISCbits 000F83                      _TRISDbits 000F84  
                    _TRISEbits 000F85                      _TRISFbits 000F86                      _TRISGbits 000F87  
                    _TRISHbits 000F88           __end_of_DCmotorsInit 3D16                    ___fldiv@grs 0049  
                  ___fldiv@rem 0042            reverseSquareLeft@mL 0024            reverseSquareLeft@mR 0026  
     color_writetoaddr@address 0008        ??_I2C_2_Master_RepStart 0006                ??_turnRight_135 0022  
                  ___flmul@grs 002B                    _CCP1CONbits 000FAB              ?_color_read_Clear 0009  
                 _EUSART4RXbuf 013C                   _EUSART4TXbuf 0100                    _CCP2CONbits 000FA7  
            ?_color_read_Green 0009                    _CCP3CONbits 000F26                    ?_initUSART4 0001  
                  _CCP4CONbits 000F22                     main@whiteC 0174             ??_color_read_Clear 000B  
           ??_color_read_Green 000B                  ??_colorDetect 008F                 __end_of___flge 39A6  
                  vfpfcnvrt@ap 0047                    vfpfcnvrt@cp 0053                    vfpfcnvrt@fp 0043  
               __end_of___wmul 4638         colorDetect@whiteRGBVal 0089            color_read_Clear@tmp 000E  
          start_initialization 416E           colorDetect@bluePrint 00C7                    __end_of_abs 44AE  
                  __end_of_pad 409C                  _TxBufWriteCnt 0058            color_read_Green@tmp 000E  
      __end_of_initDCmotorsPWM 3F1E                    vfprintf@fmt 0062                       ??___flge 0025  
                     ??___wmul 0009                 _putCharToRxBuf 45C0                 _putCharToTxBuf 4596  
                  __pdataBANK1 01A6            __end_of_colorDetect 1A24                      ___fladd@a 0009  
                    ___fladd@b 0005                      ___fldiv@a 003A                      ___fldiv@b 0036  
                    ___flmul@a 0021                      ___flmul@b 001D                    __pbssCOMRAM 0057  
                    ___flsub@a 0019                      ___flsub@b 0015                  __pcstackBANK0 0060  
                __pcstackBANK1 0174               ___aodiv@dividend 0005                       ?_HighISR 0001  
            _reverseSquareLeft 3FA0             ?_reverseSquareLeft 0024               ___lwdiv@dividend 000B  
                    _dtoa$2676 0032         __end_of_putCharToRxBuf 45EA         __end_of_putCharToTxBuf 45C0  
                    __pintcode 0008                       ?___aodiv 0005                       ?___fladd 0005  
                     ?___aomod 0005                       ?___fldiv 0036               ___aodiv@quotient 0017  
                     ?___flmul 001D                       ?___flsub 0015                  ?_turnLeft_135 001E  
                     ?___lwdiv 000B            ??_reverseSquareLeft 0028                turnRight_135@mL 001E  
              turnRight_135@mR 0020         TxBufferedString@string 0006                 turnLeft_135@mL 001E  
               turnLeft_135@mR 0020           I2C_2_Master_Read@ack 0007           I2C_2_Master_Read@tmp 0008  
                  __smallconst 0E00              _I2C_2_Master_Idle 45EA                  ?_turnRight_90 001E  
            _I2C_2_Master_Init 456C              _I2C_2_Master_Read 442C              _I2C_2_Master_Stop 46AE  
                 _RxBufReadCnt 0059                       ?_reverse 0018             ?_I2C_2_Master_Idle 0001  
           ?_I2C_2_Master_Init 0001             ?_I2C_2_Master_Read 0001                  ??_setMotorPWM 0014  
           ?_I2C_2_Master_Stop 0001               ___lwdiv@quotient 0010       initDCmotorsPWM@PWMperiod 0005  
                     ?_sprintf 0066              ?_getCharFromTxBuf 0001      __end_of_reverseSquareLeft 4022  
           ??_getCharFromTxBuf 0001                   ??_ambientCal 0014            ??_I2C_2_Master_Idle 0005  
          ??_I2C_2_Master_Init 0005            ??_I2C_2_Master_Read 0006                 ___wmul@product 0009  
                     _LATAbits 000F79            ??_I2C_2_Master_Stop 0006                       _LATCbits 000F7B  
                _isDataInTxBuf 4672                       _LATDbits 000F7C                       _LATEbits 000F7D  
                     _LATFbits 000F7E                      _on_period 0152               _TxBufferedString 44E2  
                     _LATGbits 000F7F                       _LATHbits 000F80                      _sendTxBuf 4658  
                     _IPR4bits 000E23                       _PIE4bits 000E2D                       i2u214_40 469E  
                     i2u214_41 4698                      getColor@v 0010                       i2u215_40 46A0  
                     i2u450_40 4550                       i2u450_41 454C                       i2u463_40 0022  
                     i2u463_41 001E                       _PIR4bits 000E37                       i2u464_40 0038  
                     i2u464_41 0034                       i2u449_40 45D2                       i2u465_40 0046  
                     i2u449_41 45CE                       i2u465_41 0042                       i2u466_40 005A  
                     i2u466_41 0056                ?_putCharToRxBuf 0001               ?_initDCmotorsPWM 0005  
                  _colorDetect 0E1E                ?_putCharToTxBuf 0001                 ??_turnLeft_135 0022  
                 _DCmotorsInit 3C44                       _SSP2CON2 000EDA                       _SSP2STAT 000ED8  
                    _vfpfcnvrt 3120      __end_of_I2C_2_Master_Idle 4612      __end_of_I2C_2_Master_Init 4596  
    __end_of_I2C_2_Master_Read 446E              ___wmul@multiplier 0005      __end_of_I2C_2_Master_Stop 46B8  
               ??_turnRight_90 0022                   setMotorPWM@m 0012    I2C_2_Master_Write@data_byte 0006  
           __end_of_ambientCal 3B6E              ??_color_read_Blue 000B                   _TxBufReadCnt 0057  
                    copy_data0 4182            colorDetect@ambientB 00B5            colorDetect@ambientG 00B3  
          colorDetect@ambientR 00B1            colorDetect@clearRef 0083                 ?_isDataInTxBuf 0001  
__end_of_I2C_2_Master_RepStart 46CC             color_read_Blue@tmp 000E            __end_of_setMotorPWM 2FBC  
                   ?_sendTxBuf 0001                   ??_initUSART4 0005                       __Hrparam 0000  
          colorDetect@redPrint 00BF                     vfprintf@ap 0064                       __Lrparam 0000  
                   vfprintf@fp 0060                   __Lsmallconst 0E00                     ?_vfpfcnvrt 0043  
     colorDetect@ambientRGBVal 0087                ___aodiv@divisor 000D                ___aodiv@counter 0015  
                   _ANSELDbits 000EA7                     _ANSELFbits 000EB4                     sprintf@fmt 0068  
                   turn_180@mL 001E                     turn_180@mR 0020                       ___xxtofl 2B14  
                   _T0CON0bits 000FD5                     _T0CON1bits 000FD6                ___lwdiv@divisor 000D  
           __end_of_initUSART4 4540                       _getColor 4110                ___lwdiv@counter 000F  
                     __ptext10 3766                       __ptext11 41C0                       __ptext20 2FBC  
                     __ptext12 4212                       __ptext21 2CC8                       __ptext13 3120  
                     __ptext30 2E50                       __ptext22 4658                       __ptext14 26A8  
                     __ptext31 4612                       __ptext23 4672                       __ptext15 4022  
                     __ptext40 4596                       __ptext32 409C                       __ptext24 3F1E  
                     __ptext16 43E8                       __ptext41 3A8A                       __ptext33 2B14  
                     __ptext25 34EA                       __ptext17 3D16                       __ptext50 46C2  
                     __ptext42 4110                       __ptext34 43A2                       __ptext26 3FA0  
                     __ptext18 46D0                       __ptext51 442C                       __ptext43 4262  
                     __ptext35 1A24                       __ptext27 3628                       __ptext19 446E  
                     __ptext52 45EA                       __ptext44 42B2                       __ptext36 1EE4  
                     __ptext28 3DE0                       __ptext53 3C44                       __ptext45 4302  
                     __ptext37 38A2                       __ptext29 3B6E                       __ptext46 4352  
                     __ptext38 230E                       __ptext55 468A                       __ptext47 46A2  
                     __ptext39 44E2                       __ptext56 45C0                       __ptext48 46AE  
                     __ptext57 4540                       __ptext49 46B8                    ambientCal@i 0016  
                  ambientCal@v 0012                 turnRight_90@mL 001E                 turnRight_90@mR 0020  
                 _SSP2CON1bits 000ED9                   _SSP2CON2bits 000EDA                  turnLeft_90@mL 001E  
                turnLeft_90@mR 0020          __end_of_turnRight_135 34EA                      reverse@mL 0018  
                    reverse@mR 001A                  ??_turnLeft_90 0022                 _turning_time45 01A8  
                     isa$xinst 000000                     _RC4STAbits 000EE7                       int$flags 005B  
                     _whiteCal 39A6                       _vfprintf 4212                       _turn_180 326E  
             ___aomod@dividend 0005                      whiteCal@i 0016                      whiteCal@v 0012  
                   _INTCONbits 000FF2              ??i2_isDataInTxBuf 0001                   _reverse_time 01A6  
                  _setMotorPWM 2E50           __end_of_turnLeft_135 38A2                ??_isDataInTxBuf 0005  
                     intlevel2 0000                      sprintf@ap 0076                    ??_sendTxBuf 0005  
              main@whiteRGBVal 018C           __end_of_turnRight_90 3628                ___aomod@divisor 000D  
                  ??_vfpfcnvrt 0049                ___aomod@counter 0015               _color_click_init 44AE  
          __end_of_turnLeft_90 3766       __end_of_TxBufferedString 4512                       sprintf@f 0078  
                     sprintf@s 0066                     _SSP2DATPPS 000E1D                     _SSP2CLKPPS 000E1C  
                ___fladd@signs 0011                     _TX4STAbits 000EE8                   ___aodiv@sign 0016  
                 ___fladd@aexp 0012                   ___fladd@bexp 0013               ??_putCharToRxBuf 0001  
             ??_putCharToTxBuf 0005                   ___aomod@sign 0016                   ?_colorDetect 0083  



Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Thu Dec 15 08:16:26 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=3
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=3
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=3
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=2
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=2
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=2
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=2
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=2
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=2
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=2
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=2
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    77                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    78                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    79                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    80                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    81   000000                     
    82                           ; Version 2.35
    83                           ; Generated 05/05/2021 GMT
    84                           ; 
    85                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    86                           ; All rights reserved.
    87                           ; 
    88                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    89                           ; 
    90                           ; Redistribution and use in source and binary forms, with or without modification, are
    91                           ; permitted provided that the following conditions are met:
    92                           ; 
    93                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    94                           ;        conditions and the following disclaimer.
    95                           ; 
    96                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    97                           ;        of conditions and the following disclaimer in the documentation and/or other
    98                           ;        materials provided with the distribution. Publication is not required when
    99                           ;        this file is used in an embedded application.
   100                           ; 
   101                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   102                           ;        software without specific prior written permission.
   103                           ; 
   104                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   105                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   106                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   107                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   108                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   109                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   110                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   111                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   112                           ; 
   113                           ; 
   114                           ; Code-generator required, PIC18F67K40 Definitions
   115                           ; 
   116                           ; SFR Addresses
   117   000000                     
   118                           	psect	idataBANK0
   119   004C4C                     __pidataBANK0:
   120                           	callstack 0
   121                           
   122                           ;initializer for _reverse_time
   123   004C4C  02BC               	dw	700
   124                           
   125                           ;initializer for _turning_time45
   126   004C4E  00AA               	dw	170
   127   000000                     _TX4REG	set	3812
   128   000000                     _RC4STAbits	set	3815
   129   000000                     _SP4BRGH	set	3814
   130   000000                     _TRISFbits	set	3974
   131   000000                     _LATFbits	set	3966
   132   000000                     _TRISDbits	set	3972
   133   000000                     _TRISGbits	set	3975
   134   000000                     _LATGbits	set	3967
   135   000000                     _LATEbits	set	3965
   136   000000                     _SSP2CON2bits	set	3802
   137   000000                     _RX4PPS	set	3605
   138   000000                     _SSP2CLKPPS	set	3612
   139   000000                     _SSP2DATPPS	set	3613
   140   000000                     _RC7PPS	set	3689
   141   000000                     _RE2PPS	set	3700
   142   000000                     _LATCbits	set	3963
   143   000000                     _LATDbits	set	3964
   144   000000                     _TRISAbits	set	3969
   145   000000                     _LATHbits	set	3968
   146   000000                     _TRISCbits	set	3971
   147   000000                     _TRISEbits	set	3973
   148   000000                     _PORTFbits	set	3982
   149   000000                     _TRISHbits	set	3976
   150   000000                     _T2PR	set	4028
   151   000000                     _T2CONbits	set	4029
   152   000000                     _CCPR2H	set	4006
   153   000000                     _CCPR1H	set	4010
   154   000000                     _RE4PPS	set	3702
   155   000000                     _RG6PPS	set	3720
   156   000000                     _RD5PPS	set	3695
   157   000000                     _ANSELDbits	set	3751
   158   000000                     _SSP2ADD	set	3798
   159   000000                     _SSP2CON1bits	set	3801
   160   000000                     _CCPR4H	set	3873
   161   000000                     _CCPR3H	set	3877
   162   000000                     _TMR0L	set	4051
   163   000000                     _TMR0H	set	4052
   164   000000                     _T0CON0bits	set	4053
   165   000000                     _T0CON1bits	set	4054
   166   000000                     _T2CLKCONbits	set	4031
   167   000000                     _T2HLTbits	set	4030
   168   000000                     _CCP1CONbits	set	4011
   169   000000                     _CCPTMRS0bits	set	4013
   170   000000                     _CCP2CONbits	set	4007
   171   000000                     _LATAbits	set	3961
   172   000000                     _CCP3CONbits	set	3878
   173   000000                     _CCP4CONbits	set	3874
   174   000000                     _RC4REG	set	3811
   175   000000                     _SP4BRGL	set	3813
   176   000000                     _TX4STAbits	set	3816
   177   000000                     _BAUD4CONbits	set	3817
   178   000000                     _SSP2CON2	set	3802
   179   000000                     _SSP2STAT	set	3800
   180   000000                     _ANSELFbits	set	3764
   181   000000                     _SSP2BUF	set	3797
   182   000000                     _IPR4bits	set	3619
   183   000000                     _PIE4bits	set	3629
   184   000000                     _RC0PPS	set	3682
   185   000000                     _RD6PPS	set	3696
   186   000000                     _INTCONbits	set	4082
   187   000000                     _PIR4bits	set	3639
   188                           
   189                           	psect	smallconst
   190   000E00                     __psmallconst:
   191                           	callstack 0
   192   000E00  00                 	db	0
   193   000E01                     STR_1:
   194   000E01  4B                 	db	75	;'K'
   195   000E02  3A                 	db	58	;':'
   196   000E03  25                 	db	37
   197   000E04  64                 	db	100	;'d'
   198   000E05  20                 	db	32
   199   000E06  49                 	db	73	;'I'
   200   000E07  3A                 	db	58	;':'
   201   000E08  25                 	db	37
   202   000E09  64                 	db	100	;'d'
   203   000E0A  20                 	db	32
   204   000E0B  43                 	db	67	;'C'
   205   000E0C  3A                 	db	58	;':'
   206   000E0D  25                 	db	37
   207   000E0E  64                 	db	100	;'d'
   208   000E0F  20                 	db	32
   209   000E10  54                 	db	84	;'T'
   210   000E11  3A                 	db	58	;':'
   211   000E12  25                 	db	37
   212   000E13  64                 	db	100	;'d'
   213   000E14  20                 	db	32
   214   000E15  0D                 	db	13
   215   000E16  00                 	db	0
   216   000E17  25                 	db	37
   217   000E18  64                 	db	100	;'d'
   218   000E19  2C                 	db	44
   219   000E1A  25                 	db	37
   220   000E1B  64                 	db	100	;'d'
   221   000E1C  2C                 	db	44
   222   000E1D  25                 	db	37
   223   000E1E  64                 	db	100	;'d'
   224   000E1F  2C                 	db	44
   225   000E20  25                 	db	37
   226   000E21  64                 	db	100	;'d'
   227   000E22  20                 	db	32
   228   000E23  0D                 	db	13
   229   000E24  0A                 	db	10
   230   000E25  00                 	db	0
   231   000E26  00                 	db	0	; dummy byte at the end
   232   000000                     
   233                           ; #config settings
   234                           
   235                           	psect	cinit
   236   0048D8                     __pcinit:
   237                           	callstack 0
   238   0048D8                     start_initialization:
   239                           	callstack 0
   240   0048D8                     __initialization:
   241                           	callstack 0
   242                           
   243                           ; Initialize objects allocated to BANK0 (4 bytes)
   244                           ; load TBLPTR registers with __pidataBANK0
   245   0048D8  0E4C               	movlw	low __pidataBANK0
   246   0048DA  6EF6               	movwf	tblptrl,c
   247   0048DC  0E4C               	movlw	high __pidataBANK0
   248   0048DE  6EF7               	movwf	tblptrh,c
   249   0048E0  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   250   0048E2  6EF8               	movwf	tblptru,c
   251   0048E4  EE00  F0D4         	lfsr	0,__pdataBANK0
   252   0048E8  EE10 F004          	lfsr	1,4
   253   0048EC                     copy_data0:
   254   0048EC  0009               	tblrd		*+
   255   0048EE  CFF5 FFEE          	movff	tablat,postinc0
   256   0048F2  50E5               	movf	postdec1,w,c
   257   0048F4  50E1               	movf	fsr1l,w,c
   258   0048F6  E1FA               	bnz	copy_data0
   259                           
   260                           ; Clear objects allocated to BANK1 (60 bytes)
   261   0048F8  EE01  F09A         	lfsr	0,__pbssBANK1
   262   0048FC  0E3C               	movlw	60
   263   0048FE                     clear_0:
   264   0048FE  6AEE               	clrf	postinc0,c
   265   004900  06E8               	decf	wreg,f,c
   266   004902  E1FD               	bnz	clear_0
   267                           
   268                           ; Clear objects allocated to BANK0 (61 bytes)
   269   004904  EE00  F060         	lfsr	0,__pbssBANK0
   270   004908  0E3D               	movlw	61
   271   00490A                     clear_1:
   272   00490A  6AEE               	clrf	postinc0,c
   273   00490C  06E8               	decf	wreg,f,c
   274   00490E  E1FD               	bnz	clear_1
   275                           
   276                           ; Clear objects allocated to COMRAM (4 bytes)
   277   004910  6A5A               	clrf	(__pbssCOMRAM+3)& (0+255),c
   278   004912  6A59               	clrf	(__pbssCOMRAM+2)& (0+255),c
   279   004914  6A58               	clrf	(__pbssCOMRAM+1)& (0+255),c
   280   004916  6A57               	clrf	__pbssCOMRAM& (0+255),c
   281   004918                     end_of_initialization:
   282                           	callstack 0
   283   004918                     __end_of__initialization:
   284                           	callstack 0
   285   004918  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   286   00491A  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   287   00491C  0100               	movlb	0
   288   00491E  EF5E  F00F         	goto	_main	;jump to C main() function
   289                           
   290                           	psect	bssCOMRAM
   291   000057                     __pbssCOMRAM:
   292                           	callstack 0
   293   000057                     _TxBufReadCnt:
   294                           	callstack 0
   295   000057                     	ds	1
   296   000058                     _TxBufWriteCnt:
   297                           	callstack 0
   298   000058                     	ds	1
   299   000059                     _RxBufReadCnt:
   300                           	callstack 0
   301   000059                     	ds	1
   302   00005A                     _RxBufWriteCnt:
   303                           	callstack 0
   304   00005A                     	ds	1
   305                           
   306                           	psect	bssBANK0
   307   000060                     __pbssBANK0:
   308                           	callstack 0
   309   000060                     _EUSART4RXbuf:
   310                           	callstack 0
   311   000060                     	ds	20
   312   000074                     _width:
   313                           	callstack 0
   314   000074                     	ds	2
   315   000076                     _prec:
   316                           	callstack 0
   317   000076                     	ds	2
   318   000078                     _off_period:
   319                           	callstack 0
   320   000078                     	ds	2
   321   00007A                     _on_period:
   322                           	callstack 0
   323   00007A                     	ds	2
   324   00007C                     _flags:
   325                           	callstack 0
   326   00007C                     	ds	1
   327   00007D                     _dbuf:
   328                           	callstack 0
   329   00007D                     	ds	32
   330                           
   331                           	psect	dataBANK0
   332   0000D4                     __pdataBANK0:
   333                           	callstack 0
   334   0000D4                     _reverse_time:
   335                           	callstack 0
   336   0000D4                     	ds	2
   337   0000D6                     _turning_time45:
   338                           	callstack 0
   339   0000D6                     	ds	2
   340                           
   341                           	psect	bssBANK1
   342   00019A                     __pbssBANK1:
   343                           	callstack 0
   344   00019A                     _EUSART4TXbuf:
   345                           	callstack 0
   346   00019A                     	ds	60
   347                           
   348                           	psect	cstackBANK2
   349   000200                     __pcstackBANK2:
   350                           	callstack 0
   351   000200                     main@counter_history:
   352                           	callstack 0
   353                           
   354                           ; 64 bytes @ 0x0
   355   000200                     	ds	64
   356   000240                     main@turn_history:
   357                           	callstack 0
   358                           
   359                           ; 64 bytes @ 0x40
   360   000240                     	ds	64
   361   000280                     main@whiteC:
   362                           	callstack 0
   363                           
   364                           ; 4 bytes @ 0x80
   365   000280                     	ds	4
   366   000284                     main@forwardCount:
   367                           	callstack 0
   368                           
   369                           ; 2 bytes @ 0x84
   370   000284                     	ds	2
   371   000286                     main@clearRef:
   372                           	callstack 0
   373                           
   374                           ; 4 bytes @ 0x86
   375   000286                     	ds	4
   376   00028A                     main@colorNum:
   377                           	callstack 0
   378                           
   379                           ; 2 bytes @ 0x8A
   380   00028A                     	ds	2
   381   00028C                     main@RGBVal:
   382                           	callstack 0
   383                           
   384                           ; 8 bytes @ 0x8C
   385   00028C                     	ds	8
   386   000294                     main@carGo:
   387                           	callstack 0
   388                           
   389                           ; 1 bytes @ 0x94
   390   000294                     	ds	1
   391   000295                     main@ambientRGBVal:
   392                           	callstack 0
   393                           
   394                           ; 8 bytes @ 0x95
   395   000295                     	ds	8
   396   00029D                     main@index:
   397                           	callstack 0
   398                           
   399                           ; 2 bytes @ 0x9D
   400   00029D                     	ds	2
   401   00029F                     main@whiteRGBVal:
   402                           	callstack 0
   403                           
   404                           ; 8 bytes @ 0x9F
   405   00029F                     	ds	8
   406   0002A7                     main@motorRight:
   407                           	callstack 0
   408                           
   409                           ; 9 bytes @ 0xA7
   410   0002A7                     	ds	9
   411   0002B0                     main@motorLeft:
   412                           	callstack 0
   413                           
   414                           ; 9 bytes @ 0xB0
   415   0002B0                     	ds	9
   416                           
   417                           	psect	cstackBANK1
   418   000100                     __pcstackBANK1:
   419                           	callstack 0
   420   000100                     return_home_turns@string1:
   421                           	callstack 0
   422                           
   423                           ; 150 bytes @ 0x0
   424   000100                     	ds	150
   425   000196                     return_home_turns@i:
   426                           	callstack 0
   427                           
   428                           ; 2 bytes @ 0x96
   429   000196                     	ds	2
   430   000198                     return_home_turns@k:
   431                           	callstack 0
   432                           
   433                           ; 2 bytes @ 0x98
   434   000198                     	ds	2
   435                           
   436                           	psect	cstackBANK0
   437   00009D                     __pcstackBANK0:
   438                           	callstack 0
   439   00009D                     ?_vfprintf:
   440                           	callstack 0
   441   00009D                     ?_colorDetect:
   442                           	callstack 0
   443   00009D                     vfprintf@fp:
   444                           	callstack 0
   445   00009D                     colorDetect@clearRef:
   446                           	callstack 0
   447                           
   448                           ; 4 bytes @ 0x0
   449   00009D                     	ds	2
   450   00009F                     vfprintf@fmt:
   451                           	callstack 0
   452                           
   453                           ; 2 bytes @ 0x2
   454   00009F                     	ds	2
   455   0000A1                     colorDetect@ambientRGBVal:
   456                           	callstack 0
   457   0000A1                     vfprintf@ap:
   458                           	callstack 0
   459                           
   460                           ; 2 bytes @ 0x4
   461   0000A1                     	ds	2
   462   0000A3                     ?_sprintf:
   463                           	callstack 0
   464   0000A3                     colorDetect@whiteRGBVal:
   465                           	callstack 0
   466   0000A3                     sprintf@s:
   467                           	callstack 0
   468                           
   469                           ; 2 bytes @ 0x6
   470   0000A3                     	ds	2
   471   0000A5                     colorDetect@mL:
   472                           	callstack 0
   473   0000A5                     sprintf@fmt:
   474                           	callstack 0
   475                           
   476                           ; 2 bytes @ 0x8
   477   0000A5                     	ds	2
   478   0000A7                     colorDetect@mR:
   479                           	callstack 0
   480                           
   481                           ; 2 bytes @ 0xA
   482   0000A7                     	ds	2
   483   0000A9                     colorDetect@whiteR:
   484                           	callstack 0
   485                           
   486                           ; 4 bytes @ 0xC
   487   0000A9                     	ds	4
   488   0000AD                     colorDetect@whiteG:
   489                           	callstack 0
   490                           
   491                           ; 4 bytes @ 0x10
   492   0000AD                     	ds	2
   493   0000AF                     sprintf@ap:
   494                           	callstack 0
   495                           
   496                           ; 2 bytes @ 0x12
   497   0000AF                     	ds	2
   498   0000B1                     colorDetect@whiteB:
   499                           	callstack 0
   500   0000B1                     sprintf@f:
   501                           	callstack 0
   502                           
   503                           ; 11 bytes @ 0x14
   504   0000B1                     	ds	4
   505   0000B5                     colorDetect@ambientR:
   506                           	callstack 0
   507                           
   508                           ; 2 bytes @ 0x18
   509   0000B5                     	ds	2
   510   0000B7                     colorDetect@ambientG:
   511                           	callstack 0
   512                           
   513                           ; 2 bytes @ 0x1A
   514   0000B7                     	ds	2
   515   0000B9                     colorDetect@ambientB:
   516                           	callstack 0
   517                           
   518                           ; 2 bytes @ 0x1C
   519   0000B9                     	ds	2
   520   0000BB                     colorDetect@colour_ref:
   521                           	callstack 0
   522                           
   523                           ; 2 bytes @ 0x1E
   524   0000BB                     	ds	1
   525   0000BC                     return_home_turns@turn_history:
   526                           	callstack 0
   527                           
   528                           ; 2 bytes @ 0x1F
   529   0000BC                     	ds	1
   530   0000BD                     colorDetect@RGBVal:
   531                           	callstack 0
   532                           
   533                           ; 8 bytes @ 0x20
   534   0000BD                     	ds	1
   535   0000BE                     return_home_turns@counter_history:
   536                           	callstack 0
   537                           
   538                           ; 2 bytes @ 0x21
   539   0000BE                     	ds	2
   540   0000C0                     return_home_turns@index:
   541                           	callstack 0
   542                           
   543                           ; 2 bytes @ 0x23
   544   0000C0                     	ds	2
   545   0000C2                     return_home_turns@mL:
   546                           	callstack 0
   547                           
   548                           ; 2 bytes @ 0x25
   549   0000C2                     	ds	2
   550   0000C4                     return_home_turns@mR:
   551                           	callstack 0
   552                           
   553                           ; 2 bytes @ 0x27
   554   0000C4                     	ds	1
   555   0000C5                     colorDetect@redPrint:
   556                           	callstack 0
   557                           
   558                           ; 4 bytes @ 0x28
   559   0000C5                     	ds	1
   560   0000C6                     ??_return_home_turns:
   561                           
   562                           ; 1 bytes @ 0x29
   563   0000C6                     	ds	3
   564   0000C9                     colorDetect@greenPrint:
   565                           	callstack 0
   566                           
   567                           ; 4 bytes @ 0x2C
   568   0000C9                     	ds	4
   569   0000CD                     colorDetect@bluePrint:
   570                           	callstack 0
   571                           
   572                           ; 4 bytes @ 0x30
   573   0000CD                     	ds	4
   574   0000D1                     ??_main:
   575                           
   576                           ; 1 bytes @ 0x34
   577   0000D1                     	ds	3
   578                           
   579                           	psect	cstackCOMRAM
   580   000001                     __pcstackCOMRAM:
   581                           	callstack 0
   582   000001                     ??_getCharFromTxBuf:
   583   000001                     putCharToRxBuf@byte:
   584                           	callstack 0
   585   000001                     
   586                           ; 1 bytes @ 0x0
   587   000001                     	ds	2
   588   000003                     ??_HighISR:
   589                           
   590                           ; 1 bytes @ 0x2
   591   000003                     	ds	2
   592   000005                     ??_I2C_2_Master_Idle:
   593   000005                     ?___wmul:
   594                           	callstack 0
   595   000005                     ?___fladd:
   596                           	callstack 0
   597   000005                     ?___xxtofl:
   598                           	callstack 0
   599   000005                     ?___aodiv:
   600                           	callstack 0
   601   000005                     ?___aomod:
   602                           	callstack 0
   603   000005                     putCharToTxBuf@byte:
   604                           	callstack 0
   605   000005                     initDCmotorsPWM@PWMperiod:
   606                           	callstack 0
   607   000005                     DCmotorsInit@mL:
   608                           	callstack 0
   609   000005                     ___wmul@multiplier:
   610                           	callstack 0
   611   000005                     fputc@c:
   612                           	callstack 0
   613   000005                     ___fladd@b:
   614                           	callstack 0
   615   000005                     ___xxtofl@val:
   616                           	callstack 0
   617   000005                     ___aodiv@dividend:
   618                           	callstack 0
   619   000005                     ___aomod@dividend:
   620                           	callstack 0
   621                           
   622                           ; 8 bytes @ 0x4
   623   000005                     	ds	1
   624   000006                     ??_I2C_2_Master_Read:
   625   000006                     I2C_2_Master_Write@data_byte:
   626                           	callstack 0
   627   000006                     TxBufferedString@string:
   628                           	callstack 0
   629                           
   630                           ; 2 bytes @ 0x5
   631   000006                     	ds	1
   632   000007                     color_writetoaddr@value:
   633                           	callstack 0
   634   000007                     I2C_2_Master_Read@ack:
   635                           	callstack 0
   636   000007                     DCmotorsInit@mR:
   637                           	callstack 0
   638   000007                     ___wmul@multiplicand:
   639                           	callstack 0
   640   000007                     fputc@fp:
   641                           	callstack 0
   642                           
   643                           ; 2 bytes @ 0x6
   644   000007                     	ds	1
   645   000008                     color_writetoaddr@address:
   646                           	callstack 0
   647   000008                     I2C_2_Master_Read@tmp:
   648                           	callstack 0
   649                           
   650                           ; 1 bytes @ 0x7
   651   000008                     	ds	1
   652   000009                     ??_fputc:
   653   000009                     ??_color_click_init:
   654   000009                     ??___xxtofl:
   655   000009                     ?_color_read_Red:
   656                           	callstack 0
   657   000009                     ?_color_read_Green:
   658                           	callstack 0
   659   000009                     ?_color_read_Blue:
   660                           	callstack 0
   661   000009                     ?_color_read_Clear:
   662                           	callstack 0
   663   000009                     ___wmul@product:
   664                           	callstack 0
   665   000009                     ___fladd@a:
   666                           	callstack 0
   667                           
   668                           ; 4 bytes @ 0x8
   669   000009                     	ds	2
   670   00000B                     ??_color_read_Red:
   671   00000B                     ??_color_read_Green:
   672   00000B                     ??_color_read_Blue:
   673   00000B                     ??_color_read_Clear:
   674   00000B                     ?___lwdiv:
   675                           	callstack 0
   676   00000B                     ___lwdiv@dividend:
   677                           	callstack 0
   678                           
   679                           ; 2 bytes @ 0xA
   680   00000B                     	ds	2
   681   00000D                     ??___fladd:
   682   00000D                     ___xxtofl@sign:
   683                           	callstack 0
   684   00000D                     ___lwdiv@divisor:
   685                           	callstack 0
   686   00000D                     ___aodiv@divisor:
   687                           	callstack 0
   688   00000D                     ___aomod@divisor:
   689                           	callstack 0
   690                           
   691                           ; 8 bytes @ 0xC
   692   00000D                     	ds	1
   693   00000E                     ___xxtofl@exp:
   694                           	callstack 0
   695   00000E                     color_read_Red@tmp:
   696                           	callstack 0
   697   00000E                     color_read_Green@tmp:
   698                           	callstack 0
   699   00000E                     color_read_Blue@tmp:
   700                           	callstack 0
   701   00000E                     color_read_Clear@tmp:
   702                           	callstack 0
   703   00000E                     fputs@s:
   704                           	callstack 0
   705                           
   706                           ; 2 bytes @ 0xD
   707   00000E                     	ds	1
   708   00000F                     ___lwdiv@quotient:
   709                           	callstack 0
   710   00000F                     ___xxtofl@arg:
   711                           	callstack 0
   712                           
   713                           ; 4 bytes @ 0xE
   714   00000F                     	ds	1
   715   000010                     getColor@v:
   716                           	callstack 0
   717   000010                     fputs@fp:
   718                           	callstack 0
   719                           
   720                           ; 2 bytes @ 0xF
   721   000010                     	ds	1
   722   000011                     ___lwdiv@counter:
   723                           	callstack 0
   724   000011                     ___fladd@signs:
   725                           	callstack 0
   726                           
   727                           ; 1 bytes @ 0x10
   728   000011                     	ds	1
   729   000012                     ___fladd@aexp:
   730                           	callstack 0
   731   000012                     fputs@c:
   732                           	callstack 0
   733   000012                     ambientCal@v:
   734                           	callstack 0
   735   000012                     whiteCal@v:
   736                           	callstack 0
   737   000012                     setMotorPWM@m:
   738                           	callstack 0
   739                           
   740                           ; 2 bytes @ 0x11
   741   000012                     	ds	1
   742   000013                     ___fladd@bexp:
   743                           	callstack 0
   744   000013                     fputs@i:
   745                           	callstack 0
   746                           
   747                           ; 2 bytes @ 0x12
   748   000013                     	ds	1
   749   000014                     ??_ambientCal:
   750   000014                     ??_whiteCal:
   751   000014                     ??_setMotorPWM:
   752   000014                     ___fladd@grs:
   753                           	callstack 0
   754                           
   755                           ; 1 bytes @ 0x13
   756   000014                     	ds	1
   757   000015                     ?___flsub:
   758                           	callstack 0
   759   000015                     ___aodiv@counter:
   760                           	callstack 0
   761   000015                     ___aomod@counter:
   762                           	callstack 0
   763   000015                     pad@fp:
   764                           	callstack 0
   765   000015                     ___flsub@b:
   766                           	callstack 0
   767                           
   768                           ; 4 bytes @ 0x14
   769   000015                     	ds	1
   770   000016                     setMotorPWM@posDuty:
   771                           	callstack 0
   772   000016                     ___aodiv@sign:
   773                           	callstack 0
   774   000016                     ___aomod@sign:
   775                           	callstack 0
   776   000016                     ambientCal@i:
   777                           	callstack 0
   778   000016                     whiteCal@i:
   779                           	callstack 0
   780                           
   781                           ; 2 bytes @ 0x15
   782   000016                     	ds	1
   783   000017                     ?_abs:
   784                           	callstack 0
   785   000017                     setMotorPWM@negDuty:
   786                           	callstack 0
   787   000017                     pad@buf:
   788                           	callstack 0
   789   000017                     abs@a:
   790                           	callstack 0
   791   000017                     ___aodiv@quotient:
   792                           	callstack 0
   793                           
   794                           ; 8 bytes @ 0x16
   795   000017                     	ds	1
   796   000018                     stop@mL:
   797                           	callstack 0
   798   000018                     forward@mL:
   799                           	callstack 0
   800   000018                     reverse@mL:
   801                           	callstack 0
   802                           
   803                           ; 2 bytes @ 0x17
   804   000018                     	ds	1
   805   000019                     ??_abs:
   806   000019                     pad@p:
   807                           	callstack 0
   808   000019                     ___flsub@a:
   809                           	callstack 0
   810                           
   811                           ; 4 bytes @ 0x18
   812   000019                     	ds	1
   813   00001A                     stop@mR:
   814                           	callstack 0
   815   00001A                     forward@mR:
   816                           	callstack 0
   817   00001A                     reverse@mR:
   818                           	callstack 0
   819                           
   820                           ; 2 bytes @ 0x19
   821   00001A                     	ds	1
   822   00001B                     ??_pad:
   823                           
   824                           ; 1 bytes @ 0x1A
   825   00001B                     	ds	1
   826   00001C                     ??_stop:
   827   00001C                     pad@i:
   828                           	callstack 0
   829                           
   830                           ; 2 bytes @ 0x1B
   831   00001C                     	ds	1
   832   00001D                     ?___flmul:
   833                           	callstack 0
   834   00001D                     ___flge@ff1:
   835                           	callstack 0
   836   00001D                     ___flmul@b:
   837                           	callstack 0
   838                           
   839                           ; 4 bytes @ 0x1C
   840   00001D                     	ds	1
   841   00001E                     turnLeft_90@mL:
   842                           	callstack 0
   843   00001E                     turnRight_90@mL:
   844                           	callstack 0
   845   00001E                     turn_180@mL:
   846                           	callstack 0
   847   00001E                     turnRight_135@mL:
   848                           	callstack 0
   849   00001E                     turnLeft_135@mL:
   850                           	callstack 0
   851   00001E                     pad@w:
   852                           	callstack 0
   853                           
   854                           ; 2 bytes @ 0x1D
   855   00001E                     	ds	2
   856   000020                     turnLeft_90@mR:
   857                           	callstack 0
   858   000020                     turnRight_90@mR:
   859                           	callstack 0
   860   000020                     turn_180@mR:
   861                           	callstack 0
   862   000020                     turnRight_135@mR:
   863                           	callstack 0
   864   000020                     turnLeft_135@mR:
   865                           	callstack 0
   866   000020                     dtoa@fp:
   867                           	callstack 0
   868                           
   869                           ; 2 bytes @ 0x1F
   870   000020                     	ds	1
   871   000021                     ___flge@ff2:
   872                           	callstack 0
   873   000021                     ___flmul@a:
   874                           	callstack 0
   875                           
   876                           ; 4 bytes @ 0x20
   877   000021                     	ds	1
   878   000022                     ??_turnRight_90:
   879   000022                     ??_turnLeft_90:
   880   000022                     ??_turn_180:
   881   000022                     ??_turnRight_135:
   882   000022                     ??_turnLeft_135:
   883   000022                     dtoa@d:
   884                           	callstack 0
   885                           
   886                           ; 8 bytes @ 0x21
   887   000022                     	ds	2
   888   000024                     reverseSquareRight@mL:
   889                           	callstack 0
   890   000024                     reverseSquareLeft@mL:
   891                           	callstack 0
   892                           
   893                           ; 2 bytes @ 0x23
   894   000024                     	ds	1
   895   000025                     ??___flmul:
   896   000025                     ??___flge:
   897                           
   898                           ; 1 bytes @ 0x24
   899   000025                     	ds	1
   900   000026                     reverseSquareRight@mR:
   901                           	callstack 0
   902   000026                     reverseSquareLeft@mR:
   903                           	callstack 0
   904                           
   905                           ; 2 bytes @ 0x25
   906   000026                     	ds	2
   907   000028                     ??_reverseSquareRight:
   908   000028                     ??_reverseSquareLeft:
   909                           
   910                           ; 1 bytes @ 0x27
   911   000028                     	ds	1
   912   000029                     ___flmul@sign:
   913                           	callstack 0
   914                           
   915                           ; 1 bytes @ 0x28
   916   000029                     	ds	1
   917   00002A                     ??_dtoa:
   918   00002A                     ___flmul@grs:
   919                           	callstack 0
   920                           
   921                           ; 4 bytes @ 0x29
   922   00002A                     	ds	4
   923   00002E                     ___flmul@aexp:
   924                           	callstack 0
   925                           
   926                           ; 1 bytes @ 0x2D
   927   00002E                     	ds	1
   928   00002F                     ___flmul@bexp:
   929                           	callstack 0
   930                           
   931                           ; 1 bytes @ 0x2E
   932   00002F                     	ds	1
   933   000030                     ___flmul@prod:
   934                           	callstack 0
   935                           
   936                           ; 4 bytes @ 0x2F
   937   000030                     	ds	2
   938   000032                     _dtoa$2702:
   939                           	callstack 0
   940                           
   941                           ; 2 bytes @ 0x31
   942   000032                     	ds	2
   943   000034                     ___flmul@temp:
   944                           	callstack 0
   945   000034                     dtoa@p:
   946                           	callstack 0
   947                           
   948                           ; 2 bytes @ 0x33
   949   000034                     	ds	2
   950   000036                     ?___fldiv:
   951                           	callstack 0
   952   000036                     dtoa@w:
   953                           	callstack 0
   954   000036                     ___fldiv@b:
   955                           	callstack 0
   956                           
   957                           ; 4 bytes @ 0x35
   958   000036                     	ds	2
   959   000038                     dtoa@n:
   960                           	callstack 0
   961                           
   962                           ; 8 bytes @ 0x37
   963   000038                     	ds	2
   964   00003A                     ___fldiv@a:
   965                           	callstack 0
   966                           
   967                           ; 4 bytes @ 0x39
   968   00003A                     	ds	4
   969   00003E                     ??___fldiv:
   970                           
   971                           ; 1 bytes @ 0x3D
   972   00003E                     	ds	2
   973   000040                     dtoa@s:
   974                           	callstack 0
   975                           
   976                           ; 1 bytes @ 0x3F
   977   000040                     	ds	1
   978   000041                     dtoa@i:
   979                           	callstack 0
   980                           
   981                           ; 2 bytes @ 0x40
   982   000041                     	ds	1
   983   000042                     ___fldiv@rem:
   984                           	callstack 0
   985                           
   986                           ; 4 bytes @ 0x41
   987   000042                     	ds	1
   988   000043                     vfpfcnvrt@fp:
   989                           	callstack 0
   990                           
   991                           ; 2 bytes @ 0x42
   992   000043                     	ds	2
   993   000045                     vfpfcnvrt@fmt:
   994                           	callstack 0
   995                           
   996                           ; 2 bytes @ 0x44
   997   000045                     	ds	1
   998   000046                     ___fldiv@sign:
   999                           	callstack 0
  1000                           
  1001                           ; 1 bytes @ 0x45
  1002   000046                     	ds	1
  1003   000047                     ___fldiv@new_exp:
  1004                           	callstack 0
  1005   000047                     vfpfcnvrt@ap:
  1006                           	callstack 0
  1007                           
  1008                           ; 2 bytes @ 0x46
  1009   000047                     	ds	2
  1010   000049                     ??_vfpfcnvrt:
  1011   000049                     ___fldiv@grs:
  1012                           	callstack 0
  1013                           
  1014                           ; 4 bytes @ 0x48
  1015   000049                     	ds	2
  1016   00004B                     vfpfcnvrt@convarg:
  1017                           	callstack 0
  1018                           
  1019                           ; 8 bytes @ 0x4A
  1020   00004B                     	ds	2
  1021   00004D                     ___fldiv@bexp:
  1022                           	callstack 0
  1023                           
  1024                           ; 1 bytes @ 0x4C
  1025   00004D                     	ds	1
  1026   00004E                     ___fldiv@aexp:
  1027                           	callstack 0
  1028                           
  1029                           ; 1 bytes @ 0x4D
  1030   00004E                     	ds	1
  1031   00004F                     ??_colorDetect:
  1032                           
  1033                           ; 1 bytes @ 0x4E
  1034   00004F                     	ds	4
  1035   000053                     vfpfcnvrt@cp:
  1036                           	callstack 0
  1037                           
  1038                           ; 2 bytes @ 0x52
  1039   000053                     	ds	2
  1040   000055                     vfprintf@cfmt:
  1041                           	callstack 0
  1042                           
  1043                           ; 2 bytes @ 0x54
  1044   000055                     	ds	2
  1045   000057                     
  1046                           ; 1 bytes @ 0x56
  1047 ;;
  1048 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1049 ;;
  1050 ;; *************** function _main *****************
  1051 ;; Defined at:
  1052 ;;		line 25 in file "MazeRobot.X/main.c"
  1053 ;; Parameters:    Size  Location     Type
  1054 ;;		None
  1055 ;; Auto vars:     Size  Location     Type
  1056 ;;  turn_history   64   64[BANK2 ] unsigned int [32]
  1057 ;;  counter_hist   64    0[BANK2 ] unsigned int [32]
  1058 ;;  motorLeft       9  176[BANK2 ] struct DC_motor
  1059 ;;  motorRight      9  167[BANK2 ] struct DC_motor
  1060 ;;  whiteRGBVal     8  159[BANK2 ] struct RGB
  1061 ;;  ambientRGBVa    8  149[BANK2 ] struct RGB
  1062 ;;  RGBVal          8  140[BANK2 ] struct RGB
  1063 ;;  clearRef        4  134[BANK2 ] struct RGB
  1064 ;;  whiteC          4  128[BANK2 ] struct RGB
  1065 ;;  index           2  157[BANK2 ] unsigned int 
  1066 ;;  colorNum        2  138[BANK2 ] unsigned int 
  1067 ;;  forwardCount    2  132[BANK2 ] unsigned int 
  1068 ;;  carGo           1  148[BANK2 ] unsigned char 
  1069 ;; Return value:  Size  Location     Type
  1070 ;;                  1    wreg      void 
  1071 ;; Registers used:
  1072 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1073 ;; Tracked objects:
  1074 ;;		On entry : 0/0
  1075 ;;		On exit  : 0/0
  1076 ;;		Unchanged: 0/0
  1077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1079 ;;      Locals:         0       0       0     185       0       0       0       0       0       0       0       0       
      +0       0       0
  1080 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1081 ;;      Totals:         0       3       0     185       0       0       0       0       0       0       0       0       
      +0       0       0
  1082 ;;Total ram usage:      188 bytes
  1083 ;; Hardware stack levels required when called: 11
  1084 ;; This function calls:
  1085 ;;		_DCmotorsInit
  1086 ;;		___fldiv
  1087 ;;		___flge
  1088 ;;		___xxtofl
  1089 ;;		_ambientCal
  1090 ;;		_colorDetect
  1091 ;;		_color_click_init
  1092 ;;		_forward
  1093 ;;		_getColor
  1094 ;;		_initDCmotorsPWM
  1095 ;;		_initUSART4
  1096 ;;		_return_home_turns
  1097 ;;		_stop
  1098 ;;		_turn_180
  1099 ;;		_whiteCal
  1100 ;; This function is called by:
  1101 ;;		Startup code after reset
  1102 ;; This function uses a non-reentrant model
  1103 ;;
  1104                           
  1105                           	psect	text0
  1106   001EBC                     __ptext0:
  1107                           	callstack 0
  1108   001EBC                     _main:
  1109                           	callstack 20
  1110   001EBC                     
  1111                           ;MazeRobot.X/main.c: 27:     color_click_init();
  1112   001EBC  EC17  F025         	call	_color_click_init	;wreg free
  1113   001EC0                     
  1114                           ;MazeRobot.X/main.c: 28:     initUSART4();
  1115   001EC0  EC49  F025         	call	_initUSART4	;wreg free
  1116   001EC4                     
  1117                           ;MazeRobot.X/main.c: 29:     initDCmotorsPWM(199);
  1118   001EC4  0E00               	movlw	0
  1119   001EC6  6E06               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
  1120   001EC8  0EC7               	movlw	199
  1121   001ECA  6E05               	movwf	initDCmotorsPWM@PWMperiod^0,c
  1122   001ECC  EC8B  F022         	call	_initDCmotorsPWM	;wreg free
  1123   001ED0                     
  1124                           ;MazeRobot.X/main.c: 34:     LATDbits.LATD7=0;
  1125   001ED0  9E7C               	bcf	124,7,c	;volatile
  1126   001ED2                     
  1127                           ;MazeRobot.X/main.c: 35:     TRISDbits.TRISD7=0;
  1128   001ED2  9E84               	bcf	132,7,c	;volatile
  1129   001ED4                     
  1130                           ;MazeRobot.X/main.c: 37:     LATHbits.LATH3=0;
  1131   001ED4  9680               	bcf	128,3,c	;volatile
  1132   001ED6                     
  1133                           ;MazeRobot.X/main.c: 38:     TRISHbits.TRISH3=0;
  1134   001ED6  9688               	bcf	136,3,c	;volatile
  1135   001ED8                     
  1136                           ;MazeRobot.X/main.c: 40:     LATDbits.LATD4 = 0;
  1137   001ED8  987C               	bcf	124,4,c	;volatile
  1138   001EDA                     
  1139                           ;MazeRobot.X/main.c: 41:     TRISDbits.TRISD4 = 0;
  1140   001EDA  9884               	bcf	132,4,c	;volatile
  1141   001EDC                     
  1142                           ;MazeRobot.X/main.c: 43:     LATHbits.LATH0 = 0;
  1143   001EDC  9080               	bcf	128,0,c	;volatile
  1144   001EDE                     
  1145                           ;MazeRobot.X/main.c: 44:     TRISHbits.TRISH0 = 0;
  1146   001EDE  9088               	bcf	136,0,c	;volatile
  1147   001EE0                     
  1148                           ;MazeRobot.X/main.c: 46:     LATFbits.LATF0 = 0;
  1149   001EE0  907E               	bcf	126,0,c	;volatile
  1150   001EE2                     
  1151                           ;MazeRobot.X/main.c: 47:     TRISFbits.TRISF0 = 0;
  1152   001EE2  9086               	bcf	134,0,c	;volatile
  1153   001EE4                     
  1154                           ;MazeRobot.X/main.c: 49:     LATHbits.LATH1 = 0;
  1155   001EE4  9280               	bcf	128,1,c	;volatile
  1156   001EE6                     
  1157                           ;MazeRobot.X/main.c: 50:     TRISHbits.TRISH1 = 0;
  1158   001EE6  9288               	bcf	136,1,c	;volatile
  1159   001EE8                     
  1160                           ;MazeRobot.X/main.c: 52:     LATDbits.LATD3 = 0;
  1161   001EE8  967C               	bcf	124,3,c	;volatile
  1162   001EEA                     
  1163                           ;MazeRobot.X/main.c: 53:     TRISDbits.TRISD3 = 0;
  1164   001EEA  9684               	bcf	132,3,c	;volatile
  1165   001EEC                     
  1166                           ;MazeRobot.X/main.c: 55:     LATDbits.LATD4 = 1;
  1167   001EEC  887C               	bsf	124,4,c	;volatile
  1168   001EEE                     
  1169                           ;MazeRobot.X/main.c: 56:     LATFbits.LATF0 = 1;
  1170   001EEE  807E               	bsf	126,0,c	;volatile
  1171   001EF0                     
  1172                           ;MazeRobot.X/main.c: 57:     LATHbits.LATH0 = 1;
  1173   001EF0  8080               	bsf	128,0,c	;volatile
  1174   001EF2                     
  1175                           ;MazeRobot.X/main.c: 58:     LATFbits.LATF0 = 1;
  1176   001EF2  807E               	bsf	126,0,c	;volatile
  1177   001EF4                     
  1178                           ;MazeRobot.X/main.c: 59:     LATDbits.LATD3 = 1;
  1179   001EF4  867C               	bsf	124,3,c	;volatile
  1180   001EF6                     
  1181                           ;MazeRobot.X/main.c: 61:     LATGbits.LATG0=1;
  1182   001EF6  807F               	bsf	127,0,c	;volatile
  1183   001EF8                     
  1184                           ;MazeRobot.X/main.c: 62:     LATEbits.LATE7=1;
  1185   001EF8  8E7D               	bsf	125,7,c	;volatile
  1186   001EFA                     
  1187                           ;MazeRobot.X/main.c: 63:     LATAbits.LATA3=1;
  1188   001EFA  8679               	bsf	121,3,c	;volatile
  1189   001EFC                     
  1190                           ;MazeRobot.X/main.c: 65:     TRISGbits.TRISG0=0;
  1191   001EFC  9087               	bcf	135,0,c	;volatile
  1192   001EFE                     
  1193                           ;MazeRobot.X/main.c: 66:     TRISEbits.TRISE7=0;
  1194   001EFE  9E85               	bcf	133,7,c	;volatile
  1195   001F00                     
  1196                           ;MazeRobot.X/main.c: 67:     TRISAbits.TRISA3=0;
  1197   001F00  9681               	bcf	129,3,c	;volatile
  1198   001F02                     
  1199                           ;MazeRobot.X/main.c: 70:     TRISFbits.TRISF2=1;
  1200   001F02  8486               	bsf	134,2,c	;volatile
  1201   001F04                     
  1202                           ;MazeRobot.X/main.c: 71:     ANSELFbits.ANSELF2=0;
  1203   001F04  010E               	movlb	14	; () banked
  1204   001F06  95B4               	bcf	180,2,b	;volatile
  1205   001F08                     
  1206                           ; BSR set to: 14
  1207                           ;MazeRobot.X/main.c: 73:     TRISFbits.TRISF3=1;
  1208   001F08  8686               	bsf	134,3,c	;volatile
  1209   001F0A                     
  1210                           ; BSR set to: 14
  1211                           ;MazeRobot.X/main.c: 74:     ANSELFbits.ANSELF3=0;
  1212   001F0A  97B4               	bcf	180,3,b	;volatile
  1213   001F0C                     
  1214                           ; BSR set to: 14
  1215                           ;MazeRobot.X/main.c: 81:     unsigned char carGo = 0;
  1216   001F0C  0E00               	movlw	0
  1217   001F0E  0102               	movlb	2	; () banked
  1218   001F10  6F94               	movwf	main@carGo& (0+255),b
  1219   001F12                     
  1220                           ; BSR set to: 2
  1221                           ;MazeRobot.X/main.c: 83:     DC_motor motorLeft,motorRight;;MazeRobot.X/main.c: 84:     
      +                          DCmotorsInit(&motorLeft,&motorRight);
  1222   001F12  0EB0               	movlw	low main@motorLeft
  1223   001F14  6E05               	movwf	DCmotorsInit@mL^0,c
  1224   001F16  0E02               	movlw	high main@motorLeft
  1225   001F18  6E06               	movwf	(DCmotorsInit@mL+1)^0,c
  1226   001F1A  0EA7               	movlw	low main@motorRight
  1227   001F1C  6E07               	movwf	DCmotorsInit@mR^0,c
  1228   001F1E  0E02               	movlw	high main@motorRight
  1229   001F20  6E08               	movwf	(DCmotorsInit@mR+1)^0,c
  1230   001F22  ECD0  F020         	call	_DCmotorsInit	;wreg free
  1231   001F26                     
  1232                           ;MazeRobot.X/main.c: 86:     unsigned int turn_history[32];;MazeRobot.X/main.c: 87:     
      +                          unsigned int counter_history[32];;MazeRobot.X/main.c: 88:     unsigned int index = 0;
  1233   001F26  0E00               	movlw	0
  1234   001F28  0102               	movlb	2	; () banked
  1235   001F2A  6F9E               	movwf	(main@index+1)& (0+255),b
  1236   001F2C  0E00               	movlw	0
  1237   001F2E  6F9D               	movwf	main@index& (0+255),b
  1238   001F30                     
  1239                           ; BSR set to: 2
  1240                           ;MazeRobot.X/main.c: 89:     unsigned int forwardCount = 0;
  1241   001F30  0E00               	movlw	0
  1242   001F32  6F85               	movwf	(main@forwardCount+1)& (0+255),b
  1243   001F34  0E00               	movlw	0
  1244   001F36  6F84               	movwf	main@forwardCount& (0+255),b
  1245   001F38                     
  1246                           ; BSR set to: 2
  1247                           ;MazeRobot.X/main.c: 92:     ambientCal(&ambientRGBVal);
  1248   001F38  0E95               	movlw	low main@ambientRGBVal
  1249   001F3A  6E12               	movwf	ambientCal@v^0,c
  1250   001F3C  0E02               	movlw	high main@ambientRGBVal
  1251   001F3E  6E13               	movwf	(ambientCal@v+1)^0,c
  1252   001F40  EC88  F01F         	call	_ambientCal	;wreg free
  1253   001F44                     l5376:
  1254                           
  1255                           ;MazeRobot.X/main.c: 95:         getColor(&RGBVal);
  1256   001F44  0E8C               	movlw	low main@RGBVal
  1257   001F46  6E10               	movwf	getColor@v^0,c
  1258   001F48  0E02               	movlw	high main@RGBVal
  1259   001F4A  6E11               	movwf	(getColor@v+1)^0,c
  1260   001F4C  EC4A  F023         	call	_getColor	;wreg free
  1261   001F50                     
  1262                           ;MazeRobot.X/main.c: 97:         if(!PORTFbits.RF2 && !PORTFbits.RF3){
  1263   001F50  B48E               	btfsc	142,2,c	;volatile
  1264   001F52  EFAD  F00F         	goto	u5861
  1265   001F56  EFAF  F00F         	goto	u5860
  1266   001F5A                     u5861:
  1267   001F5A  EFD2  F00F         	goto	l5392
  1268   001F5E                     u5860:
  1269   001F5E  B68E               	btfsc	142,3,c	;volatile
  1270   001F60  EFB4  F00F         	goto	u5871
  1271   001F64  EFB6  F00F         	goto	u5870
  1272   001F68                     u5871:
  1273   001F68  EFD2  F00F         	goto	l5392
  1274   001F6C                     u5870:
  1275   001F6C                     
  1276                           ;MazeRobot.X/main.c: 98:             LATDbits.LATD7 = 1 , LATHbits.LATH3 = 1;
  1277   001F6C  8E7C               	bsf	124,7,c	;volatile
  1278   001F6E  8680               	bsf	128,3,c	;volatile
  1279   001F70                     
  1280                           ;MazeRobot.X/main.c: 99:             _delay((unsigned long)((500)*(64000000/4000.0)));
  1281   001F70  0E29               	movlw	41
  1282   001F72  0100               	movlb	0	; () banked
  1283   001F74  6FD2               	movwf	(??_main+1)& (0+255),b
  1284   001F76  0E96               	movlw	150
  1285   001F78  6FD1               	movwf	??_main& (0+255),b
  1286   001F7A  0E7F               	movlw	127
  1287   001F7C                     u6077:
  1288   001F7C  2EE8               	decfsz	wreg,f,c
  1289   001F7E  D7FE               	bra	u6077
  1290   001F80  2FD1               	decfsz	??_main& (0+255),f,b
  1291   001F82  D7FC               	bra	u6077
  1292   001F84  2FD2               	decfsz	(??_main+1)& (0+255),f,b
  1293   001F86  D7FA               	bra	u6077
  1294   001F88                     
  1295                           ;MazeRobot.X/main.c: 100:             LATDbits.LATD7 = 0 , LATHbits.LATH3 = 0;
  1296   001F88  9E7C               	bcf	124,7,c	;volatile
  1297   001F8A  9680               	bcf	128,3,c	;volatile
  1298   001F8C                     
  1299                           ;MazeRobot.X/main.c: 101:             carGo = !carGo;
  1300   001F8C  0102               	movlb	2	; () banked
  1301   001F8E  5194               	movf	main@carGo& (0+255),w,b
  1302   001F90  B4D8               	btfsc	status,2,c
  1303   001F92  EFCD  F00F         	goto	u5881
  1304   001F96  EFD0  F00F         	goto	u5880
  1305   001F9A                     u5881:
  1306   001F9A  0E01               	movlw	1
  1307   001F9C  EFD1  F00F         	goto	u5890
  1308   001FA0                     u5880:
  1309   001FA0  0E00               	movlw	0
  1310   001FA2                     u5890:
  1311   001FA2  6F94               	movwf	main@carGo& (0+255),b
  1312   001FA4                     l5392:
  1313                           
  1314                           ;MazeRobot.X/main.c: 105:         if (!PORTFbits.RF2 & PORTFbits.RF3){
  1315   001FA4  A48E               	btfss	142,2,c	;volatile
  1316   001FA6  EFD7  F00F         	goto	u5901
  1317   001FAA  EFDA  F00F         	goto	u5900
  1318   001FAE                     u5901:
  1319   001FAE  0E01               	movlw	1
  1320   001FB0  EFDB  F00F         	goto	u5910
  1321   001FB4                     u5900:
  1322   001FB4  0E00               	movlw	0
  1323   001FB6                     u5910:
  1324   001FB6  0100               	movlb	0	; () banked
  1325   001FB8  6FD1               	movwf	??_main& (0+255),b
  1326   001FBA  6BD2               	clrf	(??_main+1)& (0+255),b
  1327   001FBC  B68E               	btfsc	142,3,c	;volatile
  1328   001FBE  EFE3  F00F         	goto	u5921
  1329   001FC2  EFE7  F00F         	goto	u5920
  1330   001FC6                     u5921:
  1331   001FC6  6BD3               	clrf	(??_main+2)& (0+255),b
  1332   001FC8  2BD3               	incf	(??_main+2)& (0+255),f,b
  1333   001FCA  EFE9  F00F         	goto	u5928
  1334   001FCE                     u5920:
  1335   001FCE  0100               	movlb	0	; () banked
  1336   001FD0  6BD3               	clrf	(??_main+2)& (0+255),b
  1337   001FD2                     u5928:
  1338   001FD2  51D3               	movf	(??_main+2)& (0+255),w,b
  1339   001FD4  17D1               	andwf	??_main& (0+255),f,b
  1340   001FD6  0E00               	movlw	0
  1341   001FD8  17D2               	andwf	(??_main+1)& (0+255),f,b
  1342   001FDA  51D1               	movf	??_main& (0+255),w,b
  1343   001FDC  11D2               	iorwf	(??_main+1)& (0+255),w,b
  1344   001FDE  B4D8               	btfsc	status,2,c
  1345   001FE0  EFF4  F00F         	goto	u5931
  1346   001FE4  EFF6  F00F         	goto	u5930
  1347   001FE8                     u5931:
  1348   001FE8  EFFC  F00F         	goto	l5396
  1349   001FEC                     u5930:
  1350   001FEC                     
  1351                           ; BSR set to: 0
  1352                           ;MazeRobot.X/main.c: 106:             ambientCal (&ambientRGBVal);
  1353   001FEC  0E95               	movlw	low main@ambientRGBVal
  1354   001FEE  6E12               	movwf	ambientCal@v^0,c
  1355   001FF0  0E02               	movlw	high main@ambientRGBVal
  1356   001FF2  6E13               	movwf	(ambientCal@v+1)^0,c
  1357   001FF4  EC88  F01F         	call	_ambientCal	;wreg free
  1358   001FF8                     l5396:
  1359                           
  1360                           ;MazeRobot.X/main.c: 109:         if (!PORTFbits.RF3 & PORTFbits.RF2){
  1361   001FF8  A68E               	btfss	142,3,c	;volatile
  1362   001FFA  EF01  F010         	goto	u5941
  1363   001FFE  EF04  F010         	goto	u5940
  1364   002002                     u5941:
  1365   002002  0E01               	movlw	1
  1366   002004  EF05  F010         	goto	u5950
  1367   002008                     u5940:
  1368   002008  0E00               	movlw	0
  1369   00200A                     u5950:
  1370   00200A  0100               	movlb	0	; () banked
  1371   00200C  6FD1               	movwf	??_main& (0+255),b
  1372   00200E  6BD2               	clrf	(??_main+1)& (0+255),b
  1373   002010  B48E               	btfsc	142,2,c	;volatile
  1374   002012  EF0D  F010         	goto	u5961
  1375   002016  EF11  F010         	goto	u5960
  1376   00201A                     u5961:
  1377   00201A  6BD3               	clrf	(??_main+2)& (0+255),b
  1378   00201C  2BD3               	incf	(??_main+2)& (0+255),f,b
  1379   00201E  EF13  F010         	goto	u5968
  1380   002022                     u5960:
  1381   002022  0100               	movlb	0	; () banked
  1382   002024  6BD3               	clrf	(??_main+2)& (0+255),b
  1383   002026                     u5968:
  1384   002026  51D3               	movf	(??_main+2)& (0+255),w,b
  1385   002028  17D1               	andwf	??_main& (0+255),f,b
  1386   00202A  0E00               	movlw	0
  1387   00202C  17D2               	andwf	(??_main+1)& (0+255),f,b
  1388   00202E  51D1               	movf	??_main& (0+255),w,b
  1389   002030  11D2               	iorwf	(??_main+1)& (0+255),w,b
  1390   002032  B4D8               	btfsc	status,2,c
  1391   002034  EF1E  F010         	goto	u5971
  1392   002038  EF20  F010         	goto	u5970
  1393   00203C                     u5971:
  1394   00203C  EF26  F010         	goto	l5400
  1395   002040                     u5970:
  1396   002040                     
  1397                           ; BSR set to: 0
  1398                           ;MazeRobot.X/main.c: 110:             whiteCal (&whiteRGBVal);
  1399   002040  0E9F               	movlw	low main@whiteRGBVal
  1400   002042  6E12               	movwf	whiteCal@v^0,c
  1401   002044  0E02               	movlw	high main@whiteRGBVal
  1402   002046  6E13               	movwf	(whiteCal@v+1)^0,c
  1403   002048  EC16  F01F         	call	_whiteCal	;wreg free
  1404   00204C                     l5400:
  1405                           
  1406                           ;MazeRobot.X/main.c: 113:         LATHbits.LATH3=!LATHbits.LATH3;
  1407   00204C  A680               	btfss	128,3,c	;volatile
  1408   00204E  EF2B  F010         	goto	u5981
  1409   002052  EF30  F010         	goto	u5980
  1410   002056                     u5981:
  1411   002056  0100               	movlb	0	; () banked
  1412   002058  6BD1               	clrf	??_main& (0+255),b
  1413   00205A  2BD1               	incf	??_main& (0+255),f,b
  1414   00205C  EF32  F010         	goto	u5998
  1415   002060                     u5980:
  1416   002060  0100               	movlb	0	; () banked
  1417   002062  6BD1               	clrf	??_main& (0+255),b
  1418   002064                     u5998:
  1419   002064  47D1               	rlncf	??_main& (0+255),f,b
  1420   002066  47D1               	rlncf	??_main& (0+255),f,b
  1421   002068  47D1               	rlncf	??_main& (0+255),f,b
  1422   00206A  5080               	movf	128,w,c	;volatile
  1423   00206C  19D1               	xorwf	??_main& (0+255),w,b
  1424   00206E  0BF7               	andlw	-9
  1425   002070  19D1               	xorwf	??_main& (0+255),w,b
  1426   002072  6E80               	movwf	128,c	;volatile
  1427   002074                     
  1428                           ; BSR set to: 0
  1429                           ;MazeRobot.X/main.c: 115:         whiteC = whiteRGBVal.C;
  1430   002074  C2A5  F005         	movff	main@whiteRGBVal+6,___xxtofl@val
  1431   002078  C2A6  F006         	movff	main@whiteRGBVal+7,___xxtofl@val+1
  1432   00207C  6A07               	clrf	(___xxtofl@val+2)^0,c
  1433   00207E  6A08               	clrf	(___xxtofl@val+3)^0,c
  1434   002080  0E00               	movlw	0
  1435   002082  ECC5  F017         	call	___xxtofl
  1436   002086  C005  F280         	movff	?___xxtofl,main@whiteC
  1437   00208A  C006  F281         	movff	?___xxtofl+1,main@whiteC+1
  1438   00208E  C007  F282         	movff	?___xxtofl+2,main@whiteC+2
  1439   002092  C008  F283         	movff	?___xxtofl+3,main@whiteC+3
  1440   002096                     
  1441                           ;MazeRobot.X/main.c: 116:         clearRef = RGBVal.C/whiteC;
  1442   002096  C292  F005         	movff	main@RGBVal+6,___xxtofl@val
  1443   00209A  C293  F006         	movff	main@RGBVal+7,___xxtofl@val+1
  1444   00209E  6A07               	clrf	(___xxtofl@val+2)^0,c
  1445   0020A0  6A08               	clrf	(___xxtofl@val+3)^0,c
  1446   0020A2  0E00               	movlw	0
  1447   0020A4  ECC5  F017         	call	___xxtofl
  1448   0020A8  C005  F036         	movff	?___xxtofl,___fldiv@b
  1449   0020AC  C006  F037         	movff	?___xxtofl+1,___fldiv@b+1
  1450   0020B0  C007  F038         	movff	?___xxtofl+2,___fldiv@b+2
  1451   0020B4  C008  F039         	movff	?___xxtofl+3,___fldiv@b+3
  1452   0020B8  C280  F03A         	movff	main@whiteC,___fldiv@a
  1453   0020BC  C281  F03B         	movff	main@whiteC+1,___fldiv@a+1
  1454   0020C0  C282  F03C         	movff	main@whiteC+2,___fldiv@a+2
  1455   0020C4  C283  F03D         	movff	main@whiteC+3,___fldiv@a+3
  1456   0020C8  EC8C  F013         	call	___fldiv	;wreg free
  1457   0020CC  C036  F286         	movff	?___fldiv,main@clearRef
  1458   0020D0  C037  F287         	movff	?___fldiv+1,main@clearRef+1
  1459   0020D4  C038  F288         	movff	?___fldiv+2,main@clearRef+2
  1460   0020D8  C039  F289         	movff	?___fldiv+3,main@clearRef+3
  1461   0020DC                     
  1462                           ;MazeRobot.X/main.c: 118:         if ((clearRef > 0.12) && carGo){
  1463   0020DC  0E8F               	movlw	143
  1464   0020DE  6E1D               	movwf	___flge@ff1^0,c
  1465   0020E0  0EC2               	movlw	194
  1466   0020E2  6E1E               	movwf	(___flge@ff1+1)^0,c
  1467   0020E4  0EF5               	movlw	245
  1468   0020E6  6E1F               	movwf	(___flge@ff1+2)^0,c
  1469   0020E8  0E3D               	movlw	61
  1470   0020EA  6E20               	movwf	(___flge@ff1+3)^0,c
  1471   0020EC  C286  F021         	movff	main@clearRef,___flge@ff2
  1472   0020F0  C287  F022         	movff	main@clearRef+1,___flge@ff2+1
  1473   0020F4  C288  F023         	movff	main@clearRef+2,___flge@ff2+2
  1474   0020F8  C289  F024         	movff	main@clearRef+3,___flge@ff2+3
  1475   0020FC  EC94  F01E         	call	___flge	;wreg free
  1476   002100  B0D8               	btfsc	status,0,c
  1477   002102  EF85  F010         	goto	u6001
  1478   002106  EF87  F010         	goto	u6000
  1479   00210A                     u6001:
  1480   00210A  EF33  F011         	goto	l5440
  1481   00210E                     u6000:
  1482   00210E  0102               	movlb	2	; () banked
  1483   002110  5194               	movf	main@carGo& (0+255),w,b
  1484   002112  B4D8               	btfsc	status,2,c
  1485   002114  EF8E  F010         	goto	u6011
  1486   002118  EF90  F010         	goto	u6010
  1487   00211C                     u6011:
  1488   00211C  EF33  F011         	goto	l5440
  1489   002120                     u6010:
  1490   002120                     
  1491                           ; BSR set to: 2
  1492                           ;MazeRobot.X/main.c: 120:             colorNum = colorDetect(clearRef,&ambientRGBVal,&wh
      +                          iteRGBVal,&motorLeft,&motorRight);
  1493   002120  C286  F09D         	movff	main@clearRef,colorDetect@clearRef
  1494   002124  C287  F09E         	movff	main@clearRef+1,colorDetect@clearRef+1
  1495   002128  C288  F09F         	movff	main@clearRef+2,colorDetect@clearRef+2
  1496   00212C  C289  F0A0         	movff	main@clearRef+3,colorDetect@clearRef+3
  1497   002130  0E95               	movlw	low main@ambientRGBVal
  1498   002132  0100               	movlb	0	; () banked
  1499   002134  6FA1               	movwf	colorDetect@ambientRGBVal& (0+255),b
  1500   002136  0E02               	movlw	high main@ambientRGBVal
  1501   002138  6FA2               	movwf	(colorDetect@ambientRGBVal+1)& (0+255),b
  1502   00213A  0E9F               	movlw	low main@whiteRGBVal
  1503   00213C  6FA3               	movwf	colorDetect@whiteRGBVal& (0+255),b
  1504   00213E  0E02               	movlw	high main@whiteRGBVal
  1505   002140  6FA4               	movwf	(colorDetect@whiteRGBVal+1)& (0+255),b
  1506   002142  0EB0               	movlw	low main@motorLeft
  1507   002144  6FA5               	movwf	colorDetect@mL& (0+255),b
  1508   002146  0E02               	movlw	high main@motorLeft
  1509   002148  6FA6               	movwf	(colorDetect@mL+1)& (0+255),b
  1510   00214A  0EA7               	movlw	low main@motorRight
  1511   00214C  6FA7               	movwf	colorDetect@mR& (0+255),b
  1512   00214E  0E02               	movlw	high main@motorRight
  1513   002150  6FA8               	movwf	(colorDetect@mR+1)& (0+255),b
  1514   002152  EC14  F007         	call	_colorDetect	;wreg free
  1515   002156  C09D  F28A         	movff	?_colorDetect,main@colorNum
  1516   00215A  C09E  F28B         	movff	?_colorDetect+1,main@colorNum+1
  1517   00215E                     
  1518                           ;MazeRobot.X/main.c: 122:             if (colorNum < 9){
  1519   00215E  0102               	movlb	2	; () banked
  1520   002160  518B               	movf	(main@colorNum+1)& (0+255),w,b
  1521   002162  E107               	bnz	u6021
  1522   002164  0E09               	movlw	9
  1523   002166  5D8A               	subwf	main@colorNum& (0+255),w,b
  1524   002168  B0D8               	btfsc	status,0,c
  1525   00216A  EFB9  F010         	goto	u6021
  1526   00216E  EFBB  F010         	goto	u6020
  1527   002172                     u6021:
  1528   002172  EF33  F011         	goto	l5440
  1529   002176                     u6020:
  1530   002176                     
  1531                           ; BSR set to: 2
  1532                           ;MazeRobot.X/main.c: 124:             turn_history[index] = 0;
  1533   002176  90D8               	bcf	status,0,c
  1534   002178  359D               	rlcf	main@index& (0+255),w,b
  1535   00217A  6ED9               	movwf	fsr2l,c
  1536   00217C  359E               	rlcf	(main@index+1)& (0+255),w,b
  1537   00217E  6EDA               	movwf	fsr2h,c
  1538   002180  0E40               	movlw	low main@turn_history
  1539   002182  26D9               	addwf	fsr2l,f,c
  1540   002184  0E02               	movlw	high main@turn_history
  1541   002186  22DA               	addwfc	fsr2h,f,c
  1542   002188  0E00               	movlw	0
  1543   00218A  6EDE               	movwf	postinc2,c
  1544   00218C  0E00               	movlw	0
  1545   00218E  6EDD               	movwf	postdec2,c
  1546                           
  1547                           ;MazeRobot.X/main.c: 125:             counter_history[index] = forwardCount;
  1548   002190  90D8               	bcf	status,0,c
  1549   002192  359D               	rlcf	main@index& (0+255),w,b
  1550   002194  6ED9               	movwf	fsr2l,c
  1551   002196  359E               	rlcf	(main@index+1)& (0+255),w,b
  1552   002198  6EDA               	movwf	fsr2h,c
  1553   00219A  0E00               	movlw	low main@counter_history
  1554   00219C  26D9               	addwf	fsr2l,f,c
  1555   00219E  0E02               	movlw	high main@counter_history
  1556   0021A0  22DA               	addwfc	fsr2h,f,c
  1557   0021A2  C284  FFDE         	movff	main@forwardCount,postinc2
  1558   0021A6  C285  FFDD         	movff	main@forwardCount+1,postdec2
  1559   0021AA                     
  1560                           ; BSR set to: 2
  1561                           ;MazeRobot.X/main.c: 127:             index +=1;
  1562   0021AA  4B9D               	infsnz	main@index& (0+255),f,b
  1563   0021AC  2B9E               	incf	(main@index+1)& (0+255),f,b
  1564   0021AE                     
  1565                           ; BSR set to: 2
  1566                           ;MazeRobot.X/main.c: 128:             forwardCount = 0;
  1567   0021AE  0E00               	movlw	0
  1568   0021B0  6F85               	movwf	(main@forwardCount+1)& (0+255),b
  1569   0021B2  0E00               	movlw	0
  1570   0021B4  6F84               	movwf	main@forwardCount& (0+255),b
  1571   0021B6                     
  1572                           ; BSR set to: 2
  1573                           ;MazeRobot.X/main.c: 130:             if (colorNum == 8){
  1574   0021B6  0E08               	movlw	8
  1575   0021B8  198A               	xorwf	main@colorNum& (0+255),w,b
  1576   0021BA  118B               	iorwf	(main@colorNum+1)& (0+255),w,b
  1577   0021BC  A4D8               	btfss	status,2,c
  1578   0021BE  EFE3  F010         	goto	u6031
  1579   0021C2  EFE5  F010         	goto	u6030
  1580   0021C6                     u6031:
  1581   0021C6  EF0B  F011         	goto	l5432
  1582   0021CA                     u6030:
  1583   0021CA                     
  1584                           ; BSR set to: 2
  1585                           ;MazeRobot.X/main.c: 131:                 turn_180(&motorLeft,&motorRight);
  1586   0021CA  0EB0               	movlw	low main@motorLeft
  1587   0021CC  6E1E               	movwf	turn_180@mL^0,c
  1588   0021CE  0E02               	movlw	high main@motorLeft
  1589   0021D0  6E1F               	movwf	(turn_180@mL+1)^0,c
  1590   0021D2  0EA7               	movlw	low main@motorRight
  1591   0021D4  6E20               	movwf	turn_180@mR^0,c
  1592   0021D6  0E02               	movlw	high main@motorRight
  1593   0021D8  6E21               	movwf	(turn_180@mR+1)^0,c
  1594   0021DA  EC7A  F01B         	call	_turn_180	;wreg free
  1595   0021DE                     
  1596                           ;MazeRobot.X/main.c: 132:                 LATDbits.LATD7 = 1 , LATHbits.LATH3 = 1;
  1597   0021DE  8E7C               	bsf	124,7,c	;volatile
  1598   0021E0  8680               	bsf	128,3,c	;volatile
  1599   0021E2                     
  1600                           ;MazeRobot.X/main.c: 133:                 return_home_turns(&turn_history,&counter_histo
      +                          ry, (index), &motorLeft, &motorRight);
  1601   0021E2  0E40               	movlw	low main@turn_history
  1602   0021E4  0100               	movlb	0	; () banked
  1603   0021E6  6FBC               	movwf	return_home_turns@turn_history& (0+255),b
  1604   0021E8  0E02               	movlw	high main@turn_history
  1605   0021EA  6FBD               	movwf	(return_home_turns@turn_history+1)& (0+255),b
  1606   0021EC  0E00               	movlw	low main@counter_history
  1607   0021EE  6FBE               	movwf	return_home_turns@counter_history& (0+255),b
  1608   0021F0  0E02               	movlw	high main@counter_history
  1609   0021F2  6FBF               	movwf	(return_home_turns@counter_history+1)& (0+255),b
  1610   0021F4  C29D  F0C0         	movff	main@index,return_home_turns@index
  1611   0021F8  C29E  F0C1         	movff	main@index+1,return_home_turns@index+1
  1612   0021FC  0EB0               	movlw	low main@motorLeft
  1613   0021FE  6FC2               	movwf	return_home_turns@mL& (0+255),b
  1614   002200  0E02               	movlw	high main@motorLeft
  1615   002202  6FC3               	movwf	(return_home_turns@mL+1)& (0+255),b
  1616   002204  0EA7               	movlw	low main@motorRight
  1617   002206  6FC4               	movwf	return_home_turns@mR& (0+255),b
  1618   002208  0E02               	movlw	high main@motorRight
  1619   00220A  6FC5               	movwf	(return_home_turns@mR+1)& (0+255),b
  1620   00220C  EC97  F016         	call	_return_home_turns	;wreg free
  1621   002210                     
  1622                           ;MazeRobot.X/main.c: 134:                 carGo = 0;
  1623   002210  0E00               	movlw	0
  1624   002212  0102               	movlb	2	; () banked
  1625   002214  6F94               	movwf	main@carGo& (0+255),b
  1626   002216                     l5432:
  1627                           
  1628                           ; BSR set to: 2
  1629                           ;MazeRobot.X/main.c: 136:             turn_history[index] = colorNum;
  1630   002216  90D8               	bcf	status,0,c
  1631   002218  359D               	rlcf	main@index& (0+255),w,b
  1632   00221A  6ED9               	movwf	fsr2l,c
  1633   00221C  359E               	rlcf	(main@index+1)& (0+255),w,b
  1634   00221E  6EDA               	movwf	fsr2h,c
  1635   002220  0E40               	movlw	low main@turn_history
  1636   002222  26D9               	addwf	fsr2l,f,c
  1637   002224  0E02               	movlw	high main@turn_history
  1638   002226  22DA               	addwfc	fsr2h,f,c
  1639   002228  C28A  FFDE         	movff	main@colorNum,postinc2
  1640   00222C  C28B  FFDD         	movff	main@colorNum+1,postdec2
  1641   002230                     
  1642                           ; BSR set to: 2
  1643                           ;MazeRobot.X/main.c: 137:             counter_history[index] = 1;
  1644   002230  90D8               	bcf	status,0,c
  1645   002232  359D               	rlcf	main@index& (0+255),w,b
  1646   002234  6ED9               	movwf	fsr2l,c
  1647   002236  359E               	rlcf	(main@index+1)& (0+255),w,b
  1648   002238  6EDA               	movwf	fsr2h,c
  1649   00223A  0E00               	movlw	low main@counter_history
  1650   00223C  26D9               	addwf	fsr2l,f,c
  1651   00223E  0E02               	movlw	high main@counter_history
  1652   002240  22DA               	addwfc	fsr2h,f,c
  1653   002242  0E01               	movlw	1
  1654   002244  6EDE               	movwf	postinc2,c
  1655   002246  0E00               	movlw	0
  1656   002248  6EDD               	movwf	postdec2,c
  1657   00224A                     
  1658                           ; BSR set to: 2
  1659                           ;MazeRobot.X/main.c: 139:             index += 1;
  1660   00224A  4B9D               	infsnz	main@index& (0+255),f,b
  1661   00224C  2B9E               	incf	(main@index+1)& (0+255),f,b
  1662   00224E                     
  1663                           ; BSR set to: 2
  1664                           ;MazeRobot.X/main.c: 140:             _delay((unsigned long)((500)*(64000000/4000.0)));
  1665   00224E  0E29               	movlw	41
  1666   002250  0100               	movlb	0	; () banked
  1667   002252  6FD2               	movwf	(??_main+1)& (0+255),b
  1668   002254  0E96               	movlw	150
  1669   002256  6FD1               	movwf	??_main& (0+255),b
  1670   002258  0E7F               	movlw	127
  1671   00225A                     u6087:
  1672   00225A  2EE8               	decfsz	wreg,f,c
  1673   00225C  D7FE               	bra	u6087
  1674   00225E  2FD1               	decfsz	??_main& (0+255),f,b
  1675   002260  D7FC               	bra	u6087
  1676   002262  2FD2               	decfsz	(??_main+1)& (0+255),f,b
  1677   002264  D7FA               	bra	u6087
  1678   002266                     l5440:
  1679                           
  1680                           ;MazeRobot.X/main.c: 145:         if (carGo){
  1681   002266  0102               	movlb	2	; () banked
  1682   002268  5194               	movf	main@carGo& (0+255),w,b
  1683   00226A  B4D8               	btfsc	status,2,c
  1684   00226C  EF3A  F011         	goto	u6041
  1685   002270  EF3C  F011         	goto	u6040
  1686   002274                     u6041:
  1687   002274  EF5D  F011         	goto	l5448
  1688   002278                     u6040:
  1689   002278                     
  1690                           ; BSR set to: 2
  1691                           ;MazeRobot.X/main.c: 146:             forward(&motorLeft,&motorRight);
  1692   002278  0EB0               	movlw	low main@motorLeft
  1693   00227A  6E18               	movwf	forward@mL^0,c
  1694   00227C  0E02               	movlw	high main@motorLeft
  1695   00227E  6E19               	movwf	(forward@mL+1)^0,c
  1696   002280  0EA7               	movlw	low main@motorRight
  1697   002282  6E1A               	movwf	forward@mR^0,c
  1698   002284  0E02               	movlw	high main@motorRight
  1699   002286  6E1B               	movwf	(forward@mR+1)^0,c
  1700   002288  ECFA  F01F         	call	_forward	;wreg free
  1701   00228C                     
  1702                           ;MazeRobot.X/main.c: 147:             LATDbits.LATD4 = !LATDbits.LATD4;
  1703   00228C  A87C               	btfss	124,4,c	;volatile
  1704   00228E  EF4B  F011         	goto	u6051
  1705   002292  EF50  F011         	goto	u6050
  1706   002296                     u6051:
  1707   002296  0100               	movlb	0	; () banked
  1708   002298  6BD1               	clrf	??_main& (0+255),b
  1709   00229A  2BD1               	incf	??_main& (0+255),f,b
  1710   00229C  EF52  F011         	goto	u6068
  1711   0022A0                     u6050:
  1712   0022A0  0100               	movlb	0	; () banked
  1713   0022A2  6BD1               	clrf	??_main& (0+255),b
  1714   0022A4                     u6068:
  1715   0022A4  3BD1               	swapf	??_main& (0+255),f,b
  1716   0022A6  507C               	movf	124,w,c	;volatile
  1717   0022A8  19D1               	xorwf	??_main& (0+255),w,b
  1718   0022AA  0BEF               	andlw	-17
  1719   0022AC  19D1               	xorwf	??_main& (0+255),w,b
  1720   0022AE  6E7C               	movwf	124,c	;volatile
  1721   0022B0                     
  1722                           ; BSR set to: 0
  1723                           ;MazeRobot.X/main.c: 148:             forwardCount +=1;
  1724   0022B0  0102               	movlb	2	; () banked
  1725   0022B2  4B84               	infsnz	main@forwardCount& (0+255),f,b
  1726   0022B4  2B85               	incf	(main@forwardCount+1)& (0+255),f,b
  1727                           
  1728                           ;MazeRobot.X/main.c: 150:         }
  1729   0022B6  EF67  F011         	goto	l5450
  1730   0022BA                     l5448:
  1731                           
  1732                           ; BSR set to: 2
  1733   0022BA  0EB0               	movlw	low main@motorLeft
  1734   0022BC  6E18               	movwf	stop@mL^0,c
  1735   0022BE  0E02               	movlw	high main@motorLeft
  1736   0022C0  6E19               	movwf	(stop@mL+1)^0,c
  1737   0022C2  0EA7               	movlw	low main@motorRight
  1738   0022C4  6E1A               	movwf	stop@mR^0,c
  1739   0022C6  0E02               	movlw	high main@motorRight
  1740   0022C8  6E1B               	movwf	(stop@mR+1)^0,c
  1741   0022CA  EC9E  F021         	call	_stop	;wreg free
  1742   0022CE                     l5450:
  1743                           
  1744                           ;MazeRobot.X/main.c: 154:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1745   0022CE  0E05               	movlw	5
  1746   0022D0  0100               	movlb	0	; () banked
  1747   0022D2  6FD2               	movwf	(??_main+1)& (0+255),b
  1748   0022D4  0E0F               	movlw	15
  1749   0022D6  6FD1               	movwf	??_main& (0+255),b
  1750   0022D8  0EF1               	movlw	241
  1751   0022DA                     u6097:
  1752   0022DA  2EE8               	decfsz	wreg,f,c
  1753   0022DC  D7FE               	bra	u6097
  1754   0022DE  2FD1               	decfsz	??_main& (0+255),f,b
  1755   0022E0  D7FC               	bra	u6097
  1756   0022E2  2FD2               	decfsz	(??_main+1)& (0+255),f,b
  1757   0022E4  D7FA               	bra	u6097
  1758   0022E6  EFA2  F00F         	goto	l5376
  1759   0022EA  EF3B  F000         	goto	start
  1760   0022EE                     __end_of_main:
  1761                           	callstack 0
  1762                           
  1763 ;; *************** function _whiteCal *****************
  1764 ;; Defined at:
  1765 ;;		line 115 in file "MazeRobot.X/color.c"
  1766 ;; Parameters:    Size  Location     Type
  1767 ;;  v               2   17[COMRAM] PTR struct RGB
  1768 ;;		 -> main@whiteRGBVal(8), 
  1769 ;; Auto vars:     Size  Location     Type
  1770 ;;  i               2   21[COMRAM] int 
  1771 ;; Return value:  Size  Location     Type
  1772 ;;                  1    wreg      void 
  1773 ;; Registers used:
  1774 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1775 ;; Tracked objects:
  1776 ;;		On entry : 0/0
  1777 ;;		On exit  : 0/0
  1778 ;;		Unchanged: 0/0
  1779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1780 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1781 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1782 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1783 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1784 ;;Total ram usage:        6 bytes
  1785 ;; Hardware stack levels used: 1
  1786 ;; Hardware stack levels required when called: 6
  1787 ;; This function calls:
  1788 ;;		_getColor
  1789 ;; This function is called by:
  1790 ;;		_main
  1791 ;; This function uses a non-reentrant model
  1792 ;;
  1793                           
  1794                           	psect	text1
  1795   003E2C                     __ptext1:
  1796                           	callstack 0
  1797   003E2C                     _whiteCal:
  1798                           	callstack 24
  1799   003E2C                     
  1800                           ;MazeRobot.X/color.c: 117:     for(int i = 0;i<20;i++){
  1801   003E2C  0E00               	movlw	0
  1802   003E2E  6E17               	movwf	(whiteCal@i+1)^0,c
  1803   003E30  0E00               	movlw	0
  1804   003E32  6E16               	movwf	whiteCal@i^0,c
  1805   003E34                     l4280:
  1806                           
  1807                           ;MazeRobot.X/color.c: 118:             LATDbits.LATD7 = !LATDbits.LATD7;
  1808   003E34  AE7C               	btfss	124,7,c	;volatile
  1809   003E36  EF1F  F01F         	goto	u4351
  1810   003E3A  EF23  F01F         	goto	u4350
  1811   003E3E                     u4351:
  1812   003E3E  6A14               	clrf	??_whiteCal^0,c
  1813   003E40  2A14               	incf	??_whiteCal^0,f,c
  1814   003E42  EF24  F01F         	goto	u4368
  1815   003E46                     u4350:
  1816   003E46  6A14               	clrf	??_whiteCal^0,c
  1817   003E48                     u4368:
  1818   003E48  3214               	rrcf	??_whiteCal^0,f,c
  1819   003E4A  3214               	rrcf	??_whiteCal^0,f,c
  1820   003E4C  507C               	movf	124,w,c	;volatile
  1821   003E4E  1814               	xorwf	??_whiteCal^0,w,c
  1822   003E50  0B7F               	andlw	-129
  1823   003E52  1814               	xorwf	??_whiteCal^0,w,c
  1824   003E54  6E7C               	movwf	124,c	;volatile
  1825   003E56                     
  1826                           ;MazeRobot.X/color.c: 119:             _delay((unsigned long)((100)*(64000000/4000.0)));
  1827   003E56  0E09               	movlw	9
  1828   003E58  6E15               	movwf	(??_whiteCal+1)^0,c
  1829   003E5A  0E1E               	movlw	30
  1830   003E5C  6E14               	movwf	??_whiteCal^0,c
  1831   003E5E  0EE4               	movlw	228
  1832   003E60                     u6107:
  1833   003E60  2EE8               	decfsz	wreg,f,c
  1834   003E62  D7FE               	bra	u6107
  1835   003E64  2E14               	decfsz	??_whiteCal^0,f,c
  1836   003E66  D7FC               	bra	u6107
  1837   003E68  2E15               	decfsz	(??_whiteCal+1)^0,f,c
  1838   003E6A  D7FA               	bra	u6107
  1839   003E6C  D000               	nop2	
  1840                           
  1841                           ;MazeRobot.X/color.c: 120:             }
  1842   003E6E  4A16               	infsnz	whiteCal@i^0,f,c
  1843   003E70  2A17               	incf	(whiteCal@i+1)^0,f,c
  1844   003E72  BE17               	btfsc	(whiteCal@i+1)^0,7,c
  1845   003E74  EF45  F01F         	goto	u4371
  1846   003E78  5017               	movf	(whiteCal@i+1)^0,w,c
  1847   003E7A  E109               	bnz	u4370
  1848   003E7C  0E14               	movlw	20
  1849   003E7E  5C16               	subwf	whiteCal@i^0,w,c
  1850   003E80  A0D8               	btfss	status,0,c
  1851   003E82  EF45  F01F         	goto	u4371
  1852   003E86  EF47  F01F         	goto	u4370
  1853   003E8A                     u4371:
  1854   003E8A  EF1A  F01F         	goto	l4280
  1855   003E8E                     u4370:
  1856   003E8E                     
  1857                           ;MazeRobot.X/color.c: 121:             LATDbits.LATD7 = !LATDbits.LATD7;
  1858   003E8E  AE7C               	btfss	124,7,c	;volatile
  1859   003E90  EF4C  F01F         	goto	u4381
  1860   003E94  EF50  F01F         	goto	u4380
  1861   003E98                     u4381:
  1862   003E98  6A14               	clrf	??_whiteCal^0,c
  1863   003E9A  2A14               	incf	??_whiteCal^0,f,c
  1864   003E9C  EF51  F01F         	goto	u4398
  1865   003EA0                     u4380:
  1866   003EA0  6A14               	clrf	??_whiteCal^0,c
  1867   003EA2                     u4398:
  1868   003EA2  3214               	rrcf	??_whiteCal^0,f,c
  1869   003EA4  3214               	rrcf	??_whiteCal^0,f,c
  1870   003EA6  507C               	movf	124,w,c	;volatile
  1871   003EA8  1814               	xorwf	??_whiteCal^0,w,c
  1872   003EAA  0B7F               	andlw	-129
  1873   003EAC  1814               	xorwf	??_whiteCal^0,w,c
  1874   003EAE  6E7C               	movwf	124,c	;volatile
  1875   003EB0                     
  1876                           ;MazeRobot.X/color.c: 122:             _delay((unsigned long)((500)*(64000000/4000.0)));
  1877   003EB0  0E29               	movlw	41
  1878   003EB2  6E15               	movwf	(??_whiteCal+1)^0,c
  1879   003EB4  0E96               	movlw	150
  1880   003EB6  6E14               	movwf	??_whiteCal^0,c
  1881   003EB8  0E7F               	movlw	127
  1882   003EBA                     u6117:
  1883   003EBA  2EE8               	decfsz	wreg,f,c
  1884   003EBC  D7FE               	bra	u6117
  1885   003EBE  2E14               	decfsz	??_whiteCal^0,f,c
  1886   003EC0  D7FC               	bra	u6117
  1887   003EC2  2E15               	decfsz	(??_whiteCal+1)^0,f,c
  1888   003EC4  D7FA               	bra	u6117
  1889   003EC6  F000               	nop	
  1890   003EC8                     
  1891                           ;MazeRobot.X/color.c: 123:             getColor(v);
  1892   003EC8  C012  F010         	movff	whiteCal@v,getColor@v
  1893   003ECC  C013  F011         	movff	whiteCal@v+1,getColor@v+1
  1894   003ED0  EC4A  F023         	call	_getColor	;wreg free
  1895   003ED4                     
  1896                           ;MazeRobot.X/color.c: 124:             _delay((unsigned long)((500)*(64000000/4000.0)));
  1897   003ED4  0E29               	movlw	41
  1898   003ED6  6E15               	movwf	(??_whiteCal+1)^0,c
  1899   003ED8  0E96               	movlw	150
  1900   003EDA  6E14               	movwf	??_whiteCal^0,c
  1901   003EDC  0E7F               	movlw	127
  1902   003EDE                     u6127:
  1903   003EDE  2EE8               	decfsz	wreg,f,c
  1904   003EE0  D7FE               	bra	u6127
  1905   003EE2  2E14               	decfsz	??_whiteCal^0,f,c
  1906   003EE4  D7FC               	bra	u6127
  1907   003EE6  2E15               	decfsz	(??_whiteCal+1)^0,f,c
  1908   003EE8  D7FA               	bra	u6127
  1909   003EEA  F000               	nop	
  1910   003EEC                     
  1911                           ;MazeRobot.X/color.c: 125:             LATDbits.LATD7 = !LATDbits.LATD7;
  1912   003EEC  AE7C               	btfss	124,7,c	;volatile
  1913   003EEE  EF7B  F01F         	goto	u4401
  1914   003EF2  EF7F  F01F         	goto	u4400
  1915   003EF6                     u4401:
  1916   003EF6  6A14               	clrf	??_whiteCal^0,c
  1917   003EF8  2A14               	incf	??_whiteCal^0,f,c
  1918   003EFA  EF80  F01F         	goto	u4418
  1919   003EFE                     u4400:
  1920   003EFE  6A14               	clrf	??_whiteCal^0,c
  1921   003F00                     u4418:
  1922   003F00  3214               	rrcf	??_whiteCal^0,f,c
  1923   003F02  3214               	rrcf	??_whiteCal^0,f,c
  1924   003F04  507C               	movf	124,w,c	;volatile
  1925   003F06  1814               	xorwf	??_whiteCal^0,w,c
  1926   003F08  0B7F               	andlw	-129
  1927   003F0A  1814               	xorwf	??_whiteCal^0,w,c
  1928   003F0C  6E7C               	movwf	124,c	;volatile
  1929   003F0E  0012               	return		;funcret
  1930   003F10                     __end_of_whiteCal:
  1931                           	callstack 0
  1932                           
  1933 ;; *************** function _return_home_turns *****************
  1934 ;; Defined at:
  1935 ;;		line 223 in file "MazeRobot.X/color.c"
  1936 ;; Parameters:    Size  Location     Type
  1937 ;;  turn_history    2   31[BANK0 ] PTR unsigned int 
  1938 ;;		 -> main@turn_history(64), 
  1939 ;;  counter_hist    2   33[BANK0 ] PTR unsigned int 
  1940 ;;		 -> main@counter_history(64), 
  1941 ;;  index           2   35[BANK0 ] unsigned int 
  1942 ;;  mL              2   37[BANK0 ] PTR struct DC_motor
  1943 ;;		 -> main@motorLeft(9), 
  1944 ;;  mR              2   39[BANK0 ] PTR struct DC_motor
  1945 ;;		 -> main@motorRight(9), 
  1946 ;; Auto vars:     Size  Location     Type
  1947 ;;  i               2  150[BANK1 ] int 
  1948 ;;  string1       150    0[BANK1 ] unsigned char [150]
  1949 ;;  k               2  152[BANK1 ] int 
  1950 ;; Return value:  Size  Location     Type
  1951 ;;                  1    wreg      void 
  1952 ;; Registers used:
  1953 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1954 ;; Tracked objects:
  1955 ;;		On entry : 0/0
  1956 ;;		On exit  : 0/0
  1957 ;;		Unchanged: 0/0
  1958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1959 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1960 ;;      Locals:         0       0     154       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1961 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1962 ;;      Totals:         0      12     154       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1963 ;;Total ram usage:      166 bytes
  1964 ;; Hardware stack levels used: 1
  1965 ;; Hardware stack levels required when called: 10
  1966 ;; This function calls:
  1967 ;;		_TxBufferedString
  1968 ;;		_forward
  1969 ;;		_sendTxBuf
  1970 ;;		_sprintf
  1971 ;;		_stop
  1972 ;;		_turnLeft_135
  1973 ;;		_turnLeft_90
  1974 ;;		_turnRight_135
  1975 ;;		_turnRight_90
  1976 ;;		_turn_180
  1977 ;; This function is called by:
  1978 ;;		_main
  1979 ;; This function uses a non-reentrant model
  1980 ;;
  1981                           
  1982                           	psect	text2
  1983   002D2E                     __ptext2:
  1984                           	callstack 0
  1985   002D2E                     _return_home_turns:
  1986                           	callstack 20
  1987   002D2E                     
  1988                           ;MazeRobot.X/color.c: 223: void return_home_turns(unsigned int *turn_history, unsigned i
      +                          nt *counter_history, unsigned int index, DC_motor *mL, DC_motor *mR);MazeRobot.X/color.c
      +                          : 224: {;MazeRobot.X/color.c: 227:     for (int k = (index); k >= 0; k--){
  1989   002D2E  C0C0  F198         	movff	return_home_turns@index,return_home_turns@k
  1990   002D32  C0C1  F199         	movff	return_home_turns@index+1,return_home_turns@k+1
  1991   002D36  0101               	movlb	1	; () banked
  1992   002D38  BF99               	btfsc	(return_home_turns@k+1)& (0+255),7,b
  1993   002D3A  EFA3  F016         	goto	u5830
  1994   002D3E  EFA1  F016         	goto	u5831
  1995   002D42                     u5831:
  1996   002D42  EFA5  F016         	goto	l5250
  1997   002D46                     u5830:
  1998   002D46  EFC4  F017         	goto	l135
  1999   002D4A                     l5250:
  2000                           
  2001                           ; BSR set to: 1
  2002                           ;MazeRobot.X/color.c: 228:             char string1[150];;MazeRobot.X/color.c: 229:     
      +                                  _delay((unsigned long)((2)*(64000000/4000.0)));
  2003   002D4A  0E2A               	movlw	42
  2004   002D4C  0100               	movlb	0	; () banked
  2005   002D4E  6FC6               	movwf	??_return_home_turns& (0+255),b
  2006   002D50  0E8D               	movlw	141
  2007   002D52                     u6137:
  2008   002D52  2EE8               	decfsz	wreg,f,c
  2009   002D54  D7FE               	bra	u6137
  2010   002D56  2FC6               	decfsz	??_return_home_turns& (0+255),f,b
  2011   002D58  D7FC               	bra	u6137
  2012   002D5A  D000               	nop2	
  2013   002D5C                     
  2014                           ;MazeRobot.X/color.c: 230:             sprintf(string1,"K:%d I:%d C:%d T:%d \r",k,index,
      +                          counter_history[k],turn_history[k]);
  2015   002D5C  0E00               	movlw	low return_home_turns@string1
  2016   002D5E  0100               	movlb	0	; () banked
  2017   002D60  6FA3               	movwf	sprintf@s& (0+255),b
  2018   002D62  0E01               	movlw	high return_home_turns@string1
  2019   002D64  6FA4               	movwf	(sprintf@s+1)& (0+255),b
  2020   002D66  0E01               	movlw	low STR_1
  2021   002D68  6FA5               	movwf	sprintf@fmt& (0+255),b
  2022   002D6A  0E0E               	movlw	high STR_1
  2023   002D6C  6FA6               	movwf	(sprintf@fmt+1)& (0+255),b
  2024   002D6E  C198  F0A7         	movff	return_home_turns@k,?_sprintf+4
  2025   002D72  C199  F0A8         	movff	return_home_turns@k+1,?_sprintf+5
  2026   002D76  C0C0  F0A9         	movff	return_home_turns@index,?_sprintf+6
  2027   002D7A  C0C1  F0AA         	movff	return_home_turns@index+1,?_sprintf+7
  2028   002D7E  90D8               	bcf	status,0,c
  2029   002D80  0101               	movlb	1	; () banked
  2030   002D82  3598               	rlcf	return_home_turns@k& (0+255),w,b
  2031   002D84  6ED9               	movwf	fsr2l,c
  2032   002D86  3599               	rlcf	(return_home_turns@k+1)& (0+255),w,b
  2033   002D88  6EDA               	movwf	fsr2h,c
  2034   002D8A  0100               	movlb	0	; () banked
  2035   002D8C  51BE               	movf	return_home_turns@counter_history& (0+255),w,b
  2036   002D8E  26D9               	addwf	fsr2l,f,c
  2037   002D90  51BF               	movf	(return_home_turns@counter_history+1)& (0+255),w,b
  2038   002D92  22DA               	addwfc	fsr2h,f,c
  2039   002D94  CFDE F0AB          	movff	postinc2,?_sprintf+8
  2040   002D98  CFDD F0AC          	movff	postdec2,?_sprintf+9
  2041   002D9C  90D8               	bcf	status,0,c
  2042   002D9E  0101               	movlb	1	; () banked
  2043   002DA0  3598               	rlcf	return_home_turns@k& (0+255),w,b
  2044   002DA2  6ED9               	movwf	fsr2l,c
  2045   002DA4  3599               	rlcf	(return_home_turns@k+1)& (0+255),w,b
  2046   002DA6  6EDA               	movwf	fsr2h,c
  2047   002DA8  0100               	movlb	0	; () banked
  2048   002DAA  51BC               	movf	return_home_turns@turn_history& (0+255),w,b
  2049   002DAC  26D9               	addwf	fsr2l,f,c
  2050   002DAE  51BD               	movf	(return_home_turns@turn_history+1)& (0+255),w,b
  2051   002DB0  22DA               	addwfc	fsr2h,f,c
  2052   002DB2  CFDE F0AD          	movff	postinc2,?_sprintf+10
  2053   002DB6  CFDD F0AE          	movff	postdec2,?_sprintf+11
  2054   002DBA  ECA3  F023         	call	_sprintf	;wreg free
  2055   002DBE                     
  2056                           ;MazeRobot.X/color.c: 231:             TxBufferedString(string1);
  2057   002DBE  0E00               	movlw	low return_home_turns@string1
  2058   002DC0  6E06               	movwf	TxBufferedString@string^0,c
  2059   002DC2  0E01               	movlw	high return_home_turns@string1
  2060   002DC4  6E07               	movwf	(TxBufferedString@string+1)^0,c
  2061   002DC6  EC31  F025         	call	_TxBufferedString	;wreg free
  2062   002DCA                     
  2063                           ;MazeRobot.X/color.c: 232:             sendTxBuf();
  2064   002DCA  ECEC  F025         	call	_sendTxBuf	;wreg free
  2065   002DCE                     
  2066                           ;MazeRobot.X/color.c: 233:             _delay((unsigned long)((2)*(64000000/4000.0)));
  2067   002DCE  0E2A               	movlw	42
  2068   002DD0  0100               	movlb	0	; () banked
  2069   002DD2  6FC6               	movwf	??_return_home_turns& (0+255),b
  2070   002DD4  0E8D               	movlw	141
  2071   002DD6                     u6147:
  2072   002DD6  2EE8               	decfsz	wreg,f,c
  2073   002DD8  D7FE               	bra	u6147
  2074   002DDA  2FC6               	decfsz	??_return_home_turns& (0+255),f,b
  2075   002DDC  D7FC               	bra	u6147
  2076   002DDE  D000               	nop2	
  2077                           
  2078                           ;MazeRobot.X/color.c: 235:             switch (turn_history[k]){
  2079   002DE0  EF74  F017         	goto	l5286
  2080   002DE4                     l5260:
  2081                           
  2082                           ; BSR set to: 0
  2083                           ;MazeRobot.X/color.c: 237:                     turnLeft_90(mL,mR);
  2084   002DE4  C0C2  F01E         	movff	return_home_turns@mL,turnLeft_90@mL
  2085   002DE8  C0C3  F01F         	movff	return_home_turns@mL+1,turnLeft_90@mL+1
  2086   002DEC  C0C4  F020         	movff	return_home_turns@mR,turnLeft_90@mR
  2087   002DF0  C0C5  F021         	movff	return_home_turns@mR+1,turnLeft_90@mR+1
  2088   002DF4  EC57  F01D         	call	_turnLeft_90	;wreg free
  2089                           
  2090                           ;MazeRobot.X/color.c: 238:                     break;
  2091   002DF8  EFAD  F017         	goto	l5288
  2092   002DFC                     l5262:
  2093                           
  2094                           ; BSR set to: 0
  2095                           ;MazeRobot.X/color.c: 240:                     turnRight_90(mL,mR);
  2096   002DFC  C0C2  F01E         	movff	return_home_turns@mL,turnRight_90@mL
  2097   002E00  C0C3  F01F         	movff	return_home_turns@mL+1,turnRight_90@mL+1
  2098   002E04  C0C4  F020         	movff	return_home_turns@mR,turnRight_90@mR
  2099   002E08  C0C5  F021         	movff	return_home_turns@mR+1,turnRight_90@mR+1
  2100   002E0C  ECB8  F01C         	call	_turnRight_90	;wreg free
  2101                           
  2102                           ;MazeRobot.X/color.c: 241:                     break;
  2103   002E10  EFAD  F017         	goto	l5288
  2104   002E14                     l5264:
  2105                           
  2106                           ; BSR set to: 0
  2107                           ;MazeRobot.X/color.c: 243:                     turn_180(mL,mR);
  2108   002E14  C0C2  F01E         	movff	return_home_turns@mL,turn_180@mL
  2109   002E18  C0C3  F01F         	movff	return_home_turns@mL+1,turn_180@mL+1
  2110   002E1C  C0C4  F020         	movff	return_home_turns@mR,turn_180@mR
  2111   002E20  C0C5  F021         	movff	return_home_turns@mR+1,turn_180@mR+1
  2112   002E24  EC7A  F01B         	call	_turn_180	;wreg free
  2113                           
  2114                           ;MazeRobot.X/color.c: 244:                     break;
  2115   002E28  EFAD  F017         	goto	l5288
  2116   002E2C                     l5270:
  2117                           
  2118                           ; BSR set to: 0
  2119                           ;MazeRobot.X/color.c: 252:                     turnLeft_135(mL,mR);
  2120   002E2C  C0C2  F01E         	movff	return_home_turns@mL,turnLeft_135@mL
  2121   002E30  C0C3  F01F         	movff	return_home_turns@mL+1,turnLeft_135@mL+1
  2122   002E34  C0C4  F020         	movff	return_home_turns@mR,turnLeft_135@mR
  2123   002E38  C0C5  F021         	movff	return_home_turns@mR+1,turnLeft_135@mR+1
  2124   002E3C  EC19  F01C         	call	_turnLeft_135	;wreg free
  2125                           
  2126                           ;MazeRobot.X/color.c: 253:                     break;
  2127   002E40  EFAD  F017         	goto	l5288
  2128   002E44                     l5272:
  2129                           
  2130                           ; BSR set to: 0
  2131                           ;MazeRobot.X/color.c: 255:                     turnRight_135(mL,mR);
  2132   002E44  C0C2  F01E         	movff	return_home_turns@mL,turnRight_135@mL
  2133   002E48  C0C3  F01F         	movff	return_home_turns@mL+1,turnRight_135@mL+1
  2134   002E4C  C0C4  F020         	movff	return_home_turns@mR,turnRight_135@mR
  2135   002E50  C0C5  F021         	movff	return_home_turns@mR+1,turnRight_135@mR+1
  2136   002E54  ECF6  F01D         	call	_turnRight_135	;wreg free
  2137                           
  2138                           ;MazeRobot.X/color.c: 256:                     break;
  2139   002E58  EFAD  F017         	goto	l5288
  2140   002E5C                     l5274:
  2141                           
  2142                           ; BSR set to: 0
  2143                           ;MazeRobot.X/color.c: 258:                     forward(mL,mR);
  2144   002E5C  C0C2  F018         	movff	return_home_turns@mL,forward@mL
  2145   002E60  C0C3  F019         	movff	return_home_turns@mL+1,forward@mL+1
  2146   002E64  C0C4  F01A         	movff	return_home_turns@mR,forward@mR
  2147   002E68  C0C5  F01B         	movff	return_home_turns@mR+1,forward@mR+1
  2148   002E6C  ECFA  F01F         	call	_forward	;wreg free
  2149   002E70                     
  2150                           ;MazeRobot.X/color.c: 259:                     int i = counter_history[k];
  2151   002E70  90D8               	bcf	status,0,c
  2152   002E72  0101               	movlb	1	; () banked
  2153   002E74  3598               	rlcf	return_home_turns@k& (0+255),w,b
  2154   002E76  6ED9               	movwf	fsr2l,c
  2155   002E78  3599               	rlcf	(return_home_turns@k+1)& (0+255),w,b
  2156   002E7A  6EDA               	movwf	fsr2h,c
  2157   002E7C  0100               	movlb	0	; () banked
  2158   002E7E  51BE               	movf	return_home_turns@counter_history& (0+255),w,b
  2159   002E80  26D9               	addwf	fsr2l,f,c
  2160   002E82  51BF               	movf	(return_home_turns@counter_history+1)& (0+255),w,b
  2161   002E84  22DA               	addwfc	fsr2h,f,c
  2162   002E86  CFDE F196          	movff	postinc2,return_home_turns@i
  2163   002E8A  CFDD F197          	movff	postdec2,return_home_turns@i+1
  2164                           
  2165                           ;MazeRobot.X/color.c: 260:                     while(i>0){
  2166   002E8E  EF58  F017         	goto	l131
  2167   002E92                     l5278:
  2168                           
  2169                           ; BSR set to: 1
  2170                           ;MazeRobot.X/color.c: 261:                     i--;
  2171   002E92  0796               	decf	return_home_turns@i& (0+255),f,b
  2172   002E94  A0D8               	btfss	status,0,c
  2173   002E96  0797               	decf	(return_home_turns@i+1)& (0+255),f,b
  2174   002E98                     
  2175                           ; BSR set to: 1
  2176                           ;MazeRobot.X/color.c: 262:                     _delay((unsigned long)((50)*(64000000/400
      +                          0.0)));
  2177   002E98  0E05               	movlw	5
  2178   002E9A  0100               	movlb	0	; () banked
  2179   002E9C  6FC7               	movwf	(??_return_home_turns+1)& (0+255),b
  2180   002E9E  0E0F               	movlw	15
  2181   002EA0  6FC6               	movwf	??_return_home_turns& (0+255),b
  2182   002EA2  0EF1               	movlw	241
  2183   002EA4                     u6157:
  2184   002EA4  2EE8               	decfsz	wreg,f,c
  2185   002EA6  D7FE               	bra	u6157
  2186   002EA8  2FC6               	decfsz	??_return_home_turns& (0+255),f,b
  2187   002EAA  D7FC               	bra	u6157
  2188   002EAC  2FC7               	decfsz	(??_return_home_turns+1)& (0+255),f,b
  2189   002EAE  D7FA               	bra	u6157
  2190   002EB0                     l131:
  2191                           
  2192                           ;MazeRobot.X/color.c: 260:                     while(i>0){
  2193   002EB0  0101               	movlb	1	; () banked
  2194   002EB2  BF97               	btfsc	(return_home_turns@i+1)& (0+255),7,b
  2195   002EB4  EF66  F017         	goto	u5840
  2196   002EB8  5197               	movf	(return_home_turns@i+1)& (0+255),w,b
  2197   002EBA  E106               	bnz	u5841
  2198   002EBC  0596               	decf	return_home_turns@i& (0+255),w,b
  2199   002EBE  B0D8               	btfsc	status,0,c
  2200   002EC0  EF64  F017         	goto	u5841
  2201   002EC4  EF66  F017         	goto	u5840
  2202   002EC8                     u5841:
  2203   002EC8  EF49  F017         	goto	l5278
  2204   002ECC                     u5840:
  2205   002ECC  EFAD  F017         	goto	l5288
  2206   002ED0                     l5282:
  2207                           
  2208                           ; BSR set to: 0
  2209                           ;MazeRobot.X/color.c: 266:                     stop(mL,mR);
  2210   002ED0  C0C2  F018         	movff	return_home_turns@mL,stop@mL
  2211   002ED4  C0C3  F019         	movff	return_home_turns@mL+1,stop@mL+1
  2212   002ED8  C0C4  F01A         	movff	return_home_turns@mR,stop@mR
  2213   002EDC  C0C5  F01B         	movff	return_home_turns@mR+1,stop@mR+1
  2214   002EE0  EC9E  F021         	call	_stop	;wreg free
  2215                           
  2216                           ;MazeRobot.X/color.c: 267:                     break;
  2217   002EE4  EFAD  F017         	goto	l5288
  2218   002EE8                     l5286:
  2219   002EE8  90D8               	bcf	status,0,c
  2220   002EEA  0101               	movlb	1	; () banked
  2221   002EEC  3598               	rlcf	return_home_turns@k& (0+255),w,b
  2222   002EEE  6ED9               	movwf	fsr2l,c
  2223   002EF0  3599               	rlcf	(return_home_turns@k+1)& (0+255),w,b
  2224   002EF2  6EDA               	movwf	fsr2h,c
  2225   002EF4  0100               	movlb	0	; () banked
  2226   002EF6  51BC               	movf	return_home_turns@turn_history& (0+255),w,b
  2227   002EF8  26D9               	addwf	fsr2l,f,c
  2228   002EFA  51BD               	movf	(return_home_turns@turn_history+1)& (0+255),w,b
  2229   002EFC  22DA               	addwfc	fsr2h,f,c
  2230   002EFE  CFDE F0C6          	movff	postinc2,??_return_home_turns
  2231   002F02  CFDD F0C7          	movff	postdec2,??_return_home_turns+1
  2232                           
  2233                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2234                           ; Switch size 1, requested type "simple"
  2235                           ; Number of cases is 1, Range of values is 0 to 0
  2236                           ; switch strategies available:
  2237                           ; Name         Instructions Cycles
  2238                           ; simple_byte            4     3 (average)
  2239                           ;	Chosen strategy is simple_byte
  2240   002F06  51C7               	movf	(??_return_home_turns+1)& (0+255),w,b
  2241   002F08  0A00               	xorlw	0	; case 0
  2242   002F0A  B4D8               	btfsc	status,2,c
  2243   002F0C  EF8A  F017         	goto	l5476
  2244   002F10  EF68  F017         	goto	l5282
  2245   002F14                     l5476:
  2246                           
  2247                           ; BSR set to: 0
  2248                           ; Switch size 1, requested type "simple"
  2249                           ; Number of cases is 8, Range of values is 0 to 7
  2250                           ; switch strategies available:
  2251                           ; Name         Instructions Cycles
  2252                           ; simple_byte           25    13 (average)
  2253                           ;	Chosen strategy is simple_byte
  2254   002F14  51C6               	movf	??_return_home_turns& (0+255),w,b
  2255   002F16  0A00               	xorlw	0	; case 0
  2256   002F18  B4D8               	btfsc	status,2,c
  2257   002F1A  EF2E  F017         	goto	l5274
  2258   002F1E  0A01               	xorlw	1	; case 1
  2259   002F20  B4D8               	btfsc	status,2,c
  2260   002F22  EFF2  F016         	goto	l5260
  2261   002F26  0A03               	xorlw	3	; case 2
  2262   002F28  B4D8               	btfsc	status,2,c
  2263   002F2A  EFFE  F016         	goto	l5262
  2264   002F2E  0A01               	xorlw	1	; case 3
  2265   002F30  B4D8               	btfsc	status,2,c
  2266   002F32  EF0A  F017         	goto	l5264
  2267   002F36  0A07               	xorlw	7	; case 4
  2268   002F38  B4D8               	btfsc	status,2,c
  2269   002F3A  EFF2  F016         	goto	l5260
  2270   002F3E  0A01               	xorlw	1	; case 5
  2271   002F40  B4D8               	btfsc	status,2,c
  2272   002F42  EFFE  F016         	goto	l5262
  2273   002F46  0A03               	xorlw	3	; case 6
  2274   002F48  B4D8               	btfsc	status,2,c
  2275   002F4A  EF16  F017         	goto	l5270
  2276   002F4E  0A01               	xorlw	1	; case 7
  2277   002F50  B4D8               	btfsc	status,2,c
  2278   002F52  EF22  F017         	goto	l5272
  2279   002F56  EF68  F017         	goto	l5282
  2280   002F5A                     l5288:
  2281                           
  2282                           ;MazeRobot.X/color.c: 284:             _delay((unsigned long)((50)*(64000000/4000.0)));
  2283   002F5A  0E05               	movlw	5
  2284   002F5C  0100               	movlb	0	; () banked
  2285   002F5E  6FC7               	movwf	(??_return_home_turns+1)& (0+255),b
  2286   002F60  0E0F               	movlw	15
  2287   002F62  6FC6               	movwf	??_return_home_turns& (0+255),b
  2288   002F64  0EF1               	movlw	241
  2289   002F66                     u6167:
  2290   002F66  2EE8               	decfsz	wreg,f,c
  2291   002F68  D7FE               	bra	u6167
  2292   002F6A  2FC6               	decfsz	??_return_home_turns& (0+255),f,b
  2293   002F6C  D7FC               	bra	u6167
  2294   002F6E  2FC7               	decfsz	(??_return_home_turns+1)& (0+255),f,b
  2295   002F70  D7FA               	bra	u6167
  2296   002F72                     
  2297                           ;MazeRobot.X/color.c: 285:         }
  2298   002F72  0101               	movlb	1	; () banked
  2299   002F74  0798               	decf	return_home_turns@k& (0+255),f,b
  2300   002F76  A0D8               	btfss	status,0,c
  2301   002F78  0799               	decf	(return_home_turns@k+1)& (0+255),f,b
  2302   002F7A  BF99               	btfsc	(return_home_turns@k+1)& (0+255),7,b
  2303   002F7C  EFC4  F017         	goto	u5850
  2304   002F80  EFC2  F017         	goto	u5851
  2305   002F84                     u5851:
  2306   002F84  EFA5  F016         	goto	l5250
  2307   002F88                     u5850:
  2308   002F88                     l135:
  2309                           
  2310                           ; BSR set to: 1
  2311   002F88  0012               	return		;funcret
  2312   002F8A                     __end_of_return_home_turns:
  2313                           	callstack 0
  2314                           
  2315 ;; *************** function _sprintf *****************
  2316 ;; Defined at:
  2317 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_sprintf.c"
  2318 ;; Parameters:    Size  Location     Type
  2319 ;;  s               2    6[BANK0 ] PTR unsigned char 
  2320 ;;		 -> ADC2String@buf(40), return_home_turns@string1(150), 
  2321 ;;  fmt             2    8[BANK0 ] PTR const unsigned char 
  2322 ;;		 -> STR_2(15), STR_1(22), 
  2323 ;; Auto vars:     Size  Location     Type
  2324 ;;  f              11   20[BANK0 ] struct _IO_FILE
  2325 ;;  ap              2   18[BANK0 ] PTR void [1]
  2326 ;;		 -> ?_sprintf(2), 
  2327 ;;  ret             2    0        int 
  2328 ;; Return value:  Size  Location     Type
  2329 ;;                  2    6[BANK0 ] int 
  2330 ;; Registers used:
  2331 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2332 ;; Tracked objects:
  2333 ;;		On entry : 0/0
  2334 ;;		On exit  : 0/0
  2335 ;;		Unchanged: 0/0
  2336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2337 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2338 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2340 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2341 ;;Total ram usage:       25 bytes
  2342 ;; Hardware stack levels used: 1
  2343 ;; Hardware stack levels required when called: 9
  2344 ;; This function calls:
  2345 ;;		_vfprintf
  2346 ;; This function is called by:
  2347 ;;		_return_home_turns
  2348 ;;		_ADC2String
  2349 ;; This function uses a non-reentrant model
  2350 ;;
  2351                           
  2352                           	psect	text3
  2353   004746                     __ptext3:
  2354                           	callstack 0
  2355   004746                     _sprintf:
  2356                           	callstack 20
  2357   004746  0EA7               	movlw	low (?_sprintf+4)
  2358   004748  0100               	movlb	0	; () banked
  2359   00474A  6FAF               	movwf	sprintf@ap& (0+255),b
  2360   00474C  0E00               	movlw	high (?_sprintf+4)
  2361   00474E  6FB0               	movwf	(sprintf@ap+1)& (0+255),b
  2362   004750  C0A3  F0B1         	movff	sprintf@s,sprintf@f
  2363   004754  C0A4  F0B2         	movff	sprintf@s+1,sprintf@f+1
  2364   004758                     
  2365                           ; BSR set to: 0
  2366   004758  0E00               	movlw	0
  2367   00475A  6FB5               	movwf	(sprintf@f+4)& (0+255),b
  2368   00475C  0E00               	movlw	0
  2369   00475E  6FB4               	movwf	(sprintf@f+3)& (0+255),b
  2370   004760                     
  2371                           ; BSR set to: 0
  2372   004760  0E00               	movlw	0
  2373   004762  6FBB               	movwf	(sprintf@f+10)& (0+255),b
  2374   004764  0E00               	movlw	0
  2375   004766  6FBA               	movwf	(sprintf@f+9)& (0+255),b
  2376   004768                     
  2377                           ; BSR set to: 0
  2378   004768  0EB1               	movlw	low sprintf@f
  2379   00476A  6F9D               	movwf	vfprintf@fp& (0+255),b
  2380   00476C  0E00               	movlw	high sprintf@f
  2381   00476E  6F9E               	movwf	(vfprintf@fp+1)& (0+255),b
  2382   004770  C0A5  F09F         	movff	sprintf@fmt,vfprintf@fmt
  2383   004774  C0A6  F0A0         	movff	sprintf@fmt+1,vfprintf@fmt+1
  2384   004778  0EAF               	movlw	low sprintf@ap
  2385   00477A  6FA1               	movwf	vfprintf@ap& (0+255),b
  2386   00477C  0E00               	movlw	high sprintf@ap
  2387   00477E  6FA2               	movwf	(vfprintf@ap+1)& (0+255),b
  2388   004780  EC79  F023         	call	_vfprintf	;wreg free
  2389   004784  0100               	movlb	0	; () banked
  2390   004786  51B4               	movf	(sprintf@f+3)& (0+255),w,b
  2391   004788  25A3               	addwf	sprintf@s& (0+255),w,b
  2392   00478A  6ED9               	movwf	fsr2l,c
  2393   00478C  51B5               	movf	(sprintf@f+4)& (0+255),w,b
  2394   00478E  21A4               	addwfc	(sprintf@s+1)& (0+255),w,b
  2395   004790  6EDA               	movwf	fsr2h,c
  2396   004792  0E00               	movlw	0
  2397   004794  6EDF               	movwf	indf2,c
  2398   004796                     
  2399                           ; BSR set to: 0
  2400   004796  0012               	return		;funcret
  2401   004798                     __end_of_sprintf:
  2402                           	callstack 0
  2403                           
  2404 ;; *************** function _vfprintf *****************
  2405 ;; Defined at:
  2406 ;;		line 1520 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2407 ;; Parameters:    Size  Location     Type
  2408 ;;  fp              2    0[BANK0 ] PTR struct _IO_FILE
  2409 ;;		 -> sprintf@f(11), 
  2410 ;;  fmt             2    2[BANK0 ] PTR const unsigned char 
  2411 ;;		 -> STR_2(15), STR_1(22), 
  2412 ;;  ap              2    4[BANK0 ] PTR PTR void 
  2413 ;;		 -> sprintf@ap(2), 
  2414 ;; Auto vars:     Size  Location     Type
  2415 ;;  cfmt            2   84[COMRAM] PTR unsigned char 
  2416 ;;		 -> STR_2(15), STR_1(22), 
  2417 ;; Return value:  Size  Location     Type
  2418 ;;                  2    0[BANK0 ] int 
  2419 ;; Registers used:
  2420 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2421 ;; Tracked objects:
  2422 ;;		On entry : 0/0
  2423 ;;		On exit  : 0/0
  2424 ;;		Unchanged: 0/0
  2425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2426 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2427 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2429 ;;      Totals:         2       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2430 ;;Total ram usage:        8 bytes
  2431 ;; Hardware stack levels used: 1
  2432 ;; Hardware stack levels required when called: 8
  2433 ;; This function calls:
  2434 ;;		_vfpfcnvrt
  2435 ;; This function is called by:
  2436 ;;		_sprintf
  2437 ;; This function uses a non-reentrant model
  2438 ;;
  2439                           
  2440                           	psect	text4
  2441   0046F2                     __ptext4:
  2442                           	callstack 0
  2443   0046F2                     _vfprintf:
  2444                           	callstack 20
  2445   0046F2                     
  2446                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1520: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\source
      +                          s\c99\common\doprnt.c: 1521: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\comm
      +                          on\doprnt.c: 1523:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\
      +                          common\doprnt.c: 1525:     cfmt = (char *)fmt;
  2447   0046F2  C09F  F055         	movff	vfprintf@fmt,vfprintf@cfmt
  2448   0046F6  C0A0  F056         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  2449                           
  2450                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  2451   0046FA  EF8D  F023         	goto	l5070
  2452   0046FE                     l5068:
  2453                           
  2454                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1533:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  2455   0046FE  C09D  F043         	movff	vfprintf@fp,vfpfcnvrt@fp
  2456   004702  C09E  F044         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  2457   004706  0E55               	movlw	low vfprintf@cfmt
  2458   004708  6E45               	movwf	vfpfcnvrt@fmt^0,c
  2459   00470A  0E00               	movlw	high vfprintf@cfmt
  2460   00470C  6E46               	movwf	(vfpfcnvrt@fmt+1)^0,c
  2461   00470E  C0A1  F047         	movff	vfprintf@ap,vfpfcnvrt@ap
  2462   004712  C0A2  F048         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  2463   004716  ECCB  F01A         	call	_vfpfcnvrt	;wreg free
  2464   00471A                     l5070:
  2465                           
  2466                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  2467   00471A  C055  FFF6         	movff	vfprintf@cfmt,tblptrl
  2468   00471E  C056  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  2469   004722                     	if	0	;tblptru may be non-zero
  2470   004722                     	endif
  2471   004722                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2472   004722  0E00               	movlw	low (__mediumconst shr (0+16))
  2473   004724  6EF8               	movwf	tblptru,c
  2474   004726                     	endif
  2475   004726  0008               	tblrd		*
  2476   004728  50F5               	movf	tablat,w,c
  2477   00472A  0900               	iorlw	0
  2478   00472C  A4D8               	btfss	status,2,c
  2479   00472E  EF9B  F023         	goto	u5501
  2480   004732  EF9D  F023         	goto	u5500
  2481   004736                     u5501:
  2482   004736  EF7F  F023         	goto	l5068
  2483   00473A                     u5500:
  2484   00473A                     
  2485                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1538:  return 0;
  2486   00473A  0E00               	movlw	0
  2487   00473C  0100               	movlb	0	; () banked
  2488   00473E  6F9E               	movwf	(?_vfprintf+1)& (0+255),b
  2489   004740  0E00               	movlw	0
  2490   004742  6F9D               	movwf	?_vfprintf& (0+255),b
  2491   004744                     
  2492                           ; BSR set to: 0
  2493   004744  0012               	return		;funcret
  2494   004746                     __end_of_vfprintf:
  2495                           	callstack 0
  2496                           
  2497 ;; *************** function _vfpfcnvrt *****************
  2498 ;; Defined at:
  2499 ;;		line 1007 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2500 ;; Parameters:    Size  Location     Type
  2501 ;;  fp              2   66[COMRAM] PTR struct _IO_FILE
  2502 ;;		 -> sprintf@f(11), 
  2503 ;;  fmt             2   68[COMRAM] PTR PTR unsigned char 
  2504 ;;		 -> vfprintf@cfmt(2), 
  2505 ;;  ap              2   70[COMRAM] PTR PTR void 
  2506 ;;		 -> sprintf@ap(2), 
  2507 ;; Auto vars:     Size  Location     Type
  2508 ;;  convarg         8   74[COMRAM] struct .
  2509 ;;  cp              2   82[COMRAM] PTR unsigned char 
  2510 ;;		 -> STR_2(15), STR_1(22), 
  2511 ;;  i               2    0        int 
  2512 ;;  done            2    0        int 
  2513 ;;  c               1    0        unsigned char 
  2514 ;; Return value:  Size  Location     Type
  2515 ;;                  1    wreg      void 
  2516 ;; Registers used:
  2517 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2518 ;; Tracked objects:
  2519 ;;		On entry : 0/0
  2520 ;;		On exit  : 0/0
  2521 ;;		Unchanged: 0/0
  2522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2523 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2524 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2525 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2526 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2527 ;;Total ram usage:       18 bytes
  2528 ;; Hardware stack levels used: 1
  2529 ;; Hardware stack levels required when called: 7
  2530 ;; This function calls:
  2531 ;;		_dtoa
  2532 ;;		_fputc
  2533 ;; This function is called by:
  2534 ;;		_vfprintf
  2535 ;; This function uses a non-reentrant model
  2536 ;;
  2537                           
  2538                           	psect	text5
  2539   003596                     __ptext5:
  2540                           	callstack 0
  2541   003596                     _vfpfcnvrt:
  2542                           	callstack 20
  2543   003596                     
  2544                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1007: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1008: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\dopr
      +                          nt.c: 1009:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 1010:     int done, i;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1016:  } convarg;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1019:     if ((*fmt)[0] == '%') {
  2545   003596  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2546   00359A  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2547   00359E  CFDE FFF6          	movff	postinc2,tblptrl
  2548   0035A2  CFDD FFF7          	movff	postdec2,tblptrh
  2549   0035A6                     	if	0	;tblptru may be non-zero
  2550   0035A6                     	endif
  2551   0035A6                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2552   0035A6  0E00               	movlw	low (__mediumconst shr (0+16))
  2553   0035A8  6EF8               	movwf	tblptru,c
  2554   0035AA                     	endif
  2555   0035AA  0008               	tblrd		*
  2556   0035AC  50F5               	movf	tablat,w,c
  2557   0035AE  0A25               	xorlw	37
  2558   0035B0  A4D8               	btfss	status,2,c
  2559   0035B2  EFDD  F01A         	goto	u5471
  2560   0035B6  EFDF  F01A         	goto	u5470
  2561   0035BA                     u5471:
  2562   0035BA  EF63  F01B         	goto	l5060
  2563   0035BE                     u5470:
  2564   0035BE                     
  2565                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1020:         ++*
      +                          fmt;
  2566   0035BE  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2567   0035C2  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2568   0035C6  2ADE               	incf	postinc2,f,c
  2569   0035C8  0E00               	movlw	0
  2570   0035CA  22DD               	addwfc	postdec2,f,c
  2571   0035CC                     
  2572                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1022:         fla
      +                          gs = width = 0;
  2573   0035CC  0E00               	movlw	0
  2574   0035CE  0100               	movlb	0	; () banked
  2575   0035D0  6F75               	movwf	(_width+1)& (0+255),b
  2576   0035D2  0E00               	movlw	0
  2577   0035D4  6F74               	movwf	_width& (0+255),b
  2578   0035D6  C074  F07C         	movff	_width,_flags
  2579   0035DA                     
  2580                           ; BSR set to: 0
  2581                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1023:         pre
      +                          c = -1;
  2582   0035DA  6976               	setf	_prec& (0+255),b
  2583   0035DC  6977               	setf	(_prec+1)& (0+255),b
  2584   0035DE                     
  2585                           ; BSR set to: 0
  2586                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1117:   cp = *fmt
      +                          ;
  2587   0035DE  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2588   0035E2  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2589   0035E6  CFDE F053          	movff	postinc2,vfpfcnvrt@cp
  2590   0035EA  CFDD F054          	movff	postdec2,vfpfcnvrt@cp+1
  2591   0035EE                     
  2592                           ; BSR set to: 0
  2593                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1187:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  2594   0035EE  C053  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2595   0035F2  C054  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  2596   0035F6                     	if	0	;tblptru may be non-zero
  2597   0035F6                     	endif
  2598   0035F6                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2599   0035F6  0E00               	movlw	low (__mediumconst shr (0+16))
  2600   0035F8  6EF8               	movwf	tblptru,c
  2601   0035FA                     	endif
  2602   0035FA  0008               	tblrd		*
  2603   0035FC  50F5               	movf	tablat,w,c
  2604   0035FE  0A64               	xorlw	100
  2605   003600  B4D8               	btfsc	status,2,c
  2606   003602  EF05  F01B         	goto	u5481
  2607   003606  EF07  F01B         	goto	u5480
  2608   00360A                     u5481:
  2609   00360A  EF17  F01B         	goto	l5050
  2610   00360E                     u5480:
  2611   00360E                     
  2612                           ; BSR set to: 0
  2613   00360E  C053  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2614   003612  C054  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  2615   003616                     	if	0	;tblptru may be non-zero
  2616   003616                     	endif
  2617   003616                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2618   003616  0E00               	movlw	low (__mediumconst shr (0+16))
  2619   003618  6EF8               	movwf	tblptru,c
  2620   00361A                     	endif
  2621   00361A  0008               	tblrd		*
  2622   00361C  50F5               	movf	tablat,w,c
  2623   00361E  0A69               	xorlw	105
  2624   003620  A4D8               	btfss	status,2,c
  2625   003622  EF15  F01B         	goto	u5491
  2626   003626  EF17  F01B         	goto	u5490
  2627   00362A                     u5491:
  2628   00362A  EF5A  F01B         	goto	l5056
  2629   00362E                     u5490:
  2630   00362E                     l5050:
  2631                           
  2632                           ; BSR set to: 0
  2633                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1230:    convarg.
      +                          ll = (long long)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  2634   00362E  C047  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2635   003632  C048  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2636   003636  CFDF F049          	movff	indf2,??_vfpfcnvrt
  2637   00363A  0E02               	movlw	2
  2638   00363C  26DE               	addwf	postinc2,f,c
  2639   00363E  CFDF F04A          	movff	indf2,??_vfpfcnvrt+1
  2640   003642  0E00               	movlw	0
  2641   003644  22DD               	addwfc	postdec2,f,c
  2642   003646  C049  FFD9         	movff	??_vfpfcnvrt,fsr2l
  2643   00364A  C04A  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2644   00364E  CFDE F04B          	movff	postinc2,vfpfcnvrt@convarg
  2645   003652  CFDD F04C          	movff	postdec2,vfpfcnvrt@convarg+1
  2646   003656  0E00               	movlw	0
  2647   003658  BE4C               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  2648   00365A  0EFF               	movlw	-1
  2649   00365C  6E4D               	movwf	(vfpfcnvrt@convarg+2)^0,c
  2650   00365E  6E4E               	movwf	(vfpfcnvrt@convarg+3)^0,c
  2651   003660  6E4F               	movwf	(vfpfcnvrt@convarg+4)^0,c
  2652   003662  6E50               	movwf	(vfpfcnvrt@convarg+5)^0,c
  2653   003664  6E51               	movwf	(vfpfcnvrt@convarg+6)^0,c
  2654   003666  6E52               	movwf	(vfpfcnvrt@convarg+7)^0,c
  2655                           
  2656                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1232:    *fmt = c
      +                          p+1;
  2657   003668  0E01               	movlw	1
  2658   00366A  2453               	addwf	vfpfcnvrt@cp^0,w,c
  2659   00366C  6E49               	movwf	??_vfpfcnvrt^0,c
  2660   00366E  0E00               	movlw	0
  2661   003670  2054               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  2662   003672  6E4A               	movwf	(??_vfpfcnvrt+1)^0,c
  2663   003674  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2664   003678  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2665   00367C  C049  FFDE         	movff	??_vfpfcnvrt,postinc2
  2666   003680  C04A  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  2667   003684                     
  2668                           ; BSR set to: 0
  2669                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1233:    return (
      +                          void) dtoa(fp, convarg.ll);;	Return value of _vfpfcnvrt is never used
  2670   003684  C043  F020         	movff	vfpfcnvrt@fp,dtoa@fp
  2671   003688  C044  F021         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  2672   00368C  C04B  F022         	movff	vfpfcnvrt@convarg,dtoa@d
  2673   003690  C04C  F023         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  2674   003694  C04D  F024         	movff	vfpfcnvrt@convarg+2,dtoa@d+2
  2675   003698  C04E  F025         	movff	vfpfcnvrt@convarg+3,dtoa@d+3
  2676   00369C  C04F  F026         	movff	vfpfcnvrt@convarg+4,dtoa@d+4
  2677   0036A0  C050  F027         	movff	vfpfcnvrt@convarg+5,dtoa@d+5
  2678   0036A4  C051  F028         	movff	vfpfcnvrt@convarg+6,dtoa@d+6
  2679   0036A8  C052  F029         	movff	vfpfcnvrt@convarg+7,dtoa@d+7
  2680   0036AC  EC59  F015         	call	_dtoa	;wreg free
  2681   0036B0  EF79  F01B         	goto	l1282
  2682   0036B4                     l5056:
  2683                           
  2684                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1509:         ++*
      +                          fmt;
  2685   0036B4  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2686   0036B8  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2687   0036BC  2ADE               	incf	postinc2,f,c
  2688   0036BE  0E00               	movlw	0
  2689   0036C0  22DD               	addwfc	postdec2,f,c
  2690   0036C2  EF79  F01B         	goto	l1282
  2691   0036C6                     l5060:
  2692                           
  2693                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1514:     fputc((
      +                          int)(*fmt)[0], fp);
  2694   0036C6  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2695   0036CA  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2696   0036CE  CFDE FFF6          	movff	postinc2,tblptrl
  2697   0036D2  CFDD FFF7          	movff	postdec2,tblptrh
  2698   0036D6                     	if	0	;tblptru may be non-zero
  2699   0036D6                     	endif
  2700   0036D6                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2701   0036D6  0E00               	movlw	low (__mediumconst shr (0+16))
  2702   0036D8  6EF8               	movwf	tblptru,c
  2703   0036DA                     	endif
  2704   0036DA  0008               	tblrd		*
  2705   0036DC  50F5               	movf	tablat,w,c
  2706   0036DE  6E05               	movwf	fputc@c^0,c
  2707   0036E0  6A06               	clrf	(fputc@c+1)^0,c
  2708   0036E2  C043  F007         	movff	vfpfcnvrt@fp,fputc@fp
  2709   0036E6  C044  F008         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2710   0036EA  EC39  F021         	call	_fputc	;wreg free
  2711   0036EE  EF5A  F01B         	goto	l5056
  2712   0036F2                     l1282:
  2713   0036F2  0012               	return		;funcret
  2714   0036F4                     __end_of_vfpfcnvrt:
  2715                           	callstack 0
  2716                           
  2717 ;; *************** function _dtoa *****************
  2718 ;; Defined at:
  2719 ;;		line 443 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2720 ;; Parameters:    Size  Location     Type
  2721 ;;  fp              2   31[COMRAM] PTR struct _IO_FILE
  2722 ;;		 -> sprintf@f(11), 
  2723 ;;  d               8   33[COMRAM] long long 
  2724 ;; Auto vars:     Size  Location     Type
  2725 ;;  n               8   55[COMRAM] long long 
  2726 ;;  i               2   64[COMRAM] int 
  2727 ;;  w               2   53[COMRAM] int 
  2728 ;;  p               2   51[COMRAM] int 
  2729 ;;  s               1   63[COMRAM] unsigned char 
  2730 ;; Return value:  Size  Location     Type
  2731 ;;                  1    wreg      void 
  2732 ;; Registers used:
  2733 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2734 ;; Tracked objects:
  2735 ;;		On entry : 0/0
  2736 ;;		On exit  : 0/0
  2737 ;;		Unchanged: 0/0
  2738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2739 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2740 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2741 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2742 ;;      Totals:        35       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2743 ;;Total ram usage:       35 bytes
  2744 ;; Hardware stack levels used: 1
  2745 ;; Hardware stack levels required when called: 6
  2746 ;; This function calls:
  2747 ;;		___aodiv
  2748 ;;		___aomod
  2749 ;;		_abs
  2750 ;;		_pad
  2751 ;; This function is called by:
  2752 ;;		_vfpfcnvrt
  2753 ;; This function uses a non-reentrant model
  2754 ;;
  2755                           
  2756                           	psect	text6
  2757   002AB2                     __ptext6:
  2758                           	callstack 0
  2759   002AB2                     _dtoa:
  2760                           	callstack 20
  2761   002AB2                     
  2762                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 443: static void 
      +                          dtoa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\
      +                          doprnt.c: 444: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          45:  char s;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 446: 
      +                              int i, p, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          47:     long long n;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 450:     n = d;
  2763   002AB2  C022  F038         	movff	dtoa@d,dtoa@n
  2764   002AB6  C023  F039         	movff	dtoa@d+1,dtoa@n+1
  2765   002ABA  C024  F03A         	movff	dtoa@d+2,dtoa@n+2
  2766   002ABE  C025  F03B         	movff	dtoa@d+3,dtoa@n+3
  2767   002AC2  C026  F03C         	movff	dtoa@d+4,dtoa@n+4
  2768   002AC6  C027  F03D         	movff	dtoa@d+5,dtoa@n+5
  2769   002ACA  C028  F03E         	movff	dtoa@d+6,dtoa@n+6
  2770   002ACE  C029  F03F         	movff	dtoa@d+7,dtoa@n+7
  2771   002AD2                     
  2772                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 451:     s = n < 
      +                          0 ? 1 : 0;
  2773   002AD2  BE3F               	btfsc	(dtoa@n+7)^0,7,c
  2774   002AD4  EF6E  F015         	goto	u5371
  2775   002AD8  EF71  F015         	goto	u5370
  2776   002ADC                     u5371:
  2777   002ADC  0E01               	movlw	1
  2778   002ADE  EF72  F015         	goto	u5380
  2779   002AE2                     u5370:
  2780   002AE2  0E00               	movlw	0
  2781   002AE4                     u5380:
  2782   002AE4  6E40               	movwf	dtoa@s^0,c
  2783   002AE6                     
  2784                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 452:     if (s) {
  2785   002AE6  5040               	movf	dtoa@s^0,w,c
  2786   002AE8  B4D8               	btfsc	status,2,c
  2787   002AEA  EF79  F015         	goto	u5391
  2788   002AEE  EF7B  F015         	goto	u5390
  2789   002AF2                     u5391:
  2790   002AF2  EF8B  F015         	goto	l4992
  2791   002AF6                     u5390:
  2792   002AF6                     
  2793                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 453:         n = 
      +                          -n;
  2794   002AF6  1E3F               	comf	(dtoa@n+7)^0,f,c
  2795   002AF8  1E3E               	comf	(dtoa@n+6)^0,f,c
  2796   002AFA  1E3D               	comf	(dtoa@n+5)^0,f,c
  2797   002AFC  1E3C               	comf	(dtoa@n+4)^0,f,c
  2798   002AFE  1E3B               	comf	(dtoa@n+3)^0,f,c
  2799   002B00  1E3A               	comf	(dtoa@n+2)^0,f,c
  2800   002B02  1E39               	comf	(dtoa@n+1)^0,f,c
  2801   002B04  6C38               	negf	dtoa@n^0,c
  2802   002B06  0E00               	movlw	0
  2803   002B08  2239               	addwfc	(dtoa@n+1)^0,f,c
  2804   002B0A  223A               	addwfc	(dtoa@n+2)^0,f,c
  2805   002B0C  223B               	addwfc	(dtoa@n+3)^0,f,c
  2806   002B0E  223C               	addwfc	(dtoa@n+4)^0,f,c
  2807   002B10  223D               	addwfc	(dtoa@n+5)^0,f,c
  2808   002B12  223E               	addwfc	(dtoa@n+6)^0,f,c
  2809   002B14  223F               	addwfc	(dtoa@n+7)^0,f,c
  2810   002B16                     l4992:
  2811                           
  2812                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 462:     p = (0 <
      +                           prec) ? prec : 1;
  2813   002B16  0100               	movlb	0	; () banked
  2814   002B18  BF77               	btfsc	(_prec+1)& (0+255),7,b
  2815   002B1A  EF99  F015         	goto	u5400
  2816   002B1E  5177               	movf	(_prec+1)& (0+255),w,b
  2817   002B20  E106               	bnz	u5401
  2818   002B22  0576               	decf	_prec& (0+255),w,b
  2819   002B24  B0D8               	btfsc	status,0,c
  2820   002B26  EF97  F015         	goto	u5401
  2821   002B2A  EF99  F015         	goto	u5400
  2822   002B2E                     u5401:
  2823   002B2E  EF9F  F015         	goto	l1261
  2824   002B32                     u5400:
  2825   002B32                     
  2826                           ; BSR set to: 0
  2827   002B32  0E00               	movlw	0
  2828   002B34  6E35               	movwf	(dtoa@p+1)^0,c
  2829   002B36  0E01               	movlw	1
  2830   002B38  6E34               	movwf	dtoa@p^0,c
  2831   002B3A  EFA3  F015         	goto	l1263
  2832   002B3E                     l1261:
  2833                           
  2834                           ; BSR set to: 0
  2835   002B3E  C076  F034         	movff	_prec,dtoa@p
  2836   002B42  C077  F035         	movff	_prec+1,dtoa@p+1
  2837   002B46                     l1263:
  2838                           
  2839                           ; BSR set to: 0
  2840                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 463:     w = widt
      +                          h;
  2841   002B46  C074  F036         	movff	_width,dtoa@w
  2842   002B4A  C075  F037         	movff	_width+1,dtoa@w+1
  2843   002B4E                     
  2844                           ; BSR set to: 0
  2845                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 464:     if (s
  2846   002B4E  5040               	movf	dtoa@s^0,w,c
  2847   002B50  B4D8               	btfsc	status,2,c
  2848   002B52  EFAD  F015         	goto	u5411
  2849   002B56  EFAF  F015         	goto	u5410
  2850   002B5A                     u5411:
  2851   002B5A  EFC6  F015         	goto	l1264
  2852   002B5E                     u5410:
  2853   002B5E                     
  2854                           ; BSR set to: 0
  2855                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 468:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 469:         --w;
  2856   002B5E  0636               	decf	dtoa@w^0,f,c
  2857   002B60  A0D8               	btfss	status,0,c
  2858   002B62  0637               	decf	(dtoa@w+1)^0,f,c
  2859   002B64                     
  2860                           ; BSR set to: 0
  2861                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 470:   s = s ? '-
      +                          ' : '+';
  2862   002B64  5040               	movf	dtoa@s^0,w,c
  2863   002B66  A4D8               	btfss	status,2,c
  2864   002B68  EFB8  F015         	goto	u5421
  2865   002B6C  EFBA  F015         	goto	u5420
  2866   002B70                     u5421:
  2867   002B70  EFC0  F015         	goto	l5004
  2868   002B74                     u5420:
  2869   002B74                     
  2870                           ; BSR set to: 0
  2871   002B74  0E00               	movlw	0
  2872   002B76  6E33               	movwf	(_dtoa$2702+1)^0,c
  2873   002B78  0E2B               	movlw	43
  2874   002B7A  6E32               	movwf	_dtoa$2702^0,c
  2875   002B7C  EFC4  F015         	goto	l5006
  2876   002B80                     l5004:
  2877                           
  2878                           ; BSR set to: 0
  2879   002B80  0E00               	movlw	0
  2880   002B82  6E33               	movwf	(_dtoa$2702+1)^0,c
  2881   002B84  0E2D               	movlw	45
  2882   002B86  6E32               	movwf	_dtoa$2702^0,c
  2883   002B88                     l5006:
  2884                           
  2885                           ; BSR set to: 0
  2886   002B88  C032  F040         	movff	_dtoa$2702,dtoa@s
  2887   002B8C                     l1264:
  2888                           
  2889                           ; BSR set to: 0
  2890                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 480:     i = size
      +                          of(dbuf) - 1;
  2891   002B8C  0E00               	movlw	0
  2892   002B8E  6E42               	movwf	(dtoa@i+1)^0,c
  2893   002B90  0E1F               	movlw	31
  2894   002B92  6E41               	movwf	dtoa@i^0,c
  2895   002B94                     
  2896                           ; BSR set to: 0
  2897                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 481:     dbuf[i] 
      +                          = '\0';
  2898   002B94  0E00               	movlw	0
  2899   002B96  6F9C               	movwf	(_dbuf+31)& (0+255),b
  2900                           
  2901                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  2902   002B98  EF4A  F016         	goto	l5020
  2903   002B9C                     l5010:
  2904                           
  2905                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 486:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 487:         --i;
  2906   002B9C  0641               	decf	dtoa@i^0,f,c
  2907   002B9E  A0D8               	btfss	status,0,c
  2908   002BA0  0642               	decf	(dtoa@i+1)^0,f,c
  2909   002BA2                     
  2910                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 488:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  2911   002BA2  0E7D               	movlw	low _dbuf
  2912   002BA4  2441               	addwf	dtoa@i^0,w,c
  2913   002BA6  6ED9               	movwf	fsr2l,c
  2914   002BA8  0E00               	movlw	high _dbuf
  2915   002BAA  2042               	addwfc	(dtoa@i+1)^0,w,c
  2916   002BAC  6EDA               	movwf	fsr2h,c
  2917   002BAE  C038  F005         	movff	dtoa@n,___aomod@dividend
  2918   002BB2  C039  F006         	movff	dtoa@n+1,___aomod@dividend+1
  2919   002BB6  C03A  F007         	movff	dtoa@n+2,___aomod@dividend+2
  2920   002BBA  C03B  F008         	movff	dtoa@n+3,___aomod@dividend+3
  2921   002BBE  C03C  F009         	movff	dtoa@n+4,___aomod@dividend+4
  2922   002BC2  C03D  F00A         	movff	dtoa@n+5,___aomod@dividend+5
  2923   002BC6  C03E  F00B         	movff	dtoa@n+6,___aomod@dividend+6
  2924   002BCA  C03F  F00C         	movff	dtoa@n+7,___aomod@dividend+7
  2925   002BCE  0E0A               	movlw	10
  2926   002BD0  6E0D               	movwf	___aomod@divisor^0,c
  2927   002BD2  0E00               	movlw	0
  2928   002BD4  6E0E               	movwf	(___aomod@divisor+1)^0,c
  2929   002BD6  0E00               	movlw	0
  2930   002BD8  6E0F               	movwf	(___aomod@divisor+2)^0,c
  2931   002BDA  0E00               	movlw	0
  2932   002BDC  6E10               	movwf	(___aomod@divisor+3)^0,c
  2933   002BDE  0E00               	movlw	0
  2934   002BE0  6E11               	movwf	(___aomod@divisor+4)^0,c
  2935   002BE2  0E00               	movlw	0
  2936   002BE4  6E12               	movwf	(___aomod@divisor+5)^0,c
  2937   002BE6  0E00               	movlw	0
  2938   002BE8  6E13               	movwf	(___aomod@divisor+6)^0,c
  2939   002BEA  0E00               	movlw	0
  2940   002BEC  6E14               	movwf	(___aomod@divisor+7)^0,c
  2941   002BEE  EC19  F01A         	call	___aomod	;wreg free
  2942   002BF2  C005  F02A         	movff	?___aomod,??_dtoa
  2943   002BF6  C006  F02B         	movff	?___aomod+1,??_dtoa+1
  2944   002BFA  C007  F02C         	movff	?___aomod+2,??_dtoa+2
  2945   002BFE  C008  F02D         	movff	?___aomod+3,??_dtoa+3
  2946   002C02  C009  F02E         	movff	?___aomod+4,??_dtoa+4
  2947   002C06  C00A  F02F         	movff	?___aomod+5,??_dtoa+5
  2948   002C0A  C00B  F030         	movff	?___aomod+6,??_dtoa+6
  2949   002C0E  C00C  F031         	movff	?___aomod+7,??_dtoa+7
  2950   002C12  C02A  F017         	movff	??_dtoa,abs@a
  2951   002C16  C02B  F018         	movff	??_dtoa+1,abs@a+1
  2952   002C1A  ECF7  F024         	call	_abs	;wreg free
  2953   002C1E  5017               	movf	?_abs^0,w,c
  2954   002C20  0F30               	addlw	48
  2955   002C22  6EDF               	movwf	indf2,c
  2956   002C24                     
  2957                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 489:         --p;
  2958   002C24  0634               	decf	dtoa@p^0,f,c
  2959   002C26  A0D8               	btfss	status,0,c
  2960   002C28  0635               	decf	(dtoa@p+1)^0,f,c
  2961   002C2A                     
  2962                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 490:         --w;
  2963   002C2A  0636               	decf	dtoa@w^0,f,c
  2964   002C2C  A0D8               	btfss	status,0,c
  2965   002C2E  0637               	decf	(dtoa@w+1)^0,f,c
  2966   002C30                     
  2967                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 491:         n = 
      +                          n / 10;
  2968   002C30  C038  F005         	movff	dtoa@n,___aodiv@dividend
  2969   002C34  C039  F006         	movff	dtoa@n+1,___aodiv@dividend+1
  2970   002C38  C03A  F007         	movff	dtoa@n+2,___aodiv@dividend+2
  2971   002C3C  C03B  F008         	movff	dtoa@n+3,___aodiv@dividend+3
  2972   002C40  C03C  F009         	movff	dtoa@n+4,___aodiv@dividend+4
  2973   002C44  C03D  F00A         	movff	dtoa@n+5,___aodiv@dividend+5
  2974   002C48  C03E  F00B         	movff	dtoa@n+6,___aodiv@dividend+6
  2975   002C4C  C03F  F00C         	movff	dtoa@n+7,___aodiv@dividend+7
  2976   002C50  0E0A               	movlw	10
  2977   002C52  6E0D               	movwf	___aodiv@divisor^0,c
  2978   002C54  0E00               	movlw	0
  2979   002C56  6E0E               	movwf	(___aodiv@divisor+1)^0,c
  2980   002C58  0E00               	movlw	0
  2981   002C5A  6E0F               	movwf	(___aodiv@divisor+2)^0,c
  2982   002C5C  0E00               	movlw	0
  2983   002C5E  6E10               	movwf	(___aodiv@divisor+3)^0,c
  2984   002C60  0E00               	movlw	0
  2985   002C62  6E11               	movwf	(___aodiv@divisor+4)^0,c
  2986   002C64  0E00               	movlw	0
  2987   002C66  6E12               	movwf	(___aodiv@divisor+5)^0,c
  2988   002C68  0E00               	movlw	0
  2989   002C6A  6E13               	movwf	(___aodiv@divisor+6)^0,c
  2990   002C6C  0E00               	movlw	0
  2991   002C6E  6E14               	movwf	(___aodiv@divisor+7)^0,c
  2992   002C70  EC9F  F018         	call	___aodiv	;wreg free
  2993   002C74  C005  F038         	movff	?___aodiv,dtoa@n
  2994   002C78  C006  F039         	movff	?___aodiv+1,dtoa@n+1
  2995   002C7C  C007  F03A         	movff	?___aodiv+2,dtoa@n+2
  2996   002C80  C008  F03B         	movff	?___aodiv+3,dtoa@n+3
  2997   002C84  C009  F03C         	movff	?___aodiv+4,dtoa@n+4
  2998   002C88  C00A  F03D         	movff	?___aodiv+5,dtoa@n+5
  2999   002C8C  C00B  F03E         	movff	?___aodiv+6,dtoa@n+6
  3000   002C90  C00C  F03F         	movff	?___aodiv+7,dtoa@n+7
  3001   002C94                     l5020:
  3002                           
  3003                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  3004   002C94  BE42               	btfsc	(dtoa@i+1)^0,7,c
  3005   002C96  EF55  F016         	goto	u5431
  3006   002C9A  5042               	movf	(dtoa@i+1)^0,w,c
  3007   002C9C  E108               	bnz	u5430
  3008   002C9E  0441               	decf	dtoa@i^0,w,c
  3009   002CA0  A0D8               	btfss	status,0,c
  3010   002CA2  EF55  F016         	goto	u5431
  3011   002CA6  EF57  F016         	goto	u5430
  3012   002CAA                     u5431:
  3013   002CAA  EF73  F016         	goto	l5026
  3014   002CAE                     u5430:
  3015   002CAE  5038               	movf	dtoa@n^0,w,c
  3016   002CB0  1039               	iorwf	(dtoa@n+1)^0,w,c
  3017   002CB2  103A               	iorwf	(dtoa@n+2)^0,w,c
  3018   002CB4  103B               	iorwf	(dtoa@n+3)^0,w,c
  3019   002CB6  103C               	iorwf	(dtoa@n+4)^0,w,c
  3020   002CB8  103D               	iorwf	(dtoa@n+5)^0,w,c
  3021   002CBA  103E               	iorwf	(dtoa@n+6)^0,w,c
  3022   002CBC  103F               	iorwf	(dtoa@n+7)^0,w,c
  3023   002CBE  A4D8               	btfss	status,2,c
  3024   002CC0  EF64  F016         	goto	u5441
  3025   002CC4  EF66  F016         	goto	u5440
  3026   002CC8                     u5441:
  3027   002CC8  EFCE  F015         	goto	l5010
  3028   002CCC                     u5440:
  3029   002CCC  BE35               	btfsc	(dtoa@p+1)^0,7,c
  3030   002CCE  EF73  F016         	goto	u5450
  3031   002CD2  5035               	movf	(dtoa@p+1)^0,w,c
  3032   002CD4  E106               	bnz	u5451
  3033   002CD6  0434               	decf	dtoa@p^0,w,c
  3034   002CD8  B0D8               	btfsc	status,0,c
  3035   002CDA  EF71  F016         	goto	u5451
  3036   002CDE  EF73  F016         	goto	u5450
  3037   002CE2                     u5451:
  3038   002CE2  EFCE  F015         	goto	l5010
  3039   002CE6                     u5450:
  3040   002CE6                     l5026:
  3041                           
  3042                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 495:     if (s !=
      +                           0) {
  3043   002CE6  5040               	movf	dtoa@s^0,w,c
  3044   002CE8  B4D8               	btfsc	status,2,c
  3045   002CEA  EF79  F016         	goto	u5461
  3046   002CEE  EF7B  F016         	goto	u5460
  3047   002CF2                     u5461:
  3048   002CF2  EF86  F016         	goto	l5032
  3049   002CF6                     u5460:
  3050   002CF6                     
  3051                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 496:         --i;
  3052   002CF6  0641               	decf	dtoa@i^0,f,c
  3053   002CF8  A0D8               	btfss	status,0,c
  3054   002CFA  0642               	decf	(dtoa@i+1)^0,f,c
  3055   002CFC                     
  3056                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 497:         dbuf
      +                          [i] = s;
  3057   002CFC  0E7D               	movlw	low _dbuf
  3058   002CFE  2441               	addwf	dtoa@i^0,w,c
  3059   002D00  6ED9               	movwf	fsr2l,c
  3060   002D02  0E00               	movlw	high _dbuf
  3061   002D04  2042               	addwfc	(dtoa@i+1)^0,w,c
  3062   002D06  6EDA               	movwf	fsr2h,c
  3063   002D08  C040  FFDF         	movff	dtoa@s,indf2
  3064   002D0C                     l5032:
  3065                           
  3066                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 501:     return (
      +                          void) pad(fp, &dbuf[i], w);
  3067   002D0C  C020  F015         	movff	dtoa@fp,pad@fp
  3068   002D10  C021  F016         	movff	dtoa@fp+1,pad@fp+1
  3069   002D14  0E7D               	movlw	low _dbuf
  3070   002D16  2441               	addwf	dtoa@i^0,w,c
  3071   002D18  6E17               	movwf	pad@buf^0,c
  3072   002D1A  0E00               	movlw	high _dbuf
  3073   002D1C  2042               	addwfc	(dtoa@i+1)^0,w,c
  3074   002D1E  6E18               	movwf	(pad@buf+1)^0,c
  3075   002D20  C036  F019         	movff	dtoa@w,pad@p
  3076   002D24  C037  F01A         	movff	dtoa@w+1,pad@p+1
  3077   002D28  ECD3  F022         	call	_pad	;wreg free
  3078   002D2C  0012               	return		;funcret
  3079   002D2E                     __end_of_dtoa:
  3080                           	callstack 0
  3081                           
  3082 ;; *************** function _pad *****************
  3083 ;; Defined at:
  3084 ;;		line 133 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  3085 ;; Parameters:    Size  Location     Type
  3086 ;;  fp              2   20[COMRAM] PTR struct _IO_FILE
  3087 ;;		 -> sprintf@f(11), 
  3088 ;;  buf             2   22[COMRAM] PTR unsigned char 
  3089 ;;		 -> dbuf(32), 
  3090 ;;  p               2   24[COMRAM] int 
  3091 ;; Auto vars:     Size  Location     Type
  3092 ;;  w               2   29[COMRAM] int 
  3093 ;;  i               2   27[COMRAM] int 
  3094 ;; Return value:  Size  Location     Type
  3095 ;;                  1    wreg      void 
  3096 ;; Registers used:
  3097 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3098 ;; Tracked objects:
  3099 ;;		On entry : 0/0
  3100 ;;		On exit  : 0/0
  3101 ;;		Unchanged: 0/0
  3102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3103 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3104 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3105 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3106 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3107 ;;Total ram usage:       11 bytes
  3108 ;; Hardware stack levels used: 1
  3109 ;; Hardware stack levels required when called: 5
  3110 ;; This function calls:
  3111 ;;		_fputc
  3112 ;;		_fputs
  3113 ;; This function is called by:
  3114 ;;		_dtoa
  3115 ;; This function uses a non-reentrant model
  3116 ;;
  3117                           
  3118                           	psect	text7
  3119   0045A6                     __ptext7:
  3120                           	callstack 0
  3121   0045A6                     _pad:
  3122                           	callstack 20
  3123   0045A6                     
  3124                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 133: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\com
      +                          mon\doprnt.c: 134: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 135:     int i, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt
      +                          .c: 145:     w = (p < 0) ? 0 : p;
  3125   0045A6  BE1A               	btfsc	(pad@p+1)^0,7,c
  3126   0045A8  EFD8  F022         	goto	u5341
  3127   0045AC  EFDA  F022         	goto	u5340
  3128   0045B0                     u5341:
  3129   0045B0  EFE0  F022         	goto	l4970
  3130   0045B4                     u5340:
  3131   0045B4  C019  F01E         	movff	pad@p,pad@w
  3132   0045B8  C01A  F01F         	movff	pad@p+1,pad@w+1
  3133   0045BC  EFE4  F022         	goto	l1252
  3134   0045C0                     l4970:
  3135   0045C0  0E00               	movlw	0
  3136   0045C2  6E1F               	movwf	(pad@w+1)^0,c
  3137   0045C4  0E00               	movlw	0
  3138   0045C6  6E1E               	movwf	pad@w^0,c
  3139   0045C8                     l1252:
  3140                           
  3141                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 146:     i = 0;
  3142   0045C8  0E00               	movlw	0
  3143   0045CA  6E1D               	movwf	(pad@i+1)^0,c
  3144   0045CC  0E00               	movlw	0
  3145   0045CE  6E1C               	movwf	pad@i^0,c
  3146                           
  3147                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  3148   0045D0  EFF6  F022         	goto	l4976
  3149   0045D4                     l4972:
  3150                           
  3151                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 148:         fput
      +                          c(' ', fp);
  3152   0045D4  0E00               	movlw	0
  3153   0045D6  6E06               	movwf	(fputc@c+1)^0,c
  3154   0045D8  0E20               	movlw	32
  3155   0045DA  6E05               	movwf	fputc@c^0,c
  3156   0045DC  C015  F007         	movff	pad@fp,fputc@fp
  3157   0045E0  C016  F008         	movff	pad@fp+1,fputc@fp+1
  3158   0045E4  EC39  F021         	call	_fputc	;wreg free
  3159   0045E8                     
  3160                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 149:         ++i;
  3161   0045E8  4A1C               	infsnz	pad@i^0,f,c
  3162   0045EA  2A1D               	incf	(pad@i+1)^0,f,c
  3163   0045EC                     l4976:
  3164                           
  3165                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  3166   0045EC  501E               	movf	pad@w^0,w,c
  3167   0045EE  5C1C               	subwf	pad@i^0,w,c
  3168   0045F0  501D               	movf	(pad@i+1)^0,w,c
  3169   0045F2  0A80               	xorlw	128
  3170   0045F4  6E1B               	movwf	??_pad^0,c
  3171   0045F6  501F               	movf	(pad@w+1)^0,w,c
  3172   0045F8  0A80               	xorlw	128
  3173   0045FA  581B               	subwfb	??_pad^0,w,c
  3174   0045FC  A0D8               	btfss	status,0,c
  3175   0045FE  EF03  F023         	goto	u5351
  3176   004602  EF05  F023         	goto	u5350
  3177   004606                     u5351:
  3178   004606  EFEA  F022         	goto	l4972
  3179   00460A                     u5350:
  3180   00460A                     
  3181                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 156:         fput
      +                          s((const char *)buf, fp);
  3182   00460A  C017  F00E         	movff	pad@buf,fputs@s
  3183   00460E  C018  F00F         	movff	pad@buf+1,fputs@s+1
  3184   004612  C015  F010         	movff	pad@fp,fputs@fp
  3185   004616  C016  F011         	movff	pad@fp+1,fputs@fp+1
  3186   00461A  ECB4  F024         	call	_fputs	;wreg free
  3187   00461E  0012               	return		;funcret
  3188   004620                     __end_of_pad:
  3189                           	callstack 0
  3190                           
  3191 ;; *************** function _fputs *****************
  3192 ;; Defined at:
  3193 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputs.c"
  3194 ;; Parameters:    Size  Location     Type
  3195 ;;  s               2   13[COMRAM] PTR const unsigned char 
  3196 ;;		 -> dbuf(32), 
  3197 ;;  fp              2   15[COMRAM] PTR struct _IO_FILE
  3198 ;;		 -> sprintf@f(11), 
  3199 ;; Auto vars:     Size  Location     Type
  3200 ;;  i               2   18[COMRAM] int 
  3201 ;;  c               1   17[COMRAM] unsigned char 
  3202 ;; Return value:  Size  Location     Type
  3203 ;;                  2   13[COMRAM] int 
  3204 ;; Registers used:
  3205 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3206 ;; Tracked objects:
  3207 ;;		On entry : 0/0
  3208 ;;		On exit  : 0/0
  3209 ;;		Unchanged: 0/0
  3210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3211 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3212 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3214 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3215 ;;Total ram usage:        7 bytes
  3216 ;; Hardware stack levels used: 1
  3217 ;; Hardware stack levels required when called: 4
  3218 ;; This function calls:
  3219 ;;		_fputc
  3220 ;; This function is called by:
  3221 ;;		_pad
  3222 ;; This function uses a non-reentrant model
  3223 ;;
  3224                           
  3225                           	psect	text8
  3226   004968                     __ptext8:
  3227                           	callstack 0
  3228   004968                     _fputs:
  3229                           	callstack 20
  3230   004968  0E00               	movlw	0
  3231   00496A  6E14               	movwf	(fputs@i+1)^0,c
  3232   00496C  0E00               	movlw	0
  3233   00496E  6E13               	movwf	fputs@i^0,c
  3234   004970  EFC5  F024         	goto	l4884
  3235   004974                     l4880:
  3236   004974  C012  F005         	movff	fputs@c,fputc@c
  3237   004978  6A06               	clrf	(fputc@c+1)^0,c
  3238   00497A  C010  F007         	movff	fputs@fp,fputc@fp
  3239   00497E  C011  F008         	movff	fputs@fp+1,fputc@fp+1
  3240   004982  EC39  F021         	call	_fputc	;wreg free
  3241   004986  4A13               	infsnz	fputs@i^0,f,c
  3242   004988  2A14               	incf	(fputs@i+1)^0,f,c
  3243   00498A                     l4884:
  3244   00498A  5013               	movf	fputs@i^0,w,c
  3245   00498C  240E               	addwf	fputs@s^0,w,c
  3246   00498E  6ED9               	movwf	fsr2l,c
  3247   004990  5014               	movf	(fputs@i+1)^0,w,c
  3248   004992  200F               	addwfc	(fputs@s+1)^0,w,c
  3249   004994  6EDA               	movwf	fsr2h,c
  3250   004996  50DF               	movf	indf2,w,c
  3251   004998  6E12               	movwf	fputs@c^0,c
  3252   00499A  5012               	movf	fputs@c^0,w,c
  3253   00499C  A4D8               	btfss	status,2,c
  3254   00499E  EFD3  F024         	goto	u5201
  3255   0049A2  EFD5  F024         	goto	u5200
  3256   0049A6                     u5201:
  3257   0049A6  EFBA  F024         	goto	l4880
  3258   0049AA                     u5200:
  3259   0049AA  0012               	return		;funcret
  3260   0049AC                     __end_of_fputs:
  3261                           	callstack 0
  3262                           
  3263 ;; *************** function _fputc *****************
  3264 ;; Defined at:
  3265 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputc.c"
  3266 ;; Parameters:    Size  Location     Type
  3267 ;;  c               2    4[COMRAM] int 
  3268 ;;  fp              2    6[COMRAM] PTR struct _IO_FILE
  3269 ;;		 -> sprintf@f(11), 
  3270 ;; Auto vars:     Size  Location     Type
  3271 ;;		None
  3272 ;; Return value:  Size  Location     Type
  3273 ;;                  2    4[COMRAM] int 
  3274 ;; Registers used:
  3275 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3276 ;; Tracked objects:
  3277 ;;		On entry : 0/0
  3278 ;;		On exit  : 0/0
  3279 ;;		Unchanged: 0/0
  3280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3281 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3282 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3283 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3284 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3285 ;;Total ram usage:        9 bytes
  3286 ;; Hardware stack levels used: 1
  3287 ;; Hardware stack levels required when called: 3
  3288 ;; This function calls:
  3289 ;;		_putch
  3290 ;; This function is called by:
  3291 ;;		_pad
  3292 ;;		_vfpfcnvrt
  3293 ;;		_fputs
  3294 ;; This function uses a non-reentrant model
  3295 ;;
  3296                           
  3297                           	psect	text9
  3298   004272                     __ptext9:
  3299                           	callstack 0
  3300   004272                     _fputc:
  3301                           	callstack 23
  3302   004272  5007               	movf	fputc@fp^0,w,c
  3303   004274  1008               	iorwf	(fputc@fp+1)^0,w,c
  3304   004276  B4D8               	btfsc	status,2,c
  3305   004278  EF40  F021         	goto	u5161
  3306   00427C  EF42  F021         	goto	u5160
  3307   004280                     u5161:
  3308   004280  EF4B  F021         	goto	l4868
  3309   004284                     u5160:
  3310   004284  5007               	movf	fputc@fp^0,w,c
  3311   004286  1008               	iorwf	(fputc@fp+1)^0,w,c
  3312   004288  A4D8               	btfss	status,2,c
  3313   00428A  EF49  F021         	goto	u5171
  3314   00428E  EF4B  F021         	goto	u5170
  3315   004292                     u5171:
  3316   004292  EF50  F021         	goto	l4870
  3317   004296                     u5170:
  3318   004296                     l4868:
  3319   004296  5005               	movf	fputc@c^0,w,c
  3320   004298  EC28  F026         	call	_putch
  3321   00429C  EF9D  F021         	goto	l1307
  3322   0042A0                     l4870:
  3323   0042A0  EE20 F009          	lfsr	2,9
  3324   0042A4  5007               	movf	fputc@fp^0,w,c
  3325   0042A6  26D9               	addwf	fsr2l,f,c
  3326   0042A8  5008               	movf	(fputc@fp+1)^0,w,c
  3327   0042AA  22DA               	addwfc	fsr2h,f,c
  3328   0042AC  50DE               	movf	postinc2,w,c
  3329   0042AE  10DE               	iorwf	postinc2,w,c
  3330   0042B0  B4D8               	btfsc	status,2,c
  3331   0042B2  EF5D  F021         	goto	u5181
  3332   0042B6  EF5F  F021         	goto	u5180
  3333   0042BA                     u5181:
  3334   0042BA  EF7A  F021         	goto	l4874
  3335   0042BE                     u5180:
  3336   0042BE  EE20 F009          	lfsr	2,9
  3337   0042C2  5007               	movf	fputc@fp^0,w,c
  3338   0042C4  26D9               	addwf	fsr2l,f,c
  3339   0042C6  5008               	movf	(fputc@fp+1)^0,w,c
  3340   0042C8  22DA               	addwfc	fsr2h,f,c
  3341   0042CA  EE10 F003          	lfsr	1,3
  3342   0042CE  5007               	movf	fputc@fp^0,w,c
  3343   0042D0  26E1               	addwf	fsr1l,f,c
  3344   0042D2  5008               	movf	(fputc@fp+1)^0,w,c
  3345   0042D4  22E2               	addwfc	fsr1h,f,c
  3346   0042D6  50DE               	movf	postinc2,w,c
  3347   0042D8  5CE6               	subwf	postinc1,w,c
  3348   0042DA  50E6               	movf	postinc1,w,c
  3349   0042DC  0A80               	xorlw	128
  3350   0042DE  6E0D               	movwf	(??_fputc+4)^0,c
  3351   0042E0  50DE               	movf	postinc2,w,c
  3352   0042E2  0A80               	xorlw	128
  3353   0042E4  580D               	subwfb	(??_fputc+4)^0,w,c
  3354   0042E6  B0D8               	btfsc	status,0,c
  3355   0042E8  EF78  F021         	goto	u5191
  3356   0042EC  EF7A  F021         	goto	u5190
  3357   0042F0                     u5191:
  3358   0042F0  EF9D  F021         	goto	l1307
  3359   0042F4                     u5190:
  3360   0042F4                     l4874:
  3361   0042F4  EE20 F003          	lfsr	2,3
  3362   0042F8  5007               	movf	fputc@fp^0,w,c
  3363   0042FA  26D9               	addwf	fsr2l,f,c
  3364   0042FC  5008               	movf	(fputc@fp+1)^0,w,c
  3365   0042FE  22DA               	addwfc	fsr2h,f,c
  3366   004300  CFDE F009          	movff	postinc2,??_fputc
  3367   004304  CFDD F00A          	movff	postdec2,??_fputc+1
  3368   004308  C007  FFD9         	movff	fputc@fp,fsr2l
  3369   00430C  C008  FFDA         	movff	fputc@fp+1,fsr2h
  3370   004310  CFDE F00B          	movff	postinc2,??_fputc+2
  3371   004314  CFDD F00C          	movff	postdec2,??_fputc+3
  3372   004318  5009               	movf	??_fputc^0,w,c
  3373   00431A  240B               	addwf	(??_fputc+2)^0,w,c
  3374   00431C  6ED9               	movwf	fsr2l,c
  3375   00431E  500A               	movf	(??_fputc+1)^0,w,c
  3376   004320  200C               	addwfc	(??_fputc+3)^0,w,c
  3377   004322  6EDA               	movwf	fsr2h,c
  3378   004324  C005  FFDF         	movff	fputc@c,indf2
  3379   004328  EE20 F003          	lfsr	2,3
  3380   00432C  5007               	movf	fputc@fp^0,w,c
  3381   00432E  26D9               	addwf	fsr2l,f,c
  3382   004330  5008               	movf	(fputc@fp+1)^0,w,c
  3383   004332  22DA               	addwfc	fsr2h,f,c
  3384   004334  2ADE               	incf	postinc2,f,c
  3385   004336  0E00               	movlw	0
  3386   004338  22DD               	addwfc	postdec2,f,c
  3387   00433A                     l1307:
  3388   00433A  0012               	return		;funcret
  3389   00433C                     __end_of_fputc:
  3390                           	callstack 0
  3391                           
  3392 ;; *************** function _putch *****************
  3393 ;; Defined at:
  3394 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\putch.c"
  3395 ;; Parameters:    Size  Location     Type
  3396 ;;  c               1    wreg     unsigned char 
  3397 ;; Auto vars:     Size  Location     Type
  3398 ;;  c               1    0[COMRAM] unsigned char 
  3399 ;; Return value:  Size  Location     Type
  3400 ;;                  1    wreg      void 
  3401 ;; Registers used:
  3402 ;;		wreg
  3403 ;; Tracked objects:
  3404 ;;		On entry : 0/0
  3405 ;;		On exit  : 0/0
  3406 ;;		Unchanged: 0/0
  3407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3409 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3411 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3412 ;;Total ram usage:        0 bytes
  3413 ;; Hardware stack levels used: 1
  3414 ;; Hardware stack levels required when called: 2
  3415 ;; This function calls:
  3416 ;;		Nothing
  3417 ;; This function is called by:
  3418 ;;		_fputc
  3419 ;; This function uses a non-reentrant model
  3420 ;;
  3421                           
  3422                           	psect	text10
  3423   004C50                     __ptext10:
  3424                           	callstack 0
  3425   004C50                     _putch:
  3426                           	callstack 23
  3427   004C50  0012               	return		;funcret
  3428   004C52                     __end_of_putch:
  3429                           	callstack 0
  3430                           
  3431 ;; *************** function _abs *****************
  3432 ;; Defined at:
  3433 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\abs.c"
  3434 ;; Parameters:    Size  Location     Type
  3435 ;;  a               2   22[COMRAM] int 
  3436 ;; Auto vars:     Size  Location     Type
  3437 ;;		None
  3438 ;; Return value:  Size  Location     Type
  3439 ;;                  2   22[COMRAM] int 
  3440 ;; Registers used:
  3441 ;;		wreg, status,2, status,0
  3442 ;; Tracked objects:
  3443 ;;		On entry : 0/0
  3444 ;;		On exit  : 0/0
  3445 ;;		Unchanged: 0/0
  3446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3447 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3448 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3449 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3450 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3451 ;;Total ram usage:        4 bytes
  3452 ;; Hardware stack levels used: 1
  3453 ;; Hardware stack levels required when called: 2
  3454 ;; This function calls:
  3455 ;;		Nothing
  3456 ;; This function is called by:
  3457 ;;		_dtoa
  3458 ;; This function uses a non-reentrant model
  3459 ;;
  3460                           
  3461                           	psect	text11
  3462   0049EE                     __ptext11:
  3463                           	callstack 0
  3464   0049EE                     _abs:
  3465                           	callstack 23
  3466   0049EE  BE18               	btfsc	(abs@a+1)^0,7,c
  3467   0049F0  EF04  F025         	goto	u5360
  3468   0049F4  5018               	movf	(abs@a+1)^0,w,c
  3469   0049F6  E106               	bnz	u5361
  3470   0049F8  0417               	decf	abs@a^0,w,c
  3471   0049FA  B0D8               	btfsc	status,0,c
  3472   0049FC  EF02  F025         	goto	u5361
  3473   004A00  EF04  F025         	goto	u5360
  3474   004A04                     u5361:
  3475   004A04  EF12  F025         	goto	l1292
  3476   004A08                     u5360:
  3477   004A08  C017  F019         	movff	abs@a,??_abs
  3478   004A0C  C018  F01A         	movff	abs@a+1,??_abs+1
  3479   004A10  1E19               	comf	??_abs^0,f,c
  3480   004A12  1E1A               	comf	(??_abs+1)^0,f,c
  3481   004A14  4A19               	infsnz	??_abs^0,f,c
  3482   004A16  2A1A               	incf	(??_abs+1)^0,f,c
  3483   004A18  C019  F017         	movff	??_abs,?_abs
  3484   004A1C  C01A  F018         	movff	??_abs+1,?_abs+1
  3485   004A20  EF16  F025         	goto	l1295
  3486   004A24                     l1292:
  3487   004A24  C017  F017         	movff	abs@a,?_abs
  3488   004A28  C018  F018         	movff	abs@a+1,?_abs+1
  3489   004A2C                     l1295:
  3490   004A2C  0012               	return		;funcret
  3491   004A2E                     __end_of_abs:
  3492                           	callstack 0
  3493                           
  3494 ;; *************** function ___aomod *****************
  3495 ;; Defined at:
  3496 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aomod.c"
  3497 ;; Parameters:    Size  Location     Type
  3498 ;;  dividend        8    4[COMRAM] long long 
  3499 ;;  divisor         8   12[COMRAM] long long 
  3500 ;; Auto vars:     Size  Location     Type
  3501 ;;  sign            1   21[COMRAM] unsigned char 
  3502 ;;  counter         1   20[COMRAM] unsigned char 
  3503 ;; Return value:  Size  Location     Type
  3504 ;;                  8    4[COMRAM] long long 
  3505 ;; Registers used:
  3506 ;;		wreg, status,2, status,0
  3507 ;; Tracked objects:
  3508 ;;		On entry : 0/0
  3509 ;;		On exit  : 0/0
  3510 ;;		Unchanged: 0/0
  3511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3512 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3513 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3515 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3516 ;;Total ram usage:       18 bytes
  3517 ;; Hardware stack levels used: 1
  3518 ;; Hardware stack levels required when called: 2
  3519 ;; This function calls:
  3520 ;;		Nothing
  3521 ;; This function is called by:
  3522 ;;		_dtoa
  3523 ;; This function uses a non-reentrant model
  3524 ;;
  3525                           
  3526                           	psect	text12
  3527   003432                     __ptext12:
  3528                           	callstack 0
  3529   003432                     ___aomod:
  3530                           	callstack 23
  3531   003432  0E00               	movlw	0
  3532   003434  6E16               	movwf	___aomod@sign^0,c
  3533   003436  BE0C               	btfsc	(___aomod@dividend+7)^0,7,c
  3534   003438  EF22  F01A         	goto	u5280
  3535   00343C  EF20  F01A         	goto	u5281
  3536   003440                     u5281:
  3537   003440  EF34  F01A         	goto	l4938
  3538   003444                     u5280:
  3539   003444  1E0C               	comf	(___aomod@dividend+7)^0,f,c
  3540   003446  1E0B               	comf	(___aomod@dividend+6)^0,f,c
  3541   003448  1E0A               	comf	(___aomod@dividend+5)^0,f,c
  3542   00344A  1E09               	comf	(___aomod@dividend+4)^0,f,c
  3543   00344C  1E08               	comf	(___aomod@dividend+3)^0,f,c
  3544   00344E  1E07               	comf	(___aomod@dividend+2)^0,f,c
  3545   003450  1E06               	comf	(___aomod@dividend+1)^0,f,c
  3546   003452  6C05               	negf	___aomod@dividend^0,c
  3547   003454  0E00               	movlw	0
  3548   003456  2206               	addwfc	(___aomod@dividend+1)^0,f,c
  3549   003458  2207               	addwfc	(___aomod@dividend+2)^0,f,c
  3550   00345A  2208               	addwfc	(___aomod@dividend+3)^0,f,c
  3551   00345C  2209               	addwfc	(___aomod@dividend+4)^0,f,c
  3552   00345E  220A               	addwfc	(___aomod@dividend+5)^0,f,c
  3553   003460  220B               	addwfc	(___aomod@dividend+6)^0,f,c
  3554   003462  220C               	addwfc	(___aomod@dividend+7)^0,f,c
  3555   003464  0E01               	movlw	1
  3556   003466  6E16               	movwf	___aomod@sign^0,c
  3557   003468                     l4938:
  3558   003468  BE14               	btfsc	(___aomod@divisor+7)^0,7,c
  3559   00346A  EF3B  F01A         	goto	u5290
  3560   00346E  EF39  F01A         	goto	u5291
  3561   003472                     u5291:
  3562   003472  EF4B  F01A         	goto	l4942
  3563   003476                     u5290:
  3564   003476  1E14               	comf	(___aomod@divisor+7)^0,f,c
  3565   003478  1E13               	comf	(___aomod@divisor+6)^0,f,c
  3566   00347A  1E12               	comf	(___aomod@divisor+5)^0,f,c
  3567   00347C  1E11               	comf	(___aomod@divisor+4)^0,f,c
  3568   00347E  1E10               	comf	(___aomod@divisor+3)^0,f,c
  3569   003480  1E0F               	comf	(___aomod@divisor+2)^0,f,c
  3570   003482  1E0E               	comf	(___aomod@divisor+1)^0,f,c
  3571   003484  6C0D               	negf	___aomod@divisor^0,c
  3572   003486  0E00               	movlw	0
  3573   003488  220E               	addwfc	(___aomod@divisor+1)^0,f,c
  3574   00348A  220F               	addwfc	(___aomod@divisor+2)^0,f,c
  3575   00348C  2210               	addwfc	(___aomod@divisor+3)^0,f,c
  3576   00348E  2211               	addwfc	(___aomod@divisor+4)^0,f,c
  3577   003490  2212               	addwfc	(___aomod@divisor+5)^0,f,c
  3578   003492  2213               	addwfc	(___aomod@divisor+6)^0,f,c
  3579   003494  2214               	addwfc	(___aomod@divisor+7)^0,f,c
  3580   003496                     l4942:
  3581   003496  500D               	movf	___aomod@divisor^0,w,c
  3582   003498  100E               	iorwf	(___aomod@divisor+1)^0,w,c
  3583   00349A  100F               	iorwf	(___aomod@divisor+2)^0,w,c
  3584   00349C  1010               	iorwf	(___aomod@divisor+3)^0,w,c
  3585   00349E  1011               	iorwf	(___aomod@divisor+4)^0,w,c
  3586   0034A0  1012               	iorwf	(___aomod@divisor+5)^0,w,c
  3587   0034A2  1013               	iorwf	(___aomod@divisor+6)^0,w,c
  3588   0034A4  1014               	iorwf	(___aomod@divisor+7)^0,w,c
  3589   0034A6  B4D8               	btfsc	status,2,c
  3590   0034A8  EF58  F01A         	goto	u5301
  3591   0034AC  EF5A  F01A         	goto	u5300
  3592   0034B0                     u5301:
  3593   0034B0  EFA2  F01A         	goto	l4958
  3594   0034B4                     u5300:
  3595   0034B4  0E01               	movlw	1
  3596   0034B6  6E15               	movwf	___aomod@counter^0,c
  3597   0034B8  EF68  F01A         	goto	l4948
  3598   0034BC                     l4946:
  3599   0034BC  90D8               	bcf	status,0,c
  3600   0034BE  360D               	rlcf	___aomod@divisor^0,f,c
  3601   0034C0  360E               	rlcf	(___aomod@divisor+1)^0,f,c
  3602   0034C2  360F               	rlcf	(___aomod@divisor+2)^0,f,c
  3603   0034C4  3610               	rlcf	(___aomod@divisor+3)^0,f,c
  3604   0034C6  3611               	rlcf	(___aomod@divisor+4)^0,f,c
  3605   0034C8  3612               	rlcf	(___aomod@divisor+5)^0,f,c
  3606   0034CA  3613               	rlcf	(___aomod@divisor+6)^0,f,c
  3607   0034CC  3614               	rlcf	(___aomod@divisor+7)^0,f,c
  3608   0034CE  2A15               	incf	___aomod@counter^0,f,c
  3609   0034D0                     l4948:
  3610   0034D0  AE14               	btfss	(___aomod@divisor+7)^0,7,c
  3611   0034D2  EF6D  F01A         	goto	u5311
  3612   0034D6  EF6F  F01A         	goto	u5310
  3613   0034DA                     u5311:
  3614   0034DA  EF5E  F01A         	goto	l4946
  3615   0034DE                     u5310:
  3616   0034DE                     l4950:
  3617   0034DE  500D               	movf	___aomod@divisor^0,w,c
  3618   0034E0  5C05               	subwf	___aomod@dividend^0,w,c
  3619   0034E2  500E               	movf	(___aomod@divisor+1)^0,w,c
  3620   0034E4  5806               	subwfb	(___aomod@dividend+1)^0,w,c
  3621   0034E6  500F               	movf	(___aomod@divisor+2)^0,w,c
  3622   0034E8  5807               	subwfb	(___aomod@dividend+2)^0,w,c
  3623   0034EA  5010               	movf	(___aomod@divisor+3)^0,w,c
  3624   0034EC  5808               	subwfb	(___aomod@dividend+3)^0,w,c
  3625   0034EE  5011               	movf	(___aomod@divisor+4)^0,w,c
  3626   0034F0  5809               	subwfb	(___aomod@dividend+4)^0,w,c
  3627   0034F2  5012               	movf	(___aomod@divisor+5)^0,w,c
  3628   0034F4  580A               	subwfb	(___aomod@dividend+5)^0,w,c
  3629   0034F6  5013               	movf	(___aomod@divisor+6)^0,w,c
  3630   0034F8  580B               	subwfb	(___aomod@dividend+6)^0,w,c
  3631   0034FA  5014               	movf	(___aomod@divisor+7)^0,w,c
  3632   0034FC  580C               	subwfb	(___aomod@dividend+7)^0,w,c
  3633   0034FE  A0D8               	btfss	status,0,c
  3634   003500  EF84  F01A         	goto	u5321
  3635   003504  EF86  F01A         	goto	u5320
  3636   003508                     u5321:
  3637   003508  EF96  F01A         	goto	l4954
  3638   00350C                     u5320:
  3639   00350C  500D               	movf	___aomod@divisor^0,w,c
  3640   00350E  5E05               	subwf	___aomod@dividend^0,f,c
  3641   003510  500E               	movf	(___aomod@divisor+1)^0,w,c
  3642   003512  5A06               	subwfb	(___aomod@dividend+1)^0,f,c
  3643   003514  500F               	movf	(___aomod@divisor+2)^0,w,c
  3644   003516  5A07               	subwfb	(___aomod@dividend+2)^0,f,c
  3645   003518  5010               	movf	(___aomod@divisor+3)^0,w,c
  3646   00351A  5A08               	subwfb	(___aomod@dividend+3)^0,f,c
  3647   00351C  5011               	movf	(___aomod@divisor+4)^0,w,c
  3648   00351E  5A09               	subwfb	(___aomod@dividend+4)^0,f,c
  3649   003520  5012               	movf	(___aomod@divisor+5)^0,w,c
  3650   003522  5A0A               	subwfb	(___aomod@dividend+5)^0,f,c
  3651   003524  5013               	movf	(___aomod@divisor+6)^0,w,c
  3652   003526  5A0B               	subwfb	(___aomod@dividend+6)^0,f,c
  3653   003528  5014               	movf	(___aomod@divisor+7)^0,w,c
  3654   00352A  5A0C               	subwfb	(___aomod@dividend+7)^0,f,c
  3655   00352C                     l4954:
  3656   00352C  90D8               	bcf	status,0,c
  3657   00352E  3214               	rrcf	(___aomod@divisor+7)^0,f,c
  3658   003530  3213               	rrcf	(___aomod@divisor+6)^0,f,c
  3659   003532  3212               	rrcf	(___aomod@divisor+5)^0,f,c
  3660   003534  3211               	rrcf	(___aomod@divisor+4)^0,f,c
  3661   003536  3210               	rrcf	(___aomod@divisor+3)^0,f,c
  3662   003538  320F               	rrcf	(___aomod@divisor+2)^0,f,c
  3663   00353A  320E               	rrcf	(___aomod@divisor+1)^0,f,c
  3664   00353C  320D               	rrcf	___aomod@divisor^0,f,c
  3665   00353E  2E15               	decfsz	___aomod@counter^0,f,c
  3666   003540  EF6F  F01A         	goto	l4950
  3667   003544                     l4958:
  3668   003544  5016               	movf	___aomod@sign^0,w,c
  3669   003546  B4D8               	btfsc	status,2,c
  3670   003548  EFA8  F01A         	goto	u5331
  3671   00354C  EFAA  F01A         	goto	u5330
  3672   003550                     u5331:
  3673   003550  EFBA  F01A         	goto	l4962
  3674   003554                     u5330:
  3675   003554  1E0C               	comf	(___aomod@dividend+7)^0,f,c
  3676   003556  1E0B               	comf	(___aomod@dividend+6)^0,f,c
  3677   003558  1E0A               	comf	(___aomod@dividend+5)^0,f,c
  3678   00355A  1E09               	comf	(___aomod@dividend+4)^0,f,c
  3679   00355C  1E08               	comf	(___aomod@dividend+3)^0,f,c
  3680   00355E  1E07               	comf	(___aomod@dividend+2)^0,f,c
  3681   003560  1E06               	comf	(___aomod@dividend+1)^0,f,c
  3682   003562  6C05               	negf	___aomod@dividend^0,c
  3683   003564  0E00               	movlw	0
  3684   003566  2206               	addwfc	(___aomod@dividend+1)^0,f,c
  3685   003568  2207               	addwfc	(___aomod@dividend+2)^0,f,c
  3686   00356A  2208               	addwfc	(___aomod@dividend+3)^0,f,c
  3687   00356C  2209               	addwfc	(___aomod@dividend+4)^0,f,c
  3688   00356E  220A               	addwfc	(___aomod@dividend+5)^0,f,c
  3689   003570  220B               	addwfc	(___aomod@dividend+6)^0,f,c
  3690   003572  220C               	addwfc	(___aomod@dividend+7)^0,f,c
  3691   003574                     l4962:
  3692   003574  C005  F005         	movff	___aomod@dividend,?___aomod
  3693   003578  C006  F006         	movff	___aomod@dividend+1,?___aomod+1
  3694   00357C  C007  F007         	movff	___aomod@dividend+2,?___aomod+2
  3695   003580  C008  F008         	movff	___aomod@dividend+3,?___aomod+3
  3696   003584  C009  F009         	movff	___aomod@dividend+4,?___aomod+4
  3697   003588  C00A  F00A         	movff	___aomod@dividend+5,?___aomod+5
  3698   00358C  C00B  F00B         	movff	___aomod@dividend+6,?___aomod+6
  3699   003590  C00C  F00C         	movff	___aomod@dividend+7,?___aomod+7
  3700   003594  0012               	return		;funcret
  3701   003596                     __end_of___aomod:
  3702                           	callstack 0
  3703                           
  3704 ;; *************** function ___aodiv *****************
  3705 ;; Defined at:
  3706 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aodiv.c"
  3707 ;; Parameters:    Size  Location     Type
  3708 ;;  dividend        8    4[COMRAM] long long 
  3709 ;;  divisor         8   12[COMRAM] long long 
  3710 ;; Auto vars:     Size  Location     Type
  3711 ;;  quotient        8   22[COMRAM] long long 
  3712 ;;  sign            1   21[COMRAM] unsigned char 
  3713 ;;  counter         1   20[COMRAM] unsigned char 
  3714 ;; Return value:  Size  Location     Type
  3715 ;;                  8    4[COMRAM] long long 
  3716 ;; Registers used:
  3717 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3718 ;; Tracked objects:
  3719 ;;		On entry : 0/0
  3720 ;;		On exit  : 0/0
  3721 ;;		Unchanged: 0/0
  3722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3723 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3724 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3726 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3727 ;;Total ram usage:       26 bytes
  3728 ;; Hardware stack levels used: 1
  3729 ;; Hardware stack levels required when called: 2
  3730 ;; This function calls:
  3731 ;;		Nothing
  3732 ;; This function is called by:
  3733 ;;		_dtoa
  3734 ;; This function uses a non-reentrant model
  3735 ;;
  3736                           
  3737                           	psect	text13
  3738   00313E                     __ptext13:
  3739                           	callstack 0
  3740   00313E                     ___aodiv:
  3741                           	callstack 23
  3742   00313E  0E00               	movlw	0
  3743   003140  6E16               	movwf	___aodiv@sign^0,c
  3744   003142  BE14               	btfsc	(___aodiv@divisor+7)^0,7,c
  3745   003144  EFA8  F018         	goto	u5210
  3746   003148  EFA6  F018         	goto	u5211
  3747   00314C                     u5211:
  3748   00314C  EFBA  F018         	goto	l4894
  3749   003150                     u5210:
  3750   003150  1E14               	comf	(___aodiv@divisor+7)^0,f,c
  3751   003152  1E13               	comf	(___aodiv@divisor+6)^0,f,c
  3752   003154  1E12               	comf	(___aodiv@divisor+5)^0,f,c
  3753   003156  1E11               	comf	(___aodiv@divisor+4)^0,f,c
  3754   003158  1E10               	comf	(___aodiv@divisor+3)^0,f,c
  3755   00315A  1E0F               	comf	(___aodiv@divisor+2)^0,f,c
  3756   00315C  1E0E               	comf	(___aodiv@divisor+1)^0,f,c
  3757   00315E  6C0D               	negf	___aodiv@divisor^0,c
  3758   003160  0E00               	movlw	0
  3759   003162  220E               	addwfc	(___aodiv@divisor+1)^0,f,c
  3760   003164  220F               	addwfc	(___aodiv@divisor+2)^0,f,c
  3761   003166  2210               	addwfc	(___aodiv@divisor+3)^0,f,c
  3762   003168  2211               	addwfc	(___aodiv@divisor+4)^0,f,c
  3763   00316A  2212               	addwfc	(___aodiv@divisor+5)^0,f,c
  3764   00316C  2213               	addwfc	(___aodiv@divisor+6)^0,f,c
  3765   00316E  2214               	addwfc	(___aodiv@divisor+7)^0,f,c
  3766   003170  0E01               	movlw	1
  3767   003172  6E16               	movwf	___aodiv@sign^0,c
  3768   003174                     l4894:
  3769   003174  BE0C               	btfsc	(___aodiv@dividend+7)^0,7,c
  3770   003176  EFC1  F018         	goto	u5220
  3771   00317A  EFBF  F018         	goto	u5221
  3772   00317E                     u5221:
  3773   00317E  EFD3  F018         	goto	l4900
  3774   003182                     u5220:
  3775   003182  1E0C               	comf	(___aodiv@dividend+7)^0,f,c
  3776   003184  1E0B               	comf	(___aodiv@dividend+6)^0,f,c
  3777   003186  1E0A               	comf	(___aodiv@dividend+5)^0,f,c
  3778   003188  1E09               	comf	(___aodiv@dividend+4)^0,f,c
  3779   00318A  1E08               	comf	(___aodiv@dividend+3)^0,f,c
  3780   00318C  1E07               	comf	(___aodiv@dividend+2)^0,f,c
  3781   00318E  1E06               	comf	(___aodiv@dividend+1)^0,f,c
  3782   003190  6C05               	negf	___aodiv@dividend^0,c
  3783   003192  0E00               	movlw	0
  3784   003194  2206               	addwfc	(___aodiv@dividend+1)^0,f,c
  3785   003196  2207               	addwfc	(___aodiv@dividend+2)^0,f,c
  3786   003198  2208               	addwfc	(___aodiv@dividend+3)^0,f,c
  3787   00319A  2209               	addwfc	(___aodiv@dividend+4)^0,f,c
  3788   00319C  220A               	addwfc	(___aodiv@dividend+5)^0,f,c
  3789   00319E  220B               	addwfc	(___aodiv@dividend+6)^0,f,c
  3790   0031A0  220C               	addwfc	(___aodiv@dividend+7)^0,f,c
  3791   0031A2  0E01               	movlw	1
  3792   0031A4  1A16               	xorwf	___aodiv@sign^0,f,c
  3793   0031A6                     l4900:
  3794   0031A6  EE20  F017         	lfsr	2,___aodiv@quotient
  3795   0031AA  0E07               	movlw	7
  3796   0031AC                     u5231:
  3797   0031AC  6ADE               	clrf	postinc2,c
  3798   0031AE  06E8               	decf	wreg,f,c
  3799   0031B0  E2FD               	bc	u5231
  3800   0031B2  500D               	movf	___aodiv@divisor^0,w,c
  3801   0031B4  100E               	iorwf	(___aodiv@divisor+1)^0,w,c
  3802   0031B6  100F               	iorwf	(___aodiv@divisor+2)^0,w,c
  3803   0031B8  1010               	iorwf	(___aodiv@divisor+3)^0,w,c
  3804   0031BA  1011               	iorwf	(___aodiv@divisor+4)^0,w,c
  3805   0031BC  1012               	iorwf	(___aodiv@divisor+5)^0,w,c
  3806   0031BE  1013               	iorwf	(___aodiv@divisor+6)^0,w,c
  3807   0031C0  1014               	iorwf	(___aodiv@divisor+7)^0,w,c
  3808   0031C2  B4D8               	btfsc	status,2,c
  3809   0031C4  EFE6  F018         	goto	u5241
  3810   0031C8  EFE8  F018         	goto	u5240
  3811   0031CC                     u5241:
  3812   0031CC  EF3A  F019         	goto	l4922
  3813   0031D0                     u5240:
  3814   0031D0  0E01               	movlw	1
  3815   0031D2  6E15               	movwf	___aodiv@counter^0,c
  3816   0031D4  EFF6  F018         	goto	l4908
  3817   0031D8                     l4906:
  3818   0031D8  90D8               	bcf	status,0,c
  3819   0031DA  360D               	rlcf	___aodiv@divisor^0,f,c
  3820   0031DC  360E               	rlcf	(___aodiv@divisor+1)^0,f,c
  3821   0031DE  360F               	rlcf	(___aodiv@divisor+2)^0,f,c
  3822   0031E0  3610               	rlcf	(___aodiv@divisor+3)^0,f,c
  3823   0031E2  3611               	rlcf	(___aodiv@divisor+4)^0,f,c
  3824   0031E4  3612               	rlcf	(___aodiv@divisor+5)^0,f,c
  3825   0031E6  3613               	rlcf	(___aodiv@divisor+6)^0,f,c
  3826   0031E8  3614               	rlcf	(___aodiv@divisor+7)^0,f,c
  3827   0031EA  2A15               	incf	___aodiv@counter^0,f,c
  3828   0031EC                     l4908:
  3829   0031EC  AE14               	btfss	(___aodiv@divisor+7)^0,7,c
  3830   0031EE  EFFB  F018         	goto	u5251
  3831   0031F2  EFFD  F018         	goto	u5250
  3832   0031F6                     u5251:
  3833   0031F6  EFEC  F018         	goto	l4906
  3834   0031FA                     u5250:
  3835   0031FA                     l4910:
  3836   0031FA  90D8               	bcf	status,0,c
  3837   0031FC  3617               	rlcf	___aodiv@quotient^0,f,c
  3838   0031FE  3618               	rlcf	(___aodiv@quotient+1)^0,f,c
  3839   003200  3619               	rlcf	(___aodiv@quotient+2)^0,f,c
  3840   003202  361A               	rlcf	(___aodiv@quotient+3)^0,f,c
  3841   003204  361B               	rlcf	(___aodiv@quotient+4)^0,f,c
  3842   003206  361C               	rlcf	(___aodiv@quotient+5)^0,f,c
  3843   003208  361D               	rlcf	(___aodiv@quotient+6)^0,f,c
  3844   00320A  361E               	rlcf	(___aodiv@quotient+7)^0,f,c
  3845   00320C  500D               	movf	___aodiv@divisor^0,w,c
  3846   00320E  5C05               	subwf	___aodiv@dividend^0,w,c
  3847   003210  500E               	movf	(___aodiv@divisor+1)^0,w,c
  3848   003212  5806               	subwfb	(___aodiv@dividend+1)^0,w,c
  3849   003214  500F               	movf	(___aodiv@divisor+2)^0,w,c
  3850   003216  5807               	subwfb	(___aodiv@dividend+2)^0,w,c
  3851   003218  5010               	movf	(___aodiv@divisor+3)^0,w,c
  3852   00321A  5808               	subwfb	(___aodiv@dividend+3)^0,w,c
  3853   00321C  5011               	movf	(___aodiv@divisor+4)^0,w,c
  3854   00321E  5809               	subwfb	(___aodiv@dividend+4)^0,w,c
  3855   003220  5012               	movf	(___aodiv@divisor+5)^0,w,c
  3856   003222  580A               	subwfb	(___aodiv@dividend+5)^0,w,c
  3857   003224  5013               	movf	(___aodiv@divisor+6)^0,w,c
  3858   003226  580B               	subwfb	(___aodiv@dividend+6)^0,w,c
  3859   003228  5014               	movf	(___aodiv@divisor+7)^0,w,c
  3860   00322A  580C               	subwfb	(___aodiv@dividend+7)^0,w,c
  3861   00322C  A0D8               	btfss	status,0,c
  3862   00322E  EF1B  F019         	goto	u5261
  3863   003232  EF1D  F019         	goto	u5260
  3864   003236                     u5261:
  3865   003236  EF2E  F019         	goto	l4918
  3866   00323A                     u5260:
  3867   00323A  500D               	movf	___aodiv@divisor^0,w,c
  3868   00323C  5E05               	subwf	___aodiv@dividend^0,f,c
  3869   00323E  500E               	movf	(___aodiv@divisor+1)^0,w,c
  3870   003240  5A06               	subwfb	(___aodiv@dividend+1)^0,f,c
  3871   003242  500F               	movf	(___aodiv@divisor+2)^0,w,c
  3872   003244  5A07               	subwfb	(___aodiv@dividend+2)^0,f,c
  3873   003246  5010               	movf	(___aodiv@divisor+3)^0,w,c
  3874   003248  5A08               	subwfb	(___aodiv@dividend+3)^0,f,c
  3875   00324A  5011               	movf	(___aodiv@divisor+4)^0,w,c
  3876   00324C  5A09               	subwfb	(___aodiv@dividend+4)^0,f,c
  3877   00324E  5012               	movf	(___aodiv@divisor+5)^0,w,c
  3878   003250  5A0A               	subwfb	(___aodiv@dividend+5)^0,f,c
  3879   003252  5013               	movf	(___aodiv@divisor+6)^0,w,c
  3880   003254  5A0B               	subwfb	(___aodiv@dividend+6)^0,f,c
  3881   003256  5014               	movf	(___aodiv@divisor+7)^0,w,c
  3882   003258  5A0C               	subwfb	(___aodiv@dividend+7)^0,f,c
  3883   00325A  8017               	bsf	___aodiv@quotient^0,0,c
  3884   00325C                     l4918:
  3885   00325C  90D8               	bcf	status,0,c
  3886   00325E  3214               	rrcf	(___aodiv@divisor+7)^0,f,c
  3887   003260  3213               	rrcf	(___aodiv@divisor+6)^0,f,c
  3888   003262  3212               	rrcf	(___aodiv@divisor+5)^0,f,c
  3889   003264  3211               	rrcf	(___aodiv@divisor+4)^0,f,c
  3890   003266  3210               	rrcf	(___aodiv@divisor+3)^0,f,c
  3891   003268  320F               	rrcf	(___aodiv@divisor+2)^0,f,c
  3892   00326A  320E               	rrcf	(___aodiv@divisor+1)^0,f,c
  3893   00326C  320D               	rrcf	___aodiv@divisor^0,f,c
  3894   00326E  2E15               	decfsz	___aodiv@counter^0,f,c
  3895   003270  EFFD  F018         	goto	l4910
  3896   003274                     l4922:
  3897   003274  5016               	movf	___aodiv@sign^0,w,c
  3898   003276  B4D8               	btfsc	status,2,c
  3899   003278  EF40  F019         	goto	u5271
  3900   00327C  EF42  F019         	goto	u5270
  3901   003280                     u5271:
  3902   003280  EF52  F019         	goto	l4926
  3903   003284                     u5270:
  3904   003284  1E1E               	comf	(___aodiv@quotient+7)^0,f,c
  3905   003286  1E1D               	comf	(___aodiv@quotient+6)^0,f,c
  3906   003288  1E1C               	comf	(___aodiv@quotient+5)^0,f,c
  3907   00328A  1E1B               	comf	(___aodiv@quotient+4)^0,f,c
  3908   00328C  1E1A               	comf	(___aodiv@quotient+3)^0,f,c
  3909   00328E  1E19               	comf	(___aodiv@quotient+2)^0,f,c
  3910   003290  1E18               	comf	(___aodiv@quotient+1)^0,f,c
  3911   003292  6C17               	negf	___aodiv@quotient^0,c
  3912   003294  0E00               	movlw	0
  3913   003296  2218               	addwfc	(___aodiv@quotient+1)^0,f,c
  3914   003298  2219               	addwfc	(___aodiv@quotient+2)^0,f,c
  3915   00329A  221A               	addwfc	(___aodiv@quotient+3)^0,f,c
  3916   00329C  221B               	addwfc	(___aodiv@quotient+4)^0,f,c
  3917   00329E  221C               	addwfc	(___aodiv@quotient+5)^0,f,c
  3918   0032A0  221D               	addwfc	(___aodiv@quotient+6)^0,f,c
  3919   0032A2  221E               	addwfc	(___aodiv@quotient+7)^0,f,c
  3920   0032A4                     l4926:
  3921   0032A4  C017  F005         	movff	___aodiv@quotient,?___aodiv
  3922   0032A8  C018  F006         	movff	___aodiv@quotient+1,?___aodiv+1
  3923   0032AC  C019  F007         	movff	___aodiv@quotient+2,?___aodiv+2
  3924   0032B0  C01A  F008         	movff	___aodiv@quotient+3,?___aodiv+3
  3925   0032B4  C01B  F009         	movff	___aodiv@quotient+4,?___aodiv+4
  3926   0032B8  C01C  F00A         	movff	___aodiv@quotient+5,?___aodiv+5
  3927   0032BC  C01D  F00B         	movff	___aodiv@quotient+6,?___aodiv+6
  3928   0032C0  C01E  F00C         	movff	___aodiv@quotient+7,?___aodiv+7
  3929   0032C4  0012               	return		;funcret
  3930   0032C6                     __end_of___aodiv:
  3931                           	callstack 0
  3932                           
  3933 ;; *************** function _sendTxBuf *****************
  3934 ;; Defined at:
  3935 ;;		line 126 in file "serialTest.c"
  3936 ;; Parameters:    Size  Location     Type
  3937 ;;		None
  3938 ;; Auto vars:     Size  Location     Type
  3939 ;;		None
  3940 ;; Return value:  Size  Location     Type
  3941 ;;                  1    wreg      void 
  3942 ;; Registers used:
  3943 ;;		wreg, status,2, status,0, cstack
  3944 ;; Tracked objects:
  3945 ;;		On entry : 0/0
  3946 ;;		On exit  : 0/0
  3947 ;;		Unchanged: 0/0
  3948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3952 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3953 ;;Total ram usage:        0 bytes
  3954 ;; Hardware stack levels used: 1
  3955 ;; Hardware stack levels required when called: 3
  3956 ;; This function calls:
  3957 ;;		_isDataInTxBuf
  3958 ;; This function is called by:
  3959 ;;		_return_home_turns
  3960 ;; This function uses a non-reentrant model
  3961 ;;
  3962                           
  3963                           	psect	text14
  3964   004BD8                     __ptext14:
  3965                           	callstack 0
  3966   004BD8                     _sendTxBuf:
  3967                           	callstack 26
  3968   004BD8                     
  3969                           ;serialTest.c: 127:     if (isDataInTxBuf()) {PIE4bits.TX4IE=1;}
  3970   004BD8  ECF9  F025         	call	_isDataInTxBuf	;wreg free
  3971   004BDC  0900               	iorlw	0
  3972   004BDE  B4D8               	btfsc	status,2,c
  3973   004BE0  EFF4  F025         	goto	u3661
  3974   004BE4  EFF6  F025         	goto	u3660
  3975   004BE8                     u3661:
  3976   004BE8  EFF8  F025         	goto	l540
  3977   004BEC                     u3660:
  3978   004BEC  010E               	movlb	14	; () banked
  3979   004BEE  852D               	bsf	45,2,b	;volatile
  3980   004BF0                     l540:
  3981   004BF0  0012               	return		;funcret
  3982   004BF2                     __end_of_sendTxBuf:
  3983                           	callstack 0
  3984                           
  3985 ;; *************** function _isDataInTxBuf *****************
  3986 ;; Defined at:
  3987 ;;		line 113 in file "serialTest.c"
  3988 ;; Parameters:    Size  Location     Type
  3989 ;;		None
  3990 ;; Auto vars:     Size  Location     Type
  3991 ;;		None
  3992 ;; Return value:  Size  Location     Type
  3993 ;;                  1    wreg      unsigned char 
  3994 ;; Registers used:
  3995 ;;		wreg, status,2, status,0
  3996 ;; Tracked objects:
  3997 ;;		On entry : 0/0
  3998 ;;		On exit  : 0/0
  3999 ;;		Unchanged: 0/0
  4000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4004 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4005 ;;Total ram usage:        0 bytes
  4006 ;; Hardware stack levels used: 1
  4007 ;; Hardware stack levels required when called: 2
  4008 ;; This function calls:
  4009 ;;		Nothing
  4010 ;; This function is called by:
  4011 ;;		_sendTxBuf
  4012 ;; This function uses a non-reentrant model
  4013 ;;
  4014                           
  4015                           	psect	text15
  4016   004BF2                     __ptext15:
  4017                           	callstack 0
  4018   004BF2                     _isDataInTxBuf:
  4019                           	callstack 26
  4020   004BF2                     
  4021                           ;serialTest.c: 114:     return (TxBufWriteCnt!=TxBufReadCnt);
  4022   004BF2  5057               	movf	_TxBufReadCnt^0,w,c	;volatile
  4023   004BF4  1858               	xorwf	_TxBufWriteCnt^0,w,c	;volatile
  4024   004BF6  A4D8               	btfss	status,2,c
  4025   004BF8  EF00  F026         	goto	u3171
  4026   004BFC  EF03  F026         	goto	u3170
  4027   004C00                     u3171:
  4028   004C00  0E01               	movlw	1
  4029   004C02  EF04  F026         	goto	u3180
  4030   004C06                     u3170:
  4031   004C06  0E00               	movlw	0
  4032   004C08                     u3180:
  4033   004C08  0012               	return		;funcret
  4034   004C0A                     __end_of_isDataInTxBuf:
  4035                           	callstack 0
  4036                           
  4037 ;; *************** function _forward *****************
  4038 ;; Defined at:
  4039 ;;		line 134 in file "MazeRobot.X/dc_motor.c"
  4040 ;; Parameters:    Size  Location     Type
  4041 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  4042 ;;		 -> main@motorLeft(9), 
  4043 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  4044 ;;		 -> main@motorRight(9), 
  4045 ;; Auto vars:     Size  Location     Type
  4046 ;;		None
  4047 ;; Return value:  Size  Location     Type
  4048 ;;                  1    wreg      void 
  4049 ;; Registers used:
  4050 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4051 ;; Tracked objects:
  4052 ;;		On entry : 0/0
  4053 ;;		On exit  : 0/0
  4054 ;;		Unchanged: 0/0
  4055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4056 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4057 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4058 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4059 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4060 ;;Total ram usage:        5 bytes
  4061 ;; Hardware stack levels used: 1
  4062 ;; Hardware stack levels required when called: 4
  4063 ;; This function calls:
  4064 ;;		_setMotorPWM
  4065 ;; This function is called by:
  4066 ;;		_return_home_turns
  4067 ;;		_main
  4068 ;; This function uses a non-reentrant model
  4069 ;;
  4070                           
  4071                           	psect	text16
  4072   003FF4                     __ptext16:
  4073                           	callstack 0
  4074   003FF4                     _forward:
  4075                           	callstack 25
  4076   003FF4                     
  4077                           ;MazeRobot.X/dc_motor.c: 134: void forward(DC_motor *mL, DC_motor *mR);MazeRobot.X/dc_mo
      +                          tor.c: 135: {;MazeRobot.X/dc_motor.c: 136:     mL->direction = 1;
  4078   003FF4  EE20 F001          	lfsr	2,1
  4079   003FF8  5018               	movf	forward@mL^0,w,c
  4080   003FFA  26D9               	addwf	fsr2l,f,c
  4081   003FFC  5019               	movf	(forward@mL+1)^0,w,c
  4082   003FFE  22DA               	addwfc	fsr2h,f,c
  4083   004000  0E01               	movlw	1
  4084   004002  6EDF               	movwf	indf2,c
  4085                           
  4086                           ;MazeRobot.X/dc_motor.c: 137:     mR->direction = 1;
  4087   004004  EE20 F001          	lfsr	2,1
  4088   004008  501A               	movf	forward@mR^0,w,c
  4089   00400A  26D9               	addwf	fsr2l,f,c
  4090   00400C  501B               	movf	(forward@mR+1)^0,w,c
  4091   00400E  22DA               	addwfc	fsr2h,f,c
  4092   004010  0E01               	movlw	1
  4093   004012  6EDF               	movwf	indf2,c
  4094                           
  4095                           ;MazeRobot.X/dc_motor.c: 139:     mL->brakemode = 1;
  4096   004014  EE20 F002          	lfsr	2,2
  4097   004018  5018               	movf	forward@mL^0,w,c
  4098   00401A  26D9               	addwf	fsr2l,f,c
  4099   00401C  5019               	movf	(forward@mL+1)^0,w,c
  4100   00401E  22DA               	addwfc	fsr2h,f,c
  4101   004020  0E01               	movlw	1
  4102   004022  6EDF               	movwf	indf2,c
  4103                           
  4104                           ;MazeRobot.X/dc_motor.c: 140:     mL->brakemode = 1;
  4105   004024  EE20 F002          	lfsr	2,2
  4106   004028  5018               	movf	forward@mL^0,w,c
  4107   00402A  26D9               	addwf	fsr2l,f,c
  4108   00402C  5019               	movf	(forward@mL+1)^0,w,c
  4109   00402E  22DA               	addwfc	fsr2h,f,c
  4110   004030  0E01               	movlw	1
  4111   004032  6EDF               	movwf	indf2,c
  4112                           
  4113                           ;MazeRobot.X/dc_motor.c: 142:     while ((mL->power)<40 && (mR->power)<40){
  4114   004034  EF40  F020         	goto	l3894
  4115   004038                     l3886:
  4116                           
  4117                           ;MazeRobot.X/dc_motor.c: 143:         if ((mL->power) < 40){
  4118   004038  C018  FFD9         	movff	forward@mL,fsr2l
  4119   00403C  C019  FFDA         	movff	forward@mL+1,fsr2h
  4120   004040  0E28               	movlw	40
  4121   004042  60DF               	cpfslt	indf2,c
  4122   004044  EF26  F020         	goto	u3671
  4123   004048  EF28  F020         	goto	u3670
  4124   00404C                     u3671:
  4125   00404C  EF2E  F020         	goto	l3890
  4126   004050                     u3670:
  4127   004050                     
  4128                           ;MazeRobot.X/dc_motor.c: 144:             mL->power += 5;
  4129   004050  C018  FFD9         	movff	forward@mL,fsr2l
  4130   004054  C019  FFDA         	movff	forward@mL+1,fsr2h
  4131   004058  0E05               	movlw	5
  4132   00405A  26DF               	addwf	indf2,f,c
  4133   00405C                     l3890:
  4134                           
  4135                           ;MazeRobot.X/dc_motor.c: 146:         if ((mR->power) < 40){
  4136   00405C  C01A  FFD9         	movff	forward@mR,fsr2l
  4137   004060  C01B  FFDA         	movff	forward@mR+1,fsr2h
  4138   004064  0E28               	movlw	40
  4139   004066  60DF               	cpfslt	indf2,c
  4140   004068  EF38  F020         	goto	u3681
  4141   00406C  EF3A  F020         	goto	u3680
  4142   004070                     u3681:
  4143   004070  EF40  F020         	goto	l3894
  4144   004074                     u3680:
  4145   004074                     
  4146                           ;MazeRobot.X/dc_motor.c: 147:             mR->power += 5;
  4147   004074  C01A  FFD9         	movff	forward@mR,fsr2l
  4148   004078  C01B  FFDA         	movff	forward@mR+1,fsr2h
  4149   00407C  0E05               	movlw	5
  4150   00407E  26DF               	addwf	indf2,f,c
  4151   004080                     l3894:
  4152                           
  4153                           ;MazeRobot.X/dc_motor.c: 142:     while ((mL->power)<40 && (mR->power)<40){
  4154   004080  C018  FFD9         	movff	forward@mL,fsr2l
  4155   004084  C019  FFDA         	movff	forward@mL+1,fsr2h
  4156   004088  0E28               	movlw	40
  4157   00408A  60DF               	cpfslt	indf2,c
  4158   00408C  EF4A  F020         	goto	u3691
  4159   004090  EF4C  F020         	goto	u3690
  4160   004094                     u3691:
  4161   004094  EF58  F020         	goto	l3898
  4162   004098                     u3690:
  4163   004098  C01A  FFD9         	movff	forward@mR,fsr2l
  4164   00409C  C01B  FFDA         	movff	forward@mR+1,fsr2h
  4165   0040A0  0E27               	movlw	39
  4166   0040A2  64DF               	cpfsgt	indf2,c
  4167   0040A4  EF56  F020         	goto	u3701
  4168   0040A8  EF58  F020         	goto	u3700
  4169   0040AC                     u3701:
  4170   0040AC  EF1C  F020         	goto	l3886
  4171   0040B0                     u3700:
  4172   0040B0                     l3898:
  4173                           
  4174                           ;MazeRobot.X/dc_motor.c: 151:     setMotorPWM(mL);
  4175   0040B0  C018  F012         	movff	forward@mL,setMotorPWM@m
  4176   0040B4  C019  F013         	movff	forward@mL+1,setMotorPWM@m+1
  4177   0040B8  EC63  F019         	call	_setMotorPWM	;wreg free
  4178                           
  4179                           ;MazeRobot.X/dc_motor.c: 152:     setMotorPWM(mR);
  4180   0040BC  C01A  F012         	movff	forward@mR,setMotorPWM@m
  4181   0040C0  C01B  F013         	movff	forward@mR+1,setMotorPWM@m+1
  4182   0040C4  EC63  F019         	call	_setMotorPWM	;wreg free
  4183   0040C8  0012               	return		;funcret
  4184   0040CA                     __end_of_forward:
  4185                           	callstack 0
  4186                           
  4187 ;; *************** function _TxBufferedString *****************
  4188 ;; Defined at:
  4189 ;;		line 118 in file "serialTest.c"
  4190 ;; Parameters:    Size  Location     Type
  4191 ;;  string          2    5[COMRAM] PTR unsigned char 
  4192 ;;		 -> return_home_turns@string1(150), 
  4193 ;; Auto vars:     Size  Location     Type
  4194 ;;		None
  4195 ;; Return value:  Size  Location     Type
  4196 ;;                  1    wreg      void 
  4197 ;; Registers used:
  4198 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4199 ;; Tracked objects:
  4200 ;;		On entry : 0/0
  4201 ;;		On exit  : 0/0
  4202 ;;		Unchanged: 0/0
  4203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4204 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4207 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4208 ;;Total ram usage:        2 bytes
  4209 ;; Hardware stack levels used: 1
  4210 ;; Hardware stack levels required when called: 3
  4211 ;; This function calls:
  4212 ;;		_putCharToTxBuf
  4213 ;; This function is called by:
  4214 ;;		_return_home_turns
  4215 ;; This function uses a non-reentrant model
  4216 ;;
  4217                           
  4218                           	psect	text17
  4219   004A62                     __ptext17:
  4220                           	callstack 0
  4221   004A62                     _TxBufferedString:
  4222                           	callstack 26
  4223   004A62                     
  4224                           ;serialTest.c: 121:     while(*string != 0) {putCharToTxBuf(*string++);}
  4225   004A62  EF3C  F025         	goto	l3878
  4226   004A66                     l3874:
  4227   004A66  C006  FFD9         	movff	TxBufferedString@string,fsr2l
  4228   004A6A  C007  FFDA         	movff	TxBufferedString@string+1,fsr2h
  4229   004A6E  50DF               	movf	indf2,w,c
  4230   004A70  EC76  F025         	call	_putCharToTxBuf
  4231   004A74  4A06               	infsnz	TxBufferedString@string^0,f,c
  4232   004A76  2A07               	incf	(TxBufferedString@string+1)^0,f,c
  4233   004A78                     l3878:
  4234   004A78  C006  FFD9         	movff	TxBufferedString@string,fsr2l
  4235   004A7C  C007  FFDA         	movff	TxBufferedString@string+1,fsr2h
  4236   004A80  50DF               	movf	indf2,w,c
  4237   004A82  A4D8               	btfss	status,2,c
  4238   004A84  EF46  F025         	goto	u3651
  4239   004A88  EF48  F025         	goto	u3650
  4240   004A8C                     u3651:
  4241   004A8C  EF33  F025         	goto	l3874
  4242   004A90                     u3650:
  4243   004A90  0012               	return		;funcret
  4244   004A92                     __end_of_TxBufferedString:
  4245                           	callstack 0
  4246                           
  4247 ;; *************** function _putCharToTxBuf *****************
  4248 ;; Defined at:
  4249 ;;		line 105 in file "serialTest.c"
  4250 ;; Parameters:    Size  Location     Type
  4251 ;;  byte            1    wreg     unsigned char 
  4252 ;; Auto vars:     Size  Location     Type
  4253 ;;  byte            1    4[COMRAM] unsigned char 
  4254 ;; Return value:  Size  Location     Type
  4255 ;;                  1    wreg      void 
  4256 ;; Registers used:
  4257 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4258 ;; Tracked objects:
  4259 ;;		On entry : 0/0
  4260 ;;		On exit  : 0/0
  4261 ;;		Unchanged: 0/0
  4262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4264 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4266 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4267 ;;Total ram usage:        1 bytes
  4268 ;; Hardware stack levels used: 1
  4269 ;; Hardware stack levels required when called: 2
  4270 ;; This function calls:
  4271 ;;		Nothing
  4272 ;; This function is called by:
  4273 ;;		_TxBufferedString
  4274 ;; This function uses a non-reentrant model
  4275 ;;
  4276                           
  4277                           	psect	text18
  4278   004AEC                     __ptext18:
  4279                           	callstack 0
  4280   004AEC                     _putCharToTxBuf:
  4281                           	callstack 26
  4282                           
  4283                           ;incstack = 0
  4284                           ;putCharToTxBuf@byte stored from wreg
  4285   004AEC  6E05               	movwf	putCharToTxBuf@byte^0,c
  4286   004AEE                     
  4287                           ;serialTest.c: 106:     if (TxBufWriteCnt>=60) {TxBufWriteCnt=0;}
  4288   004AEE  0E3B               	movlw	59
  4289   004AF0  6458               	cpfsgt	_TxBufWriteCnt^0,c	;volatile
  4290   004AF2  EF7D  F025         	goto	u3161
  4291   004AF6  EF7F  F025         	goto	u3160
  4292   004AFA                     u3161:
  4293   004AFA  EF81  F025         	goto	l3514
  4294   004AFE                     u3160:
  4295   004AFE  0E00               	movlw	0
  4296   004B00  6E58               	movwf	_TxBufWriteCnt^0,c	;volatile
  4297   004B02                     l3514:
  4298                           
  4299                           ;serialTest.c: 107:     EUSART4TXbuf[TxBufWriteCnt++]=byte;
  4300   004B02  0E9A               	movlw	low _EUSART4TXbuf
  4301   004B04  2458               	addwf	_TxBufWriteCnt^0,w,c	;volatile
  4302   004B06  6ED9               	movwf	fsr2l,c
  4303   004B08  6ADA               	clrf	fsr2h,c
  4304   004B0A  0E01               	movlw	high _EUSART4TXbuf
  4305   004B0C  22DA               	addwfc	fsr2h,f,c
  4306   004B0E  C005  FFDF         	movff	putCharToTxBuf@byte,indf2
  4307   004B12  2A58               	incf	_TxBufWriteCnt^0,f,c	;volatile
  4308   004B14  0012               	return		;funcret
  4309   004B16                     __end_of_putCharToTxBuf:
  4310                           	callstack 0
  4311                           
  4312 ;; *************** function _initUSART4 *****************
  4313 ;; Defined at:
  4314 ;;		line 5 in file "serialTest.c"
  4315 ;; Parameters:    Size  Location     Type
  4316 ;;		None
  4317 ;; Auto vars:     Size  Location     Type
  4318 ;;		None
  4319 ;; Return value:  Size  Location     Type
  4320 ;;                  1    wreg      void 
  4321 ;; Registers used:
  4322 ;;		wreg, status,2
  4323 ;; Tracked objects:
  4324 ;;		On entry : 0/0
  4325 ;;		On exit  : 0/0
  4326 ;;		Unchanged: 0/0
  4327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4331 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4332 ;;Total ram usage:        0 bytes
  4333 ;; Hardware stack levels used: 1
  4334 ;; Hardware stack levels required when called: 2
  4335 ;; This function calls:
  4336 ;;		Nothing
  4337 ;; This function is called by:
  4338 ;;		_main
  4339 ;; This function uses a non-reentrant model
  4340 ;;
  4341                           
  4342                           	psect	text19
  4343   004A92                     __ptext19:
  4344                           	callstack 0
  4345   004A92                     _initUSART4:
  4346                           	callstack 28
  4347   004A92                     
  4348                           ;serialTest.c: 9:     BAUD4CONbits.BRG16 = 0;
  4349   004A92  010E               	movlb	14	; () banked
  4350   004A94  97E9               	bcf	233,3,b	;volatile
  4351                           
  4352                           ;serialTest.c: 10:     TX4STAbits.BRGH = 0;
  4353   004A96  95E8               	bcf	232,2,b	;volatile
  4354   004A98                     
  4355                           ; BSR set to: 14
  4356                           ;serialTest.c: 19:     SP4BRGL = 51;
  4357   004A98  0E33               	movlw	51
  4358   004A9A  6FE5               	movwf	229,b	;volatile
  4359                           
  4360                           ;serialTest.c: 20:     SP4BRGH = 0;
  4361   004A9C  0E00               	movlw	0
  4362   004A9E  6FE6               	movwf	230,b	;volatile
  4363   004AA0                     
  4364                           ; BSR set to: 14
  4365                           ;serialTest.c: 22:     RC4STAbits.CREN = 1;
  4366   004AA0  89E7               	bsf	231,4,b	;volatile
  4367   004AA2                     
  4368                           ; BSR set to: 14
  4369                           ;serialTest.c: 23:     TX4STAbits.TXEN = 1;
  4370   004AA2  8BE8               	bsf	232,5,b	;volatile
  4371   004AA4                     
  4372                           ; BSR set to: 14
  4373                           ;serialTest.c: 24:     RC4STAbits.SPEN = 1;
  4374   004AA4  8FE7               	bsf	231,7,b	;volatile
  4375   004AA6                     
  4376                           ; BSR set to: 14
  4377                           ;serialTest.c: 26:     TRISCbits.TRISC1 = 1;
  4378   004AA6  8283               	bsf	131,1,c	;volatile
  4379                           
  4380                           ;serialTest.c: 28:     RC0PPS = 0x12;
  4381   004AA8  0E12               	movlw	18
  4382   004AAA  6F62               	movwf	98,b	;volatile
  4383                           
  4384                           ;serialTest.c: 29:     RX4PPS = 0x11;
  4385   004AAC  0E11               	movlw	17
  4386   004AAE  6F15               	movwf	21,b	;volatile
  4387   004AB0                     
  4388                           ; BSR set to: 14
  4389                           ;serialTest.c: 32:     INTCONbits.GIE = 1;
  4390   004AB0  8EF2               	bsf	242,7,c	;volatile
  4391   004AB2                     
  4392                           ; BSR set to: 14
  4393                           ;serialTest.c: 33:     INTCONbits.IPEN = 1;
  4394   004AB2  8AF2               	bsf	242,5,c	;volatile
  4395   004AB4                     
  4396                           ; BSR set to: 14
  4397                           ;serialTest.c: 34:     INTCONbits.PEIE = 1;
  4398   004AB4  8CF2               	bsf	242,6,c	;volatile
  4399   004AB6                     
  4400                           ; BSR set to: 14
  4401                           ;serialTest.c: 36:     PIE4bits.RC4IE=1;
  4402   004AB6  872D               	bsf	45,3,b	;volatile
  4403   004AB8                     
  4404                           ; BSR set to: 14
  4405                           ;serialTest.c: 37:     PIE4bits.TX4IE=0;
  4406   004AB8  952D               	bcf	45,2,b	;volatile
  4407   004ABA                     
  4408                           ; BSR set to: 14
  4409                           ;serialTest.c: 39:     IPR4bits.RC4IP = 1;
  4410   004ABA  8723               	bsf	35,3,b	;volatile
  4411   004ABC                     
  4412                           ; BSR set to: 14
  4413                           ;serialTest.c: 40:     IPR4bits.TX4IP = 1;
  4414   004ABC  8523               	bsf	35,2,b	;volatile
  4415   004ABE                     
  4416                           ; BSR set to: 14
  4417   004ABE  0012               	return		;funcret
  4418   004AC0                     __end_of_initUSART4:
  4419                           	callstack 0
  4420                           
  4421 ;; *************** function _initDCmotorsPWM *****************
  4422 ;; Defined at:
  4423 ;;		line 12 in file "MazeRobot.X/dc_motor.c"
  4424 ;; Parameters:    Size  Location     Type
  4425 ;;  PWMperiod       2    4[COMRAM] int 
  4426 ;; Auto vars:     Size  Location     Type
  4427 ;;		None
  4428 ;; Return value:  Size  Location     Type
  4429 ;;                  1    wreg      void 
  4430 ;; Registers used:
  4431 ;;		wreg, status,2
  4432 ;; Tracked objects:
  4433 ;;		On entry : 0/0
  4434 ;;		On exit  : 0/0
  4435 ;;		Unchanged: 0/0
  4436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4437 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4440 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4441 ;;Total ram usage:        2 bytes
  4442 ;; Hardware stack levels used: 1
  4443 ;; Hardware stack levels required when called: 2
  4444 ;; This function calls:
  4445 ;;		Nothing
  4446 ;; This function is called by:
  4447 ;;		_main
  4448 ;; This function uses a non-reentrant model
  4449 ;;
  4450                           
  4451                           	psect	text20
  4452   004516                     __ptext20:
  4453                           	callstack 0
  4454   004516                     _initDCmotorsPWM:
  4455                           	callstack 28
  4456   004516                     
  4457                           ;MazeRobot.X/dc_motor.c: 16:     LATEbits.LATE2 = 0;
  4458   004516  947D               	bcf	125,2,c	;volatile
  4459                           
  4460                           ;MazeRobot.X/dc_motor.c: 17:     LATEbits.LATE4 = 0;
  4461   004518  987D               	bcf	125,4,c	;volatile
  4462                           
  4463                           ;MazeRobot.X/dc_motor.c: 18:     LATCbits.LATC7 = 0;
  4464   00451A  9E7B               	bcf	123,7,c	;volatile
  4465                           
  4466                           ;MazeRobot.X/dc_motor.c: 19:     LATGbits.LATG6 = 0;
  4467   00451C  9C7F               	bcf	127,6,c	;volatile
  4468                           
  4469                           ;MazeRobot.X/dc_motor.c: 22:     TRISEbits.TRISE2 = 0 ;
  4470   00451E  9485               	bcf	133,2,c	;volatile
  4471                           
  4472                           ;MazeRobot.X/dc_motor.c: 23:     TRISEbits.TRISE4 = 0 ;
  4473   004520  9885               	bcf	133,4,c	;volatile
  4474                           
  4475                           ;MazeRobot.X/dc_motor.c: 24:     TRISCbits.TRISC7 = 0 ;
  4476   004522  9E83               	bcf	131,7,c	;volatile
  4477                           
  4478                           ;MazeRobot.X/dc_motor.c: 25:     TRISGbits.TRISG6 = 0 ;
  4479   004524  9C87               	bcf	135,6,c	;volatile
  4480   004526                     
  4481                           ;MazeRobot.X/dc_motor.c: 28:     RE2PPS=0x05;
  4482   004526  0E05               	movlw	5
  4483   004528  010E               	movlb	14	; () banked
  4484   00452A  6F74               	movwf	116,b	;volatile
  4485                           
  4486                           ;MazeRobot.X/dc_motor.c: 29:     RE4PPS=0x06;
  4487   00452C  0E06               	movlw	6
  4488   00452E  6F76               	movwf	118,b	;volatile
  4489                           
  4490                           ;MazeRobot.X/dc_motor.c: 30:     RC7PPS=0x07;
  4491   004530  0E07               	movlw	7
  4492   004532  6F69               	movwf	105,b	;volatile
  4493                           
  4494                           ;MazeRobot.X/dc_motor.c: 31:     RG6PPS=0x08;
  4495   004534  0E08               	movlw	8
  4496   004536  6F88               	movwf	136,b	;volatile
  4497                           
  4498                           ;MazeRobot.X/dc_motor.c: 34:     T2CONbits.CKPS=0b011;
  4499   004538  50BD               	movf	189,w,c	;volatile
  4500   00453A  0B8F               	andlw	-113
  4501   00453C  0930               	iorlw	48
  4502   00453E  6EBD               	movwf	189,c	;volatile
  4503                           
  4504                           ;MazeRobot.X/dc_motor.c: 35:     T2HLTbits.MODE=0b00000;
  4505   004540  0EE0               	movlw	-32
  4506   004542  16BE               	andwf	190,f,c	;volatile
  4507                           
  4508                           ;MazeRobot.X/dc_motor.c: 36:     T2CLKCONbits.CS=0b0001;
  4509   004544  50BF               	movf	191,w,c	;volatile
  4510   004546  0BF0               	andlw	-16
  4511   004548  0901               	iorlw	1
  4512   00454A  6EBF               	movwf	191,c	;volatile
  4513                           
  4514                           ;MazeRobot.X/dc_motor.c: 40:     T2PR=199;
  4515   00454C  0EC7               	movlw	199
  4516   00454E  6EBC               	movwf	188,c	;volatile
  4517   004550                     
  4518                           ; BSR set to: 14
  4519                           ;MazeRobot.X/dc_motor.c: 41:     T2CONbits.ON=1;
  4520   004550  8EBD               	bsf	189,7,c	;volatile
  4521                           
  4522                           ;MazeRobot.X/dc_motor.c: 45:     CCPR1H=0;
  4523   004552  0E00               	movlw	0
  4524   004554  6EAA               	movwf	170,c	;volatile
  4525                           
  4526                           ;MazeRobot.X/dc_motor.c: 46:     CCPR2H=0;
  4527   004556  0E00               	movlw	0
  4528   004558  6EA6               	movwf	166,c	;volatile
  4529                           
  4530                           ;MazeRobot.X/dc_motor.c: 47:     CCPR3H=0;
  4531   00455A  0E00               	movlw	0
  4532   00455C  010F               	movlb	15	; () banked
  4533   00455E  6F25               	movwf	37,b	;volatile
  4534                           
  4535                           ;MazeRobot.X/dc_motor.c: 48:     CCPR4H=0;
  4536   004560  0E00               	movlw	0
  4537   004562  6F21               	movwf	33,b	;volatile
  4538                           
  4539                           ;MazeRobot.X/dc_motor.c: 51:     CCPTMRS0bits.C1TSEL=0;
  4540   004564  0EFC               	movlw	-4
  4541   004566  16AD               	andwf	173,f,c	;volatile
  4542                           
  4543                           ;MazeRobot.X/dc_motor.c: 52:     CCPTMRS0bits.C2TSEL=0;
  4544   004568  0EF3               	movlw	-13
  4545   00456A  16AD               	andwf	173,f,c	;volatile
  4546                           
  4547                           ;MazeRobot.X/dc_motor.c: 53:     CCPTMRS0bits.C3TSEL=0;
  4548   00456C  0ECF               	movlw	-49
  4549   00456E  16AD               	andwf	173,f,c	;volatile
  4550                           
  4551                           ;MazeRobot.X/dc_motor.c: 54:     CCPTMRS0bits.C4TSEL=0;
  4552   004570  0E3F               	movlw	-193
  4553   004572  16AD               	andwf	173,f,c	;volatile
  4554   004574                     
  4555                           ; BSR set to: 15
  4556                           ;MazeRobot.X/dc_motor.c: 57:     CCP1CONbits.FMT=1;
  4557   004574  88AB               	bsf	171,4,c	;volatile
  4558                           
  4559                           ;MazeRobot.X/dc_motor.c: 58:     CCP1CONbits.CCP1MODE=0b1100;
  4560   004576  50AB               	movf	171,w,c	;volatile
  4561   004578  0BF0               	andlw	-16
  4562   00457A  090C               	iorlw	12
  4563   00457C  6EAB               	movwf	171,c	;volatile
  4564   00457E                     
  4565                           ; BSR set to: 15
  4566                           ;MazeRobot.X/dc_motor.c: 59:     CCP1CONbits.EN=1;
  4567   00457E  8EAB               	bsf	171,7,c	;volatile
  4568   004580                     
  4569                           ; BSR set to: 15
  4570                           ;MazeRobot.X/dc_motor.c: 61:     CCP2CONbits.FMT=1;
  4571   004580  88A7               	bsf	167,4,c	;volatile
  4572                           
  4573                           ;MazeRobot.X/dc_motor.c: 62:     CCP2CONbits.CCP2MODE=0b1100;
  4574   004582  50A7               	movf	167,w,c	;volatile
  4575   004584  0BF0               	andlw	-16
  4576   004586  090C               	iorlw	12
  4577   004588  6EA7               	movwf	167,c	;volatile
  4578   00458A                     
  4579                           ; BSR set to: 15
  4580                           ;MazeRobot.X/dc_motor.c: 63:     CCP2CONbits.EN=1;
  4581   00458A  8EA7               	bsf	167,7,c	;volatile
  4582   00458C                     
  4583                           ; BSR set to: 15
  4584                           ;MazeRobot.X/dc_motor.c: 65:     CCP3CONbits.FMT=1;
  4585   00458C  8926               	bsf	38,4,b	;volatile
  4586                           
  4587                           ;MazeRobot.X/dc_motor.c: 66:     CCP3CONbits.CCP3MODE=0b1100;
  4588   00458E  5126               	movf	38,w,b	;volatile
  4589   004590  0BF0               	andlw	-16
  4590   004592  090C               	iorlw	12
  4591   004594  6F26               	movwf	38,b	;volatile
  4592   004596                     
  4593                           ; BSR set to: 15
  4594                           ;MazeRobot.X/dc_motor.c: 67:     CCP3CONbits.EN=1;
  4595   004596  8F26               	bsf	38,7,b	;volatile
  4596   004598                     
  4597                           ; BSR set to: 15
  4598                           ;MazeRobot.X/dc_motor.c: 69:     CCP4CONbits.FMT=1;
  4599   004598  8922               	bsf	34,4,b	;volatile
  4600                           
  4601                           ;MazeRobot.X/dc_motor.c: 70:     CCP4CONbits.CCP4MODE=0b1100;
  4602   00459A  5122               	movf	34,w,b	;volatile
  4603   00459C  0BF0               	andlw	-16
  4604   00459E  090C               	iorlw	12
  4605   0045A0  6F22               	movwf	34,b	;volatile
  4606   0045A2                     
  4607                           ; BSR set to: 15
  4608                           ;MazeRobot.X/dc_motor.c: 71:     CCP4CONbits.EN=1;
  4609   0045A2  8F22               	bsf	34,7,b	;volatile
  4610   0045A4                     
  4611                           ; BSR set to: 15
  4612   0045A4  0012               	return		;funcret
  4613   0045A6                     __end_of_initDCmotorsPWM:
  4614                           	callstack 0
  4615                           
  4616 ;; *************** function _color_click_init *****************
  4617 ;; Defined at:
  4618 ;;		line 8 in file "MazeRobot.X/color.c"
  4619 ;; Parameters:    Size  Location     Type
  4620 ;;		None
  4621 ;; Auto vars:     Size  Location     Type
  4622 ;;		None
  4623 ;; Return value:  Size  Location     Type
  4624 ;;                  1    wreg      void 
  4625 ;; Registers used:
  4626 ;;		wreg, status,2, status,0, cstack
  4627 ;; Tracked objects:
  4628 ;;		On entry : 0/0
  4629 ;;		On exit  : 0/0
  4630 ;;		Unchanged: 0/0
  4631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4633 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4634 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4635 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4636 ;;Total ram usage:        1 bytes
  4637 ;; Hardware stack levels used: 1
  4638 ;; Hardware stack levels required when called: 5
  4639 ;; This function calls:
  4640 ;;		_I2C_2_Master_Init
  4641 ;;		_color_writetoaddr
  4642 ;; This function is called by:
  4643 ;;		_main
  4644 ;; This function uses a non-reentrant model
  4645 ;;
  4646                           
  4647                           	psect	text21
  4648   004A2E                     __ptext21:
  4649                           	callstack 0
  4650   004A2E                     _color_click_init:
  4651                           	callstack 25
  4652   004A2E                     
  4653                           ;MazeRobot.X/color.c: 11:     I2C_2_Master_Init();
  4654   004A2E  EC8B  F025         	call	_I2C_2_Master_Init	;wreg free
  4655   004A32                     
  4656                           ;MazeRobot.X/color.c: 14:   color_writetoaddr(0x00, 0x01);
  4657   004A32  0E01               	movlw	1
  4658   004A34  6E07               	movwf	color_writetoaddr@value^0,c
  4659   004A36  0E00               	movlw	0
  4660   004A38  ECDC  F025         	call	_color_writetoaddr
  4661   004A3C                     
  4662                           ;MazeRobot.X/color.c: 15:     _delay((unsigned long)((3)*(64000000/4000.0)));
  4663   004A3C  0E3F               	movlw	63
  4664   004A3E  6E09               	movwf	??_color_click_init^0,c
  4665   004A40  0E55               	movlw	85
  4666   004A42                     u6177:
  4667   004A42  2EE8               	decfsz	wreg,f,c
  4668   004A44  D7FE               	bra	u6177
  4669   004A46  2E09               	decfsz	??_color_click_init^0,f,c
  4670   004A48  D7FC               	bra	u6177
  4671   004A4A  F000               	nop	
  4672   004A4C                     
  4673                           ;MazeRobot.X/color.c: 18:  color_writetoaddr(0x00, 0x03);
  4674   004A4C  0E03               	movlw	3
  4675   004A4E  6E07               	movwf	color_writetoaddr@value^0,c
  4676   004A50  0E00               	movlw	0
  4677   004A52  ECDC  F025         	call	_color_writetoaddr
  4678   004A56                     
  4679                           ;MazeRobot.X/color.c: 21:  color_writetoaddr(0x01, 0xD5);
  4680   004A56  0ED5               	movlw	213
  4681   004A58  6E07               	movwf	color_writetoaddr@value^0,c
  4682   004A5A  0E01               	movlw	1
  4683   004A5C  ECDC  F025         	call	_color_writetoaddr
  4684   004A60  0012               	return		;funcret
  4685   004A62                     __end_of_color_click_init:
  4686                           	callstack 0
  4687                           
  4688 ;; *************** function _color_writetoaddr *****************
  4689 ;; Defined at:
  4690 ;;		line 25 in file "MazeRobot.X/color.c"
  4691 ;; Parameters:    Size  Location     Type
  4692 ;;  address         1    wreg     unsigned char 
  4693 ;;  value           1    6[COMRAM] unsigned char 
  4694 ;; Auto vars:     Size  Location     Type
  4695 ;;  address         1    7[COMRAM] unsigned char 
  4696 ;; Return value:  Size  Location     Type
  4697 ;;                  1    wreg      void 
  4698 ;; Registers used:
  4699 ;;		wreg, status,2, status,0, cstack
  4700 ;; Tracked objects:
  4701 ;;		On entry : 0/0
  4702 ;;		On exit  : 0/0
  4703 ;;		Unchanged: 0/0
  4704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4705 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4706 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4708 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4709 ;;Total ram usage:        2 bytes
  4710 ;; Hardware stack levels used: 1
  4711 ;; Hardware stack levels required when called: 4
  4712 ;; This function calls:
  4713 ;;		_I2C_2_Master_Start
  4714 ;;		_I2C_2_Master_Stop
  4715 ;;		_I2C_2_Master_Write
  4716 ;; This function is called by:
  4717 ;;		_color_click_init
  4718 ;; This function uses a non-reentrant model
  4719 ;;
  4720                           
  4721                           	psect	text22
  4722   004BB8                     __ptext22:
  4723                           	callstack 0
  4724   004BB8                     _color_writetoaddr:
  4725                           	callstack 25
  4726                           
  4727                           ;incstack = 0
  4728                           ;color_writetoaddr@address stored from wreg
  4729   004BB8  6E08               	movwf	color_writetoaddr@address^0,c
  4730   004BBA                     
  4731                           ;MazeRobot.X/color.c: 26:     I2C_2_Master_Start();
  4732   004BBA  EC1C  F026         	call	_I2C_2_Master_Start	;wreg free
  4733                           
  4734                           ;MazeRobot.X/color.c: 27:     I2C_2_Master_Write(0x52 | 0x00);
  4735   004BBE  0E52               	movlw	82
  4736   004BC0  EC11  F026         	call	_I2C_2_Master_Write
  4737                           
  4738                           ;MazeRobot.X/color.c: 28:     I2C_2_Master_Write(0x80 | address);
  4739   004BC4  5008               	movf	color_writetoaddr@address^0,w,c
  4740   004BC6  0980               	iorlw	128
  4741   004BC8  EC11  F026         	call	_I2C_2_Master_Write
  4742                           
  4743                           ;MazeRobot.X/color.c: 29:     I2C_2_Master_Write(value);
  4744   004BCC  5007               	movf	color_writetoaddr@value^0,w,c
  4745   004BCE  EC11  F026         	call	_I2C_2_Master_Write
  4746                           
  4747                           ;MazeRobot.X/color.c: 30:     I2C_2_Master_Stop();
  4748   004BD2  EC17  F026         	call	_I2C_2_Master_Stop	;wreg free
  4749   004BD6  0012               	return		;funcret
  4750   004BD8                     __end_of_color_writetoaddr:
  4751                           	callstack 0
  4752                           
  4753 ;; *************** function _I2C_2_Master_Init *****************
  4754 ;; Defined at:
  4755 ;;		line 4 in file "MazeRobot.X/i2c.c"
  4756 ;; Parameters:    Size  Location     Type
  4757 ;;		None
  4758 ;; Auto vars:     Size  Location     Type
  4759 ;;		None
  4760 ;; Return value:  Size  Location     Type
  4761 ;;                  1    wreg      void 
  4762 ;; Registers used:
  4763 ;;		wreg, status,2
  4764 ;; Tracked objects:
  4765 ;;		On entry : 0/0
  4766 ;;		On exit  : 0/0
  4767 ;;		Unchanged: 0/0
  4768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4772 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4773 ;;Total ram usage:        0 bytes
  4774 ;; Hardware stack levels used: 1
  4775 ;; Hardware stack levels required when called: 2
  4776 ;; This function calls:
  4777 ;;		Nothing
  4778 ;; This function is called by:
  4779 ;;		_color_click_init
  4780 ;; This function uses a non-reentrant model
  4781 ;;
  4782                           
  4783                           	psect	text23
  4784   004B16                     __ptext23:
  4785                           	callstack 0
  4786   004B16                     _I2C_2_Master_Init:
  4787                           	callstack 27
  4788   004B16                     
  4789                           ;MazeRobot.X/i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  4790   004B16  010E               	movlb	14	; () banked
  4791   004B18  51D9               	movf	217,w,b	;volatile
  4792   004B1A  0BF0               	andlw	-16
  4793   004B1C  0908               	iorlw	8
  4794   004B1E  6FD9               	movwf	217,b	;volatile
  4795   004B20                     
  4796                           ; BSR set to: 14
  4797                           ;MazeRobot.X/i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  4798   004B20  8BD9               	bsf	217,5,b	;volatile
  4799                           
  4800                           ;MazeRobot.X/i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  4801   004B22  0E9F               	movlw	159
  4802   004B24  6FD6               	movwf	214,b	;volatile
  4803   004B26                     
  4804                           ; BSR set to: 14
  4805                           ;MazeRobot.X/i2c.c: 12:   TRISDbits.TRISD5 = 1;
  4806   004B26  8A84               	bsf	132,5,c	;volatile
  4807   004B28                     
  4808                           ; BSR set to: 14
  4809                           ;MazeRobot.X/i2c.c: 13:   TRISDbits.TRISD6 = 1;
  4810   004B28  8C84               	bsf	132,6,c	;volatile
  4811   004B2A                     
  4812                           ; BSR set to: 14
  4813                           ;MazeRobot.X/i2c.c: 14:   ANSELDbits.ANSELD5=0;
  4814   004B2A  9BA7               	bcf	167,5,b	;volatile
  4815   004B2C                     
  4816                           ; BSR set to: 14
  4817                           ;MazeRobot.X/i2c.c: 15:   ANSELDbits.ANSELD6=0;
  4818   004B2C  9DA7               	bcf	167,6,b	;volatile
  4819                           
  4820                           ;MazeRobot.X/i2c.c: 16:   SSP2DATPPS=0x1D;
  4821   004B2E  0E1D               	movlw	29
  4822   004B30  6F1D               	movwf	29,b	;volatile
  4823                           
  4824                           ;MazeRobot.X/i2c.c: 17:   SSP2CLKPPS=0x1E;
  4825   004B32  0E1E               	movlw	30
  4826   004B34  6F1C               	movwf	28,b	;volatile
  4827                           
  4828                           ;MazeRobot.X/i2c.c: 18:   RD5PPS=0x1C;
  4829   004B36  0E1C               	movlw	28
  4830   004B38  6F6F               	movwf	111,b	;volatile
  4831                           
  4832                           ;MazeRobot.X/i2c.c: 19:   RD6PPS=0x1B;
  4833   004B3A  0E1B               	movlw	27
  4834   004B3C  6F70               	movwf	112,b	;volatile
  4835   004B3E                     
  4836                           ; BSR set to: 14
  4837   004B3E  0012               	return		;funcret
  4838   004B40                     __end_of_I2C_2_Master_Init:
  4839                           	callstack 0
  4840                           
  4841 ;; *************** function _colorDetect *****************
  4842 ;; Defined at:
  4843 ;;		line 130 in file "MazeRobot.X/color.c"
  4844 ;; Parameters:    Size  Location     Type
  4845 ;;  clearRef        4    0[BANK0 ] void 
  4846 ;;  ambientRGBVa    2    4[BANK0 ] PTR struct RGB
  4847 ;;		 -> main@ambientRGBVal(8), 
  4848 ;;  whiteRGBVal     2    6[BANK0 ] PTR struct RGB
  4849 ;;		 -> main@whiteRGBVal(8), 
  4850 ;;  mL              2    8[BANK0 ] PTR struct DC_motor
  4851 ;;		 -> main@motorLeft(9), 
  4852 ;;  mR              2   10[BANK0 ] PTR struct DC_motor
  4853 ;;		 -> main@motorRight(9), 
  4854 ;; Auto vars:     Size  Location     Type
  4855 ;;  RGBVal          8   32[BANK0 ] struct RGB
  4856 ;;  bluePrint       4   48[BANK0 ] float 
  4857 ;;  greenPrint      4   44[BANK0 ] float 
  4858 ;;  redPrint        4   40[BANK0 ] float 
  4859 ;;  whiteB          4   20[BANK0 ] float 
  4860 ;;  whiteG          4   16[BANK0 ] float 
  4861 ;;  whiteR          4   12[BANK0 ] float 
  4862 ;;  whiteC          4    0        float 
  4863 ;;  colour_ref      2   30[BANK0 ] unsigned int 
  4864 ;;  ambientB        2   28[BANK0 ] unsigned int 
  4865 ;;  ambientG        2   26[BANK0 ] unsigned int 
  4866 ;;  ambientR        2   24[BANK0 ] unsigned int 
  4867 ;; Return value:  Size  Location     Type
  4868 ;;                  2    0[BANK0 ] unsigned int 
  4869 ;; Registers used:
  4870 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4871 ;; Tracked objects:
  4872 ;;		On entry : 0/0
  4873 ;;		On exit  : 0/0
  4874 ;;		Unchanged: 0/0
  4875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4876 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4877 ;;      Locals:         0      40       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4878 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4879 ;;      Totals:         2      52       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4880 ;;Total ram usage:       54 bytes
  4881 ;; Hardware stack levels used: 1
  4882 ;; Hardware stack levels required when called: 7
  4883 ;; This function calls:
  4884 ;;		___fldiv
  4885 ;;		___flge
  4886 ;;		___flmul
  4887 ;;		___flsub
  4888 ;;		___xxtofl
  4889 ;;		_getColor
  4890 ;;		_reverseSquareLeft
  4891 ;;		_reverseSquareRight
  4892 ;;		_turnLeft_135
  4893 ;;		_turnLeft_90
  4894 ;;		_turnRight_135
  4895 ;;		_turnRight_90
  4896 ;;		_turn_180
  4897 ;; This function is called by:
  4898 ;;		_main
  4899 ;; This function uses a non-reentrant model
  4900 ;;
  4901                           
  4902                           	psect	text24
  4903   000E28                     __ptext24:
  4904                           	callstack 0
  4905   000E28                     _colorDetect:
  4906                           	callstack 23
  4907   000E28                     
  4908                           ;MazeRobot.X/color.c: 132:         RGB RGBVal;;MazeRobot.X/color.c: 133:         getColo
      +                          r(&RGBVal);
  4909   000E28  0EBD               	movlw	low colorDetect@RGBVal
  4910   000E2A  6E10               	movwf	getColor@v^0,c
  4911   000E2C  0E00               	movlw	high colorDetect@RGBVal
  4912   000E2E  6E11               	movwf	(getColor@v+1)^0,c
  4913   000E30  EC4A  F023         	call	_getColor	;wreg free
  4914   000E34                     
  4915                           ;MazeRobot.X/color.c: 135:         unsigned int ambientR = ambientRGBVal->R;
  4916   000E34  C0A1  FFD9         	movff	colorDetect@ambientRGBVal,fsr2l
  4917   000E38  C0A2  FFDA         	movff	colorDetect@ambientRGBVal+1,fsr2h
  4918   000E3C  CFDE F0B5          	movff	postinc2,colorDetect@ambientR
  4919   000E40  CFDD F0B6          	movff	postdec2,colorDetect@ambientR+1
  4920   000E44                     
  4921                           ;MazeRobot.X/color.c: 136:         unsigned int ambientG = ambientRGBVal->G;
  4922   000E44  0100               	movlb	0	; () banked
  4923   000E46  EE20 F002          	lfsr	2,2
  4924   000E4A  51A1               	movf	colorDetect@ambientRGBVal& (0+255),w,b
  4925   000E4C  26D9               	addwf	fsr2l,f,c
  4926   000E4E  51A2               	movf	(colorDetect@ambientRGBVal+1)& (0+255),w,b
  4927   000E50  22DA               	addwfc	fsr2h,f,c
  4928   000E52  CFDE F0B7          	movff	postinc2,colorDetect@ambientG
  4929   000E56  CFDD F0B8          	movff	postdec2,colorDetect@ambientG+1
  4930   000E5A                     
  4931                           ; BSR set to: 0
  4932                           ;MazeRobot.X/color.c: 137:         unsigned int ambientB = ambientRGBVal->B;
  4933   000E5A  EE20 F004          	lfsr	2,4
  4934   000E5E  51A1               	movf	colorDetect@ambientRGBVal& (0+255),w,b
  4935   000E60  26D9               	addwf	fsr2l,f,c
  4936   000E62  51A2               	movf	(colorDetect@ambientRGBVal+1)& (0+255),w,b
  4937   000E64  22DA               	addwfc	fsr2h,f,c
  4938   000E66  CFDE F0B9          	movff	postinc2,colorDetect@ambientB
  4939   000E6A  CFDD F0BA          	movff	postdec2,colorDetect@ambientB+1
  4940   000E6E                     
  4941                           ; BSR set to: 0
  4942                           ;MazeRobot.X/color.c: 139:         float whiteR = whiteRGBVal->R;
  4943   000E6E  C0A3  FFD9         	movff	colorDetect@whiteRGBVal,fsr2l
  4944   000E72  C0A4  FFDA         	movff	colorDetect@whiteRGBVal+1,fsr2h
  4945   000E76  CFDE F04F          	movff	postinc2,??_colorDetect
  4946   000E7A  CFDD F050          	movff	postdec2,??_colorDetect+1
  4947   000E7E  C04F  F005         	movff	??_colorDetect,___xxtofl@val
  4948   000E82  C050  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  4949   000E86  6A07               	clrf	(___xxtofl@val+2)^0,c
  4950   000E88  6A08               	clrf	(___xxtofl@val+3)^0,c
  4951   000E8A  0E00               	movlw	0
  4952   000E8C  ECC5  F017         	call	___xxtofl
  4953   000E90  C005  F0A9         	movff	?___xxtofl,colorDetect@whiteR
  4954   000E94  C006  F0AA         	movff	?___xxtofl+1,colorDetect@whiteR+1
  4955   000E98  C007  F0AB         	movff	?___xxtofl+2,colorDetect@whiteR+2
  4956   000E9C  C008  F0AC         	movff	?___xxtofl+3,colorDetect@whiteR+3
  4957   000EA0                     
  4958                           ;MazeRobot.X/color.c: 140:         float whiteG = whiteRGBVal->G;
  4959   000EA0  0100               	movlb	0	; () banked
  4960   000EA2  EE20 F002          	lfsr	2,2
  4961   000EA6  51A3               	movf	colorDetect@whiteRGBVal& (0+255),w,b
  4962   000EA8  26D9               	addwf	fsr2l,f,c
  4963   000EAA  51A4               	movf	(colorDetect@whiteRGBVal+1)& (0+255),w,b
  4964   000EAC  22DA               	addwfc	fsr2h,f,c
  4965   000EAE  CFDE F04F          	movff	postinc2,??_colorDetect
  4966   000EB2  CFDD F050          	movff	postdec2,??_colorDetect+1
  4967   000EB6  C04F  F005         	movff	??_colorDetect,___xxtofl@val
  4968   000EBA  C050  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  4969   000EBE  6A07               	clrf	(___xxtofl@val+2)^0,c
  4970   000EC0  6A08               	clrf	(___xxtofl@val+3)^0,c
  4971   000EC2  0E00               	movlw	0
  4972   000EC4  ECC5  F017         	call	___xxtofl
  4973   000EC8  C005  F0AD         	movff	?___xxtofl,colorDetect@whiteG
  4974   000ECC  C006  F0AE         	movff	?___xxtofl+1,colorDetect@whiteG+1
  4975   000ED0  C007  F0AF         	movff	?___xxtofl+2,colorDetect@whiteG+2
  4976   000ED4  C008  F0B0         	movff	?___xxtofl+3,colorDetect@whiteG+3
  4977   000ED8                     
  4978                           ;MazeRobot.X/color.c: 141:         float whiteB = whiteRGBVal->B;
  4979   000ED8  0100               	movlb	0	; () banked
  4980   000EDA  EE20 F004          	lfsr	2,4
  4981   000EDE  51A3               	movf	colorDetect@whiteRGBVal& (0+255),w,b
  4982   000EE0  26D9               	addwf	fsr2l,f,c
  4983   000EE2  51A4               	movf	(colorDetect@whiteRGBVal+1)& (0+255),w,b
  4984   000EE4  22DA               	addwfc	fsr2h,f,c
  4985   000EE6  CFDE F04F          	movff	postinc2,??_colorDetect
  4986   000EEA  CFDD F050          	movff	postdec2,??_colorDetect+1
  4987   000EEE  C04F  F005         	movff	??_colorDetect,___xxtofl@val
  4988   000EF2  C050  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  4989   000EF6  6A07               	clrf	(___xxtofl@val+2)^0,c
  4990   000EF8  6A08               	clrf	(___xxtofl@val+3)^0,c
  4991   000EFA  0E00               	movlw	0
  4992   000EFC  ECC5  F017         	call	___xxtofl
  4993   000F00  C005  F0B1         	movff	?___xxtofl,colorDetect@whiteB
  4994   000F04  C006  F0B2         	movff	?___xxtofl+1,colorDetect@whiteB+1
  4995   000F08  C007  F0B3         	movff	?___xxtofl+2,colorDetect@whiteB+2
  4996   000F0C  C008  F0B4         	movff	?___xxtofl+3,colorDetect@whiteB+3
  4997   000F10  0100               	movlb	0	; () banked
  4998   000F12  EE20 F006          	lfsr	2,6
  4999   000F16  51A3               	movf	colorDetect@whiteRGBVal& (0+255),w,b
  5000   000F18  26D9               	addwf	fsr2l,f,c
  5001   000F1A  51A4               	movf	(colorDetect@whiteRGBVal+1)& (0+255),w,b
  5002   000F1C  22DA               	addwfc	fsr2h,f,c
  5003   000F1E  CFDE F04F          	movff	postinc2,??_colorDetect
  5004   000F22  CFDD F050          	movff	postdec2,??_colorDetect+1
  5005   000F26  C04F  F005         	movff	??_colorDetect,___xxtofl@val
  5006   000F2A  C050  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  5007   000F2E  6A07               	clrf	(___xxtofl@val+2)^0,c
  5008   000F30  6A08               	clrf	(___xxtofl@val+3)^0,c
  5009   000F32  0E00               	movlw	0
  5010   000F34  ECC5  F017         	call	___xxtofl
  5011   000F38                     
  5012                           ;MazeRobot.X/color.c: 144:         float redPrint = (RGBVal.R-ambientR)/((whiteR-(float)
      +                          ambientR)*(clearRef));
  5013   000F38  0100               	movlb	0	; () banked
  5014   000F3A  51B5               	movf	colorDetect@ambientR& (0+255),w,b
  5015   000F3C  5DBD               	subwf	colorDetect@RGBVal& (0+255),w,b
  5016   000F3E  6E4F               	movwf	??_colorDetect^0,c
  5017   000F40  51B6               	movf	(colorDetect@ambientR+1)& (0+255),w,b
  5018   000F42  59BE               	subwfb	(colorDetect@RGBVal+1)& (0+255),w,b
  5019   000F44  6E50               	movwf	(??_colorDetect+1)^0,c
  5020   000F46  C04F  F005         	movff	??_colorDetect,___xxtofl@val
  5021   000F4A  C050  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  5022   000F4E  6A07               	clrf	(___xxtofl@val+2)^0,c
  5023   000F50  6A08               	clrf	(___xxtofl@val+3)^0,c
  5024   000F52  0E00               	movlw	0
  5025   000F54  ECC5  F017         	call	___xxtofl
  5026   000F58  C005  F036         	movff	?___xxtofl,___fldiv@b
  5027   000F5C  C006  F037         	movff	?___xxtofl+1,___fldiv@b+1
  5028   000F60  C007  F038         	movff	?___xxtofl+2,___fldiv@b+2
  5029   000F64  C008  F039         	movff	?___xxtofl+3,___fldiv@b+3
  5030   000F68  C09D  F021         	movff	colorDetect@clearRef,___flmul@a
  5031   000F6C  C09E  F022         	movff	colorDetect@clearRef+1,___flmul@a+1
  5032   000F70  C09F  F023         	movff	colorDetect@clearRef+2,___flmul@a+2
  5033   000F74  C0A0  F024         	movff	colorDetect@clearRef+3,___flmul@a+3
  5034   000F78  C0B5  F005         	movff	colorDetect@ambientR,___xxtofl@val
  5035   000F7C  C0B6  F006         	movff	colorDetect@ambientR+1,___xxtofl@val+1
  5036   000F80  6A07               	clrf	(___xxtofl@val+2)^0,c
  5037   000F82  6A08               	clrf	(___xxtofl@val+3)^0,c
  5038   000F84  0E00               	movlw	0
  5039   000F86  ECC5  F017         	call	___xxtofl
  5040   000F8A  C005  F019         	movff	?___xxtofl,___flsub@a
  5041   000F8E  C006  F01A         	movff	?___xxtofl+1,___flsub@a+1
  5042   000F92  C007  F01B         	movff	?___xxtofl+2,___flsub@a+2
  5043   000F96  C008  F01C         	movff	?___xxtofl+3,___flsub@a+3
  5044   000F9A  C0A9  F015         	movff	colorDetect@whiteR,___flsub@b
  5045   000F9E  C0AA  F016         	movff	colorDetect@whiteR+1,___flsub@b+1
  5046   000FA2  C0AB  F017         	movff	colorDetect@whiteR+2,___flsub@b+2
  5047   000FA6  C0AC  F018         	movff	colorDetect@whiteR+3,___flsub@b+3
  5048   000FAA  EC91  F024         	call	___flsub	;wreg free
  5049   000FAE  C015  F01D         	movff	?___flsub,___flmul@b
  5050   000FB2  C016  F01E         	movff	?___flsub+1,___flmul@b+1
  5051   000FB6  C017  F01F         	movff	?___flsub+2,___flmul@b+2
  5052   000FBA  C018  F020         	movff	?___flsub+3,___flmul@b+3
  5053   000FBE  EC77  F011         	call	___flmul	;wreg free
  5054   000FC2  C01D  F03A         	movff	?___flmul,___fldiv@a
  5055   000FC6  C01E  F03B         	movff	?___flmul+1,___fldiv@a+1
  5056   000FCA  C01F  F03C         	movff	?___flmul+2,___fldiv@a+2
  5057   000FCE  C020  F03D         	movff	?___flmul+3,___fldiv@a+3
  5058   000FD2  EC8C  F013         	call	___fldiv	;wreg free
  5059   000FD6  C036  F0C5         	movff	?___fldiv,colorDetect@redPrint
  5060   000FDA  C037  F0C6         	movff	?___fldiv+1,colorDetect@redPrint+1
  5061   000FDE  C038  F0C7         	movff	?___fldiv+2,colorDetect@redPrint+2
  5062   000FE2  C039  F0C8         	movff	?___fldiv+3,colorDetect@redPrint+3
  5063   000FE6                     
  5064                           ;MazeRobot.X/color.c: 145:         float greenPrint = (RGBVal.G-ambientG)/((whiteG-(floa
      +                          t)ambientG)*(clearRef));
  5065   000FE6  0100               	movlb	0	; () banked
  5066   000FE8  51B7               	movf	colorDetect@ambientG& (0+255),w,b
  5067   000FEA  5DBF               	subwf	(colorDetect@RGBVal+2)& (0+255),w,b
  5068   000FEC  6E4F               	movwf	??_colorDetect^0,c
  5069   000FEE  51B8               	movf	(colorDetect@ambientG+1)& (0+255),w,b
  5070   000FF0  59C0               	subwfb	(colorDetect@RGBVal+3)& (0+255),w,b
  5071   000FF2  6E50               	movwf	(??_colorDetect+1)^0,c
  5072   000FF4  C04F  F005         	movff	??_colorDetect,___xxtofl@val
  5073   000FF8  C050  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  5074   000FFC  6A07               	clrf	(___xxtofl@val+2)^0,c
  5075   000FFE  6A08               	clrf	(___xxtofl@val+3)^0,c
  5076   001000  0E00               	movlw	0
  5077   001002  ECC5  F017         	call	___xxtofl
  5078   001006  C005  F036         	movff	?___xxtofl,___fldiv@b
  5079   00100A  C006  F037         	movff	?___xxtofl+1,___fldiv@b+1
  5080   00100E  C007  F038         	movff	?___xxtofl+2,___fldiv@b+2
  5081   001012  C008  F039         	movff	?___xxtofl+3,___fldiv@b+3
  5082   001016  C09D  F021         	movff	colorDetect@clearRef,___flmul@a
  5083   00101A  C09E  F022         	movff	colorDetect@clearRef+1,___flmul@a+1
  5084   00101E  C09F  F023         	movff	colorDetect@clearRef+2,___flmul@a+2
  5085   001022  C0A0  F024         	movff	colorDetect@clearRef+3,___flmul@a+3
  5086   001026  C0B7  F005         	movff	colorDetect@ambientG,___xxtofl@val
  5087   00102A  C0B8  F006         	movff	colorDetect@ambientG+1,___xxtofl@val+1
  5088   00102E  6A07               	clrf	(___xxtofl@val+2)^0,c
  5089   001030  6A08               	clrf	(___xxtofl@val+3)^0,c
  5090   001032  0E00               	movlw	0
  5091   001034  ECC5  F017         	call	___xxtofl
  5092   001038  C005  F019         	movff	?___xxtofl,___flsub@a
  5093   00103C  C006  F01A         	movff	?___xxtofl+1,___flsub@a+1
  5094   001040  C007  F01B         	movff	?___xxtofl+2,___flsub@a+2
  5095   001044  C008  F01C         	movff	?___xxtofl+3,___flsub@a+3
  5096   001048  C0AD  F015         	movff	colorDetect@whiteG,___flsub@b
  5097   00104C  C0AE  F016         	movff	colorDetect@whiteG+1,___flsub@b+1
  5098   001050  C0AF  F017         	movff	colorDetect@whiteG+2,___flsub@b+2
  5099   001054  C0B0  F018         	movff	colorDetect@whiteG+3,___flsub@b+3
  5100   001058  EC91  F024         	call	___flsub	;wreg free
  5101   00105C  C015  F01D         	movff	?___flsub,___flmul@b
  5102   001060  C016  F01E         	movff	?___flsub+1,___flmul@b+1
  5103   001064  C017  F01F         	movff	?___flsub+2,___flmul@b+2
  5104   001068  C018  F020         	movff	?___flsub+3,___flmul@b+3
  5105   00106C  EC77  F011         	call	___flmul	;wreg free
  5106   001070  C01D  F03A         	movff	?___flmul,___fldiv@a
  5107   001074  C01E  F03B         	movff	?___flmul+1,___fldiv@a+1
  5108   001078  C01F  F03C         	movff	?___flmul+2,___fldiv@a+2
  5109   00107C  C020  F03D         	movff	?___flmul+3,___fldiv@a+3
  5110   001080  EC8C  F013         	call	___fldiv	;wreg free
  5111   001084  C036  F0C9         	movff	?___fldiv,colorDetect@greenPrint
  5112   001088  C037  F0CA         	movff	?___fldiv+1,colorDetect@greenPrint+1
  5113   00108C  C038  F0CB         	movff	?___fldiv+2,colorDetect@greenPrint+2
  5114   001090  C039  F0CC         	movff	?___fldiv+3,colorDetect@greenPrint+3
  5115   001094                     
  5116                           ;MazeRobot.X/color.c: 146:         float bluePrint = (RGBVal.B-ambientB)/((whiteB-(float
      +                          )ambientB)*(clearRef));
  5117   001094  0100               	movlb	0	; () banked
  5118   001096  51B9               	movf	colorDetect@ambientB& (0+255),w,b
  5119   001098  5DC1               	subwf	(colorDetect@RGBVal+4)& (0+255),w,b
  5120   00109A  6E4F               	movwf	??_colorDetect^0,c
  5121   00109C  51BA               	movf	(colorDetect@ambientB+1)& (0+255),w,b
  5122   00109E  59C2               	subwfb	(colorDetect@RGBVal+5)& (0+255),w,b
  5123   0010A0  6E50               	movwf	(??_colorDetect+1)^0,c
  5124   0010A2  C04F  F005         	movff	??_colorDetect,___xxtofl@val
  5125   0010A6  C050  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  5126   0010AA  6A07               	clrf	(___xxtofl@val+2)^0,c
  5127   0010AC  6A08               	clrf	(___xxtofl@val+3)^0,c
  5128   0010AE  0E00               	movlw	0
  5129   0010B0  ECC5  F017         	call	___xxtofl
  5130   0010B4  C005  F036         	movff	?___xxtofl,___fldiv@b
  5131   0010B8  C006  F037         	movff	?___xxtofl+1,___fldiv@b+1
  5132   0010BC  C007  F038         	movff	?___xxtofl+2,___fldiv@b+2
  5133   0010C0  C008  F039         	movff	?___xxtofl+3,___fldiv@b+3
  5134   0010C4  C09D  F021         	movff	colorDetect@clearRef,___flmul@a
  5135   0010C8  C09E  F022         	movff	colorDetect@clearRef+1,___flmul@a+1
  5136   0010CC  C09F  F023         	movff	colorDetect@clearRef+2,___flmul@a+2
  5137   0010D0  C0A0  F024         	movff	colorDetect@clearRef+3,___flmul@a+3
  5138   0010D4  C0B9  F005         	movff	colorDetect@ambientB,___xxtofl@val
  5139   0010D8  C0BA  F006         	movff	colorDetect@ambientB+1,___xxtofl@val+1
  5140   0010DC  6A07               	clrf	(___xxtofl@val+2)^0,c
  5141   0010DE  6A08               	clrf	(___xxtofl@val+3)^0,c
  5142   0010E0  0E00               	movlw	0
  5143   0010E2  ECC5  F017         	call	___xxtofl
  5144   0010E6  C005  F019         	movff	?___xxtofl,___flsub@a
  5145   0010EA  C006  F01A         	movff	?___xxtofl+1,___flsub@a+1
  5146   0010EE  C007  F01B         	movff	?___xxtofl+2,___flsub@a+2
  5147   0010F2  C008  F01C         	movff	?___xxtofl+3,___flsub@a+3
  5148   0010F6  C0B1  F015         	movff	colorDetect@whiteB,___flsub@b
  5149   0010FA  C0B2  F016         	movff	colorDetect@whiteB+1,___flsub@b+1
  5150   0010FE  C0B3  F017         	movff	colorDetect@whiteB+2,___flsub@b+2
  5151   001102  C0B4  F018         	movff	colorDetect@whiteB+3,___flsub@b+3
  5152   001106  EC91  F024         	call	___flsub	;wreg free
  5153   00110A  C015  F01D         	movff	?___flsub,___flmul@b
  5154   00110E  C016  F01E         	movff	?___flsub+1,___flmul@b+1
  5155   001112  C017  F01F         	movff	?___flsub+2,___flmul@b+2
  5156   001116  C018  F020         	movff	?___flsub+3,___flmul@b+3
  5157   00111A  EC77  F011         	call	___flmul	;wreg free
  5158   00111E  C01D  F03A         	movff	?___flmul,___fldiv@a
  5159   001122  C01E  F03B         	movff	?___flmul+1,___fldiv@a+1
  5160   001126  C01F  F03C         	movff	?___flmul+2,___fldiv@a+2
  5161   00112A  C020  F03D         	movff	?___flmul+3,___fldiv@a+3
  5162   00112E  EC8C  F013         	call	___fldiv	;wreg free
  5163   001132  C036  F0CD         	movff	?___fldiv,colorDetect@bluePrint
  5164   001136  C037  F0CE         	movff	?___fldiv+1,colorDetect@bluePrint+1
  5165   00113A  C038  F0CF         	movff	?___fldiv+2,colorDetect@bluePrint+2
  5166   00113E  C039  F0D0         	movff	?___fldiv+3,colorDetect@bluePrint+3
  5167   001142                     
  5168                           ;MazeRobot.X/color.c: 148:         unsigned int colour_ref = 11;
  5169   001142  0E00               	movlw	0
  5170   001144  0100               	movlb	0	; () banked
  5171   001146  6FBC               	movwf	(colorDetect@colour_ref+1)& (0+255),b
  5172   001148  0E0B               	movlw	11
  5173   00114A  6FBB               	movwf	colorDetect@colour_ref& (0+255),b
  5174   00114C                     
  5175                           ; BSR set to: 0
  5176                           ;MazeRobot.X/color.c: 150:         if ((redPrint < 0) | (redPrint > 2)) { redPrint = 0.0
      +                          ;}
  5177   00114C  BFC8               	btfsc	(colorDetect@redPrint+3)& (0+255),7,b
  5178   00114E  EFAB  F008         	goto	u5511
  5179   001152  EFAD  F008         	goto	u5510
  5180   001156                     u5511:
  5181   001156  EFC6  F008         	goto	l5116
  5182   00115A                     u5510:
  5183   00115A                     
  5184                           ; BSR set to: 0
  5185   00115A  0E00               	movlw	0
  5186   00115C  6E1D               	movwf	___flge@ff1^0,c
  5187   00115E  0E00               	movlw	0
  5188   001160  6E1E               	movwf	(___flge@ff1+1)^0,c
  5189   001162  0E00               	movlw	0
  5190   001164  6E1F               	movwf	(___flge@ff1+2)^0,c
  5191   001166  0E40               	movlw	64
  5192   001168  6E20               	movwf	(___flge@ff1+3)^0,c
  5193   00116A  C0C5  F021         	movff	colorDetect@redPrint,___flge@ff2
  5194   00116E  C0C6  F022         	movff	colorDetect@redPrint+1,___flge@ff2+1
  5195   001172  C0C7  F023         	movff	colorDetect@redPrint+2,___flge@ff2+2
  5196   001176  C0C8  F024         	movff	colorDetect@redPrint+3,___flge@ff2+3
  5197   00117A  EC94  F01E         	call	___flge	;wreg free
  5198   00117E  B0D8               	btfsc	status,0,c
  5199   001180  EFC4  F008         	goto	u5521
  5200   001184  EFC6  F008         	goto	u5520
  5201   001188                     u5521:
  5202   001188  EFCF  F008         	goto	l5118
  5203   00118C                     u5520:
  5204   00118C                     l5116:
  5205   00118C  0E00               	movlw	0
  5206   00118E  0100               	movlb	0	; () banked
  5207   001190  6FC5               	movwf	colorDetect@redPrint& (0+255),b
  5208   001192  0E00               	movlw	0
  5209   001194  6FC6               	movwf	(colorDetect@redPrint+1)& (0+255),b
  5210   001196  0E00               	movlw	0
  5211   001198  6FC7               	movwf	(colorDetect@redPrint+2)& (0+255),b
  5212   00119A  0E00               	movlw	0
  5213   00119C  6FC8               	movwf	(colorDetect@redPrint+3)& (0+255),b
  5214   00119E                     l5118:
  5215                           
  5216                           ;MazeRobot.X/color.c: 151:         if ((greenPrint < 0) | (greenPrint > 2)) {greenPrint 
      +                          = 0.0;}
  5217   00119E  0100               	movlb	0	; () banked
  5218   0011A0  BFCC               	btfsc	(colorDetect@greenPrint+3)& (0+255),7,b
  5219   0011A2  EFD5  F008         	goto	u5531
  5220   0011A6  EFD7  F008         	goto	u5530
  5221   0011AA                     u5531:
  5222   0011AA  EFF0  F008         	goto	l5122
  5223   0011AE                     u5530:
  5224   0011AE                     
  5225                           ; BSR set to: 0
  5226   0011AE  0E00               	movlw	0
  5227   0011B0  6E1D               	movwf	___flge@ff1^0,c
  5228   0011B2  0E00               	movlw	0
  5229   0011B4  6E1E               	movwf	(___flge@ff1+1)^0,c
  5230   0011B6  0E00               	movlw	0
  5231   0011B8  6E1F               	movwf	(___flge@ff1+2)^0,c
  5232   0011BA  0E40               	movlw	64
  5233   0011BC  6E20               	movwf	(___flge@ff1+3)^0,c
  5234   0011BE  C0C9  F021         	movff	colorDetect@greenPrint,___flge@ff2
  5235   0011C2  C0CA  F022         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  5236   0011C6  C0CB  F023         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  5237   0011CA  C0CC  F024         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  5238   0011CE  EC94  F01E         	call	___flge	;wreg free
  5239   0011D2  B0D8               	btfsc	status,0,c
  5240   0011D4  EFEE  F008         	goto	u5541
  5241   0011D8  EFF0  F008         	goto	u5540
  5242   0011DC                     u5541:
  5243   0011DC  EFF9  F008         	goto	l5124
  5244   0011E0                     u5540:
  5245   0011E0                     l5122:
  5246   0011E0  0E00               	movlw	0
  5247   0011E2  0100               	movlb	0	; () banked
  5248   0011E4  6FC9               	movwf	colorDetect@greenPrint& (0+255),b
  5249   0011E6  0E00               	movlw	0
  5250   0011E8  6FCA               	movwf	(colorDetect@greenPrint+1)& (0+255),b
  5251   0011EA  0E00               	movlw	0
  5252   0011EC  6FCB               	movwf	(colorDetect@greenPrint+2)& (0+255),b
  5253   0011EE  0E00               	movlw	0
  5254   0011F0  6FCC               	movwf	(colorDetect@greenPrint+3)& (0+255),b
  5255   0011F2                     l5124:
  5256                           
  5257                           ;MazeRobot.X/color.c: 152:         if ((bluePrint < 0) | (bluePrint > 2)){ bluePrint = 0
      +                          .0;}
  5258   0011F2  0100               	movlb	0	; () banked
  5259   0011F4  BFD0               	btfsc	(colorDetect@bluePrint+3)& (0+255),7,b
  5260   0011F6  EFFF  F008         	goto	u5551
  5261   0011FA  EF01  F009         	goto	u5550
  5262   0011FE                     u5551:
  5263   0011FE  EF1A  F009         	goto	l5128
  5264   001202                     u5550:
  5265   001202                     
  5266                           ; BSR set to: 0
  5267   001202  0E00               	movlw	0
  5268   001204  6E1D               	movwf	___flge@ff1^0,c
  5269   001206  0E00               	movlw	0
  5270   001208  6E1E               	movwf	(___flge@ff1+1)^0,c
  5271   00120A  0E00               	movlw	0
  5272   00120C  6E1F               	movwf	(___flge@ff1+2)^0,c
  5273   00120E  0E40               	movlw	64
  5274   001210  6E20               	movwf	(___flge@ff1+3)^0,c
  5275   001212  C0CD  F021         	movff	colorDetect@bluePrint,___flge@ff2
  5276   001216  C0CE  F022         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  5277   00121A  C0CF  F023         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  5278   00121E  C0D0  F024         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  5279   001222  EC94  F01E         	call	___flge	;wreg free
  5280   001226  B0D8               	btfsc	status,0,c
  5281   001228  EF18  F009         	goto	u5561
  5282   00122C  EF1A  F009         	goto	u5560
  5283   001230                     u5561:
  5284   001230  EF23  F009         	goto	l5130
  5285   001234                     u5560:
  5286   001234                     l5128:
  5287   001234  0E00               	movlw	0
  5288   001236  0100               	movlb	0	; () banked
  5289   001238  6FCD               	movwf	colorDetect@bluePrint& (0+255),b
  5290   00123A  0E00               	movlw	0
  5291   00123C  6FCE               	movwf	(colorDetect@bluePrint+1)& (0+255),b
  5292   00123E  0E00               	movlw	0
  5293   001240  6FCF               	movwf	(colorDetect@bluePrint+2)& (0+255),b
  5294   001242  0E00               	movlw	0
  5295   001244  6FD0               	movwf	(colorDetect@bluePrint+3)& (0+255),b
  5296   001246                     l5130:
  5297                           
  5298                           ;MazeRobot.X/color.c: 155:         if ((redPrint > 0.9) & (greenPrint > 0.9) & (bluePrin
      +                          t > 0.9)){
  5299   001246  0E66               	movlw	102
  5300   001248  6E1D               	movwf	___flge@ff1^0,c
  5301   00124A  0E66               	movlw	102
  5302   00124C  6E1E               	movwf	(___flge@ff1+1)^0,c
  5303   00124E  0E66               	movlw	102
  5304   001250  6E1F               	movwf	(___flge@ff1+2)^0,c
  5305   001252  0E3F               	movlw	63
  5306   001254  6E20               	movwf	(___flge@ff1+3)^0,c
  5307   001256  C0C5  F021         	movff	colorDetect@redPrint,___flge@ff2
  5308   00125A  C0C6  F022         	movff	colorDetect@redPrint+1,___flge@ff2+1
  5309   00125E  C0C7  F023         	movff	colorDetect@redPrint+2,___flge@ff2+2
  5310   001262  C0C8  F024         	movff	colorDetect@redPrint+3,___flge@ff2+3
  5311   001266  EC94  F01E         	call	___flge	;wreg free
  5312   00126A  B0D8               	btfsc	status,0,c
  5313   00126C  EF3A  F009         	goto	u5571
  5314   001270  EF3C  F009         	goto	u5570
  5315   001274                     u5571:
  5316   001274  EF75  F009         	goto	l5138
  5317   001278                     u5570:
  5318   001278  0E66               	movlw	102
  5319   00127A  6E1D               	movwf	___flge@ff1^0,c
  5320   00127C  0E66               	movlw	102
  5321   00127E  6E1E               	movwf	(___flge@ff1+1)^0,c
  5322   001280  0E66               	movlw	102
  5323   001282  6E1F               	movwf	(___flge@ff1+2)^0,c
  5324   001284  0E3F               	movlw	63
  5325   001286  6E20               	movwf	(___flge@ff1+3)^0,c
  5326   001288  C0C9  F021         	movff	colorDetect@greenPrint,___flge@ff2
  5327   00128C  C0CA  F022         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  5328   001290  C0CB  F023         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  5329   001294  C0CC  F024         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  5330   001298  EC94  F01E         	call	___flge	;wreg free
  5331   00129C  B0D8               	btfsc	status,0,c
  5332   00129E  EF53  F009         	goto	u5581
  5333   0012A2  EF55  F009         	goto	u5580
  5334   0012A6                     u5581:
  5335   0012A6  EF75  F009         	goto	l5138
  5336   0012AA                     u5580:
  5337   0012AA  0E66               	movlw	102
  5338   0012AC  6E1D               	movwf	___flge@ff1^0,c
  5339   0012AE  0E66               	movlw	102
  5340   0012B0  6E1E               	movwf	(___flge@ff1+1)^0,c
  5341   0012B2  0E66               	movlw	102
  5342   0012B4  6E1F               	movwf	(___flge@ff1+2)^0,c
  5343   0012B6  0E3F               	movlw	63
  5344   0012B8  6E20               	movwf	(___flge@ff1+3)^0,c
  5345   0012BA  C0CD  F021         	movff	colorDetect@bluePrint,___flge@ff2
  5346   0012BE  C0CE  F022         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  5347   0012C2  C0CF  F023         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  5348   0012C6  C0D0  F024         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  5349   0012CA  EC94  F01E         	call	___flge	;wreg free
  5350   0012CE  B0D8               	btfsc	status,0,c
  5351   0012D0  EF6C  F009         	goto	u5591
  5352   0012D4  EF6E  F009         	goto	u5590
  5353   0012D8                     u5591:
  5354   0012D8  EF75  F009         	goto	l5138
  5355   0012DC                     u5590:
  5356   0012DC                     
  5357                           ;MazeRobot.X/color.c: 156:         colour_ref = 8;
  5358   0012DC  0E00               	movlw	0
  5359   0012DE  0100               	movlb	0	; () banked
  5360   0012E0  6FBC               	movwf	(colorDetect@colour_ref+1)& (0+255),b
  5361   0012E2  0E08               	movlw	8
  5362   0012E4  6FBB               	movwf	colorDetect@colour_ref& (0+255),b
  5363                           
  5364                           ;MazeRobot.X/color.c: 157:         }
  5365   0012E6  EFF9  F00C         	goto	l5240
  5366   0012EA                     l5138:
  5367   0012EA  0E00               	movlw	0
  5368   0012EC  6E1D               	movwf	___flge@ff1^0,c
  5369   0012EE  0E00               	movlw	0
  5370   0012F0  6E1E               	movwf	(___flge@ff1+1)^0,c
  5371   0012F2  0EC0               	movlw	192
  5372   0012F4  6E1F               	movwf	(___flge@ff1+2)^0,c
  5373   0012F6  0E3F               	movlw	63
  5374   0012F8  6E20               	movwf	(___flge@ff1+3)^0,c
  5375   0012FA  C0C5  F021         	movff	colorDetect@redPrint,___flge@ff2
  5376   0012FE  C0C6  F022         	movff	colorDetect@redPrint+1,___flge@ff2+1
  5377   001302  C0C7  F023         	movff	colorDetect@redPrint+2,___flge@ff2+2
  5378   001306  C0C8  F024         	movff	colorDetect@redPrint+3,___flge@ff2+3
  5379   00130A  EC94  F01E         	call	___flge	;wreg free
  5380   00130E  B0D8               	btfsc	status,0,c
  5381   001310  EF8C  F009         	goto	u5601
  5382   001314  EF8E  F009         	goto	u5600
  5383   001318                     u5601:
  5384   001318  EF03  F00A         	goto	l5152
  5385   00131C                     u5600:
  5386   00131C  0ECD               	movlw	205
  5387   00131E  6E1D               	movwf	___flge@ff1^0,c
  5388   001320  0ECC               	movlw	204
  5389   001322  6E1E               	movwf	(___flge@ff1+1)^0,c
  5390   001324  0E4C               	movlw	76
  5391   001326  6E1F               	movwf	(___flge@ff1+2)^0,c
  5392   001328  0E3F               	movlw	63
  5393   00132A  6E20               	movwf	(___flge@ff1+3)^0,c
  5394   00132C  C0C9  F019         	movff	colorDetect@greenPrint,___flsub@a
  5395   001330  C0CA  F01A         	movff	colorDetect@greenPrint+1,___flsub@a+1
  5396   001334  C0CB  F01B         	movff	colorDetect@greenPrint+2,___flsub@a+2
  5397   001338  C0CC  F01C         	movff	colorDetect@greenPrint+3,___flsub@a+3
  5398   00133C  C0C5  F015         	movff	colorDetect@redPrint,___flsub@b
  5399   001340  C0C6  F016         	movff	colorDetect@redPrint+1,___flsub@b+1
  5400   001344  C0C7  F017         	movff	colorDetect@redPrint+2,___flsub@b+2
  5401   001348  C0C8  F018         	movff	colorDetect@redPrint+3,___flsub@b+3
  5402   00134C  EC91  F024         	call	___flsub	;wreg free
  5403   001350  C015  F021         	movff	?___flsub,___flge@ff2
  5404   001354  C016  F022         	movff	?___flsub+1,___flge@ff2+1
  5405   001358  C017  F023         	movff	?___flsub+2,___flge@ff2+2
  5406   00135C  C018  F024         	movff	?___flsub+3,___flge@ff2+3
  5407   001360  EC94  F01E         	call	___flge	;wreg free
  5408   001364  B0D8               	btfsc	status,0,c
  5409   001366  EFB7  F009         	goto	u5611
  5410   00136A  EFB9  F009         	goto	u5610
  5411   00136E                     u5611:
  5412   00136E  EF03  F00A         	goto	l5152
  5413   001372                     u5610:
  5414   001372  0ECD               	movlw	205
  5415   001374  6E1D               	movwf	___flge@ff1^0,c
  5416   001376  0ECC               	movlw	204
  5417   001378  6E1E               	movwf	(___flge@ff1+1)^0,c
  5418   00137A  0E4C               	movlw	76
  5419   00137C  6E1F               	movwf	(___flge@ff1+2)^0,c
  5420   00137E  0E3F               	movlw	63
  5421   001380  6E20               	movwf	(___flge@ff1+3)^0,c
  5422   001382  C0CD  F019         	movff	colorDetect@bluePrint,___flsub@a
  5423   001386  C0CE  F01A         	movff	colorDetect@bluePrint+1,___flsub@a+1
  5424   00138A  C0CF  F01B         	movff	colorDetect@bluePrint+2,___flsub@a+2
  5425   00138E  C0D0  F01C         	movff	colorDetect@bluePrint+3,___flsub@a+3
  5426   001392  C0C5  F015         	movff	colorDetect@redPrint,___flsub@b
  5427   001396  C0C6  F016         	movff	colorDetect@redPrint+1,___flsub@b+1
  5428   00139A  C0C7  F017         	movff	colorDetect@redPrint+2,___flsub@b+2
  5429   00139E  C0C8  F018         	movff	colorDetect@redPrint+3,___flsub@b+3
  5430   0013A2  EC91  F024         	call	___flsub	;wreg free
  5431   0013A6  C015  F021         	movff	?___flsub,___flge@ff2
  5432   0013AA  C016  F022         	movff	?___flsub+1,___flge@ff2+1
  5433   0013AE  C017  F023         	movff	?___flsub+2,___flge@ff2+2
  5434   0013B2  C018  F024         	movff	?___flsub+3,___flge@ff2+3
  5435   0013B6  EC94  F01E         	call	___flge	;wreg free
  5436   0013BA  B0D8               	btfsc	status,0,c
  5437   0013BC  EFE2  F009         	goto	u5621
  5438   0013C0  EFE4  F009         	goto	u5620
  5439   0013C4                     u5621:
  5440   0013C4  EF03  F00A         	goto	l5152
  5441   0013C8                     u5620:
  5442   0013C8                     
  5443                           ;MazeRobot.X/color.c: 161:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5444   0013C8  0E2A               	movlw	42
  5445   0013CA  6E4F               	movwf	??_colorDetect^0,c
  5446   0013CC  0E8E               	movlw	142
  5447   0013CE                     u6187:
  5448   0013CE  2EE8               	decfsz	wreg,f,c
  5449   0013D0  D7FE               	bra	u6187
  5450   0013D2  2E4F               	decfsz	??_colorDetect^0,f,c
  5451   0013D4  D7FC               	bra	u6187
  5452   0013D6                     
  5453                           ;MazeRobot.X/color.c: 162:         turnRight_90(mL,mR);
  5454   0013D6  C0A5  F01E         	movff	colorDetect@mL,turnRight_90@mL
  5455   0013DA  C0A6  F01F         	movff	colorDetect@mL+1,turnRight_90@mL+1
  5456   0013DE  C0A7  F020         	movff	colorDetect@mR,turnRight_90@mR
  5457   0013E2  C0A8  F021         	movff	colorDetect@mR+1,turnRight_90@mR+1
  5458   0013E6  ECB8  F01C         	call	_turnRight_90	;wreg free
  5459   0013EA                     
  5460                           ;MazeRobot.X/color.c: 163:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5461   0013EA  0E2A               	movlw	42
  5462   0013EC  6E4F               	movwf	??_colorDetect^0,c
  5463   0013EE  0E8E               	movlw	142
  5464   0013F0                     u6197:
  5465   0013F0  2EE8               	decfsz	wreg,f,c
  5466   0013F2  D7FE               	bra	u6197
  5467   0013F4  2E4F               	decfsz	??_colorDetect^0,f,c
  5468   0013F6  D7FC               	bra	u6197
  5469   0013F8                     
  5470                           ;MazeRobot.X/color.c: 164:         colour_ref = 1;
  5471   0013F8  0E00               	movlw	0
  5472   0013FA  0100               	movlb	0	; () banked
  5473   0013FC  6FBC               	movwf	(colorDetect@colour_ref+1)& (0+255),b
  5474   0013FE  0E01               	movlw	1
  5475   001400  6FBB               	movwf	colorDetect@colour_ref& (0+255),b
  5476                           
  5477                           ;MazeRobot.X/color.c: 166:         }
  5478   001402  EFF9  F00C         	goto	l5240
  5479   001406                     l5152:
  5480   001406  0ECD               	movlw	205
  5481   001408  6E1D               	movwf	___flge@ff1^0,c
  5482   00140A  0ECC               	movlw	204
  5483   00140C  6E1E               	movwf	(___flge@ff1+1)^0,c
  5484   00140E  0ECC               	movlw	204
  5485   001410  6E1F               	movwf	(___flge@ff1+2)^0,c
  5486   001412  0E3E               	movlw	62
  5487   001414  6E20               	movwf	(___flge@ff1+3)^0,c
  5488   001416  C0C5  F019         	movff	colorDetect@redPrint,___flsub@a
  5489   00141A  C0C6  F01A         	movff	colorDetect@redPrint+1,___flsub@a+1
  5490   00141E  C0C7  F01B         	movff	colorDetect@redPrint+2,___flsub@a+2
  5491   001422  C0C8  F01C         	movff	colorDetect@redPrint+3,___flsub@a+3
  5492   001426  C0C9  F015         	movff	colorDetect@greenPrint,___flsub@b
  5493   00142A  C0CA  F016         	movff	colorDetect@greenPrint+1,___flsub@b+1
  5494   00142E  C0CB  F017         	movff	colorDetect@greenPrint+2,___flsub@b+2
  5495   001432  C0CC  F018         	movff	colorDetect@greenPrint+3,___flsub@b+3
  5496   001436  EC91  F024         	call	___flsub	;wreg free
  5497   00143A  C015  F021         	movff	?___flsub,___flge@ff2
  5498   00143E  C016  F022         	movff	?___flsub+1,___flge@ff2+1
  5499   001442  C017  F023         	movff	?___flsub+2,___flge@ff2+2
  5500   001446  C018  F024         	movff	?___flsub+3,___flge@ff2+3
  5501   00144A  EC94  F01E         	call	___flge	;wreg free
  5502   00144E  B0D8               	btfsc	status,0,c
  5503   001450  EF2C  F00A         	goto	u5631
  5504   001454  EF2E  F00A         	goto	u5630
  5505   001458                     u5631:
  5506   001458  EF91  F00A         	goto	l5166
  5507   00145C                     u5630:
  5508   00145C  0E00               	movlw	0
  5509   00145E  6E1D               	movwf	___flge@ff1^0,c
  5510   001460  0E00               	movlw	0
  5511   001462  6E1E               	movwf	(___flge@ff1+1)^0,c
  5512   001464  0E80               	movlw	128
  5513   001466  6E1F               	movwf	(___flge@ff1+2)^0,c
  5514   001468  0E3F               	movlw	63
  5515   00146A  6E20               	movwf	(___flge@ff1+3)^0,c
  5516   00146C  C0C9  F021         	movff	colorDetect@greenPrint,___flge@ff2
  5517   001470  C0CA  F022         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  5518   001474  C0CB  F023         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  5519   001478  C0CC  F024         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  5520   00147C  EC94  F01E         	call	___flge	;wreg free
  5521   001480  B0D8               	btfsc	status,0,c
  5522   001482  EF45  F00A         	goto	u5641
  5523   001486  EF47  F00A         	goto	u5640
  5524   00148A                     u5641:
  5525   00148A  EF91  F00A         	goto	l5166
  5526   00148E                     u5640:
  5527   00148E  0ECD               	movlw	205
  5528   001490  6E1D               	movwf	___flge@ff1^0,c
  5529   001492  0ECC               	movlw	204
  5530   001494  6E1E               	movwf	(___flge@ff1+1)^0,c
  5531   001496  0ECC               	movlw	204
  5532   001498  6E1F               	movwf	(___flge@ff1+2)^0,c
  5533   00149A  0E3E               	movlw	62
  5534   00149C  6E20               	movwf	(___flge@ff1+3)^0,c
  5535   00149E  C0CD  F019         	movff	colorDetect@bluePrint,___flsub@a
  5536   0014A2  C0CE  F01A         	movff	colorDetect@bluePrint+1,___flsub@a+1
  5537   0014A6  C0CF  F01B         	movff	colorDetect@bluePrint+2,___flsub@a+2
  5538   0014AA  C0D0  F01C         	movff	colorDetect@bluePrint+3,___flsub@a+3
  5539   0014AE  C0C9  F015         	movff	colorDetect@greenPrint,___flsub@b
  5540   0014B2  C0CA  F016         	movff	colorDetect@greenPrint+1,___flsub@b+1
  5541   0014B6  C0CB  F017         	movff	colorDetect@greenPrint+2,___flsub@b+2
  5542   0014BA  C0CC  F018         	movff	colorDetect@greenPrint+3,___flsub@b+3
  5543   0014BE  EC91  F024         	call	___flsub	;wreg free
  5544   0014C2  C015  F021         	movff	?___flsub,___flge@ff2
  5545   0014C6  C016  F022         	movff	?___flsub+1,___flge@ff2+1
  5546   0014CA  C017  F023         	movff	?___flsub+2,___flge@ff2+2
  5547   0014CE  C018  F024         	movff	?___flsub+3,___flge@ff2+3
  5548   0014D2  EC94  F01E         	call	___flge	;wreg free
  5549   0014D6  B0D8               	btfsc	status,0,c
  5550   0014D8  EF70  F00A         	goto	u5651
  5551   0014DC  EF72  F00A         	goto	u5650
  5552   0014E0                     u5651:
  5553   0014E0  EF91  F00A         	goto	l5166
  5554   0014E4                     u5650:
  5555   0014E4                     
  5556                           ;MazeRobot.X/color.c: 170:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5557   0014E4  0E2A               	movlw	42
  5558   0014E6  6E4F               	movwf	??_colorDetect^0,c
  5559   0014E8  0E8E               	movlw	142
  5560   0014EA                     u6207:
  5561   0014EA  2EE8               	decfsz	wreg,f,c
  5562   0014EC  D7FE               	bra	u6207
  5563   0014EE  2E4F               	decfsz	??_colorDetect^0,f,c
  5564   0014F0  D7FC               	bra	u6207
  5565   0014F2                     
  5566                           ;MazeRobot.X/color.c: 171:         turnLeft_90(mL,mR);
  5567   0014F2  C0A5  F01E         	movff	colorDetect@mL,turnLeft_90@mL
  5568   0014F6  C0A6  F01F         	movff	colorDetect@mL+1,turnLeft_90@mL+1
  5569   0014FA  C0A7  F020         	movff	colorDetect@mR,turnLeft_90@mR
  5570   0014FE  C0A8  F021         	movff	colorDetect@mR+1,turnLeft_90@mR+1
  5571   001502  EC57  F01D         	call	_turnLeft_90	;wreg free
  5572   001506                     
  5573                           ;MazeRobot.X/color.c: 172:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5574   001506  0E2A               	movlw	42
  5575   001508  6E4F               	movwf	??_colorDetect^0,c
  5576   00150A  0E8E               	movlw	142
  5577   00150C                     u6217:
  5578   00150C  2EE8               	decfsz	wreg,f,c
  5579   00150E  D7FE               	bra	u6217
  5580   001510  2E4F               	decfsz	??_colorDetect^0,f,c
  5581   001512  D7FC               	bra	u6217
  5582   001514                     
  5583                           ;MazeRobot.X/color.c: 173:         colour_ref = 2;
  5584   001514  0E00               	movlw	0
  5585   001516  0100               	movlb	0	; () banked
  5586   001518  6FBC               	movwf	(colorDetect@colour_ref+1)& (0+255),b
  5587   00151A  0E02               	movlw	2
  5588   00151C  6FBB               	movwf	colorDetect@colour_ref& (0+255),b
  5589                           
  5590                           ;MazeRobot.X/color.c: 174:         }
  5591   00151E  EFF9  F00C         	goto	l5240
  5592   001522                     l5166:
  5593   001522  0E33               	movlw	51
  5594   001524  6E1D               	movwf	___flge@ff1^0,c
  5595   001526  0E33               	movlw	51
  5596   001528  6E1E               	movwf	(___flge@ff1+1)^0,c
  5597   00152A  0E33               	movlw	51
  5598   00152C  6E1F               	movwf	(___flge@ff1+2)^0,c
  5599   00152E  0E3F               	movlw	63
  5600   001530  6E20               	movwf	(___flge@ff1+3)^0,c
  5601   001532  C0C5  F019         	movff	colorDetect@redPrint,___flsub@a
  5602   001536  C0C6  F01A         	movff	colorDetect@redPrint+1,___flsub@a+1
  5603   00153A  C0C7  F01B         	movff	colorDetect@redPrint+2,___flsub@a+2
  5604   00153E  C0C8  F01C         	movff	colorDetect@redPrint+3,___flsub@a+3
  5605   001542  C0CD  F015         	movff	colorDetect@bluePrint,___flsub@b
  5606   001546  C0CE  F016         	movff	colorDetect@bluePrint+1,___flsub@b+1
  5607   00154A  C0CF  F017         	movff	colorDetect@bluePrint+2,___flsub@b+2
  5608   00154E  C0D0  F018         	movff	colorDetect@bluePrint+3,___flsub@b+3
  5609   001552  EC91  F024         	call	___flsub	;wreg free
  5610   001556  C015  F021         	movff	?___flsub,___flge@ff2
  5611   00155A  C016  F022         	movff	?___flsub+1,___flge@ff2+1
  5612   00155E  C017  F023         	movff	?___flsub+2,___flge@ff2+2
  5613   001562  C018  F024         	movff	?___flsub+3,___flge@ff2+3
  5614   001566  EC94  F01E         	call	___flge	;wreg free
  5615   00156A  B0D8               	btfsc	status,0,c
  5616   00156C  EFBA  F00A         	goto	u5661
  5617   001570  EFBC  F00A         	goto	u5660
  5618   001574                     u5661:
  5619   001574  EF1F  F00B         	goto	l5180
  5620   001578                     u5660:
  5621   001578  0E9A               	movlw	154
  5622   00157A  6E1D               	movwf	___flge@ff1^0,c
  5623   00157C  0E99               	movlw	153
  5624   00157E  6E1E               	movwf	(___flge@ff1+1)^0,c
  5625   001580  0E99               	movlw	153
  5626   001582  6E1F               	movwf	(___flge@ff1+2)^0,c
  5627   001584  0E3E               	movlw	62
  5628   001586  6E20               	movwf	(___flge@ff1+3)^0,c
  5629   001588  C0C9  F019         	movff	colorDetect@greenPrint,___flsub@a
  5630   00158C  C0CA  F01A         	movff	colorDetect@greenPrint+1,___flsub@a+1
  5631   001590  C0CB  F01B         	movff	colorDetect@greenPrint+2,___flsub@a+2
  5632   001594  C0CC  F01C         	movff	colorDetect@greenPrint+3,___flsub@a+3
  5633   001598  C0CD  F015         	movff	colorDetect@bluePrint,___flsub@b
  5634   00159C  C0CE  F016         	movff	colorDetect@bluePrint+1,___flsub@b+1
  5635   0015A0  C0CF  F017         	movff	colorDetect@bluePrint+2,___flsub@b+2
  5636   0015A4  C0D0  F018         	movff	colorDetect@bluePrint+3,___flsub@b+3
  5637   0015A8  EC91  F024         	call	___flsub	;wreg free
  5638   0015AC  C015  F021         	movff	?___flsub,___flge@ff2
  5639   0015B0  C016  F022         	movff	?___flsub+1,___flge@ff2+1
  5640   0015B4  C017  F023         	movff	?___flsub+2,___flge@ff2+2
  5641   0015B8  C018  F024         	movff	?___flsub+3,___flge@ff2+3
  5642   0015BC  EC94  F01E         	call	___flge	;wreg free
  5643   0015C0  B0D8               	btfsc	status,0,c
  5644   0015C2  EFE5  F00A         	goto	u5671
  5645   0015C6  EFE7  F00A         	goto	u5670
  5646   0015CA                     u5671:
  5647   0015CA  EF1F  F00B         	goto	l5180
  5648   0015CE                     u5670:
  5649   0015CE  0E33               	movlw	51
  5650   0015D0  6E1D               	movwf	___flge@ff1^0,c
  5651   0015D2  0E33               	movlw	51
  5652   0015D4  6E1E               	movwf	(___flge@ff1+1)^0,c
  5653   0015D6  0E33               	movlw	51
  5654   0015D8  6E1F               	movwf	(___flge@ff1+2)^0,c
  5655   0015DA  0E3F               	movlw	63
  5656   0015DC  6E20               	movwf	(___flge@ff1+3)^0,c
  5657   0015DE  C0CD  F021         	movff	colorDetect@bluePrint,___flge@ff2
  5658   0015E2  C0CE  F022         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  5659   0015E6  C0CF  F023         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  5660   0015EA  C0D0  F024         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  5661   0015EE  EC94  F01E         	call	___flge	;wreg free
  5662   0015F2  B0D8               	btfsc	status,0,c
  5663   0015F4  EFFE  F00A         	goto	u5681
  5664   0015F8  EF00  F00B         	goto	u5680
  5665   0015FC                     u5681:
  5666   0015FC  EF1F  F00B         	goto	l5180
  5667   001600                     u5680:
  5668   001600                     
  5669                           ;MazeRobot.X/color.c: 178:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5670   001600  0E2A               	movlw	42
  5671   001602  6E4F               	movwf	??_colorDetect^0,c
  5672   001604  0E8E               	movlw	142
  5673   001606                     u6227:
  5674   001606  2EE8               	decfsz	wreg,f,c
  5675   001608  D7FE               	bra	u6227
  5676   00160A  2E4F               	decfsz	??_colorDetect^0,f,c
  5677   00160C  D7FC               	bra	u6227
  5678   00160E                     
  5679                           ;MazeRobot.X/color.c: 179:         turn_180(mL,mR);
  5680   00160E  C0A5  F01E         	movff	colorDetect@mL,turn_180@mL
  5681   001612  C0A6  F01F         	movff	colorDetect@mL+1,turn_180@mL+1
  5682   001616  C0A7  F020         	movff	colorDetect@mR,turn_180@mR
  5683   00161A  C0A8  F021         	movff	colorDetect@mR+1,turn_180@mR+1
  5684   00161E  EC7A  F01B         	call	_turn_180	;wreg free
  5685   001622                     
  5686                           ;MazeRobot.X/color.c: 180:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5687   001622  0E2A               	movlw	42
  5688   001624  6E4F               	movwf	??_colorDetect^0,c
  5689   001626  0E8E               	movlw	142
  5690   001628                     u6237:
  5691   001628  2EE8               	decfsz	wreg,f,c
  5692   00162A  D7FE               	bra	u6237
  5693   00162C  2E4F               	decfsz	??_colorDetect^0,f,c
  5694   00162E  D7FC               	bra	u6237
  5695   001630                     
  5696                           ;MazeRobot.X/color.c: 181:         colour_ref = 3;
  5697   001630  0E00               	movlw	0
  5698   001632  0100               	movlb	0	; () banked
  5699   001634  6FBC               	movwf	(colorDetect@colour_ref+1)& (0+255),b
  5700   001636  0E03               	movlw	3
  5701   001638  6FBB               	movwf	colorDetect@colour_ref& (0+255),b
  5702                           
  5703                           ;MazeRobot.X/color.c: 182:         }
  5704   00163A  EFF9  F00C         	goto	l5240
  5705   00163E                     l5180:
  5706   00163E  0E00               	movlw	0
  5707   001640  6E1D               	movwf	___flge@ff1^0,c
  5708   001642  0E00               	movlw	0
  5709   001644  6E1E               	movwf	(___flge@ff1+1)^0,c
  5710   001646  0E80               	movlw	128
  5711   001648  6E1F               	movwf	(___flge@ff1+2)^0,c
  5712   00164A  0E3F               	movlw	63
  5713   00164C  6E20               	movwf	(___flge@ff1+3)^0,c
  5714   00164E  C0C5  F021         	movff	colorDetect@redPrint,___flge@ff2
  5715   001652  C0C6  F022         	movff	colorDetect@redPrint+1,___flge@ff2+1
  5716   001656  C0C7  F023         	movff	colorDetect@redPrint+2,___flge@ff2+2
  5717   00165A  C0C8  F024         	movff	colorDetect@redPrint+3,___flge@ff2+3
  5718   00165E  EC94  F01E         	call	___flge	;wreg free
  5719   001662  B0D8               	btfsc	status,0,c
  5720   001664  EF36  F00B         	goto	u5691
  5721   001668  EF38  F00B         	goto	u5690
  5722   00166C                     u5691:
  5723   00166C  EF89  F00B         	goto	l5194
  5724   001670                     u5690:
  5725   001670  0ECD               	movlw	205
  5726   001672  6E1D               	movwf	___flge@ff1^0,c
  5727   001674  0ECC               	movlw	204
  5728   001676  6E1E               	movwf	(___flge@ff1+1)^0,c
  5729   001678  0E4C               	movlw	76
  5730   00167A  6E1F               	movwf	(___flge@ff1+2)^0,c
  5731   00167C  0E3F               	movlw	63
  5732   00167E  6E20               	movwf	(___flge@ff1+3)^0,c
  5733   001680  C0C9  F021         	movff	colorDetect@greenPrint,___flge@ff2
  5734   001684  C0CA  F022         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  5735   001688  C0CB  F023         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  5736   00168C  C0CC  F024         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  5737   001690  EC94  F01E         	call	___flge	;wreg free
  5738   001694  B0D8               	btfsc	status,0,c
  5739   001696  EF4F  F00B         	goto	u5701
  5740   00169A  EF51  F00B         	goto	u5700
  5741   00169E                     u5701:
  5742   00169E  EF89  F00B         	goto	l5194
  5743   0016A2                     u5700:
  5744   0016A2  C0CD  F01D         	movff	colorDetect@bluePrint,___flge@ff1
  5745   0016A6  C0CE  F01E         	movff	colorDetect@bluePrint+1,___flge@ff1+1
  5746   0016AA  C0CF  F01F         	movff	colorDetect@bluePrint+2,___flge@ff1+2
  5747   0016AE  C0D0  F020         	movff	colorDetect@bluePrint+3,___flge@ff1+3
  5748   0016B2  0ECD               	movlw	205
  5749   0016B4  6E21               	movwf	___flge@ff2^0,c
  5750   0016B6  0ECC               	movlw	204
  5751   0016B8  6E22               	movwf	(___flge@ff2+1)^0,c
  5752   0016BA  0E4C               	movlw	76
  5753   0016BC  6E23               	movwf	(___flge@ff2+2)^0,c
  5754   0016BE  0E3F               	movlw	63
  5755   0016C0  6E24               	movwf	(___flge@ff2+3)^0,c
  5756   0016C2  EC94  F01E         	call	___flge	;wreg free
  5757   0016C6  B0D8               	btfsc	status,0,c
  5758   0016C8  EF68  F00B         	goto	u5711
  5759   0016CC  EF6A  F00B         	goto	u5710
  5760   0016D0                     u5711:
  5761   0016D0  EF89  F00B         	goto	l5194
  5762   0016D4                     u5710:
  5763   0016D4                     
  5764                           ;MazeRobot.X/color.c: 187:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5765   0016D4  0E2A               	movlw	42
  5766   0016D6  6E4F               	movwf	??_colorDetect^0,c
  5767   0016D8  0E8E               	movlw	142
  5768   0016DA                     u6247:
  5769   0016DA  2EE8               	decfsz	wreg,f,c
  5770   0016DC  D7FE               	bra	u6247
  5771   0016DE  2E4F               	decfsz	??_colorDetect^0,f,c
  5772   0016E0  D7FC               	bra	u6247
  5773   0016E2                     
  5774                           ;MazeRobot.X/color.c: 188:         reverseSquareRight(mL,mR);
  5775   0016E2  C0A5  F024         	movff	colorDetect@mL,reverseSquareRight@mL
  5776   0016E6  C0A6  F025         	movff	colorDetect@mL+1,reverseSquareRight@mL+1
  5777   0016EA  C0A7  F026         	movff	colorDetect@mR,reverseSquareRight@mR
  5778   0016EE  C0A8  F027         	movff	colorDetect@mR+1,reverseSquareRight@mR+1
  5779   0016F2  ECF5  F021         	call	_reverseSquareRight	;wreg free
  5780   0016F6                     
  5781                           ;MazeRobot.X/color.c: 189:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5782   0016F6  0E2A               	movlw	42
  5783   0016F8  6E4F               	movwf	??_colorDetect^0,c
  5784   0016FA  0E8E               	movlw	142
  5785   0016FC                     u6257:
  5786   0016FC  2EE8               	decfsz	wreg,f,c
  5787   0016FE  D7FE               	bra	u6257
  5788   001700  2E4F               	decfsz	??_colorDetect^0,f,c
  5789   001702  D7FC               	bra	u6257
  5790   001704                     
  5791                           ;MazeRobot.X/color.c: 190:         colour_ref = 4;
  5792   001704  0E00               	movlw	0
  5793   001706  0100               	movlb	0	; () banked
  5794   001708  6FBC               	movwf	(colorDetect@colour_ref+1)& (0+255),b
  5795   00170A  0E04               	movlw	4
  5796   00170C  6FBB               	movwf	colorDetect@colour_ref& (0+255),b
  5797                           
  5798                           ;MazeRobot.X/color.c: 191:         }
  5799   00170E  EFF9  F00C         	goto	l5240
  5800   001712                     l5194:
  5801   001712  0E33               	movlw	51
  5802   001714  6E1D               	movwf	___flge@ff1^0,c
  5803   001716  0E33               	movlw	51
  5804   001718  6E1E               	movwf	(___flge@ff1+1)^0,c
  5805   00171A  0E73               	movlw	115
  5806   00171C  6E1F               	movwf	(___flge@ff1+2)^0,c
  5807   00171E  0E3F               	movlw	63
  5808   001720  6E20               	movwf	(___flge@ff1+3)^0,c
  5809   001722  C0C5  F021         	movff	colorDetect@redPrint,___flge@ff2
  5810   001726  C0C6  F022         	movff	colorDetect@redPrint+1,___flge@ff2+1
  5811   00172A  C0C7  F023         	movff	colorDetect@redPrint+2,___flge@ff2+2
  5812   00172E  C0C8  F024         	movff	colorDetect@redPrint+3,___flge@ff2+3
  5813   001732  EC94  F01E         	call	___flge	;wreg free
  5814   001736  B0D8               	btfsc	status,0,c
  5815   001738  EFA0  F00B         	goto	u5721
  5816   00173C  EFA2  F00B         	goto	u5720
  5817   001740                     u5721:
  5818   001740  EF25  F00C         	goto	l5212
  5819   001744                     u5720:
  5820   001744  0ECD               	movlw	205
  5821   001746  6E1D               	movwf	___flge@ff1^0,c
  5822   001748  0ECC               	movlw	204
  5823   00174A  6E1E               	movwf	(___flge@ff1+1)^0,c
  5824   00174C  0E4C               	movlw	76
  5825   00174E  6E1F               	movwf	(___flge@ff1+2)^0,c
  5826   001750  0E3F               	movlw	63
  5827   001752  6E20               	movwf	(___flge@ff1+3)^0,c
  5828   001754  C0C9  F021         	movff	colorDetect@greenPrint,___flge@ff2
  5829   001758  C0CA  F022         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  5830   00175C  C0CB  F023         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  5831   001760  C0CC  F024         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  5832   001764  EC94  F01E         	call	___flge	;wreg free
  5833   001768  B0D8               	btfsc	status,0,c
  5834   00176A  EFB9  F00B         	goto	u5731
  5835   00176E  EFBB  F00B         	goto	u5730
  5836   001772                     u5731:
  5837   001772  EF25  F00C         	goto	l5212
  5838   001776                     u5730:
  5839   001776  C0C9  F01D         	movff	colorDetect@greenPrint,___flge@ff1
  5840   00177A  C0CA  F01E         	movff	colorDetect@greenPrint+1,___flge@ff1+1
  5841   00177E  C0CB  F01F         	movff	colorDetect@greenPrint+2,___flge@ff1+2
  5842   001782  C0CC  F020         	movff	colorDetect@greenPrint+3,___flge@ff1+3
  5843   001786  0E66               	movlw	102
  5844   001788  6E21               	movwf	___flge@ff2^0,c
  5845   00178A  0E66               	movlw	102
  5846   00178C  6E22               	movwf	(___flge@ff2+1)^0,c
  5847   00178E  0E66               	movlw	102
  5848   001790  6E23               	movwf	(___flge@ff2+2)^0,c
  5849   001792  0E3F               	movlw	63
  5850   001794  6E24               	movwf	(___flge@ff2+3)^0,c
  5851   001796  EC94  F01E         	call	___flge	;wreg free
  5852   00179A  B0D8               	btfsc	status,0,c
  5853   00179C  EFD2  F00B         	goto	u5741
  5854   0017A0  EFD4  F00B         	goto	u5740
  5855   0017A4                     u5741:
  5856   0017A4  EF25  F00C         	goto	l5212
  5857   0017A8                     u5740:
  5858   0017A8  0ECD               	movlw	205
  5859   0017AA  6E1D               	movwf	___flge@ff1^0,c
  5860   0017AC  0ECC               	movlw	204
  5861   0017AE  6E1E               	movwf	(___flge@ff1+1)^0,c
  5862   0017B0  0E4C               	movlw	76
  5863   0017B2  6E1F               	movwf	(___flge@ff1+2)^0,c
  5864   0017B4  0E3F               	movlw	63
  5865   0017B6  6E20               	movwf	(___flge@ff1+3)^0,c
  5866   0017B8  C0CD  F021         	movff	colorDetect@bluePrint,___flge@ff2
  5867   0017BC  C0CE  F022         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  5868   0017C0  C0CF  F023         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  5869   0017C4  C0D0  F024         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  5870   0017C8  EC94  F01E         	call	___flge	;wreg free
  5871   0017CC  B0D8               	btfsc	status,0,c
  5872   0017CE  EFEB  F00B         	goto	u5751
  5873   0017D2  EFED  F00B         	goto	u5750
  5874   0017D6                     u5751:
  5875   0017D6  EF25  F00C         	goto	l5212
  5876   0017DA                     u5750:
  5877   0017DA  C0CD  F01D         	movff	colorDetect@bluePrint,___flge@ff1
  5878   0017DE  C0CE  F01E         	movff	colorDetect@bluePrint+1,___flge@ff1+1
  5879   0017E2  C0CF  F01F         	movff	colorDetect@bluePrint+2,___flge@ff1+2
  5880   0017E6  C0D0  F020         	movff	colorDetect@bluePrint+3,___flge@ff1+3
  5881   0017EA  0E33               	movlw	51
  5882   0017EC  6E21               	movwf	___flge@ff2^0,c
  5883   0017EE  0E33               	movlw	51
  5884   0017F0  6E22               	movwf	(___flge@ff2+1)^0,c
  5885   0017F2  0E73               	movlw	115
  5886   0017F4  6E23               	movwf	(___flge@ff2+2)^0,c
  5887   0017F6  0E3F               	movlw	63
  5888   0017F8  6E24               	movwf	(___flge@ff2+3)^0,c
  5889   0017FA  EC94  F01E         	call	___flge	;wreg free
  5890   0017FE  B0D8               	btfsc	status,0,c
  5891   001800  EF04  F00C         	goto	u5761
  5892   001804  EF06  F00C         	goto	u5760
  5893   001808                     u5761:
  5894   001808  EF25  F00C         	goto	l5212
  5895   00180C                     u5760:
  5896   00180C                     
  5897                           ;MazeRobot.X/color.c: 195:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5898   00180C  0E2A               	movlw	42
  5899   00180E  6E4F               	movwf	??_colorDetect^0,c
  5900   001810  0E8E               	movlw	142
  5901   001812                     u6267:
  5902   001812  2EE8               	decfsz	wreg,f,c
  5903   001814  D7FE               	bra	u6267
  5904   001816  2E4F               	decfsz	??_colorDetect^0,f,c
  5905   001818  D7FC               	bra	u6267
  5906   00181A                     
  5907                           ;MazeRobot.X/color.c: 196:         reverseSquareLeft(mL,mR);
  5908   00181A  C0A5  F024         	movff	colorDetect@mL,reverseSquareLeft@mL
  5909   00181E  C0A6  F025         	movff	colorDetect@mL+1,reverseSquareLeft@mL+1
  5910   001822  C0A7  F026         	movff	colorDetect@mR,reverseSquareLeft@mR
  5911   001826  C0A8  F027         	movff	colorDetect@mR+1,reverseSquareLeft@mR+1
  5912   00182A  EC40  F022         	call	_reverseSquareLeft	;wreg free
  5913   00182E                     
  5914                           ;MazeRobot.X/color.c: 197:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5915   00182E  0E2A               	movlw	42
  5916   001830  6E4F               	movwf	??_colorDetect^0,c
  5917   001832  0E8E               	movlw	142
  5918   001834                     u6277:
  5919   001834  2EE8               	decfsz	wreg,f,c
  5920   001836  D7FE               	bra	u6277
  5921   001838  2E4F               	decfsz	??_colorDetect^0,f,c
  5922   00183A  D7FC               	bra	u6277
  5923   00183C                     
  5924                           ;MazeRobot.X/color.c: 198:         colour_ref = 5;
  5925   00183C  0E00               	movlw	0
  5926   00183E  0100               	movlb	0	; () banked
  5927   001840  6FBC               	movwf	(colorDetect@colour_ref+1)& (0+255),b
  5928   001842  0E05               	movlw	5
  5929   001844  6FBB               	movwf	colorDetect@colour_ref& (0+255),b
  5930                           
  5931                           ;MazeRobot.X/color.c: 199:         }
  5932   001846  EFF9  F00C         	goto	l5240
  5933   00184A                     l5212:
  5934   00184A  0E66               	movlw	102
  5935   00184C  6E1D               	movwf	___flge@ff1^0,c
  5936   00184E  0E66               	movlw	102
  5937   001850  6E1E               	movwf	(___flge@ff1+1)^0,c
  5938   001852  0EA6               	movlw	166
  5939   001854  6E1F               	movwf	(___flge@ff1+2)^0,c
  5940   001856  0E3F               	movlw	63
  5941   001858  6E20               	movwf	(___flge@ff1+3)^0,c
  5942   00185A  C0C5  F021         	movff	colorDetect@redPrint,___flge@ff2
  5943   00185E  C0C6  F022         	movff	colorDetect@redPrint+1,___flge@ff2+1
  5944   001862  C0C7  F023         	movff	colorDetect@redPrint+2,___flge@ff2+2
  5945   001866  C0C8  F024         	movff	colorDetect@redPrint+3,___flge@ff2+3
  5946   00186A  EC94  F01E         	call	___flge	;wreg free
  5947   00186E  B0D8               	btfsc	status,0,c
  5948   001870  EF3C  F00C         	goto	u5771
  5949   001874  EF3E  F00C         	goto	u5770
  5950   001878                     u5771:
  5951   001878  EF8F  F00C         	goto	l5226
  5952   00187C                     u5770:
  5953   00187C  0E00               	movlw	0
  5954   00187E  6E1D               	movwf	___flge@ff1^0,c
  5955   001880  0E00               	movlw	0
  5956   001882  6E1E               	movwf	(___flge@ff1+1)^0,c
  5957   001884  0E00               	movlw	0
  5958   001886  6E1F               	movwf	(___flge@ff1+2)^0,c
  5959   001888  0E3F               	movlw	63
  5960   00188A  6E20               	movwf	(___flge@ff1+3)^0,c
  5961   00188C  C0C9  F021         	movff	colorDetect@greenPrint,___flge@ff2
  5962   001890  C0CA  F022         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  5963   001894  C0CB  F023         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  5964   001898  C0CC  F024         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  5965   00189C  EC94  F01E         	call	___flge	;wreg free
  5966   0018A0  B0D8               	btfsc	status,0,c
  5967   0018A2  EF55  F00C         	goto	u5781
  5968   0018A6  EF57  F00C         	goto	u5780
  5969   0018AA                     u5781:
  5970   0018AA  EF8F  F00C         	goto	l5226
  5971   0018AE                     u5780:
  5972   0018AE  0E00               	movlw	0
  5973   0018B0  6E1D               	movwf	___flge@ff1^0,c
  5974   0018B2  0E00               	movlw	0
  5975   0018B4  6E1E               	movwf	(___flge@ff1+1)^0,c
  5976   0018B6  0E00               	movlw	0
  5977   0018B8  6E1F               	movwf	(___flge@ff1+2)^0,c
  5978   0018BA  0E3F               	movlw	63
  5979   0018BC  6E20               	movwf	(___flge@ff1+3)^0,c
  5980   0018BE  C0CD  F021         	movff	colorDetect@bluePrint,___flge@ff2
  5981   0018C2  C0CE  F022         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  5982   0018C6  C0CF  F023         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  5983   0018CA  C0D0  F024         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  5984   0018CE  EC94  F01E         	call	___flge	;wreg free
  5985   0018D2  B0D8               	btfsc	status,0,c
  5986   0018D4  EF6E  F00C         	goto	u5791
  5987   0018D8  EF70  F00C         	goto	u5790
  5988   0018DC                     u5791:
  5989   0018DC  EF8F  F00C         	goto	l5226
  5990   0018E0                     u5790:
  5991   0018E0                     
  5992                           ;MazeRobot.X/color.c: 203:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5993   0018E0  0E2A               	movlw	42
  5994   0018E2  6E4F               	movwf	??_colorDetect^0,c
  5995   0018E4  0E8E               	movlw	142
  5996   0018E6                     u6287:
  5997   0018E6  2EE8               	decfsz	wreg,f,c
  5998   0018E8  D7FE               	bra	u6287
  5999   0018EA  2E4F               	decfsz	??_colorDetect^0,f,c
  6000   0018EC  D7FC               	bra	u6287
  6001   0018EE                     
  6002                           ;MazeRobot.X/color.c: 204:         turnRight_135(mL,mR);
  6003   0018EE  C0A5  F01E         	movff	colorDetect@mL,turnRight_135@mL
  6004   0018F2  C0A6  F01F         	movff	colorDetect@mL+1,turnRight_135@mL+1
  6005   0018F6  C0A7  F020         	movff	colorDetect@mR,turnRight_135@mR
  6006   0018FA  C0A8  F021         	movff	colorDetect@mR+1,turnRight_135@mR+1
  6007   0018FE  ECF6  F01D         	call	_turnRight_135	;wreg free
  6008   001902                     
  6009                           ;MazeRobot.X/color.c: 205:         _delay((unsigned long)((2)*(64000000/4000.0)));
  6010   001902  0E2A               	movlw	42
  6011   001904  6E4F               	movwf	??_colorDetect^0,c
  6012   001906  0E8E               	movlw	142
  6013   001908                     u6297:
  6014   001908  2EE8               	decfsz	wreg,f,c
  6015   00190A  D7FE               	bra	u6297
  6016   00190C  2E4F               	decfsz	??_colorDetect^0,f,c
  6017   00190E  D7FC               	bra	u6297
  6018   001910                     
  6019                           ;MazeRobot.X/color.c: 206:         colour_ref = 6;
  6020   001910  0E00               	movlw	0
  6021   001912  0100               	movlb	0	; () banked
  6022   001914  6FBC               	movwf	(colorDetect@colour_ref+1)& (0+255),b
  6023   001916  0E06               	movlw	6
  6024   001918  6FBB               	movwf	colorDetect@colour_ref& (0+255),b
  6025                           
  6026                           ;MazeRobot.X/color.c: 208:         }
  6027   00191A  EFF9  F00C         	goto	l5240
  6028   00191E                     l5226:
  6029   00191E  C0C5  F01D         	movff	colorDetect@redPrint,___flge@ff1
  6030   001922  C0C6  F01E         	movff	colorDetect@redPrint+1,___flge@ff1+1
  6031   001926  C0C7  F01F         	movff	colorDetect@redPrint+2,___flge@ff1+2
  6032   00192A  C0C8  F020         	movff	colorDetect@redPrint+3,___flge@ff1+3
  6033   00192E  0E33               	movlw	51
  6034   001930  6E21               	movwf	___flge@ff2^0,c
  6035   001932  0E33               	movlw	51
  6036   001934  6E22               	movwf	(___flge@ff2+1)^0,c
  6037   001936  0E33               	movlw	51
  6038   001938  6E23               	movwf	(___flge@ff2+2)^0,c
  6039   00193A  0E3F               	movlw	63
  6040   00193C  6E24               	movwf	(___flge@ff2+3)^0,c
  6041   00193E  EC94  F01E         	call	___flge	;wreg free
  6042   001942  B0D8               	btfsc	status,0,c
  6043   001944  EFA6  F00C         	goto	u5801
  6044   001948  EFA8  F00C         	goto	u5800
  6045   00194C                     u5801:
  6046   00194C  EFF9  F00C         	goto	l110
  6047   001950                     u5800:
  6048   001950  0E00               	movlw	0
  6049   001952  6E1D               	movwf	___flge@ff1^0,c
  6050   001954  0E00               	movlw	0
  6051   001956  6E1E               	movwf	(___flge@ff1+1)^0,c
  6052   001958  0E80               	movlw	128
  6053   00195A  6E1F               	movwf	(___flge@ff1+2)^0,c
  6054   00195C  0E3F               	movlw	63
  6055   00195E  6E20               	movwf	(___flge@ff1+3)^0,c
  6056   001960  C0C9  F021         	movff	colorDetect@greenPrint,___flge@ff2
  6057   001964  C0CA  F022         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  6058   001968  C0CB  F023         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  6059   00196C  C0CC  F024         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  6060   001970  EC94  F01E         	call	___flge	;wreg free
  6061   001974  B0D8               	btfsc	status,0,c
  6062   001976  EFBF  F00C         	goto	u5811
  6063   00197A  EFC1  F00C         	goto	u5810
  6064   00197E                     u5811:
  6065   00197E  EFF9  F00C         	goto	l110
  6066   001982                     u5810:
  6067   001982  0E00               	movlw	0
  6068   001984  6E1D               	movwf	___flge@ff1^0,c
  6069   001986  0E00               	movlw	0
  6070   001988  6E1E               	movwf	(___flge@ff1+1)^0,c
  6071   00198A  0E80               	movlw	128
  6072   00198C  6E1F               	movwf	(___flge@ff1+2)^0,c
  6073   00198E  0E3F               	movlw	63
  6074   001990  6E20               	movwf	(___flge@ff1+3)^0,c
  6075   001992  C0CD  F021         	movff	colorDetect@bluePrint,___flge@ff2
  6076   001996  C0CE  F022         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  6077   00199A  C0CF  F023         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  6078   00199E  C0D0  F024         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  6079   0019A2  EC94  F01E         	call	___flge	;wreg free
  6080   0019A6  B0D8               	btfsc	status,0,c
  6081   0019A8  EFD8  F00C         	goto	u5821
  6082   0019AC  EFDA  F00C         	goto	u5820
  6083   0019B0                     u5821:
  6084   0019B0  EFF9  F00C         	goto	l110
  6085   0019B4                     u5820:
  6086   0019B4                     
  6087                           ;MazeRobot.X/color.c: 212:         _delay((unsigned long)((2)*(64000000/4000.0)));
  6088   0019B4  0E2A               	movlw	42
  6089   0019B6  6E4F               	movwf	??_colorDetect^0,c
  6090   0019B8  0E8E               	movlw	142
  6091   0019BA                     u6307:
  6092   0019BA  2EE8               	decfsz	wreg,f,c
  6093   0019BC  D7FE               	bra	u6307
  6094   0019BE  2E4F               	decfsz	??_colorDetect^0,f,c
  6095   0019C0  D7FC               	bra	u6307
  6096   0019C2                     
  6097                           ;MazeRobot.X/color.c: 213:         turnLeft_135(mL,mR);
  6098   0019C2  C0A5  F01E         	movff	colorDetect@mL,turnLeft_135@mL
  6099   0019C6  C0A6  F01F         	movff	colorDetect@mL+1,turnLeft_135@mL+1
  6100   0019CA  C0A7  F020         	movff	colorDetect@mR,turnLeft_135@mR
  6101   0019CE  C0A8  F021         	movff	colorDetect@mR+1,turnLeft_135@mR+1
  6102   0019D2  EC19  F01C         	call	_turnLeft_135	;wreg free
  6103   0019D6                     
  6104                           ;MazeRobot.X/color.c: 214:         _delay((unsigned long)((2)*(64000000/4000.0)));
  6105   0019D6  0E2A               	movlw	42
  6106   0019D8  6E4F               	movwf	??_colorDetect^0,c
  6107   0019DA  0E8E               	movlw	142
  6108   0019DC                     u6317:
  6109   0019DC  2EE8               	decfsz	wreg,f,c
  6110   0019DE  D7FE               	bra	u6317
  6111   0019E0  2E4F               	decfsz	??_colorDetect^0,f,c
  6112   0019E2  D7FC               	bra	u6317
  6113   0019E4                     
  6114                           ;MazeRobot.X/color.c: 215:         colour_ref = 7;
  6115   0019E4  0E00               	movlw	0
  6116   0019E6  0100               	movlb	0	; () banked
  6117   0019E8  6FBC               	movwf	(colorDetect@colour_ref+1)& (0+255),b
  6118   0019EA  0E07               	movlw	7
  6119   0019EC  6FBB               	movwf	colorDetect@colour_ref& (0+255),b
  6120   0019EE  EFF9  F00C         	goto	l5240
  6121   0019F2                     l110:
  6122   0019F2                     l5240:
  6123                           
  6124                           ;MazeRobot.X/color.c: 219:         return colour_ref;
  6125   0019F2  C0BB  F09D         	movff	colorDetect@colour_ref,?_colorDetect
  6126   0019F6  C0BC  F09E         	movff	colorDetect@colour_ref+1,?_colorDetect+1
  6127   0019FA  0012               	return		;funcret
  6128   0019FC                     __end_of_colorDetect:
  6129                           	callstack 0
  6130                           
  6131 ;; *************** function _turn_180 *****************
  6132 ;; Defined at:
  6133 ;;		line 297 in file "MazeRobot.X/dc_motor.c"
  6134 ;; Parameters:    Size  Location     Type
  6135 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  6136 ;;		 -> main@motorLeft(9), 
  6137 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  6138 ;;		 -> main@motorRight(9), 
  6139 ;; Auto vars:     Size  Location     Type
  6140 ;;		None
  6141 ;; Return value:  Size  Location     Type
  6142 ;;                  1    wreg      void 
  6143 ;; Registers used:
  6144 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6145 ;; Tracked objects:
  6146 ;;		On entry : 0/0
  6147 ;;		On exit  : 0/0
  6148 ;;		Unchanged: 0/0
  6149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6150 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6152 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6153 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6154 ;;Total ram usage:        6 bytes
  6155 ;; Hardware stack levels used: 1
  6156 ;; Hardware stack levels required when called: 5
  6157 ;; This function calls:
  6158 ;;		_reverse
  6159 ;;		_setMotorPWM
  6160 ;;		_stop
  6161 ;; This function is called by:
  6162 ;;		_colorDetect
  6163 ;;		_return_home_turns
  6164 ;;		_main
  6165 ;; This function uses a non-reentrant model
  6166 ;;
  6167                           
  6168                           	psect	text25
  6169   0036F4                     __ptext25:
  6170                           	callstack 0
  6171   0036F4                     _turn_180:
  6172                           	callstack 25
  6173   0036F4                     
  6174                           ;MazeRobot.X/dc_motor.c: 297: void turn_180(DC_motor *mL, DC_motor *mR);MazeRobot.X/dc_m
      +                          otor.c: 298: {;MazeRobot.X/dc_motor.c: 300:     stop(mL, mR);
  6175   0036F4  C01E  F018         	movff	turn_180@mL,stop@mL
  6176   0036F8  C01F  F019         	movff	turn_180@mL+1,stop@mL+1
  6177   0036FC  C020  F01A         	movff	turn_180@mR,stop@mR
  6178   003700  C021  F01B         	movff	turn_180@mR+1,stop@mR+1
  6179   003704  EC9E  F021         	call	_stop	;wreg free
  6180   003708                     
  6181                           ;MazeRobot.X/dc_motor.c: 301:     _delay((unsigned long)((100)*(64000000/4000.0)));
  6182   003708  0E09               	movlw	9
  6183   00370A  6E23               	movwf	(??_turn_180+1)^0,c
  6184   00370C  0E1E               	movlw	30
  6185   00370E  6E22               	movwf	??_turn_180^0,c
  6186   003710  0EE4               	movlw	228
  6187   003712                     u6327:
  6188   003712  2EE8               	decfsz	wreg,f,c
  6189   003714  D7FE               	bra	u6327
  6190   003716  2E22               	decfsz	??_turn_180^0,f,c
  6191   003718  D7FC               	bra	u6327
  6192   00371A  2E23               	decfsz	(??_turn_180+1)^0,f,c
  6193   00371C  D7FA               	bra	u6327
  6194   00371E  D000               	nop2	
  6195   003720                     
  6196                           ;MazeRobot.X/dc_motor.c: 303:     reverse(mL, mR);
  6197   003720  C01E  F018         	movff	turn_180@mL,reverse@mL
  6198   003724  C01F  F019         	movff	turn_180@mL+1,reverse@mL+1
  6199   003728  C020  F01A         	movff	turn_180@mR,reverse@mR
  6200   00372C  C021  F01B         	movff	turn_180@mR+1,reverse@mR+1
  6201   003730  EC65  F020         	call	_reverse	;wreg free
  6202                           
  6203                           ;MazeRobot.X/dc_motor.c: 304:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  6204   003734  0E39               	movlw	57
  6205   003736  6E23               	movwf	(??_turn_180+1)^0,c
  6206   003738  0ED2               	movlw	210
  6207   00373A  6E22               	movwf	??_turn_180^0,c
  6208   00373C  0E4C               	movlw	76
  6209   00373E                     u6337:
  6210   00373E  2EE8               	decfsz	wreg,f,c
  6211   003740  D7FE               	bra	u6337
  6212   003742  2E22               	decfsz	??_turn_180^0,f,c
  6213   003744  D7FC               	bra	u6337
  6214   003746  2E23               	decfsz	(??_turn_180+1)^0,f,c
  6215   003748  D7FA               	bra	u6337
  6216   00374A  D000               	nop2	
  6217   00374C                     
  6218                           ;MazeRobot.X/dc_motor.c: 306:     stop(mL, mR);
  6219   00374C  C01E  F018         	movff	turn_180@mL,stop@mL
  6220   003750  C01F  F019         	movff	turn_180@mL+1,stop@mL+1
  6221   003754  C020  F01A         	movff	turn_180@mR,stop@mR
  6222   003758  C021  F01B         	movff	turn_180@mR+1,stop@mR+1
  6223   00375C  EC9E  F021         	call	_stop	;wreg free
  6224   003760                     
  6225                           ;MazeRobot.X/dc_motor.c: 308:     mL->direction = 1;
  6226   003760  EE20 F001          	lfsr	2,1
  6227   003764  501E               	movf	turn_180@mL^0,w,c
  6228   003766  26D9               	addwf	fsr2l,f,c
  6229   003768  501F               	movf	(turn_180@mL+1)^0,w,c
  6230   00376A  22DA               	addwfc	fsr2h,f,c
  6231   00376C  0E01               	movlw	1
  6232   00376E  6EDF               	movwf	indf2,c
  6233   003770                     
  6234                           ;MazeRobot.X/dc_motor.c: 309:     mR->direction = 0;
  6235   003770  EE20 F001          	lfsr	2,1
  6236   003774  5020               	movf	turn_180@mR^0,w,c
  6237   003776  26D9               	addwf	fsr2l,f,c
  6238   003778  5021               	movf	(turn_180@mR+1)^0,w,c
  6239   00377A  22DA               	addwfc	fsr2h,f,c
  6240   00377C  0E00               	movlw	0
  6241   00377E  6EDF               	movwf	indf2,c
  6242   003780                     
  6243                           ;MazeRobot.X/dc_motor.c: 311:     mL->brakemode = 1;
  6244   003780  EE20 F002          	lfsr	2,2
  6245   003784  501E               	movf	turn_180@mL^0,w,c
  6246   003786  26D9               	addwf	fsr2l,f,c
  6247   003788  501F               	movf	(turn_180@mL+1)^0,w,c
  6248   00378A  22DA               	addwfc	fsr2h,f,c
  6249   00378C  0E01               	movlw	1
  6250   00378E  6EDF               	movwf	indf2,c
  6251   003790                     
  6252                           ;MazeRobot.X/dc_motor.c: 312:     mL->brakemode = 1;
  6253   003790  EE20 F002          	lfsr	2,2
  6254   003794  501E               	movf	turn_180@mL^0,w,c
  6255   003796  26D9               	addwf	fsr2l,f,c
  6256   003798  501F               	movf	(turn_180@mL+1)^0,w,c
  6257   00379A  22DA               	addwfc	fsr2h,f,c
  6258   00379C  0E01               	movlw	1
  6259   00379E  6EDF               	movwf	indf2,c
  6260                           
  6261                           ;MazeRobot.X/dc_motor.c: 314:     while((mL->power < 80) || (mR->power < 80)){
  6262   0037A0  EFEA  F01B         	goto	l3772
  6263   0037A4                     l3766:
  6264                           
  6265                           ;MazeRobot.X/dc_motor.c: 315:         mL->power += 10;
  6266   0037A4  C01E  FFD9         	movff	turn_180@mL,fsr2l
  6267   0037A8  C01F  FFDA         	movff	turn_180@mL+1,fsr2h
  6268   0037AC  0E0A               	movlw	10
  6269   0037AE  26DF               	addwf	indf2,f,c
  6270                           
  6271                           ;MazeRobot.X/dc_motor.c: 316:         mR->power += 10;
  6272   0037B0  C020  FFD9         	movff	turn_180@mR,fsr2l
  6273   0037B4  C021  FFDA         	movff	turn_180@mR+1,fsr2h
  6274   0037B8  0E0A               	movlw	10
  6275   0037BA  26DF               	addwf	indf2,f,c
  6276   0037BC                     
  6277                           ;MazeRobot.X/dc_motor.c: 317:         setMotorPWM(mL);
  6278   0037BC  C01E  F012         	movff	turn_180@mL,setMotorPWM@m
  6279   0037C0  C01F  F013         	movff	turn_180@mL+1,setMotorPWM@m+1
  6280   0037C4  EC63  F019         	call	_setMotorPWM	;wreg free
  6281   0037C8                     
  6282                           ;MazeRobot.X/dc_motor.c: 318:         setMotorPWM(mR);
  6283   0037C8  C020  F012         	movff	turn_180@mR,setMotorPWM@m
  6284   0037CC  C021  F013         	movff	turn_180@mR+1,setMotorPWM@m+1
  6285   0037D0  EC63  F019         	call	_setMotorPWM	;wreg free
  6286   0037D4                     l3772:
  6287                           
  6288                           ;MazeRobot.X/dc_motor.c: 314:     while((mL->power < 80) || (mR->power < 80)){
  6289   0037D4  C01E  FFD9         	movff	turn_180@mL,fsr2l
  6290   0037D8  C01F  FFDA         	movff	turn_180@mL+1,fsr2h
  6291   0037DC  0E4F               	movlw	79
  6292   0037DE  64DF               	cpfsgt	indf2,c
  6293   0037E0  EFF4  F01B         	goto	u3591
  6294   0037E4  EFF6  F01B         	goto	u3590
  6295   0037E8                     u3591:
  6296   0037E8  EFD2  F01B         	goto	l3766
  6297   0037EC                     u3590:
  6298   0037EC  C020  FFD9         	movff	turn_180@mR,fsr2l
  6299   0037F0  C021  FFDA         	movff	turn_180@mR+1,fsr2h
  6300   0037F4  0E4F               	movlw	79
  6301   0037F6  64DF               	cpfsgt	indf2,c
  6302   0037F8  EF00  F01C         	goto	u3601
  6303   0037FC  EF02  F01C         	goto	u3600
  6304   003800                     u3601:
  6305   003800  EFD2  F01B         	goto	l3766
  6306   003804                     u3600:
  6307   003804                     
  6308                           ;MazeRobot.X/dc_motor.c: 320:    _delay((unsigned long)((1.75*turning_time45)*(64000000/
      +                          4000.0)));
  6309   003804  0E19               	movlw	25
  6310   003806  6E23               	movwf	(??_turn_180+1)^0,c
  6311   003808  0E26               	movlw	38
  6312   00380A  6E22               	movwf	??_turn_180^0,c
  6313   00380C  0EBF               	movlw	191
  6314   00380E                     u6347:
  6315   00380E  2EE8               	decfsz	wreg,f,c
  6316   003810  D7FE               	bra	u6347
  6317   003812  2E22               	decfsz	??_turn_180^0,f,c
  6318   003814  D7FC               	bra	u6347
  6319   003816  2E23               	decfsz	(??_turn_180+1)^0,f,c
  6320   003818  D7FA               	bra	u6347
  6321   00381A  F000               	nop	
  6322   00381C                     
  6323                           ;MazeRobot.X/dc_motor.c: 322:     stop(mL, mR);
  6324   00381C  C01E  F018         	movff	turn_180@mL,stop@mL
  6325   003820  C01F  F019         	movff	turn_180@mL+1,stop@mL+1
  6326   003824  C020  F01A         	movff	turn_180@mR,stop@mR
  6327   003828  C021  F01B         	movff	turn_180@mR+1,stop@mR+1
  6328   00382C  EC9E  F021         	call	_stop	;wreg free
  6329   003830  0012               	return		;funcret
  6330   003832                     __end_of_turn_180:
  6331                           	callstack 0
  6332                           
  6333 ;; *************** function _turnRight_135 *****************
  6334 ;; Defined at:
  6335 ;;		line 326 in file "MazeRobot.X/dc_motor.c"
  6336 ;; Parameters:    Size  Location     Type
  6337 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  6338 ;;		 -> main@motorLeft(9), 
  6339 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  6340 ;;		 -> main@motorRight(9), 
  6341 ;; Auto vars:     Size  Location     Type
  6342 ;;		None
  6343 ;; Return value:  Size  Location     Type
  6344 ;;                  1    wreg      void 
  6345 ;; Registers used:
  6346 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6347 ;; Tracked objects:
  6348 ;;		On entry : 0/0
  6349 ;;		On exit  : 0/0
  6350 ;;		Unchanged: 0/0
  6351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6352 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6354 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6355 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6356 ;;Total ram usage:        6 bytes
  6357 ;; Hardware stack levels used: 1
  6358 ;; Hardware stack levels required when called: 5
  6359 ;; This function calls:
  6360 ;;		_reverse
  6361 ;;		_setMotorPWM
  6362 ;;		_stop
  6363 ;; This function is called by:
  6364 ;;		_colorDetect
  6365 ;;		_return_home_turns
  6366 ;; This function uses a non-reentrant model
  6367 ;;
  6368                           
  6369                           	psect	text26
  6370   003BEC                     __ptext26:
  6371                           	callstack 0
  6372   003BEC                     _turnRight_135:
  6373                           	callstack 24
  6374   003BEC                     
  6375                           ;MazeRobot.X/dc_motor.c: 326: void turnRight_135(DC_motor *mL, DC_motor *mR);MazeRobot.X
      +                          /dc_motor.c: 327: {;MazeRobot.X/dc_motor.c: 328:     stop(mL, mR);
  6376   003BEC  C01E  F018         	movff	turnRight_135@mL,stop@mL
  6377   003BF0  C01F  F019         	movff	turnRight_135@mL+1,stop@mL+1
  6378   003BF4  C020  F01A         	movff	turnRight_135@mR,stop@mR
  6379   003BF8  C021  F01B         	movff	turnRight_135@mR+1,stop@mR+1
  6380   003BFC  EC9E  F021         	call	_stop	;wreg free
  6381   003C00                     
  6382                           ;MazeRobot.X/dc_motor.c: 329:     _delay((unsigned long)((100)*(64000000/4000.0)));
  6383   003C00  0E09               	movlw	9
  6384   003C02  6E23               	movwf	(??_turnRight_135+1)^0,c
  6385   003C04  0E1E               	movlw	30
  6386   003C06  6E22               	movwf	??_turnRight_135^0,c
  6387   003C08  0EE4               	movlw	228
  6388   003C0A                     u6357:
  6389   003C0A  2EE8               	decfsz	wreg,f,c
  6390   003C0C  D7FE               	bra	u6357
  6391   003C0E  2E22               	decfsz	??_turnRight_135^0,f,c
  6392   003C10  D7FC               	bra	u6357
  6393   003C12  2E23               	decfsz	(??_turnRight_135+1)^0,f,c
  6394   003C14  D7FA               	bra	u6357
  6395   003C16  D000               	nop2	
  6396   003C18                     
  6397                           ;MazeRobot.X/dc_motor.c: 331:     reverse(mL, mR);
  6398   003C18  C01E  F018         	movff	turnRight_135@mL,reverse@mL
  6399   003C1C  C01F  F019         	movff	turnRight_135@mL+1,reverse@mL+1
  6400   003C20  C020  F01A         	movff	turnRight_135@mR,reverse@mR
  6401   003C24  C021  F01B         	movff	turnRight_135@mR+1,reverse@mR+1
  6402   003C28  EC65  F020         	call	_reverse	;wreg free
  6403                           
  6404                           ;MazeRobot.X/dc_motor.c: 332:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  6405   003C2C  0E39               	movlw	57
  6406   003C2E  6E23               	movwf	(??_turnRight_135+1)^0,c
  6407   003C30  0ED2               	movlw	210
  6408   003C32  6E22               	movwf	??_turnRight_135^0,c
  6409   003C34  0E4C               	movlw	76
  6410   003C36                     u6367:
  6411   003C36  2EE8               	decfsz	wreg,f,c
  6412   003C38  D7FE               	bra	u6367
  6413   003C3A  2E22               	decfsz	??_turnRight_135^0,f,c
  6414   003C3C  D7FC               	bra	u6367
  6415   003C3E  2E23               	decfsz	(??_turnRight_135+1)^0,f,c
  6416   003C40  D7FA               	bra	u6367
  6417   003C42  D000               	nop2	
  6418   003C44                     
  6419                           ;MazeRobot.X/dc_motor.c: 334:     stop(mL, mR);
  6420   003C44  C01E  F018         	movff	turnRight_135@mL,stop@mL
  6421   003C48  C01F  F019         	movff	turnRight_135@mL+1,stop@mL+1
  6422   003C4C  C020  F01A         	movff	turnRight_135@mR,stop@mR
  6423   003C50  C021  F01B         	movff	turnRight_135@mR+1,stop@mR+1
  6424   003C54  EC9E  F021         	call	_stop	;wreg free
  6425   003C58                     
  6426                           ;MazeRobot.X/dc_motor.c: 336:     mL->direction = 1;
  6427   003C58  EE20 F001          	lfsr	2,1
  6428   003C5C  501E               	movf	turnRight_135@mL^0,w,c
  6429   003C5E  26D9               	addwf	fsr2l,f,c
  6430   003C60  501F               	movf	(turnRight_135@mL+1)^0,w,c
  6431   003C62  22DA               	addwfc	fsr2h,f,c
  6432   003C64  0E01               	movlw	1
  6433   003C66  6EDF               	movwf	indf2,c
  6434   003C68                     
  6435                           ;MazeRobot.X/dc_motor.c: 337:     mR->direction = 0;
  6436   003C68  EE20 F001          	lfsr	2,1
  6437   003C6C  5020               	movf	turnRight_135@mR^0,w,c
  6438   003C6E  26D9               	addwf	fsr2l,f,c
  6439   003C70  5021               	movf	(turnRight_135@mR+1)^0,w,c
  6440   003C72  22DA               	addwfc	fsr2h,f,c
  6441   003C74  0E00               	movlw	0
  6442   003C76  6EDF               	movwf	indf2,c
  6443   003C78                     
  6444                           ;MazeRobot.X/dc_motor.c: 339:     mL->brakemode = 1;
  6445   003C78  EE20 F002          	lfsr	2,2
  6446   003C7C  501E               	movf	turnRight_135@mL^0,w,c
  6447   003C7E  26D9               	addwf	fsr2l,f,c
  6448   003C80  501F               	movf	(turnRight_135@mL+1)^0,w,c
  6449   003C82  22DA               	addwfc	fsr2h,f,c
  6450   003C84  0E01               	movlw	1
  6451   003C86  6EDF               	movwf	indf2,c
  6452   003C88                     
  6453                           ;MazeRobot.X/dc_motor.c: 340:     mL->brakemode = 1;
  6454   003C88  EE20 F002          	lfsr	2,2
  6455   003C8C  501E               	movf	turnRight_135@mL^0,w,c
  6456   003C8E  26D9               	addwf	fsr2l,f,c
  6457   003C90  501F               	movf	(turnRight_135@mL+1)^0,w,c
  6458   003C92  22DA               	addwfc	fsr2h,f,c
  6459   003C94  0E01               	movlw	1
  6460   003C96  6EDF               	movwf	indf2,c
  6461                           
  6462                           ;MazeRobot.X/dc_motor.c: 342:     while((mL->power < 80) || (mR->power < 80)){
  6463   003C98  EF66  F01E         	goto	l3822
  6464   003C9C                     l3816:
  6465                           
  6466                           ;MazeRobot.X/dc_motor.c: 343:         mL->power += 10;
  6467   003C9C  C01E  FFD9         	movff	turnRight_135@mL,fsr2l
  6468   003CA0  C01F  FFDA         	movff	turnRight_135@mL+1,fsr2h
  6469   003CA4  0E0A               	movlw	10
  6470   003CA6  26DF               	addwf	indf2,f,c
  6471                           
  6472                           ;MazeRobot.X/dc_motor.c: 344:         mR->power += 10;
  6473   003CA8  C020  FFD9         	movff	turnRight_135@mR,fsr2l
  6474   003CAC  C021  FFDA         	movff	turnRight_135@mR+1,fsr2h
  6475   003CB0  0E0A               	movlw	10
  6476   003CB2  26DF               	addwf	indf2,f,c
  6477   003CB4                     
  6478                           ;MazeRobot.X/dc_motor.c: 345:         setMotorPWM(mL);
  6479   003CB4  C01E  F012         	movff	turnRight_135@mL,setMotorPWM@m
  6480   003CB8  C01F  F013         	movff	turnRight_135@mL+1,setMotorPWM@m+1
  6481   003CBC  EC63  F019         	call	_setMotorPWM	;wreg free
  6482   003CC0                     
  6483                           ;MazeRobot.X/dc_motor.c: 346:         setMotorPWM(mR);
  6484   003CC0  C020  F012         	movff	turnRight_135@mR,setMotorPWM@m
  6485   003CC4  C021  F013         	movff	turnRight_135@mR+1,setMotorPWM@m+1
  6486   003CC8  EC63  F019         	call	_setMotorPWM	;wreg free
  6487   003CCC                     l3822:
  6488                           
  6489                           ;MazeRobot.X/dc_motor.c: 342:     while((mL->power < 80) || (mR->power < 80)){
  6490   003CCC  C01E  FFD9         	movff	turnRight_135@mL,fsr2l
  6491   003CD0  C01F  FFDA         	movff	turnRight_135@mL+1,fsr2h
  6492   003CD4  0E4F               	movlw	79
  6493   003CD6  64DF               	cpfsgt	indf2,c
  6494   003CD8  EF70  F01E         	goto	u3611
  6495   003CDC  EF72  F01E         	goto	u3610
  6496   003CE0                     u3611:
  6497   003CE0  EF4E  F01E         	goto	l3816
  6498   003CE4                     u3610:
  6499   003CE4  C020  FFD9         	movff	turnRight_135@mR,fsr2l
  6500   003CE8  C021  FFDA         	movff	turnRight_135@mR+1,fsr2h
  6501   003CEC  0E4F               	movlw	79
  6502   003CEE  64DF               	cpfsgt	indf2,c
  6503   003CF0  EF7C  F01E         	goto	u3621
  6504   003CF4  EF7E  F01E         	goto	u3620
  6505   003CF8                     u3621:
  6506   003CF8  EF4E  F01E         	goto	l3816
  6507   003CFC                     u3620:
  6508   003CFC                     
  6509                           ;MazeRobot.X/dc_motor.c: 348:    _delay((unsigned long)((1.5*turning_time45)*(64000000/4
      +                          000.0)));
  6510   003CFC  0E15               	movlw	21
  6511   003CFE  6E23               	movwf	(??_turnRight_135+1)^0,c
  6512   003D00  0EB3               	movlw	179
  6513   003D02  6E22               	movwf	??_turnRight_135^0,c
  6514   003D04  0EA4               	movlw	164
  6515   003D06                     u6377:
  6516   003D06  2EE8               	decfsz	wreg,f,c
  6517   003D08  D7FE               	bra	u6377
  6518   003D0A  2E22               	decfsz	??_turnRight_135^0,f,c
  6519   003D0C  D7FC               	bra	u6377
  6520   003D0E  2E23               	decfsz	(??_turnRight_135+1)^0,f,c
  6521   003D10  D7FA               	bra	u6377
  6522   003D12                     
  6523                           ;MazeRobot.X/dc_motor.c: 350:     stop(mL, mR);
  6524   003D12  C01E  F018         	movff	turnRight_135@mL,stop@mL
  6525   003D16  C01F  F019         	movff	turnRight_135@mL+1,stop@mL+1
  6526   003D1A  C020  F01A         	movff	turnRight_135@mR,stop@mR
  6527   003D1E  C021  F01B         	movff	turnRight_135@mR+1,stop@mR+1
  6528   003D22  EC9E  F021         	call	_stop	;wreg free
  6529   003D26  0012               	return		;funcret
  6530   003D28                     __end_of_turnRight_135:
  6531                           	callstack 0
  6532                           
  6533 ;; *************** function _turnLeft_135 *****************
  6534 ;; Defined at:
  6535 ;;		line 355 in file "MazeRobot.X/dc_motor.c"
  6536 ;; Parameters:    Size  Location     Type
  6537 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  6538 ;;		 -> main@motorLeft(9), 
  6539 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  6540 ;;		 -> main@motorRight(9), 
  6541 ;; Auto vars:     Size  Location     Type
  6542 ;;		None
  6543 ;; Return value:  Size  Location     Type
  6544 ;;                  1    wreg      void 
  6545 ;; Registers used:
  6546 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6547 ;; Tracked objects:
  6548 ;;		On entry : 0/0
  6549 ;;		On exit  : 0/0
  6550 ;;		Unchanged: 0/0
  6551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6552 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6553 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6554 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6555 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6556 ;;Total ram usage:        6 bytes
  6557 ;; Hardware stack levels used: 1
  6558 ;; Hardware stack levels required when called: 5
  6559 ;; This function calls:
  6560 ;;		_reverse
  6561 ;;		_setMotorPWM
  6562 ;;		_stop
  6563 ;; This function is called by:
  6564 ;;		_colorDetect
  6565 ;;		_return_home_turns
  6566 ;; This function uses a non-reentrant model
  6567 ;;
  6568                           
  6569                           	psect	text27
  6570   003832                     __ptext27:
  6571                           	callstack 0
  6572   003832                     _turnLeft_135:
  6573                           	callstack 24
  6574   003832                     
  6575                           ;MazeRobot.X/dc_motor.c: 355: void turnLeft_135(DC_motor *mL, DC_motor *mR);MazeRobot.X/
      +                          dc_motor.c: 356: {;MazeRobot.X/dc_motor.c: 358:     stop(mL, mR);
  6576   003832  C01E  F018         	movff	turnLeft_135@mL,stop@mL
  6577   003836  C01F  F019         	movff	turnLeft_135@mL+1,stop@mL+1
  6578   00383A  C020  F01A         	movff	turnLeft_135@mR,stop@mR
  6579   00383E  C021  F01B         	movff	turnLeft_135@mR+1,stop@mR+1
  6580   003842  EC9E  F021         	call	_stop	;wreg free
  6581   003846                     
  6582                           ;MazeRobot.X/dc_motor.c: 359:     _delay((unsigned long)((100)*(64000000/4000.0)));
  6583   003846  0E09               	movlw	9
  6584   003848  6E23               	movwf	(??_turnLeft_135+1)^0,c
  6585   00384A  0E1E               	movlw	30
  6586   00384C  6E22               	movwf	??_turnLeft_135^0,c
  6587   00384E  0EE4               	movlw	228
  6588   003850                     u6387:
  6589   003850  2EE8               	decfsz	wreg,f,c
  6590   003852  D7FE               	bra	u6387
  6591   003854  2E22               	decfsz	??_turnLeft_135^0,f,c
  6592   003856  D7FC               	bra	u6387
  6593   003858  2E23               	decfsz	(??_turnLeft_135+1)^0,f,c
  6594   00385A  D7FA               	bra	u6387
  6595   00385C  D000               	nop2	
  6596   00385E                     
  6597                           ;MazeRobot.X/dc_motor.c: 361:     reverse(mL, mR);
  6598   00385E  C01E  F018         	movff	turnLeft_135@mL,reverse@mL
  6599   003862  C01F  F019         	movff	turnLeft_135@mL+1,reverse@mL+1
  6600   003866  C020  F01A         	movff	turnLeft_135@mR,reverse@mR
  6601   00386A  C021  F01B         	movff	turnLeft_135@mR+1,reverse@mR+1
  6602   00386E  EC65  F020         	call	_reverse	;wreg free
  6603                           
  6604                           ;MazeRobot.X/dc_motor.c: 362:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  6605   003872  0E39               	movlw	57
  6606   003874  6E23               	movwf	(??_turnLeft_135+1)^0,c
  6607   003876  0ED2               	movlw	210
  6608   003878  6E22               	movwf	??_turnLeft_135^0,c
  6609   00387A  0E4C               	movlw	76
  6610   00387C                     u6397:
  6611   00387C  2EE8               	decfsz	wreg,f,c
  6612   00387E  D7FE               	bra	u6397
  6613   003880  2E22               	decfsz	??_turnLeft_135^0,f,c
  6614   003882  D7FC               	bra	u6397
  6615   003884  2E23               	decfsz	(??_turnLeft_135+1)^0,f,c
  6616   003886  D7FA               	bra	u6397
  6617   003888  D000               	nop2	
  6618   00388A                     
  6619                           ;MazeRobot.X/dc_motor.c: 364:     stop(mL, mR);
  6620   00388A  C01E  F018         	movff	turnLeft_135@mL,stop@mL
  6621   00388E  C01F  F019         	movff	turnLeft_135@mL+1,stop@mL+1
  6622   003892  C020  F01A         	movff	turnLeft_135@mR,stop@mR
  6623   003896  C021  F01B         	movff	turnLeft_135@mR+1,stop@mR+1
  6624   00389A  EC9E  F021         	call	_stop	;wreg free
  6625   00389E                     
  6626                           ;MazeRobot.X/dc_motor.c: 366:     mL->direction = 0;
  6627   00389E  EE20 F001          	lfsr	2,1
  6628   0038A2  501E               	movf	turnLeft_135@mL^0,w,c
  6629   0038A4  26D9               	addwf	fsr2l,f,c
  6630   0038A6  501F               	movf	(turnLeft_135@mL+1)^0,w,c
  6631   0038A8  22DA               	addwfc	fsr2h,f,c
  6632   0038AA  0E00               	movlw	0
  6633   0038AC  6EDF               	movwf	indf2,c
  6634   0038AE                     
  6635                           ;MazeRobot.X/dc_motor.c: 367:     mR->direction = 1;
  6636   0038AE  EE20 F001          	lfsr	2,1
  6637   0038B2  5020               	movf	turnLeft_135@mR^0,w,c
  6638   0038B4  26D9               	addwf	fsr2l,f,c
  6639   0038B6  5021               	movf	(turnLeft_135@mR+1)^0,w,c
  6640   0038B8  22DA               	addwfc	fsr2h,f,c
  6641   0038BA  0E01               	movlw	1
  6642   0038BC  6EDF               	movwf	indf2,c
  6643   0038BE                     
  6644                           ;MazeRobot.X/dc_motor.c: 369:     mL->brakemode = 1;
  6645   0038BE  EE20 F002          	lfsr	2,2
  6646   0038C2  501E               	movf	turnLeft_135@mL^0,w,c
  6647   0038C4  26D9               	addwf	fsr2l,f,c
  6648   0038C6  501F               	movf	(turnLeft_135@mL+1)^0,w,c
  6649   0038C8  22DA               	addwfc	fsr2h,f,c
  6650   0038CA  0E01               	movlw	1
  6651   0038CC  6EDF               	movwf	indf2,c
  6652   0038CE                     
  6653                           ;MazeRobot.X/dc_motor.c: 370:     mL->brakemode = 1;
  6654   0038CE  EE20 F002          	lfsr	2,2
  6655   0038D2  501E               	movf	turnLeft_135@mL^0,w,c
  6656   0038D4  26D9               	addwf	fsr2l,f,c
  6657   0038D6  501F               	movf	(turnLeft_135@mL+1)^0,w,c
  6658   0038D8  22DA               	addwfc	fsr2h,f,c
  6659   0038DA  0E01               	movlw	1
  6660   0038DC  6EDF               	movwf	indf2,c
  6661                           
  6662                           ;MazeRobot.X/dc_motor.c: 372:     while((mL->power < 80) || (mR->power < 80)){
  6663   0038DE  EF89  F01C         	goto	l3852
  6664   0038E2                     l3846:
  6665                           
  6666                           ;MazeRobot.X/dc_motor.c: 373:         mL->power += 10;
  6667   0038E2  C01E  FFD9         	movff	turnLeft_135@mL,fsr2l
  6668   0038E6  C01F  FFDA         	movff	turnLeft_135@mL+1,fsr2h
  6669   0038EA  0E0A               	movlw	10
  6670   0038EC  26DF               	addwf	indf2,f,c
  6671                           
  6672                           ;MazeRobot.X/dc_motor.c: 374:         mR->power += 10;
  6673   0038EE  C020  FFD9         	movff	turnLeft_135@mR,fsr2l
  6674   0038F2  C021  FFDA         	movff	turnLeft_135@mR+1,fsr2h
  6675   0038F6  0E0A               	movlw	10
  6676   0038F8  26DF               	addwf	indf2,f,c
  6677   0038FA                     
  6678                           ;MazeRobot.X/dc_motor.c: 375:         setMotorPWM(mL);
  6679   0038FA  C01E  F012         	movff	turnLeft_135@mL,setMotorPWM@m
  6680   0038FE  C01F  F013         	movff	turnLeft_135@mL+1,setMotorPWM@m+1
  6681   003902  EC63  F019         	call	_setMotorPWM	;wreg free
  6682   003906                     
  6683                           ;MazeRobot.X/dc_motor.c: 376:         setMotorPWM(mR);
  6684   003906  C020  F012         	movff	turnLeft_135@mR,setMotorPWM@m
  6685   00390A  C021  F013         	movff	turnLeft_135@mR+1,setMotorPWM@m+1
  6686   00390E  EC63  F019         	call	_setMotorPWM	;wreg free
  6687   003912                     l3852:
  6688                           
  6689                           ;MazeRobot.X/dc_motor.c: 372:     while((mL->power < 80) || (mR->power < 80)){
  6690   003912  C01E  FFD9         	movff	turnLeft_135@mL,fsr2l
  6691   003916  C01F  FFDA         	movff	turnLeft_135@mL+1,fsr2h
  6692   00391A  0E4F               	movlw	79
  6693   00391C  64DF               	cpfsgt	indf2,c
  6694   00391E  EF93  F01C         	goto	u3631
  6695   003922  EF95  F01C         	goto	u3630
  6696   003926                     u3631:
  6697   003926  EF71  F01C         	goto	l3846
  6698   00392A                     u3630:
  6699   00392A  C020  FFD9         	movff	turnLeft_135@mR,fsr2l
  6700   00392E  C021  FFDA         	movff	turnLeft_135@mR+1,fsr2h
  6701   003932  0E4F               	movlw	79
  6702   003934  64DF               	cpfsgt	indf2,c
  6703   003936  EF9F  F01C         	goto	u3641
  6704   00393A  EFA1  F01C         	goto	u3640
  6705   00393E                     u3641:
  6706   00393E  EF71  F01C         	goto	l3846
  6707   003942                     u3640:
  6708   003942                     
  6709                           ;MazeRobot.X/dc_motor.c: 378:    _delay((unsigned long)((3*turning_time45)*(64000000/400
      +                          0.0)));
  6710   003942  0E2A               	movlw	42
  6711   003944  6E23               	movwf	(??_turnLeft_135+1)^0,c
  6712   003946  0E66               	movlw	102
  6713   003948  6E22               	movwf	??_turnLeft_135^0,c
  6714   00394A  0E49               	movlw	73
  6715   00394C                     u6407:
  6716   00394C  2EE8               	decfsz	wreg,f,c
  6717   00394E  D7FE               	bra	u6407
  6718   003950  2E22               	decfsz	??_turnLeft_135^0,f,c
  6719   003952  D7FC               	bra	u6407
  6720   003954  2E23               	decfsz	(??_turnLeft_135+1)^0,f,c
  6721   003956  D7FA               	bra	u6407
  6722   003958  F000               	nop	
  6723   00395A                     
  6724                           ;MazeRobot.X/dc_motor.c: 379:     stop(mL, mR);
  6725   00395A  C01E  F018         	movff	turnLeft_135@mL,stop@mL
  6726   00395E  C01F  F019         	movff	turnLeft_135@mL+1,stop@mL+1
  6727   003962  C020  F01A         	movff	turnLeft_135@mR,stop@mR
  6728   003966  C021  F01B         	movff	turnLeft_135@mR+1,stop@mR+1
  6729   00396A  EC9E  F021         	call	_stop	;wreg free
  6730   00396E  0012               	return		;funcret
  6731   003970                     __end_of_turnLeft_135:
  6732                           	callstack 0
  6733                           
  6734 ;; *************** function _reverseSquareRight *****************
  6735 ;; Defined at:
  6736 ;;		line 383 in file "MazeRobot.X/dc_motor.c"
  6737 ;; Parameters:    Size  Location     Type
  6738 ;;  mL              2   35[COMRAM] PTR struct DC_motor
  6739 ;;		 -> main@motorLeft(9), 
  6740 ;;  mR              2   37[COMRAM] PTR struct DC_motor
  6741 ;;		 -> main@motorRight(9), 
  6742 ;; Auto vars:     Size  Location     Type
  6743 ;;		None
  6744 ;; Return value:  Size  Location     Type
  6745 ;;                  1    wreg      void 
  6746 ;; Registers used:
  6747 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6748 ;; Tracked objects:
  6749 ;;		On entry : 0/0
  6750 ;;		On exit  : 0/0
  6751 ;;		Unchanged: 0/0
  6752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6753 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6755 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6756 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6757 ;;Total ram usage:        6 bytes
  6758 ;; Hardware stack levels used: 1
  6759 ;; Hardware stack levels required when called: 6
  6760 ;; This function calls:
  6761 ;;		_reverse
  6762 ;;		_stop
  6763 ;;		_turnRight_90
  6764 ;; This function is called by:
  6765 ;;		_colorDetect
  6766 ;; This function uses a non-reentrant model
  6767 ;;
  6768                           
  6769                           	psect	text28
  6770   0043EA                     __ptext28:
  6771                           	callstack 0
  6772   0043EA                     _reverseSquareRight:
  6773                           	callstack 23
  6774   0043EA                     
  6775                           ;MazeRobot.X/dc_motor.c: 383: void reverseSquareRight(DC_motor *mL, DC_motor *mR);MazeRo
      +                          bot.X/dc_motor.c: 384: {;MazeRobot.X/dc_motor.c: 386:     reverse(mL, mR);
  6776   0043EA  C024  F018         	movff	reverseSquareRight@mL,reverse@mL
  6777   0043EE  C025  F019         	movff	reverseSquareRight@mL+1,reverse@mL+1
  6778   0043F2  C026  F01A         	movff	reverseSquareRight@mR,reverse@mR
  6779   0043F6  C027  F01B         	movff	reverseSquareRight@mR+1,reverse@mR+1
  6780   0043FA  EC65  F020         	call	_reverse	;wreg free
  6781   0043FE                     
  6782                           ;MazeRobot.X/dc_motor.c: 387:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  6783   0043FE  0E39               	movlw	57
  6784   004400  6E29               	movwf	(??_reverseSquareRight+1)^0,c
  6785   004402  0ED2               	movlw	210
  6786   004404  6E28               	movwf	??_reverseSquareRight^0,c
  6787   004406  0E4C               	movlw	76
  6788   004408                     u6417:
  6789   004408  2EE8               	decfsz	wreg,f,c
  6790   00440A  D7FE               	bra	u6417
  6791   00440C  2E28               	decfsz	??_reverseSquareRight^0,f,c
  6792   00440E  D7FC               	bra	u6417
  6793   004410  2E29               	decfsz	(??_reverseSquareRight+1)^0,f,c
  6794   004412  D7FA               	bra	u6417
  6795   004414  D000               	nop2	
  6796   004416                     
  6797                           ;MazeRobot.X/dc_motor.c: 389:     stop(mL, mR);
  6798   004416  C024  F018         	movff	reverseSquareRight@mL,stop@mL
  6799   00441A  C025  F019         	movff	reverseSquareRight@mL+1,stop@mL+1
  6800   00441E  C026  F01A         	movff	reverseSquareRight@mR,stop@mR
  6801   004422  C027  F01B         	movff	reverseSquareRight@mR+1,stop@mR+1
  6802   004426  EC9E  F021         	call	_stop	;wreg free
  6803   00442A                     
  6804                           ;MazeRobot.X/dc_motor.c: 391:     reverse(mL, mR);
  6805   00442A  C024  F018         	movff	reverseSquareRight@mL,reverse@mL
  6806   00442E  C025  F019         	movff	reverseSquareRight@mL+1,reverse@mL+1
  6807   004432  C026  F01A         	movff	reverseSquareRight@mR,reverse@mR
  6808   004436  C027  F01B         	movff	reverseSquareRight@mR+1,reverse@mR+1
  6809   00443A  EC65  F020         	call	_reverse	;wreg free
  6810   00443E                     
  6811                           ;MazeRobot.X/dc_motor.c: 392:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  6812   00443E  0E39               	movlw	57
  6813   004440  6E29               	movwf	(??_reverseSquareRight+1)^0,c
  6814   004442  0ED2               	movlw	210
  6815   004444  6E28               	movwf	??_reverseSquareRight^0,c
  6816   004446  0E4C               	movlw	76
  6817   004448                     u6427:
  6818   004448  2EE8               	decfsz	wreg,f,c
  6819   00444A  D7FE               	bra	u6427
  6820   00444C  2E28               	decfsz	??_reverseSquareRight^0,f,c
  6821   00444E  D7FC               	bra	u6427
  6822   004450  2E29               	decfsz	(??_reverseSquareRight+1)^0,f,c
  6823   004452  D7FA               	bra	u6427
  6824   004454  D000               	nop2	
  6825                           
  6826                           ;MazeRobot.X/dc_motor.c: 394:     turnRight_90(mL,mR);
  6827   004456  C024  F01E         	movff	reverseSquareRight@mL,turnRight_90@mL
  6828   00445A  C025  F01F         	movff	reverseSquareRight@mL+1,turnRight_90@mL+1
  6829   00445E  C026  F020         	movff	reverseSquareRight@mR,turnRight_90@mR
  6830   004462  C027  F021         	movff	reverseSquareRight@mR+1,turnRight_90@mR+1
  6831   004466  ECB8  F01C         	call	_turnRight_90	;wreg free
  6832                           
  6833                           ;MazeRobot.X/dc_motor.c: 396:     stop(mL, mR);
  6834   00446A  C024  F018         	movff	reverseSquareRight@mL,stop@mL
  6835   00446E  C025  F019         	movff	reverseSquareRight@mL+1,stop@mL+1
  6836   004472  C026  F01A         	movff	reverseSquareRight@mR,stop@mR
  6837   004476  C027  F01B         	movff	reverseSquareRight@mR+1,stop@mR+1
  6838   00447A  EC9E  F021         	call	_stop	;wreg free
  6839   00447E  0012               	return		;funcret
  6840   004480                     __end_of_reverseSquareRight:
  6841                           	callstack 0
  6842                           
  6843 ;; *************** function _turnRight_90 *****************
  6844 ;; Defined at:
  6845 ;;		line 269 in file "MazeRobot.X/dc_motor.c"
  6846 ;; Parameters:    Size  Location     Type
  6847 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  6848 ;;		 -> main@motorLeft(9), 
  6849 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  6850 ;;		 -> main@motorRight(9), 
  6851 ;; Auto vars:     Size  Location     Type
  6852 ;;		None
  6853 ;; Return value:  Size  Location     Type
  6854 ;;                  1    wreg      void 
  6855 ;; Registers used:
  6856 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6857 ;; Tracked objects:
  6858 ;;		On entry : 0/0
  6859 ;;		On exit  : 0/0
  6860 ;;		Unchanged: 0/0
  6861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6862 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6864 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6865 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6866 ;;Total ram usage:        6 bytes
  6867 ;; Hardware stack levels used: 1
  6868 ;; Hardware stack levels required when called: 5
  6869 ;; This function calls:
  6870 ;;		_reverse
  6871 ;;		_setMotorPWM
  6872 ;;		_stop
  6873 ;; This function is called by:
  6874 ;;		_colorDetect
  6875 ;;		_return_home_turns
  6876 ;;		_reverseSquareRight
  6877 ;; This function uses a non-reentrant model
  6878 ;;
  6879                           
  6880                           	psect	text29
  6881   003970                     __ptext29:
  6882                           	callstack 0
  6883   003970                     _turnRight_90:
  6884                           	callstack 24
  6885   003970                     
  6886                           ;MazeRobot.X/dc_motor.c: 269: void turnRight_90(DC_motor *mL, DC_motor *mR);MazeRobot.X/
      +                          dc_motor.c: 270: {;MazeRobot.X/dc_motor.c: 271:     stop(mL, mR);
  6887   003970  C01E  F018         	movff	turnRight_90@mL,stop@mL
  6888   003974  C01F  F019         	movff	turnRight_90@mL+1,stop@mL+1
  6889   003978  C020  F01A         	movff	turnRight_90@mR,stop@mR
  6890   00397C  C021  F01B         	movff	turnRight_90@mR+1,stop@mR+1
  6891   003980  EC9E  F021         	call	_stop	;wreg free
  6892   003984                     
  6893                           ;MazeRobot.X/dc_motor.c: 272:     _delay((unsigned long)((100)*(64000000/4000.0)));
  6894   003984  0E09               	movlw	9
  6895   003986  6E23               	movwf	(??_turnRight_90+1)^0,c
  6896   003988  0E1E               	movlw	30
  6897   00398A  6E22               	movwf	??_turnRight_90^0,c
  6898   00398C  0EE4               	movlw	228
  6899   00398E                     u6437:
  6900   00398E  2EE8               	decfsz	wreg,f,c
  6901   003990  D7FE               	bra	u6437
  6902   003992  2E22               	decfsz	??_turnRight_90^0,f,c
  6903   003994  D7FC               	bra	u6437
  6904   003996  2E23               	decfsz	(??_turnRight_90+1)^0,f,c
  6905   003998  D7FA               	bra	u6437
  6906   00399A  D000               	nop2	
  6907   00399C                     
  6908                           ;MazeRobot.X/dc_motor.c: 274:     reverse(mL, mR);
  6909   00399C  C01E  F018         	movff	turnRight_90@mL,reverse@mL
  6910   0039A0  C01F  F019         	movff	turnRight_90@mL+1,reverse@mL+1
  6911   0039A4  C020  F01A         	movff	turnRight_90@mR,reverse@mR
  6912   0039A8  C021  F01B         	movff	turnRight_90@mR+1,reverse@mR+1
  6913   0039AC  EC65  F020         	call	_reverse	;wreg free
  6914                           
  6915                           ;MazeRobot.X/dc_motor.c: 275:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  6916   0039B0  0E39               	movlw	57
  6917   0039B2  6E23               	movwf	(??_turnRight_90+1)^0,c
  6918   0039B4  0ED2               	movlw	210
  6919   0039B6  6E22               	movwf	??_turnRight_90^0,c
  6920   0039B8  0E4C               	movlw	76
  6921   0039BA                     u6447:
  6922   0039BA  2EE8               	decfsz	wreg,f,c
  6923   0039BC  D7FE               	bra	u6447
  6924   0039BE  2E22               	decfsz	??_turnRight_90^0,f,c
  6925   0039C0  D7FC               	bra	u6447
  6926   0039C2  2E23               	decfsz	(??_turnRight_90+1)^0,f,c
  6927   0039C4  D7FA               	bra	u6447
  6928   0039C6  D000               	nop2	
  6929   0039C8                     
  6930                           ;MazeRobot.X/dc_motor.c: 277:     stop(mL, mR);
  6931   0039C8  C01E  F018         	movff	turnRight_90@mL,stop@mL
  6932   0039CC  C01F  F019         	movff	turnRight_90@mL+1,stop@mL+1
  6933   0039D0  C020  F01A         	movff	turnRight_90@mR,stop@mR
  6934   0039D4  C021  F01B         	movff	turnRight_90@mR+1,stop@mR+1
  6935   0039D8  EC9E  F021         	call	_stop	;wreg free
  6936   0039DC                     
  6937                           ;MazeRobot.X/dc_motor.c: 279:     mL->direction = 1;
  6938   0039DC  EE20 F001          	lfsr	2,1
  6939   0039E0  501E               	movf	turnRight_90@mL^0,w,c
  6940   0039E2  26D9               	addwf	fsr2l,f,c
  6941   0039E4  501F               	movf	(turnRight_90@mL+1)^0,w,c
  6942   0039E6  22DA               	addwfc	fsr2h,f,c
  6943   0039E8  0E01               	movlw	1
  6944   0039EA  6EDF               	movwf	indf2,c
  6945   0039EC                     
  6946                           ;MazeRobot.X/dc_motor.c: 280:     mR->direction = 0;
  6947   0039EC  EE20 F001          	lfsr	2,1
  6948   0039F0  5020               	movf	turnRight_90@mR^0,w,c
  6949   0039F2  26D9               	addwf	fsr2l,f,c
  6950   0039F4  5021               	movf	(turnRight_90@mR+1)^0,w,c
  6951   0039F6  22DA               	addwfc	fsr2h,f,c
  6952   0039F8  0E00               	movlw	0
  6953   0039FA  6EDF               	movwf	indf2,c
  6954   0039FC                     
  6955                           ;MazeRobot.X/dc_motor.c: 282:     mL->brakemode = 1;
  6956   0039FC  EE20 F002          	lfsr	2,2
  6957   003A00  501E               	movf	turnRight_90@mL^0,w,c
  6958   003A02  26D9               	addwf	fsr2l,f,c
  6959   003A04  501F               	movf	(turnRight_90@mL+1)^0,w,c
  6960   003A06  22DA               	addwfc	fsr2h,f,c
  6961   003A08  0E01               	movlw	1
  6962   003A0A  6EDF               	movwf	indf2,c
  6963   003A0C                     
  6964                           ;MazeRobot.X/dc_motor.c: 283:     mL->brakemode = 1;
  6965   003A0C  EE20 F002          	lfsr	2,2
  6966   003A10  501E               	movf	turnRight_90@mL^0,w,c
  6967   003A12  26D9               	addwf	fsr2l,f,c
  6968   003A14  501F               	movf	(turnRight_90@mL+1)^0,w,c
  6969   003A16  22DA               	addwfc	fsr2h,f,c
  6970   003A18  0E01               	movlw	1
  6971   003A1A  6EDF               	movwf	indf2,c
  6972                           
  6973                           ;MazeRobot.X/dc_motor.c: 285:     while((mL->power < 80) || (mR->power < 80)){
  6974   003A1C  EF28  F01D         	goto	l3472
  6975   003A20                     l3466:
  6976                           
  6977                           ;MazeRobot.X/dc_motor.c: 286:         mL->power += 10;
  6978   003A20  C01E  FFD9         	movff	turnRight_90@mL,fsr2l
  6979   003A24  C01F  FFDA         	movff	turnRight_90@mL+1,fsr2h
  6980   003A28  0E0A               	movlw	10
  6981   003A2A  26DF               	addwf	indf2,f,c
  6982                           
  6983                           ;MazeRobot.X/dc_motor.c: 287:         mR->power += 10;
  6984   003A2C  C020  FFD9         	movff	turnRight_90@mR,fsr2l
  6985   003A30  C021  FFDA         	movff	turnRight_90@mR+1,fsr2h
  6986   003A34  0E0A               	movlw	10
  6987   003A36  26DF               	addwf	indf2,f,c
  6988   003A38                     
  6989                           ;MazeRobot.X/dc_motor.c: 288:         setMotorPWM(mL);
  6990   003A38  C01E  F012         	movff	turnRight_90@mL,setMotorPWM@m
  6991   003A3C  C01F  F013         	movff	turnRight_90@mL+1,setMotorPWM@m+1
  6992   003A40  EC63  F019         	call	_setMotorPWM	;wreg free
  6993   003A44                     
  6994                           ;MazeRobot.X/dc_motor.c: 289:         setMotorPWM(mR);
  6995   003A44  C020  F012         	movff	turnRight_90@mR,setMotorPWM@m
  6996   003A48  C021  F013         	movff	turnRight_90@mR+1,setMotorPWM@m+1
  6997   003A4C  EC63  F019         	call	_setMotorPWM	;wreg free
  6998   003A50                     l3472:
  6999                           
  7000                           ;MazeRobot.X/dc_motor.c: 285:     while((mL->power < 80) || (mR->power < 80)){
  7001   003A50  C01E  FFD9         	movff	turnRight_90@mL,fsr2l
  7002   003A54  C01F  FFDA         	movff	turnRight_90@mL+1,fsr2h
  7003   003A58  0E4F               	movlw	79
  7004   003A5A  64DF               	cpfsgt	indf2,c
  7005   003A5C  EF32  F01D         	goto	u3121
  7006   003A60  EF34  F01D         	goto	u3120
  7007   003A64                     u3121:
  7008   003A64  EF10  F01D         	goto	l3466
  7009   003A68                     u3120:
  7010   003A68  C020  FFD9         	movff	turnRight_90@mR,fsr2l
  7011   003A6C  C021  FFDA         	movff	turnRight_90@mR+1,fsr2h
  7012   003A70  0E4F               	movlw	79
  7013   003A72  64DF               	cpfsgt	indf2,c
  7014   003A74  EF3E  F01D         	goto	u3131
  7015   003A78  EF40  F01D         	goto	u3130
  7016   003A7C                     u3131:
  7017   003A7C  EF10  F01D         	goto	l3466
  7018   003A80                     u3130:
  7019   003A80                     
  7020                           ;MazeRobot.X/dc_motor.c: 291:    _delay((unsigned long)((turning_time45)*(64000000/4000.
      +                          0)));
  7021   003A80  0E0E               	movlw	14
  7022   003A82  6E23               	movwf	(??_turnRight_90+1)^0,c
  7023   003A84  0ECD               	movlw	205
  7024   003A86  6E22               	movwf	??_turnRight_90^0,c
  7025   003A88  0E6C               	movlw	108
  7026   003A8A                     u6457:
  7027   003A8A  2EE8               	decfsz	wreg,f,c
  7028   003A8C  D7FE               	bra	u6457
  7029   003A8E  2E22               	decfsz	??_turnRight_90^0,f,c
  7030   003A90  D7FC               	bra	u6457
  7031   003A92  2E23               	decfsz	(??_turnRight_90+1)^0,f,c
  7032   003A94  D7FA               	bra	u6457
  7033   003A96  D000               	nop2	
  7034   003A98                     
  7035                           ;MazeRobot.X/dc_motor.c: 293:     stop(mL, mR);
  7036   003A98  C01E  F018         	movff	turnRight_90@mL,stop@mL
  7037   003A9C  C01F  F019         	movff	turnRight_90@mL+1,stop@mL+1
  7038   003AA0  C020  F01A         	movff	turnRight_90@mR,stop@mR
  7039   003AA4  C021  F01B         	movff	turnRight_90@mR+1,stop@mR+1
  7040   003AA8  EC9E  F021         	call	_stop	;wreg free
  7041   003AAC  0012               	return		;funcret
  7042   003AAE                     __end_of_turnRight_90:
  7043                           	callstack 0
  7044                           
  7045 ;; *************** function _reverseSquareLeft *****************
  7046 ;; Defined at:
  7047 ;;		line 401 in file "MazeRobot.X/dc_motor.c"
  7048 ;; Parameters:    Size  Location     Type
  7049 ;;  mL              2   35[COMRAM] PTR struct DC_motor
  7050 ;;		 -> main@motorLeft(9), 
  7051 ;;  mR              2   37[COMRAM] PTR struct DC_motor
  7052 ;;		 -> main@motorRight(9), 
  7053 ;; Auto vars:     Size  Location     Type
  7054 ;;		None
  7055 ;; Return value:  Size  Location     Type
  7056 ;;                  1    wreg      void 
  7057 ;; Registers used:
  7058 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7059 ;; Tracked objects:
  7060 ;;		On entry : 0/0
  7061 ;;		On exit  : 0/0
  7062 ;;		Unchanged: 0/0
  7063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7064 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7066 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7067 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7068 ;;Total ram usage:        6 bytes
  7069 ;; Hardware stack levels used: 1
  7070 ;; Hardware stack levels required when called: 6
  7071 ;; This function calls:
  7072 ;;		_reverse
  7073 ;;		_stop
  7074 ;;		_turnLeft_90
  7075 ;; This function is called by:
  7076 ;;		_colorDetect
  7077 ;; This function uses a non-reentrant model
  7078 ;;
  7079                           
  7080                           	psect	text30
  7081   004480                     __ptext30:
  7082                           	callstack 0
  7083   004480                     _reverseSquareLeft:
  7084                           	callstack 23
  7085   004480                     
  7086                           ;MazeRobot.X/dc_motor.c: 401: void reverseSquareLeft(DC_motor *mL, DC_motor *mR);MazeRob
      +                          ot.X/dc_motor.c: 402: {;MazeRobot.X/dc_motor.c: 403:     reverse(mL, mR);
  7087   004480  C024  F018         	movff	reverseSquareLeft@mL,reverse@mL
  7088   004484  C025  F019         	movff	reverseSquareLeft@mL+1,reverse@mL+1
  7089   004488  C026  F01A         	movff	reverseSquareLeft@mR,reverse@mR
  7090   00448C  C027  F01B         	movff	reverseSquareLeft@mR+1,reverse@mR+1
  7091   004490  EC65  F020         	call	_reverse	;wreg free
  7092   004494                     
  7093                           ;MazeRobot.X/dc_motor.c: 404:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  7094   004494  0E39               	movlw	57
  7095   004496  6E29               	movwf	(??_reverseSquareLeft+1)^0,c
  7096   004498  0ED2               	movlw	210
  7097   00449A  6E28               	movwf	??_reverseSquareLeft^0,c
  7098   00449C  0E4C               	movlw	76
  7099   00449E                     u6467:
  7100   00449E  2EE8               	decfsz	wreg,f,c
  7101   0044A0  D7FE               	bra	u6467
  7102   0044A2  2E28               	decfsz	??_reverseSquareLeft^0,f,c
  7103   0044A4  D7FC               	bra	u6467
  7104   0044A6  2E29               	decfsz	(??_reverseSquareLeft+1)^0,f,c
  7105   0044A8  D7FA               	bra	u6467
  7106   0044AA  D000               	nop2	
  7107   0044AC                     
  7108                           ;MazeRobot.X/dc_motor.c: 406:     stop(mL, mR);
  7109   0044AC  C024  F018         	movff	reverseSquareLeft@mL,stop@mL
  7110   0044B0  C025  F019         	movff	reverseSquareLeft@mL+1,stop@mL+1
  7111   0044B4  C026  F01A         	movff	reverseSquareLeft@mR,stop@mR
  7112   0044B8  C027  F01B         	movff	reverseSquareLeft@mR+1,stop@mR+1
  7113   0044BC  EC9E  F021         	call	_stop	;wreg free
  7114   0044C0                     
  7115                           ;MazeRobot.X/dc_motor.c: 408:     reverse(mL, mR);
  7116   0044C0  C024  F018         	movff	reverseSquareLeft@mL,reverse@mL
  7117   0044C4  C025  F019         	movff	reverseSquareLeft@mL+1,reverse@mL+1
  7118   0044C8  C026  F01A         	movff	reverseSquareLeft@mR,reverse@mR
  7119   0044CC  C027  F01B         	movff	reverseSquareLeft@mR+1,reverse@mR+1
  7120   0044D0  EC65  F020         	call	_reverse	;wreg free
  7121   0044D4                     
  7122                           ;MazeRobot.X/dc_motor.c: 409:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  7123   0044D4  0E39               	movlw	57
  7124   0044D6  6E29               	movwf	(??_reverseSquareLeft+1)^0,c
  7125   0044D8  0ED2               	movlw	210
  7126   0044DA  6E28               	movwf	??_reverseSquareLeft^0,c
  7127   0044DC  0E4C               	movlw	76
  7128   0044DE                     u6477:
  7129   0044DE  2EE8               	decfsz	wreg,f,c
  7130   0044E0  D7FE               	bra	u6477
  7131   0044E2  2E28               	decfsz	??_reverseSquareLeft^0,f,c
  7132   0044E4  D7FC               	bra	u6477
  7133   0044E6  2E29               	decfsz	(??_reverseSquareLeft+1)^0,f,c
  7134   0044E8  D7FA               	bra	u6477
  7135   0044EA  D000               	nop2	
  7136                           
  7137                           ;MazeRobot.X/dc_motor.c: 411:     turnLeft_90(mL,mR);
  7138   0044EC  C024  F01E         	movff	reverseSquareLeft@mL,turnLeft_90@mL
  7139   0044F0  C025  F01F         	movff	reverseSquareLeft@mL+1,turnLeft_90@mL+1
  7140   0044F4  C026  F020         	movff	reverseSquareLeft@mR,turnLeft_90@mR
  7141   0044F8  C027  F021         	movff	reverseSquareLeft@mR+1,turnLeft_90@mR+1
  7142   0044FC  EC57  F01D         	call	_turnLeft_90	;wreg free
  7143                           
  7144                           ;MazeRobot.X/dc_motor.c: 413:     stop(mL, mR);
  7145   004500  C024  F018         	movff	reverseSquareLeft@mL,stop@mL
  7146   004504  C025  F019         	movff	reverseSquareLeft@mL+1,stop@mL+1
  7147   004508  C026  F01A         	movff	reverseSquareLeft@mR,stop@mR
  7148   00450C  C027  F01B         	movff	reverseSquareLeft@mR+1,stop@mR+1
  7149   004510  EC9E  F021         	call	_stop	;wreg free
  7150   004514  0012               	return		;funcret
  7151   004516                     __end_of_reverseSquareLeft:
  7152                           	callstack 0
  7153                           
  7154 ;; *************** function _turnLeft_90 *****************
  7155 ;; Defined at:
  7156 ;;		line 240 in file "MazeRobot.X/dc_motor.c"
  7157 ;; Parameters:    Size  Location     Type
  7158 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  7159 ;;		 -> main@motorLeft(9), 
  7160 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  7161 ;;		 -> main@motorRight(9), 
  7162 ;; Auto vars:     Size  Location     Type
  7163 ;;		None
  7164 ;; Return value:  Size  Location     Type
  7165 ;;                  1    wreg      void 
  7166 ;; Registers used:
  7167 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7168 ;; Tracked objects:
  7169 ;;		On entry : 0/0
  7170 ;;		On exit  : 0/0
  7171 ;;		Unchanged: 0/0
  7172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7173 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7174 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7175 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7176 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7177 ;;Total ram usage:        6 bytes
  7178 ;; Hardware stack levels used: 1
  7179 ;; Hardware stack levels required when called: 5
  7180 ;; This function calls:
  7181 ;;		_reverse
  7182 ;;		_setMotorPWM
  7183 ;;		_stop
  7184 ;; This function is called by:
  7185 ;;		_colorDetect
  7186 ;;		_return_home_turns
  7187 ;;		_reverseSquareLeft
  7188 ;; This function uses a non-reentrant model
  7189 ;;
  7190                           
  7191                           	psect	text31
  7192   003AAE                     __ptext31:
  7193                           	callstack 0
  7194   003AAE                     _turnLeft_90:
  7195                           	callstack 24
  7196   003AAE                     
  7197                           ;MazeRobot.X/dc_motor.c: 240: void turnLeft_90(DC_motor *mL, DC_motor *mR);MazeRobot.X/d
      +                          c_motor.c: 241: {;MazeRobot.X/dc_motor.c: 243:     stop(mL, mR);
  7198   003AAE  C01E  F018         	movff	turnLeft_90@mL,stop@mL
  7199   003AB2  C01F  F019         	movff	turnLeft_90@mL+1,stop@mL+1
  7200   003AB6  C020  F01A         	movff	turnLeft_90@mR,stop@mR
  7201   003ABA  C021  F01B         	movff	turnLeft_90@mR+1,stop@mR+1
  7202   003ABE  EC9E  F021         	call	_stop	;wreg free
  7203   003AC2                     
  7204                           ;MazeRobot.X/dc_motor.c: 244:     _delay((unsigned long)((100)*(64000000/4000.0)));
  7205   003AC2  0E09               	movlw	9
  7206   003AC4  6E23               	movwf	(??_turnLeft_90+1)^0,c
  7207   003AC6  0E1E               	movlw	30
  7208   003AC8  6E22               	movwf	??_turnLeft_90^0,c
  7209   003ACA  0EE4               	movlw	228
  7210   003ACC                     u6487:
  7211   003ACC  2EE8               	decfsz	wreg,f,c
  7212   003ACE  D7FE               	bra	u6487
  7213   003AD0  2E22               	decfsz	??_turnLeft_90^0,f,c
  7214   003AD2  D7FC               	bra	u6487
  7215   003AD4  2E23               	decfsz	(??_turnLeft_90+1)^0,f,c
  7216   003AD6  D7FA               	bra	u6487
  7217   003AD8  D000               	nop2	
  7218   003ADA                     
  7219                           ;MazeRobot.X/dc_motor.c: 246:     reverse(mL, mR);
  7220   003ADA  C01E  F018         	movff	turnLeft_90@mL,reverse@mL
  7221   003ADE  C01F  F019         	movff	turnLeft_90@mL+1,reverse@mL+1
  7222   003AE2  C020  F01A         	movff	turnLeft_90@mR,reverse@mR
  7223   003AE6  C021  F01B         	movff	turnLeft_90@mR+1,reverse@mR+1
  7224   003AEA  EC65  F020         	call	_reverse	;wreg free
  7225                           
  7226                           ;MazeRobot.X/dc_motor.c: 247:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  7227   003AEE  0E39               	movlw	57
  7228   003AF0  6E23               	movwf	(??_turnLeft_90+1)^0,c
  7229   003AF2  0ED2               	movlw	210
  7230   003AF4  6E22               	movwf	??_turnLeft_90^0,c
  7231   003AF6  0E4C               	movlw	76
  7232   003AF8                     u6497:
  7233   003AF8  2EE8               	decfsz	wreg,f,c
  7234   003AFA  D7FE               	bra	u6497
  7235   003AFC  2E22               	decfsz	??_turnLeft_90^0,f,c
  7236   003AFE  D7FC               	bra	u6497
  7237   003B00  2E23               	decfsz	(??_turnLeft_90+1)^0,f,c
  7238   003B02  D7FA               	bra	u6497
  7239   003B04  D000               	nop2	
  7240   003B06                     
  7241                           ;MazeRobot.X/dc_motor.c: 249:     stop(mL, mR);
  7242   003B06  C01E  F018         	movff	turnLeft_90@mL,stop@mL
  7243   003B0A  C01F  F019         	movff	turnLeft_90@mL+1,stop@mL+1
  7244   003B0E  C020  F01A         	movff	turnLeft_90@mR,stop@mR
  7245   003B12  C021  F01B         	movff	turnLeft_90@mR+1,stop@mR+1
  7246   003B16  EC9E  F021         	call	_stop	;wreg free
  7247   003B1A                     
  7248                           ;MazeRobot.X/dc_motor.c: 251:     mL->direction = 0;
  7249   003B1A  EE20 F001          	lfsr	2,1
  7250   003B1E  501E               	movf	turnLeft_90@mL^0,w,c
  7251   003B20  26D9               	addwf	fsr2l,f,c
  7252   003B22  501F               	movf	(turnLeft_90@mL+1)^0,w,c
  7253   003B24  22DA               	addwfc	fsr2h,f,c
  7254   003B26  0E00               	movlw	0
  7255   003B28  6EDF               	movwf	indf2,c
  7256   003B2A                     
  7257                           ;MazeRobot.X/dc_motor.c: 252:     mR->direction = 1;
  7258   003B2A  EE20 F001          	lfsr	2,1
  7259   003B2E  5020               	movf	turnLeft_90@mR^0,w,c
  7260   003B30  26D9               	addwf	fsr2l,f,c
  7261   003B32  5021               	movf	(turnLeft_90@mR+1)^0,w,c
  7262   003B34  22DA               	addwfc	fsr2h,f,c
  7263   003B36  0E01               	movlw	1
  7264   003B38  6EDF               	movwf	indf2,c
  7265   003B3A                     
  7266                           ;MazeRobot.X/dc_motor.c: 254:     mL->brakemode = 1;
  7267   003B3A  EE20 F002          	lfsr	2,2
  7268   003B3E  501E               	movf	turnLeft_90@mL^0,w,c
  7269   003B40  26D9               	addwf	fsr2l,f,c
  7270   003B42  501F               	movf	(turnLeft_90@mL+1)^0,w,c
  7271   003B44  22DA               	addwfc	fsr2h,f,c
  7272   003B46  0E01               	movlw	1
  7273   003B48  6EDF               	movwf	indf2,c
  7274   003B4A                     
  7275                           ;MazeRobot.X/dc_motor.c: 255:     mL->brakemode = 1;
  7276   003B4A  EE20 F002          	lfsr	2,2
  7277   003B4E  501E               	movf	turnLeft_90@mL^0,w,c
  7278   003B50  26D9               	addwf	fsr2l,f,c
  7279   003B52  501F               	movf	(turnLeft_90@mL+1)^0,w,c
  7280   003B54  22DA               	addwfc	fsr2h,f,c
  7281   003B56  0E01               	movlw	1
  7282   003B58  6EDF               	movwf	indf2,c
  7283                           
  7284                           ;MazeRobot.X/dc_motor.c: 257:     while((mL->power < 80) || (mR->power < 80)){
  7285   003B5A  EFC7  F01D         	goto	l3502
  7286   003B5E                     l3496:
  7287                           
  7288                           ;MazeRobot.X/dc_motor.c: 258:         mL->power += 10;
  7289   003B5E  C01E  FFD9         	movff	turnLeft_90@mL,fsr2l
  7290   003B62  C01F  FFDA         	movff	turnLeft_90@mL+1,fsr2h
  7291   003B66  0E0A               	movlw	10
  7292   003B68  26DF               	addwf	indf2,f,c
  7293                           
  7294                           ;MazeRobot.X/dc_motor.c: 259:         mR->power += 10;
  7295   003B6A  C020  FFD9         	movff	turnLeft_90@mR,fsr2l
  7296   003B6E  C021  FFDA         	movff	turnLeft_90@mR+1,fsr2h
  7297   003B72  0E0A               	movlw	10
  7298   003B74  26DF               	addwf	indf2,f,c
  7299   003B76                     
  7300                           ;MazeRobot.X/dc_motor.c: 260:         setMotorPWM(mL);
  7301   003B76  C01E  F012         	movff	turnLeft_90@mL,setMotorPWM@m
  7302   003B7A  C01F  F013         	movff	turnLeft_90@mL+1,setMotorPWM@m+1
  7303   003B7E  EC63  F019         	call	_setMotorPWM	;wreg free
  7304   003B82                     
  7305                           ;MazeRobot.X/dc_motor.c: 261:         setMotorPWM(mR);
  7306   003B82  C020  F012         	movff	turnLeft_90@mR,setMotorPWM@m
  7307   003B86  C021  F013         	movff	turnLeft_90@mR+1,setMotorPWM@m+1
  7308   003B8A  EC63  F019         	call	_setMotorPWM	;wreg free
  7309   003B8E                     l3502:
  7310                           
  7311                           ;MazeRobot.X/dc_motor.c: 257:     while((mL->power < 80) || (mR->power < 80)){
  7312   003B8E  C01E  FFD9         	movff	turnLeft_90@mL,fsr2l
  7313   003B92  C01F  FFDA         	movff	turnLeft_90@mL+1,fsr2h
  7314   003B96  0E4F               	movlw	79
  7315   003B98  64DF               	cpfsgt	indf2,c
  7316   003B9A  EFD1  F01D         	goto	u3141
  7317   003B9E  EFD3  F01D         	goto	u3140
  7318   003BA2                     u3141:
  7319   003BA2  EFAF  F01D         	goto	l3496
  7320   003BA6                     u3140:
  7321   003BA6  C020  FFD9         	movff	turnLeft_90@mR,fsr2l
  7322   003BAA  C021  FFDA         	movff	turnLeft_90@mR+1,fsr2h
  7323   003BAE  0E4F               	movlw	79
  7324   003BB0  64DF               	cpfsgt	indf2,c
  7325   003BB2  EFDD  F01D         	goto	u3151
  7326   003BB6  EFDF  F01D         	goto	u3150
  7327   003BBA                     u3151:
  7328   003BBA  EFAF  F01D         	goto	l3496
  7329   003BBE                     u3150:
  7330   003BBE                     
  7331                           ;MazeRobot.X/dc_motor.c: 263:    _delay((unsigned long)((turning_time45)*(64000000/4000.
      +                          0)));
  7332   003BBE  0E0E               	movlw	14
  7333   003BC0  6E23               	movwf	(??_turnLeft_90+1)^0,c
  7334   003BC2  0ECD               	movlw	205
  7335   003BC4  6E22               	movwf	??_turnLeft_90^0,c
  7336   003BC6  0E6C               	movlw	108
  7337   003BC8                     u6507:
  7338   003BC8  2EE8               	decfsz	wreg,f,c
  7339   003BCA  D7FE               	bra	u6507
  7340   003BCC  2E22               	decfsz	??_turnLeft_90^0,f,c
  7341   003BCE  D7FC               	bra	u6507
  7342   003BD0  2E23               	decfsz	(??_turnLeft_90+1)^0,f,c
  7343   003BD2  D7FA               	bra	u6507
  7344   003BD4  D000               	nop2	
  7345   003BD6                     
  7346                           ;MazeRobot.X/dc_motor.c: 264:     stop(mL, mR);
  7347   003BD6  C01E  F018         	movff	turnLeft_90@mL,stop@mL
  7348   003BDA  C01F  F019         	movff	turnLeft_90@mL+1,stop@mL+1
  7349   003BDE  C020  F01A         	movff	turnLeft_90@mR,stop@mR
  7350   003BE2  C021  F01B         	movff	turnLeft_90@mR+1,stop@mR+1
  7351   003BE6  EC9E  F021         	call	_stop	;wreg free
  7352   003BEA  0012               	return		;funcret
  7353   003BEC                     __end_of_turnLeft_90:
  7354                           	callstack 0
  7355                           
  7356 ;; *************** function _stop *****************
  7357 ;; Defined at:
  7358 ;;		line 117 in file "MazeRobot.X/dc_motor.c"
  7359 ;; Parameters:    Size  Location     Type
  7360 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  7361 ;;		 -> main@motorLeft(9), 
  7362 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  7363 ;;		 -> main@motorRight(9), 
  7364 ;; Auto vars:     Size  Location     Type
  7365 ;;		None
  7366 ;; Return value:  Size  Location     Type
  7367 ;;                  1    wreg      void 
  7368 ;; Registers used:
  7369 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7370 ;; Tracked objects:
  7371 ;;		On entry : 0/0
  7372 ;;		On exit  : 0/0
  7373 ;;		Unchanged: 0/0
  7374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7375 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7376 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7377 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7378 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7379 ;;Total ram usage:        6 bytes
  7380 ;; Hardware stack levels used: 1
  7381 ;; Hardware stack levels required when called: 4
  7382 ;; This function calls:
  7383 ;;		_setMotorPWM
  7384 ;; This function is called by:
  7385 ;;		_return_home_turns
  7386 ;;		_turnLeft_90
  7387 ;;		_turnRight_90
  7388 ;;		_turn_180
  7389 ;;		_turnRight_135
  7390 ;;		_turnLeft_135
  7391 ;;		_reverseSquareRight
  7392 ;;		_reverseSquareLeft
  7393 ;;		_main
  7394 ;;		_turnLeft
  7395 ;;		_turnRight
  7396 ;; This function uses a non-reentrant model
  7397 ;;
  7398                           
  7399                           	psect	text32
  7400   00433C                     __ptext32:
  7401                           	callstack 0
  7402   00433C                     _stop:
  7403                           	callstack 25
  7404   00433C                     
  7405                           ;MazeRobot.X/dc_motor.c: 119:     while ((mL->power)>0 && (mR->power)>0){
  7406   00433C  EFD0  F021         	goto	l3374
  7407   004340                     l3362:
  7408                           
  7409                           ;MazeRobot.X/dc_motor.c: 120:         if ((mL->power) >0){
  7410   004340  C018  FFD9         	movff	stop@mL,fsr2l
  7411   004344  C019  FFDA         	movff	stop@mL+1,fsr2h
  7412   004348  50DF               	movf	indf2,w,c
  7413   00434A  B4D8               	btfsc	status,2,c
  7414   00434C  EFAA  F021         	goto	u3011
  7415   004350  EFAC  F021         	goto	u3010
  7416   004354                     u3011:
  7417   004354  EFB2  F021         	goto	l3366
  7418   004358                     u3010:
  7419   004358                     
  7420                           ;MazeRobot.X/dc_motor.c: 121:             mL->power -= 5;
  7421   004358  C018  FFD9         	movff	stop@mL,fsr2l
  7422   00435C  C019  FFDA         	movff	stop@mL+1,fsr2h
  7423   004360  0E05               	movlw	5
  7424   004362  5EDF               	subwf	indf2,f,c
  7425   004364                     l3366:
  7426                           
  7427                           ;MazeRobot.X/dc_motor.c: 123:         if ((mR->power) >0){
  7428   004364  C01A  FFD9         	movff	stop@mR,fsr2l
  7429   004368  C01B  FFDA         	movff	stop@mR+1,fsr2h
  7430   00436C  50DF               	movf	indf2,w,c
  7431   00436E  B4D8               	btfsc	status,2,c
  7432   004370  EFBC  F021         	goto	u3021
  7433   004374  EFBE  F021         	goto	u3020
  7434   004378                     u3021:
  7435   004378  EFC4  F021         	goto	l3370
  7436   00437C                     u3020:
  7437   00437C                     
  7438                           ;MazeRobot.X/dc_motor.c: 124:             mR->power -= 5;
  7439   00437C  C01A  FFD9         	movff	stop@mR,fsr2l
  7440   004380  C01B  FFDA         	movff	stop@mR+1,fsr2h
  7441   004384  0E05               	movlw	5
  7442   004386  5EDF               	subwf	indf2,f,c
  7443   004388                     l3370:
  7444                           
  7445                           ;MazeRobot.X/dc_motor.c: 127:         setMotorPWM(mL);
  7446   004388  C018  F012         	movff	stop@mL,setMotorPWM@m
  7447   00438C  C019  F013         	movff	stop@mL+1,setMotorPWM@m+1
  7448   004390  EC63  F019         	call	_setMotorPWM	;wreg free
  7449   004394                     
  7450                           ;MazeRobot.X/dc_motor.c: 128:         setMotorPWM(mR);
  7451   004394  C01A  F012         	movff	stop@mR,setMotorPWM@m
  7452   004398  C01B  F013         	movff	stop@mR+1,setMotorPWM@m+1
  7453   00439C  EC63  F019         	call	_setMotorPWM	;wreg free
  7454   0043A0                     l3374:
  7455                           
  7456                           ;MazeRobot.X/dc_motor.c: 119:     while ((mL->power)>0 && (mR->power)>0){
  7457   0043A0  C018  FFD9         	movff	stop@mL,fsr2l
  7458   0043A4  C019  FFDA         	movff	stop@mL+1,fsr2h
  7459   0043A8  50DF               	movf	indf2,w,c
  7460   0043AA  B4D8               	btfsc	status,2,c
  7461   0043AC  EFDA  F021         	goto	u3031
  7462   0043B0  EFDC  F021         	goto	u3030
  7463   0043B4                     u3031:
  7464   0043B4  EFE8  F021         	goto	l3378
  7465   0043B8                     u3030:
  7466   0043B8  C01A  FFD9         	movff	stop@mR,fsr2l
  7467   0043BC  C01B  FFDA         	movff	stop@mR+1,fsr2h
  7468   0043C0  50DF               	movf	indf2,w,c
  7469   0043C2  A4D8               	btfss	status,2,c
  7470   0043C4  EFE6  F021         	goto	u3041
  7471   0043C8  EFE8  F021         	goto	u3040
  7472   0043CC                     u3041:
  7473   0043CC  EFA0  F021         	goto	l3362
  7474   0043D0                     u3040:
  7475   0043D0                     l3378:
  7476                           
  7477                           ;MazeRobot.X/dc_motor.c: 130:     _delay((unsigned long)((100)*(64000000/4000.0)));
  7478   0043D0  0E09               	movlw	9
  7479   0043D2  6E1D               	movwf	(??_stop+1)^0,c
  7480   0043D4  0E1E               	movlw	30
  7481   0043D6  6E1C               	movwf	??_stop^0,c
  7482   0043D8  0EE4               	movlw	228
  7483   0043DA                     u6517:
  7484   0043DA  2EE8               	decfsz	wreg,f,c
  7485   0043DC  D7FE               	bra	u6517
  7486   0043DE  2E1C               	decfsz	??_stop^0,f,c
  7487   0043E0  D7FC               	bra	u6517
  7488   0043E2  2E1D               	decfsz	(??_stop+1)^0,f,c
  7489   0043E4  D7FA               	bra	u6517
  7490   0043E6  D000               	nop2	
  7491   0043E8  0012               	return		;funcret
  7492   0043EA                     __end_of_stop:
  7493                           	callstack 0
  7494                           
  7495 ;; *************** function _reverse *****************
  7496 ;; Defined at:
  7497 ;;		line 157 in file "MazeRobot.X/dc_motor.c"
  7498 ;; Parameters:    Size  Location     Type
  7499 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  7500 ;;		 -> main@motorLeft(9), 
  7501 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  7502 ;;		 -> main@motorRight(9), 
  7503 ;; Auto vars:     Size  Location     Type
  7504 ;;		None
  7505 ;; Return value:  Size  Location     Type
  7506 ;;                  1    wreg      void 
  7507 ;; Registers used:
  7508 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7509 ;; Tracked objects:
  7510 ;;		On entry : 0/0
  7511 ;;		On exit  : 0/0
  7512 ;;		Unchanged: 0/0
  7513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7514 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7516 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7517 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7518 ;;Total ram usage:        5 bytes
  7519 ;; Hardware stack levels used: 1
  7520 ;; Hardware stack levels required when called: 4
  7521 ;; This function calls:
  7522 ;;		_setMotorPWM
  7523 ;; This function is called by:
  7524 ;;		_turnLeft_90
  7525 ;;		_turnRight_90
  7526 ;;		_turn_180
  7527 ;;		_turnRight_135
  7528 ;;		_turnLeft_135
  7529 ;;		_reverseSquareRight
  7530 ;;		_reverseSquareLeft
  7531 ;;		_turnLeft
  7532 ;;		_turnRight
  7533 ;; This function uses a non-reentrant model
  7534 ;;
  7535                           
  7536                           	psect	text33
  7537   0040CA                     __ptext33:
  7538                           	callstack 0
  7539   0040CA                     _reverse:
  7540                           	callstack 25
  7541   0040CA                     
  7542                           ;MazeRobot.X/dc_motor.c: 157: void reverse(DC_motor *mL, DC_motor *mR);MazeRobot.X/dc_mo
      +                          tor.c: 158: {;MazeRobot.X/dc_motor.c: 159:     mL->direction = 0;
  7543   0040CA  EE20 F001          	lfsr	2,1
  7544   0040CE  5018               	movf	reverse@mL^0,w,c
  7545   0040D0  26D9               	addwf	fsr2l,f,c
  7546   0040D2  5019               	movf	(reverse@mL+1)^0,w,c
  7547   0040D4  22DA               	addwfc	fsr2h,f,c
  7548   0040D6  0E00               	movlw	0
  7549   0040D8  6EDF               	movwf	indf2,c
  7550                           
  7551                           ;MazeRobot.X/dc_motor.c: 160:     mR->direction = 0;
  7552   0040DA  EE20 F001          	lfsr	2,1
  7553   0040DE  501A               	movf	reverse@mR^0,w,c
  7554   0040E0  26D9               	addwf	fsr2l,f,c
  7555   0040E2  501B               	movf	(reverse@mR+1)^0,w,c
  7556   0040E4  22DA               	addwfc	fsr2h,f,c
  7557   0040E6  0E00               	movlw	0
  7558   0040E8  6EDF               	movwf	indf2,c
  7559                           
  7560                           ;MazeRobot.X/dc_motor.c: 162:     mL->brakemode = 1;
  7561   0040EA  EE20 F002          	lfsr	2,2
  7562   0040EE  5018               	movf	reverse@mL^0,w,c
  7563   0040F0  26D9               	addwf	fsr2l,f,c
  7564   0040F2  5019               	movf	(reverse@mL+1)^0,w,c
  7565   0040F4  22DA               	addwfc	fsr2h,f,c
  7566   0040F6  0E01               	movlw	1
  7567   0040F8  6EDF               	movwf	indf2,c
  7568                           
  7569                           ;MazeRobot.X/dc_motor.c: 163:     mL->brakemode = 1;
  7570   0040FA  EE20 F002          	lfsr	2,2
  7571   0040FE  5018               	movf	reverse@mL^0,w,c
  7572   004100  26D9               	addwf	fsr2l,f,c
  7573   004102  5019               	movf	(reverse@mL+1)^0,w,c
  7574   004104  22DA               	addwfc	fsr2h,f,c
  7575   004106  0E01               	movlw	1
  7576   004108  6EDF               	movwf	indf2,c
  7577                           
  7578                           ;MazeRobot.X/dc_motor.c: 165:     while ((mL->power)<25 && (mR->power)<25){
  7579   00410A  EFAB  F020         	goto	l3390
  7580   00410E                     l3382:
  7581                           
  7582                           ;MazeRobot.X/dc_motor.c: 166:         if ((mL->power) < 25){
  7583   00410E  C018  FFD9         	movff	reverse@mL,fsr2l
  7584   004112  C019  FFDA         	movff	reverse@mL+1,fsr2h
  7585   004116  0E19               	movlw	25
  7586   004118  60DF               	cpfslt	indf2,c
  7587   00411A  EF91  F020         	goto	u3051
  7588   00411E  EF93  F020         	goto	u3050
  7589   004122                     u3051:
  7590   004122  EF99  F020         	goto	l3386
  7591   004126                     u3050:
  7592   004126                     
  7593                           ;MazeRobot.X/dc_motor.c: 167:             mL->power += 5;
  7594   004126  C018  FFD9         	movff	reverse@mL,fsr2l
  7595   00412A  C019  FFDA         	movff	reverse@mL+1,fsr2h
  7596   00412E  0E05               	movlw	5
  7597   004130  26DF               	addwf	indf2,f,c
  7598   004132                     l3386:
  7599                           
  7600                           ;MazeRobot.X/dc_motor.c: 169:         if ((mR->power) <25){
  7601   004132  C01A  FFD9         	movff	reverse@mR,fsr2l
  7602   004136  C01B  FFDA         	movff	reverse@mR+1,fsr2h
  7603   00413A  0E19               	movlw	25
  7604   00413C  60DF               	cpfslt	indf2,c
  7605   00413E  EFA3  F020         	goto	u3061
  7606   004142  EFA5  F020         	goto	u3060
  7607   004146                     u3061:
  7608   004146  EFAB  F020         	goto	l3390
  7609   00414A                     u3060:
  7610   00414A                     
  7611                           ;MazeRobot.X/dc_motor.c: 170:             mR->power += 5;
  7612   00414A  C01A  FFD9         	movff	reverse@mR,fsr2l
  7613   00414E  C01B  FFDA         	movff	reverse@mR+1,fsr2h
  7614   004152  0E05               	movlw	5
  7615   004154  26DF               	addwf	indf2,f,c
  7616   004156                     l3390:
  7617                           
  7618                           ;MazeRobot.X/dc_motor.c: 165:     while ((mL->power)<25 && (mR->power)<25){
  7619   004156  C018  FFD9         	movff	reverse@mL,fsr2l
  7620   00415A  C019  FFDA         	movff	reverse@mL+1,fsr2h
  7621   00415E  0E19               	movlw	25
  7622   004160  60DF               	cpfslt	indf2,c
  7623   004162  EFB5  F020         	goto	u3071
  7624   004166  EFB7  F020         	goto	u3070
  7625   00416A                     u3071:
  7626   00416A  EFC3  F020         	goto	l3394
  7627   00416E                     u3070:
  7628   00416E  C01A  FFD9         	movff	reverse@mR,fsr2l
  7629   004172  C01B  FFDA         	movff	reverse@mR+1,fsr2h
  7630   004176  0E18               	movlw	24
  7631   004178  64DF               	cpfsgt	indf2,c
  7632   00417A  EFC1  F020         	goto	u3081
  7633   00417E  EFC3  F020         	goto	u3080
  7634   004182                     u3081:
  7635   004182  EF87  F020         	goto	l3382
  7636   004186                     u3080:
  7637   004186                     l3394:
  7638                           
  7639                           ;MazeRobot.X/dc_motor.c: 174:     setMotorPWM(mL);
  7640   004186  C018  F012         	movff	reverse@mL,setMotorPWM@m
  7641   00418A  C019  F013         	movff	reverse@mL+1,setMotorPWM@m+1
  7642   00418E  EC63  F019         	call	_setMotorPWM	;wreg free
  7643                           
  7644                           ;MazeRobot.X/dc_motor.c: 175:     setMotorPWM(mR);
  7645   004192  C01A  F012         	movff	reverse@mR,setMotorPWM@m
  7646   004196  C01B  F013         	movff	reverse@mR+1,setMotorPWM@m+1
  7647   00419A  EC63  F019         	call	_setMotorPWM	;wreg free
  7648   00419E  0012               	return		;funcret
  7649   0041A0                     __end_of_reverse:
  7650                           	callstack 0
  7651                           
  7652 ;; *************** function _setMotorPWM *****************
  7653 ;; Defined at:
  7654 ;;		line 94 in file "MazeRobot.X/dc_motor.c"
  7655 ;; Parameters:    Size  Location     Type
  7656 ;;  m               2   17[COMRAM] PTR struct DC_motor
  7657 ;;		 -> main@motorRight(9), main@motorLeft(9), 
  7658 ;; Auto vars:     Size  Location     Type
  7659 ;;  negDuty         1   22[COMRAM] unsigned char 
  7660 ;;  posDuty         1   21[COMRAM] unsigned char 
  7661 ;; Return value:  Size  Location     Type
  7662 ;;                  1    wreg      void 
  7663 ;; Registers used:
  7664 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7665 ;; Tracked objects:
  7666 ;;		On entry : 0/0
  7667 ;;		On exit  : 0/0
  7668 ;;		Unchanged: 0/0
  7669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7670 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7671 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7672 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7673 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7674 ;;Total ram usage:        6 bytes
  7675 ;; Hardware stack levels used: 1
  7676 ;; Hardware stack levels required when called: 3
  7677 ;; This function calls:
  7678 ;;		___lwdiv
  7679 ;;		___wmul
  7680 ;; This function is called by:
  7681 ;;		_stop
  7682 ;;		_forward
  7683 ;;		_reverse
  7684 ;;		_turnLeft_90
  7685 ;;		_turnRight_90
  7686 ;;		_turn_180
  7687 ;;		_turnRight_135
  7688 ;;		_turnLeft_135
  7689 ;;		_turnLeft
  7690 ;;		_turnRight
  7691 ;; This function uses a non-reentrant model
  7692 ;;
  7693                           
  7694                           	psect	text34
  7695   0032C6                     __ptext34:
  7696                           	callstack 0
  7697   0032C6                     _setMotorPWM:
  7698                           	callstack 25
  7699   0032C6                     
  7700                           ;MazeRobot.X/dc_motor.c: 94: void setMotorPWM(DC_motor *m);MazeRobot.X/dc_motor.c: 95: {
      +                          ;MazeRobot.X/dc_motor.c: 96:     unsigned char posDuty, negDuty;;MazeRobot.X/dc_motor.c:
      +                           98:     if(m->brakemode) {
  7701   0032C6  EE20 F002          	lfsr	2,2
  7702   0032CA  5012               	movf	setMotorPWM@m^0,w,c
  7703   0032CC  26D9               	addwf	fsr2l,f,c
  7704   0032CE  5013               	movf	(setMotorPWM@m+1)^0,w,c
  7705   0032D0  22DA               	addwfc	fsr2h,f,c
  7706   0032D2  50DF               	movf	indf2,w,c
  7707   0032D4  B4D8               	btfsc	status,2,c
  7708   0032D6  EF6F  F019         	goto	u2851
  7709   0032DA  EF71  F019         	goto	u2850
  7710   0032DE                     u2851:
  7711   0032DE  EFA5  F019         	goto	l3264
  7712   0032E2                     u2850:
  7713   0032E2                     
  7714                           ;MazeRobot.X/dc_motor.c: 99:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m
      +                          ->PWMperiod))/100;
  7715   0032E2  C012  FFD9         	movff	setMotorPWM@m,fsr2l
  7716   0032E6  C013  FFDA         	movff	setMotorPWM@m+1,fsr2h
  7717   0032EA  50DF               	movf	indf2,w,c
  7718   0032EC  6E14               	movwf	??_setMotorPWM^0,c
  7719   0032EE  5014               	movf	??_setMotorPWM^0,w,c
  7720   0032F0  6E05               	movwf	___wmul@multiplier^0,c
  7721   0032F2  6A06               	clrf	(___wmul@multiplier+1)^0,c
  7722   0032F4  EE20 F003          	lfsr	2,3
  7723   0032F8  5012               	movf	setMotorPWM@m^0,w,c
  7724   0032FA  26D9               	addwf	fsr2l,f,c
  7725   0032FC  5013               	movf	(setMotorPWM@m+1)^0,w,c
  7726   0032FE  22DA               	addwfc	fsr2h,f,c
  7727   003300  CFDE F007          	movff	postinc2,___wmul@multiplicand
  7728   003304  CFDD F008          	movff	postdec2,___wmul@multiplicand+1
  7729   003308  ECC9  F025         	call	___wmul	;wreg free
  7730   00330C  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  7731   003310  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  7732   003314  0E00               	movlw	0
  7733   003316  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  7734   003318  0E64               	movlw	100
  7735   00331A  6E0D               	movwf	___lwdiv@divisor^0,c
  7736   00331C  EC10  F023         	call	___lwdiv	;wreg free
  7737   003320  EE20 F003          	lfsr	2,3
  7738   003324  5012               	movf	setMotorPWM@m^0,w,c
  7739   003326  26D9               	addwf	fsr2l,f,c
  7740   003328  5013               	movf	(setMotorPWM@m+1)^0,w,c
  7741   00332A  22DA               	addwfc	fsr2h,f,c
  7742   00332C  50DF               	movf	indf2,w,c
  7743   00332E  6E15               	movwf	(??_setMotorPWM+1)^0,c
  7744   003330  500B               	movf	?___lwdiv^0,w,c
  7745   003332  5C15               	subwf	(??_setMotorPWM+1)^0,w,c
  7746   003334  6E16               	movwf	setMotorPWM@posDuty^0,c
  7747   003336                     
  7748                           ;MazeRobot.X/dc_motor.c: 100:         negDuty=m->PWMperiod;
  7749   003336  EE20 F003          	lfsr	2,3
  7750   00333A  5012               	movf	setMotorPWM@m^0,w,c
  7751   00333C  26D9               	addwf	fsr2l,f,c
  7752   00333E  5013               	movf	(setMotorPWM@m+1)^0,w,c
  7753   003340  22DA               	addwfc	fsr2h,f,c
  7754   003342  50DF               	movf	indf2,w,c
  7755   003344  6E17               	movwf	setMotorPWM@negDuty^0,c
  7756                           
  7757                           ;MazeRobot.X/dc_motor.c: 101:     }
  7758   003346  EFC8  F019         	goto	l3268
  7759   00334A                     l3264:
  7760                           
  7761                           ;MazeRobot.X/dc_motor.c: 103:         posDuty=0;
  7762   00334A  0E00               	movlw	0
  7763   00334C  6E16               	movwf	setMotorPWM@posDuty^0,c
  7764   00334E                     
  7765                           ;MazeRobot.X/dc_motor.c: 104:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  7766   00334E  C012  FFD9         	movff	setMotorPWM@m,fsr2l
  7767   003352  C013  FFDA         	movff	setMotorPWM@m+1,fsr2h
  7768   003356  50DF               	movf	indf2,w,c
  7769   003358  6E14               	movwf	??_setMotorPWM^0,c
  7770   00335A  5014               	movf	??_setMotorPWM^0,w,c
  7771   00335C  6E05               	movwf	___wmul@multiplier^0,c
  7772   00335E  6A06               	clrf	(___wmul@multiplier+1)^0,c
  7773   003360  EE20 F003          	lfsr	2,3
  7774   003364  5012               	movf	setMotorPWM@m^0,w,c
  7775   003366  26D9               	addwf	fsr2l,f,c
  7776   003368  5013               	movf	(setMotorPWM@m+1)^0,w,c
  7777   00336A  22DA               	addwfc	fsr2h,f,c
  7778   00336C  CFDE F007          	movff	postinc2,___wmul@multiplicand
  7779   003370  CFDD F008          	movff	postdec2,___wmul@multiplicand+1
  7780   003374  ECC9  F025         	call	___wmul	;wreg free
  7781   003378  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  7782   00337C  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  7783   003380  0E00               	movlw	0
  7784   003382  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  7785   003384  0E64               	movlw	100
  7786   003386  6E0D               	movwf	___lwdiv@divisor^0,c
  7787   003388  EC10  F023         	call	___lwdiv	;wreg free
  7788   00338C  500B               	movf	?___lwdiv^0,w,c
  7789   00338E  6E17               	movwf	setMotorPWM@negDuty^0,c
  7790   003390                     l3268:
  7791                           
  7792                           ;MazeRobot.X/dc_motor.c: 107:     if (m->direction) {
  7793   003390  EE20 F001          	lfsr	2,1
  7794   003394  5012               	movf	setMotorPWM@m^0,w,c
  7795   003396  26D9               	addwf	fsr2l,f,c
  7796   003398  5013               	movf	(setMotorPWM@m+1)^0,w,c
  7797   00339A  22DA               	addwfc	fsr2h,f,c
  7798   00339C  50DF               	movf	indf2,w,c
  7799   00339E  B4D8               	btfsc	status,2,c
  7800   0033A0  EFD4  F019         	goto	u2861
  7801   0033A4  EFD6  F019         	goto	u2860
  7802   0033A8                     u2861:
  7803   0033A8  EFF8  F019         	goto	l3272
  7804   0033AC                     u2860:
  7805   0033AC                     
  7806                           ;MazeRobot.X/dc_motor.c: 108:         *(m->posDutyHighByte)=posDuty;
  7807   0033AC  EE20 F005          	lfsr	2,5
  7808   0033B0  5012               	movf	setMotorPWM@m^0,w,c
  7809   0033B2  26D9               	addwf	fsr2l,f,c
  7810   0033B4  5013               	movf	(setMotorPWM@m+1)^0,w,c
  7811   0033B6  22DA               	addwfc	fsr2h,f,c
  7812   0033B8  CFDE F014          	movff	postinc2,??_setMotorPWM
  7813   0033BC  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  7814   0033C0  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  7815   0033C4  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7816   0033C8  C016  FFDF         	movff	setMotorPWM@posDuty,indf2
  7817                           
  7818                           ;MazeRobot.X/dc_motor.c: 109:         *(m->negDutyHighByte)=negDuty;
  7819   0033CC  EE20 F007          	lfsr	2,7
  7820   0033D0  5012               	movf	setMotorPWM@m^0,w,c
  7821   0033D2  26D9               	addwf	fsr2l,f,c
  7822   0033D4  5013               	movf	(setMotorPWM@m+1)^0,w,c
  7823   0033D6  22DA               	addwfc	fsr2h,f,c
  7824   0033D8  CFDE F014          	movff	postinc2,??_setMotorPWM
  7825   0033DC  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  7826   0033E0  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  7827   0033E4  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7828   0033E8  C017  FFDF         	movff	setMotorPWM@negDuty,indf2
  7829                           
  7830                           ;MazeRobot.X/dc_motor.c: 110:     } else {
  7831   0033EC  EF18  F01A         	goto	l204
  7832   0033F0                     l3272:
  7833                           
  7834                           ;MazeRobot.X/dc_motor.c: 111:         *(m->posDutyHighByte)=negDuty;
  7835   0033F0  EE20 F005          	lfsr	2,5
  7836   0033F4  5012               	movf	setMotorPWM@m^0,w,c
  7837   0033F6  26D9               	addwf	fsr2l,f,c
  7838   0033F8  5013               	movf	(setMotorPWM@m+1)^0,w,c
  7839   0033FA  22DA               	addwfc	fsr2h,f,c
  7840   0033FC  CFDE F014          	movff	postinc2,??_setMotorPWM
  7841   003400  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  7842   003404  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  7843   003408  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7844   00340C  C017  FFDF         	movff	setMotorPWM@negDuty,indf2
  7845                           
  7846                           ;MazeRobot.X/dc_motor.c: 112:         *(m->negDutyHighByte)=posDuty;
  7847   003410  EE20 F007          	lfsr	2,7
  7848   003414  5012               	movf	setMotorPWM@m^0,w,c
  7849   003416  26D9               	addwf	fsr2l,f,c
  7850   003418  5013               	movf	(setMotorPWM@m+1)^0,w,c
  7851   00341A  22DA               	addwfc	fsr2h,f,c
  7852   00341C  CFDE F014          	movff	postinc2,??_setMotorPWM
  7853   003420  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  7854   003424  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  7855   003428  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7856   00342C  C016  FFDF         	movff	setMotorPWM@posDuty,indf2
  7857   003430                     l204:
  7858   003430  0012               	return		;funcret
  7859   003432                     __end_of_setMotorPWM:
  7860                           	callstack 0
  7861                           
  7862 ;; *************** function ___wmul *****************
  7863 ;; Defined at:
  7864 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  7865 ;; Parameters:    Size  Location     Type
  7866 ;;  multiplier      2    4[COMRAM] unsigned int 
  7867 ;;  multiplicand    2    6[COMRAM] unsigned int 
  7868 ;; Auto vars:     Size  Location     Type
  7869 ;;  product         2    8[COMRAM] unsigned int 
  7870 ;; Return value:  Size  Location     Type
  7871 ;;                  2    4[COMRAM] unsigned int 
  7872 ;; Registers used:
  7873 ;;		wreg, status,2, status,0, prodl, prodh
  7874 ;; Tracked objects:
  7875 ;;		On entry : 0/0
  7876 ;;		On exit  : 0/0
  7877 ;;		Unchanged: 0/0
  7878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7879 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7880 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7882 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7883 ;;Total ram usage:        6 bytes
  7884 ;; Hardware stack levels used: 1
  7885 ;; Hardware stack levels required when called: 2
  7886 ;; This function calls:
  7887 ;;		Nothing
  7888 ;; This function is called by:
  7889 ;;		_setMotorPWM
  7890 ;;		_turnLeft_135
  7891 ;; This function uses a non-reentrant model
  7892 ;;
  7893                           
  7894                           	psect	text35
  7895   004B92                     __ptext35:
  7896                           	callstack 0
  7897   004B92                     ___wmul:
  7898                           	callstack 25
  7899   004B92  5005               	movf	___wmul@multiplier^0,w,c
  7900   004B94  0207               	mulwf	___wmul@multiplicand^0,c
  7901   004B96  CFF3 F009          	movff	prodl,___wmul@product
  7902   004B9A  CFF4 F00A          	movff	prodh,___wmul@product+1
  7903   004B9E  5005               	movf	___wmul@multiplier^0,w,c
  7904   004BA0  0208               	mulwf	(___wmul@multiplicand+1)^0,c
  7905   004BA2  50F3               	movf	243,w,c
  7906   004BA4  260A               	addwf	(___wmul@product+1)^0,f,c
  7907   004BA6  5006               	movf	(___wmul@multiplier+1)^0,w,c
  7908   004BA8  0207               	mulwf	___wmul@multiplicand^0,c
  7909   004BAA  50F3               	movf	243,w,c
  7910   004BAC  260A               	addwf	(___wmul@product+1)^0,f,c
  7911   004BAE  C009  F005         	movff	___wmul@product,?___wmul
  7912   004BB2  C00A  F006         	movff	___wmul@product+1,?___wmul+1
  7913   004BB6  0012               	return		;funcret
  7914   004BB8                     __end_of___wmul:
  7915                           	callstack 0
  7916                           
  7917 ;; *************** function ___lwdiv *****************
  7918 ;; Defined at:
  7919 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  7920 ;; Parameters:    Size  Location     Type
  7921 ;;  dividend        2   10[COMRAM] unsigned int 
  7922 ;;  divisor         2   12[COMRAM] unsigned int 
  7923 ;; Auto vars:     Size  Location     Type
  7924 ;;  quotient        2   14[COMRAM] unsigned int 
  7925 ;;  counter         1   16[COMRAM] unsigned char 
  7926 ;; Return value:  Size  Location     Type
  7927 ;;                  2   10[COMRAM] unsigned int 
  7928 ;; Registers used:
  7929 ;;		wreg, status,2, status,0
  7930 ;; Tracked objects:
  7931 ;;		On entry : 0/0
  7932 ;;		On exit  : 0/0
  7933 ;;		Unchanged: 0/0
  7934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7935 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7936 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7938 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7939 ;;Total ram usage:        7 bytes
  7940 ;; Hardware stack levels used: 1
  7941 ;; Hardware stack levels required when called: 2
  7942 ;; This function calls:
  7943 ;;		Nothing
  7944 ;; This function is called by:
  7945 ;;		_setMotorPWM
  7946 ;; This function uses a non-reentrant model
  7947 ;;
  7948                           
  7949                           	psect	text36
  7950   004620                     __ptext36:
  7951                           	callstack 0
  7952   004620                     ___lwdiv:
  7953                           	callstack 25
  7954   004620  0E00               	movlw	0
  7955   004622  6E10               	movwf	(___lwdiv@quotient+1)^0,c
  7956   004624  0E00               	movlw	0
  7957   004626  6E0F               	movwf	___lwdiv@quotient^0,c
  7958   004628  500D               	movf	___lwdiv@divisor^0,w,c
  7959   00462A  100E               	iorwf	(___lwdiv@divisor+1)^0,w,c
  7960   00462C  B4D8               	btfsc	status,2,c
  7961   00462E  EF1B  F023         	goto	u2791
  7962   004632  EF1D  F023         	goto	u2790
  7963   004636                     u2791:
  7964   004636  EF45  F023         	goto	l1043
  7965   00463A                     u2790:
  7966   00463A  0E01               	movlw	1
  7967   00463C  6E11               	movwf	___lwdiv@counter^0,c
  7968   00463E  EF25  F023         	goto	l3226
  7969   004642                     l3224:
  7970   004642  90D8               	bcf	status,0,c
  7971   004644  360D               	rlcf	___lwdiv@divisor^0,f,c
  7972   004646  360E               	rlcf	(___lwdiv@divisor+1)^0,f,c
  7973   004648  2A11               	incf	___lwdiv@counter^0,f,c
  7974   00464A                     l3226:
  7975   00464A  AE0E               	btfss	(___lwdiv@divisor+1)^0,7,c
  7976   00464C  EF2A  F023         	goto	u2801
  7977   004650  EF2C  F023         	goto	u2800
  7978   004654                     u2801:
  7979   004654  EF21  F023         	goto	l3224
  7980   004658                     u2800:
  7981   004658                     l3228:
  7982   004658  90D8               	bcf	status,0,c
  7983   00465A  360F               	rlcf	___lwdiv@quotient^0,f,c
  7984   00465C  3610               	rlcf	(___lwdiv@quotient+1)^0,f,c
  7985   00465E  500D               	movf	___lwdiv@divisor^0,w,c
  7986   004660  5C0B               	subwf	___lwdiv@dividend^0,w,c
  7987   004662  500E               	movf	(___lwdiv@divisor+1)^0,w,c
  7988   004664  580C               	subwfb	(___lwdiv@dividend+1)^0,w,c
  7989   004666  A0D8               	btfss	status,0,c
  7990   004668  EF38  F023         	goto	u2811
  7991   00466C  EF3A  F023         	goto	u2810
  7992   004670                     u2811:
  7993   004670  EF3F  F023         	goto	l3236
  7994   004674                     u2810:
  7995   004674  500D               	movf	___lwdiv@divisor^0,w,c
  7996   004676  5E0B               	subwf	___lwdiv@dividend^0,f,c
  7997   004678  500E               	movf	(___lwdiv@divisor+1)^0,w,c
  7998   00467A  5A0C               	subwfb	(___lwdiv@dividend+1)^0,f,c
  7999   00467C  800F               	bsf	___lwdiv@quotient^0,0,c
  8000   00467E                     l3236:
  8001   00467E  90D8               	bcf	status,0,c
  8002   004680  320E               	rrcf	(___lwdiv@divisor+1)^0,f,c
  8003   004682  320D               	rrcf	___lwdiv@divisor^0,f,c
  8004   004684  2E11               	decfsz	___lwdiv@counter^0,f,c
  8005   004686  EF2C  F023         	goto	l3228
  8006   00468A                     l1043:
  8007   00468A  C00F  F00B         	movff	___lwdiv@quotient,?___lwdiv
  8008   00468E  C010  F00C         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8009   004692  0012               	return		;funcret
  8010   004694                     __end_of___lwdiv:
  8011                           	callstack 0
  8012                           
  8013 ;; *************** function ___xxtofl *****************
  8014 ;; Defined at:
  8015 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\xxtofl.c"
  8016 ;; Parameters:    Size  Location     Type
  8017 ;;  sign            1    wreg     unsigned char 
  8018 ;;  val             4    4[COMRAM] long 
  8019 ;; Auto vars:     Size  Location     Type
  8020 ;;  sign            1   12[COMRAM] unsigned char 
  8021 ;;  arg             4   14[COMRAM] unsigned long 
  8022 ;;  exp             1   13[COMRAM] unsigned char 
  8023 ;; Return value:  Size  Location     Type
  8024 ;;                  4    4[COMRAM] unsigned char 
  8025 ;; Registers used:
  8026 ;;		wreg, status,2, status,0
  8027 ;; Tracked objects:
  8028 ;;		On entry : 0/0
  8029 ;;		On exit  : 0/0
  8030 ;;		Unchanged: 0/0
  8031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8032 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8033 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8034 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8035 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8036 ;;Total ram usage:       14 bytes
  8037 ;; Hardware stack levels used: 1
  8038 ;; Hardware stack levels required when called: 2
  8039 ;; This function calls:
  8040 ;;		Nothing
  8041 ;; This function is called by:
  8042 ;;		_colorDetect
  8043 ;;		_turnLeft_90
  8044 ;;		_turnRight_90
  8045 ;;		_turn_180
  8046 ;;		_turnRight_135
  8047 ;;		_turnLeft_135
  8048 ;;		_reverseSquareRight
  8049 ;;		_reverseSquareLeft
  8050 ;;		_main
  8051 ;;		_turnLeft
  8052 ;;		_turnRight
  8053 ;; This function uses a non-reentrant model
  8054 ;;
  8055                           
  8056                           	psect	text37
  8057   002F8A                     __ptext37:
  8058                           	callstack 0
  8059   002F8A                     ___xxtofl:
  8060                           	callstack 27
  8061                           
  8062                           ;incstack = 0
  8063                           ;___xxtofl@sign stored from wreg
  8064   002F8A  6E0D               	movwf	___xxtofl@sign^0,c
  8065   002F8C  500D               	movf	___xxtofl@sign^0,w,c
  8066   002F8E  B4D8               	btfsc	status,2,c
  8067   002F90  EFCC  F017         	goto	u4181
  8068   002F94  EFCE  F017         	goto	u4180
  8069   002F98                     u4181:
  8070   002F98  EFF0  F017         	goto	l1207
  8071   002F9C                     u4180:
  8072   002F9C  BE08               	btfsc	(___xxtofl@val+3)^0,7,c
  8073   002F9E  EFD5  F017         	goto	u4190
  8074   002FA2  EFD3  F017         	goto	u4191
  8075   002FA6                     u4191:
  8076   002FA6  EFF0  F017         	goto	l1207
  8077   002FAA                     u4190:
  8078   002FAA  C005  F009         	movff	___xxtofl@val,??___xxtofl
  8079   002FAE  C006  F00A         	movff	___xxtofl@val+1,??___xxtofl+1
  8080   002FB2  C007  F00B         	movff	___xxtofl@val+2,??___xxtofl+2
  8081   002FB6  C008  F00C         	movff	___xxtofl@val+3,??___xxtofl+3
  8082   002FBA  1E09               	comf	??___xxtofl^0,f,c
  8083   002FBC  1E0A               	comf	(??___xxtofl+1)^0,f,c
  8084   002FBE  1E0B               	comf	(??___xxtofl+2)^0,f,c
  8085   002FC0  1E0C               	comf	(??___xxtofl+3)^0,f,c
  8086   002FC2  2A09               	incf	??___xxtofl^0,f,c
  8087   002FC4  0E00               	movlw	0
  8088   002FC6  220A               	addwfc	(??___xxtofl+1)^0,f,c
  8089   002FC8  220B               	addwfc	(??___xxtofl+2)^0,f,c
  8090   002FCA  220C               	addwfc	(??___xxtofl+3)^0,f,c
  8091   002FCC  C009  F00F         	movff	??___xxtofl,___xxtofl@arg
  8092   002FD0  C00A  F010         	movff	??___xxtofl+1,___xxtofl@arg+1
  8093   002FD4  C00B  F011         	movff	??___xxtofl+2,___xxtofl@arg+2
  8094   002FD8  C00C  F012         	movff	??___xxtofl+3,___xxtofl@arg+3
  8095   002FDC  EFF8  F017         	goto	l4202
  8096   002FE0                     l1207:
  8097   002FE0  C005  F00F         	movff	___xxtofl@val,___xxtofl@arg
  8098   002FE4  C006  F010         	movff	___xxtofl@val+1,___xxtofl@arg+1
  8099   002FE8  C007  F011         	movff	___xxtofl@val+2,___xxtofl@arg+2
  8100   002FEC  C008  F012         	movff	___xxtofl@val+3,___xxtofl@arg+3
  8101   002FF0                     l4202:
  8102   002FF0  5005               	movf	___xxtofl@val^0,w,c
  8103   002FF2  1006               	iorwf	(___xxtofl@val+1)^0,w,c
  8104   002FF4  1007               	iorwf	(___xxtofl@val+2)^0,w,c
  8105   002FF6  1008               	iorwf	(___xxtofl@val+3)^0,w,c
  8106   002FF8  A4D8               	btfss	status,2,c
  8107   002FFA  EF01  F018         	goto	u4201
  8108   002FFE  EF03  F018         	goto	u4200
  8109   003002                     u4201:
  8110   003002  EF0D  F018         	goto	l4208
  8111   003006                     u4200:
  8112   003006  0E00               	movlw	0
  8113   003008  6E05               	movwf	?___xxtofl^0,c
  8114   00300A  0E00               	movlw	0
  8115   00300C  6E06               	movwf	(?___xxtofl+1)^0,c
  8116   00300E  0E00               	movlw	0
  8117   003010  6E07               	movwf	(?___xxtofl+2)^0,c
  8118   003012  0E00               	movlw	0
  8119   003014  6E08               	movwf	(?___xxtofl+3)^0,c
  8120   003016  EF9E  F018         	goto	l1210
  8121   00301A                     l4208:
  8122   00301A  0E96               	movlw	150
  8123   00301C  6E0E               	movwf	___xxtofl@exp^0,c
  8124   00301E  EF17  F018         	goto	l4212
  8125   003022                     l4210:
  8126   003022  2A0E               	incf	___xxtofl@exp^0,f,c
  8127   003024  90D8               	bcf	status,0,c
  8128   003026  3212               	rrcf	(___xxtofl@arg+3)^0,f,c
  8129   003028  3211               	rrcf	(___xxtofl@arg+2)^0,f,c
  8130   00302A  3210               	rrcf	(___xxtofl@arg+1)^0,f,c
  8131   00302C  320F               	rrcf	___xxtofl@arg^0,f,c
  8132   00302E                     l4212:
  8133   00302E  0E00               	movlw	0
  8134   003030  140F               	andwf	___xxtofl@arg^0,w,c
  8135   003032  6E09               	movwf	??___xxtofl^0,c
  8136   003034  0E00               	movlw	0
  8137   003036  1410               	andwf	(___xxtofl@arg+1)^0,w,c
  8138   003038  6E0A               	movwf	(??___xxtofl+1)^0,c
  8139   00303A  0E00               	movlw	0
  8140   00303C  1411               	andwf	(___xxtofl@arg+2)^0,w,c
  8141   00303E  6E0B               	movwf	(??___xxtofl+2)^0,c
  8142   003040  0EFE               	movlw	254
  8143   003042  1412               	andwf	(___xxtofl@arg+3)^0,w,c
  8144   003044  6E0C               	movwf	(??___xxtofl+3)^0,c
  8145   003046  5009               	movf	??___xxtofl^0,w,c
  8146   003048  100A               	iorwf	(??___xxtofl+1)^0,w,c
  8147   00304A  100B               	iorwf	(??___xxtofl+2)^0,w,c
  8148   00304C  100C               	iorwf	(??___xxtofl+3)^0,w,c
  8149   00304E  A4D8               	btfss	status,2,c
  8150   003050  EF2C  F018         	goto	u4211
  8151   003054  EF2E  F018         	goto	u4210
  8152   003058                     u4211:
  8153   003058  EF11  F018         	goto	l4210
  8154   00305C                     u4210:
  8155   00305C  EF3C  F018         	goto	l1214
  8156   003060                     l4214:
  8157   003060  2A0E               	incf	___xxtofl@exp^0,f,c
  8158   003062  0E01               	movlw	1
  8159   003064  260F               	addwf	___xxtofl@arg^0,f,c
  8160   003066  0E00               	movlw	0
  8161   003068  2210               	addwfc	(___xxtofl@arg+1)^0,f,c
  8162   00306A  2211               	addwfc	(___xxtofl@arg+2)^0,f,c
  8163   00306C  2212               	addwfc	(___xxtofl@arg+3)^0,f,c
  8164   00306E  90D8               	bcf	status,0,c
  8165   003070  3212               	rrcf	(___xxtofl@arg+3)^0,f,c
  8166   003072  3211               	rrcf	(___xxtofl@arg+2)^0,f,c
  8167   003074  3210               	rrcf	(___xxtofl@arg+1)^0,f,c
  8168   003076  320F               	rrcf	___xxtofl@arg^0,f,c
  8169   003078                     l1214:
  8170   003078  0E00               	movlw	0
  8171   00307A  140F               	andwf	___xxtofl@arg^0,w,c
  8172   00307C  6E09               	movwf	??___xxtofl^0,c
  8173   00307E  0E00               	movlw	0
  8174   003080  1410               	andwf	(___xxtofl@arg+1)^0,w,c
  8175   003082  6E0A               	movwf	(??___xxtofl+1)^0,c
  8176   003084  0E00               	movlw	0
  8177   003086  1411               	andwf	(___xxtofl@arg+2)^0,w,c
  8178   003088  6E0B               	movwf	(??___xxtofl+2)^0,c
  8179   00308A  0EFF               	movlw	255
  8180   00308C  1412               	andwf	(___xxtofl@arg+3)^0,w,c
  8181   00308E  6E0C               	movwf	(??___xxtofl+3)^0,c
  8182   003090  5009               	movf	??___xxtofl^0,w,c
  8183   003092  100A               	iorwf	(??___xxtofl+1)^0,w,c
  8184   003094  100B               	iorwf	(??___xxtofl+2)^0,w,c
  8185   003096  100C               	iorwf	(??___xxtofl+3)^0,w,c
  8186   003098  A4D8               	btfss	status,2,c
  8187   00309A  EF51  F018         	goto	u4221
  8188   00309E  EF53  F018         	goto	u4220
  8189   0030A2                     u4221:
  8190   0030A2  EF30  F018         	goto	l4214
  8191   0030A6                     u4220:
  8192   0030A6  EF5B  F018         	goto	l4222
  8193   0030AA                     l4220:
  8194   0030AA  060E               	decf	___xxtofl@exp^0,f,c
  8195   0030AC  90D8               	bcf	status,0,c
  8196   0030AE  360F               	rlcf	___xxtofl@arg^0,f,c
  8197   0030B0  3610               	rlcf	(___xxtofl@arg+1)^0,f,c
  8198   0030B2  3611               	rlcf	(___xxtofl@arg+2)^0,f,c
  8199   0030B4  3612               	rlcf	(___xxtofl@arg+3)^0,f,c
  8200   0030B6                     l4222:
  8201   0030B6  BE11               	btfsc	(___xxtofl@arg+2)^0,7,c
  8202   0030B8  EF60  F018         	goto	u4231
  8203   0030BC  EF62  F018         	goto	u4230
  8204   0030C0                     u4231:
  8205   0030C0  EF6A  F018         	goto	l1221
  8206   0030C4                     u4230:
  8207   0030C4  0E02               	movlw	2
  8208   0030C6  600E               	cpfslt	___xxtofl@exp^0,c
  8209   0030C8  EF68  F018         	goto	u4241
  8210   0030CC  EF6A  F018         	goto	u4240
  8211   0030D0                     u4241:
  8212   0030D0  EF55  F018         	goto	l4220
  8213   0030D4                     u4240:
  8214   0030D4                     l1221:
  8215   0030D4  B00E               	btfsc	___xxtofl@exp^0,0,c
  8216   0030D6  EF6F  F018         	goto	u4251
  8217   0030DA  EF71  F018         	goto	u4250
  8218   0030DE                     u4251:
  8219   0030DE  EF72  F018         	goto	l4228
  8220   0030E2                     u4250:
  8221   0030E2  9E11               	bcf	(___xxtofl@arg+2)^0,7,c
  8222   0030E4                     l4228:
  8223   0030E4  90D8               	bcf	status,0,c
  8224   0030E6  320E               	rrcf	___xxtofl@exp^0,f,c
  8225   0030E8  C00E  F009         	movff	___xxtofl@exp,??___xxtofl
  8226   0030EC  6A0A               	clrf	(??___xxtofl+1)^0,c
  8227   0030EE  6A0B               	clrf	(??___xxtofl+2)^0,c
  8228   0030F0  6A0C               	clrf	(??___xxtofl+3)^0,c
  8229   0030F2  C009  F00C         	movff	??___xxtofl,??___xxtofl+3
  8230   0030F6  6A0B               	clrf	(??___xxtofl+2)^0,c
  8231   0030F8  6A0A               	clrf	(??___xxtofl+1)^0,c
  8232   0030FA  6A09               	clrf	??___xxtofl^0,c
  8233   0030FC  5009               	movf	??___xxtofl^0,w,c
  8234   0030FE  120F               	iorwf	___xxtofl@arg^0,f,c
  8235   003100  500A               	movf	(??___xxtofl+1)^0,w,c
  8236   003102  1210               	iorwf	(___xxtofl@arg+1)^0,f,c
  8237   003104  500B               	movf	(??___xxtofl+2)^0,w,c
  8238   003106  1211               	iorwf	(___xxtofl@arg+2)^0,f,c
  8239   003108  500C               	movf	(??___xxtofl+3)^0,w,c
  8240   00310A  1212               	iorwf	(___xxtofl@arg+3)^0,f,c
  8241   00310C  500D               	movf	___xxtofl@sign^0,w,c
  8242   00310E  B4D8               	btfsc	status,2,c
  8243   003110  EF8C  F018         	goto	u4261
  8244   003114  EF8E  F018         	goto	u4260
  8245   003118                     u4261:
  8246   003118  EF96  F018         	goto	l4238
  8247   00311C                     u4260:
  8248   00311C  BE08               	btfsc	(___xxtofl@val+3)^0,7,c
  8249   00311E  EF95  F018         	goto	u4270
  8250   003122  EF93  F018         	goto	u4271
  8251   003126                     u4271:
  8252   003126  EF96  F018         	goto	l4238
  8253   00312A                     u4270:
  8254   00312A  8E12               	bsf	(___xxtofl@arg+3)^0,7,c
  8255   00312C                     l4238:
  8256   00312C  C00F  F005         	movff	___xxtofl@arg,?___xxtofl
  8257   003130  C010  F006         	movff	___xxtofl@arg+1,?___xxtofl+1
  8258   003134  C011  F007         	movff	___xxtofl@arg+2,?___xxtofl+2
  8259   003138  C012  F008         	movff	___xxtofl@arg+3,?___xxtofl+3
  8260   00313C                     l1210:
  8261   00313C  0012               	return		;funcret
  8262   00313E                     __end_of___xxtofl:
  8263                           	callstack 0
  8264                           
  8265 ;; *************** function ___flsub *****************
  8266 ;; Defined at:
  8267 ;;		line 245 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\sprcadd.c"
  8268 ;; Parameters:    Size  Location     Type
  8269 ;;  b               4   20[COMRAM] unsigned char 
  8270 ;;  a               4   24[COMRAM] unsigned char 
  8271 ;; Auto vars:     Size  Location     Type
  8272 ;;		None
  8273 ;; Return value:  Size  Location     Type
  8274 ;;                  4   20[COMRAM] unsigned char 
  8275 ;; Registers used:
  8276 ;;		wreg, status,2, status,0, cstack
  8277 ;; Tracked objects:
  8278 ;;		On entry : 0/0
  8279 ;;		On exit  : 0/0
  8280 ;;		Unchanged: 0/0
  8281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8282 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8283 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8285 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8286 ;;Total ram usage:        8 bytes
  8287 ;; Hardware stack levels used: 1
  8288 ;; Hardware stack levels required when called: 3
  8289 ;; This function calls:
  8290 ;;		___fladd
  8291 ;; This function is called by:
  8292 ;;		_colorDetect
  8293 ;; This function uses a non-reentrant model
  8294 ;;
  8295                           
  8296                           	psect	text38
  8297   004922                     __ptext38:
  8298                           	callstack 0
  8299   004922                     ___flsub:
  8300                           	callstack 26
  8301   004922  0E00               	movlw	0
  8302   004924  1A19               	xorwf	___flsub@a^0,f,c
  8303   004926  0E00               	movlw	0
  8304   004928  1A1A               	xorwf	(___flsub@a+1)^0,f,c
  8305   00492A  0E00               	movlw	0
  8306   00492C  1A1B               	xorwf	(___flsub@a+2)^0,f,c
  8307   00492E  0E80               	movlw	128
  8308   004930  1A1C               	xorwf	(___flsub@a+3)^0,f,c
  8309   004932  C015  F005         	movff	___flsub@b,___fladd@b
  8310   004936  C016  F006         	movff	___flsub@b+1,___fladd@b+1
  8311   00493A  C017  F007         	movff	___flsub@b+2,___fladd@b+2
  8312   00493E  C018  F008         	movff	___flsub@b+3,___fladd@b+3
  8313   004942  C019  F009         	movff	___flsub@a,___fladd@a
  8314   004946  C01A  F00A         	movff	___flsub@a+1,___fladd@a+1
  8315   00494A  C01B  F00B         	movff	___flsub@a+2,___fladd@a+2
  8316   00494E  C01C  F00C         	movff	___flsub@a+3,___fladd@a+3
  8317   004952  ECFE  F00C         	call	___fladd	;wreg free
  8318   004956  C005  F015         	movff	?___fladd,?___flsub
  8319   00495A  C006  F016         	movff	?___fladd+1,?___flsub+1
  8320   00495E  C007  F017         	movff	?___fladd+2,?___flsub+2
  8321   004962  C008  F018         	movff	?___fladd+3,?___flsub+3
  8322   004966  0012               	return		;funcret
  8323   004968                     __end_of___flsub:
  8324                           	callstack 0
  8325                           
  8326 ;; *************** function ___fladd *****************
  8327 ;; Defined at:
  8328 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\sprcadd.c"
  8329 ;; Parameters:    Size  Location     Type
  8330 ;;  b               4    4[COMRAM] unsigned char 
  8331 ;;  a               4    8[COMRAM] unsigned char 
  8332 ;; Auto vars:     Size  Location     Type
  8333 ;;  grs             1   19[COMRAM] unsigned char 
  8334 ;;  bexp            1   18[COMRAM] unsigned char 
  8335 ;;  aexp            1   17[COMRAM] unsigned char 
  8336 ;;  signs           1   16[COMRAM] unsigned char 
  8337 ;; Return value:  Size  Location     Type
  8338 ;;                  4    4[COMRAM] unsigned char 
  8339 ;; Registers used:
  8340 ;;		wreg, status,2, status,0
  8341 ;; Tracked objects:
  8342 ;;		On entry : 0/0
  8343 ;;		On exit  : 0/0
  8344 ;;		Unchanged: 0/0
  8345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8346 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8347 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8348 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8349 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8350 ;;Total ram usage:       16 bytes
  8351 ;; Hardware stack levels used: 1
  8352 ;; Hardware stack levels required when called: 2
  8353 ;; This function calls:
  8354 ;;		Nothing
  8355 ;; This function is called by:
  8356 ;;		___flsub
  8357 ;; This function uses a non-reentrant model
  8358 ;;
  8359                           
  8360                           	psect	text39
  8361   0019FC                     __ptext39:
  8362                           	callstack 0
  8363   0019FC                     ___fladd:
  8364                           	callstack 26
  8365   0019FC  5008               	movf	(___fladd@b+3)^0,w,c
  8366   0019FE  0B80               	andlw	128
  8367   001A00  6E11               	movwf	___fladd@signs^0,c
  8368   001A02  5008               	movf	(___fladd@b+3)^0,w,c
  8369   001A04  2408               	addwf	(___fladd@b+3)^0,w,c
  8370   001A06  6E13               	movwf	___fladd@bexp^0,c
  8371   001A08  AE07               	btfss	(___fladd@b+2)^0,7,c
  8372   001A0A  EF09  F00D         	goto	u3191
  8373   001A0E  EF0B  F00D         	goto	u3190
  8374   001A12                     u3191:
  8375   001A12  EF0C  F00D         	goto	l3528
  8376   001A16                     u3190:
  8377   001A16  8013               	bsf	___fladd@bexp^0,0,c
  8378   001A18                     l3528:
  8379   001A18  5013               	movf	___fladd@bexp^0,w,c
  8380   001A1A  B4D8               	btfsc	status,2,c
  8381   001A1C  EF12  F00D         	goto	u3201
  8382   001A20  EF14  F00D         	goto	u3200
  8383   001A24                     u3201:
  8384   001A24  EF29  F00D         	goto	l3538
  8385   001A28                     u3200:
  8386   001A28  2813               	incf	___fladd@bexp^0,w,c
  8387   001A2A  A4D8               	btfss	status,2,c
  8388   001A2C  EF1A  F00D         	goto	u3211
  8389   001A30  EF1C  F00D         	goto	u3210
  8390   001A34                     u3211:
  8391   001A34  EF24  F00D         	goto	l3534
  8392   001A38                     u3210:
  8393   001A38  0E00               	movlw	0
  8394   001A3A  6E05               	movwf	___fladd@b^0,c
  8395   001A3C  0E00               	movlw	0
  8396   001A3E  6E06               	movwf	(___fladd@b+1)^0,c
  8397   001A40  0E00               	movlw	0
  8398   001A42  6E07               	movwf	(___fladd@b+2)^0,c
  8399   001A44  0E00               	movlw	0
  8400   001A46  6E08               	movwf	(___fladd@b+3)^0,c
  8401   001A48                     l3534:
  8402   001A48  8E07               	bsf	(___fladd@b+2)^0,7,c
  8403   001A4A  0E00               	movlw	0
  8404   001A4C  6E08               	movwf	(___fladd@b+3)^0,c
  8405   001A4E  EF31  F00D         	goto	l3540
  8406   001A52                     l3538:
  8407   001A52  0E00               	movlw	0
  8408   001A54  6E05               	movwf	___fladd@b^0,c
  8409   001A56  0E00               	movlw	0
  8410   001A58  6E06               	movwf	(___fladd@b+1)^0,c
  8411   001A5A  0E00               	movlw	0
  8412   001A5C  6E07               	movwf	(___fladd@b+2)^0,c
  8413   001A5E  0E00               	movlw	0
  8414   001A60  6E08               	movwf	(___fladd@b+3)^0,c
  8415   001A62                     l3540:
  8416   001A62  500C               	movf	(___fladd@a+3)^0,w,c
  8417   001A64  0B80               	andlw	128
  8418   001A66  6E12               	movwf	___fladd@aexp^0,c
  8419   001A68  5011               	movf	___fladd@signs^0,w,c
  8420   001A6A  1812               	xorwf	___fladd@aexp^0,w,c
  8421   001A6C  B4D8               	btfsc	status,2,c
  8422   001A6E  EF3B  F00D         	goto	u3221
  8423   001A72  EF3D  F00D         	goto	u3220
  8424   001A76                     u3221:
  8425   001A76  EF3E  F00D         	goto	l3546
  8426   001A7A                     u3220:
  8427   001A7A  8C11               	bsf	___fladd@signs^0,6,c
  8428   001A7C                     l3546:
  8429   001A7C  500C               	movf	(___fladd@a+3)^0,w,c
  8430   001A7E  240C               	addwf	(___fladd@a+3)^0,w,c
  8431   001A80  6E12               	movwf	___fladd@aexp^0,c
  8432   001A82  AE0B               	btfss	(___fladd@a+2)^0,7,c
  8433   001A84  EF46  F00D         	goto	u3231
  8434   001A88  EF48  F00D         	goto	u3230
  8435   001A8C                     u3231:
  8436   001A8C  EF49  F00D         	goto	l3552
  8437   001A90                     u3230:
  8438   001A90  8012               	bsf	___fladd@aexp^0,0,c
  8439   001A92                     l3552:
  8440   001A92  5012               	movf	___fladd@aexp^0,w,c
  8441   001A94  B4D8               	btfsc	status,2,c
  8442   001A96  EF4F  F00D         	goto	u3241
  8443   001A9A  EF51  F00D         	goto	u3240
  8444   001A9E                     u3241:
  8445   001A9E  EF66  F00D         	goto	l3562
  8446   001AA2                     u3240:
  8447   001AA2  2812               	incf	___fladd@aexp^0,w,c
  8448   001AA4  A4D8               	btfss	status,2,c
  8449   001AA6  EF57  F00D         	goto	u3251
  8450   001AAA  EF59  F00D         	goto	u3250
  8451   001AAE                     u3251:
  8452   001AAE  EF61  F00D         	goto	l3558
  8453   001AB2                     u3250:
  8454   001AB2  0E00               	movlw	0
  8455   001AB4  6E09               	movwf	___fladd@a^0,c
  8456   001AB6  0E00               	movlw	0
  8457   001AB8  6E0A               	movwf	(___fladd@a+1)^0,c
  8458   001ABA  0E00               	movlw	0
  8459   001ABC  6E0B               	movwf	(___fladd@a+2)^0,c
  8460   001ABE  0E00               	movlw	0
  8461   001AC0  6E0C               	movwf	(___fladd@a+3)^0,c
  8462   001AC2                     l3558:
  8463   001AC2  8E0B               	bsf	(___fladd@a+2)^0,7,c
  8464   001AC4  0E00               	movlw	0
  8465   001AC6  6E0C               	movwf	(___fladd@a+3)^0,c
  8466   001AC8  EF6E  F00D         	goto	l3564
  8467   001ACC                     l3562:
  8468   001ACC  0E00               	movlw	0
  8469   001ACE  6E09               	movwf	___fladd@a^0,c
  8470   001AD0  0E00               	movlw	0
  8471   001AD2  6E0A               	movwf	(___fladd@a+1)^0,c
  8472   001AD4  0E00               	movlw	0
  8473   001AD6  6E0B               	movwf	(___fladd@a+2)^0,c
  8474   001AD8  0E00               	movlw	0
  8475   001ADA  6E0C               	movwf	(___fladd@a+3)^0,c
  8476   001ADC                     l3564:
  8477   001ADC  5013               	movf	___fladd@bexp^0,w,c
  8478   001ADE  5C12               	subwf	___fladd@aexp^0,w,c
  8479   001AE0  B0D8               	btfsc	status,0,c
  8480   001AE2  EF75  F00D         	goto	u3261
  8481   001AE6  EF77  F00D         	goto	u3260
  8482   001AEA                     u3261:
  8483   001AEA  EF9E  F00D         	goto	l3600
  8484   001AEE                     u3260:
  8485   001AEE  AC11               	btfss	___fladd@signs^0,6,c
  8486   001AF0  EF7C  F00D         	goto	u3271
  8487   001AF4  EF7E  F00D         	goto	u3270
  8488   001AF8                     u3271:
  8489   001AF8  EF80  F00D         	goto	l3570
  8490   001AFC                     u3270:
  8491   001AFC  0E80               	movlw	128
  8492   001AFE  1A11               	xorwf	___fladd@signs^0,f,c
  8493   001B00                     l3570:
  8494   001B00  C013  F014         	movff	___fladd@bexp,___fladd@grs
  8495   001B04  C012  F013         	movff	___fladd@aexp,___fladd@bexp
  8496   001B08  C014  F012         	movff	___fladd@grs,___fladd@aexp
  8497   001B0C  C005  F014         	movff	___fladd@b,___fladd@grs
  8498   001B10  C009  F005         	movff	___fladd@a,___fladd@b
  8499   001B14  C014  F009         	movff	___fladd@grs,___fladd@a
  8500   001B18  C006  F014         	movff	___fladd@b+1,___fladd@grs
  8501   001B1C  C00A  F006         	movff	___fladd@a+1,___fladd@b+1
  8502   001B20  C014  F00A         	movff	___fladd@grs,___fladd@a+1
  8503   001B24  C007  F014         	movff	___fladd@b+2,___fladd@grs
  8504   001B28  C00B  F007         	movff	___fladd@a+2,___fladd@b+2
  8505   001B2C  C014  F00B         	movff	___fladd@grs,___fladd@a+2
  8506   001B30  C008  F014         	movff	___fladd@b+3,___fladd@grs
  8507   001B34  C00C  F008         	movff	___fladd@a+3,___fladd@b+3
  8508   001B38  C014  F00C         	movff	___fladd@grs,___fladd@a+3
  8509   001B3C                     l3600:
  8510   001B3C  0E00               	movlw	0
  8511   001B3E  6E14               	movwf	___fladd@grs^0,c
  8512   001B40  5013               	movf	___fladd@bexp^0,w,c
  8513   001B42  C012  F00D         	movff	___fladd@aexp,??___fladd
  8514   001B46  6A0E               	clrf	(??___fladd+1)^0,c
  8515   001B48  5E0D               	subwf	??___fladd^0,f,c
  8516   001B4A  0E00               	movlw	0
  8517   001B4C  5A0E               	subwfb	(??___fladd+1)^0,f,c
  8518   001B4E  BE0E               	btfsc	(??___fladd+1)^0,7,c
  8519   001B50  EFB3  F00D         	goto	u3281
  8520   001B54  500E               	movf	(??___fladd+1)^0,w,c
  8521   001B56  E109               	bnz	u3280
  8522   001B58  0E1A               	movlw	26
  8523   001B5A  5C0D               	subwf	??___fladd^0,w,c
  8524   001B5C  A0D8               	btfss	status,0,c
  8525   001B5E  EFB3  F00D         	goto	u3281
  8526   001B62  EFB5  F00D         	goto	u3280
  8527   001B66                     u3281:
  8528   001B66  EFEC  F00D         	goto	l1081
  8529   001B6A                     u3280:
  8530   001B6A  5005               	movf	___fladd@b^0,w,c
  8531   001B6C  1006               	iorwf	(___fladd@b+1)^0,w,c
  8532   001B6E  1007               	iorwf	(___fladd@b+2)^0,w,c
  8533   001B70  1008               	iorwf	(___fladd@b+3)^0,w,c
  8534   001B72  A4D8               	btfss	status,2,c
  8535   001B74  EFBE  F00D         	goto	u3291
  8536   001B78  EFC1  F00D         	goto	u3290
  8537   001B7C                     u3291:
  8538   001B7C  0E01               	movlw	1
  8539   001B7E  EFC2  F00D         	goto	u3300
  8540   001B82                     u3290:
  8541   001B82  0E00               	movlw	0
  8542   001B84                     u3300:
  8543   001B84  6E14               	movwf	___fladd@grs^0,c
  8544   001B86  0E00               	movlw	0
  8545   001B88  6E05               	movwf	___fladd@b^0,c
  8546   001B8A  0E00               	movlw	0
  8547   001B8C  6E06               	movwf	(___fladd@b+1)^0,c
  8548   001B8E  0E00               	movlw	0
  8549   001B90  6E07               	movwf	(___fladd@b+2)^0,c
  8550   001B92  0E00               	movlw	0
  8551   001B94  6E08               	movwf	(___fladd@b+3)^0,c
  8552   001B96  C012  F013         	movff	___fladd@aexp,___fladd@bexp
  8553   001B9A  EFF5  F00D         	goto	l1080
  8554   001B9E                     l1082:
  8555   001B9E  A014               	btfss	___fladd@grs^0,0,c
  8556   001BA0  EFD4  F00D         	goto	u3311
  8557   001BA4  EFD6  F00D         	goto	u3310
  8558   001BA8                     u3311:
  8559   001BA8  EFDC  F00D         	goto	l3612
  8560   001BAC                     u3310:
  8561   001BAC  90D8               	bcf	status,0,c
  8562   001BAE  3014               	rrcf	___fladd@grs^0,w,c
  8563   001BB0  0901               	iorlw	1
  8564   001BB2  6E14               	movwf	___fladd@grs^0,c
  8565   001BB4  EFDE  F00D         	goto	l3614
  8566   001BB8                     l3612:
  8567   001BB8  90D8               	bcf	status,0,c
  8568   001BBA  3214               	rrcf	___fladd@grs^0,f,c
  8569   001BBC                     l3614:
  8570   001BBC  A005               	btfss	___fladd@b^0,0,c
  8571   001BBE  EFE3  F00D         	goto	u3321
  8572   001BC2  EFE5  F00D         	goto	u3320
  8573   001BC6                     u3321:
  8574   001BC6  EFE6  F00D         	goto	l3618
  8575   001BCA                     u3320:
  8576   001BCA  8E14               	bsf	___fladd@grs^0,7,c
  8577   001BCC                     l3618:
  8578   001BCC  3408               	rlcf	(___fladd@b+3)^0,w,c
  8579   001BCE  3208               	rrcf	(___fladd@b+3)^0,f,c
  8580   001BD0  3207               	rrcf	(___fladd@b+2)^0,f,c
  8581   001BD2  3206               	rrcf	(___fladd@b+1)^0,f,c
  8582   001BD4  3205               	rrcf	___fladd@b^0,f,c
  8583   001BD6  2A13               	incf	___fladd@bexp^0,f,c
  8584   001BD8                     l1081:
  8585   001BD8  5012               	movf	___fladd@aexp^0,w,c
  8586   001BDA  5C13               	subwf	___fladd@bexp^0,w,c
  8587   001BDC  A0D8               	btfss	status,0,c
  8588   001BDE  EFF3  F00D         	goto	u3331
  8589   001BE2  EFF5  F00D         	goto	u3330
  8590   001BE6                     u3331:
  8591   001BE6  EFCF  F00D         	goto	l1082
  8592   001BEA                     u3330:
  8593   001BEA                     l1080:
  8594   001BEA  BC11               	btfsc	___fladd@signs^0,6,c
  8595   001BEC  EFFA  F00D         	goto	u3341
  8596   001BF0  EFFC  F00D         	goto	u3340
  8597   001BF4                     u3341:
  8598   001BF4  EF3C  F00E         	goto	l3646
  8599   001BF8                     u3340:
  8600   001BF8  5013               	movf	___fladd@bexp^0,w,c
  8601   001BFA  A4D8               	btfss	status,2,c
  8602   001BFC  EF02  F00E         	goto	u3351
  8603   001C00  EF04  F00E         	goto	u3350
  8604   001C04                     u3351:
  8605   001C04  EF0E  F00E         	goto	l3628
  8606   001C08                     u3350:
  8607   001C08  0E00               	movlw	0
  8608   001C0A  6E05               	movwf	?___fladd^0,c
  8609   001C0C  0E00               	movlw	0
  8610   001C0E  6E06               	movwf	(?___fladd+1)^0,c
  8611   001C10  0E00               	movlw	0
  8612   001C12  6E07               	movwf	(?___fladd+2)^0,c
  8613   001C14  0E00               	movlw	0
  8614   001C16  6E08               	movwf	(?___fladd+3)^0,c
  8615   001C18  EF5D  F00F         	goto	l1089
  8616   001C1C                     l3628:
  8617   001C1C  5009               	movf	___fladd@a^0,w,c
  8618   001C1E  2605               	addwf	___fladd@b^0,f,c
  8619   001C20  500A               	movf	(___fladd@a+1)^0,w,c
  8620   001C22  2206               	addwfc	(___fladd@b+1)^0,f,c
  8621   001C24  500B               	movf	(___fladd@a+2)^0,w,c
  8622   001C26  2207               	addwfc	(___fladd@b+2)^0,f,c
  8623   001C28  500C               	movf	(___fladd@a+3)^0,w,c
  8624   001C2A  2208               	addwfc	(___fladd@b+3)^0,f,c
  8625   001C2C  A008               	btfss	(___fladd@b+3)^0,0,c
  8626   001C2E  EF1B  F00E         	goto	u3361
  8627   001C32  EF1D  F00E         	goto	u3360
  8628   001C36                     u3361:
  8629   001C36  EFC9  F00E         	goto	l3682
  8630   001C3A                     u3360:
  8631   001C3A  A014               	btfss	___fladd@grs^0,0,c
  8632   001C3C  EF22  F00E         	goto	u3371
  8633   001C40  EF24  F00E         	goto	u3370
  8634   001C44                     u3371:
  8635   001C44  EF2A  F00E         	goto	l3636
  8636   001C48                     u3370:
  8637   001C48  90D8               	bcf	status,0,c
  8638   001C4A  3014               	rrcf	___fladd@grs^0,w,c
  8639   001C4C  0901               	iorlw	1
  8640   001C4E  6E14               	movwf	___fladd@grs^0,c
  8641   001C50  EF2C  F00E         	goto	l3638
  8642   001C54                     l3636:
  8643   001C54  90D8               	bcf	status,0,c
  8644   001C56  3214               	rrcf	___fladd@grs^0,f,c
  8645   001C58                     l3638:
  8646   001C58  A005               	btfss	___fladd@b^0,0,c
  8647   001C5A  EF31  F00E         	goto	u3381
  8648   001C5E  EF33  F00E         	goto	u3380
  8649   001C62                     u3381:
  8650   001C62  EF34  F00E         	goto	l3642
  8651   001C66                     u3380:
  8652   001C66  8E14               	bsf	___fladd@grs^0,7,c
  8653   001C68                     l3642:
  8654   001C68  3408               	rlcf	(___fladd@b+3)^0,w,c
  8655   001C6A  3208               	rrcf	(___fladd@b+3)^0,f,c
  8656   001C6C  3207               	rrcf	(___fladd@b+2)^0,f,c
  8657   001C6E  3206               	rrcf	(___fladd@b+1)^0,f,c
  8658   001C70  3205               	rrcf	___fladd@b^0,f,c
  8659   001C72  2A13               	incf	___fladd@bexp^0,f,c
  8660   001C74  EFC9  F00E         	goto	l3682
  8661   001C78                     l3646:
  8662   001C78  5009               	movf	___fladd@a^0,w,c
  8663   001C7A  5C05               	subwf	___fladd@b^0,w,c
  8664   001C7C  500A               	movf	(___fladd@a+1)^0,w,c
  8665   001C7E  5806               	subwfb	(___fladd@b+1)^0,w,c
  8666   001C80  500B               	movf	(___fladd@a+2)^0,w,c
  8667   001C82  5807               	subwfb	(___fladd@b+2)^0,w,c
  8668   001C84  5008               	movf	(___fladd@b+3)^0,w,c
  8669   001C86  0A80               	xorlw	128
  8670   001C88  6E0D               	movwf	??___fladd^0,c
  8671   001C8A  500C               	movf	(___fladd@a+3)^0,w,c
  8672   001C8C  0A80               	xorlw	128
  8673   001C8E  580D               	subwfb	??___fladd^0,w,c
  8674   001C90  B0D8               	btfsc	status,0,c
  8675   001C92  EF4D  F00E         	goto	u3391
  8676   001C96  EF4F  F00E         	goto	u3390
  8677   001C9A                     u3391:
  8678   001C9A  EF7A  F00E         	goto	l3656
  8679   001C9E                     u3390:
  8680   001C9E  5005               	movf	___fladd@b^0,w,c
  8681   001CA0  5C09               	subwf	___fladd@a^0,w,c
  8682   001CA2  6E0D               	movwf	??___fladd^0,c
  8683   001CA4  5006               	movf	(___fladd@b+1)^0,w,c
  8684   001CA6  580A               	subwfb	(___fladd@a+1)^0,w,c
  8685   001CA8  6E0E               	movwf	(??___fladd+1)^0,c
  8686   001CAA  5007               	movf	(___fladd@b+2)^0,w,c
  8687   001CAC  580B               	subwfb	(___fladd@a+2)^0,w,c
  8688   001CAE  6E0F               	movwf	(??___fladd+2)^0,c
  8689   001CB0  5008               	movf	(___fladd@b+3)^0,w,c
  8690   001CB2  580C               	subwfb	(___fladd@a+3)^0,w,c
  8691   001CB4  6E10               	movwf	(??___fladd+3)^0,c
  8692   001CB6  0EFF               	movlw	255
  8693   001CB8  240D               	addwf	??___fladd^0,w,c
  8694   001CBA  6E05               	movwf	___fladd@b^0,c
  8695   001CBC  0EFF               	movlw	255
  8696   001CBE  200E               	addwfc	(??___fladd+1)^0,w,c
  8697   001CC0  6E06               	movwf	(___fladd@b+1)^0,c
  8698   001CC2  0EFF               	movlw	255
  8699   001CC4  200F               	addwfc	(??___fladd+2)^0,w,c
  8700   001CC6  6E07               	movwf	(___fladd@b+2)^0,c
  8701   001CC8  0EFF               	movlw	255
  8702   001CCA  2010               	addwfc	(??___fladd+3)^0,w,c
  8703   001CCC  6E08               	movwf	(___fladd@b+3)^0,c
  8704   001CCE  0E80               	movlw	128
  8705   001CD0  1A11               	xorwf	___fladd@signs^0,f,c
  8706   001CD2  6C14               	negf	___fladd@grs^0,c
  8707   001CD4  5014               	movf	___fladd@grs^0,w,c
  8708   001CD6  A4D8               	btfss	status,2,c
  8709   001CD8  EF70  F00E         	goto	u3401
  8710   001CDC  EF72  F00E         	goto	u3400
  8711   001CE0                     u3401:
  8712   001CE0  EF82  F00E         	goto	l1097
  8713   001CE4                     u3400:
  8714   001CE4  0E01               	movlw	1
  8715   001CE6  2605               	addwf	___fladd@b^0,f,c
  8716   001CE8  0E00               	movlw	0
  8717   001CEA  2206               	addwfc	(___fladd@b+1)^0,f,c
  8718   001CEC  2207               	addwfc	(___fladd@b+2)^0,f,c
  8719   001CEE  2208               	addwfc	(___fladd@b+3)^0,f,c
  8720   001CF0  EF82  F00E         	goto	l1097
  8721   001CF4                     l3656:
  8722   001CF4  5009               	movf	___fladd@a^0,w,c
  8723   001CF6  5E05               	subwf	___fladd@b^0,f,c
  8724   001CF8  500A               	movf	(___fladd@a+1)^0,w,c
  8725   001CFA  5A06               	subwfb	(___fladd@b+1)^0,f,c
  8726   001CFC  500B               	movf	(___fladd@a+2)^0,w,c
  8727   001CFE  5A07               	subwfb	(___fladd@b+2)^0,f,c
  8728   001D00  500C               	movf	(___fladd@a+3)^0,w,c
  8729   001D02  5A08               	subwfb	(___fladd@b+3)^0,f,c
  8730   001D04                     l1097:
  8731   001D04  5005               	movf	___fladd@b^0,w,c
  8732   001D06  1006               	iorwf	(___fladd@b+1)^0,w,c
  8733   001D08  1007               	iorwf	(___fladd@b+2)^0,w,c
  8734   001D0A  1008               	iorwf	(___fladd@b+3)^0,w,c
  8735   001D0C  A4D8               	btfss	status,2,c
  8736   001D0E  EF8B  F00E         	goto	u3411
  8737   001D12  EF8D  F00E         	goto	u3410
  8738   001D16                     u3411:
  8739   001D16  EFC2  F00E         	goto	l3680
  8740   001D1A                     u3410:
  8741   001D1A  5014               	movf	___fladd@grs^0,w,c
  8742   001D1C  A4D8               	btfss	status,2,c
  8743   001D1E  EF93  F00E         	goto	u3421
  8744   001D22  EF95  F00E         	goto	u3420
  8745   001D26                     u3421:
  8746   001D26  EFC2  F00E         	goto	l3680
  8747   001D2A                     u3420:
  8748   001D2A  0E00               	movlw	0
  8749   001D2C  6E05               	movwf	?___fladd^0,c
  8750   001D2E  0E00               	movlw	0
  8751   001D30  6E06               	movwf	(?___fladd+1)^0,c
  8752   001D32  0E00               	movlw	0
  8753   001D34  6E07               	movwf	(?___fladd+2)^0,c
  8754   001D36  0E00               	movlw	0
  8755   001D38  6E08               	movwf	(?___fladd+3)^0,c
  8756   001D3A  EF5D  F00F         	goto	l1089
  8757   001D3E                     l3664:
  8758   001D3E  90D8               	bcf	status,0,c
  8759   001D40  3605               	rlcf	___fladd@b^0,f,c
  8760   001D42  3606               	rlcf	(___fladd@b+1)^0,f,c
  8761   001D44  3607               	rlcf	(___fladd@b+2)^0,f,c
  8762   001D46  3608               	rlcf	(___fladd@b+3)^0,f,c
  8763   001D48  AE14               	btfss	___fladd@grs^0,7,c
  8764   001D4A  EFA9  F00E         	goto	u3431
  8765   001D4E  EFAB  F00E         	goto	u3430
  8766   001D52                     u3431:
  8767   001D52  EFAC  F00E         	goto	l3670
  8768   001D56                     u3430:
  8769   001D56  8005               	bsf	___fladd@b^0,0,c
  8770   001D58                     l3670:
  8771   001D58  A014               	btfss	___fladd@grs^0,0,c
  8772   001D5A  EFB1  F00E         	goto	u3441
  8773   001D5E  EFB3  F00E         	goto	u3440
  8774   001D62                     u3441:
  8775   001D62  EFB7  F00E         	goto	l3674
  8776   001D66                     u3440:
  8777   001D66  80D8               	bsf	status,0,c
  8778   001D68  3614               	rlcf	___fladd@grs^0,f,c
  8779   001D6A  EFB9  F00E         	goto	l3676
  8780   001D6E                     l3674:
  8781   001D6E  90D8               	bcf	status,0,c
  8782   001D70  3614               	rlcf	___fladd@grs^0,f,c
  8783   001D72                     l3676:
  8784   001D72  5013               	movf	___fladd@bexp^0,w,c
  8785   001D74  B4D8               	btfsc	status,2,c
  8786   001D76  EFBF  F00E         	goto	u3451
  8787   001D7A  EFC1  F00E         	goto	u3450
  8788   001D7E                     u3451:
  8789   001D7E  EFC2  F00E         	goto	l3680
  8790   001D82                     u3450:
  8791   001D82  0613               	decf	___fladd@bexp^0,f,c
  8792   001D84                     l3680:
  8793   001D84  AE07               	btfss	(___fladd@b+2)^0,7,c
  8794   001D86  EFC7  F00E         	goto	u3461
  8795   001D8A  EFC9  F00E         	goto	u3460
  8796   001D8E                     u3461:
  8797   001D8E  EF9F  F00E         	goto	l3664
  8798   001D92                     u3460:
  8799   001D92                     l3682:
  8800   001D92  0E00               	movlw	0
  8801   001D94  6E12               	movwf	___fladd@aexp^0,c
  8802   001D96  AE14               	btfss	___fladd@grs^0,7,c
  8803   001D98  EFD0  F00E         	goto	u3471
  8804   001D9C  EFD2  F00E         	goto	u3470
  8805   001DA0                     u3471:
  8806   001DA0  EFEA  F00E         	goto	l1106
  8807   001DA4                     u3470:
  8808   001DA4  C014  F00D         	movff	___fladd@grs,??___fladd
  8809   001DA8  0E7F               	movlw	127
  8810   001DAA  160D               	andwf	??___fladd^0,f,c
  8811   001DAC  B4D8               	btfsc	status,2,c
  8812   001DAE  EFDB  F00E         	goto	u3481
  8813   001DB2  EFDD  F00E         	goto	u3480
  8814   001DB6                     u3481:
  8815   001DB6  EFE1  F00E         	goto	l1107
  8816   001DBA                     u3480:
  8817   001DBA                     l3688:
  8818   001DBA  0E01               	movlw	1
  8819   001DBC  6E12               	movwf	___fladd@aexp^0,c
  8820   001DBE  EFEA  F00E         	goto	l1106
  8821   001DC2                     l1107:
  8822   001DC2  A005               	btfss	___fladd@b^0,0,c
  8823   001DC4  EFE6  F00E         	goto	u3491
  8824   001DC8  EFE8  F00E         	goto	u3490
  8825   001DCC                     u3491:
  8826   001DCC  EFEA  F00E         	goto	l1106
  8827   001DD0                     u3490:
  8828   001DD0  EFDD  F00E         	goto	l3688
  8829   001DD4                     l1106:
  8830   001DD4  5012               	movf	___fladd@aexp^0,w,c
  8831   001DD6  B4D8               	btfsc	status,2,c
  8832   001DD8  EFF0  F00E         	goto	u3501
  8833   001DDC  EFF2  F00E         	goto	u3500
  8834   001DE0                     u3501:
  8835   001DE0  EF1D  F00F         	goto	l3700
  8836   001DE4                     u3500:
  8837   001DE4  0E01               	movlw	1
  8838   001DE6  2605               	addwf	___fladd@b^0,f,c
  8839   001DE8  0E00               	movlw	0
  8840   001DEA  2206               	addwfc	(___fladd@b+1)^0,f,c
  8841   001DEC  2207               	addwfc	(___fladd@b+2)^0,f,c
  8842   001DEE  2208               	addwfc	(___fladd@b+3)^0,f,c
  8843   001DF0  A008               	btfss	(___fladd@b+3)^0,0,c
  8844   001DF2  EFFD  F00E         	goto	u3511
  8845   001DF6  EFFF  F00E         	goto	u3510
  8846   001DFA                     u3511:
  8847   001DFA  EF1D  F00F         	goto	l3700
  8848   001DFE                     u3510:
  8849   001DFE  C005  F00D         	movff	___fladd@b,??___fladd
  8850   001E02  C006  F00E         	movff	___fladd@b+1,??___fladd+1
  8851   001E06  C007  F00F         	movff	___fladd@b+2,??___fladd+2
  8852   001E0A  C008  F010         	movff	___fladd@b+3,??___fladd+3
  8853   001E0E  3410               	rlcf	(??___fladd+3)^0,w,c
  8854   001E10  3210               	rrcf	(??___fladd+3)^0,f,c
  8855   001E12  320F               	rrcf	(??___fladd+2)^0,f,c
  8856   001E14  320E               	rrcf	(??___fladd+1)^0,f,c
  8857   001E16  320D               	rrcf	??___fladd^0,f,c
  8858   001E18  C00D  F005         	movff	??___fladd,___fladd@b
  8859   001E1C  C00E  F006         	movff	??___fladd+1,___fladd@b+1
  8860   001E20  C00F  F007         	movff	??___fladd+2,___fladd@b+2
  8861   001E24  C010  F008         	movff	??___fladd+3,___fladd@b+3
  8862   001E28  2813               	incf	___fladd@bexp^0,w,c
  8863   001E2A  B4D8               	btfsc	status,2,c
  8864   001E2C  EF1A  F00F         	goto	u3521
  8865   001E30  EF1C  F00F         	goto	u3520
  8866   001E34                     u3521:
  8867   001E34  EF1D  F00F         	goto	l3700
  8868   001E38                     u3520:
  8869   001E38  2A13               	incf	___fladd@bexp^0,f,c
  8870   001E3A                     l3700:
  8871   001E3A  2813               	incf	___fladd@bexp^0,w,c
  8872   001E3C  B4D8               	btfsc	status,2,c
  8873   001E3E  EF23  F00F         	goto	u3531
  8874   001E42  EF25  F00F         	goto	u3530
  8875   001E46                     u3531:
  8876   001E46  EF2D  F00F         	goto	l3704
  8877   001E4A                     u3530:
  8878   001E4A  5013               	movf	___fladd@bexp^0,w,c
  8879   001E4C  A4D8               	btfss	status,2,c
  8880   001E4E  EF2B  F00F         	goto	u3541
  8881   001E52  EF2D  F00F         	goto	u3540
  8882   001E56                     u3541:
  8883   001E56  EF3F  F00F         	goto	l3708
  8884   001E5A                     u3540:
  8885   001E5A                     l3704:
  8886   001E5A  0E00               	movlw	0
  8887   001E5C  6E05               	movwf	___fladd@b^0,c
  8888   001E5E  0E00               	movlw	0
  8889   001E60  6E06               	movwf	(___fladd@b+1)^0,c
  8890   001E62  0E00               	movlw	0
  8891   001E64  6E07               	movwf	(___fladd@b+2)^0,c
  8892   001E66  0E00               	movlw	0
  8893   001E68  6E08               	movwf	(___fladd@b+3)^0,c
  8894   001E6A  5013               	movf	___fladd@bexp^0,w,c
  8895   001E6C  A4D8               	btfss	status,2,c
  8896   001E6E  EF3B  F00F         	goto	u3551
  8897   001E72  EF3D  F00F         	goto	u3550
  8898   001E76                     u3551:
  8899   001E76  EF3F  F00F         	goto	l3708
  8900   001E7A                     u3550:
  8901   001E7A  0E00               	movlw	0
  8902   001E7C  6E11               	movwf	___fladd@signs^0,c
  8903   001E7E                     l3708:
  8904   001E7E  A013               	btfss	___fladd@bexp^0,0,c
  8905   001E80  EF44  F00F         	goto	u3561
  8906   001E84  EF46  F00F         	goto	u3560
  8907   001E88                     u3561:
  8908   001E88  EF49  F00F         	goto	l3712
  8909   001E8C                     u3560:
  8910   001E8C  8E07               	bsf	(___fladd@b+2)^0,7,c
  8911   001E8E  EF4A  F00F         	goto	l3714
  8912   001E92                     l3712:
  8913   001E92  9E07               	bcf	(___fladd@b+2)^0,7,c
  8914   001E94                     l3714:
  8915   001E94  90D8               	bcf	status,0,c
  8916   001E96  3013               	rrcf	___fladd@bexp^0,w,c
  8917   001E98  6E08               	movwf	(___fladd@b+3)^0,c
  8918   001E9A  AE11               	btfss	___fladd@signs^0,7,c
  8919   001E9C  EF52  F00F         	goto	u3571
  8920   001EA0  EF54  F00F         	goto	u3570
  8921   001EA4                     u3571:
  8922   001EA4  EF55  F00F         	goto	l3720
  8923   001EA8                     u3570:
  8924   001EA8  8E08               	bsf	(___fladd@b+3)^0,7,c
  8925   001EAA                     l3720:
  8926   001EAA  C005  F005         	movff	___fladd@b,?___fladd
  8927   001EAE  C006  F006         	movff	___fladd@b+1,?___fladd+1
  8928   001EB2  C007  F007         	movff	___fladd@b+2,?___fladd+2
  8929   001EB6  C008  F008         	movff	___fladd@b+3,?___fladd+3
  8930   001EBA                     l1089:
  8931   001EBA  0012               	return		;funcret
  8932   001EBC                     __end_of___fladd:
  8933                           	callstack 0
  8934                           
  8935 ;; *************** function ___flmul *****************
  8936 ;; Defined at:
  8937 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\sprcmul.c"
  8938 ;; Parameters:    Size  Location     Type
  8939 ;;  b               4   28[COMRAM] unsigned char 
  8940 ;;  a               4   32[COMRAM] unsigned char 
  8941 ;; Auto vars:     Size  Location     Type
  8942 ;;  prod            4   47[COMRAM] struct .
  8943 ;;  grs             4   41[COMRAM] unsigned long 
  8944 ;;  temp            2   51[COMRAM] struct .
  8945 ;;  bexp            1   46[COMRAM] unsigned char 
  8946 ;;  aexp            1   45[COMRAM] unsigned char 
  8947 ;;  sign            1   40[COMRAM] unsigned char 
  8948 ;; Return value:  Size  Location     Type
  8949 ;;                  4   28[COMRAM] unsigned char 
  8950 ;; Registers used:
  8951 ;;		wreg, status,2, status,0, prodl, prodh
  8952 ;; Tracked objects:
  8953 ;;		On entry : 0/0
  8954 ;;		On exit  : 0/0
  8955 ;;		Unchanged: 0/0
  8956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8957 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8958 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8959 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8960 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8961 ;;Total ram usage:       25 bytes
  8962 ;; Hardware stack levels used: 1
  8963 ;; Hardware stack levels required when called: 2
  8964 ;; This function calls:
  8965 ;;		Nothing
  8966 ;; This function is called by:
  8967 ;;		_colorDetect
  8968 ;;		_turnLeft_90
  8969 ;;		_turnRight_90
  8970 ;;		_turn_180
  8971 ;;		_turnRight_135
  8972 ;;		_turnLeft_135
  8973 ;;		_reverseSquareRight
  8974 ;;		_reverseSquareLeft
  8975 ;;		_turnLeft
  8976 ;;		_turnRight
  8977 ;; This function uses a non-reentrant model
  8978 ;;
  8979                           
  8980                           	psect	text40
  8981   0022EE                     __ptext40:
  8982                           	callstack 0
  8983   0022EE                     ___flmul:
  8984                           	callstack 27
  8985   0022EE  5020               	movf	(___flmul@b+3)^0,w,c
  8986   0022F0  0B80               	andlw	128
  8987   0022F2  6E29               	movwf	___flmul@sign^0,c
  8988   0022F4  5020               	movf	(___flmul@b+3)^0,w,c
  8989   0022F6  2420               	addwf	(___flmul@b+3)^0,w,c
  8990   0022F8  6E2F               	movwf	___flmul@bexp^0,c
  8991   0022FA  AE1F               	btfss	(___flmul@b+2)^0,7,c
  8992   0022FC  EF82  F011         	goto	u3941
  8993   002300  EF84  F011         	goto	u3940
  8994   002304                     u3941:
  8995   002304  EF85  F011         	goto	l4044
  8996   002308                     u3940:
  8997   002308  802F               	bsf	___flmul@bexp^0,0,c
  8998   00230A                     l4044:
  8999   00230A  502F               	movf	___flmul@bexp^0,w,c
  9000   00230C  B4D8               	btfsc	status,2,c
  9001   00230E  EF8B  F011         	goto	u3951
  9002   002312  EF8D  F011         	goto	u3950
  9003   002316                     u3951:
  9004   002316  EFA0  F011         	goto	l4052
  9005   00231A                     u3950:
  9006   00231A  282F               	incf	___flmul@bexp^0,w,c
  9007   00231C  A4D8               	btfss	status,2,c
  9008   00231E  EF93  F011         	goto	u3961
  9009   002322  EF95  F011         	goto	u3960
  9010   002326                     u3961:
  9011   002326  EF9D  F011         	goto	l4050
  9012   00232A                     u3960:
  9013   00232A  0E00               	movlw	0
  9014   00232C  6E1D               	movwf	___flmul@b^0,c
  9015   00232E  0E00               	movlw	0
  9016   002330  6E1E               	movwf	(___flmul@b+1)^0,c
  9017   002332  0E00               	movlw	0
  9018   002334  6E1F               	movwf	(___flmul@b+2)^0,c
  9019   002336  0E00               	movlw	0
  9020   002338  6E20               	movwf	(___flmul@b+3)^0,c
  9021   00233A                     l4050:
  9022   00233A  8E1F               	bsf	(___flmul@b+2)^0,7,c
  9023   00233C  EFA8  F011         	goto	l4054
  9024   002340                     l4052:
  9025   002340  0E00               	movlw	0
  9026   002342  6E1D               	movwf	___flmul@b^0,c
  9027   002344  0E00               	movlw	0
  9028   002346  6E1E               	movwf	(___flmul@b+1)^0,c
  9029   002348  0E00               	movlw	0
  9030   00234A  6E1F               	movwf	(___flmul@b+2)^0,c
  9031   00234C  0E00               	movlw	0
  9032   00234E  6E20               	movwf	(___flmul@b+3)^0,c
  9033   002350                     l4054:
  9034   002350  5024               	movf	(___flmul@a+3)^0,w,c
  9035   002352  0B80               	andlw	128
  9036   002354  1A29               	xorwf	___flmul@sign^0,f,c
  9037   002356  5024               	movf	(___flmul@a+3)^0,w,c
  9038   002358  2424               	addwf	(___flmul@a+3)^0,w,c
  9039   00235A  6E2E               	movwf	___flmul@aexp^0,c
  9040   00235C  AE23               	btfss	(___flmul@a+2)^0,7,c
  9041   00235E  EFB3  F011         	goto	u3971
  9042   002362  EFB5  F011         	goto	u3970
  9043   002366                     u3971:
  9044   002366  EFB6  F011         	goto	l4062
  9045   00236A                     u3970:
  9046   00236A  802E               	bsf	___flmul@aexp^0,0,c
  9047   00236C                     l4062:
  9048   00236C  502E               	movf	___flmul@aexp^0,w,c
  9049   00236E  B4D8               	btfsc	status,2,c
  9050   002370  EFBC  F011         	goto	u3981
  9051   002374  EFBE  F011         	goto	u3980
  9052   002378                     u3981:
  9053   002378  EFD1  F011         	goto	l4070
  9054   00237C                     u3980:
  9055   00237C  282E               	incf	___flmul@aexp^0,w,c
  9056   00237E  A4D8               	btfss	status,2,c
  9057   002380  EFC4  F011         	goto	u3991
  9058   002384  EFC6  F011         	goto	u3990
  9059   002388                     u3991:
  9060   002388  EFCE  F011         	goto	l4068
  9061   00238C                     u3990:
  9062   00238C  0E00               	movlw	0
  9063   00238E  6E21               	movwf	___flmul@a^0,c
  9064   002390  0E00               	movlw	0
  9065   002392  6E22               	movwf	(___flmul@a+1)^0,c
  9066   002394  0E00               	movlw	0
  9067   002396  6E23               	movwf	(___flmul@a+2)^0,c
  9068   002398  0E00               	movlw	0
  9069   00239A  6E24               	movwf	(___flmul@a+3)^0,c
  9070   00239C                     l4068:
  9071   00239C  8E23               	bsf	(___flmul@a+2)^0,7,c
  9072   00239E  EFD9  F011         	goto	l1166
  9073   0023A2                     l4070:
  9074   0023A2  0E00               	movlw	0
  9075   0023A4  6E21               	movwf	___flmul@a^0,c
  9076   0023A6  0E00               	movlw	0
  9077   0023A8  6E22               	movwf	(___flmul@a+1)^0,c
  9078   0023AA  0E00               	movlw	0
  9079   0023AC  6E23               	movwf	(___flmul@a+2)^0,c
  9080   0023AE  0E00               	movlw	0
  9081   0023B0  6E24               	movwf	(___flmul@a+3)^0,c
  9082   0023B2                     l1166:
  9083   0023B2  502E               	movf	___flmul@aexp^0,w,c
  9084   0023B4  B4D8               	btfsc	status,2,c
  9085   0023B6  EFDF  F011         	goto	u4001
  9086   0023BA  EFE1  F011         	goto	u4000
  9087   0023BE                     u4001:
  9088   0023BE  EFE9  F011         	goto	l4074
  9089   0023C2                     u4000:
  9090   0023C2  502F               	movf	___flmul@bexp^0,w,c
  9091   0023C4  A4D8               	btfss	status,2,c
  9092   0023C6  EFE7  F011         	goto	u4011
  9093   0023CA  EFE9  F011         	goto	u4010
  9094   0023CE                     u4011:
  9095   0023CE  EFF3  F011         	goto	l4078
  9096   0023D2                     u4010:
  9097   0023D2                     l4074:
  9098   0023D2  0E00               	movlw	0
  9099   0023D4  6E1D               	movwf	?___flmul^0,c
  9100   0023D6  0E00               	movlw	0
  9101   0023D8  6E1E               	movwf	(?___flmul+1)^0,c
  9102   0023DA  0E00               	movlw	0
  9103   0023DC  6E1F               	movwf	(?___flmul+2)^0,c
  9104   0023DE  0E00               	movlw	0
  9105   0023E0  6E20               	movwf	(?___flmul+3)^0,c
  9106   0023E2  EF8B  F013         	goto	l1170
  9107   0023E6                     l4078:
  9108   0023E6  5023               	movf	(___flmul@a+2)^0,w,c
  9109   0023E8  021D               	mulwf	___flmul@b^0,c
  9110   0023EA  CFF3 F034          	movff	prodl,___flmul@temp
  9111   0023EE  CFF4 F035          	movff	prodh,___flmul@temp+1
  9112   0023F2  5034               	movf	___flmul@temp^0,w,c
  9113   0023F4  6E2A               	movwf	___flmul@grs^0,c
  9114   0023F6  6A2B               	clrf	(___flmul@grs+1)^0,c
  9115   0023F8  6A2C               	clrf	(___flmul@grs+2)^0,c
  9116   0023FA  6A2D               	clrf	(___flmul@grs+3)^0,c
  9117   0023FC  5035               	movf	(___flmul@temp+1)^0,w,c
  9118   0023FE  6E30               	movwf	___flmul@prod^0,c
  9119   002400  6A31               	clrf	(___flmul@prod+1)^0,c
  9120   002402  6A32               	clrf	(___flmul@prod+2)^0,c
  9121   002404  6A33               	clrf	(___flmul@prod+3)^0,c
  9122   002406  5022               	movf	(___flmul@a+1)^0,w,c
  9123   002408  021E               	mulwf	(___flmul@b+1)^0,c
  9124   00240A  CFF3 F034          	movff	prodl,___flmul@temp
  9125   00240E  CFF4 F035          	movff	prodh,___flmul@temp+1
  9126   002412  5034               	movf	___flmul@temp^0,w,c
  9127   002414  262A               	addwf	___flmul@grs^0,f,c
  9128   002416  0E00               	movlw	0
  9129   002418  222B               	addwfc	(___flmul@grs+1)^0,f,c
  9130   00241A  222C               	addwfc	(___flmul@grs+2)^0,f,c
  9131   00241C  222D               	addwfc	(___flmul@grs+3)^0,f,c
  9132   00241E  5035               	movf	(___flmul@temp+1)^0,w,c
  9133   002420  2630               	addwf	___flmul@prod^0,f,c
  9134   002422  0E00               	movlw	0
  9135   002424  2231               	addwfc	(___flmul@prod+1)^0,f,c
  9136   002426  2232               	addwfc	(___flmul@prod+2)^0,f,c
  9137   002428  2233               	addwfc	(___flmul@prod+3)^0,f,c
  9138   00242A  5021               	movf	___flmul@a^0,w,c
  9139   00242C  021F               	mulwf	(___flmul@b+2)^0,c
  9140   00242E  CFF3 F034          	movff	prodl,___flmul@temp
  9141   002432  CFF4 F035          	movff	prodh,___flmul@temp+1
  9142   002436  5034               	movf	___flmul@temp^0,w,c
  9143   002438  262A               	addwf	___flmul@grs^0,f,c
  9144   00243A  0E00               	movlw	0
  9145   00243C  222B               	addwfc	(___flmul@grs+1)^0,f,c
  9146   00243E  222C               	addwfc	(___flmul@grs+2)^0,f,c
  9147   002440  222D               	addwfc	(___flmul@grs+3)^0,f,c
  9148   002442  5035               	movf	(___flmul@temp+1)^0,w,c
  9149   002444  2630               	addwf	___flmul@prod^0,f,c
  9150   002446  0E00               	movlw	0
  9151   002448  2231               	addwfc	(___flmul@prod+1)^0,f,c
  9152   00244A  2232               	addwfc	(___flmul@prod+2)^0,f,c
  9153   00244C  2233               	addwfc	(___flmul@prod+3)^0,f,c
  9154   00244E  C02C  F02D         	movff	___flmul@grs+2,___flmul@grs+3
  9155   002452  C02B  F02C         	movff	___flmul@grs+1,___flmul@grs+2
  9156   002456  C02A  F02B         	movff	___flmul@grs,___flmul@grs+1
  9157   00245A  6A2A               	clrf	___flmul@grs^0,c
  9158   00245C  5021               	movf	___flmul@a^0,w,c
  9159   00245E  021E               	mulwf	(___flmul@b+1)^0,c
  9160   002460  CFF3 F034          	movff	prodl,___flmul@temp
  9161   002464  CFF4 F035          	movff	prodh,___flmul@temp+1
  9162   002468  5034               	movf	___flmul@temp^0,w,c
  9163   00246A  262A               	addwf	___flmul@grs^0,f,c
  9164   00246C  5035               	movf	(___flmul@temp+1)^0,w,c
  9165   00246E  222B               	addwfc	(___flmul@grs+1)^0,f,c
  9166   002470  0E00               	movlw	0
  9167   002472  222C               	addwfc	(___flmul@grs+2)^0,f,c
  9168   002474  0E00               	movlw	0
  9169   002476  222D               	addwfc	(___flmul@grs+3)^0,f,c
  9170   002478  5022               	movf	(___flmul@a+1)^0,w,c
  9171   00247A  021D               	mulwf	___flmul@b^0,c
  9172   00247C  CFF3 F034          	movff	prodl,___flmul@temp
  9173   002480  CFF4 F035          	movff	prodh,___flmul@temp+1
  9174   002484  5034               	movf	___flmul@temp^0,w,c
  9175   002486  262A               	addwf	___flmul@grs^0,f,c
  9176   002488  5035               	movf	(___flmul@temp+1)^0,w,c
  9177   00248A  222B               	addwfc	(___flmul@grs+1)^0,f,c
  9178   00248C  0E00               	movlw	0
  9179   00248E  222C               	addwfc	(___flmul@grs+2)^0,f,c
  9180   002490  0E00               	movlw	0
  9181   002492  222D               	addwfc	(___flmul@grs+3)^0,f,c
  9182   002494  C02C  F02D         	movff	___flmul@grs+2,___flmul@grs+3
  9183   002498  C02B  F02C         	movff	___flmul@grs+1,___flmul@grs+2
  9184   00249C  C02A  F02B         	movff	___flmul@grs,___flmul@grs+1
  9185   0024A0  6A2A               	clrf	___flmul@grs^0,c
  9186   0024A2  5021               	movf	___flmul@a^0,w,c
  9187   0024A4  021D               	mulwf	___flmul@b^0,c
  9188   0024A6  CFF3 F034          	movff	prodl,___flmul@temp
  9189   0024AA  CFF4 F035          	movff	prodh,___flmul@temp+1
  9190   0024AE  5034               	movf	___flmul@temp^0,w,c
  9191   0024B0  262A               	addwf	___flmul@grs^0,f,c
  9192   0024B2  5035               	movf	(___flmul@temp+1)^0,w,c
  9193   0024B4  222B               	addwfc	(___flmul@grs+1)^0,f,c
  9194   0024B6  0E00               	movlw	0
  9195   0024B8  222C               	addwfc	(___flmul@grs+2)^0,f,c
  9196   0024BA  0E00               	movlw	0
  9197   0024BC  222D               	addwfc	(___flmul@grs+3)^0,f,c
  9198   0024BE  5023               	movf	(___flmul@a+2)^0,w,c
  9199   0024C0  021E               	mulwf	(___flmul@b+1)^0,c
  9200   0024C2  CFF3 F034          	movff	prodl,___flmul@temp
  9201   0024C6  CFF4 F035          	movff	prodh,___flmul@temp+1
  9202   0024CA  5034               	movf	___flmul@temp^0,w,c
  9203   0024CC  2630               	addwf	___flmul@prod^0,f,c
  9204   0024CE  5035               	movf	(___flmul@temp+1)^0,w,c
  9205   0024D0  2231               	addwfc	(___flmul@prod+1)^0,f,c
  9206   0024D2  0E00               	movlw	0
  9207   0024D4  2232               	addwfc	(___flmul@prod+2)^0,f,c
  9208   0024D6  0E00               	movlw	0
  9209   0024D8  2233               	addwfc	(___flmul@prod+3)^0,f,c
  9210   0024DA  5022               	movf	(___flmul@a+1)^0,w,c
  9211   0024DC  021F               	mulwf	(___flmul@b+2)^0,c
  9212   0024DE  CFF3 F034          	movff	prodl,___flmul@temp
  9213   0024E2  CFF4 F035          	movff	prodh,___flmul@temp+1
  9214   0024E6  5034               	movf	___flmul@temp^0,w,c
  9215   0024E8  2630               	addwf	___flmul@prod^0,f,c
  9216   0024EA  5035               	movf	(___flmul@temp+1)^0,w,c
  9217   0024EC  2231               	addwfc	(___flmul@prod+1)^0,f,c
  9218   0024EE  0E00               	movlw	0
  9219   0024F0  2232               	addwfc	(___flmul@prod+2)^0,f,c
  9220   0024F2  0E00               	movlw	0
  9221   0024F4  2233               	addwfc	(___flmul@prod+3)^0,f,c
  9222   0024F6  5023               	movf	(___flmul@a+2)^0,w,c
  9223   0024F8  021F               	mulwf	(___flmul@b+2)^0,c
  9224   0024FA  CFF3 F034          	movff	prodl,___flmul@temp
  9225   0024FE  CFF4 F035          	movff	prodh,___flmul@temp+1
  9226   002502  5034               	movf	___flmul@temp^0,w,c
  9227   002504  6E25               	movwf	??___flmul^0,c
  9228   002506  5035               	movf	(___flmul@temp+1)^0,w,c
  9229   002508  6E26               	movwf	(??___flmul+1)^0,c
  9230   00250A  6A27               	clrf	(??___flmul+2)^0,c
  9231   00250C  6A28               	clrf	(??___flmul+3)^0,c
  9232   00250E  C027  F028         	movff	??___flmul+2,??___flmul+3
  9233   002512  C026  F027         	movff	??___flmul+1,??___flmul+2
  9234   002516  C025  F026         	movff	??___flmul,??___flmul+1
  9235   00251A  6A25               	clrf	??___flmul^0,c
  9236   00251C  5025               	movf	??___flmul^0,w,c
  9237   00251E  2630               	addwf	___flmul@prod^0,f,c
  9238   002520  5026               	movf	(??___flmul+1)^0,w,c
  9239   002522  2231               	addwfc	(___flmul@prod+1)^0,f,c
  9240   002524  5027               	movf	(??___flmul+2)^0,w,c
  9241   002526  2232               	addwfc	(___flmul@prod+2)^0,f,c
  9242   002528  5028               	movf	(??___flmul+3)^0,w,c
  9243   00252A  2233               	addwfc	(___flmul@prod+3)^0,f,c
  9244   00252C  C02A  F025         	movff	___flmul@grs,??___flmul
  9245   002530  C02B  F026         	movff	___flmul@grs+1,??___flmul+1
  9246   002534  C02C  F027         	movff	___flmul@grs+2,??___flmul+2
  9247   002538  C02D  F028         	movff	___flmul@grs+3,??___flmul+3
  9248   00253C  0E19               	movlw	25
  9249   00253E  EFA6  F012         	goto	u4020
  9250   002542                     u4025:
  9251   002542  90D8               	bcf	status,0,c
  9252   002544  3228               	rrcf	(??___flmul+3)^0,f,c
  9253   002546  3227               	rrcf	(??___flmul+2)^0,f,c
  9254   002548  3226               	rrcf	(??___flmul+1)^0,f,c
  9255   00254A  3225               	rrcf	??___flmul^0,f,c
  9256   00254C                     u4020:
  9257   00254C  2EE8               	decfsz	wreg,f,c
  9258   00254E  EFA1  F012         	goto	u4025
  9259   002552  5025               	movf	??___flmul^0,w,c
  9260   002554  2630               	addwf	___flmul@prod^0,f,c
  9261   002556  5026               	movf	(??___flmul+1)^0,w,c
  9262   002558  2231               	addwfc	(___flmul@prod+1)^0,f,c
  9263   00255A  5027               	movf	(??___flmul+2)^0,w,c
  9264   00255C  2232               	addwfc	(___flmul@prod+2)^0,f,c
  9265   00255E  5028               	movf	(??___flmul+3)^0,w,c
  9266   002560  2233               	addwfc	(___flmul@prod+3)^0,f,c
  9267   002562  C02C  F02D         	movff	___flmul@grs+2,___flmul@grs+3
  9268   002566  C02B  F02C         	movff	___flmul@grs+1,___flmul@grs+2
  9269   00256A  C02A  F02B         	movff	___flmul@grs,___flmul@grs+1
  9270   00256E  6A2A               	clrf	___flmul@grs^0,c
  9271   002570  502E               	movf	___flmul@aexp^0,w,c
  9272   002572  C02F  F025         	movff	___flmul@bexp,??___flmul
  9273   002576  6A26               	clrf	(??___flmul+1)^0,c
  9274   002578  2625               	addwf	??___flmul^0,f,c
  9275   00257A  0E00               	movlw	0
  9276   00257C  2226               	addwfc	(??___flmul+1)^0,f,c
  9277   00257E  0E82               	movlw	130
  9278   002580  2425               	addwf	??___flmul^0,w,c
  9279   002582  6E34               	movwf	___flmul@temp^0,c
  9280   002584  0EFF               	movlw	255
  9281   002586  2026               	addwfc	(??___flmul+1)^0,w,c
  9282   002588  6E35               	movwf	(___flmul@temp+1)^0,c
  9283   00258A  EFDC  F012         	goto	l4126
  9284   00258E                     l4120:
  9285   00258E  90D8               	bcf	status,0,c
  9286   002590  3630               	rlcf	___flmul@prod^0,f,c
  9287   002592  3631               	rlcf	(___flmul@prod+1)^0,f,c
  9288   002594  3632               	rlcf	(___flmul@prod+2)^0,f,c
  9289   002596  3633               	rlcf	(___flmul@prod+3)^0,f,c
  9290   002598  AE2D               	btfss	(___flmul@grs+3)^0,7,c
  9291   00259A  EFD1  F012         	goto	u4031
  9292   00259E  EFD3  F012         	goto	u4030
  9293   0025A2                     u4031:
  9294   0025A2  EFD4  F012         	goto	l1173
  9295   0025A6                     u4030:
  9296   0025A6  8030               	bsf	___flmul@prod^0,0,c
  9297   0025A8                     l1173:
  9298   0025A8  90D8               	bcf	status,0,c
  9299   0025AA  362A               	rlcf	___flmul@grs^0,f,c
  9300   0025AC  362B               	rlcf	(___flmul@grs+1)^0,f,c
  9301   0025AE  362C               	rlcf	(___flmul@grs+2)^0,f,c
  9302   0025B0  362D               	rlcf	(___flmul@grs+3)^0,f,c
  9303   0025B2  0634               	decf	___flmul@temp^0,f,c
  9304   0025B4  A0D8               	btfss	status,0,c
  9305   0025B6  0635               	decf	(___flmul@temp+1)^0,f,c
  9306   0025B8                     l4126:
  9307   0025B8  AE32               	btfss	(___flmul@prod+2)^0,7,c
  9308   0025BA  EFE1  F012         	goto	u4041
  9309   0025BE  EFE3  F012         	goto	u4040
  9310   0025C2                     u4041:
  9311   0025C2  EFC7  F012         	goto	l4120
  9312   0025C6                     u4040:
  9313   0025C6  0E00               	movlw	0
  9314   0025C8  6E2E               	movwf	___flmul@aexp^0,c
  9315   0025CA  AE2D               	btfss	(___flmul@grs+3)^0,7,c
  9316   0025CC  EFEA  F012         	goto	u4051
  9317   0025D0  EFEC  F012         	goto	u4050
  9318   0025D4                     u4051:
  9319   0025D4  EF10  F013         	goto	l1175
  9320   0025D8                     u4050:
  9321   0025D8  0EFF               	movlw	255
  9322   0025DA  142A               	andwf	___flmul@grs^0,w,c
  9323   0025DC  6E25               	movwf	??___flmul^0,c
  9324   0025DE  0EFF               	movlw	255
  9325   0025E0  142B               	andwf	(___flmul@grs+1)^0,w,c
  9326   0025E2  6E26               	movwf	(??___flmul+1)^0,c
  9327   0025E4  0EFF               	movlw	255
  9328   0025E6  142C               	andwf	(___flmul@grs+2)^0,w,c
  9329   0025E8  6E27               	movwf	(??___flmul+2)^0,c
  9330   0025EA  0E7F               	movlw	127
  9331   0025EC  142D               	andwf	(___flmul@grs+3)^0,w,c
  9332   0025EE  6E28               	movwf	(??___flmul+3)^0,c
  9333   0025F0  5025               	movf	??___flmul^0,w,c
  9334   0025F2  1026               	iorwf	(??___flmul+1)^0,w,c
  9335   0025F4  1027               	iorwf	(??___flmul+2)^0,w,c
  9336   0025F6  1028               	iorwf	(??___flmul+3)^0,w,c
  9337   0025F8  B4D8               	btfsc	status,2,c
  9338   0025FA  EF01  F013         	goto	u4061
  9339   0025FE  EF03  F013         	goto	u4060
  9340   002602                     u4061:
  9341   002602  EF07  F013         	goto	l1176
  9342   002606                     u4060:
  9343   002606                     l4134:
  9344   002606  0E01               	movlw	1
  9345   002608  6E2E               	movwf	___flmul@aexp^0,c
  9346   00260A  EF10  F013         	goto	l1175
  9347   00260E                     l1176:
  9348   00260E  A030               	btfss	___flmul@prod^0,0,c
  9349   002610  EF0C  F013         	goto	u4071
  9350   002614  EF0E  F013         	goto	u4070
  9351   002618                     u4071:
  9352   002618  EF10  F013         	goto	l1175
  9353   00261C                     u4070:
  9354   00261C  EF03  F013         	goto	l4134
  9355   002620                     l1175:
  9356   002620  502E               	movf	___flmul@aexp^0,w,c
  9357   002622  B4D8               	btfsc	status,2,c
  9358   002624  EF16  F013         	goto	u4081
  9359   002628  EF18  F013         	goto	u4080
  9360   00262C                     u4081:
  9361   00262C  EF3C  F013         	goto	l4146
  9362   002630                     u4080:
  9363   002630  0E01               	movlw	1
  9364   002632  2630               	addwf	___flmul@prod^0,f,c
  9365   002634  0E00               	movlw	0
  9366   002636  2231               	addwfc	(___flmul@prod+1)^0,f,c
  9367   002638  2232               	addwfc	(___flmul@prod+2)^0,f,c
  9368   00263A  2233               	addwfc	(___flmul@prod+3)^0,f,c
  9369   00263C  A033               	btfss	(___flmul@prod+3)^0,0,c
  9370   00263E  EF23  F013         	goto	u4091
  9371   002642  EF25  F013         	goto	u4090
  9372   002646                     u4091:
  9373   002646  EF3C  F013         	goto	l4146
  9374   00264A                     u4090:
  9375   00264A  C030  F025         	movff	___flmul@prod,??___flmul
  9376   00264E  C031  F026         	movff	___flmul@prod+1,??___flmul+1
  9377   002652  C032  F027         	movff	___flmul@prod+2,??___flmul+2
  9378   002656  C033  F028         	movff	___flmul@prod+3,??___flmul+3
  9379   00265A  3428               	rlcf	(??___flmul+3)^0,w,c
  9380   00265C  3228               	rrcf	(??___flmul+3)^0,f,c
  9381   00265E  3227               	rrcf	(??___flmul+2)^0,f,c
  9382   002660  3226               	rrcf	(??___flmul+1)^0,f,c
  9383   002662  3225               	rrcf	??___flmul^0,f,c
  9384   002664  C025  F030         	movff	??___flmul,___flmul@prod
  9385   002668  C026  F031         	movff	??___flmul+1,___flmul@prod+1
  9386   00266C  C027  F032         	movff	??___flmul+2,___flmul@prod+2
  9387   002670  C028  F033         	movff	??___flmul+3,___flmul@prod+3
  9388   002674  4A34               	infsnz	___flmul@temp^0,f,c
  9389   002676  2A35               	incf	(___flmul@temp+1)^0,f,c
  9390   002678                     l4146:
  9391   002678  BE35               	btfsc	(___flmul@temp+1)^0,7,c
  9392   00267A  EF47  F013         	goto	u4101
  9393   00267E  5035               	movf	(___flmul@temp+1)^0,w,c
  9394   002680  E108               	bnz	u4100
  9395   002682  2834               	incf	___flmul@temp^0,w,c
  9396   002684  A0D8               	btfss	status,0,c
  9397   002686  EF47  F013         	goto	u4101
  9398   00268A  EF49  F013         	goto	u4100
  9399   00268E                     u4101:
  9400   00268E  EF53  F013         	goto	l4150
  9401   002692                     u4100:
  9402   002692  0E00               	movlw	0
  9403   002694  6E30               	movwf	___flmul@prod^0,c
  9404   002696  0E00               	movlw	0
  9405   002698  6E31               	movwf	(___flmul@prod+1)^0,c
  9406   00269A  0E80               	movlw	128
  9407   00269C  6E32               	movwf	(___flmul@prod+2)^0,c
  9408   00269E  0E7F               	movlw	127
  9409   0026A0  6E33               	movwf	(___flmul@prod+3)^0,c
  9410   0026A2  EF81  F013         	goto	l4162
  9411   0026A6                     l4150:
  9412   0026A6  BE35               	btfsc	(___flmul@temp+1)^0,7,c
  9413   0026A8  EF60  F013         	goto	u4110
  9414   0026AC  5035               	movf	(___flmul@temp+1)^0,w,c
  9415   0026AE  E106               	bnz	u4111
  9416   0026B0  0434               	decf	___flmul@temp^0,w,c
  9417   0026B2  B0D8               	btfsc	status,0,c
  9418   0026B4  EF5E  F013         	goto	u4111
  9419   0026B8  EF60  F013         	goto	u4110
  9420   0026BC                     u4111:
  9421   0026BC  EF6C  F013         	goto	l1183
  9422   0026C0                     u4110:
  9423   0026C0  0E00               	movlw	0
  9424   0026C2  6E30               	movwf	___flmul@prod^0,c
  9425   0026C4  0E00               	movlw	0
  9426   0026C6  6E31               	movwf	(___flmul@prod+1)^0,c
  9427   0026C8  0E00               	movlw	0
  9428   0026CA  6E32               	movwf	(___flmul@prod+2)^0,c
  9429   0026CC  0E00               	movlw	0
  9430   0026CE  6E33               	movwf	(___flmul@prod+3)^0,c
  9431   0026D0  0E00               	movlw	0
  9432   0026D2  6E29               	movwf	___flmul@sign^0,c
  9433   0026D4  EF81  F013         	goto	l4162
  9434   0026D8                     l1183:
  9435   0026D8  C034  F02F         	movff	___flmul@temp,___flmul@bexp
  9436   0026DC  0EFF               	movlw	255
  9437   0026DE  1630               	andwf	___flmul@prod^0,f,c
  9438   0026E0  0EFF               	movlw	255
  9439   0026E2  1631               	andwf	(___flmul@prod+1)^0,f,c
  9440   0026E4  0E7F               	movlw	127
  9441   0026E6  1632               	andwf	(___flmul@prod+2)^0,f,c
  9442   0026E8  0E00               	movlw	0
  9443   0026EA  1633               	andwf	(___flmul@prod+3)^0,f,c
  9444   0026EC  A02F               	btfss	___flmul@bexp^0,0,c
  9445   0026EE  EF7B  F013         	goto	u4121
  9446   0026F2  EF7D  F013         	goto	u4120
  9447   0026F6                     u4121:
  9448   0026F6  EF7E  F013         	goto	l4160
  9449   0026FA                     u4120:
  9450   0026FA  8E32               	bsf	(___flmul@prod+2)^0,7,c
  9451   0026FC                     l4160:
  9452   0026FC  90D8               	bcf	status,0,c
  9453   0026FE  302F               	rrcf	___flmul@bexp^0,w,c
  9454   002700  6E33               	movwf	(___flmul@prod+3)^0,c
  9455   002702                     l4162:
  9456   002702  5029               	movf	___flmul@sign^0,w,c
  9457   002704  1233               	iorwf	(___flmul@prod+3)^0,f,c
  9458   002706  C030  F01D         	movff	___flmul@prod,?___flmul
  9459   00270A  C031  F01E         	movff	___flmul@prod+1,?___flmul+1
  9460   00270E  C032  F01F         	movff	___flmul@prod+2,?___flmul+2
  9461   002712  C033  F020         	movff	___flmul@prod+3,?___flmul+3
  9462   002716                     l1170:
  9463   002716  0012               	return		;funcret
  9464   002718                     __end_of___flmul:
  9465                           	callstack 0
  9466                           
  9467 ;; *************** function ___flge *****************
  9468 ;; Defined at:
  9469 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\flge.c"
  9470 ;; Parameters:    Size  Location     Type
  9471 ;;  ff1             4   28[COMRAM] unsigned char 
  9472 ;;  ff2             4   32[COMRAM] unsigned char 
  9473 ;; Auto vars:     Size  Location     Type
  9474 ;;		None
  9475 ;; Return value:  Size  Location     Type
  9476 ;;		None               void
  9477 ;; Registers used:
  9478 ;;		wreg, status,2, status,0
  9479 ;; Tracked objects:
  9480 ;;		On entry : 0/0
  9481 ;;		On exit  : 0/0
  9482 ;;		Unchanged: 0/0
  9483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9484 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9485 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9486 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9487 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9488 ;;Total ram usage:       12 bytes
  9489 ;; Hardware stack levels used: 1
  9490 ;; Hardware stack levels required when called: 2
  9491 ;; This function calls:
  9492 ;;		Nothing
  9493 ;; This function is called by:
  9494 ;;		_colorDetect
  9495 ;;		_main
  9496 ;; This function uses a non-reentrant model
  9497 ;;
  9498                           
  9499                           	psect	text41
  9500   003D28                     __ptext41:
  9501                           	callstack 0
  9502   003D28                     ___flge:
  9503                           	callstack 27
  9504   003D28  0E00               	movlw	0
  9505   003D2A  141D               	andwf	___flge@ff1^0,w,c
  9506   003D2C  6E25               	movwf	??___flge^0,c
  9507   003D2E  0E00               	movlw	0
  9508   003D30  141E               	andwf	(___flge@ff1+1)^0,w,c
  9509   003D32  6E26               	movwf	(??___flge+1)^0,c
  9510   003D34  0E80               	movlw	128
  9511   003D36  141F               	andwf	(___flge@ff1+2)^0,w,c
  9512   003D38  6E27               	movwf	(??___flge+2)^0,c
  9513   003D3A  0E7F               	movlw	127
  9514   003D3C  1420               	andwf	(___flge@ff1+3)^0,w,c
  9515   003D3E  6E28               	movwf	(??___flge+3)^0,c
  9516   003D40  5025               	movf	??___flge^0,w,c
  9517   003D42  1026               	iorwf	(??___flge+1)^0,w,c
  9518   003D44  1027               	iorwf	(??___flge+2)^0,w,c
  9519   003D46  1028               	iorwf	(??___flge+3)^0,w,c
  9520   003D48  A4D8               	btfss	status,2,c
  9521   003D4A  EFA9  F01E         	goto	u4131
  9522   003D4E  EFAB  F01E         	goto	u4130
  9523   003D52                     u4131:
  9524   003D52  EFB3  F01E         	goto	l4178
  9525   003D56                     u4130:
  9526   003D56  0E00               	movlw	0
  9527   003D58  6E1D               	movwf	___flge@ff1^0,c
  9528   003D5A  0E00               	movlw	0
  9529   003D5C  6E1E               	movwf	(___flge@ff1+1)^0,c
  9530   003D5E  0E00               	movlw	0
  9531   003D60  6E1F               	movwf	(___flge@ff1+2)^0,c
  9532   003D62  0E00               	movlw	0
  9533   003D64  6E20               	movwf	(___flge@ff1+3)^0,c
  9534   003D66                     l4178:
  9535   003D66  0E00               	movlw	0
  9536   003D68  1421               	andwf	___flge@ff2^0,w,c
  9537   003D6A  6E25               	movwf	??___flge^0,c
  9538   003D6C  0E00               	movlw	0
  9539   003D6E  1422               	andwf	(___flge@ff2+1)^0,w,c
  9540   003D70  6E26               	movwf	(??___flge+1)^0,c
  9541   003D72  0E80               	movlw	128
  9542   003D74  1423               	andwf	(___flge@ff2+2)^0,w,c
  9543   003D76  6E27               	movwf	(??___flge+2)^0,c
  9544   003D78  0E7F               	movlw	127
  9545   003D7A  1424               	andwf	(___flge@ff2+3)^0,w,c
  9546   003D7C  6E28               	movwf	(??___flge+3)^0,c
  9547   003D7E  5025               	movf	??___flge^0,w,c
  9548   003D80  1026               	iorwf	(??___flge+1)^0,w,c
  9549   003D82  1027               	iorwf	(??___flge+2)^0,w,c
  9550   003D84  1028               	iorwf	(??___flge+3)^0,w,c
  9551   003D86  A4D8               	btfss	status,2,c
  9552   003D88  EFC8  F01E         	goto	u4141
  9553   003D8C  EFCA  F01E         	goto	u4140
  9554   003D90                     u4141:
  9555   003D90  EFD2  F01E         	goto	l4182
  9556   003D94                     u4140:
  9557   003D94  0E00               	movlw	0
  9558   003D96  6E21               	movwf	___flge@ff2^0,c
  9559   003D98  0E00               	movlw	0
  9560   003D9A  6E22               	movwf	(___flge@ff2+1)^0,c
  9561   003D9C  0E00               	movlw	0
  9562   003D9E  6E23               	movwf	(___flge@ff2+2)^0,c
  9563   003DA0  0E00               	movlw	0
  9564   003DA2  6E24               	movwf	(___flge@ff2+3)^0,c
  9565   003DA4                     l4182:
  9566   003DA4  AE20               	btfss	(___flge@ff1+3)^0,7,c
  9567   003DA6  EFD7  F01E         	goto	u4151
  9568   003DAA  EFD9  F01E         	goto	u4150
  9569   003DAE                     u4151:
  9570   003DAE  EFE2  F01E         	goto	l4186
  9571   003DB2                     u4150:
  9572   003DB2  6C1D               	negf	___flge@ff1^0,c
  9573   003DB4  1E1E               	comf	(___flge@ff1+1)^0,f,c
  9574   003DB6  B0D8               	btfsc	status,0,c
  9575   003DB8  2A1E               	incf	(___flge@ff1+1)^0,f,c
  9576   003DBA  1E1F               	comf	(___flge@ff1+2)^0,f,c
  9577   003DBC  B0D8               	btfsc	status,0,c
  9578   003DBE  2A1F               	incf	(___flge@ff1+2)^0,f,c
  9579   003DC0  0E80               	movlw	128
  9580   003DC2  5620               	subfwb	(___flge@ff1+3)^0,f,c
  9581   003DC4                     l4186:
  9582   003DC4  AE24               	btfss	(___flge@ff2+3)^0,7,c
  9583   003DC6  EFE7  F01E         	goto	u4161
  9584   003DCA  EFE9  F01E         	goto	u4160
  9585   003DCE                     u4161:
  9586   003DCE  EFF2  F01E         	goto	l817
  9587   003DD2                     u4160:
  9588   003DD2  6C21               	negf	___flge@ff2^0,c
  9589   003DD4  1E22               	comf	(___flge@ff2+1)^0,f,c
  9590   003DD6  B0D8               	btfsc	status,0,c
  9591   003DD8  2A22               	incf	(___flge@ff2+1)^0,f,c
  9592   003DDA  1E23               	comf	(___flge@ff2+2)^0,f,c
  9593   003DDC  B0D8               	btfsc	status,0,c
  9594   003DDE  2A23               	incf	(___flge@ff2+2)^0,f,c
  9595   003DE0  0E80               	movlw	128
  9596   003DE2  5624               	subfwb	(___flge@ff2+3)^0,f,c
  9597   003DE4                     l817:
  9598   003DE4  0E00               	movlw	0
  9599   003DE6  1A1D               	xorwf	___flge@ff1^0,f,c
  9600   003DE8  0E00               	movlw	0
  9601   003DEA  1A1E               	xorwf	(___flge@ff1+1)^0,f,c
  9602   003DEC  0E00               	movlw	0
  9603   003DEE  1A1F               	xorwf	(___flge@ff1+2)^0,f,c
  9604   003DF0  0E80               	movlw	128
  9605   003DF2  1A20               	xorwf	(___flge@ff1+3)^0,f,c
  9606   003DF4  0E00               	movlw	0
  9607   003DF6  1A21               	xorwf	___flge@ff2^0,f,c
  9608   003DF8  0E00               	movlw	0
  9609   003DFA  1A22               	xorwf	(___flge@ff2+1)^0,f,c
  9610   003DFC  0E00               	movlw	0
  9611   003DFE  1A23               	xorwf	(___flge@ff2+2)^0,f,c
  9612   003E00  0E80               	movlw	128
  9613   003E02  1A24               	xorwf	(___flge@ff2+3)^0,f,c
  9614   003E04  5021               	movf	___flge@ff2^0,w,c
  9615   003E06  5C1D               	subwf	___flge@ff1^0,w,c
  9616   003E08  5022               	movf	(___flge@ff2+1)^0,w,c
  9617   003E0A  581E               	subwfb	(___flge@ff1+1)^0,w,c
  9618   003E0C  5023               	movf	(___flge@ff2+2)^0,w,c
  9619   003E0E  581F               	subwfb	(___flge@ff1+2)^0,w,c
  9620   003E10  5024               	movf	(___flge@ff2+3)^0,w,c
  9621   003E12  5820               	subwfb	(___flge@ff1+3)^0,w,c
  9622   003E14  B0D8               	btfsc	status,0,c
  9623   003E16  EF0F  F01F         	goto	u4171
  9624   003E1A  EF11  F01F         	goto	u4170
  9625   003E1E                     u4171:
  9626   003E1E  EF14  F01F         	goto	l4192
  9627   003E22                     u4170:
  9628   003E22  90D8               	bcf	status,0,c
  9629   003E24  EF15  F01F         	goto	l822
  9630   003E28                     l4192:
  9631   003E28  80D8               	bsf	status,0,c
  9632   003E2A                     l822:
  9633   003E2A  0012               	return		;funcret
  9634   003E2C                     __end_of___flge:
  9635                           	callstack 0
  9636                           
  9637 ;; *************** function ___fldiv *****************
  9638 ;; Defined at:
  9639 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\sprcdiv.c"
  9640 ;; Parameters:    Size  Location     Type
  9641 ;;  b               4   53[COMRAM] unsigned char 
  9642 ;;  a               4   57[COMRAM] unsigned char 
  9643 ;; Auto vars:     Size  Location     Type
  9644 ;;  grs             4   72[COMRAM] unsigned long 
  9645 ;;  rem             4   65[COMRAM] unsigned long 
  9646 ;;  new_exp         2   70[COMRAM] short 
  9647 ;;  aexp            1   77[COMRAM] unsigned char 
  9648 ;;  bexp            1   76[COMRAM] unsigned char 
  9649 ;;  sign            1   69[COMRAM] unsigned char 
  9650 ;; Return value:  Size  Location     Type
  9651 ;;                  4   53[COMRAM] unsigned char 
  9652 ;; Registers used:
  9653 ;;		wreg, status,2, status,0
  9654 ;; Tracked objects:
  9655 ;;		On entry : 0/0
  9656 ;;		On exit  : 0/0
  9657 ;;		Unchanged: 0/0
  9658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9659 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9660 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9661 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9662 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9663 ;;Total ram usage:       25 bytes
  9664 ;; Hardware stack levels used: 1
  9665 ;; Hardware stack levels required when called: 2
  9666 ;; This function calls:
  9667 ;;		Nothing
  9668 ;; This function is called by:
  9669 ;;		_colorDetect
  9670 ;;		_main
  9671 ;; This function uses a non-reentrant model
  9672 ;;
  9673                           
  9674                           	psect	text42
  9675   002718                     __ptext42:
  9676                           	callstack 0
  9677   002718                     ___fldiv:
  9678                           	callstack 27
  9679   002718  5039               	movf	(___fldiv@b+3)^0,w,c
  9680   00271A  0B80               	andlw	128
  9681   00271C  6E46               	movwf	___fldiv@sign^0,c
  9682   00271E  5039               	movf	(___fldiv@b+3)^0,w,c
  9683   002720  2439               	addwf	(___fldiv@b+3)^0,w,c
  9684   002722  6E4D               	movwf	___fldiv@bexp^0,c
  9685   002724  AE38               	btfss	(___fldiv@b+2)^0,7,c
  9686   002726  EF97  F013         	goto	u3711
  9687   00272A  EF99  F013         	goto	u3710
  9688   00272E                     u3711:
  9689   00272E  EF9A  F013         	goto	l3906
  9690   002732                     u3710:
  9691   002732  804D               	bsf	___fldiv@bexp^0,0,c
  9692   002734                     l3906:
  9693   002734  504D               	movf	___fldiv@bexp^0,w,c
  9694   002736  B4D8               	btfsc	status,2,c
  9695   002738  EFA0  F013         	goto	u3721
  9696   00273C  EFA2  F013         	goto	u3720
  9697   002740                     u3721:
  9698   002740  EFB7  F013         	goto	l3916
  9699   002744                     u3720:
  9700   002744  284D               	incf	___fldiv@bexp^0,w,c
  9701   002746  A4D8               	btfss	status,2,c
  9702   002748  EFA8  F013         	goto	u3731
  9703   00274C  EFAA  F013         	goto	u3730
  9704   002750                     u3731:
  9705   002750  EFB2  F013         	goto	l3912
  9706   002754                     u3730:
  9707   002754  0E00               	movlw	0
  9708   002756  6E36               	movwf	___fldiv@b^0,c
  9709   002758  0E00               	movlw	0
  9710   00275A  6E37               	movwf	(___fldiv@b+1)^0,c
  9711   00275C  0E00               	movlw	0
  9712   00275E  6E38               	movwf	(___fldiv@b+2)^0,c
  9713   002760  0E00               	movlw	0
  9714   002762  6E39               	movwf	(___fldiv@b+3)^0,c
  9715   002764                     l3912:
  9716   002764  8E38               	bsf	(___fldiv@b+2)^0,7,c
  9717   002766  0E00               	movlw	0
  9718   002768  6E39               	movwf	(___fldiv@b+3)^0,c
  9719   00276A  EFBF  F013         	goto	l3918
  9720   00276E                     l3916:
  9721   00276E  0E00               	movlw	0
  9722   002770  6E36               	movwf	___fldiv@b^0,c
  9723   002772  0E00               	movlw	0
  9724   002774  6E37               	movwf	(___fldiv@b+1)^0,c
  9725   002776  0E00               	movlw	0
  9726   002778  6E38               	movwf	(___fldiv@b+2)^0,c
  9727   00277A  0E00               	movlw	0
  9728   00277C  6E39               	movwf	(___fldiv@b+3)^0,c
  9729   00277E                     l3918:
  9730   00277E  503D               	movf	(___fldiv@a+3)^0,w,c
  9731   002780  0B80               	andlw	128
  9732   002782  1A46               	xorwf	___fldiv@sign^0,f,c
  9733   002784  503D               	movf	(___fldiv@a+3)^0,w,c
  9734   002786  243D               	addwf	(___fldiv@a+3)^0,w,c
  9735   002788  6E4E               	movwf	___fldiv@aexp^0,c
  9736   00278A  AE3C               	btfss	(___fldiv@a+2)^0,7,c
  9737   00278C  EFCA  F013         	goto	u3741
  9738   002790  EFCC  F013         	goto	u3740
  9739   002794                     u3741:
  9740   002794  EFCD  F013         	goto	l3926
  9741   002798                     u3740:
  9742   002798  804E               	bsf	___fldiv@aexp^0,0,c
  9743   00279A                     l3926:
  9744   00279A  504E               	movf	___fldiv@aexp^0,w,c
  9745   00279C  B4D8               	btfsc	status,2,c
  9746   00279E  EFD3  F013         	goto	u3751
  9747   0027A2  EFD5  F013         	goto	u3750
  9748   0027A6                     u3751:
  9749   0027A6  EFEA  F013         	goto	l3936
  9750   0027AA                     u3750:
  9751   0027AA  284E               	incf	___fldiv@aexp^0,w,c
  9752   0027AC  A4D8               	btfss	status,2,c
  9753   0027AE  EFDB  F013         	goto	u3761
  9754   0027B2  EFDD  F013         	goto	u3760
  9755   0027B6                     u3761:
  9756   0027B6  EFE5  F013         	goto	l3932
  9757   0027BA                     u3760:
  9758   0027BA  0E00               	movlw	0
  9759   0027BC  6E3A               	movwf	___fldiv@a^0,c
  9760   0027BE  0E00               	movlw	0
  9761   0027C0  6E3B               	movwf	(___fldiv@a+1)^0,c
  9762   0027C2  0E00               	movlw	0
  9763   0027C4  6E3C               	movwf	(___fldiv@a+2)^0,c
  9764   0027C6  0E00               	movlw	0
  9765   0027C8  6E3D               	movwf	(___fldiv@a+3)^0,c
  9766   0027CA                     l3932:
  9767   0027CA  8E3C               	bsf	(___fldiv@a+2)^0,7,c
  9768   0027CC  0E00               	movlw	0
  9769   0027CE  6E3D               	movwf	(___fldiv@a+3)^0,c
  9770   0027D0  EFF2  F013         	goto	l3938
  9771   0027D4                     l3936:
  9772   0027D4  0E00               	movlw	0
  9773   0027D6  6E3A               	movwf	___fldiv@a^0,c
  9774   0027D8  0E00               	movlw	0
  9775   0027DA  6E3B               	movwf	(___fldiv@a+1)^0,c
  9776   0027DC  0E00               	movlw	0
  9777   0027DE  6E3C               	movwf	(___fldiv@a+2)^0,c
  9778   0027E0  0E00               	movlw	0
  9779   0027E2  6E3D               	movwf	(___fldiv@a+3)^0,c
  9780   0027E4                     l3938:
  9781   0027E4  503A               	movf	___fldiv@a^0,w,c
  9782   0027E6  103B               	iorwf	(___fldiv@a+1)^0,w,c
  9783   0027E8  103C               	iorwf	(___fldiv@a+2)^0,w,c
  9784   0027EA  103D               	iorwf	(___fldiv@a+3)^0,w,c
  9785   0027EC  A4D8               	btfss	status,2,c
  9786   0027EE  EFFB  F013         	goto	u3771
  9787   0027F2  EFFD  F013         	goto	u3770
  9788   0027F6                     u3771:
  9789   0027F6  EF15  F014         	goto	l3950
  9790   0027FA                     u3770:
  9791   0027FA  0E00               	movlw	0
  9792   0027FC  6E36               	movwf	___fldiv@b^0,c
  9793   0027FE  0E00               	movlw	0
  9794   002800  6E37               	movwf	(___fldiv@b+1)^0,c
  9795   002802  0E00               	movlw	0
  9796   002804  6E38               	movwf	(___fldiv@b+2)^0,c
  9797   002806  0E00               	movlw	0
  9798   002808  6E39               	movwf	(___fldiv@b+3)^0,c
  9799   00280A  0E80               	movlw	128
  9800   00280C  1238               	iorwf	(___fldiv@b+2)^0,f,c
  9801   00280E  0E7F               	movlw	127
  9802   002810  1239               	iorwf	(___fldiv@b+3)^0,f,c
  9803   002812                     l3944:
  9804   002812  5046               	movf	___fldiv@sign^0,w,c
  9805   002814  1239               	iorwf	(___fldiv@b+3)^0,f,c
  9806   002816  C036  F036         	movff	___fldiv@b,?___fldiv
  9807   00281A  C037  F037         	movff	___fldiv@b+1,?___fldiv+1
  9808   00281E  C038  F038         	movff	___fldiv@b+2,?___fldiv+2
  9809   002822  C039  F039         	movff	___fldiv@b+3,?___fldiv+3
  9810   002826  EF58  F015         	goto	l1134
  9811   00282A                     l3950:
  9812   00282A  504D               	movf	___fldiv@bexp^0,w,c
  9813   00282C  A4D8               	btfss	status,2,c
  9814   00282E  EF1B  F014         	goto	u3781
  9815   002832  EF1D  F014         	goto	u3780
  9816   002836                     u3781:
  9817   002836  EF27  F014         	goto	l3958
  9818   00283A                     u3780:
  9819   00283A  0E00               	movlw	0
  9820   00283C  6E36               	movwf	?___fldiv^0,c
  9821   00283E  0E00               	movlw	0
  9822   002840  6E37               	movwf	(?___fldiv+1)^0,c
  9823   002842  0E00               	movlw	0
  9824   002844  6E38               	movwf	(?___fldiv+2)^0,c
  9825   002846  0E00               	movlw	0
  9826   002848  6E39               	movwf	(?___fldiv+3)^0,c
  9827   00284A  EF58  F015         	goto	l1134
  9828   00284E                     l3958:
  9829   00284E  504E               	movf	___fldiv@aexp^0,w,c
  9830   002850  C04D  F03E         	movff	___fldiv@bexp,??___fldiv
  9831   002854  6A3F               	clrf	(??___fldiv+1)^0,c
  9832   002856  5E3E               	subwf	??___fldiv^0,f,c
  9833   002858  0E00               	movlw	0
  9834   00285A  5A3F               	subwfb	(??___fldiv+1)^0,f,c
  9835   00285C  0E7F               	movlw	127
  9836   00285E  243E               	addwf	??___fldiv^0,w,c
  9837   002860  6E47               	movwf	___fldiv@new_exp^0,c
  9838   002862  0E00               	movlw	0
  9839   002864  203F               	addwfc	(??___fldiv+1)^0,w,c
  9840   002866  6E48               	movwf	(___fldiv@new_exp+1)^0,c
  9841   002868  C036  F042         	movff	___fldiv@b,___fldiv@rem
  9842   00286C  C037  F043         	movff	___fldiv@b+1,___fldiv@rem+1
  9843   002870  C038  F044         	movff	___fldiv@b+2,___fldiv@rem+2
  9844   002874  C039  F045         	movff	___fldiv@b+3,___fldiv@rem+3
  9845   002878  0E00               	movlw	0
  9846   00287A  6E36               	movwf	___fldiv@b^0,c
  9847   00287C  0E00               	movlw	0
  9848   00287E  6E37               	movwf	(___fldiv@b+1)^0,c
  9849   002880  0E00               	movlw	0
  9850   002882  6E38               	movwf	(___fldiv@b+2)^0,c
  9851   002884  0E00               	movlw	0
  9852   002886  6E39               	movwf	(___fldiv@b+3)^0,c
  9853   002888  0E00               	movlw	0
  9854   00288A  6E49               	movwf	___fldiv@grs^0,c
  9855   00288C  0E00               	movlw	0
  9856   00288E  6E4A               	movwf	(___fldiv@grs+1)^0,c
  9857   002890  0E00               	movlw	0
  9858   002892  6E4B               	movwf	(___fldiv@grs+2)^0,c
  9859   002894  0E00               	movlw	0
  9860   002896  6E4C               	movwf	(___fldiv@grs+3)^0,c
  9861   002898  0E00               	movlw	0
  9862   00289A  6E4E               	movwf	___fldiv@aexp^0,c
  9863   00289C  EF88  F014         	goto	l1136
  9864   0028A0                     l3968:
  9865   0028A0  504E               	movf	___fldiv@aexp^0,w,c
  9866   0028A2  B4D8               	btfsc	status,2,c
  9867   0028A4  EF56  F014         	goto	u3791
  9868   0028A8  EF58  F014         	goto	u3790
  9869   0028AC                     u3791:
  9870   0028AC  EF6F  F014         	goto	l3976
  9871   0028B0                     u3790:
  9872   0028B0  90D8               	bcf	status,0,c
  9873   0028B2  3642               	rlcf	___fldiv@rem^0,f,c
  9874   0028B4  3643               	rlcf	(___fldiv@rem+1)^0,f,c
  9875   0028B6  3644               	rlcf	(___fldiv@rem+2)^0,f,c
  9876   0028B8  3645               	rlcf	(___fldiv@rem+3)^0,f,c
  9877   0028BA  90D8               	bcf	status,0,c
  9878   0028BC  3636               	rlcf	___fldiv@b^0,f,c
  9879   0028BE  3637               	rlcf	(___fldiv@b+1)^0,f,c
  9880   0028C0  3638               	rlcf	(___fldiv@b+2)^0,f,c
  9881   0028C2  3639               	rlcf	(___fldiv@b+3)^0,f,c
  9882   0028C4  AE4C               	btfss	(___fldiv@grs+3)^0,7,c
  9883   0028C6  EF67  F014         	goto	u3801
  9884   0028CA  EF69  F014         	goto	u3800
  9885   0028CE                     u3801:
  9886   0028CE  EF6A  F014         	goto	l1139
  9887   0028D2                     u3800:
  9888   0028D2  8036               	bsf	___fldiv@b^0,0,c
  9889   0028D4                     l1139:
  9890   0028D4  90D8               	bcf	status,0,c
  9891   0028D6  3649               	rlcf	___fldiv@grs^0,f,c
  9892   0028D8  364A               	rlcf	(___fldiv@grs+1)^0,f,c
  9893   0028DA  364B               	rlcf	(___fldiv@grs+2)^0,f,c
  9894   0028DC  364C               	rlcf	(___fldiv@grs+3)^0,f,c
  9895   0028DE                     l3976:
  9896   0028DE  503A               	movf	___fldiv@a^0,w,c
  9897   0028E0  5C42               	subwf	___fldiv@rem^0,w,c
  9898   0028E2  503B               	movf	(___fldiv@a+1)^0,w,c
  9899   0028E4  5843               	subwfb	(___fldiv@rem+1)^0,w,c
  9900   0028E6  503C               	movf	(___fldiv@a+2)^0,w,c
  9901   0028E8  5844               	subwfb	(___fldiv@rem+2)^0,w,c
  9902   0028EA  503D               	movf	(___fldiv@a+3)^0,w,c
  9903   0028EC  5845               	subwfb	(___fldiv@rem+3)^0,w,c
  9904   0028EE  A0D8               	btfss	status,0,c
  9905   0028F0  EF7C  F014         	goto	u3811
  9906   0028F4  EF7E  F014         	goto	u3810
  9907   0028F8                     u3811:
  9908   0028F8  EF87  F014         	goto	l3982
  9909   0028FC                     u3810:
  9910   0028FC  8C4C               	bsf	(___fldiv@grs+3)^0,6,c
  9911   0028FE  503A               	movf	___fldiv@a^0,w,c
  9912   002900  5E42               	subwf	___fldiv@rem^0,f,c
  9913   002902  503B               	movf	(___fldiv@a+1)^0,w,c
  9914   002904  5A43               	subwfb	(___fldiv@rem+1)^0,f,c
  9915   002906  503C               	movf	(___fldiv@a+2)^0,w,c
  9916   002908  5A44               	subwfb	(___fldiv@rem+2)^0,f,c
  9917   00290A  503D               	movf	(___fldiv@a+3)^0,w,c
  9918   00290C  5A45               	subwfb	(___fldiv@rem+3)^0,f,c
  9919   00290E                     l3982:
  9920   00290E  2A4E               	incf	___fldiv@aexp^0,f,c
  9921   002910                     l1136:
  9922   002910  0E19               	movlw	25
  9923   002912  644E               	cpfsgt	___fldiv@aexp^0,c
  9924   002914  EF8E  F014         	goto	u3821
  9925   002918  EF90  F014         	goto	u3820
  9926   00291C                     u3821:
  9927   00291C  EF50  F014         	goto	l3968
  9928   002920                     u3820:
  9929   002920  5042               	movf	___fldiv@rem^0,w,c
  9930   002922  1043               	iorwf	(___fldiv@rem+1)^0,w,c
  9931   002924  1044               	iorwf	(___fldiv@rem+2)^0,w,c
  9932   002926  1045               	iorwf	(___fldiv@rem+3)^0,w,c
  9933   002928  B4D8               	btfsc	status,2,c
  9934   00292A  EF99  F014         	goto	u3831
  9935   00292E  EF9B  F014         	goto	u3830
  9936   002932                     u3831:
  9937   002932  EFB3  F014         	goto	l3994
  9938   002936                     u3830:
  9939   002936  8049               	bsf	___fldiv@grs^0,0,c
  9940   002938  EFB3  F014         	goto	l3994
  9941   00293C                     l3988:
  9942   00293C  90D8               	bcf	status,0,c
  9943   00293E  3636               	rlcf	___fldiv@b^0,f,c
  9944   002940  3637               	rlcf	(___fldiv@b+1)^0,f,c
  9945   002942  3638               	rlcf	(___fldiv@b+2)^0,f,c
  9946   002944  3639               	rlcf	(___fldiv@b+3)^0,f,c
  9947   002946  AE4C               	btfss	(___fldiv@grs+3)^0,7,c
  9948   002948  EFA8  F014         	goto	u3841
  9949   00294C  EFAA  F014         	goto	u3840
  9950   002950                     u3841:
  9951   002950  EFAB  F014         	goto	l1145
  9952   002954                     u3840:
  9953   002954  8036               	bsf	___fldiv@b^0,0,c
  9954   002956                     l1145:
  9955   002956  90D8               	bcf	status,0,c
  9956   002958  3649               	rlcf	___fldiv@grs^0,f,c
  9957   00295A  364A               	rlcf	(___fldiv@grs+1)^0,f,c
  9958   00295C  364B               	rlcf	(___fldiv@grs+2)^0,f,c
  9959   00295E  364C               	rlcf	(___fldiv@grs+3)^0,f,c
  9960   002960  0647               	decf	___fldiv@new_exp^0,f,c
  9961   002962  A0D8               	btfss	status,0,c
  9962   002964  0648               	decf	(___fldiv@new_exp+1)^0,f,c
  9963   002966                     l3994:
  9964   002966  AE38               	btfss	(___fldiv@b+2)^0,7,c
  9965   002968  EFB8  F014         	goto	u3851
  9966   00296C  EFBA  F014         	goto	u3850
  9967   002970                     u3851:
  9968   002970  EF9E  F014         	goto	l3988
  9969   002974                     u3850:
  9970   002974  0E00               	movlw	0
  9971   002976  6E4E               	movwf	___fldiv@aexp^0,c
  9972   002978  AE4C               	btfss	(___fldiv@grs+3)^0,7,c
  9973   00297A  EFC1  F014         	goto	u3861
  9974   00297E  EFC3  F014         	goto	u3860
  9975   002982                     u3861:
  9976   002982  EFE7  F014         	goto	l1147
  9977   002986                     u3860:
  9978   002986  0EFF               	movlw	255
  9979   002988  1449               	andwf	___fldiv@grs^0,w,c
  9980   00298A  6E3E               	movwf	??___fldiv^0,c
  9981   00298C  0EFF               	movlw	255
  9982   00298E  144A               	andwf	(___fldiv@grs+1)^0,w,c
  9983   002990  6E3F               	movwf	(??___fldiv+1)^0,c
  9984   002992  0EFF               	movlw	255
  9985   002994  144B               	andwf	(___fldiv@grs+2)^0,w,c
  9986   002996  6E40               	movwf	(??___fldiv+2)^0,c
  9987   002998  0E7F               	movlw	127
  9988   00299A  144C               	andwf	(___fldiv@grs+3)^0,w,c
  9989   00299C  6E41               	movwf	(??___fldiv+3)^0,c
  9990   00299E  503E               	movf	??___fldiv^0,w,c
  9991   0029A0  103F               	iorwf	(??___fldiv+1)^0,w,c
  9992   0029A2  1040               	iorwf	(??___fldiv+2)^0,w,c
  9993   0029A4  1041               	iorwf	(??___fldiv+3)^0,w,c
  9994   0029A6  B4D8               	btfsc	status,2,c
  9995   0029A8  EFD8  F014         	goto	u3871
  9996   0029AC  EFDA  F014         	goto	u3870
  9997   0029B0                     u3871:
  9998   0029B0  EFDE  F014         	goto	l1148
  9999   0029B4                     u3870:
 10000   0029B4                     l4002:
 10001   0029B4  0E01               	movlw	1
 10002   0029B6  6E4E               	movwf	___fldiv@aexp^0,c
 10003   0029B8  EFE7  F014         	goto	l1147
 10004   0029BC                     l1148:
 10005   0029BC  A036               	btfss	___fldiv@b^0,0,c
 10006   0029BE  EFE3  F014         	goto	u3881
 10007   0029C2  EFE5  F014         	goto	u3880
 10008   0029C6                     u3881:
 10009   0029C6  EFE7  F014         	goto	l1147
 10010   0029CA                     u3880:
 10011   0029CA  EFDA  F014         	goto	l4002
 10012   0029CE                     l1147:
 10013   0029CE  504E               	movf	___fldiv@aexp^0,w,c
 10014   0029D0  B4D8               	btfsc	status,2,c
 10015   0029D2  EFED  F014         	goto	u3891
 10016   0029D6  EFEF  F014         	goto	u3890
 10017   0029DA                     u3891:
 10018   0029DA  EF13  F015         	goto	l4014
 10019   0029DE                     u3890:
 10020   0029DE  0E01               	movlw	1
 10021   0029E0  2636               	addwf	___fldiv@b^0,f,c
 10022   0029E2  0E00               	movlw	0
 10023   0029E4  2237               	addwfc	(___fldiv@b+1)^0,f,c
 10024   0029E6  2238               	addwfc	(___fldiv@b+2)^0,f,c
 10025   0029E8  2239               	addwfc	(___fldiv@b+3)^0,f,c
 10026   0029EA  A039               	btfss	(___fldiv@b+3)^0,0,c
 10027   0029EC  EFFA  F014         	goto	u3901
 10028   0029F0  EFFC  F014         	goto	u3900
 10029   0029F4                     u3901:
 10030   0029F4  EF13  F015         	goto	l4014
 10031   0029F8                     u3900:
 10032   0029F8  C036  F03E         	movff	___fldiv@b,??___fldiv
 10033   0029FC  C037  F03F         	movff	___fldiv@b+1,??___fldiv+1
 10034   002A00  C038  F040         	movff	___fldiv@b+2,??___fldiv+2
 10035   002A04  C039  F041         	movff	___fldiv@b+3,??___fldiv+3
 10036   002A08  3441               	rlcf	(??___fldiv+3)^0,w,c
 10037   002A0A  3241               	rrcf	(??___fldiv+3)^0,f,c
 10038   002A0C  3240               	rrcf	(??___fldiv+2)^0,f,c
 10039   002A0E  323F               	rrcf	(??___fldiv+1)^0,f,c
 10040   002A10  323E               	rrcf	??___fldiv^0,f,c
 10041   002A12  C03E  F036         	movff	??___fldiv,___fldiv@b
 10042   002A16  C03F  F037         	movff	??___fldiv+1,___fldiv@b+1
 10043   002A1A  C040  F038         	movff	??___fldiv+2,___fldiv@b+2
 10044   002A1E  C041  F039         	movff	??___fldiv+3,___fldiv@b+3
 10045   002A22  4A47               	infsnz	___fldiv@new_exp^0,f,c
 10046   002A24  2A48               	incf	(___fldiv@new_exp+1)^0,f,c
 10047   002A26                     l4014:
 10048   002A26  BE48               	btfsc	(___fldiv@new_exp+1)^0,7,c
 10049   002A28  EF1E  F015         	goto	u3911
 10050   002A2C  5048               	movf	(___fldiv@new_exp+1)^0,w,c
 10051   002A2E  E108               	bnz	u3910
 10052   002A30  2847               	incf	___fldiv@new_exp^0,w,c
 10053   002A32  A0D8               	btfss	status,0,c
 10054   002A34  EF1E  F015         	goto	u3911
 10055   002A38  EF20  F015         	goto	u3910
 10056   002A3C                     u3911:
 10057   002A3C  EF2B  F015         	goto	l4018
 10058   002A40                     u3910:
 10059   002A40  0E00               	movlw	0
 10060   002A42  6E48               	movwf	(___fldiv@new_exp+1)^0,c
 10061   002A44  6847               	setf	___fldiv@new_exp^0,c
 10062   002A46  0E00               	movlw	0
 10063   002A48  6E36               	movwf	___fldiv@b^0,c
 10064   002A4A  0E00               	movlw	0
 10065   002A4C  6E37               	movwf	(___fldiv@b+1)^0,c
 10066   002A4E  0E00               	movlw	0
 10067   002A50  6E38               	movwf	(___fldiv@b+2)^0,c
 10068   002A52  0E00               	movlw	0
 10069   002A54  6E39               	movwf	(___fldiv@b+3)^0,c
 10070   002A56                     l4018:
 10071   002A56  BE48               	btfsc	(___fldiv@new_exp+1)^0,7,c
 10072   002A58  EF38  F015         	goto	u3920
 10073   002A5C  5048               	movf	(___fldiv@new_exp+1)^0,w,c
 10074   002A5E  E106               	bnz	u3921
 10075   002A60  0447               	decf	___fldiv@new_exp^0,w,c
 10076   002A62  B0D8               	btfsc	status,0,c
 10077   002A64  EF36  F015         	goto	u3921
 10078   002A68  EF38  F015         	goto	u3920
 10079   002A6C                     u3921:
 10080   002A6C  EF46  F015         	goto	l4022
 10081   002A70                     u3920:
 10082   002A70  0E00               	movlw	0
 10083   002A72  6E48               	movwf	(___fldiv@new_exp+1)^0,c
 10084   002A74  0E00               	movlw	0
 10085   002A76  6E47               	movwf	___fldiv@new_exp^0,c
 10086   002A78  0E00               	movlw	0
 10087   002A7A  6E36               	movwf	___fldiv@b^0,c
 10088   002A7C  0E00               	movlw	0
 10089   002A7E  6E37               	movwf	(___fldiv@b+1)^0,c
 10090   002A80  0E00               	movlw	0
 10091   002A82  6E38               	movwf	(___fldiv@b+2)^0,c
 10092   002A84  0E00               	movlw	0
 10093   002A86  6E39               	movwf	(___fldiv@b+3)^0,c
 10094   002A88  0E00               	movlw	0
 10095   002A8A  6E46               	movwf	___fldiv@sign^0,c
 10096   002A8C                     l4022:
 10097   002A8C  C047  F04D         	movff	___fldiv@new_exp,___fldiv@bexp
 10098   002A90  A04D               	btfss	___fldiv@bexp^0,0,c
 10099   002A92  EF4D  F015         	goto	u3931
 10100   002A96  EF4F  F015         	goto	u3930
 10101   002A9A                     u3931:
 10102   002A9A  EF52  F015         	goto	l4028
 10103   002A9E                     u3930:
 10104   002A9E  8E38               	bsf	(___fldiv@b+2)^0,7,c
 10105   002AA0  EF53  F015         	goto	l4030
 10106   002AA4                     l4028:
 10107   002AA4  9E38               	bcf	(___fldiv@b+2)^0,7,c
 10108   002AA6                     l4030:
 10109   002AA6  90D8               	bcf	status,0,c
 10110   002AA8  304D               	rrcf	___fldiv@bexp^0,w,c
 10111   002AAA  6E39               	movwf	(___fldiv@b+3)^0,c
 10112   002AAC  EF09  F014         	goto	l3944
 10113   002AB0                     l1134:
 10114   002AB0  0012               	return		;funcret
 10115   002AB2                     __end_of___fldiv:
 10116                           	callstack 0
 10117                           
 10118 ;; *************** function _ambientCal *****************
 10119 ;; Defined at:
 10120 ;;		line 99 in file "MazeRobot.X/color.c"
 10121 ;; Parameters:    Size  Location     Type
 10122 ;;  v               2   17[COMRAM] PTR struct RGB
 10123 ;;		 -> main@ambientRGBVal(8), 
 10124 ;; Auto vars:     Size  Location     Type
 10125 ;;  i               2   21[COMRAM] int 
 10126 ;; Return value:  Size  Location     Type
 10127 ;;                  1    wreg      void 
 10128 ;; Registers used:
 10129 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10130 ;; Tracked objects:
 10131 ;;		On entry : 0/0
 10132 ;;		On exit  : 0/0
 10133 ;;		Unchanged: 0/0
 10134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10135 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10136 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10137 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10138 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10139 ;;Total ram usage:        6 bytes
 10140 ;; Hardware stack levels used: 1
 10141 ;; Hardware stack levels required when called: 6
 10142 ;; This function calls:
 10143 ;;		_getColor
 10144 ;; This function is called by:
 10145 ;;		_main
 10146 ;; This function uses a non-reentrant model
 10147 ;;
 10148                           
 10149                           	psect	text43
 10150   003F10                     __ptext43:
 10151                           	callstack 0
 10152   003F10                     _ambientCal:
 10153                           	callstack 24
 10154   003F10                     
 10155                           ;MazeRobot.X/color.c: 102:     for(int i = 0;i<20;i++){
 10156   003F10  0E00               	movlw	0
 10157   003F12  6E17               	movwf	(ambientCal@i+1)^0,c
 10158   003F14  0E00               	movlw	0
 10159   003F16  6E16               	movwf	ambientCal@i^0,c
 10160   003F18                     l4258:
 10161                           
 10162                           ;MazeRobot.X/color.c: 103:             LATDbits.LATD7 = !LATDbits.LATD7;
 10163   003F18  AE7C               	btfss	124,7,c	;volatile
 10164   003F1A  EF91  F01F         	goto	u4281
 10165   003F1E  EF95  F01F         	goto	u4280
 10166   003F22                     u4281:
 10167   003F22  6A14               	clrf	??_ambientCal^0,c
 10168   003F24  2A14               	incf	??_ambientCal^0,f,c
 10169   003F26  EF96  F01F         	goto	u4298
 10170   003F2A                     u4280:
 10171   003F2A  6A14               	clrf	??_ambientCal^0,c
 10172   003F2C                     u4298:
 10173   003F2C  3214               	rrcf	??_ambientCal^0,f,c
 10174   003F2E  3214               	rrcf	??_ambientCal^0,f,c
 10175   003F30  507C               	movf	124,w,c	;volatile
 10176   003F32  1814               	xorwf	??_ambientCal^0,w,c
 10177   003F34  0B7F               	andlw	-129
 10178   003F36  1814               	xorwf	??_ambientCal^0,w,c
 10179   003F38  6E7C               	movwf	124,c	;volatile
 10180   003F3A                     
 10181                           ;MazeRobot.X/color.c: 104:             _delay((unsigned long)((100)*(64000000/4000.0)));
 10182   003F3A  0E09               	movlw	9
 10183   003F3C  6E15               	movwf	(??_ambientCal+1)^0,c
 10184   003F3E  0E1E               	movlw	30
 10185   003F40  6E14               	movwf	??_ambientCal^0,c
 10186   003F42  0EE4               	movlw	228
 10187   003F44                     u6527:
 10188   003F44  2EE8               	decfsz	wreg,f,c
 10189   003F46  D7FE               	bra	u6527
 10190   003F48  2E14               	decfsz	??_ambientCal^0,f,c
 10191   003F4A  D7FC               	bra	u6527
 10192   003F4C  2E15               	decfsz	(??_ambientCal+1)^0,f,c
 10193   003F4E  D7FA               	bra	u6527
 10194   003F50  D000               	nop2	
 10195                           
 10196                           ;MazeRobot.X/color.c: 105:             }
 10197   003F52  4A16               	infsnz	ambientCal@i^0,f,c
 10198   003F54  2A17               	incf	(ambientCal@i+1)^0,f,c
 10199   003F56  BE17               	btfsc	(ambientCal@i+1)^0,7,c
 10200   003F58  EFB7  F01F         	goto	u4301
 10201   003F5C  5017               	movf	(ambientCal@i+1)^0,w,c
 10202   003F5E  E109               	bnz	u4300
 10203   003F60  0E14               	movlw	20
 10204   003F62  5C16               	subwf	ambientCal@i^0,w,c
 10205   003F64  A0D8               	btfss	status,0,c
 10206   003F66  EFB7  F01F         	goto	u4301
 10207   003F6A  EFB9  F01F         	goto	u4300
 10208   003F6E                     u4301:
 10209   003F6E  EF8C  F01F         	goto	l4258
 10210   003F72                     u4300:
 10211   003F72                     
 10212                           ;MazeRobot.X/color.c: 106:             LATDbits.LATD7 = !LATDbits.LATD7;
 10213   003F72  AE7C               	btfss	124,7,c	;volatile
 10214   003F74  EFBE  F01F         	goto	u4311
 10215   003F78  EFC2  F01F         	goto	u4310
 10216   003F7C                     u4311:
 10217   003F7C  6A14               	clrf	??_ambientCal^0,c
 10218   003F7E  2A14               	incf	??_ambientCal^0,f,c
 10219   003F80  EFC3  F01F         	goto	u4328
 10220   003F84                     u4310:
 10221   003F84  6A14               	clrf	??_ambientCal^0,c
 10222   003F86                     u4328:
 10223   003F86  3214               	rrcf	??_ambientCal^0,f,c
 10224   003F88  3214               	rrcf	??_ambientCal^0,f,c
 10225   003F8A  507C               	movf	124,w,c	;volatile
 10226   003F8C  1814               	xorwf	??_ambientCal^0,w,c
 10227   003F8E  0B7F               	andlw	-129
 10228   003F90  1814               	xorwf	??_ambientCal^0,w,c
 10229   003F92  6E7C               	movwf	124,c	;volatile
 10230   003F94                     
 10231                           ;MazeRobot.X/color.c: 107:             _delay((unsigned long)((500)*(64000000/4000.0)));
 10232   003F94  0E29               	movlw	41
 10233   003F96  6E15               	movwf	(??_ambientCal+1)^0,c
 10234   003F98  0E96               	movlw	150
 10235   003F9A  6E14               	movwf	??_ambientCal^0,c
 10236   003F9C  0E7F               	movlw	127
 10237   003F9E                     u6537:
 10238   003F9E  2EE8               	decfsz	wreg,f,c
 10239   003FA0  D7FE               	bra	u6537
 10240   003FA2  2E14               	decfsz	??_ambientCal^0,f,c
 10241   003FA4  D7FC               	bra	u6537
 10242   003FA6  2E15               	decfsz	(??_ambientCal+1)^0,f,c
 10243   003FA8  D7FA               	bra	u6537
 10244   003FAA  F000               	nop	
 10245   003FAC                     
 10246                           ;MazeRobot.X/color.c: 108:             getColor(v);
 10247   003FAC  C012  F010         	movff	ambientCal@v,getColor@v
 10248   003FB0  C013  F011         	movff	ambientCal@v+1,getColor@v+1
 10249   003FB4  EC4A  F023         	call	_getColor	;wreg free
 10250   003FB8                     
 10251                           ;MazeRobot.X/color.c: 109:             _delay((unsigned long)((500)*(64000000/4000.0)));
 10252   003FB8  0E29               	movlw	41
 10253   003FBA  6E15               	movwf	(??_ambientCal+1)^0,c
 10254   003FBC  0E96               	movlw	150
 10255   003FBE  6E14               	movwf	??_ambientCal^0,c
 10256   003FC0  0E7F               	movlw	127
 10257   003FC2                     u6547:
 10258   003FC2  2EE8               	decfsz	wreg,f,c
 10259   003FC4  D7FE               	bra	u6547
 10260   003FC6  2E14               	decfsz	??_ambientCal^0,f,c
 10261   003FC8  D7FC               	bra	u6547
 10262   003FCA  2E15               	decfsz	(??_ambientCal+1)^0,f,c
 10263   003FCC  D7FA               	bra	u6547
 10264   003FCE  F000               	nop	
 10265   003FD0                     
 10266                           ;MazeRobot.X/color.c: 110:             LATDbits.LATD7 = !LATDbits.LATD7;
 10267   003FD0  AE7C               	btfss	124,7,c	;volatile
 10268   003FD2  EFED  F01F         	goto	u4331
 10269   003FD6  EFF1  F01F         	goto	u4330
 10270   003FDA                     u4331:
 10271   003FDA  6A14               	clrf	??_ambientCal^0,c
 10272   003FDC  2A14               	incf	??_ambientCal^0,f,c
 10273   003FDE  EFF2  F01F         	goto	u4348
 10274   003FE2                     u4330:
 10275   003FE2  6A14               	clrf	??_ambientCal^0,c
 10276   003FE4                     u4348:
 10277   003FE4  3214               	rrcf	??_ambientCal^0,f,c
 10278   003FE6  3214               	rrcf	??_ambientCal^0,f,c
 10279   003FE8  507C               	movf	124,w,c	;volatile
 10280   003FEA  1814               	xorwf	??_ambientCal^0,w,c
 10281   003FEC  0B7F               	andlw	-129
 10282   003FEE  1814               	xorwf	??_ambientCal^0,w,c
 10283   003FF0  6E7C               	movwf	124,c	;volatile
 10284   003FF2  0012               	return		;funcret
 10285   003FF4                     __end_of_ambientCal:
 10286                           	callstack 0
 10287                           
 10288 ;; *************** function _getColor *****************
 10289 ;; Defined at:
 10290 ;;		line 91 in file "MazeRobot.X/color.c"
 10291 ;; Parameters:    Size  Location     Type
 10292 ;;  v               2   15[COMRAM] PTR struct RGB
 10293 ;;		 -> main@whiteRGBVal(8), main@RGBVal(8), main@ambientRGBVal(8), colorDetect@RGBVal(8), 
 10294 ;; Auto vars:     Size  Location     Type
 10295 ;;		None
 10296 ;; Return value:  Size  Location     Type
 10297 ;;                  1    wreg      void 
 10298 ;; Registers used:
 10299 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10300 ;; Tracked objects:
 10301 ;;		On entry : 0/0
 10302 ;;		On exit  : 0/0
 10303 ;;		Unchanged: 0/0
 10304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10305 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10308 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10309 ;;Total ram usage:        2 bytes
 10310 ;; Hardware stack levels used: 1
 10311 ;; Hardware stack levels required when called: 5
 10312 ;; This function calls:
 10313 ;;		_color_read_Blue
 10314 ;;		_color_read_Clear
 10315 ;;		_color_read_Green
 10316 ;;		_color_read_Red
 10317 ;; This function is called by:
 10318 ;;		_ambientCal
 10319 ;;		_whiteCal
 10320 ;;		_colorDetect
 10321 ;;		_main
 10322 ;; This function uses a non-reentrant model
 10323 ;;
 10324                           
 10325                           	psect	text44
 10326   004694                     __ptext44:
 10327                           	callstack 0
 10328   004694                     _getColor:
 10329                           	callstack 24
 10330   004694                     
 10331                           ;MazeRobot.X/color.c: 92:     v->R = color_read_Red();
 10332   004694  ECCC  F023         	call	_color_read_Red	;wreg free
 10333   004698  C010  FFD9         	movff	getColor@v,fsr2l
 10334   00469C  C011  FFDA         	movff	getColor@v+1,fsr2h
 10335   0046A0  C009  FFDE         	movff	?_color_read_Red,postinc2
 10336   0046A4  C00A  FFDD         	movff	?_color_read_Red+1,postdec2
 10337                           
 10338                           ;MazeRobot.X/color.c: 93:     v->G = color_read_Green();
 10339   0046A8  ECF4  F023         	call	_color_read_Green	;wreg free
 10340   0046AC  EE20 F002          	lfsr	2,2
 10341   0046B0  5010               	movf	getColor@v^0,w,c
 10342   0046B2  26D9               	addwf	fsr2l,f,c
 10343   0046B4  5011               	movf	(getColor@v+1)^0,w,c
 10344   0046B6  22DA               	addwfc	fsr2h,f,c
 10345   0046B8  C009  FFDE         	movff	?_color_read_Green,postinc2
 10346   0046BC  C00A  FFDD         	movff	?_color_read_Green+1,postdec2
 10347                           
 10348                           ;MazeRobot.X/color.c: 94:     v->B = color_read_Blue();
 10349   0046C0  EC44  F024         	call	_color_read_Blue	;wreg free
 10350   0046C4  EE20 F004          	lfsr	2,4
 10351   0046C8  5010               	movf	getColor@v^0,w,c
 10352   0046CA  26D9               	addwf	fsr2l,f,c
 10353   0046CC  5011               	movf	(getColor@v+1)^0,w,c
 10354   0046CE  22DA               	addwfc	fsr2h,f,c
 10355   0046D0  C009  FFDE         	movff	?_color_read_Blue,postinc2
 10356   0046D4  C00A  FFDD         	movff	?_color_read_Blue+1,postdec2
 10357                           
 10358                           ;MazeRobot.X/color.c: 95:     v->C = color_read_Clear();
 10359   0046D8  EC1C  F024         	call	_color_read_Clear	;wreg free
 10360   0046DC  EE20 F006          	lfsr	2,6
 10361   0046E0  5010               	movf	getColor@v^0,w,c
 10362   0046E2  26D9               	addwf	fsr2l,f,c
 10363   0046E4  5011               	movf	(getColor@v+1)^0,w,c
 10364   0046E6  22DA               	addwfc	fsr2h,f,c
 10365   0046E8  C009  FFDE         	movff	?_color_read_Clear,postinc2
 10366   0046EC  C00A  FFDD         	movff	?_color_read_Clear+1,postdec2
 10367   0046F0  0012               	return		;funcret
 10368   0046F2                     __end_of_getColor:
 10369                           	callstack 0
 10370                           
 10371 ;; *************** function _color_read_Red *****************
 10372 ;; Defined at:
 10373 ;;		line 33 in file "MazeRobot.X/color.c"
 10374 ;; Parameters:    Size  Location     Type
 10375 ;;		None
 10376 ;; Auto vars:     Size  Location     Type
 10377 ;;  tmp             2   13[COMRAM] unsigned int 
 10378 ;; Return value:  Size  Location     Type
 10379 ;;                  2    8[COMRAM] unsigned int 
 10380 ;; Registers used:
 10381 ;;		wreg, status,2, status,0, cstack
 10382 ;; Tracked objects:
 10383 ;;		On entry : 0/0
 10384 ;;		On exit  : 0/0
 10385 ;;		Unchanged: 0/0
 10386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10387 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10388 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10389 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10390 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10391 ;;Total ram usage:        7 bytes
 10392 ;; Hardware stack levels used: 1
 10393 ;; Hardware stack levels required when called: 4
 10394 ;; This function calls:
 10395 ;;		_I2C_2_Master_Read
 10396 ;;		_I2C_2_Master_RepStart
 10397 ;;		_I2C_2_Master_Start
 10398 ;;		_I2C_2_Master_Stop
 10399 ;;		_I2C_2_Master_Write
 10400 ;; This function is called by:
 10401 ;;		_getColor
 10402 ;; This function uses a non-reentrant model
 10403 ;;
 10404                           
 10405                           	psect	text45
 10406   004798                     __ptext45:
 10407                           	callstack 0
 10408   004798                     _color_read_Red:
 10409                           	callstack 24
 10410   004798                     
 10411                           ;MazeRobot.X/color.c: 35:  unsigned int tmp;;MazeRobot.X/color.c: 36:  I2C_2_Master_Star
      +                          t();
 10412   004798  EC1C  F026         	call	_I2C_2_Master_Start	;wreg free
 10413                           
 10414                           ;MazeRobot.X/color.c: 37:  I2C_2_Master_Write(0x52 | 0x00);
 10415   00479C  0E52               	movlw	82
 10416   00479E  EC11  F026         	call	_I2C_2_Master_Write
 10417                           
 10418                           ;MazeRobot.X/color.c: 38:  I2C_2_Master_Write(0xA0 | 0x16);
 10419   0047A2  0EB6               	movlw	182
 10420   0047A4  EC11  F026         	call	_I2C_2_Master_Write
 10421                           
 10422                           ;MazeRobot.X/color.c: 39:  I2C_2_Master_RepStart();
 10423   0047A8  EC21  F026         	call	_I2C_2_Master_RepStart	;wreg free
 10424                           
 10425                           ;MazeRobot.X/color.c: 40:  I2C_2_Master_Write(0x52 | 0x01);
 10426   0047AC  0E53               	movlw	83
 10427   0047AE  EC11  F026         	call	_I2C_2_Master_Write
 10428                           
 10429                           ;MazeRobot.X/color.c: 41:  tmp=I2C_2_Master_Read(1);
 10430   0047B2  0E01               	movlw	1
 10431   0047B4  ECD6  F024         	call	_I2C_2_Master_Read
 10432   0047B8  6E0B               	movwf	??_color_read_Red^0,c
 10433   0047BA  500B               	movf	??_color_read_Red^0,w,c
 10434   0047BC  6E0E               	movwf	color_read_Red@tmp^0,c
 10435   0047BE  6A0F               	clrf	(color_read_Red@tmp+1)^0,c
 10436                           
 10437                           ;MazeRobot.X/color.c: 42:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10438   0047C0  0E00               	movlw	0
 10439   0047C2  ECD6  F024         	call	_I2C_2_Master_Read
 10440   0047C6  6E0B               	movwf	??_color_read_Red^0,c
 10441   0047C8  500B               	movf	??_color_read_Red^0,w,c
 10442   0047CA  6E0D               	movwf	(??_color_read_Red+2)^0,c
 10443   0047CC  6A0C               	clrf	(??_color_read_Red+1)^0,c
 10444   0047CE  500E               	movf	color_read_Red@tmp^0,w,c
 10445   0047D0  100C               	iorwf	(??_color_read_Red+1)^0,w,c
 10446   0047D2  6E0E               	movwf	color_read_Red@tmp^0,c
 10447   0047D4  500F               	movf	(color_read_Red@tmp+1)^0,w,c
 10448   0047D6  100D               	iorwf	(??_color_read_Red+2)^0,w,c
 10449   0047D8  6E0F               	movwf	(color_read_Red@tmp+1)^0,c
 10450                           
 10451                           ;MazeRobot.X/color.c: 43:  I2C_2_Master_Stop();
 10452   0047DA  EC17  F026         	call	_I2C_2_Master_Stop	;wreg free
 10453   0047DE                     
 10454                           ;MazeRobot.X/color.c: 44:  return tmp;
 10455   0047DE  C00E  F009         	movff	color_read_Red@tmp,?_color_read_Red
 10456   0047E2  C00F  F00A         	movff	color_read_Red@tmp+1,?_color_read_Red+1
 10457   0047E6  0012               	return		;funcret
 10458   0047E8                     __end_of_color_read_Red:
 10459                           	callstack 0
 10460                           
 10461 ;; *************** function _color_read_Green *****************
 10462 ;; Defined at:
 10463 ;;		line 47 in file "MazeRobot.X/color.c"
 10464 ;; Parameters:    Size  Location     Type
 10465 ;;		None
 10466 ;; Auto vars:     Size  Location     Type
 10467 ;;  tmp             2   13[COMRAM] unsigned int 
 10468 ;; Return value:  Size  Location     Type
 10469 ;;                  2    8[COMRAM] unsigned int 
 10470 ;; Registers used:
 10471 ;;		wreg, status,2, status,0, cstack
 10472 ;; Tracked objects:
 10473 ;;		On entry : 0/0
 10474 ;;		On exit  : 0/0
 10475 ;;		Unchanged: 0/0
 10476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10477 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10478 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10479 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10480 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10481 ;;Total ram usage:        7 bytes
 10482 ;; Hardware stack levels used: 1
 10483 ;; Hardware stack levels required when called: 4
 10484 ;; This function calls:
 10485 ;;		_I2C_2_Master_Read
 10486 ;;		_I2C_2_Master_RepStart
 10487 ;;		_I2C_2_Master_Start
 10488 ;;		_I2C_2_Master_Stop
 10489 ;;		_I2C_2_Master_Write
 10490 ;; This function is called by:
 10491 ;;		_getColor
 10492 ;; This function uses a non-reentrant model
 10493 ;;
 10494                           
 10495                           	psect	text46
 10496   0047E8                     __ptext46:
 10497                           	callstack 0
 10498   0047E8                     _color_read_Green:
 10499                           	callstack 24
 10500   0047E8                     
 10501                           ;MazeRobot.X/color.c: 49:  unsigned int tmp;;MazeRobot.X/color.c: 50:  I2C_2_Master_Star
      +                          t();
 10502   0047E8  EC1C  F026         	call	_I2C_2_Master_Start	;wreg free
 10503                           
 10504                           ;MazeRobot.X/color.c: 51:  I2C_2_Master_Write(0x52 | 0x00);
 10505   0047EC  0E52               	movlw	82
 10506   0047EE  EC11  F026         	call	_I2C_2_Master_Write
 10507                           
 10508                           ;MazeRobot.X/color.c: 52:  I2C_2_Master_Write(0xA0 | 0x18);
 10509   0047F2  0EB8               	movlw	184
 10510   0047F4  EC11  F026         	call	_I2C_2_Master_Write
 10511                           
 10512                           ;MazeRobot.X/color.c: 53:  I2C_2_Master_RepStart();
 10513   0047F8  EC21  F026         	call	_I2C_2_Master_RepStart	;wreg free
 10514                           
 10515                           ;MazeRobot.X/color.c: 54:  I2C_2_Master_Write(0x52 | 0x01);
 10516   0047FC  0E53               	movlw	83
 10517   0047FE  EC11  F026         	call	_I2C_2_Master_Write
 10518                           
 10519                           ;MazeRobot.X/color.c: 55:  tmp=I2C_2_Master_Read(1);
 10520   004802  0E01               	movlw	1
 10521   004804  ECD6  F024         	call	_I2C_2_Master_Read
 10522   004808  6E0B               	movwf	??_color_read_Green^0,c
 10523   00480A  500B               	movf	??_color_read_Green^0,w,c
 10524   00480C  6E0E               	movwf	color_read_Green@tmp^0,c
 10525   00480E  6A0F               	clrf	(color_read_Green@tmp+1)^0,c
 10526                           
 10527                           ;MazeRobot.X/color.c: 56:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10528   004810  0E00               	movlw	0
 10529   004812  ECD6  F024         	call	_I2C_2_Master_Read
 10530   004816  6E0B               	movwf	??_color_read_Green^0,c
 10531   004818  500B               	movf	??_color_read_Green^0,w,c
 10532   00481A  6E0D               	movwf	(??_color_read_Green+2)^0,c
 10533   00481C  6A0C               	clrf	(??_color_read_Green+1)^0,c
 10534   00481E  500E               	movf	color_read_Green@tmp^0,w,c
 10535   004820  100C               	iorwf	(??_color_read_Green+1)^0,w,c
 10536   004822  6E0E               	movwf	color_read_Green@tmp^0,c
 10537   004824  500F               	movf	(color_read_Green@tmp+1)^0,w,c
 10538   004826  100D               	iorwf	(??_color_read_Green+2)^0,w,c
 10539   004828  6E0F               	movwf	(color_read_Green@tmp+1)^0,c
 10540                           
 10541                           ;MazeRobot.X/color.c: 57:  I2C_2_Master_Stop();
 10542   00482A  EC17  F026         	call	_I2C_2_Master_Stop	;wreg free
 10543   00482E                     
 10544                           ;MazeRobot.X/color.c: 58:  return tmp;
 10545   00482E  C00E  F009         	movff	color_read_Green@tmp,?_color_read_Green
 10546   004832  C00F  F00A         	movff	color_read_Green@tmp+1,?_color_read_Green+1
 10547   004836  0012               	return		;funcret
 10548   004838                     __end_of_color_read_Green:
 10549                           	callstack 0
 10550                           
 10551 ;; *************** function _color_read_Clear *****************
 10552 ;; Defined at:
 10553 ;;		line 76 in file "MazeRobot.X/color.c"
 10554 ;; Parameters:    Size  Location     Type
 10555 ;;		None
 10556 ;; Auto vars:     Size  Location     Type
 10557 ;;  tmp             2   13[COMRAM] unsigned int 
 10558 ;; Return value:  Size  Location     Type
 10559 ;;                  2    8[COMRAM] unsigned int 
 10560 ;; Registers used:
 10561 ;;		wreg, status,2, status,0, cstack
 10562 ;; Tracked objects:
 10563 ;;		On entry : 0/0
 10564 ;;		On exit  : 0/0
 10565 ;;		Unchanged: 0/0
 10566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10567 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10568 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10569 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10570 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10571 ;;Total ram usage:        7 bytes
 10572 ;; Hardware stack levels used: 1
 10573 ;; Hardware stack levels required when called: 4
 10574 ;; This function calls:
 10575 ;;		_I2C_2_Master_Read
 10576 ;;		_I2C_2_Master_RepStart
 10577 ;;		_I2C_2_Master_Start
 10578 ;;		_I2C_2_Master_Stop
 10579 ;;		_I2C_2_Master_Write
 10580 ;; This function is called by:
 10581 ;;		_getColor
 10582 ;; This function uses a non-reentrant model
 10583 ;;
 10584                           
 10585                           	psect	text47
 10586   004838                     __ptext47:
 10587                           	callstack 0
 10588   004838                     _color_read_Clear:
 10589                           	callstack 24
 10590   004838                     
 10591                           ;MazeRobot.X/color.c: 78:  unsigned int tmp;;MazeRobot.X/color.c: 79:  I2C_2_Master_Star
      +                          t();
 10592   004838  EC1C  F026         	call	_I2C_2_Master_Start	;wreg free
 10593                           
 10594                           ;MazeRobot.X/color.c: 80:  I2C_2_Master_Write(0x52 | 0x00);
 10595   00483C  0E52               	movlw	82
 10596   00483E  EC11  F026         	call	_I2C_2_Master_Write
 10597                           
 10598                           ;MazeRobot.X/color.c: 81:  I2C_2_Master_Write(0xA0 | 0x14);
 10599   004842  0EB4               	movlw	180
 10600   004844  EC11  F026         	call	_I2C_2_Master_Write
 10601                           
 10602                           ;MazeRobot.X/color.c: 82:  I2C_2_Master_RepStart();
 10603   004848  EC21  F026         	call	_I2C_2_Master_RepStart	;wreg free
 10604                           
 10605                           ;MazeRobot.X/color.c: 83:  I2C_2_Master_Write(0x52 | 0x01);
 10606   00484C  0E53               	movlw	83
 10607   00484E  EC11  F026         	call	_I2C_2_Master_Write
 10608                           
 10609                           ;MazeRobot.X/color.c: 84:  tmp=I2C_2_Master_Read(1);
 10610   004852  0E01               	movlw	1
 10611   004854  ECD6  F024         	call	_I2C_2_Master_Read
 10612   004858  6E0B               	movwf	??_color_read_Clear^0,c
 10613   00485A  500B               	movf	??_color_read_Clear^0,w,c
 10614   00485C  6E0E               	movwf	color_read_Clear@tmp^0,c
 10615   00485E  6A0F               	clrf	(color_read_Clear@tmp+1)^0,c
 10616                           
 10617                           ;MazeRobot.X/color.c: 85:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10618   004860  0E00               	movlw	0
 10619   004862  ECD6  F024         	call	_I2C_2_Master_Read
 10620   004866  6E0B               	movwf	??_color_read_Clear^0,c
 10621   004868  500B               	movf	??_color_read_Clear^0,w,c
 10622   00486A  6E0D               	movwf	(??_color_read_Clear+2)^0,c
 10623   00486C  6A0C               	clrf	(??_color_read_Clear+1)^0,c
 10624   00486E  500E               	movf	color_read_Clear@tmp^0,w,c
 10625   004870  100C               	iorwf	(??_color_read_Clear+1)^0,w,c
 10626   004872  6E0E               	movwf	color_read_Clear@tmp^0,c
 10627   004874  500F               	movf	(color_read_Clear@tmp+1)^0,w,c
 10628   004876  100D               	iorwf	(??_color_read_Clear+2)^0,w,c
 10629   004878  6E0F               	movwf	(color_read_Clear@tmp+1)^0,c
 10630                           
 10631                           ;MazeRobot.X/color.c: 86:  I2C_2_Master_Stop();
 10632   00487A  EC17  F026         	call	_I2C_2_Master_Stop	;wreg free
 10633   00487E                     
 10634                           ;MazeRobot.X/color.c: 87:  return tmp;
 10635   00487E  C00E  F009         	movff	color_read_Clear@tmp,?_color_read_Clear
 10636   004882  C00F  F00A         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
 10637   004886  0012               	return		;funcret
 10638   004888                     __end_of_color_read_Clear:
 10639                           	callstack 0
 10640                           
 10641 ;; *************** function _color_read_Blue *****************
 10642 ;; Defined at:
 10643 ;;		line 62 in file "MazeRobot.X/color.c"
 10644 ;; Parameters:    Size  Location     Type
 10645 ;;		None
 10646 ;; Auto vars:     Size  Location     Type
 10647 ;;  tmp             2   13[COMRAM] unsigned int 
 10648 ;; Return value:  Size  Location     Type
 10649 ;;                  2    8[COMRAM] unsigned int 
 10650 ;; Registers used:
 10651 ;;		wreg, status,2, status,0, cstack
 10652 ;; Tracked objects:
 10653 ;;		On entry : 0/0
 10654 ;;		On exit  : 0/0
 10655 ;;		Unchanged: 0/0
 10656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10657 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10658 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10659 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10660 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10661 ;;Total ram usage:        7 bytes
 10662 ;; Hardware stack levels used: 1
 10663 ;; Hardware stack levels required when called: 4
 10664 ;; This function calls:
 10665 ;;		_I2C_2_Master_Read
 10666 ;;		_I2C_2_Master_RepStart
 10667 ;;		_I2C_2_Master_Start
 10668 ;;		_I2C_2_Master_Stop
 10669 ;;		_I2C_2_Master_Write
 10670 ;; This function is called by:
 10671 ;;		_getColor
 10672 ;; This function uses a non-reentrant model
 10673 ;;
 10674                           
 10675                           	psect	text48
 10676   004888                     __ptext48:
 10677                           	callstack 0
 10678   004888                     _color_read_Blue:
 10679                           	callstack 24
 10680   004888                     
 10681                           ;MazeRobot.X/color.c: 64:  unsigned int tmp;;MazeRobot.X/color.c: 65:  I2C_2_Master_Star
      +                          t();
 10682   004888  EC1C  F026         	call	_I2C_2_Master_Start	;wreg free
 10683                           
 10684                           ;MazeRobot.X/color.c: 66:  I2C_2_Master_Write(0x52 | 0x00);
 10685   00488C  0E52               	movlw	82
 10686   00488E  EC11  F026         	call	_I2C_2_Master_Write
 10687                           
 10688                           ;MazeRobot.X/color.c: 67:  I2C_2_Master_Write(0xA0 | 0x1A);
 10689   004892  0EBA               	movlw	186
 10690   004894  EC11  F026         	call	_I2C_2_Master_Write
 10691                           
 10692                           ;MazeRobot.X/color.c: 68:  I2C_2_Master_RepStart();
 10693   004898  EC21  F026         	call	_I2C_2_Master_RepStart	;wreg free
 10694                           
 10695                           ;MazeRobot.X/color.c: 69:  I2C_2_Master_Write(0x52 | 0x01);
 10696   00489C  0E53               	movlw	83
 10697   00489E  EC11  F026         	call	_I2C_2_Master_Write
 10698                           
 10699                           ;MazeRobot.X/color.c: 70:  tmp=I2C_2_Master_Read(1);
 10700   0048A2  0E01               	movlw	1
 10701   0048A4  ECD6  F024         	call	_I2C_2_Master_Read
 10702   0048A8  6E0B               	movwf	??_color_read_Blue^0,c
 10703   0048AA  500B               	movf	??_color_read_Blue^0,w,c
 10704   0048AC  6E0E               	movwf	color_read_Blue@tmp^0,c
 10705   0048AE  6A0F               	clrf	(color_read_Blue@tmp+1)^0,c
 10706                           
 10707                           ;MazeRobot.X/color.c: 71:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10708   0048B0  0E00               	movlw	0
 10709   0048B2  ECD6  F024         	call	_I2C_2_Master_Read
 10710   0048B6  6E0B               	movwf	??_color_read_Blue^0,c
 10711   0048B8  500B               	movf	??_color_read_Blue^0,w,c
 10712   0048BA  6E0D               	movwf	(??_color_read_Blue+2)^0,c
 10713   0048BC  6A0C               	clrf	(??_color_read_Blue+1)^0,c
 10714   0048BE  500E               	movf	color_read_Blue@tmp^0,w,c
 10715   0048C0  100C               	iorwf	(??_color_read_Blue+1)^0,w,c
 10716   0048C2  6E0E               	movwf	color_read_Blue@tmp^0,c
 10717   0048C4  500F               	movf	(color_read_Blue@tmp+1)^0,w,c
 10718   0048C6  100D               	iorwf	(??_color_read_Blue+2)^0,w,c
 10719   0048C8  6E0F               	movwf	(color_read_Blue@tmp+1)^0,c
 10720                           
 10721                           ;MazeRobot.X/color.c: 72:  I2C_2_Master_Stop();
 10722   0048CA  EC17  F026         	call	_I2C_2_Master_Stop	;wreg free
 10723   0048CE                     
 10724                           ;MazeRobot.X/color.c: 73:  return tmp;
 10725   0048CE  C00E  F009         	movff	color_read_Blue@tmp,?_color_read_Blue
 10726   0048D2  C00F  F00A         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
 10727   0048D6  0012               	return		;funcret
 10728   0048D8                     __end_of_color_read_Blue:
 10729                           	callstack 0
 10730                           
 10731 ;; *************** function _I2C_2_Master_Write *****************
 10732 ;; Defined at:
 10733 ;;		line 45 in file "MazeRobot.X/i2c.c"
 10734 ;; Parameters:    Size  Location     Type
 10735 ;;  data_byte       1    wreg     unsigned char 
 10736 ;; Auto vars:     Size  Location     Type
 10737 ;;  data_byte       1    5[COMRAM] unsigned char 
 10738 ;; Return value:  Size  Location     Type
 10739 ;;                  1    wreg      void 
 10740 ;; Registers used:
 10741 ;;		wreg, status,2, status,0, cstack
 10742 ;; Tracked objects:
 10743 ;;		On entry : 0/0
 10744 ;;		On exit  : 0/0
 10745 ;;		Unchanged: 0/0
 10746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10748 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10750 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10751 ;;Total ram usage:        1 bytes
 10752 ;; Hardware stack levels used: 1
 10753 ;; Hardware stack levels required when called: 3
 10754 ;; This function calls:
 10755 ;;		_I2C_2_Master_Idle
 10756 ;; This function is called by:
 10757 ;;		_color_writetoaddr
 10758 ;;		_color_read_Red
 10759 ;;		_color_read_Green
 10760 ;;		_color_read_Blue
 10761 ;;		_color_read_Clear
 10762 ;; This function uses a non-reentrant model
 10763 ;;
 10764                           
 10765                           	psect	text49
 10766   004C22                     __ptext49:
 10767                           	callstack 0
 10768   004C22                     _I2C_2_Master_Write:
 10769                           	callstack 24
 10770                           
 10771                           ;incstack = 0
 10772                           ;I2C_2_Master_Write@data_byte stored from wreg
 10773   004C22  6E06               	movwf	I2C_2_Master_Write@data_byte^0,c
 10774   004C24                     
 10775                           ;MazeRobot.X/i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);MazeRobot.X/i2c
      +                          .c: 46: {;MazeRobot.X/i2c.c: 47:   I2C_2_Master_Idle();
 10776   004C24  ECB5  F025         	call	_I2C_2_Master_Idle	;wreg free
 10777   004C28                     
 10778                           ;MazeRobot.X/i2c.c: 48:   SSP2BUF = data_byte;
 10779   004C28  C006  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
 10780   004C2C  0012               	return		;funcret
 10781   004C2E                     __end_of_I2C_2_Master_Write:
 10782                           	callstack 0
 10783                           
 10784 ;; *************** function _I2C_2_Master_Stop *****************
 10785 ;; Defined at:
 10786 ;;		line 39 in file "MazeRobot.X/i2c.c"
 10787 ;; Parameters:    Size  Location     Type
 10788 ;;		None
 10789 ;; Auto vars:     Size  Location     Type
 10790 ;;		None
 10791 ;; Return value:  Size  Location     Type
 10792 ;;                  1    wreg      void 
 10793 ;; Registers used:
 10794 ;;		wreg, status,2, status,0, cstack
 10795 ;; Tracked objects:
 10796 ;;		On entry : 0/0
 10797 ;;		On exit  : 0/0
 10798 ;;		Unchanged: 0/0
 10799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10803 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10804 ;;Total ram usage:        0 bytes
 10805 ;; Hardware stack levels used: 1
 10806 ;; Hardware stack levels required when called: 3
 10807 ;; This function calls:
 10808 ;;		_I2C_2_Master_Idle
 10809 ;; This function is called by:
 10810 ;;		_color_writetoaddr
 10811 ;;		_color_read_Red
 10812 ;;		_color_read_Green
 10813 ;;		_color_read_Blue
 10814 ;;		_color_read_Clear
 10815 ;; This function uses a non-reentrant model
 10816 ;;
 10817                           
 10818                           	psect	text50
 10819   004C2E                     __ptext50:
 10820                           	callstack 0
 10821   004C2E                     _I2C_2_Master_Stop:
 10822                           	callstack 24
 10823   004C2E                     
 10824                           ;MazeRobot.X/i2c.c: 41:   I2C_2_Master_Idle();
 10825   004C2E  ECB5  F025         	call	_I2C_2_Master_Idle	;wreg free
 10826   004C32                     
 10827                           ;MazeRobot.X/i2c.c: 42:   SSP2CON2bits.PEN = 1;
 10828   004C32  010E               	movlb	14	; () banked
 10829   004C34  85DA               	bsf	218,2,b	;volatile
 10830   004C36                     
 10831                           ; BSR set to: 14
 10832   004C36  0012               	return		;funcret
 10833   004C38                     __end_of_I2C_2_Master_Stop:
 10834                           	callstack 0
 10835                           
 10836 ;; *************** function _I2C_2_Master_Start *****************
 10837 ;; Defined at:
 10838 ;;		line 27 in file "MazeRobot.X/i2c.c"
 10839 ;; Parameters:    Size  Location     Type
 10840 ;;		None
 10841 ;; Auto vars:     Size  Location     Type
 10842 ;;		None
 10843 ;; Return value:  Size  Location     Type
 10844 ;;                  1    wreg      void 
 10845 ;; Registers used:
 10846 ;;		wreg, status,2, status,0, cstack
 10847 ;; Tracked objects:
 10848 ;;		On entry : 0/0
 10849 ;;		On exit  : 0/0
 10850 ;;		Unchanged: 0/0
 10851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10855 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10856 ;;Total ram usage:        0 bytes
 10857 ;; Hardware stack levels used: 1
 10858 ;; Hardware stack levels required when called: 3
 10859 ;; This function calls:
 10860 ;;		_I2C_2_Master_Idle
 10861 ;; This function is called by:
 10862 ;;		_color_writetoaddr
 10863 ;;		_color_read_Red
 10864 ;;		_color_read_Green
 10865 ;;		_color_read_Blue
 10866 ;;		_color_read_Clear
 10867 ;; This function uses a non-reentrant model
 10868 ;;
 10869                           
 10870                           	psect	text51
 10871   004C38                     __ptext51:
 10872                           	callstack 0
 10873   004C38                     _I2C_2_Master_Start:
 10874                           	callstack 24
 10875   004C38                     
 10876                           ;MazeRobot.X/i2c.c: 29:   I2C_2_Master_Idle();
 10877   004C38  ECB5  F025         	call	_I2C_2_Master_Idle	;wreg free
 10878   004C3C                     
 10879                           ;MazeRobot.X/i2c.c: 30:   SSP2CON2bits.SEN = 1;
 10880   004C3C  010E               	movlb	14	; () banked
 10881   004C3E  81DA               	bsf	218,0,b	;volatile
 10882   004C40                     
 10883                           ; BSR set to: 14
 10884   004C40  0012               	return		;funcret
 10885   004C42                     __end_of_I2C_2_Master_Start:
 10886                           	callstack 0
 10887                           
 10888 ;; *************** function _I2C_2_Master_RepStart *****************
 10889 ;; Defined at:
 10890 ;;		line 33 in file "MazeRobot.X/i2c.c"
 10891 ;; Parameters:    Size  Location     Type
 10892 ;;		None
 10893 ;; Auto vars:     Size  Location     Type
 10894 ;;		None
 10895 ;; Return value:  Size  Location     Type
 10896 ;;                  1    wreg      void 
 10897 ;; Registers used:
 10898 ;;		wreg, status,2, status,0, cstack
 10899 ;; Tracked objects:
 10900 ;;		On entry : 0/0
 10901 ;;		On exit  : 0/0
 10902 ;;		Unchanged: 0/0
 10903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10907 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10908 ;;Total ram usage:        0 bytes
 10909 ;; Hardware stack levels used: 1
 10910 ;; Hardware stack levels required when called: 3
 10911 ;; This function calls:
 10912 ;;		_I2C_2_Master_Idle
 10913 ;; This function is called by:
 10914 ;;		_color_read_Red
 10915 ;;		_color_read_Green
 10916 ;;		_color_read_Blue
 10917 ;;		_color_read_Clear
 10918 ;; This function uses a non-reentrant model
 10919 ;;
 10920                           
 10921                           	psect	text52
 10922   004C42                     __ptext52:
 10923                           	callstack 0
 10924   004C42                     _I2C_2_Master_RepStart:
 10925                           	callstack 24
 10926   004C42                     
 10927                           ;MazeRobot.X/i2c.c: 35:   I2C_2_Master_Idle();
 10928   004C42  ECB5  F025         	call	_I2C_2_Master_Idle	;wreg free
 10929   004C46                     
 10930                           ;MazeRobot.X/i2c.c: 36:   SSP2CON2bits.RSEN = 1;
 10931   004C46  010E               	movlb	14	; () banked
 10932   004C48  83DA               	bsf	218,1,b	;volatile
 10933   004C4A                     
 10934                           ; BSR set to: 14
 10935   004C4A  0012               	return		;funcret
 10936   004C4C                     __end_of_I2C_2_Master_RepStart:
 10937                           	callstack 0
 10938                           
 10939 ;; *************** function _I2C_2_Master_Read *****************
 10940 ;; Defined at:
 10941 ;;		line 51 in file "MazeRobot.X/i2c.c"
 10942 ;; Parameters:    Size  Location     Type
 10943 ;;  ack             1    wreg     unsigned char 
 10944 ;; Auto vars:     Size  Location     Type
 10945 ;;  ack             1    6[COMRAM] unsigned char 
 10946 ;;  tmp             1    7[COMRAM] unsigned char 
 10947 ;; Return value:  Size  Location     Type
 10948 ;;                  1    wreg      unsigned char 
 10949 ;; Registers used:
 10950 ;;		wreg, status,2, status,0, cstack
 10951 ;; Tracked objects:
 10952 ;;		On entry : 0/0
 10953 ;;		On exit  : 0/0
 10954 ;;		Unchanged: 0/0
 10955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10957 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10958 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10959 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10960 ;;Total ram usage:        3 bytes
 10961 ;; Hardware stack levels used: 1
 10962 ;; Hardware stack levels required when called: 3
 10963 ;; This function calls:
 10964 ;;		_I2C_2_Master_Idle
 10965 ;; This function is called by:
 10966 ;;		_color_read_Red
 10967 ;;		_color_read_Green
 10968 ;;		_color_read_Blue
 10969 ;;		_color_read_Clear
 10970 ;; This function uses a non-reentrant model
 10971 ;;
 10972                           
 10973                           	psect	text53
 10974   0049AC                     __ptext53:
 10975                           	callstack 0
 10976   0049AC                     _I2C_2_Master_Read:
 10977                           	callstack 24
 10978                           
 10979                           ; BSR set to: 14
 10980                           ;incstack = 0
 10981                           ;I2C_2_Master_Read@ack stored from wreg
 10982   0049AC  6E07               	movwf	I2C_2_Master_Read@ack^0,c
 10983   0049AE                     
 10984                           ;MazeRobot.X/i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);MazeRobot.X/i
      +                          2c.c: 52: {;MazeRobot.X/i2c.c: 53:   unsigned char tmp;;MazeRobot.X/i2c.c: 54:   I2C_2_M
      +                          aster_Idle();
 10985   0049AE  ECB5  F025         	call	_I2C_2_Master_Idle	;wreg free
 10986   0049B2                     
 10987                           ;MazeRobot.X/i2c.c: 55:   SSP2CON2bits.RCEN = 1;
 10988   0049B2  010E               	movlb	14	; () banked
 10989   0049B4  87DA               	bsf	218,3,b	;volatile
 10990                           
 10991                           ;MazeRobot.X/i2c.c: 56:   I2C_2_Master_Idle();
 10992   0049B6  ECB5  F025         	call	_I2C_2_Master_Idle	;wreg free
 10993   0049BA                     
 10994                           ;MazeRobot.X/i2c.c: 57:   tmp = SSP2BUF;
 10995   0049BA  CED5 F008          	movff	3797,I2C_2_Master_Read@tmp	;volatile
 10996                           
 10997                           ;MazeRobot.X/i2c.c: 58:   I2C_2_Master_Idle();
 10998   0049BE  ECB5  F025         	call	_I2C_2_Master_Idle	;wreg free
 10999   0049C2                     
 11000                           ;MazeRobot.X/i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
 11001   0049C2  5007               	movf	I2C_2_Master_Read@ack^0,w,c
 11002   0049C4  B4D8               	btfsc	status,2,c
 11003   0049C6  EFE7  F024         	goto	u2991
 11004   0049CA  EFEB  F024         	goto	u2990
 11005   0049CE                     u2991:
 11006   0049CE  6A06               	clrf	??_I2C_2_Master_Read^0,c
 11007   0049D0  2A06               	incf	??_I2C_2_Master_Read^0,f,c
 11008   0049D2  EFEC  F024         	goto	u3008
 11009   0049D6                     u2990:
 11010   0049D6  6A06               	clrf	??_I2C_2_Master_Read^0,c
 11011   0049D8                     u3008:
 11012   0049D8  3A06               	swapf	??_I2C_2_Master_Read^0,f,c
 11013   0049DA  4606               	rlncf	??_I2C_2_Master_Read^0,f,c
 11014   0049DC  010E               	movlb	14	; () banked
 11015   0049DE  51DA               	movf	218,w,b	;volatile
 11016   0049E0  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
 11017   0049E2  0BDF               	andlw	-33
 11018   0049E4  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
 11019   0049E6  6FDA               	movwf	218,b	;volatile
 11020   0049E8                     
 11021                           ; BSR set to: 14
 11022                           ;MazeRobot.X/i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
 11023   0049E8  89DA               	bsf	218,4,b	;volatile
 11024   0049EA                     
 11025                           ; BSR set to: 14
 11026                           ;MazeRobot.X/i2c.c: 61:   return tmp;
 11027   0049EA  5008               	movf	I2C_2_Master_Read@tmp^0,w,c
 11028   0049EC                     
 11029                           ; BSR set to: 14
 11030   0049EC  0012               	return		;funcret
 11031   0049EE                     __end_of_I2C_2_Master_Read:
 11032                           	callstack 0
 11033                           
 11034 ;; *************** function _I2C_2_Master_Idle *****************
 11035 ;; Defined at:
 11036 ;;		line 22 in file "MazeRobot.X/i2c.c"
 11037 ;; Parameters:    Size  Location     Type
 11038 ;;		None
 11039 ;; Auto vars:     Size  Location     Type
 11040 ;;		None
 11041 ;; Return value:  Size  Location     Type
 11042 ;;                  1    wreg      void 
 11043 ;; Registers used:
 11044 ;;		wreg, status,2, status,0
 11045 ;; Tracked objects:
 11046 ;;		On entry : 0/0
 11047 ;;		On exit  : 0/0
 11048 ;;		Unchanged: 0/0
 11049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11051 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11052 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11053 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11054 ;;Total ram usage:        1 bytes
 11055 ;; Hardware stack levels used: 1
 11056 ;; Hardware stack levels required when called: 2
 11057 ;; This function calls:
 11058 ;;		Nothing
 11059 ;; This function is called by:
 11060 ;;		_I2C_2_Master_Start
 11061 ;;		_I2C_2_Master_RepStart
 11062 ;;		_I2C_2_Master_Stop
 11063 ;;		_I2C_2_Master_Write
 11064 ;;		_I2C_2_Master_Read
 11065 ;; This function uses a non-reentrant model
 11066 ;;
 11067                           
 11068                           	psect	text54
 11069   004B6A                     __ptext54:
 11070                           	callstack 0
 11071   004B6A                     _I2C_2_Master_Idle:
 11072                           	callstack 24
 11073   004B6A                     l312:
 11074   004B6A  010E               	movlb	14	; () banked
 11075   004B6C  B5D8               	btfsc	216,2,b	;volatile
 11076   004B6E  EFBB  F025         	goto	u2871
 11077   004B72  EFBD  F025         	goto	u2870
 11078   004B76                     u2871:
 11079   004B76  EFB5  F025         	goto	l312
 11080   004B7A                     u2870:
 11081   004B7A                     
 11082                           ; BSR set to: 14
 11083   004B7A  CEDA F005          	movff	3802,??_I2C_2_Master_Idle	;volatile
 11084   004B7E  0E1F               	movlw	31
 11085   004B80  1605               	andwf	??_I2C_2_Master_Idle^0,f,c
 11086   004B82  A4D8               	btfss	status,2,c
 11087   004B84  EFC6  F025         	goto	u2881
 11088   004B88  EFC8  F025         	goto	u2880
 11089   004B8C                     u2881:
 11090   004B8C  EFB5  F025         	goto	l312
 11091   004B90                     u2880:
 11092   004B90                     
 11093                           ; BSR set to: 14
 11094   004B90  0012               	return		;funcret
 11095   004B92                     __end_of_I2C_2_Master_Idle:
 11096                           	callstack 0
 11097                           
 11098 ;; *************** function _DCmotorsInit *****************
 11099 ;; Defined at:
 11100 ;;		line 75 in file "MazeRobot.X/dc_motor.c"
 11101 ;; Parameters:    Size  Location     Type
 11102 ;;  mL              2    4[COMRAM] PTR struct DC_motor
 11103 ;;		 -> main@motorLeft(9), 
 11104 ;;  mR              2    6[COMRAM] PTR struct DC_motor
 11105 ;;		 -> main@motorRight(9), 
 11106 ;; Auto vars:     Size  Location     Type
 11107 ;;		None
 11108 ;; Return value:  Size  Location     Type
 11109 ;;                  1    wreg      void 
 11110 ;; Registers used:
 11111 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11112 ;; Tracked objects:
 11113 ;;		On entry : 0/0
 11114 ;;		On exit  : 0/0
 11115 ;;		Unchanged: 0/0
 11116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11117 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11118 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11120 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11121 ;;Total ram usage:        4 bytes
 11122 ;; Hardware stack levels used: 1
 11123 ;; Hardware stack levels required when called: 2
 11124 ;; This function calls:
 11125 ;;		Nothing
 11126 ;; This function is called by:
 11127 ;;		_main
 11128 ;; This function uses a non-reentrant model
 11129 ;;
 11130                           
 11131                           	psect	text55
 11132   0041A0                     __ptext55:
 11133                           	callstack 0
 11134   0041A0                     _DCmotorsInit:
 11135                           	callstack 28
 11136   0041A0                     
 11137                           ;MazeRobot.X/dc_motor.c: 77:     mL->power = 0;
 11138   0041A0  C005  FFD9         	movff	DCmotorsInit@mL,fsr2l
 11139   0041A4  C006  FFDA         	movff	DCmotorsInit@mL+1,fsr2h
 11140   0041A8  0E00               	movlw	0
 11141   0041AA  6EDF               	movwf	indf2,c
 11142   0041AC                     
 11143                           ;MazeRobot.X/dc_motor.c: 78:     mL->direction = 1;
 11144   0041AC  EE20 F001          	lfsr	2,1
 11145   0041B0  5005               	movf	DCmotorsInit@mL^0,w,c
 11146   0041B2  26D9               	addwf	fsr2l,f,c
 11147   0041B4  5006               	movf	(DCmotorsInit@mL+1)^0,w,c
 11148   0041B6  22DA               	addwfc	fsr2h,f,c
 11149   0041B8  0E01               	movlw	1
 11150   0041BA  6EDF               	movwf	indf2,c
 11151   0041BC                     
 11152                           ;MazeRobot.X/dc_motor.c: 79:     mL->brakemode = 1;
 11153   0041BC  EE20 F002          	lfsr	2,2
 11154   0041C0  5005               	movf	DCmotorsInit@mL^0,w,c
 11155   0041C2  26D9               	addwf	fsr2l,f,c
 11156   0041C4  5006               	movf	(DCmotorsInit@mL+1)^0,w,c
 11157   0041C6  22DA               	addwfc	fsr2h,f,c
 11158   0041C8  0E01               	movlw	1
 11159   0041CA  6EDF               	movwf	indf2,c
 11160   0041CC                     
 11161                           ;MazeRobot.X/dc_motor.c: 80:     mL->posDutyHighByte = (unsigned char *)(&CCPR1H);
 11162   0041CC  EE20 F005          	lfsr	2,5
 11163   0041D0  5005               	movf	DCmotorsInit@mL^0,w,c
 11164   0041D2  26D9               	addwf	fsr2l,f,c
 11165   0041D4  5006               	movf	(DCmotorsInit@mL+1)^0,w,c
 11166   0041D6  22DA               	addwfc	fsr2h,f,c
 11167   0041D8  0EAA               	movlw	170
 11168   0041DA  6EDE               	movwf	postinc2,c
 11169   0041DC  0E0F               	movlw	15
 11170   0041DE  6EDD               	movwf	postdec2,c
 11171   0041E0                     
 11172                           ;MazeRobot.X/dc_motor.c: 81:     mL->negDutyHighByte = (unsigned char *)(&CCPR2H);
 11173   0041E0  EE20 F007          	lfsr	2,7
 11174   0041E4  5005               	movf	DCmotorsInit@mL^0,w,c
 11175   0041E6  26D9               	addwf	fsr2l,f,c
 11176   0041E8  5006               	movf	(DCmotorsInit@mL+1)^0,w,c
 11177   0041EA  22DA               	addwfc	fsr2h,f,c
 11178   0041EC  0EA6               	movlw	166
 11179   0041EE  6EDE               	movwf	postinc2,c
 11180   0041F0  0E0F               	movlw	15
 11181   0041F2  6EDD               	movwf	postdec2,c
 11182   0041F4                     
 11183                           ;MazeRobot.X/dc_motor.c: 82:     mL->PWMperiod = 199 ;
 11184   0041F4  EE20 F003          	lfsr	2,3
 11185   0041F8  5005               	movf	DCmotorsInit@mL^0,w,c
 11186   0041FA  26D9               	addwf	fsr2l,f,c
 11187   0041FC  5006               	movf	(DCmotorsInit@mL+1)^0,w,c
 11188   0041FE  22DA               	addwfc	fsr2h,f,c
 11189   004200  0EC7               	movlw	199
 11190   004202  6EDE               	movwf	postinc2,c
 11191   004204  0E00               	movlw	0
 11192   004206  6EDD               	movwf	postdec2,c
 11193   004208                     
 11194                           ;MazeRobot.X/dc_motor.c: 84:     mR->power = 0;
 11195   004208  C007  FFD9         	movff	DCmotorsInit@mR,fsr2l
 11196   00420C  C008  FFDA         	movff	DCmotorsInit@mR+1,fsr2h
 11197   004210  0E00               	movlw	0
 11198   004212  6EDF               	movwf	indf2,c
 11199                           
 11200                           ;MazeRobot.X/dc_motor.c: 85:     mR->direction = 1;
 11201   004214  EE20 F001          	lfsr	2,1
 11202   004218  5007               	movf	DCmotorsInit@mR^0,w,c
 11203   00421A  26D9               	addwf	fsr2l,f,c
 11204   00421C  5008               	movf	(DCmotorsInit@mR+1)^0,w,c
 11205   00421E  22DA               	addwfc	fsr2h,f,c
 11206   004220  0E01               	movlw	1
 11207   004222  6EDF               	movwf	indf2,c
 11208                           
 11209                           ;MazeRobot.X/dc_motor.c: 86:     mR->brakemode = 1;
 11210   004224  EE20 F002          	lfsr	2,2
 11211   004228  5007               	movf	DCmotorsInit@mR^0,w,c
 11212   00422A  26D9               	addwf	fsr2l,f,c
 11213   00422C  5008               	movf	(DCmotorsInit@mR+1)^0,w,c
 11214   00422E  22DA               	addwfc	fsr2h,f,c
 11215   004230  0E01               	movlw	1
 11216   004232  6EDF               	movwf	indf2,c
 11217                           
 11218                           ;MazeRobot.X/dc_motor.c: 87:     mR->posDutyHighByte = (unsigned char *)(&CCPR3H);
 11219   004234  EE20 F005          	lfsr	2,5
 11220   004238  5007               	movf	DCmotorsInit@mR^0,w,c
 11221   00423A  26D9               	addwf	fsr2l,f,c
 11222   00423C  5008               	movf	(DCmotorsInit@mR+1)^0,w,c
 11223   00423E  22DA               	addwfc	fsr2h,f,c
 11224   004240  0E25               	movlw	37
 11225   004242  6EDE               	movwf	postinc2,c
 11226   004244  0E0F               	movlw	15
 11227   004246  6EDD               	movwf	postdec2,c
 11228                           
 11229                           ;MazeRobot.X/dc_motor.c: 88:     mR->negDutyHighByte = (unsigned char *)(&CCPR4H);
 11230   004248  EE20 F007          	lfsr	2,7
 11231   00424C  5007               	movf	DCmotorsInit@mR^0,w,c
 11232   00424E  26D9               	addwf	fsr2l,f,c
 11233   004250  5008               	movf	(DCmotorsInit@mR+1)^0,w,c
 11234   004252  22DA               	addwfc	fsr2h,f,c
 11235   004254  0E21               	movlw	33
 11236   004256  6EDE               	movwf	postinc2,c
 11237   004258  0E0F               	movlw	15
 11238   00425A  6EDD               	movwf	postdec2,c
 11239                           
 11240                           ;MazeRobot.X/dc_motor.c: 89:     mR->PWMperiod = 199 ;
 11241   00425C  EE20 F003          	lfsr	2,3
 11242   004260  5007               	movf	DCmotorsInit@mR^0,w,c
 11243   004262  26D9               	addwf	fsr2l,f,c
 11244   004264  5008               	movf	(DCmotorsInit@mR+1)^0,w,c
 11245   004266  22DA               	addwfc	fsr2h,f,c
 11246   004268  0EC7               	movlw	199
 11247   00426A  6EDE               	movwf	postinc2,c
 11248   00426C  0E00               	movlw	0
 11249   00426E  6EDD               	movwf	postdec2,c
 11250   004270  0012               	return		;funcret
 11251   004272                     __end_of_DCmotorsInit:
 11252                           	callstack 0
 11253                           
 11254 ;; *************** function _HighISR *****************
 11255 ;; Defined at:
 11256 ;;		line 132 in file "serialTest.c"
 11257 ;; Parameters:    Size  Location     Type
 11258 ;;		None
 11259 ;; Auto vars:     Size  Location     Type
 11260 ;;		None
 11261 ;; Return value:  Size  Location     Type
 11262 ;;                  1    wreg      void 
 11263 ;; Registers used:
 11264 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11265 ;; Tracked objects:
 11266 ;;		On entry : 0/0
 11267 ;;		On exit  : 0/0
 11268 ;;		Unchanged: 0/0
 11269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11271 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11272 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11273 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11274 ;;Total ram usage:        2 bytes
 11275 ;; Hardware stack levels used: 1
 11276 ;; Hardware stack levels required when called: 1
 11277 ;; This function calls:
 11278 ;;		_getCharFromTxBuf
 11279 ;;		_putCharToRxBuf
 11280 ;;		i2_isDataInTxBuf
 11281 ;; This function is called by:
 11282 ;;		Interrupt level 2
 11283 ;; This function uses a non-reentrant model
 11284 ;;
 11285                           
 11286                           	psect	intcode
 11287   000008                     __pintcode:
 11288                           	callstack 0
 11289   000008                     _HighISR:
 11290                           	callstack 20
 11291                           
 11292                           ;incstack = 0
 11293   000008  825B               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
 11294   00000A  CFD9 F003          	movff	fsr2l,??_HighISR
 11295   00000E  CFDA F004          	movff	fsr2h,??_HighISR+1
 11296   000012                     
 11297                           ;serialTest.c: 134:     if (PIR4bits.RC4IF){
 11298   000012  010E               	movlb	14	; () banked
 11299   000014  A737               	btfss	55,3,b	;volatile
 11300   000016  EF0F  F000         	goto	i2u505_41
 11301   00001A  EF11  F000         	goto	i2u505_40
 11302   00001E                     i2u505_41:
 11303   00001E  EF14  F000         	goto	i2l4792
 11304   000022                     i2u505_40:
 11305   000022                     
 11306                           ; BSR set to: 14
 11307                           ;serialTest.c: 135:         putCharToRxBuf(RC4REG);
 11308   000022  51E3               	movf	227,w,b	;volatile
 11309   000024  ECA0  F025         	call	_putCharToRxBuf
 11310   000028                     i2l4792:
 11311                           
 11312                           ;serialTest.c: 138:     if (PIR4bits.TX4IF && PIE4bits.TX4IE == 1){
 11313   000028  010E               	movlb	14	; () banked
 11314   00002A  A537               	btfss	55,2,b	;volatile
 11315   00002C  EF1A  F000         	goto	i2u506_41
 11316   000030  EF1C  F000         	goto	i2u506_40
 11317   000034                     i2u506_41:
 11318   000034  EF35  F000         	goto	i2l549
 11319   000038                     i2u506_40:
 11320   000038                     
 11321                           ; BSR set to: 14
 11322   000038  A52D               	btfss	45,2,b	;volatile
 11323   00003A  EF21  F000         	goto	i2u507_41
 11324   00003E  EF23  F000         	goto	i2u507_40
 11325   000042                     i2u507_41:
 11326   000042  EF35  F000         	goto	i2l549
 11327   000046                     i2u507_40:
 11328   000046                     
 11329                           ; BSR set to: 14
 11330                           ;serialTest.c: 139:         if (isDataInTxBuf() == 1){
 11331   000046  EC05  F026         	call	i2_isDataInTxBuf	;wreg free
 11332   00004A  06E8               	decf	wreg,f,c
 11333   00004C  A4D8               	btfss	status,2,c
 11334   00004E  EF2B  F000         	goto	i2u508_41
 11335   000052  EF2D  F000         	goto	i2u508_40
 11336   000056                     i2u508_41:
 11337   000056  EF33  F000         	goto	i2l547
 11338   00005A                     i2u508_40:
 11339   00005A                     
 11340                           ;serialTest.c: 140:            TX4REG = getCharFromTxBuf();
 11341   00005A  EC60  F025         	call	_getCharFromTxBuf	;wreg free
 11342   00005E  010E               	movlb	14	; () banked
 11343   000060  6FE4               	movwf	228,b	;volatile
 11344                           
 11345                           ;serialTest.c: 141:         }
 11346   000062  EF35  F000         	goto	i2l549
 11347   000066                     i2l547:
 11348                           
 11349                           ;serialTest.c: 143:            PIE4bits.TX4IE = 0;
 11350   000066  010E               	movlb	14	; () banked
 11351   000068  952D               	bcf	45,2,b	;volatile
 11352   00006A                     i2l549:
 11353                           
 11354                           ; BSR set to: 14
 11355   00006A  C004  FFDA         	movff	??_HighISR+1,fsr2h
 11356   00006E  C003  FFD9         	movff	??_HighISR,fsr2l
 11357   000072  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
 11358   000074  0011               	retfie		f
 11359   000076                     __end_of_HighISR:
 11360                           	callstack 0
 11361                           
 11362 ;; *************** function i2_isDataInTxBuf *****************
 11363 ;; Defined at:
 11364 ;;		line 113 in file "serialTest.c"
 11365 ;; Parameters:    Size  Location     Type
 11366 ;;		None
 11367 ;; Auto vars:     Size  Location     Type
 11368 ;;		None
 11369 ;; Return value:  Size  Location     Type
 11370 ;;                  1    wreg      unsigned char 
 11371 ;; Registers used:
 11372 ;;		wreg, status,2, status,0
 11373 ;; Tracked objects:
 11374 ;;		On entry : 0/0
 11375 ;;		On exit  : 0/0
 11376 ;;		Unchanged: 0/0
 11377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11381 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11382 ;;Total ram usage:        0 bytes
 11383 ;; Hardware stack levels used: 1
 11384 ;; This function calls:
 11385 ;;		Nothing
 11386 ;; This function is called by:
 11387 ;;		_HighISR
 11388 ;; This function uses a non-reentrant model
 11389 ;;
 11390                           
 11391                           	psect	text57
 11392   004C0A                     __ptext57:
 11393                           	callstack 0
 11394   004C0A                     i2_isDataInTxBuf:
 11395                           	callstack 20
 11396   004C0A                     
 11397                           ;serialTest.c: 114:     return (TxBufWriteCnt!=TxBufReadCnt);
 11398   004C0A  5057               	movf	_TxBufReadCnt^0,w,c	;volatile
 11399   004C0C  1858               	xorwf	_TxBufWriteCnt^0,w,c	;volatile
 11400   004C0E  A4D8               	btfss	status,2,c
 11401   004C10  EF0C  F026         	goto	i2u221_41
 11402   004C14  EF0F  F026         	goto	i2u221_40
 11403   004C18                     i2u221_41:
 11404   004C18  0E01               	movlw	1
 11405   004C1A  EF10  F026         	goto	i2u222_40
 11406   004C1E                     i2u221_40:
 11407   004C1E  0E00               	movlw	0
 11408   004C20                     i2u222_40:
 11409   004C20  0012               	return		;funcret
 11410   004C22                     __end_ofi2_isDataInTxBuf:
 11411                           	callstack 0
 11412                           
 11413 ;; *************** function _putCharToRxBuf *****************
 11414 ;; Defined at:
 11415 ;;		line 85 in file "serialTest.c"
 11416 ;; Parameters:    Size  Location     Type
 11417 ;;  byte            1    wreg     unsigned char 
 11418 ;; Auto vars:     Size  Location     Type
 11419 ;;  byte            1    0[COMRAM] unsigned char 
 11420 ;; Return value:  Size  Location     Type
 11421 ;;                  1    wreg      void 
 11422 ;; Registers used:
 11423 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11424 ;; Tracked objects:
 11425 ;;		On entry : 0/0
 11426 ;;		On exit  : 0/0
 11427 ;;		Unchanged: 0/0
 11428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11430 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11432 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11433 ;;Total ram usage:        1 bytes
 11434 ;; Hardware stack levels used: 1
 11435 ;; This function calls:
 11436 ;;		Nothing
 11437 ;; This function is called by:
 11438 ;;		_HighISR
 11439 ;; This function uses a non-reentrant model
 11440 ;;
 11441                           
 11442                           	psect	text58
 11443   004B40                     __ptext58:
 11444                           	callstack 0
 11445   004B40                     _putCharToRxBuf:
 11446                           	callstack 20
 11447                           
 11448                           ;incstack = 0
 11449                           ;putCharToRxBuf@byte stored from wreg
 11450   004B40  6E01               	movwf	putCharToRxBuf@byte^0,c
 11451   004B42                     
 11452                           ;serialTest.c: 86:     if (RxBufWriteCnt>=20) {RxBufWriteCnt=0;}
 11453   004B42  0E13               	movlw	19
 11454   004B44  645A               	cpfsgt	_RxBufWriteCnt^0,c	;volatile
 11455   004B46  EFA7  F025         	goto	i2u477_41
 11456   004B4A  EFA9  F025         	goto	i2u477_40
 11457   004B4E                     i2u477_41:
 11458   004B4E  EFAB  F025         	goto	i2l4570
 11459   004B52                     i2u477_40:
 11460   004B52  0E00               	movlw	0
 11461   004B54  6E5A               	movwf	_RxBufWriteCnt^0,c	;volatile
 11462   004B56                     i2l4570:
 11463                           
 11464                           ;serialTest.c: 87:     EUSART4RXbuf[RxBufWriteCnt++]=byte;
 11465   004B56  0E60               	movlw	low _EUSART4RXbuf
 11466   004B58  245A               	addwf	_RxBufWriteCnt^0,w,c	;volatile
 11467   004B5A  6ED9               	movwf	fsr2l,c
 11468   004B5C  6ADA               	clrf	fsr2h,c
 11469   004B5E  0E00               	movlw	high _EUSART4RXbuf
 11470   004B60  22DA               	addwfc	fsr2h,f,c
 11471   004B62  C001  FFDF         	movff	putCharToRxBuf@byte,indf2
 11472   004B66  2A5A               	incf	_RxBufWriteCnt^0,f,c	;volatile
 11473   004B68  0012               	return		;funcret
 11474   004B6A                     __end_of_putCharToRxBuf:
 11475                           	callstack 0
 11476                           
 11477 ;; *************** function _getCharFromTxBuf *****************
 11478 ;; Defined at:
 11479 ;;		line 99 in file "serialTest.c"
 11480 ;; Parameters:    Size  Location     Type
 11481 ;;		None
 11482 ;; Auto vars:     Size  Location     Type
 11483 ;;		None
 11484 ;; Return value:  Size  Location     Type
 11485 ;;                  1    wreg      unsigned char 
 11486 ;; Registers used:
 11487 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11488 ;; Tracked objects:
 11489 ;;		On entry : 0/0
 11490 ;;		On exit  : 0/0
 11491 ;;		Unchanged: 0/0
 11492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11495 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11496 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11497 ;;Total ram usage:        2 bytes
 11498 ;; Hardware stack levels used: 1
 11499 ;; This function calls:
 11500 ;;		Nothing
 11501 ;; This function is called by:
 11502 ;;		_HighISR
 11503 ;; This function uses a non-reentrant model
 11504 ;;
 11505                           
 11506                           	psect	text59
 11507   004AC0                     __ptext59:
 11508                           	callstack 0
 11509   004AC0                     _getCharFromTxBuf:
 11510                           	callstack 20
 11511   004AC0                     
 11512                           ;serialTest.c: 100:     if (TxBufReadCnt>=60) {TxBufReadCnt=0;}
 11513   004AC0  0E3B               	movlw	59
 11514   004AC2  6457               	cpfsgt	_TxBufReadCnt^0,c	;volatile
 11515   004AC4  EF66  F025         	goto	i2u478_41
 11516   004AC8  EF68  F025         	goto	i2u478_40
 11517   004ACC                     i2u478_41:
 11518   004ACC  EF6A  F025         	goto	i2l4578
 11519   004AD0                     i2u478_40:
 11520   004AD0  0E00               	movlw	0
 11521   004AD2  6E57               	movwf	_TxBufReadCnt^0,c	;volatile
 11522   004AD4                     i2l4578:
 11523                           
 11524                           ;serialTest.c: 101:     return EUSART4TXbuf[TxBufReadCnt++];
 11525   004AD4  2A57               	incf	_TxBufReadCnt^0,f,c	;volatile
 11526   004AD6  0457               	decf	_TxBufReadCnt^0,w,c	;volatile
 11527   004AD8  6E01               	movwf	??_getCharFromTxBuf^0,c
 11528   004ADA  6A02               	clrf	(??_getCharFromTxBuf+1)^0,c
 11529   004ADC  0E9A               	movlw	low _EUSART4TXbuf
 11530   004ADE  2401               	addwf	??_getCharFromTxBuf^0,w,c
 11531   004AE0  6ED9               	movwf	fsr2l,c
 11532   004AE2  0E01               	movlw	high _EUSART4TXbuf
 11533   004AE4  2002               	addwfc	(??_getCharFromTxBuf+1)^0,w,c
 11534   004AE6  6EDA               	movwf	fsr2h,c
 11535   004AE8  50DF               	movf	indf2,w,c
 11536   004AEA  0012               	return		;funcret
 11537   004AEC                     __end_of_getCharFromTxBuf:
 11538                           	callstack 0
 11539                           
 11540                           	psect	rparam
 11541   000000                     
 11542                           	psect	temp
 11543   00005B                     btemp:
 11544                           	callstack 0
 11545   00005B                     	ds	1
 11546   000000                     int$flags	set	btemp
 11547   000000                     wtemp8	set	btemp+1
 11548   000000                     ttemp5	set	btemp+1
 11549   000000                     ttemp6	set	btemp+4
 11550   000000                     ttemp7	set	btemp+8
 11551                           
 11552                           	psect	idloc
 11553                           
 11554                           ;Config register IDLOC0 @ 0x200000
 11555                           ;	unspecified, using default values
 11556   200000                     	org	2097152
 11557   200000  0FFF               	dw	4095
 11558                           
 11559                           ;Config register IDLOC1 @ 0x200002
 11560                           ;	unspecified, using default values
 11561   200002                     	org	2097154
 11562   200002  0FFF               	dw	4095
 11563                           
 11564                           ;Config register IDLOC2 @ 0x200004
 11565                           ;	unspecified, using default values
 11566   200004                     	org	2097156
 11567   200004  0FFF               	dw	4095
 11568                           
 11569                           ;Config register IDLOC3 @ 0x200006
 11570                           ;	unspecified, using default values
 11571   200006                     	org	2097158
 11572   200006  0FFF               	dw	4095
 11573                           
 11574                           ;Config register IDLOC4 @ 0x200008
 11575                           ;	unspecified, using default values
 11576   200008                     	org	2097160
 11577   200008  0FFF               	dw	4095
 11578                           
 11579                           ;Config register IDLOC5 @ 0x20000A
 11580                           ;	unspecified, using default values
 11581   20000A                     	org	2097162
 11582   20000A  0FFF               	dw	4095
 11583                           
 11584                           ;Config register IDLOC6 @ 0x20000C
 11585                           ;	unspecified, using default values
 11586   20000C                     	org	2097164
 11587   20000C  0FFF               	dw	4095
 11588                           
 11589                           ;Config register IDLOC7 @ 0x20000E
 11590                           ;	unspecified, using default values
 11591   20000E                     	org	2097166
 11592   20000E  0FFF               	dw	4095
 11593                           
 11594                           	psect	config
 11595                           
 11596                           ;Config register CONFIG1L @ 0x300000
 11597                           ;	External Oscillator mode Selection bits
 11598                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
 11599                           ;	Power-up default value for COSC bits
 11600                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
 11601   300000                     	org	3145728
 11602   300000  AA                 	db	170
 11603                           
 11604                           ;Config register CONFIG1H @ 0x300001
 11605                           ;	unspecified, using default values
 11606                           ;	Clock Out Enable bit
 11607                           ;	CLKOUTEN = 0x1, unprogrammed default
 11608                           ;	Clock Switch Enable bit
 11609                           ;	CSWEN = 0x1, unprogrammed default
 11610                           ;	Fail-Safe Clock Monitor Enable bit
 11611                           ;	FCMEN = 0x1, unprogrammed default
 11612   300001                     	org	3145729
 11613   300001  FF                 	db	255
 11614                           
 11615                           ;Config register CONFIG2L @ 0x300002
 11616                           ;	unspecified, using default values
 11617                           ;	Master Clear Enable bit
 11618                           ;	MCLRE = 0x1, unprogrammed default
 11619                           ;	Power-up Timer Enable bit
 11620                           ;	PWRTE = 0x1, unprogrammed default
 11621                           ;	Low-power BOR enable bit
 11622                           ;	LPBOREN = 0x1, unprogrammed default
 11623                           ;	Brown-out Reset Enable bits
 11624                           ;	BOREN = 0x3, unprogrammed default
 11625   300002                     	org	3145730
 11626   300002  FF                 	db	255
 11627                           
 11628                           ;Config register CONFIG2H @ 0x300003
 11629                           ;	unspecified, using default values
 11630                           ;	Brown Out Reset Voltage selection bits
 11631                           ;	BORV = 0x3, unprogrammed default
 11632                           ;	ZCD Disable bit
 11633                           ;	ZCD = 0x1, unprogrammed default
 11634                           ;	PPSLOCK bit One-Way Set Enable bit
 11635                           ;	PPS1WAY = 0x1, unprogrammed default
 11636                           ;	Stack Full/Underflow Reset Enable bit
 11637                           ;	STVREN = 0x1, unprogrammed default
 11638                           ;	Debugger Enable bit
 11639                           ;	DEBUG = 0x1, unprogrammed default
 11640                           ;	Extended Instruction Set Enable bit
 11641                           ;	XINST = 0x1, unprogrammed default
 11642   300003                     	org	3145731
 11643   300003  FF                 	db	255
 11644                           
 11645                           ;Config register CONFIG3L @ 0x300004
 11646                           ;	WDT Period Select bits
 11647                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
 11648                           ;	WDT operating mode
 11649                           ;	WDTE = OFF, WDT Disabled
 11650   300004                     	org	3145732
 11651   300004  9F                 	db	159
 11652                           
 11653                           ;Config register CONFIG3H @ 0x300005
 11654                           ;	unspecified, using default values
 11655                           ;	WDT Window Select bits
 11656                           ;	WDTCWS = 0x7, unprogrammed default
 11657                           ;	WDT input clock selector
 11658                           ;	WDTCCS = 0x7, unprogrammed default
 11659   300005                     	org	3145733
 11660   300005  FF                 	db	255
 11661                           
 11662                           ;Config register CONFIG4L @ 0x300006
 11663                           ;	unspecified, using default values
 11664                           ;	Write Protection Block 0
 11665                           ;	WRT0 = 0x1, unprogrammed default
 11666                           ;	Write Protection Block 1
 11667                           ;	WRT1 = 0x1, unprogrammed default
 11668                           ;	Write Protection Block 2
 11669                           ;	WRT2 = 0x1, unprogrammed default
 11670                           ;	Write Protection Block 3
 11671                           ;	WRT3 = 0x1, unprogrammed default
 11672                           ;	Write Protection Block 3
 11673                           ;	WRT4 = 0x1, unprogrammed default
 11674                           ;	Write Protection Block 3
 11675                           ;	WRT5 = 0x1, unprogrammed default
 11676                           ;	Write Protection Block 3
 11677                           ;	WRT6 = 0x1, unprogrammed default
 11678                           ;	Write Protection Block 3
 11679                           ;	WRT7 = 0x1, unprogrammed default
 11680   300006                     	org	3145734
 11681   300006  FF                 	db	255
 11682                           
 11683                           ;Config register CONFIG4H @ 0x300007
 11684                           ;	unspecified, using default values
 11685                           ;	Configuration Register Write Protection bit
 11686                           ;	WRTC = 0x1, unprogrammed default
 11687                           ;	Boot Block Write Protection bit
 11688                           ;	WRTB = 0x1, unprogrammed default
 11689                           ;	Data EEPROM Write Protection bit
 11690                           ;	WRTD = 0x1, unprogrammed default
 11691                           ;	Scanner Enable bit
 11692                           ;	SCANE = 0x1, unprogrammed default
 11693                           ;	Low Voltage Programming Enable bit
 11694                           ;	LVP = 0x1, unprogrammed default
 11695   300007                     	org	3145735
 11696   300007  FF                 	db	255
 11697                           
 11698                           ;Config register CONFIG5L @ 0x300008
 11699                           ;	unspecified, using default values
 11700                           ;	UserNVM Program Memory Code Protection bit
 11701                           ;	CP = 0x1, unprogrammed default
 11702                           ;	DataNVM Memory Code Protection bit
 11703                           ;	CPD = 0x1, unprogrammed default
 11704   300008                     	org	3145736
 11705   300008  FF                 	db	255
 11706                           
 11707                           ;Config register CONFIG5H @ 0x300009
 11708                           ;	unspecified, using default values
 11709   300009                     	org	3145737
 11710   300009  FF                 	db	255
 11711                           
 11712                           ;Config register CONFIG6L @ 0x30000A
 11713                           ;	unspecified, using default values
 11714                           ;	Table Read Protection Block 0
 11715                           ;	EBTR0 = 0x1, unprogrammed default
 11716                           ;	Table Read Protection Block 1
 11717                           ;	EBTR1 = 0x1, unprogrammed default
 11718                           ;	Table Read Protection Block 2
 11719                           ;	EBTR2 = 0x1, unprogrammed default
 11720                           ;	Table Read Protection Block 3
 11721                           ;	EBTR3 = 0x1, unprogrammed default
 11722                           ;	Table Read Protection Block 4
 11723                           ;	EBTR4 = 0x1, unprogrammed default
 11724                           ;	Table Read Protection Block 5
 11725                           ;	EBTR5 = 0x1, unprogrammed default
 11726                           ;	Table Read Protection Block 6
 11727                           ;	EBTR6 = 0x1, unprogrammed default
 11728                           ;	Table Read Protection Block 7
 11729                           ;	EBTR7 = 0x1, unprogrammed default
 11730   30000A                     	org	3145738
 11731   30000A  FF                 	db	255
 11732                           
 11733                           ;Config register CONFIG6H @ 0x30000B
 11734                           ;	unspecified, using default values
 11735                           ;	Boot Block Table Read Protection bit
 11736                           ;	EBTRB = 0x1, unprogrammed default
 11737   30000B                     	org	3145739
 11738   30000B  FF                 	db	255
 11739                           tosu	equ	0xFFF
 11740                           tosh	equ	0xFFE
 11741                           tosl	equ	0xFFD
 11742                           stkptr	equ	0xFFC
 11743                           pclatu	equ	0xFFB
 11744                           pclath	equ	0xFFA
 11745                           pcl	equ	0xFF9
 11746                           tblptru	equ	0xFF8
 11747                           tblptrh	equ	0xFF7
 11748                           tblptrl	equ	0xFF6
 11749                           tablat	equ	0xFF5
 11750                           prodh	equ	0xFF4
 11751                           prodl	equ	0xFF3
 11752                           indf0	equ	0xFEF
 11753                           postinc0	equ	0xFEE
 11754                           postdec0	equ	0xFED
 11755                           preinc0	equ	0xFEC
 11756                           plusw0	equ	0xFEB
 11757                           fsr0h	equ	0xFEA
 11758                           fsr0l	equ	0xFE9
 11759                           wreg	equ	0xFE8
 11760                           indf1	equ	0xFE7
 11761                           postinc1	equ	0xFE6
 11762                           postdec1	equ	0xFE5
 11763                           preinc1	equ	0xFE4
 11764                           plusw1	equ	0xFE3
 11765                           fsr1h	equ	0xFE2
 11766                           fsr1l	equ	0xFE1
 11767                           bsr	equ	0xFE0
 11768                           indf2	equ	0xFDF
 11769                           postinc2	equ	0xFDE
 11770                           postdec2	equ	0xFDD
 11771                           preinc2	equ	0xFDC
 11772                           plusw2	equ	0xFDB
 11773                           fsr2h	equ	0xFDA
 11774                           fsr2l	equ	0xFD9
 11775                           status	equ	0xFD8

Data Sizes:
    Strings     37
    Constant    0
    Data        4
    BSS         125
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     86      90
    BANK0           160     55     120
    BANK1           256    154     214
    BANK2           256    185     185
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_2(CODE[15]), STR_1(CODE[22]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 22
		 -> STR_2(CODE[15]), STR_1(CODE[22]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 22
		 -> STR_2(CODE[15]), STR_1(CODE[22]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    S2674$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_2(CODE[15]), STR_1(CODE[22]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 150
		 -> ADC2String@buf(COMRAM[40]), return_home_turns@string1(BANK1[150]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2621$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2621$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    TxBufferedString@string	PTR unsigned char  size(2) Largest target is 150
		 -> return_home_turns@string1(BANK1[150]), 

    motorRight.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    motorRight.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    motorLeft.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    motorLeft.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    reverseSquareLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK2[9]), 

    reverseSquareLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK2[9]), 

    reverseSquareRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK2[9]), 

    reverseSquareRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK2[9]), 

    turnLeft_135@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft_135@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft_135@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft_135@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft_135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK2[9]), 

    turnLeft_135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK2[9]), 

    turnRight_135@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight_135@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight_135@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight_135@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight_135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK2[9]), 

    turnRight_135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK2[9]), 

    turn_180@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turn_180@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turn_180@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turn_180@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turn_180@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK2[9]), 

    turn_180@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK2[9]), 

    turnRight_90@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight_90@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight_90@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight_90@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight_90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK2[9]), 

    turnRight_90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK2[9]), 

    turnLeft_90@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft_90@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft_90@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft_90@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft_90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK2[9]), 

    turnLeft_90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK2[9]), 

    turnRight@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    reverse@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    reverse@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    reverse@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK2[9]), 

    reverse@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    reverse@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    reverse@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK2[9]), 

    forward@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    forward@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    forward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK2[9]), 

    forward@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    forward@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    forward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK2[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK2[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK2[9]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK2[9]), main@motorLeft(BANK2[9]), 

    DCmotorsInit@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK2[9]), 

    S107DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    S107DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK2[9]), 

    return_home_turns@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK2[9]), 

    return_home_turns@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK2[9]), 

    return_home_turns@turn_history	PTR unsigned int  size(2) Largest target is 64
		 -> main@turn_history(BANK2[64]), 

    return_home_turns@counter_history	PTR unsigned int  size(2) Largest target is 64
		 -> main@counter_history(BANK2[64]), 

    colorDetect@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK2[9]), 

    colorDetect@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK2[9]), 

    colorDetect@whiteRGBVal	PTR struct RGB size(2) Largest target is 8
		 -> main@whiteRGBVal(BANK2[8]), 

    colorDetect@ambientRGBVal	PTR struct RGB size(2) Largest target is 8
		 -> main@ambientRGBVal(BANK2[8]), 

    whiteCal@v	PTR struct RGB size(2) Largest target is 8
		 -> main@whiteRGBVal(BANK2[8]), 

    ambientCal@v	PTR struct RGB size(2) Largest target is 8
		 -> main@ambientRGBVal(BANK2[8]), 

    getColor@v	PTR struct RGB size(2) Largest target is 8
		 -> main@whiteRGBVal(BANK2[8]), main@RGBVal(BANK2[8]), main@ambientRGBVal(BANK2[8]), colorDetect@RGBVal(BANK0[8]), 


Critical Paths under _main in COMRAM

    _whiteCal->_getColor
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _forward->_setMotorPWM
    _TxBufferedString->_putCharToTxBuf
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _colorDetect->___fldiv
    _turn_180->_stop
    _turnRight_135->_stop
    _turnLeft_135->_stop
    _reverseSquareRight->_turnRight_90
    _turnRight_90->_stop
    _reverseSquareLeft->_turnLeft_90
    _turnLeft_90->_stop
    _stop->_setMotorPWM
    _reverse->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    ___flsub->___fladd
    ___flmul->___flsub
    ___flge->___flsub
    ___fldiv->___flmul
    _ambientCal->_getColor
    _getColor->_color_read_Blue
    _getColor->_color_read_Clear
    _getColor->_color_read_Green
    _getColor->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle

Critical Paths under _HighISR in COMRAM

    _HighISR->_getCharFromTxBuf

Critical Paths under _main in BANK0

    _main->_colorDetect
    _return_home_turns->_sprintf
    _sprintf->_vfprintf

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_return_home_turns

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               188   188      0  288142
                                             52 BANK0      3     3      0
                                              0 BANK2    185   185      0
                       _DCmotorsInit
                            ___fldiv
                             ___flge
                           ___xxtofl
                         _ambientCal
                        _colorDetect
                   _color_click_init
                            _forward
                           _getColor
                    _initDCmotorsPWM
                         _initUSART4
                  _return_home_turns
                               _stop
                           _turn_180
                           _whiteCal
 ---------------------------------------------------------------------------------
 (1) _whiteCal                                             6     4      2     988
                                             17 COMRAM     6     4      2
                           _getColor
 ---------------------------------------------------------------------------------
 (1) _return_home_turns                                  166   156     10   95692
                                             31 BANK0     12     2     10
                                              0 BANK1    154   154      0
                   _TxBufferedString
                            _forward
                          _sendTxBuf
                            _sprintf
                               _stop
                       _turnLeft_135
                        _turnLeft_90
                      _turnRight_135
                       _turnRight_90
                           _turn_180
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             27    15     12    7496
                                              6 BANK0     25    13     12
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             8     2      6    6830
                                             84 COMRAM     2     2      0
                                              0 BANK0      6     0      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           23    17      6    6369
                                             66 COMRAM    18    12      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                35    25     10    4802
                                             31 COMRAM    35    25     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                 11     5      6    2533
                                             20 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (7) _fputs                                                7     3      4    1177
                                             13 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                9     5      4     857
                                              4 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     183
                                             22 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___aomod                                             18     2     16     613
                                              4 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (6) ___aodiv                                             26    10     16     625
                                              4 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (2) _sendTxBuf                                            0     0      0       0
                      _isDataInTxBuf
 ---------------------------------------------------------------------------------
 (3) _isDataInTxBuf                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _forward                                              5     1      4    3293
                                             23 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _TxBufferedString                                     2     0      2     143
                                              5 COMRAM     2     0      2
                     _putCharToTxBuf
 ---------------------------------------------------------------------------------
 (3) _putCharToTxBuf                                       1     1      0      22
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      76
                                              4 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              8 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              6 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _colorDetect                                         58    46     12  152349
                                             78 COMRAM     2     2      0
                                              0 BANK0     52    40     12
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                           ___xxtofl
                           _getColor
                  _reverseSquareLeft
                 _reverseSquareRight
                       _turnLeft_135
                        _turnLeft_90
                      _turnRight_135
                       _turnRight_90
                           _turn_180
 ---------------------------------------------------------------------------------
 (1) _turn_180                                             6     2      4   15246
                                             29 COMRAM     6     2      4
                            _reverse
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _turnRight_135                                        6     2      4   15094
                                             29 COMRAM     6     2      4
                            _reverse
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _turnLeft_135                                         6     2      4   15091
                                             29 COMRAM     6     2      4
                            _reverse
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _reverseSquareRight                                   6     2      4   27433
                                             35 COMRAM     6     2      4
                            _reverse
                               _stop
                       _turnRight_90
 ---------------------------------------------------------------------------------
 (2) _turnRight_90                                         6     2      4   15395
                                             29 COMRAM     6     2      4
                            _reverse
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _reverseSquareLeft                                    6     2      4   27433
                                             35 COMRAM     6     2      4
                            _reverse
                               _stop
                        _turnLeft_90
 ---------------------------------------------------------------------------------
 (2) _turnLeft_90                                          6     2      4   15395
                                             29 COMRAM     6     2      4
                            _reverse
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _stop                                                 6     2      4    7005
                                             23 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _reverse                                              5     1      4    4661
                                             23 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          6     4      2    2725
                                             17 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     491
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     358
                                             10 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4    2350
                                              4 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    3801
                                             20 COMRAM     8     0      8
                            ___fladd
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             16     8      8    2262
                                              4 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             25    17      8    4768
                                             28 COMRAM    25    17      8
                            ___flsub (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8    4742
                                             28 COMRAM    12     4      8
                            ___flsub (ARG)
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             25    17      8    1855
                                             53 COMRAM    25    17      8
                            ___flmul (ARG)
                            ___flsub (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _ambientCal                                           6     4      2    1064
                                             17 COMRAM     6     4      2
                           _getColor
 ---------------------------------------------------------------------------------
 (2) _getColor                                             2     0      2     844
                                             15 COMRAM     2     0      2
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (3) _color_read_Red                                       7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Green                                     7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Clear                                     7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Blue                                      7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Write                                   1     1      0      22
                                              5 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Read                                    3     3      0      45
                                              5 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Idle                                    1     1      0       0
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DCmotorsInit                                         4     0      4     416
                                              4 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _HighISR                                             2     2      0      22
                                              2 COMRAM     2     2      0
                   _getCharFromTxBuf
                     _putCharToRxBuf
                    i2_isDataInTxBuf
 ---------------------------------------------------------------------------------
 (11) i2_isDataInTxBuf                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _putCharToRxBuf                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (11) _getCharFromTxBuf                                    2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DCmotorsInit
   ___fldiv
     ___flmul (ARG)
       ___flsub (ARG)
         ___fladd
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___flsub (ARG)
     ___xxtofl (ARG)
   ___flge
     ___flsub (ARG)
   ___xxtofl
   _ambientCal
     _getColor
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_read_Clear
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
   _colorDetect
     ___fldiv
     ___flge
     ___flmul
     ___flsub
     ___xxtofl
     _getColor
     _reverseSquareLeft
       _reverse
         _setMotorPWM
           ___lwdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
       _turnLeft_90
         _reverse
         _setMotorPWM
         _stop
     _reverseSquareRight
       _reverse
       _stop
       _turnRight_90
         _reverse
         _setMotorPWM
         _stop
     _turnLeft_135
       _reverse
       _setMotorPWM
       _stop
     _turnLeft_90
     _turnRight_135
       _reverse
       _setMotorPWM
       _stop
     _turnRight_90
     _turn_180
       _reverse
       _setMotorPWM
       _stop
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _forward
     _setMotorPWM
   _getColor
   _initDCmotorsPWM
   _initUSART4
   _return_home_turns
     _TxBufferedString
       _putCharToTxBuf
     _forward
     _sendTxBuf
       _isDataInTxBuf
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
           _fputc
     _stop
     _turnLeft_135
     _turnLeft_90
     _turnRight_135
     _turnRight_90
     _turn_180
   _stop
   _turn_180
   _whiteCal
     _getColor

 _HighISR (ROOT)
   _getCharFromTxBuf
   _putCharToRxBuf
   i2_isDataInTxBuf

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      62        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     B9      B9       9       72.3%
BITBANK1           100      0       0       6        0.0%
BANK1              100     9A      D6       7       83.6%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     37      78       5       75.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     56      5A       1       95.7%
BITBIGSFRlhhhhl     52      0       0      42        0.0%
BITBIGSFRlhhhll     37      0       0      44        0.0%
BITBIGSFRlllhlh     2A      0       0      55        0.0%
BITBIGSFRlllll      26      0       0      60        0.0%
BITBIGSFRlhhhll     20      0       0      47        0.0%
BITBIGSFRlhhhll     1E      0       0      49        0.0%
BITBIGSFRhhhhhh     1B      0       0      33        0.0%
BITBIGSFRhhhhll     17      0       0      38        0.0%
BITBIGSFRhhhhhl     13      0       0      34        0.0%
BITBIGSFRlhhl       11      0       0      50        0.0%
BITBIGSFRhhhhlh      E      0       0      35        0.0%
BITBIGSFRhhhhhh      D      0       0      32        0.0%
BITBIGSFRlhhhll      C      0       0      48        0.0%
BITBIGSFRlllhll      9      0       0      57        0.0%
BITBIGSFRlllhlh      9      0       0      56        0.0%
BITBIGSFRlhhhll      8      0       0      45        0.0%
BITBIGSFRllllh       6      0       0      59        0.0%
BITBIGSFRlllhh       6      0       0      54        0.0%
BITBIGSFRlllhll      5      0       0      58        0.0%
BITBIGSFRllhl        5      0       0      53        0.0%
BITBIGSFRhhhhll      5      0       0      39        0.0%
BITBIGSFRllhh        3      0       0      52        0.0%
BITBIGSFRlhhhlh      2      0       0      43        0.0%
BITBIGSFRhhhhll      2      0       0      37        0.0%
BITBIGSFRlhhhhh      1      0       0      41        0.0%
BITBIGSFRlhhhll      1      0       0      46        0.0%
BITBIGSFRhhhhlh      1      0       0      36        0.0%
BITBIGSFRlhl         1      0       0      51        0.0%
BITBIGSFRhhll        1      0       0      40        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     261      61        0.0%
DATA                 0      0     261       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Thu Dec 15 08:16:26 2022

                  _color_read_Red 4798                      ___fldiv@aexp 004E  
                    ___fldiv@bexp 004D                      ___fldiv@sign 0046  
                 _color_read_Blue 4888                                l61 4A60  
                              l70 4836                                l64 4BD6  
                              l73 48D6                                l67 47E6  
                              l76 4886                                l84 3FF2  
                              l79 46F0                                l89 3F0E  
             ___wmul@multiplicand 0007        __end_of_reverseSquareRight 4480  
                _color_read_Clear 4838                  _color_read_Green 47E8  
                             l110 19F2                               l131 2EB0  
                             l204 3430                               l116 19FA  
                             l214 43E8                               l135 2F88  
                             l312 4B6A                               l224 40C8  
                             l321 4C4A                               l330 49EC  
                             l234 419E                               l315 4B90  
                             l324 4C36                               l252 3BEA  
                             l309 4B3E                               l318 4C40  
                             l270 3D26                               l327 4C2C  
                             l264 3830                               l282 4514  
                             l258 3AAC                               l194 45A4  
                             l530 4C08                               l276 396E  
                             l540 4BF0                               l197 4270  
                             l279 447E                               l527 4B14  
                             l552 4BB6                               l536 4A90  
                             l822 3E2A                               l487 4ABE  
                             l817 3DE4                               l666 32C4  
                             l679 3594                               _abs 49EE  
                             _pad 45A6                               wreg 000FE8  
                    ___flmul@aexp 002E                      ___flmul@bexp 002F  
                    ___flmul@sign 0029                      ___flmul@temp 0034  
                    ___flmul@prod 0030              reverseSquareRight@mL 0024  
            reverseSquareRight@mR 0026                              l1106 1DD4  
                            l1122 4966                              l1210 313C  
                            l1050 4692                              l1107 1DC2  
                            l1043 468A                              ?_abs 0017  
                            l1221 30D4                              l1134 2AB0  
                            l1214 3078                              l1230 4796  
                            l1207 2FE0                              l1136 2910  
                            l1080 1BEA                              l1145 2956  
                            l1081 1BD8                              l1170 2716  
                            l1082 1B9E                              l1147 29CE  
                            l1139 28D4                              l1307 433A  
                            l1315 49AA                              l1148 29BC  
                            l1252 45C8                              l1173 25A8  
                            l1261 2B3E                              l1166 23B2  
                            l1318 4C50                              l1183 26D8  
                            l1175 2620                              l1263 2B46  
                            l4000 2986                              l1176 260E  
                            l1256 461E                              l1264 2B8C  
                            l1097 1D04                              l1089 1EBA  
                            l4010 29F8                              l4002 29B4  
                            l1282 36F2                              l1275 2D2C  
                            l4020 2A70                              l4012 2A22  
                            l4100 2484                              l3220 4628  
                            l3132 4B92                              l1292 4A24  
                            l4030 2AA6                              l4022 2A8C  
                            l4006 29DE                              l4014 2A26  
                            l4110 24E6                              l4102 2494  
                            l3230 465E                              l3222 463A  
                            l3134 4BAE                              l1295 4A2C  
                            l4024 2A90                              l4016 2A40  
                            l4008 29EA                              l4120 258E  
                            l4112 2502                              l4104 24AE  
                            l4040 22FA                              l4200 2FAA  
                            l3232 4674                              l3224 4642  
                            l5000 2B64                              l1288 4744  
                            l3330 4C38                              l4026 2A9E  
                            l4018 2A56                              l4130 25CA  
                            l4122 2598                              l4114 252C  
                            l4106 24BE                              l4050 233A  
                            l4042 2308                              l4210 3022  
                            l4202 2FF0                              l3234 467C  
                            l3226 464A                              l3218 4620  
                            l5010 2B9C                              l5002 2B74  
                            l3332 4C3C                              l3340 4C32  
                            l4028 2AA4                              l4140 263C  
                            l4132 25D8                              l4124 25A6  
                            l4116 2562                              l4108 24DA  
                            l4060 236A                              l4052 2340  
                            l4044 230A                              l4220 30AA  
                            l4212 302E                              l4204 3006  
                            l3236 467E                              l3228 4658  
                            l3260 32E2                              l3500 3B82  
                            l5100 0ED8                              l5012 2BA2  
                            l5020 2C94                              l5004 2B80  
                            l3350 49BA                              l3342 4C42  
                            l3334 4C24                              l4150 26A6  
                            l4142 264A                              l4134 2606  
                            l4126 25B8                              l4118 2570  
                            l4070 23A2                              l4062 236C  
                            l4054 2350                              l4046 231A  
                            l4038 22EE                              l4230 30E8  
                            l4222 30B6                              l4214 3060  
                            l3238 4684                              l3270 33AC  
                            l3262 3336                              l3502 3B8E  
                            l5110 1142                              l5102 0F10  
                            l3510 4AEE                              l5030 2CFC  
                            l5022 2CAE                              l5014 2C24  
                            l5006 2B88                              l3352 49C2  
                            l3344 4C46                              l3336 4C28  
                            l3440 48CE                              l3432 47E8  
                            l4160 26FC                              l4152 26C0  
                            l4144 2674                              l4128 25C6  
                            l4080 23F2                              l4072 23C2  
                            l4064 237C                              l4056 2356  
                            l4048 232A                              l3600 1B3C  
                            l4232 310C                              l4224 30C4  
                            l4216 3062                              l4208 301A  
                            l3272 33F0                              l3264 334A  
                            l3360 433C                              l3504 3BA6  
                            l5200 17A8                              l5120 11AE  
                            l5112 114C                              l5104 0F38  
                            l3512 4AFE                              l5032 2D0C  
                            l5024 2CCC                              l5016 2C2A  
                            l5008 2B94                              l5040 35CC  
                            l3274 4B6A                              l3354 49E8  
                            l3346 49AE                              l3338 4C2E  
                            l3434 482E                              l3426 4798  
                            l4154 26DC                              l4162 2702  
                            l4138 2630                              l4146 2678  
                            l4090 2442                              l4082 23FC  
                            l4074 23D2                              l4066 238C  
                            l4058 235C                              l3610 1BAC  
                            l3602 1B40                              l3530 1A28  
                            l3522 19FC                              l4170 4932  
                            l4234 311C                              l4226 30E2  
                            l4218 306E                              l3266 334E  
                            l3258 32C6                              l3370 4388  
                            l3362 4340                              l3506 3BBE  
                            l3450 3970                              l5210 183C  
                            l5202 17DA                              l5130 1246  
                            l5122 11E0                              l5114 115A  
                            l5106 0FE6                              l4250 4A56  
                            l4242 4A2E                              l3514 4B02  
                            l5026 2CE6                              l5018 2C30  
                            l5050 362E                              l5042 35DA  
                            l3276 4B7A                              l3356 49EA  
                            l3348 49B2                              l3444 4838  
                            l3428 47DE                              l4260 3F3A  
                            l4252 3F10                              l4180 3D94  
                            l4164 2706                              l4156 26EC  
                            l4148 2692                              l4092 244E  
                            l4084 2412                              l4068 239C  
                            l3700 1E3A                              l3620 1BD6  
                            l3612 1BB8                              l3604 1B6A  
                            l3540 1A62                              l3532 1A38  
                            l3524 1A08                              l4236 312A  
                            l4228 30E4                              l3268 3390  
                            l3380 40CA                              l3372 4394  
                            l3364 4358                              l3508 3BD6  
                            l3460 39EC                              l3452 3984  
                            l5220 18EE                              l5204 180C  
                            l5212 184A                              l5140 131C  
                            l5132 1278                              l5124 11F2  
                            l5116 118C                              l5108 1094  
                            l4244 4A32                              l3516 4B12  
                            l5028 2CF6                              l5052 3684  
                            l5044 35DE                              l5060 36C6  
                            l5036 3596                              l5300 1EC4  
                            l3438 4888                              l3446 487E  
                            l4270 3FB8                              l4262 3F56  
                            l4190 3E22                              l4182 3DA4  
                            l4174 3D28                              l4158 26FA  
                            l4094 245C                              l4086 241E  
                            l4078 23E6                              l3710 1E8C  
                            l3702 1E4A                              l3630 1C2C  
                            l3622 1BF8                              l3614 1BBC  
                            l3606 1B86                              l3550 1A90  
                            l3542 1A68                              l3534 1A48  
                            l3526 1A16                              l4238 312C  
                            l3382 410E                              l3390 4156  
                            l3366 4364                              l3374 43A0  
                            l3470 3A44                              l3462 39FC  
                            l3454 399C                              l5230 1982  
                            l5222 1902                              l5214 187C  
                            l5206 181A                              l5150 13F8  
                            l5142 1372                              l5134 12AA  
                            l5126 1202                              l5118 119E  
                            l4246 4A3C                              l4510 4574  
                            l3518 4BF2                              l5046 35EE  
                            l5038 35BE                              l5070 471A  
                            l5310 1ED8                              l5302 1ED0  
                            l4272 3FD0                              l4264 3F72  
                            l4192 3E28                              l4184 3DB2  
                            l4176 3D56                              l4096 2468  
                            l4088 2436                              l3720 1EAA  
                            l3712 1E92                              l3704 1E5A  
                            l3640 1C66                              l3632 1C3A  
                            l3624 1C08                              l3616 1BCA  
                            l3608 1B96                              l3560 1AC4  
                            l3552 1A92                              l3544 1A7A  
                            l3536 1A4A                              l3528 1A18  
                            l4168 4922                              l3392 416E  
                            l3384 4126                              l3376 43B8  
                            l3368 437C                              l3480 3AAE  
                            l3472 3A50                              l3464 3A0C  
                            l3456 39C8                              l3800 3BEC  
                            l5232 19B4                              l5224 1910  
                            l5216 18AE                              l5208 182E  
                            l5160 14F2                              l5144 13C8  
                            l5152 1406                              l5240 19F2  
                            l5136 12DC                              l5128 1234  
                            l4248 4A4C                              l4520 4596  
                            l4512 457E                              l4504 4516  
                            l5056 36B4                              l5048 360E  
                            l5072 473A                              l5080 4760  
                            l4280 3E34                              l5400 204C  
                            l5320 1EE2                              l5312 1EDA  
                            l5304 1ED2                              l4530 41BC  
                            l4266 3F94                              l4258 3F18  
                            l4186 3DC4                              l4178 3D66  
                            l4098 2478                              l3714 1E94  
                            l3706 1E7A                              l3650 1CD2  
                            l3642 1C68                              l3634 1C48  
                            l3618 1BCC                              l3570 1B00  
                            l3554 1AA2                              l3562 1ACC  
                            l3546 1A7C                              l3538 1A52  
                            l3394 4186                              l3386 4132  
                            l3378 43D0                              l3490 3B2A  
                            l3482 3AC2                              l3474 3A68  
                            l3466 3A20                              l3458 39DC  
                            l3810 3C68                              l3802 3C00  
                            l5234 19C2                              l5218 18E0  
                            l5226 191E                              l5170 15CE  
                            l5162 1506                              l5154 145C  
                            l5146 13D6                              l5138 12EA  
                            l5090 0E34                              l4522 4598  
                            l4514 4580                              l4506 4526  
                            l5066 46F2                              l5082 4768  
                            l5250 2D4A                              l4290 3EC8  
                            l4282 3E56                              l4274 3E2C  
                            l5410 2120                              l5402 2074  
                            l5330 1EEC                              l5322 1EE4  
                            l5314 1EDC                              l5306 1ED4  
                            l4532 41CC                              l4268 3FAC  
                            l3900 2718                              l4188 3DD2  
                            l3716 1E9A                              l3708 1E7E  
                            l3660 1D2A                              l3652 1CD4  
                            l3644 1C72                              l3636 1C54  
                            l3628 1C1C                              l3580 1B14  
                            l3572 1B04                              l3564 1ADC  
                            l3556 1AB2                              l3548 1A82  
                            l4196 2F8C                              l3388 414A  
                            l3492 3B3A                              l3484 3ADA  
                            l3476 3A80                              l3468 3A38  
                            l3820 3CC0                              l3812 3C78  
                            l3804 3C18                              l5236 19D6  
                            l5228 1950                              l5172 1600  
                            l5180 163E                              l5164 1514  
                            l5156 148E                              l5148 13EA  
                            l5092 0E44                              l3740 4B28  
                            l4524 45A2                              l4516 458A  
                            l4508 4550                              l4540 4A92  
                            l5068 46FE                              l5084 4784  
                            l5076 4746                              l5260 2DE4  
                            l5252 2D5C                              l5244 2D2E  
                            l4292 3ED4                              l4284 3E72  
                            l5420 21B6                              l5412 215E  
                            l5404 2096                              l5340 1EF6  
                            l5332 1EEE                              l5324 1EE6  
                            l5316 1EDE                              l5308 1ED6  
                            l4534 41E0                              l4526 41A0  
                            l3910 2754                              l3902 2724  
                            l3718 1EA8                              l3670 1D58  
                            l3654 1CE4                              l3638 1C58  
                            l3646 1C78                              l3590 1B28  
                            l3582 1B18                              l3574 1B08  
                            l3566 1AEE                              l3558 1AC2  
                            l4198 2F9C                              l3494 3B4A  
                            l3486 3B06                              l3478 3A98  
                            l3830 3832                              l3822 3CCC  
                            l3814 3C88                              l3806 3C44  
                            l3750 36F4                              l5238 19E4  
                            l5190 16F6                              l5182 1670  
                            l5174 160E                              l5158 14E4  
                            l5166 1522                              l5094 0E5A  
                            l3742 4B2A                              l3734 4B16  
                            l4518 458C                              l4550 4AA6  
                            l4542 4A98                              l5078 4758  
                            l5270 2E2C                              l5262 2DFC  
                            l5254 2DBE                              l5246 2D36  
                            l4294 3EEC                              l4286 3E8E  
                            l5430 2210                              l5422 21CA  
                            l5414 2176                              l5406 20DC  
                            l5350 1F00                              l5342 1EF8  
                            l5334 1EF0                              l5326 1EE8  
                            l5318 1EE0                              ?_pad 0015  
                            l4536 41F4                              l4528 41AC  
                            l3920 2784                              l3912 2764  
                            l3904 2732                              l3672 1D66  
                            l3664 1D3E                              l3680 1D84  
                            l3648 1C9E                              l3656 1CF4  
                            l3592 1B2C                              l3584 1B1C  
                            l3576 1B0C                              l3568 1AFC  
                            l3496 3B5E                              l3488 3B1A  
                            l3840 38AE                              l3832 3846  
                            l3824 3CE4                              l3816 3C9C  
                            l3808 3C58                              l3760 3770  
                            l3752 3708                              l5192 1704  
                            l5184 16A2                              l5176 1622  
                            l5168 1578                              l5096 0E6E  
                            l5088 0E28                              l3744 4B2C  
                            l3736 4B20                              l4560 4AB8  
                            l4552 4AB0                              l4544 4AA0  
                            l5280 2E98                              l5272 2E44  
                            l5264 2E14                              l5256 2DCA  
                            l4288 3EB0                              l5424 21DE  
                            l5432 2216                              l5416 21AA  
                            l5408 210E                              l5440 2266  
                            l5360 1F0C                              l5352 1F02  
                            l5344 1EFA                              l5336 1EF2  
                            l5328 1EEA                              l4538 4208  
                            l3930 27BA                              l3922 278A  
                            l3914 2766                              l3906 2734  
                            l3674 1D6E                              l3666 1D48  
                            l3658 1D1A                              l3682 1D92  
                            l3594 1B30                              l3586 1B20  
                            l3578 1B10                              l3498 3B76  
                            l3850 3906                              l3842 38BE  
                            l3834 385E                              l3826 3CFC  
                            l3818 3CB4                              l3770 37C8  
                            l3762 3780                              l3754 3720  
                            l5186 16D4                              l5194 1712  
                            l5178 1630                              l5098 0EA0  
                            l3738 4B26                              l3746 4BBA  
                            l4562 4ABA                              l4554 4AB2  
                            l4546 4AA2                              l5290 2F72  
                            l5282 2ED0                              l5274 2E5C  
                            l5258 2DCE                              l5450 22CE  
                            l5442 2278                              l5434 2230  
                            l5426 21E0                              l5418 21AE  
                            l5370 1F30                              l5362 1F0C  
                            l5354 1F04                              l5346 1EFC  
                            l5338 1EF4                              l3748 4694  
                            l3940 27FA                              l3932 27CA  
                            l3924 2798                              l3908 2744  
                            l3916 276E                              l3692 1DE4  
                            l3684 1D96                              l3676 1D72  
                            l3668 1D56                              l3596 1B34  
                            l3588 1B24                              l3780 43EA  
                            l3852 3912                              l3844 38CE  
                            l3836 388A                              l3828 3D12  
                            l3772 37D4                              l3764 3790  
                            l3756 374C                              l5196 1744  
                            l5188 16E2                              l4564 4ABC  
                            l4556 4AB4                              l4548 4AA4  
                            l4900 31A6                              l5276 2E70  
                            l5444 228C                              l5436 224A  
                            l5428 21E2                              l5380 1F5E  
                            l5372 1F38                              l5364 1F0C  
                            l5356 1F08                              l5348 1EFE  
                            l3942 280A                              l3950 282A  
                            l3934 27CC                              l3926 279A  
                            l3918 277E                              l3694 1DF0  
                            l3686 1DA4                              l3678 1D82  
                            l3598 1B38                              l3790 4480  
                            l3782 43FE                              l3854 392A  
                            l3846 38E2                              l3838 389E  
                            l3774 37EC                              l3766 37A4  
                            l3758 3760                              l5198 1776  
                            l4558 4AB6                              l4910 31FA  
                            l4902 31B2                              l5278 2E92  
                            l5286 2EE8                              l5446 22B0  
                            l5438 224E                              l5390 1F8C  
                            l5382 1F6C                              l5374 1F38  
                            l5366 1F12                              l5358 1F0A  
                            l3960 2868                              l3952 283A  
                            l3944 2812                              l3928 27AA  
                            l3936 27D4                              l3696 1DFE  
                            l3688 1DBA                              l3792 4494  
                            l3784 4416                              l3856 3942  
                            l3848 38FA                              l3776 3804  
                            l3768 37BC                              l3872 4A62  
                            l3880 4BD8                              l4920 326E  
                            l4912 320C                              l4904 31D0  
                            l5288 2F5A                              l5448 22BA  
                            l5384 1F70                              l5392 1FA4  
                            l5376 1F44                              l5368 1F26  
                            l5296 1EBC                              l3970 28B0  
                            l3962 2878                              l3954 283A  
                            l3946 2816                              l3938 27E4  
                            l3698 1E38                              l3794 44AC  
                            l3786 442A                              l3858 395A  
                            l3778 381C                              l3874 4A66  
                            l3890 405C                              l3882 4BEC  
                            l4914 323A                              l4906 31D8  
                            l4922 3274                              l4930 3432  
                            l5394 1FEC                              l5386 1F88  
                            l5378 1F50                              l5298 1EC0  
                            l3980 28FE                              l3972 28C4  
                            l3964 2888                              l3796 44C0  
                            l3788 443E                              l3876 4A74  
                            l3892 4074                              l3884 3FF4  
                            l4924 3284                              l4916 325A  
                            l4908 31EC                              l4940 3476  
                            l4932 3436                              l5476 2F14  
                            l5396 1FF8                              l5388 1F8A  
                            l3990 2946                              l3982 290E  
                            l3974 28D2                              l3966 2898  
                            l3958 284E                              l3798 44D4  
                            l3878 4A78                              l3886 4038  
                            l3894 4080                              l4926 32A4  
                            l4918 325C                              l4950 34DE  
                            l4942 3496                              l4934 3444  
                            l4870 42A0                              l5398 2040  
                            l3992 2954                              l3984 2920  
                            l3976 28DE                              l3968 28A0  
                            l3896 4098                              l3888 4050  
                            l4960 3554                              l4952 350C  
                            l4944 34B4                              l4936 3464  
                            l4872 42BE                              l4864 4272  
                            l4880 4974                              l3986 2936  
                            l3994 2966                              l3978 28FC  
                            l3898 40B0                              l4890 3150  
                            l4962 3574                              l4954 352C  
                            l4946 34BC                              l4938 3468  
                            l4874 42F4                              l4866 4284  
                            l4882 4986                              l4970 45C0  
                            l3996 2974                              l3988 293C  
                            l4892 3170                              l4956 353E  
                            l4948 34D0                              l4980 49EE  
                            l4868 4296                              l4884 498A  
                            l4972 45D4                              l3998 2978  
                            l4894 3174                              l4886 313E  
                            l4958 3544                              l4982 4A08  
                            l4878 4968                              l4974 45E8  
                            l4966 45A6                              l4990 2AF6  
                            l4896 3182                              l4888 3142  
                            l4976 45EC                              l4968 45B4  
                            l4992 2B16                              l4984 2AB2  
                            l4898 31A2                              l4978 460A  
                            l4994 2B32                              l4986 2AD2  
                            l4996 2B4E                              l4988 2AE6  
                            l4998 2B5E                              STR_1 0E01  
                            STR_2 0E17                              u3010 4358  
                            u3011 4354                              u3020 437C  
                            u3021 4378                              u3030 43B8  
                            u3031 43B4                              u3008 49D8  
                            u4000 23C2                              u3200 1A28  
                            u3040 43D0                              u3120 3A68  
                    _BAUD4CONbits 000EE9                              u4001 23BE  
                            u3201 1A24                              u3041 43CC  
                            u3121 3A64                              u4010 23D2  
                            u3210 1A38                              u3050 4126  
                            u3130 3A80                              u4011 23CE  
                            u3211 1A34                              u3051 4122  
                            u3131 3A7C                              u4100 2692  
                            u4020 254C                              u3300 1B84  
                            u3220 1A7A                              u3060 414A  
                            u3140 3BA6                              u4101 268E  
                            u3221 1A76                              u3061 4146  
                            u3141 3BA2                              u4110 26C0  
                            u4030 25A6                              u3310 1BAC  
                            u3230 1A90                              u3070 416E  
                            u3150 3BBE                              u4111 26BC  
                            u4031 25A2                              u3311 1BA8  
                            u3231 1A8C                              u3071 416A  
                            u3151 3BBA                              u4120 26FA  
                            u4040 25C6                              u3400 1CE4  
                            u3320 1BCA                              u3240 1AA2  
                            u4200 3006                              u3080 4186  
                            u3160 4AFE                              u4121 26F6  
                            u4041 25C2                              u4025 2542  
                            u3401 1CE0                              u3321 1BC6  
                            u3241 1A9E                              u4201 3002  
                            u3081 4182                              u3161 4AFA  
                            u4130 3D56                              u4050 25D8  
                            u3410 1D1A                              u3330 1BEA  
                            u3250 1AB2                              u4210 305C  
                            u3170 4C06                              _T2PR 000FBC  
                            u4131 3D52                              u4051 25D4  
                            u3411 1D16                              u3331 1BE6  
                            u3251 1AAE                              u4211 3058  
                            u3171 4C00                              u4300 3F72  
                            u4140 3D94                              u4060 2606  
                            u3500 1DE4                              u3420 1D2A  
                            u3340 1BF8                              u3260 1AEE  
                            u4220 30A6                              u3180 4C08  
                            u4301 3F6E                              u4141 3D90  
                            u4061 2602                              u3501 1DE0  
                            u3421 1D26                              u3341 1BF4  
                            u3261 1AEA                              u4221 30A2  
                            u4310 3F84                              u4150 3DB2  
                            u4070 261C                              u3510 1DFE  
                            u3430 1D56                              u3350 1C08  
                            u3270 1AFC                              u3190 1A16  
                            u4230 30C4                              u4311 3F7C  
                            u4151 3DAE                              u4071 2618  
                            u3511 1DFA                              u3431 1D52  
                            u3351 1C04                              u3271 1AF8  
                            u3191 1A12                              u4231 30C0  
                            u4160 3DD2                              u4080 2630  
                            u3520 1E38                              u3440 1D66  
                            u3360 1C3A                              u3280 1B6A  
                            u4240 30D4                              u2800 4658  
                            u3600 3804                              u5200 49AA  
                            u4400 3EFE                              u6000 210E  
                            u4161 3DCE                              u4081 262C  
                            u3521 1E34                              u3441 1D62  
                            u3361 1C36                              u3281 1B66  
                            u4241 30D0                              u2801 4654  
                            u3601 3800                              u5201 49A6  
                            u4401 3EF6                              u6001 210A  
                            u4330 3FE2                              u4170 3E22  
                            u4090 264A                              u3530 1E4A  
                            u3450 1D82                              u3370 1C48  
                            u3290 1B82                              u4250 30E2  
                            u2810 4674                              u3610 3CE4  
                            u5210 3150                              u6010 2120  
                            u4331 3FDA                              u4171 3E1E  
                            u4091 2646                              u3531 1E46  
                            u3451 1D7E                              u3371 1C44  
                            u3291 1B7C                              u4251 30DE  
                            u2811 4670                              u3611 3CE0  
                            u5211 314C                              u6011 211C  
                            u3540 1E5A                              u3460 1D92  
                            u3380 1C66                              u4260 311C  
                            u4180 2F9C                              u3620 3CFC  
                            u3700 40B0                              u5220 3182  
                            u5300 34B4                              u6020 2176  
                            u3541 1E56                              u3461 1D8E  
                            u3381 1C62                              u4261 3118  
                            u4181 2F98                              u3621 3CF8  
                            u3701 40AC                              u5221 317E  
                            u5301 34B0                              u6021 2172  
                            u3710 2732                              u3550 1E7A  
                            u3470 1DA4                              u3390 1C9E  
                            u4270 312A                              u4190 2FAA  
                            u3630 392A                              u5310 34DE  
                            u4350 3E46                              u6030 21CA  
                            u3711 272E                              u3551 1E76  
                            u3471 1DA0                              u3391 1C9A  
                            u4271 3126                              u4191 2FA6  
                            u3631 3926                              u5231 31AC  
                            u5311 34DA                              u4351 3E3E  
                            u6031 21C6                              u4328 3F86  
                            u4280 3F2A                              u3800 28D2  
                            u3720 2744                              u3560 1E8C  
                            u3480 1DBA                              u3640 3942  
                            u5240 31D0                              u5320 350C  
                            u5160 4284                              u5400 2B32  
                            u6040 2278                              u4281 3F22  
                            u3801 28CE                              u3721 2740  
                            u3561 1E88                              u3481 1DB6  
                            u3641 393E                              u5241 31CC  
                            u5321 3508                              u5161 4280  
                            u5401 2B2E                              u6041 2274  
                            u3810 28FC                              u3730 2754  
                            u3570 1EA8                              u3490 1DD0  
                            u2850 32E2                              u3650 4A90  
                            u5250 31FA                              u5330 3554  
                            u5170 4296                              u5410 2B5E  
                            u4418 3F00                              u4370 3E8E  
                            u6050 22A0                              u3811 28F8  
                            u3731 2750                              u3571 1EA4  
                            u3491 1DCC                              u2851 32DE  
                            u3651 4A8C                              u5251 31F6  
                            u5331 3550                              u5171 4292  
                            u5411 2B5A                              u4371 3E8A  
                            u6107 3E60                              u6051 2296  
                            u4348 3FE4                              u3900 29F8  
                            u3820 2920                              u3740 2798  
                            u2860 33AC                              u3660 4BEC  
                            u5260 323A                              u5180 42BE  
                            u5340 45B4                              u5420 2B74  
                            u5500 473A                              u4380 3EA0  
                            u3901 29F4                              u3821 291C  
                            u3741 2794                              u2861 33A8  
                            u3661 4BE8                              u5261 3236  
                            u5181 42BA                              u5341 45B0  
                            u5421 2B70                              u5501 4736  
                            u6117 3EBA                              u4381 3E98  
                            u2870 4B7A                              u3910 2A40  
                            u3830 2936                              u3750 27AA  
                            u2790 463A                              u3590 37EC  
                            u5510 115A                              u3670 4050  
                            u5270 3284                              u5190 42F4  
                            u5350 460A                              u5430 2CAE  
                            u2871 4B76                              u3911 2A3C  
                            u3831 2932                              u3751 27A6  
                            u2791 4636                              u3591 37E8  
                            u6207 14EA                              u5511 1156  
                            u3671 404C                              u5271 3280  
                            u5191 42F0                              u5351 4606  
                            u5431 2CAA                              u6127 3EDE  
                            u2880 4B90                              u3920 2A70  
                            u3840 2954                              u3760 27BA  
                            u5600 131C                              u5520 118C  
                            u3680 4074                              u5280 3444  
                            u5360 4A08                              u5440 2CCC  
                            u4368 3E48                              u2881 4B8C  
                            u3921 2A6C                              u3841 2950  
                            u3761 27B6                              u6217 150C  
                            u5601 1318                              u5521 1188  
                            u3681 4070                              u5281 3440  
                            u5361 4A04                              u5441 2CC8  
                            u6137 2D52                              u4298 3F2C  
                            u3930 2A9E                              u3850 2974  
                            u3770 27FA                              u5610 1372  
                            u5530 11AE                              u3690 4098  
                            u5290 3476                              u5450 2CE6  
                            u5370 2AE2                              u3931 2A9A  
                            u3851 2970                              u3771 27F6  
                            u6307 19BA                              u6227 1606  
                            u5611 136E                              u5531 11AA  
                            u3691 4094                              u5291 3472  
                            u5451 2CE2                              u5371 2ADC  
                            u6147 2DD6                              u3860 2986  
                            u3780 283A                              u3940 2308  
                            u5700 16A2                              u5620 13C8  
                            u5540 11E0                              u5460 2CF6  
                            u5380 2AE4                              u6068 22A4  
                            u3861 2982                              u3781 2836  
                            u3941 2304                              u6317 19DC  
                            u5701 169E                              u6237 1628  
                            u5621 13C4                              u5541 11DC  
                            u5461 2CF2                              u6157 2EA4  
                            u6077 1F7C                              u2990 49D6  
                            u3870 29B4                              u3790 28B0  
                            u3950 231A                              u5710 16D4  
                            u5630 145C                              u5550 1202  
                            u5390 2AF6                              u5470 35BE  
                            u4398 3EA2                              u2991 49CE  
                            u3871 29B0                              u3791 28AC  
                            u3951 2316                              u6407 394C  
                            u6327 3712                              u6247 16DA  
                            u5711 16D0                              u5631 1458  
                            u5551 11FE                              u5391 2AF2  
                            u5471 35BA                              u6167 2F66  
                            u6087 225A                              u3880 29CA  
                            u3960 232A                              u5800 1950  
                            u5720 1744                              u5640 148E  
                            u5560 1234                              u5480 360E  
                            u3881 29C6                              u3961 2326  
                            u6417 4408                              u6337 373E  
                            u5801 194C                              u5721 1740  
                            u6257 16FC                              u5641 148A  
                            u5561 1230                              u6177 4A42  
                            u5481 360A                              u6097 22DA  
                            u3890 29DE                              u3970 236A  
                            u5810 1982                              u5730 1776  
                            u5650 14E4                              u5570 1278  
                            u5490 362E                              u3891 29DA  
                            u3971 2366                              u6507 3BC8  
                            u6427 4448                              u6347 380E  
                            u5811 197E                              u6267 1812  
                            u5731 1772                              u5651 14E0  
                            u6187 13CE                              u5571 1274  
                            u5491 362A                              u3980 237C  
                            u5820 19B4                              u5740 17A8  
                            u5660 1578                              u5580 12AA  
                            u5900 1FB4                              u3981 2378  
                            u6517 43DA                              u6437 398E  
                            u6357 3C0A                              u5821 19B0  
                            u6277 1834                              u5741 17A4  
                            u5661 1574                              u6197 13F0  
                            u5581 12A6                              u5901 1FAE  
                            u3990 238C                              u5750 17DA  
                            u5670 15CE                              u5590 12DC  
                            u5830 2D46                              u5910 1FB6  
                            u6527 3F44                              u3991 2388  
                            u6447 39BA                              u6367 3C36  
                            u6287 18E6                              u5751 17D6  
                            u5671 15CA                              u5591 12D8  
                            u5831 2D42                              u5760 180C  
                            u5680 1600                              u5840 2ECC  
                            u5920 1FCE                              u6537 3F9E  
                            u6457 3A8A                              u6377 3D06  
                            u6297 1908                              u5761 1808  
                            u5681 15FC                              u5841 2EC8  
                            u5921 1FC6                              u5770 187C  
                            u5690 1670                              u5850 2F88  
                            u5930 1FEC                              u6547 3FC2  
                            u6467 449E                              u6387 3850  
                            u5771 1878                              u5691 166C  
                            u5851 2F84                              u5931 1FE8  
                            u5780 18AE                              u5940 2008  
                            u5860 1F5E                              u6477 44DE  
                            u6397 387C                              u5781 18AA  
                            u5941 2002                              u5861 1F5A  
                            u5790 18E0                              u5950 200A  
                            u5870 1F6C                              u6487 3ACC  
                            u5791 18DC                              u5871 1F68  
                            u5960 2022                              u5928 1FD2  
                            u5880 1FA0                              u6497 3AF8  
                            u5961 201A                              u5881 1F9A  
                            u5970 2040                              u5890 1FA2  
                            u5971 203C                              u5980 2060  
                            u5981 2056                              u5968 2026  
                            u5998 2064                              abs@a 0017  
                            _dbuf 007D                              _main 1EBC  
                            _dtoa 2AB2                              _prec 0076  
                            pad@i 001C                              pad@p 0019  
                            fsr1h 000FE2                              fsr2h 000FDA  
                            indf2 000FDF                              fsr1l 000FE1  
                            pad@w 001E                              fsr2l 000FD9  
                            btemp 005B                              _stop 433C  
                            prodh 000FF4                              prodl 000FF3  
                            start 0076                   ___fldiv@new_exp 0047  
                main@turn_history 0240            __end_of_color_read_Red 47E8  
                 __end_of_HighISR 0076                      ___param_bank 000000  
                     _turnLeft_90 3AAE                      main@clearRef 0286  
                           ??_abs 0019                             ??_pad 001B  
                    main@colorNum 028A                   __end_of___aodiv 32C6  
                 __end_of___fladd 1EBC                             ?_main 0001  
                           ?_dtoa 0020                   __end_of___aomod 3596  
                 __end_of___fldiv 2AB2                   __end_of___flmul 2718  
                 __end_of___flsub 4968                             ?_stop 0018  
                 __end_of___lwdiv 4694                             i2l530 4C20  
                           i2l523 4AEA                             i2l516 4B68  
                           i2l547 0066                             i2l549 006A  
                    vfpfcnvrt@fmt 0045                             _TMR0H 000FD4  
                           _TMR0L 000FD3        __end_of_I2C_2_Master_Start 4C42  
      __end_of_I2C_2_Master_Write 4C2E                             _flags 007C  
                           _fputc 4272                   __end_of_forward 40CA  
                           _fputs 4968                             pad@fp 0015  
                           _width 0074                             _putch 4C50  
                           dtoa@d 0022                             dtoa@i 0041  
                           dtoa@n 0038                             dtoa@p 0034  
                           dtoa@s 0040                             dtoa@w 0036  
                           tablat 000FF5                   __end_of_reverse 41A0  
                           ttemp5 005C                             ttemp6 005F  
                           ttemp7 0063                             status 000FD8  
                           wtemp8 005C                   __end_of_sprintf 4798  
         __end_of_color_read_Blue 48D8             _I2C_2_Master_RepStart 4C42  
              putCharToRxBuf@byte 0001                   ?_color_read_Red 0009  
                 __initialization 48D8                      __end_of_main 22EE  
                    __end_of_dtoa 2D2E                   i2_isDataInTxBuf 4C0A  
                    __end_of_stop 43EA                      _turnLeft_135 3832  
              putCharToTxBuf@byte 0005                     colorDetect@mL 00A5  
                   colorDetect@mR 00A7                            ??_main 00D1  
                          ??_dtoa 002A                            ??_stop 001C  
                   __activetblptr 000003                      _turnRight_90 3970  
               _return_home_turns 2D2E             colorDetect@colour_ref 00BB  
                    ?_setMotorPWM 0012                ?_return_home_turns 00BC  
                          ?_fputc 0005                            ?_fputs 000E  
                          _CCPR1H 000FAA                            _CCPR2H 000FA6  
                          _CCPR3H 000F25                            _CCPR4H 000F21  
                          ?_putch 0001             colorDetect@greenPrint 00C9  
                          _RC0PPS 000E62                            _RC4REG 000EE3  
                          _RE2PPS 000E74                            _RD5PPS 000E6F  
                          _RC7PPS 000E69                            _RD6PPS 000E70  
                          _RE4PPS 000E76                            i2l2804 4C0A  
                          i2l4570 4B56                            _RG6PPS 000E88  
                          i2l4572 4B66                            i2l4574 4AC0  
                          i2l4566 4B42                            i2l4576 4AD0  
                          i2l4568 4B52                            i2l4578 4AD4  
                          i2l4790 0022                            i2l4792 0028  
                          i2l4794 0038                            i2l4796 0046  
                          i2l4788 0012                            i2l4798 005A  
        return_home_turns@string1 0100                         ??_HighISR 0003  
        __end_of_color_click_init 4A62                            _RX4PPS 000E15  
                          _TX4REG 000EE4               ??_return_home_turns 00C6  
                __end_of___xxtofl 313E                  __end_of_getColor 46F2  
                    _CCPTMRS0bits 000FAD                      vfprintf@cfmt 0055  
                          ___flge 3D28                  _getCharFromTxBuf 4AC0  
                       ??___aodiv 0015                         ??___fladd 000D  
                       ??___aomod 0015                            ___wmul 4B92  
                       ??___fldiv 003E                         ??___flmul 0025  
                       ??___flsub 001D                         ??___lwdiv 000F  
                          clear_0 48FE                            clear_1 490A  
                          isa$std 000001                            pad@buf 0017  
                   main@motorLeft 02B0                            dtoa@fp 0020  
       __end_of_return_home_turns 2F8A                            fputc@c 0005  
               ?_TxBufferedString 0006                            fputs@c 0012  
                          fputs@i 0013                            fputs@s 000E  
                       ??_forward 001C                      __mediumconst 0000  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8                ??_TxBufferedString 0008  
                       ??_reverse 001C                  __end_of_whiteCal 3F10  
                          putch@c 0001                  __end_of_vfprintf 4746  
                          stop@mL 0018                            stop@mR 001A  
               ??_initDCmotorsPWM 0007                         ??_sprintf 0057  
                __end_of_turn_180 3832                        ___flge@ff1 001D  
                      ___flge@ff2 0021                      ___xxtofl@arg 000F  
                    ___xxtofl@exp 000E                      ___xxtofl@val 0005  
           __end_of_isDataInTxBuf 4C0A                        __accesstop 0060  
         __end_of__initialization 4918          __end_of_color_read_Clear 4888  
        __end_of_color_read_Green 4838            ?_I2C_2_Master_RepStart 0001  
         __end_ofi2_isDataInTxBuf 4C22                     ___rparam_used 000001  
                ?_color_read_Blue 0009                 main@ambientRGBVal 0295  
                  __pcstackCOMRAM 0001                     ?_DCmotorsInit 0005  
                    __pidataBANK0 4C4C                     __end_of_fputc 433C  
                   __end_of_fputs 49AC                     __end_of_putch 4C52  
              return_home_turns@i 0196                return_home_turns@k 0198  
                         ??_fputc 0009                           ??_fputs 0012  
              _reverseSquareRight 43EA                           ??_putch 0005  
                      __pbssBANK0 0060                        __pbssBANK1 019A  
                      _ambientCal 3F10               ?_reverseSquareRight 0024  
                   _turnRight_135 3BEC                 _color_writetoaddr 4BB8  
                    _T2CLKCONbits 000FBF                    ??_DCmotorsInit 0009  
                         ?___flge 001D                      ?_turnLeft_90 001E  
              ?_color_writetoaddr 0007                           ?___wmul 0005  
             ??_color_writetoaddr 0008              ??_reverseSquareRight 0028  
                       ?___xxtofl 0005                           _SP4BRGH 000EE6  
                         _SP4BRGL 000EE5                         ?_getColor 0010  
                         _SSP2ADD 000ED6                           _SSP2BUF 000ED5  
          color_writetoaddr@value 0007                  ??_color_read_Red 000B  
                         _HighISR 0008                    ?_turnRight_135 001E  
       __end_of_color_writetoaddr 4BD8                  ?i2_isDataInTxBuf 0001  
              _I2C_2_Master_Start 4C38                        _initUSART4 4A92  
              _I2C_2_Master_Write 4C22                           __Hparam 0000  
                         __Lparam 0000                 color_read_Red@tmp 000E  
                         ___aodiv 313E                           ___fladd 19FC  
                         ___aomod 3432                           ___fldiv 2718  
                         ___flmul 22EE                         ?_whiteCal 0012  
                         ___flsub 4922               ?_I2C_2_Master_Start 0001  
                         ___lwdiv 4620               ?_I2C_2_Master_Write 0001  
                      _off_period 0078                         ?_vfprintf 009D  
                    __psmallconst 0E00                         ?_turn_180 001E  
                         __pcinit 48D8                           __ramtop 0E00  
                         __ptext0 1EBC                           __ptext1 3E2C  
                         __ptext2 2D2E                           __ptext3 4746  
                         __ptext4 46F2                           __ptext5 3596  
                         __ptext6 2AB2                           __ptext7 45A6  
                         __ptext8 4968                           __ptext9 4272  
               colorDetect@RGBVal 00BD                         _T2CONbits 000FBD  
                         _forward 3FF4                        ??___xxtofl 0009  
                       _T2HLTbits 000FBE                           _reverse 40CA  
                      ??_getColor 0012                     _RxBufWriteCnt 005A  
        __end_of_getCharFromTxBuf 4AEC                    main@motorRight 02A7  
                         _sprintf 4746              ??_I2C_2_Master_Start 0006  
            ??_I2C_2_Master_Write 0006              end_of_initialization 4918  
               __end_of_sendTxBuf 4BF2                    DCmotorsInit@mL 0005  
                  DCmotorsInit@mR 0007                       ?_ambientCal 0012  
                         fputc@fp 0007                           fputs@fp 0010  
               ?_color_click_init 0001                 colorDetect@whiteB 00B1  
               colorDetect@whiteG 00AD                 colorDetect@whiteR 00A9  
              ??_color_click_init 0009                 __end_of_vfpfcnvrt 36F4  
                         postdec1 000FE5                           postdec2 000FDD  
                         postinc0 000FEE                           postinc1 000FE6  
                         postinc2 000FDE                  vfpfcnvrt@convarg 004B  
                      ??_whiteCal 0014                        ??_vfprintf 0055  
                      ??_turn_180 0022                   _initDCmotorsPWM 4516  
                       _PORTFbits 000F8E                setMotorPWM@negDuty 0017  
                     ___fladd@grs 0014                        main@RGBVal 028C  
                   ___xxtofl@sign 000D                         _TRISAbits 000F81  
              setMotorPWM@posDuty 0016                         _TRISCbits 000F83  
                       _TRISDbits 000F84                         _TRISEbits 000F85  
                       _TRISFbits 000F86                         _TRISGbits 000F87  
                       _TRISHbits 000F88              __end_of_DCmotorsInit 4272  
                     ___fldiv@grs 0049                       ___fldiv@rem 0042  
             reverseSquareLeft@mL 0024               reverseSquareLeft@mR 0026  
        color_writetoaddr@address 0008           ??_I2C_2_Master_RepStart 0006  
                 ??_turnRight_135 0022                       ___flmul@grs 002A  
                     _CCP1CONbits 000FAB                 ?_color_read_Clear 0009  
                    _EUSART4RXbuf 0060                      _EUSART4TXbuf 019A  
                     _CCP2CONbits 000FA7                 ?_color_read_Green 0009  
                     _CCP3CONbits 000F26                  main@forwardCount 0284  
                     ?_initUSART4 0001                       _CCP4CONbits 000F22  
return_home_turns@counter_history 00BE                        main@whiteC 0280  
              ??_color_read_Clear 000B                ??_color_read_Green 000B  
                   ??_colorDetect 004F                    __end_of___flge 3E2C  
                     vfpfcnvrt@ap 0047                       vfpfcnvrt@cp 0053  
                     vfpfcnvrt@fp 0043                    __end_of___wmul 4BB8  
          colorDetect@whiteRGBVal 00A3               color_read_Clear@tmp 000E  
             start_initialization 48D8              colorDetect@bluePrint 00CD  
                     __end_of_abs 4A2E                       __end_of_pad 4620  
                   _TxBufWriteCnt 0058               color_read_Green@tmp 000E  
             return_home_turns@mL 00C2               return_home_turns@mR 00C4  
         __end_of_initDCmotorsPWM 45A6                       vfprintf@fmt 009F  
                        ??___flge 0025               main@counter_history 0200  
                        ??___wmul 0009                    _putCharToRxBuf 4B40  
                  _putCharToTxBuf 4AEC                       __pdataBANK0 00D4  
             __end_of_colorDetect 19FC                         ___fladd@a 0009  
                       ___fladd@b 0005                         ___fldiv@a 003A  
                       ___fldiv@b 0036                         ___flmul@a 0021  
                       ___flmul@b 001D                       __pbssCOMRAM 0057  
                       ___flsub@a 0019                         ___flsub@b 0015  
                   __pcstackBANK0 009D                     __pcstackBANK1 0100  
                   __pcstackBANK2 0200                  ___aodiv@dividend 0005  
                        ?_HighISR 0001                 _reverseSquareLeft 4480  
              ?_reverseSquareLeft 0024                  ___lwdiv@dividend 000B  
                       _dtoa$2702 0032            __end_of_putCharToRxBuf 4B6A  
          __end_of_putCharToTxBuf 4B16                         __pintcode 0008  
                        ?___aodiv 0005                          ?___fladd 0005  
                        ?___aomod 0005                          ?___fldiv 0036  
                ___aodiv@quotient 0017                          ?___flmul 001D  
                        ?___flsub 0015                     ?_turnLeft_135 001E  
                        ?___lwdiv 000B               ??_reverseSquareLeft 0028  
                 turnRight_135@mL 001E                   turnRight_135@mR 0020  
          TxBufferedString@string 0006                    turnLeft_135@mL 001E  
                  turnLeft_135@mR 0020              I2C_2_Master_Read@ack 0007  
            I2C_2_Master_Read@tmp 0008                       __smallconst 0E00  
                        ?_forward 0018                 _I2C_2_Master_Idle 4B6A  
                   ?_turnRight_90 001E                 _I2C_2_Master_Init 4B16  
               _I2C_2_Master_Read 49AC                 _I2C_2_Master_Stop 4C2E  
                    _RxBufReadCnt 0059                          ?_reverse 0018  
              ?_I2C_2_Master_Idle 0001                ?_I2C_2_Master_Init 0001  
              ?_I2C_2_Master_Read 0001                     ??_setMotorPWM 0014  
              ?_I2C_2_Master_Stop 0001                  ___lwdiv@quotient 000F  
        initDCmotorsPWM@PWMperiod 0005                          ?_sprintf 00A3  
               ?_getCharFromTxBuf 0001         __end_of_reverseSquareLeft 4516  
              ??_getCharFromTxBuf 0001                      ??_ambientCal 0014  
             ??_I2C_2_Master_Idle 0005               ??_I2C_2_Master_Init 0005  
             ??_I2C_2_Master_Read 0006                    ___wmul@product 0009  
                        _LATAbits 000F79               ??_I2C_2_Master_Stop 0006  
                        _LATCbits 000F7B                     _isDataInTxBuf 4BF2  
                        _LATDbits 000F7C                          _LATEbits 000F7D  
                        _LATFbits 000F7E                         _on_period 007A  
                _TxBufferedString 4A62                          _LATGbits 000F7F  
                        _LATHbits 000F80                         _sendTxBuf 4BD8  
                        _IPR4bits 000E23                          _PIE4bits 000E2D  
                        i2u221_40 4C1E                          i2u221_41 4C18  
                        i2u222_40 4C20                         getColor@v 0010  
                        i2u505_40 0022                          i2u505_41 001E  
                        i2u506_40 0038                          i2u506_41 0034  
                        i2u507_40 0046                          i2u507_41 0042  
                        i2u508_40 005A                          i2u508_41 0056  
                        _PIR4bits 000E37                          i2u477_40 4B52  
                        i2u477_41 4B4E                          i2u478_40 4AD0  
                        i2u478_41 4ACC                   ?_putCharToRxBuf 0001  
                ?_initDCmotorsPWM 0005                       _colorDetect 0E28  
                 ?_putCharToTxBuf 0001                    ??_turnLeft_135 0022  
                    _DCmotorsInit 41A0                          _SSP2CON2 000EDA  
                        _SSP2STAT 000ED8                         _vfpfcnvrt 3596  
       __end_of_I2C_2_Master_Idle 4B92         __end_of_I2C_2_Master_Init 4B40  
       __end_of_I2C_2_Master_Read 49EE                 ___wmul@multiplier 0005  
       __end_of_I2C_2_Master_Stop 4C38                    ??_turnRight_90 0022  
                    setMotorPWM@m 0012                         main@carGo 0294  
     I2C_2_Master_Write@data_byte 0006                __end_of_ambientCal 3FF4  
                       main@index 029D                 ??_color_read_Blue 000B  
                    _TxBufReadCnt 0057                         copy_data0 48EC  
             colorDetect@ambientB 00B9               colorDetect@ambientG 00B7  
             colorDetect@ambientR 00B5               colorDetect@clearRef 009D  
                  ?_isDataInTxBuf 0001     __end_of_I2C_2_Master_RepStart 4C4C  
              color_read_Blue@tmp 000E               __end_of_setMotorPWM 3432  
                      ?_sendTxBuf 0001            return_home_turns@index 00C0  
                    ??_initUSART4 0005                          __Hrparam 0000  
             colorDetect@redPrint 00C5                        vfprintf@ap 00A1  
                        __Lrparam 0000                        vfprintf@fp 009D  
                       forward@mL 0018                         forward@mR 001A  
   return_home_turns@turn_history 00BC                        ?_vfpfcnvrt 0043  
        colorDetect@ambientRGBVal 00A1                   ___aodiv@divisor 000D  
                 ___aodiv@counter 0015                        _ANSELDbits 000EA7  
                      _ANSELFbits 000EB4                        sprintf@fmt 00A5  
                      turn_180@mL 001E                        turn_180@mR 0020  
                        ___xxtofl 2F8A                        _T0CON0bits 000FD5  
                      _T0CON1bits 000FD6                   ___lwdiv@divisor 000D  
              __end_of_initUSART4 4AC0                          _getColor 4694  
                 ___lwdiv@counter 0011                          __ptext10 4C50  
                        __ptext11 49EE                          __ptext20 4516  
                        __ptext12 3432                          __ptext21 4A2E  
                        __ptext13 313E                          __ptext30 4480  
                        __ptext22 4BB8                          __ptext14 4BD8  
                        __ptext31 3AAE                          __ptext23 4B16  
                        __ptext15 4BF2                          __ptext40 22EE  
                        __ptext32 433C                          __ptext24 0E28  
                        __ptext16 3FF4                          __ptext41 3D28  
                        __ptext33 40CA                          __ptext25 36F4  
                        __ptext17 4A62                          __ptext50 4C2E  
                        __ptext42 2718                          __ptext34 32C6  
                        __ptext26 3BEC                          __ptext18 4AEC  
                        __ptext51 4C38                          __ptext43 3F10  
                        __ptext35 4B92                          __ptext27 3832  
                        __ptext19 4A92                          __ptext52 4C42  
                        __ptext44 4694                          __ptext36 4620  
                        __ptext28 43EA                          __ptext53 49AC  
                        __ptext45 4798                          __ptext37 2F8A  
                        __ptext29 3970                          __ptext54 4B6A  
                        __ptext46 47E8                          __ptext38 4922  
                        __ptext55 41A0                          __ptext47 4838  
                        __ptext39 19FC                          __ptext48 4888  
                        __ptext57 4C0A                          __ptext49 4C22  
                        __ptext58 4B40                          __ptext59 4AC0  
                     ambientCal@i 0016                       ambientCal@v 0012  
                  turnRight_90@mL 001E                    turnRight_90@mR 0020  
                    _SSP2CON1bits 000ED9                      _SSP2CON2bits 000EDA  
                   turnLeft_90@mL 001E                     turnLeft_90@mR 0020  
           __end_of_turnRight_135 3D28                         reverse@mL 0018  
                       reverse@mR 001A                     ??_turnLeft_90 0022  
                  _turning_time45 00D6                          isa$xinst 000000  
                      _RC4STAbits 000EE7                          int$flags 005B  
                        _whiteCal 3E2C                          _vfprintf 46F2  
                        _turn_180 36F4                  ___aomod@dividend 0005  
                       whiteCal@i 0016                         whiteCal@v 0012  
                      _INTCONbits 000FF2                 ??i2_isDataInTxBuf 0001  
                    _reverse_time 00D4                       _setMotorPWM 32C6  
            __end_of_turnLeft_135 3970                   ??_isDataInTxBuf 0005  
                        intlevel2 0000                         sprintf@ap 00AF  
                     ??_sendTxBuf 0005                   main@whiteRGBVal 029F  
            __end_of_turnRight_90 3AAE                   ___aomod@divisor 000D  
                     ??_vfpfcnvrt 0049                   ___aomod@counter 0015  
                _color_click_init 4A2E               __end_of_turnLeft_90 3BEC  
        __end_of_TxBufferedString 4A92                          sprintf@f 00B1  
                        sprintf@s 00A3                        _SSP2DATPPS 000E1D  
                      _SSP2CLKPPS 000E1C                     ___fladd@signs 0011  
                      _TX4STAbits 000EE8                      ___aodiv@sign 0016  
                    ___fladd@aexp 0012                      ___fladd@bexp 0013  
                ??_putCharToRxBuf 0001                  ??_putCharToTxBuf 0005  
                    ___aomod@sign 0016                      ?_colorDetect 009D  



Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Thu Dec 15 09:29:45 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=3
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=3
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=3
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=2
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=2
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=2
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=2
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=2
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=2
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=2
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=2
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    78                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    79                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    80                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    81                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    82   000000                     
    83                           ; Version 2.35
    84                           ; Generated 05/05/2021 GMT
    85                           ; 
    86                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    87                           ; All rights reserved.
    88                           ; 
    89                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    90                           ; 
    91                           ; Redistribution and use in source and binary forms, with or without modification, are
    92                           ; permitted provided that the following conditions are met:
    93                           ; 
    94                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    95                           ;        conditions and the following disclaimer.
    96                           ; 
    97                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    98                           ;        of conditions and the following disclaimer in the documentation and/or other
    99                           ;        materials provided with the distribution. Publication is not required when
   100                           ;        this file is used in an embedded application.
   101                           ; 
   102                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   103                           ;        software without specific prior written permission.
   104                           ; 
   105                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   106                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   107                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   108                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   109                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   110                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   111                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   112                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   113                           ; 
   114                           ; 
   115                           ; Code-generator required, PIC18F67K40 Definitions
   116                           ; 
   117                           ; SFR Addresses
   118   000000                     
   119                           	psect	idataBANK0
   120   004D08                     __pidataBANK0:
   121                           	callstack 0
   122                           
   123                           ;initializer for _reverse_time
   124   004D08  028A               	dw	650
   125                           
   126                           ;initializer for _turning_time90
   127   004D0A  00A5               	dw	165
   128   000000                     _TX4REG	set	3812
   129   000000                     _RC4STAbits	set	3815
   130   000000                     _SP4BRGH	set	3814
   131   000000                     _TRISFbits	set	3974
   132   000000                     _LATFbits	set	3966
   133   000000                     _TRISDbits	set	3972
   134   000000                     _TRISGbits	set	3975
   135   000000                     _LATGbits	set	3967
   136   000000                     _LATEbits	set	3965
   137   000000                     _SSP2CON2bits	set	3802
   138   000000                     _RX4PPS	set	3605
   139   000000                     _SSP2CLKPPS	set	3612
   140   000000                     _SSP2DATPPS	set	3613
   141   000000                     _RC7PPS	set	3689
   142   000000                     _RE2PPS	set	3700
   143   000000                     _LATCbits	set	3963
   144   000000                     _LATDbits	set	3964
   145   000000                     _TRISAbits	set	3969
   146   000000                     _LATHbits	set	3968
   147   000000                     _TRISCbits	set	3971
   148   000000                     _TRISEbits	set	3973
   149   000000                     _PORTFbits	set	3982
   150   000000                     _TRISHbits	set	3976
   151   000000                     _T2PR	set	4028
   152   000000                     _T2CONbits	set	4029
   153   000000                     _CCPR2H	set	4006
   154   000000                     _CCPR1H	set	4010
   155   000000                     _RE4PPS	set	3702
   156   000000                     _RG6PPS	set	3720
   157   000000                     _RD5PPS	set	3695
   158   000000                     _ANSELDbits	set	3751
   159   000000                     _SSP2ADD	set	3798
   160   000000                     _SSP2CON1bits	set	3801
   161   000000                     _CCPR4H	set	3873
   162   000000                     _CCPR3H	set	3877
   163   000000                     _TMR0L	set	4051
   164   000000                     _TMR0H	set	4052
   165   000000                     _T0CON0bits	set	4053
   166   000000                     _T0CON1bits	set	4054
   167   000000                     _T2CLKCONbits	set	4031
   168   000000                     _T2HLTbits	set	4030
   169   000000                     _CCP1CONbits	set	4011
   170   000000                     _CCPTMRS0bits	set	4013
   171   000000                     _CCP2CONbits	set	4007
   172   000000                     _LATAbits	set	3961
   173   000000                     _CCP3CONbits	set	3878
   174   000000                     _CCP4CONbits	set	3874
   175   000000                     _RC4REG	set	3811
   176   000000                     _SP4BRGL	set	3813
   177   000000                     _TX4STAbits	set	3816
   178   000000                     _BAUD4CONbits	set	3817
   179   000000                     _SSP2CON2	set	3802
   180   000000                     _SSP2STAT	set	3800
   181   000000                     _ANSELFbits	set	3764
   182   000000                     _SSP2BUF	set	3797
   183   000000                     _IPR4bits	set	3619
   184   000000                     _PIE4bits	set	3629
   185   000000                     _RC0PPS	set	3682
   186   000000                     _RD6PPS	set	3696
   187   000000                     _INTCONbits	set	4082
   188   000000                     _PIR4bits	set	3639
   189                           
   190                           	psect	smallconst
   191   000E00                     __psmallconst:
   192                           	callstack 0
   193   000E00  00                 	db	0
   194   000E01                     STR_1:
   195   000E01  4B                 	db	75	;'K'
   196   000E02  3A                 	db	58	;':'
   197   000E03  25                 	db	37
   198   000E04  64                 	db	100	;'d'
   199   000E05  20                 	db	32
   200   000E06  49                 	db	73	;'I'
   201   000E07  3A                 	db	58	;':'
   202   000E08  25                 	db	37
   203   000E09  64                 	db	100	;'d'
   204   000E0A  20                 	db	32
   205   000E0B  43                 	db	67	;'C'
   206   000E0C  3A                 	db	58	;':'
   207   000E0D  25                 	db	37
   208   000E0E  64                 	db	100	;'d'
   209   000E0F  20                 	db	32
   210   000E10  54                 	db	84	;'T'
   211   000E11  3A                 	db	58	;':'
   212   000E12  25                 	db	37
   213   000E13  64                 	db	100	;'d'
   214   000E14  20                 	db	32
   215   000E15  0D                 	db	13
   216   000E16  00                 	db	0
   217   000E17  25                 	db	37
   218   000E18  64                 	db	100	;'d'
   219   000E19  2C                 	db	44
   220   000E1A  25                 	db	37
   221   000E1B  64                 	db	100	;'d'
   222   000E1C  2C                 	db	44
   223   000E1D  25                 	db	37
   224   000E1E  64                 	db	100	;'d'
   225   000E1F  2C                 	db	44
   226   000E20  25                 	db	37
   227   000E21  64                 	db	100	;'d'
   228   000E22  20                 	db	32
   229   000E23  0D                 	db	13
   230   000E24  0A                 	db	10
   231   000E25  00                 	db	0
   232   000E26  00                 	db	0	; dummy byte at the end
   233   000000                     
   234                           ; #config settings
   235                           
   236                           	psect	cinit
   237   004994                     __pcinit:
   238                           	callstack 0
   239   004994                     start_initialization:
   240                           	callstack 0
   241   004994                     __initialization:
   242                           	callstack 0
   243                           
   244                           ; Initialize objects allocated to BANK0 (4 bytes)
   245                           ; load TBLPTR registers with __pidataBANK0
   246   004994  0E08               	movlw	low __pidataBANK0
   247   004996  6EF6               	movwf	tblptrl,c
   248   004998  0E4D               	movlw	high __pidataBANK0
   249   00499A  6EF7               	movwf	tblptrh,c
   250   00499C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   251   00499E  6EF8               	movwf	tblptru,c
   252   0049A0  EE00  F0ED         	lfsr	0,__pdataBANK0
   253   0049A4  EE10 F004          	lfsr	1,4
   254   0049A8                     copy_data0:
   255   0049A8  0009               	tblrd		*+
   256   0049AA  CFF5 FFEE          	movff	tablat,postinc0
   257   0049AE  50E5               	movf	postdec1,w,c
   258   0049B0  50E1               	movf	fsr1l,w,c
   259   0049B2  E1FA               	bnz	copy_data0
   260                           
   261                           ; Clear objects allocated to BANK1 (92 bytes)
   262   0049B4  EE01  F09A         	lfsr	0,__pbssBANK1
   263   0049B8  0E5C               	movlw	92
   264   0049BA                     clear_0:
   265   0049BA  6AEE               	clrf	postinc0,c
   266   0049BC  06E8               	decf	wreg,f,c
   267   0049BE  E1FD               	bnz	clear_0
   268                           
   269                           ; Clear objects allocated to BANK0 (29 bytes)
   270   0049C0  EE00  F0D0         	lfsr	0,__pbssBANK0
   271   0049C4  0E1D               	movlw	29
   272   0049C6                     clear_1:
   273   0049C6  6AEE               	clrf	postinc0,c
   274   0049C8  06E8               	decf	wreg,f,c
   275   0049CA  E1FD               	bnz	clear_1
   276                           
   277                           ; Clear objects allocated to COMRAM (4 bytes)
   278   0049CC  6A5A               	clrf	(__pbssCOMRAM+3)& (0+255),c
   279   0049CE  6A59               	clrf	(__pbssCOMRAM+2)& (0+255),c
   280   0049D0  6A58               	clrf	(__pbssCOMRAM+1)& (0+255),c
   281   0049D2  6A57               	clrf	__pbssCOMRAM& (0+255),c
   282   0049D4                     end_of_initialization:
   283                           	callstack 0
   284   0049D4                     __end_of__initialization:
   285                           	callstack 0
   286   0049D4  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   287   0049D6  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   288   0049D8  0100               	movlb	0
   289   0049DA  EF5E  F00F         	goto	_main	;jump to C main() function
   290                           
   291                           	psect	bssCOMRAM
   292   000057                     __pbssCOMRAM:
   293                           	callstack 0
   294   000057                     _TxBufReadCnt:
   295                           	callstack 0
   296   000057                     	ds	1
   297   000058                     _TxBufWriteCnt:
   298                           	callstack 0
   299   000058                     	ds	1
   300   000059                     _RxBufReadCnt:
   301                           	callstack 0
   302   000059                     	ds	1
   303   00005A                     _RxBufWriteCnt:
   304                           	callstack 0
   305   00005A                     	ds	1
   306                           
   307                           	psect	bssBANK0
   308   0000D0                     __pbssBANK0:
   309                           	callstack 0
   310   0000D0                     _EUSART4RXbuf:
   311                           	callstack 0
   312   0000D0                     	ds	20
   313   0000E4                     _width:
   314                           	callstack 0
   315   0000E4                     	ds	2
   316   0000E6                     _prec:
   317                           	callstack 0
   318   0000E6                     	ds	2
   319   0000E8                     _off_period:
   320                           	callstack 0
   321   0000E8                     	ds	2
   322   0000EA                     _on_period:
   323                           	callstack 0
   324   0000EA                     	ds	2
   325   0000EC                     _flags:
   326                           	callstack 0
   327   0000EC                     	ds	1
   328                           
   329                           	psect	dataBANK0
   330   0000ED                     __pdataBANK0:
   331                           	callstack 0
   332   0000ED                     _reverse_time:
   333                           	callstack 0
   334   0000ED                     	ds	2
   335   0000EF                     _turning_time90:
   336                           	callstack 0
   337   0000EF                     	ds	2
   338                           
   339                           	psect	bssBANK1
   340   00019A                     __pbssBANK1:
   341                           	callstack 0
   342   00019A                     _EUSART4TXbuf:
   343                           	callstack 0
   344   00019A                     	ds	60
   345   0001D6                     _dbuf:
   346                           	callstack 0
   347   0001D6                     	ds	32
   348                           
   349                           	psect	cstackBANK3
   350   000300                     __pcstackBANK3:
   351                           	callstack 0
   352   000300                     main@counter_history:
   353                           	callstack 0
   354                           
   355                           ; 200 bytes @ 0x0
   356   000300                     	ds	200
   357                           
   358                           	psect	cstackBANK2
   359   000200                     __pcstackBANK2:
   360                           	callstack 0
   361   000200                     main@turn_history:
   362                           	callstack 0
   363                           
   364                           ; 200 bytes @ 0x0
   365   000200                     	ds	200
   366                           
   367                           	psect	cstackBANK1
   368   000100                     __pcstackBANK1:
   369                           	callstack 0
   370   000100                     return_home_turns@string1:
   371                           	callstack 0
   372                           
   373                           ; 150 bytes @ 0x0
   374   000100                     	ds	150
   375   000196                     return_home_turns@i:
   376                           	callstack 0
   377                           
   378                           ; 2 bytes @ 0x96
   379   000196                     	ds	2
   380   000198                     return_home_turns@k:
   381                           	callstack 0
   382                           
   383                           ; 2 bytes @ 0x98
   384   000198                     	ds	2
   385                           
   386                           	psect	cstackBANK0
   387   000060                     __pcstackBANK0:
   388                           	callstack 0
   389   000060                     ?_vfprintf:
   390                           	callstack 0
   391   000060                     ?_colorDetect:
   392                           	callstack 0
   393   000060                     vfprintf@fp:
   394                           	callstack 0
   395   000060                     colorDetect@clearRef:
   396                           	callstack 0
   397                           
   398                           ; 4 bytes @ 0x0
   399   000060                     	ds	2
   400   000062                     vfprintf@fmt:
   401                           	callstack 0
   402                           
   403                           ; 2 bytes @ 0x2
   404   000062                     	ds	2
   405   000064                     colorDetect@ambientRGBVal:
   406                           	callstack 0
   407   000064                     vfprintf@ap:
   408                           	callstack 0
   409                           
   410                           ; 2 bytes @ 0x4
   411   000064                     	ds	2
   412   000066                     ?_sprintf:
   413                           	callstack 0
   414   000066                     colorDetect@whiteRGBVal:
   415                           	callstack 0
   416   000066                     sprintf@s:
   417                           	callstack 0
   418                           
   419                           ; 2 bytes @ 0x6
   420   000066                     	ds	2
   421   000068                     colorDetect@mL:
   422                           	callstack 0
   423   000068                     sprintf@fmt:
   424                           	callstack 0
   425                           
   426                           ; 2 bytes @ 0x8
   427   000068                     	ds	2
   428   00006A                     colorDetect@mR:
   429                           	callstack 0
   430                           
   431                           ; 2 bytes @ 0xA
   432   00006A                     	ds	2
   433   00006C                     colorDetect@whiteR:
   434                           	callstack 0
   435                           
   436                           ; 4 bytes @ 0xC
   437   00006C                     	ds	4
   438   000070                     colorDetect@whiteG:
   439                           	callstack 0
   440                           
   441                           ; 4 bytes @ 0x10
   442   000070                     	ds	2
   443   000072                     sprintf@ap:
   444                           	callstack 0
   445                           
   446                           ; 2 bytes @ 0x12
   447   000072                     	ds	2
   448   000074                     colorDetect@whiteB:
   449                           	callstack 0
   450   000074                     sprintf@f:
   451                           	callstack 0
   452                           
   453                           ; 11 bytes @ 0x14
   454   000074                     	ds	4
   455   000078                     colorDetect@ambientR:
   456                           	callstack 0
   457                           
   458                           ; 2 bytes @ 0x18
   459   000078                     	ds	2
   460   00007A                     colorDetect@ambientG:
   461                           	callstack 0
   462                           
   463                           ; 2 bytes @ 0x1A
   464   00007A                     	ds	2
   465   00007C                     colorDetect@ambientB:
   466                           	callstack 0
   467                           
   468                           ; 2 bytes @ 0x1C
   469   00007C                     	ds	2
   470   00007E                     colorDetect@colour_ref:
   471                           	callstack 0
   472                           
   473                           ; 2 bytes @ 0x1E
   474   00007E                     	ds	1
   475   00007F                     return_home_turns@turn_history:
   476                           	callstack 0
   477                           
   478                           ; 2 bytes @ 0x1F
   479   00007F                     	ds	1
   480   000080                     colorDetect@RGBVal:
   481                           	callstack 0
   482                           
   483                           ; 8 bytes @ 0x20
   484   000080                     	ds	1
   485   000081                     return_home_turns@counter_history:
   486                           	callstack 0
   487                           
   488                           ; 2 bytes @ 0x21
   489   000081                     	ds	2
   490   000083                     return_home_turns@index:
   491                           	callstack 0
   492                           
   493                           ; 2 bytes @ 0x23
   494   000083                     	ds	2
   495   000085                     return_home_turns@mL:
   496                           	callstack 0
   497                           
   498                           ; 2 bytes @ 0x25
   499   000085                     	ds	2
   500   000087                     return_home_turns@mR:
   501                           	callstack 0
   502                           
   503                           ; 2 bytes @ 0x27
   504   000087                     	ds	1
   505   000088                     colorDetect@redPrint:
   506                           	callstack 0
   507                           
   508                           ; 4 bytes @ 0x28
   509   000088                     	ds	1
   510   000089                     ??_return_home_turns:
   511                           
   512                           ; 1 bytes @ 0x29
   513   000089                     	ds	3
   514   00008C                     colorDetect@greenPrint:
   515                           	callstack 0
   516                           
   517                           ; 4 bytes @ 0x2C
   518   00008C                     	ds	4
   519   000090                     colorDetect@bluePrint:
   520                           	callstack 0
   521                           
   522                           ; 4 bytes @ 0x30
   523   000090                     	ds	4
   524   000094                     ??_main:
   525                           
   526                           ; 1 bytes @ 0x34
   527   000094                     	ds	3
   528   000097                     main@whiteC:
   529                           	callstack 0
   530                           
   531                           ; 4 bytes @ 0x37
   532   000097                     	ds	4
   533   00009B                     main@clearRef:
   534                           	callstack 0
   535                           
   536                           ; 4 bytes @ 0x3B
   537   00009B                     	ds	4
   538   00009F                     main@forwardCount:
   539                           	callstack 0
   540                           
   541                           ; 2 bytes @ 0x3F
   542   00009F                     	ds	2
   543   0000A1                     main@colorNum:
   544                           	callstack 0
   545                           
   546                           ; 2 bytes @ 0x41
   547   0000A1                     	ds	2
   548   0000A3                     main@RGBVal:
   549                           	callstack 0
   550                           
   551                           ; 8 bytes @ 0x43
   552   0000A3                     	ds	8
   553   0000AB                     main@carGo:
   554                           	callstack 0
   555                           
   556                           ; 1 bytes @ 0x4B
   557   0000AB                     	ds	1
   558   0000AC                     main@ambientRGBVal:
   559                           	callstack 0
   560                           
   561                           ; 8 bytes @ 0x4C
   562   0000AC                     	ds	8
   563   0000B4                     main@whiteRGBVal:
   564                           	callstack 0
   565                           
   566                           ; 8 bytes @ 0x54
   567   0000B4                     	ds	8
   568   0000BC                     main@index:
   569                           	callstack 0
   570                           
   571                           ; 2 bytes @ 0x5C
   572   0000BC                     	ds	2
   573   0000BE                     main@motorRight:
   574                           	callstack 0
   575                           
   576                           ; 9 bytes @ 0x5E
   577   0000BE                     	ds	9
   578   0000C7                     main@motorLeft:
   579                           	callstack 0
   580                           
   581                           ; 9 bytes @ 0x67
   582   0000C7                     	ds	9
   583                           
   584                           	psect	cstackCOMRAM
   585   000001                     __pcstackCOMRAM:
   586                           	callstack 0
   587   000001                     ??_getCharFromTxBuf:
   588   000001                     putCharToRxBuf@byte:
   589                           	callstack 0
   590   000001                     
   591                           ; 1 bytes @ 0x0
   592   000001                     	ds	2
   593   000003                     ??_HighISR:
   594                           
   595                           ; 1 bytes @ 0x2
   596   000003                     	ds	2
   597   000005                     ??_I2C_2_Master_Idle:
   598   000005                     ?___wmul:
   599                           	callstack 0
   600   000005                     ?___fladd:
   601                           	callstack 0
   602   000005                     ?___xxtofl:
   603                           	callstack 0
   604   000005                     ?___aodiv:
   605                           	callstack 0
   606   000005                     ?___aomod:
   607                           	callstack 0
   608   000005                     putCharToTxBuf@byte:
   609                           	callstack 0
   610   000005                     initDCmotorsPWM@PWMperiod:
   611                           	callstack 0
   612   000005                     DCmotorsInit@mL:
   613                           	callstack 0
   614   000005                     ___wmul@multiplier:
   615                           	callstack 0
   616   000005                     fputc@c:
   617                           	callstack 0
   618   000005                     ___fladd@b:
   619                           	callstack 0
   620   000005                     ___xxtofl@val:
   621                           	callstack 0
   622   000005                     ___aodiv@dividend:
   623                           	callstack 0
   624   000005                     ___aomod@dividend:
   625                           	callstack 0
   626                           
   627                           ; 8 bytes @ 0x4
   628   000005                     	ds	1
   629   000006                     ??_I2C_2_Master_Read:
   630   000006                     I2C_2_Master_Write@data_byte:
   631                           	callstack 0
   632   000006                     TxBufferedString@string:
   633                           	callstack 0
   634                           
   635                           ; 2 bytes @ 0x5
   636   000006                     	ds	1
   637   000007                     color_writetoaddr@value:
   638                           	callstack 0
   639   000007                     I2C_2_Master_Read@ack:
   640                           	callstack 0
   641   000007                     DCmotorsInit@mR:
   642                           	callstack 0
   643   000007                     ___wmul@multiplicand:
   644                           	callstack 0
   645   000007                     fputc@fp:
   646                           	callstack 0
   647                           
   648                           ; 2 bytes @ 0x6
   649   000007                     	ds	1
   650   000008                     color_writetoaddr@address:
   651                           	callstack 0
   652   000008                     I2C_2_Master_Read@tmp:
   653                           	callstack 0
   654                           
   655                           ; 1 bytes @ 0x7
   656   000008                     	ds	1
   657   000009                     ??_fputc:
   658   000009                     ??_color_click_init:
   659   000009                     ??___xxtofl:
   660   000009                     ?_color_read_Red:
   661                           	callstack 0
   662   000009                     ?_color_read_Green:
   663                           	callstack 0
   664   000009                     ?_color_read_Blue:
   665                           	callstack 0
   666   000009                     ?_color_read_Clear:
   667                           	callstack 0
   668   000009                     ___wmul@product:
   669                           	callstack 0
   670   000009                     ___fladd@a:
   671                           	callstack 0
   672                           
   673                           ; 4 bytes @ 0x8
   674   000009                     	ds	2
   675   00000B                     ??_color_read_Red:
   676   00000B                     ??_color_read_Green:
   677   00000B                     ??_color_read_Blue:
   678   00000B                     ??_color_read_Clear:
   679   00000B                     ?___lwdiv:
   680                           	callstack 0
   681   00000B                     ___lwdiv@dividend:
   682                           	callstack 0
   683                           
   684                           ; 2 bytes @ 0xA
   685   00000B                     	ds	2
   686   00000D                     ??___fladd:
   687   00000D                     ___xxtofl@sign:
   688                           	callstack 0
   689   00000D                     ___lwdiv@divisor:
   690                           	callstack 0
   691   00000D                     ___aodiv@divisor:
   692                           	callstack 0
   693   00000D                     ___aomod@divisor:
   694                           	callstack 0
   695                           
   696                           ; 8 bytes @ 0xC
   697   00000D                     	ds	1
   698   00000E                     ___xxtofl@exp:
   699                           	callstack 0
   700   00000E                     color_read_Red@tmp:
   701                           	callstack 0
   702   00000E                     color_read_Green@tmp:
   703                           	callstack 0
   704   00000E                     color_read_Blue@tmp:
   705                           	callstack 0
   706   00000E                     color_read_Clear@tmp:
   707                           	callstack 0
   708   00000E                     fputs@s:
   709                           	callstack 0
   710                           
   711                           ; 2 bytes @ 0xD
   712   00000E                     	ds	1
   713   00000F                     ___lwdiv@quotient:
   714                           	callstack 0
   715   00000F                     ___xxtofl@arg:
   716                           	callstack 0
   717                           
   718                           ; 4 bytes @ 0xE
   719   00000F                     	ds	1
   720   000010                     getColor@v:
   721                           	callstack 0
   722   000010                     fputs@fp:
   723                           	callstack 0
   724                           
   725                           ; 2 bytes @ 0xF
   726   000010                     	ds	1
   727   000011                     ___lwdiv@counter:
   728                           	callstack 0
   729   000011                     ___fladd@signs:
   730                           	callstack 0
   731                           
   732                           ; 1 bytes @ 0x10
   733   000011                     	ds	1
   734   000012                     ___fladd@aexp:
   735                           	callstack 0
   736   000012                     fputs@c:
   737                           	callstack 0
   738   000012                     ambientCal@v:
   739                           	callstack 0
   740   000012                     whiteCal@v:
   741                           	callstack 0
   742   000012                     setMotorPWM@m:
   743                           	callstack 0
   744                           
   745                           ; 2 bytes @ 0x11
   746   000012                     	ds	1
   747   000013                     ___fladd@bexp:
   748                           	callstack 0
   749   000013                     fputs@i:
   750                           	callstack 0
   751                           
   752                           ; 2 bytes @ 0x12
   753   000013                     	ds	1
   754   000014                     ??_ambientCal:
   755   000014                     ??_whiteCal:
   756   000014                     ??_setMotorPWM:
   757   000014                     ___fladd@grs:
   758                           	callstack 0
   759                           
   760                           ; 1 bytes @ 0x13
   761   000014                     	ds	1
   762   000015                     ?___flsub:
   763                           	callstack 0
   764   000015                     ___aodiv@counter:
   765                           	callstack 0
   766   000015                     ___aomod@counter:
   767                           	callstack 0
   768   000015                     pad@fp:
   769                           	callstack 0
   770   000015                     ___flsub@b:
   771                           	callstack 0
   772                           
   773                           ; 4 bytes @ 0x14
   774   000015                     	ds	1
   775   000016                     setMotorPWM@posDuty:
   776                           	callstack 0
   777   000016                     ___aodiv@sign:
   778                           	callstack 0
   779   000016                     ___aomod@sign:
   780                           	callstack 0
   781   000016                     ambientCal@i:
   782                           	callstack 0
   783   000016                     whiteCal@i:
   784                           	callstack 0
   785                           
   786                           ; 2 bytes @ 0x15
   787   000016                     	ds	1
   788   000017                     ?_abs:
   789                           	callstack 0
   790   000017                     setMotorPWM@negDuty:
   791                           	callstack 0
   792   000017                     pad@buf:
   793                           	callstack 0
   794   000017                     abs@a:
   795                           	callstack 0
   796   000017                     ___aodiv@quotient:
   797                           	callstack 0
   798                           
   799                           ; 8 bytes @ 0x16
   800   000017                     	ds	1
   801   000018                     stop@mL:
   802                           	callstack 0
   803   000018                     forward@mL:
   804                           	callstack 0
   805   000018                     reverse@mL:
   806                           	callstack 0
   807                           
   808                           ; 2 bytes @ 0x17
   809   000018                     	ds	1
   810   000019                     ??_abs:
   811   000019                     pad@p:
   812                           	callstack 0
   813   000019                     ___flsub@a:
   814                           	callstack 0
   815                           
   816                           ; 4 bytes @ 0x18
   817   000019                     	ds	1
   818   00001A                     stop@mR:
   819                           	callstack 0
   820   00001A                     forward@mR:
   821                           	callstack 0
   822   00001A                     reverse@mR:
   823                           	callstack 0
   824                           
   825                           ; 2 bytes @ 0x19
   826   00001A                     	ds	1
   827   00001B                     ??_pad:
   828                           
   829                           ; 1 bytes @ 0x1A
   830   00001B                     	ds	1
   831   00001C                     ??_stop:
   832   00001C                     pad@i:
   833                           	callstack 0
   834                           
   835                           ; 2 bytes @ 0x1B
   836   00001C                     	ds	1
   837   00001D                     ?___flmul:
   838                           	callstack 0
   839   00001D                     ___flge@ff1:
   840                           	callstack 0
   841   00001D                     ___flmul@b:
   842                           	callstack 0
   843                           
   844                           ; 4 bytes @ 0x1C
   845   00001D                     	ds	1
   846   00001E                     turnLeft_90@mL:
   847                           	callstack 0
   848   00001E                     turnRight_90@mL:
   849                           	callstack 0
   850   00001E                     turn_180@mL:
   851                           	callstack 0
   852   00001E                     turnRight_135@mL:
   853                           	callstack 0
   854   00001E                     turnLeft_135@mL:
   855                           	callstack 0
   856   00001E                     pad@w:
   857                           	callstack 0
   858                           
   859                           ; 2 bytes @ 0x1D
   860   00001E                     	ds	2
   861   000020                     turnLeft_90@mR:
   862                           	callstack 0
   863   000020                     turnRight_90@mR:
   864                           	callstack 0
   865   000020                     turn_180@mR:
   866                           	callstack 0
   867   000020                     turnRight_135@mR:
   868                           	callstack 0
   869   000020                     turnLeft_135@mR:
   870                           	callstack 0
   871   000020                     dtoa@fp:
   872                           	callstack 0
   873                           
   874                           ; 2 bytes @ 0x1F
   875   000020                     	ds	1
   876   000021                     ___flge@ff2:
   877                           	callstack 0
   878   000021                     ___flmul@a:
   879                           	callstack 0
   880                           
   881                           ; 4 bytes @ 0x20
   882   000021                     	ds	1
   883   000022                     ??_turnRight_90:
   884   000022                     ??_turnLeft_90:
   885   000022                     ??_turn_180:
   886   000022                     ??_turnRight_135:
   887   000022                     ??_turnLeft_135:
   888   000022                     dtoa@d:
   889                           	callstack 0
   890                           
   891                           ; 8 bytes @ 0x21
   892   000022                     	ds	2
   893   000024                     reverseSquareRight@mL:
   894                           	callstack 0
   895   000024                     reverseSquareLeft@mL:
   896                           	callstack 0
   897                           
   898                           ; 2 bytes @ 0x23
   899   000024                     	ds	1
   900   000025                     ??___flmul:
   901   000025                     ??___flge:
   902                           
   903                           ; 1 bytes @ 0x24
   904   000025                     	ds	1
   905   000026                     reverseSquareRight@mR:
   906                           	callstack 0
   907   000026                     reverseSquareLeft@mR:
   908                           	callstack 0
   909                           
   910                           ; 2 bytes @ 0x25
   911   000026                     	ds	2
   912   000028                     ??_reverseSquareRight:
   913   000028                     ??_reverseSquareLeft:
   914                           
   915                           ; 1 bytes @ 0x27
   916   000028                     	ds	1
   917   000029                     ___flmul@sign:
   918                           	callstack 0
   919                           
   920                           ; 1 bytes @ 0x28
   921   000029                     	ds	1
   922   00002A                     ??_dtoa:
   923   00002A                     ___flmul@grs:
   924                           	callstack 0
   925                           
   926                           ; 4 bytes @ 0x29
   927   00002A                     	ds	4
   928   00002E                     ___flmul@aexp:
   929                           	callstack 0
   930                           
   931                           ; 1 bytes @ 0x2D
   932   00002E                     	ds	1
   933   00002F                     ___flmul@bexp:
   934                           	callstack 0
   935                           
   936                           ; 1 bytes @ 0x2E
   937   00002F                     	ds	1
   938   000030                     ___flmul@prod:
   939                           	callstack 0
   940                           
   941                           ; 4 bytes @ 0x2F
   942   000030                     	ds	2
   943   000032                     _dtoa$2672:
   944                           	callstack 0
   945                           
   946                           ; 2 bytes @ 0x31
   947   000032                     	ds	2
   948   000034                     ___flmul@temp:
   949                           	callstack 0
   950   000034                     dtoa@p:
   951                           	callstack 0
   952                           
   953                           ; 2 bytes @ 0x33
   954   000034                     	ds	2
   955   000036                     ?___fldiv:
   956                           	callstack 0
   957   000036                     dtoa@w:
   958                           	callstack 0
   959   000036                     ___fldiv@b:
   960                           	callstack 0
   961                           
   962                           ; 4 bytes @ 0x35
   963   000036                     	ds	2
   964   000038                     dtoa@n:
   965                           	callstack 0
   966                           
   967                           ; 8 bytes @ 0x37
   968   000038                     	ds	2
   969   00003A                     ___fldiv@a:
   970                           	callstack 0
   971                           
   972                           ; 4 bytes @ 0x39
   973   00003A                     	ds	4
   974   00003E                     ??___fldiv:
   975                           
   976                           ; 1 bytes @ 0x3D
   977   00003E                     	ds	2
   978   000040                     dtoa@s:
   979                           	callstack 0
   980                           
   981                           ; 1 bytes @ 0x3F
   982   000040                     	ds	1
   983   000041                     dtoa@i:
   984                           	callstack 0
   985                           
   986                           ; 2 bytes @ 0x40
   987   000041                     	ds	1
   988   000042                     ___fldiv@rem:
   989                           	callstack 0
   990                           
   991                           ; 4 bytes @ 0x41
   992   000042                     	ds	1
   993   000043                     vfpfcnvrt@fp:
   994                           	callstack 0
   995                           
   996                           ; 2 bytes @ 0x42
   997   000043                     	ds	2
   998   000045                     vfpfcnvrt@fmt:
   999                           	callstack 0
  1000                           
  1001                           ; 2 bytes @ 0x44
  1002   000045                     	ds	1
  1003   000046                     ___fldiv@sign:
  1004                           	callstack 0
  1005                           
  1006                           ; 1 bytes @ 0x45
  1007   000046                     	ds	1
  1008   000047                     ___fldiv@new_exp:
  1009                           	callstack 0
  1010   000047                     vfpfcnvrt@ap:
  1011                           	callstack 0
  1012                           
  1013                           ; 2 bytes @ 0x46
  1014   000047                     	ds	2
  1015   000049                     ??_vfpfcnvrt:
  1016   000049                     ___fldiv@grs:
  1017                           	callstack 0
  1018                           
  1019                           ; 4 bytes @ 0x48
  1020   000049                     	ds	2
  1021   00004B                     vfpfcnvrt@convarg:
  1022                           	callstack 0
  1023                           
  1024                           ; 8 bytes @ 0x4A
  1025   00004B                     	ds	2
  1026   00004D                     ___fldiv@bexp:
  1027                           	callstack 0
  1028                           
  1029                           ; 1 bytes @ 0x4C
  1030   00004D                     	ds	1
  1031   00004E                     ___fldiv@aexp:
  1032                           	callstack 0
  1033                           
  1034                           ; 1 bytes @ 0x4D
  1035   00004E                     	ds	1
  1036   00004F                     ??_colorDetect:
  1037                           
  1038                           ; 1 bytes @ 0x4E
  1039   00004F                     	ds	4
  1040   000053                     vfpfcnvrt@cp:
  1041                           	callstack 0
  1042                           
  1043                           ; 2 bytes @ 0x52
  1044   000053                     	ds	2
  1045   000055                     vfprintf@cfmt:
  1046                           	callstack 0
  1047                           
  1048                           ; 2 bytes @ 0x54
  1049   000055                     	ds	2
  1050   000057                     
  1051                           ; 1 bytes @ 0x56
  1052 ;;
  1053 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1054 ;;
  1055 ;; *************** function _main *****************
  1056 ;; Defined at:
  1057 ;;		line 23 in file "MazeRobot.X/main.c"
  1058 ;; Parameters:    Size  Location     Type
  1059 ;;		None
  1060 ;; Auto vars:     Size  Location     Type
  1061 ;;  counter_hist  200    0[BANK3 ] unsigned int [100]
  1062 ;;  turn_history  200    0[BANK2 ] unsigned int [100]
  1063 ;;  motorLeft       9  103[BANK0 ] struct DC_motor
  1064 ;;  motorRight      9   94[BANK0 ] struct DC_motor
  1065 ;;  whiteRGBVal     8   84[BANK0 ] struct RGB
  1066 ;;  ambientRGBVa    8   76[BANK0 ] struct RGB
  1067 ;;  RGBVal          8   67[BANK0 ] struct RGB
  1068 ;;  clearRef        4   59[BANK0 ] struct RGB
  1069 ;;  whiteC          4   55[BANK0 ] struct RGB
  1070 ;;  index           2   92[BANK0 ] unsigned int 
  1071 ;;  colorNum        2   65[BANK0 ] unsigned int 
  1072 ;;  forwardCount    2   63[BANK0 ] unsigned int 
  1073 ;;  carGo           1   75[BANK0 ] unsigned char 
  1074 ;; Return value:  Size  Location     Type
  1075 ;;                  1    wreg      void 
  1076 ;; Registers used:
  1077 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1078 ;; Tracked objects:
  1079 ;;		On entry : 0/0
  1080 ;;		On exit  : 0/0
  1081 ;;		Unchanged: 0/0
  1082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1084 ;;      Locals:         0      57       0     200     200       0       0       0       0       0       0       0       
      +0       0       0
  1085 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1086 ;;      Totals:         0      60       0     200     200       0       0       0       0       0       0       0       
      +0       0       0
  1087 ;;Total ram usage:      460 bytes
  1088 ;; Hardware stack levels required when called: 11
  1089 ;; This function calls:
  1090 ;;		_DCmotorsInit
  1091 ;;		___fldiv
  1092 ;;		___flge
  1093 ;;		___xxtofl
  1094 ;;		_ambientCal
  1095 ;;		_colorDetect
  1096 ;;		_color_click_init
  1097 ;;		_forward
  1098 ;;		_getColor
  1099 ;;		_initDCmotorsPWM
  1100 ;;		_initUSART4
  1101 ;;		_return_home_turns
  1102 ;;		_stop
  1103 ;;		_turn_180
  1104 ;;		_whiteCal
  1105 ;; This function is called by:
  1106 ;;		Startup code after reset
  1107 ;; This function uses a non-reentrant model
  1108 ;;
  1109                           
  1110                           	psect	text0
  1111   001EBC                     __ptext0:
  1112                           	callstack 0
  1113   001EBC                     _main:
  1114                           	callstack 20
  1115   001EBC                     
  1116                           ;MazeRobot.X/main.c: 25:     color_click_init();
  1117   001EBC  EC75  F025         	call	_color_click_init	;wreg free
  1118   001EC0                     
  1119                           ;MazeRobot.X/main.c: 26:     initUSART4();
  1120   001EC0  ECA7  F025         	call	_initUSART4	;wreg free
  1121   001EC4                     
  1122                           ;MazeRobot.X/main.c: 27:     initDCmotorsPWM(199);
  1123   001EC4  0E00               	movlw	0
  1124   001EC6  6E06               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
  1125   001EC8  0EC7               	movlw	199
  1126   001ECA  6E05               	movwf	initDCmotorsPWM@PWMperiod^0,c
  1127   001ECC  ECE9  F022         	call	_initDCmotorsPWM	;wreg free
  1128   001ED0                     
  1129                           ;MazeRobot.X/main.c: 31:     LATDbits.LATD7=0;
  1130   001ED0  9E7C               	bcf	124,7,c	;volatile
  1131   001ED2                     
  1132                           ;MazeRobot.X/main.c: 32:     TRISDbits.TRISD7=0;
  1133   001ED2  9E84               	bcf	132,7,c	;volatile
  1134   001ED4                     
  1135                           ;MazeRobot.X/main.c: 34:     LATHbits.LATH3=0;
  1136   001ED4  9680               	bcf	128,3,c	;volatile
  1137   001ED6                     
  1138                           ;MazeRobot.X/main.c: 35:     TRISHbits.TRISH3=0;
  1139   001ED6  9688               	bcf	136,3,c	;volatile
  1140   001ED8                     
  1141                           ;MazeRobot.X/main.c: 37:     LATDbits.LATD4 = 0;
  1142   001ED8  987C               	bcf	124,4,c	;volatile
  1143   001EDA                     
  1144                           ;MazeRobot.X/main.c: 38:     TRISDbits.TRISD4 = 0;
  1145   001EDA  9884               	bcf	132,4,c	;volatile
  1146   001EDC                     
  1147                           ;MazeRobot.X/main.c: 40:     LATHbits.LATH0 = 0;
  1148   001EDC  9080               	bcf	128,0,c	;volatile
  1149   001EDE                     
  1150                           ;MazeRobot.X/main.c: 41:     TRISHbits.TRISH0 = 0;
  1151   001EDE  9088               	bcf	136,0,c	;volatile
  1152   001EE0                     
  1153                           ;MazeRobot.X/main.c: 43:     LATFbits.LATF0 = 0;
  1154   001EE0  907E               	bcf	126,0,c	;volatile
  1155   001EE2                     
  1156                           ;MazeRobot.X/main.c: 44:     TRISFbits.TRISF0 = 0;
  1157   001EE2  9086               	bcf	134,0,c	;volatile
  1158   001EE4                     
  1159                           ;MazeRobot.X/main.c: 46:     LATHbits.LATH1 = 0;
  1160   001EE4  9280               	bcf	128,1,c	;volatile
  1161   001EE6                     
  1162                           ;MazeRobot.X/main.c: 47:     TRISHbits.TRISH1 = 0;
  1163   001EE6  9288               	bcf	136,1,c	;volatile
  1164   001EE8                     
  1165                           ;MazeRobot.X/main.c: 49:     LATDbits.LATD3 = 0;
  1166   001EE8  967C               	bcf	124,3,c	;volatile
  1167   001EEA                     
  1168                           ;MazeRobot.X/main.c: 50:     TRISDbits.TRISD3 = 0;
  1169   001EEA  9684               	bcf	132,3,c	;volatile
  1170   001EEC                     
  1171                           ;MazeRobot.X/main.c: 52:     LATDbits.LATD4 = 1;
  1172   001EEC  887C               	bsf	124,4,c	;volatile
  1173   001EEE                     
  1174                           ;MazeRobot.X/main.c: 53:     LATFbits.LATF0 = 1;
  1175   001EEE  807E               	bsf	126,0,c	;volatile
  1176   001EF0                     
  1177                           ;MazeRobot.X/main.c: 54:     LATHbits.LATH0 = 1;
  1178   001EF0  8080               	bsf	128,0,c	;volatile
  1179   001EF2                     
  1180                           ;MazeRobot.X/main.c: 55:     LATFbits.LATF0 = 1;
  1181   001EF2  807E               	bsf	126,0,c	;volatile
  1182   001EF4                     
  1183                           ;MazeRobot.X/main.c: 56:     LATDbits.LATD3 = 1;
  1184   001EF4  867C               	bsf	124,3,c	;volatile
  1185   001EF6                     
  1186                           ;MazeRobot.X/main.c: 58:     LATGbits.LATG0=1;
  1187   001EF6  807F               	bsf	127,0,c	;volatile
  1188   001EF8                     
  1189                           ;MazeRobot.X/main.c: 59:     LATEbits.LATE7=1;
  1190   001EF8  8E7D               	bsf	125,7,c	;volatile
  1191   001EFA                     
  1192                           ;MazeRobot.X/main.c: 60:     LATAbits.LATA3=1;
  1193   001EFA  8679               	bsf	121,3,c	;volatile
  1194   001EFC                     
  1195                           ;MazeRobot.X/main.c: 62:     TRISGbits.TRISG0=0;
  1196   001EFC  9087               	bcf	135,0,c	;volatile
  1197   001EFE                     
  1198                           ;MazeRobot.X/main.c: 63:     TRISEbits.TRISE7=0;
  1199   001EFE  9E85               	bcf	133,7,c	;volatile
  1200   001F00                     
  1201                           ;MazeRobot.X/main.c: 64:     TRISAbits.TRISA3=0;
  1202   001F00  9681               	bcf	129,3,c	;volatile
  1203   001F02                     
  1204                           ;MazeRobot.X/main.c: 67:     TRISFbits.TRISF2=1;
  1205   001F02  8486               	bsf	134,2,c	;volatile
  1206   001F04                     
  1207                           ;MazeRobot.X/main.c: 68:     ANSELFbits.ANSELF2=0;
  1208   001F04  010E               	movlb	14	; () banked
  1209   001F06  95B4               	bcf	180,2,b	;volatile
  1210   001F08                     
  1211                           ; BSR set to: 14
  1212                           ;MazeRobot.X/main.c: 70:     TRISFbits.TRISF3=1;
  1213   001F08  8686               	bsf	134,3,c	;volatile
  1214   001F0A                     
  1215                           ; BSR set to: 14
  1216                           ;MazeRobot.X/main.c: 71:     ANSELFbits.ANSELF3=0;
  1217   001F0A  97B4               	bcf	180,3,b	;volatile
  1218   001F0C                     
  1219                           ; BSR set to: 14
  1220                           ;MazeRobot.X/main.c: 78:     unsigned char carGo = 0;
  1221   001F0C  0E00               	movlw	0
  1222   001F0E  0100               	movlb	0	; () banked
  1223   001F10  6FAB               	movwf	main@carGo& (0+255),b
  1224   001F12                     
  1225                           ; BSR set to: 0
  1226                           ;MazeRobot.X/main.c: 80:     DC_motor motorLeft,motorRight;;MazeRobot.X/main.c: 81:     
      +                          DCmotorsInit(&motorLeft,&motorRight);
  1227   001F12  0EC7               	movlw	low main@motorLeft
  1228   001F14  6E05               	movwf	DCmotorsInit@mL^0,c
  1229   001F16  0E00               	movlw	high main@motorLeft
  1230   001F18  6E06               	movwf	(DCmotorsInit@mL+1)^0,c
  1231   001F1A  0EBE               	movlw	low main@motorRight
  1232   001F1C  6E07               	movwf	DCmotorsInit@mR^0,c
  1233   001F1E  0E00               	movlw	high main@motorRight
  1234   001F20  6E08               	movwf	(DCmotorsInit@mR+1)^0,c
  1235   001F22  EC2E  F021         	call	_DCmotorsInit	;wreg free
  1236   001F26                     
  1237                           ;MazeRobot.X/main.c: 83:     unsigned int turn_history[100];;MazeRobot.X/main.c: 84:    
      +                           unsigned int counter_history[100];;MazeRobot.X/main.c: 85:     unsigned int index = 0;
  1238   001F26  0E00               	movlw	0
  1239   001F28  0100               	movlb	0	; () banked
  1240   001F2A  6FBD               	movwf	(main@index+1)& (0+255),b
  1241   001F2C  0E00               	movlw	0
  1242   001F2E  6FBC               	movwf	main@index& (0+255),b
  1243   001F30                     
  1244                           ; BSR set to: 0
  1245                           ;MazeRobot.X/main.c: 86:     unsigned int forwardCount = 0;
  1246   001F30  0E00               	movlw	0
  1247   001F32  6FA0               	movwf	(main@forwardCount+1)& (0+255),b
  1248   001F34  0E00               	movlw	0
  1249   001F36  6F9F               	movwf	main@forwardCount& (0+255),b
  1250   001F38                     
  1251                           ; BSR set to: 0
  1252                           ;MazeRobot.X/main.c: 89:     ambientCal(&ambientRGBVal);
  1253   001F38  0EAC               	movlw	low main@ambientRGBVal
  1254   001F3A  6E12               	movwf	ambientCal@v^0,c
  1255   001F3C  0E00               	movlw	high main@ambientRGBVal
  1256   001F3E  6E13               	movwf	(ambientCal@v+1)^0,c
  1257   001F40  ECE6  F01F         	call	_ambientCal	;wreg free
  1258   001F44                     l5307:
  1259                           
  1260                           ;MazeRobot.X/main.c: 92:         getColor(&RGBVal);
  1261   001F44  0EA3               	movlw	low main@RGBVal
  1262   001F46  6E10               	movwf	getColor@v^0,c
  1263   001F48  0E00               	movlw	high main@RGBVal
  1264   001F4A  6E11               	movwf	(getColor@v+1)^0,c
  1265   001F4C  ECA8  F023         	call	_getColor	;wreg free
  1266   001F50                     
  1267                           ;MazeRobot.X/main.c: 94:         if(!PORTFbits.RF2 && !PORTFbits.RF3){
  1268   001F50  B48E               	btfsc	142,2,c	;volatile
  1269   001F52  EFAD  F00F         	goto	u5801
  1270   001F56  EFAF  F00F         	goto	u5800
  1271   001F5A                     u5801:
  1272   001F5A  EFD2  F00F         	goto	l5323
  1273   001F5E                     u5800:
  1274   001F5E  B68E               	btfsc	142,3,c	;volatile
  1275   001F60  EFB4  F00F         	goto	u5811
  1276   001F64  EFB6  F00F         	goto	u5810
  1277   001F68                     u5811:
  1278   001F68  EFD2  F00F         	goto	l5323
  1279   001F6C                     u5810:
  1280   001F6C                     
  1281                           ;MazeRobot.X/main.c: 95:             LATDbits.LATD7 = 1 , LATHbits.LATH3 = 1;
  1282   001F6C  8E7C               	bsf	124,7,c	;volatile
  1283   001F6E  8680               	bsf	128,3,c	;volatile
  1284   001F70                     
  1285                           ;MazeRobot.X/main.c: 96:             _delay((unsigned long)((500)*(64000000/4000.0)));
  1286   001F70  0E29               	movlw	41
  1287   001F72  0100               	movlb	0	; () banked
  1288   001F74  6F95               	movwf	(??_main+1)& (0+255),b
  1289   001F76  0E96               	movlw	150
  1290   001F78  6F94               	movwf	??_main& (0+255),b
  1291   001F7A  0E7F               	movlw	127
  1292   001F7C                     u6027:
  1293   001F7C  2EE8               	decfsz	wreg,f,c
  1294   001F7E  D7FE               	bra	u6027
  1295   001F80  2F94               	decfsz	??_main& (0+255),f,b
  1296   001F82  D7FC               	bra	u6027
  1297   001F84  2F95               	decfsz	(??_main+1)& (0+255),f,b
  1298   001F86  D7FA               	bra	u6027
  1299   001F88                     
  1300                           ;MazeRobot.X/main.c: 97:             LATDbits.LATD7 = 0 , LATHbits.LATH3 = 0;
  1301   001F88  9E7C               	bcf	124,7,c	;volatile
  1302   001F8A  9680               	bcf	128,3,c	;volatile
  1303   001F8C                     
  1304                           ;MazeRobot.X/main.c: 98:             carGo = !carGo;
  1305   001F8C  0100               	movlb	0	; () banked
  1306   001F8E  51AB               	movf	main@carGo& (0+255),w,b
  1307   001F90  B4D8               	btfsc	status,2,c
  1308   001F92  EFCD  F00F         	goto	u5821
  1309   001F96  EFD0  F00F         	goto	u5820
  1310   001F9A                     u5821:
  1311   001F9A  0E01               	movlw	1
  1312   001F9C  EFD1  F00F         	goto	u5830
  1313   001FA0                     u5820:
  1314   001FA0  0E00               	movlw	0
  1315   001FA2                     u5830:
  1316   001FA2  6FAB               	movwf	main@carGo& (0+255),b
  1317   001FA4                     l5323:
  1318                           
  1319                           ;MazeRobot.X/main.c: 102:         if (!PORTFbits.RF2 & PORTFbits.RF3){
  1320   001FA4  A48E               	btfss	142,2,c	;volatile
  1321   001FA6  EFD7  F00F         	goto	u5841
  1322   001FAA  EFDA  F00F         	goto	u5840
  1323   001FAE                     u5841:
  1324   001FAE  0E01               	movlw	1
  1325   001FB0  EFDB  F00F         	goto	u5850
  1326   001FB4                     u5840:
  1327   001FB4  0E00               	movlw	0
  1328   001FB6                     u5850:
  1329   001FB6  0100               	movlb	0	; () banked
  1330   001FB8  6F94               	movwf	??_main& (0+255),b
  1331   001FBA  6B95               	clrf	(??_main+1)& (0+255),b
  1332   001FBC  B68E               	btfsc	142,3,c	;volatile
  1333   001FBE  EFE3  F00F         	goto	u5861
  1334   001FC2  EFE7  F00F         	goto	u5860
  1335   001FC6                     u5861:
  1336   001FC6  6B96               	clrf	(??_main+2)& (0+255),b
  1337   001FC8  2B96               	incf	(??_main+2)& (0+255),f,b
  1338   001FCA  EFE9  F00F         	goto	u5868
  1339   001FCE                     u5860:
  1340   001FCE  0100               	movlb	0	; () banked
  1341   001FD0  6B96               	clrf	(??_main+2)& (0+255),b
  1342   001FD2                     u5868:
  1343   001FD2  5196               	movf	(??_main+2)& (0+255),w,b
  1344   001FD4  1794               	andwf	??_main& (0+255),f,b
  1345   001FD6  0E00               	movlw	0
  1346   001FD8  1795               	andwf	(??_main+1)& (0+255),f,b
  1347   001FDA  5194               	movf	??_main& (0+255),w,b
  1348   001FDC  1195               	iorwf	(??_main+1)& (0+255),w,b
  1349   001FDE  B4D8               	btfsc	status,2,c
  1350   001FE0  EFF4  F00F         	goto	u5871
  1351   001FE4  EFF6  F00F         	goto	u5870
  1352   001FE8                     u5871:
  1353   001FE8  EFFC  F00F         	goto	l5327
  1354   001FEC                     u5870:
  1355   001FEC                     
  1356                           ; BSR set to: 0
  1357                           ;MazeRobot.X/main.c: 103:             ambientCal (&ambientRGBVal);
  1358   001FEC  0EAC               	movlw	low main@ambientRGBVal
  1359   001FEE  6E12               	movwf	ambientCal@v^0,c
  1360   001FF0  0E00               	movlw	high main@ambientRGBVal
  1361   001FF2  6E13               	movwf	(ambientCal@v+1)^0,c
  1362   001FF4  ECE6  F01F         	call	_ambientCal	;wreg free
  1363   001FF8                     l5327:
  1364                           
  1365                           ;MazeRobot.X/main.c: 106:         if (!PORTFbits.RF3 & PORTFbits.RF2){
  1366   001FF8  A68E               	btfss	142,3,c	;volatile
  1367   001FFA  EF01  F010         	goto	u5881
  1368   001FFE  EF04  F010         	goto	u5880
  1369   002002                     u5881:
  1370   002002  0E01               	movlw	1
  1371   002004  EF05  F010         	goto	u5890
  1372   002008                     u5880:
  1373   002008  0E00               	movlw	0
  1374   00200A                     u5890:
  1375   00200A  0100               	movlb	0	; () banked
  1376   00200C  6F94               	movwf	??_main& (0+255),b
  1377   00200E  6B95               	clrf	(??_main+1)& (0+255),b
  1378   002010  B48E               	btfsc	142,2,c	;volatile
  1379   002012  EF0D  F010         	goto	u5901
  1380   002016  EF11  F010         	goto	u5900
  1381   00201A                     u5901:
  1382   00201A  6B96               	clrf	(??_main+2)& (0+255),b
  1383   00201C  2B96               	incf	(??_main+2)& (0+255),f,b
  1384   00201E  EF13  F010         	goto	u5908
  1385   002022                     u5900:
  1386   002022  0100               	movlb	0	; () banked
  1387   002024  6B96               	clrf	(??_main+2)& (0+255),b
  1388   002026                     u5908:
  1389   002026  5196               	movf	(??_main+2)& (0+255),w,b
  1390   002028  1794               	andwf	??_main& (0+255),f,b
  1391   00202A  0E00               	movlw	0
  1392   00202C  1795               	andwf	(??_main+1)& (0+255),f,b
  1393   00202E  5194               	movf	??_main& (0+255),w,b
  1394   002030  1195               	iorwf	(??_main+1)& (0+255),w,b
  1395   002032  B4D8               	btfsc	status,2,c
  1396   002034  EF1E  F010         	goto	u5911
  1397   002038  EF20  F010         	goto	u5910
  1398   00203C                     u5911:
  1399   00203C  EF26  F010         	goto	l5331
  1400   002040                     u5910:
  1401   002040                     
  1402                           ; BSR set to: 0
  1403                           ;MazeRobot.X/main.c: 107:             whiteCal (&whiteRGBVal);
  1404   002040  0EB4               	movlw	low main@whiteRGBVal
  1405   002042  6E12               	movwf	whiteCal@v^0,c
  1406   002044  0E00               	movlw	high main@whiteRGBVal
  1407   002046  6E13               	movwf	(whiteCal@v+1)^0,c
  1408   002048  EC74  F01F         	call	_whiteCal	;wreg free
  1409   00204C                     l5331:
  1410                           
  1411                           ;MazeRobot.X/main.c: 110:         LATHbits.LATH3=!LATHbits.LATH3;
  1412   00204C  A680               	btfss	128,3,c	;volatile
  1413   00204E  EF2B  F010         	goto	u5921
  1414   002052  EF30  F010         	goto	u5920
  1415   002056                     u5921:
  1416   002056  0100               	movlb	0	; () banked
  1417   002058  6B94               	clrf	??_main& (0+255),b
  1418   00205A  2B94               	incf	??_main& (0+255),f,b
  1419   00205C  EF32  F010         	goto	u5938
  1420   002060                     u5920:
  1421   002060  0100               	movlb	0	; () banked
  1422   002062  6B94               	clrf	??_main& (0+255),b
  1423   002064                     u5938:
  1424   002064  4794               	rlncf	??_main& (0+255),f,b
  1425   002066  4794               	rlncf	??_main& (0+255),f,b
  1426   002068  4794               	rlncf	??_main& (0+255),f,b
  1427   00206A  5080               	movf	128,w,c	;volatile
  1428   00206C  1994               	xorwf	??_main& (0+255),w,b
  1429   00206E  0BF7               	andlw	-9
  1430   002070  1994               	xorwf	??_main& (0+255),w,b
  1431   002072  6E80               	movwf	128,c	;volatile
  1432   002074                     
  1433                           ; BSR set to: 0
  1434                           ;MazeRobot.X/main.c: 112:         whiteC = whiteRGBVal.C;
  1435   002074  C0BA  F005         	movff	main@whiteRGBVal+6,___xxtofl@val
  1436   002078  C0BB  F006         	movff	main@whiteRGBVal+7,___xxtofl@val+1
  1437   00207C  6A07               	clrf	(___xxtofl@val+2)^0,c
  1438   00207E  6A08               	clrf	(___xxtofl@val+3)^0,c
  1439   002080  0E00               	movlw	0
  1440   002082  EC24  F018         	call	___xxtofl
  1441   002086  C005  F097         	movff	?___xxtofl,main@whiteC
  1442   00208A  C006  F098         	movff	?___xxtofl+1,main@whiteC+1
  1443   00208E  C007  F099         	movff	?___xxtofl+2,main@whiteC+2
  1444   002092  C008  F09A         	movff	?___xxtofl+3,main@whiteC+3
  1445   002096                     
  1446                           ;MazeRobot.X/main.c: 113:         clearRef = RGBVal.C/whiteC;
  1447   002096  C0A9  F005         	movff	main@RGBVal+6,___xxtofl@val
  1448   00209A  C0AA  F006         	movff	main@RGBVal+7,___xxtofl@val+1
  1449   00209E  6A07               	clrf	(___xxtofl@val+2)^0,c
  1450   0020A0  6A08               	clrf	(___xxtofl@val+3)^0,c
  1451   0020A2  0E00               	movlw	0
  1452   0020A4  EC24  F018         	call	___xxtofl
  1453   0020A8  C005  F036         	movff	?___xxtofl,___fldiv@b
  1454   0020AC  C006  F037         	movff	?___xxtofl+1,___fldiv@b+1
  1455   0020B0  C007  F038         	movff	?___xxtofl+2,___fldiv@b+2
  1456   0020B4  C008  F039         	movff	?___xxtofl+3,___fldiv@b+3
  1457   0020B8  C097  F03A         	movff	main@whiteC,___fldiv@a
  1458   0020BC  C098  F03B         	movff	main@whiteC+1,___fldiv@a+1
  1459   0020C0  C099  F03C         	movff	main@whiteC+2,___fldiv@a+2
  1460   0020C4  C09A  F03D         	movff	main@whiteC+3,___fldiv@a+3
  1461   0020C8  ECAC  F013         	call	___fldiv	;wreg free
  1462   0020CC  C036  F09B         	movff	?___fldiv,main@clearRef
  1463   0020D0  C037  F09C         	movff	?___fldiv+1,main@clearRef+1
  1464   0020D4  C038  F09D         	movff	?___fldiv+2,main@clearRef+2
  1465   0020D8  C039  F09E         	movff	?___fldiv+3,main@clearRef+3
  1466   0020DC                     
  1467                           ;MazeRobot.X/main.c: 115:         if ((clearRef > 0.12) && carGo){
  1468   0020DC  0E8F               	movlw	143
  1469   0020DE  6E1D               	movwf	___flge@ff1^0,c
  1470   0020E0  0EC2               	movlw	194
  1471   0020E2  6E1E               	movwf	(___flge@ff1+1)^0,c
  1472   0020E4  0EF5               	movlw	245
  1473   0020E6  6E1F               	movwf	(___flge@ff1+2)^0,c
  1474   0020E8  0E3D               	movlw	61
  1475   0020EA  6E20               	movwf	(___flge@ff1+3)^0,c
  1476   0020EC  C09B  F021         	movff	main@clearRef,___flge@ff2
  1477   0020F0  C09C  F022         	movff	main@clearRef+1,___flge@ff2+1
  1478   0020F4  C09D  F023         	movff	main@clearRef+2,___flge@ff2+2
  1479   0020F8  C09E  F024         	movff	main@clearRef+3,___flge@ff2+3
  1480   0020FC  ECF2  F01E         	call	___flge	;wreg free
  1481   002100  B0D8               	btfsc	status,0,c
  1482   002102  EF85  F010         	goto	u5941
  1483   002106  EF87  F010         	goto	u5940
  1484   00210A                     u5941:
  1485   00210A  EF32  F011         	goto	l5371
  1486   00210E                     u5940:
  1487   00210E  0100               	movlb	0	; () banked
  1488   002110  51AB               	movf	main@carGo& (0+255),w,b
  1489   002112  B4D8               	btfsc	status,2,c
  1490   002114  EF8E  F010         	goto	u5951
  1491   002118  EF90  F010         	goto	u5950
  1492   00211C                     u5951:
  1493   00211C  EF32  F011         	goto	l5371
  1494   002120                     u5950:
  1495   002120                     
  1496                           ; BSR set to: 0
  1497                           ;MazeRobot.X/main.c: 117:             colorNum = colorDetect(clearRef,&ambientRGBVal,&wh
      +                          iteRGBVal,&motorLeft,&motorRight);
  1498   002120  C09B  F060         	movff	main@clearRef,colorDetect@clearRef
  1499   002124  C09C  F061         	movff	main@clearRef+1,colorDetect@clearRef+1
  1500   002128  C09D  F062         	movff	main@clearRef+2,colorDetect@clearRef+2
  1501   00212C  C09E  F063         	movff	main@clearRef+3,colorDetect@clearRef+3
  1502   002130  0EAC               	movlw	low main@ambientRGBVal
  1503   002132  6F64               	movwf	colorDetect@ambientRGBVal& (0+255),b
  1504   002134  0E00               	movlw	high main@ambientRGBVal
  1505   002136  6F65               	movwf	(colorDetect@ambientRGBVal+1)& (0+255),b
  1506   002138  0EB4               	movlw	low main@whiteRGBVal
  1507   00213A  6F66               	movwf	colorDetect@whiteRGBVal& (0+255),b
  1508   00213C  0E00               	movlw	high main@whiteRGBVal
  1509   00213E  6F67               	movwf	(colorDetect@whiteRGBVal+1)& (0+255),b
  1510   002140  0EC7               	movlw	low main@motorLeft
  1511   002142  6F68               	movwf	colorDetect@mL& (0+255),b
  1512   002144  0E00               	movlw	high main@motorLeft
  1513   002146  6F69               	movwf	(colorDetect@mL+1)& (0+255),b
  1514   002148  0EBE               	movlw	low main@motorRight
  1515   00214A  6F6A               	movwf	colorDetect@mR& (0+255),b
  1516   00214C  0E00               	movlw	high main@motorRight
  1517   00214E  6F6B               	movwf	(colorDetect@mR+1)& (0+255),b
  1518   002150  EC14  F007         	call	_colorDetect	;wreg free
  1519   002154  C060  F0A1         	movff	?_colorDetect,main@colorNum
  1520   002158  C061  F0A2         	movff	?_colorDetect+1,main@colorNum+1
  1521   00215C                     
  1522                           ;MazeRobot.X/main.c: 119:             if (colorNum < 9){
  1523   00215C  0100               	movlb	0	; () banked
  1524   00215E  51A2               	movf	(main@colorNum+1)& (0+255),w,b
  1525   002160  E107               	bnz	u5961
  1526   002162  0E09               	movlw	9
  1527   002164  5DA1               	subwf	main@colorNum& (0+255),w,b
  1528   002166  B0D8               	btfsc	status,0,c
  1529   002168  EFB8  F010         	goto	u5961
  1530   00216C  EFBA  F010         	goto	u5960
  1531   002170                     u5961:
  1532   002170  EF32  F011         	goto	l5371
  1533   002174                     u5960:
  1534   002174                     
  1535                           ; BSR set to: 0
  1536                           ;MazeRobot.X/main.c: 121:             turn_history[index] = 0;
  1537   002174  90D8               	bcf	status,0,c
  1538   002176  35BC               	rlcf	main@index& (0+255),w,b
  1539   002178  6ED9               	movwf	fsr2l,c
  1540   00217A  35BD               	rlcf	(main@index+1)& (0+255),w,b
  1541   00217C  6EDA               	movwf	fsr2h,c
  1542   00217E  0E00               	movlw	low main@turn_history
  1543   002180  26D9               	addwf	fsr2l,f,c
  1544   002182  0E02               	movlw	high main@turn_history
  1545   002184  22DA               	addwfc	fsr2h,f,c
  1546   002186  0E00               	movlw	0
  1547   002188  6EDE               	movwf	postinc2,c
  1548   00218A  0E00               	movlw	0
  1549   00218C  6EDD               	movwf	postdec2,c
  1550                           
  1551                           ;MazeRobot.X/main.c: 122:             counter_history[index] = forwardCount;
  1552   00218E  90D8               	bcf	status,0,c
  1553   002190  35BC               	rlcf	main@index& (0+255),w,b
  1554   002192  6ED9               	movwf	fsr2l,c
  1555   002194  35BD               	rlcf	(main@index+1)& (0+255),w,b
  1556   002196  6EDA               	movwf	fsr2h,c
  1557   002198  0E00               	movlw	low main@counter_history
  1558   00219A  26D9               	addwf	fsr2l,f,c
  1559   00219C  0E03               	movlw	high main@counter_history
  1560   00219E  22DA               	addwfc	fsr2h,f,c
  1561   0021A0  C09F  FFDE         	movff	main@forwardCount,postinc2
  1562   0021A4  C0A0  FFDD         	movff	main@forwardCount+1,postdec2
  1563   0021A8                     
  1564                           ; BSR set to: 0
  1565                           ;MazeRobot.X/main.c: 124:             index +=1;
  1566   0021A8  4BBC               	infsnz	main@index& (0+255),f,b
  1567   0021AA  2BBD               	incf	(main@index+1)& (0+255),f,b
  1568   0021AC                     
  1569                           ; BSR set to: 0
  1570                           ;MazeRobot.X/main.c: 125:             forwardCount = 0;
  1571   0021AC  0E00               	movlw	0
  1572   0021AE  6FA0               	movwf	(main@forwardCount+1)& (0+255),b
  1573   0021B0  0E00               	movlw	0
  1574   0021B2  6F9F               	movwf	main@forwardCount& (0+255),b
  1575   0021B4                     
  1576                           ; BSR set to: 0
  1577                           ;MazeRobot.X/main.c: 127:             if (colorNum == 8){
  1578   0021B4  0E08               	movlw	8
  1579   0021B6  19A1               	xorwf	main@colorNum& (0+255),w,b
  1580   0021B8  11A2               	iorwf	(main@colorNum+1)& (0+255),w,b
  1581   0021BA  A4D8               	btfss	status,2,c
  1582   0021BC  EFE2  F010         	goto	u5971
  1583   0021C0  EFE4  F010         	goto	u5970
  1584   0021C4                     u5971:
  1585   0021C4  EF0A  F011         	goto	l5363
  1586   0021C8                     u5970:
  1587   0021C8                     
  1588                           ; BSR set to: 0
  1589                           ;MazeRobot.X/main.c: 128:                 turn_180(&motorLeft,&motorRight);
  1590   0021C8  0EC7               	movlw	low main@motorLeft
  1591   0021CA  6E1E               	movwf	turn_180@mL^0,c
  1592   0021CC  0E00               	movlw	high main@motorLeft
  1593   0021CE  6E1F               	movwf	(turn_180@mL+1)^0,c
  1594   0021D0  0EBE               	movlw	low main@motorRight
  1595   0021D2  6E20               	movwf	turn_180@mR^0,c
  1596   0021D4  0E00               	movlw	high main@motorRight
  1597   0021D6  6E21               	movwf	(turn_180@mR+1)^0,c
  1598   0021D8  ECD9  F01B         	call	_turn_180	;wreg free
  1599   0021DC                     
  1600                           ;MazeRobot.X/main.c: 129:                 LATDbits.LATD7 = 1 , LATHbits.LATH3 = 1;
  1601   0021DC  8E7C               	bsf	124,7,c	;volatile
  1602   0021DE  8680               	bsf	128,3,c	;volatile
  1603   0021E0                     
  1604                           ;MazeRobot.X/main.c: 130:                 return_home_turns(&turn_history,&counter_histo
      +                          ry, (index), &motorLeft, &motorRight);
  1605   0021E0  0E00               	movlw	low main@turn_history
  1606   0021E2  0100               	movlb	0	; () banked
  1607   0021E4  6F7F               	movwf	return_home_turns@turn_history& (0+255),b
  1608   0021E6  0E02               	movlw	high main@turn_history
  1609   0021E8  6F80               	movwf	(return_home_turns@turn_history+1)& (0+255),b
  1610   0021EA  0E00               	movlw	low main@counter_history
  1611   0021EC  6F81               	movwf	return_home_turns@counter_history& (0+255),b
  1612   0021EE  0E03               	movlw	high main@counter_history
  1613   0021F0  6F82               	movwf	(return_home_turns@counter_history+1)& (0+255),b
  1614   0021F2  C0BC  F083         	movff	main@index,return_home_turns@index
  1615   0021F6  C0BD  F084         	movff	main@index+1,return_home_turns@index+1
  1616   0021FA  0EC7               	movlw	low main@motorLeft
  1617   0021FC  6F85               	movwf	return_home_turns@mL& (0+255),b
  1618   0021FE  0E00               	movlw	high main@motorLeft
  1619   002200  6F86               	movwf	(return_home_turns@mL+1)& (0+255),b
  1620   002202  0EBE               	movlw	low main@motorRight
  1621   002204  6F87               	movwf	return_home_turns@mR& (0+255),b
  1622   002206  0E00               	movlw	high main@motorRight
  1623   002208  6F88               	movwf	(return_home_turns@mR+1)& (0+255),b
  1624   00220A  EC79  F015         	call	_return_home_turns	;wreg free
  1625   00220E                     
  1626                           ;MazeRobot.X/main.c: 131:                 carGo = 0;
  1627   00220E  0E00               	movlw	0
  1628   002210  0100               	movlb	0	; () banked
  1629   002212  6FAB               	movwf	main@carGo& (0+255),b
  1630   002214                     l5363:
  1631                           
  1632                           ; BSR set to: 0
  1633                           ;MazeRobot.X/main.c: 133:             turn_history[index] = colorNum;
  1634   002214  90D8               	bcf	status,0,c
  1635   002216  35BC               	rlcf	main@index& (0+255),w,b
  1636   002218  6ED9               	movwf	fsr2l,c
  1637   00221A  35BD               	rlcf	(main@index+1)& (0+255),w,b
  1638   00221C  6EDA               	movwf	fsr2h,c
  1639   00221E  0E00               	movlw	low main@turn_history
  1640   002220  26D9               	addwf	fsr2l,f,c
  1641   002222  0E02               	movlw	high main@turn_history
  1642   002224  22DA               	addwfc	fsr2h,f,c
  1643   002226  C0A1  FFDE         	movff	main@colorNum,postinc2
  1644   00222A  C0A2  FFDD         	movff	main@colorNum+1,postdec2
  1645   00222E                     
  1646                           ; BSR set to: 0
  1647                           ;MazeRobot.X/main.c: 134:             counter_history[index] = 1;
  1648   00222E  90D8               	bcf	status,0,c
  1649   002230  35BC               	rlcf	main@index& (0+255),w,b
  1650   002232  6ED9               	movwf	fsr2l,c
  1651   002234  35BD               	rlcf	(main@index+1)& (0+255),w,b
  1652   002236  6EDA               	movwf	fsr2h,c
  1653   002238  0E00               	movlw	low main@counter_history
  1654   00223A  26D9               	addwf	fsr2l,f,c
  1655   00223C  0E03               	movlw	high main@counter_history
  1656   00223E  22DA               	addwfc	fsr2h,f,c
  1657   002240  0E01               	movlw	1
  1658   002242  6EDE               	movwf	postinc2,c
  1659   002244  0E00               	movlw	0
  1660   002246  6EDD               	movwf	postdec2,c
  1661   002248                     
  1662                           ; BSR set to: 0
  1663                           ;MazeRobot.X/main.c: 135:             index += 1;
  1664   002248  4BBC               	infsnz	main@index& (0+255),f,b
  1665   00224A  2BBD               	incf	(main@index+1)& (0+255),f,b
  1666   00224C                     
  1667                           ; BSR set to: 0
  1668                           ;MazeRobot.X/main.c: 136:             _delay((unsigned long)((500)*(64000000/4000.0)));
  1669   00224C  0E29               	movlw	41
  1670   00224E  0100               	movlb	0	; () banked
  1671   002250  6F95               	movwf	(??_main+1)& (0+255),b
  1672   002252  0E96               	movlw	150
  1673   002254  6F94               	movwf	??_main& (0+255),b
  1674   002256  0E7F               	movlw	127
  1675   002258                     u6037:
  1676   002258  2EE8               	decfsz	wreg,f,c
  1677   00225A  D7FE               	bra	u6037
  1678   00225C  2F94               	decfsz	??_main& (0+255),f,b
  1679   00225E  D7FC               	bra	u6037
  1680   002260  2F95               	decfsz	(??_main+1)& (0+255),f,b
  1681   002262  D7FA               	bra	u6037
  1682   002264                     l5371:
  1683                           
  1684                           ;MazeRobot.X/main.c: 140:         if (carGo){
  1685   002264  0100               	movlb	0	; () banked
  1686   002266  51AB               	movf	main@carGo& (0+255),w,b
  1687   002268  B4D8               	btfsc	status,2,c
  1688   00226A  EF39  F011         	goto	u5981
  1689   00226E  EF3B  F011         	goto	u5980
  1690   002272                     u5981:
  1691   002272  EF5B  F011         	goto	l5379
  1692   002276                     u5980:
  1693   002276                     
  1694                           ; BSR set to: 0
  1695                           ;MazeRobot.X/main.c: 141:             forward(&motorLeft,&motorRight);
  1696   002276  0EC7               	movlw	low main@motorLeft
  1697   002278  6E18               	movwf	forward@mL^0,c
  1698   00227A  0E00               	movlw	high main@motorLeft
  1699   00227C  6E19               	movwf	(forward@mL+1)^0,c
  1700   00227E  0EBE               	movlw	low main@motorRight
  1701   002280  6E1A               	movwf	forward@mR^0,c
  1702   002282  0E00               	movlw	high main@motorRight
  1703   002284  6E1B               	movwf	(forward@mR+1)^0,c
  1704   002286  EC58  F020         	call	_forward	;wreg free
  1705   00228A                     
  1706                           ;MazeRobot.X/main.c: 142:             LATDbits.LATD4 = !LATDbits.LATD4;
  1707   00228A  A87C               	btfss	124,4,c	;volatile
  1708   00228C  EF4A  F011         	goto	u5991
  1709   002290  EF4F  F011         	goto	u5990
  1710   002294                     u5991:
  1711   002294  0100               	movlb	0	; () banked
  1712   002296  6B94               	clrf	??_main& (0+255),b
  1713   002298  2B94               	incf	??_main& (0+255),f,b
  1714   00229A  EF51  F011         	goto	u6008
  1715   00229E                     u5990:
  1716   00229E  0100               	movlb	0	; () banked
  1717   0022A0  6B94               	clrf	??_main& (0+255),b
  1718   0022A2                     u6008:
  1719   0022A2  3B94               	swapf	??_main& (0+255),f,b
  1720   0022A4  507C               	movf	124,w,c	;volatile
  1721   0022A6  1994               	xorwf	??_main& (0+255),w,b
  1722   0022A8  0BEF               	andlw	-17
  1723   0022AA  1994               	xorwf	??_main& (0+255),w,b
  1724   0022AC  6E7C               	movwf	124,c	;volatile
  1725   0022AE                     
  1726                           ; BSR set to: 0
  1727                           ;MazeRobot.X/main.c: 143:             forwardCount +=1;
  1728   0022AE  4B9F               	infsnz	main@forwardCount& (0+255),f,b
  1729   0022B0  2BA0               	incf	(main@forwardCount+1)& (0+255),f,b
  1730                           
  1731                           ;MazeRobot.X/main.c: 144:         }
  1732   0022B2  EF65  F011         	goto	l5381
  1733   0022B6                     l5379:
  1734                           
  1735                           ; BSR set to: 0
  1736   0022B6  0EC7               	movlw	low main@motorLeft
  1737   0022B8  6E18               	movwf	stop@mL^0,c
  1738   0022BA  0E00               	movlw	high main@motorLeft
  1739   0022BC  6E19               	movwf	(stop@mL+1)^0,c
  1740   0022BE  0EBE               	movlw	low main@motorRight
  1741   0022C0  6E1A               	movwf	stop@mR^0,c
  1742   0022C2  0E00               	movlw	high main@motorRight
  1743   0022C4  6E1B               	movwf	(stop@mR+1)^0,c
  1744   0022C6  ECFC  F021         	call	_stop	;wreg free
  1745   0022CA                     l5381:
  1746                           
  1747                           ;MazeRobot.X/main.c: 148:         _delay((unsigned long)((25)*(64000000/4000.0)));
  1748   0022CA  0E03               	movlw	3
  1749   0022CC  0100               	movlb	0	; () banked
  1750   0022CE  6F95               	movwf	(??_main+1)& (0+255),b
  1751   0022D0  0E08               	movlw	8
  1752   0022D2  6F94               	movwf	??_main& (0+255),b
  1753   0022D4  0E77               	movlw	119
  1754   0022D6                     u6047:
  1755   0022D6  2EE8               	decfsz	wreg,f,c
  1756   0022D8  D7FE               	bra	u6047
  1757   0022DA  2F94               	decfsz	??_main& (0+255),f,b
  1758   0022DC  D7FC               	bra	u6047
  1759   0022DE  2F95               	decfsz	(??_main+1)& (0+255),f,b
  1760   0022E0  D7FA               	bra	u6047
  1761   0022E2                     
  1762                           ;MazeRobot.X/main.c: 150:         if (forwardCount > 4000){return_home_turns(&turn_histo
      +                          ry,&counter_history, (index), &motorLeft, &motorRight);}
  1763   0022E2  0EA1               	movlw	161
  1764   0022E4  0100               	movlb	0	; () banked
  1765   0022E6  5D9F               	subwf	main@forwardCount& (0+255),w,b
  1766   0022E8  0E0F               	movlw	15
  1767   0022EA  59A0               	subwfb	(main@forwardCount+1)& (0+255),w,b
  1768   0022EC  A0D8               	btfss	status,0,c
  1769   0022EE  EF7B  F011         	goto	u6011
  1770   0022F2  EF7D  F011         	goto	u6010
  1771   0022F6                     u6011:
  1772   0022F6  EFA2  F00F         	goto	l5307
  1773   0022FA                     u6010:
  1774   0022FA                     
  1775                           ; BSR set to: 0
  1776   0022FA  0E00               	movlw	low main@turn_history
  1777   0022FC  6F7F               	movwf	return_home_turns@turn_history& (0+255),b
  1778   0022FE  0E02               	movlw	high main@turn_history
  1779   002300  6F80               	movwf	(return_home_turns@turn_history+1)& (0+255),b
  1780   002302  0E00               	movlw	low main@counter_history
  1781   002304  6F81               	movwf	return_home_turns@counter_history& (0+255),b
  1782   002306  0E03               	movlw	high main@counter_history
  1783   002308  6F82               	movwf	(return_home_turns@counter_history+1)& (0+255),b
  1784   00230A  C0BC  F083         	movff	main@index,return_home_turns@index
  1785   00230E  C0BD  F084         	movff	main@index+1,return_home_turns@index+1
  1786   002312  0EC7               	movlw	low main@motorLeft
  1787   002314  6F85               	movwf	return_home_turns@mL& (0+255),b
  1788   002316  0E00               	movlw	high main@motorLeft
  1789   002318  6F86               	movwf	(return_home_turns@mL+1)& (0+255),b
  1790   00231A  0EBE               	movlw	low main@motorRight
  1791   00231C  6F87               	movwf	return_home_turns@mR& (0+255),b
  1792   00231E  0E00               	movlw	high main@motorRight
  1793   002320  6F88               	movwf	(return_home_turns@mR+1)& (0+255),b
  1794   002322  EC79  F015         	call	_return_home_turns	;wreg free
  1795   002326  EFA2  F00F         	goto	l5307
  1796   00232A  EF3B  F000         	goto	start
  1797   00232E                     __end_of_main:
  1798                           	callstack 0
  1799                           
  1800 ;; *************** function _whiteCal *****************
  1801 ;; Defined at:
  1802 ;;		line 115 in file "MazeRobot.X/color.c"
  1803 ;; Parameters:    Size  Location     Type
  1804 ;;  v               2   17[COMRAM] PTR struct RGB
  1805 ;;		 -> main@whiteRGBVal(8), 
  1806 ;; Auto vars:     Size  Location     Type
  1807 ;;  i               2   21[COMRAM] int 
  1808 ;; Return value:  Size  Location     Type
  1809 ;;                  1    wreg      void 
  1810 ;; Registers used:
  1811 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1812 ;; Tracked objects:
  1813 ;;		On entry : 0/0
  1814 ;;		On exit  : 0/0
  1815 ;;		Unchanged: 0/0
  1816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1817 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1818 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1819 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1820 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1821 ;;Total ram usage:        6 bytes
  1822 ;; Hardware stack levels used: 1
  1823 ;; Hardware stack levels required when called: 6
  1824 ;; This function calls:
  1825 ;;		_getColor
  1826 ;; This function is called by:
  1827 ;;		_main
  1828 ;; This function uses a non-reentrant model
  1829 ;;
  1830                           
  1831                           	psect	text1
  1832   003EE8                     __ptext1:
  1833                           	callstack 0
  1834   003EE8                     _whiteCal:
  1835                           	callstack 24
  1836   003EE8                     
  1837                           ;MazeRobot.X/color.c: 117:     for(int i = 0;i<20;i++){
  1838   003EE8  0E00               	movlw	0
  1839   003EEA  6E17               	movwf	(whiteCal@i+1)^0,c
  1840   003EEC  0E00               	movlw	0
  1841   003EEE  6E16               	movwf	whiteCal@i^0,c
  1842   003EF0                     l4239:
  1843                           
  1844                           ;MazeRobot.X/color.c: 118:             LATDbits.LATD7 = !LATDbits.LATD7;
  1845   003EF0  AE7C               	btfss	124,7,c	;volatile
  1846   003EF2  EF7D  F01F         	goto	u4321
  1847   003EF6  EF81  F01F         	goto	u4320
  1848   003EFA                     u4321:
  1849   003EFA  6A14               	clrf	??_whiteCal^0,c
  1850   003EFC  2A14               	incf	??_whiteCal^0,f,c
  1851   003EFE  EF82  F01F         	goto	u4338
  1852   003F02                     u4320:
  1853   003F02  6A14               	clrf	??_whiteCal^0,c
  1854   003F04                     u4338:
  1855   003F04  3214               	rrcf	??_whiteCal^0,f,c
  1856   003F06  3214               	rrcf	??_whiteCal^0,f,c
  1857   003F08  507C               	movf	124,w,c	;volatile
  1858   003F0A  1814               	xorwf	??_whiteCal^0,w,c
  1859   003F0C  0B7F               	andlw	-129
  1860   003F0E  1814               	xorwf	??_whiteCal^0,w,c
  1861   003F10  6E7C               	movwf	124,c	;volatile
  1862   003F12                     
  1863                           ;MazeRobot.X/color.c: 119:             _delay((unsigned long)((100)*(64000000/4000.0)));
  1864   003F12  0E09               	movlw	9
  1865   003F14  6E15               	movwf	(??_whiteCal+1)^0,c
  1866   003F16  0E1E               	movlw	30
  1867   003F18  6E14               	movwf	??_whiteCal^0,c
  1868   003F1A  0EE4               	movlw	228
  1869   003F1C                     u6057:
  1870   003F1C  2EE8               	decfsz	wreg,f,c
  1871   003F1E  D7FE               	bra	u6057
  1872   003F20  2E14               	decfsz	??_whiteCal^0,f,c
  1873   003F22  D7FC               	bra	u6057
  1874   003F24  2E15               	decfsz	(??_whiteCal+1)^0,f,c
  1875   003F26  D7FA               	bra	u6057
  1876   003F28  D000               	nop2	
  1877                           
  1878                           ;MazeRobot.X/color.c: 120:             }
  1879   003F2A  4A16               	infsnz	whiteCal@i^0,f,c
  1880   003F2C  2A17               	incf	(whiteCal@i+1)^0,f,c
  1881   003F2E  BE17               	btfsc	(whiteCal@i+1)^0,7,c
  1882   003F30  EFA3  F01F         	goto	u4341
  1883   003F34  5017               	movf	(whiteCal@i+1)^0,w,c
  1884   003F36  E109               	bnz	u4340
  1885   003F38  0E14               	movlw	20
  1886   003F3A  5C16               	subwf	whiteCal@i^0,w,c
  1887   003F3C  A0D8               	btfss	status,0,c
  1888   003F3E  EFA3  F01F         	goto	u4341
  1889   003F42  EFA5  F01F         	goto	u4340
  1890   003F46                     u4341:
  1891   003F46  EF78  F01F         	goto	l4239
  1892   003F4A                     u4340:
  1893   003F4A                     
  1894                           ;MazeRobot.X/color.c: 121:             LATDbits.LATD7 = !LATDbits.LATD7;
  1895   003F4A  AE7C               	btfss	124,7,c	;volatile
  1896   003F4C  EFAA  F01F         	goto	u4351
  1897   003F50  EFAE  F01F         	goto	u4350
  1898   003F54                     u4351:
  1899   003F54  6A14               	clrf	??_whiteCal^0,c
  1900   003F56  2A14               	incf	??_whiteCal^0,f,c
  1901   003F58  EFAF  F01F         	goto	u4368
  1902   003F5C                     u4350:
  1903   003F5C  6A14               	clrf	??_whiteCal^0,c
  1904   003F5E                     u4368:
  1905   003F5E  3214               	rrcf	??_whiteCal^0,f,c
  1906   003F60  3214               	rrcf	??_whiteCal^0,f,c
  1907   003F62  507C               	movf	124,w,c	;volatile
  1908   003F64  1814               	xorwf	??_whiteCal^0,w,c
  1909   003F66  0B7F               	andlw	-129
  1910   003F68  1814               	xorwf	??_whiteCal^0,w,c
  1911   003F6A  6E7C               	movwf	124,c	;volatile
  1912   003F6C                     
  1913                           ;MazeRobot.X/color.c: 122:             _delay((unsigned long)((500)*(64000000/4000.0)));
  1914   003F6C  0E29               	movlw	41
  1915   003F6E  6E15               	movwf	(??_whiteCal+1)^0,c
  1916   003F70  0E96               	movlw	150
  1917   003F72  6E14               	movwf	??_whiteCal^0,c
  1918   003F74  0E7F               	movlw	127
  1919   003F76                     u6067:
  1920   003F76  2EE8               	decfsz	wreg,f,c
  1921   003F78  D7FE               	bra	u6067
  1922   003F7A  2E14               	decfsz	??_whiteCal^0,f,c
  1923   003F7C  D7FC               	bra	u6067
  1924   003F7E  2E15               	decfsz	(??_whiteCal+1)^0,f,c
  1925   003F80  D7FA               	bra	u6067
  1926   003F82  F000               	nop	
  1927   003F84                     
  1928                           ;MazeRobot.X/color.c: 123:             getColor(v);
  1929   003F84  C012  F010         	movff	whiteCal@v,getColor@v
  1930   003F88  C013  F011         	movff	whiteCal@v+1,getColor@v+1
  1931   003F8C  ECA8  F023         	call	_getColor	;wreg free
  1932   003F90                     
  1933                           ;MazeRobot.X/color.c: 124:             _delay((unsigned long)((500)*(64000000/4000.0)));
  1934   003F90  0E29               	movlw	41
  1935   003F92  6E15               	movwf	(??_whiteCal+1)^0,c
  1936   003F94  0E96               	movlw	150
  1937   003F96  6E14               	movwf	??_whiteCal^0,c
  1938   003F98  0E7F               	movlw	127
  1939   003F9A                     u6077:
  1940   003F9A  2EE8               	decfsz	wreg,f,c
  1941   003F9C  D7FE               	bra	u6077
  1942   003F9E  2E14               	decfsz	??_whiteCal^0,f,c
  1943   003FA0  D7FC               	bra	u6077
  1944   003FA2  2E15               	decfsz	(??_whiteCal+1)^0,f,c
  1945   003FA4  D7FA               	bra	u6077
  1946   003FA6  F000               	nop	
  1947   003FA8                     
  1948                           ;MazeRobot.X/color.c: 125:             LATDbits.LATD7 = !LATDbits.LATD7;
  1949   003FA8  AE7C               	btfss	124,7,c	;volatile
  1950   003FAA  EFD9  F01F         	goto	u4371
  1951   003FAE  EFDD  F01F         	goto	u4370
  1952   003FB2                     u4371:
  1953   003FB2  6A14               	clrf	??_whiteCal^0,c
  1954   003FB4  2A14               	incf	??_whiteCal^0,f,c
  1955   003FB6  EFDE  F01F         	goto	u4388
  1956   003FBA                     u4370:
  1957   003FBA  6A14               	clrf	??_whiteCal^0,c
  1958   003FBC                     u4388:
  1959   003FBC  3214               	rrcf	??_whiteCal^0,f,c
  1960   003FBE  3214               	rrcf	??_whiteCal^0,f,c
  1961   003FC0  507C               	movf	124,w,c	;volatile
  1962   003FC2  1814               	xorwf	??_whiteCal^0,w,c
  1963   003FC4  0B7F               	andlw	-129
  1964   003FC6  1814               	xorwf	??_whiteCal^0,w,c
  1965   003FC8  6E7C               	movwf	124,c	;volatile
  1966   003FCA  0012               	return		;funcret
  1967   003FCC                     __end_of_whiteCal:
  1968                           	callstack 0
  1969                           
  1970 ;; *************** function _return_home_turns *****************
  1971 ;; Defined at:
  1972 ;;		line 223 in file "MazeRobot.X/color.c"
  1973 ;; Parameters:    Size  Location     Type
  1974 ;;  turn_history    2   31[BANK0 ] PTR unsigned int 
  1975 ;;		 -> main@turn_history(200), 
  1976 ;;  counter_hist    2   33[BANK0 ] PTR unsigned int 
  1977 ;;		 -> main@counter_history(200), 
  1978 ;;  index           2   35[BANK0 ] unsigned int 
  1979 ;;  mL              2   37[BANK0 ] PTR struct DC_motor
  1980 ;;		 -> main@motorLeft(9), 
  1981 ;;  mR              2   39[BANK0 ] PTR struct DC_motor
  1982 ;;		 -> main@motorRight(9), 
  1983 ;; Auto vars:     Size  Location     Type
  1984 ;;  i               2  150[BANK1 ] int 
  1985 ;;  string1       150    0[BANK1 ] unsigned char [150]
  1986 ;;  k               2  152[BANK1 ] int 
  1987 ;; Return value:  Size  Location     Type
  1988 ;;                  1    wreg      void 
  1989 ;; Registers used:
  1990 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1991 ;; Tracked objects:
  1992 ;;		On entry : 0/0
  1993 ;;		On exit  : 0/0
  1994 ;;		Unchanged: 0/0
  1995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1996 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1997 ;;      Locals:         0       0     154       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1998 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1999 ;;      Totals:         0      14     154       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2000 ;;Total ram usage:      168 bytes
  2001 ;; Hardware stack levels used: 1
  2002 ;; Hardware stack levels required when called: 10
  2003 ;; This function calls:
  2004 ;;		_TxBufferedString
  2005 ;;		_forward
  2006 ;;		_sendTxBuf
  2007 ;;		_sprintf
  2008 ;;		_stop
  2009 ;;		_turnLeft_135
  2010 ;;		_turnLeft_90
  2011 ;;		_turnRight_135
  2012 ;;		_turnRight_90
  2013 ;;		_turn_180
  2014 ;; This function is called by:
  2015 ;;		_main
  2016 ;; This function uses a non-reentrant model
  2017 ;;
  2018                           
  2019                           	psect	text2
  2020   002AF2                     __ptext2:
  2021                           	callstack 0
  2022   002AF2                     _return_home_turns:
  2023                           	callstack 20
  2024   002AF2                     
  2025                           ;MazeRobot.X/color.c: 223: void return_home_turns(unsigned int *turn_history, unsigned i
      +                          nt *counter_history, unsigned int index, DC_motor *mL, DC_motor *mR);MazeRobot.X/color.c
      +                          : 224: {;MazeRobot.X/color.c: 227:     for (int k = (index-2); k >= 0; k--){
  2026   002AF2  0EFE               	movlw	254
  2027   002AF4  0100               	movlb	0	; () banked
  2028   002AF6  2583               	addwf	return_home_turns@index& (0+255),w,b
  2029   002AF8  0101               	movlb	1	; () banked
  2030   002AFA  6F98               	movwf	return_home_turns@k& (0+255),b
  2031   002AFC  0EFF               	movlw	255
  2032   002AFE  0100               	movlb	0	; () banked
  2033   002B00  2184               	addwfc	(return_home_turns@index+1)& (0+255),w,b
  2034   002B02  0101               	movlb	1	; () banked
  2035   002B04  6F99               	movwf	(return_home_turns@k+1)& (0+255),b
  2036   002B06  BF99               	btfsc	(return_home_turns@k+1)& (0+255),7,b
  2037   002B08  EF8A  F015         	goto	u5770
  2038   002B0C  EF88  F015         	goto	u5771
  2039   002B10                     u5771:
  2040   002B10  EF8C  F015         	goto	l5177
  2041   002B14                     u5770:
  2042   002B14  EFE4  F016         	goto	l135
  2043   002B18                     l5177:
  2044                           
  2045                           ; BSR set to: 1
  2046                           ;MazeRobot.X/color.c: 228:             char string1[150];;MazeRobot.X/color.c: 229:     
      +                                  _delay((unsigned long)((2)*(64000000/4000.0)));
  2047   002B18  0E2A               	movlw	42
  2048   002B1A  0100               	movlb	0	; () banked
  2049   002B1C  6F89               	movwf	??_return_home_turns& (0+255),b
  2050   002B1E  0E8D               	movlw	141
  2051   002B20                     u6087:
  2052   002B20  2EE8               	decfsz	wreg,f,c
  2053   002B22  D7FE               	bra	u6087
  2054   002B24  2F89               	decfsz	??_return_home_turns& (0+255),f,b
  2055   002B26  D7FC               	bra	u6087
  2056   002B28  D000               	nop2	
  2057   002B2A                     
  2058                           ;MazeRobot.X/color.c: 230:             sprintf(string1,"K:%d I:%d C:%d T:%d \r",k,index,
      +                          counter_history[k],turn_history[k]);
  2059   002B2A  0E00               	movlw	low return_home_turns@string1
  2060   002B2C  0100               	movlb	0	; () banked
  2061   002B2E  6F66               	movwf	sprintf@s& (0+255),b
  2062   002B30  0E01               	movlw	high return_home_turns@string1
  2063   002B32  6F67               	movwf	(sprintf@s+1)& (0+255),b
  2064   002B34  0E01               	movlw	low STR_1
  2065   002B36  6F68               	movwf	sprintf@fmt& (0+255),b
  2066   002B38  0E0E               	movlw	high STR_1
  2067   002B3A  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  2068   002B3C  C198  F06A         	movff	return_home_turns@k,?_sprintf+4
  2069   002B40  C199  F06B         	movff	return_home_turns@k+1,?_sprintf+5
  2070   002B44  C083  F06C         	movff	return_home_turns@index,?_sprintf+6
  2071   002B48  C084  F06D         	movff	return_home_turns@index+1,?_sprintf+7
  2072   002B4C  90D8               	bcf	status,0,c
  2073   002B4E  0101               	movlb	1	; () banked
  2074   002B50  3598               	rlcf	return_home_turns@k& (0+255),w,b
  2075   002B52  6ED9               	movwf	fsr2l,c
  2076   002B54  3599               	rlcf	(return_home_turns@k+1)& (0+255),w,b
  2077   002B56  6EDA               	movwf	fsr2h,c
  2078   002B58  0100               	movlb	0	; () banked
  2079   002B5A  5181               	movf	return_home_turns@counter_history& (0+255),w,b
  2080   002B5C  26D9               	addwf	fsr2l,f,c
  2081   002B5E  5182               	movf	(return_home_turns@counter_history+1)& (0+255),w,b
  2082   002B60  22DA               	addwfc	fsr2h,f,c
  2083   002B62  CFDE F06E          	movff	postinc2,?_sprintf+8
  2084   002B66  CFDD F06F          	movff	postdec2,?_sprintf+9
  2085   002B6A  90D8               	bcf	status,0,c
  2086   002B6C  0101               	movlb	1	; () banked
  2087   002B6E  3598               	rlcf	return_home_turns@k& (0+255),w,b
  2088   002B70  6ED9               	movwf	fsr2l,c
  2089   002B72  3599               	rlcf	(return_home_turns@k+1)& (0+255),w,b
  2090   002B74  6EDA               	movwf	fsr2h,c
  2091   002B76  0100               	movlb	0	; () banked
  2092   002B78  517F               	movf	return_home_turns@turn_history& (0+255),w,b
  2093   002B7A  26D9               	addwf	fsr2l,f,c
  2094   002B7C  5180               	movf	(return_home_turns@turn_history+1)& (0+255),w,b
  2095   002B7E  22DA               	addwfc	fsr2h,f,c
  2096   002B80  CFDE F070          	movff	postinc2,?_sprintf+10
  2097   002B84  CFDD F071          	movff	postdec2,?_sprintf+11
  2098   002B88  EC01  F024         	call	_sprintf	;wreg free
  2099   002B8C                     
  2100                           ;MazeRobot.X/color.c: 231:             TxBufferedString(string1);
  2101   002B8C  0E00               	movlw	low return_home_turns@string1
  2102   002B8E  6E06               	movwf	TxBufferedString@string^0,c
  2103   002B90  0E01               	movlw	high return_home_turns@string1
  2104   002B92  6E07               	movwf	(TxBufferedString@string+1)^0,c
  2105   002B94  EC8F  F025         	call	_TxBufferedString	;wreg free
  2106   002B98                     
  2107                           ;MazeRobot.X/color.c: 232:             sendTxBuf();
  2108   002B98  EC4A  F026         	call	_sendTxBuf	;wreg free
  2109   002B9C                     
  2110                           ;MazeRobot.X/color.c: 233:             _delay((unsigned long)((2)*(64000000/4000.0)));
  2111   002B9C  0E2A               	movlw	42
  2112   002B9E  0100               	movlb	0	; () banked
  2113   002BA0  6F89               	movwf	??_return_home_turns& (0+255),b
  2114   002BA2  0E8D               	movlw	141
  2115   002BA4                     u6097:
  2116   002BA4  2EE8               	decfsz	wreg,f,c
  2117   002BA6  D7FE               	bra	u6097
  2118   002BA8  2F89               	decfsz	??_return_home_turns& (0+255),f,b
  2119   002BAA  D7FC               	bra	u6097
  2120   002BAC  D000               	nop2	
  2121                           
  2122                           ;MazeRobot.X/color.c: 235:             switch (turn_history[k]){
  2123   002BAE  EF94  F016         	goto	l5217
  2124   002BB2                     l5187:
  2125                           
  2126                           ; BSR set to: 0
  2127                           ;MazeRobot.X/color.c: 237:                     turnLeft_90(mL,mR);
  2128   002BB2  C085  F01E         	movff	return_home_turns@mL,turnLeft_90@mL
  2129   002BB6  C086  F01F         	movff	return_home_turns@mL+1,turnLeft_90@mL+1
  2130   002BBA  C087  F020         	movff	return_home_turns@mR,turnLeft_90@mR
  2131   002BBE  C088  F021         	movff	return_home_turns@mR+1,turnLeft_90@mR+1
  2132   002BC2  EC17  F01D         	call	_turnLeft_90	;wreg free
  2133                           
  2134                           ;MazeRobot.X/color.c: 238:                     break;
  2135   002BC6  EFCD  F016         	goto	l5219
  2136   002BCA                     l5189:
  2137                           
  2138                           ; BSR set to: 0
  2139                           ;MazeRobot.X/color.c: 240:                     turnRight_90(mL,mR);
  2140   002BCA  C085  F01E         	movff	return_home_turns@mL,turnRight_90@mL
  2141   002BCE  C086  F01F         	movff	return_home_turns@mL+1,turnRight_90@mL+1
  2142   002BD2  C087  F020         	movff	return_home_turns@mR,turnRight_90@mR
  2143   002BD6  C088  F021         	movff	return_home_turns@mR+1,turnRight_90@mR+1
  2144   002BDA  EC78  F01C         	call	_turnRight_90	;wreg free
  2145                           
  2146                           ;MazeRobot.X/color.c: 241:                     break;
  2147   002BDE  EFCD  F016         	goto	l5219
  2148   002BE2                     l5191:
  2149                           
  2150                           ; BSR set to: 0
  2151                           ;MazeRobot.X/color.c: 243:                     turn_180(mL,mR);
  2152   002BE2  C085  F01E         	movff	return_home_turns@mL,turn_180@mL
  2153   002BE6  C086  F01F         	movff	return_home_turns@mL+1,turn_180@mL+1
  2154   002BEA  C087  F020         	movff	return_home_turns@mR,turn_180@mR
  2155   002BEE  C088  F021         	movff	return_home_turns@mR+1,turn_180@mR+1
  2156   002BF2  ECD9  F01B         	call	_turn_180	;wreg free
  2157                           
  2158                           ;MazeRobot.X/color.c: 244:                     break;
  2159   002BF6  EFCD  F016         	goto	l5219
  2160   002BFA                     l5193:
  2161                           
  2162                           ; BSR set to: 0
  2163                           ;MazeRobot.X/color.c: 246:                     turnLeft_90(mL,mR);
  2164   002BFA  C085  F01E         	movff	return_home_turns@mL,turnLeft_90@mL
  2165   002BFE  C086  F01F         	movff	return_home_turns@mL+1,turnLeft_90@mL+1
  2166   002C02  C087  F020         	movff	return_home_turns@mR,turnLeft_90@mR
  2167   002C06  C088  F021         	movff	return_home_turns@mR+1,turnLeft_90@mR+1
  2168   002C0A  EC17  F01D         	call	_turnLeft_90	;wreg free
  2169   002C0E                     l5195:
  2170                           
  2171                           ;MazeRobot.X/color.c: 247:                     counter_history[k-1] -= 10;
  2172   002C0E  C198  F089         	movff	return_home_turns@k,??_return_home_turns
  2173   002C12  C199  F08A         	movff	return_home_turns@k+1,??_return_home_turns+1
  2174   002C16  90D8               	bcf	status,0,c
  2175   002C18  0100               	movlb	0	; () banked
  2176   002C1A  3789               	rlcf	??_return_home_turns& (0+255),f,b
  2177   002C1C  378A               	rlcf	(??_return_home_turns+1)& (0+255),f,b
  2178   002C1E  5189               	movf	??_return_home_turns& (0+255),w,b
  2179   002C20  2581               	addwf	return_home_turns@counter_history& (0+255),w,b
  2180   002C22  6F8B               	movwf	(??_return_home_turns+2)& (0+255),b
  2181   002C24  518A               	movf	(??_return_home_turns+1)& (0+255),w,b
  2182   002C26  2182               	addwfc	(return_home_turns@counter_history+1)& (0+255),w,b
  2183   002C28  6F8C               	movwf	(??_return_home_turns+3)& (0+255),b
  2184   002C2A  0EFE               	movlw	254
  2185   002C2C  258B               	addwf	(??_return_home_turns+2)& (0+255),w,b
  2186   002C2E  6ED9               	movwf	fsr2l,c
  2187   002C30  0EFF               	movlw	255
  2188   002C32  218C               	addwfc	(??_return_home_turns+3)& (0+255),w,b
  2189   002C34  6EDA               	movwf	fsr2h,c
  2190   002C36  0E0A               	movlw	10
  2191   002C38  5EDE               	subwf	postinc2,f,c
  2192   002C3A  0E00               	movlw	0
  2193   002C3C  5ADD               	subwfb	postdec2,f,c
  2194                           
  2195                           ;MazeRobot.X/color.c: 248:                     break;
  2196   002C3E  EFCD  F016         	goto	l5219
  2197   002C42                     l5197:
  2198                           
  2199                           ; BSR set to: 0
  2200                           ;MazeRobot.X/color.c: 250:                     turnRight_90(mL,mR);
  2201   002C42  C085  F01E         	movff	return_home_turns@mL,turnRight_90@mL
  2202   002C46  C086  F01F         	movff	return_home_turns@mL+1,turnRight_90@mL+1
  2203   002C4A  C087  F020         	movff	return_home_turns@mR,turnRight_90@mR
  2204   002C4E  C088  F021         	movff	return_home_turns@mR+1,turnRight_90@mR+1
  2205   002C52  EC78  F01C         	call	_turnRight_90	;wreg free
  2206   002C56  EF07  F016         	goto	l5195
  2207   002C5A                     l5201:
  2208                           
  2209                           ; BSR set to: 0
  2210                           ;MazeRobot.X/color.c: 254:                     turnLeft_135(mL,mR);
  2211   002C5A  C085  F01E         	movff	return_home_turns@mL,turnLeft_135@mL
  2212   002C5E  C086  F01F         	movff	return_home_turns@mL+1,turnLeft_135@mL+1
  2213   002C62  C087  F020         	movff	return_home_turns@mR,turnLeft_135@mR
  2214   002C66  C088  F021         	movff	return_home_turns@mR+1,turnLeft_135@mR+1
  2215   002C6A  EC54  F01E         	call	_turnLeft_135	;wreg free
  2216                           
  2217                           ;MazeRobot.X/color.c: 255:                     break;
  2218   002C6E  EFCD  F016         	goto	l5219
  2219   002C72                     l5203:
  2220                           
  2221                           ; BSR set to: 0
  2222                           ;MazeRobot.X/color.c: 257:                     turnRight_135(mL,mR);
  2223   002C72  C085  F01E         	movff	return_home_turns@mL,turnRight_135@mL
  2224   002C76  C086  F01F         	movff	return_home_turns@mL+1,turnRight_135@mL+1
  2225   002C7A  C087  F020         	movff	return_home_turns@mR,turnRight_135@mR
  2226   002C7E  C088  F021         	movff	return_home_turns@mR+1,turnRight_135@mR+1
  2227   002C82  ECB6  F01D         	call	_turnRight_135	;wreg free
  2228                           
  2229                           ;MazeRobot.X/color.c: 258:                     break;
  2230   002C86  EFCD  F016         	goto	l5219
  2231   002C8A                     l5205:
  2232                           
  2233                           ; BSR set to: 0
  2234                           ;MazeRobot.X/color.c: 260:                     forward(mL,mR);
  2235   002C8A  C085  F018         	movff	return_home_turns@mL,forward@mL
  2236   002C8E  C086  F019         	movff	return_home_turns@mL+1,forward@mL+1
  2237   002C92  C087  F01A         	movff	return_home_turns@mR,forward@mR
  2238   002C96  C088  F01B         	movff	return_home_turns@mR+1,forward@mR+1
  2239   002C9A  EC58  F020         	call	_forward	;wreg free
  2240   002C9E                     
  2241                           ;MazeRobot.X/color.c: 261:                     int i = (counter_history[k]-2);
  2242   002C9E  90D8               	bcf	status,0,c
  2243   002CA0  0101               	movlb	1	; () banked
  2244   002CA2  3598               	rlcf	return_home_turns@k& (0+255),w,b
  2245   002CA4  6ED9               	movwf	fsr2l,c
  2246   002CA6  3599               	rlcf	(return_home_turns@k+1)& (0+255),w,b
  2247   002CA8  6EDA               	movwf	fsr2h,c
  2248   002CAA  0100               	movlb	0	; () banked
  2249   002CAC  5181               	movf	return_home_turns@counter_history& (0+255),w,b
  2250   002CAE  26D9               	addwf	fsr2l,f,c
  2251   002CB0  5182               	movf	(return_home_turns@counter_history+1)& (0+255),w,b
  2252   002CB2  22DA               	addwfc	fsr2h,f,c
  2253   002CB4  CFDE F089          	movff	postinc2,??_return_home_turns
  2254   002CB8  CFDD F08A          	movff	postdec2,??_return_home_turns+1
  2255   002CBC  0EFE               	movlw	254
  2256   002CBE  2589               	addwf	??_return_home_turns& (0+255),w,b
  2257   002CC0  0101               	movlb	1	; () banked
  2258   002CC2  6F96               	movwf	return_home_turns@i& (0+255),b
  2259   002CC4  0EFF               	movlw	255
  2260   002CC6  0100               	movlb	0	; () banked
  2261   002CC8  218A               	addwfc	(??_return_home_turns+1)& (0+255),w,b
  2262   002CCA  0101               	movlb	1	; () banked
  2263   002CCC  6F97               	movwf	(return_home_turns@i+1)& (0+255),b
  2264                           
  2265                           ;MazeRobot.X/color.c: 262:                     while(i>0){
  2266   002CCE  EF78  F016         	goto	l131
  2267   002CD2                     l5209:
  2268                           
  2269                           ; BSR set to: 1
  2270                           ;MazeRobot.X/color.c: 263:                     i--;
  2271   002CD2  0796               	decf	return_home_turns@i& (0+255),f,b
  2272   002CD4  A0D8               	btfss	status,0,c
  2273   002CD6  0797               	decf	(return_home_turns@i+1)& (0+255),f,b
  2274   002CD8                     
  2275                           ; BSR set to: 1
  2276                           ;MazeRobot.X/color.c: 264:                     _delay((unsigned long)((25)*(64000000/400
      +                          0.0)));
  2277   002CD8  0E03               	movlw	3
  2278   002CDA  0100               	movlb	0	; () banked
  2279   002CDC  6F8A               	movwf	(??_return_home_turns+1)& (0+255),b
  2280   002CDE  0E08               	movlw	8
  2281   002CE0  6F89               	movwf	??_return_home_turns& (0+255),b
  2282   002CE2  0E77               	movlw	119
  2283   002CE4                     u6107:
  2284   002CE4  2EE8               	decfsz	wreg,f,c
  2285   002CE6  D7FE               	bra	u6107
  2286   002CE8  2F89               	decfsz	??_return_home_turns& (0+255),f,b
  2287   002CEA  D7FC               	bra	u6107
  2288   002CEC  2F8A               	decfsz	(??_return_home_turns+1)& (0+255),f,b
  2289   002CEE  D7FA               	bra	u6107
  2290   002CF0                     l131:
  2291                           
  2292                           ;MazeRobot.X/color.c: 262:                     while(i>0){
  2293   002CF0  0101               	movlb	1	; () banked
  2294   002CF2  BF97               	btfsc	(return_home_turns@i+1)& (0+255),7,b
  2295   002CF4  EF86  F016         	goto	u5780
  2296   002CF8  5197               	movf	(return_home_turns@i+1)& (0+255),w,b
  2297   002CFA  E106               	bnz	u5781
  2298   002CFC  0596               	decf	return_home_turns@i& (0+255),w,b
  2299   002CFE  B0D8               	btfsc	status,0,c
  2300   002D00  EF84  F016         	goto	u5781
  2301   002D04  EF86  F016         	goto	u5780
  2302   002D08                     u5781:
  2303   002D08  EF69  F016         	goto	l5209
  2304   002D0C                     u5780:
  2305   002D0C  EFCD  F016         	goto	l5219
  2306   002D10                     l5213:
  2307                           
  2308                           ; BSR set to: 0
  2309                           ;MazeRobot.X/color.c: 268:                     stop(mL,mR);
  2310   002D10  C085  F018         	movff	return_home_turns@mL,stop@mL
  2311   002D14  C086  F019         	movff	return_home_turns@mL+1,stop@mL+1
  2312   002D18  C087  F01A         	movff	return_home_turns@mR,stop@mR
  2313   002D1C  C088  F01B         	movff	return_home_turns@mR+1,stop@mR+1
  2314   002D20  ECFC  F021         	call	_stop	;wreg free
  2315                           
  2316                           ;MazeRobot.X/color.c: 269:                     break;
  2317   002D24  EFCD  F016         	goto	l5219
  2318   002D28                     l5217:
  2319   002D28  90D8               	bcf	status,0,c
  2320   002D2A  0101               	movlb	1	; () banked
  2321   002D2C  3598               	rlcf	return_home_turns@k& (0+255),w,b
  2322   002D2E  6ED9               	movwf	fsr2l,c
  2323   002D30  3599               	rlcf	(return_home_turns@k+1)& (0+255),w,b
  2324   002D32  6EDA               	movwf	fsr2h,c
  2325   002D34  0100               	movlb	0	; () banked
  2326   002D36  517F               	movf	return_home_turns@turn_history& (0+255),w,b
  2327   002D38  26D9               	addwf	fsr2l,f,c
  2328   002D3A  5180               	movf	(return_home_turns@turn_history+1)& (0+255),w,b
  2329   002D3C  22DA               	addwfc	fsr2h,f,c
  2330   002D3E  CFDE F089          	movff	postinc2,??_return_home_turns
  2331   002D42  CFDD F08A          	movff	postdec2,??_return_home_turns+1
  2332                           
  2333                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2334                           ; Switch size 1, requested type "simple"
  2335                           ; Number of cases is 1, Range of values is 0 to 0
  2336                           ; switch strategies available:
  2337                           ; Name         Instructions Cycles
  2338                           ; simple_byte            4     3 (average)
  2339                           ;	Chosen strategy is simple_byte
  2340   002D46  518A               	movf	(??_return_home_turns+1)& (0+255),w,b
  2341   002D48  0A00               	xorlw	0	; case 0
  2342   002D4A  B4D8               	btfsc	status,2,c
  2343   002D4C  EFAA  F016         	goto	l5411
  2344   002D50  EF88  F016         	goto	l5213
  2345   002D54                     l5411:
  2346                           
  2347                           ; BSR set to: 0
  2348                           ; Switch size 1, requested type "simple"
  2349                           ; Number of cases is 8, Range of values is 0 to 7
  2350                           ; switch strategies available:
  2351                           ; Name         Instructions Cycles
  2352                           ; simple_byte           25    13 (average)
  2353                           ;	Chosen strategy is simple_byte
  2354   002D54  5189               	movf	??_return_home_turns& (0+255),w,b
  2355   002D56  0A00               	xorlw	0	; case 0
  2356   002D58  B4D8               	btfsc	status,2,c
  2357   002D5A  EF45  F016         	goto	l5205
  2358   002D5E  0A01               	xorlw	1	; case 1
  2359   002D60  B4D8               	btfsc	status,2,c
  2360   002D62  EFD9  F015         	goto	l5187
  2361   002D66  0A03               	xorlw	3	; case 2
  2362   002D68  B4D8               	btfsc	status,2,c
  2363   002D6A  EFE5  F015         	goto	l5189
  2364   002D6E  0A01               	xorlw	1	; case 3
  2365   002D70  B4D8               	btfsc	status,2,c
  2366   002D72  EFF1  F015         	goto	l5191
  2367   002D76  0A07               	xorlw	7	; case 4
  2368   002D78  B4D8               	btfsc	status,2,c
  2369   002D7A  EFFD  F015         	goto	l5193
  2370   002D7E  0A01               	xorlw	1	; case 5
  2371   002D80  B4D8               	btfsc	status,2,c
  2372   002D82  EF21  F016         	goto	l5197
  2373   002D86  0A03               	xorlw	3	; case 6
  2374   002D88  B4D8               	btfsc	status,2,c
  2375   002D8A  EF2D  F016         	goto	l5201
  2376   002D8E  0A01               	xorlw	1	; case 7
  2377   002D90  B4D8               	btfsc	status,2,c
  2378   002D92  EF39  F016         	goto	l5203
  2379   002D96  EF88  F016         	goto	l5213
  2380   002D9A                     l5219:
  2381                           
  2382                           ;MazeRobot.X/color.c: 272:             _delay((unsigned long)((50)*(64000000/4000.0)));
  2383   002D9A  0E05               	movlw	5
  2384   002D9C  0100               	movlb	0	; () banked
  2385   002D9E  6F8A               	movwf	(??_return_home_turns+1)& (0+255),b
  2386   002DA0  0E0F               	movlw	15
  2387   002DA2  6F89               	movwf	??_return_home_turns& (0+255),b
  2388   002DA4  0EF1               	movlw	241
  2389   002DA6                     u6117:
  2390   002DA6  2EE8               	decfsz	wreg,f,c
  2391   002DA8  D7FE               	bra	u6117
  2392   002DAA  2F89               	decfsz	??_return_home_turns& (0+255),f,b
  2393   002DAC  D7FC               	bra	u6117
  2394   002DAE  2F8A               	decfsz	(??_return_home_turns+1)& (0+255),f,b
  2395   002DB0  D7FA               	bra	u6117
  2396   002DB2                     
  2397                           ;MazeRobot.X/color.c: 273:         }
  2398   002DB2  0101               	movlb	1	; () banked
  2399   002DB4  0798               	decf	return_home_turns@k& (0+255),f,b
  2400   002DB6  A0D8               	btfss	status,0,c
  2401   002DB8  0799               	decf	(return_home_turns@k+1)& (0+255),f,b
  2402   002DBA  BF99               	btfsc	(return_home_turns@k+1)& (0+255),7,b
  2403   002DBC  EFE4  F016         	goto	u5790
  2404   002DC0  EFE2  F016         	goto	u5791
  2405   002DC4                     u5791:
  2406   002DC4  EF8C  F015         	goto	l5177
  2407   002DC8                     u5790:
  2408   002DC8                     l135:
  2409                           
  2410                           ; BSR set to: 1
  2411   002DC8  0012               	return		;funcret
  2412   002DCA                     __end_of_return_home_turns:
  2413                           	callstack 0
  2414                           
  2415 ;; *************** function _sprintf *****************
  2416 ;; Defined at:
  2417 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_sprintf.c"
  2418 ;; Parameters:    Size  Location     Type
  2419 ;;  s               2    6[BANK0 ] PTR unsigned char 
  2420 ;;		 -> ADC2String@buf(40), return_home_turns@string1(150), 
  2421 ;;  fmt             2    8[BANK0 ] PTR const unsigned char 
  2422 ;;		 -> STR_2(15), STR_1(22), 
  2423 ;; Auto vars:     Size  Location     Type
  2424 ;;  f              11   20[BANK0 ] struct _IO_FILE
  2425 ;;  ap              2   18[BANK0 ] PTR void [1]
  2426 ;;		 -> ?_sprintf(2), 
  2427 ;;  ret             2    0        int 
  2428 ;; Return value:  Size  Location     Type
  2429 ;;                  2    6[BANK0 ] int 
  2430 ;; Registers used:
  2431 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2432 ;; Tracked objects:
  2433 ;;		On entry : 0/0
  2434 ;;		On exit  : 0/0
  2435 ;;		Unchanged: 0/0
  2436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2437 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2438 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2440 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2441 ;;Total ram usage:       25 bytes
  2442 ;; Hardware stack levels used: 1
  2443 ;; Hardware stack levels required when called: 9
  2444 ;; This function calls:
  2445 ;;		_vfprintf
  2446 ;; This function is called by:
  2447 ;;		_return_home_turns
  2448 ;;		_ADC2String
  2449 ;; This function uses a non-reentrant model
  2450 ;;
  2451                           
  2452                           	psect	text3
  2453   004802                     __ptext3:
  2454                           	callstack 0
  2455   004802                     _sprintf:
  2456                           	callstack 20
  2457   004802  0E6A               	movlw	low (?_sprintf+4)
  2458   004804  0100               	movlb	0	; () banked
  2459   004806  6F72               	movwf	sprintf@ap& (0+255),b
  2460   004808  0E00               	movlw	high (?_sprintf+4)
  2461   00480A  6F73               	movwf	(sprintf@ap+1)& (0+255),b
  2462   00480C  C066  F074         	movff	sprintf@s,sprintf@f
  2463   004810  C067  F075         	movff	sprintf@s+1,sprintf@f+1
  2464   004814                     
  2465                           ; BSR set to: 0
  2466   004814  0E00               	movlw	0
  2467   004816  6F78               	movwf	(sprintf@f+4)& (0+255),b
  2468   004818  0E00               	movlw	0
  2469   00481A  6F77               	movwf	(sprintf@f+3)& (0+255),b
  2470   00481C                     
  2471                           ; BSR set to: 0
  2472   00481C  0E00               	movlw	0
  2473   00481E  6F7E               	movwf	(sprintf@f+10)& (0+255),b
  2474   004820  0E00               	movlw	0
  2475   004822  6F7D               	movwf	(sprintf@f+9)& (0+255),b
  2476   004824                     
  2477                           ; BSR set to: 0
  2478   004824  0E74               	movlw	low sprintf@f
  2479   004826  6F60               	movwf	vfprintf@fp& (0+255),b
  2480   004828  0E00               	movlw	high sprintf@f
  2481   00482A  6F61               	movwf	(vfprintf@fp+1)& (0+255),b
  2482   00482C  C068  F062         	movff	sprintf@fmt,vfprintf@fmt
  2483   004830  C069  F063         	movff	sprintf@fmt+1,vfprintf@fmt+1
  2484   004834  0E72               	movlw	low sprintf@ap
  2485   004836  6F64               	movwf	vfprintf@ap& (0+255),b
  2486   004838  0E00               	movlw	high sprintf@ap
  2487   00483A  6F65               	movwf	(vfprintf@ap+1)& (0+255),b
  2488   00483C  ECD7  F023         	call	_vfprintf	;wreg free
  2489   004840  0100               	movlb	0	; () banked
  2490   004842  5177               	movf	(sprintf@f+3)& (0+255),w,b
  2491   004844  2566               	addwf	sprintf@s& (0+255),w,b
  2492   004846  6ED9               	movwf	fsr2l,c
  2493   004848  5178               	movf	(sprintf@f+4)& (0+255),w,b
  2494   00484A  2167               	addwfc	(sprintf@s+1)& (0+255),w,b
  2495   00484C  6EDA               	movwf	fsr2h,c
  2496   00484E  0E00               	movlw	0
  2497   004850  6EDF               	movwf	indf2,c
  2498   004852                     
  2499                           ; BSR set to: 0
  2500   004852  0012               	return		;funcret
  2501   004854                     __end_of_sprintf:
  2502                           	callstack 0
  2503                           
  2504 ;; *************** function _vfprintf *****************
  2505 ;; Defined at:
  2506 ;;		line 1520 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2507 ;; Parameters:    Size  Location     Type
  2508 ;;  fp              2    0[BANK0 ] PTR struct _IO_FILE
  2509 ;;		 -> sprintf@f(11), 
  2510 ;;  fmt             2    2[BANK0 ] PTR const unsigned char 
  2511 ;;		 -> STR_2(15), STR_1(22), 
  2512 ;;  ap              2    4[BANK0 ] PTR PTR void 
  2513 ;;		 -> sprintf@ap(2), 
  2514 ;; Auto vars:     Size  Location     Type
  2515 ;;  cfmt            2   84[COMRAM] PTR unsigned char 
  2516 ;;		 -> STR_2(15), STR_1(22), 
  2517 ;; Return value:  Size  Location     Type
  2518 ;;                  2    0[BANK0 ] int 
  2519 ;; Registers used:
  2520 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2521 ;; Tracked objects:
  2522 ;;		On entry : 0/0
  2523 ;;		On exit  : 0/0
  2524 ;;		Unchanged: 0/0
  2525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2526 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2527 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2529 ;;      Totals:         2       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2530 ;;Total ram usage:        8 bytes
  2531 ;; Hardware stack levels used: 1
  2532 ;; Hardware stack levels required when called: 8
  2533 ;; This function calls:
  2534 ;;		_vfpfcnvrt
  2535 ;; This function is called by:
  2536 ;;		_sprintf
  2537 ;; This function uses a non-reentrant model
  2538 ;;
  2539                           
  2540                           	psect	text4
  2541   0047AE                     __ptext4:
  2542                           	callstack 0
  2543   0047AE                     _vfprintf:
  2544                           	callstack 20
  2545   0047AE                     
  2546                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1520: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\source
      +                          s\c99\common\doprnt.c: 1521: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\comm
      +                          on\doprnt.c: 1523:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\
      +                          common\doprnt.c: 1525:     cfmt = (char *)fmt;
  2547   0047AE  C062  F055         	movff	vfprintf@fmt,vfprintf@cfmt
  2548   0047B2  C063  F056         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  2549                           
  2550                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  2551   0047B6  EFEB  F023         	goto	l4999
  2552   0047BA                     l4997:
  2553                           
  2554                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1533:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  2555   0047BA  C060  F043         	movff	vfprintf@fp,vfpfcnvrt@fp
  2556   0047BE  C061  F044         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  2557   0047C2  0E55               	movlw	low vfprintf@cfmt
  2558   0047C4  6E45               	movwf	vfpfcnvrt@fmt^0,c
  2559   0047C6  0E00               	movlw	high vfprintf@cfmt
  2560   0047C8  6E46               	movwf	(vfpfcnvrt@fmt+1)^0,c
  2561   0047CA  C064  F047         	movff	vfprintf@ap,vfpfcnvrt@ap
  2562   0047CE  C065  F048         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  2563   0047D2  EC2A  F01B         	call	_vfpfcnvrt	;wreg free
  2564   0047D6                     l4999:
  2565                           
  2566                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  2567   0047D6  C055  FFF6         	movff	vfprintf@cfmt,tblptrl
  2568   0047DA  C056  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  2569   0047DE                     	if	0	;tblptru may be non-zero
  2570   0047DE                     	endif
  2571   0047DE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2572   0047DE  0E00               	movlw	low (__mediumconst shr (0+16))
  2573   0047E0  6EF8               	movwf	tblptru,c
  2574   0047E2                     	endif
  2575   0047E2  0008               	tblrd		*
  2576   0047E4  50F5               	movf	tablat,w,c
  2577   0047E6  0900               	iorlw	0
  2578   0047E8  A4D8               	btfss	status,2,c
  2579   0047EA  EFF9  F023         	goto	u5441
  2580   0047EE  EFFB  F023         	goto	u5440
  2581   0047F2                     u5441:
  2582   0047F2  EFDD  F023         	goto	l4997
  2583   0047F6                     u5440:
  2584   0047F6                     
  2585                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1538:  return 0;
  2586   0047F6  0E00               	movlw	0
  2587   0047F8  0100               	movlb	0	; () banked
  2588   0047FA  6F61               	movwf	(?_vfprintf+1)& (0+255),b
  2589   0047FC  0E00               	movlw	0
  2590   0047FE  6F60               	movwf	?_vfprintf& (0+255),b
  2591   004800                     
  2592                           ; BSR set to: 0
  2593   004800  0012               	return		;funcret
  2594   004802                     __end_of_vfprintf:
  2595                           	callstack 0
  2596                           
  2597 ;; *************** function _vfpfcnvrt *****************
  2598 ;; Defined at:
  2599 ;;		line 1007 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2600 ;; Parameters:    Size  Location     Type
  2601 ;;  fp              2   66[COMRAM] PTR struct _IO_FILE
  2602 ;;		 -> sprintf@f(11), 
  2603 ;;  fmt             2   68[COMRAM] PTR PTR unsigned char 
  2604 ;;		 -> vfprintf@cfmt(2), 
  2605 ;;  ap              2   70[COMRAM] PTR PTR void 
  2606 ;;		 -> sprintf@ap(2), 
  2607 ;; Auto vars:     Size  Location     Type
  2608 ;;  convarg         8   74[COMRAM] struct .
  2609 ;;  cp              2   82[COMRAM] PTR unsigned char 
  2610 ;;		 -> STR_2(15), STR_1(22), 
  2611 ;;  i               2    0        int 
  2612 ;;  done            2    0        int 
  2613 ;;  c               1    0        unsigned char 
  2614 ;; Return value:  Size  Location     Type
  2615 ;;                  1    wreg      void 
  2616 ;; Registers used:
  2617 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2618 ;; Tracked objects:
  2619 ;;		On entry : 0/0
  2620 ;;		On exit  : 0/0
  2621 ;;		Unchanged: 0/0
  2622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2623 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2624 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2625 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2626 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2627 ;;Total ram usage:       18 bytes
  2628 ;; Hardware stack levels used: 1
  2629 ;; Hardware stack levels required when called: 7
  2630 ;; This function calls:
  2631 ;;		_dtoa
  2632 ;;		_fputc
  2633 ;; This function is called by:
  2634 ;;		_vfprintf
  2635 ;; This function uses a non-reentrant model
  2636 ;;
  2637                           
  2638                           	psect	text5
  2639   003654                     __ptext5:
  2640                           	callstack 0
  2641   003654                     _vfpfcnvrt:
  2642                           	callstack 20
  2643   003654                     
  2644                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1007: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1008: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\dopr
      +                          nt.c: 1009:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 1010:     int done, i;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1016:  } convarg;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1019:     if ((*fmt)[0] == '%') {
  2645   003654  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2646   003658  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2647   00365C  CFDE FFF6          	movff	postinc2,tblptrl
  2648   003660  CFDD FFF7          	movff	postdec2,tblptrh
  2649   003664                     	if	0	;tblptru may be non-zero
  2650   003664                     	endif
  2651   003664                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2652   003664  0E00               	movlw	low (__mediumconst shr (0+16))
  2653   003666  6EF8               	movwf	tblptru,c
  2654   003668                     	endif
  2655   003668  0008               	tblrd		*
  2656   00366A  50F5               	movf	tablat,w,c
  2657   00366C  0A25               	xorlw	37
  2658   00366E  A4D8               	btfss	status,2,c
  2659   003670  EF3C  F01B         	goto	u5411
  2660   003674  EF3E  F01B         	goto	u5410
  2661   003678                     u5411:
  2662   003678  EFC2  F01B         	goto	l4989
  2663   00367C                     u5410:
  2664   00367C                     
  2665                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1020:         ++*
      +                          fmt;
  2666   00367C  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2667   003680  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2668   003684  2ADE               	incf	postinc2,f,c
  2669   003686  0E00               	movlw	0
  2670   003688  22DD               	addwfc	postdec2,f,c
  2671   00368A                     
  2672                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1022:         fla
      +                          gs = width = 0;
  2673   00368A  0E00               	movlw	0
  2674   00368C  0100               	movlb	0	; () banked
  2675   00368E  6FE5               	movwf	(_width+1)& (0+255),b
  2676   003690  0E00               	movlw	0
  2677   003692  6FE4               	movwf	_width& (0+255),b
  2678   003694  C0E4  F0EC         	movff	_width,_flags
  2679   003698                     
  2680                           ; BSR set to: 0
  2681                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1023:         pre
      +                          c = -1;
  2682   003698  69E6               	setf	_prec& (0+255),b
  2683   00369A  69E7               	setf	(_prec+1)& (0+255),b
  2684   00369C                     
  2685                           ; BSR set to: 0
  2686                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1117:   cp = *fmt
      +                          ;
  2687   00369C  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2688   0036A0  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2689   0036A4  CFDE F053          	movff	postinc2,vfpfcnvrt@cp
  2690   0036A8  CFDD F054          	movff	postdec2,vfpfcnvrt@cp+1
  2691   0036AC                     
  2692                           ; BSR set to: 0
  2693                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1187:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  2694   0036AC  C053  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2695   0036B0  C054  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  2696   0036B4                     	if	0	;tblptru may be non-zero
  2697   0036B4                     	endif
  2698   0036B4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2699   0036B4  0E00               	movlw	low (__mediumconst shr (0+16))
  2700   0036B6  6EF8               	movwf	tblptru,c
  2701   0036B8                     	endif
  2702   0036B8  0008               	tblrd		*
  2703   0036BA  50F5               	movf	tablat,w,c
  2704   0036BC  0A64               	xorlw	100
  2705   0036BE  B4D8               	btfsc	status,2,c
  2706   0036C0  EF64  F01B         	goto	u5421
  2707   0036C4  EF66  F01B         	goto	u5420
  2708   0036C8                     u5421:
  2709   0036C8  EF76  F01B         	goto	l4979
  2710   0036CC                     u5420:
  2711   0036CC                     
  2712                           ; BSR set to: 0
  2713   0036CC  C053  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2714   0036D0  C054  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  2715   0036D4                     	if	0	;tblptru may be non-zero
  2716   0036D4                     	endif
  2717   0036D4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2718   0036D4  0E00               	movlw	low (__mediumconst shr (0+16))
  2719   0036D6  6EF8               	movwf	tblptru,c
  2720   0036D8                     	endif
  2721   0036D8  0008               	tblrd		*
  2722   0036DA  50F5               	movf	tablat,w,c
  2723   0036DC  0A69               	xorlw	105
  2724   0036DE  A4D8               	btfss	status,2,c
  2725   0036E0  EF74  F01B         	goto	u5431
  2726   0036E4  EF76  F01B         	goto	u5430
  2727   0036E8                     u5431:
  2728   0036E8  EFB9  F01B         	goto	l4985
  2729   0036EC                     u5430:
  2730   0036EC                     l4979:
  2731                           
  2732                           ; BSR set to: 0
  2733                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1230:    convarg.
      +                          ll = (long long)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  2734   0036EC  C047  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2735   0036F0  C048  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2736   0036F4  CFDF F049          	movff	indf2,??_vfpfcnvrt
  2737   0036F8  0E02               	movlw	2
  2738   0036FA  26DE               	addwf	postinc2,f,c
  2739   0036FC  CFDF F04A          	movff	indf2,??_vfpfcnvrt+1
  2740   003700  0E00               	movlw	0
  2741   003702  22DD               	addwfc	postdec2,f,c
  2742   003704  C049  FFD9         	movff	??_vfpfcnvrt,fsr2l
  2743   003708  C04A  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2744   00370C  CFDE F04B          	movff	postinc2,vfpfcnvrt@convarg
  2745   003710  CFDD F04C          	movff	postdec2,vfpfcnvrt@convarg+1
  2746   003714  0E00               	movlw	0
  2747   003716  BE4C               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  2748   003718  0EFF               	movlw	-1
  2749   00371A  6E4D               	movwf	(vfpfcnvrt@convarg+2)^0,c
  2750   00371C  6E4E               	movwf	(vfpfcnvrt@convarg+3)^0,c
  2751   00371E  6E4F               	movwf	(vfpfcnvrt@convarg+4)^0,c
  2752   003720  6E50               	movwf	(vfpfcnvrt@convarg+5)^0,c
  2753   003722  6E51               	movwf	(vfpfcnvrt@convarg+6)^0,c
  2754   003724  6E52               	movwf	(vfpfcnvrt@convarg+7)^0,c
  2755                           
  2756                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1232:    *fmt = c
      +                          p+1;
  2757   003726  0E01               	movlw	1
  2758   003728  2453               	addwf	vfpfcnvrt@cp^0,w,c
  2759   00372A  6E49               	movwf	??_vfpfcnvrt^0,c
  2760   00372C  0E00               	movlw	0
  2761   00372E  2054               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  2762   003730  6E4A               	movwf	(??_vfpfcnvrt+1)^0,c
  2763   003732  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2764   003736  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2765   00373A  C049  FFDE         	movff	??_vfpfcnvrt,postinc2
  2766   00373E  C04A  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  2767   003742                     
  2768                           ; BSR set to: 0
  2769                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1233:    return (
      +                          void) dtoa(fp, convarg.ll);;	Return value of _vfpfcnvrt is never used
  2770   003742  C043  F020         	movff	vfpfcnvrt@fp,dtoa@fp
  2771   003746  C044  F021         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  2772   00374A  C04B  F022         	movff	vfpfcnvrt@convarg,dtoa@d
  2773   00374E  C04C  F023         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  2774   003752  C04D  F024         	movff	vfpfcnvrt@convarg+2,dtoa@d+2
  2775   003756  C04E  F025         	movff	vfpfcnvrt@convarg+3,dtoa@d+3
  2776   00375A  C04F  F026         	movff	vfpfcnvrt@convarg+4,dtoa@d+4
  2777   00375E  C050  F027         	movff	vfpfcnvrt@convarg+5,dtoa@d+5
  2778   003762  C051  F028         	movff	vfpfcnvrt@convarg+6,dtoa@d+6
  2779   003766  C052  F029         	movff	vfpfcnvrt@convarg+7,dtoa@d+7
  2780   00376A  ECE5  F016         	call	_dtoa	;wreg free
  2781   00376E  EFD8  F01B         	goto	l1271
  2782   003772                     l4985:
  2783                           
  2784                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1509:         ++*
      +                          fmt;
  2785   003772  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2786   003776  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2787   00377A  2ADE               	incf	postinc2,f,c
  2788   00377C  0E00               	movlw	0
  2789   00377E  22DD               	addwfc	postdec2,f,c
  2790   003780  EFD8  F01B         	goto	l1271
  2791   003784                     l4989:
  2792                           
  2793                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1514:     fputc((
      +                          int)(*fmt)[0], fp);
  2794   003784  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2795   003788  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2796   00378C  CFDE FFF6          	movff	postinc2,tblptrl
  2797   003790  CFDD FFF7          	movff	postdec2,tblptrh
  2798   003794                     	if	0	;tblptru may be non-zero
  2799   003794                     	endif
  2800   003794                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2801   003794  0E00               	movlw	low (__mediumconst shr (0+16))
  2802   003796  6EF8               	movwf	tblptru,c
  2803   003798                     	endif
  2804   003798  0008               	tblrd		*
  2805   00379A  50F5               	movf	tablat,w,c
  2806   00379C  6E05               	movwf	fputc@c^0,c
  2807   00379E  6A06               	clrf	(fputc@c+1)^0,c
  2808   0037A0  C043  F007         	movff	vfpfcnvrt@fp,fputc@fp
  2809   0037A4  C044  F008         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2810   0037A8  EC97  F021         	call	_fputc	;wreg free
  2811   0037AC  EFB9  F01B         	goto	l4985
  2812   0037B0                     l1271:
  2813   0037B0  0012               	return		;funcret
  2814   0037B2                     __end_of_vfpfcnvrt:
  2815                           	callstack 0
  2816                           
  2817 ;; *************** function _dtoa *****************
  2818 ;; Defined at:
  2819 ;;		line 443 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2820 ;; Parameters:    Size  Location     Type
  2821 ;;  fp              2   31[COMRAM] PTR struct _IO_FILE
  2822 ;;		 -> sprintf@f(11), 
  2823 ;;  d               8   33[COMRAM] long long 
  2824 ;; Auto vars:     Size  Location     Type
  2825 ;;  n               8   55[COMRAM] long long 
  2826 ;;  i               2   64[COMRAM] int 
  2827 ;;  w               2   53[COMRAM] int 
  2828 ;;  p               2   51[COMRAM] int 
  2829 ;;  s               1   63[COMRAM] unsigned char 
  2830 ;; Return value:  Size  Location     Type
  2831 ;;                  1    wreg      void 
  2832 ;; Registers used:
  2833 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2834 ;; Tracked objects:
  2835 ;;		On entry : 0/0
  2836 ;;		On exit  : 0/0
  2837 ;;		Unchanged: 0/0
  2838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2839 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2840 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2841 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2842 ;;      Totals:        35       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2843 ;;Total ram usage:       35 bytes
  2844 ;; Hardware stack levels used: 1
  2845 ;; Hardware stack levels required when called: 6
  2846 ;; This function calls:
  2847 ;;		___aodiv
  2848 ;;		___aomod
  2849 ;;		_abs
  2850 ;;		_pad
  2851 ;; This function is called by:
  2852 ;;		_vfpfcnvrt
  2853 ;; This function uses a non-reentrant model
  2854 ;;
  2855                           
  2856                           	psect	text6
  2857   002DCA                     __ptext6:
  2858                           	callstack 0
  2859   002DCA                     _dtoa:
  2860                           	callstack 20
  2861   002DCA                     
  2862                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 443: static void 
      +                          dtoa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\
      +                          doprnt.c: 444: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          45:  char s;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 446: 
      +                              int i, p, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          47:     long long n;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 450:     n = d;
  2863   002DCA  C022  F038         	movff	dtoa@d,dtoa@n
  2864   002DCE  C023  F039         	movff	dtoa@d+1,dtoa@n+1
  2865   002DD2  C024  F03A         	movff	dtoa@d+2,dtoa@n+2
  2866   002DD6  C025  F03B         	movff	dtoa@d+3,dtoa@n+3
  2867   002DDA  C026  F03C         	movff	dtoa@d+4,dtoa@n+4
  2868   002DDE  C027  F03D         	movff	dtoa@d+5,dtoa@n+5
  2869   002DE2  C028  F03E         	movff	dtoa@d+6,dtoa@n+6
  2870   002DE6  C029  F03F         	movff	dtoa@d+7,dtoa@n+7
  2871   002DEA                     
  2872                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 451:     s = n < 
      +                          0 ? 1 : 0;
  2873   002DEA  BE3F               	btfsc	(dtoa@n+7)^0,7,c
  2874   002DEC  EFFA  F016         	goto	u5311
  2875   002DF0  EFFD  F016         	goto	u5310
  2876   002DF4                     u5311:
  2877   002DF4  0E01               	movlw	1
  2878   002DF6  EFFE  F016         	goto	u5320
  2879   002DFA                     u5310:
  2880   002DFA  0E00               	movlw	0
  2881   002DFC                     u5320:
  2882   002DFC  6E40               	movwf	dtoa@s^0,c
  2883   002DFE                     
  2884                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 452:     if (s) {
  2885   002DFE  5040               	movf	dtoa@s^0,w,c
  2886   002E00  B4D8               	btfsc	status,2,c
  2887   002E02  EF05  F017         	goto	u5331
  2888   002E06  EF07  F017         	goto	u5330
  2889   002E0A                     u5331:
  2890   002E0A  EF17  F017         	goto	l4921
  2891   002E0E                     u5330:
  2892   002E0E                     
  2893                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 453:         n = 
      +                          -n;
  2894   002E0E  1E3F               	comf	(dtoa@n+7)^0,f,c
  2895   002E10  1E3E               	comf	(dtoa@n+6)^0,f,c
  2896   002E12  1E3D               	comf	(dtoa@n+5)^0,f,c
  2897   002E14  1E3C               	comf	(dtoa@n+4)^0,f,c
  2898   002E16  1E3B               	comf	(dtoa@n+3)^0,f,c
  2899   002E18  1E3A               	comf	(dtoa@n+2)^0,f,c
  2900   002E1A  1E39               	comf	(dtoa@n+1)^0,f,c
  2901   002E1C  6C38               	negf	dtoa@n^0,c
  2902   002E1E  0E00               	movlw	0
  2903   002E20  2239               	addwfc	(dtoa@n+1)^0,f,c
  2904   002E22  223A               	addwfc	(dtoa@n+2)^0,f,c
  2905   002E24  223B               	addwfc	(dtoa@n+3)^0,f,c
  2906   002E26  223C               	addwfc	(dtoa@n+4)^0,f,c
  2907   002E28  223D               	addwfc	(dtoa@n+5)^0,f,c
  2908   002E2A  223E               	addwfc	(dtoa@n+6)^0,f,c
  2909   002E2C  223F               	addwfc	(dtoa@n+7)^0,f,c
  2910   002E2E                     l4921:
  2911                           
  2912                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 462:     p = (0 <
      +                           prec) ? prec : 1;
  2913   002E2E  0100               	movlb	0	; () banked
  2914   002E30  BFE7               	btfsc	(_prec+1)& (0+255),7,b
  2915   002E32  EF25  F017         	goto	u5340
  2916   002E36  51E7               	movf	(_prec+1)& (0+255),w,b
  2917   002E38  E106               	bnz	u5341
  2918   002E3A  05E6               	decf	_prec& (0+255),w,b
  2919   002E3C  B0D8               	btfsc	status,0,c
  2920   002E3E  EF23  F017         	goto	u5341
  2921   002E42  EF25  F017         	goto	u5340
  2922   002E46                     u5341:
  2923   002E46  EF2B  F017         	goto	l1250
  2924   002E4A                     u5340:
  2925   002E4A                     
  2926                           ; BSR set to: 0
  2927   002E4A  0E00               	movlw	0
  2928   002E4C  6E35               	movwf	(dtoa@p+1)^0,c
  2929   002E4E  0E01               	movlw	1
  2930   002E50  6E34               	movwf	dtoa@p^0,c
  2931   002E52  EF2F  F017         	goto	l1252
  2932   002E56                     l1250:
  2933                           
  2934                           ; BSR set to: 0
  2935   002E56  C0E6  F034         	movff	_prec,dtoa@p
  2936   002E5A  C0E7  F035         	movff	_prec+1,dtoa@p+1
  2937   002E5E                     l1252:
  2938                           
  2939                           ; BSR set to: 0
  2940                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 463:     w = widt
      +                          h;
  2941   002E5E  C0E4  F036         	movff	_width,dtoa@w
  2942   002E62  C0E5  F037         	movff	_width+1,dtoa@w+1
  2943   002E66                     
  2944                           ; BSR set to: 0
  2945                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 464:     if (s
  2946   002E66  5040               	movf	dtoa@s^0,w,c
  2947   002E68  B4D8               	btfsc	status,2,c
  2948   002E6A  EF39  F017         	goto	u5351
  2949   002E6E  EF3B  F017         	goto	u5350
  2950   002E72                     u5351:
  2951   002E72  EF52  F017         	goto	l1253
  2952   002E76                     u5350:
  2953   002E76                     
  2954                           ; BSR set to: 0
  2955                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 468:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 469:         --w;
  2956   002E76  0636               	decf	dtoa@w^0,f,c
  2957   002E78  A0D8               	btfss	status,0,c
  2958   002E7A  0637               	decf	(dtoa@w+1)^0,f,c
  2959   002E7C                     
  2960                           ; BSR set to: 0
  2961                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 470:   s = s ? '-
      +                          ' : '+';
  2962   002E7C  5040               	movf	dtoa@s^0,w,c
  2963   002E7E  A4D8               	btfss	status,2,c
  2964   002E80  EF44  F017         	goto	u5361
  2965   002E84  EF46  F017         	goto	u5360
  2966   002E88                     u5361:
  2967   002E88  EF4C  F017         	goto	l4933
  2968   002E8C                     u5360:
  2969   002E8C                     
  2970                           ; BSR set to: 0
  2971   002E8C  0E00               	movlw	0
  2972   002E8E  6E33               	movwf	(_dtoa$2672+1)^0,c
  2973   002E90  0E2B               	movlw	43
  2974   002E92  6E32               	movwf	_dtoa$2672^0,c
  2975   002E94  EF50  F017         	goto	l4935
  2976   002E98                     l4933:
  2977                           
  2978                           ; BSR set to: 0
  2979   002E98  0E00               	movlw	0
  2980   002E9A  6E33               	movwf	(_dtoa$2672+1)^0,c
  2981   002E9C  0E2D               	movlw	45
  2982   002E9E  6E32               	movwf	_dtoa$2672^0,c
  2983   002EA0                     l4935:
  2984                           
  2985                           ; BSR set to: 0
  2986   002EA0  C032  F040         	movff	_dtoa$2672,dtoa@s
  2987   002EA4                     l1253:
  2988                           
  2989                           ; BSR set to: 0
  2990                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 480:     i = size
      +                          of(dbuf) - 1;
  2991   002EA4  0E00               	movlw	0
  2992   002EA6  6E42               	movwf	(dtoa@i+1)^0,c
  2993   002EA8  0E1F               	movlw	31
  2994   002EAA  6E41               	movwf	dtoa@i^0,c
  2995   002EAC                     
  2996                           ; BSR set to: 0
  2997                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 481:     dbuf[i] 
      +                          = '\0';
  2998   002EAC  0E00               	movlw	0
  2999   002EAE  0101               	movlb	1	; () banked
  3000   002EB0  6FF5               	movwf	(_dbuf+31)& (0+255),b
  3001                           
  3002                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  3003   002EB2  EFD7  F017         	goto	l4949
  3004   002EB6                     l4939:
  3005                           
  3006                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 486:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 487:         --i;
  3007   002EB6  0641               	decf	dtoa@i^0,f,c
  3008   002EB8  A0D8               	btfss	status,0,c
  3009   002EBA  0642               	decf	(dtoa@i+1)^0,f,c
  3010   002EBC                     
  3011                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 488:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  3012   002EBC  0ED6               	movlw	low _dbuf
  3013   002EBE  2441               	addwf	dtoa@i^0,w,c
  3014   002EC0  6ED9               	movwf	fsr2l,c
  3015   002EC2  0E01               	movlw	high _dbuf
  3016   002EC4  2042               	addwfc	(dtoa@i+1)^0,w,c
  3017   002EC6  6EDA               	movwf	fsr2h,c
  3018   002EC8  C038  F005         	movff	dtoa@n,___aomod@dividend
  3019   002ECC  C039  F006         	movff	dtoa@n+1,___aomod@dividend+1
  3020   002ED0  C03A  F007         	movff	dtoa@n+2,___aomod@dividend+2
  3021   002ED4  C03B  F008         	movff	dtoa@n+3,___aomod@dividend+3
  3022   002ED8  C03C  F009         	movff	dtoa@n+4,___aomod@dividend+4
  3023   002EDC  C03D  F00A         	movff	dtoa@n+5,___aomod@dividend+5
  3024   002EE0  C03E  F00B         	movff	dtoa@n+6,___aomod@dividend+6
  3025   002EE4  C03F  F00C         	movff	dtoa@n+7,___aomod@dividend+7
  3026   002EE8  0E0A               	movlw	10
  3027   002EEA  6E0D               	movwf	___aomod@divisor^0,c
  3028   002EEC  0E00               	movlw	0
  3029   002EEE  6E0E               	movwf	(___aomod@divisor+1)^0,c
  3030   002EF0  0E00               	movlw	0
  3031   002EF2  6E0F               	movwf	(___aomod@divisor+2)^0,c
  3032   002EF4  0E00               	movlw	0
  3033   002EF6  6E10               	movwf	(___aomod@divisor+3)^0,c
  3034   002EF8  0E00               	movlw	0
  3035   002EFA  6E11               	movwf	(___aomod@divisor+4)^0,c
  3036   002EFC  0E00               	movlw	0
  3037   002EFE  6E12               	movwf	(___aomod@divisor+5)^0,c
  3038   002F00  0E00               	movlw	0
  3039   002F02  6E13               	movwf	(___aomod@divisor+6)^0,c
  3040   002F04  0E00               	movlw	0
  3041   002F06  6E14               	movwf	(___aomod@divisor+7)^0,c
  3042   002F08  EC78  F01A         	call	___aomod	;wreg free
  3043   002F0C  C005  F02A         	movff	?___aomod,??_dtoa
  3044   002F10  C006  F02B         	movff	?___aomod+1,??_dtoa+1
  3045   002F14  C007  F02C         	movff	?___aomod+2,??_dtoa+2
  3046   002F18  C008  F02D         	movff	?___aomod+3,??_dtoa+3
  3047   002F1C  C009  F02E         	movff	?___aomod+4,??_dtoa+4
  3048   002F20  C00A  F02F         	movff	?___aomod+5,??_dtoa+5
  3049   002F24  C00B  F030         	movff	?___aomod+6,??_dtoa+6
  3050   002F28  C00C  F031         	movff	?___aomod+7,??_dtoa+7
  3051   002F2C  C02A  F017         	movff	??_dtoa,abs@a
  3052   002F30  C02B  F018         	movff	??_dtoa+1,abs@a+1
  3053   002F34  EC55  F025         	call	_abs	;wreg free
  3054   002F38  5017               	movf	?_abs^0,w,c
  3055   002F3A  0F30               	addlw	48
  3056   002F3C  6EDF               	movwf	indf2,c
  3057   002F3E                     
  3058                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 489:         --p;
  3059   002F3E  0634               	decf	dtoa@p^0,f,c
  3060   002F40  A0D8               	btfss	status,0,c
  3061   002F42  0635               	decf	(dtoa@p+1)^0,f,c
  3062   002F44                     
  3063                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 490:         --w;
  3064   002F44  0636               	decf	dtoa@w^0,f,c
  3065   002F46  A0D8               	btfss	status,0,c
  3066   002F48  0637               	decf	(dtoa@w+1)^0,f,c
  3067   002F4A                     
  3068                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 491:         n = 
      +                          n / 10;
  3069   002F4A  C038  F005         	movff	dtoa@n,___aodiv@dividend
  3070   002F4E  C039  F006         	movff	dtoa@n+1,___aodiv@dividend+1
  3071   002F52  C03A  F007         	movff	dtoa@n+2,___aodiv@dividend+2
  3072   002F56  C03B  F008         	movff	dtoa@n+3,___aodiv@dividend+3
  3073   002F5A  C03C  F009         	movff	dtoa@n+4,___aodiv@dividend+4
  3074   002F5E  C03D  F00A         	movff	dtoa@n+5,___aodiv@dividend+5
  3075   002F62  C03E  F00B         	movff	dtoa@n+6,___aodiv@dividend+6
  3076   002F66  C03F  F00C         	movff	dtoa@n+7,___aodiv@dividend+7
  3077   002F6A  0E0A               	movlw	10
  3078   002F6C  6E0D               	movwf	___aodiv@divisor^0,c
  3079   002F6E  0E00               	movlw	0
  3080   002F70  6E0E               	movwf	(___aodiv@divisor+1)^0,c
  3081   002F72  0E00               	movlw	0
  3082   002F74  6E0F               	movwf	(___aodiv@divisor+2)^0,c
  3083   002F76  0E00               	movlw	0
  3084   002F78  6E10               	movwf	(___aodiv@divisor+3)^0,c
  3085   002F7A  0E00               	movlw	0
  3086   002F7C  6E11               	movwf	(___aodiv@divisor+4)^0,c
  3087   002F7E  0E00               	movlw	0
  3088   002F80  6E12               	movwf	(___aodiv@divisor+5)^0,c
  3089   002F82  0E00               	movlw	0
  3090   002F84  6E13               	movwf	(___aodiv@divisor+6)^0,c
  3091   002F86  0E00               	movlw	0
  3092   002F88  6E14               	movwf	(___aodiv@divisor+7)^0,c
  3093   002F8A  ECFE  F018         	call	___aodiv	;wreg free
  3094   002F8E  C005  F038         	movff	?___aodiv,dtoa@n
  3095   002F92  C006  F039         	movff	?___aodiv+1,dtoa@n+1
  3096   002F96  C007  F03A         	movff	?___aodiv+2,dtoa@n+2
  3097   002F9A  C008  F03B         	movff	?___aodiv+3,dtoa@n+3
  3098   002F9E  C009  F03C         	movff	?___aodiv+4,dtoa@n+4
  3099   002FA2  C00A  F03D         	movff	?___aodiv+5,dtoa@n+5
  3100   002FA6  C00B  F03E         	movff	?___aodiv+6,dtoa@n+6
  3101   002FAA  C00C  F03F         	movff	?___aodiv+7,dtoa@n+7
  3102   002FAE                     l4949:
  3103                           
  3104                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  3105   002FAE  BE42               	btfsc	(dtoa@i+1)^0,7,c
  3106   002FB0  EFE2  F017         	goto	u5371
  3107   002FB4  5042               	movf	(dtoa@i+1)^0,w,c
  3108   002FB6  E108               	bnz	u5370
  3109   002FB8  0441               	decf	dtoa@i^0,w,c
  3110   002FBA  A0D8               	btfss	status,0,c
  3111   002FBC  EFE2  F017         	goto	u5371
  3112   002FC0  EFE4  F017         	goto	u5370
  3113   002FC4                     u5371:
  3114   002FC4  EF00  F018         	goto	l4955
  3115   002FC8                     u5370:
  3116   002FC8  5038               	movf	dtoa@n^0,w,c
  3117   002FCA  1039               	iorwf	(dtoa@n+1)^0,w,c
  3118   002FCC  103A               	iorwf	(dtoa@n+2)^0,w,c
  3119   002FCE  103B               	iorwf	(dtoa@n+3)^0,w,c
  3120   002FD0  103C               	iorwf	(dtoa@n+4)^0,w,c
  3121   002FD2  103D               	iorwf	(dtoa@n+5)^0,w,c
  3122   002FD4  103E               	iorwf	(dtoa@n+6)^0,w,c
  3123   002FD6  103F               	iorwf	(dtoa@n+7)^0,w,c
  3124   002FD8  A4D8               	btfss	status,2,c
  3125   002FDA  EFF1  F017         	goto	u5381
  3126   002FDE  EFF3  F017         	goto	u5380
  3127   002FE2                     u5381:
  3128   002FE2  EF5B  F017         	goto	l4939
  3129   002FE6                     u5380:
  3130   002FE6  BE35               	btfsc	(dtoa@p+1)^0,7,c
  3131   002FE8  EF00  F018         	goto	u5390
  3132   002FEC  5035               	movf	(dtoa@p+1)^0,w,c
  3133   002FEE  E106               	bnz	u5391
  3134   002FF0  0434               	decf	dtoa@p^0,w,c
  3135   002FF2  B0D8               	btfsc	status,0,c
  3136   002FF4  EFFE  F017         	goto	u5391
  3137   002FF8  EF00  F018         	goto	u5390
  3138   002FFC                     u5391:
  3139   002FFC  EF5B  F017         	goto	l4939
  3140   003000                     u5390:
  3141   003000                     l4955:
  3142                           
  3143                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 495:     if (s !=
      +                           0) {
  3144   003000  5040               	movf	dtoa@s^0,w,c
  3145   003002  B4D8               	btfsc	status,2,c
  3146   003004  EF06  F018         	goto	u5401
  3147   003008  EF08  F018         	goto	u5400
  3148   00300C                     u5401:
  3149   00300C  EF13  F018         	goto	l4961
  3150   003010                     u5400:
  3151   003010                     
  3152                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 496:         --i;
  3153   003010  0641               	decf	dtoa@i^0,f,c
  3154   003012  A0D8               	btfss	status,0,c
  3155   003014  0642               	decf	(dtoa@i+1)^0,f,c
  3156   003016                     
  3157                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 497:         dbuf
      +                          [i] = s;
  3158   003016  0ED6               	movlw	low _dbuf
  3159   003018  2441               	addwf	dtoa@i^0,w,c
  3160   00301A  6ED9               	movwf	fsr2l,c
  3161   00301C  0E01               	movlw	high _dbuf
  3162   00301E  2042               	addwfc	(dtoa@i+1)^0,w,c
  3163   003020  6EDA               	movwf	fsr2h,c
  3164   003022  C040  FFDF         	movff	dtoa@s,indf2
  3165   003026                     l4961:
  3166                           
  3167                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 501:     return (
      +                          void) pad(fp, &dbuf[i], w);
  3168   003026  C020  F015         	movff	dtoa@fp,pad@fp
  3169   00302A  C021  F016         	movff	dtoa@fp+1,pad@fp+1
  3170   00302E  0ED6               	movlw	low _dbuf
  3171   003030  2441               	addwf	dtoa@i^0,w,c
  3172   003032  6E17               	movwf	pad@buf^0,c
  3173   003034  0E01               	movlw	high _dbuf
  3174   003036  2042               	addwfc	(dtoa@i+1)^0,w,c
  3175   003038  6E18               	movwf	(pad@buf+1)^0,c
  3176   00303A  C036  F019         	movff	dtoa@w,pad@p
  3177   00303E  C037  F01A         	movff	dtoa@w+1,pad@p+1
  3178   003042  EC31  F023         	call	_pad	;wreg free
  3179   003046  0012               	return		;funcret
  3180   003048                     __end_of_dtoa:
  3181                           	callstack 0
  3182                           
  3183 ;; *************** function _pad *****************
  3184 ;; Defined at:
  3185 ;;		line 133 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  3186 ;; Parameters:    Size  Location     Type
  3187 ;;  fp              2   20[COMRAM] PTR struct _IO_FILE
  3188 ;;		 -> sprintf@f(11), 
  3189 ;;  buf             2   22[COMRAM] PTR unsigned char 
  3190 ;;		 -> dbuf(32), 
  3191 ;;  p               2   24[COMRAM] int 
  3192 ;; Auto vars:     Size  Location     Type
  3193 ;;  w               2   29[COMRAM] int 
  3194 ;;  i               2   27[COMRAM] int 
  3195 ;; Return value:  Size  Location     Type
  3196 ;;                  1    wreg      void 
  3197 ;; Registers used:
  3198 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3199 ;; Tracked objects:
  3200 ;;		On entry : 0/0
  3201 ;;		On exit  : 0/0
  3202 ;;		Unchanged: 0/0
  3203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3204 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3205 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3206 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3207 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3208 ;;Total ram usage:       11 bytes
  3209 ;; Hardware stack levels used: 1
  3210 ;; Hardware stack levels required when called: 5
  3211 ;; This function calls:
  3212 ;;		_fputc
  3213 ;;		_fputs
  3214 ;; This function is called by:
  3215 ;;		_dtoa
  3216 ;; This function uses a non-reentrant model
  3217 ;;
  3218                           
  3219                           	psect	text7
  3220   004662                     __ptext7:
  3221                           	callstack 0
  3222   004662                     _pad:
  3223                           	callstack 20
  3224   004662                     
  3225                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 133: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\com
      +                          mon\doprnt.c: 134: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 135:     int i, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt
      +                          .c: 145:     w = (p < 0) ? 0 : p;
  3226   004662  BE1A               	btfsc	(pad@p+1)^0,7,c
  3227   004664  EF36  F023         	goto	u5281
  3228   004668  EF38  F023         	goto	u5280
  3229   00466C                     u5281:
  3230   00466C  EF3E  F023         	goto	l4899
  3231   004670                     u5280:
  3232   004670  C019  F01E         	movff	pad@p,pad@w
  3233   004674  C01A  F01F         	movff	pad@p+1,pad@w+1
  3234   004678  EF42  F023         	goto	l1241
  3235   00467C                     l4899:
  3236   00467C  0E00               	movlw	0
  3237   00467E  6E1F               	movwf	(pad@w+1)^0,c
  3238   004680  0E00               	movlw	0
  3239   004682  6E1E               	movwf	pad@w^0,c
  3240   004684                     l1241:
  3241                           
  3242                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 146:     i = 0;
  3243   004684  0E00               	movlw	0
  3244   004686  6E1D               	movwf	(pad@i+1)^0,c
  3245   004688  0E00               	movlw	0
  3246   00468A  6E1C               	movwf	pad@i^0,c
  3247                           
  3248                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  3249   00468C  EF54  F023         	goto	l4905
  3250   004690                     l4901:
  3251                           
  3252                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 148:         fput
      +                          c(' ', fp);
  3253   004690  0E00               	movlw	0
  3254   004692  6E06               	movwf	(fputc@c+1)^0,c
  3255   004694  0E20               	movlw	32
  3256   004696  6E05               	movwf	fputc@c^0,c
  3257   004698  C015  F007         	movff	pad@fp,fputc@fp
  3258   00469C  C016  F008         	movff	pad@fp+1,fputc@fp+1
  3259   0046A0  EC97  F021         	call	_fputc	;wreg free
  3260   0046A4                     
  3261                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 149:         ++i;
  3262   0046A4  4A1C               	infsnz	pad@i^0,f,c
  3263   0046A6  2A1D               	incf	(pad@i+1)^0,f,c
  3264   0046A8                     l4905:
  3265                           
  3266                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  3267   0046A8  501E               	movf	pad@w^0,w,c
  3268   0046AA  5C1C               	subwf	pad@i^0,w,c
  3269   0046AC  501D               	movf	(pad@i+1)^0,w,c
  3270   0046AE  0A80               	xorlw	128
  3271   0046B0  6E1B               	movwf	??_pad^0,c
  3272   0046B2  501F               	movf	(pad@w+1)^0,w,c
  3273   0046B4  0A80               	xorlw	128
  3274   0046B6  581B               	subwfb	??_pad^0,w,c
  3275   0046B8  A0D8               	btfss	status,0,c
  3276   0046BA  EF61  F023         	goto	u5291
  3277   0046BE  EF63  F023         	goto	u5290
  3278   0046C2                     u5291:
  3279   0046C2  EF48  F023         	goto	l4901
  3280   0046C6                     u5290:
  3281   0046C6                     
  3282                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 156:         fput
      +                          s((const char *)buf, fp);
  3283   0046C6  C017  F00E         	movff	pad@buf,fputs@s
  3284   0046CA  C018  F00F         	movff	pad@buf+1,fputs@s+1
  3285   0046CE  C015  F010         	movff	pad@fp,fputs@fp
  3286   0046D2  C016  F011         	movff	pad@fp+1,fputs@fp+1
  3287   0046D6  EC12  F025         	call	_fputs	;wreg free
  3288   0046DA  0012               	return		;funcret
  3289   0046DC                     __end_of_pad:
  3290                           	callstack 0
  3291                           
  3292 ;; *************** function _fputs *****************
  3293 ;; Defined at:
  3294 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputs.c"
  3295 ;; Parameters:    Size  Location     Type
  3296 ;;  s               2   13[COMRAM] PTR const unsigned char 
  3297 ;;		 -> dbuf(32), 
  3298 ;;  fp              2   15[COMRAM] PTR struct _IO_FILE
  3299 ;;		 -> sprintf@f(11), 
  3300 ;; Auto vars:     Size  Location     Type
  3301 ;;  i               2   18[COMRAM] int 
  3302 ;;  c               1   17[COMRAM] unsigned char 
  3303 ;; Return value:  Size  Location     Type
  3304 ;;                  2   13[COMRAM] int 
  3305 ;; Registers used:
  3306 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3307 ;; Tracked objects:
  3308 ;;		On entry : 0/0
  3309 ;;		On exit  : 0/0
  3310 ;;		Unchanged: 0/0
  3311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3312 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3313 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3315 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3316 ;;Total ram usage:        7 bytes
  3317 ;; Hardware stack levels used: 1
  3318 ;; Hardware stack levels required when called: 4
  3319 ;; This function calls:
  3320 ;;		_fputc
  3321 ;; This function is called by:
  3322 ;;		_pad
  3323 ;; This function uses a non-reentrant model
  3324 ;;
  3325                           
  3326                           	psect	text8
  3327   004A24                     __ptext8:
  3328                           	callstack 0
  3329   004A24                     _fputs:
  3330                           	callstack 20
  3331   004A24  0E00               	movlw	0
  3332   004A26  6E14               	movwf	(fputs@i+1)^0,c
  3333   004A28  0E00               	movlw	0
  3334   004A2A  6E13               	movwf	fputs@i^0,c
  3335   004A2C  EF23  F025         	goto	l4813
  3336   004A30                     l4809:
  3337   004A30  C012  F005         	movff	fputs@c,fputc@c
  3338   004A34  6A06               	clrf	(fputc@c+1)^0,c
  3339   004A36  C010  F007         	movff	fputs@fp,fputc@fp
  3340   004A3A  C011  F008         	movff	fputs@fp+1,fputc@fp+1
  3341   004A3E  EC97  F021         	call	_fputc	;wreg free
  3342   004A42  4A13               	infsnz	fputs@i^0,f,c
  3343   004A44  2A14               	incf	(fputs@i+1)^0,f,c
  3344   004A46                     l4813:
  3345   004A46  5013               	movf	fputs@i^0,w,c
  3346   004A48  240E               	addwf	fputs@s^0,w,c
  3347   004A4A  6ED9               	movwf	fsr2l,c
  3348   004A4C  5014               	movf	(fputs@i+1)^0,w,c
  3349   004A4E  200F               	addwfc	(fputs@s+1)^0,w,c
  3350   004A50  6EDA               	movwf	fsr2h,c
  3351   004A52  50DF               	movf	indf2,w,c
  3352   004A54  6E12               	movwf	fputs@c^0,c
  3353   004A56  5012               	movf	fputs@c^0,w,c
  3354   004A58  A4D8               	btfss	status,2,c
  3355   004A5A  EF31  F025         	goto	u5141
  3356   004A5E  EF33  F025         	goto	u5140
  3357   004A62                     u5141:
  3358   004A62  EF18  F025         	goto	l4809
  3359   004A66                     u5140:
  3360   004A66  0012               	return		;funcret
  3361   004A68                     __end_of_fputs:
  3362                           	callstack 0
  3363                           
  3364 ;; *************** function _fputc *****************
  3365 ;; Defined at:
  3366 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputc.c"
  3367 ;; Parameters:    Size  Location     Type
  3368 ;;  c               2    4[COMRAM] int 
  3369 ;;  fp              2    6[COMRAM] PTR struct _IO_FILE
  3370 ;;		 -> sprintf@f(11), 
  3371 ;; Auto vars:     Size  Location     Type
  3372 ;;		None
  3373 ;; Return value:  Size  Location     Type
  3374 ;;                  2    4[COMRAM] int 
  3375 ;; Registers used:
  3376 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3377 ;; Tracked objects:
  3378 ;;		On entry : 0/0
  3379 ;;		On exit  : 0/0
  3380 ;;		Unchanged: 0/0
  3381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3382 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3383 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3384 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3385 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3386 ;;Total ram usage:        9 bytes
  3387 ;; Hardware stack levels used: 1
  3388 ;; Hardware stack levels required when called: 3
  3389 ;; This function calls:
  3390 ;;		_putch
  3391 ;; This function is called by:
  3392 ;;		_pad
  3393 ;;		_vfpfcnvrt
  3394 ;;		_fputs
  3395 ;; This function uses a non-reentrant model
  3396 ;;
  3397                           
  3398                           	psect	text9
  3399   00432E                     __ptext9:
  3400                           	callstack 0
  3401   00432E                     _fputc:
  3402                           	callstack 23
  3403   00432E  5007               	movf	fputc@fp^0,w,c
  3404   004330  1008               	iorwf	(fputc@fp+1)^0,w,c
  3405   004332  B4D8               	btfsc	status,2,c
  3406   004334  EF9E  F021         	goto	u5101
  3407   004338  EFA0  F021         	goto	u5100
  3408   00433C                     u5101:
  3409   00433C  EFA9  F021         	goto	l4797
  3410   004340                     u5100:
  3411   004340  5007               	movf	fputc@fp^0,w,c
  3412   004342  1008               	iorwf	(fputc@fp+1)^0,w,c
  3413   004344  A4D8               	btfss	status,2,c
  3414   004346  EFA7  F021         	goto	u5111
  3415   00434A  EFA9  F021         	goto	u5110
  3416   00434E                     u5111:
  3417   00434E  EFAE  F021         	goto	l4799
  3418   004352                     u5110:
  3419   004352                     l4797:
  3420   004352  5005               	movf	fputc@c^0,w,c
  3421   004354  EC86  F026         	call	_putch
  3422   004358  EFFB  F021         	goto	l1296
  3423   00435C                     l4799:
  3424   00435C  EE20 F009          	lfsr	2,9
  3425   004360  5007               	movf	fputc@fp^0,w,c
  3426   004362  26D9               	addwf	fsr2l,f,c
  3427   004364  5008               	movf	(fputc@fp+1)^0,w,c
  3428   004366  22DA               	addwfc	fsr2h,f,c
  3429   004368  50DE               	movf	postinc2,w,c
  3430   00436A  10DE               	iorwf	postinc2,w,c
  3431   00436C  B4D8               	btfsc	status,2,c
  3432   00436E  EFBB  F021         	goto	u5121
  3433   004372  EFBD  F021         	goto	u5120
  3434   004376                     u5121:
  3435   004376  EFD8  F021         	goto	l4803
  3436   00437A                     u5120:
  3437   00437A  EE20 F009          	lfsr	2,9
  3438   00437E  5007               	movf	fputc@fp^0,w,c
  3439   004380  26D9               	addwf	fsr2l,f,c
  3440   004382  5008               	movf	(fputc@fp+1)^0,w,c
  3441   004384  22DA               	addwfc	fsr2h,f,c
  3442   004386  EE10 F003          	lfsr	1,3
  3443   00438A  5007               	movf	fputc@fp^0,w,c
  3444   00438C  26E1               	addwf	fsr1l,f,c
  3445   00438E  5008               	movf	(fputc@fp+1)^0,w,c
  3446   004390  22E2               	addwfc	fsr1h,f,c
  3447   004392  50DE               	movf	postinc2,w,c
  3448   004394  5CE6               	subwf	postinc1,w,c
  3449   004396  50E6               	movf	postinc1,w,c
  3450   004398  0A80               	xorlw	128
  3451   00439A  6E0D               	movwf	(??_fputc+4)^0,c
  3452   00439C  50DE               	movf	postinc2,w,c
  3453   00439E  0A80               	xorlw	128
  3454   0043A0  580D               	subwfb	(??_fputc+4)^0,w,c
  3455   0043A2  B0D8               	btfsc	status,0,c
  3456   0043A4  EFD6  F021         	goto	u5131
  3457   0043A8  EFD8  F021         	goto	u5130
  3458   0043AC                     u5131:
  3459   0043AC  EFFB  F021         	goto	l1296
  3460   0043B0                     u5130:
  3461   0043B0                     l4803:
  3462   0043B0  EE20 F003          	lfsr	2,3
  3463   0043B4  5007               	movf	fputc@fp^0,w,c
  3464   0043B6  26D9               	addwf	fsr2l,f,c
  3465   0043B8  5008               	movf	(fputc@fp+1)^0,w,c
  3466   0043BA  22DA               	addwfc	fsr2h,f,c
  3467   0043BC  CFDE F009          	movff	postinc2,??_fputc
  3468   0043C0  CFDD F00A          	movff	postdec2,??_fputc+1
  3469   0043C4  C007  FFD9         	movff	fputc@fp,fsr2l
  3470   0043C8  C008  FFDA         	movff	fputc@fp+1,fsr2h
  3471   0043CC  CFDE F00B          	movff	postinc2,??_fputc+2
  3472   0043D0  CFDD F00C          	movff	postdec2,??_fputc+3
  3473   0043D4  5009               	movf	??_fputc^0,w,c
  3474   0043D6  240B               	addwf	(??_fputc+2)^0,w,c
  3475   0043D8  6ED9               	movwf	fsr2l,c
  3476   0043DA  500A               	movf	(??_fputc+1)^0,w,c
  3477   0043DC  200C               	addwfc	(??_fputc+3)^0,w,c
  3478   0043DE  6EDA               	movwf	fsr2h,c
  3479   0043E0  C005  FFDF         	movff	fputc@c,indf2
  3480   0043E4  EE20 F003          	lfsr	2,3
  3481   0043E8  5007               	movf	fputc@fp^0,w,c
  3482   0043EA  26D9               	addwf	fsr2l,f,c
  3483   0043EC  5008               	movf	(fputc@fp+1)^0,w,c
  3484   0043EE  22DA               	addwfc	fsr2h,f,c
  3485   0043F0  2ADE               	incf	postinc2,f,c
  3486   0043F2  0E00               	movlw	0
  3487   0043F4  22DD               	addwfc	postdec2,f,c
  3488   0043F6                     l1296:
  3489   0043F6  0012               	return		;funcret
  3490   0043F8                     __end_of_fputc:
  3491                           	callstack 0
  3492                           
  3493 ;; *************** function _putch *****************
  3494 ;; Defined at:
  3495 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\putch.c"
  3496 ;; Parameters:    Size  Location     Type
  3497 ;;  c               1    wreg     unsigned char 
  3498 ;; Auto vars:     Size  Location     Type
  3499 ;;  c               1    0[COMRAM] unsigned char 
  3500 ;; Return value:  Size  Location     Type
  3501 ;;                  1    wreg      void 
  3502 ;; Registers used:
  3503 ;;		wreg
  3504 ;; Tracked objects:
  3505 ;;		On entry : 0/0
  3506 ;;		On exit  : 0/0
  3507 ;;		Unchanged: 0/0
  3508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3510 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3512 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3513 ;;Total ram usage:        0 bytes
  3514 ;; Hardware stack levels used: 1
  3515 ;; Hardware stack levels required when called: 2
  3516 ;; This function calls:
  3517 ;;		Nothing
  3518 ;; This function is called by:
  3519 ;;		_fputc
  3520 ;; This function uses a non-reentrant model
  3521 ;;
  3522                           
  3523                           	psect	text10
  3524   004D0C                     __ptext10:
  3525                           	callstack 0
  3526   004D0C                     _putch:
  3527                           	callstack 23
  3528   004D0C  0012               	return		;funcret
  3529   004D0E                     __end_of_putch:
  3530                           	callstack 0
  3531                           
  3532 ;; *************** function _abs *****************
  3533 ;; Defined at:
  3534 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\abs.c"
  3535 ;; Parameters:    Size  Location     Type
  3536 ;;  a               2   22[COMRAM] int 
  3537 ;; Auto vars:     Size  Location     Type
  3538 ;;		None
  3539 ;; Return value:  Size  Location     Type
  3540 ;;                  2   22[COMRAM] int 
  3541 ;; Registers used:
  3542 ;;		wreg, status,2, status,0
  3543 ;; Tracked objects:
  3544 ;;		On entry : 0/0
  3545 ;;		On exit  : 0/0
  3546 ;;		Unchanged: 0/0
  3547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3548 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3550 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3551 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3552 ;;Total ram usage:        4 bytes
  3553 ;; Hardware stack levels used: 1
  3554 ;; Hardware stack levels required when called: 2
  3555 ;; This function calls:
  3556 ;;		Nothing
  3557 ;; This function is called by:
  3558 ;;		_dtoa
  3559 ;; This function uses a non-reentrant model
  3560 ;;
  3561                           
  3562                           	psect	text11
  3563   004AAA                     __ptext11:
  3564                           	callstack 0
  3565   004AAA                     _abs:
  3566                           	callstack 23
  3567   004AAA  BE18               	btfsc	(abs@a+1)^0,7,c
  3568   004AAC  EF62  F025         	goto	u5300
  3569   004AB0  5018               	movf	(abs@a+1)^0,w,c
  3570   004AB2  E106               	bnz	u5301
  3571   004AB4  0417               	decf	abs@a^0,w,c
  3572   004AB6  B0D8               	btfsc	status,0,c
  3573   004AB8  EF60  F025         	goto	u5301
  3574   004ABC  EF62  F025         	goto	u5300
  3575   004AC0                     u5301:
  3576   004AC0  EF70  F025         	goto	l1281
  3577   004AC4                     u5300:
  3578   004AC4  C017  F019         	movff	abs@a,??_abs
  3579   004AC8  C018  F01A         	movff	abs@a+1,??_abs+1
  3580   004ACC  1E19               	comf	??_abs^0,f,c
  3581   004ACE  1E1A               	comf	(??_abs+1)^0,f,c
  3582   004AD0  4A19               	infsnz	??_abs^0,f,c
  3583   004AD2  2A1A               	incf	(??_abs+1)^0,f,c
  3584   004AD4  C019  F017         	movff	??_abs,?_abs
  3585   004AD8  C01A  F018         	movff	??_abs+1,?_abs+1
  3586   004ADC  EF74  F025         	goto	l1284
  3587   004AE0                     l1281:
  3588   004AE0  C017  F017         	movff	abs@a,?_abs
  3589   004AE4  C018  F018         	movff	abs@a+1,?_abs+1
  3590   004AE8                     l1284:
  3591   004AE8  0012               	return		;funcret
  3592   004AEA                     __end_of_abs:
  3593                           	callstack 0
  3594                           
  3595 ;; *************** function ___aomod *****************
  3596 ;; Defined at:
  3597 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aomod.c"
  3598 ;; Parameters:    Size  Location     Type
  3599 ;;  dividend        8    4[COMRAM] long long 
  3600 ;;  divisor         8   12[COMRAM] long long 
  3601 ;; Auto vars:     Size  Location     Type
  3602 ;;  sign            1   21[COMRAM] unsigned char 
  3603 ;;  counter         1   20[COMRAM] unsigned char 
  3604 ;; Return value:  Size  Location     Type
  3605 ;;                  8    4[COMRAM] long long 
  3606 ;; Registers used:
  3607 ;;		wreg, status,2, status,0
  3608 ;; Tracked objects:
  3609 ;;		On entry : 0/0
  3610 ;;		On exit  : 0/0
  3611 ;;		Unchanged: 0/0
  3612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3613 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3614 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3616 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3617 ;;Total ram usage:       18 bytes
  3618 ;; Hardware stack levels used: 1
  3619 ;; Hardware stack levels required when called: 2
  3620 ;; This function calls:
  3621 ;;		Nothing
  3622 ;; This function is called by:
  3623 ;;		_dtoa
  3624 ;; This function uses a non-reentrant model
  3625 ;;
  3626                           
  3627                           	psect	text12
  3628   0034F0                     __ptext12:
  3629                           	callstack 0
  3630   0034F0                     ___aomod:
  3631                           	callstack 23
  3632   0034F0  0E00               	movlw	0
  3633   0034F2  6E16               	movwf	___aomod@sign^0,c
  3634   0034F4  BE0C               	btfsc	(___aomod@dividend+7)^0,7,c
  3635   0034F6  EF81  F01A         	goto	u5220
  3636   0034FA  EF7F  F01A         	goto	u5221
  3637   0034FE                     u5221:
  3638   0034FE  EF93  F01A         	goto	l4867
  3639   003502                     u5220:
  3640   003502  1E0C               	comf	(___aomod@dividend+7)^0,f,c
  3641   003504  1E0B               	comf	(___aomod@dividend+6)^0,f,c
  3642   003506  1E0A               	comf	(___aomod@dividend+5)^0,f,c
  3643   003508  1E09               	comf	(___aomod@dividend+4)^0,f,c
  3644   00350A  1E08               	comf	(___aomod@dividend+3)^0,f,c
  3645   00350C  1E07               	comf	(___aomod@dividend+2)^0,f,c
  3646   00350E  1E06               	comf	(___aomod@dividend+1)^0,f,c
  3647   003510  6C05               	negf	___aomod@dividend^0,c
  3648   003512  0E00               	movlw	0
  3649   003514  2206               	addwfc	(___aomod@dividend+1)^0,f,c
  3650   003516  2207               	addwfc	(___aomod@dividend+2)^0,f,c
  3651   003518  2208               	addwfc	(___aomod@dividend+3)^0,f,c
  3652   00351A  2209               	addwfc	(___aomod@dividend+4)^0,f,c
  3653   00351C  220A               	addwfc	(___aomod@dividend+5)^0,f,c
  3654   00351E  220B               	addwfc	(___aomod@dividend+6)^0,f,c
  3655   003520  220C               	addwfc	(___aomod@dividend+7)^0,f,c
  3656   003522  0E01               	movlw	1
  3657   003524  6E16               	movwf	___aomod@sign^0,c
  3658   003526                     l4867:
  3659   003526  BE14               	btfsc	(___aomod@divisor+7)^0,7,c
  3660   003528  EF9A  F01A         	goto	u5230
  3661   00352C  EF98  F01A         	goto	u5231
  3662   003530                     u5231:
  3663   003530  EFAA  F01A         	goto	l4871
  3664   003534                     u5230:
  3665   003534  1E14               	comf	(___aomod@divisor+7)^0,f,c
  3666   003536  1E13               	comf	(___aomod@divisor+6)^0,f,c
  3667   003538  1E12               	comf	(___aomod@divisor+5)^0,f,c
  3668   00353A  1E11               	comf	(___aomod@divisor+4)^0,f,c
  3669   00353C  1E10               	comf	(___aomod@divisor+3)^0,f,c
  3670   00353E  1E0F               	comf	(___aomod@divisor+2)^0,f,c
  3671   003540  1E0E               	comf	(___aomod@divisor+1)^0,f,c
  3672   003542  6C0D               	negf	___aomod@divisor^0,c
  3673   003544  0E00               	movlw	0
  3674   003546  220E               	addwfc	(___aomod@divisor+1)^0,f,c
  3675   003548  220F               	addwfc	(___aomod@divisor+2)^0,f,c
  3676   00354A  2210               	addwfc	(___aomod@divisor+3)^0,f,c
  3677   00354C  2211               	addwfc	(___aomod@divisor+4)^0,f,c
  3678   00354E  2212               	addwfc	(___aomod@divisor+5)^0,f,c
  3679   003550  2213               	addwfc	(___aomod@divisor+6)^0,f,c
  3680   003552  2214               	addwfc	(___aomod@divisor+7)^0,f,c
  3681   003554                     l4871:
  3682   003554  500D               	movf	___aomod@divisor^0,w,c
  3683   003556  100E               	iorwf	(___aomod@divisor+1)^0,w,c
  3684   003558  100F               	iorwf	(___aomod@divisor+2)^0,w,c
  3685   00355A  1010               	iorwf	(___aomod@divisor+3)^0,w,c
  3686   00355C  1011               	iorwf	(___aomod@divisor+4)^0,w,c
  3687   00355E  1012               	iorwf	(___aomod@divisor+5)^0,w,c
  3688   003560  1013               	iorwf	(___aomod@divisor+6)^0,w,c
  3689   003562  1014               	iorwf	(___aomod@divisor+7)^0,w,c
  3690   003564  B4D8               	btfsc	status,2,c
  3691   003566  EFB7  F01A         	goto	u5241
  3692   00356A  EFB9  F01A         	goto	u5240
  3693   00356E                     u5241:
  3694   00356E  EF01  F01B         	goto	l4887
  3695   003572                     u5240:
  3696   003572  0E01               	movlw	1
  3697   003574  6E15               	movwf	___aomod@counter^0,c
  3698   003576  EFC7  F01A         	goto	l4877
  3699   00357A                     l4875:
  3700   00357A  90D8               	bcf	status,0,c
  3701   00357C  360D               	rlcf	___aomod@divisor^0,f,c
  3702   00357E  360E               	rlcf	(___aomod@divisor+1)^0,f,c
  3703   003580  360F               	rlcf	(___aomod@divisor+2)^0,f,c
  3704   003582  3610               	rlcf	(___aomod@divisor+3)^0,f,c
  3705   003584  3611               	rlcf	(___aomod@divisor+4)^0,f,c
  3706   003586  3612               	rlcf	(___aomod@divisor+5)^0,f,c
  3707   003588  3613               	rlcf	(___aomod@divisor+6)^0,f,c
  3708   00358A  3614               	rlcf	(___aomod@divisor+7)^0,f,c
  3709   00358C  2A15               	incf	___aomod@counter^0,f,c
  3710   00358E                     l4877:
  3711   00358E  AE14               	btfss	(___aomod@divisor+7)^0,7,c
  3712   003590  EFCC  F01A         	goto	u5251
  3713   003594  EFCE  F01A         	goto	u5250
  3714   003598                     u5251:
  3715   003598  EFBD  F01A         	goto	l4875
  3716   00359C                     u5250:
  3717   00359C                     l4879:
  3718   00359C  500D               	movf	___aomod@divisor^0,w,c
  3719   00359E  5C05               	subwf	___aomod@dividend^0,w,c
  3720   0035A0  500E               	movf	(___aomod@divisor+1)^0,w,c
  3721   0035A2  5806               	subwfb	(___aomod@dividend+1)^0,w,c
  3722   0035A4  500F               	movf	(___aomod@divisor+2)^0,w,c
  3723   0035A6  5807               	subwfb	(___aomod@dividend+2)^0,w,c
  3724   0035A8  5010               	movf	(___aomod@divisor+3)^0,w,c
  3725   0035AA  5808               	subwfb	(___aomod@dividend+3)^0,w,c
  3726   0035AC  5011               	movf	(___aomod@divisor+4)^0,w,c
  3727   0035AE  5809               	subwfb	(___aomod@dividend+4)^0,w,c
  3728   0035B0  5012               	movf	(___aomod@divisor+5)^0,w,c
  3729   0035B2  580A               	subwfb	(___aomod@dividend+5)^0,w,c
  3730   0035B4  5013               	movf	(___aomod@divisor+6)^0,w,c
  3731   0035B6  580B               	subwfb	(___aomod@dividend+6)^0,w,c
  3732   0035B8  5014               	movf	(___aomod@divisor+7)^0,w,c
  3733   0035BA  580C               	subwfb	(___aomod@dividend+7)^0,w,c
  3734   0035BC  A0D8               	btfss	status,0,c
  3735   0035BE  EFE3  F01A         	goto	u5261
  3736   0035C2  EFE5  F01A         	goto	u5260
  3737   0035C6                     u5261:
  3738   0035C6  EFF5  F01A         	goto	l4883
  3739   0035CA                     u5260:
  3740   0035CA  500D               	movf	___aomod@divisor^0,w,c
  3741   0035CC  5E05               	subwf	___aomod@dividend^0,f,c
  3742   0035CE  500E               	movf	(___aomod@divisor+1)^0,w,c
  3743   0035D0  5A06               	subwfb	(___aomod@dividend+1)^0,f,c
  3744   0035D2  500F               	movf	(___aomod@divisor+2)^0,w,c
  3745   0035D4  5A07               	subwfb	(___aomod@dividend+2)^0,f,c
  3746   0035D6  5010               	movf	(___aomod@divisor+3)^0,w,c
  3747   0035D8  5A08               	subwfb	(___aomod@dividend+3)^0,f,c
  3748   0035DA  5011               	movf	(___aomod@divisor+4)^0,w,c
  3749   0035DC  5A09               	subwfb	(___aomod@dividend+4)^0,f,c
  3750   0035DE  5012               	movf	(___aomod@divisor+5)^0,w,c
  3751   0035E0  5A0A               	subwfb	(___aomod@dividend+5)^0,f,c
  3752   0035E2  5013               	movf	(___aomod@divisor+6)^0,w,c
  3753   0035E4  5A0B               	subwfb	(___aomod@dividend+6)^0,f,c
  3754   0035E6  5014               	movf	(___aomod@divisor+7)^0,w,c
  3755   0035E8  5A0C               	subwfb	(___aomod@dividend+7)^0,f,c
  3756   0035EA                     l4883:
  3757   0035EA  90D8               	bcf	status,0,c
  3758   0035EC  3214               	rrcf	(___aomod@divisor+7)^0,f,c
  3759   0035EE  3213               	rrcf	(___aomod@divisor+6)^0,f,c
  3760   0035F0  3212               	rrcf	(___aomod@divisor+5)^0,f,c
  3761   0035F2  3211               	rrcf	(___aomod@divisor+4)^0,f,c
  3762   0035F4  3210               	rrcf	(___aomod@divisor+3)^0,f,c
  3763   0035F6  320F               	rrcf	(___aomod@divisor+2)^0,f,c
  3764   0035F8  320E               	rrcf	(___aomod@divisor+1)^0,f,c
  3765   0035FA  320D               	rrcf	___aomod@divisor^0,f,c
  3766   0035FC  2E15               	decfsz	___aomod@counter^0,f,c
  3767   0035FE  EFCE  F01A         	goto	l4879
  3768   003602                     l4887:
  3769   003602  5016               	movf	___aomod@sign^0,w,c
  3770   003604  B4D8               	btfsc	status,2,c
  3771   003606  EF07  F01B         	goto	u5271
  3772   00360A  EF09  F01B         	goto	u5270
  3773   00360E                     u5271:
  3774   00360E  EF19  F01B         	goto	l4891
  3775   003612                     u5270:
  3776   003612  1E0C               	comf	(___aomod@dividend+7)^0,f,c
  3777   003614  1E0B               	comf	(___aomod@dividend+6)^0,f,c
  3778   003616  1E0A               	comf	(___aomod@dividend+5)^0,f,c
  3779   003618  1E09               	comf	(___aomod@dividend+4)^0,f,c
  3780   00361A  1E08               	comf	(___aomod@dividend+3)^0,f,c
  3781   00361C  1E07               	comf	(___aomod@dividend+2)^0,f,c
  3782   00361E  1E06               	comf	(___aomod@dividend+1)^0,f,c
  3783   003620  6C05               	negf	___aomod@dividend^0,c
  3784   003622  0E00               	movlw	0
  3785   003624  2206               	addwfc	(___aomod@dividend+1)^0,f,c
  3786   003626  2207               	addwfc	(___aomod@dividend+2)^0,f,c
  3787   003628  2208               	addwfc	(___aomod@dividend+3)^0,f,c
  3788   00362A  2209               	addwfc	(___aomod@dividend+4)^0,f,c
  3789   00362C  220A               	addwfc	(___aomod@dividend+5)^0,f,c
  3790   00362E  220B               	addwfc	(___aomod@dividend+6)^0,f,c
  3791   003630  220C               	addwfc	(___aomod@dividend+7)^0,f,c
  3792   003632                     l4891:
  3793   003632  C005  F005         	movff	___aomod@dividend,?___aomod
  3794   003636  C006  F006         	movff	___aomod@dividend+1,?___aomod+1
  3795   00363A  C007  F007         	movff	___aomod@dividend+2,?___aomod+2
  3796   00363E  C008  F008         	movff	___aomod@dividend+3,?___aomod+3
  3797   003642  C009  F009         	movff	___aomod@dividend+4,?___aomod+4
  3798   003646  C00A  F00A         	movff	___aomod@dividend+5,?___aomod+5
  3799   00364A  C00B  F00B         	movff	___aomod@dividend+6,?___aomod+6
  3800   00364E  C00C  F00C         	movff	___aomod@dividend+7,?___aomod+7
  3801   003652  0012               	return		;funcret
  3802   003654                     __end_of___aomod:
  3803                           	callstack 0
  3804                           
  3805 ;; *************** function ___aodiv *****************
  3806 ;; Defined at:
  3807 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aodiv.c"
  3808 ;; Parameters:    Size  Location     Type
  3809 ;;  dividend        8    4[COMRAM] long long 
  3810 ;;  divisor         8   12[COMRAM] long long 
  3811 ;; Auto vars:     Size  Location     Type
  3812 ;;  quotient        8   22[COMRAM] long long 
  3813 ;;  sign            1   21[COMRAM] unsigned char 
  3814 ;;  counter         1   20[COMRAM] unsigned char 
  3815 ;; Return value:  Size  Location     Type
  3816 ;;                  8    4[COMRAM] long long 
  3817 ;; Registers used:
  3818 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3819 ;; Tracked objects:
  3820 ;;		On entry : 0/0
  3821 ;;		On exit  : 0/0
  3822 ;;		Unchanged: 0/0
  3823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3824 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3825 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3827 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3828 ;;Total ram usage:       26 bytes
  3829 ;; Hardware stack levels used: 1
  3830 ;; Hardware stack levels required when called: 2
  3831 ;; This function calls:
  3832 ;;		Nothing
  3833 ;; This function is called by:
  3834 ;;		_dtoa
  3835 ;; This function uses a non-reentrant model
  3836 ;;
  3837                           
  3838                           	psect	text13
  3839   0031FC                     __ptext13:
  3840                           	callstack 0
  3841   0031FC                     ___aodiv:
  3842                           	callstack 23
  3843   0031FC  0E00               	movlw	0
  3844   0031FE  6E16               	movwf	___aodiv@sign^0,c
  3845   003200  BE14               	btfsc	(___aodiv@divisor+7)^0,7,c
  3846   003202  EF07  F019         	goto	u5150
  3847   003206  EF05  F019         	goto	u5151
  3848   00320A                     u5151:
  3849   00320A  EF19  F019         	goto	l4823
  3850   00320E                     u5150:
  3851   00320E  1E14               	comf	(___aodiv@divisor+7)^0,f,c
  3852   003210  1E13               	comf	(___aodiv@divisor+6)^0,f,c
  3853   003212  1E12               	comf	(___aodiv@divisor+5)^0,f,c
  3854   003214  1E11               	comf	(___aodiv@divisor+4)^0,f,c
  3855   003216  1E10               	comf	(___aodiv@divisor+3)^0,f,c
  3856   003218  1E0F               	comf	(___aodiv@divisor+2)^0,f,c
  3857   00321A  1E0E               	comf	(___aodiv@divisor+1)^0,f,c
  3858   00321C  6C0D               	negf	___aodiv@divisor^0,c
  3859   00321E  0E00               	movlw	0
  3860   003220  220E               	addwfc	(___aodiv@divisor+1)^0,f,c
  3861   003222  220F               	addwfc	(___aodiv@divisor+2)^0,f,c
  3862   003224  2210               	addwfc	(___aodiv@divisor+3)^0,f,c
  3863   003226  2211               	addwfc	(___aodiv@divisor+4)^0,f,c
  3864   003228  2212               	addwfc	(___aodiv@divisor+5)^0,f,c
  3865   00322A  2213               	addwfc	(___aodiv@divisor+6)^0,f,c
  3866   00322C  2214               	addwfc	(___aodiv@divisor+7)^0,f,c
  3867   00322E  0E01               	movlw	1
  3868   003230  6E16               	movwf	___aodiv@sign^0,c
  3869   003232                     l4823:
  3870   003232  BE0C               	btfsc	(___aodiv@dividend+7)^0,7,c
  3871   003234  EF20  F019         	goto	u5160
  3872   003238  EF1E  F019         	goto	u5161
  3873   00323C                     u5161:
  3874   00323C  EF32  F019         	goto	l4829
  3875   003240                     u5160:
  3876   003240  1E0C               	comf	(___aodiv@dividend+7)^0,f,c
  3877   003242  1E0B               	comf	(___aodiv@dividend+6)^0,f,c
  3878   003244  1E0A               	comf	(___aodiv@dividend+5)^0,f,c
  3879   003246  1E09               	comf	(___aodiv@dividend+4)^0,f,c
  3880   003248  1E08               	comf	(___aodiv@dividend+3)^0,f,c
  3881   00324A  1E07               	comf	(___aodiv@dividend+2)^0,f,c
  3882   00324C  1E06               	comf	(___aodiv@dividend+1)^0,f,c
  3883   00324E  6C05               	negf	___aodiv@dividend^0,c
  3884   003250  0E00               	movlw	0
  3885   003252  2206               	addwfc	(___aodiv@dividend+1)^0,f,c
  3886   003254  2207               	addwfc	(___aodiv@dividend+2)^0,f,c
  3887   003256  2208               	addwfc	(___aodiv@dividend+3)^0,f,c
  3888   003258  2209               	addwfc	(___aodiv@dividend+4)^0,f,c
  3889   00325A  220A               	addwfc	(___aodiv@dividend+5)^0,f,c
  3890   00325C  220B               	addwfc	(___aodiv@dividend+6)^0,f,c
  3891   00325E  220C               	addwfc	(___aodiv@dividend+7)^0,f,c
  3892   003260  0E01               	movlw	1
  3893   003262  1A16               	xorwf	___aodiv@sign^0,f,c
  3894   003264                     l4829:
  3895   003264  EE20  F017         	lfsr	2,___aodiv@quotient
  3896   003268  0E07               	movlw	7
  3897   00326A                     u5171:
  3898   00326A  6ADE               	clrf	postinc2,c
  3899   00326C  06E8               	decf	wreg,f,c
  3900   00326E  E2FD               	bc	u5171
  3901   003270  500D               	movf	___aodiv@divisor^0,w,c
  3902   003272  100E               	iorwf	(___aodiv@divisor+1)^0,w,c
  3903   003274  100F               	iorwf	(___aodiv@divisor+2)^0,w,c
  3904   003276  1010               	iorwf	(___aodiv@divisor+3)^0,w,c
  3905   003278  1011               	iorwf	(___aodiv@divisor+4)^0,w,c
  3906   00327A  1012               	iorwf	(___aodiv@divisor+5)^0,w,c
  3907   00327C  1013               	iorwf	(___aodiv@divisor+6)^0,w,c
  3908   00327E  1014               	iorwf	(___aodiv@divisor+7)^0,w,c
  3909   003280  B4D8               	btfsc	status,2,c
  3910   003282  EF45  F019         	goto	u5181
  3911   003286  EF47  F019         	goto	u5180
  3912   00328A                     u5181:
  3913   00328A  EF99  F019         	goto	l4851
  3914   00328E                     u5180:
  3915   00328E  0E01               	movlw	1
  3916   003290  6E15               	movwf	___aodiv@counter^0,c
  3917   003292  EF55  F019         	goto	l4837
  3918   003296                     l4835:
  3919   003296  90D8               	bcf	status,0,c
  3920   003298  360D               	rlcf	___aodiv@divisor^0,f,c
  3921   00329A  360E               	rlcf	(___aodiv@divisor+1)^0,f,c
  3922   00329C  360F               	rlcf	(___aodiv@divisor+2)^0,f,c
  3923   00329E  3610               	rlcf	(___aodiv@divisor+3)^0,f,c
  3924   0032A0  3611               	rlcf	(___aodiv@divisor+4)^0,f,c
  3925   0032A2  3612               	rlcf	(___aodiv@divisor+5)^0,f,c
  3926   0032A4  3613               	rlcf	(___aodiv@divisor+6)^0,f,c
  3927   0032A6  3614               	rlcf	(___aodiv@divisor+7)^0,f,c
  3928   0032A8  2A15               	incf	___aodiv@counter^0,f,c
  3929   0032AA                     l4837:
  3930   0032AA  AE14               	btfss	(___aodiv@divisor+7)^0,7,c
  3931   0032AC  EF5A  F019         	goto	u5191
  3932   0032B0  EF5C  F019         	goto	u5190
  3933   0032B4                     u5191:
  3934   0032B4  EF4B  F019         	goto	l4835
  3935   0032B8                     u5190:
  3936   0032B8                     l4839:
  3937   0032B8  90D8               	bcf	status,0,c
  3938   0032BA  3617               	rlcf	___aodiv@quotient^0,f,c
  3939   0032BC  3618               	rlcf	(___aodiv@quotient+1)^0,f,c
  3940   0032BE  3619               	rlcf	(___aodiv@quotient+2)^0,f,c
  3941   0032C0  361A               	rlcf	(___aodiv@quotient+3)^0,f,c
  3942   0032C2  361B               	rlcf	(___aodiv@quotient+4)^0,f,c
  3943   0032C4  361C               	rlcf	(___aodiv@quotient+5)^0,f,c
  3944   0032C6  361D               	rlcf	(___aodiv@quotient+6)^0,f,c
  3945   0032C8  361E               	rlcf	(___aodiv@quotient+7)^0,f,c
  3946   0032CA  500D               	movf	___aodiv@divisor^0,w,c
  3947   0032CC  5C05               	subwf	___aodiv@dividend^0,w,c
  3948   0032CE  500E               	movf	(___aodiv@divisor+1)^0,w,c
  3949   0032D0  5806               	subwfb	(___aodiv@dividend+1)^0,w,c
  3950   0032D2  500F               	movf	(___aodiv@divisor+2)^0,w,c
  3951   0032D4  5807               	subwfb	(___aodiv@dividend+2)^0,w,c
  3952   0032D6  5010               	movf	(___aodiv@divisor+3)^0,w,c
  3953   0032D8  5808               	subwfb	(___aodiv@dividend+3)^0,w,c
  3954   0032DA  5011               	movf	(___aodiv@divisor+4)^0,w,c
  3955   0032DC  5809               	subwfb	(___aodiv@dividend+4)^0,w,c
  3956   0032DE  5012               	movf	(___aodiv@divisor+5)^0,w,c
  3957   0032E0  580A               	subwfb	(___aodiv@dividend+5)^0,w,c
  3958   0032E2  5013               	movf	(___aodiv@divisor+6)^0,w,c
  3959   0032E4  580B               	subwfb	(___aodiv@dividend+6)^0,w,c
  3960   0032E6  5014               	movf	(___aodiv@divisor+7)^0,w,c
  3961   0032E8  580C               	subwfb	(___aodiv@dividend+7)^0,w,c
  3962   0032EA  A0D8               	btfss	status,0,c
  3963   0032EC  EF7A  F019         	goto	u5201
  3964   0032F0  EF7C  F019         	goto	u5200
  3965   0032F4                     u5201:
  3966   0032F4  EF8D  F019         	goto	l4847
  3967   0032F8                     u5200:
  3968   0032F8  500D               	movf	___aodiv@divisor^0,w,c
  3969   0032FA  5E05               	subwf	___aodiv@dividend^0,f,c
  3970   0032FC  500E               	movf	(___aodiv@divisor+1)^0,w,c
  3971   0032FE  5A06               	subwfb	(___aodiv@dividend+1)^0,f,c
  3972   003300  500F               	movf	(___aodiv@divisor+2)^0,w,c
  3973   003302  5A07               	subwfb	(___aodiv@dividend+2)^0,f,c
  3974   003304  5010               	movf	(___aodiv@divisor+3)^0,w,c
  3975   003306  5A08               	subwfb	(___aodiv@dividend+3)^0,f,c
  3976   003308  5011               	movf	(___aodiv@divisor+4)^0,w,c
  3977   00330A  5A09               	subwfb	(___aodiv@dividend+4)^0,f,c
  3978   00330C  5012               	movf	(___aodiv@divisor+5)^0,w,c
  3979   00330E  5A0A               	subwfb	(___aodiv@dividend+5)^0,f,c
  3980   003310  5013               	movf	(___aodiv@divisor+6)^0,w,c
  3981   003312  5A0B               	subwfb	(___aodiv@dividend+6)^0,f,c
  3982   003314  5014               	movf	(___aodiv@divisor+7)^0,w,c
  3983   003316  5A0C               	subwfb	(___aodiv@dividend+7)^0,f,c
  3984   003318  8017               	bsf	___aodiv@quotient^0,0,c
  3985   00331A                     l4847:
  3986   00331A  90D8               	bcf	status,0,c
  3987   00331C  3214               	rrcf	(___aodiv@divisor+7)^0,f,c
  3988   00331E  3213               	rrcf	(___aodiv@divisor+6)^0,f,c
  3989   003320  3212               	rrcf	(___aodiv@divisor+5)^0,f,c
  3990   003322  3211               	rrcf	(___aodiv@divisor+4)^0,f,c
  3991   003324  3210               	rrcf	(___aodiv@divisor+3)^0,f,c
  3992   003326  320F               	rrcf	(___aodiv@divisor+2)^0,f,c
  3993   003328  320E               	rrcf	(___aodiv@divisor+1)^0,f,c
  3994   00332A  320D               	rrcf	___aodiv@divisor^0,f,c
  3995   00332C  2E15               	decfsz	___aodiv@counter^0,f,c
  3996   00332E  EF5C  F019         	goto	l4839
  3997   003332                     l4851:
  3998   003332  5016               	movf	___aodiv@sign^0,w,c
  3999   003334  B4D8               	btfsc	status,2,c
  4000   003336  EF9F  F019         	goto	u5211
  4001   00333A  EFA1  F019         	goto	u5210
  4002   00333E                     u5211:
  4003   00333E  EFB1  F019         	goto	l4855
  4004   003342                     u5210:
  4005   003342  1E1E               	comf	(___aodiv@quotient+7)^0,f,c
  4006   003344  1E1D               	comf	(___aodiv@quotient+6)^0,f,c
  4007   003346  1E1C               	comf	(___aodiv@quotient+5)^0,f,c
  4008   003348  1E1B               	comf	(___aodiv@quotient+4)^0,f,c
  4009   00334A  1E1A               	comf	(___aodiv@quotient+3)^0,f,c
  4010   00334C  1E19               	comf	(___aodiv@quotient+2)^0,f,c
  4011   00334E  1E18               	comf	(___aodiv@quotient+1)^0,f,c
  4012   003350  6C17               	negf	___aodiv@quotient^0,c
  4013   003352  0E00               	movlw	0
  4014   003354  2218               	addwfc	(___aodiv@quotient+1)^0,f,c
  4015   003356  2219               	addwfc	(___aodiv@quotient+2)^0,f,c
  4016   003358  221A               	addwfc	(___aodiv@quotient+3)^0,f,c
  4017   00335A  221B               	addwfc	(___aodiv@quotient+4)^0,f,c
  4018   00335C  221C               	addwfc	(___aodiv@quotient+5)^0,f,c
  4019   00335E  221D               	addwfc	(___aodiv@quotient+6)^0,f,c
  4020   003360  221E               	addwfc	(___aodiv@quotient+7)^0,f,c
  4021   003362                     l4855:
  4022   003362  C017  F005         	movff	___aodiv@quotient,?___aodiv
  4023   003366  C018  F006         	movff	___aodiv@quotient+1,?___aodiv+1
  4024   00336A  C019  F007         	movff	___aodiv@quotient+2,?___aodiv+2
  4025   00336E  C01A  F008         	movff	___aodiv@quotient+3,?___aodiv+3
  4026   003372  C01B  F009         	movff	___aodiv@quotient+4,?___aodiv+4
  4027   003376  C01C  F00A         	movff	___aodiv@quotient+5,?___aodiv+5
  4028   00337A  C01D  F00B         	movff	___aodiv@quotient+6,?___aodiv+6
  4029   00337E  C01E  F00C         	movff	___aodiv@quotient+7,?___aodiv+7
  4030   003382  0012               	return		;funcret
  4031   003384                     __end_of___aodiv:
  4032                           	callstack 0
  4033                           
  4034 ;; *************** function _sendTxBuf *****************
  4035 ;; Defined at:
  4036 ;;		line 126 in file "serialTest.c"
  4037 ;; Parameters:    Size  Location     Type
  4038 ;;		None
  4039 ;; Auto vars:     Size  Location     Type
  4040 ;;		None
  4041 ;; Return value:  Size  Location     Type
  4042 ;;                  1    wreg      void 
  4043 ;; Registers used:
  4044 ;;		wreg, status,2, status,0, cstack
  4045 ;; Tracked objects:
  4046 ;;		On entry : 0/0
  4047 ;;		On exit  : 0/0
  4048 ;;		Unchanged: 0/0
  4049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4051 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4053 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4054 ;;Total ram usage:        0 bytes
  4055 ;; Hardware stack levels used: 1
  4056 ;; Hardware stack levels required when called: 3
  4057 ;; This function calls:
  4058 ;;		_isDataInTxBuf
  4059 ;; This function is called by:
  4060 ;;		_return_home_turns
  4061 ;; This function uses a non-reentrant model
  4062 ;;
  4063                           
  4064                           	psect	text14
  4065   004C94                     __ptext14:
  4066                           	callstack 0
  4067   004C94                     _sendTxBuf:
  4068                           	callstack 26
  4069   004C94                     
  4070                           ;serialTest.c: 127:     if (isDataInTxBuf()) {PIE4bits.TX4IE=1;}
  4071   004C94  EC57  F026         	call	_isDataInTxBuf	;wreg free
  4072   004C98  0900               	iorlw	0
  4073   004C9A  B4D8               	btfsc	status,2,c
  4074   004C9C  EF52  F026         	goto	u3631
  4075   004CA0  EF54  F026         	goto	u3630
  4076   004CA4                     u3631:
  4077   004CA4  EF56  F026         	goto	l529
  4078   004CA8                     u3630:
  4079   004CA8  010E               	movlb	14	; () banked
  4080   004CAA  852D               	bsf	45,2,b	;volatile
  4081   004CAC                     l529:
  4082   004CAC  0012               	return		;funcret
  4083   004CAE                     __end_of_sendTxBuf:
  4084                           	callstack 0
  4085                           
  4086 ;; *************** function _isDataInTxBuf *****************
  4087 ;; Defined at:
  4088 ;;		line 113 in file "serialTest.c"
  4089 ;; Parameters:    Size  Location     Type
  4090 ;;		None
  4091 ;; Auto vars:     Size  Location     Type
  4092 ;;		None
  4093 ;; Return value:  Size  Location     Type
  4094 ;;                  1    wreg      unsigned char 
  4095 ;; Registers used:
  4096 ;;		wreg, status,2, status,0
  4097 ;; Tracked objects:
  4098 ;;		On entry : 0/0
  4099 ;;		On exit  : 0/0
  4100 ;;		Unchanged: 0/0
  4101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4103 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4105 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4106 ;;Total ram usage:        0 bytes
  4107 ;; Hardware stack levels used: 1
  4108 ;; Hardware stack levels required when called: 2
  4109 ;; This function calls:
  4110 ;;		Nothing
  4111 ;; This function is called by:
  4112 ;;		_sendTxBuf
  4113 ;; This function uses a non-reentrant model
  4114 ;;
  4115                           
  4116                           	psect	text15
  4117   004CAE                     __ptext15:
  4118                           	callstack 0
  4119   004CAE                     _isDataInTxBuf:
  4120                           	callstack 26
  4121   004CAE                     
  4122                           ;serialTest.c: 114:     return (TxBufWriteCnt!=TxBufReadCnt);
  4123   004CAE  5057               	movf	_TxBufReadCnt^0,w,c	;volatile
  4124   004CB0  1858               	xorwf	_TxBufWriteCnt^0,w,c	;volatile
  4125   004CB2  A4D8               	btfss	status,2,c
  4126   004CB4  EF5E  F026         	goto	u3141
  4127   004CB8  EF61  F026         	goto	u3140
  4128   004CBC                     u3141:
  4129   004CBC  0E01               	movlw	1
  4130   004CBE  EF62  F026         	goto	u3150
  4131   004CC2                     u3140:
  4132   004CC2  0E00               	movlw	0
  4133   004CC4                     u3150:
  4134   004CC4  0012               	return		;funcret
  4135   004CC6                     __end_of_isDataInTxBuf:
  4136                           	callstack 0
  4137                           
  4138 ;; *************** function _forward *****************
  4139 ;; Defined at:
  4140 ;;		line 134 in file "MazeRobot.X/dc_motor.c"
  4141 ;; Parameters:    Size  Location     Type
  4142 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  4143 ;;		 -> main@motorLeft(9), 
  4144 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  4145 ;;		 -> main@motorRight(9), 
  4146 ;; Auto vars:     Size  Location     Type
  4147 ;;		None
  4148 ;; Return value:  Size  Location     Type
  4149 ;;                  1    wreg      void 
  4150 ;; Registers used:
  4151 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4152 ;; Tracked objects:
  4153 ;;		On entry : 0/0
  4154 ;;		On exit  : 0/0
  4155 ;;		Unchanged: 0/0
  4156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4157 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4158 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4159 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4160 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4161 ;;Total ram usage:        5 bytes
  4162 ;; Hardware stack levels used: 1
  4163 ;; Hardware stack levels required when called: 4
  4164 ;; This function calls:
  4165 ;;		_setMotorPWM
  4166 ;; This function is called by:
  4167 ;;		_return_home_turns
  4168 ;;		_main
  4169 ;; This function uses a non-reentrant model
  4170 ;;
  4171                           
  4172                           	psect	text16
  4173   0040B0                     __ptext16:
  4174                           	callstack 0
  4175   0040B0                     _forward:
  4176                           	callstack 25
  4177   0040B0                     
  4178                           ;MazeRobot.X/dc_motor.c: 134: void forward(DC_motor *mL, DC_motor *mR);MazeRobot.X/dc_mo
      +                          tor.c: 135: {;MazeRobot.X/dc_motor.c: 136:     mL->direction = 1;
  4179   0040B0  EE20 F001          	lfsr	2,1
  4180   0040B4  5018               	movf	forward@mL^0,w,c
  4181   0040B6  26D9               	addwf	fsr2l,f,c
  4182   0040B8  5019               	movf	(forward@mL+1)^0,w,c
  4183   0040BA  22DA               	addwfc	fsr2h,f,c
  4184   0040BC  0E01               	movlw	1
  4185   0040BE  6EDF               	movwf	indf2,c
  4186                           
  4187                           ;MazeRobot.X/dc_motor.c: 137:     mR->direction = 1;
  4188   0040C0  EE20 F001          	lfsr	2,1
  4189   0040C4  501A               	movf	forward@mR^0,w,c
  4190   0040C6  26D9               	addwf	fsr2l,f,c
  4191   0040C8  501B               	movf	(forward@mR+1)^0,w,c
  4192   0040CA  22DA               	addwfc	fsr2h,f,c
  4193   0040CC  0E01               	movlw	1
  4194   0040CE  6EDF               	movwf	indf2,c
  4195                           
  4196                           ;MazeRobot.X/dc_motor.c: 139:     mL->brakemode = 1;
  4197   0040D0  EE20 F002          	lfsr	2,2
  4198   0040D4  5018               	movf	forward@mL^0,w,c
  4199   0040D6  26D9               	addwf	fsr2l,f,c
  4200   0040D8  5019               	movf	(forward@mL+1)^0,w,c
  4201   0040DA  22DA               	addwfc	fsr2h,f,c
  4202   0040DC  0E01               	movlw	1
  4203   0040DE  6EDF               	movwf	indf2,c
  4204                           
  4205                           ;MazeRobot.X/dc_motor.c: 140:     mL->brakemode = 1;
  4206   0040E0  EE20 F002          	lfsr	2,2
  4207   0040E4  5018               	movf	forward@mL^0,w,c
  4208   0040E6  26D9               	addwf	fsr2l,f,c
  4209   0040E8  5019               	movf	(forward@mL+1)^0,w,c
  4210   0040EA  22DA               	addwfc	fsr2h,f,c
  4211   0040EC  0E01               	movlw	1
  4212   0040EE  6EDF               	movwf	indf2,c
  4213                           
  4214                           ;MazeRobot.X/dc_motor.c: 142:     while ((mL->power)<50 && (mR->power)<50){
  4215   0040F0  EF9E  F020         	goto	l3853
  4216   0040F4                     l3845:
  4217                           
  4218                           ;MazeRobot.X/dc_motor.c: 143:         if ((mL->power) < 50){
  4219   0040F4  C018  FFD9         	movff	forward@mL,fsr2l
  4220   0040F8  C019  FFDA         	movff	forward@mL+1,fsr2h
  4221   0040FC  0E32               	movlw	50
  4222   0040FE  60DF               	cpfslt	indf2,c
  4223   004100  EF84  F020         	goto	u3641
  4224   004104  EF86  F020         	goto	u3640
  4225   004108                     u3641:
  4226   004108  EF8C  F020         	goto	l3849
  4227   00410C                     u3640:
  4228   00410C                     
  4229                           ;MazeRobot.X/dc_motor.c: 144:             mL->power += 5;
  4230   00410C  C018  FFD9         	movff	forward@mL,fsr2l
  4231   004110  C019  FFDA         	movff	forward@mL+1,fsr2h
  4232   004114  0E05               	movlw	5
  4233   004116  26DF               	addwf	indf2,f,c
  4234   004118                     l3849:
  4235                           
  4236                           ;MazeRobot.X/dc_motor.c: 146:         if ((mR->power) < 50){
  4237   004118  C01A  FFD9         	movff	forward@mR,fsr2l
  4238   00411C  C01B  FFDA         	movff	forward@mR+1,fsr2h
  4239   004120  0E32               	movlw	50
  4240   004122  60DF               	cpfslt	indf2,c
  4241   004124  EF96  F020         	goto	u3651
  4242   004128  EF98  F020         	goto	u3650
  4243   00412C                     u3651:
  4244   00412C  EF9E  F020         	goto	l3853
  4245   004130                     u3650:
  4246   004130                     
  4247                           ;MazeRobot.X/dc_motor.c: 147:             mR->power += 5;
  4248   004130  C01A  FFD9         	movff	forward@mR,fsr2l
  4249   004134  C01B  FFDA         	movff	forward@mR+1,fsr2h
  4250   004138  0E05               	movlw	5
  4251   00413A  26DF               	addwf	indf2,f,c
  4252   00413C                     l3853:
  4253                           
  4254                           ;MazeRobot.X/dc_motor.c: 142:     while ((mL->power)<50 && (mR->power)<50){
  4255   00413C  C018  FFD9         	movff	forward@mL,fsr2l
  4256   004140  C019  FFDA         	movff	forward@mL+1,fsr2h
  4257   004144  0E32               	movlw	50
  4258   004146  60DF               	cpfslt	indf2,c
  4259   004148  EFA8  F020         	goto	u3661
  4260   00414C  EFAA  F020         	goto	u3660
  4261   004150                     u3661:
  4262   004150  EFB6  F020         	goto	l3857
  4263   004154                     u3660:
  4264   004154  C01A  FFD9         	movff	forward@mR,fsr2l
  4265   004158  C01B  FFDA         	movff	forward@mR+1,fsr2h
  4266   00415C  0E31               	movlw	49
  4267   00415E  64DF               	cpfsgt	indf2,c
  4268   004160  EFB4  F020         	goto	u3671
  4269   004164  EFB6  F020         	goto	u3670
  4270   004168                     u3671:
  4271   004168  EF7A  F020         	goto	l3845
  4272   00416C                     u3670:
  4273   00416C                     l3857:
  4274                           
  4275                           ;MazeRobot.X/dc_motor.c: 151:     setMotorPWM(mL);
  4276   00416C  C018  F012         	movff	forward@mL,setMotorPWM@m
  4277   004170  C019  F013         	movff	forward@mL+1,setMotorPWM@m+1
  4278   004174  ECC2  F019         	call	_setMotorPWM	;wreg free
  4279                           
  4280                           ;MazeRobot.X/dc_motor.c: 152:     setMotorPWM(mR);
  4281   004178  C01A  F012         	movff	forward@mR,setMotorPWM@m
  4282   00417C  C01B  F013         	movff	forward@mR+1,setMotorPWM@m+1
  4283   004180  ECC2  F019         	call	_setMotorPWM	;wreg free
  4284   004184  0012               	return		;funcret
  4285   004186                     __end_of_forward:
  4286                           	callstack 0
  4287                           
  4288 ;; *************** function _TxBufferedString *****************
  4289 ;; Defined at:
  4290 ;;		line 118 in file "serialTest.c"
  4291 ;; Parameters:    Size  Location     Type
  4292 ;;  string          2    5[COMRAM] PTR unsigned char 
  4293 ;;		 -> return_home_turns@string1(150), 
  4294 ;; Auto vars:     Size  Location     Type
  4295 ;;		None
  4296 ;; Return value:  Size  Location     Type
  4297 ;;                  1    wreg      void 
  4298 ;; Registers used:
  4299 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4300 ;; Tracked objects:
  4301 ;;		On entry : 0/0
  4302 ;;		On exit  : 0/0
  4303 ;;		Unchanged: 0/0
  4304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4305 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4308 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4309 ;;Total ram usage:        2 bytes
  4310 ;; Hardware stack levels used: 1
  4311 ;; Hardware stack levels required when called: 3
  4312 ;; This function calls:
  4313 ;;		_putCharToTxBuf
  4314 ;; This function is called by:
  4315 ;;		_return_home_turns
  4316 ;; This function uses a non-reentrant model
  4317 ;;
  4318                           
  4319                           	psect	text17
  4320   004B1E                     __ptext17:
  4321                           	callstack 0
  4322   004B1E                     _TxBufferedString:
  4323                           	callstack 26
  4324   004B1E                     
  4325                           ;serialTest.c: 121:     while(*string != 0) {putCharToTxBuf(*string++);}
  4326   004B1E  EF9A  F025         	goto	l3837
  4327   004B22                     l3833:
  4328   004B22  C006  FFD9         	movff	TxBufferedString@string,fsr2l
  4329   004B26  C007  FFDA         	movff	TxBufferedString@string+1,fsr2h
  4330   004B2A  50DF               	movf	indf2,w,c
  4331   004B2C  ECD4  F025         	call	_putCharToTxBuf
  4332   004B30  4A06               	infsnz	TxBufferedString@string^0,f,c
  4333   004B32  2A07               	incf	(TxBufferedString@string+1)^0,f,c
  4334   004B34                     l3837:
  4335   004B34  C006  FFD9         	movff	TxBufferedString@string,fsr2l
  4336   004B38  C007  FFDA         	movff	TxBufferedString@string+1,fsr2h
  4337   004B3C  50DF               	movf	indf2,w,c
  4338   004B3E  A4D8               	btfss	status,2,c
  4339   004B40  EFA4  F025         	goto	u3621
  4340   004B44  EFA6  F025         	goto	u3620
  4341   004B48                     u3621:
  4342   004B48  EF91  F025         	goto	l3833
  4343   004B4C                     u3620:
  4344   004B4C  0012               	return		;funcret
  4345   004B4E                     __end_of_TxBufferedString:
  4346                           	callstack 0
  4347                           
  4348 ;; *************** function _putCharToTxBuf *****************
  4349 ;; Defined at:
  4350 ;;		line 105 in file "serialTest.c"
  4351 ;; Parameters:    Size  Location     Type
  4352 ;;  byte            1    wreg     unsigned char 
  4353 ;; Auto vars:     Size  Location     Type
  4354 ;;  byte            1    4[COMRAM] unsigned char 
  4355 ;; Return value:  Size  Location     Type
  4356 ;;                  1    wreg      void 
  4357 ;; Registers used:
  4358 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4359 ;; Tracked objects:
  4360 ;;		On entry : 0/0
  4361 ;;		On exit  : 0/0
  4362 ;;		Unchanged: 0/0
  4363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4365 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4367 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4368 ;;Total ram usage:        1 bytes
  4369 ;; Hardware stack levels used: 1
  4370 ;; Hardware stack levels required when called: 2
  4371 ;; This function calls:
  4372 ;;		Nothing
  4373 ;; This function is called by:
  4374 ;;		_TxBufferedString
  4375 ;; This function uses a non-reentrant model
  4376 ;;
  4377                           
  4378                           	psect	text18
  4379   004BA8                     __ptext18:
  4380                           	callstack 0
  4381   004BA8                     _putCharToTxBuf:
  4382                           	callstack 26
  4383                           
  4384                           ;incstack = 0
  4385                           ;putCharToTxBuf@byte stored from wreg
  4386   004BA8  6E05               	movwf	putCharToTxBuf@byte^0,c
  4387   004BAA                     
  4388                           ;serialTest.c: 106:     if (TxBufWriteCnt>=60) {TxBufWriteCnt=0;}
  4389   004BAA  0E3B               	movlw	59
  4390   004BAC  6458               	cpfsgt	_TxBufWriteCnt^0,c	;volatile
  4391   004BAE  EFDB  F025         	goto	u3131
  4392   004BB2  EFDD  F025         	goto	u3130
  4393   004BB6                     u3131:
  4394   004BB6  EFDF  F025         	goto	l3473
  4395   004BBA                     u3130:
  4396   004BBA  0E00               	movlw	0
  4397   004BBC  6E58               	movwf	_TxBufWriteCnt^0,c	;volatile
  4398   004BBE                     l3473:
  4399                           
  4400                           ;serialTest.c: 107:     EUSART4TXbuf[TxBufWriteCnt++]=byte;
  4401   004BBE  0E9A               	movlw	low _EUSART4TXbuf
  4402   004BC0  2458               	addwf	_TxBufWriteCnt^0,w,c	;volatile
  4403   004BC2  6ED9               	movwf	fsr2l,c
  4404   004BC4  6ADA               	clrf	fsr2h,c
  4405   004BC6  0E01               	movlw	high _EUSART4TXbuf
  4406   004BC8  22DA               	addwfc	fsr2h,f,c
  4407   004BCA  C005  FFDF         	movff	putCharToTxBuf@byte,indf2
  4408   004BCE  2A58               	incf	_TxBufWriteCnt^0,f,c	;volatile
  4409   004BD0  0012               	return		;funcret
  4410   004BD2                     __end_of_putCharToTxBuf:
  4411                           	callstack 0
  4412                           
  4413 ;; *************** function _initUSART4 *****************
  4414 ;; Defined at:
  4415 ;;		line 5 in file "serialTest.c"
  4416 ;; Parameters:    Size  Location     Type
  4417 ;;		None
  4418 ;; Auto vars:     Size  Location     Type
  4419 ;;		None
  4420 ;; Return value:  Size  Location     Type
  4421 ;;                  1    wreg      void 
  4422 ;; Registers used:
  4423 ;;		wreg, status,2
  4424 ;; Tracked objects:
  4425 ;;		On entry : 0/0
  4426 ;;		On exit  : 0/0
  4427 ;;		Unchanged: 0/0
  4428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4432 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4433 ;;Total ram usage:        0 bytes
  4434 ;; Hardware stack levels used: 1
  4435 ;; Hardware stack levels required when called: 2
  4436 ;; This function calls:
  4437 ;;		Nothing
  4438 ;; This function is called by:
  4439 ;;		_main
  4440 ;; This function uses a non-reentrant model
  4441 ;;
  4442                           
  4443                           	psect	text19
  4444   004B4E                     __ptext19:
  4445                           	callstack 0
  4446   004B4E                     _initUSART4:
  4447                           	callstack 28
  4448   004B4E                     
  4449                           ;serialTest.c: 9:     BAUD4CONbits.BRG16 = 0;
  4450   004B4E  010E               	movlb	14	; () banked
  4451   004B50  97E9               	bcf	233,3,b	;volatile
  4452                           
  4453                           ;serialTest.c: 10:     TX4STAbits.BRGH = 0;
  4454   004B52  95E8               	bcf	232,2,b	;volatile
  4455   004B54                     
  4456                           ; BSR set to: 14
  4457                           ;serialTest.c: 19:     SP4BRGL = 51;
  4458   004B54  0E33               	movlw	51
  4459   004B56  6FE5               	movwf	229,b	;volatile
  4460                           
  4461                           ;serialTest.c: 20:     SP4BRGH = 0;
  4462   004B58  0E00               	movlw	0
  4463   004B5A  6FE6               	movwf	230,b	;volatile
  4464   004B5C                     
  4465                           ; BSR set to: 14
  4466                           ;serialTest.c: 22:     RC4STAbits.CREN = 1;
  4467   004B5C  89E7               	bsf	231,4,b	;volatile
  4468   004B5E                     
  4469                           ; BSR set to: 14
  4470                           ;serialTest.c: 23:     TX4STAbits.TXEN = 1;
  4471   004B5E  8BE8               	bsf	232,5,b	;volatile
  4472   004B60                     
  4473                           ; BSR set to: 14
  4474                           ;serialTest.c: 24:     RC4STAbits.SPEN = 1;
  4475   004B60  8FE7               	bsf	231,7,b	;volatile
  4476   004B62                     
  4477                           ; BSR set to: 14
  4478                           ;serialTest.c: 26:     TRISCbits.TRISC1 = 1;
  4479   004B62  8283               	bsf	131,1,c	;volatile
  4480                           
  4481                           ;serialTest.c: 28:     RC0PPS = 0x12;
  4482   004B64  0E12               	movlw	18
  4483   004B66  6F62               	movwf	98,b	;volatile
  4484                           
  4485                           ;serialTest.c: 29:     RX4PPS = 0x11;
  4486   004B68  0E11               	movlw	17
  4487   004B6A  6F15               	movwf	21,b	;volatile
  4488   004B6C                     
  4489                           ; BSR set to: 14
  4490                           ;serialTest.c: 32:     INTCONbits.GIE = 1;
  4491   004B6C  8EF2               	bsf	242,7,c	;volatile
  4492   004B6E                     
  4493                           ; BSR set to: 14
  4494                           ;serialTest.c: 33:     INTCONbits.IPEN = 1;
  4495   004B6E  8AF2               	bsf	242,5,c	;volatile
  4496   004B70                     
  4497                           ; BSR set to: 14
  4498                           ;serialTest.c: 34:     INTCONbits.PEIE = 1;
  4499   004B70  8CF2               	bsf	242,6,c	;volatile
  4500   004B72                     
  4501                           ; BSR set to: 14
  4502                           ;serialTest.c: 36:     PIE4bits.RC4IE=1;
  4503   004B72  872D               	bsf	45,3,b	;volatile
  4504   004B74                     
  4505                           ; BSR set to: 14
  4506                           ;serialTest.c: 37:     PIE4bits.TX4IE=0;
  4507   004B74  952D               	bcf	45,2,b	;volatile
  4508   004B76                     
  4509                           ; BSR set to: 14
  4510                           ;serialTest.c: 39:     IPR4bits.RC4IP = 1;
  4511   004B76  8723               	bsf	35,3,b	;volatile
  4512   004B78                     
  4513                           ; BSR set to: 14
  4514                           ;serialTest.c: 40:     IPR4bits.TX4IP = 1;
  4515   004B78  8523               	bsf	35,2,b	;volatile
  4516   004B7A                     
  4517                           ; BSR set to: 14
  4518   004B7A  0012               	return		;funcret
  4519   004B7C                     __end_of_initUSART4:
  4520                           	callstack 0
  4521                           
  4522 ;; *************** function _initDCmotorsPWM *****************
  4523 ;; Defined at:
  4524 ;;		line 12 in file "MazeRobot.X/dc_motor.c"
  4525 ;; Parameters:    Size  Location     Type
  4526 ;;  PWMperiod       2    4[COMRAM] int 
  4527 ;; Auto vars:     Size  Location     Type
  4528 ;;		None
  4529 ;; Return value:  Size  Location     Type
  4530 ;;                  1    wreg      void 
  4531 ;; Registers used:
  4532 ;;		wreg, status,2
  4533 ;; Tracked objects:
  4534 ;;		On entry : 0/0
  4535 ;;		On exit  : 0/0
  4536 ;;		Unchanged: 0/0
  4537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4538 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4541 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4542 ;;Total ram usage:        2 bytes
  4543 ;; Hardware stack levels used: 1
  4544 ;; Hardware stack levels required when called: 2
  4545 ;; This function calls:
  4546 ;;		Nothing
  4547 ;; This function is called by:
  4548 ;;		_main
  4549 ;; This function uses a non-reentrant model
  4550 ;;
  4551                           
  4552                           	psect	text20
  4553   0045D2                     __ptext20:
  4554                           	callstack 0
  4555   0045D2                     _initDCmotorsPWM:
  4556                           	callstack 28
  4557   0045D2                     
  4558                           ;MazeRobot.X/dc_motor.c: 16:     LATEbits.LATE2 = 0;
  4559   0045D2  947D               	bcf	125,2,c	;volatile
  4560                           
  4561                           ;MazeRobot.X/dc_motor.c: 17:     LATEbits.LATE4 = 0;
  4562   0045D4  987D               	bcf	125,4,c	;volatile
  4563                           
  4564                           ;MazeRobot.X/dc_motor.c: 18:     LATCbits.LATC7 = 0;
  4565   0045D6  9E7B               	bcf	123,7,c	;volatile
  4566                           
  4567                           ;MazeRobot.X/dc_motor.c: 19:     LATGbits.LATG6 = 0;
  4568   0045D8  9C7F               	bcf	127,6,c	;volatile
  4569                           
  4570                           ;MazeRobot.X/dc_motor.c: 22:     TRISEbits.TRISE2 = 0 ;
  4571   0045DA  9485               	bcf	133,2,c	;volatile
  4572                           
  4573                           ;MazeRobot.X/dc_motor.c: 23:     TRISEbits.TRISE4 = 0 ;
  4574   0045DC  9885               	bcf	133,4,c	;volatile
  4575                           
  4576                           ;MazeRobot.X/dc_motor.c: 24:     TRISCbits.TRISC7 = 0 ;
  4577   0045DE  9E83               	bcf	131,7,c	;volatile
  4578                           
  4579                           ;MazeRobot.X/dc_motor.c: 25:     TRISGbits.TRISG6 = 0 ;
  4580   0045E0  9C87               	bcf	135,6,c	;volatile
  4581   0045E2                     
  4582                           ;MazeRobot.X/dc_motor.c: 28:     RE2PPS=0x05;
  4583   0045E2  0E05               	movlw	5
  4584   0045E4  010E               	movlb	14	; () banked
  4585   0045E6  6F74               	movwf	116,b	;volatile
  4586                           
  4587                           ;MazeRobot.X/dc_motor.c: 29:     RE4PPS=0x06;
  4588   0045E8  0E06               	movlw	6
  4589   0045EA  6F76               	movwf	118,b	;volatile
  4590                           
  4591                           ;MazeRobot.X/dc_motor.c: 30:     RC7PPS=0x07;
  4592   0045EC  0E07               	movlw	7
  4593   0045EE  6F69               	movwf	105,b	;volatile
  4594                           
  4595                           ;MazeRobot.X/dc_motor.c: 31:     RG6PPS=0x08;
  4596   0045F0  0E08               	movlw	8
  4597   0045F2  6F88               	movwf	136,b	;volatile
  4598                           
  4599                           ;MazeRobot.X/dc_motor.c: 34:     T2CONbits.CKPS=0b011;
  4600   0045F4  50BD               	movf	189,w,c	;volatile
  4601   0045F6  0B8F               	andlw	-113
  4602   0045F8  0930               	iorlw	48
  4603   0045FA  6EBD               	movwf	189,c	;volatile
  4604                           
  4605                           ;MazeRobot.X/dc_motor.c: 35:     T2HLTbits.MODE=0b00000;
  4606   0045FC  0EE0               	movlw	-32
  4607   0045FE  16BE               	andwf	190,f,c	;volatile
  4608                           
  4609                           ;MazeRobot.X/dc_motor.c: 36:     T2CLKCONbits.CS=0b0001;
  4610   004600  50BF               	movf	191,w,c	;volatile
  4611   004602  0BF0               	andlw	-16
  4612   004604  0901               	iorlw	1
  4613   004606  6EBF               	movwf	191,c	;volatile
  4614                           
  4615                           ;MazeRobot.X/dc_motor.c: 40:     T2PR=199;
  4616   004608  0EC7               	movlw	199
  4617   00460A  6EBC               	movwf	188,c	;volatile
  4618   00460C                     
  4619                           ; BSR set to: 14
  4620                           ;MazeRobot.X/dc_motor.c: 41:     T2CONbits.ON=1;
  4621   00460C  8EBD               	bsf	189,7,c	;volatile
  4622                           
  4623                           ;MazeRobot.X/dc_motor.c: 45:     CCPR1H=0;
  4624   00460E  0E00               	movlw	0
  4625   004610  6EAA               	movwf	170,c	;volatile
  4626                           
  4627                           ;MazeRobot.X/dc_motor.c: 46:     CCPR2H=0;
  4628   004612  0E00               	movlw	0
  4629   004614  6EA6               	movwf	166,c	;volatile
  4630                           
  4631                           ;MazeRobot.X/dc_motor.c: 47:     CCPR3H=0;
  4632   004616  0E00               	movlw	0
  4633   004618  010F               	movlb	15	; () banked
  4634   00461A  6F25               	movwf	37,b	;volatile
  4635                           
  4636                           ;MazeRobot.X/dc_motor.c: 48:     CCPR4H=0;
  4637   00461C  0E00               	movlw	0
  4638   00461E  6F21               	movwf	33,b	;volatile
  4639                           
  4640                           ;MazeRobot.X/dc_motor.c: 51:     CCPTMRS0bits.C1TSEL=0;
  4641   004620  0EFC               	movlw	-4
  4642   004622  16AD               	andwf	173,f,c	;volatile
  4643                           
  4644                           ;MazeRobot.X/dc_motor.c: 52:     CCPTMRS0bits.C2TSEL=0;
  4645   004624  0EF3               	movlw	-13
  4646   004626  16AD               	andwf	173,f,c	;volatile
  4647                           
  4648                           ;MazeRobot.X/dc_motor.c: 53:     CCPTMRS0bits.C3TSEL=0;
  4649   004628  0ECF               	movlw	-49
  4650   00462A  16AD               	andwf	173,f,c	;volatile
  4651                           
  4652                           ;MazeRobot.X/dc_motor.c: 54:     CCPTMRS0bits.C4TSEL=0;
  4653   00462C  0E3F               	movlw	-193
  4654   00462E  16AD               	andwf	173,f,c	;volatile
  4655   004630                     
  4656                           ; BSR set to: 15
  4657                           ;MazeRobot.X/dc_motor.c: 57:     CCP1CONbits.FMT=1;
  4658   004630  88AB               	bsf	171,4,c	;volatile
  4659                           
  4660                           ;MazeRobot.X/dc_motor.c: 58:     CCP1CONbits.CCP1MODE=0b1100;
  4661   004632  50AB               	movf	171,w,c	;volatile
  4662   004634  0BF0               	andlw	-16
  4663   004636  090C               	iorlw	12
  4664   004638  6EAB               	movwf	171,c	;volatile
  4665   00463A                     
  4666                           ; BSR set to: 15
  4667                           ;MazeRobot.X/dc_motor.c: 59:     CCP1CONbits.EN=1;
  4668   00463A  8EAB               	bsf	171,7,c	;volatile
  4669   00463C                     
  4670                           ; BSR set to: 15
  4671                           ;MazeRobot.X/dc_motor.c: 61:     CCP2CONbits.FMT=1;
  4672   00463C  88A7               	bsf	167,4,c	;volatile
  4673                           
  4674                           ;MazeRobot.X/dc_motor.c: 62:     CCP2CONbits.CCP2MODE=0b1100;
  4675   00463E  50A7               	movf	167,w,c	;volatile
  4676   004640  0BF0               	andlw	-16
  4677   004642  090C               	iorlw	12
  4678   004644  6EA7               	movwf	167,c	;volatile
  4679   004646                     
  4680                           ; BSR set to: 15
  4681                           ;MazeRobot.X/dc_motor.c: 63:     CCP2CONbits.EN=1;
  4682   004646  8EA7               	bsf	167,7,c	;volatile
  4683   004648                     
  4684                           ; BSR set to: 15
  4685                           ;MazeRobot.X/dc_motor.c: 65:     CCP3CONbits.FMT=1;
  4686   004648  8926               	bsf	38,4,b	;volatile
  4687                           
  4688                           ;MazeRobot.X/dc_motor.c: 66:     CCP3CONbits.CCP3MODE=0b1100;
  4689   00464A  5126               	movf	38,w,b	;volatile
  4690   00464C  0BF0               	andlw	-16
  4691   00464E  090C               	iorlw	12
  4692   004650  6F26               	movwf	38,b	;volatile
  4693   004652                     
  4694                           ; BSR set to: 15
  4695                           ;MazeRobot.X/dc_motor.c: 67:     CCP3CONbits.EN=1;
  4696   004652  8F26               	bsf	38,7,b	;volatile
  4697   004654                     
  4698                           ; BSR set to: 15
  4699                           ;MazeRobot.X/dc_motor.c: 69:     CCP4CONbits.FMT=1;
  4700   004654  8922               	bsf	34,4,b	;volatile
  4701                           
  4702                           ;MazeRobot.X/dc_motor.c: 70:     CCP4CONbits.CCP4MODE=0b1100;
  4703   004656  5122               	movf	34,w,b	;volatile
  4704   004658  0BF0               	andlw	-16
  4705   00465A  090C               	iorlw	12
  4706   00465C  6F22               	movwf	34,b	;volatile
  4707   00465E                     
  4708                           ; BSR set to: 15
  4709                           ;MazeRobot.X/dc_motor.c: 71:     CCP4CONbits.EN=1;
  4710   00465E  8F22               	bsf	34,7,b	;volatile
  4711   004660                     
  4712                           ; BSR set to: 15
  4713   004660  0012               	return		;funcret
  4714   004662                     __end_of_initDCmotorsPWM:
  4715                           	callstack 0
  4716                           
  4717 ;; *************** function _color_click_init *****************
  4718 ;; Defined at:
  4719 ;;		line 8 in file "MazeRobot.X/color.c"
  4720 ;; Parameters:    Size  Location     Type
  4721 ;;		None
  4722 ;; Auto vars:     Size  Location     Type
  4723 ;;		None
  4724 ;; Return value:  Size  Location     Type
  4725 ;;                  1    wreg      void 
  4726 ;; Registers used:
  4727 ;;		wreg, status,2, status,0, cstack
  4728 ;; Tracked objects:
  4729 ;;		On entry : 0/0
  4730 ;;		On exit  : 0/0
  4731 ;;		Unchanged: 0/0
  4732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4734 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4735 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4736 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4737 ;;Total ram usage:        1 bytes
  4738 ;; Hardware stack levels used: 1
  4739 ;; Hardware stack levels required when called: 5
  4740 ;; This function calls:
  4741 ;;		_I2C_2_Master_Init
  4742 ;;		_color_writetoaddr
  4743 ;; This function is called by:
  4744 ;;		_main
  4745 ;; This function uses a non-reentrant model
  4746 ;;
  4747                           
  4748                           	psect	text21
  4749   004AEA                     __ptext21:
  4750                           	callstack 0
  4751   004AEA                     _color_click_init:
  4752                           	callstack 25
  4753   004AEA                     
  4754                           ;MazeRobot.X/color.c: 11:     I2C_2_Master_Init();
  4755   004AEA  ECE9  F025         	call	_I2C_2_Master_Init	;wreg free
  4756   004AEE                     
  4757                           ;MazeRobot.X/color.c: 14:   color_writetoaddr(0x00, 0x01);
  4758   004AEE  0E01               	movlw	1
  4759   004AF0  6E07               	movwf	color_writetoaddr@value^0,c
  4760   004AF2  0E00               	movlw	0
  4761   004AF4  EC3A  F026         	call	_color_writetoaddr
  4762   004AF8                     
  4763                           ;MazeRobot.X/color.c: 15:     _delay((unsigned long)((3)*(64000000/4000.0)));
  4764   004AF8  0E3F               	movlw	63
  4765   004AFA  6E09               	movwf	??_color_click_init^0,c
  4766   004AFC  0E55               	movlw	85
  4767   004AFE                     u6127:
  4768   004AFE  2EE8               	decfsz	wreg,f,c
  4769   004B00  D7FE               	bra	u6127
  4770   004B02  2E09               	decfsz	??_color_click_init^0,f,c
  4771   004B04  D7FC               	bra	u6127
  4772   004B06  F000               	nop	
  4773   004B08                     
  4774                           ;MazeRobot.X/color.c: 18:  color_writetoaddr(0x00, 0x03);
  4775   004B08  0E03               	movlw	3
  4776   004B0A  6E07               	movwf	color_writetoaddr@value^0,c
  4777   004B0C  0E00               	movlw	0
  4778   004B0E  EC3A  F026         	call	_color_writetoaddr
  4779   004B12                     
  4780                           ;MazeRobot.X/color.c: 21:  color_writetoaddr(0x01, 0xD5);
  4781   004B12  0ED5               	movlw	213
  4782   004B14  6E07               	movwf	color_writetoaddr@value^0,c
  4783   004B16  0E01               	movlw	1
  4784   004B18  EC3A  F026         	call	_color_writetoaddr
  4785   004B1C  0012               	return		;funcret
  4786   004B1E                     __end_of_color_click_init:
  4787                           	callstack 0
  4788                           
  4789 ;; *************** function _color_writetoaddr *****************
  4790 ;; Defined at:
  4791 ;;		line 25 in file "MazeRobot.X/color.c"
  4792 ;; Parameters:    Size  Location     Type
  4793 ;;  address         1    wreg     unsigned char 
  4794 ;;  value           1    6[COMRAM] unsigned char 
  4795 ;; Auto vars:     Size  Location     Type
  4796 ;;  address         1    7[COMRAM] unsigned char 
  4797 ;; Return value:  Size  Location     Type
  4798 ;;                  1    wreg      void 
  4799 ;; Registers used:
  4800 ;;		wreg, status,2, status,0, cstack
  4801 ;; Tracked objects:
  4802 ;;		On entry : 0/0
  4803 ;;		On exit  : 0/0
  4804 ;;		Unchanged: 0/0
  4805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4806 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4807 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4809 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4810 ;;Total ram usage:        2 bytes
  4811 ;; Hardware stack levels used: 1
  4812 ;; Hardware stack levels required when called: 4
  4813 ;; This function calls:
  4814 ;;		_I2C_2_Master_Start
  4815 ;;		_I2C_2_Master_Stop
  4816 ;;		_I2C_2_Master_Write
  4817 ;; This function is called by:
  4818 ;;		_color_click_init
  4819 ;; This function uses a non-reentrant model
  4820 ;;
  4821                           
  4822                           	psect	text22
  4823   004C74                     __ptext22:
  4824                           	callstack 0
  4825   004C74                     _color_writetoaddr:
  4826                           	callstack 25
  4827                           
  4828                           ;incstack = 0
  4829                           ;color_writetoaddr@address stored from wreg
  4830   004C74  6E08               	movwf	color_writetoaddr@address^0,c
  4831   004C76                     
  4832                           ;MazeRobot.X/color.c: 26:     I2C_2_Master_Start();
  4833   004C76  EC7A  F026         	call	_I2C_2_Master_Start	;wreg free
  4834                           
  4835                           ;MazeRobot.X/color.c: 27:     I2C_2_Master_Write(0x52 | 0x00);
  4836   004C7A  0E52               	movlw	82
  4837   004C7C  EC6F  F026         	call	_I2C_2_Master_Write
  4838                           
  4839                           ;MazeRobot.X/color.c: 28:     I2C_2_Master_Write(0x80 | address);
  4840   004C80  5008               	movf	color_writetoaddr@address^0,w,c
  4841   004C82  0980               	iorlw	128
  4842   004C84  EC6F  F026         	call	_I2C_2_Master_Write
  4843                           
  4844                           ;MazeRobot.X/color.c: 29:     I2C_2_Master_Write(value);
  4845   004C88  5007               	movf	color_writetoaddr@value^0,w,c
  4846   004C8A  EC6F  F026         	call	_I2C_2_Master_Write
  4847                           
  4848                           ;MazeRobot.X/color.c: 30:     I2C_2_Master_Stop();
  4849   004C8E  EC75  F026         	call	_I2C_2_Master_Stop	;wreg free
  4850   004C92  0012               	return		;funcret
  4851   004C94                     __end_of_color_writetoaddr:
  4852                           	callstack 0
  4853                           
  4854 ;; *************** function _I2C_2_Master_Init *****************
  4855 ;; Defined at:
  4856 ;;		line 4 in file "MazeRobot.X/i2c.c"
  4857 ;; Parameters:    Size  Location     Type
  4858 ;;		None
  4859 ;; Auto vars:     Size  Location     Type
  4860 ;;		None
  4861 ;; Return value:  Size  Location     Type
  4862 ;;                  1    wreg      void 
  4863 ;; Registers used:
  4864 ;;		wreg, status,2
  4865 ;; Tracked objects:
  4866 ;;		On entry : 0/0
  4867 ;;		On exit  : 0/0
  4868 ;;		Unchanged: 0/0
  4869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4873 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4874 ;;Total ram usage:        0 bytes
  4875 ;; Hardware stack levels used: 1
  4876 ;; Hardware stack levels required when called: 2
  4877 ;; This function calls:
  4878 ;;		Nothing
  4879 ;; This function is called by:
  4880 ;;		_color_click_init
  4881 ;; This function uses a non-reentrant model
  4882 ;;
  4883                           
  4884                           	psect	text23
  4885   004BD2                     __ptext23:
  4886                           	callstack 0
  4887   004BD2                     _I2C_2_Master_Init:
  4888                           	callstack 27
  4889   004BD2                     
  4890                           ;MazeRobot.X/i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  4891   004BD2  010E               	movlb	14	; () banked
  4892   004BD4  51D9               	movf	217,w,b	;volatile
  4893   004BD6  0BF0               	andlw	-16
  4894   004BD8  0908               	iorlw	8
  4895   004BDA  6FD9               	movwf	217,b	;volatile
  4896   004BDC                     
  4897                           ; BSR set to: 14
  4898                           ;MazeRobot.X/i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  4899   004BDC  8BD9               	bsf	217,5,b	;volatile
  4900                           
  4901                           ;MazeRobot.X/i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  4902   004BDE  0E9F               	movlw	159
  4903   004BE0  6FD6               	movwf	214,b	;volatile
  4904   004BE2                     
  4905                           ; BSR set to: 14
  4906                           ;MazeRobot.X/i2c.c: 12:   TRISDbits.TRISD5 = 1;
  4907   004BE2  8A84               	bsf	132,5,c	;volatile
  4908   004BE4                     
  4909                           ; BSR set to: 14
  4910                           ;MazeRobot.X/i2c.c: 13:   TRISDbits.TRISD6 = 1;
  4911   004BE4  8C84               	bsf	132,6,c	;volatile
  4912   004BE6                     
  4913                           ; BSR set to: 14
  4914                           ;MazeRobot.X/i2c.c: 14:   ANSELDbits.ANSELD5=0;
  4915   004BE6  9BA7               	bcf	167,5,b	;volatile
  4916   004BE8                     
  4917                           ; BSR set to: 14
  4918                           ;MazeRobot.X/i2c.c: 15:   ANSELDbits.ANSELD6=0;
  4919   004BE8  9DA7               	bcf	167,6,b	;volatile
  4920                           
  4921                           ;MazeRobot.X/i2c.c: 16:   SSP2DATPPS=0x1D;
  4922   004BEA  0E1D               	movlw	29
  4923   004BEC  6F1D               	movwf	29,b	;volatile
  4924                           
  4925                           ;MazeRobot.X/i2c.c: 17:   SSP2CLKPPS=0x1E;
  4926   004BEE  0E1E               	movlw	30
  4927   004BF0  6F1C               	movwf	28,b	;volatile
  4928                           
  4929                           ;MazeRobot.X/i2c.c: 18:   RD5PPS=0x1C;
  4930   004BF2  0E1C               	movlw	28
  4931   004BF4  6F6F               	movwf	111,b	;volatile
  4932                           
  4933                           ;MazeRobot.X/i2c.c: 19:   RD6PPS=0x1B;
  4934   004BF6  0E1B               	movlw	27
  4935   004BF8  6F70               	movwf	112,b	;volatile
  4936   004BFA                     
  4937                           ; BSR set to: 14
  4938   004BFA  0012               	return		;funcret
  4939   004BFC                     __end_of_I2C_2_Master_Init:
  4940                           	callstack 0
  4941                           
  4942 ;; *************** function _colorDetect *****************
  4943 ;; Defined at:
  4944 ;;		line 130 in file "MazeRobot.X/color.c"
  4945 ;; Parameters:    Size  Location     Type
  4946 ;;  clearRef        4    0[BANK0 ] void 
  4947 ;;  ambientRGBVa    2    4[BANK0 ] PTR struct RGB
  4948 ;;		 -> main@ambientRGBVal(8), 
  4949 ;;  whiteRGBVal     2    6[BANK0 ] PTR struct RGB
  4950 ;;		 -> main@whiteRGBVal(8), 
  4951 ;;  mL              2    8[BANK0 ] PTR struct DC_motor
  4952 ;;		 -> main@motorLeft(9), 
  4953 ;;  mR              2   10[BANK0 ] PTR struct DC_motor
  4954 ;;		 -> main@motorRight(9), 
  4955 ;; Auto vars:     Size  Location     Type
  4956 ;;  RGBVal          8   32[BANK0 ] struct RGB
  4957 ;;  bluePrint       4   48[BANK0 ] float 
  4958 ;;  greenPrint      4   44[BANK0 ] float 
  4959 ;;  redPrint        4   40[BANK0 ] float 
  4960 ;;  whiteB          4   20[BANK0 ] float 
  4961 ;;  whiteG          4   16[BANK0 ] float 
  4962 ;;  whiteR          4   12[BANK0 ] float 
  4963 ;;  whiteC          4    0        float 
  4964 ;;  colour_ref      2   30[BANK0 ] unsigned int 
  4965 ;;  ambientB        2   28[BANK0 ] unsigned int 
  4966 ;;  ambientG        2   26[BANK0 ] unsigned int 
  4967 ;;  ambientR        2   24[BANK0 ] unsigned int 
  4968 ;; Return value:  Size  Location     Type
  4969 ;;                  2    0[BANK0 ] unsigned int 
  4970 ;; Registers used:
  4971 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4972 ;; Tracked objects:
  4973 ;;		On entry : 0/0
  4974 ;;		On exit  : 0/0
  4975 ;;		Unchanged: 0/0
  4976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4977 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4978 ;;      Locals:         0      40       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4979 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4980 ;;      Totals:         2      52       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4981 ;;Total ram usage:       54 bytes
  4982 ;; Hardware stack levels used: 1
  4983 ;; Hardware stack levels required when called: 7
  4984 ;; This function calls:
  4985 ;;		___fldiv
  4986 ;;		___flge
  4987 ;;		___flmul
  4988 ;;		___flsub
  4989 ;;		___xxtofl
  4990 ;;		_getColor
  4991 ;;		_reverseSquareLeft
  4992 ;;		_reverseSquareRight
  4993 ;;		_turnLeft_135
  4994 ;;		_turnLeft_90
  4995 ;;		_turnRight_135
  4996 ;;		_turnRight_90
  4997 ;;		_turn_180
  4998 ;; This function is called by:
  4999 ;;		_main
  5000 ;; This function uses a non-reentrant model
  5001 ;;
  5002                           
  5003                           	psect	text24
  5004   000E28                     __ptext24:
  5005                           	callstack 0
  5006   000E28                     _colorDetect:
  5007                           	callstack 23
  5008   000E28                     
  5009                           ;MazeRobot.X/color.c: 132:         RGB RGBVal;;MazeRobot.X/color.c: 133:         getColo
      +                          r(&RGBVal);
  5010   000E28  0E80               	movlw	low colorDetect@RGBVal
  5011   000E2A  6E10               	movwf	getColor@v^0,c
  5012   000E2C  0E00               	movlw	high colorDetect@RGBVal
  5013   000E2E  6E11               	movwf	(getColor@v+1)^0,c
  5014   000E30  ECA8  F023         	call	_getColor	;wreg free
  5015   000E34                     
  5016                           ;MazeRobot.X/color.c: 135:         unsigned int ambientR = ambientRGBVal->R;
  5017   000E34  C064  FFD9         	movff	colorDetect@ambientRGBVal,fsr2l
  5018   000E38  C065  FFDA         	movff	colorDetect@ambientRGBVal+1,fsr2h
  5019   000E3C  CFDE F078          	movff	postinc2,colorDetect@ambientR
  5020   000E40  CFDD F079          	movff	postdec2,colorDetect@ambientR+1
  5021   000E44                     
  5022                           ;MazeRobot.X/color.c: 136:         unsigned int ambientG = ambientRGBVal->G;
  5023   000E44  0100               	movlb	0	; () banked
  5024   000E46  EE20 F002          	lfsr	2,2
  5025   000E4A  5164               	movf	colorDetect@ambientRGBVal& (0+255),w,b
  5026   000E4C  26D9               	addwf	fsr2l,f,c
  5027   000E4E  5165               	movf	(colorDetect@ambientRGBVal+1)& (0+255),w,b
  5028   000E50  22DA               	addwfc	fsr2h,f,c
  5029   000E52  CFDE F07A          	movff	postinc2,colorDetect@ambientG
  5030   000E56  CFDD F07B          	movff	postdec2,colorDetect@ambientG+1
  5031   000E5A                     
  5032                           ; BSR set to: 0
  5033                           ;MazeRobot.X/color.c: 137:         unsigned int ambientB = ambientRGBVal->B;
  5034   000E5A  EE20 F004          	lfsr	2,4
  5035   000E5E  5164               	movf	colorDetect@ambientRGBVal& (0+255),w,b
  5036   000E60  26D9               	addwf	fsr2l,f,c
  5037   000E62  5165               	movf	(colorDetect@ambientRGBVal+1)& (0+255),w,b
  5038   000E64  22DA               	addwfc	fsr2h,f,c
  5039   000E66  CFDE F07C          	movff	postinc2,colorDetect@ambientB
  5040   000E6A  CFDD F07D          	movff	postdec2,colorDetect@ambientB+1
  5041   000E6E                     
  5042                           ; BSR set to: 0
  5043                           ;MazeRobot.X/color.c: 139:         float whiteR = whiteRGBVal->R;
  5044   000E6E  C066  FFD9         	movff	colorDetect@whiteRGBVal,fsr2l
  5045   000E72  C067  FFDA         	movff	colorDetect@whiteRGBVal+1,fsr2h
  5046   000E76  CFDE F04F          	movff	postinc2,??_colorDetect
  5047   000E7A  CFDD F050          	movff	postdec2,??_colorDetect+1
  5048   000E7E  C04F  F005         	movff	??_colorDetect,___xxtofl@val
  5049   000E82  C050  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  5050   000E86  6A07               	clrf	(___xxtofl@val+2)^0,c
  5051   000E88  6A08               	clrf	(___xxtofl@val+3)^0,c
  5052   000E8A  0E00               	movlw	0
  5053   000E8C  EC24  F018         	call	___xxtofl
  5054   000E90  C005  F06C         	movff	?___xxtofl,colorDetect@whiteR
  5055   000E94  C006  F06D         	movff	?___xxtofl+1,colorDetect@whiteR+1
  5056   000E98  C007  F06E         	movff	?___xxtofl+2,colorDetect@whiteR+2
  5057   000E9C  C008  F06F         	movff	?___xxtofl+3,colorDetect@whiteR+3
  5058   000EA0                     
  5059                           ;MazeRobot.X/color.c: 140:         float whiteG = whiteRGBVal->G;
  5060   000EA0  0100               	movlb	0	; () banked
  5061   000EA2  EE20 F002          	lfsr	2,2
  5062   000EA6  5166               	movf	colorDetect@whiteRGBVal& (0+255),w,b
  5063   000EA8  26D9               	addwf	fsr2l,f,c
  5064   000EAA  5167               	movf	(colorDetect@whiteRGBVal+1)& (0+255),w,b
  5065   000EAC  22DA               	addwfc	fsr2h,f,c
  5066   000EAE  CFDE F04F          	movff	postinc2,??_colorDetect
  5067   000EB2  CFDD F050          	movff	postdec2,??_colorDetect+1
  5068   000EB6  C04F  F005         	movff	??_colorDetect,___xxtofl@val
  5069   000EBA  C050  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  5070   000EBE  6A07               	clrf	(___xxtofl@val+2)^0,c
  5071   000EC0  6A08               	clrf	(___xxtofl@val+3)^0,c
  5072   000EC2  0E00               	movlw	0
  5073   000EC4  EC24  F018         	call	___xxtofl
  5074   000EC8  C005  F070         	movff	?___xxtofl,colorDetect@whiteG
  5075   000ECC  C006  F071         	movff	?___xxtofl+1,colorDetect@whiteG+1
  5076   000ED0  C007  F072         	movff	?___xxtofl+2,colorDetect@whiteG+2
  5077   000ED4  C008  F073         	movff	?___xxtofl+3,colorDetect@whiteG+3
  5078   000ED8                     
  5079                           ;MazeRobot.X/color.c: 141:         float whiteB = whiteRGBVal->B;
  5080   000ED8  0100               	movlb	0	; () banked
  5081   000EDA  EE20 F004          	lfsr	2,4
  5082   000EDE  5166               	movf	colorDetect@whiteRGBVal& (0+255),w,b
  5083   000EE0  26D9               	addwf	fsr2l,f,c
  5084   000EE2  5167               	movf	(colorDetect@whiteRGBVal+1)& (0+255),w,b
  5085   000EE4  22DA               	addwfc	fsr2h,f,c
  5086   000EE6  CFDE F04F          	movff	postinc2,??_colorDetect
  5087   000EEA  CFDD F050          	movff	postdec2,??_colorDetect+1
  5088   000EEE  C04F  F005         	movff	??_colorDetect,___xxtofl@val
  5089   000EF2  C050  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  5090   000EF6  6A07               	clrf	(___xxtofl@val+2)^0,c
  5091   000EF8  6A08               	clrf	(___xxtofl@val+3)^0,c
  5092   000EFA  0E00               	movlw	0
  5093   000EFC  EC24  F018         	call	___xxtofl
  5094   000F00  C005  F074         	movff	?___xxtofl,colorDetect@whiteB
  5095   000F04  C006  F075         	movff	?___xxtofl+1,colorDetect@whiteB+1
  5096   000F08  C007  F076         	movff	?___xxtofl+2,colorDetect@whiteB+2
  5097   000F0C  C008  F077         	movff	?___xxtofl+3,colorDetect@whiteB+3
  5098   000F10  0100               	movlb	0	; () banked
  5099   000F12  EE20 F006          	lfsr	2,6
  5100   000F16  5166               	movf	colorDetect@whiteRGBVal& (0+255),w,b
  5101   000F18  26D9               	addwf	fsr2l,f,c
  5102   000F1A  5167               	movf	(colorDetect@whiteRGBVal+1)& (0+255),w,b
  5103   000F1C  22DA               	addwfc	fsr2h,f,c
  5104   000F1E  CFDE F04F          	movff	postinc2,??_colorDetect
  5105   000F22  CFDD F050          	movff	postdec2,??_colorDetect+1
  5106   000F26  C04F  F005         	movff	??_colorDetect,___xxtofl@val
  5107   000F2A  C050  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  5108   000F2E  6A07               	clrf	(___xxtofl@val+2)^0,c
  5109   000F30  6A08               	clrf	(___xxtofl@val+3)^0,c
  5110   000F32  0E00               	movlw	0
  5111   000F34  EC24  F018         	call	___xxtofl
  5112   000F38                     
  5113                           ;MazeRobot.X/color.c: 144:         float redPrint = (RGBVal.R-ambientR)/((whiteR-(float)
      +                          ambientR)*(clearRef));
  5114   000F38  0100               	movlb	0	; () banked
  5115   000F3A  5178               	movf	colorDetect@ambientR& (0+255),w,b
  5116   000F3C  5D80               	subwf	colorDetect@RGBVal& (0+255),w,b
  5117   000F3E  6E4F               	movwf	??_colorDetect^0,c
  5118   000F40  5179               	movf	(colorDetect@ambientR+1)& (0+255),w,b
  5119   000F42  5981               	subwfb	(colorDetect@RGBVal+1)& (0+255),w,b
  5120   000F44  6E50               	movwf	(??_colorDetect+1)^0,c
  5121   000F46  C04F  F005         	movff	??_colorDetect,___xxtofl@val
  5122   000F4A  C050  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  5123   000F4E  6A07               	clrf	(___xxtofl@val+2)^0,c
  5124   000F50  6A08               	clrf	(___xxtofl@val+3)^0,c
  5125   000F52  0E00               	movlw	0
  5126   000F54  EC24  F018         	call	___xxtofl
  5127   000F58  C005  F036         	movff	?___xxtofl,___fldiv@b
  5128   000F5C  C006  F037         	movff	?___xxtofl+1,___fldiv@b+1
  5129   000F60  C007  F038         	movff	?___xxtofl+2,___fldiv@b+2
  5130   000F64  C008  F039         	movff	?___xxtofl+3,___fldiv@b+3
  5131   000F68  C060  F021         	movff	colorDetect@clearRef,___flmul@a
  5132   000F6C  C061  F022         	movff	colorDetect@clearRef+1,___flmul@a+1
  5133   000F70  C062  F023         	movff	colorDetect@clearRef+2,___flmul@a+2
  5134   000F74  C063  F024         	movff	colorDetect@clearRef+3,___flmul@a+3
  5135   000F78  C078  F005         	movff	colorDetect@ambientR,___xxtofl@val
  5136   000F7C  C079  F006         	movff	colorDetect@ambientR+1,___xxtofl@val+1
  5137   000F80  6A07               	clrf	(___xxtofl@val+2)^0,c
  5138   000F82  6A08               	clrf	(___xxtofl@val+3)^0,c
  5139   000F84  0E00               	movlw	0
  5140   000F86  EC24  F018         	call	___xxtofl
  5141   000F8A  C005  F019         	movff	?___xxtofl,___flsub@a
  5142   000F8E  C006  F01A         	movff	?___xxtofl+1,___flsub@a+1
  5143   000F92  C007  F01B         	movff	?___xxtofl+2,___flsub@a+2
  5144   000F96  C008  F01C         	movff	?___xxtofl+3,___flsub@a+3
  5145   000F9A  C06C  F015         	movff	colorDetect@whiteR,___flsub@b
  5146   000F9E  C06D  F016         	movff	colorDetect@whiteR+1,___flsub@b+1
  5147   000FA2  C06E  F017         	movff	colorDetect@whiteR+2,___flsub@b+2
  5148   000FA6  C06F  F018         	movff	colorDetect@whiteR+3,___flsub@b+3
  5149   000FAA  ECEF  F024         	call	___flsub	;wreg free
  5150   000FAE  C015  F01D         	movff	?___flsub,___flmul@b
  5151   000FB2  C016  F01E         	movff	?___flsub+1,___flmul@b+1
  5152   000FB6  C017  F01F         	movff	?___flsub+2,___flmul@b+2
  5153   000FBA  C018  F020         	movff	?___flsub+3,___flmul@b+3
  5154   000FBE  EC97  F011         	call	___flmul	;wreg free
  5155   000FC2  C01D  F03A         	movff	?___flmul,___fldiv@a
  5156   000FC6  C01E  F03B         	movff	?___flmul+1,___fldiv@a+1
  5157   000FCA  C01F  F03C         	movff	?___flmul+2,___fldiv@a+2
  5158   000FCE  C020  F03D         	movff	?___flmul+3,___fldiv@a+3
  5159   000FD2  ECAC  F013         	call	___fldiv	;wreg free
  5160   000FD6  C036  F088         	movff	?___fldiv,colorDetect@redPrint
  5161   000FDA  C037  F089         	movff	?___fldiv+1,colorDetect@redPrint+1
  5162   000FDE  C038  F08A         	movff	?___fldiv+2,colorDetect@redPrint+2
  5163   000FE2  C039  F08B         	movff	?___fldiv+3,colorDetect@redPrint+3
  5164   000FE6                     
  5165                           ;MazeRobot.X/color.c: 145:         float greenPrint = (RGBVal.G-ambientG)/((whiteG-(floa
      +                          t)ambientG)*(clearRef));
  5166   000FE6  0100               	movlb	0	; () banked
  5167   000FE8  517A               	movf	colorDetect@ambientG& (0+255),w,b
  5168   000FEA  5D82               	subwf	(colorDetect@RGBVal+2)& (0+255),w,b
  5169   000FEC  6E4F               	movwf	??_colorDetect^0,c
  5170   000FEE  517B               	movf	(colorDetect@ambientG+1)& (0+255),w,b
  5171   000FF0  5983               	subwfb	(colorDetect@RGBVal+3)& (0+255),w,b
  5172   000FF2  6E50               	movwf	(??_colorDetect+1)^0,c
  5173   000FF4  C04F  F005         	movff	??_colorDetect,___xxtofl@val
  5174   000FF8  C050  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  5175   000FFC  6A07               	clrf	(___xxtofl@val+2)^0,c
  5176   000FFE  6A08               	clrf	(___xxtofl@val+3)^0,c
  5177   001000  0E00               	movlw	0
  5178   001002  EC24  F018         	call	___xxtofl
  5179   001006  C005  F036         	movff	?___xxtofl,___fldiv@b
  5180   00100A  C006  F037         	movff	?___xxtofl+1,___fldiv@b+1
  5181   00100E  C007  F038         	movff	?___xxtofl+2,___fldiv@b+2
  5182   001012  C008  F039         	movff	?___xxtofl+3,___fldiv@b+3
  5183   001016  C060  F021         	movff	colorDetect@clearRef,___flmul@a
  5184   00101A  C061  F022         	movff	colorDetect@clearRef+1,___flmul@a+1
  5185   00101E  C062  F023         	movff	colorDetect@clearRef+2,___flmul@a+2
  5186   001022  C063  F024         	movff	colorDetect@clearRef+3,___flmul@a+3
  5187   001026  C07A  F005         	movff	colorDetect@ambientG,___xxtofl@val
  5188   00102A  C07B  F006         	movff	colorDetect@ambientG+1,___xxtofl@val+1
  5189   00102E  6A07               	clrf	(___xxtofl@val+2)^0,c
  5190   001030  6A08               	clrf	(___xxtofl@val+3)^0,c
  5191   001032  0E00               	movlw	0
  5192   001034  EC24  F018         	call	___xxtofl
  5193   001038  C005  F019         	movff	?___xxtofl,___flsub@a
  5194   00103C  C006  F01A         	movff	?___xxtofl+1,___flsub@a+1
  5195   001040  C007  F01B         	movff	?___xxtofl+2,___flsub@a+2
  5196   001044  C008  F01C         	movff	?___xxtofl+3,___flsub@a+3
  5197   001048  C070  F015         	movff	colorDetect@whiteG,___flsub@b
  5198   00104C  C071  F016         	movff	colorDetect@whiteG+1,___flsub@b+1
  5199   001050  C072  F017         	movff	colorDetect@whiteG+2,___flsub@b+2
  5200   001054  C073  F018         	movff	colorDetect@whiteG+3,___flsub@b+3
  5201   001058  ECEF  F024         	call	___flsub	;wreg free
  5202   00105C  C015  F01D         	movff	?___flsub,___flmul@b
  5203   001060  C016  F01E         	movff	?___flsub+1,___flmul@b+1
  5204   001064  C017  F01F         	movff	?___flsub+2,___flmul@b+2
  5205   001068  C018  F020         	movff	?___flsub+3,___flmul@b+3
  5206   00106C  EC97  F011         	call	___flmul	;wreg free
  5207   001070  C01D  F03A         	movff	?___flmul,___fldiv@a
  5208   001074  C01E  F03B         	movff	?___flmul+1,___fldiv@a+1
  5209   001078  C01F  F03C         	movff	?___flmul+2,___fldiv@a+2
  5210   00107C  C020  F03D         	movff	?___flmul+3,___fldiv@a+3
  5211   001080  ECAC  F013         	call	___fldiv	;wreg free
  5212   001084  C036  F08C         	movff	?___fldiv,colorDetect@greenPrint
  5213   001088  C037  F08D         	movff	?___fldiv+1,colorDetect@greenPrint+1
  5214   00108C  C038  F08E         	movff	?___fldiv+2,colorDetect@greenPrint+2
  5215   001090  C039  F08F         	movff	?___fldiv+3,colorDetect@greenPrint+3
  5216   001094                     
  5217                           ;MazeRobot.X/color.c: 146:         float bluePrint = (RGBVal.B-ambientB)/((whiteB-(float
      +                          )ambientB)*(clearRef));
  5218   001094  0100               	movlb	0	; () banked
  5219   001096  517C               	movf	colorDetect@ambientB& (0+255),w,b
  5220   001098  5D84               	subwf	(colorDetect@RGBVal+4)& (0+255),w,b
  5221   00109A  6E4F               	movwf	??_colorDetect^0,c
  5222   00109C  517D               	movf	(colorDetect@ambientB+1)& (0+255),w,b
  5223   00109E  5985               	subwfb	(colorDetect@RGBVal+5)& (0+255),w,b
  5224   0010A0  6E50               	movwf	(??_colorDetect+1)^0,c
  5225   0010A2  C04F  F005         	movff	??_colorDetect,___xxtofl@val
  5226   0010A6  C050  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  5227   0010AA  6A07               	clrf	(___xxtofl@val+2)^0,c
  5228   0010AC  6A08               	clrf	(___xxtofl@val+3)^0,c
  5229   0010AE  0E00               	movlw	0
  5230   0010B0  EC24  F018         	call	___xxtofl
  5231   0010B4  C005  F036         	movff	?___xxtofl,___fldiv@b
  5232   0010B8  C006  F037         	movff	?___xxtofl+1,___fldiv@b+1
  5233   0010BC  C007  F038         	movff	?___xxtofl+2,___fldiv@b+2
  5234   0010C0  C008  F039         	movff	?___xxtofl+3,___fldiv@b+3
  5235   0010C4  C060  F021         	movff	colorDetect@clearRef,___flmul@a
  5236   0010C8  C061  F022         	movff	colorDetect@clearRef+1,___flmul@a+1
  5237   0010CC  C062  F023         	movff	colorDetect@clearRef+2,___flmul@a+2
  5238   0010D0  C063  F024         	movff	colorDetect@clearRef+3,___flmul@a+3
  5239   0010D4  C07C  F005         	movff	colorDetect@ambientB,___xxtofl@val
  5240   0010D8  C07D  F006         	movff	colorDetect@ambientB+1,___xxtofl@val+1
  5241   0010DC  6A07               	clrf	(___xxtofl@val+2)^0,c
  5242   0010DE  6A08               	clrf	(___xxtofl@val+3)^0,c
  5243   0010E0  0E00               	movlw	0
  5244   0010E2  EC24  F018         	call	___xxtofl
  5245   0010E6  C005  F019         	movff	?___xxtofl,___flsub@a
  5246   0010EA  C006  F01A         	movff	?___xxtofl+1,___flsub@a+1
  5247   0010EE  C007  F01B         	movff	?___xxtofl+2,___flsub@a+2
  5248   0010F2  C008  F01C         	movff	?___xxtofl+3,___flsub@a+3
  5249   0010F6  C074  F015         	movff	colorDetect@whiteB,___flsub@b
  5250   0010FA  C075  F016         	movff	colorDetect@whiteB+1,___flsub@b+1
  5251   0010FE  C076  F017         	movff	colorDetect@whiteB+2,___flsub@b+2
  5252   001102  C077  F018         	movff	colorDetect@whiteB+3,___flsub@b+3
  5253   001106  ECEF  F024         	call	___flsub	;wreg free
  5254   00110A  C015  F01D         	movff	?___flsub,___flmul@b
  5255   00110E  C016  F01E         	movff	?___flsub+1,___flmul@b+1
  5256   001112  C017  F01F         	movff	?___flsub+2,___flmul@b+2
  5257   001116  C018  F020         	movff	?___flsub+3,___flmul@b+3
  5258   00111A  EC97  F011         	call	___flmul	;wreg free
  5259   00111E  C01D  F03A         	movff	?___flmul,___fldiv@a
  5260   001122  C01E  F03B         	movff	?___flmul+1,___fldiv@a+1
  5261   001126  C01F  F03C         	movff	?___flmul+2,___fldiv@a+2
  5262   00112A  C020  F03D         	movff	?___flmul+3,___fldiv@a+3
  5263   00112E  ECAC  F013         	call	___fldiv	;wreg free
  5264   001132  C036  F090         	movff	?___fldiv,colorDetect@bluePrint
  5265   001136  C037  F091         	movff	?___fldiv+1,colorDetect@bluePrint+1
  5266   00113A  C038  F092         	movff	?___fldiv+2,colorDetect@bluePrint+2
  5267   00113E  C039  F093         	movff	?___fldiv+3,colorDetect@bluePrint+3
  5268   001142                     
  5269                           ;MazeRobot.X/color.c: 148:         unsigned int colour_ref = 11;
  5270   001142  0E00               	movlw	0
  5271   001144  0100               	movlb	0	; () banked
  5272   001146  6F7F               	movwf	(colorDetect@colour_ref+1)& (0+255),b
  5273   001148  0E0B               	movlw	11
  5274   00114A  6F7E               	movwf	colorDetect@colour_ref& (0+255),b
  5275   00114C                     
  5276                           ; BSR set to: 0
  5277                           ;MazeRobot.X/color.c: 150:         if ((redPrint < 0) | (redPrint > 2)) { redPrint = 0.0
      +                          ;}
  5278   00114C  BF8B               	btfsc	(colorDetect@redPrint+3)& (0+255),7,b
  5279   00114E  EFAB  F008         	goto	u5451
  5280   001152  EFAD  F008         	goto	u5450
  5281   001156                     u5451:
  5282   001156  EFC6  F008         	goto	l5045
  5283   00115A                     u5450:
  5284   00115A                     
  5285                           ; BSR set to: 0
  5286   00115A  0E00               	movlw	0
  5287   00115C  6E1D               	movwf	___flge@ff1^0,c
  5288   00115E  0E00               	movlw	0
  5289   001160  6E1E               	movwf	(___flge@ff1+1)^0,c
  5290   001162  0E00               	movlw	0
  5291   001164  6E1F               	movwf	(___flge@ff1+2)^0,c
  5292   001166  0E40               	movlw	64
  5293   001168  6E20               	movwf	(___flge@ff1+3)^0,c
  5294   00116A  C088  F021         	movff	colorDetect@redPrint,___flge@ff2
  5295   00116E  C089  F022         	movff	colorDetect@redPrint+1,___flge@ff2+1
  5296   001172  C08A  F023         	movff	colorDetect@redPrint+2,___flge@ff2+2
  5297   001176  C08B  F024         	movff	colorDetect@redPrint+3,___flge@ff2+3
  5298   00117A  ECF2  F01E         	call	___flge	;wreg free
  5299   00117E  B0D8               	btfsc	status,0,c
  5300   001180  EFC4  F008         	goto	u5461
  5301   001184  EFC6  F008         	goto	u5460
  5302   001188                     u5461:
  5303   001188  EFCF  F008         	goto	l5047
  5304   00118C                     u5460:
  5305   00118C                     l5045:
  5306   00118C  0E00               	movlw	0
  5307   00118E  0100               	movlb	0	; () banked
  5308   001190  6F88               	movwf	colorDetect@redPrint& (0+255),b
  5309   001192  0E00               	movlw	0
  5310   001194  6F89               	movwf	(colorDetect@redPrint+1)& (0+255),b
  5311   001196  0E00               	movlw	0
  5312   001198  6F8A               	movwf	(colorDetect@redPrint+2)& (0+255),b
  5313   00119A  0E00               	movlw	0
  5314   00119C  6F8B               	movwf	(colorDetect@redPrint+3)& (0+255),b
  5315   00119E                     l5047:
  5316                           
  5317                           ;MazeRobot.X/color.c: 151:         if ((greenPrint < 0) | (greenPrint > 2)) {greenPrint 
      +                          = 0.0;}
  5318   00119E  0100               	movlb	0	; () banked
  5319   0011A0  BF8F               	btfsc	(colorDetect@greenPrint+3)& (0+255),7,b
  5320   0011A2  EFD5  F008         	goto	u5471
  5321   0011A6  EFD7  F008         	goto	u5470
  5322   0011AA                     u5471:
  5323   0011AA  EFF0  F008         	goto	l5051
  5324   0011AE                     u5470:
  5325   0011AE                     
  5326                           ; BSR set to: 0
  5327   0011AE  0E00               	movlw	0
  5328   0011B0  6E1D               	movwf	___flge@ff1^0,c
  5329   0011B2  0E00               	movlw	0
  5330   0011B4  6E1E               	movwf	(___flge@ff1+1)^0,c
  5331   0011B6  0E00               	movlw	0
  5332   0011B8  6E1F               	movwf	(___flge@ff1+2)^0,c
  5333   0011BA  0E40               	movlw	64
  5334   0011BC  6E20               	movwf	(___flge@ff1+3)^0,c
  5335   0011BE  C08C  F021         	movff	colorDetect@greenPrint,___flge@ff2
  5336   0011C2  C08D  F022         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  5337   0011C6  C08E  F023         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  5338   0011CA  C08F  F024         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  5339   0011CE  ECF2  F01E         	call	___flge	;wreg free
  5340   0011D2  B0D8               	btfsc	status,0,c
  5341   0011D4  EFEE  F008         	goto	u5481
  5342   0011D8  EFF0  F008         	goto	u5480
  5343   0011DC                     u5481:
  5344   0011DC  EFF9  F008         	goto	l5053
  5345   0011E0                     u5480:
  5346   0011E0                     l5051:
  5347   0011E0  0E00               	movlw	0
  5348   0011E2  0100               	movlb	0	; () banked
  5349   0011E4  6F8C               	movwf	colorDetect@greenPrint& (0+255),b
  5350   0011E6  0E00               	movlw	0
  5351   0011E8  6F8D               	movwf	(colorDetect@greenPrint+1)& (0+255),b
  5352   0011EA  0E00               	movlw	0
  5353   0011EC  6F8E               	movwf	(colorDetect@greenPrint+2)& (0+255),b
  5354   0011EE  0E00               	movlw	0
  5355   0011F0  6F8F               	movwf	(colorDetect@greenPrint+3)& (0+255),b
  5356   0011F2                     l5053:
  5357                           
  5358                           ;MazeRobot.X/color.c: 152:         if ((bluePrint < 0) | (bluePrint > 2)){ bluePrint = 0
      +                          .0;}
  5359   0011F2  0100               	movlb	0	; () banked
  5360   0011F4  BF93               	btfsc	(colorDetect@bluePrint+3)& (0+255),7,b
  5361   0011F6  EFFF  F008         	goto	u5491
  5362   0011FA  EF01  F009         	goto	u5490
  5363   0011FE                     u5491:
  5364   0011FE  EF1A  F009         	goto	l5057
  5365   001202                     u5490:
  5366   001202                     
  5367                           ; BSR set to: 0
  5368   001202  0E00               	movlw	0
  5369   001204  6E1D               	movwf	___flge@ff1^0,c
  5370   001206  0E00               	movlw	0
  5371   001208  6E1E               	movwf	(___flge@ff1+1)^0,c
  5372   00120A  0E00               	movlw	0
  5373   00120C  6E1F               	movwf	(___flge@ff1+2)^0,c
  5374   00120E  0E40               	movlw	64
  5375   001210  6E20               	movwf	(___flge@ff1+3)^0,c
  5376   001212  C090  F021         	movff	colorDetect@bluePrint,___flge@ff2
  5377   001216  C091  F022         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  5378   00121A  C092  F023         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  5379   00121E  C093  F024         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  5380   001222  ECF2  F01E         	call	___flge	;wreg free
  5381   001226  B0D8               	btfsc	status,0,c
  5382   001228  EF18  F009         	goto	u5501
  5383   00122C  EF1A  F009         	goto	u5500
  5384   001230                     u5501:
  5385   001230  EF23  F009         	goto	l5059
  5386   001234                     u5500:
  5387   001234                     l5057:
  5388   001234  0E00               	movlw	0
  5389   001236  0100               	movlb	0	; () banked
  5390   001238  6F90               	movwf	colorDetect@bluePrint& (0+255),b
  5391   00123A  0E00               	movlw	0
  5392   00123C  6F91               	movwf	(colorDetect@bluePrint+1)& (0+255),b
  5393   00123E  0E00               	movlw	0
  5394   001240  6F92               	movwf	(colorDetect@bluePrint+2)& (0+255),b
  5395   001242  0E00               	movlw	0
  5396   001244  6F93               	movwf	(colorDetect@bluePrint+3)& (0+255),b
  5397   001246                     l5059:
  5398                           
  5399                           ;MazeRobot.X/color.c: 155:         if ((redPrint > 0.9) & (greenPrint > 0.9) & (bluePrin
      +                          t > 0.9)){
  5400   001246  0E66               	movlw	102
  5401   001248  6E1D               	movwf	___flge@ff1^0,c
  5402   00124A  0E66               	movlw	102
  5403   00124C  6E1E               	movwf	(___flge@ff1+1)^0,c
  5404   00124E  0E66               	movlw	102
  5405   001250  6E1F               	movwf	(___flge@ff1+2)^0,c
  5406   001252  0E3F               	movlw	63
  5407   001254  6E20               	movwf	(___flge@ff1+3)^0,c
  5408   001256  C088  F021         	movff	colorDetect@redPrint,___flge@ff2
  5409   00125A  C089  F022         	movff	colorDetect@redPrint+1,___flge@ff2+1
  5410   00125E  C08A  F023         	movff	colorDetect@redPrint+2,___flge@ff2+2
  5411   001262  C08B  F024         	movff	colorDetect@redPrint+3,___flge@ff2+3
  5412   001266  ECF2  F01E         	call	___flge	;wreg free
  5413   00126A  B0D8               	btfsc	status,0,c
  5414   00126C  EF3A  F009         	goto	u5511
  5415   001270  EF3C  F009         	goto	u5510
  5416   001274                     u5511:
  5417   001274  EF75  F009         	goto	l5067
  5418   001278                     u5510:
  5419   001278  0E66               	movlw	102
  5420   00127A  6E1D               	movwf	___flge@ff1^0,c
  5421   00127C  0E66               	movlw	102
  5422   00127E  6E1E               	movwf	(___flge@ff1+1)^0,c
  5423   001280  0E66               	movlw	102
  5424   001282  6E1F               	movwf	(___flge@ff1+2)^0,c
  5425   001284  0E3F               	movlw	63
  5426   001286  6E20               	movwf	(___flge@ff1+3)^0,c
  5427   001288  C08C  F021         	movff	colorDetect@greenPrint,___flge@ff2
  5428   00128C  C08D  F022         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  5429   001290  C08E  F023         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  5430   001294  C08F  F024         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  5431   001298  ECF2  F01E         	call	___flge	;wreg free
  5432   00129C  B0D8               	btfsc	status,0,c
  5433   00129E  EF53  F009         	goto	u5521
  5434   0012A2  EF55  F009         	goto	u5520
  5435   0012A6                     u5521:
  5436   0012A6  EF75  F009         	goto	l5067
  5437   0012AA                     u5520:
  5438   0012AA  0E66               	movlw	102
  5439   0012AC  6E1D               	movwf	___flge@ff1^0,c
  5440   0012AE  0E66               	movlw	102
  5441   0012B0  6E1E               	movwf	(___flge@ff1+1)^0,c
  5442   0012B2  0E66               	movlw	102
  5443   0012B4  6E1F               	movwf	(___flge@ff1+2)^0,c
  5444   0012B6  0E3F               	movlw	63
  5445   0012B8  6E20               	movwf	(___flge@ff1+3)^0,c
  5446   0012BA  C090  F021         	movff	colorDetect@bluePrint,___flge@ff2
  5447   0012BE  C091  F022         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  5448   0012C2  C092  F023         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  5449   0012C6  C093  F024         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  5450   0012CA  ECF2  F01E         	call	___flge	;wreg free
  5451   0012CE  B0D8               	btfsc	status,0,c
  5452   0012D0  EF6C  F009         	goto	u5531
  5453   0012D4  EF6E  F009         	goto	u5530
  5454   0012D8                     u5531:
  5455   0012D8  EF75  F009         	goto	l5067
  5456   0012DC                     u5530:
  5457   0012DC                     
  5458                           ;MazeRobot.X/color.c: 156:         colour_ref = 8;
  5459   0012DC  0E00               	movlw	0
  5460   0012DE  0100               	movlb	0	; () banked
  5461   0012E0  6F7F               	movwf	(colorDetect@colour_ref+1)& (0+255),b
  5462   0012E2  0E08               	movlw	8
  5463   0012E4  6F7E               	movwf	colorDetect@colour_ref& (0+255),b
  5464                           
  5465                           ;MazeRobot.X/color.c: 157:         }
  5466   0012E6  EFF9  F00C         	goto	l5169
  5467   0012EA                     l5067:
  5468   0012EA  0E00               	movlw	0
  5469   0012EC  6E1D               	movwf	___flge@ff1^0,c
  5470   0012EE  0E00               	movlw	0
  5471   0012F0  6E1E               	movwf	(___flge@ff1+1)^0,c
  5472   0012F2  0EC0               	movlw	192
  5473   0012F4  6E1F               	movwf	(___flge@ff1+2)^0,c
  5474   0012F6  0E3F               	movlw	63
  5475   0012F8  6E20               	movwf	(___flge@ff1+3)^0,c
  5476   0012FA  C088  F021         	movff	colorDetect@redPrint,___flge@ff2
  5477   0012FE  C089  F022         	movff	colorDetect@redPrint+1,___flge@ff2+1
  5478   001302  C08A  F023         	movff	colorDetect@redPrint+2,___flge@ff2+2
  5479   001306  C08B  F024         	movff	colorDetect@redPrint+3,___flge@ff2+3
  5480   00130A  ECF2  F01E         	call	___flge	;wreg free
  5481   00130E  B0D8               	btfsc	status,0,c
  5482   001310  EF8C  F009         	goto	u5541
  5483   001314  EF8E  F009         	goto	u5540
  5484   001318                     u5541:
  5485   001318  EF03  F00A         	goto	l5081
  5486   00131C                     u5540:
  5487   00131C  0ECD               	movlw	205
  5488   00131E  6E1D               	movwf	___flge@ff1^0,c
  5489   001320  0ECC               	movlw	204
  5490   001322  6E1E               	movwf	(___flge@ff1+1)^0,c
  5491   001324  0E4C               	movlw	76
  5492   001326  6E1F               	movwf	(___flge@ff1+2)^0,c
  5493   001328  0E3F               	movlw	63
  5494   00132A  6E20               	movwf	(___flge@ff1+3)^0,c
  5495   00132C  C08C  F019         	movff	colorDetect@greenPrint,___flsub@a
  5496   001330  C08D  F01A         	movff	colorDetect@greenPrint+1,___flsub@a+1
  5497   001334  C08E  F01B         	movff	colorDetect@greenPrint+2,___flsub@a+2
  5498   001338  C08F  F01C         	movff	colorDetect@greenPrint+3,___flsub@a+3
  5499   00133C  C088  F015         	movff	colorDetect@redPrint,___flsub@b
  5500   001340  C089  F016         	movff	colorDetect@redPrint+1,___flsub@b+1
  5501   001344  C08A  F017         	movff	colorDetect@redPrint+2,___flsub@b+2
  5502   001348  C08B  F018         	movff	colorDetect@redPrint+3,___flsub@b+3
  5503   00134C  ECEF  F024         	call	___flsub	;wreg free
  5504   001350  C015  F021         	movff	?___flsub,___flge@ff2
  5505   001354  C016  F022         	movff	?___flsub+1,___flge@ff2+1
  5506   001358  C017  F023         	movff	?___flsub+2,___flge@ff2+2
  5507   00135C  C018  F024         	movff	?___flsub+3,___flge@ff2+3
  5508   001360  ECF2  F01E         	call	___flge	;wreg free
  5509   001364  B0D8               	btfsc	status,0,c
  5510   001366  EFB7  F009         	goto	u5551
  5511   00136A  EFB9  F009         	goto	u5550
  5512   00136E                     u5551:
  5513   00136E  EF03  F00A         	goto	l5081
  5514   001372                     u5550:
  5515   001372  0ECD               	movlw	205
  5516   001374  6E1D               	movwf	___flge@ff1^0,c
  5517   001376  0ECC               	movlw	204
  5518   001378  6E1E               	movwf	(___flge@ff1+1)^0,c
  5519   00137A  0E4C               	movlw	76
  5520   00137C  6E1F               	movwf	(___flge@ff1+2)^0,c
  5521   00137E  0E3F               	movlw	63
  5522   001380  6E20               	movwf	(___flge@ff1+3)^0,c
  5523   001382  C090  F019         	movff	colorDetect@bluePrint,___flsub@a
  5524   001386  C091  F01A         	movff	colorDetect@bluePrint+1,___flsub@a+1
  5525   00138A  C092  F01B         	movff	colorDetect@bluePrint+2,___flsub@a+2
  5526   00138E  C093  F01C         	movff	colorDetect@bluePrint+3,___flsub@a+3
  5527   001392  C088  F015         	movff	colorDetect@redPrint,___flsub@b
  5528   001396  C089  F016         	movff	colorDetect@redPrint+1,___flsub@b+1
  5529   00139A  C08A  F017         	movff	colorDetect@redPrint+2,___flsub@b+2
  5530   00139E  C08B  F018         	movff	colorDetect@redPrint+3,___flsub@b+3
  5531   0013A2  ECEF  F024         	call	___flsub	;wreg free
  5532   0013A6  C015  F021         	movff	?___flsub,___flge@ff2
  5533   0013AA  C016  F022         	movff	?___flsub+1,___flge@ff2+1
  5534   0013AE  C017  F023         	movff	?___flsub+2,___flge@ff2+2
  5535   0013B2  C018  F024         	movff	?___flsub+3,___flge@ff2+3
  5536   0013B6  ECF2  F01E         	call	___flge	;wreg free
  5537   0013BA  B0D8               	btfsc	status,0,c
  5538   0013BC  EFE2  F009         	goto	u5561
  5539   0013C0  EFE4  F009         	goto	u5560
  5540   0013C4                     u5561:
  5541   0013C4  EF03  F00A         	goto	l5081
  5542   0013C8                     u5560:
  5543   0013C8                     
  5544                           ;MazeRobot.X/color.c: 161:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5545   0013C8  0E2A               	movlw	42
  5546   0013CA  6E4F               	movwf	??_colorDetect^0,c
  5547   0013CC  0E8E               	movlw	142
  5548   0013CE                     u6137:
  5549   0013CE  2EE8               	decfsz	wreg,f,c
  5550   0013D0  D7FE               	bra	u6137
  5551   0013D2  2E4F               	decfsz	??_colorDetect^0,f,c
  5552   0013D4  D7FC               	bra	u6137
  5553   0013D6                     
  5554                           ;MazeRobot.X/color.c: 162:         turnRight_90(mL,mR);
  5555   0013D6  C068  F01E         	movff	colorDetect@mL,turnRight_90@mL
  5556   0013DA  C069  F01F         	movff	colorDetect@mL+1,turnRight_90@mL+1
  5557   0013DE  C06A  F020         	movff	colorDetect@mR,turnRight_90@mR
  5558   0013E2  C06B  F021         	movff	colorDetect@mR+1,turnRight_90@mR+1
  5559   0013E6  EC78  F01C         	call	_turnRight_90	;wreg free
  5560   0013EA                     
  5561                           ;MazeRobot.X/color.c: 163:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5562   0013EA  0E2A               	movlw	42
  5563   0013EC  6E4F               	movwf	??_colorDetect^0,c
  5564   0013EE  0E8E               	movlw	142
  5565   0013F0                     u6147:
  5566   0013F0  2EE8               	decfsz	wreg,f,c
  5567   0013F2  D7FE               	bra	u6147
  5568   0013F4  2E4F               	decfsz	??_colorDetect^0,f,c
  5569   0013F6  D7FC               	bra	u6147
  5570   0013F8                     
  5571                           ;MazeRobot.X/color.c: 164:         colour_ref = 1;
  5572   0013F8  0E00               	movlw	0
  5573   0013FA  0100               	movlb	0	; () banked
  5574   0013FC  6F7F               	movwf	(colorDetect@colour_ref+1)& (0+255),b
  5575   0013FE  0E01               	movlw	1
  5576   001400  6F7E               	movwf	colorDetect@colour_ref& (0+255),b
  5577                           
  5578                           ;MazeRobot.X/color.c: 166:         }
  5579   001402  EFF9  F00C         	goto	l5169
  5580   001406                     l5081:
  5581   001406  0ECD               	movlw	205
  5582   001408  6E1D               	movwf	___flge@ff1^0,c
  5583   00140A  0ECC               	movlw	204
  5584   00140C  6E1E               	movwf	(___flge@ff1+1)^0,c
  5585   00140E  0ECC               	movlw	204
  5586   001410  6E1F               	movwf	(___flge@ff1+2)^0,c
  5587   001412  0E3E               	movlw	62
  5588   001414  6E20               	movwf	(___flge@ff1+3)^0,c
  5589   001416  C088  F019         	movff	colorDetect@redPrint,___flsub@a
  5590   00141A  C089  F01A         	movff	colorDetect@redPrint+1,___flsub@a+1
  5591   00141E  C08A  F01B         	movff	colorDetect@redPrint+2,___flsub@a+2
  5592   001422  C08B  F01C         	movff	colorDetect@redPrint+3,___flsub@a+3
  5593   001426  C08C  F015         	movff	colorDetect@greenPrint,___flsub@b
  5594   00142A  C08D  F016         	movff	colorDetect@greenPrint+1,___flsub@b+1
  5595   00142E  C08E  F017         	movff	colorDetect@greenPrint+2,___flsub@b+2
  5596   001432  C08F  F018         	movff	colorDetect@greenPrint+3,___flsub@b+3
  5597   001436  ECEF  F024         	call	___flsub	;wreg free
  5598   00143A  C015  F021         	movff	?___flsub,___flge@ff2
  5599   00143E  C016  F022         	movff	?___flsub+1,___flge@ff2+1
  5600   001442  C017  F023         	movff	?___flsub+2,___flge@ff2+2
  5601   001446  C018  F024         	movff	?___flsub+3,___flge@ff2+3
  5602   00144A  ECF2  F01E         	call	___flge	;wreg free
  5603   00144E  B0D8               	btfsc	status,0,c
  5604   001450  EF2C  F00A         	goto	u5571
  5605   001454  EF2E  F00A         	goto	u5570
  5606   001458                     u5571:
  5607   001458  EF91  F00A         	goto	l5095
  5608   00145C                     u5570:
  5609   00145C  0E00               	movlw	0
  5610   00145E  6E1D               	movwf	___flge@ff1^0,c
  5611   001460  0E00               	movlw	0
  5612   001462  6E1E               	movwf	(___flge@ff1+1)^0,c
  5613   001464  0E80               	movlw	128
  5614   001466  6E1F               	movwf	(___flge@ff1+2)^0,c
  5615   001468  0E3F               	movlw	63
  5616   00146A  6E20               	movwf	(___flge@ff1+3)^0,c
  5617   00146C  C08C  F021         	movff	colorDetect@greenPrint,___flge@ff2
  5618   001470  C08D  F022         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  5619   001474  C08E  F023         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  5620   001478  C08F  F024         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  5621   00147C  ECF2  F01E         	call	___flge	;wreg free
  5622   001480  B0D8               	btfsc	status,0,c
  5623   001482  EF45  F00A         	goto	u5581
  5624   001486  EF47  F00A         	goto	u5580
  5625   00148A                     u5581:
  5626   00148A  EF91  F00A         	goto	l5095
  5627   00148E                     u5580:
  5628   00148E  0ECD               	movlw	205
  5629   001490  6E1D               	movwf	___flge@ff1^0,c
  5630   001492  0ECC               	movlw	204
  5631   001494  6E1E               	movwf	(___flge@ff1+1)^0,c
  5632   001496  0ECC               	movlw	204
  5633   001498  6E1F               	movwf	(___flge@ff1+2)^0,c
  5634   00149A  0E3E               	movlw	62
  5635   00149C  6E20               	movwf	(___flge@ff1+3)^0,c
  5636   00149E  C090  F019         	movff	colorDetect@bluePrint,___flsub@a
  5637   0014A2  C091  F01A         	movff	colorDetect@bluePrint+1,___flsub@a+1
  5638   0014A6  C092  F01B         	movff	colorDetect@bluePrint+2,___flsub@a+2
  5639   0014AA  C093  F01C         	movff	colorDetect@bluePrint+3,___flsub@a+3
  5640   0014AE  C08C  F015         	movff	colorDetect@greenPrint,___flsub@b
  5641   0014B2  C08D  F016         	movff	colorDetect@greenPrint+1,___flsub@b+1
  5642   0014B6  C08E  F017         	movff	colorDetect@greenPrint+2,___flsub@b+2
  5643   0014BA  C08F  F018         	movff	colorDetect@greenPrint+3,___flsub@b+3
  5644   0014BE  ECEF  F024         	call	___flsub	;wreg free
  5645   0014C2  C015  F021         	movff	?___flsub,___flge@ff2
  5646   0014C6  C016  F022         	movff	?___flsub+1,___flge@ff2+1
  5647   0014CA  C017  F023         	movff	?___flsub+2,___flge@ff2+2
  5648   0014CE  C018  F024         	movff	?___flsub+3,___flge@ff2+3
  5649   0014D2  ECF2  F01E         	call	___flge	;wreg free
  5650   0014D6  B0D8               	btfsc	status,0,c
  5651   0014D8  EF70  F00A         	goto	u5591
  5652   0014DC  EF72  F00A         	goto	u5590
  5653   0014E0                     u5591:
  5654   0014E0  EF91  F00A         	goto	l5095
  5655   0014E4                     u5590:
  5656   0014E4                     
  5657                           ;MazeRobot.X/color.c: 170:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5658   0014E4  0E2A               	movlw	42
  5659   0014E6  6E4F               	movwf	??_colorDetect^0,c
  5660   0014E8  0E8E               	movlw	142
  5661   0014EA                     u6157:
  5662   0014EA  2EE8               	decfsz	wreg,f,c
  5663   0014EC  D7FE               	bra	u6157
  5664   0014EE  2E4F               	decfsz	??_colorDetect^0,f,c
  5665   0014F0  D7FC               	bra	u6157
  5666   0014F2                     
  5667                           ;MazeRobot.X/color.c: 171:         turnLeft_90(mL,mR);
  5668   0014F2  C068  F01E         	movff	colorDetect@mL,turnLeft_90@mL
  5669   0014F6  C069  F01F         	movff	colorDetect@mL+1,turnLeft_90@mL+1
  5670   0014FA  C06A  F020         	movff	colorDetect@mR,turnLeft_90@mR
  5671   0014FE  C06B  F021         	movff	colorDetect@mR+1,turnLeft_90@mR+1
  5672   001502  EC17  F01D         	call	_turnLeft_90	;wreg free
  5673   001506                     
  5674                           ;MazeRobot.X/color.c: 172:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5675   001506  0E2A               	movlw	42
  5676   001508  6E4F               	movwf	??_colorDetect^0,c
  5677   00150A  0E8E               	movlw	142
  5678   00150C                     u6167:
  5679   00150C  2EE8               	decfsz	wreg,f,c
  5680   00150E  D7FE               	bra	u6167
  5681   001510  2E4F               	decfsz	??_colorDetect^0,f,c
  5682   001512  D7FC               	bra	u6167
  5683   001514                     
  5684                           ;MazeRobot.X/color.c: 173:         colour_ref = 2;
  5685   001514  0E00               	movlw	0
  5686   001516  0100               	movlb	0	; () banked
  5687   001518  6F7F               	movwf	(colorDetect@colour_ref+1)& (0+255),b
  5688   00151A  0E02               	movlw	2
  5689   00151C  6F7E               	movwf	colorDetect@colour_ref& (0+255),b
  5690                           
  5691                           ;MazeRobot.X/color.c: 174:         }
  5692   00151E  EFF9  F00C         	goto	l5169
  5693   001522                     l5095:
  5694   001522  0E33               	movlw	51
  5695   001524  6E1D               	movwf	___flge@ff1^0,c
  5696   001526  0E33               	movlw	51
  5697   001528  6E1E               	movwf	(___flge@ff1+1)^0,c
  5698   00152A  0E33               	movlw	51
  5699   00152C  6E1F               	movwf	(___flge@ff1+2)^0,c
  5700   00152E  0E3F               	movlw	63
  5701   001530  6E20               	movwf	(___flge@ff1+3)^0,c
  5702   001532  C088  F019         	movff	colorDetect@redPrint,___flsub@a
  5703   001536  C089  F01A         	movff	colorDetect@redPrint+1,___flsub@a+1
  5704   00153A  C08A  F01B         	movff	colorDetect@redPrint+2,___flsub@a+2
  5705   00153E  C08B  F01C         	movff	colorDetect@redPrint+3,___flsub@a+3
  5706   001542  C090  F015         	movff	colorDetect@bluePrint,___flsub@b
  5707   001546  C091  F016         	movff	colorDetect@bluePrint+1,___flsub@b+1
  5708   00154A  C092  F017         	movff	colorDetect@bluePrint+2,___flsub@b+2
  5709   00154E  C093  F018         	movff	colorDetect@bluePrint+3,___flsub@b+3
  5710   001552  ECEF  F024         	call	___flsub	;wreg free
  5711   001556  C015  F021         	movff	?___flsub,___flge@ff2
  5712   00155A  C016  F022         	movff	?___flsub+1,___flge@ff2+1
  5713   00155E  C017  F023         	movff	?___flsub+2,___flge@ff2+2
  5714   001562  C018  F024         	movff	?___flsub+3,___flge@ff2+3
  5715   001566  ECF2  F01E         	call	___flge	;wreg free
  5716   00156A  B0D8               	btfsc	status,0,c
  5717   00156C  EFBA  F00A         	goto	u5601
  5718   001570  EFBC  F00A         	goto	u5600
  5719   001574                     u5601:
  5720   001574  EF1F  F00B         	goto	l5109
  5721   001578                     u5600:
  5722   001578  0E9A               	movlw	154
  5723   00157A  6E1D               	movwf	___flge@ff1^0,c
  5724   00157C  0E99               	movlw	153
  5725   00157E  6E1E               	movwf	(___flge@ff1+1)^0,c
  5726   001580  0E99               	movlw	153
  5727   001582  6E1F               	movwf	(___flge@ff1+2)^0,c
  5728   001584  0E3E               	movlw	62
  5729   001586  6E20               	movwf	(___flge@ff1+3)^0,c
  5730   001588  C08C  F019         	movff	colorDetect@greenPrint,___flsub@a
  5731   00158C  C08D  F01A         	movff	colorDetect@greenPrint+1,___flsub@a+1
  5732   001590  C08E  F01B         	movff	colorDetect@greenPrint+2,___flsub@a+2
  5733   001594  C08F  F01C         	movff	colorDetect@greenPrint+3,___flsub@a+3
  5734   001598  C090  F015         	movff	colorDetect@bluePrint,___flsub@b
  5735   00159C  C091  F016         	movff	colorDetect@bluePrint+1,___flsub@b+1
  5736   0015A0  C092  F017         	movff	colorDetect@bluePrint+2,___flsub@b+2
  5737   0015A4  C093  F018         	movff	colorDetect@bluePrint+3,___flsub@b+3
  5738   0015A8  ECEF  F024         	call	___flsub	;wreg free
  5739   0015AC  C015  F021         	movff	?___flsub,___flge@ff2
  5740   0015B0  C016  F022         	movff	?___flsub+1,___flge@ff2+1
  5741   0015B4  C017  F023         	movff	?___flsub+2,___flge@ff2+2
  5742   0015B8  C018  F024         	movff	?___flsub+3,___flge@ff2+3
  5743   0015BC  ECF2  F01E         	call	___flge	;wreg free
  5744   0015C0  B0D8               	btfsc	status,0,c
  5745   0015C2  EFE5  F00A         	goto	u5611
  5746   0015C6  EFE7  F00A         	goto	u5610
  5747   0015CA                     u5611:
  5748   0015CA  EF1F  F00B         	goto	l5109
  5749   0015CE                     u5610:
  5750   0015CE  0E33               	movlw	51
  5751   0015D0  6E1D               	movwf	___flge@ff1^0,c
  5752   0015D2  0E33               	movlw	51
  5753   0015D4  6E1E               	movwf	(___flge@ff1+1)^0,c
  5754   0015D6  0E33               	movlw	51
  5755   0015D8  6E1F               	movwf	(___flge@ff1+2)^0,c
  5756   0015DA  0E3F               	movlw	63
  5757   0015DC  6E20               	movwf	(___flge@ff1+3)^0,c
  5758   0015DE  C090  F021         	movff	colorDetect@bluePrint,___flge@ff2
  5759   0015E2  C091  F022         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  5760   0015E6  C092  F023         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  5761   0015EA  C093  F024         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  5762   0015EE  ECF2  F01E         	call	___flge	;wreg free
  5763   0015F2  B0D8               	btfsc	status,0,c
  5764   0015F4  EFFE  F00A         	goto	u5621
  5765   0015F8  EF00  F00B         	goto	u5620
  5766   0015FC                     u5621:
  5767   0015FC  EF1F  F00B         	goto	l5109
  5768   001600                     u5620:
  5769   001600                     
  5770                           ;MazeRobot.X/color.c: 178:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5771   001600  0E2A               	movlw	42
  5772   001602  6E4F               	movwf	??_colorDetect^0,c
  5773   001604  0E8E               	movlw	142
  5774   001606                     u6177:
  5775   001606  2EE8               	decfsz	wreg,f,c
  5776   001608  D7FE               	bra	u6177
  5777   00160A  2E4F               	decfsz	??_colorDetect^0,f,c
  5778   00160C  D7FC               	bra	u6177
  5779   00160E                     
  5780                           ;MazeRobot.X/color.c: 179:         turn_180(mL,mR);
  5781   00160E  C068  F01E         	movff	colorDetect@mL,turn_180@mL
  5782   001612  C069  F01F         	movff	colorDetect@mL+1,turn_180@mL+1
  5783   001616  C06A  F020         	movff	colorDetect@mR,turn_180@mR
  5784   00161A  C06B  F021         	movff	colorDetect@mR+1,turn_180@mR+1
  5785   00161E  ECD9  F01B         	call	_turn_180	;wreg free
  5786   001622                     
  5787                           ;MazeRobot.X/color.c: 180:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5788   001622  0E2A               	movlw	42
  5789   001624  6E4F               	movwf	??_colorDetect^0,c
  5790   001626  0E8E               	movlw	142
  5791   001628                     u6187:
  5792   001628  2EE8               	decfsz	wreg,f,c
  5793   00162A  D7FE               	bra	u6187
  5794   00162C  2E4F               	decfsz	??_colorDetect^0,f,c
  5795   00162E  D7FC               	bra	u6187
  5796   001630                     
  5797                           ;MazeRobot.X/color.c: 181:         colour_ref = 3;
  5798   001630  0E00               	movlw	0
  5799   001632  0100               	movlb	0	; () banked
  5800   001634  6F7F               	movwf	(colorDetect@colour_ref+1)& (0+255),b
  5801   001636  0E03               	movlw	3
  5802   001638  6F7E               	movwf	colorDetect@colour_ref& (0+255),b
  5803                           
  5804                           ;MazeRobot.X/color.c: 182:         }
  5805   00163A  EFF9  F00C         	goto	l5169
  5806   00163E                     l5109:
  5807   00163E  0E00               	movlw	0
  5808   001640  6E1D               	movwf	___flge@ff1^0,c
  5809   001642  0E00               	movlw	0
  5810   001644  6E1E               	movwf	(___flge@ff1+1)^0,c
  5811   001646  0E80               	movlw	128
  5812   001648  6E1F               	movwf	(___flge@ff1+2)^0,c
  5813   00164A  0E3F               	movlw	63
  5814   00164C  6E20               	movwf	(___flge@ff1+3)^0,c
  5815   00164E  C088  F021         	movff	colorDetect@redPrint,___flge@ff2
  5816   001652  C089  F022         	movff	colorDetect@redPrint+1,___flge@ff2+1
  5817   001656  C08A  F023         	movff	colorDetect@redPrint+2,___flge@ff2+2
  5818   00165A  C08B  F024         	movff	colorDetect@redPrint+3,___flge@ff2+3
  5819   00165E  ECF2  F01E         	call	___flge	;wreg free
  5820   001662  B0D8               	btfsc	status,0,c
  5821   001664  EF36  F00B         	goto	u5631
  5822   001668  EF38  F00B         	goto	u5630
  5823   00166C                     u5631:
  5824   00166C  EF89  F00B         	goto	l5123
  5825   001670                     u5630:
  5826   001670  0ECD               	movlw	205
  5827   001672  6E1D               	movwf	___flge@ff1^0,c
  5828   001674  0ECC               	movlw	204
  5829   001676  6E1E               	movwf	(___flge@ff1+1)^0,c
  5830   001678  0E4C               	movlw	76
  5831   00167A  6E1F               	movwf	(___flge@ff1+2)^0,c
  5832   00167C  0E3F               	movlw	63
  5833   00167E  6E20               	movwf	(___flge@ff1+3)^0,c
  5834   001680  C08C  F021         	movff	colorDetect@greenPrint,___flge@ff2
  5835   001684  C08D  F022         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  5836   001688  C08E  F023         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  5837   00168C  C08F  F024         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  5838   001690  ECF2  F01E         	call	___flge	;wreg free
  5839   001694  B0D8               	btfsc	status,0,c
  5840   001696  EF4F  F00B         	goto	u5641
  5841   00169A  EF51  F00B         	goto	u5640
  5842   00169E                     u5641:
  5843   00169E  EF89  F00B         	goto	l5123
  5844   0016A2                     u5640:
  5845   0016A2  C090  F01D         	movff	colorDetect@bluePrint,___flge@ff1
  5846   0016A6  C091  F01E         	movff	colorDetect@bluePrint+1,___flge@ff1+1
  5847   0016AA  C092  F01F         	movff	colorDetect@bluePrint+2,___flge@ff1+2
  5848   0016AE  C093  F020         	movff	colorDetect@bluePrint+3,___flge@ff1+3
  5849   0016B2  0ECD               	movlw	205
  5850   0016B4  6E21               	movwf	___flge@ff2^0,c
  5851   0016B6  0ECC               	movlw	204
  5852   0016B8  6E22               	movwf	(___flge@ff2+1)^0,c
  5853   0016BA  0E4C               	movlw	76
  5854   0016BC  6E23               	movwf	(___flge@ff2+2)^0,c
  5855   0016BE  0E3F               	movlw	63
  5856   0016C0  6E24               	movwf	(___flge@ff2+3)^0,c
  5857   0016C2  ECF2  F01E         	call	___flge	;wreg free
  5858   0016C6  B0D8               	btfsc	status,0,c
  5859   0016C8  EF68  F00B         	goto	u5651
  5860   0016CC  EF6A  F00B         	goto	u5650
  5861   0016D0                     u5651:
  5862   0016D0  EF89  F00B         	goto	l5123
  5863   0016D4                     u5650:
  5864   0016D4                     
  5865                           ;MazeRobot.X/color.c: 187:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5866   0016D4  0E2A               	movlw	42
  5867   0016D6  6E4F               	movwf	??_colorDetect^0,c
  5868   0016D8  0E8E               	movlw	142
  5869   0016DA                     u6197:
  5870   0016DA  2EE8               	decfsz	wreg,f,c
  5871   0016DC  D7FE               	bra	u6197
  5872   0016DE  2E4F               	decfsz	??_colorDetect^0,f,c
  5873   0016E0  D7FC               	bra	u6197
  5874   0016E2                     
  5875                           ;MazeRobot.X/color.c: 188:         reverseSquareRight(mL,mR);
  5876   0016E2  C068  F024         	movff	colorDetect@mL,reverseSquareRight@mL
  5877   0016E6  C069  F025         	movff	colorDetect@mL+1,reverseSquareRight@mL+1
  5878   0016EA  C06A  F026         	movff	colorDetect@mR,reverseSquareRight@mR
  5879   0016EE  C06B  F027         	movff	colorDetect@mR+1,reverseSquareRight@mR+1
  5880   0016F2  EC53  F022         	call	_reverseSquareRight	;wreg free
  5881   0016F6                     
  5882                           ;MazeRobot.X/color.c: 189:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5883   0016F6  0E2A               	movlw	42
  5884   0016F8  6E4F               	movwf	??_colorDetect^0,c
  5885   0016FA  0E8E               	movlw	142
  5886   0016FC                     u6207:
  5887   0016FC  2EE8               	decfsz	wreg,f,c
  5888   0016FE  D7FE               	bra	u6207
  5889   001700  2E4F               	decfsz	??_colorDetect^0,f,c
  5890   001702  D7FC               	bra	u6207
  5891   001704                     
  5892                           ;MazeRobot.X/color.c: 190:         colour_ref = 4;
  5893   001704  0E00               	movlw	0
  5894   001706  0100               	movlb	0	; () banked
  5895   001708  6F7F               	movwf	(colorDetect@colour_ref+1)& (0+255),b
  5896   00170A  0E04               	movlw	4
  5897   00170C  6F7E               	movwf	colorDetect@colour_ref& (0+255),b
  5898                           
  5899                           ;MazeRobot.X/color.c: 191:         }
  5900   00170E  EFF9  F00C         	goto	l5169
  5901   001712                     l5123:
  5902   001712  0E33               	movlw	51
  5903   001714  6E1D               	movwf	___flge@ff1^0,c
  5904   001716  0E33               	movlw	51
  5905   001718  6E1E               	movwf	(___flge@ff1+1)^0,c
  5906   00171A  0E73               	movlw	115
  5907   00171C  6E1F               	movwf	(___flge@ff1+2)^0,c
  5908   00171E  0E3F               	movlw	63
  5909   001720  6E20               	movwf	(___flge@ff1+3)^0,c
  5910   001722  C088  F021         	movff	colorDetect@redPrint,___flge@ff2
  5911   001726  C089  F022         	movff	colorDetect@redPrint+1,___flge@ff2+1
  5912   00172A  C08A  F023         	movff	colorDetect@redPrint+2,___flge@ff2+2
  5913   00172E  C08B  F024         	movff	colorDetect@redPrint+3,___flge@ff2+3
  5914   001732  ECF2  F01E         	call	___flge	;wreg free
  5915   001736  B0D8               	btfsc	status,0,c
  5916   001738  EFA0  F00B         	goto	u5661
  5917   00173C  EFA2  F00B         	goto	u5660
  5918   001740                     u5661:
  5919   001740  EF25  F00C         	goto	l5141
  5920   001744                     u5660:
  5921   001744  0ECD               	movlw	205
  5922   001746  6E1D               	movwf	___flge@ff1^0,c
  5923   001748  0ECC               	movlw	204
  5924   00174A  6E1E               	movwf	(___flge@ff1+1)^0,c
  5925   00174C  0E4C               	movlw	76
  5926   00174E  6E1F               	movwf	(___flge@ff1+2)^0,c
  5927   001750  0E3F               	movlw	63
  5928   001752  6E20               	movwf	(___flge@ff1+3)^0,c
  5929   001754  C08C  F021         	movff	colorDetect@greenPrint,___flge@ff2
  5930   001758  C08D  F022         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  5931   00175C  C08E  F023         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  5932   001760  C08F  F024         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  5933   001764  ECF2  F01E         	call	___flge	;wreg free
  5934   001768  B0D8               	btfsc	status,0,c
  5935   00176A  EFB9  F00B         	goto	u5671
  5936   00176E  EFBB  F00B         	goto	u5670
  5937   001772                     u5671:
  5938   001772  EF25  F00C         	goto	l5141
  5939   001776                     u5670:
  5940   001776  C08C  F01D         	movff	colorDetect@greenPrint,___flge@ff1
  5941   00177A  C08D  F01E         	movff	colorDetect@greenPrint+1,___flge@ff1+1
  5942   00177E  C08E  F01F         	movff	colorDetect@greenPrint+2,___flge@ff1+2
  5943   001782  C08F  F020         	movff	colorDetect@greenPrint+3,___flge@ff1+3
  5944   001786  0E66               	movlw	102
  5945   001788  6E21               	movwf	___flge@ff2^0,c
  5946   00178A  0E66               	movlw	102
  5947   00178C  6E22               	movwf	(___flge@ff2+1)^0,c
  5948   00178E  0E66               	movlw	102
  5949   001790  6E23               	movwf	(___flge@ff2+2)^0,c
  5950   001792  0E3F               	movlw	63
  5951   001794  6E24               	movwf	(___flge@ff2+3)^0,c
  5952   001796  ECF2  F01E         	call	___flge	;wreg free
  5953   00179A  B0D8               	btfsc	status,0,c
  5954   00179C  EFD2  F00B         	goto	u5681
  5955   0017A0  EFD4  F00B         	goto	u5680
  5956   0017A4                     u5681:
  5957   0017A4  EF25  F00C         	goto	l5141
  5958   0017A8                     u5680:
  5959   0017A8  0ECD               	movlw	205
  5960   0017AA  6E1D               	movwf	___flge@ff1^0,c
  5961   0017AC  0ECC               	movlw	204
  5962   0017AE  6E1E               	movwf	(___flge@ff1+1)^0,c
  5963   0017B0  0E4C               	movlw	76
  5964   0017B2  6E1F               	movwf	(___flge@ff1+2)^0,c
  5965   0017B4  0E3F               	movlw	63
  5966   0017B6  6E20               	movwf	(___flge@ff1+3)^0,c
  5967   0017B8  C090  F021         	movff	colorDetect@bluePrint,___flge@ff2
  5968   0017BC  C091  F022         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  5969   0017C0  C092  F023         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  5970   0017C4  C093  F024         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  5971   0017C8  ECF2  F01E         	call	___flge	;wreg free
  5972   0017CC  B0D8               	btfsc	status,0,c
  5973   0017CE  EFEB  F00B         	goto	u5691
  5974   0017D2  EFED  F00B         	goto	u5690
  5975   0017D6                     u5691:
  5976   0017D6  EF25  F00C         	goto	l5141
  5977   0017DA                     u5690:
  5978   0017DA  C090  F01D         	movff	colorDetect@bluePrint,___flge@ff1
  5979   0017DE  C091  F01E         	movff	colorDetect@bluePrint+1,___flge@ff1+1
  5980   0017E2  C092  F01F         	movff	colorDetect@bluePrint+2,___flge@ff1+2
  5981   0017E6  C093  F020         	movff	colorDetect@bluePrint+3,___flge@ff1+3
  5982   0017EA  0E33               	movlw	51
  5983   0017EC  6E21               	movwf	___flge@ff2^0,c
  5984   0017EE  0E33               	movlw	51
  5985   0017F0  6E22               	movwf	(___flge@ff2+1)^0,c
  5986   0017F2  0E73               	movlw	115
  5987   0017F4  6E23               	movwf	(___flge@ff2+2)^0,c
  5988   0017F6  0E3F               	movlw	63
  5989   0017F8  6E24               	movwf	(___flge@ff2+3)^0,c
  5990   0017FA  ECF2  F01E         	call	___flge	;wreg free
  5991   0017FE  B0D8               	btfsc	status,0,c
  5992   001800  EF04  F00C         	goto	u5701
  5993   001804  EF06  F00C         	goto	u5700
  5994   001808                     u5701:
  5995   001808  EF25  F00C         	goto	l5141
  5996   00180C                     u5700:
  5997   00180C                     
  5998                           ;MazeRobot.X/color.c: 195:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5999   00180C  0E2A               	movlw	42
  6000   00180E  6E4F               	movwf	??_colorDetect^0,c
  6001   001810  0E8E               	movlw	142
  6002   001812                     u6217:
  6003   001812  2EE8               	decfsz	wreg,f,c
  6004   001814  D7FE               	bra	u6217
  6005   001816  2E4F               	decfsz	??_colorDetect^0,f,c
  6006   001818  D7FC               	bra	u6217
  6007   00181A                     
  6008                           ;MazeRobot.X/color.c: 196:         reverseSquareLeft(mL,mR);
  6009   00181A  C068  F024         	movff	colorDetect@mL,reverseSquareLeft@mL
  6010   00181E  C069  F025         	movff	colorDetect@mL+1,reverseSquareLeft@mL+1
  6011   001822  C06A  F026         	movff	colorDetect@mR,reverseSquareLeft@mR
  6012   001826  C06B  F027         	movff	colorDetect@mR+1,reverseSquareLeft@mR+1
  6013   00182A  EC9E  F022         	call	_reverseSquareLeft	;wreg free
  6014   00182E                     
  6015                           ;MazeRobot.X/color.c: 197:         _delay((unsigned long)((2)*(64000000/4000.0)));
  6016   00182E  0E2A               	movlw	42
  6017   001830  6E4F               	movwf	??_colorDetect^0,c
  6018   001832  0E8E               	movlw	142
  6019   001834                     u6227:
  6020   001834  2EE8               	decfsz	wreg,f,c
  6021   001836  D7FE               	bra	u6227
  6022   001838  2E4F               	decfsz	??_colorDetect^0,f,c
  6023   00183A  D7FC               	bra	u6227
  6024   00183C                     
  6025                           ;MazeRobot.X/color.c: 198:         colour_ref = 5;
  6026   00183C  0E00               	movlw	0
  6027   00183E  0100               	movlb	0	; () banked
  6028   001840  6F7F               	movwf	(colorDetect@colour_ref+1)& (0+255),b
  6029   001842  0E05               	movlw	5
  6030   001844  6F7E               	movwf	colorDetect@colour_ref& (0+255),b
  6031                           
  6032                           ;MazeRobot.X/color.c: 199:         }
  6033   001846  EFF9  F00C         	goto	l5169
  6034   00184A                     l5141:
  6035   00184A  0E66               	movlw	102
  6036   00184C  6E1D               	movwf	___flge@ff1^0,c
  6037   00184E  0E66               	movlw	102
  6038   001850  6E1E               	movwf	(___flge@ff1+1)^0,c
  6039   001852  0EA6               	movlw	166
  6040   001854  6E1F               	movwf	(___flge@ff1+2)^0,c
  6041   001856  0E3F               	movlw	63
  6042   001858  6E20               	movwf	(___flge@ff1+3)^0,c
  6043   00185A  C088  F021         	movff	colorDetect@redPrint,___flge@ff2
  6044   00185E  C089  F022         	movff	colorDetect@redPrint+1,___flge@ff2+1
  6045   001862  C08A  F023         	movff	colorDetect@redPrint+2,___flge@ff2+2
  6046   001866  C08B  F024         	movff	colorDetect@redPrint+3,___flge@ff2+3
  6047   00186A  ECF2  F01E         	call	___flge	;wreg free
  6048   00186E  B0D8               	btfsc	status,0,c
  6049   001870  EF3C  F00C         	goto	u5711
  6050   001874  EF3E  F00C         	goto	u5710
  6051   001878                     u5711:
  6052   001878  EF8F  F00C         	goto	l5155
  6053   00187C                     u5710:
  6054   00187C  0E00               	movlw	0
  6055   00187E  6E1D               	movwf	___flge@ff1^0,c
  6056   001880  0E00               	movlw	0
  6057   001882  6E1E               	movwf	(___flge@ff1+1)^0,c
  6058   001884  0E00               	movlw	0
  6059   001886  6E1F               	movwf	(___flge@ff1+2)^0,c
  6060   001888  0E3F               	movlw	63
  6061   00188A  6E20               	movwf	(___flge@ff1+3)^0,c
  6062   00188C  C08C  F021         	movff	colorDetect@greenPrint,___flge@ff2
  6063   001890  C08D  F022         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  6064   001894  C08E  F023         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  6065   001898  C08F  F024         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  6066   00189C  ECF2  F01E         	call	___flge	;wreg free
  6067   0018A0  B0D8               	btfsc	status,0,c
  6068   0018A2  EF55  F00C         	goto	u5721
  6069   0018A6  EF57  F00C         	goto	u5720
  6070   0018AA                     u5721:
  6071   0018AA  EF8F  F00C         	goto	l5155
  6072   0018AE                     u5720:
  6073   0018AE  0E00               	movlw	0
  6074   0018B0  6E1D               	movwf	___flge@ff1^0,c
  6075   0018B2  0E00               	movlw	0
  6076   0018B4  6E1E               	movwf	(___flge@ff1+1)^0,c
  6077   0018B6  0E00               	movlw	0
  6078   0018B8  6E1F               	movwf	(___flge@ff1+2)^0,c
  6079   0018BA  0E3F               	movlw	63
  6080   0018BC  6E20               	movwf	(___flge@ff1+3)^0,c
  6081   0018BE  C090  F021         	movff	colorDetect@bluePrint,___flge@ff2
  6082   0018C2  C091  F022         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  6083   0018C6  C092  F023         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  6084   0018CA  C093  F024         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  6085   0018CE  ECF2  F01E         	call	___flge	;wreg free
  6086   0018D2  B0D8               	btfsc	status,0,c
  6087   0018D4  EF6E  F00C         	goto	u5731
  6088   0018D8  EF70  F00C         	goto	u5730
  6089   0018DC                     u5731:
  6090   0018DC  EF8F  F00C         	goto	l5155
  6091   0018E0                     u5730:
  6092   0018E0                     
  6093                           ;MazeRobot.X/color.c: 203:         _delay((unsigned long)((2)*(64000000/4000.0)));
  6094   0018E0  0E2A               	movlw	42
  6095   0018E2  6E4F               	movwf	??_colorDetect^0,c
  6096   0018E4  0E8E               	movlw	142
  6097   0018E6                     u6237:
  6098   0018E6  2EE8               	decfsz	wreg,f,c
  6099   0018E8  D7FE               	bra	u6237
  6100   0018EA  2E4F               	decfsz	??_colorDetect^0,f,c
  6101   0018EC  D7FC               	bra	u6237
  6102   0018EE                     
  6103                           ;MazeRobot.X/color.c: 204:         turnRight_135(mL,mR);
  6104   0018EE  C068  F01E         	movff	colorDetect@mL,turnRight_135@mL
  6105   0018F2  C069  F01F         	movff	colorDetect@mL+1,turnRight_135@mL+1
  6106   0018F6  C06A  F020         	movff	colorDetect@mR,turnRight_135@mR
  6107   0018FA  C06B  F021         	movff	colorDetect@mR+1,turnRight_135@mR+1
  6108   0018FE  ECB6  F01D         	call	_turnRight_135	;wreg free
  6109   001902                     
  6110                           ;MazeRobot.X/color.c: 205:         _delay((unsigned long)((2)*(64000000/4000.0)));
  6111   001902  0E2A               	movlw	42
  6112   001904  6E4F               	movwf	??_colorDetect^0,c
  6113   001906  0E8E               	movlw	142
  6114   001908                     u6247:
  6115   001908  2EE8               	decfsz	wreg,f,c
  6116   00190A  D7FE               	bra	u6247
  6117   00190C  2E4F               	decfsz	??_colorDetect^0,f,c
  6118   00190E  D7FC               	bra	u6247
  6119   001910                     
  6120                           ;MazeRobot.X/color.c: 206:         colour_ref = 6;
  6121   001910  0E00               	movlw	0
  6122   001912  0100               	movlb	0	; () banked
  6123   001914  6F7F               	movwf	(colorDetect@colour_ref+1)& (0+255),b
  6124   001916  0E06               	movlw	6
  6125   001918  6F7E               	movwf	colorDetect@colour_ref& (0+255),b
  6126                           
  6127                           ;MazeRobot.X/color.c: 208:         }
  6128   00191A  EFF9  F00C         	goto	l5169
  6129   00191E                     l5155:
  6130   00191E  C088  F01D         	movff	colorDetect@redPrint,___flge@ff1
  6131   001922  C089  F01E         	movff	colorDetect@redPrint+1,___flge@ff1+1
  6132   001926  C08A  F01F         	movff	colorDetect@redPrint+2,___flge@ff1+2
  6133   00192A  C08B  F020         	movff	colorDetect@redPrint+3,___flge@ff1+3
  6134   00192E  0E33               	movlw	51
  6135   001930  6E21               	movwf	___flge@ff2^0,c
  6136   001932  0E33               	movlw	51
  6137   001934  6E22               	movwf	(___flge@ff2+1)^0,c
  6138   001936  0E33               	movlw	51
  6139   001938  6E23               	movwf	(___flge@ff2+2)^0,c
  6140   00193A  0E3F               	movlw	63
  6141   00193C  6E24               	movwf	(___flge@ff2+3)^0,c
  6142   00193E  ECF2  F01E         	call	___flge	;wreg free
  6143   001942  B0D8               	btfsc	status,0,c
  6144   001944  EFA6  F00C         	goto	u5741
  6145   001948  EFA8  F00C         	goto	u5740
  6146   00194C                     u5741:
  6147   00194C  EFF9  F00C         	goto	l110
  6148   001950                     u5740:
  6149   001950  0E00               	movlw	0
  6150   001952  6E1D               	movwf	___flge@ff1^0,c
  6151   001954  0E00               	movlw	0
  6152   001956  6E1E               	movwf	(___flge@ff1+1)^0,c
  6153   001958  0E80               	movlw	128
  6154   00195A  6E1F               	movwf	(___flge@ff1+2)^0,c
  6155   00195C  0E3F               	movlw	63
  6156   00195E  6E20               	movwf	(___flge@ff1+3)^0,c
  6157   001960  C08C  F021         	movff	colorDetect@greenPrint,___flge@ff2
  6158   001964  C08D  F022         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  6159   001968  C08E  F023         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  6160   00196C  C08F  F024         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  6161   001970  ECF2  F01E         	call	___flge	;wreg free
  6162   001974  B0D8               	btfsc	status,0,c
  6163   001976  EFBF  F00C         	goto	u5751
  6164   00197A  EFC1  F00C         	goto	u5750
  6165   00197E                     u5751:
  6166   00197E  EFF9  F00C         	goto	l110
  6167   001982                     u5750:
  6168   001982  0E00               	movlw	0
  6169   001984  6E1D               	movwf	___flge@ff1^0,c
  6170   001986  0E00               	movlw	0
  6171   001988  6E1E               	movwf	(___flge@ff1+1)^0,c
  6172   00198A  0E80               	movlw	128
  6173   00198C  6E1F               	movwf	(___flge@ff1+2)^0,c
  6174   00198E  0E3F               	movlw	63
  6175   001990  6E20               	movwf	(___flge@ff1+3)^0,c
  6176   001992  C090  F021         	movff	colorDetect@bluePrint,___flge@ff2
  6177   001996  C091  F022         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  6178   00199A  C092  F023         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  6179   00199E  C093  F024         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  6180   0019A2  ECF2  F01E         	call	___flge	;wreg free
  6181   0019A6  B0D8               	btfsc	status,0,c
  6182   0019A8  EFD8  F00C         	goto	u5761
  6183   0019AC  EFDA  F00C         	goto	u5760
  6184   0019B0                     u5761:
  6185   0019B0  EFF9  F00C         	goto	l110
  6186   0019B4                     u5760:
  6187   0019B4                     
  6188                           ;MazeRobot.X/color.c: 212:         _delay((unsigned long)((2)*(64000000/4000.0)));
  6189   0019B4  0E2A               	movlw	42
  6190   0019B6  6E4F               	movwf	??_colorDetect^0,c
  6191   0019B8  0E8E               	movlw	142
  6192   0019BA                     u6257:
  6193   0019BA  2EE8               	decfsz	wreg,f,c
  6194   0019BC  D7FE               	bra	u6257
  6195   0019BE  2E4F               	decfsz	??_colorDetect^0,f,c
  6196   0019C0  D7FC               	bra	u6257
  6197   0019C2                     
  6198                           ;MazeRobot.X/color.c: 213:         turnLeft_135(mL,mR);
  6199   0019C2  C068  F01E         	movff	colorDetect@mL,turnLeft_135@mL
  6200   0019C6  C069  F01F         	movff	colorDetect@mL+1,turnLeft_135@mL+1
  6201   0019CA  C06A  F020         	movff	colorDetect@mR,turnLeft_135@mR
  6202   0019CE  C06B  F021         	movff	colorDetect@mR+1,turnLeft_135@mR+1
  6203   0019D2  EC54  F01E         	call	_turnLeft_135	;wreg free
  6204   0019D6                     
  6205                           ;MazeRobot.X/color.c: 214:         _delay((unsigned long)((2)*(64000000/4000.0)));
  6206   0019D6  0E2A               	movlw	42
  6207   0019D8  6E4F               	movwf	??_colorDetect^0,c
  6208   0019DA  0E8E               	movlw	142
  6209   0019DC                     u6267:
  6210   0019DC  2EE8               	decfsz	wreg,f,c
  6211   0019DE  D7FE               	bra	u6267
  6212   0019E0  2E4F               	decfsz	??_colorDetect^0,f,c
  6213   0019E2  D7FC               	bra	u6267
  6214   0019E4                     
  6215                           ;MazeRobot.X/color.c: 215:         colour_ref = 7;
  6216   0019E4  0E00               	movlw	0
  6217   0019E6  0100               	movlb	0	; () banked
  6218   0019E8  6F7F               	movwf	(colorDetect@colour_ref+1)& (0+255),b
  6219   0019EA  0E07               	movlw	7
  6220   0019EC  6F7E               	movwf	colorDetect@colour_ref& (0+255),b
  6221   0019EE  EFF9  F00C         	goto	l5169
  6222   0019F2                     l110:
  6223   0019F2                     l5169:
  6224                           
  6225                           ;MazeRobot.X/color.c: 219:         return colour_ref;
  6226   0019F2  C07E  F060         	movff	colorDetect@colour_ref,?_colorDetect
  6227   0019F6  C07F  F061         	movff	colorDetect@colour_ref+1,?_colorDetect+1
  6228   0019FA  0012               	return		;funcret
  6229   0019FC                     __end_of_colorDetect:
  6230                           	callstack 0
  6231                           
  6232 ;; *************** function _turn_180 *****************
  6233 ;; Defined at:
  6234 ;;		line 238 in file "MazeRobot.X/dc_motor.c"
  6235 ;; Parameters:    Size  Location     Type
  6236 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  6237 ;;		 -> main@motorLeft(9), 
  6238 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  6239 ;;		 -> main@motorRight(9), 
  6240 ;; Auto vars:     Size  Location     Type
  6241 ;;		None
  6242 ;; Return value:  Size  Location     Type
  6243 ;;                  1    wreg      void 
  6244 ;; Registers used:
  6245 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6246 ;; Tracked objects:
  6247 ;;		On entry : 0/0
  6248 ;;		On exit  : 0/0
  6249 ;;		Unchanged: 0/0
  6250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6251 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6253 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6254 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6255 ;;Total ram usage:        6 bytes
  6256 ;; Hardware stack levels used: 1
  6257 ;; Hardware stack levels required when called: 5
  6258 ;; This function calls:
  6259 ;;		_reverse
  6260 ;;		_setMotorPWM
  6261 ;;		_stop
  6262 ;; This function is called by:
  6263 ;;		_colorDetect
  6264 ;;		_return_home_turns
  6265 ;;		_main
  6266 ;; This function uses a non-reentrant model
  6267 ;;
  6268                           
  6269                           	psect	text25
  6270   0037B2                     __ptext25:
  6271                           	callstack 0
  6272   0037B2                     _turn_180:
  6273                           	callstack 25
  6274   0037B2                     
  6275                           ;MazeRobot.X/dc_motor.c: 238: void turn_180(DC_motor *mL, DC_motor *mR);MazeRobot.X/dc_m
      +                          otor.c: 239: {;MazeRobot.X/dc_motor.c: 241:     stop(mL, mR);
  6276   0037B2  C01E  F018         	movff	turn_180@mL,stop@mL
  6277   0037B6  C01F  F019         	movff	turn_180@mL+1,stop@mL+1
  6278   0037BA  C020  F01A         	movff	turn_180@mR,stop@mR
  6279   0037BE  C021  F01B         	movff	turn_180@mR+1,stop@mR+1
  6280   0037C2  ECFC  F021         	call	_stop	;wreg free
  6281   0037C6                     
  6282                           ;MazeRobot.X/dc_motor.c: 242:     _delay((unsigned long)((100)*(64000000/4000.0)));
  6283   0037C6  0E09               	movlw	9
  6284   0037C8  6E23               	movwf	(??_turn_180+1)^0,c
  6285   0037CA  0E1E               	movlw	30
  6286   0037CC  6E22               	movwf	??_turn_180^0,c
  6287   0037CE  0EE4               	movlw	228
  6288   0037D0                     u6277:
  6289   0037D0  2EE8               	decfsz	wreg,f,c
  6290   0037D2  D7FE               	bra	u6277
  6291   0037D4  2E22               	decfsz	??_turn_180^0,f,c
  6292   0037D6  D7FC               	bra	u6277
  6293   0037D8  2E23               	decfsz	(??_turn_180+1)^0,f,c
  6294   0037DA  D7FA               	bra	u6277
  6295   0037DC  D000               	nop2	
  6296   0037DE                     
  6297                           ;MazeRobot.X/dc_motor.c: 244:     reverse(mL, mR);
  6298   0037DE  C01E  F018         	movff	turn_180@mL,reverse@mL
  6299   0037E2  C01F  F019         	movff	turn_180@mL+1,reverse@mL+1
  6300   0037E6  C020  F01A         	movff	turn_180@mR,reverse@mR
  6301   0037EA  C021  F01B         	movff	turn_180@mR+1,reverse@mR+1
  6302   0037EE  ECC3  F020         	call	_reverse	;wreg free
  6303                           
  6304                           ;MazeRobot.X/dc_motor.c: 245:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  6305   0037F2  0E35               	movlw	53
  6306   0037F4  6E23               	movwf	(??_turn_180+1)^0,c
  6307   0037F6  0EC3               	movlw	195
  6308   0037F8  6E22               	movwf	??_turn_180^0,c
  6309   0037FA  0E59               	movlw	89
  6310   0037FC                     u6287:
  6311   0037FC  2EE8               	decfsz	wreg,f,c
  6312   0037FE  D7FE               	bra	u6287
  6313   003800  2E22               	decfsz	??_turn_180^0,f,c
  6314   003802  D7FC               	bra	u6287
  6315   003804  2E23               	decfsz	(??_turn_180+1)^0,f,c
  6316   003806  D7FA               	bra	u6287
  6317   003808  F000               	nop	
  6318   00380A                     
  6319                           ;MazeRobot.X/dc_motor.c: 247:     stop(mL, mR);
  6320   00380A  C01E  F018         	movff	turn_180@mL,stop@mL
  6321   00380E  C01F  F019         	movff	turn_180@mL+1,stop@mL+1
  6322   003812  C020  F01A         	movff	turn_180@mR,stop@mR
  6323   003816  C021  F01B         	movff	turn_180@mR+1,stop@mR+1
  6324   00381A  ECFC  F021         	call	_stop	;wreg free
  6325   00381E                     
  6326                           ;MazeRobot.X/dc_motor.c: 249:     mL->direction = 1;
  6327   00381E  EE20 F001          	lfsr	2,1
  6328   003822  501E               	movf	turn_180@mL^0,w,c
  6329   003824  26D9               	addwf	fsr2l,f,c
  6330   003826  501F               	movf	(turn_180@mL+1)^0,w,c
  6331   003828  22DA               	addwfc	fsr2h,f,c
  6332   00382A  0E01               	movlw	1
  6333   00382C  6EDF               	movwf	indf2,c
  6334   00382E                     
  6335                           ;MazeRobot.X/dc_motor.c: 250:     mR->direction = 0;
  6336   00382E  EE20 F001          	lfsr	2,1
  6337   003832  5020               	movf	turn_180@mR^0,w,c
  6338   003834  26D9               	addwf	fsr2l,f,c
  6339   003836  5021               	movf	(turn_180@mR+1)^0,w,c
  6340   003838  22DA               	addwfc	fsr2h,f,c
  6341   00383A  0E00               	movlw	0
  6342   00383C  6EDF               	movwf	indf2,c
  6343   00383E                     
  6344                           ;MazeRobot.X/dc_motor.c: 252:     mL->brakemode = 1;
  6345   00383E  EE20 F002          	lfsr	2,2
  6346   003842  501E               	movf	turn_180@mL^0,w,c
  6347   003844  26D9               	addwf	fsr2l,f,c
  6348   003846  501F               	movf	(turn_180@mL+1)^0,w,c
  6349   003848  22DA               	addwfc	fsr2h,f,c
  6350   00384A  0E01               	movlw	1
  6351   00384C  6EDF               	movwf	indf2,c
  6352   00384E                     
  6353                           ;MazeRobot.X/dc_motor.c: 253:     mL->brakemode = 1;
  6354   00384E  EE20 F002          	lfsr	2,2
  6355   003852  501E               	movf	turn_180@mL^0,w,c
  6356   003854  26D9               	addwf	fsr2l,f,c
  6357   003856  501F               	movf	(turn_180@mL+1)^0,w,c
  6358   003858  22DA               	addwfc	fsr2h,f,c
  6359   00385A  0E01               	movlw	1
  6360   00385C  6EDF               	movwf	indf2,c
  6361                           
  6362                           ;MazeRobot.X/dc_motor.c: 255:     while((mL->power < 80) || (mR->power < 80)){
  6363   00385E  EF49  F01C         	goto	l3731
  6364   003862                     l3725:
  6365                           
  6366                           ;MazeRobot.X/dc_motor.c: 256:         mL->power += 10;
  6367   003862  C01E  FFD9         	movff	turn_180@mL,fsr2l
  6368   003866  C01F  FFDA         	movff	turn_180@mL+1,fsr2h
  6369   00386A  0E0A               	movlw	10
  6370   00386C  26DF               	addwf	indf2,f,c
  6371                           
  6372                           ;MazeRobot.X/dc_motor.c: 257:         mR->power += 10;
  6373   00386E  C020  FFD9         	movff	turn_180@mR,fsr2l
  6374   003872  C021  FFDA         	movff	turn_180@mR+1,fsr2h
  6375   003876  0E0A               	movlw	10
  6376   003878  26DF               	addwf	indf2,f,c
  6377   00387A                     
  6378                           ;MazeRobot.X/dc_motor.c: 258:         setMotorPWM(mL);
  6379   00387A  C01E  F012         	movff	turn_180@mL,setMotorPWM@m
  6380   00387E  C01F  F013         	movff	turn_180@mL+1,setMotorPWM@m+1
  6381   003882  ECC2  F019         	call	_setMotorPWM	;wreg free
  6382   003886                     
  6383                           ;MazeRobot.X/dc_motor.c: 259:         setMotorPWM(mR);
  6384   003886  C020  F012         	movff	turn_180@mR,setMotorPWM@m
  6385   00388A  C021  F013         	movff	turn_180@mR+1,setMotorPWM@m+1
  6386   00388E  ECC2  F019         	call	_setMotorPWM	;wreg free
  6387   003892                     l3731:
  6388                           
  6389                           ;MazeRobot.X/dc_motor.c: 255:     while((mL->power < 80) || (mR->power < 80)){
  6390   003892  C01E  FFD9         	movff	turn_180@mL,fsr2l
  6391   003896  C01F  FFDA         	movff	turn_180@mL+1,fsr2h
  6392   00389A  0E4F               	movlw	79
  6393   00389C  64DF               	cpfsgt	indf2,c
  6394   00389E  EF53  F01C         	goto	u3561
  6395   0038A2  EF55  F01C         	goto	u3560
  6396   0038A6                     u3561:
  6397   0038A6  EF31  F01C         	goto	l3725
  6398   0038AA                     u3560:
  6399   0038AA  C020  FFD9         	movff	turn_180@mR,fsr2l
  6400   0038AE  C021  FFDA         	movff	turn_180@mR+1,fsr2h
  6401   0038B2  0E4F               	movlw	79
  6402   0038B4  64DF               	cpfsgt	indf2,c
  6403   0038B6  EF5F  F01C         	goto	u3571
  6404   0038BA  EF61  F01C         	goto	u3570
  6405   0038BE                     u3571:
  6406   0038BE  EF31  F01C         	goto	l3725
  6407   0038C2                     u3570:
  6408   0038C2                     
  6409                           ;MazeRobot.X/dc_motor.c: 261:    _delay((unsigned long)((1.75*turning_time90)*(64000000/
      +                          4000.0)));
  6410   0038C2  0E18               	movlw	24
  6411   0038C4  6E23               	movwf	(??_turn_180+1)^0,c
  6412   0038C6  0E70               	movlw	112
  6413   0038C8  6E22               	movwf	??_turn_180^0,c
  6414   0038CA  0EEE               	movlw	238
  6415   0038CC                     u6297:
  6416   0038CC  2EE8               	decfsz	wreg,f,c
  6417   0038CE  D7FE               	bra	u6297
  6418   0038D0  2E22               	decfsz	??_turn_180^0,f,c
  6419   0038D2  D7FC               	bra	u6297
  6420   0038D4  2E23               	decfsz	(??_turn_180+1)^0,f,c
  6421   0038D6  D7FA               	bra	u6297
  6422   0038D8  D000               	nop2	
  6423   0038DA                     
  6424                           ;MazeRobot.X/dc_motor.c: 262:     stop(mL, mR);
  6425   0038DA  C01E  F018         	movff	turn_180@mL,stop@mL
  6426   0038DE  C01F  F019         	movff	turn_180@mL+1,stop@mL+1
  6427   0038E2  C020  F01A         	movff	turn_180@mR,stop@mR
  6428   0038E6  C021  F01B         	movff	turn_180@mR+1,stop@mR+1
  6429   0038EA  ECFC  F021         	call	_stop	;wreg free
  6430   0038EE  0012               	return		;funcret
  6431   0038F0                     __end_of_turn_180:
  6432                           	callstack 0
  6433                           
  6434 ;; *************** function _turnRight_135 *****************
  6435 ;; Defined at:
  6436 ;;		line 266 in file "MazeRobot.X/dc_motor.c"
  6437 ;; Parameters:    Size  Location     Type
  6438 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  6439 ;;		 -> main@motorLeft(9), 
  6440 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  6441 ;;		 -> main@motorRight(9), 
  6442 ;; Auto vars:     Size  Location     Type
  6443 ;;		None
  6444 ;; Return value:  Size  Location     Type
  6445 ;;                  1    wreg      void 
  6446 ;; Registers used:
  6447 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6448 ;; Tracked objects:
  6449 ;;		On entry : 0/0
  6450 ;;		On exit  : 0/0
  6451 ;;		Unchanged: 0/0
  6452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6453 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6455 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6456 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6457 ;;Total ram usage:        6 bytes
  6458 ;; Hardware stack levels used: 1
  6459 ;; Hardware stack levels required when called: 5
  6460 ;; This function calls:
  6461 ;;		_reverse
  6462 ;;		_setMotorPWM
  6463 ;;		_stop
  6464 ;; This function is called by:
  6465 ;;		_colorDetect
  6466 ;;		_return_home_turns
  6467 ;; This function uses a non-reentrant model
  6468 ;;
  6469                           
  6470                           	psect	text26
  6471   003B6C                     __ptext26:
  6472                           	callstack 0
  6473   003B6C                     _turnRight_135:
  6474                           	callstack 24
  6475   003B6C                     
  6476                           ;MazeRobot.X/dc_motor.c: 266: void turnRight_135(DC_motor *mL, DC_motor *mR);MazeRobot.X
      +                          /dc_motor.c: 267: {;MazeRobot.X/dc_motor.c: 268:     stop(mL, mR);
  6477   003B6C  C01E  F018         	movff	turnRight_135@mL,stop@mL
  6478   003B70  C01F  F019         	movff	turnRight_135@mL+1,stop@mL+1
  6479   003B74  C020  F01A         	movff	turnRight_135@mR,stop@mR
  6480   003B78  C021  F01B         	movff	turnRight_135@mR+1,stop@mR+1
  6481   003B7C  ECFC  F021         	call	_stop	;wreg free
  6482   003B80                     
  6483                           ;MazeRobot.X/dc_motor.c: 269:     _delay((unsigned long)((100)*(64000000/4000.0)));
  6484   003B80  0E09               	movlw	9
  6485   003B82  6E23               	movwf	(??_turnRight_135+1)^0,c
  6486   003B84  0E1E               	movlw	30
  6487   003B86  6E22               	movwf	??_turnRight_135^0,c
  6488   003B88  0EE4               	movlw	228
  6489   003B8A                     u6307:
  6490   003B8A  2EE8               	decfsz	wreg,f,c
  6491   003B8C  D7FE               	bra	u6307
  6492   003B8E  2E22               	decfsz	??_turnRight_135^0,f,c
  6493   003B90  D7FC               	bra	u6307
  6494   003B92  2E23               	decfsz	(??_turnRight_135+1)^0,f,c
  6495   003B94  D7FA               	bra	u6307
  6496   003B96  D000               	nop2	
  6497   003B98                     
  6498                           ;MazeRobot.X/dc_motor.c: 271:     reverse(mL, mR);
  6499   003B98  C01E  F018         	movff	turnRight_135@mL,reverse@mL
  6500   003B9C  C01F  F019         	movff	turnRight_135@mL+1,reverse@mL+1
  6501   003BA0  C020  F01A         	movff	turnRight_135@mR,reverse@mR
  6502   003BA4  C021  F01B         	movff	turnRight_135@mR+1,reverse@mR+1
  6503   003BA8  ECC3  F020         	call	_reverse	;wreg free
  6504                           
  6505                           ;MazeRobot.X/dc_motor.c: 272:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  6506   003BAC  0E35               	movlw	53
  6507   003BAE  6E23               	movwf	(??_turnRight_135+1)^0,c
  6508   003BB0  0EC3               	movlw	195
  6509   003BB2  6E22               	movwf	??_turnRight_135^0,c
  6510   003BB4  0E59               	movlw	89
  6511   003BB6                     u6317:
  6512   003BB6  2EE8               	decfsz	wreg,f,c
  6513   003BB8  D7FE               	bra	u6317
  6514   003BBA  2E22               	decfsz	??_turnRight_135^0,f,c
  6515   003BBC  D7FC               	bra	u6317
  6516   003BBE  2E23               	decfsz	(??_turnRight_135+1)^0,f,c
  6517   003BC0  D7FA               	bra	u6317
  6518   003BC2  F000               	nop	
  6519   003BC4                     
  6520                           ;MazeRobot.X/dc_motor.c: 274:     stop(mL, mR);
  6521   003BC4  C01E  F018         	movff	turnRight_135@mL,stop@mL
  6522   003BC8  C01F  F019         	movff	turnRight_135@mL+1,stop@mL+1
  6523   003BCC  C020  F01A         	movff	turnRight_135@mR,stop@mR
  6524   003BD0  C021  F01B         	movff	turnRight_135@mR+1,stop@mR+1
  6525   003BD4  ECFC  F021         	call	_stop	;wreg free
  6526   003BD8                     
  6527                           ;MazeRobot.X/dc_motor.c: 276:     mL->direction = 1;
  6528   003BD8  EE20 F001          	lfsr	2,1
  6529   003BDC  501E               	movf	turnRight_135@mL^0,w,c
  6530   003BDE  26D9               	addwf	fsr2l,f,c
  6531   003BE0  501F               	movf	(turnRight_135@mL+1)^0,w,c
  6532   003BE2  22DA               	addwfc	fsr2h,f,c
  6533   003BE4  0E01               	movlw	1
  6534   003BE6  6EDF               	movwf	indf2,c
  6535   003BE8                     
  6536                           ;MazeRobot.X/dc_motor.c: 277:     mR->direction = 0;
  6537   003BE8  EE20 F001          	lfsr	2,1
  6538   003BEC  5020               	movf	turnRight_135@mR^0,w,c
  6539   003BEE  26D9               	addwf	fsr2l,f,c
  6540   003BF0  5021               	movf	(turnRight_135@mR+1)^0,w,c
  6541   003BF2  22DA               	addwfc	fsr2h,f,c
  6542   003BF4  0E00               	movlw	0
  6543   003BF6  6EDF               	movwf	indf2,c
  6544   003BF8                     
  6545                           ;MazeRobot.X/dc_motor.c: 279:     mL->brakemode = 1;
  6546   003BF8  EE20 F002          	lfsr	2,2
  6547   003BFC  501E               	movf	turnRight_135@mL^0,w,c
  6548   003BFE  26D9               	addwf	fsr2l,f,c
  6549   003C00  501F               	movf	(turnRight_135@mL+1)^0,w,c
  6550   003C02  22DA               	addwfc	fsr2h,f,c
  6551   003C04  0E01               	movlw	1
  6552   003C06  6EDF               	movwf	indf2,c
  6553   003C08                     
  6554                           ;MazeRobot.X/dc_motor.c: 280:     mL->brakemode = 1;
  6555   003C08  EE20 F002          	lfsr	2,2
  6556   003C0C  501E               	movf	turnRight_135@mL^0,w,c
  6557   003C0E  26D9               	addwf	fsr2l,f,c
  6558   003C10  501F               	movf	(turnRight_135@mL+1)^0,w,c
  6559   003C12  22DA               	addwfc	fsr2h,f,c
  6560   003C14  0E01               	movlw	1
  6561   003C16  6EDF               	movwf	indf2,c
  6562                           
  6563                           ;MazeRobot.X/dc_motor.c: 282:     while((mL->power < 80) || (mR->power < 80)){
  6564   003C18  EF26  F01E         	goto	l3781
  6565   003C1C                     l3775:
  6566                           
  6567                           ;MazeRobot.X/dc_motor.c: 283:         mL->power += 10;
  6568   003C1C  C01E  FFD9         	movff	turnRight_135@mL,fsr2l
  6569   003C20  C01F  FFDA         	movff	turnRight_135@mL+1,fsr2h
  6570   003C24  0E0A               	movlw	10
  6571   003C26  26DF               	addwf	indf2,f,c
  6572                           
  6573                           ;MazeRobot.X/dc_motor.c: 284:         mR->power += 10;
  6574   003C28  C020  FFD9         	movff	turnRight_135@mR,fsr2l
  6575   003C2C  C021  FFDA         	movff	turnRight_135@mR+1,fsr2h
  6576   003C30  0E0A               	movlw	10
  6577   003C32  26DF               	addwf	indf2,f,c
  6578   003C34                     
  6579                           ;MazeRobot.X/dc_motor.c: 285:         setMotorPWM(mL);
  6580   003C34  C01E  F012         	movff	turnRight_135@mL,setMotorPWM@m
  6581   003C38  C01F  F013         	movff	turnRight_135@mL+1,setMotorPWM@m+1
  6582   003C3C  ECC2  F019         	call	_setMotorPWM	;wreg free
  6583   003C40                     
  6584                           ;MazeRobot.X/dc_motor.c: 286:         setMotorPWM(mR);
  6585   003C40  C020  F012         	movff	turnRight_135@mR,setMotorPWM@m
  6586   003C44  C021  F013         	movff	turnRight_135@mR+1,setMotorPWM@m+1
  6587   003C48  ECC2  F019         	call	_setMotorPWM	;wreg free
  6588   003C4C                     l3781:
  6589                           
  6590                           ;MazeRobot.X/dc_motor.c: 282:     while((mL->power < 80) || (mR->power < 80)){
  6591   003C4C  C01E  FFD9         	movff	turnRight_135@mL,fsr2l
  6592   003C50  C01F  FFDA         	movff	turnRight_135@mL+1,fsr2h
  6593   003C54  0E4F               	movlw	79
  6594   003C56  64DF               	cpfsgt	indf2,c
  6595   003C58  EF30  F01E         	goto	u3581
  6596   003C5C  EF32  F01E         	goto	u3580
  6597   003C60                     u3581:
  6598   003C60  EF0E  F01E         	goto	l3775
  6599   003C64                     u3580:
  6600   003C64  C020  FFD9         	movff	turnRight_135@mR,fsr2l
  6601   003C68  C021  FFDA         	movff	turnRight_135@mR+1,fsr2h
  6602   003C6C  0E4F               	movlw	79
  6603   003C6E  64DF               	cpfsgt	indf2,c
  6604   003C70  EF3C  F01E         	goto	u3591
  6605   003C74  EF3E  F01E         	goto	u3590
  6606   003C78                     u3591:
  6607   003C78  EF0E  F01E         	goto	l3775
  6608   003C7C                     u3590:
  6609   003C7C                     
  6610                           ;MazeRobot.X/dc_motor.c: 288:    _delay((unsigned long)((1.5*turning_time90)*(64000000/4
      +                          000.0)));
  6611   003C7C  0E15               	movlw	21
  6612   003C7E  6E23               	movwf	(??_turnRight_135+1)^0,c
  6613   003C80  0E17               	movlw	23
  6614   003C82  6E22               	movwf	??_turnRight_135^0,c
  6615   003C84  0ECC               	movlw	204
  6616   003C86                     u6327:
  6617   003C86  2EE8               	decfsz	wreg,f,c
  6618   003C88  D7FE               	bra	u6327
  6619   003C8A  2E22               	decfsz	??_turnRight_135^0,f,c
  6620   003C8C  D7FC               	bra	u6327
  6621   003C8E  2E23               	decfsz	(??_turnRight_135+1)^0,f,c
  6622   003C90  D7FA               	bra	u6327
  6623   003C92                     
  6624                           ;MazeRobot.X/dc_motor.c: 290:     stop(mL, mR);
  6625   003C92  C01E  F018         	movff	turnRight_135@mL,stop@mL
  6626   003C96  C01F  F019         	movff	turnRight_135@mL+1,stop@mL+1
  6627   003C9A  C020  F01A         	movff	turnRight_135@mR,stop@mR
  6628   003C9E  C021  F01B         	movff	turnRight_135@mR+1,stop@mR+1
  6629   003CA2  ECFC  F021         	call	_stop	;wreg free
  6630   003CA6  0012               	return		;funcret
  6631   003CA8                     __end_of_turnRight_135:
  6632                           	callstack 0
  6633                           
  6634 ;; *************** function _turnLeft_135 *****************
  6635 ;; Defined at:
  6636 ;;		line 295 in file "MazeRobot.X/dc_motor.c"
  6637 ;; Parameters:    Size  Location     Type
  6638 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  6639 ;;		 -> main@motorLeft(9), 
  6640 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  6641 ;;		 -> main@motorRight(9), 
  6642 ;; Auto vars:     Size  Location     Type
  6643 ;;		None
  6644 ;; Return value:  Size  Location     Type
  6645 ;;                  1    wreg      void 
  6646 ;; Registers used:
  6647 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6648 ;; Tracked objects:
  6649 ;;		On entry : 0/0
  6650 ;;		On exit  : 0/0
  6651 ;;		Unchanged: 0/0
  6652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6653 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6654 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6655 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6656 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6657 ;;Total ram usage:        6 bytes
  6658 ;; Hardware stack levels used: 1
  6659 ;; Hardware stack levels required when called: 5
  6660 ;; This function calls:
  6661 ;;		_reverse
  6662 ;;		_setMotorPWM
  6663 ;;		_stop
  6664 ;; This function is called by:
  6665 ;;		_colorDetect
  6666 ;;		_return_home_turns
  6667 ;; This function uses a non-reentrant model
  6668 ;;
  6669                           
  6670                           	psect	text27
  6671   003CA8                     __ptext27:
  6672                           	callstack 0
  6673   003CA8                     _turnLeft_135:
  6674                           	callstack 24
  6675   003CA8                     
  6676                           ;MazeRobot.X/dc_motor.c: 295: void turnLeft_135(DC_motor *mL, DC_motor *mR);MazeRobot.X/
      +                          dc_motor.c: 296: {;MazeRobot.X/dc_motor.c: 298:     stop(mL, mR);
  6677   003CA8  C01E  F018         	movff	turnLeft_135@mL,stop@mL
  6678   003CAC  C01F  F019         	movff	turnLeft_135@mL+1,stop@mL+1
  6679   003CB0  C020  F01A         	movff	turnLeft_135@mR,stop@mR
  6680   003CB4  C021  F01B         	movff	turnLeft_135@mR+1,stop@mR+1
  6681   003CB8  ECFC  F021         	call	_stop	;wreg free
  6682   003CBC                     
  6683                           ;MazeRobot.X/dc_motor.c: 299:     _delay((unsigned long)((100)*(64000000/4000.0)));
  6684   003CBC  0E09               	movlw	9
  6685   003CBE  6E23               	movwf	(??_turnLeft_135+1)^0,c
  6686   003CC0  0E1E               	movlw	30
  6687   003CC2  6E22               	movwf	??_turnLeft_135^0,c
  6688   003CC4  0EE4               	movlw	228
  6689   003CC6                     u6337:
  6690   003CC6  2EE8               	decfsz	wreg,f,c
  6691   003CC8  D7FE               	bra	u6337
  6692   003CCA  2E22               	decfsz	??_turnLeft_135^0,f,c
  6693   003CCC  D7FC               	bra	u6337
  6694   003CCE  2E23               	decfsz	(??_turnLeft_135+1)^0,f,c
  6695   003CD0  D7FA               	bra	u6337
  6696   003CD2  D000               	nop2	
  6697   003CD4                     
  6698                           ;MazeRobot.X/dc_motor.c: 301:     reverse(mL, mR);
  6699   003CD4  C01E  F018         	movff	turnLeft_135@mL,reverse@mL
  6700   003CD8  C01F  F019         	movff	turnLeft_135@mL+1,reverse@mL+1
  6701   003CDC  C020  F01A         	movff	turnLeft_135@mR,reverse@mR
  6702   003CE0  C021  F01B         	movff	turnLeft_135@mR+1,reverse@mR+1
  6703   003CE4  ECC3  F020         	call	_reverse	;wreg free
  6704                           
  6705                           ;MazeRobot.X/dc_motor.c: 302:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  6706   003CE8  0E35               	movlw	53
  6707   003CEA  6E23               	movwf	(??_turnLeft_135+1)^0,c
  6708   003CEC  0EC3               	movlw	195
  6709   003CEE  6E22               	movwf	??_turnLeft_135^0,c
  6710   003CF0  0E59               	movlw	89
  6711   003CF2                     u6347:
  6712   003CF2  2EE8               	decfsz	wreg,f,c
  6713   003CF4  D7FE               	bra	u6347
  6714   003CF6  2E22               	decfsz	??_turnLeft_135^0,f,c
  6715   003CF8  D7FC               	bra	u6347
  6716   003CFA  2E23               	decfsz	(??_turnLeft_135+1)^0,f,c
  6717   003CFC  D7FA               	bra	u6347
  6718   003CFE  F000               	nop	
  6719   003D00                     
  6720                           ;MazeRobot.X/dc_motor.c: 304:     stop(mL, mR);
  6721   003D00  C01E  F018         	movff	turnLeft_135@mL,stop@mL
  6722   003D04  C01F  F019         	movff	turnLeft_135@mL+1,stop@mL+1
  6723   003D08  C020  F01A         	movff	turnLeft_135@mR,stop@mR
  6724   003D0C  C021  F01B         	movff	turnLeft_135@mR+1,stop@mR+1
  6725   003D10  ECFC  F021         	call	_stop	;wreg free
  6726   003D14                     
  6727                           ;MazeRobot.X/dc_motor.c: 306:     mL->direction = 0;
  6728   003D14  EE20 F001          	lfsr	2,1
  6729   003D18  501E               	movf	turnLeft_135@mL^0,w,c
  6730   003D1A  26D9               	addwf	fsr2l,f,c
  6731   003D1C  501F               	movf	(turnLeft_135@mL+1)^0,w,c
  6732   003D1E  22DA               	addwfc	fsr2h,f,c
  6733   003D20  0E00               	movlw	0
  6734   003D22  6EDF               	movwf	indf2,c
  6735   003D24                     
  6736                           ;MazeRobot.X/dc_motor.c: 307:     mR->direction = 1;
  6737   003D24  EE20 F001          	lfsr	2,1
  6738   003D28  5020               	movf	turnLeft_135@mR^0,w,c
  6739   003D2A  26D9               	addwf	fsr2l,f,c
  6740   003D2C  5021               	movf	(turnLeft_135@mR+1)^0,w,c
  6741   003D2E  22DA               	addwfc	fsr2h,f,c
  6742   003D30  0E01               	movlw	1
  6743   003D32  6EDF               	movwf	indf2,c
  6744   003D34                     
  6745                           ;MazeRobot.X/dc_motor.c: 309:     mL->brakemode = 1;
  6746   003D34  EE20 F002          	lfsr	2,2
  6747   003D38  501E               	movf	turnLeft_135@mL^0,w,c
  6748   003D3A  26D9               	addwf	fsr2l,f,c
  6749   003D3C  501F               	movf	(turnLeft_135@mL+1)^0,w,c
  6750   003D3E  22DA               	addwfc	fsr2h,f,c
  6751   003D40  0E01               	movlw	1
  6752   003D42  6EDF               	movwf	indf2,c
  6753   003D44                     
  6754                           ;MazeRobot.X/dc_motor.c: 310:     mL->brakemode = 1;
  6755   003D44  EE20 F002          	lfsr	2,2
  6756   003D48  501E               	movf	turnLeft_135@mL^0,w,c
  6757   003D4A  26D9               	addwf	fsr2l,f,c
  6758   003D4C  501F               	movf	(turnLeft_135@mL+1)^0,w,c
  6759   003D4E  22DA               	addwfc	fsr2h,f,c
  6760   003D50  0E01               	movlw	1
  6761   003D52  6EDF               	movwf	indf2,c
  6762                           
  6763                           ;MazeRobot.X/dc_motor.c: 312:     while((mL->power < 80) || (mR->power < 80)){
  6764   003D54  EFC4  F01E         	goto	l3811
  6765   003D58                     l3805:
  6766                           
  6767                           ;MazeRobot.X/dc_motor.c: 313:         mL->power += 10;
  6768   003D58  C01E  FFD9         	movff	turnLeft_135@mL,fsr2l
  6769   003D5C  C01F  FFDA         	movff	turnLeft_135@mL+1,fsr2h
  6770   003D60  0E0A               	movlw	10
  6771   003D62  26DF               	addwf	indf2,f,c
  6772                           
  6773                           ;MazeRobot.X/dc_motor.c: 314:         mR->power += 10;
  6774   003D64  C020  FFD9         	movff	turnLeft_135@mR,fsr2l
  6775   003D68  C021  FFDA         	movff	turnLeft_135@mR+1,fsr2h
  6776   003D6C  0E0A               	movlw	10
  6777   003D6E  26DF               	addwf	indf2,f,c
  6778   003D70                     
  6779                           ;MazeRobot.X/dc_motor.c: 315:         setMotorPWM(mL);
  6780   003D70  C01E  F012         	movff	turnLeft_135@mL,setMotorPWM@m
  6781   003D74  C01F  F013         	movff	turnLeft_135@mL+1,setMotorPWM@m+1
  6782   003D78  ECC2  F019         	call	_setMotorPWM	;wreg free
  6783   003D7C                     
  6784                           ;MazeRobot.X/dc_motor.c: 316:         setMotorPWM(mR);
  6785   003D7C  C020  F012         	movff	turnLeft_135@mR,setMotorPWM@m
  6786   003D80  C021  F013         	movff	turnLeft_135@mR+1,setMotorPWM@m+1
  6787   003D84  ECC2  F019         	call	_setMotorPWM	;wreg free
  6788   003D88                     l3811:
  6789                           
  6790                           ;MazeRobot.X/dc_motor.c: 312:     while((mL->power < 80) || (mR->power < 80)){
  6791   003D88  C01E  FFD9         	movff	turnLeft_135@mL,fsr2l
  6792   003D8C  C01F  FFDA         	movff	turnLeft_135@mL+1,fsr2h
  6793   003D90  0E4F               	movlw	79
  6794   003D92  64DF               	cpfsgt	indf2,c
  6795   003D94  EFCE  F01E         	goto	u3601
  6796   003D98  EFD0  F01E         	goto	u3600
  6797   003D9C                     u3601:
  6798   003D9C  EFAC  F01E         	goto	l3805
  6799   003DA0                     u3600:
  6800   003DA0  C020  FFD9         	movff	turnLeft_135@mR,fsr2l
  6801   003DA4  C021  FFDA         	movff	turnLeft_135@mR+1,fsr2h
  6802   003DA8  0E4F               	movlw	79
  6803   003DAA  64DF               	cpfsgt	indf2,c
  6804   003DAC  EFDA  F01E         	goto	u3611
  6805   003DB0  EFDC  F01E         	goto	u3610
  6806   003DB4                     u3611:
  6807   003DB4  EFAC  F01E         	goto	l3805
  6808   003DB8                     u3610:
  6809   003DB8                     
  6810                           ;MazeRobot.X/dc_motor.c: 318:    _delay((unsigned long)((1.5*turning_time90)*(64000000/4
      +                          000.0)));
  6811   003DB8  0E15               	movlw	21
  6812   003DBA  6E23               	movwf	(??_turnLeft_135+1)^0,c
  6813   003DBC  0E17               	movlw	23
  6814   003DBE  6E22               	movwf	??_turnLeft_135^0,c
  6815   003DC0  0ECC               	movlw	204
  6816   003DC2                     u6357:
  6817   003DC2  2EE8               	decfsz	wreg,f,c
  6818   003DC4  D7FE               	bra	u6357
  6819   003DC6  2E22               	decfsz	??_turnLeft_135^0,f,c
  6820   003DC8  D7FC               	bra	u6357
  6821   003DCA  2E23               	decfsz	(??_turnLeft_135+1)^0,f,c
  6822   003DCC  D7FA               	bra	u6357
  6823   003DCE                     
  6824                           ;MazeRobot.X/dc_motor.c: 319:     stop(mL, mR);
  6825   003DCE  C01E  F018         	movff	turnLeft_135@mL,stop@mL
  6826   003DD2  C01F  F019         	movff	turnLeft_135@mL+1,stop@mL+1
  6827   003DD6  C020  F01A         	movff	turnLeft_135@mR,stop@mR
  6828   003DDA  C021  F01B         	movff	turnLeft_135@mR+1,stop@mR+1
  6829   003DDE  ECFC  F021         	call	_stop	;wreg free
  6830   003DE2  0012               	return		;funcret
  6831   003DE4                     __end_of_turnLeft_135:
  6832                           	callstack 0
  6833                           
  6834 ;; *************** function _reverseSquareRight *****************
  6835 ;; Defined at:
  6836 ;;		line 323 in file "MazeRobot.X/dc_motor.c"
  6837 ;; Parameters:    Size  Location     Type
  6838 ;;  mL              2   35[COMRAM] PTR struct DC_motor
  6839 ;;		 -> main@motorLeft(9), 
  6840 ;;  mR              2   37[COMRAM] PTR struct DC_motor
  6841 ;;		 -> main@motorRight(9), 
  6842 ;; Auto vars:     Size  Location     Type
  6843 ;;		None
  6844 ;; Return value:  Size  Location     Type
  6845 ;;                  1    wreg      void 
  6846 ;; Registers used:
  6847 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6848 ;; Tracked objects:
  6849 ;;		On entry : 0/0
  6850 ;;		On exit  : 0/0
  6851 ;;		Unchanged: 0/0
  6852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6853 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6855 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6856 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6857 ;;Total ram usage:        6 bytes
  6858 ;; Hardware stack levels used: 1
  6859 ;; Hardware stack levels required when called: 6
  6860 ;; This function calls:
  6861 ;;		_reverse
  6862 ;;		_stop
  6863 ;;		_turnRight_90
  6864 ;; This function is called by:
  6865 ;;		_colorDetect
  6866 ;; This function uses a non-reentrant model
  6867 ;;
  6868                           
  6869                           	psect	text28
  6870   0044A6                     __ptext28:
  6871                           	callstack 0
  6872   0044A6                     _reverseSquareRight:
  6873                           	callstack 23
  6874   0044A6                     
  6875                           ;MazeRobot.X/dc_motor.c: 323: void reverseSquareRight(DC_motor *mL, DC_motor *mR);MazeRo
      +                          bot.X/dc_motor.c: 324: {;MazeRobot.X/dc_motor.c: 326:     reverse(mL, mR);
  6876   0044A6  C024  F018         	movff	reverseSquareRight@mL,reverse@mL
  6877   0044AA  C025  F019         	movff	reverseSquareRight@mL+1,reverse@mL+1
  6878   0044AE  C026  F01A         	movff	reverseSquareRight@mR,reverse@mR
  6879   0044B2  C027  F01B         	movff	reverseSquareRight@mR+1,reverse@mR+1
  6880   0044B6  ECC3  F020         	call	_reverse	;wreg free
  6881   0044BA                     
  6882                           ;MazeRobot.X/dc_motor.c: 327:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  6883   0044BA  0E35               	movlw	53
  6884   0044BC  6E29               	movwf	(??_reverseSquareRight+1)^0,c
  6885   0044BE  0EC3               	movlw	195
  6886   0044C0  6E28               	movwf	??_reverseSquareRight^0,c
  6887   0044C2  0E59               	movlw	89
  6888   0044C4                     u6367:
  6889   0044C4  2EE8               	decfsz	wreg,f,c
  6890   0044C6  D7FE               	bra	u6367
  6891   0044C8  2E28               	decfsz	??_reverseSquareRight^0,f,c
  6892   0044CA  D7FC               	bra	u6367
  6893   0044CC  2E29               	decfsz	(??_reverseSquareRight+1)^0,f,c
  6894   0044CE  D7FA               	bra	u6367
  6895   0044D0  F000               	nop	
  6896   0044D2                     
  6897                           ;MazeRobot.X/dc_motor.c: 329:     stop(mL, mR);
  6898   0044D2  C024  F018         	movff	reverseSquareRight@mL,stop@mL
  6899   0044D6  C025  F019         	movff	reverseSquareRight@mL+1,stop@mL+1
  6900   0044DA  C026  F01A         	movff	reverseSquareRight@mR,stop@mR
  6901   0044DE  C027  F01B         	movff	reverseSquareRight@mR+1,stop@mR+1
  6902   0044E2  ECFC  F021         	call	_stop	;wreg free
  6903   0044E6                     
  6904                           ;MazeRobot.X/dc_motor.c: 331:     reverse(mL, mR);
  6905   0044E6  C024  F018         	movff	reverseSquareRight@mL,reverse@mL
  6906   0044EA  C025  F019         	movff	reverseSquareRight@mL+1,reverse@mL+1
  6907   0044EE  C026  F01A         	movff	reverseSquareRight@mR,reverse@mR
  6908   0044F2  C027  F01B         	movff	reverseSquareRight@mR+1,reverse@mR+1
  6909   0044F6  ECC3  F020         	call	_reverse	;wreg free
  6910   0044FA                     
  6911                           ;MazeRobot.X/dc_motor.c: 332:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  6912   0044FA  0E35               	movlw	53
  6913   0044FC  6E29               	movwf	(??_reverseSquareRight+1)^0,c
  6914   0044FE  0EC3               	movlw	195
  6915   004500  6E28               	movwf	??_reverseSquareRight^0,c
  6916   004502  0E59               	movlw	89
  6917   004504                     u6377:
  6918   004504  2EE8               	decfsz	wreg,f,c
  6919   004506  D7FE               	bra	u6377
  6920   004508  2E28               	decfsz	??_reverseSquareRight^0,f,c
  6921   00450A  D7FC               	bra	u6377
  6922   00450C  2E29               	decfsz	(??_reverseSquareRight+1)^0,f,c
  6923   00450E  D7FA               	bra	u6377
  6924   004510  F000               	nop	
  6925                           
  6926                           ;MazeRobot.X/dc_motor.c: 334:     turnRight_90(mL,mR);
  6927   004512  C024  F01E         	movff	reverseSquareRight@mL,turnRight_90@mL
  6928   004516  C025  F01F         	movff	reverseSquareRight@mL+1,turnRight_90@mL+1
  6929   00451A  C026  F020         	movff	reverseSquareRight@mR,turnRight_90@mR
  6930   00451E  C027  F021         	movff	reverseSquareRight@mR+1,turnRight_90@mR+1
  6931   004522  EC78  F01C         	call	_turnRight_90	;wreg free
  6932                           
  6933                           ;MazeRobot.X/dc_motor.c: 336:     stop(mL, mR);
  6934   004526  C024  F018         	movff	reverseSquareRight@mL,stop@mL
  6935   00452A  C025  F019         	movff	reverseSquareRight@mL+1,stop@mL+1
  6936   00452E  C026  F01A         	movff	reverseSquareRight@mR,stop@mR
  6937   004532  C027  F01B         	movff	reverseSquareRight@mR+1,stop@mR+1
  6938   004536  ECFC  F021         	call	_stop	;wreg free
  6939   00453A  0012               	return		;funcret
  6940   00453C                     __end_of_reverseSquareRight:
  6941                           	callstack 0
  6942                           
  6943 ;; *************** function _turnRight_90 *****************
  6944 ;; Defined at:
  6945 ;;		line 210 in file "MazeRobot.X/dc_motor.c"
  6946 ;; Parameters:    Size  Location     Type
  6947 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  6948 ;;		 -> main@motorLeft(9), 
  6949 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  6950 ;;		 -> main@motorRight(9), 
  6951 ;; Auto vars:     Size  Location     Type
  6952 ;;		None
  6953 ;; Return value:  Size  Location     Type
  6954 ;;                  1    wreg      void 
  6955 ;; Registers used:
  6956 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6957 ;; Tracked objects:
  6958 ;;		On entry : 0/0
  6959 ;;		On exit  : 0/0
  6960 ;;		Unchanged: 0/0
  6961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6962 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6964 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6965 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6966 ;;Total ram usage:        6 bytes
  6967 ;; Hardware stack levels used: 1
  6968 ;; Hardware stack levels required when called: 5
  6969 ;; This function calls:
  6970 ;;		_reverse
  6971 ;;		_setMotorPWM
  6972 ;;		_stop
  6973 ;; This function is called by:
  6974 ;;		_colorDetect
  6975 ;;		_return_home_turns
  6976 ;;		_reverseSquareRight
  6977 ;; This function uses a non-reentrant model
  6978 ;;
  6979                           
  6980                           	psect	text29
  6981   0038F0                     __ptext29:
  6982                           	callstack 0
  6983   0038F0                     _turnRight_90:
  6984                           	callstack 24
  6985   0038F0                     
  6986                           ;MazeRobot.X/dc_motor.c: 210: void turnRight_90(DC_motor *mL, DC_motor *mR);MazeRobot.X/
      +                          dc_motor.c: 211: {;MazeRobot.X/dc_motor.c: 212:     stop(mL, mR);
  6987   0038F0  C01E  F018         	movff	turnRight_90@mL,stop@mL
  6988   0038F4  C01F  F019         	movff	turnRight_90@mL+1,stop@mL+1
  6989   0038F8  C020  F01A         	movff	turnRight_90@mR,stop@mR
  6990   0038FC  C021  F01B         	movff	turnRight_90@mR+1,stop@mR+1
  6991   003900  ECFC  F021         	call	_stop	;wreg free
  6992   003904                     
  6993                           ;MazeRobot.X/dc_motor.c: 213:     _delay((unsigned long)((100)*(64000000/4000.0)));
  6994   003904  0E09               	movlw	9
  6995   003906  6E23               	movwf	(??_turnRight_90+1)^0,c
  6996   003908  0E1E               	movlw	30
  6997   00390A  6E22               	movwf	??_turnRight_90^0,c
  6998   00390C  0EE4               	movlw	228
  6999   00390E                     u6387:
  7000   00390E  2EE8               	decfsz	wreg,f,c
  7001   003910  D7FE               	bra	u6387
  7002   003912  2E22               	decfsz	??_turnRight_90^0,f,c
  7003   003914  D7FC               	bra	u6387
  7004   003916  2E23               	decfsz	(??_turnRight_90+1)^0,f,c
  7005   003918  D7FA               	bra	u6387
  7006   00391A  D000               	nop2	
  7007   00391C                     
  7008                           ;MazeRobot.X/dc_motor.c: 215:     reverse(mL, mR);
  7009   00391C  C01E  F018         	movff	turnRight_90@mL,reverse@mL
  7010   003920  C01F  F019         	movff	turnRight_90@mL+1,reverse@mL+1
  7011   003924  C020  F01A         	movff	turnRight_90@mR,reverse@mR
  7012   003928  C021  F01B         	movff	turnRight_90@mR+1,reverse@mR+1
  7013   00392C  ECC3  F020         	call	_reverse	;wreg free
  7014                           
  7015                           ;MazeRobot.X/dc_motor.c: 216:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  7016   003930  0E35               	movlw	53
  7017   003932  6E23               	movwf	(??_turnRight_90+1)^0,c
  7018   003934  0EC3               	movlw	195
  7019   003936  6E22               	movwf	??_turnRight_90^0,c
  7020   003938  0E59               	movlw	89
  7021   00393A                     u6397:
  7022   00393A  2EE8               	decfsz	wreg,f,c
  7023   00393C  D7FE               	bra	u6397
  7024   00393E  2E22               	decfsz	??_turnRight_90^0,f,c
  7025   003940  D7FC               	bra	u6397
  7026   003942  2E23               	decfsz	(??_turnRight_90+1)^0,f,c
  7027   003944  D7FA               	bra	u6397
  7028   003946  F000               	nop	
  7029   003948                     
  7030                           ;MazeRobot.X/dc_motor.c: 218:     stop(mL, mR);
  7031   003948  C01E  F018         	movff	turnRight_90@mL,stop@mL
  7032   00394C  C01F  F019         	movff	turnRight_90@mL+1,stop@mL+1
  7033   003950  C020  F01A         	movff	turnRight_90@mR,stop@mR
  7034   003954  C021  F01B         	movff	turnRight_90@mR+1,stop@mR+1
  7035   003958  ECFC  F021         	call	_stop	;wreg free
  7036   00395C                     
  7037                           ;MazeRobot.X/dc_motor.c: 220:     mL->direction = 1;
  7038   00395C  EE20 F001          	lfsr	2,1
  7039   003960  501E               	movf	turnRight_90@mL^0,w,c
  7040   003962  26D9               	addwf	fsr2l,f,c
  7041   003964  501F               	movf	(turnRight_90@mL+1)^0,w,c
  7042   003966  22DA               	addwfc	fsr2h,f,c
  7043   003968  0E01               	movlw	1
  7044   00396A  6EDF               	movwf	indf2,c
  7045   00396C                     
  7046                           ;MazeRobot.X/dc_motor.c: 221:     mR->direction = 0;
  7047   00396C  EE20 F001          	lfsr	2,1
  7048   003970  5020               	movf	turnRight_90@mR^0,w,c
  7049   003972  26D9               	addwf	fsr2l,f,c
  7050   003974  5021               	movf	(turnRight_90@mR+1)^0,w,c
  7051   003976  22DA               	addwfc	fsr2h,f,c
  7052   003978  0E00               	movlw	0
  7053   00397A  6EDF               	movwf	indf2,c
  7054   00397C                     
  7055                           ;MazeRobot.X/dc_motor.c: 223:     mL->brakemode = 1;
  7056   00397C  EE20 F002          	lfsr	2,2
  7057   003980  501E               	movf	turnRight_90@mL^0,w,c
  7058   003982  26D9               	addwf	fsr2l,f,c
  7059   003984  501F               	movf	(turnRight_90@mL+1)^0,w,c
  7060   003986  22DA               	addwfc	fsr2h,f,c
  7061   003988  0E01               	movlw	1
  7062   00398A  6EDF               	movwf	indf2,c
  7063   00398C                     
  7064                           ;MazeRobot.X/dc_motor.c: 224:     mL->brakemode = 1;
  7065   00398C  EE20 F002          	lfsr	2,2
  7066   003990  501E               	movf	turnRight_90@mL^0,w,c
  7067   003992  26D9               	addwf	fsr2l,f,c
  7068   003994  501F               	movf	(turnRight_90@mL+1)^0,w,c
  7069   003996  22DA               	addwfc	fsr2h,f,c
  7070   003998  0E01               	movlw	1
  7071   00399A  6EDF               	movwf	indf2,c
  7072                           
  7073                           ;MazeRobot.X/dc_motor.c: 226:     while((mL->power < 80) || (mR->power < 80)){
  7074   00399C  EFE8  F01C         	goto	l3431
  7075   0039A0                     l3425:
  7076                           
  7077                           ;MazeRobot.X/dc_motor.c: 227:         mL->power += 10;
  7078   0039A0  C01E  FFD9         	movff	turnRight_90@mL,fsr2l
  7079   0039A4  C01F  FFDA         	movff	turnRight_90@mL+1,fsr2h
  7080   0039A8  0E0A               	movlw	10
  7081   0039AA  26DF               	addwf	indf2,f,c
  7082                           
  7083                           ;MazeRobot.X/dc_motor.c: 228:         mR->power += 10;
  7084   0039AC  C020  FFD9         	movff	turnRight_90@mR,fsr2l
  7085   0039B0  C021  FFDA         	movff	turnRight_90@mR+1,fsr2h
  7086   0039B4  0E0A               	movlw	10
  7087   0039B6  26DF               	addwf	indf2,f,c
  7088   0039B8                     
  7089                           ;MazeRobot.X/dc_motor.c: 229:         setMotorPWM(mL);
  7090   0039B8  C01E  F012         	movff	turnRight_90@mL,setMotorPWM@m
  7091   0039BC  C01F  F013         	movff	turnRight_90@mL+1,setMotorPWM@m+1
  7092   0039C0  ECC2  F019         	call	_setMotorPWM	;wreg free
  7093   0039C4                     
  7094                           ;MazeRobot.X/dc_motor.c: 230:         setMotorPWM(mR);
  7095   0039C4  C020  F012         	movff	turnRight_90@mR,setMotorPWM@m
  7096   0039C8  C021  F013         	movff	turnRight_90@mR+1,setMotorPWM@m+1
  7097   0039CC  ECC2  F019         	call	_setMotorPWM	;wreg free
  7098   0039D0                     l3431:
  7099                           
  7100                           ;MazeRobot.X/dc_motor.c: 226:     while((mL->power < 80) || (mR->power < 80)){
  7101   0039D0  C01E  FFD9         	movff	turnRight_90@mL,fsr2l
  7102   0039D4  C01F  FFDA         	movff	turnRight_90@mL+1,fsr2h
  7103   0039D8  0E4F               	movlw	79
  7104   0039DA  64DF               	cpfsgt	indf2,c
  7105   0039DC  EFF2  F01C         	goto	u3091
  7106   0039E0  EFF4  F01C         	goto	u3090
  7107   0039E4                     u3091:
  7108   0039E4  EFD0  F01C         	goto	l3425
  7109   0039E8                     u3090:
  7110   0039E8  C020  FFD9         	movff	turnRight_90@mR,fsr2l
  7111   0039EC  C021  FFDA         	movff	turnRight_90@mR+1,fsr2h
  7112   0039F0  0E4F               	movlw	79
  7113   0039F2  64DF               	cpfsgt	indf2,c
  7114   0039F4  EFFE  F01C         	goto	u3101
  7115   0039F8  EF00  F01D         	goto	u3100
  7116   0039FC                     u3101:
  7117   0039FC  EFD0  F01C         	goto	l3425
  7118   003A00                     u3100:
  7119   003A00                     
  7120                           ;MazeRobot.X/dc_motor.c: 232:    _delay((unsigned long)((turning_time90)*(64000000/4000.
      +                          0)));
  7121   003A00  0E0E               	movlw	14
  7122   003A02  6E23               	movwf	(??_turnRight_90+1)^0,c
  7123   003A04  0E65               	movlw	101
  7124   003A06  6E22               	movwf	??_turnRight_90^0,c
  7125   003A08  0E87               	movlw	135
  7126   003A0A                     u6407:
  7127   003A0A  2EE8               	decfsz	wreg,f,c
  7128   003A0C  D7FE               	bra	u6407
  7129   003A0E  2E22               	decfsz	??_turnRight_90^0,f,c
  7130   003A10  D7FC               	bra	u6407
  7131   003A12  2E23               	decfsz	(??_turnRight_90+1)^0,f,c
  7132   003A14  D7FA               	bra	u6407
  7133   003A16  F000               	nop	
  7134   003A18                     
  7135                           ;MazeRobot.X/dc_motor.c: 234:     stop(mL, mR);
  7136   003A18  C01E  F018         	movff	turnRight_90@mL,stop@mL
  7137   003A1C  C01F  F019         	movff	turnRight_90@mL+1,stop@mL+1
  7138   003A20  C020  F01A         	movff	turnRight_90@mR,stop@mR
  7139   003A24  C021  F01B         	movff	turnRight_90@mR+1,stop@mR+1
  7140   003A28  ECFC  F021         	call	_stop	;wreg free
  7141   003A2C  0012               	return		;funcret
  7142   003A2E                     __end_of_turnRight_90:
  7143                           	callstack 0
  7144                           
  7145 ;; *************** function _reverseSquareLeft *****************
  7146 ;; Defined at:
  7147 ;;		line 341 in file "MazeRobot.X/dc_motor.c"
  7148 ;; Parameters:    Size  Location     Type
  7149 ;;  mL              2   35[COMRAM] PTR struct DC_motor
  7150 ;;		 -> main@motorLeft(9), 
  7151 ;;  mR              2   37[COMRAM] PTR struct DC_motor
  7152 ;;		 -> main@motorRight(9), 
  7153 ;; Auto vars:     Size  Location     Type
  7154 ;;		None
  7155 ;; Return value:  Size  Location     Type
  7156 ;;                  1    wreg      void 
  7157 ;; Registers used:
  7158 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7159 ;; Tracked objects:
  7160 ;;		On entry : 0/0
  7161 ;;		On exit  : 0/0
  7162 ;;		Unchanged: 0/0
  7163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7164 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7166 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7167 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7168 ;;Total ram usage:        6 bytes
  7169 ;; Hardware stack levels used: 1
  7170 ;; Hardware stack levels required when called: 6
  7171 ;; This function calls:
  7172 ;;		_reverse
  7173 ;;		_stop
  7174 ;;		_turnLeft_90
  7175 ;; This function is called by:
  7176 ;;		_colorDetect
  7177 ;; This function uses a non-reentrant model
  7178 ;;
  7179                           
  7180                           	psect	text30
  7181   00453C                     __ptext30:
  7182                           	callstack 0
  7183   00453C                     _reverseSquareLeft:
  7184                           	callstack 23
  7185   00453C                     
  7186                           ;MazeRobot.X/dc_motor.c: 341: void reverseSquareLeft(DC_motor *mL, DC_motor *mR);MazeRob
      +                          ot.X/dc_motor.c: 342: {;MazeRobot.X/dc_motor.c: 343:     reverse(mL, mR);
  7187   00453C  C024  F018         	movff	reverseSquareLeft@mL,reverse@mL
  7188   004540  C025  F019         	movff	reverseSquareLeft@mL+1,reverse@mL+1
  7189   004544  C026  F01A         	movff	reverseSquareLeft@mR,reverse@mR
  7190   004548  C027  F01B         	movff	reverseSquareLeft@mR+1,reverse@mR+1
  7191   00454C  ECC3  F020         	call	_reverse	;wreg free
  7192   004550                     
  7193                           ;MazeRobot.X/dc_motor.c: 344:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  7194   004550  0E35               	movlw	53
  7195   004552  6E29               	movwf	(??_reverseSquareLeft+1)^0,c
  7196   004554  0EC3               	movlw	195
  7197   004556  6E28               	movwf	??_reverseSquareLeft^0,c
  7198   004558  0E59               	movlw	89
  7199   00455A                     u6417:
  7200   00455A  2EE8               	decfsz	wreg,f,c
  7201   00455C  D7FE               	bra	u6417
  7202   00455E  2E28               	decfsz	??_reverseSquareLeft^0,f,c
  7203   004560  D7FC               	bra	u6417
  7204   004562  2E29               	decfsz	(??_reverseSquareLeft+1)^0,f,c
  7205   004564  D7FA               	bra	u6417
  7206   004566  F000               	nop	
  7207   004568                     
  7208                           ;MazeRobot.X/dc_motor.c: 346:     stop(mL, mR);
  7209   004568  C024  F018         	movff	reverseSquareLeft@mL,stop@mL
  7210   00456C  C025  F019         	movff	reverseSquareLeft@mL+1,stop@mL+1
  7211   004570  C026  F01A         	movff	reverseSquareLeft@mR,stop@mR
  7212   004574  C027  F01B         	movff	reverseSquareLeft@mR+1,stop@mR+1
  7213   004578  ECFC  F021         	call	_stop	;wreg free
  7214   00457C                     
  7215                           ;MazeRobot.X/dc_motor.c: 348:     reverse(mL, mR);
  7216   00457C  C024  F018         	movff	reverseSquareLeft@mL,reverse@mL
  7217   004580  C025  F019         	movff	reverseSquareLeft@mL+1,reverse@mL+1
  7218   004584  C026  F01A         	movff	reverseSquareLeft@mR,reverse@mR
  7219   004588  C027  F01B         	movff	reverseSquareLeft@mR+1,reverse@mR+1
  7220   00458C  ECC3  F020         	call	_reverse	;wreg free
  7221   004590                     
  7222                           ;MazeRobot.X/dc_motor.c: 349:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  7223   004590  0E35               	movlw	53
  7224   004592  6E29               	movwf	(??_reverseSquareLeft+1)^0,c
  7225   004594  0EC3               	movlw	195
  7226   004596  6E28               	movwf	??_reverseSquareLeft^0,c
  7227   004598  0E59               	movlw	89
  7228   00459A                     u6427:
  7229   00459A  2EE8               	decfsz	wreg,f,c
  7230   00459C  D7FE               	bra	u6427
  7231   00459E  2E28               	decfsz	??_reverseSquareLeft^0,f,c
  7232   0045A0  D7FC               	bra	u6427
  7233   0045A2  2E29               	decfsz	(??_reverseSquareLeft+1)^0,f,c
  7234   0045A4  D7FA               	bra	u6427
  7235   0045A6  F000               	nop	
  7236                           
  7237                           ;MazeRobot.X/dc_motor.c: 351:     turnLeft_90(mL,mR);
  7238   0045A8  C024  F01E         	movff	reverseSquareLeft@mL,turnLeft_90@mL
  7239   0045AC  C025  F01F         	movff	reverseSquareLeft@mL+1,turnLeft_90@mL+1
  7240   0045B0  C026  F020         	movff	reverseSquareLeft@mR,turnLeft_90@mR
  7241   0045B4  C027  F021         	movff	reverseSquareLeft@mR+1,turnLeft_90@mR+1
  7242   0045B8  EC17  F01D         	call	_turnLeft_90	;wreg free
  7243                           
  7244                           ;MazeRobot.X/dc_motor.c: 353:     stop(mL, mR);
  7245   0045BC  C024  F018         	movff	reverseSquareLeft@mL,stop@mL
  7246   0045C0  C025  F019         	movff	reverseSquareLeft@mL+1,stop@mL+1
  7247   0045C4  C026  F01A         	movff	reverseSquareLeft@mR,stop@mR
  7248   0045C8  C027  F01B         	movff	reverseSquareLeft@mR+1,stop@mR+1
  7249   0045CC  ECFC  F021         	call	_stop	;wreg free
  7250   0045D0  0012               	return		;funcret
  7251   0045D2                     __end_of_reverseSquareLeft:
  7252                           	callstack 0
  7253                           
  7254 ;; *************** function _turnLeft_90 *****************
  7255 ;; Defined at:
  7256 ;;		line 181 in file "MazeRobot.X/dc_motor.c"
  7257 ;; Parameters:    Size  Location     Type
  7258 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  7259 ;;		 -> main@motorLeft(9), 
  7260 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  7261 ;;		 -> main@motorRight(9), 
  7262 ;; Auto vars:     Size  Location     Type
  7263 ;;		None
  7264 ;; Return value:  Size  Location     Type
  7265 ;;                  1    wreg      void 
  7266 ;; Registers used:
  7267 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7268 ;; Tracked objects:
  7269 ;;		On entry : 0/0
  7270 ;;		On exit  : 0/0
  7271 ;;		Unchanged: 0/0
  7272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7273 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7275 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7276 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7277 ;;Total ram usage:        6 bytes
  7278 ;; Hardware stack levels used: 1
  7279 ;; Hardware stack levels required when called: 5
  7280 ;; This function calls:
  7281 ;;		_reverse
  7282 ;;		_setMotorPWM
  7283 ;;		_stop
  7284 ;; This function is called by:
  7285 ;;		_colorDetect
  7286 ;;		_return_home_turns
  7287 ;;		_reverseSquareLeft
  7288 ;; This function uses a non-reentrant model
  7289 ;;
  7290                           
  7291                           	psect	text31
  7292   003A2E                     __ptext31:
  7293                           	callstack 0
  7294   003A2E                     _turnLeft_90:
  7295                           	callstack 24
  7296   003A2E                     
  7297                           ;MazeRobot.X/dc_motor.c: 181: void turnLeft_90(DC_motor *mL, DC_motor *mR);MazeRobot.X/d
      +                          c_motor.c: 182: {;MazeRobot.X/dc_motor.c: 184:     stop(mL, mR);
  7298   003A2E  C01E  F018         	movff	turnLeft_90@mL,stop@mL
  7299   003A32  C01F  F019         	movff	turnLeft_90@mL+1,stop@mL+1
  7300   003A36  C020  F01A         	movff	turnLeft_90@mR,stop@mR
  7301   003A3A  C021  F01B         	movff	turnLeft_90@mR+1,stop@mR+1
  7302   003A3E  ECFC  F021         	call	_stop	;wreg free
  7303   003A42                     
  7304                           ;MazeRobot.X/dc_motor.c: 185:     _delay((unsigned long)((100)*(64000000/4000.0)));
  7305   003A42  0E09               	movlw	9
  7306   003A44  6E23               	movwf	(??_turnLeft_90+1)^0,c
  7307   003A46  0E1E               	movlw	30
  7308   003A48  6E22               	movwf	??_turnLeft_90^0,c
  7309   003A4A  0EE4               	movlw	228
  7310   003A4C                     u6437:
  7311   003A4C  2EE8               	decfsz	wreg,f,c
  7312   003A4E  D7FE               	bra	u6437
  7313   003A50  2E22               	decfsz	??_turnLeft_90^0,f,c
  7314   003A52  D7FC               	bra	u6437
  7315   003A54  2E23               	decfsz	(??_turnLeft_90+1)^0,f,c
  7316   003A56  D7FA               	bra	u6437
  7317   003A58  D000               	nop2	
  7318   003A5A                     
  7319                           ;MazeRobot.X/dc_motor.c: 187:     reverse(mL, mR);
  7320   003A5A  C01E  F018         	movff	turnLeft_90@mL,reverse@mL
  7321   003A5E  C01F  F019         	movff	turnLeft_90@mL+1,reverse@mL+1
  7322   003A62  C020  F01A         	movff	turnLeft_90@mR,reverse@mR
  7323   003A66  C021  F01B         	movff	turnLeft_90@mR+1,reverse@mR+1
  7324   003A6A  ECC3  F020         	call	_reverse	;wreg free
  7325                           
  7326                           ;MazeRobot.X/dc_motor.c: 188:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  7327   003A6E  0E35               	movlw	53
  7328   003A70  6E23               	movwf	(??_turnLeft_90+1)^0,c
  7329   003A72  0EC3               	movlw	195
  7330   003A74  6E22               	movwf	??_turnLeft_90^0,c
  7331   003A76  0E59               	movlw	89
  7332   003A78                     u6447:
  7333   003A78  2EE8               	decfsz	wreg,f,c
  7334   003A7A  D7FE               	bra	u6447
  7335   003A7C  2E22               	decfsz	??_turnLeft_90^0,f,c
  7336   003A7E  D7FC               	bra	u6447
  7337   003A80  2E23               	decfsz	(??_turnLeft_90+1)^0,f,c
  7338   003A82  D7FA               	bra	u6447
  7339   003A84  F000               	nop	
  7340   003A86                     
  7341                           ;MazeRobot.X/dc_motor.c: 190:     stop(mL, mR);
  7342   003A86  C01E  F018         	movff	turnLeft_90@mL,stop@mL
  7343   003A8A  C01F  F019         	movff	turnLeft_90@mL+1,stop@mL+1
  7344   003A8E  C020  F01A         	movff	turnLeft_90@mR,stop@mR
  7345   003A92  C021  F01B         	movff	turnLeft_90@mR+1,stop@mR+1
  7346   003A96  ECFC  F021         	call	_stop	;wreg free
  7347   003A9A                     
  7348                           ;MazeRobot.X/dc_motor.c: 192:     mL->direction = 0;
  7349   003A9A  EE20 F001          	lfsr	2,1
  7350   003A9E  501E               	movf	turnLeft_90@mL^0,w,c
  7351   003AA0  26D9               	addwf	fsr2l,f,c
  7352   003AA2  501F               	movf	(turnLeft_90@mL+1)^0,w,c
  7353   003AA4  22DA               	addwfc	fsr2h,f,c
  7354   003AA6  0E00               	movlw	0
  7355   003AA8  6EDF               	movwf	indf2,c
  7356   003AAA                     
  7357                           ;MazeRobot.X/dc_motor.c: 193:     mR->direction = 1;
  7358   003AAA  EE20 F001          	lfsr	2,1
  7359   003AAE  5020               	movf	turnLeft_90@mR^0,w,c
  7360   003AB0  26D9               	addwf	fsr2l,f,c
  7361   003AB2  5021               	movf	(turnLeft_90@mR+1)^0,w,c
  7362   003AB4  22DA               	addwfc	fsr2h,f,c
  7363   003AB6  0E01               	movlw	1
  7364   003AB8  6EDF               	movwf	indf2,c
  7365   003ABA                     
  7366                           ;MazeRobot.X/dc_motor.c: 195:     mL->brakemode = 1;
  7367   003ABA  EE20 F002          	lfsr	2,2
  7368   003ABE  501E               	movf	turnLeft_90@mL^0,w,c
  7369   003AC0  26D9               	addwf	fsr2l,f,c
  7370   003AC2  501F               	movf	(turnLeft_90@mL+1)^0,w,c
  7371   003AC4  22DA               	addwfc	fsr2h,f,c
  7372   003AC6  0E01               	movlw	1
  7373   003AC8  6EDF               	movwf	indf2,c
  7374   003ACA                     
  7375                           ;MazeRobot.X/dc_motor.c: 196:     mL->brakemode = 1;
  7376   003ACA  EE20 F002          	lfsr	2,2
  7377   003ACE  501E               	movf	turnLeft_90@mL^0,w,c
  7378   003AD0  26D9               	addwf	fsr2l,f,c
  7379   003AD2  501F               	movf	(turnLeft_90@mL+1)^0,w,c
  7380   003AD4  22DA               	addwfc	fsr2h,f,c
  7381   003AD6  0E01               	movlw	1
  7382   003AD8  6EDF               	movwf	indf2,c
  7383                           
  7384                           ;MazeRobot.X/dc_motor.c: 198:     while((mL->power < 80) || (mR->power < 80)){
  7385   003ADA  EF87  F01D         	goto	l3461
  7386   003ADE                     l3455:
  7387                           
  7388                           ;MazeRobot.X/dc_motor.c: 199:         mL->power += 10;
  7389   003ADE  C01E  FFD9         	movff	turnLeft_90@mL,fsr2l
  7390   003AE2  C01F  FFDA         	movff	turnLeft_90@mL+1,fsr2h
  7391   003AE6  0E0A               	movlw	10
  7392   003AE8  26DF               	addwf	indf2,f,c
  7393                           
  7394                           ;MazeRobot.X/dc_motor.c: 200:         mR->power += 10;
  7395   003AEA  C020  FFD9         	movff	turnLeft_90@mR,fsr2l
  7396   003AEE  C021  FFDA         	movff	turnLeft_90@mR+1,fsr2h
  7397   003AF2  0E0A               	movlw	10
  7398   003AF4  26DF               	addwf	indf2,f,c
  7399   003AF6                     
  7400                           ;MazeRobot.X/dc_motor.c: 201:         setMotorPWM(mL);
  7401   003AF6  C01E  F012         	movff	turnLeft_90@mL,setMotorPWM@m
  7402   003AFA  C01F  F013         	movff	turnLeft_90@mL+1,setMotorPWM@m+1
  7403   003AFE  ECC2  F019         	call	_setMotorPWM	;wreg free
  7404   003B02                     
  7405                           ;MazeRobot.X/dc_motor.c: 202:         setMotorPWM(mR);
  7406   003B02  C020  F012         	movff	turnLeft_90@mR,setMotorPWM@m
  7407   003B06  C021  F013         	movff	turnLeft_90@mR+1,setMotorPWM@m+1
  7408   003B0A  ECC2  F019         	call	_setMotorPWM	;wreg free
  7409   003B0E                     l3461:
  7410                           
  7411                           ;MazeRobot.X/dc_motor.c: 198:     while((mL->power < 80) || (mR->power < 80)){
  7412   003B0E  C01E  FFD9         	movff	turnLeft_90@mL,fsr2l
  7413   003B12  C01F  FFDA         	movff	turnLeft_90@mL+1,fsr2h
  7414   003B16  0E4F               	movlw	79
  7415   003B18  64DF               	cpfsgt	indf2,c
  7416   003B1A  EF91  F01D         	goto	u3111
  7417   003B1E  EF93  F01D         	goto	u3110
  7418   003B22                     u3111:
  7419   003B22  EF6F  F01D         	goto	l3455
  7420   003B26                     u3110:
  7421   003B26  C020  FFD9         	movff	turnLeft_90@mR,fsr2l
  7422   003B2A  C021  FFDA         	movff	turnLeft_90@mR+1,fsr2h
  7423   003B2E  0E4F               	movlw	79
  7424   003B30  64DF               	cpfsgt	indf2,c
  7425   003B32  EF9D  F01D         	goto	u3121
  7426   003B36  EF9F  F01D         	goto	u3120
  7427   003B3A                     u3121:
  7428   003B3A  EF6F  F01D         	goto	l3455
  7429   003B3E                     u3120:
  7430   003B3E                     
  7431                           ;MazeRobot.X/dc_motor.c: 204:    _delay((unsigned long)((turning_time90)*(64000000/4000.
      +                          0)));
  7432   003B3E  0E0E               	movlw	14
  7433   003B40  6E23               	movwf	(??_turnLeft_90+1)^0,c
  7434   003B42  0E65               	movlw	101
  7435   003B44  6E22               	movwf	??_turnLeft_90^0,c
  7436   003B46  0E87               	movlw	135
  7437   003B48                     u6457:
  7438   003B48  2EE8               	decfsz	wreg,f,c
  7439   003B4A  D7FE               	bra	u6457
  7440   003B4C  2E22               	decfsz	??_turnLeft_90^0,f,c
  7441   003B4E  D7FC               	bra	u6457
  7442   003B50  2E23               	decfsz	(??_turnLeft_90+1)^0,f,c
  7443   003B52  D7FA               	bra	u6457
  7444   003B54  F000               	nop	
  7445   003B56                     
  7446                           ;MazeRobot.X/dc_motor.c: 205:     stop(mL, mR);
  7447   003B56  C01E  F018         	movff	turnLeft_90@mL,stop@mL
  7448   003B5A  C01F  F019         	movff	turnLeft_90@mL+1,stop@mL+1
  7449   003B5E  C020  F01A         	movff	turnLeft_90@mR,stop@mR
  7450   003B62  C021  F01B         	movff	turnLeft_90@mR+1,stop@mR+1
  7451   003B66  ECFC  F021         	call	_stop	;wreg free
  7452   003B6A  0012               	return		;funcret
  7453   003B6C                     __end_of_turnLeft_90:
  7454                           	callstack 0
  7455                           
  7456 ;; *************** function _stop *****************
  7457 ;; Defined at:
  7458 ;;		line 117 in file "MazeRobot.X/dc_motor.c"
  7459 ;; Parameters:    Size  Location     Type
  7460 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  7461 ;;		 -> main@motorLeft(9), 
  7462 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  7463 ;;		 -> main@motorRight(9), 
  7464 ;; Auto vars:     Size  Location     Type
  7465 ;;		None
  7466 ;; Return value:  Size  Location     Type
  7467 ;;                  1    wreg      void 
  7468 ;; Registers used:
  7469 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7470 ;; Tracked objects:
  7471 ;;		On entry : 0/0
  7472 ;;		On exit  : 0/0
  7473 ;;		Unchanged: 0/0
  7474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7475 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7477 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7478 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7479 ;;Total ram usage:        6 bytes
  7480 ;; Hardware stack levels used: 1
  7481 ;; Hardware stack levels required when called: 4
  7482 ;; This function calls:
  7483 ;;		_setMotorPWM
  7484 ;; This function is called by:
  7485 ;;		_return_home_turns
  7486 ;;		_turnLeft_90
  7487 ;;		_turnRight_90
  7488 ;;		_turn_180
  7489 ;;		_turnRight_135
  7490 ;;		_turnLeft_135
  7491 ;;		_reverseSquareRight
  7492 ;;		_reverseSquareLeft
  7493 ;;		_main
  7494 ;; This function uses a non-reentrant model
  7495 ;;
  7496                           
  7497                           	psect	text32
  7498   0043F8                     __ptext32:
  7499                           	callstack 0
  7500   0043F8                     _stop:
  7501                           	callstack 25
  7502   0043F8                     
  7503                           ;MazeRobot.X/dc_motor.c: 119:     while ((mL->power)>0 && (mR->power)>0){
  7504   0043F8  EF2E  F022         	goto	l3333
  7505   0043FC                     l3321:
  7506                           
  7507                           ;MazeRobot.X/dc_motor.c: 120:         if ((mL->power) >0){
  7508   0043FC  C018  FFD9         	movff	stop@mL,fsr2l
  7509   004400  C019  FFDA         	movff	stop@mL+1,fsr2h
  7510   004404  50DF               	movf	indf2,w,c
  7511   004406  B4D8               	btfsc	status,2,c
  7512   004408  EF08  F022         	goto	u2981
  7513   00440C  EF0A  F022         	goto	u2980
  7514   004410                     u2981:
  7515   004410  EF10  F022         	goto	l3325
  7516   004414                     u2980:
  7517   004414                     
  7518                           ;MazeRobot.X/dc_motor.c: 121:             mL->power -= 5;
  7519   004414  C018  FFD9         	movff	stop@mL,fsr2l
  7520   004418  C019  FFDA         	movff	stop@mL+1,fsr2h
  7521   00441C  0E05               	movlw	5
  7522   00441E  5EDF               	subwf	indf2,f,c
  7523   004420                     l3325:
  7524                           
  7525                           ;MazeRobot.X/dc_motor.c: 123:         if ((mR->power) >0){
  7526   004420  C01A  FFD9         	movff	stop@mR,fsr2l
  7527   004424  C01B  FFDA         	movff	stop@mR+1,fsr2h
  7528   004428  50DF               	movf	indf2,w,c
  7529   00442A  B4D8               	btfsc	status,2,c
  7530   00442C  EF1A  F022         	goto	u2991
  7531   004430  EF1C  F022         	goto	u2990
  7532   004434                     u2991:
  7533   004434  EF22  F022         	goto	l3329
  7534   004438                     u2990:
  7535   004438                     
  7536                           ;MazeRobot.X/dc_motor.c: 124:             mR->power -= 5;
  7537   004438  C01A  FFD9         	movff	stop@mR,fsr2l
  7538   00443C  C01B  FFDA         	movff	stop@mR+1,fsr2h
  7539   004440  0E05               	movlw	5
  7540   004442  5EDF               	subwf	indf2,f,c
  7541   004444                     l3329:
  7542                           
  7543                           ;MazeRobot.X/dc_motor.c: 127:         setMotorPWM(mL);
  7544   004444  C018  F012         	movff	stop@mL,setMotorPWM@m
  7545   004448  C019  F013         	movff	stop@mL+1,setMotorPWM@m+1
  7546   00444C  ECC2  F019         	call	_setMotorPWM	;wreg free
  7547   004450                     
  7548                           ;MazeRobot.X/dc_motor.c: 128:         setMotorPWM(mR);
  7549   004450  C01A  F012         	movff	stop@mR,setMotorPWM@m
  7550   004454  C01B  F013         	movff	stop@mR+1,setMotorPWM@m+1
  7551   004458  ECC2  F019         	call	_setMotorPWM	;wreg free
  7552   00445C                     l3333:
  7553                           
  7554                           ;MazeRobot.X/dc_motor.c: 119:     while ((mL->power)>0 && (mR->power)>0){
  7555   00445C  C018  FFD9         	movff	stop@mL,fsr2l
  7556   004460  C019  FFDA         	movff	stop@mL+1,fsr2h
  7557   004464  50DF               	movf	indf2,w,c
  7558   004466  B4D8               	btfsc	status,2,c
  7559   004468  EF38  F022         	goto	u3001
  7560   00446C  EF3A  F022         	goto	u3000
  7561   004470                     u3001:
  7562   004470  EF46  F022         	goto	l3337
  7563   004474                     u3000:
  7564   004474  C01A  FFD9         	movff	stop@mR,fsr2l
  7565   004478  C01B  FFDA         	movff	stop@mR+1,fsr2h
  7566   00447C  50DF               	movf	indf2,w,c
  7567   00447E  A4D8               	btfss	status,2,c
  7568   004480  EF44  F022         	goto	u3011
  7569   004484  EF46  F022         	goto	u3010
  7570   004488                     u3011:
  7571   004488  EFFE  F021         	goto	l3321
  7572   00448C                     u3010:
  7573   00448C                     l3337:
  7574                           
  7575                           ;MazeRobot.X/dc_motor.c: 130:     _delay((unsigned long)((100)*(64000000/4000.0)));
  7576   00448C  0E09               	movlw	9
  7577   00448E  6E1D               	movwf	(??_stop+1)^0,c
  7578   004490  0E1E               	movlw	30
  7579   004492  6E1C               	movwf	??_stop^0,c
  7580   004494  0EE4               	movlw	228
  7581   004496                     u6467:
  7582   004496  2EE8               	decfsz	wreg,f,c
  7583   004498  D7FE               	bra	u6467
  7584   00449A  2E1C               	decfsz	??_stop^0,f,c
  7585   00449C  D7FC               	bra	u6467
  7586   00449E  2E1D               	decfsz	(??_stop+1)^0,f,c
  7587   0044A0  D7FA               	bra	u6467
  7588   0044A2  D000               	nop2	
  7589   0044A4  0012               	return		;funcret
  7590   0044A6                     __end_of_stop:
  7591                           	callstack 0
  7592                           
  7593 ;; *************** function _reverse *****************
  7594 ;; Defined at:
  7595 ;;		line 157 in file "MazeRobot.X/dc_motor.c"
  7596 ;; Parameters:    Size  Location     Type
  7597 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  7598 ;;		 -> main@motorLeft(9), 
  7599 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  7600 ;;		 -> main@motorRight(9), 
  7601 ;; Auto vars:     Size  Location     Type
  7602 ;;		None
  7603 ;; Return value:  Size  Location     Type
  7604 ;;                  1    wreg      void 
  7605 ;; Registers used:
  7606 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7607 ;; Tracked objects:
  7608 ;;		On entry : 0/0
  7609 ;;		On exit  : 0/0
  7610 ;;		Unchanged: 0/0
  7611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7612 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7614 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7615 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7616 ;;Total ram usage:        5 bytes
  7617 ;; Hardware stack levels used: 1
  7618 ;; Hardware stack levels required when called: 4
  7619 ;; This function calls:
  7620 ;;		_setMotorPWM
  7621 ;; This function is called by:
  7622 ;;		_turnLeft_90
  7623 ;;		_turnRight_90
  7624 ;;		_turn_180
  7625 ;;		_turnRight_135
  7626 ;;		_turnLeft_135
  7627 ;;		_reverseSquareRight
  7628 ;;		_reverseSquareLeft
  7629 ;; This function uses a non-reentrant model
  7630 ;;
  7631                           
  7632                           	psect	text33
  7633   004186                     __ptext33:
  7634                           	callstack 0
  7635   004186                     _reverse:
  7636                           	callstack 25
  7637   004186                     
  7638                           ;MazeRobot.X/dc_motor.c: 157: void reverse(DC_motor *mL, DC_motor *mR);MazeRobot.X/dc_mo
      +                          tor.c: 158: {;MazeRobot.X/dc_motor.c: 159:     mL->direction = 0;
  7639   004186  EE20 F001          	lfsr	2,1
  7640   00418A  5018               	movf	reverse@mL^0,w,c
  7641   00418C  26D9               	addwf	fsr2l,f,c
  7642   00418E  5019               	movf	(reverse@mL+1)^0,w,c
  7643   004190  22DA               	addwfc	fsr2h,f,c
  7644   004192  0E00               	movlw	0
  7645   004194  6EDF               	movwf	indf2,c
  7646                           
  7647                           ;MazeRobot.X/dc_motor.c: 160:     mR->direction = 0;
  7648   004196  EE20 F001          	lfsr	2,1
  7649   00419A  501A               	movf	reverse@mR^0,w,c
  7650   00419C  26D9               	addwf	fsr2l,f,c
  7651   00419E  501B               	movf	(reverse@mR+1)^0,w,c
  7652   0041A0  22DA               	addwfc	fsr2h,f,c
  7653   0041A2  0E00               	movlw	0
  7654   0041A4  6EDF               	movwf	indf2,c
  7655                           
  7656                           ;MazeRobot.X/dc_motor.c: 162:     mL->brakemode = 1;
  7657   0041A6  EE20 F002          	lfsr	2,2
  7658   0041AA  5018               	movf	reverse@mL^0,w,c
  7659   0041AC  26D9               	addwf	fsr2l,f,c
  7660   0041AE  5019               	movf	(reverse@mL+1)^0,w,c
  7661   0041B0  22DA               	addwfc	fsr2h,f,c
  7662   0041B2  0E01               	movlw	1
  7663   0041B4  6EDF               	movwf	indf2,c
  7664                           
  7665                           ;MazeRobot.X/dc_motor.c: 163:     mL->brakemode = 1;
  7666   0041B6  EE20 F002          	lfsr	2,2
  7667   0041BA  5018               	movf	reverse@mL^0,w,c
  7668   0041BC  26D9               	addwf	fsr2l,f,c
  7669   0041BE  5019               	movf	(reverse@mL+1)^0,w,c
  7670   0041C0  22DA               	addwfc	fsr2h,f,c
  7671   0041C2  0E01               	movlw	1
  7672   0041C4  6EDF               	movwf	indf2,c
  7673                           
  7674                           ;MazeRobot.X/dc_motor.c: 165:     while ((mL->power)<25 && (mR->power)<25){
  7675   0041C6  EF09  F021         	goto	l3349
  7676   0041CA                     l3341:
  7677                           
  7678                           ;MazeRobot.X/dc_motor.c: 166:         if ((mL->power) < 25){
  7679   0041CA  C018  FFD9         	movff	reverse@mL,fsr2l
  7680   0041CE  C019  FFDA         	movff	reverse@mL+1,fsr2h
  7681   0041D2  0E19               	movlw	25
  7682   0041D4  60DF               	cpfslt	indf2,c
  7683   0041D6  EFEF  F020         	goto	u3021
  7684   0041DA  EFF1  F020         	goto	u3020
  7685   0041DE                     u3021:
  7686   0041DE  EFF7  F020         	goto	l3345
  7687   0041E2                     u3020:
  7688   0041E2                     
  7689                           ;MazeRobot.X/dc_motor.c: 167:             mL->power += 5;
  7690   0041E2  C018  FFD9         	movff	reverse@mL,fsr2l
  7691   0041E6  C019  FFDA         	movff	reverse@mL+1,fsr2h
  7692   0041EA  0E05               	movlw	5
  7693   0041EC  26DF               	addwf	indf2,f,c
  7694   0041EE                     l3345:
  7695                           
  7696                           ;MazeRobot.X/dc_motor.c: 169:         if ((mR->power) <25){
  7697   0041EE  C01A  FFD9         	movff	reverse@mR,fsr2l
  7698   0041F2  C01B  FFDA         	movff	reverse@mR+1,fsr2h
  7699   0041F6  0E19               	movlw	25
  7700   0041F8  60DF               	cpfslt	indf2,c
  7701   0041FA  EF01  F021         	goto	u3031
  7702   0041FE  EF03  F021         	goto	u3030
  7703   004202                     u3031:
  7704   004202  EF09  F021         	goto	l3349
  7705   004206                     u3030:
  7706   004206                     
  7707                           ;MazeRobot.X/dc_motor.c: 170:             mR->power += 5;
  7708   004206  C01A  FFD9         	movff	reverse@mR,fsr2l
  7709   00420A  C01B  FFDA         	movff	reverse@mR+1,fsr2h
  7710   00420E  0E05               	movlw	5
  7711   004210  26DF               	addwf	indf2,f,c
  7712   004212                     l3349:
  7713                           
  7714                           ;MazeRobot.X/dc_motor.c: 165:     while ((mL->power)<25 && (mR->power)<25){
  7715   004212  C018  FFD9         	movff	reverse@mL,fsr2l
  7716   004216  C019  FFDA         	movff	reverse@mL+1,fsr2h
  7717   00421A  0E19               	movlw	25
  7718   00421C  60DF               	cpfslt	indf2,c
  7719   00421E  EF13  F021         	goto	u3041
  7720   004222  EF15  F021         	goto	u3040
  7721   004226                     u3041:
  7722   004226  EF21  F021         	goto	l3353
  7723   00422A                     u3040:
  7724   00422A  C01A  FFD9         	movff	reverse@mR,fsr2l
  7725   00422E  C01B  FFDA         	movff	reverse@mR+1,fsr2h
  7726   004232  0E18               	movlw	24
  7727   004234  64DF               	cpfsgt	indf2,c
  7728   004236  EF1F  F021         	goto	u3051
  7729   00423A  EF21  F021         	goto	u3050
  7730   00423E                     u3051:
  7731   00423E  EFE5  F020         	goto	l3341
  7732   004242                     u3050:
  7733   004242                     l3353:
  7734                           
  7735                           ;MazeRobot.X/dc_motor.c: 174:     setMotorPWM(mL);
  7736   004242  C018  F012         	movff	reverse@mL,setMotorPWM@m
  7737   004246  C019  F013         	movff	reverse@mL+1,setMotorPWM@m+1
  7738   00424A  ECC2  F019         	call	_setMotorPWM	;wreg free
  7739                           
  7740                           ;MazeRobot.X/dc_motor.c: 175:     setMotorPWM(mR);
  7741   00424E  C01A  F012         	movff	reverse@mR,setMotorPWM@m
  7742   004252  C01B  F013         	movff	reverse@mR+1,setMotorPWM@m+1
  7743   004256  ECC2  F019         	call	_setMotorPWM	;wreg free
  7744   00425A  0012               	return		;funcret
  7745   00425C                     __end_of_reverse:
  7746                           	callstack 0
  7747                           
  7748 ;; *************** function _setMotorPWM *****************
  7749 ;; Defined at:
  7750 ;;		line 94 in file "MazeRobot.X/dc_motor.c"
  7751 ;; Parameters:    Size  Location     Type
  7752 ;;  m               2   17[COMRAM] PTR struct DC_motor
  7753 ;;		 -> main@motorRight(9), main@motorLeft(9), 
  7754 ;; Auto vars:     Size  Location     Type
  7755 ;;  negDuty         1   22[COMRAM] unsigned char 
  7756 ;;  posDuty         1   21[COMRAM] unsigned char 
  7757 ;; Return value:  Size  Location     Type
  7758 ;;                  1    wreg      void 
  7759 ;; Registers used:
  7760 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7761 ;; Tracked objects:
  7762 ;;		On entry : 0/0
  7763 ;;		On exit  : 0/0
  7764 ;;		Unchanged: 0/0
  7765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7766 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7767 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7768 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7769 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7770 ;;Total ram usage:        6 bytes
  7771 ;; Hardware stack levels used: 1
  7772 ;; Hardware stack levels required when called: 3
  7773 ;; This function calls:
  7774 ;;		___lwdiv
  7775 ;;		___wmul
  7776 ;; This function is called by:
  7777 ;;		_stop
  7778 ;;		_forward
  7779 ;;		_reverse
  7780 ;;		_turnLeft_90
  7781 ;;		_turnRight_90
  7782 ;;		_turn_180
  7783 ;;		_turnRight_135
  7784 ;;		_turnLeft_135
  7785 ;; This function uses a non-reentrant model
  7786 ;;
  7787                           
  7788                           	psect	text34
  7789   003384                     __ptext34:
  7790                           	callstack 0
  7791   003384                     _setMotorPWM:
  7792                           	callstack 25
  7793   003384                     
  7794                           ;MazeRobot.X/dc_motor.c: 94: void setMotorPWM(DC_motor *m);MazeRobot.X/dc_motor.c: 95: {
      +                          ;MazeRobot.X/dc_motor.c: 96:     unsigned char posDuty, negDuty;;MazeRobot.X/dc_motor.c:
      +                           98:     if(m->brakemode) {
  7795   003384  EE20 F002          	lfsr	2,2
  7796   003388  5012               	movf	setMotorPWM@m^0,w,c
  7797   00338A  26D9               	addwf	fsr2l,f,c
  7798   00338C  5013               	movf	(setMotorPWM@m+1)^0,w,c
  7799   00338E  22DA               	addwfc	fsr2h,f,c
  7800   003390  50DF               	movf	indf2,w,c
  7801   003392  B4D8               	btfsc	status,2,c
  7802   003394  EFCE  F019         	goto	u2821
  7803   003398  EFD0  F019         	goto	u2820
  7804   00339C                     u2821:
  7805   00339C  EF04  F01A         	goto	l3223
  7806   0033A0                     u2820:
  7807   0033A0                     
  7808                           ;MazeRobot.X/dc_motor.c: 99:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m
      +                          ->PWMperiod))/100;
  7809   0033A0  C012  FFD9         	movff	setMotorPWM@m,fsr2l
  7810   0033A4  C013  FFDA         	movff	setMotorPWM@m+1,fsr2h
  7811   0033A8  50DF               	movf	indf2,w,c
  7812   0033AA  6E14               	movwf	??_setMotorPWM^0,c
  7813   0033AC  5014               	movf	??_setMotorPWM^0,w,c
  7814   0033AE  6E05               	movwf	___wmul@multiplier^0,c
  7815   0033B0  6A06               	clrf	(___wmul@multiplier+1)^0,c
  7816   0033B2  EE20 F003          	lfsr	2,3
  7817   0033B6  5012               	movf	setMotorPWM@m^0,w,c
  7818   0033B8  26D9               	addwf	fsr2l,f,c
  7819   0033BA  5013               	movf	(setMotorPWM@m+1)^0,w,c
  7820   0033BC  22DA               	addwfc	fsr2h,f,c
  7821   0033BE  CFDE F007          	movff	postinc2,___wmul@multiplicand
  7822   0033C2  CFDD F008          	movff	postdec2,___wmul@multiplicand+1
  7823   0033C6  EC27  F026         	call	___wmul	;wreg free
  7824   0033CA  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  7825   0033CE  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  7826   0033D2  0E00               	movlw	0
  7827   0033D4  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  7828   0033D6  0E64               	movlw	100
  7829   0033D8  6E0D               	movwf	___lwdiv@divisor^0,c
  7830   0033DA  EC6E  F023         	call	___lwdiv	;wreg free
  7831   0033DE  EE20 F003          	lfsr	2,3
  7832   0033E2  5012               	movf	setMotorPWM@m^0,w,c
  7833   0033E4  26D9               	addwf	fsr2l,f,c
  7834   0033E6  5013               	movf	(setMotorPWM@m+1)^0,w,c
  7835   0033E8  22DA               	addwfc	fsr2h,f,c
  7836   0033EA  50DF               	movf	indf2,w,c
  7837   0033EC  6E15               	movwf	(??_setMotorPWM+1)^0,c
  7838   0033EE  500B               	movf	?___lwdiv^0,w,c
  7839   0033F0  5C15               	subwf	(??_setMotorPWM+1)^0,w,c
  7840   0033F2  6E16               	movwf	setMotorPWM@posDuty^0,c
  7841   0033F4                     
  7842                           ;MazeRobot.X/dc_motor.c: 100:         negDuty=m->PWMperiod;
  7843   0033F4  EE20 F003          	lfsr	2,3
  7844   0033F8  5012               	movf	setMotorPWM@m^0,w,c
  7845   0033FA  26D9               	addwf	fsr2l,f,c
  7846   0033FC  5013               	movf	(setMotorPWM@m+1)^0,w,c
  7847   0033FE  22DA               	addwfc	fsr2h,f,c
  7848   003400  50DF               	movf	indf2,w,c
  7849   003402  6E17               	movwf	setMotorPWM@negDuty^0,c
  7850                           
  7851                           ;MazeRobot.X/dc_motor.c: 101:     }
  7852   003404  EF27  F01A         	goto	l3227
  7853   003408                     l3223:
  7854                           
  7855                           ;MazeRobot.X/dc_motor.c: 103:         posDuty=0;
  7856   003408  0E00               	movlw	0
  7857   00340A  6E16               	movwf	setMotorPWM@posDuty^0,c
  7858   00340C                     
  7859                           ;MazeRobot.X/dc_motor.c: 104:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  7860   00340C  C012  FFD9         	movff	setMotorPWM@m,fsr2l
  7861   003410  C013  FFDA         	movff	setMotorPWM@m+1,fsr2h
  7862   003414  50DF               	movf	indf2,w,c
  7863   003416  6E14               	movwf	??_setMotorPWM^0,c
  7864   003418  5014               	movf	??_setMotorPWM^0,w,c
  7865   00341A  6E05               	movwf	___wmul@multiplier^0,c
  7866   00341C  6A06               	clrf	(___wmul@multiplier+1)^0,c
  7867   00341E  EE20 F003          	lfsr	2,3
  7868   003422  5012               	movf	setMotorPWM@m^0,w,c
  7869   003424  26D9               	addwf	fsr2l,f,c
  7870   003426  5013               	movf	(setMotorPWM@m+1)^0,w,c
  7871   003428  22DA               	addwfc	fsr2h,f,c
  7872   00342A  CFDE F007          	movff	postinc2,___wmul@multiplicand
  7873   00342E  CFDD F008          	movff	postdec2,___wmul@multiplicand+1
  7874   003432  EC27  F026         	call	___wmul	;wreg free
  7875   003436  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  7876   00343A  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  7877   00343E  0E00               	movlw	0
  7878   003440  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  7879   003442  0E64               	movlw	100
  7880   003444  6E0D               	movwf	___lwdiv@divisor^0,c
  7881   003446  EC6E  F023         	call	___lwdiv	;wreg free
  7882   00344A  500B               	movf	?___lwdiv^0,w,c
  7883   00344C  6E17               	movwf	setMotorPWM@negDuty^0,c
  7884   00344E                     l3227:
  7885                           
  7886                           ;MazeRobot.X/dc_motor.c: 107:     if (m->direction) {
  7887   00344E  EE20 F001          	lfsr	2,1
  7888   003452  5012               	movf	setMotorPWM@m^0,w,c
  7889   003454  26D9               	addwf	fsr2l,f,c
  7890   003456  5013               	movf	(setMotorPWM@m+1)^0,w,c
  7891   003458  22DA               	addwfc	fsr2h,f,c
  7892   00345A  50DF               	movf	indf2,w,c
  7893   00345C  B4D8               	btfsc	status,2,c
  7894   00345E  EF33  F01A         	goto	u2831
  7895   003462  EF35  F01A         	goto	u2830
  7896   003466                     u2831:
  7897   003466  EF57  F01A         	goto	l3231
  7898   00346A                     u2830:
  7899   00346A                     
  7900                           ;MazeRobot.X/dc_motor.c: 108:         *(m->posDutyHighByte)=posDuty;
  7901   00346A  EE20 F005          	lfsr	2,5
  7902   00346E  5012               	movf	setMotorPWM@m^0,w,c
  7903   003470  26D9               	addwf	fsr2l,f,c
  7904   003472  5013               	movf	(setMotorPWM@m+1)^0,w,c
  7905   003474  22DA               	addwfc	fsr2h,f,c
  7906   003476  CFDE F014          	movff	postinc2,??_setMotorPWM
  7907   00347A  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  7908   00347E  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  7909   003482  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7910   003486  C016  FFDF         	movff	setMotorPWM@posDuty,indf2
  7911                           
  7912                           ;MazeRobot.X/dc_motor.c: 109:         *(m->negDutyHighByte)=negDuty;
  7913   00348A  EE20 F007          	lfsr	2,7
  7914   00348E  5012               	movf	setMotorPWM@m^0,w,c
  7915   003490  26D9               	addwf	fsr2l,f,c
  7916   003492  5013               	movf	(setMotorPWM@m+1)^0,w,c
  7917   003494  22DA               	addwfc	fsr2h,f,c
  7918   003496  CFDE F014          	movff	postinc2,??_setMotorPWM
  7919   00349A  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  7920   00349E  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  7921   0034A2  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7922   0034A6  C017  FFDF         	movff	setMotorPWM@negDuty,indf2
  7923                           
  7924                           ;MazeRobot.X/dc_motor.c: 110:     } else {
  7925   0034AA  EF77  F01A         	goto	l204
  7926   0034AE                     l3231:
  7927                           
  7928                           ;MazeRobot.X/dc_motor.c: 111:         *(m->posDutyHighByte)=negDuty;
  7929   0034AE  EE20 F005          	lfsr	2,5
  7930   0034B2  5012               	movf	setMotorPWM@m^0,w,c
  7931   0034B4  26D9               	addwf	fsr2l,f,c
  7932   0034B6  5013               	movf	(setMotorPWM@m+1)^0,w,c
  7933   0034B8  22DA               	addwfc	fsr2h,f,c
  7934   0034BA  CFDE F014          	movff	postinc2,??_setMotorPWM
  7935   0034BE  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  7936   0034C2  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  7937   0034C6  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7938   0034CA  C017  FFDF         	movff	setMotorPWM@negDuty,indf2
  7939                           
  7940                           ;MazeRobot.X/dc_motor.c: 112:         *(m->negDutyHighByte)=posDuty;
  7941   0034CE  EE20 F007          	lfsr	2,7
  7942   0034D2  5012               	movf	setMotorPWM@m^0,w,c
  7943   0034D4  26D9               	addwf	fsr2l,f,c
  7944   0034D6  5013               	movf	(setMotorPWM@m+1)^0,w,c
  7945   0034D8  22DA               	addwfc	fsr2h,f,c
  7946   0034DA  CFDE F014          	movff	postinc2,??_setMotorPWM
  7947   0034DE  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  7948   0034E2  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  7949   0034E6  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7950   0034EA  C016  FFDF         	movff	setMotorPWM@posDuty,indf2
  7951   0034EE                     l204:
  7952   0034EE  0012               	return		;funcret
  7953   0034F0                     __end_of_setMotorPWM:
  7954                           	callstack 0
  7955                           
  7956 ;; *************** function ___wmul *****************
  7957 ;; Defined at:
  7958 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  7959 ;; Parameters:    Size  Location     Type
  7960 ;;  multiplier      2    4[COMRAM] unsigned int 
  7961 ;;  multiplicand    2    6[COMRAM] unsigned int 
  7962 ;; Auto vars:     Size  Location     Type
  7963 ;;  product         2    8[COMRAM] unsigned int 
  7964 ;; Return value:  Size  Location     Type
  7965 ;;                  2    4[COMRAM] unsigned int 
  7966 ;; Registers used:
  7967 ;;		wreg, status,2, status,0, prodl, prodh
  7968 ;; Tracked objects:
  7969 ;;		On entry : 0/0
  7970 ;;		On exit  : 0/0
  7971 ;;		Unchanged: 0/0
  7972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7973 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7974 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7976 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7977 ;;Total ram usage:        6 bytes
  7978 ;; Hardware stack levels used: 1
  7979 ;; Hardware stack levels required when called: 2
  7980 ;; This function calls:
  7981 ;;		Nothing
  7982 ;; This function is called by:
  7983 ;;		_setMotorPWM
  7984 ;; This function uses a non-reentrant model
  7985 ;;
  7986                           
  7987                           	psect	text35
  7988   004C4E                     __ptext35:
  7989                           	callstack 0
  7990   004C4E                     ___wmul:
  7991                           	callstack 25
  7992   004C4E  5005               	movf	___wmul@multiplier^0,w,c
  7993   004C50  0207               	mulwf	___wmul@multiplicand^0,c
  7994   004C52  CFF3 F009          	movff	prodl,___wmul@product
  7995   004C56  CFF4 F00A          	movff	prodh,___wmul@product+1
  7996   004C5A  5005               	movf	___wmul@multiplier^0,w,c
  7997   004C5C  0208               	mulwf	(___wmul@multiplicand+1)^0,c
  7998   004C5E  50F3               	movf	243,w,c
  7999   004C60  260A               	addwf	(___wmul@product+1)^0,f,c
  8000   004C62  5006               	movf	(___wmul@multiplier+1)^0,w,c
  8001   004C64  0207               	mulwf	___wmul@multiplicand^0,c
  8002   004C66  50F3               	movf	243,w,c
  8003   004C68  260A               	addwf	(___wmul@product+1)^0,f,c
  8004   004C6A  C009  F005         	movff	___wmul@product,?___wmul
  8005   004C6E  C00A  F006         	movff	___wmul@product+1,?___wmul+1
  8006   004C72  0012               	return		;funcret
  8007   004C74                     __end_of___wmul:
  8008                           	callstack 0
  8009                           
  8010 ;; *************** function ___lwdiv *****************
  8011 ;; Defined at:
  8012 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  8013 ;; Parameters:    Size  Location     Type
  8014 ;;  dividend        2   10[COMRAM] unsigned int 
  8015 ;;  divisor         2   12[COMRAM] unsigned int 
  8016 ;; Auto vars:     Size  Location     Type
  8017 ;;  quotient        2   14[COMRAM] unsigned int 
  8018 ;;  counter         1   16[COMRAM] unsigned char 
  8019 ;; Return value:  Size  Location     Type
  8020 ;;                  2   10[COMRAM] unsigned int 
  8021 ;; Registers used:
  8022 ;;		wreg, status,2, status,0
  8023 ;; Tracked objects:
  8024 ;;		On entry : 0/0
  8025 ;;		On exit  : 0/0
  8026 ;;		Unchanged: 0/0
  8027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8028 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8029 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8031 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8032 ;;Total ram usage:        7 bytes
  8033 ;; Hardware stack levels used: 1
  8034 ;; Hardware stack levels required when called: 2
  8035 ;; This function calls:
  8036 ;;		Nothing
  8037 ;; This function is called by:
  8038 ;;		_setMotorPWM
  8039 ;; This function uses a non-reentrant model
  8040 ;;
  8041                           
  8042                           	psect	text36
  8043   0046DC                     __ptext36:
  8044                           	callstack 0
  8045   0046DC                     ___lwdiv:
  8046                           	callstack 25
  8047   0046DC  0E00               	movlw	0
  8048   0046DE  6E10               	movwf	(___lwdiv@quotient+1)^0,c
  8049   0046E0  0E00               	movlw	0
  8050   0046E2  6E0F               	movwf	___lwdiv@quotient^0,c
  8051   0046E4  500D               	movf	___lwdiv@divisor^0,w,c
  8052   0046E6  100E               	iorwf	(___lwdiv@divisor+1)^0,w,c
  8053   0046E8  B4D8               	btfsc	status,2,c
  8054   0046EA  EF79  F023         	goto	u2761
  8055   0046EE  EF7B  F023         	goto	u2760
  8056   0046F2                     u2761:
  8057   0046F2  EFA3  F023         	goto	l1032
  8058   0046F6                     u2760:
  8059   0046F6  0E01               	movlw	1
  8060   0046F8  6E11               	movwf	___lwdiv@counter^0,c
  8061   0046FA  EF83  F023         	goto	l3185
  8062   0046FE                     l3183:
  8063   0046FE  90D8               	bcf	status,0,c
  8064   004700  360D               	rlcf	___lwdiv@divisor^0,f,c
  8065   004702  360E               	rlcf	(___lwdiv@divisor+1)^0,f,c
  8066   004704  2A11               	incf	___lwdiv@counter^0,f,c
  8067   004706                     l3185:
  8068   004706  AE0E               	btfss	(___lwdiv@divisor+1)^0,7,c
  8069   004708  EF88  F023         	goto	u2771
  8070   00470C  EF8A  F023         	goto	u2770
  8071   004710                     u2771:
  8072   004710  EF7F  F023         	goto	l3183
  8073   004714                     u2770:
  8074   004714                     l3187:
  8075   004714  90D8               	bcf	status,0,c
  8076   004716  360F               	rlcf	___lwdiv@quotient^0,f,c
  8077   004718  3610               	rlcf	(___lwdiv@quotient+1)^0,f,c
  8078   00471A  500D               	movf	___lwdiv@divisor^0,w,c
  8079   00471C  5C0B               	subwf	___lwdiv@dividend^0,w,c
  8080   00471E  500E               	movf	(___lwdiv@divisor+1)^0,w,c
  8081   004720  580C               	subwfb	(___lwdiv@dividend+1)^0,w,c
  8082   004722  A0D8               	btfss	status,0,c
  8083   004724  EF96  F023         	goto	u2781
  8084   004728  EF98  F023         	goto	u2780
  8085   00472C                     u2781:
  8086   00472C  EF9D  F023         	goto	l3195
  8087   004730                     u2780:
  8088   004730  500D               	movf	___lwdiv@divisor^0,w,c
  8089   004732  5E0B               	subwf	___lwdiv@dividend^0,f,c
  8090   004734  500E               	movf	(___lwdiv@divisor+1)^0,w,c
  8091   004736  5A0C               	subwfb	(___lwdiv@dividend+1)^0,f,c
  8092   004738  800F               	bsf	___lwdiv@quotient^0,0,c
  8093   00473A                     l3195:
  8094   00473A  90D8               	bcf	status,0,c
  8095   00473C  320E               	rrcf	(___lwdiv@divisor+1)^0,f,c
  8096   00473E  320D               	rrcf	___lwdiv@divisor^0,f,c
  8097   004740  2E11               	decfsz	___lwdiv@counter^0,f,c
  8098   004742  EF8A  F023         	goto	l3187
  8099   004746                     l1032:
  8100   004746  C00F  F00B         	movff	___lwdiv@quotient,?___lwdiv
  8101   00474A  C010  F00C         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8102   00474E  0012               	return		;funcret
  8103   004750                     __end_of___lwdiv:
  8104                           	callstack 0
  8105                           
  8106 ;; *************** function ___xxtofl *****************
  8107 ;; Defined at:
  8108 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\xxtofl.c"
  8109 ;; Parameters:    Size  Location     Type
  8110 ;;  sign            1    wreg     unsigned char 
  8111 ;;  val             4    4[COMRAM] long 
  8112 ;; Auto vars:     Size  Location     Type
  8113 ;;  sign            1   12[COMRAM] unsigned char 
  8114 ;;  arg             4   14[COMRAM] unsigned long 
  8115 ;;  exp             1   13[COMRAM] unsigned char 
  8116 ;; Return value:  Size  Location     Type
  8117 ;;                  4    4[COMRAM] unsigned char 
  8118 ;; Registers used:
  8119 ;;		wreg, status,2, status,0
  8120 ;; Tracked objects:
  8121 ;;		On entry : 0/0
  8122 ;;		On exit  : 0/0
  8123 ;;		Unchanged: 0/0
  8124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8125 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8126 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8127 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8128 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8129 ;;Total ram usage:       14 bytes
  8130 ;; Hardware stack levels used: 1
  8131 ;; Hardware stack levels required when called: 2
  8132 ;; This function calls:
  8133 ;;		Nothing
  8134 ;; This function is called by:
  8135 ;;		_colorDetect
  8136 ;;		_turnLeft_90
  8137 ;;		_turnRight_90
  8138 ;;		_turn_180
  8139 ;;		_turnRight_135
  8140 ;;		_turnLeft_135
  8141 ;;		_reverseSquareRight
  8142 ;;		_reverseSquareLeft
  8143 ;;		_main
  8144 ;; This function uses a non-reentrant model
  8145 ;;
  8146                           
  8147                           	psect	text37
  8148   003048                     __ptext37:
  8149                           	callstack 0
  8150   003048                     ___xxtofl:
  8151                           	callstack 27
  8152                           
  8153                           ;incstack = 0
  8154                           ;___xxtofl@sign stored from wreg
  8155   003048  6E0D               	movwf	___xxtofl@sign^0,c
  8156   00304A  500D               	movf	___xxtofl@sign^0,w,c
  8157   00304C  B4D8               	btfsc	status,2,c
  8158   00304E  EF2B  F018         	goto	u4151
  8159   003052  EF2D  F018         	goto	u4150
  8160   003056                     u4151:
  8161   003056  EF4F  F018         	goto	l1196
  8162   00305A                     u4150:
  8163   00305A  BE08               	btfsc	(___xxtofl@val+3)^0,7,c
  8164   00305C  EF34  F018         	goto	u4160
  8165   003060  EF32  F018         	goto	u4161
  8166   003064                     u4161:
  8167   003064  EF4F  F018         	goto	l1196
  8168   003068                     u4160:
  8169   003068  C005  F009         	movff	___xxtofl@val,??___xxtofl
  8170   00306C  C006  F00A         	movff	___xxtofl@val+1,??___xxtofl+1
  8171   003070  C007  F00B         	movff	___xxtofl@val+2,??___xxtofl+2
  8172   003074  C008  F00C         	movff	___xxtofl@val+3,??___xxtofl+3
  8173   003078  1E09               	comf	??___xxtofl^0,f,c
  8174   00307A  1E0A               	comf	(??___xxtofl+1)^0,f,c
  8175   00307C  1E0B               	comf	(??___xxtofl+2)^0,f,c
  8176   00307E  1E0C               	comf	(??___xxtofl+3)^0,f,c
  8177   003080  2A09               	incf	??___xxtofl^0,f,c
  8178   003082  0E00               	movlw	0
  8179   003084  220A               	addwfc	(??___xxtofl+1)^0,f,c
  8180   003086  220B               	addwfc	(??___xxtofl+2)^0,f,c
  8181   003088  220C               	addwfc	(??___xxtofl+3)^0,f,c
  8182   00308A  C009  F00F         	movff	??___xxtofl,___xxtofl@arg
  8183   00308E  C00A  F010         	movff	??___xxtofl+1,___xxtofl@arg+1
  8184   003092  C00B  F011         	movff	??___xxtofl+2,___xxtofl@arg+2
  8185   003096  C00C  F012         	movff	??___xxtofl+3,___xxtofl@arg+3
  8186   00309A  EF57  F018         	goto	l4161
  8187   00309E                     l1196:
  8188   00309E  C005  F00F         	movff	___xxtofl@val,___xxtofl@arg
  8189   0030A2  C006  F010         	movff	___xxtofl@val+1,___xxtofl@arg+1
  8190   0030A6  C007  F011         	movff	___xxtofl@val+2,___xxtofl@arg+2
  8191   0030AA  C008  F012         	movff	___xxtofl@val+3,___xxtofl@arg+3
  8192   0030AE                     l4161:
  8193   0030AE  5005               	movf	___xxtofl@val^0,w,c
  8194   0030B0  1006               	iorwf	(___xxtofl@val+1)^0,w,c
  8195   0030B2  1007               	iorwf	(___xxtofl@val+2)^0,w,c
  8196   0030B4  1008               	iorwf	(___xxtofl@val+3)^0,w,c
  8197   0030B6  A4D8               	btfss	status,2,c
  8198   0030B8  EF60  F018         	goto	u4171
  8199   0030BC  EF62  F018         	goto	u4170
  8200   0030C0                     u4171:
  8201   0030C0  EF6C  F018         	goto	l4167
  8202   0030C4                     u4170:
  8203   0030C4  0E00               	movlw	0
  8204   0030C6  6E05               	movwf	?___xxtofl^0,c
  8205   0030C8  0E00               	movlw	0
  8206   0030CA  6E06               	movwf	(?___xxtofl+1)^0,c
  8207   0030CC  0E00               	movlw	0
  8208   0030CE  6E07               	movwf	(?___xxtofl+2)^0,c
  8209   0030D0  0E00               	movlw	0
  8210   0030D2  6E08               	movwf	(?___xxtofl+3)^0,c
  8211   0030D4  EFFD  F018         	goto	l1199
  8212   0030D8                     l4167:
  8213   0030D8  0E96               	movlw	150
  8214   0030DA  6E0E               	movwf	___xxtofl@exp^0,c
  8215   0030DC  EF76  F018         	goto	l4171
  8216   0030E0                     l4169:
  8217   0030E0  2A0E               	incf	___xxtofl@exp^0,f,c
  8218   0030E2  90D8               	bcf	status,0,c
  8219   0030E4  3212               	rrcf	(___xxtofl@arg+3)^0,f,c
  8220   0030E6  3211               	rrcf	(___xxtofl@arg+2)^0,f,c
  8221   0030E8  3210               	rrcf	(___xxtofl@arg+1)^0,f,c
  8222   0030EA  320F               	rrcf	___xxtofl@arg^0,f,c
  8223   0030EC                     l4171:
  8224   0030EC  0E00               	movlw	0
  8225   0030EE  140F               	andwf	___xxtofl@arg^0,w,c
  8226   0030F0  6E09               	movwf	??___xxtofl^0,c
  8227   0030F2  0E00               	movlw	0
  8228   0030F4  1410               	andwf	(___xxtofl@arg+1)^0,w,c
  8229   0030F6  6E0A               	movwf	(??___xxtofl+1)^0,c
  8230   0030F8  0E00               	movlw	0
  8231   0030FA  1411               	andwf	(___xxtofl@arg+2)^0,w,c
  8232   0030FC  6E0B               	movwf	(??___xxtofl+2)^0,c
  8233   0030FE  0EFE               	movlw	254
  8234   003100  1412               	andwf	(___xxtofl@arg+3)^0,w,c
  8235   003102  6E0C               	movwf	(??___xxtofl+3)^0,c
  8236   003104  5009               	movf	??___xxtofl^0,w,c
  8237   003106  100A               	iorwf	(??___xxtofl+1)^0,w,c
  8238   003108  100B               	iorwf	(??___xxtofl+2)^0,w,c
  8239   00310A  100C               	iorwf	(??___xxtofl+3)^0,w,c
  8240   00310C  A4D8               	btfss	status,2,c
  8241   00310E  EF8B  F018         	goto	u4181
  8242   003112  EF8D  F018         	goto	u4180
  8243   003116                     u4181:
  8244   003116  EF70  F018         	goto	l4169
  8245   00311A                     u4180:
  8246   00311A  EF9B  F018         	goto	l1203
  8247   00311E                     l4173:
  8248   00311E  2A0E               	incf	___xxtofl@exp^0,f,c
  8249   003120  0E01               	movlw	1
  8250   003122  260F               	addwf	___xxtofl@arg^0,f,c
  8251   003124  0E00               	movlw	0
  8252   003126  2210               	addwfc	(___xxtofl@arg+1)^0,f,c
  8253   003128  2211               	addwfc	(___xxtofl@arg+2)^0,f,c
  8254   00312A  2212               	addwfc	(___xxtofl@arg+3)^0,f,c
  8255   00312C  90D8               	bcf	status,0,c
  8256   00312E  3212               	rrcf	(___xxtofl@arg+3)^0,f,c
  8257   003130  3211               	rrcf	(___xxtofl@arg+2)^0,f,c
  8258   003132  3210               	rrcf	(___xxtofl@arg+1)^0,f,c
  8259   003134  320F               	rrcf	___xxtofl@arg^0,f,c
  8260   003136                     l1203:
  8261   003136  0E00               	movlw	0
  8262   003138  140F               	andwf	___xxtofl@arg^0,w,c
  8263   00313A  6E09               	movwf	??___xxtofl^0,c
  8264   00313C  0E00               	movlw	0
  8265   00313E  1410               	andwf	(___xxtofl@arg+1)^0,w,c
  8266   003140  6E0A               	movwf	(??___xxtofl+1)^0,c
  8267   003142  0E00               	movlw	0
  8268   003144  1411               	andwf	(___xxtofl@arg+2)^0,w,c
  8269   003146  6E0B               	movwf	(??___xxtofl+2)^0,c
  8270   003148  0EFF               	movlw	255
  8271   00314A  1412               	andwf	(___xxtofl@arg+3)^0,w,c
  8272   00314C  6E0C               	movwf	(??___xxtofl+3)^0,c
  8273   00314E  5009               	movf	??___xxtofl^0,w,c
  8274   003150  100A               	iorwf	(??___xxtofl+1)^0,w,c
  8275   003152  100B               	iorwf	(??___xxtofl+2)^0,w,c
  8276   003154  100C               	iorwf	(??___xxtofl+3)^0,w,c
  8277   003156  A4D8               	btfss	status,2,c
  8278   003158  EFB0  F018         	goto	u4191
  8279   00315C  EFB2  F018         	goto	u4190
  8280   003160                     u4191:
  8281   003160  EF8F  F018         	goto	l4173
  8282   003164                     u4190:
  8283   003164  EFBA  F018         	goto	l4181
  8284   003168                     l4179:
  8285   003168  060E               	decf	___xxtofl@exp^0,f,c
  8286   00316A  90D8               	bcf	status,0,c
  8287   00316C  360F               	rlcf	___xxtofl@arg^0,f,c
  8288   00316E  3610               	rlcf	(___xxtofl@arg+1)^0,f,c
  8289   003170  3611               	rlcf	(___xxtofl@arg+2)^0,f,c
  8290   003172  3612               	rlcf	(___xxtofl@arg+3)^0,f,c
  8291   003174                     l4181:
  8292   003174  BE11               	btfsc	(___xxtofl@arg+2)^0,7,c
  8293   003176  EFBF  F018         	goto	u4201
  8294   00317A  EFC1  F018         	goto	u4200
  8295   00317E                     u4201:
  8296   00317E  EFC9  F018         	goto	l1210
  8297   003182                     u4200:
  8298   003182  0E02               	movlw	2
  8299   003184  600E               	cpfslt	___xxtofl@exp^0,c
  8300   003186  EFC7  F018         	goto	u4211
  8301   00318A  EFC9  F018         	goto	u4210
  8302   00318E                     u4211:
  8303   00318E  EFB4  F018         	goto	l4179
  8304   003192                     u4210:
  8305   003192                     l1210:
  8306   003192  B00E               	btfsc	___xxtofl@exp^0,0,c
  8307   003194  EFCE  F018         	goto	u4221
  8308   003198  EFD0  F018         	goto	u4220
  8309   00319C                     u4221:
  8310   00319C  EFD1  F018         	goto	l4187
  8311   0031A0                     u4220:
  8312   0031A0  9E11               	bcf	(___xxtofl@arg+2)^0,7,c
  8313   0031A2                     l4187:
  8314   0031A2  90D8               	bcf	status,0,c
  8315   0031A4  320E               	rrcf	___xxtofl@exp^0,f,c
  8316   0031A6  C00E  F009         	movff	___xxtofl@exp,??___xxtofl
  8317   0031AA  6A0A               	clrf	(??___xxtofl+1)^0,c
  8318   0031AC  6A0B               	clrf	(??___xxtofl+2)^0,c
  8319   0031AE  6A0C               	clrf	(??___xxtofl+3)^0,c
  8320   0031B0  C009  F00C         	movff	??___xxtofl,??___xxtofl+3
  8321   0031B4  6A0B               	clrf	(??___xxtofl+2)^0,c
  8322   0031B6  6A0A               	clrf	(??___xxtofl+1)^0,c
  8323   0031B8  6A09               	clrf	??___xxtofl^0,c
  8324   0031BA  5009               	movf	??___xxtofl^0,w,c
  8325   0031BC  120F               	iorwf	___xxtofl@arg^0,f,c
  8326   0031BE  500A               	movf	(??___xxtofl+1)^0,w,c
  8327   0031C0  1210               	iorwf	(___xxtofl@arg+1)^0,f,c
  8328   0031C2  500B               	movf	(??___xxtofl+2)^0,w,c
  8329   0031C4  1211               	iorwf	(___xxtofl@arg+2)^0,f,c
  8330   0031C6  500C               	movf	(??___xxtofl+3)^0,w,c
  8331   0031C8  1212               	iorwf	(___xxtofl@arg+3)^0,f,c
  8332   0031CA  500D               	movf	___xxtofl@sign^0,w,c
  8333   0031CC  B4D8               	btfsc	status,2,c
  8334   0031CE  EFEB  F018         	goto	u4231
  8335   0031D2  EFED  F018         	goto	u4230
  8336   0031D6                     u4231:
  8337   0031D6  EFF5  F018         	goto	l4197
  8338   0031DA                     u4230:
  8339   0031DA  BE08               	btfsc	(___xxtofl@val+3)^0,7,c
  8340   0031DC  EFF4  F018         	goto	u4240
  8341   0031E0  EFF2  F018         	goto	u4241
  8342   0031E4                     u4241:
  8343   0031E4  EFF5  F018         	goto	l4197
  8344   0031E8                     u4240:
  8345   0031E8  8E12               	bsf	(___xxtofl@arg+3)^0,7,c
  8346   0031EA                     l4197:
  8347   0031EA  C00F  F005         	movff	___xxtofl@arg,?___xxtofl
  8348   0031EE  C010  F006         	movff	___xxtofl@arg+1,?___xxtofl+1
  8349   0031F2  C011  F007         	movff	___xxtofl@arg+2,?___xxtofl+2
  8350   0031F6  C012  F008         	movff	___xxtofl@arg+3,?___xxtofl+3
  8351   0031FA                     l1199:
  8352   0031FA  0012               	return		;funcret
  8353   0031FC                     __end_of___xxtofl:
  8354                           	callstack 0
  8355                           
  8356 ;; *************** function ___flsub *****************
  8357 ;; Defined at:
  8358 ;;		line 245 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\sprcadd.c"
  8359 ;; Parameters:    Size  Location     Type
  8360 ;;  b               4   20[COMRAM] unsigned char 
  8361 ;;  a               4   24[COMRAM] unsigned char 
  8362 ;; Auto vars:     Size  Location     Type
  8363 ;;		None
  8364 ;; Return value:  Size  Location     Type
  8365 ;;                  4   20[COMRAM] unsigned char 
  8366 ;; Registers used:
  8367 ;;		wreg, status,2, status,0, cstack
  8368 ;; Tracked objects:
  8369 ;;		On entry : 0/0
  8370 ;;		On exit  : 0/0
  8371 ;;		Unchanged: 0/0
  8372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8373 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8374 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8376 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8377 ;;Total ram usage:        8 bytes
  8378 ;; Hardware stack levels used: 1
  8379 ;; Hardware stack levels required when called: 3
  8380 ;; This function calls:
  8381 ;;		___fladd
  8382 ;; This function is called by:
  8383 ;;		_colorDetect
  8384 ;; This function uses a non-reentrant model
  8385 ;;
  8386                           
  8387                           	psect	text38
  8388   0049DE                     __ptext38:
  8389                           	callstack 0
  8390   0049DE                     ___flsub:
  8391                           	callstack 26
  8392   0049DE  0E00               	movlw	0
  8393   0049E0  1A19               	xorwf	___flsub@a^0,f,c
  8394   0049E2  0E00               	movlw	0
  8395   0049E4  1A1A               	xorwf	(___flsub@a+1)^0,f,c
  8396   0049E6  0E00               	movlw	0
  8397   0049E8  1A1B               	xorwf	(___flsub@a+2)^0,f,c
  8398   0049EA  0E80               	movlw	128
  8399   0049EC  1A1C               	xorwf	(___flsub@a+3)^0,f,c
  8400   0049EE  C015  F005         	movff	___flsub@b,___fladd@b
  8401   0049F2  C016  F006         	movff	___flsub@b+1,___fladd@b+1
  8402   0049F6  C017  F007         	movff	___flsub@b+2,___fladd@b+2
  8403   0049FA  C018  F008         	movff	___flsub@b+3,___fladd@b+3
  8404   0049FE  C019  F009         	movff	___flsub@a,___fladd@a
  8405   004A02  C01A  F00A         	movff	___flsub@a+1,___fladd@a+1
  8406   004A06  C01B  F00B         	movff	___flsub@a+2,___fladd@a+2
  8407   004A0A  C01C  F00C         	movff	___flsub@a+3,___fladd@a+3
  8408   004A0E  ECFE  F00C         	call	___fladd	;wreg free
  8409   004A12  C005  F015         	movff	?___fladd,?___flsub
  8410   004A16  C006  F016         	movff	?___fladd+1,?___flsub+1
  8411   004A1A  C007  F017         	movff	?___fladd+2,?___flsub+2
  8412   004A1E  C008  F018         	movff	?___fladd+3,?___flsub+3
  8413   004A22  0012               	return		;funcret
  8414   004A24                     __end_of___flsub:
  8415                           	callstack 0
  8416                           
  8417 ;; *************** function ___fladd *****************
  8418 ;; Defined at:
  8419 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\sprcadd.c"
  8420 ;; Parameters:    Size  Location     Type
  8421 ;;  b               4    4[COMRAM] unsigned char 
  8422 ;;  a               4    8[COMRAM] unsigned char 
  8423 ;; Auto vars:     Size  Location     Type
  8424 ;;  grs             1   19[COMRAM] unsigned char 
  8425 ;;  bexp            1   18[COMRAM] unsigned char 
  8426 ;;  aexp            1   17[COMRAM] unsigned char 
  8427 ;;  signs           1   16[COMRAM] unsigned char 
  8428 ;; Return value:  Size  Location     Type
  8429 ;;                  4    4[COMRAM] unsigned char 
  8430 ;; Registers used:
  8431 ;;		wreg, status,2, status,0
  8432 ;; Tracked objects:
  8433 ;;		On entry : 0/0
  8434 ;;		On exit  : 0/0
  8435 ;;		Unchanged: 0/0
  8436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8437 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8438 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8439 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8440 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8441 ;;Total ram usage:       16 bytes
  8442 ;; Hardware stack levels used: 1
  8443 ;; Hardware stack levels required when called: 2
  8444 ;; This function calls:
  8445 ;;		Nothing
  8446 ;; This function is called by:
  8447 ;;		___flsub
  8448 ;; This function uses a non-reentrant model
  8449 ;;
  8450                           
  8451                           	psect	text39
  8452   0019FC                     __ptext39:
  8453                           	callstack 0
  8454   0019FC                     ___fladd:
  8455                           	callstack 26
  8456   0019FC  5008               	movf	(___fladd@b+3)^0,w,c
  8457   0019FE  0B80               	andlw	128
  8458   001A00  6E11               	movwf	___fladd@signs^0,c
  8459   001A02  5008               	movf	(___fladd@b+3)^0,w,c
  8460   001A04  2408               	addwf	(___fladd@b+3)^0,w,c
  8461   001A06  6E13               	movwf	___fladd@bexp^0,c
  8462   001A08  AE07               	btfss	(___fladd@b+2)^0,7,c
  8463   001A0A  EF09  F00D         	goto	u3161
  8464   001A0E  EF0B  F00D         	goto	u3160
  8465   001A12                     u3161:
  8466   001A12  EF0C  F00D         	goto	l3487
  8467   001A16                     u3160:
  8468   001A16  8013               	bsf	___fladd@bexp^0,0,c
  8469   001A18                     l3487:
  8470   001A18  5013               	movf	___fladd@bexp^0,w,c
  8471   001A1A  B4D8               	btfsc	status,2,c
  8472   001A1C  EF12  F00D         	goto	u3171
  8473   001A20  EF14  F00D         	goto	u3170
  8474   001A24                     u3171:
  8475   001A24  EF29  F00D         	goto	l3497
  8476   001A28                     u3170:
  8477   001A28  2813               	incf	___fladd@bexp^0,w,c
  8478   001A2A  A4D8               	btfss	status,2,c
  8479   001A2C  EF1A  F00D         	goto	u3181
  8480   001A30  EF1C  F00D         	goto	u3180
  8481   001A34                     u3181:
  8482   001A34  EF24  F00D         	goto	l3493
  8483   001A38                     u3180:
  8484   001A38  0E00               	movlw	0
  8485   001A3A  6E05               	movwf	___fladd@b^0,c
  8486   001A3C  0E00               	movlw	0
  8487   001A3E  6E06               	movwf	(___fladd@b+1)^0,c
  8488   001A40  0E00               	movlw	0
  8489   001A42  6E07               	movwf	(___fladd@b+2)^0,c
  8490   001A44  0E00               	movlw	0
  8491   001A46  6E08               	movwf	(___fladd@b+3)^0,c
  8492   001A48                     l3493:
  8493   001A48  8E07               	bsf	(___fladd@b+2)^0,7,c
  8494   001A4A  0E00               	movlw	0
  8495   001A4C  6E08               	movwf	(___fladd@b+3)^0,c
  8496   001A4E  EF31  F00D         	goto	l3499
  8497   001A52                     l3497:
  8498   001A52  0E00               	movlw	0
  8499   001A54  6E05               	movwf	___fladd@b^0,c
  8500   001A56  0E00               	movlw	0
  8501   001A58  6E06               	movwf	(___fladd@b+1)^0,c
  8502   001A5A  0E00               	movlw	0
  8503   001A5C  6E07               	movwf	(___fladd@b+2)^0,c
  8504   001A5E  0E00               	movlw	0
  8505   001A60  6E08               	movwf	(___fladd@b+3)^0,c
  8506   001A62                     l3499:
  8507   001A62  500C               	movf	(___fladd@a+3)^0,w,c
  8508   001A64  0B80               	andlw	128
  8509   001A66  6E12               	movwf	___fladd@aexp^0,c
  8510   001A68  5011               	movf	___fladd@signs^0,w,c
  8511   001A6A  1812               	xorwf	___fladd@aexp^0,w,c
  8512   001A6C  B4D8               	btfsc	status,2,c
  8513   001A6E  EF3B  F00D         	goto	u3191
  8514   001A72  EF3D  F00D         	goto	u3190
  8515   001A76                     u3191:
  8516   001A76  EF3E  F00D         	goto	l3505
  8517   001A7A                     u3190:
  8518   001A7A  8C11               	bsf	___fladd@signs^0,6,c
  8519   001A7C                     l3505:
  8520   001A7C  500C               	movf	(___fladd@a+3)^0,w,c
  8521   001A7E  240C               	addwf	(___fladd@a+3)^0,w,c
  8522   001A80  6E12               	movwf	___fladd@aexp^0,c
  8523   001A82  AE0B               	btfss	(___fladd@a+2)^0,7,c
  8524   001A84  EF46  F00D         	goto	u3201
  8525   001A88  EF48  F00D         	goto	u3200
  8526   001A8C                     u3201:
  8527   001A8C  EF49  F00D         	goto	l3511
  8528   001A90                     u3200:
  8529   001A90  8012               	bsf	___fladd@aexp^0,0,c
  8530   001A92                     l3511:
  8531   001A92  5012               	movf	___fladd@aexp^0,w,c
  8532   001A94  B4D8               	btfsc	status,2,c
  8533   001A96  EF4F  F00D         	goto	u3211
  8534   001A9A  EF51  F00D         	goto	u3210
  8535   001A9E                     u3211:
  8536   001A9E  EF66  F00D         	goto	l3521
  8537   001AA2                     u3210:
  8538   001AA2  2812               	incf	___fladd@aexp^0,w,c
  8539   001AA4  A4D8               	btfss	status,2,c
  8540   001AA6  EF57  F00D         	goto	u3221
  8541   001AAA  EF59  F00D         	goto	u3220
  8542   001AAE                     u3221:
  8543   001AAE  EF61  F00D         	goto	l3517
  8544   001AB2                     u3220:
  8545   001AB2  0E00               	movlw	0
  8546   001AB4  6E09               	movwf	___fladd@a^0,c
  8547   001AB6  0E00               	movlw	0
  8548   001AB8  6E0A               	movwf	(___fladd@a+1)^0,c
  8549   001ABA  0E00               	movlw	0
  8550   001ABC  6E0B               	movwf	(___fladd@a+2)^0,c
  8551   001ABE  0E00               	movlw	0
  8552   001AC0  6E0C               	movwf	(___fladd@a+3)^0,c
  8553   001AC2                     l3517:
  8554   001AC2  8E0B               	bsf	(___fladd@a+2)^0,7,c
  8555   001AC4  0E00               	movlw	0
  8556   001AC6  6E0C               	movwf	(___fladd@a+3)^0,c
  8557   001AC8  EF6E  F00D         	goto	l3523
  8558   001ACC                     l3521:
  8559   001ACC  0E00               	movlw	0
  8560   001ACE  6E09               	movwf	___fladd@a^0,c
  8561   001AD0  0E00               	movlw	0
  8562   001AD2  6E0A               	movwf	(___fladd@a+1)^0,c
  8563   001AD4  0E00               	movlw	0
  8564   001AD6  6E0B               	movwf	(___fladd@a+2)^0,c
  8565   001AD8  0E00               	movlw	0
  8566   001ADA  6E0C               	movwf	(___fladd@a+3)^0,c
  8567   001ADC                     l3523:
  8568   001ADC  5013               	movf	___fladd@bexp^0,w,c
  8569   001ADE  5C12               	subwf	___fladd@aexp^0,w,c
  8570   001AE0  B0D8               	btfsc	status,0,c
  8571   001AE2  EF75  F00D         	goto	u3231
  8572   001AE6  EF77  F00D         	goto	u3230
  8573   001AEA                     u3231:
  8574   001AEA  EF9E  F00D         	goto	l3559
  8575   001AEE                     u3230:
  8576   001AEE  AC11               	btfss	___fladd@signs^0,6,c
  8577   001AF0  EF7C  F00D         	goto	u3241
  8578   001AF4  EF7E  F00D         	goto	u3240
  8579   001AF8                     u3241:
  8580   001AF8  EF80  F00D         	goto	l3529
  8581   001AFC                     u3240:
  8582   001AFC  0E80               	movlw	128
  8583   001AFE  1A11               	xorwf	___fladd@signs^0,f,c
  8584   001B00                     l3529:
  8585   001B00  C013  F014         	movff	___fladd@bexp,___fladd@grs
  8586   001B04  C012  F013         	movff	___fladd@aexp,___fladd@bexp
  8587   001B08  C014  F012         	movff	___fladd@grs,___fladd@aexp
  8588   001B0C  C005  F014         	movff	___fladd@b,___fladd@grs
  8589   001B10  C009  F005         	movff	___fladd@a,___fladd@b
  8590   001B14  C014  F009         	movff	___fladd@grs,___fladd@a
  8591   001B18  C006  F014         	movff	___fladd@b+1,___fladd@grs
  8592   001B1C  C00A  F006         	movff	___fladd@a+1,___fladd@b+1
  8593   001B20  C014  F00A         	movff	___fladd@grs,___fladd@a+1
  8594   001B24  C007  F014         	movff	___fladd@b+2,___fladd@grs
  8595   001B28  C00B  F007         	movff	___fladd@a+2,___fladd@b+2
  8596   001B2C  C014  F00B         	movff	___fladd@grs,___fladd@a+2
  8597   001B30  C008  F014         	movff	___fladd@b+3,___fladd@grs
  8598   001B34  C00C  F008         	movff	___fladd@a+3,___fladd@b+3
  8599   001B38  C014  F00C         	movff	___fladd@grs,___fladd@a+3
  8600   001B3C                     l3559:
  8601   001B3C  0E00               	movlw	0
  8602   001B3E  6E14               	movwf	___fladd@grs^0,c
  8603   001B40  5013               	movf	___fladd@bexp^0,w,c
  8604   001B42  C012  F00D         	movff	___fladd@aexp,??___fladd
  8605   001B46  6A0E               	clrf	(??___fladd+1)^0,c
  8606   001B48  5E0D               	subwf	??___fladd^0,f,c
  8607   001B4A  0E00               	movlw	0
  8608   001B4C  5A0E               	subwfb	(??___fladd+1)^0,f,c
  8609   001B4E  BE0E               	btfsc	(??___fladd+1)^0,7,c
  8610   001B50  EFB3  F00D         	goto	u3251
  8611   001B54  500E               	movf	(??___fladd+1)^0,w,c
  8612   001B56  E109               	bnz	u3250
  8613   001B58  0E1A               	movlw	26
  8614   001B5A  5C0D               	subwf	??___fladd^0,w,c
  8615   001B5C  A0D8               	btfss	status,0,c
  8616   001B5E  EFB3  F00D         	goto	u3251
  8617   001B62  EFB5  F00D         	goto	u3250
  8618   001B66                     u3251:
  8619   001B66  EFEC  F00D         	goto	l1070
  8620   001B6A                     u3250:
  8621   001B6A  5005               	movf	___fladd@b^0,w,c
  8622   001B6C  1006               	iorwf	(___fladd@b+1)^0,w,c
  8623   001B6E  1007               	iorwf	(___fladd@b+2)^0,w,c
  8624   001B70  1008               	iorwf	(___fladd@b+3)^0,w,c
  8625   001B72  A4D8               	btfss	status,2,c
  8626   001B74  EFBE  F00D         	goto	u3261
  8627   001B78  EFC1  F00D         	goto	u3260
  8628   001B7C                     u3261:
  8629   001B7C  0E01               	movlw	1
  8630   001B7E  EFC2  F00D         	goto	u3270
  8631   001B82                     u3260:
  8632   001B82  0E00               	movlw	0
  8633   001B84                     u3270:
  8634   001B84  6E14               	movwf	___fladd@grs^0,c
  8635   001B86  0E00               	movlw	0
  8636   001B88  6E05               	movwf	___fladd@b^0,c
  8637   001B8A  0E00               	movlw	0
  8638   001B8C  6E06               	movwf	(___fladd@b+1)^0,c
  8639   001B8E  0E00               	movlw	0
  8640   001B90  6E07               	movwf	(___fladd@b+2)^0,c
  8641   001B92  0E00               	movlw	0
  8642   001B94  6E08               	movwf	(___fladd@b+3)^0,c
  8643   001B96  C012  F013         	movff	___fladd@aexp,___fladd@bexp
  8644   001B9A  EFF5  F00D         	goto	l1069
  8645   001B9E                     l1071:
  8646   001B9E  A014               	btfss	___fladd@grs^0,0,c
  8647   001BA0  EFD4  F00D         	goto	u3281
  8648   001BA4  EFD6  F00D         	goto	u3280
  8649   001BA8                     u3281:
  8650   001BA8  EFDC  F00D         	goto	l3571
  8651   001BAC                     u3280:
  8652   001BAC  90D8               	bcf	status,0,c
  8653   001BAE  3014               	rrcf	___fladd@grs^0,w,c
  8654   001BB0  0901               	iorlw	1
  8655   001BB2  6E14               	movwf	___fladd@grs^0,c
  8656   001BB4  EFDE  F00D         	goto	l3573
  8657   001BB8                     l3571:
  8658   001BB8  90D8               	bcf	status,0,c
  8659   001BBA  3214               	rrcf	___fladd@grs^0,f,c
  8660   001BBC                     l3573:
  8661   001BBC  A005               	btfss	___fladd@b^0,0,c
  8662   001BBE  EFE3  F00D         	goto	u3291
  8663   001BC2  EFE5  F00D         	goto	u3290
  8664   001BC6                     u3291:
  8665   001BC6  EFE6  F00D         	goto	l3577
  8666   001BCA                     u3290:
  8667   001BCA  8E14               	bsf	___fladd@grs^0,7,c
  8668   001BCC                     l3577:
  8669   001BCC  3408               	rlcf	(___fladd@b+3)^0,w,c
  8670   001BCE  3208               	rrcf	(___fladd@b+3)^0,f,c
  8671   001BD0  3207               	rrcf	(___fladd@b+2)^0,f,c
  8672   001BD2  3206               	rrcf	(___fladd@b+1)^0,f,c
  8673   001BD4  3205               	rrcf	___fladd@b^0,f,c
  8674   001BD6  2A13               	incf	___fladd@bexp^0,f,c
  8675   001BD8                     l1070:
  8676   001BD8  5012               	movf	___fladd@aexp^0,w,c
  8677   001BDA  5C13               	subwf	___fladd@bexp^0,w,c
  8678   001BDC  A0D8               	btfss	status,0,c
  8679   001BDE  EFF3  F00D         	goto	u3301
  8680   001BE2  EFF5  F00D         	goto	u3300
  8681   001BE6                     u3301:
  8682   001BE6  EFCF  F00D         	goto	l1071
  8683   001BEA                     u3300:
  8684   001BEA                     l1069:
  8685   001BEA  BC11               	btfsc	___fladd@signs^0,6,c
  8686   001BEC  EFFA  F00D         	goto	u3311
  8687   001BF0  EFFC  F00D         	goto	u3310
  8688   001BF4                     u3311:
  8689   001BF4  EF3C  F00E         	goto	l3605
  8690   001BF8                     u3310:
  8691   001BF8  5013               	movf	___fladd@bexp^0,w,c
  8692   001BFA  A4D8               	btfss	status,2,c
  8693   001BFC  EF02  F00E         	goto	u3321
  8694   001C00  EF04  F00E         	goto	u3320
  8695   001C04                     u3321:
  8696   001C04  EF0E  F00E         	goto	l3587
  8697   001C08                     u3320:
  8698   001C08  0E00               	movlw	0
  8699   001C0A  6E05               	movwf	?___fladd^0,c
  8700   001C0C  0E00               	movlw	0
  8701   001C0E  6E06               	movwf	(?___fladd+1)^0,c
  8702   001C10  0E00               	movlw	0
  8703   001C12  6E07               	movwf	(?___fladd+2)^0,c
  8704   001C14  0E00               	movlw	0
  8705   001C16  6E08               	movwf	(?___fladd+3)^0,c
  8706   001C18  EF5D  F00F         	goto	l1078
  8707   001C1C                     l3587:
  8708   001C1C  5009               	movf	___fladd@a^0,w,c
  8709   001C1E  2605               	addwf	___fladd@b^0,f,c
  8710   001C20  500A               	movf	(___fladd@a+1)^0,w,c
  8711   001C22  2206               	addwfc	(___fladd@b+1)^0,f,c
  8712   001C24  500B               	movf	(___fladd@a+2)^0,w,c
  8713   001C26  2207               	addwfc	(___fladd@b+2)^0,f,c
  8714   001C28  500C               	movf	(___fladd@a+3)^0,w,c
  8715   001C2A  2208               	addwfc	(___fladd@b+3)^0,f,c
  8716   001C2C  A008               	btfss	(___fladd@b+3)^0,0,c
  8717   001C2E  EF1B  F00E         	goto	u3331
  8718   001C32  EF1D  F00E         	goto	u3330
  8719   001C36                     u3331:
  8720   001C36  EFC9  F00E         	goto	l3641
  8721   001C3A                     u3330:
  8722   001C3A  A014               	btfss	___fladd@grs^0,0,c
  8723   001C3C  EF22  F00E         	goto	u3341
  8724   001C40  EF24  F00E         	goto	u3340
  8725   001C44                     u3341:
  8726   001C44  EF2A  F00E         	goto	l3595
  8727   001C48                     u3340:
  8728   001C48  90D8               	bcf	status,0,c
  8729   001C4A  3014               	rrcf	___fladd@grs^0,w,c
  8730   001C4C  0901               	iorlw	1
  8731   001C4E  6E14               	movwf	___fladd@grs^0,c
  8732   001C50  EF2C  F00E         	goto	l3597
  8733   001C54                     l3595:
  8734   001C54  90D8               	bcf	status,0,c
  8735   001C56  3214               	rrcf	___fladd@grs^0,f,c
  8736   001C58                     l3597:
  8737   001C58  A005               	btfss	___fladd@b^0,0,c
  8738   001C5A  EF31  F00E         	goto	u3351
  8739   001C5E  EF33  F00E         	goto	u3350
  8740   001C62                     u3351:
  8741   001C62  EF34  F00E         	goto	l3601
  8742   001C66                     u3350:
  8743   001C66  8E14               	bsf	___fladd@grs^0,7,c
  8744   001C68                     l3601:
  8745   001C68  3408               	rlcf	(___fladd@b+3)^0,w,c
  8746   001C6A  3208               	rrcf	(___fladd@b+3)^0,f,c
  8747   001C6C  3207               	rrcf	(___fladd@b+2)^0,f,c
  8748   001C6E  3206               	rrcf	(___fladd@b+1)^0,f,c
  8749   001C70  3205               	rrcf	___fladd@b^0,f,c
  8750   001C72  2A13               	incf	___fladd@bexp^0,f,c
  8751   001C74  EFC9  F00E         	goto	l3641
  8752   001C78                     l3605:
  8753   001C78  5009               	movf	___fladd@a^0,w,c
  8754   001C7A  5C05               	subwf	___fladd@b^0,w,c
  8755   001C7C  500A               	movf	(___fladd@a+1)^0,w,c
  8756   001C7E  5806               	subwfb	(___fladd@b+1)^0,w,c
  8757   001C80  500B               	movf	(___fladd@a+2)^0,w,c
  8758   001C82  5807               	subwfb	(___fladd@b+2)^0,w,c
  8759   001C84  5008               	movf	(___fladd@b+3)^0,w,c
  8760   001C86  0A80               	xorlw	128
  8761   001C88  6E0D               	movwf	??___fladd^0,c
  8762   001C8A  500C               	movf	(___fladd@a+3)^0,w,c
  8763   001C8C  0A80               	xorlw	128
  8764   001C8E  580D               	subwfb	??___fladd^0,w,c
  8765   001C90  B0D8               	btfsc	status,0,c
  8766   001C92  EF4D  F00E         	goto	u3361
  8767   001C96  EF4F  F00E         	goto	u3360
  8768   001C9A                     u3361:
  8769   001C9A  EF7A  F00E         	goto	l3615
  8770   001C9E                     u3360:
  8771   001C9E  5005               	movf	___fladd@b^0,w,c
  8772   001CA0  5C09               	subwf	___fladd@a^0,w,c
  8773   001CA2  6E0D               	movwf	??___fladd^0,c
  8774   001CA4  5006               	movf	(___fladd@b+1)^0,w,c
  8775   001CA6  580A               	subwfb	(___fladd@a+1)^0,w,c
  8776   001CA8  6E0E               	movwf	(??___fladd+1)^0,c
  8777   001CAA  5007               	movf	(___fladd@b+2)^0,w,c
  8778   001CAC  580B               	subwfb	(___fladd@a+2)^0,w,c
  8779   001CAE  6E0F               	movwf	(??___fladd+2)^0,c
  8780   001CB0  5008               	movf	(___fladd@b+3)^0,w,c
  8781   001CB2  580C               	subwfb	(___fladd@a+3)^0,w,c
  8782   001CB4  6E10               	movwf	(??___fladd+3)^0,c
  8783   001CB6  0EFF               	movlw	255
  8784   001CB8  240D               	addwf	??___fladd^0,w,c
  8785   001CBA  6E05               	movwf	___fladd@b^0,c
  8786   001CBC  0EFF               	movlw	255
  8787   001CBE  200E               	addwfc	(??___fladd+1)^0,w,c
  8788   001CC0  6E06               	movwf	(___fladd@b+1)^0,c
  8789   001CC2  0EFF               	movlw	255
  8790   001CC4  200F               	addwfc	(??___fladd+2)^0,w,c
  8791   001CC6  6E07               	movwf	(___fladd@b+2)^0,c
  8792   001CC8  0EFF               	movlw	255
  8793   001CCA  2010               	addwfc	(??___fladd+3)^0,w,c
  8794   001CCC  6E08               	movwf	(___fladd@b+3)^0,c
  8795   001CCE  0E80               	movlw	128
  8796   001CD0  1A11               	xorwf	___fladd@signs^0,f,c
  8797   001CD2  6C14               	negf	___fladd@grs^0,c
  8798   001CD4  5014               	movf	___fladd@grs^0,w,c
  8799   001CD6  A4D8               	btfss	status,2,c
  8800   001CD8  EF70  F00E         	goto	u3371
  8801   001CDC  EF72  F00E         	goto	u3370
  8802   001CE0                     u3371:
  8803   001CE0  EF82  F00E         	goto	l1086
  8804   001CE4                     u3370:
  8805   001CE4  0E01               	movlw	1
  8806   001CE6  2605               	addwf	___fladd@b^0,f,c
  8807   001CE8  0E00               	movlw	0
  8808   001CEA  2206               	addwfc	(___fladd@b+1)^0,f,c
  8809   001CEC  2207               	addwfc	(___fladd@b+2)^0,f,c
  8810   001CEE  2208               	addwfc	(___fladd@b+3)^0,f,c
  8811   001CF0  EF82  F00E         	goto	l1086
  8812   001CF4                     l3615:
  8813   001CF4  5009               	movf	___fladd@a^0,w,c
  8814   001CF6  5E05               	subwf	___fladd@b^0,f,c
  8815   001CF8  500A               	movf	(___fladd@a+1)^0,w,c
  8816   001CFA  5A06               	subwfb	(___fladd@b+1)^0,f,c
  8817   001CFC  500B               	movf	(___fladd@a+2)^0,w,c
  8818   001CFE  5A07               	subwfb	(___fladd@b+2)^0,f,c
  8819   001D00  500C               	movf	(___fladd@a+3)^0,w,c
  8820   001D02  5A08               	subwfb	(___fladd@b+3)^0,f,c
  8821   001D04                     l1086:
  8822   001D04  5005               	movf	___fladd@b^0,w,c
  8823   001D06  1006               	iorwf	(___fladd@b+1)^0,w,c
  8824   001D08  1007               	iorwf	(___fladd@b+2)^0,w,c
  8825   001D0A  1008               	iorwf	(___fladd@b+3)^0,w,c
  8826   001D0C  A4D8               	btfss	status,2,c
  8827   001D0E  EF8B  F00E         	goto	u3381
  8828   001D12  EF8D  F00E         	goto	u3380
  8829   001D16                     u3381:
  8830   001D16  EFC2  F00E         	goto	l3639
  8831   001D1A                     u3380:
  8832   001D1A  5014               	movf	___fladd@grs^0,w,c
  8833   001D1C  A4D8               	btfss	status,2,c
  8834   001D1E  EF93  F00E         	goto	u3391
  8835   001D22  EF95  F00E         	goto	u3390
  8836   001D26                     u3391:
  8837   001D26  EFC2  F00E         	goto	l3639
  8838   001D2A                     u3390:
  8839   001D2A  0E00               	movlw	0
  8840   001D2C  6E05               	movwf	?___fladd^0,c
  8841   001D2E  0E00               	movlw	0
  8842   001D30  6E06               	movwf	(?___fladd+1)^0,c
  8843   001D32  0E00               	movlw	0
  8844   001D34  6E07               	movwf	(?___fladd+2)^0,c
  8845   001D36  0E00               	movlw	0
  8846   001D38  6E08               	movwf	(?___fladd+3)^0,c
  8847   001D3A  EF5D  F00F         	goto	l1078
  8848   001D3E                     l3623:
  8849   001D3E  90D8               	bcf	status,0,c
  8850   001D40  3605               	rlcf	___fladd@b^0,f,c
  8851   001D42  3606               	rlcf	(___fladd@b+1)^0,f,c
  8852   001D44  3607               	rlcf	(___fladd@b+2)^0,f,c
  8853   001D46  3608               	rlcf	(___fladd@b+3)^0,f,c
  8854   001D48  AE14               	btfss	___fladd@grs^0,7,c
  8855   001D4A  EFA9  F00E         	goto	u3401
  8856   001D4E  EFAB  F00E         	goto	u3400
  8857   001D52                     u3401:
  8858   001D52  EFAC  F00E         	goto	l3629
  8859   001D56                     u3400:
  8860   001D56  8005               	bsf	___fladd@b^0,0,c
  8861   001D58                     l3629:
  8862   001D58  A014               	btfss	___fladd@grs^0,0,c
  8863   001D5A  EFB1  F00E         	goto	u3411
  8864   001D5E  EFB3  F00E         	goto	u3410
  8865   001D62                     u3411:
  8866   001D62  EFB7  F00E         	goto	l3633
  8867   001D66                     u3410:
  8868   001D66  80D8               	bsf	status,0,c
  8869   001D68  3614               	rlcf	___fladd@grs^0,f,c
  8870   001D6A  EFB9  F00E         	goto	l3635
  8871   001D6E                     l3633:
  8872   001D6E  90D8               	bcf	status,0,c
  8873   001D70  3614               	rlcf	___fladd@grs^0,f,c
  8874   001D72                     l3635:
  8875   001D72  5013               	movf	___fladd@bexp^0,w,c
  8876   001D74  B4D8               	btfsc	status,2,c
  8877   001D76  EFBF  F00E         	goto	u3421
  8878   001D7A  EFC1  F00E         	goto	u3420
  8879   001D7E                     u3421:
  8880   001D7E  EFC2  F00E         	goto	l3639
  8881   001D82                     u3420:
  8882   001D82  0613               	decf	___fladd@bexp^0,f,c
  8883   001D84                     l3639:
  8884   001D84  AE07               	btfss	(___fladd@b+2)^0,7,c
  8885   001D86  EFC7  F00E         	goto	u3431
  8886   001D8A  EFC9  F00E         	goto	u3430
  8887   001D8E                     u3431:
  8888   001D8E  EF9F  F00E         	goto	l3623
  8889   001D92                     u3430:
  8890   001D92                     l3641:
  8891   001D92  0E00               	movlw	0
  8892   001D94  6E12               	movwf	___fladd@aexp^0,c
  8893   001D96  AE14               	btfss	___fladd@grs^0,7,c
  8894   001D98  EFD0  F00E         	goto	u3441
  8895   001D9C  EFD2  F00E         	goto	u3440
  8896   001DA0                     u3441:
  8897   001DA0  EFEA  F00E         	goto	l1095
  8898   001DA4                     u3440:
  8899   001DA4  C014  F00D         	movff	___fladd@grs,??___fladd
  8900   001DA8  0E7F               	movlw	127
  8901   001DAA  160D               	andwf	??___fladd^0,f,c
  8902   001DAC  B4D8               	btfsc	status,2,c
  8903   001DAE  EFDB  F00E         	goto	u3451
  8904   001DB2  EFDD  F00E         	goto	u3450
  8905   001DB6                     u3451:
  8906   001DB6  EFE1  F00E         	goto	l1096
  8907   001DBA                     u3450:
  8908   001DBA                     l3647:
  8909   001DBA  0E01               	movlw	1
  8910   001DBC  6E12               	movwf	___fladd@aexp^0,c
  8911   001DBE  EFEA  F00E         	goto	l1095
  8912   001DC2                     l1096:
  8913   001DC2  A005               	btfss	___fladd@b^0,0,c
  8914   001DC4  EFE6  F00E         	goto	u3461
  8915   001DC8  EFE8  F00E         	goto	u3460
  8916   001DCC                     u3461:
  8917   001DCC  EFEA  F00E         	goto	l1095
  8918   001DD0                     u3460:
  8919   001DD0  EFDD  F00E         	goto	l3647
  8920   001DD4                     l1095:
  8921   001DD4  5012               	movf	___fladd@aexp^0,w,c
  8922   001DD6  B4D8               	btfsc	status,2,c
  8923   001DD8  EFF0  F00E         	goto	u3471
  8924   001DDC  EFF2  F00E         	goto	u3470
  8925   001DE0                     u3471:
  8926   001DE0  EF1D  F00F         	goto	l3659
  8927   001DE4                     u3470:
  8928   001DE4  0E01               	movlw	1
  8929   001DE6  2605               	addwf	___fladd@b^0,f,c
  8930   001DE8  0E00               	movlw	0
  8931   001DEA  2206               	addwfc	(___fladd@b+1)^0,f,c
  8932   001DEC  2207               	addwfc	(___fladd@b+2)^0,f,c
  8933   001DEE  2208               	addwfc	(___fladd@b+3)^0,f,c
  8934   001DF0  A008               	btfss	(___fladd@b+3)^0,0,c
  8935   001DF2  EFFD  F00E         	goto	u3481
  8936   001DF6  EFFF  F00E         	goto	u3480
  8937   001DFA                     u3481:
  8938   001DFA  EF1D  F00F         	goto	l3659
  8939   001DFE                     u3480:
  8940   001DFE  C005  F00D         	movff	___fladd@b,??___fladd
  8941   001E02  C006  F00E         	movff	___fladd@b+1,??___fladd+1
  8942   001E06  C007  F00F         	movff	___fladd@b+2,??___fladd+2
  8943   001E0A  C008  F010         	movff	___fladd@b+3,??___fladd+3
  8944   001E0E  3410               	rlcf	(??___fladd+3)^0,w,c
  8945   001E10  3210               	rrcf	(??___fladd+3)^0,f,c
  8946   001E12  320F               	rrcf	(??___fladd+2)^0,f,c
  8947   001E14  320E               	rrcf	(??___fladd+1)^0,f,c
  8948   001E16  320D               	rrcf	??___fladd^0,f,c
  8949   001E18  C00D  F005         	movff	??___fladd,___fladd@b
  8950   001E1C  C00E  F006         	movff	??___fladd+1,___fladd@b+1
  8951   001E20  C00F  F007         	movff	??___fladd+2,___fladd@b+2
  8952   001E24  C010  F008         	movff	??___fladd+3,___fladd@b+3
  8953   001E28  2813               	incf	___fladd@bexp^0,w,c
  8954   001E2A  B4D8               	btfsc	status,2,c
  8955   001E2C  EF1A  F00F         	goto	u3491
  8956   001E30  EF1C  F00F         	goto	u3490
  8957   001E34                     u3491:
  8958   001E34  EF1D  F00F         	goto	l3659
  8959   001E38                     u3490:
  8960   001E38  2A13               	incf	___fladd@bexp^0,f,c
  8961   001E3A                     l3659:
  8962   001E3A  2813               	incf	___fladd@bexp^0,w,c
  8963   001E3C  B4D8               	btfsc	status,2,c
  8964   001E3E  EF23  F00F         	goto	u3501
  8965   001E42  EF25  F00F         	goto	u3500
  8966   001E46                     u3501:
  8967   001E46  EF2D  F00F         	goto	l3663
  8968   001E4A                     u3500:
  8969   001E4A  5013               	movf	___fladd@bexp^0,w,c
  8970   001E4C  A4D8               	btfss	status,2,c
  8971   001E4E  EF2B  F00F         	goto	u3511
  8972   001E52  EF2D  F00F         	goto	u3510
  8973   001E56                     u3511:
  8974   001E56  EF3F  F00F         	goto	l3667
  8975   001E5A                     u3510:
  8976   001E5A                     l3663:
  8977   001E5A  0E00               	movlw	0
  8978   001E5C  6E05               	movwf	___fladd@b^0,c
  8979   001E5E  0E00               	movlw	0
  8980   001E60  6E06               	movwf	(___fladd@b+1)^0,c
  8981   001E62  0E00               	movlw	0
  8982   001E64  6E07               	movwf	(___fladd@b+2)^0,c
  8983   001E66  0E00               	movlw	0
  8984   001E68  6E08               	movwf	(___fladd@b+3)^0,c
  8985   001E6A  5013               	movf	___fladd@bexp^0,w,c
  8986   001E6C  A4D8               	btfss	status,2,c
  8987   001E6E  EF3B  F00F         	goto	u3521
  8988   001E72  EF3D  F00F         	goto	u3520
  8989   001E76                     u3521:
  8990   001E76  EF3F  F00F         	goto	l3667
  8991   001E7A                     u3520:
  8992   001E7A  0E00               	movlw	0
  8993   001E7C  6E11               	movwf	___fladd@signs^0,c
  8994   001E7E                     l3667:
  8995   001E7E  A013               	btfss	___fladd@bexp^0,0,c
  8996   001E80  EF44  F00F         	goto	u3531
  8997   001E84  EF46  F00F         	goto	u3530
  8998   001E88                     u3531:
  8999   001E88  EF49  F00F         	goto	l3671
  9000   001E8C                     u3530:
  9001   001E8C  8E07               	bsf	(___fladd@b+2)^0,7,c
  9002   001E8E  EF4A  F00F         	goto	l3673
  9003   001E92                     l3671:
  9004   001E92  9E07               	bcf	(___fladd@b+2)^0,7,c
  9005   001E94                     l3673:
  9006   001E94  90D8               	bcf	status,0,c
  9007   001E96  3013               	rrcf	___fladd@bexp^0,w,c
  9008   001E98  6E08               	movwf	(___fladd@b+3)^0,c
  9009   001E9A  AE11               	btfss	___fladd@signs^0,7,c
  9010   001E9C  EF52  F00F         	goto	u3541
  9011   001EA0  EF54  F00F         	goto	u3540
  9012   001EA4                     u3541:
  9013   001EA4  EF55  F00F         	goto	l3679
  9014   001EA8                     u3540:
  9015   001EA8  8E08               	bsf	(___fladd@b+3)^0,7,c
  9016   001EAA                     l3679:
  9017   001EAA  C005  F005         	movff	___fladd@b,?___fladd
  9018   001EAE  C006  F006         	movff	___fladd@b+1,?___fladd+1
  9019   001EB2  C007  F007         	movff	___fladd@b+2,?___fladd+2
  9020   001EB6  C008  F008         	movff	___fladd@b+3,?___fladd+3
  9021   001EBA                     l1078:
  9022   001EBA  0012               	return		;funcret
  9023   001EBC                     __end_of___fladd:
  9024                           	callstack 0
  9025                           
  9026 ;; *************** function ___flmul *****************
  9027 ;; Defined at:
  9028 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\sprcmul.c"
  9029 ;; Parameters:    Size  Location     Type
  9030 ;;  b               4   28[COMRAM] unsigned char 
  9031 ;;  a               4   32[COMRAM] unsigned char 
  9032 ;; Auto vars:     Size  Location     Type
  9033 ;;  prod            4   47[COMRAM] struct .
  9034 ;;  grs             4   41[COMRAM] unsigned long 
  9035 ;;  temp            2   51[COMRAM] struct .
  9036 ;;  bexp            1   46[COMRAM] unsigned char 
  9037 ;;  aexp            1   45[COMRAM] unsigned char 
  9038 ;;  sign            1   40[COMRAM] unsigned char 
  9039 ;; Return value:  Size  Location     Type
  9040 ;;                  4   28[COMRAM] unsigned char 
  9041 ;; Registers used:
  9042 ;;		wreg, status,2, status,0, prodl, prodh
  9043 ;; Tracked objects:
  9044 ;;		On entry : 0/0
  9045 ;;		On exit  : 0/0
  9046 ;;		Unchanged: 0/0
  9047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9048 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9049 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9050 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9051 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9052 ;;Total ram usage:       25 bytes
  9053 ;; Hardware stack levels used: 1
  9054 ;; Hardware stack levels required when called: 2
  9055 ;; This function calls:
  9056 ;;		Nothing
  9057 ;; This function is called by:
  9058 ;;		_colorDetect
  9059 ;;		_turnLeft_90
  9060 ;;		_turnRight_90
  9061 ;;		_turn_180
  9062 ;;		_turnRight_135
  9063 ;;		_turnLeft_135
  9064 ;;		_reverseSquareRight
  9065 ;;		_reverseSquareLeft
  9066 ;; This function uses a non-reentrant model
  9067 ;;
  9068                           
  9069                           	psect	text40
  9070   00232E                     __ptext40:
  9071                           	callstack 0
  9072   00232E                     ___flmul:
  9073                           	callstack 27
  9074   00232E  5020               	movf	(___flmul@b+3)^0,w,c
  9075   002330  0B80               	andlw	128
  9076   002332  6E29               	movwf	___flmul@sign^0,c
  9077   002334  5020               	movf	(___flmul@b+3)^0,w,c
  9078   002336  2420               	addwf	(___flmul@b+3)^0,w,c
  9079   002338  6E2F               	movwf	___flmul@bexp^0,c
  9080   00233A  AE1F               	btfss	(___flmul@b+2)^0,7,c
  9081   00233C  EFA2  F011         	goto	u3911
  9082   002340  EFA4  F011         	goto	u3910
  9083   002344                     u3911:
  9084   002344  EFA5  F011         	goto	l4003
  9085   002348                     u3910:
  9086   002348  802F               	bsf	___flmul@bexp^0,0,c
  9087   00234A                     l4003:
  9088   00234A  502F               	movf	___flmul@bexp^0,w,c
  9089   00234C  B4D8               	btfsc	status,2,c
  9090   00234E  EFAB  F011         	goto	u3921
  9091   002352  EFAD  F011         	goto	u3920
  9092   002356                     u3921:
  9093   002356  EFC0  F011         	goto	l4011
  9094   00235A                     u3920:
  9095   00235A  282F               	incf	___flmul@bexp^0,w,c
  9096   00235C  A4D8               	btfss	status,2,c
  9097   00235E  EFB3  F011         	goto	u3931
  9098   002362  EFB5  F011         	goto	u3930
  9099   002366                     u3931:
  9100   002366  EFBD  F011         	goto	l4009
  9101   00236A                     u3930:
  9102   00236A  0E00               	movlw	0
  9103   00236C  6E1D               	movwf	___flmul@b^0,c
  9104   00236E  0E00               	movlw	0
  9105   002370  6E1E               	movwf	(___flmul@b+1)^0,c
  9106   002372  0E00               	movlw	0
  9107   002374  6E1F               	movwf	(___flmul@b+2)^0,c
  9108   002376  0E00               	movlw	0
  9109   002378  6E20               	movwf	(___flmul@b+3)^0,c
  9110   00237A                     l4009:
  9111   00237A  8E1F               	bsf	(___flmul@b+2)^0,7,c
  9112   00237C  EFC8  F011         	goto	l4013
  9113   002380                     l4011:
  9114   002380  0E00               	movlw	0
  9115   002382  6E1D               	movwf	___flmul@b^0,c
  9116   002384  0E00               	movlw	0
  9117   002386  6E1E               	movwf	(___flmul@b+1)^0,c
  9118   002388  0E00               	movlw	0
  9119   00238A  6E1F               	movwf	(___flmul@b+2)^0,c
  9120   00238C  0E00               	movlw	0
  9121   00238E  6E20               	movwf	(___flmul@b+3)^0,c
  9122   002390                     l4013:
  9123   002390  5024               	movf	(___flmul@a+3)^0,w,c
  9124   002392  0B80               	andlw	128
  9125   002394  1A29               	xorwf	___flmul@sign^0,f,c
  9126   002396  5024               	movf	(___flmul@a+3)^0,w,c
  9127   002398  2424               	addwf	(___flmul@a+3)^0,w,c
  9128   00239A  6E2E               	movwf	___flmul@aexp^0,c
  9129   00239C  AE23               	btfss	(___flmul@a+2)^0,7,c
  9130   00239E  EFD3  F011         	goto	u3941
  9131   0023A2  EFD5  F011         	goto	u3940
  9132   0023A6                     u3941:
  9133   0023A6  EFD6  F011         	goto	l4021
  9134   0023AA                     u3940:
  9135   0023AA  802E               	bsf	___flmul@aexp^0,0,c
  9136   0023AC                     l4021:
  9137   0023AC  502E               	movf	___flmul@aexp^0,w,c
  9138   0023AE  B4D8               	btfsc	status,2,c
  9139   0023B0  EFDC  F011         	goto	u3951
  9140   0023B4  EFDE  F011         	goto	u3950
  9141   0023B8                     u3951:
  9142   0023B8  EFF1  F011         	goto	l4029
  9143   0023BC                     u3950:
  9144   0023BC  282E               	incf	___flmul@aexp^0,w,c
  9145   0023BE  A4D8               	btfss	status,2,c
  9146   0023C0  EFE4  F011         	goto	u3961
  9147   0023C4  EFE6  F011         	goto	u3960
  9148   0023C8                     u3961:
  9149   0023C8  EFEE  F011         	goto	l4027
  9150   0023CC                     u3960:
  9151   0023CC  0E00               	movlw	0
  9152   0023CE  6E21               	movwf	___flmul@a^0,c
  9153   0023D0  0E00               	movlw	0
  9154   0023D2  6E22               	movwf	(___flmul@a+1)^0,c
  9155   0023D4  0E00               	movlw	0
  9156   0023D6  6E23               	movwf	(___flmul@a+2)^0,c
  9157   0023D8  0E00               	movlw	0
  9158   0023DA  6E24               	movwf	(___flmul@a+3)^0,c
  9159   0023DC                     l4027:
  9160   0023DC  8E23               	bsf	(___flmul@a+2)^0,7,c
  9161   0023DE  EFF9  F011         	goto	l1155
  9162   0023E2                     l4029:
  9163   0023E2  0E00               	movlw	0
  9164   0023E4  6E21               	movwf	___flmul@a^0,c
  9165   0023E6  0E00               	movlw	0
  9166   0023E8  6E22               	movwf	(___flmul@a+1)^0,c
  9167   0023EA  0E00               	movlw	0
  9168   0023EC  6E23               	movwf	(___flmul@a+2)^0,c
  9169   0023EE  0E00               	movlw	0
  9170   0023F0  6E24               	movwf	(___flmul@a+3)^0,c
  9171   0023F2                     l1155:
  9172   0023F2  502E               	movf	___flmul@aexp^0,w,c
  9173   0023F4  B4D8               	btfsc	status,2,c
  9174   0023F6  EFFF  F011         	goto	u3971
  9175   0023FA  EF01  F012         	goto	u3970
  9176   0023FE                     u3971:
  9177   0023FE  EF09  F012         	goto	l4033
  9178   002402                     u3970:
  9179   002402  502F               	movf	___flmul@bexp^0,w,c
  9180   002404  A4D8               	btfss	status,2,c
  9181   002406  EF07  F012         	goto	u3981
  9182   00240A  EF09  F012         	goto	u3980
  9183   00240E                     u3981:
  9184   00240E  EF13  F012         	goto	l4037
  9185   002412                     u3980:
  9186   002412                     l4033:
  9187   002412  0E00               	movlw	0
  9188   002414  6E1D               	movwf	?___flmul^0,c
  9189   002416  0E00               	movlw	0
  9190   002418  6E1E               	movwf	(?___flmul+1)^0,c
  9191   00241A  0E00               	movlw	0
  9192   00241C  6E1F               	movwf	(?___flmul+2)^0,c
  9193   00241E  0E00               	movlw	0
  9194   002420  6E20               	movwf	(?___flmul+3)^0,c
  9195   002422  EFAB  F013         	goto	l1159
  9196   002426                     l4037:
  9197   002426  5023               	movf	(___flmul@a+2)^0,w,c
  9198   002428  021D               	mulwf	___flmul@b^0,c
  9199   00242A  CFF3 F034          	movff	prodl,___flmul@temp
  9200   00242E  CFF4 F035          	movff	prodh,___flmul@temp+1
  9201   002432  5034               	movf	___flmul@temp^0,w,c
  9202   002434  6E2A               	movwf	___flmul@grs^0,c
  9203   002436  6A2B               	clrf	(___flmul@grs+1)^0,c
  9204   002438  6A2C               	clrf	(___flmul@grs+2)^0,c
  9205   00243A  6A2D               	clrf	(___flmul@grs+3)^0,c
  9206   00243C  5035               	movf	(___flmul@temp+1)^0,w,c
  9207   00243E  6E30               	movwf	___flmul@prod^0,c
  9208   002440  6A31               	clrf	(___flmul@prod+1)^0,c
  9209   002442  6A32               	clrf	(___flmul@prod+2)^0,c
  9210   002444  6A33               	clrf	(___flmul@prod+3)^0,c
  9211   002446  5022               	movf	(___flmul@a+1)^0,w,c
  9212   002448  021E               	mulwf	(___flmul@b+1)^0,c
  9213   00244A  CFF3 F034          	movff	prodl,___flmul@temp
  9214   00244E  CFF4 F035          	movff	prodh,___flmul@temp+1
  9215   002452  5034               	movf	___flmul@temp^0,w,c
  9216   002454  262A               	addwf	___flmul@grs^0,f,c
  9217   002456  0E00               	movlw	0
  9218   002458  222B               	addwfc	(___flmul@grs+1)^0,f,c
  9219   00245A  222C               	addwfc	(___flmul@grs+2)^0,f,c
  9220   00245C  222D               	addwfc	(___flmul@grs+3)^0,f,c
  9221   00245E  5035               	movf	(___flmul@temp+1)^0,w,c
  9222   002460  2630               	addwf	___flmul@prod^0,f,c
  9223   002462  0E00               	movlw	0
  9224   002464  2231               	addwfc	(___flmul@prod+1)^0,f,c
  9225   002466  2232               	addwfc	(___flmul@prod+2)^0,f,c
  9226   002468  2233               	addwfc	(___flmul@prod+3)^0,f,c
  9227   00246A  5021               	movf	___flmul@a^0,w,c
  9228   00246C  021F               	mulwf	(___flmul@b+2)^0,c
  9229   00246E  CFF3 F034          	movff	prodl,___flmul@temp
  9230   002472  CFF4 F035          	movff	prodh,___flmul@temp+1
  9231   002476  5034               	movf	___flmul@temp^0,w,c
  9232   002478  262A               	addwf	___flmul@grs^0,f,c
  9233   00247A  0E00               	movlw	0
  9234   00247C  222B               	addwfc	(___flmul@grs+1)^0,f,c
  9235   00247E  222C               	addwfc	(___flmul@grs+2)^0,f,c
  9236   002480  222D               	addwfc	(___flmul@grs+3)^0,f,c
  9237   002482  5035               	movf	(___flmul@temp+1)^0,w,c
  9238   002484  2630               	addwf	___flmul@prod^0,f,c
  9239   002486  0E00               	movlw	0
  9240   002488  2231               	addwfc	(___flmul@prod+1)^0,f,c
  9241   00248A  2232               	addwfc	(___flmul@prod+2)^0,f,c
  9242   00248C  2233               	addwfc	(___flmul@prod+3)^0,f,c
  9243   00248E  C02C  F02D         	movff	___flmul@grs+2,___flmul@grs+3
  9244   002492  C02B  F02C         	movff	___flmul@grs+1,___flmul@grs+2
  9245   002496  C02A  F02B         	movff	___flmul@grs,___flmul@grs+1
  9246   00249A  6A2A               	clrf	___flmul@grs^0,c
  9247   00249C  5021               	movf	___flmul@a^0,w,c
  9248   00249E  021E               	mulwf	(___flmul@b+1)^0,c
  9249   0024A0  CFF3 F034          	movff	prodl,___flmul@temp
  9250   0024A4  CFF4 F035          	movff	prodh,___flmul@temp+1
  9251   0024A8  5034               	movf	___flmul@temp^0,w,c
  9252   0024AA  262A               	addwf	___flmul@grs^0,f,c
  9253   0024AC  5035               	movf	(___flmul@temp+1)^0,w,c
  9254   0024AE  222B               	addwfc	(___flmul@grs+1)^0,f,c
  9255   0024B0  0E00               	movlw	0
  9256   0024B2  222C               	addwfc	(___flmul@grs+2)^0,f,c
  9257   0024B4  0E00               	movlw	0
  9258   0024B6  222D               	addwfc	(___flmul@grs+3)^0,f,c
  9259   0024B8  5022               	movf	(___flmul@a+1)^0,w,c
  9260   0024BA  021D               	mulwf	___flmul@b^0,c
  9261   0024BC  CFF3 F034          	movff	prodl,___flmul@temp
  9262   0024C0  CFF4 F035          	movff	prodh,___flmul@temp+1
  9263   0024C4  5034               	movf	___flmul@temp^0,w,c
  9264   0024C6  262A               	addwf	___flmul@grs^0,f,c
  9265   0024C8  5035               	movf	(___flmul@temp+1)^0,w,c
  9266   0024CA  222B               	addwfc	(___flmul@grs+1)^0,f,c
  9267   0024CC  0E00               	movlw	0
  9268   0024CE  222C               	addwfc	(___flmul@grs+2)^0,f,c
  9269   0024D0  0E00               	movlw	0
  9270   0024D2  222D               	addwfc	(___flmul@grs+3)^0,f,c
  9271   0024D4  C02C  F02D         	movff	___flmul@grs+2,___flmul@grs+3
  9272   0024D8  C02B  F02C         	movff	___flmul@grs+1,___flmul@grs+2
  9273   0024DC  C02A  F02B         	movff	___flmul@grs,___flmul@grs+1
  9274   0024E0  6A2A               	clrf	___flmul@grs^0,c
  9275   0024E2  5021               	movf	___flmul@a^0,w,c
  9276   0024E4  021D               	mulwf	___flmul@b^0,c
  9277   0024E6  CFF3 F034          	movff	prodl,___flmul@temp
  9278   0024EA  CFF4 F035          	movff	prodh,___flmul@temp+1
  9279   0024EE  5034               	movf	___flmul@temp^0,w,c
  9280   0024F0  262A               	addwf	___flmul@grs^0,f,c
  9281   0024F2  5035               	movf	(___flmul@temp+1)^0,w,c
  9282   0024F4  222B               	addwfc	(___flmul@grs+1)^0,f,c
  9283   0024F6  0E00               	movlw	0
  9284   0024F8  222C               	addwfc	(___flmul@grs+2)^0,f,c
  9285   0024FA  0E00               	movlw	0
  9286   0024FC  222D               	addwfc	(___flmul@grs+3)^0,f,c
  9287   0024FE  5023               	movf	(___flmul@a+2)^0,w,c
  9288   002500  021E               	mulwf	(___flmul@b+1)^0,c
  9289   002502  CFF3 F034          	movff	prodl,___flmul@temp
  9290   002506  CFF4 F035          	movff	prodh,___flmul@temp+1
  9291   00250A  5034               	movf	___flmul@temp^0,w,c
  9292   00250C  2630               	addwf	___flmul@prod^0,f,c
  9293   00250E  5035               	movf	(___flmul@temp+1)^0,w,c
  9294   002510  2231               	addwfc	(___flmul@prod+1)^0,f,c
  9295   002512  0E00               	movlw	0
  9296   002514  2232               	addwfc	(___flmul@prod+2)^0,f,c
  9297   002516  0E00               	movlw	0
  9298   002518  2233               	addwfc	(___flmul@prod+3)^0,f,c
  9299   00251A  5022               	movf	(___flmul@a+1)^0,w,c
  9300   00251C  021F               	mulwf	(___flmul@b+2)^0,c
  9301   00251E  CFF3 F034          	movff	prodl,___flmul@temp
  9302   002522  CFF4 F035          	movff	prodh,___flmul@temp+1
  9303   002526  5034               	movf	___flmul@temp^0,w,c
  9304   002528  2630               	addwf	___flmul@prod^0,f,c
  9305   00252A  5035               	movf	(___flmul@temp+1)^0,w,c
  9306   00252C  2231               	addwfc	(___flmul@prod+1)^0,f,c
  9307   00252E  0E00               	movlw	0
  9308   002530  2232               	addwfc	(___flmul@prod+2)^0,f,c
  9309   002532  0E00               	movlw	0
  9310   002534  2233               	addwfc	(___flmul@prod+3)^0,f,c
  9311   002536  5023               	movf	(___flmul@a+2)^0,w,c
  9312   002538  021F               	mulwf	(___flmul@b+2)^0,c
  9313   00253A  CFF3 F034          	movff	prodl,___flmul@temp
  9314   00253E  CFF4 F035          	movff	prodh,___flmul@temp+1
  9315   002542  5034               	movf	___flmul@temp^0,w,c
  9316   002544  6E25               	movwf	??___flmul^0,c
  9317   002546  5035               	movf	(___flmul@temp+1)^0,w,c
  9318   002548  6E26               	movwf	(??___flmul+1)^0,c
  9319   00254A  6A27               	clrf	(??___flmul+2)^0,c
  9320   00254C  6A28               	clrf	(??___flmul+3)^0,c
  9321   00254E  C027  F028         	movff	??___flmul+2,??___flmul+3
  9322   002552  C026  F027         	movff	??___flmul+1,??___flmul+2
  9323   002556  C025  F026         	movff	??___flmul,??___flmul+1
  9324   00255A  6A25               	clrf	??___flmul^0,c
  9325   00255C  5025               	movf	??___flmul^0,w,c
  9326   00255E  2630               	addwf	___flmul@prod^0,f,c
  9327   002560  5026               	movf	(??___flmul+1)^0,w,c
  9328   002562  2231               	addwfc	(___flmul@prod+1)^0,f,c
  9329   002564  5027               	movf	(??___flmul+2)^0,w,c
  9330   002566  2232               	addwfc	(___flmul@prod+2)^0,f,c
  9331   002568  5028               	movf	(??___flmul+3)^0,w,c
  9332   00256A  2233               	addwfc	(___flmul@prod+3)^0,f,c
  9333   00256C  C02A  F025         	movff	___flmul@grs,??___flmul
  9334   002570  C02B  F026         	movff	___flmul@grs+1,??___flmul+1
  9335   002574  C02C  F027         	movff	___flmul@grs+2,??___flmul+2
  9336   002578  C02D  F028         	movff	___flmul@grs+3,??___flmul+3
  9337   00257C  0E19               	movlw	25
  9338   00257E  EFC6  F012         	goto	u3990
  9339   002582                     u3995:
  9340   002582  90D8               	bcf	status,0,c
  9341   002584  3228               	rrcf	(??___flmul+3)^0,f,c
  9342   002586  3227               	rrcf	(??___flmul+2)^0,f,c
  9343   002588  3226               	rrcf	(??___flmul+1)^0,f,c
  9344   00258A  3225               	rrcf	??___flmul^0,f,c
  9345   00258C                     u3990:
  9346   00258C  2EE8               	decfsz	wreg,f,c
  9347   00258E  EFC1  F012         	goto	u3995
  9348   002592  5025               	movf	??___flmul^0,w,c
  9349   002594  2630               	addwf	___flmul@prod^0,f,c
  9350   002596  5026               	movf	(??___flmul+1)^0,w,c
  9351   002598  2231               	addwfc	(___flmul@prod+1)^0,f,c
  9352   00259A  5027               	movf	(??___flmul+2)^0,w,c
  9353   00259C  2232               	addwfc	(___flmul@prod+2)^0,f,c
  9354   00259E  5028               	movf	(??___flmul+3)^0,w,c
  9355   0025A0  2233               	addwfc	(___flmul@prod+3)^0,f,c
  9356   0025A2  C02C  F02D         	movff	___flmul@grs+2,___flmul@grs+3
  9357   0025A6  C02B  F02C         	movff	___flmul@grs+1,___flmul@grs+2
  9358   0025AA  C02A  F02B         	movff	___flmul@grs,___flmul@grs+1
  9359   0025AE  6A2A               	clrf	___flmul@grs^0,c
  9360   0025B0  502E               	movf	___flmul@aexp^0,w,c
  9361   0025B2  C02F  F025         	movff	___flmul@bexp,??___flmul
  9362   0025B6  6A26               	clrf	(??___flmul+1)^0,c
  9363   0025B8  2625               	addwf	??___flmul^0,f,c
  9364   0025BA  0E00               	movlw	0
  9365   0025BC  2226               	addwfc	(??___flmul+1)^0,f,c
  9366   0025BE  0E82               	movlw	130
  9367   0025C0  2425               	addwf	??___flmul^0,w,c
  9368   0025C2  6E34               	movwf	___flmul@temp^0,c
  9369   0025C4  0EFF               	movlw	255
  9370   0025C6  2026               	addwfc	(??___flmul+1)^0,w,c
  9371   0025C8  6E35               	movwf	(___flmul@temp+1)^0,c
  9372   0025CA  EFFC  F012         	goto	l4085
  9373   0025CE                     l4079:
  9374   0025CE  90D8               	bcf	status,0,c
  9375   0025D0  3630               	rlcf	___flmul@prod^0,f,c
  9376   0025D2  3631               	rlcf	(___flmul@prod+1)^0,f,c
  9377   0025D4  3632               	rlcf	(___flmul@prod+2)^0,f,c
  9378   0025D6  3633               	rlcf	(___flmul@prod+3)^0,f,c
  9379   0025D8  AE2D               	btfss	(___flmul@grs+3)^0,7,c
  9380   0025DA  EFF1  F012         	goto	u4001
  9381   0025DE  EFF3  F012         	goto	u4000
  9382   0025E2                     u4001:
  9383   0025E2  EFF4  F012         	goto	l1162
  9384   0025E6                     u4000:
  9385   0025E6  8030               	bsf	___flmul@prod^0,0,c
  9386   0025E8                     l1162:
  9387   0025E8  90D8               	bcf	status,0,c
  9388   0025EA  362A               	rlcf	___flmul@grs^0,f,c
  9389   0025EC  362B               	rlcf	(___flmul@grs+1)^0,f,c
  9390   0025EE  362C               	rlcf	(___flmul@grs+2)^0,f,c
  9391   0025F0  362D               	rlcf	(___flmul@grs+3)^0,f,c
  9392   0025F2  0634               	decf	___flmul@temp^0,f,c
  9393   0025F4  A0D8               	btfss	status,0,c
  9394   0025F6  0635               	decf	(___flmul@temp+1)^0,f,c
  9395   0025F8                     l4085:
  9396   0025F8  AE32               	btfss	(___flmul@prod+2)^0,7,c
  9397   0025FA  EF01  F013         	goto	u4011
  9398   0025FE  EF03  F013         	goto	u4010
  9399   002602                     u4011:
  9400   002602  EFE7  F012         	goto	l4079
  9401   002606                     u4010:
  9402   002606  0E00               	movlw	0
  9403   002608  6E2E               	movwf	___flmul@aexp^0,c
  9404   00260A  AE2D               	btfss	(___flmul@grs+3)^0,7,c
  9405   00260C  EF0A  F013         	goto	u4021
  9406   002610  EF0C  F013         	goto	u4020
  9407   002614                     u4021:
  9408   002614  EF30  F013         	goto	l1164
  9409   002618                     u4020:
  9410   002618  0EFF               	movlw	255
  9411   00261A  142A               	andwf	___flmul@grs^0,w,c
  9412   00261C  6E25               	movwf	??___flmul^0,c
  9413   00261E  0EFF               	movlw	255
  9414   002620  142B               	andwf	(___flmul@grs+1)^0,w,c
  9415   002622  6E26               	movwf	(??___flmul+1)^0,c
  9416   002624  0EFF               	movlw	255
  9417   002626  142C               	andwf	(___flmul@grs+2)^0,w,c
  9418   002628  6E27               	movwf	(??___flmul+2)^0,c
  9419   00262A  0E7F               	movlw	127
  9420   00262C  142D               	andwf	(___flmul@grs+3)^0,w,c
  9421   00262E  6E28               	movwf	(??___flmul+3)^0,c
  9422   002630  5025               	movf	??___flmul^0,w,c
  9423   002632  1026               	iorwf	(??___flmul+1)^0,w,c
  9424   002634  1027               	iorwf	(??___flmul+2)^0,w,c
  9425   002636  1028               	iorwf	(??___flmul+3)^0,w,c
  9426   002638  B4D8               	btfsc	status,2,c
  9427   00263A  EF21  F013         	goto	u4031
  9428   00263E  EF23  F013         	goto	u4030
  9429   002642                     u4031:
  9430   002642  EF27  F013         	goto	l1165
  9431   002646                     u4030:
  9432   002646                     l4093:
  9433   002646  0E01               	movlw	1
  9434   002648  6E2E               	movwf	___flmul@aexp^0,c
  9435   00264A  EF30  F013         	goto	l1164
  9436   00264E                     l1165:
  9437   00264E  A030               	btfss	___flmul@prod^0,0,c
  9438   002650  EF2C  F013         	goto	u4041
  9439   002654  EF2E  F013         	goto	u4040
  9440   002658                     u4041:
  9441   002658  EF30  F013         	goto	l1164
  9442   00265C                     u4040:
  9443   00265C  EF23  F013         	goto	l4093
  9444   002660                     l1164:
  9445   002660  502E               	movf	___flmul@aexp^0,w,c
  9446   002662  B4D8               	btfsc	status,2,c
  9447   002664  EF36  F013         	goto	u4051
  9448   002668  EF38  F013         	goto	u4050
  9449   00266C                     u4051:
  9450   00266C  EF5C  F013         	goto	l4105
  9451   002670                     u4050:
  9452   002670  0E01               	movlw	1
  9453   002672  2630               	addwf	___flmul@prod^0,f,c
  9454   002674  0E00               	movlw	0
  9455   002676  2231               	addwfc	(___flmul@prod+1)^0,f,c
  9456   002678  2232               	addwfc	(___flmul@prod+2)^0,f,c
  9457   00267A  2233               	addwfc	(___flmul@prod+3)^0,f,c
  9458   00267C  A033               	btfss	(___flmul@prod+3)^0,0,c
  9459   00267E  EF43  F013         	goto	u4061
  9460   002682  EF45  F013         	goto	u4060
  9461   002686                     u4061:
  9462   002686  EF5C  F013         	goto	l4105
  9463   00268A                     u4060:
  9464   00268A  C030  F025         	movff	___flmul@prod,??___flmul
  9465   00268E  C031  F026         	movff	___flmul@prod+1,??___flmul+1
  9466   002692  C032  F027         	movff	___flmul@prod+2,??___flmul+2
  9467   002696  C033  F028         	movff	___flmul@prod+3,??___flmul+3
  9468   00269A  3428               	rlcf	(??___flmul+3)^0,w,c
  9469   00269C  3228               	rrcf	(??___flmul+3)^0,f,c
  9470   00269E  3227               	rrcf	(??___flmul+2)^0,f,c
  9471   0026A0  3226               	rrcf	(??___flmul+1)^0,f,c
  9472   0026A2  3225               	rrcf	??___flmul^0,f,c
  9473   0026A4  C025  F030         	movff	??___flmul,___flmul@prod
  9474   0026A8  C026  F031         	movff	??___flmul+1,___flmul@prod+1
  9475   0026AC  C027  F032         	movff	??___flmul+2,___flmul@prod+2
  9476   0026B0  C028  F033         	movff	??___flmul+3,___flmul@prod+3
  9477   0026B4  4A34               	infsnz	___flmul@temp^0,f,c
  9478   0026B6  2A35               	incf	(___flmul@temp+1)^0,f,c
  9479   0026B8                     l4105:
  9480   0026B8  BE35               	btfsc	(___flmul@temp+1)^0,7,c
  9481   0026BA  EF67  F013         	goto	u4071
  9482   0026BE  5035               	movf	(___flmul@temp+1)^0,w,c
  9483   0026C0  E108               	bnz	u4070
  9484   0026C2  2834               	incf	___flmul@temp^0,w,c
  9485   0026C4  A0D8               	btfss	status,0,c
  9486   0026C6  EF67  F013         	goto	u4071
  9487   0026CA  EF69  F013         	goto	u4070
  9488   0026CE                     u4071:
  9489   0026CE  EF73  F013         	goto	l4109
  9490   0026D2                     u4070:
  9491   0026D2  0E00               	movlw	0
  9492   0026D4  6E30               	movwf	___flmul@prod^0,c
  9493   0026D6  0E00               	movlw	0
  9494   0026D8  6E31               	movwf	(___flmul@prod+1)^0,c
  9495   0026DA  0E80               	movlw	128
  9496   0026DC  6E32               	movwf	(___flmul@prod+2)^0,c
  9497   0026DE  0E7F               	movlw	127
  9498   0026E0  6E33               	movwf	(___flmul@prod+3)^0,c
  9499   0026E2  EFA1  F013         	goto	l4121
  9500   0026E6                     l4109:
  9501   0026E6  BE35               	btfsc	(___flmul@temp+1)^0,7,c
  9502   0026E8  EF80  F013         	goto	u4080
  9503   0026EC  5035               	movf	(___flmul@temp+1)^0,w,c
  9504   0026EE  E106               	bnz	u4081
  9505   0026F0  0434               	decf	___flmul@temp^0,w,c
  9506   0026F2  B0D8               	btfsc	status,0,c
  9507   0026F4  EF7E  F013         	goto	u4081
  9508   0026F8  EF80  F013         	goto	u4080
  9509   0026FC                     u4081:
  9510   0026FC  EF8C  F013         	goto	l1172
  9511   002700                     u4080:
  9512   002700  0E00               	movlw	0
  9513   002702  6E30               	movwf	___flmul@prod^0,c
  9514   002704  0E00               	movlw	0
  9515   002706  6E31               	movwf	(___flmul@prod+1)^0,c
  9516   002708  0E00               	movlw	0
  9517   00270A  6E32               	movwf	(___flmul@prod+2)^0,c
  9518   00270C  0E00               	movlw	0
  9519   00270E  6E33               	movwf	(___flmul@prod+3)^0,c
  9520   002710  0E00               	movlw	0
  9521   002712  6E29               	movwf	___flmul@sign^0,c
  9522   002714  EFA1  F013         	goto	l4121
  9523   002718                     l1172:
  9524   002718  C034  F02F         	movff	___flmul@temp,___flmul@bexp
  9525   00271C  0EFF               	movlw	255
  9526   00271E  1630               	andwf	___flmul@prod^0,f,c
  9527   002720  0EFF               	movlw	255
  9528   002722  1631               	andwf	(___flmul@prod+1)^0,f,c
  9529   002724  0E7F               	movlw	127
  9530   002726  1632               	andwf	(___flmul@prod+2)^0,f,c
  9531   002728  0E00               	movlw	0
  9532   00272A  1633               	andwf	(___flmul@prod+3)^0,f,c
  9533   00272C  A02F               	btfss	___flmul@bexp^0,0,c
  9534   00272E  EF9B  F013         	goto	u4091
  9535   002732  EF9D  F013         	goto	u4090
  9536   002736                     u4091:
  9537   002736  EF9E  F013         	goto	l4119
  9538   00273A                     u4090:
  9539   00273A  8E32               	bsf	(___flmul@prod+2)^0,7,c
  9540   00273C                     l4119:
  9541   00273C  90D8               	bcf	status,0,c
  9542   00273E  302F               	rrcf	___flmul@bexp^0,w,c
  9543   002740  6E33               	movwf	(___flmul@prod+3)^0,c
  9544   002742                     l4121:
  9545   002742  5029               	movf	___flmul@sign^0,w,c
  9546   002744  1233               	iorwf	(___flmul@prod+3)^0,f,c
  9547   002746  C030  F01D         	movff	___flmul@prod,?___flmul
  9548   00274A  C031  F01E         	movff	___flmul@prod+1,?___flmul+1
  9549   00274E  C032  F01F         	movff	___flmul@prod+2,?___flmul+2
  9550   002752  C033  F020         	movff	___flmul@prod+3,?___flmul+3
  9551   002756                     l1159:
  9552   002756  0012               	return		;funcret
  9553   002758                     __end_of___flmul:
  9554                           	callstack 0
  9555                           
  9556 ;; *************** function ___flge *****************
  9557 ;; Defined at:
  9558 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\flge.c"
  9559 ;; Parameters:    Size  Location     Type
  9560 ;;  ff1             4   28[COMRAM] unsigned char 
  9561 ;;  ff2             4   32[COMRAM] unsigned char 
  9562 ;; Auto vars:     Size  Location     Type
  9563 ;;		None
  9564 ;; Return value:  Size  Location     Type
  9565 ;;		None               void
  9566 ;; Registers used:
  9567 ;;		wreg, status,2, status,0
  9568 ;; Tracked objects:
  9569 ;;		On entry : 0/0
  9570 ;;		On exit  : 0/0
  9571 ;;		Unchanged: 0/0
  9572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9573 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9574 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9575 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9576 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9577 ;;Total ram usage:       12 bytes
  9578 ;; Hardware stack levels used: 1
  9579 ;; Hardware stack levels required when called: 2
  9580 ;; This function calls:
  9581 ;;		Nothing
  9582 ;; This function is called by:
  9583 ;;		_colorDetect
  9584 ;;		_main
  9585 ;; This function uses a non-reentrant model
  9586 ;;
  9587                           
  9588                           	psect	text41
  9589   003DE4                     __ptext41:
  9590                           	callstack 0
  9591   003DE4                     ___flge:
  9592                           	callstack 27
  9593   003DE4  0E00               	movlw	0
  9594   003DE6  141D               	andwf	___flge@ff1^0,w,c
  9595   003DE8  6E25               	movwf	??___flge^0,c
  9596   003DEA  0E00               	movlw	0
  9597   003DEC  141E               	andwf	(___flge@ff1+1)^0,w,c
  9598   003DEE  6E26               	movwf	(??___flge+1)^0,c
  9599   003DF0  0E80               	movlw	128
  9600   003DF2  141F               	andwf	(___flge@ff1+2)^0,w,c
  9601   003DF4  6E27               	movwf	(??___flge+2)^0,c
  9602   003DF6  0E7F               	movlw	127
  9603   003DF8  1420               	andwf	(___flge@ff1+3)^0,w,c
  9604   003DFA  6E28               	movwf	(??___flge+3)^0,c
  9605   003DFC  5025               	movf	??___flge^0,w,c
  9606   003DFE  1026               	iorwf	(??___flge+1)^0,w,c
  9607   003E00  1027               	iorwf	(??___flge+2)^0,w,c
  9608   003E02  1028               	iorwf	(??___flge+3)^0,w,c
  9609   003E04  A4D8               	btfss	status,2,c
  9610   003E06  EF07  F01F         	goto	u4101
  9611   003E0A  EF09  F01F         	goto	u4100
  9612   003E0E                     u4101:
  9613   003E0E  EF11  F01F         	goto	l4137
  9614   003E12                     u4100:
  9615   003E12  0E00               	movlw	0
  9616   003E14  6E1D               	movwf	___flge@ff1^0,c
  9617   003E16  0E00               	movlw	0
  9618   003E18  6E1E               	movwf	(___flge@ff1+1)^0,c
  9619   003E1A  0E00               	movlw	0
  9620   003E1C  6E1F               	movwf	(___flge@ff1+2)^0,c
  9621   003E1E  0E00               	movlw	0
  9622   003E20  6E20               	movwf	(___flge@ff1+3)^0,c
  9623   003E22                     l4137:
  9624   003E22  0E00               	movlw	0
  9625   003E24  1421               	andwf	___flge@ff2^0,w,c
  9626   003E26  6E25               	movwf	??___flge^0,c
  9627   003E28  0E00               	movlw	0
  9628   003E2A  1422               	andwf	(___flge@ff2+1)^0,w,c
  9629   003E2C  6E26               	movwf	(??___flge+1)^0,c
  9630   003E2E  0E80               	movlw	128
  9631   003E30  1423               	andwf	(___flge@ff2+2)^0,w,c
  9632   003E32  6E27               	movwf	(??___flge+2)^0,c
  9633   003E34  0E7F               	movlw	127
  9634   003E36  1424               	andwf	(___flge@ff2+3)^0,w,c
  9635   003E38  6E28               	movwf	(??___flge+3)^0,c
  9636   003E3A  5025               	movf	??___flge^0,w,c
  9637   003E3C  1026               	iorwf	(??___flge+1)^0,w,c
  9638   003E3E  1027               	iorwf	(??___flge+2)^0,w,c
  9639   003E40  1028               	iorwf	(??___flge+3)^0,w,c
  9640   003E42  A4D8               	btfss	status,2,c
  9641   003E44  EF26  F01F         	goto	u4111
  9642   003E48  EF28  F01F         	goto	u4110
  9643   003E4C                     u4111:
  9644   003E4C  EF30  F01F         	goto	l4141
  9645   003E50                     u4110:
  9646   003E50  0E00               	movlw	0
  9647   003E52  6E21               	movwf	___flge@ff2^0,c
  9648   003E54  0E00               	movlw	0
  9649   003E56  6E22               	movwf	(___flge@ff2+1)^0,c
  9650   003E58  0E00               	movlw	0
  9651   003E5A  6E23               	movwf	(___flge@ff2+2)^0,c
  9652   003E5C  0E00               	movlw	0
  9653   003E5E  6E24               	movwf	(___flge@ff2+3)^0,c
  9654   003E60                     l4141:
  9655   003E60  AE20               	btfss	(___flge@ff1+3)^0,7,c
  9656   003E62  EF35  F01F         	goto	u4121
  9657   003E66  EF37  F01F         	goto	u4120
  9658   003E6A                     u4121:
  9659   003E6A  EF40  F01F         	goto	l4145
  9660   003E6E                     u4120:
  9661   003E6E  6C1D               	negf	___flge@ff1^0,c
  9662   003E70  1E1E               	comf	(___flge@ff1+1)^0,f,c
  9663   003E72  B0D8               	btfsc	status,0,c
  9664   003E74  2A1E               	incf	(___flge@ff1+1)^0,f,c
  9665   003E76  1E1F               	comf	(___flge@ff1+2)^0,f,c
  9666   003E78  B0D8               	btfsc	status,0,c
  9667   003E7A  2A1F               	incf	(___flge@ff1+2)^0,f,c
  9668   003E7C  0E80               	movlw	128
  9669   003E7E  5620               	subfwb	(___flge@ff1+3)^0,f,c
  9670   003E80                     l4145:
  9671   003E80  AE24               	btfss	(___flge@ff2+3)^0,7,c
  9672   003E82  EF45  F01F         	goto	u4131
  9673   003E86  EF47  F01F         	goto	u4130
  9674   003E8A                     u4131:
  9675   003E8A  EF50  F01F         	goto	l806
  9676   003E8E                     u4130:
  9677   003E8E  6C21               	negf	___flge@ff2^0,c
  9678   003E90  1E22               	comf	(___flge@ff2+1)^0,f,c
  9679   003E92  B0D8               	btfsc	status,0,c
  9680   003E94  2A22               	incf	(___flge@ff2+1)^0,f,c
  9681   003E96  1E23               	comf	(___flge@ff2+2)^0,f,c
  9682   003E98  B0D8               	btfsc	status,0,c
  9683   003E9A  2A23               	incf	(___flge@ff2+2)^0,f,c
  9684   003E9C  0E80               	movlw	128
  9685   003E9E  5624               	subfwb	(___flge@ff2+3)^0,f,c
  9686   003EA0                     l806:
  9687   003EA0  0E00               	movlw	0
  9688   003EA2  1A1D               	xorwf	___flge@ff1^0,f,c
  9689   003EA4  0E00               	movlw	0
  9690   003EA6  1A1E               	xorwf	(___flge@ff1+1)^0,f,c
  9691   003EA8  0E00               	movlw	0
  9692   003EAA  1A1F               	xorwf	(___flge@ff1+2)^0,f,c
  9693   003EAC  0E80               	movlw	128
  9694   003EAE  1A20               	xorwf	(___flge@ff1+3)^0,f,c
  9695   003EB0  0E00               	movlw	0
  9696   003EB2  1A21               	xorwf	___flge@ff2^0,f,c
  9697   003EB4  0E00               	movlw	0
  9698   003EB6  1A22               	xorwf	(___flge@ff2+1)^0,f,c
  9699   003EB8  0E00               	movlw	0
  9700   003EBA  1A23               	xorwf	(___flge@ff2+2)^0,f,c
  9701   003EBC  0E80               	movlw	128
  9702   003EBE  1A24               	xorwf	(___flge@ff2+3)^0,f,c
  9703   003EC0  5021               	movf	___flge@ff2^0,w,c
  9704   003EC2  5C1D               	subwf	___flge@ff1^0,w,c
  9705   003EC4  5022               	movf	(___flge@ff2+1)^0,w,c
  9706   003EC6  581E               	subwfb	(___flge@ff1+1)^0,w,c
  9707   003EC8  5023               	movf	(___flge@ff2+2)^0,w,c
  9708   003ECA  581F               	subwfb	(___flge@ff1+2)^0,w,c
  9709   003ECC  5024               	movf	(___flge@ff2+3)^0,w,c
  9710   003ECE  5820               	subwfb	(___flge@ff1+3)^0,w,c
  9711   003ED0  B0D8               	btfsc	status,0,c
  9712   003ED2  EF6D  F01F         	goto	u4141
  9713   003ED6  EF6F  F01F         	goto	u4140
  9714   003EDA                     u4141:
  9715   003EDA  EF72  F01F         	goto	l4151
  9716   003EDE                     u4140:
  9717   003EDE  90D8               	bcf	status,0,c
  9718   003EE0  EF73  F01F         	goto	l811
  9719   003EE4                     l4151:
  9720   003EE4  80D8               	bsf	status,0,c
  9721   003EE6                     l811:
  9722   003EE6  0012               	return		;funcret
  9723   003EE8                     __end_of___flge:
  9724                           	callstack 0
  9725                           
  9726 ;; *************** function ___fldiv *****************
  9727 ;; Defined at:
  9728 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\sprcdiv.c"
  9729 ;; Parameters:    Size  Location     Type
  9730 ;;  b               4   53[COMRAM] unsigned char 
  9731 ;;  a               4   57[COMRAM] unsigned char 
  9732 ;; Auto vars:     Size  Location     Type
  9733 ;;  grs             4   72[COMRAM] unsigned long 
  9734 ;;  rem             4   65[COMRAM] unsigned long 
  9735 ;;  new_exp         2   70[COMRAM] short 
  9736 ;;  aexp            1   77[COMRAM] unsigned char 
  9737 ;;  bexp            1   76[COMRAM] unsigned char 
  9738 ;;  sign            1   69[COMRAM] unsigned char 
  9739 ;; Return value:  Size  Location     Type
  9740 ;;                  4   53[COMRAM] unsigned char 
  9741 ;; Registers used:
  9742 ;;		wreg, status,2, status,0
  9743 ;; Tracked objects:
  9744 ;;		On entry : 0/0
  9745 ;;		On exit  : 0/0
  9746 ;;		Unchanged: 0/0
  9747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9748 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9749 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9750 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9751 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9752 ;;Total ram usage:       25 bytes
  9753 ;; Hardware stack levels used: 1
  9754 ;; Hardware stack levels required when called: 2
  9755 ;; This function calls:
  9756 ;;		Nothing
  9757 ;; This function is called by:
  9758 ;;		_colorDetect
  9759 ;;		_main
  9760 ;; This function uses a non-reentrant model
  9761 ;;
  9762                           
  9763                           	psect	text42
  9764   002758                     __ptext42:
  9765                           	callstack 0
  9766   002758                     ___fldiv:
  9767                           	callstack 27
  9768   002758  5039               	movf	(___fldiv@b+3)^0,w,c
  9769   00275A  0B80               	andlw	128
  9770   00275C  6E46               	movwf	___fldiv@sign^0,c
  9771   00275E  5039               	movf	(___fldiv@b+3)^0,w,c
  9772   002760  2439               	addwf	(___fldiv@b+3)^0,w,c
  9773   002762  6E4D               	movwf	___fldiv@bexp^0,c
  9774   002764  AE38               	btfss	(___fldiv@b+2)^0,7,c
  9775   002766  EFB7  F013         	goto	u3681
  9776   00276A  EFB9  F013         	goto	u3680
  9777   00276E                     u3681:
  9778   00276E  EFBA  F013         	goto	l3865
  9779   002772                     u3680:
  9780   002772  804D               	bsf	___fldiv@bexp^0,0,c
  9781   002774                     l3865:
  9782   002774  504D               	movf	___fldiv@bexp^0,w,c
  9783   002776  B4D8               	btfsc	status,2,c
  9784   002778  EFC0  F013         	goto	u3691
  9785   00277C  EFC2  F013         	goto	u3690
  9786   002780                     u3691:
  9787   002780  EFD7  F013         	goto	l3875
  9788   002784                     u3690:
  9789   002784  284D               	incf	___fldiv@bexp^0,w,c
  9790   002786  A4D8               	btfss	status,2,c
  9791   002788  EFC8  F013         	goto	u3701
  9792   00278C  EFCA  F013         	goto	u3700
  9793   002790                     u3701:
  9794   002790  EFD2  F013         	goto	l3871
  9795   002794                     u3700:
  9796   002794  0E00               	movlw	0
  9797   002796  6E36               	movwf	___fldiv@b^0,c
  9798   002798  0E00               	movlw	0
  9799   00279A  6E37               	movwf	(___fldiv@b+1)^0,c
  9800   00279C  0E00               	movlw	0
  9801   00279E  6E38               	movwf	(___fldiv@b+2)^0,c
  9802   0027A0  0E00               	movlw	0
  9803   0027A2  6E39               	movwf	(___fldiv@b+3)^0,c
  9804   0027A4                     l3871:
  9805   0027A4  8E38               	bsf	(___fldiv@b+2)^0,7,c
  9806   0027A6  0E00               	movlw	0
  9807   0027A8  6E39               	movwf	(___fldiv@b+3)^0,c
  9808   0027AA  EFDF  F013         	goto	l3877
  9809   0027AE                     l3875:
  9810   0027AE  0E00               	movlw	0
  9811   0027B0  6E36               	movwf	___fldiv@b^0,c
  9812   0027B2  0E00               	movlw	0
  9813   0027B4  6E37               	movwf	(___fldiv@b+1)^0,c
  9814   0027B6  0E00               	movlw	0
  9815   0027B8  6E38               	movwf	(___fldiv@b+2)^0,c
  9816   0027BA  0E00               	movlw	0
  9817   0027BC  6E39               	movwf	(___fldiv@b+3)^0,c
  9818   0027BE                     l3877:
  9819   0027BE  503D               	movf	(___fldiv@a+3)^0,w,c
  9820   0027C0  0B80               	andlw	128
  9821   0027C2  1A46               	xorwf	___fldiv@sign^0,f,c
  9822   0027C4  503D               	movf	(___fldiv@a+3)^0,w,c
  9823   0027C6  243D               	addwf	(___fldiv@a+3)^0,w,c
  9824   0027C8  6E4E               	movwf	___fldiv@aexp^0,c
  9825   0027CA  AE3C               	btfss	(___fldiv@a+2)^0,7,c
  9826   0027CC  EFEA  F013         	goto	u3711
  9827   0027D0  EFEC  F013         	goto	u3710
  9828   0027D4                     u3711:
  9829   0027D4  EFED  F013         	goto	l3885
  9830   0027D8                     u3710:
  9831   0027D8  804E               	bsf	___fldiv@aexp^0,0,c
  9832   0027DA                     l3885:
  9833   0027DA  504E               	movf	___fldiv@aexp^0,w,c
  9834   0027DC  B4D8               	btfsc	status,2,c
  9835   0027DE  EFF3  F013         	goto	u3721
  9836   0027E2  EFF5  F013         	goto	u3720
  9837   0027E6                     u3721:
  9838   0027E6  EF0A  F014         	goto	l3895
  9839   0027EA                     u3720:
  9840   0027EA  284E               	incf	___fldiv@aexp^0,w,c
  9841   0027EC  A4D8               	btfss	status,2,c
  9842   0027EE  EFFB  F013         	goto	u3731
  9843   0027F2  EFFD  F013         	goto	u3730
  9844   0027F6                     u3731:
  9845   0027F6  EF05  F014         	goto	l3891
  9846   0027FA                     u3730:
  9847   0027FA  0E00               	movlw	0
  9848   0027FC  6E3A               	movwf	___fldiv@a^0,c
  9849   0027FE  0E00               	movlw	0
  9850   002800  6E3B               	movwf	(___fldiv@a+1)^0,c
  9851   002802  0E00               	movlw	0
  9852   002804  6E3C               	movwf	(___fldiv@a+2)^0,c
  9853   002806  0E00               	movlw	0
  9854   002808  6E3D               	movwf	(___fldiv@a+3)^0,c
  9855   00280A                     l3891:
  9856   00280A  8E3C               	bsf	(___fldiv@a+2)^0,7,c
  9857   00280C  0E00               	movlw	0
  9858   00280E  6E3D               	movwf	(___fldiv@a+3)^0,c
  9859   002810  EF12  F014         	goto	l3897
  9860   002814                     l3895:
  9861   002814  0E00               	movlw	0
  9862   002816  6E3A               	movwf	___fldiv@a^0,c
  9863   002818  0E00               	movlw	0
  9864   00281A  6E3B               	movwf	(___fldiv@a+1)^0,c
  9865   00281C  0E00               	movlw	0
  9866   00281E  6E3C               	movwf	(___fldiv@a+2)^0,c
  9867   002820  0E00               	movlw	0
  9868   002822  6E3D               	movwf	(___fldiv@a+3)^0,c
  9869   002824                     l3897:
  9870   002824  503A               	movf	___fldiv@a^0,w,c
  9871   002826  103B               	iorwf	(___fldiv@a+1)^0,w,c
  9872   002828  103C               	iorwf	(___fldiv@a+2)^0,w,c
  9873   00282A  103D               	iorwf	(___fldiv@a+3)^0,w,c
  9874   00282C  A4D8               	btfss	status,2,c
  9875   00282E  EF1B  F014         	goto	u3741
  9876   002832  EF1D  F014         	goto	u3740
  9877   002836                     u3741:
  9878   002836  EF35  F014         	goto	l3909
  9879   00283A                     u3740:
  9880   00283A  0E00               	movlw	0
  9881   00283C  6E36               	movwf	___fldiv@b^0,c
  9882   00283E  0E00               	movlw	0
  9883   002840  6E37               	movwf	(___fldiv@b+1)^0,c
  9884   002842  0E00               	movlw	0
  9885   002844  6E38               	movwf	(___fldiv@b+2)^0,c
  9886   002846  0E00               	movlw	0
  9887   002848  6E39               	movwf	(___fldiv@b+3)^0,c
  9888   00284A  0E80               	movlw	128
  9889   00284C  1238               	iorwf	(___fldiv@b+2)^0,f,c
  9890   00284E  0E7F               	movlw	127
  9891   002850  1239               	iorwf	(___fldiv@b+3)^0,f,c
  9892   002852                     l3903:
  9893   002852  5046               	movf	___fldiv@sign^0,w,c
  9894   002854  1239               	iorwf	(___fldiv@b+3)^0,f,c
  9895   002856  C036  F036         	movff	___fldiv@b,?___fldiv
  9896   00285A  C037  F037         	movff	___fldiv@b+1,?___fldiv+1
  9897   00285E  C038  F038         	movff	___fldiv@b+2,?___fldiv+2
  9898   002862  C039  F039         	movff	___fldiv@b+3,?___fldiv+3
  9899   002866  EF78  F015         	goto	l1123
  9900   00286A                     l3909:
  9901   00286A  504D               	movf	___fldiv@bexp^0,w,c
  9902   00286C  A4D8               	btfss	status,2,c
  9903   00286E  EF3B  F014         	goto	u3751
  9904   002872  EF3D  F014         	goto	u3750
  9905   002876                     u3751:
  9906   002876  EF47  F014         	goto	l3917
  9907   00287A                     u3750:
  9908   00287A  0E00               	movlw	0
  9909   00287C  6E36               	movwf	?___fldiv^0,c
  9910   00287E  0E00               	movlw	0
  9911   002880  6E37               	movwf	(?___fldiv+1)^0,c
  9912   002882  0E00               	movlw	0
  9913   002884  6E38               	movwf	(?___fldiv+2)^0,c
  9914   002886  0E00               	movlw	0
  9915   002888  6E39               	movwf	(?___fldiv+3)^0,c
  9916   00288A  EF78  F015         	goto	l1123
  9917   00288E                     l3917:
  9918   00288E  504E               	movf	___fldiv@aexp^0,w,c
  9919   002890  C04D  F03E         	movff	___fldiv@bexp,??___fldiv
  9920   002894  6A3F               	clrf	(??___fldiv+1)^0,c
  9921   002896  5E3E               	subwf	??___fldiv^0,f,c
  9922   002898  0E00               	movlw	0
  9923   00289A  5A3F               	subwfb	(??___fldiv+1)^0,f,c
  9924   00289C  0E7F               	movlw	127
  9925   00289E  243E               	addwf	??___fldiv^0,w,c
  9926   0028A0  6E47               	movwf	___fldiv@new_exp^0,c
  9927   0028A2  0E00               	movlw	0
  9928   0028A4  203F               	addwfc	(??___fldiv+1)^0,w,c
  9929   0028A6  6E48               	movwf	(___fldiv@new_exp+1)^0,c
  9930   0028A8  C036  F042         	movff	___fldiv@b,___fldiv@rem
  9931   0028AC  C037  F043         	movff	___fldiv@b+1,___fldiv@rem+1
  9932   0028B0  C038  F044         	movff	___fldiv@b+2,___fldiv@rem+2
  9933   0028B4  C039  F045         	movff	___fldiv@b+3,___fldiv@rem+3
  9934   0028B8  0E00               	movlw	0
  9935   0028BA  6E36               	movwf	___fldiv@b^0,c
  9936   0028BC  0E00               	movlw	0
  9937   0028BE  6E37               	movwf	(___fldiv@b+1)^0,c
  9938   0028C0  0E00               	movlw	0
  9939   0028C2  6E38               	movwf	(___fldiv@b+2)^0,c
  9940   0028C4  0E00               	movlw	0
  9941   0028C6  6E39               	movwf	(___fldiv@b+3)^0,c
  9942   0028C8  0E00               	movlw	0
  9943   0028CA  6E49               	movwf	___fldiv@grs^0,c
  9944   0028CC  0E00               	movlw	0
  9945   0028CE  6E4A               	movwf	(___fldiv@grs+1)^0,c
  9946   0028D0  0E00               	movlw	0
  9947   0028D2  6E4B               	movwf	(___fldiv@grs+2)^0,c
  9948   0028D4  0E00               	movlw	0
  9949   0028D6  6E4C               	movwf	(___fldiv@grs+3)^0,c
  9950   0028D8  0E00               	movlw	0
  9951   0028DA  6E4E               	movwf	___fldiv@aexp^0,c
  9952   0028DC  EFA8  F014         	goto	l1125
  9953   0028E0                     l3927:
  9954   0028E0  504E               	movf	___fldiv@aexp^0,w,c
  9955   0028E2  B4D8               	btfsc	status,2,c
  9956   0028E4  EF76  F014         	goto	u3761
  9957   0028E8  EF78  F014         	goto	u3760
  9958   0028EC                     u3761:
  9959   0028EC  EF8F  F014         	goto	l3935
  9960   0028F0                     u3760:
  9961   0028F0  90D8               	bcf	status,0,c
  9962   0028F2  3642               	rlcf	___fldiv@rem^0,f,c
  9963   0028F4  3643               	rlcf	(___fldiv@rem+1)^0,f,c
  9964   0028F6  3644               	rlcf	(___fldiv@rem+2)^0,f,c
  9965   0028F8  3645               	rlcf	(___fldiv@rem+3)^0,f,c
  9966   0028FA  90D8               	bcf	status,0,c
  9967   0028FC  3636               	rlcf	___fldiv@b^0,f,c
  9968   0028FE  3637               	rlcf	(___fldiv@b+1)^0,f,c
  9969   002900  3638               	rlcf	(___fldiv@b+2)^0,f,c
  9970   002902  3639               	rlcf	(___fldiv@b+3)^0,f,c
  9971   002904  AE4C               	btfss	(___fldiv@grs+3)^0,7,c
  9972   002906  EF87  F014         	goto	u3771
  9973   00290A  EF89  F014         	goto	u3770
  9974   00290E                     u3771:
  9975   00290E  EF8A  F014         	goto	l1128
  9976   002912                     u3770:
  9977   002912  8036               	bsf	___fldiv@b^0,0,c
  9978   002914                     l1128:
  9979   002914  90D8               	bcf	status,0,c
  9980   002916  3649               	rlcf	___fldiv@grs^0,f,c
  9981   002918  364A               	rlcf	(___fldiv@grs+1)^0,f,c
  9982   00291A  364B               	rlcf	(___fldiv@grs+2)^0,f,c
  9983   00291C  364C               	rlcf	(___fldiv@grs+3)^0,f,c
  9984   00291E                     l3935:
  9985   00291E  503A               	movf	___fldiv@a^0,w,c
  9986   002920  5C42               	subwf	___fldiv@rem^0,w,c
  9987   002922  503B               	movf	(___fldiv@a+1)^0,w,c
  9988   002924  5843               	subwfb	(___fldiv@rem+1)^0,w,c
  9989   002926  503C               	movf	(___fldiv@a+2)^0,w,c
  9990   002928  5844               	subwfb	(___fldiv@rem+2)^0,w,c
  9991   00292A  503D               	movf	(___fldiv@a+3)^0,w,c
  9992   00292C  5845               	subwfb	(___fldiv@rem+3)^0,w,c
  9993   00292E  A0D8               	btfss	status,0,c
  9994   002930  EF9C  F014         	goto	u3781
  9995   002934  EF9E  F014         	goto	u3780
  9996   002938                     u3781:
  9997   002938  EFA7  F014         	goto	l3941
  9998   00293C                     u3780:
  9999   00293C  8C4C               	bsf	(___fldiv@grs+3)^0,6,c
 10000   00293E  503A               	movf	___fldiv@a^0,w,c
 10001   002940  5E42               	subwf	___fldiv@rem^0,f,c
 10002   002942  503B               	movf	(___fldiv@a+1)^0,w,c
 10003   002944  5A43               	subwfb	(___fldiv@rem+1)^0,f,c
 10004   002946  503C               	movf	(___fldiv@a+2)^0,w,c
 10005   002948  5A44               	subwfb	(___fldiv@rem+2)^0,f,c
 10006   00294A  503D               	movf	(___fldiv@a+3)^0,w,c
 10007   00294C  5A45               	subwfb	(___fldiv@rem+3)^0,f,c
 10008   00294E                     l3941:
 10009   00294E  2A4E               	incf	___fldiv@aexp^0,f,c
 10010   002950                     l1125:
 10011   002950  0E19               	movlw	25
 10012   002952  644E               	cpfsgt	___fldiv@aexp^0,c
 10013   002954  EFAE  F014         	goto	u3791
 10014   002958  EFB0  F014         	goto	u3790
 10015   00295C                     u3791:
 10016   00295C  EF70  F014         	goto	l3927
 10017   002960                     u3790:
 10018   002960  5042               	movf	___fldiv@rem^0,w,c
 10019   002962  1043               	iorwf	(___fldiv@rem+1)^0,w,c
 10020   002964  1044               	iorwf	(___fldiv@rem+2)^0,w,c
 10021   002966  1045               	iorwf	(___fldiv@rem+3)^0,w,c
 10022   002968  B4D8               	btfsc	status,2,c
 10023   00296A  EFB9  F014         	goto	u3801
 10024   00296E  EFBB  F014         	goto	u3800
 10025   002972                     u3801:
 10026   002972  EFD3  F014         	goto	l3953
 10027   002976                     u3800:
 10028   002976  8049               	bsf	___fldiv@grs^0,0,c
 10029   002978  EFD3  F014         	goto	l3953
 10030   00297C                     l3947:
 10031   00297C  90D8               	bcf	status,0,c
 10032   00297E  3636               	rlcf	___fldiv@b^0,f,c
 10033   002980  3637               	rlcf	(___fldiv@b+1)^0,f,c
 10034   002982  3638               	rlcf	(___fldiv@b+2)^0,f,c
 10035   002984  3639               	rlcf	(___fldiv@b+3)^0,f,c
 10036   002986  AE4C               	btfss	(___fldiv@grs+3)^0,7,c
 10037   002988  EFC8  F014         	goto	u3811
 10038   00298C  EFCA  F014         	goto	u3810
 10039   002990                     u3811:
 10040   002990  EFCB  F014         	goto	l1134
 10041   002994                     u3810:
 10042   002994  8036               	bsf	___fldiv@b^0,0,c
 10043   002996                     l1134:
 10044   002996  90D8               	bcf	status,0,c
 10045   002998  3649               	rlcf	___fldiv@grs^0,f,c
 10046   00299A  364A               	rlcf	(___fldiv@grs+1)^0,f,c
 10047   00299C  364B               	rlcf	(___fldiv@grs+2)^0,f,c
 10048   00299E  364C               	rlcf	(___fldiv@grs+3)^0,f,c
 10049   0029A0  0647               	decf	___fldiv@new_exp^0,f,c
 10050   0029A2  A0D8               	btfss	status,0,c
 10051   0029A4  0648               	decf	(___fldiv@new_exp+1)^0,f,c
 10052   0029A6                     l3953:
 10053   0029A6  AE38               	btfss	(___fldiv@b+2)^0,7,c
 10054   0029A8  EFD8  F014         	goto	u3821
 10055   0029AC  EFDA  F014         	goto	u3820
 10056   0029B0                     u3821:
 10057   0029B0  EFBE  F014         	goto	l3947
 10058   0029B4                     u3820:
 10059   0029B4  0E00               	movlw	0
 10060   0029B6  6E4E               	movwf	___fldiv@aexp^0,c
 10061   0029B8  AE4C               	btfss	(___fldiv@grs+3)^0,7,c
 10062   0029BA  EFE1  F014         	goto	u3831
 10063   0029BE  EFE3  F014         	goto	u3830
 10064   0029C2                     u3831:
 10065   0029C2  EF07  F015         	goto	l1136
 10066   0029C6                     u3830:
 10067   0029C6  0EFF               	movlw	255
 10068   0029C8  1449               	andwf	___fldiv@grs^0,w,c
 10069   0029CA  6E3E               	movwf	??___fldiv^0,c
 10070   0029CC  0EFF               	movlw	255
 10071   0029CE  144A               	andwf	(___fldiv@grs+1)^0,w,c
 10072   0029D0  6E3F               	movwf	(??___fldiv+1)^0,c
 10073   0029D2  0EFF               	movlw	255
 10074   0029D4  144B               	andwf	(___fldiv@grs+2)^0,w,c
 10075   0029D6  6E40               	movwf	(??___fldiv+2)^0,c
 10076   0029D8  0E7F               	movlw	127
 10077   0029DA  144C               	andwf	(___fldiv@grs+3)^0,w,c
 10078   0029DC  6E41               	movwf	(??___fldiv+3)^0,c
 10079   0029DE  503E               	movf	??___fldiv^0,w,c
 10080   0029E0  103F               	iorwf	(??___fldiv+1)^0,w,c
 10081   0029E2  1040               	iorwf	(??___fldiv+2)^0,w,c
 10082   0029E4  1041               	iorwf	(??___fldiv+3)^0,w,c
 10083   0029E6  B4D8               	btfsc	status,2,c
 10084   0029E8  EFF8  F014         	goto	u3841
 10085   0029EC  EFFA  F014         	goto	u3840
 10086   0029F0                     u3841:
 10087   0029F0  EFFE  F014         	goto	l1137
 10088   0029F4                     u3840:
 10089   0029F4                     l3961:
 10090   0029F4  0E01               	movlw	1
 10091   0029F6  6E4E               	movwf	___fldiv@aexp^0,c
 10092   0029F8  EF07  F015         	goto	l1136
 10093   0029FC                     l1137:
 10094   0029FC  A036               	btfss	___fldiv@b^0,0,c
 10095   0029FE  EF03  F015         	goto	u3851
 10096   002A02  EF05  F015         	goto	u3850
 10097   002A06                     u3851:
 10098   002A06  EF07  F015         	goto	l1136
 10099   002A0A                     u3850:
 10100   002A0A  EFFA  F014         	goto	l3961
 10101   002A0E                     l1136:
 10102   002A0E  504E               	movf	___fldiv@aexp^0,w,c
 10103   002A10  B4D8               	btfsc	status,2,c
 10104   002A12  EF0D  F015         	goto	u3861
 10105   002A16  EF0F  F015         	goto	u3860
 10106   002A1A                     u3861:
 10107   002A1A  EF33  F015         	goto	l3973
 10108   002A1E                     u3860:
 10109   002A1E  0E01               	movlw	1
 10110   002A20  2636               	addwf	___fldiv@b^0,f,c
 10111   002A22  0E00               	movlw	0
 10112   002A24  2237               	addwfc	(___fldiv@b+1)^0,f,c
 10113   002A26  2238               	addwfc	(___fldiv@b+2)^0,f,c
 10114   002A28  2239               	addwfc	(___fldiv@b+3)^0,f,c
 10115   002A2A  A039               	btfss	(___fldiv@b+3)^0,0,c
 10116   002A2C  EF1A  F015         	goto	u3871
 10117   002A30  EF1C  F015         	goto	u3870
 10118   002A34                     u3871:
 10119   002A34  EF33  F015         	goto	l3973
 10120   002A38                     u3870:
 10121   002A38  C036  F03E         	movff	___fldiv@b,??___fldiv
 10122   002A3C  C037  F03F         	movff	___fldiv@b+1,??___fldiv+1
 10123   002A40  C038  F040         	movff	___fldiv@b+2,??___fldiv+2
 10124   002A44  C039  F041         	movff	___fldiv@b+3,??___fldiv+3
 10125   002A48  3441               	rlcf	(??___fldiv+3)^0,w,c
 10126   002A4A  3241               	rrcf	(??___fldiv+3)^0,f,c
 10127   002A4C  3240               	rrcf	(??___fldiv+2)^0,f,c
 10128   002A4E  323F               	rrcf	(??___fldiv+1)^0,f,c
 10129   002A50  323E               	rrcf	??___fldiv^0,f,c
 10130   002A52  C03E  F036         	movff	??___fldiv,___fldiv@b
 10131   002A56  C03F  F037         	movff	??___fldiv+1,___fldiv@b+1
 10132   002A5A  C040  F038         	movff	??___fldiv+2,___fldiv@b+2
 10133   002A5E  C041  F039         	movff	??___fldiv+3,___fldiv@b+3
 10134   002A62  4A47               	infsnz	___fldiv@new_exp^0,f,c
 10135   002A64  2A48               	incf	(___fldiv@new_exp+1)^0,f,c
 10136   002A66                     l3973:
 10137   002A66  BE48               	btfsc	(___fldiv@new_exp+1)^0,7,c
 10138   002A68  EF3E  F015         	goto	u3881
 10139   002A6C  5048               	movf	(___fldiv@new_exp+1)^0,w,c
 10140   002A6E  E108               	bnz	u3880
 10141   002A70  2847               	incf	___fldiv@new_exp^0,w,c
 10142   002A72  A0D8               	btfss	status,0,c
 10143   002A74  EF3E  F015         	goto	u3881
 10144   002A78  EF40  F015         	goto	u3880
 10145   002A7C                     u3881:
 10146   002A7C  EF4B  F015         	goto	l3977
 10147   002A80                     u3880:
 10148   002A80  0E00               	movlw	0
 10149   002A82  6E48               	movwf	(___fldiv@new_exp+1)^0,c
 10150   002A84  6847               	setf	___fldiv@new_exp^0,c
 10151   002A86  0E00               	movlw	0
 10152   002A88  6E36               	movwf	___fldiv@b^0,c
 10153   002A8A  0E00               	movlw	0
 10154   002A8C  6E37               	movwf	(___fldiv@b+1)^0,c
 10155   002A8E  0E00               	movlw	0
 10156   002A90  6E38               	movwf	(___fldiv@b+2)^0,c
 10157   002A92  0E00               	movlw	0
 10158   002A94  6E39               	movwf	(___fldiv@b+3)^0,c
 10159   002A96                     l3977:
 10160   002A96  BE48               	btfsc	(___fldiv@new_exp+1)^0,7,c
 10161   002A98  EF58  F015         	goto	u3890
 10162   002A9C  5048               	movf	(___fldiv@new_exp+1)^0,w,c
 10163   002A9E  E106               	bnz	u3891
 10164   002AA0  0447               	decf	___fldiv@new_exp^0,w,c
 10165   002AA2  B0D8               	btfsc	status,0,c
 10166   002AA4  EF56  F015         	goto	u3891
 10167   002AA8  EF58  F015         	goto	u3890
 10168   002AAC                     u3891:
 10169   002AAC  EF66  F015         	goto	l3981
 10170   002AB0                     u3890:
 10171   002AB0  0E00               	movlw	0
 10172   002AB2  6E48               	movwf	(___fldiv@new_exp+1)^0,c
 10173   002AB4  0E00               	movlw	0
 10174   002AB6  6E47               	movwf	___fldiv@new_exp^0,c
 10175   002AB8  0E00               	movlw	0
 10176   002ABA  6E36               	movwf	___fldiv@b^0,c
 10177   002ABC  0E00               	movlw	0
 10178   002ABE  6E37               	movwf	(___fldiv@b+1)^0,c
 10179   002AC0  0E00               	movlw	0
 10180   002AC2  6E38               	movwf	(___fldiv@b+2)^0,c
 10181   002AC4  0E00               	movlw	0
 10182   002AC6  6E39               	movwf	(___fldiv@b+3)^0,c
 10183   002AC8  0E00               	movlw	0
 10184   002ACA  6E46               	movwf	___fldiv@sign^0,c
 10185   002ACC                     l3981:
 10186   002ACC  C047  F04D         	movff	___fldiv@new_exp,___fldiv@bexp
 10187   002AD0  A04D               	btfss	___fldiv@bexp^0,0,c
 10188   002AD2  EF6D  F015         	goto	u3901
 10189   002AD6  EF6F  F015         	goto	u3900
 10190   002ADA                     u3901:
 10191   002ADA  EF72  F015         	goto	l3987
 10192   002ADE                     u3900:
 10193   002ADE  8E38               	bsf	(___fldiv@b+2)^0,7,c
 10194   002AE0  EF73  F015         	goto	l3989
 10195   002AE4                     l3987:
 10196   002AE4  9E38               	bcf	(___fldiv@b+2)^0,7,c
 10197   002AE6                     l3989:
 10198   002AE6  90D8               	bcf	status,0,c
 10199   002AE8  304D               	rrcf	___fldiv@bexp^0,w,c
 10200   002AEA  6E39               	movwf	(___fldiv@b+3)^0,c
 10201   002AEC  EF29  F014         	goto	l3903
 10202   002AF0                     l1123:
 10203   002AF0  0012               	return		;funcret
 10204   002AF2                     __end_of___fldiv:
 10205                           	callstack 0
 10206                           
 10207 ;; *************** function _ambientCal *****************
 10208 ;; Defined at:
 10209 ;;		line 99 in file "MazeRobot.X/color.c"
 10210 ;; Parameters:    Size  Location     Type
 10211 ;;  v               2   17[COMRAM] PTR struct RGB
 10212 ;;		 -> main@ambientRGBVal(8), 
 10213 ;; Auto vars:     Size  Location     Type
 10214 ;;  i               2   21[COMRAM] int 
 10215 ;; Return value:  Size  Location     Type
 10216 ;;                  1    wreg      void 
 10217 ;; Registers used:
 10218 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10219 ;; Tracked objects:
 10220 ;;		On entry : 0/0
 10221 ;;		On exit  : 0/0
 10222 ;;		Unchanged: 0/0
 10223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10224 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10225 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10226 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10227 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10228 ;;Total ram usage:        6 bytes
 10229 ;; Hardware stack levels used: 1
 10230 ;; Hardware stack levels required when called: 6
 10231 ;; This function calls:
 10232 ;;		_getColor
 10233 ;; This function is called by:
 10234 ;;		_main
 10235 ;; This function uses a non-reentrant model
 10236 ;;
 10237                           
 10238                           	psect	text43
 10239   003FCC                     __ptext43:
 10240                           	callstack 0
 10241   003FCC                     _ambientCal:
 10242                           	callstack 24
 10243   003FCC                     
 10244                           ;MazeRobot.X/color.c: 102:     for(int i = 0;i<20;i++){
 10245   003FCC  0E00               	movlw	0
 10246   003FCE  6E17               	movwf	(ambientCal@i+1)^0,c
 10247   003FD0  0E00               	movlw	0
 10248   003FD2  6E16               	movwf	ambientCal@i^0,c
 10249   003FD4                     l4217:
 10250                           
 10251                           ;MazeRobot.X/color.c: 103:             LATDbits.LATD7 = !LATDbits.LATD7;
 10252   003FD4  AE7C               	btfss	124,7,c	;volatile
 10253   003FD6  EFEF  F01F         	goto	u4251
 10254   003FDA  EFF3  F01F         	goto	u4250
 10255   003FDE                     u4251:
 10256   003FDE  6A14               	clrf	??_ambientCal^0,c
 10257   003FE0  2A14               	incf	??_ambientCal^0,f,c
 10258   003FE2  EFF4  F01F         	goto	u4268
 10259   003FE6                     u4250:
 10260   003FE6  6A14               	clrf	??_ambientCal^0,c
 10261   003FE8                     u4268:
 10262   003FE8  3214               	rrcf	??_ambientCal^0,f,c
 10263   003FEA  3214               	rrcf	??_ambientCal^0,f,c
 10264   003FEC  507C               	movf	124,w,c	;volatile
 10265   003FEE  1814               	xorwf	??_ambientCal^0,w,c
 10266   003FF0  0B7F               	andlw	-129
 10267   003FF2  1814               	xorwf	??_ambientCal^0,w,c
 10268   003FF4  6E7C               	movwf	124,c	;volatile
 10269   003FF6                     
 10270                           ;MazeRobot.X/color.c: 104:             _delay((unsigned long)((100)*(64000000/4000.0)));
 10271   003FF6  0E09               	movlw	9
 10272   003FF8  6E15               	movwf	(??_ambientCal+1)^0,c
 10273   003FFA  0E1E               	movlw	30
 10274   003FFC  6E14               	movwf	??_ambientCal^0,c
 10275   003FFE  0EE4               	movlw	228
 10276   004000                     u6477:
 10277   004000  2EE8               	decfsz	wreg,f,c
 10278   004002  D7FE               	bra	u6477
 10279   004004  2E14               	decfsz	??_ambientCal^0,f,c
 10280   004006  D7FC               	bra	u6477
 10281   004008  2E15               	decfsz	(??_ambientCal+1)^0,f,c
 10282   00400A  D7FA               	bra	u6477
 10283   00400C  D000               	nop2	
 10284                           
 10285                           ;MazeRobot.X/color.c: 105:             }
 10286   00400E  4A16               	infsnz	ambientCal@i^0,f,c
 10287   004010  2A17               	incf	(ambientCal@i+1)^0,f,c
 10288   004012  BE17               	btfsc	(ambientCal@i+1)^0,7,c
 10289   004014  EF15  F020         	goto	u4271
 10290   004018  5017               	movf	(ambientCal@i+1)^0,w,c
 10291   00401A  E109               	bnz	u4270
 10292   00401C  0E14               	movlw	20
 10293   00401E  5C16               	subwf	ambientCal@i^0,w,c
 10294   004020  A0D8               	btfss	status,0,c
 10295   004022  EF15  F020         	goto	u4271
 10296   004026  EF17  F020         	goto	u4270
 10297   00402A                     u4271:
 10298   00402A  EFEA  F01F         	goto	l4217
 10299   00402E                     u4270:
 10300   00402E                     
 10301                           ;MazeRobot.X/color.c: 106:             LATDbits.LATD7 = !LATDbits.LATD7;
 10302   00402E  AE7C               	btfss	124,7,c	;volatile
 10303   004030  EF1C  F020         	goto	u4281
 10304   004034  EF20  F020         	goto	u4280
 10305   004038                     u4281:
 10306   004038  6A14               	clrf	??_ambientCal^0,c
 10307   00403A  2A14               	incf	??_ambientCal^0,f,c
 10308   00403C  EF21  F020         	goto	u4298
 10309   004040                     u4280:
 10310   004040  6A14               	clrf	??_ambientCal^0,c
 10311   004042                     u4298:
 10312   004042  3214               	rrcf	??_ambientCal^0,f,c
 10313   004044  3214               	rrcf	??_ambientCal^0,f,c
 10314   004046  507C               	movf	124,w,c	;volatile
 10315   004048  1814               	xorwf	??_ambientCal^0,w,c
 10316   00404A  0B7F               	andlw	-129
 10317   00404C  1814               	xorwf	??_ambientCal^0,w,c
 10318   00404E  6E7C               	movwf	124,c	;volatile
 10319   004050                     
 10320                           ;MazeRobot.X/color.c: 107:             _delay((unsigned long)((500)*(64000000/4000.0)));
 10321   004050  0E29               	movlw	41
 10322   004052  6E15               	movwf	(??_ambientCal+1)^0,c
 10323   004054  0E96               	movlw	150
 10324   004056  6E14               	movwf	??_ambientCal^0,c
 10325   004058  0E7F               	movlw	127
 10326   00405A                     u6487:
 10327   00405A  2EE8               	decfsz	wreg,f,c
 10328   00405C  D7FE               	bra	u6487
 10329   00405E  2E14               	decfsz	??_ambientCal^0,f,c
 10330   004060  D7FC               	bra	u6487
 10331   004062  2E15               	decfsz	(??_ambientCal+1)^0,f,c
 10332   004064  D7FA               	bra	u6487
 10333   004066  F000               	nop	
 10334   004068                     
 10335                           ;MazeRobot.X/color.c: 108:             getColor(v);
 10336   004068  C012  F010         	movff	ambientCal@v,getColor@v
 10337   00406C  C013  F011         	movff	ambientCal@v+1,getColor@v+1
 10338   004070  ECA8  F023         	call	_getColor	;wreg free
 10339   004074                     
 10340                           ;MazeRobot.X/color.c: 109:             _delay((unsigned long)((500)*(64000000/4000.0)));
 10341   004074  0E29               	movlw	41
 10342   004076  6E15               	movwf	(??_ambientCal+1)^0,c
 10343   004078  0E96               	movlw	150
 10344   00407A  6E14               	movwf	??_ambientCal^0,c
 10345   00407C  0E7F               	movlw	127
 10346   00407E                     u6497:
 10347   00407E  2EE8               	decfsz	wreg,f,c
 10348   004080  D7FE               	bra	u6497
 10349   004082  2E14               	decfsz	??_ambientCal^0,f,c
 10350   004084  D7FC               	bra	u6497
 10351   004086  2E15               	decfsz	(??_ambientCal+1)^0,f,c
 10352   004088  D7FA               	bra	u6497
 10353   00408A  F000               	nop	
 10354   00408C                     
 10355                           ;MazeRobot.X/color.c: 110:             LATDbits.LATD7 = !LATDbits.LATD7;
 10356   00408C  AE7C               	btfss	124,7,c	;volatile
 10357   00408E  EF4B  F020         	goto	u4301
 10358   004092  EF4F  F020         	goto	u4300
 10359   004096                     u4301:
 10360   004096  6A14               	clrf	??_ambientCal^0,c
 10361   004098  2A14               	incf	??_ambientCal^0,f,c
 10362   00409A  EF50  F020         	goto	u4318
 10363   00409E                     u4300:
 10364   00409E  6A14               	clrf	??_ambientCal^0,c
 10365   0040A0                     u4318:
 10366   0040A0  3214               	rrcf	??_ambientCal^0,f,c
 10367   0040A2  3214               	rrcf	??_ambientCal^0,f,c
 10368   0040A4  507C               	movf	124,w,c	;volatile
 10369   0040A6  1814               	xorwf	??_ambientCal^0,w,c
 10370   0040A8  0B7F               	andlw	-129
 10371   0040AA  1814               	xorwf	??_ambientCal^0,w,c
 10372   0040AC  6E7C               	movwf	124,c	;volatile
 10373   0040AE  0012               	return		;funcret
 10374   0040B0                     __end_of_ambientCal:
 10375                           	callstack 0
 10376                           
 10377 ;; *************** function _getColor *****************
 10378 ;; Defined at:
 10379 ;;		line 91 in file "MazeRobot.X/color.c"
 10380 ;; Parameters:    Size  Location     Type
 10381 ;;  v               2   15[COMRAM] PTR struct RGB
 10382 ;;		 -> main@whiteRGBVal(8), main@RGBVal(8), main@ambientRGBVal(8), colorDetect@RGBVal(8), 
 10383 ;; Auto vars:     Size  Location     Type
 10384 ;;		None
 10385 ;; Return value:  Size  Location     Type
 10386 ;;                  1    wreg      void 
 10387 ;; Registers used:
 10388 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10389 ;; Tracked objects:
 10390 ;;		On entry : 0/0
 10391 ;;		On exit  : 0/0
 10392 ;;		Unchanged: 0/0
 10393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10394 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10397 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10398 ;;Total ram usage:        2 bytes
 10399 ;; Hardware stack levels used: 1
 10400 ;; Hardware stack levels required when called: 5
 10401 ;; This function calls:
 10402 ;;		_color_read_Blue
 10403 ;;		_color_read_Clear
 10404 ;;		_color_read_Green
 10405 ;;		_color_read_Red
 10406 ;; This function is called by:
 10407 ;;		_ambientCal
 10408 ;;		_whiteCal
 10409 ;;		_colorDetect
 10410 ;;		_main
 10411 ;; This function uses a non-reentrant model
 10412 ;;
 10413                           
 10414                           	psect	text44
 10415   004750                     __ptext44:
 10416                           	callstack 0
 10417   004750                     _getColor:
 10418                           	callstack 24
 10419   004750                     
 10420                           ;MazeRobot.X/color.c: 92:     v->R = color_read_Red();
 10421   004750  EC2A  F024         	call	_color_read_Red	;wreg free
 10422   004754  C010  FFD9         	movff	getColor@v,fsr2l
 10423   004758  C011  FFDA         	movff	getColor@v+1,fsr2h
 10424   00475C  C009  FFDE         	movff	?_color_read_Red,postinc2
 10425   004760  C00A  FFDD         	movff	?_color_read_Red+1,postdec2
 10426                           
 10427                           ;MazeRobot.X/color.c: 93:     v->G = color_read_Green();
 10428   004764  EC52  F024         	call	_color_read_Green	;wreg free
 10429   004768  EE20 F002          	lfsr	2,2
 10430   00476C  5010               	movf	getColor@v^0,w,c
 10431   00476E  26D9               	addwf	fsr2l,f,c
 10432   004770  5011               	movf	(getColor@v+1)^0,w,c
 10433   004772  22DA               	addwfc	fsr2h,f,c
 10434   004774  C009  FFDE         	movff	?_color_read_Green,postinc2
 10435   004778  C00A  FFDD         	movff	?_color_read_Green+1,postdec2
 10436                           
 10437                           ;MazeRobot.X/color.c: 94:     v->B = color_read_Blue();
 10438   00477C  ECA2  F024         	call	_color_read_Blue	;wreg free
 10439   004780  EE20 F004          	lfsr	2,4
 10440   004784  5010               	movf	getColor@v^0,w,c
 10441   004786  26D9               	addwf	fsr2l,f,c
 10442   004788  5011               	movf	(getColor@v+1)^0,w,c
 10443   00478A  22DA               	addwfc	fsr2h,f,c
 10444   00478C  C009  FFDE         	movff	?_color_read_Blue,postinc2
 10445   004790  C00A  FFDD         	movff	?_color_read_Blue+1,postdec2
 10446                           
 10447                           ;MazeRobot.X/color.c: 95:     v->C = color_read_Clear();
 10448   004794  EC7A  F024         	call	_color_read_Clear	;wreg free
 10449   004798  EE20 F006          	lfsr	2,6
 10450   00479C  5010               	movf	getColor@v^0,w,c
 10451   00479E  26D9               	addwf	fsr2l,f,c
 10452   0047A0  5011               	movf	(getColor@v+1)^0,w,c
 10453   0047A2  22DA               	addwfc	fsr2h,f,c
 10454   0047A4  C009  FFDE         	movff	?_color_read_Clear,postinc2
 10455   0047A8  C00A  FFDD         	movff	?_color_read_Clear+1,postdec2
 10456   0047AC  0012               	return		;funcret
 10457   0047AE                     __end_of_getColor:
 10458                           	callstack 0
 10459                           
 10460 ;; *************** function _color_read_Red *****************
 10461 ;; Defined at:
 10462 ;;		line 33 in file "MazeRobot.X/color.c"
 10463 ;; Parameters:    Size  Location     Type
 10464 ;;		None
 10465 ;; Auto vars:     Size  Location     Type
 10466 ;;  tmp             2   13[COMRAM] unsigned int 
 10467 ;; Return value:  Size  Location     Type
 10468 ;;                  2    8[COMRAM] unsigned int 
 10469 ;; Registers used:
 10470 ;;		wreg, status,2, status,0, cstack
 10471 ;; Tracked objects:
 10472 ;;		On entry : 0/0
 10473 ;;		On exit  : 0/0
 10474 ;;		Unchanged: 0/0
 10475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10476 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10477 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10478 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10479 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10480 ;;Total ram usage:        7 bytes
 10481 ;; Hardware stack levels used: 1
 10482 ;; Hardware stack levels required when called: 4
 10483 ;; This function calls:
 10484 ;;		_I2C_2_Master_Read
 10485 ;;		_I2C_2_Master_RepStart
 10486 ;;		_I2C_2_Master_Start
 10487 ;;		_I2C_2_Master_Stop
 10488 ;;		_I2C_2_Master_Write
 10489 ;; This function is called by:
 10490 ;;		_getColor
 10491 ;; This function uses a non-reentrant model
 10492 ;;
 10493                           
 10494                           	psect	text45
 10495   004854                     __ptext45:
 10496                           	callstack 0
 10497   004854                     _color_read_Red:
 10498                           	callstack 24
 10499   004854                     
 10500                           ;MazeRobot.X/color.c: 35:  unsigned int tmp;;MazeRobot.X/color.c: 36:  I2C_2_Master_Star
      +                          t();
 10501   004854  EC7A  F026         	call	_I2C_2_Master_Start	;wreg free
 10502                           
 10503                           ;MazeRobot.X/color.c: 37:  I2C_2_Master_Write(0x52 | 0x00);
 10504   004858  0E52               	movlw	82
 10505   00485A  EC6F  F026         	call	_I2C_2_Master_Write
 10506                           
 10507                           ;MazeRobot.X/color.c: 38:  I2C_2_Master_Write(0xA0 | 0x16);
 10508   00485E  0EB6               	movlw	182
 10509   004860  EC6F  F026         	call	_I2C_2_Master_Write
 10510                           
 10511                           ;MazeRobot.X/color.c: 39:  I2C_2_Master_RepStart();
 10512   004864  EC7F  F026         	call	_I2C_2_Master_RepStart	;wreg free
 10513                           
 10514                           ;MazeRobot.X/color.c: 40:  I2C_2_Master_Write(0x52 | 0x01);
 10515   004868  0E53               	movlw	83
 10516   00486A  EC6F  F026         	call	_I2C_2_Master_Write
 10517                           
 10518                           ;MazeRobot.X/color.c: 41:  tmp=I2C_2_Master_Read(1);
 10519   00486E  0E01               	movlw	1
 10520   004870  EC34  F025         	call	_I2C_2_Master_Read
 10521   004874  6E0B               	movwf	??_color_read_Red^0,c
 10522   004876  500B               	movf	??_color_read_Red^0,w,c
 10523   004878  6E0E               	movwf	color_read_Red@tmp^0,c
 10524   00487A  6A0F               	clrf	(color_read_Red@tmp+1)^0,c
 10525                           
 10526                           ;MazeRobot.X/color.c: 42:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10527   00487C  0E00               	movlw	0
 10528   00487E  EC34  F025         	call	_I2C_2_Master_Read
 10529   004882  6E0B               	movwf	??_color_read_Red^0,c
 10530   004884  500B               	movf	??_color_read_Red^0,w,c
 10531   004886  6E0D               	movwf	(??_color_read_Red+2)^0,c
 10532   004888  6A0C               	clrf	(??_color_read_Red+1)^0,c
 10533   00488A  500E               	movf	color_read_Red@tmp^0,w,c
 10534   00488C  100C               	iorwf	(??_color_read_Red+1)^0,w,c
 10535   00488E  6E0E               	movwf	color_read_Red@tmp^0,c
 10536   004890  500F               	movf	(color_read_Red@tmp+1)^0,w,c
 10537   004892  100D               	iorwf	(??_color_read_Red+2)^0,w,c
 10538   004894  6E0F               	movwf	(color_read_Red@tmp+1)^0,c
 10539                           
 10540                           ;MazeRobot.X/color.c: 43:  I2C_2_Master_Stop();
 10541   004896  EC75  F026         	call	_I2C_2_Master_Stop	;wreg free
 10542   00489A                     
 10543                           ;MazeRobot.X/color.c: 44:  return tmp;
 10544   00489A  C00E  F009         	movff	color_read_Red@tmp,?_color_read_Red
 10545   00489E  C00F  F00A         	movff	color_read_Red@tmp+1,?_color_read_Red+1
 10546   0048A2  0012               	return		;funcret
 10547   0048A4                     __end_of_color_read_Red:
 10548                           	callstack 0
 10549                           
 10550 ;; *************** function _color_read_Green *****************
 10551 ;; Defined at:
 10552 ;;		line 47 in file "MazeRobot.X/color.c"
 10553 ;; Parameters:    Size  Location     Type
 10554 ;;		None
 10555 ;; Auto vars:     Size  Location     Type
 10556 ;;  tmp             2   13[COMRAM] unsigned int 
 10557 ;; Return value:  Size  Location     Type
 10558 ;;                  2    8[COMRAM] unsigned int 
 10559 ;; Registers used:
 10560 ;;		wreg, status,2, status,0, cstack
 10561 ;; Tracked objects:
 10562 ;;		On entry : 0/0
 10563 ;;		On exit  : 0/0
 10564 ;;		Unchanged: 0/0
 10565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10566 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10567 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10568 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10569 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10570 ;;Total ram usage:        7 bytes
 10571 ;; Hardware stack levels used: 1
 10572 ;; Hardware stack levels required when called: 4
 10573 ;; This function calls:
 10574 ;;		_I2C_2_Master_Read
 10575 ;;		_I2C_2_Master_RepStart
 10576 ;;		_I2C_2_Master_Start
 10577 ;;		_I2C_2_Master_Stop
 10578 ;;		_I2C_2_Master_Write
 10579 ;; This function is called by:
 10580 ;;		_getColor
 10581 ;; This function uses a non-reentrant model
 10582 ;;
 10583                           
 10584                           	psect	text46
 10585   0048A4                     __ptext46:
 10586                           	callstack 0
 10587   0048A4                     _color_read_Green:
 10588                           	callstack 24
 10589   0048A4                     
 10590                           ;MazeRobot.X/color.c: 49:  unsigned int tmp;;MazeRobot.X/color.c: 50:  I2C_2_Master_Star
      +                          t();
 10591   0048A4  EC7A  F026         	call	_I2C_2_Master_Start	;wreg free
 10592                           
 10593                           ;MazeRobot.X/color.c: 51:  I2C_2_Master_Write(0x52 | 0x00);
 10594   0048A8  0E52               	movlw	82
 10595   0048AA  EC6F  F026         	call	_I2C_2_Master_Write
 10596                           
 10597                           ;MazeRobot.X/color.c: 52:  I2C_2_Master_Write(0xA0 | 0x18);
 10598   0048AE  0EB8               	movlw	184
 10599   0048B0  EC6F  F026         	call	_I2C_2_Master_Write
 10600                           
 10601                           ;MazeRobot.X/color.c: 53:  I2C_2_Master_RepStart();
 10602   0048B4  EC7F  F026         	call	_I2C_2_Master_RepStart	;wreg free
 10603                           
 10604                           ;MazeRobot.X/color.c: 54:  I2C_2_Master_Write(0x52 | 0x01);
 10605   0048B8  0E53               	movlw	83
 10606   0048BA  EC6F  F026         	call	_I2C_2_Master_Write
 10607                           
 10608                           ;MazeRobot.X/color.c: 55:  tmp=I2C_2_Master_Read(1);
 10609   0048BE  0E01               	movlw	1
 10610   0048C0  EC34  F025         	call	_I2C_2_Master_Read
 10611   0048C4  6E0B               	movwf	??_color_read_Green^0,c
 10612   0048C6  500B               	movf	??_color_read_Green^0,w,c
 10613   0048C8  6E0E               	movwf	color_read_Green@tmp^0,c
 10614   0048CA  6A0F               	clrf	(color_read_Green@tmp+1)^0,c
 10615                           
 10616                           ;MazeRobot.X/color.c: 56:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10617   0048CC  0E00               	movlw	0
 10618   0048CE  EC34  F025         	call	_I2C_2_Master_Read
 10619   0048D2  6E0B               	movwf	??_color_read_Green^0,c
 10620   0048D4  500B               	movf	??_color_read_Green^0,w,c
 10621   0048D6  6E0D               	movwf	(??_color_read_Green+2)^0,c
 10622   0048D8  6A0C               	clrf	(??_color_read_Green+1)^0,c
 10623   0048DA  500E               	movf	color_read_Green@tmp^0,w,c
 10624   0048DC  100C               	iorwf	(??_color_read_Green+1)^0,w,c
 10625   0048DE  6E0E               	movwf	color_read_Green@tmp^0,c
 10626   0048E0  500F               	movf	(color_read_Green@tmp+1)^0,w,c
 10627   0048E2  100D               	iorwf	(??_color_read_Green+2)^0,w,c
 10628   0048E4  6E0F               	movwf	(color_read_Green@tmp+1)^0,c
 10629                           
 10630                           ;MazeRobot.X/color.c: 57:  I2C_2_Master_Stop();
 10631   0048E6  EC75  F026         	call	_I2C_2_Master_Stop	;wreg free
 10632   0048EA                     
 10633                           ;MazeRobot.X/color.c: 58:  return tmp;
 10634   0048EA  C00E  F009         	movff	color_read_Green@tmp,?_color_read_Green
 10635   0048EE  C00F  F00A         	movff	color_read_Green@tmp+1,?_color_read_Green+1
 10636   0048F2  0012               	return		;funcret
 10637   0048F4                     __end_of_color_read_Green:
 10638                           	callstack 0
 10639                           
 10640 ;; *************** function _color_read_Clear *****************
 10641 ;; Defined at:
 10642 ;;		line 76 in file "MazeRobot.X/color.c"
 10643 ;; Parameters:    Size  Location     Type
 10644 ;;		None
 10645 ;; Auto vars:     Size  Location     Type
 10646 ;;  tmp             2   13[COMRAM] unsigned int 
 10647 ;; Return value:  Size  Location     Type
 10648 ;;                  2    8[COMRAM] unsigned int 
 10649 ;; Registers used:
 10650 ;;		wreg, status,2, status,0, cstack
 10651 ;; Tracked objects:
 10652 ;;		On entry : 0/0
 10653 ;;		On exit  : 0/0
 10654 ;;		Unchanged: 0/0
 10655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10656 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10657 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10658 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10659 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10660 ;;Total ram usage:        7 bytes
 10661 ;; Hardware stack levels used: 1
 10662 ;; Hardware stack levels required when called: 4
 10663 ;; This function calls:
 10664 ;;		_I2C_2_Master_Read
 10665 ;;		_I2C_2_Master_RepStart
 10666 ;;		_I2C_2_Master_Start
 10667 ;;		_I2C_2_Master_Stop
 10668 ;;		_I2C_2_Master_Write
 10669 ;; This function is called by:
 10670 ;;		_getColor
 10671 ;; This function uses a non-reentrant model
 10672 ;;
 10673                           
 10674                           	psect	text47
 10675   0048F4                     __ptext47:
 10676                           	callstack 0
 10677   0048F4                     _color_read_Clear:
 10678                           	callstack 24
 10679   0048F4                     
 10680                           ;MazeRobot.X/color.c: 78:  unsigned int tmp;;MazeRobot.X/color.c: 79:  I2C_2_Master_Star
      +                          t();
 10681   0048F4  EC7A  F026         	call	_I2C_2_Master_Start	;wreg free
 10682                           
 10683                           ;MazeRobot.X/color.c: 80:  I2C_2_Master_Write(0x52 | 0x00);
 10684   0048F8  0E52               	movlw	82
 10685   0048FA  EC6F  F026         	call	_I2C_2_Master_Write
 10686                           
 10687                           ;MazeRobot.X/color.c: 81:  I2C_2_Master_Write(0xA0 | 0x14);
 10688   0048FE  0EB4               	movlw	180
 10689   004900  EC6F  F026         	call	_I2C_2_Master_Write
 10690                           
 10691                           ;MazeRobot.X/color.c: 82:  I2C_2_Master_RepStart();
 10692   004904  EC7F  F026         	call	_I2C_2_Master_RepStart	;wreg free
 10693                           
 10694                           ;MazeRobot.X/color.c: 83:  I2C_2_Master_Write(0x52 | 0x01);
 10695   004908  0E53               	movlw	83
 10696   00490A  EC6F  F026         	call	_I2C_2_Master_Write
 10697                           
 10698                           ;MazeRobot.X/color.c: 84:  tmp=I2C_2_Master_Read(1);
 10699   00490E  0E01               	movlw	1
 10700   004910  EC34  F025         	call	_I2C_2_Master_Read
 10701   004914  6E0B               	movwf	??_color_read_Clear^0,c
 10702   004916  500B               	movf	??_color_read_Clear^0,w,c
 10703   004918  6E0E               	movwf	color_read_Clear@tmp^0,c
 10704   00491A  6A0F               	clrf	(color_read_Clear@tmp+1)^0,c
 10705                           
 10706                           ;MazeRobot.X/color.c: 85:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10707   00491C  0E00               	movlw	0
 10708   00491E  EC34  F025         	call	_I2C_2_Master_Read
 10709   004922  6E0B               	movwf	??_color_read_Clear^0,c
 10710   004924  500B               	movf	??_color_read_Clear^0,w,c
 10711   004926  6E0D               	movwf	(??_color_read_Clear+2)^0,c
 10712   004928  6A0C               	clrf	(??_color_read_Clear+1)^0,c
 10713   00492A  500E               	movf	color_read_Clear@tmp^0,w,c
 10714   00492C  100C               	iorwf	(??_color_read_Clear+1)^0,w,c
 10715   00492E  6E0E               	movwf	color_read_Clear@tmp^0,c
 10716   004930  500F               	movf	(color_read_Clear@tmp+1)^0,w,c
 10717   004932  100D               	iorwf	(??_color_read_Clear+2)^0,w,c
 10718   004934  6E0F               	movwf	(color_read_Clear@tmp+1)^0,c
 10719                           
 10720                           ;MazeRobot.X/color.c: 86:  I2C_2_Master_Stop();
 10721   004936  EC75  F026         	call	_I2C_2_Master_Stop	;wreg free
 10722   00493A                     
 10723                           ;MazeRobot.X/color.c: 87:  return tmp;
 10724   00493A  C00E  F009         	movff	color_read_Clear@tmp,?_color_read_Clear
 10725   00493E  C00F  F00A         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
 10726   004942  0012               	return		;funcret
 10727   004944                     __end_of_color_read_Clear:
 10728                           	callstack 0
 10729                           
 10730 ;; *************** function _color_read_Blue *****************
 10731 ;; Defined at:
 10732 ;;		line 62 in file "MazeRobot.X/color.c"
 10733 ;; Parameters:    Size  Location     Type
 10734 ;;		None
 10735 ;; Auto vars:     Size  Location     Type
 10736 ;;  tmp             2   13[COMRAM] unsigned int 
 10737 ;; Return value:  Size  Location     Type
 10738 ;;                  2    8[COMRAM] unsigned int 
 10739 ;; Registers used:
 10740 ;;		wreg, status,2, status,0, cstack
 10741 ;; Tracked objects:
 10742 ;;		On entry : 0/0
 10743 ;;		On exit  : 0/0
 10744 ;;		Unchanged: 0/0
 10745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10746 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10747 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10748 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10749 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10750 ;;Total ram usage:        7 bytes
 10751 ;; Hardware stack levels used: 1
 10752 ;; Hardware stack levels required when called: 4
 10753 ;; This function calls:
 10754 ;;		_I2C_2_Master_Read
 10755 ;;		_I2C_2_Master_RepStart
 10756 ;;		_I2C_2_Master_Start
 10757 ;;		_I2C_2_Master_Stop
 10758 ;;		_I2C_2_Master_Write
 10759 ;; This function is called by:
 10760 ;;		_getColor
 10761 ;; This function uses a non-reentrant model
 10762 ;;
 10763                           
 10764                           	psect	text48
 10765   004944                     __ptext48:
 10766                           	callstack 0
 10767   004944                     _color_read_Blue:
 10768                           	callstack 24
 10769   004944                     
 10770                           ;MazeRobot.X/color.c: 64:  unsigned int tmp;;MazeRobot.X/color.c: 65:  I2C_2_Master_Star
      +                          t();
 10771   004944  EC7A  F026         	call	_I2C_2_Master_Start	;wreg free
 10772                           
 10773                           ;MazeRobot.X/color.c: 66:  I2C_2_Master_Write(0x52 | 0x00);
 10774   004948  0E52               	movlw	82
 10775   00494A  EC6F  F026         	call	_I2C_2_Master_Write
 10776                           
 10777                           ;MazeRobot.X/color.c: 67:  I2C_2_Master_Write(0xA0 | 0x1A);
 10778   00494E  0EBA               	movlw	186
 10779   004950  EC6F  F026         	call	_I2C_2_Master_Write
 10780                           
 10781                           ;MazeRobot.X/color.c: 68:  I2C_2_Master_RepStart();
 10782   004954  EC7F  F026         	call	_I2C_2_Master_RepStart	;wreg free
 10783                           
 10784                           ;MazeRobot.X/color.c: 69:  I2C_2_Master_Write(0x52 | 0x01);
 10785   004958  0E53               	movlw	83
 10786   00495A  EC6F  F026         	call	_I2C_2_Master_Write
 10787                           
 10788                           ;MazeRobot.X/color.c: 70:  tmp=I2C_2_Master_Read(1);
 10789   00495E  0E01               	movlw	1
 10790   004960  EC34  F025         	call	_I2C_2_Master_Read
 10791   004964  6E0B               	movwf	??_color_read_Blue^0,c
 10792   004966  500B               	movf	??_color_read_Blue^0,w,c
 10793   004968  6E0E               	movwf	color_read_Blue@tmp^0,c
 10794   00496A  6A0F               	clrf	(color_read_Blue@tmp+1)^0,c
 10795                           
 10796                           ;MazeRobot.X/color.c: 71:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10797   00496C  0E00               	movlw	0
 10798   00496E  EC34  F025         	call	_I2C_2_Master_Read
 10799   004972  6E0B               	movwf	??_color_read_Blue^0,c
 10800   004974  500B               	movf	??_color_read_Blue^0,w,c
 10801   004976  6E0D               	movwf	(??_color_read_Blue+2)^0,c
 10802   004978  6A0C               	clrf	(??_color_read_Blue+1)^0,c
 10803   00497A  500E               	movf	color_read_Blue@tmp^0,w,c
 10804   00497C  100C               	iorwf	(??_color_read_Blue+1)^0,w,c
 10805   00497E  6E0E               	movwf	color_read_Blue@tmp^0,c
 10806   004980  500F               	movf	(color_read_Blue@tmp+1)^0,w,c
 10807   004982  100D               	iorwf	(??_color_read_Blue+2)^0,w,c
 10808   004984  6E0F               	movwf	(color_read_Blue@tmp+1)^0,c
 10809                           
 10810                           ;MazeRobot.X/color.c: 72:  I2C_2_Master_Stop();
 10811   004986  EC75  F026         	call	_I2C_2_Master_Stop	;wreg free
 10812   00498A                     
 10813                           ;MazeRobot.X/color.c: 73:  return tmp;
 10814   00498A  C00E  F009         	movff	color_read_Blue@tmp,?_color_read_Blue
 10815   00498E  C00F  F00A         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
 10816   004992  0012               	return		;funcret
 10817   004994                     __end_of_color_read_Blue:
 10818                           	callstack 0
 10819                           
 10820 ;; *************** function _I2C_2_Master_Write *****************
 10821 ;; Defined at:
 10822 ;;		line 45 in file "MazeRobot.X/i2c.c"
 10823 ;; Parameters:    Size  Location     Type
 10824 ;;  data_byte       1    wreg     unsigned char 
 10825 ;; Auto vars:     Size  Location     Type
 10826 ;;  data_byte       1    5[COMRAM] unsigned char 
 10827 ;; Return value:  Size  Location     Type
 10828 ;;                  1    wreg      void 
 10829 ;; Registers used:
 10830 ;;		wreg, status,2, status,0, cstack
 10831 ;; Tracked objects:
 10832 ;;		On entry : 0/0
 10833 ;;		On exit  : 0/0
 10834 ;;		Unchanged: 0/0
 10835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10837 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10839 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10840 ;;Total ram usage:        1 bytes
 10841 ;; Hardware stack levels used: 1
 10842 ;; Hardware stack levels required when called: 3
 10843 ;; This function calls:
 10844 ;;		_I2C_2_Master_Idle
 10845 ;; This function is called by:
 10846 ;;		_color_writetoaddr
 10847 ;;		_color_read_Red
 10848 ;;		_color_read_Green
 10849 ;;		_color_read_Blue
 10850 ;;		_color_read_Clear
 10851 ;; This function uses a non-reentrant model
 10852 ;;
 10853                           
 10854                           	psect	text49
 10855   004CDE                     __ptext49:
 10856                           	callstack 0
 10857   004CDE                     _I2C_2_Master_Write:
 10858                           	callstack 24
 10859                           
 10860                           ;incstack = 0
 10861                           ;I2C_2_Master_Write@data_byte stored from wreg
 10862   004CDE  6E06               	movwf	I2C_2_Master_Write@data_byte^0,c
 10863   004CE0                     
 10864                           ;MazeRobot.X/i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);MazeRobot.X/i2c
      +                          .c: 46: {;MazeRobot.X/i2c.c: 47:   I2C_2_Master_Idle();
 10865   004CE0  EC13  F026         	call	_I2C_2_Master_Idle	;wreg free
 10866   004CE4                     
 10867                           ;MazeRobot.X/i2c.c: 48:   SSP2BUF = data_byte;
 10868   004CE4  C006  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
 10869   004CE8  0012               	return		;funcret
 10870   004CEA                     __end_of_I2C_2_Master_Write:
 10871                           	callstack 0
 10872                           
 10873 ;; *************** function _I2C_2_Master_Stop *****************
 10874 ;; Defined at:
 10875 ;;		line 39 in file "MazeRobot.X/i2c.c"
 10876 ;; Parameters:    Size  Location     Type
 10877 ;;		None
 10878 ;; Auto vars:     Size  Location     Type
 10879 ;;		None
 10880 ;; Return value:  Size  Location     Type
 10881 ;;                  1    wreg      void 
 10882 ;; Registers used:
 10883 ;;		wreg, status,2, status,0, cstack
 10884 ;; Tracked objects:
 10885 ;;		On entry : 0/0
 10886 ;;		On exit  : 0/0
 10887 ;;		Unchanged: 0/0
 10888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10892 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10893 ;;Total ram usage:        0 bytes
 10894 ;; Hardware stack levels used: 1
 10895 ;; Hardware stack levels required when called: 3
 10896 ;; This function calls:
 10897 ;;		_I2C_2_Master_Idle
 10898 ;; This function is called by:
 10899 ;;		_color_writetoaddr
 10900 ;;		_color_read_Red
 10901 ;;		_color_read_Green
 10902 ;;		_color_read_Blue
 10903 ;;		_color_read_Clear
 10904 ;; This function uses a non-reentrant model
 10905 ;;
 10906                           
 10907                           	psect	text50
 10908   004CEA                     __ptext50:
 10909                           	callstack 0
 10910   004CEA                     _I2C_2_Master_Stop:
 10911                           	callstack 24
 10912   004CEA                     
 10913                           ;MazeRobot.X/i2c.c: 41:   I2C_2_Master_Idle();
 10914   004CEA  EC13  F026         	call	_I2C_2_Master_Idle	;wreg free
 10915   004CEE                     
 10916                           ;MazeRobot.X/i2c.c: 42:   SSP2CON2bits.PEN = 1;
 10917   004CEE  010E               	movlb	14	; () banked
 10918   004CF0  85DA               	bsf	218,2,b	;volatile
 10919   004CF2                     
 10920                           ; BSR set to: 14
 10921   004CF2  0012               	return		;funcret
 10922   004CF4                     __end_of_I2C_2_Master_Stop:
 10923                           	callstack 0
 10924                           
 10925 ;; *************** function _I2C_2_Master_Start *****************
 10926 ;; Defined at:
 10927 ;;		line 27 in file "MazeRobot.X/i2c.c"
 10928 ;; Parameters:    Size  Location     Type
 10929 ;;		None
 10930 ;; Auto vars:     Size  Location     Type
 10931 ;;		None
 10932 ;; Return value:  Size  Location     Type
 10933 ;;                  1    wreg      void 
 10934 ;; Registers used:
 10935 ;;		wreg, status,2, status,0, cstack
 10936 ;; Tracked objects:
 10937 ;;		On entry : 0/0
 10938 ;;		On exit  : 0/0
 10939 ;;		Unchanged: 0/0
 10940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10942 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10944 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10945 ;;Total ram usage:        0 bytes
 10946 ;; Hardware stack levels used: 1
 10947 ;; Hardware stack levels required when called: 3
 10948 ;; This function calls:
 10949 ;;		_I2C_2_Master_Idle
 10950 ;; This function is called by:
 10951 ;;		_color_writetoaddr
 10952 ;;		_color_read_Red
 10953 ;;		_color_read_Green
 10954 ;;		_color_read_Blue
 10955 ;;		_color_read_Clear
 10956 ;; This function uses a non-reentrant model
 10957 ;;
 10958                           
 10959                           	psect	text51
 10960   004CF4                     __ptext51:
 10961                           	callstack 0
 10962   004CF4                     _I2C_2_Master_Start:
 10963                           	callstack 24
 10964   004CF4                     
 10965                           ;MazeRobot.X/i2c.c: 29:   I2C_2_Master_Idle();
 10966   004CF4  EC13  F026         	call	_I2C_2_Master_Idle	;wreg free
 10967   004CF8                     
 10968                           ;MazeRobot.X/i2c.c: 30:   SSP2CON2bits.SEN = 1;
 10969   004CF8  010E               	movlb	14	; () banked
 10970   004CFA  81DA               	bsf	218,0,b	;volatile
 10971   004CFC                     
 10972                           ; BSR set to: 14
 10973   004CFC  0012               	return		;funcret
 10974   004CFE                     __end_of_I2C_2_Master_Start:
 10975                           	callstack 0
 10976                           
 10977 ;; *************** function _I2C_2_Master_RepStart *****************
 10978 ;; Defined at:
 10979 ;;		line 33 in file "MazeRobot.X/i2c.c"
 10980 ;; Parameters:    Size  Location     Type
 10981 ;;		None
 10982 ;; Auto vars:     Size  Location     Type
 10983 ;;		None
 10984 ;; Return value:  Size  Location     Type
 10985 ;;                  1    wreg      void 
 10986 ;; Registers used:
 10987 ;;		wreg, status,2, status,0, cstack
 10988 ;; Tracked objects:
 10989 ;;		On entry : 0/0
 10990 ;;		On exit  : 0/0
 10991 ;;		Unchanged: 0/0
 10992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10996 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10997 ;;Total ram usage:        0 bytes
 10998 ;; Hardware stack levels used: 1
 10999 ;; Hardware stack levels required when called: 3
 11000 ;; This function calls:
 11001 ;;		_I2C_2_Master_Idle
 11002 ;; This function is called by:
 11003 ;;		_color_read_Red
 11004 ;;		_color_read_Green
 11005 ;;		_color_read_Blue
 11006 ;;		_color_read_Clear
 11007 ;; This function uses a non-reentrant model
 11008 ;;
 11009                           
 11010                           	psect	text52
 11011   004CFE                     __ptext52:
 11012                           	callstack 0
 11013   004CFE                     _I2C_2_Master_RepStart:
 11014                           	callstack 24
 11015   004CFE                     
 11016                           ;MazeRobot.X/i2c.c: 35:   I2C_2_Master_Idle();
 11017   004CFE  EC13  F026         	call	_I2C_2_Master_Idle	;wreg free
 11018   004D02                     
 11019                           ;MazeRobot.X/i2c.c: 36:   SSP2CON2bits.RSEN = 1;
 11020   004D02  010E               	movlb	14	; () banked
 11021   004D04  83DA               	bsf	218,1,b	;volatile
 11022   004D06                     
 11023                           ; BSR set to: 14
 11024   004D06  0012               	return		;funcret
 11025   004D08                     __end_of_I2C_2_Master_RepStart:
 11026                           	callstack 0
 11027                           
 11028 ;; *************** function _I2C_2_Master_Read *****************
 11029 ;; Defined at:
 11030 ;;		line 51 in file "MazeRobot.X/i2c.c"
 11031 ;; Parameters:    Size  Location     Type
 11032 ;;  ack             1    wreg     unsigned char 
 11033 ;; Auto vars:     Size  Location     Type
 11034 ;;  ack             1    6[COMRAM] unsigned char 
 11035 ;;  tmp             1    7[COMRAM] unsigned char 
 11036 ;; Return value:  Size  Location     Type
 11037 ;;                  1    wreg      unsigned char 
 11038 ;; Registers used:
 11039 ;;		wreg, status,2, status,0, cstack
 11040 ;; Tracked objects:
 11041 ;;		On entry : 0/0
 11042 ;;		On exit  : 0/0
 11043 ;;		Unchanged: 0/0
 11044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11046 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11047 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11048 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11049 ;;Total ram usage:        3 bytes
 11050 ;; Hardware stack levels used: 1
 11051 ;; Hardware stack levels required when called: 3
 11052 ;; This function calls:
 11053 ;;		_I2C_2_Master_Idle
 11054 ;; This function is called by:
 11055 ;;		_color_read_Red
 11056 ;;		_color_read_Green
 11057 ;;		_color_read_Blue
 11058 ;;		_color_read_Clear
 11059 ;; This function uses a non-reentrant model
 11060 ;;
 11061                           
 11062                           	psect	text53
 11063   004A68                     __ptext53:
 11064                           	callstack 0
 11065   004A68                     _I2C_2_Master_Read:
 11066                           	callstack 24
 11067                           
 11068                           ; BSR set to: 14
 11069                           ;incstack = 0
 11070                           ;I2C_2_Master_Read@ack stored from wreg
 11071   004A68  6E07               	movwf	I2C_2_Master_Read@ack^0,c
 11072   004A6A                     
 11073                           ;MazeRobot.X/i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);MazeRobot.X/i
      +                          2c.c: 52: {;MazeRobot.X/i2c.c: 53:   unsigned char tmp;;MazeRobot.X/i2c.c: 54:   I2C_2_M
      +                          aster_Idle();
 11074   004A6A  EC13  F026         	call	_I2C_2_Master_Idle	;wreg free
 11075   004A6E                     
 11076                           ;MazeRobot.X/i2c.c: 55:   SSP2CON2bits.RCEN = 1;
 11077   004A6E  010E               	movlb	14	; () banked
 11078   004A70  87DA               	bsf	218,3,b	;volatile
 11079                           
 11080                           ;MazeRobot.X/i2c.c: 56:   I2C_2_Master_Idle();
 11081   004A72  EC13  F026         	call	_I2C_2_Master_Idle	;wreg free
 11082   004A76                     
 11083                           ;MazeRobot.X/i2c.c: 57:   tmp = SSP2BUF;
 11084   004A76  CED5 F008          	movff	3797,I2C_2_Master_Read@tmp	;volatile
 11085                           
 11086                           ;MazeRobot.X/i2c.c: 58:   I2C_2_Master_Idle();
 11087   004A7A  EC13  F026         	call	_I2C_2_Master_Idle	;wreg free
 11088   004A7E                     
 11089                           ;MazeRobot.X/i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
 11090   004A7E  5007               	movf	I2C_2_Master_Read@ack^0,w,c
 11091   004A80  B4D8               	btfsc	status,2,c
 11092   004A82  EF45  F025         	goto	u2961
 11093   004A86  EF49  F025         	goto	u2960
 11094   004A8A                     u2961:
 11095   004A8A  6A06               	clrf	??_I2C_2_Master_Read^0,c
 11096   004A8C  2A06               	incf	??_I2C_2_Master_Read^0,f,c
 11097   004A8E  EF4A  F025         	goto	u2978
 11098   004A92                     u2960:
 11099   004A92  6A06               	clrf	??_I2C_2_Master_Read^0,c
 11100   004A94                     u2978:
 11101   004A94  3A06               	swapf	??_I2C_2_Master_Read^0,f,c
 11102   004A96  4606               	rlncf	??_I2C_2_Master_Read^0,f,c
 11103   004A98  010E               	movlb	14	; () banked
 11104   004A9A  51DA               	movf	218,w,b	;volatile
 11105   004A9C  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
 11106   004A9E  0BDF               	andlw	-33
 11107   004AA0  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
 11108   004AA2  6FDA               	movwf	218,b	;volatile
 11109   004AA4                     
 11110                           ; BSR set to: 14
 11111                           ;MazeRobot.X/i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
 11112   004AA4  89DA               	bsf	218,4,b	;volatile
 11113   004AA6                     
 11114                           ; BSR set to: 14
 11115                           ;MazeRobot.X/i2c.c: 61:   return tmp;
 11116   004AA6  5008               	movf	I2C_2_Master_Read@tmp^0,w,c
 11117   004AA8                     
 11118                           ; BSR set to: 14
 11119   004AA8  0012               	return		;funcret
 11120   004AAA                     __end_of_I2C_2_Master_Read:
 11121                           	callstack 0
 11122                           
 11123 ;; *************** function _I2C_2_Master_Idle *****************
 11124 ;; Defined at:
 11125 ;;		line 22 in file "MazeRobot.X/i2c.c"
 11126 ;; Parameters:    Size  Location     Type
 11127 ;;		None
 11128 ;; Auto vars:     Size  Location     Type
 11129 ;;		None
 11130 ;; Return value:  Size  Location     Type
 11131 ;;                  1    wreg      void 
 11132 ;; Registers used:
 11133 ;;		wreg, status,2, status,0
 11134 ;; Tracked objects:
 11135 ;;		On entry : 0/0
 11136 ;;		On exit  : 0/0
 11137 ;;		Unchanged: 0/0
 11138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11141 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11142 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11143 ;;Total ram usage:        1 bytes
 11144 ;; Hardware stack levels used: 1
 11145 ;; Hardware stack levels required when called: 2
 11146 ;; This function calls:
 11147 ;;		Nothing
 11148 ;; This function is called by:
 11149 ;;		_I2C_2_Master_Start
 11150 ;;		_I2C_2_Master_RepStart
 11151 ;;		_I2C_2_Master_Stop
 11152 ;;		_I2C_2_Master_Write
 11153 ;;		_I2C_2_Master_Read
 11154 ;; This function uses a non-reentrant model
 11155 ;;
 11156                           
 11157                           	psect	text54
 11158   004C26                     __ptext54:
 11159                           	callstack 0
 11160   004C26                     _I2C_2_Master_Idle:
 11161                           	callstack 24
 11162   004C26                     l300:
 11163   004C26  010E               	movlb	14	; () banked
 11164   004C28  B5D8               	btfsc	216,2,b	;volatile
 11165   004C2A  EF19  F026         	goto	u2841
 11166   004C2E  EF1B  F026         	goto	u2840
 11167   004C32                     u2841:
 11168   004C32  EF13  F026         	goto	l300
 11169   004C36                     u2840:
 11170   004C36                     
 11171                           ; BSR set to: 14
 11172   004C36  CEDA F005          	movff	3802,??_I2C_2_Master_Idle	;volatile
 11173   004C3A  0E1F               	movlw	31
 11174   004C3C  1605               	andwf	??_I2C_2_Master_Idle^0,f,c
 11175   004C3E  A4D8               	btfss	status,2,c
 11176   004C40  EF24  F026         	goto	u2851
 11177   004C44  EF26  F026         	goto	u2850
 11178   004C48                     u2851:
 11179   004C48  EF13  F026         	goto	l300
 11180   004C4C                     u2850:
 11181   004C4C                     
 11182                           ; BSR set to: 14
 11183   004C4C  0012               	return		;funcret
 11184   004C4E                     __end_of_I2C_2_Master_Idle:
 11185                           	callstack 0
 11186                           
 11187 ;; *************** function _DCmotorsInit *****************
 11188 ;; Defined at:
 11189 ;;		line 75 in file "MazeRobot.X/dc_motor.c"
 11190 ;; Parameters:    Size  Location     Type
 11191 ;;  mL              2    4[COMRAM] PTR struct DC_motor
 11192 ;;		 -> main@motorLeft(9), 
 11193 ;;  mR              2    6[COMRAM] PTR struct DC_motor
 11194 ;;		 -> main@motorRight(9), 
 11195 ;; Auto vars:     Size  Location     Type
 11196 ;;		None
 11197 ;; Return value:  Size  Location     Type
 11198 ;;                  1    wreg      void 
 11199 ;; Registers used:
 11200 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11201 ;; Tracked objects:
 11202 ;;		On entry : 0/0
 11203 ;;		On exit  : 0/0
 11204 ;;		Unchanged: 0/0
 11205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11206 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11209 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11210 ;;Total ram usage:        4 bytes
 11211 ;; Hardware stack levels used: 1
 11212 ;; Hardware stack levels required when called: 2
 11213 ;; This function calls:
 11214 ;;		Nothing
 11215 ;; This function is called by:
 11216 ;;		_main
 11217 ;; This function uses a non-reentrant model
 11218 ;;
 11219                           
 11220                           	psect	text55
 11221   00425C                     __ptext55:
 11222                           	callstack 0
 11223   00425C                     _DCmotorsInit:
 11224                           	callstack 28
 11225   00425C                     
 11226                           ;MazeRobot.X/dc_motor.c: 77:     mL->power = 0;
 11227   00425C  C005  FFD9         	movff	DCmotorsInit@mL,fsr2l
 11228   004260  C006  FFDA         	movff	DCmotorsInit@mL+1,fsr2h
 11229   004264  0E00               	movlw	0
 11230   004266  6EDF               	movwf	indf2,c
 11231   004268                     
 11232                           ;MazeRobot.X/dc_motor.c: 78:     mL->direction = 1;
 11233   004268  EE20 F001          	lfsr	2,1
 11234   00426C  5005               	movf	DCmotorsInit@mL^0,w,c
 11235   00426E  26D9               	addwf	fsr2l,f,c
 11236   004270  5006               	movf	(DCmotorsInit@mL+1)^0,w,c
 11237   004272  22DA               	addwfc	fsr2h,f,c
 11238   004274  0E01               	movlw	1
 11239   004276  6EDF               	movwf	indf2,c
 11240   004278                     
 11241                           ;MazeRobot.X/dc_motor.c: 79:     mL->brakemode = 1;
 11242   004278  EE20 F002          	lfsr	2,2
 11243   00427C  5005               	movf	DCmotorsInit@mL^0,w,c
 11244   00427E  26D9               	addwf	fsr2l,f,c
 11245   004280  5006               	movf	(DCmotorsInit@mL+1)^0,w,c
 11246   004282  22DA               	addwfc	fsr2h,f,c
 11247   004284  0E01               	movlw	1
 11248   004286  6EDF               	movwf	indf2,c
 11249   004288                     
 11250                           ;MazeRobot.X/dc_motor.c: 80:     mL->posDutyHighByte = (unsigned char *)(&CCPR1H);
 11251   004288  EE20 F005          	lfsr	2,5
 11252   00428C  5005               	movf	DCmotorsInit@mL^0,w,c
 11253   00428E  26D9               	addwf	fsr2l,f,c
 11254   004290  5006               	movf	(DCmotorsInit@mL+1)^0,w,c
 11255   004292  22DA               	addwfc	fsr2h,f,c
 11256   004294  0EAA               	movlw	170
 11257   004296  6EDE               	movwf	postinc2,c
 11258   004298  0E0F               	movlw	15
 11259   00429A  6EDD               	movwf	postdec2,c
 11260   00429C                     
 11261                           ;MazeRobot.X/dc_motor.c: 81:     mL->negDutyHighByte = (unsigned char *)(&CCPR2H);
 11262   00429C  EE20 F007          	lfsr	2,7
 11263   0042A0  5005               	movf	DCmotorsInit@mL^0,w,c
 11264   0042A2  26D9               	addwf	fsr2l,f,c
 11265   0042A4  5006               	movf	(DCmotorsInit@mL+1)^0,w,c
 11266   0042A6  22DA               	addwfc	fsr2h,f,c
 11267   0042A8  0EA6               	movlw	166
 11268   0042AA  6EDE               	movwf	postinc2,c
 11269   0042AC  0E0F               	movlw	15
 11270   0042AE  6EDD               	movwf	postdec2,c
 11271   0042B0                     
 11272                           ;MazeRobot.X/dc_motor.c: 82:     mL->PWMperiod = 199 ;
 11273   0042B0  EE20 F003          	lfsr	2,3
 11274   0042B4  5005               	movf	DCmotorsInit@mL^0,w,c
 11275   0042B6  26D9               	addwf	fsr2l,f,c
 11276   0042B8  5006               	movf	(DCmotorsInit@mL+1)^0,w,c
 11277   0042BA  22DA               	addwfc	fsr2h,f,c
 11278   0042BC  0EC7               	movlw	199
 11279   0042BE  6EDE               	movwf	postinc2,c
 11280   0042C0  0E00               	movlw	0
 11281   0042C2  6EDD               	movwf	postdec2,c
 11282   0042C4                     
 11283                           ;MazeRobot.X/dc_motor.c: 84:     mR->power = 0;
 11284   0042C4  C007  FFD9         	movff	DCmotorsInit@mR,fsr2l
 11285   0042C8  C008  FFDA         	movff	DCmotorsInit@mR+1,fsr2h
 11286   0042CC  0E00               	movlw	0
 11287   0042CE  6EDF               	movwf	indf2,c
 11288                           
 11289                           ;MazeRobot.X/dc_motor.c: 85:     mR->direction = 1;
 11290   0042D0  EE20 F001          	lfsr	2,1
 11291   0042D4  5007               	movf	DCmotorsInit@mR^0,w,c
 11292   0042D6  26D9               	addwf	fsr2l,f,c
 11293   0042D8  5008               	movf	(DCmotorsInit@mR+1)^0,w,c
 11294   0042DA  22DA               	addwfc	fsr2h,f,c
 11295   0042DC  0E01               	movlw	1
 11296   0042DE  6EDF               	movwf	indf2,c
 11297                           
 11298                           ;MazeRobot.X/dc_motor.c: 86:     mR->brakemode = 1;
 11299   0042E0  EE20 F002          	lfsr	2,2
 11300   0042E4  5007               	movf	DCmotorsInit@mR^0,w,c
 11301   0042E6  26D9               	addwf	fsr2l,f,c
 11302   0042E8  5008               	movf	(DCmotorsInit@mR+1)^0,w,c
 11303   0042EA  22DA               	addwfc	fsr2h,f,c
 11304   0042EC  0E01               	movlw	1
 11305   0042EE  6EDF               	movwf	indf2,c
 11306                           
 11307                           ;MazeRobot.X/dc_motor.c: 87:     mR->posDutyHighByte = (unsigned char *)(&CCPR3H);
 11308   0042F0  EE20 F005          	lfsr	2,5
 11309   0042F4  5007               	movf	DCmotorsInit@mR^0,w,c
 11310   0042F6  26D9               	addwf	fsr2l,f,c
 11311   0042F8  5008               	movf	(DCmotorsInit@mR+1)^0,w,c
 11312   0042FA  22DA               	addwfc	fsr2h,f,c
 11313   0042FC  0E25               	movlw	37
 11314   0042FE  6EDE               	movwf	postinc2,c
 11315   004300  0E0F               	movlw	15
 11316   004302  6EDD               	movwf	postdec2,c
 11317                           
 11318                           ;MazeRobot.X/dc_motor.c: 88:     mR->negDutyHighByte = (unsigned char *)(&CCPR4H);
 11319   004304  EE20 F007          	lfsr	2,7
 11320   004308  5007               	movf	DCmotorsInit@mR^0,w,c
 11321   00430A  26D9               	addwf	fsr2l,f,c
 11322   00430C  5008               	movf	(DCmotorsInit@mR+1)^0,w,c
 11323   00430E  22DA               	addwfc	fsr2h,f,c
 11324   004310  0E21               	movlw	33
 11325   004312  6EDE               	movwf	postinc2,c
 11326   004314  0E0F               	movlw	15
 11327   004316  6EDD               	movwf	postdec2,c
 11328                           
 11329                           ;MazeRobot.X/dc_motor.c: 89:     mR->PWMperiod = 199 ;
 11330   004318  EE20 F003          	lfsr	2,3
 11331   00431C  5007               	movf	DCmotorsInit@mR^0,w,c
 11332   00431E  26D9               	addwf	fsr2l,f,c
 11333   004320  5008               	movf	(DCmotorsInit@mR+1)^0,w,c
 11334   004322  22DA               	addwfc	fsr2h,f,c
 11335   004324  0EC7               	movlw	199
 11336   004326  6EDE               	movwf	postinc2,c
 11337   004328  0E00               	movlw	0
 11338   00432A  6EDD               	movwf	postdec2,c
 11339   00432C  0012               	return		;funcret
 11340   00432E                     __end_of_DCmotorsInit:
 11341                           	callstack 0
 11342                           
 11343 ;; *************** function _HighISR *****************
 11344 ;; Defined at:
 11345 ;;		line 132 in file "serialTest.c"
 11346 ;; Parameters:    Size  Location     Type
 11347 ;;		None
 11348 ;; Auto vars:     Size  Location     Type
 11349 ;;		None
 11350 ;; Return value:  Size  Location     Type
 11351 ;;                  1    wreg      void 
 11352 ;; Registers used:
 11353 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11354 ;; Tracked objects:
 11355 ;;		On entry : 0/0
 11356 ;;		On exit  : 0/0
 11357 ;;		Unchanged: 0/0
 11358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11360 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11361 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11362 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11363 ;;Total ram usage:        2 bytes
 11364 ;; Hardware stack levels used: 1
 11365 ;; Hardware stack levels required when called: 1
 11366 ;; This function calls:
 11367 ;;		_getCharFromTxBuf
 11368 ;;		_putCharToRxBuf
 11369 ;;		i2_isDataInTxBuf
 11370 ;; This function is called by:
 11371 ;;		Interrupt level 2
 11372 ;; This function uses a non-reentrant model
 11373 ;;
 11374                           
 11375                           	psect	intcode
 11376   000008                     __pintcode:
 11377                           	callstack 0
 11378   000008                     _HighISR:
 11379                           	callstack 20
 11380                           
 11381                           ;incstack = 0
 11382   000008  825B               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
 11383   00000A  CFD9 F003          	movff	fsr2l,??_HighISR
 11384   00000E  CFDA F004          	movff	fsr2h,??_HighISR+1
 11385   000012                     
 11386                           ;serialTest.c: 134:     if (PIR4bits.RC4IF){
 11387   000012  010E               	movlb	14	; () banked
 11388   000014  A737               	btfss	55,3,b	;volatile
 11389   000016  EF0F  F000         	goto	i2u499_41
 11390   00001A  EF11  F000         	goto	i2u499_40
 11391   00001E                     i2u499_41:
 11392   00001E  EF14  F000         	goto	i2l4721
 11393   000022                     i2u499_40:
 11394   000022                     
 11395                           ; BSR set to: 14
 11396                           ;serialTest.c: 135:         putCharToRxBuf(RC4REG);
 11397   000022  51E3               	movf	227,w,b	;volatile
 11398   000024  ECFE  F025         	call	_putCharToRxBuf
 11399   000028                     i2l4721:
 11400                           
 11401                           ;serialTest.c: 138:     if (PIR4bits.TX4IF && PIE4bits.TX4IE == 1){
 11402   000028  010E               	movlb	14	; () banked
 11403   00002A  A537               	btfss	55,2,b	;volatile
 11404   00002C  EF1A  F000         	goto	i2u500_41
 11405   000030  EF1C  F000         	goto	i2u500_40
 11406   000034                     i2u500_41:
 11407   000034  EF35  F000         	goto	i2l538
 11408   000038                     i2u500_40:
 11409   000038                     
 11410                           ; BSR set to: 14
 11411   000038  A52D               	btfss	45,2,b	;volatile
 11412   00003A  EF21  F000         	goto	i2u501_41
 11413   00003E  EF23  F000         	goto	i2u501_40
 11414   000042                     i2u501_41:
 11415   000042  EF35  F000         	goto	i2l538
 11416   000046                     i2u501_40:
 11417   000046                     
 11418                           ; BSR set to: 14
 11419                           ;serialTest.c: 139:         if (isDataInTxBuf() == 1){
 11420   000046  EC63  F026         	call	i2_isDataInTxBuf	;wreg free
 11421   00004A  06E8               	decf	wreg,f,c
 11422   00004C  A4D8               	btfss	status,2,c
 11423   00004E  EF2B  F000         	goto	i2u502_41
 11424   000052  EF2D  F000         	goto	i2u502_40
 11425   000056                     i2u502_41:
 11426   000056  EF33  F000         	goto	i2l536
 11427   00005A                     i2u502_40:
 11428   00005A                     
 11429                           ;serialTest.c: 140:            TX4REG = getCharFromTxBuf();
 11430   00005A  ECBE  F025         	call	_getCharFromTxBuf	;wreg free
 11431   00005E  010E               	movlb	14	; () banked
 11432   000060  6FE4               	movwf	228,b	;volatile
 11433                           
 11434                           ;serialTest.c: 141:         }
 11435   000062  EF35  F000         	goto	i2l538
 11436   000066                     i2l536:
 11437                           
 11438                           ;serialTest.c: 143:            PIE4bits.TX4IE = 0;
 11439   000066  010E               	movlb	14	; () banked
 11440   000068  952D               	bcf	45,2,b	;volatile
 11441   00006A                     i2l538:
 11442                           
 11443                           ; BSR set to: 14
 11444   00006A  C004  FFDA         	movff	??_HighISR+1,fsr2h
 11445   00006E  C003  FFD9         	movff	??_HighISR,fsr2l
 11446   000072  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
 11447   000074  0011               	retfie		f
 11448   000076                     __end_of_HighISR:
 11449                           	callstack 0
 11450                           
 11451 ;; *************** function i2_isDataInTxBuf *****************
 11452 ;; Defined at:
 11453 ;;		line 113 in file "serialTest.c"
 11454 ;; Parameters:    Size  Location     Type
 11455 ;;		None
 11456 ;; Auto vars:     Size  Location     Type
 11457 ;;		None
 11458 ;; Return value:  Size  Location     Type
 11459 ;;                  1    wreg      unsigned char 
 11460 ;; Registers used:
 11461 ;;		wreg, status,2, status,0
 11462 ;; Tracked objects:
 11463 ;;		On entry : 0/0
 11464 ;;		On exit  : 0/0
 11465 ;;		Unchanged: 0/0
 11466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11470 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11471 ;;Total ram usage:        0 bytes
 11472 ;; Hardware stack levels used: 1
 11473 ;; This function calls:
 11474 ;;		Nothing
 11475 ;; This function is called by:
 11476 ;;		_HighISR
 11477 ;; This function uses a non-reentrant model
 11478 ;;
 11479                           
 11480                           	psect	text57
 11481   004CC6                     __ptext57:
 11482                           	callstack 0
 11483   004CC6                     i2_isDataInTxBuf:
 11484                           	callstack 20
 11485   004CC6                     
 11486                           ;serialTest.c: 114:     return (TxBufWriteCnt!=TxBufReadCnt);
 11487   004CC6  5057               	movf	_TxBufReadCnt^0,w,c	;volatile
 11488   004CC8  1858               	xorwf	_TxBufWriteCnt^0,w,c	;volatile
 11489   004CCA  A4D8               	btfss	status,2,c
 11490   004CCC  EF6A  F026         	goto	i2u221_41
 11491   004CD0  EF6D  F026         	goto	i2u221_40
 11492   004CD4                     i2u221_41:
 11493   004CD4  0E01               	movlw	1
 11494   004CD6  EF6E  F026         	goto	i2u222_40
 11495   004CDA                     i2u221_40:
 11496   004CDA  0E00               	movlw	0
 11497   004CDC                     i2u222_40:
 11498   004CDC  0012               	return		;funcret
 11499   004CDE                     __end_ofi2_isDataInTxBuf:
 11500                           	callstack 0
 11501                           
 11502 ;; *************** function _putCharToRxBuf *****************
 11503 ;; Defined at:
 11504 ;;		line 85 in file "serialTest.c"
 11505 ;; Parameters:    Size  Location     Type
 11506 ;;  byte            1    wreg     unsigned char 
 11507 ;; Auto vars:     Size  Location     Type
 11508 ;;  byte            1    0[COMRAM] unsigned char 
 11509 ;; Return value:  Size  Location     Type
 11510 ;;                  1    wreg      void 
 11511 ;; Registers used:
 11512 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11513 ;; Tracked objects:
 11514 ;;		On entry : 0/0
 11515 ;;		On exit  : 0/0
 11516 ;;		Unchanged: 0/0
 11517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11519 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11521 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11522 ;;Total ram usage:        1 bytes
 11523 ;; Hardware stack levels used: 1
 11524 ;; This function calls:
 11525 ;;		Nothing
 11526 ;; This function is called by:
 11527 ;;		_HighISR
 11528 ;; This function uses a non-reentrant model
 11529 ;;
 11530                           
 11531                           	psect	text58
 11532   004BFC                     __ptext58:
 11533                           	callstack 0
 11534   004BFC                     _putCharToRxBuf:
 11535                           	callstack 20
 11536                           
 11537                           ;incstack = 0
 11538                           ;putCharToRxBuf@byte stored from wreg
 11539   004BFC  6E01               	movwf	putCharToRxBuf@byte^0,c
 11540   004BFE                     
 11541                           ;serialTest.c: 86:     if (RxBufWriteCnt>=20) {RxBufWriteCnt=0;}
 11542   004BFE  0E13               	movlw	19
 11543   004C00  645A               	cpfsgt	_RxBufWriteCnt^0,c	;volatile
 11544   004C02  EF05  F026         	goto	i2u474_41
 11545   004C06  EF07  F026         	goto	i2u474_40
 11546   004C0A                     i2u474_41:
 11547   004C0A  EF09  F026         	goto	i2l4531
 11548   004C0E                     i2u474_40:
 11549   004C0E  0E00               	movlw	0
 11550   004C10  6E5A               	movwf	_RxBufWriteCnt^0,c	;volatile
 11551   004C12                     i2l4531:
 11552                           
 11553                           ;serialTest.c: 87:     EUSART4RXbuf[RxBufWriteCnt++]=byte;
 11554   004C12  0ED0               	movlw	low _EUSART4RXbuf
 11555   004C14  245A               	addwf	_RxBufWriteCnt^0,w,c	;volatile
 11556   004C16  6ED9               	movwf	fsr2l,c
 11557   004C18  6ADA               	clrf	fsr2h,c
 11558   004C1A  0E00               	movlw	high _EUSART4RXbuf
 11559   004C1C  22DA               	addwfc	fsr2h,f,c
 11560   004C1E  C001  FFDF         	movff	putCharToRxBuf@byte,indf2
 11561   004C22  2A5A               	incf	_RxBufWriteCnt^0,f,c	;volatile
 11562   004C24  0012               	return		;funcret
 11563   004C26                     __end_of_putCharToRxBuf:
 11564                           	callstack 0
 11565                           
 11566 ;; *************** function _getCharFromTxBuf *****************
 11567 ;; Defined at:
 11568 ;;		line 99 in file "serialTest.c"
 11569 ;; Parameters:    Size  Location     Type
 11570 ;;		None
 11571 ;; Auto vars:     Size  Location     Type
 11572 ;;		None
 11573 ;; Return value:  Size  Location     Type
 11574 ;;                  1    wreg      unsigned char 
 11575 ;; Registers used:
 11576 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11577 ;; Tracked objects:
 11578 ;;		On entry : 0/0
 11579 ;;		On exit  : 0/0
 11580 ;;		Unchanged: 0/0
 11581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11583 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11584 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11585 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11586 ;;Total ram usage:        2 bytes
 11587 ;; Hardware stack levels used: 1
 11588 ;; This function calls:
 11589 ;;		Nothing
 11590 ;; This function is called by:
 11591 ;;		_HighISR
 11592 ;; This function uses a non-reentrant model
 11593 ;;
 11594                           
 11595                           	psect	text59
 11596   004B7C                     __ptext59:
 11597                           	callstack 0
 11598   004B7C                     _getCharFromTxBuf:
 11599                           	callstack 20
 11600   004B7C                     
 11601                           ;serialTest.c: 100:     if (TxBufReadCnt>=60) {TxBufReadCnt=0;}
 11602   004B7C  0E3B               	movlw	59
 11603   004B7E  6457               	cpfsgt	_TxBufReadCnt^0,c	;volatile
 11604   004B80  EFC4  F025         	goto	i2u475_41
 11605   004B84  EFC6  F025         	goto	i2u475_40
 11606   004B88                     i2u475_41:
 11607   004B88  EFC8  F025         	goto	i2l4539
 11608   004B8C                     i2u475_40:
 11609   004B8C  0E00               	movlw	0
 11610   004B8E  6E57               	movwf	_TxBufReadCnt^0,c	;volatile
 11611   004B90                     i2l4539:
 11612                           
 11613                           ;serialTest.c: 101:     return EUSART4TXbuf[TxBufReadCnt++];
 11614   004B90  2A57               	incf	_TxBufReadCnt^0,f,c	;volatile
 11615   004B92  0457               	decf	_TxBufReadCnt^0,w,c	;volatile
 11616   004B94  6E01               	movwf	??_getCharFromTxBuf^0,c
 11617   004B96  6A02               	clrf	(??_getCharFromTxBuf+1)^0,c
 11618   004B98  0E9A               	movlw	low _EUSART4TXbuf
 11619   004B9A  2401               	addwf	??_getCharFromTxBuf^0,w,c
 11620   004B9C  6ED9               	movwf	fsr2l,c
 11621   004B9E  0E01               	movlw	high _EUSART4TXbuf
 11622   004BA0  2002               	addwfc	(??_getCharFromTxBuf+1)^0,w,c
 11623   004BA2  6EDA               	movwf	fsr2h,c
 11624   004BA4  50DF               	movf	indf2,w,c
 11625   004BA6  0012               	return		;funcret
 11626   004BA8                     __end_of_getCharFromTxBuf:
 11627                           	callstack 0
 11628                           
 11629                           	psect	rparam
 11630   000000                     
 11631                           	psect	temp
 11632   00005B                     btemp:
 11633                           	callstack 0
 11634   00005B                     	ds	1
 11635   000000                     int$flags	set	btemp
 11636   000000                     wtemp8	set	btemp+1
 11637   000000                     ttemp5	set	btemp+1
 11638   000000                     ttemp6	set	btemp+4
 11639   000000                     ttemp7	set	btemp+8
 11640                           
 11641                           	psect	idloc
 11642                           
 11643                           ;Config register IDLOC0 @ 0x200000
 11644                           ;	unspecified, using default values
 11645   200000                     	org	2097152
 11646   200000  0FFF               	dw	4095
 11647                           
 11648                           ;Config register IDLOC1 @ 0x200002
 11649                           ;	unspecified, using default values
 11650   200002                     	org	2097154
 11651   200002  0FFF               	dw	4095
 11652                           
 11653                           ;Config register IDLOC2 @ 0x200004
 11654                           ;	unspecified, using default values
 11655   200004                     	org	2097156
 11656   200004  0FFF               	dw	4095
 11657                           
 11658                           ;Config register IDLOC3 @ 0x200006
 11659                           ;	unspecified, using default values
 11660   200006                     	org	2097158
 11661   200006  0FFF               	dw	4095
 11662                           
 11663                           ;Config register IDLOC4 @ 0x200008
 11664                           ;	unspecified, using default values
 11665   200008                     	org	2097160
 11666   200008  0FFF               	dw	4095
 11667                           
 11668                           ;Config register IDLOC5 @ 0x20000A
 11669                           ;	unspecified, using default values
 11670   20000A                     	org	2097162
 11671   20000A  0FFF               	dw	4095
 11672                           
 11673                           ;Config register IDLOC6 @ 0x20000C
 11674                           ;	unspecified, using default values
 11675   20000C                     	org	2097164
 11676   20000C  0FFF               	dw	4095
 11677                           
 11678                           ;Config register IDLOC7 @ 0x20000E
 11679                           ;	unspecified, using default values
 11680   20000E                     	org	2097166
 11681   20000E  0FFF               	dw	4095
 11682                           
 11683                           	psect	config
 11684                           
 11685                           ;Config register CONFIG1L @ 0x300000
 11686                           ;	External Oscillator mode Selection bits
 11687                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
 11688                           ;	Power-up default value for COSC bits
 11689                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
 11690   300000                     	org	3145728
 11691   300000  AA                 	db	170
 11692                           
 11693                           ;Config register CONFIG1H @ 0x300001
 11694                           ;	unspecified, using default values
 11695                           ;	Clock Out Enable bit
 11696                           ;	CLKOUTEN = 0x1, unprogrammed default
 11697                           ;	Clock Switch Enable bit
 11698                           ;	CSWEN = 0x1, unprogrammed default
 11699                           ;	Fail-Safe Clock Monitor Enable bit
 11700                           ;	FCMEN = 0x1, unprogrammed default
 11701   300001                     	org	3145729
 11702   300001  FF                 	db	255
 11703                           
 11704                           ;Config register CONFIG2L @ 0x300002
 11705                           ;	unspecified, using default values
 11706                           ;	Master Clear Enable bit
 11707                           ;	MCLRE = 0x1, unprogrammed default
 11708                           ;	Power-up Timer Enable bit
 11709                           ;	PWRTE = 0x1, unprogrammed default
 11710                           ;	Low-power BOR enable bit
 11711                           ;	LPBOREN = 0x1, unprogrammed default
 11712                           ;	Brown-out Reset Enable bits
 11713                           ;	BOREN = 0x3, unprogrammed default
 11714   300002                     	org	3145730
 11715   300002  FF                 	db	255
 11716                           
 11717                           ;Config register CONFIG2H @ 0x300003
 11718                           ;	unspecified, using default values
 11719                           ;	Brown Out Reset Voltage selection bits
 11720                           ;	BORV = 0x3, unprogrammed default
 11721                           ;	ZCD Disable bit
 11722                           ;	ZCD = 0x1, unprogrammed default
 11723                           ;	PPSLOCK bit One-Way Set Enable bit
 11724                           ;	PPS1WAY = 0x1, unprogrammed default
 11725                           ;	Stack Full/Underflow Reset Enable bit
 11726                           ;	STVREN = 0x1, unprogrammed default
 11727                           ;	Debugger Enable bit
 11728                           ;	DEBUG = 0x1, unprogrammed default
 11729                           ;	Extended Instruction Set Enable bit
 11730                           ;	XINST = 0x1, unprogrammed default
 11731   300003                     	org	3145731
 11732   300003  FF                 	db	255
 11733                           
 11734                           ;Config register CONFIG3L @ 0x300004
 11735                           ;	WDT Period Select bits
 11736                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
 11737                           ;	WDT operating mode
 11738                           ;	WDTE = OFF, WDT Disabled
 11739   300004                     	org	3145732
 11740   300004  9F                 	db	159
 11741                           
 11742                           ;Config register CONFIG3H @ 0x300005
 11743                           ;	unspecified, using default values
 11744                           ;	WDT Window Select bits
 11745                           ;	WDTCWS = 0x7, unprogrammed default
 11746                           ;	WDT input clock selector
 11747                           ;	WDTCCS = 0x7, unprogrammed default
 11748   300005                     	org	3145733
 11749   300005  FF                 	db	255
 11750                           
 11751                           ;Config register CONFIG4L @ 0x300006
 11752                           ;	unspecified, using default values
 11753                           ;	Write Protection Block 0
 11754                           ;	WRT0 = 0x1, unprogrammed default
 11755                           ;	Write Protection Block 1
 11756                           ;	WRT1 = 0x1, unprogrammed default
 11757                           ;	Write Protection Block 2
 11758                           ;	WRT2 = 0x1, unprogrammed default
 11759                           ;	Write Protection Block 3
 11760                           ;	WRT3 = 0x1, unprogrammed default
 11761                           ;	Write Protection Block 3
 11762                           ;	WRT4 = 0x1, unprogrammed default
 11763                           ;	Write Protection Block 3
 11764                           ;	WRT5 = 0x1, unprogrammed default
 11765                           ;	Write Protection Block 3
 11766                           ;	WRT6 = 0x1, unprogrammed default
 11767                           ;	Write Protection Block 3
 11768                           ;	WRT7 = 0x1, unprogrammed default
 11769   300006                     	org	3145734
 11770   300006  FF                 	db	255
 11771                           
 11772                           ;Config register CONFIG4H @ 0x300007
 11773                           ;	unspecified, using default values
 11774                           ;	Configuration Register Write Protection bit
 11775                           ;	WRTC = 0x1, unprogrammed default
 11776                           ;	Boot Block Write Protection bit
 11777                           ;	WRTB = 0x1, unprogrammed default
 11778                           ;	Data EEPROM Write Protection bit
 11779                           ;	WRTD = 0x1, unprogrammed default
 11780                           ;	Scanner Enable bit
 11781                           ;	SCANE = 0x1, unprogrammed default
 11782                           ;	Low Voltage Programming Enable bit
 11783                           ;	LVP = 0x1, unprogrammed default
 11784   300007                     	org	3145735
 11785   300007  FF                 	db	255
 11786                           
 11787                           ;Config register CONFIG5L @ 0x300008
 11788                           ;	unspecified, using default values
 11789                           ;	UserNVM Program Memory Code Protection bit
 11790                           ;	CP = 0x1, unprogrammed default
 11791                           ;	DataNVM Memory Code Protection bit
 11792                           ;	CPD = 0x1, unprogrammed default
 11793   300008                     	org	3145736
 11794   300008  FF                 	db	255
 11795                           
 11796                           ;Config register CONFIG5H @ 0x300009
 11797                           ;	unspecified, using default values
 11798   300009                     	org	3145737
 11799   300009  FF                 	db	255
 11800                           
 11801                           ;Config register CONFIG6L @ 0x30000A
 11802                           ;	unspecified, using default values
 11803                           ;	Table Read Protection Block 0
 11804                           ;	EBTR0 = 0x1, unprogrammed default
 11805                           ;	Table Read Protection Block 1
 11806                           ;	EBTR1 = 0x1, unprogrammed default
 11807                           ;	Table Read Protection Block 2
 11808                           ;	EBTR2 = 0x1, unprogrammed default
 11809                           ;	Table Read Protection Block 3
 11810                           ;	EBTR3 = 0x1, unprogrammed default
 11811                           ;	Table Read Protection Block 4
 11812                           ;	EBTR4 = 0x1, unprogrammed default
 11813                           ;	Table Read Protection Block 5
 11814                           ;	EBTR5 = 0x1, unprogrammed default
 11815                           ;	Table Read Protection Block 6
 11816                           ;	EBTR6 = 0x1, unprogrammed default
 11817                           ;	Table Read Protection Block 7
 11818                           ;	EBTR7 = 0x1, unprogrammed default
 11819   30000A                     	org	3145738
 11820   30000A  FF                 	db	255
 11821                           
 11822                           ;Config register CONFIG6H @ 0x30000B
 11823                           ;	unspecified, using default values
 11824                           ;	Boot Block Table Read Protection bit
 11825                           ;	EBTRB = 0x1, unprogrammed default
 11826   30000B                     	org	3145739
 11827   30000B  FF                 	db	255
 11828                           tosu	equ	0xFFF
 11829                           tosh	equ	0xFFE
 11830                           tosl	equ	0xFFD
 11831                           stkptr	equ	0xFFC
 11832                           pclatu	equ	0xFFB
 11833                           pclath	equ	0xFFA
 11834                           pcl	equ	0xFF9
 11835                           tblptru	equ	0xFF8
 11836                           tblptrh	equ	0xFF7
 11837                           tblptrl	equ	0xFF6
 11838                           tablat	equ	0xFF5
 11839                           prodh	equ	0xFF4
 11840                           prodl	equ	0xFF3
 11841                           indf0	equ	0xFEF
 11842                           postinc0	equ	0xFEE
 11843                           postdec0	equ	0xFED
 11844                           preinc0	equ	0xFEC
 11845                           plusw0	equ	0xFEB
 11846                           fsr0h	equ	0xFEA
 11847                           fsr0l	equ	0xFE9
 11848                           wreg	equ	0xFE8
 11849                           indf1	equ	0xFE7
 11850                           postinc1	equ	0xFE6
 11851                           postdec1	equ	0xFE5
 11852                           preinc1	equ	0xFE4
 11853                           plusw1	equ	0xFE3
 11854                           fsr1h	equ	0xFE2
 11855                           fsr1l	equ	0xFE1
 11856                           bsr	equ	0xFE0
 11857                           indf2	equ	0xFDF
 11858                           postinc2	equ	0xFDE
 11859                           postdec2	equ	0xFDD
 11860                           preinc2	equ	0xFDC
 11861                           plusw2	equ	0xFDB
 11862                           fsr2h	equ	0xFDA
 11863                           fsr2l	equ	0xFD9
 11864                           status	equ	0xFD8

Data Sizes:
    Strings     37
    Constant    0
    Data        4
    BSS         125
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     86      90
    BANK0           160    112     145
    BANK1           256    154     246
    BANK2           256    200     200
    BANK3           256    200     200
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_2(CODE[15]), STR_1(CODE[22]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 22
		 -> STR_2(CODE[15]), STR_1(CODE[22]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 22
		 -> STR_2(CODE[15]), STR_1(CODE[22]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    S2644$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_2(CODE[15]), STR_1(CODE[22]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 150
		 -> ADC2String@buf(COMRAM[40]), return_home_turns@string1(BANK1[150]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2591$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2591$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    TxBufferedString@string	PTR unsigned char  size(2) Largest target is 150
		 -> return_home_turns@string1(BANK1[150]), 

    motorRight.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    motorRight.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    motorLeft.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    motorLeft.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    reverseSquareLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK0[9]), 

    reverseSquareLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK0[9]), 

    reverseSquareRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK0[9]), 

    reverseSquareRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK0[9]), 

    turnLeft_135@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft_135@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft_135@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft_135@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft_135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK0[9]), 

    turnLeft_135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK0[9]), 

    turnRight_135@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight_135@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight_135@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight_135@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight_135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK0[9]), 

    turnRight_135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK0[9]), 

    turn_180@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turn_180@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turn_180@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turn_180@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turn_180@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK0[9]), 

    turn_180@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK0[9]), 

    turnRight_90@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight_90@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight_90@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight_90@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight_90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK0[9]), 

    turnRight_90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK0[9]), 

    turnLeft_90@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft_90@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft_90@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft_90@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft_90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK0[9]), 

    turnLeft_90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK0[9]), 

    reverse@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    reverse@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    reverse@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK0[9]), 

    reverse@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    reverse@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    reverse@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK0[9]), 

    forward@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    forward@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    forward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK0[9]), 

    forward@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    forward@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    forward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK0[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK0[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK0[9]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK0[9]), main@motorLeft(BANK0[9]), 

    DCmotorsInit@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK0[9]), 

    S107DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    S107DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK0[9]), 

    return_home_turns@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK0[9]), 

    return_home_turns@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK0[9]), 

    return_home_turns@turn_history	PTR unsigned int  size(2) Largest target is 200
		 -> main@turn_history(BANK2[200]), 

    return_home_turns@counter_history	PTR unsigned int  size(2) Largest target is 200
		 -> main@counter_history(BANK3[200]), 

    colorDetect@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK0[9]), 

    colorDetect@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK0[9]), 

    colorDetect@whiteRGBVal	PTR struct RGB size(2) Largest target is 8
		 -> main@whiteRGBVal(BANK0[8]), 

    colorDetect@ambientRGBVal	PTR struct RGB size(2) Largest target is 8
		 -> main@ambientRGBVal(BANK0[8]), 

    whiteCal@v	PTR struct RGB size(2) Largest target is 8
		 -> main@whiteRGBVal(BANK0[8]), 

    ambientCal@v	PTR struct RGB size(2) Largest target is 8
		 -> main@ambientRGBVal(BANK0[8]), 

    getColor@v	PTR struct RGB size(2) Largest target is 8
		 -> main@whiteRGBVal(BANK0[8]), main@RGBVal(BANK0[8]), main@ambientRGBVal(BANK0[8]), colorDetect@RGBVal(BANK0[8]), 


Critical Paths under _main in COMRAM

    _whiteCal->_getColor
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _forward->_setMotorPWM
    _TxBufferedString->_putCharToTxBuf
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _colorDetect->___fldiv
    _turn_180->_stop
    _turnRight_135->_stop
    _turnLeft_135->_stop
    _reverseSquareRight->_turnRight_90
    _turnRight_90->_stop
    _reverseSquareLeft->_turnLeft_90
    _turnLeft_90->_stop
    _stop->_setMotorPWM
    _reverse->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    ___flsub->___fladd
    ___flmul->___flsub
    ___flge->___flsub
    ___fldiv->___flmul
    _ambientCal->_getColor
    _getColor->_color_read_Blue
    _getColor->_color_read_Clear
    _getColor->_color_read_Green
    _getColor->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle

Critical Paths under _HighISR in COMRAM

    _HighISR->_getCharFromTxBuf

Critical Paths under _main in BANK0

    _main->_colorDetect
    _return_home_turns->_sprintf
    _sprintf->_vfprintf

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_return_home_turns

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               460   460      0  247224
                                             52 BANK0     60    60      0
                                              0 BANK2    200   200      0
                                              0 BANK3    200   200      0
                       _DCmotorsInit
                            ___fldiv
                             ___flge
                           ___xxtofl
                         _ambientCal
                        _colorDetect
                   _color_click_init
                            _forward
                           _getColor
                    _initDCmotorsPWM
                         _initUSART4
                  _return_home_turns
                               _stop
                           _turn_180
                           _whiteCal
 ---------------------------------------------------------------------------------
 (1) _whiteCal                                             6     4      2     988
                                             17 COMRAM     6     4      2
                           _getColor
 ---------------------------------------------------------------------------------
 (1) _return_home_turns                                  168   158     10   81797
                                             31 BANK0     14     4     10
                                              0 BANK1    154   154      0
                   _TxBufferedString
                            _forward
                          _sendTxBuf
                            _sprintf
                               _stop
                       _turnLeft_135
                        _turnLeft_90
                      _turnRight_135
                       _turnRight_90
                           _turn_180
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             27    15     12    7496
                                              6 BANK0     25    13     12
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             8     2      6    6830
                                             84 COMRAM     2     2      0
                                              0 BANK0      6     0      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           23    17      6    6369
                                             66 COMRAM    18    12      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                35    25     10    4802
                                             31 COMRAM    35    25     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                 11     5      6    2533
                                             20 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (7) _fputs                                                7     3      4    1177
                                             13 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                9     5      4     857
                                              4 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     183
                                             22 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___aomod                                             18     2     16     613
                                              4 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (6) ___aodiv                                             26    10     16     625
                                              4 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (2) _sendTxBuf                                            0     0      0       0
                      _isDataInTxBuf
 ---------------------------------------------------------------------------------
 (3) _isDataInTxBuf                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _forward                                              5     1      4    2853
                                             23 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _TxBufferedString                                     2     0      2     143
                                              5 COMRAM     2     0      2
                     _putCharToTxBuf
 ---------------------------------------------------------------------------------
 (3) _putCharToTxBuf                                       1     1      0      22
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      76
                                              4 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              8 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              6 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _colorDetect                                         58    46     12  129728
                                             78 COMRAM     2     2      0
                                              0 BANK0     52    40     12
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                           ___xxtofl
                           _getColor
                  _reverseSquareLeft
                 _reverseSquareRight
                       _turnLeft_135
                        _turnLeft_90
                      _turnRight_135
                       _turnRight_90
                           _turn_180
 ---------------------------------------------------------------------------------
 (1) _turn_180                                             6     2      4   12710
                                             29 COMRAM     6     2      4
                            _reverse
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _turnRight_135                                        6     2      4   12558
                                             29 COMRAM     6     2      4
                            _reverse
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _turnLeft_135                                         6     2      4   12558
                                             29 COMRAM     6     2      4
                            _reverse
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _reverseSquareRight                                   6     2      4   22801
                                             35 COMRAM     6     2      4
                            _reverse
                               _stop
                       _turnRight_90
 ---------------------------------------------------------------------------------
 (2) _turnRight_90                                         6     2      4   12859
                                             29 COMRAM     6     2      4
                            _reverse
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _reverseSquareLeft                                    6     2      4   22801
                                             35 COMRAM     6     2      4
                            _reverse
                               _stop
                        _turnLeft_90
 ---------------------------------------------------------------------------------
 (2) _turnLeft_90                                          6     2      4   12859
                                             29 COMRAM     6     2      4
                            _reverse
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _stop                                                 6     2      4    5653
                                             23 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _reverse                                              5     1      4    3917
                                             23 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          6     4      2    2285
                                             17 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     355
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     358
                                             10 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4    2078
                                              4 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    3801
                                             20 COMRAM     8     0      8
                            ___fladd
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             16     8      8    2262
                                              4 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             25    17      8    4360
                                             28 COMRAM    25    17      8
                            ___flsub (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8    4742
                                             28 COMRAM    12     4      8
                            ___flsub (ARG)
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             25    17      8    1855
                                             53 COMRAM    25    17      8
                            ___flmul (ARG)
                            ___flsub (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _ambientCal                                           6     4      2    1064
                                             17 COMRAM     6     4      2
                           _getColor
 ---------------------------------------------------------------------------------
 (2) _getColor                                             2     0      2     844
                                             15 COMRAM     2     0      2
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (3) _color_read_Red                                       7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Green                                     7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Clear                                     7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Blue                                      7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Write                                   1     1      0      22
                                              5 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Read                                    3     3      0      45
                                              5 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Idle                                    1     1      0       0
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DCmotorsInit                                         4     0      4     416
                                              4 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _HighISR                                             2     2      0      22
                                              2 COMRAM     2     2      0
                   _getCharFromTxBuf
                     _putCharToRxBuf
                    i2_isDataInTxBuf
 ---------------------------------------------------------------------------------
 (11) i2_isDataInTxBuf                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _putCharToRxBuf                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (11) _getCharFromTxBuf                                    2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DCmotorsInit
   ___fldiv
     ___flmul (ARG)
       ___flsub (ARG)
         ___fladd
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___flsub (ARG)
     ___xxtofl (ARG)
   ___flge
     ___flsub (ARG)
   ___xxtofl
   _ambientCal
     _getColor
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_read_Clear
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
   _colorDetect
     ___fldiv
     ___flge
     ___flmul
     ___flsub
     ___xxtofl
     _getColor
     _reverseSquareLeft
       _reverse
         _setMotorPWM
           ___lwdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
       _turnLeft_90
         _reverse
         _setMotorPWM
         _stop
     _reverseSquareRight
       _reverse
       _stop
       _turnRight_90
         _reverse
         _setMotorPWM
         _stop
     _turnLeft_135
       _reverse
       _setMotorPWM
       _stop
     _turnLeft_90
     _turnRight_135
       _reverse
       _setMotorPWM
       _stop
     _turnRight_90
     _turn_180
       _reverse
       _setMotorPWM
       _stop
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _forward
     _setMotorPWM
   _getColor
   _initDCmotorsPWM
   _initUSART4
   _return_home_turns
     _TxBufferedString
       _putCharToTxBuf
     _forward
     _sendTxBuf
       _isDataInTxBuf
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
           _fputc
     _stop
     _turnLeft_135
     _turnLeft_90
     _turnRight_135
     _turnRight_90
     _turn_180
   _stop
   _turn_180
   _whiteCal
     _getColor

 _HighISR (ROOT)
   _getCharFromTxBuf
   _putCharToRxBuf
   i2_isDataInTxBuf

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      62        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100     C8      C8      11       78.1%
BITBANK2           100      0       0       8        0.0%
BANK2              100     C8      C8       9       78.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100     9A      F6       7       96.1%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     70      91       5       90.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     56      5A       1       95.7%
BITBIGSFRlhhhhl     52      0       0      42        0.0%
BITBIGSFRlhhhll     37      0       0      44        0.0%
BITBIGSFRlllhlh     2A      0       0      55        0.0%
BITBIGSFRlllll      26      0       0      60        0.0%
BITBIGSFRlhhhll     20      0       0      47        0.0%
BITBIGSFRlhhhll     1E      0       0      49        0.0%
BITBIGSFRhhhhhh     1B      0       0      33        0.0%
BITBIGSFRhhhhll     17      0       0      38        0.0%
BITBIGSFRhhhhhl     13      0       0      34        0.0%
BITBIGSFRlhhl       11      0       0      50        0.0%
BITBIGSFRhhhhlh      E      0       0      35        0.0%
BITBIGSFRhhhhhh      D      0       0      32        0.0%
BITBIGSFRlhhhll      C      0       0      48        0.0%
BITBIGSFRlllhll      9      0       0      57        0.0%
BITBIGSFRlllhlh      9      0       0      56        0.0%
BITBIGSFRlhhhll      8      0       0      45        0.0%
BITBIGSFRllllh       6      0       0      59        0.0%
BITBIGSFRlllhh       6      0       0      54        0.0%
BITBIGSFRlllhll      5      0       0      58        0.0%
BITBIGSFRllhl        5      0       0      53        0.0%
BITBIGSFRhhhhll      5      0       0      39        0.0%
BITBIGSFRllhh        3      0       0      52        0.0%
BITBIGSFRlhhhlh      2      0       0      43        0.0%
BITBIGSFRhhhhll      2      0       0      37        0.0%
BITBIGSFRlhhhhh      1      0       0      41        0.0%
BITBIGSFRlhhhll      1      0       0      46        0.0%
BITBIGSFRhhhhlh      1      0       0      36        0.0%
BITBIGSFRlhl         1      0       0      51        0.0%
BITBIGSFRhhll        1      0       0      40        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     371      61        0.0%
DATA                 0      0     371       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Thu Dec 15 09:29:45 2022

                  _color_read_Red 4854                      ___fldiv@aexp 004E  
                    ___fldiv@bexp 004D                      ___fldiv@sign 0046  
                 _color_read_Blue 4944                                l61 4B1C  
                              l70 48F2                                l64 4C92  
                              l73 4992                                l67 48A2  
                              l76 4942                                l84 40AE  
                              l79 47AC                                l89 3FCA  
             ___wmul@multiplicand 0007        __end_of_reverseSquareRight 453C  
                _color_read_Clear 48F4                  _color_read_Green 48A4  
                             l110 19F2                               l131 2CF0  
                             l300 4C26                               l204 34EE  
                             l116 19FA                               l214 44A4  
                             l303 4C4C                               l135 2DC8  
                             l312 4CF2                               l240 3B6A  
                             l224 4184                               l306 4CFC  
                             l234 425A                               l315 4CE8  
                             l252 38EE                               l309 4D06  
                             l318 4AA8                               l270 45D0  
                             l246 3A2C                               l264 3DE2  
                             l258 3CA6                               l194 4660  
                             l267 453A                               l516 4BD0  
                             l197 432C                               l541 4C72  
                             l525 4B4C                               l519 4CC4  
                             l297 4BFA                               l529 4CAC  
                             l811 3EE6                               l476 4B7A  
                             l806 3EA0                               l655 3382  
                             l668 3652                               _abs 4AAA  
                             _pad 4662                               wreg 000FE8  
                    ___flmul@aexp 002E                      ___flmul@bexp 002F  
                    ___flmul@sign 0029                      ___flmul@temp 0034  
                    ___flmul@prod 0030              reverseSquareRight@mL 0024  
            reverseSquareRight@mR 0026                              l1111 4A22  
                            l1032 4746                              l1210 3192  
                            l1123 2AF0                              l1203 3136  
                            ?_abs 0017                              l1125 2950  
                            l1134 2996                              l1070 1BD8  
                            l1071 1B9E                              l1039 474E  
                            l1136 2A0E                              l1128 2914  
                            l1304 4A66                              l1137 29FC  
                            l1241 4684                              l1162 25E8  
                            l1250 2E56                              l1155 23F2  
                            l1307 4D0C                              l1219 4852  
                            l1172 2718                              l1164 2660  
                            l1252 2E5E                              l1165 264E  
                            l1069 1BEA                              l1245 46DA  
                            l1253 2EA4                              l1086 1D04  
                            l1078 1EBA                              l1159 2756  
                            l1095 1DD4                              l1271 37B0  
                            l1096 1DC2                              l1264 3046  
                            l4001 2348                              l1281 4AE0  
                            l4011 2380                              l4003 234A  
                            l1196 309E                              l1284 4AE8  
                            l3301 4CFE                              l4101 268A  
                            l4021 23AC                              l4013 2390  
                            l4005 235A                              l3221 33F4  
                            l1277 4800                              l3311 4A7E  
                            l3303 4D02                              l4111 2700  
                            l4103 26B4                              l4031 2402  
                            l4023 23BC                              l4015 2396  
                            l4007 236A                              l1199 31FA  
                            l3231 34AE                              l3223 3408  
                            l1296 43F6                              l3233 4C26  
                            l3313 4AA4                              l3305 4A6A  
                            l4113 271C                              l4121 2742  
                            l4105 26B8                              l4041 243C  
                            l4033 2412                              l4025 23CC  
                            l4017 239C                              l4009 237A  
                            l3225 340C                              l3217 3384  
                            l3321 43FC                              l4201 4AEA  
                            l5001 47F6                              l3235 4C36  
                            l3315 4AA6                              l3307 4A6E  
                            l3403 48F4                              l4211 3FCC  
                            l4123 2746                              l4115 272C  
                            l4107 26D2                              l4051 248E  
                            l4043 2452                              l4027 23DC  
                            l4019 23AA                              l3091 4C4E  
                            l3227 344E                              l3219 33A0  
                            l3331 4450                              l3323 4414  
                            l3411 3904                              l4203 4AEE  
                            l5011 4824                              l3309 4A76  
                            l3405 493A                              l4221 4012  
                            l4141 3E60                              l4133 3DE4  
                            l4117 273A                              l4109 26E6  
                            l4061 24D4                              l4053 249C  
                            l4045 245E                              l4037 2426  
                            l4029 23E2                              l3501 1A68  
                            l3181 46F6                              l3093 4C6A  
                            l3229 346A                              l3341 41CA  
                            l3325 4420                              l3333 445C  
                            l3421 397C                              l3413 391C  
                            l5101 1600                              l5021 0E44  
                            l4205 4AF8                              l5013 4840  
                            l5005 4802                              l4231 408C  
                            l4223 402E                              l4151 3EE4  
                            l4143 3E6E                              l4135 3E12  
                            l4119 273C                              l4071 2542  
                            l4063 24EE                              l4055 24A8  
                            l4047 2476                              l4039 2432  
                            l3511 1A92                              l3503 1A7A  
                            l4127 49DE                              l3191 4730  
                            l3183 46FE                              l3351 422A  
                            l3343 41E2                              l3335 4474  
                            l3327 4438                              l3319 43F8  
                            l3431 39D0                              l3423 398C  
                            l3415 3948                              l5111 1670  
                            l5103 160E                              l5031 0F10  
                            l5023 0E5A                              l4207 4B08  
                            l5007 4814                              l4225 4050  
                            l4217 3FD4                              l4145 3E80  
                            l4137 3E22                              l4081 25D8  
                            l4073 256C                              l4065 24FE  
                            l4057 24B8                              l4049 2482  
                            l3601 1C68                              l3513 1AA2  
                            l3521 1ACC                              l3505 1A7C  
                            l4129 49EE                              l4161 30AE  
                            l3193 4738                              l3185 4706  
                            l3177 46DC                              l3353 4242  
                            l3345 41EE                              l3337 448C  
                            l3329 4444                              l3441 3A42  
                            l3433 39E8                              l3425 39A0  
                            l3417 395C                              l3409 38F0  
                            l5121 1704                              l5113 16A2  
                            l5105 1622                              l5041 114C  
                            l5033 0F38                              l5025 0E6E  
                            l5017 0E28                              l4209 4B12  
                            l5009 481C                              l5201 2C5A  
                            l4241 3F12                              l4233 3EE8  
                            l3291 4CF8                              l4227 4068  
                            l4219 3FF6                              l4147 3E8E  
                            l4139 3E50                              l4091 2618  
                            l4083 25E6                              l4075 25A2  
                            l4067 251A                              l4059 24C4  
                            l3611 1CD4                              l3603 1C72  
                            l3531 1B04                              l3523 1ADC  
                            l3515 1AB2                              l3507 1A82  
                            l4171 30EC                              l4163 30C4  
                            l4155 304A                              l3195 473A  
                            l3187 4714                              l3179 46E4  
                            l3347 4206                              l3339 4186  
                            l3451 3ABA                              l3443 3A5A  
                            l3435 3A00                              l3427 39B8  
                            l3419 396C                              l5131 17DA  
                            l5115 16D4                              l5123 1712  
                            l5107 1630                              l5051 11E0  
                            l5043 115A                              l5035 0FE6  
                            l5027 0EA0                              l5019 0E34  
                            l5211 2CD8                              l5203 2C72  
                            l4251 3F90                              l4243 3F2E  
                            l3293 4CE0                              l4229 4074  
                            l4149 3EDE                              l4093 2646  
                            l4085 25F8                              l4077 25B0  
                            l4069 2526                              l3613 1CE4  
                            l3605 1C78                              l3541 1B18  
                            l3533 1B08                              l3525 1AEE  
                            l3517 1AC2                              l3509 1A90  
                            l4181 3174                              l4173 311E  
                            l4157 305A                              l3197 4740  
                            l3189 471A                              l3349 4212  
                            l3461 3B0E                              l3453 3ACA  
                            l3445 3A86                              l3437 3A18  
                            l3429 39C4                              l5133 180C  
                            l5125 1744                              l5141 184A  
                            l5117 16E2                              l5109 163E  
                            l5061 1278                              l5053 11F2  
                            l5045 118C                              l5037 1094  
                            l5029 0ED8                              l3701 4BE6  
                            l4501 4B4E                              l5221 2DB2  
                            l5213 2D10                              l5205 2C8A  
                            l4253 3FA8                              l4245 3F4A  
                            l5301 1F30                              l3295 4CE4  
                            l3391 48A4                              l4087 2606  
                            l4079 25CE                              l3631 1D66  
                            l3623 1D3E                              l3607 1C9E  
                            l3615 1CF4                              l3551 1B2C  
                            l3543 1B1C                              l3535 1B0C  
                            l3527 1AFC                              l3519 1AC4  
                            l4191 31CA                              l4183 3182  
                            l4175 3120                              l4167 30D8  
                            l4159 3068                              l3463 3B26  
                            l3455 3ADE                              l3447 3A9A  
                            l3439 3A2E                              l3711 37C6  
                            l5151 1902                              l5143 187C  
                            l5135 181A                              l5127 1776  
                            l5119 16F6                              l5071 1372  
                            l5063 12AA                              l5055 1202  
                            l5047 119E                              l5039 1142  
                            l3703 4BE8                              l4511 4B62  
                            l4503 4B54                              l3471 4BBA  
                            l5207 2C9E                              l4247 3F6C  
                            l4239 3EF0                              l5311 1F5E  
                            l5303 1F38                              l5231 1EC4  
                            l3289 4CF4                              l3297 4CEA  
                            l3393 48EA                              l3385 4854  
                            l4097 2670                              l4089 260A  
                            l3633 1D6E                              l3625 1D48  
                            l3617 1D1A                              l3609 1CD2  
                            l3641 1D92                              l3561 1B40  
                            l3553 1B30                              l3545 1B20  
                            l3537 1B10                              l3529 1B00  
                            l3481 19FC                              l4193 31DA  
                            l4185 31A0                              l4177 312C  
                            l4169 30E0                              l3465 3B3E  
                            l3457 3AF6                              l3449 3AAA  
                            l3801 3D34                              l3721 383E  
                            l3713 37DE                              l5161 19B4  
                            l5153 1910                              l5145 18AE  
                            l5137 182E                              l5129 17A8  
                            l5073 13C8                              l5081 1406  
                            l5065 12DC                              l5057 1234  
                            l5049 11AE                              l3705 4C76  
                            l4521 4B74                              l4513 4B6C  
                            l4505 4B5C                              l3473 4BBE  
                            l5209 2CD2                              l5217 2D28  
                            l4249 3F84                              l5321 1F8C  
                            l5313 1F6C                              l5305 1F38  
                            l5241 1ED8                              l5233 1ED0  
                            l3299 4CEE                              l3387 489A  
                            l3707 4750                              l4099 267C  
                            l3651 1DE4                              l3643 1D96  
                            l3635 1D72                              l3627 1D56  
                            l3619 1D2A                              l3571 1BB8  
                            l3563 1B6A                              l3555 1B34  
                            l3547 1B24                              l3539 1B14  
                            l3491 1A38                              l3483 1A08  
                            l4195 31E8                              l4187 31A2  
                            l4179 3168                              l3467 3B56  
                            l3459 3B02                              l3811 3D88  
                            l3803 3D44                              l3731 3892  
                            l3723 384E                              l3715 380A  
                            l5163 19C2                              l5147 18E0  
                            l5155 191E                              l5139 183C  
                            l5091 1506                              l5083 145C  
                            l5075 13D6                              l5067 12EA  
                            l5059 1246                              l4523 4B76  
                            l4515 4B6E                              l4507 4B5E  
                            l3475 4BCE                              l5411 2D54  
                            l5219 2D9A                              l5331 204C  
                            l5315 1F70                              l5323 1FA4  
                            l5307 1F44                              l5251 1EE2  
                            l5243 1EDA                              l5235 1ED2  
                            l5227 1EBC                              l3397 4944  
                            l3901 284A                              l3661 1E4A  
                            l3653 1DF0                              l3645 1DA4  
                            l3637 1D82                              l3629 1D58  
                            l3581 1BF8                              l3573 1BBC  
                            l3565 1B86                              l3557 1B38  
                            l3549 1B28                              l3493 1A48  
                            l3485 1A16                              l4197 31EA  
                            l4189 31A6                              l3741 44BA  
                            l3813 3DA0                              l3805 3D58  
                            l3733 38AA                              l3725 3862  
                            l3717 381E                              l3709 37B2  
                            l5165 19D6                              l5157 1950  
                            l5149 18EE                              l5093 1514  
                            l5085 148E                              l5077 13EA  
                            l5069 131C                              l4525 4B78  
                            l4517 4B70                              l4509 4B60  
                            l3469 4BAA                              l3477 4CAE  
                            l5181 2B8C                              l5173 2AF2  
                            l5341 2120                              l5333 2074  
                            l5325 1FEC                              l5317 1F88  
                            l5309 1F50                              l5261 1EEC  
                            l5253 1EE4                              l5245 1EDC  
                            l5237 1ED4                              l5229 1EC0  
                            ?_pad 0015                              l3399 498A  
                            l3911 287A                              l3903 2852  
                            l3671 1E92                              l3663 1E5A  
                            l3655 1DFE                              l3647 1DBA  
                            l3639 1D84                              l3591 1C3A  
                            l3583 1C08                              l3575 1BCA  
                            l3567 1B96                              l3559 1B3C  
                            l3495 1A4A                              l3487 1A18  
                            l3751 4550                              l3743 44D2  
                            l3815 3DB8                              l3807 3D70  
                            l3735 38C2                              l3727 387A  
                            l3719 382E                              l5167 19E4  
                            l5159 1982                              l5087 14E4  
                            l5095 1522                              l5079 13F8  
                            l4471 4630                              l4519 4B72  
                            l3831 4B1E                              l5191 2BE2  
                            l5183 2B98                              l5351 21B4  
                            l5343 215C                              l5335 2096  
                            l5327 1FF8                              l5319 1F8A  
                            l5271 1EF6                              l5263 1EEE  
                            l5255 1EE6                              l5247 1EDE  
                            l5239 1ED6                              l3921 28B8  
                            l3913 287A                              l3905 2856  
                            l3673 1E94                              l3665 1E7A  
                            l3657 1E38                              l3593 1C48  
                            l3577 1BCC                              l3569 1BAC  
                            l3489 1A28                              l3497 1A52  
                            l3753 4568                              l3745 44E6  
                            l3817 3DCE                              l3809 3D7C  
                            l3761 3B80                              l3737 38DA  
                            l3729 3886                              l5097 1578  
                            l5089 14F2                              l5169 19F2  
                            l4481 4652                              l4473 463A  
                            l4465 45D2                              l3833 4B22  
                            l3841 4CA8                              l4801 437A  
                            l5193 2BFA                              l5185 2B9C  
                            l5177 2B18                              l5361 220E  
                            l5353 21C8                              l5345 2174  
                            l5337 20DC                              l5329 2040  
                            l5281 1F00                              l5273 1EF8  
                            l5265 1EF0                              l5257 1EE8  
                            l5249 1EE0                              l4491 4278  
                            l3931 2904                              l3923 28C8  
                            l3675 1E9A                              l3667 1E7E  
                            l3659 1E3A                              l3595 1C54  
                            l3587 1C1C                              l3579 1BD6  
                            l3499 1A62                              l3755 457C  
                            l3747 44FA                              l3739 44A6  
                            l3771 3BF8                              l3763 3B98  
                            l5099 15CE                              l4483 4654  
                            l4475 463C                              l4467 45E2  
                            l3835 4B30                              l3851 4130  
                            l3843 40B0                              l4803 43B0  
                            l4811 4A42                              l5195 2C0E  
                            l5187 2BB2                              l5179 2B2A  
                            l5355 21DC                              l5363 2214  
                            l5347 21A8                              l5339 210E  
                            l5371 2264                              l5291 1F0C  
                            l5283 1F02                              l5275 1EFA  
                            l5267 1EF2                              l5259 1EEA  
                            l4493 4288                              l3941 294E  
                            l3933 2912                              l3925 28D8  
                            l3917 288E                              l3909 286A  
                            l3861 2764                              l3677 1EA8  
                            l3669 1E8C                              l3597 1C58  
                            l3589 1C2C                              l3757 4590  
                            l3749 453C                              l3781 3C4C  
                            l3773 3C08                              l3765 3BC4  
                            l3693 4BD2                              l4485 465E  
                            l4477 4646                              l4469 460C  
                            l3837 4B34                              l3845 40F4  
                            l3853 413C                              l4821 322E  
                            l4813 4A46                              l4901 4690  
                            l5197 2C42                              l5189 2BCA  
                            l5381 22CA                              l5373 2276  
                            l5365 222E                              l5357 21DE  
                            l5349 21AC                              l5293 1F0C  
                            l5285 1F04                              l5277 1EFC  
                            l5269 1EF4                              l4495 429C  
                            l4487 425C                              l3951 2994  
                            l3943 2960                              l3935 291E  
                            l3927 28E0                              l3919 28A8  
                            l3871 27A4                              l3863 2772  
                            l3679 1EAA                              l3599 1C66  
                            l3791 3CBC                              l3783 3C64  
                            l3775 3C1C                              l3767 3BD8  
                            l3759 3B6C                              l3695 4BDC  
                            l4479 4648                              l3855 4154  
                            l3847 410C                              l3839 4C94  
                            l4831 3270                              l4823 3232  
                            l4815 31FC                              l4911 4AC4  
                            l4807 4A24                              l4903 46A4  
                            l5383 22E2                              l5375 228A  
                            l5367 2248                              l5359 21E0  
                            l5295 1F0C                              l5287 1F08  
                            l5279 1EFE                              l4497 42B0  
                            l4489 4268                              l3961 29F4  
                            l3945 2976                              l3953 29A6  
                            l3937 293C                              l3929 28F0  
                            l3881 27CA                              l3873 27A6  
                            l3865 2774                              l3793 3CD4  
                            l3785 3C7C                              l3777 3C34  
                            l3769 3BE8                              l3697 4BE2  
                            l3857 416C                              l3849 4118  
                            l4841 32CA                              l4833 328E  
                            l4825 3240                              l4817 3200  
                            l4809 4A30                              l4905 46A8  
                            l4921 2E2E                              l4913 2DCA  
                            l5385 22FA                              l5377 22AE  
                            l5369 224C                              l5297 1F12  
                            l5289 1F0A                              l4499 42C4  
                            l3971 2A62                              l3955 29B4  
                            l3947 297C                              l3939 293E  
                            l3891 280A                              l3883 27D8  
                            l3867 2784                              l3875 27AE  
                            l3859 2758                              l3795 3D00  
                            l3787 3C92                              l3779 3C40  
                            l3699 4BE4                              l4843 32F8  
                            l4835 3296                              l4851 3332  
                            l4827 3260                              l4819 320E  
                            l4907 46C6                              l4931 2E8C  
                            l4923 2E4A                              l4915 2DEA  
                            l5379 22B6                              l5299 1F26  
                            l3981 2ACC                              l3965 2A1E  
                            l3973 2A66                              l3957 29B8  
                            l3949 2986                              l3893 280C  
                            l3885 27DA                              l3877 27BE  
                            l3869 2794                              l3797 3D14  
                            l3789 3CA8                              l4853 3342  
                            l4845 3318                              l4837 32AA  
                            l4829 3264                              l4861 34F4  
                            l4909 4AAA                              l4941 2EBC  
                            l4933 2E98                              l4925 2E66  
                            l4917 2DFE                              l3983 2AD0  
                            l3975 2A80                              l3967 2A2A  
                            l3959 29C6                              l3887 27EA  
                            l3895 2814                              l3879 27C4  
                            l3799 3D24                              l4855 3362  
                            l4847 331A                              l4839 32B8  
                            l4871 3554                              l4863 3502  
                            l4951 2FC8                              l4943 2F3E  
                            l4935 2EA0                              l4927 2E76  
                            l4919 2E0E                              l3985 2ADE  
                            l3977 2A96                              l3969 2A38  
                            l3897 2824                              l3889 27FA  
                            l4849 332C                              l4881 35CA  
                            l4873 3572                              l4865 3522  
                            l4793 432E                              l4961 3026  
                            l4953 2FE6                              l4945 2F44  
                            l4937 2EAC                              l4929 2E7C  
                            l3987 2AE4                              l3979 2AB0  
                            l3899 283A                              l4891 3632  
                            l4883 35EA                              l4875 357A  
                            l4867 3526                              l4859 34F0  
                            l4795 4340                              l4955 3000  
                            l4947 2F4A                              l4939 2EB6  
                            l4971 3698                              l3989 2AE6  
                            l3997 232E                              l4885 35FC  
                            l4877 358E                              l4869 3534  
                            l4797 4352                              l4957 3010  
                            l4949 2FAE                              l4981 3742  
                            l4973 369C                              l4965 3654  
                            l3999 233A                              l4879 359C  
                            l4887 3602                              l4799 435C  
                            l4895 4662                              l4959 3016  
                            l4975 36AC                              l4967 367C  
                            l4889 3612                              l4897 4670  
                            l4985 3772                              l4977 36CC  
                            l4969 368A                              l4899 467C  
                            l4979 36EC                              l4995 47AE  
                            l4989 3784                              l4997 47BA  
                            l4999 47D6                              STR_1 0E01  
                            STR_2 0E17                              u3000 4474  
                            u3001 4470                              u3010 448C  
                            u3011 4488                              u3020 41E2  
                            u3100 3A00                              u3021 41DE  
                            u3101 39FC                              u3030 4206  
                            u3110 3B26                              u3031 4202  
                            u3111 3B22                              u4000 25E6  
                            u3200 1A90                              u3040 422A  
                            u3120 3B3E                      _BAUD4CONbits 000EE9  
                            u4001 25E2                              u3201 1A8C  
                            u3041 4226                              u3121 3B3A  
                            u4010 2606                              u3210 1AA2  
                            u3050 4242                              u3130 4BBA  
                            u4011 2602                              u3211 1A9E  
                            u3051 423E                              u3131 4BB6  
                            u4100 3E12                              u4020 2618  
                            u3300 1BEA                              u3220 1AB2  
                            u3140 4CC2                              u4101 3E0E  
                            u4021 2614                              u3301 1BE6  
                            u3221 1AAE                              u3141 4CBC  
                            u4110 3E50                              u4030 2646  
                            u3310 1BF8                              u3230 1AEE  
                            u3150 4CC4                              u4111 3E4C  
                            u4031 2642                              u3311 1BF4  
                            u3231 1AEA                              u4120 3E6E  
                            u4040 265C                              u3400 1D56  
                            u3320 1C08                              u3240 1AFC  
                            u3160 1A16                              u4200 3182  
                            u4121 3E6A                              u4041 2658  
                            u3401 1D52                              u3321 1C04  
                            u3241 1AF8                              u3161 1A12  
                            u4201 317E                              u4130 3E8E  
                            u4050 2670                              u3410 1D66  
                            u3330 1C3A                              u3250 1B6A  
                            u3170 1A28                              u4210 3192  
                            u3090 39E8                              _T2PR 000FBC  
                            u4131 3E8A                              u4051 266C  
                            u3411 1D62                              u3331 1C36  
                            u3251 1B66                              u3171 1A24  
                            u4211 318E                              u3091 39E4  
                            u4300 409E                              u4140 3EDE  
                            u4060 268A                              u3500 1E4A  
                            u3420 1D82                              u3340 1C48  
                            u3260 1B82                              u3180 1A38  
                            u4220 31A0                              u5100 4340  
                            u4301 4096                              u4141 3EDA  
                            u4061 2686                              u3501 1E46  
                            u3421 1D7E                              u3341 1C44  
                            u3261 1B7C                              u3181 1A34  
                            u4221 319C                              u5101 433C  
                            u4070 26D2                              u3510 1E5A  
                            u3430 1D92                              u3350 1C66  
                            u3270 1B84                              u3190 1A7A  
                            u4230 31DA                              u4150 305A  
                            u5110 4352                              u4071 26CE  
                            u3511 1E56                              u3431 1D8E  
                            u3351 1C62                              u3191 1A76  
                            u4231 31D6                              u4151 3056  
                            u5111 434E                              u4080 2700  
                            u3520 1E7A                              u3440 1DA4  
                            u3360 1C9E                              u3280 1BAC  
                            u4240 31E8                              u4160 3068  
                            u3600 3DA0                              u5200 32F8  
                            u5120 437A                              u4320 3F02  
                            u4081 26FC                              u3521 1E76  
                            u3441 1DA0                              u3361 1C9A  
                            u3281 1BA8                              u4241 31E4  
                            u4161 3064                              u3601 3D9C  
                            u5201 32F4                              u5121 4376  
                            u4321 3EFA                              u4250 3FE6  
                            u4090 273A                              u3530 1E8C  
                            u3450 1DBA                              u3370 1CE4  
                            u3290 1BCA                              u4170 30C4  
                            u3610 3DB8                              u5210 3342  
                            u5130 43B0                              u6010 22FA  
                            u4251 3FDE                              u4091 2736  
                            u3531 1E88                              u3451 1DB6  
                            u3371 1CE0                              u3291 1BC6  
                            u4171 30C0                              u3611 3DB4  
                            u5211 333E                              u5131 43AC  
                            u6011 22F6                              u3700 2794  
                            u3540 1EA8                              u3460 1DD0  
                            u3380 1D1A                              u4180 311A  
                            u2820 33A0                              u3620 4B4C  
                            u5220 3502                              u5300 4AC4  
                            u5140 4A66                              u4340 3F4A  
                            u3701 2790                              u3541 1EA4  
                            u3461 1DCC                              u3381 1D16  
                            u4181 3116                              u2821 339C  
                            u3621 4B48                              u5221 34FE  
                            u5301 4AC0                              u5141 4A62  
                            u4341 3F46                              u4318 40A0  
                            u4270 402E                              u3710 27D8  
                            u3470 1DE4                              u3390 1D2A  
                            u4190 3164                              u2830 346A  
                            u3630 4CA8                              u5150 320E  
                            u5230 3534                              u5310 2DFA  
                            u4350 3F5C                              u4271 402A  
                            u3711 27D4                              u3471 1DE0  
                            u3391 1D26                              u4191 3160  
                            u2831 3466                              u3631 4CA4  
                            u5151 320A                              u5231 3530  
                            u5311 2DF4                              u4351 3F54  
                            u2840 4C36                              u4280 4040  
                            u3800 2976                              u3720 27EA  
                            u3480 1DFE                              u2760 46F6  
                            u3560 38AA                              u3640 410C  
                            u5160 3240                              u5240 3572  
                            u5400 3010                              u5320 2DFC  
                            u6008 22A2                              u2841 4C32  
                            u4281 4038                              u3801 2972  
                            u3721 27E6                              u3481 1DFA  
                            u2761 46F2                              u3561 38A6  
                            u3641 4108                              u5161 323C  
                            u5241 356E                              u5401 300C  
                            u2850 4C4C                              u3810 2994  
                            u3730 27FA                              u3490 1E38  
                            u2770 4714                              u3570 38C2  
                            u3650 4130                              u5250 359C  
                            u5330 2E0E                              u5410 367C  
                            u4370 3FBA                              u4338 3F04  
                            u2851 4C48                              u3811 2990  
                            u3731 27F6                              u3491 1E34  
                            u2771 4710                              u3571 38BE  
                            u3651 412C                              u5171 326A  
                            u5251 3598                              u5331 2E0A  
                            u5411 3678                              u6107 2CE4  
                            u4371 3FB2                              u6027 1F7C  
                            u4268 3FE8                              u3900 2ADE  
                            u3820 29B4                              u3740 283A  
                            u2780 4730                              u3580 3C64  
                            u5500 1234                              u3660 4154  
                            u5180 328E                              u5260 35CA  
                            u5340 2E4A                              u5420 36CC  
                            u3901 2ADA                              u3821 29B0  
                            u3741 2836                              u2781 472C  
                            u3581 3C60                              u5501 1230  
                            u3661 4150                              u5181 328A  
                            u5261 35C6                              u5341 2E46  
                            u5421 36C8                              u6117 2DA6  
                            u6037 2258                              u3830 29C6  
                            u3750 287A                              u3910 2348  
                            u3590 3C7C                              u5510 1278  
                            u3670 416C                              u5190 32B8  
                            u5270 3612                              u5350 2E76  
                            u5430 36EC                              u3831 29C2  
                            u3751 2876                              u3911 2344  
                            u3591 3C78                              u6207 16FC  
                            u5511 1274                              u6127 4AFE  
                            u3671 4168                              u5191 32B4  
                            u5271 360E                              u5351 2E72  
                            u5431 36E8                              u6047 22D6  
                            u2960 4A92                              u3840 29F4  
                            u3760 28F0                              u3680 2772  
                            u3920 235A                              u5600 1578  
                            u5520 12AA                              u5280 4670  
                            u5360 2E8C                              u5440 47F6  
                            u4368 3F5E                              u2961 4A8A  
                            u3841 29F0                              u3761 28EC  
                            u3681 276E                              u3921 2356  
                            u6217 1812                              u5601 1574  
                            u6137 13CE                              u5521 12A6  
                            u5281 466C                              u5361 2E88  
                            u5441 47F2                              u6057 3F1C  
                            u4298 4042                              u3850 2A0A  
                            u3770 2912                              u3690 2784  
                            u3930 236A                              u5610 15CE  
                            u5530 12DC                              u5450 115A  
                            u5290 46C6                              u5370 2FC8  
                            u3851 2A06                              u3771 290E  
                            u3691 2780                              u3931 2366  
                            u6307 3B8A                              u6227 1834  
                            u5611 15CA                              u6147 13F0  
                            u5531 12D8                              u5451 1156  
                            u5291 46C2                              u5371 2FC4  
                            u6067 3F76                              u3860 2A1E  
                            u3780 293C                              u3940 23AA  
                            u2980 4414                              u5700 180C  
                            u5620 1600                              u5540 131C  
                            u5460 118C                              u5380 2FE6  
                            u4388 3FBC                              u3861 2A1A  
                            u3781 2938                              u3941 23A6  
                            u2981 4410                              u6317 3BB6  
                            u6237 18E6                              u5701 1808  
                            u5621 15FC                              u6157 14EA  
                            u5541 1318                              u5461 1188  
                            u5381 2FE2                              u6077 3F9A  
                            u3870 2A38                              u3790 2960  
                            u3950 23BC                              u2990 4438  
                            u5710 187C                              u5630 1670  
                            u5550 1372                              u5470 11AE  
                            u5390 3000                              u3871 2A34  
                            u3791 295C                              u3951 23B8  
                            u2991 4434                              u6407 3A0A  
                            u6327 3C86                              u6247 1908  
                            u5711 1878                              u5631 166C  
                            u6167 150C                              u5551 136E  
                            u5471 11AA                              u5391 2FFC  
                            u6087 2B20                              u3880 2A80  
                            u3960 23CC                              u5720 18AE  
                            u5640 16A2                              u5560 13C8  
                            u5480 11E0                              u5800 1F5E  
                            u3881 2A7C                              u3961 23C8  
                            u6417 455A                              u6337 3CC6  
                            u6257 19BA                              u5721 18AA  
                            u5641 169E                              u6177 1606  
                            u5561 13C4                              u5481 11DC  
                            u6097 2BA4                              u5801 1F5A  
                            u2978 4A94                              u3890 2AB0  
                            u3970 2402                              u5730 18E0  
                            u5650 16D4                              u5570 145C  
                            u5490 1202                              u5810 1F6C  
                            u3891 2AAC                              u3971 23FE  
                            u6427 459A                              u6347 3CF2  
                            u6267 19DC                              u5731 18DC  
                            u5651 16D0                              u6187 1628  
                            u5571 1458                              u5491 11FE  
                            u5811 1F68                              u3980 2412  
                            u5740 1950                              u5660 1744  
                            u5580 148E                              u5900 2022  
                            u5820 1FA0                              u3981 240E  
                            u6437 3A4C                              u6357 3DC2  
                            u6277 37D0                              u5741 194C  
                            u5661 1740                              u6197 16DA  
                            u5581 148A                              u5901 201A  
                            u5821 1F9A                              u3990 258C  
                            u5750 1982                              u5670 1776  
                            u5590 14E4                              u5910 2040  
                            u5830 1FA2                              u6447 3A78  
                            u6367 44C4                              u6287 37FC  
                            u5751 197E                              u5671 1772  
                            u5591 14E0                              u5911 203C  
                            u5760 19B4                              u5680 17A8  
                            u5920 2060                              u5840 1FB4  
                            u6457 3B48                              u6377 4504  
                            u6297 38CC                              u5761 19B0  
                            u5681 17A4                              u5921 2056  
                            u5841 1FAE                              u5690 17DA  
                            u5770 2B14                              u5850 1FB6  
                            u3995 2582                              u6467 4496  
                            u6387 390E                              u5691 17D6  
                            u5771 2B10                              u5780 2D0C  
                            u5940 210E                              u5908 2026  
                            u5860 1FCE                              u6477 4000  
                            u6397 393A                              u5781 2D08  
                            u5941 210A                              u5861 1FC6  
                            u5790 2DC8                              u5950 2120  
                            u5870 1FEC                              u6487 405A  
                            u5791 2DC4                              u5951 211C  
                            u5871 1FE8                              u5960 2174  
                            u5880 2008                              u6497 407E  
                            u5961 2170                              u5881 2002  
                            u5970 21C8                              u5938 2064  
                            u5890 200A                              u5971 21C4  
                            u5980 2276                              u5868 1FD2  
                            u5981 2272                              u5990 229E  
                            u5991 2294                              abs@a 0017  
                            _dbuf 01D6                              _main 1EBC  
                            _dtoa 2DCA                              _prec 00E6  
                            pad@i 001C                              pad@p 0019  
                            fsr1h 000FE2                              fsr2h 000FDA  
                            indf2 000FDF                              fsr1l 000FE1  
                            pad@w 001E                              fsr2l 000FD9  
                            btemp 005B                              _stop 43F8  
                            prodh 000FF4                              prodl 000FF3  
                            start 0076                   ___fldiv@new_exp 0047  
                main@turn_history 0200            __end_of_color_read_Red 48A4  
                 __end_of_HighISR 0076                      ___param_bank 000000  
                     _turnLeft_90 3A2E                      main@clearRef 009B  
                           ??_abs 0019                             ??_pad 001B  
                    main@colorNum 00A1                   __end_of___aodiv 3384  
                 __end_of___fladd 1EBC                             ?_main 0001  
                           ?_dtoa 0020                   __end_of___aomod 3654  
                 __end_of___fldiv 2AF2                   __end_of___flmul 2758  
                 __end_of___flsub 4A24                             ?_stop 0018  
                 __end_of___lwdiv 4750                             i2l512 4BA6  
                           i2l505 4C24                             i2l519 4CDC  
                           i2l536 0066                             i2l538 006A  
                    vfpfcnvrt@fmt 0045                             _TMR0H 000FD4  
                           _TMR0L 000FD3        __end_of_I2C_2_Master_Start 4CFE  
      __end_of_I2C_2_Master_Write 4CEA                             _flags 00EC  
                           _fputc 432E                   __end_of_forward 4186  
                           _fputs 4A24                             pad@fp 0015  
                           _width 00E4                             _putch 4D0C  
                           dtoa@d 0022                             dtoa@i 0041  
                           dtoa@n 0038                             dtoa@p 0034  
                           dtoa@s 0040                             dtoa@w 0036  
                           tablat 000FF5                   __end_of_reverse 425C  
                           ttemp5 005C                             ttemp6 005F  
                           ttemp7 0063                             status 000FD8  
                           wtemp8 005C                   __end_of_sprintf 4854  
         __end_of_color_read_Blue 4994             _I2C_2_Master_RepStart 4CFE  
              putCharToRxBuf@byte 0001                   ?_color_read_Red 0009  
                 __initialization 4994                      __end_of_main 232E  
                    __end_of_dtoa 3048                   i2_isDataInTxBuf 4CC6  
                    __end_of_stop 44A6                      _turnLeft_135 3CA8  
              putCharToTxBuf@byte 0005                     colorDetect@mL 0068  
                   colorDetect@mR 006A                            ??_main 0094  
                          ??_dtoa 002A                            ??_stop 001C  
                   __activetblptr 000003                      _turnRight_90 38F0  
               _return_home_turns 2AF2             colorDetect@colour_ref 007E  
                    ?_setMotorPWM 0012                ?_return_home_turns 007F  
                          ?_fputc 0005                            ?_fputs 000E  
                          _CCPR1H 000FAA                            _CCPR2H 000FA6  
                          _CCPR3H 000F25                            _CCPR4H 000F21  
                          ?_putch 0001             colorDetect@greenPrint 008C  
                          _RC0PPS 000E62                            _RC4REG 000EE3  
                          _RE2PPS 000E74                            _RD5PPS 000E6F  
                          _RC7PPS 000E69                            _RD6PPS 000E70  
                          _RE4PPS 000E76                            i2l4531 4C12  
                          i2l4533 4C22                            i2l4535 4B7C  
                          i2l4527 4BFE                            i2l4537 4B8C  
                          i2l4529 4C0E                            i2l4721 0028  
                          i2l4539 4B90                            i2l2795 4CC6  
                          i2l4723 0038                            _RG6PPS 000E88  
                          i2l4725 0046                            i2l4717 0012  
                          i2l4727 005A                            i2l4719 0022  
        return_home_turns@string1 0100                         ??_HighISR 0003  
        __end_of_color_click_init 4B1E                            _RX4PPS 000E15  
                          _TX4REG 000EE4               ??_return_home_turns 0089  
                __end_of___xxtofl 31FC                  __end_of_getColor 47AE  
                    _CCPTMRS0bits 000FAD                      vfprintf@cfmt 0055  
                          ___flge 3DE4                  _getCharFromTxBuf 4B7C  
                       ??___aodiv 0015                         ??___fladd 000D  
                       ??___aomod 0015                            ___wmul 4C4E  
                       ??___fldiv 003E                         ??___flmul 0025  
                       ??___flsub 001D                         ??___lwdiv 000F  
                          clear_0 49BA                            clear_1 49C6  
                          isa$std 000001                            pad@buf 0017  
                   main@motorLeft 00C7                            dtoa@fp 0020  
       __end_of_return_home_turns 2DCA                            fputc@c 0005  
               ?_TxBufferedString 0006                            fputs@c 0012  
                          fputs@i 0013                            fputs@s 000E  
                       ??_forward 001C                      __mediumconst 0000  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8                ??_TxBufferedString 0008  
                       ??_reverse 001C                  __end_of_whiteCal 3FCC  
                          putch@c 0001                  __end_of_vfprintf 4802  
                          stop@mL 0018                            stop@mR 001A  
               ??_initDCmotorsPWM 0007                         ??_sprintf 0057  
                __end_of_turn_180 38F0                        ___flge@ff1 001D  
                      ___flge@ff2 0021                      ___xxtofl@arg 000F  
                    ___xxtofl@exp 000E                      ___xxtofl@val 0005  
           __end_of_isDataInTxBuf 4CC6                        __accesstop 0060  
         __end_of__initialization 49D4          __end_of_color_read_Clear 4944  
        __end_of_color_read_Green 48F4            ?_I2C_2_Master_RepStart 0001  
         __end_ofi2_isDataInTxBuf 4CDE                     ___rparam_used 000001  
                ?_color_read_Blue 0009                 main@ambientRGBVal 00AC  
                  __pcstackCOMRAM 0001                     ?_DCmotorsInit 0005  
                    __pidataBANK0 4D08                     __end_of_fputc 43F8  
                   __end_of_fputs 4A68                     __end_of_putch 4D0E  
              return_home_turns@i 0196                return_home_turns@k 0198  
                         ??_fputc 0009                           ??_fputs 0012  
              _reverseSquareRight 44A6                           ??_putch 0005  
                      __pbssBANK0 00D0                        __pbssBANK1 019A  
                      _ambientCal 3FCC               ?_reverseSquareRight 0024  
                   _turnRight_135 3B6C                 _color_writetoaddr 4C74  
                    _T2CLKCONbits 000FBF                    ??_DCmotorsInit 0009  
                         ?___flge 001D                      ?_turnLeft_90 001E  
              ?_color_writetoaddr 0007                           ?___wmul 0005  
             ??_color_writetoaddr 0008              ??_reverseSquareRight 0028  
                       ?___xxtofl 0005                           _SP4BRGH 000EE6  
                         _SP4BRGL 000EE5                         ?_getColor 0010  
                         _SSP2ADD 000ED6                           _SSP2BUF 000ED5  
          color_writetoaddr@value 0007                  ??_color_read_Red 000B  
                         _HighISR 0008                    ?_turnRight_135 001E  
       __end_of_color_writetoaddr 4C94                  ?i2_isDataInTxBuf 0001  
              _I2C_2_Master_Start 4CF4                        _initUSART4 4B4E  
              _I2C_2_Master_Write 4CDE                           __Hparam 0000  
                         __Lparam 0000                 color_read_Red@tmp 000E  
                         ___aodiv 31FC                           ___fladd 19FC  
                         ___aomod 34F0                           ___fldiv 2758  
                         ___flmul 232E                         ?_whiteCal 0012  
                         ___flsub 49DE               ?_I2C_2_Master_Start 0001  
                         ___lwdiv 46DC               ?_I2C_2_Master_Write 0001  
                      _off_period 00E8                         ?_vfprintf 0060  
                    __psmallconst 0E00                         ?_turn_180 001E  
                         __pcinit 4994                           __ramtop 0E00  
                         __ptext0 1EBC                           __ptext1 3EE8  
                         __ptext2 2AF2                           __ptext3 4802  
                         __ptext4 47AE                           __ptext5 3654  
                         __ptext6 2DCA                           __ptext7 4662  
                         __ptext8 4A24                           __ptext9 432E  
               colorDetect@RGBVal 0080                         _T2CONbits 000FBD  
                         _forward 40B0                        ??___xxtofl 0009  
                       _T2HLTbits 000FBE                           _reverse 4186  
                      ??_getColor 0012                     _RxBufWriteCnt 005A  
        __end_of_getCharFromTxBuf 4BA8                    main@motorRight 00BE  
                         _sprintf 4802              ??_I2C_2_Master_Start 0006  
            ??_I2C_2_Master_Write 0006              end_of_initialization 49D4  
               __end_of_sendTxBuf 4CAE                    DCmotorsInit@mL 0005  
                  DCmotorsInit@mR 0007                       ?_ambientCal 0012  
                         fputc@fp 0007                           fputs@fp 0010  
               ?_color_click_init 0001                 colorDetect@whiteB 0074  
               colorDetect@whiteG 0070                 colorDetect@whiteR 006C  
              ??_color_click_init 0009                 __end_of_vfpfcnvrt 37B2  
                         postdec1 000FE5                           postdec2 000FDD  
                         postinc0 000FEE                           postinc1 000FE6  
                         postinc2 000FDE                  vfpfcnvrt@convarg 004B  
                      ??_whiteCal 0014                        ??_vfprintf 0055  
                      ??_turn_180 0022                   _initDCmotorsPWM 45D2  
                       _PORTFbits 000F8E                setMotorPWM@negDuty 0017  
                     ___fladd@grs 0014                        main@RGBVal 00A3  
                   ___xxtofl@sign 000D                         _TRISAbits 000F81  
              setMotorPWM@posDuty 0016                         _TRISCbits 000F83  
                       _TRISDbits 000F84                         _TRISEbits 000F85  
                       _TRISFbits 000F86                         _TRISGbits 000F87  
                       _TRISHbits 000F88              __end_of_DCmotorsInit 432E  
                     ___fldiv@grs 0049                       ___fldiv@rem 0042  
             reverseSquareLeft@mL 0024               reverseSquareLeft@mR 0026  
        color_writetoaddr@address 0008           ??_I2C_2_Master_RepStart 0006  
                 ??_turnRight_135 0022                       ___flmul@grs 002A  
                     _CCP1CONbits 000FAB                 ?_color_read_Clear 0009  
                    _EUSART4RXbuf 00D0                      _EUSART4TXbuf 019A  
                     _CCP2CONbits 000FA7                 ?_color_read_Green 0009  
                     _CCP3CONbits 000F26                  main@forwardCount 009F  
                     ?_initUSART4 0001                       _CCP4CONbits 000F22  
return_home_turns@counter_history 0081                        main@whiteC 0097  
              ??_color_read_Clear 000B                ??_color_read_Green 000B  
                   ??_colorDetect 004F                    __end_of___flge 3EE8  
                     vfpfcnvrt@ap 0047                       vfpfcnvrt@cp 0053  
                     vfpfcnvrt@fp 0043                    __end_of___wmul 4C74  
          colorDetect@whiteRGBVal 0066               color_read_Clear@tmp 000E  
             start_initialization 4994              colorDetect@bluePrint 0090  
                     __end_of_abs 4AEA                       __end_of_pad 46DC  
                   _TxBufWriteCnt 0058               color_read_Green@tmp 000E  
             return_home_turns@mL 0085               return_home_turns@mR 0087  
         __end_of_initDCmotorsPWM 4662                       vfprintf@fmt 0062  
                        ??___flge 0025               main@counter_history 0300  
                        ??___wmul 0009                    _putCharToRxBuf 4BFC  
                  _putCharToTxBuf 4BA8                       __pdataBANK0 00ED  
             __end_of_colorDetect 19FC                         ___fladd@a 0009  
                       ___fladd@b 0005                         ___fldiv@a 003A  
                       ___fldiv@b 0036                         ___flmul@a 0021  
                       ___flmul@b 001D                       __pbssCOMRAM 0057  
                       ___flsub@a 0019                         ___flsub@b 0015  
                   __pcstackBANK0 0060                     __pcstackBANK1 0100  
                   __pcstackBANK2 0200                     __pcstackBANK3 0300  
                ___aodiv@dividend 0005                          ?_HighISR 0001  
               _reverseSquareLeft 453C                ?_reverseSquareLeft 0024  
                ___lwdiv@dividend 000B                         _dtoa$2672 0032  
          __end_of_putCharToRxBuf 4C26            __end_of_putCharToTxBuf 4BD2  
                       __pintcode 0008                          ?___aodiv 0005  
                        ?___fladd 0005                          ?___aomod 0005  
                        ?___fldiv 0036                  ___aodiv@quotient 0017  
                        ?___flmul 001D                          ?___flsub 0015  
                   ?_turnLeft_135 001E                          ?___lwdiv 000B  
             ??_reverseSquareLeft 0028                   turnRight_135@mL 001E  
                 turnRight_135@mR 0020            TxBufferedString@string 0006  
                  turnLeft_135@mL 001E                    turnLeft_135@mR 0020  
            I2C_2_Master_Read@ack 0007              I2C_2_Master_Read@tmp 0008  
                     __smallconst 0E00                          ?_forward 0018  
               _I2C_2_Master_Idle 4C26                     ?_turnRight_90 001E  
               _I2C_2_Master_Init 4BD2                 _I2C_2_Master_Read 4A68  
               _I2C_2_Master_Stop 4CEA                      _RxBufReadCnt 0059  
                        ?_reverse 0018                ?_I2C_2_Master_Idle 0001  
              ?_I2C_2_Master_Init 0001                ?_I2C_2_Master_Read 0001  
                   ??_setMotorPWM 0014                ?_I2C_2_Master_Stop 0001  
                ___lwdiv@quotient 000F          initDCmotorsPWM@PWMperiod 0005  
                        ?_sprintf 0066                 ?_getCharFromTxBuf 0001  
       __end_of_reverseSquareLeft 45D2                ??_getCharFromTxBuf 0001  
                    ??_ambientCal 0014               ??_I2C_2_Master_Idle 0005  
             ??_I2C_2_Master_Init 0005               ??_I2C_2_Master_Read 0006  
                  ___wmul@product 0009                          _LATAbits 000F79  
             ??_I2C_2_Master_Stop 0006                          _LATCbits 000F7B  
                   _isDataInTxBuf 4CAE                          _LATDbits 000F7C  
                        _LATEbits 000F7D                          _LATFbits 000F7E  
                       _on_period 00EA                  _TxBufferedString 4B1E  
                        _LATGbits 000F7F                          _LATHbits 000F80  
                       _sendTxBuf 4C94                          _IPR4bits 000E23  
                        _PIE4bits 000E2D                          i2u221_40 4CDA  
                        i2u221_41 4CD4                          i2u222_40 4CDC  
                       getColor@v 0010                          i2u500_40 0038  
                        i2u500_41 0034                          i2u501_40 0046  
                        i2u501_41 0042                          i2u502_40 005A  
                        i2u502_41 0056                          _PIR4bits 000E37  
                        i2u474_40 4C0E                          i2u474_41 4C0A  
                        i2u475_40 4B8C                          i2u475_41 4B88  
                        i2u499_40 0022                          i2u499_41 001E  
                 ?_putCharToRxBuf 0001                  ?_initDCmotorsPWM 0005  
                     _colorDetect 0E28                   ?_putCharToTxBuf 0001  
                  ??_turnLeft_135 0022                      _DCmotorsInit 425C  
                        _SSP2CON2 000EDA                          _SSP2STAT 000ED8  
                       _vfpfcnvrt 3654         __end_of_I2C_2_Master_Idle 4C4E  
       __end_of_I2C_2_Master_Init 4BFC         __end_of_I2C_2_Master_Read 4AAA  
               ___wmul@multiplier 0005         __end_of_I2C_2_Master_Stop 4CF4  
                  ??_turnRight_90 0022                      setMotorPWM@m 0012  
                       main@carGo 00AB       I2C_2_Master_Write@data_byte 0006  
              __end_of_ambientCal 40B0                         main@index 00BC  
               ??_color_read_Blue 000B                      _TxBufReadCnt 0057  
                       copy_data0 49A8               colorDetect@ambientB 007C  
             colorDetect@ambientG 007A               colorDetect@ambientR 0078  
             colorDetect@clearRef 0060                    ?_isDataInTxBuf 0001  
   __end_of_I2C_2_Master_RepStart 4D08                color_read_Blue@tmp 000E  
             __end_of_setMotorPWM 34F0                        ?_sendTxBuf 0001  
          return_home_turns@index 0083                      ??_initUSART4 0005  
                        __Hrparam 0000               colorDetect@redPrint 0088  
                      vfprintf@ap 0064                          __Lrparam 0000  
                      vfprintf@fp 0060                         forward@mL 0018  
                       forward@mR 001A     return_home_turns@turn_history 007F  
                      ?_vfpfcnvrt 0043          colorDetect@ambientRGBVal 0064  
                 ___aodiv@divisor 000D                   ___aodiv@counter 0015  
                      _ANSELDbits 000EA7                        _ANSELFbits 000EB4  
                      sprintf@fmt 0068                        turn_180@mL 001E  
                      turn_180@mR 0020                          ___xxtofl 3048  
                      _T0CON0bits 000FD5                        _T0CON1bits 000FD6  
                 ___lwdiv@divisor 000D                __end_of_initUSART4 4B7C  
                        _getColor 4750                   ___lwdiv@counter 0011  
                        __ptext10 4D0C                          __ptext11 4AAA  
                        __ptext20 45D2                          __ptext12 34F0  
                        __ptext21 4AEA                          __ptext13 31FC  
                        __ptext30 453C                          __ptext22 4C74  
                        __ptext14 4C94                          __ptext31 3A2E  
                        __ptext23 4BD2                          __ptext15 4CAE  
                        __ptext40 232E                          __ptext32 43F8  
                        __ptext24 0E28                          __ptext16 40B0  
                        __ptext41 3DE4                          __ptext33 4186  
                        __ptext25 37B2                          __ptext17 4B1E  
                        __ptext50 4CEA                          __ptext42 2758  
                        __ptext34 3384                          __ptext26 3B6C  
                        __ptext18 4BA8                          __ptext51 4CF4  
                        __ptext43 3FCC                          __ptext35 4C4E  
                        __ptext27 3CA8                          __ptext19 4B4E  
                        __ptext52 4CFE                          __ptext44 4750  
                        __ptext36 46DC                          __ptext28 44A6  
                        __ptext53 4A68                          __ptext45 4854  
                        __ptext37 3048                          __ptext29 38F0  
                        __ptext54 4C26                          __ptext46 48A4  
                        __ptext38 49DE                          __ptext55 425C  
                        __ptext47 48F4                          __ptext39 19FC  
                        __ptext48 4944                          __ptext57 4CC6  
                        __ptext49 4CDE                          __ptext58 4BFC  
                        __ptext59 4B7C                       ambientCal@i 0016  
                     ambientCal@v 0012                    turnRight_90@mL 001E  
                  turnRight_90@mR 0020                      _SSP2CON1bits 000ED9  
                    _SSP2CON2bits 000EDA                     turnLeft_90@mL 001E  
                   turnLeft_90@mR 0020             __end_of_turnRight_135 3CA8  
                       reverse@mL 0018                         reverse@mR 001A  
                   ??_turnLeft_90 0022                    _turning_time90 00EF  
                        isa$xinst 000000                        _RC4STAbits 000EE7  
                        int$flags 005B                          _whiteCal 3EE8  
                        _vfprintf 47AE                          _turn_180 37B2  
                ___aomod@dividend 0005                         whiteCal@i 0016  
                       whiteCal@v 0012                        _INTCONbits 000FF2  
               ??i2_isDataInTxBuf 0001                      _reverse_time 00ED  
                     _setMotorPWM 3384              __end_of_turnLeft_135 3DE4  
                 ??_isDataInTxBuf 0005                          intlevel2 0000  
                       sprintf@ap 0072                       ??_sendTxBuf 0005  
                 main@whiteRGBVal 00B4              __end_of_turnRight_90 3A2E  
                 ___aomod@divisor 000D                       ??_vfpfcnvrt 0049  
                 ___aomod@counter 0015                  _color_click_init 4AEA  
             __end_of_turnLeft_90 3B6C          __end_of_TxBufferedString 4B4E  
                        sprintf@f 0074                          sprintf@s 0066  
                      _SSP2DATPPS 000E1D                        _SSP2CLKPPS 000E1C  
                   ___fladd@signs 0011                        _TX4STAbits 000EE8  
                    ___aodiv@sign 0016                      ___fladd@aexp 0012  
                    ___fladd@bexp 0013                  ??_putCharToRxBuf 0001  
                ??_putCharToTxBuf 0005                      ___aomod@sign 0016  
                    ?_colorDetect 0060  



Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Thu Dec 15 08:49:06 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=3
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=3
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=3
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=2
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=2
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=2
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=2
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=2
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=2
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=2
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=2
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    78                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    79                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    80                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    81                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    82   000000                     
    83                           ; Version 2.35
    84                           ; Generated 05/05/2021 GMT
    85                           ; 
    86                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    87                           ; All rights reserved.
    88                           ; 
    89                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    90                           ; 
    91                           ; Redistribution and use in source and binary forms, with or without modification, are
    92                           ; permitted provided that the following conditions are met:
    93                           ; 
    94                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    95                           ;        conditions and the following disclaimer.
    96                           ; 
    97                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    98                           ;        of conditions and the following disclaimer in the documentation and/or other
    99                           ;        materials provided with the distribution. Publication is not required when
   100                           ;        this file is used in an embedded application.
   101                           ; 
   102                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   103                           ;        software without specific prior written permission.
   104                           ; 
   105                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   106                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   107                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   108                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   109                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   110                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   111                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   112                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   113                           ; 
   114                           ; 
   115                           ; Code-generator required, PIC18F67K40 Definitions
   116                           ; 
   117                           ; SFR Addresses
   118   000000                     
   119                           	psect	idataBANK0
   120   004C9E                     __pidataBANK0:
   121                           	callstack 0
   122                           
   123                           ;initializer for _reverse_time
   124   004C9E  028A               	dw	650
   125                           
   126                           ;initializer for _turning_time45
   127   004CA0  00A5               	dw	165
   128   000000                     _TX4REG	set	3812
   129   000000                     _RC4STAbits	set	3815
   130   000000                     _SP4BRGH	set	3814
   131   000000                     _TRISFbits	set	3974
   132   000000                     _LATFbits	set	3966
   133   000000                     _TRISDbits	set	3972
   134   000000                     _TRISGbits	set	3975
   135   000000                     _LATGbits	set	3967
   136   000000                     _LATEbits	set	3965
   137   000000                     _SSP2CON2bits	set	3802
   138   000000                     _RX4PPS	set	3605
   139   000000                     _SSP2CLKPPS	set	3612
   140   000000                     _SSP2DATPPS	set	3613
   141   000000                     _RC7PPS	set	3689
   142   000000                     _RE2PPS	set	3700
   143   000000                     _LATCbits	set	3963
   144   000000                     _LATDbits	set	3964
   145   000000                     _TRISAbits	set	3969
   146   000000                     _LATHbits	set	3968
   147   000000                     _TRISCbits	set	3971
   148   000000                     _TRISEbits	set	3973
   149   000000                     _PORTFbits	set	3982
   150   000000                     _TRISHbits	set	3976
   151   000000                     _T2PR	set	4028
   152   000000                     _T2CONbits	set	4029
   153   000000                     _CCPR2H	set	4006
   154   000000                     _CCPR1H	set	4010
   155   000000                     _RE4PPS	set	3702
   156   000000                     _RG6PPS	set	3720
   157   000000                     _RD5PPS	set	3695
   158   000000                     _ANSELDbits	set	3751
   159   000000                     _SSP2ADD	set	3798
   160   000000                     _SSP2CON1bits	set	3801
   161   000000                     _CCPR4H	set	3873
   162   000000                     _CCPR3H	set	3877
   163   000000                     _TMR0L	set	4051
   164   000000                     _TMR0H	set	4052
   165   000000                     _T0CON0bits	set	4053
   166   000000                     _T0CON1bits	set	4054
   167   000000                     _T2CLKCONbits	set	4031
   168   000000                     _T2HLTbits	set	4030
   169   000000                     _CCP1CONbits	set	4011
   170   000000                     _CCPTMRS0bits	set	4013
   171   000000                     _CCP2CONbits	set	4007
   172   000000                     _LATAbits	set	3961
   173   000000                     _CCP3CONbits	set	3878
   174   000000                     _CCP4CONbits	set	3874
   175   000000                     _RC4REG	set	3811
   176   000000                     _SP4BRGL	set	3813
   177   000000                     _TX4STAbits	set	3816
   178   000000                     _BAUD4CONbits	set	3817
   179   000000                     _SSP2CON2	set	3802
   180   000000                     _SSP2STAT	set	3800
   181   000000                     _ANSELFbits	set	3764
   182   000000                     _SSP2BUF	set	3797
   183   000000                     _IPR4bits	set	3619
   184   000000                     _PIE4bits	set	3629
   185   000000                     _RC0PPS	set	3682
   186   000000                     _RD6PPS	set	3696
   187   000000                     _INTCONbits	set	4082
   188   000000                     _PIR4bits	set	3639
   189                           
   190                           	psect	smallconst
   191   000E00                     __psmallconst:
   192                           	callstack 0
   193   000E00  00                 	db	0
   194   000E01                     STR_1:
   195   000E01  4B                 	db	75	;'K'
   196   000E02  3A                 	db	58	;':'
   197   000E03  25                 	db	37
   198   000E04  64                 	db	100	;'d'
   199   000E05  20                 	db	32
   200   000E06  49                 	db	73	;'I'
   201   000E07  3A                 	db	58	;':'
   202   000E08  25                 	db	37
   203   000E09  64                 	db	100	;'d'
   204   000E0A  20                 	db	32
   205   000E0B  43                 	db	67	;'C'
   206   000E0C  3A                 	db	58	;':'
   207   000E0D  25                 	db	37
   208   000E0E  64                 	db	100	;'d'
   209   000E0F  20                 	db	32
   210   000E10  54                 	db	84	;'T'
   211   000E11  3A                 	db	58	;':'
   212   000E12  25                 	db	37
   213   000E13  64                 	db	100	;'d'
   214   000E14  20                 	db	32
   215   000E15  0D                 	db	13
   216   000E16  00                 	db	0
   217   000E17  25                 	db	37
   218   000E18  64                 	db	100	;'d'
   219   000E19  2C                 	db	44
   220   000E1A  25                 	db	37
   221   000E1B  64                 	db	100	;'d'
   222   000E1C  2C                 	db	44
   223   000E1D  25                 	db	37
   224   000E1E  64                 	db	100	;'d'
   225   000E1F  2C                 	db	44
   226   000E20  25                 	db	37
   227   000E21  64                 	db	100	;'d'
   228   000E22  20                 	db	32
   229   000E23  0D                 	db	13
   230   000E24  0A                 	db	10
   231   000E25  00                 	db	0
   232   000E26  00                 	db	0	; dummy byte at the end
   233   000000                     
   234                           ; #config settings
   235                           
   236                           	psect	cinit
   237   00492A                     __pcinit:
   238                           	callstack 0
   239   00492A                     start_initialization:
   240                           	callstack 0
   241   00492A                     __initialization:
   242                           	callstack 0
   243                           
   244                           ; Initialize objects allocated to BANK0 (4 bytes)
   245                           ; load TBLPTR registers with __pidataBANK0
   246   00492A  0E9E               	movlw	low __pidataBANK0
   247   00492C  6EF6               	movwf	tblptrl,c
   248   00492E  0E4C               	movlw	high __pidataBANK0
   249   004930  6EF7               	movwf	tblptrh,c
   250   004932  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   251   004934  6EF8               	movwf	tblptru,c
   252   004936  EE00  F0ED         	lfsr	0,__pdataBANK0
   253   00493A  EE10 F004          	lfsr	1,4
   254   00493E                     copy_data0:
   255   00493E  0009               	tblrd		*+
   256   004940  CFF5 FFEE          	movff	tablat,postinc0
   257   004944  50E5               	movf	postdec1,w,c
   258   004946  50E1               	movf	fsr1l,w,c
   259   004948  E1FA               	bnz	copy_data0
   260                           
   261                           ; Clear objects allocated to BANK1 (92 bytes)
   262   00494A  EE01  F09A         	lfsr	0,__pbssBANK1
   263   00494E  0E5C               	movlw	92
   264   004950                     clear_0:
   265   004950  6AEE               	clrf	postinc0,c
   266   004952  06E8               	decf	wreg,f,c
   267   004954  E1FD               	bnz	clear_0
   268                           
   269                           ; Clear objects allocated to BANK0 (29 bytes)
   270   004956  EE00  F0D0         	lfsr	0,__pbssBANK0
   271   00495A  0E1D               	movlw	29
   272   00495C                     clear_1:
   273   00495C  6AEE               	clrf	postinc0,c
   274   00495E  06E8               	decf	wreg,f,c
   275   004960  E1FD               	bnz	clear_1
   276                           
   277                           ; Clear objects allocated to COMRAM (4 bytes)
   278   004962  6A5A               	clrf	(__pbssCOMRAM+3)& (0+255),c
   279   004964  6A59               	clrf	(__pbssCOMRAM+2)& (0+255),c
   280   004966  6A58               	clrf	(__pbssCOMRAM+1)& (0+255),c
   281   004968  6A57               	clrf	__pbssCOMRAM& (0+255),c
   282   00496A                     end_of_initialization:
   283                           	callstack 0
   284   00496A                     __end_of__initialization:
   285                           	callstack 0
   286   00496A  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   287   00496C  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   288   00496E  0100               	movlb	0
   289   004970  EF5E  F00F         	goto	_main	;jump to C main() function
   290                           
   291                           	psect	bssCOMRAM
   292   000057                     __pbssCOMRAM:
   293                           	callstack 0
   294   000057                     _TxBufReadCnt:
   295                           	callstack 0
   296   000057                     	ds	1
   297   000058                     _TxBufWriteCnt:
   298                           	callstack 0
   299   000058                     	ds	1
   300   000059                     _RxBufReadCnt:
   301                           	callstack 0
   302   000059                     	ds	1
   303   00005A                     _RxBufWriteCnt:
   304                           	callstack 0
   305   00005A                     	ds	1
   306                           
   307                           	psect	bssBANK0
   308   0000D0                     __pbssBANK0:
   309                           	callstack 0
   310   0000D0                     _EUSART4RXbuf:
   311                           	callstack 0
   312   0000D0                     	ds	20
   313   0000E4                     _width:
   314                           	callstack 0
   315   0000E4                     	ds	2
   316   0000E6                     _prec:
   317                           	callstack 0
   318   0000E6                     	ds	2
   319   0000E8                     _off_period:
   320                           	callstack 0
   321   0000E8                     	ds	2
   322   0000EA                     _on_period:
   323                           	callstack 0
   324   0000EA                     	ds	2
   325   0000EC                     _flags:
   326                           	callstack 0
   327   0000EC                     	ds	1
   328                           
   329                           	psect	dataBANK0
   330   0000ED                     __pdataBANK0:
   331                           	callstack 0
   332   0000ED                     _reverse_time:
   333                           	callstack 0
   334   0000ED                     	ds	2
   335   0000EF                     _turning_time45:
   336                           	callstack 0
   337   0000EF                     	ds	2
   338                           
   339                           	psect	bssBANK1
   340   00019A                     __pbssBANK1:
   341                           	callstack 0
   342   00019A                     _EUSART4TXbuf:
   343                           	callstack 0
   344   00019A                     	ds	60
   345   0001D6                     _dbuf:
   346                           	callstack 0
   347   0001D6                     	ds	32
   348                           
   349                           	psect	cstackBANK3
   350   000300                     __pcstackBANK3:
   351                           	callstack 0
   352   000300                     main@counter_history:
   353                           	callstack 0
   354                           
   355                           ; 200 bytes @ 0x0
   356   000300                     	ds	200
   357                           
   358                           	psect	cstackBANK2
   359   000200                     __pcstackBANK2:
   360                           	callstack 0
   361   000200                     main@turn_history:
   362                           	callstack 0
   363                           
   364                           ; 200 bytes @ 0x0
   365   000200                     	ds	200
   366                           
   367                           	psect	cstackBANK1
   368   000100                     __pcstackBANK1:
   369                           	callstack 0
   370   000100                     return_home_turns@string1:
   371                           	callstack 0
   372                           
   373                           ; 150 bytes @ 0x0
   374   000100                     	ds	150
   375   000196                     return_home_turns@i:
   376                           	callstack 0
   377                           
   378                           ; 2 bytes @ 0x96
   379   000196                     	ds	2
   380   000198                     return_home_turns@k:
   381                           	callstack 0
   382                           
   383                           ; 2 bytes @ 0x98
   384   000198                     	ds	2
   385                           
   386                           	psect	cstackBANK0
   387   000060                     __pcstackBANK0:
   388                           	callstack 0
   389   000060                     ?_vfprintf:
   390                           	callstack 0
   391   000060                     ?_colorDetect:
   392                           	callstack 0
   393   000060                     vfprintf@fp:
   394                           	callstack 0
   395   000060                     colorDetect@clearRef:
   396                           	callstack 0
   397                           
   398                           ; 4 bytes @ 0x0
   399   000060                     	ds	2
   400   000062                     vfprintf@fmt:
   401                           	callstack 0
   402                           
   403                           ; 2 bytes @ 0x2
   404   000062                     	ds	2
   405   000064                     colorDetect@ambientRGBVal:
   406                           	callstack 0
   407   000064                     vfprintf@ap:
   408                           	callstack 0
   409                           
   410                           ; 2 bytes @ 0x4
   411   000064                     	ds	2
   412   000066                     ?_sprintf:
   413                           	callstack 0
   414   000066                     colorDetect@whiteRGBVal:
   415                           	callstack 0
   416   000066                     sprintf@s:
   417                           	callstack 0
   418                           
   419                           ; 2 bytes @ 0x6
   420   000066                     	ds	2
   421   000068                     colorDetect@mL:
   422                           	callstack 0
   423   000068                     sprintf@fmt:
   424                           	callstack 0
   425                           
   426                           ; 2 bytes @ 0x8
   427   000068                     	ds	2
   428   00006A                     colorDetect@mR:
   429                           	callstack 0
   430                           
   431                           ; 2 bytes @ 0xA
   432   00006A                     	ds	2
   433   00006C                     colorDetect@whiteR:
   434                           	callstack 0
   435                           
   436                           ; 4 bytes @ 0xC
   437   00006C                     	ds	4
   438   000070                     colorDetect@whiteG:
   439                           	callstack 0
   440                           
   441                           ; 4 bytes @ 0x10
   442   000070                     	ds	2
   443   000072                     sprintf@ap:
   444                           	callstack 0
   445                           
   446                           ; 2 bytes @ 0x12
   447   000072                     	ds	2
   448   000074                     colorDetect@whiteB:
   449                           	callstack 0
   450   000074                     sprintf@f:
   451                           	callstack 0
   452                           
   453                           ; 11 bytes @ 0x14
   454   000074                     	ds	4
   455   000078                     colorDetect@ambientR:
   456                           	callstack 0
   457                           
   458                           ; 2 bytes @ 0x18
   459   000078                     	ds	2
   460   00007A                     colorDetect@ambientG:
   461                           	callstack 0
   462                           
   463                           ; 2 bytes @ 0x1A
   464   00007A                     	ds	2
   465   00007C                     colorDetect@ambientB:
   466                           	callstack 0
   467                           
   468                           ; 2 bytes @ 0x1C
   469   00007C                     	ds	2
   470   00007E                     colorDetect@colour_ref:
   471                           	callstack 0
   472                           
   473                           ; 2 bytes @ 0x1E
   474   00007E                     	ds	1
   475   00007F                     return_home_turns@turn_history:
   476                           	callstack 0
   477                           
   478                           ; 2 bytes @ 0x1F
   479   00007F                     	ds	1
   480   000080                     colorDetect@RGBVal:
   481                           	callstack 0
   482                           
   483                           ; 8 bytes @ 0x20
   484   000080                     	ds	1
   485   000081                     return_home_turns@counter_history:
   486                           	callstack 0
   487                           
   488                           ; 2 bytes @ 0x21
   489   000081                     	ds	2
   490   000083                     return_home_turns@index:
   491                           	callstack 0
   492                           
   493                           ; 2 bytes @ 0x23
   494   000083                     	ds	2
   495   000085                     return_home_turns@mL:
   496                           	callstack 0
   497                           
   498                           ; 2 bytes @ 0x25
   499   000085                     	ds	2
   500   000087                     return_home_turns@mR:
   501                           	callstack 0
   502                           
   503                           ; 2 bytes @ 0x27
   504   000087                     	ds	1
   505   000088                     colorDetect@redPrint:
   506                           	callstack 0
   507                           
   508                           ; 4 bytes @ 0x28
   509   000088                     	ds	1
   510   000089                     ??_return_home_turns:
   511                           
   512                           ; 1 bytes @ 0x29
   513   000089                     	ds	3
   514   00008C                     colorDetect@greenPrint:
   515                           	callstack 0
   516                           
   517                           ; 4 bytes @ 0x2C
   518   00008C                     	ds	4
   519   000090                     colorDetect@bluePrint:
   520                           	callstack 0
   521                           
   522                           ; 4 bytes @ 0x30
   523   000090                     	ds	4
   524   000094                     ??_main:
   525                           
   526                           ; 1 bytes @ 0x34
   527   000094                     	ds	3
   528   000097                     main@whiteC:
   529                           	callstack 0
   530                           
   531                           ; 4 bytes @ 0x37
   532   000097                     	ds	4
   533   00009B                     main@clearRef:
   534                           	callstack 0
   535                           
   536                           ; 4 bytes @ 0x3B
   537   00009B                     	ds	4
   538   00009F                     main@forwardCount:
   539                           	callstack 0
   540                           
   541                           ; 2 bytes @ 0x3F
   542   00009F                     	ds	2
   543   0000A1                     main@colorNum:
   544                           	callstack 0
   545                           
   546                           ; 2 bytes @ 0x41
   547   0000A1                     	ds	2
   548   0000A3                     main@RGBVal:
   549                           	callstack 0
   550                           
   551                           ; 8 bytes @ 0x43
   552   0000A3                     	ds	8
   553   0000AB                     main@carGo:
   554                           	callstack 0
   555                           
   556                           ; 1 bytes @ 0x4B
   557   0000AB                     	ds	1
   558   0000AC                     main@ambientRGBVal:
   559                           	callstack 0
   560                           
   561                           ; 8 bytes @ 0x4C
   562   0000AC                     	ds	8
   563   0000B4                     main@whiteRGBVal:
   564                           	callstack 0
   565                           
   566                           ; 8 bytes @ 0x54
   567   0000B4                     	ds	8
   568   0000BC                     main@index:
   569                           	callstack 0
   570                           
   571                           ; 2 bytes @ 0x5C
   572   0000BC                     	ds	2
   573   0000BE                     main@motorRight:
   574                           	callstack 0
   575                           
   576                           ; 9 bytes @ 0x5E
   577   0000BE                     	ds	9
   578   0000C7                     main@motorLeft:
   579                           	callstack 0
   580                           
   581                           ; 9 bytes @ 0x67
   582   0000C7                     	ds	9
   583                           
   584                           	psect	cstackCOMRAM
   585   000001                     __pcstackCOMRAM:
   586                           	callstack 0
   587   000001                     ??_getCharFromTxBuf:
   588   000001                     putCharToRxBuf@byte:
   589                           	callstack 0
   590   000001                     
   591                           ; 1 bytes @ 0x0
   592   000001                     	ds	2
   593   000003                     ??_HighISR:
   594                           
   595                           ; 1 bytes @ 0x2
   596   000003                     	ds	2
   597   000005                     ??_I2C_2_Master_Idle:
   598   000005                     ?___wmul:
   599                           	callstack 0
   600   000005                     ?___fladd:
   601                           	callstack 0
   602   000005                     ?___xxtofl:
   603                           	callstack 0
   604   000005                     ?___aodiv:
   605                           	callstack 0
   606   000005                     ?___aomod:
   607                           	callstack 0
   608   000005                     putCharToTxBuf@byte:
   609                           	callstack 0
   610   000005                     initDCmotorsPWM@PWMperiod:
   611                           	callstack 0
   612   000005                     DCmotorsInit@mL:
   613                           	callstack 0
   614   000005                     ___wmul@multiplier:
   615                           	callstack 0
   616   000005                     fputc@c:
   617                           	callstack 0
   618   000005                     ___fladd@b:
   619                           	callstack 0
   620   000005                     ___xxtofl@val:
   621                           	callstack 0
   622   000005                     ___aodiv@dividend:
   623                           	callstack 0
   624   000005                     ___aomod@dividend:
   625                           	callstack 0
   626                           
   627                           ; 8 bytes @ 0x4
   628   000005                     	ds	1
   629   000006                     ??_I2C_2_Master_Read:
   630   000006                     I2C_2_Master_Write@data_byte:
   631                           	callstack 0
   632   000006                     TxBufferedString@string:
   633                           	callstack 0
   634                           
   635                           ; 2 bytes @ 0x5
   636   000006                     	ds	1
   637   000007                     color_writetoaddr@value:
   638                           	callstack 0
   639   000007                     I2C_2_Master_Read@ack:
   640                           	callstack 0
   641   000007                     DCmotorsInit@mR:
   642                           	callstack 0
   643   000007                     ___wmul@multiplicand:
   644                           	callstack 0
   645   000007                     fputc@fp:
   646                           	callstack 0
   647                           
   648                           ; 2 bytes @ 0x6
   649   000007                     	ds	1
   650   000008                     color_writetoaddr@address:
   651                           	callstack 0
   652   000008                     I2C_2_Master_Read@tmp:
   653                           	callstack 0
   654                           
   655                           ; 1 bytes @ 0x7
   656   000008                     	ds	1
   657   000009                     ??_fputc:
   658   000009                     ??_color_click_init:
   659   000009                     ??___xxtofl:
   660   000009                     ?_color_read_Red:
   661                           	callstack 0
   662   000009                     ?_color_read_Green:
   663                           	callstack 0
   664   000009                     ?_color_read_Blue:
   665                           	callstack 0
   666   000009                     ?_color_read_Clear:
   667                           	callstack 0
   668   000009                     ___wmul@product:
   669                           	callstack 0
   670   000009                     ___fladd@a:
   671                           	callstack 0
   672                           
   673                           ; 4 bytes @ 0x8
   674   000009                     	ds	2
   675   00000B                     ??_color_read_Red:
   676   00000B                     ??_color_read_Green:
   677   00000B                     ??_color_read_Blue:
   678   00000B                     ??_color_read_Clear:
   679   00000B                     ?___lwdiv:
   680                           	callstack 0
   681   00000B                     ___lwdiv@dividend:
   682                           	callstack 0
   683                           
   684                           ; 2 bytes @ 0xA
   685   00000B                     	ds	2
   686   00000D                     ??___fladd:
   687   00000D                     ___xxtofl@sign:
   688                           	callstack 0
   689   00000D                     ___lwdiv@divisor:
   690                           	callstack 0
   691   00000D                     ___aodiv@divisor:
   692                           	callstack 0
   693   00000D                     ___aomod@divisor:
   694                           	callstack 0
   695                           
   696                           ; 8 bytes @ 0xC
   697   00000D                     	ds	1
   698   00000E                     ___xxtofl@exp:
   699                           	callstack 0
   700   00000E                     color_read_Red@tmp:
   701                           	callstack 0
   702   00000E                     color_read_Green@tmp:
   703                           	callstack 0
   704   00000E                     color_read_Blue@tmp:
   705                           	callstack 0
   706   00000E                     color_read_Clear@tmp:
   707                           	callstack 0
   708   00000E                     fputs@s:
   709                           	callstack 0
   710                           
   711                           ; 2 bytes @ 0xD
   712   00000E                     	ds	1
   713   00000F                     ___lwdiv@quotient:
   714                           	callstack 0
   715   00000F                     ___xxtofl@arg:
   716                           	callstack 0
   717                           
   718                           ; 4 bytes @ 0xE
   719   00000F                     	ds	1
   720   000010                     getColor@v:
   721                           	callstack 0
   722   000010                     fputs@fp:
   723                           	callstack 0
   724                           
   725                           ; 2 bytes @ 0xF
   726   000010                     	ds	1
   727   000011                     ___lwdiv@counter:
   728                           	callstack 0
   729   000011                     ___fladd@signs:
   730                           	callstack 0
   731                           
   732                           ; 1 bytes @ 0x10
   733   000011                     	ds	1
   734   000012                     ___fladd@aexp:
   735                           	callstack 0
   736   000012                     fputs@c:
   737                           	callstack 0
   738   000012                     ambientCal@v:
   739                           	callstack 0
   740   000012                     whiteCal@v:
   741                           	callstack 0
   742   000012                     setMotorPWM@m:
   743                           	callstack 0
   744                           
   745                           ; 2 bytes @ 0x11
   746   000012                     	ds	1
   747   000013                     ___fladd@bexp:
   748                           	callstack 0
   749   000013                     fputs@i:
   750                           	callstack 0
   751                           
   752                           ; 2 bytes @ 0x12
   753   000013                     	ds	1
   754   000014                     ??_ambientCal:
   755   000014                     ??_whiteCal:
   756   000014                     ??_setMotorPWM:
   757   000014                     ___fladd@grs:
   758                           	callstack 0
   759                           
   760                           ; 1 bytes @ 0x13
   761   000014                     	ds	1
   762   000015                     ?___flsub:
   763                           	callstack 0
   764   000015                     ___aodiv@counter:
   765                           	callstack 0
   766   000015                     ___aomod@counter:
   767                           	callstack 0
   768   000015                     pad@fp:
   769                           	callstack 0
   770   000015                     ___flsub@b:
   771                           	callstack 0
   772                           
   773                           ; 4 bytes @ 0x14
   774   000015                     	ds	1
   775   000016                     setMotorPWM@posDuty:
   776                           	callstack 0
   777   000016                     ___aodiv@sign:
   778                           	callstack 0
   779   000016                     ___aomod@sign:
   780                           	callstack 0
   781   000016                     ambientCal@i:
   782                           	callstack 0
   783   000016                     whiteCal@i:
   784                           	callstack 0
   785                           
   786                           ; 2 bytes @ 0x15
   787   000016                     	ds	1
   788   000017                     ?_abs:
   789                           	callstack 0
   790   000017                     setMotorPWM@negDuty:
   791                           	callstack 0
   792   000017                     pad@buf:
   793                           	callstack 0
   794   000017                     abs@a:
   795                           	callstack 0
   796   000017                     ___aodiv@quotient:
   797                           	callstack 0
   798                           
   799                           ; 8 bytes @ 0x16
   800   000017                     	ds	1
   801   000018                     stop@mL:
   802                           	callstack 0
   803   000018                     forward@mL:
   804                           	callstack 0
   805   000018                     reverse@mL:
   806                           	callstack 0
   807                           
   808                           ; 2 bytes @ 0x17
   809   000018                     	ds	1
   810   000019                     ??_abs:
   811   000019                     pad@p:
   812                           	callstack 0
   813   000019                     ___flsub@a:
   814                           	callstack 0
   815                           
   816                           ; 4 bytes @ 0x18
   817   000019                     	ds	1
   818   00001A                     stop@mR:
   819                           	callstack 0
   820   00001A                     forward@mR:
   821                           	callstack 0
   822   00001A                     reverse@mR:
   823                           	callstack 0
   824                           
   825                           ; 2 bytes @ 0x19
   826   00001A                     	ds	1
   827   00001B                     ??_pad:
   828                           
   829                           ; 1 bytes @ 0x1A
   830   00001B                     	ds	1
   831   00001C                     ??_stop:
   832   00001C                     pad@i:
   833                           	callstack 0
   834                           
   835                           ; 2 bytes @ 0x1B
   836   00001C                     	ds	1
   837   00001D                     ?___flmul:
   838                           	callstack 0
   839   00001D                     ___flge@ff1:
   840                           	callstack 0
   841   00001D                     ___flmul@b:
   842                           	callstack 0
   843                           
   844                           ; 4 bytes @ 0x1C
   845   00001D                     	ds	1
   846   00001E                     turnLeft_90@mL:
   847                           	callstack 0
   848   00001E                     turnRight_90@mL:
   849                           	callstack 0
   850   00001E                     turn_180@mL:
   851                           	callstack 0
   852   00001E                     turnRight_135@mL:
   853                           	callstack 0
   854   00001E                     turnLeft_135@mL:
   855                           	callstack 0
   856   00001E                     pad@w:
   857                           	callstack 0
   858                           
   859                           ; 2 bytes @ 0x1D
   860   00001E                     	ds	2
   861   000020                     turnLeft_90@mR:
   862                           	callstack 0
   863   000020                     turnRight_90@mR:
   864                           	callstack 0
   865   000020                     turn_180@mR:
   866                           	callstack 0
   867   000020                     turnRight_135@mR:
   868                           	callstack 0
   869   000020                     turnLeft_135@mR:
   870                           	callstack 0
   871   000020                     dtoa@fp:
   872                           	callstack 0
   873                           
   874                           ; 2 bytes @ 0x1F
   875   000020                     	ds	1
   876   000021                     ___flge@ff2:
   877                           	callstack 0
   878   000021                     ___flmul@a:
   879                           	callstack 0
   880                           
   881                           ; 4 bytes @ 0x20
   882   000021                     	ds	1
   883   000022                     ??_turnRight_90:
   884   000022                     ??_turnLeft_90:
   885   000022                     ??_turn_180:
   886   000022                     ??_turnRight_135:
   887   000022                     ??_turnLeft_135:
   888   000022                     dtoa@d:
   889                           	callstack 0
   890                           
   891                           ; 8 bytes @ 0x21
   892   000022                     	ds	2
   893   000024                     reverseSquareRight@mL:
   894                           	callstack 0
   895   000024                     reverseSquareLeft@mL:
   896                           	callstack 0
   897                           
   898                           ; 2 bytes @ 0x23
   899   000024                     	ds	1
   900   000025                     ??___flmul:
   901   000025                     ??___flge:
   902                           
   903                           ; 1 bytes @ 0x24
   904   000025                     	ds	1
   905   000026                     reverseSquareRight@mR:
   906                           	callstack 0
   907   000026                     reverseSquareLeft@mR:
   908                           	callstack 0
   909                           
   910                           ; 2 bytes @ 0x25
   911   000026                     	ds	2
   912   000028                     ??_reverseSquareRight:
   913   000028                     ??_reverseSquareLeft:
   914                           
   915                           ; 1 bytes @ 0x27
   916   000028                     	ds	1
   917   000029                     ___flmul@sign:
   918                           	callstack 0
   919                           
   920                           ; 1 bytes @ 0x28
   921   000029                     	ds	1
   922   00002A                     ??_dtoa:
   923   00002A                     ___flmul@grs:
   924                           	callstack 0
   925                           
   926                           ; 4 bytes @ 0x29
   927   00002A                     	ds	4
   928   00002E                     ___flmul@aexp:
   929                           	callstack 0
   930                           
   931                           ; 1 bytes @ 0x2D
   932   00002E                     	ds	1
   933   00002F                     ___flmul@bexp:
   934                           	callstack 0
   935                           
   936                           ; 1 bytes @ 0x2E
   937   00002F                     	ds	1
   938   000030                     ___flmul@prod:
   939                           	callstack 0
   940                           
   941                           ; 4 bytes @ 0x2F
   942   000030                     	ds	2
   943   000032                     _dtoa$2702:
   944                           	callstack 0
   945                           
   946                           ; 2 bytes @ 0x31
   947   000032                     	ds	2
   948   000034                     ___flmul@temp:
   949                           	callstack 0
   950   000034                     dtoa@p:
   951                           	callstack 0
   952                           
   953                           ; 2 bytes @ 0x33
   954   000034                     	ds	2
   955   000036                     ?___fldiv:
   956                           	callstack 0
   957   000036                     dtoa@w:
   958                           	callstack 0
   959   000036                     ___fldiv@b:
   960                           	callstack 0
   961                           
   962                           ; 4 bytes @ 0x35
   963   000036                     	ds	2
   964   000038                     dtoa@n:
   965                           	callstack 0
   966                           
   967                           ; 8 bytes @ 0x37
   968   000038                     	ds	2
   969   00003A                     ___fldiv@a:
   970                           	callstack 0
   971                           
   972                           ; 4 bytes @ 0x39
   973   00003A                     	ds	4
   974   00003E                     ??___fldiv:
   975                           
   976                           ; 1 bytes @ 0x3D
   977   00003E                     	ds	2
   978   000040                     dtoa@s:
   979                           	callstack 0
   980                           
   981                           ; 1 bytes @ 0x3F
   982   000040                     	ds	1
   983   000041                     dtoa@i:
   984                           	callstack 0
   985                           
   986                           ; 2 bytes @ 0x40
   987   000041                     	ds	1
   988   000042                     ___fldiv@rem:
   989                           	callstack 0
   990                           
   991                           ; 4 bytes @ 0x41
   992   000042                     	ds	1
   993   000043                     vfpfcnvrt@fp:
   994                           	callstack 0
   995                           
   996                           ; 2 bytes @ 0x42
   997   000043                     	ds	2
   998   000045                     vfpfcnvrt@fmt:
   999                           	callstack 0
  1000                           
  1001                           ; 2 bytes @ 0x44
  1002   000045                     	ds	1
  1003   000046                     ___fldiv@sign:
  1004                           	callstack 0
  1005                           
  1006                           ; 1 bytes @ 0x45
  1007   000046                     	ds	1
  1008   000047                     ___fldiv@new_exp:
  1009                           	callstack 0
  1010   000047                     vfpfcnvrt@ap:
  1011                           	callstack 0
  1012                           
  1013                           ; 2 bytes @ 0x46
  1014   000047                     	ds	2
  1015   000049                     ??_vfpfcnvrt:
  1016   000049                     ___fldiv@grs:
  1017                           	callstack 0
  1018                           
  1019                           ; 4 bytes @ 0x48
  1020   000049                     	ds	2
  1021   00004B                     vfpfcnvrt@convarg:
  1022                           	callstack 0
  1023                           
  1024                           ; 8 bytes @ 0x4A
  1025   00004B                     	ds	2
  1026   00004D                     ___fldiv@bexp:
  1027                           	callstack 0
  1028                           
  1029                           ; 1 bytes @ 0x4C
  1030   00004D                     	ds	1
  1031   00004E                     ___fldiv@aexp:
  1032                           	callstack 0
  1033                           
  1034                           ; 1 bytes @ 0x4D
  1035   00004E                     	ds	1
  1036   00004F                     ??_colorDetect:
  1037                           
  1038                           ; 1 bytes @ 0x4E
  1039   00004F                     	ds	4
  1040   000053                     vfpfcnvrt@cp:
  1041                           	callstack 0
  1042                           
  1043                           ; 2 bytes @ 0x52
  1044   000053                     	ds	2
  1045   000055                     vfprintf@cfmt:
  1046                           	callstack 0
  1047                           
  1048                           ; 2 bytes @ 0x54
  1049   000055                     	ds	2
  1050   000057                     
  1051                           ; 1 bytes @ 0x56
  1052 ;;
  1053 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1054 ;;
  1055 ;; *************** function _main *****************
  1056 ;; Defined at:
  1057 ;;		line 23 in file "MazeRobot.X/main.c"
  1058 ;; Parameters:    Size  Location     Type
  1059 ;;		None
  1060 ;; Auto vars:     Size  Location     Type
  1061 ;;  turn_history  200    0[BANK2 ] unsigned int [100]
  1062 ;;  counter_hist  200    0[BANK3 ] unsigned int [100]
  1063 ;;  motorLeft       9  103[BANK0 ] struct DC_motor
  1064 ;;  motorRight      9   94[BANK0 ] struct DC_motor
  1065 ;;  whiteRGBVal     8   84[BANK0 ] struct RGB
  1066 ;;  ambientRGBVa    8   76[BANK0 ] struct RGB
  1067 ;;  RGBVal          8   67[BANK0 ] struct RGB
  1068 ;;  clearRef        4   59[BANK0 ] struct RGB
  1069 ;;  whiteC          4   55[BANK0 ] struct RGB
  1070 ;;  index           2   92[BANK0 ] unsigned int 
  1071 ;;  colorNum        2   65[BANK0 ] unsigned int 
  1072 ;;  forwardCount    2   63[BANK0 ] unsigned int 
  1073 ;;  carGo           1   75[BANK0 ] unsigned char 
  1074 ;; Return value:  Size  Location     Type
  1075 ;;                  1    wreg      void 
  1076 ;; Registers used:
  1077 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1078 ;; Tracked objects:
  1079 ;;		On entry : 0/0
  1080 ;;		On exit  : 0/0
  1081 ;;		Unchanged: 0/0
  1082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1084 ;;      Locals:         0      57       0     200     200       0       0       0       0       0       0       0       
      +0       0       0
  1085 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1086 ;;      Totals:         0      60       0     200     200       0       0       0       0       0       0       0       
      +0       0       0
  1087 ;;Total ram usage:      460 bytes
  1088 ;; Hardware stack levels required when called: 11
  1089 ;; This function calls:
  1090 ;;		_DCmotorsInit
  1091 ;;		___fldiv
  1092 ;;		___flge
  1093 ;;		___xxtofl
  1094 ;;		_ambientCal
  1095 ;;		_colorDetect
  1096 ;;		_color_click_init
  1097 ;;		_forward
  1098 ;;		_getColor
  1099 ;;		_initDCmotorsPWM
  1100 ;;		_initUSART4
  1101 ;;		_return_home_turns
  1102 ;;		_stop
  1103 ;;		_turn_180
  1104 ;;		_whiteCal
  1105 ;; This function is called by:
  1106 ;;		Startup code after reset
  1107 ;; This function uses a non-reentrant model
  1108 ;;
  1109                           
  1110                           	psect	text0
  1111   001EBC                     __ptext0:
  1112                           	callstack 0
  1113   001EBC                     _main:
  1114                           	callstack 20
  1115   001EBC                     
  1116                           ;MazeRobot.X/main.c: 25:     color_click_init();
  1117   001EBC  EC40  F025         	call	_color_click_init	;wreg free
  1118   001EC0                     
  1119                           ;MazeRobot.X/main.c: 26:     initUSART4();
  1120   001EC0  EC72  F025         	call	_initUSART4	;wreg free
  1121   001EC4                     
  1122                           ;MazeRobot.X/main.c: 27:     initDCmotorsPWM(199);
  1123   001EC4  0E00               	movlw	0
  1124   001EC6  6E06               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
  1125   001EC8  0EC7               	movlw	199
  1126   001ECA  6E05               	movwf	initDCmotorsPWM@PWMperiod^0,c
  1127   001ECC  ECB4  F022         	call	_initDCmotorsPWM	;wreg free
  1128   001ED0                     
  1129                           ;MazeRobot.X/main.c: 32:     LATDbits.LATD7=0;
  1130   001ED0  9E7C               	bcf	124,7,c	;volatile
  1131   001ED2                     
  1132                           ;MazeRobot.X/main.c: 33:     TRISDbits.TRISD7=0;
  1133   001ED2  9E84               	bcf	132,7,c	;volatile
  1134   001ED4                     
  1135                           ;MazeRobot.X/main.c: 35:     LATHbits.LATH3=0;
  1136   001ED4  9680               	bcf	128,3,c	;volatile
  1137   001ED6                     
  1138                           ;MazeRobot.X/main.c: 36:     TRISHbits.TRISH3=0;
  1139   001ED6  9688               	bcf	136,3,c	;volatile
  1140   001ED8                     
  1141                           ;MazeRobot.X/main.c: 38:     LATDbits.LATD4 = 0;
  1142   001ED8  987C               	bcf	124,4,c	;volatile
  1143   001EDA                     
  1144                           ;MazeRobot.X/main.c: 39:     TRISDbits.TRISD4 = 0;
  1145   001EDA  9884               	bcf	132,4,c	;volatile
  1146   001EDC                     
  1147                           ;MazeRobot.X/main.c: 41:     LATHbits.LATH0 = 0;
  1148   001EDC  9080               	bcf	128,0,c	;volatile
  1149   001EDE                     
  1150                           ;MazeRobot.X/main.c: 42:     TRISHbits.TRISH0 = 0;
  1151   001EDE  9088               	bcf	136,0,c	;volatile
  1152   001EE0                     
  1153                           ;MazeRobot.X/main.c: 44:     LATFbits.LATF0 = 0;
  1154   001EE0  907E               	bcf	126,0,c	;volatile
  1155   001EE2                     
  1156                           ;MazeRobot.X/main.c: 45:     TRISFbits.TRISF0 = 0;
  1157   001EE2  9086               	bcf	134,0,c	;volatile
  1158   001EE4                     
  1159                           ;MazeRobot.X/main.c: 47:     LATHbits.LATH1 = 0;
  1160   001EE4  9280               	bcf	128,1,c	;volatile
  1161   001EE6                     
  1162                           ;MazeRobot.X/main.c: 48:     TRISHbits.TRISH1 = 0;
  1163   001EE6  9288               	bcf	136,1,c	;volatile
  1164   001EE8                     
  1165                           ;MazeRobot.X/main.c: 50:     LATDbits.LATD3 = 0;
  1166   001EE8  967C               	bcf	124,3,c	;volatile
  1167   001EEA                     
  1168                           ;MazeRobot.X/main.c: 51:     TRISDbits.TRISD3 = 0;
  1169   001EEA  9684               	bcf	132,3,c	;volatile
  1170   001EEC                     
  1171                           ;MazeRobot.X/main.c: 53:     LATDbits.LATD4 = 1;
  1172   001EEC  887C               	bsf	124,4,c	;volatile
  1173   001EEE                     
  1174                           ;MazeRobot.X/main.c: 54:     LATFbits.LATF0 = 1;
  1175   001EEE  807E               	bsf	126,0,c	;volatile
  1176   001EF0                     
  1177                           ;MazeRobot.X/main.c: 55:     LATHbits.LATH0 = 1;
  1178   001EF0  8080               	bsf	128,0,c	;volatile
  1179   001EF2                     
  1180                           ;MazeRobot.X/main.c: 56:     LATFbits.LATF0 = 1;
  1181   001EF2  807E               	bsf	126,0,c	;volatile
  1182   001EF4                     
  1183                           ;MazeRobot.X/main.c: 57:     LATDbits.LATD3 = 1;
  1184   001EF4  867C               	bsf	124,3,c	;volatile
  1185   001EF6                     
  1186                           ;MazeRobot.X/main.c: 59:     LATGbits.LATG0=1;
  1187   001EF6  807F               	bsf	127,0,c	;volatile
  1188   001EF8                     
  1189                           ;MazeRobot.X/main.c: 60:     LATEbits.LATE7=1;
  1190   001EF8  8E7D               	bsf	125,7,c	;volatile
  1191   001EFA                     
  1192                           ;MazeRobot.X/main.c: 61:     LATAbits.LATA3=1;
  1193   001EFA  8679               	bsf	121,3,c	;volatile
  1194   001EFC                     
  1195                           ;MazeRobot.X/main.c: 63:     TRISGbits.TRISG0=0;
  1196   001EFC  9087               	bcf	135,0,c	;volatile
  1197   001EFE                     
  1198                           ;MazeRobot.X/main.c: 64:     TRISEbits.TRISE7=0;
  1199   001EFE  9E85               	bcf	133,7,c	;volatile
  1200   001F00                     
  1201                           ;MazeRobot.X/main.c: 65:     TRISAbits.TRISA3=0;
  1202   001F00  9681               	bcf	129,3,c	;volatile
  1203   001F02                     
  1204                           ;MazeRobot.X/main.c: 68:     TRISFbits.TRISF2=1;
  1205   001F02  8486               	bsf	134,2,c	;volatile
  1206   001F04                     
  1207                           ;MazeRobot.X/main.c: 69:     ANSELFbits.ANSELF2=0;
  1208   001F04  010E               	movlb	14	; () banked
  1209   001F06  95B4               	bcf	180,2,b	;volatile
  1210   001F08                     
  1211                           ; BSR set to: 14
  1212                           ;MazeRobot.X/main.c: 71:     TRISFbits.TRISF3=1;
  1213   001F08  8686               	bsf	134,3,c	;volatile
  1214   001F0A                     
  1215                           ; BSR set to: 14
  1216                           ;MazeRobot.X/main.c: 72:     ANSELFbits.ANSELF3=0;
  1217   001F0A  97B4               	bcf	180,3,b	;volatile
  1218   001F0C                     
  1219                           ; BSR set to: 14
  1220                           ;MazeRobot.X/main.c: 79:     unsigned char carGo = 0;
  1221   001F0C  0E00               	movlw	0
  1222   001F0E  0100               	movlb	0	; () banked
  1223   001F10  6FAB               	movwf	main@carGo& (0+255),b
  1224   001F12                     
  1225                           ; BSR set to: 0
  1226                           ;MazeRobot.X/main.c: 81:     DC_motor motorLeft,motorRight;;MazeRobot.X/main.c: 82:     
      +                          DCmotorsInit(&motorLeft,&motorRight);
  1227   001F12  0EC7               	movlw	low main@motorLeft
  1228   001F14  6E05               	movwf	DCmotorsInit@mL^0,c
  1229   001F16  0E00               	movlw	high main@motorLeft
  1230   001F18  6E06               	movwf	(DCmotorsInit@mL+1)^0,c
  1231   001F1A  0EBE               	movlw	low main@motorRight
  1232   001F1C  6E07               	movwf	DCmotorsInit@mR^0,c
  1233   001F1E  0E00               	movlw	high main@motorRight
  1234   001F20  6E08               	movwf	(DCmotorsInit@mR+1)^0,c
  1235   001F22  ECF9  F020         	call	_DCmotorsInit	;wreg free
  1236   001F26                     
  1237                           ;MazeRobot.X/main.c: 84:     unsigned int turn_history[100];;MazeRobot.X/main.c: 85:    
      +                           unsigned int counter_history[100];;MazeRobot.X/main.c: 86:     unsigned int index = 0;
  1238   001F26  0E00               	movlw	0
  1239   001F28  0100               	movlb	0	; () banked
  1240   001F2A  6FBD               	movwf	(main@index+1)& (0+255),b
  1241   001F2C  0E00               	movlw	0
  1242   001F2E  6FBC               	movwf	main@index& (0+255),b
  1243   001F30                     
  1244                           ; BSR set to: 0
  1245                           ;MazeRobot.X/main.c: 87:     unsigned int forwardCount = 0;
  1246   001F30  0E00               	movlw	0
  1247   001F32  6FA0               	movwf	(main@forwardCount+1)& (0+255),b
  1248   001F34  0E00               	movlw	0
  1249   001F36  6F9F               	movwf	main@forwardCount& (0+255),b
  1250   001F38                     
  1251                           ; BSR set to: 0
  1252                           ;MazeRobot.X/main.c: 90:     ambientCal(&ambientRGBVal);
  1253   001F38  0EAC               	movlw	low main@ambientRGBVal
  1254   001F3A  6E12               	movwf	ambientCal@v^0,c
  1255   001F3C  0E00               	movlw	high main@ambientRGBVal
  1256   001F3E  6E13               	movwf	(ambientCal@v+1)^0,c
  1257   001F40  ECB1  F01F         	call	_ambientCal	;wreg free
  1258   001F44                     l5385:
  1259                           
  1260                           ;MazeRobot.X/main.c: 93:         getColor(&RGBVal);
  1261   001F44  0EA3               	movlw	low main@RGBVal
  1262   001F46  6E10               	movwf	getColor@v^0,c
  1263   001F48  0E00               	movlw	high main@RGBVal
  1264   001F4A  6E11               	movwf	(getColor@v+1)^0,c
  1265   001F4C  EC73  F023         	call	_getColor	;wreg free
  1266   001F50                     
  1267                           ;MazeRobot.X/main.c: 95:         if(!PORTFbits.RF2 && !PORTFbits.RF3){
  1268   001F50  B48E               	btfsc	142,2,c	;volatile
  1269   001F52  EFAD  F00F         	goto	u5881
  1270   001F56  EFAF  F00F         	goto	u5880
  1271   001F5A                     u5881:
  1272   001F5A  EFD2  F00F         	goto	l5401
  1273   001F5E                     u5880:
  1274   001F5E  B68E               	btfsc	142,3,c	;volatile
  1275   001F60  EFB4  F00F         	goto	u5891
  1276   001F64  EFB6  F00F         	goto	u5890
  1277   001F68                     u5891:
  1278   001F68  EFD2  F00F         	goto	l5401
  1279   001F6C                     u5890:
  1280   001F6C                     
  1281                           ;MazeRobot.X/main.c: 96:             LATDbits.LATD7 = 1 , LATHbits.LATH3 = 1;
  1282   001F6C  8E7C               	bsf	124,7,c	;volatile
  1283   001F6E  8680               	bsf	128,3,c	;volatile
  1284   001F70                     
  1285                           ;MazeRobot.X/main.c: 97:             _delay((unsigned long)((500)*(64000000/4000.0)));
  1286   001F70  0E29               	movlw	41
  1287   001F72  0100               	movlb	0	; () banked
  1288   001F74  6F95               	movwf	(??_main+1)& (0+255),b
  1289   001F76  0E96               	movlw	150
  1290   001F78  6F94               	movwf	??_main& (0+255),b
  1291   001F7A  0E7F               	movlw	127
  1292   001F7C                     u6107:
  1293   001F7C  2EE8               	decfsz	wreg,f,c
  1294   001F7E  D7FE               	bra	u6107
  1295   001F80  2F94               	decfsz	??_main& (0+255),f,b
  1296   001F82  D7FC               	bra	u6107
  1297   001F84  2F95               	decfsz	(??_main+1)& (0+255),f,b
  1298   001F86  D7FA               	bra	u6107
  1299   001F88                     
  1300                           ;MazeRobot.X/main.c: 98:             LATDbits.LATD7 = 0 , LATHbits.LATH3 = 0;
  1301   001F88  9E7C               	bcf	124,7,c	;volatile
  1302   001F8A  9680               	bcf	128,3,c	;volatile
  1303   001F8C                     
  1304                           ;MazeRobot.X/main.c: 99:             carGo = !carGo;
  1305   001F8C  0100               	movlb	0	; () banked
  1306   001F8E  51AB               	movf	main@carGo& (0+255),w,b
  1307   001F90  B4D8               	btfsc	status,2,c
  1308   001F92  EFCD  F00F         	goto	u5901
  1309   001F96  EFD0  F00F         	goto	u5900
  1310   001F9A                     u5901:
  1311   001F9A  0E01               	movlw	1
  1312   001F9C  EFD1  F00F         	goto	u5910
  1313   001FA0                     u5900:
  1314   001FA0  0E00               	movlw	0
  1315   001FA2                     u5910:
  1316   001FA2  6FAB               	movwf	main@carGo& (0+255),b
  1317   001FA4                     l5401:
  1318                           
  1319                           ;MazeRobot.X/main.c: 103:         if (!PORTFbits.RF2 & PORTFbits.RF3){
  1320   001FA4  A48E               	btfss	142,2,c	;volatile
  1321   001FA6  EFD7  F00F         	goto	u5921
  1322   001FAA  EFDA  F00F         	goto	u5920
  1323   001FAE                     u5921:
  1324   001FAE  0E01               	movlw	1
  1325   001FB0  EFDB  F00F         	goto	u5930
  1326   001FB4                     u5920:
  1327   001FB4  0E00               	movlw	0
  1328   001FB6                     u5930:
  1329   001FB6  0100               	movlb	0	; () banked
  1330   001FB8  6F94               	movwf	??_main& (0+255),b
  1331   001FBA  6B95               	clrf	(??_main+1)& (0+255),b
  1332   001FBC  B68E               	btfsc	142,3,c	;volatile
  1333   001FBE  EFE3  F00F         	goto	u5941
  1334   001FC2  EFE7  F00F         	goto	u5940
  1335   001FC6                     u5941:
  1336   001FC6  6B96               	clrf	(??_main+2)& (0+255),b
  1337   001FC8  2B96               	incf	(??_main+2)& (0+255),f,b
  1338   001FCA  EFE9  F00F         	goto	u5948
  1339   001FCE                     u5940:
  1340   001FCE  0100               	movlb	0	; () banked
  1341   001FD0  6B96               	clrf	(??_main+2)& (0+255),b
  1342   001FD2                     u5948:
  1343   001FD2  5196               	movf	(??_main+2)& (0+255),w,b
  1344   001FD4  1794               	andwf	??_main& (0+255),f,b
  1345   001FD6  0E00               	movlw	0
  1346   001FD8  1795               	andwf	(??_main+1)& (0+255),f,b
  1347   001FDA  5194               	movf	??_main& (0+255),w,b
  1348   001FDC  1195               	iorwf	(??_main+1)& (0+255),w,b
  1349   001FDE  B4D8               	btfsc	status,2,c
  1350   001FE0  EFF4  F00F         	goto	u5951
  1351   001FE4  EFF6  F00F         	goto	u5950
  1352   001FE8                     u5951:
  1353   001FE8  EFFC  F00F         	goto	l5405
  1354   001FEC                     u5950:
  1355   001FEC                     
  1356                           ; BSR set to: 0
  1357                           ;MazeRobot.X/main.c: 104:             ambientCal (&ambientRGBVal);
  1358   001FEC  0EAC               	movlw	low main@ambientRGBVal
  1359   001FEE  6E12               	movwf	ambientCal@v^0,c
  1360   001FF0  0E00               	movlw	high main@ambientRGBVal
  1361   001FF2  6E13               	movwf	(ambientCal@v+1)^0,c
  1362   001FF4  ECB1  F01F         	call	_ambientCal	;wreg free
  1363   001FF8                     l5405:
  1364                           
  1365                           ;MazeRobot.X/main.c: 107:         if (!PORTFbits.RF3 & PORTFbits.RF2){
  1366   001FF8  A68E               	btfss	142,3,c	;volatile
  1367   001FFA  EF01  F010         	goto	u5961
  1368   001FFE  EF04  F010         	goto	u5960
  1369   002002                     u5961:
  1370   002002  0E01               	movlw	1
  1371   002004  EF05  F010         	goto	u5970
  1372   002008                     u5960:
  1373   002008  0E00               	movlw	0
  1374   00200A                     u5970:
  1375   00200A  0100               	movlb	0	; () banked
  1376   00200C  6F94               	movwf	??_main& (0+255),b
  1377   00200E  6B95               	clrf	(??_main+1)& (0+255),b
  1378   002010  B48E               	btfsc	142,2,c	;volatile
  1379   002012  EF0D  F010         	goto	u5981
  1380   002016  EF11  F010         	goto	u5980
  1381   00201A                     u5981:
  1382   00201A  6B96               	clrf	(??_main+2)& (0+255),b
  1383   00201C  2B96               	incf	(??_main+2)& (0+255),f,b
  1384   00201E  EF13  F010         	goto	u5988
  1385   002022                     u5980:
  1386   002022  0100               	movlb	0	; () banked
  1387   002024  6B96               	clrf	(??_main+2)& (0+255),b
  1388   002026                     u5988:
  1389   002026  5196               	movf	(??_main+2)& (0+255),w,b
  1390   002028  1794               	andwf	??_main& (0+255),f,b
  1391   00202A  0E00               	movlw	0
  1392   00202C  1795               	andwf	(??_main+1)& (0+255),f,b
  1393   00202E  5194               	movf	??_main& (0+255),w,b
  1394   002030  1195               	iorwf	(??_main+1)& (0+255),w,b
  1395   002032  B4D8               	btfsc	status,2,c
  1396   002034  EF1E  F010         	goto	u5991
  1397   002038  EF20  F010         	goto	u5990
  1398   00203C                     u5991:
  1399   00203C  EF26  F010         	goto	l5409
  1400   002040                     u5990:
  1401   002040                     
  1402                           ; BSR set to: 0
  1403                           ;MazeRobot.X/main.c: 108:             whiteCal (&whiteRGBVal);
  1404   002040  0EB4               	movlw	low main@whiteRGBVal
  1405   002042  6E12               	movwf	whiteCal@v^0,c
  1406   002044  0E00               	movlw	high main@whiteRGBVal
  1407   002046  6E13               	movwf	(whiteCal@v+1)^0,c
  1408   002048  EC3F  F01F         	call	_whiteCal	;wreg free
  1409   00204C                     l5409:
  1410                           
  1411                           ;MazeRobot.X/main.c: 111:         LATHbits.LATH3=!LATHbits.LATH3;
  1412   00204C  A680               	btfss	128,3,c	;volatile
  1413   00204E  EF2B  F010         	goto	u6001
  1414   002052  EF30  F010         	goto	u6000
  1415   002056                     u6001:
  1416   002056  0100               	movlb	0	; () banked
  1417   002058  6B94               	clrf	??_main& (0+255),b
  1418   00205A  2B94               	incf	??_main& (0+255),f,b
  1419   00205C  EF32  F010         	goto	u6018
  1420   002060                     u6000:
  1421   002060  0100               	movlb	0	; () banked
  1422   002062  6B94               	clrf	??_main& (0+255),b
  1423   002064                     u6018:
  1424   002064  4794               	rlncf	??_main& (0+255),f,b
  1425   002066  4794               	rlncf	??_main& (0+255),f,b
  1426   002068  4794               	rlncf	??_main& (0+255),f,b
  1427   00206A  5080               	movf	128,w,c	;volatile
  1428   00206C  1994               	xorwf	??_main& (0+255),w,b
  1429   00206E  0BF7               	andlw	-9
  1430   002070  1994               	xorwf	??_main& (0+255),w,b
  1431   002072  6E80               	movwf	128,c	;volatile
  1432   002074                     
  1433                           ; BSR set to: 0
  1434                           ;MazeRobot.X/main.c: 113:         whiteC = whiteRGBVal.C;
  1435   002074  C0BA  F005         	movff	main@whiteRGBVal+6,___xxtofl@val
  1436   002078  C0BB  F006         	movff	main@whiteRGBVal+7,___xxtofl@val+1
  1437   00207C  6A07               	clrf	(___xxtofl@val+2)^0,c
  1438   00207E  6A08               	clrf	(___xxtofl@val+3)^0,c
  1439   002080  0E00               	movlw	0
  1440   002082  ECEF  F017         	call	___xxtofl
  1441   002086  C005  F097         	movff	?___xxtofl,main@whiteC
  1442   00208A  C006  F098         	movff	?___xxtofl+1,main@whiteC+1
  1443   00208E  C007  F099         	movff	?___xxtofl+2,main@whiteC+2
  1444   002092  C008  F09A         	movff	?___xxtofl+3,main@whiteC+3
  1445   002096                     
  1446                           ;MazeRobot.X/main.c: 114:         clearRef = RGBVal.C/whiteC;
  1447   002096  C0A9  F005         	movff	main@RGBVal+6,___xxtofl@val
  1448   00209A  C0AA  F006         	movff	main@RGBVal+7,___xxtofl@val+1
  1449   00209E  6A07               	clrf	(___xxtofl@val+2)^0,c
  1450   0020A0  6A08               	clrf	(___xxtofl@val+3)^0,c
  1451   0020A2  0E00               	movlw	0
  1452   0020A4  ECEF  F017         	call	___xxtofl
  1453   0020A8  C005  F036         	movff	?___xxtofl,___fldiv@b
  1454   0020AC  C006  F037         	movff	?___xxtofl+1,___fldiv@b+1
  1455   0020B0  C007  F038         	movff	?___xxtofl+2,___fldiv@b+2
  1456   0020B4  C008  F039         	movff	?___xxtofl+3,___fldiv@b+3
  1457   0020B8  C097  F03A         	movff	main@whiteC,___fldiv@a
  1458   0020BC  C098  F03B         	movff	main@whiteC+1,___fldiv@a+1
  1459   0020C0  C099  F03C         	movff	main@whiteC+2,___fldiv@a+2
  1460   0020C4  C09A  F03D         	movff	main@whiteC+3,___fldiv@a+3
  1461   0020C8  ECAC  F013         	call	___fldiv	;wreg free
  1462   0020CC  C036  F09B         	movff	?___fldiv,main@clearRef
  1463   0020D0  C037  F09C         	movff	?___fldiv+1,main@clearRef+1
  1464   0020D4  C038  F09D         	movff	?___fldiv+2,main@clearRef+2
  1465   0020D8  C039  F09E         	movff	?___fldiv+3,main@clearRef+3
  1466   0020DC                     
  1467                           ;MazeRobot.X/main.c: 116:         if ((clearRef > 0.12) && carGo){
  1468   0020DC  0E8F               	movlw	143
  1469   0020DE  6E1D               	movwf	___flge@ff1^0,c
  1470   0020E0  0EC2               	movlw	194
  1471   0020E2  6E1E               	movwf	(___flge@ff1+1)^0,c
  1472   0020E4  0EF5               	movlw	245
  1473   0020E6  6E1F               	movwf	(___flge@ff1+2)^0,c
  1474   0020E8  0E3D               	movlw	61
  1475   0020EA  6E20               	movwf	(___flge@ff1+3)^0,c
  1476   0020EC  C09B  F021         	movff	main@clearRef,___flge@ff2
  1477   0020F0  C09C  F022         	movff	main@clearRef+1,___flge@ff2+1
  1478   0020F4  C09D  F023         	movff	main@clearRef+2,___flge@ff2+2
  1479   0020F8  C09E  F024         	movff	main@clearRef+3,___flge@ff2+3
  1480   0020FC  ECBD  F01E         	call	___flge	;wreg free
  1481   002100  B0D8               	btfsc	status,0,c
  1482   002102  EF85  F010         	goto	u6021
  1483   002106  EF87  F010         	goto	u6020
  1484   00210A                     u6021:
  1485   00210A  EF32  F011         	goto	l5449
  1486   00210E                     u6020:
  1487   00210E  0100               	movlb	0	; () banked
  1488   002110  51AB               	movf	main@carGo& (0+255),w,b
  1489   002112  B4D8               	btfsc	status,2,c
  1490   002114  EF8E  F010         	goto	u6031
  1491   002118  EF90  F010         	goto	u6030
  1492   00211C                     u6031:
  1493   00211C  EF32  F011         	goto	l5449
  1494   002120                     u6030:
  1495   002120                     
  1496                           ; BSR set to: 0
  1497                           ;MazeRobot.X/main.c: 118:             colorNum = colorDetect(clearRef,&ambientRGBVal,&wh
      +                          iteRGBVal,&motorLeft,&motorRight);
  1498   002120  C09B  F060         	movff	main@clearRef,colorDetect@clearRef
  1499   002124  C09C  F061         	movff	main@clearRef+1,colorDetect@clearRef+1
  1500   002128  C09D  F062         	movff	main@clearRef+2,colorDetect@clearRef+2
  1501   00212C  C09E  F063         	movff	main@clearRef+3,colorDetect@clearRef+3
  1502   002130  0EAC               	movlw	low main@ambientRGBVal
  1503   002132  6F64               	movwf	colorDetect@ambientRGBVal& (0+255),b
  1504   002134  0E00               	movlw	high main@ambientRGBVal
  1505   002136  6F65               	movwf	(colorDetect@ambientRGBVal+1)& (0+255),b
  1506   002138  0EB4               	movlw	low main@whiteRGBVal
  1507   00213A  6F66               	movwf	colorDetect@whiteRGBVal& (0+255),b
  1508   00213C  0E00               	movlw	high main@whiteRGBVal
  1509   00213E  6F67               	movwf	(colorDetect@whiteRGBVal+1)& (0+255),b
  1510   002140  0EC7               	movlw	low main@motorLeft
  1511   002142  6F68               	movwf	colorDetect@mL& (0+255),b
  1512   002144  0E00               	movlw	high main@motorLeft
  1513   002146  6F69               	movwf	(colorDetect@mL+1)& (0+255),b
  1514   002148  0EBE               	movlw	low main@motorRight
  1515   00214A  6F6A               	movwf	colorDetect@mR& (0+255),b
  1516   00214C  0E00               	movlw	high main@motorRight
  1517   00214E  6F6B               	movwf	(colorDetect@mR+1)& (0+255),b
  1518   002150  EC14  F007         	call	_colorDetect	;wreg free
  1519   002154  C060  F0A1         	movff	?_colorDetect,main@colorNum
  1520   002158  C061  F0A2         	movff	?_colorDetect+1,main@colorNum+1
  1521   00215C                     
  1522                           ;MazeRobot.X/main.c: 120:             if (colorNum < 9){
  1523   00215C  0100               	movlb	0	; () banked
  1524   00215E  51A2               	movf	(main@colorNum+1)& (0+255),w,b
  1525   002160  E107               	bnz	u6041
  1526   002162  0E09               	movlw	9
  1527   002164  5DA1               	subwf	main@colorNum& (0+255),w,b
  1528   002166  B0D8               	btfsc	status,0,c
  1529   002168  EFB8  F010         	goto	u6041
  1530   00216C  EFBA  F010         	goto	u6040
  1531   002170                     u6041:
  1532   002170  EF32  F011         	goto	l5449
  1533   002174                     u6040:
  1534   002174                     
  1535                           ; BSR set to: 0
  1536                           ;MazeRobot.X/main.c: 122:             turn_history[index] = 0;
  1537   002174  90D8               	bcf	status,0,c
  1538   002176  35BC               	rlcf	main@index& (0+255),w,b
  1539   002178  6ED9               	movwf	fsr2l,c
  1540   00217A  35BD               	rlcf	(main@index+1)& (0+255),w,b
  1541   00217C  6EDA               	movwf	fsr2h,c
  1542   00217E  0E00               	movlw	low main@turn_history
  1543   002180  26D9               	addwf	fsr2l,f,c
  1544   002182  0E02               	movlw	high main@turn_history
  1545   002184  22DA               	addwfc	fsr2h,f,c
  1546   002186  0E00               	movlw	0
  1547   002188  6EDE               	movwf	postinc2,c
  1548   00218A  0E00               	movlw	0
  1549   00218C  6EDD               	movwf	postdec2,c
  1550                           
  1551                           ;MazeRobot.X/main.c: 123:             counter_history[index] = forwardCount;
  1552   00218E  90D8               	bcf	status,0,c
  1553   002190  35BC               	rlcf	main@index& (0+255),w,b
  1554   002192  6ED9               	movwf	fsr2l,c
  1555   002194  35BD               	rlcf	(main@index+1)& (0+255),w,b
  1556   002196  6EDA               	movwf	fsr2h,c
  1557   002198  0E00               	movlw	low main@counter_history
  1558   00219A  26D9               	addwf	fsr2l,f,c
  1559   00219C  0E03               	movlw	high main@counter_history
  1560   00219E  22DA               	addwfc	fsr2h,f,c
  1561   0021A0  C09F  FFDE         	movff	main@forwardCount,postinc2
  1562   0021A4  C0A0  FFDD         	movff	main@forwardCount+1,postdec2
  1563   0021A8                     
  1564                           ; BSR set to: 0
  1565                           ;MazeRobot.X/main.c: 125:             index +=1;
  1566   0021A8  4BBC               	infsnz	main@index& (0+255),f,b
  1567   0021AA  2BBD               	incf	(main@index+1)& (0+255),f,b
  1568   0021AC                     
  1569                           ; BSR set to: 0
  1570                           ;MazeRobot.X/main.c: 126:             forwardCount = 0;
  1571   0021AC  0E00               	movlw	0
  1572   0021AE  6FA0               	movwf	(main@forwardCount+1)& (0+255),b
  1573   0021B0  0E00               	movlw	0
  1574   0021B2  6F9F               	movwf	main@forwardCount& (0+255),b
  1575   0021B4                     
  1576                           ; BSR set to: 0
  1577                           ;MazeRobot.X/main.c: 128:             if (colorNum == 8){
  1578   0021B4  0E08               	movlw	8
  1579   0021B6  19A1               	xorwf	main@colorNum& (0+255),w,b
  1580   0021B8  11A2               	iorwf	(main@colorNum+1)& (0+255),w,b
  1581   0021BA  A4D8               	btfss	status,2,c
  1582   0021BC  EFE2  F010         	goto	u6051
  1583   0021C0  EFE4  F010         	goto	u6050
  1584   0021C4                     u6051:
  1585   0021C4  EF0A  F011         	goto	l5441
  1586   0021C8                     u6050:
  1587   0021C8                     
  1588                           ; BSR set to: 0
  1589                           ;MazeRobot.X/main.c: 129:                 turn_180(&motorLeft,&motorRight);
  1590   0021C8  0EC7               	movlw	low main@motorLeft
  1591   0021CA  6E1E               	movwf	turn_180@mL^0,c
  1592   0021CC  0E00               	movlw	high main@motorLeft
  1593   0021CE  6E1F               	movwf	(turn_180@mL+1)^0,c
  1594   0021D0  0EBE               	movlw	low main@motorRight
  1595   0021D2  6E20               	movwf	turn_180@mR^0,c
  1596   0021D4  0E00               	movlw	high main@motorRight
  1597   0021D6  6E21               	movwf	(turn_180@mR+1)^0,c
  1598   0021D8  ECA4  F01B         	call	_turn_180	;wreg free
  1599   0021DC                     
  1600                           ;MazeRobot.X/main.c: 130:                 LATDbits.LATD7 = 1 , LATHbits.LATH3 = 1;
  1601   0021DC  8E7C               	bsf	124,7,c	;volatile
  1602   0021DE  8680               	bsf	128,3,c	;volatile
  1603   0021E0                     
  1604                           ;MazeRobot.X/main.c: 131:                 return_home_turns(&turn_history,&counter_histo
      +                          ry, (index), &motorLeft, &motorRight);
  1605   0021E0  0E00               	movlw	low main@turn_history
  1606   0021E2  0100               	movlb	0	; () banked
  1607   0021E4  6F7F               	movwf	return_home_turns@turn_history& (0+255),b
  1608   0021E6  0E02               	movlw	high main@turn_history
  1609   0021E8  6F80               	movwf	(return_home_turns@turn_history+1)& (0+255),b
  1610   0021EA  0E00               	movlw	low main@counter_history
  1611   0021EC  6F81               	movwf	return_home_turns@counter_history& (0+255),b
  1612   0021EE  0E03               	movlw	high main@counter_history
  1613   0021F0  6F82               	movwf	(return_home_turns@counter_history+1)& (0+255),b
  1614   0021F2  C0BC  F083         	movff	main@index,return_home_turns@index
  1615   0021F6  C0BD  F084         	movff	main@index+1,return_home_turns@index+1
  1616   0021FA  0EC7               	movlw	low main@motorLeft
  1617   0021FC  6F85               	movwf	return_home_turns@mL& (0+255),b
  1618   0021FE  0E00               	movlw	high main@motorLeft
  1619   002200  6F86               	movwf	(return_home_turns@mL+1)& (0+255),b
  1620   002202  0EBE               	movlw	low main@motorRight
  1621   002204  6F87               	movwf	return_home_turns@mR& (0+255),b
  1622   002206  0E00               	movlw	high main@motorRight
  1623   002208  6F88               	movwf	(return_home_turns@mR+1)& (0+255),b
  1624   00220A  ECB8  F016         	call	_return_home_turns	;wreg free
  1625   00220E                     
  1626                           ;MazeRobot.X/main.c: 132:                 carGo = 0;
  1627   00220E  0E00               	movlw	0
  1628   002210  0100               	movlb	0	; () banked
  1629   002212  6FAB               	movwf	main@carGo& (0+255),b
  1630   002214                     l5441:
  1631                           
  1632                           ; BSR set to: 0
  1633                           ;MazeRobot.X/main.c: 134:             turn_history[index] = colorNum;
  1634   002214  90D8               	bcf	status,0,c
  1635   002216  35BC               	rlcf	main@index& (0+255),w,b
  1636   002218  6ED9               	movwf	fsr2l,c
  1637   00221A  35BD               	rlcf	(main@index+1)& (0+255),w,b
  1638   00221C  6EDA               	movwf	fsr2h,c
  1639   00221E  0E00               	movlw	low main@turn_history
  1640   002220  26D9               	addwf	fsr2l,f,c
  1641   002222  0E02               	movlw	high main@turn_history
  1642   002224  22DA               	addwfc	fsr2h,f,c
  1643   002226  C0A1  FFDE         	movff	main@colorNum,postinc2
  1644   00222A  C0A2  FFDD         	movff	main@colorNum+1,postdec2
  1645   00222E                     
  1646                           ; BSR set to: 0
  1647                           ;MazeRobot.X/main.c: 135:             counter_history[index] = 1;
  1648   00222E  90D8               	bcf	status,0,c
  1649   002230  35BC               	rlcf	main@index& (0+255),w,b
  1650   002232  6ED9               	movwf	fsr2l,c
  1651   002234  35BD               	rlcf	(main@index+1)& (0+255),w,b
  1652   002236  6EDA               	movwf	fsr2h,c
  1653   002238  0E00               	movlw	low main@counter_history
  1654   00223A  26D9               	addwf	fsr2l,f,c
  1655   00223C  0E03               	movlw	high main@counter_history
  1656   00223E  22DA               	addwfc	fsr2h,f,c
  1657   002240  0E01               	movlw	1
  1658   002242  6EDE               	movwf	postinc2,c
  1659   002244  0E00               	movlw	0
  1660   002246  6EDD               	movwf	postdec2,c
  1661   002248                     
  1662                           ; BSR set to: 0
  1663                           ;MazeRobot.X/main.c: 136:             index += 1;
  1664   002248  4BBC               	infsnz	main@index& (0+255),f,b
  1665   00224A  2BBD               	incf	(main@index+1)& (0+255),f,b
  1666   00224C                     
  1667                           ; BSR set to: 0
  1668                           ;MazeRobot.X/main.c: 137:             _delay((unsigned long)((500)*(64000000/4000.0)));
  1669   00224C  0E29               	movlw	41
  1670   00224E  0100               	movlb	0	; () banked
  1671   002250  6F95               	movwf	(??_main+1)& (0+255),b
  1672   002252  0E96               	movlw	150
  1673   002254  6F94               	movwf	??_main& (0+255),b
  1674   002256  0E7F               	movlw	127
  1675   002258                     u6117:
  1676   002258  2EE8               	decfsz	wreg,f,c
  1677   00225A  D7FE               	bra	u6117
  1678   00225C  2F94               	decfsz	??_main& (0+255),f,b
  1679   00225E  D7FC               	bra	u6117
  1680   002260  2F95               	decfsz	(??_main+1)& (0+255),f,b
  1681   002262  D7FA               	bra	u6117
  1682   002264                     l5449:
  1683                           
  1684                           ;MazeRobot.X/main.c: 141:         if (carGo){
  1685   002264  0100               	movlb	0	; () banked
  1686   002266  51AB               	movf	main@carGo& (0+255),w,b
  1687   002268  B4D8               	btfsc	status,2,c
  1688   00226A  EF39  F011         	goto	u6061
  1689   00226E  EF3B  F011         	goto	u6060
  1690   002272                     u6061:
  1691   002272  EF5B  F011         	goto	l5457
  1692   002276                     u6060:
  1693   002276                     
  1694                           ; BSR set to: 0
  1695                           ;MazeRobot.X/main.c: 142:             forward(&motorLeft,&motorRight);
  1696   002276  0EC7               	movlw	low main@motorLeft
  1697   002278  6E18               	movwf	forward@mL^0,c
  1698   00227A  0E00               	movlw	high main@motorLeft
  1699   00227C  6E19               	movwf	(forward@mL+1)^0,c
  1700   00227E  0EBE               	movlw	low main@motorRight
  1701   002280  6E1A               	movwf	forward@mR^0,c
  1702   002282  0E00               	movlw	high main@motorRight
  1703   002284  6E1B               	movwf	(forward@mR+1)^0,c
  1704   002286  EC23  F020         	call	_forward	;wreg free
  1705   00228A                     
  1706                           ;MazeRobot.X/main.c: 143:             LATDbits.LATD4 = !LATDbits.LATD4;
  1707   00228A  A87C               	btfss	124,4,c	;volatile
  1708   00228C  EF4A  F011         	goto	u6071
  1709   002290  EF4F  F011         	goto	u6070
  1710   002294                     u6071:
  1711   002294  0100               	movlb	0	; () banked
  1712   002296  6B94               	clrf	??_main& (0+255),b
  1713   002298  2B94               	incf	??_main& (0+255),f,b
  1714   00229A  EF51  F011         	goto	u6088
  1715   00229E                     u6070:
  1716   00229E  0100               	movlb	0	; () banked
  1717   0022A0  6B94               	clrf	??_main& (0+255),b
  1718   0022A2                     u6088:
  1719   0022A2  3B94               	swapf	??_main& (0+255),f,b
  1720   0022A4  507C               	movf	124,w,c	;volatile
  1721   0022A6  1994               	xorwf	??_main& (0+255),w,b
  1722   0022A8  0BEF               	andlw	-17
  1723   0022AA  1994               	xorwf	??_main& (0+255),w,b
  1724   0022AC  6E7C               	movwf	124,c	;volatile
  1725   0022AE                     
  1726                           ; BSR set to: 0
  1727                           ;MazeRobot.X/main.c: 144:             forwardCount +=1;
  1728   0022AE  4B9F               	infsnz	main@forwardCount& (0+255),f,b
  1729   0022B0  2BA0               	incf	(main@forwardCount+1)& (0+255),f,b
  1730                           
  1731                           ;MazeRobot.X/main.c: 145:         }
  1732   0022B2  EF65  F011         	goto	l5459
  1733   0022B6                     l5457:
  1734                           
  1735                           ; BSR set to: 0
  1736   0022B6  0EC7               	movlw	low main@motorLeft
  1737   0022B8  6E18               	movwf	stop@mL^0,c
  1738   0022BA  0E00               	movlw	high main@motorLeft
  1739   0022BC  6E19               	movwf	(stop@mL+1)^0,c
  1740   0022BE  0EBE               	movlw	low main@motorRight
  1741   0022C0  6E1A               	movwf	stop@mR^0,c
  1742   0022C2  0E00               	movlw	high main@motorRight
  1743   0022C4  6E1B               	movwf	(stop@mR+1)^0,c
  1744   0022C6  ECC7  F021         	call	_stop	;wreg free
  1745   0022CA                     l5459:
  1746                           
  1747                           ;MazeRobot.X/main.c: 149:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1748   0022CA  0E05               	movlw	5
  1749   0022CC  0100               	movlb	0	; () banked
  1750   0022CE  6F95               	movwf	(??_main+1)& (0+255),b
  1751   0022D0  0E0F               	movlw	15
  1752   0022D2  6F94               	movwf	??_main& (0+255),b
  1753   0022D4  0EF1               	movlw	241
  1754   0022D6                     u6127:
  1755   0022D6  2EE8               	decfsz	wreg,f,c
  1756   0022D8  D7FE               	bra	u6127
  1757   0022DA  2F94               	decfsz	??_main& (0+255),f,b
  1758   0022DC  D7FC               	bra	u6127
  1759   0022DE  2F95               	decfsz	(??_main+1)& (0+255),f,b
  1760   0022E0  D7FA               	bra	u6127
  1761   0022E2                     
  1762                           ;MazeRobot.X/main.c: 151:         if (forwardCount > 2000){return_home_turns(&turn_histo
      +                          ry,&counter_history, (index), &motorLeft, &motorRight);}
  1763   0022E2  0ED1               	movlw	209
  1764   0022E4  0100               	movlb	0	; () banked
  1765   0022E6  5D9F               	subwf	main@forwardCount& (0+255),w,b
  1766   0022E8  0E07               	movlw	7
  1767   0022EA  59A0               	subwfb	(main@forwardCount+1)& (0+255),w,b
  1768   0022EC  A0D8               	btfss	status,0,c
  1769   0022EE  EF7B  F011         	goto	u6091
  1770   0022F2  EF7D  F011         	goto	u6090
  1771   0022F6                     u6091:
  1772   0022F6  EFA2  F00F         	goto	l5385
  1773   0022FA                     u6090:
  1774   0022FA                     
  1775                           ; BSR set to: 0
  1776   0022FA  0E00               	movlw	low main@turn_history
  1777   0022FC  6F7F               	movwf	return_home_turns@turn_history& (0+255),b
  1778   0022FE  0E02               	movlw	high main@turn_history
  1779   002300  6F80               	movwf	(return_home_turns@turn_history+1)& (0+255),b
  1780   002302  0E00               	movlw	low main@counter_history
  1781   002304  6F81               	movwf	return_home_turns@counter_history& (0+255),b
  1782   002306  0E03               	movlw	high main@counter_history
  1783   002308  6F82               	movwf	(return_home_turns@counter_history+1)& (0+255),b
  1784   00230A  C0BC  F083         	movff	main@index,return_home_turns@index
  1785   00230E  C0BD  F084         	movff	main@index+1,return_home_turns@index+1
  1786   002312  0EC7               	movlw	low main@motorLeft
  1787   002314  6F85               	movwf	return_home_turns@mL& (0+255),b
  1788   002316  0E00               	movlw	high main@motorLeft
  1789   002318  6F86               	movwf	(return_home_turns@mL+1)& (0+255),b
  1790   00231A  0EBE               	movlw	low main@motorRight
  1791   00231C  6F87               	movwf	return_home_turns@mR& (0+255),b
  1792   00231E  0E00               	movlw	high main@motorRight
  1793   002320  6F88               	movwf	(return_home_turns@mR+1)& (0+255),b
  1794   002322  ECB8  F016         	call	_return_home_turns	;wreg free
  1795   002326  EFA2  F00F         	goto	l5385
  1796   00232A  EF3B  F000         	goto	start
  1797   00232E                     __end_of_main:
  1798                           	callstack 0
  1799                           
  1800 ;; *************** function _whiteCal *****************
  1801 ;; Defined at:
  1802 ;;		line 115 in file "MazeRobot.X/color.c"
  1803 ;; Parameters:    Size  Location     Type
  1804 ;;  v               2   17[COMRAM] PTR struct RGB
  1805 ;;		 -> main@whiteRGBVal(8), 
  1806 ;; Auto vars:     Size  Location     Type
  1807 ;;  i               2   21[COMRAM] int 
  1808 ;; Return value:  Size  Location     Type
  1809 ;;                  1    wreg      void 
  1810 ;; Registers used:
  1811 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1812 ;; Tracked objects:
  1813 ;;		On entry : 0/0
  1814 ;;		On exit  : 0/0
  1815 ;;		Unchanged: 0/0
  1816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1817 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1818 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1819 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1820 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1821 ;;Total ram usage:        6 bytes
  1822 ;; Hardware stack levels used: 1
  1823 ;; Hardware stack levels required when called: 6
  1824 ;; This function calls:
  1825 ;;		_getColor
  1826 ;; This function is called by:
  1827 ;;		_main
  1828 ;; This function uses a non-reentrant model
  1829 ;;
  1830                           
  1831                           	psect	text1
  1832   003E7E                     __ptext1:
  1833                           	callstack 0
  1834   003E7E                     _whiteCal:
  1835                           	callstack 24
  1836   003E7E                     
  1837                           ;MazeRobot.X/color.c: 117:     for(int i = 0;i<20;i++){
  1838   003E7E  0E00               	movlw	0
  1839   003E80  6E17               	movwf	(whiteCal@i+1)^0,c
  1840   003E82  0E00               	movlw	0
  1841   003E84  6E16               	movwf	whiteCal@i^0,c
  1842   003E86                     l4285:
  1843                           
  1844                           ;MazeRobot.X/color.c: 118:             LATDbits.LATD7 = !LATDbits.LATD7;
  1845   003E86  AE7C               	btfss	124,7,c	;volatile
  1846   003E88  EF48  F01F         	goto	u4361
  1847   003E8C  EF4C  F01F         	goto	u4360
  1848   003E90                     u4361:
  1849   003E90  6A14               	clrf	??_whiteCal^0,c
  1850   003E92  2A14               	incf	??_whiteCal^0,f,c
  1851   003E94  EF4D  F01F         	goto	u4378
  1852   003E98                     u4360:
  1853   003E98  6A14               	clrf	??_whiteCal^0,c
  1854   003E9A                     u4378:
  1855   003E9A  3214               	rrcf	??_whiteCal^0,f,c
  1856   003E9C  3214               	rrcf	??_whiteCal^0,f,c
  1857   003E9E  507C               	movf	124,w,c	;volatile
  1858   003EA0  1814               	xorwf	??_whiteCal^0,w,c
  1859   003EA2  0B7F               	andlw	-129
  1860   003EA4  1814               	xorwf	??_whiteCal^0,w,c
  1861   003EA6  6E7C               	movwf	124,c	;volatile
  1862   003EA8                     
  1863                           ;MazeRobot.X/color.c: 119:             _delay((unsigned long)((100)*(64000000/4000.0)));
  1864   003EA8  0E09               	movlw	9
  1865   003EAA  6E15               	movwf	(??_whiteCal+1)^0,c
  1866   003EAC  0E1E               	movlw	30
  1867   003EAE  6E14               	movwf	??_whiteCal^0,c
  1868   003EB0  0EE4               	movlw	228
  1869   003EB2                     u6137:
  1870   003EB2  2EE8               	decfsz	wreg,f,c
  1871   003EB4  D7FE               	bra	u6137
  1872   003EB6  2E14               	decfsz	??_whiteCal^0,f,c
  1873   003EB8  D7FC               	bra	u6137
  1874   003EBA  2E15               	decfsz	(??_whiteCal+1)^0,f,c
  1875   003EBC  D7FA               	bra	u6137
  1876   003EBE  D000               	nop2	
  1877                           
  1878                           ;MazeRobot.X/color.c: 120:             }
  1879   003EC0  4A16               	infsnz	whiteCal@i^0,f,c
  1880   003EC2  2A17               	incf	(whiteCal@i+1)^0,f,c
  1881   003EC4  BE17               	btfsc	(whiteCal@i+1)^0,7,c
  1882   003EC6  EF6E  F01F         	goto	u4381
  1883   003ECA  5017               	movf	(whiteCal@i+1)^0,w,c
  1884   003ECC  E109               	bnz	u4380
  1885   003ECE  0E14               	movlw	20
  1886   003ED0  5C16               	subwf	whiteCal@i^0,w,c
  1887   003ED2  A0D8               	btfss	status,0,c
  1888   003ED4  EF6E  F01F         	goto	u4381
  1889   003ED8  EF70  F01F         	goto	u4380
  1890   003EDC                     u4381:
  1891   003EDC  EF43  F01F         	goto	l4285
  1892   003EE0                     u4380:
  1893   003EE0                     
  1894                           ;MazeRobot.X/color.c: 121:             LATDbits.LATD7 = !LATDbits.LATD7;
  1895   003EE0  AE7C               	btfss	124,7,c	;volatile
  1896   003EE2  EF75  F01F         	goto	u4391
  1897   003EE6  EF79  F01F         	goto	u4390
  1898   003EEA                     u4391:
  1899   003EEA  6A14               	clrf	??_whiteCal^0,c
  1900   003EEC  2A14               	incf	??_whiteCal^0,f,c
  1901   003EEE  EF7A  F01F         	goto	u4408
  1902   003EF2                     u4390:
  1903   003EF2  6A14               	clrf	??_whiteCal^0,c
  1904   003EF4                     u4408:
  1905   003EF4  3214               	rrcf	??_whiteCal^0,f,c
  1906   003EF6  3214               	rrcf	??_whiteCal^0,f,c
  1907   003EF8  507C               	movf	124,w,c	;volatile
  1908   003EFA  1814               	xorwf	??_whiteCal^0,w,c
  1909   003EFC  0B7F               	andlw	-129
  1910   003EFE  1814               	xorwf	??_whiteCal^0,w,c
  1911   003F00  6E7C               	movwf	124,c	;volatile
  1912   003F02                     
  1913                           ;MazeRobot.X/color.c: 122:             _delay((unsigned long)((500)*(64000000/4000.0)));
  1914   003F02  0E29               	movlw	41
  1915   003F04  6E15               	movwf	(??_whiteCal+1)^0,c
  1916   003F06  0E96               	movlw	150
  1917   003F08  6E14               	movwf	??_whiteCal^0,c
  1918   003F0A  0E7F               	movlw	127
  1919   003F0C                     u6147:
  1920   003F0C  2EE8               	decfsz	wreg,f,c
  1921   003F0E  D7FE               	bra	u6147
  1922   003F10  2E14               	decfsz	??_whiteCal^0,f,c
  1923   003F12  D7FC               	bra	u6147
  1924   003F14  2E15               	decfsz	(??_whiteCal+1)^0,f,c
  1925   003F16  D7FA               	bra	u6147
  1926   003F18  F000               	nop	
  1927   003F1A                     
  1928                           ;MazeRobot.X/color.c: 123:             getColor(v);
  1929   003F1A  C012  F010         	movff	whiteCal@v,getColor@v
  1930   003F1E  C013  F011         	movff	whiteCal@v+1,getColor@v+1
  1931   003F22  EC73  F023         	call	_getColor	;wreg free
  1932   003F26                     
  1933                           ;MazeRobot.X/color.c: 124:             _delay((unsigned long)((500)*(64000000/4000.0)));
  1934   003F26  0E29               	movlw	41
  1935   003F28  6E15               	movwf	(??_whiteCal+1)^0,c
  1936   003F2A  0E96               	movlw	150
  1937   003F2C  6E14               	movwf	??_whiteCal^0,c
  1938   003F2E  0E7F               	movlw	127
  1939   003F30                     u6157:
  1940   003F30  2EE8               	decfsz	wreg,f,c
  1941   003F32  D7FE               	bra	u6157
  1942   003F34  2E14               	decfsz	??_whiteCal^0,f,c
  1943   003F36  D7FC               	bra	u6157
  1944   003F38  2E15               	decfsz	(??_whiteCal+1)^0,f,c
  1945   003F3A  D7FA               	bra	u6157
  1946   003F3C  F000               	nop	
  1947   003F3E                     
  1948                           ;MazeRobot.X/color.c: 125:             LATDbits.LATD7 = !LATDbits.LATD7;
  1949   003F3E  AE7C               	btfss	124,7,c	;volatile
  1950   003F40  EFA4  F01F         	goto	u4411
  1951   003F44  EFA8  F01F         	goto	u4410
  1952   003F48                     u4411:
  1953   003F48  6A14               	clrf	??_whiteCal^0,c
  1954   003F4A  2A14               	incf	??_whiteCal^0,f,c
  1955   003F4C  EFA9  F01F         	goto	u4428
  1956   003F50                     u4410:
  1957   003F50  6A14               	clrf	??_whiteCal^0,c
  1958   003F52                     u4428:
  1959   003F52  3214               	rrcf	??_whiteCal^0,f,c
  1960   003F54  3214               	rrcf	??_whiteCal^0,f,c
  1961   003F56  507C               	movf	124,w,c	;volatile
  1962   003F58  1814               	xorwf	??_whiteCal^0,w,c
  1963   003F5A  0B7F               	andlw	-129
  1964   003F5C  1814               	xorwf	??_whiteCal^0,w,c
  1965   003F5E  6E7C               	movwf	124,c	;volatile
  1966   003F60  0012               	return		;funcret
  1967   003F62                     __end_of_whiteCal:
  1968                           	callstack 0
  1969                           
  1970 ;; *************** function _return_home_turns *****************
  1971 ;; Defined at:
  1972 ;;		line 223 in file "MazeRobot.X/color.c"
  1973 ;; Parameters:    Size  Location     Type
  1974 ;;  turn_history    2   31[BANK0 ] PTR unsigned int 
  1975 ;;		 -> main@turn_history(200), 
  1976 ;;  counter_hist    2   33[BANK0 ] PTR unsigned int 
  1977 ;;		 -> main@counter_history(200), 
  1978 ;;  index           2   35[BANK0 ] unsigned int 
  1979 ;;  mL              2   37[BANK0 ] PTR struct DC_motor
  1980 ;;		 -> main@motorLeft(9), 
  1981 ;;  mR              2   39[BANK0 ] PTR struct DC_motor
  1982 ;;		 -> main@motorRight(9), 
  1983 ;; Auto vars:     Size  Location     Type
  1984 ;;  i               2  150[BANK1 ] int 
  1985 ;;  string1       150    0[BANK1 ] unsigned char [150]
  1986 ;;  k               2  152[BANK1 ] int 
  1987 ;; Return value:  Size  Location     Type
  1988 ;;                  1    wreg      void 
  1989 ;; Registers used:
  1990 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1991 ;; Tracked objects:
  1992 ;;		On entry : 0/0
  1993 ;;		On exit  : 0/0
  1994 ;;		Unchanged: 0/0
  1995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1996 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1997 ;;      Locals:         0       0     154       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1998 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1999 ;;      Totals:         0      12     154       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2000 ;;Total ram usage:      166 bytes
  2001 ;; Hardware stack levels used: 1
  2002 ;; Hardware stack levels required when called: 10
  2003 ;; This function calls:
  2004 ;;		_TxBufferedString
  2005 ;;		_forward
  2006 ;;		_sendTxBuf
  2007 ;;		_sprintf
  2008 ;;		_stop
  2009 ;;		_turnLeft_135
  2010 ;;		_turnLeft_90
  2011 ;;		_turnRight_135
  2012 ;;		_turnRight_90
  2013 ;;		_turn_180
  2014 ;; This function is called by:
  2015 ;;		_main
  2016 ;; This function uses a non-reentrant model
  2017 ;;
  2018                           
  2019                           	psect	text2
  2020   002D70                     __ptext2:
  2021                           	callstack 0
  2022   002D70                     _return_home_turns:
  2023                           	callstack 20
  2024   002D70                     
  2025                           ;MazeRobot.X/color.c: 223: void return_home_turns(unsigned int *turn_history, unsigned i
      +                          nt *counter_history, unsigned int index, DC_motor *mL, DC_motor *mR);MazeRobot.X/color.c
      +                          : 224: {;MazeRobot.X/color.c: 227:     for (int k = (index); k >= 0; k--){
  2026   002D70  C083  F198         	movff	return_home_turns@index,return_home_turns@k
  2027   002D74  C084  F199         	movff	return_home_turns@index+1,return_home_turns@k+1
  2028   002D78  0101               	movlb	1	; () banked
  2029   002D7A  BF99               	btfsc	(return_home_turns@k+1)& (0+255),7,b
  2030   002D7C  EFC4  F016         	goto	u5850
  2031   002D80  EFC2  F016         	goto	u5851
  2032   002D84                     u5851:
  2033   002D84  EFC6  F016         	goto	l5259
  2034   002D88                     u5850:
  2035   002D88  EFEE  F017         	goto	l135
  2036   002D8C                     l5259:
  2037                           
  2038                           ; BSR set to: 1
  2039                           ;MazeRobot.X/color.c: 228:             char string1[150];;MazeRobot.X/color.c: 229:     
      +                                  _delay((unsigned long)((2)*(64000000/4000.0)));
  2040   002D8C  0E2A               	movlw	42
  2041   002D8E  0100               	movlb	0	; () banked
  2042   002D90  6F89               	movwf	??_return_home_turns& (0+255),b
  2043   002D92  0E8D               	movlw	141
  2044   002D94                     u6167:
  2045   002D94  2EE8               	decfsz	wreg,f,c
  2046   002D96  D7FE               	bra	u6167
  2047   002D98  2F89               	decfsz	??_return_home_turns& (0+255),f,b
  2048   002D9A  D7FC               	bra	u6167
  2049   002D9C  D000               	nop2	
  2050   002D9E                     
  2051                           ;MazeRobot.X/color.c: 230:             sprintf(string1,"K:%d I:%d C:%d T:%d \r",k,index,
      +                          counter_history[k],turn_history[k]);
  2052   002D9E  0E00               	movlw	low return_home_turns@string1
  2053   002DA0  0100               	movlb	0	; () banked
  2054   002DA2  6F66               	movwf	sprintf@s& (0+255),b
  2055   002DA4  0E01               	movlw	high return_home_turns@string1
  2056   002DA6  6F67               	movwf	(sprintf@s+1)& (0+255),b
  2057   002DA8  0E01               	movlw	low STR_1
  2058   002DAA  6F68               	movwf	sprintf@fmt& (0+255),b
  2059   002DAC  0E0E               	movlw	high STR_1
  2060   002DAE  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  2061   002DB0  C198  F06A         	movff	return_home_turns@k,?_sprintf+4
  2062   002DB4  C199  F06B         	movff	return_home_turns@k+1,?_sprintf+5
  2063   002DB8  C083  F06C         	movff	return_home_turns@index,?_sprintf+6
  2064   002DBC  C084  F06D         	movff	return_home_turns@index+1,?_sprintf+7
  2065   002DC0  90D8               	bcf	status,0,c
  2066   002DC2  0101               	movlb	1	; () banked
  2067   002DC4  3598               	rlcf	return_home_turns@k& (0+255),w,b
  2068   002DC6  6ED9               	movwf	fsr2l,c
  2069   002DC8  3599               	rlcf	(return_home_turns@k+1)& (0+255),w,b
  2070   002DCA  6EDA               	movwf	fsr2h,c
  2071   002DCC  0100               	movlb	0	; () banked
  2072   002DCE  5181               	movf	return_home_turns@counter_history& (0+255),w,b
  2073   002DD0  26D9               	addwf	fsr2l,f,c
  2074   002DD2  5182               	movf	(return_home_turns@counter_history+1)& (0+255),w,b
  2075   002DD4  22DA               	addwfc	fsr2h,f,c
  2076   002DD6  CFDE F06E          	movff	postinc2,?_sprintf+8
  2077   002DDA  CFDD F06F          	movff	postdec2,?_sprintf+9
  2078   002DDE  90D8               	bcf	status,0,c
  2079   002DE0  0101               	movlb	1	; () banked
  2080   002DE2  3598               	rlcf	return_home_turns@k& (0+255),w,b
  2081   002DE4  6ED9               	movwf	fsr2l,c
  2082   002DE6  3599               	rlcf	(return_home_turns@k+1)& (0+255),w,b
  2083   002DE8  6EDA               	movwf	fsr2h,c
  2084   002DEA  0100               	movlb	0	; () banked
  2085   002DEC  517F               	movf	return_home_turns@turn_history& (0+255),w,b
  2086   002DEE  26D9               	addwf	fsr2l,f,c
  2087   002DF0  5180               	movf	(return_home_turns@turn_history+1)& (0+255),w,b
  2088   002DF2  22DA               	addwfc	fsr2h,f,c
  2089   002DF4  CFDE F070          	movff	postinc2,?_sprintf+10
  2090   002DF8  CFDD F071          	movff	postdec2,?_sprintf+11
  2091   002DFC  ECCC  F023         	call	_sprintf	;wreg free
  2092   002E00                     
  2093                           ;MazeRobot.X/color.c: 231:             TxBufferedString(string1);
  2094   002E00  0E00               	movlw	low return_home_turns@string1
  2095   002E02  6E06               	movwf	TxBufferedString@string^0,c
  2096   002E04  0E01               	movlw	high return_home_turns@string1
  2097   002E06  6E07               	movwf	(TxBufferedString@string+1)^0,c
  2098   002E08  EC5A  F025         	call	_TxBufferedString	;wreg free
  2099   002E0C                     
  2100                           ;MazeRobot.X/color.c: 232:             sendTxBuf();
  2101   002E0C  EC15  F026         	call	_sendTxBuf	;wreg free
  2102   002E10                     
  2103                           ;MazeRobot.X/color.c: 233:             _delay((unsigned long)((2)*(64000000/4000.0)));
  2104   002E10  0E2A               	movlw	42
  2105   002E12  0100               	movlb	0	; () banked
  2106   002E14  6F89               	movwf	??_return_home_turns& (0+255),b
  2107   002E16  0E8D               	movlw	141
  2108   002E18                     u6177:
  2109   002E18  2EE8               	decfsz	wreg,f,c
  2110   002E1A  D7FE               	bra	u6177
  2111   002E1C  2F89               	decfsz	??_return_home_turns& (0+255),f,b
  2112   002E1E  D7FC               	bra	u6177
  2113   002E20  D000               	nop2	
  2114                           
  2115                           ;MazeRobot.X/color.c: 235:             switch (turn_history[k]){
  2116   002E22  EF9E  F017         	goto	l5295
  2117   002E26                     l5269:
  2118                           
  2119                           ; BSR set to: 0
  2120                           ;MazeRobot.X/color.c: 237:                     turnLeft_90(mL,mR);
  2121   002E26  C085  F01E         	movff	return_home_turns@mL,turnLeft_90@mL
  2122   002E2A  C086  F01F         	movff	return_home_turns@mL+1,turnLeft_90@mL+1
  2123   002E2E  C087  F020         	movff	return_home_turns@mR,turnLeft_90@mR
  2124   002E32  C088  F021         	movff	return_home_turns@mR+1,turnLeft_90@mR+1
  2125   002E36  ECE2  F01C         	call	_turnLeft_90	;wreg free
  2126                           
  2127                           ;MazeRobot.X/color.c: 238:                     break;
  2128   002E3A  EFD7  F017         	goto	l5297
  2129   002E3E                     l5271:
  2130                           
  2131                           ; BSR set to: 0
  2132                           ;MazeRobot.X/color.c: 240:                     turnRight_90(mL,mR);
  2133   002E3E  C085  F01E         	movff	return_home_turns@mL,turnRight_90@mL
  2134   002E42  C086  F01F         	movff	return_home_turns@mL+1,turnRight_90@mL+1
  2135   002E46  C087  F020         	movff	return_home_turns@mR,turnRight_90@mR
  2136   002E4A  C088  F021         	movff	return_home_turns@mR+1,turnRight_90@mR+1
  2137   002E4E  EC43  F01C         	call	_turnRight_90	;wreg free
  2138                           
  2139                           ;MazeRobot.X/color.c: 241:                     break;
  2140   002E52  EFD7  F017         	goto	l5297
  2141   002E56                     l5273:
  2142                           
  2143                           ; BSR set to: 0
  2144                           ;MazeRobot.X/color.c: 243:                     turn_180(mL,mR);
  2145   002E56  C085  F01E         	movff	return_home_turns@mL,turn_180@mL
  2146   002E5A  C086  F01F         	movff	return_home_turns@mL+1,turn_180@mL+1
  2147   002E5E  C087  F020         	movff	return_home_turns@mR,turn_180@mR
  2148   002E62  C088  F021         	movff	return_home_turns@mR+1,turn_180@mR+1
  2149   002E66  ECA4  F01B         	call	_turn_180	;wreg free
  2150                           
  2151                           ;MazeRobot.X/color.c: 244:                     break;
  2152   002E6A  EFD7  F017         	goto	l5297
  2153   002E6E                     l5279:
  2154                           
  2155                           ; BSR set to: 0
  2156                           ;MazeRobot.X/color.c: 252:                     turnLeft_135(mL,mR);
  2157   002E6E  C085  F01E         	movff	return_home_turns@mL,turnLeft_135@mL
  2158   002E72  C086  F01F         	movff	return_home_turns@mL+1,turnLeft_135@mL+1
  2159   002E76  C087  F020         	movff	return_home_turns@mR,turnLeft_135@mR
  2160   002E7A  C088  F021         	movff	return_home_turns@mR+1,turnLeft_135@mR+1
  2161   002E7E  EC1F  F01E         	call	_turnLeft_135	;wreg free
  2162                           
  2163                           ;MazeRobot.X/color.c: 253:                     break;
  2164   002E82  EFD7  F017         	goto	l5297
  2165   002E86                     l5281:
  2166                           
  2167                           ; BSR set to: 0
  2168                           ;MazeRobot.X/color.c: 255:                     turnRight_135(mL,mR);
  2169   002E86  C085  F01E         	movff	return_home_turns@mL,turnRight_135@mL
  2170   002E8A  C086  F01F         	movff	return_home_turns@mL+1,turnRight_135@mL+1
  2171   002E8E  C087  F020         	movff	return_home_turns@mR,turnRight_135@mR
  2172   002E92  C088  F021         	movff	return_home_turns@mR+1,turnRight_135@mR+1
  2173   002E96  EC81  F01D         	call	_turnRight_135	;wreg free
  2174                           
  2175                           ;MazeRobot.X/color.c: 256:                     break;
  2176   002E9A  EFD7  F017         	goto	l5297
  2177   002E9E                     l5283:
  2178                           
  2179                           ; BSR set to: 0
  2180                           ;MazeRobot.X/color.c: 258:                     forward(mL,mR);
  2181   002E9E  C085  F018         	movff	return_home_turns@mL,forward@mL
  2182   002EA2  C086  F019         	movff	return_home_turns@mL+1,forward@mL+1
  2183   002EA6  C087  F01A         	movff	return_home_turns@mR,forward@mR
  2184   002EAA  C088  F01B         	movff	return_home_turns@mR+1,forward@mR+1
  2185   002EAE  EC23  F020         	call	_forward	;wreg free
  2186   002EB2                     
  2187                           ;MazeRobot.X/color.c: 259:                     int i = (counter_history[k]-2);
  2188   002EB2  90D8               	bcf	status,0,c
  2189   002EB4  0101               	movlb	1	; () banked
  2190   002EB6  3598               	rlcf	return_home_turns@k& (0+255),w,b
  2191   002EB8  6ED9               	movwf	fsr2l,c
  2192   002EBA  3599               	rlcf	(return_home_turns@k+1)& (0+255),w,b
  2193   002EBC  6EDA               	movwf	fsr2h,c
  2194   002EBE  0100               	movlb	0	; () banked
  2195   002EC0  5181               	movf	return_home_turns@counter_history& (0+255),w,b
  2196   002EC2  26D9               	addwf	fsr2l,f,c
  2197   002EC4  5182               	movf	(return_home_turns@counter_history+1)& (0+255),w,b
  2198   002EC6  22DA               	addwfc	fsr2h,f,c
  2199   002EC8  CFDE F089          	movff	postinc2,??_return_home_turns
  2200   002ECC  CFDD F08A          	movff	postdec2,??_return_home_turns+1
  2201   002ED0  0EFE               	movlw	254
  2202   002ED2  2589               	addwf	??_return_home_turns& (0+255),w,b
  2203   002ED4  0101               	movlb	1	; () banked
  2204   002ED6  6F96               	movwf	return_home_turns@i& (0+255),b
  2205   002ED8  0EFF               	movlw	255
  2206   002EDA  0100               	movlb	0	; () banked
  2207   002EDC  218A               	addwfc	(??_return_home_turns+1)& (0+255),w,b
  2208   002EDE  0101               	movlb	1	; () banked
  2209   002EE0  6F97               	movwf	(return_home_turns@i+1)& (0+255),b
  2210                           
  2211                           ;MazeRobot.X/color.c: 260:                     while(i>0){
  2212   002EE2  EF82  F017         	goto	l131
  2213   002EE6                     l5287:
  2214                           
  2215                           ; BSR set to: 1
  2216                           ;MazeRobot.X/color.c: 261:                     i--;
  2217   002EE6  0796               	decf	return_home_turns@i& (0+255),f,b
  2218   002EE8  A0D8               	btfss	status,0,c
  2219   002EEA  0797               	decf	(return_home_turns@i+1)& (0+255),f,b
  2220   002EEC                     
  2221                           ; BSR set to: 1
  2222                           ;MazeRobot.X/color.c: 262:                     _delay((unsigned long)((50)*(64000000/400
      +                          0.0)));
  2223   002EEC  0E05               	movlw	5
  2224   002EEE  0100               	movlb	0	; () banked
  2225   002EF0  6F8A               	movwf	(??_return_home_turns+1)& (0+255),b
  2226   002EF2  0E0F               	movlw	15
  2227   002EF4  6F89               	movwf	??_return_home_turns& (0+255),b
  2228   002EF6  0EF1               	movlw	241
  2229   002EF8                     u6187:
  2230   002EF8  2EE8               	decfsz	wreg,f,c
  2231   002EFA  D7FE               	bra	u6187
  2232   002EFC  2F89               	decfsz	??_return_home_turns& (0+255),f,b
  2233   002EFE  D7FC               	bra	u6187
  2234   002F00  2F8A               	decfsz	(??_return_home_turns+1)& (0+255),f,b
  2235   002F02  D7FA               	bra	u6187
  2236   002F04                     l131:
  2237                           
  2238                           ;MazeRobot.X/color.c: 260:                     while(i>0){
  2239   002F04  0101               	movlb	1	; () banked
  2240   002F06  BF97               	btfsc	(return_home_turns@i+1)& (0+255),7,b
  2241   002F08  EF90  F017         	goto	u5860
  2242   002F0C  5197               	movf	(return_home_turns@i+1)& (0+255),w,b
  2243   002F0E  E106               	bnz	u5861
  2244   002F10  0596               	decf	return_home_turns@i& (0+255),w,b
  2245   002F12  B0D8               	btfsc	status,0,c
  2246   002F14  EF8E  F017         	goto	u5861
  2247   002F18  EF90  F017         	goto	u5860
  2248   002F1C                     u5861:
  2249   002F1C  EF73  F017         	goto	l5287
  2250   002F20                     u5860:
  2251   002F20  EFD7  F017         	goto	l5297
  2252   002F24                     l5291:
  2253                           
  2254                           ; BSR set to: 0
  2255                           ;MazeRobot.X/color.c: 266:                     stop(mL,mR);
  2256   002F24  C085  F018         	movff	return_home_turns@mL,stop@mL
  2257   002F28  C086  F019         	movff	return_home_turns@mL+1,stop@mL+1
  2258   002F2C  C087  F01A         	movff	return_home_turns@mR,stop@mR
  2259   002F30  C088  F01B         	movff	return_home_turns@mR+1,stop@mR+1
  2260   002F34  ECC7  F021         	call	_stop	;wreg free
  2261                           
  2262                           ;MazeRobot.X/color.c: 267:                     break;
  2263   002F38  EFD7  F017         	goto	l5297
  2264   002F3C                     l5295:
  2265   002F3C  90D8               	bcf	status,0,c
  2266   002F3E  0101               	movlb	1	; () banked
  2267   002F40  3598               	rlcf	return_home_turns@k& (0+255),w,b
  2268   002F42  6ED9               	movwf	fsr2l,c
  2269   002F44  3599               	rlcf	(return_home_turns@k+1)& (0+255),w,b
  2270   002F46  6EDA               	movwf	fsr2h,c
  2271   002F48  0100               	movlb	0	; () banked
  2272   002F4A  517F               	movf	return_home_turns@turn_history& (0+255),w,b
  2273   002F4C  26D9               	addwf	fsr2l,f,c
  2274   002F4E  5180               	movf	(return_home_turns@turn_history+1)& (0+255),w,b
  2275   002F50  22DA               	addwfc	fsr2h,f,c
  2276   002F52  CFDE F089          	movff	postinc2,??_return_home_turns
  2277   002F56  CFDD F08A          	movff	postdec2,??_return_home_turns+1
  2278                           
  2279                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2280                           ; Switch size 1, requested type "simple"
  2281                           ; Number of cases is 1, Range of values is 0 to 0
  2282                           ; switch strategies available:
  2283                           ; Name         Instructions Cycles
  2284                           ; simple_byte            4     3 (average)
  2285                           ;	Chosen strategy is simple_byte
  2286   002F5A  518A               	movf	(??_return_home_turns+1)& (0+255),w,b
  2287   002F5C  0A00               	xorlw	0	; case 0
  2288   002F5E  B4D8               	btfsc	status,2,c
  2289   002F60  EFB4  F017         	goto	l5489
  2290   002F64  EF92  F017         	goto	l5291
  2291   002F68                     l5489:
  2292                           
  2293                           ; BSR set to: 0
  2294                           ; Switch size 1, requested type "simple"
  2295                           ; Number of cases is 8, Range of values is 0 to 7
  2296                           ; switch strategies available:
  2297                           ; Name         Instructions Cycles
  2298                           ; simple_byte           25    13 (average)
  2299                           ;	Chosen strategy is simple_byte
  2300   002F68  5189               	movf	??_return_home_turns& (0+255),w,b
  2301   002F6A  0A00               	xorlw	0	; case 0
  2302   002F6C  B4D8               	btfsc	status,2,c
  2303   002F6E  EF4F  F017         	goto	l5283
  2304   002F72  0A01               	xorlw	1	; case 1
  2305   002F74  B4D8               	btfsc	status,2,c
  2306   002F76  EF13  F017         	goto	l5269
  2307   002F7A  0A03               	xorlw	3	; case 2
  2308   002F7C  B4D8               	btfsc	status,2,c
  2309   002F7E  EF1F  F017         	goto	l5271
  2310   002F82  0A01               	xorlw	1	; case 3
  2311   002F84  B4D8               	btfsc	status,2,c
  2312   002F86  EF2B  F017         	goto	l5273
  2313   002F8A  0A07               	xorlw	7	; case 4
  2314   002F8C  B4D8               	btfsc	status,2,c
  2315   002F8E  EF13  F017         	goto	l5269
  2316   002F92  0A01               	xorlw	1	; case 5
  2317   002F94  B4D8               	btfsc	status,2,c
  2318   002F96  EF1F  F017         	goto	l5271
  2319   002F9A  0A03               	xorlw	3	; case 6
  2320   002F9C  B4D8               	btfsc	status,2,c
  2321   002F9E  EF37  F017         	goto	l5279
  2322   002FA2  0A01               	xorlw	1	; case 7
  2323   002FA4  B4D8               	btfsc	status,2,c
  2324   002FA6  EF43  F017         	goto	l5281
  2325   002FAA  EF92  F017         	goto	l5291
  2326   002FAE                     l5297:
  2327                           
  2328                           ;MazeRobot.X/color.c: 270:             _delay((unsigned long)((50)*(64000000/4000.0)));
  2329   002FAE  0E05               	movlw	5
  2330   002FB0  0100               	movlb	0	; () banked
  2331   002FB2  6F8A               	movwf	(??_return_home_turns+1)& (0+255),b
  2332   002FB4  0E0F               	movlw	15
  2333   002FB6  6F89               	movwf	??_return_home_turns& (0+255),b
  2334   002FB8  0EF1               	movlw	241
  2335   002FBA                     u6197:
  2336   002FBA  2EE8               	decfsz	wreg,f,c
  2337   002FBC  D7FE               	bra	u6197
  2338   002FBE  2F89               	decfsz	??_return_home_turns& (0+255),f,b
  2339   002FC0  D7FC               	bra	u6197
  2340   002FC2  2F8A               	decfsz	(??_return_home_turns+1)& (0+255),f,b
  2341   002FC4  D7FA               	bra	u6197
  2342   002FC6                     
  2343                           ;MazeRobot.X/color.c: 271:         }
  2344   002FC6  0101               	movlb	1	; () banked
  2345   002FC8  0798               	decf	return_home_turns@k& (0+255),f,b
  2346   002FCA  A0D8               	btfss	status,0,c
  2347   002FCC  0799               	decf	(return_home_turns@k+1)& (0+255),f,b
  2348   002FCE  BF99               	btfsc	(return_home_turns@k+1)& (0+255),7,b
  2349   002FD0  EFEE  F017         	goto	u5870
  2350   002FD4  EFEC  F017         	goto	u5871
  2351   002FD8                     u5871:
  2352   002FD8  EFC6  F016         	goto	l5259
  2353   002FDC                     u5870:
  2354   002FDC                     l135:
  2355                           
  2356                           ; BSR set to: 1
  2357   002FDC  0012               	return		;funcret
  2358   002FDE                     __end_of_return_home_turns:
  2359                           	callstack 0
  2360                           
  2361 ;; *************** function _sprintf *****************
  2362 ;; Defined at:
  2363 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_sprintf.c"
  2364 ;; Parameters:    Size  Location     Type
  2365 ;;  s               2    6[BANK0 ] PTR unsigned char 
  2366 ;;		 -> ADC2String@buf(40), return_home_turns@string1(150), 
  2367 ;;  fmt             2    8[BANK0 ] PTR const unsigned char 
  2368 ;;		 -> STR_2(15), STR_1(22), 
  2369 ;; Auto vars:     Size  Location     Type
  2370 ;;  f              11   20[BANK0 ] struct _IO_FILE
  2371 ;;  ap              2   18[BANK0 ] PTR void [1]
  2372 ;;		 -> ?_sprintf(2), 
  2373 ;;  ret             2    0        int 
  2374 ;; Return value:  Size  Location     Type
  2375 ;;                  2    6[BANK0 ] int 
  2376 ;; Registers used:
  2377 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2378 ;; Tracked objects:
  2379 ;;		On entry : 0/0
  2380 ;;		On exit  : 0/0
  2381 ;;		Unchanged: 0/0
  2382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2383 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2384 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2386 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2387 ;;Total ram usage:       25 bytes
  2388 ;; Hardware stack levels used: 1
  2389 ;; Hardware stack levels required when called: 9
  2390 ;; This function calls:
  2391 ;;		_vfprintf
  2392 ;; This function is called by:
  2393 ;;		_return_home_turns
  2394 ;;		_ADC2String
  2395 ;; This function uses a non-reentrant model
  2396 ;;
  2397                           
  2398                           	psect	text3
  2399   004798                     __ptext3:
  2400                           	callstack 0
  2401   004798                     _sprintf:
  2402                           	callstack 20
  2403   004798  0E6A               	movlw	low (?_sprintf+4)
  2404   00479A  0100               	movlb	0	; () banked
  2405   00479C  6F72               	movwf	sprintf@ap& (0+255),b
  2406   00479E  0E00               	movlw	high (?_sprintf+4)
  2407   0047A0  6F73               	movwf	(sprintf@ap+1)& (0+255),b
  2408   0047A2  C066  F074         	movff	sprintf@s,sprintf@f
  2409   0047A6  C067  F075         	movff	sprintf@s+1,sprintf@f+1
  2410   0047AA                     
  2411                           ; BSR set to: 0
  2412   0047AA  0E00               	movlw	0
  2413   0047AC  6F78               	movwf	(sprintf@f+4)& (0+255),b
  2414   0047AE  0E00               	movlw	0
  2415   0047B0  6F77               	movwf	(sprintf@f+3)& (0+255),b
  2416   0047B2                     
  2417                           ; BSR set to: 0
  2418   0047B2  0E00               	movlw	0
  2419   0047B4  6F7E               	movwf	(sprintf@f+10)& (0+255),b
  2420   0047B6  0E00               	movlw	0
  2421   0047B8  6F7D               	movwf	(sprintf@f+9)& (0+255),b
  2422   0047BA                     
  2423                           ; BSR set to: 0
  2424   0047BA  0E74               	movlw	low sprintf@f
  2425   0047BC  6F60               	movwf	vfprintf@fp& (0+255),b
  2426   0047BE  0E00               	movlw	high sprintf@f
  2427   0047C0  6F61               	movwf	(vfprintf@fp+1)& (0+255),b
  2428   0047C2  C068  F062         	movff	sprintf@fmt,vfprintf@fmt
  2429   0047C6  C069  F063         	movff	sprintf@fmt+1,vfprintf@fmt+1
  2430   0047CA  0E72               	movlw	low sprintf@ap
  2431   0047CC  6F64               	movwf	vfprintf@ap& (0+255),b
  2432   0047CE  0E00               	movlw	high sprintf@ap
  2433   0047D0  6F65               	movwf	(vfprintf@ap+1)& (0+255),b
  2434   0047D2  ECA2  F023         	call	_vfprintf	;wreg free
  2435   0047D6  0100               	movlb	0	; () banked
  2436   0047D8  5177               	movf	(sprintf@f+3)& (0+255),w,b
  2437   0047DA  2566               	addwf	sprintf@s& (0+255),w,b
  2438   0047DC  6ED9               	movwf	fsr2l,c
  2439   0047DE  5178               	movf	(sprintf@f+4)& (0+255),w,b
  2440   0047E0  2167               	addwfc	(sprintf@s+1)& (0+255),w,b
  2441   0047E2  6EDA               	movwf	fsr2h,c
  2442   0047E4  0E00               	movlw	0
  2443   0047E6  6EDF               	movwf	indf2,c
  2444   0047E8                     
  2445                           ; BSR set to: 0
  2446   0047E8  0012               	return		;funcret
  2447   0047EA                     __end_of_sprintf:
  2448                           	callstack 0
  2449                           
  2450 ;; *************** function _vfprintf *****************
  2451 ;; Defined at:
  2452 ;;		line 1520 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2453 ;; Parameters:    Size  Location     Type
  2454 ;;  fp              2    0[BANK0 ] PTR struct _IO_FILE
  2455 ;;		 -> sprintf@f(11), 
  2456 ;;  fmt             2    2[BANK0 ] PTR const unsigned char 
  2457 ;;		 -> STR_2(15), STR_1(22), 
  2458 ;;  ap              2    4[BANK0 ] PTR PTR void 
  2459 ;;		 -> sprintf@ap(2), 
  2460 ;; Auto vars:     Size  Location     Type
  2461 ;;  cfmt            2   84[COMRAM] PTR unsigned char 
  2462 ;;		 -> STR_2(15), STR_1(22), 
  2463 ;; Return value:  Size  Location     Type
  2464 ;;                  2    0[BANK0 ] int 
  2465 ;; Registers used:
  2466 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2467 ;; Tracked objects:
  2468 ;;		On entry : 0/0
  2469 ;;		On exit  : 0/0
  2470 ;;		Unchanged: 0/0
  2471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2472 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2473 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2475 ;;      Totals:         2       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2476 ;;Total ram usage:        8 bytes
  2477 ;; Hardware stack levels used: 1
  2478 ;; Hardware stack levels required when called: 8
  2479 ;; This function calls:
  2480 ;;		_vfpfcnvrt
  2481 ;; This function is called by:
  2482 ;;		_sprintf
  2483 ;; This function uses a non-reentrant model
  2484 ;;
  2485                           
  2486                           	psect	text4
  2487   004744                     __ptext4:
  2488                           	callstack 0
  2489   004744                     _vfprintf:
  2490                           	callstack 20
  2491   004744                     
  2492                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1520: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\source
      +                          s\c99\common\doprnt.c: 1521: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\comm
      +                          on\doprnt.c: 1523:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\
      +                          common\doprnt.c: 1525:     cfmt = (char *)fmt;
  2493   004744  C062  F055         	movff	vfprintf@fmt,vfprintf@cfmt
  2494   004748  C063  F056         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  2495                           
  2496                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  2497   00474C  EFB6  F023         	goto	l5079
  2498   004750                     l5077:
  2499                           
  2500                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1533:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  2501   004750  C060  F043         	movff	vfprintf@fp,vfpfcnvrt@fp
  2502   004754  C061  F044         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  2503   004758  0E55               	movlw	low vfprintf@cfmt
  2504   00475A  6E45               	movwf	vfpfcnvrt@fmt^0,c
  2505   00475C  0E00               	movlw	high vfprintf@cfmt
  2506   00475E  6E46               	movwf	(vfpfcnvrt@fmt+1)^0,c
  2507   004760  C064  F047         	movff	vfprintf@ap,vfpfcnvrt@ap
  2508   004764  C065  F048         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  2509   004768  ECF5  F01A         	call	_vfpfcnvrt	;wreg free
  2510   00476C                     l5079:
  2511                           
  2512                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  2513   00476C  C055  FFF6         	movff	vfprintf@cfmt,tblptrl
  2514   004770  C056  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  2515   004774                     	if	0	;tblptru may be non-zero
  2516   004774                     	endif
  2517   004774                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2518   004774  0E00               	movlw	low (__mediumconst shr (0+16))
  2519   004776  6EF8               	movwf	tblptru,c
  2520   004778                     	endif
  2521   004778  0008               	tblrd		*
  2522   00477A  50F5               	movf	tablat,w,c
  2523   00477C  0900               	iorlw	0
  2524   00477E  A4D8               	btfss	status,2,c
  2525   004780  EFC4  F023         	goto	u5521
  2526   004784  EFC6  F023         	goto	u5520
  2527   004788                     u5521:
  2528   004788  EFA8  F023         	goto	l5077
  2529   00478C                     u5520:
  2530   00478C                     
  2531                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1538:  return 0;
  2532   00478C  0E00               	movlw	0
  2533   00478E  0100               	movlb	0	; () banked
  2534   004790  6F61               	movwf	(?_vfprintf+1)& (0+255),b
  2535   004792  0E00               	movlw	0
  2536   004794  6F60               	movwf	?_vfprintf& (0+255),b
  2537   004796                     
  2538                           ; BSR set to: 0
  2539   004796  0012               	return		;funcret
  2540   004798                     __end_of_vfprintf:
  2541                           	callstack 0
  2542                           
  2543 ;; *************** function _vfpfcnvrt *****************
  2544 ;; Defined at:
  2545 ;;		line 1007 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2546 ;; Parameters:    Size  Location     Type
  2547 ;;  fp              2   66[COMRAM] PTR struct _IO_FILE
  2548 ;;		 -> sprintf@f(11), 
  2549 ;;  fmt             2   68[COMRAM] PTR PTR unsigned char 
  2550 ;;		 -> vfprintf@cfmt(2), 
  2551 ;;  ap              2   70[COMRAM] PTR PTR void 
  2552 ;;		 -> sprintf@ap(2), 
  2553 ;; Auto vars:     Size  Location     Type
  2554 ;;  convarg         8   74[COMRAM] struct .
  2555 ;;  cp              2   82[COMRAM] PTR unsigned char 
  2556 ;;		 -> STR_2(15), STR_1(22), 
  2557 ;;  i               2    0        int 
  2558 ;;  done            2    0        int 
  2559 ;;  c               1    0        unsigned char 
  2560 ;; Return value:  Size  Location     Type
  2561 ;;                  1    wreg      void 
  2562 ;; Registers used:
  2563 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2564 ;; Tracked objects:
  2565 ;;		On entry : 0/0
  2566 ;;		On exit  : 0/0
  2567 ;;		Unchanged: 0/0
  2568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2569 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2570 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2571 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2572 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2573 ;;Total ram usage:       18 bytes
  2574 ;; Hardware stack levels used: 1
  2575 ;; Hardware stack levels required when called: 7
  2576 ;; This function calls:
  2577 ;;		_dtoa
  2578 ;;		_fputc
  2579 ;; This function is called by:
  2580 ;;		_vfprintf
  2581 ;; This function uses a non-reentrant model
  2582 ;;
  2583                           
  2584                           	psect	text5
  2585   0035EA                     __ptext5:
  2586                           	callstack 0
  2587   0035EA                     _vfpfcnvrt:
  2588                           	callstack 20
  2589   0035EA                     
  2590                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1007: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1008: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\dopr
      +                          nt.c: 1009:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 1010:     int done, i;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1016:  } convarg;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1019:     if ((*fmt)[0] == '%') {
  2591   0035EA  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2592   0035EE  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2593   0035F2  CFDE FFF6          	movff	postinc2,tblptrl
  2594   0035F6  CFDD FFF7          	movff	postdec2,tblptrh
  2595   0035FA                     	if	0	;tblptru may be non-zero
  2596   0035FA                     	endif
  2597   0035FA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2598   0035FA  0E00               	movlw	low (__mediumconst shr (0+16))
  2599   0035FC  6EF8               	movwf	tblptru,c
  2600   0035FE                     	endif
  2601   0035FE  0008               	tblrd		*
  2602   003600  50F5               	movf	tablat,w,c
  2603   003602  0A25               	xorlw	37
  2604   003604  A4D8               	btfss	status,2,c
  2605   003606  EF07  F01B         	goto	u5491
  2606   00360A  EF09  F01B         	goto	u5490
  2607   00360E                     u5491:
  2608   00360E  EF8D  F01B         	goto	l5069
  2609   003612                     u5490:
  2610   003612                     
  2611                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1020:         ++*
      +                          fmt;
  2612   003612  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2613   003616  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2614   00361A  2ADE               	incf	postinc2,f,c
  2615   00361C  0E00               	movlw	0
  2616   00361E  22DD               	addwfc	postdec2,f,c
  2617   003620                     
  2618                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1022:         fla
      +                          gs = width = 0;
  2619   003620  0E00               	movlw	0
  2620   003622  0100               	movlb	0	; () banked
  2621   003624  6FE5               	movwf	(_width+1)& (0+255),b
  2622   003626  0E00               	movlw	0
  2623   003628  6FE4               	movwf	_width& (0+255),b
  2624   00362A  C0E4  F0EC         	movff	_width,_flags
  2625   00362E                     
  2626                           ; BSR set to: 0
  2627                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1023:         pre
      +                          c = -1;
  2628   00362E  69E6               	setf	_prec& (0+255),b
  2629   003630  69E7               	setf	(_prec+1)& (0+255),b
  2630   003632                     
  2631                           ; BSR set to: 0
  2632                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1117:   cp = *fmt
      +                          ;
  2633   003632  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2634   003636  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2635   00363A  CFDE F053          	movff	postinc2,vfpfcnvrt@cp
  2636   00363E  CFDD F054          	movff	postdec2,vfpfcnvrt@cp+1
  2637   003642                     
  2638                           ; BSR set to: 0
  2639                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1187:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  2640   003642  C053  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2641   003646  C054  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  2642   00364A                     	if	0	;tblptru may be non-zero
  2643   00364A                     	endif
  2644   00364A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2645   00364A  0E00               	movlw	low (__mediumconst shr (0+16))
  2646   00364C  6EF8               	movwf	tblptru,c
  2647   00364E                     	endif
  2648   00364E  0008               	tblrd		*
  2649   003650  50F5               	movf	tablat,w,c
  2650   003652  0A64               	xorlw	100
  2651   003654  B4D8               	btfsc	status,2,c
  2652   003656  EF2F  F01B         	goto	u5501
  2653   00365A  EF31  F01B         	goto	u5500
  2654   00365E                     u5501:
  2655   00365E  EF41  F01B         	goto	l5059
  2656   003662                     u5500:
  2657   003662                     
  2658                           ; BSR set to: 0
  2659   003662  C053  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2660   003666  C054  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  2661   00366A                     	if	0	;tblptru may be non-zero
  2662   00366A                     	endif
  2663   00366A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2664   00366A  0E00               	movlw	low (__mediumconst shr (0+16))
  2665   00366C  6EF8               	movwf	tblptru,c
  2666   00366E                     	endif
  2667   00366E  0008               	tblrd		*
  2668   003670  50F5               	movf	tablat,w,c
  2669   003672  0A69               	xorlw	105
  2670   003674  A4D8               	btfss	status,2,c
  2671   003676  EF3F  F01B         	goto	u5511
  2672   00367A  EF41  F01B         	goto	u5510
  2673   00367E                     u5511:
  2674   00367E  EF84  F01B         	goto	l5065
  2675   003682                     u5510:
  2676   003682                     l5059:
  2677                           
  2678                           ; BSR set to: 0
  2679                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1230:    convarg.
      +                          ll = (long long)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  2680   003682  C047  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2681   003686  C048  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2682   00368A  CFDF F049          	movff	indf2,??_vfpfcnvrt
  2683   00368E  0E02               	movlw	2
  2684   003690  26DE               	addwf	postinc2,f,c
  2685   003692  CFDF F04A          	movff	indf2,??_vfpfcnvrt+1
  2686   003696  0E00               	movlw	0
  2687   003698  22DD               	addwfc	postdec2,f,c
  2688   00369A  C049  FFD9         	movff	??_vfpfcnvrt,fsr2l
  2689   00369E  C04A  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2690   0036A2  CFDE F04B          	movff	postinc2,vfpfcnvrt@convarg
  2691   0036A6  CFDD F04C          	movff	postdec2,vfpfcnvrt@convarg+1
  2692   0036AA  0E00               	movlw	0
  2693   0036AC  BE4C               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  2694   0036AE  0EFF               	movlw	-1
  2695   0036B0  6E4D               	movwf	(vfpfcnvrt@convarg+2)^0,c
  2696   0036B2  6E4E               	movwf	(vfpfcnvrt@convarg+3)^0,c
  2697   0036B4  6E4F               	movwf	(vfpfcnvrt@convarg+4)^0,c
  2698   0036B6  6E50               	movwf	(vfpfcnvrt@convarg+5)^0,c
  2699   0036B8  6E51               	movwf	(vfpfcnvrt@convarg+6)^0,c
  2700   0036BA  6E52               	movwf	(vfpfcnvrt@convarg+7)^0,c
  2701                           
  2702                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1232:    *fmt = c
      +                          p+1;
  2703   0036BC  0E01               	movlw	1
  2704   0036BE  2453               	addwf	vfpfcnvrt@cp^0,w,c
  2705   0036C0  6E49               	movwf	??_vfpfcnvrt^0,c
  2706   0036C2  0E00               	movlw	0
  2707   0036C4  2054               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  2708   0036C6  6E4A               	movwf	(??_vfpfcnvrt+1)^0,c
  2709   0036C8  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2710   0036CC  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2711   0036D0  C049  FFDE         	movff	??_vfpfcnvrt,postinc2
  2712   0036D4  C04A  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  2713   0036D8                     
  2714                           ; BSR set to: 0
  2715                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1233:    return (
      +                          void) dtoa(fp, convarg.ll);;	Return value of _vfpfcnvrt is never used
  2716   0036D8  C043  F020         	movff	vfpfcnvrt@fp,dtoa@fp
  2717   0036DC  C044  F021         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  2718   0036E0  C04B  F022         	movff	vfpfcnvrt@convarg,dtoa@d
  2719   0036E4  C04C  F023         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  2720   0036E8  C04D  F024         	movff	vfpfcnvrt@convarg+2,dtoa@d+2
  2721   0036EC  C04E  F025         	movff	vfpfcnvrt@convarg+3,dtoa@d+3
  2722   0036F0  C04F  F026         	movff	vfpfcnvrt@convarg+4,dtoa@d+4
  2723   0036F4  C050  F027         	movff	vfpfcnvrt@convarg+5,dtoa@d+5
  2724   0036F8  C051  F028         	movff	vfpfcnvrt@convarg+6,dtoa@d+6
  2725   0036FC  C052  F029         	movff	vfpfcnvrt@convarg+7,dtoa@d+7
  2726   003700  EC79  F015         	call	_dtoa	;wreg free
  2727   003704  EFA3  F01B         	goto	l1283
  2728   003708                     l5065:
  2729                           
  2730                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1509:         ++*
      +                          fmt;
  2731   003708  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2732   00370C  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2733   003710  2ADE               	incf	postinc2,f,c
  2734   003712  0E00               	movlw	0
  2735   003714  22DD               	addwfc	postdec2,f,c
  2736   003716  EFA3  F01B         	goto	l1283
  2737   00371A                     l5069:
  2738                           
  2739                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1514:     fputc((
      +                          int)(*fmt)[0], fp);
  2740   00371A  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2741   00371E  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2742   003722  CFDE FFF6          	movff	postinc2,tblptrl
  2743   003726  CFDD FFF7          	movff	postdec2,tblptrh
  2744   00372A                     	if	0	;tblptru may be non-zero
  2745   00372A                     	endif
  2746   00372A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2747   00372A  0E00               	movlw	low (__mediumconst shr (0+16))
  2748   00372C  6EF8               	movwf	tblptru,c
  2749   00372E                     	endif
  2750   00372E  0008               	tblrd		*
  2751   003730  50F5               	movf	tablat,w,c
  2752   003732  6E05               	movwf	fputc@c^0,c
  2753   003734  6A06               	clrf	(fputc@c+1)^0,c
  2754   003736  C043  F007         	movff	vfpfcnvrt@fp,fputc@fp
  2755   00373A  C044  F008         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2756   00373E  EC62  F021         	call	_fputc	;wreg free
  2757   003742  EF84  F01B         	goto	l5065
  2758   003746                     l1283:
  2759   003746  0012               	return		;funcret
  2760   003748                     __end_of_vfpfcnvrt:
  2761                           	callstack 0
  2762                           
  2763 ;; *************** function _dtoa *****************
  2764 ;; Defined at:
  2765 ;;		line 443 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2766 ;; Parameters:    Size  Location     Type
  2767 ;;  fp              2   31[COMRAM] PTR struct _IO_FILE
  2768 ;;		 -> sprintf@f(11), 
  2769 ;;  d               8   33[COMRAM] long long 
  2770 ;; Auto vars:     Size  Location     Type
  2771 ;;  n               8   55[COMRAM] long long 
  2772 ;;  i               2   64[COMRAM] int 
  2773 ;;  w               2   53[COMRAM] int 
  2774 ;;  p               2   51[COMRAM] int 
  2775 ;;  s               1   63[COMRAM] unsigned char 
  2776 ;; Return value:  Size  Location     Type
  2777 ;;                  1    wreg      void 
  2778 ;; Registers used:
  2779 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2780 ;; Tracked objects:
  2781 ;;		On entry : 0/0
  2782 ;;		On exit  : 0/0
  2783 ;;		Unchanged: 0/0
  2784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2785 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2786 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2787 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2788 ;;      Totals:        35       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2789 ;;Total ram usage:       35 bytes
  2790 ;; Hardware stack levels used: 1
  2791 ;; Hardware stack levels required when called: 6
  2792 ;; This function calls:
  2793 ;;		___aodiv
  2794 ;;		___aomod
  2795 ;;		_abs
  2796 ;;		_pad
  2797 ;; This function is called by:
  2798 ;;		_vfpfcnvrt
  2799 ;; This function uses a non-reentrant model
  2800 ;;
  2801                           
  2802                           	psect	text6
  2803   002AF2                     __ptext6:
  2804                           	callstack 0
  2805   002AF2                     _dtoa:
  2806                           	callstack 20
  2807   002AF2                     
  2808                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 443: static void 
      +                          dtoa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\
      +                          doprnt.c: 444: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          45:  char s;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 446: 
      +                              int i, p, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          47:     long long n;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 450:     n = d;
  2809   002AF2  C022  F038         	movff	dtoa@d,dtoa@n
  2810   002AF6  C023  F039         	movff	dtoa@d+1,dtoa@n+1
  2811   002AFA  C024  F03A         	movff	dtoa@d+2,dtoa@n+2
  2812   002AFE  C025  F03B         	movff	dtoa@d+3,dtoa@n+3
  2813   002B02  C026  F03C         	movff	dtoa@d+4,dtoa@n+4
  2814   002B06  C027  F03D         	movff	dtoa@d+5,dtoa@n+5
  2815   002B0A  C028  F03E         	movff	dtoa@d+6,dtoa@n+6
  2816   002B0E  C029  F03F         	movff	dtoa@d+7,dtoa@n+7
  2817   002B12                     
  2818                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 451:     s = n < 
      +                          0 ? 1 : 0;
  2819   002B12  BE3F               	btfsc	(dtoa@n+7)^0,7,c
  2820   002B14  EF8E  F015         	goto	u5391
  2821   002B18  EF91  F015         	goto	u5390
  2822   002B1C                     u5391:
  2823   002B1C  0E01               	movlw	1
  2824   002B1E  EF92  F015         	goto	u5400
  2825   002B22                     u5390:
  2826   002B22  0E00               	movlw	0
  2827   002B24                     u5400:
  2828   002B24  6E40               	movwf	dtoa@s^0,c
  2829   002B26                     
  2830                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 452:     if (s) {
  2831   002B26  5040               	movf	dtoa@s^0,w,c
  2832   002B28  B4D8               	btfsc	status,2,c
  2833   002B2A  EF99  F015         	goto	u5411
  2834   002B2E  EF9B  F015         	goto	u5410
  2835   002B32                     u5411:
  2836   002B32  EFAB  F015         	goto	l5001
  2837   002B36                     u5410:
  2838   002B36                     
  2839                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 453:         n = 
      +                          -n;
  2840   002B36  1E3F               	comf	(dtoa@n+7)^0,f,c
  2841   002B38  1E3E               	comf	(dtoa@n+6)^0,f,c
  2842   002B3A  1E3D               	comf	(dtoa@n+5)^0,f,c
  2843   002B3C  1E3C               	comf	(dtoa@n+4)^0,f,c
  2844   002B3E  1E3B               	comf	(dtoa@n+3)^0,f,c
  2845   002B40  1E3A               	comf	(dtoa@n+2)^0,f,c
  2846   002B42  1E39               	comf	(dtoa@n+1)^0,f,c
  2847   002B44  6C38               	negf	dtoa@n^0,c
  2848   002B46  0E00               	movlw	0
  2849   002B48  2239               	addwfc	(dtoa@n+1)^0,f,c
  2850   002B4A  223A               	addwfc	(dtoa@n+2)^0,f,c
  2851   002B4C  223B               	addwfc	(dtoa@n+3)^0,f,c
  2852   002B4E  223C               	addwfc	(dtoa@n+4)^0,f,c
  2853   002B50  223D               	addwfc	(dtoa@n+5)^0,f,c
  2854   002B52  223E               	addwfc	(dtoa@n+6)^0,f,c
  2855   002B54  223F               	addwfc	(dtoa@n+7)^0,f,c
  2856   002B56                     l5001:
  2857                           
  2858                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 462:     p = (0 <
      +                           prec) ? prec : 1;
  2859   002B56  0100               	movlb	0	; () banked
  2860   002B58  BFE7               	btfsc	(_prec+1)& (0+255),7,b
  2861   002B5A  EFB9  F015         	goto	u5420
  2862   002B5E  51E7               	movf	(_prec+1)& (0+255),w,b
  2863   002B60  E106               	bnz	u5421
  2864   002B62  05E6               	decf	_prec& (0+255),w,b
  2865   002B64  B0D8               	btfsc	status,0,c
  2866   002B66  EFB7  F015         	goto	u5421
  2867   002B6A  EFB9  F015         	goto	u5420
  2868   002B6E                     u5421:
  2869   002B6E  EFBF  F015         	goto	l1262
  2870   002B72                     u5420:
  2871   002B72                     
  2872                           ; BSR set to: 0
  2873   002B72  0E00               	movlw	0
  2874   002B74  6E35               	movwf	(dtoa@p+1)^0,c
  2875   002B76  0E01               	movlw	1
  2876   002B78  6E34               	movwf	dtoa@p^0,c
  2877   002B7A  EFC3  F015         	goto	l1264
  2878   002B7E                     l1262:
  2879                           
  2880                           ; BSR set to: 0
  2881   002B7E  C0E6  F034         	movff	_prec,dtoa@p
  2882   002B82  C0E7  F035         	movff	_prec+1,dtoa@p+1
  2883   002B86                     l1264:
  2884                           
  2885                           ; BSR set to: 0
  2886                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 463:     w = widt
      +                          h;
  2887   002B86  C0E4  F036         	movff	_width,dtoa@w
  2888   002B8A  C0E5  F037         	movff	_width+1,dtoa@w+1
  2889   002B8E                     
  2890                           ; BSR set to: 0
  2891                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 464:     if (s
  2892   002B8E  5040               	movf	dtoa@s^0,w,c
  2893   002B90  B4D8               	btfsc	status,2,c
  2894   002B92  EFCD  F015         	goto	u5431
  2895   002B96  EFCF  F015         	goto	u5430
  2896   002B9A                     u5431:
  2897   002B9A  EFE6  F015         	goto	l1265
  2898   002B9E                     u5430:
  2899   002B9E                     
  2900                           ; BSR set to: 0
  2901                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 468:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 469:         --w;
  2902   002B9E  0636               	decf	dtoa@w^0,f,c
  2903   002BA0  A0D8               	btfss	status,0,c
  2904   002BA2  0637               	decf	(dtoa@w+1)^0,f,c
  2905   002BA4                     
  2906                           ; BSR set to: 0
  2907                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 470:   s = s ? '-
      +                          ' : '+';
  2908   002BA4  5040               	movf	dtoa@s^0,w,c
  2909   002BA6  A4D8               	btfss	status,2,c
  2910   002BA8  EFD8  F015         	goto	u5441
  2911   002BAC  EFDA  F015         	goto	u5440
  2912   002BB0                     u5441:
  2913   002BB0  EFE0  F015         	goto	l5013
  2914   002BB4                     u5440:
  2915   002BB4                     
  2916                           ; BSR set to: 0
  2917   002BB4  0E00               	movlw	0
  2918   002BB6  6E33               	movwf	(_dtoa$2702+1)^0,c
  2919   002BB8  0E2B               	movlw	43
  2920   002BBA  6E32               	movwf	_dtoa$2702^0,c
  2921   002BBC  EFE4  F015         	goto	l5015
  2922   002BC0                     l5013:
  2923                           
  2924                           ; BSR set to: 0
  2925   002BC0  0E00               	movlw	0
  2926   002BC2  6E33               	movwf	(_dtoa$2702+1)^0,c
  2927   002BC4  0E2D               	movlw	45
  2928   002BC6  6E32               	movwf	_dtoa$2702^0,c
  2929   002BC8                     l5015:
  2930                           
  2931                           ; BSR set to: 0
  2932   002BC8  C032  F040         	movff	_dtoa$2702,dtoa@s
  2933   002BCC                     l1265:
  2934                           
  2935                           ; BSR set to: 0
  2936                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 480:     i = size
      +                          of(dbuf) - 1;
  2937   002BCC  0E00               	movlw	0
  2938   002BCE  6E42               	movwf	(dtoa@i+1)^0,c
  2939   002BD0  0E1F               	movlw	31
  2940   002BD2  6E41               	movwf	dtoa@i^0,c
  2941   002BD4                     
  2942                           ; BSR set to: 0
  2943                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 481:     dbuf[i] 
      +                          = '\0';
  2944   002BD4  0E00               	movlw	0
  2945   002BD6  0101               	movlb	1	; () banked
  2946   002BD8  6FF5               	movwf	(_dbuf+31)& (0+255),b
  2947                           
  2948                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  2949   002BDA  EF6B  F016         	goto	l5029
  2950   002BDE                     l5019:
  2951                           
  2952                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 486:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 487:         --i;
  2953   002BDE  0641               	decf	dtoa@i^0,f,c
  2954   002BE0  A0D8               	btfss	status,0,c
  2955   002BE2  0642               	decf	(dtoa@i+1)^0,f,c
  2956   002BE4                     
  2957                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 488:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  2958   002BE4  0ED6               	movlw	low _dbuf
  2959   002BE6  2441               	addwf	dtoa@i^0,w,c
  2960   002BE8  6ED9               	movwf	fsr2l,c
  2961   002BEA  0E01               	movlw	high _dbuf
  2962   002BEC  2042               	addwfc	(dtoa@i+1)^0,w,c
  2963   002BEE  6EDA               	movwf	fsr2h,c
  2964   002BF0  C038  F005         	movff	dtoa@n,___aomod@dividend
  2965   002BF4  C039  F006         	movff	dtoa@n+1,___aomod@dividend+1
  2966   002BF8  C03A  F007         	movff	dtoa@n+2,___aomod@dividend+2
  2967   002BFC  C03B  F008         	movff	dtoa@n+3,___aomod@dividend+3
  2968   002C00  C03C  F009         	movff	dtoa@n+4,___aomod@dividend+4
  2969   002C04  C03D  F00A         	movff	dtoa@n+5,___aomod@dividend+5
  2970   002C08  C03E  F00B         	movff	dtoa@n+6,___aomod@dividend+6
  2971   002C0C  C03F  F00C         	movff	dtoa@n+7,___aomod@dividend+7
  2972   002C10  0E0A               	movlw	10
  2973   002C12  6E0D               	movwf	___aomod@divisor^0,c
  2974   002C14  0E00               	movlw	0
  2975   002C16  6E0E               	movwf	(___aomod@divisor+1)^0,c
  2976   002C18  0E00               	movlw	0
  2977   002C1A  6E0F               	movwf	(___aomod@divisor+2)^0,c
  2978   002C1C  0E00               	movlw	0
  2979   002C1E  6E10               	movwf	(___aomod@divisor+3)^0,c
  2980   002C20  0E00               	movlw	0
  2981   002C22  6E11               	movwf	(___aomod@divisor+4)^0,c
  2982   002C24  0E00               	movlw	0
  2983   002C26  6E12               	movwf	(___aomod@divisor+5)^0,c
  2984   002C28  0E00               	movlw	0
  2985   002C2A  6E13               	movwf	(___aomod@divisor+6)^0,c
  2986   002C2C  0E00               	movlw	0
  2987   002C2E  6E14               	movwf	(___aomod@divisor+7)^0,c
  2988   002C30  EC43  F01A         	call	___aomod	;wreg free
  2989   002C34  C005  F02A         	movff	?___aomod,??_dtoa
  2990   002C38  C006  F02B         	movff	?___aomod+1,??_dtoa+1
  2991   002C3C  C007  F02C         	movff	?___aomod+2,??_dtoa+2
  2992   002C40  C008  F02D         	movff	?___aomod+3,??_dtoa+3
  2993   002C44  C009  F02E         	movff	?___aomod+4,??_dtoa+4
  2994   002C48  C00A  F02F         	movff	?___aomod+5,??_dtoa+5
  2995   002C4C  C00B  F030         	movff	?___aomod+6,??_dtoa+6
  2996   002C50  C00C  F031         	movff	?___aomod+7,??_dtoa+7
  2997   002C54  C02A  F017         	movff	??_dtoa,abs@a
  2998   002C58  C02B  F018         	movff	??_dtoa+1,abs@a+1
  2999   002C5C  EC20  F025         	call	_abs	;wreg free
  3000   002C60  5017               	movf	?_abs^0,w,c
  3001   002C62  0F30               	addlw	48
  3002   002C64  6EDF               	movwf	indf2,c
  3003   002C66                     
  3004                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 489:         --p;
  3005   002C66  0634               	decf	dtoa@p^0,f,c
  3006   002C68  A0D8               	btfss	status,0,c
  3007   002C6A  0635               	decf	(dtoa@p+1)^0,f,c
  3008   002C6C                     
  3009                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 490:         --w;
  3010   002C6C  0636               	decf	dtoa@w^0,f,c
  3011   002C6E  A0D8               	btfss	status,0,c
  3012   002C70  0637               	decf	(dtoa@w+1)^0,f,c
  3013   002C72                     
  3014                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 491:         n = 
      +                          n / 10;
  3015   002C72  C038  F005         	movff	dtoa@n,___aodiv@dividend
  3016   002C76  C039  F006         	movff	dtoa@n+1,___aodiv@dividend+1
  3017   002C7A  C03A  F007         	movff	dtoa@n+2,___aodiv@dividend+2
  3018   002C7E  C03B  F008         	movff	dtoa@n+3,___aodiv@dividend+3
  3019   002C82  C03C  F009         	movff	dtoa@n+4,___aodiv@dividend+4
  3020   002C86  C03D  F00A         	movff	dtoa@n+5,___aodiv@dividend+5
  3021   002C8A  C03E  F00B         	movff	dtoa@n+6,___aodiv@dividend+6
  3022   002C8E  C03F  F00C         	movff	dtoa@n+7,___aodiv@dividend+7
  3023   002C92  0E0A               	movlw	10
  3024   002C94  6E0D               	movwf	___aodiv@divisor^0,c
  3025   002C96  0E00               	movlw	0
  3026   002C98  6E0E               	movwf	(___aodiv@divisor+1)^0,c
  3027   002C9A  0E00               	movlw	0
  3028   002C9C  6E0F               	movwf	(___aodiv@divisor+2)^0,c
  3029   002C9E  0E00               	movlw	0
  3030   002CA0  6E10               	movwf	(___aodiv@divisor+3)^0,c
  3031   002CA2  0E00               	movlw	0
  3032   002CA4  6E11               	movwf	(___aodiv@divisor+4)^0,c
  3033   002CA6  0E00               	movlw	0
  3034   002CA8  6E12               	movwf	(___aodiv@divisor+5)^0,c
  3035   002CAA  0E00               	movlw	0
  3036   002CAC  6E13               	movwf	(___aodiv@divisor+6)^0,c
  3037   002CAE  0E00               	movlw	0
  3038   002CB0  6E14               	movwf	(___aodiv@divisor+7)^0,c
  3039   002CB2  ECC9  F018         	call	___aodiv	;wreg free
  3040   002CB6  C005  F038         	movff	?___aodiv,dtoa@n
  3041   002CBA  C006  F039         	movff	?___aodiv+1,dtoa@n+1
  3042   002CBE  C007  F03A         	movff	?___aodiv+2,dtoa@n+2
  3043   002CC2  C008  F03B         	movff	?___aodiv+3,dtoa@n+3
  3044   002CC6  C009  F03C         	movff	?___aodiv+4,dtoa@n+4
  3045   002CCA  C00A  F03D         	movff	?___aodiv+5,dtoa@n+5
  3046   002CCE  C00B  F03E         	movff	?___aodiv+6,dtoa@n+6
  3047   002CD2  C00C  F03F         	movff	?___aodiv+7,dtoa@n+7
  3048   002CD6                     l5029:
  3049                           
  3050                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  3051   002CD6  BE42               	btfsc	(dtoa@i+1)^0,7,c
  3052   002CD8  EF76  F016         	goto	u5451
  3053   002CDC  5042               	movf	(dtoa@i+1)^0,w,c
  3054   002CDE  E108               	bnz	u5450
  3055   002CE0  0441               	decf	dtoa@i^0,w,c
  3056   002CE2  A0D8               	btfss	status,0,c
  3057   002CE4  EF76  F016         	goto	u5451
  3058   002CE8  EF78  F016         	goto	u5450
  3059   002CEC                     u5451:
  3060   002CEC  EF94  F016         	goto	l5035
  3061   002CF0                     u5450:
  3062   002CF0  5038               	movf	dtoa@n^0,w,c
  3063   002CF2  1039               	iorwf	(dtoa@n+1)^0,w,c
  3064   002CF4  103A               	iorwf	(dtoa@n+2)^0,w,c
  3065   002CF6  103B               	iorwf	(dtoa@n+3)^0,w,c
  3066   002CF8  103C               	iorwf	(dtoa@n+4)^0,w,c
  3067   002CFA  103D               	iorwf	(dtoa@n+5)^0,w,c
  3068   002CFC  103E               	iorwf	(dtoa@n+6)^0,w,c
  3069   002CFE  103F               	iorwf	(dtoa@n+7)^0,w,c
  3070   002D00  A4D8               	btfss	status,2,c
  3071   002D02  EF85  F016         	goto	u5461
  3072   002D06  EF87  F016         	goto	u5460
  3073   002D0A                     u5461:
  3074   002D0A  EFEF  F015         	goto	l5019
  3075   002D0E                     u5460:
  3076   002D0E  BE35               	btfsc	(dtoa@p+1)^0,7,c
  3077   002D10  EF94  F016         	goto	u5470
  3078   002D14  5035               	movf	(dtoa@p+1)^0,w,c
  3079   002D16  E106               	bnz	u5471
  3080   002D18  0434               	decf	dtoa@p^0,w,c
  3081   002D1A  B0D8               	btfsc	status,0,c
  3082   002D1C  EF92  F016         	goto	u5471
  3083   002D20  EF94  F016         	goto	u5470
  3084   002D24                     u5471:
  3085   002D24  EFEF  F015         	goto	l5019
  3086   002D28                     u5470:
  3087   002D28                     l5035:
  3088                           
  3089                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 495:     if (s !=
      +                           0) {
  3090   002D28  5040               	movf	dtoa@s^0,w,c
  3091   002D2A  B4D8               	btfsc	status,2,c
  3092   002D2C  EF9A  F016         	goto	u5481
  3093   002D30  EF9C  F016         	goto	u5480
  3094   002D34                     u5481:
  3095   002D34  EFA7  F016         	goto	l5041
  3096   002D38                     u5480:
  3097   002D38                     
  3098                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 496:         --i;
  3099   002D38  0641               	decf	dtoa@i^0,f,c
  3100   002D3A  A0D8               	btfss	status,0,c
  3101   002D3C  0642               	decf	(dtoa@i+1)^0,f,c
  3102   002D3E                     
  3103                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 497:         dbuf
      +                          [i] = s;
  3104   002D3E  0ED6               	movlw	low _dbuf
  3105   002D40  2441               	addwf	dtoa@i^0,w,c
  3106   002D42  6ED9               	movwf	fsr2l,c
  3107   002D44  0E01               	movlw	high _dbuf
  3108   002D46  2042               	addwfc	(dtoa@i+1)^0,w,c
  3109   002D48  6EDA               	movwf	fsr2h,c
  3110   002D4A  C040  FFDF         	movff	dtoa@s,indf2
  3111   002D4E                     l5041:
  3112                           
  3113                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 501:     return (
      +                          void) pad(fp, &dbuf[i], w);
  3114   002D4E  C020  F015         	movff	dtoa@fp,pad@fp
  3115   002D52  C021  F016         	movff	dtoa@fp+1,pad@fp+1
  3116   002D56  0ED6               	movlw	low _dbuf
  3117   002D58  2441               	addwf	dtoa@i^0,w,c
  3118   002D5A  6E17               	movwf	pad@buf^0,c
  3119   002D5C  0E01               	movlw	high _dbuf
  3120   002D5E  2042               	addwfc	(dtoa@i+1)^0,w,c
  3121   002D60  6E18               	movwf	(pad@buf+1)^0,c
  3122   002D62  C036  F019         	movff	dtoa@w,pad@p
  3123   002D66  C037  F01A         	movff	dtoa@w+1,pad@p+1
  3124   002D6A  ECFC  F022         	call	_pad	;wreg free
  3125   002D6E  0012               	return		;funcret
  3126   002D70                     __end_of_dtoa:
  3127                           	callstack 0
  3128                           
  3129 ;; *************** function _pad *****************
  3130 ;; Defined at:
  3131 ;;		line 133 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  3132 ;; Parameters:    Size  Location     Type
  3133 ;;  fp              2   20[COMRAM] PTR struct _IO_FILE
  3134 ;;		 -> sprintf@f(11), 
  3135 ;;  buf             2   22[COMRAM] PTR unsigned char 
  3136 ;;		 -> dbuf(32), 
  3137 ;;  p               2   24[COMRAM] int 
  3138 ;; Auto vars:     Size  Location     Type
  3139 ;;  w               2   29[COMRAM] int 
  3140 ;;  i               2   27[COMRAM] int 
  3141 ;; Return value:  Size  Location     Type
  3142 ;;                  1    wreg      void 
  3143 ;; Registers used:
  3144 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3145 ;; Tracked objects:
  3146 ;;		On entry : 0/0
  3147 ;;		On exit  : 0/0
  3148 ;;		Unchanged: 0/0
  3149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3150 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3151 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3152 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3153 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3154 ;;Total ram usage:       11 bytes
  3155 ;; Hardware stack levels used: 1
  3156 ;; Hardware stack levels required when called: 5
  3157 ;; This function calls:
  3158 ;;		_fputc
  3159 ;;		_fputs
  3160 ;; This function is called by:
  3161 ;;		_dtoa
  3162 ;; This function uses a non-reentrant model
  3163 ;;
  3164                           
  3165                           	psect	text7
  3166   0045F8                     __ptext7:
  3167                           	callstack 0
  3168   0045F8                     _pad:
  3169                           	callstack 20
  3170   0045F8                     
  3171                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 133: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\com
      +                          mon\doprnt.c: 134: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 135:     int i, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt
      +                          .c: 145:     w = (p < 0) ? 0 : p;
  3172   0045F8  BE1A               	btfsc	(pad@p+1)^0,7,c
  3173   0045FA  EF01  F023         	goto	u5361
  3174   0045FE  EF03  F023         	goto	u5360
  3175   004602                     u5361:
  3176   004602  EF09  F023         	goto	l4979
  3177   004606                     u5360:
  3178   004606  C019  F01E         	movff	pad@p,pad@w
  3179   00460A  C01A  F01F         	movff	pad@p+1,pad@w+1
  3180   00460E  EF0D  F023         	goto	l1253
  3181   004612                     l4979:
  3182   004612  0E00               	movlw	0
  3183   004614  6E1F               	movwf	(pad@w+1)^0,c
  3184   004616  0E00               	movlw	0
  3185   004618  6E1E               	movwf	pad@w^0,c
  3186   00461A                     l1253:
  3187                           
  3188                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 146:     i = 0;
  3189   00461A  0E00               	movlw	0
  3190   00461C  6E1D               	movwf	(pad@i+1)^0,c
  3191   00461E  0E00               	movlw	0
  3192   004620  6E1C               	movwf	pad@i^0,c
  3193                           
  3194                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  3195   004622  EF1F  F023         	goto	l4985
  3196   004626                     l4981:
  3197                           
  3198                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 148:         fput
      +                          c(' ', fp);
  3199   004626  0E00               	movlw	0
  3200   004628  6E06               	movwf	(fputc@c+1)^0,c
  3201   00462A  0E20               	movlw	32
  3202   00462C  6E05               	movwf	fputc@c^0,c
  3203   00462E  C015  F007         	movff	pad@fp,fputc@fp
  3204   004632  C016  F008         	movff	pad@fp+1,fputc@fp+1
  3205   004636  EC62  F021         	call	_fputc	;wreg free
  3206   00463A                     
  3207                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 149:         ++i;
  3208   00463A  4A1C               	infsnz	pad@i^0,f,c
  3209   00463C  2A1D               	incf	(pad@i+1)^0,f,c
  3210   00463E                     l4985:
  3211                           
  3212                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  3213   00463E  501E               	movf	pad@w^0,w,c
  3214   004640  5C1C               	subwf	pad@i^0,w,c
  3215   004642  501D               	movf	(pad@i+1)^0,w,c
  3216   004644  0A80               	xorlw	128
  3217   004646  6E1B               	movwf	??_pad^0,c
  3218   004648  501F               	movf	(pad@w+1)^0,w,c
  3219   00464A  0A80               	xorlw	128
  3220   00464C  581B               	subwfb	??_pad^0,w,c
  3221   00464E  A0D8               	btfss	status,0,c
  3222   004650  EF2C  F023         	goto	u5371
  3223   004654  EF2E  F023         	goto	u5370
  3224   004658                     u5371:
  3225   004658  EF13  F023         	goto	l4981
  3226   00465C                     u5370:
  3227   00465C                     
  3228                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 156:         fput
      +                          s((const char *)buf, fp);
  3229   00465C  C017  F00E         	movff	pad@buf,fputs@s
  3230   004660  C018  F00F         	movff	pad@buf+1,fputs@s+1
  3231   004664  C015  F010         	movff	pad@fp,fputs@fp
  3232   004668  C016  F011         	movff	pad@fp+1,fputs@fp+1
  3233   00466C  ECDD  F024         	call	_fputs	;wreg free
  3234   004670  0012               	return		;funcret
  3235   004672                     __end_of_pad:
  3236                           	callstack 0
  3237                           
  3238 ;; *************** function _fputs *****************
  3239 ;; Defined at:
  3240 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputs.c"
  3241 ;; Parameters:    Size  Location     Type
  3242 ;;  s               2   13[COMRAM] PTR const unsigned char 
  3243 ;;		 -> dbuf(32), 
  3244 ;;  fp              2   15[COMRAM] PTR struct _IO_FILE
  3245 ;;		 -> sprintf@f(11), 
  3246 ;; Auto vars:     Size  Location     Type
  3247 ;;  i               2   18[COMRAM] int 
  3248 ;;  c               1   17[COMRAM] unsigned char 
  3249 ;; Return value:  Size  Location     Type
  3250 ;;                  2   13[COMRAM] int 
  3251 ;; Registers used:
  3252 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3253 ;; Tracked objects:
  3254 ;;		On entry : 0/0
  3255 ;;		On exit  : 0/0
  3256 ;;		Unchanged: 0/0
  3257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3258 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3259 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3261 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3262 ;;Total ram usage:        7 bytes
  3263 ;; Hardware stack levels used: 1
  3264 ;; Hardware stack levels required when called: 4
  3265 ;; This function calls:
  3266 ;;		_fputc
  3267 ;; This function is called by:
  3268 ;;		_pad
  3269 ;; This function uses a non-reentrant model
  3270 ;;
  3271                           
  3272                           	psect	text8
  3273   0049BA                     __ptext8:
  3274                           	callstack 0
  3275   0049BA                     _fputs:
  3276                           	callstack 20
  3277   0049BA  0E00               	movlw	0
  3278   0049BC  6E14               	movwf	(fputs@i+1)^0,c
  3279   0049BE  0E00               	movlw	0
  3280   0049C0  6E13               	movwf	fputs@i^0,c
  3281   0049C2  EFEE  F024         	goto	l4893
  3282   0049C6                     l4889:
  3283   0049C6  C012  F005         	movff	fputs@c,fputc@c
  3284   0049CA  6A06               	clrf	(fputc@c+1)^0,c
  3285   0049CC  C010  F007         	movff	fputs@fp,fputc@fp
  3286   0049D0  C011  F008         	movff	fputs@fp+1,fputc@fp+1
  3287   0049D4  EC62  F021         	call	_fputc	;wreg free
  3288   0049D8  4A13               	infsnz	fputs@i^0,f,c
  3289   0049DA  2A14               	incf	(fputs@i+1)^0,f,c
  3290   0049DC                     l4893:
  3291   0049DC  5013               	movf	fputs@i^0,w,c
  3292   0049DE  240E               	addwf	fputs@s^0,w,c
  3293   0049E0  6ED9               	movwf	fsr2l,c
  3294   0049E2  5014               	movf	(fputs@i+1)^0,w,c
  3295   0049E4  200F               	addwfc	(fputs@s+1)^0,w,c
  3296   0049E6  6EDA               	movwf	fsr2h,c
  3297   0049E8  50DF               	movf	indf2,w,c
  3298   0049EA  6E12               	movwf	fputs@c^0,c
  3299   0049EC  5012               	movf	fputs@c^0,w,c
  3300   0049EE  A4D8               	btfss	status,2,c
  3301   0049F0  EFFC  F024         	goto	u5221
  3302   0049F4  EFFE  F024         	goto	u5220
  3303   0049F8                     u5221:
  3304   0049F8  EFE3  F024         	goto	l4889
  3305   0049FC                     u5220:
  3306   0049FC  0012               	return		;funcret
  3307   0049FE                     __end_of_fputs:
  3308                           	callstack 0
  3309                           
  3310 ;; *************** function _fputc *****************
  3311 ;; Defined at:
  3312 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputc.c"
  3313 ;; Parameters:    Size  Location     Type
  3314 ;;  c               2    4[COMRAM] int 
  3315 ;;  fp              2    6[COMRAM] PTR struct _IO_FILE
  3316 ;;		 -> sprintf@f(11), 
  3317 ;; Auto vars:     Size  Location     Type
  3318 ;;		None
  3319 ;; Return value:  Size  Location     Type
  3320 ;;                  2    4[COMRAM] int 
  3321 ;; Registers used:
  3322 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3323 ;; Tracked objects:
  3324 ;;		On entry : 0/0
  3325 ;;		On exit  : 0/0
  3326 ;;		Unchanged: 0/0
  3327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3328 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3330 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3331 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3332 ;;Total ram usage:        9 bytes
  3333 ;; Hardware stack levels used: 1
  3334 ;; Hardware stack levels required when called: 3
  3335 ;; This function calls:
  3336 ;;		_putch
  3337 ;; This function is called by:
  3338 ;;		_pad
  3339 ;;		_vfpfcnvrt
  3340 ;;		_fputs
  3341 ;; This function uses a non-reentrant model
  3342 ;;
  3343                           
  3344                           	psect	text9
  3345   0042C4                     __ptext9:
  3346                           	callstack 0
  3347   0042C4                     _fputc:
  3348                           	callstack 23
  3349   0042C4  5007               	movf	fputc@fp^0,w,c
  3350   0042C6  1008               	iorwf	(fputc@fp+1)^0,w,c
  3351   0042C8  B4D8               	btfsc	status,2,c
  3352   0042CA  EF69  F021         	goto	u5181
  3353   0042CE  EF6B  F021         	goto	u5180
  3354   0042D2                     u5181:
  3355   0042D2  EF74  F021         	goto	l4877
  3356   0042D6                     u5180:
  3357   0042D6  5007               	movf	fputc@fp^0,w,c
  3358   0042D8  1008               	iorwf	(fputc@fp+1)^0,w,c
  3359   0042DA  A4D8               	btfss	status,2,c
  3360   0042DC  EF72  F021         	goto	u5191
  3361   0042E0  EF74  F021         	goto	u5190
  3362   0042E4                     u5191:
  3363   0042E4  EF79  F021         	goto	l4879
  3364   0042E8                     u5190:
  3365   0042E8                     l4877:
  3366   0042E8  5005               	movf	fputc@c^0,w,c
  3367   0042EA  EC51  F026         	call	_putch
  3368   0042EE  EFC6  F021         	goto	l1308
  3369   0042F2                     l4879:
  3370   0042F2  EE20 F009          	lfsr	2,9
  3371   0042F6  5007               	movf	fputc@fp^0,w,c
  3372   0042F8  26D9               	addwf	fsr2l,f,c
  3373   0042FA  5008               	movf	(fputc@fp+1)^0,w,c
  3374   0042FC  22DA               	addwfc	fsr2h,f,c
  3375   0042FE  50DE               	movf	postinc2,w,c
  3376   004300  10DE               	iorwf	postinc2,w,c
  3377   004302  B4D8               	btfsc	status,2,c
  3378   004304  EF86  F021         	goto	u5201
  3379   004308  EF88  F021         	goto	u5200
  3380   00430C                     u5201:
  3381   00430C  EFA3  F021         	goto	l4883
  3382   004310                     u5200:
  3383   004310  EE20 F009          	lfsr	2,9
  3384   004314  5007               	movf	fputc@fp^0,w,c
  3385   004316  26D9               	addwf	fsr2l,f,c
  3386   004318  5008               	movf	(fputc@fp+1)^0,w,c
  3387   00431A  22DA               	addwfc	fsr2h,f,c
  3388   00431C  EE10 F003          	lfsr	1,3
  3389   004320  5007               	movf	fputc@fp^0,w,c
  3390   004322  26E1               	addwf	fsr1l,f,c
  3391   004324  5008               	movf	(fputc@fp+1)^0,w,c
  3392   004326  22E2               	addwfc	fsr1h,f,c
  3393   004328  50DE               	movf	postinc2,w,c
  3394   00432A  5CE6               	subwf	postinc1,w,c
  3395   00432C  50E6               	movf	postinc1,w,c
  3396   00432E  0A80               	xorlw	128
  3397   004330  6E0D               	movwf	(??_fputc+4)^0,c
  3398   004332  50DE               	movf	postinc2,w,c
  3399   004334  0A80               	xorlw	128
  3400   004336  580D               	subwfb	(??_fputc+4)^0,w,c
  3401   004338  B0D8               	btfsc	status,0,c
  3402   00433A  EFA1  F021         	goto	u5211
  3403   00433E  EFA3  F021         	goto	u5210
  3404   004342                     u5211:
  3405   004342  EFC6  F021         	goto	l1308
  3406   004346                     u5210:
  3407   004346                     l4883:
  3408   004346  EE20 F003          	lfsr	2,3
  3409   00434A  5007               	movf	fputc@fp^0,w,c
  3410   00434C  26D9               	addwf	fsr2l,f,c
  3411   00434E  5008               	movf	(fputc@fp+1)^0,w,c
  3412   004350  22DA               	addwfc	fsr2h,f,c
  3413   004352  CFDE F009          	movff	postinc2,??_fputc
  3414   004356  CFDD F00A          	movff	postdec2,??_fputc+1
  3415   00435A  C007  FFD9         	movff	fputc@fp,fsr2l
  3416   00435E  C008  FFDA         	movff	fputc@fp+1,fsr2h
  3417   004362  CFDE F00B          	movff	postinc2,??_fputc+2
  3418   004366  CFDD F00C          	movff	postdec2,??_fputc+3
  3419   00436A  5009               	movf	??_fputc^0,w,c
  3420   00436C  240B               	addwf	(??_fputc+2)^0,w,c
  3421   00436E  6ED9               	movwf	fsr2l,c
  3422   004370  500A               	movf	(??_fputc+1)^0,w,c
  3423   004372  200C               	addwfc	(??_fputc+3)^0,w,c
  3424   004374  6EDA               	movwf	fsr2h,c
  3425   004376  C005  FFDF         	movff	fputc@c,indf2
  3426   00437A  EE20 F003          	lfsr	2,3
  3427   00437E  5007               	movf	fputc@fp^0,w,c
  3428   004380  26D9               	addwf	fsr2l,f,c
  3429   004382  5008               	movf	(fputc@fp+1)^0,w,c
  3430   004384  22DA               	addwfc	fsr2h,f,c
  3431   004386  2ADE               	incf	postinc2,f,c
  3432   004388  0E00               	movlw	0
  3433   00438A  22DD               	addwfc	postdec2,f,c
  3434   00438C                     l1308:
  3435   00438C  0012               	return		;funcret
  3436   00438E                     __end_of_fputc:
  3437                           	callstack 0
  3438                           
  3439 ;; *************** function _putch *****************
  3440 ;; Defined at:
  3441 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\putch.c"
  3442 ;; Parameters:    Size  Location     Type
  3443 ;;  c               1    wreg     unsigned char 
  3444 ;; Auto vars:     Size  Location     Type
  3445 ;;  c               1    0[COMRAM] unsigned char 
  3446 ;; Return value:  Size  Location     Type
  3447 ;;                  1    wreg      void 
  3448 ;; Registers used:
  3449 ;;		wreg
  3450 ;; Tracked objects:
  3451 ;;		On entry : 0/0
  3452 ;;		On exit  : 0/0
  3453 ;;		Unchanged: 0/0
  3454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3458 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3459 ;;Total ram usage:        0 bytes
  3460 ;; Hardware stack levels used: 1
  3461 ;; Hardware stack levels required when called: 2
  3462 ;; This function calls:
  3463 ;;		Nothing
  3464 ;; This function is called by:
  3465 ;;		_fputc
  3466 ;; This function uses a non-reentrant model
  3467 ;;
  3468                           
  3469                           	psect	text10
  3470   004CA2                     __ptext10:
  3471                           	callstack 0
  3472   004CA2                     _putch:
  3473                           	callstack 23
  3474   004CA2  0012               	return		;funcret
  3475   004CA4                     __end_of_putch:
  3476                           	callstack 0
  3477                           
  3478 ;; *************** function _abs *****************
  3479 ;; Defined at:
  3480 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\abs.c"
  3481 ;; Parameters:    Size  Location     Type
  3482 ;;  a               2   22[COMRAM] int 
  3483 ;; Auto vars:     Size  Location     Type
  3484 ;;		None
  3485 ;; Return value:  Size  Location     Type
  3486 ;;                  2   22[COMRAM] int 
  3487 ;; Registers used:
  3488 ;;		wreg, status,2, status,0
  3489 ;; Tracked objects:
  3490 ;;		On entry : 0/0
  3491 ;;		On exit  : 0/0
  3492 ;;		Unchanged: 0/0
  3493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3494 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3496 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3497 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3498 ;;Total ram usage:        4 bytes
  3499 ;; Hardware stack levels used: 1
  3500 ;; Hardware stack levels required when called: 2
  3501 ;; This function calls:
  3502 ;;		Nothing
  3503 ;; This function is called by:
  3504 ;;		_dtoa
  3505 ;; This function uses a non-reentrant model
  3506 ;;
  3507                           
  3508                           	psect	text11
  3509   004A40                     __ptext11:
  3510                           	callstack 0
  3511   004A40                     _abs:
  3512                           	callstack 23
  3513   004A40  BE18               	btfsc	(abs@a+1)^0,7,c
  3514   004A42  EF2D  F025         	goto	u5380
  3515   004A46  5018               	movf	(abs@a+1)^0,w,c
  3516   004A48  E106               	bnz	u5381
  3517   004A4A  0417               	decf	abs@a^0,w,c
  3518   004A4C  B0D8               	btfsc	status,0,c
  3519   004A4E  EF2B  F025         	goto	u5381
  3520   004A52  EF2D  F025         	goto	u5380
  3521   004A56                     u5381:
  3522   004A56  EF3B  F025         	goto	l1293
  3523   004A5A                     u5380:
  3524   004A5A  C017  F019         	movff	abs@a,??_abs
  3525   004A5E  C018  F01A         	movff	abs@a+1,??_abs+1
  3526   004A62  1E19               	comf	??_abs^0,f,c
  3527   004A64  1E1A               	comf	(??_abs+1)^0,f,c
  3528   004A66  4A19               	infsnz	??_abs^0,f,c
  3529   004A68  2A1A               	incf	(??_abs+1)^0,f,c
  3530   004A6A  C019  F017         	movff	??_abs,?_abs
  3531   004A6E  C01A  F018         	movff	??_abs+1,?_abs+1
  3532   004A72  EF3F  F025         	goto	l1296
  3533   004A76                     l1293:
  3534   004A76  C017  F017         	movff	abs@a,?_abs
  3535   004A7A  C018  F018         	movff	abs@a+1,?_abs+1
  3536   004A7E                     l1296:
  3537   004A7E  0012               	return		;funcret
  3538   004A80                     __end_of_abs:
  3539                           	callstack 0
  3540                           
  3541 ;; *************** function ___aomod *****************
  3542 ;; Defined at:
  3543 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aomod.c"
  3544 ;; Parameters:    Size  Location     Type
  3545 ;;  dividend        8    4[COMRAM] long long 
  3546 ;;  divisor         8   12[COMRAM] long long 
  3547 ;; Auto vars:     Size  Location     Type
  3548 ;;  sign            1   21[COMRAM] unsigned char 
  3549 ;;  counter         1   20[COMRAM] unsigned char 
  3550 ;; Return value:  Size  Location     Type
  3551 ;;                  8    4[COMRAM] long long 
  3552 ;; Registers used:
  3553 ;;		wreg, status,2, status,0
  3554 ;; Tracked objects:
  3555 ;;		On entry : 0/0
  3556 ;;		On exit  : 0/0
  3557 ;;		Unchanged: 0/0
  3558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3559 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3560 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3562 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3563 ;;Total ram usage:       18 bytes
  3564 ;; Hardware stack levels used: 1
  3565 ;; Hardware stack levels required when called: 2
  3566 ;; This function calls:
  3567 ;;		Nothing
  3568 ;; This function is called by:
  3569 ;;		_dtoa
  3570 ;; This function uses a non-reentrant model
  3571 ;;
  3572                           
  3573                           	psect	text12
  3574   003486                     __ptext12:
  3575                           	callstack 0
  3576   003486                     ___aomod:
  3577                           	callstack 23
  3578   003486  0E00               	movlw	0
  3579   003488  6E16               	movwf	___aomod@sign^0,c
  3580   00348A  BE0C               	btfsc	(___aomod@dividend+7)^0,7,c
  3581   00348C  EF4C  F01A         	goto	u5300
  3582   003490  EF4A  F01A         	goto	u5301
  3583   003494                     u5301:
  3584   003494  EF5E  F01A         	goto	l4947
  3585   003498                     u5300:
  3586   003498  1E0C               	comf	(___aomod@dividend+7)^0,f,c
  3587   00349A  1E0B               	comf	(___aomod@dividend+6)^0,f,c
  3588   00349C  1E0A               	comf	(___aomod@dividend+5)^0,f,c
  3589   00349E  1E09               	comf	(___aomod@dividend+4)^0,f,c
  3590   0034A0  1E08               	comf	(___aomod@dividend+3)^0,f,c
  3591   0034A2  1E07               	comf	(___aomod@dividend+2)^0,f,c
  3592   0034A4  1E06               	comf	(___aomod@dividend+1)^0,f,c
  3593   0034A6  6C05               	negf	___aomod@dividend^0,c
  3594   0034A8  0E00               	movlw	0
  3595   0034AA  2206               	addwfc	(___aomod@dividend+1)^0,f,c
  3596   0034AC  2207               	addwfc	(___aomod@dividend+2)^0,f,c
  3597   0034AE  2208               	addwfc	(___aomod@dividend+3)^0,f,c
  3598   0034B0  2209               	addwfc	(___aomod@dividend+4)^0,f,c
  3599   0034B2  220A               	addwfc	(___aomod@dividend+5)^0,f,c
  3600   0034B4  220B               	addwfc	(___aomod@dividend+6)^0,f,c
  3601   0034B6  220C               	addwfc	(___aomod@dividend+7)^0,f,c
  3602   0034B8  0E01               	movlw	1
  3603   0034BA  6E16               	movwf	___aomod@sign^0,c
  3604   0034BC                     l4947:
  3605   0034BC  BE14               	btfsc	(___aomod@divisor+7)^0,7,c
  3606   0034BE  EF65  F01A         	goto	u5310
  3607   0034C2  EF63  F01A         	goto	u5311
  3608   0034C6                     u5311:
  3609   0034C6  EF75  F01A         	goto	l4951
  3610   0034CA                     u5310:
  3611   0034CA  1E14               	comf	(___aomod@divisor+7)^0,f,c
  3612   0034CC  1E13               	comf	(___aomod@divisor+6)^0,f,c
  3613   0034CE  1E12               	comf	(___aomod@divisor+5)^0,f,c
  3614   0034D0  1E11               	comf	(___aomod@divisor+4)^0,f,c
  3615   0034D2  1E10               	comf	(___aomod@divisor+3)^0,f,c
  3616   0034D4  1E0F               	comf	(___aomod@divisor+2)^0,f,c
  3617   0034D6  1E0E               	comf	(___aomod@divisor+1)^0,f,c
  3618   0034D8  6C0D               	negf	___aomod@divisor^0,c
  3619   0034DA  0E00               	movlw	0
  3620   0034DC  220E               	addwfc	(___aomod@divisor+1)^0,f,c
  3621   0034DE  220F               	addwfc	(___aomod@divisor+2)^0,f,c
  3622   0034E0  2210               	addwfc	(___aomod@divisor+3)^0,f,c
  3623   0034E2  2211               	addwfc	(___aomod@divisor+4)^0,f,c
  3624   0034E4  2212               	addwfc	(___aomod@divisor+5)^0,f,c
  3625   0034E6  2213               	addwfc	(___aomod@divisor+6)^0,f,c
  3626   0034E8  2214               	addwfc	(___aomod@divisor+7)^0,f,c
  3627   0034EA                     l4951:
  3628   0034EA  500D               	movf	___aomod@divisor^0,w,c
  3629   0034EC  100E               	iorwf	(___aomod@divisor+1)^0,w,c
  3630   0034EE  100F               	iorwf	(___aomod@divisor+2)^0,w,c
  3631   0034F0  1010               	iorwf	(___aomod@divisor+3)^0,w,c
  3632   0034F2  1011               	iorwf	(___aomod@divisor+4)^0,w,c
  3633   0034F4  1012               	iorwf	(___aomod@divisor+5)^0,w,c
  3634   0034F6  1013               	iorwf	(___aomod@divisor+6)^0,w,c
  3635   0034F8  1014               	iorwf	(___aomod@divisor+7)^0,w,c
  3636   0034FA  B4D8               	btfsc	status,2,c
  3637   0034FC  EF82  F01A         	goto	u5321
  3638   003500  EF84  F01A         	goto	u5320
  3639   003504                     u5321:
  3640   003504  EFCC  F01A         	goto	l4967
  3641   003508                     u5320:
  3642   003508  0E01               	movlw	1
  3643   00350A  6E15               	movwf	___aomod@counter^0,c
  3644   00350C  EF92  F01A         	goto	l4957
  3645   003510                     l4955:
  3646   003510  90D8               	bcf	status,0,c
  3647   003512  360D               	rlcf	___aomod@divisor^0,f,c
  3648   003514  360E               	rlcf	(___aomod@divisor+1)^0,f,c
  3649   003516  360F               	rlcf	(___aomod@divisor+2)^0,f,c
  3650   003518  3610               	rlcf	(___aomod@divisor+3)^0,f,c
  3651   00351A  3611               	rlcf	(___aomod@divisor+4)^0,f,c
  3652   00351C  3612               	rlcf	(___aomod@divisor+5)^0,f,c
  3653   00351E  3613               	rlcf	(___aomod@divisor+6)^0,f,c
  3654   003520  3614               	rlcf	(___aomod@divisor+7)^0,f,c
  3655   003522  2A15               	incf	___aomod@counter^0,f,c
  3656   003524                     l4957:
  3657   003524  AE14               	btfss	(___aomod@divisor+7)^0,7,c
  3658   003526  EF97  F01A         	goto	u5331
  3659   00352A  EF99  F01A         	goto	u5330
  3660   00352E                     u5331:
  3661   00352E  EF88  F01A         	goto	l4955
  3662   003532                     u5330:
  3663   003532                     l4959:
  3664   003532  500D               	movf	___aomod@divisor^0,w,c
  3665   003534  5C05               	subwf	___aomod@dividend^0,w,c
  3666   003536  500E               	movf	(___aomod@divisor+1)^0,w,c
  3667   003538  5806               	subwfb	(___aomod@dividend+1)^0,w,c
  3668   00353A  500F               	movf	(___aomod@divisor+2)^0,w,c
  3669   00353C  5807               	subwfb	(___aomod@dividend+2)^0,w,c
  3670   00353E  5010               	movf	(___aomod@divisor+3)^0,w,c
  3671   003540  5808               	subwfb	(___aomod@dividend+3)^0,w,c
  3672   003542  5011               	movf	(___aomod@divisor+4)^0,w,c
  3673   003544  5809               	subwfb	(___aomod@dividend+4)^0,w,c
  3674   003546  5012               	movf	(___aomod@divisor+5)^0,w,c
  3675   003548  580A               	subwfb	(___aomod@dividend+5)^0,w,c
  3676   00354A  5013               	movf	(___aomod@divisor+6)^0,w,c
  3677   00354C  580B               	subwfb	(___aomod@dividend+6)^0,w,c
  3678   00354E  5014               	movf	(___aomod@divisor+7)^0,w,c
  3679   003550  580C               	subwfb	(___aomod@dividend+7)^0,w,c
  3680   003552  A0D8               	btfss	status,0,c
  3681   003554  EFAE  F01A         	goto	u5341
  3682   003558  EFB0  F01A         	goto	u5340
  3683   00355C                     u5341:
  3684   00355C  EFC0  F01A         	goto	l4963
  3685   003560                     u5340:
  3686   003560  500D               	movf	___aomod@divisor^0,w,c
  3687   003562  5E05               	subwf	___aomod@dividend^0,f,c
  3688   003564  500E               	movf	(___aomod@divisor+1)^0,w,c
  3689   003566  5A06               	subwfb	(___aomod@dividend+1)^0,f,c
  3690   003568  500F               	movf	(___aomod@divisor+2)^0,w,c
  3691   00356A  5A07               	subwfb	(___aomod@dividend+2)^0,f,c
  3692   00356C  5010               	movf	(___aomod@divisor+3)^0,w,c
  3693   00356E  5A08               	subwfb	(___aomod@dividend+3)^0,f,c
  3694   003570  5011               	movf	(___aomod@divisor+4)^0,w,c
  3695   003572  5A09               	subwfb	(___aomod@dividend+4)^0,f,c
  3696   003574  5012               	movf	(___aomod@divisor+5)^0,w,c
  3697   003576  5A0A               	subwfb	(___aomod@dividend+5)^0,f,c
  3698   003578  5013               	movf	(___aomod@divisor+6)^0,w,c
  3699   00357A  5A0B               	subwfb	(___aomod@dividend+6)^0,f,c
  3700   00357C  5014               	movf	(___aomod@divisor+7)^0,w,c
  3701   00357E  5A0C               	subwfb	(___aomod@dividend+7)^0,f,c
  3702   003580                     l4963:
  3703   003580  90D8               	bcf	status,0,c
  3704   003582  3214               	rrcf	(___aomod@divisor+7)^0,f,c
  3705   003584  3213               	rrcf	(___aomod@divisor+6)^0,f,c
  3706   003586  3212               	rrcf	(___aomod@divisor+5)^0,f,c
  3707   003588  3211               	rrcf	(___aomod@divisor+4)^0,f,c
  3708   00358A  3210               	rrcf	(___aomod@divisor+3)^0,f,c
  3709   00358C  320F               	rrcf	(___aomod@divisor+2)^0,f,c
  3710   00358E  320E               	rrcf	(___aomod@divisor+1)^0,f,c
  3711   003590  320D               	rrcf	___aomod@divisor^0,f,c
  3712   003592  2E15               	decfsz	___aomod@counter^0,f,c
  3713   003594  EF99  F01A         	goto	l4959
  3714   003598                     l4967:
  3715   003598  5016               	movf	___aomod@sign^0,w,c
  3716   00359A  B4D8               	btfsc	status,2,c
  3717   00359C  EFD2  F01A         	goto	u5351
  3718   0035A0  EFD4  F01A         	goto	u5350
  3719   0035A4                     u5351:
  3720   0035A4  EFE4  F01A         	goto	l4971
  3721   0035A8                     u5350:
  3722   0035A8  1E0C               	comf	(___aomod@dividend+7)^0,f,c
  3723   0035AA  1E0B               	comf	(___aomod@dividend+6)^0,f,c
  3724   0035AC  1E0A               	comf	(___aomod@dividend+5)^0,f,c
  3725   0035AE  1E09               	comf	(___aomod@dividend+4)^0,f,c
  3726   0035B0  1E08               	comf	(___aomod@dividend+3)^0,f,c
  3727   0035B2  1E07               	comf	(___aomod@dividend+2)^0,f,c
  3728   0035B4  1E06               	comf	(___aomod@dividend+1)^0,f,c
  3729   0035B6  6C05               	negf	___aomod@dividend^0,c
  3730   0035B8  0E00               	movlw	0
  3731   0035BA  2206               	addwfc	(___aomod@dividend+1)^0,f,c
  3732   0035BC  2207               	addwfc	(___aomod@dividend+2)^0,f,c
  3733   0035BE  2208               	addwfc	(___aomod@dividend+3)^0,f,c
  3734   0035C0  2209               	addwfc	(___aomod@dividend+4)^0,f,c
  3735   0035C2  220A               	addwfc	(___aomod@dividend+5)^0,f,c
  3736   0035C4  220B               	addwfc	(___aomod@dividend+6)^0,f,c
  3737   0035C6  220C               	addwfc	(___aomod@dividend+7)^0,f,c
  3738   0035C8                     l4971:
  3739   0035C8  C005  F005         	movff	___aomod@dividend,?___aomod
  3740   0035CC  C006  F006         	movff	___aomod@dividend+1,?___aomod+1
  3741   0035D0  C007  F007         	movff	___aomod@dividend+2,?___aomod+2
  3742   0035D4  C008  F008         	movff	___aomod@dividend+3,?___aomod+3
  3743   0035D8  C009  F009         	movff	___aomod@dividend+4,?___aomod+4
  3744   0035DC  C00A  F00A         	movff	___aomod@dividend+5,?___aomod+5
  3745   0035E0  C00B  F00B         	movff	___aomod@dividend+6,?___aomod+6
  3746   0035E4  C00C  F00C         	movff	___aomod@dividend+7,?___aomod+7
  3747   0035E8  0012               	return		;funcret
  3748   0035EA                     __end_of___aomod:
  3749                           	callstack 0
  3750                           
  3751 ;; *************** function ___aodiv *****************
  3752 ;; Defined at:
  3753 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aodiv.c"
  3754 ;; Parameters:    Size  Location     Type
  3755 ;;  dividend        8    4[COMRAM] long long 
  3756 ;;  divisor         8   12[COMRAM] long long 
  3757 ;; Auto vars:     Size  Location     Type
  3758 ;;  quotient        8   22[COMRAM] long long 
  3759 ;;  sign            1   21[COMRAM] unsigned char 
  3760 ;;  counter         1   20[COMRAM] unsigned char 
  3761 ;; Return value:  Size  Location     Type
  3762 ;;                  8    4[COMRAM] long long 
  3763 ;; Registers used:
  3764 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3765 ;; Tracked objects:
  3766 ;;		On entry : 0/0
  3767 ;;		On exit  : 0/0
  3768 ;;		Unchanged: 0/0
  3769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3770 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3771 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3773 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3774 ;;Total ram usage:       26 bytes
  3775 ;; Hardware stack levels used: 1
  3776 ;; Hardware stack levels required when called: 2
  3777 ;; This function calls:
  3778 ;;		Nothing
  3779 ;; This function is called by:
  3780 ;;		_dtoa
  3781 ;; This function uses a non-reentrant model
  3782 ;;
  3783                           
  3784                           	psect	text13
  3785   003192                     __ptext13:
  3786                           	callstack 0
  3787   003192                     ___aodiv:
  3788                           	callstack 23
  3789   003192  0E00               	movlw	0
  3790   003194  6E16               	movwf	___aodiv@sign^0,c
  3791   003196  BE14               	btfsc	(___aodiv@divisor+7)^0,7,c
  3792   003198  EFD2  F018         	goto	u5230
  3793   00319C  EFD0  F018         	goto	u5231
  3794   0031A0                     u5231:
  3795   0031A0  EFE4  F018         	goto	l4903
  3796   0031A4                     u5230:
  3797   0031A4  1E14               	comf	(___aodiv@divisor+7)^0,f,c
  3798   0031A6  1E13               	comf	(___aodiv@divisor+6)^0,f,c
  3799   0031A8  1E12               	comf	(___aodiv@divisor+5)^0,f,c
  3800   0031AA  1E11               	comf	(___aodiv@divisor+4)^0,f,c
  3801   0031AC  1E10               	comf	(___aodiv@divisor+3)^0,f,c
  3802   0031AE  1E0F               	comf	(___aodiv@divisor+2)^0,f,c
  3803   0031B0  1E0E               	comf	(___aodiv@divisor+1)^0,f,c
  3804   0031B2  6C0D               	negf	___aodiv@divisor^0,c
  3805   0031B4  0E00               	movlw	0
  3806   0031B6  220E               	addwfc	(___aodiv@divisor+1)^0,f,c
  3807   0031B8  220F               	addwfc	(___aodiv@divisor+2)^0,f,c
  3808   0031BA  2210               	addwfc	(___aodiv@divisor+3)^0,f,c
  3809   0031BC  2211               	addwfc	(___aodiv@divisor+4)^0,f,c
  3810   0031BE  2212               	addwfc	(___aodiv@divisor+5)^0,f,c
  3811   0031C0  2213               	addwfc	(___aodiv@divisor+6)^0,f,c
  3812   0031C2  2214               	addwfc	(___aodiv@divisor+7)^0,f,c
  3813   0031C4  0E01               	movlw	1
  3814   0031C6  6E16               	movwf	___aodiv@sign^0,c
  3815   0031C8                     l4903:
  3816   0031C8  BE0C               	btfsc	(___aodiv@dividend+7)^0,7,c
  3817   0031CA  EFEB  F018         	goto	u5240
  3818   0031CE  EFE9  F018         	goto	u5241
  3819   0031D2                     u5241:
  3820   0031D2  EFFD  F018         	goto	l4909
  3821   0031D6                     u5240:
  3822   0031D6  1E0C               	comf	(___aodiv@dividend+7)^0,f,c
  3823   0031D8  1E0B               	comf	(___aodiv@dividend+6)^0,f,c
  3824   0031DA  1E0A               	comf	(___aodiv@dividend+5)^0,f,c
  3825   0031DC  1E09               	comf	(___aodiv@dividend+4)^0,f,c
  3826   0031DE  1E08               	comf	(___aodiv@dividend+3)^0,f,c
  3827   0031E0  1E07               	comf	(___aodiv@dividend+2)^0,f,c
  3828   0031E2  1E06               	comf	(___aodiv@dividend+1)^0,f,c
  3829   0031E4  6C05               	negf	___aodiv@dividend^0,c
  3830   0031E6  0E00               	movlw	0
  3831   0031E8  2206               	addwfc	(___aodiv@dividend+1)^0,f,c
  3832   0031EA  2207               	addwfc	(___aodiv@dividend+2)^0,f,c
  3833   0031EC  2208               	addwfc	(___aodiv@dividend+3)^0,f,c
  3834   0031EE  2209               	addwfc	(___aodiv@dividend+4)^0,f,c
  3835   0031F0  220A               	addwfc	(___aodiv@dividend+5)^0,f,c
  3836   0031F2  220B               	addwfc	(___aodiv@dividend+6)^0,f,c
  3837   0031F4  220C               	addwfc	(___aodiv@dividend+7)^0,f,c
  3838   0031F6  0E01               	movlw	1
  3839   0031F8  1A16               	xorwf	___aodiv@sign^0,f,c
  3840   0031FA                     l4909:
  3841   0031FA  EE20  F017         	lfsr	2,___aodiv@quotient
  3842   0031FE  0E07               	movlw	7
  3843   003200                     u5251:
  3844   003200  6ADE               	clrf	postinc2,c
  3845   003202  06E8               	decf	wreg,f,c
  3846   003204  E2FD               	bc	u5251
  3847   003206  500D               	movf	___aodiv@divisor^0,w,c
  3848   003208  100E               	iorwf	(___aodiv@divisor+1)^0,w,c
  3849   00320A  100F               	iorwf	(___aodiv@divisor+2)^0,w,c
  3850   00320C  1010               	iorwf	(___aodiv@divisor+3)^0,w,c
  3851   00320E  1011               	iorwf	(___aodiv@divisor+4)^0,w,c
  3852   003210  1012               	iorwf	(___aodiv@divisor+5)^0,w,c
  3853   003212  1013               	iorwf	(___aodiv@divisor+6)^0,w,c
  3854   003214  1014               	iorwf	(___aodiv@divisor+7)^0,w,c
  3855   003216  B4D8               	btfsc	status,2,c
  3856   003218  EF10  F019         	goto	u5261
  3857   00321C  EF12  F019         	goto	u5260
  3858   003220                     u5261:
  3859   003220  EF64  F019         	goto	l4931
  3860   003224                     u5260:
  3861   003224  0E01               	movlw	1
  3862   003226  6E15               	movwf	___aodiv@counter^0,c
  3863   003228  EF20  F019         	goto	l4917
  3864   00322C                     l4915:
  3865   00322C  90D8               	bcf	status,0,c
  3866   00322E  360D               	rlcf	___aodiv@divisor^0,f,c
  3867   003230  360E               	rlcf	(___aodiv@divisor+1)^0,f,c
  3868   003232  360F               	rlcf	(___aodiv@divisor+2)^0,f,c
  3869   003234  3610               	rlcf	(___aodiv@divisor+3)^0,f,c
  3870   003236  3611               	rlcf	(___aodiv@divisor+4)^0,f,c
  3871   003238  3612               	rlcf	(___aodiv@divisor+5)^0,f,c
  3872   00323A  3613               	rlcf	(___aodiv@divisor+6)^0,f,c
  3873   00323C  3614               	rlcf	(___aodiv@divisor+7)^0,f,c
  3874   00323E  2A15               	incf	___aodiv@counter^0,f,c
  3875   003240                     l4917:
  3876   003240  AE14               	btfss	(___aodiv@divisor+7)^0,7,c
  3877   003242  EF25  F019         	goto	u5271
  3878   003246  EF27  F019         	goto	u5270
  3879   00324A                     u5271:
  3880   00324A  EF16  F019         	goto	l4915
  3881   00324E                     u5270:
  3882   00324E                     l4919:
  3883   00324E  90D8               	bcf	status,0,c
  3884   003250  3617               	rlcf	___aodiv@quotient^0,f,c
  3885   003252  3618               	rlcf	(___aodiv@quotient+1)^0,f,c
  3886   003254  3619               	rlcf	(___aodiv@quotient+2)^0,f,c
  3887   003256  361A               	rlcf	(___aodiv@quotient+3)^0,f,c
  3888   003258  361B               	rlcf	(___aodiv@quotient+4)^0,f,c
  3889   00325A  361C               	rlcf	(___aodiv@quotient+5)^0,f,c
  3890   00325C  361D               	rlcf	(___aodiv@quotient+6)^0,f,c
  3891   00325E  361E               	rlcf	(___aodiv@quotient+7)^0,f,c
  3892   003260  500D               	movf	___aodiv@divisor^0,w,c
  3893   003262  5C05               	subwf	___aodiv@dividend^0,w,c
  3894   003264  500E               	movf	(___aodiv@divisor+1)^0,w,c
  3895   003266  5806               	subwfb	(___aodiv@dividend+1)^0,w,c
  3896   003268  500F               	movf	(___aodiv@divisor+2)^0,w,c
  3897   00326A  5807               	subwfb	(___aodiv@dividend+2)^0,w,c
  3898   00326C  5010               	movf	(___aodiv@divisor+3)^0,w,c
  3899   00326E  5808               	subwfb	(___aodiv@dividend+3)^0,w,c
  3900   003270  5011               	movf	(___aodiv@divisor+4)^0,w,c
  3901   003272  5809               	subwfb	(___aodiv@dividend+4)^0,w,c
  3902   003274  5012               	movf	(___aodiv@divisor+5)^0,w,c
  3903   003276  580A               	subwfb	(___aodiv@dividend+5)^0,w,c
  3904   003278  5013               	movf	(___aodiv@divisor+6)^0,w,c
  3905   00327A  580B               	subwfb	(___aodiv@dividend+6)^0,w,c
  3906   00327C  5014               	movf	(___aodiv@divisor+7)^0,w,c
  3907   00327E  580C               	subwfb	(___aodiv@dividend+7)^0,w,c
  3908   003280  A0D8               	btfss	status,0,c
  3909   003282  EF45  F019         	goto	u5281
  3910   003286  EF47  F019         	goto	u5280
  3911   00328A                     u5281:
  3912   00328A  EF58  F019         	goto	l4927
  3913   00328E                     u5280:
  3914   00328E  500D               	movf	___aodiv@divisor^0,w,c
  3915   003290  5E05               	subwf	___aodiv@dividend^0,f,c
  3916   003292  500E               	movf	(___aodiv@divisor+1)^0,w,c
  3917   003294  5A06               	subwfb	(___aodiv@dividend+1)^0,f,c
  3918   003296  500F               	movf	(___aodiv@divisor+2)^0,w,c
  3919   003298  5A07               	subwfb	(___aodiv@dividend+2)^0,f,c
  3920   00329A  5010               	movf	(___aodiv@divisor+3)^0,w,c
  3921   00329C  5A08               	subwfb	(___aodiv@dividend+3)^0,f,c
  3922   00329E  5011               	movf	(___aodiv@divisor+4)^0,w,c
  3923   0032A0  5A09               	subwfb	(___aodiv@dividend+4)^0,f,c
  3924   0032A2  5012               	movf	(___aodiv@divisor+5)^0,w,c
  3925   0032A4  5A0A               	subwfb	(___aodiv@dividend+5)^0,f,c
  3926   0032A6  5013               	movf	(___aodiv@divisor+6)^0,w,c
  3927   0032A8  5A0B               	subwfb	(___aodiv@dividend+6)^0,f,c
  3928   0032AA  5014               	movf	(___aodiv@divisor+7)^0,w,c
  3929   0032AC  5A0C               	subwfb	(___aodiv@dividend+7)^0,f,c
  3930   0032AE  8017               	bsf	___aodiv@quotient^0,0,c
  3931   0032B0                     l4927:
  3932   0032B0  90D8               	bcf	status,0,c
  3933   0032B2  3214               	rrcf	(___aodiv@divisor+7)^0,f,c
  3934   0032B4  3213               	rrcf	(___aodiv@divisor+6)^0,f,c
  3935   0032B6  3212               	rrcf	(___aodiv@divisor+5)^0,f,c
  3936   0032B8  3211               	rrcf	(___aodiv@divisor+4)^0,f,c
  3937   0032BA  3210               	rrcf	(___aodiv@divisor+3)^0,f,c
  3938   0032BC  320F               	rrcf	(___aodiv@divisor+2)^0,f,c
  3939   0032BE  320E               	rrcf	(___aodiv@divisor+1)^0,f,c
  3940   0032C0  320D               	rrcf	___aodiv@divisor^0,f,c
  3941   0032C2  2E15               	decfsz	___aodiv@counter^0,f,c
  3942   0032C4  EF27  F019         	goto	l4919
  3943   0032C8                     l4931:
  3944   0032C8  5016               	movf	___aodiv@sign^0,w,c
  3945   0032CA  B4D8               	btfsc	status,2,c
  3946   0032CC  EF6A  F019         	goto	u5291
  3947   0032D0  EF6C  F019         	goto	u5290
  3948   0032D4                     u5291:
  3949   0032D4  EF7C  F019         	goto	l4935
  3950   0032D8                     u5290:
  3951   0032D8  1E1E               	comf	(___aodiv@quotient+7)^0,f,c
  3952   0032DA  1E1D               	comf	(___aodiv@quotient+6)^0,f,c
  3953   0032DC  1E1C               	comf	(___aodiv@quotient+5)^0,f,c
  3954   0032DE  1E1B               	comf	(___aodiv@quotient+4)^0,f,c
  3955   0032E0  1E1A               	comf	(___aodiv@quotient+3)^0,f,c
  3956   0032E2  1E19               	comf	(___aodiv@quotient+2)^0,f,c
  3957   0032E4  1E18               	comf	(___aodiv@quotient+1)^0,f,c
  3958   0032E6  6C17               	negf	___aodiv@quotient^0,c
  3959   0032E8  0E00               	movlw	0
  3960   0032EA  2218               	addwfc	(___aodiv@quotient+1)^0,f,c
  3961   0032EC  2219               	addwfc	(___aodiv@quotient+2)^0,f,c
  3962   0032EE  221A               	addwfc	(___aodiv@quotient+3)^0,f,c
  3963   0032F0  221B               	addwfc	(___aodiv@quotient+4)^0,f,c
  3964   0032F2  221C               	addwfc	(___aodiv@quotient+5)^0,f,c
  3965   0032F4  221D               	addwfc	(___aodiv@quotient+6)^0,f,c
  3966   0032F6  221E               	addwfc	(___aodiv@quotient+7)^0,f,c
  3967   0032F8                     l4935:
  3968   0032F8  C017  F005         	movff	___aodiv@quotient,?___aodiv
  3969   0032FC  C018  F006         	movff	___aodiv@quotient+1,?___aodiv+1
  3970   003300  C019  F007         	movff	___aodiv@quotient+2,?___aodiv+2
  3971   003304  C01A  F008         	movff	___aodiv@quotient+3,?___aodiv+3
  3972   003308  C01B  F009         	movff	___aodiv@quotient+4,?___aodiv+4
  3973   00330C  C01C  F00A         	movff	___aodiv@quotient+5,?___aodiv+5
  3974   003310  C01D  F00B         	movff	___aodiv@quotient+6,?___aodiv+6
  3975   003314  C01E  F00C         	movff	___aodiv@quotient+7,?___aodiv+7
  3976   003318  0012               	return		;funcret
  3977   00331A                     __end_of___aodiv:
  3978                           	callstack 0
  3979                           
  3980 ;; *************** function _sendTxBuf *****************
  3981 ;; Defined at:
  3982 ;;		line 126 in file "serialTest.c"
  3983 ;; Parameters:    Size  Location     Type
  3984 ;;		None
  3985 ;; Auto vars:     Size  Location     Type
  3986 ;;		None
  3987 ;; Return value:  Size  Location     Type
  3988 ;;                  1    wreg      void 
  3989 ;; Registers used:
  3990 ;;		wreg, status,2, status,0, cstack
  3991 ;; Tracked objects:
  3992 ;;		On entry : 0/0
  3993 ;;		On exit  : 0/0
  3994 ;;		Unchanged: 0/0
  3995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3999 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4000 ;;Total ram usage:        0 bytes
  4001 ;; Hardware stack levels used: 1
  4002 ;; Hardware stack levels required when called: 3
  4003 ;; This function calls:
  4004 ;;		_isDataInTxBuf
  4005 ;; This function is called by:
  4006 ;;		_return_home_turns
  4007 ;; This function uses a non-reentrant model
  4008 ;;
  4009                           
  4010                           	psect	text14
  4011   004C2A                     __ptext14:
  4012                           	callstack 0
  4013   004C2A                     _sendTxBuf:
  4014                           	callstack 26
  4015   004C2A                     
  4016                           ;serialTest.c: 127:     if (isDataInTxBuf()) {PIE4bits.TX4IE=1;}
  4017   004C2A  EC22  F026         	call	_isDataInTxBuf	;wreg free
  4018   004C2E  0900               	iorlw	0
  4019   004C30  B4D8               	btfsc	status,2,c
  4020   004C32  EF1D  F026         	goto	u3671
  4021   004C36  EF1F  F026         	goto	u3670
  4022   004C3A                     u3671:
  4023   004C3A  EF21  F026         	goto	l541
  4024   004C3E                     u3670:
  4025   004C3E  010E               	movlb	14	; () banked
  4026   004C40  852D               	bsf	45,2,b	;volatile
  4027   004C42                     l541:
  4028   004C42  0012               	return		;funcret
  4029   004C44                     __end_of_sendTxBuf:
  4030                           	callstack 0
  4031                           
  4032 ;; *************** function _isDataInTxBuf *****************
  4033 ;; Defined at:
  4034 ;;		line 113 in file "serialTest.c"
  4035 ;; Parameters:    Size  Location     Type
  4036 ;;		None
  4037 ;; Auto vars:     Size  Location     Type
  4038 ;;		None
  4039 ;; Return value:  Size  Location     Type
  4040 ;;                  1    wreg      unsigned char 
  4041 ;; Registers used:
  4042 ;;		wreg, status,2, status,0
  4043 ;; Tracked objects:
  4044 ;;		On entry : 0/0
  4045 ;;		On exit  : 0/0
  4046 ;;		Unchanged: 0/0
  4047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4049 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4051 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4052 ;;Total ram usage:        0 bytes
  4053 ;; Hardware stack levels used: 1
  4054 ;; Hardware stack levels required when called: 2
  4055 ;; This function calls:
  4056 ;;		Nothing
  4057 ;; This function is called by:
  4058 ;;		_sendTxBuf
  4059 ;; This function uses a non-reentrant model
  4060 ;;
  4061                           
  4062                           	psect	text15
  4063   004C44                     __ptext15:
  4064                           	callstack 0
  4065   004C44                     _isDataInTxBuf:
  4066                           	callstack 26
  4067   004C44                     
  4068                           ;serialTest.c: 114:     return (TxBufWriteCnt!=TxBufReadCnt);
  4069   004C44  5057               	movf	_TxBufReadCnt^0,w,c	;volatile
  4070   004C46  1858               	xorwf	_TxBufWriteCnt^0,w,c	;volatile
  4071   004C48  A4D8               	btfss	status,2,c
  4072   004C4A  EF29  F026         	goto	u3181
  4073   004C4E  EF2C  F026         	goto	u3180
  4074   004C52                     u3181:
  4075   004C52  0E01               	movlw	1
  4076   004C54  EF2D  F026         	goto	u3190
  4077   004C58                     u3180:
  4078   004C58  0E00               	movlw	0
  4079   004C5A                     u3190:
  4080   004C5A  0012               	return		;funcret
  4081   004C5C                     __end_of_isDataInTxBuf:
  4082                           	callstack 0
  4083                           
  4084 ;; *************** function _forward *****************
  4085 ;; Defined at:
  4086 ;;		line 134 in file "MazeRobot.X/dc_motor.c"
  4087 ;; Parameters:    Size  Location     Type
  4088 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  4089 ;;		 -> main@motorLeft(9), 
  4090 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  4091 ;;		 -> main@motorRight(9), 
  4092 ;; Auto vars:     Size  Location     Type
  4093 ;;		None
  4094 ;; Return value:  Size  Location     Type
  4095 ;;                  1    wreg      void 
  4096 ;; Registers used:
  4097 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4098 ;; Tracked objects:
  4099 ;;		On entry : 0/0
  4100 ;;		On exit  : 0/0
  4101 ;;		Unchanged: 0/0
  4102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4103 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4104 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4105 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4106 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4107 ;;Total ram usage:        5 bytes
  4108 ;; Hardware stack levels used: 1
  4109 ;; Hardware stack levels required when called: 4
  4110 ;; This function calls:
  4111 ;;		_setMotorPWM
  4112 ;; This function is called by:
  4113 ;;		_return_home_turns
  4114 ;;		_main
  4115 ;; This function uses a non-reentrant model
  4116 ;;
  4117                           
  4118                           	psect	text16
  4119   004046                     __ptext16:
  4120                           	callstack 0
  4121   004046                     _forward:
  4122                           	callstack 25
  4123   004046                     
  4124                           ;MazeRobot.X/dc_motor.c: 134: void forward(DC_motor *mL, DC_motor *mR);MazeRobot.X/dc_mo
      +                          tor.c: 135: {;MazeRobot.X/dc_motor.c: 136:     mL->direction = 1;
  4125   004046  EE20 F001          	lfsr	2,1
  4126   00404A  5018               	movf	forward@mL^0,w,c
  4127   00404C  26D9               	addwf	fsr2l,f,c
  4128   00404E  5019               	movf	(forward@mL+1)^0,w,c
  4129   004050  22DA               	addwfc	fsr2h,f,c
  4130   004052  0E01               	movlw	1
  4131   004054  6EDF               	movwf	indf2,c
  4132                           
  4133                           ;MazeRobot.X/dc_motor.c: 137:     mR->direction = 1;
  4134   004056  EE20 F001          	lfsr	2,1
  4135   00405A  501A               	movf	forward@mR^0,w,c
  4136   00405C  26D9               	addwf	fsr2l,f,c
  4137   00405E  501B               	movf	(forward@mR+1)^0,w,c
  4138   004060  22DA               	addwfc	fsr2h,f,c
  4139   004062  0E01               	movlw	1
  4140   004064  6EDF               	movwf	indf2,c
  4141                           
  4142                           ;MazeRobot.X/dc_motor.c: 139:     mL->brakemode = 1;
  4143   004066  EE20 F002          	lfsr	2,2
  4144   00406A  5018               	movf	forward@mL^0,w,c
  4145   00406C  26D9               	addwf	fsr2l,f,c
  4146   00406E  5019               	movf	(forward@mL+1)^0,w,c
  4147   004070  22DA               	addwfc	fsr2h,f,c
  4148   004072  0E01               	movlw	1
  4149   004074  6EDF               	movwf	indf2,c
  4150                           
  4151                           ;MazeRobot.X/dc_motor.c: 140:     mL->brakemode = 1;
  4152   004076  EE20 F002          	lfsr	2,2
  4153   00407A  5018               	movf	forward@mL^0,w,c
  4154   00407C  26D9               	addwf	fsr2l,f,c
  4155   00407E  5019               	movf	(forward@mL+1)^0,w,c
  4156   004080  22DA               	addwfc	fsr2h,f,c
  4157   004082  0E01               	movlw	1
  4158   004084  6EDF               	movwf	indf2,c
  4159                           
  4160                           ;MazeRobot.X/dc_motor.c: 142:     while ((mL->power)<40 && (mR->power)<40){
  4161   004086  EF69  F020         	goto	l3899
  4162   00408A                     l3891:
  4163                           
  4164                           ;MazeRobot.X/dc_motor.c: 143:         if ((mL->power) < 40){
  4165   00408A  C018  FFD9         	movff	forward@mL,fsr2l
  4166   00408E  C019  FFDA         	movff	forward@mL+1,fsr2h
  4167   004092  0E28               	movlw	40
  4168   004094  60DF               	cpfslt	indf2,c
  4169   004096  EF4F  F020         	goto	u3681
  4170   00409A  EF51  F020         	goto	u3680
  4171   00409E                     u3681:
  4172   00409E  EF57  F020         	goto	l3895
  4173   0040A2                     u3680:
  4174   0040A2                     
  4175                           ;MazeRobot.X/dc_motor.c: 144:             mL->power += 5;
  4176   0040A2  C018  FFD9         	movff	forward@mL,fsr2l
  4177   0040A6  C019  FFDA         	movff	forward@mL+1,fsr2h
  4178   0040AA  0E05               	movlw	5
  4179   0040AC  26DF               	addwf	indf2,f,c
  4180   0040AE                     l3895:
  4181                           
  4182                           ;MazeRobot.X/dc_motor.c: 146:         if ((mR->power) < 40){
  4183   0040AE  C01A  FFD9         	movff	forward@mR,fsr2l
  4184   0040B2  C01B  FFDA         	movff	forward@mR+1,fsr2h
  4185   0040B6  0E28               	movlw	40
  4186   0040B8  60DF               	cpfslt	indf2,c
  4187   0040BA  EF61  F020         	goto	u3691
  4188   0040BE  EF63  F020         	goto	u3690
  4189   0040C2                     u3691:
  4190   0040C2  EF69  F020         	goto	l3899
  4191   0040C6                     u3690:
  4192   0040C6                     
  4193                           ;MazeRobot.X/dc_motor.c: 147:             mR->power += 5;
  4194   0040C6  C01A  FFD9         	movff	forward@mR,fsr2l
  4195   0040CA  C01B  FFDA         	movff	forward@mR+1,fsr2h
  4196   0040CE  0E05               	movlw	5
  4197   0040D0  26DF               	addwf	indf2,f,c
  4198   0040D2                     l3899:
  4199                           
  4200                           ;MazeRobot.X/dc_motor.c: 142:     while ((mL->power)<40 && (mR->power)<40){
  4201   0040D2  C018  FFD9         	movff	forward@mL,fsr2l
  4202   0040D6  C019  FFDA         	movff	forward@mL+1,fsr2h
  4203   0040DA  0E28               	movlw	40
  4204   0040DC  60DF               	cpfslt	indf2,c
  4205   0040DE  EF73  F020         	goto	u3701
  4206   0040E2  EF75  F020         	goto	u3700
  4207   0040E6                     u3701:
  4208   0040E6  EF81  F020         	goto	l3903
  4209   0040EA                     u3700:
  4210   0040EA  C01A  FFD9         	movff	forward@mR,fsr2l
  4211   0040EE  C01B  FFDA         	movff	forward@mR+1,fsr2h
  4212   0040F2  0E27               	movlw	39
  4213   0040F4  64DF               	cpfsgt	indf2,c
  4214   0040F6  EF7F  F020         	goto	u3711
  4215   0040FA  EF81  F020         	goto	u3710
  4216   0040FE                     u3711:
  4217   0040FE  EF45  F020         	goto	l3891
  4218   004102                     u3710:
  4219   004102                     l3903:
  4220                           
  4221                           ;MazeRobot.X/dc_motor.c: 151:     setMotorPWM(mL);
  4222   004102  C018  F012         	movff	forward@mL,setMotorPWM@m
  4223   004106  C019  F013         	movff	forward@mL+1,setMotorPWM@m+1
  4224   00410A  EC8D  F019         	call	_setMotorPWM	;wreg free
  4225                           
  4226                           ;MazeRobot.X/dc_motor.c: 152:     setMotorPWM(mR);
  4227   00410E  C01A  F012         	movff	forward@mR,setMotorPWM@m
  4228   004112  C01B  F013         	movff	forward@mR+1,setMotorPWM@m+1
  4229   004116  EC8D  F019         	call	_setMotorPWM	;wreg free
  4230   00411A  0012               	return		;funcret
  4231   00411C                     __end_of_forward:
  4232                           	callstack 0
  4233                           
  4234 ;; *************** function _TxBufferedString *****************
  4235 ;; Defined at:
  4236 ;;		line 118 in file "serialTest.c"
  4237 ;; Parameters:    Size  Location     Type
  4238 ;;  string          2    5[COMRAM] PTR unsigned char 
  4239 ;;		 -> return_home_turns@string1(150), 
  4240 ;; Auto vars:     Size  Location     Type
  4241 ;;		None
  4242 ;; Return value:  Size  Location     Type
  4243 ;;                  1    wreg      void 
  4244 ;; Registers used:
  4245 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4246 ;; Tracked objects:
  4247 ;;		On entry : 0/0
  4248 ;;		On exit  : 0/0
  4249 ;;		Unchanged: 0/0
  4250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4251 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4254 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4255 ;;Total ram usage:        2 bytes
  4256 ;; Hardware stack levels used: 1
  4257 ;; Hardware stack levels required when called: 3
  4258 ;; This function calls:
  4259 ;;		_putCharToTxBuf
  4260 ;; This function is called by:
  4261 ;;		_return_home_turns
  4262 ;; This function uses a non-reentrant model
  4263 ;;
  4264                           
  4265                           	psect	text17
  4266   004AB4                     __ptext17:
  4267                           	callstack 0
  4268   004AB4                     _TxBufferedString:
  4269                           	callstack 26
  4270   004AB4                     
  4271                           ;serialTest.c: 121:     while(*string != 0) {putCharToTxBuf(*string++);}
  4272   004AB4  EF65  F025         	goto	l3883
  4273   004AB8                     l3879:
  4274   004AB8  C006  FFD9         	movff	TxBufferedString@string,fsr2l
  4275   004ABC  C007  FFDA         	movff	TxBufferedString@string+1,fsr2h
  4276   004AC0  50DF               	movf	indf2,w,c
  4277   004AC2  EC9F  F025         	call	_putCharToTxBuf
  4278   004AC6  4A06               	infsnz	TxBufferedString@string^0,f,c
  4279   004AC8  2A07               	incf	(TxBufferedString@string+1)^0,f,c
  4280   004ACA                     l3883:
  4281   004ACA  C006  FFD9         	movff	TxBufferedString@string,fsr2l
  4282   004ACE  C007  FFDA         	movff	TxBufferedString@string+1,fsr2h
  4283   004AD2  50DF               	movf	indf2,w,c
  4284   004AD4  A4D8               	btfss	status,2,c
  4285   004AD6  EF6F  F025         	goto	u3661
  4286   004ADA  EF71  F025         	goto	u3660
  4287   004ADE                     u3661:
  4288   004ADE  EF5C  F025         	goto	l3879
  4289   004AE2                     u3660:
  4290   004AE2  0012               	return		;funcret
  4291   004AE4                     __end_of_TxBufferedString:
  4292                           	callstack 0
  4293                           
  4294 ;; *************** function _putCharToTxBuf *****************
  4295 ;; Defined at:
  4296 ;;		line 105 in file "serialTest.c"
  4297 ;; Parameters:    Size  Location     Type
  4298 ;;  byte            1    wreg     unsigned char 
  4299 ;; Auto vars:     Size  Location     Type
  4300 ;;  byte            1    4[COMRAM] unsigned char 
  4301 ;; Return value:  Size  Location     Type
  4302 ;;                  1    wreg      void 
  4303 ;; Registers used:
  4304 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4305 ;; Tracked objects:
  4306 ;;		On entry : 0/0
  4307 ;;		On exit  : 0/0
  4308 ;;		Unchanged: 0/0
  4309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4311 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4313 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4314 ;;Total ram usage:        1 bytes
  4315 ;; Hardware stack levels used: 1
  4316 ;; Hardware stack levels required when called: 2
  4317 ;; This function calls:
  4318 ;;		Nothing
  4319 ;; This function is called by:
  4320 ;;		_TxBufferedString
  4321 ;; This function uses a non-reentrant model
  4322 ;;
  4323                           
  4324                           	psect	text18
  4325   004B3E                     __ptext18:
  4326                           	callstack 0
  4327   004B3E                     _putCharToTxBuf:
  4328                           	callstack 26
  4329                           
  4330                           ;incstack = 0
  4331                           ;putCharToTxBuf@byte stored from wreg
  4332   004B3E  6E05               	movwf	putCharToTxBuf@byte^0,c
  4333   004B40                     
  4334                           ;serialTest.c: 106:     if (TxBufWriteCnt>=60) {TxBufWriteCnt=0;}
  4335   004B40  0E3B               	movlw	59
  4336   004B42  6458               	cpfsgt	_TxBufWriteCnt^0,c	;volatile
  4337   004B44  EFA6  F025         	goto	u3171
  4338   004B48  EFA8  F025         	goto	u3170
  4339   004B4C                     u3171:
  4340   004B4C  EFAA  F025         	goto	l3519
  4341   004B50                     u3170:
  4342   004B50  0E00               	movlw	0
  4343   004B52  6E58               	movwf	_TxBufWriteCnt^0,c	;volatile
  4344   004B54                     l3519:
  4345                           
  4346                           ;serialTest.c: 107:     EUSART4TXbuf[TxBufWriteCnt++]=byte;
  4347   004B54  0E9A               	movlw	low _EUSART4TXbuf
  4348   004B56  2458               	addwf	_TxBufWriteCnt^0,w,c	;volatile
  4349   004B58  6ED9               	movwf	fsr2l,c
  4350   004B5A  6ADA               	clrf	fsr2h,c
  4351   004B5C  0E01               	movlw	high _EUSART4TXbuf
  4352   004B5E  22DA               	addwfc	fsr2h,f,c
  4353   004B60  C005  FFDF         	movff	putCharToTxBuf@byte,indf2
  4354   004B64  2A58               	incf	_TxBufWriteCnt^0,f,c	;volatile
  4355   004B66  0012               	return		;funcret
  4356   004B68                     __end_of_putCharToTxBuf:
  4357                           	callstack 0
  4358                           
  4359 ;; *************** function _initUSART4 *****************
  4360 ;; Defined at:
  4361 ;;		line 5 in file "serialTest.c"
  4362 ;; Parameters:    Size  Location     Type
  4363 ;;		None
  4364 ;; Auto vars:     Size  Location     Type
  4365 ;;		None
  4366 ;; Return value:  Size  Location     Type
  4367 ;;                  1    wreg      void 
  4368 ;; Registers used:
  4369 ;;		wreg, status,2
  4370 ;; Tracked objects:
  4371 ;;		On entry : 0/0
  4372 ;;		On exit  : 0/0
  4373 ;;		Unchanged: 0/0
  4374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4376 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4377 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4378 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4379 ;;Total ram usage:        0 bytes
  4380 ;; Hardware stack levels used: 1
  4381 ;; Hardware stack levels required when called: 2
  4382 ;; This function calls:
  4383 ;;		Nothing
  4384 ;; This function is called by:
  4385 ;;		_main
  4386 ;; This function uses a non-reentrant model
  4387 ;;
  4388                           
  4389                           	psect	text19
  4390   004AE4                     __ptext19:
  4391                           	callstack 0
  4392   004AE4                     _initUSART4:
  4393                           	callstack 28
  4394   004AE4                     
  4395                           ;serialTest.c: 9:     BAUD4CONbits.BRG16 = 0;
  4396   004AE4  010E               	movlb	14	; () banked
  4397   004AE6  97E9               	bcf	233,3,b	;volatile
  4398                           
  4399                           ;serialTest.c: 10:     TX4STAbits.BRGH = 0;
  4400   004AE8  95E8               	bcf	232,2,b	;volatile
  4401   004AEA                     
  4402                           ; BSR set to: 14
  4403                           ;serialTest.c: 19:     SP4BRGL = 51;
  4404   004AEA  0E33               	movlw	51
  4405   004AEC  6FE5               	movwf	229,b	;volatile
  4406                           
  4407                           ;serialTest.c: 20:     SP4BRGH = 0;
  4408   004AEE  0E00               	movlw	0
  4409   004AF0  6FE6               	movwf	230,b	;volatile
  4410   004AF2                     
  4411                           ; BSR set to: 14
  4412                           ;serialTest.c: 22:     RC4STAbits.CREN = 1;
  4413   004AF2  89E7               	bsf	231,4,b	;volatile
  4414   004AF4                     
  4415                           ; BSR set to: 14
  4416                           ;serialTest.c: 23:     TX4STAbits.TXEN = 1;
  4417   004AF4  8BE8               	bsf	232,5,b	;volatile
  4418   004AF6                     
  4419                           ; BSR set to: 14
  4420                           ;serialTest.c: 24:     RC4STAbits.SPEN = 1;
  4421   004AF6  8FE7               	bsf	231,7,b	;volatile
  4422   004AF8                     
  4423                           ; BSR set to: 14
  4424                           ;serialTest.c: 26:     TRISCbits.TRISC1 = 1;
  4425   004AF8  8283               	bsf	131,1,c	;volatile
  4426                           
  4427                           ;serialTest.c: 28:     RC0PPS = 0x12;
  4428   004AFA  0E12               	movlw	18
  4429   004AFC  6F62               	movwf	98,b	;volatile
  4430                           
  4431                           ;serialTest.c: 29:     RX4PPS = 0x11;
  4432   004AFE  0E11               	movlw	17
  4433   004B00  6F15               	movwf	21,b	;volatile
  4434   004B02                     
  4435                           ; BSR set to: 14
  4436                           ;serialTest.c: 32:     INTCONbits.GIE = 1;
  4437   004B02  8EF2               	bsf	242,7,c	;volatile
  4438   004B04                     
  4439                           ; BSR set to: 14
  4440                           ;serialTest.c: 33:     INTCONbits.IPEN = 1;
  4441   004B04  8AF2               	bsf	242,5,c	;volatile
  4442   004B06                     
  4443                           ; BSR set to: 14
  4444                           ;serialTest.c: 34:     INTCONbits.PEIE = 1;
  4445   004B06  8CF2               	bsf	242,6,c	;volatile
  4446   004B08                     
  4447                           ; BSR set to: 14
  4448                           ;serialTest.c: 36:     PIE4bits.RC4IE=1;
  4449   004B08  872D               	bsf	45,3,b	;volatile
  4450   004B0A                     
  4451                           ; BSR set to: 14
  4452                           ;serialTest.c: 37:     PIE4bits.TX4IE=0;
  4453   004B0A  952D               	bcf	45,2,b	;volatile
  4454   004B0C                     
  4455                           ; BSR set to: 14
  4456                           ;serialTest.c: 39:     IPR4bits.RC4IP = 1;
  4457   004B0C  8723               	bsf	35,3,b	;volatile
  4458   004B0E                     
  4459                           ; BSR set to: 14
  4460                           ;serialTest.c: 40:     IPR4bits.TX4IP = 1;
  4461   004B0E  8523               	bsf	35,2,b	;volatile
  4462   004B10                     
  4463                           ; BSR set to: 14
  4464   004B10  0012               	return		;funcret
  4465   004B12                     __end_of_initUSART4:
  4466                           	callstack 0
  4467                           
  4468 ;; *************** function _initDCmotorsPWM *****************
  4469 ;; Defined at:
  4470 ;;		line 12 in file "MazeRobot.X/dc_motor.c"
  4471 ;; Parameters:    Size  Location     Type
  4472 ;;  PWMperiod       2    4[COMRAM] int 
  4473 ;; Auto vars:     Size  Location     Type
  4474 ;;		None
  4475 ;; Return value:  Size  Location     Type
  4476 ;;                  1    wreg      void 
  4477 ;; Registers used:
  4478 ;;		wreg, status,2
  4479 ;; Tracked objects:
  4480 ;;		On entry : 0/0
  4481 ;;		On exit  : 0/0
  4482 ;;		Unchanged: 0/0
  4483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4484 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4485 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4487 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4488 ;;Total ram usage:        2 bytes
  4489 ;; Hardware stack levels used: 1
  4490 ;; Hardware stack levels required when called: 2
  4491 ;; This function calls:
  4492 ;;		Nothing
  4493 ;; This function is called by:
  4494 ;;		_main
  4495 ;; This function uses a non-reentrant model
  4496 ;;
  4497                           
  4498                           	psect	text20
  4499   004568                     __ptext20:
  4500                           	callstack 0
  4501   004568                     _initDCmotorsPWM:
  4502                           	callstack 28
  4503   004568                     
  4504                           ;MazeRobot.X/dc_motor.c: 16:     LATEbits.LATE2 = 0;
  4505   004568  947D               	bcf	125,2,c	;volatile
  4506                           
  4507                           ;MazeRobot.X/dc_motor.c: 17:     LATEbits.LATE4 = 0;
  4508   00456A  987D               	bcf	125,4,c	;volatile
  4509                           
  4510                           ;MazeRobot.X/dc_motor.c: 18:     LATCbits.LATC7 = 0;
  4511   00456C  9E7B               	bcf	123,7,c	;volatile
  4512                           
  4513                           ;MazeRobot.X/dc_motor.c: 19:     LATGbits.LATG6 = 0;
  4514   00456E  9C7F               	bcf	127,6,c	;volatile
  4515                           
  4516                           ;MazeRobot.X/dc_motor.c: 22:     TRISEbits.TRISE2 = 0 ;
  4517   004570  9485               	bcf	133,2,c	;volatile
  4518                           
  4519                           ;MazeRobot.X/dc_motor.c: 23:     TRISEbits.TRISE4 = 0 ;
  4520   004572  9885               	bcf	133,4,c	;volatile
  4521                           
  4522                           ;MazeRobot.X/dc_motor.c: 24:     TRISCbits.TRISC7 = 0 ;
  4523   004574  9E83               	bcf	131,7,c	;volatile
  4524                           
  4525                           ;MazeRobot.X/dc_motor.c: 25:     TRISGbits.TRISG6 = 0 ;
  4526   004576  9C87               	bcf	135,6,c	;volatile
  4527   004578                     
  4528                           ;MazeRobot.X/dc_motor.c: 28:     RE2PPS=0x05;
  4529   004578  0E05               	movlw	5
  4530   00457A  010E               	movlb	14	; () banked
  4531   00457C  6F74               	movwf	116,b	;volatile
  4532                           
  4533                           ;MazeRobot.X/dc_motor.c: 29:     RE4PPS=0x06;
  4534   00457E  0E06               	movlw	6
  4535   004580  6F76               	movwf	118,b	;volatile
  4536                           
  4537                           ;MazeRobot.X/dc_motor.c: 30:     RC7PPS=0x07;
  4538   004582  0E07               	movlw	7
  4539   004584  6F69               	movwf	105,b	;volatile
  4540                           
  4541                           ;MazeRobot.X/dc_motor.c: 31:     RG6PPS=0x08;
  4542   004586  0E08               	movlw	8
  4543   004588  6F88               	movwf	136,b	;volatile
  4544                           
  4545                           ;MazeRobot.X/dc_motor.c: 34:     T2CONbits.CKPS=0b011;
  4546   00458A  50BD               	movf	189,w,c	;volatile
  4547   00458C  0B8F               	andlw	-113
  4548   00458E  0930               	iorlw	48
  4549   004590  6EBD               	movwf	189,c	;volatile
  4550                           
  4551                           ;MazeRobot.X/dc_motor.c: 35:     T2HLTbits.MODE=0b00000;
  4552   004592  0EE0               	movlw	-32
  4553   004594  16BE               	andwf	190,f,c	;volatile
  4554                           
  4555                           ;MazeRobot.X/dc_motor.c: 36:     T2CLKCONbits.CS=0b0001;
  4556   004596  50BF               	movf	191,w,c	;volatile
  4557   004598  0BF0               	andlw	-16
  4558   00459A  0901               	iorlw	1
  4559   00459C  6EBF               	movwf	191,c	;volatile
  4560                           
  4561                           ;MazeRobot.X/dc_motor.c: 40:     T2PR=199;
  4562   00459E  0EC7               	movlw	199
  4563   0045A0  6EBC               	movwf	188,c	;volatile
  4564   0045A2                     
  4565                           ; BSR set to: 14
  4566                           ;MazeRobot.X/dc_motor.c: 41:     T2CONbits.ON=1;
  4567   0045A2  8EBD               	bsf	189,7,c	;volatile
  4568                           
  4569                           ;MazeRobot.X/dc_motor.c: 45:     CCPR1H=0;
  4570   0045A4  0E00               	movlw	0
  4571   0045A6  6EAA               	movwf	170,c	;volatile
  4572                           
  4573                           ;MazeRobot.X/dc_motor.c: 46:     CCPR2H=0;
  4574   0045A8  0E00               	movlw	0
  4575   0045AA  6EA6               	movwf	166,c	;volatile
  4576                           
  4577                           ;MazeRobot.X/dc_motor.c: 47:     CCPR3H=0;
  4578   0045AC  0E00               	movlw	0
  4579   0045AE  010F               	movlb	15	; () banked
  4580   0045B0  6F25               	movwf	37,b	;volatile
  4581                           
  4582                           ;MazeRobot.X/dc_motor.c: 48:     CCPR4H=0;
  4583   0045B2  0E00               	movlw	0
  4584   0045B4  6F21               	movwf	33,b	;volatile
  4585                           
  4586                           ;MazeRobot.X/dc_motor.c: 51:     CCPTMRS0bits.C1TSEL=0;
  4587   0045B6  0EFC               	movlw	-4
  4588   0045B8  16AD               	andwf	173,f,c	;volatile
  4589                           
  4590                           ;MazeRobot.X/dc_motor.c: 52:     CCPTMRS0bits.C2TSEL=0;
  4591   0045BA  0EF3               	movlw	-13
  4592   0045BC  16AD               	andwf	173,f,c	;volatile
  4593                           
  4594                           ;MazeRobot.X/dc_motor.c: 53:     CCPTMRS0bits.C3TSEL=0;
  4595   0045BE  0ECF               	movlw	-49
  4596   0045C0  16AD               	andwf	173,f,c	;volatile
  4597                           
  4598                           ;MazeRobot.X/dc_motor.c: 54:     CCPTMRS0bits.C4TSEL=0;
  4599   0045C2  0E3F               	movlw	-193
  4600   0045C4  16AD               	andwf	173,f,c	;volatile
  4601   0045C6                     
  4602                           ; BSR set to: 15
  4603                           ;MazeRobot.X/dc_motor.c: 57:     CCP1CONbits.FMT=1;
  4604   0045C6  88AB               	bsf	171,4,c	;volatile
  4605                           
  4606                           ;MazeRobot.X/dc_motor.c: 58:     CCP1CONbits.CCP1MODE=0b1100;
  4607   0045C8  50AB               	movf	171,w,c	;volatile
  4608   0045CA  0BF0               	andlw	-16
  4609   0045CC  090C               	iorlw	12
  4610   0045CE  6EAB               	movwf	171,c	;volatile
  4611   0045D0                     
  4612                           ; BSR set to: 15
  4613                           ;MazeRobot.X/dc_motor.c: 59:     CCP1CONbits.EN=1;
  4614   0045D0  8EAB               	bsf	171,7,c	;volatile
  4615   0045D2                     
  4616                           ; BSR set to: 15
  4617                           ;MazeRobot.X/dc_motor.c: 61:     CCP2CONbits.FMT=1;
  4618   0045D2  88A7               	bsf	167,4,c	;volatile
  4619                           
  4620                           ;MazeRobot.X/dc_motor.c: 62:     CCP2CONbits.CCP2MODE=0b1100;
  4621   0045D4  50A7               	movf	167,w,c	;volatile
  4622   0045D6  0BF0               	andlw	-16
  4623   0045D8  090C               	iorlw	12
  4624   0045DA  6EA7               	movwf	167,c	;volatile
  4625   0045DC                     
  4626                           ; BSR set to: 15
  4627                           ;MazeRobot.X/dc_motor.c: 63:     CCP2CONbits.EN=1;
  4628   0045DC  8EA7               	bsf	167,7,c	;volatile
  4629   0045DE                     
  4630                           ; BSR set to: 15
  4631                           ;MazeRobot.X/dc_motor.c: 65:     CCP3CONbits.FMT=1;
  4632   0045DE  8926               	bsf	38,4,b	;volatile
  4633                           
  4634                           ;MazeRobot.X/dc_motor.c: 66:     CCP3CONbits.CCP3MODE=0b1100;
  4635   0045E0  5126               	movf	38,w,b	;volatile
  4636   0045E2  0BF0               	andlw	-16
  4637   0045E4  090C               	iorlw	12
  4638   0045E6  6F26               	movwf	38,b	;volatile
  4639   0045E8                     
  4640                           ; BSR set to: 15
  4641                           ;MazeRobot.X/dc_motor.c: 67:     CCP3CONbits.EN=1;
  4642   0045E8  8F26               	bsf	38,7,b	;volatile
  4643   0045EA                     
  4644                           ; BSR set to: 15
  4645                           ;MazeRobot.X/dc_motor.c: 69:     CCP4CONbits.FMT=1;
  4646   0045EA  8922               	bsf	34,4,b	;volatile
  4647                           
  4648                           ;MazeRobot.X/dc_motor.c: 70:     CCP4CONbits.CCP4MODE=0b1100;
  4649   0045EC  5122               	movf	34,w,b	;volatile
  4650   0045EE  0BF0               	andlw	-16
  4651   0045F0  090C               	iorlw	12
  4652   0045F2  6F22               	movwf	34,b	;volatile
  4653   0045F4                     
  4654                           ; BSR set to: 15
  4655                           ;MazeRobot.X/dc_motor.c: 71:     CCP4CONbits.EN=1;
  4656   0045F4  8F22               	bsf	34,7,b	;volatile
  4657   0045F6                     
  4658                           ; BSR set to: 15
  4659   0045F6  0012               	return		;funcret
  4660   0045F8                     __end_of_initDCmotorsPWM:
  4661                           	callstack 0
  4662                           
  4663 ;; *************** function _color_click_init *****************
  4664 ;; Defined at:
  4665 ;;		line 8 in file "MazeRobot.X/color.c"
  4666 ;; Parameters:    Size  Location     Type
  4667 ;;		None
  4668 ;; Auto vars:     Size  Location     Type
  4669 ;;		None
  4670 ;; Return value:  Size  Location     Type
  4671 ;;                  1    wreg      void 
  4672 ;; Registers used:
  4673 ;;		wreg, status,2, status,0, cstack
  4674 ;; Tracked objects:
  4675 ;;		On entry : 0/0
  4676 ;;		On exit  : 0/0
  4677 ;;		Unchanged: 0/0
  4678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4680 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4681 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4682 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4683 ;;Total ram usage:        1 bytes
  4684 ;; Hardware stack levels used: 1
  4685 ;; Hardware stack levels required when called: 5
  4686 ;; This function calls:
  4687 ;;		_I2C_2_Master_Init
  4688 ;;		_color_writetoaddr
  4689 ;; This function is called by:
  4690 ;;		_main
  4691 ;; This function uses a non-reentrant model
  4692 ;;
  4693                           
  4694                           	psect	text21
  4695   004A80                     __ptext21:
  4696                           	callstack 0
  4697   004A80                     _color_click_init:
  4698                           	callstack 25
  4699   004A80                     
  4700                           ;MazeRobot.X/color.c: 11:     I2C_2_Master_Init();
  4701   004A80  ECB4  F025         	call	_I2C_2_Master_Init	;wreg free
  4702   004A84                     
  4703                           ;MazeRobot.X/color.c: 14:   color_writetoaddr(0x00, 0x01);
  4704   004A84  0E01               	movlw	1
  4705   004A86  6E07               	movwf	color_writetoaddr@value^0,c
  4706   004A88  0E00               	movlw	0
  4707   004A8A  EC05  F026         	call	_color_writetoaddr
  4708   004A8E                     
  4709                           ;MazeRobot.X/color.c: 15:     _delay((unsigned long)((3)*(64000000/4000.0)));
  4710   004A8E  0E3F               	movlw	63
  4711   004A90  6E09               	movwf	??_color_click_init^0,c
  4712   004A92  0E55               	movlw	85
  4713   004A94                     u6207:
  4714   004A94  2EE8               	decfsz	wreg,f,c
  4715   004A96  D7FE               	bra	u6207
  4716   004A98  2E09               	decfsz	??_color_click_init^0,f,c
  4717   004A9A  D7FC               	bra	u6207
  4718   004A9C  F000               	nop	
  4719   004A9E                     
  4720                           ;MazeRobot.X/color.c: 18:  color_writetoaddr(0x00, 0x03);
  4721   004A9E  0E03               	movlw	3
  4722   004AA0  6E07               	movwf	color_writetoaddr@value^0,c
  4723   004AA2  0E00               	movlw	0
  4724   004AA4  EC05  F026         	call	_color_writetoaddr
  4725   004AA8                     
  4726                           ;MazeRobot.X/color.c: 21:  color_writetoaddr(0x01, 0xD5);
  4727   004AA8  0ED5               	movlw	213
  4728   004AAA  6E07               	movwf	color_writetoaddr@value^0,c
  4729   004AAC  0E01               	movlw	1
  4730   004AAE  EC05  F026         	call	_color_writetoaddr
  4731   004AB2  0012               	return		;funcret
  4732   004AB4                     __end_of_color_click_init:
  4733                           	callstack 0
  4734                           
  4735 ;; *************** function _color_writetoaddr *****************
  4736 ;; Defined at:
  4737 ;;		line 25 in file "MazeRobot.X/color.c"
  4738 ;; Parameters:    Size  Location     Type
  4739 ;;  address         1    wreg     unsigned char 
  4740 ;;  value           1    6[COMRAM] unsigned char 
  4741 ;; Auto vars:     Size  Location     Type
  4742 ;;  address         1    7[COMRAM] unsigned char 
  4743 ;; Return value:  Size  Location     Type
  4744 ;;                  1    wreg      void 
  4745 ;; Registers used:
  4746 ;;		wreg, status,2, status,0, cstack
  4747 ;; Tracked objects:
  4748 ;;		On entry : 0/0
  4749 ;;		On exit  : 0/0
  4750 ;;		Unchanged: 0/0
  4751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4752 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4753 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4755 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4756 ;;Total ram usage:        2 bytes
  4757 ;; Hardware stack levels used: 1
  4758 ;; Hardware stack levels required when called: 4
  4759 ;; This function calls:
  4760 ;;		_I2C_2_Master_Start
  4761 ;;		_I2C_2_Master_Stop
  4762 ;;		_I2C_2_Master_Write
  4763 ;; This function is called by:
  4764 ;;		_color_click_init
  4765 ;; This function uses a non-reentrant model
  4766 ;;
  4767                           
  4768                           	psect	text22
  4769   004C0A                     __ptext22:
  4770                           	callstack 0
  4771   004C0A                     _color_writetoaddr:
  4772                           	callstack 25
  4773                           
  4774                           ;incstack = 0
  4775                           ;color_writetoaddr@address stored from wreg
  4776   004C0A  6E08               	movwf	color_writetoaddr@address^0,c
  4777   004C0C                     
  4778                           ;MazeRobot.X/color.c: 26:     I2C_2_Master_Start();
  4779   004C0C  EC45  F026         	call	_I2C_2_Master_Start	;wreg free
  4780                           
  4781                           ;MazeRobot.X/color.c: 27:     I2C_2_Master_Write(0x52 | 0x00);
  4782   004C10  0E52               	movlw	82
  4783   004C12  EC3A  F026         	call	_I2C_2_Master_Write
  4784                           
  4785                           ;MazeRobot.X/color.c: 28:     I2C_2_Master_Write(0x80 | address);
  4786   004C16  5008               	movf	color_writetoaddr@address^0,w,c
  4787   004C18  0980               	iorlw	128
  4788   004C1A  EC3A  F026         	call	_I2C_2_Master_Write
  4789                           
  4790                           ;MazeRobot.X/color.c: 29:     I2C_2_Master_Write(value);
  4791   004C1E  5007               	movf	color_writetoaddr@value^0,w,c
  4792   004C20  EC3A  F026         	call	_I2C_2_Master_Write
  4793                           
  4794                           ;MazeRobot.X/color.c: 30:     I2C_2_Master_Stop();
  4795   004C24  EC40  F026         	call	_I2C_2_Master_Stop	;wreg free
  4796   004C28  0012               	return		;funcret
  4797   004C2A                     __end_of_color_writetoaddr:
  4798                           	callstack 0
  4799                           
  4800 ;; *************** function _I2C_2_Master_Init *****************
  4801 ;; Defined at:
  4802 ;;		line 4 in file "MazeRobot.X/i2c.c"
  4803 ;; Parameters:    Size  Location     Type
  4804 ;;		None
  4805 ;; Auto vars:     Size  Location     Type
  4806 ;;		None
  4807 ;; Return value:  Size  Location     Type
  4808 ;;                  1    wreg      void 
  4809 ;; Registers used:
  4810 ;;		wreg, status,2
  4811 ;; Tracked objects:
  4812 ;;		On entry : 0/0
  4813 ;;		On exit  : 0/0
  4814 ;;		Unchanged: 0/0
  4815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4819 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4820 ;;Total ram usage:        0 bytes
  4821 ;; Hardware stack levels used: 1
  4822 ;; Hardware stack levels required when called: 2
  4823 ;; This function calls:
  4824 ;;		Nothing
  4825 ;; This function is called by:
  4826 ;;		_color_click_init
  4827 ;; This function uses a non-reentrant model
  4828 ;;
  4829                           
  4830                           	psect	text23
  4831   004B68                     __ptext23:
  4832                           	callstack 0
  4833   004B68                     _I2C_2_Master_Init:
  4834                           	callstack 27
  4835   004B68                     
  4836                           ;MazeRobot.X/i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  4837   004B68  010E               	movlb	14	; () banked
  4838   004B6A  51D9               	movf	217,w,b	;volatile
  4839   004B6C  0BF0               	andlw	-16
  4840   004B6E  0908               	iorlw	8
  4841   004B70  6FD9               	movwf	217,b	;volatile
  4842   004B72                     
  4843                           ; BSR set to: 14
  4844                           ;MazeRobot.X/i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  4845   004B72  8BD9               	bsf	217,5,b	;volatile
  4846                           
  4847                           ;MazeRobot.X/i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  4848   004B74  0E9F               	movlw	159
  4849   004B76  6FD6               	movwf	214,b	;volatile
  4850   004B78                     
  4851                           ; BSR set to: 14
  4852                           ;MazeRobot.X/i2c.c: 12:   TRISDbits.TRISD5 = 1;
  4853   004B78  8A84               	bsf	132,5,c	;volatile
  4854   004B7A                     
  4855                           ; BSR set to: 14
  4856                           ;MazeRobot.X/i2c.c: 13:   TRISDbits.TRISD6 = 1;
  4857   004B7A  8C84               	bsf	132,6,c	;volatile
  4858   004B7C                     
  4859                           ; BSR set to: 14
  4860                           ;MazeRobot.X/i2c.c: 14:   ANSELDbits.ANSELD5=0;
  4861   004B7C  9BA7               	bcf	167,5,b	;volatile
  4862   004B7E                     
  4863                           ; BSR set to: 14
  4864                           ;MazeRobot.X/i2c.c: 15:   ANSELDbits.ANSELD6=0;
  4865   004B7E  9DA7               	bcf	167,6,b	;volatile
  4866                           
  4867                           ;MazeRobot.X/i2c.c: 16:   SSP2DATPPS=0x1D;
  4868   004B80  0E1D               	movlw	29
  4869   004B82  6F1D               	movwf	29,b	;volatile
  4870                           
  4871                           ;MazeRobot.X/i2c.c: 17:   SSP2CLKPPS=0x1E;
  4872   004B84  0E1E               	movlw	30
  4873   004B86  6F1C               	movwf	28,b	;volatile
  4874                           
  4875                           ;MazeRobot.X/i2c.c: 18:   RD5PPS=0x1C;
  4876   004B88  0E1C               	movlw	28
  4877   004B8A  6F6F               	movwf	111,b	;volatile
  4878                           
  4879                           ;MazeRobot.X/i2c.c: 19:   RD6PPS=0x1B;
  4880   004B8C  0E1B               	movlw	27
  4881   004B8E  6F70               	movwf	112,b	;volatile
  4882   004B90                     
  4883                           ; BSR set to: 14
  4884   004B90  0012               	return		;funcret
  4885   004B92                     __end_of_I2C_2_Master_Init:
  4886                           	callstack 0
  4887                           
  4888 ;; *************** function _colorDetect *****************
  4889 ;; Defined at:
  4890 ;;		line 130 in file "MazeRobot.X/color.c"
  4891 ;; Parameters:    Size  Location     Type
  4892 ;;  clearRef        4    0[BANK0 ] void 
  4893 ;;  ambientRGBVa    2    4[BANK0 ] PTR struct RGB
  4894 ;;		 -> main@ambientRGBVal(8), 
  4895 ;;  whiteRGBVal     2    6[BANK0 ] PTR struct RGB
  4896 ;;		 -> main@whiteRGBVal(8), 
  4897 ;;  mL              2    8[BANK0 ] PTR struct DC_motor
  4898 ;;		 -> main@motorLeft(9), 
  4899 ;;  mR              2   10[BANK0 ] PTR struct DC_motor
  4900 ;;		 -> main@motorRight(9), 
  4901 ;; Auto vars:     Size  Location     Type
  4902 ;;  RGBVal          8   32[BANK0 ] struct RGB
  4903 ;;  bluePrint       4   48[BANK0 ] float 
  4904 ;;  greenPrint      4   44[BANK0 ] float 
  4905 ;;  redPrint        4   40[BANK0 ] float 
  4906 ;;  whiteB          4   20[BANK0 ] float 
  4907 ;;  whiteG          4   16[BANK0 ] float 
  4908 ;;  whiteR          4   12[BANK0 ] float 
  4909 ;;  whiteC          4    0        float 
  4910 ;;  colour_ref      2   30[BANK0 ] unsigned int 
  4911 ;;  ambientB        2   28[BANK0 ] unsigned int 
  4912 ;;  ambientG        2   26[BANK0 ] unsigned int 
  4913 ;;  ambientR        2   24[BANK0 ] unsigned int 
  4914 ;; Return value:  Size  Location     Type
  4915 ;;                  2    0[BANK0 ] unsigned int 
  4916 ;; Registers used:
  4917 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4918 ;; Tracked objects:
  4919 ;;		On entry : 0/0
  4920 ;;		On exit  : 0/0
  4921 ;;		Unchanged: 0/0
  4922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4923 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4924 ;;      Locals:         0      40       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4925 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4926 ;;      Totals:         2      52       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4927 ;;Total ram usage:       54 bytes
  4928 ;; Hardware stack levels used: 1
  4929 ;; Hardware stack levels required when called: 7
  4930 ;; This function calls:
  4931 ;;		___fldiv
  4932 ;;		___flge
  4933 ;;		___flmul
  4934 ;;		___flsub
  4935 ;;		___xxtofl
  4936 ;;		_getColor
  4937 ;;		_reverseSquareLeft
  4938 ;;		_reverseSquareRight
  4939 ;;		_turnLeft_135
  4940 ;;		_turnLeft_90
  4941 ;;		_turnRight_135
  4942 ;;		_turnRight_90
  4943 ;;		_turn_180
  4944 ;; This function is called by:
  4945 ;;		_main
  4946 ;; This function uses a non-reentrant model
  4947 ;;
  4948                           
  4949                           	psect	text24
  4950   000E28                     __ptext24:
  4951                           	callstack 0
  4952   000E28                     _colorDetect:
  4953                           	callstack 23
  4954   000E28                     
  4955                           ;MazeRobot.X/color.c: 132:         RGB RGBVal;;MazeRobot.X/color.c: 133:         getColo
      +                          r(&RGBVal);
  4956   000E28  0E80               	movlw	low colorDetect@RGBVal
  4957   000E2A  6E10               	movwf	getColor@v^0,c
  4958   000E2C  0E00               	movlw	high colorDetect@RGBVal
  4959   000E2E  6E11               	movwf	(getColor@v+1)^0,c
  4960   000E30  EC73  F023         	call	_getColor	;wreg free
  4961   000E34                     
  4962                           ;MazeRobot.X/color.c: 135:         unsigned int ambientR = ambientRGBVal->R;
  4963   000E34  C064  FFD9         	movff	colorDetect@ambientRGBVal,fsr2l
  4964   000E38  C065  FFDA         	movff	colorDetect@ambientRGBVal+1,fsr2h
  4965   000E3C  CFDE F078          	movff	postinc2,colorDetect@ambientR
  4966   000E40  CFDD F079          	movff	postdec2,colorDetect@ambientR+1
  4967   000E44                     
  4968                           ;MazeRobot.X/color.c: 136:         unsigned int ambientG = ambientRGBVal->G;
  4969   000E44  0100               	movlb	0	; () banked
  4970   000E46  EE20 F002          	lfsr	2,2
  4971   000E4A  5164               	movf	colorDetect@ambientRGBVal& (0+255),w,b
  4972   000E4C  26D9               	addwf	fsr2l,f,c
  4973   000E4E  5165               	movf	(colorDetect@ambientRGBVal+1)& (0+255),w,b
  4974   000E50  22DA               	addwfc	fsr2h,f,c
  4975   000E52  CFDE F07A          	movff	postinc2,colorDetect@ambientG
  4976   000E56  CFDD F07B          	movff	postdec2,colorDetect@ambientG+1
  4977   000E5A                     
  4978                           ; BSR set to: 0
  4979                           ;MazeRobot.X/color.c: 137:         unsigned int ambientB = ambientRGBVal->B;
  4980   000E5A  EE20 F004          	lfsr	2,4
  4981   000E5E  5164               	movf	colorDetect@ambientRGBVal& (0+255),w,b
  4982   000E60  26D9               	addwf	fsr2l,f,c
  4983   000E62  5165               	movf	(colorDetect@ambientRGBVal+1)& (0+255),w,b
  4984   000E64  22DA               	addwfc	fsr2h,f,c
  4985   000E66  CFDE F07C          	movff	postinc2,colorDetect@ambientB
  4986   000E6A  CFDD F07D          	movff	postdec2,colorDetect@ambientB+1
  4987   000E6E                     
  4988                           ; BSR set to: 0
  4989                           ;MazeRobot.X/color.c: 139:         float whiteR = whiteRGBVal->R;
  4990   000E6E  C066  FFD9         	movff	colorDetect@whiteRGBVal,fsr2l
  4991   000E72  C067  FFDA         	movff	colorDetect@whiteRGBVal+1,fsr2h
  4992   000E76  CFDE F04F          	movff	postinc2,??_colorDetect
  4993   000E7A  CFDD F050          	movff	postdec2,??_colorDetect+1
  4994   000E7E  C04F  F005         	movff	??_colorDetect,___xxtofl@val
  4995   000E82  C050  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  4996   000E86  6A07               	clrf	(___xxtofl@val+2)^0,c
  4997   000E88  6A08               	clrf	(___xxtofl@val+3)^0,c
  4998   000E8A  0E00               	movlw	0
  4999   000E8C  ECEF  F017         	call	___xxtofl
  5000   000E90  C005  F06C         	movff	?___xxtofl,colorDetect@whiteR
  5001   000E94  C006  F06D         	movff	?___xxtofl+1,colorDetect@whiteR+1
  5002   000E98  C007  F06E         	movff	?___xxtofl+2,colorDetect@whiteR+2
  5003   000E9C  C008  F06F         	movff	?___xxtofl+3,colorDetect@whiteR+3
  5004   000EA0                     
  5005                           ;MazeRobot.X/color.c: 140:         float whiteG = whiteRGBVal->G;
  5006   000EA0  0100               	movlb	0	; () banked
  5007   000EA2  EE20 F002          	lfsr	2,2
  5008   000EA6  5166               	movf	colorDetect@whiteRGBVal& (0+255),w,b
  5009   000EA8  26D9               	addwf	fsr2l,f,c
  5010   000EAA  5167               	movf	(colorDetect@whiteRGBVal+1)& (0+255),w,b
  5011   000EAC  22DA               	addwfc	fsr2h,f,c
  5012   000EAE  CFDE F04F          	movff	postinc2,??_colorDetect
  5013   000EB2  CFDD F050          	movff	postdec2,??_colorDetect+1
  5014   000EB6  C04F  F005         	movff	??_colorDetect,___xxtofl@val
  5015   000EBA  C050  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  5016   000EBE  6A07               	clrf	(___xxtofl@val+2)^0,c
  5017   000EC0  6A08               	clrf	(___xxtofl@val+3)^0,c
  5018   000EC2  0E00               	movlw	0
  5019   000EC4  ECEF  F017         	call	___xxtofl
  5020   000EC8  C005  F070         	movff	?___xxtofl,colorDetect@whiteG
  5021   000ECC  C006  F071         	movff	?___xxtofl+1,colorDetect@whiteG+1
  5022   000ED0  C007  F072         	movff	?___xxtofl+2,colorDetect@whiteG+2
  5023   000ED4  C008  F073         	movff	?___xxtofl+3,colorDetect@whiteG+3
  5024   000ED8                     
  5025                           ;MazeRobot.X/color.c: 141:         float whiteB = whiteRGBVal->B;
  5026   000ED8  0100               	movlb	0	; () banked
  5027   000EDA  EE20 F004          	lfsr	2,4
  5028   000EDE  5166               	movf	colorDetect@whiteRGBVal& (0+255),w,b
  5029   000EE0  26D9               	addwf	fsr2l,f,c
  5030   000EE2  5167               	movf	(colorDetect@whiteRGBVal+1)& (0+255),w,b
  5031   000EE4  22DA               	addwfc	fsr2h,f,c
  5032   000EE6  CFDE F04F          	movff	postinc2,??_colorDetect
  5033   000EEA  CFDD F050          	movff	postdec2,??_colorDetect+1
  5034   000EEE  C04F  F005         	movff	??_colorDetect,___xxtofl@val
  5035   000EF2  C050  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  5036   000EF6  6A07               	clrf	(___xxtofl@val+2)^0,c
  5037   000EF8  6A08               	clrf	(___xxtofl@val+3)^0,c
  5038   000EFA  0E00               	movlw	0
  5039   000EFC  ECEF  F017         	call	___xxtofl
  5040   000F00  C005  F074         	movff	?___xxtofl,colorDetect@whiteB
  5041   000F04  C006  F075         	movff	?___xxtofl+1,colorDetect@whiteB+1
  5042   000F08  C007  F076         	movff	?___xxtofl+2,colorDetect@whiteB+2
  5043   000F0C  C008  F077         	movff	?___xxtofl+3,colorDetect@whiteB+3
  5044   000F10  0100               	movlb	0	; () banked
  5045   000F12  EE20 F006          	lfsr	2,6
  5046   000F16  5166               	movf	colorDetect@whiteRGBVal& (0+255),w,b
  5047   000F18  26D9               	addwf	fsr2l,f,c
  5048   000F1A  5167               	movf	(colorDetect@whiteRGBVal+1)& (0+255),w,b
  5049   000F1C  22DA               	addwfc	fsr2h,f,c
  5050   000F1E  CFDE F04F          	movff	postinc2,??_colorDetect
  5051   000F22  CFDD F050          	movff	postdec2,??_colorDetect+1
  5052   000F26  C04F  F005         	movff	??_colorDetect,___xxtofl@val
  5053   000F2A  C050  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  5054   000F2E  6A07               	clrf	(___xxtofl@val+2)^0,c
  5055   000F30  6A08               	clrf	(___xxtofl@val+3)^0,c
  5056   000F32  0E00               	movlw	0
  5057   000F34  ECEF  F017         	call	___xxtofl
  5058   000F38                     
  5059                           ;MazeRobot.X/color.c: 144:         float redPrint = (RGBVal.R-ambientR)/((whiteR-(float)
      +                          ambientR)*(clearRef));
  5060   000F38  0100               	movlb	0	; () banked
  5061   000F3A  5178               	movf	colorDetect@ambientR& (0+255),w,b
  5062   000F3C  5D80               	subwf	colorDetect@RGBVal& (0+255),w,b
  5063   000F3E  6E4F               	movwf	??_colorDetect^0,c
  5064   000F40  5179               	movf	(colorDetect@ambientR+1)& (0+255),w,b
  5065   000F42  5981               	subwfb	(colorDetect@RGBVal+1)& (0+255),w,b
  5066   000F44  6E50               	movwf	(??_colorDetect+1)^0,c
  5067   000F46  C04F  F005         	movff	??_colorDetect,___xxtofl@val
  5068   000F4A  C050  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  5069   000F4E  6A07               	clrf	(___xxtofl@val+2)^0,c
  5070   000F50  6A08               	clrf	(___xxtofl@val+3)^0,c
  5071   000F52  0E00               	movlw	0
  5072   000F54  ECEF  F017         	call	___xxtofl
  5073   000F58  C005  F036         	movff	?___xxtofl,___fldiv@b
  5074   000F5C  C006  F037         	movff	?___xxtofl+1,___fldiv@b+1
  5075   000F60  C007  F038         	movff	?___xxtofl+2,___fldiv@b+2
  5076   000F64  C008  F039         	movff	?___xxtofl+3,___fldiv@b+3
  5077   000F68  C060  F021         	movff	colorDetect@clearRef,___flmul@a
  5078   000F6C  C061  F022         	movff	colorDetect@clearRef+1,___flmul@a+1
  5079   000F70  C062  F023         	movff	colorDetect@clearRef+2,___flmul@a+2
  5080   000F74  C063  F024         	movff	colorDetect@clearRef+3,___flmul@a+3
  5081   000F78  C078  F005         	movff	colorDetect@ambientR,___xxtofl@val
  5082   000F7C  C079  F006         	movff	colorDetect@ambientR+1,___xxtofl@val+1
  5083   000F80  6A07               	clrf	(___xxtofl@val+2)^0,c
  5084   000F82  6A08               	clrf	(___xxtofl@val+3)^0,c
  5085   000F84  0E00               	movlw	0
  5086   000F86  ECEF  F017         	call	___xxtofl
  5087   000F8A  C005  F019         	movff	?___xxtofl,___flsub@a
  5088   000F8E  C006  F01A         	movff	?___xxtofl+1,___flsub@a+1
  5089   000F92  C007  F01B         	movff	?___xxtofl+2,___flsub@a+2
  5090   000F96  C008  F01C         	movff	?___xxtofl+3,___flsub@a+3
  5091   000F9A  C06C  F015         	movff	colorDetect@whiteR,___flsub@b
  5092   000F9E  C06D  F016         	movff	colorDetect@whiteR+1,___flsub@b+1
  5093   000FA2  C06E  F017         	movff	colorDetect@whiteR+2,___flsub@b+2
  5094   000FA6  C06F  F018         	movff	colorDetect@whiteR+3,___flsub@b+3
  5095   000FAA  ECBA  F024         	call	___flsub	;wreg free
  5096   000FAE  C015  F01D         	movff	?___flsub,___flmul@b
  5097   000FB2  C016  F01E         	movff	?___flsub+1,___flmul@b+1
  5098   000FB6  C017  F01F         	movff	?___flsub+2,___flmul@b+2
  5099   000FBA  C018  F020         	movff	?___flsub+3,___flmul@b+3
  5100   000FBE  EC97  F011         	call	___flmul	;wreg free
  5101   000FC2  C01D  F03A         	movff	?___flmul,___fldiv@a
  5102   000FC6  C01E  F03B         	movff	?___flmul+1,___fldiv@a+1
  5103   000FCA  C01F  F03C         	movff	?___flmul+2,___fldiv@a+2
  5104   000FCE  C020  F03D         	movff	?___flmul+3,___fldiv@a+3
  5105   000FD2  ECAC  F013         	call	___fldiv	;wreg free
  5106   000FD6  C036  F088         	movff	?___fldiv,colorDetect@redPrint
  5107   000FDA  C037  F089         	movff	?___fldiv+1,colorDetect@redPrint+1
  5108   000FDE  C038  F08A         	movff	?___fldiv+2,colorDetect@redPrint+2
  5109   000FE2  C039  F08B         	movff	?___fldiv+3,colorDetect@redPrint+3
  5110   000FE6                     
  5111                           ;MazeRobot.X/color.c: 145:         float greenPrint = (RGBVal.G-ambientG)/((whiteG-(floa
      +                          t)ambientG)*(clearRef));
  5112   000FE6  0100               	movlb	0	; () banked
  5113   000FE8  517A               	movf	colorDetect@ambientG& (0+255),w,b
  5114   000FEA  5D82               	subwf	(colorDetect@RGBVal+2)& (0+255),w,b
  5115   000FEC  6E4F               	movwf	??_colorDetect^0,c
  5116   000FEE  517B               	movf	(colorDetect@ambientG+1)& (0+255),w,b
  5117   000FF0  5983               	subwfb	(colorDetect@RGBVal+3)& (0+255),w,b
  5118   000FF2  6E50               	movwf	(??_colorDetect+1)^0,c
  5119   000FF4  C04F  F005         	movff	??_colorDetect,___xxtofl@val
  5120   000FF8  C050  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  5121   000FFC  6A07               	clrf	(___xxtofl@val+2)^0,c
  5122   000FFE  6A08               	clrf	(___xxtofl@val+3)^0,c
  5123   001000  0E00               	movlw	0
  5124   001002  ECEF  F017         	call	___xxtofl
  5125   001006  C005  F036         	movff	?___xxtofl,___fldiv@b
  5126   00100A  C006  F037         	movff	?___xxtofl+1,___fldiv@b+1
  5127   00100E  C007  F038         	movff	?___xxtofl+2,___fldiv@b+2
  5128   001012  C008  F039         	movff	?___xxtofl+3,___fldiv@b+3
  5129   001016  C060  F021         	movff	colorDetect@clearRef,___flmul@a
  5130   00101A  C061  F022         	movff	colorDetect@clearRef+1,___flmul@a+1
  5131   00101E  C062  F023         	movff	colorDetect@clearRef+2,___flmul@a+2
  5132   001022  C063  F024         	movff	colorDetect@clearRef+3,___flmul@a+3
  5133   001026  C07A  F005         	movff	colorDetect@ambientG,___xxtofl@val
  5134   00102A  C07B  F006         	movff	colorDetect@ambientG+1,___xxtofl@val+1
  5135   00102E  6A07               	clrf	(___xxtofl@val+2)^0,c
  5136   001030  6A08               	clrf	(___xxtofl@val+3)^0,c
  5137   001032  0E00               	movlw	0
  5138   001034  ECEF  F017         	call	___xxtofl
  5139   001038  C005  F019         	movff	?___xxtofl,___flsub@a
  5140   00103C  C006  F01A         	movff	?___xxtofl+1,___flsub@a+1
  5141   001040  C007  F01B         	movff	?___xxtofl+2,___flsub@a+2
  5142   001044  C008  F01C         	movff	?___xxtofl+3,___flsub@a+3
  5143   001048  C070  F015         	movff	colorDetect@whiteG,___flsub@b
  5144   00104C  C071  F016         	movff	colorDetect@whiteG+1,___flsub@b+1
  5145   001050  C072  F017         	movff	colorDetect@whiteG+2,___flsub@b+2
  5146   001054  C073  F018         	movff	colorDetect@whiteG+3,___flsub@b+3
  5147   001058  ECBA  F024         	call	___flsub	;wreg free
  5148   00105C  C015  F01D         	movff	?___flsub,___flmul@b
  5149   001060  C016  F01E         	movff	?___flsub+1,___flmul@b+1
  5150   001064  C017  F01F         	movff	?___flsub+2,___flmul@b+2
  5151   001068  C018  F020         	movff	?___flsub+3,___flmul@b+3
  5152   00106C  EC97  F011         	call	___flmul	;wreg free
  5153   001070  C01D  F03A         	movff	?___flmul,___fldiv@a
  5154   001074  C01E  F03B         	movff	?___flmul+1,___fldiv@a+1
  5155   001078  C01F  F03C         	movff	?___flmul+2,___fldiv@a+2
  5156   00107C  C020  F03D         	movff	?___flmul+3,___fldiv@a+3
  5157   001080  ECAC  F013         	call	___fldiv	;wreg free
  5158   001084  C036  F08C         	movff	?___fldiv,colorDetect@greenPrint
  5159   001088  C037  F08D         	movff	?___fldiv+1,colorDetect@greenPrint+1
  5160   00108C  C038  F08E         	movff	?___fldiv+2,colorDetect@greenPrint+2
  5161   001090  C039  F08F         	movff	?___fldiv+3,colorDetect@greenPrint+3
  5162   001094                     
  5163                           ;MazeRobot.X/color.c: 146:         float bluePrint = (RGBVal.B-ambientB)/((whiteB-(float
      +                          )ambientB)*(clearRef));
  5164   001094  0100               	movlb	0	; () banked
  5165   001096  517C               	movf	colorDetect@ambientB& (0+255),w,b
  5166   001098  5D84               	subwf	(colorDetect@RGBVal+4)& (0+255),w,b
  5167   00109A  6E4F               	movwf	??_colorDetect^0,c
  5168   00109C  517D               	movf	(colorDetect@ambientB+1)& (0+255),w,b
  5169   00109E  5985               	subwfb	(colorDetect@RGBVal+5)& (0+255),w,b
  5170   0010A0  6E50               	movwf	(??_colorDetect+1)^0,c
  5171   0010A2  C04F  F005         	movff	??_colorDetect,___xxtofl@val
  5172   0010A6  C050  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  5173   0010AA  6A07               	clrf	(___xxtofl@val+2)^0,c
  5174   0010AC  6A08               	clrf	(___xxtofl@val+3)^0,c
  5175   0010AE  0E00               	movlw	0
  5176   0010B0  ECEF  F017         	call	___xxtofl
  5177   0010B4  C005  F036         	movff	?___xxtofl,___fldiv@b
  5178   0010B8  C006  F037         	movff	?___xxtofl+1,___fldiv@b+1
  5179   0010BC  C007  F038         	movff	?___xxtofl+2,___fldiv@b+2
  5180   0010C0  C008  F039         	movff	?___xxtofl+3,___fldiv@b+3
  5181   0010C4  C060  F021         	movff	colorDetect@clearRef,___flmul@a
  5182   0010C8  C061  F022         	movff	colorDetect@clearRef+1,___flmul@a+1
  5183   0010CC  C062  F023         	movff	colorDetect@clearRef+2,___flmul@a+2
  5184   0010D0  C063  F024         	movff	colorDetect@clearRef+3,___flmul@a+3
  5185   0010D4  C07C  F005         	movff	colorDetect@ambientB,___xxtofl@val
  5186   0010D8  C07D  F006         	movff	colorDetect@ambientB+1,___xxtofl@val+1
  5187   0010DC  6A07               	clrf	(___xxtofl@val+2)^0,c
  5188   0010DE  6A08               	clrf	(___xxtofl@val+3)^0,c
  5189   0010E0  0E00               	movlw	0
  5190   0010E2  ECEF  F017         	call	___xxtofl
  5191   0010E6  C005  F019         	movff	?___xxtofl,___flsub@a
  5192   0010EA  C006  F01A         	movff	?___xxtofl+1,___flsub@a+1
  5193   0010EE  C007  F01B         	movff	?___xxtofl+2,___flsub@a+2
  5194   0010F2  C008  F01C         	movff	?___xxtofl+3,___flsub@a+3
  5195   0010F6  C074  F015         	movff	colorDetect@whiteB,___flsub@b
  5196   0010FA  C075  F016         	movff	colorDetect@whiteB+1,___flsub@b+1
  5197   0010FE  C076  F017         	movff	colorDetect@whiteB+2,___flsub@b+2
  5198   001102  C077  F018         	movff	colorDetect@whiteB+3,___flsub@b+3
  5199   001106  ECBA  F024         	call	___flsub	;wreg free
  5200   00110A  C015  F01D         	movff	?___flsub,___flmul@b
  5201   00110E  C016  F01E         	movff	?___flsub+1,___flmul@b+1
  5202   001112  C017  F01F         	movff	?___flsub+2,___flmul@b+2
  5203   001116  C018  F020         	movff	?___flsub+3,___flmul@b+3
  5204   00111A  EC97  F011         	call	___flmul	;wreg free
  5205   00111E  C01D  F03A         	movff	?___flmul,___fldiv@a
  5206   001122  C01E  F03B         	movff	?___flmul+1,___fldiv@a+1
  5207   001126  C01F  F03C         	movff	?___flmul+2,___fldiv@a+2
  5208   00112A  C020  F03D         	movff	?___flmul+3,___fldiv@a+3
  5209   00112E  ECAC  F013         	call	___fldiv	;wreg free
  5210   001132  C036  F090         	movff	?___fldiv,colorDetect@bluePrint
  5211   001136  C037  F091         	movff	?___fldiv+1,colorDetect@bluePrint+1
  5212   00113A  C038  F092         	movff	?___fldiv+2,colorDetect@bluePrint+2
  5213   00113E  C039  F093         	movff	?___fldiv+3,colorDetect@bluePrint+3
  5214   001142                     
  5215                           ;MazeRobot.X/color.c: 148:         unsigned int colour_ref = 11;
  5216   001142  0E00               	movlw	0
  5217   001144  0100               	movlb	0	; () banked
  5218   001146  6F7F               	movwf	(colorDetect@colour_ref+1)& (0+255),b
  5219   001148  0E0B               	movlw	11
  5220   00114A  6F7E               	movwf	colorDetect@colour_ref& (0+255),b
  5221   00114C                     
  5222                           ; BSR set to: 0
  5223                           ;MazeRobot.X/color.c: 150:         if ((redPrint < 0) | (redPrint > 2)) { redPrint = 0.0
      +                          ;}
  5224   00114C  BF8B               	btfsc	(colorDetect@redPrint+3)& (0+255),7,b
  5225   00114E  EFAB  F008         	goto	u5531
  5226   001152  EFAD  F008         	goto	u5530
  5227   001156                     u5531:
  5228   001156  EFC6  F008         	goto	l5125
  5229   00115A                     u5530:
  5230   00115A                     
  5231                           ; BSR set to: 0
  5232   00115A  0E00               	movlw	0
  5233   00115C  6E1D               	movwf	___flge@ff1^0,c
  5234   00115E  0E00               	movlw	0
  5235   001160  6E1E               	movwf	(___flge@ff1+1)^0,c
  5236   001162  0E00               	movlw	0
  5237   001164  6E1F               	movwf	(___flge@ff1+2)^0,c
  5238   001166  0E40               	movlw	64
  5239   001168  6E20               	movwf	(___flge@ff1+3)^0,c
  5240   00116A  C088  F021         	movff	colorDetect@redPrint,___flge@ff2
  5241   00116E  C089  F022         	movff	colorDetect@redPrint+1,___flge@ff2+1
  5242   001172  C08A  F023         	movff	colorDetect@redPrint+2,___flge@ff2+2
  5243   001176  C08B  F024         	movff	colorDetect@redPrint+3,___flge@ff2+3
  5244   00117A  ECBD  F01E         	call	___flge	;wreg free
  5245   00117E  B0D8               	btfsc	status,0,c
  5246   001180  EFC4  F008         	goto	u5541
  5247   001184  EFC6  F008         	goto	u5540
  5248   001188                     u5541:
  5249   001188  EFCF  F008         	goto	l5127
  5250   00118C                     u5540:
  5251   00118C                     l5125:
  5252   00118C  0E00               	movlw	0
  5253   00118E  0100               	movlb	0	; () banked
  5254   001190  6F88               	movwf	colorDetect@redPrint& (0+255),b
  5255   001192  0E00               	movlw	0
  5256   001194  6F89               	movwf	(colorDetect@redPrint+1)& (0+255),b
  5257   001196  0E00               	movlw	0
  5258   001198  6F8A               	movwf	(colorDetect@redPrint+2)& (0+255),b
  5259   00119A  0E00               	movlw	0
  5260   00119C  6F8B               	movwf	(colorDetect@redPrint+3)& (0+255),b
  5261   00119E                     l5127:
  5262                           
  5263                           ;MazeRobot.X/color.c: 151:         if ((greenPrint < 0) | (greenPrint > 2)) {greenPrint 
      +                          = 0.0;}
  5264   00119E  0100               	movlb	0	; () banked
  5265   0011A0  BF8F               	btfsc	(colorDetect@greenPrint+3)& (0+255),7,b
  5266   0011A2  EFD5  F008         	goto	u5551
  5267   0011A6  EFD7  F008         	goto	u5550
  5268   0011AA                     u5551:
  5269   0011AA  EFF0  F008         	goto	l5131
  5270   0011AE                     u5550:
  5271   0011AE                     
  5272                           ; BSR set to: 0
  5273   0011AE  0E00               	movlw	0
  5274   0011B0  6E1D               	movwf	___flge@ff1^0,c
  5275   0011B2  0E00               	movlw	0
  5276   0011B4  6E1E               	movwf	(___flge@ff1+1)^0,c
  5277   0011B6  0E00               	movlw	0
  5278   0011B8  6E1F               	movwf	(___flge@ff1+2)^0,c
  5279   0011BA  0E40               	movlw	64
  5280   0011BC  6E20               	movwf	(___flge@ff1+3)^0,c
  5281   0011BE  C08C  F021         	movff	colorDetect@greenPrint,___flge@ff2
  5282   0011C2  C08D  F022         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  5283   0011C6  C08E  F023         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  5284   0011CA  C08F  F024         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  5285   0011CE  ECBD  F01E         	call	___flge	;wreg free
  5286   0011D2  B0D8               	btfsc	status,0,c
  5287   0011D4  EFEE  F008         	goto	u5561
  5288   0011D8  EFF0  F008         	goto	u5560
  5289   0011DC                     u5561:
  5290   0011DC  EFF9  F008         	goto	l5133
  5291   0011E0                     u5560:
  5292   0011E0                     l5131:
  5293   0011E0  0E00               	movlw	0
  5294   0011E2  0100               	movlb	0	; () banked
  5295   0011E4  6F8C               	movwf	colorDetect@greenPrint& (0+255),b
  5296   0011E6  0E00               	movlw	0
  5297   0011E8  6F8D               	movwf	(colorDetect@greenPrint+1)& (0+255),b
  5298   0011EA  0E00               	movlw	0
  5299   0011EC  6F8E               	movwf	(colorDetect@greenPrint+2)& (0+255),b
  5300   0011EE  0E00               	movlw	0
  5301   0011F0  6F8F               	movwf	(colorDetect@greenPrint+3)& (0+255),b
  5302   0011F2                     l5133:
  5303                           
  5304                           ;MazeRobot.X/color.c: 152:         if ((bluePrint < 0) | (bluePrint > 2)){ bluePrint = 0
      +                          .0;}
  5305   0011F2  0100               	movlb	0	; () banked
  5306   0011F4  BF93               	btfsc	(colorDetect@bluePrint+3)& (0+255),7,b
  5307   0011F6  EFFF  F008         	goto	u5571
  5308   0011FA  EF01  F009         	goto	u5570
  5309   0011FE                     u5571:
  5310   0011FE  EF1A  F009         	goto	l5137
  5311   001202                     u5570:
  5312   001202                     
  5313                           ; BSR set to: 0
  5314   001202  0E00               	movlw	0
  5315   001204  6E1D               	movwf	___flge@ff1^0,c
  5316   001206  0E00               	movlw	0
  5317   001208  6E1E               	movwf	(___flge@ff1+1)^0,c
  5318   00120A  0E00               	movlw	0
  5319   00120C  6E1F               	movwf	(___flge@ff1+2)^0,c
  5320   00120E  0E40               	movlw	64
  5321   001210  6E20               	movwf	(___flge@ff1+3)^0,c
  5322   001212  C090  F021         	movff	colorDetect@bluePrint,___flge@ff2
  5323   001216  C091  F022         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  5324   00121A  C092  F023         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  5325   00121E  C093  F024         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  5326   001222  ECBD  F01E         	call	___flge	;wreg free
  5327   001226  B0D8               	btfsc	status,0,c
  5328   001228  EF18  F009         	goto	u5581
  5329   00122C  EF1A  F009         	goto	u5580
  5330   001230                     u5581:
  5331   001230  EF23  F009         	goto	l5139
  5332   001234                     u5580:
  5333   001234                     l5137:
  5334   001234  0E00               	movlw	0
  5335   001236  0100               	movlb	0	; () banked
  5336   001238  6F90               	movwf	colorDetect@bluePrint& (0+255),b
  5337   00123A  0E00               	movlw	0
  5338   00123C  6F91               	movwf	(colorDetect@bluePrint+1)& (0+255),b
  5339   00123E  0E00               	movlw	0
  5340   001240  6F92               	movwf	(colorDetect@bluePrint+2)& (0+255),b
  5341   001242  0E00               	movlw	0
  5342   001244  6F93               	movwf	(colorDetect@bluePrint+3)& (0+255),b
  5343   001246                     l5139:
  5344                           
  5345                           ;MazeRobot.X/color.c: 155:         if ((redPrint > 0.9) & (greenPrint > 0.9) & (bluePrin
      +                          t > 0.9)){
  5346   001246  0E66               	movlw	102
  5347   001248  6E1D               	movwf	___flge@ff1^0,c
  5348   00124A  0E66               	movlw	102
  5349   00124C  6E1E               	movwf	(___flge@ff1+1)^0,c
  5350   00124E  0E66               	movlw	102
  5351   001250  6E1F               	movwf	(___flge@ff1+2)^0,c
  5352   001252  0E3F               	movlw	63
  5353   001254  6E20               	movwf	(___flge@ff1+3)^0,c
  5354   001256  C088  F021         	movff	colorDetect@redPrint,___flge@ff2
  5355   00125A  C089  F022         	movff	colorDetect@redPrint+1,___flge@ff2+1
  5356   00125E  C08A  F023         	movff	colorDetect@redPrint+2,___flge@ff2+2
  5357   001262  C08B  F024         	movff	colorDetect@redPrint+3,___flge@ff2+3
  5358   001266  ECBD  F01E         	call	___flge	;wreg free
  5359   00126A  B0D8               	btfsc	status,0,c
  5360   00126C  EF3A  F009         	goto	u5591
  5361   001270  EF3C  F009         	goto	u5590
  5362   001274                     u5591:
  5363   001274  EF75  F009         	goto	l5147
  5364   001278                     u5590:
  5365   001278  0E66               	movlw	102
  5366   00127A  6E1D               	movwf	___flge@ff1^0,c
  5367   00127C  0E66               	movlw	102
  5368   00127E  6E1E               	movwf	(___flge@ff1+1)^0,c
  5369   001280  0E66               	movlw	102
  5370   001282  6E1F               	movwf	(___flge@ff1+2)^0,c
  5371   001284  0E3F               	movlw	63
  5372   001286  6E20               	movwf	(___flge@ff1+3)^0,c
  5373   001288  C08C  F021         	movff	colorDetect@greenPrint,___flge@ff2
  5374   00128C  C08D  F022         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  5375   001290  C08E  F023         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  5376   001294  C08F  F024         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  5377   001298  ECBD  F01E         	call	___flge	;wreg free
  5378   00129C  B0D8               	btfsc	status,0,c
  5379   00129E  EF53  F009         	goto	u5601
  5380   0012A2  EF55  F009         	goto	u5600
  5381   0012A6                     u5601:
  5382   0012A6  EF75  F009         	goto	l5147
  5383   0012AA                     u5600:
  5384   0012AA  0E66               	movlw	102
  5385   0012AC  6E1D               	movwf	___flge@ff1^0,c
  5386   0012AE  0E66               	movlw	102
  5387   0012B0  6E1E               	movwf	(___flge@ff1+1)^0,c
  5388   0012B2  0E66               	movlw	102
  5389   0012B4  6E1F               	movwf	(___flge@ff1+2)^0,c
  5390   0012B6  0E3F               	movlw	63
  5391   0012B8  6E20               	movwf	(___flge@ff1+3)^0,c
  5392   0012BA  C090  F021         	movff	colorDetect@bluePrint,___flge@ff2
  5393   0012BE  C091  F022         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  5394   0012C2  C092  F023         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  5395   0012C6  C093  F024         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  5396   0012CA  ECBD  F01E         	call	___flge	;wreg free
  5397   0012CE  B0D8               	btfsc	status,0,c
  5398   0012D0  EF6C  F009         	goto	u5611
  5399   0012D4  EF6E  F009         	goto	u5610
  5400   0012D8                     u5611:
  5401   0012D8  EF75  F009         	goto	l5147
  5402   0012DC                     u5610:
  5403   0012DC                     
  5404                           ;MazeRobot.X/color.c: 156:         colour_ref = 8;
  5405   0012DC  0E00               	movlw	0
  5406   0012DE  0100               	movlb	0	; () banked
  5407   0012E0  6F7F               	movwf	(colorDetect@colour_ref+1)& (0+255),b
  5408   0012E2  0E08               	movlw	8
  5409   0012E4  6F7E               	movwf	colorDetect@colour_ref& (0+255),b
  5410                           
  5411                           ;MazeRobot.X/color.c: 157:         }
  5412   0012E6  EFF9  F00C         	goto	l5249
  5413   0012EA                     l5147:
  5414   0012EA  0E00               	movlw	0
  5415   0012EC  6E1D               	movwf	___flge@ff1^0,c
  5416   0012EE  0E00               	movlw	0
  5417   0012F0  6E1E               	movwf	(___flge@ff1+1)^0,c
  5418   0012F2  0EC0               	movlw	192
  5419   0012F4  6E1F               	movwf	(___flge@ff1+2)^0,c
  5420   0012F6  0E3F               	movlw	63
  5421   0012F8  6E20               	movwf	(___flge@ff1+3)^0,c
  5422   0012FA  C088  F021         	movff	colorDetect@redPrint,___flge@ff2
  5423   0012FE  C089  F022         	movff	colorDetect@redPrint+1,___flge@ff2+1
  5424   001302  C08A  F023         	movff	colorDetect@redPrint+2,___flge@ff2+2
  5425   001306  C08B  F024         	movff	colorDetect@redPrint+3,___flge@ff2+3
  5426   00130A  ECBD  F01E         	call	___flge	;wreg free
  5427   00130E  B0D8               	btfsc	status,0,c
  5428   001310  EF8C  F009         	goto	u5621
  5429   001314  EF8E  F009         	goto	u5620
  5430   001318                     u5621:
  5431   001318  EF03  F00A         	goto	l5161
  5432   00131C                     u5620:
  5433   00131C  0ECD               	movlw	205
  5434   00131E  6E1D               	movwf	___flge@ff1^0,c
  5435   001320  0ECC               	movlw	204
  5436   001322  6E1E               	movwf	(___flge@ff1+1)^0,c
  5437   001324  0E4C               	movlw	76
  5438   001326  6E1F               	movwf	(___flge@ff1+2)^0,c
  5439   001328  0E3F               	movlw	63
  5440   00132A  6E20               	movwf	(___flge@ff1+3)^0,c
  5441   00132C  C08C  F019         	movff	colorDetect@greenPrint,___flsub@a
  5442   001330  C08D  F01A         	movff	colorDetect@greenPrint+1,___flsub@a+1
  5443   001334  C08E  F01B         	movff	colorDetect@greenPrint+2,___flsub@a+2
  5444   001338  C08F  F01C         	movff	colorDetect@greenPrint+3,___flsub@a+3
  5445   00133C  C088  F015         	movff	colorDetect@redPrint,___flsub@b
  5446   001340  C089  F016         	movff	colorDetect@redPrint+1,___flsub@b+1
  5447   001344  C08A  F017         	movff	colorDetect@redPrint+2,___flsub@b+2
  5448   001348  C08B  F018         	movff	colorDetect@redPrint+3,___flsub@b+3
  5449   00134C  ECBA  F024         	call	___flsub	;wreg free
  5450   001350  C015  F021         	movff	?___flsub,___flge@ff2
  5451   001354  C016  F022         	movff	?___flsub+1,___flge@ff2+1
  5452   001358  C017  F023         	movff	?___flsub+2,___flge@ff2+2
  5453   00135C  C018  F024         	movff	?___flsub+3,___flge@ff2+3
  5454   001360  ECBD  F01E         	call	___flge	;wreg free
  5455   001364  B0D8               	btfsc	status,0,c
  5456   001366  EFB7  F009         	goto	u5631
  5457   00136A  EFB9  F009         	goto	u5630
  5458   00136E                     u5631:
  5459   00136E  EF03  F00A         	goto	l5161
  5460   001372                     u5630:
  5461   001372  0ECD               	movlw	205
  5462   001374  6E1D               	movwf	___flge@ff1^0,c
  5463   001376  0ECC               	movlw	204
  5464   001378  6E1E               	movwf	(___flge@ff1+1)^0,c
  5465   00137A  0E4C               	movlw	76
  5466   00137C  6E1F               	movwf	(___flge@ff1+2)^0,c
  5467   00137E  0E3F               	movlw	63
  5468   001380  6E20               	movwf	(___flge@ff1+3)^0,c
  5469   001382  C090  F019         	movff	colorDetect@bluePrint,___flsub@a
  5470   001386  C091  F01A         	movff	colorDetect@bluePrint+1,___flsub@a+1
  5471   00138A  C092  F01B         	movff	colorDetect@bluePrint+2,___flsub@a+2
  5472   00138E  C093  F01C         	movff	colorDetect@bluePrint+3,___flsub@a+3
  5473   001392  C088  F015         	movff	colorDetect@redPrint,___flsub@b
  5474   001396  C089  F016         	movff	colorDetect@redPrint+1,___flsub@b+1
  5475   00139A  C08A  F017         	movff	colorDetect@redPrint+2,___flsub@b+2
  5476   00139E  C08B  F018         	movff	colorDetect@redPrint+3,___flsub@b+3
  5477   0013A2  ECBA  F024         	call	___flsub	;wreg free
  5478   0013A6  C015  F021         	movff	?___flsub,___flge@ff2
  5479   0013AA  C016  F022         	movff	?___flsub+1,___flge@ff2+1
  5480   0013AE  C017  F023         	movff	?___flsub+2,___flge@ff2+2
  5481   0013B2  C018  F024         	movff	?___flsub+3,___flge@ff2+3
  5482   0013B6  ECBD  F01E         	call	___flge	;wreg free
  5483   0013BA  B0D8               	btfsc	status,0,c
  5484   0013BC  EFE2  F009         	goto	u5641
  5485   0013C0  EFE4  F009         	goto	u5640
  5486   0013C4                     u5641:
  5487   0013C4  EF03  F00A         	goto	l5161
  5488   0013C8                     u5640:
  5489   0013C8                     
  5490                           ;MazeRobot.X/color.c: 161:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5491   0013C8  0E2A               	movlw	42
  5492   0013CA  6E4F               	movwf	??_colorDetect^0,c
  5493   0013CC  0E8E               	movlw	142
  5494   0013CE                     u6217:
  5495   0013CE  2EE8               	decfsz	wreg,f,c
  5496   0013D0  D7FE               	bra	u6217
  5497   0013D2  2E4F               	decfsz	??_colorDetect^0,f,c
  5498   0013D4  D7FC               	bra	u6217
  5499   0013D6                     
  5500                           ;MazeRobot.X/color.c: 162:         turnRight_90(mL,mR);
  5501   0013D6  C068  F01E         	movff	colorDetect@mL,turnRight_90@mL
  5502   0013DA  C069  F01F         	movff	colorDetect@mL+1,turnRight_90@mL+1
  5503   0013DE  C06A  F020         	movff	colorDetect@mR,turnRight_90@mR
  5504   0013E2  C06B  F021         	movff	colorDetect@mR+1,turnRight_90@mR+1
  5505   0013E6  EC43  F01C         	call	_turnRight_90	;wreg free
  5506   0013EA                     
  5507                           ;MazeRobot.X/color.c: 163:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5508   0013EA  0E2A               	movlw	42
  5509   0013EC  6E4F               	movwf	??_colorDetect^0,c
  5510   0013EE  0E8E               	movlw	142
  5511   0013F0                     u6227:
  5512   0013F0  2EE8               	decfsz	wreg,f,c
  5513   0013F2  D7FE               	bra	u6227
  5514   0013F4  2E4F               	decfsz	??_colorDetect^0,f,c
  5515   0013F6  D7FC               	bra	u6227
  5516   0013F8                     
  5517                           ;MazeRobot.X/color.c: 164:         colour_ref = 1;
  5518   0013F8  0E00               	movlw	0
  5519   0013FA  0100               	movlb	0	; () banked
  5520   0013FC  6F7F               	movwf	(colorDetect@colour_ref+1)& (0+255),b
  5521   0013FE  0E01               	movlw	1
  5522   001400  6F7E               	movwf	colorDetect@colour_ref& (0+255),b
  5523                           
  5524                           ;MazeRobot.X/color.c: 166:         }
  5525   001402  EFF9  F00C         	goto	l5249
  5526   001406                     l5161:
  5527   001406  0ECD               	movlw	205
  5528   001408  6E1D               	movwf	___flge@ff1^0,c
  5529   00140A  0ECC               	movlw	204
  5530   00140C  6E1E               	movwf	(___flge@ff1+1)^0,c
  5531   00140E  0ECC               	movlw	204
  5532   001410  6E1F               	movwf	(___flge@ff1+2)^0,c
  5533   001412  0E3E               	movlw	62
  5534   001414  6E20               	movwf	(___flge@ff1+3)^0,c
  5535   001416  C088  F019         	movff	colorDetect@redPrint,___flsub@a
  5536   00141A  C089  F01A         	movff	colorDetect@redPrint+1,___flsub@a+1
  5537   00141E  C08A  F01B         	movff	colorDetect@redPrint+2,___flsub@a+2
  5538   001422  C08B  F01C         	movff	colorDetect@redPrint+3,___flsub@a+3
  5539   001426  C08C  F015         	movff	colorDetect@greenPrint,___flsub@b
  5540   00142A  C08D  F016         	movff	colorDetect@greenPrint+1,___flsub@b+1
  5541   00142E  C08E  F017         	movff	colorDetect@greenPrint+2,___flsub@b+2
  5542   001432  C08F  F018         	movff	colorDetect@greenPrint+3,___flsub@b+3
  5543   001436  ECBA  F024         	call	___flsub	;wreg free
  5544   00143A  C015  F021         	movff	?___flsub,___flge@ff2
  5545   00143E  C016  F022         	movff	?___flsub+1,___flge@ff2+1
  5546   001442  C017  F023         	movff	?___flsub+2,___flge@ff2+2
  5547   001446  C018  F024         	movff	?___flsub+3,___flge@ff2+3
  5548   00144A  ECBD  F01E         	call	___flge	;wreg free
  5549   00144E  B0D8               	btfsc	status,0,c
  5550   001450  EF2C  F00A         	goto	u5651
  5551   001454  EF2E  F00A         	goto	u5650
  5552   001458                     u5651:
  5553   001458  EF91  F00A         	goto	l5175
  5554   00145C                     u5650:
  5555   00145C  0E00               	movlw	0
  5556   00145E  6E1D               	movwf	___flge@ff1^0,c
  5557   001460  0E00               	movlw	0
  5558   001462  6E1E               	movwf	(___flge@ff1+1)^0,c
  5559   001464  0E80               	movlw	128
  5560   001466  6E1F               	movwf	(___flge@ff1+2)^0,c
  5561   001468  0E3F               	movlw	63
  5562   00146A  6E20               	movwf	(___flge@ff1+3)^0,c
  5563   00146C  C08C  F021         	movff	colorDetect@greenPrint,___flge@ff2
  5564   001470  C08D  F022         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  5565   001474  C08E  F023         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  5566   001478  C08F  F024         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  5567   00147C  ECBD  F01E         	call	___flge	;wreg free
  5568   001480  B0D8               	btfsc	status,0,c
  5569   001482  EF45  F00A         	goto	u5661
  5570   001486  EF47  F00A         	goto	u5660
  5571   00148A                     u5661:
  5572   00148A  EF91  F00A         	goto	l5175
  5573   00148E                     u5660:
  5574   00148E  0ECD               	movlw	205
  5575   001490  6E1D               	movwf	___flge@ff1^0,c
  5576   001492  0ECC               	movlw	204
  5577   001494  6E1E               	movwf	(___flge@ff1+1)^0,c
  5578   001496  0ECC               	movlw	204
  5579   001498  6E1F               	movwf	(___flge@ff1+2)^0,c
  5580   00149A  0E3E               	movlw	62
  5581   00149C  6E20               	movwf	(___flge@ff1+3)^0,c
  5582   00149E  C090  F019         	movff	colorDetect@bluePrint,___flsub@a
  5583   0014A2  C091  F01A         	movff	colorDetect@bluePrint+1,___flsub@a+1
  5584   0014A6  C092  F01B         	movff	colorDetect@bluePrint+2,___flsub@a+2
  5585   0014AA  C093  F01C         	movff	colorDetect@bluePrint+3,___flsub@a+3
  5586   0014AE  C08C  F015         	movff	colorDetect@greenPrint,___flsub@b
  5587   0014B2  C08D  F016         	movff	colorDetect@greenPrint+1,___flsub@b+1
  5588   0014B6  C08E  F017         	movff	colorDetect@greenPrint+2,___flsub@b+2
  5589   0014BA  C08F  F018         	movff	colorDetect@greenPrint+3,___flsub@b+3
  5590   0014BE  ECBA  F024         	call	___flsub	;wreg free
  5591   0014C2  C015  F021         	movff	?___flsub,___flge@ff2
  5592   0014C6  C016  F022         	movff	?___flsub+1,___flge@ff2+1
  5593   0014CA  C017  F023         	movff	?___flsub+2,___flge@ff2+2
  5594   0014CE  C018  F024         	movff	?___flsub+3,___flge@ff2+3
  5595   0014D2  ECBD  F01E         	call	___flge	;wreg free
  5596   0014D6  B0D8               	btfsc	status,0,c
  5597   0014D8  EF70  F00A         	goto	u5671
  5598   0014DC  EF72  F00A         	goto	u5670
  5599   0014E0                     u5671:
  5600   0014E0  EF91  F00A         	goto	l5175
  5601   0014E4                     u5670:
  5602   0014E4                     
  5603                           ;MazeRobot.X/color.c: 170:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5604   0014E4  0E2A               	movlw	42
  5605   0014E6  6E4F               	movwf	??_colorDetect^0,c
  5606   0014E8  0E8E               	movlw	142
  5607   0014EA                     u6237:
  5608   0014EA  2EE8               	decfsz	wreg,f,c
  5609   0014EC  D7FE               	bra	u6237
  5610   0014EE  2E4F               	decfsz	??_colorDetect^0,f,c
  5611   0014F0  D7FC               	bra	u6237
  5612   0014F2                     
  5613                           ;MazeRobot.X/color.c: 171:         turnLeft_90(mL,mR);
  5614   0014F2  C068  F01E         	movff	colorDetect@mL,turnLeft_90@mL
  5615   0014F6  C069  F01F         	movff	colorDetect@mL+1,turnLeft_90@mL+1
  5616   0014FA  C06A  F020         	movff	colorDetect@mR,turnLeft_90@mR
  5617   0014FE  C06B  F021         	movff	colorDetect@mR+1,turnLeft_90@mR+1
  5618   001502  ECE2  F01C         	call	_turnLeft_90	;wreg free
  5619   001506                     
  5620                           ;MazeRobot.X/color.c: 172:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5621   001506  0E2A               	movlw	42
  5622   001508  6E4F               	movwf	??_colorDetect^0,c
  5623   00150A  0E8E               	movlw	142
  5624   00150C                     u6247:
  5625   00150C  2EE8               	decfsz	wreg,f,c
  5626   00150E  D7FE               	bra	u6247
  5627   001510  2E4F               	decfsz	??_colorDetect^0,f,c
  5628   001512  D7FC               	bra	u6247
  5629   001514                     
  5630                           ;MazeRobot.X/color.c: 173:         colour_ref = 2;
  5631   001514  0E00               	movlw	0
  5632   001516  0100               	movlb	0	; () banked
  5633   001518  6F7F               	movwf	(colorDetect@colour_ref+1)& (0+255),b
  5634   00151A  0E02               	movlw	2
  5635   00151C  6F7E               	movwf	colorDetect@colour_ref& (0+255),b
  5636                           
  5637                           ;MazeRobot.X/color.c: 174:         }
  5638   00151E  EFF9  F00C         	goto	l5249
  5639   001522                     l5175:
  5640   001522  0E33               	movlw	51
  5641   001524  6E1D               	movwf	___flge@ff1^0,c
  5642   001526  0E33               	movlw	51
  5643   001528  6E1E               	movwf	(___flge@ff1+1)^0,c
  5644   00152A  0E33               	movlw	51
  5645   00152C  6E1F               	movwf	(___flge@ff1+2)^0,c
  5646   00152E  0E3F               	movlw	63
  5647   001530  6E20               	movwf	(___flge@ff1+3)^0,c
  5648   001532  C088  F019         	movff	colorDetect@redPrint,___flsub@a
  5649   001536  C089  F01A         	movff	colorDetect@redPrint+1,___flsub@a+1
  5650   00153A  C08A  F01B         	movff	colorDetect@redPrint+2,___flsub@a+2
  5651   00153E  C08B  F01C         	movff	colorDetect@redPrint+3,___flsub@a+3
  5652   001542  C090  F015         	movff	colorDetect@bluePrint,___flsub@b
  5653   001546  C091  F016         	movff	colorDetect@bluePrint+1,___flsub@b+1
  5654   00154A  C092  F017         	movff	colorDetect@bluePrint+2,___flsub@b+2
  5655   00154E  C093  F018         	movff	colorDetect@bluePrint+3,___flsub@b+3
  5656   001552  ECBA  F024         	call	___flsub	;wreg free
  5657   001556  C015  F021         	movff	?___flsub,___flge@ff2
  5658   00155A  C016  F022         	movff	?___flsub+1,___flge@ff2+1
  5659   00155E  C017  F023         	movff	?___flsub+2,___flge@ff2+2
  5660   001562  C018  F024         	movff	?___flsub+3,___flge@ff2+3
  5661   001566  ECBD  F01E         	call	___flge	;wreg free
  5662   00156A  B0D8               	btfsc	status,0,c
  5663   00156C  EFBA  F00A         	goto	u5681
  5664   001570  EFBC  F00A         	goto	u5680
  5665   001574                     u5681:
  5666   001574  EF1F  F00B         	goto	l5189
  5667   001578                     u5680:
  5668   001578  0E9A               	movlw	154
  5669   00157A  6E1D               	movwf	___flge@ff1^0,c
  5670   00157C  0E99               	movlw	153
  5671   00157E  6E1E               	movwf	(___flge@ff1+1)^0,c
  5672   001580  0E99               	movlw	153
  5673   001582  6E1F               	movwf	(___flge@ff1+2)^0,c
  5674   001584  0E3E               	movlw	62
  5675   001586  6E20               	movwf	(___flge@ff1+3)^0,c
  5676   001588  C08C  F019         	movff	colorDetect@greenPrint,___flsub@a
  5677   00158C  C08D  F01A         	movff	colorDetect@greenPrint+1,___flsub@a+1
  5678   001590  C08E  F01B         	movff	colorDetect@greenPrint+2,___flsub@a+2
  5679   001594  C08F  F01C         	movff	colorDetect@greenPrint+3,___flsub@a+3
  5680   001598  C090  F015         	movff	colorDetect@bluePrint,___flsub@b
  5681   00159C  C091  F016         	movff	colorDetect@bluePrint+1,___flsub@b+1
  5682   0015A0  C092  F017         	movff	colorDetect@bluePrint+2,___flsub@b+2
  5683   0015A4  C093  F018         	movff	colorDetect@bluePrint+3,___flsub@b+3
  5684   0015A8  ECBA  F024         	call	___flsub	;wreg free
  5685   0015AC  C015  F021         	movff	?___flsub,___flge@ff2
  5686   0015B0  C016  F022         	movff	?___flsub+1,___flge@ff2+1
  5687   0015B4  C017  F023         	movff	?___flsub+2,___flge@ff2+2
  5688   0015B8  C018  F024         	movff	?___flsub+3,___flge@ff2+3
  5689   0015BC  ECBD  F01E         	call	___flge	;wreg free
  5690   0015C0  B0D8               	btfsc	status,0,c
  5691   0015C2  EFE5  F00A         	goto	u5691
  5692   0015C6  EFE7  F00A         	goto	u5690
  5693   0015CA                     u5691:
  5694   0015CA  EF1F  F00B         	goto	l5189
  5695   0015CE                     u5690:
  5696   0015CE  0E33               	movlw	51
  5697   0015D0  6E1D               	movwf	___flge@ff1^0,c
  5698   0015D2  0E33               	movlw	51
  5699   0015D4  6E1E               	movwf	(___flge@ff1+1)^0,c
  5700   0015D6  0E33               	movlw	51
  5701   0015D8  6E1F               	movwf	(___flge@ff1+2)^0,c
  5702   0015DA  0E3F               	movlw	63
  5703   0015DC  6E20               	movwf	(___flge@ff1+3)^0,c
  5704   0015DE  C090  F021         	movff	colorDetect@bluePrint,___flge@ff2
  5705   0015E2  C091  F022         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  5706   0015E6  C092  F023         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  5707   0015EA  C093  F024         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  5708   0015EE  ECBD  F01E         	call	___flge	;wreg free
  5709   0015F2  B0D8               	btfsc	status,0,c
  5710   0015F4  EFFE  F00A         	goto	u5701
  5711   0015F8  EF00  F00B         	goto	u5700
  5712   0015FC                     u5701:
  5713   0015FC  EF1F  F00B         	goto	l5189
  5714   001600                     u5700:
  5715   001600                     
  5716                           ;MazeRobot.X/color.c: 178:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5717   001600  0E2A               	movlw	42
  5718   001602  6E4F               	movwf	??_colorDetect^0,c
  5719   001604  0E8E               	movlw	142
  5720   001606                     u6257:
  5721   001606  2EE8               	decfsz	wreg,f,c
  5722   001608  D7FE               	bra	u6257
  5723   00160A  2E4F               	decfsz	??_colorDetect^0,f,c
  5724   00160C  D7FC               	bra	u6257
  5725   00160E                     
  5726                           ;MazeRobot.X/color.c: 179:         turn_180(mL,mR);
  5727   00160E  C068  F01E         	movff	colorDetect@mL,turn_180@mL
  5728   001612  C069  F01F         	movff	colorDetect@mL+1,turn_180@mL+1
  5729   001616  C06A  F020         	movff	colorDetect@mR,turn_180@mR
  5730   00161A  C06B  F021         	movff	colorDetect@mR+1,turn_180@mR+1
  5731   00161E  ECA4  F01B         	call	_turn_180	;wreg free
  5732   001622                     
  5733                           ;MazeRobot.X/color.c: 180:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5734   001622  0E2A               	movlw	42
  5735   001624  6E4F               	movwf	??_colorDetect^0,c
  5736   001626  0E8E               	movlw	142
  5737   001628                     u6267:
  5738   001628  2EE8               	decfsz	wreg,f,c
  5739   00162A  D7FE               	bra	u6267
  5740   00162C  2E4F               	decfsz	??_colorDetect^0,f,c
  5741   00162E  D7FC               	bra	u6267
  5742   001630                     
  5743                           ;MazeRobot.X/color.c: 181:         colour_ref = 3;
  5744   001630  0E00               	movlw	0
  5745   001632  0100               	movlb	0	; () banked
  5746   001634  6F7F               	movwf	(colorDetect@colour_ref+1)& (0+255),b
  5747   001636  0E03               	movlw	3
  5748   001638  6F7E               	movwf	colorDetect@colour_ref& (0+255),b
  5749                           
  5750                           ;MazeRobot.X/color.c: 182:         }
  5751   00163A  EFF9  F00C         	goto	l5249
  5752   00163E                     l5189:
  5753   00163E  0E00               	movlw	0
  5754   001640  6E1D               	movwf	___flge@ff1^0,c
  5755   001642  0E00               	movlw	0
  5756   001644  6E1E               	movwf	(___flge@ff1+1)^0,c
  5757   001646  0E80               	movlw	128
  5758   001648  6E1F               	movwf	(___flge@ff1+2)^0,c
  5759   00164A  0E3F               	movlw	63
  5760   00164C  6E20               	movwf	(___flge@ff1+3)^0,c
  5761   00164E  C088  F021         	movff	colorDetect@redPrint,___flge@ff2
  5762   001652  C089  F022         	movff	colorDetect@redPrint+1,___flge@ff2+1
  5763   001656  C08A  F023         	movff	colorDetect@redPrint+2,___flge@ff2+2
  5764   00165A  C08B  F024         	movff	colorDetect@redPrint+3,___flge@ff2+3
  5765   00165E  ECBD  F01E         	call	___flge	;wreg free
  5766   001662  B0D8               	btfsc	status,0,c
  5767   001664  EF36  F00B         	goto	u5711
  5768   001668  EF38  F00B         	goto	u5710
  5769   00166C                     u5711:
  5770   00166C  EF89  F00B         	goto	l5203
  5771   001670                     u5710:
  5772   001670  0ECD               	movlw	205
  5773   001672  6E1D               	movwf	___flge@ff1^0,c
  5774   001674  0ECC               	movlw	204
  5775   001676  6E1E               	movwf	(___flge@ff1+1)^0,c
  5776   001678  0E4C               	movlw	76
  5777   00167A  6E1F               	movwf	(___flge@ff1+2)^0,c
  5778   00167C  0E3F               	movlw	63
  5779   00167E  6E20               	movwf	(___flge@ff1+3)^0,c
  5780   001680  C08C  F021         	movff	colorDetect@greenPrint,___flge@ff2
  5781   001684  C08D  F022         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  5782   001688  C08E  F023         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  5783   00168C  C08F  F024         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  5784   001690  ECBD  F01E         	call	___flge	;wreg free
  5785   001694  B0D8               	btfsc	status,0,c
  5786   001696  EF4F  F00B         	goto	u5721
  5787   00169A  EF51  F00B         	goto	u5720
  5788   00169E                     u5721:
  5789   00169E  EF89  F00B         	goto	l5203
  5790   0016A2                     u5720:
  5791   0016A2  C090  F01D         	movff	colorDetect@bluePrint,___flge@ff1
  5792   0016A6  C091  F01E         	movff	colorDetect@bluePrint+1,___flge@ff1+1
  5793   0016AA  C092  F01F         	movff	colorDetect@bluePrint+2,___flge@ff1+2
  5794   0016AE  C093  F020         	movff	colorDetect@bluePrint+3,___flge@ff1+3
  5795   0016B2  0ECD               	movlw	205
  5796   0016B4  6E21               	movwf	___flge@ff2^0,c
  5797   0016B6  0ECC               	movlw	204
  5798   0016B8  6E22               	movwf	(___flge@ff2+1)^0,c
  5799   0016BA  0E4C               	movlw	76
  5800   0016BC  6E23               	movwf	(___flge@ff2+2)^0,c
  5801   0016BE  0E3F               	movlw	63
  5802   0016C0  6E24               	movwf	(___flge@ff2+3)^0,c
  5803   0016C2  ECBD  F01E         	call	___flge	;wreg free
  5804   0016C6  B0D8               	btfsc	status,0,c
  5805   0016C8  EF68  F00B         	goto	u5731
  5806   0016CC  EF6A  F00B         	goto	u5730
  5807   0016D0                     u5731:
  5808   0016D0  EF89  F00B         	goto	l5203
  5809   0016D4                     u5730:
  5810   0016D4                     
  5811                           ;MazeRobot.X/color.c: 187:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5812   0016D4  0E2A               	movlw	42
  5813   0016D6  6E4F               	movwf	??_colorDetect^0,c
  5814   0016D8  0E8E               	movlw	142
  5815   0016DA                     u6277:
  5816   0016DA  2EE8               	decfsz	wreg,f,c
  5817   0016DC  D7FE               	bra	u6277
  5818   0016DE  2E4F               	decfsz	??_colorDetect^0,f,c
  5819   0016E0  D7FC               	bra	u6277
  5820   0016E2                     
  5821                           ;MazeRobot.X/color.c: 188:         reverseSquareRight(mL,mR);
  5822   0016E2  C068  F024         	movff	colorDetect@mL,reverseSquareRight@mL
  5823   0016E6  C069  F025         	movff	colorDetect@mL+1,reverseSquareRight@mL+1
  5824   0016EA  C06A  F026         	movff	colorDetect@mR,reverseSquareRight@mR
  5825   0016EE  C06B  F027         	movff	colorDetect@mR+1,reverseSquareRight@mR+1
  5826   0016F2  EC1E  F022         	call	_reverseSquareRight	;wreg free
  5827   0016F6                     
  5828                           ;MazeRobot.X/color.c: 189:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5829   0016F6  0E2A               	movlw	42
  5830   0016F8  6E4F               	movwf	??_colorDetect^0,c
  5831   0016FA  0E8E               	movlw	142
  5832   0016FC                     u6287:
  5833   0016FC  2EE8               	decfsz	wreg,f,c
  5834   0016FE  D7FE               	bra	u6287
  5835   001700  2E4F               	decfsz	??_colorDetect^0,f,c
  5836   001702  D7FC               	bra	u6287
  5837   001704                     
  5838                           ;MazeRobot.X/color.c: 190:         colour_ref = 4;
  5839   001704  0E00               	movlw	0
  5840   001706  0100               	movlb	0	; () banked
  5841   001708  6F7F               	movwf	(colorDetect@colour_ref+1)& (0+255),b
  5842   00170A  0E04               	movlw	4
  5843   00170C  6F7E               	movwf	colorDetect@colour_ref& (0+255),b
  5844                           
  5845                           ;MazeRobot.X/color.c: 191:         }
  5846   00170E  EFF9  F00C         	goto	l5249
  5847   001712                     l5203:
  5848   001712  0E33               	movlw	51
  5849   001714  6E1D               	movwf	___flge@ff1^0,c
  5850   001716  0E33               	movlw	51
  5851   001718  6E1E               	movwf	(___flge@ff1+1)^0,c
  5852   00171A  0E73               	movlw	115
  5853   00171C  6E1F               	movwf	(___flge@ff1+2)^0,c
  5854   00171E  0E3F               	movlw	63
  5855   001720  6E20               	movwf	(___flge@ff1+3)^0,c
  5856   001722  C088  F021         	movff	colorDetect@redPrint,___flge@ff2
  5857   001726  C089  F022         	movff	colorDetect@redPrint+1,___flge@ff2+1
  5858   00172A  C08A  F023         	movff	colorDetect@redPrint+2,___flge@ff2+2
  5859   00172E  C08B  F024         	movff	colorDetect@redPrint+3,___flge@ff2+3
  5860   001732  ECBD  F01E         	call	___flge	;wreg free
  5861   001736  B0D8               	btfsc	status,0,c
  5862   001738  EFA0  F00B         	goto	u5741
  5863   00173C  EFA2  F00B         	goto	u5740
  5864   001740                     u5741:
  5865   001740  EF25  F00C         	goto	l5221
  5866   001744                     u5740:
  5867   001744  0ECD               	movlw	205
  5868   001746  6E1D               	movwf	___flge@ff1^0,c
  5869   001748  0ECC               	movlw	204
  5870   00174A  6E1E               	movwf	(___flge@ff1+1)^0,c
  5871   00174C  0E4C               	movlw	76
  5872   00174E  6E1F               	movwf	(___flge@ff1+2)^0,c
  5873   001750  0E3F               	movlw	63
  5874   001752  6E20               	movwf	(___flge@ff1+3)^0,c
  5875   001754  C08C  F021         	movff	colorDetect@greenPrint,___flge@ff2
  5876   001758  C08D  F022         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  5877   00175C  C08E  F023         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  5878   001760  C08F  F024         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  5879   001764  ECBD  F01E         	call	___flge	;wreg free
  5880   001768  B0D8               	btfsc	status,0,c
  5881   00176A  EFB9  F00B         	goto	u5751
  5882   00176E  EFBB  F00B         	goto	u5750
  5883   001772                     u5751:
  5884   001772  EF25  F00C         	goto	l5221
  5885   001776                     u5750:
  5886   001776  C08C  F01D         	movff	colorDetect@greenPrint,___flge@ff1
  5887   00177A  C08D  F01E         	movff	colorDetect@greenPrint+1,___flge@ff1+1
  5888   00177E  C08E  F01F         	movff	colorDetect@greenPrint+2,___flge@ff1+2
  5889   001782  C08F  F020         	movff	colorDetect@greenPrint+3,___flge@ff1+3
  5890   001786  0E66               	movlw	102
  5891   001788  6E21               	movwf	___flge@ff2^0,c
  5892   00178A  0E66               	movlw	102
  5893   00178C  6E22               	movwf	(___flge@ff2+1)^0,c
  5894   00178E  0E66               	movlw	102
  5895   001790  6E23               	movwf	(___flge@ff2+2)^0,c
  5896   001792  0E3F               	movlw	63
  5897   001794  6E24               	movwf	(___flge@ff2+3)^0,c
  5898   001796  ECBD  F01E         	call	___flge	;wreg free
  5899   00179A  B0D8               	btfsc	status,0,c
  5900   00179C  EFD2  F00B         	goto	u5761
  5901   0017A0  EFD4  F00B         	goto	u5760
  5902   0017A4                     u5761:
  5903   0017A4  EF25  F00C         	goto	l5221
  5904   0017A8                     u5760:
  5905   0017A8  0ECD               	movlw	205
  5906   0017AA  6E1D               	movwf	___flge@ff1^0,c
  5907   0017AC  0ECC               	movlw	204
  5908   0017AE  6E1E               	movwf	(___flge@ff1+1)^0,c
  5909   0017B0  0E4C               	movlw	76
  5910   0017B2  6E1F               	movwf	(___flge@ff1+2)^0,c
  5911   0017B4  0E3F               	movlw	63
  5912   0017B6  6E20               	movwf	(___flge@ff1+3)^0,c
  5913   0017B8  C090  F021         	movff	colorDetect@bluePrint,___flge@ff2
  5914   0017BC  C091  F022         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  5915   0017C0  C092  F023         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  5916   0017C4  C093  F024         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  5917   0017C8  ECBD  F01E         	call	___flge	;wreg free
  5918   0017CC  B0D8               	btfsc	status,0,c
  5919   0017CE  EFEB  F00B         	goto	u5771
  5920   0017D2  EFED  F00B         	goto	u5770
  5921   0017D6                     u5771:
  5922   0017D6  EF25  F00C         	goto	l5221
  5923   0017DA                     u5770:
  5924   0017DA  C090  F01D         	movff	colorDetect@bluePrint,___flge@ff1
  5925   0017DE  C091  F01E         	movff	colorDetect@bluePrint+1,___flge@ff1+1
  5926   0017E2  C092  F01F         	movff	colorDetect@bluePrint+2,___flge@ff1+2
  5927   0017E6  C093  F020         	movff	colorDetect@bluePrint+3,___flge@ff1+3
  5928   0017EA  0E33               	movlw	51
  5929   0017EC  6E21               	movwf	___flge@ff2^0,c
  5930   0017EE  0E33               	movlw	51
  5931   0017F0  6E22               	movwf	(___flge@ff2+1)^0,c
  5932   0017F2  0E73               	movlw	115
  5933   0017F4  6E23               	movwf	(___flge@ff2+2)^0,c
  5934   0017F6  0E3F               	movlw	63
  5935   0017F8  6E24               	movwf	(___flge@ff2+3)^0,c
  5936   0017FA  ECBD  F01E         	call	___flge	;wreg free
  5937   0017FE  B0D8               	btfsc	status,0,c
  5938   001800  EF04  F00C         	goto	u5781
  5939   001804  EF06  F00C         	goto	u5780
  5940   001808                     u5781:
  5941   001808  EF25  F00C         	goto	l5221
  5942   00180C                     u5780:
  5943   00180C                     
  5944                           ;MazeRobot.X/color.c: 195:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5945   00180C  0E2A               	movlw	42
  5946   00180E  6E4F               	movwf	??_colorDetect^0,c
  5947   001810  0E8E               	movlw	142
  5948   001812                     u6297:
  5949   001812  2EE8               	decfsz	wreg,f,c
  5950   001814  D7FE               	bra	u6297
  5951   001816  2E4F               	decfsz	??_colorDetect^0,f,c
  5952   001818  D7FC               	bra	u6297
  5953   00181A                     
  5954                           ;MazeRobot.X/color.c: 196:         reverseSquareLeft(mL,mR);
  5955   00181A  C068  F024         	movff	colorDetect@mL,reverseSquareLeft@mL
  5956   00181E  C069  F025         	movff	colorDetect@mL+1,reverseSquareLeft@mL+1
  5957   001822  C06A  F026         	movff	colorDetect@mR,reverseSquareLeft@mR
  5958   001826  C06B  F027         	movff	colorDetect@mR+1,reverseSquareLeft@mR+1
  5959   00182A  EC69  F022         	call	_reverseSquareLeft	;wreg free
  5960   00182E                     
  5961                           ;MazeRobot.X/color.c: 197:         _delay((unsigned long)((2)*(64000000/4000.0)));
  5962   00182E  0E2A               	movlw	42
  5963   001830  6E4F               	movwf	??_colorDetect^0,c
  5964   001832  0E8E               	movlw	142
  5965   001834                     u6307:
  5966   001834  2EE8               	decfsz	wreg,f,c
  5967   001836  D7FE               	bra	u6307
  5968   001838  2E4F               	decfsz	??_colorDetect^0,f,c
  5969   00183A  D7FC               	bra	u6307
  5970   00183C                     
  5971                           ;MazeRobot.X/color.c: 198:         colour_ref = 5;
  5972   00183C  0E00               	movlw	0
  5973   00183E  0100               	movlb	0	; () banked
  5974   001840  6F7F               	movwf	(colorDetect@colour_ref+1)& (0+255),b
  5975   001842  0E05               	movlw	5
  5976   001844  6F7E               	movwf	colorDetect@colour_ref& (0+255),b
  5977                           
  5978                           ;MazeRobot.X/color.c: 199:         }
  5979   001846  EFF9  F00C         	goto	l5249
  5980   00184A                     l5221:
  5981   00184A  0E66               	movlw	102
  5982   00184C  6E1D               	movwf	___flge@ff1^0,c
  5983   00184E  0E66               	movlw	102
  5984   001850  6E1E               	movwf	(___flge@ff1+1)^0,c
  5985   001852  0EA6               	movlw	166
  5986   001854  6E1F               	movwf	(___flge@ff1+2)^0,c
  5987   001856  0E3F               	movlw	63
  5988   001858  6E20               	movwf	(___flge@ff1+3)^0,c
  5989   00185A  C088  F021         	movff	colorDetect@redPrint,___flge@ff2
  5990   00185E  C089  F022         	movff	colorDetect@redPrint+1,___flge@ff2+1
  5991   001862  C08A  F023         	movff	colorDetect@redPrint+2,___flge@ff2+2
  5992   001866  C08B  F024         	movff	colorDetect@redPrint+3,___flge@ff2+3
  5993   00186A  ECBD  F01E         	call	___flge	;wreg free
  5994   00186E  B0D8               	btfsc	status,0,c
  5995   001870  EF3C  F00C         	goto	u5791
  5996   001874  EF3E  F00C         	goto	u5790
  5997   001878                     u5791:
  5998   001878  EF8F  F00C         	goto	l5235
  5999   00187C                     u5790:
  6000   00187C  0E00               	movlw	0
  6001   00187E  6E1D               	movwf	___flge@ff1^0,c
  6002   001880  0E00               	movlw	0
  6003   001882  6E1E               	movwf	(___flge@ff1+1)^0,c
  6004   001884  0E00               	movlw	0
  6005   001886  6E1F               	movwf	(___flge@ff1+2)^0,c
  6006   001888  0E3F               	movlw	63
  6007   00188A  6E20               	movwf	(___flge@ff1+3)^0,c
  6008   00188C  C08C  F021         	movff	colorDetect@greenPrint,___flge@ff2
  6009   001890  C08D  F022         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  6010   001894  C08E  F023         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  6011   001898  C08F  F024         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  6012   00189C  ECBD  F01E         	call	___flge	;wreg free
  6013   0018A0  B0D8               	btfsc	status,0,c
  6014   0018A2  EF55  F00C         	goto	u5801
  6015   0018A6  EF57  F00C         	goto	u5800
  6016   0018AA                     u5801:
  6017   0018AA  EF8F  F00C         	goto	l5235
  6018   0018AE                     u5800:
  6019   0018AE  0E00               	movlw	0
  6020   0018B0  6E1D               	movwf	___flge@ff1^0,c
  6021   0018B2  0E00               	movlw	0
  6022   0018B4  6E1E               	movwf	(___flge@ff1+1)^0,c
  6023   0018B6  0E00               	movlw	0
  6024   0018B8  6E1F               	movwf	(___flge@ff1+2)^0,c
  6025   0018BA  0E3F               	movlw	63
  6026   0018BC  6E20               	movwf	(___flge@ff1+3)^0,c
  6027   0018BE  C090  F021         	movff	colorDetect@bluePrint,___flge@ff2
  6028   0018C2  C091  F022         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  6029   0018C6  C092  F023         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  6030   0018CA  C093  F024         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  6031   0018CE  ECBD  F01E         	call	___flge	;wreg free
  6032   0018D2  B0D8               	btfsc	status,0,c
  6033   0018D4  EF6E  F00C         	goto	u5811
  6034   0018D8  EF70  F00C         	goto	u5810
  6035   0018DC                     u5811:
  6036   0018DC  EF8F  F00C         	goto	l5235
  6037   0018E0                     u5810:
  6038   0018E0                     
  6039                           ;MazeRobot.X/color.c: 203:         _delay((unsigned long)((2)*(64000000/4000.0)));
  6040   0018E0  0E2A               	movlw	42
  6041   0018E2  6E4F               	movwf	??_colorDetect^0,c
  6042   0018E4  0E8E               	movlw	142
  6043   0018E6                     u6317:
  6044   0018E6  2EE8               	decfsz	wreg,f,c
  6045   0018E8  D7FE               	bra	u6317
  6046   0018EA  2E4F               	decfsz	??_colorDetect^0,f,c
  6047   0018EC  D7FC               	bra	u6317
  6048   0018EE                     
  6049                           ;MazeRobot.X/color.c: 204:         turnRight_135(mL,mR);
  6050   0018EE  C068  F01E         	movff	colorDetect@mL,turnRight_135@mL
  6051   0018F2  C069  F01F         	movff	colorDetect@mL+1,turnRight_135@mL+1
  6052   0018F6  C06A  F020         	movff	colorDetect@mR,turnRight_135@mR
  6053   0018FA  C06B  F021         	movff	colorDetect@mR+1,turnRight_135@mR+1
  6054   0018FE  EC81  F01D         	call	_turnRight_135	;wreg free
  6055   001902                     
  6056                           ;MazeRobot.X/color.c: 205:         _delay((unsigned long)((2)*(64000000/4000.0)));
  6057   001902  0E2A               	movlw	42
  6058   001904  6E4F               	movwf	??_colorDetect^0,c
  6059   001906  0E8E               	movlw	142
  6060   001908                     u6327:
  6061   001908  2EE8               	decfsz	wreg,f,c
  6062   00190A  D7FE               	bra	u6327
  6063   00190C  2E4F               	decfsz	??_colorDetect^0,f,c
  6064   00190E  D7FC               	bra	u6327
  6065   001910                     
  6066                           ;MazeRobot.X/color.c: 206:         colour_ref = 6;
  6067   001910  0E00               	movlw	0
  6068   001912  0100               	movlb	0	; () banked
  6069   001914  6F7F               	movwf	(colorDetect@colour_ref+1)& (0+255),b
  6070   001916  0E06               	movlw	6
  6071   001918  6F7E               	movwf	colorDetect@colour_ref& (0+255),b
  6072                           
  6073                           ;MazeRobot.X/color.c: 208:         }
  6074   00191A  EFF9  F00C         	goto	l5249
  6075   00191E                     l5235:
  6076   00191E  C088  F01D         	movff	colorDetect@redPrint,___flge@ff1
  6077   001922  C089  F01E         	movff	colorDetect@redPrint+1,___flge@ff1+1
  6078   001926  C08A  F01F         	movff	colorDetect@redPrint+2,___flge@ff1+2
  6079   00192A  C08B  F020         	movff	colorDetect@redPrint+3,___flge@ff1+3
  6080   00192E  0E33               	movlw	51
  6081   001930  6E21               	movwf	___flge@ff2^0,c
  6082   001932  0E33               	movlw	51
  6083   001934  6E22               	movwf	(___flge@ff2+1)^0,c
  6084   001936  0E33               	movlw	51
  6085   001938  6E23               	movwf	(___flge@ff2+2)^0,c
  6086   00193A  0E3F               	movlw	63
  6087   00193C  6E24               	movwf	(___flge@ff2+3)^0,c
  6088   00193E  ECBD  F01E         	call	___flge	;wreg free
  6089   001942  B0D8               	btfsc	status,0,c
  6090   001944  EFA6  F00C         	goto	u5821
  6091   001948  EFA8  F00C         	goto	u5820
  6092   00194C                     u5821:
  6093   00194C  EFF9  F00C         	goto	l110
  6094   001950                     u5820:
  6095   001950  0E00               	movlw	0
  6096   001952  6E1D               	movwf	___flge@ff1^0,c
  6097   001954  0E00               	movlw	0
  6098   001956  6E1E               	movwf	(___flge@ff1+1)^0,c
  6099   001958  0E80               	movlw	128
  6100   00195A  6E1F               	movwf	(___flge@ff1+2)^0,c
  6101   00195C  0E3F               	movlw	63
  6102   00195E  6E20               	movwf	(___flge@ff1+3)^0,c
  6103   001960  C08C  F021         	movff	colorDetect@greenPrint,___flge@ff2
  6104   001964  C08D  F022         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  6105   001968  C08E  F023         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  6106   00196C  C08F  F024         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  6107   001970  ECBD  F01E         	call	___flge	;wreg free
  6108   001974  B0D8               	btfsc	status,0,c
  6109   001976  EFBF  F00C         	goto	u5831
  6110   00197A  EFC1  F00C         	goto	u5830
  6111   00197E                     u5831:
  6112   00197E  EFF9  F00C         	goto	l110
  6113   001982                     u5830:
  6114   001982  0E00               	movlw	0
  6115   001984  6E1D               	movwf	___flge@ff1^0,c
  6116   001986  0E00               	movlw	0
  6117   001988  6E1E               	movwf	(___flge@ff1+1)^0,c
  6118   00198A  0E80               	movlw	128
  6119   00198C  6E1F               	movwf	(___flge@ff1+2)^0,c
  6120   00198E  0E3F               	movlw	63
  6121   001990  6E20               	movwf	(___flge@ff1+3)^0,c
  6122   001992  C090  F021         	movff	colorDetect@bluePrint,___flge@ff2
  6123   001996  C091  F022         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  6124   00199A  C092  F023         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  6125   00199E  C093  F024         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  6126   0019A2  ECBD  F01E         	call	___flge	;wreg free
  6127   0019A6  B0D8               	btfsc	status,0,c
  6128   0019A8  EFD8  F00C         	goto	u5841
  6129   0019AC  EFDA  F00C         	goto	u5840
  6130   0019B0                     u5841:
  6131   0019B0  EFF9  F00C         	goto	l110
  6132   0019B4                     u5840:
  6133   0019B4                     
  6134                           ;MazeRobot.X/color.c: 212:         _delay((unsigned long)((2)*(64000000/4000.0)));
  6135   0019B4  0E2A               	movlw	42
  6136   0019B6  6E4F               	movwf	??_colorDetect^0,c
  6137   0019B8  0E8E               	movlw	142
  6138   0019BA                     u6337:
  6139   0019BA  2EE8               	decfsz	wreg,f,c
  6140   0019BC  D7FE               	bra	u6337
  6141   0019BE  2E4F               	decfsz	??_colorDetect^0,f,c
  6142   0019C0  D7FC               	bra	u6337
  6143   0019C2                     
  6144                           ;MazeRobot.X/color.c: 213:         turnLeft_135(mL,mR);
  6145   0019C2  C068  F01E         	movff	colorDetect@mL,turnLeft_135@mL
  6146   0019C6  C069  F01F         	movff	colorDetect@mL+1,turnLeft_135@mL+1
  6147   0019CA  C06A  F020         	movff	colorDetect@mR,turnLeft_135@mR
  6148   0019CE  C06B  F021         	movff	colorDetect@mR+1,turnLeft_135@mR+1
  6149   0019D2  EC1F  F01E         	call	_turnLeft_135	;wreg free
  6150   0019D6                     
  6151                           ;MazeRobot.X/color.c: 214:         _delay((unsigned long)((2)*(64000000/4000.0)));
  6152   0019D6  0E2A               	movlw	42
  6153   0019D8  6E4F               	movwf	??_colorDetect^0,c
  6154   0019DA  0E8E               	movlw	142
  6155   0019DC                     u6347:
  6156   0019DC  2EE8               	decfsz	wreg,f,c
  6157   0019DE  D7FE               	bra	u6347
  6158   0019E0  2E4F               	decfsz	??_colorDetect^0,f,c
  6159   0019E2  D7FC               	bra	u6347
  6160   0019E4                     
  6161                           ;MazeRobot.X/color.c: 215:         colour_ref = 7;
  6162   0019E4  0E00               	movlw	0
  6163   0019E6  0100               	movlb	0	; () banked
  6164   0019E8  6F7F               	movwf	(colorDetect@colour_ref+1)& (0+255),b
  6165   0019EA  0E07               	movlw	7
  6166   0019EC  6F7E               	movwf	colorDetect@colour_ref& (0+255),b
  6167   0019EE  EFF9  F00C         	goto	l5249
  6168   0019F2                     l110:
  6169   0019F2                     l5249:
  6170                           
  6171                           ;MazeRobot.X/color.c: 219:         return colour_ref;
  6172   0019F2  C07E  F060         	movff	colorDetect@colour_ref,?_colorDetect
  6173   0019F6  C07F  F061         	movff	colorDetect@colour_ref+1,?_colorDetect+1
  6174   0019FA  0012               	return		;funcret
  6175   0019FC                     __end_of_colorDetect:
  6176                           	callstack 0
  6177                           
  6178 ;; *************** function _turn_180 *****************
  6179 ;; Defined at:
  6180 ;;		line 297 in file "MazeRobot.X/dc_motor.c"
  6181 ;; Parameters:    Size  Location     Type
  6182 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  6183 ;;		 -> main@motorLeft(9), 
  6184 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  6185 ;;		 -> main@motorRight(9), 
  6186 ;; Auto vars:     Size  Location     Type
  6187 ;;		None
  6188 ;; Return value:  Size  Location     Type
  6189 ;;                  1    wreg      void 
  6190 ;; Registers used:
  6191 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6192 ;; Tracked objects:
  6193 ;;		On entry : 0/0
  6194 ;;		On exit  : 0/0
  6195 ;;		Unchanged: 0/0
  6196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6197 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6198 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6199 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6200 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6201 ;;Total ram usage:        6 bytes
  6202 ;; Hardware stack levels used: 1
  6203 ;; Hardware stack levels required when called: 5
  6204 ;; This function calls:
  6205 ;;		_reverse
  6206 ;;		_setMotorPWM
  6207 ;;		_stop
  6208 ;; This function is called by:
  6209 ;;		_colorDetect
  6210 ;;		_return_home_turns
  6211 ;;		_main
  6212 ;; This function uses a non-reentrant model
  6213 ;;
  6214                           
  6215                           	psect	text25
  6216   003748                     __ptext25:
  6217                           	callstack 0
  6218   003748                     _turn_180:
  6219                           	callstack 25
  6220   003748                     
  6221                           ;MazeRobot.X/dc_motor.c: 297: void turn_180(DC_motor *mL, DC_motor *mR);MazeRobot.X/dc_m
      +                          otor.c: 298: {;MazeRobot.X/dc_motor.c: 300:     stop(mL, mR);
  6222   003748  C01E  F018         	movff	turn_180@mL,stop@mL
  6223   00374C  C01F  F019         	movff	turn_180@mL+1,stop@mL+1
  6224   003750  C020  F01A         	movff	turn_180@mR,stop@mR
  6225   003754  C021  F01B         	movff	turn_180@mR+1,stop@mR+1
  6226   003758  ECC7  F021         	call	_stop	;wreg free
  6227   00375C                     
  6228                           ;MazeRobot.X/dc_motor.c: 301:     _delay((unsigned long)((100)*(64000000/4000.0)));
  6229   00375C  0E09               	movlw	9
  6230   00375E  6E23               	movwf	(??_turn_180+1)^0,c
  6231   003760  0E1E               	movlw	30
  6232   003762  6E22               	movwf	??_turn_180^0,c
  6233   003764  0EE4               	movlw	228
  6234   003766                     u6357:
  6235   003766  2EE8               	decfsz	wreg,f,c
  6236   003768  D7FE               	bra	u6357
  6237   00376A  2E22               	decfsz	??_turn_180^0,f,c
  6238   00376C  D7FC               	bra	u6357
  6239   00376E  2E23               	decfsz	(??_turn_180+1)^0,f,c
  6240   003770  D7FA               	bra	u6357
  6241   003772  D000               	nop2	
  6242   003774                     
  6243                           ;MazeRobot.X/dc_motor.c: 303:     reverse(mL, mR);
  6244   003774  C01E  F018         	movff	turn_180@mL,reverse@mL
  6245   003778  C01F  F019         	movff	turn_180@mL+1,reverse@mL+1
  6246   00377C  C020  F01A         	movff	turn_180@mR,reverse@mR
  6247   003780  C021  F01B         	movff	turn_180@mR+1,reverse@mR+1
  6248   003784  EC8E  F020         	call	_reverse	;wreg free
  6249                           
  6250                           ;MazeRobot.X/dc_motor.c: 304:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  6251   003788  0E35               	movlw	53
  6252   00378A  6E23               	movwf	(??_turn_180+1)^0,c
  6253   00378C  0EC3               	movlw	195
  6254   00378E  6E22               	movwf	??_turn_180^0,c
  6255   003790  0E59               	movlw	89
  6256   003792                     u6367:
  6257   003792  2EE8               	decfsz	wreg,f,c
  6258   003794  D7FE               	bra	u6367
  6259   003796  2E22               	decfsz	??_turn_180^0,f,c
  6260   003798  D7FC               	bra	u6367
  6261   00379A  2E23               	decfsz	(??_turn_180+1)^0,f,c
  6262   00379C  D7FA               	bra	u6367
  6263   00379E  F000               	nop	
  6264   0037A0                     
  6265                           ;MazeRobot.X/dc_motor.c: 306:     stop(mL, mR);
  6266   0037A0  C01E  F018         	movff	turn_180@mL,stop@mL
  6267   0037A4  C01F  F019         	movff	turn_180@mL+1,stop@mL+1
  6268   0037A8  C020  F01A         	movff	turn_180@mR,stop@mR
  6269   0037AC  C021  F01B         	movff	turn_180@mR+1,stop@mR+1
  6270   0037B0  ECC7  F021         	call	_stop	;wreg free
  6271   0037B4                     
  6272                           ;MazeRobot.X/dc_motor.c: 308:     mL->direction = 1;
  6273   0037B4  EE20 F001          	lfsr	2,1
  6274   0037B8  501E               	movf	turn_180@mL^0,w,c
  6275   0037BA  26D9               	addwf	fsr2l,f,c
  6276   0037BC  501F               	movf	(turn_180@mL+1)^0,w,c
  6277   0037BE  22DA               	addwfc	fsr2h,f,c
  6278   0037C0  0E01               	movlw	1
  6279   0037C2  6EDF               	movwf	indf2,c
  6280   0037C4                     
  6281                           ;MazeRobot.X/dc_motor.c: 309:     mR->direction = 0;
  6282   0037C4  EE20 F001          	lfsr	2,1
  6283   0037C8  5020               	movf	turn_180@mR^0,w,c
  6284   0037CA  26D9               	addwf	fsr2l,f,c
  6285   0037CC  5021               	movf	(turn_180@mR+1)^0,w,c
  6286   0037CE  22DA               	addwfc	fsr2h,f,c
  6287   0037D0  0E00               	movlw	0
  6288   0037D2  6EDF               	movwf	indf2,c
  6289   0037D4                     
  6290                           ;MazeRobot.X/dc_motor.c: 311:     mL->brakemode = 1;
  6291   0037D4  EE20 F002          	lfsr	2,2
  6292   0037D8  501E               	movf	turn_180@mL^0,w,c
  6293   0037DA  26D9               	addwf	fsr2l,f,c
  6294   0037DC  501F               	movf	(turn_180@mL+1)^0,w,c
  6295   0037DE  22DA               	addwfc	fsr2h,f,c
  6296   0037E0  0E01               	movlw	1
  6297   0037E2  6EDF               	movwf	indf2,c
  6298   0037E4                     
  6299                           ;MazeRobot.X/dc_motor.c: 312:     mL->brakemode = 1;
  6300   0037E4  EE20 F002          	lfsr	2,2
  6301   0037E8  501E               	movf	turn_180@mL^0,w,c
  6302   0037EA  26D9               	addwf	fsr2l,f,c
  6303   0037EC  501F               	movf	(turn_180@mL+1)^0,w,c
  6304   0037EE  22DA               	addwfc	fsr2h,f,c
  6305   0037F0  0E01               	movlw	1
  6306   0037F2  6EDF               	movwf	indf2,c
  6307                           
  6308                           ;MazeRobot.X/dc_motor.c: 314:     while((mL->power < 80) || (mR->power < 80)){
  6309   0037F4  EF14  F01C         	goto	l3777
  6310   0037F8                     l3771:
  6311                           
  6312                           ;MazeRobot.X/dc_motor.c: 315:         mL->power += 10;
  6313   0037F8  C01E  FFD9         	movff	turn_180@mL,fsr2l
  6314   0037FC  C01F  FFDA         	movff	turn_180@mL+1,fsr2h
  6315   003800  0E0A               	movlw	10
  6316   003802  26DF               	addwf	indf2,f,c
  6317                           
  6318                           ;MazeRobot.X/dc_motor.c: 316:         mR->power += 10;
  6319   003804  C020  FFD9         	movff	turn_180@mR,fsr2l
  6320   003808  C021  FFDA         	movff	turn_180@mR+1,fsr2h
  6321   00380C  0E0A               	movlw	10
  6322   00380E  26DF               	addwf	indf2,f,c
  6323   003810                     
  6324                           ;MazeRobot.X/dc_motor.c: 317:         setMotorPWM(mL);
  6325   003810  C01E  F012         	movff	turn_180@mL,setMotorPWM@m
  6326   003814  C01F  F013         	movff	turn_180@mL+1,setMotorPWM@m+1
  6327   003818  EC8D  F019         	call	_setMotorPWM	;wreg free
  6328   00381C                     
  6329                           ;MazeRobot.X/dc_motor.c: 318:         setMotorPWM(mR);
  6330   00381C  C020  F012         	movff	turn_180@mR,setMotorPWM@m
  6331   003820  C021  F013         	movff	turn_180@mR+1,setMotorPWM@m+1
  6332   003824  EC8D  F019         	call	_setMotorPWM	;wreg free
  6333   003828                     l3777:
  6334                           
  6335                           ;MazeRobot.X/dc_motor.c: 314:     while((mL->power < 80) || (mR->power < 80)){
  6336   003828  C01E  FFD9         	movff	turn_180@mL,fsr2l
  6337   00382C  C01F  FFDA         	movff	turn_180@mL+1,fsr2h
  6338   003830  0E4F               	movlw	79
  6339   003832  64DF               	cpfsgt	indf2,c
  6340   003834  EF1E  F01C         	goto	u3601
  6341   003838  EF20  F01C         	goto	u3600
  6342   00383C                     u3601:
  6343   00383C  EFFC  F01B         	goto	l3771
  6344   003840                     u3600:
  6345   003840  C020  FFD9         	movff	turn_180@mR,fsr2l
  6346   003844  C021  FFDA         	movff	turn_180@mR+1,fsr2h
  6347   003848  0E4F               	movlw	79
  6348   00384A  64DF               	cpfsgt	indf2,c
  6349   00384C  EF2A  F01C         	goto	u3611
  6350   003850  EF2C  F01C         	goto	u3610
  6351   003854                     u3611:
  6352   003854  EFFC  F01B         	goto	l3771
  6353   003858                     u3610:
  6354   003858                     
  6355                           ;MazeRobot.X/dc_motor.c: 320:    _delay((unsigned long)((1.75*turning_time45)*(64000000/
      +                          4000.0)));
  6356   003858  0E18               	movlw	24
  6357   00385A  6E23               	movwf	(??_turn_180+1)^0,c
  6358   00385C  0E70               	movlw	112
  6359   00385E  6E22               	movwf	??_turn_180^0,c
  6360   003860  0EEE               	movlw	238
  6361   003862                     u6377:
  6362   003862  2EE8               	decfsz	wreg,f,c
  6363   003864  D7FE               	bra	u6377
  6364   003866  2E22               	decfsz	??_turn_180^0,f,c
  6365   003868  D7FC               	bra	u6377
  6366   00386A  2E23               	decfsz	(??_turn_180+1)^0,f,c
  6367   00386C  D7FA               	bra	u6377
  6368   00386E  D000               	nop2	
  6369   003870                     
  6370                           ;MazeRobot.X/dc_motor.c: 322:     stop(mL, mR);
  6371   003870  C01E  F018         	movff	turn_180@mL,stop@mL
  6372   003874  C01F  F019         	movff	turn_180@mL+1,stop@mL+1
  6373   003878  C020  F01A         	movff	turn_180@mR,stop@mR
  6374   00387C  C021  F01B         	movff	turn_180@mR+1,stop@mR+1
  6375   003880  ECC7  F021         	call	_stop	;wreg free
  6376   003884  0012               	return		;funcret
  6377   003886                     __end_of_turn_180:
  6378                           	callstack 0
  6379                           
  6380 ;; *************** function _turnRight_135 *****************
  6381 ;; Defined at:
  6382 ;;		line 326 in file "MazeRobot.X/dc_motor.c"
  6383 ;; Parameters:    Size  Location     Type
  6384 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  6385 ;;		 -> main@motorLeft(9), 
  6386 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  6387 ;;		 -> main@motorRight(9), 
  6388 ;; Auto vars:     Size  Location     Type
  6389 ;;		None
  6390 ;; Return value:  Size  Location     Type
  6391 ;;                  1    wreg      void 
  6392 ;; Registers used:
  6393 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6394 ;; Tracked objects:
  6395 ;;		On entry : 0/0
  6396 ;;		On exit  : 0/0
  6397 ;;		Unchanged: 0/0
  6398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6399 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6401 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6402 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6403 ;;Total ram usage:        6 bytes
  6404 ;; Hardware stack levels used: 1
  6405 ;; Hardware stack levels required when called: 5
  6406 ;; This function calls:
  6407 ;;		_reverse
  6408 ;;		_setMotorPWM
  6409 ;;		_stop
  6410 ;; This function is called by:
  6411 ;;		_colorDetect
  6412 ;;		_return_home_turns
  6413 ;; This function uses a non-reentrant model
  6414 ;;
  6415                           
  6416                           	psect	text26
  6417   003B02                     __ptext26:
  6418                           	callstack 0
  6419   003B02                     _turnRight_135:
  6420                           	callstack 24
  6421   003B02                     
  6422                           ;MazeRobot.X/dc_motor.c: 326: void turnRight_135(DC_motor *mL, DC_motor *mR);MazeRobot.X
      +                          /dc_motor.c: 327: {;MazeRobot.X/dc_motor.c: 328:     stop(mL, mR);
  6423   003B02  C01E  F018         	movff	turnRight_135@mL,stop@mL
  6424   003B06  C01F  F019         	movff	turnRight_135@mL+1,stop@mL+1
  6425   003B0A  C020  F01A         	movff	turnRight_135@mR,stop@mR
  6426   003B0E  C021  F01B         	movff	turnRight_135@mR+1,stop@mR+1
  6427   003B12  ECC7  F021         	call	_stop	;wreg free
  6428   003B16                     
  6429                           ;MazeRobot.X/dc_motor.c: 329:     _delay((unsigned long)((100)*(64000000/4000.0)));
  6430   003B16  0E09               	movlw	9
  6431   003B18  6E23               	movwf	(??_turnRight_135+1)^0,c
  6432   003B1A  0E1E               	movlw	30
  6433   003B1C  6E22               	movwf	??_turnRight_135^0,c
  6434   003B1E  0EE4               	movlw	228
  6435   003B20                     u6387:
  6436   003B20  2EE8               	decfsz	wreg,f,c
  6437   003B22  D7FE               	bra	u6387
  6438   003B24  2E22               	decfsz	??_turnRight_135^0,f,c
  6439   003B26  D7FC               	bra	u6387
  6440   003B28  2E23               	decfsz	(??_turnRight_135+1)^0,f,c
  6441   003B2A  D7FA               	bra	u6387
  6442   003B2C  D000               	nop2	
  6443   003B2E                     
  6444                           ;MazeRobot.X/dc_motor.c: 331:     reverse(mL, mR);
  6445   003B2E  C01E  F018         	movff	turnRight_135@mL,reverse@mL
  6446   003B32  C01F  F019         	movff	turnRight_135@mL+1,reverse@mL+1
  6447   003B36  C020  F01A         	movff	turnRight_135@mR,reverse@mR
  6448   003B3A  C021  F01B         	movff	turnRight_135@mR+1,reverse@mR+1
  6449   003B3E  EC8E  F020         	call	_reverse	;wreg free
  6450                           
  6451                           ;MazeRobot.X/dc_motor.c: 332:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  6452   003B42  0E35               	movlw	53
  6453   003B44  6E23               	movwf	(??_turnRight_135+1)^0,c
  6454   003B46  0EC3               	movlw	195
  6455   003B48  6E22               	movwf	??_turnRight_135^0,c
  6456   003B4A  0E59               	movlw	89
  6457   003B4C                     u6397:
  6458   003B4C  2EE8               	decfsz	wreg,f,c
  6459   003B4E  D7FE               	bra	u6397
  6460   003B50  2E22               	decfsz	??_turnRight_135^0,f,c
  6461   003B52  D7FC               	bra	u6397
  6462   003B54  2E23               	decfsz	(??_turnRight_135+1)^0,f,c
  6463   003B56  D7FA               	bra	u6397
  6464   003B58  F000               	nop	
  6465   003B5A                     
  6466                           ;MazeRobot.X/dc_motor.c: 334:     stop(mL, mR);
  6467   003B5A  C01E  F018         	movff	turnRight_135@mL,stop@mL
  6468   003B5E  C01F  F019         	movff	turnRight_135@mL+1,stop@mL+1
  6469   003B62  C020  F01A         	movff	turnRight_135@mR,stop@mR
  6470   003B66  C021  F01B         	movff	turnRight_135@mR+1,stop@mR+1
  6471   003B6A  ECC7  F021         	call	_stop	;wreg free
  6472   003B6E                     
  6473                           ;MazeRobot.X/dc_motor.c: 336:     mL->direction = 1;
  6474   003B6E  EE20 F001          	lfsr	2,1
  6475   003B72  501E               	movf	turnRight_135@mL^0,w,c
  6476   003B74  26D9               	addwf	fsr2l,f,c
  6477   003B76  501F               	movf	(turnRight_135@mL+1)^0,w,c
  6478   003B78  22DA               	addwfc	fsr2h,f,c
  6479   003B7A  0E01               	movlw	1
  6480   003B7C  6EDF               	movwf	indf2,c
  6481   003B7E                     
  6482                           ;MazeRobot.X/dc_motor.c: 337:     mR->direction = 0;
  6483   003B7E  EE20 F001          	lfsr	2,1
  6484   003B82  5020               	movf	turnRight_135@mR^0,w,c
  6485   003B84  26D9               	addwf	fsr2l,f,c
  6486   003B86  5021               	movf	(turnRight_135@mR+1)^0,w,c
  6487   003B88  22DA               	addwfc	fsr2h,f,c
  6488   003B8A  0E00               	movlw	0
  6489   003B8C  6EDF               	movwf	indf2,c
  6490   003B8E                     
  6491                           ;MazeRobot.X/dc_motor.c: 339:     mL->brakemode = 1;
  6492   003B8E  EE20 F002          	lfsr	2,2
  6493   003B92  501E               	movf	turnRight_135@mL^0,w,c
  6494   003B94  26D9               	addwf	fsr2l,f,c
  6495   003B96  501F               	movf	(turnRight_135@mL+1)^0,w,c
  6496   003B98  22DA               	addwfc	fsr2h,f,c
  6497   003B9A  0E01               	movlw	1
  6498   003B9C  6EDF               	movwf	indf2,c
  6499   003B9E                     
  6500                           ;MazeRobot.X/dc_motor.c: 340:     mL->brakemode = 1;
  6501   003B9E  EE20 F002          	lfsr	2,2
  6502   003BA2  501E               	movf	turnRight_135@mL^0,w,c
  6503   003BA4  26D9               	addwf	fsr2l,f,c
  6504   003BA6  501F               	movf	(turnRight_135@mL+1)^0,w,c
  6505   003BA8  22DA               	addwfc	fsr2h,f,c
  6506   003BAA  0E01               	movlw	1
  6507   003BAC  6EDF               	movwf	indf2,c
  6508                           
  6509                           ;MazeRobot.X/dc_motor.c: 342:     while((mL->power < 80) || (mR->power < 80)){
  6510   003BAE  EFF1  F01D         	goto	l3827
  6511   003BB2                     l3821:
  6512                           
  6513                           ;MazeRobot.X/dc_motor.c: 343:         mL->power += 10;
  6514   003BB2  C01E  FFD9         	movff	turnRight_135@mL,fsr2l
  6515   003BB6  C01F  FFDA         	movff	turnRight_135@mL+1,fsr2h
  6516   003BBA  0E0A               	movlw	10
  6517   003BBC  26DF               	addwf	indf2,f,c
  6518                           
  6519                           ;MazeRobot.X/dc_motor.c: 344:         mR->power += 10;
  6520   003BBE  C020  FFD9         	movff	turnRight_135@mR,fsr2l
  6521   003BC2  C021  FFDA         	movff	turnRight_135@mR+1,fsr2h
  6522   003BC6  0E0A               	movlw	10
  6523   003BC8  26DF               	addwf	indf2,f,c
  6524   003BCA                     
  6525                           ;MazeRobot.X/dc_motor.c: 345:         setMotorPWM(mL);
  6526   003BCA  C01E  F012         	movff	turnRight_135@mL,setMotorPWM@m
  6527   003BCE  C01F  F013         	movff	turnRight_135@mL+1,setMotorPWM@m+1
  6528   003BD2  EC8D  F019         	call	_setMotorPWM	;wreg free
  6529   003BD6                     
  6530                           ;MazeRobot.X/dc_motor.c: 346:         setMotorPWM(mR);
  6531   003BD6  C020  F012         	movff	turnRight_135@mR,setMotorPWM@m
  6532   003BDA  C021  F013         	movff	turnRight_135@mR+1,setMotorPWM@m+1
  6533   003BDE  EC8D  F019         	call	_setMotorPWM	;wreg free
  6534   003BE2                     l3827:
  6535                           
  6536                           ;MazeRobot.X/dc_motor.c: 342:     while((mL->power < 80) || (mR->power < 80)){
  6537   003BE2  C01E  FFD9         	movff	turnRight_135@mL,fsr2l
  6538   003BE6  C01F  FFDA         	movff	turnRight_135@mL+1,fsr2h
  6539   003BEA  0E4F               	movlw	79
  6540   003BEC  64DF               	cpfsgt	indf2,c
  6541   003BEE  EFFB  F01D         	goto	u3621
  6542   003BF2  EFFD  F01D         	goto	u3620
  6543   003BF6                     u3621:
  6544   003BF6  EFD9  F01D         	goto	l3821
  6545   003BFA                     u3620:
  6546   003BFA  C020  FFD9         	movff	turnRight_135@mR,fsr2l
  6547   003BFE  C021  FFDA         	movff	turnRight_135@mR+1,fsr2h
  6548   003C02  0E4F               	movlw	79
  6549   003C04  64DF               	cpfsgt	indf2,c
  6550   003C06  EF07  F01E         	goto	u3631
  6551   003C0A  EF09  F01E         	goto	u3630
  6552   003C0E                     u3631:
  6553   003C0E  EFD9  F01D         	goto	l3821
  6554   003C12                     u3630:
  6555   003C12                     
  6556                           ;MazeRobot.X/dc_motor.c: 348:    _delay((unsigned long)((1.5*turning_time45)*(64000000/4
      +                          000.0)));
  6557   003C12  0E15               	movlw	21
  6558   003C14  6E23               	movwf	(??_turnRight_135+1)^0,c
  6559   003C16  0E17               	movlw	23
  6560   003C18  6E22               	movwf	??_turnRight_135^0,c
  6561   003C1A  0ECC               	movlw	204
  6562   003C1C                     u6407:
  6563   003C1C  2EE8               	decfsz	wreg,f,c
  6564   003C1E  D7FE               	bra	u6407
  6565   003C20  2E22               	decfsz	??_turnRight_135^0,f,c
  6566   003C22  D7FC               	bra	u6407
  6567   003C24  2E23               	decfsz	(??_turnRight_135+1)^0,f,c
  6568   003C26  D7FA               	bra	u6407
  6569   003C28                     
  6570                           ;MazeRobot.X/dc_motor.c: 350:     stop(mL, mR);
  6571   003C28  C01E  F018         	movff	turnRight_135@mL,stop@mL
  6572   003C2C  C01F  F019         	movff	turnRight_135@mL+1,stop@mL+1
  6573   003C30  C020  F01A         	movff	turnRight_135@mR,stop@mR
  6574   003C34  C021  F01B         	movff	turnRight_135@mR+1,stop@mR+1
  6575   003C38  ECC7  F021         	call	_stop	;wreg free
  6576   003C3C  0012               	return		;funcret
  6577   003C3E                     __end_of_turnRight_135:
  6578                           	callstack 0
  6579                           
  6580 ;; *************** function _turnLeft_135 *****************
  6581 ;; Defined at:
  6582 ;;		line 355 in file "MazeRobot.X/dc_motor.c"
  6583 ;; Parameters:    Size  Location     Type
  6584 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  6585 ;;		 -> main@motorLeft(9), 
  6586 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  6587 ;;		 -> main@motorRight(9), 
  6588 ;; Auto vars:     Size  Location     Type
  6589 ;;		None
  6590 ;; Return value:  Size  Location     Type
  6591 ;;                  1    wreg      void 
  6592 ;; Registers used:
  6593 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6594 ;; Tracked objects:
  6595 ;;		On entry : 0/0
  6596 ;;		On exit  : 0/0
  6597 ;;		Unchanged: 0/0
  6598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6599 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6601 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6602 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6603 ;;Total ram usage:        6 bytes
  6604 ;; Hardware stack levels used: 1
  6605 ;; Hardware stack levels required when called: 5
  6606 ;; This function calls:
  6607 ;;		_reverse
  6608 ;;		_setMotorPWM
  6609 ;;		_stop
  6610 ;; This function is called by:
  6611 ;;		_colorDetect
  6612 ;;		_return_home_turns
  6613 ;; This function uses a non-reentrant model
  6614 ;;
  6615                           
  6616                           	psect	text27
  6617   003C3E                     __ptext27:
  6618                           	callstack 0
  6619   003C3E                     _turnLeft_135:
  6620                           	callstack 24
  6621   003C3E                     
  6622                           ;MazeRobot.X/dc_motor.c: 355: void turnLeft_135(DC_motor *mL, DC_motor *mR);MazeRobot.X/
      +                          dc_motor.c: 356: {;MazeRobot.X/dc_motor.c: 358:     stop(mL, mR);
  6623   003C3E  C01E  F018         	movff	turnLeft_135@mL,stop@mL
  6624   003C42  C01F  F019         	movff	turnLeft_135@mL+1,stop@mL+1
  6625   003C46  C020  F01A         	movff	turnLeft_135@mR,stop@mR
  6626   003C4A  C021  F01B         	movff	turnLeft_135@mR+1,stop@mR+1
  6627   003C4E  ECC7  F021         	call	_stop	;wreg free
  6628   003C52                     
  6629                           ;MazeRobot.X/dc_motor.c: 359:     _delay((unsigned long)((100)*(64000000/4000.0)));
  6630   003C52  0E09               	movlw	9
  6631   003C54  6E23               	movwf	(??_turnLeft_135+1)^0,c
  6632   003C56  0E1E               	movlw	30
  6633   003C58  6E22               	movwf	??_turnLeft_135^0,c
  6634   003C5A  0EE4               	movlw	228
  6635   003C5C                     u6417:
  6636   003C5C  2EE8               	decfsz	wreg,f,c
  6637   003C5E  D7FE               	bra	u6417
  6638   003C60  2E22               	decfsz	??_turnLeft_135^0,f,c
  6639   003C62  D7FC               	bra	u6417
  6640   003C64  2E23               	decfsz	(??_turnLeft_135+1)^0,f,c
  6641   003C66  D7FA               	bra	u6417
  6642   003C68  D000               	nop2	
  6643   003C6A                     
  6644                           ;MazeRobot.X/dc_motor.c: 361:     reverse(mL, mR);
  6645   003C6A  C01E  F018         	movff	turnLeft_135@mL,reverse@mL
  6646   003C6E  C01F  F019         	movff	turnLeft_135@mL+1,reverse@mL+1
  6647   003C72  C020  F01A         	movff	turnLeft_135@mR,reverse@mR
  6648   003C76  C021  F01B         	movff	turnLeft_135@mR+1,reverse@mR+1
  6649   003C7A  EC8E  F020         	call	_reverse	;wreg free
  6650                           
  6651                           ;MazeRobot.X/dc_motor.c: 362:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  6652   003C7E  0E35               	movlw	53
  6653   003C80  6E23               	movwf	(??_turnLeft_135+1)^0,c
  6654   003C82  0EC3               	movlw	195
  6655   003C84  6E22               	movwf	??_turnLeft_135^0,c
  6656   003C86  0E59               	movlw	89
  6657   003C88                     u6427:
  6658   003C88  2EE8               	decfsz	wreg,f,c
  6659   003C8A  D7FE               	bra	u6427
  6660   003C8C  2E22               	decfsz	??_turnLeft_135^0,f,c
  6661   003C8E  D7FC               	bra	u6427
  6662   003C90  2E23               	decfsz	(??_turnLeft_135+1)^0,f,c
  6663   003C92  D7FA               	bra	u6427
  6664   003C94  F000               	nop	
  6665   003C96                     
  6666                           ;MazeRobot.X/dc_motor.c: 364:     stop(mL, mR);
  6667   003C96  C01E  F018         	movff	turnLeft_135@mL,stop@mL
  6668   003C9A  C01F  F019         	movff	turnLeft_135@mL+1,stop@mL+1
  6669   003C9E  C020  F01A         	movff	turnLeft_135@mR,stop@mR
  6670   003CA2  C021  F01B         	movff	turnLeft_135@mR+1,stop@mR+1
  6671   003CA6  ECC7  F021         	call	_stop	;wreg free
  6672   003CAA                     
  6673                           ;MazeRobot.X/dc_motor.c: 366:     mL->direction = 0;
  6674   003CAA  EE20 F001          	lfsr	2,1
  6675   003CAE  501E               	movf	turnLeft_135@mL^0,w,c
  6676   003CB0  26D9               	addwf	fsr2l,f,c
  6677   003CB2  501F               	movf	(turnLeft_135@mL+1)^0,w,c
  6678   003CB4  22DA               	addwfc	fsr2h,f,c
  6679   003CB6  0E00               	movlw	0
  6680   003CB8  6EDF               	movwf	indf2,c
  6681   003CBA                     
  6682                           ;MazeRobot.X/dc_motor.c: 367:     mR->direction = 1;
  6683   003CBA  EE20 F001          	lfsr	2,1
  6684   003CBE  5020               	movf	turnLeft_135@mR^0,w,c
  6685   003CC0  26D9               	addwf	fsr2l,f,c
  6686   003CC2  5021               	movf	(turnLeft_135@mR+1)^0,w,c
  6687   003CC4  22DA               	addwfc	fsr2h,f,c
  6688   003CC6  0E01               	movlw	1
  6689   003CC8  6EDF               	movwf	indf2,c
  6690   003CCA                     
  6691                           ;MazeRobot.X/dc_motor.c: 369:     mL->brakemode = 1;
  6692   003CCA  EE20 F002          	lfsr	2,2
  6693   003CCE  501E               	movf	turnLeft_135@mL^0,w,c
  6694   003CD0  26D9               	addwf	fsr2l,f,c
  6695   003CD2  501F               	movf	(turnLeft_135@mL+1)^0,w,c
  6696   003CD4  22DA               	addwfc	fsr2h,f,c
  6697   003CD6  0E01               	movlw	1
  6698   003CD8  6EDF               	movwf	indf2,c
  6699   003CDA                     
  6700                           ;MazeRobot.X/dc_motor.c: 370:     mL->brakemode = 1;
  6701   003CDA  EE20 F002          	lfsr	2,2
  6702   003CDE  501E               	movf	turnLeft_135@mL^0,w,c
  6703   003CE0  26D9               	addwf	fsr2l,f,c
  6704   003CE2  501F               	movf	(turnLeft_135@mL+1)^0,w,c
  6705   003CE4  22DA               	addwfc	fsr2h,f,c
  6706   003CE6  0E01               	movlw	1
  6707   003CE8  6EDF               	movwf	indf2,c
  6708                           
  6709                           ;MazeRobot.X/dc_motor.c: 372:     while((mL->power < 80) || (mR->power < 80)){
  6710   003CEA  EF8F  F01E         	goto	l3857
  6711   003CEE                     l3851:
  6712                           
  6713                           ;MazeRobot.X/dc_motor.c: 373:         mL->power += 10;
  6714   003CEE  C01E  FFD9         	movff	turnLeft_135@mL,fsr2l
  6715   003CF2  C01F  FFDA         	movff	turnLeft_135@mL+1,fsr2h
  6716   003CF6  0E0A               	movlw	10
  6717   003CF8  26DF               	addwf	indf2,f,c
  6718                           
  6719                           ;MazeRobot.X/dc_motor.c: 374:         mR->power += 10;
  6720   003CFA  C020  FFD9         	movff	turnLeft_135@mR,fsr2l
  6721   003CFE  C021  FFDA         	movff	turnLeft_135@mR+1,fsr2h
  6722   003D02  0E0A               	movlw	10
  6723   003D04  26DF               	addwf	indf2,f,c
  6724   003D06                     
  6725                           ;MazeRobot.X/dc_motor.c: 375:         setMotorPWM(mL);
  6726   003D06  C01E  F012         	movff	turnLeft_135@mL,setMotorPWM@m
  6727   003D0A  C01F  F013         	movff	turnLeft_135@mL+1,setMotorPWM@m+1
  6728   003D0E  EC8D  F019         	call	_setMotorPWM	;wreg free
  6729   003D12                     
  6730                           ;MazeRobot.X/dc_motor.c: 376:         setMotorPWM(mR);
  6731   003D12  C020  F012         	movff	turnLeft_135@mR,setMotorPWM@m
  6732   003D16  C021  F013         	movff	turnLeft_135@mR+1,setMotorPWM@m+1
  6733   003D1A  EC8D  F019         	call	_setMotorPWM	;wreg free
  6734   003D1E                     l3857:
  6735                           
  6736                           ;MazeRobot.X/dc_motor.c: 372:     while((mL->power < 80) || (mR->power < 80)){
  6737   003D1E  C01E  FFD9         	movff	turnLeft_135@mL,fsr2l
  6738   003D22  C01F  FFDA         	movff	turnLeft_135@mL+1,fsr2h
  6739   003D26  0E4F               	movlw	79
  6740   003D28  64DF               	cpfsgt	indf2,c
  6741   003D2A  EF99  F01E         	goto	u3641
  6742   003D2E  EF9B  F01E         	goto	u3640
  6743   003D32                     u3641:
  6744   003D32  EF77  F01E         	goto	l3851
  6745   003D36                     u3640:
  6746   003D36  C020  FFD9         	movff	turnLeft_135@mR,fsr2l
  6747   003D3A  C021  FFDA         	movff	turnLeft_135@mR+1,fsr2h
  6748   003D3E  0E4F               	movlw	79
  6749   003D40  64DF               	cpfsgt	indf2,c
  6750   003D42  EFA5  F01E         	goto	u3651
  6751   003D46  EFA7  F01E         	goto	u3650
  6752   003D4A                     u3651:
  6753   003D4A  EF77  F01E         	goto	l3851
  6754   003D4E                     u3650:
  6755   003D4E                     
  6756                           ;MazeRobot.X/dc_motor.c: 378:    _delay((unsigned long)((1.5*turning_time45)*(64000000/4
      +                          000.0)));
  6757   003D4E  0E15               	movlw	21
  6758   003D50  6E23               	movwf	(??_turnLeft_135+1)^0,c
  6759   003D52  0E17               	movlw	23
  6760   003D54  6E22               	movwf	??_turnLeft_135^0,c
  6761   003D56  0ECC               	movlw	204
  6762   003D58                     u6437:
  6763   003D58  2EE8               	decfsz	wreg,f,c
  6764   003D5A  D7FE               	bra	u6437
  6765   003D5C  2E22               	decfsz	??_turnLeft_135^0,f,c
  6766   003D5E  D7FC               	bra	u6437
  6767   003D60  2E23               	decfsz	(??_turnLeft_135+1)^0,f,c
  6768   003D62  D7FA               	bra	u6437
  6769   003D64                     
  6770                           ;MazeRobot.X/dc_motor.c: 379:     stop(mL, mR);
  6771   003D64  C01E  F018         	movff	turnLeft_135@mL,stop@mL
  6772   003D68  C01F  F019         	movff	turnLeft_135@mL+1,stop@mL+1
  6773   003D6C  C020  F01A         	movff	turnLeft_135@mR,stop@mR
  6774   003D70  C021  F01B         	movff	turnLeft_135@mR+1,stop@mR+1
  6775   003D74  ECC7  F021         	call	_stop	;wreg free
  6776   003D78  0012               	return		;funcret
  6777   003D7A                     __end_of_turnLeft_135:
  6778                           	callstack 0
  6779                           
  6780 ;; *************** function _reverseSquareRight *****************
  6781 ;; Defined at:
  6782 ;;		line 383 in file "MazeRobot.X/dc_motor.c"
  6783 ;; Parameters:    Size  Location     Type
  6784 ;;  mL              2   35[COMRAM] PTR struct DC_motor
  6785 ;;		 -> main@motorLeft(9), 
  6786 ;;  mR              2   37[COMRAM] PTR struct DC_motor
  6787 ;;		 -> main@motorRight(9), 
  6788 ;; Auto vars:     Size  Location     Type
  6789 ;;		None
  6790 ;; Return value:  Size  Location     Type
  6791 ;;                  1    wreg      void 
  6792 ;; Registers used:
  6793 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6794 ;; Tracked objects:
  6795 ;;		On entry : 0/0
  6796 ;;		On exit  : 0/0
  6797 ;;		Unchanged: 0/0
  6798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6799 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6801 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6802 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6803 ;;Total ram usage:        6 bytes
  6804 ;; Hardware stack levels used: 1
  6805 ;; Hardware stack levels required when called: 6
  6806 ;; This function calls:
  6807 ;;		_reverse
  6808 ;;		_stop
  6809 ;;		_turnRight_90
  6810 ;; This function is called by:
  6811 ;;		_colorDetect
  6812 ;; This function uses a non-reentrant model
  6813 ;;
  6814                           
  6815                           	psect	text28
  6816   00443C                     __ptext28:
  6817                           	callstack 0
  6818   00443C                     _reverseSquareRight:
  6819                           	callstack 23
  6820   00443C                     
  6821                           ;MazeRobot.X/dc_motor.c: 383: void reverseSquareRight(DC_motor *mL, DC_motor *mR);MazeRo
      +                          bot.X/dc_motor.c: 384: {;MazeRobot.X/dc_motor.c: 386:     reverse(mL, mR);
  6822   00443C  C024  F018         	movff	reverseSquareRight@mL,reverse@mL
  6823   004440  C025  F019         	movff	reverseSquareRight@mL+1,reverse@mL+1
  6824   004444  C026  F01A         	movff	reverseSquareRight@mR,reverse@mR
  6825   004448  C027  F01B         	movff	reverseSquareRight@mR+1,reverse@mR+1
  6826   00444C  EC8E  F020         	call	_reverse	;wreg free
  6827   004450                     
  6828                           ;MazeRobot.X/dc_motor.c: 387:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  6829   004450  0E35               	movlw	53
  6830   004452  6E29               	movwf	(??_reverseSquareRight+1)^0,c
  6831   004454  0EC3               	movlw	195
  6832   004456  6E28               	movwf	??_reverseSquareRight^0,c
  6833   004458  0E59               	movlw	89
  6834   00445A                     u6447:
  6835   00445A  2EE8               	decfsz	wreg,f,c
  6836   00445C  D7FE               	bra	u6447
  6837   00445E  2E28               	decfsz	??_reverseSquareRight^0,f,c
  6838   004460  D7FC               	bra	u6447
  6839   004462  2E29               	decfsz	(??_reverseSquareRight+1)^0,f,c
  6840   004464  D7FA               	bra	u6447
  6841   004466  F000               	nop	
  6842   004468                     
  6843                           ;MazeRobot.X/dc_motor.c: 389:     stop(mL, mR);
  6844   004468  C024  F018         	movff	reverseSquareRight@mL,stop@mL
  6845   00446C  C025  F019         	movff	reverseSquareRight@mL+1,stop@mL+1
  6846   004470  C026  F01A         	movff	reverseSquareRight@mR,stop@mR
  6847   004474  C027  F01B         	movff	reverseSquareRight@mR+1,stop@mR+1
  6848   004478  ECC7  F021         	call	_stop	;wreg free
  6849   00447C                     
  6850                           ;MazeRobot.X/dc_motor.c: 391:     reverse(mL, mR);
  6851   00447C  C024  F018         	movff	reverseSquareRight@mL,reverse@mL
  6852   004480  C025  F019         	movff	reverseSquareRight@mL+1,reverse@mL+1
  6853   004484  C026  F01A         	movff	reverseSquareRight@mR,reverse@mR
  6854   004488  C027  F01B         	movff	reverseSquareRight@mR+1,reverse@mR+1
  6855   00448C  EC8E  F020         	call	_reverse	;wreg free
  6856   004490                     
  6857                           ;MazeRobot.X/dc_motor.c: 392:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  6858   004490  0E35               	movlw	53
  6859   004492  6E29               	movwf	(??_reverseSquareRight+1)^0,c
  6860   004494  0EC3               	movlw	195
  6861   004496  6E28               	movwf	??_reverseSquareRight^0,c
  6862   004498  0E59               	movlw	89
  6863   00449A                     u6457:
  6864   00449A  2EE8               	decfsz	wreg,f,c
  6865   00449C  D7FE               	bra	u6457
  6866   00449E  2E28               	decfsz	??_reverseSquareRight^0,f,c
  6867   0044A0  D7FC               	bra	u6457
  6868   0044A2  2E29               	decfsz	(??_reverseSquareRight+1)^0,f,c
  6869   0044A4  D7FA               	bra	u6457
  6870   0044A6  F000               	nop	
  6871                           
  6872                           ;MazeRobot.X/dc_motor.c: 394:     turnRight_90(mL,mR);
  6873   0044A8  C024  F01E         	movff	reverseSquareRight@mL,turnRight_90@mL
  6874   0044AC  C025  F01F         	movff	reverseSquareRight@mL+1,turnRight_90@mL+1
  6875   0044B0  C026  F020         	movff	reverseSquareRight@mR,turnRight_90@mR
  6876   0044B4  C027  F021         	movff	reverseSquareRight@mR+1,turnRight_90@mR+1
  6877   0044B8  EC43  F01C         	call	_turnRight_90	;wreg free
  6878                           
  6879                           ;MazeRobot.X/dc_motor.c: 396:     stop(mL, mR);
  6880   0044BC  C024  F018         	movff	reverseSquareRight@mL,stop@mL
  6881   0044C0  C025  F019         	movff	reverseSquareRight@mL+1,stop@mL+1
  6882   0044C4  C026  F01A         	movff	reverseSquareRight@mR,stop@mR
  6883   0044C8  C027  F01B         	movff	reverseSquareRight@mR+1,stop@mR+1
  6884   0044CC  ECC7  F021         	call	_stop	;wreg free
  6885   0044D0  0012               	return		;funcret
  6886   0044D2                     __end_of_reverseSquareRight:
  6887                           	callstack 0
  6888                           
  6889 ;; *************** function _turnRight_90 *****************
  6890 ;; Defined at:
  6891 ;;		line 269 in file "MazeRobot.X/dc_motor.c"
  6892 ;; Parameters:    Size  Location     Type
  6893 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  6894 ;;		 -> main@motorLeft(9), 
  6895 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  6896 ;;		 -> main@motorRight(9), 
  6897 ;; Auto vars:     Size  Location     Type
  6898 ;;		None
  6899 ;; Return value:  Size  Location     Type
  6900 ;;                  1    wreg      void 
  6901 ;; Registers used:
  6902 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6903 ;; Tracked objects:
  6904 ;;		On entry : 0/0
  6905 ;;		On exit  : 0/0
  6906 ;;		Unchanged: 0/0
  6907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6908 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6910 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6911 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6912 ;;Total ram usage:        6 bytes
  6913 ;; Hardware stack levels used: 1
  6914 ;; Hardware stack levels required when called: 5
  6915 ;; This function calls:
  6916 ;;		_reverse
  6917 ;;		_setMotorPWM
  6918 ;;		_stop
  6919 ;; This function is called by:
  6920 ;;		_colorDetect
  6921 ;;		_return_home_turns
  6922 ;;		_reverseSquareRight
  6923 ;; This function uses a non-reentrant model
  6924 ;;
  6925                           
  6926                           	psect	text29
  6927   003886                     __ptext29:
  6928                           	callstack 0
  6929   003886                     _turnRight_90:
  6930                           	callstack 24
  6931   003886                     
  6932                           ;MazeRobot.X/dc_motor.c: 269: void turnRight_90(DC_motor *mL, DC_motor *mR);MazeRobot.X/
      +                          dc_motor.c: 270: {;MazeRobot.X/dc_motor.c: 271:     stop(mL, mR);
  6933   003886  C01E  F018         	movff	turnRight_90@mL,stop@mL
  6934   00388A  C01F  F019         	movff	turnRight_90@mL+1,stop@mL+1
  6935   00388E  C020  F01A         	movff	turnRight_90@mR,stop@mR
  6936   003892  C021  F01B         	movff	turnRight_90@mR+1,stop@mR+1
  6937   003896  ECC7  F021         	call	_stop	;wreg free
  6938   00389A                     
  6939                           ;MazeRobot.X/dc_motor.c: 272:     _delay((unsigned long)((100)*(64000000/4000.0)));
  6940   00389A  0E09               	movlw	9
  6941   00389C  6E23               	movwf	(??_turnRight_90+1)^0,c
  6942   00389E  0E1E               	movlw	30
  6943   0038A0  6E22               	movwf	??_turnRight_90^0,c
  6944   0038A2  0EE4               	movlw	228
  6945   0038A4                     u6467:
  6946   0038A4  2EE8               	decfsz	wreg,f,c
  6947   0038A6  D7FE               	bra	u6467
  6948   0038A8  2E22               	decfsz	??_turnRight_90^0,f,c
  6949   0038AA  D7FC               	bra	u6467
  6950   0038AC  2E23               	decfsz	(??_turnRight_90+1)^0,f,c
  6951   0038AE  D7FA               	bra	u6467
  6952   0038B0  D000               	nop2	
  6953   0038B2                     
  6954                           ;MazeRobot.X/dc_motor.c: 274:     reverse(mL, mR);
  6955   0038B2  C01E  F018         	movff	turnRight_90@mL,reverse@mL
  6956   0038B6  C01F  F019         	movff	turnRight_90@mL+1,reverse@mL+1
  6957   0038BA  C020  F01A         	movff	turnRight_90@mR,reverse@mR
  6958   0038BE  C021  F01B         	movff	turnRight_90@mR+1,reverse@mR+1
  6959   0038C2  EC8E  F020         	call	_reverse	;wreg free
  6960                           
  6961                           ;MazeRobot.X/dc_motor.c: 275:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  6962   0038C6  0E35               	movlw	53
  6963   0038C8  6E23               	movwf	(??_turnRight_90+1)^0,c
  6964   0038CA  0EC3               	movlw	195
  6965   0038CC  6E22               	movwf	??_turnRight_90^0,c
  6966   0038CE  0E59               	movlw	89
  6967   0038D0                     u6477:
  6968   0038D0  2EE8               	decfsz	wreg,f,c
  6969   0038D2  D7FE               	bra	u6477
  6970   0038D4  2E22               	decfsz	??_turnRight_90^0,f,c
  6971   0038D6  D7FC               	bra	u6477
  6972   0038D8  2E23               	decfsz	(??_turnRight_90+1)^0,f,c
  6973   0038DA  D7FA               	bra	u6477
  6974   0038DC  F000               	nop	
  6975   0038DE                     
  6976                           ;MazeRobot.X/dc_motor.c: 277:     stop(mL, mR);
  6977   0038DE  C01E  F018         	movff	turnRight_90@mL,stop@mL
  6978   0038E2  C01F  F019         	movff	turnRight_90@mL+1,stop@mL+1
  6979   0038E6  C020  F01A         	movff	turnRight_90@mR,stop@mR
  6980   0038EA  C021  F01B         	movff	turnRight_90@mR+1,stop@mR+1
  6981   0038EE  ECC7  F021         	call	_stop	;wreg free
  6982   0038F2                     
  6983                           ;MazeRobot.X/dc_motor.c: 279:     mL->direction = 1;
  6984   0038F2  EE20 F001          	lfsr	2,1
  6985   0038F6  501E               	movf	turnRight_90@mL^0,w,c
  6986   0038F8  26D9               	addwf	fsr2l,f,c
  6987   0038FA  501F               	movf	(turnRight_90@mL+1)^0,w,c
  6988   0038FC  22DA               	addwfc	fsr2h,f,c
  6989   0038FE  0E01               	movlw	1
  6990   003900  6EDF               	movwf	indf2,c
  6991   003902                     
  6992                           ;MazeRobot.X/dc_motor.c: 280:     mR->direction = 0;
  6993   003902  EE20 F001          	lfsr	2,1
  6994   003906  5020               	movf	turnRight_90@mR^0,w,c
  6995   003908  26D9               	addwf	fsr2l,f,c
  6996   00390A  5021               	movf	(turnRight_90@mR+1)^0,w,c
  6997   00390C  22DA               	addwfc	fsr2h,f,c
  6998   00390E  0E00               	movlw	0
  6999   003910  6EDF               	movwf	indf2,c
  7000   003912                     
  7001                           ;MazeRobot.X/dc_motor.c: 282:     mL->brakemode = 1;
  7002   003912  EE20 F002          	lfsr	2,2
  7003   003916  501E               	movf	turnRight_90@mL^0,w,c
  7004   003918  26D9               	addwf	fsr2l,f,c
  7005   00391A  501F               	movf	(turnRight_90@mL+1)^0,w,c
  7006   00391C  22DA               	addwfc	fsr2h,f,c
  7007   00391E  0E01               	movlw	1
  7008   003920  6EDF               	movwf	indf2,c
  7009   003922                     
  7010                           ;MazeRobot.X/dc_motor.c: 283:     mL->brakemode = 1;
  7011   003922  EE20 F002          	lfsr	2,2
  7012   003926  501E               	movf	turnRight_90@mL^0,w,c
  7013   003928  26D9               	addwf	fsr2l,f,c
  7014   00392A  501F               	movf	(turnRight_90@mL+1)^0,w,c
  7015   00392C  22DA               	addwfc	fsr2h,f,c
  7016   00392E  0E01               	movlw	1
  7017   003930  6EDF               	movwf	indf2,c
  7018                           
  7019                           ;MazeRobot.X/dc_motor.c: 285:     while((mL->power < 80) || (mR->power < 80)){
  7020   003932  EFB3  F01C         	goto	l3477
  7021   003936                     l3471:
  7022                           
  7023                           ;MazeRobot.X/dc_motor.c: 286:         mL->power += 10;
  7024   003936  C01E  FFD9         	movff	turnRight_90@mL,fsr2l
  7025   00393A  C01F  FFDA         	movff	turnRight_90@mL+1,fsr2h
  7026   00393E  0E0A               	movlw	10
  7027   003940  26DF               	addwf	indf2,f,c
  7028                           
  7029                           ;MazeRobot.X/dc_motor.c: 287:         mR->power += 10;
  7030   003942  C020  FFD9         	movff	turnRight_90@mR,fsr2l
  7031   003946  C021  FFDA         	movff	turnRight_90@mR+1,fsr2h
  7032   00394A  0E0A               	movlw	10
  7033   00394C  26DF               	addwf	indf2,f,c
  7034   00394E                     
  7035                           ;MazeRobot.X/dc_motor.c: 288:         setMotorPWM(mL);
  7036   00394E  C01E  F012         	movff	turnRight_90@mL,setMotorPWM@m
  7037   003952  C01F  F013         	movff	turnRight_90@mL+1,setMotorPWM@m+1
  7038   003956  EC8D  F019         	call	_setMotorPWM	;wreg free
  7039   00395A                     
  7040                           ;MazeRobot.X/dc_motor.c: 289:         setMotorPWM(mR);
  7041   00395A  C020  F012         	movff	turnRight_90@mR,setMotorPWM@m
  7042   00395E  C021  F013         	movff	turnRight_90@mR+1,setMotorPWM@m+1
  7043   003962  EC8D  F019         	call	_setMotorPWM	;wreg free
  7044   003966                     l3477:
  7045                           
  7046                           ;MazeRobot.X/dc_motor.c: 285:     while((mL->power < 80) || (mR->power < 80)){
  7047   003966  C01E  FFD9         	movff	turnRight_90@mL,fsr2l
  7048   00396A  C01F  FFDA         	movff	turnRight_90@mL+1,fsr2h
  7049   00396E  0E4F               	movlw	79
  7050   003970  64DF               	cpfsgt	indf2,c
  7051   003972  EFBD  F01C         	goto	u3131
  7052   003976  EFBF  F01C         	goto	u3130
  7053   00397A                     u3131:
  7054   00397A  EF9B  F01C         	goto	l3471
  7055   00397E                     u3130:
  7056   00397E  C020  FFD9         	movff	turnRight_90@mR,fsr2l
  7057   003982  C021  FFDA         	movff	turnRight_90@mR+1,fsr2h
  7058   003986  0E4F               	movlw	79
  7059   003988  64DF               	cpfsgt	indf2,c
  7060   00398A  EFC9  F01C         	goto	u3141
  7061   00398E  EFCB  F01C         	goto	u3140
  7062   003992                     u3141:
  7063   003992  EF9B  F01C         	goto	l3471
  7064   003996                     u3140:
  7065   003996                     
  7066                           ;MazeRobot.X/dc_motor.c: 291:    _delay((unsigned long)((turning_time45)*(64000000/4000.
      +                          0)));
  7067   003996  0E0E               	movlw	14
  7068   003998  6E23               	movwf	(??_turnRight_90+1)^0,c
  7069   00399A  0E65               	movlw	101
  7070   00399C  6E22               	movwf	??_turnRight_90^0,c
  7071   00399E  0E87               	movlw	135
  7072   0039A0                     u6487:
  7073   0039A0  2EE8               	decfsz	wreg,f,c
  7074   0039A2  D7FE               	bra	u6487
  7075   0039A4  2E22               	decfsz	??_turnRight_90^0,f,c
  7076   0039A6  D7FC               	bra	u6487
  7077   0039A8  2E23               	decfsz	(??_turnRight_90+1)^0,f,c
  7078   0039AA  D7FA               	bra	u6487
  7079   0039AC  F000               	nop	
  7080   0039AE                     
  7081                           ;MazeRobot.X/dc_motor.c: 293:     stop(mL, mR);
  7082   0039AE  C01E  F018         	movff	turnRight_90@mL,stop@mL
  7083   0039B2  C01F  F019         	movff	turnRight_90@mL+1,stop@mL+1
  7084   0039B6  C020  F01A         	movff	turnRight_90@mR,stop@mR
  7085   0039BA  C021  F01B         	movff	turnRight_90@mR+1,stop@mR+1
  7086   0039BE  ECC7  F021         	call	_stop	;wreg free
  7087   0039C2  0012               	return		;funcret
  7088   0039C4                     __end_of_turnRight_90:
  7089                           	callstack 0
  7090                           
  7091 ;; *************** function _reverseSquareLeft *****************
  7092 ;; Defined at:
  7093 ;;		line 401 in file "MazeRobot.X/dc_motor.c"
  7094 ;; Parameters:    Size  Location     Type
  7095 ;;  mL              2   35[COMRAM] PTR struct DC_motor
  7096 ;;		 -> main@motorLeft(9), 
  7097 ;;  mR              2   37[COMRAM] PTR struct DC_motor
  7098 ;;		 -> main@motorRight(9), 
  7099 ;; Auto vars:     Size  Location     Type
  7100 ;;		None
  7101 ;; Return value:  Size  Location     Type
  7102 ;;                  1    wreg      void 
  7103 ;; Registers used:
  7104 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7105 ;; Tracked objects:
  7106 ;;		On entry : 0/0
  7107 ;;		On exit  : 0/0
  7108 ;;		Unchanged: 0/0
  7109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7110 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7111 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7112 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7113 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7114 ;;Total ram usage:        6 bytes
  7115 ;; Hardware stack levels used: 1
  7116 ;; Hardware stack levels required when called: 6
  7117 ;; This function calls:
  7118 ;;		_reverse
  7119 ;;		_stop
  7120 ;;		_turnLeft_90
  7121 ;; This function is called by:
  7122 ;;		_colorDetect
  7123 ;; This function uses a non-reentrant model
  7124 ;;
  7125                           
  7126                           	psect	text30
  7127   0044D2                     __ptext30:
  7128                           	callstack 0
  7129   0044D2                     _reverseSquareLeft:
  7130                           	callstack 23
  7131   0044D2                     
  7132                           ;MazeRobot.X/dc_motor.c: 401: void reverseSquareLeft(DC_motor *mL, DC_motor *mR);MazeRob
      +                          ot.X/dc_motor.c: 402: {;MazeRobot.X/dc_motor.c: 403:     reverse(mL, mR);
  7133   0044D2  C024  F018         	movff	reverseSquareLeft@mL,reverse@mL
  7134   0044D6  C025  F019         	movff	reverseSquareLeft@mL+1,reverse@mL+1
  7135   0044DA  C026  F01A         	movff	reverseSquareLeft@mR,reverse@mR
  7136   0044DE  C027  F01B         	movff	reverseSquareLeft@mR+1,reverse@mR+1
  7137   0044E2  EC8E  F020         	call	_reverse	;wreg free
  7138   0044E6                     
  7139                           ;MazeRobot.X/dc_motor.c: 404:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  7140   0044E6  0E35               	movlw	53
  7141   0044E8  6E29               	movwf	(??_reverseSquareLeft+1)^0,c
  7142   0044EA  0EC3               	movlw	195
  7143   0044EC  6E28               	movwf	??_reverseSquareLeft^0,c
  7144   0044EE  0E59               	movlw	89
  7145   0044F0                     u6497:
  7146   0044F0  2EE8               	decfsz	wreg,f,c
  7147   0044F2  D7FE               	bra	u6497
  7148   0044F4  2E28               	decfsz	??_reverseSquareLeft^0,f,c
  7149   0044F6  D7FC               	bra	u6497
  7150   0044F8  2E29               	decfsz	(??_reverseSquareLeft+1)^0,f,c
  7151   0044FA  D7FA               	bra	u6497
  7152   0044FC  F000               	nop	
  7153   0044FE                     
  7154                           ;MazeRobot.X/dc_motor.c: 406:     stop(mL, mR);
  7155   0044FE  C024  F018         	movff	reverseSquareLeft@mL,stop@mL
  7156   004502  C025  F019         	movff	reverseSquareLeft@mL+1,stop@mL+1
  7157   004506  C026  F01A         	movff	reverseSquareLeft@mR,stop@mR
  7158   00450A  C027  F01B         	movff	reverseSquareLeft@mR+1,stop@mR+1
  7159   00450E  ECC7  F021         	call	_stop	;wreg free
  7160   004512                     
  7161                           ;MazeRobot.X/dc_motor.c: 408:     reverse(mL, mR);
  7162   004512  C024  F018         	movff	reverseSquareLeft@mL,reverse@mL
  7163   004516  C025  F019         	movff	reverseSquareLeft@mL+1,reverse@mL+1
  7164   00451A  C026  F01A         	movff	reverseSquareLeft@mR,reverse@mR
  7165   00451E  C027  F01B         	movff	reverseSquareLeft@mR+1,reverse@mR+1
  7166   004522  EC8E  F020         	call	_reverse	;wreg free
  7167   004526                     
  7168                           ;MazeRobot.X/dc_motor.c: 409:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  7169   004526  0E35               	movlw	53
  7170   004528  6E29               	movwf	(??_reverseSquareLeft+1)^0,c
  7171   00452A  0EC3               	movlw	195
  7172   00452C  6E28               	movwf	??_reverseSquareLeft^0,c
  7173   00452E  0E59               	movlw	89
  7174   004530                     u6507:
  7175   004530  2EE8               	decfsz	wreg,f,c
  7176   004532  D7FE               	bra	u6507
  7177   004534  2E28               	decfsz	??_reverseSquareLeft^0,f,c
  7178   004536  D7FC               	bra	u6507
  7179   004538  2E29               	decfsz	(??_reverseSquareLeft+1)^0,f,c
  7180   00453A  D7FA               	bra	u6507
  7181   00453C  F000               	nop	
  7182                           
  7183                           ;MazeRobot.X/dc_motor.c: 411:     turnLeft_90(mL,mR);
  7184   00453E  C024  F01E         	movff	reverseSquareLeft@mL,turnLeft_90@mL
  7185   004542  C025  F01F         	movff	reverseSquareLeft@mL+1,turnLeft_90@mL+1
  7186   004546  C026  F020         	movff	reverseSquareLeft@mR,turnLeft_90@mR
  7187   00454A  C027  F021         	movff	reverseSquareLeft@mR+1,turnLeft_90@mR+1
  7188   00454E  ECE2  F01C         	call	_turnLeft_90	;wreg free
  7189                           
  7190                           ;MazeRobot.X/dc_motor.c: 413:     stop(mL, mR);
  7191   004552  C024  F018         	movff	reverseSquareLeft@mL,stop@mL
  7192   004556  C025  F019         	movff	reverseSquareLeft@mL+1,stop@mL+1
  7193   00455A  C026  F01A         	movff	reverseSquareLeft@mR,stop@mR
  7194   00455E  C027  F01B         	movff	reverseSquareLeft@mR+1,stop@mR+1
  7195   004562  ECC7  F021         	call	_stop	;wreg free
  7196   004566  0012               	return		;funcret
  7197   004568                     __end_of_reverseSquareLeft:
  7198                           	callstack 0
  7199                           
  7200 ;; *************** function _turnLeft_90 *****************
  7201 ;; Defined at:
  7202 ;;		line 240 in file "MazeRobot.X/dc_motor.c"
  7203 ;; Parameters:    Size  Location     Type
  7204 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  7205 ;;		 -> main@motorLeft(9), 
  7206 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  7207 ;;		 -> main@motorRight(9), 
  7208 ;; Auto vars:     Size  Location     Type
  7209 ;;		None
  7210 ;; Return value:  Size  Location     Type
  7211 ;;                  1    wreg      void 
  7212 ;; Registers used:
  7213 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7214 ;; Tracked objects:
  7215 ;;		On entry : 0/0
  7216 ;;		On exit  : 0/0
  7217 ;;		Unchanged: 0/0
  7218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7219 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7220 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7221 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7222 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7223 ;;Total ram usage:        6 bytes
  7224 ;; Hardware stack levels used: 1
  7225 ;; Hardware stack levels required when called: 5
  7226 ;; This function calls:
  7227 ;;		_reverse
  7228 ;;		_setMotorPWM
  7229 ;;		_stop
  7230 ;; This function is called by:
  7231 ;;		_colorDetect
  7232 ;;		_return_home_turns
  7233 ;;		_reverseSquareLeft
  7234 ;; This function uses a non-reentrant model
  7235 ;;
  7236                           
  7237                           	psect	text31
  7238   0039C4                     __ptext31:
  7239                           	callstack 0
  7240   0039C4                     _turnLeft_90:
  7241                           	callstack 24
  7242   0039C4                     
  7243                           ;MazeRobot.X/dc_motor.c: 240: void turnLeft_90(DC_motor *mL, DC_motor *mR);MazeRobot.X/d
      +                          c_motor.c: 241: {;MazeRobot.X/dc_motor.c: 243:     stop(mL, mR);
  7244   0039C4  C01E  F018         	movff	turnLeft_90@mL,stop@mL
  7245   0039C8  C01F  F019         	movff	turnLeft_90@mL+1,stop@mL+1
  7246   0039CC  C020  F01A         	movff	turnLeft_90@mR,stop@mR
  7247   0039D0  C021  F01B         	movff	turnLeft_90@mR+1,stop@mR+1
  7248   0039D4  ECC7  F021         	call	_stop	;wreg free
  7249   0039D8                     
  7250                           ;MazeRobot.X/dc_motor.c: 244:     _delay((unsigned long)((100)*(64000000/4000.0)));
  7251   0039D8  0E09               	movlw	9
  7252   0039DA  6E23               	movwf	(??_turnLeft_90+1)^0,c
  7253   0039DC  0E1E               	movlw	30
  7254   0039DE  6E22               	movwf	??_turnLeft_90^0,c
  7255   0039E0  0EE4               	movlw	228
  7256   0039E2                     u6517:
  7257   0039E2  2EE8               	decfsz	wreg,f,c
  7258   0039E4  D7FE               	bra	u6517
  7259   0039E6  2E22               	decfsz	??_turnLeft_90^0,f,c
  7260   0039E8  D7FC               	bra	u6517
  7261   0039EA  2E23               	decfsz	(??_turnLeft_90+1)^0,f,c
  7262   0039EC  D7FA               	bra	u6517
  7263   0039EE  D000               	nop2	
  7264   0039F0                     
  7265                           ;MazeRobot.X/dc_motor.c: 246:     reverse(mL, mR);
  7266   0039F0  C01E  F018         	movff	turnLeft_90@mL,reverse@mL
  7267   0039F4  C01F  F019         	movff	turnLeft_90@mL+1,reverse@mL+1
  7268   0039F8  C020  F01A         	movff	turnLeft_90@mR,reverse@mR
  7269   0039FC  C021  F01B         	movff	turnLeft_90@mR+1,reverse@mR+1
  7270   003A00  EC8E  F020         	call	_reverse	;wreg free
  7271                           
  7272                           ;MazeRobot.X/dc_motor.c: 247:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  7273   003A04  0E35               	movlw	53
  7274   003A06  6E23               	movwf	(??_turnLeft_90+1)^0,c
  7275   003A08  0EC3               	movlw	195
  7276   003A0A  6E22               	movwf	??_turnLeft_90^0,c
  7277   003A0C  0E59               	movlw	89
  7278   003A0E                     u6527:
  7279   003A0E  2EE8               	decfsz	wreg,f,c
  7280   003A10  D7FE               	bra	u6527
  7281   003A12  2E22               	decfsz	??_turnLeft_90^0,f,c
  7282   003A14  D7FC               	bra	u6527
  7283   003A16  2E23               	decfsz	(??_turnLeft_90+1)^0,f,c
  7284   003A18  D7FA               	bra	u6527
  7285   003A1A  F000               	nop	
  7286   003A1C                     
  7287                           ;MazeRobot.X/dc_motor.c: 249:     stop(mL, mR);
  7288   003A1C  C01E  F018         	movff	turnLeft_90@mL,stop@mL
  7289   003A20  C01F  F019         	movff	turnLeft_90@mL+1,stop@mL+1
  7290   003A24  C020  F01A         	movff	turnLeft_90@mR,stop@mR
  7291   003A28  C021  F01B         	movff	turnLeft_90@mR+1,stop@mR+1
  7292   003A2C  ECC7  F021         	call	_stop	;wreg free
  7293   003A30                     
  7294                           ;MazeRobot.X/dc_motor.c: 251:     mL->direction = 0;
  7295   003A30  EE20 F001          	lfsr	2,1
  7296   003A34  501E               	movf	turnLeft_90@mL^0,w,c
  7297   003A36  26D9               	addwf	fsr2l,f,c
  7298   003A38  501F               	movf	(turnLeft_90@mL+1)^0,w,c
  7299   003A3A  22DA               	addwfc	fsr2h,f,c
  7300   003A3C  0E00               	movlw	0
  7301   003A3E  6EDF               	movwf	indf2,c
  7302   003A40                     
  7303                           ;MazeRobot.X/dc_motor.c: 252:     mR->direction = 1;
  7304   003A40  EE20 F001          	lfsr	2,1
  7305   003A44  5020               	movf	turnLeft_90@mR^0,w,c
  7306   003A46  26D9               	addwf	fsr2l,f,c
  7307   003A48  5021               	movf	(turnLeft_90@mR+1)^0,w,c
  7308   003A4A  22DA               	addwfc	fsr2h,f,c
  7309   003A4C  0E01               	movlw	1
  7310   003A4E  6EDF               	movwf	indf2,c
  7311   003A50                     
  7312                           ;MazeRobot.X/dc_motor.c: 254:     mL->brakemode = 1;
  7313   003A50  EE20 F002          	lfsr	2,2
  7314   003A54  501E               	movf	turnLeft_90@mL^0,w,c
  7315   003A56  26D9               	addwf	fsr2l,f,c
  7316   003A58  501F               	movf	(turnLeft_90@mL+1)^0,w,c
  7317   003A5A  22DA               	addwfc	fsr2h,f,c
  7318   003A5C  0E01               	movlw	1
  7319   003A5E  6EDF               	movwf	indf2,c
  7320   003A60                     
  7321                           ;MazeRobot.X/dc_motor.c: 255:     mL->brakemode = 1;
  7322   003A60  EE20 F002          	lfsr	2,2
  7323   003A64  501E               	movf	turnLeft_90@mL^0,w,c
  7324   003A66  26D9               	addwf	fsr2l,f,c
  7325   003A68  501F               	movf	(turnLeft_90@mL+1)^0,w,c
  7326   003A6A  22DA               	addwfc	fsr2h,f,c
  7327   003A6C  0E01               	movlw	1
  7328   003A6E  6EDF               	movwf	indf2,c
  7329                           
  7330                           ;MazeRobot.X/dc_motor.c: 257:     while((mL->power < 80) || (mR->power < 80)){
  7331   003A70  EF52  F01D         	goto	l3507
  7332   003A74                     l3501:
  7333                           
  7334                           ;MazeRobot.X/dc_motor.c: 258:         mL->power += 10;
  7335   003A74  C01E  FFD9         	movff	turnLeft_90@mL,fsr2l
  7336   003A78  C01F  FFDA         	movff	turnLeft_90@mL+1,fsr2h
  7337   003A7C  0E0A               	movlw	10
  7338   003A7E  26DF               	addwf	indf2,f,c
  7339                           
  7340                           ;MazeRobot.X/dc_motor.c: 259:         mR->power += 10;
  7341   003A80  C020  FFD9         	movff	turnLeft_90@mR,fsr2l
  7342   003A84  C021  FFDA         	movff	turnLeft_90@mR+1,fsr2h
  7343   003A88  0E0A               	movlw	10
  7344   003A8A  26DF               	addwf	indf2,f,c
  7345   003A8C                     
  7346                           ;MazeRobot.X/dc_motor.c: 260:         setMotorPWM(mL);
  7347   003A8C  C01E  F012         	movff	turnLeft_90@mL,setMotorPWM@m
  7348   003A90  C01F  F013         	movff	turnLeft_90@mL+1,setMotorPWM@m+1
  7349   003A94  EC8D  F019         	call	_setMotorPWM	;wreg free
  7350   003A98                     
  7351                           ;MazeRobot.X/dc_motor.c: 261:         setMotorPWM(mR);
  7352   003A98  C020  F012         	movff	turnLeft_90@mR,setMotorPWM@m
  7353   003A9C  C021  F013         	movff	turnLeft_90@mR+1,setMotorPWM@m+1
  7354   003AA0  EC8D  F019         	call	_setMotorPWM	;wreg free
  7355   003AA4                     l3507:
  7356                           
  7357                           ;MazeRobot.X/dc_motor.c: 257:     while((mL->power < 80) || (mR->power < 80)){
  7358   003AA4  C01E  FFD9         	movff	turnLeft_90@mL,fsr2l
  7359   003AA8  C01F  FFDA         	movff	turnLeft_90@mL+1,fsr2h
  7360   003AAC  0E4F               	movlw	79
  7361   003AAE  64DF               	cpfsgt	indf2,c
  7362   003AB0  EF5C  F01D         	goto	u3151
  7363   003AB4  EF5E  F01D         	goto	u3150
  7364   003AB8                     u3151:
  7365   003AB8  EF3A  F01D         	goto	l3501
  7366   003ABC                     u3150:
  7367   003ABC  C020  FFD9         	movff	turnLeft_90@mR,fsr2l
  7368   003AC0  C021  FFDA         	movff	turnLeft_90@mR+1,fsr2h
  7369   003AC4  0E4F               	movlw	79
  7370   003AC6  64DF               	cpfsgt	indf2,c
  7371   003AC8  EF68  F01D         	goto	u3161
  7372   003ACC  EF6A  F01D         	goto	u3160
  7373   003AD0                     u3161:
  7374   003AD0  EF3A  F01D         	goto	l3501
  7375   003AD4                     u3160:
  7376   003AD4                     
  7377                           ;MazeRobot.X/dc_motor.c: 263:    _delay((unsigned long)((turning_time45)*(64000000/4000.
      +                          0)));
  7378   003AD4  0E0E               	movlw	14
  7379   003AD6  6E23               	movwf	(??_turnLeft_90+1)^0,c
  7380   003AD8  0E65               	movlw	101
  7381   003ADA  6E22               	movwf	??_turnLeft_90^0,c
  7382   003ADC  0E87               	movlw	135
  7383   003ADE                     u6537:
  7384   003ADE  2EE8               	decfsz	wreg,f,c
  7385   003AE0  D7FE               	bra	u6537
  7386   003AE2  2E22               	decfsz	??_turnLeft_90^0,f,c
  7387   003AE4  D7FC               	bra	u6537
  7388   003AE6  2E23               	decfsz	(??_turnLeft_90+1)^0,f,c
  7389   003AE8  D7FA               	bra	u6537
  7390   003AEA  F000               	nop	
  7391   003AEC                     
  7392                           ;MazeRobot.X/dc_motor.c: 264:     stop(mL, mR);
  7393   003AEC  C01E  F018         	movff	turnLeft_90@mL,stop@mL
  7394   003AF0  C01F  F019         	movff	turnLeft_90@mL+1,stop@mL+1
  7395   003AF4  C020  F01A         	movff	turnLeft_90@mR,stop@mR
  7396   003AF8  C021  F01B         	movff	turnLeft_90@mR+1,stop@mR+1
  7397   003AFC  ECC7  F021         	call	_stop	;wreg free
  7398   003B00  0012               	return		;funcret
  7399   003B02                     __end_of_turnLeft_90:
  7400                           	callstack 0
  7401                           
  7402 ;; *************** function _stop *****************
  7403 ;; Defined at:
  7404 ;;		line 117 in file "MazeRobot.X/dc_motor.c"
  7405 ;; Parameters:    Size  Location     Type
  7406 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  7407 ;;		 -> main@motorLeft(9), 
  7408 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  7409 ;;		 -> main@motorRight(9), 
  7410 ;; Auto vars:     Size  Location     Type
  7411 ;;		None
  7412 ;; Return value:  Size  Location     Type
  7413 ;;                  1    wreg      void 
  7414 ;; Registers used:
  7415 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7416 ;; Tracked objects:
  7417 ;;		On entry : 0/0
  7418 ;;		On exit  : 0/0
  7419 ;;		Unchanged: 0/0
  7420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7421 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7423 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7424 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7425 ;;Total ram usage:        6 bytes
  7426 ;; Hardware stack levels used: 1
  7427 ;; Hardware stack levels required when called: 4
  7428 ;; This function calls:
  7429 ;;		_setMotorPWM
  7430 ;; This function is called by:
  7431 ;;		_return_home_turns
  7432 ;;		_turnLeft_90
  7433 ;;		_turnRight_90
  7434 ;;		_turn_180
  7435 ;;		_turnRight_135
  7436 ;;		_turnLeft_135
  7437 ;;		_reverseSquareRight
  7438 ;;		_reverseSquareLeft
  7439 ;;		_main
  7440 ;;		_turnLeft
  7441 ;;		_turnRight
  7442 ;; This function uses a non-reentrant model
  7443 ;;
  7444                           
  7445                           	psect	text32
  7446   00438E                     __ptext32:
  7447                           	callstack 0
  7448   00438E                     _stop:
  7449                           	callstack 25
  7450   00438E                     
  7451                           ;MazeRobot.X/dc_motor.c: 119:     while ((mL->power)>0 && (mR->power)>0){
  7452   00438E  EFF9  F021         	goto	l3379
  7453   004392                     l3367:
  7454                           
  7455                           ;MazeRobot.X/dc_motor.c: 120:         if ((mL->power) >0){
  7456   004392  C018  FFD9         	movff	stop@mL,fsr2l
  7457   004396  C019  FFDA         	movff	stop@mL+1,fsr2h
  7458   00439A  50DF               	movf	indf2,w,c
  7459   00439C  B4D8               	btfsc	status,2,c
  7460   00439E  EFD3  F021         	goto	u3021
  7461   0043A2  EFD5  F021         	goto	u3020
  7462   0043A6                     u3021:
  7463   0043A6  EFDB  F021         	goto	l3371
  7464   0043AA                     u3020:
  7465   0043AA                     
  7466                           ;MazeRobot.X/dc_motor.c: 121:             mL->power -= 5;
  7467   0043AA  C018  FFD9         	movff	stop@mL,fsr2l
  7468   0043AE  C019  FFDA         	movff	stop@mL+1,fsr2h
  7469   0043B2  0E05               	movlw	5
  7470   0043B4  5EDF               	subwf	indf2,f,c
  7471   0043B6                     l3371:
  7472                           
  7473                           ;MazeRobot.X/dc_motor.c: 123:         if ((mR->power) >0){
  7474   0043B6  C01A  FFD9         	movff	stop@mR,fsr2l
  7475   0043BA  C01B  FFDA         	movff	stop@mR+1,fsr2h
  7476   0043BE  50DF               	movf	indf2,w,c
  7477   0043C0  B4D8               	btfsc	status,2,c
  7478   0043C2  EFE5  F021         	goto	u3031
  7479   0043C6  EFE7  F021         	goto	u3030
  7480   0043CA                     u3031:
  7481   0043CA  EFED  F021         	goto	l3375
  7482   0043CE                     u3030:
  7483   0043CE                     
  7484                           ;MazeRobot.X/dc_motor.c: 124:             mR->power -= 5;
  7485   0043CE  C01A  FFD9         	movff	stop@mR,fsr2l
  7486   0043D2  C01B  FFDA         	movff	stop@mR+1,fsr2h
  7487   0043D6  0E05               	movlw	5
  7488   0043D8  5EDF               	subwf	indf2,f,c
  7489   0043DA                     l3375:
  7490                           
  7491                           ;MazeRobot.X/dc_motor.c: 127:         setMotorPWM(mL);
  7492   0043DA  C018  F012         	movff	stop@mL,setMotorPWM@m
  7493   0043DE  C019  F013         	movff	stop@mL+1,setMotorPWM@m+1
  7494   0043E2  EC8D  F019         	call	_setMotorPWM	;wreg free
  7495   0043E6                     
  7496                           ;MazeRobot.X/dc_motor.c: 128:         setMotorPWM(mR);
  7497   0043E6  C01A  F012         	movff	stop@mR,setMotorPWM@m
  7498   0043EA  C01B  F013         	movff	stop@mR+1,setMotorPWM@m+1
  7499   0043EE  EC8D  F019         	call	_setMotorPWM	;wreg free
  7500   0043F2                     l3379:
  7501                           
  7502                           ;MazeRobot.X/dc_motor.c: 119:     while ((mL->power)>0 && (mR->power)>0){
  7503   0043F2  C018  FFD9         	movff	stop@mL,fsr2l
  7504   0043F6  C019  FFDA         	movff	stop@mL+1,fsr2h
  7505   0043FA  50DF               	movf	indf2,w,c
  7506   0043FC  B4D8               	btfsc	status,2,c
  7507   0043FE  EF03  F022         	goto	u3041
  7508   004402  EF05  F022         	goto	u3040
  7509   004406                     u3041:
  7510   004406  EF11  F022         	goto	l3383
  7511   00440A                     u3040:
  7512   00440A  C01A  FFD9         	movff	stop@mR,fsr2l
  7513   00440E  C01B  FFDA         	movff	stop@mR+1,fsr2h
  7514   004412  50DF               	movf	indf2,w,c
  7515   004414  A4D8               	btfss	status,2,c
  7516   004416  EF0F  F022         	goto	u3051
  7517   00441A  EF11  F022         	goto	u3050
  7518   00441E                     u3051:
  7519   00441E  EFC9  F021         	goto	l3367
  7520   004422                     u3050:
  7521   004422                     l3383:
  7522                           
  7523                           ;MazeRobot.X/dc_motor.c: 130:     _delay((unsigned long)((100)*(64000000/4000.0)));
  7524   004422  0E09               	movlw	9
  7525   004424  6E1D               	movwf	(??_stop+1)^0,c
  7526   004426  0E1E               	movlw	30
  7527   004428  6E1C               	movwf	??_stop^0,c
  7528   00442A  0EE4               	movlw	228
  7529   00442C                     u6547:
  7530   00442C  2EE8               	decfsz	wreg,f,c
  7531   00442E  D7FE               	bra	u6547
  7532   004430  2E1C               	decfsz	??_stop^0,f,c
  7533   004432  D7FC               	bra	u6547
  7534   004434  2E1D               	decfsz	(??_stop+1)^0,f,c
  7535   004436  D7FA               	bra	u6547
  7536   004438  D000               	nop2	
  7537   00443A  0012               	return		;funcret
  7538   00443C                     __end_of_stop:
  7539                           	callstack 0
  7540                           
  7541 ;; *************** function _reverse *****************
  7542 ;; Defined at:
  7543 ;;		line 157 in file "MazeRobot.X/dc_motor.c"
  7544 ;; Parameters:    Size  Location     Type
  7545 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  7546 ;;		 -> main@motorLeft(9), 
  7547 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  7548 ;;		 -> main@motorRight(9), 
  7549 ;; Auto vars:     Size  Location     Type
  7550 ;;		None
  7551 ;; Return value:  Size  Location     Type
  7552 ;;                  1    wreg      void 
  7553 ;; Registers used:
  7554 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7555 ;; Tracked objects:
  7556 ;;		On entry : 0/0
  7557 ;;		On exit  : 0/0
  7558 ;;		Unchanged: 0/0
  7559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7560 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7561 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7562 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7563 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7564 ;;Total ram usage:        5 bytes
  7565 ;; Hardware stack levels used: 1
  7566 ;; Hardware stack levels required when called: 4
  7567 ;; This function calls:
  7568 ;;		_setMotorPWM
  7569 ;; This function is called by:
  7570 ;;		_turnLeft_90
  7571 ;;		_turnRight_90
  7572 ;;		_turn_180
  7573 ;;		_turnRight_135
  7574 ;;		_turnLeft_135
  7575 ;;		_reverseSquareRight
  7576 ;;		_reverseSquareLeft
  7577 ;;		_turnLeft
  7578 ;;		_turnRight
  7579 ;; This function uses a non-reentrant model
  7580 ;;
  7581                           
  7582                           	psect	text33
  7583   00411C                     __ptext33:
  7584                           	callstack 0
  7585   00411C                     _reverse:
  7586                           	callstack 25
  7587   00411C                     
  7588                           ;MazeRobot.X/dc_motor.c: 157: void reverse(DC_motor *mL, DC_motor *mR);MazeRobot.X/dc_mo
      +                          tor.c: 158: {;MazeRobot.X/dc_motor.c: 159:     mL->direction = 0;
  7589   00411C  EE20 F001          	lfsr	2,1
  7590   004120  5018               	movf	reverse@mL^0,w,c
  7591   004122  26D9               	addwf	fsr2l,f,c
  7592   004124  5019               	movf	(reverse@mL+1)^0,w,c
  7593   004126  22DA               	addwfc	fsr2h,f,c
  7594   004128  0E00               	movlw	0
  7595   00412A  6EDF               	movwf	indf2,c
  7596                           
  7597                           ;MazeRobot.X/dc_motor.c: 160:     mR->direction = 0;
  7598   00412C  EE20 F001          	lfsr	2,1
  7599   004130  501A               	movf	reverse@mR^0,w,c
  7600   004132  26D9               	addwf	fsr2l,f,c
  7601   004134  501B               	movf	(reverse@mR+1)^0,w,c
  7602   004136  22DA               	addwfc	fsr2h,f,c
  7603   004138  0E00               	movlw	0
  7604   00413A  6EDF               	movwf	indf2,c
  7605                           
  7606                           ;MazeRobot.X/dc_motor.c: 162:     mL->brakemode = 1;
  7607   00413C  EE20 F002          	lfsr	2,2
  7608   004140  5018               	movf	reverse@mL^0,w,c
  7609   004142  26D9               	addwf	fsr2l,f,c
  7610   004144  5019               	movf	(reverse@mL+1)^0,w,c
  7611   004146  22DA               	addwfc	fsr2h,f,c
  7612   004148  0E01               	movlw	1
  7613   00414A  6EDF               	movwf	indf2,c
  7614                           
  7615                           ;MazeRobot.X/dc_motor.c: 163:     mL->brakemode = 1;
  7616   00414C  EE20 F002          	lfsr	2,2
  7617   004150  5018               	movf	reverse@mL^0,w,c
  7618   004152  26D9               	addwf	fsr2l,f,c
  7619   004154  5019               	movf	(reverse@mL+1)^0,w,c
  7620   004156  22DA               	addwfc	fsr2h,f,c
  7621   004158  0E01               	movlw	1
  7622   00415A  6EDF               	movwf	indf2,c
  7623                           
  7624                           ;MazeRobot.X/dc_motor.c: 165:     while ((mL->power)<25 && (mR->power)<25){
  7625   00415C  EFD4  F020         	goto	l3395
  7626   004160                     l3387:
  7627                           
  7628                           ;MazeRobot.X/dc_motor.c: 166:         if ((mL->power) < 25){
  7629   004160  C018  FFD9         	movff	reverse@mL,fsr2l
  7630   004164  C019  FFDA         	movff	reverse@mL+1,fsr2h
  7631   004168  0E19               	movlw	25
  7632   00416A  60DF               	cpfslt	indf2,c
  7633   00416C  EFBA  F020         	goto	u3061
  7634   004170  EFBC  F020         	goto	u3060
  7635   004174                     u3061:
  7636   004174  EFC2  F020         	goto	l3391
  7637   004178                     u3060:
  7638   004178                     
  7639                           ;MazeRobot.X/dc_motor.c: 167:             mL->power += 5;
  7640   004178  C018  FFD9         	movff	reverse@mL,fsr2l
  7641   00417C  C019  FFDA         	movff	reverse@mL+1,fsr2h
  7642   004180  0E05               	movlw	5
  7643   004182  26DF               	addwf	indf2,f,c
  7644   004184                     l3391:
  7645                           
  7646                           ;MazeRobot.X/dc_motor.c: 169:         if ((mR->power) <25){
  7647   004184  C01A  FFD9         	movff	reverse@mR,fsr2l
  7648   004188  C01B  FFDA         	movff	reverse@mR+1,fsr2h
  7649   00418C  0E19               	movlw	25
  7650   00418E  60DF               	cpfslt	indf2,c
  7651   004190  EFCC  F020         	goto	u3071
  7652   004194  EFCE  F020         	goto	u3070
  7653   004198                     u3071:
  7654   004198  EFD4  F020         	goto	l3395
  7655   00419C                     u3070:
  7656   00419C                     
  7657                           ;MazeRobot.X/dc_motor.c: 170:             mR->power += 5;
  7658   00419C  C01A  FFD9         	movff	reverse@mR,fsr2l
  7659   0041A0  C01B  FFDA         	movff	reverse@mR+1,fsr2h
  7660   0041A4  0E05               	movlw	5
  7661   0041A6  26DF               	addwf	indf2,f,c
  7662   0041A8                     l3395:
  7663                           
  7664                           ;MazeRobot.X/dc_motor.c: 165:     while ((mL->power)<25 && (mR->power)<25){
  7665   0041A8  C018  FFD9         	movff	reverse@mL,fsr2l
  7666   0041AC  C019  FFDA         	movff	reverse@mL+1,fsr2h
  7667   0041B0  0E19               	movlw	25
  7668   0041B2  60DF               	cpfslt	indf2,c
  7669   0041B4  EFDE  F020         	goto	u3081
  7670   0041B8  EFE0  F020         	goto	u3080
  7671   0041BC                     u3081:
  7672   0041BC  EFEC  F020         	goto	l3399
  7673   0041C0                     u3080:
  7674   0041C0  C01A  FFD9         	movff	reverse@mR,fsr2l
  7675   0041C4  C01B  FFDA         	movff	reverse@mR+1,fsr2h
  7676   0041C8  0E18               	movlw	24
  7677   0041CA  64DF               	cpfsgt	indf2,c
  7678   0041CC  EFEA  F020         	goto	u3091
  7679   0041D0  EFEC  F020         	goto	u3090
  7680   0041D4                     u3091:
  7681   0041D4  EFB0  F020         	goto	l3387
  7682   0041D8                     u3090:
  7683   0041D8                     l3399:
  7684                           
  7685                           ;MazeRobot.X/dc_motor.c: 174:     setMotorPWM(mL);
  7686   0041D8  C018  F012         	movff	reverse@mL,setMotorPWM@m
  7687   0041DC  C019  F013         	movff	reverse@mL+1,setMotorPWM@m+1
  7688   0041E0  EC8D  F019         	call	_setMotorPWM	;wreg free
  7689                           
  7690                           ;MazeRobot.X/dc_motor.c: 175:     setMotorPWM(mR);
  7691   0041E4  C01A  F012         	movff	reverse@mR,setMotorPWM@m
  7692   0041E8  C01B  F013         	movff	reverse@mR+1,setMotorPWM@m+1
  7693   0041EC  EC8D  F019         	call	_setMotorPWM	;wreg free
  7694   0041F0  0012               	return		;funcret
  7695   0041F2                     __end_of_reverse:
  7696                           	callstack 0
  7697                           
  7698 ;; *************** function _setMotorPWM *****************
  7699 ;; Defined at:
  7700 ;;		line 94 in file "MazeRobot.X/dc_motor.c"
  7701 ;; Parameters:    Size  Location     Type
  7702 ;;  m               2   17[COMRAM] PTR struct DC_motor
  7703 ;;		 -> main@motorRight(9), main@motorLeft(9), 
  7704 ;; Auto vars:     Size  Location     Type
  7705 ;;  negDuty         1   22[COMRAM] unsigned char 
  7706 ;;  posDuty         1   21[COMRAM] unsigned char 
  7707 ;; Return value:  Size  Location     Type
  7708 ;;                  1    wreg      void 
  7709 ;; Registers used:
  7710 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7711 ;; Tracked objects:
  7712 ;;		On entry : 0/0
  7713 ;;		On exit  : 0/0
  7714 ;;		Unchanged: 0/0
  7715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7716 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7717 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7718 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7719 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7720 ;;Total ram usage:        6 bytes
  7721 ;; Hardware stack levels used: 1
  7722 ;; Hardware stack levels required when called: 3
  7723 ;; This function calls:
  7724 ;;		___lwdiv
  7725 ;;		___wmul
  7726 ;; This function is called by:
  7727 ;;		_stop
  7728 ;;		_forward
  7729 ;;		_reverse
  7730 ;;		_turnLeft_90
  7731 ;;		_turnRight_90
  7732 ;;		_turn_180
  7733 ;;		_turnRight_135
  7734 ;;		_turnLeft_135
  7735 ;;		_turnLeft
  7736 ;;		_turnRight
  7737 ;; This function uses a non-reentrant model
  7738 ;;
  7739                           
  7740                           	psect	text34
  7741   00331A                     __ptext34:
  7742                           	callstack 0
  7743   00331A                     _setMotorPWM:
  7744                           	callstack 25
  7745   00331A                     
  7746                           ;MazeRobot.X/dc_motor.c: 94: void setMotorPWM(DC_motor *m);MazeRobot.X/dc_motor.c: 95: {
      +                          ;MazeRobot.X/dc_motor.c: 96:     unsigned char posDuty, negDuty;;MazeRobot.X/dc_motor.c:
      +                           98:     if(m->brakemode) {
  7747   00331A  EE20 F002          	lfsr	2,2
  7748   00331E  5012               	movf	setMotorPWM@m^0,w,c
  7749   003320  26D9               	addwf	fsr2l,f,c
  7750   003322  5013               	movf	(setMotorPWM@m+1)^0,w,c
  7751   003324  22DA               	addwfc	fsr2h,f,c
  7752   003326  50DF               	movf	indf2,w,c
  7753   003328  B4D8               	btfsc	status,2,c
  7754   00332A  EF99  F019         	goto	u2861
  7755   00332E  EF9B  F019         	goto	u2860
  7756   003332                     u2861:
  7757   003332  EFCF  F019         	goto	l3269
  7758   003336                     u2860:
  7759   003336                     
  7760                           ;MazeRobot.X/dc_motor.c: 99:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m
      +                          ->PWMperiod))/100;
  7761   003336  C012  FFD9         	movff	setMotorPWM@m,fsr2l
  7762   00333A  C013  FFDA         	movff	setMotorPWM@m+1,fsr2h
  7763   00333E  50DF               	movf	indf2,w,c
  7764   003340  6E14               	movwf	??_setMotorPWM^0,c
  7765   003342  5014               	movf	??_setMotorPWM^0,w,c
  7766   003344  6E05               	movwf	___wmul@multiplier^0,c
  7767   003346  6A06               	clrf	(___wmul@multiplier+1)^0,c
  7768   003348  EE20 F003          	lfsr	2,3
  7769   00334C  5012               	movf	setMotorPWM@m^0,w,c
  7770   00334E  26D9               	addwf	fsr2l,f,c
  7771   003350  5013               	movf	(setMotorPWM@m+1)^0,w,c
  7772   003352  22DA               	addwfc	fsr2h,f,c
  7773   003354  CFDE F007          	movff	postinc2,___wmul@multiplicand
  7774   003358  CFDD F008          	movff	postdec2,___wmul@multiplicand+1
  7775   00335C  ECF2  F025         	call	___wmul	;wreg free
  7776   003360  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  7777   003364  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  7778   003368  0E00               	movlw	0
  7779   00336A  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  7780   00336C  0E64               	movlw	100
  7781   00336E  6E0D               	movwf	___lwdiv@divisor^0,c
  7782   003370  EC39  F023         	call	___lwdiv	;wreg free
  7783   003374  EE20 F003          	lfsr	2,3
  7784   003378  5012               	movf	setMotorPWM@m^0,w,c
  7785   00337A  26D9               	addwf	fsr2l,f,c
  7786   00337C  5013               	movf	(setMotorPWM@m+1)^0,w,c
  7787   00337E  22DA               	addwfc	fsr2h,f,c
  7788   003380  50DF               	movf	indf2,w,c
  7789   003382  6E15               	movwf	(??_setMotorPWM+1)^0,c
  7790   003384  500B               	movf	?___lwdiv^0,w,c
  7791   003386  5C15               	subwf	(??_setMotorPWM+1)^0,w,c
  7792   003388  6E16               	movwf	setMotorPWM@posDuty^0,c
  7793   00338A                     
  7794                           ;MazeRobot.X/dc_motor.c: 100:         negDuty=m->PWMperiod;
  7795   00338A  EE20 F003          	lfsr	2,3
  7796   00338E  5012               	movf	setMotorPWM@m^0,w,c
  7797   003390  26D9               	addwf	fsr2l,f,c
  7798   003392  5013               	movf	(setMotorPWM@m+1)^0,w,c
  7799   003394  22DA               	addwfc	fsr2h,f,c
  7800   003396  50DF               	movf	indf2,w,c
  7801   003398  6E17               	movwf	setMotorPWM@negDuty^0,c
  7802                           
  7803                           ;MazeRobot.X/dc_motor.c: 101:     }
  7804   00339A  EFF2  F019         	goto	l3273
  7805   00339E                     l3269:
  7806                           
  7807                           ;MazeRobot.X/dc_motor.c: 103:         posDuty=0;
  7808   00339E  0E00               	movlw	0
  7809   0033A0  6E16               	movwf	setMotorPWM@posDuty^0,c
  7810   0033A2                     
  7811                           ;MazeRobot.X/dc_motor.c: 104:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  7812   0033A2  C012  FFD9         	movff	setMotorPWM@m,fsr2l
  7813   0033A6  C013  FFDA         	movff	setMotorPWM@m+1,fsr2h
  7814   0033AA  50DF               	movf	indf2,w,c
  7815   0033AC  6E14               	movwf	??_setMotorPWM^0,c
  7816   0033AE  5014               	movf	??_setMotorPWM^0,w,c
  7817   0033B0  6E05               	movwf	___wmul@multiplier^0,c
  7818   0033B2  6A06               	clrf	(___wmul@multiplier+1)^0,c
  7819   0033B4  EE20 F003          	lfsr	2,3
  7820   0033B8  5012               	movf	setMotorPWM@m^0,w,c
  7821   0033BA  26D9               	addwf	fsr2l,f,c
  7822   0033BC  5013               	movf	(setMotorPWM@m+1)^0,w,c
  7823   0033BE  22DA               	addwfc	fsr2h,f,c
  7824   0033C0  CFDE F007          	movff	postinc2,___wmul@multiplicand
  7825   0033C4  CFDD F008          	movff	postdec2,___wmul@multiplicand+1
  7826   0033C8  ECF2  F025         	call	___wmul	;wreg free
  7827   0033CC  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  7828   0033D0  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  7829   0033D4  0E00               	movlw	0
  7830   0033D6  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  7831   0033D8  0E64               	movlw	100
  7832   0033DA  6E0D               	movwf	___lwdiv@divisor^0,c
  7833   0033DC  EC39  F023         	call	___lwdiv	;wreg free
  7834   0033E0  500B               	movf	?___lwdiv^0,w,c
  7835   0033E2  6E17               	movwf	setMotorPWM@negDuty^0,c
  7836   0033E4                     l3273:
  7837                           
  7838                           ;MazeRobot.X/dc_motor.c: 107:     if (m->direction) {
  7839   0033E4  EE20 F001          	lfsr	2,1
  7840   0033E8  5012               	movf	setMotorPWM@m^0,w,c
  7841   0033EA  26D9               	addwf	fsr2l,f,c
  7842   0033EC  5013               	movf	(setMotorPWM@m+1)^0,w,c
  7843   0033EE  22DA               	addwfc	fsr2h,f,c
  7844   0033F0  50DF               	movf	indf2,w,c
  7845   0033F2  B4D8               	btfsc	status,2,c
  7846   0033F4  EFFE  F019         	goto	u2871
  7847   0033F8  EF00  F01A         	goto	u2870
  7848   0033FC                     u2871:
  7849   0033FC  EF22  F01A         	goto	l3277
  7850   003400                     u2870:
  7851   003400                     
  7852                           ;MazeRobot.X/dc_motor.c: 108:         *(m->posDutyHighByte)=posDuty;
  7853   003400  EE20 F005          	lfsr	2,5
  7854   003404  5012               	movf	setMotorPWM@m^0,w,c
  7855   003406  26D9               	addwf	fsr2l,f,c
  7856   003408  5013               	movf	(setMotorPWM@m+1)^0,w,c
  7857   00340A  22DA               	addwfc	fsr2h,f,c
  7858   00340C  CFDE F014          	movff	postinc2,??_setMotorPWM
  7859   003410  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  7860   003414  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  7861   003418  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7862   00341C  C016  FFDF         	movff	setMotorPWM@posDuty,indf2
  7863                           
  7864                           ;MazeRobot.X/dc_motor.c: 109:         *(m->negDutyHighByte)=negDuty;
  7865   003420  EE20 F007          	lfsr	2,7
  7866   003424  5012               	movf	setMotorPWM@m^0,w,c
  7867   003426  26D9               	addwf	fsr2l,f,c
  7868   003428  5013               	movf	(setMotorPWM@m+1)^0,w,c
  7869   00342A  22DA               	addwfc	fsr2h,f,c
  7870   00342C  CFDE F014          	movff	postinc2,??_setMotorPWM
  7871   003430  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  7872   003434  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  7873   003438  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7874   00343C  C017  FFDF         	movff	setMotorPWM@negDuty,indf2
  7875                           
  7876                           ;MazeRobot.X/dc_motor.c: 110:     } else {
  7877   003440  EF42  F01A         	goto	l204
  7878   003444                     l3277:
  7879                           
  7880                           ;MazeRobot.X/dc_motor.c: 111:         *(m->posDutyHighByte)=negDuty;
  7881   003444  EE20 F005          	lfsr	2,5
  7882   003448  5012               	movf	setMotorPWM@m^0,w,c
  7883   00344A  26D9               	addwf	fsr2l,f,c
  7884   00344C  5013               	movf	(setMotorPWM@m+1)^0,w,c
  7885   00344E  22DA               	addwfc	fsr2h,f,c
  7886   003450  CFDE F014          	movff	postinc2,??_setMotorPWM
  7887   003454  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  7888   003458  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  7889   00345C  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7890   003460  C017  FFDF         	movff	setMotorPWM@negDuty,indf2
  7891                           
  7892                           ;MazeRobot.X/dc_motor.c: 112:         *(m->negDutyHighByte)=posDuty;
  7893   003464  EE20 F007          	lfsr	2,7
  7894   003468  5012               	movf	setMotorPWM@m^0,w,c
  7895   00346A  26D9               	addwf	fsr2l,f,c
  7896   00346C  5013               	movf	(setMotorPWM@m+1)^0,w,c
  7897   00346E  22DA               	addwfc	fsr2h,f,c
  7898   003470  CFDE F014          	movff	postinc2,??_setMotorPWM
  7899   003474  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  7900   003478  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  7901   00347C  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7902   003480  C016  FFDF         	movff	setMotorPWM@posDuty,indf2
  7903   003484                     l204:
  7904   003484  0012               	return		;funcret
  7905   003486                     __end_of_setMotorPWM:
  7906                           	callstack 0
  7907                           
  7908 ;; *************** function ___wmul *****************
  7909 ;; Defined at:
  7910 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  7911 ;; Parameters:    Size  Location     Type
  7912 ;;  multiplier      2    4[COMRAM] unsigned int 
  7913 ;;  multiplicand    2    6[COMRAM] unsigned int 
  7914 ;; Auto vars:     Size  Location     Type
  7915 ;;  product         2    8[COMRAM] unsigned int 
  7916 ;; Return value:  Size  Location     Type
  7917 ;;                  2    4[COMRAM] unsigned int 
  7918 ;; Registers used:
  7919 ;;		wreg, status,2, status,0, prodl, prodh
  7920 ;; Tracked objects:
  7921 ;;		On entry : 0/0
  7922 ;;		On exit  : 0/0
  7923 ;;		Unchanged: 0/0
  7924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7925 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7926 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7928 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7929 ;;Total ram usage:        6 bytes
  7930 ;; Hardware stack levels used: 1
  7931 ;; Hardware stack levels required when called: 2
  7932 ;; This function calls:
  7933 ;;		Nothing
  7934 ;; This function is called by:
  7935 ;;		_setMotorPWM
  7936 ;; This function uses a non-reentrant model
  7937 ;;
  7938                           
  7939                           	psect	text35
  7940   004BE4                     __ptext35:
  7941                           	callstack 0
  7942   004BE4                     ___wmul:
  7943                           	callstack 25
  7944   004BE4  5005               	movf	___wmul@multiplier^0,w,c
  7945   004BE6  0207               	mulwf	___wmul@multiplicand^0,c
  7946   004BE8  CFF3 F009          	movff	prodl,___wmul@product
  7947   004BEC  CFF4 F00A          	movff	prodh,___wmul@product+1
  7948   004BF0  5005               	movf	___wmul@multiplier^0,w,c
  7949   004BF2  0208               	mulwf	(___wmul@multiplicand+1)^0,c
  7950   004BF4  50F3               	movf	243,w,c
  7951   004BF6  260A               	addwf	(___wmul@product+1)^0,f,c
  7952   004BF8  5006               	movf	(___wmul@multiplier+1)^0,w,c
  7953   004BFA  0207               	mulwf	___wmul@multiplicand^0,c
  7954   004BFC  50F3               	movf	243,w,c
  7955   004BFE  260A               	addwf	(___wmul@product+1)^0,f,c
  7956   004C00  C009  F005         	movff	___wmul@product,?___wmul
  7957   004C04  C00A  F006         	movff	___wmul@product+1,?___wmul+1
  7958   004C08  0012               	return		;funcret
  7959   004C0A                     __end_of___wmul:
  7960                           	callstack 0
  7961                           
  7962 ;; *************** function ___lwdiv *****************
  7963 ;; Defined at:
  7964 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  7965 ;; Parameters:    Size  Location     Type
  7966 ;;  dividend        2   10[COMRAM] unsigned int 
  7967 ;;  divisor         2   12[COMRAM] unsigned int 
  7968 ;; Auto vars:     Size  Location     Type
  7969 ;;  quotient        2   14[COMRAM] unsigned int 
  7970 ;;  counter         1   16[COMRAM] unsigned char 
  7971 ;; Return value:  Size  Location     Type
  7972 ;;                  2   10[COMRAM] unsigned int 
  7973 ;; Registers used:
  7974 ;;		wreg, status,2, status,0
  7975 ;; Tracked objects:
  7976 ;;		On entry : 0/0
  7977 ;;		On exit  : 0/0
  7978 ;;		Unchanged: 0/0
  7979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7980 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7981 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7983 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7984 ;;Total ram usage:        7 bytes
  7985 ;; Hardware stack levels used: 1
  7986 ;; Hardware stack levels required when called: 2
  7987 ;; This function calls:
  7988 ;;		Nothing
  7989 ;; This function is called by:
  7990 ;;		_setMotorPWM
  7991 ;; This function uses a non-reentrant model
  7992 ;;
  7993                           
  7994                           	psect	text36
  7995   004672                     __ptext36:
  7996                           	callstack 0
  7997   004672                     ___lwdiv:
  7998                           	callstack 25
  7999   004672  0E00               	movlw	0
  8000   004674  6E10               	movwf	(___lwdiv@quotient+1)^0,c
  8001   004676  0E00               	movlw	0
  8002   004678  6E0F               	movwf	___lwdiv@quotient^0,c
  8003   00467A  500D               	movf	___lwdiv@divisor^0,w,c
  8004   00467C  100E               	iorwf	(___lwdiv@divisor+1)^0,w,c
  8005   00467E  B4D8               	btfsc	status,2,c
  8006   004680  EF44  F023         	goto	u2801
  8007   004684  EF46  F023         	goto	u2800
  8008   004688                     u2801:
  8009   004688  EF6E  F023         	goto	l1044
  8010   00468C                     u2800:
  8011   00468C  0E01               	movlw	1
  8012   00468E  6E11               	movwf	___lwdiv@counter^0,c
  8013   004690  EF4E  F023         	goto	l3231
  8014   004694                     l3229:
  8015   004694  90D8               	bcf	status,0,c
  8016   004696  360D               	rlcf	___lwdiv@divisor^0,f,c
  8017   004698  360E               	rlcf	(___lwdiv@divisor+1)^0,f,c
  8018   00469A  2A11               	incf	___lwdiv@counter^0,f,c
  8019   00469C                     l3231:
  8020   00469C  AE0E               	btfss	(___lwdiv@divisor+1)^0,7,c
  8021   00469E  EF53  F023         	goto	u2811
  8022   0046A2  EF55  F023         	goto	u2810
  8023   0046A6                     u2811:
  8024   0046A6  EF4A  F023         	goto	l3229
  8025   0046AA                     u2810:
  8026   0046AA                     l3233:
  8027   0046AA  90D8               	bcf	status,0,c
  8028   0046AC  360F               	rlcf	___lwdiv@quotient^0,f,c
  8029   0046AE  3610               	rlcf	(___lwdiv@quotient+1)^0,f,c
  8030   0046B0  500D               	movf	___lwdiv@divisor^0,w,c
  8031   0046B2  5C0B               	subwf	___lwdiv@dividend^0,w,c
  8032   0046B4  500E               	movf	(___lwdiv@divisor+1)^0,w,c
  8033   0046B6  580C               	subwfb	(___lwdiv@dividend+1)^0,w,c
  8034   0046B8  A0D8               	btfss	status,0,c
  8035   0046BA  EF61  F023         	goto	u2821
  8036   0046BE  EF63  F023         	goto	u2820
  8037   0046C2                     u2821:
  8038   0046C2  EF68  F023         	goto	l3241
  8039   0046C6                     u2820:
  8040   0046C6  500D               	movf	___lwdiv@divisor^0,w,c
  8041   0046C8  5E0B               	subwf	___lwdiv@dividend^0,f,c
  8042   0046CA  500E               	movf	(___lwdiv@divisor+1)^0,w,c
  8043   0046CC  5A0C               	subwfb	(___lwdiv@dividend+1)^0,f,c
  8044   0046CE  800F               	bsf	___lwdiv@quotient^0,0,c
  8045   0046D0                     l3241:
  8046   0046D0  90D8               	bcf	status,0,c
  8047   0046D2  320E               	rrcf	(___lwdiv@divisor+1)^0,f,c
  8048   0046D4  320D               	rrcf	___lwdiv@divisor^0,f,c
  8049   0046D6  2E11               	decfsz	___lwdiv@counter^0,f,c
  8050   0046D8  EF55  F023         	goto	l3233
  8051   0046DC                     l1044:
  8052   0046DC  C00F  F00B         	movff	___lwdiv@quotient,?___lwdiv
  8053   0046E0  C010  F00C         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8054   0046E4  0012               	return		;funcret
  8055   0046E6                     __end_of___lwdiv:
  8056                           	callstack 0
  8057                           
  8058 ;; *************** function ___xxtofl *****************
  8059 ;; Defined at:
  8060 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\xxtofl.c"
  8061 ;; Parameters:    Size  Location     Type
  8062 ;;  sign            1    wreg     unsigned char 
  8063 ;;  val             4    4[COMRAM] long 
  8064 ;; Auto vars:     Size  Location     Type
  8065 ;;  sign            1   12[COMRAM] unsigned char 
  8066 ;;  arg             4   14[COMRAM] unsigned long 
  8067 ;;  exp             1   13[COMRAM] unsigned char 
  8068 ;; Return value:  Size  Location     Type
  8069 ;;                  4    4[COMRAM] unsigned char 
  8070 ;; Registers used:
  8071 ;;		wreg, status,2, status,0
  8072 ;; Tracked objects:
  8073 ;;		On entry : 0/0
  8074 ;;		On exit  : 0/0
  8075 ;;		Unchanged: 0/0
  8076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8077 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8078 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8079 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8080 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8081 ;;Total ram usage:       14 bytes
  8082 ;; Hardware stack levels used: 1
  8083 ;; Hardware stack levels required when called: 2
  8084 ;; This function calls:
  8085 ;;		Nothing
  8086 ;; This function is called by:
  8087 ;;		_colorDetect
  8088 ;;		_turnLeft_90
  8089 ;;		_turnRight_90
  8090 ;;		_turn_180
  8091 ;;		_turnRight_135
  8092 ;;		_turnLeft_135
  8093 ;;		_reverseSquareRight
  8094 ;;		_reverseSquareLeft
  8095 ;;		_main
  8096 ;;		_turnLeft
  8097 ;;		_turnRight
  8098 ;; This function uses a non-reentrant model
  8099 ;;
  8100                           
  8101                           	psect	text37
  8102   002FDE                     __ptext37:
  8103                           	callstack 0
  8104   002FDE                     ___xxtofl:
  8105                           	callstack 27
  8106                           
  8107                           ;incstack = 0
  8108                           ;___xxtofl@sign stored from wreg
  8109   002FDE  6E0D               	movwf	___xxtofl@sign^0,c
  8110   002FE0  500D               	movf	___xxtofl@sign^0,w,c
  8111   002FE2  B4D8               	btfsc	status,2,c
  8112   002FE4  EFF6  F017         	goto	u4191
  8113   002FE8  EFF8  F017         	goto	u4190
  8114   002FEC                     u4191:
  8115   002FEC  EF1A  F018         	goto	l1208
  8116   002FF0                     u4190:
  8117   002FF0  BE08               	btfsc	(___xxtofl@val+3)^0,7,c
  8118   002FF2  EFFF  F017         	goto	u4200
  8119   002FF6  EFFD  F017         	goto	u4201
  8120   002FFA                     u4201:
  8121   002FFA  EF1A  F018         	goto	l1208
  8122   002FFE                     u4200:
  8123   002FFE  C005  F009         	movff	___xxtofl@val,??___xxtofl
  8124   003002  C006  F00A         	movff	___xxtofl@val+1,??___xxtofl+1
  8125   003006  C007  F00B         	movff	___xxtofl@val+2,??___xxtofl+2
  8126   00300A  C008  F00C         	movff	___xxtofl@val+3,??___xxtofl+3
  8127   00300E  1E09               	comf	??___xxtofl^0,f,c
  8128   003010  1E0A               	comf	(??___xxtofl+1)^0,f,c
  8129   003012  1E0B               	comf	(??___xxtofl+2)^0,f,c
  8130   003014  1E0C               	comf	(??___xxtofl+3)^0,f,c
  8131   003016  2A09               	incf	??___xxtofl^0,f,c
  8132   003018  0E00               	movlw	0
  8133   00301A  220A               	addwfc	(??___xxtofl+1)^0,f,c
  8134   00301C  220B               	addwfc	(??___xxtofl+2)^0,f,c
  8135   00301E  220C               	addwfc	(??___xxtofl+3)^0,f,c
  8136   003020  C009  F00F         	movff	??___xxtofl,___xxtofl@arg
  8137   003024  C00A  F010         	movff	??___xxtofl+1,___xxtofl@arg+1
  8138   003028  C00B  F011         	movff	??___xxtofl+2,___xxtofl@arg+2
  8139   00302C  C00C  F012         	movff	??___xxtofl+3,___xxtofl@arg+3
  8140   003030  EF22  F018         	goto	l4207
  8141   003034                     l1208:
  8142   003034  C005  F00F         	movff	___xxtofl@val,___xxtofl@arg
  8143   003038  C006  F010         	movff	___xxtofl@val+1,___xxtofl@arg+1
  8144   00303C  C007  F011         	movff	___xxtofl@val+2,___xxtofl@arg+2
  8145   003040  C008  F012         	movff	___xxtofl@val+3,___xxtofl@arg+3
  8146   003044                     l4207:
  8147   003044  5005               	movf	___xxtofl@val^0,w,c
  8148   003046  1006               	iorwf	(___xxtofl@val+1)^0,w,c
  8149   003048  1007               	iorwf	(___xxtofl@val+2)^0,w,c
  8150   00304A  1008               	iorwf	(___xxtofl@val+3)^0,w,c
  8151   00304C  A4D8               	btfss	status,2,c
  8152   00304E  EF2B  F018         	goto	u4211
  8153   003052  EF2D  F018         	goto	u4210
  8154   003056                     u4211:
  8155   003056  EF37  F018         	goto	l4213
  8156   00305A                     u4210:
  8157   00305A  0E00               	movlw	0
  8158   00305C  6E05               	movwf	?___xxtofl^0,c
  8159   00305E  0E00               	movlw	0
  8160   003060  6E06               	movwf	(?___xxtofl+1)^0,c
  8161   003062  0E00               	movlw	0
  8162   003064  6E07               	movwf	(?___xxtofl+2)^0,c
  8163   003066  0E00               	movlw	0
  8164   003068  6E08               	movwf	(?___xxtofl+3)^0,c
  8165   00306A  EFC8  F018         	goto	l1211
  8166   00306E                     l4213:
  8167   00306E  0E96               	movlw	150
  8168   003070  6E0E               	movwf	___xxtofl@exp^0,c
  8169   003072  EF41  F018         	goto	l4217
  8170   003076                     l4215:
  8171   003076  2A0E               	incf	___xxtofl@exp^0,f,c
  8172   003078  90D8               	bcf	status,0,c
  8173   00307A  3212               	rrcf	(___xxtofl@arg+3)^0,f,c
  8174   00307C  3211               	rrcf	(___xxtofl@arg+2)^0,f,c
  8175   00307E  3210               	rrcf	(___xxtofl@arg+1)^0,f,c
  8176   003080  320F               	rrcf	___xxtofl@arg^0,f,c
  8177   003082                     l4217:
  8178   003082  0E00               	movlw	0
  8179   003084  140F               	andwf	___xxtofl@arg^0,w,c
  8180   003086  6E09               	movwf	??___xxtofl^0,c
  8181   003088  0E00               	movlw	0
  8182   00308A  1410               	andwf	(___xxtofl@arg+1)^0,w,c
  8183   00308C  6E0A               	movwf	(??___xxtofl+1)^0,c
  8184   00308E  0E00               	movlw	0
  8185   003090  1411               	andwf	(___xxtofl@arg+2)^0,w,c
  8186   003092  6E0B               	movwf	(??___xxtofl+2)^0,c
  8187   003094  0EFE               	movlw	254
  8188   003096  1412               	andwf	(___xxtofl@arg+3)^0,w,c
  8189   003098  6E0C               	movwf	(??___xxtofl+3)^0,c
  8190   00309A  5009               	movf	??___xxtofl^0,w,c
  8191   00309C  100A               	iorwf	(??___xxtofl+1)^0,w,c
  8192   00309E  100B               	iorwf	(??___xxtofl+2)^0,w,c
  8193   0030A0  100C               	iorwf	(??___xxtofl+3)^0,w,c
  8194   0030A2  A4D8               	btfss	status,2,c
  8195   0030A4  EF56  F018         	goto	u4221
  8196   0030A8  EF58  F018         	goto	u4220
  8197   0030AC                     u4221:
  8198   0030AC  EF3B  F018         	goto	l4215
  8199   0030B0                     u4220:
  8200   0030B0  EF66  F018         	goto	l1215
  8201   0030B4                     l4219:
  8202   0030B4  2A0E               	incf	___xxtofl@exp^0,f,c
  8203   0030B6  0E01               	movlw	1
  8204   0030B8  260F               	addwf	___xxtofl@arg^0,f,c
  8205   0030BA  0E00               	movlw	0
  8206   0030BC  2210               	addwfc	(___xxtofl@arg+1)^0,f,c
  8207   0030BE  2211               	addwfc	(___xxtofl@arg+2)^0,f,c
  8208   0030C0  2212               	addwfc	(___xxtofl@arg+3)^0,f,c
  8209   0030C2  90D8               	bcf	status,0,c
  8210   0030C4  3212               	rrcf	(___xxtofl@arg+3)^0,f,c
  8211   0030C6  3211               	rrcf	(___xxtofl@arg+2)^0,f,c
  8212   0030C8  3210               	rrcf	(___xxtofl@arg+1)^0,f,c
  8213   0030CA  320F               	rrcf	___xxtofl@arg^0,f,c
  8214   0030CC                     l1215:
  8215   0030CC  0E00               	movlw	0
  8216   0030CE  140F               	andwf	___xxtofl@arg^0,w,c
  8217   0030D0  6E09               	movwf	??___xxtofl^0,c
  8218   0030D2  0E00               	movlw	0
  8219   0030D4  1410               	andwf	(___xxtofl@arg+1)^0,w,c
  8220   0030D6  6E0A               	movwf	(??___xxtofl+1)^0,c
  8221   0030D8  0E00               	movlw	0
  8222   0030DA  1411               	andwf	(___xxtofl@arg+2)^0,w,c
  8223   0030DC  6E0B               	movwf	(??___xxtofl+2)^0,c
  8224   0030DE  0EFF               	movlw	255
  8225   0030E0  1412               	andwf	(___xxtofl@arg+3)^0,w,c
  8226   0030E2  6E0C               	movwf	(??___xxtofl+3)^0,c
  8227   0030E4  5009               	movf	??___xxtofl^0,w,c
  8228   0030E6  100A               	iorwf	(??___xxtofl+1)^0,w,c
  8229   0030E8  100B               	iorwf	(??___xxtofl+2)^0,w,c
  8230   0030EA  100C               	iorwf	(??___xxtofl+3)^0,w,c
  8231   0030EC  A4D8               	btfss	status,2,c
  8232   0030EE  EF7B  F018         	goto	u4231
  8233   0030F2  EF7D  F018         	goto	u4230
  8234   0030F6                     u4231:
  8235   0030F6  EF5A  F018         	goto	l4219
  8236   0030FA                     u4230:
  8237   0030FA  EF85  F018         	goto	l4227
  8238   0030FE                     l4225:
  8239   0030FE  060E               	decf	___xxtofl@exp^0,f,c
  8240   003100  90D8               	bcf	status,0,c
  8241   003102  360F               	rlcf	___xxtofl@arg^0,f,c
  8242   003104  3610               	rlcf	(___xxtofl@arg+1)^0,f,c
  8243   003106  3611               	rlcf	(___xxtofl@arg+2)^0,f,c
  8244   003108  3612               	rlcf	(___xxtofl@arg+3)^0,f,c
  8245   00310A                     l4227:
  8246   00310A  BE11               	btfsc	(___xxtofl@arg+2)^0,7,c
  8247   00310C  EF8A  F018         	goto	u4241
  8248   003110  EF8C  F018         	goto	u4240
  8249   003114                     u4241:
  8250   003114  EF94  F018         	goto	l1222
  8251   003118                     u4240:
  8252   003118  0E02               	movlw	2
  8253   00311A  600E               	cpfslt	___xxtofl@exp^0,c
  8254   00311C  EF92  F018         	goto	u4251
  8255   003120  EF94  F018         	goto	u4250
  8256   003124                     u4251:
  8257   003124  EF7F  F018         	goto	l4225
  8258   003128                     u4250:
  8259   003128                     l1222:
  8260   003128  B00E               	btfsc	___xxtofl@exp^0,0,c
  8261   00312A  EF99  F018         	goto	u4261
  8262   00312E  EF9B  F018         	goto	u4260
  8263   003132                     u4261:
  8264   003132  EF9C  F018         	goto	l4233
  8265   003136                     u4260:
  8266   003136  9E11               	bcf	(___xxtofl@arg+2)^0,7,c
  8267   003138                     l4233:
  8268   003138  90D8               	bcf	status,0,c
  8269   00313A  320E               	rrcf	___xxtofl@exp^0,f,c
  8270   00313C  C00E  F009         	movff	___xxtofl@exp,??___xxtofl
  8271   003140  6A0A               	clrf	(??___xxtofl+1)^0,c
  8272   003142  6A0B               	clrf	(??___xxtofl+2)^0,c
  8273   003144  6A0C               	clrf	(??___xxtofl+3)^0,c
  8274   003146  C009  F00C         	movff	??___xxtofl,??___xxtofl+3
  8275   00314A  6A0B               	clrf	(??___xxtofl+2)^0,c
  8276   00314C  6A0A               	clrf	(??___xxtofl+1)^0,c
  8277   00314E  6A09               	clrf	??___xxtofl^0,c
  8278   003150  5009               	movf	??___xxtofl^0,w,c
  8279   003152  120F               	iorwf	___xxtofl@arg^0,f,c
  8280   003154  500A               	movf	(??___xxtofl+1)^0,w,c
  8281   003156  1210               	iorwf	(___xxtofl@arg+1)^0,f,c
  8282   003158  500B               	movf	(??___xxtofl+2)^0,w,c
  8283   00315A  1211               	iorwf	(___xxtofl@arg+2)^0,f,c
  8284   00315C  500C               	movf	(??___xxtofl+3)^0,w,c
  8285   00315E  1212               	iorwf	(___xxtofl@arg+3)^0,f,c
  8286   003160  500D               	movf	___xxtofl@sign^0,w,c
  8287   003162  B4D8               	btfsc	status,2,c
  8288   003164  EFB6  F018         	goto	u4271
  8289   003168  EFB8  F018         	goto	u4270
  8290   00316C                     u4271:
  8291   00316C  EFC0  F018         	goto	l4243
  8292   003170                     u4270:
  8293   003170  BE08               	btfsc	(___xxtofl@val+3)^0,7,c
  8294   003172  EFBF  F018         	goto	u4280
  8295   003176  EFBD  F018         	goto	u4281
  8296   00317A                     u4281:
  8297   00317A  EFC0  F018         	goto	l4243
  8298   00317E                     u4280:
  8299   00317E  8E12               	bsf	(___xxtofl@arg+3)^0,7,c
  8300   003180                     l4243:
  8301   003180  C00F  F005         	movff	___xxtofl@arg,?___xxtofl
  8302   003184  C010  F006         	movff	___xxtofl@arg+1,?___xxtofl+1
  8303   003188  C011  F007         	movff	___xxtofl@arg+2,?___xxtofl+2
  8304   00318C  C012  F008         	movff	___xxtofl@arg+3,?___xxtofl+3
  8305   003190                     l1211:
  8306   003190  0012               	return		;funcret
  8307   003192                     __end_of___xxtofl:
  8308                           	callstack 0
  8309                           
  8310 ;; *************** function ___flsub *****************
  8311 ;; Defined at:
  8312 ;;		line 245 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\sprcadd.c"
  8313 ;; Parameters:    Size  Location     Type
  8314 ;;  b               4   20[COMRAM] unsigned char 
  8315 ;;  a               4   24[COMRAM] unsigned char 
  8316 ;; Auto vars:     Size  Location     Type
  8317 ;;		None
  8318 ;; Return value:  Size  Location     Type
  8319 ;;                  4   20[COMRAM] unsigned char 
  8320 ;; Registers used:
  8321 ;;		wreg, status,2, status,0, cstack
  8322 ;; Tracked objects:
  8323 ;;		On entry : 0/0
  8324 ;;		On exit  : 0/0
  8325 ;;		Unchanged: 0/0
  8326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8327 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8330 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8331 ;;Total ram usage:        8 bytes
  8332 ;; Hardware stack levels used: 1
  8333 ;; Hardware stack levels required when called: 3
  8334 ;; This function calls:
  8335 ;;		___fladd
  8336 ;; This function is called by:
  8337 ;;		_colorDetect
  8338 ;; This function uses a non-reentrant model
  8339 ;;
  8340                           
  8341                           	psect	text38
  8342   004974                     __ptext38:
  8343                           	callstack 0
  8344   004974                     ___flsub:
  8345                           	callstack 26
  8346   004974  0E00               	movlw	0
  8347   004976  1A19               	xorwf	___flsub@a^0,f,c
  8348   004978  0E00               	movlw	0
  8349   00497A  1A1A               	xorwf	(___flsub@a+1)^0,f,c
  8350   00497C  0E00               	movlw	0
  8351   00497E  1A1B               	xorwf	(___flsub@a+2)^0,f,c
  8352   004980  0E80               	movlw	128
  8353   004982  1A1C               	xorwf	(___flsub@a+3)^0,f,c
  8354   004984  C015  F005         	movff	___flsub@b,___fladd@b
  8355   004988  C016  F006         	movff	___flsub@b+1,___fladd@b+1
  8356   00498C  C017  F007         	movff	___flsub@b+2,___fladd@b+2
  8357   004990  C018  F008         	movff	___flsub@b+3,___fladd@b+3
  8358   004994  C019  F009         	movff	___flsub@a,___fladd@a
  8359   004998  C01A  F00A         	movff	___flsub@a+1,___fladd@a+1
  8360   00499C  C01B  F00B         	movff	___flsub@a+2,___fladd@a+2
  8361   0049A0  C01C  F00C         	movff	___flsub@a+3,___fladd@a+3
  8362   0049A4  ECFE  F00C         	call	___fladd	;wreg free
  8363   0049A8  C005  F015         	movff	?___fladd,?___flsub
  8364   0049AC  C006  F016         	movff	?___fladd+1,?___flsub+1
  8365   0049B0  C007  F017         	movff	?___fladd+2,?___flsub+2
  8366   0049B4  C008  F018         	movff	?___fladd+3,?___flsub+3
  8367   0049B8  0012               	return		;funcret
  8368   0049BA                     __end_of___flsub:
  8369                           	callstack 0
  8370                           
  8371 ;; *************** function ___fladd *****************
  8372 ;; Defined at:
  8373 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\sprcadd.c"
  8374 ;; Parameters:    Size  Location     Type
  8375 ;;  b               4    4[COMRAM] unsigned char 
  8376 ;;  a               4    8[COMRAM] unsigned char 
  8377 ;; Auto vars:     Size  Location     Type
  8378 ;;  grs             1   19[COMRAM] unsigned char 
  8379 ;;  bexp            1   18[COMRAM] unsigned char 
  8380 ;;  aexp            1   17[COMRAM] unsigned char 
  8381 ;;  signs           1   16[COMRAM] unsigned char 
  8382 ;; Return value:  Size  Location     Type
  8383 ;;                  4    4[COMRAM] unsigned char 
  8384 ;; Registers used:
  8385 ;;		wreg, status,2, status,0
  8386 ;; Tracked objects:
  8387 ;;		On entry : 0/0
  8388 ;;		On exit  : 0/0
  8389 ;;		Unchanged: 0/0
  8390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8391 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8392 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8393 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8394 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8395 ;;Total ram usage:       16 bytes
  8396 ;; Hardware stack levels used: 1
  8397 ;; Hardware stack levels required when called: 2
  8398 ;; This function calls:
  8399 ;;		Nothing
  8400 ;; This function is called by:
  8401 ;;		___flsub
  8402 ;; This function uses a non-reentrant model
  8403 ;;
  8404                           
  8405                           	psect	text39
  8406   0019FC                     __ptext39:
  8407                           	callstack 0
  8408   0019FC                     ___fladd:
  8409                           	callstack 26
  8410   0019FC  5008               	movf	(___fladd@b+3)^0,w,c
  8411   0019FE  0B80               	andlw	128
  8412   001A00  6E11               	movwf	___fladd@signs^0,c
  8413   001A02  5008               	movf	(___fladd@b+3)^0,w,c
  8414   001A04  2408               	addwf	(___fladd@b+3)^0,w,c
  8415   001A06  6E13               	movwf	___fladd@bexp^0,c
  8416   001A08  AE07               	btfss	(___fladd@b+2)^0,7,c
  8417   001A0A  EF09  F00D         	goto	u3201
  8418   001A0E  EF0B  F00D         	goto	u3200
  8419   001A12                     u3201:
  8420   001A12  EF0C  F00D         	goto	l3533
  8421   001A16                     u3200:
  8422   001A16  8013               	bsf	___fladd@bexp^0,0,c
  8423   001A18                     l3533:
  8424   001A18  5013               	movf	___fladd@bexp^0,w,c
  8425   001A1A  B4D8               	btfsc	status,2,c
  8426   001A1C  EF12  F00D         	goto	u3211
  8427   001A20  EF14  F00D         	goto	u3210
  8428   001A24                     u3211:
  8429   001A24  EF29  F00D         	goto	l3543
  8430   001A28                     u3210:
  8431   001A28  2813               	incf	___fladd@bexp^0,w,c
  8432   001A2A  A4D8               	btfss	status,2,c
  8433   001A2C  EF1A  F00D         	goto	u3221
  8434   001A30  EF1C  F00D         	goto	u3220
  8435   001A34                     u3221:
  8436   001A34  EF24  F00D         	goto	l3539
  8437   001A38                     u3220:
  8438   001A38  0E00               	movlw	0
  8439   001A3A  6E05               	movwf	___fladd@b^0,c
  8440   001A3C  0E00               	movlw	0
  8441   001A3E  6E06               	movwf	(___fladd@b+1)^0,c
  8442   001A40  0E00               	movlw	0
  8443   001A42  6E07               	movwf	(___fladd@b+2)^0,c
  8444   001A44  0E00               	movlw	0
  8445   001A46  6E08               	movwf	(___fladd@b+3)^0,c
  8446   001A48                     l3539:
  8447   001A48  8E07               	bsf	(___fladd@b+2)^0,7,c
  8448   001A4A  0E00               	movlw	0
  8449   001A4C  6E08               	movwf	(___fladd@b+3)^0,c
  8450   001A4E  EF31  F00D         	goto	l3545
  8451   001A52                     l3543:
  8452   001A52  0E00               	movlw	0
  8453   001A54  6E05               	movwf	___fladd@b^0,c
  8454   001A56  0E00               	movlw	0
  8455   001A58  6E06               	movwf	(___fladd@b+1)^0,c
  8456   001A5A  0E00               	movlw	0
  8457   001A5C  6E07               	movwf	(___fladd@b+2)^0,c
  8458   001A5E  0E00               	movlw	0
  8459   001A60  6E08               	movwf	(___fladd@b+3)^0,c
  8460   001A62                     l3545:
  8461   001A62  500C               	movf	(___fladd@a+3)^0,w,c
  8462   001A64  0B80               	andlw	128
  8463   001A66  6E12               	movwf	___fladd@aexp^0,c
  8464   001A68  5011               	movf	___fladd@signs^0,w,c
  8465   001A6A  1812               	xorwf	___fladd@aexp^0,w,c
  8466   001A6C  B4D8               	btfsc	status,2,c
  8467   001A6E  EF3B  F00D         	goto	u3231
  8468   001A72  EF3D  F00D         	goto	u3230
  8469   001A76                     u3231:
  8470   001A76  EF3E  F00D         	goto	l3551
  8471   001A7A                     u3230:
  8472   001A7A  8C11               	bsf	___fladd@signs^0,6,c
  8473   001A7C                     l3551:
  8474   001A7C  500C               	movf	(___fladd@a+3)^0,w,c
  8475   001A7E  240C               	addwf	(___fladd@a+3)^0,w,c
  8476   001A80  6E12               	movwf	___fladd@aexp^0,c
  8477   001A82  AE0B               	btfss	(___fladd@a+2)^0,7,c
  8478   001A84  EF46  F00D         	goto	u3241
  8479   001A88  EF48  F00D         	goto	u3240
  8480   001A8C                     u3241:
  8481   001A8C  EF49  F00D         	goto	l3557
  8482   001A90                     u3240:
  8483   001A90  8012               	bsf	___fladd@aexp^0,0,c
  8484   001A92                     l3557:
  8485   001A92  5012               	movf	___fladd@aexp^0,w,c
  8486   001A94  B4D8               	btfsc	status,2,c
  8487   001A96  EF4F  F00D         	goto	u3251
  8488   001A9A  EF51  F00D         	goto	u3250
  8489   001A9E                     u3251:
  8490   001A9E  EF66  F00D         	goto	l3567
  8491   001AA2                     u3250:
  8492   001AA2  2812               	incf	___fladd@aexp^0,w,c
  8493   001AA4  A4D8               	btfss	status,2,c
  8494   001AA6  EF57  F00D         	goto	u3261
  8495   001AAA  EF59  F00D         	goto	u3260
  8496   001AAE                     u3261:
  8497   001AAE  EF61  F00D         	goto	l3563
  8498   001AB2                     u3260:
  8499   001AB2  0E00               	movlw	0
  8500   001AB4  6E09               	movwf	___fladd@a^0,c
  8501   001AB6  0E00               	movlw	0
  8502   001AB8  6E0A               	movwf	(___fladd@a+1)^0,c
  8503   001ABA  0E00               	movlw	0
  8504   001ABC  6E0B               	movwf	(___fladd@a+2)^0,c
  8505   001ABE  0E00               	movlw	0
  8506   001AC0  6E0C               	movwf	(___fladd@a+3)^0,c
  8507   001AC2                     l3563:
  8508   001AC2  8E0B               	bsf	(___fladd@a+2)^0,7,c
  8509   001AC4  0E00               	movlw	0
  8510   001AC6  6E0C               	movwf	(___fladd@a+3)^0,c
  8511   001AC8  EF6E  F00D         	goto	l3569
  8512   001ACC                     l3567:
  8513   001ACC  0E00               	movlw	0
  8514   001ACE  6E09               	movwf	___fladd@a^0,c
  8515   001AD0  0E00               	movlw	0
  8516   001AD2  6E0A               	movwf	(___fladd@a+1)^0,c
  8517   001AD4  0E00               	movlw	0
  8518   001AD6  6E0B               	movwf	(___fladd@a+2)^0,c
  8519   001AD8  0E00               	movlw	0
  8520   001ADA  6E0C               	movwf	(___fladd@a+3)^0,c
  8521   001ADC                     l3569:
  8522   001ADC  5013               	movf	___fladd@bexp^0,w,c
  8523   001ADE  5C12               	subwf	___fladd@aexp^0,w,c
  8524   001AE0  B0D8               	btfsc	status,0,c
  8525   001AE2  EF75  F00D         	goto	u3271
  8526   001AE6  EF77  F00D         	goto	u3270
  8527   001AEA                     u3271:
  8528   001AEA  EF9E  F00D         	goto	l3605
  8529   001AEE                     u3270:
  8530   001AEE  AC11               	btfss	___fladd@signs^0,6,c
  8531   001AF0  EF7C  F00D         	goto	u3281
  8532   001AF4  EF7E  F00D         	goto	u3280
  8533   001AF8                     u3281:
  8534   001AF8  EF80  F00D         	goto	l3575
  8535   001AFC                     u3280:
  8536   001AFC  0E80               	movlw	128
  8537   001AFE  1A11               	xorwf	___fladd@signs^0,f,c
  8538   001B00                     l3575:
  8539   001B00  C013  F014         	movff	___fladd@bexp,___fladd@grs
  8540   001B04  C012  F013         	movff	___fladd@aexp,___fladd@bexp
  8541   001B08  C014  F012         	movff	___fladd@grs,___fladd@aexp
  8542   001B0C  C005  F014         	movff	___fladd@b,___fladd@grs
  8543   001B10  C009  F005         	movff	___fladd@a,___fladd@b
  8544   001B14  C014  F009         	movff	___fladd@grs,___fladd@a
  8545   001B18  C006  F014         	movff	___fladd@b+1,___fladd@grs
  8546   001B1C  C00A  F006         	movff	___fladd@a+1,___fladd@b+1
  8547   001B20  C014  F00A         	movff	___fladd@grs,___fladd@a+1
  8548   001B24  C007  F014         	movff	___fladd@b+2,___fladd@grs
  8549   001B28  C00B  F007         	movff	___fladd@a+2,___fladd@b+2
  8550   001B2C  C014  F00B         	movff	___fladd@grs,___fladd@a+2
  8551   001B30  C008  F014         	movff	___fladd@b+3,___fladd@grs
  8552   001B34  C00C  F008         	movff	___fladd@a+3,___fladd@b+3
  8553   001B38  C014  F00C         	movff	___fladd@grs,___fladd@a+3
  8554   001B3C                     l3605:
  8555   001B3C  0E00               	movlw	0
  8556   001B3E  6E14               	movwf	___fladd@grs^0,c
  8557   001B40  5013               	movf	___fladd@bexp^0,w,c
  8558   001B42  C012  F00D         	movff	___fladd@aexp,??___fladd
  8559   001B46  6A0E               	clrf	(??___fladd+1)^0,c
  8560   001B48  5E0D               	subwf	??___fladd^0,f,c
  8561   001B4A  0E00               	movlw	0
  8562   001B4C  5A0E               	subwfb	(??___fladd+1)^0,f,c
  8563   001B4E  BE0E               	btfsc	(??___fladd+1)^0,7,c
  8564   001B50  EFB3  F00D         	goto	u3291
  8565   001B54  500E               	movf	(??___fladd+1)^0,w,c
  8566   001B56  E109               	bnz	u3290
  8567   001B58  0E1A               	movlw	26
  8568   001B5A  5C0D               	subwf	??___fladd^0,w,c
  8569   001B5C  A0D8               	btfss	status,0,c
  8570   001B5E  EFB3  F00D         	goto	u3291
  8571   001B62  EFB5  F00D         	goto	u3290
  8572   001B66                     u3291:
  8573   001B66  EFEC  F00D         	goto	l1082
  8574   001B6A                     u3290:
  8575   001B6A  5005               	movf	___fladd@b^0,w,c
  8576   001B6C  1006               	iorwf	(___fladd@b+1)^0,w,c
  8577   001B6E  1007               	iorwf	(___fladd@b+2)^0,w,c
  8578   001B70  1008               	iorwf	(___fladd@b+3)^0,w,c
  8579   001B72  A4D8               	btfss	status,2,c
  8580   001B74  EFBE  F00D         	goto	u3301
  8581   001B78  EFC1  F00D         	goto	u3300
  8582   001B7C                     u3301:
  8583   001B7C  0E01               	movlw	1
  8584   001B7E  EFC2  F00D         	goto	u3310
  8585   001B82                     u3300:
  8586   001B82  0E00               	movlw	0
  8587   001B84                     u3310:
  8588   001B84  6E14               	movwf	___fladd@grs^0,c
  8589   001B86  0E00               	movlw	0
  8590   001B88  6E05               	movwf	___fladd@b^0,c
  8591   001B8A  0E00               	movlw	0
  8592   001B8C  6E06               	movwf	(___fladd@b+1)^0,c
  8593   001B8E  0E00               	movlw	0
  8594   001B90  6E07               	movwf	(___fladd@b+2)^0,c
  8595   001B92  0E00               	movlw	0
  8596   001B94  6E08               	movwf	(___fladd@b+3)^0,c
  8597   001B96  C012  F013         	movff	___fladd@aexp,___fladd@bexp
  8598   001B9A  EFF5  F00D         	goto	l1081
  8599   001B9E                     l1083:
  8600   001B9E  A014               	btfss	___fladd@grs^0,0,c
  8601   001BA0  EFD4  F00D         	goto	u3321
  8602   001BA4  EFD6  F00D         	goto	u3320
  8603   001BA8                     u3321:
  8604   001BA8  EFDC  F00D         	goto	l3617
  8605   001BAC                     u3320:
  8606   001BAC  90D8               	bcf	status,0,c
  8607   001BAE  3014               	rrcf	___fladd@grs^0,w,c
  8608   001BB0  0901               	iorlw	1
  8609   001BB2  6E14               	movwf	___fladd@grs^0,c
  8610   001BB4  EFDE  F00D         	goto	l3619
  8611   001BB8                     l3617:
  8612   001BB8  90D8               	bcf	status,0,c
  8613   001BBA  3214               	rrcf	___fladd@grs^0,f,c
  8614   001BBC                     l3619:
  8615   001BBC  A005               	btfss	___fladd@b^0,0,c
  8616   001BBE  EFE3  F00D         	goto	u3331
  8617   001BC2  EFE5  F00D         	goto	u3330
  8618   001BC6                     u3331:
  8619   001BC6  EFE6  F00D         	goto	l3623
  8620   001BCA                     u3330:
  8621   001BCA  8E14               	bsf	___fladd@grs^0,7,c
  8622   001BCC                     l3623:
  8623   001BCC  3408               	rlcf	(___fladd@b+3)^0,w,c
  8624   001BCE  3208               	rrcf	(___fladd@b+3)^0,f,c
  8625   001BD0  3207               	rrcf	(___fladd@b+2)^0,f,c
  8626   001BD2  3206               	rrcf	(___fladd@b+1)^0,f,c
  8627   001BD4  3205               	rrcf	___fladd@b^0,f,c
  8628   001BD6  2A13               	incf	___fladd@bexp^0,f,c
  8629   001BD8                     l1082:
  8630   001BD8  5012               	movf	___fladd@aexp^0,w,c
  8631   001BDA  5C13               	subwf	___fladd@bexp^0,w,c
  8632   001BDC  A0D8               	btfss	status,0,c
  8633   001BDE  EFF3  F00D         	goto	u3341
  8634   001BE2  EFF5  F00D         	goto	u3340
  8635   001BE6                     u3341:
  8636   001BE6  EFCF  F00D         	goto	l1083
  8637   001BEA                     u3340:
  8638   001BEA                     l1081:
  8639   001BEA  BC11               	btfsc	___fladd@signs^0,6,c
  8640   001BEC  EFFA  F00D         	goto	u3351
  8641   001BF0  EFFC  F00D         	goto	u3350
  8642   001BF4                     u3351:
  8643   001BF4  EF3C  F00E         	goto	l3651
  8644   001BF8                     u3350:
  8645   001BF8  5013               	movf	___fladd@bexp^0,w,c
  8646   001BFA  A4D8               	btfss	status,2,c
  8647   001BFC  EF02  F00E         	goto	u3361
  8648   001C00  EF04  F00E         	goto	u3360
  8649   001C04                     u3361:
  8650   001C04  EF0E  F00E         	goto	l3633
  8651   001C08                     u3360:
  8652   001C08  0E00               	movlw	0
  8653   001C0A  6E05               	movwf	?___fladd^0,c
  8654   001C0C  0E00               	movlw	0
  8655   001C0E  6E06               	movwf	(?___fladd+1)^0,c
  8656   001C10  0E00               	movlw	0
  8657   001C12  6E07               	movwf	(?___fladd+2)^0,c
  8658   001C14  0E00               	movlw	0
  8659   001C16  6E08               	movwf	(?___fladd+3)^0,c
  8660   001C18  EF5D  F00F         	goto	l1090
  8661   001C1C                     l3633:
  8662   001C1C  5009               	movf	___fladd@a^0,w,c
  8663   001C1E  2605               	addwf	___fladd@b^0,f,c
  8664   001C20  500A               	movf	(___fladd@a+1)^0,w,c
  8665   001C22  2206               	addwfc	(___fladd@b+1)^0,f,c
  8666   001C24  500B               	movf	(___fladd@a+2)^0,w,c
  8667   001C26  2207               	addwfc	(___fladd@b+2)^0,f,c
  8668   001C28  500C               	movf	(___fladd@a+3)^0,w,c
  8669   001C2A  2208               	addwfc	(___fladd@b+3)^0,f,c
  8670   001C2C  A008               	btfss	(___fladd@b+3)^0,0,c
  8671   001C2E  EF1B  F00E         	goto	u3371
  8672   001C32  EF1D  F00E         	goto	u3370
  8673   001C36                     u3371:
  8674   001C36  EFC9  F00E         	goto	l3687
  8675   001C3A                     u3370:
  8676   001C3A  A014               	btfss	___fladd@grs^0,0,c
  8677   001C3C  EF22  F00E         	goto	u3381
  8678   001C40  EF24  F00E         	goto	u3380
  8679   001C44                     u3381:
  8680   001C44  EF2A  F00E         	goto	l3641
  8681   001C48                     u3380:
  8682   001C48  90D8               	bcf	status,0,c
  8683   001C4A  3014               	rrcf	___fladd@grs^0,w,c
  8684   001C4C  0901               	iorlw	1
  8685   001C4E  6E14               	movwf	___fladd@grs^0,c
  8686   001C50  EF2C  F00E         	goto	l3643
  8687   001C54                     l3641:
  8688   001C54  90D8               	bcf	status,0,c
  8689   001C56  3214               	rrcf	___fladd@grs^0,f,c
  8690   001C58                     l3643:
  8691   001C58  A005               	btfss	___fladd@b^0,0,c
  8692   001C5A  EF31  F00E         	goto	u3391
  8693   001C5E  EF33  F00E         	goto	u3390
  8694   001C62                     u3391:
  8695   001C62  EF34  F00E         	goto	l3647
  8696   001C66                     u3390:
  8697   001C66  8E14               	bsf	___fladd@grs^0,7,c
  8698   001C68                     l3647:
  8699   001C68  3408               	rlcf	(___fladd@b+3)^0,w,c
  8700   001C6A  3208               	rrcf	(___fladd@b+3)^0,f,c
  8701   001C6C  3207               	rrcf	(___fladd@b+2)^0,f,c
  8702   001C6E  3206               	rrcf	(___fladd@b+1)^0,f,c
  8703   001C70  3205               	rrcf	___fladd@b^0,f,c
  8704   001C72  2A13               	incf	___fladd@bexp^0,f,c
  8705   001C74  EFC9  F00E         	goto	l3687
  8706   001C78                     l3651:
  8707   001C78  5009               	movf	___fladd@a^0,w,c
  8708   001C7A  5C05               	subwf	___fladd@b^0,w,c
  8709   001C7C  500A               	movf	(___fladd@a+1)^0,w,c
  8710   001C7E  5806               	subwfb	(___fladd@b+1)^0,w,c
  8711   001C80  500B               	movf	(___fladd@a+2)^0,w,c
  8712   001C82  5807               	subwfb	(___fladd@b+2)^0,w,c
  8713   001C84  5008               	movf	(___fladd@b+3)^0,w,c
  8714   001C86  0A80               	xorlw	128
  8715   001C88  6E0D               	movwf	??___fladd^0,c
  8716   001C8A  500C               	movf	(___fladd@a+3)^0,w,c
  8717   001C8C  0A80               	xorlw	128
  8718   001C8E  580D               	subwfb	??___fladd^0,w,c
  8719   001C90  B0D8               	btfsc	status,0,c
  8720   001C92  EF4D  F00E         	goto	u3401
  8721   001C96  EF4F  F00E         	goto	u3400
  8722   001C9A                     u3401:
  8723   001C9A  EF7A  F00E         	goto	l3661
  8724   001C9E                     u3400:
  8725   001C9E  5005               	movf	___fladd@b^0,w,c
  8726   001CA0  5C09               	subwf	___fladd@a^0,w,c
  8727   001CA2  6E0D               	movwf	??___fladd^0,c
  8728   001CA4  5006               	movf	(___fladd@b+1)^0,w,c
  8729   001CA6  580A               	subwfb	(___fladd@a+1)^0,w,c
  8730   001CA8  6E0E               	movwf	(??___fladd+1)^0,c
  8731   001CAA  5007               	movf	(___fladd@b+2)^0,w,c
  8732   001CAC  580B               	subwfb	(___fladd@a+2)^0,w,c
  8733   001CAE  6E0F               	movwf	(??___fladd+2)^0,c
  8734   001CB0  5008               	movf	(___fladd@b+3)^0,w,c
  8735   001CB2  580C               	subwfb	(___fladd@a+3)^0,w,c
  8736   001CB4  6E10               	movwf	(??___fladd+3)^0,c
  8737   001CB6  0EFF               	movlw	255
  8738   001CB8  240D               	addwf	??___fladd^0,w,c
  8739   001CBA  6E05               	movwf	___fladd@b^0,c
  8740   001CBC  0EFF               	movlw	255
  8741   001CBE  200E               	addwfc	(??___fladd+1)^0,w,c
  8742   001CC0  6E06               	movwf	(___fladd@b+1)^0,c
  8743   001CC2  0EFF               	movlw	255
  8744   001CC4  200F               	addwfc	(??___fladd+2)^0,w,c
  8745   001CC6  6E07               	movwf	(___fladd@b+2)^0,c
  8746   001CC8  0EFF               	movlw	255
  8747   001CCA  2010               	addwfc	(??___fladd+3)^0,w,c
  8748   001CCC  6E08               	movwf	(___fladd@b+3)^0,c
  8749   001CCE  0E80               	movlw	128
  8750   001CD0  1A11               	xorwf	___fladd@signs^0,f,c
  8751   001CD2  6C14               	negf	___fladd@grs^0,c
  8752   001CD4  5014               	movf	___fladd@grs^0,w,c
  8753   001CD6  A4D8               	btfss	status,2,c
  8754   001CD8  EF70  F00E         	goto	u3411
  8755   001CDC  EF72  F00E         	goto	u3410
  8756   001CE0                     u3411:
  8757   001CE0  EF82  F00E         	goto	l1098
  8758   001CE4                     u3410:
  8759   001CE4  0E01               	movlw	1
  8760   001CE6  2605               	addwf	___fladd@b^0,f,c
  8761   001CE8  0E00               	movlw	0
  8762   001CEA  2206               	addwfc	(___fladd@b+1)^0,f,c
  8763   001CEC  2207               	addwfc	(___fladd@b+2)^0,f,c
  8764   001CEE  2208               	addwfc	(___fladd@b+3)^0,f,c
  8765   001CF0  EF82  F00E         	goto	l1098
  8766   001CF4                     l3661:
  8767   001CF4  5009               	movf	___fladd@a^0,w,c
  8768   001CF6  5E05               	subwf	___fladd@b^0,f,c
  8769   001CF8  500A               	movf	(___fladd@a+1)^0,w,c
  8770   001CFA  5A06               	subwfb	(___fladd@b+1)^0,f,c
  8771   001CFC  500B               	movf	(___fladd@a+2)^0,w,c
  8772   001CFE  5A07               	subwfb	(___fladd@b+2)^0,f,c
  8773   001D00  500C               	movf	(___fladd@a+3)^0,w,c
  8774   001D02  5A08               	subwfb	(___fladd@b+3)^0,f,c
  8775   001D04                     l1098:
  8776   001D04  5005               	movf	___fladd@b^0,w,c
  8777   001D06  1006               	iorwf	(___fladd@b+1)^0,w,c
  8778   001D08  1007               	iorwf	(___fladd@b+2)^0,w,c
  8779   001D0A  1008               	iorwf	(___fladd@b+3)^0,w,c
  8780   001D0C  A4D8               	btfss	status,2,c
  8781   001D0E  EF8B  F00E         	goto	u3421
  8782   001D12  EF8D  F00E         	goto	u3420
  8783   001D16                     u3421:
  8784   001D16  EFC2  F00E         	goto	l3685
  8785   001D1A                     u3420:
  8786   001D1A  5014               	movf	___fladd@grs^0,w,c
  8787   001D1C  A4D8               	btfss	status,2,c
  8788   001D1E  EF93  F00E         	goto	u3431
  8789   001D22  EF95  F00E         	goto	u3430
  8790   001D26                     u3431:
  8791   001D26  EFC2  F00E         	goto	l3685
  8792   001D2A                     u3430:
  8793   001D2A  0E00               	movlw	0
  8794   001D2C  6E05               	movwf	?___fladd^0,c
  8795   001D2E  0E00               	movlw	0
  8796   001D30  6E06               	movwf	(?___fladd+1)^0,c
  8797   001D32  0E00               	movlw	0
  8798   001D34  6E07               	movwf	(?___fladd+2)^0,c
  8799   001D36  0E00               	movlw	0
  8800   001D38  6E08               	movwf	(?___fladd+3)^0,c
  8801   001D3A  EF5D  F00F         	goto	l1090
  8802   001D3E                     l3669:
  8803   001D3E  90D8               	bcf	status,0,c
  8804   001D40  3605               	rlcf	___fladd@b^0,f,c
  8805   001D42  3606               	rlcf	(___fladd@b+1)^0,f,c
  8806   001D44  3607               	rlcf	(___fladd@b+2)^0,f,c
  8807   001D46  3608               	rlcf	(___fladd@b+3)^0,f,c
  8808   001D48  AE14               	btfss	___fladd@grs^0,7,c
  8809   001D4A  EFA9  F00E         	goto	u3441
  8810   001D4E  EFAB  F00E         	goto	u3440
  8811   001D52                     u3441:
  8812   001D52  EFAC  F00E         	goto	l3675
  8813   001D56                     u3440:
  8814   001D56  8005               	bsf	___fladd@b^0,0,c
  8815   001D58                     l3675:
  8816   001D58  A014               	btfss	___fladd@grs^0,0,c
  8817   001D5A  EFB1  F00E         	goto	u3451
  8818   001D5E  EFB3  F00E         	goto	u3450
  8819   001D62                     u3451:
  8820   001D62  EFB7  F00E         	goto	l3679
  8821   001D66                     u3450:
  8822   001D66  80D8               	bsf	status,0,c
  8823   001D68  3614               	rlcf	___fladd@grs^0,f,c
  8824   001D6A  EFB9  F00E         	goto	l3681
  8825   001D6E                     l3679:
  8826   001D6E  90D8               	bcf	status,0,c
  8827   001D70  3614               	rlcf	___fladd@grs^0,f,c
  8828   001D72                     l3681:
  8829   001D72  5013               	movf	___fladd@bexp^0,w,c
  8830   001D74  B4D8               	btfsc	status,2,c
  8831   001D76  EFBF  F00E         	goto	u3461
  8832   001D7A  EFC1  F00E         	goto	u3460
  8833   001D7E                     u3461:
  8834   001D7E  EFC2  F00E         	goto	l3685
  8835   001D82                     u3460:
  8836   001D82  0613               	decf	___fladd@bexp^0,f,c
  8837   001D84                     l3685:
  8838   001D84  AE07               	btfss	(___fladd@b+2)^0,7,c
  8839   001D86  EFC7  F00E         	goto	u3471
  8840   001D8A  EFC9  F00E         	goto	u3470
  8841   001D8E                     u3471:
  8842   001D8E  EF9F  F00E         	goto	l3669
  8843   001D92                     u3470:
  8844   001D92                     l3687:
  8845   001D92  0E00               	movlw	0
  8846   001D94  6E12               	movwf	___fladd@aexp^0,c
  8847   001D96  AE14               	btfss	___fladd@grs^0,7,c
  8848   001D98  EFD0  F00E         	goto	u3481
  8849   001D9C  EFD2  F00E         	goto	u3480
  8850   001DA0                     u3481:
  8851   001DA0  EFEA  F00E         	goto	l1107
  8852   001DA4                     u3480:
  8853   001DA4  C014  F00D         	movff	___fladd@grs,??___fladd
  8854   001DA8  0E7F               	movlw	127
  8855   001DAA  160D               	andwf	??___fladd^0,f,c
  8856   001DAC  B4D8               	btfsc	status,2,c
  8857   001DAE  EFDB  F00E         	goto	u3491
  8858   001DB2  EFDD  F00E         	goto	u3490
  8859   001DB6                     u3491:
  8860   001DB6  EFE1  F00E         	goto	l1108
  8861   001DBA                     u3490:
  8862   001DBA                     l3693:
  8863   001DBA  0E01               	movlw	1
  8864   001DBC  6E12               	movwf	___fladd@aexp^0,c
  8865   001DBE  EFEA  F00E         	goto	l1107
  8866   001DC2                     l1108:
  8867   001DC2  A005               	btfss	___fladd@b^0,0,c
  8868   001DC4  EFE6  F00E         	goto	u3501
  8869   001DC8  EFE8  F00E         	goto	u3500
  8870   001DCC                     u3501:
  8871   001DCC  EFEA  F00E         	goto	l1107
  8872   001DD0                     u3500:
  8873   001DD0  EFDD  F00E         	goto	l3693
  8874   001DD4                     l1107:
  8875   001DD4  5012               	movf	___fladd@aexp^0,w,c
  8876   001DD6  B4D8               	btfsc	status,2,c
  8877   001DD8  EFF0  F00E         	goto	u3511
  8878   001DDC  EFF2  F00E         	goto	u3510
  8879   001DE0                     u3511:
  8880   001DE0  EF1D  F00F         	goto	l3705
  8881   001DE4                     u3510:
  8882   001DE4  0E01               	movlw	1
  8883   001DE6  2605               	addwf	___fladd@b^0,f,c
  8884   001DE8  0E00               	movlw	0
  8885   001DEA  2206               	addwfc	(___fladd@b+1)^0,f,c
  8886   001DEC  2207               	addwfc	(___fladd@b+2)^0,f,c
  8887   001DEE  2208               	addwfc	(___fladd@b+3)^0,f,c
  8888   001DF0  A008               	btfss	(___fladd@b+3)^0,0,c
  8889   001DF2  EFFD  F00E         	goto	u3521
  8890   001DF6  EFFF  F00E         	goto	u3520
  8891   001DFA                     u3521:
  8892   001DFA  EF1D  F00F         	goto	l3705
  8893   001DFE                     u3520:
  8894   001DFE  C005  F00D         	movff	___fladd@b,??___fladd
  8895   001E02  C006  F00E         	movff	___fladd@b+1,??___fladd+1
  8896   001E06  C007  F00F         	movff	___fladd@b+2,??___fladd+2
  8897   001E0A  C008  F010         	movff	___fladd@b+3,??___fladd+3
  8898   001E0E  3410               	rlcf	(??___fladd+3)^0,w,c
  8899   001E10  3210               	rrcf	(??___fladd+3)^0,f,c
  8900   001E12  320F               	rrcf	(??___fladd+2)^0,f,c
  8901   001E14  320E               	rrcf	(??___fladd+1)^0,f,c
  8902   001E16  320D               	rrcf	??___fladd^0,f,c
  8903   001E18  C00D  F005         	movff	??___fladd,___fladd@b
  8904   001E1C  C00E  F006         	movff	??___fladd+1,___fladd@b+1
  8905   001E20  C00F  F007         	movff	??___fladd+2,___fladd@b+2
  8906   001E24  C010  F008         	movff	??___fladd+3,___fladd@b+3
  8907   001E28  2813               	incf	___fladd@bexp^0,w,c
  8908   001E2A  B4D8               	btfsc	status,2,c
  8909   001E2C  EF1A  F00F         	goto	u3531
  8910   001E30  EF1C  F00F         	goto	u3530
  8911   001E34                     u3531:
  8912   001E34  EF1D  F00F         	goto	l3705
  8913   001E38                     u3530:
  8914   001E38  2A13               	incf	___fladd@bexp^0,f,c
  8915   001E3A                     l3705:
  8916   001E3A  2813               	incf	___fladd@bexp^0,w,c
  8917   001E3C  B4D8               	btfsc	status,2,c
  8918   001E3E  EF23  F00F         	goto	u3541
  8919   001E42  EF25  F00F         	goto	u3540
  8920   001E46                     u3541:
  8921   001E46  EF2D  F00F         	goto	l3709
  8922   001E4A                     u3540:
  8923   001E4A  5013               	movf	___fladd@bexp^0,w,c
  8924   001E4C  A4D8               	btfss	status,2,c
  8925   001E4E  EF2B  F00F         	goto	u3551
  8926   001E52  EF2D  F00F         	goto	u3550
  8927   001E56                     u3551:
  8928   001E56  EF3F  F00F         	goto	l3713
  8929   001E5A                     u3550:
  8930   001E5A                     l3709:
  8931   001E5A  0E00               	movlw	0
  8932   001E5C  6E05               	movwf	___fladd@b^0,c
  8933   001E5E  0E00               	movlw	0
  8934   001E60  6E06               	movwf	(___fladd@b+1)^0,c
  8935   001E62  0E00               	movlw	0
  8936   001E64  6E07               	movwf	(___fladd@b+2)^0,c
  8937   001E66  0E00               	movlw	0
  8938   001E68  6E08               	movwf	(___fladd@b+3)^0,c
  8939   001E6A  5013               	movf	___fladd@bexp^0,w,c
  8940   001E6C  A4D8               	btfss	status,2,c
  8941   001E6E  EF3B  F00F         	goto	u3561
  8942   001E72  EF3D  F00F         	goto	u3560
  8943   001E76                     u3561:
  8944   001E76  EF3F  F00F         	goto	l3713
  8945   001E7A                     u3560:
  8946   001E7A  0E00               	movlw	0
  8947   001E7C  6E11               	movwf	___fladd@signs^0,c
  8948   001E7E                     l3713:
  8949   001E7E  A013               	btfss	___fladd@bexp^0,0,c
  8950   001E80  EF44  F00F         	goto	u3571
  8951   001E84  EF46  F00F         	goto	u3570
  8952   001E88                     u3571:
  8953   001E88  EF49  F00F         	goto	l3717
  8954   001E8C                     u3570:
  8955   001E8C  8E07               	bsf	(___fladd@b+2)^0,7,c
  8956   001E8E  EF4A  F00F         	goto	l3719
  8957   001E92                     l3717:
  8958   001E92  9E07               	bcf	(___fladd@b+2)^0,7,c
  8959   001E94                     l3719:
  8960   001E94  90D8               	bcf	status,0,c
  8961   001E96  3013               	rrcf	___fladd@bexp^0,w,c
  8962   001E98  6E08               	movwf	(___fladd@b+3)^0,c
  8963   001E9A  AE11               	btfss	___fladd@signs^0,7,c
  8964   001E9C  EF52  F00F         	goto	u3581
  8965   001EA0  EF54  F00F         	goto	u3580
  8966   001EA4                     u3581:
  8967   001EA4  EF55  F00F         	goto	l3725
  8968   001EA8                     u3580:
  8969   001EA8  8E08               	bsf	(___fladd@b+3)^0,7,c
  8970   001EAA                     l3725:
  8971   001EAA  C005  F005         	movff	___fladd@b,?___fladd
  8972   001EAE  C006  F006         	movff	___fladd@b+1,?___fladd+1
  8973   001EB2  C007  F007         	movff	___fladd@b+2,?___fladd+2
  8974   001EB6  C008  F008         	movff	___fladd@b+3,?___fladd+3
  8975   001EBA                     l1090:
  8976   001EBA  0012               	return		;funcret
  8977   001EBC                     __end_of___fladd:
  8978                           	callstack 0
  8979                           
  8980 ;; *************** function ___flmul *****************
  8981 ;; Defined at:
  8982 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\sprcmul.c"
  8983 ;; Parameters:    Size  Location     Type
  8984 ;;  b               4   28[COMRAM] unsigned char 
  8985 ;;  a               4   32[COMRAM] unsigned char 
  8986 ;; Auto vars:     Size  Location     Type
  8987 ;;  prod            4   47[COMRAM] struct .
  8988 ;;  grs             4   41[COMRAM] unsigned long 
  8989 ;;  temp            2   51[COMRAM] struct .
  8990 ;;  bexp            1   46[COMRAM] unsigned char 
  8991 ;;  aexp            1   45[COMRAM] unsigned char 
  8992 ;;  sign            1   40[COMRAM] unsigned char 
  8993 ;; Return value:  Size  Location     Type
  8994 ;;                  4   28[COMRAM] unsigned char 
  8995 ;; Registers used:
  8996 ;;		wreg, status,2, status,0, prodl, prodh
  8997 ;; Tracked objects:
  8998 ;;		On entry : 0/0
  8999 ;;		On exit  : 0/0
  9000 ;;		Unchanged: 0/0
  9001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9002 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9003 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9004 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9005 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9006 ;;Total ram usage:       25 bytes
  9007 ;; Hardware stack levels used: 1
  9008 ;; Hardware stack levels required when called: 2
  9009 ;; This function calls:
  9010 ;;		Nothing
  9011 ;; This function is called by:
  9012 ;;		_colorDetect
  9013 ;;		_turnLeft_90
  9014 ;;		_turnRight_90
  9015 ;;		_turn_180
  9016 ;;		_turnRight_135
  9017 ;;		_turnLeft_135
  9018 ;;		_reverseSquareRight
  9019 ;;		_reverseSquareLeft
  9020 ;;		_turnLeft
  9021 ;;		_turnRight
  9022 ;; This function uses a non-reentrant model
  9023 ;;
  9024                           
  9025                           	psect	text40
  9026   00232E                     __ptext40:
  9027                           	callstack 0
  9028   00232E                     ___flmul:
  9029                           	callstack 27
  9030   00232E  5020               	movf	(___flmul@b+3)^0,w,c
  9031   002330  0B80               	andlw	128
  9032   002332  6E29               	movwf	___flmul@sign^0,c
  9033   002334  5020               	movf	(___flmul@b+3)^0,w,c
  9034   002336  2420               	addwf	(___flmul@b+3)^0,w,c
  9035   002338  6E2F               	movwf	___flmul@bexp^0,c
  9036   00233A  AE1F               	btfss	(___flmul@b+2)^0,7,c
  9037   00233C  EFA2  F011         	goto	u3951
  9038   002340  EFA4  F011         	goto	u3950
  9039   002344                     u3951:
  9040   002344  EFA5  F011         	goto	l4049
  9041   002348                     u3950:
  9042   002348  802F               	bsf	___flmul@bexp^0,0,c
  9043   00234A                     l4049:
  9044   00234A  502F               	movf	___flmul@bexp^0,w,c
  9045   00234C  B4D8               	btfsc	status,2,c
  9046   00234E  EFAB  F011         	goto	u3961
  9047   002352  EFAD  F011         	goto	u3960
  9048   002356                     u3961:
  9049   002356  EFC0  F011         	goto	l4057
  9050   00235A                     u3960:
  9051   00235A  282F               	incf	___flmul@bexp^0,w,c
  9052   00235C  A4D8               	btfss	status,2,c
  9053   00235E  EFB3  F011         	goto	u3971
  9054   002362  EFB5  F011         	goto	u3970
  9055   002366                     u3971:
  9056   002366  EFBD  F011         	goto	l4055
  9057   00236A                     u3970:
  9058   00236A  0E00               	movlw	0
  9059   00236C  6E1D               	movwf	___flmul@b^0,c
  9060   00236E  0E00               	movlw	0
  9061   002370  6E1E               	movwf	(___flmul@b+1)^0,c
  9062   002372  0E00               	movlw	0
  9063   002374  6E1F               	movwf	(___flmul@b+2)^0,c
  9064   002376  0E00               	movlw	0
  9065   002378  6E20               	movwf	(___flmul@b+3)^0,c
  9066   00237A                     l4055:
  9067   00237A  8E1F               	bsf	(___flmul@b+2)^0,7,c
  9068   00237C  EFC8  F011         	goto	l4059
  9069   002380                     l4057:
  9070   002380  0E00               	movlw	0
  9071   002382  6E1D               	movwf	___flmul@b^0,c
  9072   002384  0E00               	movlw	0
  9073   002386  6E1E               	movwf	(___flmul@b+1)^0,c
  9074   002388  0E00               	movlw	0
  9075   00238A  6E1F               	movwf	(___flmul@b+2)^0,c
  9076   00238C  0E00               	movlw	0
  9077   00238E  6E20               	movwf	(___flmul@b+3)^0,c
  9078   002390                     l4059:
  9079   002390  5024               	movf	(___flmul@a+3)^0,w,c
  9080   002392  0B80               	andlw	128
  9081   002394  1A29               	xorwf	___flmul@sign^0,f,c
  9082   002396  5024               	movf	(___flmul@a+3)^0,w,c
  9083   002398  2424               	addwf	(___flmul@a+3)^0,w,c
  9084   00239A  6E2E               	movwf	___flmul@aexp^0,c
  9085   00239C  AE23               	btfss	(___flmul@a+2)^0,7,c
  9086   00239E  EFD3  F011         	goto	u3981
  9087   0023A2  EFD5  F011         	goto	u3980
  9088   0023A6                     u3981:
  9089   0023A6  EFD6  F011         	goto	l4067
  9090   0023AA                     u3980:
  9091   0023AA  802E               	bsf	___flmul@aexp^0,0,c
  9092   0023AC                     l4067:
  9093   0023AC  502E               	movf	___flmul@aexp^0,w,c
  9094   0023AE  B4D8               	btfsc	status,2,c
  9095   0023B0  EFDC  F011         	goto	u3991
  9096   0023B4  EFDE  F011         	goto	u3990
  9097   0023B8                     u3991:
  9098   0023B8  EFF1  F011         	goto	l4075
  9099   0023BC                     u3990:
  9100   0023BC  282E               	incf	___flmul@aexp^0,w,c
  9101   0023BE  A4D8               	btfss	status,2,c
  9102   0023C0  EFE4  F011         	goto	u4001
  9103   0023C4  EFE6  F011         	goto	u4000
  9104   0023C8                     u4001:
  9105   0023C8  EFEE  F011         	goto	l4073
  9106   0023CC                     u4000:
  9107   0023CC  0E00               	movlw	0
  9108   0023CE  6E21               	movwf	___flmul@a^0,c
  9109   0023D0  0E00               	movlw	0
  9110   0023D2  6E22               	movwf	(___flmul@a+1)^0,c
  9111   0023D4  0E00               	movlw	0
  9112   0023D6  6E23               	movwf	(___flmul@a+2)^0,c
  9113   0023D8  0E00               	movlw	0
  9114   0023DA  6E24               	movwf	(___flmul@a+3)^0,c
  9115   0023DC                     l4073:
  9116   0023DC  8E23               	bsf	(___flmul@a+2)^0,7,c
  9117   0023DE  EFF9  F011         	goto	l1167
  9118   0023E2                     l4075:
  9119   0023E2  0E00               	movlw	0
  9120   0023E4  6E21               	movwf	___flmul@a^0,c
  9121   0023E6  0E00               	movlw	0
  9122   0023E8  6E22               	movwf	(___flmul@a+1)^0,c
  9123   0023EA  0E00               	movlw	0
  9124   0023EC  6E23               	movwf	(___flmul@a+2)^0,c
  9125   0023EE  0E00               	movlw	0
  9126   0023F0  6E24               	movwf	(___flmul@a+3)^0,c
  9127   0023F2                     l1167:
  9128   0023F2  502E               	movf	___flmul@aexp^0,w,c
  9129   0023F4  B4D8               	btfsc	status,2,c
  9130   0023F6  EFFF  F011         	goto	u4011
  9131   0023FA  EF01  F012         	goto	u4010
  9132   0023FE                     u4011:
  9133   0023FE  EF09  F012         	goto	l4079
  9134   002402                     u4010:
  9135   002402  502F               	movf	___flmul@bexp^0,w,c
  9136   002404  A4D8               	btfss	status,2,c
  9137   002406  EF07  F012         	goto	u4021
  9138   00240A  EF09  F012         	goto	u4020
  9139   00240E                     u4021:
  9140   00240E  EF13  F012         	goto	l4083
  9141   002412                     u4020:
  9142   002412                     l4079:
  9143   002412  0E00               	movlw	0
  9144   002414  6E1D               	movwf	?___flmul^0,c
  9145   002416  0E00               	movlw	0
  9146   002418  6E1E               	movwf	(?___flmul+1)^0,c
  9147   00241A  0E00               	movlw	0
  9148   00241C  6E1F               	movwf	(?___flmul+2)^0,c
  9149   00241E  0E00               	movlw	0
  9150   002420  6E20               	movwf	(?___flmul+3)^0,c
  9151   002422  EFAB  F013         	goto	l1171
  9152   002426                     l4083:
  9153   002426  5023               	movf	(___flmul@a+2)^0,w,c
  9154   002428  021D               	mulwf	___flmul@b^0,c
  9155   00242A  CFF3 F034          	movff	prodl,___flmul@temp
  9156   00242E  CFF4 F035          	movff	prodh,___flmul@temp+1
  9157   002432  5034               	movf	___flmul@temp^0,w,c
  9158   002434  6E2A               	movwf	___flmul@grs^0,c
  9159   002436  6A2B               	clrf	(___flmul@grs+1)^0,c
  9160   002438  6A2C               	clrf	(___flmul@grs+2)^0,c
  9161   00243A  6A2D               	clrf	(___flmul@grs+3)^0,c
  9162   00243C  5035               	movf	(___flmul@temp+1)^0,w,c
  9163   00243E  6E30               	movwf	___flmul@prod^0,c
  9164   002440  6A31               	clrf	(___flmul@prod+1)^0,c
  9165   002442  6A32               	clrf	(___flmul@prod+2)^0,c
  9166   002444  6A33               	clrf	(___flmul@prod+3)^0,c
  9167   002446  5022               	movf	(___flmul@a+1)^0,w,c
  9168   002448  021E               	mulwf	(___flmul@b+1)^0,c
  9169   00244A  CFF3 F034          	movff	prodl,___flmul@temp
  9170   00244E  CFF4 F035          	movff	prodh,___flmul@temp+1
  9171   002452  5034               	movf	___flmul@temp^0,w,c
  9172   002454  262A               	addwf	___flmul@grs^0,f,c
  9173   002456  0E00               	movlw	0
  9174   002458  222B               	addwfc	(___flmul@grs+1)^0,f,c
  9175   00245A  222C               	addwfc	(___flmul@grs+2)^0,f,c
  9176   00245C  222D               	addwfc	(___flmul@grs+3)^0,f,c
  9177   00245E  5035               	movf	(___flmul@temp+1)^0,w,c
  9178   002460  2630               	addwf	___flmul@prod^0,f,c
  9179   002462  0E00               	movlw	0
  9180   002464  2231               	addwfc	(___flmul@prod+1)^0,f,c
  9181   002466  2232               	addwfc	(___flmul@prod+2)^0,f,c
  9182   002468  2233               	addwfc	(___flmul@prod+3)^0,f,c
  9183   00246A  5021               	movf	___flmul@a^0,w,c
  9184   00246C  021F               	mulwf	(___flmul@b+2)^0,c
  9185   00246E  CFF3 F034          	movff	prodl,___flmul@temp
  9186   002472  CFF4 F035          	movff	prodh,___flmul@temp+1
  9187   002476  5034               	movf	___flmul@temp^0,w,c
  9188   002478  262A               	addwf	___flmul@grs^0,f,c
  9189   00247A  0E00               	movlw	0
  9190   00247C  222B               	addwfc	(___flmul@grs+1)^0,f,c
  9191   00247E  222C               	addwfc	(___flmul@grs+2)^0,f,c
  9192   002480  222D               	addwfc	(___flmul@grs+3)^0,f,c
  9193   002482  5035               	movf	(___flmul@temp+1)^0,w,c
  9194   002484  2630               	addwf	___flmul@prod^0,f,c
  9195   002486  0E00               	movlw	0
  9196   002488  2231               	addwfc	(___flmul@prod+1)^0,f,c
  9197   00248A  2232               	addwfc	(___flmul@prod+2)^0,f,c
  9198   00248C  2233               	addwfc	(___flmul@prod+3)^0,f,c
  9199   00248E  C02C  F02D         	movff	___flmul@grs+2,___flmul@grs+3
  9200   002492  C02B  F02C         	movff	___flmul@grs+1,___flmul@grs+2
  9201   002496  C02A  F02B         	movff	___flmul@grs,___flmul@grs+1
  9202   00249A  6A2A               	clrf	___flmul@grs^0,c
  9203   00249C  5021               	movf	___flmul@a^0,w,c
  9204   00249E  021E               	mulwf	(___flmul@b+1)^0,c
  9205   0024A0  CFF3 F034          	movff	prodl,___flmul@temp
  9206   0024A4  CFF4 F035          	movff	prodh,___flmul@temp+1
  9207   0024A8  5034               	movf	___flmul@temp^0,w,c
  9208   0024AA  262A               	addwf	___flmul@grs^0,f,c
  9209   0024AC  5035               	movf	(___flmul@temp+1)^0,w,c
  9210   0024AE  222B               	addwfc	(___flmul@grs+1)^0,f,c
  9211   0024B0  0E00               	movlw	0
  9212   0024B2  222C               	addwfc	(___flmul@grs+2)^0,f,c
  9213   0024B4  0E00               	movlw	0
  9214   0024B6  222D               	addwfc	(___flmul@grs+3)^0,f,c
  9215   0024B8  5022               	movf	(___flmul@a+1)^0,w,c
  9216   0024BA  021D               	mulwf	___flmul@b^0,c
  9217   0024BC  CFF3 F034          	movff	prodl,___flmul@temp
  9218   0024C0  CFF4 F035          	movff	prodh,___flmul@temp+1
  9219   0024C4  5034               	movf	___flmul@temp^0,w,c
  9220   0024C6  262A               	addwf	___flmul@grs^0,f,c
  9221   0024C8  5035               	movf	(___flmul@temp+1)^0,w,c
  9222   0024CA  222B               	addwfc	(___flmul@grs+1)^0,f,c
  9223   0024CC  0E00               	movlw	0
  9224   0024CE  222C               	addwfc	(___flmul@grs+2)^0,f,c
  9225   0024D0  0E00               	movlw	0
  9226   0024D2  222D               	addwfc	(___flmul@grs+3)^0,f,c
  9227   0024D4  C02C  F02D         	movff	___flmul@grs+2,___flmul@grs+3
  9228   0024D8  C02B  F02C         	movff	___flmul@grs+1,___flmul@grs+2
  9229   0024DC  C02A  F02B         	movff	___flmul@grs,___flmul@grs+1
  9230   0024E0  6A2A               	clrf	___flmul@grs^0,c
  9231   0024E2  5021               	movf	___flmul@a^0,w,c
  9232   0024E4  021D               	mulwf	___flmul@b^0,c
  9233   0024E6  CFF3 F034          	movff	prodl,___flmul@temp
  9234   0024EA  CFF4 F035          	movff	prodh,___flmul@temp+1
  9235   0024EE  5034               	movf	___flmul@temp^0,w,c
  9236   0024F0  262A               	addwf	___flmul@grs^0,f,c
  9237   0024F2  5035               	movf	(___flmul@temp+1)^0,w,c
  9238   0024F4  222B               	addwfc	(___flmul@grs+1)^0,f,c
  9239   0024F6  0E00               	movlw	0
  9240   0024F8  222C               	addwfc	(___flmul@grs+2)^0,f,c
  9241   0024FA  0E00               	movlw	0
  9242   0024FC  222D               	addwfc	(___flmul@grs+3)^0,f,c
  9243   0024FE  5023               	movf	(___flmul@a+2)^0,w,c
  9244   002500  021E               	mulwf	(___flmul@b+1)^0,c
  9245   002502  CFF3 F034          	movff	prodl,___flmul@temp
  9246   002506  CFF4 F035          	movff	prodh,___flmul@temp+1
  9247   00250A  5034               	movf	___flmul@temp^0,w,c
  9248   00250C  2630               	addwf	___flmul@prod^0,f,c
  9249   00250E  5035               	movf	(___flmul@temp+1)^0,w,c
  9250   002510  2231               	addwfc	(___flmul@prod+1)^0,f,c
  9251   002512  0E00               	movlw	0
  9252   002514  2232               	addwfc	(___flmul@prod+2)^0,f,c
  9253   002516  0E00               	movlw	0
  9254   002518  2233               	addwfc	(___flmul@prod+3)^0,f,c
  9255   00251A  5022               	movf	(___flmul@a+1)^0,w,c
  9256   00251C  021F               	mulwf	(___flmul@b+2)^0,c
  9257   00251E  CFF3 F034          	movff	prodl,___flmul@temp
  9258   002522  CFF4 F035          	movff	prodh,___flmul@temp+1
  9259   002526  5034               	movf	___flmul@temp^0,w,c
  9260   002528  2630               	addwf	___flmul@prod^0,f,c
  9261   00252A  5035               	movf	(___flmul@temp+1)^0,w,c
  9262   00252C  2231               	addwfc	(___flmul@prod+1)^0,f,c
  9263   00252E  0E00               	movlw	0
  9264   002530  2232               	addwfc	(___flmul@prod+2)^0,f,c
  9265   002532  0E00               	movlw	0
  9266   002534  2233               	addwfc	(___flmul@prod+3)^0,f,c
  9267   002536  5023               	movf	(___flmul@a+2)^0,w,c
  9268   002538  021F               	mulwf	(___flmul@b+2)^0,c
  9269   00253A  CFF3 F034          	movff	prodl,___flmul@temp
  9270   00253E  CFF4 F035          	movff	prodh,___flmul@temp+1
  9271   002542  5034               	movf	___flmul@temp^0,w,c
  9272   002544  6E25               	movwf	??___flmul^0,c
  9273   002546  5035               	movf	(___flmul@temp+1)^0,w,c
  9274   002548  6E26               	movwf	(??___flmul+1)^0,c
  9275   00254A  6A27               	clrf	(??___flmul+2)^0,c
  9276   00254C  6A28               	clrf	(??___flmul+3)^0,c
  9277   00254E  C027  F028         	movff	??___flmul+2,??___flmul+3
  9278   002552  C026  F027         	movff	??___flmul+1,??___flmul+2
  9279   002556  C025  F026         	movff	??___flmul,??___flmul+1
  9280   00255A  6A25               	clrf	??___flmul^0,c
  9281   00255C  5025               	movf	??___flmul^0,w,c
  9282   00255E  2630               	addwf	___flmul@prod^0,f,c
  9283   002560  5026               	movf	(??___flmul+1)^0,w,c
  9284   002562  2231               	addwfc	(___flmul@prod+1)^0,f,c
  9285   002564  5027               	movf	(??___flmul+2)^0,w,c
  9286   002566  2232               	addwfc	(___flmul@prod+2)^0,f,c
  9287   002568  5028               	movf	(??___flmul+3)^0,w,c
  9288   00256A  2233               	addwfc	(___flmul@prod+3)^0,f,c
  9289   00256C  C02A  F025         	movff	___flmul@grs,??___flmul
  9290   002570  C02B  F026         	movff	___flmul@grs+1,??___flmul+1
  9291   002574  C02C  F027         	movff	___flmul@grs+2,??___flmul+2
  9292   002578  C02D  F028         	movff	___flmul@grs+3,??___flmul+3
  9293   00257C  0E19               	movlw	25
  9294   00257E  EFC6  F012         	goto	u4030
  9295   002582                     u4035:
  9296   002582  90D8               	bcf	status,0,c
  9297   002584  3228               	rrcf	(??___flmul+3)^0,f,c
  9298   002586  3227               	rrcf	(??___flmul+2)^0,f,c
  9299   002588  3226               	rrcf	(??___flmul+1)^0,f,c
  9300   00258A  3225               	rrcf	??___flmul^0,f,c
  9301   00258C                     u4030:
  9302   00258C  2EE8               	decfsz	wreg,f,c
  9303   00258E  EFC1  F012         	goto	u4035
  9304   002592  5025               	movf	??___flmul^0,w,c
  9305   002594  2630               	addwf	___flmul@prod^0,f,c
  9306   002596  5026               	movf	(??___flmul+1)^0,w,c
  9307   002598  2231               	addwfc	(___flmul@prod+1)^0,f,c
  9308   00259A  5027               	movf	(??___flmul+2)^0,w,c
  9309   00259C  2232               	addwfc	(___flmul@prod+2)^0,f,c
  9310   00259E  5028               	movf	(??___flmul+3)^0,w,c
  9311   0025A0  2233               	addwfc	(___flmul@prod+3)^0,f,c
  9312   0025A2  C02C  F02D         	movff	___flmul@grs+2,___flmul@grs+3
  9313   0025A6  C02B  F02C         	movff	___flmul@grs+1,___flmul@grs+2
  9314   0025AA  C02A  F02B         	movff	___flmul@grs,___flmul@grs+1
  9315   0025AE  6A2A               	clrf	___flmul@grs^0,c
  9316   0025B0  502E               	movf	___flmul@aexp^0,w,c
  9317   0025B2  C02F  F025         	movff	___flmul@bexp,??___flmul
  9318   0025B6  6A26               	clrf	(??___flmul+1)^0,c
  9319   0025B8  2625               	addwf	??___flmul^0,f,c
  9320   0025BA  0E00               	movlw	0
  9321   0025BC  2226               	addwfc	(??___flmul+1)^0,f,c
  9322   0025BE  0E82               	movlw	130
  9323   0025C0  2425               	addwf	??___flmul^0,w,c
  9324   0025C2  6E34               	movwf	___flmul@temp^0,c
  9325   0025C4  0EFF               	movlw	255
  9326   0025C6  2026               	addwfc	(??___flmul+1)^0,w,c
  9327   0025C8  6E35               	movwf	(___flmul@temp+1)^0,c
  9328   0025CA  EFFC  F012         	goto	l4131
  9329   0025CE                     l4125:
  9330   0025CE  90D8               	bcf	status,0,c
  9331   0025D0  3630               	rlcf	___flmul@prod^0,f,c
  9332   0025D2  3631               	rlcf	(___flmul@prod+1)^0,f,c
  9333   0025D4  3632               	rlcf	(___flmul@prod+2)^0,f,c
  9334   0025D6  3633               	rlcf	(___flmul@prod+3)^0,f,c
  9335   0025D8  AE2D               	btfss	(___flmul@grs+3)^0,7,c
  9336   0025DA  EFF1  F012         	goto	u4041
  9337   0025DE  EFF3  F012         	goto	u4040
  9338   0025E2                     u4041:
  9339   0025E2  EFF4  F012         	goto	l1174
  9340   0025E6                     u4040:
  9341   0025E6  8030               	bsf	___flmul@prod^0,0,c
  9342   0025E8                     l1174:
  9343   0025E8  90D8               	bcf	status,0,c
  9344   0025EA  362A               	rlcf	___flmul@grs^0,f,c
  9345   0025EC  362B               	rlcf	(___flmul@grs+1)^0,f,c
  9346   0025EE  362C               	rlcf	(___flmul@grs+2)^0,f,c
  9347   0025F0  362D               	rlcf	(___flmul@grs+3)^0,f,c
  9348   0025F2  0634               	decf	___flmul@temp^0,f,c
  9349   0025F4  A0D8               	btfss	status,0,c
  9350   0025F6  0635               	decf	(___flmul@temp+1)^0,f,c
  9351   0025F8                     l4131:
  9352   0025F8  AE32               	btfss	(___flmul@prod+2)^0,7,c
  9353   0025FA  EF01  F013         	goto	u4051
  9354   0025FE  EF03  F013         	goto	u4050
  9355   002602                     u4051:
  9356   002602  EFE7  F012         	goto	l4125
  9357   002606                     u4050:
  9358   002606  0E00               	movlw	0
  9359   002608  6E2E               	movwf	___flmul@aexp^0,c
  9360   00260A  AE2D               	btfss	(___flmul@grs+3)^0,7,c
  9361   00260C  EF0A  F013         	goto	u4061
  9362   002610  EF0C  F013         	goto	u4060
  9363   002614                     u4061:
  9364   002614  EF30  F013         	goto	l1176
  9365   002618                     u4060:
  9366   002618  0EFF               	movlw	255
  9367   00261A  142A               	andwf	___flmul@grs^0,w,c
  9368   00261C  6E25               	movwf	??___flmul^0,c
  9369   00261E  0EFF               	movlw	255
  9370   002620  142B               	andwf	(___flmul@grs+1)^0,w,c
  9371   002622  6E26               	movwf	(??___flmul+1)^0,c
  9372   002624  0EFF               	movlw	255
  9373   002626  142C               	andwf	(___flmul@grs+2)^0,w,c
  9374   002628  6E27               	movwf	(??___flmul+2)^0,c
  9375   00262A  0E7F               	movlw	127
  9376   00262C  142D               	andwf	(___flmul@grs+3)^0,w,c
  9377   00262E  6E28               	movwf	(??___flmul+3)^0,c
  9378   002630  5025               	movf	??___flmul^0,w,c
  9379   002632  1026               	iorwf	(??___flmul+1)^0,w,c
  9380   002634  1027               	iorwf	(??___flmul+2)^0,w,c
  9381   002636  1028               	iorwf	(??___flmul+3)^0,w,c
  9382   002638  B4D8               	btfsc	status,2,c
  9383   00263A  EF21  F013         	goto	u4071
  9384   00263E  EF23  F013         	goto	u4070
  9385   002642                     u4071:
  9386   002642  EF27  F013         	goto	l1177
  9387   002646                     u4070:
  9388   002646                     l4139:
  9389   002646  0E01               	movlw	1
  9390   002648  6E2E               	movwf	___flmul@aexp^0,c
  9391   00264A  EF30  F013         	goto	l1176
  9392   00264E                     l1177:
  9393   00264E  A030               	btfss	___flmul@prod^0,0,c
  9394   002650  EF2C  F013         	goto	u4081
  9395   002654  EF2E  F013         	goto	u4080
  9396   002658                     u4081:
  9397   002658  EF30  F013         	goto	l1176
  9398   00265C                     u4080:
  9399   00265C  EF23  F013         	goto	l4139
  9400   002660                     l1176:
  9401   002660  502E               	movf	___flmul@aexp^0,w,c
  9402   002662  B4D8               	btfsc	status,2,c
  9403   002664  EF36  F013         	goto	u4091
  9404   002668  EF38  F013         	goto	u4090
  9405   00266C                     u4091:
  9406   00266C  EF5C  F013         	goto	l4151
  9407   002670                     u4090:
  9408   002670  0E01               	movlw	1
  9409   002672  2630               	addwf	___flmul@prod^0,f,c
  9410   002674  0E00               	movlw	0
  9411   002676  2231               	addwfc	(___flmul@prod+1)^0,f,c
  9412   002678  2232               	addwfc	(___flmul@prod+2)^0,f,c
  9413   00267A  2233               	addwfc	(___flmul@prod+3)^0,f,c
  9414   00267C  A033               	btfss	(___flmul@prod+3)^0,0,c
  9415   00267E  EF43  F013         	goto	u4101
  9416   002682  EF45  F013         	goto	u4100
  9417   002686                     u4101:
  9418   002686  EF5C  F013         	goto	l4151
  9419   00268A                     u4100:
  9420   00268A  C030  F025         	movff	___flmul@prod,??___flmul
  9421   00268E  C031  F026         	movff	___flmul@prod+1,??___flmul+1
  9422   002692  C032  F027         	movff	___flmul@prod+2,??___flmul+2
  9423   002696  C033  F028         	movff	___flmul@prod+3,??___flmul+3
  9424   00269A  3428               	rlcf	(??___flmul+3)^0,w,c
  9425   00269C  3228               	rrcf	(??___flmul+3)^0,f,c
  9426   00269E  3227               	rrcf	(??___flmul+2)^0,f,c
  9427   0026A0  3226               	rrcf	(??___flmul+1)^0,f,c
  9428   0026A2  3225               	rrcf	??___flmul^0,f,c
  9429   0026A4  C025  F030         	movff	??___flmul,___flmul@prod
  9430   0026A8  C026  F031         	movff	??___flmul+1,___flmul@prod+1
  9431   0026AC  C027  F032         	movff	??___flmul+2,___flmul@prod+2
  9432   0026B0  C028  F033         	movff	??___flmul+3,___flmul@prod+3
  9433   0026B4  4A34               	infsnz	___flmul@temp^0,f,c
  9434   0026B6  2A35               	incf	(___flmul@temp+1)^0,f,c
  9435   0026B8                     l4151:
  9436   0026B8  BE35               	btfsc	(___flmul@temp+1)^0,7,c
  9437   0026BA  EF67  F013         	goto	u4111
  9438   0026BE  5035               	movf	(___flmul@temp+1)^0,w,c
  9439   0026C0  E108               	bnz	u4110
  9440   0026C2  2834               	incf	___flmul@temp^0,w,c
  9441   0026C4  A0D8               	btfss	status,0,c
  9442   0026C6  EF67  F013         	goto	u4111
  9443   0026CA  EF69  F013         	goto	u4110
  9444   0026CE                     u4111:
  9445   0026CE  EF73  F013         	goto	l4155
  9446   0026D2                     u4110:
  9447   0026D2  0E00               	movlw	0
  9448   0026D4  6E30               	movwf	___flmul@prod^0,c
  9449   0026D6  0E00               	movlw	0
  9450   0026D8  6E31               	movwf	(___flmul@prod+1)^0,c
  9451   0026DA  0E80               	movlw	128
  9452   0026DC  6E32               	movwf	(___flmul@prod+2)^0,c
  9453   0026DE  0E7F               	movlw	127
  9454   0026E0  6E33               	movwf	(___flmul@prod+3)^0,c
  9455   0026E2  EFA1  F013         	goto	l4167
  9456   0026E6                     l4155:
  9457   0026E6  BE35               	btfsc	(___flmul@temp+1)^0,7,c
  9458   0026E8  EF80  F013         	goto	u4120
  9459   0026EC  5035               	movf	(___flmul@temp+1)^0,w,c
  9460   0026EE  E106               	bnz	u4121
  9461   0026F0  0434               	decf	___flmul@temp^0,w,c
  9462   0026F2  B0D8               	btfsc	status,0,c
  9463   0026F4  EF7E  F013         	goto	u4121
  9464   0026F8  EF80  F013         	goto	u4120
  9465   0026FC                     u4121:
  9466   0026FC  EF8C  F013         	goto	l1184
  9467   002700                     u4120:
  9468   002700  0E00               	movlw	0
  9469   002702  6E30               	movwf	___flmul@prod^0,c
  9470   002704  0E00               	movlw	0
  9471   002706  6E31               	movwf	(___flmul@prod+1)^0,c
  9472   002708  0E00               	movlw	0
  9473   00270A  6E32               	movwf	(___flmul@prod+2)^0,c
  9474   00270C  0E00               	movlw	0
  9475   00270E  6E33               	movwf	(___flmul@prod+3)^0,c
  9476   002710  0E00               	movlw	0
  9477   002712  6E29               	movwf	___flmul@sign^0,c
  9478   002714  EFA1  F013         	goto	l4167
  9479   002718                     l1184:
  9480   002718  C034  F02F         	movff	___flmul@temp,___flmul@bexp
  9481   00271C  0EFF               	movlw	255
  9482   00271E  1630               	andwf	___flmul@prod^0,f,c
  9483   002720  0EFF               	movlw	255
  9484   002722  1631               	andwf	(___flmul@prod+1)^0,f,c
  9485   002724  0E7F               	movlw	127
  9486   002726  1632               	andwf	(___flmul@prod+2)^0,f,c
  9487   002728  0E00               	movlw	0
  9488   00272A  1633               	andwf	(___flmul@prod+3)^0,f,c
  9489   00272C  A02F               	btfss	___flmul@bexp^0,0,c
  9490   00272E  EF9B  F013         	goto	u4131
  9491   002732  EF9D  F013         	goto	u4130
  9492   002736                     u4131:
  9493   002736  EF9E  F013         	goto	l4165
  9494   00273A                     u4130:
  9495   00273A  8E32               	bsf	(___flmul@prod+2)^0,7,c
  9496   00273C                     l4165:
  9497   00273C  90D8               	bcf	status,0,c
  9498   00273E  302F               	rrcf	___flmul@bexp^0,w,c
  9499   002740  6E33               	movwf	(___flmul@prod+3)^0,c
  9500   002742                     l4167:
  9501   002742  5029               	movf	___flmul@sign^0,w,c
  9502   002744  1233               	iorwf	(___flmul@prod+3)^0,f,c
  9503   002746  C030  F01D         	movff	___flmul@prod,?___flmul
  9504   00274A  C031  F01E         	movff	___flmul@prod+1,?___flmul+1
  9505   00274E  C032  F01F         	movff	___flmul@prod+2,?___flmul+2
  9506   002752  C033  F020         	movff	___flmul@prod+3,?___flmul+3
  9507   002756                     l1171:
  9508   002756  0012               	return		;funcret
  9509   002758                     __end_of___flmul:
  9510                           	callstack 0
  9511                           
  9512 ;; *************** function ___flge *****************
  9513 ;; Defined at:
  9514 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\flge.c"
  9515 ;; Parameters:    Size  Location     Type
  9516 ;;  ff1             4   28[COMRAM] unsigned char 
  9517 ;;  ff2             4   32[COMRAM] unsigned char 
  9518 ;; Auto vars:     Size  Location     Type
  9519 ;;		None
  9520 ;; Return value:  Size  Location     Type
  9521 ;;		None               void
  9522 ;; Registers used:
  9523 ;;		wreg, status,2, status,0
  9524 ;; Tracked objects:
  9525 ;;		On entry : 0/0
  9526 ;;		On exit  : 0/0
  9527 ;;		Unchanged: 0/0
  9528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9529 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9531 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9532 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9533 ;;Total ram usage:       12 bytes
  9534 ;; Hardware stack levels used: 1
  9535 ;; Hardware stack levels required when called: 2
  9536 ;; This function calls:
  9537 ;;		Nothing
  9538 ;; This function is called by:
  9539 ;;		_colorDetect
  9540 ;;		_main
  9541 ;; This function uses a non-reentrant model
  9542 ;;
  9543                           
  9544                           	psect	text41
  9545   003D7A                     __ptext41:
  9546                           	callstack 0
  9547   003D7A                     ___flge:
  9548                           	callstack 27
  9549   003D7A  0E00               	movlw	0
  9550   003D7C  141D               	andwf	___flge@ff1^0,w,c
  9551   003D7E  6E25               	movwf	??___flge^0,c
  9552   003D80  0E00               	movlw	0
  9553   003D82  141E               	andwf	(___flge@ff1+1)^0,w,c
  9554   003D84  6E26               	movwf	(??___flge+1)^0,c
  9555   003D86  0E80               	movlw	128
  9556   003D88  141F               	andwf	(___flge@ff1+2)^0,w,c
  9557   003D8A  6E27               	movwf	(??___flge+2)^0,c
  9558   003D8C  0E7F               	movlw	127
  9559   003D8E  1420               	andwf	(___flge@ff1+3)^0,w,c
  9560   003D90  6E28               	movwf	(??___flge+3)^0,c
  9561   003D92  5025               	movf	??___flge^0,w,c
  9562   003D94  1026               	iorwf	(??___flge+1)^0,w,c
  9563   003D96  1027               	iorwf	(??___flge+2)^0,w,c
  9564   003D98  1028               	iorwf	(??___flge+3)^0,w,c
  9565   003D9A  A4D8               	btfss	status,2,c
  9566   003D9C  EFD2  F01E         	goto	u4141
  9567   003DA0  EFD4  F01E         	goto	u4140
  9568   003DA4                     u4141:
  9569   003DA4  EFDC  F01E         	goto	l4183
  9570   003DA8                     u4140:
  9571   003DA8  0E00               	movlw	0
  9572   003DAA  6E1D               	movwf	___flge@ff1^0,c
  9573   003DAC  0E00               	movlw	0
  9574   003DAE  6E1E               	movwf	(___flge@ff1+1)^0,c
  9575   003DB0  0E00               	movlw	0
  9576   003DB2  6E1F               	movwf	(___flge@ff1+2)^0,c
  9577   003DB4  0E00               	movlw	0
  9578   003DB6  6E20               	movwf	(___flge@ff1+3)^0,c
  9579   003DB8                     l4183:
  9580   003DB8  0E00               	movlw	0
  9581   003DBA  1421               	andwf	___flge@ff2^0,w,c
  9582   003DBC  6E25               	movwf	??___flge^0,c
  9583   003DBE  0E00               	movlw	0
  9584   003DC0  1422               	andwf	(___flge@ff2+1)^0,w,c
  9585   003DC2  6E26               	movwf	(??___flge+1)^0,c
  9586   003DC4  0E80               	movlw	128
  9587   003DC6  1423               	andwf	(___flge@ff2+2)^0,w,c
  9588   003DC8  6E27               	movwf	(??___flge+2)^0,c
  9589   003DCA  0E7F               	movlw	127
  9590   003DCC  1424               	andwf	(___flge@ff2+3)^0,w,c
  9591   003DCE  6E28               	movwf	(??___flge+3)^0,c
  9592   003DD0  5025               	movf	??___flge^0,w,c
  9593   003DD2  1026               	iorwf	(??___flge+1)^0,w,c
  9594   003DD4  1027               	iorwf	(??___flge+2)^0,w,c
  9595   003DD6  1028               	iorwf	(??___flge+3)^0,w,c
  9596   003DD8  A4D8               	btfss	status,2,c
  9597   003DDA  EFF1  F01E         	goto	u4151
  9598   003DDE  EFF3  F01E         	goto	u4150
  9599   003DE2                     u4151:
  9600   003DE2  EFFB  F01E         	goto	l4187
  9601   003DE6                     u4150:
  9602   003DE6  0E00               	movlw	0
  9603   003DE8  6E21               	movwf	___flge@ff2^0,c
  9604   003DEA  0E00               	movlw	0
  9605   003DEC  6E22               	movwf	(___flge@ff2+1)^0,c
  9606   003DEE  0E00               	movlw	0
  9607   003DF0  6E23               	movwf	(___flge@ff2+2)^0,c
  9608   003DF2  0E00               	movlw	0
  9609   003DF4  6E24               	movwf	(___flge@ff2+3)^0,c
  9610   003DF6                     l4187:
  9611   003DF6  AE20               	btfss	(___flge@ff1+3)^0,7,c
  9612   003DF8  EF00  F01F         	goto	u4161
  9613   003DFC  EF02  F01F         	goto	u4160
  9614   003E00                     u4161:
  9615   003E00  EF0B  F01F         	goto	l4191
  9616   003E04                     u4160:
  9617   003E04  6C1D               	negf	___flge@ff1^0,c
  9618   003E06  1E1E               	comf	(___flge@ff1+1)^0,f,c
  9619   003E08  B0D8               	btfsc	status,0,c
  9620   003E0A  2A1E               	incf	(___flge@ff1+1)^0,f,c
  9621   003E0C  1E1F               	comf	(___flge@ff1+2)^0,f,c
  9622   003E0E  B0D8               	btfsc	status,0,c
  9623   003E10  2A1F               	incf	(___flge@ff1+2)^0,f,c
  9624   003E12  0E80               	movlw	128
  9625   003E14  5620               	subfwb	(___flge@ff1+3)^0,f,c
  9626   003E16                     l4191:
  9627   003E16  AE24               	btfss	(___flge@ff2+3)^0,7,c
  9628   003E18  EF10  F01F         	goto	u4171
  9629   003E1C  EF12  F01F         	goto	u4170
  9630   003E20                     u4171:
  9631   003E20  EF1B  F01F         	goto	l818
  9632   003E24                     u4170:
  9633   003E24  6C21               	negf	___flge@ff2^0,c
  9634   003E26  1E22               	comf	(___flge@ff2+1)^0,f,c
  9635   003E28  B0D8               	btfsc	status,0,c
  9636   003E2A  2A22               	incf	(___flge@ff2+1)^0,f,c
  9637   003E2C  1E23               	comf	(___flge@ff2+2)^0,f,c
  9638   003E2E  B0D8               	btfsc	status,0,c
  9639   003E30  2A23               	incf	(___flge@ff2+2)^0,f,c
  9640   003E32  0E80               	movlw	128
  9641   003E34  5624               	subfwb	(___flge@ff2+3)^0,f,c
  9642   003E36                     l818:
  9643   003E36  0E00               	movlw	0
  9644   003E38  1A1D               	xorwf	___flge@ff1^0,f,c
  9645   003E3A  0E00               	movlw	0
  9646   003E3C  1A1E               	xorwf	(___flge@ff1+1)^0,f,c
  9647   003E3E  0E00               	movlw	0
  9648   003E40  1A1F               	xorwf	(___flge@ff1+2)^0,f,c
  9649   003E42  0E80               	movlw	128
  9650   003E44  1A20               	xorwf	(___flge@ff1+3)^0,f,c
  9651   003E46  0E00               	movlw	0
  9652   003E48  1A21               	xorwf	___flge@ff2^0,f,c
  9653   003E4A  0E00               	movlw	0
  9654   003E4C  1A22               	xorwf	(___flge@ff2+1)^0,f,c
  9655   003E4E  0E00               	movlw	0
  9656   003E50  1A23               	xorwf	(___flge@ff2+2)^0,f,c
  9657   003E52  0E80               	movlw	128
  9658   003E54  1A24               	xorwf	(___flge@ff2+3)^0,f,c
  9659   003E56  5021               	movf	___flge@ff2^0,w,c
  9660   003E58  5C1D               	subwf	___flge@ff1^0,w,c
  9661   003E5A  5022               	movf	(___flge@ff2+1)^0,w,c
  9662   003E5C  581E               	subwfb	(___flge@ff1+1)^0,w,c
  9663   003E5E  5023               	movf	(___flge@ff2+2)^0,w,c
  9664   003E60  581F               	subwfb	(___flge@ff1+2)^0,w,c
  9665   003E62  5024               	movf	(___flge@ff2+3)^0,w,c
  9666   003E64  5820               	subwfb	(___flge@ff1+3)^0,w,c
  9667   003E66  B0D8               	btfsc	status,0,c
  9668   003E68  EF38  F01F         	goto	u4181
  9669   003E6C  EF3A  F01F         	goto	u4180
  9670   003E70                     u4181:
  9671   003E70  EF3D  F01F         	goto	l4197
  9672   003E74                     u4180:
  9673   003E74  90D8               	bcf	status,0,c
  9674   003E76  EF3E  F01F         	goto	l823
  9675   003E7A                     l4197:
  9676   003E7A  80D8               	bsf	status,0,c
  9677   003E7C                     l823:
  9678   003E7C  0012               	return		;funcret
  9679   003E7E                     __end_of___flge:
  9680                           	callstack 0
  9681                           
  9682 ;; *************** function ___fldiv *****************
  9683 ;; Defined at:
  9684 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\sprcdiv.c"
  9685 ;; Parameters:    Size  Location     Type
  9686 ;;  b               4   53[COMRAM] unsigned char 
  9687 ;;  a               4   57[COMRAM] unsigned char 
  9688 ;; Auto vars:     Size  Location     Type
  9689 ;;  grs             4   72[COMRAM] unsigned long 
  9690 ;;  rem             4   65[COMRAM] unsigned long 
  9691 ;;  new_exp         2   70[COMRAM] short 
  9692 ;;  aexp            1   77[COMRAM] unsigned char 
  9693 ;;  bexp            1   76[COMRAM] unsigned char 
  9694 ;;  sign            1   69[COMRAM] unsigned char 
  9695 ;; Return value:  Size  Location     Type
  9696 ;;                  4   53[COMRAM] unsigned char 
  9697 ;; Registers used:
  9698 ;;		wreg, status,2, status,0
  9699 ;; Tracked objects:
  9700 ;;		On entry : 0/0
  9701 ;;		On exit  : 0/0
  9702 ;;		Unchanged: 0/0
  9703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9704 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9705 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9706 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9707 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9708 ;;Total ram usage:       25 bytes
  9709 ;; Hardware stack levels used: 1
  9710 ;; Hardware stack levels required when called: 2
  9711 ;; This function calls:
  9712 ;;		Nothing
  9713 ;; This function is called by:
  9714 ;;		_colorDetect
  9715 ;;		_main
  9716 ;; This function uses a non-reentrant model
  9717 ;;
  9718                           
  9719                           	psect	text42
  9720   002758                     __ptext42:
  9721                           	callstack 0
  9722   002758                     ___fldiv:
  9723                           	callstack 27
  9724   002758  5039               	movf	(___fldiv@b+3)^0,w,c
  9725   00275A  0B80               	andlw	128
  9726   00275C  6E46               	movwf	___fldiv@sign^0,c
  9727   00275E  5039               	movf	(___fldiv@b+3)^0,w,c
  9728   002760  2439               	addwf	(___fldiv@b+3)^0,w,c
  9729   002762  6E4D               	movwf	___fldiv@bexp^0,c
  9730   002764  AE38               	btfss	(___fldiv@b+2)^0,7,c
  9731   002766  EFB7  F013         	goto	u3721
  9732   00276A  EFB9  F013         	goto	u3720
  9733   00276E                     u3721:
  9734   00276E  EFBA  F013         	goto	l3911
  9735   002772                     u3720:
  9736   002772  804D               	bsf	___fldiv@bexp^0,0,c
  9737   002774                     l3911:
  9738   002774  504D               	movf	___fldiv@bexp^0,w,c
  9739   002776  B4D8               	btfsc	status,2,c
  9740   002778  EFC0  F013         	goto	u3731
  9741   00277C  EFC2  F013         	goto	u3730
  9742   002780                     u3731:
  9743   002780  EFD7  F013         	goto	l3921
  9744   002784                     u3730:
  9745   002784  284D               	incf	___fldiv@bexp^0,w,c
  9746   002786  A4D8               	btfss	status,2,c
  9747   002788  EFC8  F013         	goto	u3741
  9748   00278C  EFCA  F013         	goto	u3740
  9749   002790                     u3741:
  9750   002790  EFD2  F013         	goto	l3917
  9751   002794                     u3740:
  9752   002794  0E00               	movlw	0
  9753   002796  6E36               	movwf	___fldiv@b^0,c
  9754   002798  0E00               	movlw	0
  9755   00279A  6E37               	movwf	(___fldiv@b+1)^0,c
  9756   00279C  0E00               	movlw	0
  9757   00279E  6E38               	movwf	(___fldiv@b+2)^0,c
  9758   0027A0  0E00               	movlw	0
  9759   0027A2  6E39               	movwf	(___fldiv@b+3)^0,c
  9760   0027A4                     l3917:
  9761   0027A4  8E38               	bsf	(___fldiv@b+2)^0,7,c
  9762   0027A6  0E00               	movlw	0
  9763   0027A8  6E39               	movwf	(___fldiv@b+3)^0,c
  9764   0027AA  EFDF  F013         	goto	l3923
  9765   0027AE                     l3921:
  9766   0027AE  0E00               	movlw	0
  9767   0027B0  6E36               	movwf	___fldiv@b^0,c
  9768   0027B2  0E00               	movlw	0
  9769   0027B4  6E37               	movwf	(___fldiv@b+1)^0,c
  9770   0027B6  0E00               	movlw	0
  9771   0027B8  6E38               	movwf	(___fldiv@b+2)^0,c
  9772   0027BA  0E00               	movlw	0
  9773   0027BC  6E39               	movwf	(___fldiv@b+3)^0,c
  9774   0027BE                     l3923:
  9775   0027BE  503D               	movf	(___fldiv@a+3)^0,w,c
  9776   0027C0  0B80               	andlw	128
  9777   0027C2  1A46               	xorwf	___fldiv@sign^0,f,c
  9778   0027C4  503D               	movf	(___fldiv@a+3)^0,w,c
  9779   0027C6  243D               	addwf	(___fldiv@a+3)^0,w,c
  9780   0027C8  6E4E               	movwf	___fldiv@aexp^0,c
  9781   0027CA  AE3C               	btfss	(___fldiv@a+2)^0,7,c
  9782   0027CC  EFEA  F013         	goto	u3751
  9783   0027D0  EFEC  F013         	goto	u3750
  9784   0027D4                     u3751:
  9785   0027D4  EFED  F013         	goto	l3931
  9786   0027D8                     u3750:
  9787   0027D8  804E               	bsf	___fldiv@aexp^0,0,c
  9788   0027DA                     l3931:
  9789   0027DA  504E               	movf	___fldiv@aexp^0,w,c
  9790   0027DC  B4D8               	btfsc	status,2,c
  9791   0027DE  EFF3  F013         	goto	u3761
  9792   0027E2  EFF5  F013         	goto	u3760
  9793   0027E6                     u3761:
  9794   0027E6  EF0A  F014         	goto	l3941
  9795   0027EA                     u3760:
  9796   0027EA  284E               	incf	___fldiv@aexp^0,w,c
  9797   0027EC  A4D8               	btfss	status,2,c
  9798   0027EE  EFFB  F013         	goto	u3771
  9799   0027F2  EFFD  F013         	goto	u3770
  9800   0027F6                     u3771:
  9801   0027F6  EF05  F014         	goto	l3937
  9802   0027FA                     u3770:
  9803   0027FA  0E00               	movlw	0
  9804   0027FC  6E3A               	movwf	___fldiv@a^0,c
  9805   0027FE  0E00               	movlw	0
  9806   002800  6E3B               	movwf	(___fldiv@a+1)^0,c
  9807   002802  0E00               	movlw	0
  9808   002804  6E3C               	movwf	(___fldiv@a+2)^0,c
  9809   002806  0E00               	movlw	0
  9810   002808  6E3D               	movwf	(___fldiv@a+3)^0,c
  9811   00280A                     l3937:
  9812   00280A  8E3C               	bsf	(___fldiv@a+2)^0,7,c
  9813   00280C  0E00               	movlw	0
  9814   00280E  6E3D               	movwf	(___fldiv@a+3)^0,c
  9815   002810  EF12  F014         	goto	l3943
  9816   002814                     l3941:
  9817   002814  0E00               	movlw	0
  9818   002816  6E3A               	movwf	___fldiv@a^0,c
  9819   002818  0E00               	movlw	0
  9820   00281A  6E3B               	movwf	(___fldiv@a+1)^0,c
  9821   00281C  0E00               	movlw	0
  9822   00281E  6E3C               	movwf	(___fldiv@a+2)^0,c
  9823   002820  0E00               	movlw	0
  9824   002822  6E3D               	movwf	(___fldiv@a+3)^0,c
  9825   002824                     l3943:
  9826   002824  503A               	movf	___fldiv@a^0,w,c
  9827   002826  103B               	iorwf	(___fldiv@a+1)^0,w,c
  9828   002828  103C               	iorwf	(___fldiv@a+2)^0,w,c
  9829   00282A  103D               	iorwf	(___fldiv@a+3)^0,w,c
  9830   00282C  A4D8               	btfss	status,2,c
  9831   00282E  EF1B  F014         	goto	u3781
  9832   002832  EF1D  F014         	goto	u3780
  9833   002836                     u3781:
  9834   002836  EF35  F014         	goto	l3955
  9835   00283A                     u3780:
  9836   00283A  0E00               	movlw	0
  9837   00283C  6E36               	movwf	___fldiv@b^0,c
  9838   00283E  0E00               	movlw	0
  9839   002840  6E37               	movwf	(___fldiv@b+1)^0,c
  9840   002842  0E00               	movlw	0
  9841   002844  6E38               	movwf	(___fldiv@b+2)^0,c
  9842   002846  0E00               	movlw	0
  9843   002848  6E39               	movwf	(___fldiv@b+3)^0,c
  9844   00284A  0E80               	movlw	128
  9845   00284C  1238               	iorwf	(___fldiv@b+2)^0,f,c
  9846   00284E  0E7F               	movlw	127
  9847   002850  1239               	iorwf	(___fldiv@b+3)^0,f,c
  9848   002852                     l3949:
  9849   002852  5046               	movf	___fldiv@sign^0,w,c
  9850   002854  1239               	iorwf	(___fldiv@b+3)^0,f,c
  9851   002856  C036  F036         	movff	___fldiv@b,?___fldiv
  9852   00285A  C037  F037         	movff	___fldiv@b+1,?___fldiv+1
  9853   00285E  C038  F038         	movff	___fldiv@b+2,?___fldiv+2
  9854   002862  C039  F039         	movff	___fldiv@b+3,?___fldiv+3
  9855   002866  EF78  F015         	goto	l1135
  9856   00286A                     l3955:
  9857   00286A  504D               	movf	___fldiv@bexp^0,w,c
  9858   00286C  A4D8               	btfss	status,2,c
  9859   00286E  EF3B  F014         	goto	u3791
  9860   002872  EF3D  F014         	goto	u3790
  9861   002876                     u3791:
  9862   002876  EF47  F014         	goto	l3963
  9863   00287A                     u3790:
  9864   00287A  0E00               	movlw	0
  9865   00287C  6E36               	movwf	?___fldiv^0,c
  9866   00287E  0E00               	movlw	0
  9867   002880  6E37               	movwf	(?___fldiv+1)^0,c
  9868   002882  0E00               	movlw	0
  9869   002884  6E38               	movwf	(?___fldiv+2)^0,c
  9870   002886  0E00               	movlw	0
  9871   002888  6E39               	movwf	(?___fldiv+3)^0,c
  9872   00288A  EF78  F015         	goto	l1135
  9873   00288E                     l3963:
  9874   00288E  504E               	movf	___fldiv@aexp^0,w,c
  9875   002890  C04D  F03E         	movff	___fldiv@bexp,??___fldiv
  9876   002894  6A3F               	clrf	(??___fldiv+1)^0,c
  9877   002896  5E3E               	subwf	??___fldiv^0,f,c
  9878   002898  0E00               	movlw	0
  9879   00289A  5A3F               	subwfb	(??___fldiv+1)^0,f,c
  9880   00289C  0E7F               	movlw	127
  9881   00289E  243E               	addwf	??___fldiv^0,w,c
  9882   0028A0  6E47               	movwf	___fldiv@new_exp^0,c
  9883   0028A2  0E00               	movlw	0
  9884   0028A4  203F               	addwfc	(??___fldiv+1)^0,w,c
  9885   0028A6  6E48               	movwf	(___fldiv@new_exp+1)^0,c
  9886   0028A8  C036  F042         	movff	___fldiv@b,___fldiv@rem
  9887   0028AC  C037  F043         	movff	___fldiv@b+1,___fldiv@rem+1
  9888   0028B0  C038  F044         	movff	___fldiv@b+2,___fldiv@rem+2
  9889   0028B4  C039  F045         	movff	___fldiv@b+3,___fldiv@rem+3
  9890   0028B8  0E00               	movlw	0
  9891   0028BA  6E36               	movwf	___fldiv@b^0,c
  9892   0028BC  0E00               	movlw	0
  9893   0028BE  6E37               	movwf	(___fldiv@b+1)^0,c
  9894   0028C0  0E00               	movlw	0
  9895   0028C2  6E38               	movwf	(___fldiv@b+2)^0,c
  9896   0028C4  0E00               	movlw	0
  9897   0028C6  6E39               	movwf	(___fldiv@b+3)^0,c
  9898   0028C8  0E00               	movlw	0
  9899   0028CA  6E49               	movwf	___fldiv@grs^0,c
  9900   0028CC  0E00               	movlw	0
  9901   0028CE  6E4A               	movwf	(___fldiv@grs+1)^0,c
  9902   0028D0  0E00               	movlw	0
  9903   0028D2  6E4B               	movwf	(___fldiv@grs+2)^0,c
  9904   0028D4  0E00               	movlw	0
  9905   0028D6  6E4C               	movwf	(___fldiv@grs+3)^0,c
  9906   0028D8  0E00               	movlw	0
  9907   0028DA  6E4E               	movwf	___fldiv@aexp^0,c
  9908   0028DC  EFA8  F014         	goto	l1137
  9909   0028E0                     l3973:
  9910   0028E0  504E               	movf	___fldiv@aexp^0,w,c
  9911   0028E2  B4D8               	btfsc	status,2,c
  9912   0028E4  EF76  F014         	goto	u3801
  9913   0028E8  EF78  F014         	goto	u3800
  9914   0028EC                     u3801:
  9915   0028EC  EF8F  F014         	goto	l3981
  9916   0028F0                     u3800:
  9917   0028F0  90D8               	bcf	status,0,c
  9918   0028F2  3642               	rlcf	___fldiv@rem^0,f,c
  9919   0028F4  3643               	rlcf	(___fldiv@rem+1)^0,f,c
  9920   0028F6  3644               	rlcf	(___fldiv@rem+2)^0,f,c
  9921   0028F8  3645               	rlcf	(___fldiv@rem+3)^0,f,c
  9922   0028FA  90D8               	bcf	status,0,c
  9923   0028FC  3636               	rlcf	___fldiv@b^0,f,c
  9924   0028FE  3637               	rlcf	(___fldiv@b+1)^0,f,c
  9925   002900  3638               	rlcf	(___fldiv@b+2)^0,f,c
  9926   002902  3639               	rlcf	(___fldiv@b+3)^0,f,c
  9927   002904  AE4C               	btfss	(___fldiv@grs+3)^0,7,c
  9928   002906  EF87  F014         	goto	u3811
  9929   00290A  EF89  F014         	goto	u3810
  9930   00290E                     u3811:
  9931   00290E  EF8A  F014         	goto	l1140
  9932   002912                     u3810:
  9933   002912  8036               	bsf	___fldiv@b^0,0,c
  9934   002914                     l1140:
  9935   002914  90D8               	bcf	status,0,c
  9936   002916  3649               	rlcf	___fldiv@grs^0,f,c
  9937   002918  364A               	rlcf	(___fldiv@grs+1)^0,f,c
  9938   00291A  364B               	rlcf	(___fldiv@grs+2)^0,f,c
  9939   00291C  364C               	rlcf	(___fldiv@grs+3)^0,f,c
  9940   00291E                     l3981:
  9941   00291E  503A               	movf	___fldiv@a^0,w,c
  9942   002920  5C42               	subwf	___fldiv@rem^0,w,c
  9943   002922  503B               	movf	(___fldiv@a+1)^0,w,c
  9944   002924  5843               	subwfb	(___fldiv@rem+1)^0,w,c
  9945   002926  503C               	movf	(___fldiv@a+2)^0,w,c
  9946   002928  5844               	subwfb	(___fldiv@rem+2)^0,w,c
  9947   00292A  503D               	movf	(___fldiv@a+3)^0,w,c
  9948   00292C  5845               	subwfb	(___fldiv@rem+3)^0,w,c
  9949   00292E  A0D8               	btfss	status,0,c
  9950   002930  EF9C  F014         	goto	u3821
  9951   002934  EF9E  F014         	goto	u3820
  9952   002938                     u3821:
  9953   002938  EFA7  F014         	goto	l3987
  9954   00293C                     u3820:
  9955   00293C  8C4C               	bsf	(___fldiv@grs+3)^0,6,c
  9956   00293E  503A               	movf	___fldiv@a^0,w,c
  9957   002940  5E42               	subwf	___fldiv@rem^0,f,c
  9958   002942  503B               	movf	(___fldiv@a+1)^0,w,c
  9959   002944  5A43               	subwfb	(___fldiv@rem+1)^0,f,c
  9960   002946  503C               	movf	(___fldiv@a+2)^0,w,c
  9961   002948  5A44               	subwfb	(___fldiv@rem+2)^0,f,c
  9962   00294A  503D               	movf	(___fldiv@a+3)^0,w,c
  9963   00294C  5A45               	subwfb	(___fldiv@rem+3)^0,f,c
  9964   00294E                     l3987:
  9965   00294E  2A4E               	incf	___fldiv@aexp^0,f,c
  9966   002950                     l1137:
  9967   002950  0E19               	movlw	25
  9968   002952  644E               	cpfsgt	___fldiv@aexp^0,c
  9969   002954  EFAE  F014         	goto	u3831
  9970   002958  EFB0  F014         	goto	u3830
  9971   00295C                     u3831:
  9972   00295C  EF70  F014         	goto	l3973
  9973   002960                     u3830:
  9974   002960  5042               	movf	___fldiv@rem^0,w,c
  9975   002962  1043               	iorwf	(___fldiv@rem+1)^0,w,c
  9976   002964  1044               	iorwf	(___fldiv@rem+2)^0,w,c
  9977   002966  1045               	iorwf	(___fldiv@rem+3)^0,w,c
  9978   002968  B4D8               	btfsc	status,2,c
  9979   00296A  EFB9  F014         	goto	u3841
  9980   00296E  EFBB  F014         	goto	u3840
  9981   002972                     u3841:
  9982   002972  EFD3  F014         	goto	l3999
  9983   002976                     u3840:
  9984   002976  8049               	bsf	___fldiv@grs^0,0,c
  9985   002978  EFD3  F014         	goto	l3999
  9986   00297C                     l3993:
  9987   00297C  90D8               	bcf	status,0,c
  9988   00297E  3636               	rlcf	___fldiv@b^0,f,c
  9989   002980  3637               	rlcf	(___fldiv@b+1)^0,f,c
  9990   002982  3638               	rlcf	(___fldiv@b+2)^0,f,c
  9991   002984  3639               	rlcf	(___fldiv@b+3)^0,f,c
  9992   002986  AE4C               	btfss	(___fldiv@grs+3)^0,7,c
  9993   002988  EFC8  F014         	goto	u3851
  9994   00298C  EFCA  F014         	goto	u3850
  9995   002990                     u3851:
  9996   002990  EFCB  F014         	goto	l1146
  9997   002994                     u3850:
  9998   002994  8036               	bsf	___fldiv@b^0,0,c
  9999   002996                     l1146:
 10000   002996  90D8               	bcf	status,0,c
 10001   002998  3649               	rlcf	___fldiv@grs^0,f,c
 10002   00299A  364A               	rlcf	(___fldiv@grs+1)^0,f,c
 10003   00299C  364B               	rlcf	(___fldiv@grs+2)^0,f,c
 10004   00299E  364C               	rlcf	(___fldiv@grs+3)^0,f,c
 10005   0029A0  0647               	decf	___fldiv@new_exp^0,f,c
 10006   0029A2  A0D8               	btfss	status,0,c
 10007   0029A4  0648               	decf	(___fldiv@new_exp+1)^0,f,c
 10008   0029A6                     l3999:
 10009   0029A6  AE38               	btfss	(___fldiv@b+2)^0,7,c
 10010   0029A8  EFD8  F014         	goto	u3861
 10011   0029AC  EFDA  F014         	goto	u3860
 10012   0029B0                     u3861:
 10013   0029B0  EFBE  F014         	goto	l3993
 10014   0029B4                     u3860:
 10015   0029B4  0E00               	movlw	0
 10016   0029B6  6E4E               	movwf	___fldiv@aexp^0,c
 10017   0029B8  AE4C               	btfss	(___fldiv@grs+3)^0,7,c
 10018   0029BA  EFE1  F014         	goto	u3871
 10019   0029BE  EFE3  F014         	goto	u3870
 10020   0029C2                     u3871:
 10021   0029C2  EF07  F015         	goto	l1148
 10022   0029C6                     u3870:
 10023   0029C6  0EFF               	movlw	255
 10024   0029C8  1449               	andwf	___fldiv@grs^0,w,c
 10025   0029CA  6E3E               	movwf	??___fldiv^0,c
 10026   0029CC  0EFF               	movlw	255
 10027   0029CE  144A               	andwf	(___fldiv@grs+1)^0,w,c
 10028   0029D0  6E3F               	movwf	(??___fldiv+1)^0,c
 10029   0029D2  0EFF               	movlw	255
 10030   0029D4  144B               	andwf	(___fldiv@grs+2)^0,w,c
 10031   0029D6  6E40               	movwf	(??___fldiv+2)^0,c
 10032   0029D8  0E7F               	movlw	127
 10033   0029DA  144C               	andwf	(___fldiv@grs+3)^0,w,c
 10034   0029DC  6E41               	movwf	(??___fldiv+3)^0,c
 10035   0029DE  503E               	movf	??___fldiv^0,w,c
 10036   0029E0  103F               	iorwf	(??___fldiv+1)^0,w,c
 10037   0029E2  1040               	iorwf	(??___fldiv+2)^0,w,c
 10038   0029E4  1041               	iorwf	(??___fldiv+3)^0,w,c
 10039   0029E6  B4D8               	btfsc	status,2,c
 10040   0029E8  EFF8  F014         	goto	u3881
 10041   0029EC  EFFA  F014         	goto	u3880
 10042   0029F0                     u3881:
 10043   0029F0  EFFE  F014         	goto	l1149
 10044   0029F4                     u3880:
 10045   0029F4                     l4007:
 10046   0029F4  0E01               	movlw	1
 10047   0029F6  6E4E               	movwf	___fldiv@aexp^0,c
 10048   0029F8  EF07  F015         	goto	l1148
 10049   0029FC                     l1149:
 10050   0029FC  A036               	btfss	___fldiv@b^0,0,c
 10051   0029FE  EF03  F015         	goto	u3891
 10052   002A02  EF05  F015         	goto	u3890
 10053   002A06                     u3891:
 10054   002A06  EF07  F015         	goto	l1148
 10055   002A0A                     u3890:
 10056   002A0A  EFFA  F014         	goto	l4007
 10057   002A0E                     l1148:
 10058   002A0E  504E               	movf	___fldiv@aexp^0,w,c
 10059   002A10  B4D8               	btfsc	status,2,c
 10060   002A12  EF0D  F015         	goto	u3901
 10061   002A16  EF0F  F015         	goto	u3900
 10062   002A1A                     u3901:
 10063   002A1A  EF33  F015         	goto	l4019
 10064   002A1E                     u3900:
 10065   002A1E  0E01               	movlw	1
 10066   002A20  2636               	addwf	___fldiv@b^0,f,c
 10067   002A22  0E00               	movlw	0
 10068   002A24  2237               	addwfc	(___fldiv@b+1)^0,f,c
 10069   002A26  2238               	addwfc	(___fldiv@b+2)^0,f,c
 10070   002A28  2239               	addwfc	(___fldiv@b+3)^0,f,c
 10071   002A2A  A039               	btfss	(___fldiv@b+3)^0,0,c
 10072   002A2C  EF1A  F015         	goto	u3911
 10073   002A30  EF1C  F015         	goto	u3910
 10074   002A34                     u3911:
 10075   002A34  EF33  F015         	goto	l4019
 10076   002A38                     u3910:
 10077   002A38  C036  F03E         	movff	___fldiv@b,??___fldiv
 10078   002A3C  C037  F03F         	movff	___fldiv@b+1,??___fldiv+1
 10079   002A40  C038  F040         	movff	___fldiv@b+2,??___fldiv+2
 10080   002A44  C039  F041         	movff	___fldiv@b+3,??___fldiv+3
 10081   002A48  3441               	rlcf	(??___fldiv+3)^0,w,c
 10082   002A4A  3241               	rrcf	(??___fldiv+3)^0,f,c
 10083   002A4C  3240               	rrcf	(??___fldiv+2)^0,f,c
 10084   002A4E  323F               	rrcf	(??___fldiv+1)^0,f,c
 10085   002A50  323E               	rrcf	??___fldiv^0,f,c
 10086   002A52  C03E  F036         	movff	??___fldiv,___fldiv@b
 10087   002A56  C03F  F037         	movff	??___fldiv+1,___fldiv@b+1
 10088   002A5A  C040  F038         	movff	??___fldiv+2,___fldiv@b+2
 10089   002A5E  C041  F039         	movff	??___fldiv+3,___fldiv@b+3
 10090   002A62  4A47               	infsnz	___fldiv@new_exp^0,f,c
 10091   002A64  2A48               	incf	(___fldiv@new_exp+1)^0,f,c
 10092   002A66                     l4019:
 10093   002A66  BE48               	btfsc	(___fldiv@new_exp+1)^0,7,c
 10094   002A68  EF3E  F015         	goto	u3921
 10095   002A6C  5048               	movf	(___fldiv@new_exp+1)^0,w,c
 10096   002A6E  E108               	bnz	u3920
 10097   002A70  2847               	incf	___fldiv@new_exp^0,w,c
 10098   002A72  A0D8               	btfss	status,0,c
 10099   002A74  EF3E  F015         	goto	u3921
 10100   002A78  EF40  F015         	goto	u3920
 10101   002A7C                     u3921:
 10102   002A7C  EF4B  F015         	goto	l4023
 10103   002A80                     u3920:
 10104   002A80  0E00               	movlw	0
 10105   002A82  6E48               	movwf	(___fldiv@new_exp+1)^0,c
 10106   002A84  6847               	setf	___fldiv@new_exp^0,c
 10107   002A86  0E00               	movlw	0
 10108   002A88  6E36               	movwf	___fldiv@b^0,c
 10109   002A8A  0E00               	movlw	0
 10110   002A8C  6E37               	movwf	(___fldiv@b+1)^0,c
 10111   002A8E  0E00               	movlw	0
 10112   002A90  6E38               	movwf	(___fldiv@b+2)^0,c
 10113   002A92  0E00               	movlw	0
 10114   002A94  6E39               	movwf	(___fldiv@b+3)^0,c
 10115   002A96                     l4023:
 10116   002A96  BE48               	btfsc	(___fldiv@new_exp+1)^0,7,c
 10117   002A98  EF58  F015         	goto	u3930
 10118   002A9C  5048               	movf	(___fldiv@new_exp+1)^0,w,c
 10119   002A9E  E106               	bnz	u3931
 10120   002AA0  0447               	decf	___fldiv@new_exp^0,w,c
 10121   002AA2  B0D8               	btfsc	status,0,c
 10122   002AA4  EF56  F015         	goto	u3931
 10123   002AA8  EF58  F015         	goto	u3930
 10124   002AAC                     u3931:
 10125   002AAC  EF66  F015         	goto	l4027
 10126   002AB0                     u3930:
 10127   002AB0  0E00               	movlw	0
 10128   002AB2  6E48               	movwf	(___fldiv@new_exp+1)^0,c
 10129   002AB4  0E00               	movlw	0
 10130   002AB6  6E47               	movwf	___fldiv@new_exp^0,c
 10131   002AB8  0E00               	movlw	0
 10132   002ABA  6E36               	movwf	___fldiv@b^0,c
 10133   002ABC  0E00               	movlw	0
 10134   002ABE  6E37               	movwf	(___fldiv@b+1)^0,c
 10135   002AC0  0E00               	movlw	0
 10136   002AC2  6E38               	movwf	(___fldiv@b+2)^0,c
 10137   002AC4  0E00               	movlw	0
 10138   002AC6  6E39               	movwf	(___fldiv@b+3)^0,c
 10139   002AC8  0E00               	movlw	0
 10140   002ACA  6E46               	movwf	___fldiv@sign^0,c
 10141   002ACC                     l4027:
 10142   002ACC  C047  F04D         	movff	___fldiv@new_exp,___fldiv@bexp
 10143   002AD0  A04D               	btfss	___fldiv@bexp^0,0,c
 10144   002AD2  EF6D  F015         	goto	u3941
 10145   002AD6  EF6F  F015         	goto	u3940
 10146   002ADA                     u3941:
 10147   002ADA  EF72  F015         	goto	l4033
 10148   002ADE                     u3940:
 10149   002ADE  8E38               	bsf	(___fldiv@b+2)^0,7,c
 10150   002AE0  EF73  F015         	goto	l4035
 10151   002AE4                     l4033:
 10152   002AE4  9E38               	bcf	(___fldiv@b+2)^0,7,c
 10153   002AE6                     l4035:
 10154   002AE6  90D8               	bcf	status,0,c
 10155   002AE8  304D               	rrcf	___fldiv@bexp^0,w,c
 10156   002AEA  6E39               	movwf	(___fldiv@b+3)^0,c
 10157   002AEC  EF29  F014         	goto	l3949
 10158   002AF0                     l1135:
 10159   002AF0  0012               	return		;funcret
 10160   002AF2                     __end_of___fldiv:
 10161                           	callstack 0
 10162                           
 10163 ;; *************** function _ambientCal *****************
 10164 ;; Defined at:
 10165 ;;		line 99 in file "MazeRobot.X/color.c"
 10166 ;; Parameters:    Size  Location     Type
 10167 ;;  v               2   17[COMRAM] PTR struct RGB
 10168 ;;		 -> main@ambientRGBVal(8), 
 10169 ;; Auto vars:     Size  Location     Type
 10170 ;;  i               2   21[COMRAM] int 
 10171 ;; Return value:  Size  Location     Type
 10172 ;;                  1    wreg      void 
 10173 ;; Registers used:
 10174 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10175 ;; Tracked objects:
 10176 ;;		On entry : 0/0
 10177 ;;		On exit  : 0/0
 10178 ;;		Unchanged: 0/0
 10179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10180 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10181 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10182 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10183 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10184 ;;Total ram usage:        6 bytes
 10185 ;; Hardware stack levels used: 1
 10186 ;; Hardware stack levels required when called: 6
 10187 ;; This function calls:
 10188 ;;		_getColor
 10189 ;; This function is called by:
 10190 ;;		_main
 10191 ;; This function uses a non-reentrant model
 10192 ;;
 10193                           
 10194                           	psect	text43
 10195   003F62                     __ptext43:
 10196                           	callstack 0
 10197   003F62                     _ambientCal:
 10198                           	callstack 24
 10199   003F62                     
 10200                           ;MazeRobot.X/color.c: 102:     for(int i = 0;i<20;i++){
 10201   003F62  0E00               	movlw	0
 10202   003F64  6E17               	movwf	(ambientCal@i+1)^0,c
 10203   003F66  0E00               	movlw	0
 10204   003F68  6E16               	movwf	ambientCal@i^0,c
 10205   003F6A                     l4263:
 10206                           
 10207                           ;MazeRobot.X/color.c: 103:             LATDbits.LATD7 = !LATDbits.LATD7;
 10208   003F6A  AE7C               	btfss	124,7,c	;volatile
 10209   003F6C  EFBA  F01F         	goto	u4291
 10210   003F70  EFBE  F01F         	goto	u4290
 10211   003F74                     u4291:
 10212   003F74  6A14               	clrf	??_ambientCal^0,c
 10213   003F76  2A14               	incf	??_ambientCal^0,f,c
 10214   003F78  EFBF  F01F         	goto	u4308
 10215   003F7C                     u4290:
 10216   003F7C  6A14               	clrf	??_ambientCal^0,c
 10217   003F7E                     u4308:
 10218   003F7E  3214               	rrcf	??_ambientCal^0,f,c
 10219   003F80  3214               	rrcf	??_ambientCal^0,f,c
 10220   003F82  507C               	movf	124,w,c	;volatile
 10221   003F84  1814               	xorwf	??_ambientCal^0,w,c
 10222   003F86  0B7F               	andlw	-129
 10223   003F88  1814               	xorwf	??_ambientCal^0,w,c
 10224   003F8A  6E7C               	movwf	124,c	;volatile
 10225   003F8C                     
 10226                           ;MazeRobot.X/color.c: 104:             _delay((unsigned long)((100)*(64000000/4000.0)));
 10227   003F8C  0E09               	movlw	9
 10228   003F8E  6E15               	movwf	(??_ambientCal+1)^0,c
 10229   003F90  0E1E               	movlw	30
 10230   003F92  6E14               	movwf	??_ambientCal^0,c
 10231   003F94  0EE4               	movlw	228
 10232   003F96                     u6557:
 10233   003F96  2EE8               	decfsz	wreg,f,c
 10234   003F98  D7FE               	bra	u6557
 10235   003F9A  2E14               	decfsz	??_ambientCal^0,f,c
 10236   003F9C  D7FC               	bra	u6557
 10237   003F9E  2E15               	decfsz	(??_ambientCal+1)^0,f,c
 10238   003FA0  D7FA               	bra	u6557
 10239   003FA2  D000               	nop2	
 10240                           
 10241                           ;MazeRobot.X/color.c: 105:             }
 10242   003FA4  4A16               	infsnz	ambientCal@i^0,f,c
 10243   003FA6  2A17               	incf	(ambientCal@i+1)^0,f,c
 10244   003FA8  BE17               	btfsc	(ambientCal@i+1)^0,7,c
 10245   003FAA  EFE0  F01F         	goto	u4311
 10246   003FAE  5017               	movf	(ambientCal@i+1)^0,w,c
 10247   003FB0  E109               	bnz	u4310
 10248   003FB2  0E14               	movlw	20
 10249   003FB4  5C16               	subwf	ambientCal@i^0,w,c
 10250   003FB6  A0D8               	btfss	status,0,c
 10251   003FB8  EFE0  F01F         	goto	u4311
 10252   003FBC  EFE2  F01F         	goto	u4310
 10253   003FC0                     u4311:
 10254   003FC0  EFB5  F01F         	goto	l4263
 10255   003FC4                     u4310:
 10256   003FC4                     
 10257                           ;MazeRobot.X/color.c: 106:             LATDbits.LATD7 = !LATDbits.LATD7;
 10258   003FC4  AE7C               	btfss	124,7,c	;volatile
 10259   003FC6  EFE7  F01F         	goto	u4321
 10260   003FCA  EFEB  F01F         	goto	u4320
 10261   003FCE                     u4321:
 10262   003FCE  6A14               	clrf	??_ambientCal^0,c
 10263   003FD0  2A14               	incf	??_ambientCal^0,f,c
 10264   003FD2  EFEC  F01F         	goto	u4338
 10265   003FD6                     u4320:
 10266   003FD6  6A14               	clrf	??_ambientCal^0,c
 10267   003FD8                     u4338:
 10268   003FD8  3214               	rrcf	??_ambientCal^0,f,c
 10269   003FDA  3214               	rrcf	??_ambientCal^0,f,c
 10270   003FDC  507C               	movf	124,w,c	;volatile
 10271   003FDE  1814               	xorwf	??_ambientCal^0,w,c
 10272   003FE0  0B7F               	andlw	-129
 10273   003FE2  1814               	xorwf	??_ambientCal^0,w,c
 10274   003FE4  6E7C               	movwf	124,c	;volatile
 10275   003FE6                     
 10276                           ;MazeRobot.X/color.c: 107:             _delay((unsigned long)((500)*(64000000/4000.0)));
 10277   003FE6  0E29               	movlw	41
 10278   003FE8  6E15               	movwf	(??_ambientCal+1)^0,c
 10279   003FEA  0E96               	movlw	150
 10280   003FEC  6E14               	movwf	??_ambientCal^0,c
 10281   003FEE  0E7F               	movlw	127
 10282   003FF0                     u6567:
 10283   003FF0  2EE8               	decfsz	wreg,f,c
 10284   003FF2  D7FE               	bra	u6567
 10285   003FF4  2E14               	decfsz	??_ambientCal^0,f,c
 10286   003FF6  D7FC               	bra	u6567
 10287   003FF8  2E15               	decfsz	(??_ambientCal+1)^0,f,c
 10288   003FFA  D7FA               	bra	u6567
 10289   003FFC  F000               	nop	
 10290   003FFE                     
 10291                           ;MazeRobot.X/color.c: 108:             getColor(v);
 10292   003FFE  C012  F010         	movff	ambientCal@v,getColor@v
 10293   004002  C013  F011         	movff	ambientCal@v+1,getColor@v+1
 10294   004006  EC73  F023         	call	_getColor	;wreg free
 10295   00400A                     
 10296                           ;MazeRobot.X/color.c: 109:             _delay((unsigned long)((500)*(64000000/4000.0)));
 10297   00400A  0E29               	movlw	41
 10298   00400C  6E15               	movwf	(??_ambientCal+1)^0,c
 10299   00400E  0E96               	movlw	150
 10300   004010  6E14               	movwf	??_ambientCal^0,c
 10301   004012  0E7F               	movlw	127
 10302   004014                     u6577:
 10303   004014  2EE8               	decfsz	wreg,f,c
 10304   004016  D7FE               	bra	u6577
 10305   004018  2E14               	decfsz	??_ambientCal^0,f,c
 10306   00401A  D7FC               	bra	u6577
 10307   00401C  2E15               	decfsz	(??_ambientCal+1)^0,f,c
 10308   00401E  D7FA               	bra	u6577
 10309   004020  F000               	nop	
 10310   004022                     
 10311                           ;MazeRobot.X/color.c: 110:             LATDbits.LATD7 = !LATDbits.LATD7;
 10312   004022  AE7C               	btfss	124,7,c	;volatile
 10313   004024  EF16  F020         	goto	u4341
 10314   004028  EF1A  F020         	goto	u4340
 10315   00402C                     u4341:
 10316   00402C  6A14               	clrf	??_ambientCal^0,c
 10317   00402E  2A14               	incf	??_ambientCal^0,f,c
 10318   004030  EF1B  F020         	goto	u4358
 10319   004034                     u4340:
 10320   004034  6A14               	clrf	??_ambientCal^0,c
 10321   004036                     u4358:
 10322   004036  3214               	rrcf	??_ambientCal^0,f,c
 10323   004038  3214               	rrcf	??_ambientCal^0,f,c
 10324   00403A  507C               	movf	124,w,c	;volatile
 10325   00403C  1814               	xorwf	??_ambientCal^0,w,c
 10326   00403E  0B7F               	andlw	-129
 10327   004040  1814               	xorwf	??_ambientCal^0,w,c
 10328   004042  6E7C               	movwf	124,c	;volatile
 10329   004044  0012               	return		;funcret
 10330   004046                     __end_of_ambientCal:
 10331                           	callstack 0
 10332                           
 10333 ;; *************** function _getColor *****************
 10334 ;; Defined at:
 10335 ;;		line 91 in file "MazeRobot.X/color.c"
 10336 ;; Parameters:    Size  Location     Type
 10337 ;;  v               2   15[COMRAM] PTR struct RGB
 10338 ;;		 -> main@whiteRGBVal(8), main@RGBVal(8), main@ambientRGBVal(8), colorDetect@RGBVal(8), 
 10339 ;; Auto vars:     Size  Location     Type
 10340 ;;		None
 10341 ;; Return value:  Size  Location     Type
 10342 ;;                  1    wreg      void 
 10343 ;; Registers used:
 10344 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10345 ;; Tracked objects:
 10346 ;;		On entry : 0/0
 10347 ;;		On exit  : 0/0
 10348 ;;		Unchanged: 0/0
 10349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10350 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10351 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10353 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10354 ;;Total ram usage:        2 bytes
 10355 ;; Hardware stack levels used: 1
 10356 ;; Hardware stack levels required when called: 5
 10357 ;; This function calls:
 10358 ;;		_color_read_Blue
 10359 ;;		_color_read_Clear
 10360 ;;		_color_read_Green
 10361 ;;		_color_read_Red
 10362 ;; This function is called by:
 10363 ;;		_ambientCal
 10364 ;;		_whiteCal
 10365 ;;		_colorDetect
 10366 ;;		_main
 10367 ;; This function uses a non-reentrant model
 10368 ;;
 10369                           
 10370                           	psect	text44
 10371   0046E6                     __ptext44:
 10372                           	callstack 0
 10373   0046E6                     _getColor:
 10374                           	callstack 24
 10375   0046E6                     
 10376                           ;MazeRobot.X/color.c: 92:     v->R = color_read_Red();
 10377   0046E6  ECF5  F023         	call	_color_read_Red	;wreg free
 10378   0046EA  C010  FFD9         	movff	getColor@v,fsr2l
 10379   0046EE  C011  FFDA         	movff	getColor@v+1,fsr2h
 10380   0046F2  C009  FFDE         	movff	?_color_read_Red,postinc2
 10381   0046F6  C00A  FFDD         	movff	?_color_read_Red+1,postdec2
 10382                           
 10383                           ;MazeRobot.X/color.c: 93:     v->G = color_read_Green();
 10384   0046FA  EC1D  F024         	call	_color_read_Green	;wreg free
 10385   0046FE  EE20 F002          	lfsr	2,2
 10386   004702  5010               	movf	getColor@v^0,w,c
 10387   004704  26D9               	addwf	fsr2l,f,c
 10388   004706  5011               	movf	(getColor@v+1)^0,w,c
 10389   004708  22DA               	addwfc	fsr2h,f,c
 10390   00470A  C009  FFDE         	movff	?_color_read_Green,postinc2
 10391   00470E  C00A  FFDD         	movff	?_color_read_Green+1,postdec2
 10392                           
 10393                           ;MazeRobot.X/color.c: 94:     v->B = color_read_Blue();
 10394   004712  EC6D  F024         	call	_color_read_Blue	;wreg free
 10395   004716  EE20 F004          	lfsr	2,4
 10396   00471A  5010               	movf	getColor@v^0,w,c
 10397   00471C  26D9               	addwf	fsr2l,f,c
 10398   00471E  5011               	movf	(getColor@v+1)^0,w,c
 10399   004720  22DA               	addwfc	fsr2h,f,c
 10400   004722  C009  FFDE         	movff	?_color_read_Blue,postinc2
 10401   004726  C00A  FFDD         	movff	?_color_read_Blue+1,postdec2
 10402                           
 10403                           ;MazeRobot.X/color.c: 95:     v->C = color_read_Clear();
 10404   00472A  EC45  F024         	call	_color_read_Clear	;wreg free
 10405   00472E  EE20 F006          	lfsr	2,6
 10406   004732  5010               	movf	getColor@v^0,w,c
 10407   004734  26D9               	addwf	fsr2l,f,c
 10408   004736  5011               	movf	(getColor@v+1)^0,w,c
 10409   004738  22DA               	addwfc	fsr2h,f,c
 10410   00473A  C009  FFDE         	movff	?_color_read_Clear,postinc2
 10411   00473E  C00A  FFDD         	movff	?_color_read_Clear+1,postdec2
 10412   004742  0012               	return		;funcret
 10413   004744                     __end_of_getColor:
 10414                           	callstack 0
 10415                           
 10416 ;; *************** function _color_read_Red *****************
 10417 ;; Defined at:
 10418 ;;		line 33 in file "MazeRobot.X/color.c"
 10419 ;; Parameters:    Size  Location     Type
 10420 ;;		None
 10421 ;; Auto vars:     Size  Location     Type
 10422 ;;  tmp             2   13[COMRAM] unsigned int 
 10423 ;; Return value:  Size  Location     Type
 10424 ;;                  2    8[COMRAM] unsigned int 
 10425 ;; Registers used:
 10426 ;;		wreg, status,2, status,0, cstack
 10427 ;; Tracked objects:
 10428 ;;		On entry : 0/0
 10429 ;;		On exit  : 0/0
 10430 ;;		Unchanged: 0/0
 10431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10432 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10433 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10434 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10435 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10436 ;;Total ram usage:        7 bytes
 10437 ;; Hardware stack levels used: 1
 10438 ;; Hardware stack levels required when called: 4
 10439 ;; This function calls:
 10440 ;;		_I2C_2_Master_Read
 10441 ;;		_I2C_2_Master_RepStart
 10442 ;;		_I2C_2_Master_Start
 10443 ;;		_I2C_2_Master_Stop
 10444 ;;		_I2C_2_Master_Write
 10445 ;; This function is called by:
 10446 ;;		_getColor
 10447 ;; This function uses a non-reentrant model
 10448 ;;
 10449                           
 10450                           	psect	text45
 10451   0047EA                     __ptext45:
 10452                           	callstack 0
 10453   0047EA                     _color_read_Red:
 10454                           	callstack 24
 10455   0047EA                     
 10456                           ;MazeRobot.X/color.c: 35:  unsigned int tmp;;MazeRobot.X/color.c: 36:  I2C_2_Master_Star
      +                          t();
 10457   0047EA  EC45  F026         	call	_I2C_2_Master_Start	;wreg free
 10458                           
 10459                           ;MazeRobot.X/color.c: 37:  I2C_2_Master_Write(0x52 | 0x00);
 10460   0047EE  0E52               	movlw	82
 10461   0047F0  EC3A  F026         	call	_I2C_2_Master_Write
 10462                           
 10463                           ;MazeRobot.X/color.c: 38:  I2C_2_Master_Write(0xA0 | 0x16);
 10464   0047F4  0EB6               	movlw	182
 10465   0047F6  EC3A  F026         	call	_I2C_2_Master_Write
 10466                           
 10467                           ;MazeRobot.X/color.c: 39:  I2C_2_Master_RepStart();
 10468   0047FA  EC4A  F026         	call	_I2C_2_Master_RepStart	;wreg free
 10469                           
 10470                           ;MazeRobot.X/color.c: 40:  I2C_2_Master_Write(0x52 | 0x01);
 10471   0047FE  0E53               	movlw	83
 10472   004800  EC3A  F026         	call	_I2C_2_Master_Write
 10473                           
 10474                           ;MazeRobot.X/color.c: 41:  tmp=I2C_2_Master_Read(1);
 10475   004804  0E01               	movlw	1
 10476   004806  ECFF  F024         	call	_I2C_2_Master_Read
 10477   00480A  6E0B               	movwf	??_color_read_Red^0,c
 10478   00480C  500B               	movf	??_color_read_Red^0,w,c
 10479   00480E  6E0E               	movwf	color_read_Red@tmp^0,c
 10480   004810  6A0F               	clrf	(color_read_Red@tmp+1)^0,c
 10481                           
 10482                           ;MazeRobot.X/color.c: 42:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10483   004812  0E00               	movlw	0
 10484   004814  ECFF  F024         	call	_I2C_2_Master_Read
 10485   004818  6E0B               	movwf	??_color_read_Red^0,c
 10486   00481A  500B               	movf	??_color_read_Red^0,w,c
 10487   00481C  6E0D               	movwf	(??_color_read_Red+2)^0,c
 10488   00481E  6A0C               	clrf	(??_color_read_Red+1)^0,c
 10489   004820  500E               	movf	color_read_Red@tmp^0,w,c
 10490   004822  100C               	iorwf	(??_color_read_Red+1)^0,w,c
 10491   004824  6E0E               	movwf	color_read_Red@tmp^0,c
 10492   004826  500F               	movf	(color_read_Red@tmp+1)^0,w,c
 10493   004828  100D               	iorwf	(??_color_read_Red+2)^0,w,c
 10494   00482A  6E0F               	movwf	(color_read_Red@tmp+1)^0,c
 10495                           
 10496                           ;MazeRobot.X/color.c: 43:  I2C_2_Master_Stop();
 10497   00482C  EC40  F026         	call	_I2C_2_Master_Stop	;wreg free
 10498   004830                     
 10499                           ;MazeRobot.X/color.c: 44:  return tmp;
 10500   004830  C00E  F009         	movff	color_read_Red@tmp,?_color_read_Red
 10501   004834  C00F  F00A         	movff	color_read_Red@tmp+1,?_color_read_Red+1
 10502   004838  0012               	return		;funcret
 10503   00483A                     __end_of_color_read_Red:
 10504                           	callstack 0
 10505                           
 10506 ;; *************** function _color_read_Green *****************
 10507 ;; Defined at:
 10508 ;;		line 47 in file "MazeRobot.X/color.c"
 10509 ;; Parameters:    Size  Location     Type
 10510 ;;		None
 10511 ;; Auto vars:     Size  Location     Type
 10512 ;;  tmp             2   13[COMRAM] unsigned int 
 10513 ;; Return value:  Size  Location     Type
 10514 ;;                  2    8[COMRAM] unsigned int 
 10515 ;; Registers used:
 10516 ;;		wreg, status,2, status,0, cstack
 10517 ;; Tracked objects:
 10518 ;;		On entry : 0/0
 10519 ;;		On exit  : 0/0
 10520 ;;		Unchanged: 0/0
 10521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10522 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10523 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10524 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10525 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10526 ;;Total ram usage:        7 bytes
 10527 ;; Hardware stack levels used: 1
 10528 ;; Hardware stack levels required when called: 4
 10529 ;; This function calls:
 10530 ;;		_I2C_2_Master_Read
 10531 ;;		_I2C_2_Master_RepStart
 10532 ;;		_I2C_2_Master_Start
 10533 ;;		_I2C_2_Master_Stop
 10534 ;;		_I2C_2_Master_Write
 10535 ;; This function is called by:
 10536 ;;		_getColor
 10537 ;; This function uses a non-reentrant model
 10538 ;;
 10539                           
 10540                           	psect	text46
 10541   00483A                     __ptext46:
 10542                           	callstack 0
 10543   00483A                     _color_read_Green:
 10544                           	callstack 24
 10545   00483A                     
 10546                           ;MazeRobot.X/color.c: 49:  unsigned int tmp;;MazeRobot.X/color.c: 50:  I2C_2_Master_Star
      +                          t();
 10547   00483A  EC45  F026         	call	_I2C_2_Master_Start	;wreg free
 10548                           
 10549                           ;MazeRobot.X/color.c: 51:  I2C_2_Master_Write(0x52 | 0x00);
 10550   00483E  0E52               	movlw	82
 10551   004840  EC3A  F026         	call	_I2C_2_Master_Write
 10552                           
 10553                           ;MazeRobot.X/color.c: 52:  I2C_2_Master_Write(0xA0 | 0x18);
 10554   004844  0EB8               	movlw	184
 10555   004846  EC3A  F026         	call	_I2C_2_Master_Write
 10556                           
 10557                           ;MazeRobot.X/color.c: 53:  I2C_2_Master_RepStart();
 10558   00484A  EC4A  F026         	call	_I2C_2_Master_RepStart	;wreg free
 10559                           
 10560                           ;MazeRobot.X/color.c: 54:  I2C_2_Master_Write(0x52 | 0x01);
 10561   00484E  0E53               	movlw	83
 10562   004850  EC3A  F026         	call	_I2C_2_Master_Write
 10563                           
 10564                           ;MazeRobot.X/color.c: 55:  tmp=I2C_2_Master_Read(1);
 10565   004854  0E01               	movlw	1
 10566   004856  ECFF  F024         	call	_I2C_2_Master_Read
 10567   00485A  6E0B               	movwf	??_color_read_Green^0,c
 10568   00485C  500B               	movf	??_color_read_Green^0,w,c
 10569   00485E  6E0E               	movwf	color_read_Green@tmp^0,c
 10570   004860  6A0F               	clrf	(color_read_Green@tmp+1)^0,c
 10571                           
 10572                           ;MazeRobot.X/color.c: 56:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10573   004862  0E00               	movlw	0
 10574   004864  ECFF  F024         	call	_I2C_2_Master_Read
 10575   004868  6E0B               	movwf	??_color_read_Green^0,c
 10576   00486A  500B               	movf	??_color_read_Green^0,w,c
 10577   00486C  6E0D               	movwf	(??_color_read_Green+2)^0,c
 10578   00486E  6A0C               	clrf	(??_color_read_Green+1)^0,c
 10579   004870  500E               	movf	color_read_Green@tmp^0,w,c
 10580   004872  100C               	iorwf	(??_color_read_Green+1)^0,w,c
 10581   004874  6E0E               	movwf	color_read_Green@tmp^0,c
 10582   004876  500F               	movf	(color_read_Green@tmp+1)^0,w,c
 10583   004878  100D               	iorwf	(??_color_read_Green+2)^0,w,c
 10584   00487A  6E0F               	movwf	(color_read_Green@tmp+1)^0,c
 10585                           
 10586                           ;MazeRobot.X/color.c: 57:  I2C_2_Master_Stop();
 10587   00487C  EC40  F026         	call	_I2C_2_Master_Stop	;wreg free
 10588   004880                     
 10589                           ;MazeRobot.X/color.c: 58:  return tmp;
 10590   004880  C00E  F009         	movff	color_read_Green@tmp,?_color_read_Green
 10591   004884  C00F  F00A         	movff	color_read_Green@tmp+1,?_color_read_Green+1
 10592   004888  0012               	return		;funcret
 10593   00488A                     __end_of_color_read_Green:
 10594                           	callstack 0
 10595                           
 10596 ;; *************** function _color_read_Clear *****************
 10597 ;; Defined at:
 10598 ;;		line 76 in file "MazeRobot.X/color.c"
 10599 ;; Parameters:    Size  Location     Type
 10600 ;;		None
 10601 ;; Auto vars:     Size  Location     Type
 10602 ;;  tmp             2   13[COMRAM] unsigned int 
 10603 ;; Return value:  Size  Location     Type
 10604 ;;                  2    8[COMRAM] unsigned int 
 10605 ;; Registers used:
 10606 ;;		wreg, status,2, status,0, cstack
 10607 ;; Tracked objects:
 10608 ;;		On entry : 0/0
 10609 ;;		On exit  : 0/0
 10610 ;;		Unchanged: 0/0
 10611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10612 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10613 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10614 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10615 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10616 ;;Total ram usage:        7 bytes
 10617 ;; Hardware stack levels used: 1
 10618 ;; Hardware stack levels required when called: 4
 10619 ;; This function calls:
 10620 ;;		_I2C_2_Master_Read
 10621 ;;		_I2C_2_Master_RepStart
 10622 ;;		_I2C_2_Master_Start
 10623 ;;		_I2C_2_Master_Stop
 10624 ;;		_I2C_2_Master_Write
 10625 ;; This function is called by:
 10626 ;;		_getColor
 10627 ;; This function uses a non-reentrant model
 10628 ;;
 10629                           
 10630                           	psect	text47
 10631   00488A                     __ptext47:
 10632                           	callstack 0
 10633   00488A                     _color_read_Clear:
 10634                           	callstack 24
 10635   00488A                     
 10636                           ;MazeRobot.X/color.c: 78:  unsigned int tmp;;MazeRobot.X/color.c: 79:  I2C_2_Master_Star
      +                          t();
 10637   00488A  EC45  F026         	call	_I2C_2_Master_Start	;wreg free
 10638                           
 10639                           ;MazeRobot.X/color.c: 80:  I2C_2_Master_Write(0x52 | 0x00);
 10640   00488E  0E52               	movlw	82
 10641   004890  EC3A  F026         	call	_I2C_2_Master_Write
 10642                           
 10643                           ;MazeRobot.X/color.c: 81:  I2C_2_Master_Write(0xA0 | 0x14);
 10644   004894  0EB4               	movlw	180
 10645   004896  EC3A  F026         	call	_I2C_2_Master_Write
 10646                           
 10647                           ;MazeRobot.X/color.c: 82:  I2C_2_Master_RepStart();
 10648   00489A  EC4A  F026         	call	_I2C_2_Master_RepStart	;wreg free
 10649                           
 10650                           ;MazeRobot.X/color.c: 83:  I2C_2_Master_Write(0x52 | 0x01);
 10651   00489E  0E53               	movlw	83
 10652   0048A0  EC3A  F026         	call	_I2C_2_Master_Write
 10653                           
 10654                           ;MazeRobot.X/color.c: 84:  tmp=I2C_2_Master_Read(1);
 10655   0048A4  0E01               	movlw	1
 10656   0048A6  ECFF  F024         	call	_I2C_2_Master_Read
 10657   0048AA  6E0B               	movwf	??_color_read_Clear^0,c
 10658   0048AC  500B               	movf	??_color_read_Clear^0,w,c
 10659   0048AE  6E0E               	movwf	color_read_Clear@tmp^0,c
 10660   0048B0  6A0F               	clrf	(color_read_Clear@tmp+1)^0,c
 10661                           
 10662                           ;MazeRobot.X/color.c: 85:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10663   0048B2  0E00               	movlw	0
 10664   0048B4  ECFF  F024         	call	_I2C_2_Master_Read
 10665   0048B8  6E0B               	movwf	??_color_read_Clear^0,c
 10666   0048BA  500B               	movf	??_color_read_Clear^0,w,c
 10667   0048BC  6E0D               	movwf	(??_color_read_Clear+2)^0,c
 10668   0048BE  6A0C               	clrf	(??_color_read_Clear+1)^0,c
 10669   0048C0  500E               	movf	color_read_Clear@tmp^0,w,c
 10670   0048C2  100C               	iorwf	(??_color_read_Clear+1)^0,w,c
 10671   0048C4  6E0E               	movwf	color_read_Clear@tmp^0,c
 10672   0048C6  500F               	movf	(color_read_Clear@tmp+1)^0,w,c
 10673   0048C8  100D               	iorwf	(??_color_read_Clear+2)^0,w,c
 10674   0048CA  6E0F               	movwf	(color_read_Clear@tmp+1)^0,c
 10675                           
 10676                           ;MazeRobot.X/color.c: 86:  I2C_2_Master_Stop();
 10677   0048CC  EC40  F026         	call	_I2C_2_Master_Stop	;wreg free
 10678   0048D0                     
 10679                           ;MazeRobot.X/color.c: 87:  return tmp;
 10680   0048D0  C00E  F009         	movff	color_read_Clear@tmp,?_color_read_Clear
 10681   0048D4  C00F  F00A         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
 10682   0048D8  0012               	return		;funcret
 10683   0048DA                     __end_of_color_read_Clear:
 10684                           	callstack 0
 10685                           
 10686 ;; *************** function _color_read_Blue *****************
 10687 ;; Defined at:
 10688 ;;		line 62 in file "MazeRobot.X/color.c"
 10689 ;; Parameters:    Size  Location     Type
 10690 ;;		None
 10691 ;; Auto vars:     Size  Location     Type
 10692 ;;  tmp             2   13[COMRAM] unsigned int 
 10693 ;; Return value:  Size  Location     Type
 10694 ;;                  2    8[COMRAM] unsigned int 
 10695 ;; Registers used:
 10696 ;;		wreg, status,2, status,0, cstack
 10697 ;; Tracked objects:
 10698 ;;		On entry : 0/0
 10699 ;;		On exit  : 0/0
 10700 ;;		Unchanged: 0/0
 10701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10702 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10703 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10704 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10705 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10706 ;;Total ram usage:        7 bytes
 10707 ;; Hardware stack levels used: 1
 10708 ;; Hardware stack levels required when called: 4
 10709 ;; This function calls:
 10710 ;;		_I2C_2_Master_Read
 10711 ;;		_I2C_2_Master_RepStart
 10712 ;;		_I2C_2_Master_Start
 10713 ;;		_I2C_2_Master_Stop
 10714 ;;		_I2C_2_Master_Write
 10715 ;; This function is called by:
 10716 ;;		_getColor
 10717 ;; This function uses a non-reentrant model
 10718 ;;
 10719                           
 10720                           	psect	text48
 10721   0048DA                     __ptext48:
 10722                           	callstack 0
 10723   0048DA                     _color_read_Blue:
 10724                           	callstack 24
 10725   0048DA                     
 10726                           ;MazeRobot.X/color.c: 64:  unsigned int tmp;;MazeRobot.X/color.c: 65:  I2C_2_Master_Star
      +                          t();
 10727   0048DA  EC45  F026         	call	_I2C_2_Master_Start	;wreg free
 10728                           
 10729                           ;MazeRobot.X/color.c: 66:  I2C_2_Master_Write(0x52 | 0x00);
 10730   0048DE  0E52               	movlw	82
 10731   0048E0  EC3A  F026         	call	_I2C_2_Master_Write
 10732                           
 10733                           ;MazeRobot.X/color.c: 67:  I2C_2_Master_Write(0xA0 | 0x1A);
 10734   0048E4  0EBA               	movlw	186
 10735   0048E6  EC3A  F026         	call	_I2C_2_Master_Write
 10736                           
 10737                           ;MazeRobot.X/color.c: 68:  I2C_2_Master_RepStart();
 10738   0048EA  EC4A  F026         	call	_I2C_2_Master_RepStart	;wreg free
 10739                           
 10740                           ;MazeRobot.X/color.c: 69:  I2C_2_Master_Write(0x52 | 0x01);
 10741   0048EE  0E53               	movlw	83
 10742   0048F0  EC3A  F026         	call	_I2C_2_Master_Write
 10743                           
 10744                           ;MazeRobot.X/color.c: 70:  tmp=I2C_2_Master_Read(1);
 10745   0048F4  0E01               	movlw	1
 10746   0048F6  ECFF  F024         	call	_I2C_2_Master_Read
 10747   0048FA  6E0B               	movwf	??_color_read_Blue^0,c
 10748   0048FC  500B               	movf	??_color_read_Blue^0,w,c
 10749   0048FE  6E0E               	movwf	color_read_Blue@tmp^0,c
 10750   004900  6A0F               	clrf	(color_read_Blue@tmp+1)^0,c
 10751                           
 10752                           ;MazeRobot.X/color.c: 71:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10753   004902  0E00               	movlw	0
 10754   004904  ECFF  F024         	call	_I2C_2_Master_Read
 10755   004908  6E0B               	movwf	??_color_read_Blue^0,c
 10756   00490A  500B               	movf	??_color_read_Blue^0,w,c
 10757   00490C  6E0D               	movwf	(??_color_read_Blue+2)^0,c
 10758   00490E  6A0C               	clrf	(??_color_read_Blue+1)^0,c
 10759   004910  500E               	movf	color_read_Blue@tmp^0,w,c
 10760   004912  100C               	iorwf	(??_color_read_Blue+1)^0,w,c
 10761   004914  6E0E               	movwf	color_read_Blue@tmp^0,c
 10762   004916  500F               	movf	(color_read_Blue@tmp+1)^0,w,c
 10763   004918  100D               	iorwf	(??_color_read_Blue+2)^0,w,c
 10764   00491A  6E0F               	movwf	(color_read_Blue@tmp+1)^0,c
 10765                           
 10766                           ;MazeRobot.X/color.c: 72:  I2C_2_Master_Stop();
 10767   00491C  EC40  F026         	call	_I2C_2_Master_Stop	;wreg free
 10768   004920                     
 10769                           ;MazeRobot.X/color.c: 73:  return tmp;
 10770   004920  C00E  F009         	movff	color_read_Blue@tmp,?_color_read_Blue
 10771   004924  C00F  F00A         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
 10772   004928  0012               	return		;funcret
 10773   00492A                     __end_of_color_read_Blue:
 10774                           	callstack 0
 10775                           
 10776 ;; *************** function _I2C_2_Master_Write *****************
 10777 ;; Defined at:
 10778 ;;		line 45 in file "MazeRobot.X/i2c.c"
 10779 ;; Parameters:    Size  Location     Type
 10780 ;;  data_byte       1    wreg     unsigned char 
 10781 ;; Auto vars:     Size  Location     Type
 10782 ;;  data_byte       1    5[COMRAM] unsigned char 
 10783 ;; Return value:  Size  Location     Type
 10784 ;;                  1    wreg      void 
 10785 ;; Registers used:
 10786 ;;		wreg, status,2, status,0, cstack
 10787 ;; Tracked objects:
 10788 ;;		On entry : 0/0
 10789 ;;		On exit  : 0/0
 10790 ;;		Unchanged: 0/0
 10791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10793 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10795 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10796 ;;Total ram usage:        1 bytes
 10797 ;; Hardware stack levels used: 1
 10798 ;; Hardware stack levels required when called: 3
 10799 ;; This function calls:
 10800 ;;		_I2C_2_Master_Idle
 10801 ;; This function is called by:
 10802 ;;		_color_writetoaddr
 10803 ;;		_color_read_Red
 10804 ;;		_color_read_Green
 10805 ;;		_color_read_Blue
 10806 ;;		_color_read_Clear
 10807 ;; This function uses a non-reentrant model
 10808 ;;
 10809                           
 10810                           	psect	text49
 10811   004C74                     __ptext49:
 10812                           	callstack 0
 10813   004C74                     _I2C_2_Master_Write:
 10814                           	callstack 24
 10815                           
 10816                           ;incstack = 0
 10817                           ;I2C_2_Master_Write@data_byte stored from wreg
 10818   004C74  6E06               	movwf	I2C_2_Master_Write@data_byte^0,c
 10819   004C76                     
 10820                           ;MazeRobot.X/i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);MazeRobot.X/i2c
      +                          .c: 46: {;MazeRobot.X/i2c.c: 47:   I2C_2_Master_Idle();
 10821   004C76  ECDE  F025         	call	_I2C_2_Master_Idle	;wreg free
 10822   004C7A                     
 10823                           ;MazeRobot.X/i2c.c: 48:   SSP2BUF = data_byte;
 10824   004C7A  C006  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
 10825   004C7E  0012               	return		;funcret
 10826   004C80                     __end_of_I2C_2_Master_Write:
 10827                           	callstack 0
 10828                           
 10829 ;; *************** function _I2C_2_Master_Stop *****************
 10830 ;; Defined at:
 10831 ;;		line 39 in file "MazeRobot.X/i2c.c"
 10832 ;; Parameters:    Size  Location     Type
 10833 ;;		None
 10834 ;; Auto vars:     Size  Location     Type
 10835 ;;		None
 10836 ;; Return value:  Size  Location     Type
 10837 ;;                  1    wreg      void 
 10838 ;; Registers used:
 10839 ;;		wreg, status,2, status,0, cstack
 10840 ;; Tracked objects:
 10841 ;;		On entry : 0/0
 10842 ;;		On exit  : 0/0
 10843 ;;		Unchanged: 0/0
 10844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10848 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10849 ;;Total ram usage:        0 bytes
 10850 ;; Hardware stack levels used: 1
 10851 ;; Hardware stack levels required when called: 3
 10852 ;; This function calls:
 10853 ;;		_I2C_2_Master_Idle
 10854 ;; This function is called by:
 10855 ;;		_color_writetoaddr
 10856 ;;		_color_read_Red
 10857 ;;		_color_read_Green
 10858 ;;		_color_read_Blue
 10859 ;;		_color_read_Clear
 10860 ;; This function uses a non-reentrant model
 10861 ;;
 10862                           
 10863                           	psect	text50
 10864   004C80                     __ptext50:
 10865                           	callstack 0
 10866   004C80                     _I2C_2_Master_Stop:
 10867                           	callstack 24
 10868   004C80                     
 10869                           ;MazeRobot.X/i2c.c: 41:   I2C_2_Master_Idle();
 10870   004C80  ECDE  F025         	call	_I2C_2_Master_Idle	;wreg free
 10871   004C84                     
 10872                           ;MazeRobot.X/i2c.c: 42:   SSP2CON2bits.PEN = 1;
 10873   004C84  010E               	movlb	14	; () banked
 10874   004C86  85DA               	bsf	218,2,b	;volatile
 10875   004C88                     
 10876                           ; BSR set to: 14
 10877   004C88  0012               	return		;funcret
 10878   004C8A                     __end_of_I2C_2_Master_Stop:
 10879                           	callstack 0
 10880                           
 10881 ;; *************** function _I2C_2_Master_Start *****************
 10882 ;; Defined at:
 10883 ;;		line 27 in file "MazeRobot.X/i2c.c"
 10884 ;; Parameters:    Size  Location     Type
 10885 ;;		None
 10886 ;; Auto vars:     Size  Location     Type
 10887 ;;		None
 10888 ;; Return value:  Size  Location     Type
 10889 ;;                  1    wreg      void 
 10890 ;; Registers used:
 10891 ;;		wreg, status,2, status,0, cstack
 10892 ;; Tracked objects:
 10893 ;;		On entry : 0/0
 10894 ;;		On exit  : 0/0
 10895 ;;		Unchanged: 0/0
 10896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10900 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10901 ;;Total ram usage:        0 bytes
 10902 ;; Hardware stack levels used: 1
 10903 ;; Hardware stack levels required when called: 3
 10904 ;; This function calls:
 10905 ;;		_I2C_2_Master_Idle
 10906 ;; This function is called by:
 10907 ;;		_color_writetoaddr
 10908 ;;		_color_read_Red
 10909 ;;		_color_read_Green
 10910 ;;		_color_read_Blue
 10911 ;;		_color_read_Clear
 10912 ;; This function uses a non-reentrant model
 10913 ;;
 10914                           
 10915                           	psect	text51
 10916   004C8A                     __ptext51:
 10917                           	callstack 0
 10918   004C8A                     _I2C_2_Master_Start:
 10919                           	callstack 24
 10920   004C8A                     
 10921                           ;MazeRobot.X/i2c.c: 29:   I2C_2_Master_Idle();
 10922   004C8A  ECDE  F025         	call	_I2C_2_Master_Idle	;wreg free
 10923   004C8E                     
 10924                           ;MazeRobot.X/i2c.c: 30:   SSP2CON2bits.SEN = 1;
 10925   004C8E  010E               	movlb	14	; () banked
 10926   004C90  81DA               	bsf	218,0,b	;volatile
 10927   004C92                     
 10928                           ; BSR set to: 14
 10929   004C92  0012               	return		;funcret
 10930   004C94                     __end_of_I2C_2_Master_Start:
 10931                           	callstack 0
 10932                           
 10933 ;; *************** function _I2C_2_Master_RepStart *****************
 10934 ;; Defined at:
 10935 ;;		line 33 in file "MazeRobot.X/i2c.c"
 10936 ;; Parameters:    Size  Location     Type
 10937 ;;		None
 10938 ;; Auto vars:     Size  Location     Type
 10939 ;;		None
 10940 ;; Return value:  Size  Location     Type
 10941 ;;                  1    wreg      void 
 10942 ;; Registers used:
 10943 ;;		wreg, status,2, status,0, cstack
 10944 ;; Tracked objects:
 10945 ;;		On entry : 0/0
 10946 ;;		On exit  : 0/0
 10947 ;;		Unchanged: 0/0
 10948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10952 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10953 ;;Total ram usage:        0 bytes
 10954 ;; Hardware stack levels used: 1
 10955 ;; Hardware stack levels required when called: 3
 10956 ;; This function calls:
 10957 ;;		_I2C_2_Master_Idle
 10958 ;; This function is called by:
 10959 ;;		_color_read_Red
 10960 ;;		_color_read_Green
 10961 ;;		_color_read_Blue
 10962 ;;		_color_read_Clear
 10963 ;; This function uses a non-reentrant model
 10964 ;;
 10965                           
 10966                           	psect	text52
 10967   004C94                     __ptext52:
 10968                           	callstack 0
 10969   004C94                     _I2C_2_Master_RepStart:
 10970                           	callstack 24
 10971   004C94                     
 10972                           ;MazeRobot.X/i2c.c: 35:   I2C_2_Master_Idle();
 10973   004C94  ECDE  F025         	call	_I2C_2_Master_Idle	;wreg free
 10974   004C98                     
 10975                           ;MazeRobot.X/i2c.c: 36:   SSP2CON2bits.RSEN = 1;
 10976   004C98  010E               	movlb	14	; () banked
 10977   004C9A  83DA               	bsf	218,1,b	;volatile
 10978   004C9C                     
 10979                           ; BSR set to: 14
 10980   004C9C  0012               	return		;funcret
 10981   004C9E                     __end_of_I2C_2_Master_RepStart:
 10982                           	callstack 0
 10983                           
 10984 ;; *************** function _I2C_2_Master_Read *****************
 10985 ;; Defined at:
 10986 ;;		line 51 in file "MazeRobot.X/i2c.c"
 10987 ;; Parameters:    Size  Location     Type
 10988 ;;  ack             1    wreg     unsigned char 
 10989 ;; Auto vars:     Size  Location     Type
 10990 ;;  ack             1    6[COMRAM] unsigned char 
 10991 ;;  tmp             1    7[COMRAM] unsigned char 
 10992 ;; Return value:  Size  Location     Type
 10993 ;;                  1    wreg      unsigned char 
 10994 ;; Registers used:
 10995 ;;		wreg, status,2, status,0, cstack
 10996 ;; Tracked objects:
 10997 ;;		On entry : 0/0
 10998 ;;		On exit  : 0/0
 10999 ;;		Unchanged: 0/0
 11000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11002 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11003 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11004 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11005 ;;Total ram usage:        3 bytes
 11006 ;; Hardware stack levels used: 1
 11007 ;; Hardware stack levels required when called: 3
 11008 ;; This function calls:
 11009 ;;		_I2C_2_Master_Idle
 11010 ;; This function is called by:
 11011 ;;		_color_read_Red
 11012 ;;		_color_read_Green
 11013 ;;		_color_read_Blue
 11014 ;;		_color_read_Clear
 11015 ;; This function uses a non-reentrant model
 11016 ;;
 11017                           
 11018                           	psect	text53
 11019   0049FE                     __ptext53:
 11020                           	callstack 0
 11021   0049FE                     _I2C_2_Master_Read:
 11022                           	callstack 24
 11023                           
 11024                           ; BSR set to: 14
 11025                           ;incstack = 0
 11026                           ;I2C_2_Master_Read@ack stored from wreg
 11027   0049FE  6E07               	movwf	I2C_2_Master_Read@ack^0,c
 11028   004A00                     
 11029                           ;MazeRobot.X/i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);MazeRobot.X/i
      +                          2c.c: 52: {;MazeRobot.X/i2c.c: 53:   unsigned char tmp;;MazeRobot.X/i2c.c: 54:   I2C_2_M
      +                          aster_Idle();
 11030   004A00  ECDE  F025         	call	_I2C_2_Master_Idle	;wreg free
 11031   004A04                     
 11032                           ;MazeRobot.X/i2c.c: 55:   SSP2CON2bits.RCEN = 1;
 11033   004A04  010E               	movlb	14	; () banked
 11034   004A06  87DA               	bsf	218,3,b	;volatile
 11035                           
 11036                           ;MazeRobot.X/i2c.c: 56:   I2C_2_Master_Idle();
 11037   004A08  ECDE  F025         	call	_I2C_2_Master_Idle	;wreg free
 11038   004A0C                     
 11039                           ;MazeRobot.X/i2c.c: 57:   tmp = SSP2BUF;
 11040   004A0C  CED5 F008          	movff	3797,I2C_2_Master_Read@tmp	;volatile
 11041                           
 11042                           ;MazeRobot.X/i2c.c: 58:   I2C_2_Master_Idle();
 11043   004A10  ECDE  F025         	call	_I2C_2_Master_Idle	;wreg free
 11044   004A14                     
 11045                           ;MazeRobot.X/i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
 11046   004A14  5007               	movf	I2C_2_Master_Read@ack^0,w,c
 11047   004A16  B4D8               	btfsc	status,2,c
 11048   004A18  EF10  F025         	goto	u3001
 11049   004A1C  EF14  F025         	goto	u3000
 11050   004A20                     u3001:
 11051   004A20  6A06               	clrf	??_I2C_2_Master_Read^0,c
 11052   004A22  2A06               	incf	??_I2C_2_Master_Read^0,f,c
 11053   004A24  EF15  F025         	goto	u3018
 11054   004A28                     u3000:
 11055   004A28  6A06               	clrf	??_I2C_2_Master_Read^0,c
 11056   004A2A                     u3018:
 11057   004A2A  3A06               	swapf	??_I2C_2_Master_Read^0,f,c
 11058   004A2C  4606               	rlncf	??_I2C_2_Master_Read^0,f,c
 11059   004A2E  010E               	movlb	14	; () banked
 11060   004A30  51DA               	movf	218,w,b	;volatile
 11061   004A32  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
 11062   004A34  0BDF               	andlw	-33
 11063   004A36  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
 11064   004A38  6FDA               	movwf	218,b	;volatile
 11065   004A3A                     
 11066                           ; BSR set to: 14
 11067                           ;MazeRobot.X/i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
 11068   004A3A  89DA               	bsf	218,4,b	;volatile
 11069   004A3C                     
 11070                           ; BSR set to: 14
 11071                           ;MazeRobot.X/i2c.c: 61:   return tmp;
 11072   004A3C  5008               	movf	I2C_2_Master_Read@tmp^0,w,c
 11073   004A3E                     
 11074                           ; BSR set to: 14
 11075   004A3E  0012               	return		;funcret
 11076   004A40                     __end_of_I2C_2_Master_Read:
 11077                           	callstack 0
 11078                           
 11079 ;; *************** function _I2C_2_Master_Idle *****************
 11080 ;; Defined at:
 11081 ;;		line 22 in file "MazeRobot.X/i2c.c"
 11082 ;; Parameters:    Size  Location     Type
 11083 ;;		None
 11084 ;; Auto vars:     Size  Location     Type
 11085 ;;		None
 11086 ;; Return value:  Size  Location     Type
 11087 ;;                  1    wreg      void 
 11088 ;; Registers used:
 11089 ;;		wreg, status,2, status,0
 11090 ;; Tracked objects:
 11091 ;;		On entry : 0/0
 11092 ;;		On exit  : 0/0
 11093 ;;		Unchanged: 0/0
 11094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11096 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11097 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11098 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11099 ;;Total ram usage:        1 bytes
 11100 ;; Hardware stack levels used: 1
 11101 ;; Hardware stack levels required when called: 2
 11102 ;; This function calls:
 11103 ;;		Nothing
 11104 ;; This function is called by:
 11105 ;;		_I2C_2_Master_Start
 11106 ;;		_I2C_2_Master_RepStart
 11107 ;;		_I2C_2_Master_Stop
 11108 ;;		_I2C_2_Master_Write
 11109 ;;		_I2C_2_Master_Read
 11110 ;; This function uses a non-reentrant model
 11111 ;;
 11112                           
 11113                           	psect	text54
 11114   004BBC                     __ptext54:
 11115                           	callstack 0
 11116   004BBC                     _I2C_2_Master_Idle:
 11117                           	callstack 24
 11118   004BBC                     l312:
 11119   004BBC  010E               	movlb	14	; () banked
 11120   004BBE  B5D8               	btfsc	216,2,b	;volatile
 11121   004BC0  EFE4  F025         	goto	u2881
 11122   004BC4  EFE6  F025         	goto	u2880
 11123   004BC8                     u2881:
 11124   004BC8  EFDE  F025         	goto	l312
 11125   004BCC                     u2880:
 11126   004BCC                     
 11127                           ; BSR set to: 14
 11128   004BCC  CEDA F005          	movff	3802,??_I2C_2_Master_Idle	;volatile
 11129   004BD0  0E1F               	movlw	31
 11130   004BD2  1605               	andwf	??_I2C_2_Master_Idle^0,f,c
 11131   004BD4  A4D8               	btfss	status,2,c
 11132   004BD6  EFEF  F025         	goto	u2891
 11133   004BDA  EFF1  F025         	goto	u2890
 11134   004BDE                     u2891:
 11135   004BDE  EFDE  F025         	goto	l312
 11136   004BE2                     u2890:
 11137   004BE2                     
 11138                           ; BSR set to: 14
 11139   004BE2  0012               	return		;funcret
 11140   004BE4                     __end_of_I2C_2_Master_Idle:
 11141                           	callstack 0
 11142                           
 11143 ;; *************** function _DCmotorsInit *****************
 11144 ;; Defined at:
 11145 ;;		line 75 in file "MazeRobot.X/dc_motor.c"
 11146 ;; Parameters:    Size  Location     Type
 11147 ;;  mL              2    4[COMRAM] PTR struct DC_motor
 11148 ;;		 -> main@motorLeft(9), 
 11149 ;;  mR              2    6[COMRAM] PTR struct DC_motor
 11150 ;;		 -> main@motorRight(9), 
 11151 ;; Auto vars:     Size  Location     Type
 11152 ;;		None
 11153 ;; Return value:  Size  Location     Type
 11154 ;;                  1    wreg      void 
 11155 ;; Registers used:
 11156 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11157 ;; Tracked objects:
 11158 ;;		On entry : 0/0
 11159 ;;		On exit  : 0/0
 11160 ;;		Unchanged: 0/0
 11161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11162 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11163 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11165 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11166 ;;Total ram usage:        4 bytes
 11167 ;; Hardware stack levels used: 1
 11168 ;; Hardware stack levels required when called: 2
 11169 ;; This function calls:
 11170 ;;		Nothing
 11171 ;; This function is called by:
 11172 ;;		_main
 11173 ;; This function uses a non-reentrant model
 11174 ;;
 11175                           
 11176                           	psect	text55
 11177   0041F2                     __ptext55:
 11178                           	callstack 0
 11179   0041F2                     _DCmotorsInit:
 11180                           	callstack 28
 11181   0041F2                     
 11182                           ;MazeRobot.X/dc_motor.c: 77:     mL->power = 0;
 11183   0041F2  C005  FFD9         	movff	DCmotorsInit@mL,fsr2l
 11184   0041F6  C006  FFDA         	movff	DCmotorsInit@mL+1,fsr2h
 11185   0041FA  0E00               	movlw	0
 11186   0041FC  6EDF               	movwf	indf2,c
 11187   0041FE                     
 11188                           ;MazeRobot.X/dc_motor.c: 78:     mL->direction = 1;
 11189   0041FE  EE20 F001          	lfsr	2,1
 11190   004202  5005               	movf	DCmotorsInit@mL^0,w,c
 11191   004204  26D9               	addwf	fsr2l,f,c
 11192   004206  5006               	movf	(DCmotorsInit@mL+1)^0,w,c
 11193   004208  22DA               	addwfc	fsr2h,f,c
 11194   00420A  0E01               	movlw	1
 11195   00420C  6EDF               	movwf	indf2,c
 11196   00420E                     
 11197                           ;MazeRobot.X/dc_motor.c: 79:     mL->brakemode = 1;
 11198   00420E  EE20 F002          	lfsr	2,2
 11199   004212  5005               	movf	DCmotorsInit@mL^0,w,c
 11200   004214  26D9               	addwf	fsr2l,f,c
 11201   004216  5006               	movf	(DCmotorsInit@mL+1)^0,w,c
 11202   004218  22DA               	addwfc	fsr2h,f,c
 11203   00421A  0E01               	movlw	1
 11204   00421C  6EDF               	movwf	indf2,c
 11205   00421E                     
 11206                           ;MazeRobot.X/dc_motor.c: 80:     mL->posDutyHighByte = (unsigned char *)(&CCPR1H);
 11207   00421E  EE20 F005          	lfsr	2,5
 11208   004222  5005               	movf	DCmotorsInit@mL^0,w,c
 11209   004224  26D9               	addwf	fsr2l,f,c
 11210   004226  5006               	movf	(DCmotorsInit@mL+1)^0,w,c
 11211   004228  22DA               	addwfc	fsr2h,f,c
 11212   00422A  0EAA               	movlw	170
 11213   00422C  6EDE               	movwf	postinc2,c
 11214   00422E  0E0F               	movlw	15
 11215   004230  6EDD               	movwf	postdec2,c
 11216   004232                     
 11217                           ;MazeRobot.X/dc_motor.c: 81:     mL->negDutyHighByte = (unsigned char *)(&CCPR2H);
 11218   004232  EE20 F007          	lfsr	2,7
 11219   004236  5005               	movf	DCmotorsInit@mL^0,w,c
 11220   004238  26D9               	addwf	fsr2l,f,c
 11221   00423A  5006               	movf	(DCmotorsInit@mL+1)^0,w,c
 11222   00423C  22DA               	addwfc	fsr2h,f,c
 11223   00423E  0EA6               	movlw	166
 11224   004240  6EDE               	movwf	postinc2,c
 11225   004242  0E0F               	movlw	15
 11226   004244  6EDD               	movwf	postdec2,c
 11227   004246                     
 11228                           ;MazeRobot.X/dc_motor.c: 82:     mL->PWMperiod = 199 ;
 11229   004246  EE20 F003          	lfsr	2,3
 11230   00424A  5005               	movf	DCmotorsInit@mL^0,w,c
 11231   00424C  26D9               	addwf	fsr2l,f,c
 11232   00424E  5006               	movf	(DCmotorsInit@mL+1)^0,w,c
 11233   004250  22DA               	addwfc	fsr2h,f,c
 11234   004252  0EC7               	movlw	199
 11235   004254  6EDE               	movwf	postinc2,c
 11236   004256  0E00               	movlw	0
 11237   004258  6EDD               	movwf	postdec2,c
 11238   00425A                     
 11239                           ;MazeRobot.X/dc_motor.c: 84:     mR->power = 0;
 11240   00425A  C007  FFD9         	movff	DCmotorsInit@mR,fsr2l
 11241   00425E  C008  FFDA         	movff	DCmotorsInit@mR+1,fsr2h
 11242   004262  0E00               	movlw	0
 11243   004264  6EDF               	movwf	indf2,c
 11244                           
 11245                           ;MazeRobot.X/dc_motor.c: 85:     mR->direction = 1;
 11246   004266  EE20 F001          	lfsr	2,1
 11247   00426A  5007               	movf	DCmotorsInit@mR^0,w,c
 11248   00426C  26D9               	addwf	fsr2l,f,c
 11249   00426E  5008               	movf	(DCmotorsInit@mR+1)^0,w,c
 11250   004270  22DA               	addwfc	fsr2h,f,c
 11251   004272  0E01               	movlw	1
 11252   004274  6EDF               	movwf	indf2,c
 11253                           
 11254                           ;MazeRobot.X/dc_motor.c: 86:     mR->brakemode = 1;
 11255   004276  EE20 F002          	lfsr	2,2
 11256   00427A  5007               	movf	DCmotorsInit@mR^0,w,c
 11257   00427C  26D9               	addwf	fsr2l,f,c
 11258   00427E  5008               	movf	(DCmotorsInit@mR+1)^0,w,c
 11259   004280  22DA               	addwfc	fsr2h,f,c
 11260   004282  0E01               	movlw	1
 11261   004284  6EDF               	movwf	indf2,c
 11262                           
 11263                           ;MazeRobot.X/dc_motor.c: 87:     mR->posDutyHighByte = (unsigned char *)(&CCPR3H);
 11264   004286  EE20 F005          	lfsr	2,5
 11265   00428A  5007               	movf	DCmotorsInit@mR^0,w,c
 11266   00428C  26D9               	addwf	fsr2l,f,c
 11267   00428E  5008               	movf	(DCmotorsInit@mR+1)^0,w,c
 11268   004290  22DA               	addwfc	fsr2h,f,c
 11269   004292  0E25               	movlw	37
 11270   004294  6EDE               	movwf	postinc2,c
 11271   004296  0E0F               	movlw	15
 11272   004298  6EDD               	movwf	postdec2,c
 11273                           
 11274                           ;MazeRobot.X/dc_motor.c: 88:     mR->negDutyHighByte = (unsigned char *)(&CCPR4H);
 11275   00429A  EE20 F007          	lfsr	2,7
 11276   00429E  5007               	movf	DCmotorsInit@mR^0,w,c
 11277   0042A0  26D9               	addwf	fsr2l,f,c
 11278   0042A2  5008               	movf	(DCmotorsInit@mR+1)^0,w,c
 11279   0042A4  22DA               	addwfc	fsr2h,f,c
 11280   0042A6  0E21               	movlw	33
 11281   0042A8  6EDE               	movwf	postinc2,c
 11282   0042AA  0E0F               	movlw	15
 11283   0042AC  6EDD               	movwf	postdec2,c
 11284                           
 11285                           ;MazeRobot.X/dc_motor.c: 89:     mR->PWMperiod = 199 ;
 11286   0042AE  EE20 F003          	lfsr	2,3
 11287   0042B2  5007               	movf	DCmotorsInit@mR^0,w,c
 11288   0042B4  26D9               	addwf	fsr2l,f,c
 11289   0042B6  5008               	movf	(DCmotorsInit@mR+1)^0,w,c
 11290   0042B8  22DA               	addwfc	fsr2h,f,c
 11291   0042BA  0EC7               	movlw	199
 11292   0042BC  6EDE               	movwf	postinc2,c
 11293   0042BE  0E00               	movlw	0
 11294   0042C0  6EDD               	movwf	postdec2,c
 11295   0042C2  0012               	return		;funcret
 11296   0042C4                     __end_of_DCmotorsInit:
 11297                           	callstack 0
 11298                           
 11299 ;; *************** function _HighISR *****************
 11300 ;; Defined at:
 11301 ;;		line 132 in file "serialTest.c"
 11302 ;; Parameters:    Size  Location     Type
 11303 ;;		None
 11304 ;; Auto vars:     Size  Location     Type
 11305 ;;		None
 11306 ;; Return value:  Size  Location     Type
 11307 ;;                  1    wreg      void 
 11308 ;; Registers used:
 11309 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11310 ;; Tracked objects:
 11311 ;;		On entry : 0/0
 11312 ;;		On exit  : 0/0
 11313 ;;		Unchanged: 0/0
 11314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11316 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11317 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11318 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11319 ;;Total ram usage:        2 bytes
 11320 ;; Hardware stack levels used: 1
 11321 ;; Hardware stack levels required when called: 1
 11322 ;; This function calls:
 11323 ;;		_getCharFromTxBuf
 11324 ;;		_putCharToRxBuf
 11325 ;;		i2_isDataInTxBuf
 11326 ;; This function is called by:
 11327 ;;		Interrupt level 2
 11328 ;; This function uses a non-reentrant model
 11329 ;;
 11330                           
 11331                           	psect	intcode
 11332   000008                     __pintcode:
 11333                           	callstack 0
 11334   000008                     _HighISR:
 11335                           	callstack 20
 11336                           
 11337                           ;incstack = 0
 11338   000008  825B               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
 11339   00000A  CFD9 F003          	movff	fsr2l,??_HighISR
 11340   00000E  CFDA F004          	movff	fsr2h,??_HighISR+1
 11341   000012                     
 11342                           ;serialTest.c: 134:     if (PIR4bits.RC4IF){
 11343   000012  010E               	movlb	14	; () banked
 11344   000014  A737               	btfss	55,3,b	;volatile
 11345   000016  EF0F  F000         	goto	i2u507_41
 11346   00001A  EF11  F000         	goto	i2u507_40
 11347   00001E                     i2u507_41:
 11348   00001E  EF14  F000         	goto	i2l4801
 11349   000022                     i2u507_40:
 11350   000022                     
 11351                           ; BSR set to: 14
 11352                           ;serialTest.c: 135:         putCharToRxBuf(RC4REG);
 11353   000022  51E3               	movf	227,w,b	;volatile
 11354   000024  ECC9  F025         	call	_putCharToRxBuf
 11355   000028                     i2l4801:
 11356                           
 11357                           ;serialTest.c: 138:     if (PIR4bits.TX4IF && PIE4bits.TX4IE == 1){
 11358   000028  010E               	movlb	14	; () banked
 11359   00002A  A537               	btfss	55,2,b	;volatile
 11360   00002C  EF1A  F000         	goto	i2u508_41
 11361   000030  EF1C  F000         	goto	i2u508_40
 11362   000034                     i2u508_41:
 11363   000034  EF35  F000         	goto	i2l550
 11364   000038                     i2u508_40:
 11365   000038                     
 11366                           ; BSR set to: 14
 11367   000038  A52D               	btfss	45,2,b	;volatile
 11368   00003A  EF21  F000         	goto	i2u509_41
 11369   00003E  EF23  F000         	goto	i2u509_40
 11370   000042                     i2u509_41:
 11371   000042  EF35  F000         	goto	i2l550
 11372   000046                     i2u509_40:
 11373   000046                     
 11374                           ; BSR set to: 14
 11375                           ;serialTest.c: 139:         if (isDataInTxBuf() == 1){
 11376   000046  EC2E  F026         	call	i2_isDataInTxBuf	;wreg free
 11377   00004A  06E8               	decf	wreg,f,c
 11378   00004C  A4D8               	btfss	status,2,c
 11379   00004E  EF2B  F000         	goto	i2u510_41
 11380   000052  EF2D  F000         	goto	i2u510_40
 11381   000056                     i2u510_41:
 11382   000056  EF33  F000         	goto	i2l548
 11383   00005A                     i2u510_40:
 11384   00005A                     
 11385                           ;serialTest.c: 140:            TX4REG = getCharFromTxBuf();
 11386   00005A  EC89  F025         	call	_getCharFromTxBuf	;wreg free
 11387   00005E  010E               	movlb	14	; () banked
 11388   000060  6FE4               	movwf	228,b	;volatile
 11389                           
 11390                           ;serialTest.c: 141:         }
 11391   000062  EF35  F000         	goto	i2l550
 11392   000066                     i2l548:
 11393                           
 11394                           ;serialTest.c: 143:            PIE4bits.TX4IE = 0;
 11395   000066  010E               	movlb	14	; () banked
 11396   000068  952D               	bcf	45,2,b	;volatile
 11397   00006A                     i2l550:
 11398                           
 11399                           ; BSR set to: 14
 11400   00006A  C004  FFDA         	movff	??_HighISR+1,fsr2h
 11401   00006E  C003  FFD9         	movff	??_HighISR,fsr2l
 11402   000072  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
 11403   000074  0011               	retfie		f
 11404   000076                     __end_of_HighISR:
 11405                           	callstack 0
 11406                           
 11407 ;; *************** function i2_isDataInTxBuf *****************
 11408 ;; Defined at:
 11409 ;;		line 113 in file "serialTest.c"
 11410 ;; Parameters:    Size  Location     Type
 11411 ;;		None
 11412 ;; Auto vars:     Size  Location     Type
 11413 ;;		None
 11414 ;; Return value:  Size  Location     Type
 11415 ;;                  1    wreg      unsigned char 
 11416 ;; Registers used:
 11417 ;;		wreg, status,2, status,0
 11418 ;; Tracked objects:
 11419 ;;		On entry : 0/0
 11420 ;;		On exit  : 0/0
 11421 ;;		Unchanged: 0/0
 11422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11426 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11427 ;;Total ram usage:        0 bytes
 11428 ;; Hardware stack levels used: 1
 11429 ;; This function calls:
 11430 ;;		Nothing
 11431 ;; This function is called by:
 11432 ;;		_HighISR
 11433 ;; This function uses a non-reentrant model
 11434 ;;
 11435                           
 11436                           	psect	text57
 11437   004C5C                     __ptext57:
 11438                           	callstack 0
 11439   004C5C                     i2_isDataInTxBuf:
 11440                           	callstack 20
 11441   004C5C                     
 11442                           ;serialTest.c: 114:     return (TxBufWriteCnt!=TxBufReadCnt);
 11443   004C5C  5057               	movf	_TxBufReadCnt^0,w,c	;volatile
 11444   004C5E  1858               	xorwf	_TxBufWriteCnt^0,w,c	;volatile
 11445   004C60  A4D8               	btfss	status,2,c
 11446   004C62  EF35  F026         	goto	i2u221_41
 11447   004C66  EF38  F026         	goto	i2u221_40
 11448   004C6A                     i2u221_41:
 11449   004C6A  0E01               	movlw	1
 11450   004C6C  EF39  F026         	goto	i2u222_40
 11451   004C70                     i2u221_40:
 11452   004C70  0E00               	movlw	0
 11453   004C72                     i2u222_40:
 11454   004C72  0012               	return		;funcret
 11455   004C74                     __end_ofi2_isDataInTxBuf:
 11456                           	callstack 0
 11457                           
 11458 ;; *************** function _putCharToRxBuf *****************
 11459 ;; Defined at:
 11460 ;;		line 85 in file "serialTest.c"
 11461 ;; Parameters:    Size  Location     Type
 11462 ;;  byte            1    wreg     unsigned char 
 11463 ;; Auto vars:     Size  Location     Type
 11464 ;;  byte            1    0[COMRAM] unsigned char 
 11465 ;; Return value:  Size  Location     Type
 11466 ;;                  1    wreg      void 
 11467 ;; Registers used:
 11468 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11469 ;; Tracked objects:
 11470 ;;		On entry : 0/0
 11471 ;;		On exit  : 0/0
 11472 ;;		Unchanged: 0/0
 11473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11475 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11477 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11478 ;;Total ram usage:        1 bytes
 11479 ;; Hardware stack levels used: 1
 11480 ;; This function calls:
 11481 ;;		Nothing
 11482 ;; This function is called by:
 11483 ;;		_HighISR
 11484 ;; This function uses a non-reentrant model
 11485 ;;
 11486                           
 11487                           	psect	text58
 11488   004B92                     __ptext58:
 11489                           	callstack 0
 11490   004B92                     _putCharToRxBuf:
 11491                           	callstack 20
 11492                           
 11493                           ;incstack = 0
 11494                           ;putCharToRxBuf@byte stored from wreg
 11495   004B92  6E01               	movwf	putCharToRxBuf@byte^0,c
 11496   004B94                     
 11497                           ;serialTest.c: 86:     if (RxBufWriteCnt>=20) {RxBufWriteCnt=0;}
 11498   004B94  0E13               	movlw	19
 11499   004B96  645A               	cpfsgt	_RxBufWriteCnt^0,c	;volatile
 11500   004B98  EFD0  F025         	goto	i2u478_41
 11501   004B9C  EFD2  F025         	goto	i2u478_40
 11502   004BA0                     i2u478_41:
 11503   004BA0  EFD4  F025         	goto	i2l4575
 11504   004BA4                     i2u478_40:
 11505   004BA4  0E00               	movlw	0
 11506   004BA6  6E5A               	movwf	_RxBufWriteCnt^0,c	;volatile
 11507   004BA8                     i2l4575:
 11508                           
 11509                           ;serialTest.c: 87:     EUSART4RXbuf[RxBufWriteCnt++]=byte;
 11510   004BA8  0ED0               	movlw	low _EUSART4RXbuf
 11511   004BAA  245A               	addwf	_RxBufWriteCnt^0,w,c	;volatile
 11512   004BAC  6ED9               	movwf	fsr2l,c
 11513   004BAE  6ADA               	clrf	fsr2h,c
 11514   004BB0  0E00               	movlw	high _EUSART4RXbuf
 11515   004BB2  22DA               	addwfc	fsr2h,f,c
 11516   004BB4  C001  FFDF         	movff	putCharToRxBuf@byte,indf2
 11517   004BB8  2A5A               	incf	_RxBufWriteCnt^0,f,c	;volatile
 11518   004BBA  0012               	return		;funcret
 11519   004BBC                     __end_of_putCharToRxBuf:
 11520                           	callstack 0
 11521                           
 11522 ;; *************** function _getCharFromTxBuf *****************
 11523 ;; Defined at:
 11524 ;;		line 99 in file "serialTest.c"
 11525 ;; Parameters:    Size  Location     Type
 11526 ;;		None
 11527 ;; Auto vars:     Size  Location     Type
 11528 ;;		None
 11529 ;; Return value:  Size  Location     Type
 11530 ;;                  1    wreg      unsigned char 
 11531 ;; Registers used:
 11532 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11533 ;; Tracked objects:
 11534 ;;		On entry : 0/0
 11535 ;;		On exit  : 0/0
 11536 ;;		Unchanged: 0/0
 11537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11540 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11541 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11542 ;;Total ram usage:        2 bytes
 11543 ;; Hardware stack levels used: 1
 11544 ;; This function calls:
 11545 ;;		Nothing
 11546 ;; This function is called by:
 11547 ;;		_HighISR
 11548 ;; This function uses a non-reentrant model
 11549 ;;
 11550                           
 11551                           	psect	text59
 11552   004B12                     __ptext59:
 11553                           	callstack 0
 11554   004B12                     _getCharFromTxBuf:
 11555                           	callstack 20
 11556   004B12                     
 11557                           ;serialTest.c: 100:     if (TxBufReadCnt>=60) {TxBufReadCnt=0;}
 11558   004B12  0E3B               	movlw	59
 11559   004B14  6457               	cpfsgt	_TxBufReadCnt^0,c	;volatile
 11560   004B16  EF8F  F025         	goto	i2u479_41
 11561   004B1A  EF91  F025         	goto	i2u479_40
 11562   004B1E                     i2u479_41:
 11563   004B1E  EF93  F025         	goto	i2l4583
 11564   004B22                     i2u479_40:
 11565   004B22  0E00               	movlw	0
 11566   004B24  6E57               	movwf	_TxBufReadCnt^0,c	;volatile
 11567   004B26                     i2l4583:
 11568                           
 11569                           ;serialTest.c: 101:     return EUSART4TXbuf[TxBufReadCnt++];
 11570   004B26  2A57               	incf	_TxBufReadCnt^0,f,c	;volatile
 11571   004B28  0457               	decf	_TxBufReadCnt^0,w,c	;volatile
 11572   004B2A  6E01               	movwf	??_getCharFromTxBuf^0,c
 11573   004B2C  6A02               	clrf	(??_getCharFromTxBuf+1)^0,c
 11574   004B2E  0E9A               	movlw	low _EUSART4TXbuf
 11575   004B30  2401               	addwf	??_getCharFromTxBuf^0,w,c
 11576   004B32  6ED9               	movwf	fsr2l,c
 11577   004B34  0E01               	movlw	high _EUSART4TXbuf
 11578   004B36  2002               	addwfc	(??_getCharFromTxBuf+1)^0,w,c
 11579   004B38  6EDA               	movwf	fsr2h,c
 11580   004B3A  50DF               	movf	indf2,w,c
 11581   004B3C  0012               	return		;funcret
 11582   004B3E                     __end_of_getCharFromTxBuf:
 11583                           	callstack 0
 11584                           
 11585                           	psect	rparam
 11586   000000                     
 11587                           	psect	temp
 11588   00005B                     btemp:
 11589                           	callstack 0
 11590   00005B                     	ds	1
 11591   000000                     int$flags	set	btemp
 11592   000000                     wtemp8	set	btemp+1
 11593   000000                     ttemp5	set	btemp+1
 11594   000000                     ttemp6	set	btemp+4
 11595   000000                     ttemp7	set	btemp+8
 11596                           
 11597                           	psect	idloc
 11598                           
 11599                           ;Config register IDLOC0 @ 0x200000
 11600                           ;	unspecified, using default values
 11601   200000                     	org	2097152
 11602   200000  0FFF               	dw	4095
 11603                           
 11604                           ;Config register IDLOC1 @ 0x200002
 11605                           ;	unspecified, using default values
 11606   200002                     	org	2097154
 11607   200002  0FFF               	dw	4095
 11608                           
 11609                           ;Config register IDLOC2 @ 0x200004
 11610                           ;	unspecified, using default values
 11611   200004                     	org	2097156
 11612   200004  0FFF               	dw	4095
 11613                           
 11614                           ;Config register IDLOC3 @ 0x200006
 11615                           ;	unspecified, using default values
 11616   200006                     	org	2097158
 11617   200006  0FFF               	dw	4095
 11618                           
 11619                           ;Config register IDLOC4 @ 0x200008
 11620                           ;	unspecified, using default values
 11621   200008                     	org	2097160
 11622   200008  0FFF               	dw	4095
 11623                           
 11624                           ;Config register IDLOC5 @ 0x20000A
 11625                           ;	unspecified, using default values
 11626   20000A                     	org	2097162
 11627   20000A  0FFF               	dw	4095
 11628                           
 11629                           ;Config register IDLOC6 @ 0x20000C
 11630                           ;	unspecified, using default values
 11631   20000C                     	org	2097164
 11632   20000C  0FFF               	dw	4095
 11633                           
 11634                           ;Config register IDLOC7 @ 0x20000E
 11635                           ;	unspecified, using default values
 11636   20000E                     	org	2097166
 11637   20000E  0FFF               	dw	4095
 11638                           
 11639                           	psect	config
 11640                           
 11641                           ;Config register CONFIG1L @ 0x300000
 11642                           ;	External Oscillator mode Selection bits
 11643                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
 11644                           ;	Power-up default value for COSC bits
 11645                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
 11646   300000                     	org	3145728
 11647   300000  AA                 	db	170
 11648                           
 11649                           ;Config register CONFIG1H @ 0x300001
 11650                           ;	unspecified, using default values
 11651                           ;	Clock Out Enable bit
 11652                           ;	CLKOUTEN = 0x1, unprogrammed default
 11653                           ;	Clock Switch Enable bit
 11654                           ;	CSWEN = 0x1, unprogrammed default
 11655                           ;	Fail-Safe Clock Monitor Enable bit
 11656                           ;	FCMEN = 0x1, unprogrammed default
 11657   300001                     	org	3145729
 11658   300001  FF                 	db	255
 11659                           
 11660                           ;Config register CONFIG2L @ 0x300002
 11661                           ;	unspecified, using default values
 11662                           ;	Master Clear Enable bit
 11663                           ;	MCLRE = 0x1, unprogrammed default
 11664                           ;	Power-up Timer Enable bit
 11665                           ;	PWRTE = 0x1, unprogrammed default
 11666                           ;	Low-power BOR enable bit
 11667                           ;	LPBOREN = 0x1, unprogrammed default
 11668                           ;	Brown-out Reset Enable bits
 11669                           ;	BOREN = 0x3, unprogrammed default
 11670   300002                     	org	3145730
 11671   300002  FF                 	db	255
 11672                           
 11673                           ;Config register CONFIG2H @ 0x300003
 11674                           ;	unspecified, using default values
 11675                           ;	Brown Out Reset Voltage selection bits
 11676                           ;	BORV = 0x3, unprogrammed default
 11677                           ;	ZCD Disable bit
 11678                           ;	ZCD = 0x1, unprogrammed default
 11679                           ;	PPSLOCK bit One-Way Set Enable bit
 11680                           ;	PPS1WAY = 0x1, unprogrammed default
 11681                           ;	Stack Full/Underflow Reset Enable bit
 11682                           ;	STVREN = 0x1, unprogrammed default
 11683                           ;	Debugger Enable bit
 11684                           ;	DEBUG = 0x1, unprogrammed default
 11685                           ;	Extended Instruction Set Enable bit
 11686                           ;	XINST = 0x1, unprogrammed default
 11687   300003                     	org	3145731
 11688   300003  FF                 	db	255
 11689                           
 11690                           ;Config register CONFIG3L @ 0x300004
 11691                           ;	WDT Period Select bits
 11692                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
 11693                           ;	WDT operating mode
 11694                           ;	WDTE = OFF, WDT Disabled
 11695   300004                     	org	3145732
 11696   300004  9F                 	db	159
 11697                           
 11698                           ;Config register CONFIG3H @ 0x300005
 11699                           ;	unspecified, using default values
 11700                           ;	WDT Window Select bits
 11701                           ;	WDTCWS = 0x7, unprogrammed default
 11702                           ;	WDT input clock selector
 11703                           ;	WDTCCS = 0x7, unprogrammed default
 11704   300005                     	org	3145733
 11705   300005  FF                 	db	255
 11706                           
 11707                           ;Config register CONFIG4L @ 0x300006
 11708                           ;	unspecified, using default values
 11709                           ;	Write Protection Block 0
 11710                           ;	WRT0 = 0x1, unprogrammed default
 11711                           ;	Write Protection Block 1
 11712                           ;	WRT1 = 0x1, unprogrammed default
 11713                           ;	Write Protection Block 2
 11714                           ;	WRT2 = 0x1, unprogrammed default
 11715                           ;	Write Protection Block 3
 11716                           ;	WRT3 = 0x1, unprogrammed default
 11717                           ;	Write Protection Block 3
 11718                           ;	WRT4 = 0x1, unprogrammed default
 11719                           ;	Write Protection Block 3
 11720                           ;	WRT5 = 0x1, unprogrammed default
 11721                           ;	Write Protection Block 3
 11722                           ;	WRT6 = 0x1, unprogrammed default
 11723                           ;	Write Protection Block 3
 11724                           ;	WRT7 = 0x1, unprogrammed default
 11725   300006                     	org	3145734
 11726   300006  FF                 	db	255
 11727                           
 11728                           ;Config register CONFIG4H @ 0x300007
 11729                           ;	unspecified, using default values
 11730                           ;	Configuration Register Write Protection bit
 11731                           ;	WRTC = 0x1, unprogrammed default
 11732                           ;	Boot Block Write Protection bit
 11733                           ;	WRTB = 0x1, unprogrammed default
 11734                           ;	Data EEPROM Write Protection bit
 11735                           ;	WRTD = 0x1, unprogrammed default
 11736                           ;	Scanner Enable bit
 11737                           ;	SCANE = 0x1, unprogrammed default
 11738                           ;	Low Voltage Programming Enable bit
 11739                           ;	LVP = 0x1, unprogrammed default
 11740   300007                     	org	3145735
 11741   300007  FF                 	db	255
 11742                           
 11743                           ;Config register CONFIG5L @ 0x300008
 11744                           ;	unspecified, using default values
 11745                           ;	UserNVM Program Memory Code Protection bit
 11746                           ;	CP = 0x1, unprogrammed default
 11747                           ;	DataNVM Memory Code Protection bit
 11748                           ;	CPD = 0x1, unprogrammed default
 11749   300008                     	org	3145736
 11750   300008  FF                 	db	255
 11751                           
 11752                           ;Config register CONFIG5H @ 0x300009
 11753                           ;	unspecified, using default values
 11754   300009                     	org	3145737
 11755   300009  FF                 	db	255
 11756                           
 11757                           ;Config register CONFIG6L @ 0x30000A
 11758                           ;	unspecified, using default values
 11759                           ;	Table Read Protection Block 0
 11760                           ;	EBTR0 = 0x1, unprogrammed default
 11761                           ;	Table Read Protection Block 1
 11762                           ;	EBTR1 = 0x1, unprogrammed default
 11763                           ;	Table Read Protection Block 2
 11764                           ;	EBTR2 = 0x1, unprogrammed default
 11765                           ;	Table Read Protection Block 3
 11766                           ;	EBTR3 = 0x1, unprogrammed default
 11767                           ;	Table Read Protection Block 4
 11768                           ;	EBTR4 = 0x1, unprogrammed default
 11769                           ;	Table Read Protection Block 5
 11770                           ;	EBTR5 = 0x1, unprogrammed default
 11771                           ;	Table Read Protection Block 6
 11772                           ;	EBTR6 = 0x1, unprogrammed default
 11773                           ;	Table Read Protection Block 7
 11774                           ;	EBTR7 = 0x1, unprogrammed default
 11775   30000A                     	org	3145738
 11776   30000A  FF                 	db	255
 11777                           
 11778                           ;Config register CONFIG6H @ 0x30000B
 11779                           ;	unspecified, using default values
 11780                           ;	Boot Block Table Read Protection bit
 11781                           ;	EBTRB = 0x1, unprogrammed default
 11782   30000B                     	org	3145739
 11783   30000B  FF                 	db	255
 11784                           tosu	equ	0xFFF
 11785                           tosh	equ	0xFFE
 11786                           tosl	equ	0xFFD
 11787                           stkptr	equ	0xFFC
 11788                           pclatu	equ	0xFFB
 11789                           pclath	equ	0xFFA
 11790                           pcl	equ	0xFF9
 11791                           tblptru	equ	0xFF8
 11792                           tblptrh	equ	0xFF7
 11793                           tblptrl	equ	0xFF6
 11794                           tablat	equ	0xFF5
 11795                           prodh	equ	0xFF4
 11796                           prodl	equ	0xFF3
 11797                           indf0	equ	0xFEF
 11798                           postinc0	equ	0xFEE
 11799                           postdec0	equ	0xFED
 11800                           preinc0	equ	0xFEC
 11801                           plusw0	equ	0xFEB
 11802                           fsr0h	equ	0xFEA
 11803                           fsr0l	equ	0xFE9
 11804                           wreg	equ	0xFE8
 11805                           indf1	equ	0xFE7
 11806                           postinc1	equ	0xFE6
 11807                           postdec1	equ	0xFE5
 11808                           preinc1	equ	0xFE4
 11809                           plusw1	equ	0xFE3
 11810                           fsr1h	equ	0xFE2
 11811                           fsr1l	equ	0xFE1
 11812                           bsr	equ	0xFE0
 11813                           indf2	equ	0xFDF
 11814                           postinc2	equ	0xFDE
 11815                           postdec2	equ	0xFDD
 11816                           preinc2	equ	0xFDC
 11817                           plusw2	equ	0xFDB
 11818                           fsr2h	equ	0xFDA
 11819                           fsr2l	equ	0xFD9
 11820                           status	equ	0xFD8

Data Sizes:
    Strings     37
    Constant    0
    Data        4
    BSS         125
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     86      90
    BANK0           160    112     145
    BANK1           256    154     246
    BANK2           256    200     200
    BANK3           256    200     200
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_2(CODE[15]), STR_1(CODE[22]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 22
		 -> STR_2(CODE[15]), STR_1(CODE[22]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 22
		 -> STR_2(CODE[15]), STR_1(CODE[22]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    S2674$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_2(CODE[15]), STR_1(CODE[22]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 150
		 -> ADC2String@buf(COMRAM[40]), return_home_turns@string1(BANK1[150]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2621$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2621$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    TxBufferedString@string	PTR unsigned char  size(2) Largest target is 150
		 -> return_home_turns@string1(BANK1[150]), 

    motorRight.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    motorRight.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    motorLeft.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    motorLeft.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    reverseSquareLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK0[9]), 

    reverseSquareLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK0[9]), 

    reverseSquareRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK0[9]), 

    reverseSquareRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK0[9]), 

    turnLeft_135@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft_135@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft_135@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft_135@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft_135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK0[9]), 

    turnLeft_135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK0[9]), 

    turnRight_135@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight_135@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight_135@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight_135@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight_135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK0[9]), 

    turnRight_135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK0[9]), 

    turn_180@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turn_180@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turn_180@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turn_180@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turn_180@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK0[9]), 

    turn_180@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK0[9]), 

    turnRight_90@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight_90@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight_90@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight_90@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight_90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK0[9]), 

    turnRight_90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK0[9]), 

    turnLeft_90@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft_90@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft_90@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft_90@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft_90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK0[9]), 

    turnLeft_90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK0[9]), 

    turnRight@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    reverse@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    reverse@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    reverse@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK0[9]), 

    reverse@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    reverse@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    reverse@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK0[9]), 

    forward@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    forward@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    forward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK0[9]), 

    forward@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    forward@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    forward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK0[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK0[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK0[9]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK0[9]), main@motorLeft(BANK0[9]), 

    DCmotorsInit@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK0[9]), 

    S107DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    S107DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK0[9]), 

    return_home_turns@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK0[9]), 

    return_home_turns@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK0[9]), 

    return_home_turns@turn_history	PTR unsigned int  size(2) Largest target is 200
		 -> main@turn_history(BANK2[200]), 

    return_home_turns@counter_history	PTR unsigned int  size(2) Largest target is 200
		 -> main@counter_history(BANK3[200]), 

    colorDetect@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK0[9]), 

    colorDetect@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK0[9]), 

    colorDetect@whiteRGBVal	PTR struct RGB size(2) Largest target is 8
		 -> main@whiteRGBVal(BANK0[8]), 

    colorDetect@ambientRGBVal	PTR struct RGB size(2) Largest target is 8
		 -> main@ambientRGBVal(BANK0[8]), 

    whiteCal@v	PTR struct RGB size(2) Largest target is 8
		 -> main@whiteRGBVal(BANK0[8]), 

    ambientCal@v	PTR struct RGB size(2) Largest target is 8
		 -> main@ambientRGBVal(BANK0[8]), 

    getColor@v	PTR struct RGB size(2) Largest target is 8
		 -> main@whiteRGBVal(BANK0[8]), main@RGBVal(BANK0[8]), main@ambientRGBVal(BANK0[8]), colorDetect@RGBVal(BANK0[8]), 


Critical Paths under _main in COMRAM

    _whiteCal->_getColor
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _forward->_setMotorPWM
    _TxBufferedString->_putCharToTxBuf
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _colorDetect->___fldiv
    _turn_180->_stop
    _turnRight_135->_stop
    _turnLeft_135->_stop
    _reverseSquareRight->_turnRight_90
    _turnRight_90->_stop
    _reverseSquareLeft->_turnLeft_90
    _turnLeft_90->_stop
    _stop->_setMotorPWM
    _reverse->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    ___flsub->___fladd
    ___flmul->___flsub
    ___flge->___flsub
    ___fldiv->___flmul
    _ambientCal->_getColor
    _getColor->_color_read_Blue
    _getColor->_color_read_Clear
    _getColor->_color_read_Green
    _getColor->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle

Critical Paths under _HighISR in COMRAM

    _HighISR->_getCharFromTxBuf

Critical Paths under _main in BANK0

    _main->_colorDetect
    _return_home_turns->_sprintf
    _sprintf->_vfprintf

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_return_home_turns

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               460   460      0  282528
                                             52 BANK0     60    60      0
                                              0 BANK2    200   200      0
                                              0 BANK3    200   200      0
                       _DCmotorsInit
                            ___fldiv
                             ___flge
                           ___xxtofl
                         _ambientCal
                        _colorDetect
                   _color_click_init
                            _forward
                           _getColor
                    _initDCmotorsPWM
                         _initUSART4
                  _return_home_turns
                               _stop
                           _turn_180
                           _whiteCal
 ---------------------------------------------------------------------------------
 (1) _whiteCal                                             6     4      2     988
                                             17 COMRAM     6     4      2
                           _getColor
 ---------------------------------------------------------------------------------
 (1) _return_home_turns                                  166   156     10   93833
                                             31 BANK0     12     2     10
                                              0 BANK1    154   154      0
                   _TxBufferedString
                            _forward
                          _sendTxBuf
                            _sprintf
                               _stop
                       _turnLeft_135
                        _turnLeft_90
                      _turnRight_135
                       _turnRight_90
                           _turn_180
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             27    15     12    7496
                                              6 BANK0     25    13     12
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             8     2      6    6830
                                             84 COMRAM     2     2      0
                                              0 BANK0      6     0      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           23    17      6    6369
                                             66 COMRAM    18    12      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                35    25     10    4802
                                             31 COMRAM    35    25     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                 11     5      6    2533
                                             20 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (7) _fputs                                                7     3      4    1177
                                             13 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                9     5      4     857
                                              4 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     183
                                             22 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___aomod                                             18     2     16     613
                                              4 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (6) ___aodiv                                             26    10     16     625
                                              4 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (2) _sendTxBuf                                            0     0      0       0
                      _isDataInTxBuf
 ---------------------------------------------------------------------------------
 (3) _isDataInTxBuf                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _forward                                              5     1      4    3157
                                             23 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _TxBufferedString                                     2     0      2     143
                                              5 COMRAM     2     0      2
                     _putCharToTxBuf
 ---------------------------------------------------------------------------------
 (3) _putCharToTxBuf                                       1     1      0      22
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      76
                                              4 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              8 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              6 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _colorDetect                                         58    46     12  149088
                                             78 COMRAM     2     2      0
                                              0 BANK0     52    40     12
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                           ___xxtofl
                           _getColor
                  _reverseSquareLeft
                 _reverseSquareRight
                       _turnLeft_135
                        _turnLeft_90
                      _turnRight_135
                       _turnRight_90
                           _turn_180
 ---------------------------------------------------------------------------------
 (1) _turn_180                                             6     2      4   14838
                                             29 COMRAM     6     2      4
                            _reverse
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _turnRight_135                                        6     2      4   14686
                                             29 COMRAM     6     2      4
                            _reverse
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _turnLeft_135                                         6     2      4   14686
                                             29 COMRAM     6     2      4
                            _reverse
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _reverseSquareRight                                   6     2      4   26753
                                             35 COMRAM     6     2      4
                            _reverse
                               _stop
                       _turnRight_90
 ---------------------------------------------------------------------------------
 (2) _turnRight_90                                         6     2      4   14987
                                             29 COMRAM     6     2      4
                            _reverse
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _reverseSquareLeft                                    6     2      4   26753
                                             35 COMRAM     6     2      4
                            _reverse
                               _stop
                        _turnLeft_90
 ---------------------------------------------------------------------------------
 (2) _turnLeft_90                                          6     2      4   14987
                                             29 COMRAM     6     2      4
                            _reverse
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _stop                                                 6     2      4    6869
                                             23 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _reverse                                              5     1      4    4525
                                             23 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          6     4      2    2589
                                             17 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     355
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     358
                                             10 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4    2350
                                              4 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    3801
                                             20 COMRAM     8     0      8
                            ___fladd
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             16     8      8    2262
                                              4 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             25    17      8    4904
                                             28 COMRAM    25    17      8
                            ___flsub (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8    4742
                                             28 COMRAM    12     4      8
                            ___flsub (ARG)
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             25    17      8    1855
                                             53 COMRAM    25    17      8
                            ___flmul (ARG)
                            ___flsub (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _ambientCal                                           6     4      2    1064
                                             17 COMRAM     6     4      2
                           _getColor
 ---------------------------------------------------------------------------------
 (2) _getColor                                             2     0      2     844
                                             15 COMRAM     2     0      2
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (3) _color_read_Red                                       7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Green                                     7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Clear                                     7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Blue                                      7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Write                                   1     1      0      22
                                              5 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Read                                    3     3      0      45
                                              5 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Idle                                    1     1      0       0
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DCmotorsInit                                         4     0      4     416
                                              4 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _HighISR                                             2     2      0      22
                                              2 COMRAM     2     2      0
                   _getCharFromTxBuf
                     _putCharToRxBuf
                    i2_isDataInTxBuf
 ---------------------------------------------------------------------------------
 (11) i2_isDataInTxBuf                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _putCharToRxBuf                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (11) _getCharFromTxBuf                                    2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DCmotorsInit
   ___fldiv
     ___flmul (ARG)
       ___flsub (ARG)
         ___fladd
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___flsub (ARG)
     ___xxtofl (ARG)
   ___flge
     ___flsub (ARG)
   ___xxtofl
   _ambientCal
     _getColor
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_read_Clear
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
   _colorDetect
     ___fldiv
     ___flge
     ___flmul
     ___flsub
     ___xxtofl
     _getColor
     _reverseSquareLeft
       _reverse
         _setMotorPWM
           ___lwdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
       _turnLeft_90
         _reverse
         _setMotorPWM
         _stop
     _reverseSquareRight
       _reverse
       _stop
       _turnRight_90
         _reverse
         _setMotorPWM
         _stop
     _turnLeft_135
       _reverse
       _setMotorPWM
       _stop
     _turnLeft_90
     _turnRight_135
       _reverse
       _setMotorPWM
       _stop
     _turnRight_90
     _turn_180
       _reverse
       _setMotorPWM
       _stop
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _forward
     _setMotorPWM
   _getColor
   _initDCmotorsPWM
   _initUSART4
   _return_home_turns
     _TxBufferedString
       _putCharToTxBuf
     _forward
     _sendTxBuf
       _isDataInTxBuf
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
           _fputc
     _stop
     _turnLeft_135
     _turnLeft_90
     _turnRight_135
     _turnRight_90
     _turn_180
   _stop
   _turn_180
   _whiteCal
     _getColor

 _HighISR (ROOT)
   _getCharFromTxBuf
   _putCharToRxBuf
   i2_isDataInTxBuf

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      62        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100     C8      C8      11       78.1%
BITBANK2           100      0       0       8        0.0%
BANK2              100     C8      C8       9       78.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100     9A      F6       7       96.1%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     70      91       5       90.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     56      5A       1       95.7%
BITBIGSFRlhhhhl     52      0       0      42        0.0%
BITBIGSFRlhhhll     37      0       0      44        0.0%
BITBIGSFRlllhlh     2A      0       0      55        0.0%
BITBIGSFRlllll      26      0       0      60        0.0%
BITBIGSFRlhhhll     20      0       0      47        0.0%
BITBIGSFRlhhhll     1E      0       0      49        0.0%
BITBIGSFRhhhhhh     1B      0       0      33        0.0%
BITBIGSFRhhhhll     17      0       0      38        0.0%
BITBIGSFRhhhhhl     13      0       0      34        0.0%
BITBIGSFRlhhl       11      0       0      50        0.0%
BITBIGSFRhhhhlh      E      0       0      35        0.0%
BITBIGSFRhhhhhh      D      0       0      32        0.0%
BITBIGSFRlhhhll      C      0       0      48        0.0%
BITBIGSFRlllhll      9      0       0      57        0.0%
BITBIGSFRlllhlh      9      0       0      56        0.0%
BITBIGSFRlhhhll      8      0       0      45        0.0%
BITBIGSFRllllh       6      0       0      59        0.0%
BITBIGSFRlllhh       6      0       0      54        0.0%
BITBIGSFRlllhll      5      0       0      58        0.0%
BITBIGSFRllhl        5      0       0      53        0.0%
BITBIGSFRhhhhll      5      0       0      39        0.0%
BITBIGSFRllhh        3      0       0      52        0.0%
BITBIGSFRlhhhlh      2      0       0      43        0.0%
BITBIGSFRhhhhll      2      0       0      37        0.0%
BITBIGSFRlhhhhh      1      0       0      41        0.0%
BITBIGSFRlhhhll      1      0       0      46        0.0%
BITBIGSFRhhhhlh      1      0       0      36        0.0%
BITBIGSFRlhl         1      0       0      51        0.0%
BITBIGSFRhhll        1      0       0      40        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     371      61        0.0%
DATA                 0      0     371       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Thu Dec 15 08:49:06 2022

                  _color_read_Red 47EA                      ___fldiv@aexp 004E  
                    ___fldiv@bexp 004D                      ___fldiv@sign 0046  
                 _color_read_Blue 48DA                                l61 4AB2  
                              l70 4888                                l64 4C28  
                              l73 4928                                l67 4838  
                              l76 48D8                                l84 4044  
                              l79 4742                                l89 3F60  
             ___wmul@multiplicand 0007        __end_of_reverseSquareRight 44D2  
                _color_read_Clear 488A                  _color_read_Green 483A  
                             l110 19F2                               l131 2F04  
                             l204 3484                               l116 19FA  
                             l214 443A                               l135 2FDC  
                             l312 4BBC                               l224 411A  
                             l321 4C9C                               l330 4A3E  
                             l234 41F0                               l315 4BE2  
                             l324 4C88                               l252 3B00  
                             l309 4B90                               l318 4C92  
                             l270 3C3C                               l327 4C7E  
                             l264 3884                               l282 4566  
                             l258 39C2                               l194 45F6  
                             l531 4C5A                               l276 3D78  
                             l197 42C2                               l541 4C42  
                             l279 44D0                               l528 4B66  
                             l553 4C08                               l537 4AE2  
                             l823 3E7C                               l488 4B10  
                             l680 35E8                               l818 3E36  
                             l667 3318                               _abs 4A40  
                             _pad 45F8                               wreg 000FE8  
                    ___flmul@aexp 002E                      ___flmul@bexp 002F  
                    ___flmul@sign 0029                      ___flmul@temp 0034  
                    ___flmul@prod 0030              reverseSquareRight@mL 0024  
            reverseSquareRight@mR 0026                              l1107 1DD4  
                            l1123 49B8                              l1211 3190  
                            l1051 46E4                              ?_abs 0017  
                            l1140 2914                              l1108 1DC2  
                            l1044 46DC                              l1222 3128  
                            l1135 2AF0                              l1215 30CC  
                            l1231 47E8                              l1208 3034  
                            l1137 2950                              l1081 1BEA  
                            l1146 2996                              l1090 1EBA  
                            l1082 1BD8                              l1171 2756  
                            l1083 1B9E                              l1148 2A0E  
                            l1308 438C                              l1316 49FC  
                            l1149 29FC                              l1253 461A  
                            l1174 25E8                              l1262 2B7E  
                            l1167 23F2                              l1319 4CA2  
                            l1184 2718                              l1176 2660  
                            l1264 2B86                              l4001 29B4  
                            l1177 264E                              l1257 4670  
                            l1265 2BCC                              l1098 1D04  
                            l4011 2A1E                              l4003 29B8  
                            l1283 3746                              l1276 2D6E  
                            l4021 2A80                              l4013 2A2A  
                            l4005 29C6                              l4101 24A8  
                            l1293 4A76                              l4031 2ADE  
                            l4023 2A96                              l4015 2A38  
                            l4007 29F4                              l4111 24FE  
                            l4103 24B8                              l3231 469C  
                            l3223 4672                              l1296 4A7E  
                            l4033 2AE4                              l4025 2AB0  
                            l4017 2A62                              l4121 25A2  
                            l4113 251A                              l4105 24C4  
                            l4201 2FE0                              l3241 46D0  
                            l3233 46AA                              l3225 467A  
                            l3137 4BE4                              l5001 2B56  
                            l1289 4796                              l4035 2AE6  
                            l4027 2ACC                              l4019 2A66  
                            l4131 25F8                              l4123 25B0  
                            l4115 2526                              l4107 24D4  
                            l4051 235A                              l4043 232E  
                            l4203 2FF0                              l3243 46D6  
                            l3235 46B0                              l3227 468C  
                            l3139 4C00                              l5011 2BB4  
                            l5003 2B72                              l3341 4C7A  
                            l4029 2AD0                              l4133 2606  
                            l4125 25CE                              l4117 2542  
                            l4109 24EE                              l4061 2396  
                            l4053 236A                              l4045 233A  
                            l4221 30B6                              l4213 306E  
                            l4205 2FFE                              l3237 46C6  
                            l3229 4694                              l3501 3A74  
                            l5101 0E44                              l5021 2BE4  
                            l5013 2BC0                              l5005 2B8E  
                            l3351 4A00                              l3335 4C8A  
                            l3343 4C80                              l3431 47EA  
                            l4143 2670                              l4151 26B8  
                            l4135 260A                              l4127 25D8  
                            l4119 256C                              l4071 23CC  
                            l4063 239C                              l4055 237A  
                            l4047 2348                              l4231 3136  
                            l4223 30C2                              l4215 3076  
                            l4207 3044                              l3239 46CE  
                            l3271 33A2                              l3263 331A  
                            l3511 3AD4                              l3503 3A8C  
                            l5111 0F10                              l5103 0E5A  
                            l5031 2CF0                              l5023 2C66  
                            l5015 2BC8                              l5007 2B9E  
                            l3281 4BCC                              l3361 4A3C  
                            l3353 4A04                              l3337 4C8E  
                            l3345 4C84                              l3433 4830  
                            l4161 272C                              l4153 26D2  
                            l4145 267C                              l4137 2618  
                            l4129 25E6                              l4073 23DC  
                            l4065 23AA                              l4057 2380  
                            l4049 234A                              l3601 1B34  
                            l4241 317E                              l4233 3138  
                            l4225 30FE                              l4217 3082  
                            l4209 305A                              l3273 33E4  
                            l3265 3336                              l3513 3AEC  
                            l3505 3A98                              l5201 1704  
                            l5121 114C                              l5113 0F38  
                            l5105 0E6E                              l3521 4B64  
                            l5041 2D4E                              l5033 2D0E  
                            l5025 2C6C                              l5017 2BD4  
                            l5009 2BA4                              l3355 4A0C  
                            l3347 4C94                              l3339 4C76  
                            l3443 48DA                              l3451 48D0  
                            l4163 273A                              l4155 26E6  
                            l4147 268A                              l4139 2646  
                            l4091 245E                              l4083 2426  
                            l4075 23E2                              l4067 23AC  
                            l4059 2390                              l3611 1B86  
                            l3603 1B38                              l3531 1A16  
                            l4243 3180                              l4235 313C  
                            l4227 310A                              l4219 30B4  
                            l3275 3400                              l3267 338A  
                            l3371 43B6                              l3507 3AA4  
                            l5211 17DA                              l5203 1712  
                            l5131 11E0                              l5123 115A  
                            l5115 0FE6                              l5107 0EA0  
                            l4251 4A8E                              l3515 4B40  
                            l3523 4C44                              l5035 2D28  
                            l5027 2C72                              l5019 2BDE  
                            l5051 362E                              l3357 4A14  
                            l3349 4C98                              l3445 4920  
                            l3437 483A                              l4181 3DA8  
                            l4165 273C                              l4157 2700  
                            l4149 26B4                              l4093 2476  
                            l4085 2432                              l4077 2402  
                            l4069 23BC                              l3701 1DFE  
                            l3621 1BCA                              l3613 1B96  
                            l3605 1B3C                              l3541 1A4A  
                            l3533 1A18                              l4173 4974  
                            l4237 3160                              l4229 3118  
                            l3277 3444                              l3269 339E  
                            l3381 440A                              l3373 43CE  
                            l3365 438E                              l3509 3ABC  
                            l3461 38DE                              l5213 180C  
                            l5205 1744                              l5221 184A  
                            l5141 1278                              l5133 11F2  
                            l5125 118C                              l5117 1094  
                            l5109 0ED8                              l4253 4A9E  
                            l3517 4B50                              l5037 2D38  
                            l5029 2CD6                              l5061 36D8  
                            l5053 3632                              l5045 35EA  
                            l3279 4BBC                              l3359 4A3A  
                            l3439 4880                              l4271 3FE6  
                            l4263 3F6A                              l4191 3E16  
                            l4183 3DB8                              l4159 271C  
                            l4167 2742                              l4095 2482  
                            l4087 243C                              l4079 2412  
                            l3711 1E7A                              l3703 1E38  
                            l3623 1BCC                              l3615 1BAC  
                            l3607 1B40                              l3551 1A7C  
                            l3535 1A28                              l3543 1A52  
                            l3527 19FC                              l4175 4984  
                            l4239 3170                              l3391 4184  
                            l3383 4422                              l3375 43DA  
                            l3367 4392                              l3471 3936  
                            l3463 38F2                              l3455 3886  
                            l5231 1902                              l5223 187C  
                            l5215 181A                              l5207 1776  
                            l5151 1372                              l5143 12AA  
                            l5135 1202                              l5127 119E  
                            l5119 1142                              l4255 4AA8  
                            l4247 4A80                              l4511 4578  
                            l3519 4B54                              l5039 2D3E  
                            l5055 3642                              l5047 3612  
                            l5311 1ED0                              l3449 488A  
                            l4273 3FFE                              l4265 3F8C  
                            l4257 3F62                              l4193 3E24  
                            l4185 3DE6                              l4169 2746  
                            l4097 248E                              l4089 2452  
                            l3721 1E9A                              l3713 1E7E  
                            l3705 1E3A                              l3641 1C54  
                            l3633 1C1C                              l3625 1BD6  
                            l3617 1BB8                              l3609 1B6A  
                            l3561 1AB2                              l3553 1A82  
                            l3545 1A62                              l3537 1A38  
                            l3529 1A08                              l3393 419C  
                            l3385 411C                              l3377 43E6  
                            l3369 43AA                              l3801 4512  
                            l3481 3996                              l3473 394E  
                            l3465 3902                              l3457 389A  
                            l5241 19B4                              l5233 1910  
                            l5225 18AE                              l5217 182E  
                            l5209 17A8                              l5153 13C8  
                            l5161 1406                              l5145 12DC  
                            l5137 1234                              l5129 11AE  
                            l4249 4A84                              l4521 45DC  
                            l4513 45A2                              l5065 3708  
                            l5057 3662                              l5049 3620  
                            l5081 478C                              l5401 1FA4  
                            l5321 1EDA                              l5313 1ED2  
                            l5305 1EBC                              l4531 41F2  
                            l4275 400A                              l4267 3FA8  
                            l4195 3E74                              l4187 3DF6  
                            l4179 3D7A                              l4099 249C  
                            l3723 1EA8                              l3715 1E8C  
                            l3707 1E4A                              l3643 1C58  
                            l3635 1C2C                              l3627 1BF8  
                            l3651 1C78                              l3619 1BBC  
                            l3571 1AEE                              l3563 1AC2  
                            l3555 1A90                              l3547 1A68  
                            l3539 1A48                              l3387 4160  
                            l3395 41A8                              l3379 43F2  
                            l3491 3A1C                              l3803 4526  
                            l3483 39AE                              l3475 395A  
                            l3467 3912                              l3459 38B2  
                            l3811 3B5A                              l5243 19C2  
                            l5227 18E0                              l5235 191E  
                            l5219 183C                              l5171 1506  
                            l5163 145C                              l5155 13D6  
                            l5147 12EA                              l5139 1246  
                            l4523 45DE                              l4515 45C6  
                            l5059 3682                              l5075 4744  
                            l5091 47BA                              l4291 3EE0  
                            l5411 2074                              l5403 1FEC  
                            l5331 1EE4                              l5323 1EDC  
                            l5315 1ED4                              l5307 1EC0  
                            l4541 4246                              l4533 41FE  
                            l4277 4022                              l4269 3FC4  
                            l4197 3E7A                              l4189 3E04  
                            l3725 1EAA                              l3717 1E92  
                            l3709 1E5A                              l3653 1C9E  
                            l3661 1CF4                              l3645 1C66  
                            l3637 1C3A                              l3629 1C08  
                            l3581 1B0C                              l3573 1AFC  
                            l3565 1AC4                              l3557 1A92  
                            l3549 1A7A                              l3397 41C0  
                            l3389 4178                              l3493 3A30  
                            l3485 39C4                              l3477 3966  
                            l3469 3922                              l3821 3BB2  
                            l3813 3B6E                              l3805 3B02  
                            l5245 19D6                              l5237 1950  
                            l5229 18EE                              l5181 1600  
                            l5173 1514                              l5165 148E  
                            l5157 13EA                              l5149 131C  
                            l3741 4B72                              l4525 45E8  
                            l4517 45D0                              l4509 4568  
                            l3901 40EA                              l5069 371A  
                            l5077 4750                              l5093 47D6  
                            l5085 4798                              l5261 2D9E  
                            l5253 2D70                              l4293 3F02  
                            l4285 3E86                              l5421 215C  
                            l5413 2096                              l5405 1FF8  
                            l5341 1EEE                              l5333 1EE6  
                            l5325 1EDE                              l5317 1ED6  
                            l5309 1EC4                              ?_pad 0015  
                            l4543 425A                              l4535 420E  
                            l3911 2774                              l3719 1E94  
                            l3671 1D48                              l3663 1D1A  
                            l3655 1CD2                              l3647 1C68  
                            l3639 1C48                              l3591 1B20  
                            l3583 1B10                              l3575 1B00  
                            l3559 1AA2                              l3567 1ACC  
                            l3399 41D8                              l3495 3A40  
                            l3487 39D8                              l3479 397E  
                            l3831 3C12                              l3823 3BCA  
                            l3815 3B7E                              l3807 3B16  
                            l5247 19E4                              l5239 1982  
                            l5191 1670                              l5183 160E  
                            l5167 14E4                              l5175 1522  
                            l5159 13F8                              l3743 4B78  
                            l3751 4C0C                              l4527 45EA  
                            l4519 45D2                              l4551 4AF4  
                            l3903 4102                              l5079 476C  
                            l5087 47AA                              l5271 2E3E  
                            l5263 2E00                              l5255 2D78  
                            l4295 3F1A                              l4287 3EA8  
                            l4279 3E7E                              l5431 21C8  
                            l5423 2174                              l5415 20DC  
                            l5407 2040                              l5351 1EF8  
                            l5343 1EF0                              l5335 1EE8  
                            l5327 1EE0                              l5319 1ED8  
                            l4537 421E                              l3753 46E6  
                            l3913 2784                              l3921 27AE  
                            l3905 2758                              l3681 1D72  
                            l3673 1D56                              l3665 1D2A  
                            l3657 1CD4                              l3649 1C72  
                            l3593 1B24                              l3585 1B14  
                            l3577 1B04                              l3569 1ADC  
                            l3497 3A50                              l3489 39F0  
                            l3841 3C96                              l3833 3C28  
                            l3825 3BD6                              l3817 3B8E  
                            l3809 3B2E                              l3761 37A0  
                            l5193 16A2                              l5185 1622  
                            l5177 1578                              l5169 14F2  
                            l5249 19F2                              l5097 0E28  
                            l3745 4B7A                              l4529 45F4  
                            l4561 4B06                              l4553 4AF6  
                            l4545 4AE4                              l5089 47B2  
                            l5281 2E86                              l5273 2E56  
                            l5265 2E0C                              l4297 3F26  
                            l4289 3EC4                              l5433 21DC  
                            l5441 2214                              l5425 21A8  
                            l5417 210E                              l5409 204C  
                            l5361 1F02                              l5353 1EFA  
                            l5345 1EF2                              l5337 1EEA  
                            l5329 1EE2                              l4539 4232  
                            l3931 27DA                              l3923 27BE  
                            l3915 2794                              l3907 2764  
                            l3691 1DA4                              l3683 1D82  
                            l3675 1D58                              l3659 1CE4  
                            l3595 1B28                              l3587 1B18  
                            l3579 1B08                              l3499 3A60  
                            l3851 3CEE                              l3843 3CAA  
                            l3835 3C3E                              l3827 3BE2  
                            l3819 3B9E                              l3771 37F8  
                            l3763 37B4                              l3755 3748  
                            l5195 16D4                              l5187 1630  
                            l5179 15CE                              l5099 0E34  
                            l3747 4B7C                              l3739 4B68  
                            l4563 4B08                              l4555 4AF8  
                            l4547 4AEA                              l5291 2F24  
                            l5283 2E9E                              l5267 2E10  
                            l5259 2D8C                              l4299 3F3E  
                            l5451 2276                              l5443 222E  
                            l5435 21DE                              l5427 21AC  
                            l5419 2120                              l5371 1F0C  
                            l5363 1F04                              l5355 1EFC  
                            l5347 1EF4                              l5339 1EEC  
                            l3933 27EA                              l3941 2814  
                            l3925 27C4                              l3917 27A4  
                            l3909 2772                              l3693 1DBA  
                            l3677 1D66                              l3669 1D3E  
                            l3685 1D84                              l3597 1B2C  
                            l3589 1B1C                              l3861 3D4E  
                            l3853 3D06                              l3845 3CBA  
                            l3837 3C52                              l3829 3BFA  
                            l3781 3858                              l3773 3810  
                            l3765 37C4                              l3757 375C  
                            l5197 16E2                              l5189 163E  
                            l3749 4B7E                              l4565 4B0A  
                            l4557 4B02                              l4549 4AF2  
                            l4901 31C4                              l5285 2EB2  
                            l5269 2E26                              l5461 22E2  
                            l5453 228A                              l5445 2248  
                            l5437 21E0                              l5429 21B4  
                            l5381 1F38                              l5373 1F0C  
                            l5365 1F08                              l5357 1EFE  
                            l5349 1EF6                              l3951 2856  
                            l3943 2824                              l3935 27FA  
                            l3927 27CA                              l3919 27A6  
                            l3679 1D6E                              l3687 1D92  
                            l3599 1B30                              l3791 447C  
                            l3863 3D64                              l3855 3D12  
                            l3847 3CCA                              l3839 3C6A  
                            l3783 3870                              l3775 381C  
                            l3767 37D4                              l3759 3774  
                            l5199 16F6                              l4567 4B0C  
                            l4559 4B04                              l4911 3206  
                            l4903 31C8                              l5287 2EE6  
                            l5279 2E6E                              l5295 2F3C  
                            l5463 22FA                              l5455 22AE  
                            l5447 224C                              l5439 220E  
                            l5391 1F6C                              l5383 1F38  
                            l5375 1F12                              l5367 1F0A  
                            l5359 1F00                              l3945 283A  
                            l3937 280A                              l3929 27D8  
                            l3697 1DE4                              l3689 1D96  
                            l3793 4490                              l3785 443C  
                            l3857 3D1E                              l3849 3CDA  
                            l3777 3828                              l3769 37E4  
                            l4569 4B0E                              l3881 4AC6  
                            l4921 3260                              l4913 3224  
                            l4905 31D6                              l5289 2EEC  
                            l5297 2FAE                              l5457 22B6  
                            l5449 2264                              l5393 1F70  
                            l5385 1F44                              l5377 1F26  
                            l5369 1F0C                              l3971 28D8  
                            l3963 288E                              l3947 284A  
                            l3955 286A                              l3939 280C  
                            l3699 1DF0                              l3795 44D2  
                            l3787 4450                              l3859 3D36  
                            l3779 3840                              l3883 4ACA  
                            l3891 408A                              l4923 328E  
                            l4915 322C                              l4931 32C8  
                            l4907 31F6                              l5299 2FC6  
                            l5459 22CA                              l5395 1F88  
                            l5387 1F50                              l5379 1F30  
                            l3981 291E                              l3973 28E0  
                            l3965 28A8                              l3957 287A  
                            l3949 2852                              l3797 44E6  
                            l3789 4468                              l3877 4AB4  
                            l3893 40A2                              l3885 4C2A  
                            l4933 32D8                              l4925 32AE  
                            l4917 3240                              l4909 31FA  
                            l4941 348A                              l5397 1F8A  
                            l5389 1F5E                              l3991 2976  
                            l3983 293C                              l3975 28F0  
                            l3967 28B8                              l3959 287A  
                            l3799 44FE                              l3879 4AB8  
                            l3895 40AE                              l3887 4C3E  
                            l4935 32F8                              l4927 32B0  
                            l4919 324E                              l4951 34EA  
                            l4943 3498                              l5399 1F8C  
                            l3993 297C                              l3985 293E  
                            l3977 2904                              l3969 28C8  
                            l3897 40C6                              l3889 4046  
                            l4929 32C2                              l4961 3560  
                            l4953 3508                              l4945 34B8  
                            l4881 4310                              l4873 42C4  
                            l5489 2F68                              l3995 2986  
                            l3987 294E                              l3979 2912  
                            l3899 40D2                              l4971 35C8  
                            l4963 3580                              l4955 3510  
                            l4947 34BC                              l4939 3486  
                            l4883 4346                              l4875 42D6  
                            l4891 49D8                              l3997 2994  
                            l3989 2960                              l4965 3592  
                            l4957 3524                              l4949 34CA  
                            l4877 42E8                              l4893 49DC  
                            l4981 4626                              l3999 29A6  
                            l4895 3192                              l4959 3532  
                            l4967 3598                              l4991 4A5A  
                            l4879 42F2                              l4887 49BA  
                            l4983 463A                              l4975 45F8  
                            l4897 3196                              l4969 35A8  
                            l4889 49C6                              l4985 463E  
                            l4977 4606                              l4993 2AF2  
                            l4899 31A4                              l4987 465C  
                            l4979 4612                              l4995 2B12  
                            l4989 4A40                              l4997 2B26  
                            l4999 2B36                              STR_1 0E01  
                            STR_2 0E17                              u3000 4A28  
                            u3001 4A20                              u3020 43AA  
                            u3021 43A6                              u3030 43CE  
                            u3031 43CA                              u4000 23CC  
                            u3200 1A16                              u3040 440A  
                    _BAUD4CONbits 000EE9                              u4001 23C8  
                            u3201 1A12                              u3041 4406  
                            u3018 4A2A                              u4010 2402  
                            u3210 1A28                              u3050 4422  
                            u3130 397E                              u4011 23FE  
                            u3211 1A24                              u3051 441E  
                            u3131 397A                              u4100 268A  
                            u4020 2412                              u3300 1B82  
                            u3220 1A38                              u3060 4178  
                            u3140 3996                              u4101 2686  
                            u4021 240E                              u3301 1B7C  
                            u3221 1A34                              u3061 4174  
                            u3141 3992                              u4110 26D2  
                            u4030 258C                              u3310 1B84  
                            u3230 1A7A                              u3070 419C  
                            u3150 3ABC                              u4111 26CE  
                            u3231 1A76                              u3071 4198  
                            u3151 3AB8                              u4120 2700  
                            u4040 25E6                              u3400 1C9E  
                            u3320 1BAC                              u3240 1A90  
                            u4200 2FFE                              u3080 41C0  
                            u3160 3AD4                              u4121 26FC  
                            u4041 25E2                              u3401 1C9A  
                            u3321 1BA8                              u3241 1A8C  
                            u4201 2FFA                              u3081 41BC  
                            u3161 3AD0                              u4130 273A  
                            u4050 2606                              u3410 1CE4  
                            u3330 1BCA                              u3250 1AA2  
                            u4210 305A                              u3090 41D8  
                            u3170 4B50                              _T2PR 000FBC  
                            u4131 2736                              u4051 2602  
                            u4035 2582                              u3411 1CE0  
                            u3331 1BC6                              u3251 1A9E  
                            u4211 3056                              u3091 41D4  
                            u3171 4B4C                              u4140 3DA8  
                            u4060 2618                              u3500 1DD0  
                            u3420 1D1A                              u3340 1BEA  
                            u3260 1AB2                              u4220 30B0  
                            u3180 4C58                              u4141 3DA4  
                            u4061 2614                              u3501 1DCC  
                            u3421 1D16                              u3341 1BE6  
                            u3261 1AAE                              u4221 30AC  
                            u3181 4C52                              u4310 3FC4  
                            u4150 3DE6                              u4070 2646  
                            u3510 1DE4                              u3430 1D2A  
                            u3350 1BF8                              u3270 1AEE  
                            u4230 30FA                              u3190 4C5A  
                            u4311 3FC0                              u4151 3DE2  
                            u4071 2642                              u3511 1DE0  
                            u3431 1D26                              u3351 1BF4  
                            u3271 1AEA                              u4231 30F6  
                            u4320 3FD6                              u4160 3E04  
                            u4080 265C                              u3520 1DFE  
                            u3440 1D56                              u3360 1C08  
                            u3280 1AFC                              u4240 3118  
                            u2800 468C                              u3600 3840  
                            u5200 4310                              u6000 2060  
                            u4321 3FCE                              u4161 3E00  
                            u4081 2658                              u3521 1DFA  
                            u3441 1D52                              u3361 1C04  
                            u3281 1AF8                              u4241 3114  
                            u2801 4688                              u3601 383C  
                            u5201 430C                              u6001 2056  
                            u4170 3E24                              u4090 2670  
                            u3530 1E38                              u3450 1D66  
                            u3370 1C3A                              u3290 1B6A  
                            u4250 3128                              u2810 46AA  
                            u3610 3858                              u5210 4346  
                            u4410 3F50                              u4171 3E20  
                            u4091 266C                              u3531 1E34  
                            u3451 1D62                              u3371 1C36  
                            u3291 1B66                              u4251 3124  
                            u2811 46A6                              u3611 3854  
                            u5211 4342                              u4411 3F48  
                            u4340 4034                              u4308 3F7E  
                            u4180 3E74                              u3540 1E4A  
                            u3460 1D82                              u3380 1C48  
                            u4260 3136                              u2820 46C6  
                            u3620 3BFA                              u3700 40EA  
                            u5300 3498                              u5220 49FC  
                            u6020 210E                              u4341 402C  
                            u4181 3E70                              u3541 1E46  
                            u3461 1D7E                              u3381 1C44  
                            u4261 3132                              u2821 46C2  
                            u3621 3BF6                              u3701 40E6  
                            u5301 3494                              u5221 49F8  
                            u6021 210A                              u3550 1E5A  
                            u3470 1D92                              u3390 1C66  
                            u4270 3170                              u4190 2FF0  
                            u3630 3C12                              u3710 4102  
                            u5230 31A4                              u5310 34CA  
                            u6030 2120                              u3551 1E56  
                            u3471 1D8E                              u3391 1C62  
                            u4271 316C                              u4191 2FEC  
                            u3631 3C0E                              u3711 40FE  
                            u5231 31A0                              u5311 34C6  
                            u6031 211C                              u3800 28F0  
                            u3720 2772                              u3560 1E7A  
                            u3480 1DA4                              u4280 317E  
                            u3640 3D36                              u5240 31D6  
                            u5320 3508                              u5400 2B24  
                            u4408 3EF4                              u4360 3E98  
                            u6040 2174                              u3801 28EC  
                            u3721 276E                              u3561 1E76  
                            u3481 1DA0                              u4281 317A  
                            u3641 3D32                              u5241 31D2  
                            u5321 3504                              u4361 3E90  
                            u6041 2170                              u4338 3FD8  
                            u4290 3F7C                              u3810 2912  
                            u3730 2784                              u3570 1E8C  
                            u3490 1DBA                              u3650 3D4E  
                            u5330 3532                              u5410 2B36  
                            u6050 21C8                              u6018 2064  
                            u4291 3F74                              u3811 290E  
                            u3731 2780                              u3571 1E88  
                            u3491 1DB6                              u3651 3D4A  
                            u5251 3200                              u5331 352E  
                            u5411 2B32                              u6051 21C4  
                            u6107 1F7C                              u3900 2A1E  
                            u3820 293C                              u3740 2794  
                            u3580 1EA8                              u2860 3336  
                            u3660 4AE2                              u5260 3224  
                            u5340 3560                              u5180 42D6  
                            u5420 2B72                              u5500 3662  
                            u4428 3F52                              u4380 3EE0  
                            u6060 2276                              u3901 2A1A  
                            u3821 2938                              u3741 2790  
                            u3581 1EA4                              u2861 3332  
                            u3661 4ADE                              u5261 3220  
                            u5341 355C                              u5181 42D2  
                            u5421 2B6E                              u5501 365E  
                            u4381 3EDC                              u6061 2272  
                            u6117 2258                              u4358 4036  
                            u3910 2A38                              u3830 2960  
                            u3750 27D8                              u2870 3400  
                            u3670 4C3E                              u5270 324E  
                            u5350 35A8                              u5190 42E8  
                            u5430 2B9E                              u5510 3682  
                            u4390 3EF2                              u6070 229E  
                            u3911 2A34                              u3831 295C  
                            u3751 27D4                              u2871 33FC  
                            u6207 4A94                              u3671 4C3A  
                            u5271 324A                              u5351 35A4  
                            u5191 42E4                              u5431 2B9A  
                            u5511 367E                              u4391 3EEA  
                            u6127 22D6                              u6071 2294  
                            u2880 4BCC                              u3920 2A80  
                            u3840 2976                              u3760 27EA  
                            u5600 12AA                              u3680 40A2  
                            u5280 328E                              u5360 4606  
                            u5440 2BB4                              u5520 478C  
                            u2881 4BC8                              u3921 2A7C  
                            u3841 2972                              u3761 27E6  
                            u6217 13CE                              u5601 12A6  
                            u3681 409E                              u5281 328A  
                            u5361 4602                              u5441 2BB0  
                            u5521 4788                              u6137 3EB2  
                            u2890 4BE2                              u3930 2AB0  
                            u3850 2994                              u3770 27FA  
                            u5610 12DC                              u5530 115A  
                            u3690 40C6                              u5290 32D8  
                            u5370 465C                              u5450 2CF0  
                            u4378 3E9A                              u6090 22FA  
                            u2891 4BDE                              u3931 2AAC  
                            u3851 2990                              u3771 27F6  
                            u6307 1834                              u6227 13F0  
                            u5611 12D8                              u5531 1156  
                            u3691 40C2                              u5291 32D4  
                            u5371 4658                              u5451 2CEC  
                            u6147 3F0C                              u6091 22F6  
                            u3940 2ADE                              u3860 29B4  
                            u3780 283A                              u5700 1600  
                            u5620 131C                              u5540 118C  
                            u5380 4A5A                              u5460 2D0E  
                            u3941 2ADA                              u3861 29B0  
                            u3781 2836                              u6317 18E6  
                            u5701 15FC                              u6237 14EA  
                            u5621 1318                              u5541 1188  
                            u5381 4A56                              u5461 2D0A  
                            u6157 3F30                              u3870 29C6  
                            u3790 287A                              u3950 2348  
                            u5710 1670                              u5630 1372  
                            u5550 11AE                              u5470 2D28  
                            u5390 2B22                              u3871 29C2  
                            u3791 2876                              u3951 2344  
                            u6407 3C1C                              u6327 1908  
                            u5711 166C                              u6247 150C  
                            u5631 136E                              u5551 11AA  
                            u5471 2D24                              u5391 2B1C  
                            u6167 2D94                              u3880 29F4  
                            u3960 235A                              u5800 18AE  
                            u5720 16A2                              u5640 13C8  
                            u5560 11E0                              u5480 2D38  
                            u6088 22A2                              u3881 29F0  
                            u3961 2356                              u6417 3C5C  
                            u6337 19BA                              u5801 18AA  
                            u5721 169E                              u6257 1606  
                            u5641 13C4                              u5561 11DC  
                            u5481 2D34                              u6177 2E18  
                            u3890 2A0A                              u3970 236A  
                            u5810 18E0                              u5730 16D4  
                            u5650 145C                              u5570 1202  
                            u5490 3612                              u3891 2A06  
                            u3971 2366                              u6507 4530  
                            u6427 3C88                              u6347 19DC  
                            u5811 18DC                              u5731 16D0  
                            u6267 1628                              u5651 1458  
                            u5571 11FE                              u5491 360E  
                            u6187 2EF8                              u3980 23AA  
                            u5820 1950                              u5740 1744  
                            u5660 148E                              u5580 1234  
                            u5900 1FA0                              u3981 23A6  
                            u6517 39E2                              u6437 3D58  
                            u6357 3766                              u5821 194C  
                            u5741 1740                              u6277 16DA  
                            u5661 148A                              u5581 1230  
                            u6197 2FBA                              u5901 1F9A  
                            u3990 23BC                              u5830 1982  
                            u5750 1776                              u5670 14E4  
                            u5590 1278                              u5910 1FA2  
                            u3991 23B8                              u6527 3A0E  
                            u6447 445A                              u6367 3792  
                            u5831 197E                              u5751 1772  
                            u6287 16FC                              u5671 14E0  
                            u5591 1274                              u5840 19B4  
                            u5760 17A8                              u5680 1578  
                            u5920 1FB4                              u6537 3ADE  
                            u6457 449A                              u6377 3862  
                            u5841 19B0                              u6297 1812  
                            u5761 17A4                              u5681 1574  
                            u5921 1FAE                              u5770 17DA  
                            u5690 15CE                              u5850 2D88  
                            u5930 1FB6                              u6547 442C  
                            u6467 38A4                              u6387 3B20  
                            u5771 17D6                              u5691 15CA  
                            u5851 2D84                              u5780 180C  
                            u5860 2F20                              u5940 1FCE  
                            u6557 3F96                              u6477 38D0  
                            u6397 3B4C                              u5781 1808  
                            u5861 2F1C                              u5941 1FC6  
                            u5790 187C                              u5870 2FDC  
                            u5950 1FEC                              u6567 3FF0  
                            u6487 39A0                              u5791 1878  
                            u5871 2FD8                              u5951 1FE8  
                            u5960 2008                              u5880 1F5E  
                            u6577 4014                              u6497 44F0  
                            u5961 2002                              u5881 1F5A  
                            u5970 200A                              u5890 1F6C  
                            u5891 1F68                              u5980 2022  
                            u5948 1FD2                              u5981 201A  
                            u5990 2040                              u5991 203C  
                            u5988 2026                              abs@a 0017  
                            _dbuf 01D6                              _main 1EBC  
                            _dtoa 2AF2                              _prec 00E6  
                            pad@i 001C                              pad@p 0019  
                            fsr1h 000FE2                              fsr2h 000FDA  
                            indf2 000FDF                              fsr1l 000FE1  
                            pad@w 001E                              fsr2l 000FD9  
                            btemp 005B                              _stop 438E  
                            prodh 000FF4                              prodl 000FF3  
                            start 0076                   ___fldiv@new_exp 0047  
                main@turn_history 0200            __end_of_color_read_Red 483A  
                 __end_of_HighISR 0076                      ___param_bank 000000  
                     _turnLeft_90 39C4                      main@clearRef 009B  
                           ??_abs 0019                             ??_pad 001B  
                    main@colorNum 00A1                   __end_of___aodiv 331A  
                 __end_of___fladd 1EBC                             ?_main 0001  
                           ?_dtoa 0020                   __end_of___aomod 35EA  
                 __end_of___fldiv 2AF2                   __end_of___flmul 2758  
                 __end_of___flsub 49BA                             ?_stop 0018  
                 __end_of___lwdiv 46E6                             i2l531 4C72  
                           i2l524 4B3C                             i2l517 4BBA  
                           i2l550 006A                             i2l548 0066  
                    vfpfcnvrt@fmt 0045                             _TMR0H 000FD4  
                           _TMR0L 000FD3        __end_of_I2C_2_Master_Start 4C94  
      __end_of_I2C_2_Master_Write 4C80                             _flags 00EC  
                           _fputc 42C4                   __end_of_forward 411C  
                           _fputs 49BA                             pad@fp 0015  
                           _width 00E4                             _putch 4CA2  
                           dtoa@d 0022                             dtoa@i 0041  
                           dtoa@n 0038                             dtoa@p 0034  
                           dtoa@s 0040                             dtoa@w 0036  
                           tablat 000FF5                   __end_of_reverse 41F2  
                           ttemp5 005C                             ttemp6 005F  
                           ttemp7 0063                             status 000FD8  
                           wtemp8 005C                   __end_of_sprintf 47EA  
         __end_of_color_read_Blue 492A             _I2C_2_Master_RepStart 4C94  
              putCharToRxBuf@byte 0001                   ?_color_read_Red 0009  
                 __initialization 492A                      __end_of_main 232E  
                    __end_of_dtoa 2D70                   i2_isDataInTxBuf 4C5C  
                    __end_of_stop 443C                      _turnLeft_135 3C3E  
              putCharToTxBuf@byte 0005                     colorDetect@mL 0068  
                   colorDetect@mR 006A                            ??_main 0094  
                          ??_dtoa 002A                            ??_stop 001C  
                   __activetblptr 000003                      _turnRight_90 3886  
               _return_home_turns 2D70             colorDetect@colour_ref 007E  
                    ?_setMotorPWM 0012                ?_return_home_turns 007F  
                          ?_fputc 0005                            ?_fputs 000E  
                          _CCPR1H 000FAA                            _CCPR2H 000FA6  
                          _CCPR3H 000F25                            _CCPR4H 000F21  
                          ?_putch 0001             colorDetect@greenPrint 008C  
                          _RC0PPS 000E62                            _RC4REG 000EE3  
                          _RE2PPS 000E74                            _RD5PPS 000E6F  
                          _RC7PPS 000E69                            _RD6PPS 000E70  
                          _RE4PPS 000E76                            i2l2805 4C5C  
                          i2l4801 0028                            i2l4571 4B94  
                          i2l4803 0038                            _RG6PPS 000E88  
                          i2l4581 4B22                            i2l4573 4BA4  
                          i2l4805 0046                            i2l4583 4B26  
                          i2l4575 4BA8                            i2l4807 005A  
                          i2l4577 4BB8                            i2l4579 4B12  
                          i2l4797 0012                            i2l4799 0022  
        return_home_turns@string1 0100                         ??_HighISR 0003  
        __end_of_color_click_init 4AB4                            _RX4PPS 000E15  
                          _TX4REG 000EE4               ??_return_home_turns 0089  
                __end_of___xxtofl 3192                  __end_of_getColor 4744  
                    _CCPTMRS0bits 000FAD                      vfprintf@cfmt 0055  
                          ___flge 3D7A                  _getCharFromTxBuf 4B12  
                       ??___aodiv 0015                         ??___fladd 000D  
                       ??___aomod 0015                            ___wmul 4BE4  
                       ??___fldiv 003E                         ??___flmul 0025  
                       ??___flsub 001D                         ??___lwdiv 000F  
                          clear_0 4950                            clear_1 495C  
                          isa$std 000001                            pad@buf 0017  
                   main@motorLeft 00C7                            dtoa@fp 0020  
       __end_of_return_home_turns 2FDE                            fputc@c 0005  
               ?_TxBufferedString 0006                            fputs@c 0012  
                          fputs@i 0013                            fputs@s 000E  
                       ??_forward 001C                      __mediumconst 0000  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8                ??_TxBufferedString 0008  
                       ??_reverse 001C                  __end_of_whiteCal 3F62  
                          putch@c 0001                  __end_of_vfprintf 4798  
                          stop@mL 0018                            stop@mR 001A  
               ??_initDCmotorsPWM 0007                         ??_sprintf 0057  
                __end_of_turn_180 3886                        ___flge@ff1 001D  
                      ___flge@ff2 0021                      ___xxtofl@arg 000F  
                    ___xxtofl@exp 000E                      ___xxtofl@val 0005  
           __end_of_isDataInTxBuf 4C5C                        __accesstop 0060  
         __end_of__initialization 496A          __end_of_color_read_Clear 48DA  
        __end_of_color_read_Green 488A            ?_I2C_2_Master_RepStart 0001  
         __end_ofi2_isDataInTxBuf 4C74                     ___rparam_used 000001  
                ?_color_read_Blue 0009                 main@ambientRGBVal 00AC  
                  __pcstackCOMRAM 0001                     ?_DCmotorsInit 0005  
                    __pidataBANK0 4C9E                     __end_of_fputc 438E  
                   __end_of_fputs 49FE                     __end_of_putch 4CA4  
              return_home_turns@i 0196                return_home_turns@k 0198  
                         ??_fputc 0009                           ??_fputs 0012  
              _reverseSquareRight 443C                           ??_putch 0005  
                      __pbssBANK0 00D0                        __pbssBANK1 019A  
                      _ambientCal 3F62               ?_reverseSquareRight 0024  
                   _turnRight_135 3B02                 _color_writetoaddr 4C0A  
                    _T2CLKCONbits 000FBF                    ??_DCmotorsInit 0009  
                         ?___flge 001D                      ?_turnLeft_90 001E  
              ?_color_writetoaddr 0007                           ?___wmul 0005  
             ??_color_writetoaddr 0008              ??_reverseSquareRight 0028  
                       ?___xxtofl 0005                           _SP4BRGH 000EE6  
                         _SP4BRGL 000EE5                         ?_getColor 0010  
                         _SSP2ADD 000ED6                           _SSP2BUF 000ED5  
          color_writetoaddr@value 0007                  ??_color_read_Red 000B  
                         _HighISR 0008                    ?_turnRight_135 001E  
       __end_of_color_writetoaddr 4C2A                  ?i2_isDataInTxBuf 0001  
              _I2C_2_Master_Start 4C8A                        _initUSART4 4AE4  
              _I2C_2_Master_Write 4C74                           __Hparam 0000  
                         __Lparam 0000                 color_read_Red@tmp 000E  
                         ___aodiv 3192                           ___fladd 19FC  
                         ___aomod 3486                           ___fldiv 2758  
                         ___flmul 232E                         ?_whiteCal 0012  
                         ___flsub 4974               ?_I2C_2_Master_Start 0001  
                         ___lwdiv 4672               ?_I2C_2_Master_Write 0001  
                      _off_period 00E8                         ?_vfprintf 0060  
                    __psmallconst 0E00                         ?_turn_180 001E  
                         __pcinit 492A                           __ramtop 0E00  
                         __ptext0 1EBC                           __ptext1 3E7E  
                         __ptext2 2D70                           __ptext3 4798  
                         __ptext4 4744                           __ptext5 35EA  
                         __ptext6 2AF2                           __ptext7 45F8  
                         __ptext8 49BA                           __ptext9 42C4  
               colorDetect@RGBVal 0080                         _T2CONbits 000FBD  
                         _forward 4046                        ??___xxtofl 0009  
                       _T2HLTbits 000FBE                           _reverse 411C  
                      ??_getColor 0012                     _RxBufWriteCnt 005A  
        __end_of_getCharFromTxBuf 4B3E                    main@motorRight 00BE  
                         _sprintf 4798              ??_I2C_2_Master_Start 0006  
            ??_I2C_2_Master_Write 0006              end_of_initialization 496A  
               __end_of_sendTxBuf 4C44                    DCmotorsInit@mL 0005  
                  DCmotorsInit@mR 0007                       ?_ambientCal 0012  
                         fputc@fp 0007                           fputs@fp 0010  
               ?_color_click_init 0001                 colorDetect@whiteB 0074  
               colorDetect@whiteG 0070                 colorDetect@whiteR 006C  
              ??_color_click_init 0009                 __end_of_vfpfcnvrt 3748  
                         postdec1 000FE5                           postdec2 000FDD  
                         postinc0 000FEE                           postinc1 000FE6  
                         postinc2 000FDE                  vfpfcnvrt@convarg 004B  
                      ??_whiteCal 0014                        ??_vfprintf 0055  
                      ??_turn_180 0022                   _initDCmotorsPWM 4568  
                       _PORTFbits 000F8E                setMotorPWM@negDuty 0017  
                     ___fladd@grs 0014                        main@RGBVal 00A3  
                   ___xxtofl@sign 000D                         _TRISAbits 000F81  
              setMotorPWM@posDuty 0016                         _TRISCbits 000F83  
                       _TRISDbits 000F84                         _TRISEbits 000F85  
                       _TRISFbits 000F86                         _TRISGbits 000F87  
                       _TRISHbits 000F88              __end_of_DCmotorsInit 42C4  
                     ___fldiv@grs 0049                       ___fldiv@rem 0042  
             reverseSquareLeft@mL 0024               reverseSquareLeft@mR 0026  
        color_writetoaddr@address 0008           ??_I2C_2_Master_RepStart 0006  
                 ??_turnRight_135 0022                       ___flmul@grs 002A  
                     _CCP1CONbits 000FAB                 ?_color_read_Clear 0009  
                    _EUSART4RXbuf 00D0                      _EUSART4TXbuf 019A  
                     _CCP2CONbits 000FA7                 ?_color_read_Green 0009  
                     _CCP3CONbits 000F26                  main@forwardCount 009F  
                     ?_initUSART4 0001                       _CCP4CONbits 000F22  
return_home_turns@counter_history 0081                        main@whiteC 0097  
              ??_color_read_Clear 000B                ??_color_read_Green 000B  
                   ??_colorDetect 004F                    __end_of___flge 3E7E  
                     vfpfcnvrt@ap 0047                       vfpfcnvrt@cp 0053  
                     vfpfcnvrt@fp 0043                    __end_of___wmul 4C0A  
          colorDetect@whiteRGBVal 0066               color_read_Clear@tmp 000E  
             start_initialization 492A              colorDetect@bluePrint 0090  
                     __end_of_abs 4A80                       __end_of_pad 4672  
                   _TxBufWriteCnt 0058               color_read_Green@tmp 000E  
             return_home_turns@mL 0085               return_home_turns@mR 0087  
         __end_of_initDCmotorsPWM 45F8                       vfprintf@fmt 0062  
                        ??___flge 0025               main@counter_history 0300  
                        ??___wmul 0009                    _putCharToRxBuf 4B92  
                  _putCharToTxBuf 4B3E                       __pdataBANK0 00ED  
             __end_of_colorDetect 19FC                         ___fladd@a 0009  
                       ___fladd@b 0005                         ___fldiv@a 003A  
                       ___fldiv@b 0036                         ___flmul@a 0021  
                       ___flmul@b 001D                       __pbssCOMRAM 0057  
                       ___flsub@a 0019                         ___flsub@b 0015  
                   __pcstackBANK0 0060                     __pcstackBANK1 0100  
                   __pcstackBANK2 0200                     __pcstackBANK3 0300  
                ___aodiv@dividend 0005                          ?_HighISR 0001  
               _reverseSquareLeft 44D2                ?_reverseSquareLeft 0024  
                ___lwdiv@dividend 000B                         _dtoa$2702 0032  
          __end_of_putCharToRxBuf 4BBC            __end_of_putCharToTxBuf 4B68  
                       __pintcode 0008                          ?___aodiv 0005  
                        ?___fladd 0005                          ?___aomod 0005  
                        ?___fldiv 0036                  ___aodiv@quotient 0017  
                        ?___flmul 001D                          ?___flsub 0015  
                   ?_turnLeft_135 001E                          ?___lwdiv 000B  
             ??_reverseSquareLeft 0028                   turnRight_135@mL 001E  
                 turnRight_135@mR 0020            TxBufferedString@string 0006  
                  turnLeft_135@mL 001E                    turnLeft_135@mR 0020  
            I2C_2_Master_Read@ack 0007              I2C_2_Master_Read@tmp 0008  
                     __smallconst 0E00                          ?_forward 0018  
               _I2C_2_Master_Idle 4BBC                     ?_turnRight_90 001E  
               _I2C_2_Master_Init 4B68                 _I2C_2_Master_Read 49FE  
               _I2C_2_Master_Stop 4C80                      _RxBufReadCnt 0059  
                        ?_reverse 0018                ?_I2C_2_Master_Idle 0001  
              ?_I2C_2_Master_Init 0001                ?_I2C_2_Master_Read 0001  
                   ??_setMotorPWM 0014                ?_I2C_2_Master_Stop 0001  
                ___lwdiv@quotient 000F          initDCmotorsPWM@PWMperiod 0005  
                        ?_sprintf 0066                 ?_getCharFromTxBuf 0001  
       __end_of_reverseSquareLeft 4568                ??_getCharFromTxBuf 0001  
                    ??_ambientCal 0014               ??_I2C_2_Master_Idle 0005  
             ??_I2C_2_Master_Init 0005               ??_I2C_2_Master_Read 0006  
                  ___wmul@product 0009                          _LATAbits 000F79  
             ??_I2C_2_Master_Stop 0006                          _LATCbits 000F7B  
                   _isDataInTxBuf 4C44                          _LATDbits 000F7C  
                        _LATEbits 000F7D                          _LATFbits 000F7E  
                       _on_period 00EA                  _TxBufferedString 4AB4  
                        _LATGbits 000F7F                          _LATHbits 000F80  
                       _sendTxBuf 4C2A                          _IPR4bits 000E23  
                        _PIE4bits 000E2D                          i2u221_40 4C70  
                        i2u221_41 4C6A                          i2u222_40 4C72  
                       getColor@v 0010                          i2u510_40 005A  
                        i2u510_41 0056                          i2u507_40 0022  
                        i2u507_41 001E                          i2u508_40 0038  
                        i2u508_41 0034                          i2u509_40 0046  
                        i2u509_41 0042                          _PIR4bits 000E37  
                        i2u478_40 4BA4                          i2u478_41 4BA0  
                        i2u479_40 4B22                          i2u479_41 4B1E  
                 ?_putCharToRxBuf 0001                  ?_initDCmotorsPWM 0005  
                     _colorDetect 0E28                   ?_putCharToTxBuf 0001  
                  ??_turnLeft_135 0022                      _DCmotorsInit 41F2  
                        _SSP2CON2 000EDA                          _SSP2STAT 000ED8  
                       _vfpfcnvrt 35EA         __end_of_I2C_2_Master_Idle 4BE4  
       __end_of_I2C_2_Master_Init 4B92         __end_of_I2C_2_Master_Read 4A40  
               ___wmul@multiplier 0005         __end_of_I2C_2_Master_Stop 4C8A  
                  ??_turnRight_90 0022                      setMotorPWM@m 0012  
                       main@carGo 00AB       I2C_2_Master_Write@data_byte 0006  
              __end_of_ambientCal 4046                         main@index 00BC  
               ??_color_read_Blue 000B                      _TxBufReadCnt 0057  
                       copy_data0 493E               colorDetect@ambientB 007C  
             colorDetect@ambientG 007A               colorDetect@ambientR 0078  
             colorDetect@clearRef 0060                    ?_isDataInTxBuf 0001  
   __end_of_I2C_2_Master_RepStart 4C9E                color_read_Blue@tmp 000E  
             __end_of_setMotorPWM 3486                        ?_sendTxBuf 0001  
          return_home_turns@index 0083                      ??_initUSART4 0005  
                        __Hrparam 0000               colorDetect@redPrint 0088  
                      vfprintf@ap 0064                          __Lrparam 0000  
                      vfprintf@fp 0060                         forward@mL 0018  
                       forward@mR 001A     return_home_turns@turn_history 007F  
                      ?_vfpfcnvrt 0043          colorDetect@ambientRGBVal 0064  
                 ___aodiv@divisor 000D                   ___aodiv@counter 0015  
                      _ANSELDbits 000EA7                        _ANSELFbits 000EB4  
                      sprintf@fmt 0068                        turn_180@mL 001E  
                      turn_180@mR 0020                          ___xxtofl 2FDE  
                      _T0CON0bits 000FD5                        _T0CON1bits 000FD6  
                 ___lwdiv@divisor 000D                __end_of_initUSART4 4B12  
                        _getColor 46E6                   ___lwdiv@counter 0011  
                        __ptext10 4CA2                          __ptext11 4A40  
                        __ptext20 4568                          __ptext12 3486  
                        __ptext21 4A80                          __ptext13 3192  
                        __ptext30 44D2                          __ptext22 4C0A  
                        __ptext14 4C2A                          __ptext31 39C4  
                        __ptext23 4B68                          __ptext15 4C44  
                        __ptext40 232E                          __ptext32 438E  
                        __ptext24 0E28                          __ptext16 4046  
                        __ptext41 3D7A                          __ptext33 411C  
                        __ptext25 3748                          __ptext17 4AB4  
                        __ptext50 4C80                          __ptext42 2758  
                        __ptext34 331A                          __ptext26 3B02  
                        __ptext18 4B3E                          __ptext51 4C8A  
                        __ptext43 3F62                          __ptext35 4BE4  
                        __ptext27 3C3E                          __ptext19 4AE4  
                        __ptext52 4C94                          __ptext44 46E6  
                        __ptext36 4672                          __ptext28 443C  
                        __ptext53 49FE                          __ptext45 47EA  
                        __ptext37 2FDE                          __ptext29 3886  
                        __ptext54 4BBC                          __ptext46 483A  
                        __ptext38 4974                          __ptext55 41F2  
                        __ptext47 488A                          __ptext39 19FC  
                        __ptext48 48DA                          __ptext57 4C5C  
                        __ptext49 4C74                          __ptext58 4B92  
                        __ptext59 4B12                       ambientCal@i 0016  
                     ambientCal@v 0012                    turnRight_90@mL 001E  
                  turnRight_90@mR 0020                      _SSP2CON1bits 000ED9  
                    _SSP2CON2bits 000EDA                     turnLeft_90@mL 001E  
                   turnLeft_90@mR 0020             __end_of_turnRight_135 3C3E  
                       reverse@mL 0018                         reverse@mR 001A  
                   ??_turnLeft_90 0022                    _turning_time45 00EF  
                        isa$xinst 000000                        _RC4STAbits 000EE7  
                        int$flags 005B                          _whiteCal 3E7E  
                        _vfprintf 4744                          _turn_180 3748  
                ___aomod@dividend 0005                         whiteCal@i 0016  
                       whiteCal@v 0012                        _INTCONbits 000FF2  
               ??i2_isDataInTxBuf 0001                      _reverse_time 00ED  
                     _setMotorPWM 331A              __end_of_turnLeft_135 3D7A  
                 ??_isDataInTxBuf 0005                          intlevel2 0000  
                       sprintf@ap 0072                       ??_sendTxBuf 0005  
                 main@whiteRGBVal 00B4              __end_of_turnRight_90 39C4  
                 ___aomod@divisor 000D                       ??_vfpfcnvrt 0049  
                 ___aomod@counter 0015                  _color_click_init 4A80  
             __end_of_turnLeft_90 3B02          __end_of_TxBufferedString 4AE4  
                        sprintf@f 0074                          sprintf@s 0066  
                      _SSP2DATPPS 000E1D                        _SSP2CLKPPS 000E1C  
                   ___fladd@signs 0011                        _TX4STAbits 000EE8  
                    ___aodiv@sign 0016                      ___fladd@aexp 0012  
                    ___fladd@bexp 0013                  ??_putCharToRxBuf 0001  
                ??_putCharToTxBuf 0005                      ___aomod@sign 0016  
                    ?_colorDetect 0060  

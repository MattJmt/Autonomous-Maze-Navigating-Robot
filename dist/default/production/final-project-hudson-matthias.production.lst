

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Thu Dec 15 04:22:54 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    62                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    63                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    64                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    65                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    66   000000                     
    67                           ; Version 2.35
    68                           ; Generated 05/05/2021 GMT
    69                           ; 
    70                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    71                           ; All rights reserved.
    72                           ; 
    73                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    74                           ; 
    75                           ; Redistribution and use in source and binary forms, with or without modification, are
    76                           ; permitted provided that the following conditions are met:
    77                           ; 
    78                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    79                           ;        conditions and the following disclaimer.
    80                           ; 
    81                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    82                           ;        of conditions and the following disclaimer in the documentation and/or other
    83                           ;        materials provided with the distribution. Publication is not required when
    84                           ;        this file is used in an embedded application.
    85                           ; 
    86                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    87                           ;        software without specific prior written permission.
    88                           ; 
    89                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    90                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    91                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    92                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    93                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    94                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    95                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    96                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    97                           ; 
    98                           ; 
    99                           ; Code-generator required, PIC18F67K40 Definitions
   100                           ; 
   101                           ; SFR Addresses
   102   000000                     
   103                           	psect	idataBANK0
   104   004296                     __pidataBANK0:
   105                           	callstack 0
   106                           
   107                           ;initializer for _reverse_time
   108   004296  02BC               	dw	700
   109                           
   110                           ;initializer for _turning_time45
   111   004298  00BB               	dw	187
   112   000000                     _TX4REG	set	3812
   113   000000                     _RC4STAbits	set	3815
   114   000000                     _SP4BRGH	set	3814
   115   000000                     _TRISFbits	set	3974
   116   000000                     _LATFbits	set	3966
   117   000000                     _TRISDbits	set	3972
   118   000000                     _TRISGbits	set	3975
   119   000000                     _LATGbits	set	3967
   120   000000                     _LATEbits	set	3965
   121   000000                     _SSP2CON2bits	set	3802
   122   000000                     _RX4PPS	set	3605
   123   000000                     _SSP2CLKPPS	set	3612
   124   000000                     _SSP2DATPPS	set	3613
   125   000000                     _RC7PPS	set	3689
   126   000000                     _RE2PPS	set	3700
   127   000000                     _LATCbits	set	3963
   128   000000                     _LATDbits	set	3964
   129   000000                     _TRISAbits	set	3969
   130   000000                     _LATHbits	set	3968
   131   000000                     _TRISCbits	set	3971
   132   000000                     _TRISEbits	set	3973
   133   000000                     _PORTFbits	set	3982
   134   000000                     _TRISHbits	set	3976
   135   000000                     _T2PR	set	4028
   136   000000                     _T2CONbits	set	4029
   137   000000                     _CCPR2H	set	4006
   138   000000                     _CCPR1H	set	4010
   139   000000                     _RE4PPS	set	3702
   140   000000                     _RG6PPS	set	3720
   141   000000                     _RD5PPS	set	3695
   142   000000                     _ANSELDbits	set	3751
   143   000000                     _SSP2ADD	set	3798
   144   000000                     _SSP2CON1bits	set	3801
   145   000000                     _CCPR4H	set	3873
   146   000000                     _CCPR3H	set	3877
   147   000000                     _TMR0L	set	4051
   148   000000                     _TMR0H	set	4052
   149   000000                     _T0CON0bits	set	4053
   150   000000                     _T0CON1bits	set	4054
   151   000000                     _T2CLKCONbits	set	4031
   152   000000                     _T2HLTbits	set	4030
   153   000000                     _CCP1CONbits	set	4011
   154   000000                     _CCPTMRS0bits	set	4013
   155   000000                     _CCP2CONbits	set	4007
   156   000000                     _LATAbits	set	3961
   157   000000                     _CCP3CONbits	set	3878
   158   000000                     _CCP4CONbits	set	3874
   159   000000                     _RC4REG	set	3811
   160   000000                     _SP4BRGL	set	3813
   161   000000                     _TX4STAbits	set	3816
   162   000000                     _BAUD4CONbits	set	3817
   163   000000                     _SSP2CON2	set	3802
   164   000000                     _SSP2STAT	set	3800
   165   000000                     _ANSELFbits	set	3764
   166   000000                     _SSP2BUF	set	3797
   167   000000                     _IPR4bits	set	3619
   168   000000                     _PIE4bits	set	3629
   169   000000                     _RC0PPS	set	3682
   170   000000                     _RD6PPS	set	3696
   171   000000                     _INTCONbits	set	4082
   172   000000                     _PIR4bits	set	3639
   173                           
   174                           	psect	smallconst
   175   000E00                     __psmallconst:
   176                           	callstack 0
   177   000E00  00                 	db	0
   178   000E01  25                 	db	37
   179   000E02  64                 	db	100	;'d'
   180   000E03  2C                 	db	44
   181   000E04  25                 	db	37
   182   000E05  64                 	db	100	;'d'
   183   000E06  2C                 	db	44
   184   000E07  25                 	db	37
   185   000E08  64                 	db	100	;'d'
   186   000E09  2C                 	db	44
   187   000E0A  25                 	db	37
   188   000E0B  64                 	db	100	;'d'
   189   000E0C  20                 	db	32
   190   000E0D  0D                 	db	13
   191   000E0E  0A                 	db	10
   192   000E0F  00                 	db	0
   193   000E10  00                 	db	0	; dummy byte at the end
   194   000000                     
   195                           ; #config settings
   196                           
   197                           	psect	cinit
   198   004032                     __pcinit:
   199                           	callstack 0
   200   004032                     start_initialization:
   201                           	callstack 0
   202   004032                     __initialization:
   203                           	callstack 0
   204                           
   205                           ; Initialize objects allocated to BANK0 (4 bytes)
   206                           ; load TBLPTR registers with __pidataBANK0
   207   004032  0E96               	movlw	low __pidataBANK0
   208   004034  6EF6               	movwf	tblptrl,c
   209   004036  0E42               	movlw	high __pidataBANK0
   210   004038  6EF7               	movwf	tblptrh,c
   211   00403A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   212   00403C  6EF8               	movwf	tblptru,c
   213   00403E  EE00  F0E5         	lfsr	0,__pdataBANK0
   214   004042  EE10 F004          	lfsr	1,4
   215   004046                     copy_data0:
   216   004046  0009               	tblrd		*+
   217   004048  CFF5 FFEE          	movff	tablat,postinc0
   218   00404C  50E5               	movf	postdec1,w,c
   219   00404E  50E1               	movf	fsr1l,w,c
   220   004050  E1FA               	bnz	copy_data0
   221                           
   222                           ; Clear objects allocated to BANK3 (60 bytes)
   223   004052  EE03  F000         	lfsr	0,__pbssBANK3
   224   004056  0E3C               	movlw	60
   225   004058                     clear_0:
   226   004058  6AEE               	clrf	postinc0,c
   227   00405A  06E8               	decf	wreg,f,c
   228   00405C  E1FD               	bnz	clear_0
   229                           
   230                           ; Clear objects allocated to BANK0 (24 bytes)
   231   00405E  EE00  F0CD         	lfsr	0,__pbssBANK0
   232   004062  0E18               	movlw	24
   233   004064                     clear_1:
   234   004064  6AEE               	clrf	postinc0,c
   235   004066  06E8               	decf	wreg,f,c
   236   004068  E1FD               	bnz	clear_1
   237                           
   238                           ; Clear objects allocated to COMRAM (4 bytes)
   239   00406A  6A57               	clrf	(__pbssCOMRAM+3)& (0+255),c
   240   00406C  6A56               	clrf	(__pbssCOMRAM+2)& (0+255),c
   241   00406E  6A55               	clrf	(__pbssCOMRAM+1)& (0+255),c
   242   004070  6A54               	clrf	__pbssCOMRAM& (0+255),c
   243   004072                     end_of_initialization:
   244                           	callstack 0
   245   004072                     __end_of__initialization:
   246                           	callstack 0
   247   004072  9058               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   248   004074  9258               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   249   004076  0100               	movlb	0
   250   004078  EF7A  F011         	goto	_main	;jump to C main() function
   251                           
   252                           	psect	bssCOMRAM
   253   000054                     __pbssCOMRAM:
   254                           	callstack 0
   255   000054                     _TxBufReadCnt:
   256                           	callstack 0
   257   000054                     	ds	1
   258   000055                     _TxBufWriteCnt:
   259                           	callstack 0
   260   000055                     	ds	1
   261   000056                     _RxBufReadCnt:
   262                           	callstack 0
   263   000056                     	ds	1
   264   000057                     _RxBufWriteCnt:
   265                           	callstack 0
   266   000057                     	ds	1
   267                           
   268                           	psect	bssBANK0
   269   0000CD                     __pbssBANK0:
   270                           	callstack 0
   271   0000CD                     _EUSART4RXbuf:
   272                           	callstack 0
   273   0000CD                     	ds	20
   274   0000E1                     _off_period:
   275                           	callstack 0
   276   0000E1                     	ds	2
   277   0000E3                     _on_period:
   278                           	callstack 0
   279   0000E3                     	ds	2
   280                           
   281                           	psect	dataBANK0
   282   0000E5                     __pdataBANK0:
   283                           	callstack 0
   284   0000E5                     _reverse_time:
   285                           	callstack 0
   286   0000E5                     	ds	2
   287   0000E7                     _turning_time45:
   288                           	callstack 0
   289   0000E7                     	ds	2
   290                           
   291                           	psect	bssBANK3
   292   000300                     __pbssBANK3:
   293                           	callstack 0
   294   000300                     _EUSART4TXbuf:
   295                           	callstack 0
   296   000300                     	ds	60
   297                           
   298                           	psect	cstackBANK2
   299   000200                     __pcstackBANK2:
   300                           	callstack 0
   301   000200                     main@counter_history:
   302                           	callstack 0
   303                           
   304                           ; 198 bytes @ 0x0
   305   000200                     	ds	198
   306                           
   307                           	psect	cstackBANK1
   308   000100                     __pcstackBANK1:
   309                           	callstack 0
   310   000100                     main@turn_history:
   311                           	callstack 0
   312                           
   313                           ; 198 bytes @ 0x0
   314   000100                     	ds	198
   315                           
   316                           	psect	cstackBANK0
   317   000060                     __pcstackBANK0:
   318                           	callstack 0
   319   000060                     ?_colorDetect:
   320                           	callstack 0
   321   000060                     colorDetect@clearRef:
   322                           	callstack 0
   323                           
   324                           ; 4 bytes @ 0x0
   325   000060                     	ds	4
   326   000064                     colorDetect@ambientRGBVal:
   327                           	callstack 0
   328                           
   329                           ; 2 bytes @ 0x4
   330   000064                     	ds	2
   331   000066                     colorDetect@whiteRGBVal:
   332                           	callstack 0
   333                           
   334                           ; 2 bytes @ 0x6
   335   000066                     	ds	2
   336   000068                     colorDetect@mL:
   337                           	callstack 0
   338                           
   339                           ; 2 bytes @ 0x8
   340   000068                     	ds	2
   341   00006A                     colorDetect@mR:
   342                           	callstack 0
   343                           
   344                           ; 2 bytes @ 0xA
   345   00006A                     	ds	2
   346   00006C                     colorDetect@whiteR:
   347                           	callstack 0
   348                           
   349                           ; 4 bytes @ 0xC
   350   00006C                     	ds	4
   351   000070                     colorDetect@whiteG:
   352                           	callstack 0
   353                           
   354                           ; 4 bytes @ 0x10
   355   000070                     	ds	4
   356   000074                     colorDetect@whiteB:
   357                           	callstack 0
   358                           
   359                           ; 4 bytes @ 0x14
   360   000074                     	ds	4
   361   000078                     colorDetect@ambientR:
   362                           	callstack 0
   363                           
   364                           ; 2 bytes @ 0x18
   365   000078                     	ds	2
   366   00007A                     colorDetect@ambientG:
   367                           	callstack 0
   368                           
   369                           ; 2 bytes @ 0x1A
   370   00007A                     	ds	2
   371   00007C                     colorDetect@ambientB:
   372                           	callstack 0
   373                           
   374                           ; 2 bytes @ 0x1C
   375   00007C                     	ds	2
   376   00007E                     colorDetect@colour_ref:
   377                           	callstack 0
   378                           
   379                           ; 2 bytes @ 0x1E
   380   00007E                     	ds	2
   381   000080                     colorDetect@RGBVal:
   382                           	callstack 0
   383                           
   384                           ; 8 bytes @ 0x20
   385   000080                     	ds	8
   386   000088                     colorDetect@redPrint:
   387                           	callstack 0
   388                           
   389                           ; 4 bytes @ 0x28
   390   000088                     	ds	4
   391   00008C                     colorDetect@greenPrint:
   392                           	callstack 0
   393                           
   394                           ; 4 bytes @ 0x2C
   395   00008C                     	ds	4
   396   000090                     colorDetect@bluePrint:
   397                           	callstack 0
   398                           
   399                           ; 4 bytes @ 0x30
   400   000090                     	ds	4
   401   000094                     main@whiteC:
   402                           	callstack 0
   403                           
   404                           ; 4 bytes @ 0x34
   405   000094                     	ds	4
   406   000098                     main@forwardCount:
   407                           	callstack 0
   408                           
   409                           ; 2 bytes @ 0x38
   410   000098                     	ds	2
   411   00009A                     main@clearRef:
   412                           	callstack 0
   413                           
   414                           ; 4 bytes @ 0x3A
   415   00009A                     	ds	4
   416   00009E                     main@colorNum:
   417                           	callstack 0
   418                           
   419                           ; 2 bytes @ 0x3E
   420   00009E                     	ds	2
   421   0000A0                     main@RGBVal:
   422                           	callstack 0
   423                           
   424                           ; 8 bytes @ 0x40
   425   0000A0                     	ds	8
   426   0000A8                     main@carGo:
   427                           	callstack 0
   428                           
   429                           ; 1 bytes @ 0x48
   430   0000A8                     	ds	1
   431   0000A9                     main@ambientRGBVal:
   432                           	callstack 0
   433                           
   434                           ; 8 bytes @ 0x49
   435   0000A9                     	ds	8
   436   0000B1                     main@index:
   437                           	callstack 0
   438                           
   439                           ; 2 bytes @ 0x51
   440   0000B1                     	ds	2
   441   0000B3                     main@whiteRGBVal:
   442                           	callstack 0
   443                           
   444                           ; 8 bytes @ 0x53
   445   0000B3                     	ds	8
   446   0000BB                     main@motorRight:
   447                           	callstack 0
   448                           
   449                           ; 9 bytes @ 0x5B
   450   0000BB                     	ds	9
   451   0000C4                     main@motorLeft:
   452                           	callstack 0
   453                           
   454                           ; 9 bytes @ 0x64
   455   0000C4                     	ds	9
   456                           
   457                           	psect	cstackCOMRAM
   458   000001                     __pcstackCOMRAM:
   459                           	callstack 0
   460   000001                     ??_getCharFromTxBuf:
   461   000001                     putCharToRxBuf@byte:
   462                           	callstack 0
   463                           
   464                           ; 1 bytes @ 0x0
   465   000001                     	ds	2
   466   000003                     ??_HighISR:
   467                           
   468                           ; 1 bytes @ 0x2
   469   000003                     	ds	2
   470   000005                     ??_I2C_2_Master_Idle:
   471   000005                     ?___wmul:
   472                           	callstack 0
   473   000005                     ?___fladd:
   474                           	callstack 0
   475   000005                     ?___xxtofl:
   476                           	callstack 0
   477   000005                     initDCmotorsPWM@PWMperiod:
   478                           	callstack 0
   479   000005                     DCmotorsInit@mL:
   480                           	callstack 0
   481   000005                     ___wmul@multiplier:
   482                           	callstack 0
   483   000005                     ___fladd@b:
   484                           	callstack 0
   485   000005                     ___xxtofl@val:
   486                           	callstack 0
   487                           
   488                           ; 4 bytes @ 0x4
   489   000005                     	ds	1
   490   000006                     ??_I2C_2_Master_Read:
   491   000006                     I2C_2_Master_Write@data_byte:
   492                           	callstack 0
   493                           
   494                           ; 1 bytes @ 0x5
   495   000006                     	ds	1
   496   000007                     color_writetoaddr@value:
   497                           	callstack 0
   498   000007                     I2C_2_Master_Read@ack:
   499                           	callstack 0
   500   000007                     DCmotorsInit@mR:
   501                           	callstack 0
   502   000007                     ___wmul@multiplicand:
   503                           	callstack 0
   504                           
   505                           ; 2 bytes @ 0x6
   506   000007                     	ds	1
   507   000008                     color_writetoaddr@address:
   508                           	callstack 0
   509   000008                     I2C_2_Master_Read@tmp:
   510                           	callstack 0
   511                           
   512                           ; 1 bytes @ 0x7
   513   000008                     	ds	1
   514   000009                     ??_color_click_init:
   515   000009                     ??___xxtofl:
   516   000009                     ?_color_read_Red:
   517                           	callstack 0
   518   000009                     ?_color_read_Green:
   519                           	callstack 0
   520   000009                     ?_color_read_Blue:
   521                           	callstack 0
   522   000009                     ?_color_read_Clear:
   523                           	callstack 0
   524   000009                     ___wmul@product:
   525                           	callstack 0
   526   000009                     ___fladd@a:
   527                           	callstack 0
   528                           
   529                           ; 4 bytes @ 0x8
   530   000009                     	ds	2
   531   00000B                     ??_color_read_Red:
   532   00000B                     ??_color_read_Green:
   533   00000B                     ??_color_read_Blue:
   534   00000B                     ??_color_read_Clear:
   535   00000B                     ?___lwdiv:
   536                           	callstack 0
   537   00000B                     ___lwdiv@dividend:
   538                           	callstack 0
   539                           
   540                           ; 2 bytes @ 0xA
   541   00000B                     	ds	2
   542   00000D                     ??___fladd:
   543   00000D                     ___xxtofl@sign:
   544                           	callstack 0
   545   00000D                     ___lwdiv@divisor:
   546                           	callstack 0
   547                           
   548                           ; 2 bytes @ 0xC
   549   00000D                     	ds	1
   550   00000E                     ___xxtofl@exp:
   551                           	callstack 0
   552   00000E                     color_read_Red@tmp:
   553                           	callstack 0
   554   00000E                     color_read_Green@tmp:
   555                           	callstack 0
   556   00000E                     color_read_Blue@tmp:
   557                           	callstack 0
   558   00000E                     color_read_Clear@tmp:
   559                           	callstack 0
   560                           
   561                           ; 2 bytes @ 0xD
   562   00000E                     	ds	1
   563   00000F                     ___lwdiv@quotient:
   564                           	callstack 0
   565   00000F                     ___xxtofl@arg:
   566                           	callstack 0
   567                           
   568                           ; 4 bytes @ 0xE
   569   00000F                     	ds	1
   570   000010                     getColor@v:
   571                           	callstack 0
   572                           
   573                           ; 2 bytes @ 0xF
   574   000010                     	ds	1
   575   000011                     ___lwdiv@counter:
   576                           	callstack 0
   577   000011                     ___fladd@signs:
   578                           	callstack 0
   579                           
   580                           ; 1 bytes @ 0x10
   581   000011                     	ds	1
   582   000012                     ___fladd@aexp:
   583                           	callstack 0
   584   000012                     ambientCal@v:
   585                           	callstack 0
   586   000012                     whiteCal@v:
   587                           	callstack 0
   588   000012                     setMotorPWM@m:
   589                           	callstack 0
   590                           
   591                           ; 2 bytes @ 0x11
   592   000012                     	ds	1
   593   000013                     ___fladd@bexp:
   594                           	callstack 0
   595                           
   596                           ; 1 bytes @ 0x12
   597   000013                     	ds	1
   598   000014                     ??_ambientCal:
   599   000014                     ??_whiteCal:
   600   000014                     ??_setMotorPWM:
   601   000014                     ___fladd@grs:
   602                           	callstack 0
   603                           
   604                           ; 1 bytes @ 0x13
   605   000014                     	ds	1
   606   000015                     ?___flsub:
   607                           	callstack 0
   608   000015                     ___flsub@b:
   609                           	callstack 0
   610                           
   611                           ; 4 bytes @ 0x14
   612   000015                     	ds	1
   613   000016                     setMotorPWM@posDuty:
   614                           	callstack 0
   615   000016                     ambientCal@i:
   616                           	callstack 0
   617   000016                     whiteCal@i:
   618                           	callstack 0
   619                           
   620                           ; 2 bytes @ 0x15
   621   000016                     	ds	1
   622   000017                     setMotorPWM@negDuty:
   623                           	callstack 0
   624                           
   625                           ; 1 bytes @ 0x16
   626   000017                     	ds	1
   627   000018                     stop@mL:
   628                           	callstack 0
   629   000018                     forward@mL:
   630                           	callstack 0
   631   000018                     reverse@mL:
   632                           	callstack 0
   633                           
   634                           ; 2 bytes @ 0x17
   635   000018                     	ds	1
   636   000019                     ___flsub@a:
   637                           	callstack 0
   638                           
   639                           ; 4 bytes @ 0x18
   640   000019                     	ds	1
   641   00001A                     stop@mR:
   642                           	callstack 0
   643   00001A                     forward@mR:
   644                           	callstack 0
   645   00001A                     reverse@mR:
   646                           	callstack 0
   647                           
   648                           ; 2 bytes @ 0x19
   649   00001A                     	ds	2
   650   00001C                     ??_stop:
   651   00001C                     
   652                           ; 1 bytes @ 0x1B
   653   00001C                     	ds	1
   654   00001D                     ?___flmul:
   655                           	callstack 0
   656   00001D                     ___flge@ff1:
   657                           	callstack 0
   658   00001D                     ___flmul@b:
   659                           	callstack 0
   660                           
   661                           ; 4 bytes @ 0x1C
   662   00001D                     	ds	1
   663   00001E                     turnLeft_90@mL:
   664                           	callstack 0
   665   00001E                     turnRight_90@mL:
   666                           	callstack 0
   667   00001E                     turn_180@mL:
   668                           	callstack 0
   669   00001E                     turnRight_135@mL:
   670                           	callstack 0
   671   00001E                     turnLeft_135@mL:
   672                           	callstack 0
   673                           
   674                           ; 2 bytes @ 0x1D
   675   00001E                     	ds	2
   676   000020                     turnLeft_90@mR:
   677                           	callstack 0
   678   000020                     turnRight_90@mR:
   679                           	callstack 0
   680   000020                     turn_180@mR:
   681                           	callstack 0
   682   000020                     turnRight_135@mR:
   683                           	callstack 0
   684   000020                     turnLeft_135@mR:
   685                           	callstack 0
   686                           
   687                           ; 2 bytes @ 0x1F
   688   000020                     	ds	1
   689   000021                     ___flge@ff2:
   690                           	callstack 0
   691   000021                     ___flmul@a:
   692                           	callstack 0
   693                           
   694                           ; 4 bytes @ 0x20
   695   000021                     	ds	1
   696   000022                     ??_turn_180:
   697   000022                     ??_turnRight_90:
   698   000022                     ??_turnLeft_90:
   699   000022                     ??_turnRight_135:
   700   000022                     ??_turnLeft_135:
   701                           
   702                           ; 1 bytes @ 0x21
   703   000022                     	ds	2
   704   000024                     return_home_turns@turn_history:
   705                           	callstack 0
   706   000024                     reverseSquareRight@mL:
   707                           	callstack 0
   708   000024                     reverseSquareLeft@mL:
   709                           	callstack 0
   710                           
   711                           ; 2 bytes @ 0x23
   712   000024                     	ds	1
   713   000025                     ??___flmul:
   714   000025                     ??___flge:
   715                           
   716                           ; 1 bytes @ 0x24
   717   000025                     	ds	1
   718   000026                     return_home_turns@counter_history:
   719                           	callstack 0
   720   000026                     reverseSquareRight@mR:
   721                           	callstack 0
   722   000026                     reverseSquareLeft@mR:
   723                           	callstack 0
   724                           
   725                           ; 2 bytes @ 0x25
   726   000026                     	ds	2
   727   000028                     ??_reverseSquareRight:
   728   000028                     ??_reverseSquareLeft:
   729   000028                     return_home_turns@index:
   730                           	callstack 0
   731                           
   732                           ; 2 bytes @ 0x27
   733   000028                     	ds	1
   734   000029                     ___flmul@sign:
   735                           	callstack 0
   736                           
   737                           ; 1 bytes @ 0x28
   738   000029                     	ds	1
   739   00002A                     return_home_turns@mL:
   740                           	callstack 0
   741   00002A                     ___flmul@grs:
   742                           	callstack 0
   743                           
   744                           ; 4 bytes @ 0x29
   745   00002A                     	ds	2
   746   00002C                     return_home_turns@mR:
   747                           	callstack 0
   748                           
   749                           ; 2 bytes @ 0x2B
   750   00002C                     	ds	2
   751   00002E                     ??_return_home_turns:
   752   00002E                     ___flmul@aexp:
   753                           	callstack 0
   754                           
   755                           ; 1 bytes @ 0x2D
   756   00002E                     	ds	1
   757   00002F                     ___flmul@bexp:
   758                           	callstack 0
   759                           
   760                           ; 1 bytes @ 0x2E
   761   00002F                     	ds	1
   762   000030                     return_home_turns@i:
   763                           	callstack 0
   764   000030                     ___flmul@prod:
   765                           	callstack 0
   766                           
   767                           ; 4 bytes @ 0x2F
   768   000030                     	ds	2
   769   000032                     return_home_turns@k:
   770                           	callstack 0
   771                           
   772                           ; 2 bytes @ 0x31
   773   000032                     	ds	2
   774   000034                     ___flmul@temp:
   775                           	callstack 0
   776                           
   777                           ; 2 bytes @ 0x33
   778   000034                     	ds	2
   779   000036                     ?___fldiv:
   780                           	callstack 0
   781   000036                     ___fldiv@b:
   782                           	callstack 0
   783                           
   784                           ; 4 bytes @ 0x35
   785   000036                     	ds	4
   786   00003A                     ___fldiv@a:
   787                           	callstack 0
   788                           
   789                           ; 4 bytes @ 0x39
   790   00003A                     	ds	4
   791   00003E                     ??___fldiv:
   792                           
   793                           ; 1 bytes @ 0x3D
   794   00003E                     	ds	4
   795   000042                     ___fldiv@rem:
   796                           	callstack 0
   797                           
   798                           ; 4 bytes @ 0x41
   799   000042                     	ds	4
   800   000046                     ___fldiv@sign:
   801                           	callstack 0
   802                           
   803                           ; 1 bytes @ 0x45
   804   000046                     	ds	1
   805   000047                     ___fldiv@new_exp:
   806                           	callstack 0
   807                           
   808                           ; 2 bytes @ 0x46
   809   000047                     	ds	2
   810   000049                     ___fldiv@grs:
   811                           	callstack 0
   812                           
   813                           ; 4 bytes @ 0x48
   814   000049                     	ds	4
   815   00004D                     ___fldiv@bexp:
   816                           	callstack 0
   817                           
   818                           ; 1 bytes @ 0x4C
   819   00004D                     	ds	1
   820   00004E                     ___fldiv@aexp:
   821                           	callstack 0
   822                           
   823                           ; 1 bytes @ 0x4D
   824   00004E                     	ds	1
   825   00004F                     ??_colorDetect:
   826                           
   827                           ; 1 bytes @ 0x4E
   828   00004F                     	ds	2
   829   000051                     ??_main:
   830                           
   831                           ; 1 bytes @ 0x50
   832   000051                     	ds	3
   833                           
   834 ;;
   835 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   836 ;;
   837 ;; *************** function _main *****************
   838 ;; Defined at:
   839 ;;		line 25 in file "MazeRobot.X/main.c"
   840 ;; Parameters:    Size  Location     Type
   841 ;;		None
   842 ;; Auto vars:     Size  Location     Type
   843 ;;  turn_history  198    0[BANK1 ] unsigned int [99]
   844 ;;  counter_hist  198    0[BANK2 ] unsigned int [99]
   845 ;;  testString     20    0        unsigned char [20]
   846 ;;  motorLeft       9  100[BANK0 ] struct DC_motor
   847 ;;  motorRight      9   91[BANK0 ] struct DC_motor
   848 ;;  whiteRGBVal     8   83[BANK0 ] struct RGB
   849 ;;  ambientRGBVa    8   73[BANK0 ] struct RGB
   850 ;;  RGBVal          8   64[BANK0 ] struct RGB
   851 ;;  clearRef        4   58[BANK0 ] struct RGB
   852 ;;  whiteC          4   52[BANK0 ] struct RGB
   853 ;;  index           2   81[BANK0 ] unsigned int 
   854 ;;  colorNum        2   62[BANK0 ] unsigned int 
   855 ;;  forwardCount    2   56[BANK0 ] unsigned int 
   856 ;;  carGo           1   72[BANK0 ] unsigned char 
   857 ;; Return value:  Size  Location     Type
   858 ;;                  1    wreg      void 
   859 ;; Registers used:
   860 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   861 ;; Tracked objects:
   862 ;;		On entry : 0/0
   863 ;;		On exit  : 0/0
   864 ;;		Unchanged: 0/0
   865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   867 ;;      Locals:         0      57     198     198       0       0       0       0       0       0       0       0       
      +0       0       0
   868 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   869 ;;      Totals:         3      57     198     198       0       0       0       0       0       0       0       0       
      +0       0       0
   870 ;;Total ram usage:      456 bytes
   871 ;; Hardware stack levels required when called: 8
   872 ;; This function calls:
   873 ;;		_DCmotorsInit
   874 ;;		___fldiv
   875 ;;		___flge
   876 ;;		___xxtofl
   877 ;;		_ambientCal
   878 ;;		_colorDetect
   879 ;;		_color_click_init
   880 ;;		_forward
   881 ;;		_getColor
   882 ;;		_initDCmotorsPWM
   883 ;;		_initUSART4
   884 ;;		_return_home_turns
   885 ;;		_stop
   886 ;;		_whiteCal
   887 ;; This function is called by:
   888 ;;		Startup code after reset
   889 ;; This function uses a non-reentrant model
   890 ;;
   891                           
   892                           	psect	text0
   893   0022F4                     __ptext0:
   894                           	callstack 0
   895   0022F4                     _main:
   896                           	callstack 23
   897   0022F4                     
   898                           ;MazeRobot.X/main.c: 27:     color_click_init();
   899   0022F4  EC82  F020         	call	_color_click_init	;wreg free
   900   0022F8                     
   901                           ;MazeRobot.X/main.c: 28:     initUSART4();
   902   0022F8  EC9C  F020         	call	_initUSART4	;wreg free
   903   0022FC                     
   904                           ;MazeRobot.X/main.c: 29:     initDCmotorsPWM(199);
   905   0022FC  0E00               	movlw	0
   906   0022FE  6E06               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   907   002300  0EC7               	movlw	199
   908   002302  6E05               	movwf	initDCmotorsPWM@PWMperiod^0,c
   909   002304  ECC8  F01E         	call	_initDCmotorsPWM	;wreg free
   910   002308                     
   911                           ;MazeRobot.X/main.c: 36:     LATDbits.LATD7=0;
   912   002308  9E7C               	bcf	124,7,c	;volatile
   913   00230A                     
   914                           ;MazeRobot.X/main.c: 37:     TRISDbits.TRISD7=0;
   915   00230A  9E84               	bcf	132,7,c	;volatile
   916   00230C                     
   917                           ;MazeRobot.X/main.c: 39:     LATHbits.LATH3=0;
   918   00230C  9680               	bcf	128,3,c	;volatile
   919   00230E                     
   920                           ;MazeRobot.X/main.c: 40:     TRISHbits.TRISH3=0;
   921   00230E  9688               	bcf	136,3,c	;volatile
   922   002310                     
   923                           ;MazeRobot.X/main.c: 42:     LATDbits.LATD4 = 0;
   924   002310  987C               	bcf	124,4,c	;volatile
   925   002312                     
   926                           ;MazeRobot.X/main.c: 43:     TRISDbits.TRISD4 = 0;
   927   002312  9884               	bcf	132,4,c	;volatile
   928   002314                     
   929                           ;MazeRobot.X/main.c: 45:     LATHbits.LATH0 = 0;
   930   002314  9080               	bcf	128,0,c	;volatile
   931   002316                     
   932                           ;MazeRobot.X/main.c: 46:     TRISHbits.TRISH0 = 0;
   933   002316  9088               	bcf	136,0,c	;volatile
   934   002318                     
   935                           ;MazeRobot.X/main.c: 48:     LATFbits.LATF0 = 0;
   936   002318  907E               	bcf	126,0,c	;volatile
   937   00231A                     
   938                           ;MazeRobot.X/main.c: 49:     TRISFbits.TRISF0 = 0;
   939   00231A  9086               	bcf	134,0,c	;volatile
   940   00231C                     
   941                           ;MazeRobot.X/main.c: 51:     LATHbits.LATH1 = 0;
   942   00231C  9280               	bcf	128,1,c	;volatile
   943   00231E                     
   944                           ;MazeRobot.X/main.c: 52:     TRISHbits.TRISH1 = 0;
   945   00231E  9288               	bcf	136,1,c	;volatile
   946   002320                     
   947                           ;MazeRobot.X/main.c: 54:     LATDbits.LATD3 = 0;
   948   002320  967C               	bcf	124,3,c	;volatile
   949   002322                     
   950                           ;MazeRobot.X/main.c: 55:     TRISDbits.TRISD3 = 0;
   951   002322  9684               	bcf	132,3,c	;volatile
   952   002324                     
   953                           ;MazeRobot.X/main.c: 58:     LATDbits.LATD4 = 1;
   954   002324  887C               	bsf	124,4,c	;volatile
   955   002326                     
   956                           ;MazeRobot.X/main.c: 59:     LATFbits.LATF0 = 1;
   957   002326  807E               	bsf	126,0,c	;volatile
   958   002328                     
   959                           ;MazeRobot.X/main.c: 60:     LATHbits.LATH0 = 1;
   960   002328  8080               	bsf	128,0,c	;volatile
   961   00232A                     
   962                           ;MazeRobot.X/main.c: 61:     LATFbits.LATF0 = 1;
   963   00232A  807E               	bsf	126,0,c	;volatile
   964   00232C                     
   965                           ;MazeRobot.X/main.c: 62:     LATDbits.LATD3 = 1;
   966   00232C  867C               	bsf	124,3,c	;volatile
   967   00232E                     
   968                           ;MazeRobot.X/main.c: 67:     LATGbits.LATG0=1;
   969   00232E  807F               	bsf	127,0,c	;volatile
   970   002330                     
   971                           ;MazeRobot.X/main.c: 68:     LATEbits.LATE7=1;
   972   002330  8E7D               	bsf	125,7,c	;volatile
   973   002332                     
   974                           ;MazeRobot.X/main.c: 69:     LATAbits.LATA3=1;
   975   002332  8679               	bsf	121,3,c	;volatile
   976   002334                     
   977                           ;MazeRobot.X/main.c: 71:     TRISGbits.TRISG0=0;
   978   002334  9087               	bcf	135,0,c	;volatile
   979   002336                     
   980                           ;MazeRobot.X/main.c: 72:     TRISEbits.TRISE7=0;
   981   002336  9E85               	bcf	133,7,c	;volatile
   982   002338                     
   983                           ;MazeRobot.X/main.c: 73:     TRISAbits.TRISA3=0;
   984   002338  9681               	bcf	129,3,c	;volatile
   985   00233A                     
   986                           ;MazeRobot.X/main.c: 76:     TRISFbits.TRISF2=1;
   987   00233A  8486               	bsf	134,2,c	;volatile
   988   00233C                     
   989                           ;MazeRobot.X/main.c: 77:     ANSELFbits.ANSELF2=0;
   990   00233C  010E               	movlb	14	; () banked
   991   00233E  95B4               	bcf	180,2,b	;volatile
   992   002340                     
   993                           ; BSR set to: 14
   994                           ;MazeRobot.X/main.c: 79:     TRISFbits.TRISF3=1;
   995   002340  8686               	bsf	134,3,c	;volatile
   996   002342                     
   997                           ; BSR set to: 14
   998                           ;MazeRobot.X/main.c: 80:     ANSELFbits.ANSELF3=0;
   999   002342  97B4               	bcf	180,3,b	;volatile
  1000   002344                     
  1001                           ; BSR set to: 14
  1002                           ;MazeRobot.X/main.c: 89:     unsigned char carGo = 0;
  1003   002344  0E00               	movlw	0
  1004   002346  0100               	movlb	0	; () banked
  1005   002348  6FA8               	movwf	main@carGo& (0+255),b
  1006   00234A                     
  1007                           ; BSR set to: 0
  1008                           ;MazeRobot.X/main.c: 91:     DC_motor motorLeft,motorRight;;MazeRobot.X/main.c: 92:     
      +                          DCmotorsInit(&motorLeft,&motorRight);
  1009   00234A  0EC4               	movlw	low main@motorLeft
  1010   00234C  6E05               	movwf	DCmotorsInit@mL^0,c
  1011   00234E  0E00               	movlw	high main@motorLeft
  1012   002350  6E06               	movwf	(DCmotorsInit@mL+1)^0,c
  1013   002352  0EBB               	movlw	low main@motorRight
  1014   002354  6E07               	movwf	DCmotorsInit@mR^0,c
  1015   002356  0E00               	movlw	high main@motorRight
  1016   002358  6E08               	movwf	(DCmotorsInit@mR+1)^0,c
  1017   00235A  EC72  F01D         	call	_DCmotorsInit	;wreg free
  1018   00235E                     
  1019                           ;MazeRobot.X/main.c: 112:     unsigned int turn_history[99];;MazeRobot.X/main.c: 113:   
      +                            unsigned int counter_history[99];;MazeRobot.X/main.c: 114:     unsigned int index = 0;
  1020   00235E  0E00               	movlw	0
  1021   002360  0100               	movlb	0	; () banked
  1022   002362  6FB2               	movwf	(main@index+1)& (0+255),b
  1023   002364  0E00               	movlw	0
  1024   002366  6FB1               	movwf	main@index& (0+255),b
  1025   002368                     
  1026                           ; BSR set to: 0
  1027                           ;MazeRobot.X/main.c: 115:     unsigned int forwardCount = 0;
  1028   002368  0E00               	movlw	0
  1029   00236A  6F99               	movwf	(main@forwardCount+1)& (0+255),b
  1030   00236C  0E00               	movlw	0
  1031   00236E  6F98               	movwf	main@forwardCount& (0+255),b
  1032   002370                     
  1033                           ; BSR set to: 0
  1034                           ;MazeRobot.X/main.c: 118:     ambientCal (&ambientRGBVal);
  1035   002370  0EA9               	movlw	low main@ambientRGBVal
  1036   002372  6E12               	movwf	ambientCal@v^0,c
  1037   002374  0E00               	movlw	high main@ambientRGBVal
  1038   002376  6E13               	movwf	(ambientCal@v+1)^0,c
  1039   002378  EC2A  F01C         	call	_ambientCal	;wreg free
  1040   00237C                     l4560:
  1041                           
  1042                           ;MazeRobot.X/main.c: 121:         getColor(&RGBVal);
  1043   00237C  0EA0               	movlw	low main@RGBVal
  1044   00237E  6E10               	movwf	getColor@v^0,c
  1045   002380  0E00               	movlw	high main@RGBVal
  1046   002382  6E11               	movwf	(getColor@v+1)^0,c
  1047   002384  EC4A  F01F         	call	_getColor	;wreg free
  1048   002388                     
  1049                           ;MazeRobot.X/main.c: 123:         if(!PORTFbits.RF2 & !PORTFbits.RF3){
  1050   002388  A68E               	btfss	142,3,c	;volatile
  1051   00238A  EFC9  F011         	goto	u4771
  1052   00238E  EFCC  F011         	goto	u4770
  1053   002392                     u4771:
  1054   002392  0E01               	movlw	1
  1055   002394  EFCD  F011         	goto	u4772
  1056   002398                     u4770:
  1057   002398  0E00               	movlw	0
  1058   00239A                     u4772:
  1059   00239A  6E51               	movwf	??_main^0,c
  1060   00239C  A48E               	btfss	142,2,c	;volatile
  1061   00239E  EFD3  F011         	goto	u4781
  1062   0023A2  EFD6  F011         	goto	u4780
  1063   0023A6                     u4781:
  1064   0023A6  0E01               	movlw	1
  1065   0023A8  EFD7  F011         	goto	u4782
  1066   0023AC                     u4780:
  1067   0023AC  0E00               	movlw	0
  1068   0023AE                     u4782:
  1069   0023AE  1451               	andwf	??_main^0,w,c
  1070   0023B0  A0E8               	btfss	wreg,0,c
  1071   0023B2  EFDD  F011         	goto	u4791
  1072   0023B6  EFDF  F011         	goto	u4790
  1073   0023BA                     u4791:
  1074   0023BA  EFFB  F011         	goto	l4574
  1075   0023BE                     u4790:
  1076   0023BE                     
  1077                           ;MazeRobot.X/main.c: 124:             LATDbits.LATD7 = 1 , LATHbits.LATH3 = 1;
  1078   0023BE  8E7C               	bsf	124,7,c	;volatile
  1079   0023C0  8680               	bsf	128,3,c	;volatile
  1080   0023C2                     
  1081                           ;MazeRobot.X/main.c: 125:             _delay((unsigned long)((500)*(64000000/4000.0)));
  1082   0023C2  0E29               	movlw	41
  1083   0023C4  6E52               	movwf	(??_main+1)^0,c
  1084   0023C6  0E96               	movlw	150
  1085   0023C8  6E51               	movwf	??_main^0,c
  1086   0023CA  0E7F               	movlw	127
  1087   0023CC                     u4997:
  1088   0023CC  2EE8               	decfsz	wreg,f,c
  1089   0023CE  D7FE               	bra	u4997
  1090   0023D0  2E51               	decfsz	??_main^0,f,c
  1091   0023D2  D7FC               	bra	u4997
  1092   0023D4  2E52               	decfsz	(??_main+1)^0,f,c
  1093   0023D6  D7FA               	bra	u4997
  1094   0023D8  F000               	nop	
  1095   0023DA                     
  1096                           ;MazeRobot.X/main.c: 126:             LATDbits.LATD7 = 0 , LATHbits.LATH3 = 0;
  1097   0023DA  9E7C               	bcf	124,7,c	;volatile
  1098   0023DC  9680               	bcf	128,3,c	;volatile
  1099   0023DE                     
  1100                           ;MazeRobot.X/main.c: 127:             carGo = !carGo;
  1101   0023DE  0100               	movlb	0	; () banked
  1102   0023E0  51A8               	movf	main@carGo& (0+255),w,b
  1103   0023E2  B4D8               	btfsc	status,2,c
  1104   0023E4  EFF6  F011         	goto	u4801
  1105   0023E8  EFF9  F011         	goto	u4800
  1106   0023EC                     u4801:
  1107   0023EC  0E01               	movlw	1
  1108   0023EE  EFFA  F011         	goto	u4810
  1109   0023F2                     u4800:
  1110   0023F2  0E00               	movlw	0
  1111   0023F4                     u4810:
  1112   0023F4  6FA8               	movwf	main@carGo& (0+255),b
  1113   0023F6                     l4574:
  1114                           
  1115                           ;MazeRobot.X/main.c: 131:         if (!PORTFbits.RF2 & PORTFbits.RF3){
  1116   0023F6  A48E               	btfss	142,2,c	;volatile
  1117   0023F8  EF00  F012         	goto	u4821
  1118   0023FC  EF03  F012         	goto	u4820
  1119   002400                     u4821:
  1120   002400  0E01               	movlw	1
  1121   002402  EF04  F012         	goto	u4830
  1122   002406                     u4820:
  1123   002406  0E00               	movlw	0
  1124   002408                     u4830:
  1125   002408  6E51               	movwf	??_main^0,c
  1126   00240A  6A52               	clrf	(??_main+1)^0,c
  1127   00240C  B68E               	btfsc	142,3,c	;volatile
  1128   00240E  EF0B  F012         	goto	u4841
  1129   002412  EF0F  F012         	goto	u4840
  1130   002416                     u4841:
  1131   002416  6A53               	clrf	(??_main+2)^0,c
  1132   002418  2A53               	incf	(??_main+2)^0,f,c
  1133   00241A  EF10  F012         	goto	u4848
  1134   00241E                     u4840:
  1135   00241E  6A53               	clrf	(??_main+2)^0,c
  1136   002420                     u4848:
  1137   002420  5053               	movf	(??_main+2)^0,w,c
  1138   002422  1651               	andwf	??_main^0,f,c
  1139   002424  0E00               	movlw	0
  1140   002426  1652               	andwf	(??_main+1)^0,f,c
  1141   002428  5051               	movf	??_main^0,w,c
  1142   00242A  1052               	iorwf	(??_main+1)^0,w,c
  1143   00242C  B4D8               	btfsc	status,2,c
  1144   00242E  EF1B  F012         	goto	u4851
  1145   002432  EF1D  F012         	goto	u4850
  1146   002436                     u4851:
  1147   002436  EF23  F012         	goto	l4578
  1148   00243A                     u4850:
  1149   00243A                     
  1150                           ;MazeRobot.X/main.c: 132:             ambientCal (&ambientRGBVal);
  1151   00243A  0EA9               	movlw	low main@ambientRGBVal
  1152   00243C  6E12               	movwf	ambientCal@v^0,c
  1153   00243E  0E00               	movlw	high main@ambientRGBVal
  1154   002440  6E13               	movwf	(ambientCal@v+1)^0,c
  1155   002442  EC2A  F01C         	call	_ambientCal	;wreg free
  1156   002446                     l4578:
  1157                           
  1158                           ;MazeRobot.X/main.c: 135:         if (!PORTFbits.RF3 & PORTFbits.RF2){
  1159   002446  A68E               	btfss	142,3,c	;volatile
  1160   002448  EF28  F012         	goto	u4861
  1161   00244C  EF2B  F012         	goto	u4860
  1162   002450                     u4861:
  1163   002450  0E01               	movlw	1
  1164   002452  EF2C  F012         	goto	u4870
  1165   002456                     u4860:
  1166   002456  0E00               	movlw	0
  1167   002458                     u4870:
  1168   002458  6E51               	movwf	??_main^0,c
  1169   00245A  6A52               	clrf	(??_main+1)^0,c
  1170   00245C  B48E               	btfsc	142,2,c	;volatile
  1171   00245E  EF33  F012         	goto	u4881
  1172   002462  EF37  F012         	goto	u4880
  1173   002466                     u4881:
  1174   002466  6A53               	clrf	(??_main+2)^0,c
  1175   002468  2A53               	incf	(??_main+2)^0,f,c
  1176   00246A  EF38  F012         	goto	u4888
  1177   00246E                     u4880:
  1178   00246E  6A53               	clrf	(??_main+2)^0,c
  1179   002470                     u4888:
  1180   002470  5053               	movf	(??_main+2)^0,w,c
  1181   002472  1651               	andwf	??_main^0,f,c
  1182   002474  0E00               	movlw	0
  1183   002476  1652               	andwf	(??_main+1)^0,f,c
  1184   002478  5051               	movf	??_main^0,w,c
  1185   00247A  1052               	iorwf	(??_main+1)^0,w,c
  1186   00247C  B4D8               	btfsc	status,2,c
  1187   00247E  EF43  F012         	goto	u4891
  1188   002482  EF45  F012         	goto	u4890
  1189   002486                     u4891:
  1190   002486  EF4B  F012         	goto	l4582
  1191   00248A                     u4890:
  1192   00248A                     
  1193                           ;MazeRobot.X/main.c: 136:             whiteCal (&whiteRGBVal);
  1194   00248A  0EB3               	movlw	low main@whiteRGBVal
  1195   00248C  6E12               	movwf	whiteCal@v^0,c
  1196   00248E  0E00               	movlw	high main@whiteRGBVal
  1197   002490  6E13               	movwf	(whiteCal@v+1)^0,c
  1198   002492  ECB8  F01B         	call	_whiteCal	;wreg free
  1199   002496                     l4582:
  1200                           
  1201                           ;MazeRobot.X/main.c: 139:         LATHbits.LATH3=!LATHbits.LATH3;
  1202   002496  A680               	btfss	128,3,c	;volatile
  1203   002498  EF50  F012         	goto	u4901
  1204   00249C  EF54  F012         	goto	u4900
  1205   0024A0                     u4901:
  1206   0024A0  6A51               	clrf	??_main^0,c
  1207   0024A2  2A51               	incf	??_main^0,f,c
  1208   0024A4  EF55  F012         	goto	u4918
  1209   0024A8                     u4900:
  1210   0024A8  6A51               	clrf	??_main^0,c
  1211   0024AA                     u4918:
  1212   0024AA  4651               	rlncf	??_main^0,f,c
  1213   0024AC  4651               	rlncf	??_main^0,f,c
  1214   0024AE  4651               	rlncf	??_main^0,f,c
  1215   0024B0  5080               	movf	128,w,c	;volatile
  1216   0024B2  1851               	xorwf	??_main^0,w,c
  1217   0024B4  0BF7               	andlw	-9
  1218   0024B6  1851               	xorwf	??_main^0,w,c
  1219   0024B8  6E80               	movwf	128,c	;volatile
  1220   0024BA                     
  1221                           ;MazeRobot.X/main.c: 141:         whiteC = whiteRGBVal.C;
  1222   0024BA  C0B9  F005         	movff	main@whiteRGBVal+6,___xxtofl@val
  1223   0024BE  C0BA  F006         	movff	main@whiteRGBVal+7,___xxtofl@val+1
  1224   0024C2  6A07               	clrf	(___xxtofl@val+2)^0,c
  1225   0024C4  6A08               	clrf	(___xxtofl@val+3)^0,c
  1226   0024C6  0E00               	movlw	0
  1227   0024C8  EC6E  F016         	call	___xxtofl
  1228   0024CC  C005  F094         	movff	?___xxtofl,main@whiteC
  1229   0024D0  C006  F095         	movff	?___xxtofl+1,main@whiteC+1
  1230   0024D4  C007  F096         	movff	?___xxtofl+2,main@whiteC+2
  1231   0024D8  C008  F097         	movff	?___xxtofl+3,main@whiteC+3
  1232   0024DC                     
  1233                           ;MazeRobot.X/main.c: 142:         clearRef = RGBVal.C/whiteC;
  1234   0024DC  C0A6  F005         	movff	main@RGBVal+6,___xxtofl@val
  1235   0024E0  C0A7  F006         	movff	main@RGBVal+7,___xxtofl@val+1
  1236   0024E4  6A07               	clrf	(___xxtofl@val+2)^0,c
  1237   0024E6  6A08               	clrf	(___xxtofl@val+3)^0,c
  1238   0024E8  0E00               	movlw	0
  1239   0024EA  EC6E  F016         	call	___xxtofl
  1240   0024EE  C005  F036         	movff	?___xxtofl,___fldiv@b
  1241   0024F2  C006  F037         	movff	?___xxtofl+1,___fldiv@b+1
  1242   0024F6  C007  F038         	movff	?___xxtofl+2,___fldiv@b+2
  1243   0024FA  C008  F039         	movff	?___xxtofl+3,___fldiv@b+3
  1244   0024FE  C094  F03A         	movff	main@whiteC,___fldiv@a
  1245   002502  C095  F03B         	movff	main@whiteC+1,___fldiv@a+1
  1246   002506  C096  F03C         	movff	main@whiteC+2,___fldiv@a+2
  1247   00250A  C097  F03D         	movff	main@whiteC+3,___fldiv@a+3
  1248   00250E  EC8E  F013         	call	___fldiv	;wreg free
  1249   002512  C036  F09A         	movff	?___fldiv,main@clearRef
  1250   002516  C037  F09B         	movff	?___fldiv+1,main@clearRef+1
  1251   00251A  C038  F09C         	movff	?___fldiv+2,main@clearRef+2
  1252   00251E  C039  F09D         	movff	?___fldiv+3,main@clearRef+3
  1253   002522                     
  1254                           ;MazeRobot.X/main.c: 144:         if ((clearRef > 0.12) & carGo){
  1255   002522  0E8F               	movlw	143
  1256   002524  6E1D               	movwf	___flge@ff1^0,c
  1257   002526  0EC2               	movlw	194
  1258   002528  6E1E               	movwf	(___flge@ff1+1)^0,c
  1259   00252A  0EF5               	movlw	245
  1260   00252C  6E1F               	movwf	(___flge@ff1+2)^0,c
  1261   00252E  0E3D               	movlw	61
  1262   002530  6E20               	movwf	(___flge@ff1+3)^0,c
  1263   002532  C09A  F021         	movff	main@clearRef,___flge@ff2
  1264   002536  C09B  F022         	movff	main@clearRef+1,___flge@ff2+1
  1265   00253A  C09C  F023         	movff	main@clearRef+2,___flge@ff2+2
  1266   00253E  C09D  F024         	movff	main@clearRef+3,___flge@ff2+3
  1267   002542  EC36  F01B         	call	___flge	;wreg free
  1268   002546  A0D8               	btfss	status,0,c
  1269   002548  EFA8  F012         	goto	u4921
  1270   00254C  EFAB  F012         	goto	u4920
  1271   002550                     u4921:
  1272   002550  0E01               	movlw	1
  1273   002552  EFAC  F012         	goto	u4930
  1274   002556                     u4920:
  1275   002556  0E00               	movlw	0
  1276   002558                     u4930:
  1277   002558  6E51               	movwf	??_main^0,c
  1278   00255A  6A52               	clrf	(??_main+1)^0,c
  1279   00255C  0100               	movlb	0	; () banked
  1280   00255E  51A8               	movf	main@carGo& (0+255),w,b
  1281   002560  1651               	andwf	??_main^0,f,c
  1282   002562  0E00               	movlw	0
  1283   002564  1652               	andwf	(??_main+1)^0,f,c
  1284   002566  5051               	movf	??_main^0,w,c
  1285   002568  1052               	iorwf	(??_main+1)^0,w,c
  1286   00256A  B4D8               	btfsc	status,2,c
  1287   00256C  EFBA  F012         	goto	u4941
  1288   002570  EFBC  F012         	goto	u4940
  1289   002574                     u4941:
  1290   002574  EF4C  F013         	goto	l4616
  1291   002578                     u4940:
  1292   002578                     
  1293                           ; BSR set to: 0
  1294                           ;MazeRobot.X/main.c: 145:             turn_history[index] = 0;
  1295   002578  90D8               	bcf	status,0,c
  1296   00257A  35B1               	rlcf	main@index& (0+255),w,b
  1297   00257C  6ED9               	movwf	fsr2l,c
  1298   00257E  35B2               	rlcf	(main@index+1)& (0+255),w,b
  1299   002580  6EDA               	movwf	fsr2h,c
  1300   002582  0E00               	movlw	low main@turn_history
  1301   002584  26D9               	addwf	fsr2l,f,c
  1302   002586  0E01               	movlw	high main@turn_history
  1303   002588  22DA               	addwfc	fsr2h,f,c
  1304   00258A  0E00               	movlw	0
  1305   00258C  6EDE               	movwf	postinc2,c
  1306   00258E  0E00               	movlw	0
  1307   002590  6EDD               	movwf	postdec2,c
  1308                           
  1309                           ;MazeRobot.X/main.c: 146:             counter_history[index] = forwardCount;
  1310   002592  90D8               	bcf	status,0,c
  1311   002594  35B1               	rlcf	main@index& (0+255),w,b
  1312   002596  6ED9               	movwf	fsr2l,c
  1313   002598  35B2               	rlcf	(main@index+1)& (0+255),w,b
  1314   00259A  6EDA               	movwf	fsr2h,c
  1315   00259C  0E00               	movlw	low main@counter_history
  1316   00259E  26D9               	addwf	fsr2l,f,c
  1317   0025A0  0E02               	movlw	high main@counter_history
  1318   0025A2  22DA               	addwfc	fsr2h,f,c
  1319   0025A4  C098  FFDE         	movff	main@forwardCount,postinc2
  1320   0025A8  C099  FFDD         	movff	main@forwardCount+1,postdec2
  1321   0025AC                     
  1322                           ; BSR set to: 0
  1323                           ;MazeRobot.X/main.c: 148:             index +=1;
  1324   0025AC  4BB1               	infsnz	main@index& (0+255),f,b
  1325   0025AE  2BB2               	incf	(main@index+1)& (0+255),f,b
  1326   0025B0                     
  1327                           ; BSR set to: 0
  1328                           ;MazeRobot.X/main.c: 149:             forwardCount = 0;
  1329   0025B0  0E00               	movlw	0
  1330   0025B2  6F99               	movwf	(main@forwardCount+1)& (0+255),b
  1331   0025B4  0E00               	movlw	0
  1332   0025B6  6F98               	movwf	main@forwardCount& (0+255),b
  1333   0025B8                     
  1334                           ; BSR set to: 0
  1335                           ;MazeRobot.X/main.c: 151:             colorNum = colorDetect(clearRef,&ambientRGBVal,&wh
      +                          iteRGBVal,&motorLeft,&motorRight);
  1336   0025B8  C09A  F060         	movff	main@clearRef,colorDetect@clearRef
  1337   0025BC  C09B  F061         	movff	main@clearRef+1,colorDetect@clearRef+1
  1338   0025C0  C09C  F062         	movff	main@clearRef+2,colorDetect@clearRef+2
  1339   0025C4  C09D  F063         	movff	main@clearRef+3,colorDetect@clearRef+3
  1340   0025C8  0EA9               	movlw	low main@ambientRGBVal
  1341   0025CA  6F64               	movwf	colorDetect@ambientRGBVal& (0+255),b
  1342   0025CC  0E00               	movlw	high main@ambientRGBVal
  1343   0025CE  6F65               	movwf	(colorDetect@ambientRGBVal+1)& (0+255),b
  1344   0025D0  0EB3               	movlw	low main@whiteRGBVal
  1345   0025D2  6F66               	movwf	colorDetect@whiteRGBVal& (0+255),b
  1346   0025D4  0E00               	movlw	high main@whiteRGBVal
  1347   0025D6  6F67               	movwf	(colorDetect@whiteRGBVal+1)& (0+255),b
  1348   0025D8  0EC4               	movlw	low main@motorLeft
  1349   0025DA  6F68               	movwf	colorDetect@mL& (0+255),b
  1350   0025DC  0E00               	movlw	high main@motorLeft
  1351   0025DE  6F69               	movwf	(colorDetect@mL+1)& (0+255),b
  1352   0025E0  0EBB               	movlw	low main@motorRight
  1353   0025E2  6F6A               	movwf	colorDetect@mR& (0+255),b
  1354   0025E4  0E00               	movlw	high main@motorRight
  1355   0025E6  6F6B               	movwf	(colorDetect@mR+1)& (0+255),b
  1356   0025E8  EC09  F007         	call	_colorDetect	;wreg free
  1357   0025EC  C060  F09E         	movff	?_colorDetect,main@colorNum
  1358   0025F0  C061  F09F         	movff	?_colorDetect+1,main@colorNum+1
  1359   0025F4                     
  1360                           ;MazeRobot.X/main.c: 153:             if (colorNum == 8){
  1361   0025F4  0E08               	movlw	8
  1362   0025F6  0100               	movlb	0	; () banked
  1363   0025F8  199E               	xorwf	main@colorNum& (0+255),w,b
  1364   0025FA  119F               	iorwf	(main@colorNum+1)& (0+255),w,b
  1365   0025FC  A4D8               	btfss	status,2,c
  1366   0025FE  EF03  F013         	goto	u4951
  1367   002602  EF05  F013         	goto	u4950
  1368   002606                     u4951:
  1369   002606  EF22  F013         	goto	l4608
  1370   00260A                     u4950:
  1371   00260A                     
  1372                           ; BSR set to: 0
  1373                           ;MazeRobot.X/main.c: 154:                 LATDbits.LATD7 = 1 , LATHbits.LATH3 = 1;
  1374   00260A  8E7C               	bsf	124,7,c	;volatile
  1375   00260C  8680               	bsf	128,3,c	;volatile
  1376   00260E                     
  1377                           ; BSR set to: 0
  1378                           ;MazeRobot.X/main.c: 155:                 return_home_turns(&turn_history, &counter_hist
      +                          ory, (index), &motorLeft, &motorRight);
  1379   00260E  0E00               	movlw	low main@turn_history
  1380   002610  6E24               	movwf	return_home_turns@turn_history^0,c
  1381   002612  0E01               	movlw	high main@turn_history
  1382   002614  6E25               	movwf	(return_home_turns@turn_history+1)^0,c
  1383   002616  0E00               	movlw	low main@counter_history
  1384   002618  6E26               	movwf	return_home_turns@counter_history^0,c
  1385   00261A  0E02               	movlw	high main@counter_history
  1386   00261C  6E27               	movwf	(return_home_turns@counter_history+1)^0,c
  1387   00261E  C0B1  F028         	movff	main@index,return_home_turns@index
  1388   002622  C0B2  F029         	movff	main@index+1,return_home_turns@index+1
  1389   002626  0EC4               	movlw	low main@motorLeft
  1390   002628  6E2A               	movwf	return_home_turns@mL^0,c
  1391   00262A  0E00               	movlw	high main@motorLeft
  1392   00262C  6E2B               	movwf	(return_home_turns@mL+1)^0,c
  1393   00262E  0EBB               	movlw	low main@motorRight
  1394   002630  6E2C               	movwf	return_home_turns@mR^0,c
  1395   002632  0E00               	movlw	high main@motorRight
  1396   002634  6E2D               	movwf	(return_home_turns@mR+1)^0,c
  1397   002636  EC48  F017         	call	_return_home_turns	;wreg free
  1398   00263A                     
  1399                           ;MazeRobot.X/main.c: 156:                 carGo = 0;
  1400   00263A  0E00               	movlw	0
  1401   00263C  0100               	movlb	0	; () banked
  1402   00263E  6FA8               	movwf	main@carGo& (0+255),b
  1403   002640                     l4606:
  1404                           
  1405                           ; BSR set to: 0
  1406                           ;MazeRobot.X/main.c: 158:             }
  1407   002640  EF3E  F013         	goto	l4612
  1408   002644                     l4608:
  1409                           
  1410                           ; BSR set to: 0
  1411                           ;MazeRobot.X/main.c: 161:             turn_history[index] = colorNum;
  1412   002644  90D8               	bcf	status,0,c
  1413   002646  35B1               	rlcf	main@index& (0+255),w,b
  1414   002648  6ED9               	movwf	fsr2l,c
  1415   00264A  35B2               	rlcf	(main@index+1)& (0+255),w,b
  1416   00264C  6EDA               	movwf	fsr2h,c
  1417   00264E  0E00               	movlw	low main@turn_history
  1418   002650  26D9               	addwf	fsr2l,f,c
  1419   002652  0E01               	movlw	high main@turn_history
  1420   002654  22DA               	addwfc	fsr2h,f,c
  1421   002656  C09E  FFDE         	movff	main@colorNum,postinc2
  1422   00265A  C09F  FFDD         	movff	main@colorNum+1,postdec2
  1423                           
  1424                           ;MazeRobot.X/main.c: 162:             counter_history[index] = 1;
  1425   00265E  90D8               	bcf	status,0,c
  1426   002660  35B1               	rlcf	main@index& (0+255),w,b
  1427   002662  6ED9               	movwf	fsr2l,c
  1428   002664  35B2               	rlcf	(main@index+1)& (0+255),w,b
  1429   002666  6EDA               	movwf	fsr2h,c
  1430   002668  0E00               	movlw	low main@counter_history
  1431   00266A  26D9               	addwf	fsr2l,f,c
  1432   00266C  0E02               	movlw	high main@counter_history
  1433   00266E  22DA               	addwfc	fsr2h,f,c
  1434   002670  0E01               	movlw	1
  1435   002672  6EDE               	movwf	postinc2,c
  1436   002674  0E00               	movlw	0
  1437   002676  6EDD               	movwf	postdec2,c
  1438   002678  EF20  F013         	goto	l4606
  1439   00267C                     l4612:
  1440                           
  1441                           ; BSR set to: 0
  1442                           ;MazeRobot.X/main.c: 166:             index += 1;
  1443   00267C  4BB1               	infsnz	main@index& (0+255),f,b
  1444   00267E  2BB2               	incf	(main@index+1)& (0+255),f,b
  1445   002680                     
  1446                           ; BSR set to: 0
  1447                           ;MazeRobot.X/main.c: 167:             _delay((unsigned long)((500)*(64000000/4000.0)));
  1448   002680  0E29               	movlw	41
  1449   002682  6E52               	movwf	(??_main+1)^0,c
  1450   002684  0E96               	movlw	150
  1451   002686  6E51               	movwf	??_main^0,c
  1452   002688  0E7F               	movlw	127
  1453   00268A                     u5007:
  1454   00268A  2EE8               	decfsz	wreg,f,c
  1455   00268C  D7FE               	bra	u5007
  1456   00268E  2E51               	decfsz	??_main^0,f,c
  1457   002690  D7FC               	bra	u5007
  1458   002692  2E52               	decfsz	(??_main+1)^0,f,c
  1459   002694  D7FA               	bra	u5007
  1460   002696  F000               	nop	
  1461   002698                     l4616:
  1462                           
  1463                           ;MazeRobot.X/main.c: 170:         if (carGo){
  1464   002698  0100               	movlb	0	; () banked
  1465   00269A  51A8               	movf	main@carGo& (0+255),w,b
  1466   00269C  B4D8               	btfsc	status,2,c
  1467   00269E  EF53  F013         	goto	u4961
  1468   0026A2  EF55  F013         	goto	u4960
  1469   0026A6                     u4961:
  1470   0026A6  EF74  F013         	goto	l4624
  1471   0026AA                     u4960:
  1472   0026AA                     
  1473                           ; BSR set to: 0
  1474                           ;MazeRobot.X/main.c: 171:             forward(&motorLeft,&motorRight);
  1475   0026AA  0EC4               	movlw	low main@motorLeft
  1476   0026AC  6E18               	movwf	forward@mL^0,c
  1477   0026AE  0E00               	movlw	high main@motorLeft
  1478   0026B0  6E19               	movwf	(forward@mL+1)^0,c
  1479   0026B2  0EBB               	movlw	low main@motorRight
  1480   0026B4  6E1A               	movwf	forward@mR^0,c
  1481   0026B6  0E00               	movlw	high main@motorRight
  1482   0026B8  6E1B               	movwf	(forward@mR+1)^0,c
  1483   0026BA  EC9C  F01C         	call	_forward	;wreg free
  1484   0026BE                     
  1485                           ;MazeRobot.X/main.c: 172:             LATDbits.LATD4 = !LATDbits.LATD4;
  1486   0026BE  A87C               	btfss	124,4,c	;volatile
  1487   0026C0  EF64  F013         	goto	u4971
  1488   0026C4  EF68  F013         	goto	u4970
  1489   0026C8                     u4971:
  1490   0026C8  6A51               	clrf	??_main^0,c
  1491   0026CA  2A51               	incf	??_main^0,f,c
  1492   0026CC  EF69  F013         	goto	u4988
  1493   0026D0                     u4970:
  1494   0026D0  6A51               	clrf	??_main^0,c
  1495   0026D2                     u4988:
  1496   0026D2  3A51               	swapf	??_main^0,f,c
  1497   0026D4  507C               	movf	124,w,c	;volatile
  1498   0026D6  1851               	xorwf	??_main^0,w,c
  1499   0026D8  0BEF               	andlw	-17
  1500   0026DA  1851               	xorwf	??_main^0,w,c
  1501   0026DC  6E7C               	movwf	124,c	;volatile
  1502   0026DE                     
  1503                           ;MazeRobot.X/main.c: 173:             forwardCount +=1;
  1504   0026DE  0100               	movlb	0	; () banked
  1505   0026E0  4B98               	infsnz	main@forwardCount& (0+255),f,b
  1506   0026E2  2B99               	incf	(main@forwardCount+1)& (0+255),f,b
  1507                           
  1508                           ;MazeRobot.X/main.c: 174:         }
  1509   0026E4  EF7E  F013         	goto	l4626
  1510   0026E8                     l4624:
  1511                           
  1512                           ; BSR set to: 0
  1513   0026E8  0EC4               	movlw	low main@motorLeft
  1514   0026EA  6E18               	movwf	stop@mL^0,c
  1515   0026EC  0E00               	movlw	high main@motorLeft
  1516   0026EE  6E19               	movwf	(stop@mL+1)^0,c
  1517   0026F0  0EBB               	movlw	low main@motorRight
  1518   0026F2  6E1A               	movwf	stop@mR^0,c
  1519   0026F4  0E00               	movlw	high main@motorRight
  1520   0026F6  6E1B               	movwf	(stop@mR+1)^0,c
  1521   0026F8  ECDB  F01D         	call	_stop	;wreg free
  1522   0026FC                     l4626:
  1523                           
  1524                           ;MazeRobot.X/main.c: 178:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1525   0026FC  0E05               	movlw	5
  1526   0026FE  6E52               	movwf	(??_main+1)^0,c
  1527   002700  0E0F               	movlw	15
  1528   002702  6E51               	movwf	??_main^0,c
  1529   002704  0EF1               	movlw	241
  1530   002706                     u5017:
  1531   002706  2EE8               	decfsz	wreg,f,c
  1532   002708  D7FE               	bra	u5017
  1533   00270A  2E51               	decfsz	??_main^0,f,c
  1534   00270C  D7FC               	bra	u5017
  1535   00270E  2E52               	decfsz	(??_main+1)^0,f,c
  1536   002710  D7FA               	bra	u5017
  1537   002712  F000               	nop	
  1538   002714  EFBE  F011         	goto	l4560
  1539   002718  EF3B  F000         	goto	start
  1540   00271C                     __end_of_main:
  1541                           	callstack 0
  1542                           
  1543 ;; *************** function _whiteCal *****************
  1544 ;; Defined at:
  1545 ;;		line 115 in file "MazeRobot.X/color.c"
  1546 ;; Parameters:    Size  Location     Type
  1547 ;;  v               2   17[COMRAM] PTR struct RGB
  1548 ;;		 -> main@whiteRGBVal(8), 
  1549 ;; Auto vars:     Size  Location     Type
  1550 ;;  i               2   21[COMRAM] int 
  1551 ;; Return value:  Size  Location     Type
  1552 ;;                  1    wreg      void 
  1553 ;; Registers used:
  1554 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1555 ;; Tracked objects:
  1556 ;;		On entry : 0/0
  1557 ;;		On exit  : 0/0
  1558 ;;		Unchanged: 0/0
  1559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1560 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1561 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1562 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1563 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1564 ;;Total ram usage:        6 bytes
  1565 ;; Hardware stack levels used: 1
  1566 ;; Hardware stack levels required when called: 6
  1567 ;; This function calls:
  1568 ;;		_getColor
  1569 ;; This function is called by:
  1570 ;;		_main
  1571 ;; This function uses a non-reentrant model
  1572 ;;
  1573                           
  1574                           	psect	text1
  1575   003770                     __ptext1:
  1576                           	callstack 0
  1577   003770                     _whiteCal:
  1578                           	callstack 24
  1579   003770                     
  1580                           ;MazeRobot.X/color.c: 117:     for(int i = 0;i<20;i++){
  1581   003770  0E00               	movlw	0
  1582   003772  6E17               	movwf	(whiteCal@i+1)^0,c
  1583   003774  0E00               	movlw	0
  1584   003776  6E16               	movwf	whiteCal@i^0,c
  1585   003778                     l3740:
  1586                           
  1587                           ;MazeRobot.X/color.c: 118:             LATDbits.LATD7 = !LATDbits.LATD7;
  1588   003778  AE7C               	btfss	124,7,c	;volatile
  1589   00377A  EFC1  F01B         	goto	u3621
  1590   00377E  EFC5  F01B         	goto	u3620
  1591   003782                     u3621:
  1592   003782  6A14               	clrf	??_whiteCal^0,c
  1593   003784  2A14               	incf	??_whiteCal^0,f,c
  1594   003786  EFC6  F01B         	goto	u3638
  1595   00378A                     u3620:
  1596   00378A  6A14               	clrf	??_whiteCal^0,c
  1597   00378C                     u3638:
  1598   00378C  3214               	rrcf	??_whiteCal^0,f,c
  1599   00378E  3214               	rrcf	??_whiteCal^0,f,c
  1600   003790  507C               	movf	124,w,c	;volatile
  1601   003792  1814               	xorwf	??_whiteCal^0,w,c
  1602   003794  0B7F               	andlw	-129
  1603   003796  1814               	xorwf	??_whiteCal^0,w,c
  1604   003798  6E7C               	movwf	124,c	;volatile
  1605   00379A                     
  1606                           ;MazeRobot.X/color.c: 119:             _delay((unsigned long)((100)*(64000000/4000.0)));
  1607   00379A  0E09               	movlw	9
  1608   00379C  6E15               	movwf	(??_whiteCal+1)^0,c
  1609   00379E  0E1E               	movlw	30
  1610   0037A0  6E14               	movwf	??_whiteCal^0,c
  1611   0037A2  0EE4               	movlw	228
  1612   0037A4                     u5027:
  1613   0037A4  2EE8               	decfsz	wreg,f,c
  1614   0037A6  D7FE               	bra	u5027
  1615   0037A8  2E14               	decfsz	??_whiteCal^0,f,c
  1616   0037AA  D7FC               	bra	u5027
  1617   0037AC  2E15               	decfsz	(??_whiteCal+1)^0,f,c
  1618   0037AE  D7FA               	bra	u5027
  1619   0037B0  D000               	nop2	
  1620                           
  1621                           ;MazeRobot.X/color.c: 120:             }
  1622   0037B2  4A16               	infsnz	whiteCal@i^0,f,c
  1623   0037B4  2A17               	incf	(whiteCal@i+1)^0,f,c
  1624   0037B6  BE17               	btfsc	(whiteCal@i+1)^0,7,c
  1625   0037B8  EFE7  F01B         	goto	u3641
  1626   0037BC  5017               	movf	(whiteCal@i+1)^0,w,c
  1627   0037BE  E109               	bnz	u3640
  1628   0037C0  0E14               	movlw	20
  1629   0037C2  5C16               	subwf	whiteCal@i^0,w,c
  1630   0037C4  A0D8               	btfss	status,0,c
  1631   0037C6  EFE7  F01B         	goto	u3641
  1632   0037CA  EFE9  F01B         	goto	u3640
  1633   0037CE                     u3641:
  1634   0037CE  EFBC  F01B         	goto	l3740
  1635   0037D2                     u3640:
  1636   0037D2                     
  1637                           ;MazeRobot.X/color.c: 121:             LATDbits.LATD7 = !LATDbits.LATD7;
  1638   0037D2  AE7C               	btfss	124,7,c	;volatile
  1639   0037D4  EFEE  F01B         	goto	u3651
  1640   0037D8  EFF2  F01B         	goto	u3650
  1641   0037DC                     u3651:
  1642   0037DC  6A14               	clrf	??_whiteCal^0,c
  1643   0037DE  2A14               	incf	??_whiteCal^0,f,c
  1644   0037E0  EFF3  F01B         	goto	u3668
  1645   0037E4                     u3650:
  1646   0037E4  6A14               	clrf	??_whiteCal^0,c
  1647   0037E6                     u3668:
  1648   0037E6  3214               	rrcf	??_whiteCal^0,f,c
  1649   0037E8  3214               	rrcf	??_whiteCal^0,f,c
  1650   0037EA  507C               	movf	124,w,c	;volatile
  1651   0037EC  1814               	xorwf	??_whiteCal^0,w,c
  1652   0037EE  0B7F               	andlw	-129
  1653   0037F0  1814               	xorwf	??_whiteCal^0,w,c
  1654   0037F2  6E7C               	movwf	124,c	;volatile
  1655   0037F4                     
  1656                           ;MazeRobot.X/color.c: 122:             _delay((unsigned long)((500)*(64000000/4000.0)));
  1657   0037F4  0E29               	movlw	41
  1658   0037F6  6E15               	movwf	(??_whiteCal+1)^0,c
  1659   0037F8  0E96               	movlw	150
  1660   0037FA  6E14               	movwf	??_whiteCal^0,c
  1661   0037FC  0E7F               	movlw	127
  1662   0037FE                     u5037:
  1663   0037FE  2EE8               	decfsz	wreg,f,c
  1664   003800  D7FE               	bra	u5037
  1665   003802  2E14               	decfsz	??_whiteCal^0,f,c
  1666   003804  D7FC               	bra	u5037
  1667   003806  2E15               	decfsz	(??_whiteCal+1)^0,f,c
  1668   003808  D7FA               	bra	u5037
  1669   00380A  F000               	nop	
  1670   00380C                     
  1671                           ;MazeRobot.X/color.c: 123:             getColor(v);
  1672   00380C  C012  F010         	movff	whiteCal@v,getColor@v
  1673   003810  C013  F011         	movff	whiteCal@v+1,getColor@v+1
  1674   003814  EC4A  F01F         	call	_getColor	;wreg free
  1675   003818                     
  1676                           ;MazeRobot.X/color.c: 124:             _delay((unsigned long)((500)*(64000000/4000.0)));
  1677   003818  0E29               	movlw	41
  1678   00381A  6E15               	movwf	(??_whiteCal+1)^0,c
  1679   00381C  0E96               	movlw	150
  1680   00381E  6E14               	movwf	??_whiteCal^0,c
  1681   003820  0E7F               	movlw	127
  1682   003822                     u5047:
  1683   003822  2EE8               	decfsz	wreg,f,c
  1684   003824  D7FE               	bra	u5047
  1685   003826  2E14               	decfsz	??_whiteCal^0,f,c
  1686   003828  D7FC               	bra	u5047
  1687   00382A  2E15               	decfsz	(??_whiteCal+1)^0,f,c
  1688   00382C  D7FA               	bra	u5047
  1689   00382E  F000               	nop	
  1690   003830                     
  1691                           ;MazeRobot.X/color.c: 125:             LATDbits.LATD7 = !LATDbits.LATD7;
  1692   003830  AE7C               	btfss	124,7,c	;volatile
  1693   003832  EF1D  F01C         	goto	u3671
  1694   003836  EF21  F01C         	goto	u3670
  1695   00383A                     u3671:
  1696   00383A  6A14               	clrf	??_whiteCal^0,c
  1697   00383C  2A14               	incf	??_whiteCal^0,f,c
  1698   00383E  EF22  F01C         	goto	u3688
  1699   003842                     u3670:
  1700   003842  6A14               	clrf	??_whiteCal^0,c
  1701   003844                     u3688:
  1702   003844  3214               	rrcf	??_whiteCal^0,f,c
  1703   003846  3214               	rrcf	??_whiteCal^0,f,c
  1704   003848  507C               	movf	124,w,c	;volatile
  1705   00384A  1814               	xorwf	??_whiteCal^0,w,c
  1706   00384C  0B7F               	andlw	-129
  1707   00384E  1814               	xorwf	??_whiteCal^0,w,c
  1708   003850  6E7C               	movwf	124,c	;volatile
  1709   003852  0012               	return		;funcret
  1710   003854                     __end_of_whiteCal:
  1711                           	callstack 0
  1712                           
  1713 ;; *************** function _return_home_turns *****************
  1714 ;; Defined at:
  1715 ;;		line 227 in file "MazeRobot.X/color.c"
  1716 ;; Parameters:    Size  Location     Type
  1717 ;;  turn_history    2   35[COMRAM] PTR unsigned int 
  1718 ;;		 -> main@turn_history(198), 
  1719 ;;  counter_hist    2   37[COMRAM] PTR unsigned int 
  1720 ;;		 -> main@counter_history(198), 
  1721 ;;  index           2   39[COMRAM] unsigned int 
  1722 ;;  mL              2   41[COMRAM] PTR struct DC_motor
  1723 ;;		 -> main@motorLeft(9), 
  1724 ;;  mR              2   43[COMRAM] PTR struct DC_motor
  1725 ;;		 -> main@motorRight(9), 
  1726 ;; Auto vars:     Size  Location     Type
  1727 ;;  i               2   47[COMRAM] int 
  1728 ;;  k               2   49[COMRAM] int 
  1729 ;; Return value:  Size  Location     Type
  1730 ;;                  1    wreg      void 
  1731 ;; Registers used:
  1732 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1733 ;; Tracked objects:
  1734 ;;		On entry : 0/0
  1735 ;;		On exit  : 0/0
  1736 ;;		Unchanged: 0/0
  1737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1738 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1739 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1740 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1741 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1742 ;;Total ram usage:       16 bytes
  1743 ;; Hardware stack levels used: 1
  1744 ;; Hardware stack levels required when called: 6
  1745 ;; This function calls:
  1746 ;;		_forward
  1747 ;;		_turnLeft_135
  1748 ;;		_turnLeft_90
  1749 ;;		_turnRight_135
  1750 ;;		_turnRight_90
  1751 ;;		_turn_180
  1752 ;; This function is called by:
  1753 ;;		_main
  1754 ;; This function uses a non-reentrant model
  1755 ;;
  1756                           
  1757                           	psect	text2
  1758   002E90                     __ptext2:
  1759                           	callstack 0
  1760   002E90                     _return_home_turns:
  1761                           	callstack 24
  1762   002E90                     
  1763                           ;MazeRobot.X/color.c: 227: void return_home_turns(unsigned int *turn_history, unsigned i
      +                          nt *counter_history, unsigned int index, DC_motor *mL, DC_motor *mR);MazeRobot.X/color.c
      +                          : 228: {;MazeRobot.X/color.c: 231:     for (int k = index; k >=0; k --){
  1764   002E90  C028  F032         	movff	return_home_turns@index,return_home_turns@k
  1765   002E94  C029  F033         	movff	return_home_turns@index+1,return_home_turns@k+1
  1766   002E98                     l3918:
  1767   002E98  BE33               	btfsc	(return_home_turns@k+1)^0,7,c
  1768   002E9A  EF53  F017         	goto	u4010
  1769   002E9E  EF51  F017         	goto	u4011
  1770   002EA2                     u4011:
  1771   002EA2  EFC8  F017         	goto	l3946
  1772   002EA6                     u4010:
  1773   002EA6  EF04  F018         	goto	l126
  1774   002EAA                     l3922:
  1775                           
  1776                           ;MazeRobot.X/color.c: 244:                     turnLeft_90(mL,mR);
  1777   002EAA  C02A  F01E         	movff	return_home_turns@mL,turnLeft_90@mL
  1778   002EAE  C02B  F01F         	movff	return_home_turns@mL+1,turnLeft_90@mL+1
  1779   002EB2  C02C  F020         	movff	return_home_turns@mR,turnLeft_90@mR
  1780   002EB6  C02D  F021         	movff	return_home_turns@mR+1,turnLeft_90@mR+1
  1781   002EBA  ECF9  F019         	call	_turnLeft_90	;wreg free
  1782                           
  1783                           ;MazeRobot.X/color.c: 245:                     break;
  1784   002EBE  EFFF  F017         	goto	l3948
  1785   002EC2                     l3924:
  1786                           
  1787                           ;MazeRobot.X/color.c: 247:                     turnRight_90(mL,mR);
  1788   002EC2  C02A  F01E         	movff	return_home_turns@mL,turnRight_90@mL
  1789   002EC6  C02B  F01F         	movff	return_home_turns@mL+1,turnRight_90@mL+1
  1790   002ECA  C02C  F020         	movff	return_home_turns@mR,turnRight_90@mR
  1791   002ECE  C02D  F021         	movff	return_home_turns@mR+1,turnRight_90@mR+1
  1792   002ED2  EC5A  F019         	call	_turnRight_90	;wreg free
  1793                           
  1794                           ;MazeRobot.X/color.c: 248:                     break;
  1795   002ED6  EFFF  F017         	goto	l3948
  1796   002EDA                     l3926:
  1797                           
  1798                           ;MazeRobot.X/color.c: 250:                     turn_180(mL,mR);
  1799   002EDA  C02A  F01E         	movff	return_home_turns@mL,turn_180@mL
  1800   002EDE  C02B  F01F         	movff	return_home_turns@mL+1,turn_180@mL+1
  1801   002EE2  C02C  F020         	movff	return_home_turns@mR,turn_180@mR
  1802   002EE6  C02D  F021         	movff	return_home_turns@mR+1,turn_180@mR+1
  1803   002EEA  EC5B  F015         	call	_turn_180	;wreg free
  1804                           
  1805                           ;MazeRobot.X/color.c: 251:                     break;
  1806   002EEE  EFFF  F017         	goto	l3948
  1807   002EF2                     l3932:
  1808                           
  1809                           ;MazeRobot.X/color.c: 259:                     turnLeft_135(mL,mR);
  1810   002EF2  C02A  F01E         	movff	return_home_turns@mL,turnLeft_135@mL
  1811   002EF6  C02B  F01F         	movff	return_home_turns@mL+1,turnLeft_135@mL+1
  1812   002EFA  C02C  F020         	movff	return_home_turns@mR,turnLeft_135@mR
  1813   002EFE  C02D  F021         	movff	return_home_turns@mR+1,turnLeft_135@mR+1
  1814   002F02  EC98  F01A         	call	_turnLeft_135	;wreg free
  1815                           
  1816                           ;MazeRobot.X/color.c: 260:                     break;
  1817   002F06  EFFF  F017         	goto	l3948
  1818   002F0A                     l3934:
  1819                           
  1820                           ;MazeRobot.X/color.c: 262:                     turnRight_135(mL,mR);
  1821   002F0A  C02A  F01E         	movff	return_home_turns@mL,turnRight_135@mL
  1822   002F0E  C02B  F01F         	movff	return_home_turns@mL+1,turnRight_135@mL+1
  1823   002F12  C02C  F020         	movff	return_home_turns@mR,turnRight_135@mR
  1824   002F16  C02D  F021         	movff	return_home_turns@mR+1,turnRight_135@mR+1
  1825   002F1A  ECBB  F018         	call	_turnRight_135	;wreg free
  1826                           
  1827                           ;MazeRobot.X/color.c: 263:                     break;
  1828   002F1E  EFFF  F017         	goto	l3948
  1829   002F22                     l3936:
  1830                           
  1831                           ;MazeRobot.X/color.c: 265:                     forward(mL,mR);
  1832   002F22  C02A  F018         	movff	return_home_turns@mL,forward@mL
  1833   002F26  C02B  F019         	movff	return_home_turns@mL+1,forward@mL+1
  1834   002F2A  C02C  F01A         	movff	return_home_turns@mR,forward@mR
  1835   002F2E  C02D  F01B         	movff	return_home_turns@mR+1,forward@mR+1
  1836   002F32  EC9C  F01C         	call	_forward	;wreg free
  1837   002F36                     
  1838                           ;MazeRobot.X/color.c: 266:                     int i = counter_history[k];
  1839   002F36  90D8               	bcf	status,0,c
  1840   002F38  3432               	rlcf	return_home_turns@k^0,w,c
  1841   002F3A  6ED9               	movwf	fsr2l,c
  1842   002F3C  3433               	rlcf	(return_home_turns@k+1)^0,w,c
  1843   002F3E  6EDA               	movwf	fsr2h,c
  1844   002F40  5026               	movf	return_home_turns@counter_history^0,w,c
  1845   002F42  26D9               	addwf	fsr2l,f,c
  1846   002F44  5027               	movf	(return_home_turns@counter_history+1)^0,w,c
  1847   002F46  22DA               	addwfc	fsr2h,f,c
  1848   002F48  CFDE F030          	movff	postinc2,return_home_turns@i
  1849   002F4C  CFDD F031          	movff	postdec2,return_home_turns@i+1
  1850                           
  1851                           ;MazeRobot.X/color.c: 267:                     while(i>0){
  1852   002F50  EFB9  F017         	goto	l122
  1853   002F54                     l3940:
  1854                           
  1855                           ;MazeRobot.X/color.c: 268:                     i--;
  1856   002F54  0630               	decf	return_home_turns@i^0,f,c
  1857   002F56  A0D8               	btfss	status,0,c
  1858   002F58  0631               	decf	(return_home_turns@i+1)^0,f,c
  1859   002F5A                     
  1860                           ;MazeRobot.X/color.c: 269:                     _delay((unsigned long)((50)*(64000000/400
      +                          0.0)));
  1861   002F5A  0E05               	movlw	5
  1862   002F5C  6E2F               	movwf	(??_return_home_turns+1)^0,c
  1863   002F5E  0E0F               	movlw	15
  1864   002F60  6E2E               	movwf	??_return_home_turns^0,c
  1865   002F62  0EF1               	movlw	241
  1866   002F64                     u5057:
  1867   002F64  2EE8               	decfsz	wreg,f,c
  1868   002F66  D7FE               	bra	u5057
  1869   002F68  2E2E               	decfsz	??_return_home_turns^0,f,c
  1870   002F6A  D7FC               	bra	u5057
  1871   002F6C  2E2F               	decfsz	(??_return_home_turns+1)^0,f,c
  1872   002F6E  D7FA               	bra	u5057
  1873   002F70  F000               	nop	
  1874   002F72                     l122:
  1875                           
  1876                           ;MazeRobot.X/color.c: 267:                     while(i>0){
  1877   002F72  BE31               	btfsc	(return_home_turns@i+1)^0,7,c
  1878   002F74  EFC6  F017         	goto	u4020
  1879   002F78  5031               	movf	(return_home_turns@i+1)^0,w,c
  1880   002F7A  E106               	bnz	u4021
  1881   002F7C  0430               	decf	return_home_turns@i^0,w,c
  1882   002F7E  B0D8               	btfsc	status,0,c
  1883   002F80  EFC4  F017         	goto	u4021
  1884   002F84  EFC6  F017         	goto	u4020
  1885   002F88                     u4021:
  1886   002F88  EFAA  F017         	goto	l3940
  1887   002F8C                     u4020:
  1888   002F8C  EFFF  F017         	goto	l3948
  1889   002F90                     l3946:
  1890   002F90  90D8               	bcf	status,0,c
  1891   002F92  3432               	rlcf	return_home_turns@k^0,w,c
  1892   002F94  6ED9               	movwf	fsr2l,c
  1893   002F96  3433               	rlcf	(return_home_turns@k+1)^0,w,c
  1894   002F98  6EDA               	movwf	fsr2h,c
  1895   002F9A  5024               	movf	return_home_turns@turn_history^0,w,c
  1896   002F9C  26D9               	addwf	fsr2l,f,c
  1897   002F9E  5025               	movf	(return_home_turns@turn_history+1)^0,w,c
  1898   002FA0  22DA               	addwfc	fsr2h,f,c
  1899   002FA2  CFDE F02E          	movff	postinc2,??_return_home_turns
  1900   002FA6  CFDD F02F          	movff	postdec2,??_return_home_turns+1
  1901                           
  1902                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1903                           ; Switch size 1, requested type "simple"
  1904                           ; Number of cases is 1, Range of values is 0 to 0
  1905                           ; switch strategies available:
  1906                           ; Name         Instructions Cycles
  1907                           ; simple_byte            4     3 (average)
  1908                           ;	Chosen strategy is simple_byte
  1909   002FAA  502F               	movf	(??_return_home_turns+1)^0,w,c
  1910   002FAC  0A00               	xorlw	0	; case 0
  1911   002FAE  B4D8               	btfsc	status,2,c
  1912   002FB0  EFDC  F017         	goto	l4648
  1913   002FB4  EFFF  F017         	goto	l3948
  1914   002FB8                     l4648:
  1915                           
  1916                           ; Switch size 1, requested type "simple"
  1917                           ; Number of cases is 8, Range of values is 0 to 7
  1918                           ; switch strategies available:
  1919                           ; Name         Instructions Cycles
  1920                           ; simple_byte           25    13 (average)
  1921                           ;	Chosen strategy is simple_byte
  1922   002FB8  502E               	movf	??_return_home_turns^0,w,c
  1923   002FBA  0A00               	xorlw	0	; case 0
  1924   002FBC  B4D8               	btfsc	status,2,c
  1925   002FBE  EF91  F017         	goto	l3936
  1926   002FC2  0A01               	xorlw	1	; case 1
  1927   002FC4  B4D8               	btfsc	status,2,c
  1928   002FC6  EF55  F017         	goto	l3922
  1929   002FCA  0A03               	xorlw	3	; case 2
  1930   002FCC  B4D8               	btfsc	status,2,c
  1931   002FCE  EF61  F017         	goto	l3924
  1932   002FD2  0A01               	xorlw	1	; case 3
  1933   002FD4  B4D8               	btfsc	status,2,c
  1934   002FD6  EF6D  F017         	goto	l3926
  1935   002FDA  0A07               	xorlw	7	; case 4
  1936   002FDC  B4D8               	btfsc	status,2,c
  1937   002FDE  EF55  F017         	goto	l3922
  1938   002FE2  0A01               	xorlw	1	; case 5
  1939   002FE4  B4D8               	btfsc	status,2,c
  1940   002FE6  EF61  F017         	goto	l3924
  1941   002FEA  0A03               	xorlw	3	; case 6
  1942   002FEC  B4D8               	btfsc	status,2,c
  1943   002FEE  EF79  F017         	goto	l3932
  1944   002FF2  0A01               	xorlw	1	; case 7
  1945   002FF4  B4D8               	btfsc	status,2,c
  1946   002FF6  EF85  F017         	goto	l3934
  1947   002FFA  EFFF  F017         	goto	l3948
  1948   002FFE                     l3948:
  1949                           
  1950                           ;MazeRobot.X/color.c: 291:     }
  1951   002FFE  0632               	decf	return_home_turns@k^0,f,c
  1952   003000  A0D8               	btfss	status,0,c
  1953   003002  0633               	decf	(return_home_turns@k+1)^0,f,c
  1954   003004  EF4C  F017         	goto	l3918
  1955   003008                     l126:
  1956   003008  0012               	return		;funcret
  1957   00300A                     __end_of_return_home_turns:
  1958                           	callstack 0
  1959                           
  1960 ;; *************** function _forward *****************
  1961 ;; Defined at:
  1962 ;;		line 132 in file "MazeRobot.X/dc_motor.c"
  1963 ;; Parameters:    Size  Location     Type
  1964 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  1965 ;;		 -> main@motorLeft(9), 
  1966 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  1967 ;;		 -> main@motorRight(9), 
  1968 ;; Auto vars:     Size  Location     Type
  1969 ;;		None
  1970 ;; Return value:  Size  Location     Type
  1971 ;;                  1    wreg      void 
  1972 ;; Registers used:
  1973 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1974 ;; Tracked objects:
  1975 ;;		On entry : 0/0
  1976 ;;		On exit  : 0/0
  1977 ;;		Unchanged: 0/0
  1978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1979 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1981 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1982 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1983 ;;Total ram usage:        5 bytes
  1984 ;; Hardware stack levels used: 1
  1985 ;; Hardware stack levels required when called: 4
  1986 ;; This function calls:
  1987 ;;		_setMotorPWM
  1988 ;; This function is called by:
  1989 ;;		_return_home_turns
  1990 ;;		_main
  1991 ;; This function uses a non-reentrant model
  1992 ;;
  1993                           
  1994                           	psect	text3
  1995   003938                     __ptext3:
  1996                           	callstack 0
  1997   003938                     _forward:
  1998                           	callstack 25
  1999   003938                     
  2000                           ;MazeRobot.X/dc_motor.c: 132: void forward(DC_motor *mL, DC_motor *mR);MazeRobot.X/dc_mo
      +                          tor.c: 133: {;MazeRobot.X/dc_motor.c: 134:     mL->direction = 1;
  2001   003938  EE20 F001          	lfsr	2,1
  2002   00393C  5018               	movf	forward@mL^0,w,c
  2003   00393E  26D9               	addwf	fsr2l,f,c
  2004   003940  5019               	movf	(forward@mL+1)^0,w,c
  2005   003942  22DA               	addwfc	fsr2h,f,c
  2006   003944  0E01               	movlw	1
  2007   003946  6EDF               	movwf	indf2,c
  2008                           
  2009                           ;MazeRobot.X/dc_motor.c: 135:     mR->direction = 1;
  2010   003948  EE20 F001          	lfsr	2,1
  2011   00394C  501A               	movf	forward@mR^0,w,c
  2012   00394E  26D9               	addwf	fsr2l,f,c
  2013   003950  501B               	movf	(forward@mR+1)^0,w,c
  2014   003952  22DA               	addwfc	fsr2h,f,c
  2015   003954  0E01               	movlw	1
  2016   003956  6EDF               	movwf	indf2,c
  2017                           
  2018                           ;MazeRobot.X/dc_motor.c: 137:     mL->brakemode = 1;
  2019   003958  EE20 F002          	lfsr	2,2
  2020   00395C  5018               	movf	forward@mL^0,w,c
  2021   00395E  26D9               	addwf	fsr2l,f,c
  2022   003960  5019               	movf	(forward@mL+1)^0,w,c
  2023   003962  22DA               	addwfc	fsr2h,f,c
  2024   003964  0E01               	movlw	1
  2025   003966  6EDF               	movwf	indf2,c
  2026                           
  2027                           ;MazeRobot.X/dc_motor.c: 138:     mL->brakemode = 1;
  2028   003968  EE20 F002          	lfsr	2,2
  2029   00396C  5018               	movf	forward@mL^0,w,c
  2030   00396E  26D9               	addwf	fsr2l,f,c
  2031   003970  5019               	movf	(forward@mL+1)^0,w,c
  2032   003972  22DA               	addwfc	fsr2h,f,c
  2033   003974  0E01               	movlw	1
  2034   003976  6EDF               	movwf	indf2,c
  2035                           
  2036                           ;MazeRobot.X/dc_motor.c: 140:     while ((mL->power)<40 && (mR->power)<40){
  2037   003978  EFE2  F01C         	goto	l3354
  2038   00397C                     l3346:
  2039                           
  2040                           ;MazeRobot.X/dc_motor.c: 141:         if ((mL->power) < 40){
  2041   00397C  C018  FFD9         	movff	forward@mL,fsr2l
  2042   003980  C019  FFDA         	movff	forward@mL+1,fsr2h
  2043   003984  0E28               	movlw	40
  2044   003986  60DF               	cpfslt	indf2,c
  2045   003988  EFC8  F01C         	goto	u2941
  2046   00398C  EFCA  F01C         	goto	u2940
  2047   003990                     u2941:
  2048   003990  EFD0  F01C         	goto	l3350
  2049   003994                     u2940:
  2050   003994                     
  2051                           ;MazeRobot.X/dc_motor.c: 142:             mL->power += 5;
  2052   003994  C018  FFD9         	movff	forward@mL,fsr2l
  2053   003998  C019  FFDA         	movff	forward@mL+1,fsr2h
  2054   00399C  0E05               	movlw	5
  2055   00399E  26DF               	addwf	indf2,f,c
  2056   0039A0                     l3350:
  2057                           
  2058                           ;MazeRobot.X/dc_motor.c: 144:         if ((mR->power) < 40){
  2059   0039A0  C01A  FFD9         	movff	forward@mR,fsr2l
  2060   0039A4  C01B  FFDA         	movff	forward@mR+1,fsr2h
  2061   0039A8  0E28               	movlw	40
  2062   0039AA  60DF               	cpfslt	indf2,c
  2063   0039AC  EFDA  F01C         	goto	u2951
  2064   0039B0  EFDC  F01C         	goto	u2950
  2065   0039B4                     u2951:
  2066   0039B4  EFE2  F01C         	goto	l3354
  2067   0039B8                     u2950:
  2068   0039B8                     
  2069                           ;MazeRobot.X/dc_motor.c: 145:             mR->power += 5;
  2070   0039B8  C01A  FFD9         	movff	forward@mR,fsr2l
  2071   0039BC  C01B  FFDA         	movff	forward@mR+1,fsr2h
  2072   0039C0  0E05               	movlw	5
  2073   0039C2  26DF               	addwf	indf2,f,c
  2074   0039C4                     l3354:
  2075                           
  2076                           ;MazeRobot.X/dc_motor.c: 140:     while ((mL->power)<40 && (mR->power)<40){
  2077   0039C4  C018  FFD9         	movff	forward@mL,fsr2l
  2078   0039C8  C019  FFDA         	movff	forward@mL+1,fsr2h
  2079   0039CC  0E28               	movlw	40
  2080   0039CE  60DF               	cpfslt	indf2,c
  2081   0039D0  EFEC  F01C         	goto	u2961
  2082   0039D4  EFEE  F01C         	goto	u2960
  2083   0039D8                     u2961:
  2084   0039D8  EFFA  F01C         	goto	l3358
  2085   0039DC                     u2960:
  2086   0039DC  C01A  FFD9         	movff	forward@mR,fsr2l
  2087   0039E0  C01B  FFDA         	movff	forward@mR+1,fsr2h
  2088   0039E4  0E27               	movlw	39
  2089   0039E6  64DF               	cpfsgt	indf2,c
  2090   0039E8  EFF8  F01C         	goto	u2971
  2091   0039EC  EFFA  F01C         	goto	u2970
  2092   0039F0                     u2971:
  2093   0039F0  EFBE  F01C         	goto	l3346
  2094   0039F4                     u2970:
  2095   0039F4                     l3358:
  2096                           
  2097                           ;MazeRobot.X/dc_motor.c: 149:     setMotorPWM(mL);
  2098   0039F4  C018  F012         	movff	forward@mL,setMotorPWM@m
  2099   0039F8  C019  F013         	movff	forward@mL+1,setMotorPWM@m+1
  2100   0039FC  EC05  F018         	call	_setMotorPWM	;wreg free
  2101                           
  2102                           ;MazeRobot.X/dc_motor.c: 150:     setMotorPWM(mR);
  2103   003A00  C01A  F012         	movff	forward@mR,setMotorPWM@m
  2104   003A04  C01B  F013         	movff	forward@mR+1,setMotorPWM@m+1
  2105   003A08  EC05  F018         	call	_setMotorPWM	;wreg free
  2106   003A0C  0012               	return		;funcret
  2107   003A0E                     __end_of_forward:
  2108                           	callstack 0
  2109                           
  2110 ;; *************** function _initUSART4 *****************
  2111 ;; Defined at:
  2112 ;;		line 5 in file "serialTest.c"
  2113 ;; Parameters:    Size  Location     Type
  2114 ;;		None
  2115 ;; Auto vars:     Size  Location     Type
  2116 ;;		None
  2117 ;; Return value:  Size  Location     Type
  2118 ;;                  1    wreg      void 
  2119 ;; Registers used:
  2120 ;;		wreg, status,2
  2121 ;; Tracked objects:
  2122 ;;		On entry : 0/0
  2123 ;;		On exit  : 0/0
  2124 ;;		Unchanged: 0/0
  2125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2127 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2128 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2129 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2130 ;;Total ram usage:        0 bytes
  2131 ;; Hardware stack levels used: 1
  2132 ;; Hardware stack levels required when called: 2
  2133 ;; This function calls:
  2134 ;;		Nothing
  2135 ;; This function is called by:
  2136 ;;		_main
  2137 ;; This function uses a non-reentrant model
  2138 ;;
  2139                           
  2140                           	psect	text4
  2141   004138                     __ptext4:
  2142                           	callstack 0
  2143   004138                     _initUSART4:
  2144                           	callstack 28
  2145   004138                     
  2146                           ;serialTest.c: 9:     BAUD4CONbits.BRG16 = 0;
  2147   004138  010E               	movlb	14	; () banked
  2148   00413A  97E9               	bcf	233,3,b	;volatile
  2149                           
  2150                           ;serialTest.c: 10:     TX4STAbits.BRGH = 0;
  2151   00413C  95E8               	bcf	232,2,b	;volatile
  2152   00413E                     
  2153                           ; BSR set to: 14
  2154                           ;serialTest.c: 19:     SP4BRGL = 51;
  2155   00413E  0E33               	movlw	51
  2156   004140  6FE5               	movwf	229,b	;volatile
  2157                           
  2158                           ;serialTest.c: 20:     SP4BRGH = 0;
  2159   004142  0E00               	movlw	0
  2160   004144  6FE6               	movwf	230,b	;volatile
  2161   004146                     
  2162                           ; BSR set to: 14
  2163                           ;serialTest.c: 22:     RC4STAbits.CREN = 1;
  2164   004146  89E7               	bsf	231,4,b	;volatile
  2165   004148                     
  2166                           ; BSR set to: 14
  2167                           ;serialTest.c: 23:     TX4STAbits.TXEN = 1;
  2168   004148  8BE8               	bsf	232,5,b	;volatile
  2169   00414A                     
  2170                           ; BSR set to: 14
  2171                           ;serialTest.c: 24:     RC4STAbits.SPEN = 1;
  2172   00414A  8FE7               	bsf	231,7,b	;volatile
  2173   00414C                     
  2174                           ; BSR set to: 14
  2175                           ;serialTest.c: 26:     TRISCbits.TRISC1 = 1;
  2176   00414C  8283               	bsf	131,1,c	;volatile
  2177                           
  2178                           ;serialTest.c: 28:     RC0PPS = 0x12;
  2179   00414E  0E12               	movlw	18
  2180   004150  6F62               	movwf	98,b	;volatile
  2181                           
  2182                           ;serialTest.c: 29:     RX4PPS = 0x11;
  2183   004152  0E11               	movlw	17
  2184   004154  6F15               	movwf	21,b	;volatile
  2185   004156                     
  2186                           ; BSR set to: 14
  2187                           ;serialTest.c: 32:     INTCONbits.GIE = 1;
  2188   004156  8EF2               	bsf	242,7,c	;volatile
  2189   004158                     
  2190                           ; BSR set to: 14
  2191                           ;serialTest.c: 33:     INTCONbits.IPEN = 1;
  2192   004158  8AF2               	bsf	242,5,c	;volatile
  2193   00415A                     
  2194                           ; BSR set to: 14
  2195                           ;serialTest.c: 34:     INTCONbits.PEIE = 1;
  2196   00415A  8CF2               	bsf	242,6,c	;volatile
  2197   00415C                     
  2198                           ; BSR set to: 14
  2199                           ;serialTest.c: 36:     PIE4bits.RC4IE=1;
  2200   00415C  872D               	bsf	45,3,b	;volatile
  2201   00415E                     
  2202                           ; BSR set to: 14
  2203                           ;serialTest.c: 37:     PIE4bits.TX4IE=0;
  2204   00415E  952D               	bcf	45,2,b	;volatile
  2205   004160                     
  2206                           ; BSR set to: 14
  2207                           ;serialTest.c: 39:     IPR4bits.RC4IP = 1;
  2208   004160  8723               	bsf	35,3,b	;volatile
  2209   004162                     
  2210                           ; BSR set to: 14
  2211                           ;serialTest.c: 40:     IPR4bits.TX4IP = 1;
  2212   004162  8523               	bsf	35,2,b	;volatile
  2213   004164                     
  2214                           ; BSR set to: 14
  2215   004164  0012               	return		;funcret
  2216   004166                     __end_of_initUSART4:
  2217                           	callstack 0
  2218                           
  2219 ;; *************** function _initDCmotorsPWM *****************
  2220 ;; Defined at:
  2221 ;;		line 10 in file "MazeRobot.X/dc_motor.c"
  2222 ;; Parameters:    Size  Location     Type
  2223 ;;  PWMperiod       2    4[COMRAM] int 
  2224 ;; Auto vars:     Size  Location     Type
  2225 ;;		None
  2226 ;; Return value:  Size  Location     Type
  2227 ;;                  1    wreg      void 
  2228 ;; Registers used:
  2229 ;;		wreg, status,2
  2230 ;; Tracked objects:
  2231 ;;		On entry : 0/0
  2232 ;;		On exit  : 0/0
  2233 ;;		Unchanged: 0/0
  2234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2235 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2236 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2238 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2239 ;;Total ram usage:        2 bytes
  2240 ;; Hardware stack levels used: 1
  2241 ;; Hardware stack levels required when called: 2
  2242 ;; This function calls:
  2243 ;;		Nothing
  2244 ;; This function is called by:
  2245 ;;		_main
  2246 ;; This function uses a non-reentrant model
  2247 ;;
  2248                           
  2249                           	psect	text5
  2250   003D90                     __ptext5:
  2251                           	callstack 0
  2252   003D90                     _initDCmotorsPWM:
  2253                           	callstack 28
  2254   003D90                     
  2255                           ;MazeRobot.X/dc_motor.c: 14:     LATEbits.LATE2 = 0;
  2256   003D90  947D               	bcf	125,2,c	;volatile
  2257                           
  2258                           ;MazeRobot.X/dc_motor.c: 15:     LATEbits.LATE4 = 0;
  2259   003D92  987D               	bcf	125,4,c	;volatile
  2260                           
  2261                           ;MazeRobot.X/dc_motor.c: 16:     LATCbits.LATC7 = 0;
  2262   003D94  9E7B               	bcf	123,7,c	;volatile
  2263                           
  2264                           ;MazeRobot.X/dc_motor.c: 17:     LATGbits.LATG6 = 0;
  2265   003D96  9C7F               	bcf	127,6,c	;volatile
  2266                           
  2267                           ;MazeRobot.X/dc_motor.c: 20:     TRISEbits.TRISE2 = 0 ;
  2268   003D98  9485               	bcf	133,2,c	;volatile
  2269                           
  2270                           ;MazeRobot.X/dc_motor.c: 21:     TRISEbits.TRISE4 = 0 ;
  2271   003D9A  9885               	bcf	133,4,c	;volatile
  2272                           
  2273                           ;MazeRobot.X/dc_motor.c: 22:     TRISCbits.TRISC7 = 0 ;
  2274   003D9C  9E83               	bcf	131,7,c	;volatile
  2275                           
  2276                           ;MazeRobot.X/dc_motor.c: 23:     TRISGbits.TRISG6 = 0 ;
  2277   003D9E  9C87               	bcf	135,6,c	;volatile
  2278   003DA0                     
  2279                           ;MazeRobot.X/dc_motor.c: 26:     RE2PPS=0x05;
  2280   003DA0  0E05               	movlw	5
  2281   003DA2  010E               	movlb	14	; () banked
  2282   003DA4  6F74               	movwf	116,b	;volatile
  2283                           
  2284                           ;MazeRobot.X/dc_motor.c: 27:     RE4PPS=0x06;
  2285   003DA6  0E06               	movlw	6
  2286   003DA8  6F76               	movwf	118,b	;volatile
  2287                           
  2288                           ;MazeRobot.X/dc_motor.c: 28:     RC7PPS=0x07;
  2289   003DAA  0E07               	movlw	7
  2290   003DAC  6F69               	movwf	105,b	;volatile
  2291                           
  2292                           ;MazeRobot.X/dc_motor.c: 29:     RG6PPS=0x08;
  2293   003DAE  0E08               	movlw	8
  2294   003DB0  6F88               	movwf	136,b	;volatile
  2295                           
  2296                           ;MazeRobot.X/dc_motor.c: 32:     T2CONbits.CKPS=0b011;
  2297   003DB2  50BD               	movf	189,w,c	;volatile
  2298   003DB4  0B8F               	andlw	-113
  2299   003DB6  0930               	iorlw	48
  2300   003DB8  6EBD               	movwf	189,c	;volatile
  2301                           
  2302                           ;MazeRobot.X/dc_motor.c: 33:     T2HLTbits.MODE=0b00000;
  2303   003DBA  0EE0               	movlw	-32
  2304   003DBC  16BE               	andwf	190,f,c	;volatile
  2305                           
  2306                           ;MazeRobot.X/dc_motor.c: 34:     T2CLKCONbits.CS=0b0001;
  2307   003DBE  50BF               	movf	191,w,c	;volatile
  2308   003DC0  0BF0               	andlw	-16
  2309   003DC2  0901               	iorlw	1
  2310   003DC4  6EBF               	movwf	191,c	;volatile
  2311                           
  2312                           ;MazeRobot.X/dc_motor.c: 38:     T2PR=199;
  2313   003DC6  0EC7               	movlw	199
  2314   003DC8  6EBC               	movwf	188,c	;volatile
  2315   003DCA                     
  2316                           ; BSR set to: 14
  2317                           ;MazeRobot.X/dc_motor.c: 39:     T2CONbits.ON=1;
  2318   003DCA  8EBD               	bsf	189,7,c	;volatile
  2319                           
  2320                           ;MazeRobot.X/dc_motor.c: 43:     CCPR1H=0;
  2321   003DCC  0E00               	movlw	0
  2322   003DCE  6EAA               	movwf	170,c	;volatile
  2323                           
  2324                           ;MazeRobot.X/dc_motor.c: 44:     CCPR2H=0;
  2325   003DD0  0E00               	movlw	0
  2326   003DD2  6EA6               	movwf	166,c	;volatile
  2327                           
  2328                           ;MazeRobot.X/dc_motor.c: 45:     CCPR3H=0;
  2329   003DD4  0E00               	movlw	0
  2330   003DD6  010F               	movlb	15	; () banked
  2331   003DD8  6F25               	movwf	37,b	;volatile
  2332                           
  2333                           ;MazeRobot.X/dc_motor.c: 46:     CCPR4H=0;
  2334   003DDA  0E00               	movlw	0
  2335   003DDC  6F21               	movwf	33,b	;volatile
  2336                           
  2337                           ;MazeRobot.X/dc_motor.c: 49:     CCPTMRS0bits.C1TSEL=0;
  2338   003DDE  0EFC               	movlw	-4
  2339   003DE0  16AD               	andwf	173,f,c	;volatile
  2340                           
  2341                           ;MazeRobot.X/dc_motor.c: 50:     CCPTMRS0bits.C2TSEL=0;
  2342   003DE2  0EF3               	movlw	-13
  2343   003DE4  16AD               	andwf	173,f,c	;volatile
  2344                           
  2345                           ;MazeRobot.X/dc_motor.c: 51:     CCPTMRS0bits.C3TSEL=0;
  2346   003DE6  0ECF               	movlw	-49
  2347   003DE8  16AD               	andwf	173,f,c	;volatile
  2348                           
  2349                           ;MazeRobot.X/dc_motor.c: 52:     CCPTMRS0bits.C4TSEL=0;
  2350   003DEA  0E3F               	movlw	-193
  2351   003DEC  16AD               	andwf	173,f,c	;volatile
  2352   003DEE                     
  2353                           ; BSR set to: 15
  2354                           ;MazeRobot.X/dc_motor.c: 55:     CCP1CONbits.FMT=1;
  2355   003DEE  88AB               	bsf	171,4,c	;volatile
  2356                           
  2357                           ;MazeRobot.X/dc_motor.c: 56:     CCP1CONbits.CCP1MODE=0b1100;
  2358   003DF0  50AB               	movf	171,w,c	;volatile
  2359   003DF2  0BF0               	andlw	-16
  2360   003DF4  090C               	iorlw	12
  2361   003DF6  6EAB               	movwf	171,c	;volatile
  2362   003DF8                     
  2363                           ; BSR set to: 15
  2364                           ;MazeRobot.X/dc_motor.c: 57:     CCP1CONbits.EN=1;
  2365   003DF8  8EAB               	bsf	171,7,c	;volatile
  2366   003DFA                     
  2367                           ; BSR set to: 15
  2368                           ;MazeRobot.X/dc_motor.c: 59:     CCP2CONbits.FMT=1;
  2369   003DFA  88A7               	bsf	167,4,c	;volatile
  2370                           
  2371                           ;MazeRobot.X/dc_motor.c: 60:     CCP2CONbits.CCP2MODE=0b1100;
  2372   003DFC  50A7               	movf	167,w,c	;volatile
  2373   003DFE  0BF0               	andlw	-16
  2374   003E00  090C               	iorlw	12
  2375   003E02  6EA7               	movwf	167,c	;volatile
  2376   003E04                     
  2377                           ; BSR set to: 15
  2378                           ;MazeRobot.X/dc_motor.c: 61:     CCP2CONbits.EN=1;
  2379   003E04  8EA7               	bsf	167,7,c	;volatile
  2380   003E06                     
  2381                           ; BSR set to: 15
  2382                           ;MazeRobot.X/dc_motor.c: 63:     CCP3CONbits.FMT=1;
  2383   003E06  8926               	bsf	38,4,b	;volatile
  2384                           
  2385                           ;MazeRobot.X/dc_motor.c: 64:     CCP3CONbits.CCP3MODE=0b1100;
  2386   003E08  5126               	movf	38,w,b	;volatile
  2387   003E0A  0BF0               	andlw	-16
  2388   003E0C  090C               	iorlw	12
  2389   003E0E  6F26               	movwf	38,b	;volatile
  2390   003E10                     
  2391                           ; BSR set to: 15
  2392                           ;MazeRobot.X/dc_motor.c: 65:     CCP3CONbits.EN=1;
  2393   003E10  8F26               	bsf	38,7,b	;volatile
  2394   003E12                     
  2395                           ; BSR set to: 15
  2396                           ;MazeRobot.X/dc_motor.c: 67:     CCP4CONbits.FMT=1;
  2397   003E12  8922               	bsf	34,4,b	;volatile
  2398                           
  2399                           ;MazeRobot.X/dc_motor.c: 68:     CCP4CONbits.CCP4MODE=0b1100;
  2400   003E14  5122               	movf	34,w,b	;volatile
  2401   003E16  0BF0               	andlw	-16
  2402   003E18  090C               	iorlw	12
  2403   003E1A  6F22               	movwf	34,b	;volatile
  2404   003E1C                     
  2405                           ; BSR set to: 15
  2406                           ;MazeRobot.X/dc_motor.c: 69:     CCP4CONbits.EN=1;
  2407   003E1C  8F22               	bsf	34,7,b	;volatile
  2408   003E1E                     
  2409                           ; BSR set to: 15
  2410   003E1E  0012               	return		;funcret
  2411   003E20                     __end_of_initDCmotorsPWM:
  2412                           	callstack 0
  2413                           
  2414 ;; *************** function _color_click_init *****************
  2415 ;; Defined at:
  2416 ;;		line 8 in file "MazeRobot.X/color.c"
  2417 ;; Parameters:    Size  Location     Type
  2418 ;;		None
  2419 ;; Auto vars:     Size  Location     Type
  2420 ;;		None
  2421 ;; Return value:  Size  Location     Type
  2422 ;;                  1    wreg      void 
  2423 ;; Registers used:
  2424 ;;		wreg, status,2, status,0, cstack
  2425 ;; Tracked objects:
  2426 ;;		On entry : 0/0
  2427 ;;		On exit  : 0/0
  2428 ;;		Unchanged: 0/0
  2429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2432 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2433 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2434 ;;Total ram usage:        1 bytes
  2435 ;; Hardware stack levels used: 1
  2436 ;; Hardware stack levels required when called: 5
  2437 ;; This function calls:
  2438 ;;		_I2C_2_Master_Init
  2439 ;;		_color_writetoaddr
  2440 ;; This function is called by:
  2441 ;;		_main
  2442 ;; This function uses a non-reentrant model
  2443 ;;
  2444                           
  2445                           	psect	text6
  2446   004104                     __ptext6:
  2447                           	callstack 0
  2448   004104                     _color_click_init:
  2449                           	callstack 25
  2450   004104                     
  2451                           ;MazeRobot.X/color.c: 11:     I2C_2_Master_Init();
  2452   004104  ECC9  F020         	call	_I2C_2_Master_Init	;wreg free
  2453   004108                     
  2454                           ;MazeRobot.X/color.c: 14:   color_writetoaddr(0x00, 0x01);
  2455   004108  0E01               	movlw	1
  2456   00410A  6E07               	movwf	color_writetoaddr@value^0,c
  2457   00410C  0E00               	movlw	0
  2458   00410E  EC1A  F021         	call	_color_writetoaddr
  2459   004112                     
  2460                           ;MazeRobot.X/color.c: 15:     _delay((unsigned long)((3)*(64000000/4000.0)));
  2461   004112  0E3F               	movlw	63
  2462   004114  6E09               	movwf	??_color_click_init^0,c
  2463   004116  0E55               	movlw	85
  2464   004118                     u5067:
  2465   004118  2EE8               	decfsz	wreg,f,c
  2466   00411A  D7FE               	bra	u5067
  2467   00411C  2E09               	decfsz	??_color_click_init^0,f,c
  2468   00411E  D7FC               	bra	u5067
  2469   004120  F000               	nop	
  2470   004122                     
  2471                           ;MazeRobot.X/color.c: 18:  color_writetoaddr(0x00, 0x03);
  2472   004122  0E03               	movlw	3
  2473   004124  6E07               	movwf	color_writetoaddr@value^0,c
  2474   004126  0E00               	movlw	0
  2475   004128  EC1A  F021         	call	_color_writetoaddr
  2476   00412C                     
  2477                           ;MazeRobot.X/color.c: 21:  color_writetoaddr(0x01, 0xD5);
  2478   00412C  0ED5               	movlw	213
  2479   00412E  6E07               	movwf	color_writetoaddr@value^0,c
  2480   004130  0E01               	movlw	1
  2481   004132  EC1A  F021         	call	_color_writetoaddr
  2482   004136  0012               	return		;funcret
  2483   004138                     __end_of_color_click_init:
  2484                           	callstack 0
  2485                           
  2486 ;; *************** function _color_writetoaddr *****************
  2487 ;; Defined at:
  2488 ;;		line 25 in file "MazeRobot.X/color.c"
  2489 ;; Parameters:    Size  Location     Type
  2490 ;;  address         1    wreg     unsigned char 
  2491 ;;  value           1    6[COMRAM] unsigned char 
  2492 ;; Auto vars:     Size  Location     Type
  2493 ;;  address         1    7[COMRAM] unsigned char 
  2494 ;; Return value:  Size  Location     Type
  2495 ;;                  1    wreg      void 
  2496 ;; Registers used:
  2497 ;;		wreg, status,2, status,0, cstack
  2498 ;; Tracked objects:
  2499 ;;		On entry : 0/0
  2500 ;;		On exit  : 0/0
  2501 ;;		Unchanged: 0/0
  2502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2503 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2504 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2506 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2507 ;;Total ram usage:        2 bytes
  2508 ;; Hardware stack levels used: 1
  2509 ;; Hardware stack levels required when called: 4
  2510 ;; This function calls:
  2511 ;;		_I2C_2_Master_Start
  2512 ;;		_I2C_2_Master_Stop
  2513 ;;		_I2C_2_Master_Write
  2514 ;; This function is called by:
  2515 ;;		_color_click_init
  2516 ;; This function uses a non-reentrant model
  2517 ;;
  2518                           
  2519                           	psect	text7
  2520   004234                     __ptext7:
  2521                           	callstack 0
  2522   004234                     _color_writetoaddr:
  2523                           	callstack 25
  2524                           
  2525                           ;incstack = 0
  2526                           ;color_writetoaddr@address stored from wreg
  2527   004234  6E08               	movwf	color_writetoaddr@address^0,c
  2528   004236                     
  2529                           ;MazeRobot.X/color.c: 26:     I2C_2_Master_Start();
  2530   004236  EC41  F021         	call	_I2C_2_Master_Start	;wreg free
  2531                           
  2532                           ;MazeRobot.X/color.c: 27:     I2C_2_Master_Write(0x52 | 0x00);
  2533   00423A  0E52               	movlw	82
  2534   00423C  EC36  F021         	call	_I2C_2_Master_Write
  2535                           
  2536                           ;MazeRobot.X/color.c: 28:     I2C_2_Master_Write(0x80 | address);
  2537   004240  5008               	movf	color_writetoaddr@address^0,w,c
  2538   004242  0980               	iorlw	128
  2539   004244  EC36  F021         	call	_I2C_2_Master_Write
  2540                           
  2541                           ;MazeRobot.X/color.c: 29:     I2C_2_Master_Write(value);
  2542   004248  5007               	movf	color_writetoaddr@value^0,w,c
  2543   00424A  EC36  F021         	call	_I2C_2_Master_Write
  2544                           
  2545                           ;MazeRobot.X/color.c: 30:     I2C_2_Master_Stop();
  2546   00424E  EC3C  F021         	call	_I2C_2_Master_Stop	;wreg free
  2547   004252  0012               	return		;funcret
  2548   004254                     __end_of_color_writetoaddr:
  2549                           	callstack 0
  2550                           
  2551 ;; *************** function _I2C_2_Master_Init *****************
  2552 ;; Defined at:
  2553 ;;		line 4 in file "MazeRobot.X/i2c.c"
  2554 ;; Parameters:    Size  Location     Type
  2555 ;;		None
  2556 ;; Auto vars:     Size  Location     Type
  2557 ;;		None
  2558 ;; Return value:  Size  Location     Type
  2559 ;;                  1    wreg      void 
  2560 ;; Registers used:
  2561 ;;		wreg, status,2
  2562 ;; Tracked objects:
  2563 ;;		On entry : 0/0
  2564 ;;		On exit  : 0/0
  2565 ;;		Unchanged: 0/0
  2566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2570 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2571 ;;Total ram usage:        0 bytes
  2572 ;; Hardware stack levels used: 1
  2573 ;; Hardware stack levels required when called: 2
  2574 ;; This function calls:
  2575 ;;		Nothing
  2576 ;; This function is called by:
  2577 ;;		_color_click_init
  2578 ;; This function uses a non-reentrant model
  2579 ;;
  2580                           
  2581                           	psect	text8
  2582   004192                     __ptext8:
  2583                           	callstack 0
  2584   004192                     _I2C_2_Master_Init:
  2585                           	callstack 27
  2586   004192                     
  2587                           ;MazeRobot.X/i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  2588   004192  010E               	movlb	14	; () banked
  2589   004194  51D9               	movf	217,w,b	;volatile
  2590   004196  0BF0               	andlw	-16
  2591   004198  0908               	iorlw	8
  2592   00419A  6FD9               	movwf	217,b	;volatile
  2593   00419C                     
  2594                           ; BSR set to: 14
  2595                           ;MazeRobot.X/i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  2596   00419C  8BD9               	bsf	217,5,b	;volatile
  2597                           
  2598                           ;MazeRobot.X/i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  2599   00419E  0E9F               	movlw	159
  2600   0041A0  6FD6               	movwf	214,b	;volatile
  2601   0041A2                     
  2602                           ; BSR set to: 14
  2603                           ;MazeRobot.X/i2c.c: 12:   TRISDbits.TRISD5 = 1;
  2604   0041A2  8A84               	bsf	132,5,c	;volatile
  2605   0041A4                     
  2606                           ; BSR set to: 14
  2607                           ;MazeRobot.X/i2c.c: 13:   TRISDbits.TRISD6 = 1;
  2608   0041A4  8C84               	bsf	132,6,c	;volatile
  2609   0041A6                     
  2610                           ; BSR set to: 14
  2611                           ;MazeRobot.X/i2c.c: 14:   ANSELDbits.ANSELD5=0;
  2612   0041A6  9BA7               	bcf	167,5,b	;volatile
  2613   0041A8                     
  2614                           ; BSR set to: 14
  2615                           ;MazeRobot.X/i2c.c: 15:   ANSELDbits.ANSELD6=0;
  2616   0041A8  9DA7               	bcf	167,6,b	;volatile
  2617                           
  2618                           ;MazeRobot.X/i2c.c: 16:   SSP2DATPPS=0x1D;
  2619   0041AA  0E1D               	movlw	29
  2620   0041AC  6F1D               	movwf	29,b	;volatile
  2621                           
  2622                           ;MazeRobot.X/i2c.c: 17:   SSP2CLKPPS=0x1E;
  2623   0041AE  0E1E               	movlw	30
  2624   0041B0  6F1C               	movwf	28,b	;volatile
  2625                           
  2626                           ;MazeRobot.X/i2c.c: 18:   RD5PPS=0x1C;
  2627   0041B2  0E1C               	movlw	28
  2628   0041B4  6F6F               	movwf	111,b	;volatile
  2629                           
  2630                           ;MazeRobot.X/i2c.c: 19:   RD6PPS=0x1B;
  2631   0041B6  0E1B               	movlw	27
  2632   0041B8  6F70               	movwf	112,b	;volatile
  2633   0041BA                     
  2634                           ; BSR set to: 14
  2635   0041BA  0012               	return		;funcret
  2636   0041BC                     __end_of_I2C_2_Master_Init:
  2637                           	callstack 0
  2638                           
  2639 ;; *************** function _colorDetect *****************
  2640 ;; Defined at:
  2641 ;;		line 130 in file "MazeRobot.X/color.c"
  2642 ;; Parameters:    Size  Location     Type
  2643 ;;  clearRef        4    0[BANK0 ] void 
  2644 ;;  ambientRGBVa    2    4[BANK0 ] PTR struct RGB
  2645 ;;		 -> main@ambientRGBVal(8), 
  2646 ;;  whiteRGBVal     2    6[BANK0 ] PTR struct RGB
  2647 ;;		 -> main@whiteRGBVal(8), 
  2648 ;;  mL              2    8[BANK0 ] PTR struct DC_motor
  2649 ;;		 -> main@motorLeft(9), 
  2650 ;;  mR              2   10[BANK0 ] PTR struct DC_motor
  2651 ;;		 -> main@motorRight(9), 
  2652 ;; Auto vars:     Size  Location     Type
  2653 ;;  RGBVal          8   32[BANK0 ] struct RGB
  2654 ;;  bluePrint       4   48[BANK0 ] float 
  2655 ;;  greenPrint      4   44[BANK0 ] float 
  2656 ;;  redPrint        4   40[BANK0 ] float 
  2657 ;;  whiteB          4   20[BANK0 ] float 
  2658 ;;  whiteG          4   16[BANK0 ] float 
  2659 ;;  whiteR          4   12[BANK0 ] float 
  2660 ;;  whiteC          4    0        float 
  2661 ;;  colour_ref      2   30[BANK0 ] unsigned int 
  2662 ;;  ambientB        2   28[BANK0 ] unsigned int 
  2663 ;;  ambientG        2   26[BANK0 ] unsigned int 
  2664 ;;  ambientR        2   24[BANK0 ] unsigned int 
  2665 ;; Return value:  Size  Location     Type
  2666 ;;                  2    0[BANK0 ] unsigned int 
  2667 ;; Registers used:
  2668 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2669 ;; Tracked objects:
  2670 ;;		On entry : 0/0
  2671 ;;		On exit  : 0/0
  2672 ;;		Unchanged: 0/0
  2673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2674 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2675 ;;      Locals:         0      40       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2676 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2677 ;;      Totals:         2      52       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2678 ;;Total ram usage:       54 bytes
  2679 ;; Hardware stack levels used: 1
  2680 ;; Hardware stack levels required when called: 7
  2681 ;; This function calls:
  2682 ;;		___fldiv
  2683 ;;		___flge
  2684 ;;		___flmul
  2685 ;;		___flsub
  2686 ;;		___xxtofl
  2687 ;;		_getColor
  2688 ;;		_reverseSquareLeft
  2689 ;;		_reverseSquareRight
  2690 ;;		_turnLeft_135
  2691 ;;		_turnLeft_90
  2692 ;;		_turnRight_135
  2693 ;;		_turnRight_90
  2694 ;;		_turn_180
  2695 ;; This function is called by:
  2696 ;;		_main
  2697 ;; This function uses a non-reentrant model
  2698 ;;
  2699                           
  2700                           	psect	text9
  2701   000E12                     __ptext9:
  2702                           	callstack 0
  2703   000E12                     _colorDetect:
  2704                           	callstack 23
  2705   000E12                     
  2706                           ;MazeRobot.X/color.c: 133:         RGB RGBVal;;MazeRobot.X/color.c: 134:         getColo
      +                          r(&RGBVal);
  2707   000E12  0E80               	movlw	low colorDetect@RGBVal
  2708   000E14  6E10               	movwf	getColor@v^0,c
  2709   000E16  0E00               	movlw	high colorDetect@RGBVal
  2710   000E18  6E11               	movwf	(getColor@v+1)^0,c
  2711   000E1A  EC4A  F01F         	call	_getColor	;wreg free
  2712   000E1E                     
  2713                           ;MazeRobot.X/color.c: 136:         unsigned int ambientR = ambientRGBVal->R;
  2714   000E1E  C064  FFD9         	movff	colorDetect@ambientRGBVal,fsr2l
  2715   000E22  C065  FFDA         	movff	colorDetect@ambientRGBVal+1,fsr2h
  2716   000E26  CFDE F078          	movff	postinc2,colorDetect@ambientR
  2717   000E2A  CFDD F079          	movff	postdec2,colorDetect@ambientR+1
  2718   000E2E                     
  2719                           ;MazeRobot.X/color.c: 137:         unsigned int ambientG = ambientRGBVal->G;
  2720   000E2E  0100               	movlb	0	; () banked
  2721   000E30  EE20 F002          	lfsr	2,2
  2722   000E34  5164               	movf	colorDetect@ambientRGBVal& (0+255),w,b
  2723   000E36  26D9               	addwf	fsr2l,f,c
  2724   000E38  5165               	movf	(colorDetect@ambientRGBVal+1)& (0+255),w,b
  2725   000E3A  22DA               	addwfc	fsr2h,f,c
  2726   000E3C  CFDE F07A          	movff	postinc2,colorDetect@ambientG
  2727   000E40  CFDD F07B          	movff	postdec2,colorDetect@ambientG+1
  2728   000E44                     
  2729                           ; BSR set to: 0
  2730                           ;MazeRobot.X/color.c: 138:         unsigned int ambientB = ambientRGBVal->B;
  2731   000E44  EE20 F004          	lfsr	2,4
  2732   000E48  5164               	movf	colorDetect@ambientRGBVal& (0+255),w,b
  2733   000E4A  26D9               	addwf	fsr2l,f,c
  2734   000E4C  5165               	movf	(colorDetect@ambientRGBVal+1)& (0+255),w,b
  2735   000E4E  22DA               	addwfc	fsr2h,f,c
  2736   000E50  CFDE F07C          	movff	postinc2,colorDetect@ambientB
  2737   000E54  CFDD F07D          	movff	postdec2,colorDetect@ambientB+1
  2738   000E58                     
  2739                           ; BSR set to: 0
  2740                           ;MazeRobot.X/color.c: 140:         float whiteR = whiteRGBVal->R;
  2741   000E58  C066  FFD9         	movff	colorDetect@whiteRGBVal,fsr2l
  2742   000E5C  C067  FFDA         	movff	colorDetect@whiteRGBVal+1,fsr2h
  2743   000E60  CFDE F04F          	movff	postinc2,??_colorDetect
  2744   000E64  CFDD F050          	movff	postdec2,??_colorDetect+1
  2745   000E68  C04F  F005         	movff	??_colorDetect,___xxtofl@val
  2746   000E6C  C050  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  2747   000E70  6A07               	clrf	(___xxtofl@val+2)^0,c
  2748   000E72  6A08               	clrf	(___xxtofl@val+3)^0,c
  2749   000E74  0E00               	movlw	0
  2750   000E76  EC6E  F016         	call	___xxtofl
  2751   000E7A  C005  F06C         	movff	?___xxtofl,colorDetect@whiteR
  2752   000E7E  C006  F06D         	movff	?___xxtofl+1,colorDetect@whiteR+1
  2753   000E82  C007  F06E         	movff	?___xxtofl+2,colorDetect@whiteR+2
  2754   000E86  C008  F06F         	movff	?___xxtofl+3,colorDetect@whiteR+3
  2755   000E8A                     
  2756                           ;MazeRobot.X/color.c: 141:         float whiteG = whiteRGBVal->G;
  2757   000E8A  0100               	movlb	0	; () banked
  2758   000E8C  EE20 F002          	lfsr	2,2
  2759   000E90  5166               	movf	colorDetect@whiteRGBVal& (0+255),w,b
  2760   000E92  26D9               	addwf	fsr2l,f,c
  2761   000E94  5167               	movf	(colorDetect@whiteRGBVal+1)& (0+255),w,b
  2762   000E96  22DA               	addwfc	fsr2h,f,c
  2763   000E98  CFDE F04F          	movff	postinc2,??_colorDetect
  2764   000E9C  CFDD F050          	movff	postdec2,??_colorDetect+1
  2765   000EA0  C04F  F005         	movff	??_colorDetect,___xxtofl@val
  2766   000EA4  C050  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  2767   000EA8  6A07               	clrf	(___xxtofl@val+2)^0,c
  2768   000EAA  6A08               	clrf	(___xxtofl@val+3)^0,c
  2769   000EAC  0E00               	movlw	0
  2770   000EAE  EC6E  F016         	call	___xxtofl
  2771   000EB2  C005  F070         	movff	?___xxtofl,colorDetect@whiteG
  2772   000EB6  C006  F071         	movff	?___xxtofl+1,colorDetect@whiteG+1
  2773   000EBA  C007  F072         	movff	?___xxtofl+2,colorDetect@whiteG+2
  2774   000EBE  C008  F073         	movff	?___xxtofl+3,colorDetect@whiteG+3
  2775   000EC2                     
  2776                           ;MazeRobot.X/color.c: 142:         float whiteB = whiteRGBVal->B;
  2777   000EC2  0100               	movlb	0	; () banked
  2778   000EC4  EE20 F004          	lfsr	2,4
  2779   000EC8  5166               	movf	colorDetect@whiteRGBVal& (0+255),w,b
  2780   000ECA  26D9               	addwf	fsr2l,f,c
  2781   000ECC  5167               	movf	(colorDetect@whiteRGBVal+1)& (0+255),w,b
  2782   000ECE  22DA               	addwfc	fsr2h,f,c
  2783   000ED0  CFDE F04F          	movff	postinc2,??_colorDetect
  2784   000ED4  CFDD F050          	movff	postdec2,??_colorDetect+1
  2785   000ED8  C04F  F005         	movff	??_colorDetect,___xxtofl@val
  2786   000EDC  C050  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  2787   000EE0  6A07               	clrf	(___xxtofl@val+2)^0,c
  2788   000EE2  6A08               	clrf	(___xxtofl@val+3)^0,c
  2789   000EE4  0E00               	movlw	0
  2790   000EE6  EC6E  F016         	call	___xxtofl
  2791   000EEA  C005  F074         	movff	?___xxtofl,colorDetect@whiteB
  2792   000EEE  C006  F075         	movff	?___xxtofl+1,colorDetect@whiteB+1
  2793   000EF2  C007  F076         	movff	?___xxtofl+2,colorDetect@whiteB+2
  2794   000EF6  C008  F077         	movff	?___xxtofl+3,colorDetect@whiteB+3
  2795   000EFA  0100               	movlb	0	; () banked
  2796   000EFC  EE20 F006          	lfsr	2,6
  2797   000F00  5166               	movf	colorDetect@whiteRGBVal& (0+255),w,b
  2798   000F02  26D9               	addwf	fsr2l,f,c
  2799   000F04  5167               	movf	(colorDetect@whiteRGBVal+1)& (0+255),w,b
  2800   000F06  22DA               	addwfc	fsr2h,f,c
  2801   000F08  CFDE F04F          	movff	postinc2,??_colorDetect
  2802   000F0C  CFDD F050          	movff	postdec2,??_colorDetect+1
  2803   000F10  C04F  F005         	movff	??_colorDetect,___xxtofl@val
  2804   000F14  C050  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  2805   000F18  6A07               	clrf	(___xxtofl@val+2)^0,c
  2806   000F1A  6A08               	clrf	(___xxtofl@val+3)^0,c
  2807   000F1C  0E00               	movlw	0
  2808   000F1E  EC6E  F016         	call	___xxtofl
  2809   000F22                     
  2810                           ;MazeRobot.X/color.c: 145:         float redPrint = (RGBVal.R-ambientR)/((whiteR-(float)
      +                          ambientR)*(clearRef));
  2811   000F22  0100               	movlb	0	; () banked
  2812   000F24  5178               	movf	colorDetect@ambientR& (0+255),w,b
  2813   000F26  5D80               	subwf	colorDetect@RGBVal& (0+255),w,b
  2814   000F28  6E4F               	movwf	??_colorDetect^0,c
  2815   000F2A  5179               	movf	(colorDetect@ambientR+1)& (0+255),w,b
  2816   000F2C  5981               	subwfb	(colorDetect@RGBVal+1)& (0+255),w,b
  2817   000F2E  6E50               	movwf	(??_colorDetect+1)^0,c
  2818   000F30  C04F  F005         	movff	??_colorDetect,___xxtofl@val
  2819   000F34  C050  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  2820   000F38  6A07               	clrf	(___xxtofl@val+2)^0,c
  2821   000F3A  6A08               	clrf	(___xxtofl@val+3)^0,c
  2822   000F3C  0E00               	movlw	0
  2823   000F3E  EC6E  F016         	call	___xxtofl
  2824   000F42  C005  F036         	movff	?___xxtofl,___fldiv@b
  2825   000F46  C006  F037         	movff	?___xxtofl+1,___fldiv@b+1
  2826   000F4A  C007  F038         	movff	?___xxtofl+2,___fldiv@b+2
  2827   000F4E  C008  F039         	movff	?___xxtofl+3,___fldiv@b+3
  2828   000F52  C060  F021         	movff	colorDetect@clearRef,___flmul@a
  2829   000F56  C061  F022         	movff	colorDetect@clearRef+1,___flmul@a+1
  2830   000F5A  C062  F023         	movff	colorDetect@clearRef+2,___flmul@a+2
  2831   000F5E  C063  F024         	movff	colorDetect@clearRef+3,___flmul@a+3
  2832   000F62  C078  F005         	movff	colorDetect@ambientR,___xxtofl@val
  2833   000F66  C079  F006         	movff	colorDetect@ambientR+1,___xxtofl@val+1
  2834   000F6A  6A07               	clrf	(___xxtofl@val+2)^0,c
  2835   000F6C  6A08               	clrf	(___xxtofl@val+3)^0,c
  2836   000F6E  0E00               	movlw	0
  2837   000F70  EC6E  F016         	call	___xxtofl
  2838   000F74  C005  F019         	movff	?___xxtofl,___flsub@a
  2839   000F78  C006  F01A         	movff	?___xxtofl+1,___flsub@a+1
  2840   000F7C  C007  F01B         	movff	?___xxtofl+2,___flsub@a+2
  2841   000F80  C008  F01C         	movff	?___xxtofl+3,___flsub@a+3
  2842   000F84  C06C  F015         	movff	colorDetect@whiteR,___flsub@b
  2843   000F88  C06D  F016         	movff	colorDetect@whiteR+1,___flsub@b+1
  2844   000F8C  C06E  F017         	movff	colorDetect@whiteR+2,___flsub@b+2
  2845   000F90  C06F  F018         	movff	colorDetect@whiteR+3,___flsub@b+3
  2846   000F94  EC3E  F020         	call	___flsub	;wreg free
  2847   000F98  C015  F01D         	movff	?___flsub,___flmul@b
  2848   000F9C  C016  F01E         	movff	?___flsub+1,___flmul@b+1
  2849   000FA0  C017  F01F         	movff	?___flsub+2,___flmul@b+2
  2850   000FA4  C018  F020         	movff	?___flsub+3,___flmul@b+3
  2851   000FA8  EC65  F00F         	call	___flmul	;wreg free
  2852   000FAC  C01D  F03A         	movff	?___flmul,___fldiv@a
  2853   000FB0  C01E  F03B         	movff	?___flmul+1,___fldiv@a+1
  2854   000FB4  C01F  F03C         	movff	?___flmul+2,___fldiv@a+2
  2855   000FB8  C020  F03D         	movff	?___flmul+3,___fldiv@a+3
  2856   000FBC  EC8E  F013         	call	___fldiv	;wreg free
  2857   000FC0  C036  F088         	movff	?___fldiv,colorDetect@redPrint
  2858   000FC4  C037  F089         	movff	?___fldiv+1,colorDetect@redPrint+1
  2859   000FC8  C038  F08A         	movff	?___fldiv+2,colorDetect@redPrint+2
  2860   000FCC  C039  F08B         	movff	?___fldiv+3,colorDetect@redPrint+3
  2861   000FD0                     
  2862                           ;MazeRobot.X/color.c: 146:         float greenPrint = (RGBVal.G-ambientG)/((whiteG-(floa
      +                          t)ambientG)*(clearRef));
  2863   000FD0  0100               	movlb	0	; () banked
  2864   000FD2  517A               	movf	colorDetect@ambientG& (0+255),w,b
  2865   000FD4  5D82               	subwf	(colorDetect@RGBVal+2)& (0+255),w,b
  2866   000FD6  6E4F               	movwf	??_colorDetect^0,c
  2867   000FD8  517B               	movf	(colorDetect@ambientG+1)& (0+255),w,b
  2868   000FDA  5983               	subwfb	(colorDetect@RGBVal+3)& (0+255),w,b
  2869   000FDC  6E50               	movwf	(??_colorDetect+1)^0,c
  2870   000FDE  C04F  F005         	movff	??_colorDetect,___xxtofl@val
  2871   000FE2  C050  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  2872   000FE6  6A07               	clrf	(___xxtofl@val+2)^0,c
  2873   000FE8  6A08               	clrf	(___xxtofl@val+3)^0,c
  2874   000FEA  0E00               	movlw	0
  2875   000FEC  EC6E  F016         	call	___xxtofl
  2876   000FF0  C005  F036         	movff	?___xxtofl,___fldiv@b
  2877   000FF4  C006  F037         	movff	?___xxtofl+1,___fldiv@b+1
  2878   000FF8  C007  F038         	movff	?___xxtofl+2,___fldiv@b+2
  2879   000FFC  C008  F039         	movff	?___xxtofl+3,___fldiv@b+3
  2880   001000  C060  F021         	movff	colorDetect@clearRef,___flmul@a
  2881   001004  C061  F022         	movff	colorDetect@clearRef+1,___flmul@a+1
  2882   001008  C062  F023         	movff	colorDetect@clearRef+2,___flmul@a+2
  2883   00100C  C063  F024         	movff	colorDetect@clearRef+3,___flmul@a+3
  2884   001010  C07A  F005         	movff	colorDetect@ambientG,___xxtofl@val
  2885   001014  C07B  F006         	movff	colorDetect@ambientG+1,___xxtofl@val+1
  2886   001018  6A07               	clrf	(___xxtofl@val+2)^0,c
  2887   00101A  6A08               	clrf	(___xxtofl@val+3)^0,c
  2888   00101C  0E00               	movlw	0
  2889   00101E  EC6E  F016         	call	___xxtofl
  2890   001022  C005  F019         	movff	?___xxtofl,___flsub@a
  2891   001026  C006  F01A         	movff	?___xxtofl+1,___flsub@a+1
  2892   00102A  C007  F01B         	movff	?___xxtofl+2,___flsub@a+2
  2893   00102E  C008  F01C         	movff	?___xxtofl+3,___flsub@a+3
  2894   001032  C070  F015         	movff	colorDetect@whiteG,___flsub@b
  2895   001036  C071  F016         	movff	colorDetect@whiteG+1,___flsub@b+1
  2896   00103A  C072  F017         	movff	colorDetect@whiteG+2,___flsub@b+2
  2897   00103E  C073  F018         	movff	colorDetect@whiteG+3,___flsub@b+3
  2898   001042  EC3E  F020         	call	___flsub	;wreg free
  2899   001046  C015  F01D         	movff	?___flsub,___flmul@b
  2900   00104A  C016  F01E         	movff	?___flsub+1,___flmul@b+1
  2901   00104E  C017  F01F         	movff	?___flsub+2,___flmul@b+2
  2902   001052  C018  F020         	movff	?___flsub+3,___flmul@b+3
  2903   001056  EC65  F00F         	call	___flmul	;wreg free
  2904   00105A  C01D  F03A         	movff	?___flmul,___fldiv@a
  2905   00105E  C01E  F03B         	movff	?___flmul+1,___fldiv@a+1
  2906   001062  C01F  F03C         	movff	?___flmul+2,___fldiv@a+2
  2907   001066  C020  F03D         	movff	?___flmul+3,___fldiv@a+3
  2908   00106A  EC8E  F013         	call	___fldiv	;wreg free
  2909   00106E  C036  F08C         	movff	?___fldiv,colorDetect@greenPrint
  2910   001072  C037  F08D         	movff	?___fldiv+1,colorDetect@greenPrint+1
  2911   001076  C038  F08E         	movff	?___fldiv+2,colorDetect@greenPrint+2
  2912   00107A  C039  F08F         	movff	?___fldiv+3,colorDetect@greenPrint+3
  2913   00107E                     
  2914                           ;MazeRobot.X/color.c: 147:         float bluePrint = (RGBVal.B-ambientB)/((whiteB-(float
      +                          )ambientB)*(clearRef));
  2915   00107E  0100               	movlb	0	; () banked
  2916   001080  517C               	movf	colorDetect@ambientB& (0+255),w,b
  2917   001082  5D84               	subwf	(colorDetect@RGBVal+4)& (0+255),w,b
  2918   001084  6E4F               	movwf	??_colorDetect^0,c
  2919   001086  517D               	movf	(colorDetect@ambientB+1)& (0+255),w,b
  2920   001088  5985               	subwfb	(colorDetect@RGBVal+5)& (0+255),w,b
  2921   00108A  6E50               	movwf	(??_colorDetect+1)^0,c
  2922   00108C  C04F  F005         	movff	??_colorDetect,___xxtofl@val
  2923   001090  C050  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  2924   001094  6A07               	clrf	(___xxtofl@val+2)^0,c
  2925   001096  6A08               	clrf	(___xxtofl@val+3)^0,c
  2926   001098  0E00               	movlw	0
  2927   00109A  EC6E  F016         	call	___xxtofl
  2928   00109E  C005  F036         	movff	?___xxtofl,___fldiv@b
  2929   0010A2  C006  F037         	movff	?___xxtofl+1,___fldiv@b+1
  2930   0010A6  C007  F038         	movff	?___xxtofl+2,___fldiv@b+2
  2931   0010AA  C008  F039         	movff	?___xxtofl+3,___fldiv@b+3
  2932   0010AE  C060  F021         	movff	colorDetect@clearRef,___flmul@a
  2933   0010B2  C061  F022         	movff	colorDetect@clearRef+1,___flmul@a+1
  2934   0010B6  C062  F023         	movff	colorDetect@clearRef+2,___flmul@a+2
  2935   0010BA  C063  F024         	movff	colorDetect@clearRef+3,___flmul@a+3
  2936   0010BE  C07C  F005         	movff	colorDetect@ambientB,___xxtofl@val
  2937   0010C2  C07D  F006         	movff	colorDetect@ambientB+1,___xxtofl@val+1
  2938   0010C6  6A07               	clrf	(___xxtofl@val+2)^0,c
  2939   0010C8  6A08               	clrf	(___xxtofl@val+3)^0,c
  2940   0010CA  0E00               	movlw	0
  2941   0010CC  EC6E  F016         	call	___xxtofl
  2942   0010D0  C005  F019         	movff	?___xxtofl,___flsub@a
  2943   0010D4  C006  F01A         	movff	?___xxtofl+1,___flsub@a+1
  2944   0010D8  C007  F01B         	movff	?___xxtofl+2,___flsub@a+2
  2945   0010DC  C008  F01C         	movff	?___xxtofl+3,___flsub@a+3
  2946   0010E0  C074  F015         	movff	colorDetect@whiteB,___flsub@b
  2947   0010E4  C075  F016         	movff	colorDetect@whiteB+1,___flsub@b+1
  2948   0010E8  C076  F017         	movff	colorDetect@whiteB+2,___flsub@b+2
  2949   0010EC  C077  F018         	movff	colorDetect@whiteB+3,___flsub@b+3
  2950   0010F0  EC3E  F020         	call	___flsub	;wreg free
  2951   0010F4  C015  F01D         	movff	?___flsub,___flmul@b
  2952   0010F8  C016  F01E         	movff	?___flsub+1,___flmul@b+1
  2953   0010FC  C017  F01F         	movff	?___flsub+2,___flmul@b+2
  2954   001100  C018  F020         	movff	?___flsub+3,___flmul@b+3
  2955   001104  EC65  F00F         	call	___flmul	;wreg free
  2956   001108  C01D  F03A         	movff	?___flmul,___fldiv@a
  2957   00110C  C01E  F03B         	movff	?___flmul+1,___fldiv@a+1
  2958   001110  C01F  F03C         	movff	?___flmul+2,___fldiv@a+2
  2959   001114  C020  F03D         	movff	?___flmul+3,___fldiv@a+3
  2960   001118  EC8E  F013         	call	___fldiv	;wreg free
  2961   00111C  C036  F090         	movff	?___fldiv,colorDetect@bluePrint
  2962   001120  C037  F091         	movff	?___fldiv+1,colorDetect@bluePrint+1
  2963   001124  C038  F092         	movff	?___fldiv+2,colorDetect@bluePrint+2
  2964   001128  C039  F093         	movff	?___fldiv+3,colorDetect@bluePrint+3
  2965   00112C                     
  2966                           ;MazeRobot.X/color.c: 149:         unsigned int colour_ref;;MazeRobot.X/color.c: 151:   
      +                                if ((redPrint < 0) | (redPrint > 2)) { redPrint = 0.0;}
  2967   00112C  0100               	movlb	0	; () banked
  2968   00112E  BF8B               	btfsc	(colorDetect@redPrint+3)& (0+255),7,b
  2969   001130  EF9C  F008         	goto	u4451
  2970   001134  EF9E  F008         	goto	u4450
  2971   001138                     u4451:
  2972   001138  EFB7  F008         	goto	l4346
  2973   00113C                     u4450:
  2974   00113C                     
  2975                           ; BSR set to: 0
  2976   00113C  0E00               	movlw	0
  2977   00113E  6E1D               	movwf	___flge@ff1^0,c
  2978   001140  0E00               	movlw	0
  2979   001142  6E1E               	movwf	(___flge@ff1+1)^0,c
  2980   001144  0E00               	movlw	0
  2981   001146  6E1F               	movwf	(___flge@ff1+2)^0,c
  2982   001148  0E40               	movlw	64
  2983   00114A  6E20               	movwf	(___flge@ff1+3)^0,c
  2984   00114C  C088  F021         	movff	colorDetect@redPrint,___flge@ff2
  2985   001150  C089  F022         	movff	colorDetect@redPrint+1,___flge@ff2+1
  2986   001154  C08A  F023         	movff	colorDetect@redPrint+2,___flge@ff2+2
  2987   001158  C08B  F024         	movff	colorDetect@redPrint+3,___flge@ff2+3
  2988   00115C  EC36  F01B         	call	___flge	;wreg free
  2989   001160  B0D8               	btfsc	status,0,c
  2990   001162  EFB5  F008         	goto	u4461
  2991   001166  EFB7  F008         	goto	u4460
  2992   00116A                     u4461:
  2993   00116A  EFC0  F008         	goto	l4348
  2994   00116E                     u4460:
  2995   00116E                     l4346:
  2996   00116E  0E00               	movlw	0
  2997   001170  0100               	movlb	0	; () banked
  2998   001172  6F88               	movwf	colorDetect@redPrint& (0+255),b
  2999   001174  0E00               	movlw	0
  3000   001176  6F89               	movwf	(colorDetect@redPrint+1)& (0+255),b
  3001   001178  0E00               	movlw	0
  3002   00117A  6F8A               	movwf	(colorDetect@redPrint+2)& (0+255),b
  3003   00117C  0E00               	movlw	0
  3004   00117E  6F8B               	movwf	(colorDetect@redPrint+3)& (0+255),b
  3005   001180                     l4348:
  3006                           
  3007                           ;MazeRobot.X/color.c: 152:         if ((greenPrint < 0) | (greenPrint > 2)) {greenPrint 
      +                          = 0.0;}
  3008   001180  0100               	movlb	0	; () banked
  3009   001182  BF8F               	btfsc	(colorDetect@greenPrint+3)& (0+255),7,b
  3010   001184  EFC6  F008         	goto	u4471
  3011   001188  EFC8  F008         	goto	u4470
  3012   00118C                     u4471:
  3013   00118C  EFE1  F008         	goto	l4352
  3014   001190                     u4470:
  3015   001190                     
  3016                           ; BSR set to: 0
  3017   001190  0E00               	movlw	0
  3018   001192  6E1D               	movwf	___flge@ff1^0,c
  3019   001194  0E00               	movlw	0
  3020   001196  6E1E               	movwf	(___flge@ff1+1)^0,c
  3021   001198  0E00               	movlw	0
  3022   00119A  6E1F               	movwf	(___flge@ff1+2)^0,c
  3023   00119C  0E40               	movlw	64
  3024   00119E  6E20               	movwf	(___flge@ff1+3)^0,c
  3025   0011A0  C08C  F021         	movff	colorDetect@greenPrint,___flge@ff2
  3026   0011A4  C08D  F022         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  3027   0011A8  C08E  F023         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  3028   0011AC  C08F  F024         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  3029   0011B0  EC36  F01B         	call	___flge	;wreg free
  3030   0011B4  B0D8               	btfsc	status,0,c
  3031   0011B6  EFDF  F008         	goto	u4481
  3032   0011BA  EFE1  F008         	goto	u4480
  3033   0011BE                     u4481:
  3034   0011BE  EFEA  F008         	goto	l4354
  3035   0011C2                     u4480:
  3036   0011C2                     l4352:
  3037   0011C2  0E00               	movlw	0
  3038   0011C4  0100               	movlb	0	; () banked
  3039   0011C6  6F8C               	movwf	colorDetect@greenPrint& (0+255),b
  3040   0011C8  0E00               	movlw	0
  3041   0011CA  6F8D               	movwf	(colorDetect@greenPrint+1)& (0+255),b
  3042   0011CC  0E00               	movlw	0
  3043   0011CE  6F8E               	movwf	(colorDetect@greenPrint+2)& (0+255),b
  3044   0011D0  0E00               	movlw	0
  3045   0011D2  6F8F               	movwf	(colorDetect@greenPrint+3)& (0+255),b
  3046   0011D4                     l4354:
  3047                           
  3048                           ;MazeRobot.X/color.c: 153:         if ((bluePrint < 0) | (bluePrint > 2)){ bluePrint = 0
      +                          .0;}
  3049   0011D4  0100               	movlb	0	; () banked
  3050   0011D6  BF93               	btfsc	(colorDetect@bluePrint+3)& (0+255),7,b
  3051   0011D8  EFF0  F008         	goto	u4491
  3052   0011DC  EFF2  F008         	goto	u4490
  3053   0011E0                     u4491:
  3054   0011E0  EF0B  F009         	goto	l4358
  3055   0011E4                     u4490:
  3056   0011E4                     
  3057                           ; BSR set to: 0
  3058   0011E4  0E00               	movlw	0
  3059   0011E6  6E1D               	movwf	___flge@ff1^0,c
  3060   0011E8  0E00               	movlw	0
  3061   0011EA  6E1E               	movwf	(___flge@ff1+1)^0,c
  3062   0011EC  0E00               	movlw	0
  3063   0011EE  6E1F               	movwf	(___flge@ff1+2)^0,c
  3064   0011F0  0E40               	movlw	64
  3065   0011F2  6E20               	movwf	(___flge@ff1+3)^0,c
  3066   0011F4  C090  F021         	movff	colorDetect@bluePrint,___flge@ff2
  3067   0011F8  C091  F022         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  3068   0011FC  C092  F023         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  3069   001200  C093  F024         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  3070   001204  EC36  F01B         	call	___flge	;wreg free
  3071   001208  B0D8               	btfsc	status,0,c
  3072   00120A  EF09  F009         	goto	u4501
  3073   00120E  EF0B  F009         	goto	u4500
  3074   001212                     u4501:
  3075   001212  EF14  F009         	goto	l4360
  3076   001216                     u4500:
  3077   001216                     l4358:
  3078   001216  0E00               	movlw	0
  3079   001218  0100               	movlb	0	; () banked
  3080   00121A  6F90               	movwf	colorDetect@bluePrint& (0+255),b
  3081   00121C  0E00               	movlw	0
  3082   00121E  6F91               	movwf	(colorDetect@bluePrint+1)& (0+255),b
  3083   001220  0E00               	movlw	0
  3084   001222  6F92               	movwf	(colorDetect@bluePrint+2)& (0+255),b
  3085   001224  0E00               	movlw	0
  3086   001226  6F93               	movwf	(colorDetect@bluePrint+3)& (0+255),b
  3087   001228                     l4360:
  3088                           
  3089                           ;MazeRobot.X/color.c: 156:         if ((redPrint > 0.9) & (greenPrint > 0.9) & (bluePrin
      +                          t > 0.9)){
  3090   001228  0E66               	movlw	102
  3091   00122A  6E1D               	movwf	___flge@ff1^0,c
  3092   00122C  0E66               	movlw	102
  3093   00122E  6E1E               	movwf	(___flge@ff1+1)^0,c
  3094   001230  0E66               	movlw	102
  3095   001232  6E1F               	movwf	(___flge@ff1+2)^0,c
  3096   001234  0E3F               	movlw	63
  3097   001236  6E20               	movwf	(___flge@ff1+3)^0,c
  3098   001238  C088  F021         	movff	colorDetect@redPrint,___flge@ff2
  3099   00123C  C089  F022         	movff	colorDetect@redPrint+1,___flge@ff2+1
  3100   001240  C08A  F023         	movff	colorDetect@redPrint+2,___flge@ff2+2
  3101   001244  C08B  F024         	movff	colorDetect@redPrint+3,___flge@ff2+3
  3102   001248  EC36  F01B         	call	___flge	;wreg free
  3103   00124C  B0D8               	btfsc	status,0,c
  3104   00124E  EF2B  F009         	goto	u4511
  3105   001252  EF2D  F009         	goto	u4510
  3106   001256                     u4511:
  3107   001256  EF7E  F009         	goto	l4374
  3108   00125A                     u4510:
  3109   00125A  0E66               	movlw	102
  3110   00125C  6E1D               	movwf	___flge@ff1^0,c
  3111   00125E  0E66               	movlw	102
  3112   001260  6E1E               	movwf	(___flge@ff1+1)^0,c
  3113   001262  0E66               	movlw	102
  3114   001264  6E1F               	movwf	(___flge@ff1+2)^0,c
  3115   001266  0E3F               	movlw	63
  3116   001268  6E20               	movwf	(___flge@ff1+3)^0,c
  3117   00126A  C08C  F021         	movff	colorDetect@greenPrint,___flge@ff2
  3118   00126E  C08D  F022         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  3119   001272  C08E  F023         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  3120   001276  C08F  F024         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  3121   00127A  EC36  F01B         	call	___flge	;wreg free
  3122   00127E  B0D8               	btfsc	status,0,c
  3123   001280  EF44  F009         	goto	u4521
  3124   001284  EF46  F009         	goto	u4520
  3125   001288                     u4521:
  3126   001288  EF7E  F009         	goto	l4374
  3127   00128C                     u4520:
  3128   00128C  0E66               	movlw	102
  3129   00128E  6E1D               	movwf	___flge@ff1^0,c
  3130   001290  0E66               	movlw	102
  3131   001292  6E1E               	movwf	(___flge@ff1+1)^0,c
  3132   001294  0E66               	movlw	102
  3133   001296  6E1F               	movwf	(___flge@ff1+2)^0,c
  3134   001298  0E3F               	movlw	63
  3135   00129A  6E20               	movwf	(___flge@ff1+3)^0,c
  3136   00129C  C090  F021         	movff	colorDetect@bluePrint,___flge@ff2
  3137   0012A0  C091  F022         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  3138   0012A4  C092  F023         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  3139   0012A8  C093  F024         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  3140   0012AC  EC36  F01B         	call	___flge	;wreg free
  3141   0012B0  B0D8               	btfsc	status,0,c
  3142   0012B2  EF5D  F009         	goto	u4531
  3143   0012B6  EF5F  F009         	goto	u4530
  3144   0012BA                     u4531:
  3145   0012BA  EF7E  F009         	goto	l4374
  3146   0012BE                     u4530:
  3147   0012BE                     
  3148                           ;MazeRobot.X/color.c: 157:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3149   0012BE  0E2A               	movlw	42
  3150   0012C0  6E4F               	movwf	??_colorDetect^0,c
  3151   0012C2  0E8E               	movlw	142
  3152   0012C4                     u5077:
  3153   0012C4  2EE8               	decfsz	wreg,f,c
  3154   0012C6  D7FE               	bra	u5077
  3155   0012C8  2E4F               	decfsz	??_colorDetect^0,f,c
  3156   0012CA  D7FC               	bra	u5077
  3157   0012CC                     
  3158                           ;MazeRobot.X/color.c: 158:         turn_180(mL,mR);
  3159   0012CC  C068  F01E         	movff	colorDetect@mL,turn_180@mL
  3160   0012D0  C069  F01F         	movff	colorDetect@mL+1,turn_180@mL+1
  3161   0012D4  C06A  F020         	movff	colorDetect@mR,turn_180@mR
  3162   0012D8  C06B  F021         	movff	colorDetect@mR+1,turn_180@mR+1
  3163   0012DC  EC5B  F015         	call	_turn_180	;wreg free
  3164   0012E0                     
  3165                           ;MazeRobot.X/color.c: 159:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3166   0012E0  0E2A               	movlw	42
  3167   0012E2  6E4F               	movwf	??_colorDetect^0,c
  3168   0012E4  0E8E               	movlw	142
  3169   0012E6                     u5087:
  3170   0012E6  2EE8               	decfsz	wreg,f,c
  3171   0012E8  D7FE               	bra	u5087
  3172   0012EA  2E4F               	decfsz	??_colorDetect^0,f,c
  3173   0012EC  D7FC               	bra	u5087
  3174   0012EE                     
  3175                           ;MazeRobot.X/color.c: 160:         colour_ref = 8;
  3176   0012EE  0E00               	movlw	0
  3177   0012F0  0100               	movlb	0	; () banked
  3178   0012F2  6F7F               	movwf	(colorDetect@colour_ref+1)& (0+255),b
  3179   0012F4  0E08               	movlw	8
  3180   0012F6  6F7E               	movwf	colorDetect@colour_ref& (0+255),b
  3181                           
  3182                           ;MazeRobot.X/color.c: 161:         }
  3183   0012F8  EF92  F00B         	goto	l4430
  3184   0012FC                     l4374:
  3185   0012FC  0E00               	movlw	0
  3186   0012FE  6E1D               	movwf	___flge@ff1^0,c
  3187   001300  0E00               	movlw	0
  3188   001302  6E1E               	movwf	(___flge@ff1+1)^0,c
  3189   001304  0EC0               	movlw	192
  3190   001306  6E1F               	movwf	(___flge@ff1+2)^0,c
  3191   001308  0E3F               	movlw	63
  3192   00130A  6E20               	movwf	(___flge@ff1+3)^0,c
  3193   00130C  C088  F021         	movff	colorDetect@redPrint,___flge@ff2
  3194   001310  C089  F022         	movff	colorDetect@redPrint+1,___flge@ff2+1
  3195   001314  C08A  F023         	movff	colorDetect@redPrint+2,___flge@ff2+2
  3196   001318  C08B  F024         	movff	colorDetect@redPrint+3,___flge@ff2+3
  3197   00131C  EC36  F01B         	call	___flge	;wreg free
  3198   001320  B0D8               	btfsc	status,0,c
  3199   001322  EF95  F009         	goto	u4541
  3200   001326  EF97  F009         	goto	u4540
  3201   00132A                     u4541:
  3202   00132A  EF0C  F00A         	goto	l4388
  3203   00132E                     u4540:
  3204   00132E  0ECD               	movlw	205
  3205   001330  6E1D               	movwf	___flge@ff1^0,c
  3206   001332  0ECC               	movlw	204
  3207   001334  6E1E               	movwf	(___flge@ff1+1)^0,c
  3208   001336  0E4C               	movlw	76
  3209   001338  6E1F               	movwf	(___flge@ff1+2)^0,c
  3210   00133A  0E3F               	movlw	63
  3211   00133C  6E20               	movwf	(___flge@ff1+3)^0,c
  3212   00133E  C08C  F019         	movff	colorDetect@greenPrint,___flsub@a
  3213   001342  C08D  F01A         	movff	colorDetect@greenPrint+1,___flsub@a+1
  3214   001346  C08E  F01B         	movff	colorDetect@greenPrint+2,___flsub@a+2
  3215   00134A  C08F  F01C         	movff	colorDetect@greenPrint+3,___flsub@a+3
  3216   00134E  C088  F015         	movff	colorDetect@redPrint,___flsub@b
  3217   001352  C089  F016         	movff	colorDetect@redPrint+1,___flsub@b+1
  3218   001356  C08A  F017         	movff	colorDetect@redPrint+2,___flsub@b+2
  3219   00135A  C08B  F018         	movff	colorDetect@redPrint+3,___flsub@b+3
  3220   00135E  EC3E  F020         	call	___flsub	;wreg free
  3221   001362  C015  F021         	movff	?___flsub,___flge@ff2
  3222   001366  C016  F022         	movff	?___flsub+1,___flge@ff2+1
  3223   00136A  C017  F023         	movff	?___flsub+2,___flge@ff2+2
  3224   00136E  C018  F024         	movff	?___flsub+3,___flge@ff2+3
  3225   001372  EC36  F01B         	call	___flge	;wreg free
  3226   001376  B0D8               	btfsc	status,0,c
  3227   001378  EFC0  F009         	goto	u4551
  3228   00137C  EFC2  F009         	goto	u4550
  3229   001380                     u4551:
  3230   001380  EF0C  F00A         	goto	l4388
  3231   001384                     u4550:
  3232   001384  0ECD               	movlw	205
  3233   001386  6E1D               	movwf	___flge@ff1^0,c
  3234   001388  0ECC               	movlw	204
  3235   00138A  6E1E               	movwf	(___flge@ff1+1)^0,c
  3236   00138C  0E4C               	movlw	76
  3237   00138E  6E1F               	movwf	(___flge@ff1+2)^0,c
  3238   001390  0E3F               	movlw	63
  3239   001392  6E20               	movwf	(___flge@ff1+3)^0,c
  3240   001394  C090  F019         	movff	colorDetect@bluePrint,___flsub@a
  3241   001398  C091  F01A         	movff	colorDetect@bluePrint+1,___flsub@a+1
  3242   00139C  C092  F01B         	movff	colorDetect@bluePrint+2,___flsub@a+2
  3243   0013A0  C093  F01C         	movff	colorDetect@bluePrint+3,___flsub@a+3
  3244   0013A4  C088  F015         	movff	colorDetect@redPrint,___flsub@b
  3245   0013A8  C089  F016         	movff	colorDetect@redPrint+1,___flsub@b+1
  3246   0013AC  C08A  F017         	movff	colorDetect@redPrint+2,___flsub@b+2
  3247   0013B0  C08B  F018         	movff	colorDetect@redPrint+3,___flsub@b+3
  3248   0013B4  EC3E  F020         	call	___flsub	;wreg free
  3249   0013B8  C015  F021         	movff	?___flsub,___flge@ff2
  3250   0013BC  C016  F022         	movff	?___flsub+1,___flge@ff2+1
  3251   0013C0  C017  F023         	movff	?___flsub+2,___flge@ff2+2
  3252   0013C4  C018  F024         	movff	?___flsub+3,___flge@ff2+3
  3253   0013C8  EC36  F01B         	call	___flge	;wreg free
  3254   0013CC  B0D8               	btfsc	status,0,c
  3255   0013CE  EFEB  F009         	goto	u4561
  3256   0013D2  EFED  F009         	goto	u4560
  3257   0013D6                     u4561:
  3258   0013D6  EF0C  F00A         	goto	l4388
  3259   0013DA                     u4560:
  3260   0013DA                     
  3261                           ;MazeRobot.X/color.c: 165:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3262   0013DA  0E2A               	movlw	42
  3263   0013DC  6E4F               	movwf	??_colorDetect^0,c
  3264   0013DE  0E8E               	movlw	142
  3265   0013E0                     u5097:
  3266   0013E0  2EE8               	decfsz	wreg,f,c
  3267   0013E2  D7FE               	bra	u5097
  3268   0013E4  2E4F               	decfsz	??_colorDetect^0,f,c
  3269   0013E6  D7FC               	bra	u5097
  3270   0013E8                     
  3271                           ;MazeRobot.X/color.c: 166:         turnRight_90(mL,mR);
  3272   0013E8  C068  F01E         	movff	colorDetect@mL,turnRight_90@mL
  3273   0013EC  C069  F01F         	movff	colorDetect@mL+1,turnRight_90@mL+1
  3274   0013F0  C06A  F020         	movff	colorDetect@mR,turnRight_90@mR
  3275   0013F4  C06B  F021         	movff	colorDetect@mR+1,turnRight_90@mR+1
  3276   0013F8  EC5A  F019         	call	_turnRight_90	;wreg free
  3277   0013FC                     
  3278                           ;MazeRobot.X/color.c: 167:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3279   0013FC  0E2A               	movlw	42
  3280   0013FE  6E4F               	movwf	??_colorDetect^0,c
  3281   001400  0E8E               	movlw	142
  3282   001402                     u5107:
  3283   001402  2EE8               	decfsz	wreg,f,c
  3284   001404  D7FE               	bra	u5107
  3285   001406  2E4F               	decfsz	??_colorDetect^0,f,c
  3286   001408  D7FC               	bra	u5107
  3287   00140A                     
  3288                           ;MazeRobot.X/color.c: 168:         colour_ref = 1;
  3289   00140A  0E00               	movlw	0
  3290   00140C  0100               	movlb	0	; () banked
  3291   00140E  6F7F               	movwf	(colorDetect@colour_ref+1)& (0+255),b
  3292   001410  0E01               	movlw	1
  3293   001412  6F7E               	movwf	colorDetect@colour_ref& (0+255),b
  3294                           
  3295                           ;MazeRobot.X/color.c: 170:         }
  3296   001414  EF92  F00B         	goto	l4430
  3297   001418                     l4388:
  3298   001418  0ECD               	movlw	205
  3299   00141A  6E1D               	movwf	___flge@ff1^0,c
  3300   00141C  0ECC               	movlw	204
  3301   00141E  6E1E               	movwf	(___flge@ff1+1)^0,c
  3302   001420  0ECC               	movlw	204
  3303   001422  6E1F               	movwf	(___flge@ff1+2)^0,c
  3304   001424  0E3E               	movlw	62
  3305   001426  6E20               	movwf	(___flge@ff1+3)^0,c
  3306   001428  C088  F019         	movff	colorDetect@redPrint,___flsub@a
  3307   00142C  C089  F01A         	movff	colorDetect@redPrint+1,___flsub@a+1
  3308   001430  C08A  F01B         	movff	colorDetect@redPrint+2,___flsub@a+2
  3309   001434  C08B  F01C         	movff	colorDetect@redPrint+3,___flsub@a+3
  3310   001438  C08C  F015         	movff	colorDetect@greenPrint,___flsub@b
  3311   00143C  C08D  F016         	movff	colorDetect@greenPrint+1,___flsub@b+1
  3312   001440  C08E  F017         	movff	colorDetect@greenPrint+2,___flsub@b+2
  3313   001444  C08F  F018         	movff	colorDetect@greenPrint+3,___flsub@b+3
  3314   001448  EC3E  F020         	call	___flsub	;wreg free
  3315   00144C  C015  F021         	movff	?___flsub,___flge@ff2
  3316   001450  C016  F022         	movff	?___flsub+1,___flge@ff2+1
  3317   001454  C017  F023         	movff	?___flsub+2,___flge@ff2+2
  3318   001458  C018  F024         	movff	?___flsub+3,___flge@ff2+3
  3319   00145C  EC36  F01B         	call	___flge	;wreg free
  3320   001460  B0D8               	btfsc	status,0,c
  3321   001462  EF35  F00A         	goto	u4571
  3322   001466  EF37  F00A         	goto	u4570
  3323   00146A                     u4571:
  3324   00146A  EF9A  F00A         	goto	l4402
  3325   00146E                     u4570:
  3326   00146E  0E00               	movlw	0
  3327   001470  6E1D               	movwf	___flge@ff1^0,c
  3328   001472  0E00               	movlw	0
  3329   001474  6E1E               	movwf	(___flge@ff1+1)^0,c
  3330   001476  0E80               	movlw	128
  3331   001478  6E1F               	movwf	(___flge@ff1+2)^0,c
  3332   00147A  0E3F               	movlw	63
  3333   00147C  6E20               	movwf	(___flge@ff1+3)^0,c
  3334   00147E  C08C  F021         	movff	colorDetect@greenPrint,___flge@ff2
  3335   001482  C08D  F022         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  3336   001486  C08E  F023         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  3337   00148A  C08F  F024         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  3338   00148E  EC36  F01B         	call	___flge	;wreg free
  3339   001492  B0D8               	btfsc	status,0,c
  3340   001494  EF4E  F00A         	goto	u4581
  3341   001498  EF50  F00A         	goto	u4580
  3342   00149C                     u4581:
  3343   00149C  EF9A  F00A         	goto	l4402
  3344   0014A0                     u4580:
  3345   0014A0  0ECD               	movlw	205
  3346   0014A2  6E1D               	movwf	___flge@ff1^0,c
  3347   0014A4  0ECC               	movlw	204
  3348   0014A6  6E1E               	movwf	(___flge@ff1+1)^0,c
  3349   0014A8  0ECC               	movlw	204
  3350   0014AA  6E1F               	movwf	(___flge@ff1+2)^0,c
  3351   0014AC  0E3E               	movlw	62
  3352   0014AE  6E20               	movwf	(___flge@ff1+3)^0,c
  3353   0014B0  C090  F019         	movff	colorDetect@bluePrint,___flsub@a
  3354   0014B4  C091  F01A         	movff	colorDetect@bluePrint+1,___flsub@a+1
  3355   0014B8  C092  F01B         	movff	colorDetect@bluePrint+2,___flsub@a+2
  3356   0014BC  C093  F01C         	movff	colorDetect@bluePrint+3,___flsub@a+3
  3357   0014C0  C08C  F015         	movff	colorDetect@greenPrint,___flsub@b
  3358   0014C4  C08D  F016         	movff	colorDetect@greenPrint+1,___flsub@b+1
  3359   0014C8  C08E  F017         	movff	colorDetect@greenPrint+2,___flsub@b+2
  3360   0014CC  C08F  F018         	movff	colorDetect@greenPrint+3,___flsub@b+3
  3361   0014D0  EC3E  F020         	call	___flsub	;wreg free
  3362   0014D4  C015  F021         	movff	?___flsub,___flge@ff2
  3363   0014D8  C016  F022         	movff	?___flsub+1,___flge@ff2+1
  3364   0014DC  C017  F023         	movff	?___flsub+2,___flge@ff2+2
  3365   0014E0  C018  F024         	movff	?___flsub+3,___flge@ff2+3
  3366   0014E4  EC36  F01B         	call	___flge	;wreg free
  3367   0014E8  B0D8               	btfsc	status,0,c
  3368   0014EA  EF79  F00A         	goto	u4591
  3369   0014EE  EF7B  F00A         	goto	u4590
  3370   0014F2                     u4591:
  3371   0014F2  EF9A  F00A         	goto	l4402
  3372   0014F6                     u4590:
  3373   0014F6                     
  3374                           ;MazeRobot.X/color.c: 174:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3375   0014F6  0E2A               	movlw	42
  3376   0014F8  6E4F               	movwf	??_colorDetect^0,c
  3377   0014FA  0E8E               	movlw	142
  3378   0014FC                     u5117:
  3379   0014FC  2EE8               	decfsz	wreg,f,c
  3380   0014FE  D7FE               	bra	u5117
  3381   001500  2E4F               	decfsz	??_colorDetect^0,f,c
  3382   001502  D7FC               	bra	u5117
  3383   001504                     
  3384                           ;MazeRobot.X/color.c: 175:         turnLeft_90(mL,mR);
  3385   001504  C068  F01E         	movff	colorDetect@mL,turnLeft_90@mL
  3386   001508  C069  F01F         	movff	colorDetect@mL+1,turnLeft_90@mL+1
  3387   00150C  C06A  F020         	movff	colorDetect@mR,turnLeft_90@mR
  3388   001510  C06B  F021         	movff	colorDetect@mR+1,turnLeft_90@mR+1
  3389   001514  ECF9  F019         	call	_turnLeft_90	;wreg free
  3390   001518                     
  3391                           ;MazeRobot.X/color.c: 176:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3392   001518  0E2A               	movlw	42
  3393   00151A  6E4F               	movwf	??_colorDetect^0,c
  3394   00151C  0E8E               	movlw	142
  3395   00151E                     u5127:
  3396   00151E  2EE8               	decfsz	wreg,f,c
  3397   001520  D7FE               	bra	u5127
  3398   001522  2E4F               	decfsz	??_colorDetect^0,f,c
  3399   001524  D7FC               	bra	u5127
  3400   001526                     
  3401                           ;MazeRobot.X/color.c: 177:         colour_ref = 2;
  3402   001526  0E00               	movlw	0
  3403   001528  0100               	movlb	0	; () banked
  3404   00152A  6F7F               	movwf	(colorDetect@colour_ref+1)& (0+255),b
  3405   00152C  0E02               	movlw	2
  3406   00152E  6F7E               	movwf	colorDetect@colour_ref& (0+255),b
  3407                           
  3408                           ;MazeRobot.X/color.c: 178:         }
  3409   001530  EF92  F00B         	goto	l4430
  3410   001534                     l4402:
  3411   001534  0E33               	movlw	51
  3412   001536  6E1D               	movwf	___flge@ff1^0,c
  3413   001538  0E33               	movlw	51
  3414   00153A  6E1E               	movwf	(___flge@ff1+1)^0,c
  3415   00153C  0E33               	movlw	51
  3416   00153E  6E1F               	movwf	(___flge@ff1+2)^0,c
  3417   001540  0E3F               	movlw	63
  3418   001542  6E20               	movwf	(___flge@ff1+3)^0,c
  3419   001544  C088  F019         	movff	colorDetect@redPrint,___flsub@a
  3420   001548  C089  F01A         	movff	colorDetect@redPrint+1,___flsub@a+1
  3421   00154C  C08A  F01B         	movff	colorDetect@redPrint+2,___flsub@a+2
  3422   001550  C08B  F01C         	movff	colorDetect@redPrint+3,___flsub@a+3
  3423   001554  C090  F015         	movff	colorDetect@bluePrint,___flsub@b
  3424   001558  C091  F016         	movff	colorDetect@bluePrint+1,___flsub@b+1
  3425   00155C  C092  F017         	movff	colorDetect@bluePrint+2,___flsub@b+2
  3426   001560  C093  F018         	movff	colorDetect@bluePrint+3,___flsub@b+3
  3427   001564  EC3E  F020         	call	___flsub	;wreg free
  3428   001568  C015  F021         	movff	?___flsub,___flge@ff2
  3429   00156C  C016  F022         	movff	?___flsub+1,___flge@ff2+1
  3430   001570  C017  F023         	movff	?___flsub+2,___flge@ff2+2
  3431   001574  C018  F024         	movff	?___flsub+3,___flge@ff2+3
  3432   001578  EC36  F01B         	call	___flge	;wreg free
  3433   00157C  B0D8               	btfsc	status,0,c
  3434   00157E  EFC3  F00A         	goto	u4601
  3435   001582  EFC5  F00A         	goto	u4600
  3436   001586                     u4601:
  3437   001586  EF28  F00B         	goto	l4416
  3438   00158A                     u4600:
  3439   00158A  0E9A               	movlw	154
  3440   00158C  6E1D               	movwf	___flge@ff1^0,c
  3441   00158E  0E99               	movlw	153
  3442   001590  6E1E               	movwf	(___flge@ff1+1)^0,c
  3443   001592  0E99               	movlw	153
  3444   001594  6E1F               	movwf	(___flge@ff1+2)^0,c
  3445   001596  0E3E               	movlw	62
  3446   001598  6E20               	movwf	(___flge@ff1+3)^0,c
  3447   00159A  C08C  F019         	movff	colorDetect@greenPrint,___flsub@a
  3448   00159E  C08D  F01A         	movff	colorDetect@greenPrint+1,___flsub@a+1
  3449   0015A2  C08E  F01B         	movff	colorDetect@greenPrint+2,___flsub@a+2
  3450   0015A6  C08F  F01C         	movff	colorDetect@greenPrint+3,___flsub@a+3
  3451   0015AA  C090  F015         	movff	colorDetect@bluePrint,___flsub@b
  3452   0015AE  C091  F016         	movff	colorDetect@bluePrint+1,___flsub@b+1
  3453   0015B2  C092  F017         	movff	colorDetect@bluePrint+2,___flsub@b+2
  3454   0015B6  C093  F018         	movff	colorDetect@bluePrint+3,___flsub@b+3
  3455   0015BA  EC3E  F020         	call	___flsub	;wreg free
  3456   0015BE  C015  F021         	movff	?___flsub,___flge@ff2
  3457   0015C2  C016  F022         	movff	?___flsub+1,___flge@ff2+1
  3458   0015C6  C017  F023         	movff	?___flsub+2,___flge@ff2+2
  3459   0015CA  C018  F024         	movff	?___flsub+3,___flge@ff2+3
  3460   0015CE  EC36  F01B         	call	___flge	;wreg free
  3461   0015D2  B0D8               	btfsc	status,0,c
  3462   0015D4  EFEE  F00A         	goto	u4611
  3463   0015D8  EFF0  F00A         	goto	u4610
  3464   0015DC                     u4611:
  3465   0015DC  EF28  F00B         	goto	l4416
  3466   0015E0                     u4610:
  3467   0015E0  0E33               	movlw	51
  3468   0015E2  6E1D               	movwf	___flge@ff1^0,c
  3469   0015E4  0E33               	movlw	51
  3470   0015E6  6E1E               	movwf	(___flge@ff1+1)^0,c
  3471   0015E8  0E33               	movlw	51
  3472   0015EA  6E1F               	movwf	(___flge@ff1+2)^0,c
  3473   0015EC  0E3F               	movlw	63
  3474   0015EE  6E20               	movwf	(___flge@ff1+3)^0,c
  3475   0015F0  C090  F021         	movff	colorDetect@bluePrint,___flge@ff2
  3476   0015F4  C091  F022         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  3477   0015F8  C092  F023         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  3478   0015FC  C093  F024         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  3479   001600  EC36  F01B         	call	___flge	;wreg free
  3480   001604  B0D8               	btfsc	status,0,c
  3481   001606  EF07  F00B         	goto	u4621
  3482   00160A  EF09  F00B         	goto	u4620
  3483   00160E                     u4621:
  3484   00160E  EF28  F00B         	goto	l4416
  3485   001612                     u4620:
  3486   001612                     
  3487                           ;MazeRobot.X/color.c: 182:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3488   001612  0E2A               	movlw	42
  3489   001614  6E4F               	movwf	??_colorDetect^0,c
  3490   001616  0E8E               	movlw	142
  3491   001618                     u5137:
  3492   001618  2EE8               	decfsz	wreg,f,c
  3493   00161A  D7FE               	bra	u5137
  3494   00161C  2E4F               	decfsz	??_colorDetect^0,f,c
  3495   00161E  D7FC               	bra	u5137
  3496   001620                     
  3497                           ;MazeRobot.X/color.c: 183:         turn_180(mL,mR);
  3498   001620  C068  F01E         	movff	colorDetect@mL,turn_180@mL
  3499   001624  C069  F01F         	movff	colorDetect@mL+1,turn_180@mL+1
  3500   001628  C06A  F020         	movff	colorDetect@mR,turn_180@mR
  3501   00162C  C06B  F021         	movff	colorDetect@mR+1,turn_180@mR+1
  3502   001630  EC5B  F015         	call	_turn_180	;wreg free
  3503   001634                     
  3504                           ;MazeRobot.X/color.c: 184:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3505   001634  0E2A               	movlw	42
  3506   001636  6E4F               	movwf	??_colorDetect^0,c
  3507   001638  0E8E               	movlw	142
  3508   00163A                     u5147:
  3509   00163A  2EE8               	decfsz	wreg,f,c
  3510   00163C  D7FE               	bra	u5147
  3511   00163E  2E4F               	decfsz	??_colorDetect^0,f,c
  3512   001640  D7FC               	bra	u5147
  3513   001642                     
  3514                           ;MazeRobot.X/color.c: 185:         colour_ref = 3;
  3515   001642  0E00               	movlw	0
  3516   001644  0100               	movlb	0	; () banked
  3517   001646  6F7F               	movwf	(colorDetect@colour_ref+1)& (0+255),b
  3518   001648  0E03               	movlw	3
  3519   00164A  6F7E               	movwf	colorDetect@colour_ref& (0+255),b
  3520                           
  3521                           ;MazeRobot.X/color.c: 186:         }
  3522   00164C  EF92  F00B         	goto	l4430
  3523   001650                     l4416:
  3524   001650  0E00               	movlw	0
  3525   001652  6E1D               	movwf	___flge@ff1^0,c
  3526   001654  0E00               	movlw	0
  3527   001656  6E1E               	movwf	(___flge@ff1+1)^0,c
  3528   001658  0E80               	movlw	128
  3529   00165A  6E1F               	movwf	(___flge@ff1+2)^0,c
  3530   00165C  0E3F               	movlw	63
  3531   00165E  6E20               	movwf	(___flge@ff1+3)^0,c
  3532   001660  C088  F021         	movff	colorDetect@redPrint,___flge@ff2
  3533   001664  C089  F022         	movff	colorDetect@redPrint+1,___flge@ff2+1
  3534   001668  C08A  F023         	movff	colorDetect@redPrint+2,___flge@ff2+2
  3535   00166C  C08B  F024         	movff	colorDetect@redPrint+3,___flge@ff2+3
  3536   001670  EC36  F01B         	call	___flge	;wreg free
  3537   001674  B0D8               	btfsc	status,0,c
  3538   001676  EF3F  F00B         	goto	u4631
  3539   00167A  EF41  F00B         	goto	u4630
  3540   00167E                     u4631:
  3541   00167E  EF92  F00B         	goto	l96
  3542   001682                     u4630:
  3543   001682  0ECD               	movlw	205
  3544   001684  6E1D               	movwf	___flge@ff1^0,c
  3545   001686  0ECC               	movlw	204
  3546   001688  6E1E               	movwf	(___flge@ff1+1)^0,c
  3547   00168A  0E4C               	movlw	76
  3548   00168C  6E1F               	movwf	(___flge@ff1+2)^0,c
  3549   00168E  0E3F               	movlw	63
  3550   001690  6E20               	movwf	(___flge@ff1+3)^0,c
  3551   001692  C08C  F021         	movff	colorDetect@greenPrint,___flge@ff2
  3552   001696  C08D  F022         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  3553   00169A  C08E  F023         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  3554   00169E  C08F  F024         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  3555   0016A2  EC36  F01B         	call	___flge	;wreg free
  3556   0016A6  B0D8               	btfsc	status,0,c
  3557   0016A8  EF58  F00B         	goto	u4641
  3558   0016AC  EF5A  F00B         	goto	u4640
  3559   0016B0                     u4641:
  3560   0016B0  EF92  F00B         	goto	l96
  3561   0016B4                     u4640:
  3562   0016B4  C090  F01D         	movff	colorDetect@bluePrint,___flge@ff1
  3563   0016B8  C091  F01E         	movff	colorDetect@bluePrint+1,___flge@ff1+1
  3564   0016BC  C092  F01F         	movff	colorDetect@bluePrint+2,___flge@ff1+2
  3565   0016C0  C093  F020         	movff	colorDetect@bluePrint+3,___flge@ff1+3
  3566   0016C4  0ECD               	movlw	205
  3567   0016C6  6E21               	movwf	___flge@ff2^0,c
  3568   0016C8  0ECC               	movlw	204
  3569   0016CA  6E22               	movwf	(___flge@ff2+1)^0,c
  3570   0016CC  0E4C               	movlw	76
  3571   0016CE  6E23               	movwf	(___flge@ff2+2)^0,c
  3572   0016D0  0E3F               	movlw	63
  3573   0016D2  6E24               	movwf	(___flge@ff2+3)^0,c
  3574   0016D4  EC36  F01B         	call	___flge	;wreg free
  3575   0016D8  B0D8               	btfsc	status,0,c
  3576   0016DA  EF71  F00B         	goto	u4651
  3577   0016DE  EF73  F00B         	goto	u4650
  3578   0016E2                     u4651:
  3579   0016E2  EF92  F00B         	goto	l96
  3580   0016E6                     u4650:
  3581   0016E6                     
  3582                           ;MazeRobot.X/color.c: 191:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3583   0016E6  0E2A               	movlw	42
  3584   0016E8  6E4F               	movwf	??_colorDetect^0,c
  3585   0016EA  0E8E               	movlw	142
  3586   0016EC                     u5157:
  3587   0016EC  2EE8               	decfsz	wreg,f,c
  3588   0016EE  D7FE               	bra	u5157
  3589   0016F0  2E4F               	decfsz	??_colorDetect^0,f,c
  3590   0016F2  D7FC               	bra	u5157
  3591   0016F4                     
  3592                           ;MazeRobot.X/color.c: 192:         reverseSquareRight(mL,mR);
  3593   0016F4  C068  F024         	movff	colorDetect@mL,reverseSquareRight@mL
  3594   0016F8  C069  F025         	movff	colorDetect@mL+1,reverseSquareRight@mL+1
  3595   0016FC  C06A  F026         	movff	colorDetect@mR,reverseSquareRight@mR
  3596   001700  C06B  F027         	movff	colorDetect@mR+1,reverseSquareRight@mR+1
  3597   001704  EC32  F01E         	call	_reverseSquareRight	;wreg free
  3598   001708                     
  3599                           ;MazeRobot.X/color.c: 193:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3600   001708  0E2A               	movlw	42
  3601   00170A  6E4F               	movwf	??_colorDetect^0,c
  3602   00170C  0E8E               	movlw	142
  3603   00170E                     u5167:
  3604   00170E  2EE8               	decfsz	wreg,f,c
  3605   001710  D7FE               	bra	u5167
  3606   001712  2E4F               	decfsz	??_colorDetect^0,f,c
  3607   001714  D7FC               	bra	u5167
  3608   001716                     
  3609                           ;MazeRobot.X/color.c: 194:         colour_ref = 4;
  3610   001716  0E00               	movlw	0
  3611   001718  0100               	movlb	0	; () banked
  3612   00171A  6F7F               	movwf	(colorDetect@colour_ref+1)& (0+255),b
  3613   00171C  0E04               	movlw	4
  3614   00171E  6F7E               	movwf	colorDetect@colour_ref& (0+255),b
  3615   001720  EF92  F00B         	goto	l4430
  3616   001724                     l96:
  3617   001724                     l4430:
  3618                           
  3619                           ;MazeRobot.X/color.c: 198:         if ((redPrint > 0.95) & (greenPrint > 0.8 & greenPrin
      +                          t < 0.9) & (bluePrint > 0.8 & bluePrint < 0.95)){
  3620   001724  0E33               	movlw	51
  3621   001726  6E1D               	movwf	___flge@ff1^0,c
  3622   001728  0E33               	movlw	51
  3623   00172A  6E1E               	movwf	(___flge@ff1+1)^0,c
  3624   00172C  0E73               	movlw	115
  3625   00172E  6E1F               	movwf	(___flge@ff1+2)^0,c
  3626   001730  0E3F               	movlw	63
  3627   001732  6E20               	movwf	(___flge@ff1+3)^0,c
  3628   001734  C088  F021         	movff	colorDetect@redPrint,___flge@ff2
  3629   001738  C089  F022         	movff	colorDetect@redPrint+1,___flge@ff2+1
  3630   00173C  C08A  F023         	movff	colorDetect@redPrint+2,___flge@ff2+2
  3631   001740  C08B  F024         	movff	colorDetect@redPrint+3,___flge@ff2+3
  3632   001744  EC36  F01B         	call	___flge	;wreg free
  3633   001748  B0D8               	btfsc	status,0,c
  3634   00174A  EFA9  F00B         	goto	u4661
  3635   00174E  EFAB  F00B         	goto	u4660
  3636   001752                     u4661:
  3637   001752  EF2E  F00C         	goto	l4448
  3638   001756                     u4660:
  3639   001756  0ECD               	movlw	205
  3640   001758  6E1D               	movwf	___flge@ff1^0,c
  3641   00175A  0ECC               	movlw	204
  3642   00175C  6E1E               	movwf	(___flge@ff1+1)^0,c
  3643   00175E  0E4C               	movlw	76
  3644   001760  6E1F               	movwf	(___flge@ff1+2)^0,c
  3645   001762  0E3F               	movlw	63
  3646   001764  6E20               	movwf	(___flge@ff1+3)^0,c
  3647   001766  C08C  F021         	movff	colorDetect@greenPrint,___flge@ff2
  3648   00176A  C08D  F022         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  3649   00176E  C08E  F023         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  3650   001772  C08F  F024         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  3651   001776  EC36  F01B         	call	___flge	;wreg free
  3652   00177A  B0D8               	btfsc	status,0,c
  3653   00177C  EFC2  F00B         	goto	u4671
  3654   001780  EFC4  F00B         	goto	u4670
  3655   001784                     u4671:
  3656   001784  EF2E  F00C         	goto	l4448
  3657   001788                     u4670:
  3658   001788  C08C  F01D         	movff	colorDetect@greenPrint,___flge@ff1
  3659   00178C  C08D  F01E         	movff	colorDetect@greenPrint+1,___flge@ff1+1
  3660   001790  C08E  F01F         	movff	colorDetect@greenPrint+2,___flge@ff1+2
  3661   001794  C08F  F020         	movff	colorDetect@greenPrint+3,___flge@ff1+3
  3662   001798  0E66               	movlw	102
  3663   00179A  6E21               	movwf	___flge@ff2^0,c
  3664   00179C  0E66               	movlw	102
  3665   00179E  6E22               	movwf	(___flge@ff2+1)^0,c
  3666   0017A0  0E66               	movlw	102
  3667   0017A2  6E23               	movwf	(___flge@ff2+2)^0,c
  3668   0017A4  0E3F               	movlw	63
  3669   0017A6  6E24               	movwf	(___flge@ff2+3)^0,c
  3670   0017A8  EC36  F01B         	call	___flge	;wreg free
  3671   0017AC  B0D8               	btfsc	status,0,c
  3672   0017AE  EFDB  F00B         	goto	u4681
  3673   0017B2  EFDD  F00B         	goto	u4680
  3674   0017B6                     u4681:
  3675   0017B6  EF2E  F00C         	goto	l4448
  3676   0017BA                     u4680:
  3677   0017BA  0ECD               	movlw	205
  3678   0017BC  6E1D               	movwf	___flge@ff1^0,c
  3679   0017BE  0ECC               	movlw	204
  3680   0017C0  6E1E               	movwf	(___flge@ff1+1)^0,c
  3681   0017C2  0E4C               	movlw	76
  3682   0017C4  6E1F               	movwf	(___flge@ff1+2)^0,c
  3683   0017C6  0E3F               	movlw	63
  3684   0017C8  6E20               	movwf	(___flge@ff1+3)^0,c
  3685   0017CA  C090  F021         	movff	colorDetect@bluePrint,___flge@ff2
  3686   0017CE  C091  F022         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  3687   0017D2  C092  F023         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  3688   0017D6  C093  F024         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  3689   0017DA  EC36  F01B         	call	___flge	;wreg free
  3690   0017DE  B0D8               	btfsc	status,0,c
  3691   0017E0  EFF4  F00B         	goto	u4691
  3692   0017E4  EFF6  F00B         	goto	u4690
  3693   0017E8                     u4691:
  3694   0017E8  EF2E  F00C         	goto	l4448
  3695   0017EC                     u4690:
  3696   0017EC  C090  F01D         	movff	colorDetect@bluePrint,___flge@ff1
  3697   0017F0  C091  F01E         	movff	colorDetect@bluePrint+1,___flge@ff1+1
  3698   0017F4  C092  F01F         	movff	colorDetect@bluePrint+2,___flge@ff1+2
  3699   0017F8  C093  F020         	movff	colorDetect@bluePrint+3,___flge@ff1+3
  3700   0017FC  0E33               	movlw	51
  3701   0017FE  6E21               	movwf	___flge@ff2^0,c
  3702   001800  0E33               	movlw	51
  3703   001802  6E22               	movwf	(___flge@ff2+1)^0,c
  3704   001804  0E73               	movlw	115
  3705   001806  6E23               	movwf	(___flge@ff2+2)^0,c
  3706   001808  0E3F               	movlw	63
  3707   00180A  6E24               	movwf	(___flge@ff2+3)^0,c
  3708   00180C  EC36  F01B         	call	___flge	;wreg free
  3709   001810  B0D8               	btfsc	status,0,c
  3710   001812  EF0D  F00C         	goto	u4701
  3711   001816  EF0F  F00C         	goto	u4700
  3712   00181A                     u4701:
  3713   00181A  EF2E  F00C         	goto	l4448
  3714   00181E                     u4700:
  3715   00181E                     
  3716                           ;MazeRobot.X/color.c: 199:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3717   00181E  0E2A               	movlw	42
  3718   001820  6E4F               	movwf	??_colorDetect^0,c
  3719   001822  0E8E               	movlw	142
  3720   001824                     u5177:
  3721   001824  2EE8               	decfsz	wreg,f,c
  3722   001826  D7FE               	bra	u5177
  3723   001828  2E4F               	decfsz	??_colorDetect^0,f,c
  3724   00182A  D7FC               	bra	u5177
  3725   00182C                     
  3726                           ;MazeRobot.X/color.c: 200:         reverseSquareLeft(mL,mR);
  3727   00182C  C068  F024         	movff	colorDetect@mL,reverseSquareLeft@mL
  3728   001830  C069  F025         	movff	colorDetect@mL+1,reverseSquareLeft@mL+1
  3729   001834  C06A  F026         	movff	colorDetect@mR,reverseSquareLeft@mR
  3730   001838  C06B  F027         	movff	colorDetect@mR+1,reverseSquareLeft@mR+1
  3731   00183C  EC7D  F01E         	call	_reverseSquareLeft	;wreg free
  3732   001840                     
  3733                           ;MazeRobot.X/color.c: 201:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3734   001840  0E2A               	movlw	42
  3735   001842  6E4F               	movwf	??_colorDetect^0,c
  3736   001844  0E8E               	movlw	142
  3737   001846                     u5187:
  3738   001846  2EE8               	decfsz	wreg,f,c
  3739   001848  D7FE               	bra	u5187
  3740   00184A  2E4F               	decfsz	??_colorDetect^0,f,c
  3741   00184C  D7FC               	bra	u5187
  3742   00184E                     
  3743                           ;MazeRobot.X/color.c: 202:         colour_ref = 5;
  3744   00184E  0E00               	movlw	0
  3745   001850  0100               	movlb	0	; () banked
  3746   001852  6F7F               	movwf	(colorDetect@colour_ref+1)& (0+255),b
  3747   001854  0E05               	movlw	5
  3748   001856  6F7E               	movwf	colorDetect@colour_ref& (0+255),b
  3749                           
  3750                           ;MazeRobot.X/color.c: 203:         }
  3751   001858  EF00  F00D         	goto	l4476
  3752   00185C                     l4448:
  3753   00185C  0E66               	movlw	102
  3754   00185E  6E1D               	movwf	___flge@ff1^0,c
  3755   001860  0E66               	movlw	102
  3756   001862  6E1E               	movwf	(___flge@ff1+1)^0,c
  3757   001864  0EA6               	movlw	166
  3758   001866  6E1F               	movwf	(___flge@ff1+2)^0,c
  3759   001868  0E3F               	movlw	63
  3760   00186A  6E20               	movwf	(___flge@ff1+3)^0,c
  3761   00186C  C088  F021         	movff	colorDetect@redPrint,___flge@ff2
  3762   001870  C089  F022         	movff	colorDetect@redPrint+1,___flge@ff2+1
  3763   001874  C08A  F023         	movff	colorDetect@redPrint+2,___flge@ff2+2
  3764   001878  C08B  F024         	movff	colorDetect@redPrint+3,___flge@ff2+3
  3765   00187C  EC36  F01B         	call	___flge	;wreg free
  3766   001880  B0D8               	btfsc	status,0,c
  3767   001882  EF45  F00C         	goto	u4711
  3768   001886  EF47  F00C         	goto	u4710
  3769   00188A                     u4711:
  3770   00188A  EF98  F00C         	goto	l4462
  3771   00188E                     u4710:
  3772   00188E  0E00               	movlw	0
  3773   001890  6E1D               	movwf	___flge@ff1^0,c
  3774   001892  0E00               	movlw	0
  3775   001894  6E1E               	movwf	(___flge@ff1+1)^0,c
  3776   001896  0E00               	movlw	0
  3777   001898  6E1F               	movwf	(___flge@ff1+2)^0,c
  3778   00189A  0E3F               	movlw	63
  3779   00189C  6E20               	movwf	(___flge@ff1+3)^0,c
  3780   00189E  C08C  F021         	movff	colorDetect@greenPrint,___flge@ff2
  3781   0018A2  C08D  F022         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  3782   0018A6  C08E  F023         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  3783   0018AA  C08F  F024         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  3784   0018AE  EC36  F01B         	call	___flge	;wreg free
  3785   0018B2  B0D8               	btfsc	status,0,c
  3786   0018B4  EF5E  F00C         	goto	u4721
  3787   0018B8  EF60  F00C         	goto	u4720
  3788   0018BC                     u4721:
  3789   0018BC  EF98  F00C         	goto	l4462
  3790   0018C0                     u4720:
  3791   0018C0  0E00               	movlw	0
  3792   0018C2  6E1D               	movwf	___flge@ff1^0,c
  3793   0018C4  0E00               	movlw	0
  3794   0018C6  6E1E               	movwf	(___flge@ff1+1)^0,c
  3795   0018C8  0E00               	movlw	0
  3796   0018CA  6E1F               	movwf	(___flge@ff1+2)^0,c
  3797   0018CC  0E3F               	movlw	63
  3798   0018CE  6E20               	movwf	(___flge@ff1+3)^0,c
  3799   0018D0  C090  F021         	movff	colorDetect@bluePrint,___flge@ff2
  3800   0018D4  C091  F022         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  3801   0018D8  C092  F023         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  3802   0018DC  C093  F024         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  3803   0018E0  EC36  F01B         	call	___flge	;wreg free
  3804   0018E4  B0D8               	btfsc	status,0,c
  3805   0018E6  EF77  F00C         	goto	u4731
  3806   0018EA  EF79  F00C         	goto	u4730
  3807   0018EE                     u4731:
  3808   0018EE  EF98  F00C         	goto	l4462
  3809   0018F2                     u4730:
  3810   0018F2                     
  3811                           ;MazeRobot.X/color.c: 207:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3812   0018F2  0E2A               	movlw	42
  3813   0018F4  6E4F               	movwf	??_colorDetect^0,c
  3814   0018F6  0E8E               	movlw	142
  3815   0018F8                     u5197:
  3816   0018F8  2EE8               	decfsz	wreg,f,c
  3817   0018FA  D7FE               	bra	u5197
  3818   0018FC  2E4F               	decfsz	??_colorDetect^0,f,c
  3819   0018FE  D7FC               	bra	u5197
  3820   001900                     
  3821                           ;MazeRobot.X/color.c: 208:         turnRight_135(mL,mR);
  3822   001900  C068  F01E         	movff	colorDetect@mL,turnRight_135@mL
  3823   001904  C069  F01F         	movff	colorDetect@mL+1,turnRight_135@mL+1
  3824   001908  C06A  F020         	movff	colorDetect@mR,turnRight_135@mR
  3825   00190C  C06B  F021         	movff	colorDetect@mR+1,turnRight_135@mR+1
  3826   001910  ECBB  F018         	call	_turnRight_135	;wreg free
  3827   001914                     
  3828                           ;MazeRobot.X/color.c: 209:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3829   001914  0E2A               	movlw	42
  3830   001916  6E4F               	movwf	??_colorDetect^0,c
  3831   001918  0E8E               	movlw	142
  3832   00191A                     u5207:
  3833   00191A  2EE8               	decfsz	wreg,f,c
  3834   00191C  D7FE               	bra	u5207
  3835   00191E  2E4F               	decfsz	??_colorDetect^0,f,c
  3836   001920  D7FC               	bra	u5207
  3837   001922                     
  3838                           ;MazeRobot.X/color.c: 210:         colour_ref = 6;
  3839   001922  0E00               	movlw	0
  3840   001924  0100               	movlb	0	; () banked
  3841   001926  6F7F               	movwf	(colorDetect@colour_ref+1)& (0+255),b
  3842   001928  0E06               	movlw	6
  3843   00192A  6F7E               	movwf	colorDetect@colour_ref& (0+255),b
  3844                           
  3845                           ;MazeRobot.X/color.c: 212:         }
  3846   00192C  EF00  F00D         	goto	l4476
  3847   001930                     l4462:
  3848   001930  C088  F01D         	movff	colorDetect@redPrint,___flge@ff1
  3849   001934  C089  F01E         	movff	colorDetect@redPrint+1,___flge@ff1+1
  3850   001938  C08A  F01F         	movff	colorDetect@redPrint+2,___flge@ff1+2
  3851   00193C  C08B  F020         	movff	colorDetect@redPrint+3,___flge@ff1+3
  3852   001940  0E33               	movlw	51
  3853   001942  6E21               	movwf	___flge@ff2^0,c
  3854   001944  0E33               	movlw	51
  3855   001946  6E22               	movwf	(___flge@ff2+1)^0,c
  3856   001948  0E33               	movlw	51
  3857   00194A  6E23               	movwf	(___flge@ff2+2)^0,c
  3858   00194C  0E3F               	movlw	63
  3859   00194E  6E24               	movwf	(___flge@ff2+3)^0,c
  3860   001950  EC36  F01B         	call	___flge	;wreg free
  3861   001954  B0D8               	btfsc	status,0,c
  3862   001956  EFAF  F00C         	goto	u4741
  3863   00195A  EFB1  F00C         	goto	u4740
  3864   00195E                     u4741:
  3865   00195E  EF00  F00D         	goto	l4476
  3866   001962                     u4740:
  3867   001962  0E00               	movlw	0
  3868   001964  6E1D               	movwf	___flge@ff1^0,c
  3869   001966  0E00               	movlw	0
  3870   001968  6E1E               	movwf	(___flge@ff1+1)^0,c
  3871   00196A  0E80               	movlw	128
  3872   00196C  6E1F               	movwf	(___flge@ff1+2)^0,c
  3873   00196E  0E3F               	movlw	63
  3874   001970  6E20               	movwf	(___flge@ff1+3)^0,c
  3875   001972  C08C  F021         	movff	colorDetect@greenPrint,___flge@ff2
  3876   001976  C08D  F022         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  3877   00197A  C08E  F023         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  3878   00197E  C08F  F024         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  3879   001982  EC36  F01B         	call	___flge	;wreg free
  3880   001986  B0D8               	btfsc	status,0,c
  3881   001988  EFC8  F00C         	goto	u4751
  3882   00198C  EFCA  F00C         	goto	u4750
  3883   001990                     u4751:
  3884   001990  EF00  F00D         	goto	l4476
  3885   001994                     u4750:
  3886   001994  0E00               	movlw	0
  3887   001996  6E1D               	movwf	___flge@ff1^0,c
  3888   001998  0E00               	movlw	0
  3889   00199A  6E1E               	movwf	(___flge@ff1+1)^0,c
  3890   00199C  0E80               	movlw	128
  3891   00199E  6E1F               	movwf	(___flge@ff1+2)^0,c
  3892   0019A0  0E3F               	movlw	63
  3893   0019A2  6E20               	movwf	(___flge@ff1+3)^0,c
  3894   0019A4  C090  F021         	movff	colorDetect@bluePrint,___flge@ff2
  3895   0019A8  C091  F022         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  3896   0019AC  C092  F023         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  3897   0019B0  C093  F024         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  3898   0019B4  EC36  F01B         	call	___flge	;wreg free
  3899   0019B8  B0D8               	btfsc	status,0,c
  3900   0019BA  EFE1  F00C         	goto	u4761
  3901   0019BE  EFE3  F00C         	goto	u4760
  3902   0019C2                     u4761:
  3903   0019C2  EF00  F00D         	goto	l4476
  3904   0019C6                     u4760:
  3905   0019C6                     
  3906                           ;MazeRobot.X/color.c: 216:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3907   0019C6  0E2A               	movlw	42
  3908   0019C8  6E4F               	movwf	??_colorDetect^0,c
  3909   0019CA  0E8E               	movlw	142
  3910   0019CC                     u5217:
  3911   0019CC  2EE8               	decfsz	wreg,f,c
  3912   0019CE  D7FE               	bra	u5217
  3913   0019D0  2E4F               	decfsz	??_colorDetect^0,f,c
  3914   0019D2  D7FC               	bra	u5217
  3915   0019D4                     
  3916                           ;MazeRobot.X/color.c: 217:         turnLeft_135(mL,mR);
  3917   0019D4  C068  F01E         	movff	colorDetect@mL,turnLeft_135@mL
  3918   0019D8  C069  F01F         	movff	colorDetect@mL+1,turnLeft_135@mL+1
  3919   0019DC  C06A  F020         	movff	colorDetect@mR,turnLeft_135@mR
  3920   0019E0  C06B  F021         	movff	colorDetect@mR+1,turnLeft_135@mR+1
  3921   0019E4  EC98  F01A         	call	_turnLeft_135	;wreg free
  3922   0019E8                     
  3923                           ;MazeRobot.X/color.c: 218:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3924   0019E8  0E2A               	movlw	42
  3925   0019EA  6E4F               	movwf	??_colorDetect^0,c
  3926   0019EC  0E8E               	movlw	142
  3927   0019EE                     u5227:
  3928   0019EE  2EE8               	decfsz	wreg,f,c
  3929   0019F0  D7FE               	bra	u5227
  3930   0019F2  2E4F               	decfsz	??_colorDetect^0,f,c
  3931   0019F4  D7FC               	bra	u5227
  3932   0019F6                     
  3933                           ;MazeRobot.X/color.c: 219:         colour_ref = 7;
  3934   0019F6  0E00               	movlw	0
  3935   0019F8  0100               	movlb	0	; () banked
  3936   0019FA  6F7F               	movwf	(colorDetect@colour_ref+1)& (0+255),b
  3937   0019FC  0E07               	movlw	7
  3938   0019FE  6F7E               	movwf	colorDetect@colour_ref& (0+255),b
  3939   001A00                     l4476:
  3940                           
  3941                           ;MazeRobot.X/color.c: 223:         return colour_ref;
  3942   001A00  C07E  F060         	movff	colorDetect@colour_ref,?_colorDetect
  3943   001A04  C07F  F061         	movff	colorDetect@colour_ref+1,?_colorDetect+1
  3944   001A08  0012               	return		;funcret
  3945   001A0A                     __end_of_colorDetect:
  3946                           	callstack 0
  3947                           
  3948 ;; *************** function _turn_180 *****************
  3949 ;; Defined at:
  3950 ;;		line 295 in file "MazeRobot.X/dc_motor.c"
  3951 ;; Parameters:    Size  Location     Type
  3952 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  3953 ;;		 -> main@motorLeft(9), 
  3954 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  3955 ;;		 -> main@motorRight(9), 
  3956 ;; Auto vars:     Size  Location     Type
  3957 ;;		None
  3958 ;; Return value:  Size  Location     Type
  3959 ;;                  1    wreg      void 
  3960 ;; Registers used:
  3961 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3962 ;; Tracked objects:
  3963 ;;		On entry : 0/0
  3964 ;;		On exit  : 0/0
  3965 ;;		Unchanged: 0/0
  3966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3967 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3968 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3969 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3970 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3971 ;;Total ram usage:        6 bytes
  3972 ;; Hardware stack levels used: 1
  3973 ;; Hardware stack levels required when called: 5
  3974 ;; This function calls:
  3975 ;;		_reverse
  3976 ;;		_setMotorPWM
  3977 ;;		_stop
  3978 ;; This function is called by:
  3979 ;;		_colorDetect
  3980 ;;		_return_home_turns
  3981 ;; This function uses a non-reentrant model
  3982 ;;
  3983                           
  3984                           	psect	text10
  3985   002AB6                     __ptext10:
  3986                           	callstack 0
  3987   002AB6                     _turn_180:
  3988                           	callstack 24
  3989   002AB6                     
  3990                           ;MazeRobot.X/dc_motor.c: 295: void turn_180(DC_motor *mL, DC_motor *mR);MazeRobot.X/dc_m
      +                          otor.c: 296: {;MazeRobot.X/dc_motor.c: 298:     stop(mL, mR);
  3991   002AB6  C01E  F018         	movff	turn_180@mL,stop@mL
  3992   002ABA  C01F  F019         	movff	turn_180@mL+1,stop@mL+1
  3993   002ABE  C020  F01A         	movff	turn_180@mR,stop@mR
  3994   002AC2  C021  F01B         	movff	turn_180@mR+1,stop@mR+1
  3995   002AC6  ECDB  F01D         	call	_stop	;wreg free
  3996   002ACA                     
  3997                           ;MazeRobot.X/dc_motor.c: 299:     _delay((unsigned long)((100)*(64000000/4000.0)));
  3998   002ACA  0E09               	movlw	9
  3999   002ACC  6E23               	movwf	(??_turn_180+1)^0,c
  4000   002ACE  0E1E               	movlw	30
  4001   002AD0  6E22               	movwf	??_turn_180^0,c
  4002   002AD2  0EE4               	movlw	228
  4003   002AD4                     u5237:
  4004   002AD4  2EE8               	decfsz	wreg,f,c
  4005   002AD6  D7FE               	bra	u5237
  4006   002AD8  2E22               	decfsz	??_turn_180^0,f,c
  4007   002ADA  D7FC               	bra	u5237
  4008   002ADC  2E23               	decfsz	(??_turn_180+1)^0,f,c
  4009   002ADE  D7FA               	bra	u5237
  4010   002AE0  D000               	nop2	
  4011   002AE2                     
  4012                           ;MazeRobot.X/dc_motor.c: 301:     reverse(mL, mR);
  4013   002AE2  C01E  F018         	movff	turn_180@mL,reverse@mL
  4014   002AE6  C01F  F019         	movff	turn_180@mL+1,reverse@mL+1
  4015   002AEA  C020  F01A         	movff	turn_180@mR,reverse@mR
  4016   002AEE  C021  F01B         	movff	turn_180@mR+1,reverse@mR+1
  4017   002AF2  EC07  F01D         	call	_reverse	;wreg free
  4018                           
  4019                           ;MazeRobot.X/dc_motor.c: 302:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  4020   002AF6  0E39               	movlw	57
  4021   002AF8  6E23               	movwf	(??_turn_180+1)^0,c
  4022   002AFA  0ED2               	movlw	210
  4023   002AFC  6E22               	movwf	??_turn_180^0,c
  4024   002AFE  0E4C               	movlw	76
  4025   002B00                     u5247:
  4026   002B00  2EE8               	decfsz	wreg,f,c
  4027   002B02  D7FE               	bra	u5247
  4028   002B04  2E22               	decfsz	??_turn_180^0,f,c
  4029   002B06  D7FC               	bra	u5247
  4030   002B08  2E23               	decfsz	(??_turn_180+1)^0,f,c
  4031   002B0A  D7FA               	bra	u5247
  4032   002B0C  D000               	nop2	
  4033   002B0E                     
  4034                           ;MazeRobot.X/dc_motor.c: 304:     stop(mL, mR);
  4035   002B0E  C01E  F018         	movff	turn_180@mL,stop@mL
  4036   002B12  C01F  F019         	movff	turn_180@mL+1,stop@mL+1
  4037   002B16  C020  F01A         	movff	turn_180@mR,stop@mR
  4038   002B1A  C021  F01B         	movff	turn_180@mR+1,stop@mR+1
  4039   002B1E  ECDB  F01D         	call	_stop	;wreg free
  4040   002B22                     
  4041                           ;MazeRobot.X/dc_motor.c: 306:     mL->direction = 1;
  4042   002B22  EE20 F001          	lfsr	2,1
  4043   002B26  501E               	movf	turn_180@mL^0,w,c
  4044   002B28  26D9               	addwf	fsr2l,f,c
  4045   002B2A  501F               	movf	(turn_180@mL+1)^0,w,c
  4046   002B2C  22DA               	addwfc	fsr2h,f,c
  4047   002B2E  0E01               	movlw	1
  4048   002B30  6EDF               	movwf	indf2,c
  4049   002B32                     
  4050                           ;MazeRobot.X/dc_motor.c: 307:     mR->direction = 0;
  4051   002B32  EE20 F001          	lfsr	2,1
  4052   002B36  5020               	movf	turn_180@mR^0,w,c
  4053   002B38  26D9               	addwf	fsr2l,f,c
  4054   002B3A  5021               	movf	(turn_180@mR+1)^0,w,c
  4055   002B3C  22DA               	addwfc	fsr2h,f,c
  4056   002B3E  0E00               	movlw	0
  4057   002B40  6EDF               	movwf	indf2,c
  4058   002B42                     
  4059                           ;MazeRobot.X/dc_motor.c: 309:     mL->brakemode = 1;
  4060   002B42  EE20 F002          	lfsr	2,2
  4061   002B46  501E               	movf	turn_180@mL^0,w,c
  4062   002B48  26D9               	addwf	fsr2l,f,c
  4063   002B4A  501F               	movf	(turn_180@mL+1)^0,w,c
  4064   002B4C  22DA               	addwfc	fsr2h,f,c
  4065   002B4E  0E01               	movlw	1
  4066   002B50  6EDF               	movwf	indf2,c
  4067   002B52                     
  4068                           ;MazeRobot.X/dc_motor.c: 310:     mL->brakemode = 1;
  4069   002B52  EE20 F002          	lfsr	2,2
  4070   002B56  501E               	movf	turn_180@mL^0,w,c
  4071   002B58  26D9               	addwf	fsr2l,f,c
  4072   002B5A  501F               	movf	(turn_180@mL+1)^0,w,c
  4073   002B5C  22DA               	addwfc	fsr2h,f,c
  4074   002B5E  0E01               	movlw	1
  4075   002B60  6EDF               	movwf	indf2,c
  4076                           
  4077                           ;MazeRobot.X/dc_motor.c: 312:     while((mL->power < 80) || (mR->power < 80)){
  4078   002B62  EFCB  F015         	goto	l3232
  4079   002B66                     l3226:
  4080                           
  4081                           ;MazeRobot.X/dc_motor.c: 313:         mL->power += 10;
  4082   002B66  C01E  FFD9         	movff	turn_180@mL,fsr2l
  4083   002B6A  C01F  FFDA         	movff	turn_180@mL+1,fsr2h
  4084   002B6E  0E0A               	movlw	10
  4085   002B70  26DF               	addwf	indf2,f,c
  4086                           
  4087                           ;MazeRobot.X/dc_motor.c: 314:         mR->power += 10;
  4088   002B72  C020  FFD9         	movff	turn_180@mR,fsr2l
  4089   002B76  C021  FFDA         	movff	turn_180@mR+1,fsr2h
  4090   002B7A  0E0A               	movlw	10
  4091   002B7C  26DF               	addwf	indf2,f,c
  4092   002B7E                     
  4093                           ;MazeRobot.X/dc_motor.c: 315:         setMotorPWM(mL);
  4094   002B7E  C01E  F012         	movff	turn_180@mL,setMotorPWM@m
  4095   002B82  C01F  F013         	movff	turn_180@mL+1,setMotorPWM@m+1
  4096   002B86  EC05  F018         	call	_setMotorPWM	;wreg free
  4097   002B8A                     
  4098                           ;MazeRobot.X/dc_motor.c: 316:         setMotorPWM(mR);
  4099   002B8A  C020  F012         	movff	turn_180@mR,setMotorPWM@m
  4100   002B8E  C021  F013         	movff	turn_180@mR+1,setMotorPWM@m+1
  4101   002B92  EC05  F018         	call	_setMotorPWM	;wreg free
  4102   002B96                     l3232:
  4103                           
  4104                           ;MazeRobot.X/dc_motor.c: 312:     while((mL->power < 80) || (mR->power < 80)){
  4105   002B96  C01E  FFD9         	movff	turn_180@mL,fsr2l
  4106   002B9A  C01F  FFDA         	movff	turn_180@mL+1,fsr2h
  4107   002B9E  0E4F               	movlw	79
  4108   002BA0  64DF               	cpfsgt	indf2,c
  4109   002BA2  EFD5  F015         	goto	u2861
  4110   002BA6  EFD7  F015         	goto	u2860
  4111   002BAA                     u2861:
  4112   002BAA  EFB3  F015         	goto	l3226
  4113   002BAE                     u2860:
  4114   002BAE  C020  FFD9         	movff	turn_180@mR,fsr2l
  4115   002BB2  C021  FFDA         	movff	turn_180@mR+1,fsr2h
  4116   002BB6  0E4F               	movlw	79
  4117   002BB8  64DF               	cpfsgt	indf2,c
  4118   002BBA  EFE1  F015         	goto	u2871
  4119   002BBE  EFE3  F015         	goto	u2870
  4120   002BC2                     u2871:
  4121   002BC2  EFB3  F015         	goto	l3226
  4122   002BC6                     u2870:
  4123   002BC6                     
  4124                           ;MazeRobot.X/dc_motor.c: 318:    _delay((unsigned long)((turning_time45)*(64000000/4000.
      +                          0)));
  4125   002BC6  0E10               	movlw	16
  4126   002BC8  6E23               	movwf	(??_turn_180+1)^0,c
  4127   002BCA  0E2E               	movlw	46
  4128   002BCC  6E22               	movwf	??_turn_180^0,c
  4129   002BCE  0EAA               	movlw	170
  4130   002BD0                     u5257:
  4131   002BD0  2EE8               	decfsz	wreg,f,c
  4132   002BD2  D7FE               	bra	u5257
  4133   002BD4  2E22               	decfsz	??_turn_180^0,f,c
  4134   002BD6  D7FC               	bra	u5257
  4135   002BD8  2E23               	decfsz	(??_turn_180+1)^0,f,c
  4136   002BDA  D7FA               	bra	u5257
  4137   002BDC  D000               	nop2	
  4138   002BDE                     
  4139                           ;MazeRobot.X/dc_motor.c: 320:    stop(mL, mR);
  4140   002BDE  C01E  F018         	movff	turn_180@mL,stop@mL
  4141   002BE2  C01F  F019         	movff	turn_180@mL+1,stop@mL+1
  4142   002BE6  C020  F01A         	movff	turn_180@mR,stop@mR
  4143   002BEA  C021  F01B         	movff	turn_180@mR+1,stop@mR+1
  4144   002BEE  ECDB  F01D         	call	_stop	;wreg free
  4145   002BF2                     
  4146                           ;MazeRobot.X/dc_motor.c: 321:     _delay((unsigned long)((100)*(64000000/4000.0)));
  4147   002BF2  0E09               	movlw	9
  4148   002BF4  6E23               	movwf	(??_turn_180+1)^0,c
  4149   002BF6  0E1E               	movlw	30
  4150   002BF8  6E22               	movwf	??_turn_180^0,c
  4151   002BFA  0EE4               	movlw	228
  4152   002BFC                     u5267:
  4153   002BFC  2EE8               	decfsz	wreg,f,c
  4154   002BFE  D7FE               	bra	u5267
  4155   002C00  2E22               	decfsz	??_turn_180^0,f,c
  4156   002C02  D7FC               	bra	u5267
  4157   002C04  2E23               	decfsz	(??_turn_180+1)^0,f,c
  4158   002C06  D7FA               	bra	u5267
  4159   002C08  D000               	nop2	
  4160   002C0A                     
  4161                           ;MazeRobot.X/dc_motor.c: 323:     mL->direction = 1;
  4162   002C0A  EE20 F001          	lfsr	2,1
  4163   002C0E  501E               	movf	turn_180@mL^0,w,c
  4164   002C10  26D9               	addwf	fsr2l,f,c
  4165   002C12  501F               	movf	(turn_180@mL+1)^0,w,c
  4166   002C14  22DA               	addwfc	fsr2h,f,c
  4167   002C16  0E01               	movlw	1
  4168   002C18  6EDF               	movwf	indf2,c
  4169   002C1A                     
  4170                           ;MazeRobot.X/dc_motor.c: 324:     mR->direction = 0;
  4171   002C1A  EE20 F001          	lfsr	2,1
  4172   002C1E  5020               	movf	turn_180@mR^0,w,c
  4173   002C20  26D9               	addwf	fsr2l,f,c
  4174   002C22  5021               	movf	(turn_180@mR+1)^0,w,c
  4175   002C24  22DA               	addwfc	fsr2h,f,c
  4176   002C26  0E00               	movlw	0
  4177   002C28  6EDF               	movwf	indf2,c
  4178   002C2A                     
  4179                           ;MazeRobot.X/dc_motor.c: 326:     mL->brakemode = 1;
  4180   002C2A  EE20 F002          	lfsr	2,2
  4181   002C2E  501E               	movf	turn_180@mL^0,w,c
  4182   002C30  26D9               	addwf	fsr2l,f,c
  4183   002C32  501F               	movf	(turn_180@mL+1)^0,w,c
  4184   002C34  22DA               	addwfc	fsr2h,f,c
  4185   002C36  0E01               	movlw	1
  4186   002C38  6EDF               	movwf	indf2,c
  4187   002C3A                     
  4188                           ;MazeRobot.X/dc_motor.c: 327:     mL->brakemode = 1;
  4189   002C3A  EE20 F002          	lfsr	2,2
  4190   002C3E  501E               	movf	turn_180@mL^0,w,c
  4191   002C40  26D9               	addwf	fsr2l,f,c
  4192   002C42  501F               	movf	(turn_180@mL+1)^0,w,c
  4193   002C44  22DA               	addwfc	fsr2h,f,c
  4194   002C46  0E01               	movlw	1
  4195   002C48  6EDF               	movwf	indf2,c
  4196                           
  4197                           ;MazeRobot.X/dc_motor.c: 329:     while((mL->power < 80) || (mR->power < 80)){
  4198   002C4A  EF3F  F016         	goto	l3256
  4199   002C4E                     l3250:
  4200                           
  4201                           ;MazeRobot.X/dc_motor.c: 330:         mL->power += 10;
  4202   002C4E  C01E  FFD9         	movff	turn_180@mL,fsr2l
  4203   002C52  C01F  FFDA         	movff	turn_180@mL+1,fsr2h
  4204   002C56  0E0A               	movlw	10
  4205   002C58  26DF               	addwf	indf2,f,c
  4206                           
  4207                           ;MazeRobot.X/dc_motor.c: 331:         mR->power += 10;
  4208   002C5A  C020  FFD9         	movff	turn_180@mR,fsr2l
  4209   002C5E  C021  FFDA         	movff	turn_180@mR+1,fsr2h
  4210   002C62  0E0A               	movlw	10
  4211   002C64  26DF               	addwf	indf2,f,c
  4212   002C66                     
  4213                           ;MazeRobot.X/dc_motor.c: 332:         setMotorPWM(mL);
  4214   002C66  C01E  F012         	movff	turn_180@mL,setMotorPWM@m
  4215   002C6A  C01F  F013         	movff	turn_180@mL+1,setMotorPWM@m+1
  4216   002C6E  EC05  F018         	call	_setMotorPWM	;wreg free
  4217   002C72                     
  4218                           ;MazeRobot.X/dc_motor.c: 333:         setMotorPWM(mR);
  4219   002C72  C020  F012         	movff	turn_180@mR,setMotorPWM@m
  4220   002C76  C021  F013         	movff	turn_180@mR+1,setMotorPWM@m+1
  4221   002C7A  EC05  F018         	call	_setMotorPWM	;wreg free
  4222   002C7E                     l3256:
  4223                           
  4224                           ;MazeRobot.X/dc_motor.c: 329:     while((mL->power < 80) || (mR->power < 80)){
  4225   002C7E  C01E  FFD9         	movff	turn_180@mL,fsr2l
  4226   002C82  C01F  FFDA         	movff	turn_180@mL+1,fsr2h
  4227   002C86  0E4F               	movlw	79
  4228   002C88  64DF               	cpfsgt	indf2,c
  4229   002C8A  EF49  F016         	goto	u2881
  4230   002C8E  EF4B  F016         	goto	u2880
  4231   002C92                     u2881:
  4232   002C92  EF27  F016         	goto	l3250
  4233   002C96                     u2880:
  4234   002C96  C020  FFD9         	movff	turn_180@mR,fsr2l
  4235   002C9A  C021  FFDA         	movff	turn_180@mR+1,fsr2h
  4236   002C9E  0E4F               	movlw	79
  4237   002CA0  64DF               	cpfsgt	indf2,c
  4238   002CA2  EF55  F016         	goto	u2891
  4239   002CA6  EF57  F016         	goto	u2890
  4240   002CAA                     u2891:
  4241   002CAA  EF27  F016         	goto	l3250
  4242   002CAE                     u2890:
  4243   002CAE                     
  4244                           ;MazeRobot.X/dc_motor.c: 335:    _delay((unsigned long)((turning_time45)*(64000000/4000.
      +                          0)));
  4245   002CAE  0E10               	movlw	16
  4246   002CB0  6E23               	movwf	(??_turn_180+1)^0,c
  4247   002CB2  0E2E               	movlw	46
  4248   002CB4  6E22               	movwf	??_turn_180^0,c
  4249   002CB6  0EAA               	movlw	170
  4250   002CB8                     u5277:
  4251   002CB8  2EE8               	decfsz	wreg,f,c
  4252   002CBA  D7FE               	bra	u5277
  4253   002CBC  2E22               	decfsz	??_turn_180^0,f,c
  4254   002CBE  D7FC               	bra	u5277
  4255   002CC0  2E23               	decfsz	(??_turn_180+1)^0,f,c
  4256   002CC2  D7FA               	bra	u5277
  4257   002CC4  D000               	nop2	
  4258   002CC6                     
  4259                           ;MazeRobot.X/dc_motor.c: 337:     stop(mL, mR);
  4260   002CC6  C01E  F018         	movff	turn_180@mL,stop@mL
  4261   002CCA  C01F  F019         	movff	turn_180@mL+1,stop@mL+1
  4262   002CCE  C020  F01A         	movff	turn_180@mR,stop@mR
  4263   002CD2  C021  F01B         	movff	turn_180@mR+1,stop@mR+1
  4264   002CD6  ECDB  F01D         	call	_stop	;wreg free
  4265   002CDA  0012               	return		;funcret
  4266   002CDC                     __end_of_turn_180:
  4267                           	callstack 0
  4268                           
  4269 ;; *************** function _turnRight_135 *****************
  4270 ;; Defined at:
  4271 ;;		line 341 in file "MazeRobot.X/dc_motor.c"
  4272 ;; Parameters:    Size  Location     Type
  4273 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  4274 ;;		 -> main@motorLeft(9), 
  4275 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  4276 ;;		 -> main@motorRight(9), 
  4277 ;; Auto vars:     Size  Location     Type
  4278 ;;		None
  4279 ;; Return value:  Size  Location     Type
  4280 ;;                  1    wreg      void 
  4281 ;; Registers used:
  4282 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4283 ;; Tracked objects:
  4284 ;;		On entry : 0/0
  4285 ;;		On exit  : 0/0
  4286 ;;		Unchanged: 0/0
  4287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4288 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4290 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4291 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4292 ;;Total ram usage:        6 bytes
  4293 ;; Hardware stack levels used: 1
  4294 ;; Hardware stack levels required when called: 5
  4295 ;; This function calls:
  4296 ;;		_reverse
  4297 ;;		_setMotorPWM
  4298 ;;		_stop
  4299 ;; This function is called by:
  4300 ;;		_colorDetect
  4301 ;;		_return_home_turns
  4302 ;; This function uses a non-reentrant model
  4303 ;;
  4304                           
  4305                           	psect	text11
  4306   003176                     __ptext11:
  4307                           	callstack 0
  4308   003176                     _turnRight_135:
  4309                           	callstack 24
  4310   003176                     
  4311                           ;MazeRobot.X/dc_motor.c: 341: void turnRight_135(DC_motor *mL, DC_motor *mR);MazeRobot.X
      +                          /dc_motor.c: 342: {;MazeRobot.X/dc_motor.c: 343:     stop(mL, mR);
  4312   003176  C01E  F018         	movff	turnRight_135@mL,stop@mL
  4313   00317A  C01F  F019         	movff	turnRight_135@mL+1,stop@mL+1
  4314   00317E  C020  F01A         	movff	turnRight_135@mR,stop@mR
  4315   003182  C021  F01B         	movff	turnRight_135@mR+1,stop@mR+1
  4316   003186  ECDB  F01D         	call	_stop	;wreg free
  4317   00318A                     
  4318                           ;MazeRobot.X/dc_motor.c: 344:     _delay((unsigned long)((100)*(64000000/4000.0)));
  4319   00318A  0E09               	movlw	9
  4320   00318C  6E23               	movwf	(??_turnRight_135+1)^0,c
  4321   00318E  0E1E               	movlw	30
  4322   003190  6E22               	movwf	??_turnRight_135^0,c
  4323   003192  0EE4               	movlw	228
  4324   003194                     u5287:
  4325   003194  2EE8               	decfsz	wreg,f,c
  4326   003196  D7FE               	bra	u5287
  4327   003198  2E22               	decfsz	??_turnRight_135^0,f,c
  4328   00319A  D7FC               	bra	u5287
  4329   00319C  2E23               	decfsz	(??_turnRight_135+1)^0,f,c
  4330   00319E  D7FA               	bra	u5287
  4331   0031A0  D000               	nop2	
  4332   0031A2                     
  4333                           ;MazeRobot.X/dc_motor.c: 346:     reverse(mL, mR);
  4334   0031A2  C01E  F018         	movff	turnRight_135@mL,reverse@mL
  4335   0031A6  C01F  F019         	movff	turnRight_135@mL+1,reverse@mL+1
  4336   0031AA  C020  F01A         	movff	turnRight_135@mR,reverse@mR
  4337   0031AE  C021  F01B         	movff	turnRight_135@mR+1,reverse@mR+1
  4338   0031B2  EC07  F01D         	call	_reverse	;wreg free
  4339                           
  4340                           ;MazeRobot.X/dc_motor.c: 347:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  4341   0031B6  0E39               	movlw	57
  4342   0031B8  6E23               	movwf	(??_turnRight_135+1)^0,c
  4343   0031BA  0ED2               	movlw	210
  4344   0031BC  6E22               	movwf	??_turnRight_135^0,c
  4345   0031BE  0E4C               	movlw	76
  4346   0031C0                     u5297:
  4347   0031C0  2EE8               	decfsz	wreg,f,c
  4348   0031C2  D7FE               	bra	u5297
  4349   0031C4  2E22               	decfsz	??_turnRight_135^0,f,c
  4350   0031C6  D7FC               	bra	u5297
  4351   0031C8  2E23               	decfsz	(??_turnRight_135+1)^0,f,c
  4352   0031CA  D7FA               	bra	u5297
  4353   0031CC  D000               	nop2	
  4354   0031CE                     
  4355                           ;MazeRobot.X/dc_motor.c: 349:     stop(mL, mR);
  4356   0031CE  C01E  F018         	movff	turnRight_135@mL,stop@mL
  4357   0031D2  C01F  F019         	movff	turnRight_135@mL+1,stop@mL+1
  4358   0031D6  C020  F01A         	movff	turnRight_135@mR,stop@mR
  4359   0031DA  C021  F01B         	movff	turnRight_135@mR+1,stop@mR+1
  4360   0031DE  ECDB  F01D         	call	_stop	;wreg free
  4361   0031E2                     
  4362                           ;MazeRobot.X/dc_motor.c: 351:     mL->direction = 1;
  4363   0031E2  EE20 F001          	lfsr	2,1
  4364   0031E6  501E               	movf	turnRight_135@mL^0,w,c
  4365   0031E8  26D9               	addwf	fsr2l,f,c
  4366   0031EA  501F               	movf	(turnRight_135@mL+1)^0,w,c
  4367   0031EC  22DA               	addwfc	fsr2h,f,c
  4368   0031EE  0E01               	movlw	1
  4369   0031F0  6EDF               	movwf	indf2,c
  4370   0031F2                     
  4371                           ;MazeRobot.X/dc_motor.c: 352:     mR->direction = 0;
  4372   0031F2  EE20 F001          	lfsr	2,1
  4373   0031F6  5020               	movf	turnRight_135@mR^0,w,c
  4374   0031F8  26D9               	addwf	fsr2l,f,c
  4375   0031FA  5021               	movf	(turnRight_135@mR+1)^0,w,c
  4376   0031FC  22DA               	addwfc	fsr2h,f,c
  4377   0031FE  0E00               	movlw	0
  4378   003200  6EDF               	movwf	indf2,c
  4379   003202                     
  4380                           ;MazeRobot.X/dc_motor.c: 354:     mL->brakemode = 1;
  4381   003202  EE20 F002          	lfsr	2,2
  4382   003206  501E               	movf	turnRight_135@mL^0,w,c
  4383   003208  26D9               	addwf	fsr2l,f,c
  4384   00320A  501F               	movf	(turnRight_135@mL+1)^0,w,c
  4385   00320C  22DA               	addwfc	fsr2h,f,c
  4386   00320E  0E01               	movlw	1
  4387   003210  6EDF               	movwf	indf2,c
  4388   003212                     
  4389                           ;MazeRobot.X/dc_motor.c: 355:     mL->brakemode = 1;
  4390   003212  EE20 F002          	lfsr	2,2
  4391   003216  501E               	movf	turnRight_135@mL^0,w,c
  4392   003218  26D9               	addwf	fsr2l,f,c
  4393   00321A  501F               	movf	(turnRight_135@mL+1)^0,w,c
  4394   00321C  22DA               	addwfc	fsr2h,f,c
  4395   00321E  0E01               	movlw	1
  4396   003220  6EDF               	movwf	indf2,c
  4397                           
  4398                           ;MazeRobot.X/dc_motor.c: 357:     while((mL->power < 80) || (mR->power < 80)){
  4399   003222  EF2B  F019         	goto	l3306
  4400   003226                     l3300:
  4401                           
  4402                           ;MazeRobot.X/dc_motor.c: 358:         mL->power += 10;
  4403   003226  C01E  FFD9         	movff	turnRight_135@mL,fsr2l
  4404   00322A  C01F  FFDA         	movff	turnRight_135@mL+1,fsr2h
  4405   00322E  0E0A               	movlw	10
  4406   003230  26DF               	addwf	indf2,f,c
  4407                           
  4408                           ;MazeRobot.X/dc_motor.c: 359:         mR->power += 10;
  4409   003232  C020  FFD9         	movff	turnRight_135@mR,fsr2l
  4410   003236  C021  FFDA         	movff	turnRight_135@mR+1,fsr2h
  4411   00323A  0E0A               	movlw	10
  4412   00323C  26DF               	addwf	indf2,f,c
  4413   00323E                     
  4414                           ;MazeRobot.X/dc_motor.c: 360:         setMotorPWM(mL);
  4415   00323E  C01E  F012         	movff	turnRight_135@mL,setMotorPWM@m
  4416   003242  C01F  F013         	movff	turnRight_135@mL+1,setMotorPWM@m+1
  4417   003246  EC05  F018         	call	_setMotorPWM	;wreg free
  4418   00324A                     
  4419                           ;MazeRobot.X/dc_motor.c: 361:         setMotorPWM(mR);
  4420   00324A  C020  F012         	movff	turnRight_135@mR,setMotorPWM@m
  4421   00324E  C021  F013         	movff	turnRight_135@mR+1,setMotorPWM@m+1
  4422   003252  EC05  F018         	call	_setMotorPWM	;wreg free
  4423   003256                     l3306:
  4424                           
  4425                           ;MazeRobot.X/dc_motor.c: 357:     while((mL->power < 80) || (mR->power < 80)){
  4426   003256  C01E  FFD9         	movff	turnRight_135@mL,fsr2l
  4427   00325A  C01F  FFDA         	movff	turnRight_135@mL+1,fsr2h
  4428   00325E  0E4F               	movlw	79
  4429   003260  64DF               	cpfsgt	indf2,c
  4430   003262  EF35  F019         	goto	u2901
  4431   003266  EF37  F019         	goto	u2900
  4432   00326A                     u2901:
  4433   00326A  EF13  F019         	goto	l3300
  4434   00326E                     u2900:
  4435   00326E  C020  FFD9         	movff	turnRight_135@mR,fsr2l
  4436   003272  C021  FFDA         	movff	turnRight_135@mR+1,fsr2h
  4437   003276  0E4F               	movlw	79
  4438   003278  64DF               	cpfsgt	indf2,c
  4439   00327A  EF41  F019         	goto	u2911
  4440   00327E  EF43  F019         	goto	u2910
  4441   003282                     u2911:
  4442   003282  EF13  F019         	goto	l3300
  4443   003286                     u2910:
  4444   003286                     
  4445                           ;MazeRobot.X/dc_motor.c: 363:    _delay((unsigned long)((1.5*turning_time45)*(64000000/4
      +                          000.0)));
  4446   003286  0E17               	movlw	23
  4447   003288  6E23               	movwf	(??_turnRight_135+1)^0,c
  4448   00328A  0EC5               	movlw	197
  4449   00328C  6E22               	movwf	??_turnRight_135^0,c
  4450   00328E  0E81               	movlw	129
  4451   003290                     u5307:
  4452   003290  2EE8               	decfsz	wreg,f,c
  4453   003292  D7FE               	bra	u5307
  4454   003294  2E22               	decfsz	??_turnRight_135^0,f,c
  4455   003296  D7FC               	bra	u5307
  4456   003298  2E23               	decfsz	(??_turnRight_135+1)^0,f,c
  4457   00329A  D7FA               	bra	u5307
  4458   00329C  F000               	nop	
  4459   00329E                     
  4460                           ;MazeRobot.X/dc_motor.c: 365:     stop(mL, mR);
  4461   00329E  C01E  F018         	movff	turnRight_135@mL,stop@mL
  4462   0032A2  C01F  F019         	movff	turnRight_135@mL+1,stop@mL+1
  4463   0032A6  C020  F01A         	movff	turnRight_135@mR,stop@mR
  4464   0032AA  C021  F01B         	movff	turnRight_135@mR+1,stop@mR+1
  4465   0032AE  ECDB  F01D         	call	_stop	;wreg free
  4466   0032B2  0012               	return		;funcret
  4467   0032B4                     __end_of_turnRight_135:
  4468                           	callstack 0
  4469                           
  4470 ;; *************** function _turnLeft_135 *****************
  4471 ;; Defined at:
  4472 ;;		line 370 in file "MazeRobot.X/dc_motor.c"
  4473 ;; Parameters:    Size  Location     Type
  4474 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  4475 ;;		 -> main@motorLeft(9), 
  4476 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  4477 ;;		 -> main@motorRight(9), 
  4478 ;; Auto vars:     Size  Location     Type
  4479 ;;		None
  4480 ;; Return value:  Size  Location     Type
  4481 ;;                  1    wreg      void 
  4482 ;; Registers used:
  4483 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4484 ;; Tracked objects:
  4485 ;;		On entry : 0/0
  4486 ;;		On exit  : 0/0
  4487 ;;		Unchanged: 0/0
  4488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4489 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4491 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4492 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4493 ;;Total ram usage:        6 bytes
  4494 ;; Hardware stack levels used: 1
  4495 ;; Hardware stack levels required when called: 5
  4496 ;; This function calls:
  4497 ;;		_reverse
  4498 ;;		_setMotorPWM
  4499 ;;		_stop
  4500 ;; This function is called by:
  4501 ;;		_colorDetect
  4502 ;;		_return_home_turns
  4503 ;; This function uses a non-reentrant model
  4504 ;;
  4505                           
  4506                           	psect	text12
  4507   003530                     __ptext12:
  4508                           	callstack 0
  4509   003530                     _turnLeft_135:
  4510                           	callstack 24
  4511   003530                     
  4512                           ;MazeRobot.X/dc_motor.c: 370: void turnLeft_135(DC_motor *mL, DC_motor *mR);MazeRobot.X/
      +                          dc_motor.c: 371: {;MazeRobot.X/dc_motor.c: 373:     stop(mL, mR);
  4513   003530  C01E  F018         	movff	turnLeft_135@mL,stop@mL
  4514   003534  C01F  F019         	movff	turnLeft_135@mL+1,stop@mL+1
  4515   003538  C020  F01A         	movff	turnLeft_135@mR,stop@mR
  4516   00353C  C021  F01B         	movff	turnLeft_135@mR+1,stop@mR+1
  4517   003540  ECDB  F01D         	call	_stop	;wreg free
  4518   003544                     
  4519                           ;MazeRobot.X/dc_motor.c: 374:     _delay((unsigned long)((100)*(64000000/4000.0)));
  4520   003544  0E09               	movlw	9
  4521   003546  6E23               	movwf	(??_turnLeft_135+1)^0,c
  4522   003548  0E1E               	movlw	30
  4523   00354A  6E22               	movwf	??_turnLeft_135^0,c
  4524   00354C  0EE4               	movlw	228
  4525   00354E                     u5317:
  4526   00354E  2EE8               	decfsz	wreg,f,c
  4527   003550  D7FE               	bra	u5317
  4528   003552  2E22               	decfsz	??_turnLeft_135^0,f,c
  4529   003554  D7FC               	bra	u5317
  4530   003556  2E23               	decfsz	(??_turnLeft_135+1)^0,f,c
  4531   003558  D7FA               	bra	u5317
  4532   00355A  D000               	nop2	
  4533   00355C                     
  4534                           ;MazeRobot.X/dc_motor.c: 376:     reverse(mL, mR);
  4535   00355C  C01E  F018         	movff	turnLeft_135@mL,reverse@mL
  4536   003560  C01F  F019         	movff	turnLeft_135@mL+1,reverse@mL+1
  4537   003564  C020  F01A         	movff	turnLeft_135@mR,reverse@mR
  4538   003568  C021  F01B         	movff	turnLeft_135@mR+1,reverse@mR+1
  4539   00356C  EC07  F01D         	call	_reverse	;wreg free
  4540                           
  4541                           ;MazeRobot.X/dc_motor.c: 377:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  4542   003570  0E39               	movlw	57
  4543   003572  6E23               	movwf	(??_turnLeft_135+1)^0,c
  4544   003574  0ED2               	movlw	210
  4545   003576  6E22               	movwf	??_turnLeft_135^0,c
  4546   003578  0E4C               	movlw	76
  4547   00357A                     u5327:
  4548   00357A  2EE8               	decfsz	wreg,f,c
  4549   00357C  D7FE               	bra	u5327
  4550   00357E  2E22               	decfsz	??_turnLeft_135^0,f,c
  4551   003580  D7FC               	bra	u5327
  4552   003582  2E23               	decfsz	(??_turnLeft_135+1)^0,f,c
  4553   003584  D7FA               	bra	u5327
  4554   003586  D000               	nop2	
  4555   003588                     
  4556                           ;MazeRobot.X/dc_motor.c: 379:     stop(mL, mR);
  4557   003588  C01E  F018         	movff	turnLeft_135@mL,stop@mL
  4558   00358C  C01F  F019         	movff	turnLeft_135@mL+1,stop@mL+1
  4559   003590  C020  F01A         	movff	turnLeft_135@mR,stop@mR
  4560   003594  C021  F01B         	movff	turnLeft_135@mR+1,stop@mR+1
  4561   003598  ECDB  F01D         	call	_stop	;wreg free
  4562   00359C                     
  4563                           ;MazeRobot.X/dc_motor.c: 381:     mL->direction = 0;
  4564   00359C  EE20 F001          	lfsr	2,1
  4565   0035A0  501E               	movf	turnLeft_135@mL^0,w,c
  4566   0035A2  26D9               	addwf	fsr2l,f,c
  4567   0035A4  501F               	movf	(turnLeft_135@mL+1)^0,w,c
  4568   0035A6  22DA               	addwfc	fsr2h,f,c
  4569   0035A8  0E00               	movlw	0
  4570   0035AA  6EDF               	movwf	indf2,c
  4571   0035AC                     
  4572                           ;MazeRobot.X/dc_motor.c: 382:     mR->direction = 1;
  4573   0035AC  EE20 F001          	lfsr	2,1
  4574   0035B0  5020               	movf	turnLeft_135@mR^0,w,c
  4575   0035B2  26D9               	addwf	fsr2l,f,c
  4576   0035B4  5021               	movf	(turnLeft_135@mR+1)^0,w,c
  4577   0035B6  22DA               	addwfc	fsr2h,f,c
  4578   0035B8  0E01               	movlw	1
  4579   0035BA  6EDF               	movwf	indf2,c
  4580   0035BC                     
  4581                           ;MazeRobot.X/dc_motor.c: 384:     mL->brakemode = 1;
  4582   0035BC  EE20 F002          	lfsr	2,2
  4583   0035C0  501E               	movf	turnLeft_135@mL^0,w,c
  4584   0035C2  26D9               	addwf	fsr2l,f,c
  4585   0035C4  501F               	movf	(turnLeft_135@mL+1)^0,w,c
  4586   0035C6  22DA               	addwfc	fsr2h,f,c
  4587   0035C8  0E01               	movlw	1
  4588   0035CA  6EDF               	movwf	indf2,c
  4589   0035CC                     
  4590                           ;MazeRobot.X/dc_motor.c: 385:     mL->brakemode = 1;
  4591   0035CC  EE20 F002          	lfsr	2,2
  4592   0035D0  501E               	movf	turnLeft_135@mL^0,w,c
  4593   0035D2  26D9               	addwf	fsr2l,f,c
  4594   0035D4  501F               	movf	(turnLeft_135@mL+1)^0,w,c
  4595   0035D6  22DA               	addwfc	fsr2h,f,c
  4596   0035D8  0E01               	movlw	1
  4597   0035DA  6EDF               	movwf	indf2,c
  4598                           
  4599                           ;MazeRobot.X/dc_motor.c: 387:     while((mL->power < 80) || (mR->power < 80)){
  4600   0035DC  EF08  F01B         	goto	l3336
  4601   0035E0                     l3330:
  4602                           
  4603                           ;MazeRobot.X/dc_motor.c: 388:         mL->power += 10;
  4604   0035E0  C01E  FFD9         	movff	turnLeft_135@mL,fsr2l
  4605   0035E4  C01F  FFDA         	movff	turnLeft_135@mL+1,fsr2h
  4606   0035E8  0E0A               	movlw	10
  4607   0035EA  26DF               	addwf	indf2,f,c
  4608                           
  4609                           ;MazeRobot.X/dc_motor.c: 389:         mR->power += 10;
  4610   0035EC  C020  FFD9         	movff	turnLeft_135@mR,fsr2l
  4611   0035F0  C021  FFDA         	movff	turnLeft_135@mR+1,fsr2h
  4612   0035F4  0E0A               	movlw	10
  4613   0035F6  26DF               	addwf	indf2,f,c
  4614   0035F8                     
  4615                           ;MazeRobot.X/dc_motor.c: 390:         setMotorPWM(mL);
  4616   0035F8  C01E  F012         	movff	turnLeft_135@mL,setMotorPWM@m
  4617   0035FC  C01F  F013         	movff	turnLeft_135@mL+1,setMotorPWM@m+1
  4618   003600  EC05  F018         	call	_setMotorPWM	;wreg free
  4619   003604                     
  4620                           ;MazeRobot.X/dc_motor.c: 391:         setMotorPWM(mR);
  4621   003604  C020  F012         	movff	turnLeft_135@mR,setMotorPWM@m
  4622   003608  C021  F013         	movff	turnLeft_135@mR+1,setMotorPWM@m+1
  4623   00360C  EC05  F018         	call	_setMotorPWM	;wreg free
  4624   003610                     l3336:
  4625                           
  4626                           ;MazeRobot.X/dc_motor.c: 387:     while((mL->power < 80) || (mR->power < 80)){
  4627   003610  C01E  FFD9         	movff	turnLeft_135@mL,fsr2l
  4628   003614  C01F  FFDA         	movff	turnLeft_135@mL+1,fsr2h
  4629   003618  0E4F               	movlw	79
  4630   00361A  64DF               	cpfsgt	indf2,c
  4631   00361C  EF12  F01B         	goto	u2921
  4632   003620  EF14  F01B         	goto	u2920
  4633   003624                     u2921:
  4634   003624  EFF0  F01A         	goto	l3330
  4635   003628                     u2920:
  4636   003628  C020  FFD9         	movff	turnLeft_135@mR,fsr2l
  4637   00362C  C021  FFDA         	movff	turnLeft_135@mR+1,fsr2h
  4638   003630  0E4F               	movlw	79
  4639   003632  64DF               	cpfsgt	indf2,c
  4640   003634  EF1E  F01B         	goto	u2931
  4641   003638  EF20  F01B         	goto	u2930
  4642   00363C                     u2931:
  4643   00363C  EFF0  F01A         	goto	l3330
  4644   003640                     u2930:
  4645   003640                     
  4646                           ;MazeRobot.X/dc_motor.c: 393:    _delay((unsigned long)((3*turning_time45)*(64000000/400
      +                          0.0)));
  4647   003640  0E2E               	movlw	46
  4648   003642  6E23               	movwf	(??_turnLeft_135+1)^0,c
  4649   003644  0E8A               	movlw	138
  4650   003646  6E22               	movwf	??_turnLeft_135^0,c
  4651   003648  0E04               	movlw	4
  4652   00364A                     u5337:
  4653   00364A  2EE8               	decfsz	wreg,f,c
  4654   00364C  D7FE               	bra	u5337
  4655   00364E  2E22               	decfsz	??_turnLeft_135^0,f,c
  4656   003650  D7FC               	bra	u5337
  4657   003652  2E23               	decfsz	(??_turnLeft_135+1)^0,f,c
  4658   003654  D7FA               	bra	u5337
  4659   003656                     
  4660                           ;MazeRobot.X/dc_motor.c: 394:     stop(mL, mR);
  4661   003656  C01E  F018         	movff	turnLeft_135@mL,stop@mL
  4662   00365A  C01F  F019         	movff	turnLeft_135@mL+1,stop@mL+1
  4663   00365E  C020  F01A         	movff	turnLeft_135@mR,stop@mR
  4664   003662  C021  F01B         	movff	turnLeft_135@mR+1,stop@mR+1
  4665   003666  ECDB  F01D         	call	_stop	;wreg free
  4666   00366A  0012               	return		;funcret
  4667   00366C                     __end_of_turnLeft_135:
  4668                           	callstack 0
  4669                           
  4670 ;; *************** function _reverseSquareRight *****************
  4671 ;; Defined at:
  4672 ;;		line 398 in file "MazeRobot.X/dc_motor.c"
  4673 ;; Parameters:    Size  Location     Type
  4674 ;;  mL              2   35[COMRAM] PTR struct DC_motor
  4675 ;;		 -> main@motorLeft(9), 
  4676 ;;  mR              2   37[COMRAM] PTR struct DC_motor
  4677 ;;		 -> main@motorRight(9), 
  4678 ;; Auto vars:     Size  Location     Type
  4679 ;;		None
  4680 ;; Return value:  Size  Location     Type
  4681 ;;                  1    wreg      void 
  4682 ;; Registers used:
  4683 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4684 ;; Tracked objects:
  4685 ;;		On entry : 0/0
  4686 ;;		On exit  : 0/0
  4687 ;;		Unchanged: 0/0
  4688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4689 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4690 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4691 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4692 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4693 ;;Total ram usage:        6 bytes
  4694 ;; Hardware stack levels used: 1
  4695 ;; Hardware stack levels required when called: 6
  4696 ;; This function calls:
  4697 ;;		_reverse
  4698 ;;		_stop
  4699 ;;		_turnRight_90
  4700 ;; This function is called by:
  4701 ;;		_colorDetect
  4702 ;; This function uses a non-reentrant model
  4703 ;;
  4704                           
  4705                           	psect	text13
  4706   003C64                     __ptext13:
  4707                           	callstack 0
  4708   003C64                     _reverseSquareRight:
  4709                           	callstack 23
  4710   003C64                     
  4711                           ;MazeRobot.X/dc_motor.c: 398: void reverseSquareRight(DC_motor *mL, DC_motor *mR);MazeRo
      +                          bot.X/dc_motor.c: 399: {;MazeRobot.X/dc_motor.c: 401:     reverse(mL, mR);
  4712   003C64  C024  F018         	movff	reverseSquareRight@mL,reverse@mL
  4713   003C68  C025  F019         	movff	reverseSquareRight@mL+1,reverse@mL+1
  4714   003C6C  C026  F01A         	movff	reverseSquareRight@mR,reverse@mR
  4715   003C70  C027  F01B         	movff	reverseSquareRight@mR+1,reverse@mR+1
  4716   003C74  EC07  F01D         	call	_reverse	;wreg free
  4717   003C78                     
  4718                           ;MazeRobot.X/dc_motor.c: 402:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  4719   003C78  0E39               	movlw	57
  4720   003C7A  6E29               	movwf	(??_reverseSquareRight+1)^0,c
  4721   003C7C  0ED2               	movlw	210
  4722   003C7E  6E28               	movwf	??_reverseSquareRight^0,c
  4723   003C80  0E4C               	movlw	76
  4724   003C82                     u5347:
  4725   003C82  2EE8               	decfsz	wreg,f,c
  4726   003C84  D7FE               	bra	u5347
  4727   003C86  2E28               	decfsz	??_reverseSquareRight^0,f,c
  4728   003C88  D7FC               	bra	u5347
  4729   003C8A  2E29               	decfsz	(??_reverseSquareRight+1)^0,f,c
  4730   003C8C  D7FA               	bra	u5347
  4731   003C8E  D000               	nop2	
  4732   003C90                     
  4733                           ;MazeRobot.X/dc_motor.c: 404:     stop(mL, mR);
  4734   003C90  C024  F018         	movff	reverseSquareRight@mL,stop@mL
  4735   003C94  C025  F019         	movff	reverseSquareRight@mL+1,stop@mL+1
  4736   003C98  C026  F01A         	movff	reverseSquareRight@mR,stop@mR
  4737   003C9C  C027  F01B         	movff	reverseSquareRight@mR+1,stop@mR+1
  4738   003CA0  ECDB  F01D         	call	_stop	;wreg free
  4739   003CA4                     
  4740                           ;MazeRobot.X/dc_motor.c: 406:     reverse(mL, mR);
  4741   003CA4  C024  F018         	movff	reverseSquareRight@mL,reverse@mL
  4742   003CA8  C025  F019         	movff	reverseSquareRight@mL+1,reverse@mL+1
  4743   003CAC  C026  F01A         	movff	reverseSquareRight@mR,reverse@mR
  4744   003CB0  C027  F01B         	movff	reverseSquareRight@mR+1,reverse@mR+1
  4745   003CB4  EC07  F01D         	call	_reverse	;wreg free
  4746   003CB8                     
  4747                           ;MazeRobot.X/dc_motor.c: 407:     _delay((unsigned long)((2*reverse_time)*(64000000/4000
      +                          .0)));
  4748   003CB8  0E72               	movlw	114
  4749   003CBA  6E29               	movwf	(??_reverseSquareRight+1)^0,c
  4750   003CBC  0EA3               	movlw	163
  4751   003CBE  6E28               	movwf	??_reverseSquareRight^0,c
  4752   003CC0  0E9B               	movlw	155
  4753   003CC2                     u5357:
  4754   003CC2  2EE8               	decfsz	wreg,f,c
  4755   003CC4  D7FE               	bra	u5357
  4756   003CC6  2E28               	decfsz	??_reverseSquareRight^0,f,c
  4757   003CC8  D7FC               	bra	u5357
  4758   003CCA  2E29               	decfsz	(??_reverseSquareRight+1)^0,f,c
  4759   003CCC  D7FA               	bra	u5357
  4760   003CCE  F000               	nop	
  4761                           
  4762                           ;MazeRobot.X/dc_motor.c: 409:     turnRight_90(mL,mR);
  4763   003CD0  C024  F01E         	movff	reverseSquareRight@mL,turnRight_90@mL
  4764   003CD4  C025  F01F         	movff	reverseSquareRight@mL+1,turnRight_90@mL+1
  4765   003CD8  C026  F020         	movff	reverseSquareRight@mR,turnRight_90@mR
  4766   003CDC  C027  F021         	movff	reverseSquareRight@mR+1,turnRight_90@mR+1
  4767   003CE0  EC5A  F019         	call	_turnRight_90	;wreg free
  4768                           
  4769                           ;MazeRobot.X/dc_motor.c: 411:     stop(mL, mR);
  4770   003CE4  C024  F018         	movff	reverseSquareRight@mL,stop@mL
  4771   003CE8  C025  F019         	movff	reverseSquareRight@mL+1,stop@mL+1
  4772   003CEC  C026  F01A         	movff	reverseSquareRight@mR,stop@mR
  4773   003CF0  C027  F01B         	movff	reverseSquareRight@mR+1,stop@mR+1
  4774   003CF4  ECDB  F01D         	call	_stop	;wreg free
  4775   003CF8  0012               	return		;funcret
  4776   003CFA                     __end_of_reverseSquareRight:
  4777                           	callstack 0
  4778                           
  4779 ;; *************** function _turnRight_90 *****************
  4780 ;; Defined at:
  4781 ;;		line 267 in file "MazeRobot.X/dc_motor.c"
  4782 ;; Parameters:    Size  Location     Type
  4783 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  4784 ;;		 -> main@motorLeft(9), 
  4785 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  4786 ;;		 -> main@motorRight(9), 
  4787 ;; Auto vars:     Size  Location     Type
  4788 ;;		None
  4789 ;; Return value:  Size  Location     Type
  4790 ;;                  1    wreg      void 
  4791 ;; Registers used:
  4792 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4793 ;; Tracked objects:
  4794 ;;		On entry : 0/0
  4795 ;;		On exit  : 0/0
  4796 ;;		Unchanged: 0/0
  4797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4798 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4800 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4801 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4802 ;;Total ram usage:        6 bytes
  4803 ;; Hardware stack levels used: 1
  4804 ;; Hardware stack levels required when called: 5
  4805 ;; This function calls:
  4806 ;;		_reverse
  4807 ;;		_setMotorPWM
  4808 ;;		_stop
  4809 ;; This function is called by:
  4810 ;;		_colorDetect
  4811 ;;		_return_home_turns
  4812 ;;		_reverseSquareRight
  4813 ;; This function uses a non-reentrant model
  4814 ;;
  4815                           
  4816                           	psect	text14
  4817   0032B4                     __ptext14:
  4818                           	callstack 0
  4819   0032B4                     _turnRight_90:
  4820                           	callstack 24
  4821   0032B4                     
  4822                           ;MazeRobot.X/dc_motor.c: 267: void turnRight_90(DC_motor *mL, DC_motor *mR);MazeRobot.X/
      +                          dc_motor.c: 268: {;MazeRobot.X/dc_motor.c: 269:     stop(mL, mR);
  4823   0032B4  C01E  F018         	movff	turnRight_90@mL,stop@mL
  4824   0032B8  C01F  F019         	movff	turnRight_90@mL+1,stop@mL+1
  4825   0032BC  C020  F01A         	movff	turnRight_90@mR,stop@mR
  4826   0032C0  C021  F01B         	movff	turnRight_90@mR+1,stop@mR+1
  4827   0032C4  ECDB  F01D         	call	_stop	;wreg free
  4828   0032C8                     
  4829                           ;MazeRobot.X/dc_motor.c: 270:     _delay((unsigned long)((100)*(64000000/4000.0)));
  4830   0032C8  0E09               	movlw	9
  4831   0032CA  6E23               	movwf	(??_turnRight_90+1)^0,c
  4832   0032CC  0E1E               	movlw	30
  4833   0032CE  6E22               	movwf	??_turnRight_90^0,c
  4834   0032D0  0EE4               	movlw	228
  4835   0032D2                     u5367:
  4836   0032D2  2EE8               	decfsz	wreg,f,c
  4837   0032D4  D7FE               	bra	u5367
  4838   0032D6  2E22               	decfsz	??_turnRight_90^0,f,c
  4839   0032D8  D7FC               	bra	u5367
  4840   0032DA  2E23               	decfsz	(??_turnRight_90+1)^0,f,c
  4841   0032DC  D7FA               	bra	u5367
  4842   0032DE  D000               	nop2	
  4843   0032E0                     
  4844                           ;MazeRobot.X/dc_motor.c: 272:     reverse(mL, mR);
  4845   0032E0  C01E  F018         	movff	turnRight_90@mL,reverse@mL
  4846   0032E4  C01F  F019         	movff	turnRight_90@mL+1,reverse@mL+1
  4847   0032E8  C020  F01A         	movff	turnRight_90@mR,reverse@mR
  4848   0032EC  C021  F01B         	movff	turnRight_90@mR+1,reverse@mR+1
  4849   0032F0  EC07  F01D         	call	_reverse	;wreg free
  4850                           
  4851                           ;MazeRobot.X/dc_motor.c: 273:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  4852   0032F4  0E39               	movlw	57
  4853   0032F6  6E23               	movwf	(??_turnRight_90+1)^0,c
  4854   0032F8  0ED2               	movlw	210
  4855   0032FA  6E22               	movwf	??_turnRight_90^0,c
  4856   0032FC  0E4C               	movlw	76
  4857   0032FE                     u5377:
  4858   0032FE  2EE8               	decfsz	wreg,f,c
  4859   003300  D7FE               	bra	u5377
  4860   003302  2E22               	decfsz	??_turnRight_90^0,f,c
  4861   003304  D7FC               	bra	u5377
  4862   003306  2E23               	decfsz	(??_turnRight_90+1)^0,f,c
  4863   003308  D7FA               	bra	u5377
  4864   00330A  D000               	nop2	
  4865   00330C                     
  4866                           ;MazeRobot.X/dc_motor.c: 275:     stop(mL, mR);
  4867   00330C  C01E  F018         	movff	turnRight_90@mL,stop@mL
  4868   003310  C01F  F019         	movff	turnRight_90@mL+1,stop@mL+1
  4869   003314  C020  F01A         	movff	turnRight_90@mR,stop@mR
  4870   003318  C021  F01B         	movff	turnRight_90@mR+1,stop@mR+1
  4871   00331C  ECDB  F01D         	call	_stop	;wreg free
  4872   003320                     
  4873                           ;MazeRobot.X/dc_motor.c: 277:     mL->direction = 1;
  4874   003320  EE20 F001          	lfsr	2,1
  4875   003324  501E               	movf	turnRight_90@mL^0,w,c
  4876   003326  26D9               	addwf	fsr2l,f,c
  4877   003328  501F               	movf	(turnRight_90@mL+1)^0,w,c
  4878   00332A  22DA               	addwfc	fsr2h,f,c
  4879   00332C  0E01               	movlw	1
  4880   00332E  6EDF               	movwf	indf2,c
  4881   003330                     
  4882                           ;MazeRobot.X/dc_motor.c: 278:     mR->direction = 0;
  4883   003330  EE20 F001          	lfsr	2,1
  4884   003334  5020               	movf	turnRight_90@mR^0,w,c
  4885   003336  26D9               	addwf	fsr2l,f,c
  4886   003338  5021               	movf	(turnRight_90@mR+1)^0,w,c
  4887   00333A  22DA               	addwfc	fsr2h,f,c
  4888   00333C  0E00               	movlw	0
  4889   00333E  6EDF               	movwf	indf2,c
  4890   003340                     
  4891                           ;MazeRobot.X/dc_motor.c: 280:     mL->brakemode = 1;
  4892   003340  EE20 F002          	lfsr	2,2
  4893   003344  501E               	movf	turnRight_90@mL^0,w,c
  4894   003346  26D9               	addwf	fsr2l,f,c
  4895   003348  501F               	movf	(turnRight_90@mL+1)^0,w,c
  4896   00334A  22DA               	addwfc	fsr2h,f,c
  4897   00334C  0E01               	movlw	1
  4898   00334E  6EDF               	movwf	indf2,c
  4899   003350                     
  4900                           ;MazeRobot.X/dc_motor.c: 281:     mL->brakemode = 1;
  4901   003350  EE20 F002          	lfsr	2,2
  4902   003354  501E               	movf	turnRight_90@mL^0,w,c
  4903   003356  26D9               	addwf	fsr2l,f,c
  4904   003358  501F               	movf	(turnRight_90@mL+1)^0,w,c
  4905   00335A  22DA               	addwfc	fsr2h,f,c
  4906   00335C  0E01               	movlw	1
  4907   00335E  6EDF               	movwf	indf2,c
  4908                           
  4909                           ;MazeRobot.X/dc_motor.c: 283:     while((mL->power < 80) || (mR->power < 80)){
  4910   003360  EFCA  F019         	goto	l2954
  4911   003364                     l2948:
  4912                           
  4913                           ;MazeRobot.X/dc_motor.c: 284:         mL->power += 10;
  4914   003364  C01E  FFD9         	movff	turnRight_90@mL,fsr2l
  4915   003368  C01F  FFDA         	movff	turnRight_90@mL+1,fsr2h
  4916   00336C  0E0A               	movlw	10
  4917   00336E  26DF               	addwf	indf2,f,c
  4918                           
  4919                           ;MazeRobot.X/dc_motor.c: 285:         mR->power += 10;
  4920   003370  C020  FFD9         	movff	turnRight_90@mR,fsr2l
  4921   003374  C021  FFDA         	movff	turnRight_90@mR+1,fsr2h
  4922   003378  0E0A               	movlw	10
  4923   00337A  26DF               	addwf	indf2,f,c
  4924   00337C                     
  4925                           ;MazeRobot.X/dc_motor.c: 286:         setMotorPWM(mL);
  4926   00337C  C01E  F012         	movff	turnRight_90@mL,setMotorPWM@m
  4927   003380  C01F  F013         	movff	turnRight_90@mL+1,setMotorPWM@m+1
  4928   003384  EC05  F018         	call	_setMotorPWM	;wreg free
  4929   003388                     
  4930                           ;MazeRobot.X/dc_motor.c: 287:         setMotorPWM(mR);
  4931   003388  C020  F012         	movff	turnRight_90@mR,setMotorPWM@m
  4932   00338C  C021  F013         	movff	turnRight_90@mR+1,setMotorPWM@m+1
  4933   003390  EC05  F018         	call	_setMotorPWM	;wreg free
  4934   003394                     l2954:
  4935                           
  4936                           ;MazeRobot.X/dc_motor.c: 283:     while((mL->power < 80) || (mR->power < 80)){
  4937   003394  C01E  FFD9         	movff	turnRight_90@mL,fsr2l
  4938   003398  C01F  FFDA         	movff	turnRight_90@mL+1,fsr2h
  4939   00339C  0E4F               	movlw	79
  4940   00339E  64DF               	cpfsgt	indf2,c
  4941   0033A0  EFD4  F019         	goto	u2431
  4942   0033A4  EFD6  F019         	goto	u2430
  4943   0033A8                     u2431:
  4944   0033A8  EFB2  F019         	goto	l2948
  4945   0033AC                     u2430:
  4946   0033AC  C020  FFD9         	movff	turnRight_90@mR,fsr2l
  4947   0033B0  C021  FFDA         	movff	turnRight_90@mR+1,fsr2h
  4948   0033B4  0E4F               	movlw	79
  4949   0033B6  64DF               	cpfsgt	indf2,c
  4950   0033B8  EFE0  F019         	goto	u2441
  4951   0033BC  EFE2  F019         	goto	u2440
  4952   0033C0                     u2441:
  4953   0033C0  EFB2  F019         	goto	l2948
  4954   0033C4                     u2440:
  4955   0033C4                     
  4956                           ;MazeRobot.X/dc_motor.c: 289:    _delay((unsigned long)((turning_time45)*(64000000/4000.
      +                          0)));
  4957   0033C4  0E10               	movlw	16
  4958   0033C6  6E23               	movwf	(??_turnRight_90+1)^0,c
  4959   0033C8  0E2E               	movlw	46
  4960   0033CA  6E22               	movwf	??_turnRight_90^0,c
  4961   0033CC  0EAA               	movlw	170
  4962   0033CE                     u5387:
  4963   0033CE  2EE8               	decfsz	wreg,f,c
  4964   0033D0  D7FE               	bra	u5387
  4965   0033D2  2E22               	decfsz	??_turnRight_90^0,f,c
  4966   0033D4  D7FC               	bra	u5387
  4967   0033D6  2E23               	decfsz	(??_turnRight_90+1)^0,f,c
  4968   0033D8  D7FA               	bra	u5387
  4969   0033DA  D000               	nop2	
  4970   0033DC                     
  4971                           ;MazeRobot.X/dc_motor.c: 291:     stop(mL, mR);
  4972   0033DC  C01E  F018         	movff	turnRight_90@mL,stop@mL
  4973   0033E0  C01F  F019         	movff	turnRight_90@mL+1,stop@mL+1
  4974   0033E4  C020  F01A         	movff	turnRight_90@mR,stop@mR
  4975   0033E8  C021  F01B         	movff	turnRight_90@mR+1,stop@mR+1
  4976   0033EC  ECDB  F01D         	call	_stop	;wreg free
  4977   0033F0  0012               	return		;funcret
  4978   0033F2                     __end_of_turnRight_90:
  4979                           	callstack 0
  4980                           
  4981 ;; *************** function _reverseSquareLeft *****************
  4982 ;; Defined at:
  4983 ;;		line 416 in file "MazeRobot.X/dc_motor.c"
  4984 ;; Parameters:    Size  Location     Type
  4985 ;;  mL              2   35[COMRAM] PTR struct DC_motor
  4986 ;;		 -> main@motorLeft(9), 
  4987 ;;  mR              2   37[COMRAM] PTR struct DC_motor
  4988 ;;		 -> main@motorRight(9), 
  4989 ;; Auto vars:     Size  Location     Type
  4990 ;;		None
  4991 ;; Return value:  Size  Location     Type
  4992 ;;                  1    wreg      void 
  4993 ;; Registers used:
  4994 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4995 ;; Tracked objects:
  4996 ;;		On entry : 0/0
  4997 ;;		On exit  : 0/0
  4998 ;;		Unchanged: 0/0
  4999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5000 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5002 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5003 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5004 ;;Total ram usage:        6 bytes
  5005 ;; Hardware stack levels used: 1
  5006 ;; Hardware stack levels required when called: 6
  5007 ;; This function calls:
  5008 ;;		_reverse
  5009 ;;		_stop
  5010 ;;		_turnLeft_90
  5011 ;; This function is called by:
  5012 ;;		_colorDetect
  5013 ;; This function uses a non-reentrant model
  5014 ;;
  5015                           
  5016                           	psect	text15
  5017   003CFA                     __ptext15:
  5018                           	callstack 0
  5019   003CFA                     _reverseSquareLeft:
  5020                           	callstack 23
  5021   003CFA                     
  5022                           ;MazeRobot.X/dc_motor.c: 416: void reverseSquareLeft(DC_motor *mL, DC_motor *mR);MazeRob
      +                          ot.X/dc_motor.c: 417: {;MazeRobot.X/dc_motor.c: 418:     reverse(mL, mR);
  5023   003CFA  C024  F018         	movff	reverseSquareLeft@mL,reverse@mL
  5024   003CFE  C025  F019         	movff	reverseSquareLeft@mL+1,reverse@mL+1
  5025   003D02  C026  F01A         	movff	reverseSquareLeft@mR,reverse@mR
  5026   003D06  C027  F01B         	movff	reverseSquareLeft@mR+1,reverse@mR+1
  5027   003D0A  EC07  F01D         	call	_reverse	;wreg free
  5028   003D0E                     
  5029                           ;MazeRobot.X/dc_motor.c: 419:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  5030   003D0E  0E39               	movlw	57
  5031   003D10  6E29               	movwf	(??_reverseSquareLeft+1)^0,c
  5032   003D12  0ED2               	movlw	210
  5033   003D14  6E28               	movwf	??_reverseSquareLeft^0,c
  5034   003D16  0E4C               	movlw	76
  5035   003D18                     u5397:
  5036   003D18  2EE8               	decfsz	wreg,f,c
  5037   003D1A  D7FE               	bra	u5397
  5038   003D1C  2E28               	decfsz	??_reverseSquareLeft^0,f,c
  5039   003D1E  D7FC               	bra	u5397
  5040   003D20  2E29               	decfsz	(??_reverseSquareLeft+1)^0,f,c
  5041   003D22  D7FA               	bra	u5397
  5042   003D24  D000               	nop2	
  5043   003D26                     
  5044                           ;MazeRobot.X/dc_motor.c: 421:     stop(mL, mR);
  5045   003D26  C024  F018         	movff	reverseSquareLeft@mL,stop@mL
  5046   003D2A  C025  F019         	movff	reverseSquareLeft@mL+1,stop@mL+1
  5047   003D2E  C026  F01A         	movff	reverseSquareLeft@mR,stop@mR
  5048   003D32  C027  F01B         	movff	reverseSquareLeft@mR+1,stop@mR+1
  5049   003D36  ECDB  F01D         	call	_stop	;wreg free
  5050   003D3A                     
  5051                           ;MazeRobot.X/dc_motor.c: 423:     reverse(mL, mR);
  5052   003D3A  C024  F018         	movff	reverseSquareLeft@mL,reverse@mL
  5053   003D3E  C025  F019         	movff	reverseSquareLeft@mL+1,reverse@mL+1
  5054   003D42  C026  F01A         	movff	reverseSquareLeft@mR,reverse@mR
  5055   003D46  C027  F01B         	movff	reverseSquareLeft@mR+1,reverse@mR+1
  5056   003D4A  EC07  F01D         	call	_reverse	;wreg free
  5057   003D4E                     
  5058                           ;MazeRobot.X/dc_motor.c: 424:     _delay((unsigned long)((2*reverse_time)*(64000000/4000
      +                          .0)));
  5059   003D4E  0E72               	movlw	114
  5060   003D50  6E29               	movwf	(??_reverseSquareLeft+1)^0,c
  5061   003D52  0EA3               	movlw	163
  5062   003D54  6E28               	movwf	??_reverseSquareLeft^0,c
  5063   003D56  0E9B               	movlw	155
  5064   003D58                     u5407:
  5065   003D58  2EE8               	decfsz	wreg,f,c
  5066   003D5A  D7FE               	bra	u5407
  5067   003D5C  2E28               	decfsz	??_reverseSquareLeft^0,f,c
  5068   003D5E  D7FC               	bra	u5407
  5069   003D60  2E29               	decfsz	(??_reverseSquareLeft+1)^0,f,c
  5070   003D62  D7FA               	bra	u5407
  5071   003D64  F000               	nop	
  5072                           
  5073                           ;MazeRobot.X/dc_motor.c: 426:     turnLeft_90(mL,mR);
  5074   003D66  C024  F01E         	movff	reverseSquareLeft@mL,turnLeft_90@mL
  5075   003D6A  C025  F01F         	movff	reverseSquareLeft@mL+1,turnLeft_90@mL+1
  5076   003D6E  C026  F020         	movff	reverseSquareLeft@mR,turnLeft_90@mR
  5077   003D72  C027  F021         	movff	reverseSquareLeft@mR+1,turnLeft_90@mR+1
  5078   003D76  ECF9  F019         	call	_turnLeft_90	;wreg free
  5079                           
  5080                           ;MazeRobot.X/dc_motor.c: 428:     stop(mL, mR);
  5081   003D7A  C024  F018         	movff	reverseSquareLeft@mL,stop@mL
  5082   003D7E  C025  F019         	movff	reverseSquareLeft@mL+1,stop@mL+1
  5083   003D82  C026  F01A         	movff	reverseSquareLeft@mR,stop@mR
  5084   003D86  C027  F01B         	movff	reverseSquareLeft@mR+1,stop@mR+1
  5085   003D8A  ECDB  F01D         	call	_stop	;wreg free
  5086   003D8E  0012               	return		;funcret
  5087   003D90                     __end_of_reverseSquareLeft:
  5088                           	callstack 0
  5089                           
  5090 ;; *************** function _turnLeft_90 *****************
  5091 ;; Defined at:
  5092 ;;		line 238 in file "MazeRobot.X/dc_motor.c"
  5093 ;; Parameters:    Size  Location     Type
  5094 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  5095 ;;		 -> main@motorLeft(9), 
  5096 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  5097 ;;		 -> main@motorRight(9), 
  5098 ;; Auto vars:     Size  Location     Type
  5099 ;;		None
  5100 ;; Return value:  Size  Location     Type
  5101 ;;                  1    wreg      void 
  5102 ;; Registers used:
  5103 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5104 ;; Tracked objects:
  5105 ;;		On entry : 0/0
  5106 ;;		On exit  : 0/0
  5107 ;;		Unchanged: 0/0
  5108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5109 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5111 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5112 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5113 ;;Total ram usage:        6 bytes
  5114 ;; Hardware stack levels used: 1
  5115 ;; Hardware stack levels required when called: 5
  5116 ;; This function calls:
  5117 ;;		_reverse
  5118 ;;		_setMotorPWM
  5119 ;;		_stop
  5120 ;; This function is called by:
  5121 ;;		_colorDetect
  5122 ;;		_return_home_turns
  5123 ;;		_reverseSquareLeft
  5124 ;; This function uses a non-reentrant model
  5125 ;;
  5126                           
  5127                           	psect	text16
  5128   0033F2                     __ptext16:
  5129                           	callstack 0
  5130   0033F2                     _turnLeft_90:
  5131                           	callstack 24
  5132   0033F2                     
  5133                           ;MazeRobot.X/dc_motor.c: 238: void turnLeft_90(DC_motor *mL, DC_motor *mR);MazeRobot.X/d
      +                          c_motor.c: 239: {;MazeRobot.X/dc_motor.c: 241:     stop(mL, mR);
  5134   0033F2  C01E  F018         	movff	turnLeft_90@mL,stop@mL
  5135   0033F6  C01F  F019         	movff	turnLeft_90@mL+1,stop@mL+1
  5136   0033FA  C020  F01A         	movff	turnLeft_90@mR,stop@mR
  5137   0033FE  C021  F01B         	movff	turnLeft_90@mR+1,stop@mR+1
  5138   003402  ECDB  F01D         	call	_stop	;wreg free
  5139   003406                     
  5140                           ;MazeRobot.X/dc_motor.c: 242:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5141   003406  0E09               	movlw	9
  5142   003408  6E23               	movwf	(??_turnLeft_90+1)^0,c
  5143   00340A  0E1E               	movlw	30
  5144   00340C  6E22               	movwf	??_turnLeft_90^0,c
  5145   00340E  0EE4               	movlw	228
  5146   003410                     u5417:
  5147   003410  2EE8               	decfsz	wreg,f,c
  5148   003412  D7FE               	bra	u5417
  5149   003414  2E22               	decfsz	??_turnLeft_90^0,f,c
  5150   003416  D7FC               	bra	u5417
  5151   003418  2E23               	decfsz	(??_turnLeft_90+1)^0,f,c
  5152   00341A  D7FA               	bra	u5417
  5153   00341C  D000               	nop2	
  5154   00341E                     
  5155                           ;MazeRobot.X/dc_motor.c: 244:     reverse(mL, mR);
  5156   00341E  C01E  F018         	movff	turnLeft_90@mL,reverse@mL
  5157   003422  C01F  F019         	movff	turnLeft_90@mL+1,reverse@mL+1
  5158   003426  C020  F01A         	movff	turnLeft_90@mR,reverse@mR
  5159   00342A  C021  F01B         	movff	turnLeft_90@mR+1,reverse@mR+1
  5160   00342E  EC07  F01D         	call	_reverse	;wreg free
  5161                           
  5162                           ;MazeRobot.X/dc_motor.c: 245:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  5163   003432  0E39               	movlw	57
  5164   003434  6E23               	movwf	(??_turnLeft_90+1)^0,c
  5165   003436  0ED2               	movlw	210
  5166   003438  6E22               	movwf	??_turnLeft_90^0,c
  5167   00343A  0E4C               	movlw	76
  5168   00343C                     u5427:
  5169   00343C  2EE8               	decfsz	wreg,f,c
  5170   00343E  D7FE               	bra	u5427
  5171   003440  2E22               	decfsz	??_turnLeft_90^0,f,c
  5172   003442  D7FC               	bra	u5427
  5173   003444  2E23               	decfsz	(??_turnLeft_90+1)^0,f,c
  5174   003446  D7FA               	bra	u5427
  5175   003448  D000               	nop2	
  5176   00344A                     
  5177                           ;MazeRobot.X/dc_motor.c: 247:     stop(mL, mR);
  5178   00344A  C01E  F018         	movff	turnLeft_90@mL,stop@mL
  5179   00344E  C01F  F019         	movff	turnLeft_90@mL+1,stop@mL+1
  5180   003452  C020  F01A         	movff	turnLeft_90@mR,stop@mR
  5181   003456  C021  F01B         	movff	turnLeft_90@mR+1,stop@mR+1
  5182   00345A  ECDB  F01D         	call	_stop	;wreg free
  5183   00345E                     
  5184                           ;MazeRobot.X/dc_motor.c: 249:     mL->direction = 0;
  5185   00345E  EE20 F001          	lfsr	2,1
  5186   003462  501E               	movf	turnLeft_90@mL^0,w,c
  5187   003464  26D9               	addwf	fsr2l,f,c
  5188   003466  501F               	movf	(turnLeft_90@mL+1)^0,w,c
  5189   003468  22DA               	addwfc	fsr2h,f,c
  5190   00346A  0E00               	movlw	0
  5191   00346C  6EDF               	movwf	indf2,c
  5192   00346E                     
  5193                           ;MazeRobot.X/dc_motor.c: 250:     mR->direction = 1;
  5194   00346E  EE20 F001          	lfsr	2,1
  5195   003472  5020               	movf	turnLeft_90@mR^0,w,c
  5196   003474  26D9               	addwf	fsr2l,f,c
  5197   003476  5021               	movf	(turnLeft_90@mR+1)^0,w,c
  5198   003478  22DA               	addwfc	fsr2h,f,c
  5199   00347A  0E01               	movlw	1
  5200   00347C  6EDF               	movwf	indf2,c
  5201   00347E                     
  5202                           ;MazeRobot.X/dc_motor.c: 252:     mL->brakemode = 1;
  5203   00347E  EE20 F002          	lfsr	2,2
  5204   003482  501E               	movf	turnLeft_90@mL^0,w,c
  5205   003484  26D9               	addwf	fsr2l,f,c
  5206   003486  501F               	movf	(turnLeft_90@mL+1)^0,w,c
  5207   003488  22DA               	addwfc	fsr2h,f,c
  5208   00348A  0E01               	movlw	1
  5209   00348C  6EDF               	movwf	indf2,c
  5210   00348E                     
  5211                           ;MazeRobot.X/dc_motor.c: 253:     mL->brakemode = 1;
  5212   00348E  EE20 F002          	lfsr	2,2
  5213   003492  501E               	movf	turnLeft_90@mL^0,w,c
  5214   003494  26D9               	addwf	fsr2l,f,c
  5215   003496  501F               	movf	(turnLeft_90@mL+1)^0,w,c
  5216   003498  22DA               	addwfc	fsr2h,f,c
  5217   00349A  0E01               	movlw	1
  5218   00349C  6EDF               	movwf	indf2,c
  5219                           
  5220                           ;MazeRobot.X/dc_motor.c: 255:     while((mL->power < 80) || (mR->power < 80)){
  5221   00349E  EF69  F01A         	goto	l2984
  5222   0034A2                     l2978:
  5223                           
  5224                           ;MazeRobot.X/dc_motor.c: 256:         mL->power += 10;
  5225   0034A2  C01E  FFD9         	movff	turnLeft_90@mL,fsr2l
  5226   0034A6  C01F  FFDA         	movff	turnLeft_90@mL+1,fsr2h
  5227   0034AA  0E0A               	movlw	10
  5228   0034AC  26DF               	addwf	indf2,f,c
  5229                           
  5230                           ;MazeRobot.X/dc_motor.c: 257:         mR->power += 10;
  5231   0034AE  C020  FFD9         	movff	turnLeft_90@mR,fsr2l
  5232   0034B2  C021  FFDA         	movff	turnLeft_90@mR+1,fsr2h
  5233   0034B6  0E0A               	movlw	10
  5234   0034B8  26DF               	addwf	indf2,f,c
  5235   0034BA                     
  5236                           ;MazeRobot.X/dc_motor.c: 258:         setMotorPWM(mL);
  5237   0034BA  C01E  F012         	movff	turnLeft_90@mL,setMotorPWM@m
  5238   0034BE  C01F  F013         	movff	turnLeft_90@mL+1,setMotorPWM@m+1
  5239   0034C2  EC05  F018         	call	_setMotorPWM	;wreg free
  5240   0034C6                     
  5241                           ;MazeRobot.X/dc_motor.c: 259:         setMotorPWM(mR);
  5242   0034C6  C020  F012         	movff	turnLeft_90@mR,setMotorPWM@m
  5243   0034CA  C021  F013         	movff	turnLeft_90@mR+1,setMotorPWM@m+1
  5244   0034CE  EC05  F018         	call	_setMotorPWM	;wreg free
  5245   0034D2                     l2984:
  5246                           
  5247                           ;MazeRobot.X/dc_motor.c: 255:     while((mL->power < 80) || (mR->power < 80)){
  5248   0034D2  C01E  FFD9         	movff	turnLeft_90@mL,fsr2l
  5249   0034D6  C01F  FFDA         	movff	turnLeft_90@mL+1,fsr2h
  5250   0034DA  0E4F               	movlw	79
  5251   0034DC  64DF               	cpfsgt	indf2,c
  5252   0034DE  EF73  F01A         	goto	u2451
  5253   0034E2  EF75  F01A         	goto	u2450
  5254   0034E6                     u2451:
  5255   0034E6  EF51  F01A         	goto	l2978
  5256   0034EA                     u2450:
  5257   0034EA  C020  FFD9         	movff	turnLeft_90@mR,fsr2l
  5258   0034EE  C021  FFDA         	movff	turnLeft_90@mR+1,fsr2h
  5259   0034F2  0E4F               	movlw	79
  5260   0034F4  64DF               	cpfsgt	indf2,c
  5261   0034F6  EF7F  F01A         	goto	u2461
  5262   0034FA  EF81  F01A         	goto	u2460
  5263   0034FE                     u2461:
  5264   0034FE  EF51  F01A         	goto	l2978
  5265   003502                     u2460:
  5266   003502                     
  5267                           ;MazeRobot.X/dc_motor.c: 261:    _delay((unsigned long)((turning_time45)*(64000000/4000.
      +                          0)));
  5268   003502  0E10               	movlw	16
  5269   003504  6E23               	movwf	(??_turnLeft_90+1)^0,c
  5270   003506  0E2E               	movlw	46
  5271   003508  6E22               	movwf	??_turnLeft_90^0,c
  5272   00350A  0EAA               	movlw	170
  5273   00350C                     u5437:
  5274   00350C  2EE8               	decfsz	wreg,f,c
  5275   00350E  D7FE               	bra	u5437
  5276   003510  2E22               	decfsz	??_turnLeft_90^0,f,c
  5277   003512  D7FC               	bra	u5437
  5278   003514  2E23               	decfsz	(??_turnLeft_90+1)^0,f,c
  5279   003516  D7FA               	bra	u5437
  5280   003518  D000               	nop2	
  5281   00351A                     
  5282                           ;MazeRobot.X/dc_motor.c: 262:     stop(mL, mR);
  5283   00351A  C01E  F018         	movff	turnLeft_90@mL,stop@mL
  5284   00351E  C01F  F019         	movff	turnLeft_90@mL+1,stop@mL+1
  5285   003522  C020  F01A         	movff	turnLeft_90@mR,stop@mR
  5286   003526  C021  F01B         	movff	turnLeft_90@mR+1,stop@mR+1
  5287   00352A  ECDB  F01D         	call	_stop	;wreg free
  5288   00352E  0012               	return		;funcret
  5289   003530                     __end_of_turnLeft_90:
  5290                           	callstack 0
  5291                           
  5292 ;; *************** function _stop *****************
  5293 ;; Defined at:
  5294 ;;		line 115 in file "MazeRobot.X/dc_motor.c"
  5295 ;; Parameters:    Size  Location     Type
  5296 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  5297 ;;		 -> main@motorLeft(9), 
  5298 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  5299 ;;		 -> main@motorRight(9), 
  5300 ;; Auto vars:     Size  Location     Type
  5301 ;;		None
  5302 ;; Return value:  Size  Location     Type
  5303 ;;                  1    wreg      void 
  5304 ;; Registers used:
  5305 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5306 ;; Tracked objects:
  5307 ;;		On entry : 0/0
  5308 ;;		On exit  : 0/0
  5309 ;;		Unchanged: 0/0
  5310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5311 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5313 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5314 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5315 ;;Total ram usage:        6 bytes
  5316 ;; Hardware stack levels used: 1
  5317 ;; Hardware stack levels required when called: 4
  5318 ;; This function calls:
  5319 ;;		_setMotorPWM
  5320 ;; This function is called by:
  5321 ;;		_turnLeft_90
  5322 ;;		_turnRight_90
  5323 ;;		_turn_180
  5324 ;;		_turnRight_135
  5325 ;;		_turnLeft_135
  5326 ;;		_reverseSquareRight
  5327 ;;		_reverseSquareLeft
  5328 ;;		_main
  5329 ;;		_turnLeft
  5330 ;;		_turnRight
  5331 ;; This function uses a non-reentrant model
  5332 ;;
  5333                           
  5334                           	psect	text17
  5335   003BB6                     __ptext17:
  5336                           	callstack 0
  5337   003BB6                     _stop:
  5338                           	callstack 26
  5339   003BB6                     
  5340                           ;MazeRobot.X/dc_motor.c: 117:     while ((mL->power)>0 && (mR->power)>0){
  5341   003BB6  EF0D  F01E         	goto	l2886
  5342   003BBA                     l2874:
  5343                           
  5344                           ;MazeRobot.X/dc_motor.c: 118:         if ((mL->power) >0){
  5345   003BBA  C018  FFD9         	movff	stop@mL,fsr2l
  5346   003BBE  C019  FFDA         	movff	stop@mL+1,fsr2h
  5347   003BC2  50DF               	movf	indf2,w,c
  5348   003BC4  B4D8               	btfsc	status,2,c
  5349   003BC6  EFE7  F01D         	goto	u2351
  5350   003BCA  EFE9  F01D         	goto	u2350
  5351   003BCE                     u2351:
  5352   003BCE  EFEF  F01D         	goto	l2878
  5353   003BD2                     u2350:
  5354   003BD2                     
  5355                           ;MazeRobot.X/dc_motor.c: 119:             mL->power -= 5;
  5356   003BD2  C018  FFD9         	movff	stop@mL,fsr2l
  5357   003BD6  C019  FFDA         	movff	stop@mL+1,fsr2h
  5358   003BDA  0E05               	movlw	5
  5359   003BDC  5EDF               	subwf	indf2,f,c
  5360   003BDE                     l2878:
  5361                           
  5362                           ;MazeRobot.X/dc_motor.c: 121:         if ((mR->power) >0){
  5363   003BDE  C01A  FFD9         	movff	stop@mR,fsr2l
  5364   003BE2  C01B  FFDA         	movff	stop@mR+1,fsr2h
  5365   003BE6  50DF               	movf	indf2,w,c
  5366   003BE8  B4D8               	btfsc	status,2,c
  5367   003BEA  EFF9  F01D         	goto	u2361
  5368   003BEE  EFFB  F01D         	goto	u2360
  5369   003BF2                     u2361:
  5370   003BF2  EF01  F01E         	goto	l2882
  5371   003BF6                     u2360:
  5372   003BF6                     
  5373                           ;MazeRobot.X/dc_motor.c: 122:             mR->power -= 5;
  5374   003BF6  C01A  FFD9         	movff	stop@mR,fsr2l
  5375   003BFA  C01B  FFDA         	movff	stop@mR+1,fsr2h
  5376   003BFE  0E05               	movlw	5
  5377   003C00  5EDF               	subwf	indf2,f,c
  5378   003C02                     l2882:
  5379                           
  5380                           ;MazeRobot.X/dc_motor.c: 125:         setMotorPWM(mL);
  5381   003C02  C018  F012         	movff	stop@mL,setMotorPWM@m
  5382   003C06  C019  F013         	movff	stop@mL+1,setMotorPWM@m+1
  5383   003C0A  EC05  F018         	call	_setMotorPWM	;wreg free
  5384   003C0E                     
  5385                           ;MazeRobot.X/dc_motor.c: 126:         setMotorPWM(mR);
  5386   003C0E  C01A  F012         	movff	stop@mR,setMotorPWM@m
  5387   003C12  C01B  F013         	movff	stop@mR+1,setMotorPWM@m+1
  5388   003C16  EC05  F018         	call	_setMotorPWM	;wreg free
  5389   003C1A                     l2886:
  5390                           
  5391                           ;MazeRobot.X/dc_motor.c: 117:     while ((mL->power)>0 && (mR->power)>0){
  5392   003C1A  C018  FFD9         	movff	stop@mL,fsr2l
  5393   003C1E  C019  FFDA         	movff	stop@mL+1,fsr2h
  5394   003C22  50DF               	movf	indf2,w,c
  5395   003C24  B4D8               	btfsc	status,2,c
  5396   003C26  EF17  F01E         	goto	u2371
  5397   003C2A  EF19  F01E         	goto	u2370
  5398   003C2E                     u2371:
  5399   003C2E  EF25  F01E         	goto	l2890
  5400   003C32                     u2370:
  5401   003C32  C01A  FFD9         	movff	stop@mR,fsr2l
  5402   003C36  C01B  FFDA         	movff	stop@mR+1,fsr2h
  5403   003C3A  50DF               	movf	indf2,w,c
  5404   003C3C  A4D8               	btfss	status,2,c
  5405   003C3E  EF23  F01E         	goto	u2381
  5406   003C42  EF25  F01E         	goto	u2380
  5407   003C46                     u2381:
  5408   003C46  EFDD  F01D         	goto	l2874
  5409   003C4A                     u2380:
  5410   003C4A                     l2890:
  5411                           
  5412                           ;MazeRobot.X/dc_motor.c: 128:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5413   003C4A  0E09               	movlw	9
  5414   003C4C  6E1D               	movwf	(??_stop+1)^0,c
  5415   003C4E  0E1E               	movlw	30
  5416   003C50  6E1C               	movwf	??_stop^0,c
  5417   003C52  0EE4               	movlw	228
  5418   003C54                     u5447:
  5419   003C54  2EE8               	decfsz	wreg,f,c
  5420   003C56  D7FE               	bra	u5447
  5421   003C58  2E1C               	decfsz	??_stop^0,f,c
  5422   003C5A  D7FC               	bra	u5447
  5423   003C5C  2E1D               	decfsz	(??_stop+1)^0,f,c
  5424   003C5E  D7FA               	bra	u5447
  5425   003C60  D000               	nop2	
  5426   003C62  0012               	return		;funcret
  5427   003C64                     __end_of_stop:
  5428                           	callstack 0
  5429                           
  5430 ;; *************** function _reverse *****************
  5431 ;; Defined at:
  5432 ;;		line 155 in file "MazeRobot.X/dc_motor.c"
  5433 ;; Parameters:    Size  Location     Type
  5434 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  5435 ;;		 -> main@motorLeft(9), 
  5436 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  5437 ;;		 -> main@motorRight(9), 
  5438 ;; Auto vars:     Size  Location     Type
  5439 ;;		None
  5440 ;; Return value:  Size  Location     Type
  5441 ;;                  1    wreg      void 
  5442 ;; Registers used:
  5443 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5444 ;; Tracked objects:
  5445 ;;		On entry : 0/0
  5446 ;;		On exit  : 0/0
  5447 ;;		Unchanged: 0/0
  5448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5449 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5450 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5451 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5452 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5453 ;;Total ram usage:        5 bytes
  5454 ;; Hardware stack levels used: 1
  5455 ;; Hardware stack levels required when called: 4
  5456 ;; This function calls:
  5457 ;;		_setMotorPWM
  5458 ;; This function is called by:
  5459 ;;		_turnLeft_90
  5460 ;;		_turnRight_90
  5461 ;;		_turn_180
  5462 ;;		_turnRight_135
  5463 ;;		_turnLeft_135
  5464 ;;		_reverseSquareRight
  5465 ;;		_reverseSquareLeft
  5466 ;;		_turnLeft
  5467 ;;		_turnRight
  5468 ;; This function uses a non-reentrant model
  5469 ;;
  5470                           
  5471                           	psect	text18
  5472   003A0E                     __ptext18:
  5473                           	callstack 0
  5474   003A0E                     _reverse:
  5475                           	callstack 24
  5476   003A0E                     
  5477                           ;MazeRobot.X/dc_motor.c: 155: void reverse(DC_motor *mL, DC_motor *mR);MazeRobot.X/dc_mo
      +                          tor.c: 156: {;MazeRobot.X/dc_motor.c: 157:     mL->direction = 0;
  5478   003A0E  EE20 F001          	lfsr	2,1
  5479   003A12  5018               	movf	reverse@mL^0,w,c
  5480   003A14  26D9               	addwf	fsr2l,f,c
  5481   003A16  5019               	movf	(reverse@mL+1)^0,w,c
  5482   003A18  22DA               	addwfc	fsr2h,f,c
  5483   003A1A  0E00               	movlw	0
  5484   003A1C  6EDF               	movwf	indf2,c
  5485                           
  5486                           ;MazeRobot.X/dc_motor.c: 158:     mR->direction = 0;
  5487   003A1E  EE20 F001          	lfsr	2,1
  5488   003A22  501A               	movf	reverse@mR^0,w,c
  5489   003A24  26D9               	addwf	fsr2l,f,c
  5490   003A26  501B               	movf	(reverse@mR+1)^0,w,c
  5491   003A28  22DA               	addwfc	fsr2h,f,c
  5492   003A2A  0E00               	movlw	0
  5493   003A2C  6EDF               	movwf	indf2,c
  5494                           
  5495                           ;MazeRobot.X/dc_motor.c: 160:     mL->brakemode = 1;
  5496   003A2E  EE20 F002          	lfsr	2,2
  5497   003A32  5018               	movf	reverse@mL^0,w,c
  5498   003A34  26D9               	addwf	fsr2l,f,c
  5499   003A36  5019               	movf	(reverse@mL+1)^0,w,c
  5500   003A38  22DA               	addwfc	fsr2h,f,c
  5501   003A3A  0E01               	movlw	1
  5502   003A3C  6EDF               	movwf	indf2,c
  5503                           
  5504                           ;MazeRobot.X/dc_motor.c: 161:     mL->brakemode = 1;
  5505   003A3E  EE20 F002          	lfsr	2,2
  5506   003A42  5018               	movf	reverse@mL^0,w,c
  5507   003A44  26D9               	addwf	fsr2l,f,c
  5508   003A46  5019               	movf	(reverse@mL+1)^0,w,c
  5509   003A48  22DA               	addwfc	fsr2h,f,c
  5510   003A4A  0E01               	movlw	1
  5511   003A4C  6EDF               	movwf	indf2,c
  5512                           
  5513                           ;MazeRobot.X/dc_motor.c: 163:     while ((mL->power)<25 && (mR->power)<25){
  5514   003A4E  EF4D  F01D         	goto	l2902
  5515   003A52                     l2894:
  5516                           
  5517                           ;MazeRobot.X/dc_motor.c: 164:         if ((mL->power) < 25){
  5518   003A52  C018  FFD9         	movff	reverse@mL,fsr2l
  5519   003A56  C019  FFDA         	movff	reverse@mL+1,fsr2h
  5520   003A5A  0E19               	movlw	25
  5521   003A5C  60DF               	cpfslt	indf2,c
  5522   003A5E  EF33  F01D         	goto	u2391
  5523   003A62  EF35  F01D         	goto	u2390
  5524   003A66                     u2391:
  5525   003A66  EF3B  F01D         	goto	l2898
  5526   003A6A                     u2390:
  5527   003A6A                     
  5528                           ;MazeRobot.X/dc_motor.c: 165:             mL->power += 5;
  5529   003A6A  C018  FFD9         	movff	reverse@mL,fsr2l
  5530   003A6E  C019  FFDA         	movff	reverse@mL+1,fsr2h
  5531   003A72  0E05               	movlw	5
  5532   003A74  26DF               	addwf	indf2,f,c
  5533   003A76                     l2898:
  5534                           
  5535                           ;MazeRobot.X/dc_motor.c: 167:         if ((mR->power) <25){
  5536   003A76  C01A  FFD9         	movff	reverse@mR,fsr2l
  5537   003A7A  C01B  FFDA         	movff	reverse@mR+1,fsr2h
  5538   003A7E  0E19               	movlw	25
  5539   003A80  60DF               	cpfslt	indf2,c
  5540   003A82  EF45  F01D         	goto	u2401
  5541   003A86  EF47  F01D         	goto	u2400
  5542   003A8A                     u2401:
  5543   003A8A  EF4D  F01D         	goto	l2902
  5544   003A8E                     u2400:
  5545   003A8E                     
  5546                           ;MazeRobot.X/dc_motor.c: 168:             mR->power += 5;
  5547   003A8E  C01A  FFD9         	movff	reverse@mR,fsr2l
  5548   003A92  C01B  FFDA         	movff	reverse@mR+1,fsr2h
  5549   003A96  0E05               	movlw	5
  5550   003A98  26DF               	addwf	indf2,f,c
  5551   003A9A                     l2902:
  5552                           
  5553                           ;MazeRobot.X/dc_motor.c: 163:     while ((mL->power)<25 && (mR->power)<25){
  5554   003A9A  C018  FFD9         	movff	reverse@mL,fsr2l
  5555   003A9E  C019  FFDA         	movff	reverse@mL+1,fsr2h
  5556   003AA2  0E19               	movlw	25
  5557   003AA4  60DF               	cpfslt	indf2,c
  5558   003AA6  EF57  F01D         	goto	u2411
  5559   003AAA  EF59  F01D         	goto	u2410
  5560   003AAE                     u2411:
  5561   003AAE  EF65  F01D         	goto	l2906
  5562   003AB2                     u2410:
  5563   003AB2  C01A  FFD9         	movff	reverse@mR,fsr2l
  5564   003AB6  C01B  FFDA         	movff	reverse@mR+1,fsr2h
  5565   003ABA  0E18               	movlw	24
  5566   003ABC  64DF               	cpfsgt	indf2,c
  5567   003ABE  EF63  F01D         	goto	u2421
  5568   003AC2  EF65  F01D         	goto	u2420
  5569   003AC6                     u2421:
  5570   003AC6  EF29  F01D         	goto	l2894
  5571   003ACA                     u2420:
  5572   003ACA                     l2906:
  5573                           
  5574                           ;MazeRobot.X/dc_motor.c: 172:     setMotorPWM(mL);
  5575   003ACA  C018  F012         	movff	reverse@mL,setMotorPWM@m
  5576   003ACE  C019  F013         	movff	reverse@mL+1,setMotorPWM@m+1
  5577   003AD2  EC05  F018         	call	_setMotorPWM	;wreg free
  5578                           
  5579                           ;MazeRobot.X/dc_motor.c: 173:     setMotorPWM(mR);
  5580   003AD6  C01A  F012         	movff	reverse@mR,setMotorPWM@m
  5581   003ADA  C01B  F013         	movff	reverse@mR+1,setMotorPWM@m+1
  5582   003ADE  EC05  F018         	call	_setMotorPWM	;wreg free
  5583   003AE2  0012               	return		;funcret
  5584   003AE4                     __end_of_reverse:
  5585                           	callstack 0
  5586                           
  5587 ;; *************** function _setMotorPWM *****************
  5588 ;; Defined at:
  5589 ;;		line 92 in file "MazeRobot.X/dc_motor.c"
  5590 ;; Parameters:    Size  Location     Type
  5591 ;;  m               2   17[COMRAM] PTR struct DC_motor
  5592 ;;		 -> main@motorRight(9), main@motorLeft(9), 
  5593 ;; Auto vars:     Size  Location     Type
  5594 ;;  negDuty         1   22[COMRAM] unsigned char 
  5595 ;;  posDuty         1   21[COMRAM] unsigned char 
  5596 ;; Return value:  Size  Location     Type
  5597 ;;                  1    wreg      void 
  5598 ;; Registers used:
  5599 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5600 ;; Tracked objects:
  5601 ;;		On entry : 0/0
  5602 ;;		On exit  : 0/0
  5603 ;;		Unchanged: 0/0
  5604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5605 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5606 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5607 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5608 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5609 ;;Total ram usage:        6 bytes
  5610 ;; Hardware stack levels used: 1
  5611 ;; Hardware stack levels required when called: 3
  5612 ;; This function calls:
  5613 ;;		___lwdiv
  5614 ;;		___wmul
  5615 ;; This function is called by:
  5616 ;;		_stop
  5617 ;;		_forward
  5618 ;;		_reverse
  5619 ;;		_turnLeft_90
  5620 ;;		_turnRight_90
  5621 ;;		_turn_180
  5622 ;;		_turnRight_135
  5623 ;;		_turnLeft_135
  5624 ;;		_turnLeft
  5625 ;;		_turnRight
  5626 ;; This function uses a non-reentrant model
  5627 ;;
  5628                           
  5629                           	psect	text19
  5630   00300A                     __ptext19:
  5631                           	callstack 0
  5632   00300A                     _setMotorPWM:
  5633                           	callstack 26
  5634   00300A                     
  5635                           ;MazeRobot.X/dc_motor.c: 92: void setMotorPWM(DC_motor *m);MazeRobot.X/dc_motor.c: 93: {
      +                          ;MazeRobot.X/dc_motor.c: 94:     unsigned char posDuty, negDuty;;MazeRobot.X/dc_motor.c:
      +                           96:     if(m->brakemode) {
  5636   00300A  EE20 F002          	lfsr	2,2
  5637   00300E  5012               	movf	setMotorPWM@m^0,w,c
  5638   003010  26D9               	addwf	fsr2l,f,c
  5639   003012  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5640   003014  22DA               	addwfc	fsr2h,f,c
  5641   003016  50DF               	movf	indf2,w,c
  5642   003018  B4D8               	btfsc	status,2,c
  5643   00301A  EF11  F018         	goto	u2291
  5644   00301E  EF13  F018         	goto	u2290
  5645   003022                     u2291:
  5646   003022  EF47  F018         	goto	l2828
  5647   003026                     u2290:
  5648   003026                     
  5649                           ;MazeRobot.X/dc_motor.c: 97:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m
      +                          ->PWMperiod))/100;
  5650   003026  C012  FFD9         	movff	setMotorPWM@m,fsr2l
  5651   00302A  C013  FFDA         	movff	setMotorPWM@m+1,fsr2h
  5652   00302E  50DF               	movf	indf2,w,c
  5653   003030  6E14               	movwf	??_setMotorPWM^0,c
  5654   003032  5014               	movf	??_setMotorPWM^0,w,c
  5655   003034  6E05               	movwf	___wmul@multiplier^0,c
  5656   003036  6A06               	clrf	(___wmul@multiplier+1)^0,c
  5657   003038  EE20 F003          	lfsr	2,3
  5658   00303C  5012               	movf	setMotorPWM@m^0,w,c
  5659   00303E  26D9               	addwf	fsr2l,f,c
  5660   003040  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5661   003042  22DA               	addwfc	fsr2h,f,c
  5662   003044  CFDE F007          	movff	postinc2,___wmul@multiplicand
  5663   003048  CFDD F008          	movff	postdec2,___wmul@multiplicand+1
  5664   00304C  EC07  F021         	call	___wmul	;wreg free
  5665   003050  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  5666   003054  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  5667   003058  0E00               	movlw	0
  5668   00305A  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  5669   00305C  0E64               	movlw	100
  5670   00305E  6E0D               	movwf	___lwdiv@divisor^0,c
  5671   003060  EC10  F01F         	call	___lwdiv	;wreg free
  5672   003064  EE20 F003          	lfsr	2,3
  5673   003068  5012               	movf	setMotorPWM@m^0,w,c
  5674   00306A  26D9               	addwf	fsr2l,f,c
  5675   00306C  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5676   00306E  22DA               	addwfc	fsr2h,f,c
  5677   003070  50DF               	movf	indf2,w,c
  5678   003072  6E15               	movwf	(??_setMotorPWM+1)^0,c
  5679   003074  500B               	movf	?___lwdiv^0,w,c
  5680   003076  5C15               	subwf	(??_setMotorPWM+1)^0,w,c
  5681   003078  6E16               	movwf	setMotorPWM@posDuty^0,c
  5682   00307A                     
  5683                           ;MazeRobot.X/dc_motor.c: 98:         negDuty=m->PWMperiod;
  5684   00307A  EE20 F003          	lfsr	2,3
  5685   00307E  5012               	movf	setMotorPWM@m^0,w,c
  5686   003080  26D9               	addwf	fsr2l,f,c
  5687   003082  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5688   003084  22DA               	addwfc	fsr2h,f,c
  5689   003086  50DF               	movf	indf2,w,c
  5690   003088  6E17               	movwf	setMotorPWM@negDuty^0,c
  5691                           
  5692                           ;MazeRobot.X/dc_motor.c: 99:     }
  5693   00308A  EF6A  F018         	goto	l2832
  5694   00308E                     l2828:
  5695                           
  5696                           ;MazeRobot.X/dc_motor.c: 101:         posDuty=0;
  5697   00308E  0E00               	movlw	0
  5698   003090  6E16               	movwf	setMotorPWM@posDuty^0,c
  5699   003092                     
  5700                           ;MazeRobot.X/dc_motor.c: 102:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  5701   003092  C012  FFD9         	movff	setMotorPWM@m,fsr2l
  5702   003096  C013  FFDA         	movff	setMotorPWM@m+1,fsr2h
  5703   00309A  50DF               	movf	indf2,w,c
  5704   00309C  6E14               	movwf	??_setMotorPWM^0,c
  5705   00309E  5014               	movf	??_setMotorPWM^0,w,c
  5706   0030A0  6E05               	movwf	___wmul@multiplier^0,c
  5707   0030A2  6A06               	clrf	(___wmul@multiplier+1)^0,c
  5708   0030A4  EE20 F003          	lfsr	2,3
  5709   0030A8  5012               	movf	setMotorPWM@m^0,w,c
  5710   0030AA  26D9               	addwf	fsr2l,f,c
  5711   0030AC  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5712   0030AE  22DA               	addwfc	fsr2h,f,c
  5713   0030B0  CFDE F007          	movff	postinc2,___wmul@multiplicand
  5714   0030B4  CFDD F008          	movff	postdec2,___wmul@multiplicand+1
  5715   0030B8  EC07  F021         	call	___wmul	;wreg free
  5716   0030BC  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  5717   0030C0  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  5718   0030C4  0E00               	movlw	0
  5719   0030C6  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  5720   0030C8  0E64               	movlw	100
  5721   0030CA  6E0D               	movwf	___lwdiv@divisor^0,c
  5722   0030CC  EC10  F01F         	call	___lwdiv	;wreg free
  5723   0030D0  500B               	movf	?___lwdiv^0,w,c
  5724   0030D2  6E17               	movwf	setMotorPWM@negDuty^0,c
  5725   0030D4                     l2832:
  5726                           
  5727                           ;MazeRobot.X/dc_motor.c: 105:     if (m->direction) {
  5728   0030D4  EE20 F001          	lfsr	2,1
  5729   0030D8  5012               	movf	setMotorPWM@m^0,w,c
  5730   0030DA  26D9               	addwf	fsr2l,f,c
  5731   0030DC  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5732   0030DE  22DA               	addwfc	fsr2h,f,c
  5733   0030E0  50DF               	movf	indf2,w,c
  5734   0030E2  B4D8               	btfsc	status,2,c
  5735   0030E4  EF76  F018         	goto	u2301
  5736   0030E8  EF78  F018         	goto	u2300
  5737   0030EC                     u2301:
  5738   0030EC  EF9A  F018         	goto	l2836
  5739   0030F0                     u2300:
  5740   0030F0                     
  5741                           ;MazeRobot.X/dc_motor.c: 106:         *(m->posDutyHighByte)=posDuty;
  5742   0030F0  EE20 F005          	lfsr	2,5
  5743   0030F4  5012               	movf	setMotorPWM@m^0,w,c
  5744   0030F6  26D9               	addwf	fsr2l,f,c
  5745   0030F8  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5746   0030FA  22DA               	addwfc	fsr2h,f,c
  5747   0030FC  CFDE F014          	movff	postinc2,??_setMotorPWM
  5748   003100  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  5749   003104  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  5750   003108  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5751   00310C  C016  FFDF         	movff	setMotorPWM@posDuty,indf2
  5752                           
  5753                           ;MazeRobot.X/dc_motor.c: 107:         *(m->negDutyHighByte)=negDuty;
  5754   003110  EE20 F007          	lfsr	2,7
  5755   003114  5012               	movf	setMotorPWM@m^0,w,c
  5756   003116  26D9               	addwf	fsr2l,f,c
  5757   003118  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5758   00311A  22DA               	addwfc	fsr2h,f,c
  5759   00311C  CFDE F014          	movff	postinc2,??_setMotorPWM
  5760   003120  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  5761   003124  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  5762   003128  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5763   00312C  C017  FFDF         	movff	setMotorPWM@negDuty,indf2
  5764                           
  5765                           ;MazeRobot.X/dc_motor.c: 108:     } else {
  5766   003130  EFBA  F018         	goto	l195
  5767   003134                     l2836:
  5768                           
  5769                           ;MazeRobot.X/dc_motor.c: 109:         *(m->posDutyHighByte)=negDuty;
  5770   003134  EE20 F005          	lfsr	2,5
  5771   003138  5012               	movf	setMotorPWM@m^0,w,c
  5772   00313A  26D9               	addwf	fsr2l,f,c
  5773   00313C  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5774   00313E  22DA               	addwfc	fsr2h,f,c
  5775   003140  CFDE F014          	movff	postinc2,??_setMotorPWM
  5776   003144  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  5777   003148  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  5778   00314C  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5779   003150  C017  FFDF         	movff	setMotorPWM@negDuty,indf2
  5780                           
  5781                           ;MazeRobot.X/dc_motor.c: 110:         *(m->negDutyHighByte)=posDuty;
  5782   003154  EE20 F007          	lfsr	2,7
  5783   003158  5012               	movf	setMotorPWM@m^0,w,c
  5784   00315A  26D9               	addwf	fsr2l,f,c
  5785   00315C  5013               	movf	(setMotorPWM@m+1)^0,w,c
  5786   00315E  22DA               	addwfc	fsr2h,f,c
  5787   003160  CFDE F014          	movff	postinc2,??_setMotorPWM
  5788   003164  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  5789   003168  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  5790   00316C  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5791   003170  C016  FFDF         	movff	setMotorPWM@posDuty,indf2
  5792   003174                     l195:
  5793   003174  0012               	return		;funcret
  5794   003176                     __end_of_setMotorPWM:
  5795                           	callstack 0
  5796                           
  5797 ;; *************** function ___wmul *****************
  5798 ;; Defined at:
  5799 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  5800 ;; Parameters:    Size  Location     Type
  5801 ;;  multiplier      2    4[COMRAM] unsigned int 
  5802 ;;  multiplicand    2    6[COMRAM] unsigned int 
  5803 ;; Auto vars:     Size  Location     Type
  5804 ;;  product         2    8[COMRAM] unsigned int 
  5805 ;; Return value:  Size  Location     Type
  5806 ;;                  2    4[COMRAM] unsigned int 
  5807 ;; Registers used:
  5808 ;;		wreg, status,2, status,0, prodl, prodh
  5809 ;; Tracked objects:
  5810 ;;		On entry : 0/0
  5811 ;;		On exit  : 0/0
  5812 ;;		Unchanged: 0/0
  5813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5814 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5815 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5817 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5818 ;;Total ram usage:        6 bytes
  5819 ;; Hardware stack levels used: 1
  5820 ;; Hardware stack levels required when called: 2
  5821 ;; This function calls:
  5822 ;;		Nothing
  5823 ;; This function is called by:
  5824 ;;		_setMotorPWM
  5825 ;;		_turnLeft_135
  5826 ;; This function uses a non-reentrant model
  5827 ;;
  5828                           
  5829                           	psect	text20
  5830   00420E                     __ptext20:
  5831                           	callstack 0
  5832   00420E                     ___wmul:
  5833                           	callstack 26
  5834   00420E  5005               	movf	___wmul@multiplier^0,w,c
  5835   004210  0207               	mulwf	___wmul@multiplicand^0,c
  5836   004212  CFF3 F009          	movff	prodl,___wmul@product
  5837   004216  CFF4 F00A          	movff	prodh,___wmul@product+1
  5838   00421A  5005               	movf	___wmul@multiplier^0,w,c
  5839   00421C  0208               	mulwf	(___wmul@multiplicand+1)^0,c
  5840   00421E  50F3               	movf	243,w,c
  5841   004220  260A               	addwf	(___wmul@product+1)^0,f,c
  5842   004222  5006               	movf	(___wmul@multiplier+1)^0,w,c
  5843   004224  0207               	mulwf	___wmul@multiplicand^0,c
  5844   004226  50F3               	movf	243,w,c
  5845   004228  260A               	addwf	(___wmul@product+1)^0,f,c
  5846   00422A  C009  F005         	movff	___wmul@product,?___wmul
  5847   00422E  C00A  F006         	movff	___wmul@product+1,?___wmul+1
  5848   004232  0012               	return		;funcret
  5849   004234                     __end_of___wmul:
  5850                           	callstack 0
  5851                           
  5852 ;; *************** function ___lwdiv *****************
  5853 ;; Defined at:
  5854 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  5855 ;; Parameters:    Size  Location     Type
  5856 ;;  dividend        2   10[COMRAM] unsigned int 
  5857 ;;  divisor         2   12[COMRAM] unsigned int 
  5858 ;; Auto vars:     Size  Location     Type
  5859 ;;  quotient        2   14[COMRAM] unsigned int 
  5860 ;;  counter         1   16[COMRAM] unsigned char 
  5861 ;; Return value:  Size  Location     Type
  5862 ;;                  2   10[COMRAM] unsigned int 
  5863 ;; Registers used:
  5864 ;;		wreg, status,2, status,0
  5865 ;; Tracked objects:
  5866 ;;		On entry : 0/0
  5867 ;;		On exit  : 0/0
  5868 ;;		Unchanged: 0/0
  5869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5870 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5871 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5873 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5874 ;;Total ram usage:        7 bytes
  5875 ;; Hardware stack levels used: 1
  5876 ;; Hardware stack levels required when called: 2
  5877 ;; This function calls:
  5878 ;;		Nothing
  5879 ;; This function is called by:
  5880 ;;		_setMotorPWM
  5881 ;; This function uses a non-reentrant model
  5882 ;;
  5883                           
  5884                           	psect	text21
  5885   003E20                     __ptext21:
  5886                           	callstack 0
  5887   003E20                     ___lwdiv:
  5888                           	callstack 26
  5889   003E20  0E00               	movlw	0
  5890   003E22  6E10               	movwf	(___lwdiv@quotient+1)^0,c
  5891   003E24  0E00               	movlw	0
  5892   003E26  6E0F               	movwf	___lwdiv@quotient^0,c
  5893   003E28  500D               	movf	___lwdiv@divisor^0,w,c
  5894   003E2A  100E               	iorwf	(___lwdiv@divisor+1)^0,w,c
  5895   003E2C  B4D8               	btfsc	status,2,c
  5896   003E2E  EF1B  F01F         	goto	u2261
  5897   003E32  EF1D  F01F         	goto	u2260
  5898   003E36                     u2261:
  5899   003E36  EF45  F01F         	goto	l1035
  5900   003E3A                     u2260:
  5901   003E3A  0E01               	movlw	1
  5902   003E3C  6E11               	movwf	___lwdiv@counter^0,c
  5903   003E3E  EF25  F01F         	goto	l2808
  5904   003E42                     l2806:
  5905   003E42  90D8               	bcf	status,0,c
  5906   003E44  360D               	rlcf	___lwdiv@divisor^0,f,c
  5907   003E46  360E               	rlcf	(___lwdiv@divisor+1)^0,f,c
  5908   003E48  2A11               	incf	___lwdiv@counter^0,f,c
  5909   003E4A                     l2808:
  5910   003E4A  AE0E               	btfss	(___lwdiv@divisor+1)^0,7,c
  5911   003E4C  EF2A  F01F         	goto	u2271
  5912   003E50  EF2C  F01F         	goto	u2270
  5913   003E54                     u2271:
  5914   003E54  EF21  F01F         	goto	l2806
  5915   003E58                     u2270:
  5916   003E58                     l2810:
  5917   003E58  90D8               	bcf	status,0,c
  5918   003E5A  360F               	rlcf	___lwdiv@quotient^0,f,c
  5919   003E5C  3610               	rlcf	(___lwdiv@quotient+1)^0,f,c
  5920   003E5E  500D               	movf	___lwdiv@divisor^0,w,c
  5921   003E60  5C0B               	subwf	___lwdiv@dividend^0,w,c
  5922   003E62  500E               	movf	(___lwdiv@divisor+1)^0,w,c
  5923   003E64  580C               	subwfb	(___lwdiv@dividend+1)^0,w,c
  5924   003E66  A0D8               	btfss	status,0,c
  5925   003E68  EF38  F01F         	goto	u2281
  5926   003E6C  EF3A  F01F         	goto	u2280
  5927   003E70                     u2281:
  5928   003E70  EF3F  F01F         	goto	l2818
  5929   003E74                     u2280:
  5930   003E74  500D               	movf	___lwdiv@divisor^0,w,c
  5931   003E76  5E0B               	subwf	___lwdiv@dividend^0,f,c
  5932   003E78  500E               	movf	(___lwdiv@divisor+1)^0,w,c
  5933   003E7A  5A0C               	subwfb	(___lwdiv@dividend+1)^0,f,c
  5934   003E7C  800F               	bsf	___lwdiv@quotient^0,0,c
  5935   003E7E                     l2818:
  5936   003E7E  90D8               	bcf	status,0,c
  5937   003E80  320E               	rrcf	(___lwdiv@divisor+1)^0,f,c
  5938   003E82  320D               	rrcf	___lwdiv@divisor^0,f,c
  5939   003E84  2E11               	decfsz	___lwdiv@counter^0,f,c
  5940   003E86  EF2C  F01F         	goto	l2810
  5941   003E8A                     l1035:
  5942   003E8A  C00F  F00B         	movff	___lwdiv@quotient,?___lwdiv
  5943   003E8E  C010  F00C         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5944   003E92  0012               	return		;funcret
  5945   003E94                     __end_of___lwdiv:
  5946                           	callstack 0
  5947                           
  5948 ;; *************** function ___xxtofl *****************
  5949 ;; Defined at:
  5950 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\xxtofl.c"
  5951 ;; Parameters:    Size  Location     Type
  5952 ;;  sign            1    wreg     unsigned char 
  5953 ;;  val             4    4[COMRAM] long 
  5954 ;; Auto vars:     Size  Location     Type
  5955 ;;  sign            1   12[COMRAM] unsigned char 
  5956 ;;  arg             4   14[COMRAM] unsigned long 
  5957 ;;  exp             1   13[COMRAM] unsigned char 
  5958 ;; Return value:  Size  Location     Type
  5959 ;;                  4    4[COMRAM] unsigned char 
  5960 ;; Registers used:
  5961 ;;		wreg, status,2, status,0
  5962 ;; Tracked objects:
  5963 ;;		On entry : 0/0
  5964 ;;		On exit  : 0/0
  5965 ;;		Unchanged: 0/0
  5966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5967 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5968 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5969 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5970 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5971 ;;Total ram usage:       14 bytes
  5972 ;; Hardware stack levels used: 1
  5973 ;; Hardware stack levels required when called: 2
  5974 ;; This function calls:
  5975 ;;		Nothing
  5976 ;; This function is called by:
  5977 ;;		_colorDetect
  5978 ;;		_turnLeft_90
  5979 ;;		_turnRight_90
  5980 ;;		_turn_180
  5981 ;;		_turnRight_135
  5982 ;;		_turnLeft_135
  5983 ;;		_reverseSquareRight
  5984 ;;		_reverseSquareLeft
  5985 ;;		_main
  5986 ;;		_turnLeft
  5987 ;;		_turnRight
  5988 ;; This function uses a non-reentrant model
  5989 ;;
  5990                           
  5991                           	psect	text22
  5992   002CDC                     __ptext22:
  5993                           	callstack 0
  5994   002CDC                     ___xxtofl:
  5995                           	callstack 27
  5996                           
  5997                           ;incstack = 0
  5998                           ;___xxtofl@sign stored from wreg
  5999   002CDC  6E0D               	movwf	___xxtofl@sign^0,c
  6000   002CDE  500D               	movf	___xxtofl@sign^0,w,c
  6001   002CE0  B4D8               	btfsc	status,2,c
  6002   002CE2  EF75  F016         	goto	u3451
  6003   002CE6  EF77  F016         	goto	u3450
  6004   002CEA                     u3451:
  6005   002CEA  EF99  F016         	goto	l1199
  6006   002CEE                     u3450:
  6007   002CEE  BE08               	btfsc	(___xxtofl@val+3)^0,7,c
  6008   002CF0  EF7E  F016         	goto	u3460
  6009   002CF4  EF7C  F016         	goto	u3461
  6010   002CF8                     u3461:
  6011   002CF8  EF99  F016         	goto	l1199
  6012   002CFC                     u3460:
  6013   002CFC  C005  F009         	movff	___xxtofl@val,??___xxtofl
  6014   002D00  C006  F00A         	movff	___xxtofl@val+1,??___xxtofl+1
  6015   002D04  C007  F00B         	movff	___xxtofl@val+2,??___xxtofl+2
  6016   002D08  C008  F00C         	movff	___xxtofl@val+3,??___xxtofl+3
  6017   002D0C  1E09               	comf	??___xxtofl^0,f,c
  6018   002D0E  1E0A               	comf	(??___xxtofl+1)^0,f,c
  6019   002D10  1E0B               	comf	(??___xxtofl+2)^0,f,c
  6020   002D12  1E0C               	comf	(??___xxtofl+3)^0,f,c
  6021   002D14  2A09               	incf	??___xxtofl^0,f,c
  6022   002D16  0E00               	movlw	0
  6023   002D18  220A               	addwfc	(??___xxtofl+1)^0,f,c
  6024   002D1A  220B               	addwfc	(??___xxtofl+2)^0,f,c
  6025   002D1C  220C               	addwfc	(??___xxtofl+3)^0,f,c
  6026   002D1E  C009  F00F         	movff	??___xxtofl,___xxtofl@arg
  6027   002D22  C00A  F010         	movff	??___xxtofl+1,___xxtofl@arg+1
  6028   002D26  C00B  F011         	movff	??___xxtofl+2,___xxtofl@arg+2
  6029   002D2A  C00C  F012         	movff	??___xxtofl+3,___xxtofl@arg+3
  6030   002D2E  EFA1  F016         	goto	l3662
  6031   002D32                     l1199:
  6032   002D32  C005  F00F         	movff	___xxtofl@val,___xxtofl@arg
  6033   002D36  C006  F010         	movff	___xxtofl@val+1,___xxtofl@arg+1
  6034   002D3A  C007  F011         	movff	___xxtofl@val+2,___xxtofl@arg+2
  6035   002D3E  C008  F012         	movff	___xxtofl@val+3,___xxtofl@arg+3
  6036   002D42                     l3662:
  6037   002D42  5005               	movf	___xxtofl@val^0,w,c
  6038   002D44  1006               	iorwf	(___xxtofl@val+1)^0,w,c
  6039   002D46  1007               	iorwf	(___xxtofl@val+2)^0,w,c
  6040   002D48  1008               	iorwf	(___xxtofl@val+3)^0,w,c
  6041   002D4A  A4D8               	btfss	status,2,c
  6042   002D4C  EFAA  F016         	goto	u3471
  6043   002D50  EFAC  F016         	goto	u3470
  6044   002D54                     u3471:
  6045   002D54  EFB6  F016         	goto	l3668
  6046   002D58                     u3470:
  6047   002D58  0E00               	movlw	0
  6048   002D5A  6E05               	movwf	?___xxtofl^0,c
  6049   002D5C  0E00               	movlw	0
  6050   002D5E  6E06               	movwf	(?___xxtofl+1)^0,c
  6051   002D60  0E00               	movlw	0
  6052   002D62  6E07               	movwf	(?___xxtofl+2)^0,c
  6053   002D64  0E00               	movlw	0
  6054   002D66  6E08               	movwf	(?___xxtofl+3)^0,c
  6055   002D68  EF47  F017         	goto	l1202
  6056   002D6C                     l3668:
  6057   002D6C  0E96               	movlw	150
  6058   002D6E  6E0E               	movwf	___xxtofl@exp^0,c
  6059   002D70  EFC0  F016         	goto	l3672
  6060   002D74                     l3670:
  6061   002D74  2A0E               	incf	___xxtofl@exp^0,f,c
  6062   002D76  90D8               	bcf	status,0,c
  6063   002D78  3212               	rrcf	(___xxtofl@arg+3)^0,f,c
  6064   002D7A  3211               	rrcf	(___xxtofl@arg+2)^0,f,c
  6065   002D7C  3210               	rrcf	(___xxtofl@arg+1)^0,f,c
  6066   002D7E  320F               	rrcf	___xxtofl@arg^0,f,c
  6067   002D80                     l3672:
  6068   002D80  0E00               	movlw	0
  6069   002D82  140F               	andwf	___xxtofl@arg^0,w,c
  6070   002D84  6E09               	movwf	??___xxtofl^0,c
  6071   002D86  0E00               	movlw	0
  6072   002D88  1410               	andwf	(___xxtofl@arg+1)^0,w,c
  6073   002D8A  6E0A               	movwf	(??___xxtofl+1)^0,c
  6074   002D8C  0E00               	movlw	0
  6075   002D8E  1411               	andwf	(___xxtofl@arg+2)^0,w,c
  6076   002D90  6E0B               	movwf	(??___xxtofl+2)^0,c
  6077   002D92  0EFE               	movlw	254
  6078   002D94  1412               	andwf	(___xxtofl@arg+3)^0,w,c
  6079   002D96  6E0C               	movwf	(??___xxtofl+3)^0,c
  6080   002D98  5009               	movf	??___xxtofl^0,w,c
  6081   002D9A  100A               	iorwf	(??___xxtofl+1)^0,w,c
  6082   002D9C  100B               	iorwf	(??___xxtofl+2)^0,w,c
  6083   002D9E  100C               	iorwf	(??___xxtofl+3)^0,w,c
  6084   002DA0  A4D8               	btfss	status,2,c
  6085   002DA2  EFD5  F016         	goto	u3481
  6086   002DA6  EFD7  F016         	goto	u3480
  6087   002DAA                     u3481:
  6088   002DAA  EFBA  F016         	goto	l3670
  6089   002DAE                     u3480:
  6090   002DAE  EFE5  F016         	goto	l1206
  6091   002DB2                     l3674:
  6092   002DB2  2A0E               	incf	___xxtofl@exp^0,f,c
  6093   002DB4  0E01               	movlw	1
  6094   002DB6  260F               	addwf	___xxtofl@arg^0,f,c
  6095   002DB8  0E00               	movlw	0
  6096   002DBA  2210               	addwfc	(___xxtofl@arg+1)^0,f,c
  6097   002DBC  2211               	addwfc	(___xxtofl@arg+2)^0,f,c
  6098   002DBE  2212               	addwfc	(___xxtofl@arg+3)^0,f,c
  6099   002DC0  90D8               	bcf	status,0,c
  6100   002DC2  3212               	rrcf	(___xxtofl@arg+3)^0,f,c
  6101   002DC4  3211               	rrcf	(___xxtofl@arg+2)^0,f,c
  6102   002DC6  3210               	rrcf	(___xxtofl@arg+1)^0,f,c
  6103   002DC8  320F               	rrcf	___xxtofl@arg^0,f,c
  6104   002DCA                     l1206:
  6105   002DCA  0E00               	movlw	0
  6106   002DCC  140F               	andwf	___xxtofl@arg^0,w,c
  6107   002DCE  6E09               	movwf	??___xxtofl^0,c
  6108   002DD0  0E00               	movlw	0
  6109   002DD2  1410               	andwf	(___xxtofl@arg+1)^0,w,c
  6110   002DD4  6E0A               	movwf	(??___xxtofl+1)^0,c
  6111   002DD6  0E00               	movlw	0
  6112   002DD8  1411               	andwf	(___xxtofl@arg+2)^0,w,c
  6113   002DDA  6E0B               	movwf	(??___xxtofl+2)^0,c
  6114   002DDC  0EFF               	movlw	255
  6115   002DDE  1412               	andwf	(___xxtofl@arg+3)^0,w,c
  6116   002DE0  6E0C               	movwf	(??___xxtofl+3)^0,c
  6117   002DE2  5009               	movf	??___xxtofl^0,w,c
  6118   002DE4  100A               	iorwf	(??___xxtofl+1)^0,w,c
  6119   002DE6  100B               	iorwf	(??___xxtofl+2)^0,w,c
  6120   002DE8  100C               	iorwf	(??___xxtofl+3)^0,w,c
  6121   002DEA  A4D8               	btfss	status,2,c
  6122   002DEC  EFFA  F016         	goto	u3491
  6123   002DF0  EFFC  F016         	goto	u3490
  6124   002DF4                     u3491:
  6125   002DF4  EFD9  F016         	goto	l3674
  6126   002DF8                     u3490:
  6127   002DF8  EF04  F017         	goto	l3682
  6128   002DFC                     l3680:
  6129   002DFC  060E               	decf	___xxtofl@exp^0,f,c
  6130   002DFE  90D8               	bcf	status,0,c
  6131   002E00  360F               	rlcf	___xxtofl@arg^0,f,c
  6132   002E02  3610               	rlcf	(___xxtofl@arg+1)^0,f,c
  6133   002E04  3611               	rlcf	(___xxtofl@arg+2)^0,f,c
  6134   002E06  3612               	rlcf	(___xxtofl@arg+3)^0,f,c
  6135   002E08                     l3682:
  6136   002E08  BE11               	btfsc	(___xxtofl@arg+2)^0,7,c
  6137   002E0A  EF09  F017         	goto	u3501
  6138   002E0E  EF0B  F017         	goto	u3500
  6139   002E12                     u3501:
  6140   002E12  EF13  F017         	goto	l1213
  6141   002E16                     u3500:
  6142   002E16  0E02               	movlw	2
  6143   002E18  600E               	cpfslt	___xxtofl@exp^0,c
  6144   002E1A  EF11  F017         	goto	u3511
  6145   002E1E  EF13  F017         	goto	u3510
  6146   002E22                     u3511:
  6147   002E22  EFFE  F016         	goto	l3680
  6148   002E26                     u3510:
  6149   002E26                     l1213:
  6150   002E26  B00E               	btfsc	___xxtofl@exp^0,0,c
  6151   002E28  EF18  F017         	goto	u3521
  6152   002E2C  EF1A  F017         	goto	u3520
  6153   002E30                     u3521:
  6154   002E30  EF1B  F017         	goto	l3688
  6155   002E34                     u3520:
  6156   002E34  9E11               	bcf	(___xxtofl@arg+2)^0,7,c
  6157   002E36                     l3688:
  6158   002E36  90D8               	bcf	status,0,c
  6159   002E38  320E               	rrcf	___xxtofl@exp^0,f,c
  6160   002E3A  C00E  F009         	movff	___xxtofl@exp,??___xxtofl
  6161   002E3E  6A0A               	clrf	(??___xxtofl+1)^0,c
  6162   002E40  6A0B               	clrf	(??___xxtofl+2)^0,c
  6163   002E42  6A0C               	clrf	(??___xxtofl+3)^0,c
  6164   002E44  C009  F00C         	movff	??___xxtofl,??___xxtofl+3
  6165   002E48  6A0B               	clrf	(??___xxtofl+2)^0,c
  6166   002E4A  6A0A               	clrf	(??___xxtofl+1)^0,c
  6167   002E4C  6A09               	clrf	??___xxtofl^0,c
  6168   002E4E  5009               	movf	??___xxtofl^0,w,c
  6169   002E50  120F               	iorwf	___xxtofl@arg^0,f,c
  6170   002E52  500A               	movf	(??___xxtofl+1)^0,w,c
  6171   002E54  1210               	iorwf	(___xxtofl@arg+1)^0,f,c
  6172   002E56  500B               	movf	(??___xxtofl+2)^0,w,c
  6173   002E58  1211               	iorwf	(___xxtofl@arg+2)^0,f,c
  6174   002E5A  500C               	movf	(??___xxtofl+3)^0,w,c
  6175   002E5C  1212               	iorwf	(___xxtofl@arg+3)^0,f,c
  6176   002E5E  500D               	movf	___xxtofl@sign^0,w,c
  6177   002E60  B4D8               	btfsc	status,2,c
  6178   002E62  EF35  F017         	goto	u3531
  6179   002E66  EF37  F017         	goto	u3530
  6180   002E6A                     u3531:
  6181   002E6A  EF3F  F017         	goto	l3698
  6182   002E6E                     u3530:
  6183   002E6E  BE08               	btfsc	(___xxtofl@val+3)^0,7,c
  6184   002E70  EF3E  F017         	goto	u3540
  6185   002E74  EF3C  F017         	goto	u3541
  6186   002E78                     u3541:
  6187   002E78  EF3F  F017         	goto	l3698
  6188   002E7C                     u3540:
  6189   002E7C  8E12               	bsf	(___xxtofl@arg+3)^0,7,c
  6190   002E7E                     l3698:
  6191   002E7E  C00F  F005         	movff	___xxtofl@arg,?___xxtofl
  6192   002E82  C010  F006         	movff	___xxtofl@arg+1,?___xxtofl+1
  6193   002E86  C011  F007         	movff	___xxtofl@arg+2,?___xxtofl+2
  6194   002E8A  C012  F008         	movff	___xxtofl@arg+3,?___xxtofl+3
  6195   002E8E                     l1202:
  6196   002E8E  0012               	return		;funcret
  6197   002E90                     __end_of___xxtofl:
  6198                           	callstack 0
  6199                           
  6200 ;; *************** function ___flsub *****************
  6201 ;; Defined at:
  6202 ;;		line 245 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\sprcadd.c"
  6203 ;; Parameters:    Size  Location     Type
  6204 ;;  b               4   20[COMRAM] unsigned char 
  6205 ;;  a               4   24[COMRAM] unsigned char 
  6206 ;; Auto vars:     Size  Location     Type
  6207 ;;		None
  6208 ;; Return value:  Size  Location     Type
  6209 ;;                  4   20[COMRAM] unsigned char 
  6210 ;; Registers used:
  6211 ;;		wreg, status,2, status,0, cstack
  6212 ;; Tracked objects:
  6213 ;;		On entry : 0/0
  6214 ;;		On exit  : 0/0
  6215 ;;		Unchanged: 0/0
  6216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6217 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6220 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6221 ;;Total ram usage:        8 bytes
  6222 ;; Hardware stack levels used: 1
  6223 ;; Hardware stack levels required when called: 3
  6224 ;; This function calls:
  6225 ;;		___fladd
  6226 ;; This function is called by:
  6227 ;;		_colorDetect
  6228 ;; This function uses a non-reentrant model
  6229 ;;
  6230                           
  6231                           	psect	text23
  6232   00407C                     __ptext23:
  6233                           	callstack 0
  6234   00407C                     ___flsub:
  6235                           	callstack 26
  6236   00407C  0E00               	movlw	0
  6237   00407E  1A19               	xorwf	___flsub@a^0,f,c
  6238   004080  0E00               	movlw	0
  6239   004082  1A1A               	xorwf	(___flsub@a+1)^0,f,c
  6240   004084  0E00               	movlw	0
  6241   004086  1A1B               	xorwf	(___flsub@a+2)^0,f,c
  6242   004088  0E80               	movlw	128
  6243   00408A  1A1C               	xorwf	(___flsub@a+3)^0,f,c
  6244   00408C  C015  F005         	movff	___flsub@b,___fladd@b
  6245   004090  C016  F006         	movff	___flsub@b+1,___fladd@b+1
  6246   004094  C017  F007         	movff	___flsub@b+2,___fladd@b+2
  6247   004098  C018  F008         	movff	___flsub@b+3,___fladd@b+3
  6248   00409C  C019  F009         	movff	___flsub@a,___fladd@a
  6249   0040A0  C01A  F00A         	movff	___flsub@a+1,___fladd@a+1
  6250   0040A4  C01B  F00B         	movff	___flsub@a+2,___fladd@a+2
  6251   0040A8  C01C  F00C         	movff	___flsub@a+3,___fladd@a+3
  6252   0040AC  EC05  F00D         	call	___fladd	;wreg free
  6253   0040B0  C005  F015         	movff	?___fladd,?___flsub
  6254   0040B4  C006  F016         	movff	?___fladd+1,?___flsub+1
  6255   0040B8  C007  F017         	movff	?___fladd+2,?___flsub+2
  6256   0040BC  C008  F018         	movff	?___fladd+3,?___flsub+3
  6257   0040C0  0012               	return		;funcret
  6258   0040C2                     __end_of___flsub:
  6259                           	callstack 0
  6260                           
  6261 ;; *************** function ___fladd *****************
  6262 ;; Defined at:
  6263 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\sprcadd.c"
  6264 ;; Parameters:    Size  Location     Type
  6265 ;;  b               4    4[COMRAM] unsigned char 
  6266 ;;  a               4    8[COMRAM] unsigned char 
  6267 ;; Auto vars:     Size  Location     Type
  6268 ;;  grs             1   19[COMRAM] unsigned char 
  6269 ;;  bexp            1   18[COMRAM] unsigned char 
  6270 ;;  aexp            1   17[COMRAM] unsigned char 
  6271 ;;  signs           1   16[COMRAM] unsigned char 
  6272 ;; Return value:  Size  Location     Type
  6273 ;;                  4    4[COMRAM] unsigned char 
  6274 ;; Registers used:
  6275 ;;		wreg, status,2, status,0
  6276 ;; Tracked objects:
  6277 ;;		On entry : 0/0
  6278 ;;		On exit  : 0/0
  6279 ;;		Unchanged: 0/0
  6280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6281 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6282 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6283 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6284 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6285 ;;Total ram usage:       16 bytes
  6286 ;; Hardware stack levels used: 1
  6287 ;; Hardware stack levels required when called: 2
  6288 ;; This function calls:
  6289 ;;		Nothing
  6290 ;; This function is called by:
  6291 ;;		___flsub
  6292 ;; This function uses a non-reentrant model
  6293 ;;
  6294                           
  6295                           	psect	text24
  6296   001A0A                     __ptext24:
  6297                           	callstack 0
  6298   001A0A                     ___fladd:
  6299                           	callstack 26
  6300   001A0A  5008               	movf	(___fladd@b+3)^0,w,c
  6301   001A0C  0B80               	andlw	128
  6302   001A0E  6E11               	movwf	___fladd@signs^0,c
  6303   001A10  5008               	movf	(___fladd@b+3)^0,w,c
  6304   001A12  2408               	addwf	(___fladd@b+3)^0,w,c
  6305   001A14  6E13               	movwf	___fladd@bexp^0,c
  6306   001A16  AE07               	btfss	(___fladd@b+2)^0,7,c
  6307   001A18  EF10  F00D         	goto	u2471
  6308   001A1C  EF12  F00D         	goto	u2470
  6309   001A20                     u2471:
  6310   001A20  EF13  F00D         	goto	l2998
  6311   001A24                     u2470:
  6312   001A24  8013               	bsf	___fladd@bexp^0,0,c
  6313   001A26                     l2998:
  6314   001A26  5013               	movf	___fladd@bexp^0,w,c
  6315   001A28  B4D8               	btfsc	status,2,c
  6316   001A2A  EF19  F00D         	goto	u2481
  6317   001A2E  EF1B  F00D         	goto	u2480
  6318   001A32                     u2481:
  6319   001A32  EF30  F00D         	goto	l3008
  6320   001A36                     u2480:
  6321   001A36  2813               	incf	___fladd@bexp^0,w,c
  6322   001A38  A4D8               	btfss	status,2,c
  6323   001A3A  EF21  F00D         	goto	u2491
  6324   001A3E  EF23  F00D         	goto	u2490
  6325   001A42                     u2491:
  6326   001A42  EF2B  F00D         	goto	l3004
  6327   001A46                     u2490:
  6328   001A46  0E00               	movlw	0
  6329   001A48  6E05               	movwf	___fladd@b^0,c
  6330   001A4A  0E00               	movlw	0
  6331   001A4C  6E06               	movwf	(___fladd@b+1)^0,c
  6332   001A4E  0E00               	movlw	0
  6333   001A50  6E07               	movwf	(___fladd@b+2)^0,c
  6334   001A52  0E00               	movlw	0
  6335   001A54  6E08               	movwf	(___fladd@b+3)^0,c
  6336   001A56                     l3004:
  6337   001A56  8E07               	bsf	(___fladd@b+2)^0,7,c
  6338   001A58  0E00               	movlw	0
  6339   001A5A  6E08               	movwf	(___fladd@b+3)^0,c
  6340   001A5C  EF38  F00D         	goto	l3010
  6341   001A60                     l3008:
  6342   001A60  0E00               	movlw	0
  6343   001A62  6E05               	movwf	___fladd@b^0,c
  6344   001A64  0E00               	movlw	0
  6345   001A66  6E06               	movwf	(___fladd@b+1)^0,c
  6346   001A68  0E00               	movlw	0
  6347   001A6A  6E07               	movwf	(___fladd@b+2)^0,c
  6348   001A6C  0E00               	movlw	0
  6349   001A6E  6E08               	movwf	(___fladd@b+3)^0,c
  6350   001A70                     l3010:
  6351   001A70  500C               	movf	(___fladd@a+3)^0,w,c
  6352   001A72  0B80               	andlw	128
  6353   001A74  6E12               	movwf	___fladd@aexp^0,c
  6354   001A76  5011               	movf	___fladd@signs^0,w,c
  6355   001A78  1812               	xorwf	___fladd@aexp^0,w,c
  6356   001A7A  B4D8               	btfsc	status,2,c
  6357   001A7C  EF42  F00D         	goto	u2501
  6358   001A80  EF44  F00D         	goto	u2500
  6359   001A84                     u2501:
  6360   001A84  EF45  F00D         	goto	l3016
  6361   001A88                     u2500:
  6362   001A88  8C11               	bsf	___fladd@signs^0,6,c
  6363   001A8A                     l3016:
  6364   001A8A  500C               	movf	(___fladd@a+3)^0,w,c
  6365   001A8C  240C               	addwf	(___fladd@a+3)^0,w,c
  6366   001A8E  6E12               	movwf	___fladd@aexp^0,c
  6367   001A90  AE0B               	btfss	(___fladd@a+2)^0,7,c
  6368   001A92  EF4D  F00D         	goto	u2511
  6369   001A96  EF4F  F00D         	goto	u2510
  6370   001A9A                     u2511:
  6371   001A9A  EF50  F00D         	goto	l3022
  6372   001A9E                     u2510:
  6373   001A9E  8012               	bsf	___fladd@aexp^0,0,c
  6374   001AA0                     l3022:
  6375   001AA0  5012               	movf	___fladd@aexp^0,w,c
  6376   001AA2  B4D8               	btfsc	status,2,c
  6377   001AA4  EF56  F00D         	goto	u2521
  6378   001AA8  EF58  F00D         	goto	u2520
  6379   001AAC                     u2521:
  6380   001AAC  EF6D  F00D         	goto	l3032
  6381   001AB0                     u2520:
  6382   001AB0  2812               	incf	___fladd@aexp^0,w,c
  6383   001AB2  A4D8               	btfss	status,2,c
  6384   001AB4  EF5E  F00D         	goto	u2531
  6385   001AB8  EF60  F00D         	goto	u2530
  6386   001ABC                     u2531:
  6387   001ABC  EF68  F00D         	goto	l3028
  6388   001AC0                     u2530:
  6389   001AC0  0E00               	movlw	0
  6390   001AC2  6E09               	movwf	___fladd@a^0,c
  6391   001AC4  0E00               	movlw	0
  6392   001AC6  6E0A               	movwf	(___fladd@a+1)^0,c
  6393   001AC8  0E00               	movlw	0
  6394   001ACA  6E0B               	movwf	(___fladd@a+2)^0,c
  6395   001ACC  0E00               	movlw	0
  6396   001ACE  6E0C               	movwf	(___fladd@a+3)^0,c
  6397   001AD0                     l3028:
  6398   001AD0  8E0B               	bsf	(___fladd@a+2)^0,7,c
  6399   001AD2  0E00               	movlw	0
  6400   001AD4  6E0C               	movwf	(___fladd@a+3)^0,c
  6401   001AD6  EF75  F00D         	goto	l3034
  6402   001ADA                     l3032:
  6403   001ADA  0E00               	movlw	0
  6404   001ADC  6E09               	movwf	___fladd@a^0,c
  6405   001ADE  0E00               	movlw	0
  6406   001AE0  6E0A               	movwf	(___fladd@a+1)^0,c
  6407   001AE2  0E00               	movlw	0
  6408   001AE4  6E0B               	movwf	(___fladd@a+2)^0,c
  6409   001AE6  0E00               	movlw	0
  6410   001AE8  6E0C               	movwf	(___fladd@a+3)^0,c
  6411   001AEA                     l3034:
  6412   001AEA  5013               	movf	___fladd@bexp^0,w,c
  6413   001AEC  5C12               	subwf	___fladd@aexp^0,w,c
  6414   001AEE  B0D8               	btfsc	status,0,c
  6415   001AF0  EF7C  F00D         	goto	u2541
  6416   001AF4  EF7E  F00D         	goto	u2540
  6417   001AF8                     u2541:
  6418   001AF8  EFA5  F00D         	goto	l3070
  6419   001AFC                     u2540:
  6420   001AFC  AC11               	btfss	___fladd@signs^0,6,c
  6421   001AFE  EF83  F00D         	goto	u2551
  6422   001B02  EF85  F00D         	goto	u2550
  6423   001B06                     u2551:
  6424   001B06  EF87  F00D         	goto	l3040
  6425   001B0A                     u2550:
  6426   001B0A  0E80               	movlw	128
  6427   001B0C  1A11               	xorwf	___fladd@signs^0,f,c
  6428   001B0E                     l3040:
  6429   001B0E  C013  F014         	movff	___fladd@bexp,___fladd@grs
  6430   001B12  C012  F013         	movff	___fladd@aexp,___fladd@bexp
  6431   001B16  C014  F012         	movff	___fladd@grs,___fladd@aexp
  6432   001B1A  C005  F014         	movff	___fladd@b,___fladd@grs
  6433   001B1E  C009  F005         	movff	___fladd@a,___fladd@b
  6434   001B22  C014  F009         	movff	___fladd@grs,___fladd@a
  6435   001B26  C006  F014         	movff	___fladd@b+1,___fladd@grs
  6436   001B2A  C00A  F006         	movff	___fladd@a+1,___fladd@b+1
  6437   001B2E  C014  F00A         	movff	___fladd@grs,___fladd@a+1
  6438   001B32  C007  F014         	movff	___fladd@b+2,___fladd@grs
  6439   001B36  C00B  F007         	movff	___fladd@a+2,___fladd@b+2
  6440   001B3A  C014  F00B         	movff	___fladd@grs,___fladd@a+2
  6441   001B3E  C008  F014         	movff	___fladd@b+3,___fladd@grs
  6442   001B42  C00C  F008         	movff	___fladd@a+3,___fladd@b+3
  6443   001B46  C014  F00C         	movff	___fladd@grs,___fladd@a+3
  6444   001B4A                     l3070:
  6445   001B4A  0E00               	movlw	0
  6446   001B4C  6E14               	movwf	___fladd@grs^0,c
  6447   001B4E  5013               	movf	___fladd@bexp^0,w,c
  6448   001B50  C012  F00D         	movff	___fladd@aexp,??___fladd
  6449   001B54  6A0E               	clrf	(??___fladd+1)^0,c
  6450   001B56  5E0D               	subwf	??___fladd^0,f,c
  6451   001B58  0E00               	movlw	0
  6452   001B5A  5A0E               	subwfb	(??___fladd+1)^0,f,c
  6453   001B5C  BE0E               	btfsc	(??___fladd+1)^0,7,c
  6454   001B5E  EFBA  F00D         	goto	u2561
  6455   001B62  500E               	movf	(??___fladd+1)^0,w,c
  6456   001B64  E109               	bnz	u2560
  6457   001B66  0E1A               	movlw	26
  6458   001B68  5C0D               	subwf	??___fladd^0,w,c
  6459   001B6A  A0D8               	btfss	status,0,c
  6460   001B6C  EFBA  F00D         	goto	u2561
  6461   001B70  EFBC  F00D         	goto	u2560
  6462   001B74                     u2561:
  6463   001B74  EFF3  F00D         	goto	l1073
  6464   001B78                     u2560:
  6465   001B78  5005               	movf	___fladd@b^0,w,c
  6466   001B7A  1006               	iorwf	(___fladd@b+1)^0,w,c
  6467   001B7C  1007               	iorwf	(___fladd@b+2)^0,w,c
  6468   001B7E  1008               	iorwf	(___fladd@b+3)^0,w,c
  6469   001B80  A4D8               	btfss	status,2,c
  6470   001B82  EFC5  F00D         	goto	u2571
  6471   001B86  EFC8  F00D         	goto	u2570
  6472   001B8A                     u2571:
  6473   001B8A  0E01               	movlw	1
  6474   001B8C  EFC9  F00D         	goto	u2580
  6475   001B90                     u2570:
  6476   001B90  0E00               	movlw	0
  6477   001B92                     u2580:
  6478   001B92  6E14               	movwf	___fladd@grs^0,c
  6479   001B94  0E00               	movlw	0
  6480   001B96  6E05               	movwf	___fladd@b^0,c
  6481   001B98  0E00               	movlw	0
  6482   001B9A  6E06               	movwf	(___fladd@b+1)^0,c
  6483   001B9C  0E00               	movlw	0
  6484   001B9E  6E07               	movwf	(___fladd@b+2)^0,c
  6485   001BA0  0E00               	movlw	0
  6486   001BA2  6E08               	movwf	(___fladd@b+3)^0,c
  6487   001BA4  C012  F013         	movff	___fladd@aexp,___fladd@bexp
  6488   001BA8  EFFC  F00D         	goto	l1072
  6489   001BAC                     l1074:
  6490   001BAC  A014               	btfss	___fladd@grs^0,0,c
  6491   001BAE  EFDB  F00D         	goto	u2591
  6492   001BB2  EFDD  F00D         	goto	u2590
  6493   001BB6                     u2591:
  6494   001BB6  EFE3  F00D         	goto	l3082
  6495   001BBA                     u2590:
  6496   001BBA  90D8               	bcf	status,0,c
  6497   001BBC  3014               	rrcf	___fladd@grs^0,w,c
  6498   001BBE  0901               	iorlw	1
  6499   001BC0  6E14               	movwf	___fladd@grs^0,c
  6500   001BC2  EFE5  F00D         	goto	l3084
  6501   001BC6                     l3082:
  6502   001BC6  90D8               	bcf	status,0,c
  6503   001BC8  3214               	rrcf	___fladd@grs^0,f,c
  6504   001BCA                     l3084:
  6505   001BCA  A005               	btfss	___fladd@b^0,0,c
  6506   001BCC  EFEA  F00D         	goto	u2601
  6507   001BD0  EFEC  F00D         	goto	u2600
  6508   001BD4                     u2601:
  6509   001BD4  EFED  F00D         	goto	l3088
  6510   001BD8                     u2600:
  6511   001BD8  8E14               	bsf	___fladd@grs^0,7,c
  6512   001BDA                     l3088:
  6513   001BDA  3408               	rlcf	(___fladd@b+3)^0,w,c
  6514   001BDC  3208               	rrcf	(___fladd@b+3)^0,f,c
  6515   001BDE  3207               	rrcf	(___fladd@b+2)^0,f,c
  6516   001BE0  3206               	rrcf	(___fladd@b+1)^0,f,c
  6517   001BE2  3205               	rrcf	___fladd@b^0,f,c
  6518   001BE4  2A13               	incf	___fladd@bexp^0,f,c
  6519   001BE6                     l1073:
  6520   001BE6  5012               	movf	___fladd@aexp^0,w,c
  6521   001BE8  5C13               	subwf	___fladd@bexp^0,w,c
  6522   001BEA  A0D8               	btfss	status,0,c
  6523   001BEC  EFFA  F00D         	goto	u2611
  6524   001BF0  EFFC  F00D         	goto	u2610
  6525   001BF4                     u2611:
  6526   001BF4  EFD6  F00D         	goto	l1074
  6527   001BF8                     u2610:
  6528   001BF8                     l1072:
  6529   001BF8  BC11               	btfsc	___fladd@signs^0,6,c
  6530   001BFA  EF01  F00E         	goto	u2621
  6531   001BFE  EF03  F00E         	goto	u2620
  6532   001C02                     u2621:
  6533   001C02  EF43  F00E         	goto	l3116
  6534   001C06                     u2620:
  6535   001C06  5013               	movf	___fladd@bexp^0,w,c
  6536   001C08  A4D8               	btfss	status,2,c
  6537   001C0A  EF09  F00E         	goto	u2631
  6538   001C0E  EF0B  F00E         	goto	u2630
  6539   001C12                     u2631:
  6540   001C12  EF15  F00E         	goto	l3098
  6541   001C16                     u2630:
  6542   001C16  0E00               	movlw	0
  6543   001C18  6E05               	movwf	?___fladd^0,c
  6544   001C1A  0E00               	movlw	0
  6545   001C1C  6E06               	movwf	(?___fladd+1)^0,c
  6546   001C1E  0E00               	movlw	0
  6547   001C20  6E07               	movwf	(?___fladd+2)^0,c
  6548   001C22  0E00               	movlw	0
  6549   001C24  6E08               	movwf	(?___fladd+3)^0,c
  6550   001C26  EF64  F00F         	goto	l1081
  6551   001C2A                     l3098:
  6552   001C2A  5009               	movf	___fladd@a^0,w,c
  6553   001C2C  2605               	addwf	___fladd@b^0,f,c
  6554   001C2E  500A               	movf	(___fladd@a+1)^0,w,c
  6555   001C30  2206               	addwfc	(___fladd@b+1)^0,f,c
  6556   001C32  500B               	movf	(___fladd@a+2)^0,w,c
  6557   001C34  2207               	addwfc	(___fladd@b+2)^0,f,c
  6558   001C36  500C               	movf	(___fladd@a+3)^0,w,c
  6559   001C38  2208               	addwfc	(___fladd@b+3)^0,f,c
  6560   001C3A  A008               	btfss	(___fladd@b+3)^0,0,c
  6561   001C3C  EF22  F00E         	goto	u2641
  6562   001C40  EF24  F00E         	goto	u2640
  6563   001C44                     u2641:
  6564   001C44  EFD0  F00E         	goto	l3152
  6565   001C48                     u2640:
  6566   001C48  A014               	btfss	___fladd@grs^0,0,c
  6567   001C4A  EF29  F00E         	goto	u2651
  6568   001C4E  EF2B  F00E         	goto	u2650
  6569   001C52                     u2651:
  6570   001C52  EF31  F00E         	goto	l3106
  6571   001C56                     u2650:
  6572   001C56  90D8               	bcf	status,0,c
  6573   001C58  3014               	rrcf	___fladd@grs^0,w,c
  6574   001C5A  0901               	iorlw	1
  6575   001C5C  6E14               	movwf	___fladd@grs^0,c
  6576   001C5E  EF33  F00E         	goto	l3108
  6577   001C62                     l3106:
  6578   001C62  90D8               	bcf	status,0,c
  6579   001C64  3214               	rrcf	___fladd@grs^0,f,c
  6580   001C66                     l3108:
  6581   001C66  A005               	btfss	___fladd@b^0,0,c
  6582   001C68  EF38  F00E         	goto	u2661
  6583   001C6C  EF3A  F00E         	goto	u2660
  6584   001C70                     u2661:
  6585   001C70  EF3B  F00E         	goto	l3112
  6586   001C74                     u2660:
  6587   001C74  8E14               	bsf	___fladd@grs^0,7,c
  6588   001C76                     l3112:
  6589   001C76  3408               	rlcf	(___fladd@b+3)^0,w,c
  6590   001C78  3208               	rrcf	(___fladd@b+3)^0,f,c
  6591   001C7A  3207               	rrcf	(___fladd@b+2)^0,f,c
  6592   001C7C  3206               	rrcf	(___fladd@b+1)^0,f,c
  6593   001C7E  3205               	rrcf	___fladd@b^0,f,c
  6594   001C80  2A13               	incf	___fladd@bexp^0,f,c
  6595   001C82  EFD0  F00E         	goto	l3152
  6596   001C86                     l3116:
  6597   001C86  5009               	movf	___fladd@a^0,w,c
  6598   001C88  5C05               	subwf	___fladd@b^0,w,c
  6599   001C8A  500A               	movf	(___fladd@a+1)^0,w,c
  6600   001C8C  5806               	subwfb	(___fladd@b+1)^0,w,c
  6601   001C8E  500B               	movf	(___fladd@a+2)^0,w,c
  6602   001C90  5807               	subwfb	(___fladd@b+2)^0,w,c
  6603   001C92  5008               	movf	(___fladd@b+3)^0,w,c
  6604   001C94  0A80               	xorlw	128
  6605   001C96  6E0D               	movwf	??___fladd^0,c
  6606   001C98  500C               	movf	(___fladd@a+3)^0,w,c
  6607   001C9A  0A80               	xorlw	128
  6608   001C9C  580D               	subwfb	??___fladd^0,w,c
  6609   001C9E  B0D8               	btfsc	status,0,c
  6610   001CA0  EF54  F00E         	goto	u2671
  6611   001CA4  EF56  F00E         	goto	u2670
  6612   001CA8                     u2671:
  6613   001CA8  EF81  F00E         	goto	l3126
  6614   001CAC                     u2670:
  6615   001CAC  5005               	movf	___fladd@b^0,w,c
  6616   001CAE  5C09               	subwf	___fladd@a^0,w,c
  6617   001CB0  6E0D               	movwf	??___fladd^0,c
  6618   001CB2  5006               	movf	(___fladd@b+1)^0,w,c
  6619   001CB4  580A               	subwfb	(___fladd@a+1)^0,w,c
  6620   001CB6  6E0E               	movwf	(??___fladd+1)^0,c
  6621   001CB8  5007               	movf	(___fladd@b+2)^0,w,c
  6622   001CBA  580B               	subwfb	(___fladd@a+2)^0,w,c
  6623   001CBC  6E0F               	movwf	(??___fladd+2)^0,c
  6624   001CBE  5008               	movf	(___fladd@b+3)^0,w,c
  6625   001CC0  580C               	subwfb	(___fladd@a+3)^0,w,c
  6626   001CC2  6E10               	movwf	(??___fladd+3)^0,c
  6627   001CC4  0EFF               	movlw	255
  6628   001CC6  240D               	addwf	??___fladd^0,w,c
  6629   001CC8  6E05               	movwf	___fladd@b^0,c
  6630   001CCA  0EFF               	movlw	255
  6631   001CCC  200E               	addwfc	(??___fladd+1)^0,w,c
  6632   001CCE  6E06               	movwf	(___fladd@b+1)^0,c
  6633   001CD0  0EFF               	movlw	255
  6634   001CD2  200F               	addwfc	(??___fladd+2)^0,w,c
  6635   001CD4  6E07               	movwf	(___fladd@b+2)^0,c
  6636   001CD6  0EFF               	movlw	255
  6637   001CD8  2010               	addwfc	(??___fladd+3)^0,w,c
  6638   001CDA  6E08               	movwf	(___fladd@b+3)^0,c
  6639   001CDC  0E80               	movlw	128
  6640   001CDE  1A11               	xorwf	___fladd@signs^0,f,c
  6641   001CE0  6C14               	negf	___fladd@grs^0,c
  6642   001CE2  5014               	movf	___fladd@grs^0,w,c
  6643   001CE4  A4D8               	btfss	status,2,c
  6644   001CE6  EF77  F00E         	goto	u2681
  6645   001CEA  EF79  F00E         	goto	u2680
  6646   001CEE                     u2681:
  6647   001CEE  EF89  F00E         	goto	l1089
  6648   001CF2                     u2680:
  6649   001CF2  0E01               	movlw	1
  6650   001CF4  2605               	addwf	___fladd@b^0,f,c
  6651   001CF6  0E00               	movlw	0
  6652   001CF8  2206               	addwfc	(___fladd@b+1)^0,f,c
  6653   001CFA  2207               	addwfc	(___fladd@b+2)^0,f,c
  6654   001CFC  2208               	addwfc	(___fladd@b+3)^0,f,c
  6655   001CFE  EF89  F00E         	goto	l1089
  6656   001D02                     l3126:
  6657   001D02  5009               	movf	___fladd@a^0,w,c
  6658   001D04  5E05               	subwf	___fladd@b^0,f,c
  6659   001D06  500A               	movf	(___fladd@a+1)^0,w,c
  6660   001D08  5A06               	subwfb	(___fladd@b+1)^0,f,c
  6661   001D0A  500B               	movf	(___fladd@a+2)^0,w,c
  6662   001D0C  5A07               	subwfb	(___fladd@b+2)^0,f,c
  6663   001D0E  500C               	movf	(___fladd@a+3)^0,w,c
  6664   001D10  5A08               	subwfb	(___fladd@b+3)^0,f,c
  6665   001D12                     l1089:
  6666   001D12  5005               	movf	___fladd@b^0,w,c
  6667   001D14  1006               	iorwf	(___fladd@b+1)^0,w,c
  6668   001D16  1007               	iorwf	(___fladd@b+2)^0,w,c
  6669   001D18  1008               	iorwf	(___fladd@b+3)^0,w,c
  6670   001D1A  A4D8               	btfss	status,2,c
  6671   001D1C  EF92  F00E         	goto	u2691
  6672   001D20  EF94  F00E         	goto	u2690
  6673   001D24                     u2691:
  6674   001D24  EFC9  F00E         	goto	l3150
  6675   001D28                     u2690:
  6676   001D28  5014               	movf	___fladd@grs^0,w,c
  6677   001D2A  A4D8               	btfss	status,2,c
  6678   001D2C  EF9A  F00E         	goto	u2701
  6679   001D30  EF9C  F00E         	goto	u2700
  6680   001D34                     u2701:
  6681   001D34  EFC9  F00E         	goto	l3150
  6682   001D38                     u2700:
  6683   001D38  0E00               	movlw	0
  6684   001D3A  6E05               	movwf	?___fladd^0,c
  6685   001D3C  0E00               	movlw	0
  6686   001D3E  6E06               	movwf	(?___fladd+1)^0,c
  6687   001D40  0E00               	movlw	0
  6688   001D42  6E07               	movwf	(?___fladd+2)^0,c
  6689   001D44  0E00               	movlw	0
  6690   001D46  6E08               	movwf	(?___fladd+3)^0,c
  6691   001D48  EF64  F00F         	goto	l1081
  6692   001D4C                     l3134:
  6693   001D4C  90D8               	bcf	status,0,c
  6694   001D4E  3605               	rlcf	___fladd@b^0,f,c
  6695   001D50  3606               	rlcf	(___fladd@b+1)^0,f,c
  6696   001D52  3607               	rlcf	(___fladd@b+2)^0,f,c
  6697   001D54  3608               	rlcf	(___fladd@b+3)^0,f,c
  6698   001D56  AE14               	btfss	___fladd@grs^0,7,c
  6699   001D58  EFB0  F00E         	goto	u2711
  6700   001D5C  EFB2  F00E         	goto	u2710
  6701   001D60                     u2711:
  6702   001D60  EFB3  F00E         	goto	l3140
  6703   001D64                     u2710:
  6704   001D64  8005               	bsf	___fladd@b^0,0,c
  6705   001D66                     l3140:
  6706   001D66  A014               	btfss	___fladd@grs^0,0,c
  6707   001D68  EFB8  F00E         	goto	u2721
  6708   001D6C  EFBA  F00E         	goto	u2720
  6709   001D70                     u2721:
  6710   001D70  EFBE  F00E         	goto	l3144
  6711   001D74                     u2720:
  6712   001D74  80D8               	bsf	status,0,c
  6713   001D76  3614               	rlcf	___fladd@grs^0,f,c
  6714   001D78  EFC0  F00E         	goto	l3146
  6715   001D7C                     l3144:
  6716   001D7C  90D8               	bcf	status,0,c
  6717   001D7E  3614               	rlcf	___fladd@grs^0,f,c
  6718   001D80                     l3146:
  6719   001D80  5013               	movf	___fladd@bexp^0,w,c
  6720   001D82  B4D8               	btfsc	status,2,c
  6721   001D84  EFC6  F00E         	goto	u2731
  6722   001D88  EFC8  F00E         	goto	u2730
  6723   001D8C                     u2731:
  6724   001D8C  EFC9  F00E         	goto	l3150
  6725   001D90                     u2730:
  6726   001D90  0613               	decf	___fladd@bexp^0,f,c
  6727   001D92                     l3150:
  6728   001D92  AE07               	btfss	(___fladd@b+2)^0,7,c
  6729   001D94  EFCE  F00E         	goto	u2741
  6730   001D98  EFD0  F00E         	goto	u2740
  6731   001D9C                     u2741:
  6732   001D9C  EFA6  F00E         	goto	l3134
  6733   001DA0                     u2740:
  6734   001DA0                     l3152:
  6735   001DA0  0E00               	movlw	0
  6736   001DA2  6E12               	movwf	___fladd@aexp^0,c
  6737   001DA4  AE14               	btfss	___fladd@grs^0,7,c
  6738   001DA6  EFD7  F00E         	goto	u2751
  6739   001DAA  EFD9  F00E         	goto	u2750
  6740   001DAE                     u2751:
  6741   001DAE  EFF1  F00E         	goto	l1098
  6742   001DB2                     u2750:
  6743   001DB2  C014  F00D         	movff	___fladd@grs,??___fladd
  6744   001DB6  0E7F               	movlw	127
  6745   001DB8  160D               	andwf	??___fladd^0,f,c
  6746   001DBA  B4D8               	btfsc	status,2,c
  6747   001DBC  EFE2  F00E         	goto	u2761
  6748   001DC0  EFE4  F00E         	goto	u2760
  6749   001DC4                     u2761:
  6750   001DC4  EFE8  F00E         	goto	l1099
  6751   001DC8                     u2760:
  6752   001DC8                     l3158:
  6753   001DC8  0E01               	movlw	1
  6754   001DCA  6E12               	movwf	___fladd@aexp^0,c
  6755   001DCC  EFF1  F00E         	goto	l1098
  6756   001DD0                     l1099:
  6757   001DD0  A005               	btfss	___fladd@b^0,0,c
  6758   001DD2  EFED  F00E         	goto	u2771
  6759   001DD6  EFEF  F00E         	goto	u2770
  6760   001DDA                     u2771:
  6761   001DDA  EFF1  F00E         	goto	l1098
  6762   001DDE                     u2770:
  6763   001DDE  EFE4  F00E         	goto	l3158
  6764   001DE2                     l1098:
  6765   001DE2  5012               	movf	___fladd@aexp^0,w,c
  6766   001DE4  B4D8               	btfsc	status,2,c
  6767   001DE6  EFF7  F00E         	goto	u2781
  6768   001DEA  EFF9  F00E         	goto	u2780
  6769   001DEE                     u2781:
  6770   001DEE  EF24  F00F         	goto	l3170
  6771   001DF2                     u2780:
  6772   001DF2  0E01               	movlw	1
  6773   001DF4  2605               	addwf	___fladd@b^0,f,c
  6774   001DF6  0E00               	movlw	0
  6775   001DF8  2206               	addwfc	(___fladd@b+1)^0,f,c
  6776   001DFA  2207               	addwfc	(___fladd@b+2)^0,f,c
  6777   001DFC  2208               	addwfc	(___fladd@b+3)^0,f,c
  6778   001DFE  A008               	btfss	(___fladd@b+3)^0,0,c
  6779   001E00  EF04  F00F         	goto	u2791
  6780   001E04  EF06  F00F         	goto	u2790
  6781   001E08                     u2791:
  6782   001E08  EF24  F00F         	goto	l3170
  6783   001E0C                     u2790:
  6784   001E0C  C005  F00D         	movff	___fladd@b,??___fladd
  6785   001E10  C006  F00E         	movff	___fladd@b+1,??___fladd+1
  6786   001E14  C007  F00F         	movff	___fladd@b+2,??___fladd+2
  6787   001E18  C008  F010         	movff	___fladd@b+3,??___fladd+3
  6788   001E1C  3410               	rlcf	(??___fladd+3)^0,w,c
  6789   001E1E  3210               	rrcf	(??___fladd+3)^0,f,c
  6790   001E20  320F               	rrcf	(??___fladd+2)^0,f,c
  6791   001E22  320E               	rrcf	(??___fladd+1)^0,f,c
  6792   001E24  320D               	rrcf	??___fladd^0,f,c
  6793   001E26  C00D  F005         	movff	??___fladd,___fladd@b
  6794   001E2A  C00E  F006         	movff	??___fladd+1,___fladd@b+1
  6795   001E2E  C00F  F007         	movff	??___fladd+2,___fladd@b+2
  6796   001E32  C010  F008         	movff	??___fladd+3,___fladd@b+3
  6797   001E36  2813               	incf	___fladd@bexp^0,w,c
  6798   001E38  B4D8               	btfsc	status,2,c
  6799   001E3A  EF21  F00F         	goto	u2801
  6800   001E3E  EF23  F00F         	goto	u2800
  6801   001E42                     u2801:
  6802   001E42  EF24  F00F         	goto	l3170
  6803   001E46                     u2800:
  6804   001E46  2A13               	incf	___fladd@bexp^0,f,c
  6805   001E48                     l3170:
  6806   001E48  2813               	incf	___fladd@bexp^0,w,c
  6807   001E4A  B4D8               	btfsc	status,2,c
  6808   001E4C  EF2A  F00F         	goto	u2811
  6809   001E50  EF2C  F00F         	goto	u2810
  6810   001E54                     u2811:
  6811   001E54  EF34  F00F         	goto	l3174
  6812   001E58                     u2810:
  6813   001E58  5013               	movf	___fladd@bexp^0,w,c
  6814   001E5A  A4D8               	btfss	status,2,c
  6815   001E5C  EF32  F00F         	goto	u2821
  6816   001E60  EF34  F00F         	goto	u2820
  6817   001E64                     u2821:
  6818   001E64  EF46  F00F         	goto	l3178
  6819   001E68                     u2820:
  6820   001E68                     l3174:
  6821   001E68  0E00               	movlw	0
  6822   001E6A  6E05               	movwf	___fladd@b^0,c
  6823   001E6C  0E00               	movlw	0
  6824   001E6E  6E06               	movwf	(___fladd@b+1)^0,c
  6825   001E70  0E00               	movlw	0
  6826   001E72  6E07               	movwf	(___fladd@b+2)^0,c
  6827   001E74  0E00               	movlw	0
  6828   001E76  6E08               	movwf	(___fladd@b+3)^0,c
  6829   001E78  5013               	movf	___fladd@bexp^0,w,c
  6830   001E7A  A4D8               	btfss	status,2,c
  6831   001E7C  EF42  F00F         	goto	u2831
  6832   001E80  EF44  F00F         	goto	u2830
  6833   001E84                     u2831:
  6834   001E84  EF46  F00F         	goto	l3178
  6835   001E88                     u2830:
  6836   001E88  0E00               	movlw	0
  6837   001E8A  6E11               	movwf	___fladd@signs^0,c
  6838   001E8C                     l3178:
  6839   001E8C  A013               	btfss	___fladd@bexp^0,0,c
  6840   001E8E  EF4B  F00F         	goto	u2841
  6841   001E92  EF4D  F00F         	goto	u2840
  6842   001E96                     u2841:
  6843   001E96  EF50  F00F         	goto	l3182
  6844   001E9A                     u2840:
  6845   001E9A  8E07               	bsf	(___fladd@b+2)^0,7,c
  6846   001E9C  EF51  F00F         	goto	l3184
  6847   001EA0                     l3182:
  6848   001EA0  9E07               	bcf	(___fladd@b+2)^0,7,c
  6849   001EA2                     l3184:
  6850   001EA2  90D8               	bcf	status,0,c
  6851   001EA4  3013               	rrcf	___fladd@bexp^0,w,c
  6852   001EA6  6E08               	movwf	(___fladd@b+3)^0,c
  6853   001EA8  AE11               	btfss	___fladd@signs^0,7,c
  6854   001EAA  EF59  F00F         	goto	u2851
  6855   001EAE  EF5B  F00F         	goto	u2850
  6856   001EB2                     u2851:
  6857   001EB2  EF5C  F00F         	goto	l3190
  6858   001EB6                     u2850:
  6859   001EB6  8E08               	bsf	(___fladd@b+3)^0,7,c
  6860   001EB8                     l3190:
  6861   001EB8  C005  F005         	movff	___fladd@b,?___fladd
  6862   001EBC  C006  F006         	movff	___fladd@b+1,?___fladd+1
  6863   001EC0  C007  F007         	movff	___fladd@b+2,?___fladd+2
  6864   001EC4  C008  F008         	movff	___fladd@b+3,?___fladd+3
  6865   001EC8                     l1081:
  6866   001EC8  0012               	return		;funcret
  6867   001ECA                     __end_of___fladd:
  6868                           	callstack 0
  6869                           
  6870 ;; *************** function ___flmul *****************
  6871 ;; Defined at:
  6872 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\sprcmul.c"
  6873 ;; Parameters:    Size  Location     Type
  6874 ;;  b               4   28[COMRAM] unsigned char 
  6875 ;;  a               4   32[COMRAM] unsigned char 
  6876 ;; Auto vars:     Size  Location     Type
  6877 ;;  prod            4   47[COMRAM] struct .
  6878 ;;  grs             4   41[COMRAM] unsigned long 
  6879 ;;  temp            2   51[COMRAM] struct .
  6880 ;;  bexp            1   46[COMRAM] unsigned char 
  6881 ;;  aexp            1   45[COMRAM] unsigned char 
  6882 ;;  sign            1   40[COMRAM] unsigned char 
  6883 ;; Return value:  Size  Location     Type
  6884 ;;                  4   28[COMRAM] unsigned char 
  6885 ;; Registers used:
  6886 ;;		wreg, status,2, status,0, prodl, prodh
  6887 ;; Tracked objects:
  6888 ;;		On entry : 0/0
  6889 ;;		On exit  : 0/0
  6890 ;;		Unchanged: 0/0
  6891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6892 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6893 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6894 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6895 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6896 ;;Total ram usage:       25 bytes
  6897 ;; Hardware stack levels used: 1
  6898 ;; Hardware stack levels required when called: 2
  6899 ;; This function calls:
  6900 ;;		Nothing
  6901 ;; This function is called by:
  6902 ;;		_colorDetect
  6903 ;;		_turnLeft_90
  6904 ;;		_turnRight_90
  6905 ;;		_turn_180
  6906 ;;		_turnRight_135
  6907 ;;		_turnLeft_135
  6908 ;;		_reverseSquareRight
  6909 ;;		_reverseSquareLeft
  6910 ;;		_turnLeft
  6911 ;;		_turnRight
  6912 ;; This function uses a non-reentrant model
  6913 ;;
  6914                           
  6915                           	psect	text25
  6916   001ECA                     __ptext25:
  6917                           	callstack 0
  6918   001ECA                     ___flmul:
  6919                           	callstack 27
  6920   001ECA  5020               	movf	(___flmul@b+3)^0,w,c
  6921   001ECC  0B80               	andlw	128
  6922   001ECE  6E29               	movwf	___flmul@sign^0,c
  6923   001ED0  5020               	movf	(___flmul@b+3)^0,w,c
  6924   001ED2  2420               	addwf	(___flmul@b+3)^0,w,c
  6925   001ED4  6E2F               	movwf	___flmul@bexp^0,c
  6926   001ED6  AE1F               	btfss	(___flmul@b+2)^0,7,c
  6927   001ED8  EF70  F00F         	goto	u3211
  6928   001EDC  EF72  F00F         	goto	u3210
  6929   001EE0                     u3211:
  6930   001EE0  EF73  F00F         	goto	l3504
  6931   001EE4                     u3210:
  6932   001EE4  802F               	bsf	___flmul@bexp^0,0,c
  6933   001EE6                     l3504:
  6934   001EE6  502F               	movf	___flmul@bexp^0,w,c
  6935   001EE8  B4D8               	btfsc	status,2,c
  6936   001EEA  EF79  F00F         	goto	u3221
  6937   001EEE  EF7B  F00F         	goto	u3220
  6938   001EF2                     u3221:
  6939   001EF2  EF8E  F00F         	goto	l3512
  6940   001EF6                     u3220:
  6941   001EF6  282F               	incf	___flmul@bexp^0,w,c
  6942   001EF8  A4D8               	btfss	status,2,c
  6943   001EFA  EF81  F00F         	goto	u3231
  6944   001EFE  EF83  F00F         	goto	u3230
  6945   001F02                     u3231:
  6946   001F02  EF8B  F00F         	goto	l3510
  6947   001F06                     u3230:
  6948   001F06  0E00               	movlw	0
  6949   001F08  6E1D               	movwf	___flmul@b^0,c
  6950   001F0A  0E00               	movlw	0
  6951   001F0C  6E1E               	movwf	(___flmul@b+1)^0,c
  6952   001F0E  0E00               	movlw	0
  6953   001F10  6E1F               	movwf	(___flmul@b+2)^0,c
  6954   001F12  0E00               	movlw	0
  6955   001F14  6E20               	movwf	(___flmul@b+3)^0,c
  6956   001F16                     l3510:
  6957   001F16  8E1F               	bsf	(___flmul@b+2)^0,7,c
  6958   001F18  EF96  F00F         	goto	l3514
  6959   001F1C                     l3512:
  6960   001F1C  0E00               	movlw	0
  6961   001F1E  6E1D               	movwf	___flmul@b^0,c
  6962   001F20  0E00               	movlw	0
  6963   001F22  6E1E               	movwf	(___flmul@b+1)^0,c
  6964   001F24  0E00               	movlw	0
  6965   001F26  6E1F               	movwf	(___flmul@b+2)^0,c
  6966   001F28  0E00               	movlw	0
  6967   001F2A  6E20               	movwf	(___flmul@b+3)^0,c
  6968   001F2C                     l3514:
  6969   001F2C  5024               	movf	(___flmul@a+3)^0,w,c
  6970   001F2E  0B80               	andlw	128
  6971   001F30  1A29               	xorwf	___flmul@sign^0,f,c
  6972   001F32  5024               	movf	(___flmul@a+3)^0,w,c
  6973   001F34  2424               	addwf	(___flmul@a+3)^0,w,c
  6974   001F36  6E2E               	movwf	___flmul@aexp^0,c
  6975   001F38  AE23               	btfss	(___flmul@a+2)^0,7,c
  6976   001F3A  EFA1  F00F         	goto	u3241
  6977   001F3E  EFA3  F00F         	goto	u3240
  6978   001F42                     u3241:
  6979   001F42  EFA4  F00F         	goto	l3522
  6980   001F46                     u3240:
  6981   001F46  802E               	bsf	___flmul@aexp^0,0,c
  6982   001F48                     l3522:
  6983   001F48  502E               	movf	___flmul@aexp^0,w,c
  6984   001F4A  B4D8               	btfsc	status,2,c
  6985   001F4C  EFAA  F00F         	goto	u3251
  6986   001F50  EFAC  F00F         	goto	u3250
  6987   001F54                     u3251:
  6988   001F54  EFBF  F00F         	goto	l3530
  6989   001F58                     u3250:
  6990   001F58  282E               	incf	___flmul@aexp^0,w,c
  6991   001F5A  A4D8               	btfss	status,2,c
  6992   001F5C  EFB2  F00F         	goto	u3261
  6993   001F60  EFB4  F00F         	goto	u3260
  6994   001F64                     u3261:
  6995   001F64  EFBC  F00F         	goto	l3528
  6996   001F68                     u3260:
  6997   001F68  0E00               	movlw	0
  6998   001F6A  6E21               	movwf	___flmul@a^0,c
  6999   001F6C  0E00               	movlw	0
  7000   001F6E  6E22               	movwf	(___flmul@a+1)^0,c
  7001   001F70  0E00               	movlw	0
  7002   001F72  6E23               	movwf	(___flmul@a+2)^0,c
  7003   001F74  0E00               	movlw	0
  7004   001F76  6E24               	movwf	(___flmul@a+3)^0,c
  7005   001F78                     l3528:
  7006   001F78  8E23               	bsf	(___flmul@a+2)^0,7,c
  7007   001F7A  EFC7  F00F         	goto	l1158
  7008   001F7E                     l3530:
  7009   001F7E  0E00               	movlw	0
  7010   001F80  6E21               	movwf	___flmul@a^0,c
  7011   001F82  0E00               	movlw	0
  7012   001F84  6E22               	movwf	(___flmul@a+1)^0,c
  7013   001F86  0E00               	movlw	0
  7014   001F88  6E23               	movwf	(___flmul@a+2)^0,c
  7015   001F8A  0E00               	movlw	0
  7016   001F8C  6E24               	movwf	(___flmul@a+3)^0,c
  7017   001F8E                     l1158:
  7018   001F8E  502E               	movf	___flmul@aexp^0,w,c
  7019   001F90  B4D8               	btfsc	status,2,c
  7020   001F92  EFCD  F00F         	goto	u3271
  7021   001F96  EFCF  F00F         	goto	u3270
  7022   001F9A                     u3271:
  7023   001F9A  EFD7  F00F         	goto	l3534
  7024   001F9E                     u3270:
  7025   001F9E  502F               	movf	___flmul@bexp^0,w,c
  7026   001FA0  A4D8               	btfss	status,2,c
  7027   001FA2  EFD5  F00F         	goto	u3281
  7028   001FA6  EFD7  F00F         	goto	u3280
  7029   001FAA                     u3281:
  7030   001FAA  EFE1  F00F         	goto	l3538
  7031   001FAE                     u3280:
  7032   001FAE                     l3534:
  7033   001FAE  0E00               	movlw	0
  7034   001FB0  6E1D               	movwf	?___flmul^0,c
  7035   001FB2  0E00               	movlw	0
  7036   001FB4  6E1E               	movwf	(?___flmul+1)^0,c
  7037   001FB6  0E00               	movlw	0
  7038   001FB8  6E1F               	movwf	(?___flmul+2)^0,c
  7039   001FBA  0E00               	movlw	0
  7040   001FBC  6E20               	movwf	(?___flmul+3)^0,c
  7041   001FBE  EF79  F011         	goto	l1162
  7042   001FC2                     l3538:
  7043   001FC2  5023               	movf	(___flmul@a+2)^0,w,c
  7044   001FC4  021D               	mulwf	___flmul@b^0,c
  7045   001FC6  CFF3 F034          	movff	prodl,___flmul@temp
  7046   001FCA  CFF4 F035          	movff	prodh,___flmul@temp+1
  7047   001FCE  5034               	movf	___flmul@temp^0,w,c
  7048   001FD0  6E2A               	movwf	___flmul@grs^0,c
  7049   001FD2  6A2B               	clrf	(___flmul@grs+1)^0,c
  7050   001FD4  6A2C               	clrf	(___flmul@grs+2)^0,c
  7051   001FD6  6A2D               	clrf	(___flmul@grs+3)^0,c
  7052   001FD8  5035               	movf	(___flmul@temp+1)^0,w,c
  7053   001FDA  6E30               	movwf	___flmul@prod^0,c
  7054   001FDC  6A31               	clrf	(___flmul@prod+1)^0,c
  7055   001FDE  6A32               	clrf	(___flmul@prod+2)^0,c
  7056   001FE0  6A33               	clrf	(___flmul@prod+3)^0,c
  7057   001FE2  5022               	movf	(___flmul@a+1)^0,w,c
  7058   001FE4  021E               	mulwf	(___flmul@b+1)^0,c
  7059   001FE6  CFF3 F034          	movff	prodl,___flmul@temp
  7060   001FEA  CFF4 F035          	movff	prodh,___flmul@temp+1
  7061   001FEE  5034               	movf	___flmul@temp^0,w,c
  7062   001FF0  262A               	addwf	___flmul@grs^0,f,c
  7063   001FF2  0E00               	movlw	0
  7064   001FF4  222B               	addwfc	(___flmul@grs+1)^0,f,c
  7065   001FF6  222C               	addwfc	(___flmul@grs+2)^0,f,c
  7066   001FF8  222D               	addwfc	(___flmul@grs+3)^0,f,c
  7067   001FFA  5035               	movf	(___flmul@temp+1)^0,w,c
  7068   001FFC  2630               	addwf	___flmul@prod^0,f,c
  7069   001FFE  0E00               	movlw	0
  7070   002000  2231               	addwfc	(___flmul@prod+1)^0,f,c
  7071   002002  2232               	addwfc	(___flmul@prod+2)^0,f,c
  7072   002004  2233               	addwfc	(___flmul@prod+3)^0,f,c
  7073   002006  5021               	movf	___flmul@a^0,w,c
  7074   002008  021F               	mulwf	(___flmul@b+2)^0,c
  7075   00200A  CFF3 F034          	movff	prodl,___flmul@temp
  7076   00200E  CFF4 F035          	movff	prodh,___flmul@temp+1
  7077   002012  5034               	movf	___flmul@temp^0,w,c
  7078   002014  262A               	addwf	___flmul@grs^0,f,c
  7079   002016  0E00               	movlw	0
  7080   002018  222B               	addwfc	(___flmul@grs+1)^0,f,c
  7081   00201A  222C               	addwfc	(___flmul@grs+2)^0,f,c
  7082   00201C  222D               	addwfc	(___flmul@grs+3)^0,f,c
  7083   00201E  5035               	movf	(___flmul@temp+1)^0,w,c
  7084   002020  2630               	addwf	___flmul@prod^0,f,c
  7085   002022  0E00               	movlw	0
  7086   002024  2231               	addwfc	(___flmul@prod+1)^0,f,c
  7087   002026  2232               	addwfc	(___flmul@prod+2)^0,f,c
  7088   002028  2233               	addwfc	(___flmul@prod+3)^0,f,c
  7089   00202A  C02C  F02D         	movff	___flmul@grs+2,___flmul@grs+3
  7090   00202E  C02B  F02C         	movff	___flmul@grs+1,___flmul@grs+2
  7091   002032  C02A  F02B         	movff	___flmul@grs,___flmul@grs+1
  7092   002036  6A2A               	clrf	___flmul@grs^0,c
  7093   002038  5021               	movf	___flmul@a^0,w,c
  7094   00203A  021E               	mulwf	(___flmul@b+1)^0,c
  7095   00203C  CFF3 F034          	movff	prodl,___flmul@temp
  7096   002040  CFF4 F035          	movff	prodh,___flmul@temp+1
  7097   002044  5034               	movf	___flmul@temp^0,w,c
  7098   002046  262A               	addwf	___flmul@grs^0,f,c
  7099   002048  5035               	movf	(___flmul@temp+1)^0,w,c
  7100   00204A  222B               	addwfc	(___flmul@grs+1)^0,f,c
  7101   00204C  0E00               	movlw	0
  7102   00204E  222C               	addwfc	(___flmul@grs+2)^0,f,c
  7103   002050  0E00               	movlw	0
  7104   002052  222D               	addwfc	(___flmul@grs+3)^0,f,c
  7105   002054  5022               	movf	(___flmul@a+1)^0,w,c
  7106   002056  021D               	mulwf	___flmul@b^0,c
  7107   002058  CFF3 F034          	movff	prodl,___flmul@temp
  7108   00205C  CFF4 F035          	movff	prodh,___flmul@temp+1
  7109   002060  5034               	movf	___flmul@temp^0,w,c
  7110   002062  262A               	addwf	___flmul@grs^0,f,c
  7111   002064  5035               	movf	(___flmul@temp+1)^0,w,c
  7112   002066  222B               	addwfc	(___flmul@grs+1)^0,f,c
  7113   002068  0E00               	movlw	0
  7114   00206A  222C               	addwfc	(___flmul@grs+2)^0,f,c
  7115   00206C  0E00               	movlw	0
  7116   00206E  222D               	addwfc	(___flmul@grs+3)^0,f,c
  7117   002070  C02C  F02D         	movff	___flmul@grs+2,___flmul@grs+3
  7118   002074  C02B  F02C         	movff	___flmul@grs+1,___flmul@grs+2
  7119   002078  C02A  F02B         	movff	___flmul@grs,___flmul@grs+1
  7120   00207C  6A2A               	clrf	___flmul@grs^0,c
  7121   00207E  5021               	movf	___flmul@a^0,w,c
  7122   002080  021D               	mulwf	___flmul@b^0,c
  7123   002082  CFF3 F034          	movff	prodl,___flmul@temp
  7124   002086  CFF4 F035          	movff	prodh,___flmul@temp+1
  7125   00208A  5034               	movf	___flmul@temp^0,w,c
  7126   00208C  262A               	addwf	___flmul@grs^0,f,c
  7127   00208E  5035               	movf	(___flmul@temp+1)^0,w,c
  7128   002090  222B               	addwfc	(___flmul@grs+1)^0,f,c
  7129   002092  0E00               	movlw	0
  7130   002094  222C               	addwfc	(___flmul@grs+2)^0,f,c
  7131   002096  0E00               	movlw	0
  7132   002098  222D               	addwfc	(___flmul@grs+3)^0,f,c
  7133   00209A  5023               	movf	(___flmul@a+2)^0,w,c
  7134   00209C  021E               	mulwf	(___flmul@b+1)^0,c
  7135   00209E  CFF3 F034          	movff	prodl,___flmul@temp
  7136   0020A2  CFF4 F035          	movff	prodh,___flmul@temp+1
  7137   0020A6  5034               	movf	___flmul@temp^0,w,c
  7138   0020A8  2630               	addwf	___flmul@prod^0,f,c
  7139   0020AA  5035               	movf	(___flmul@temp+1)^0,w,c
  7140   0020AC  2231               	addwfc	(___flmul@prod+1)^0,f,c
  7141   0020AE  0E00               	movlw	0
  7142   0020B0  2232               	addwfc	(___flmul@prod+2)^0,f,c
  7143   0020B2  0E00               	movlw	0
  7144   0020B4  2233               	addwfc	(___flmul@prod+3)^0,f,c
  7145   0020B6  5022               	movf	(___flmul@a+1)^0,w,c
  7146   0020B8  021F               	mulwf	(___flmul@b+2)^0,c
  7147   0020BA  CFF3 F034          	movff	prodl,___flmul@temp
  7148   0020BE  CFF4 F035          	movff	prodh,___flmul@temp+1
  7149   0020C2  5034               	movf	___flmul@temp^0,w,c
  7150   0020C4  2630               	addwf	___flmul@prod^0,f,c
  7151   0020C6  5035               	movf	(___flmul@temp+1)^0,w,c
  7152   0020C8  2231               	addwfc	(___flmul@prod+1)^0,f,c
  7153   0020CA  0E00               	movlw	0
  7154   0020CC  2232               	addwfc	(___flmul@prod+2)^0,f,c
  7155   0020CE  0E00               	movlw	0
  7156   0020D0  2233               	addwfc	(___flmul@prod+3)^0,f,c
  7157   0020D2  5023               	movf	(___flmul@a+2)^0,w,c
  7158   0020D4  021F               	mulwf	(___flmul@b+2)^0,c
  7159   0020D6  CFF3 F034          	movff	prodl,___flmul@temp
  7160   0020DA  CFF4 F035          	movff	prodh,___flmul@temp+1
  7161   0020DE  5034               	movf	___flmul@temp^0,w,c
  7162   0020E0  6E25               	movwf	??___flmul^0,c
  7163   0020E2  5035               	movf	(___flmul@temp+1)^0,w,c
  7164   0020E4  6E26               	movwf	(??___flmul+1)^0,c
  7165   0020E6  6A27               	clrf	(??___flmul+2)^0,c
  7166   0020E8  6A28               	clrf	(??___flmul+3)^0,c
  7167   0020EA  C027  F028         	movff	??___flmul+2,??___flmul+3
  7168   0020EE  C026  F027         	movff	??___flmul+1,??___flmul+2
  7169   0020F2  C025  F026         	movff	??___flmul,??___flmul+1
  7170   0020F6  6A25               	clrf	??___flmul^0,c
  7171   0020F8  5025               	movf	??___flmul^0,w,c
  7172   0020FA  2630               	addwf	___flmul@prod^0,f,c
  7173   0020FC  5026               	movf	(??___flmul+1)^0,w,c
  7174   0020FE  2231               	addwfc	(___flmul@prod+1)^0,f,c
  7175   002100  5027               	movf	(??___flmul+2)^0,w,c
  7176   002102  2232               	addwfc	(___flmul@prod+2)^0,f,c
  7177   002104  5028               	movf	(??___flmul+3)^0,w,c
  7178   002106  2233               	addwfc	(___flmul@prod+3)^0,f,c
  7179   002108  C02A  F025         	movff	___flmul@grs,??___flmul
  7180   00210C  C02B  F026         	movff	___flmul@grs+1,??___flmul+1
  7181   002110  C02C  F027         	movff	___flmul@grs+2,??___flmul+2
  7182   002114  C02D  F028         	movff	___flmul@grs+3,??___flmul+3
  7183   002118  0E19               	movlw	25
  7184   00211A  EF94  F010         	goto	u3290
  7185   00211E                     u3295:
  7186   00211E  90D8               	bcf	status,0,c
  7187   002120  3228               	rrcf	(??___flmul+3)^0,f,c
  7188   002122  3227               	rrcf	(??___flmul+2)^0,f,c
  7189   002124  3226               	rrcf	(??___flmul+1)^0,f,c
  7190   002126  3225               	rrcf	??___flmul^0,f,c
  7191   002128                     u3290:
  7192   002128  2EE8               	decfsz	wreg,f,c
  7193   00212A  EF8F  F010         	goto	u3295
  7194   00212E  5025               	movf	??___flmul^0,w,c
  7195   002130  2630               	addwf	___flmul@prod^0,f,c
  7196   002132  5026               	movf	(??___flmul+1)^0,w,c
  7197   002134  2231               	addwfc	(___flmul@prod+1)^0,f,c
  7198   002136  5027               	movf	(??___flmul+2)^0,w,c
  7199   002138  2232               	addwfc	(___flmul@prod+2)^0,f,c
  7200   00213A  5028               	movf	(??___flmul+3)^0,w,c
  7201   00213C  2233               	addwfc	(___flmul@prod+3)^0,f,c
  7202   00213E  C02C  F02D         	movff	___flmul@grs+2,___flmul@grs+3
  7203   002142  C02B  F02C         	movff	___flmul@grs+1,___flmul@grs+2
  7204   002146  C02A  F02B         	movff	___flmul@grs,___flmul@grs+1
  7205   00214A  6A2A               	clrf	___flmul@grs^0,c
  7206   00214C  502E               	movf	___flmul@aexp^0,w,c
  7207   00214E  C02F  F025         	movff	___flmul@bexp,??___flmul
  7208   002152  6A26               	clrf	(??___flmul+1)^0,c
  7209   002154  2625               	addwf	??___flmul^0,f,c
  7210   002156  0E00               	movlw	0
  7211   002158  2226               	addwfc	(??___flmul+1)^0,f,c
  7212   00215A  0E82               	movlw	130
  7213   00215C  2425               	addwf	??___flmul^0,w,c
  7214   00215E  6E34               	movwf	___flmul@temp^0,c
  7215   002160  0EFF               	movlw	255
  7216   002162  2026               	addwfc	(??___flmul+1)^0,w,c
  7217   002164  6E35               	movwf	(___flmul@temp+1)^0,c
  7218   002166  EFCA  F010         	goto	l3586
  7219   00216A                     l3580:
  7220   00216A  90D8               	bcf	status,0,c
  7221   00216C  3630               	rlcf	___flmul@prod^0,f,c
  7222   00216E  3631               	rlcf	(___flmul@prod+1)^0,f,c
  7223   002170  3632               	rlcf	(___flmul@prod+2)^0,f,c
  7224   002172  3633               	rlcf	(___flmul@prod+3)^0,f,c
  7225   002174  AE2D               	btfss	(___flmul@grs+3)^0,7,c
  7226   002176  EFBF  F010         	goto	u3301
  7227   00217A  EFC1  F010         	goto	u3300
  7228   00217E                     u3301:
  7229   00217E  EFC2  F010         	goto	l1165
  7230   002182                     u3300:
  7231   002182  8030               	bsf	___flmul@prod^0,0,c
  7232   002184                     l1165:
  7233   002184  90D8               	bcf	status,0,c
  7234   002186  362A               	rlcf	___flmul@grs^0,f,c
  7235   002188  362B               	rlcf	(___flmul@grs+1)^0,f,c
  7236   00218A  362C               	rlcf	(___flmul@grs+2)^0,f,c
  7237   00218C  362D               	rlcf	(___flmul@grs+3)^0,f,c
  7238   00218E  0634               	decf	___flmul@temp^0,f,c
  7239   002190  A0D8               	btfss	status,0,c
  7240   002192  0635               	decf	(___flmul@temp+1)^0,f,c
  7241   002194                     l3586:
  7242   002194  AE32               	btfss	(___flmul@prod+2)^0,7,c
  7243   002196  EFCF  F010         	goto	u3311
  7244   00219A  EFD1  F010         	goto	u3310
  7245   00219E                     u3311:
  7246   00219E  EFB5  F010         	goto	l3580
  7247   0021A2                     u3310:
  7248   0021A2  0E00               	movlw	0
  7249   0021A4  6E2E               	movwf	___flmul@aexp^0,c
  7250   0021A6  AE2D               	btfss	(___flmul@grs+3)^0,7,c
  7251   0021A8  EFD8  F010         	goto	u3321
  7252   0021AC  EFDA  F010         	goto	u3320
  7253   0021B0                     u3321:
  7254   0021B0  EFFE  F010         	goto	l1167
  7255   0021B4                     u3320:
  7256   0021B4  0EFF               	movlw	255
  7257   0021B6  142A               	andwf	___flmul@grs^0,w,c
  7258   0021B8  6E25               	movwf	??___flmul^0,c
  7259   0021BA  0EFF               	movlw	255
  7260   0021BC  142B               	andwf	(___flmul@grs+1)^0,w,c
  7261   0021BE  6E26               	movwf	(??___flmul+1)^0,c
  7262   0021C0  0EFF               	movlw	255
  7263   0021C2  142C               	andwf	(___flmul@grs+2)^0,w,c
  7264   0021C4  6E27               	movwf	(??___flmul+2)^0,c
  7265   0021C6  0E7F               	movlw	127
  7266   0021C8  142D               	andwf	(___flmul@grs+3)^0,w,c
  7267   0021CA  6E28               	movwf	(??___flmul+3)^0,c
  7268   0021CC  5025               	movf	??___flmul^0,w,c
  7269   0021CE  1026               	iorwf	(??___flmul+1)^0,w,c
  7270   0021D0  1027               	iorwf	(??___flmul+2)^0,w,c
  7271   0021D2  1028               	iorwf	(??___flmul+3)^0,w,c
  7272   0021D4  B4D8               	btfsc	status,2,c
  7273   0021D6  EFEF  F010         	goto	u3331
  7274   0021DA  EFF1  F010         	goto	u3330
  7275   0021DE                     u3331:
  7276   0021DE  EFF5  F010         	goto	l1168
  7277   0021E2                     u3330:
  7278   0021E2                     l3594:
  7279   0021E2  0E01               	movlw	1
  7280   0021E4  6E2E               	movwf	___flmul@aexp^0,c
  7281   0021E6  EFFE  F010         	goto	l1167
  7282   0021EA                     l1168:
  7283   0021EA  A030               	btfss	___flmul@prod^0,0,c
  7284   0021EC  EFFA  F010         	goto	u3341
  7285   0021F0  EFFC  F010         	goto	u3340
  7286   0021F4                     u3341:
  7287   0021F4  EFFE  F010         	goto	l1167
  7288   0021F8                     u3340:
  7289   0021F8  EFF1  F010         	goto	l3594
  7290   0021FC                     l1167:
  7291   0021FC  502E               	movf	___flmul@aexp^0,w,c
  7292   0021FE  B4D8               	btfsc	status,2,c
  7293   002200  EF04  F011         	goto	u3351
  7294   002204  EF06  F011         	goto	u3350
  7295   002208                     u3351:
  7296   002208  EF2A  F011         	goto	l3606
  7297   00220C                     u3350:
  7298   00220C  0E01               	movlw	1
  7299   00220E  2630               	addwf	___flmul@prod^0,f,c
  7300   002210  0E00               	movlw	0
  7301   002212  2231               	addwfc	(___flmul@prod+1)^0,f,c
  7302   002214  2232               	addwfc	(___flmul@prod+2)^0,f,c
  7303   002216  2233               	addwfc	(___flmul@prod+3)^0,f,c
  7304   002218  A033               	btfss	(___flmul@prod+3)^0,0,c
  7305   00221A  EF11  F011         	goto	u3361
  7306   00221E  EF13  F011         	goto	u3360
  7307   002222                     u3361:
  7308   002222  EF2A  F011         	goto	l3606
  7309   002226                     u3360:
  7310   002226  C030  F025         	movff	___flmul@prod,??___flmul
  7311   00222A  C031  F026         	movff	___flmul@prod+1,??___flmul+1
  7312   00222E  C032  F027         	movff	___flmul@prod+2,??___flmul+2
  7313   002232  C033  F028         	movff	___flmul@prod+3,??___flmul+3
  7314   002236  3428               	rlcf	(??___flmul+3)^0,w,c
  7315   002238  3228               	rrcf	(??___flmul+3)^0,f,c
  7316   00223A  3227               	rrcf	(??___flmul+2)^0,f,c
  7317   00223C  3226               	rrcf	(??___flmul+1)^0,f,c
  7318   00223E  3225               	rrcf	??___flmul^0,f,c
  7319   002240  C025  F030         	movff	??___flmul,___flmul@prod
  7320   002244  C026  F031         	movff	??___flmul+1,___flmul@prod+1
  7321   002248  C027  F032         	movff	??___flmul+2,___flmul@prod+2
  7322   00224C  C028  F033         	movff	??___flmul+3,___flmul@prod+3
  7323   002250  4A34               	infsnz	___flmul@temp^0,f,c
  7324   002252  2A35               	incf	(___flmul@temp+1)^0,f,c
  7325   002254                     l3606:
  7326   002254  BE35               	btfsc	(___flmul@temp+1)^0,7,c
  7327   002256  EF35  F011         	goto	u3371
  7328   00225A  5035               	movf	(___flmul@temp+1)^0,w,c
  7329   00225C  E108               	bnz	u3370
  7330   00225E  2834               	incf	___flmul@temp^0,w,c
  7331   002260  A0D8               	btfss	status,0,c
  7332   002262  EF35  F011         	goto	u3371
  7333   002266  EF37  F011         	goto	u3370
  7334   00226A                     u3371:
  7335   00226A  EF41  F011         	goto	l3610
  7336   00226E                     u3370:
  7337   00226E  0E00               	movlw	0
  7338   002270  6E30               	movwf	___flmul@prod^0,c
  7339   002272  0E00               	movlw	0
  7340   002274  6E31               	movwf	(___flmul@prod+1)^0,c
  7341   002276  0E80               	movlw	128
  7342   002278  6E32               	movwf	(___flmul@prod+2)^0,c
  7343   00227A  0E7F               	movlw	127
  7344   00227C  6E33               	movwf	(___flmul@prod+3)^0,c
  7345   00227E  EF6F  F011         	goto	l3622
  7346   002282                     l3610:
  7347   002282  BE35               	btfsc	(___flmul@temp+1)^0,7,c
  7348   002284  EF4E  F011         	goto	u3380
  7349   002288  5035               	movf	(___flmul@temp+1)^0,w,c
  7350   00228A  E106               	bnz	u3381
  7351   00228C  0434               	decf	___flmul@temp^0,w,c
  7352   00228E  B0D8               	btfsc	status,0,c
  7353   002290  EF4C  F011         	goto	u3381
  7354   002294  EF4E  F011         	goto	u3380
  7355   002298                     u3381:
  7356   002298  EF5A  F011         	goto	l1175
  7357   00229C                     u3380:
  7358   00229C  0E00               	movlw	0
  7359   00229E  6E30               	movwf	___flmul@prod^0,c
  7360   0022A0  0E00               	movlw	0
  7361   0022A2  6E31               	movwf	(___flmul@prod+1)^0,c
  7362   0022A4  0E00               	movlw	0
  7363   0022A6  6E32               	movwf	(___flmul@prod+2)^0,c
  7364   0022A8  0E00               	movlw	0
  7365   0022AA  6E33               	movwf	(___flmul@prod+3)^0,c
  7366   0022AC  0E00               	movlw	0
  7367   0022AE  6E29               	movwf	___flmul@sign^0,c
  7368   0022B0  EF6F  F011         	goto	l3622
  7369   0022B4                     l1175:
  7370   0022B4  C034  F02F         	movff	___flmul@temp,___flmul@bexp
  7371   0022B8  0EFF               	movlw	255
  7372   0022BA  1630               	andwf	___flmul@prod^0,f,c
  7373   0022BC  0EFF               	movlw	255
  7374   0022BE  1631               	andwf	(___flmul@prod+1)^0,f,c
  7375   0022C0  0E7F               	movlw	127
  7376   0022C2  1632               	andwf	(___flmul@prod+2)^0,f,c
  7377   0022C4  0E00               	movlw	0
  7378   0022C6  1633               	andwf	(___flmul@prod+3)^0,f,c
  7379   0022C8  A02F               	btfss	___flmul@bexp^0,0,c
  7380   0022CA  EF69  F011         	goto	u3391
  7381   0022CE  EF6B  F011         	goto	u3390
  7382   0022D2                     u3391:
  7383   0022D2  EF6C  F011         	goto	l3620
  7384   0022D6                     u3390:
  7385   0022D6  8E32               	bsf	(___flmul@prod+2)^0,7,c
  7386   0022D8                     l3620:
  7387   0022D8  90D8               	bcf	status,0,c
  7388   0022DA  302F               	rrcf	___flmul@bexp^0,w,c
  7389   0022DC  6E33               	movwf	(___flmul@prod+3)^0,c
  7390   0022DE                     l3622:
  7391   0022DE  5029               	movf	___flmul@sign^0,w,c
  7392   0022E0  1233               	iorwf	(___flmul@prod+3)^0,f,c
  7393   0022E2  C030  F01D         	movff	___flmul@prod,?___flmul
  7394   0022E6  C031  F01E         	movff	___flmul@prod+1,?___flmul+1
  7395   0022EA  C032  F01F         	movff	___flmul@prod+2,?___flmul+2
  7396   0022EE  C033  F020         	movff	___flmul@prod+3,?___flmul+3
  7397   0022F2                     l1162:
  7398   0022F2  0012               	return		;funcret
  7399   0022F4                     __end_of___flmul:
  7400                           	callstack 0
  7401                           
  7402 ;; *************** function ___flge *****************
  7403 ;; Defined at:
  7404 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\flge.c"
  7405 ;; Parameters:    Size  Location     Type
  7406 ;;  ff1             4   28[COMRAM] unsigned char 
  7407 ;;  ff2             4   32[COMRAM] unsigned char 
  7408 ;; Auto vars:     Size  Location     Type
  7409 ;;		None
  7410 ;; Return value:  Size  Location     Type
  7411 ;;		None               void
  7412 ;; Registers used:
  7413 ;;		wreg, status,2, status,0
  7414 ;; Tracked objects:
  7415 ;;		On entry : 0/0
  7416 ;;		On exit  : 0/0
  7417 ;;		Unchanged: 0/0
  7418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7419 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7421 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7422 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7423 ;;Total ram usage:       12 bytes
  7424 ;; Hardware stack levels used: 1
  7425 ;; Hardware stack levels required when called: 2
  7426 ;; This function calls:
  7427 ;;		Nothing
  7428 ;; This function is called by:
  7429 ;;		_colorDetect
  7430 ;;		_main
  7431 ;; This function uses a non-reentrant model
  7432 ;;
  7433                           
  7434                           	psect	text26
  7435   00366C                     __ptext26:
  7436                           	callstack 0
  7437   00366C                     ___flge:
  7438                           	callstack 27
  7439   00366C  0E00               	movlw	0
  7440   00366E  141D               	andwf	___flge@ff1^0,w,c
  7441   003670  6E25               	movwf	??___flge^0,c
  7442   003672  0E00               	movlw	0
  7443   003674  141E               	andwf	(___flge@ff1+1)^0,w,c
  7444   003676  6E26               	movwf	(??___flge+1)^0,c
  7445   003678  0E80               	movlw	128
  7446   00367A  141F               	andwf	(___flge@ff1+2)^0,w,c
  7447   00367C  6E27               	movwf	(??___flge+2)^0,c
  7448   00367E  0E7F               	movlw	127
  7449   003680  1420               	andwf	(___flge@ff1+3)^0,w,c
  7450   003682  6E28               	movwf	(??___flge+3)^0,c
  7451   003684  5025               	movf	??___flge^0,w,c
  7452   003686  1026               	iorwf	(??___flge+1)^0,w,c
  7453   003688  1027               	iorwf	(??___flge+2)^0,w,c
  7454   00368A  1028               	iorwf	(??___flge+3)^0,w,c
  7455   00368C  A4D8               	btfss	status,2,c
  7456   00368E  EF4B  F01B         	goto	u3401
  7457   003692  EF4D  F01B         	goto	u3400
  7458   003696                     u3401:
  7459   003696  EF55  F01B         	goto	l3638
  7460   00369A                     u3400:
  7461   00369A  0E00               	movlw	0
  7462   00369C  6E1D               	movwf	___flge@ff1^0,c
  7463   00369E  0E00               	movlw	0
  7464   0036A0  6E1E               	movwf	(___flge@ff1+1)^0,c
  7465   0036A2  0E00               	movlw	0
  7466   0036A4  6E1F               	movwf	(___flge@ff1+2)^0,c
  7467   0036A6  0E00               	movlw	0
  7468   0036A8  6E20               	movwf	(___flge@ff1+3)^0,c
  7469   0036AA                     l3638:
  7470   0036AA  0E00               	movlw	0
  7471   0036AC  1421               	andwf	___flge@ff2^0,w,c
  7472   0036AE  6E25               	movwf	??___flge^0,c
  7473   0036B0  0E00               	movlw	0
  7474   0036B2  1422               	andwf	(___flge@ff2+1)^0,w,c
  7475   0036B4  6E26               	movwf	(??___flge+1)^0,c
  7476   0036B6  0E80               	movlw	128
  7477   0036B8  1423               	andwf	(___flge@ff2+2)^0,w,c
  7478   0036BA  6E27               	movwf	(??___flge+2)^0,c
  7479   0036BC  0E7F               	movlw	127
  7480   0036BE  1424               	andwf	(___flge@ff2+3)^0,w,c
  7481   0036C0  6E28               	movwf	(??___flge+3)^0,c
  7482   0036C2  5025               	movf	??___flge^0,w,c
  7483   0036C4  1026               	iorwf	(??___flge+1)^0,w,c
  7484   0036C6  1027               	iorwf	(??___flge+2)^0,w,c
  7485   0036C8  1028               	iorwf	(??___flge+3)^0,w,c
  7486   0036CA  A4D8               	btfss	status,2,c
  7487   0036CC  EF6A  F01B         	goto	u3411
  7488   0036D0  EF6C  F01B         	goto	u3410
  7489   0036D4                     u3411:
  7490   0036D4  EF74  F01B         	goto	l3642
  7491   0036D8                     u3410:
  7492   0036D8  0E00               	movlw	0
  7493   0036DA  6E21               	movwf	___flge@ff2^0,c
  7494   0036DC  0E00               	movlw	0
  7495   0036DE  6E22               	movwf	(___flge@ff2+1)^0,c
  7496   0036E0  0E00               	movlw	0
  7497   0036E2  6E23               	movwf	(___flge@ff2+2)^0,c
  7498   0036E4  0E00               	movlw	0
  7499   0036E6  6E24               	movwf	(___flge@ff2+3)^0,c
  7500   0036E8                     l3642:
  7501   0036E8  AE20               	btfss	(___flge@ff1+3)^0,7,c
  7502   0036EA  EF79  F01B         	goto	u3421
  7503   0036EE  EF7B  F01B         	goto	u3420
  7504   0036F2                     u3421:
  7505   0036F2  EF84  F01B         	goto	l3646
  7506   0036F6                     u3420:
  7507   0036F6  6C1D               	negf	___flge@ff1^0,c
  7508   0036F8  1E1E               	comf	(___flge@ff1+1)^0,f,c
  7509   0036FA  B0D8               	btfsc	status,0,c
  7510   0036FC  2A1E               	incf	(___flge@ff1+1)^0,f,c
  7511   0036FE  1E1F               	comf	(___flge@ff1+2)^0,f,c
  7512   003700  B0D8               	btfsc	status,0,c
  7513   003702  2A1F               	incf	(___flge@ff1+2)^0,f,c
  7514   003704  0E80               	movlw	128
  7515   003706  5620               	subfwb	(___flge@ff1+3)^0,f,c
  7516   003708                     l3646:
  7517   003708  AE24               	btfss	(___flge@ff2+3)^0,7,c
  7518   00370A  EF89  F01B         	goto	u3431
  7519   00370E  EF8B  F01B         	goto	u3430
  7520   003712                     u3431:
  7521   003712  EF94  F01B         	goto	l809
  7522   003716                     u3430:
  7523   003716  6C21               	negf	___flge@ff2^0,c
  7524   003718  1E22               	comf	(___flge@ff2+1)^0,f,c
  7525   00371A  B0D8               	btfsc	status,0,c
  7526   00371C  2A22               	incf	(___flge@ff2+1)^0,f,c
  7527   00371E  1E23               	comf	(___flge@ff2+2)^0,f,c
  7528   003720  B0D8               	btfsc	status,0,c
  7529   003722  2A23               	incf	(___flge@ff2+2)^0,f,c
  7530   003724  0E80               	movlw	128
  7531   003726  5624               	subfwb	(___flge@ff2+3)^0,f,c
  7532   003728                     l809:
  7533   003728  0E00               	movlw	0
  7534   00372A  1A1D               	xorwf	___flge@ff1^0,f,c
  7535   00372C  0E00               	movlw	0
  7536   00372E  1A1E               	xorwf	(___flge@ff1+1)^0,f,c
  7537   003730  0E00               	movlw	0
  7538   003732  1A1F               	xorwf	(___flge@ff1+2)^0,f,c
  7539   003734  0E80               	movlw	128
  7540   003736  1A20               	xorwf	(___flge@ff1+3)^0,f,c
  7541   003738  0E00               	movlw	0
  7542   00373A  1A21               	xorwf	___flge@ff2^0,f,c
  7543   00373C  0E00               	movlw	0
  7544   00373E  1A22               	xorwf	(___flge@ff2+1)^0,f,c
  7545   003740  0E00               	movlw	0
  7546   003742  1A23               	xorwf	(___flge@ff2+2)^0,f,c
  7547   003744  0E80               	movlw	128
  7548   003746  1A24               	xorwf	(___flge@ff2+3)^0,f,c
  7549   003748  5021               	movf	___flge@ff2^0,w,c
  7550   00374A  5C1D               	subwf	___flge@ff1^0,w,c
  7551   00374C  5022               	movf	(___flge@ff2+1)^0,w,c
  7552   00374E  581E               	subwfb	(___flge@ff1+1)^0,w,c
  7553   003750  5023               	movf	(___flge@ff2+2)^0,w,c
  7554   003752  581F               	subwfb	(___flge@ff1+2)^0,w,c
  7555   003754  5024               	movf	(___flge@ff2+3)^0,w,c
  7556   003756  5820               	subwfb	(___flge@ff1+3)^0,w,c
  7557   003758  B0D8               	btfsc	status,0,c
  7558   00375A  EFB1  F01B         	goto	u3441
  7559   00375E  EFB3  F01B         	goto	u3440
  7560   003762                     u3441:
  7561   003762  EFB6  F01B         	goto	l3652
  7562   003766                     u3440:
  7563   003766  90D8               	bcf	status,0,c
  7564   003768  EFB7  F01B         	goto	l814
  7565   00376C                     l3652:
  7566   00376C  80D8               	bsf	status,0,c
  7567   00376E                     l814:
  7568   00376E  0012               	return		;funcret
  7569   003770                     __end_of___flge:
  7570                           	callstack 0
  7571                           
  7572 ;; *************** function ___fldiv *****************
  7573 ;; Defined at:
  7574 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\sprcdiv.c"
  7575 ;; Parameters:    Size  Location     Type
  7576 ;;  b               4   53[COMRAM] unsigned char 
  7577 ;;  a               4   57[COMRAM] unsigned char 
  7578 ;; Auto vars:     Size  Location     Type
  7579 ;;  grs             4   72[COMRAM] unsigned long 
  7580 ;;  rem             4   65[COMRAM] unsigned long 
  7581 ;;  new_exp         2   70[COMRAM] short 
  7582 ;;  aexp            1   77[COMRAM] unsigned char 
  7583 ;;  bexp            1   76[COMRAM] unsigned char 
  7584 ;;  sign            1   69[COMRAM] unsigned char 
  7585 ;; Return value:  Size  Location     Type
  7586 ;;                  4   53[COMRAM] unsigned char 
  7587 ;; Registers used:
  7588 ;;		wreg, status,2, status,0
  7589 ;; Tracked objects:
  7590 ;;		On entry : 0/0
  7591 ;;		On exit  : 0/0
  7592 ;;		Unchanged: 0/0
  7593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7594 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7595 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7596 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7597 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7598 ;;Total ram usage:       25 bytes
  7599 ;; Hardware stack levels used: 1
  7600 ;; Hardware stack levels required when called: 2
  7601 ;; This function calls:
  7602 ;;		Nothing
  7603 ;; This function is called by:
  7604 ;;		_colorDetect
  7605 ;;		_main
  7606 ;; This function uses a non-reentrant model
  7607 ;;
  7608                           
  7609                           	psect	text27
  7610   00271C                     __ptext27:
  7611                           	callstack 0
  7612   00271C                     ___fldiv:
  7613                           	callstack 27
  7614   00271C  5039               	movf	(___fldiv@b+3)^0,w,c
  7615   00271E  0B80               	andlw	128
  7616   002720  6E46               	movwf	___fldiv@sign^0,c
  7617   002722  5039               	movf	(___fldiv@b+3)^0,w,c
  7618   002724  2439               	addwf	(___fldiv@b+3)^0,w,c
  7619   002726  6E4D               	movwf	___fldiv@bexp^0,c
  7620   002728  AE38               	btfss	(___fldiv@b+2)^0,7,c
  7621   00272A  EF99  F013         	goto	u2981
  7622   00272E  EF9B  F013         	goto	u2980
  7623   002732                     u2981:
  7624   002732  EF9C  F013         	goto	l3366
  7625   002736                     u2980:
  7626   002736  804D               	bsf	___fldiv@bexp^0,0,c
  7627   002738                     l3366:
  7628   002738  504D               	movf	___fldiv@bexp^0,w,c
  7629   00273A  B4D8               	btfsc	status,2,c
  7630   00273C  EFA2  F013         	goto	u2991
  7631   002740  EFA4  F013         	goto	u2990
  7632   002744                     u2991:
  7633   002744  EFB9  F013         	goto	l3376
  7634   002748                     u2990:
  7635   002748  284D               	incf	___fldiv@bexp^0,w,c
  7636   00274A  A4D8               	btfss	status,2,c
  7637   00274C  EFAA  F013         	goto	u3001
  7638   002750  EFAC  F013         	goto	u3000
  7639   002754                     u3001:
  7640   002754  EFB4  F013         	goto	l3372
  7641   002758                     u3000:
  7642   002758  0E00               	movlw	0
  7643   00275A  6E36               	movwf	___fldiv@b^0,c
  7644   00275C  0E00               	movlw	0
  7645   00275E  6E37               	movwf	(___fldiv@b+1)^0,c
  7646   002760  0E00               	movlw	0
  7647   002762  6E38               	movwf	(___fldiv@b+2)^0,c
  7648   002764  0E00               	movlw	0
  7649   002766  6E39               	movwf	(___fldiv@b+3)^0,c
  7650   002768                     l3372:
  7651   002768  8E38               	bsf	(___fldiv@b+2)^0,7,c
  7652   00276A  0E00               	movlw	0
  7653   00276C  6E39               	movwf	(___fldiv@b+3)^0,c
  7654   00276E  EFC1  F013         	goto	l3378
  7655   002772                     l3376:
  7656   002772  0E00               	movlw	0
  7657   002774  6E36               	movwf	___fldiv@b^0,c
  7658   002776  0E00               	movlw	0
  7659   002778  6E37               	movwf	(___fldiv@b+1)^0,c
  7660   00277A  0E00               	movlw	0
  7661   00277C  6E38               	movwf	(___fldiv@b+2)^0,c
  7662   00277E  0E00               	movlw	0
  7663   002780  6E39               	movwf	(___fldiv@b+3)^0,c
  7664   002782                     l3378:
  7665   002782  503D               	movf	(___fldiv@a+3)^0,w,c
  7666   002784  0B80               	andlw	128
  7667   002786  1A46               	xorwf	___fldiv@sign^0,f,c
  7668   002788  503D               	movf	(___fldiv@a+3)^0,w,c
  7669   00278A  243D               	addwf	(___fldiv@a+3)^0,w,c
  7670   00278C  6E4E               	movwf	___fldiv@aexp^0,c
  7671   00278E  AE3C               	btfss	(___fldiv@a+2)^0,7,c
  7672   002790  EFCC  F013         	goto	u3011
  7673   002794  EFCE  F013         	goto	u3010
  7674   002798                     u3011:
  7675   002798  EFCF  F013         	goto	l3386
  7676   00279C                     u3010:
  7677   00279C  804E               	bsf	___fldiv@aexp^0,0,c
  7678   00279E                     l3386:
  7679   00279E  504E               	movf	___fldiv@aexp^0,w,c
  7680   0027A0  B4D8               	btfsc	status,2,c
  7681   0027A2  EFD5  F013         	goto	u3021
  7682   0027A6  EFD7  F013         	goto	u3020
  7683   0027AA                     u3021:
  7684   0027AA  EFEC  F013         	goto	l3396
  7685   0027AE                     u3020:
  7686   0027AE  284E               	incf	___fldiv@aexp^0,w,c
  7687   0027B0  A4D8               	btfss	status,2,c
  7688   0027B2  EFDD  F013         	goto	u3031
  7689   0027B6  EFDF  F013         	goto	u3030
  7690   0027BA                     u3031:
  7691   0027BA  EFE7  F013         	goto	l3392
  7692   0027BE                     u3030:
  7693   0027BE  0E00               	movlw	0
  7694   0027C0  6E3A               	movwf	___fldiv@a^0,c
  7695   0027C2  0E00               	movlw	0
  7696   0027C4  6E3B               	movwf	(___fldiv@a+1)^0,c
  7697   0027C6  0E00               	movlw	0
  7698   0027C8  6E3C               	movwf	(___fldiv@a+2)^0,c
  7699   0027CA  0E00               	movlw	0
  7700   0027CC  6E3D               	movwf	(___fldiv@a+3)^0,c
  7701   0027CE                     l3392:
  7702   0027CE  8E3C               	bsf	(___fldiv@a+2)^0,7,c
  7703   0027D0  0E00               	movlw	0
  7704   0027D2  6E3D               	movwf	(___fldiv@a+3)^0,c
  7705   0027D4  EFF4  F013         	goto	l3398
  7706   0027D8                     l3396:
  7707   0027D8  0E00               	movlw	0
  7708   0027DA  6E3A               	movwf	___fldiv@a^0,c
  7709   0027DC  0E00               	movlw	0
  7710   0027DE  6E3B               	movwf	(___fldiv@a+1)^0,c
  7711   0027E0  0E00               	movlw	0
  7712   0027E2  6E3C               	movwf	(___fldiv@a+2)^0,c
  7713   0027E4  0E00               	movlw	0
  7714   0027E6  6E3D               	movwf	(___fldiv@a+3)^0,c
  7715   0027E8                     l3398:
  7716   0027E8  503A               	movf	___fldiv@a^0,w,c
  7717   0027EA  103B               	iorwf	(___fldiv@a+1)^0,w,c
  7718   0027EC  103C               	iorwf	(___fldiv@a+2)^0,w,c
  7719   0027EE  103D               	iorwf	(___fldiv@a+3)^0,w,c
  7720   0027F0  A4D8               	btfss	status,2,c
  7721   0027F2  EFFD  F013         	goto	u3041
  7722   0027F6  EFFF  F013         	goto	u3040
  7723   0027FA                     u3041:
  7724   0027FA  EF17  F014         	goto	l3410
  7725   0027FE                     u3040:
  7726   0027FE  0E00               	movlw	0
  7727   002800  6E36               	movwf	___fldiv@b^0,c
  7728   002802  0E00               	movlw	0
  7729   002804  6E37               	movwf	(___fldiv@b+1)^0,c
  7730   002806  0E00               	movlw	0
  7731   002808  6E38               	movwf	(___fldiv@b+2)^0,c
  7732   00280A  0E00               	movlw	0
  7733   00280C  6E39               	movwf	(___fldiv@b+3)^0,c
  7734   00280E  0E80               	movlw	128
  7735   002810  1238               	iorwf	(___fldiv@b+2)^0,f,c
  7736   002812  0E7F               	movlw	127
  7737   002814  1239               	iorwf	(___fldiv@b+3)^0,f,c
  7738   002816                     l3404:
  7739   002816  5046               	movf	___fldiv@sign^0,w,c
  7740   002818  1239               	iorwf	(___fldiv@b+3)^0,f,c
  7741   00281A  C036  F036         	movff	___fldiv@b,?___fldiv
  7742   00281E  C037  F037         	movff	___fldiv@b+1,?___fldiv+1
  7743   002822  C038  F038         	movff	___fldiv@b+2,?___fldiv+2
  7744   002826  C039  F039         	movff	___fldiv@b+3,?___fldiv+3
  7745   00282A  EF5A  F015         	goto	l1126
  7746   00282E                     l3410:
  7747   00282E  504D               	movf	___fldiv@bexp^0,w,c
  7748   002830  A4D8               	btfss	status,2,c
  7749   002832  EF1D  F014         	goto	u3051
  7750   002836  EF1F  F014         	goto	u3050
  7751   00283A                     u3051:
  7752   00283A  EF29  F014         	goto	l3418
  7753   00283E                     u3050:
  7754   00283E  0E00               	movlw	0
  7755   002840  6E36               	movwf	?___fldiv^0,c
  7756   002842  0E00               	movlw	0
  7757   002844  6E37               	movwf	(?___fldiv+1)^0,c
  7758   002846  0E00               	movlw	0
  7759   002848  6E38               	movwf	(?___fldiv+2)^0,c
  7760   00284A  0E00               	movlw	0
  7761   00284C  6E39               	movwf	(?___fldiv+3)^0,c
  7762   00284E  EF5A  F015         	goto	l1126
  7763   002852                     l3418:
  7764   002852  504E               	movf	___fldiv@aexp^0,w,c
  7765   002854  C04D  F03E         	movff	___fldiv@bexp,??___fldiv
  7766   002858  6A3F               	clrf	(??___fldiv+1)^0,c
  7767   00285A  5E3E               	subwf	??___fldiv^0,f,c
  7768   00285C  0E00               	movlw	0
  7769   00285E  5A3F               	subwfb	(??___fldiv+1)^0,f,c
  7770   002860  0E7F               	movlw	127
  7771   002862  243E               	addwf	??___fldiv^0,w,c
  7772   002864  6E47               	movwf	___fldiv@new_exp^0,c
  7773   002866  0E00               	movlw	0
  7774   002868  203F               	addwfc	(??___fldiv+1)^0,w,c
  7775   00286A  6E48               	movwf	(___fldiv@new_exp+1)^0,c
  7776   00286C  C036  F042         	movff	___fldiv@b,___fldiv@rem
  7777   002870  C037  F043         	movff	___fldiv@b+1,___fldiv@rem+1
  7778   002874  C038  F044         	movff	___fldiv@b+2,___fldiv@rem+2
  7779   002878  C039  F045         	movff	___fldiv@b+3,___fldiv@rem+3
  7780   00287C  0E00               	movlw	0
  7781   00287E  6E36               	movwf	___fldiv@b^0,c
  7782   002880  0E00               	movlw	0
  7783   002882  6E37               	movwf	(___fldiv@b+1)^0,c
  7784   002884  0E00               	movlw	0
  7785   002886  6E38               	movwf	(___fldiv@b+2)^0,c
  7786   002888  0E00               	movlw	0
  7787   00288A  6E39               	movwf	(___fldiv@b+3)^0,c
  7788   00288C  0E00               	movlw	0
  7789   00288E  6E49               	movwf	___fldiv@grs^0,c
  7790   002890  0E00               	movlw	0
  7791   002892  6E4A               	movwf	(___fldiv@grs+1)^0,c
  7792   002894  0E00               	movlw	0
  7793   002896  6E4B               	movwf	(___fldiv@grs+2)^0,c
  7794   002898  0E00               	movlw	0
  7795   00289A  6E4C               	movwf	(___fldiv@grs+3)^0,c
  7796   00289C  0E00               	movlw	0
  7797   00289E  6E4E               	movwf	___fldiv@aexp^0,c
  7798   0028A0  EF8A  F014         	goto	l1128
  7799   0028A4                     l3428:
  7800   0028A4  504E               	movf	___fldiv@aexp^0,w,c
  7801   0028A6  B4D8               	btfsc	status,2,c
  7802   0028A8  EF58  F014         	goto	u3061
  7803   0028AC  EF5A  F014         	goto	u3060
  7804   0028B0                     u3061:
  7805   0028B0  EF71  F014         	goto	l3436
  7806   0028B4                     u3060:
  7807   0028B4  90D8               	bcf	status,0,c
  7808   0028B6  3642               	rlcf	___fldiv@rem^0,f,c
  7809   0028B8  3643               	rlcf	(___fldiv@rem+1)^0,f,c
  7810   0028BA  3644               	rlcf	(___fldiv@rem+2)^0,f,c
  7811   0028BC  3645               	rlcf	(___fldiv@rem+3)^0,f,c
  7812   0028BE  90D8               	bcf	status,0,c
  7813   0028C0  3636               	rlcf	___fldiv@b^0,f,c
  7814   0028C2  3637               	rlcf	(___fldiv@b+1)^0,f,c
  7815   0028C4  3638               	rlcf	(___fldiv@b+2)^0,f,c
  7816   0028C6  3639               	rlcf	(___fldiv@b+3)^0,f,c
  7817   0028C8  AE4C               	btfss	(___fldiv@grs+3)^0,7,c
  7818   0028CA  EF69  F014         	goto	u3071
  7819   0028CE  EF6B  F014         	goto	u3070
  7820   0028D2                     u3071:
  7821   0028D2  EF6C  F014         	goto	l1131
  7822   0028D6                     u3070:
  7823   0028D6  8036               	bsf	___fldiv@b^0,0,c
  7824   0028D8                     l1131:
  7825   0028D8  90D8               	bcf	status,0,c
  7826   0028DA  3649               	rlcf	___fldiv@grs^0,f,c
  7827   0028DC  364A               	rlcf	(___fldiv@grs+1)^0,f,c
  7828   0028DE  364B               	rlcf	(___fldiv@grs+2)^0,f,c
  7829   0028E0  364C               	rlcf	(___fldiv@grs+3)^0,f,c
  7830   0028E2                     l3436:
  7831   0028E2  503A               	movf	___fldiv@a^0,w,c
  7832   0028E4  5C42               	subwf	___fldiv@rem^0,w,c
  7833   0028E6  503B               	movf	(___fldiv@a+1)^0,w,c
  7834   0028E8  5843               	subwfb	(___fldiv@rem+1)^0,w,c
  7835   0028EA  503C               	movf	(___fldiv@a+2)^0,w,c
  7836   0028EC  5844               	subwfb	(___fldiv@rem+2)^0,w,c
  7837   0028EE  503D               	movf	(___fldiv@a+3)^0,w,c
  7838   0028F0  5845               	subwfb	(___fldiv@rem+3)^0,w,c
  7839   0028F2  A0D8               	btfss	status,0,c
  7840   0028F4  EF7E  F014         	goto	u3081
  7841   0028F8  EF80  F014         	goto	u3080
  7842   0028FC                     u3081:
  7843   0028FC  EF89  F014         	goto	l3442
  7844   002900                     u3080:
  7845   002900  8C4C               	bsf	(___fldiv@grs+3)^0,6,c
  7846   002902  503A               	movf	___fldiv@a^0,w,c
  7847   002904  5E42               	subwf	___fldiv@rem^0,f,c
  7848   002906  503B               	movf	(___fldiv@a+1)^0,w,c
  7849   002908  5A43               	subwfb	(___fldiv@rem+1)^0,f,c
  7850   00290A  503C               	movf	(___fldiv@a+2)^0,w,c
  7851   00290C  5A44               	subwfb	(___fldiv@rem+2)^0,f,c
  7852   00290E  503D               	movf	(___fldiv@a+3)^0,w,c
  7853   002910  5A45               	subwfb	(___fldiv@rem+3)^0,f,c
  7854   002912                     l3442:
  7855   002912  2A4E               	incf	___fldiv@aexp^0,f,c
  7856   002914                     l1128:
  7857   002914  0E19               	movlw	25
  7858   002916  644E               	cpfsgt	___fldiv@aexp^0,c
  7859   002918  EF90  F014         	goto	u3091
  7860   00291C  EF92  F014         	goto	u3090
  7861   002920                     u3091:
  7862   002920  EF52  F014         	goto	l3428
  7863   002924                     u3090:
  7864   002924  5042               	movf	___fldiv@rem^0,w,c
  7865   002926  1043               	iorwf	(___fldiv@rem+1)^0,w,c
  7866   002928  1044               	iorwf	(___fldiv@rem+2)^0,w,c
  7867   00292A  1045               	iorwf	(___fldiv@rem+3)^0,w,c
  7868   00292C  B4D8               	btfsc	status,2,c
  7869   00292E  EF9B  F014         	goto	u3101
  7870   002932  EF9D  F014         	goto	u3100
  7871   002936                     u3101:
  7872   002936  EFB5  F014         	goto	l3454
  7873   00293A                     u3100:
  7874   00293A  8049               	bsf	___fldiv@grs^0,0,c
  7875   00293C  EFB5  F014         	goto	l3454
  7876   002940                     l3448:
  7877   002940  90D8               	bcf	status,0,c
  7878   002942  3636               	rlcf	___fldiv@b^0,f,c
  7879   002944  3637               	rlcf	(___fldiv@b+1)^0,f,c
  7880   002946  3638               	rlcf	(___fldiv@b+2)^0,f,c
  7881   002948  3639               	rlcf	(___fldiv@b+3)^0,f,c
  7882   00294A  AE4C               	btfss	(___fldiv@grs+3)^0,7,c
  7883   00294C  EFAA  F014         	goto	u3111
  7884   002950  EFAC  F014         	goto	u3110
  7885   002954                     u3111:
  7886   002954  EFAD  F014         	goto	l1137
  7887   002958                     u3110:
  7888   002958  8036               	bsf	___fldiv@b^0,0,c
  7889   00295A                     l1137:
  7890   00295A  90D8               	bcf	status,0,c
  7891   00295C  3649               	rlcf	___fldiv@grs^0,f,c
  7892   00295E  364A               	rlcf	(___fldiv@grs+1)^0,f,c
  7893   002960  364B               	rlcf	(___fldiv@grs+2)^0,f,c
  7894   002962  364C               	rlcf	(___fldiv@grs+3)^0,f,c
  7895   002964  0647               	decf	___fldiv@new_exp^0,f,c
  7896   002966  A0D8               	btfss	status,0,c
  7897   002968  0648               	decf	(___fldiv@new_exp+1)^0,f,c
  7898   00296A                     l3454:
  7899   00296A  AE38               	btfss	(___fldiv@b+2)^0,7,c
  7900   00296C  EFBA  F014         	goto	u3121
  7901   002970  EFBC  F014         	goto	u3120
  7902   002974                     u3121:
  7903   002974  EFA0  F014         	goto	l3448
  7904   002978                     u3120:
  7905   002978  0E00               	movlw	0
  7906   00297A  6E4E               	movwf	___fldiv@aexp^0,c
  7907   00297C  AE4C               	btfss	(___fldiv@grs+3)^0,7,c
  7908   00297E  EFC3  F014         	goto	u3131
  7909   002982  EFC5  F014         	goto	u3130
  7910   002986                     u3131:
  7911   002986  EFE9  F014         	goto	l1139
  7912   00298A                     u3130:
  7913   00298A  0EFF               	movlw	255
  7914   00298C  1449               	andwf	___fldiv@grs^0,w,c
  7915   00298E  6E3E               	movwf	??___fldiv^0,c
  7916   002990  0EFF               	movlw	255
  7917   002992  144A               	andwf	(___fldiv@grs+1)^0,w,c
  7918   002994  6E3F               	movwf	(??___fldiv+1)^0,c
  7919   002996  0EFF               	movlw	255
  7920   002998  144B               	andwf	(___fldiv@grs+2)^0,w,c
  7921   00299A  6E40               	movwf	(??___fldiv+2)^0,c
  7922   00299C  0E7F               	movlw	127
  7923   00299E  144C               	andwf	(___fldiv@grs+3)^0,w,c
  7924   0029A0  6E41               	movwf	(??___fldiv+3)^0,c
  7925   0029A2  503E               	movf	??___fldiv^0,w,c
  7926   0029A4  103F               	iorwf	(??___fldiv+1)^0,w,c
  7927   0029A6  1040               	iorwf	(??___fldiv+2)^0,w,c
  7928   0029A8  1041               	iorwf	(??___fldiv+3)^0,w,c
  7929   0029AA  B4D8               	btfsc	status,2,c
  7930   0029AC  EFDA  F014         	goto	u3141
  7931   0029B0  EFDC  F014         	goto	u3140
  7932   0029B4                     u3141:
  7933   0029B4  EFE0  F014         	goto	l1140
  7934   0029B8                     u3140:
  7935   0029B8                     l3462:
  7936   0029B8  0E01               	movlw	1
  7937   0029BA  6E4E               	movwf	___fldiv@aexp^0,c
  7938   0029BC  EFE9  F014         	goto	l1139
  7939   0029C0                     l1140:
  7940   0029C0  A036               	btfss	___fldiv@b^0,0,c
  7941   0029C2  EFE5  F014         	goto	u3151
  7942   0029C6  EFE7  F014         	goto	u3150
  7943   0029CA                     u3151:
  7944   0029CA  EFE9  F014         	goto	l1139
  7945   0029CE                     u3150:
  7946   0029CE  EFDC  F014         	goto	l3462
  7947   0029D2                     l1139:
  7948   0029D2  504E               	movf	___fldiv@aexp^0,w,c
  7949   0029D4  B4D8               	btfsc	status,2,c
  7950   0029D6  EFEF  F014         	goto	u3161
  7951   0029DA  EFF1  F014         	goto	u3160
  7952   0029DE                     u3161:
  7953   0029DE  EF15  F015         	goto	l3474
  7954   0029E2                     u3160:
  7955   0029E2  0E01               	movlw	1
  7956   0029E4  2636               	addwf	___fldiv@b^0,f,c
  7957   0029E6  0E00               	movlw	0
  7958   0029E8  2237               	addwfc	(___fldiv@b+1)^0,f,c
  7959   0029EA  2238               	addwfc	(___fldiv@b+2)^0,f,c
  7960   0029EC  2239               	addwfc	(___fldiv@b+3)^0,f,c
  7961   0029EE  A039               	btfss	(___fldiv@b+3)^0,0,c
  7962   0029F0  EFFC  F014         	goto	u3171
  7963   0029F4  EFFE  F014         	goto	u3170
  7964   0029F8                     u3171:
  7965   0029F8  EF15  F015         	goto	l3474
  7966   0029FC                     u3170:
  7967   0029FC  C036  F03E         	movff	___fldiv@b,??___fldiv
  7968   002A00  C037  F03F         	movff	___fldiv@b+1,??___fldiv+1
  7969   002A04  C038  F040         	movff	___fldiv@b+2,??___fldiv+2
  7970   002A08  C039  F041         	movff	___fldiv@b+3,??___fldiv+3
  7971   002A0C  3441               	rlcf	(??___fldiv+3)^0,w,c
  7972   002A0E  3241               	rrcf	(??___fldiv+3)^0,f,c
  7973   002A10  3240               	rrcf	(??___fldiv+2)^0,f,c
  7974   002A12  323F               	rrcf	(??___fldiv+1)^0,f,c
  7975   002A14  323E               	rrcf	??___fldiv^0,f,c
  7976   002A16  C03E  F036         	movff	??___fldiv,___fldiv@b
  7977   002A1A  C03F  F037         	movff	??___fldiv+1,___fldiv@b+1
  7978   002A1E  C040  F038         	movff	??___fldiv+2,___fldiv@b+2
  7979   002A22  C041  F039         	movff	??___fldiv+3,___fldiv@b+3
  7980   002A26  4A47               	infsnz	___fldiv@new_exp^0,f,c
  7981   002A28  2A48               	incf	(___fldiv@new_exp+1)^0,f,c
  7982   002A2A                     l3474:
  7983   002A2A  BE48               	btfsc	(___fldiv@new_exp+1)^0,7,c
  7984   002A2C  EF20  F015         	goto	u3181
  7985   002A30  5048               	movf	(___fldiv@new_exp+1)^0,w,c
  7986   002A32  E108               	bnz	u3180
  7987   002A34  2847               	incf	___fldiv@new_exp^0,w,c
  7988   002A36  A0D8               	btfss	status,0,c
  7989   002A38  EF20  F015         	goto	u3181
  7990   002A3C  EF22  F015         	goto	u3180
  7991   002A40                     u3181:
  7992   002A40  EF2D  F015         	goto	l3478
  7993   002A44                     u3180:
  7994   002A44  0E00               	movlw	0
  7995   002A46  6E48               	movwf	(___fldiv@new_exp+1)^0,c
  7996   002A48  6847               	setf	___fldiv@new_exp^0,c
  7997   002A4A  0E00               	movlw	0
  7998   002A4C  6E36               	movwf	___fldiv@b^0,c
  7999   002A4E  0E00               	movlw	0
  8000   002A50  6E37               	movwf	(___fldiv@b+1)^0,c
  8001   002A52  0E00               	movlw	0
  8002   002A54  6E38               	movwf	(___fldiv@b+2)^0,c
  8003   002A56  0E00               	movlw	0
  8004   002A58  6E39               	movwf	(___fldiv@b+3)^0,c
  8005   002A5A                     l3478:
  8006   002A5A  BE48               	btfsc	(___fldiv@new_exp+1)^0,7,c
  8007   002A5C  EF3A  F015         	goto	u3190
  8008   002A60  5048               	movf	(___fldiv@new_exp+1)^0,w,c
  8009   002A62  E106               	bnz	u3191
  8010   002A64  0447               	decf	___fldiv@new_exp^0,w,c
  8011   002A66  B0D8               	btfsc	status,0,c
  8012   002A68  EF38  F015         	goto	u3191
  8013   002A6C  EF3A  F015         	goto	u3190
  8014   002A70                     u3191:
  8015   002A70  EF48  F015         	goto	l3482
  8016   002A74                     u3190:
  8017   002A74  0E00               	movlw	0
  8018   002A76  6E48               	movwf	(___fldiv@new_exp+1)^0,c
  8019   002A78  0E00               	movlw	0
  8020   002A7A  6E47               	movwf	___fldiv@new_exp^0,c
  8021   002A7C  0E00               	movlw	0
  8022   002A7E  6E36               	movwf	___fldiv@b^0,c
  8023   002A80  0E00               	movlw	0
  8024   002A82  6E37               	movwf	(___fldiv@b+1)^0,c
  8025   002A84  0E00               	movlw	0
  8026   002A86  6E38               	movwf	(___fldiv@b+2)^0,c
  8027   002A88  0E00               	movlw	0
  8028   002A8A  6E39               	movwf	(___fldiv@b+3)^0,c
  8029   002A8C  0E00               	movlw	0
  8030   002A8E  6E46               	movwf	___fldiv@sign^0,c
  8031   002A90                     l3482:
  8032   002A90  C047  F04D         	movff	___fldiv@new_exp,___fldiv@bexp
  8033   002A94  A04D               	btfss	___fldiv@bexp^0,0,c
  8034   002A96  EF4F  F015         	goto	u3201
  8035   002A9A  EF51  F015         	goto	u3200
  8036   002A9E                     u3201:
  8037   002A9E  EF54  F015         	goto	l3488
  8038   002AA2                     u3200:
  8039   002AA2  8E38               	bsf	(___fldiv@b+2)^0,7,c
  8040   002AA4  EF55  F015         	goto	l3490
  8041   002AA8                     l3488:
  8042   002AA8  9E38               	bcf	(___fldiv@b+2)^0,7,c
  8043   002AAA                     l3490:
  8044   002AAA  90D8               	bcf	status,0,c
  8045   002AAC  304D               	rrcf	___fldiv@bexp^0,w,c
  8046   002AAE  6E39               	movwf	(___fldiv@b+3)^0,c
  8047   002AB0  EF0B  F014         	goto	l3404
  8048   002AB4                     l1126:
  8049   002AB4  0012               	return		;funcret
  8050   002AB6                     __end_of___fldiv:
  8051                           	callstack 0
  8052                           
  8053 ;; *************** function _ambientCal *****************
  8054 ;; Defined at:
  8055 ;;		line 99 in file "MazeRobot.X/color.c"
  8056 ;; Parameters:    Size  Location     Type
  8057 ;;  v               2   17[COMRAM] PTR struct RGB
  8058 ;;		 -> main@ambientRGBVal(8), 
  8059 ;; Auto vars:     Size  Location     Type
  8060 ;;  i               2   21[COMRAM] int 
  8061 ;; Return value:  Size  Location     Type
  8062 ;;                  1    wreg      void 
  8063 ;; Registers used:
  8064 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8065 ;; Tracked objects:
  8066 ;;		On entry : 0/0
  8067 ;;		On exit  : 0/0
  8068 ;;		Unchanged: 0/0
  8069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8070 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8071 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8072 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8073 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8074 ;;Total ram usage:        6 bytes
  8075 ;; Hardware stack levels used: 1
  8076 ;; Hardware stack levels required when called: 6
  8077 ;; This function calls:
  8078 ;;		_getColor
  8079 ;; This function is called by:
  8080 ;;		_main
  8081 ;; This function uses a non-reentrant model
  8082 ;;
  8083                           
  8084                           	psect	text28
  8085   003854                     __ptext28:
  8086                           	callstack 0
  8087   003854                     _ambientCal:
  8088                           	callstack 24
  8089   003854                     
  8090                           ;MazeRobot.X/color.c: 102:     for(int i = 0;i<20;i++){
  8091   003854  0E00               	movlw	0
  8092   003856  6E17               	movwf	(ambientCal@i+1)^0,c
  8093   003858  0E00               	movlw	0
  8094   00385A  6E16               	movwf	ambientCal@i^0,c
  8095   00385C                     l3718:
  8096                           
  8097                           ;MazeRobot.X/color.c: 103:             LATDbits.LATD7 = !LATDbits.LATD7;
  8098   00385C  AE7C               	btfss	124,7,c	;volatile
  8099   00385E  EF33  F01C         	goto	u3551
  8100   003862  EF37  F01C         	goto	u3550
  8101   003866                     u3551:
  8102   003866  6A14               	clrf	??_ambientCal^0,c
  8103   003868  2A14               	incf	??_ambientCal^0,f,c
  8104   00386A  EF38  F01C         	goto	u3568
  8105   00386E                     u3550:
  8106   00386E  6A14               	clrf	??_ambientCal^0,c
  8107   003870                     u3568:
  8108   003870  3214               	rrcf	??_ambientCal^0,f,c
  8109   003872  3214               	rrcf	??_ambientCal^0,f,c
  8110   003874  507C               	movf	124,w,c	;volatile
  8111   003876  1814               	xorwf	??_ambientCal^0,w,c
  8112   003878  0B7F               	andlw	-129
  8113   00387A  1814               	xorwf	??_ambientCal^0,w,c
  8114   00387C  6E7C               	movwf	124,c	;volatile
  8115   00387E                     
  8116                           ;MazeRobot.X/color.c: 104:             _delay((unsigned long)((100)*(64000000/4000.0)));
  8117   00387E  0E09               	movlw	9
  8118   003880  6E15               	movwf	(??_ambientCal+1)^0,c
  8119   003882  0E1E               	movlw	30
  8120   003884  6E14               	movwf	??_ambientCal^0,c
  8121   003886  0EE4               	movlw	228
  8122   003888                     u5457:
  8123   003888  2EE8               	decfsz	wreg,f,c
  8124   00388A  D7FE               	bra	u5457
  8125   00388C  2E14               	decfsz	??_ambientCal^0,f,c
  8126   00388E  D7FC               	bra	u5457
  8127   003890  2E15               	decfsz	(??_ambientCal+1)^0,f,c
  8128   003892  D7FA               	bra	u5457
  8129   003894  D000               	nop2	
  8130                           
  8131                           ;MazeRobot.X/color.c: 105:             }
  8132   003896  4A16               	infsnz	ambientCal@i^0,f,c
  8133   003898  2A17               	incf	(ambientCal@i+1)^0,f,c
  8134   00389A  BE17               	btfsc	(ambientCal@i+1)^0,7,c
  8135   00389C  EF59  F01C         	goto	u3571
  8136   0038A0  5017               	movf	(ambientCal@i+1)^0,w,c
  8137   0038A2  E109               	bnz	u3570
  8138   0038A4  0E14               	movlw	20
  8139   0038A6  5C16               	subwf	ambientCal@i^0,w,c
  8140   0038A8  A0D8               	btfss	status,0,c
  8141   0038AA  EF59  F01C         	goto	u3571
  8142   0038AE  EF5B  F01C         	goto	u3570
  8143   0038B2                     u3571:
  8144   0038B2  EF2E  F01C         	goto	l3718
  8145   0038B6                     u3570:
  8146   0038B6                     
  8147                           ;MazeRobot.X/color.c: 106:             LATDbits.LATD7 = !LATDbits.LATD7;
  8148   0038B6  AE7C               	btfss	124,7,c	;volatile
  8149   0038B8  EF60  F01C         	goto	u3581
  8150   0038BC  EF64  F01C         	goto	u3580
  8151   0038C0                     u3581:
  8152   0038C0  6A14               	clrf	??_ambientCal^0,c
  8153   0038C2  2A14               	incf	??_ambientCal^0,f,c
  8154   0038C4  EF65  F01C         	goto	u3598
  8155   0038C8                     u3580:
  8156   0038C8  6A14               	clrf	??_ambientCal^0,c
  8157   0038CA                     u3598:
  8158   0038CA  3214               	rrcf	??_ambientCal^0,f,c
  8159   0038CC  3214               	rrcf	??_ambientCal^0,f,c
  8160   0038CE  507C               	movf	124,w,c	;volatile
  8161   0038D0  1814               	xorwf	??_ambientCal^0,w,c
  8162   0038D2  0B7F               	andlw	-129
  8163   0038D4  1814               	xorwf	??_ambientCal^0,w,c
  8164   0038D6  6E7C               	movwf	124,c	;volatile
  8165   0038D8                     
  8166                           ;MazeRobot.X/color.c: 107:             _delay((unsigned long)((500)*(64000000/4000.0)));
  8167   0038D8  0E29               	movlw	41
  8168   0038DA  6E15               	movwf	(??_ambientCal+1)^0,c
  8169   0038DC  0E96               	movlw	150
  8170   0038DE  6E14               	movwf	??_ambientCal^0,c
  8171   0038E0  0E7F               	movlw	127
  8172   0038E2                     u5467:
  8173   0038E2  2EE8               	decfsz	wreg,f,c
  8174   0038E4  D7FE               	bra	u5467
  8175   0038E6  2E14               	decfsz	??_ambientCal^0,f,c
  8176   0038E8  D7FC               	bra	u5467
  8177   0038EA  2E15               	decfsz	(??_ambientCal+1)^0,f,c
  8178   0038EC  D7FA               	bra	u5467
  8179   0038EE  F000               	nop	
  8180   0038F0                     
  8181                           ;MazeRobot.X/color.c: 108:             getColor(v);
  8182   0038F0  C012  F010         	movff	ambientCal@v,getColor@v
  8183   0038F4  C013  F011         	movff	ambientCal@v+1,getColor@v+1
  8184   0038F8  EC4A  F01F         	call	_getColor	;wreg free
  8185   0038FC                     
  8186                           ;MazeRobot.X/color.c: 109:             _delay((unsigned long)((500)*(64000000/4000.0)));
  8187   0038FC  0E29               	movlw	41
  8188   0038FE  6E15               	movwf	(??_ambientCal+1)^0,c
  8189   003900  0E96               	movlw	150
  8190   003902  6E14               	movwf	??_ambientCal^0,c
  8191   003904  0E7F               	movlw	127
  8192   003906                     u5477:
  8193   003906  2EE8               	decfsz	wreg,f,c
  8194   003908  D7FE               	bra	u5477
  8195   00390A  2E14               	decfsz	??_ambientCal^0,f,c
  8196   00390C  D7FC               	bra	u5477
  8197   00390E  2E15               	decfsz	(??_ambientCal+1)^0,f,c
  8198   003910  D7FA               	bra	u5477
  8199   003912  F000               	nop	
  8200   003914                     
  8201                           ;MazeRobot.X/color.c: 110:             LATDbits.LATD7 = !LATDbits.LATD7;
  8202   003914  AE7C               	btfss	124,7,c	;volatile
  8203   003916  EF8F  F01C         	goto	u3601
  8204   00391A  EF93  F01C         	goto	u3600
  8205   00391E                     u3601:
  8206   00391E  6A14               	clrf	??_ambientCal^0,c
  8207   003920  2A14               	incf	??_ambientCal^0,f,c
  8208   003922  EF94  F01C         	goto	u3618
  8209   003926                     u3600:
  8210   003926  6A14               	clrf	??_ambientCal^0,c
  8211   003928                     u3618:
  8212   003928  3214               	rrcf	??_ambientCal^0,f,c
  8213   00392A  3214               	rrcf	??_ambientCal^0,f,c
  8214   00392C  507C               	movf	124,w,c	;volatile
  8215   00392E  1814               	xorwf	??_ambientCal^0,w,c
  8216   003930  0B7F               	andlw	-129
  8217   003932  1814               	xorwf	??_ambientCal^0,w,c
  8218   003934  6E7C               	movwf	124,c	;volatile
  8219   003936  0012               	return		;funcret
  8220   003938                     __end_of_ambientCal:
  8221                           	callstack 0
  8222                           
  8223 ;; *************** function _getColor *****************
  8224 ;; Defined at:
  8225 ;;		line 91 in file "MazeRobot.X/color.c"
  8226 ;; Parameters:    Size  Location     Type
  8227 ;;  v               2   15[COMRAM] PTR struct RGB
  8228 ;;		 -> main@whiteRGBVal(8), main@RGBVal(8), main@ambientRGBVal(8), colorDetect@RGBVal(8), 
  8229 ;; Auto vars:     Size  Location     Type
  8230 ;;		None
  8231 ;; Return value:  Size  Location     Type
  8232 ;;                  1    wreg      void 
  8233 ;; Registers used:
  8234 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8235 ;; Tracked objects:
  8236 ;;		On entry : 0/0
  8237 ;;		On exit  : 0/0
  8238 ;;		Unchanged: 0/0
  8239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8240 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8243 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8244 ;;Total ram usage:        2 bytes
  8245 ;; Hardware stack levels used: 1
  8246 ;; Hardware stack levels required when called: 5
  8247 ;; This function calls:
  8248 ;;		_color_read_Blue
  8249 ;;		_color_read_Clear
  8250 ;;		_color_read_Green
  8251 ;;		_color_read_Red
  8252 ;; This function is called by:
  8253 ;;		_ambientCal
  8254 ;;		_whiteCal
  8255 ;;		_colorDetect
  8256 ;;		_main
  8257 ;; This function uses a non-reentrant model
  8258 ;;
  8259                           
  8260                           	psect	text29
  8261   003E94                     __ptext29:
  8262                           	callstack 0
  8263   003E94                     _getColor:
  8264                           	callstack 24
  8265   003E94                     
  8266                           ;MazeRobot.X/color.c: 92:     v->R = color_read_Red();
  8267   003E94  EC79  F01F         	call	_color_read_Red	;wreg free
  8268   003E98  C010  FFD9         	movff	getColor@v,fsr2l
  8269   003E9C  C011  FFDA         	movff	getColor@v+1,fsr2h
  8270   003EA0  C009  FFDE         	movff	?_color_read_Red,postinc2
  8271   003EA4  C00A  FFDD         	movff	?_color_read_Red+1,postdec2
  8272                           
  8273                           ;MazeRobot.X/color.c: 93:     v->G = color_read_Green();
  8274   003EA8  ECA1  F01F         	call	_color_read_Green	;wreg free
  8275   003EAC  EE20 F002          	lfsr	2,2
  8276   003EB0  5010               	movf	getColor@v^0,w,c
  8277   003EB2  26D9               	addwf	fsr2l,f,c
  8278   003EB4  5011               	movf	(getColor@v+1)^0,w,c
  8279   003EB6  22DA               	addwfc	fsr2h,f,c
  8280   003EB8  C009  FFDE         	movff	?_color_read_Green,postinc2
  8281   003EBC  C00A  FFDD         	movff	?_color_read_Green+1,postdec2
  8282                           
  8283                           ;MazeRobot.X/color.c: 94:     v->B = color_read_Blue();
  8284   003EC0  ECF1  F01F         	call	_color_read_Blue	;wreg free
  8285   003EC4  EE20 F004          	lfsr	2,4
  8286   003EC8  5010               	movf	getColor@v^0,w,c
  8287   003ECA  26D9               	addwf	fsr2l,f,c
  8288   003ECC  5011               	movf	(getColor@v+1)^0,w,c
  8289   003ECE  22DA               	addwfc	fsr2h,f,c
  8290   003ED0  C009  FFDE         	movff	?_color_read_Blue,postinc2
  8291   003ED4  C00A  FFDD         	movff	?_color_read_Blue+1,postdec2
  8292                           
  8293                           ;MazeRobot.X/color.c: 95:     v->C = color_read_Clear();
  8294   003ED8  ECC9  F01F         	call	_color_read_Clear	;wreg free
  8295   003EDC  EE20 F006          	lfsr	2,6
  8296   003EE0  5010               	movf	getColor@v^0,w,c
  8297   003EE2  26D9               	addwf	fsr2l,f,c
  8298   003EE4  5011               	movf	(getColor@v+1)^0,w,c
  8299   003EE6  22DA               	addwfc	fsr2h,f,c
  8300   003EE8  C009  FFDE         	movff	?_color_read_Clear,postinc2
  8301   003EEC  C00A  FFDD         	movff	?_color_read_Clear+1,postdec2
  8302   003EF0  0012               	return		;funcret
  8303   003EF2                     __end_of_getColor:
  8304                           	callstack 0
  8305                           
  8306 ;; *************** function _color_read_Red *****************
  8307 ;; Defined at:
  8308 ;;		line 33 in file "MazeRobot.X/color.c"
  8309 ;; Parameters:    Size  Location     Type
  8310 ;;		None
  8311 ;; Auto vars:     Size  Location     Type
  8312 ;;  tmp             2   13[COMRAM] unsigned int 
  8313 ;; Return value:  Size  Location     Type
  8314 ;;                  2    8[COMRAM] unsigned int 
  8315 ;; Registers used:
  8316 ;;		wreg, status,2, status,0, cstack
  8317 ;; Tracked objects:
  8318 ;;		On entry : 0/0
  8319 ;;		On exit  : 0/0
  8320 ;;		Unchanged: 0/0
  8321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8322 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8323 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8324 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8325 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8326 ;;Total ram usage:        7 bytes
  8327 ;; Hardware stack levels used: 1
  8328 ;; Hardware stack levels required when called: 4
  8329 ;; This function calls:
  8330 ;;		_I2C_2_Master_Read
  8331 ;;		_I2C_2_Master_RepStart
  8332 ;;		_I2C_2_Master_Start
  8333 ;;		_I2C_2_Master_Stop
  8334 ;;		_I2C_2_Master_Write
  8335 ;; This function is called by:
  8336 ;;		_getColor
  8337 ;; This function uses a non-reentrant model
  8338 ;;
  8339                           
  8340                           	psect	text30
  8341   003EF2                     __ptext30:
  8342                           	callstack 0
  8343   003EF2                     _color_read_Red:
  8344                           	callstack 24
  8345   003EF2                     
  8346                           ;MazeRobot.X/color.c: 35:  unsigned int tmp;;MazeRobot.X/color.c: 36:  I2C_2_Master_Star
      +                          t();
  8347   003EF2  EC41  F021         	call	_I2C_2_Master_Start	;wreg free
  8348                           
  8349                           ;MazeRobot.X/color.c: 37:  I2C_2_Master_Write(0x52 | 0x00);
  8350   003EF6  0E52               	movlw	82
  8351   003EF8  EC36  F021         	call	_I2C_2_Master_Write
  8352                           
  8353                           ;MazeRobot.X/color.c: 38:  I2C_2_Master_Write(0xA0 | 0x16);
  8354   003EFC  0EB6               	movlw	182
  8355   003EFE  EC36  F021         	call	_I2C_2_Master_Write
  8356                           
  8357                           ;MazeRobot.X/color.c: 39:  I2C_2_Master_RepStart();
  8358   003F02  EC46  F021         	call	_I2C_2_Master_RepStart	;wreg free
  8359                           
  8360                           ;MazeRobot.X/color.c: 40:  I2C_2_Master_Write(0x52 | 0x01);
  8361   003F06  0E53               	movlw	83
  8362   003F08  EC36  F021         	call	_I2C_2_Master_Write
  8363                           
  8364                           ;MazeRobot.X/color.c: 41:  tmp=I2C_2_Master_Read(1);
  8365   003F0C  0E01               	movlw	1
  8366   003F0E  EC61  F020         	call	_I2C_2_Master_Read
  8367   003F12  6E0B               	movwf	??_color_read_Red^0,c
  8368   003F14  500B               	movf	??_color_read_Red^0,w,c
  8369   003F16  6E0E               	movwf	color_read_Red@tmp^0,c
  8370   003F18  6A0F               	clrf	(color_read_Red@tmp+1)^0,c
  8371                           
  8372                           ;MazeRobot.X/color.c: 42:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  8373   003F1A  0E00               	movlw	0
  8374   003F1C  EC61  F020         	call	_I2C_2_Master_Read
  8375   003F20  6E0B               	movwf	??_color_read_Red^0,c
  8376   003F22  500B               	movf	??_color_read_Red^0,w,c
  8377   003F24  6E0D               	movwf	(??_color_read_Red+2)^0,c
  8378   003F26  6A0C               	clrf	(??_color_read_Red+1)^0,c
  8379   003F28  500E               	movf	color_read_Red@tmp^0,w,c
  8380   003F2A  100C               	iorwf	(??_color_read_Red+1)^0,w,c
  8381   003F2C  6E0E               	movwf	color_read_Red@tmp^0,c
  8382   003F2E  500F               	movf	(color_read_Red@tmp+1)^0,w,c
  8383   003F30  100D               	iorwf	(??_color_read_Red+2)^0,w,c
  8384   003F32  6E0F               	movwf	(color_read_Red@tmp+1)^0,c
  8385                           
  8386                           ;MazeRobot.X/color.c: 43:  I2C_2_Master_Stop();
  8387   003F34  EC3C  F021         	call	_I2C_2_Master_Stop	;wreg free
  8388   003F38                     
  8389                           ;MazeRobot.X/color.c: 44:  return tmp;
  8390   003F38  C00E  F009         	movff	color_read_Red@tmp,?_color_read_Red
  8391   003F3C  C00F  F00A         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  8392   003F40  0012               	return		;funcret
  8393   003F42                     __end_of_color_read_Red:
  8394                           	callstack 0
  8395                           
  8396 ;; *************** function _color_read_Green *****************
  8397 ;; Defined at:
  8398 ;;		line 47 in file "MazeRobot.X/color.c"
  8399 ;; Parameters:    Size  Location     Type
  8400 ;;		None
  8401 ;; Auto vars:     Size  Location     Type
  8402 ;;  tmp             2   13[COMRAM] unsigned int 
  8403 ;; Return value:  Size  Location     Type
  8404 ;;                  2    8[COMRAM] unsigned int 
  8405 ;; Registers used:
  8406 ;;		wreg, status,2, status,0, cstack
  8407 ;; Tracked objects:
  8408 ;;		On entry : 0/0
  8409 ;;		On exit  : 0/0
  8410 ;;		Unchanged: 0/0
  8411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8412 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8413 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8414 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8415 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8416 ;;Total ram usage:        7 bytes
  8417 ;; Hardware stack levels used: 1
  8418 ;; Hardware stack levels required when called: 4
  8419 ;; This function calls:
  8420 ;;		_I2C_2_Master_Read
  8421 ;;		_I2C_2_Master_RepStart
  8422 ;;		_I2C_2_Master_Start
  8423 ;;		_I2C_2_Master_Stop
  8424 ;;		_I2C_2_Master_Write
  8425 ;; This function is called by:
  8426 ;;		_getColor
  8427 ;; This function uses a non-reentrant model
  8428 ;;
  8429                           
  8430                           	psect	text31
  8431   003F42                     __ptext31:
  8432                           	callstack 0
  8433   003F42                     _color_read_Green:
  8434                           	callstack 24
  8435   003F42                     
  8436                           ;MazeRobot.X/color.c: 49:  unsigned int tmp;;MazeRobot.X/color.c: 50:  I2C_2_Master_Star
      +                          t();
  8437   003F42  EC41  F021         	call	_I2C_2_Master_Start	;wreg free
  8438                           
  8439                           ;MazeRobot.X/color.c: 51:  I2C_2_Master_Write(0x52 | 0x00);
  8440   003F46  0E52               	movlw	82
  8441   003F48  EC36  F021         	call	_I2C_2_Master_Write
  8442                           
  8443                           ;MazeRobot.X/color.c: 52:  I2C_2_Master_Write(0xA0 | 0x18);
  8444   003F4C  0EB8               	movlw	184
  8445   003F4E  EC36  F021         	call	_I2C_2_Master_Write
  8446                           
  8447                           ;MazeRobot.X/color.c: 53:  I2C_2_Master_RepStart();
  8448   003F52  EC46  F021         	call	_I2C_2_Master_RepStart	;wreg free
  8449                           
  8450                           ;MazeRobot.X/color.c: 54:  I2C_2_Master_Write(0x52 | 0x01);
  8451   003F56  0E53               	movlw	83
  8452   003F58  EC36  F021         	call	_I2C_2_Master_Write
  8453                           
  8454                           ;MazeRobot.X/color.c: 55:  tmp=I2C_2_Master_Read(1);
  8455   003F5C  0E01               	movlw	1
  8456   003F5E  EC61  F020         	call	_I2C_2_Master_Read
  8457   003F62  6E0B               	movwf	??_color_read_Green^0,c
  8458   003F64  500B               	movf	??_color_read_Green^0,w,c
  8459   003F66  6E0E               	movwf	color_read_Green@tmp^0,c
  8460   003F68  6A0F               	clrf	(color_read_Green@tmp+1)^0,c
  8461                           
  8462                           ;MazeRobot.X/color.c: 56:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  8463   003F6A  0E00               	movlw	0
  8464   003F6C  EC61  F020         	call	_I2C_2_Master_Read
  8465   003F70  6E0B               	movwf	??_color_read_Green^0,c
  8466   003F72  500B               	movf	??_color_read_Green^0,w,c
  8467   003F74  6E0D               	movwf	(??_color_read_Green+2)^0,c
  8468   003F76  6A0C               	clrf	(??_color_read_Green+1)^0,c
  8469   003F78  500E               	movf	color_read_Green@tmp^0,w,c
  8470   003F7A  100C               	iorwf	(??_color_read_Green+1)^0,w,c
  8471   003F7C  6E0E               	movwf	color_read_Green@tmp^0,c
  8472   003F7E  500F               	movf	(color_read_Green@tmp+1)^0,w,c
  8473   003F80  100D               	iorwf	(??_color_read_Green+2)^0,w,c
  8474   003F82  6E0F               	movwf	(color_read_Green@tmp+1)^0,c
  8475                           
  8476                           ;MazeRobot.X/color.c: 57:  I2C_2_Master_Stop();
  8477   003F84  EC3C  F021         	call	_I2C_2_Master_Stop	;wreg free
  8478   003F88                     
  8479                           ;MazeRobot.X/color.c: 58:  return tmp;
  8480   003F88  C00E  F009         	movff	color_read_Green@tmp,?_color_read_Green
  8481   003F8C  C00F  F00A         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  8482   003F90  0012               	return		;funcret
  8483   003F92                     __end_of_color_read_Green:
  8484                           	callstack 0
  8485                           
  8486 ;; *************** function _color_read_Clear *****************
  8487 ;; Defined at:
  8488 ;;		line 76 in file "MazeRobot.X/color.c"
  8489 ;; Parameters:    Size  Location     Type
  8490 ;;		None
  8491 ;; Auto vars:     Size  Location     Type
  8492 ;;  tmp             2   13[COMRAM] unsigned int 
  8493 ;; Return value:  Size  Location     Type
  8494 ;;                  2    8[COMRAM] unsigned int 
  8495 ;; Registers used:
  8496 ;;		wreg, status,2, status,0, cstack
  8497 ;; Tracked objects:
  8498 ;;		On entry : 0/0
  8499 ;;		On exit  : 0/0
  8500 ;;		Unchanged: 0/0
  8501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8502 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8503 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8504 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8505 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8506 ;;Total ram usage:        7 bytes
  8507 ;; Hardware stack levels used: 1
  8508 ;; Hardware stack levels required when called: 4
  8509 ;; This function calls:
  8510 ;;		_I2C_2_Master_Read
  8511 ;;		_I2C_2_Master_RepStart
  8512 ;;		_I2C_2_Master_Start
  8513 ;;		_I2C_2_Master_Stop
  8514 ;;		_I2C_2_Master_Write
  8515 ;; This function is called by:
  8516 ;;		_getColor
  8517 ;; This function uses a non-reentrant model
  8518 ;;
  8519                           
  8520                           	psect	text32
  8521   003F92                     __ptext32:
  8522                           	callstack 0
  8523   003F92                     _color_read_Clear:
  8524                           	callstack 24
  8525   003F92                     
  8526                           ;MazeRobot.X/color.c: 78:  unsigned int tmp;;MazeRobot.X/color.c: 79:  I2C_2_Master_Star
      +                          t();
  8527   003F92  EC41  F021         	call	_I2C_2_Master_Start	;wreg free
  8528                           
  8529                           ;MazeRobot.X/color.c: 80:  I2C_2_Master_Write(0x52 | 0x00);
  8530   003F96  0E52               	movlw	82
  8531   003F98  EC36  F021         	call	_I2C_2_Master_Write
  8532                           
  8533                           ;MazeRobot.X/color.c: 81:  I2C_2_Master_Write(0xA0 | 0x14);
  8534   003F9C  0EB4               	movlw	180
  8535   003F9E  EC36  F021         	call	_I2C_2_Master_Write
  8536                           
  8537                           ;MazeRobot.X/color.c: 82:  I2C_2_Master_RepStart();
  8538   003FA2  EC46  F021         	call	_I2C_2_Master_RepStart	;wreg free
  8539                           
  8540                           ;MazeRobot.X/color.c: 83:  I2C_2_Master_Write(0x52 | 0x01);
  8541   003FA6  0E53               	movlw	83
  8542   003FA8  EC36  F021         	call	_I2C_2_Master_Write
  8543                           
  8544                           ;MazeRobot.X/color.c: 84:  tmp=I2C_2_Master_Read(1);
  8545   003FAC  0E01               	movlw	1
  8546   003FAE  EC61  F020         	call	_I2C_2_Master_Read
  8547   003FB2  6E0B               	movwf	??_color_read_Clear^0,c
  8548   003FB4  500B               	movf	??_color_read_Clear^0,w,c
  8549   003FB6  6E0E               	movwf	color_read_Clear@tmp^0,c
  8550   003FB8  6A0F               	clrf	(color_read_Clear@tmp+1)^0,c
  8551                           
  8552                           ;MazeRobot.X/color.c: 85:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  8553   003FBA  0E00               	movlw	0
  8554   003FBC  EC61  F020         	call	_I2C_2_Master_Read
  8555   003FC0  6E0B               	movwf	??_color_read_Clear^0,c
  8556   003FC2  500B               	movf	??_color_read_Clear^0,w,c
  8557   003FC4  6E0D               	movwf	(??_color_read_Clear+2)^0,c
  8558   003FC6  6A0C               	clrf	(??_color_read_Clear+1)^0,c
  8559   003FC8  500E               	movf	color_read_Clear@tmp^0,w,c
  8560   003FCA  100C               	iorwf	(??_color_read_Clear+1)^0,w,c
  8561   003FCC  6E0E               	movwf	color_read_Clear@tmp^0,c
  8562   003FCE  500F               	movf	(color_read_Clear@tmp+1)^0,w,c
  8563   003FD0  100D               	iorwf	(??_color_read_Clear+2)^0,w,c
  8564   003FD2  6E0F               	movwf	(color_read_Clear@tmp+1)^0,c
  8565                           
  8566                           ;MazeRobot.X/color.c: 86:  I2C_2_Master_Stop();
  8567   003FD4  EC3C  F021         	call	_I2C_2_Master_Stop	;wreg free
  8568   003FD8                     
  8569                           ;MazeRobot.X/color.c: 87:  return tmp;
  8570   003FD8  C00E  F009         	movff	color_read_Clear@tmp,?_color_read_Clear
  8571   003FDC  C00F  F00A         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  8572   003FE0  0012               	return		;funcret
  8573   003FE2                     __end_of_color_read_Clear:
  8574                           	callstack 0
  8575                           
  8576 ;; *************** function _color_read_Blue *****************
  8577 ;; Defined at:
  8578 ;;		line 62 in file "MazeRobot.X/color.c"
  8579 ;; Parameters:    Size  Location     Type
  8580 ;;		None
  8581 ;; Auto vars:     Size  Location     Type
  8582 ;;  tmp             2   13[COMRAM] unsigned int 
  8583 ;; Return value:  Size  Location     Type
  8584 ;;                  2    8[COMRAM] unsigned int 
  8585 ;; Registers used:
  8586 ;;		wreg, status,2, status,0, cstack
  8587 ;; Tracked objects:
  8588 ;;		On entry : 0/0
  8589 ;;		On exit  : 0/0
  8590 ;;		Unchanged: 0/0
  8591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8592 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8593 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8594 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8595 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8596 ;;Total ram usage:        7 bytes
  8597 ;; Hardware stack levels used: 1
  8598 ;; Hardware stack levels required when called: 4
  8599 ;; This function calls:
  8600 ;;		_I2C_2_Master_Read
  8601 ;;		_I2C_2_Master_RepStart
  8602 ;;		_I2C_2_Master_Start
  8603 ;;		_I2C_2_Master_Stop
  8604 ;;		_I2C_2_Master_Write
  8605 ;; This function is called by:
  8606 ;;		_getColor
  8607 ;; This function uses a non-reentrant model
  8608 ;;
  8609                           
  8610                           	psect	text33
  8611   003FE2                     __ptext33:
  8612                           	callstack 0
  8613   003FE2                     _color_read_Blue:
  8614                           	callstack 24
  8615   003FE2                     
  8616                           ;MazeRobot.X/color.c: 64:  unsigned int tmp;;MazeRobot.X/color.c: 65:  I2C_2_Master_Star
      +                          t();
  8617   003FE2  EC41  F021         	call	_I2C_2_Master_Start	;wreg free
  8618                           
  8619                           ;MazeRobot.X/color.c: 66:  I2C_2_Master_Write(0x52 | 0x00);
  8620   003FE6  0E52               	movlw	82
  8621   003FE8  EC36  F021         	call	_I2C_2_Master_Write
  8622                           
  8623                           ;MazeRobot.X/color.c: 67:  I2C_2_Master_Write(0xA0 | 0x1A);
  8624   003FEC  0EBA               	movlw	186
  8625   003FEE  EC36  F021         	call	_I2C_2_Master_Write
  8626                           
  8627                           ;MazeRobot.X/color.c: 68:  I2C_2_Master_RepStart();
  8628   003FF2  EC46  F021         	call	_I2C_2_Master_RepStart	;wreg free
  8629                           
  8630                           ;MazeRobot.X/color.c: 69:  I2C_2_Master_Write(0x52 | 0x01);
  8631   003FF6  0E53               	movlw	83
  8632   003FF8  EC36  F021         	call	_I2C_2_Master_Write
  8633                           
  8634                           ;MazeRobot.X/color.c: 70:  tmp=I2C_2_Master_Read(1);
  8635   003FFC  0E01               	movlw	1
  8636   003FFE  EC61  F020         	call	_I2C_2_Master_Read
  8637   004002  6E0B               	movwf	??_color_read_Blue^0,c
  8638   004004  500B               	movf	??_color_read_Blue^0,w,c
  8639   004006  6E0E               	movwf	color_read_Blue@tmp^0,c
  8640   004008  6A0F               	clrf	(color_read_Blue@tmp+1)^0,c
  8641                           
  8642                           ;MazeRobot.X/color.c: 71:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  8643   00400A  0E00               	movlw	0
  8644   00400C  EC61  F020         	call	_I2C_2_Master_Read
  8645   004010  6E0B               	movwf	??_color_read_Blue^0,c
  8646   004012  500B               	movf	??_color_read_Blue^0,w,c
  8647   004014  6E0D               	movwf	(??_color_read_Blue+2)^0,c
  8648   004016  6A0C               	clrf	(??_color_read_Blue+1)^0,c
  8649   004018  500E               	movf	color_read_Blue@tmp^0,w,c
  8650   00401A  100C               	iorwf	(??_color_read_Blue+1)^0,w,c
  8651   00401C  6E0E               	movwf	color_read_Blue@tmp^0,c
  8652   00401E  500F               	movf	(color_read_Blue@tmp+1)^0,w,c
  8653   004020  100D               	iorwf	(??_color_read_Blue+2)^0,w,c
  8654   004022  6E0F               	movwf	(color_read_Blue@tmp+1)^0,c
  8655                           
  8656                           ;MazeRobot.X/color.c: 72:  I2C_2_Master_Stop();
  8657   004024  EC3C  F021         	call	_I2C_2_Master_Stop	;wreg free
  8658   004028                     
  8659                           ;MazeRobot.X/color.c: 73:  return tmp;
  8660   004028  C00E  F009         	movff	color_read_Blue@tmp,?_color_read_Blue
  8661   00402C  C00F  F00A         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  8662   004030  0012               	return		;funcret
  8663   004032                     __end_of_color_read_Blue:
  8664                           	callstack 0
  8665                           
  8666 ;; *************** function _I2C_2_Master_Write *****************
  8667 ;; Defined at:
  8668 ;;		line 45 in file "MazeRobot.X/i2c.c"
  8669 ;; Parameters:    Size  Location     Type
  8670 ;;  data_byte       1    wreg     unsigned char 
  8671 ;; Auto vars:     Size  Location     Type
  8672 ;;  data_byte       1    5[COMRAM] unsigned char 
  8673 ;; Return value:  Size  Location     Type
  8674 ;;                  1    wreg      void 
  8675 ;; Registers used:
  8676 ;;		wreg, status,2, status,0, cstack
  8677 ;; Tracked objects:
  8678 ;;		On entry : 0/0
  8679 ;;		On exit  : 0/0
  8680 ;;		Unchanged: 0/0
  8681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8683 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8685 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8686 ;;Total ram usage:        1 bytes
  8687 ;; Hardware stack levels used: 1
  8688 ;; Hardware stack levels required when called: 3
  8689 ;; This function calls:
  8690 ;;		_I2C_2_Master_Idle
  8691 ;; This function is called by:
  8692 ;;		_color_writetoaddr
  8693 ;;		_color_read_Red
  8694 ;;		_color_read_Green
  8695 ;;		_color_read_Blue
  8696 ;;		_color_read_Clear
  8697 ;; This function uses a non-reentrant model
  8698 ;;
  8699                           
  8700                           	psect	text34
  8701   00426C                     __ptext34:
  8702                           	callstack 0
  8703   00426C                     _I2C_2_Master_Write:
  8704                           	callstack 24
  8705                           
  8706                           ;incstack = 0
  8707                           ;I2C_2_Master_Write@data_byte stored from wreg
  8708   00426C  6E06               	movwf	I2C_2_Master_Write@data_byte^0,c
  8709   00426E                     
  8710                           ;MazeRobot.X/i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);MazeRobot.X/i2c
      +                          .c: 46: {;MazeRobot.X/i2c.c: 47:   I2C_2_Master_Idle();
  8711   00426E  ECF3  F020         	call	_I2C_2_Master_Idle	;wreg free
  8712   004272                     
  8713                           ;MazeRobot.X/i2c.c: 48:   SSP2BUF = data_byte;
  8714   004272  C006  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  8715   004276  0012               	return		;funcret
  8716   004278                     __end_of_I2C_2_Master_Write:
  8717                           	callstack 0
  8718                           
  8719 ;; *************** function _I2C_2_Master_Stop *****************
  8720 ;; Defined at:
  8721 ;;		line 39 in file "MazeRobot.X/i2c.c"
  8722 ;; Parameters:    Size  Location     Type
  8723 ;;		None
  8724 ;; Auto vars:     Size  Location     Type
  8725 ;;		None
  8726 ;; Return value:  Size  Location     Type
  8727 ;;                  1    wreg      void 
  8728 ;; Registers used:
  8729 ;;		wreg, status,2, status,0, cstack
  8730 ;; Tracked objects:
  8731 ;;		On entry : 0/0
  8732 ;;		On exit  : 0/0
  8733 ;;		Unchanged: 0/0
  8734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8736 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8738 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8739 ;;Total ram usage:        0 bytes
  8740 ;; Hardware stack levels used: 1
  8741 ;; Hardware stack levels required when called: 3
  8742 ;; This function calls:
  8743 ;;		_I2C_2_Master_Idle
  8744 ;; This function is called by:
  8745 ;;		_color_writetoaddr
  8746 ;;		_color_read_Red
  8747 ;;		_color_read_Green
  8748 ;;		_color_read_Blue
  8749 ;;		_color_read_Clear
  8750 ;; This function uses a non-reentrant model
  8751 ;;
  8752                           
  8753                           	psect	text35
  8754   004278                     __ptext35:
  8755                           	callstack 0
  8756   004278                     _I2C_2_Master_Stop:
  8757                           	callstack 24
  8758   004278                     
  8759                           ;MazeRobot.X/i2c.c: 41:   I2C_2_Master_Idle();
  8760   004278  ECF3  F020         	call	_I2C_2_Master_Idle	;wreg free
  8761   00427C                     
  8762                           ;MazeRobot.X/i2c.c: 42:   SSP2CON2bits.PEN = 1;
  8763   00427C  010E               	movlb	14	; () banked
  8764   00427E  85DA               	bsf	218,2,b	;volatile
  8765   004280                     
  8766                           ; BSR set to: 14
  8767   004280  0012               	return		;funcret
  8768   004282                     __end_of_I2C_2_Master_Stop:
  8769                           	callstack 0
  8770                           
  8771 ;; *************** function _I2C_2_Master_Start *****************
  8772 ;; Defined at:
  8773 ;;		line 27 in file "MazeRobot.X/i2c.c"
  8774 ;; Parameters:    Size  Location     Type
  8775 ;;		None
  8776 ;; Auto vars:     Size  Location     Type
  8777 ;;		None
  8778 ;; Return value:  Size  Location     Type
  8779 ;;                  1    wreg      void 
  8780 ;; Registers used:
  8781 ;;		wreg, status,2, status,0, cstack
  8782 ;; Tracked objects:
  8783 ;;		On entry : 0/0
  8784 ;;		On exit  : 0/0
  8785 ;;		Unchanged: 0/0
  8786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8790 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8791 ;;Total ram usage:        0 bytes
  8792 ;; Hardware stack levels used: 1
  8793 ;; Hardware stack levels required when called: 3
  8794 ;; This function calls:
  8795 ;;		_I2C_2_Master_Idle
  8796 ;; This function is called by:
  8797 ;;		_color_writetoaddr
  8798 ;;		_color_read_Red
  8799 ;;		_color_read_Green
  8800 ;;		_color_read_Blue
  8801 ;;		_color_read_Clear
  8802 ;; This function uses a non-reentrant model
  8803 ;;
  8804                           
  8805                           	psect	text36
  8806   004282                     __ptext36:
  8807                           	callstack 0
  8808   004282                     _I2C_2_Master_Start:
  8809                           	callstack 24
  8810   004282                     
  8811                           ;MazeRobot.X/i2c.c: 29:   I2C_2_Master_Idle();
  8812   004282  ECF3  F020         	call	_I2C_2_Master_Idle	;wreg free
  8813   004286                     
  8814                           ;MazeRobot.X/i2c.c: 30:   SSP2CON2bits.SEN = 1;
  8815   004286  010E               	movlb	14	; () banked
  8816   004288  81DA               	bsf	218,0,b	;volatile
  8817   00428A                     
  8818                           ; BSR set to: 14
  8819   00428A  0012               	return		;funcret
  8820   00428C                     __end_of_I2C_2_Master_Start:
  8821                           	callstack 0
  8822                           
  8823 ;; *************** function _I2C_2_Master_RepStart *****************
  8824 ;; Defined at:
  8825 ;;		line 33 in file "MazeRobot.X/i2c.c"
  8826 ;; Parameters:    Size  Location     Type
  8827 ;;		None
  8828 ;; Auto vars:     Size  Location     Type
  8829 ;;		None
  8830 ;; Return value:  Size  Location     Type
  8831 ;;                  1    wreg      void 
  8832 ;; Registers used:
  8833 ;;		wreg, status,2, status,0, cstack
  8834 ;; Tracked objects:
  8835 ;;		On entry : 0/0
  8836 ;;		On exit  : 0/0
  8837 ;;		Unchanged: 0/0
  8838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8842 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8843 ;;Total ram usage:        0 bytes
  8844 ;; Hardware stack levels used: 1
  8845 ;; Hardware stack levels required when called: 3
  8846 ;; This function calls:
  8847 ;;		_I2C_2_Master_Idle
  8848 ;; This function is called by:
  8849 ;;		_color_read_Red
  8850 ;;		_color_read_Green
  8851 ;;		_color_read_Blue
  8852 ;;		_color_read_Clear
  8853 ;; This function uses a non-reentrant model
  8854 ;;
  8855                           
  8856                           	psect	text37
  8857   00428C                     __ptext37:
  8858                           	callstack 0
  8859   00428C                     _I2C_2_Master_RepStart:
  8860                           	callstack 24
  8861   00428C                     
  8862                           ;MazeRobot.X/i2c.c: 35:   I2C_2_Master_Idle();
  8863   00428C  ECF3  F020         	call	_I2C_2_Master_Idle	;wreg free
  8864   004290                     
  8865                           ;MazeRobot.X/i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  8866   004290  010E               	movlb	14	; () banked
  8867   004292  83DA               	bsf	218,1,b	;volatile
  8868   004294                     
  8869                           ; BSR set to: 14
  8870   004294  0012               	return		;funcret
  8871   004296                     __end_of_I2C_2_Master_RepStart:
  8872                           	callstack 0
  8873                           
  8874 ;; *************** function _I2C_2_Master_Read *****************
  8875 ;; Defined at:
  8876 ;;		line 51 in file "MazeRobot.X/i2c.c"
  8877 ;; Parameters:    Size  Location     Type
  8878 ;;  ack             1    wreg     unsigned char 
  8879 ;; Auto vars:     Size  Location     Type
  8880 ;;  ack             1    6[COMRAM] unsigned char 
  8881 ;;  tmp             1    7[COMRAM] unsigned char 
  8882 ;; Return value:  Size  Location     Type
  8883 ;;                  1    wreg      unsigned char 
  8884 ;; Registers used:
  8885 ;;		wreg, status,2, status,0, cstack
  8886 ;; Tracked objects:
  8887 ;;		On entry : 0/0
  8888 ;;		On exit  : 0/0
  8889 ;;		Unchanged: 0/0
  8890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8892 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8893 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8894 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8895 ;;Total ram usage:        3 bytes
  8896 ;; Hardware stack levels used: 1
  8897 ;; Hardware stack levels required when called: 3
  8898 ;; This function calls:
  8899 ;;		_I2C_2_Master_Idle
  8900 ;; This function is called by:
  8901 ;;		_color_read_Red
  8902 ;;		_color_read_Green
  8903 ;;		_color_read_Blue
  8904 ;;		_color_read_Clear
  8905 ;; This function uses a non-reentrant model
  8906 ;;
  8907                           
  8908                           	psect	text38
  8909   0040C2                     __ptext38:
  8910                           	callstack 0
  8911   0040C2                     _I2C_2_Master_Read:
  8912                           	callstack 24
  8913                           
  8914                           ; BSR set to: 14
  8915                           ;incstack = 0
  8916                           ;I2C_2_Master_Read@ack stored from wreg
  8917   0040C2  6E07               	movwf	I2C_2_Master_Read@ack^0,c
  8918   0040C4                     
  8919                           ;MazeRobot.X/i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);MazeRobot.X/i
      +                          2c.c: 52: {;MazeRobot.X/i2c.c: 53:   unsigned char tmp;;MazeRobot.X/i2c.c: 54:   I2C_2_M
      +                          aster_Idle();
  8920   0040C4  ECF3  F020         	call	_I2C_2_Master_Idle	;wreg free
  8921   0040C8                     
  8922                           ;MazeRobot.X/i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  8923   0040C8  010E               	movlb	14	; () banked
  8924   0040CA  87DA               	bsf	218,3,b	;volatile
  8925                           
  8926                           ;MazeRobot.X/i2c.c: 56:   I2C_2_Master_Idle();
  8927   0040CC  ECF3  F020         	call	_I2C_2_Master_Idle	;wreg free
  8928   0040D0                     
  8929                           ;MazeRobot.X/i2c.c: 57:   tmp = SSP2BUF;
  8930   0040D0  CED5 F008          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  8931                           
  8932                           ;MazeRobot.X/i2c.c: 58:   I2C_2_Master_Idle();
  8933   0040D4  ECF3  F020         	call	_I2C_2_Master_Idle	;wreg free
  8934   0040D8                     
  8935                           ;MazeRobot.X/i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  8936   0040D8  5007               	movf	I2C_2_Master_Read@ack^0,w,c
  8937   0040DA  B4D8               	btfsc	status,2,c
  8938   0040DC  EF72  F020         	goto	u2331
  8939   0040E0  EF76  F020         	goto	u2330
  8940   0040E4                     u2331:
  8941   0040E4  6A06               	clrf	??_I2C_2_Master_Read^0,c
  8942   0040E6  2A06               	incf	??_I2C_2_Master_Read^0,f,c
  8943   0040E8  EF77  F020         	goto	u2348
  8944   0040EC                     u2330:
  8945   0040EC  6A06               	clrf	??_I2C_2_Master_Read^0,c
  8946   0040EE                     u2348:
  8947   0040EE  3A06               	swapf	??_I2C_2_Master_Read^0,f,c
  8948   0040F0  4606               	rlncf	??_I2C_2_Master_Read^0,f,c
  8949   0040F2  010E               	movlb	14	; () banked
  8950   0040F4  51DA               	movf	218,w,b	;volatile
  8951   0040F6  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
  8952   0040F8  0BDF               	andlw	-33
  8953   0040FA  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
  8954   0040FC  6FDA               	movwf	218,b	;volatile
  8955   0040FE                     
  8956                           ; BSR set to: 14
  8957                           ;MazeRobot.X/i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  8958   0040FE  89DA               	bsf	218,4,b	;volatile
  8959   004100                     
  8960                           ; BSR set to: 14
  8961                           ;MazeRobot.X/i2c.c: 61:   return tmp;
  8962   004100  5008               	movf	I2C_2_Master_Read@tmp^0,w,c
  8963   004102                     
  8964                           ; BSR set to: 14
  8965   004102  0012               	return		;funcret
  8966   004104                     __end_of_I2C_2_Master_Read:
  8967                           	callstack 0
  8968                           
  8969 ;; *************** function _I2C_2_Master_Idle *****************
  8970 ;; Defined at:
  8971 ;;		line 22 in file "MazeRobot.X/i2c.c"
  8972 ;; Parameters:    Size  Location     Type
  8973 ;;		None
  8974 ;; Auto vars:     Size  Location     Type
  8975 ;;		None
  8976 ;; Return value:  Size  Location     Type
  8977 ;;                  1    wreg      void 
  8978 ;; Registers used:
  8979 ;;		wreg, status,2, status,0
  8980 ;; Tracked objects:
  8981 ;;		On entry : 0/0
  8982 ;;		On exit  : 0/0
  8983 ;;		Unchanged: 0/0
  8984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8987 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8988 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8989 ;;Total ram usage:        1 bytes
  8990 ;; Hardware stack levels used: 1
  8991 ;; Hardware stack levels required when called: 2
  8992 ;; This function calls:
  8993 ;;		Nothing
  8994 ;; This function is called by:
  8995 ;;		_I2C_2_Master_Start
  8996 ;;		_I2C_2_Master_RepStart
  8997 ;;		_I2C_2_Master_Stop
  8998 ;;		_I2C_2_Master_Write
  8999 ;;		_I2C_2_Master_Read
  9000 ;; This function uses a non-reentrant model
  9001 ;;
  9002                           
  9003                           	psect	text39
  9004   0041E6                     __ptext39:
  9005                           	callstack 0
  9006   0041E6                     _I2C_2_Master_Idle:
  9007                           	callstack 24
  9008   0041E6                     l306:
  9009   0041E6  010E               	movlb	14	; () banked
  9010   0041E8  B5D8               	btfsc	216,2,b	;volatile
  9011   0041EA  EFF9  F020         	goto	u2311
  9012   0041EE  EFFB  F020         	goto	u2310
  9013   0041F2                     u2311:
  9014   0041F2  EFF3  F020         	goto	l306
  9015   0041F6                     u2310:
  9016   0041F6                     
  9017                           ; BSR set to: 14
  9018   0041F6  CEDA F005          	movff	3802,??_I2C_2_Master_Idle	;volatile
  9019   0041FA  0E1F               	movlw	31
  9020   0041FC  1605               	andwf	??_I2C_2_Master_Idle^0,f,c
  9021   0041FE  A4D8               	btfss	status,2,c
  9022   004200  EF04  F021         	goto	u2321
  9023   004204  EF06  F021         	goto	u2320
  9024   004208                     u2321:
  9025   004208  EFF3  F020         	goto	l306
  9026   00420C                     u2320:
  9027   00420C                     
  9028                           ; BSR set to: 14
  9029   00420C  0012               	return		;funcret
  9030   00420E                     __end_of_I2C_2_Master_Idle:
  9031                           	callstack 0
  9032                           
  9033 ;; *************** function _DCmotorsInit *****************
  9034 ;; Defined at:
  9035 ;;		line 73 in file "MazeRobot.X/dc_motor.c"
  9036 ;; Parameters:    Size  Location     Type
  9037 ;;  mL              2    4[COMRAM] PTR struct DC_motor
  9038 ;;		 -> main@motorLeft(9), 
  9039 ;;  mR              2    6[COMRAM] PTR struct DC_motor
  9040 ;;		 -> main@motorRight(9), 
  9041 ;; Auto vars:     Size  Location     Type
  9042 ;;		None
  9043 ;; Return value:  Size  Location     Type
  9044 ;;                  1    wreg      void 
  9045 ;; Registers used:
  9046 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9047 ;; Tracked objects:
  9048 ;;		On entry : 0/0
  9049 ;;		On exit  : 0/0
  9050 ;;		Unchanged: 0/0
  9051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9052 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9055 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9056 ;;Total ram usage:        4 bytes
  9057 ;; Hardware stack levels used: 1
  9058 ;; Hardware stack levels required when called: 2
  9059 ;; This function calls:
  9060 ;;		Nothing
  9061 ;; This function is called by:
  9062 ;;		_main
  9063 ;; This function uses a non-reentrant model
  9064 ;;
  9065                           
  9066                           	psect	text40
  9067   003AE4                     __ptext40:
  9068                           	callstack 0
  9069   003AE4                     _DCmotorsInit:
  9070                           	callstack 28
  9071   003AE4                     
  9072                           ;MazeRobot.X/dc_motor.c: 75:     mL->power = 0;
  9073   003AE4  C005  FFD9         	movff	DCmotorsInit@mL,fsr2l
  9074   003AE8  C006  FFDA         	movff	DCmotorsInit@mL+1,fsr2h
  9075   003AEC  0E00               	movlw	0
  9076   003AEE  6EDF               	movwf	indf2,c
  9077   003AF0                     
  9078                           ;MazeRobot.X/dc_motor.c: 76:     mL->direction = 1;
  9079   003AF0  EE20 F001          	lfsr	2,1
  9080   003AF4  5005               	movf	DCmotorsInit@mL^0,w,c
  9081   003AF6  26D9               	addwf	fsr2l,f,c
  9082   003AF8  5006               	movf	(DCmotorsInit@mL+1)^0,w,c
  9083   003AFA  22DA               	addwfc	fsr2h,f,c
  9084   003AFC  0E01               	movlw	1
  9085   003AFE  6EDF               	movwf	indf2,c
  9086   003B00                     
  9087                           ;MazeRobot.X/dc_motor.c: 77:     mL->brakemode = 1;
  9088   003B00  EE20 F002          	lfsr	2,2
  9089   003B04  5005               	movf	DCmotorsInit@mL^0,w,c
  9090   003B06  26D9               	addwf	fsr2l,f,c
  9091   003B08  5006               	movf	(DCmotorsInit@mL+1)^0,w,c
  9092   003B0A  22DA               	addwfc	fsr2h,f,c
  9093   003B0C  0E01               	movlw	1
  9094   003B0E  6EDF               	movwf	indf2,c
  9095   003B10                     
  9096                           ;MazeRobot.X/dc_motor.c: 78:     mL->posDutyHighByte = (unsigned char *)(&CCPR1H);
  9097   003B10  EE20 F005          	lfsr	2,5
  9098   003B14  5005               	movf	DCmotorsInit@mL^0,w,c
  9099   003B16  26D9               	addwf	fsr2l,f,c
  9100   003B18  5006               	movf	(DCmotorsInit@mL+1)^0,w,c
  9101   003B1A  22DA               	addwfc	fsr2h,f,c
  9102   003B1C  0EAA               	movlw	170
  9103   003B1E  6EDE               	movwf	postinc2,c
  9104   003B20  0E0F               	movlw	15
  9105   003B22  6EDD               	movwf	postdec2,c
  9106   003B24                     
  9107                           ;MazeRobot.X/dc_motor.c: 79:     mL->negDutyHighByte = (unsigned char *)(&CCPR2H);
  9108   003B24  EE20 F007          	lfsr	2,7
  9109   003B28  5005               	movf	DCmotorsInit@mL^0,w,c
  9110   003B2A  26D9               	addwf	fsr2l,f,c
  9111   003B2C  5006               	movf	(DCmotorsInit@mL+1)^0,w,c
  9112   003B2E  22DA               	addwfc	fsr2h,f,c
  9113   003B30  0EA6               	movlw	166
  9114   003B32  6EDE               	movwf	postinc2,c
  9115   003B34  0E0F               	movlw	15
  9116   003B36  6EDD               	movwf	postdec2,c
  9117   003B38                     
  9118                           ;MazeRobot.X/dc_motor.c: 80:     mL->PWMperiod = 199 ;
  9119   003B38  EE20 F003          	lfsr	2,3
  9120   003B3C  5005               	movf	DCmotorsInit@mL^0,w,c
  9121   003B3E  26D9               	addwf	fsr2l,f,c
  9122   003B40  5006               	movf	(DCmotorsInit@mL+1)^0,w,c
  9123   003B42  22DA               	addwfc	fsr2h,f,c
  9124   003B44  0EC7               	movlw	199
  9125   003B46  6EDE               	movwf	postinc2,c
  9126   003B48  0E00               	movlw	0
  9127   003B4A  6EDD               	movwf	postdec2,c
  9128   003B4C                     
  9129                           ;MazeRobot.X/dc_motor.c: 82:     mR->power = 0;
  9130   003B4C  C007  FFD9         	movff	DCmotorsInit@mR,fsr2l
  9131   003B50  C008  FFDA         	movff	DCmotorsInit@mR+1,fsr2h
  9132   003B54  0E00               	movlw	0
  9133   003B56  6EDF               	movwf	indf2,c
  9134                           
  9135                           ;MazeRobot.X/dc_motor.c: 83:     mR->direction = 1;
  9136   003B58  EE20 F001          	lfsr	2,1
  9137   003B5C  5007               	movf	DCmotorsInit@mR^0,w,c
  9138   003B5E  26D9               	addwf	fsr2l,f,c
  9139   003B60  5008               	movf	(DCmotorsInit@mR+1)^0,w,c
  9140   003B62  22DA               	addwfc	fsr2h,f,c
  9141   003B64  0E01               	movlw	1
  9142   003B66  6EDF               	movwf	indf2,c
  9143                           
  9144                           ;MazeRobot.X/dc_motor.c: 84:     mR->brakemode = 1;
  9145   003B68  EE20 F002          	lfsr	2,2
  9146   003B6C  5007               	movf	DCmotorsInit@mR^0,w,c
  9147   003B6E  26D9               	addwf	fsr2l,f,c
  9148   003B70  5008               	movf	(DCmotorsInit@mR+1)^0,w,c
  9149   003B72  22DA               	addwfc	fsr2h,f,c
  9150   003B74  0E01               	movlw	1
  9151   003B76  6EDF               	movwf	indf2,c
  9152                           
  9153                           ;MazeRobot.X/dc_motor.c: 85:     mR->posDutyHighByte = (unsigned char *)(&CCPR3H);
  9154   003B78  EE20 F005          	lfsr	2,5
  9155   003B7C  5007               	movf	DCmotorsInit@mR^0,w,c
  9156   003B7E  26D9               	addwf	fsr2l,f,c
  9157   003B80  5008               	movf	(DCmotorsInit@mR+1)^0,w,c
  9158   003B82  22DA               	addwfc	fsr2h,f,c
  9159   003B84  0E25               	movlw	37
  9160   003B86  6EDE               	movwf	postinc2,c
  9161   003B88  0E0F               	movlw	15
  9162   003B8A  6EDD               	movwf	postdec2,c
  9163                           
  9164                           ;MazeRobot.X/dc_motor.c: 86:     mR->negDutyHighByte = (unsigned char *)(&CCPR4H);
  9165   003B8C  EE20 F007          	lfsr	2,7
  9166   003B90  5007               	movf	DCmotorsInit@mR^0,w,c
  9167   003B92  26D9               	addwf	fsr2l,f,c
  9168   003B94  5008               	movf	(DCmotorsInit@mR+1)^0,w,c
  9169   003B96  22DA               	addwfc	fsr2h,f,c
  9170   003B98  0E21               	movlw	33
  9171   003B9A  6EDE               	movwf	postinc2,c
  9172   003B9C  0E0F               	movlw	15
  9173   003B9E  6EDD               	movwf	postdec2,c
  9174                           
  9175                           ;MazeRobot.X/dc_motor.c: 87:     mR->PWMperiod = 199 ;
  9176   003BA0  EE20 F003          	lfsr	2,3
  9177   003BA4  5007               	movf	DCmotorsInit@mR^0,w,c
  9178   003BA6  26D9               	addwf	fsr2l,f,c
  9179   003BA8  5008               	movf	(DCmotorsInit@mR+1)^0,w,c
  9180   003BAA  22DA               	addwfc	fsr2h,f,c
  9181   003BAC  0EC7               	movlw	199
  9182   003BAE  6EDE               	movwf	postinc2,c
  9183   003BB0  0E00               	movlw	0
  9184   003BB2  6EDD               	movwf	postdec2,c
  9185   003BB4  0012               	return		;funcret
  9186   003BB6                     __end_of_DCmotorsInit:
  9187                           	callstack 0
  9188                           
  9189 ;; *************** function _HighISR *****************
  9190 ;; Defined at:
  9191 ;;		line 132 in file "serialTest.c"
  9192 ;; Parameters:    Size  Location     Type
  9193 ;;		None
  9194 ;; Auto vars:     Size  Location     Type
  9195 ;;		None
  9196 ;; Return value:  Size  Location     Type
  9197 ;;                  1    wreg      void 
  9198 ;; Registers used:
  9199 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9200 ;; Tracked objects:
  9201 ;;		On entry : 0/0
  9202 ;;		On exit  : 0/0
  9203 ;;		Unchanged: 0/0
  9204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9206 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9207 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9208 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9209 ;;Total ram usage:        2 bytes
  9210 ;; Hardware stack levels used: 1
  9211 ;; Hardware stack levels required when called: 1
  9212 ;; This function calls:
  9213 ;;		_getCharFromTxBuf
  9214 ;;		_isDataInTxBuf
  9215 ;;		_putCharToRxBuf
  9216 ;; This function is called by:
  9217 ;;		Interrupt level 2
  9218 ;; This function uses a non-reentrant model
  9219 ;;
  9220                           
  9221                           	psect	intcode
  9222   000008                     __pintcode:
  9223                           	callstack 0
  9224   000008                     _HighISR:
  9225                           	callstack 23
  9226                           
  9227                           ;incstack = 0
  9228   000008  8258               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  9229   00000A  CFD9 F003          	movff	fsr2l,??_HighISR
  9230   00000E  CFDA F004          	movff	fsr2h,??_HighISR+1
  9231   000012                     
  9232                           ;serialTest.c: 134:     if (PIR4bits.RC4IF){
  9233   000012  010E               	movlb	14	; () banked
  9234   000014  A737               	btfss	55,3,b	;volatile
  9235   000016  EF0F  F000         	goto	i2u434_41
  9236   00001A  EF11  F000         	goto	i2u434_40
  9237   00001E                     i2u434_41:
  9238   00001E  EF14  F000         	goto	i2l4248
  9239   000022                     i2u434_40:
  9240   000022                     
  9241                           ; BSR set to: 14
  9242                           ;serialTest.c: 135:         putCharToRxBuf(RC4REG);
  9243   000022  51E3               	movf	227,w,b	;volatile
  9244   000024  ECDE  F020         	call	_putCharToRxBuf
  9245   000028                     i2l4248:
  9246                           
  9247                           ;serialTest.c: 138:     if (PIR4bits.TX4IF && PIE4bits.TX4IE == 1){
  9248   000028  010E               	movlb	14	; () banked
  9249   00002A  A537               	btfss	55,2,b	;volatile
  9250   00002C  EF1A  F000         	goto	i2u435_41
  9251   000030  EF1C  F000         	goto	i2u435_40
  9252   000034                     i2u435_41:
  9253   000034  EF35  F000         	goto	i2l541
  9254   000038                     i2u435_40:
  9255   000038                     
  9256                           ; BSR set to: 14
  9257   000038  A52D               	btfss	45,2,b	;volatile
  9258   00003A  EF21  F000         	goto	i2u436_41
  9259   00003E  EF23  F000         	goto	i2u436_40
  9260   000042                     i2u436_41:
  9261   000042  EF35  F000         	goto	i2l541
  9262   000046                     i2u436_40:
  9263   000046                     
  9264                           ; BSR set to: 14
  9265                           ;serialTest.c: 139:         if (isDataInTxBuf() == 1){
  9266   000046  EC2A  F021         	call	_isDataInTxBuf	;wreg free
  9267   00004A  06E8               	decf	wreg,f,c
  9268   00004C  A4D8               	btfss	status,2,c
  9269   00004E  EF2B  F000         	goto	i2u437_41
  9270   000052  EF2D  F000         	goto	i2u437_40
  9271   000056                     i2u437_41:
  9272   000056  EF33  F000         	goto	i2l539
  9273   00005A                     i2u437_40:
  9274   00005A                     
  9275                           ;serialTest.c: 140:            TX4REG = getCharFromTxBuf();
  9276   00005A  ECB3  F020         	call	_getCharFromTxBuf	;wreg free
  9277   00005E  010E               	movlb	14	; () banked
  9278   000060  6FE4               	movwf	228,b	;volatile
  9279                           
  9280                           ;serialTest.c: 141:         }
  9281   000062  EF35  F000         	goto	i2l541
  9282   000066                     i2l539:
  9283                           
  9284                           ;serialTest.c: 143:            PIE4bits.TX4IE = 0;
  9285   000066  010E               	movlb	14	; () banked
  9286   000068  952D               	bcf	45,2,b	;volatile
  9287   00006A                     i2l541:
  9288                           
  9289                           ; BSR set to: 14
  9290   00006A  C004  FFDA         	movff	??_HighISR+1,fsr2h
  9291   00006E  C003  FFD9         	movff	??_HighISR,fsr2l
  9292   000072  9258               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  9293   000074  0011               	retfie		f
  9294   000076                     __end_of_HighISR:
  9295                           	callstack 0
  9296                           
  9297 ;; *************** function _putCharToRxBuf *****************
  9298 ;; Defined at:
  9299 ;;		line 85 in file "serialTest.c"
  9300 ;; Parameters:    Size  Location     Type
  9301 ;;  byte            1    wreg     unsigned char 
  9302 ;; Auto vars:     Size  Location     Type
  9303 ;;  byte            1    0[COMRAM] unsigned char 
  9304 ;; Return value:  Size  Location     Type
  9305 ;;                  1    wreg      void 
  9306 ;; Registers used:
  9307 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9308 ;; Tracked objects:
  9309 ;;		On entry : 0/0
  9310 ;;		On exit  : 0/0
  9311 ;;		Unchanged: 0/0
  9312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9314 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9316 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9317 ;;Total ram usage:        1 bytes
  9318 ;; Hardware stack levels used: 1
  9319 ;; This function calls:
  9320 ;;		Nothing
  9321 ;; This function is called by:
  9322 ;;		_HighISR
  9323 ;; This function uses a non-reentrant model
  9324 ;;
  9325                           
  9326                           	psect	text42
  9327   0041BC                     __ptext42:
  9328                           	callstack 0
  9329   0041BC                     _putCharToRxBuf:
  9330                           	callstack 23
  9331                           
  9332                           ; BSR set to: 14
  9333                           ;incstack = 0
  9334                           ;putCharToRxBuf@byte stored from wreg
  9335   0041BC  6E01               	movwf	putCharToRxBuf@byte^0,c
  9336   0041BE                     
  9337                           ;serialTest.c: 86:     if (RxBufWriteCnt>=20) {RxBufWriteCnt=0;}
  9338   0041BE  0E13               	movlw	19
  9339   0041C0  6457               	cpfsgt	_RxBufWriteCnt^0,c	;volatile
  9340   0041C2  EFE5  F020         	goto	i2u403_41
  9341   0041C6  EFE7  F020         	goto	i2u403_40
  9342   0041CA                     i2u403_41:
  9343   0041CA  EFE9  F020         	goto	i2l4022
  9344   0041CE                     i2u403_40:
  9345   0041CE  0E00               	movlw	0
  9346   0041D0  6E57               	movwf	_RxBufWriteCnt^0,c	;volatile
  9347   0041D2                     i2l4022:
  9348                           
  9349                           ;serialTest.c: 87:     EUSART4RXbuf[RxBufWriteCnt++]=byte;
  9350   0041D2  0ECD               	movlw	low _EUSART4RXbuf
  9351   0041D4  2457               	addwf	_RxBufWriteCnt^0,w,c	;volatile
  9352   0041D6  6ED9               	movwf	fsr2l,c
  9353   0041D8  6ADA               	clrf	fsr2h,c
  9354   0041DA  0E00               	movlw	high _EUSART4RXbuf
  9355   0041DC  22DA               	addwfc	fsr2h,f,c
  9356   0041DE  C001  FFDF         	movff	putCharToRxBuf@byte,indf2
  9357   0041E2  2A57               	incf	_RxBufWriteCnt^0,f,c	;volatile
  9358   0041E4  0012               	return		;funcret
  9359   0041E6                     __end_of_putCharToRxBuf:
  9360                           	callstack 0
  9361                           
  9362 ;; *************** function _isDataInTxBuf *****************
  9363 ;; Defined at:
  9364 ;;		line 113 in file "serialTest.c"
  9365 ;; Parameters:    Size  Location     Type
  9366 ;;		None
  9367 ;; Auto vars:     Size  Location     Type
  9368 ;;		None
  9369 ;; Return value:  Size  Location     Type
  9370 ;;                  1    wreg      unsigned char 
  9371 ;; Registers used:
  9372 ;;		wreg, status,2, status,0
  9373 ;; Tracked objects:
  9374 ;;		On entry : 0/0
  9375 ;;		On exit  : 0/0
  9376 ;;		Unchanged: 0/0
  9377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9381 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9382 ;;Total ram usage:        0 bytes
  9383 ;; Hardware stack levels used: 1
  9384 ;; This function calls:
  9385 ;;		Nothing
  9386 ;; This function is called by:
  9387 ;;		_HighISR
  9388 ;;		_sendTxBuf
  9389 ;; This function uses a non-reentrant model
  9390 ;;
  9391                           
  9392                           	psect	text43
  9393   004254                     __ptext43:
  9394                           	callstack 0
  9395   004254                     _isDataInTxBuf:
  9396                           	callstack 23
  9397   004254                     
  9398                           ;serialTest.c: 114:     return (TxBufWriteCnt!=TxBufReadCnt);
  9399   004254  5054               	movf	_TxBufReadCnt^0,w,c	;volatile
  9400   004256  1855               	xorwf	_TxBufWriteCnt^0,w,c	;volatile
  9401   004258  A4D8               	btfss	status,2,c
  9402   00425A  EF31  F021         	goto	i2u183_41
  9403   00425E  EF34  F021         	goto	i2u183_40
  9404   004262                     i2u183_41:
  9405   004262  0E01               	movlw	1
  9406   004264  EF35  F021         	goto	i2u184_40
  9407   004268                     i2u183_40:
  9408   004268  0E00               	movlw	0
  9409   00426A                     i2u184_40:
  9410   00426A  0012               	return		;funcret
  9411   00426C                     __end_of_isDataInTxBuf:
  9412                           	callstack 0
  9413                           
  9414 ;; *************** function _getCharFromTxBuf *****************
  9415 ;; Defined at:
  9416 ;;		line 99 in file "serialTest.c"
  9417 ;; Parameters:    Size  Location     Type
  9418 ;;		None
  9419 ;; Auto vars:     Size  Location     Type
  9420 ;;		None
  9421 ;; Return value:  Size  Location     Type
  9422 ;;                  1    wreg      unsigned char 
  9423 ;; Registers used:
  9424 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9425 ;; Tracked objects:
  9426 ;;		On entry : 0/0
  9427 ;;		On exit  : 0/0
  9428 ;;		Unchanged: 0/0
  9429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9432 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9433 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9434 ;;Total ram usage:        2 bytes
  9435 ;; Hardware stack levels used: 1
  9436 ;; This function calls:
  9437 ;;		Nothing
  9438 ;; This function is called by:
  9439 ;;		_HighISR
  9440 ;; This function uses a non-reentrant model
  9441 ;;
  9442                           
  9443                           	psect	text44
  9444   004166                     __ptext44:
  9445                           	callstack 0
  9446   004166                     _getCharFromTxBuf:
  9447                           	callstack 23
  9448   004166                     
  9449                           ;serialTest.c: 100:     if (TxBufReadCnt>=60) {TxBufReadCnt=0;}
  9450   004166  0E3B               	movlw	59
  9451   004168  6454               	cpfsgt	_TxBufReadCnt^0,c	;volatile
  9452   00416A  EFB9  F020         	goto	i2u404_41
  9453   00416E  EFBB  F020         	goto	i2u404_40
  9454   004172                     i2u404_41:
  9455   004172  EFBD  F020         	goto	i2l4030
  9456   004176                     i2u404_40:
  9457   004176  0E00               	movlw	0
  9458   004178  6E54               	movwf	_TxBufReadCnt^0,c	;volatile
  9459   00417A                     i2l4030:
  9460                           
  9461                           ;serialTest.c: 101:     return EUSART4TXbuf[TxBufReadCnt++];
  9462   00417A  2A54               	incf	_TxBufReadCnt^0,f,c	;volatile
  9463   00417C  0454               	decf	_TxBufReadCnt^0,w,c	;volatile
  9464   00417E  6E01               	movwf	??_getCharFromTxBuf^0,c
  9465   004180  6A02               	clrf	(??_getCharFromTxBuf+1)^0,c
  9466   004182  0E00               	movlw	low _EUSART4TXbuf
  9467   004184  2401               	addwf	??_getCharFromTxBuf^0,w,c
  9468   004186  6ED9               	movwf	fsr2l,c
  9469   004188  0E03               	movlw	high _EUSART4TXbuf
  9470   00418A  2002               	addwfc	(??_getCharFromTxBuf+1)^0,w,c
  9471   00418C  6EDA               	movwf	fsr2h,c
  9472   00418E  50DF               	movf	indf2,w,c
  9473   004190  0012               	return		;funcret
  9474   004192                     __end_of_getCharFromTxBuf:
  9475                           	callstack 0
  9476                           
  9477                           	psect	rparam
  9478   000000                     
  9479                           	psect	temp
  9480   000058                     btemp:
  9481                           	callstack 0
  9482   000058                     	ds	1
  9483   000000                     int$flags	set	btemp
  9484   000000                     wtemp8	set	btemp+1
  9485   000000                     ttemp5	set	btemp+1
  9486   000000                     ttemp6	set	btemp+4
  9487   000000                     ttemp7	set	btemp+8
  9488                           
  9489                           	psect	idloc
  9490                           
  9491                           ;Config register IDLOC0 @ 0x200000
  9492                           ;	unspecified, using default values
  9493   200000                     	org	2097152
  9494   200000  0FFF               	dw	4095
  9495                           
  9496                           ;Config register IDLOC1 @ 0x200002
  9497                           ;	unspecified, using default values
  9498   200002                     	org	2097154
  9499   200002  0FFF               	dw	4095
  9500                           
  9501                           ;Config register IDLOC2 @ 0x200004
  9502                           ;	unspecified, using default values
  9503   200004                     	org	2097156
  9504   200004  0FFF               	dw	4095
  9505                           
  9506                           ;Config register IDLOC3 @ 0x200006
  9507                           ;	unspecified, using default values
  9508   200006                     	org	2097158
  9509   200006  0FFF               	dw	4095
  9510                           
  9511                           ;Config register IDLOC4 @ 0x200008
  9512                           ;	unspecified, using default values
  9513   200008                     	org	2097160
  9514   200008  0FFF               	dw	4095
  9515                           
  9516                           ;Config register IDLOC5 @ 0x20000A
  9517                           ;	unspecified, using default values
  9518   20000A                     	org	2097162
  9519   20000A  0FFF               	dw	4095
  9520                           
  9521                           ;Config register IDLOC6 @ 0x20000C
  9522                           ;	unspecified, using default values
  9523   20000C                     	org	2097164
  9524   20000C  0FFF               	dw	4095
  9525                           
  9526                           ;Config register IDLOC7 @ 0x20000E
  9527                           ;	unspecified, using default values
  9528   20000E                     	org	2097166
  9529   20000E  0FFF               	dw	4095
  9530                           
  9531                           	psect	config
  9532                           
  9533                           ;Config register CONFIG1L @ 0x300000
  9534                           ;	External Oscillator mode Selection bits
  9535                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  9536                           ;	Power-up default value for COSC bits
  9537                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  9538   300000                     	org	3145728
  9539   300000  AA                 	db	170
  9540                           
  9541                           ;Config register CONFIG1H @ 0x300001
  9542                           ;	unspecified, using default values
  9543                           ;	Clock Out Enable bit
  9544                           ;	CLKOUTEN = 0x1, unprogrammed default
  9545                           ;	Clock Switch Enable bit
  9546                           ;	CSWEN = 0x1, unprogrammed default
  9547                           ;	Fail-Safe Clock Monitor Enable bit
  9548                           ;	FCMEN = 0x1, unprogrammed default
  9549   300001                     	org	3145729
  9550   300001  FF                 	db	255
  9551                           
  9552                           ;Config register CONFIG2L @ 0x300002
  9553                           ;	unspecified, using default values
  9554                           ;	Master Clear Enable bit
  9555                           ;	MCLRE = 0x1, unprogrammed default
  9556                           ;	Power-up Timer Enable bit
  9557                           ;	PWRTE = 0x1, unprogrammed default
  9558                           ;	Low-power BOR enable bit
  9559                           ;	LPBOREN = 0x1, unprogrammed default
  9560                           ;	Brown-out Reset Enable bits
  9561                           ;	BOREN = 0x3, unprogrammed default
  9562   300002                     	org	3145730
  9563   300002  FF                 	db	255
  9564                           
  9565                           ;Config register CONFIG2H @ 0x300003
  9566                           ;	unspecified, using default values
  9567                           ;	Brown Out Reset Voltage selection bits
  9568                           ;	BORV = 0x3, unprogrammed default
  9569                           ;	ZCD Disable bit
  9570                           ;	ZCD = 0x1, unprogrammed default
  9571                           ;	PPSLOCK bit One-Way Set Enable bit
  9572                           ;	PPS1WAY = 0x1, unprogrammed default
  9573                           ;	Stack Full/Underflow Reset Enable bit
  9574                           ;	STVREN = 0x1, unprogrammed default
  9575                           ;	Debugger Enable bit
  9576                           ;	DEBUG = 0x1, unprogrammed default
  9577                           ;	Extended Instruction Set Enable bit
  9578                           ;	XINST = 0x1, unprogrammed default
  9579   300003                     	org	3145731
  9580   300003  FF                 	db	255
  9581                           
  9582                           ;Config register CONFIG3L @ 0x300004
  9583                           ;	WDT Period Select bits
  9584                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  9585                           ;	WDT operating mode
  9586                           ;	WDTE = OFF, WDT Disabled
  9587   300004                     	org	3145732
  9588   300004  9F                 	db	159
  9589                           
  9590                           ;Config register CONFIG3H @ 0x300005
  9591                           ;	unspecified, using default values
  9592                           ;	WDT Window Select bits
  9593                           ;	WDTCWS = 0x7, unprogrammed default
  9594                           ;	WDT input clock selector
  9595                           ;	WDTCCS = 0x7, unprogrammed default
  9596   300005                     	org	3145733
  9597   300005  FF                 	db	255
  9598                           
  9599                           ;Config register CONFIG4L @ 0x300006
  9600                           ;	unspecified, using default values
  9601                           ;	Write Protection Block 0
  9602                           ;	WRT0 = 0x1, unprogrammed default
  9603                           ;	Write Protection Block 1
  9604                           ;	WRT1 = 0x1, unprogrammed default
  9605                           ;	Write Protection Block 2
  9606                           ;	WRT2 = 0x1, unprogrammed default
  9607                           ;	Write Protection Block 3
  9608                           ;	WRT3 = 0x1, unprogrammed default
  9609                           ;	Write Protection Block 3
  9610                           ;	WRT4 = 0x1, unprogrammed default
  9611                           ;	Write Protection Block 3
  9612                           ;	WRT5 = 0x1, unprogrammed default
  9613                           ;	Write Protection Block 3
  9614                           ;	WRT6 = 0x1, unprogrammed default
  9615                           ;	Write Protection Block 3
  9616                           ;	WRT7 = 0x1, unprogrammed default
  9617   300006                     	org	3145734
  9618   300006  FF                 	db	255
  9619                           
  9620                           ;Config register CONFIG4H @ 0x300007
  9621                           ;	unspecified, using default values
  9622                           ;	Configuration Register Write Protection bit
  9623                           ;	WRTC = 0x1, unprogrammed default
  9624                           ;	Boot Block Write Protection bit
  9625                           ;	WRTB = 0x1, unprogrammed default
  9626                           ;	Data EEPROM Write Protection bit
  9627                           ;	WRTD = 0x1, unprogrammed default
  9628                           ;	Scanner Enable bit
  9629                           ;	SCANE = 0x1, unprogrammed default
  9630                           ;	Low Voltage Programming Enable bit
  9631                           ;	LVP = 0x1, unprogrammed default
  9632   300007                     	org	3145735
  9633   300007  FF                 	db	255
  9634                           
  9635                           ;Config register CONFIG5L @ 0x300008
  9636                           ;	unspecified, using default values
  9637                           ;	UserNVM Program Memory Code Protection bit
  9638                           ;	CP = 0x1, unprogrammed default
  9639                           ;	DataNVM Memory Code Protection bit
  9640                           ;	CPD = 0x1, unprogrammed default
  9641   300008                     	org	3145736
  9642   300008  FF                 	db	255
  9643                           
  9644                           ;Config register CONFIG5H @ 0x300009
  9645                           ;	unspecified, using default values
  9646   300009                     	org	3145737
  9647   300009  FF                 	db	255
  9648                           
  9649                           ;Config register CONFIG6L @ 0x30000A
  9650                           ;	unspecified, using default values
  9651                           ;	Table Read Protection Block 0
  9652                           ;	EBTR0 = 0x1, unprogrammed default
  9653                           ;	Table Read Protection Block 1
  9654                           ;	EBTR1 = 0x1, unprogrammed default
  9655                           ;	Table Read Protection Block 2
  9656                           ;	EBTR2 = 0x1, unprogrammed default
  9657                           ;	Table Read Protection Block 3
  9658                           ;	EBTR3 = 0x1, unprogrammed default
  9659                           ;	Table Read Protection Block 4
  9660                           ;	EBTR4 = 0x1, unprogrammed default
  9661                           ;	Table Read Protection Block 5
  9662                           ;	EBTR5 = 0x1, unprogrammed default
  9663                           ;	Table Read Protection Block 6
  9664                           ;	EBTR6 = 0x1, unprogrammed default
  9665                           ;	Table Read Protection Block 7
  9666                           ;	EBTR7 = 0x1, unprogrammed default
  9667   30000A                     	org	3145738
  9668   30000A  FF                 	db	255
  9669                           
  9670                           ;Config register CONFIG6H @ 0x30000B
  9671                           ;	unspecified, using default values
  9672                           ;	Boot Block Table Read Protection bit
  9673                           ;	EBTRB = 0x1, unprogrammed default
  9674   30000B                     	org	3145739
  9675   30000B  FF                 	db	255
  9676                           tosu	equ	0xFFF
  9677                           tosh	equ	0xFFE
  9678                           tosl	equ	0xFFD
  9679                           stkptr	equ	0xFFC
  9680                           pclatu	equ	0xFFB
  9681                           pclath	equ	0xFFA
  9682                           pcl	equ	0xFF9
  9683                           tblptru	equ	0xFF8
  9684                           tblptrh	equ	0xFF7
  9685                           tblptrl	equ	0xFF6
  9686                           tablat	equ	0xFF5
  9687                           prodh	equ	0xFF4
  9688                           prodl	equ	0xFF3
  9689                           indf0	equ	0xFEF
  9690                           postinc0	equ	0xFEE
  9691                           postdec0	equ	0xFED
  9692                           preinc0	equ	0xFEC
  9693                           plusw0	equ	0xFEB
  9694                           fsr0h	equ	0xFEA
  9695                           fsr0l	equ	0xFE9
  9696                           wreg	equ	0xFE8
  9697                           indf1	equ	0xFE7
  9698                           postinc1	equ	0xFE6
  9699                           postdec1	equ	0xFE5
  9700                           preinc1	equ	0xFE4
  9701                           plusw1	equ	0xFE3
  9702                           fsr1h	equ	0xFE2
  9703                           fsr1l	equ	0xFE1
  9704                           bsr	equ	0xFE0
  9705                           indf2	equ	0xFDF
  9706                           postinc2	equ	0xFDE
  9707                           postdec2	equ	0xFDD
  9708                           preinc2	equ	0xFDC
  9709                           plusw2	equ	0xFDB
  9710                           fsr2h	equ	0xFDA
  9711                           fsr2l	equ	0xFD9
  9712                           status	equ	0xFD8

Data Sizes:
    Strings     15
    Constant    0
    Data        4
    BSS         88
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     83      87
    BANK0           160    109     137
    BANK1           256    198     198
    BANK2           256    198     198
    BANK3           256      0      60
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    vfprintf$2	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfprintf$1	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_1(CODE[15]), 

    vfprintf$0	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    S2604$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2604$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    motorRight.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    motorRight.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    motorLeft.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    motorLeft.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    reverseSquareLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK0[9]), 

    reverseSquareLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK0[9]), 

    reverseSquareRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK0[9]), 

    reverseSquareRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK0[9]), 

    turnLeft_135@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft_135@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft_135@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft_135@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft_135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK0[9]), 

    turnLeft_135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK0[9]), 

    turnRight_135@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight_135@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight_135@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight_135@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight_135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK0[9]), 

    turnRight_135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK0[9]), 

    turn_180@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turn_180@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turn_180@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turn_180@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turn_180@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK0[9]), 

    turn_180@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK0[9]), 

    turnRight_90@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight_90@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight_90@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight_90@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight_90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK0[9]), 

    turnRight_90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK0[9]), 

    turnLeft_90@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft_90@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft_90@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft_90@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft_90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK0[9]), 

    turnLeft_90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK0[9]), 

    turnRight@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    reverse@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    reverse@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    reverse@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK0[9]), 

    reverse@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    reverse@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    reverse@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK0[9]), 

    forward@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    forward@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    forward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK0[9]), 

    forward@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    forward@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    forward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK0[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK0[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK0[9]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK0[9]), main@motorLeft(BANK0[9]), 

    DCmotorsInit@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK0[9]), 

    S107DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    S107DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK0[9]), 

    return_home_turns@turn_history	PTR unsigned int  size(2) Largest target is 198
		 -> main@turn_history(BANK1[198]), 

    return_home_turns@counter_history	PTR unsigned int  size(2) Largest target is 198
		 -> main@counter_history(BANK2[198]), 

    return_home_turns@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK0[9]), 

    return_home_turns@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK0[9]), 

    colorDetect@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK0[9]), 

    colorDetect@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK0[9]), 

    colorDetect@whiteRGBVal	PTR struct RGB size(2) Largest target is 8
		 -> main@whiteRGBVal(BANK0[8]), 

    colorDetect@ambientRGBVal	PTR struct RGB size(2) Largest target is 8
		 -> main@ambientRGBVal(BANK0[8]), 

    whiteCal@v	PTR struct RGB size(2) Largest target is 8
		 -> main@whiteRGBVal(BANK0[8]), 

    ambientCal@v	PTR struct RGB size(2) Largest target is 8
		 -> main@ambientRGBVal(BANK0[8]), 

    getColor@v	PTR struct RGB size(2) Largest target is 8
		 -> main@whiteRGBVal(BANK0[8]), main@RGBVal(BANK0[8]), main@ambientRGBVal(BANK0[8]), colorDetect@RGBVal(BANK0[8]), 


Critical Paths under _main in COMRAM

    _main->_colorDetect
    _whiteCal->_getColor
    _return_home_turns->_turnLeft_135
    _return_home_turns->_turnLeft_90
    _return_home_turns->_turnRight_135
    _return_home_turns->_turnRight_90
    _return_home_turns->_turn_180
    _forward->_setMotorPWM
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _colorDetect->___fldiv
    _turn_180->_stop
    _turnRight_135->_stop
    _turnLeft_135->_stop
    _reverseSquareRight->_turnRight_90
    _turnRight_90->_stop
    _reverseSquareLeft->_turnLeft_90
    _turnLeft_90->_stop
    _stop->_setMotorPWM
    _reverse->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    ___flsub->___fladd
    ___flmul->___flsub
    ___flge->___flsub
    ___fldiv->___flmul
    _ambientCal->_getColor
    _getColor->_color_read_Blue
    _getColor->_color_read_Clear
    _getColor->_color_read_Green
    _getColor->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle

Critical Paths under _HighISR in COMRAM

    _HighISR->_getCharFromTxBuf

Critical Paths under _main in BANK0

    _main->_colorDetect

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               476   476      0  264832
                                             80 COMRAM     3     3      0
                                             52 BANK0     57    57      0
                                              0 BANK1    198   198      0
                                              0 BANK2    198   198      0
                       _DCmotorsInit
                            ___fldiv
                             ___flge
                           ___xxtofl
                         _ambientCal
                        _colorDetect
                   _color_click_init
                            _forward
                           _getColor
                    _initDCmotorsPWM
                         _initUSART4
                  _return_home_turns
                               _stop
                           _whiteCal
 ---------------------------------------------------------------------------------
 (1) _whiteCal                                             6     4      2     988
                                             17 COMRAM     6     4      2
                           _getColor
 ---------------------------------------------------------------------------------
 (1) _return_home_turns                                   16     6     10   83119
                                             35 COMRAM    16     6     10
                            _forward
                       _turnLeft_135
                        _turnLeft_90
                      _turnRight_135
                       _turnRight_90
                           _turn_180
 ---------------------------------------------------------------------------------
 (2) _forward                                              5     1      4    3445
                                             23 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      76
                                              4 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              8 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              6 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _colorDetect                                         58    46     12  156537
                                             78 COMRAM     2     2      0
                                              0 BANK0     52    40     12
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                           ___xxtofl
                           _getColor
                  _reverseSquareLeft
                 _reverseSquareRight
                       _turnLeft_135
                        _turnLeft_90
                      _turnRight_135
                       _turnRight_90
                           _turn_180
 ---------------------------------------------------------------------------------
 (2) _turn_180                                             6     2      4   15963
                                             29 COMRAM     6     2      4
                            _reverse
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _turnRight_135                                        6     2      4   15550
                                             29 COMRAM     6     2      4
                            _reverse
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _turnLeft_135                                         6     2      4   15547
                                             29 COMRAM     6     2      4
                            _reverse
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _reverseSquareRight                                   6     2      4   28193
                                             35 COMRAM     6     2      4
                            _reverse
                               _stop
                       _turnRight_90
 ---------------------------------------------------------------------------------
 (2) _turnRight_90                                         6     2      4   15851
                                             29 COMRAM     6     2      4
                            _reverse
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _reverseSquareLeft                                    6     2      4   28193
                                             35 COMRAM     6     2      4
                            _reverse
                               _stop
                        _turnLeft_90
 ---------------------------------------------------------------------------------
 (2) _turnLeft_90                                          6     2      4   15851
                                             29 COMRAM     6     2      4
                            _reverse
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 6     2      4    7157
                                             23 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _reverse                                              5     1      4    4813
                                             23 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          6     4      2    2877
                                             17 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     491
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     358
                                             10 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4    2418
                                              4 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    3801
                                             20 COMRAM     8     0      8
                            ___fladd
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             16     8      8    2262
                                              4 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             25    17      8    4768
                                             28 COMRAM    25    17      8
                            ___flsub (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8    4742
                                             28 COMRAM    12     4      8
                            ___flsub (ARG)
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             25    17      8    1855
                                             53 COMRAM    25    17      8
                            ___flmul (ARG)
                            ___flsub (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _ambientCal                                           6     4      2    1064
                                             17 COMRAM     6     4      2
                           _getColor
 ---------------------------------------------------------------------------------
 (2) _getColor                                             2     0      2     844
                                             15 COMRAM     2     0      2
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (3) _color_read_Red                                       7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Green                                     7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Clear                                     7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Blue                                      7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Write                                   1     1      0      22
                                              5 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Read                                    3     3      0      45
                                              5 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Idle                                    1     1      0       0
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DCmotorsInit                                         4     0      4     416
                                              4 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _HighISR                                              2     2      0      22
                                              2 COMRAM     2     2      0
                   _getCharFromTxBuf
                      _isDataInTxBuf
                     _putCharToRxBuf
 ---------------------------------------------------------------------------------
 (8) _putCharToRxBuf                                       1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _isDataInTxBuf                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _getCharFromTxBuf                                     2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DCmotorsInit
   ___fldiv
     ___flmul (ARG)
       ___flsub (ARG)
         ___fladd
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___flsub (ARG)
     ___xxtofl (ARG)
   ___flge
     ___flsub (ARG)
   ___xxtofl
   _ambientCal
     _getColor
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_read_Clear
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
   _colorDetect
     ___fldiv
     ___flge
     ___flmul
     ___flsub
     ___xxtofl
     _getColor
     _reverseSquareLeft
       _reverse
         _setMotorPWM
           ___lwdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
       _turnLeft_90
         _reverse
         _setMotorPWM
         _stop
     _reverseSquareRight
       _reverse
       _stop
       _turnRight_90
         _reverse
         _setMotorPWM
         _stop
     _turnLeft_135
       _reverse
       _setMotorPWM
       _stop
     _turnLeft_90
     _turnRight_135
       _reverse
       _setMotorPWM
       _stop
     _turnRight_90
     _turn_180
       _reverse
       _setMotorPWM
       _stop
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _forward
     _setMotorPWM
   _getColor
   _initDCmotorsPWM
   _initUSART4
   _return_home_turns
     _forward
     _turnLeft_135
     _turnLeft_90
     _turnRight_135
     _turnRight_90
     _turn_180
   _stop
   _whiteCal
     _getColor

 _HighISR (ROOT)
   _getCharFromTxBuf
   _isDataInTxBuf
   _putCharToRxBuf

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      62        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      3C      11       23.4%
BITBANK2           100      0       0       8        0.0%
BANK2              100     C6      C6       9       77.3%
BITBANK1           100      0       0       6        0.0%
BANK1              100     C6      C6       7       77.3%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     6D      89       5       85.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     53      57       1       92.6%
BITBIGSFRlhhhhl     52      0       0      42        0.0%
BITBIGSFRlhhhll     37      0       0      44        0.0%
BITBIGSFRlllhlh     2A      0       0      55        0.0%
BITBIGSFRlllll      26      0       0      60        0.0%
BITBIGSFRlhhhll     20      0       0      47        0.0%
BITBIGSFRlhhhll     1E      0       0      49        0.0%
BITBIGSFRhhhhhh     1B      0       0      33        0.0%
BITBIGSFRhhhhll     17      0       0      38        0.0%
BITBIGSFRhhhhhl     13      0       0      34        0.0%
BITBIGSFRlhhl       11      0       0      50        0.0%
BITBIGSFRhhhhlh      E      0       0      35        0.0%
BITBIGSFRhhhhhh      D      0       0      32        0.0%
BITBIGSFRlhhhll      C      0       0      48        0.0%
BITBIGSFRlllhll      9      0       0      57        0.0%
BITBIGSFRlllhlh      9      0       0      56        0.0%
BITBIGSFRlhhhll      8      0       0      45        0.0%
BITBIGSFRllllh       6      0       0      59        0.0%
BITBIGSFRlllhh       6      0       0      54        0.0%
BITBIGSFRlllhll      5      0       0      58        0.0%
BITBIGSFRllhl        5      0       0      53        0.0%
BITBIGSFRhhhhll      5      0       0      39        0.0%
BITBIGSFRllhh        3      0       0      52        0.0%
BITBIGSFRlhhhlh      2      0       0      43        0.0%
BITBIGSFRhhhhll      2      0       0      37        0.0%
BITBIGSFRlhhhhh      1      0       0      41        0.0%
BITBIGSFRlhhhll      1      0       0      46        0.0%
BITBIGSFRhhhhlh      1      0       0      36        0.0%
BITBIGSFRlhl         1      0       0      51        0.0%
BITBIGSFRhhll        1      0       0      40        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2A8      61        0.0%
DATA                 0      0     2A8       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Thu Dec 15 04:22:54 2022

                  _color_read_Red 3EF2                      ___fldiv@aexp 004E  
                    ___fldiv@bexp 004D                      ___fldiv@sign 0046  
                 _color_read_Blue 3FE2                                l53 4136  
                              l62 3F90                                l71 3EF0  
                              l56 4252                                l65 4030  
                              l81 3852                                l59 3F40  
                              l68 3FE0                                l76 3936  
                              l96 1724               ___wmul@multiplicand 0007  
      __end_of_reverseSquareRight 3CFA                  _color_read_Clear 3F92  
                _color_read_Green 3F42                               l122 2F72  
                             l107 1A08                               l205 3C62  
                             l126 3008                               l303 41BA  
                             l215 3A0C                               l312 428A  
                             l321 4276                               l225 3AE2  
                             l306 41E6                               l315 4294  
                             l243 352E                               l324 4102  
                             l309 420C                               l318 4280  
                             l270 366A                               l264 32B2  
                             l249 33F0                               l273 3CF8  
                             l185 3E1E                               l258 2CDA  
                             l195 3174                               l188 3BB4  
                             l276 3D8E                               l544 4232  
                             l814 376E                               l479 4164  
                             l809 3728                               wreg 000FE8  
                    ___flmul@aexp 002E                      ___flmul@bexp 002F  
                    ___flmul@sign 0029                      ___flmul@temp 0034  
                    ___flmul@prod 0030              reverseSquareRight@mL 0024  
            reverseSquareRight@mR 0026                              l1114 40C0  
                            l1202 2E8E                              l1042 3E92  
                            l1131 28D8                              l1035 3E8A  
                            l1140 29C0                              l1213 2E26  
                            l1126 2AB4                              l1206 2DCA  
                            l1128 2914                              l1072 1BF8  
                            l3000 1A36                              l1137 295A  
                            l1081 1EC8                              l1073 1BE6  
                            l1162 22F2                              l1074 1BAC  
                            l3010 1A70                              l3002 1A46  
                            l1139 29D2                              l3100 1C3A  
                            l3020 1A9E                              l3012 1A76  
                            l3004 1A56                              l1165 2184  
                            l1158 1F8E                              l3110 1C74  
                            l3102 1C48                              l3030 1AD2  
                            l3022 1AA0                              l3014 1A88  
                            l3006 1A58                              l1175 22B4  
                            l1167 21FC                              l1168 21EA  
                            l3120 1CE0                              l3112 1C76  
                            l3104 1C56                              l3040 1B0E  
                            l3024 1AB0                              l3032 1ADA  
                            l3016 1A8A                              l3008 1A60  
                            l3200 41A4                              l4000 414A  
                            l1089 1D12                              l1098 1DE2  
                            l3130 1D38                              l3122 1CE2  
                            l3114 1C80                              l3106 1C62  
                            l3050 1B22                              l3042 1B12  
                            l3034 1AEA                              l3026 1AC0  
                            l3018 1A90                              l3210 2AB6  
                            l3202 41A6                              l4010 415C  
                            l4002 414C                              l1099 1DD0  
                            l3140 1D66                              l3124 1CF2  
                            l3108 1C66                              l3116 1C86  
                            l3060 1B36                              l3052 1B26  
                            l3044 1B16                              l3036 1AFC  
                            l3028 1AD0                              l3300 3226  
                            l3220 2B32                              l3212 2ACA  
                            l3204 41A8                              l4012 415E  
                            l4004 4156                              l3142 1D74  
                            l3134 1D4C                              l3150 1D92  
                            l3118 1CAC                              l3126 1D02  
                            l3062 1B3A                              l3054 1B2A  
                            l3046 1B1A                              l3038 1B0A  
                            l3070 1B4A                              l3310 3286  
                            l3302 323E                              l3230 2B8A  
                            l3222 2B42                              l3214 2AE2  
                            l3206 4236                              l4014 4160  
                            l4006 4158                              l1199 2D32  
                            l3208 3E94                              l3400 27FE  
                            l3144 1D7C                              l3136 1D56  
                            l3128 1D28                              l3152 1DA0  
                            l3080 1BBA                              l3072 1B4E  
                            l3064 1B3E                              l3056 1B2E  
                            l3048 1B1E                              l3320 3588  
                            l3312 329E                              l3304 324A  
                            l3240 2BF2                              l3232 2B96  
                            l3224 2B52                              l3216 2B0E  
                            l4016 4162                              l4008 415A  
                            l3402 280E                              l3410 282E  
                            l3162 1DF2                              l3170 1E48  
                            l3154 1DA4                              l3146 1D80  
                            l3138 1D64                              l3090 1BE4  
                            l3082 1BC6                              l3074 1B78  
                            l3066 1B42                              l3058 1B32  
                            l3330 35E0                              l3322 359C  
                            l3314 3530                              l3306 3256  
                            l3250 2C4E                              l3242 2C0A  
                            l3234 2BAE                              l3226 2B66  
                            l3218 2B22                              l3420 286C  
                            l3412 283E                              l3404 2816  
                            l3500 1ED6                              l3180 1E9A  
                            l3172 1E58                              l3164 1DFE  
                            l3156 1DB2                              l3148 1D90  
                            l3092 1C06                              l3084 1BCA  
                            l3076 1B94                              l3068 1B46  
                            l3340 3640                              l3332 35F8  
                            l3324 35AC                              l3316 3544  
                            l3308 326E                              l3260 2CAE  
                            l3252 2C66                              l3244 2C1A  
                            l3236 2BC6                              l3228 2B7E  
                            l3430 28B4                              l3422 287C  
                            l3414 283E                              l3406 281A  
                            l3510 1F16                              l3502 1EE4  
                            l3190 1EB8                              l3182 1EA0  
                            l3174 1E68                              l3166 1E0C  
                            l3158 1DC8                              l3094 1C16  
                            l3086 1BD8                              l3078 1BA4  
                            l3270 3CA4                              l3342 3656  
                            l3334 3604                              l3326 35BC  
                            l3318 355C                              l3262 2CC6  
                            l3254 2C72                              l3246 2C2A  
                            l3238 2BDE                              l3350 39A0  
                            l3440 2902                              l3432 28C8  
                            l3424 288C                              l3360 271C  
                            l3600 2218                              l3520 1F46  
                            l3512 1F1C                              l3504 1EE6  
                            l3184 1EA2                              l3176 1E88  
                            l3168 1E46                              l3088 1BDA  
                            l2800 3E20                              l3280 3D3A  
                            l3272 3CB8                              l3264 3C64  
                            l3336 3610                              l3328 35CC  
                            l3256 2C7E                              l3248 2C3A  
                            l4400 1526                              l4320 0E12  
                            l3352 39B8                              l3344 3938  
                            l3450 294A                              l3442 2912  
                            l3434 28D6                              l3426 289C  
                            l3418 2852                              l3370 2758  
                            l3362 2728                              l3610 2282  
                            l3602 2226                              l3530 1F7E  
                            l3522 1F48                              l3514 1F2C  
                            l3506 1EF6                              l3186 1EA8  
                            l3178 1E8C                              l3098 1C2A  
                            l2810 3E58                              l2802 3E28  
                            l3282 3D4E                              l3274 3CFA  
                            l3266 3C78                              l3338 3628  
                            l3290 31CE                              l3258 2C96  
                            l4410 1620                              l4402 1534  
                            l4330 0E8A                              l4322 0E1E  
                            l3194 4192                              l3346 397C  
                            l3354 39C4                              l3460 298A  
                            l3452 2958                              l3444 2924  
                            l3436 28E2                              l3428 28A4  
                            l3380 2788                              l3372 2768  
                            l3364 2736                              l3620 22D8  
                            l3612 229C                              l3604 2250  
                            l3540 1FCE                              l3532 1F9E  
                            l3524 1F58                              l3516 1F32  
                            l3508 1F06                              l3188 1EB6  
                            l2820 3E84                              l2812 3E5E  
                            l2804 3E3A                              l2900 3A8E  
                            l3276 3D0E                              l3268 3C90  
                            l3292 31E2                              l3284 3176  
                            l4420 16B4                              l4412 1634  
                            l4404 158A                              l4340 107E  
                            l4332 0EC2                              l4324 0E2E  
                            l3196 419C                              l3356 39DC  
                            l3348 3994                              l4500 2316  
                            l2910 3F38                              l3470 29FC  
                            l3462 29B8                              l3446 293A  
                            l3454 296A                              l3438 2900  
                            l3390 27BE                              l3382 278E  
                            l3374 276A                              l3366 2738  
                            l3614 22B8                              l3622 22DE  
                            l3606 2254                              l3550 201E  
                            l3542 1FD8                              l3534 1FAE  
                            l3526 1F68                              l3518 1F38  
                            l3630 408C                              l2814 3E74  
                            l2806 3E42                              l2830 3092  
                            l2822 300A                              l2902 3A9A  
                            l3278 3D26                              l3294 31F2  
                            l3286 318A                              l4422 16E6  
                            l4414 1642                              l4406 15E0  
                            l4430 1724                              l4350 1190  
                            l4342 112C                              l4334 0EFA  
                            l4326 0E44                              l3198 41A2  
                            l3710 412C                              l3702 4104  
                            l3358 39F4                              l4510 2320  
                            l4502 2318                              l2840 41F6  
                            l2920 3FE2                              l3720 387E  
                            l3712 3854                              l3480 2A74  
                            l3472 2A26                              l3456 2978  
                            l3448 2940                              l3392 27CE  
                            l3384 279C                              l3368 2748  
                            l3376 2772                              l3640 36D8  
                            l3624 22E2                              l3616 22C8  
                            l3608 226E                              l3560 2060  
                            l3552 202A                              l3544 1FEE  
                            l3528 1F78                              l2816 3E7C  
                            l2808 3E4A                              l2832 30D4  
                            l2824 3026                              l2904 3AB2  
                            l3296 3202                              l3288 31A2  
                            l4440 181E                              l4432 1756  
                            l4424 16F4                              l4408 1612  
                            l4416 1650                              l4360 1228  
                            l4352 11C2                              l4344 113C  
                            l4336 0F22                              l4328 0E58  
                            l3704 4108                              l4600 260A  
                            l4520 232A                              l4512 2322  
                            l4504 231A                              l2842 4282  
                            l2850 4278                              l2922 4028  
                            l2914 3F42                              l3730 38FC  
                            l3722 389A                              l3490 2AAA  
                            l3482 2A90                              l3466 29E2  
                            l3474 2A2A                              l3458 297C  
                            l3394 27D0                              l3386 279E  
                            l3378 2782                              l3650 3766  
                            l3642 36E8                              l3634 366C  
                            l3618 22D6                              l3570 20C2  
                            l3562 2070                              l3554 2038  
                            l3546 1FFA                              l3538 1FC2  
                            l2818 3E7E                              l2834 30F0  
                            l2826 307A                              l2906 3ACA  
                            l3298 3212                              l4450 188E  
                            l4442 182C                              l4434 1788  
                            l4426 1708                              l4418 1682  
                            l4370 12E0                              l4362 125A  
                            l4354 11D4                              l4346 116E  
                            l4338 0FD0                              l3706 4112  
                            l4602 260E                              l4530 2334  
                            l4522 232C                              l4514 2324  
                            l4506 231C                              l2860 40C8  
                            l2844 4286                              l2852 427C  
                            l2916 3F88                              l2908 3EF2  
                            l3732 3914                              l3724 38B6  
                            l3484 2A94                              l3476 2A44  
                            l3468 29EE                              l3388 27AE  
                            l3396 27D8                              l3652 376C  
                            l3644 36F6                              l3636 369A  
                            l3580 216A                              l3572 20DE  
                            l3564 208A                              l3556 2044  
                            l3548 2012                              l3628 407C  
                            l3660 2CFC                              l2836 3134  
                            l2828 308E                              l2940 3320  
                            l2932 32B4                              l4460 1922  
                            l4452 18C0                              l4444 1840  
                            l4436 17BA                              l4428 1716  
                            l4380 13DA                              l4372 12EE  
                            l4364 128C                              l4356 11E4  
                            l4348 1180                              l3708 4122  
                            l3740 3778                              l4620 26BE  
                            l4612 267C                              l4604 263A  
                            l4540 2340                              l4532 2336  
                            l4524 232E                              l4516 2326  
                            l4508 231E                              l2838 41E6  
                            l2862 40D0                              l2854 428C  
                            l2846 426E                              l2926 3F92  
                            l3726 38D8                              l3718 385C  
                            l3486 2AA2                              l3478 2A5A  
                            l3398 27E8                              l3646 3708  
                            l3638 36AA                              l3590 21A6  
                            l3582 2174                              l3574 2108  
                            l3566 209A                              l3558 2054  
                            l3670 2D74                              l3662 2D42  
                            l2950 337C                              l2942 3330  
                            l2934 32C8                              l4470 19D4  
                            l4454 18F2                              l4462 1930  
                            l4446 184E                              l4438 17EC  
                            l4390 146E                              l4382 13E8  
                            l4366 12BE                              l4374 12FC  
                            l4358 1216                              l3750 380C  
                            l3742 379A                              l3734 3770  
                            l4622 26DE                              l4614 2680  
                            l4606 2640                              l4550 234A  
                            l4542 2342                              l4534 2338  
                            l4526 2330                              l4518 2328  
                            l2864 40D8                              l2856 4290  
                            l2848 4272                              l2928 3FD8  
                            l3728 38F0                              l3488 2AA8  
                            l3648 3716                              l3592 21B4  
                            l3584 2182                              l3576 213E  
                            l3568 20B6                              l3680 2DFC  
                            l3672 2D80                              l3664 2D58  
                            l3656 2CDE                              l2880 3BF6  
                            l2872 3BB6                              l2960 33DC  
                            l2952 3388                              l2944 3340  
                            l2936 32E0                              l4472 19E8  
                            l4464 1962                              l4456 1900  
                            l4448 185C                              l4392 14A0  
                            l4384 13FC                              l4376 132E  
                            l4368 12CC                              l3752 3818  
                            l3744 37B6                              l4624 26E8  
                            l4608 2644                              l4616 2698  
                            l4560 237C                              l4552 235E  
                            l4544 2344                              l4536 233A  
                            l4528 2332                              l4480 22F4  
                            l2866 40FE                              l2858 40C4  
                            l3594 21E2                              l3586 2194  
                            l3578 214C                              l3498 1ECA  
                            l3690 2E3A                              l3682 2E08  
                            l3674 2DB2                              l3658 2CEE  
                            l2794 420E                              l2890 3C4A  
                            l2882 3C02                              l2874 3BBA  
                            l2970 345E                              l2962 33F2  
                            l2954 3394                              l2946 3350  
                            l2938 330C                              l4474 19F6  
                            l4466 1994                              l4458 1914  
                            l4394 14F6                              l4386 140A  
                            l4378 1384                              l3922 2EAA  
                            l3754 3830                              l3746 37D2  
                            l4626 26FC                              l4618 26AA  
                            l4570 23DC                              l4562 2388  
                            l4554 2368                              l4546 2344  
                            l4538 233C                              l4490 230C  
                            l4482 22F8                              l2868 4100  
                            l3588 21A2                              l3692 2E5E  
                            l3684 2E16                              l3676 2DB4  
                            l3668 2D6C                              l2796 422A  
                            l2892 3A0E                              l2884 3C0E  
                            l2876 3BD2                              l2980 34BA  
                            l2972 346E                              l2964 3406  
                            l2956 33AC                              l2948 3364  
                            l4468 19C6                              l4476 1A00  
                            l4396 1504                              l4388 1418  
                            l3940 2F54                              l3932 2EF2  
                            l3924 2EC2                              l3916 2E90  
                            l3748 37F4                              l4580 248A  
                            l4572 23DE                              l4564 23BE  
                            l4556 2370                              l4548 2344  
                            l4492 230E                              l4484 22FC  
                            l3598 220C                              l3694 2E6E  
                            l3686 2E34                              l3678 2DC0  
                            l2894 3A52                              l2878 3BDE  
                            l2886 3C1A                              l2990 351A  
                            l2982 34C6                              l2974 347E  
                            l2966 341E                              l2958 33C4  
                            l4398 1518                              l3942 2F5A  
                            l3934 2F0A                              l3926 2EDA  
                            l3918 2E98                              l4590 2578  
                            l4582 2496                              l4566 23C2  
                            l4574 23F6                              l4558 2370  
                            l4494 2310                              l4486 2308  
                            l2992 1A0A                              l3696 2E7C  
                            l3688 2E36                              l2896 3A6A  
                            l2888 3C32                              l2984 34D2  
                            l2976 348E                              l2968 344A  
                            l3960 3DCA                              l4648 2FB8  
                            l3936 2F22                              l4592 25AC  
                            l4584 24BA                              l4576 243A  
                            l4568 23DA                              l4496 2312  
                            l4488 230A                              l2994 1A16  
                            l3698 2E7E                              l2898 3A76  
                            l2986 34EA                              l2978 34A2  
                            l3970 3E06                              l3962 3DEE  
                            l3938 2F36                              l3946 2F90  
                            l4594 25B0                              l4586 24DC  
                            l4578 2446                              l4498 2314  
                            l3980 3AF0                              l2996 1A24  
                            l2988 3502                              l3972 3E10  
                            l3964 3DF8                              l3956 3D90  
                            l3948 2FFE                              l4596 25B8  
                            l4588 2522                              l3990 3B4C  
                            l3982 3B00                              l2998 1A26  
                            l3974 3E12                              l3966 3DFA  
                            l3958 3DA0                              l4598 25F4  
                            l3984 3B10                              l3976 3E1C  
                            l3968 3E04                              l3992 4138  
                            l3986 3B24                              l3978 3AE4  
                            l3994 413E                              l3988 3B38  
                            l3996 4146                              l3998 4148  
                            STR_1 0E01                              u3000 2758  
                            u3001 2754                              u3010 279C  
                            u3011 2798                              u3100 293A  
                            u3020 27AE                              u2300 30F0  
                            u3101 2936                              u3021 27AA  
                            u2301 30EC                              u2310 41F6  
                            u3110 2958                              u3030 27BE  
                            u2311 41F2                              u3111 2954  
                            u3031 27BA                              u2320 420C  
                            u3200 2AA2                              u3120 2978  
                            u3040 27FE                              u2400 3A8E  
                    _BAUD4CONbits 000EE9                              u2321 4208  
                            u3201 2A9E                              u3121 2974  
                            u3041 27FA                              u2401 3A8A  
                            u2330 40EC                              u3130 298A  
                            u3050 283E                              u3210 1EE4  
                            u2410 3AB2                              u4010 2EA6  
                            u2331 40E4                              u3131 2986  
                            u3051 283A                              u3211 1EE0  
                            u2411 3AAE                              u4011 2EA2  
                            u3140 29B8                              u3060 28B4  
                            u3300 2182                              u3220 1EF6  
                            u2500 1A88                              u2260 3E3A  
                            u2420 3ACA                              u4020 2F8C  
                            u3141 29B4                              u3061 28B0  
                            u3301 217E                              u3221 1EF2  
                            u2501 1A84                              u2261 3E36  
                            u2421 3AC6                              u4021 2F88  
                            u3150 29CE                              u3070 28D6  
                            u3310 21A2                              u3230 1F06  
                            u2510 1A9E                              u2270 3E58  
                            u2350 3BD2                              u2430 33AC  
                            u3151 29CA                              u3071 28D2  
                            u3311 219E                              u3231 1F02  
                            u2511 1A9A                              u2271 3E54  
                            u2351 3BCE                              u2431 33A8  
                            u3160 29E2                              u3080 2900  
                            u3400 369A                              u3320 21B4  
                            u3240 1F46                              u2600 1BD8  
                            u2520 1AB0                              u2280 3E74  
                            u2360 3BF6                              u2440 33C4  
                            u3161 29DE                              u3081 28FC  
                            u3401 3696                              u3321 21B0  
                            u3241 1F42                              u2601 1BD4  
                            u2521 1AAC                              u2281 3E70  
                            u2361 3BF2                              u2441 33C0  
                            u3170 29FC                              u3090 2924  
                            u3410 36D8                              u3330 21E2  
                            u3250 1F58                              u2610 1BF8  
                            u2530 1AC0                              u2290 3026  
                            u2370 3C32                              u2450 34EA  
                            _T2PR 000FBC                              u3171 29F8  
                            u3091 2920                              u3411 36D4  
                            u3331 21DE                              u3251 1F54  
                            u2611 1BF4                              u2531 1ABC  
                            u2291 3022                              u2371 3C2E  
                            u2451 34E6                              u2348 40EE  
                            u3180 2A44                              u3420 36F6  
                            u3340 21F8                              u3260 1F68  
                            u2700 1D38                              u2620 1C06  
                            u2540 1AFC                              u3500 2E16  
                            u2380 3C4A                              u2460 3502  
                            u3181 2A40                              u3421 36F2  
                            u3341 21F4                              u3261 1F64  
                            u2701 1D34                              u2621 1C02  
                            u2541 1AF8                              u3501 2E12  
                            u2381 3C46                              u2461 34FE  
                            u3190 2A74                              u3430 3716  
                            u3350 220C                              u3270 1F9E  
                            u2710 1D64                              u2630 1C16  
                            u2550 1B0A                              u2470 1A24  
                            u3510 2E26                              u2390 3A6A  
                            u3191 2A70                              u3431 3712  
                            u3351 2208                              u3271 1F9A  
                            u2711 1D60                              u2631 1C12  
                            u2551 1B06                              u2471 1A20  
                            u3511 2E22                              u2391 3A66  
                            u5007 268A                              u3600 3926  
                            u3440 3766                              u3360 2226  
                            u3280 1FAE                              u2800 1E46  
                            u2720 1D74                              u2640 1C48  
                            u2560 1B78                              u2480 1A36  
                            u3520 2E34                              u3601 391E  
                            u3441 3762                              u3361 2222  
                            u3281 1FAA                              u2801 1E42  
                            u2721 1D70                              u2641 1C44  
                            u2561 1B74                              u2481 1A32  
                            u3521 2E30                              u5017 2706  
                            u3370 226E                              u3290 2128  
                            u2810 1E58                              u2730 1D90  
                            u2650 1C56                              u2570 1B90  
                            u2490 1A46                              u3530 2E6E  
                            u3450 2CEE                              u3371 226A  
                            u2811 1E54                              u2731 1D8C  
                            u2651 1C52                              u2571 1B8A  
                            u2491 1A42                              u3531 2E6A  
                            u3451 2CEA                              u5107 1402  
                            u5027 37A4                              u3380 229C  
                            u2820 1E68                              u2740 1DA0  
                            u2660 1C74                              u2580 1B92  
                            u3540 2E7C                              u3460 2CFC  
                            u2900 326E                              u4500 1216  
                            u3620 378A                              u3381 2298  
                            u2821 1E64                              u2741 1D9C  
                            u2661 1C70                              u3541 2E78  
                            u3461 2CF8                              u2901 326A  
                            u5117 14FC                              u4501 1212  
                            u5037 37FE                              u3621 3782  
                            u3550 386E                              u3390 22D6  
                            u2830 1E88                              u2750 1DB2  
                            u2670 1CAC                              u2590 1BBA  
                            u3470 2D58                              u2910 3286  
                            u4510 125A                              u3551 3866  
                            u3391 22D2                              u3295 211E  
                            u2831 1E84                              u2751 1DAE  
                            u2671 1CA8                              u2591 1BB6  
                            u3471 2D54                              u2911 3282  
                            u5207 191A                              u5127 151E  
                            u4511 1256                              u5047 3822  
                            u2840 1E9A                              u2760 1DC8  
                            u2680 1CF2                              u3480 2DAE  
                            u2920 3628                              u4600 158A  
                            u4520 128C                              u3640 37D2  
                            u2841 1E96                              u2761 1DC4  
                            u2681 1CEE                              u3481 2DAA  
                            u2921 3624                              u5217 19CC  
                            u5137 1618                              u4601 1586  
                            u4521 1288                              u5057 2F64  
                            u3641 37CE                              u3618 3928  
                            u3570 38B6                              u2850 1EB6  
                            u2770 1DDE                              u2690 1D28  
                            u3490 2DF8                              u2930 3640  
                            u4610 15E0                              u4530 12BE  
                            u4450 113C                              u3650 37E4  
                            u3571 38B2                              u2851 1EB2  
                            u2771 1DDA                              u2691 1D24  
                            u3491 2DF4                              u2931 363C  
                            u5307 3290                              u5227 19EE  
                            u5147 163A                              u4611 15DC  
                            u4531 12BA                              u4451 1138  
                            u5067 4118                              u3651 37DC  
                            u3580 38C8                              u2780 1DF2  
                            u2860 2BAE                              u4700 181E  
                            u4620 1612                              u4540 132E  
                            u4460 116E                              u2940 3994  
                            u3581 38C0                              u2781 1DEE  
                            u5317 354E                              u2861 2BAA  
                            u5237 2AD4                              u4701 181A  
                            u5157 16EC                              u4621 160E  
                            u4541 132A                              u5077 12C4  
                            u4461 116A                              u2941 3990  
                            u2790 1E0C                              u2870 2BC6  
                            u4710 188E                              u4630 1682  
                            u4550 1384                              u4470 1190  
                            u2950 39B8                              u3670 3842  
                            u3638 378C                              u2791 1E08  
                            u5407 3D58                              u5327 357A  
                            u2871 2BC2                              u5247 2B00  
                            u4711 188A                              u5167 170E  
                            u4631 167E                              u4551 1380  
                            u5087 12E6                              u4471 118C  
                            u2951 39B4                              u3671 383A  
                            u3568 3870                              u2880 2C96  
                            u4720 18C0                              u4640 16B4  
                            u4560 13DA                              u4480 11C2  
                            u2960 39DC                              u4800 23F2  
                            u5417 3410                              u5337 364A  
                            u2881 2C92                              u5257 2BD0  
                            u4721 18BC                              u5177 1824  
                            u4641 16B0                              u5097 13E0  
                            u4561 13D6                              u4481 11BE  
                            u2961 39D8                              u4801 23EC  
                            u2890 2CAE                              u4730 18F2  
                            u4650 16E6                              u4570 146E  
                            u4490 11E4                              u2970 39F4  
                            u4810 23F4                              u5427 343C  
                            u5347 3C82                              u2891 2CAA  
                            u5267 2BFC                              u4731 18EE  
                            u5187 1846                              u4651 16E2  
                            u4571 146A                              u4491 11E0  
                            u2971 39F0                              u2980 2736  
                            u4740 1962                              u4660 1756  
                            u4580 14A0                              u3668 37E6  
                            u4900 24A8                              u4820 2406  
                            u2981 2732                              u5437 350C  
                            u5357 3CC2                              u5277 2CB8  
                            u4741 195E                              u5197 18F8  
                            u4661 1752                              u4581 149C  
                            u4901 24A0                              u4821 2400  
                            u3598 38CA                              u2990 2748  
                            u4750 1994                              u4670 1788  
                            u4590 14F6                              u4830 2408  
                            u2991 2744                              u5447 3C54  
                            u5367 32D2                              u5287 3194  
                            u4751 1990                              u4671 1784  
                            u4591 14F2                              u4760 19C6  
                            u4680 17BA                              u3688 3844  
                            u4920 2556                              u4840 241E  
                            u5457 3888                              u5377 32FE  
                            u5297 31C0                              u4761 19C2  
                            u4681 17B6                              u4921 2550  
                            u4841 2416                              u4690 17EC  
                            u4930 2558                              u4850 243A  
                            u4770 2398                              u5467 38E2  
                            u5387 33CE                              u4691 17E8  
                            u4851 2436                              u4771 2392  
                            u4940 2578                              u4860 2456  
                            u4780 23AC                              u4772 239A  
                            u5477 3906                              u5397 3D18  
                            u4941 2574                              u4861 2450  
                            u4781 23A6                              u4950 260A  
                            u4918 24AA                              u4870 2458  
                            u4790 23BE                              u4782 23AE  
                            u4951 2606                              u4791 23BA  
                            u4960 26AA                              u4880 246E  
                            u4848 2420                              u4961 26A6  
                            u4881 2466                              u4970 26D0  
                            u4890 248A                              u4971 26C8  
                            u4891 2486                              u4888 2470  
                            u4988 26D2                              u4997 23CC  
                            _main 22F4                              fsr2h 000FDA  
                            indf2 000FDF                              fsr1l 000FE1  
                            fsr2l 000FD9                              btemp 0058  
                            _stop 3BB6                              prodh 000FF4  
                            prodl 000FF3                              start 0076  
                 ___fldiv@new_exp 0047                  main@turn_history 0100  
          __end_of_color_read_Red 3F42                   __end_of_HighISR 0076  
                    ___param_bank 000000                       _turnLeft_90 33F2  
                    main@clearRef 009A                      main@colorNum 009E  
                 __end_of___fladd 1ECA                             ?_main 0001  
                 __end_of___fldiv 2AB6                   __end_of___flmul 22F4  
                 __end_of___flsub 40C2                             ?_stop 0018  
                 __end_of___lwdiv 3E94                             i2l522 426A  
                           i2l515 4190                             i2l508 41E4  
                           i2l541 006A                             i2l539 0066  
                           _TMR0H 000FD4                             _TMR0L 000FD3  
      __end_of_I2C_2_Master_Start 428C        __end_of_I2C_2_Master_Write 4278  
                 __end_of_forward 3A0E                             tablat 000FF5  
                 __end_of_reverse 3AE4                             ttemp5 0059  
                           ttemp6 005C                             ttemp7 0060  
                           status 000FD8                             wtemp8 0059  
         __end_of_color_read_Blue 4032             _I2C_2_Master_RepStart 428C  
              putCharToRxBuf@byte 0001                   ?_color_read_Red 0009  
                 __initialization 4032                      __end_of_main 271C  
                    __end_of_stop 3C64                      _turnLeft_135 3530  
                   colorDetect@mL 0068                     colorDetect@mR 006A  
                          ??_main 0051                            ??_stop 001C  
                   __activetblptr 000003                      _turnRight_90 32B4  
               _return_home_turns 2E90             colorDetect@colour_ref 007E  
                    ?_setMotorPWM 0012                ?_return_home_turns 0024  
                          _CCPR1H 000FAA                            _CCPR2H 000FA6  
                          _CCPR3H 000F25                            _CCPR4H 000F21  
           colorDetect@greenPrint 008C                            _RC0PPS 000E62  
                          _RC4REG 000EE3                            _RE2PPS 000E74  
                          _RD5PPS 000E6F                            _RC7PPS 000E69  
                          _RD6PPS 000E70                            _RE4PPS 000E76  
                          i2l4020 41CE                            i2l4030 417A  
                          i2l4022 41D2                            i2l4024 41E2  
                          i2l4026 4166                            i2l4018 41BE  
                          i2l4028 4176                            i2l4250 0038  
                          i2l2484 4254                            i2l4252 0046  
                          i2l4244 0012                            i2l4254 005A  
                          i2l4246 0022                            i2l4248 0028  
                          _RG6PPS 000E88                         ??_HighISR 0003  
        __end_of_color_click_init 4138                            _RX4PPS 000E15  
                          _TX4REG 000EE4               ??_return_home_turns 002E  
                __end_of___xxtofl 2E90                  __end_of_getColor 3EF2  
                    _CCPTMRS0bits 000FAD                            ___flge 366C  
                _getCharFromTxBuf 4166                         ??___fladd 000D  
                          ___wmul 420E                         ??___fldiv 003E  
                       ??___flmul 0025                         ??___flsub 001D  
                       ??___lwdiv 000F                            clear_0 4058  
                          clear_1 4064                            isa$std 000001  
                   main@motorLeft 00C4         __end_of_return_home_turns 300A  
                       ??_forward 001C                      __mediumconst 0000  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8                         ??_reverse 001C  
                __end_of_whiteCal 3854                            stop@mL 0018  
                          stop@mR 001A                 ??_initDCmotorsPWM 0007  
                __end_of_turn_180 2CDC                        ___flge@ff1 001D  
                      ___flge@ff2 0021                      ___xxtofl@arg 000F  
                    ___xxtofl@exp 000E                      ___xxtofl@val 0005  
           __end_of_isDataInTxBuf 426C                        __accesstop 0060  
         __end_of__initialization 4072          __end_of_color_read_Clear 3FE2  
        __end_of_color_read_Green 3F92            ?_I2C_2_Master_RepStart 0001  
                   ___rparam_used 000001                  ?_color_read_Blue 0009  
               main@ambientRGBVal 00A9                    __pcstackCOMRAM 0001  
                   ?_DCmotorsInit 0005                      __pidataBANK0 4296  
              return_home_turns@i 0030                return_home_turns@k 0032  
              _reverseSquareRight 3C64                        __pbssBANK0 00CD  
                      __pbssBANK3 0300                        _ambientCal 3854  
             ?_reverseSquareRight 0024                     _turnRight_135 3176  
               _color_writetoaddr 4234                      _T2CLKCONbits 000FBF  
                  ??_DCmotorsInit 0009                           ?___flge 001D  
                    ?_turnLeft_90 001E                ?_color_writetoaddr 0007  
                         ?___wmul 0005               ??_color_writetoaddr 0008  
            ??_reverseSquareRight 0028                         ?___xxtofl 0005  
                         _SP4BRGH 000EE6                           _SP4BRGL 000EE5  
                       ?_getColor 0010                           _SSP2ADD 000ED6  
                         _SSP2BUF 000ED5            color_writetoaddr@value 0007  
                ??_color_read_Red 000B                           _HighISR 0008  
                  ?_turnRight_135 001E         __end_of_color_writetoaddr 4254  
              _I2C_2_Master_Start 4282                        _initUSART4 4138  
              _I2C_2_Master_Write 426C                           __Hparam 0000  
                         __Lparam 0000                 color_read_Red@tmp 000E  
                         ___fladd 1A0A                           ___fldiv 271C  
                         ___flmul 1ECA                         ?_whiteCal 0012  
                         ___flsub 407C               ?_I2C_2_Master_Start 0001  
                         ___lwdiv 3E20               ?_I2C_2_Master_Write 0001  
                      _off_period 00E1                      __psmallconst 0E00  
                       ?_turn_180 001E                           __pcinit 4032  
                         __ramtop 0E00                           __ptext0 22F4  
                         __ptext1 3770                           __ptext2 2E90  
                         __ptext3 3938                           __ptext4 4138  
                         __ptext5 3D90                           __ptext6 4104  
                         __ptext7 4234                           __ptext8 4192  
                         __ptext9 0E12                 colorDetect@RGBVal 0080  
                       _T2CONbits 000FBD                           _forward 3938  
                      ??___xxtofl 0009                         _T2HLTbits 000FBE  
                         _reverse 3A0E                        ??_getColor 0012  
                   _RxBufWriteCnt 0057          __end_of_getCharFromTxBuf 4192  
                  main@motorRight 00BB              ??_I2C_2_Master_Start 0006  
            ??_I2C_2_Master_Write 0006              end_of_initialization 4072  
                  DCmotorsInit@mL 0005                    DCmotorsInit@mR 0007  
                     ?_ambientCal 0012                 ?_color_click_init 0001  
               colorDetect@whiteB 0074                 colorDetect@whiteG 0070  
               colorDetect@whiteR 006C                ??_color_click_init 0009  
                         postdec1 000FE5                           postdec2 000FDD  
                         postinc0 000FEE                           postinc2 000FDE  
                      ??_whiteCal 0014                        ??_turn_180 0022  
                 _initDCmotorsPWM 3D90                         _PORTFbits 000F8E  
              setMotorPWM@negDuty 0017                       ___fladd@grs 0014  
                      main@RGBVal 00A0                     ___xxtofl@sign 000D  
                       _TRISAbits 000F81                setMotorPWM@posDuty 0016  
                       _TRISCbits 000F83                         _TRISDbits 000F84  
                       _TRISEbits 000F85                         _TRISFbits 000F86  
                       _TRISGbits 000F87                         _TRISHbits 000F88  
            __end_of_DCmotorsInit 3BB6                       ___fldiv@grs 0049  
                     ___fldiv@rem 0042               reverseSquareLeft@mL 0024  
             reverseSquareLeft@mR 0026          color_writetoaddr@address 0008  
         ??_I2C_2_Master_RepStart 0006                   ??_turnRight_135 0022  
                     ___flmul@grs 002A                       _CCP1CONbits 000FAB  
               ?_color_read_Clear 0009                      _EUSART4RXbuf 00CD  
                    _EUSART4TXbuf 0300                       _CCP2CONbits 000FA7  
               ?_color_read_Green 0009                       _CCP3CONbits 000F26  
                main@forwardCount 0098                       ?_initUSART4 0001  
                     _CCP4CONbits 000F22  return_home_turns@counter_history 0026  
                      main@whiteC 0094                ??_color_read_Clear 000B  
              ??_color_read_Green 000B                     ??_colorDetect 004F  
                  __end_of___flge 3770                    __end_of___wmul 4234  
          colorDetect@whiteRGBVal 0066               color_read_Clear@tmp 000E  
             start_initialization 4032              colorDetect@bluePrint 0090  
                   _TxBufWriteCnt 0055               color_read_Green@tmp 000E  
             return_home_turns@mL 002A               return_home_turns@mR 002C  
         __end_of_initDCmotorsPWM 3E20                          ??___flge 0025  
             main@counter_history 0200                          ??___wmul 0009  
                  _putCharToRxBuf 41BC                       __pdataBANK0 00E5  
             __end_of_colorDetect 1A0A                         ___fladd@a 0009  
                       ___fladd@b 0005                         ___fldiv@a 003A  
                       ___fldiv@b 0036                         ___flmul@a 0021  
                       ___flmul@b 001D                       __pbssCOMRAM 0054  
                       ___flsub@a 0019                         ___flsub@b 0015  
                   __pcstackBANK0 0060                     __pcstackBANK1 0100  
                   __pcstackBANK2 0200                          ?_HighISR 0001  
               _reverseSquareLeft 3CFA                ?_reverseSquareLeft 0024  
                ___lwdiv@dividend 000B            __end_of_putCharToRxBuf 41E6  
                       __pintcode 0008                          ?___fladd 0005  
                        ?___fldiv 0036                          ?___flmul 001D  
                        ?___flsub 0015                     ?_turnLeft_135 001E  
                        ?___lwdiv 000B               ??_reverseSquareLeft 0028  
                 turnRight_135@mL 001E                   turnRight_135@mR 0020  
                  turnLeft_135@mL 001E                    turnLeft_135@mR 0020  
            I2C_2_Master_Read@ack 0007              I2C_2_Master_Read@tmp 0008  
                     __smallconst 0E00                          ?_forward 0018  
               _I2C_2_Master_Idle 41E6                     ?_turnRight_90 001E  
               _I2C_2_Master_Init 4192                 _I2C_2_Master_Read 40C2  
               _I2C_2_Master_Stop 4278                      _RxBufReadCnt 0056  
                        ?_reverse 0018                ?_I2C_2_Master_Idle 0001  
              ?_I2C_2_Master_Init 0001                ?_I2C_2_Master_Read 0001  
                   ??_setMotorPWM 0014                ?_I2C_2_Master_Stop 0001  
                ___lwdiv@quotient 000F          initDCmotorsPWM@PWMperiod 0005  
               ?_getCharFromTxBuf 0001         __end_of_reverseSquareLeft 3D90  
              ??_getCharFromTxBuf 0001                      ??_ambientCal 0014  
             ??_I2C_2_Master_Idle 0005               ??_I2C_2_Master_Init 0005  
             ??_I2C_2_Master_Read 0006                    ___wmul@product 0009  
                        _LATAbits 000F79               ??_I2C_2_Master_Stop 0006  
                        _LATCbits 000F7B                     _isDataInTxBuf 4254  
                        _LATDbits 000F7C                          _LATEbits 000F7D  
                        _LATFbits 000F7E                         _on_period 00E3  
                        _LATGbits 000F7F                          _LATHbits 000F80  
                        _IPR4bits 000E23                          _PIE4bits 000E2D  
                       getColor@v 0010                          i2u403_40 41CE  
                        i2u403_41 41CA                          i2u404_40 4176  
                        i2u404_41 4172                          i2u183_40 4268  
                        i2u183_41 4262                          i2u184_40 426A  
                        i2u434_40 0022                          i2u434_41 001E  
                        i2u435_40 0038                          i2u435_41 0034  
                        i2u436_40 0046                          i2u436_41 0042  
                        i2u437_40 005A                          i2u437_41 0056  
                        _PIR4bits 000E37                   ?_putCharToRxBuf 0001  
                ?_initDCmotorsPWM 0005                       _colorDetect 0E12  
                  ??_turnLeft_135 0022                      _DCmotorsInit 3AE4  
                        _SSP2CON2 000EDA                          _SSP2STAT 000ED8  
       __end_of_I2C_2_Master_Idle 420E         __end_of_I2C_2_Master_Init 41BC  
       __end_of_I2C_2_Master_Read 4104                 ___wmul@multiplier 0005  
       __end_of_I2C_2_Master_Stop 4282                    ??_turnRight_90 0022  
                    setMotorPWM@m 0012                         main@carGo 00A8  
     I2C_2_Master_Write@data_byte 0006                __end_of_ambientCal 3938  
                       main@index 00B1                 ??_color_read_Blue 000B  
                    _TxBufReadCnt 0054                         copy_data0 4046  
             colorDetect@ambientB 007C               colorDetect@ambientG 007A  
             colorDetect@ambientR 0078               colorDetect@clearRef 0060  
                  ?_isDataInTxBuf 0001     __end_of_I2C_2_Master_RepStart 4296  
              color_read_Blue@tmp 000E               __end_of_setMotorPWM 3176  
          return_home_turns@index 0028                      ??_initUSART4 0005  
                        __Hrparam 0000               colorDetect@redPrint 0088  
                        __Lrparam 0000                         forward@mL 0018  
                       forward@mR 001A     return_home_turns@turn_history 0024  
        colorDetect@ambientRGBVal 0064                        _ANSELDbits 000EA7  
                      _ANSELFbits 000EB4                        turn_180@mL 001E  
                      turn_180@mR 0020                          ___xxtofl 2CDC  
                      _T0CON0bits 000FD5                        _T0CON1bits 000FD6  
                 ___lwdiv@divisor 000D                __end_of_initUSART4 4166  
                        _getColor 3E94                   ___lwdiv@counter 0011  
                        __ptext10 2AB6                          __ptext11 3176  
                        __ptext20 420E                          __ptext12 3530  
                        __ptext21 3E20                          __ptext13 3C64  
                        __ptext30 3EF2                          __ptext22 2CDC  
                        __ptext14 32B4                          __ptext31 3F42  
                        __ptext23 407C                          __ptext15 3CFA  
                        __ptext40 3AE4                          __ptext32 3F92  
                        __ptext24 1A0A                          __ptext16 33F2  
                        __ptext33 3FE2                          __ptext25 1ECA  
                        __ptext17 3BB6                          __ptext42 41BC  
                        __ptext34 426C                          __ptext26 366C  
                        __ptext18 3A0E                          __ptext43 4254  
                        __ptext35 4278                          __ptext27 271C  
                        __ptext19 300A                          __ptext44 4166  
                        __ptext36 4282                          __ptext28 3854  
                        __ptext37 428C                          __ptext29 3E94  
                        __ptext38 40C2                          __ptext39 41E6  
                     ambientCal@i 0016                       ambientCal@v 0012  
                  turnRight_90@mL 001E                    turnRight_90@mR 0020  
                    _SSP2CON1bits 000ED9                      _SSP2CON2bits 000EDA  
                   turnLeft_90@mL 001E                     turnLeft_90@mR 0020  
           __end_of_turnRight_135 32B4                         reverse@mL 0018  
                       reverse@mR 001A                     ??_turnLeft_90 0022  
                  _turning_time45 00E7                          isa$xinst 000000  
                      _RC4STAbits 000EE7                          int$flags 0058  
                        _whiteCal 3770                          _turn_180 2AB6  
                       whiteCal@i 0016                         whiteCal@v 0012  
                      _INTCONbits 000FF2                      _reverse_time 00E5  
                     _setMotorPWM 300A              __end_of_turnLeft_135 366C  
                 ??_isDataInTxBuf 0001                          intlevel2 0000  
                 main@whiteRGBVal 00B3              __end_of_turnRight_90 33F2  
                _color_click_init 4104               __end_of_turnLeft_90 3530  
                      _SSP2DATPPS 000E1D                        _SSP2CLKPPS 000E1C  
                   ___fladd@signs 0011                        _TX4STAbits 000EE8  
                    ___fladd@aexp 0012                      ___fladd@bexp 0013  
                ??_putCharToRxBuf 0001                      ?_colorDetect 0060  



Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Tue Dec 13 18:10:21 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=3
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=3
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=3
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=3
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=3
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=3
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=3
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=3
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=3
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=2
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=2
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=2
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=2
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=2
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=2
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=2
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=2
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    75                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    76                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    77                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    78                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    79  0000                     
    80                           ; Version 2.35
    81                           ; Generated 05/05/2021 GMT
    82                           ; 
    83                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    84                           ; All rights reserved.
    85                           ; 
    86                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    87                           ; 
    88                           ; Redistribution and use in source and binary forms, with or without modification, are
    89                           ; permitted provided that the following conditions are met:
    90                           ; 
    91                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    92                           ;        conditions and the following disclaimer.
    93                           ; 
    94                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    95                           ;        of conditions and the following disclaimer in the documentation and/or other
    96                           ;        materials provided with the distribution. Publication is not required when
    97                           ;        this file is used in an embedded application.
    98                           ; 
    99                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   100                           ;        software without specific prior written permission.
   101                           ; 
   102                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   103                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   104                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   105                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   106                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   107                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   108                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   109                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   110                           ; 
   111                           ; 
   112                           ; Code-generator required, PIC18F67K40 Definitions
   113                           ; 
   114                           ; SFR Addresses
   115  0000                     
   116                           	psect	idataBANK0
   117  0000'                    __pidataBANK0:
   118                           	callstack 0
   119                           
   120                           ;initializer for _reverse_time
   121  0000' 00C8               	dw	200
   122                           
   123                           ;initializer for _turning_time45
   124  0002' 0048               	dw	72
   125  0000                     _TX4REG	set	3812
   126  0000                     _RC4STAbits	set	3815
   127  0000                     _SP4BRGH	set	3814
   128  0000                     _TRISFbits	set	3974
   129  0000                     _LATFbits	set	3966
   130  0000                     _TRISDbits	set	3972
   131  0000                     _TRISGbits	set	3975
   132  0000                     _LATGbits	set	3967
   133  0000                     _LATEbits	set	3965
   134  0000                     _SSP2CON2bits	set	3802
   135  0000                     _RX4PPS	set	3605
   136  0000                     _SSP2CLKPPS	set	3612
   137  0000                     _SSP2DATPPS	set	3613
   138  0000                     _RC7PPS	set	3689
   139  0000                     _RE2PPS	set	3700
   140  0000                     _LATCbits	set	3963
   141  0000                     _LATDbits	set	3964
   142  0000                     _TRISAbits	set	3969
   143  0000                     _LATHbits	set	3968
   144  0000                     _TRISCbits	set	3971
   145  0000                     _TRISEbits	set	3973
   146  0000                     _PORTFbits	set	3982
   147  0000                     _TRISHbits	set	3976
   148  0000                     _T2PR	set	4028
   149  0000                     _T2CONbits	set	4029
   150  0000                     _CCPR2H	set	4006
   151  0000                     _CCPR1H	set	4010
   152  0000                     _RE4PPS	set	3702
   153  0000                     _RG6PPS	set	3720
   154  0000                     _RD5PPS	set	3695
   155  0000                     _ANSELDbits	set	3751
   156  0000                     _SSP2ADD	set	3798
   157  0000                     _SSP2CON1bits	set	3801
   158  0000                     _CCPR4H	set	3873
   159  0000                     _CCPR3H	set	3877
   160  0000                     _TMR0L	set	4051
   161  0000                     _TMR0H	set	4052
   162  0000                     _T0CON0bits	set	4053
   163  0000                     _T0CON1bits	set	4054
   164  0000                     _INTCONbits	set	4082
   165  0000                     _T2CLKCONbits	set	4031
   166  0000                     _T2HLTbits	set	4030
   167  0000                     _CCP1CONbits	set	4011
   168  0000                     _CCPTMRS0bits	set	4013
   169  0000                     _CCP2CONbits	set	4007
   170  0000                     _LATAbits	set	3961
   171  0000                     _CCP3CONbits	set	3878
   172  0000                     _CCP4CONbits	set	3874
   173  0000                     _RC4REG	set	3811
   174  0000                     _SP4BRGL	set	3813
   175  0000                     _TX4STAbits	set	3816
   176  0000                     _BAUD4CONbits	set	3817
   177  0000                     _SSP2CON2	set	3802
   178  0000                     _SSP2STAT	set	3800
   179  0000                     _ANSELFbits	set	3764
   180  0000                     _SSP2BUF	set	3797
   181  0000                     _IPR4bits	set	3619
   182  0000                     _PIE4bits	set	3629
   183  0000                     _PIR4bits	set	3639
   184  0000                     _RC0PPS	set	3682
   185  0000                     _RD6PPS	set	3696
   186                           
   187                           	psect	smallconst
   188  0000'                    __psmallconst:
   189                           	callstack 0
   190  0000' 00                 	db	0
   191  0001'                    STR_1:
   192  0001' 20                 	db	32
   193  0002' 20                 	db	32
   194  0003' 43                 	db	67	;'C'
   195  0004' 3A                 	db	58	;':'
   196  0005' 20                 	db	32
   197  0006' 25                 	db	37
   198  0007' 64                 	db	100	;'d'
   199  0008' 20                 	db	32
   200  0009' 20                 	db	32
   201  000A' 25                 	db	37
   202  000B' 64                 	db	100	;'d'
   203  000C' 20                 	db	32
   204  000D' 20                 	db	32
   205  000E' 25                 	db	37
   206  000F' 66                 	db	102	;'f'
   207  0010' 20                 	db	32
   208  0011' 0D                 	db	13
   209  0012' 00                 	db	0
   210  0013'                    STR_2:
   211  0013' 69                 	db	105	;'i'
   212  0014' 6E                 	db	110	;'n'
   213  0015' 66                 	db	102	;'f'
   214  0016' 00                 	db	0
   215  0017'                    STR_5:
   216  0017' 6E                 	db	110	;'n'
   217  0018' 61                 	db	97	;'a'
   218  0019' 6E                 	db	110	;'n'
   219  001A' 00                 	db	0
   220  001B' 00                 	db	0	; dummy byte at the end
   221  0000                     
   222                           ; #config settings
   223                           
   224                           	psect	cinit
   225  0000'                    __pcinit:
   226                           	callstack 0
   227  0000'                    start_initialization:
   228                           	callstack 0
   229  0000'                    __initialization:
   230                           	callstack 0
   231                           
   232                           ; Initialize objects allocated to BANK0 (4 bytes)
   233                           ; load TBLPTR registers with __pidataBANK0
   234  0000' 0E00'              	movlw	low __pidataBANK0
   235  0002' 6EF6               	movwf	tblptrl,c
   236  0004' 0E00'              	movlw	high __pidataBANK0
   237  0006' 6EF7               	movwf	tblptrh,c
   238  0008' 0E00'              	movlw	low (__pidataBANK0 shr (0+16))
   239  000A' 6EF8               	movwf	tblptru,c
   240  000C' EE00' F000'        	lfsr	0,__pdataBANK0
   241  0010' EE10 F004          	lfsr	1,4
   242  0014'                    copy_data0:
   243  0014' 0009               	tblrd		*+
   244  0016' CFF5 FFEE          	movff	tablat,postinc0
   245  001A' 50E5               	movf	postdec1,w,c
   246  001C' 50E1               	movf	fsr1l,w,c
   247  001E' E1FA               	bnz	copy_data0
   248                           
   249                           ; Clear objects allocated to BANK1 (140 bytes)
   250  0020' EE00' F000'        	lfsr	0,__pbssBANK1
   251  0024' 0E8C               	movlw	140
   252  0026'                    clear_0:
   253  0026' 6AEE               	clrf	postinc0,c
   254  0028' 06E8               	decf	wreg,f,c
   255  002A' E1FD               	bnz	clear_0
   256                           
   257                           ; Clear objects allocated to BANK0 (37 bytes)
   258  002C' EE00' F000'        	lfsr	0,__pbssBANK0
   259  0030' 0E25               	movlw	37
   260  0032'                    clear_1:
   261  0032' 6AEE               	clrf	postinc0,c
   262  0034' 06E8               	decf	wreg,f,c
   263  0036' E1FD               	bnz	clear_1
   264                           
   265                           ; Clear objects allocated to COMRAM (4 bytes)
   266  0038' 6A00'              	clrf	(__pbssCOMRAM+3)& (0+255),c
   267  003A' 6A00'              	clrf	(__pbssCOMRAM+2)& (0+255),c
   268  003C' 6A00'              	clrf	(__pbssCOMRAM+1)& (0+255),c
   269  003E' 6A00'              	clrf	__pbssCOMRAM& (0+255),c
   270  0040'                    end_of_initialization:
   271                           	callstack 0
   272  0040'                    __end_of__initialization:
   273                           	callstack 0
   274  0040' 9000'              	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   275  0042' 9200'              	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   276  0044' 0100               	movlb	0
   277  0046' EF00' F000'        	goto	_main	;jump to C main() function
   278                           
   279                           	psect	bssCOMRAM
   280  0000'                    __pbssCOMRAM:
   281                           	callstack 0
   282  0000'                    _TxBufReadCnt:
   283                           	callstack 0
   284  0000'                    	ds	1
   285  0001'                    _TxBufWriteCnt:
   286                           	callstack 0
   287  0001'                    	ds	1
   288  0002'                    _RxBufReadCnt:
   289                           	callstack 0
   290  0002'                    	ds	1
   291  0003'                    _RxBufWriteCnt:
   292                           	callstack 0
   293  0003'                    	ds	1
   294                           
   295                           	psect	bssBANK0
   296  0000'                    __pbssBANK0:
   297                           	callstack 0
   298  0000'                    _EUSART4RXbuf:
   299                           	callstack 0
   300  0000'                    	ds	20
   301  0014'                    floorf@F526:
   302                           	callstack 0
   303  0014'                    	ds	4
   304  0018'                    ___fpclassifyf@F465:
   305                           	callstack 0
   306  0018'                    	ds	4
   307  001C'                    _width:
   308                           	callstack 0
   309  001C'                    	ds	2
   310  001E'                    _prec:
   311                           	callstack 0
   312  001E'                    	ds	2
   313  0020'                    _off_period:
   314                           	callstack 0
   315  0020'                    	ds	2
   316  0022'                    _on_period:
   317                           	callstack 0
   318  0022'                    	ds	2
   319  0024'                    _flags:
   320                           	callstack 0
   321  0024'                    	ds	1
   322                           
   323                           	psect	dataBANK0
   324  0000'                    __pdataBANK0:
   325                           	callstack 0
   326  0000'                    _reverse_time:
   327                           	callstack 0
   328  0000'                    	ds	2
   329  0002'                    _turning_time45:
   330                           	callstack 0
   331  0002'                    	ds	2
   332                           
   333                           	psect	bssBANK1
   334  0000'                    __pbssBANK1:
   335                           	callstack 0
   336  0000'                    _EUSART4TXbuf:
   337                           	callstack 0
   338  0000'                    	ds	60
   339  003C'                    _dbuf:
   340                           	callstack 0
   341  003C'                    	ds	80
   342                           
   343                           	psect	cstackBANK1
   344  0000'                    __pcstackBANK1:
   345                           	callstack 0
   346  0000'                    main@string4:
   347                           	callstack 0
   348                           
   349                           ; 20 bytes @ 0x0
   350  0000'                    	ds	20
   351  0014'                    main@whiteC:
   352                           	callstack 0
   353                           
   354                           ; 4 bytes @ 0x14
   355  0014'                    	ds	4
   356  0018'                    main@clearRef:
   357                           	callstack 0
   358                           
   359                           ; 4 bytes @ 0x18
   360  0018'                    	ds	4
   361  001C'                    main@ambientRGBVal:
   362                           	callstack 0
   363                           
   364                           ; 8 bytes @ 0x1C
   365  001C'                    	ds	8
   366  0024'                    main@RGBVal:
   367                           	callstack 0
   368                           
   369                           ; 8 bytes @ 0x24
   370  0024'                    	ds	8
   371  002C'                    main@whiteRGBVal:
   372                           	callstack 0
   373                           
   374                           ; 8 bytes @ 0x2C
   375  002C'                    	ds	8
   376  0034'                    main@motorLeft:
   377                           	callstack 0
   378                           
   379                           ; 9 bytes @ 0x34
   380  0034'                    	ds	9
   381  003D'                    main@motorRight:
   382                           	callstack 0
   383                           
   384                           ; 9 bytes @ 0x3D
   385  003D'                    	ds	9
   386                           
   387                           	psect	cstackBANK0
   388  0000'                    __pcstackBANK0:
   389                           	callstack 0
   390  0000'                    ??_floorf:
   391  0000'                    colorDetect@clearRef:
   392                           	callstack 0
   393                           
   394                           ; 4 bytes @ 0x0
   395  0000'                    	ds	4
   396  0004'                    colorDetect@ambientRGBVal:
   397                           	callstack 0
   398                           
   399                           ; 2 bytes @ 0x4
   400  0004'                    	ds	2
   401  0006'                    colorDetect@whiteRGBVal:
   402                           	callstack 0
   403  0006'                    floorf@m:
   404                           	callstack 0
   405                           
   406                           ; 4 bytes @ 0x6
   407  0006'                    	ds	2
   408  0008'                    colorDetect@mL:
   409                           	callstack 0
   410                           
   411                           ; 2 bytes @ 0x8
   412  0008'                    	ds	2
   413  000A'                    colorDetect@mR:
   414                           	callstack 0
   415  000A'                    floorf@e:
   416                           	callstack 0
   417                           
   418                           ; 2 bytes @ 0xA
   419  000A'                    	ds	2
   420  000C'                    colorDetect@whiteR:
   421                           	callstack 0
   422  000C'                    floorf@u:
   423                           	callstack 0
   424                           
   425                           ; 4 bytes @ 0xC
   426  000C'                    	ds	4
   427  0010'                    efgtoa@fp:
   428                           	callstack 0
   429  0010'                    colorDetect@whiteG:
   430                           	callstack 0
   431                           
   432                           ; 4 bytes @ 0x10
   433  0010'                    	ds	2
   434  0012'                    efgtoa@f:
   435                           	callstack 0
   436                           
   437                           ; 4 bytes @ 0x12
   438  0012'                    	ds	2
   439  0014'                    colorDetect@whiteB:
   440                           	callstack 0
   441                           
   442                           ; 4 bytes @ 0x14
   443  0014'                    	ds	2
   444  0016'                    efgtoa@c:
   445                           	callstack 0
   446                           
   447                           ; 1 bytes @ 0x16
   448  0016'                    	ds	1
   449  0017'                    efgtoa@ne:
   450                           	callstack 0
   451                           
   452                           ; 2 bytes @ 0x17
   453  0017'                    	ds	1
   454  0018'                    colorDetect@ambientR:
   455                           	callstack 0
   456                           
   457                           ; 2 bytes @ 0x18
   458  0018'                    	ds	1
   459  0019'                    efgtoa@p:
   460                           	callstack 0
   461                           
   462                           ; 2 bytes @ 0x19
   463  0019'                    	ds	1
   464  001A'                    colorDetect@ambientG:
   465                           	callstack 0
   466                           
   467                           ; 2 bytes @ 0x1A
   468  001A'                    	ds	1
   469  001B'                    efgtoa@t:
   470                           	callstack 0
   471                           
   472                           ; 2 bytes @ 0x1B
   473  001B'                    	ds	1
   474  001C'                    colorDetect@ambientB:
   475                           	callstack 0
   476                           
   477                           ; 2 bytes @ 0x1C
   478  001C'                    	ds	1
   479  001D'                    _efgtoa$2693:
   480                           	callstack 0
   481                           
   482                           ; 2 bytes @ 0x1D
   483  001D'                    	ds	1
   484  001E'                    colorDetect@RGBVal:
   485                           	callstack 0
   486                           
   487                           ; 8 bytes @ 0x1E
   488  001E'                    	ds	1
   489  001F'                    efgtoa@pp:
   490                           	callstack 0
   491                           
   492                           ; 1 bytes @ 0x1F
   493  001F'                    	ds	1
   494  0020'                    efgtoa@mode:
   495                           	callstack 0
   496                           
   497                           ; 1 bytes @ 0x20
   498  0020'                    	ds	1
   499  0021'                    efgtoa@nmode:
   500                           	callstack 0
   501                           
   502                           ; 1 bytes @ 0x21
   503  0021'                    	ds	1
   504  0022'                    efgtoa@d:
   505                           	callstack 0
   506                           
   507                           ; 2 bytes @ 0x22
   508  0022'                    	ds	2
   509  0024'                    efgtoa@m:
   510                           	callstack 0
   511                           
   512                           ; 2 bytes @ 0x24
   513  0024'                    	ds	2
   514  0026'                    efgtoa@e:
   515                           	callstack 0
   516  0026'                    colorDetect@redPrint:
   517                           	callstack 0
   518                           
   519                           ; 4 bytes @ 0x26
   520  0026'                    	ds	2
   521  0028'                    efgtoa@w:
   522                           	callstack 0
   523                           
   524                           ; 2 bytes @ 0x28
   525  0028'                    	ds	2
   526  002A'                    colorDetect@greenPrint:
   527                           	callstack 0
   528  002A'                    efgtoa@ou:
   529                           	callstack 0
   530                           
   531                           ; 4 bytes @ 0x2A
   532  002A'                    	ds	4
   533  002E'                    efgtoa@i:
   534                           	callstack 0
   535  002E'                    colorDetect@bluePrint:
   536                           	callstack 0
   537                           
   538                           ; 4 bytes @ 0x2E
   539  002E'                    	ds	2
   540  0030'                    efgtoa@h:
   541                           	callstack 0
   542                           
   543                           ; 4 bytes @ 0x30
   544  0030'                    	ds	4
   545  0034'                    efgtoa@l:
   546                           	callstack 0
   547                           
   548                           ; 4 bytes @ 0x34
   549  0034'                    	ds	4
   550  0038'                    efgtoa@sign:
   551                           	callstack 0
   552                           
   553                           ; 1 bytes @ 0x38
   554  0038'                    	ds	1
   555  0039'                    efgtoa@g:
   556                           	callstack 0
   557                           
   558                           ; 4 bytes @ 0x39
   559  0039'                    	ds	4
   560  003D'                    efgtoa@n:
   561                           	callstack 0
   562                           
   563                           ; 2 bytes @ 0x3D
   564  003D'                    	ds	2
   565  003F'                    efgtoa@u:
   566                           	callstack 0
   567                           
   568                           ; 4 bytes @ 0x3F
   569  003F'                    	ds	4
   570  0043'                    vfpfcnvrt@fp:
   571                           	callstack 0
   572                           
   573                           ; 2 bytes @ 0x43
   574  0043'                    	ds	2
   575  0045'                    vfpfcnvrt@fmt:
   576                           	callstack 0
   577                           
   578                           ; 2 bytes @ 0x45
   579  0045'                    	ds	2
   580  0047'                    vfpfcnvrt@ap:
   581                           	callstack 0
   582                           
   583                           ; 2 bytes @ 0x47
   584  0047'                    	ds	2
   585  0049'                    vfpfcnvrt@convarg:
   586                           	callstack 0
   587                           
   588                           ; 8 bytes @ 0x49
   589  0049'                    	ds	8
   590  0051'                    vfpfcnvrt@c:
   591                           	callstack 0
   592                           
   593                           ; 1 bytes @ 0x51
   594  0051'                    	ds	1
   595  0052'                    vfpfcnvrt@cp:
   596                           	callstack 0
   597                           
   598                           ; 2 bytes @ 0x52
   599  0052'                    	ds	2
   600  0054'                    ?_vfprintf:
   601                           	callstack 0
   602  0054'                    vfprintf@fp:
   603                           	callstack 0
   604                           
   605                           ; 2 bytes @ 0x54
   606  0054'                    	ds	2
   607  0056'                    vfprintf@fmt:
   608                           	callstack 0
   609                           
   610                           ; 2 bytes @ 0x56
   611  0056'                    	ds	2
   612  0058'                    vfprintf@ap:
   613                           	callstack 0
   614                           
   615                           ; 2 bytes @ 0x58
   616  0058'                    	ds	2
   617  005A'                    vfprintf@cfmt:
   618                           	callstack 0
   619                           
   620                           ; 2 bytes @ 0x5A
   621  005A'                    	ds	2
   622  005C'                    ?_sprintf:
   623                           	callstack 0
   624  005C'                    sprintf@s:
   625                           	callstack 0
   626                           
   627                           ; 2 bytes @ 0x5C
   628  005C'                    	ds	2
   629  005E'                    sprintf@fmt:
   630                           	callstack 0
   631                           
   632                           ; 2 bytes @ 0x5E
   633  005E'                    	ds	10
   634  0068'                    sprintf@ap:
   635                           	callstack 0
   636                           
   637                           ; 2 bytes @ 0x68
   638  0068'                    	ds	2
   639  006A'                    sprintf@f:
   640                           	callstack 0
   641                           
   642                           ; 11 bytes @ 0x6A
   643  006A'                    	ds	11
   644  0075'                    ??_main:
   645                           
   646                           ; 1 bytes @ 0x75
   647  0075'                    	ds	2
   648                           
   649                           	psect	cstackCOMRAM
   650  0000'                    __pcstackCOMRAM:
   651                           	callstack 0
   652  0000'                    ??_getCharFromTxBuf:
   653  0000'                    ?_fullSpeedAhead:
   654                           	callstack 0
   655  0000'                    ?_right45:
   656                           	callstack 0
   657  0000'                    putCharToRxBuf@byte:
   658                           	callstack 0
   659  0000'                    
   660                           ; 1 bytes @ 0x0
   661  0000'                    	ds	2
   662  0002'                    ??_HighISR:
   663                           
   664                           ; 1 bytes @ 0x2
   665  0002'                    	ds	2
   666  0004'                    ??_I2C_2_Master_Idle:
   667  0004'                    ?___fpclassifyf:
   668                           	callstack 0
   669  0004'                    ?___wmul:
   670                           	callstack 0
   671  0004'                    ?___fladd:
   672                           	callstack 0
   673  0004'                    ?_labs:
   674                           	callstack 0
   675  0004'                    ?___flneg:
   676                           	callstack 0
   677  0004'                    ?___fltol:
   678                           	callstack 0
   679  0004'                    ?___xxtofl:
   680                           	callstack 0
   681  0004'                    ?___aodiv:
   682                           	callstack 0
   683  0004'                    ?___aomod:
   684                           	callstack 0
   685  0004'                    putCharToTxBuf@byte:
   686                           	callstack 0
   687  0004'                    initDCmotorsPWM@PWMperiod:
   688                           	callstack 0
   689  0004'                    DCmotorsInit@mL:
   690                           	callstack 0
   691  0004'                    ___wmul@multiplier:
   692                           	callstack 0
   693  0004'                    memcpy@d1:
   694                           	callstack 0
   695  0004'                    fputc@c:
   696                           	callstack 0
   697  0004'                    strcpy@dest:
   698                           	callstack 0
   699  0004'                    ___fleq@ff1:
   700                           	callstack 0
   701  0004'                    ___flneg@f1:
   702                           	callstack 0
   703  0004'                    ___fltol@f1:
   704                           	callstack 0
   705  0004'                    ___fladd@b:
   706                           	callstack 0
   707  0004'                    ___xxtofl@val:
   708                           	callstack 0
   709  0004'                    ___fpclassifyf@x:
   710                           	callstack 0
   711  0004'                    labs@a:
   712                           	callstack 0
   713  0004'                    ___aodiv@dividend:
   714                           	callstack 0
   715  0004'                    ___aomod@dividend:
   716                           	callstack 0
   717                           
   718                           ; 8 bytes @ 0x4
   719  0004'                    	ds	1
   720  0005'                    ??_I2C_2_Master_Read:
   721  0005'                    I2C_2_Master_Write@data_byte:
   722                           	callstack 0
   723  0005'                    TxBufferedString@string:
   724                           	callstack 0
   725                           
   726                           ; 2 bytes @ 0x5
   727  0005'                    	ds	1
   728  0006'                    color_writetoaddr@value:
   729                           	callstack 0
   730  0006'                    I2C_2_Master_Read@ack:
   731                           	callstack 0
   732  0006'                    DCmotorsInit@mR:
   733                           	callstack 0
   734  0006'                    ___wmul@multiplicand:
   735                           	callstack 0
   736  0006'                    memcpy@s1:
   737                           	callstack 0
   738  0006'                    fputc@fp:
   739                           	callstack 0
   740  0006'                    strcpy@src:
   741                           	callstack 0
   742                           
   743                           ; 2 bytes @ 0x6
   744  0006'                    	ds	1
   745  0007'                    color_writetoaddr@address:
   746                           	callstack 0
   747  0007'                    I2C_2_Master_Read@tmp:
   748                           	callstack 0
   749                           
   750                           ; 1 bytes @ 0x7
   751  0007'                    	ds	1
   752  0008'                    ??_fputc:
   753  0008'                    ??___fpclassifyf:
   754  0008'                    ??_labs:
   755  0008'                    ??_color_click_init:
   756  0008'                    ??___fltol:
   757  0008'                    ??___xxtofl:
   758  0008'                    ?_color_read_Red:
   759                           	callstack 0
   760  0008'                    ?_color_read_Green:
   761                           	callstack 0
   762  0008'                    ?_color_read_Blue:
   763                           	callstack 0
   764  0008'                    ?_color_read_Clear:
   765                           	callstack 0
   766  0008'                    ___wmul@product:
   767                           	callstack 0
   768  0008'                    memcpy@n:
   769                           	callstack 0
   770  0008'                    strcpy@s:
   771                           	callstack 0
   772  0008'                    ___fleq@ff2:
   773                           	callstack 0
   774  0008'                    ___fladd@a:
   775                           	callstack 0
   776                           
   777                           ; 4 bytes @ 0x8
   778  0008'                    	ds	2
   779  000A'                    ??_color_read_Red:
   780  000A'                    ??_color_read_Green:
   781  000A'                    ??_color_read_Blue:
   782  000A'                    ??_color_read_Clear:
   783  000A'                    ?___lwdiv:
   784                           	callstack 0
   785  000A'                    ___lwdiv@dividend:
   786                           	callstack 0
   787  000A'                    memcpy@d:
   788                           	callstack 0
   789  000A'                    strcpy@d:
   790                           	callstack 0
   791                           
   792                           ; 2 bytes @ 0xA
   793  000A'                    	ds	2
   794  000C'                    ??___fladd:
   795  000C'                    ??___fleq:
   796  000C'                    ___fltol@sign1:
   797                           	callstack 0
   798  000C'                    ___xxtofl@sign:
   799                           	callstack 0
   800  000C'                    ___lwdiv@divisor:
   801                           	callstack 0
   802  000C'                    ___fpclassifyf@e:
   803                           	callstack 0
   804  000C'                    memcpy@s:
   805                           	callstack 0
   806  000C'                    ___aodiv@divisor:
   807                           	callstack 0
   808  000C'                    ___aomod@divisor:
   809                           	callstack 0
   810                           
   811                           ; 8 bytes @ 0xC
   812  000C'                    	ds	1
   813  000D'                    ___fltol@exp1:
   814                           	callstack 0
   815  000D'                    ___xxtofl@exp:
   816                           	callstack 0
   817  000D'                    color_read_Red@tmp:
   818                           	callstack 0
   819  000D'                    color_read_Green@tmp:
   820                           	callstack 0
   821  000D'                    color_read_Blue@tmp:
   822                           	callstack 0
   823  000D'                    color_read_Clear@tmp:
   824                           	callstack 0
   825  000D'                    fputs@s:
   826                           	callstack 0
   827                           
   828                           ; 2 bytes @ 0xD
   829  000D'                    	ds	1
   830  000E'                    memcpy@tmp:
   831                           	callstack 0
   832  000E'                    ___lwdiv@quotient:
   833                           	callstack 0
   834  000E'                    ___xxtofl@arg:
   835                           	callstack 0
   836  000E'                    ___fpclassifyf@u:
   837                           	callstack 0
   838                           
   839                           ; 4 bytes @ 0xE
   840  000E'                    	ds	1
   841  000F'                    getColor@v:
   842                           	callstack 0
   843  000F'                    fputs@fp:
   844                           	callstack 0
   845                           
   846                           ; 2 bytes @ 0xF
   847  000F'                    	ds	1
   848  0010'                    ___lwdiv@counter:
   849                           	callstack 0
   850  0010'                    ___fladd@signs:
   851                           	callstack 0
   852                           
   853                           ; 1 bytes @ 0x10
   854  0010'                    	ds	1
   855  0011'                    ___fladd@aexp:
   856                           	callstack 0
   857  0011'                    fputs@c:
   858                           	callstack 0
   859  0011'                    ambientCal@v:
   860                           	callstack 0
   861  0011'                    whiteCal@v:
   862                           	callstack 0
   863  0011'                    setMotorPWM@m:
   864                           	callstack 0
   865                           
   866                           ; 2 bytes @ 0x11
   867  0011'                    	ds	1
   868  0012'                    ___fladd@bexp:
   869                           	callstack 0
   870  0012'                    fputs@i:
   871                           	callstack 0
   872                           
   873                           ; 2 bytes @ 0x12
   874  0012'                    	ds	1
   875  0013'                    ??_ambientCal:
   876  0013'                    ??_whiteCal:
   877  0013'                    ??_setMotorPWM:
   878  0013'                    ___fladd@grs:
   879                           	callstack 0
   880                           
   881                           ; 1 bytes @ 0x13
   882  0013'                    	ds	1
   883  0014'                    ?___flmul:
   884                           	callstack 0
   885  0014'                    ___aodiv@counter:
   886                           	callstack 0
   887  0014'                    ___aomod@counter:
   888                           	callstack 0
   889  0014'                    pad@fp:
   890                           	callstack 0
   891  0014'                    ___flmul@b:
   892                           	callstack 0
   893                           
   894                           ; 4 bytes @ 0x14
   895  0014'                    	ds	1
   896  0015'                    setMotorPWM@posDuty:
   897                           	callstack 0
   898  0015'                    ___aodiv@sign:
   899                           	callstack 0
   900  0015'                    ___aomod@sign:
   901                           	callstack 0
   902  0015'                    ambientCal@i:
   903                           	callstack 0
   904  0015'                    whiteCal@i:
   905                           	callstack 0
   906                           
   907                           ; 2 bytes @ 0x15
   908  0015'                    	ds	1
   909  0016'                    ?_abs:
   910                           	callstack 0
   911  0016'                    setMotorPWM@negDuty:
   912                           	callstack 0
   913  0016'                    pad@buf:
   914                           	callstack 0
   915  0016'                    abs@a:
   916                           	callstack 0
   917  0016'                    ___aodiv@quotient:
   918                           	callstack 0
   919                           
   920                           ; 8 bytes @ 0x16
   921  0016'                    	ds	1
   922  0017'                    stop@mL:
   923                           	callstack 0
   924                           
   925                           ; 2 bytes @ 0x17
   926  0017'                    	ds	1
   927  0018'                    ??_abs:
   928  0018'                    pad@p:
   929                           	callstack 0
   930  0018'                    ___flmul@a:
   931                           	callstack 0
   932                           
   933                           ; 4 bytes @ 0x18
   934  0018'                    	ds	1
   935  0019'                    stop@mR:
   936                           	callstack 0
   937                           
   938                           ; 2 bytes @ 0x19
   939  0019'                    	ds	1
   940  001A'                    ??_pad:
   941                           
   942                           ; 1 bytes @ 0x1A
   943  001A'                    	ds	1
   944  001B'                    ??_stop:
   945  001B'                    pad@i:
   946                           	callstack 0
   947                           
   948                           ; 2 bytes @ 0x1B
   949  001B'                    	ds	1
   950  001C'                    ??___flmul:
   951                           
   952                           ; 1 bytes @ 0x1C
   953  001C'                    	ds	1
   954  001D'                    pad@w:
   955                           	callstack 0
   956                           
   957                           ; 2 bytes @ 0x1D
   958  001D'                    	ds	2
   959  001F'                    dtoa@fp:
   960                           	callstack 0
   961                           
   962                           ; 2 bytes @ 0x1F
   963  001F'                    	ds	1
   964  0020'                    ___flmul@sign:
   965                           	callstack 0
   966                           
   967                           ; 1 bytes @ 0x20
   968  0020'                    	ds	1
   969  0021'                    ___flmul@grs:
   970                           	callstack 0
   971  0021'                    dtoa@d:
   972                           	callstack 0
   973                           
   974                           ; 8 bytes @ 0x21
   975  0021'                    	ds	4
   976  0025'                    ___flmul@aexp:
   977                           	callstack 0
   978                           
   979                           ; 1 bytes @ 0x25
   980  0025'                    	ds	1
   981  0026'                    ___flmul@bexp:
   982                           	callstack 0
   983                           
   984                           ; 1 bytes @ 0x26
   985  0026'                    	ds	1
   986  0027'                    ___flmul@prod:
   987                           	callstack 0
   988                           
   989                           ; 4 bytes @ 0x27
   990  0027'                    	ds	2
   991  0029'                    ??_dtoa:
   992                           
   993                           ; 1 bytes @ 0x29
   994  0029'                    	ds	2
   995  002B'                    ___flmul@temp:
   996                           	callstack 0
   997                           
   998                           ; 2 bytes @ 0x2B
   999  002B'                    	ds	2
  1000  002D'                    ?___flsub:
  1001                           	callstack 0
  1002  002D'                    ___flsub@b:
  1003                           	callstack 0
  1004                           
  1005                           ; 4 bytes @ 0x2D
  1006  002D'                    	ds	4
  1007  0031'                    _dtoa$2662:
  1008                           	callstack 0
  1009  0031'                    ___flsub@a:
  1010                           	callstack 0
  1011                           
  1012                           ; 4 bytes @ 0x31
  1013  0031'                    	ds	2
  1014  0033'                    dtoa@p:
  1015                           	callstack 0
  1016                           
  1017                           ; 2 bytes @ 0x33
  1018  0033'                    	ds	2
  1019  0035'                    ?___fldiv:
  1020                           	callstack 0
  1021  0035'                    dtoa@w:
  1022                           	callstack 0
  1023  0035'                    ___flge@ff1:
  1024                           	callstack 0
  1025  0035'                    ___fldiv@b:
  1026                           	callstack 0
  1027                           
  1028                           ; 4 bytes @ 0x35
  1029  0035'                    	ds	2
  1030  0037'                    dtoa@n:
  1031                           	callstack 0
  1032                           
  1033                           ; 8 bytes @ 0x37
  1034  0037'                    	ds	2
  1035  0039'                    ___flge@ff2:
  1036                           	callstack 0
  1037  0039'                    ___fldiv@a:
  1038                           	callstack 0
  1039                           
  1040                           ; 4 bytes @ 0x39
  1041  0039'                    	ds	4
  1042  003D'                    ??___fldiv:
  1043  003D'                    ??___flge:
  1044                           
  1045                           ; 1 bytes @ 0x3D
  1046  003D'                    	ds	2
  1047  003F'                    dtoa@i:
  1048                           	callstack 0
  1049                           
  1050                           ; 2 bytes @ 0x3F
  1051  003F'                    	ds	2
  1052  0041'                    dtoa@s:
  1053                           	callstack 0
  1054  0041'                    ___fldiv@rem:
  1055                           	callstack 0
  1056                           
  1057                           ; 4 bytes @ 0x41
  1058  0041'                    	ds	4
  1059  0045'                    ___fldiv@sign:
  1060                           	callstack 0
  1061                           
  1062                           ; 1 bytes @ 0x45
  1063  0045'                    	ds	1
  1064  0046'                    ___fldiv@new_exp:
  1065                           	callstack 0
  1066                           
  1067                           ; 2 bytes @ 0x46
  1068  0046'                    	ds	2
  1069  0048'                    ___fldiv@grs:
  1070                           	callstack 0
  1071                           
  1072                           ; 4 bytes @ 0x48
  1073  0048'                    	ds	4
  1074  004C'                    ___fldiv@bexp:
  1075                           	callstack 0
  1076                           
  1077                           ; 1 bytes @ 0x4C
  1078  004C'                    	ds	1
  1079  004D'                    ___fldiv@aexp:
  1080                           	callstack 0
  1081                           
  1082                           ; 1 bytes @ 0x4D
  1083  004D'                    	ds	1
  1084  004E'                    ??_colorDetect:
  1085  004E'                    ?_floorf:
  1086                           	callstack 0
  1087  004E'                    floorf@x:
  1088                           	callstack 0
  1089                           
  1090                           ; 4 bytes @ 0x4E
  1091  004E'                    	ds	4
  1092  0052'                    ??_efgtoa:
  1093                           
  1094                           ; 1 bytes @ 0x52
  1095  0052'                    	ds	2
  1096  0054'                    ??_vfpfcnvrt:
  1097                           
  1098                           ; 1 bytes @ 0x54
  1099  0054'                    	ds	2
  1100  0056'                    
  1101                           ; 1 bytes @ 0x56
  1102 ;;
  1103 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1104 ;;
  1105 ;; *************** function _main *****************
  1106 ;; Defined at:
  1107 ;;		line 24 in file "MazeRobot.X/main.c"
  1108 ;; Parameters:    Size  Location     Type
  1109 ;;		None
  1110 ;; Auto vars:     Size  Location     Type
  1111 ;;  string4        20    0[BANK1 ] unsigned char [20]
  1112 ;;  string5        20    0        unsigned char [20]
  1113 ;;  string3        20    0        unsigned char [20]
  1114 ;;  string2        20    0        unsigned char [20]
  1115 ;;  string1        20    0        unsigned char [20]
  1116 ;;  testString     20    0        unsigned char [20]
  1117 ;;  motorRight      9   61[BANK1 ] struct DC_motor
  1118 ;;  motorLeft       9   52[BANK1 ] struct DC_motor
  1119 ;;  whiteRGBVal     8   44[BANK1 ] struct RGB
  1120 ;;  RGBVal          8   36[BANK1 ] struct RGB
  1121 ;;  ambientRGBVa    8   28[BANK1 ] struct RGB
  1122 ;;  clearRef        4   24[BANK1 ] struct RGB
  1123 ;;  whiteC          4   20[BANK1 ] struct RGB
  1124 ;; Return value:  Size  Location     Type
  1125 ;;                  1    wreg      void 
  1126 ;; Registers used:
  1127 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, bsr, status,2, status,0, pcl, pclath, pclatu, btemp, b
      +temp+1, btemp+2, btemp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, btemp+12, btemp+13, 
      +btemp+14, btemp+15, btemp+16, btemp+17, btemp+18, btemp+19, btemp+20, btemp+21, btemp+22, btemp+23, btemp+24, btemp+25, 
      +btemp+26, btemp+27, btemp+28, btemp+29, btemp+30, btemp+31, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, cs
      +tack
  1128 ;; Tracked objects:
  1129 ;;		On entry : 0/0
  1130 ;;		On exit  : 0/0
  1131 ;;		Unchanged: 0/0
  1132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1134 ;;      Locals:         0       0      70       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1135 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1136 ;;      Totals:         0       2      70       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1137 ;;Total ram usage:       72 bytes
  1138 ;; Hardware stack levels required when called: 10
  1139 ;; This function calls:
  1140 ;;		_DCmotorsInit
  1141 ;;		_TxBufferedString
  1142 ;;		___fldiv
  1143 ;;		___flge
  1144 ;;		___xxtofl
  1145 ;;		_ambientCal
  1146 ;;		_colorDetect
  1147 ;;		_color_click_init
  1148 ;;		_getColor
  1149 ;;		_initDCmotorsPWM
  1150 ;;		_initUSART4
  1151 ;;		_sendTxBuf
  1152 ;;		_sprintf
  1153 ;;		_stop
  1154 ;;		_whiteCal
  1155 ;; This function is called by:
  1156 ;;		Startup code after reset
  1157 ;; This function uses a non-reentrant model
  1158 ;;
  1159                           
  1160                           	psect	text0
  1161  0000'                    __ptext0:
  1162                           	callstack 0
  1163  0000'                    _main:
  1164                           	callstack 21
  1165  0000'                    
  1166                           ;MazeRobot.X/main.c: 26:     color_click_init();
  1167  0000' EC00' F000'        	call	_color_click_init	;wreg free
  1168  0004'                    
  1169                           ;MazeRobot.X/main.c: 27:     initUSART4();
  1170  0004' EC00' F000'        	call	_initUSART4	;wreg free
  1171  0008'                    
  1172                           ;MazeRobot.X/main.c: 28:     initDCmotorsPWM(199);
  1173  0008' 0E00               	movlw	0
  1174  000A' 6E00'              	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
  1175  000C' 0EC7               	movlw	199
  1176  000E' 6E00'              	movwf	initDCmotorsPWM@PWMperiod^0,c
  1177  0010' EC00' F000'        	call	_initDCmotorsPWM	;wreg free
  1178  0014'                    
  1179                           ;MazeRobot.X/main.c: 35:     LATDbits.LATD7=0;
  1180  0014' 9E7C               	bcf	124,7,c	;volatile
  1181  0016'                    
  1182                           ;MazeRobot.X/main.c: 36:     TRISDbits.TRISD7=0;
  1183  0016' 9E84               	bcf	132,7,c	;volatile
  1184  0018'                    
  1185                           ;MazeRobot.X/main.c: 38:     LATHbits.LATH3=0;
  1186  0018' 9680               	bcf	128,3,c	;volatile
  1187  001A'                    
  1188                           ;MazeRobot.X/main.c: 39:     TRISHbits.TRISH3=0;
  1189  001A' 9688               	bcf	136,3,c	;volatile
  1190  001C'                    
  1191                           ;MazeRobot.X/main.c: 41:     LATDbits.LATD4 = 0;
  1192  001C' 987C               	bcf	124,4,c	;volatile
  1193  001E'                    
  1194                           ;MazeRobot.X/main.c: 42:     TRISDbits.TRISD4 = 0;
  1195  001E' 9884               	bcf	132,4,c	;volatile
  1196  0020'                    
  1197                           ;MazeRobot.X/main.c: 44:     LATHbits.LATH0 = 0;
  1198  0020' 9080               	bcf	128,0,c	;volatile
  1199  0022'                    
  1200                           ;MazeRobot.X/main.c: 45:     TRISHbits.TRISH0 = 0;
  1201  0022' 9088               	bcf	136,0,c	;volatile
  1202  0024'                    
  1203                           ;MazeRobot.X/main.c: 47:     LATFbits.LATF0 = 0;
  1204  0024' 907E               	bcf	126,0,c	;volatile
  1205  0026'                    
  1206                           ;MazeRobot.X/main.c: 48:     TRISFbits.TRISF0 = 0;
  1207  0026' 9086               	bcf	134,0,c	;volatile
  1208  0028'                    
  1209                           ;MazeRobot.X/main.c: 50:     LATHbits.LATH1 = 0;
  1210  0028' 9280               	bcf	128,1,c	;volatile
  1211  002A'                    
  1212                           ;MazeRobot.X/main.c: 51:     TRISHbits.TRISH1 = 0;
  1213  002A' 9288               	bcf	136,1,c	;volatile
  1214  002C'                    
  1215                           ;MazeRobot.X/main.c: 53:     LATDbits.LATD3 = 0;
  1216  002C' 967C               	bcf	124,3,c	;volatile
  1217  002E'                    
  1218                           ;MazeRobot.X/main.c: 54:     TRISDbits.TRISD3 = 0;
  1219  002E' 9684               	bcf	132,3,c	;volatile
  1220  0030'                    
  1221                           ;MazeRobot.X/main.c: 57:     LATDbits.LATD4 = 1;
  1222  0030' 887C               	bsf	124,4,c	;volatile
  1223  0032'                    
  1224                           ;MazeRobot.X/main.c: 58:     LATFbits.LATF0 = 1;
  1225  0032' 807E               	bsf	126,0,c	;volatile
  1226  0034'                    
  1227                           ;MazeRobot.X/main.c: 59:     LATHbits.LATH0 = 1;
  1228  0034' 8080               	bsf	128,0,c	;volatile
  1229  0036'                    
  1230                           ;MazeRobot.X/main.c: 60:     LATFbits.LATF0 = 1;
  1231  0036' 807E               	bsf	126,0,c	;volatile
  1232  0038'                    
  1233                           ;MazeRobot.X/main.c: 61:     LATDbits.LATD3 = 1;
  1234  0038' 867C               	bsf	124,3,c	;volatile
  1235  003A'                    
  1236                           ;MazeRobot.X/main.c: 66:     LATGbits.LATG0=1;
  1237  003A' 807F               	bsf	127,0,c	;volatile
  1238  003C'                    
  1239                           ;MazeRobot.X/main.c: 67:     LATEbits.LATE7=1;
  1240  003C' 8E7D               	bsf	125,7,c	;volatile
  1241  003E'                    
  1242                           ;MazeRobot.X/main.c: 68:     LATAbits.LATA3=1;
  1243  003E' 8679               	bsf	121,3,c	;volatile
  1244  0040'                    
  1245                           ;MazeRobot.X/main.c: 70:     TRISGbits.TRISG0=0;
  1246  0040' 9087               	bcf	135,0,c	;volatile
  1247  0042'                    
  1248                           ;MazeRobot.X/main.c: 71:     TRISEbits.TRISE7=0;
  1249  0042' 9E85               	bcf	133,7,c	;volatile
  1250  0044'                    
  1251                           ;MazeRobot.X/main.c: 72:     TRISAbits.TRISA3=0;
  1252  0044' 9681               	bcf	129,3,c	;volatile
  1253  0046'                    
  1254                           ;MazeRobot.X/main.c: 75:     TRISFbits.TRISF2=1;
  1255  0046' 8486               	bsf	134,2,c	;volatile
  1256  0048'                    
  1257                           ;MazeRobot.X/main.c: 76:     ANSELFbits.ANSELF2=0;
  1258  0048' 010E               	movlb	14	; () banked
  1259  004A' 95B4               	bcf	180,2,b	;volatile
  1260  004C'                    
  1261                           ; BSR set to: 14
  1262                           ;MazeRobot.X/main.c: 78:     TRISFbits.TRISF3=1;
  1263  004C' 8686               	bsf	134,3,c	;volatile
  1264  004E'                    
  1265                           ; BSR set to: 14
  1266                           ;MazeRobot.X/main.c: 79:     ANSELFbits.ANSELF3=0;
  1267  004E' 97B4               	bcf	180,3,b	;volatile
  1268  0050'                    
  1269                           ; BSR set to: 14
  1270                           ;MazeRobot.X/main.c: 95:     DC_motor motorLeft,motorRight;;MazeRobot.X/main.c: 96:     
      +                          DCmotorsInit(&motorLeft,&motorRight);
  1271  0050' 0E00'              	movlw	low main@motorLeft
  1272  0052' 6E00'              	movwf	DCmotorsInit@mL^0,c
  1273  0054' 0E00'              	movlw	high main@motorLeft
  1274  0056' 6E00'              	movwf	(DCmotorsInit@mL+1)^0,c
  1275  0058' 0E00'              	movlw	low main@motorRight
  1276  005A' 6E00'              	movwf	DCmotorsInit@mR^0,c
  1277  005C' 0E00'              	movlw	high main@motorRight
  1278  005E' 6E00'              	movwf	(DCmotorsInit@mR+1)^0,c
  1279  0060' EC00' F000'        	call	_DCmotorsInit	;wreg free
  1280  0064'                    l5873:
  1281                           
  1282                           ;MazeRobot.X/main.c: 117:         getColor(&RGBVal);
  1283  0064' 0E00'              	movlw	low main@RGBVal
  1284  0066' 6E00'              	movwf	getColor@v^0,c
  1285  0068' 0E00'              	movlw	high main@RGBVal
  1286  006A' 6E00'              	movwf	(getColor@v+1)^0,c
  1287  006C' EC00' F000'        	call	_getColor	;wreg free
  1288  0070'                    
  1289                           ;MazeRobot.X/main.c: 120:         if (!PORTFbits.RF2){
  1290  0070' B48E               	btfsc	142,2,c	;volatile
  1291  0072' EF00' F000'        	goto	u6611
  1292  0076' EF00' F000'        	goto	u6610
  1293  007A'                    u6611:
  1294  007A' EF00' F000'        	goto	l5879
  1295  007E'                    u6610:
  1296  007E'                    
  1297                           ;MazeRobot.X/main.c: 121:             ambientCal (&ambientRGBVal);
  1298  007E' 0E00'              	movlw	low main@ambientRGBVal
  1299  0080' 6E00'              	movwf	ambientCal@v^0,c
  1300  0082' 0E00'              	movlw	high main@ambientRGBVal
  1301  0084' 6E00'              	movwf	(ambientCal@v+1)^0,c
  1302  0086' EC00' F000'        	call	_ambientCal	;wreg free
  1303  008A'                    l5879:
  1304                           
  1305                           ;MazeRobot.X/main.c: 124:         if (!PORTFbits.RF3){
  1306  008A' B68E               	btfsc	142,3,c	;volatile
  1307  008C' EF00' F000'        	goto	u6621
  1308  0090' EF00' F000'        	goto	u6620
  1309  0094'                    u6621:
  1310  0094' EF00' F000'        	goto	l5883
  1311  0098'                    u6620:
  1312  0098'                    
  1313                           ;MazeRobot.X/main.c: 125:             whiteCal (&whiteRGBVal);
  1314  0098' 0E00'              	movlw	low main@whiteRGBVal
  1315  009A' 6E00'              	movwf	whiteCal@v^0,c
  1316  009C' 0E00'              	movlw	high main@whiteRGBVal
  1317  009E' 6E00'              	movwf	(whiteCal@v+1)^0,c
  1318  00A0' EC00' F000'        	call	_whiteCal	;wreg free
  1319  00A4'                    l5883:
  1320                           
  1321                           ;MazeRobot.X/main.c: 129:         LATHbits.LATH3=!LATHbits.LATH3;
  1322  00A4' A680               	btfss	128,3,c	;volatile
  1323  00A6' EF00' F000'        	goto	u6631
  1324  00AA' EF00' F000'        	goto	u6630
  1325  00AE'                    u6631:
  1326  00AE' 0100               	movlb	0	; () banked
  1327  00B0' 6B00'              	clrf	??_main& (0+255),b
  1328  00B2' 2B00'              	incf	??_main& (0+255),f,b
  1329  00B4' EF00' F000'        	goto	u6648
  1330  00B8'                    u6630:
  1331  00B8' 0100               	movlb	0	; () banked
  1332  00BA' 6B00'              	clrf	??_main& (0+255),b
  1333  00BC'                    u6648:
  1334  00BC' 4700'              	rlncf	??_main& (0+255),f,b
  1335  00BE' 4700'              	rlncf	??_main& (0+255),f,b
  1336  00C0' 4700'              	rlncf	??_main& (0+255),f,b
  1337  00C2' 5080               	movf	128,w,c	;volatile
  1338  00C4' 1900'              	xorwf	??_main& (0+255),w,b
  1339  00C6' 0BF7               	andlw	-9
  1340  00C8' 1900'              	xorwf	??_main& (0+255),w,b
  1341  00CA' 6E80               	movwf	128,c	;volatile
  1342  00CC'                    
  1343                           ; BSR set to: 0
  1344                           ;MazeRobot.X/main.c: 132:         whiteC = whiteRGBVal.C;
  1345  00CC' C032' F004'        	movff	main@whiteRGBVal+6,___xxtofl@val
  1346  00D0' C033' F005'        	movff	main@whiteRGBVal+7,___xxtofl@val+1
  1347  00D4' 6A00'              	clrf	(___xxtofl@val+2)^0,c
  1348  00D6' 6A00'              	clrf	(___xxtofl@val+3)^0,c
  1349  00D8' 0E00               	movlw	0
  1350  00DA' EC00' F000'        	call	___xxtofl
  1351  00DE' C004' F014'        	movff	?___xxtofl,main@whiteC
  1352  00E2' C005' F015'        	movff	?___xxtofl+1,main@whiteC+1
  1353  00E6' C006' F016'        	movff	?___xxtofl+2,main@whiteC+2
  1354  00EA' C007' F017'        	movff	?___xxtofl+3,main@whiteC+3
  1355  00EE'                    
  1356                           ;MazeRobot.X/main.c: 133:         clearRef = RGBVal.C/whiteC;
  1357  00EE' C02A' F004'        	movff	main@RGBVal+6,___xxtofl@val
  1358  00F2' C02B' F005'        	movff	main@RGBVal+7,___xxtofl@val+1
  1359  00F6' 6A00'              	clrf	(___xxtofl@val+2)^0,c
  1360  00F8' 6A00'              	clrf	(___xxtofl@val+3)^0,c
  1361  00FA' 0E00               	movlw	0
  1362  00FC' EC00' F000'        	call	___xxtofl
  1363  0100' C004' F035'        	movff	?___xxtofl,___fldiv@b
  1364  0104' C005' F036'        	movff	?___xxtofl+1,___fldiv@b+1
  1365  0108' C006' F037'        	movff	?___xxtofl+2,___fldiv@b+2
  1366  010C' C007' F038'        	movff	?___xxtofl+3,___fldiv@b+3
  1367  0110' C014' F039'        	movff	main@whiteC,___fldiv@a
  1368  0114' C015' F03A'        	movff	main@whiteC+1,___fldiv@a+1
  1369  0118' C016' F03B'        	movff	main@whiteC+2,___fldiv@a+2
  1370  011C' C017' F03C'        	movff	main@whiteC+3,___fldiv@a+3
  1371  0120' EC00' F000'        	call	___fldiv	;wreg free
  1372  0124' C035' F018'        	movff	?___fldiv,main@clearRef
  1373  0128' C036' F019'        	movff	?___fldiv+1,main@clearRef+1
  1374  012C' C037' F01A'        	movff	?___fldiv+2,main@clearRef+2
  1375  0130' C038' F01B'        	movff	?___fldiv+3,main@clearRef+3
  1376  0134'                    
  1377                           ;MazeRobot.X/main.c: 135:         if (clearRef > 0.12){
  1378  0134' 0E8F               	movlw	143
  1379  0136' 6E00'              	movwf	___flge@ff1^0,c
  1380  0138' 0EC2               	movlw	194
  1381  013A' 6E00'              	movwf	(___flge@ff1+1)^0,c
  1382  013C' 0EF5               	movlw	245
  1383  013E' 6E00'              	movwf	(___flge@ff1+2)^0,c
  1384  0140' 0E3D               	movlw	61
  1385  0142' 6E00'              	movwf	(___flge@ff1+3)^0,c
  1386  0144' C018' F039'        	movff	main@clearRef,___flge@ff2
  1387  0148' C019' F03A'        	movff	main@clearRef+1,___flge@ff2+1
  1388  014C' C01A' F03B'        	movff	main@clearRef+2,___flge@ff2+2
  1389  0150' C01B' F03C'        	movff	main@clearRef+3,___flge@ff2+3
  1390  0154' EC00' F000'        	call	___flge	;wreg free
  1391  0158' B0D8               	btfsc	status,0,c
  1392  015A' EF00' F000'        	goto	u6651
  1393  015E' EF00' F000'        	goto	u6650
  1394  0162'                    u6651:
  1395  0162' EF00' F000'        	goto	l5895
  1396  0166'                    u6650:
  1397  0166'                    
  1398                           ;MazeRobot.X/main.c: 136:             colorDetect (clearRef,&ambientRGBVal,&whiteRGBVal,
      +                          &motorLeft,&motorRight);
  1399  0166' C018' F000'        	movff	main@clearRef,colorDetect@clearRef
  1400  016A' C019' F001'        	movff	main@clearRef+1,colorDetect@clearRef+1
  1401  016E' C01A' F002'        	movff	main@clearRef+2,colorDetect@clearRef+2
  1402  0172' C01B' F003'        	movff	main@clearRef+3,colorDetect@clearRef+3
  1403  0176' 0E00'              	movlw	low main@ambientRGBVal
  1404  0178' 0100               	movlb	0	; () banked
  1405  017A' 6F00'              	movwf	colorDetect@ambientRGBVal& (0+255),b
  1406  017C' 0E00'              	movlw	high main@ambientRGBVal
  1407  017E' 6F00'              	movwf	(colorDetect@ambientRGBVal+1)& (0+255),b
  1408  0180' 0E00'              	movlw	low main@whiteRGBVal
  1409  0182' 6F00'              	movwf	colorDetect@whiteRGBVal& (0+255),b
  1410  0184' 0E00'              	movlw	high main@whiteRGBVal
  1411  0186' 6F00'              	movwf	(colorDetect@whiteRGBVal+1)& (0+255),b
  1412  0188' 0E00'              	movlw	low main@motorLeft
  1413  018A' 6F00'              	movwf	colorDetect@mL& (0+255),b
  1414  018C' 0E00'              	movlw	high main@motorLeft
  1415  018E' 6F00'              	movwf	(colorDetect@mL+1)& (0+255),b
  1416  0190' 0E00'              	movlw	low main@motorRight
  1417  0192' 6F00'              	movwf	colorDetect@mR& (0+255),b
  1418  0194' 0E00'              	movlw	high main@motorRight
  1419  0196' 6F00'              	movwf	(colorDetect@mR+1)& (0+255),b
  1420  0198' EC00' F000'        	call	_colorDetect	;wreg free
  1421  019C'                    
  1422                           ;MazeRobot.X/main.c: 138:             _delay((unsigned long)((500)*(64000000/4000.0)));
  1423  019C' 0E29               	movlw	41
  1424  019E' 0100               	movlb	0	; () banked
  1425  01A0' 6F00'              	movwf	(??_main+1)& (0+255),b
  1426  01A2' 0E96               	movlw	150
  1427  01A4' 6F00'              	movwf	??_main& (0+255),b
  1428  01A6' 0E7F               	movlw	127
  1429  01A8'                    u6667:
  1430  01A8' 2EE8               	decfsz	wreg,f,c
  1431  01AA' D7FE               	bra	u6667
  1432  01AC' 2F00'              	decfsz	??_main& (0+255),f,b
  1433  01AE' D7FC               	bra	u6667
  1434  01B0' 2F00'              	decfsz	(??_main+1)& (0+255),f,b
  1435  01B2' D7FA               	bra	u6667
  1436                           
  1437                           ;MazeRobot.X/main.c: 139:         }
  1438  01B4' EF00' F000'        	goto	l5897
  1439  01B8'                    l5895:
  1440  01B8' 0E00'              	movlw	low main@motorLeft
  1441  01BA' 6E00'              	movwf	stop@mL^0,c
  1442  01BC' 0E00'              	movlw	high main@motorLeft
  1443  01BE' 6E00'              	movwf	(stop@mL+1)^0,c
  1444  01C0' 0E00'              	movlw	low main@motorRight
  1445  01C2' 6E00'              	movwf	stop@mR^0,c
  1446  01C4' 0E00'              	movlw	high main@motorRight
  1447  01C6' 6E00'              	movwf	(stop@mR+1)^0,c
  1448  01C8' EC00' F000'        	call	_stop	;wreg free
  1449  01CC'                    l5897:
  1450                           
  1451                           ;MazeRobot.X/main.c: 142:         _delay((unsigned long)((100)*(64000000/4000.0)));
  1452  01CC' 0E09               	movlw	9
  1453  01CE' 0100               	movlb	0	; () banked
  1454  01D0' 6F00'              	movwf	(??_main+1)& (0+255),b
  1455  01D2' 0E1E               	movlw	30
  1456  01D4' 6F00'              	movwf	??_main& (0+255),b
  1457  01D6' 0EE4               	movlw	228
  1458  01D8'                    u6677:
  1459  01D8' 2EE8               	decfsz	wreg,f,c
  1460  01DA' D7FE               	bra	u6677
  1461  01DC' 2F00'              	decfsz	??_main& (0+255),f,b
  1462  01DE' D7FC               	bra	u6677
  1463  01E0' 2F00'              	decfsz	(??_main+1)& (0+255),f,b
  1464  01E2' D7FA               	bra	u6677
  1465  01E4' F000               	nop	
  1466  01E6'                    
  1467                           ;MazeRobot.X/main.c: 145:         sprintf(string4,"  C: %d  %d  %f \r",RGBVal.C, whiteRG
      +                          BVal.C, clearRef);
  1468  01E6' 0E00'              	movlw	low main@string4
  1469  01E8' 0100               	movlb	0	; () banked
  1470  01EA' 6F00'              	movwf	sprintf@s& (0+255),b
  1471  01EC' 0E00'              	movlw	high main@string4
  1472  01EE' 6F00'              	movwf	(sprintf@s+1)& (0+255),b
  1473  01F0' 0E00'              	movlw	low STR_1
  1474  01F2' 6F00'              	movwf	sprintf@fmt& (0+255),b
  1475  01F4' 0E00'              	movlw	high STR_1
  1476  01F6' 6F00'              	movwf	(sprintf@fmt+1)& (0+255),b
  1477  01F8' C02A' F060'        	movff	main@RGBVal+6,?_sprintf+4
  1478  01FC' C02B' F061'        	movff	main@RGBVal+7,?_sprintf+5
  1479  0200' C032' F062'        	movff	main@whiteRGBVal+6,?_sprintf+6
  1480  0204' C033' F063'        	movff	main@whiteRGBVal+7,?_sprintf+7
  1481  0208' C018' F064'        	movff	main@clearRef,?_sprintf+8
  1482  020C' C019' F065'        	movff	main@clearRef+1,?_sprintf+9
  1483  0210' C01A' F066'        	movff	main@clearRef+2,?_sprintf+10
  1484  0214' C01B' F067'        	movff	main@clearRef+3,?_sprintf+11
  1485  0218' EC00' F000'        	call	_sprintf	;wreg free
  1486  021C'                    
  1487                           ;MazeRobot.X/main.c: 146:         TxBufferedString(string4);
  1488  021C' 0E00'              	movlw	low main@string4
  1489  021E' 6E00'              	movwf	TxBufferedString@string^0,c
  1490  0220' 0E00'              	movlw	high main@string4
  1491  0222' 6E00'              	movwf	(TxBufferedString@string+1)^0,c
  1492  0224' EC00' F000'        	call	_TxBufferedString	;wreg free
  1493  0228'                    
  1494                           ;MazeRobot.X/main.c: 147:         sendTxBuf();
  1495  0228' EC00' F000'        	call	_sendTxBuf	;wreg free
  1496  022C'                    
  1497                           ;MazeRobot.X/main.c: 148:         _delay((unsigned long)((2)*(64000000/4000.0)));
  1498  022C' 0E2A               	movlw	42
  1499  022E' 0100               	movlb	0	; () banked
  1500  0230' 6F00'              	movwf	??_main& (0+255),b
  1501  0232' 0E8D               	movlw	141
  1502  0234'                    u6687:
  1503  0234' 2EE8               	decfsz	wreg,f,c
  1504  0236' D7FE               	bra	u6687
  1505  0238' 2F00'              	decfsz	??_main& (0+255),f,b
  1506  023A' D7FC               	bra	u6687
  1507  023C' D000               	nop2	
  1508  023E' EF00' F000'        	goto	l5873
  1509  0242' EF00' F000'        	goto	start
  1510  0246'                    __end_of_main:
  1511                           	callstack 0
  1512                           
  1513 ;; *************** function _whiteCal *****************
  1514 ;; Defined at:
  1515 ;;		line 114 in file "MazeRobot.X/color.c"
  1516 ;; Parameters:    Size  Location     Type
  1517 ;;  v               2   17[COMRAM] PTR struct RGB
  1518 ;;		 -> main@whiteRGBVal(8), 
  1519 ;; Auto vars:     Size  Location     Type
  1520 ;;  i               2   21[COMRAM] int 
  1521 ;; Return value:  Size  Location     Type
  1522 ;;                  1    wreg      void 
  1523 ;; Registers used:
  1524 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1525 ;; Tracked objects:
  1526 ;;		On entry : 0/0
  1527 ;;		On exit  : 0/0
  1528 ;;		Unchanged: 0/0
  1529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1530 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1531 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1532 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1533 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1534 ;;Total ram usage:        6 bytes
  1535 ;; Hardware stack levels used: 1
  1536 ;; Hardware stack levels required when called: 6
  1537 ;; This function calls:
  1538 ;;		_getColor
  1539 ;; This function is called by:
  1540 ;;		_main
  1541 ;; This function uses a non-reentrant model
  1542 ;;
  1543                           
  1544                           	psect	text1
  1545  0000'                    __ptext1:
  1546                           	callstack 0
  1547  0000'                    _whiteCal:
  1548                           	callstack 24
  1549  0000'                    
  1550                           ;MazeRobot.X/color.c: 116:     for(int i = 0;i<20;i++){
  1551  0000' 0E00               	movlw	0
  1552  0002' 6E00'              	movwf	(whiteCal@i+1)^0,c
  1553  0004' 0E00               	movlw	0
  1554  0006' 6E00'              	movwf	whiteCal@i^0,c
  1555  0008'                    l4723:
  1556                           
  1557                           ;MazeRobot.X/color.c: 117:             LATDbits.LATD7 = !LATDbits.LATD7;
  1558  0008' AE7C               	btfss	124,7,c	;volatile
  1559  000A' EF00' F000'        	goto	u5101
  1560  000E' EF00' F000'        	goto	u5100
  1561  0012'                    u5101:
  1562  0012' 6A00'              	clrf	??_whiteCal^0,c
  1563  0014' 2A00'              	incf	??_whiteCal^0,f,c
  1564  0016' EF00' F000'        	goto	u5118
  1565  001A'                    u5100:
  1566  001A' 6A00'              	clrf	??_whiteCal^0,c
  1567  001C'                    u5118:
  1568  001C' 3200'              	rrcf	??_whiteCal^0,f,c
  1569  001E' 3200'              	rrcf	??_whiteCal^0,f,c
  1570  0020' 507C               	movf	124,w,c	;volatile
  1571  0022' 1800'              	xorwf	??_whiteCal^0,w,c
  1572  0024' 0B7F               	andlw	-129
  1573  0026' 1800'              	xorwf	??_whiteCal^0,w,c
  1574  0028' 6E7C               	movwf	124,c	;volatile
  1575  002A'                    
  1576                           ;MazeRobot.X/color.c: 118:             _delay((unsigned long)((100)*(64000000/4000.0)));
  1577  002A' 0E09               	movlw	9
  1578  002C' 6E00'              	movwf	(??_whiteCal+1)^0,c
  1579  002E' 0E1E               	movlw	30
  1580  0030' 6E00'              	movwf	??_whiteCal^0,c
  1581  0032' 0EE4               	movlw	228
  1582  0034'                    u6697:
  1583  0034' 2EE8               	decfsz	wreg,f,c
  1584  0036' D7FE               	bra	u6697
  1585  0038' 2E00'              	decfsz	??_whiteCal^0,f,c
  1586  003A' D7FC               	bra	u6697
  1587  003C' 2E00'              	decfsz	(??_whiteCal+1)^0,f,c
  1588  003E' D7FA               	bra	u6697
  1589  0040' D000               	nop2	
  1590                           
  1591                           ;MazeRobot.X/color.c: 119:             }
  1592  0042' 4A00'              	infsnz	whiteCal@i^0,f,c
  1593  0044' 2A00'              	incf	(whiteCal@i+1)^0,f,c
  1594  0046' BE00'              	btfsc	(whiteCal@i+1)^0,7,c
  1595  0048' EF00' F000'        	goto	u5121
  1596  004C' 5000'              	movf	(whiteCal@i+1)^0,w,c
  1597  004E' E109               	bnz	u5120
  1598  0050' 0E14               	movlw	20
  1599  0052' 5C00'              	subwf	whiteCal@i^0,w,c
  1600  0054' A0D8               	btfss	status,0,c
  1601  0056' EF00' F000'        	goto	u5121
  1602  005A' EF00' F000'        	goto	u5120
  1603  005E'                    u5121:
  1604  005E' EF00' F000'        	goto	l4723
  1605  0062'                    u5120:
  1606  0062'                    
  1607                           ;MazeRobot.X/color.c: 120:             LATDbits.LATD7 = !LATDbits.LATD7;
  1608  0062' AE7C               	btfss	124,7,c	;volatile
  1609  0064' EF00' F000'        	goto	u5131
  1610  0068' EF00' F000'        	goto	u5130
  1611  006C'                    u5131:
  1612  006C' 6A00'              	clrf	??_whiteCal^0,c
  1613  006E' 2A00'              	incf	??_whiteCal^0,f,c
  1614  0070' EF00' F000'        	goto	u5148
  1615  0074'                    u5130:
  1616  0074' 6A00'              	clrf	??_whiteCal^0,c
  1617  0076'                    u5148:
  1618  0076' 3200'              	rrcf	??_whiteCal^0,f,c
  1619  0078' 3200'              	rrcf	??_whiteCal^0,f,c
  1620  007A' 507C               	movf	124,w,c	;volatile
  1621  007C' 1800'              	xorwf	??_whiteCal^0,w,c
  1622  007E' 0B7F               	andlw	-129
  1623  0080' 1800'              	xorwf	??_whiteCal^0,w,c
  1624  0082' 6E7C               	movwf	124,c	;volatile
  1625  0084'                    
  1626                           ;MazeRobot.X/color.c: 121:             _delay((unsigned long)((500)*(64000000/4000.0)));
  1627  0084' 0E29               	movlw	41
  1628  0086' 6E00'              	movwf	(??_whiteCal+1)^0,c
  1629  0088' 0E96               	movlw	150
  1630  008A' 6E00'              	movwf	??_whiteCal^0,c
  1631  008C' 0E7F               	movlw	127
  1632  008E'                    u6707:
  1633  008E' 2EE8               	decfsz	wreg,f,c
  1634  0090' D7FE               	bra	u6707
  1635  0092' 2E00'              	decfsz	??_whiteCal^0,f,c
  1636  0094' D7FC               	bra	u6707
  1637  0096' 2E00'              	decfsz	(??_whiteCal+1)^0,f,c
  1638  0098' D7FA               	bra	u6707
  1639  009A' F000               	nop	
  1640  009C'                    
  1641                           ;MazeRobot.X/color.c: 122:             getColor(v);
  1642  009C' C011' F00F'        	movff	whiteCal@v,getColor@v
  1643  00A0' C012' F010'        	movff	whiteCal@v+1,getColor@v+1
  1644  00A4' EC00' F000'        	call	_getColor	;wreg free
  1645  00A8'                    
  1646                           ;MazeRobot.X/color.c: 123:             _delay((unsigned long)((500)*(64000000/4000.0)));
  1647  00A8' 0E29               	movlw	41
  1648  00AA' 6E00'              	movwf	(??_whiteCal+1)^0,c
  1649  00AC' 0E96               	movlw	150
  1650  00AE' 6E00'              	movwf	??_whiteCal^0,c
  1651  00B0' 0E7F               	movlw	127
  1652  00B2'                    u6717:
  1653  00B2' 2EE8               	decfsz	wreg,f,c
  1654  00B4' D7FE               	bra	u6717
  1655  00B6' 2E00'              	decfsz	??_whiteCal^0,f,c
  1656  00B8' D7FC               	bra	u6717
  1657  00BA' 2E00'              	decfsz	(??_whiteCal+1)^0,f,c
  1658  00BC' D7FA               	bra	u6717
  1659  00BE' F000               	nop	
  1660  00C0'                    
  1661                           ;MazeRobot.X/color.c: 124:             LATDbits.LATD7 = !LATDbits.LATD7;
  1662  00C0' AE7C               	btfss	124,7,c	;volatile
  1663  00C2' EF00' F000'        	goto	u5151
  1664  00C6' EF00' F000'        	goto	u5150
  1665  00CA'                    u5151:
  1666  00CA' 6A00'              	clrf	??_whiteCal^0,c
  1667  00CC' 2A00'              	incf	??_whiteCal^0,f,c
  1668  00CE' EF00' F000'        	goto	u5168
  1669  00D2'                    u5150:
  1670  00D2' 6A00'              	clrf	??_whiteCal^0,c
  1671  00D4'                    u5168:
  1672  00D4' 3200'              	rrcf	??_whiteCal^0,f,c
  1673  00D6' 3200'              	rrcf	??_whiteCal^0,f,c
  1674  00D8' 507C               	movf	124,w,c	;volatile
  1675  00DA' 1800'              	xorwf	??_whiteCal^0,w,c
  1676  00DC' 0B7F               	andlw	-129
  1677  00DE' 1800'              	xorwf	??_whiteCal^0,w,c
  1678  00E0' 6E7C               	movwf	124,c	;volatile
  1679  00E2' 0012               	return		;funcret
  1680  00E4'                    __end_of_whiteCal:
  1681                           	callstack 0
  1682                           
  1683 ;; *************** function _stop *****************
  1684 ;; Defined at:
  1685 ;;		line 115 in file "MazeRobot.X/dc_motor.c"
  1686 ;; Parameters:    Size  Location     Type
  1687 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  1688 ;;		 -> main@motorLeft(9), 
  1689 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  1690 ;;		 -> main@motorRight(9), 
  1691 ;; Auto vars:     Size  Location     Type
  1692 ;;		None
  1693 ;; Return value:  Size  Location     Type
  1694 ;;                  1    wreg      void 
  1695 ;; Registers used:
  1696 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1697 ;; Tracked objects:
  1698 ;;		On entry : 0/0
  1699 ;;		On exit  : 0/0
  1700 ;;		Unchanged: 0/0
  1701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1702 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1704 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1705 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1706 ;;Total ram usage:        6 bytes
  1707 ;; Hardware stack levels used: 1
  1708 ;; Hardware stack levels required when called: 4
  1709 ;; This function calls:
  1710 ;;		_setMotorPWM
  1711 ;; This function is called by:
  1712 ;;		_main
  1713 ;;		_turnLeft
  1714 ;;		_turnRight
  1715 ;;		_turnLeft_90
  1716 ;;		_turnRight_90
  1717 ;;		_turn_180
  1718 ;;		_turnRight_135
  1719 ;;		_turnLeft_135
  1720 ;;		_reverseSquareRight
  1721 ;;		_reverseSquareLeft
  1722 ;; This function uses a non-reentrant model
  1723 ;;
  1724                           
  1725                           	psect	text2
  1726  0000'                    __ptext2:
  1727                           	callstack 0
  1728  0000'                    _stop:
  1729                           	callstack 26
  1730  0000'                    
  1731                           ;MazeRobot.X/dc_motor.c: 117:     while ((mL->power)>0 && (mR->power)>0){
  1732  0000' EF00' F000'        	goto	l4903
  1733  0004'                    l4891:
  1734                           
  1735                           ;MazeRobot.X/dc_motor.c: 118:         if ((mL->power) >0){
  1736  0004' C017' FFD9         	movff	stop@mL,fsr2l
  1737  0008' C018' FFDA         	movff	stop@mL+1,fsr2h
  1738  000C' 50DF               	movf	indf2,w,c
  1739  000E' B4D8               	btfsc	status,2,c
  1740  0010' EF00' F000'        	goto	u5491
  1741  0014' EF00' F000'        	goto	u5490
  1742  0018'                    u5491:
  1743  0018' EF00' F000'        	goto	l4895
  1744  001C'                    u5490:
  1745  001C'                    
  1746                           ;MazeRobot.X/dc_motor.c: 119:             mL->power -= 5;
  1747  001C' C017' FFD9         	movff	stop@mL,fsr2l
  1748  0020' C018' FFDA         	movff	stop@mL+1,fsr2h
  1749  0024' 0E05               	movlw	5
  1750  0026' 5EDF               	subwf	indf2,f,c
  1751  0028'                    l4895:
  1752                           
  1753                           ;MazeRobot.X/dc_motor.c: 121:         if ((mR->power) >0){
  1754  0028' C019' FFD9         	movff	stop@mR,fsr2l
  1755  002C' C01A' FFDA         	movff	stop@mR+1,fsr2h
  1756  0030' 50DF               	movf	indf2,w,c
  1757  0032' B4D8               	btfsc	status,2,c
  1758  0034' EF00' F000'        	goto	u5501
  1759  0038' EF00' F000'        	goto	u5500
  1760  003C'                    u5501:
  1761  003C' EF00' F000'        	goto	l4899
  1762  0040'                    u5500:
  1763  0040'                    
  1764                           ;MazeRobot.X/dc_motor.c: 122:             mR->power -= 5;
  1765  0040' C019' FFD9         	movff	stop@mR,fsr2l
  1766  0044' C01A' FFDA         	movff	stop@mR+1,fsr2h
  1767  0048' 0E05               	movlw	5
  1768  004A' 5EDF               	subwf	indf2,f,c
  1769  004C'                    l4899:
  1770                           
  1771                           ;MazeRobot.X/dc_motor.c: 125:         setMotorPWM(mL);
  1772  004C' C017' F011'        	movff	stop@mL,setMotorPWM@m
  1773  0050' C018' F012'        	movff	stop@mL+1,setMotorPWM@m+1
  1774  0054' EC00' F000'        	call	_setMotorPWM	;wreg free
  1775  0058'                    
  1776                           ;MazeRobot.X/dc_motor.c: 126:         setMotorPWM(mR);
  1777  0058' C019' F011'        	movff	stop@mR,setMotorPWM@m
  1778  005C' C01A' F012'        	movff	stop@mR+1,setMotorPWM@m+1
  1779  0060' EC00' F000'        	call	_setMotorPWM	;wreg free
  1780  0064'                    l4903:
  1781                           
  1782                           ;MazeRobot.X/dc_motor.c: 117:     while ((mL->power)>0 && (mR->power)>0){
  1783  0064' C017' FFD9         	movff	stop@mL,fsr2l
  1784  0068' C018' FFDA         	movff	stop@mL+1,fsr2h
  1785  006C' 50DF               	movf	indf2,w,c
  1786  006E' B4D8               	btfsc	status,2,c
  1787  0070' EF00' F000'        	goto	u5511
  1788  0074' EF00' F000'        	goto	u5510
  1789  0078'                    u5511:
  1790  0078' EF00' F000'        	goto	l4907
  1791  007C'                    u5510:
  1792  007C' C019' FFD9         	movff	stop@mR,fsr2l
  1793  0080' C01A' FFDA         	movff	stop@mR+1,fsr2h
  1794  0084' 50DF               	movf	indf2,w,c
  1795  0086' A4D8               	btfss	status,2,c
  1796  0088' EF00' F000'        	goto	u5521
  1797  008C' EF00' F000'        	goto	u5520
  1798  0090'                    u5521:
  1799  0090' EF00' F000'        	goto	l4891
  1800  0094'                    u5520:
  1801  0094'                    l4907:
  1802                           
  1803                           ;MazeRobot.X/dc_motor.c: 128:     _delay((unsigned long)((100)*(64000000/4000.0)));
  1804  0094' 0E09               	movlw	9
  1805  0096' 6E00'              	movwf	(??_stop+1)^0,c
  1806  0098' 0E1E               	movlw	30
  1807  009A' 6E00'              	movwf	??_stop^0,c
  1808  009C' 0EE4               	movlw	228
  1809  009E'                    u6727:
  1810  009E' 2EE8               	decfsz	wreg,f,c
  1811  00A0' D7FE               	bra	u6727
  1812  00A2' 2E00'              	decfsz	??_stop^0,f,c
  1813  00A4' D7FC               	bra	u6727
  1814  00A6' 2E00'              	decfsz	(??_stop+1)^0,f,c
  1815  00A8' D7FA               	bra	u6727
  1816  00AA' D000               	nop2	
  1817  00AC' 0012               	return		;funcret
  1818  00AE'                    __end_of_stop:
  1819                           	callstack 0
  1820                           
  1821 ;; *************** function _setMotorPWM *****************
  1822 ;; Defined at:
  1823 ;;		line 92 in file "MazeRobot.X/dc_motor.c"
  1824 ;; Parameters:    Size  Location     Type
  1825 ;;  m               2   17[COMRAM] PTR struct DC_motor
  1826 ;;		 -> main@motorRight(9), main@motorLeft(9), 
  1827 ;; Auto vars:     Size  Location     Type
  1828 ;;  negDuty         1   22[COMRAM] unsigned char 
  1829 ;;  posDuty         1   21[COMRAM] unsigned char 
  1830 ;; Return value:  Size  Location     Type
  1831 ;;                  1    wreg      void 
  1832 ;; Registers used:
  1833 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1834 ;; Tracked objects:
  1835 ;;		On entry : 0/0
  1836 ;;		On exit  : 0/0
  1837 ;;		Unchanged: 0/0
  1838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1839 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1840 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1841 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1842 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1843 ;;Total ram usage:        6 bytes
  1844 ;; Hardware stack levels used: 1
  1845 ;; Hardware stack levels required when called: 3
  1846 ;; This function calls:
  1847 ;;		___lwdiv
  1848 ;;		___wmul
  1849 ;; This function is called by:
  1850 ;;		_stop
  1851 ;;		_forward
  1852 ;;		_reverse
  1853 ;;		_turnLeft
  1854 ;;		_turnRight
  1855 ;;		_turnLeft_90
  1856 ;;		_turnRight_90
  1857 ;;		_turn_180
  1858 ;;		_turnRight_135
  1859 ;;		_turnLeft_135
  1860 ;; This function uses a non-reentrant model
  1861 ;;
  1862                           
  1863                           	psect	text3
  1864  0000'                    __ptext3:
  1865                           	callstack 0
  1866  0000'                    _setMotorPWM:
  1867                           	callstack 26
  1868  0000'                    
  1869                           ;MazeRobot.X/dc_motor.c: 92: void setMotorPWM(DC_motor *m);MazeRobot.X/dc_motor.c: 93: {
      +                          ;MazeRobot.X/dc_motor.c: 94:     unsigned char posDuty, negDuty;;MazeRobot.X/dc_motor.c:
      +                           96:     if(m->brakemode) {
  1870  0000' EE20 F002          	lfsr	2,2
  1871  0004' 5000'              	movf	setMotorPWM@m^0,w,c
  1872  0006' 26D9               	addwf	fsr2l,f,c
  1873  0008' 5000'              	movf	(setMotorPWM@m+1)^0,w,c
  1874  000A' 22DA               	addwfc	fsr2h,f,c
  1875  000C' 50DF               	movf	indf2,w,c
  1876  000E' B4D8               	btfsc	status,2,c
  1877  0010' EF00' F000'        	goto	u4851
  1878  0014' EF00' F000'        	goto	u4850
  1879  0018'                    u4851:
  1880  0018' EF00' F000'        	goto	l4595
  1881  001C'                    u4850:
  1882  001C'                    
  1883                           ;MazeRobot.X/dc_motor.c: 97:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m
      +                          ->PWMperiod))/100;
  1884  001C' C011' FFD9         	movff	setMotorPWM@m,fsr2l
  1885  0020' C012' FFDA         	movff	setMotorPWM@m+1,fsr2h
  1886  0024' 50DF               	movf	indf2,w,c
  1887  0026' 6E00'              	movwf	??_setMotorPWM^0,c
  1888  0028' 5000'              	movf	??_setMotorPWM^0,w,c
  1889  002A' 6E00'              	movwf	___wmul@multiplier^0,c
  1890  002C' 6A00'              	clrf	(___wmul@multiplier+1)^0,c
  1891  002E' EE20 F003          	lfsr	2,3
  1892  0032' 5000'              	movf	setMotorPWM@m^0,w,c
  1893  0034' 26D9               	addwf	fsr2l,f,c
  1894  0036' 5000'              	movf	(setMotorPWM@m+1)^0,w,c
  1895  0038' 22DA               	addwfc	fsr2h,f,c
  1896  003A' CFDE F006'         	movff	postinc2,___wmul@multiplicand
  1897  003E' CFDD F007'         	movff	postdec2,___wmul@multiplicand+1
  1898  0042' EC00' F000'        	call	___wmul	;wreg free
  1899  0046' C004' F00A'        	movff	?___wmul,___lwdiv@dividend
  1900  004A' C005' F00B'        	movff	?___wmul+1,___lwdiv@dividend+1
  1901  004E' 0E00               	movlw	0
  1902  0050' 6E00'              	movwf	(___lwdiv@divisor+1)^0,c
  1903  0052' 0E64               	movlw	100
  1904  0054' 6E00'              	movwf	___lwdiv@divisor^0,c
  1905  0056' EC00' F000'        	call	___lwdiv	;wreg free
  1906  005A' EE20 F003          	lfsr	2,3
  1907  005E' 5000'              	movf	setMotorPWM@m^0,w,c
  1908  0060' 26D9               	addwf	fsr2l,f,c
  1909  0062' 5000'              	movf	(setMotorPWM@m+1)^0,w,c
  1910  0064' 22DA               	addwfc	fsr2h,f,c
  1911  0066' 50DF               	movf	indf2,w,c
  1912  0068' 6E00'              	movwf	(??_setMotorPWM+1)^0,c
  1913  006A' 5000'              	movf	?___lwdiv^0,w,c
  1914  006C' 5C00'              	subwf	(??_setMotorPWM+1)^0,w,c
  1915  006E' 6E00'              	movwf	setMotorPWM@posDuty^0,c
  1916  0070'                    
  1917                           ;MazeRobot.X/dc_motor.c: 98:         negDuty=m->PWMperiod;
  1918  0070' EE20 F003          	lfsr	2,3
  1919  0074' 5000'              	movf	setMotorPWM@m^0,w,c
  1920  0076' 26D9               	addwf	fsr2l,f,c
  1921  0078' 5000'              	movf	(setMotorPWM@m+1)^0,w,c
  1922  007A' 22DA               	addwfc	fsr2h,f,c
  1923  007C' 50DF               	movf	indf2,w,c
  1924  007E' 6E00'              	movwf	setMotorPWM@negDuty^0,c
  1925                           
  1926                           ;MazeRobot.X/dc_motor.c: 99:     }
  1927  0080' EF00' F000'        	goto	l4599
  1928  0084'                    l4595:
  1929                           
  1930                           ;MazeRobot.X/dc_motor.c: 101:         posDuty=0;
  1931  0084' 0E00               	movlw	0
  1932  0086' 6E00'              	movwf	setMotorPWM@posDuty^0,c
  1933  0088'                    
  1934                           ;MazeRobot.X/dc_motor.c: 102:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  1935  0088' C011' FFD9         	movff	setMotorPWM@m,fsr2l
  1936  008C' C012' FFDA         	movff	setMotorPWM@m+1,fsr2h
  1937  0090' 50DF               	movf	indf2,w,c
  1938  0092' 6E00'              	movwf	??_setMotorPWM^0,c
  1939  0094' 5000'              	movf	??_setMotorPWM^0,w,c
  1940  0096' 6E00'              	movwf	___wmul@multiplier^0,c
  1941  0098' 6A00'              	clrf	(___wmul@multiplier+1)^0,c
  1942  009A' EE20 F003          	lfsr	2,3
  1943  009E' 5000'              	movf	setMotorPWM@m^0,w,c
  1944  00A0' 26D9               	addwf	fsr2l,f,c
  1945  00A2' 5000'              	movf	(setMotorPWM@m+1)^0,w,c
  1946  00A4' 22DA               	addwfc	fsr2h,f,c
  1947  00A6' CFDE F006'         	movff	postinc2,___wmul@multiplicand
  1948  00AA' CFDD F007'         	movff	postdec2,___wmul@multiplicand+1
  1949  00AE' EC00' F000'        	call	___wmul	;wreg free
  1950  00B2' C004' F00A'        	movff	?___wmul,___lwdiv@dividend
  1951  00B6' C005' F00B'        	movff	?___wmul+1,___lwdiv@dividend+1
  1952  00BA' 0E00               	movlw	0
  1953  00BC' 6E00'              	movwf	(___lwdiv@divisor+1)^0,c
  1954  00BE' 0E64               	movlw	100
  1955  00C0' 6E00'              	movwf	___lwdiv@divisor^0,c
  1956  00C2' EC00' F000'        	call	___lwdiv	;wreg free
  1957  00C6' 5000'              	movf	?___lwdiv^0,w,c
  1958  00C8' 6E00'              	movwf	setMotorPWM@negDuty^0,c
  1959  00CA'                    l4599:
  1960                           
  1961                           ;MazeRobot.X/dc_motor.c: 105:     if (m->direction) {
  1962  00CA' EE20 F001          	lfsr	2,1
  1963  00CE' 5000'              	movf	setMotorPWM@m^0,w,c
  1964  00D0' 26D9               	addwf	fsr2l,f,c
  1965  00D2' 5000'              	movf	(setMotorPWM@m+1)^0,w,c
  1966  00D4' 22DA               	addwfc	fsr2h,f,c
  1967  00D6' 50DF               	movf	indf2,w,c
  1968  00D8' B4D8               	btfsc	status,2,c
  1969  00DA' EF00' F000'        	goto	u4861
  1970  00DE' EF00' F000'        	goto	u4860
  1971  00E2'                    u4861:
  1972  00E2' EF00' F000'        	goto	l4603
  1973  00E6'                    u4860:
  1974  00E6'                    
  1975                           ;MazeRobot.X/dc_motor.c: 106:         *(m->posDutyHighByte)=posDuty;
  1976  00E6' EE20 F005          	lfsr	2,5
  1977  00EA' 5000'              	movf	setMotorPWM@m^0,w,c
  1978  00EC' 26D9               	addwf	fsr2l,f,c
  1979  00EE' 5000'              	movf	(setMotorPWM@m+1)^0,w,c
  1980  00F0' 22DA               	addwfc	fsr2h,f,c
  1981  00F2' CFDE F013'         	movff	postinc2,??_setMotorPWM
  1982  00F6' CFDD F014'         	movff	postdec2,??_setMotorPWM+1
  1983  00FA' C013' FFD9         	movff	??_setMotorPWM,fsr2l
  1984  00FE' C014' FFDA         	movff	??_setMotorPWM+1,fsr2h
  1985  0102' C015' FFDF         	movff	setMotorPWM@posDuty,indf2
  1986                           
  1987                           ;MazeRobot.X/dc_motor.c: 107:         *(m->negDutyHighByte)=negDuty;
  1988  0106' EE20 F007          	lfsr	2,7
  1989  010A' 5000'              	movf	setMotorPWM@m^0,w,c
  1990  010C' 26D9               	addwf	fsr2l,f,c
  1991  010E' 5000'              	movf	(setMotorPWM@m+1)^0,w,c
  1992  0110' 22DA               	addwfc	fsr2h,f,c
  1993  0112' CFDE F013'         	movff	postinc2,??_setMotorPWM
  1994  0116' CFDD F014'         	movff	postdec2,??_setMotorPWM+1
  1995  011A' C013' FFD9         	movff	??_setMotorPWM,fsr2l
  1996  011E' C014' FFDA         	movff	??_setMotorPWM+1,fsr2h
  1997  0122' C016' FFDF         	movff	setMotorPWM@negDuty,indf2
  1998                           
  1999                           ;MazeRobot.X/dc_motor.c: 108:     } else {
  2000  0126' EF00' F000'        	goto	l146
  2001  012A'                    l4603:
  2002                           
  2003                           ;MazeRobot.X/dc_motor.c: 109:         *(m->posDutyHighByte)=negDuty;
  2004  012A' EE20 F005          	lfsr	2,5
  2005  012E' 5000'              	movf	setMotorPWM@m^0,w,c
  2006  0130' 26D9               	addwf	fsr2l,f,c
  2007  0132' 5000'              	movf	(setMotorPWM@m+1)^0,w,c
  2008  0134' 22DA               	addwfc	fsr2h,f,c
  2009  0136' CFDE F013'         	movff	postinc2,??_setMotorPWM
  2010  013A' CFDD F014'         	movff	postdec2,??_setMotorPWM+1
  2011  013E' C013' FFD9         	movff	??_setMotorPWM,fsr2l
  2012  0142' C014' FFDA         	movff	??_setMotorPWM+1,fsr2h
  2013  0146' C016' FFDF         	movff	setMotorPWM@negDuty,indf2
  2014                           
  2015                           ;MazeRobot.X/dc_motor.c: 110:         *(m->negDutyHighByte)=posDuty;
  2016  014A' EE20 F007          	lfsr	2,7
  2017  014E' 5000'              	movf	setMotorPWM@m^0,w,c
  2018  0150' 26D9               	addwf	fsr2l,f,c
  2019  0152' 5000'              	movf	(setMotorPWM@m+1)^0,w,c
  2020  0154' 22DA               	addwfc	fsr2h,f,c
  2021  0156' CFDE F013'         	movff	postinc2,??_setMotorPWM
  2022  015A' CFDD F014'         	movff	postdec2,??_setMotorPWM+1
  2023  015E' C013' FFD9         	movff	??_setMotorPWM,fsr2l
  2024  0162' C014' FFDA         	movff	??_setMotorPWM+1,fsr2h
  2025  0166' C015' FFDF         	movff	setMotorPWM@posDuty,indf2
  2026  016A'                    l146:
  2027  016A' 0012               	return		;funcret
  2028  016C'                    __end_of_setMotorPWM:
  2029                           	callstack 0
  2030                           
  2031 ;; *************** function ___wmul *****************
  2032 ;; Defined at:
  2033 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  2034 ;; Parameters:    Size  Location     Type
  2035 ;;  multiplier      2    4[COMRAM] unsigned int 
  2036 ;;  multiplicand    2    6[COMRAM] unsigned int 
  2037 ;; Auto vars:     Size  Location     Type
  2038 ;;  product         2    8[COMRAM] unsigned int 
  2039 ;; Return value:  Size  Location     Type
  2040 ;;                  2    4[COMRAM] unsigned int 
  2041 ;; Registers used:
  2042 ;;		wreg, status,2, status,0, prodl, prodh
  2043 ;; Tracked objects:
  2044 ;;		On entry : 0/0
  2045 ;;		On exit  : 0/0
  2046 ;;		Unchanged: 0/0
  2047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2048 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2049 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2051 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2052 ;;Total ram usage:        6 bytes
  2053 ;; Hardware stack levels used: 1
  2054 ;; Hardware stack levels required when called: 2
  2055 ;; This function calls:
  2056 ;;		Nothing
  2057 ;; This function is called by:
  2058 ;;		_setMotorPWM
  2059 ;;		_turnLeft_135
  2060 ;; This function uses a non-reentrant model
  2061 ;;
  2062                           
  2063                           	psect	text4
  2064  0000'                    __ptext4:
  2065                           	callstack 0
  2066  0000'                    ___wmul:
  2067                           	callstack 26
  2068  0000' 5000'              	movf	___wmul@multiplier^0,w,c
  2069  0002' 0200'              	mulwf	___wmul@multiplicand^0,c
  2070  0004' CFF3 F008'         	movff	prodl,___wmul@product
  2071  0008' CFF4 F009'         	movff	prodh,___wmul@product+1
  2072  000C' 5000'              	movf	___wmul@multiplier^0,w,c
  2073  000E' 0200'              	mulwf	(___wmul@multiplicand+1)^0,c
  2074  0010' 50F3               	movf	243,w,c
  2075  0012' 2600'              	addwf	(___wmul@product+1)^0,f,c
  2076  0014' 5000'              	movf	(___wmul@multiplier+1)^0,w,c
  2077  0016' 0200'              	mulwf	___wmul@multiplicand^0,c
  2078  0018' 50F3               	movf	243,w,c
  2079  001A' 2600'              	addwf	(___wmul@product+1)^0,f,c
  2080  001C' C008' F004'        	movff	___wmul@product,?___wmul
  2081  0020' C009' F005'        	movff	___wmul@product+1,?___wmul+1
  2082  0024' 0012               	return		;funcret
  2083  0026'                    __end_of___wmul:
  2084                           	callstack 0
  2085                           
  2086 ;; *************** function ___lwdiv *****************
  2087 ;; Defined at:
  2088 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  2089 ;; Parameters:    Size  Location     Type
  2090 ;;  dividend        2   10[COMRAM] unsigned int 
  2091 ;;  divisor         2   12[COMRAM] unsigned int 
  2092 ;; Auto vars:     Size  Location     Type
  2093 ;;  quotient        2   14[COMRAM] unsigned int 
  2094 ;;  counter         1   16[COMRAM] unsigned char 
  2095 ;; Return value:  Size  Location     Type
  2096 ;;                  2   10[COMRAM] unsigned int 
  2097 ;; Registers used:
  2098 ;;		wreg, status,2, status,0
  2099 ;; Tracked objects:
  2100 ;;		On entry : 0/0
  2101 ;;		On exit  : 0/0
  2102 ;;		Unchanged: 0/0
  2103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2104 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2105 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2107 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2108 ;;Total ram usage:        7 bytes
  2109 ;; Hardware stack levels used: 1
  2110 ;; Hardware stack levels required when called: 2
  2111 ;; This function calls:
  2112 ;;		Nothing
  2113 ;; This function is called by:
  2114 ;;		_setMotorPWM
  2115 ;; This function uses a non-reentrant model
  2116 ;;
  2117                           
  2118                           	psect	text5
  2119  0000'                    __ptext5:
  2120                           	callstack 0
  2121  0000'                    ___lwdiv:
  2122                           	callstack 26
  2123  0000' 0E00               	movlw	0
  2124  0002' 6E00'              	movwf	(___lwdiv@quotient+1)^0,c
  2125  0004' 0E00               	movlw	0
  2126  0006' 6E00'              	movwf	___lwdiv@quotient^0,c
  2127  0008' 5000'              	movf	___lwdiv@divisor^0,w,c
  2128  000A' 1000'              	iorwf	(___lwdiv@divisor+1)^0,w,c
  2129  000C' B4D8               	btfsc	status,2,c
  2130  000E' EF00' F000'        	goto	u4781
  2131  0012' EF00' F000'        	goto	u4780
  2132  0016'                    u4781:
  2133  0016' EF00' F000'        	goto	l979
  2134  001A'                    u4780:
  2135  001A' 0E01               	movlw	1
  2136  001C' 6E00'              	movwf	___lwdiv@counter^0,c
  2137  001E' EF00' F000'        	goto	l4477
  2138  0022'                    l4475:
  2139  0022' 90D8               	bcf	status,0,c
  2140  0024' 3600'              	rlcf	___lwdiv@divisor^0,f,c
  2141  0026' 3600'              	rlcf	(___lwdiv@divisor+1)^0,f,c
  2142  0028' 2A00'              	incf	___lwdiv@counter^0,f,c
  2143  002A'                    l4477:
  2144  002A' AE00'              	btfss	(___lwdiv@divisor+1)^0,7,c
  2145  002C' EF00' F000'        	goto	u4791
  2146  0030' EF00' F000'        	goto	u4790
  2147  0034'                    u4791:
  2148  0034' EF00' F000'        	goto	l4475
  2149  0038'                    u4790:
  2150  0038'                    l4479:
  2151  0038' 90D8               	bcf	status,0,c
  2152  003A' 3600'              	rlcf	___lwdiv@quotient^0,f,c
  2153  003C' 3600'              	rlcf	(___lwdiv@quotient+1)^0,f,c
  2154  003E' 5000'              	movf	___lwdiv@divisor^0,w,c
  2155  0040' 5C00'              	subwf	___lwdiv@dividend^0,w,c
  2156  0042' 5000'              	movf	(___lwdiv@divisor+1)^0,w,c
  2157  0044' 5800'              	subwfb	(___lwdiv@dividend+1)^0,w,c
  2158  0046' A0D8               	btfss	status,0,c
  2159  0048' EF00' F000'        	goto	u4801
  2160  004C' EF00' F000'        	goto	u4800
  2161  0050'                    u4801:
  2162  0050' EF00' F000'        	goto	l4487
  2163  0054'                    u4800:
  2164  0054' 5000'              	movf	___lwdiv@divisor^0,w,c
  2165  0056' 5E00'              	subwf	___lwdiv@dividend^0,f,c
  2166  0058' 5000'              	movf	(___lwdiv@divisor+1)^0,w,c
  2167  005A' 5A00'              	subwfb	(___lwdiv@dividend+1)^0,f,c
  2168  005C' 8000'              	bsf	___lwdiv@quotient^0,0,c
  2169  005E'                    l4487:
  2170  005E' 90D8               	bcf	status,0,c
  2171  0060' 3200'              	rrcf	(___lwdiv@divisor+1)^0,f,c
  2172  0062' 3200'              	rrcf	___lwdiv@divisor^0,f,c
  2173  0064' 2E00'              	decfsz	___lwdiv@counter^0,f,c
  2174  0066' EF00' F000'        	goto	l4479
  2175  006A'                    l979:
  2176  006A' C00E' F00A'        	movff	___lwdiv@quotient,?___lwdiv
  2177  006E' C00F' F00B'        	movff	___lwdiv@quotient+1,?___lwdiv+1
  2178  0072' 0012               	return		;funcret
  2179  0074'                    __end_of___lwdiv:
  2180                           	callstack 0
  2181                           
  2182 ;; *************** function _sprintf *****************
  2183 ;; Defined at:
  2184 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_sprintf.c"
  2185 ;; Parameters:    Size  Location     Type
  2186 ;;  s               2   92[BANK0 ] PTR unsigned char 
  2187 ;;		 -> main@string4(20), 
  2188 ;;  fmt             2   94[BANK0 ] PTR const unsigned char 
  2189 ;;		 -> STR_1(18), 
  2190 ;; Auto vars:     Size  Location     Type
  2191 ;;  f              11  106[BANK0 ] struct _IO_FILE
  2192 ;;  ap              2  104[BANK0 ] PTR void [1]
  2193 ;;		 -> ?_sprintf(2), 
  2194 ;;  ret             2    0        int 
  2195 ;; Return value:  Size  Location     Type
  2196 ;;                  2   92[BANK0 ] int 
  2197 ;; Registers used:
  2198 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2199 ;; Tracked objects:
  2200 ;;		On entry : 0/0
  2201 ;;		On exit  : 0/0
  2202 ;;		Unchanged: 0/0
  2203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2204 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2205 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2207 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2208 ;;Total ram usage:       25 bytes
  2209 ;; Hardware stack levels used: 1
  2210 ;; Hardware stack levels required when called: 9
  2211 ;; This function calls:
  2212 ;;		_vfprintf
  2213 ;; This function is called by:
  2214 ;;		_main
  2215 ;; This function uses a non-reentrant model
  2216 ;;
  2217                           
  2218                           	psect	text6
  2219  0000'                    __ptext6:
  2220                           	callstack 0
  2221  0000'                    _sprintf:
  2222                           	callstack 21
  2223  0000' 0E00'              	movlw	low (?_sprintf+4)
  2224  0002' 0100               	movlb	0	; () banked
  2225  0004' 6F00'              	movwf	sprintf@ap& (0+255),b
  2226  0006' 0E00'              	movlw	high (?_sprintf+4)
  2227  0008' 6F00'              	movwf	(sprintf@ap+1)& (0+255),b
  2228  000A' C05C' F06A'        	movff	sprintf@s,sprintf@f
  2229  000E' C05D' F06B'        	movff	sprintf@s+1,sprintf@f+1
  2230  0012'                    
  2231                           ; BSR set to: 0
  2232  0012' 0E00               	movlw	0
  2233  0014' 6F00'              	movwf	(sprintf@f+4)& (0+255),b
  2234  0016' 0E00               	movlw	0
  2235  0018' 6F00'              	movwf	(sprintf@f+3)& (0+255),b
  2236  001A'                    
  2237                           ; BSR set to: 0
  2238  001A' 0E00               	movlw	0
  2239  001C' 6F00'              	movwf	(sprintf@f+10)& (0+255),b
  2240  001E' 0E00               	movlw	0
  2241  0020' 6F00'              	movwf	(sprintf@f+9)& (0+255),b
  2242  0022'                    
  2243                           ; BSR set to: 0
  2244  0022' 0E00'              	movlw	low sprintf@f
  2245  0024' 6F00'              	movwf	vfprintf@fp& (0+255),b
  2246  0026' 0E00'              	movlw	high sprintf@f
  2247  0028' 6F00'              	movwf	(vfprintf@fp+1)& (0+255),b
  2248  002A' C05E' F056'        	movff	sprintf@fmt,vfprintf@fmt
  2249  002E' C05F' F057'        	movff	sprintf@fmt+1,vfprintf@fmt+1
  2250  0032' 0E00'              	movlw	low sprintf@ap
  2251  0034' 6F00'              	movwf	vfprintf@ap& (0+255),b
  2252  0036' 0E00'              	movlw	high sprintf@ap
  2253  0038' 6F00'              	movwf	(vfprintf@ap+1)& (0+255),b
  2254  003A' EC00' F000'        	call	_vfprintf	;wreg free
  2255  003E' 0100               	movlb	0	; () banked
  2256  0040' 5100'              	movf	(sprintf@f+3)& (0+255),w,b
  2257  0042' 2500'              	addwf	sprintf@s& (0+255),w,b
  2258  0044' 6ED9               	movwf	fsr2l,c
  2259  0046' 5100'              	movf	(sprintf@f+4)& (0+255),w,b
  2260  0048' 2100'              	addwfc	(sprintf@s+1)& (0+255),w,b
  2261  004A' 6EDA               	movwf	fsr2h,c
  2262  004C' 0E00               	movlw	0
  2263  004E' 6EDF               	movwf	indf2,c
  2264  0050'                    
  2265                           ; BSR set to: 0
  2266  0050' 0012               	return		;funcret
  2267  0052'                    __end_of_sprintf:
  2268                           	callstack 0
  2269                           
  2270 ;; *************** function _vfprintf *****************
  2271 ;; Defined at:
  2272 ;;		line 1520 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2273 ;; Parameters:    Size  Location     Type
  2274 ;;  fp              2   84[BANK0 ] PTR struct _IO_FILE
  2275 ;;		 -> sprintf@f(11), 
  2276 ;;  fmt             2   86[BANK0 ] PTR const unsigned char 
  2277 ;;		 -> STR_1(18), 
  2278 ;;  ap              2   88[BANK0 ] PTR PTR void 
  2279 ;;		 -> sprintf@ap(2), 
  2280 ;; Auto vars:     Size  Location     Type
  2281 ;;  cfmt            2   90[BANK0 ] PTR unsigned char 
  2282 ;;		 -> STR_1(18), 
  2283 ;; Return value:  Size  Location     Type
  2284 ;;                  2   84[BANK0 ] int 
  2285 ;; Registers used:
  2286 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2287 ;; Tracked objects:
  2288 ;;		On entry : 0/0
  2289 ;;		On exit  : 0/0
  2290 ;;		Unchanged: 0/0
  2291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2292 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2293 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2295 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2296 ;;Total ram usage:        8 bytes
  2297 ;; Hardware stack levels used: 1
  2298 ;; Hardware stack levels required when called: 8
  2299 ;; This function calls:
  2300 ;;		_vfpfcnvrt
  2301 ;; This function is called by:
  2302 ;;		_sprintf
  2303 ;; This function uses a non-reentrant model
  2304 ;;
  2305                           
  2306                           	psect	text7
  2307  0000'                    __ptext7:
  2308                           	callstack 0
  2309  0000'                    _vfprintf:
  2310                           	callstack 21
  2311  0000'                    
  2312                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1520: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\source
      +                          s\c99\common\doprnt.c: 1521: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\comm
      +                          on\doprnt.c: 1523:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\
      +                          common\doprnt.c: 1525:     cfmt = (char *)fmt;
  2313  0000' C056' F05A'        	movff	vfprintf@fmt,vfprintf@cfmt
  2314  0004' C057' F05B'        	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  2315                           
  2316                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  2317  0008' EF00' F000'        	goto	l5671
  2318  000C'                    l5669:
  2319                           
  2320                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1533:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  2321  000C' C054' F043'        	movff	vfprintf@fp,vfpfcnvrt@fp
  2322  0010' C055' F044'        	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  2323  0014' 0E00'              	movlw	low vfprintf@cfmt
  2324  0016' 0100               	movlb	0	; () banked
  2325  0018' 6F00'              	movwf	vfpfcnvrt@fmt& (0+255),b
  2326  001A' 0E00'              	movlw	high vfprintf@cfmt
  2327  001C' 6F00'              	movwf	(vfpfcnvrt@fmt+1)& (0+255),b
  2328  001E' C058' F047'        	movff	vfprintf@ap,vfpfcnvrt@ap
  2329  0022' C059' F048'        	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  2330  0026' EC00' F000'        	call	_vfpfcnvrt	;wreg free
  2331  002A'                    l5671:
  2332                           
  2333                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  2334  002A' C05A' FFF6         	movff	vfprintf@cfmt,tblptrl
  2335  002E' C05B' FFF7         	movff	vfprintf@cfmt+1,tblptrh
  2336  0032'                    	if	0	;tblptru may be non-zero
  2337  0032'                    	endif
  2338  0032'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2339  0032' 0E00'              	movlw	low (__mediumconst shr (0+16))
  2340  0034' 6EF8               	movwf	tblptru,c
  2341  0036'                    	endif
  2342  0036' 0008               	tblrd		*
  2343  0038' 50F5               	movf	tablat,w,c
  2344  003A' 0900               	iorlw	0
  2345  003C' A4D8               	btfss	status,2,c
  2346  003E' EF00' F000'        	goto	u6281
  2347  0042' EF00' F000'        	goto	u6280
  2348  0046'                    u6281:
  2349  0046' EF00' F000'        	goto	l5669
  2350  004A'                    u6280:
  2351  004A'                    
  2352                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1538:  return 0;
  2353  004A' 0E00               	movlw	0
  2354  004C' 0100               	movlb	0	; () banked
  2355  004E' 6F00'              	movwf	(?_vfprintf+1)& (0+255),b
  2356  0050' 0E00               	movlw	0
  2357  0052' 6F00'              	movwf	?_vfprintf& (0+255),b
  2358  0054'                    
  2359                           ; BSR set to: 0
  2360  0054' 0012               	return		;funcret
  2361  0056'                    __end_of_vfprintf:
  2362                           	callstack 0
  2363                           
  2364 ;; *************** function _vfpfcnvrt *****************
  2365 ;; Defined at:
  2366 ;;		line 1007 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2367 ;; Parameters:    Size  Location     Type
  2368 ;;  fp              2   67[BANK0 ] PTR struct _IO_FILE
  2369 ;;		 -> sprintf@f(11), 
  2370 ;;  fmt             2   69[BANK0 ] PTR PTR unsigned char 
  2371 ;;		 -> vfprintf@cfmt(2), 
  2372 ;;  ap              2   71[BANK0 ] PTR PTR void 
  2373 ;;		 -> sprintf@ap(2), 
  2374 ;; Auto vars:     Size  Location     Type
  2375 ;;  convarg         8   73[BANK0 ] struct .
  2376 ;;  cp              2   82[BANK0 ] PTR unsigned char 
  2377 ;;		 -> STR_1(18), 
  2378 ;;  i               2    0        int 
  2379 ;;  done            2    0        int 
  2380 ;;  c               1   81[BANK0 ] unsigned char 
  2381 ;; Return value:  Size  Location     Type
  2382 ;;                  1    wreg      void 
  2383 ;; Registers used:
  2384 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2385 ;; Tracked objects:
  2386 ;;		On entry : 0/0
  2387 ;;		On exit  : 0/0
  2388 ;;		Unchanged: 0/0
  2389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2390 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2391 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2392 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2393 ;;      Totals:         2      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2394 ;;Total ram usage:       19 bytes
  2395 ;; Hardware stack levels used: 1
  2396 ;; Hardware stack levels required when called: 7
  2397 ;; This function calls:
  2398 ;;		_dtoa
  2399 ;;		_efgtoa
  2400 ;;		_fputc
  2401 ;; This function is called by:
  2402 ;;		_vfprintf
  2403 ;; This function uses a non-reentrant model
  2404 ;;
  2405                           
  2406                           	psect	text8
  2407  0000'                    __ptext8:
  2408                           	callstack 0
  2409  0000'                    _vfpfcnvrt:
  2410                           	callstack 21
  2411  0000'                    
  2412                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1007: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1008: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\dopr
      +                          nt.c: 1009:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 1010:     int done, i;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1016:  } convarg;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1019:     if ((*fmt)[0] == '%') {
  2413  0000' C045' FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2414  0004' C046' FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2415  0008' CFDE FFF6          	movff	postinc2,tblptrl
  2416  000C' CFDD FFF7          	movff	postdec2,tblptrh
  2417  0010'                    	if	0	;tblptru may be non-zero
  2418  0010'                    	endif
  2419  0010'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2420  0010' 0E00'              	movlw	low (__mediumconst shr (0+16))
  2421  0012' 6EF8               	movwf	tblptru,c
  2422  0014'                    	endif
  2423  0014' 0008               	tblrd		*
  2424  0016' 50F5               	movf	tablat,w,c
  2425  0018' 0A25               	xorlw	37
  2426  001A' A4D8               	btfss	status,2,c
  2427  001C' EF00' F000'        	goto	u6241
  2428  0020' EF00' F000'        	goto	u6240
  2429  0024'                    u6241:
  2430  0024' EF00' F000'        	goto	l5643
  2431  0028'                    u6240:
  2432  0028'                    
  2433                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1020:         ++*
      +                          fmt;
  2434  0028' C045' FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2435  002C' C046' FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2436  0030' 2ADE               	incf	postinc2,f,c
  2437  0032' 0E00               	movlw	0
  2438  0034' 22DD               	addwfc	postdec2,f,c
  2439  0036'                    
  2440                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1022:         fla
      +                          gs = width = 0;
  2441  0036' 0E00               	movlw	0
  2442  0038' 0100               	movlb	0	; () banked
  2443  003A' 6F00'              	movwf	(_width+1)& (0+255),b
  2444  003C' 0E00               	movlw	0
  2445  003E' 6F00'              	movwf	_width& (0+255),b
  2446  0040' C01C' F024'        	movff	_width,_flags
  2447  0044'                    
  2448                           ; BSR set to: 0
  2449                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1023:         pre
      +                          c = -1;
  2450  0044' 6900'              	setf	_prec& (0+255),b
  2451  0046' 6900'              	setf	(_prec+1)& (0+255),b
  2452  0048'                    
  2453                           ; BSR set to: 0
  2454                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1117:   cp = *fmt
      +                          ;
  2455  0048' C045' FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2456  004C' C046' FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2457  0050' CFDE F052'         	movff	postinc2,vfpfcnvrt@cp
  2458  0054' CFDD F053'         	movff	postdec2,vfpfcnvrt@cp+1
  2459  0058'                    
  2460                           ; BSR set to: 0
  2461                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1187:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  2462  0058' C052' FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2463  005C' C053' FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  2464  0060'                    	if	0	;tblptru may be non-zero
  2465  0060'                    	endif
  2466  0060'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2467  0060' 0E00'              	movlw	low (__mediumconst shr (0+16))
  2468  0062' 6EF8               	movwf	tblptru,c
  2469  0064'                    	endif
  2470  0064' 0008               	tblrd		*
  2471  0066' 50F5               	movf	tablat,w,c
  2472  0068' 0A64               	xorlw	100
  2473  006A' B4D8               	btfsc	status,2,c
  2474  006C' EF00' F000'        	goto	u6251
  2475  0070' EF00' F000'        	goto	u6250
  2476  0074'                    u6251:
  2477  0074' EF00' F000'        	goto	l5599
  2478  0078'                    u6250:
  2479  0078'                    
  2480                           ; BSR set to: 0
  2481  0078' C052' FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2482  007C' C053' FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  2483  0080'                    	if	0	;tblptru may be non-zero
  2484  0080'                    	endif
  2485  0080'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2486  0080' 0E00'              	movlw	low (__mediumconst shr (0+16))
  2487  0082' 6EF8               	movwf	tblptru,c
  2488  0084'                    	endif
  2489  0084' 0008               	tblrd		*
  2490  0086' 50F5               	movf	tablat,w,c
  2491  0088' 0A69               	xorlw	105
  2492  008A' A4D8               	btfss	status,2,c
  2493  008C' EF00' F000'        	goto	u6261
  2494  0090' EF00' F000'        	goto	u6260
  2495  0094'                    u6261:
  2496  0094' EF00' F000'        	goto	l5605
  2497  0098'                    u6260:
  2498  0098'                    l5599:
  2499                           
  2500                           ; BSR set to: 0
  2501                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1230:    convarg.
      +                          ll = (long long)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  2502  0098' C047' FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2503  009C' C048' FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2504  00A0' CFDF F054'         	movff	indf2,??_vfpfcnvrt
  2505  00A4' 0E02               	movlw	2
  2506  00A6' 26DE               	addwf	postinc2,f,c
  2507  00A8' CFDF F055'         	movff	indf2,??_vfpfcnvrt+1
  2508  00AC' 0E00               	movlw	0
  2509  00AE' 22DD               	addwfc	postdec2,f,c
  2510  00B0' C054' FFD9         	movff	??_vfpfcnvrt,fsr2l
  2511  00B4' C055' FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2512  00B8' CFDE F049'         	movff	postinc2,vfpfcnvrt@convarg
  2513  00BC' CFDD F04A'         	movff	postdec2,vfpfcnvrt@convarg+1
  2514  00C0' 0E00               	movlw	0
  2515  00C2' BF00'              	btfsc	(vfpfcnvrt@convarg+1)& (0+255),7,b
  2516  00C4' 0EFF               	movlw	-1
  2517  00C6' 6F00'              	movwf	(vfpfcnvrt@convarg+2)& (0+255),b
  2518  00C8' 6F00'              	movwf	(vfpfcnvrt@convarg+3)& (0+255),b
  2519  00CA' 6F00'              	movwf	(vfpfcnvrt@convarg+4)& (0+255),b
  2520  00CC' 6F00'              	movwf	(vfpfcnvrt@convarg+5)& (0+255),b
  2521  00CE' 6F00'              	movwf	(vfpfcnvrt@convarg+6)& (0+255),b
  2522  00D0' 6F00'              	movwf	(vfpfcnvrt@convarg+7)& (0+255),b
  2523                           
  2524                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1232:    *fmt = c
      +                          p+1;
  2525  00D2' 0E01               	movlw	1
  2526  00D4' 2500'              	addwf	vfpfcnvrt@cp& (0+255),w,b
  2527  00D6' 6E00'              	movwf	??_vfpfcnvrt^0,c
  2528  00D8' 0E00               	movlw	0
  2529  00DA' 2100'              	addwfc	(vfpfcnvrt@cp+1)& (0+255),w,b
  2530  00DC' 6E00'              	movwf	(??_vfpfcnvrt+1)^0,c
  2531  00DE' C045' FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2532  00E2' C046' FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2533  00E6' C054' FFDE         	movff	??_vfpfcnvrt,postinc2
  2534  00EA' C055' FFDD         	movff	??_vfpfcnvrt+1,postdec2
  2535  00EE'                    
  2536                           ; BSR set to: 0
  2537                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1233:    return (
      +                          void) dtoa(fp, convarg.ll);;	Return value of _vfpfcnvrt is never used
  2538  00EE' C043' F01F'        	movff	vfpfcnvrt@fp,dtoa@fp
  2539  00F2' C044' F020'        	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  2540  00F6' C049' F021'        	movff	vfpfcnvrt@convarg,dtoa@d
  2541  00FA' C04A' F022'        	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  2542  00FE' C04B' F023'        	movff	vfpfcnvrt@convarg+2,dtoa@d+2
  2543  0102' C04C' F024'        	movff	vfpfcnvrt@convarg+3,dtoa@d+3
  2544  0106' C04D' F025'        	movff	vfpfcnvrt@convarg+4,dtoa@d+4
  2545  010A' C04E' F026'        	movff	vfpfcnvrt@convarg+5,dtoa@d+5
  2546  010E' C04F' F027'        	movff	vfpfcnvrt@convarg+6,dtoa@d+6
  2547  0112' C050' F028'        	movff	vfpfcnvrt@convarg+7,dtoa@d+7
  2548  0116' EC00' F000'        	call	_dtoa	;wreg free
  2549  011A' EF00' F000'        	goto	l1280
  2550  011E'                    l5605:
  2551                           
  2552                           ; BSR set to: 0
  2553                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1392:   cp = *fmt
      +                          ;
  2554  011E' C045' FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2555  0122' C046' FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2556  0126' CFDE F052'         	movff	postinc2,vfpfcnvrt@cp
  2557  012A' CFDD F053'         	movff	postdec2,vfpfcnvrt@cp+1
  2558  012E'                    
  2559                           ; BSR set to: 0
  2560                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1393:   c = *cp;
  2561  012E' C052' FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2562  0132' C053' FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  2563  0136'                    	if	0	;tblptru may be non-zero
  2564  0136'                    	endif
  2565  0136'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2566  0136' 0E00'              	movlw	low (__mediumconst shr (0+16))
  2567  0138' 6EF8               	movwf	tblptru,c
  2568  013A'                    	endif
  2569  013A' 0008               	tblrd		*
  2570  013C' CFF5 F051'         	movff	tablat,vfpfcnvrt@c
  2571                           
  2572                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1394:   switch(c)
      +                           {
  2573  0140' EF00' F000'        	goto	l5617
  2574  0144'                    l5609:
  2575                           
  2576                           ; BSR set to: 0
  2577                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1398:     cp++;
  2578  0144' 4B00'              	infsnz	vfpfcnvrt@cp& (0+255),f,b
  2579  0146' 2B00'              	incf	(vfpfcnvrt@cp+1)& (0+255),f,b
  2580                           
  2581                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1399:     break;
  2582  0148' EF00' F000'        	goto	l5619
  2583  014C'                    l5611:
  2584                           
  2585                           ; BSR set to: 0
  2586                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1424:     c = 'l'
      +                          ;
  2587  014C' 0E6C               	movlw	108
  2588  014E' 6F00'              	movwf	vfpfcnvrt@c& (0+255),b
  2589                           
  2590                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1425:     break;
  2591  0150' EF00' F000'        	goto	l5619
  2592  0154'                    l5613:
  2593                           
  2594                           ; BSR set to: 0
  2595                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1427:     c = 0;
  2596  0154' 0E00               	movlw	0
  2597  0156' 6F00'              	movwf	vfpfcnvrt@c& (0+255),b
  2598                           
  2599                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1428:     break;
  2600  0158' EF00' F000'        	goto	l5619
  2601  015C'                    l5617:
  2602                           
  2603                           ; BSR set to: 0
  2604  015C' 5100'              	movf	vfpfcnvrt@c& (0+255),w,b
  2605  015E' 6E00'              	movwf	??_vfpfcnvrt^0,c
  2606  0160' 6A00'              	clrf	(??_vfpfcnvrt+1)^0,c
  2607                           
  2608                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2609                           ; Switch size 1, requested type "simple"
  2610                           ; Number of cases is 1, Range of values is 0 to 0
  2611                           ; switch strategies available:
  2612                           ; Name         Instructions Cycles
  2613                           ; simple_byte            4     3 (average)
  2614                           ;	Chosen strategy is simple_byte
  2615  0162' 5000'              	movf	(??_vfpfcnvrt+1)^0,w,c
  2616  0164' 0A00               	xorlw	0	; case 0
  2617  0166' B4D8               	btfsc	status,2,c
  2618  0168' EF00' F000'        	goto	l5997
  2619  016C' EF00' F000'        	goto	l5613
  2620  0170'                    l5997:
  2621                           
  2622                           ; BSR set to: 0
  2623                           ; Switch size 1, requested type "simple"
  2624                           ; Number of cases is 3, Range of values is 76 to 108
  2625                           ; switch strategies available:
  2626                           ; Name         Instructions Cycles
  2627                           ; simple_byte           10     6 (average)
  2628                           ;	Chosen strategy is simple_byte
  2629  0170' 5000'              	movf	??_vfpfcnvrt^0,w,c
  2630  0172' 0A4C               	xorlw	76	; case 76
  2631  0174' B4D8               	btfsc	status,2,c
  2632  0176' EF00' F000'        	goto	l5609
  2633  017A' 0A2A               	xorlw	42	; case 102
  2634  017C' B4D8               	btfsc	status,2,c
  2635  017E' EF00' F000'        	goto	l5611
  2636  0182' 0A0A               	xorlw	10	; case 108
  2637  0184' B4D8               	btfsc	status,2,c
  2638  0186' EF00' F000'        	goto	l5609
  2639  018A' EF00' F000'        	goto	l5613
  2640  018E'                    l5619:
  2641                           
  2642                           ; BSR set to: 0
  2643  018E' C052' FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2644  0192' C053' FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  2645  0196'                    	if	0	;tblptru may be non-zero
  2646  0196'                    	endif
  2647  0196'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2648  0196' 0E00'              	movlw	low (__mediumconst shr (0+16))
  2649  0198' 6EF8               	movwf	tblptru,c
  2650  019A'                    	endif
  2651  019A' 0008               	tblrd		*
  2652  019C' 50F5               	movf	tablat,w,c
  2653  019E' 0A66               	xorlw	102
  2654  01A0' A4D8               	btfss	status,2,c
  2655  01A2' EF00' F000'        	goto	u6271
  2656  01A6' EF00' F000'        	goto	u6270
  2657  01AA'                    u6271:
  2658  01AA' EF00' F000'        	goto	l5639
  2659  01AE'                    u6270:
  2660  01AE' EF00' F000'        	goto	l5627
  2661  01B2'                    l5621:
  2662                           
  2663                           ; BSR set to: 0
  2664                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1459:      convar
      +                          g.f = (long double)(*(double *)__va_arg(*(double **)ap, (double)0));
  2665  01B2' C047' FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2666  01B6' C048' FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2667  01BA' CFDF F054'         	movff	indf2,??_vfpfcnvrt
  2668  01BE' 0E04               	movlw	4
  2669  01C0' 26DE               	addwf	postinc2,f,c
  2670  01C2' CFDF F055'         	movff	indf2,??_vfpfcnvrt+1
  2671  01C6' 0E00               	movlw	0
  2672  01C8' 22DD               	addwfc	postdec2,f,c
  2673  01CA' C054' FFD9         	movff	??_vfpfcnvrt,fsr2l
  2674  01CE' C055' FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2675  01D2' CFDE F049'         	movff	postinc2,vfpfcnvrt@convarg
  2676  01D6' CFDE F04A'         	movff	postinc2,vfpfcnvrt@convarg+1
  2677  01DA' CFDE F04B'         	movff	postinc2,vfpfcnvrt@convarg+2
  2678  01DE' CFDE F04C'         	movff	postinc2,vfpfcnvrt@convarg+3
  2679                           
  2680                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1460:      break;
  2681  01E2' EF00' F000'        	goto	l5629
  2682  01E6'                    l5623:
  2683                           
  2684                           ; BSR set to: 0
  2685                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1462:      convar
      +                          g.f = (long double)(*(long double *)__va_arg(*(long double **)ap, (long double)0));
  2686  01E6' C047' FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2687  01EA' C048' FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2688  01EE' CFDF F054'         	movff	indf2,??_vfpfcnvrt
  2689  01F2' 0E04               	movlw	4
  2690  01F4' 26DE               	addwf	postinc2,f,c
  2691  01F6' CFDF F055'         	movff	indf2,??_vfpfcnvrt+1
  2692  01FA' 0E00               	movlw	0
  2693  01FC' 22DD               	addwfc	postdec2,f,c
  2694  01FE' C054' FFD9         	movff	??_vfpfcnvrt,fsr2l
  2695  0202' C055' FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2696  0206' CFDE F049'         	movff	postinc2,vfpfcnvrt@convarg
  2697  020A' CFDE F04A'         	movff	postinc2,vfpfcnvrt@convarg+1
  2698  020E' CFDE F04B'         	movff	postinc2,vfpfcnvrt@convarg+2
  2699  0212' CFDE F04C'         	movff	postinc2,vfpfcnvrt@convarg+3
  2700                           
  2701                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1463:      break;
  2702  0216' EF00' F000'        	goto	l5629
  2703  021A'                    l5627:
  2704                           
  2705                           ; BSR set to: 0
  2706  021A' 5100'              	movf	vfpfcnvrt@c& (0+255),w,b
  2707  021C' 6E00'              	movwf	??_vfpfcnvrt^0,c
  2708  021E' 6A00'              	clrf	(??_vfpfcnvrt+1)^0,c
  2709                           
  2710                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2711                           ; Switch size 1, requested type "simple"
  2712                           ; Number of cases is 1, Range of values is 0 to 0
  2713                           ; switch strategies available:
  2714                           ; Name         Instructions Cycles
  2715                           ; simple_byte            4     3 (average)
  2716                           ;	Chosen strategy is simple_byte
  2717  0220' 5000'              	movf	(??_vfpfcnvrt+1)^0,w,c
  2718  0222' 0A00               	xorlw	0	; case 0
  2719  0224' B4D8               	btfsc	status,2,c
  2720  0226' EF00' F000'        	goto	l5999
  2721  022A' EF00' F000'        	goto	l5629
  2722  022E'                    l5999:
  2723                           
  2724                           ; BSR set to: 0
  2725                           ; Switch size 1, requested type "simple"
  2726                           ; Number of cases is 2, Range of values is 76 to 108
  2727                           ; switch strategies available:
  2728                           ; Name         Instructions Cycles
  2729                           ; simple_byte            7     4 (average)
  2730                           ;	Chosen strategy is simple_byte
  2731  022E' 5000'              	movf	??_vfpfcnvrt^0,w,c
  2732  0230' 0A4C               	xorlw	76	; case 76
  2733  0232' B4D8               	btfsc	status,2,c
  2734  0234' EF00' F000'        	goto	l5623
  2735  0238' 0A20               	xorlw	32	; case 108
  2736  023A' B4D8               	btfsc	status,2,c
  2737  023C' EF00' F000'        	goto	l5621
  2738  0240' EF00' F000'        	goto	l5629
  2739  0244'                    l5629:
  2740                           
  2741                           ; BSR set to: 0
  2742                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1465:    *fmt = c
      +                          p+1;
  2743  0244' 0E01               	movlw	1
  2744  0246' 2500'              	addwf	vfpfcnvrt@cp& (0+255),w,b
  2745  0248' 6E00'              	movwf	??_vfpfcnvrt^0,c
  2746  024A' 0E00               	movlw	0
  2747  024C' 2100'              	addwfc	(vfpfcnvrt@cp+1)& (0+255),w,b
  2748  024E' 6E00'              	movwf	(??_vfpfcnvrt+1)^0,c
  2749  0250' C045' FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2750  0254' C046' FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2751  0258' C054' FFDE         	movff	??_vfpfcnvrt,postinc2
  2752  025C' C055' FFDD         	movff	??_vfpfcnvrt+1,postdec2
  2753                           
  2754                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1466:    switch (
      +                          *cp) {
  2755  0260' EF00' F000'        	goto	l5637
  2756  0264'                    l5631:
  2757                           
  2758                           ; BSR set to: 0
  2759                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1493:      return
      +                           (void) efgtoa(fp, convarg.f, *cp);;	Return value of _vfpfcnvrt is never used
  2760  0264' C043' F010'        	movff	vfpfcnvrt@fp,efgtoa@fp
  2761  0268' C044' F011'        	movff	vfpfcnvrt@fp+1,efgtoa@fp+1
  2762  026C' C049' F012'        	movff	vfpfcnvrt@convarg,efgtoa@f
  2763  0270' C04A' F013'        	movff	vfpfcnvrt@convarg+1,efgtoa@f+1
  2764  0274' C04B' F014'        	movff	vfpfcnvrt@convarg+2,efgtoa@f+2
  2765  0278' C04C' F015'        	movff	vfpfcnvrt@convarg+3,efgtoa@f+3
  2766  027C' C052' FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2767  0280' C053' FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  2768  0284'                    	if	0	;tblptru may be non-zero
  2769  0284'                    	endif
  2770  0284'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2771  0284' 0E00'              	movlw	low (__mediumconst shr (0+16))
  2772  0286' 6EF8               	movwf	tblptru,c
  2773  0288'                    	endif
  2774  0288' 0008               	tblrd		*
  2775  028A' CFF5 F016'         	movff	tablat,efgtoa@c
  2776  028E' EC00' F000'        	call	_efgtoa	;wreg free
  2777  0292' EF00' F000'        	goto	l1280
  2778  0296'                    l5637:
  2779                           
  2780                           ; BSR set to: 0
  2781  0296' C052' FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2782  029A' C053' FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  2783  029E'                    	if	0	;tblptru may be non-zero
  2784  029E'                    	endif
  2785  029E'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2786  029E' 0E00'              	movlw	low (__mediumconst shr (0+16))
  2787  02A0' 6EF8               	movwf	tblptru,c
  2788  02A2'                    	endif
  2789  02A2' 0008               	tblrd		*
  2790  02A4' 50F5               	movf	tablat,w,c
  2791  02A6' 6E00'              	movwf	??_vfpfcnvrt^0,c
  2792  02A8' 6A00'              	clrf	(??_vfpfcnvrt+1)^0,c
  2793                           
  2794                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2795                           ; Switch size 1, requested type "simple"
  2796                           ; Number of cases is 1, Range of values is 0 to 0
  2797                           ; switch strategies available:
  2798                           ; Name         Instructions Cycles
  2799                           ; simple_byte            4     3 (average)
  2800                           ;	Chosen strategy is simple_byte
  2801  02AA' 5000'              	movf	(??_vfpfcnvrt+1)^0,w,c
  2802  02AC' 0A00               	xorlw	0	; case 0
  2803  02AE' B4D8               	btfsc	status,2,c
  2804  02B0' EF00' F000'        	goto	l6001
  2805  02B4' EF00' F000'        	goto	l5639
  2806  02B8'                    l6001:
  2807                           
  2808                           ; BSR set to: 0
  2809                           ; Switch size 1, requested type "simple"
  2810                           ; Number of cases is 1, Range of values is 102 to 102
  2811                           ; switch strategies available:
  2812                           ; Name         Instructions Cycles
  2813                           ; simple_byte            4     3 (average)
  2814                           ;	Chosen strategy is simple_byte
  2815  02B8' 5000'              	movf	??_vfpfcnvrt^0,w,c
  2816  02BA' 0A66               	xorlw	102	; case 102
  2817  02BC' B4D8               	btfsc	status,2,c
  2818  02BE' EF00' F000'        	goto	l5631
  2819  02C2' EF00' F000'        	goto	l5639
  2820  02C6'                    l5639:
  2821                           
  2822                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1509:         ++*
      +                          fmt;
  2823  02C6' C045' FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2824  02CA' C046' FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2825  02CE' 2ADE               	incf	postinc2,f,c
  2826  02D0' 0E00               	movlw	0
  2827  02D2' 22DD               	addwfc	postdec2,f,c
  2828  02D4' EF00' F000'        	goto	l1280
  2829  02D8'                    l5643:
  2830                           
  2831                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1514:     fputc((
      +                          int)(*fmt)[0], fp);
  2832  02D8' C045' FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2833  02DC' C046' FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2834  02E0' CFDE FFF6          	movff	postinc2,tblptrl
  2835  02E4' CFDD FFF7          	movff	postdec2,tblptrh
  2836  02E8'                    	if	0	;tblptru may be non-zero
  2837  02E8'                    	endif
  2838  02E8'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2839  02E8' 0E00'              	movlw	low (__mediumconst shr (0+16))
  2840  02EA' 6EF8               	movwf	tblptru,c
  2841  02EC'                    	endif
  2842  02EC' 0008               	tblrd		*
  2843  02EE' 50F5               	movf	tablat,w,c
  2844  02F0' 6E00'              	movwf	fputc@c^0,c
  2845  02F2' 6A00'              	clrf	(fputc@c+1)^0,c
  2846  02F4' C043' F006'        	movff	vfpfcnvrt@fp,fputc@fp
  2847  02F8' C044' F007'        	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2848  02FC' EC00' F000'        	call	_fputc	;wreg free
  2849  0300' EF00' F000'        	goto	l5639
  2850  0304'                    l1280:
  2851  0304' 0012               	return		;funcret
  2852  0306'                    __end_of_vfpfcnvrt:
  2853                           	callstack 0
  2854                           
  2855 ;; *************** function _efgtoa *****************
  2856 ;; Defined at:
  2857 ;;		line 506 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2858 ;; Parameters:    Size  Location     Type
  2859 ;;  fp              2   16[BANK0 ] PTR struct _IO_FILE
  2860 ;;		 -> sprintf@f(11), 
  2861 ;;  f               4   18[BANK0 ] PTR struct _IO_FILE
  2862 ;;  c               1   22[BANK0 ] unsigned char 
  2863 ;; Auto vars:     Size  Location     Type
  2864 ;;  u               4   63[BANK0 ] struct flui
  2865 ;;  g               4   57[BANK0 ] struct flui
  2866 ;;  l               4   52[BANK0 ] struct flui
  2867 ;;  h               4   48[BANK0 ] struct flui
  2868 ;;  ou              4   42[BANK0 ] struct flui
  2869 ;;  n               2   61[BANK0 ] int 
  2870 ;;  i               2   46[BANK0 ] int 
  2871 ;;  w               2   40[BANK0 ] int 
  2872 ;;  e               2   38[BANK0 ] int 
  2873 ;;  m               2   36[BANK0 ] int 
  2874 ;;  d               2   34[BANK0 ] int 
  2875 ;;  t               2   27[BANK0 ] int 
  2876 ;;  p               2   25[BANK0 ] int 
  2877 ;;  ne              2   23[BANK0 ] int 
  2878 ;;  sign            1   56[BANK0 ] unsigned char 
  2879 ;;  nmode           1   33[BANK0 ] unsigned char 
  2880 ;;  mode            1   32[BANK0 ] unsigned char 
  2881 ;;  pp              1   31[BANK0 ] unsigned char 
  2882 ;;  esign           1    0        unsigned char 
  2883 ;; Return value:  Size  Location     Type
  2884 ;;                  1    wreg      void 
  2885 ;; Registers used:
  2886 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2887 ;; Tracked objects:
  2888 ;;		On entry : 0/0
  2889 ;;		On exit  : 0/0
  2890 ;;		Unchanged: 0/0
  2891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2892 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2893 ;;      Locals:         0      44       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2894 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2895 ;;      Totals:         2      51       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2896 ;;Total ram usage:       53 bytes
  2897 ;; Hardware stack levels used: 1
  2898 ;; Hardware stack levels required when called: 6
  2899 ;; This function calls:
  2900 ;;		___fladd
  2901 ;;		___fldiv
  2902 ;;		___fleq
  2903 ;;		___flge
  2904 ;;		___flmul
  2905 ;;		___flneg
  2906 ;;		___flsub
  2907 ;;		___fltol
  2908 ;;		___fpclassifyf
  2909 ;;		_floorf
  2910 ;;		_labs
  2911 ;;		_memcpy
  2912 ;;		_pad
  2913 ;;		_strcpy
  2914 ;; This function is called by:
  2915 ;;		_vfpfcnvrt
  2916 ;; This function uses a non-reentrant model
  2917 ;;
  2918                           
  2919                           	psect	text9
  2920  0000'                    __ptext9:
  2921                           	callstack 0
  2922  0000'                    _efgtoa:
  2923                           	callstack 21
  2924  0000'                    
  2925                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 506: static void 
      +                          efgtoa(FILE *fp, long double f, char c);C:\Program Files\Microchip\xc8\v2.40\pic\sources
      +                          \c99\common\doprnt.c: 507: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 508:     char mode, nmode, pp, sign, esign;;C:\Program Files\Microchip\xc8\v2
      +                          .40\pic\sources\c99\common\doprnt.c: 509:     int d, e, i, m, n, ne, p, t, w;;C:\Program
      +                           Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 510:     long double h, l;
  2926  0000' 0E00               	movlw	0
  2927  0002' 0100               	movlb	0	; () banked
  2928  0004' 6F00'              	movwf	efgtoa@sign& (0+255),b
  2929  0006'                    
  2930                           ; BSR set to: 0
  2931                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 515:     g.f = f;
  2932  0006' C012' F039'        	movff	efgtoa@f,efgtoa@g
  2933  000A' C013' F03A'        	movff	efgtoa@f+1,efgtoa@g+1
  2934  000E' C014' F03B'        	movff	efgtoa@f+2,efgtoa@g+2
  2935  0012' C015' F03C'        	movff	efgtoa@f+3,efgtoa@g+3
  2936  0016'                    
  2937                           ; BSR set to: 0
  2938                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 516:     if (g.f 
      +                          < 0.0) {
  2939  0016' BF00'              	btfsc	(efgtoa@g+3)& (0+255),7,b
  2940  0018' EF00' F000'        	goto	u5920
  2941  001C' EF00' F000'        	goto	u5921
  2942  0020'                    u5921:
  2943  0020' EF00' F000'        	goto	l5373
  2944  0024'                    u5920:
  2945  0024'                    
  2946                           ; BSR set to: 0
  2947                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 517:         sign
      +                           = 1;
  2948  0024' 0E01               	movlw	1
  2949  0026' 6F00'              	movwf	efgtoa@sign& (0+255),b
  2950  0028'                    
  2951                           ; BSR set to: 0
  2952                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 518:         g.f 
      +                          = -g.f;
  2953  0028' C039' F004'        	movff	efgtoa@g,___flneg@f1
  2954  002C' C03A' F005'        	movff	efgtoa@g+1,___flneg@f1+1
  2955  0030' C03B' F006'        	movff	efgtoa@g+2,___flneg@f1+2
  2956  0034' C03C' F007'        	movff	efgtoa@g+3,___flneg@f1+3
  2957  0038' EC00' F000'        	call	___flneg	;wreg free
  2958  003C' C004' F039'        	movff	?___flneg,efgtoa@g
  2959  0040' C005' F03A'        	movff	?___flneg+1,efgtoa@g+1
  2960  0044' C006' F03B'        	movff	?___flneg+2,efgtoa@g+2
  2961  0048' C007' F03C'        	movff	?___flneg+3,efgtoa@g+3
  2962  004C'                    l5373:
  2963                           
  2964                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 522:     n = 0;
  2965  004C' 0E00               	movlw	0
  2966  004E' 0100               	movlb	0	; () banked
  2967  0050' 6F00'              	movwf	(efgtoa@n+1)& (0+255),b
  2968  0052' 0E00               	movlw	0
  2969  0054' 6F00'              	movwf	efgtoa@n& (0+255),b
  2970  0056'                    
  2971                           ; BSR set to: 0
  2972                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 523:     w = widt
      +                          h;
  2973  0056' C01C' F028'        	movff	_width,efgtoa@w
  2974  005A' C01D' F029'        	movff	_width+1,efgtoa@w+1
  2975  005E'                    
  2976                           ; BSR set to: 0
  2977                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 524:     if (sign
  2978  005E' 5100'              	movf	efgtoa@sign& (0+255),w,b
  2979  0060' B4D8               	btfsc	status,2,c
  2980  0062' EF00' F000'        	goto	u5931
  2981  0066' EF00' F000'        	goto	u5930
  2982  006A'                    u5931:
  2983  006A' EF00' F000'        	goto	l5387
  2984  006E'                    u5930:
  2985  006E'                    
  2986                           ; BSR set to: 0
  2987                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 528:    ) {;C:\Pr
      +                          ogram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 529:   sign = sign ? '-
      +                          ' : '+';
  2988  006E' 5100'              	movf	efgtoa@sign& (0+255),w,b
  2989  0070' A4D8               	btfss	status,2,c
  2990  0072' EF00' F000'        	goto	u5941
  2991  0076' EF00' F000'        	goto	u5940
  2992  007A'                    u5941:
  2993  007A' EF00' F000'        	goto	l5383
  2994  007E'                    u5940:
  2995  007E'                    
  2996                           ; BSR set to: 0
  2997  007E' 0E00               	movlw	0
  2998  0080' 6F00'              	movwf	(_efgtoa$2693+1)& (0+255),b
  2999  0082' 0E2B               	movlw	43
  3000  0084' 6F00'              	movwf	_efgtoa$2693& (0+255),b
  3001  0086' EF00' F000'        	goto	l5385
  3002  008A'                    l5383:
  3003                           
  3004                           ; BSR set to: 0
  3005  008A' 0E00               	movlw	0
  3006  008C' 6F00'              	movwf	(_efgtoa$2693+1)& (0+255),b
  3007  008E' 0E2D               	movlw	45
  3008  0090' 6F00'              	movwf	_efgtoa$2693& (0+255),b
  3009  0092'                    l5385:
  3010                           
  3011                           ; BSR set to: 0
  3012  0092' C01D' F038'        	movff	_efgtoa$2693,efgtoa@sign
  3013  0096'                    l5387:
  3014                           
  3015                           ; BSR set to: 0
  3016                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 538:     if (( __
      +                          fpclassifyf(g.f) == 1 )) {
  3017  0096' C039' F004'        	movff	efgtoa@g,___fpclassifyf@x
  3018  009A' C03A' F005'        	movff	efgtoa@g+1,___fpclassifyf@x+1
  3019  009E' C03B' F006'        	movff	efgtoa@g+2,___fpclassifyf@x+2
  3020  00A2' C03C' F007'        	movff	efgtoa@g+3,___fpclassifyf@x+3
  3021  00A6' EC00' F000'        	call	___fpclassifyf	;wreg free
  3022  00AA' 0400'              	decf	?___fpclassifyf^0,w,c
  3023  00AC' 1000'              	iorwf	(?___fpclassifyf+1)^0,w,c
  3024  00AE' A4D8               	btfss	status,2,c
  3025  00B0' EF00' F000'        	goto	u5951
  3026  00B4' EF00' F000'        	goto	u5950
  3027  00B8'                    u5951:
  3028  00B8' EF00' F000'        	goto	l5405
  3029  00BC'                    u5950:
  3030  00BC'                    
  3031                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 539:   if (sign) 
      +                          {
  3032  00BC' 0100               	movlb	0	; () banked
  3033  00BE' 5100'              	movf	efgtoa@sign& (0+255),w,b
  3034  00C0' B4D8               	btfsc	status,2,c
  3035  00C2' EF00' F000'        	goto	u5961
  3036  00C6' EF00' F000'        	goto	u5960
  3037  00CA'                    u5961:
  3038  00CA' EF00' F000'        	goto	l5397
  3039  00CE'                    u5960:
  3040  00CE'                    
  3041                           ; BSR set to: 0
  3042                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 540:    dbuf[0] =
      +                           sign;
  3043  00CE' C038' F03C'        	movff	efgtoa@sign,_dbuf
  3044  00D2'                    
  3045                           ; BSR set to: 0
  3046                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 541:    w--;
  3047  00D2' 0700'              	decf	efgtoa@w& (0+255),f,b
  3048  00D4' A0D8               	btfss	status,0,c
  3049  00D6' 0700'              	decf	(efgtoa@w+1)& (0+255),f,b
  3050  00D8'                    
  3051                           ; BSR set to: 0
  3052                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 542:    n = 1;
  3053  00D8' 0E00               	movlw	0
  3054  00DA' 6F00'              	movwf	(efgtoa@n+1)& (0+255),b
  3055  00DC' 0E01               	movlw	1
  3056  00DE' 6F00'              	movwf	efgtoa@n& (0+255),b
  3057  00E0'                    l5397:
  3058                           
  3059                           ; BSR set to: 0
  3060                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 550:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 551:             strcpy(&d
      +                          buf[n], "inf");
  3061  00E0' 0E00'              	movlw	low _dbuf
  3062  00E2' 2500'              	addwf	efgtoa@n& (0+255),w,b
  3063  00E4' 6E00'              	movwf	strcpy@dest^0,c
  3064  00E6' 0E00'              	movlw	high _dbuf
  3065  00E8' 2100'              	addwfc	(efgtoa@n+1)& (0+255),w,b
  3066  00EA' 6E00'              	movwf	(strcpy@dest+1)^0,c
  3067  00EC' 0E00'              	movlw	low STR_2
  3068  00EE' 6E00'              	movwf	strcpy@src^0,c
  3069  00F0' 0E00'              	movlw	high STR_2
  3070  00F2' 6E00'              	movwf	(strcpy@src+1)^0,c
  3071  00F4' EC00' F000'        	call	_strcpy	;wreg free
  3072  00F8'                    l5399:
  3073                           
  3074                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 552:         };C:
      +                          \Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 553:         w -= ((
      +                          sizeof("inf")/sizeof("inf"[0]))-1);
  3075  00F8' 0100               	movlb	0	; () banked
  3076  00FA' 0EFD               	movlw	253
  3077  00FC' 2700'              	addwf	efgtoa@w& (0+255),f,b
  3078  00FE' 0EFF               	movlw	255
  3079  0100' 2300'              	addwfc	(efgtoa@w+1)& (0+255),f,b
  3080  0102'                    
  3081                           ; BSR set to: 0
  3082                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 554:         retu
      +                          rn (void) pad(fp, &dbuf[0], w);
  3083  0102' C010' F014'        	movff	efgtoa@fp,pad@fp
  3084  0106' C011' F015'        	movff	efgtoa@fp+1,pad@fp+1
  3085  010A' 0E00'              	movlw	low _dbuf
  3086  010C' 6E00'              	movwf	pad@buf^0,c
  3087  010E' 0E00'              	movlw	high _dbuf
  3088  0110' 6E00'              	movwf	(pad@buf+1)^0,c
  3089  0112' C028' F018'        	movff	efgtoa@w,pad@p
  3090  0116' C029' F019'        	movff	efgtoa@w+1,pad@p+1
  3091  011A' EC00' F000'        	call	_pad	;wreg free
  3092  011E' EF00' F000'        	goto	l1232
  3093  0122'                    l5405:
  3094                           
  3095                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 556:     if (( __
      +                          fpclassifyf(g.f) == 0 )) {
  3096  0122' C039' F004'        	movff	efgtoa@g,___fpclassifyf@x
  3097  0126' C03A' F005'        	movff	efgtoa@g+1,___fpclassifyf@x+1
  3098  012A' C03B' F006'        	movff	efgtoa@g+2,___fpclassifyf@x+2
  3099  012E' C03C' F007'        	movff	efgtoa@g+3,___fpclassifyf@x+3
  3100  0132' EC00' F000'        	call	___fpclassifyf	;wreg free
  3101  0136' 5000'              	movf	?___fpclassifyf^0,w,c
  3102  0138' 1000'              	iorwf	(?___fpclassifyf+1)^0,w,c
  3103  013A' A4D8               	btfss	status,2,c
  3104  013C' EF00' F000'        	goto	u5971
  3105  0140' EF00' F000'        	goto	u5970
  3106  0144'                    u5971:
  3107  0144' EF00' F000'        	goto	l5423
  3108  0148'                    u5970:
  3109  0148'                    
  3110                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 557:   if (sign) 
      +                          {
  3111  0148' 0100               	movlb	0	; () banked
  3112  014A' 5100'              	movf	efgtoa@sign& (0+255),w,b
  3113  014C' B4D8               	btfsc	status,2,c
  3114  014E' EF00' F000'        	goto	u5981
  3115  0152' EF00' F000'        	goto	u5980
  3116  0156'                    u5981:
  3117  0156' EF00' F000'        	goto	l5415
  3118  015A'                    u5980:
  3119  015A'                    
  3120                           ; BSR set to: 0
  3121                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 558:    dbuf[0] =
      +                           sign;
  3122  015A' C038' F03C'        	movff	efgtoa@sign,_dbuf
  3123  015E'                    
  3124                           ; BSR set to: 0
  3125                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 559:    w--;
  3126  015E' 0700'              	decf	efgtoa@w& (0+255),f,b
  3127  0160' A0D8               	btfss	status,0,c
  3128  0162' 0700'              	decf	(efgtoa@w+1)& (0+255),f,b
  3129  0164'                    
  3130                           ; BSR set to: 0
  3131                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 560:    n = 1;
  3132  0164' 0E00               	movlw	0
  3133  0166' 6F00'              	movwf	(efgtoa@n+1)& (0+255),b
  3134  0168' 0E01               	movlw	1
  3135  016A' 6F00'              	movwf	efgtoa@n& (0+255),b
  3136  016C'                    l5415:
  3137                           
  3138                           ; BSR set to: 0
  3139                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 568:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 569:             strcpy(&d
      +                          buf[n], "nan");
  3140  016C' 0E00'              	movlw	low _dbuf
  3141  016E' 2500'              	addwf	efgtoa@n& (0+255),w,b
  3142  0170' 6E00'              	movwf	strcpy@dest^0,c
  3143  0172' 0E00'              	movlw	high _dbuf
  3144  0174' 2100'              	addwfc	(efgtoa@n+1)& (0+255),w,b
  3145  0176' 6E00'              	movwf	(strcpy@dest+1)^0,c
  3146  0178' 0E00'              	movlw	low STR_5
  3147  017A' 6E00'              	movwf	strcpy@src^0,c
  3148  017C' 0E00'              	movlw	high STR_5
  3149  017E' 6E00'              	movwf	(strcpy@src+1)^0,c
  3150  0180' EC00' F000'        	call	_strcpy	;wreg free
  3151  0184' EF00' F000'        	goto	l5399
  3152  0188'                    l5423:
  3153                           
  3154                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 576:     u.f = 1.
      +                          0;
  3155  0188' 0E00               	movlw	0
  3156  018A' 0100               	movlb	0	; () banked
  3157  018C' 6F00'              	movwf	efgtoa@u& (0+255),b
  3158  018E' 0E00               	movlw	0
  3159  0190' 6F00'              	movwf	(efgtoa@u+1)& (0+255),b
  3160  0192' 0E80               	movlw	128
  3161  0194' 6F00'              	movwf	(efgtoa@u+2)& (0+255),b
  3162  0196' 0E3F               	movlw	63
  3163  0198' 6F00'              	movwf	(efgtoa@u+3)& (0+255),b
  3164                           
  3165                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 577:     e = 0;
  3166  019A' 0E00               	movlw	0
  3167  019C' 6F00'              	movwf	(efgtoa@e+1)& (0+255),b
  3168  019E' 0E00               	movlw	0
  3169  01A0' 6F00'              	movwf	efgtoa@e& (0+255),b
  3170  01A2'                    
  3171                           ; BSR set to: 0
  3172                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 578:  if (!(g.f =
      +                          = 0.0)) {
  3173  01A2' C039' F004'        	movff	efgtoa@g,___fleq@ff1
  3174  01A6' C03A' F005'        	movff	efgtoa@g+1,___fleq@ff1+1
  3175  01AA' C03B' F006'        	movff	efgtoa@g+2,___fleq@ff1+2
  3176  01AE' C03C' F007'        	movff	efgtoa@g+3,___fleq@ff1+3
  3177  01B2' 0E00               	movlw	0
  3178  01B4' 6E00'              	movwf	___fleq@ff2^0,c
  3179  01B6' 0E00               	movlw	0
  3180  01B8' 6E00'              	movwf	(___fleq@ff2+1)^0,c
  3181  01BA' 0E00               	movlw	0
  3182  01BC' 6E00'              	movwf	(___fleq@ff2+2)^0,c
  3183  01BE' 0E00               	movlw	0
  3184  01C0' 6E00'              	movwf	(___fleq@ff2+3)^0,c
  3185  01C2' EC00' F000'        	call	___fleq	;wreg free
  3186  01C6' B0D8               	btfsc	status,0,c
  3187  01C8' EF00' F000'        	goto	u5991
  3188  01CC' EF00' F000'        	goto	u5990
  3189  01D0'                    u5991:
  3190  01D0' EF00' F000'        	goto	l1235
  3191  01D4'                    u5990:
  3192  01D4' EF00' F000'        	goto	l5431
  3193  01D8'                    l1237:
  3194                           
  3195                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 580:    u = ou;
  3196  01D8' C02A' F03F'        	movff	efgtoa@ou,efgtoa@u
  3197  01DC' C02B' F040'        	movff	efgtoa@ou+1,efgtoa@u+1
  3198  01E0' C02C' F041'        	movff	efgtoa@ou+2,efgtoa@u+2
  3199  01E4' C02D' F042'        	movff	efgtoa@ou+3,efgtoa@u+3
  3200  01E8'                    
  3201                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 581:    ++e;
  3202  01E8' 0100               	movlb	0	; () banked
  3203  01EA' 4B00'              	infsnz	efgtoa@e& (0+255),f,b
  3204  01EC' 2B00'              	incf	(efgtoa@e+1)& (0+255),f,b
  3205  01EE'                    l5431:
  3206                           
  3207                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 579:   while ((la
      +                          bs((g).u-((ou.f = u.f*10.0,ou)).u) <= 1) || g.f > ou.f) {
  3208  01EE' C03F' F014'        	movff	efgtoa@u,___flmul@b
  3209  01F2' C040' F015'        	movff	efgtoa@u+1,___flmul@b+1
  3210  01F6' C041' F016'        	movff	efgtoa@u+2,___flmul@b+2
  3211  01FA' C042' F017'        	movff	efgtoa@u+3,___flmul@b+3
  3212  01FE' 0E00               	movlw	0
  3213  0200' 6E00'              	movwf	___flmul@a^0,c
  3214  0202' 0E00               	movlw	0
  3215  0204' 6E00'              	movwf	(___flmul@a+1)^0,c
  3216  0206' 0E20               	movlw	32
  3217  0208' 6E00'              	movwf	(___flmul@a+2)^0,c
  3218  020A' 0E41               	movlw	65
  3219  020C' 6E00'              	movwf	(___flmul@a+3)^0,c
  3220  020E' EC00' F000'        	call	___flmul	;wreg free
  3221  0212' C014' F02A'        	movff	?___flmul,efgtoa@ou
  3222  0216' C015' F02B'        	movff	?___flmul+1,efgtoa@ou+1
  3223  021A' C016' F02C'        	movff	?___flmul+2,efgtoa@ou+2
  3224  021E' C017' F02D'        	movff	?___flmul+3,efgtoa@ou+3
  3225  0222' 0100               	movlb	0	; () banked
  3226  0224' 5100'              	movf	efgtoa@ou& (0+255),w,b
  3227  0226' 5D00'              	subwf	efgtoa@g& (0+255),w,b
  3228  0228' 6E00'              	movwf	labs@a^0,c
  3229  022A' 5100'              	movf	(efgtoa@ou+1)& (0+255),w,b
  3230  022C' 5900'              	subwfb	(efgtoa@g+1)& (0+255),w,b
  3231  022E' 6E00'              	movwf	(labs@a+1)^0,c
  3232  0230' 5100'              	movf	(efgtoa@ou+2)& (0+255),w,b
  3233  0232' 5900'              	subwfb	(efgtoa@g+2)& (0+255),w,b
  3234  0234' 6E00'              	movwf	(labs@a+2)^0,c
  3235  0236' 5100'              	movf	(efgtoa@ou+3)& (0+255),w,b
  3236  0238' 5900'              	subwfb	(efgtoa@g+3)& (0+255),w,b
  3237  023A' 6E00'              	movwf	(labs@a+3)^0,c
  3238  023C' EC00' F000'        	call	_labs	;wreg free
  3239  0240' BE00'              	btfsc	(?_labs+3)^0,7,c
  3240  0242' EF00' F000'        	goto	u6001
  3241  0246' 5000'              	movf	(?_labs+3)^0,w,c
  3242  0248' 1000'              	iorwf	(?_labs+2)^0,w,c
  3243  024A' 1000'              	iorwf	(?_labs+1)^0,w,c
  3244  024C' E109               	bnz	u6000
  3245  024E' 0E02               	movlw	2
  3246  0250' 5C00'              	subwf	?_labs^0,w,c
  3247  0252' A0D8               	btfss	status,0,c
  3248  0254' EF00' F000'        	goto	u6001
  3249  0258' EF00' F000'        	goto	u6000
  3250  025C'                    u6001:
  3251  025C' EF00' F000'        	goto	l1237
  3252  0260'                    u6000:
  3253  0260' C02A' F035'        	movff	efgtoa@ou,___flge@ff1
  3254  0264' C02B' F036'        	movff	efgtoa@ou+1,___flge@ff1+1
  3255  0268' C02C' F037'        	movff	efgtoa@ou+2,___flge@ff1+2
  3256  026C' C02D' F038'        	movff	efgtoa@ou+3,___flge@ff1+3
  3257  0270' C039' F039'        	movff	efgtoa@g,___flge@ff2
  3258  0274' C03A' F03A'        	movff	efgtoa@g+1,___flge@ff2+1
  3259  0278' C03B' F03B'        	movff	efgtoa@g+2,___flge@ff2+2
  3260  027C' C03C' F03C'        	movff	efgtoa@g+3,___flge@ff2+3
  3261  0280' EC00' F000'        	call	___flge	;wreg free
  3262  0284' A0D8               	btfss	status,0,c
  3263  0286' EF00' F000'        	goto	u6011
  3264  028A' EF00' F000'        	goto	u6010
  3265  028E'                    u6011:
  3266  028E' EF00' F000'        	goto	l1237
  3267  0292'                    u6010:
  3268  0292'                    
  3269                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 583:   if ((labs(
      +                          (g).u-(u).u) <= 1)) {
  3270  0292' 0100               	movlb	0	; () banked
  3271  0294' 5100'              	movf	efgtoa@u& (0+255),w,b
  3272  0296' 5D00'              	subwf	efgtoa@g& (0+255),w,b
  3273  0298' 6E00'              	movwf	labs@a^0,c
  3274  029A' 5100'              	movf	(efgtoa@u+1)& (0+255),w,b
  3275  029C' 5900'              	subwfb	(efgtoa@g+1)& (0+255),w,b
  3276  029E' 6E00'              	movwf	(labs@a+1)^0,c
  3277  02A0' 5100'              	movf	(efgtoa@u+2)& (0+255),w,b
  3278  02A2' 5900'              	subwfb	(efgtoa@g+2)& (0+255),w,b
  3279  02A4' 6E00'              	movwf	(labs@a+2)^0,c
  3280  02A6' 5100'              	movf	(efgtoa@u+3)& (0+255),w,b
  3281  02A8' 5900'              	subwfb	(efgtoa@g+3)& (0+255),w,b
  3282  02AA' 6E00'              	movwf	(labs@a+3)^0,c
  3283  02AC' EC00' F000'        	call	_labs	;wreg free
  3284  02B0' BE00'              	btfsc	(?_labs+3)^0,7,c
  3285  02B2' EF00' F000'        	goto	u6020
  3286  02B6' 5000'              	movf	(?_labs+3)^0,w,c
  3287  02B8' 1000'              	iorwf	(?_labs+2)^0,w,c
  3288  02BA' 1000'              	iorwf	(?_labs+1)^0,w,c
  3289  02BC' E107               	bnz	u6021
  3290  02BE' 0E02               	movlw	2
  3291  02C0' 5C00'              	subwf	?_labs^0,w,c
  3292  02C2' B0D8               	btfsc	status,0,c
  3293  02C4' EF00' F000'        	goto	u6021
  3294  02C8' EF00' F000'        	goto	u6020
  3295  02CC'                    u6021:
  3296  02CC' EF00' F000'        	goto	l5449
  3297  02D0'                    u6020:
  3298  02D0'                    l5439:
  3299                           
  3300                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 584:    g = u;
  3301  02D0' C03F' F039'        	movff	efgtoa@u,efgtoa@g
  3302  02D4' C040' F03A'        	movff	efgtoa@u+1,efgtoa@g+1
  3303  02D8' C041' F03B'        	movff	efgtoa@u+2,efgtoa@g+2
  3304  02DC' C042' F03C'        	movff	efgtoa@u+3,efgtoa@g+3
  3305                           
  3306                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 585:   }
  3307  02E0' EF00' F000'        	goto	l1235
  3308  02E4'                    l5441:
  3309                           
  3310                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 588:     u.f = u.
      +                          f/10.0;
  3311  02E4' C03F' F035'        	movff	efgtoa@u,___fldiv@b
  3312  02E8' C040' F036'        	movff	efgtoa@u+1,___fldiv@b+1
  3313  02EC' C041' F037'        	movff	efgtoa@u+2,___fldiv@b+2
  3314  02F0' C042' F038'        	movff	efgtoa@u+3,___fldiv@b+3
  3315  02F4' 0E00               	movlw	0
  3316  02F6' 6E00'              	movwf	___fldiv@a^0,c
  3317  02F8' 0E00               	movlw	0
  3318  02FA' 6E00'              	movwf	(___fldiv@a+1)^0,c
  3319  02FC' 0E20               	movlw	32
  3320  02FE' 6E00'              	movwf	(___fldiv@a+2)^0,c
  3321  0300' 0E41               	movlw	65
  3322  0302' 6E00'              	movwf	(___fldiv@a+3)^0,c
  3323  0304' EC00' F000'        	call	___fldiv	;wreg free
  3324  0308' C035' F03F'        	movff	?___fldiv,efgtoa@u
  3325  030C' C036' F040'        	movff	?___fldiv+1,efgtoa@u+1
  3326  0310' C037' F041'        	movff	?___fldiv+2,efgtoa@u+2
  3327  0314' C038' F042'        	movff	?___fldiv+3,efgtoa@u+3
  3328  0318'                    
  3329                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 589:     --e;
  3330  0318' 0100               	movlb	0	; () banked
  3331  031A' 0700'              	decf	efgtoa@e& (0+255),f,b
  3332  031C' A0D8               	btfss	status,0,c
  3333  031E' 0700'              	decf	(efgtoa@e+1)& (0+255),f,b
  3334  0320'                    
  3335                           ; BSR set to: 0
  3336                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 590:     if ((lab
      +                          s((g).u-(u).u) <= 1)) {
  3337  0320' 5100'              	movf	efgtoa@u& (0+255),w,b
  3338  0322' 5D00'              	subwf	efgtoa@g& (0+255),w,b
  3339  0324' 6E00'              	movwf	labs@a^0,c
  3340  0326' 5100'              	movf	(efgtoa@u+1)& (0+255),w,b
  3341  0328' 5900'              	subwfb	(efgtoa@g+1)& (0+255),w,b
  3342  032A' 6E00'              	movwf	(labs@a+1)^0,c
  3343  032C' 5100'              	movf	(efgtoa@u+2)& (0+255),w,b
  3344  032E' 5900'              	subwfb	(efgtoa@g+2)& (0+255),w,b
  3345  0330' 6E00'              	movwf	(labs@a+2)^0,c
  3346  0332' 5100'              	movf	(efgtoa@u+3)& (0+255),w,b
  3347  0334' 5900'              	subwfb	(efgtoa@g+3)& (0+255),w,b
  3348  0336' 6E00'              	movwf	(labs@a+3)^0,c
  3349  0338' EC00' F000'        	call	_labs	;wreg free
  3350  033C' BE00'              	btfsc	(?_labs+3)^0,7,c
  3351  033E' EF00' F000'        	goto	u6030
  3352  0342' 5000'              	movf	(?_labs+3)^0,w,c
  3353  0344' 1000'              	iorwf	(?_labs+2)^0,w,c
  3354  0346' 1000'              	iorwf	(?_labs+1)^0,w,c
  3355  0348' E107               	bnz	u6031
  3356  034A' 0E02               	movlw	2
  3357  034C' 5C00'              	subwf	?_labs^0,w,c
  3358  034E' B0D8               	btfsc	status,0,c
  3359  0350' EF00' F000'        	goto	u6031
  3360  0354' EF00' F000'        	goto	u6030
  3361  0358'                    u6031:
  3362  0358' EF00' F000'        	goto	l5449
  3363  035C'                    u6030:
  3364  035C' EF00' F000'        	goto	l5439
  3365  0360'                    l5449:
  3366                           
  3367                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 587:    while (g.
      +                          f < u.f) {
  3368  0360' C039' F035'        	movff	efgtoa@g,___flge@ff1
  3369  0364' C03A' F036'        	movff	efgtoa@g+1,___flge@ff1+1
  3370  0368' C03B' F037'        	movff	efgtoa@g+2,___flge@ff1+2
  3371  036C' C03C' F038'        	movff	efgtoa@g+3,___flge@ff1+3
  3372  0370' C03F' F039'        	movff	efgtoa@u,___flge@ff2
  3373  0374' C040' F03A'        	movff	efgtoa@u+1,___flge@ff2+1
  3374  0378' C041' F03B'        	movff	efgtoa@u+2,___flge@ff2+2
  3375  037C' C042' F03C'        	movff	efgtoa@u+3,___flge@ff2+3
  3376  0380' EC00' F000'        	call	___flge	;wreg free
  3377  0384' A0D8               	btfss	status,0,c
  3378  0386' EF00' F000'        	goto	u6041
  3379  038A' EF00' F000'        	goto	u6040
  3380  038E'                    u6041:
  3381  038E' EF00' F000'        	goto	l5441
  3382  0392'                    u6040:
  3383  0392'                    l1235:
  3384                           
  3385                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 602:  mode = c;
  3386  0392' C016' F020'        	movff	efgtoa@c,efgtoa@mode
  3387                           
  3388                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 604:     nmode = 
      +                          mode;
  3389  0396' C020' F021'        	movff	efgtoa@mode,efgtoa@nmode
  3390  039A'                    
  3391                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 614:  {;C:\Progra
      +                          m Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 615:         p = (prec < 0)
      +                           ? 6 : prec;
  3392  039A' 0100               	movlb	0	; () banked
  3393  039C' BF00'              	btfsc	(_prec+1)& (0+255),7,b
  3394  039E' EF00' F000'        	goto	u6051
  3395  03A2' EF00' F000'        	goto	u6050
  3396  03A6'                    u6051:
  3397  03A6' EF00' F000'        	goto	l5455
  3398  03AA'                    u6050:
  3399  03AA'                    
  3400                           ; BSR set to: 0
  3401  03AA' C01E' F019'        	movff	_prec,efgtoa@p
  3402  03AE' C01F' F01A'        	movff	_prec+1,efgtoa@p+1
  3403  03B2' EF00' F000'        	goto	l5457
  3404  03B6'                    l5455:
  3405                           
  3406                           ; BSR set to: 0
  3407  03B6' 0E00               	movlw	0
  3408  03B8' 6F00'              	movwf	(efgtoa@p+1)& (0+255),b
  3409  03BA' 0E06               	movlw	6
  3410  03BC' 6F00'              	movwf	efgtoa@p& (0+255),b
  3411  03BE'                    l5457:
  3412                           
  3413                           ; BSR set to: 0
  3414                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 616:     };C:\Pro
      +                          gram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 630:     m = p;
  3415  03BE' C019' F024'        	movff	efgtoa@p,efgtoa@m
  3416  03C2' C01A' F025'        	movff	efgtoa@p+1,efgtoa@m+1
  3417  03C6'                    
  3418                           ; BSR set to: 0
  3419                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 634:  {;C:\Progra
      +                          m Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 635:         ++m;
  3420  03C6' 4B00'              	infsnz	efgtoa@m& (0+255),f,b
  3421  03C8' 2B00'              	incf	(efgtoa@m+1)& (0+255),f,b
  3422  03CA'                    
  3423                           ; BSR set to: 0
  3424                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 636:     };C:\Pro
      +                          gram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 640:     if (nmode == 'f
      +                          ') {
  3425  03CA' 0E66               	movlw	102
  3426  03CC' 1900'              	xorwf	efgtoa@nmode& (0+255),w,b
  3427  03CE' A4D8               	btfss	status,2,c
  3428  03D0' EF00' F000'        	goto	u6061
  3429  03D4' EF00' F000'        	goto	u6060
  3430  03D8'                    u6061:
  3431  03D8' EF00' F000'        	goto	l5471
  3432  03DC'                    u6060:
  3433  03DC'                    
  3434                           ; BSR set to: 0
  3435                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 641:         if (
      +                          e < 0) {
  3436  03DC' BF00'              	btfsc	(efgtoa@e+1)& (0+255),7,b
  3437  03DE' EF00' F000'        	goto	u6070
  3438  03E2' EF00' F000'        	goto	u6071
  3439  03E6'                    u6071:
  3440  03E6' EF00' F000'        	goto	l5467
  3441  03EA'                    u6070:
  3442  03EA'                    
  3443                           ; BSR set to: 0
  3444                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 642:             
      +                          u.f = 1.0;
  3445  03EA' 0E00               	movlw	0
  3446  03EC' 6F00'              	movwf	efgtoa@u& (0+255),b
  3447  03EE' 0E00               	movlw	0
  3448  03F0' 6F00'              	movwf	(efgtoa@u+1)& (0+255),b
  3449  03F2' 0E80               	movlw	128
  3450  03F4' 6F00'              	movwf	(efgtoa@u+2)& (0+255),b
  3451  03F6' 0E3F               	movlw	63
  3452  03F8' 6F00'              	movwf	(efgtoa@u+3)& (0+255),b
  3453                           
  3454                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 643:             
      +                          e = 0;
  3455  03FA' 0E00               	movlw	0
  3456  03FC' 6F00'              	movwf	(efgtoa@e+1)& (0+255),b
  3457  03FE' 0E00               	movlw	0
  3458  0400' 6F00'              	movwf	efgtoa@e& (0+255),b
  3459  0402'                    l5467:
  3460                           
  3461                           ; BSR set to: 0
  3462                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 645:         if (
      +                          !(mode == 'g')) {
  3463  0402' 0E67               	movlw	103
  3464  0404' 1900'              	xorwf	efgtoa@mode& (0+255),w,b
  3465  0406' B4D8               	btfsc	status,2,c
  3466  0408' EF00' F000'        	goto	u6081
  3467  040C' EF00' F000'        	goto	u6080
  3468  0410'                    u6081:
  3469  0410' EF00' F000'        	goto	l5471
  3470  0414'                    u6080:
  3471  0414'                    
  3472                           ; BSR set to: 0
  3473                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 646:             
      +                          m += e;
  3474  0414' 5100'              	movf	efgtoa@e& (0+255),w,b
  3475  0416' 2700'              	addwf	efgtoa@m& (0+255),f,b
  3476  0418' 5100'              	movf	(efgtoa@e+1)& (0+255),w,b
  3477  041A' 2300'              	addwfc	(efgtoa@m+1)& (0+255),f,b
  3478  041C'                    l5471:
  3479                           
  3480                           ; BSR set to: 0
  3481                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 652:     i = 0;
  3482  041C' 0E00               	movlw	0
  3483  041E' 6F00'              	movwf	(efgtoa@i+1)& (0+255),b
  3484  0420' 0E00               	movlw	0
  3485  0422' 6F00'              	movwf	efgtoa@i& (0+255),b
  3486  0424'                    
  3487                           ; BSR set to: 0
  3488                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 653:     h = g.f;
  3489  0424' C039' F030'        	movff	efgtoa@g,efgtoa@h
  3490  0428' C03A' F031'        	movff	efgtoa@g+1,efgtoa@h+1
  3491  042C' C03B' F032'        	movff	efgtoa@g+2,efgtoa@h+2
  3492  0430' C03C' F033'        	movff	efgtoa@g+3,efgtoa@h+3
  3493  0434'                    
  3494                           ; BSR set to: 0
  3495                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 654:     ou = u;
  3496  0434' C03F' F02A'        	movff	efgtoa@u,efgtoa@ou
  3497  0438' C040' F02B'        	movff	efgtoa@u+1,efgtoa@ou+1
  3498  043C' C041' F02C'        	movff	efgtoa@u+2,efgtoa@ou+2
  3499  0440' C042' F02D'        	movff	efgtoa@u+3,efgtoa@ou+3
  3500                           
  3501                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 655:     while (i
      +                           < m) {
  3502  0444' EF00' F000'        	goto	l5485
  3503  0448'                    l5477:
  3504                           
  3505                           ; BSR set to: 0
  3506                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 656:         l = 
      +                          floorf(h/u.f);
  3507  0448' C030' F035'        	movff	efgtoa@h,___fldiv@b
  3508  044C' C031' F036'        	movff	efgtoa@h+1,___fldiv@b+1
  3509  0450' C032' F037'        	movff	efgtoa@h+2,___fldiv@b+2
  3510  0454' C033' F038'        	movff	efgtoa@h+3,___fldiv@b+3
  3511  0458' C03F' F039'        	movff	efgtoa@u,___fldiv@a
  3512  045C' C040' F03A'        	movff	efgtoa@u+1,___fldiv@a+1
  3513  0460' C041' F03B'        	movff	efgtoa@u+2,___fldiv@a+2
  3514  0464' C042' F03C'        	movff	efgtoa@u+3,___fldiv@a+3
  3515  0468' EC00' F000'        	call	___fldiv	;wreg free
  3516  046C' C035' F04E'        	movff	?___fldiv,floorf@x
  3517  0470' C036' F04F'        	movff	?___fldiv+1,floorf@x+1
  3518  0474' C037' F050'        	movff	?___fldiv+2,floorf@x+2
  3519  0478' C038' F051'        	movff	?___fldiv+3,floorf@x+3
  3520  047C' EC00' F000'        	call	_floorf	;wreg free
  3521  0480' C04E' F034'        	movff	?_floorf,efgtoa@l
  3522  0484' C04F' F035'        	movff	?_floorf+1,efgtoa@l+1
  3523  0488' C050' F036'        	movff	?_floorf+2,efgtoa@l+2
  3524  048C' C051' F037'        	movff	?_floorf+3,efgtoa@l+3
  3525                           
  3526                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 657:         d = 
      +                          (int)l;
  3527  0490' C034' F004'        	movff	efgtoa@l,___fltol@f1
  3528  0494' C035' F005'        	movff	efgtoa@l+1,___fltol@f1+1
  3529  0498' C036' F006'        	movff	efgtoa@l+2,___fltol@f1+2
  3530  049C' C037' F007'        	movff	efgtoa@l+3,___fltol@f1+3
  3531  04A0' EC00' F000'        	call	___fltol	;wreg free
  3532  04A4' C004' F022'        	movff	?___fltol,efgtoa@d
  3533  04A8' C005' F023'        	movff	?___fltol+1,efgtoa@d+1
  3534  04AC'                    
  3535                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 658:         h -=
      +                           l*u.f;
  3536  04AC' C030' F02D'        	movff	efgtoa@h,___flsub@b
  3537  04B0' C031' F02E'        	movff	efgtoa@h+1,___flsub@b+1
  3538  04B4' C032' F02F'        	movff	efgtoa@h+2,___flsub@b+2
  3539  04B8' C033' F030'        	movff	efgtoa@h+3,___flsub@b+3
  3540  04BC' C034' F018'        	movff	efgtoa@l,___flmul@a
  3541  04C0' C035' F019'        	movff	efgtoa@l+1,___flmul@a+1
  3542  04C4' C036' F01A'        	movff	efgtoa@l+2,___flmul@a+2
  3543  04C8' C037' F01B'        	movff	efgtoa@l+3,___flmul@a+3
  3544  04CC' C03F' F014'        	movff	efgtoa@u,___flmul@b
  3545  04D0' C040' F015'        	movff	efgtoa@u+1,___flmul@b+1
  3546  04D4' C041' F016'        	movff	efgtoa@u+2,___flmul@b+2
  3547  04D8' C042' F017'        	movff	efgtoa@u+3,___flmul@b+3
  3548  04DC' EC00' F000'        	call	___flmul	;wreg free
  3549  04E0' C014' F031'        	movff	?___flmul,___flsub@a
  3550  04E4' C015' F032'        	movff	?___flmul+1,___flsub@a+1
  3551  04E8' C016' F033'        	movff	?___flmul+2,___flsub@a+2
  3552  04EC' C017' F034'        	movff	?___flmul+3,___flsub@a+3
  3553  04F0' EC00' F000'        	call	___flsub	;wreg free
  3554  04F4' C02D' F030'        	movff	?___flsub,efgtoa@h
  3555  04F8' C02E' F031'        	movff	?___flsub+1,efgtoa@h+1
  3556  04FC' C02F' F032'        	movff	?___flsub+2,efgtoa@h+2
  3557  0500' C030' F033'        	movff	?___flsub+3,efgtoa@h+3
  3558  0504'                    
  3559                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 659:         u.f 
      +                          = u.f/10.0;
  3560  0504' C03F' F035'        	movff	efgtoa@u,___fldiv@b
  3561  0508' C040' F036'        	movff	efgtoa@u+1,___fldiv@b+1
  3562  050C' C041' F037'        	movff	efgtoa@u+2,___fldiv@b+2
  3563  0510' C042' F038'        	movff	efgtoa@u+3,___fldiv@b+3
  3564  0514' 0E00               	movlw	0
  3565  0516' 6E00'              	movwf	___fldiv@a^0,c
  3566  0518' 0E00               	movlw	0
  3567  051A' 6E00'              	movwf	(___fldiv@a+1)^0,c
  3568  051C' 0E20               	movlw	32
  3569  051E' 6E00'              	movwf	(___fldiv@a+2)^0,c
  3570  0520' 0E41               	movlw	65
  3571  0522' 6E00'              	movwf	(___fldiv@a+3)^0,c
  3572  0524' EC00' F000'        	call	___fldiv	;wreg free
  3573  0528' C035' F03F'        	movff	?___fldiv,efgtoa@u
  3574  052C' C036' F040'        	movff	?___fldiv+1,efgtoa@u+1
  3575  0530' C037' F041'        	movff	?___fldiv+2,efgtoa@u+2
  3576  0534' C038' F042'        	movff	?___fldiv+3,efgtoa@u+3
  3577  0538'                    
  3578                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 660:         ++i;
  3579  0538' 0100               	movlb	0	; () banked
  3580  053A' 4B00'              	infsnz	efgtoa@i& (0+255),f,b
  3581  053C' 2B00'              	incf	(efgtoa@i+1)& (0+255),f,b
  3582  053E'                    l5485:
  3583                           
  3584                           ; BSR set to: 0
  3585                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 655:     while (i
      +                           < m) {
  3586  053E' 5100'              	movf	efgtoa@m& (0+255),w,b
  3587  0540' 5D00'              	subwf	efgtoa@i& (0+255),w,b
  3588  0542' 5100'              	movf	(efgtoa@i+1)& (0+255),w,b
  3589  0544' 0A80               	xorlw	128
  3590  0546' 6E00'              	movwf	??_efgtoa^0,c
  3591  0548' 5100'              	movf	(efgtoa@m+1)& (0+255),w,b
  3592  054A' 0A80               	xorlw	128
  3593  054C' 5800'              	subwfb	??_efgtoa^0,w,c
  3594  054E' A0D8               	btfss	status,0,c
  3595  0550' EF00' F000'        	goto	u6091
  3596  0554' EF00' F000'        	goto	u6090
  3597  0558'                    u6091:
  3598  0558' EF00' F000'        	goto	l5477
  3599  055C'                    u6090:
  3600  055C'                    
  3601                           ; BSR set to: 0
  3602                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 664:     l = u.f*
      +                          5.0;
  3603  055C' C03F' F014'        	movff	efgtoa@u,___flmul@b
  3604  0560' C040' F015'        	movff	efgtoa@u+1,___flmul@b+1
  3605  0564' C041' F016'        	movff	efgtoa@u+2,___flmul@b+2
  3606  0568' C042' F017'        	movff	efgtoa@u+3,___flmul@b+3
  3607  056C' 0E00               	movlw	0
  3608  056E' 6E00'              	movwf	___flmul@a^0,c
  3609  0570' 0E00               	movlw	0
  3610  0572' 6E00'              	movwf	(___flmul@a+1)^0,c
  3611  0574' 0EA0               	movlw	160
  3612  0576' 6E00'              	movwf	(___flmul@a+2)^0,c
  3613  0578' 0E40               	movlw	64
  3614  057A' 6E00'              	movwf	(___flmul@a+3)^0,c
  3615  057C' EC00' F000'        	call	___flmul	;wreg free
  3616  0580' C014' F034'        	movff	?___flmul,efgtoa@l
  3617  0584' C015' F035'        	movff	?___flmul+1,efgtoa@l+1
  3618  0588' C016' F036'        	movff	?___flmul+2,efgtoa@l+2
  3619  058C' C017' F037'        	movff	?___flmul+3,efgtoa@l+3
  3620  0590'                    
  3621                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 665:     if (h < 
      +                          l) {
  3622  0590' C030' F035'        	movff	efgtoa@h,___flge@ff1
  3623  0594' C031' F036'        	movff	efgtoa@h+1,___flge@ff1+1
  3624  0598' C032' F037'        	movff	efgtoa@h+2,___flge@ff1+2
  3625  059C' C033' F038'        	movff	efgtoa@h+3,___flge@ff1+3
  3626  05A0' C034' F039'        	movff	efgtoa@l,___flge@ff2
  3627  05A4' C035' F03A'        	movff	efgtoa@l+1,___flge@ff2+1
  3628  05A8' C036' F03B'        	movff	efgtoa@l+2,___flge@ff2+2
  3629  05AC' C037' F03C'        	movff	efgtoa@l+3,___flge@ff2+3
  3630  05B0' EC00' F000'        	call	___flge	;wreg free
  3631  05B4' B0D8               	btfsc	status,0,c
  3632  05B6' EF00' F000'        	goto	u6101
  3633  05BA' EF00' F000'        	goto	u6100
  3634  05BE'                    u6101:
  3635  05BE' EF00' F000'        	goto	l5493
  3636  05C2'                    u6100:
  3637  05C2'                    
  3638                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 666:         l = 
      +                          0.0;
  3639  05C2' 0E00               	movlw	0
  3640  05C4' 0100               	movlb	0	; () banked
  3641  05C6' 6F00'              	movwf	efgtoa@l& (0+255),b
  3642  05C8' 0E00               	movlw	0
  3643  05CA' 6F00'              	movwf	(efgtoa@l+1)& (0+255),b
  3644  05CC' 0E00               	movlw	0
  3645  05CE' 6F00'              	movwf	(efgtoa@l+2)& (0+255),b
  3646  05D0' 0E00               	movlw	0
  3647  05D2' 6F00'              	movwf	(efgtoa@l+3)& (0+255),b
  3648                           
  3649                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 667:     } else {
  3650  05D4' EF00' F000'        	goto	l5499
  3651  05D8'                    l5493:
  3652                           
  3653                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 669:         if (
      +                          (h == l) && !(d % 2)) {
  3654  05D8' C030' F004'        	movff	efgtoa@h,___fleq@ff1
  3655  05DC' C031' F005'        	movff	efgtoa@h+1,___fleq@ff1+1
  3656  05E0' C032' F006'        	movff	efgtoa@h+2,___fleq@ff1+2
  3657  05E4' C033' F007'        	movff	efgtoa@h+3,___fleq@ff1+3
  3658  05E8' C034' F008'        	movff	efgtoa@l,___fleq@ff2
  3659  05EC' C035' F009'        	movff	efgtoa@l+1,___fleq@ff2+1
  3660  05F0' C036' F00A'        	movff	efgtoa@l+2,___fleq@ff2+2
  3661  05F4' C037' F00B'        	movff	efgtoa@l+3,___fleq@ff2+3
  3662  05F8' EC00' F000'        	call	___fleq	;wreg free
  3663  05FC' A0D8               	btfss	status,0,c
  3664  05FE' EF00' F000'        	goto	u6111
  3665  0602' EF00' F000'        	goto	u6110
  3666  0606'                    u6111:
  3667  0606' EF00' F000'        	goto	l5499
  3668  060A'                    u6110:
  3669  060A' 0100               	movlb	0	; () banked
  3670  060C' B100'              	btfsc	efgtoa@d& (0+255),0,b
  3671  060E' EF00' F000'        	goto	u6121
  3672  0612' EF00' F000'        	goto	u6120
  3673  0616'                    u6121:
  3674  0616' EF00' F000'        	goto	l5499
  3675  061A'                    u6120:
  3676  061A'                    
  3677                           ; BSR set to: 0
  3678                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 670:             
      +                          l = 0.0;
  3679  061A' 0E00               	movlw	0
  3680  061C' 6F00'              	movwf	efgtoa@l& (0+255),b
  3681  061E' 0E00               	movlw	0
  3682  0620' 6F00'              	movwf	(efgtoa@l+1)& (0+255),b
  3683  0622' 0E00               	movlw	0
  3684  0624' 6F00'              	movwf	(efgtoa@l+2)& (0+255),b
  3685  0626' 0E00               	movlw	0
  3686  0628' 6F00'              	movwf	(efgtoa@l+3)& (0+255),b
  3687  062A'                    l5499:
  3688                           
  3689                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 675:     h = g.f 
      +                          + l;
  3690  062A' C039' F004'        	movff	efgtoa@g,___fladd@b
  3691  062E' C03A' F005'        	movff	efgtoa@g+1,___fladd@b+1
  3692  0632' C03B' F006'        	movff	efgtoa@g+2,___fladd@b+2
  3693  0636' C03C' F007'        	movff	efgtoa@g+3,___fladd@b+3
  3694  063A' C034' F008'        	movff	efgtoa@l,___fladd@a
  3695  063E' C035' F009'        	movff	efgtoa@l+1,___fladd@a+1
  3696  0642' C036' F00A'        	movff	efgtoa@l+2,___fladd@a+2
  3697  0646' C037' F00B'        	movff	efgtoa@l+3,___fladd@a+3
  3698  064A' EC00' F000'        	call	___fladd	;wreg free
  3699  064E' C004' F030'        	movff	?___fladd,efgtoa@h
  3700  0652' C005' F031'        	movff	?___fladd+1,efgtoa@h+1
  3701  0656' C006' F032'        	movff	?___fladd+2,efgtoa@h+2
  3702  065A' C007' F033'        	movff	?___fladd+3,efgtoa@h+3
  3703  065E'                    
  3704                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 677:  if (h >= (o
      +                          u.f*10.0)) {
  3705  065E' C030' F035'        	movff	efgtoa@h,___flge@ff1
  3706  0662' C031' F036'        	movff	efgtoa@h+1,___flge@ff1+1
  3707  0666' C032' F037'        	movff	efgtoa@h+2,___flge@ff1+2
  3708  066A' C033' F038'        	movff	efgtoa@h+3,___flge@ff1+3
  3709  066E' 0E00               	movlw	0
  3710  0670' 6E00'              	movwf	___flmul@a^0,c
  3711  0672' 0E00               	movlw	0
  3712  0674' 6E00'              	movwf	(___flmul@a+1)^0,c
  3713  0676' 0E20               	movlw	32
  3714  0678' 6E00'              	movwf	(___flmul@a+2)^0,c
  3715  067A' 0E41               	movlw	65
  3716  067C' 6E00'              	movwf	(___flmul@a+3)^0,c
  3717  067E' C02A' F014'        	movff	efgtoa@ou,___flmul@b
  3718  0682' C02B' F015'        	movff	efgtoa@ou+1,___flmul@b+1
  3719  0686' C02C' F016'        	movff	efgtoa@ou+2,___flmul@b+2
  3720  068A' C02D' F017'        	movff	efgtoa@ou+3,___flmul@b+3
  3721  068E' EC00' F000'        	call	___flmul	;wreg free
  3722  0692' C014' F039'        	movff	?___flmul,___flge@ff2
  3723  0696' C015' F03A'        	movff	?___flmul+1,___flge@ff2+1
  3724  069A' C016' F03B'        	movff	?___flmul+2,___flge@ff2+2
  3725  069E' C017' F03C'        	movff	?___flmul+3,___flge@ff2+3
  3726  06A2' EC00' F000'        	call	___flge	;wreg free
  3727  06A6' A0D8               	btfss	status,0,c
  3728  06A8' EF00' F000'        	goto	u6131
  3729  06AC' EF00' F000'        	goto	u6130
  3730  06B0'                    u6131:
  3731  06B0' EF00' F000'        	goto	l5511
  3732  06B4'                    u6130:
  3733  06B4'                    
  3734                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 678:   e++;
  3735  06B4' 0100               	movlb	0	; () banked
  3736  06B6' 4B00'              	infsnz	efgtoa@e& (0+255),f,b
  3737  06B8' 2B00'              	incf	(efgtoa@e+1)& (0+255),f,b
  3738  06BA'                    
  3739                           ; BSR set to: 0
  3740                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 679:   ou.f *= 10
      +                          .0;
  3741  06BA' C02A' F014'        	movff	efgtoa@ou,___flmul@b
  3742  06BE' C02B' F015'        	movff	efgtoa@ou+1,___flmul@b+1
  3743  06C2' C02C' F016'        	movff	efgtoa@ou+2,___flmul@b+2
  3744  06C6' C02D' F017'        	movff	efgtoa@ou+3,___flmul@b+3
  3745  06CA' 0E00               	movlw	0
  3746  06CC' 6E00'              	movwf	___flmul@a^0,c
  3747  06CE' 0E00               	movlw	0
  3748  06D0' 6E00'              	movwf	(___flmul@a+1)^0,c
  3749  06D2' 0E20               	movlw	32
  3750  06D4' 6E00'              	movwf	(___flmul@a+2)^0,c
  3751  06D6' 0E41               	movlw	65
  3752  06D8' 6E00'              	movwf	(___flmul@a+3)^0,c
  3753  06DA' EC00' F000'        	call	___flmul	;wreg free
  3754  06DE' C014' F02A'        	movff	?___flmul,efgtoa@ou
  3755  06E2' C015' F02B'        	movff	?___flmul+1,efgtoa@ou+1
  3756  06E6' C016' F02C'        	movff	?___flmul+2,efgtoa@ou+2
  3757  06EA' C017' F02D'        	movff	?___flmul+3,efgtoa@ou+3
  3758  06EE'                    
  3759                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 681:   if (nmode 
      +                          == 'f') {
  3760  06EE' 0E66               	movlw	102
  3761  06F0' 0100               	movlb	0	; () banked
  3762  06F2' 1900'              	xorwf	efgtoa@nmode& (0+255),w,b
  3763  06F4' A4D8               	btfss	status,2,c
  3764  06F6' EF00' F000'        	goto	u6141
  3765  06FA' EF00' F000'        	goto	u6140
  3766  06FE'                    u6141:
  3767  06FE' EF00' F000'        	goto	l5511
  3768  0702'                    u6140:
  3769  0702'                    
  3770                           ; BSR set to: 0
  3771                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 683:    m++;
  3772  0702' 4B00'              	infsnz	efgtoa@m& (0+255),f,b
  3773  0704' 2B00'              	incf	(efgtoa@m+1)& (0+255),f,b
  3774  0706'                    l5511:
  3775                           
  3776                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 689:     u = ou;
  3777  0706' C02A' F03F'        	movff	efgtoa@ou,efgtoa@u
  3778  070A' C02B' F040'        	movff	efgtoa@ou+1,efgtoa@u+1
  3779  070E' C02C' F041'        	movff	efgtoa@ou+2,efgtoa@u+2
  3780  0712' C02D' F042'        	movff	efgtoa@ou+3,efgtoa@u+3
  3781  0716'                    
  3782                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 693:  ne = e;
  3783  0716' C026' F017'        	movff	efgtoa@e,efgtoa@ne
  3784  071A' C027' F018'        	movff	efgtoa@e+1,efgtoa@ne+1
  3785  071E'                    
  3786                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 695:     pp = 0;
  3787  071E' 0E00               	movlw	0
  3788  0720' 0100               	movlb	0	; () banked
  3789  0722' 6F00'              	movwf	efgtoa@pp& (0+255),b
  3790  0724'                    
  3791                           ; BSR set to: 0
  3792                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 696:     t = 0;
  3793  0724' 0E00               	movlw	0
  3794  0726' 6F00'              	movwf	(efgtoa@t+1)& (0+255),b
  3795  0728' 0E00               	movlw	0
  3796  072A' 6F00'              	movwf	efgtoa@t& (0+255),b
  3797  072C'                    
  3798                           ; BSR set to: 0
  3799                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 697:     i = 0;
  3800  072C' 0E00               	movlw	0
  3801  072E' 6F00'              	movwf	(efgtoa@i+1)& (0+255),b
  3802  0730' 0E00               	movlw	0
  3803  0732' 6F00'              	movwf	efgtoa@i& (0+255),b
  3804                           
  3805                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 698:     while ((
      +                          i < m) && (n < (80 - 5))) {
  3806  0734' EF00' F000'        	goto	l5561
  3807  0738'                    l5521:
  3808                           
  3809                           ; BSR set to: 0
  3810                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 699:         l = 
      +                          floorf(h/u.f);
  3811  0738' C030' F035'        	movff	efgtoa@h,___fldiv@b
  3812  073C' C031' F036'        	movff	efgtoa@h+1,___fldiv@b+1
  3813  0740' C032' F037'        	movff	efgtoa@h+2,___fldiv@b+2
  3814  0744' C033' F038'        	movff	efgtoa@h+3,___fldiv@b+3
  3815  0748' C03F' F039'        	movff	efgtoa@u,___fldiv@a
  3816  074C' C040' F03A'        	movff	efgtoa@u+1,___fldiv@a+1
  3817  0750' C041' F03B'        	movff	efgtoa@u+2,___fldiv@a+2
  3818  0754' C042' F03C'        	movff	efgtoa@u+3,___fldiv@a+3
  3819  0758' EC00' F000'        	call	___fldiv	;wreg free
  3820  075C' C035' F04E'        	movff	?___fldiv,floorf@x
  3821  0760' C036' F04F'        	movff	?___fldiv+1,floorf@x+1
  3822  0764' C037' F050'        	movff	?___fldiv+2,floorf@x+2
  3823  0768' C038' F051'        	movff	?___fldiv+3,floorf@x+3
  3824  076C' EC00' F000'        	call	_floorf	;wreg free
  3825  0770' C04E' F034'        	movff	?_floorf,efgtoa@l
  3826  0774' C04F' F035'        	movff	?_floorf+1,efgtoa@l+1
  3827  0778' C050' F036'        	movff	?_floorf+2,efgtoa@l+2
  3828  077C' C051' F037'        	movff	?_floorf+3,efgtoa@l+3
  3829                           
  3830                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 700:         d = 
      +                          (int)l > 9 ? 9 : (int)l;
  3831  0780' C034' F004'        	movff	efgtoa@l,___fltol@f1
  3832  0784' C035' F005'        	movff	efgtoa@l+1,___fltol@f1+1
  3833  0788' C036' F006'        	movff	efgtoa@l+2,___fltol@f1+2
  3834  078C' C037' F007'        	movff	efgtoa@l+3,___fltol@f1+3
  3835  0790' EC00' F000'        	call	___fltol	;wreg free
  3836  0794' BE00'              	btfsc	(?___fltol+1)^0,7,c
  3837  0796' EF00' F000'        	goto	u6150
  3838  079A' 5000'              	movf	(?___fltol+1)^0,w,c
  3839  079C' E107               	bnz	u6151
  3840  079E' 0E0A               	movlw	10
  3841  07A0' 5C00'              	subwf	?___fltol^0,w,c
  3842  07A2' B0D8               	btfsc	status,0,c
  3843  07A4' EF00' F000'        	goto	u6151
  3844  07A8' EF00' F000'        	goto	u6150
  3845  07AC'                    u6151:
  3846  07AC' EF00' F000'        	goto	l5525
  3847  07B0'                    u6150:
  3848  07B0' C034' F004'        	movff	efgtoa@l,___fltol@f1
  3849  07B4' C035' F005'        	movff	efgtoa@l+1,___fltol@f1+1
  3850  07B8' C036' F006'        	movff	efgtoa@l+2,___fltol@f1+2
  3851  07BC' C037' F007'        	movff	efgtoa@l+3,___fltol@f1+3
  3852  07C0' EC00' F000'        	call	___fltol	;wreg free
  3853  07C4' C004' F022'        	movff	?___fltol,efgtoa@d
  3854  07C8' C005' F023'        	movff	?___fltol+1,efgtoa@d+1
  3855  07CC' EF00' F000'        	goto	l1265
  3856  07D0'                    l5525:
  3857  07D0' 0E00               	movlw	0
  3858  07D2' 0100               	movlb	0	; () banked
  3859  07D4' 6F00'              	movwf	(efgtoa@d+1)& (0+255),b
  3860  07D6' 0E09               	movlw	9
  3861  07D8' 6F00'              	movwf	efgtoa@d& (0+255),b
  3862  07DA'                    l1265:
  3863                           
  3864                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 711:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 712:             if (!pp &
      +                          & (ne < 0)) {
  3865  07DA' 0100               	movlb	0	; () banked
  3866  07DC' 5100'              	movf	efgtoa@pp& (0+255),w,b
  3867  07DE' A4D8               	btfss	status,2,c
  3868  07E0' EF00' F000'        	goto	u6161
  3869  07E4' EF00' F000'        	goto	u6160
  3870  07E8'                    u6161:
  3871  07E8' EF00' F000'        	goto	l5545
  3872  07EC'                    u6160:
  3873  07EC'                    
  3874                           ; BSR set to: 0
  3875  07EC' BF00'              	btfsc	(efgtoa@ne+1)& (0+255),7,b
  3876  07EE' EF00' F000'        	goto	u6170
  3877  07F2' EF00' F000'        	goto	u6171
  3878  07F6'                    u6171:
  3879  07F6' EF00' F000'        	goto	l5545
  3880  07FA'                    u6170:
  3881  07FA'                    
  3882                           ; BSR set to: 0
  3883                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 713:             
      +                              dbuf[n++] = '.';
  3884  07FA' 0E00'              	movlw	low _dbuf
  3885  07FC' 2500'              	addwf	efgtoa@n& (0+255),w,b
  3886  07FE' 6ED9               	movwf	fsr2l,c
  3887  0800' 0E00'              	movlw	high _dbuf
  3888  0802' 2100'              	addwfc	(efgtoa@n+1)& (0+255),w,b
  3889  0804' 6EDA               	movwf	fsr2h,c
  3890  0806' 0E2E               	movlw	46
  3891  0808' 6EDF               	movwf	indf2,c
  3892  080A'                    
  3893                           ; BSR set to: 0
  3894  080A' 4B00'              	infsnz	efgtoa@n& (0+255),f,b
  3895  080C' 2B00'              	incf	(efgtoa@n+1)& (0+255),f,b
  3896  080E'                    
  3897                           ; BSR set to: 0
  3898                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 714:             
      +                              --w;
  3899  080E' 0700'              	decf	efgtoa@w& (0+255),f,b
  3900  0810' A0D8               	btfss	status,0,c
  3901  0812' 0700'              	decf	(efgtoa@w+1)& (0+255),f,b
  3902  0814'                    
  3903                           ; BSR set to: 0
  3904                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 715:             
      +                              pp = 1;
  3905  0814' 0E01               	movlw	1
  3906  0816' 6F00'              	movwf	efgtoa@pp& (0+255),b
  3907  0818' EF00' F000'        	goto	l5545
  3908  081C'                    l5537:
  3909                           
  3910                           ; BSR set to: 0
  3911                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 718:             
      +                              dbuf[n++] = '0';
  3912  081C' 0E00'              	movlw	low _dbuf
  3913  081E' 2500'              	addwf	efgtoa@n& (0+255),w,b
  3914  0820' 6ED9               	movwf	fsr2l,c
  3915  0822' 0E00'              	movlw	high _dbuf
  3916  0824' 2100'              	addwfc	(efgtoa@n+1)& (0+255),w,b
  3917  0826' 6EDA               	movwf	fsr2h,c
  3918  0828' 0E30               	movlw	48
  3919  082A' 6EDF               	movwf	indf2,c
  3920  082C'                    
  3921                           ; BSR set to: 0
  3922  082C' 4B00'              	infsnz	efgtoa@n& (0+255),f,b
  3923  082E' 2B00'              	incf	(efgtoa@n+1)& (0+255),f,b
  3924  0830'                    
  3925                           ; BSR set to: 0
  3926                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 719:             
      +                              --w;
  3927  0830' 0700'              	decf	efgtoa@w& (0+255),f,b
  3928  0832' A0D8               	btfss	status,0,c
  3929  0834' 0700'              	decf	(efgtoa@w+1)& (0+255),f,b
  3930  0836'                    
  3931                           ; BSR set to: 0
  3932                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 720:             
      +                              --t;
  3933  0836' 0700'              	decf	efgtoa@t& (0+255),f,b
  3934  0838' A0D8               	btfss	status,0,c
  3935  083A' 0700'              	decf	(efgtoa@t+1)& (0+255),f,b
  3936  083C'                    l5545:
  3937                           
  3938                           ; BSR set to: 0
  3939                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 717:             
      +                          while (t) {
  3940  083C' 5100'              	movf	efgtoa@t& (0+255),w,b
  3941  083E' 1100'              	iorwf	(efgtoa@t+1)& (0+255),w,b
  3942  0840' A4D8               	btfss	status,2,c
  3943  0842' EF00' F000'        	goto	u6181
  3944  0846' EF00' F000'        	goto	u6180
  3945  084A'                    u6181:
  3946  084A' EF00' F000'        	goto	l5537
  3947  084E'                    u6180:
  3948  084E'                    
  3949                           ; BSR set to: 0
  3950                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 722:             
      +                          dbuf[n++] = (char)((int)'0' + d);
  3951  084E' 0E00'              	movlw	low _dbuf
  3952  0850' 2500'              	addwf	efgtoa@n& (0+255),w,b
  3953  0852' 6ED9               	movwf	fsr2l,c
  3954  0854' 0E00'              	movlw	high _dbuf
  3955  0856' 2100'              	addwfc	(efgtoa@n+1)& (0+255),w,b
  3956  0858' 6EDA               	movwf	fsr2h,c
  3957  085A' 5100'              	movf	efgtoa@d& (0+255),w,b
  3958  085C' 0F30               	addlw	48
  3959  085E' 6EDF               	movwf	indf2,c
  3960  0860'                    
  3961                           ; BSR set to: 0
  3962  0860' 4B00'              	infsnz	efgtoa@n& (0+255),f,b
  3963  0862' 2B00'              	incf	(efgtoa@n+1)& (0+255),f,b
  3964  0864'                    
  3965                           ; BSR set to: 0
  3966                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 723:             
      +                          --w;
  3967  0864' 0700'              	decf	efgtoa@w& (0+255),f,b
  3968  0866' A0D8               	btfss	status,0,c
  3969  0868' 0700'              	decf	(efgtoa@w+1)& (0+255),f,b
  3970  086A'                    
  3971                           ; BSR set to: 0
  3972                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 724:         };C:
      +                          \Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 725:         h -= l*
      +                          u.f;
  3973  086A' C030' F02D'        	movff	efgtoa@h,___flsub@b
  3974  086E' C031' F02E'        	movff	efgtoa@h+1,___flsub@b+1
  3975  0872' C032' F02F'        	movff	efgtoa@h+2,___flsub@b+2
  3976  0876' C033' F030'        	movff	efgtoa@h+3,___flsub@b+3
  3977  087A' C034' F018'        	movff	efgtoa@l,___flmul@a
  3978  087E' C035' F019'        	movff	efgtoa@l+1,___flmul@a+1
  3979  0882' C036' F01A'        	movff	efgtoa@l+2,___flmul@a+2
  3980  0886' C037' F01B'        	movff	efgtoa@l+3,___flmul@a+3
  3981  088A' C03F' F014'        	movff	efgtoa@u,___flmul@b
  3982  088E' C040' F015'        	movff	efgtoa@u+1,___flmul@b+1
  3983  0892' C041' F016'        	movff	efgtoa@u+2,___flmul@b+2
  3984  0896' C042' F017'        	movff	efgtoa@u+3,___flmul@b+3
  3985  089A' EC00' F000'        	call	___flmul	;wreg free
  3986  089E' C014' F031'        	movff	?___flmul,___flsub@a
  3987  08A2' C015' F032'        	movff	?___flmul+1,___flsub@a+1
  3988  08A6' C016' F033'        	movff	?___flmul+2,___flsub@a+2
  3989  08AA' C017' F034'        	movff	?___flmul+3,___flsub@a+3
  3990  08AE' EC00' F000'        	call	___flsub	;wreg free
  3991  08B2' C02D' F030'        	movff	?___flsub,efgtoa@h
  3992  08B6' C02E' F031'        	movff	?___flsub+1,efgtoa@h+1
  3993  08BA' C02F' F032'        	movff	?___flsub+2,efgtoa@h+2
  3994  08BE' C030' F033'        	movff	?___flsub+3,efgtoa@h+3
  3995  08C2'                    
  3996                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 726:         u.f 
      +                          = u.f/10.0;
  3997  08C2' C03F' F035'        	movff	efgtoa@u,___fldiv@b
  3998  08C6' C040' F036'        	movff	efgtoa@u+1,___fldiv@b+1
  3999  08CA' C041' F037'        	movff	efgtoa@u+2,___fldiv@b+2
  4000  08CE' C042' F038'        	movff	efgtoa@u+3,___fldiv@b+3
  4001  08D2' 0E00               	movlw	0
  4002  08D4' 6E00'              	movwf	___fldiv@a^0,c
  4003  08D6' 0E00               	movlw	0
  4004  08D8' 6E00'              	movwf	(___fldiv@a+1)^0,c
  4005  08DA' 0E20               	movlw	32
  4006  08DC' 6E00'              	movwf	(___fldiv@a+2)^0,c
  4007  08DE' 0E41               	movlw	65
  4008  08E0' 6E00'              	movwf	(___fldiv@a+3)^0,c
  4009  08E2' EC00' F000'        	call	___fldiv	;wreg free
  4010  08E6' C035' F03F'        	movff	?___fldiv,efgtoa@u
  4011  08EA' C036' F040'        	movff	?___fldiv+1,efgtoa@u+1
  4012  08EE' C037' F041'        	movff	?___fldiv+2,efgtoa@u+2
  4013  08F2' C038' F042'        	movff	?___fldiv+3,efgtoa@u+3
  4014  08F6'                    
  4015                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 727:         --ne
      +                          ;
  4016  08F6' 0100               	movlb	0	; () banked
  4017  08F8' 0700'              	decf	efgtoa@ne& (0+255),f,b
  4018  08FA' A0D8               	btfss	status,0,c
  4019  08FC' 0700'              	decf	(efgtoa@ne+1)& (0+255),f,b
  4020  08FE'                    
  4021                           ; BSR set to: 0
  4022                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 728:         ++i;
  4023  08FE' 4B00'              	infsnz	efgtoa@i& (0+255),f,b
  4024  0900' 2B00'              	incf	(efgtoa@i+1)& (0+255),f,b
  4025  0902'                    l5561:
  4026                           
  4027                           ; BSR set to: 0
  4028                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 698:     while ((
      +                          i < m) && (n < (80 - 5))) {
  4029  0902' 5100'              	movf	efgtoa@m& (0+255),w,b
  4030  0904' 5D00'              	subwf	efgtoa@i& (0+255),w,b
  4031  0906' 5100'              	movf	(efgtoa@i+1)& (0+255),w,b
  4032  0908' 0A80               	xorlw	128
  4033  090A' 6E00'              	movwf	??_efgtoa^0,c
  4034  090C' 5100'              	movf	(efgtoa@m+1)& (0+255),w,b
  4035  090E' 0A80               	xorlw	128
  4036  0910' 5800'              	subwfb	??_efgtoa^0,w,c
  4037  0912' B0D8               	btfsc	status,0,c
  4038  0914' EF00' F000'        	goto	u6191
  4039  0918' EF00' F000'        	goto	u6190
  4040  091C'                    u6191:
  4041  091C' EF00' F000'        	goto	l5565
  4042  0920'                    u6190:
  4043  0920'                    
  4044                           ; BSR set to: 0
  4045  0920' BF00'              	btfsc	(efgtoa@n+1)& (0+255),7,b
  4046  0922' EF00' F000'        	goto	u6201
  4047  0926' 5100'              	movf	(efgtoa@n+1)& (0+255),w,b
  4048  0928' E109               	bnz	u6200
  4049  092A' 0E4B               	movlw	75
  4050  092C' 5D00'              	subwf	efgtoa@n& (0+255),w,b
  4051  092E' A0D8               	btfss	status,0,c
  4052  0930' EF00' F000'        	goto	u6201
  4053  0934' EF00' F000'        	goto	u6200
  4054  0938'                    u6201:
  4055  0938' EF00' F000'        	goto	l5521
  4056  093C'                    u6200:
  4057  093C'                    l5565:
  4058                           
  4059                           ; BSR set to: 0
  4060                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 735:  i = sizeof(
      +                          dbuf) - 1;
  4061  093C' 0E00               	movlw	0
  4062  093E' 6F00'              	movwf	(efgtoa@i+1)& (0+255),b
  4063  0940' 0E4F               	movlw	79
  4064  0942' 6F00'              	movwf	efgtoa@i& (0+255),b
  4065  0944'                    
  4066                           ; BSR set to: 0
  4067                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 736:     dbuf[i] 
      +                          = '\0';
  4068  0944' 0E00'              	movlw	low _dbuf
  4069  0946' 2500'              	addwf	efgtoa@i& (0+255),w,b
  4070  0948' 6ED9               	movwf	fsr2l,c
  4071  094A' 0E00'              	movlw	high _dbuf
  4072  094C' 2100'              	addwfc	(efgtoa@i+1)& (0+255),w,b
  4073  094E' 6EDA               	movwf	fsr2h,c
  4074  0950' 0E00               	movlw	0
  4075  0952' 6EDF               	movwf	indf2,c
  4076  0954'                    
  4077                           ; BSR set to: 0
  4078                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 767:  memcpy(&dbu
      +                          f[i-n], &dbuf[0], (size_t)n);
  4079  0954' 0E00'              	movlw	low _dbuf
  4080  0956' 6E00'              	movwf	??_efgtoa^0,c
  4081  0958' 0E00'              	movlw	high _dbuf
  4082  095A' 6E00'              	movwf	(??_efgtoa+1)^0,c
  4083  095C' 5100'              	movf	efgtoa@n& (0+255),w,b
  4084  095E' 5E00'              	subwf	??_efgtoa^0,f,c
  4085  0960' 5100'              	movf	(efgtoa@n+1)& (0+255),w,b
  4086  0962' 5A00'              	subwfb	(??_efgtoa+1)^0,f,c
  4087  0964' 5100'              	movf	efgtoa@i& (0+255),w,b
  4088  0966' 2400'              	addwf	??_efgtoa^0,w,c
  4089  0968' 6E00'              	movwf	memcpy@d1^0,c
  4090  096A' 5100'              	movf	(efgtoa@i+1)& (0+255),w,b
  4091  096C' 2000'              	addwfc	(??_efgtoa+1)^0,w,c
  4092  096E' 6E00'              	movwf	(memcpy@d1+1)^0,c
  4093  0970' 0E00'              	movlw	low _dbuf
  4094  0972' 6E00'              	movwf	memcpy@s1^0,c
  4095  0974' 0E00'              	movlw	high _dbuf
  4096  0976' 6E00'              	movwf	(memcpy@s1+1)^0,c
  4097  0978' C03D' F008'        	movff	efgtoa@n,memcpy@n
  4098  097C' C03E' F009'        	movff	efgtoa@n+1,memcpy@n+1
  4099  0980' EC00' F000'        	call	_memcpy	;wreg free
  4100  0984'                    
  4101                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 768:  n = i-n;
  4102  0984' 0100               	movlb	0	; () banked
  4103  0986' 5100'              	movf	efgtoa@n& (0+255),w,b
  4104  0988' 5D00'              	subwf	efgtoa@i& (0+255),w,b
  4105  098A' 6F00'              	movwf	efgtoa@n& (0+255),b
  4106  098C' 5100'              	movf	(efgtoa@n+1)& (0+255),w,b
  4107  098E' 5900'              	subwfb	(efgtoa@i+1)& (0+255),w,b
  4108  0990' 6F00'              	movwf	(efgtoa@n+1)& (0+255),b
  4109  0992'                    
  4110                           ; BSR set to: 0
  4111                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 769:  i = sign ==
      +                           0 ? 0 : 1;
  4112  0992' 5100'              	movf	efgtoa@sign& (0+255),w,b
  4113  0994' A4D8               	btfss	status,2,c
  4114  0996' EF00' F000'        	goto	u6211
  4115  099A' EF00' F000'        	goto	u6210
  4116  099E'                    u6211:
  4117  099E' 0E01               	movlw	1
  4118  09A0' EF00' F000'        	goto	u6220
  4119  09A4'                    u6210:
  4120  09A4' 0E00               	movlw	0
  4121  09A6'                    u6220:
  4122  09A6' 6F00'              	movwf	efgtoa@i& (0+255),b
  4123  09A8' 6B00'              	clrf	(efgtoa@i+1)& (0+255),b
  4124  09AA'                    
  4125                           ; BSR set to: 0
  4126                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 780:  if (sign) {
  4127  09AA' 5100'              	movf	efgtoa@sign& (0+255),w,b
  4128  09AC' B4D8               	btfsc	status,2,c
  4129  09AE' EF00' F000'        	goto	u6231
  4130  09B2' EF00' F000'        	goto	u6230
  4131  09B6'                    u6231:
  4132  09B6' EF00' F000'        	goto	l5579
  4133  09BA'                    u6230:
  4134  09BA'                    
  4135                           ; BSR set to: 0
  4136                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 781:   dbuf[--n] 
      +                          = sign;
  4137  09BA' 0700'              	decf	efgtoa@n& (0+255),f,b
  4138  09BC' A0D8               	btfss	status,0,c
  4139  09BE' 0700'              	decf	(efgtoa@n+1)& (0+255),f,b
  4140  09C0' 0E00'              	movlw	low _dbuf
  4141  09C2' 2500'              	addwf	efgtoa@n& (0+255),w,b
  4142  09C4' 6ED9               	movwf	fsr2l,c
  4143  09C6' 0E00'              	movlw	high _dbuf
  4144  09C8' 2100'              	addwfc	(efgtoa@n+1)& (0+255),w,b
  4145  09CA' 6EDA               	movwf	fsr2h,c
  4146  09CC' C038' FFDF         	movff	efgtoa@sign,indf2
  4147  09D0'                    l5579:
  4148                           
  4149                           ; BSR set to: 0
  4150                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 783:  w -= i;
  4151  09D0' 5100'              	movf	efgtoa@i& (0+255),w,b
  4152  09D2' 5F00'              	subwf	efgtoa@w& (0+255),f,b
  4153  09D4' 5100'              	movf	(efgtoa@i+1)& (0+255),w,b
  4154  09D6' 5B00'              	subwfb	(efgtoa@w+1)& (0+255),f,b
  4155  09D8'                    
  4156                           ; BSR set to: 0
  4157                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 786:     return (
      +                          void) pad(fp, &dbuf[n], w);
  4158  09D8' C010' F014'        	movff	efgtoa@fp,pad@fp
  4159  09DC' C011' F015'        	movff	efgtoa@fp+1,pad@fp+1
  4160  09E0' 0E00'              	movlw	low _dbuf
  4161  09E2' 2500'              	addwf	efgtoa@n& (0+255),w,b
  4162  09E4' 6E00'              	movwf	pad@buf^0,c
  4163  09E6' 0E00'              	movlw	high _dbuf
  4164  09E8' 2100'              	addwfc	(efgtoa@n+1)& (0+255),w,b
  4165  09EA' 6E00'              	movwf	(pad@buf+1)^0,c
  4166  09EC' C028' F018'        	movff	efgtoa@w,pad@p
  4167  09F0' C029' F019'        	movff	efgtoa@w+1,pad@p+1
  4168  09F4' EC00' F000'        	call	_pad	;wreg free
  4169  09F8'                    l1232:
  4170  09F8' 0012               	return		;funcret
  4171  09FA'                    __end_of_efgtoa:
  4172                           	callstack 0
  4173                           
  4174 ;; *************** function _strcpy *****************
  4175 ;; Defined at:
  4176 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\strcpy.c"
  4177 ;; Parameters:    Size  Location     Type
  4178 ;;  dest            2    4[COMRAM] PTR unsigned char 
  4179 ;;		 -> dbuf(80), 
  4180 ;;  src             2    6[COMRAM] PTR const unsigned char 
  4181 ;;		 -> STR_5(4), STR_2(4), 
  4182 ;; Auto vars:     Size  Location     Type
  4183 ;;  d               2   10[COMRAM] PTR unsigned char 
  4184 ;;		 -> dbuf(80), 
  4185 ;;  s               2    8[COMRAM] PTR const unsigned char 
  4186 ;;		 -> STR_5(4), STR_2(4), 
  4187 ;; Return value:  Size  Location     Type
  4188 ;;                  2    4[COMRAM] PTR unsigned char 
  4189 ;; Registers used:
  4190 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4191 ;; Tracked objects:
  4192 ;;		On entry : 0/0
  4193 ;;		On exit  : 0/0
  4194 ;;		Unchanged: 0/0
  4195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4196 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4197 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4199 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4200 ;;Total ram usage:        8 bytes
  4201 ;; Hardware stack levels used: 1
  4202 ;; Hardware stack levels required when called: 2
  4203 ;; This function calls:
  4204 ;;		Nothing
  4205 ;; This function is called by:
  4206 ;;		_efgtoa
  4207 ;; This function uses a non-reentrant model
  4208 ;;
  4209                           
  4210                           	psect	text10
  4211  0000'                    __ptext10:
  4212                           	callstack 0
  4213  0000'                    _strcpy:
  4214                           	callstack 24
  4215  0000' C006' F008'        	movff	strcpy@src,strcpy@s
  4216  0004' C007' F009'        	movff	strcpy@src+1,strcpy@s+1
  4217  0008' C004' F00A'        	movff	strcpy@dest,strcpy@d
  4218  000C' C005' F00B'        	movff	strcpy@dest+1,strcpy@d+1
  4219  0010'                    l4089:
  4220  0010' C008' FFF6         	movff	strcpy@s,tblptrl
  4221  0014' C009' FFF7         	movff	strcpy@s+1,tblptrh
  4222  0018' 4A00'              	infsnz	strcpy@s^0,f,c
  4223  001A' 2A00'              	incf	(strcpy@s+1)^0,f,c
  4224  001C'                    	if	0	;tblptru may be non-zero
  4225  001C'                    	endif
  4226  001C'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4227  001C' 0E00'              	movlw	low (__mediumconst shr (0+16))
  4228  001E' 6EF8               	movwf	tblptru,c
  4229  0020'                    	endif
  4230  0020' C00A' FFD9         	movff	strcpy@d,fsr2l
  4231  0024' C00B' FFDA         	movff	strcpy@d+1,fsr2h
  4232  0028' 4A00'              	infsnz	strcpy@d^0,f,c
  4233  002A' 2A00'              	incf	(strcpy@d+1)^0,f,c
  4234  002C' 0008               	tblrd		*
  4235  002E' CFF5 FFDF          	movff	tablat,indf2
  4236  0032' 50DF               	movf	indf2,w,c
  4237  0034' A4D8               	btfss	status,2,c
  4238  0036' EF00' F000'        	goto	u4211
  4239  003A' EF00' F000'        	goto	u4210
  4240  003E'                    u4211:
  4241  003E' EF00' F000'        	goto	l4089
  4242  0042'                    u4210:
  4243  0042' 0012               	return		;funcret
  4244  0044'                    __end_of_strcpy:
  4245                           	callstack 0
  4246                           
  4247 ;; *************** function _memcpy *****************
  4248 ;; Defined at:
  4249 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\memcpy.c"
  4250 ;; Parameters:    Size  Location     Type
  4251 ;;  d1              2    4[COMRAM] PTR void 
  4252 ;;		 -> dbuf(80), 
  4253 ;;  s1              2    6[COMRAM] PTR const void 
  4254 ;;		 -> dbuf(80), 
  4255 ;;  n               2    8[COMRAM] unsigned int 
  4256 ;; Auto vars:     Size  Location     Type
  4257 ;;  s               2   12[COMRAM] PTR const unsigned char 
  4258 ;;		 -> dbuf(80), 
  4259 ;;  d               2   10[COMRAM] PTR unsigned char 
  4260 ;;		 -> dbuf(80), 
  4261 ;;  tmp             1   14[COMRAM] unsigned char 
  4262 ;; Return value:  Size  Location     Type
  4263 ;;                  2    4[COMRAM] PTR void 
  4264 ;; Registers used:
  4265 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4266 ;; Tracked objects:
  4267 ;;		On entry : 0/0
  4268 ;;		On exit  : 0/0
  4269 ;;		Unchanged: 0/0
  4270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4271 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4272 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4274 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4275 ;;Total ram usage:       11 bytes
  4276 ;; Hardware stack levels used: 1
  4277 ;; Hardware stack levels required when called: 2
  4278 ;; This function calls:
  4279 ;;		Nothing
  4280 ;; This function is called by:
  4281 ;;		_efgtoa
  4282 ;; This function uses a non-reentrant model
  4283 ;;
  4284                           
  4285                           	psect	text11
  4286  0000'                    __ptext11:
  4287                           	callstack 0
  4288  0000'                    _memcpy:
  4289                           	callstack 24
  4290  0000' C006' F00C'        	movff	memcpy@s1,memcpy@s
  4291  0004' C007' F00D'        	movff	memcpy@s1+1,memcpy@s+1
  4292  0008' C004' F00A'        	movff	memcpy@d1,memcpy@d
  4293  000C' C005' F00B'        	movff	memcpy@d1+1,memcpy@d+1
  4294  0010' EF00' F000'        	goto	l4133
  4295  0014'                    l4125:
  4296  0014' C00C' FFD9         	movff	memcpy@s,fsr2l
  4297  0018' C00D' FFDA         	movff	memcpy@s+1,fsr2h
  4298  001C' 50DF               	movf	indf2,w,c
  4299  001E' 6E00'              	movwf	memcpy@tmp^0,c
  4300  0020' 4A00'              	infsnz	memcpy@s^0,f,c
  4301  0022' 2A00'              	incf	(memcpy@s+1)^0,f,c
  4302  0024' C00A' FFD9         	movff	memcpy@d,fsr2l
  4303  0028' C00B' FFDA         	movff	memcpy@d+1,fsr2h
  4304  002C' C00E' FFDF         	movff	memcpy@tmp,indf2
  4305  0030' 4A00'              	infsnz	memcpy@d^0,f,c
  4306  0032' 2A00'              	incf	(memcpy@d+1)^0,f,c
  4307  0034'                    l4133:
  4308  0034' 0600'              	decf	memcpy@n^0,f,c
  4309  0036' A0D8               	btfss	status,0,c
  4310  0038' 0600'              	decf	(memcpy@n+1)^0,f,c
  4311  003A' 2800'              	incf	memcpy@n^0,w,c
  4312  003C' E106               	bnz	u4331
  4313  003E' 2800'              	incf	(memcpy@n+1)^0,w,c
  4314  0040' A4D8               	btfss	status,2,c
  4315  0042' EF00' F000'        	goto	u4331
  4316  0046' EF00' F000'        	goto	u4330
  4317  004A'                    u4331:
  4318  004A' EF00' F000'        	goto	l4125
  4319  004E'                    u4330:
  4320  004E' 0012               	return		;funcret
  4321  0050'                    __end_of_memcpy:
  4322                           	callstack 0
  4323                           
  4324 ;; *************** function _labs *****************
  4325 ;; Defined at:
  4326 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\labs.c"
  4327 ;; Parameters:    Size  Location     Type
  4328 ;;  a               4    4[COMRAM] long 
  4329 ;; Auto vars:     Size  Location     Type
  4330 ;;		None
  4331 ;; Return value:  Size  Location     Type
  4332 ;;                  4    4[COMRAM] long 
  4333 ;; Registers used:
  4334 ;;		wreg, status,2, status,0
  4335 ;; Tracked objects:
  4336 ;;		On entry : 0/0
  4337 ;;		On exit  : 0/0
  4338 ;;		Unchanged: 0/0
  4339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4340 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4342 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4343 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4344 ;;Total ram usage:        8 bytes
  4345 ;; Hardware stack levels used: 1
  4346 ;; Hardware stack levels required when called: 2
  4347 ;; This function calls:
  4348 ;;		Nothing
  4349 ;; This function is called by:
  4350 ;;		_efgtoa
  4351 ;; This function uses a non-reentrant model
  4352 ;;
  4353                           
  4354                           	psect	text12
  4355  0000'                    __ptext12:
  4356                           	callstack 0
  4357  0000'                    _labs:
  4358                           	callstack 24
  4359  0000' BE00'              	btfsc	(labs@a+3)^0,7,c
  4360  0002' EF00' F000'        	goto	u4220
  4361  0006' 5000'              	movf	(labs@a+3)^0,w,c
  4362  0008' 1000'              	iorwf	(labs@a+2)^0,w,c
  4363  000A' 1000'              	iorwf	(labs@a+1)^0,w,c
  4364  000C' E106               	bnz	u4221
  4365  000E' 0400'              	decf	labs@a^0,w,c
  4366  0010' B0D8               	btfsc	status,0,c
  4367  0012' EF00' F000'        	goto	u4221
  4368  0016' EF00' F000'        	goto	u4220
  4369  001A'                    u4221:
  4370  001A' EF00' F000'        	goto	l1337
  4371  001E'                    u4220:
  4372  001E' C004' F008'        	movff	labs@a,??_labs
  4373  0022' C005' F009'        	movff	labs@a+1,??_labs+1
  4374  0026' C006' F00A'        	movff	labs@a+2,??_labs+2
  4375  002A' C007' F00B'        	movff	labs@a+3,??_labs+3
  4376  002E' 1E00'              	comf	??_labs^0,f,c
  4377  0030' 1E00'              	comf	(??_labs+1)^0,f,c
  4378  0032' 1E00'              	comf	(??_labs+2)^0,f,c
  4379  0034' 1E00'              	comf	(??_labs+3)^0,f,c
  4380  0036' 2A00'              	incf	??_labs^0,f,c
  4381  0038' 0E00               	movlw	0
  4382  003A' 2200'              	addwfc	(??_labs+1)^0,f,c
  4383  003C' 2200'              	addwfc	(??_labs+2)^0,f,c
  4384  003E' 2200'              	addwfc	(??_labs+3)^0,f,c
  4385  0040' C008' F004'        	movff	??_labs,?_labs
  4386  0044' C009' F005'        	movff	??_labs+1,?_labs+1
  4387  0048' C00A' F006'        	movff	??_labs+2,?_labs+2
  4388  004C' C00B' F007'        	movff	??_labs+3,?_labs+3
  4389  0050' EF00' F000'        	goto	l1340
  4390  0054'                    l1337:
  4391  0054' C004' F004'        	movff	labs@a,?_labs
  4392  0058' C005' F005'        	movff	labs@a+1,?_labs+1
  4393  005C' C006' F006'        	movff	labs@a+2,?_labs+2
  4394  0060' C007' F007'        	movff	labs@a+3,?_labs+3
  4395  0064'                    l1340:
  4396  0064' 0012               	return		;funcret
  4397  0066'                    __end_of_labs:
  4398                           	callstack 0
  4399                           
  4400 ;; *************** function _floorf *****************
  4401 ;; Defined at:
  4402 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\floorf.c"
  4403 ;; Parameters:    Size  Location     Type
  4404 ;;  x               4   78[COMRAM] float 
  4405 ;; Auto vars:     Size  Location     Type
  4406 ;;  u               4   12[BANK0 ] struct .
  4407 ;;  m               4    6[BANK0 ] unsigned long 
  4408 ;;  e               2   10[BANK0 ] int 
  4409 ;; Return value:  Size  Location     Type
  4410 ;;                  4   78[COMRAM] float 
  4411 ;; Registers used:
  4412 ;;		wreg, status,2, status,0
  4413 ;; Tracked objects:
  4414 ;;		On entry : 0/0
  4415 ;;		On exit  : 0/0
  4416 ;;		Unchanged: 0/0
  4417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4418 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4419 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4420 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4421 ;;      Totals:         4      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4422 ;;Total ram usage:       20 bytes
  4423 ;; Hardware stack levels used: 1
  4424 ;; Hardware stack levels required when called: 2
  4425 ;; This function calls:
  4426 ;;		Nothing
  4427 ;; This function is called by:
  4428 ;;		_efgtoa
  4429 ;; This function uses a non-reentrant model
  4430 ;;
  4431                           
  4432                           	psect	text13
  4433  0000'                    __ptext13:
  4434                           	callstack 0
  4435  0000'                    _floorf:
  4436                           	callstack 24
  4437  0000' C014' F00C'        	movff	floorf@F526,floorf@u
  4438  0004' C015' F00D'        	movff	floorf@F526+1,floorf@u+1
  4439  0008' C016' F00E'        	movff	floorf@F526+2,floorf@u+2
  4440  000C' C017' F00F'        	movff	floorf@F526+3,floorf@u+3
  4441  0010' C04E' F00C'        	movff	floorf@x,floorf@u
  4442  0014' C04F' F00D'        	movff	floorf@x+1,floorf@u+1
  4443  0018' C050' F00E'        	movff	floorf@x+2,floorf@u+2
  4444  001C' C051' F00F'        	movff	floorf@x+3,floorf@u+3
  4445  0020' 0E81               	movlw	129
  4446  0022' 0100               	movlb	0	; () banked
  4447  0024' 6F00'              	movwf	??_floorf& (0+255),b
  4448  0026' 0EFF               	movlw	255
  4449  0028' 6F00'              	movwf	(??_floorf+1)& (0+255),b
  4450  002A' C00C' F002'        	movff	floorf@u,??_floorf+2
  4451  002E' C00D' F003'        	movff	floorf@u+1,??_floorf+3
  4452  0032' C00E' F004'        	movff	floorf@u+2,??_floorf+4
  4453  0036' C00F' F005'        	movff	floorf@u+3,??_floorf+5
  4454  003A' 0E18               	movlw	24
  4455  003C' EF00' F000'        	goto	u5820
  4456  0040'                    u5825:
  4457  0040' 90D8               	bcf	status,0,c
  4458  0042' 3300'              	rrcf	(??_floorf+5)& (0+255),f,b
  4459  0044' 3300'              	rrcf	(??_floorf+4)& (0+255),f,b
  4460  0046' 3300'              	rrcf	(??_floorf+3)& (0+255),f,b
  4461  0048' 3300'              	rrcf	(??_floorf+2)& (0+255),f,b
  4462  004A'                    u5820:
  4463  004A' 2EE8               	decfsz	wreg,f,c
  4464  004C' EF00' F000'        	goto	u5825
  4465  0050' 5100'              	movf	(??_floorf+2)& (0+255),w,b
  4466  0052' 2500'              	addwf	??_floorf& (0+255),w,b
  4467  0054' 6F00'              	movwf	floorf@e& (0+255),b
  4468  0056' 0E00               	movlw	0
  4469  0058' 2100'              	addwfc	(??_floorf+1)& (0+255),w,b
  4470  005A' 6F00'              	movwf	(floorf@e+1)& (0+255),b
  4471  005C' BF00'              	btfsc	(floorf@e+1)& (0+255),7,b
  4472  005E' EF00' F000'        	goto	u5831
  4473  0062' 5100'              	movf	(floorf@e+1)& (0+255),w,b
  4474  0064' E109               	bnz	u5830
  4475  0066' 0E17               	movlw	23
  4476  0068' 5D00'              	subwf	floorf@e& (0+255),w,b
  4477  006A' A0D8               	btfss	status,0,c
  4478  006C' EF00' F000'        	goto	u5831
  4479  0070' EF00' F000'        	goto	u5830
  4480  0074'                    u5831:
  4481  0074' EF00' F000'        	goto	l5341
  4482  0078'                    u5830:
  4483  0078'                    l5339:
  4484                           
  4485                           ; BSR set to: 0
  4486  0078' C04E' F04E'        	movff	floorf@x,?_floorf
  4487  007C' C04F' F04F'        	movff	floorf@x+1,?_floorf+1
  4488  0080' C050' F050'        	movff	floorf@x+2,?_floorf+2
  4489  0084' C051' F051'        	movff	floorf@x+3,?_floorf+3
  4490  0088' EF00' F000'        	goto	l1326
  4491  008C'                    l5341:
  4492                           
  4493                           ; BSR set to: 0
  4494  008C' BF00'              	btfsc	(floorf@e+1)& (0+255),7,b
  4495  008E' EF00' F000'        	goto	u5841
  4496  0092' EF00' F000'        	goto	u5840
  4497  0096'                    u5841:
  4498  0096' EF00' F000'        	goto	l5351
  4499  009A'                    u5840:
  4500  009A'                    
  4501                           ; BSR set to: 0
  4502  009A' C00A' F000'        	movff	floorf@e,??_floorf
  4503  009E' 0EFF               	movlw	255
  4504  00A0' 6F00'              	movwf	(??_floorf+1)& (0+255),b
  4505  00A2' 0EFF               	movlw	255
  4506  00A4' 6F00'              	movwf	(??_floorf+2)& (0+255),b
  4507  00A6' 0E7F               	movlw	127
  4508  00A8' 6F00'              	movwf	(??_floorf+3)& (0+255),b
  4509  00AA' 0E00               	movlw	0
  4510  00AC' 6F00'              	movwf	(??_floorf+4)& (0+255),b
  4511  00AE'                    u5855:
  4512  00AE' 6700'              	tstfsz	??_floorf& (0+255),b
  4513  00B0' EF00' F000'        	goto	u5856
  4514  00B4' EF00' F000'        	goto	u5857
  4515  00B8'                    u5856:
  4516  00B8' 3500'              	rlcf	(??_floorf+4)& (0+255),w,b
  4517  00BA' 3300'              	rrcf	(??_floorf+4)& (0+255),f,b
  4518  00BC' 3300'              	rrcf	(??_floorf+3)& (0+255),f,b
  4519  00BE' 3300'              	rrcf	(??_floorf+2)& (0+255),f,b
  4520  00C0' 3300'              	rrcf	(??_floorf+1)& (0+255),f,b
  4521  00C2' 2F00'              	decfsz	??_floorf& (0+255),f,b
  4522  00C4' EF00' F000'        	goto	u5855
  4523  00C8'                    u5857:
  4524  00C8' C001' F006'        	movff	??_floorf+1,floorf@m
  4525  00CC' C002' F007'        	movff	??_floorf+2,floorf@m+1
  4526  00D0' C003' F008'        	movff	??_floorf+3,floorf@m+2
  4527  00D4' C004' F009'        	movff	??_floorf+4,floorf@m+3
  4528  00D8' 0100               	movlb	0	; () banked
  4529  00DA' 5100'              	movf	floorf@m& (0+255),w,b
  4530  00DC' 1500'              	andwf	floorf@u& (0+255),w,b
  4531  00DE' 6F00'              	movwf	??_floorf& (0+255),b
  4532  00E0' 5100'              	movf	(floorf@m+1)& (0+255),w,b
  4533  00E2' 1500'              	andwf	(floorf@u+1)& (0+255),w,b
  4534  00E4' 6F00'              	movwf	(??_floorf+1)& (0+255),b
  4535  00E6' 5100'              	movf	(floorf@m+2)& (0+255),w,b
  4536  00E8' 1500'              	andwf	(floorf@u+2)& (0+255),w,b
  4537  00EA' 6F00'              	movwf	(??_floorf+2)& (0+255),b
  4538  00EC' 5100'              	movf	(floorf@m+3)& (0+255),w,b
  4539  00EE' 1500'              	andwf	(floorf@u+3)& (0+255),w,b
  4540  00F0' 6F00'              	movwf	(??_floorf+3)& (0+255),b
  4541  00F2' 5100'              	movf	??_floorf& (0+255),w,b
  4542  00F4' 1100'              	iorwf	(??_floorf+1)& (0+255),w,b
  4543  00F6' 1100'              	iorwf	(??_floorf+2)& (0+255),w,b
  4544  00F8' 1100'              	iorwf	(??_floorf+3)& (0+255),w,b
  4545  00FA' A4D8               	btfss	status,2,c
  4546  00FC' EF00' F000'        	goto	u5861
  4547  0100' EF00' F000'        	goto	u5860
  4548  0104'                    u5861:
  4549  0104' EF00' F000'        	goto	l5347
  4550  0108'                    u5860:
  4551  0108' EF00' F000'        	goto	l5339
  4552  010C'                    l5347:
  4553                           
  4554                           ; BSR set to: 0
  4555  010C' C00C' F000'        	movff	floorf@u,??_floorf
  4556  0110' C00D' F001'        	movff	floorf@u+1,??_floorf+1
  4557  0114' C00E' F002'        	movff	floorf@u+2,??_floorf+2
  4558  0118' C00F' F003'        	movff	floorf@u+3,??_floorf+3
  4559  011C' 0E20               	movlw	32
  4560  011E' EF00' F000'        	goto	u5870
  4561  0122'                    u5875:
  4562  0122' 90D8               	bcf	status,0,c
  4563  0124' 3300'              	rrcf	(??_floorf+3)& (0+255),f,b
  4564  0126' 3300'              	rrcf	(??_floorf+2)& (0+255),f,b
  4565  0128' 3300'              	rrcf	(??_floorf+1)& (0+255),f,b
  4566  012A' 3300'              	rrcf	??_floorf& (0+255),f,b
  4567  012C'                    u5870:
  4568  012C' 2EE8               	decfsz	wreg,f,c
  4569  012E' EF00' F000'        	goto	u5875
  4570  0132' 5100'              	movf	??_floorf& (0+255),w,b
  4571  0134' 1100'              	iorwf	(??_floorf+1)& (0+255),w,b
  4572  0136' 1100'              	iorwf	(??_floorf+2)& (0+255),w,b
  4573  0138' 1100'              	iorwf	(??_floorf+3)& (0+255),w,b
  4574  013A' B4D8               	btfsc	status,2,c
  4575  013C' EF00' F000'        	goto	u5881
  4576  0140' EF00' F000'        	goto	u5880
  4577  0144'                    u5881:
  4578  0144' EF00' F000'        	goto	l1329
  4579  0148'                    u5880:
  4580  0148'                    
  4581                           ; BSR set to: 0
  4582  0148' 5100'              	movf	floorf@m& (0+255),w,b
  4583  014A' 2700'              	addwf	floorf@u& (0+255),f,b
  4584  014C' 5100'              	movf	(floorf@m+1)& (0+255),w,b
  4585  014E' 2300'              	addwfc	(floorf@u+1)& (0+255),f,b
  4586  0150' 5100'              	movf	(floorf@m+2)& (0+255),w,b
  4587  0152' 2300'              	addwfc	(floorf@u+2)& (0+255),f,b
  4588  0154' 5100'              	movf	(floorf@m+3)& (0+255),w,b
  4589  0156' 2300'              	addwfc	(floorf@u+3)& (0+255),f,b
  4590  0158'                    l1329:
  4591                           
  4592                           ; BSR set to: 0
  4593  0158' 1D00'              	comf	floorf@m& (0+255),w,b
  4594  015A' 6F00'              	movwf	??_floorf& (0+255),b
  4595  015C' 1D00'              	comf	(floorf@m+1)& (0+255),w,b
  4596  015E' 6F00'              	movwf	(??_floorf+1)& (0+255),b
  4597  0160' 1D00'              	comf	(floorf@m+2)& (0+255),w,b
  4598  0162' 6F00'              	movwf	(??_floorf+2)& (0+255),b
  4599  0164' 1D00'              	comf	(floorf@m+3)& (0+255),w,b
  4600  0166' 6F00'              	movwf	(??_floorf+3)& (0+255),b
  4601  0168' 5100'              	movf	??_floorf& (0+255),w,b
  4602  016A' 1700'              	andwf	floorf@u& (0+255),f,b
  4603  016C' 5100'              	movf	(??_floorf+1)& (0+255),w,b
  4604  016E' 1700'              	andwf	(floorf@u+1)& (0+255),f,b
  4605  0170' 5100'              	movf	(??_floorf+2)& (0+255),w,b
  4606  0172' 1700'              	andwf	(floorf@u+2)& (0+255),f,b
  4607  0174' 5100'              	movf	(??_floorf+3)& (0+255),w,b
  4608  0176' 1700'              	andwf	(floorf@u+3)& (0+255),f,b
  4609  0178' EF00' F000'        	goto	l5359
  4610  017C'                    l5351:
  4611                           
  4612                           ; BSR set to: 0
  4613  017C' C00C' F000'        	movff	floorf@u,??_floorf
  4614  0180' C00D' F001'        	movff	floorf@u+1,??_floorf+1
  4615  0184' C00E' F002'        	movff	floorf@u+2,??_floorf+2
  4616  0188' C00F' F003'        	movff	floorf@u+3,??_floorf+3
  4617  018C' 0E20               	movlw	32
  4618  018E' EF00' F000'        	goto	u5890
  4619  0192'                    u5895:
  4620  0192' 90D8               	bcf	status,0,c
  4621  0194' 3300'              	rrcf	(??_floorf+3)& (0+255),f,b
  4622  0196' 3300'              	rrcf	(??_floorf+2)& (0+255),f,b
  4623  0198' 3300'              	rrcf	(??_floorf+1)& (0+255),f,b
  4624  019A' 3300'              	rrcf	??_floorf& (0+255),f,b
  4625  019C'                    u5890:
  4626  019C' 2EE8               	decfsz	wreg,f,c
  4627  019E' EF00' F000'        	goto	u5895
  4628  01A2' 5100'              	movf	??_floorf& (0+255),w,b
  4629  01A4' 1100'              	iorwf	(??_floorf+1)& (0+255),w,b
  4630  01A6' 1100'              	iorwf	(??_floorf+2)& (0+255),w,b
  4631  01A8' 1100'              	iorwf	(??_floorf+3)& (0+255),w,b
  4632  01AA' A4D8               	btfss	status,2,c
  4633  01AC' EF00' F000'        	goto	u5901
  4634  01B0' EF00' F000'        	goto	u5900
  4635  01B4'                    u5901:
  4636  01B4' EF00' F000'        	goto	l5355
  4637  01B8'                    u5900:
  4638  01B8'                    
  4639                           ; BSR set to: 0
  4640  01B8' 0E00               	movlw	0
  4641  01BA' 6F00'              	movwf	floorf@u& (0+255),b
  4642  01BC' 0E00               	movlw	0
  4643  01BE' 6F00'              	movwf	(floorf@u+1)& (0+255),b
  4644  01C0' 0E00               	movlw	0
  4645  01C2' 6F00'              	movwf	(floorf@u+2)& (0+255),b
  4646  01C4' 0E00               	movlw	0
  4647  01C6' 6F00'              	movwf	(floorf@u+3)& (0+255),b
  4648  01C8' EF00' F000'        	goto	l5359
  4649  01CC'                    l5355:
  4650                           
  4651                           ; BSR set to: 0
  4652  01CC' 90D8               	bcf	status,0,c
  4653  01CE' 3500'              	rlcf	floorf@u& (0+255),w,b
  4654  01D0' 6F00'              	movwf	??_floorf& (0+255),b
  4655  01D2' 3500'              	rlcf	(floorf@u+1)& (0+255),w,b
  4656  01D4' 6F00'              	movwf	(??_floorf+1)& (0+255),b
  4657  01D6' 3500'              	rlcf	(floorf@u+2)& (0+255),w,b
  4658  01D8' 6F00'              	movwf	(??_floorf+2)& (0+255),b
  4659  01DA' 3500'              	rlcf	(floorf@u+3)& (0+255),w,b
  4660  01DC' 6F00'              	movwf	(??_floorf+3)& (0+255),b
  4661  01DE' 5100'              	movf	??_floorf& (0+255),w,b
  4662  01E0' 1100'              	iorwf	(??_floorf+1)& (0+255),w,b
  4663  01E2' 1100'              	iorwf	(??_floorf+2)& (0+255),w,b
  4664  01E4' 1100'              	iorwf	(??_floorf+3)& (0+255),w,b
  4665  01E6' B4D8               	btfsc	status,2,c
  4666  01E8' EF00' F000'        	goto	u5911
  4667  01EC' EF00' F000'        	goto	u5910
  4668  01F0'                    u5911:
  4669  01F0' EF00' F000'        	goto	l5359
  4670  01F4'                    u5910:
  4671  01F4'                    
  4672                           ; BSR set to: 0
  4673  01F4' 0E00               	movlw	0
  4674  01F6' 6F00'              	movwf	floorf@u& (0+255),b
  4675  01F8' 0E00               	movlw	0
  4676  01FA' 6F00'              	movwf	(floorf@u+1)& (0+255),b
  4677  01FC' 0E80               	movlw	128
  4678  01FE' 6F00'              	movwf	(floorf@u+2)& (0+255),b
  4679  0200' 0EBF               	movlw	191
  4680  0202' 6F00'              	movwf	(floorf@u+3)& (0+255),b
  4681  0204'                    l5359:
  4682                           
  4683                           ; BSR set to: 0
  4684  0204' C00C' F04E'        	movff	floorf@u,?_floorf
  4685  0208' C00D' F04F'        	movff	floorf@u+1,?_floorf+1
  4686  020C' C00E' F050'        	movff	floorf@u+2,?_floorf+2
  4687  0210' C00F' F051'        	movff	floorf@u+3,?_floorf+3
  4688  0214'                    l1326:
  4689                           
  4690                           ; BSR set to: 0
  4691  0214' 0012               	return		;funcret
  4692  0216'                    __end_of_floorf:
  4693                           	callstack 0
  4694                           
  4695 ;; *************** function ___fpclassifyf *****************
  4696 ;; Defined at:
  4697 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\__fpclassifyf.c"
  4698 ;; Parameters:    Size  Location     Type
  4699 ;;  x               4    4[COMRAM] float 
  4700 ;; Auto vars:     Size  Location     Type
  4701 ;;  u               4   14[COMRAM] struct .
  4702 ;;  e               2   12[COMRAM] int 
  4703 ;; Return value:  Size  Location     Type
  4704 ;;                  2    4[COMRAM] int 
  4705 ;; Registers used:
  4706 ;;		wreg, status,2, status,0
  4707 ;; Tracked objects:
  4708 ;;		On entry : 0/0
  4709 ;;		On exit  : 0/0
  4710 ;;		Unchanged: 0/0
  4711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4712 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4713 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4714 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4715 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4716 ;;Total ram usage:       14 bytes
  4717 ;; Hardware stack levels used: 1
  4718 ;; Hardware stack levels required when called: 2
  4719 ;; This function calls:
  4720 ;;		Nothing
  4721 ;; This function is called by:
  4722 ;;		_efgtoa
  4723 ;; This function uses a non-reentrant model
  4724 ;;
  4725                           
  4726                           	psect	text14
  4727  0000'                    __ptext14:
  4728                           	callstack 0
  4729  0000'                    ___fpclassifyf:
  4730                           	callstack 24
  4731  0000' C018' F00E'        	movff	___fpclassifyf@F465,___fpclassifyf@u
  4732  0004' C019' F00F'        	movff	___fpclassifyf@F465+1,___fpclassifyf@u+1
  4733  0008' C01A' F010'        	movff	___fpclassifyf@F465+2,___fpclassifyf@u+2
  4734  000C' C01B' F011'        	movff	___fpclassifyf@F465+3,___fpclassifyf@u+3
  4735  0010' C004' F00E'        	movff	___fpclassifyf@x,___fpclassifyf@u
  4736  0014' C005' F00F'        	movff	___fpclassifyf@x+1,___fpclassifyf@u+1
  4737  0018' C006' F010'        	movff	___fpclassifyf@x+2,___fpclassifyf@u+2
  4738  001C' C007' F011'        	movff	___fpclassifyf@x+3,___fpclassifyf@u+3
  4739  0020' C00E' F008'        	movff	___fpclassifyf@u,??___fpclassifyf
  4740  0024' C00F' F009'        	movff	___fpclassifyf@u+1,??___fpclassifyf+1
  4741  0028' C010' F00A'        	movff	___fpclassifyf@u+2,??___fpclassifyf+2
  4742  002C' C011' F00B'        	movff	___fpclassifyf@u+3,??___fpclassifyf+3
  4743  0030' 0E18               	movlw	24
  4744  0032' EF00' F000'        	goto	u4140
  4745  0036'                    u4145:
  4746  0036' 90D8               	bcf	status,0,c
  4747  0038' 3200'              	rrcf	(??___fpclassifyf+3)^0,f,c
  4748  003A' 3200'              	rrcf	(??___fpclassifyf+2)^0,f,c
  4749  003C' 3200'              	rrcf	(??___fpclassifyf+1)^0,f,c
  4750  003E' 3200'              	rrcf	??___fpclassifyf^0,f,c
  4751  0040'                    u4140:
  4752  0040' 2EE8               	decfsz	wreg,f,c
  4753  0042' EF00' F000'        	goto	u4145
  4754  0046' 5000'              	movf	??___fpclassifyf^0,w,c
  4755  0048' 6E00'              	movwf	___fpclassifyf@e^0,c
  4756  004A' 6A00'              	clrf	(___fpclassifyf@e+1)^0,c
  4757  004C' 5000'              	movf	___fpclassifyf@e^0,w,c
  4758  004E' 1000'              	iorwf	(___fpclassifyf@e+1)^0,w,c
  4759  0050' A4D8               	btfss	status,2,c
  4760  0052' EF00' F000'        	goto	u4151
  4761  0056' EF00' F000'        	goto	u4150
  4762  005A'                    u4151:
  4763  005A' EF00' F000'        	goto	l4077
  4764  005E'                    u4150:
  4765  005E' 90D8               	bcf	status,0,c
  4766  0060' 3400'              	rlcf	___fpclassifyf@u^0,w,c
  4767  0062' 6E00'              	movwf	??___fpclassifyf^0,c
  4768  0064' 3400'              	rlcf	(___fpclassifyf@u+1)^0,w,c
  4769  0066' 6E00'              	movwf	(??___fpclassifyf+1)^0,c
  4770  0068' 3400'              	rlcf	(___fpclassifyf@u+2)^0,w,c
  4771  006A' 6E00'              	movwf	(??___fpclassifyf+2)^0,c
  4772  006C' 3400'              	rlcf	(___fpclassifyf@u+3)^0,w,c
  4773  006E' 6E00'              	movwf	(??___fpclassifyf+3)^0,c
  4774  0070' 5000'              	movf	??___fpclassifyf^0,w,c
  4775  0072' 1000'              	iorwf	(??___fpclassifyf+1)^0,w,c
  4776  0074' 1000'              	iorwf	(??___fpclassifyf+2)^0,w,c
  4777  0076' 1000'              	iorwf	(??___fpclassifyf+3)^0,w,c
  4778  0078' A4D8               	btfss	status,2,c
  4779  007A' EF00' F000'        	goto	u4161
  4780  007E' EF00' F000'        	goto	u4160
  4781  0082'                    u4161:
  4782  0082' EF00' F000'        	goto	l4073
  4783  0086'                    u4160:
  4784  0086' 0E00               	movlw	0
  4785  0088' 6E00'              	movwf	(?___fpclassifyf+1)^0,c
  4786  008A' 0E02               	movlw	2
  4787  008C' 6E00'              	movwf	?___fpclassifyf^0,c
  4788  008E' EF00' F000'        	goto	l1312
  4789  0092'                    l4073:
  4790  0092' 0E00               	movlw	0
  4791  0094' 6E00'              	movwf	(?___fpclassifyf+1)^0,c
  4792  0096' 0E03               	movlw	3
  4793  0098' 6E00'              	movwf	?___fpclassifyf^0,c
  4794  009A' EF00' F000'        	goto	l1312
  4795  009E'                    l4077:
  4796  009E' 2800'              	incf	___fpclassifyf@e^0,w,c
  4797  00A0' 1000'              	iorwf	(___fpclassifyf@e+1)^0,w,c
  4798  00A2' A4D8               	btfss	status,2,c
  4799  00A4' EF00' F000'        	goto	u4171
  4800  00A8' EF00' F000'        	goto	u4170
  4801  00AC'                    u4171:
  4802  00AC' EF00' F000'        	goto	l4083
  4803  00B0'                    u4170:
  4804  00B0' C00E' F008'        	movff	___fpclassifyf@u,??___fpclassifyf
  4805  00B4' C00F' F009'        	movff	___fpclassifyf@u+1,??___fpclassifyf+1
  4806  00B8' C010' F00A'        	movff	___fpclassifyf@u+2,??___fpclassifyf+2
  4807  00BC' C011' F00B'        	movff	___fpclassifyf@u+3,??___fpclassifyf+3
  4808  00C0' 0E09               	movlw	9
  4809  00C2'                    u4185:
  4810  00C2' 90D8               	bcf	status,0,c
  4811  00C4' 3600'              	rlcf	??___fpclassifyf^0,f,c
  4812  00C6' 3600'              	rlcf	(??___fpclassifyf+1)^0,f,c
  4813  00C8' 3600'              	rlcf	(??___fpclassifyf+2)^0,f,c
  4814  00CA' 3600'              	rlcf	(??___fpclassifyf+3)^0,f,c
  4815  00CC' 2EE8               	decfsz	wreg,f,c
  4816  00CE' EF00' F000'        	goto	u4185
  4817  00D2' 5000'              	movf	??___fpclassifyf^0,w,c
  4818  00D4' 1000'              	iorwf	(??___fpclassifyf+1)^0,w,c
  4819  00D6' 1000'              	iorwf	(??___fpclassifyf+2)^0,w,c
  4820  00D8' 1000'              	iorwf	(??___fpclassifyf+3)^0,w,c
  4821  00DA' B4D8               	btfsc	status,2,c
  4822  00DC' EF00' F000'        	goto	u4191
  4823  00E0' EF00' F000'        	goto	u4190
  4824  00E4'                    u4191:
  4825  00E4' 0E01               	movlw	1
  4826  00E6' EF00' F000'        	goto	u4200
  4827  00EA'                    u4190:
  4828  00EA' 0E00               	movlw	0
  4829  00EC'                    u4200:
  4830  00EC' 6E00'              	movwf	?___fpclassifyf^0,c
  4831  00EE' 6A00'              	clrf	(?___fpclassifyf+1)^0,c
  4832  00F0' EF00' F000'        	goto	l1312
  4833  00F4'                    l4083:
  4834  00F4' 0E00               	movlw	0
  4835  00F6' 6E00'              	movwf	(?___fpclassifyf+1)^0,c
  4836  00F8' 0E04               	movlw	4
  4837  00FA' 6E00'              	movwf	?___fpclassifyf^0,c
  4838  00FC'                    l1312:
  4839  00FC' 0012               	return		;funcret
  4840  00FE'                    __end_of___fpclassifyf:
  4841                           	callstack 0
  4842                           
  4843 ;; *************** function ___fltol *****************
  4844 ;; Defined at:
  4845 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\fltol.c"
  4846 ;; Parameters:    Size  Location     Type
  4847 ;;  f1              4    4[COMRAM] int 
  4848 ;; Auto vars:     Size  Location     Type
  4849 ;;  exp1            1   13[COMRAM] unsigned char 
  4850 ;;  sign1           1   12[COMRAM] unsigned char 
  4851 ;; Return value:  Size  Location     Type
  4852 ;;                  4    4[COMRAM] long 
  4853 ;; Registers used:
  4854 ;;		wreg, status,2, status,0
  4855 ;; Tracked objects:
  4856 ;;		On entry : 0/0
  4857 ;;		On exit  : 0/0
  4858 ;;		Unchanged: 0/0
  4859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4860 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4861 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4862 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4863 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4864 ;;Total ram usage:       10 bytes
  4865 ;; Hardware stack levels used: 1
  4866 ;; Hardware stack levels required when called: 2
  4867 ;; This function calls:
  4868 ;;		Nothing
  4869 ;; This function is called by:
  4870 ;;		_efgtoa
  4871 ;;		_turnLeft
  4872 ;;		_turnRight
  4873 ;;		_turnLeft_90
  4874 ;;		_turnRight_90
  4875 ;;		_turn_180
  4876 ;;		_turnRight_135
  4877 ;;		_turnLeft_135
  4878 ;; This function uses a non-reentrant model
  4879 ;;
  4880                           
  4881                           	psect	text15
  4882  0000'                    __ptext15:
  4883                           	callstack 0
  4884  0000'                    ___fltol:
  4885                           	callstack 24
  4886  0000' 3400'              	rlcf	(___fltol@f1+2)^0,w,c
  4887  0002' 3400'              	rlcf	(___fltol@f1+3)^0,w,c
  4888  0004' 6E00'              	movwf	___fltol@exp1^0,c
  4889  0006' 5000'              	movf	___fltol@exp1^0,w,c
  4890  0008' A4D8               	btfss	status,2,c
  4891  000A' EF00' F000'        	goto	u4041
  4892  000E' EF00' F000'        	goto	u4040
  4893  0012'                    u4041:
  4894  0012' EF00' F000'        	goto	l4009
  4895  0016'                    u4040:
  4896  0016'                    l4005:
  4897  0016' 0E00               	movlw	0
  4898  0018' 6E00'              	movwf	?___fltol^0,c
  4899  001A' 0E00               	movlw	0
  4900  001C' 6E00'              	movwf	(?___fltol+1)^0,c
  4901  001E' 0E00               	movlw	0
  4902  0020' 6E00'              	movwf	(?___fltol+2)^0,c
  4903  0022' 0E00               	movlw	0
  4904  0024' 6E00'              	movwf	(?___fltol+3)^0,c
  4905  0026' EF00' F000'        	goto	l785
  4906  002A'                    l4009:
  4907  002A' C004' F008'        	movff	___fltol@f1,??___fltol
  4908  002E' C005' F009'        	movff	___fltol@f1+1,??___fltol+1
  4909  0032' C006' F00A'        	movff	___fltol@f1+2,??___fltol+2
  4910  0036' C007' F00B'        	movff	___fltol@f1+3,??___fltol+3
  4911  003A' 0E20               	movlw	32
  4912  003C' EF00' F000'        	goto	u4050
  4913  0040'                    u4055:
  4914  0040' 90D8               	bcf	status,0,c
  4915  0042' 3200'              	rrcf	(??___fltol+3)^0,f,c
  4916  0044' 3200'              	rrcf	(??___fltol+2)^0,f,c
  4917  0046' 3200'              	rrcf	(??___fltol+1)^0,f,c
  4918  0048' 3200'              	rrcf	??___fltol^0,f,c
  4919  004A'                    u4050:
  4920  004A' 2EE8               	decfsz	wreg,f,c
  4921  004C' EF00' F000'        	goto	u4055
  4922  0050' 5000'              	movf	??___fltol^0,w,c
  4923  0052' 6E00'              	movwf	___fltol@sign1^0,c
  4924  0054' 8E00'              	bsf	(___fltol@f1+2)^0,7,c
  4925  0056' 0EFF               	movlw	255
  4926  0058' 1600'              	andwf	___fltol@f1^0,f,c
  4927  005A' 0EFF               	movlw	255
  4928  005C' 1600'              	andwf	(___fltol@f1+1)^0,f,c
  4929  005E' 0EFF               	movlw	255
  4930  0060' 1600'              	andwf	(___fltol@f1+2)^0,f,c
  4931  0062' 0E00               	movlw	0
  4932  0064' 1600'              	andwf	(___fltol@f1+3)^0,f,c
  4933  0066' 0E96               	movlw	150
  4934  0068' 5E00'              	subwf	___fltol@exp1^0,f,c
  4935  006A' BE00'              	btfsc	___fltol@exp1^0,7,c
  4936  006C' EF00' F000'        	goto	u4060
  4937  0070' EF00' F000'        	goto	u4061
  4938  0074'                    u4061:
  4939  0074' EF00' F000'        	goto	l4029
  4940  0078'                    u4060:
  4941  0078' 5000'              	movf	___fltol@exp1^0,w,c
  4942  007A' 0A80               	xorlw	128
  4943  007C' 0F97               	addlw	151
  4944  007E' B0D8               	btfsc	status,0,c
  4945  0080' EF00' F000'        	goto	u4071
  4946  0084' EF00' F000'        	goto	u4070
  4947  0088'                    u4071:
  4948  0088' EF00' F000'        	goto	l4025
  4949  008C'                    u4070:
  4950  008C' EF00' F000'        	goto	l4005
  4951  0090'                    l4025:
  4952  0090' 90D8               	bcf	status,0,c
  4953  0092' 3200'              	rrcf	(___fltol@f1+3)^0,f,c
  4954  0094' 3200'              	rrcf	(___fltol@f1+2)^0,f,c
  4955  0096' 3200'              	rrcf	(___fltol@f1+1)^0,f,c
  4956  0098' 3200'              	rrcf	___fltol@f1^0,f,c
  4957  009A' 3E00'              	incfsz	___fltol@exp1^0,f,c
  4958  009C' EF00' F000'        	goto	l4025
  4959  00A0' EF00' F000'        	goto	l4039
  4960  00A4'                    l4029:
  4961  00A4' 0E1F               	movlw	31
  4962  00A6' 6400'              	cpfsgt	___fltol@exp1^0,c
  4963  00A8' EF00' F000'        	goto	u4081
  4964  00AC' EF00' F000'        	goto	u4080
  4965  00B0'                    u4081:
  4966  00B0' EF00' F000'        	goto	l4037
  4967  00B4'                    u4080:
  4968  00B4' EF00' F000'        	goto	l4005
  4969  00B8'                    l4035:
  4970  00B8' 90D8               	bcf	status,0,c
  4971  00BA' 3600'              	rlcf	___fltol@f1^0,f,c
  4972  00BC' 3600'              	rlcf	(___fltol@f1+1)^0,f,c
  4973  00BE' 3600'              	rlcf	(___fltol@f1+2)^0,f,c
  4974  00C0' 3600'              	rlcf	(___fltol@f1+3)^0,f,c
  4975  00C2' 0600'              	decf	___fltol@exp1^0,f,c
  4976  00C4'                    l4037:
  4977  00C4' 5000'              	movf	___fltol@exp1^0,w,c
  4978  00C6' A4D8               	btfss	status,2,c
  4979  00C8' EF00' F000'        	goto	u4091
  4980  00CC' EF00' F000'        	goto	u4090
  4981  00D0'                    u4091:
  4982  00D0' EF00' F000'        	goto	l4035
  4983  00D4'                    u4090:
  4984  00D4'                    l4039:
  4985  00D4' 5000'              	movf	___fltol@sign1^0,w,c
  4986  00D6' B4D8               	btfsc	status,2,c
  4987  00D8' EF00' F000'        	goto	u4101
  4988  00DC' EF00' F000'        	goto	u4100
  4989  00E0'                    u4101:
  4990  00E0' EF00' F000'        	goto	l4043
  4991  00E4'                    u4100:
  4992  00E4' 1E00'              	comf	(___fltol@f1+3)^0,f,c
  4993  00E6' 1E00'              	comf	(___fltol@f1+2)^0,f,c
  4994  00E8' 1E00'              	comf	(___fltol@f1+1)^0,f,c
  4995  00EA' 6C00'              	negf	___fltol@f1^0,c
  4996  00EC' 0E00               	movlw	0
  4997  00EE' 2200'              	addwfc	(___fltol@f1+1)^0,f,c
  4998  00F0' 2200'              	addwfc	(___fltol@f1+2)^0,f,c
  4999  00F2' 2200'              	addwfc	(___fltol@f1+3)^0,f,c
  5000  00F4'                    l4043:
  5001  00F4' C004' F004'        	movff	___fltol@f1,?___fltol
  5002  00F8' C005' F005'        	movff	___fltol@f1+1,?___fltol+1
  5003  00FC' C006' F006'        	movff	___fltol@f1+2,?___fltol+2
  5004  0100' C007' F007'        	movff	___fltol@f1+3,?___fltol+3
  5005  0104'                    l785:
  5006  0104' 0012               	return		;funcret
  5007  0106'                    __end_of___fltol:
  5008                           	callstack 0
  5009                           
  5010 ;; *************** function ___flneg *****************
  5011 ;; Defined at:
  5012 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\flneg.c"
  5013 ;; Parameters:    Size  Location     Type
  5014 ;;  f1              4    4[COMRAM] long 
  5015 ;; Auto vars:     Size  Location     Type
  5016 ;;		None
  5017 ;; Return value:  Size  Location     Type
  5018 ;;                  4    4[COMRAM] long 
  5019 ;; Registers used:
  5020 ;;		wreg, status,2, status,0
  5021 ;; Tracked objects:
  5022 ;;		On entry : 0/0
  5023 ;;		On exit  : 0/0
  5024 ;;		Unchanged: 0/0
  5025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5026 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5029 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5030 ;;Total ram usage:        4 bytes
  5031 ;; Hardware stack levels used: 1
  5032 ;; Hardware stack levels required when called: 2
  5033 ;; This function calls:
  5034 ;;		Nothing
  5035 ;; This function is called by:
  5036 ;;		_efgtoa
  5037 ;; This function uses a non-reentrant model
  5038 ;;
  5039                           
  5040                           	psect	text16
  5041  0000'                    __ptext16:
  5042                           	callstack 0
  5043  0000'                    ___flneg:
  5044                           	callstack 24
  5045  0000' 5000'              	movf	___flneg@f1^0,w,c
  5046  0002' 1000'              	iorwf	(___flneg@f1+1)^0,w,c
  5047  0004' 1000'              	iorwf	(___flneg@f1+2)^0,w,c
  5048  0006' 1000'              	iorwf	(___flneg@f1+3)^0,w,c
  5049  0008' B4D8               	btfsc	status,2,c
  5050  000A' EF00' F000'        	goto	u4031
  5051  000E' EF00' F000'        	goto	u4030
  5052  0012'                    u4031:
  5053  0012' EF00' F000'        	goto	l3999
  5054  0016'                    u4030:
  5055  0016' 0E00               	movlw	0
  5056  0018' 1A00'              	xorwf	___flneg@f1^0,f,c
  5057  001A' 0E00               	movlw	0
  5058  001C' 1A00'              	xorwf	(___flneg@f1+1)^0,f,c
  5059  001E' 0E00               	movlw	0
  5060  0020' 1A00'              	xorwf	(___flneg@f1+2)^0,f,c
  5061  0022' 0E80               	movlw	128
  5062  0024' 1A00'              	xorwf	(___flneg@f1+3)^0,f,c
  5063  0026'                    l3999:
  5064  0026' C004' F004'        	movff	___flneg@f1,?___flneg
  5065  002A' C005' F005'        	movff	___flneg@f1+1,?___flneg+1
  5066  002E' C006' F006'        	movff	___flneg@f1+2,?___flneg+2
  5067  0032' C007' F007'        	movff	___flneg@f1+3,?___flneg+3
  5068  0036' 0012               	return		;funcret
  5069  0038'                    __end_of___flneg:
  5070                           	callstack 0
  5071                           
  5072 ;; *************** function ___fleq *****************
  5073 ;; Defined at:
  5074 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\fleq.c"
  5075 ;; Parameters:    Size  Location     Type
  5076 ;;  ff1             4    4[COMRAM] long 
  5077 ;;  ff2             4    8[COMRAM] long 
  5078 ;; Auto vars:     Size  Location     Type
  5079 ;;		None
  5080 ;; Return value:  Size  Location     Type
  5081 ;;		None               void
  5082 ;; Registers used:
  5083 ;;		wreg, status,2, status,0
  5084 ;; Tracked objects:
  5085 ;;		On entry : 0/0
  5086 ;;		On exit  : 0/0
  5087 ;;		Unchanged: 0/0
  5088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5089 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5091 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5092 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5093 ;;Total ram usage:       12 bytes
  5094 ;; Hardware stack levels used: 1
  5095 ;; Hardware stack levels required when called: 2
  5096 ;; This function calls:
  5097 ;;		Nothing
  5098 ;; This function is called by:
  5099 ;;		_efgtoa
  5100 ;; This function uses a non-reentrant model
  5101 ;;
  5102                           
  5103                           	psect	text17
  5104  0000'                    __ptext17:
  5105                           	callstack 0
  5106  0000'                    ___fleq:
  5107                           	callstack 24
  5108  0000' 0E00               	movlw	0
  5109  0002' 1400'              	andwf	___fleq@ff1^0,w,c
  5110  0004' 6E00'              	movwf	??___fleq^0,c
  5111  0006' 0E00               	movlw	0
  5112  0008' 1400'              	andwf	(___fleq@ff1+1)^0,w,c
  5113  000A' 6E00'              	movwf	(??___fleq+1)^0,c
  5114  000C' 0E80               	movlw	128
  5115  000E' 1400'              	andwf	(___fleq@ff1+2)^0,w,c
  5116  0010' 6E00'              	movwf	(??___fleq+2)^0,c
  5117  0012' 0E7F               	movlw	127
  5118  0014' 1400'              	andwf	(___fleq@ff1+3)^0,w,c
  5119  0016' 6E00'              	movwf	(??___fleq+3)^0,c
  5120  0018' 5000'              	movf	??___fleq^0,w,c
  5121  001A' 1000'              	iorwf	(??___fleq+1)^0,w,c
  5122  001C' 1000'              	iorwf	(??___fleq+2)^0,w,c
  5123  001E' 1000'              	iorwf	(??___fleq+3)^0,w,c
  5124  0020' A4D8               	btfss	status,2,c
  5125  0022' EF00' F000'        	goto	u3951
  5126  0026' EF00' F000'        	goto	u3950
  5127  002A'                    u3951:
  5128  002A' EF00' F000'        	goto	l3961
  5129  002E'                    u3950:
  5130  002E' 0E00               	movlw	0
  5131  0030' 6E00'              	movwf	___fleq@ff1^0,c
  5132  0032' 0E00               	movlw	0
  5133  0034' 6E00'              	movwf	(___fleq@ff1+1)^0,c
  5134  0036' 0E00               	movlw	0
  5135  0038' 6E00'              	movwf	(___fleq@ff1+2)^0,c
  5136  003A' 0E00               	movlw	0
  5137  003C' 6E00'              	movwf	(___fleq@ff1+3)^0,c
  5138  003E'                    l3961:
  5139  003E' 0E00               	movlw	0
  5140  0040' 1400'              	andwf	___fleq@ff2^0,w,c
  5141  0042' 6E00'              	movwf	??___fleq^0,c
  5142  0044' 0E00               	movlw	0
  5143  0046' 1400'              	andwf	(___fleq@ff2+1)^0,w,c
  5144  0048' 6E00'              	movwf	(??___fleq+1)^0,c
  5145  004A' 0E80               	movlw	128
  5146  004C' 1400'              	andwf	(___fleq@ff2+2)^0,w,c
  5147  004E' 6E00'              	movwf	(??___fleq+2)^0,c
  5148  0050' 0E7F               	movlw	127
  5149  0052' 1400'              	andwf	(___fleq@ff2+3)^0,w,c
  5150  0054' 6E00'              	movwf	(??___fleq+3)^0,c
  5151  0056' 5000'              	movf	??___fleq^0,w,c
  5152  0058' 1000'              	iorwf	(??___fleq+1)^0,w,c
  5153  005A' 1000'              	iorwf	(??___fleq+2)^0,w,c
  5154  005C' 1000'              	iorwf	(??___fleq+3)^0,w,c
  5155  005E' A4D8               	btfss	status,2,c
  5156  0060' EF00' F000'        	goto	u3961
  5157  0064' EF00' F000'        	goto	u3960
  5158  0068'                    u3961:
  5159  0068' EF00' F000'        	goto	l3965
  5160  006C'                    u3960:
  5161  006C' 0E00               	movlw	0
  5162  006E' 6E00'              	movwf	___fleq@ff2^0,c
  5163  0070' 0E00               	movlw	0
  5164  0072' 6E00'              	movwf	(___fleq@ff2+1)^0,c
  5165  0074' 0E00               	movlw	0
  5166  0076' 6E00'              	movwf	(___fleq@ff2+2)^0,c
  5167  0078' 0E00               	movlw	0
  5168  007A' 6E00'              	movwf	(___fleq@ff2+3)^0,c
  5169  007C'                    l3965:
  5170  007C' 5000'              	movf	___fleq@ff2^0,w,c
  5171  007E' 1800'              	xorwf	___fleq@ff1^0,w,c
  5172  0080' E10F               	bnz	u3970
  5173  0082' 5000'              	movf	(___fleq@ff2+1)^0,w,c
  5174  0084' 1800'              	xorwf	(___fleq@ff1+1)^0,w,c
  5175  0086' E10C               	bnz	u3970
  5176  0088' 5000'              	movf	(___fleq@ff2+2)^0,w,c
  5177  008A' 1800'              	xorwf	(___fleq@ff1+2)^0,w,c
  5178  008C' E109               	bnz	u3970
  5179  008E' 5000'              	movf	(___fleq@ff2+3)^0,w,c
  5180  0090' 1800'              	xorwf	(___fleq@ff1+3)^0,w,c
  5181  0092' B4D8               	btfsc	status,2,c
  5182  0094' EF00' F000'        	goto	u3971
  5183  0098' EF00' F000'        	goto	u3970
  5184  009C'                    u3971:
  5185  009C' EF00' F000'        	goto	l3969
  5186  00A0'                    u3970:
  5187  00A0' 90D8               	bcf	status,0,c
  5188  00A2' EF00' F000'        	goto	l747
  5189  00A6'                    l3969:
  5190  00A6' 80D8               	bsf	status,0,c
  5191  00A8'                    l747:
  5192  00A8' 0012               	return		;funcret
  5193  00AA'                    __end_of___fleq:
  5194                           	callstack 0
  5195                           
  5196 ;; *************** function _dtoa *****************
  5197 ;; Defined at:
  5198 ;;		line 443 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  5199 ;; Parameters:    Size  Location     Type
  5200 ;;  fp              2   31[COMRAM] PTR struct _IO_FILE
  5201 ;;		 -> sprintf@f(11), 
  5202 ;;  d               8   33[COMRAM] long long 
  5203 ;; Auto vars:     Size  Location     Type
  5204 ;;  n               8   55[COMRAM] long long 
  5205 ;;  i               2   63[COMRAM] int 
  5206 ;;  w               2   53[COMRAM] int 
  5207 ;;  p               2   51[COMRAM] int 
  5208 ;;  s               1   65[COMRAM] unsigned char 
  5209 ;; Return value:  Size  Location     Type
  5210 ;;                  1    wreg      void 
  5211 ;; Registers used:
  5212 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5213 ;; Tracked objects:
  5214 ;;		On entry : 0/0
  5215 ;;		On exit  : 0/0
  5216 ;;		Unchanged: 0/0
  5217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5218 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5219 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5220 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5221 ;;      Totals:        35       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5222 ;;Total ram usage:       35 bytes
  5223 ;; Hardware stack levels used: 1
  5224 ;; Hardware stack levels required when called: 6
  5225 ;; This function calls:
  5226 ;;		___aodiv
  5227 ;;		___aomod
  5228 ;;		_abs
  5229 ;;		_pad
  5230 ;; This function is called by:
  5231 ;;		_vfpfcnvrt
  5232 ;; This function uses a non-reentrant model
  5233 ;;
  5234                           
  5235                           	psect	text18
  5236  0000'                    __ptext18:
  5237                           	callstack 0
  5238  0000'                    _dtoa:
  5239                           	callstack 21
  5240  0000'                    
  5241                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 443: static void 
      +                          dtoa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\
      +                          doprnt.c: 444: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          45:  char s;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 446: 
      +                              int i, p, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          47:     long long n;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 450:     n = d;
  5242  0000' C021' F037'        	movff	dtoa@d,dtoa@n
  5243  0004' C022' F038'        	movff	dtoa@d+1,dtoa@n+1
  5244  0008' C023' F039'        	movff	dtoa@d+2,dtoa@n+2
  5245  000C' C024' F03A'        	movff	dtoa@d+3,dtoa@n+3
  5246  0010' C025' F03B'        	movff	dtoa@d+4,dtoa@n+4
  5247  0014' C026' F03C'        	movff	dtoa@d+5,dtoa@n+5
  5248  0018' C027' F03D'        	movff	dtoa@d+6,dtoa@n+6
  5249  001C' C028' F03E'        	movff	dtoa@d+7,dtoa@n+7
  5250  0020'                    
  5251                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 451:     s = n < 
      +                          0 ? 1 : 0;
  5252  0020' BE00'              	btfsc	(dtoa@n+7)^0,7,c
  5253  0022' EF00' F000'        	goto	u4361
  5254  0026' EF00' F000'        	goto	u4360
  5255  002A'                    u4361:
  5256  002A' 0E01               	movlw	1
  5257  002C' EF00' F000'        	goto	u4370
  5258  0030'                    u4360:
  5259  0030' 0E00               	movlw	0
  5260  0032'                    u4370:
  5261  0032' 6E00'              	movwf	dtoa@s^0,c
  5262  0034'                    
  5263                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 452:     if (s) {
  5264  0034' 5000'              	movf	dtoa@s^0,w,c
  5265  0036' B4D8               	btfsc	status,2,c
  5266  0038' EF00' F000'        	goto	u4381
  5267  003C' EF00' F000'        	goto	u4380
  5268  0040'                    u4381:
  5269  0040' EF00' F000'        	goto	l4173
  5270  0044'                    u4380:
  5271  0044'                    
  5272                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 453:         n = 
      +                          -n;
  5273  0044' 1E00'              	comf	(dtoa@n+7)^0,f,c
  5274  0046' 1E00'              	comf	(dtoa@n+6)^0,f,c
  5275  0048' 1E00'              	comf	(dtoa@n+5)^0,f,c
  5276  004A' 1E00'              	comf	(dtoa@n+4)^0,f,c
  5277  004C' 1E00'              	comf	(dtoa@n+3)^0,f,c
  5278  004E' 1E00'              	comf	(dtoa@n+2)^0,f,c
  5279  0050' 1E00'              	comf	(dtoa@n+1)^0,f,c
  5280  0052' 6C00'              	negf	dtoa@n^0,c
  5281  0054' 0E00               	movlw	0
  5282  0056' 2200'              	addwfc	(dtoa@n+1)^0,f,c
  5283  0058' 2200'              	addwfc	(dtoa@n+2)^0,f,c
  5284  005A' 2200'              	addwfc	(dtoa@n+3)^0,f,c
  5285  005C' 2200'              	addwfc	(dtoa@n+4)^0,f,c
  5286  005E' 2200'              	addwfc	(dtoa@n+5)^0,f,c
  5287  0060' 2200'              	addwfc	(dtoa@n+6)^0,f,c
  5288  0062' 2200'              	addwfc	(dtoa@n+7)^0,f,c
  5289  0064'                    l4173:
  5290                           
  5291                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 462:     p = (0 <
      +                           prec) ? prec : 1;
  5292  0064' 0100               	movlb	0	; () banked
  5293  0066' BF00'              	btfsc	(_prec+1)& (0+255),7,b
  5294  0068' EF00' F000'        	goto	u4390
  5295  006C' 5100'              	movf	(_prec+1)& (0+255),w,b
  5296  006E' E106               	bnz	u4391
  5297  0070' 0500'              	decf	_prec& (0+255),w,b
  5298  0072' B0D8               	btfsc	status,0,c
  5299  0074' EF00' F000'        	goto	u4391
  5300  0078' EF00' F000'        	goto	u4390
  5301  007C'                    u4391:
  5302  007C' EF00' F000'        	goto	l1207
  5303  0080'                    u4390:
  5304  0080'                    
  5305                           ; BSR set to: 0
  5306  0080' 0E00               	movlw	0
  5307  0082' 6E00'              	movwf	(dtoa@p+1)^0,c
  5308  0084' 0E01               	movlw	1
  5309  0086' 6E00'              	movwf	dtoa@p^0,c
  5310  0088' EF00' F000'        	goto	l1209
  5311  008C'                    l1207:
  5312                           
  5313                           ; BSR set to: 0
  5314  008C' C01E' F033'        	movff	_prec,dtoa@p
  5315  0090' C01F' F034'        	movff	_prec+1,dtoa@p+1
  5316  0094'                    l1209:
  5317                           
  5318                           ; BSR set to: 0
  5319                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 463:     w = widt
      +                          h;
  5320  0094' C01C' F035'        	movff	_width,dtoa@w
  5321  0098' C01D' F036'        	movff	_width+1,dtoa@w+1
  5322  009C'                    
  5323                           ; BSR set to: 0
  5324                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 464:     if (s
  5325  009C' 5000'              	movf	dtoa@s^0,w,c
  5326  009E' B4D8               	btfsc	status,2,c
  5327  00A0' EF00' F000'        	goto	u4401
  5328  00A4' EF00' F000'        	goto	u4400
  5329  00A8'                    u4401:
  5330  00A8' EF00' F000'        	goto	l1210
  5331  00AC'                    u4400:
  5332  00AC'                    
  5333                           ; BSR set to: 0
  5334                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 468:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 469:         --w;
  5335  00AC' 0600'              	decf	dtoa@w^0,f,c
  5336  00AE' A0D8               	btfss	status,0,c
  5337  00B0' 0600'              	decf	(dtoa@w+1)^0,f,c
  5338  00B2'                    
  5339                           ; BSR set to: 0
  5340                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 470:   s = s ? '-
      +                          ' : '+';
  5341  00B2' 5000'              	movf	dtoa@s^0,w,c
  5342  00B4' A4D8               	btfss	status,2,c
  5343  00B6' EF00' F000'        	goto	u4411
  5344  00BA' EF00' F000'        	goto	u4410
  5345  00BE'                    u4411:
  5346  00BE' EF00' F000'        	goto	l4185
  5347  00C2'                    u4410:
  5348  00C2'                    
  5349                           ; BSR set to: 0
  5350  00C2' 0E00               	movlw	0
  5351  00C4' 6E00'              	movwf	(_dtoa$2662+1)^0,c
  5352  00C6' 0E2B               	movlw	43
  5353  00C8' 6E00'              	movwf	_dtoa$2662^0,c
  5354  00CA' EF00' F000'        	goto	l4187
  5355  00CE'                    l4185:
  5356                           
  5357                           ; BSR set to: 0
  5358  00CE' 0E00               	movlw	0
  5359  00D0' 6E00'              	movwf	(_dtoa$2662+1)^0,c
  5360  00D2' 0E2D               	movlw	45
  5361  00D4' 6E00'              	movwf	_dtoa$2662^0,c
  5362  00D6'                    l4187:
  5363                           
  5364                           ; BSR set to: 0
  5365  00D6' C031' F041'        	movff	_dtoa$2662,dtoa@s
  5366  00DA'                    l1210:
  5367                           
  5368                           ; BSR set to: 0
  5369                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 480:     i = size
      +                          of(dbuf) - 1;
  5370  00DA' 0E00               	movlw	0
  5371  00DC' 6E00'              	movwf	(dtoa@i+1)^0,c
  5372  00DE' 0E4F               	movlw	79
  5373  00E0' 6E00'              	movwf	dtoa@i^0,c
  5374  00E2'                    
  5375                           ; BSR set to: 0
  5376                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 481:     dbuf[i] 
      +                          = '\0';
  5377  00E2' 0E00               	movlw	0
  5378  00E4' 0101               	movlb	1	; () banked
  5379  00E6' 6F00'              	movwf	(_dbuf+79)& (0+255),b
  5380                           
  5381                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  5382  00E8' EF00' F000'        	goto	l4201
  5383  00EC'                    l4191:
  5384                           
  5385                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 486:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 487:         --i;
  5386  00EC' 0600'              	decf	dtoa@i^0,f,c
  5387  00EE' A0D8               	btfss	status,0,c
  5388  00F0' 0600'              	decf	(dtoa@i+1)^0,f,c
  5389  00F2'                    
  5390                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 488:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  5391  00F2' 0E00'              	movlw	low _dbuf
  5392  00F4' 2400'              	addwf	dtoa@i^0,w,c
  5393  00F6' 6ED9               	movwf	fsr2l,c
  5394  00F8' 0E00'              	movlw	high _dbuf
  5395  00FA' 2000'              	addwfc	(dtoa@i+1)^0,w,c
  5396  00FC' 6EDA               	movwf	fsr2h,c
  5397  00FE' C037' F004'        	movff	dtoa@n,___aomod@dividend
  5398  0102' C038' F005'        	movff	dtoa@n+1,___aomod@dividend+1
  5399  0106' C039' F006'        	movff	dtoa@n+2,___aomod@dividend+2
  5400  010A' C03A' F007'        	movff	dtoa@n+3,___aomod@dividend+3
  5401  010E' C03B' F008'        	movff	dtoa@n+4,___aomod@dividend+4
  5402  0112' C03C' F009'        	movff	dtoa@n+5,___aomod@dividend+5
  5403  0116' C03D' F00A'        	movff	dtoa@n+6,___aomod@dividend+6
  5404  011A' C03E' F00B'        	movff	dtoa@n+7,___aomod@dividend+7
  5405  011E' 0E0A               	movlw	10
  5406  0120' 6E00'              	movwf	___aomod@divisor^0,c
  5407  0122' 0E00               	movlw	0
  5408  0124' 6E00'              	movwf	(___aomod@divisor+1)^0,c
  5409  0126' 0E00               	movlw	0
  5410  0128' 6E00'              	movwf	(___aomod@divisor+2)^0,c
  5411  012A' 0E00               	movlw	0
  5412  012C' 6E00'              	movwf	(___aomod@divisor+3)^0,c
  5413  012E' 0E00               	movlw	0
  5414  0130' 6E00'              	movwf	(___aomod@divisor+4)^0,c
  5415  0132' 0E00               	movlw	0
  5416  0134' 6E00'              	movwf	(___aomod@divisor+5)^0,c
  5417  0136' 0E00               	movlw	0
  5418  0138' 6E00'              	movwf	(___aomod@divisor+6)^0,c
  5419  013A' 0E00               	movlw	0
  5420  013C' 6E00'              	movwf	(___aomod@divisor+7)^0,c
  5421  013E' EC00' F000'        	call	___aomod	;wreg free
  5422  0142' C004' F029'        	movff	?___aomod,??_dtoa
  5423  0146' C005' F02A'        	movff	?___aomod+1,??_dtoa+1
  5424  014A' C006' F02B'        	movff	?___aomod+2,??_dtoa+2
  5425  014E' C007' F02C'        	movff	?___aomod+3,??_dtoa+3
  5426  0152' C008' F02D'        	movff	?___aomod+4,??_dtoa+4
  5427  0156' C009' F02E'        	movff	?___aomod+5,??_dtoa+5
  5428  015A' C00A' F02F'        	movff	?___aomod+6,??_dtoa+6
  5429  015E' C00B' F030'        	movff	?___aomod+7,??_dtoa+7
  5430  0162' C029' F016'        	movff	??_dtoa,abs@a
  5431  0166' C02A' F017'        	movff	??_dtoa+1,abs@a+1
  5432  016A' EC00' F000'        	call	_abs	;wreg free
  5433  016E' 5000'              	movf	?_abs^0,w,c
  5434  0170' 0F30               	addlw	48
  5435  0172' 6EDF               	movwf	indf2,c
  5436  0174'                    
  5437                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 489:         --p;
  5438  0174' 0600'              	decf	dtoa@p^0,f,c
  5439  0176' A0D8               	btfss	status,0,c
  5440  0178' 0600'              	decf	(dtoa@p+1)^0,f,c
  5441  017A'                    
  5442                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 490:         --w;
  5443  017A' 0600'              	decf	dtoa@w^0,f,c
  5444  017C' A0D8               	btfss	status,0,c
  5445  017E' 0600'              	decf	(dtoa@w+1)^0,f,c
  5446  0180'                    
  5447                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 491:         n = 
      +                          n / 10;
  5448  0180' C037' F004'        	movff	dtoa@n,___aodiv@dividend
  5449  0184' C038' F005'        	movff	dtoa@n+1,___aodiv@dividend+1
  5450  0188' C039' F006'        	movff	dtoa@n+2,___aodiv@dividend+2
  5451  018C' C03A' F007'        	movff	dtoa@n+3,___aodiv@dividend+3
  5452  0190' C03B' F008'        	movff	dtoa@n+4,___aodiv@dividend+4
  5453  0194' C03C' F009'        	movff	dtoa@n+5,___aodiv@dividend+5
  5454  0198' C03D' F00A'        	movff	dtoa@n+6,___aodiv@dividend+6
  5455  019C' C03E' F00B'        	movff	dtoa@n+7,___aodiv@dividend+7
  5456  01A0' 0E0A               	movlw	10
  5457  01A2' 6E00'              	movwf	___aodiv@divisor^0,c
  5458  01A4' 0E00               	movlw	0
  5459  01A6' 6E00'              	movwf	(___aodiv@divisor+1)^0,c
  5460  01A8' 0E00               	movlw	0
  5461  01AA' 6E00'              	movwf	(___aodiv@divisor+2)^0,c
  5462  01AC' 0E00               	movlw	0
  5463  01AE' 6E00'              	movwf	(___aodiv@divisor+3)^0,c
  5464  01B0' 0E00               	movlw	0
  5465  01B2' 6E00'              	movwf	(___aodiv@divisor+4)^0,c
  5466  01B4' 0E00               	movlw	0
  5467  01B6' 6E00'              	movwf	(___aodiv@divisor+5)^0,c
  5468  01B8' 0E00               	movlw	0
  5469  01BA' 6E00'              	movwf	(___aodiv@divisor+6)^0,c
  5470  01BC' 0E00               	movlw	0
  5471  01BE' 6E00'              	movwf	(___aodiv@divisor+7)^0,c
  5472  01C0' EC00' F000'        	call	___aodiv	;wreg free
  5473  01C4' C004' F037'        	movff	?___aodiv,dtoa@n
  5474  01C8' C005' F038'        	movff	?___aodiv+1,dtoa@n+1
  5475  01CC' C006' F039'        	movff	?___aodiv+2,dtoa@n+2
  5476  01D0' C007' F03A'        	movff	?___aodiv+3,dtoa@n+3
  5477  01D4' C008' F03B'        	movff	?___aodiv+4,dtoa@n+4
  5478  01D8' C009' F03C'        	movff	?___aodiv+5,dtoa@n+5
  5479  01DC' C00A' F03D'        	movff	?___aodiv+6,dtoa@n+6
  5480  01E0' C00B' F03E'        	movff	?___aodiv+7,dtoa@n+7
  5481  01E4'                    l4201:
  5482                           
  5483                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  5484  01E4' BE00'              	btfsc	(dtoa@i+1)^0,7,c
  5485  01E6' EF00' F000'        	goto	u4421
  5486  01EA' 5000'              	movf	(dtoa@i+1)^0,w,c
  5487  01EC' E108               	bnz	u4420
  5488  01EE' 0400'              	decf	dtoa@i^0,w,c
  5489  01F0' A0D8               	btfss	status,0,c
  5490  01F2' EF00' F000'        	goto	u4421
  5491  01F6' EF00' F000'        	goto	u4420
  5492  01FA'                    u4421:
  5493  01FA' EF00' F000'        	goto	l4207
  5494  01FE'                    u4420:
  5495  01FE' 5000'              	movf	dtoa@n^0,w,c
  5496  0200' 1000'              	iorwf	(dtoa@n+1)^0,w,c
  5497  0202' 1000'              	iorwf	(dtoa@n+2)^0,w,c
  5498  0204' 1000'              	iorwf	(dtoa@n+3)^0,w,c
  5499  0206' 1000'              	iorwf	(dtoa@n+4)^0,w,c
  5500  0208' 1000'              	iorwf	(dtoa@n+5)^0,w,c
  5501  020A' 1000'              	iorwf	(dtoa@n+6)^0,w,c
  5502  020C' 1000'              	iorwf	(dtoa@n+7)^0,w,c
  5503  020E' A4D8               	btfss	status,2,c
  5504  0210' EF00' F000'        	goto	u4431
  5505  0214' EF00' F000'        	goto	u4430
  5506  0218'                    u4431:
  5507  0218' EF00' F000'        	goto	l4191
  5508  021C'                    u4430:
  5509  021C' BE00'              	btfsc	(dtoa@p+1)^0,7,c
  5510  021E' EF00' F000'        	goto	u4440
  5511  0222' 5000'              	movf	(dtoa@p+1)^0,w,c
  5512  0224' E106               	bnz	u4441
  5513  0226' 0400'              	decf	dtoa@p^0,w,c
  5514  0228' B0D8               	btfsc	status,0,c
  5515  022A' EF00' F000'        	goto	u4441
  5516  022E' EF00' F000'        	goto	u4440
  5517  0232'                    u4441:
  5518  0232' EF00' F000'        	goto	l4191
  5519  0236'                    u4440:
  5520  0236'                    l4207:
  5521                           
  5522                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 495:     if (s !=
      +                           0) {
  5523  0236' 5000'              	movf	dtoa@s^0,w,c
  5524  0238' B4D8               	btfsc	status,2,c
  5525  023A' EF00' F000'        	goto	u4451
  5526  023E' EF00' F000'        	goto	u4450
  5527  0242'                    u4451:
  5528  0242' EF00' F000'        	goto	l4213
  5529  0246'                    u4450:
  5530  0246'                    
  5531                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 496:         --i;
  5532  0246' 0600'              	decf	dtoa@i^0,f,c
  5533  0248' A0D8               	btfss	status,0,c
  5534  024A' 0600'              	decf	(dtoa@i+1)^0,f,c
  5535  024C'                    
  5536                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 497:         dbuf
      +                          [i] = s;
  5537  024C' 0E00'              	movlw	low _dbuf
  5538  024E' 2400'              	addwf	dtoa@i^0,w,c
  5539  0250' 6ED9               	movwf	fsr2l,c
  5540  0252' 0E00'              	movlw	high _dbuf
  5541  0254' 2000'              	addwfc	(dtoa@i+1)^0,w,c
  5542  0256' 6EDA               	movwf	fsr2h,c
  5543  0258' C041' FFDF         	movff	dtoa@s,indf2
  5544  025C'                    l4213:
  5545                           
  5546                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 501:     return (
      +                          void) pad(fp, &dbuf[i], w);
  5547  025C' C01F' F014'        	movff	dtoa@fp,pad@fp
  5548  0260' C020' F015'        	movff	dtoa@fp+1,pad@fp+1
  5549  0264' 0E00'              	movlw	low _dbuf
  5550  0266' 2400'              	addwf	dtoa@i^0,w,c
  5551  0268' 6E00'              	movwf	pad@buf^0,c
  5552  026A' 0E00'              	movlw	high _dbuf
  5553  026C' 2000'              	addwfc	(dtoa@i+1)^0,w,c
  5554  026E' 6E00'              	movwf	(pad@buf+1)^0,c
  5555  0270' C035' F018'        	movff	dtoa@w,pad@p
  5556  0274' C036' F019'        	movff	dtoa@w+1,pad@p+1
  5557  0278' EC00' F000'        	call	_pad	;wreg free
  5558  027C' 0012               	return		;funcret
  5559  027E'                    __end_of_dtoa:
  5560                           	callstack 0
  5561                           
  5562 ;; *************** function _pad *****************
  5563 ;; Defined at:
  5564 ;;		line 133 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  5565 ;; Parameters:    Size  Location     Type
  5566 ;;  fp              2   20[COMRAM] PTR struct _IO_FILE
  5567 ;;		 -> sprintf@f(11), 
  5568 ;;  buf             2   22[COMRAM] PTR unsigned char 
  5569 ;;		 -> dbuf(80), 
  5570 ;;  p               2   24[COMRAM] int 
  5571 ;; Auto vars:     Size  Location     Type
  5572 ;;  w               2   29[COMRAM] int 
  5573 ;;  i               2   27[COMRAM] int 
  5574 ;; Return value:  Size  Location     Type
  5575 ;;                  1    wreg      void 
  5576 ;; Registers used:
  5577 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5578 ;; Tracked objects:
  5579 ;;		On entry : 0/0
  5580 ;;		On exit  : 0/0
  5581 ;;		Unchanged: 0/0
  5582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5583 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5584 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5585 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5586 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5587 ;;Total ram usage:       11 bytes
  5588 ;; Hardware stack levels used: 1
  5589 ;; Hardware stack levels required when called: 5
  5590 ;; This function calls:
  5591 ;;		_fputc
  5592 ;;		_fputs
  5593 ;; This function is called by:
  5594 ;;		_dtoa
  5595 ;;		_efgtoa
  5596 ;; This function uses a non-reentrant model
  5597 ;;
  5598                           
  5599                           	psect	text19
  5600  0000'                    __ptext19:
  5601                           	callstack 0
  5602  0000'                    _pad:
  5603                           	callstack 21
  5604  0000'                    
  5605                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 133: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\com
      +                          mon\doprnt.c: 134: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 135:     int i, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt
      +                          .c: 145:     w = (p < 0) ? 0 : p;
  5606  0000' BE00'              	btfsc	(pad@p+1)^0,7,c
  5607  0002' EF00' F000'        	goto	u4111
  5608  0006' EF00' F000'        	goto	u4110
  5609  000A'                    u4111:
  5610  000A' EF00' F000'        	goto	l4051
  5611  000E'                    u4110:
  5612  000E' C018' F01D'        	movff	pad@p,pad@w
  5613  0012' C019' F01E'        	movff	pad@p+1,pad@w+1
  5614  0016' EF00' F000'        	goto	l1198
  5615  001A'                    l4051:
  5616  001A' 0E00               	movlw	0
  5617  001C' 6E00'              	movwf	(pad@w+1)^0,c
  5618  001E' 0E00               	movlw	0
  5619  0020' 6E00'              	movwf	pad@w^0,c
  5620  0022'                    l1198:
  5621                           
  5622                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 146:     i = 0;
  5623  0022' 0E00               	movlw	0
  5624  0024' 6E00'              	movwf	(pad@i+1)^0,c
  5625  0026' 0E00               	movlw	0
  5626  0028' 6E00'              	movwf	pad@i^0,c
  5627                           
  5628                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  5629  002A' EF00' F000'        	goto	l4057
  5630  002E'                    l4053:
  5631                           
  5632                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 148:         fput
      +                          c(' ', fp);
  5633  002E' 0E00               	movlw	0
  5634  0030' 6E00'              	movwf	(fputc@c+1)^0,c
  5635  0032' 0E20               	movlw	32
  5636  0034' 6E00'              	movwf	fputc@c^0,c
  5637  0036' C014' F006'        	movff	pad@fp,fputc@fp
  5638  003A' C015' F007'        	movff	pad@fp+1,fputc@fp+1
  5639  003E' EC00' F000'        	call	_fputc	;wreg free
  5640  0042'                    
  5641                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 149:         ++i;
  5642  0042' 4A00'              	infsnz	pad@i^0,f,c
  5643  0044' 2A00'              	incf	(pad@i+1)^0,f,c
  5644  0046'                    l4057:
  5645                           
  5646                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  5647  0046' 5000'              	movf	pad@w^0,w,c
  5648  0048' 5C00'              	subwf	pad@i^0,w,c
  5649  004A' 5000'              	movf	(pad@i+1)^0,w,c
  5650  004C' 0A80               	xorlw	128
  5651  004E' 6E00'              	movwf	??_pad^0,c
  5652  0050' 5000'              	movf	(pad@w+1)^0,w,c
  5653  0052' 0A80               	xorlw	128
  5654  0054' 5800'              	subwfb	??_pad^0,w,c
  5655  0056' A0D8               	btfss	status,0,c
  5656  0058' EF00' F000'        	goto	u4121
  5657  005C' EF00' F000'        	goto	u4120
  5658  0060'                    u4121:
  5659  0060' EF00' F000'        	goto	l4053
  5660  0064'                    u4120:
  5661  0064'                    
  5662                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 156:         fput
      +                          s((const char *)buf, fp);
  5663  0064' C016' F00D'        	movff	pad@buf,fputs@s
  5664  0068' C017' F00E'        	movff	pad@buf+1,fputs@s+1
  5665  006C' C014' F00F'        	movff	pad@fp,fputs@fp
  5666  0070' C015' F010'        	movff	pad@fp+1,fputs@fp+1
  5667  0074' EC00' F000'        	call	_fputs	;wreg free
  5668  0078' 0012               	return		;funcret
  5669  007A'                    __end_of_pad:
  5670                           	callstack 0
  5671                           
  5672 ;; *************** function _fputs *****************
  5673 ;; Defined at:
  5674 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputs.c"
  5675 ;; Parameters:    Size  Location     Type
  5676 ;;  s               2   13[COMRAM] PTR const unsigned char 
  5677 ;;		 -> dbuf(80), 
  5678 ;;  fp              2   15[COMRAM] PTR struct _IO_FILE
  5679 ;;		 -> sprintf@f(11), 
  5680 ;; Auto vars:     Size  Location     Type
  5681 ;;  i               2   18[COMRAM] int 
  5682 ;;  c               1   17[COMRAM] unsigned char 
  5683 ;; Return value:  Size  Location     Type
  5684 ;;                  2   13[COMRAM] int 
  5685 ;; Registers used:
  5686 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5687 ;; Tracked objects:
  5688 ;;		On entry : 0/0
  5689 ;;		On exit  : 0/0
  5690 ;;		Unchanged: 0/0
  5691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5692 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5693 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5695 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5696 ;;Total ram usage:        7 bytes
  5697 ;; Hardware stack levels used: 1
  5698 ;; Hardware stack levels required when called: 4
  5699 ;; This function calls:
  5700 ;;		_fputc
  5701 ;; This function is called by:
  5702 ;;		_pad
  5703 ;; This function uses a non-reentrant model
  5704 ;;
  5705                           
  5706                           	psect	text20
  5707  0000'                    __ptext20:
  5708                           	callstack 0
  5709  0000'                    _fputs:
  5710                           	callstack 21
  5711  0000' 0E00               	movlw	0
  5712  0002' 6E00'              	movwf	(fputs@i+1)^0,c
  5713  0004' 0E00               	movlw	0
  5714  0006' 6E00'              	movwf	fputs@i^0,c
  5715  0008' EF00' F000'        	goto	l3597
  5716  000C'                    l3593:
  5717  000C' C011' F004'        	movff	fputs@c,fputc@c
  5718  0010' 6A00'              	clrf	(fputc@c+1)^0,c
  5719  0012' C00F' F006'        	movff	fputs@fp,fputc@fp
  5720  0016' C010' F007'        	movff	fputs@fp+1,fputc@fp+1
  5721  001A' EC00' F000'        	call	_fputc	;wreg free
  5722  001E' 4A00'              	infsnz	fputs@i^0,f,c
  5723  0020' 2A00'              	incf	(fputs@i+1)^0,f,c
  5724  0022'                    l3597:
  5725  0022' 5000'              	movf	fputs@i^0,w,c
  5726  0024' 2400'              	addwf	fputs@s^0,w,c
  5727  0026' 6ED9               	movwf	fsr2l,c
  5728  0028' 5000'              	movf	(fputs@i+1)^0,w,c
  5729  002A' 2000'              	addwfc	(fputs@s+1)^0,w,c
  5730  002C' 6EDA               	movwf	fsr2h,c
  5731  002E' 50DF               	movf	indf2,w,c
  5732  0030' 6E00'              	movwf	fputs@c^0,c
  5733  0032' 5000'              	movf	fputs@c^0,w,c
  5734  0034' A4D8               	btfss	status,2,c
  5735  0036' EF00' F000'        	goto	u3371
  5736  003A' EF00' F000'        	goto	u3370
  5737  003E'                    u3371:
  5738  003E' EF00' F000'        	goto	l3593
  5739  0042'                    u3370:
  5740  0042' 0012               	return		;funcret
  5741  0044'                    __end_of_fputs:
  5742                           	callstack 0
  5743                           
  5744 ;; *************** function _fputc *****************
  5745 ;; Defined at:
  5746 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputc.c"
  5747 ;; Parameters:    Size  Location     Type
  5748 ;;  c               2    4[COMRAM] int 
  5749 ;;  fp              2    6[COMRAM] PTR struct _IO_FILE
  5750 ;;		 -> sprintf@f(11), 
  5751 ;; Auto vars:     Size  Location     Type
  5752 ;;		None
  5753 ;; Return value:  Size  Location     Type
  5754 ;;                  2    4[COMRAM] int 
  5755 ;; Registers used:
  5756 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5757 ;; Tracked objects:
  5758 ;;		On entry : 0/0
  5759 ;;		On exit  : 0/0
  5760 ;;		Unchanged: 0/0
  5761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5762 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5764 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5765 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5766 ;;Total ram usage:        9 bytes
  5767 ;; Hardware stack levels used: 1
  5768 ;; Hardware stack levels required when called: 3
  5769 ;; This function calls:
  5770 ;;		_putch
  5771 ;; This function is called by:
  5772 ;;		_pad
  5773 ;;		_vfpfcnvrt
  5774 ;;		_fputs
  5775 ;; This function uses a non-reentrant model
  5776 ;;
  5777                           
  5778                           	psect	text21
  5779  0000'                    __ptext21:
  5780                           	callstack 0
  5781  0000'                    _fputc:
  5782                           	callstack 24
  5783  0000' 5000'              	movf	fputc@fp^0,w,c
  5784  0002' 1000'              	iorwf	(fputc@fp+1)^0,w,c
  5785  0004' B4D8               	btfsc	status,2,c
  5786  0006' EF00' F000'        	goto	u2941
  5787  000A' EF00' F000'        	goto	u2940
  5788  000E'                    u2941:
  5789  000E' EF00' F000'        	goto	l3379
  5790  0012'                    u2940:
  5791  0012' 5000'              	movf	fputc@fp^0,w,c
  5792  0014' 1000'              	iorwf	(fputc@fp+1)^0,w,c
  5793  0016' A4D8               	btfss	status,2,c
  5794  0018' EF00' F000'        	goto	u2951
  5795  001C' EF00' F000'        	goto	u2950
  5796  0020'                    u2951:
  5797  0020' EF00' F000'        	goto	l3381
  5798  0024'                    u2950:
  5799  0024'                    l3379:
  5800  0024' 5000'              	movf	fputc@c^0,w,c
  5801  0026' EC00' F000'        	call	_putch
  5802  002A' EF00' F000'        	goto	l1358
  5803  002E'                    l3381:
  5804  002E' EE20 F009          	lfsr	2,9
  5805  0032' 5000'              	movf	fputc@fp^0,w,c
  5806  0034' 26D9               	addwf	fsr2l,f,c
  5807  0036' 5000'              	movf	(fputc@fp+1)^0,w,c
  5808  0038' 22DA               	addwfc	fsr2h,f,c
  5809  003A' 50DE               	movf	postinc2,w,c
  5810  003C' 10DE               	iorwf	postinc2,w,c
  5811  003E' B4D8               	btfsc	status,2,c
  5812  0040' EF00' F000'        	goto	u2961
  5813  0044' EF00' F000'        	goto	u2960
  5814  0048'                    u2961:
  5815  0048' EF00' F000'        	goto	l3385
  5816  004C'                    u2960:
  5817  004C' EE20 F009          	lfsr	2,9
  5818  0050' 5000'              	movf	fputc@fp^0,w,c
  5819  0052' 26D9               	addwf	fsr2l,f,c
  5820  0054' 5000'              	movf	(fputc@fp+1)^0,w,c
  5821  0056' 22DA               	addwfc	fsr2h,f,c
  5822  0058' EE10 F003          	lfsr	1,3
  5823  005C' 5000'              	movf	fputc@fp^0,w,c
  5824  005E' 26E1               	addwf	fsr1l,f,c
  5825  0060' 5000'              	movf	(fputc@fp+1)^0,w,c
  5826  0062' 22E2               	addwfc	fsr1h,f,c
  5827  0064' 50DE               	movf	postinc2,w,c
  5828  0066' 5CE6               	subwf	postinc1,w,c
  5829  0068' 50E6               	movf	postinc1,w,c
  5830  006A' 0A80               	xorlw	128
  5831  006C' 6E00'              	movwf	(??_fputc+4)^0,c
  5832  006E' 50DE               	movf	postinc2,w,c
  5833  0070' 0A80               	xorlw	128
  5834  0072' 5800'              	subwfb	(??_fputc+4)^0,w,c
  5835  0074' B0D8               	btfsc	status,0,c
  5836  0076' EF00' F000'        	goto	u2971
  5837  007A' EF00' F000'        	goto	u2970
  5838  007E'                    u2971:
  5839  007E' EF00' F000'        	goto	l1358
  5840  0082'                    u2970:
  5841  0082'                    l3385:
  5842  0082' EE20 F003          	lfsr	2,3
  5843  0086' 5000'              	movf	fputc@fp^0,w,c
  5844  0088' 26D9               	addwf	fsr2l,f,c
  5845  008A' 5000'              	movf	(fputc@fp+1)^0,w,c
  5846  008C' 22DA               	addwfc	fsr2h,f,c
  5847  008E' CFDE F008'         	movff	postinc2,??_fputc
  5848  0092' CFDD F009'         	movff	postdec2,??_fputc+1
  5849  0096' C006' FFD9         	movff	fputc@fp,fsr2l
  5850  009A' C007' FFDA         	movff	fputc@fp+1,fsr2h
  5851  009E' CFDE F00A'         	movff	postinc2,??_fputc+2
  5852  00A2' CFDD F00B'         	movff	postdec2,??_fputc+3
  5853  00A6' 5000'              	movf	??_fputc^0,w,c
  5854  00A8' 2400'              	addwf	(??_fputc+2)^0,w,c
  5855  00AA' 6ED9               	movwf	fsr2l,c
  5856  00AC' 5000'              	movf	(??_fputc+1)^0,w,c
  5857  00AE' 2000'              	addwfc	(??_fputc+3)^0,w,c
  5858  00B0' 6EDA               	movwf	fsr2h,c
  5859  00B2' C004' FFDF         	movff	fputc@c,indf2
  5860  00B6' EE20 F003          	lfsr	2,3
  5861  00BA' 5000'              	movf	fputc@fp^0,w,c
  5862  00BC' 26D9               	addwf	fsr2l,f,c
  5863  00BE' 5000'              	movf	(fputc@fp+1)^0,w,c
  5864  00C0' 22DA               	addwfc	fsr2h,f,c
  5865  00C2' 2ADE               	incf	postinc2,f,c
  5866  00C4' 0E00               	movlw	0
  5867  00C6' 22DD               	addwfc	postdec2,f,c
  5868  00C8'                    l1358:
  5869  00C8' 0012               	return		;funcret
  5870  00CA'                    __end_of_fputc:
  5871                           	callstack 0
  5872                           
  5873 ;; *************** function _putch *****************
  5874 ;; Defined at:
  5875 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\putch.c"
  5876 ;; Parameters:    Size  Location     Type
  5877 ;;  c               1    wreg     unsigned char 
  5878 ;; Auto vars:     Size  Location     Type
  5879 ;;  c               1    0[COMRAM] unsigned char 
  5880 ;; Return value:  Size  Location     Type
  5881 ;;                  1    wreg      void 
  5882 ;; Registers used:
  5883 ;;		wreg
  5884 ;; Tracked objects:
  5885 ;;		On entry : 0/0
  5886 ;;		On exit  : 0/0
  5887 ;;		Unchanged: 0/0
  5888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5892 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5893 ;;Total ram usage:        0 bytes
  5894 ;; Hardware stack levels used: 1
  5895 ;; Hardware stack levels required when called: 2
  5896 ;; This function calls:
  5897 ;;		Nothing
  5898 ;; This function is called by:
  5899 ;;		_fputc
  5900 ;; This function uses a non-reentrant model
  5901 ;;
  5902                           
  5903                           	psect	text22
  5904  0000'                    __ptext22:
  5905                           	callstack 0
  5906  0000'                    _putch:
  5907                           	callstack 24
  5908  0000' 0012               	return		;funcret
  5909  0002'                    __end_of_putch:
  5910                           	callstack 0
  5911                           
  5912 ;; *************** function _abs *****************
  5913 ;; Defined at:
  5914 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\abs.c"
  5915 ;; Parameters:    Size  Location     Type
  5916 ;;  a               2   22[COMRAM] int 
  5917 ;; Auto vars:     Size  Location     Type
  5918 ;;		None
  5919 ;; Return value:  Size  Location     Type
  5920 ;;                  2   22[COMRAM] int 
  5921 ;; Registers used:
  5922 ;;		wreg, status,2, status,0
  5923 ;; Tracked objects:
  5924 ;;		On entry : 0/0
  5925 ;;		On exit  : 0/0
  5926 ;;		Unchanged: 0/0
  5927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5928 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5929 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5930 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5931 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5932 ;;Total ram usage:        4 bytes
  5933 ;; Hardware stack levels used: 1
  5934 ;; Hardware stack levels required when called: 2
  5935 ;; This function calls:
  5936 ;;		Nothing
  5937 ;; This function is called by:
  5938 ;;		_dtoa
  5939 ;; This function uses a non-reentrant model
  5940 ;;
  5941                           
  5942                           	psect	text23
  5943  0000'                    __ptext23:
  5944                           	callstack 0
  5945  0000'                    _abs:
  5946                           	callstack 24
  5947  0000' BE00'              	btfsc	(abs@a+1)^0,7,c
  5948  0002' EF00' F000'        	goto	u4130
  5949  0006' 5000'              	movf	(abs@a+1)^0,w,c
  5950  0008' E106               	bnz	u4131
  5951  000A' 0400'              	decf	abs@a^0,w,c
  5952  000C' B0D8               	btfsc	status,0,c
  5953  000E' EF00' F000'        	goto	u4131
  5954  0012' EF00' F000'        	goto	u4130
  5955  0016'                    u4131:
  5956  0016' EF00' F000'        	goto	l1317
  5957  001A'                    u4130:
  5958  001A' C016' F018'        	movff	abs@a,??_abs
  5959  001E' C017' F019'        	movff	abs@a+1,??_abs+1
  5960  0022' 1E00'              	comf	??_abs^0,f,c
  5961  0024' 1E00'              	comf	(??_abs+1)^0,f,c
  5962  0026' 4A00'              	infsnz	??_abs^0,f,c
  5963  0028' 2A00'              	incf	(??_abs+1)^0,f,c
  5964  002A' C018' F016'        	movff	??_abs,?_abs
  5965  002E' C019' F017'        	movff	??_abs+1,?_abs+1
  5966  0032' EF00' F000'        	goto	l1320
  5967  0036'                    l1317:
  5968  0036' C016' F016'        	movff	abs@a,?_abs
  5969  003A' C017' F017'        	movff	abs@a+1,?_abs+1
  5970  003E'                    l1320:
  5971  003E' 0012               	return		;funcret
  5972  0040'                    __end_of_abs:
  5973                           	callstack 0
  5974                           
  5975 ;; *************** function ___aomod *****************
  5976 ;; Defined at:
  5977 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aomod.c"
  5978 ;; Parameters:    Size  Location     Type
  5979 ;;  dividend        8    4[COMRAM] long long 
  5980 ;;  divisor         8   12[COMRAM] long long 
  5981 ;; Auto vars:     Size  Location     Type
  5982 ;;  sign            1   21[COMRAM] unsigned char 
  5983 ;;  counter         1   20[COMRAM] unsigned char 
  5984 ;; Return value:  Size  Location     Type
  5985 ;;                  8    4[COMRAM] long long 
  5986 ;; Registers used:
  5987 ;;		wreg, status,2, status,0
  5988 ;; Tracked objects:
  5989 ;;		On entry : 0/0
  5990 ;;		On exit  : 0/0
  5991 ;;		Unchanged: 0/0
  5992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5993 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5994 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5996 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5997 ;;Total ram usage:       18 bytes
  5998 ;; Hardware stack levels used: 1
  5999 ;; Hardware stack levels required when called: 2
  6000 ;; This function calls:
  6001 ;;		Nothing
  6002 ;; This function is called by:
  6003 ;;		_dtoa
  6004 ;; This function uses a non-reentrant model
  6005 ;;
  6006                           
  6007                           	psect	text24
  6008  0000'                    __ptext24:
  6009                           	callstack 0
  6010  0000'                    ___aomod:
  6011                           	callstack 24
  6012  0000' 0E00               	movlw	0
  6013  0002' 6E00'              	movwf	___aomod@sign^0,c
  6014  0004' BE00'              	btfsc	(___aomod@dividend+7)^0,7,c
  6015  0006' EF00' F000'        	goto	u3470
  6016  000A' EF00' F000'        	goto	u3471
  6017  000E'                    u3471:
  6018  000E' EF00' F000'        	goto	l3655
  6019  0012'                    u3470:
  6020  0012' 1E00'              	comf	(___aomod@dividend+7)^0,f,c
  6021  0014' 1E00'              	comf	(___aomod@dividend+6)^0,f,c
  6022  0016' 1E00'              	comf	(___aomod@dividend+5)^0,f,c
  6023  0018' 1E00'              	comf	(___aomod@dividend+4)^0,f,c
  6024  001A' 1E00'              	comf	(___aomod@dividend+3)^0,f,c
  6025  001C' 1E00'              	comf	(___aomod@dividend+2)^0,f,c
  6026  001E' 1E00'              	comf	(___aomod@dividend+1)^0,f,c
  6027  0020' 6C00'              	negf	___aomod@dividend^0,c
  6028  0022' 0E00               	movlw	0
  6029  0024' 2200'              	addwfc	(___aomod@dividend+1)^0,f,c
  6030  0026' 2200'              	addwfc	(___aomod@dividend+2)^0,f,c
  6031  0028' 2200'              	addwfc	(___aomod@dividend+3)^0,f,c
  6032  002A' 2200'              	addwfc	(___aomod@dividend+4)^0,f,c
  6033  002C' 2200'              	addwfc	(___aomod@dividend+5)^0,f,c
  6034  002E' 2200'              	addwfc	(___aomod@dividend+6)^0,f,c
  6035  0030' 2200'              	addwfc	(___aomod@dividend+7)^0,f,c
  6036  0032' 0E01               	movlw	1
  6037  0034' 6E00'              	movwf	___aomod@sign^0,c
  6038  0036'                    l3655:
  6039  0036' BE00'              	btfsc	(___aomod@divisor+7)^0,7,c
  6040  0038' EF00' F000'        	goto	u3480
  6041  003C' EF00' F000'        	goto	u3481
  6042  0040'                    u3481:
  6043  0040' EF00' F000'        	goto	l3659
  6044  0044'                    u3480:
  6045  0044' 1E00'              	comf	(___aomod@divisor+7)^0,f,c
  6046  0046' 1E00'              	comf	(___aomod@divisor+6)^0,f,c
  6047  0048' 1E00'              	comf	(___aomod@divisor+5)^0,f,c
  6048  004A' 1E00'              	comf	(___aomod@divisor+4)^0,f,c
  6049  004C' 1E00'              	comf	(___aomod@divisor+3)^0,f,c
  6050  004E' 1E00'              	comf	(___aomod@divisor+2)^0,f,c
  6051  0050' 1E00'              	comf	(___aomod@divisor+1)^0,f,c
  6052  0052' 6C00'              	negf	___aomod@divisor^0,c
  6053  0054' 0E00               	movlw	0
  6054  0056' 2200'              	addwfc	(___aomod@divisor+1)^0,f,c
  6055  0058' 2200'              	addwfc	(___aomod@divisor+2)^0,f,c
  6056  005A' 2200'              	addwfc	(___aomod@divisor+3)^0,f,c
  6057  005C' 2200'              	addwfc	(___aomod@divisor+4)^0,f,c
  6058  005E' 2200'              	addwfc	(___aomod@divisor+5)^0,f,c
  6059  0060' 2200'              	addwfc	(___aomod@divisor+6)^0,f,c
  6060  0062' 2200'              	addwfc	(___aomod@divisor+7)^0,f,c
  6061  0064'                    l3659:
  6062  0064' 5000'              	movf	___aomod@divisor^0,w,c
  6063  0066' 1000'              	iorwf	(___aomod@divisor+1)^0,w,c
  6064  0068' 1000'              	iorwf	(___aomod@divisor+2)^0,w,c
  6065  006A' 1000'              	iorwf	(___aomod@divisor+3)^0,w,c
  6066  006C' 1000'              	iorwf	(___aomod@divisor+4)^0,w,c
  6067  006E' 1000'              	iorwf	(___aomod@divisor+5)^0,w,c
  6068  0070' 1000'              	iorwf	(___aomod@divisor+6)^0,w,c
  6069  0072' 1000'              	iorwf	(___aomod@divisor+7)^0,w,c
  6070  0074' B4D8               	btfsc	status,2,c
  6071  0076' EF00' F000'        	goto	u3491
  6072  007A' EF00' F000'        	goto	u3490
  6073  007E'                    u3491:
  6074  007E' EF00' F000'        	goto	l3675
  6075  0082'                    u3490:
  6076  0082' 0E01               	movlw	1
  6077  0084' 6E00'              	movwf	___aomod@counter^0,c
  6078  0086' EF00' F000'        	goto	l3665
  6079  008A'                    l3663:
  6080  008A' 90D8               	bcf	status,0,c
  6081  008C' 3600'              	rlcf	___aomod@divisor^0,f,c
  6082  008E' 3600'              	rlcf	(___aomod@divisor+1)^0,f,c
  6083  0090' 3600'              	rlcf	(___aomod@divisor+2)^0,f,c
  6084  0092' 3600'              	rlcf	(___aomod@divisor+3)^0,f,c
  6085  0094' 3600'              	rlcf	(___aomod@divisor+4)^0,f,c
  6086  0096' 3600'              	rlcf	(___aomod@divisor+5)^0,f,c
  6087  0098' 3600'              	rlcf	(___aomod@divisor+6)^0,f,c
  6088  009A' 3600'              	rlcf	(___aomod@divisor+7)^0,f,c
  6089  009C' 2A00'              	incf	___aomod@counter^0,f,c
  6090  009E'                    l3665:
  6091  009E' AE00'              	btfss	(___aomod@divisor+7)^0,7,c
  6092  00A0' EF00' F000'        	goto	u3501
  6093  00A4' EF00' F000'        	goto	u3500
  6094  00A8'                    u3501:
  6095  00A8' EF00' F000'        	goto	l3663
  6096  00AC'                    u3500:
  6097  00AC'                    l3667:
  6098  00AC' 5000'              	movf	___aomod@divisor^0,w,c
  6099  00AE' 5C00'              	subwf	___aomod@dividend^0,w,c
  6100  00B0' 5000'              	movf	(___aomod@divisor+1)^0,w,c
  6101  00B2' 5800'              	subwfb	(___aomod@dividend+1)^0,w,c
  6102  00B4' 5000'              	movf	(___aomod@divisor+2)^0,w,c
  6103  00B6' 5800'              	subwfb	(___aomod@dividend+2)^0,w,c
  6104  00B8' 5000'              	movf	(___aomod@divisor+3)^0,w,c
  6105  00BA' 5800'              	subwfb	(___aomod@dividend+3)^0,w,c
  6106  00BC' 5000'              	movf	(___aomod@divisor+4)^0,w,c
  6107  00BE' 5800'              	subwfb	(___aomod@dividend+4)^0,w,c
  6108  00C0' 5000'              	movf	(___aomod@divisor+5)^0,w,c
  6109  00C2' 5800'              	subwfb	(___aomod@dividend+5)^0,w,c
  6110  00C4' 5000'              	movf	(___aomod@divisor+6)^0,w,c
  6111  00C6' 5800'              	subwfb	(___aomod@dividend+6)^0,w,c
  6112  00C8' 5000'              	movf	(___aomod@divisor+7)^0,w,c
  6113  00CA' 5800'              	subwfb	(___aomod@dividend+7)^0,w,c
  6114  00CC' A0D8               	btfss	status,0,c
  6115  00CE' EF00' F000'        	goto	u3511
  6116  00D2' EF00' F000'        	goto	u3510
  6117  00D6'                    u3511:
  6118  00D6' EF00' F000'        	goto	l3671
  6119  00DA'                    u3510:
  6120  00DA' 5000'              	movf	___aomod@divisor^0,w,c
  6121  00DC' 5E00'              	subwf	___aomod@dividend^0,f,c
  6122  00DE' 5000'              	movf	(___aomod@divisor+1)^0,w,c
  6123  00E0' 5A00'              	subwfb	(___aomod@dividend+1)^0,f,c
  6124  00E2' 5000'              	movf	(___aomod@divisor+2)^0,w,c
  6125  00E4' 5A00'              	subwfb	(___aomod@dividend+2)^0,f,c
  6126  00E6' 5000'              	movf	(___aomod@divisor+3)^0,w,c
  6127  00E8' 5A00'              	subwfb	(___aomod@dividend+3)^0,f,c
  6128  00EA' 5000'              	movf	(___aomod@divisor+4)^0,w,c
  6129  00EC' 5A00'              	subwfb	(___aomod@dividend+4)^0,f,c
  6130  00EE' 5000'              	movf	(___aomod@divisor+5)^0,w,c
  6131  00F0' 5A00'              	subwfb	(___aomod@dividend+5)^0,f,c
  6132  00F2' 5000'              	movf	(___aomod@divisor+6)^0,w,c
  6133  00F4' 5A00'              	subwfb	(___aomod@dividend+6)^0,f,c
  6134  00F6' 5000'              	movf	(___aomod@divisor+7)^0,w,c
  6135  00F8' 5A00'              	subwfb	(___aomod@dividend+7)^0,f,c
  6136  00FA'                    l3671:
  6137  00FA' 90D8               	bcf	status,0,c
  6138  00FC' 3200'              	rrcf	(___aomod@divisor+7)^0,f,c
  6139  00FE' 3200'              	rrcf	(___aomod@divisor+6)^0,f,c
  6140  0100' 3200'              	rrcf	(___aomod@divisor+5)^0,f,c
  6141  0102' 3200'              	rrcf	(___aomod@divisor+4)^0,f,c
  6142  0104' 3200'              	rrcf	(___aomod@divisor+3)^0,f,c
  6143  0106' 3200'              	rrcf	(___aomod@divisor+2)^0,f,c
  6144  0108' 3200'              	rrcf	(___aomod@divisor+1)^0,f,c
  6145  010A' 3200'              	rrcf	___aomod@divisor^0,f,c
  6146  010C' 2E00'              	decfsz	___aomod@counter^0,f,c
  6147  010E' EF00' F000'        	goto	l3667
  6148  0112'                    l3675:
  6149  0112' 5000'              	movf	___aomod@sign^0,w,c
  6150  0114' B4D8               	btfsc	status,2,c
  6151  0116' EF00' F000'        	goto	u3521
  6152  011A' EF00' F000'        	goto	u3520
  6153  011E'                    u3521:
  6154  011E' EF00' F000'        	goto	l3679
  6155  0122'                    u3520:
  6156  0122' 1E00'              	comf	(___aomod@dividend+7)^0,f,c
  6157  0124' 1E00'              	comf	(___aomod@dividend+6)^0,f,c
  6158  0126' 1E00'              	comf	(___aomod@dividend+5)^0,f,c
  6159  0128' 1E00'              	comf	(___aomod@dividend+4)^0,f,c
  6160  012A' 1E00'              	comf	(___aomod@dividend+3)^0,f,c
  6161  012C' 1E00'              	comf	(___aomod@dividend+2)^0,f,c
  6162  012E' 1E00'              	comf	(___aomod@dividend+1)^0,f,c
  6163  0130' 6C00'              	negf	___aomod@dividend^0,c
  6164  0132' 0E00               	movlw	0
  6165  0134' 2200'              	addwfc	(___aomod@dividend+1)^0,f,c
  6166  0136' 2200'              	addwfc	(___aomod@dividend+2)^0,f,c
  6167  0138' 2200'              	addwfc	(___aomod@dividend+3)^0,f,c
  6168  013A' 2200'              	addwfc	(___aomod@dividend+4)^0,f,c
  6169  013C' 2200'              	addwfc	(___aomod@dividend+5)^0,f,c
  6170  013E' 2200'              	addwfc	(___aomod@dividend+6)^0,f,c
  6171  0140' 2200'              	addwfc	(___aomod@dividend+7)^0,f,c
  6172  0142'                    l3679:
  6173  0142' C004' F004'        	movff	___aomod@dividend,?___aomod
  6174  0146' C005' F005'        	movff	___aomod@dividend+1,?___aomod+1
  6175  014A' C006' F006'        	movff	___aomod@dividend+2,?___aomod+2
  6176  014E' C007' F007'        	movff	___aomod@dividend+3,?___aomod+3
  6177  0152' C008' F008'        	movff	___aomod@dividend+4,?___aomod+4
  6178  0156' C009' F009'        	movff	___aomod@dividend+5,?___aomod+5
  6179  015A' C00A' F00A'        	movff	___aomod@dividend+6,?___aomod+6
  6180  015E' C00B' F00B'        	movff	___aomod@dividend+7,?___aomod+7
  6181  0162' 0012               	return		;funcret
  6182  0164'                    __end_of___aomod:
  6183                           	callstack 0
  6184                           
  6185 ;; *************** function ___aodiv *****************
  6186 ;; Defined at:
  6187 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aodiv.c"
  6188 ;; Parameters:    Size  Location     Type
  6189 ;;  dividend        8    4[COMRAM] long long 
  6190 ;;  divisor         8   12[COMRAM] long long 
  6191 ;; Auto vars:     Size  Location     Type
  6192 ;;  quotient        8   22[COMRAM] long long 
  6193 ;;  sign            1   21[COMRAM] unsigned char 
  6194 ;;  counter         1   20[COMRAM] unsigned char 
  6195 ;; Return value:  Size  Location     Type
  6196 ;;                  8    4[COMRAM] long long 
  6197 ;; Registers used:
  6198 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6199 ;; Tracked objects:
  6200 ;;		On entry : 0/0
  6201 ;;		On exit  : 0/0
  6202 ;;		Unchanged: 0/0
  6203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6204 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6205 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6207 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6208 ;;Total ram usage:       26 bytes
  6209 ;; Hardware stack levels used: 1
  6210 ;; Hardware stack levels required when called: 2
  6211 ;; This function calls:
  6212 ;;		Nothing
  6213 ;; This function is called by:
  6214 ;;		_dtoa
  6215 ;; This function uses a non-reentrant model
  6216 ;;
  6217                           
  6218                           	psect	text25
  6219  0000'                    __ptext25:
  6220                           	callstack 0
  6221  0000'                    ___aodiv:
  6222                           	callstack 24
  6223  0000' 0E00               	movlw	0
  6224  0002' 6E00'              	movwf	___aodiv@sign^0,c
  6225  0004' BE00'              	btfsc	(___aodiv@divisor+7)^0,7,c
  6226  0006' EF00' F000'        	goto	u3400
  6227  000A' EF00' F000'        	goto	u3401
  6228  000E'                    u3401:
  6229  000E' EF00' F000'        	goto	l3611
  6230  0012'                    u3400:
  6231  0012' 1E00'              	comf	(___aodiv@divisor+7)^0,f,c
  6232  0014' 1E00'              	comf	(___aodiv@divisor+6)^0,f,c
  6233  0016' 1E00'              	comf	(___aodiv@divisor+5)^0,f,c
  6234  0018' 1E00'              	comf	(___aodiv@divisor+4)^0,f,c
  6235  001A' 1E00'              	comf	(___aodiv@divisor+3)^0,f,c
  6236  001C' 1E00'              	comf	(___aodiv@divisor+2)^0,f,c
  6237  001E' 1E00'              	comf	(___aodiv@divisor+1)^0,f,c
  6238  0020' 6C00'              	negf	___aodiv@divisor^0,c
  6239  0022' 0E00               	movlw	0
  6240  0024' 2200'              	addwfc	(___aodiv@divisor+1)^0,f,c
  6241  0026' 2200'              	addwfc	(___aodiv@divisor+2)^0,f,c
  6242  0028' 2200'              	addwfc	(___aodiv@divisor+3)^0,f,c
  6243  002A' 2200'              	addwfc	(___aodiv@divisor+4)^0,f,c
  6244  002C' 2200'              	addwfc	(___aodiv@divisor+5)^0,f,c
  6245  002E' 2200'              	addwfc	(___aodiv@divisor+6)^0,f,c
  6246  0030' 2200'              	addwfc	(___aodiv@divisor+7)^0,f,c
  6247  0032' 0E01               	movlw	1
  6248  0034' 6E00'              	movwf	___aodiv@sign^0,c
  6249  0036'                    l3611:
  6250  0036' BE00'              	btfsc	(___aodiv@dividend+7)^0,7,c
  6251  0038' EF00' F000'        	goto	u3410
  6252  003C' EF00' F000'        	goto	u3411
  6253  0040'                    u3411:
  6254  0040' EF00' F000'        	goto	l3617
  6255  0044'                    u3410:
  6256  0044' 1E00'              	comf	(___aodiv@dividend+7)^0,f,c
  6257  0046' 1E00'              	comf	(___aodiv@dividend+6)^0,f,c
  6258  0048' 1E00'              	comf	(___aodiv@dividend+5)^0,f,c
  6259  004A' 1E00'              	comf	(___aodiv@dividend+4)^0,f,c
  6260  004C' 1E00'              	comf	(___aodiv@dividend+3)^0,f,c
  6261  004E' 1E00'              	comf	(___aodiv@dividend+2)^0,f,c
  6262  0050' 1E00'              	comf	(___aodiv@dividend+1)^0,f,c
  6263  0052' 6C00'              	negf	___aodiv@dividend^0,c
  6264  0054' 0E00               	movlw	0
  6265  0056' 2200'              	addwfc	(___aodiv@dividend+1)^0,f,c
  6266  0058' 2200'              	addwfc	(___aodiv@dividend+2)^0,f,c
  6267  005A' 2200'              	addwfc	(___aodiv@dividend+3)^0,f,c
  6268  005C' 2200'              	addwfc	(___aodiv@dividend+4)^0,f,c
  6269  005E' 2200'              	addwfc	(___aodiv@dividend+5)^0,f,c
  6270  0060' 2200'              	addwfc	(___aodiv@dividend+6)^0,f,c
  6271  0062' 2200'              	addwfc	(___aodiv@dividend+7)^0,f,c
  6272  0064' 0E01               	movlw	1
  6273  0066' 1A00'              	xorwf	___aodiv@sign^0,f,c
  6274  0068'                    l3617:
  6275  0068' EE20' F000'        	lfsr	2,___aodiv@quotient
  6276  006C' 0E07               	movlw	7
  6277  006E'                    u3421:
  6278  006E' 6ADE               	clrf	postinc2,c
  6279  0070' 06E8               	decf	wreg,f,c
  6280  0072' E2FD               	bc	u3421
  6281  0074' 5000'              	movf	___aodiv@divisor^0,w,c
  6282  0076' 1000'              	iorwf	(___aodiv@divisor+1)^0,w,c
  6283  0078' 1000'              	iorwf	(___aodiv@divisor+2)^0,w,c
  6284  007A' 1000'              	iorwf	(___aodiv@divisor+3)^0,w,c
  6285  007C' 1000'              	iorwf	(___aodiv@divisor+4)^0,w,c
  6286  007E' 1000'              	iorwf	(___aodiv@divisor+5)^0,w,c
  6287  0080' 1000'              	iorwf	(___aodiv@divisor+6)^0,w,c
  6288  0082' 1000'              	iorwf	(___aodiv@divisor+7)^0,w,c
  6289  0084' B4D8               	btfsc	status,2,c
  6290  0086' EF00' F000'        	goto	u3431
  6291  008A' EF00' F000'        	goto	u3430
  6292  008E'                    u3431:
  6293  008E' EF00' F000'        	goto	l3639
  6294  0092'                    u3430:
  6295  0092' 0E01               	movlw	1
  6296  0094' 6E00'              	movwf	___aodiv@counter^0,c
  6297  0096' EF00' F000'        	goto	l3625
  6298  009A'                    l3623:
  6299  009A' 90D8               	bcf	status,0,c
  6300  009C' 3600'              	rlcf	___aodiv@divisor^0,f,c
  6301  009E' 3600'              	rlcf	(___aodiv@divisor+1)^0,f,c
  6302  00A0' 3600'              	rlcf	(___aodiv@divisor+2)^0,f,c
  6303  00A2' 3600'              	rlcf	(___aodiv@divisor+3)^0,f,c
  6304  00A4' 3600'              	rlcf	(___aodiv@divisor+4)^0,f,c
  6305  00A6' 3600'              	rlcf	(___aodiv@divisor+5)^0,f,c
  6306  00A8' 3600'              	rlcf	(___aodiv@divisor+6)^0,f,c
  6307  00AA' 3600'              	rlcf	(___aodiv@divisor+7)^0,f,c
  6308  00AC' 2A00'              	incf	___aodiv@counter^0,f,c
  6309  00AE'                    l3625:
  6310  00AE' AE00'              	btfss	(___aodiv@divisor+7)^0,7,c
  6311  00B0' EF00' F000'        	goto	u3441
  6312  00B4' EF00' F000'        	goto	u3440
  6313  00B8'                    u3441:
  6314  00B8' EF00' F000'        	goto	l3623
  6315  00BC'                    u3440:
  6316  00BC'                    l3627:
  6317  00BC' 90D8               	bcf	status,0,c
  6318  00BE' 3600'              	rlcf	___aodiv@quotient^0,f,c
  6319  00C0' 3600'              	rlcf	(___aodiv@quotient+1)^0,f,c
  6320  00C2' 3600'              	rlcf	(___aodiv@quotient+2)^0,f,c
  6321  00C4' 3600'              	rlcf	(___aodiv@quotient+3)^0,f,c
  6322  00C6' 3600'              	rlcf	(___aodiv@quotient+4)^0,f,c
  6323  00C8' 3600'              	rlcf	(___aodiv@quotient+5)^0,f,c
  6324  00CA' 3600'              	rlcf	(___aodiv@quotient+6)^0,f,c
  6325  00CC' 3600'              	rlcf	(___aodiv@quotient+7)^0,f,c
  6326  00CE' 5000'              	movf	___aodiv@divisor^0,w,c
  6327  00D0' 5C00'              	subwf	___aodiv@dividend^0,w,c
  6328  00D2' 5000'              	movf	(___aodiv@divisor+1)^0,w,c
  6329  00D4' 5800'              	subwfb	(___aodiv@dividend+1)^0,w,c
  6330  00D6' 5000'              	movf	(___aodiv@divisor+2)^0,w,c
  6331  00D8' 5800'              	subwfb	(___aodiv@dividend+2)^0,w,c
  6332  00DA' 5000'              	movf	(___aodiv@divisor+3)^0,w,c
  6333  00DC' 5800'              	subwfb	(___aodiv@dividend+3)^0,w,c
  6334  00DE' 5000'              	movf	(___aodiv@divisor+4)^0,w,c
  6335  00E0' 5800'              	subwfb	(___aodiv@dividend+4)^0,w,c
  6336  00E2' 5000'              	movf	(___aodiv@divisor+5)^0,w,c
  6337  00E4' 5800'              	subwfb	(___aodiv@dividend+5)^0,w,c
  6338  00E6' 5000'              	movf	(___aodiv@divisor+6)^0,w,c
  6339  00E8' 5800'              	subwfb	(___aodiv@dividend+6)^0,w,c
  6340  00EA' 5000'              	movf	(___aodiv@divisor+7)^0,w,c
  6341  00EC' 5800'              	subwfb	(___aodiv@dividend+7)^0,w,c
  6342  00EE' A0D8               	btfss	status,0,c
  6343  00F0' EF00' F000'        	goto	u3451
  6344  00F4' EF00' F000'        	goto	u3450
  6345  00F8'                    u3451:
  6346  00F8' EF00' F000'        	goto	l3635
  6347  00FC'                    u3450:
  6348  00FC' 5000'              	movf	___aodiv@divisor^0,w,c
  6349  00FE' 5E00'              	subwf	___aodiv@dividend^0,f,c
  6350  0100' 5000'              	movf	(___aodiv@divisor+1)^0,w,c
  6351  0102' 5A00'              	subwfb	(___aodiv@dividend+1)^0,f,c
  6352  0104' 5000'              	movf	(___aodiv@divisor+2)^0,w,c
  6353  0106' 5A00'              	subwfb	(___aodiv@dividend+2)^0,f,c
  6354  0108' 5000'              	movf	(___aodiv@divisor+3)^0,w,c
  6355  010A' 5A00'              	subwfb	(___aodiv@dividend+3)^0,f,c
  6356  010C' 5000'              	movf	(___aodiv@divisor+4)^0,w,c
  6357  010E' 5A00'              	subwfb	(___aodiv@dividend+4)^0,f,c
  6358  0110' 5000'              	movf	(___aodiv@divisor+5)^0,w,c
  6359  0112' 5A00'              	subwfb	(___aodiv@dividend+5)^0,f,c
  6360  0114' 5000'              	movf	(___aodiv@divisor+6)^0,w,c
  6361  0116' 5A00'              	subwfb	(___aodiv@dividend+6)^0,f,c
  6362  0118' 5000'              	movf	(___aodiv@divisor+7)^0,w,c
  6363  011A' 5A00'              	subwfb	(___aodiv@dividend+7)^0,f,c
  6364  011C' 8000'              	bsf	___aodiv@quotient^0,0,c
  6365  011E'                    l3635:
  6366  011E' 90D8               	bcf	status,0,c
  6367  0120' 3200'              	rrcf	(___aodiv@divisor+7)^0,f,c
  6368  0122' 3200'              	rrcf	(___aodiv@divisor+6)^0,f,c
  6369  0124' 3200'              	rrcf	(___aodiv@divisor+5)^0,f,c
  6370  0126' 3200'              	rrcf	(___aodiv@divisor+4)^0,f,c
  6371  0128' 3200'              	rrcf	(___aodiv@divisor+3)^0,f,c
  6372  012A' 3200'              	rrcf	(___aodiv@divisor+2)^0,f,c
  6373  012C' 3200'              	rrcf	(___aodiv@divisor+1)^0,f,c
  6374  012E' 3200'              	rrcf	___aodiv@divisor^0,f,c
  6375  0130' 2E00'              	decfsz	___aodiv@counter^0,f,c
  6376  0132' EF00' F000'        	goto	l3627
  6377  0136'                    l3639:
  6378  0136' 5000'              	movf	___aodiv@sign^0,w,c
  6379  0138' B4D8               	btfsc	status,2,c
  6380  013A' EF00' F000'        	goto	u3461
  6381  013E' EF00' F000'        	goto	u3460
  6382  0142'                    u3461:
  6383  0142' EF00' F000'        	goto	l3643
  6384  0146'                    u3460:
  6385  0146' 1E00'              	comf	(___aodiv@quotient+7)^0,f,c
  6386  0148' 1E00'              	comf	(___aodiv@quotient+6)^0,f,c
  6387  014A' 1E00'              	comf	(___aodiv@quotient+5)^0,f,c
  6388  014C' 1E00'              	comf	(___aodiv@quotient+4)^0,f,c
  6389  014E' 1E00'              	comf	(___aodiv@quotient+3)^0,f,c
  6390  0150' 1E00'              	comf	(___aodiv@quotient+2)^0,f,c
  6391  0152' 1E00'              	comf	(___aodiv@quotient+1)^0,f,c
  6392  0154' 6C00'              	negf	___aodiv@quotient^0,c
  6393  0156' 0E00               	movlw	0
  6394  0158' 2200'              	addwfc	(___aodiv@quotient+1)^0,f,c
  6395  015A' 2200'              	addwfc	(___aodiv@quotient+2)^0,f,c
  6396  015C' 2200'              	addwfc	(___aodiv@quotient+3)^0,f,c
  6397  015E' 2200'              	addwfc	(___aodiv@quotient+4)^0,f,c
  6398  0160' 2200'              	addwfc	(___aodiv@quotient+5)^0,f,c
  6399  0162' 2200'              	addwfc	(___aodiv@quotient+6)^0,f,c
  6400  0164' 2200'              	addwfc	(___aodiv@quotient+7)^0,f,c
  6401  0166'                    l3643:
  6402  0166' C016' F004'        	movff	___aodiv@quotient,?___aodiv
  6403  016A' C017' F005'        	movff	___aodiv@quotient+1,?___aodiv+1
  6404  016E' C018' F006'        	movff	___aodiv@quotient+2,?___aodiv+2
  6405  0172' C019' F007'        	movff	___aodiv@quotient+3,?___aodiv+3
  6406  0176' C01A' F008'        	movff	___aodiv@quotient+4,?___aodiv+4
  6407  017A' C01B' F009'        	movff	___aodiv@quotient+5,?___aodiv+5
  6408  017E' C01C' F00A'        	movff	___aodiv@quotient+6,?___aodiv+6
  6409  0182' C01D' F00B'        	movff	___aodiv@quotient+7,?___aodiv+7
  6410  0186' 0012               	return		;funcret
  6411  0188'                    __end_of___aodiv:
  6412                           	callstack 0
  6413                           
  6414 ;; *************** function _sendTxBuf *****************
  6415 ;; Defined at:
  6416 ;;		line 96 in file "MazeRobot.X/serial.c"
  6417 ;; Parameters:    Size  Location     Type
  6418 ;;		None
  6419 ;; Auto vars:     Size  Location     Type
  6420 ;;		None
  6421 ;; Return value:  Size  Location     Type
  6422 ;;                  1    wreg      void 
  6423 ;; Registers used:
  6424 ;;		wreg, status,2, status,0, cstack
  6425 ;; Tracked objects:
  6426 ;;		On entry : 0/0
  6427 ;;		On exit  : 0/0
  6428 ;;		Unchanged: 0/0
  6429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6433 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6434 ;;Total ram usage:        0 bytes
  6435 ;; Hardware stack levels used: 1
  6436 ;; Hardware stack levels required when called: 3
  6437 ;; This function calls:
  6438 ;;		_isDataInTxBuf
  6439 ;; This function is called by:
  6440 ;;		_main
  6441 ;; This function uses a non-reentrant model
  6442 ;;
  6443                           
  6444                           	psect	text26
  6445  0000'                    __ptext26:
  6446                           	callstack 0
  6447  0000'                    _sendTxBuf:
  6448                           	callstack 27
  6449  0000'                    
  6450                           ;MazeRobot.X/serial.c: 97:     if (isDataInTxBuf()) {PIE4bits.TX4IE=1;}
  6451  0000' EC00' F000'        	call	_isDataInTxBuf	;wreg free
  6452  0004' 0900               	iorlw	0
  6453  0006' B4D8               	btfsc	status,2,c
  6454  0008' EF00' F000'        	goto	u5581
  6455  000C' EF00' F000'        	goto	u5580
  6456  0010'                    u5581:
  6457  0010' EF00' F000'        	goto	l455
  6458  0014'                    u5580:
  6459  0014' 010E               	movlb	14	; () banked
  6460  0016' 852D               	bsf	45,2,b	;volatile
  6461  0018'                    l455:
  6462  0018' 0012               	return		;funcret
  6463  001A'                    __end_of_sendTxBuf:
  6464                           	callstack 0
  6465                           
  6466 ;; *************** function _isDataInTxBuf *****************
  6467 ;; Defined at:
  6468 ;;		line 83 in file "MazeRobot.X/serial.c"
  6469 ;; Parameters:    Size  Location     Type
  6470 ;;		None
  6471 ;; Auto vars:     Size  Location     Type
  6472 ;;		None
  6473 ;; Return value:  Size  Location     Type
  6474 ;;                  1    wreg      unsigned char 
  6475 ;; Registers used:
  6476 ;;		wreg, status,2, status,0
  6477 ;; Tracked objects:
  6478 ;;		On entry : 0/0
  6479 ;;		On exit  : 0/0
  6480 ;;		Unchanged: 0/0
  6481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6485 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6486 ;;Total ram usage:        0 bytes
  6487 ;; Hardware stack levels used: 1
  6488 ;; Hardware stack levels required when called: 2
  6489 ;; This function calls:
  6490 ;;		Nothing
  6491 ;; This function is called by:
  6492 ;;		_sendTxBuf
  6493 ;; This function uses a non-reentrant model
  6494 ;;
  6495                           
  6496                           	psect	text27
  6497  0000'                    __ptext27:
  6498                           	callstack 0
  6499  0000'                    _isDataInTxBuf:
  6500                           	callstack 27
  6501  0000'                    
  6502                           ;MazeRobot.X/serial.c: 84:     return (TxBufWriteCnt!=TxBufReadCnt);
  6503  0000' 5000'              	movf	_TxBufReadCnt^0,w,c	;volatile
  6504  0002' 1800'              	xorwf	_TxBufWriteCnt^0,w,c	;volatile
  6505  0004' A4D8               	btfss	status,2,c
  6506  0006' EF00' F000'        	goto	u4901
  6507  000A' EF00' F000'        	goto	u4900
  6508  000E'                    u4901:
  6509  000E' 0E01               	movlw	1
  6510  0010' EF00' F000'        	goto	u4910
  6511  0014'                    u4900:
  6512  0014' 0E00               	movlw	0
  6513  0016'                    u4910:
  6514  0016' 0012               	return		;funcret
  6515  0018'                    __end_of_isDataInTxBuf:
  6516                           	callstack 0
  6517                           
  6518 ;; *************** function _initUSART4 *****************
  6519 ;; Defined at:
  6520 ;;		line 5 in file "MazeRobot.X/serial.c"
  6521 ;; Parameters:    Size  Location     Type
  6522 ;;		None
  6523 ;; Auto vars:     Size  Location     Type
  6524 ;;		None
  6525 ;; Return value:  Size  Location     Type
  6526 ;;                  1    wreg      void 
  6527 ;; Registers used:
  6528 ;;		wreg, status,2
  6529 ;; Tracked objects:
  6530 ;;		On entry : 0/0
  6531 ;;		On exit  : 0/0
  6532 ;;		Unchanged: 0/0
  6533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6535 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6537 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6538 ;;Total ram usage:        0 bytes
  6539 ;; Hardware stack levels used: 1
  6540 ;; Hardware stack levels required when called: 2
  6541 ;; This function calls:
  6542 ;;		Nothing
  6543 ;; This function is called by:
  6544 ;;		_main
  6545 ;; This function uses a non-reentrant model
  6546 ;;
  6547                           
  6548                           	psect	text28
  6549  0000'                    __ptext28:
  6550                           	callstack 0
  6551  0000'                    _initUSART4:
  6552                           	callstack 28
  6553  0000'                    
  6554                           ;MazeRobot.X/serial.c: 9:     RC0PPS = 0x12;
  6555  0000' 0E12               	movlw	18
  6556  0002' 010E               	movlb	14	; () banked
  6557  0004' 6F62               	movwf	98,b	;volatile
  6558                           
  6559                           ;MazeRobot.X/serial.c: 10:     RX4PPS = 0x11;
  6560  0006' 0E11               	movlw	17
  6561  0008' 6F15               	movwf	21,b	;volatile
  6562  000A'                    
  6563                           ; BSR set to: 14
  6564                           ;MazeRobot.X/serial.c: 11:     TRISCbits.TRISC1=1;
  6565  000A' 8283               	bsf	131,1,c	;volatile
  6566  000C'                    
  6567                           ; BSR set to: 14
  6568                           ;MazeRobot.X/serial.c: 13:     BAUD4CONbits.BRG16 = 0;
  6569  000C' 97E9               	bcf	233,3,b	;volatile
  6570  000E'                    
  6571                           ; BSR set to: 14
  6572                           ;MazeRobot.X/serial.c: 14:     TX4STAbits.BRGH = 0;
  6573  000E' 95E8               	bcf	232,2,b	;volatile
  6574                           
  6575                           ;MazeRobot.X/serial.c: 15:     SP4BRGL = 51;
  6576  0010' 0E33               	movlw	51
  6577  0012' 6FE5               	movwf	229,b	;volatile
  6578                           
  6579                           ;MazeRobot.X/serial.c: 16:     SP4BRGH = 0;
  6580  0014' 0E00               	movlw	0
  6581  0016' 6FE6               	movwf	230,b	;volatile
  6582  0018'                    
  6583                           ; BSR set to: 14
  6584                           ;MazeRobot.X/serial.c: 18:     RC4STAbits.CREN = 1;
  6585  0018' 89E7               	bsf	231,4,b	;volatile
  6586  001A'                    
  6587                           ; BSR set to: 14
  6588                           ;MazeRobot.X/serial.c: 19:     TX4STAbits.TXEN = 1;
  6589  001A' 8BE8               	bsf	232,5,b	;volatile
  6590  001C'                    
  6591                           ; BSR set to: 14
  6592                           ;MazeRobot.X/serial.c: 20:     RC4STAbits.SPEN = 1;
  6593  001C' 8FE7               	bsf	231,7,b	;volatile
  6594  001E'                    
  6595                           ; BSR set to: 14
  6596  001E' 0012               	return		;funcret
  6597  0020'                    __end_of_initUSART4:
  6598                           	callstack 0
  6599                           
  6600 ;; *************** function _initDCmotorsPWM *****************
  6601 ;; Defined at:
  6602 ;;		line 10 in file "MazeRobot.X/dc_motor.c"
  6603 ;; Parameters:    Size  Location     Type
  6604 ;;  PWMperiod       2    4[COMRAM] int 
  6605 ;; Auto vars:     Size  Location     Type
  6606 ;;		None
  6607 ;; Return value:  Size  Location     Type
  6608 ;;                  1    wreg      void 
  6609 ;; Registers used:
  6610 ;;		wreg, status,2
  6611 ;; Tracked objects:
  6612 ;;		On entry : 0/0
  6613 ;;		On exit  : 0/0
  6614 ;;		Unchanged: 0/0
  6615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6616 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6619 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6620 ;;Total ram usage:        2 bytes
  6621 ;; Hardware stack levels used: 1
  6622 ;; Hardware stack levels required when called: 2
  6623 ;; This function calls:
  6624 ;;		Nothing
  6625 ;; This function is called by:
  6626 ;;		_main
  6627 ;; This function uses a non-reentrant model
  6628 ;;
  6629                           
  6630                           	psect	text29
  6631  0000'                    __ptext29:
  6632                           	callstack 0
  6633  0000'                    _initDCmotorsPWM:
  6634                           	callstack 28
  6635  0000'                    
  6636                           ;MazeRobot.X/dc_motor.c: 14:     LATEbits.LATE2 = 0;
  6637  0000' 947D               	bcf	125,2,c	;volatile
  6638                           
  6639                           ;MazeRobot.X/dc_motor.c: 15:     LATEbits.LATE4 = 0;
  6640  0002' 987D               	bcf	125,4,c	;volatile
  6641                           
  6642                           ;MazeRobot.X/dc_motor.c: 16:     LATCbits.LATC7 = 0;
  6643  0004' 9E7B               	bcf	123,7,c	;volatile
  6644                           
  6645                           ;MazeRobot.X/dc_motor.c: 17:     LATGbits.LATG6 = 0;
  6646  0006' 9C7F               	bcf	127,6,c	;volatile
  6647                           
  6648                           ;MazeRobot.X/dc_motor.c: 20:     TRISEbits.TRISE2 = 0 ;
  6649  0008' 9485               	bcf	133,2,c	;volatile
  6650                           
  6651                           ;MazeRobot.X/dc_motor.c: 21:     TRISEbits.TRISE4 = 0 ;
  6652  000A' 9885               	bcf	133,4,c	;volatile
  6653                           
  6654                           ;MazeRobot.X/dc_motor.c: 22:     TRISCbits.TRISC7 = 0 ;
  6655  000C' 9E83               	bcf	131,7,c	;volatile
  6656                           
  6657                           ;MazeRobot.X/dc_motor.c: 23:     TRISGbits.TRISG6 = 0 ;
  6658  000E' 9C87               	bcf	135,6,c	;volatile
  6659  0010'                    
  6660                           ;MazeRobot.X/dc_motor.c: 26:     RE2PPS=0x05;
  6661  0010' 0E05               	movlw	5
  6662  0012' 010E               	movlb	14	; () banked
  6663  0014' 6F74               	movwf	116,b	;volatile
  6664                           
  6665                           ;MazeRobot.X/dc_motor.c: 27:     RE4PPS=0x06;
  6666  0016' 0E06               	movlw	6
  6667  0018' 6F76               	movwf	118,b	;volatile
  6668                           
  6669                           ;MazeRobot.X/dc_motor.c: 28:     RC7PPS=0x07;
  6670  001A' 0E07               	movlw	7
  6671  001C' 6F69               	movwf	105,b	;volatile
  6672                           
  6673                           ;MazeRobot.X/dc_motor.c: 29:     RG6PPS=0x08;
  6674  001E' 0E08               	movlw	8
  6675  0020' 6F88               	movwf	136,b	;volatile
  6676                           
  6677                           ;MazeRobot.X/dc_motor.c: 32:     T2CONbits.CKPS=0b011;
  6678  0022' 50BD               	movf	189,w,c	;volatile
  6679  0024' 0B8F               	andlw	-113
  6680  0026' 0930               	iorlw	48
  6681  0028' 6EBD               	movwf	189,c	;volatile
  6682                           
  6683                           ;MazeRobot.X/dc_motor.c: 33:     T2HLTbits.MODE=0b00000;
  6684  002A' 0EE0               	movlw	-32
  6685  002C' 16BE               	andwf	190,f,c	;volatile
  6686                           
  6687                           ;MazeRobot.X/dc_motor.c: 34:     T2CLKCONbits.CS=0b0001;
  6688  002E' 50BF               	movf	191,w,c	;volatile
  6689  0030' 0BF0               	andlw	-16
  6690  0032' 0901               	iorlw	1
  6691  0034' 6EBF               	movwf	191,c	;volatile
  6692                           
  6693                           ;MazeRobot.X/dc_motor.c: 38:     T2PR=199;
  6694  0036' 0EC7               	movlw	199
  6695  0038' 6EBC               	movwf	188,c	;volatile
  6696  003A'                    
  6697                           ; BSR set to: 14
  6698                           ;MazeRobot.X/dc_motor.c: 39:     T2CONbits.ON=1;
  6699  003A' 8EBD               	bsf	189,7,c	;volatile
  6700                           
  6701                           ;MazeRobot.X/dc_motor.c: 43:     CCPR1H=0;
  6702  003C' 0E00               	movlw	0
  6703  003E' 6EAA               	movwf	170,c	;volatile
  6704                           
  6705                           ;MazeRobot.X/dc_motor.c: 44:     CCPR2H=0;
  6706  0040' 0E00               	movlw	0
  6707  0042' 6EA6               	movwf	166,c	;volatile
  6708                           
  6709                           ;MazeRobot.X/dc_motor.c: 45:     CCPR3H=0;
  6710  0044' 0E00               	movlw	0
  6711  0046' 010F               	movlb	15	; () banked
  6712  0048' 6F25               	movwf	37,b	;volatile
  6713                           
  6714                           ;MazeRobot.X/dc_motor.c: 46:     CCPR4H=0;
  6715  004A' 0E00               	movlw	0
  6716  004C' 6F21               	movwf	33,b	;volatile
  6717                           
  6718                           ;MazeRobot.X/dc_motor.c: 49:     CCPTMRS0bits.C1TSEL=0;
  6719  004E' 0EFC               	movlw	-4
  6720  0050' 16AD               	andwf	173,f,c	;volatile
  6721                           
  6722                           ;MazeRobot.X/dc_motor.c: 50:     CCPTMRS0bits.C2TSEL=0;
  6723  0052' 0EF3               	movlw	-13
  6724  0054' 16AD               	andwf	173,f,c	;volatile
  6725                           
  6726                           ;MazeRobot.X/dc_motor.c: 51:     CCPTMRS0bits.C3TSEL=0;
  6727  0056' 0ECF               	movlw	-49
  6728  0058' 16AD               	andwf	173,f,c	;volatile
  6729                           
  6730                           ;MazeRobot.X/dc_motor.c: 52:     CCPTMRS0bits.C4TSEL=0;
  6731  005A' 0E3F               	movlw	-193
  6732  005C' 16AD               	andwf	173,f,c	;volatile
  6733  005E'                    
  6734                           ; BSR set to: 15
  6735                           ;MazeRobot.X/dc_motor.c: 55:     CCP1CONbits.FMT=1;
  6736  005E' 88AB               	bsf	171,4,c	;volatile
  6737                           
  6738                           ;MazeRobot.X/dc_motor.c: 56:     CCP1CONbits.CCP1MODE=0b1100;
  6739  0060' 50AB               	movf	171,w,c	;volatile
  6740  0062' 0BF0               	andlw	-16
  6741  0064' 090C               	iorlw	12
  6742  0066' 6EAB               	movwf	171,c	;volatile
  6743  0068'                    
  6744                           ; BSR set to: 15
  6745                           ;MazeRobot.X/dc_motor.c: 57:     CCP1CONbits.EN=1;
  6746  0068' 8EAB               	bsf	171,7,c	;volatile
  6747  006A'                    
  6748                           ; BSR set to: 15
  6749                           ;MazeRobot.X/dc_motor.c: 59:     CCP2CONbits.FMT=1;
  6750  006A' 88A7               	bsf	167,4,c	;volatile
  6751                           
  6752                           ;MazeRobot.X/dc_motor.c: 60:     CCP2CONbits.CCP2MODE=0b1100;
  6753  006C' 50A7               	movf	167,w,c	;volatile
  6754  006E' 0BF0               	andlw	-16
  6755  0070' 090C               	iorlw	12
  6756  0072' 6EA7               	movwf	167,c	;volatile
  6757  0074'                    
  6758                           ; BSR set to: 15
  6759                           ;MazeRobot.X/dc_motor.c: 61:     CCP2CONbits.EN=1;
  6760  0074' 8EA7               	bsf	167,7,c	;volatile
  6761  0076'                    
  6762                           ; BSR set to: 15
  6763                           ;MazeRobot.X/dc_motor.c: 63:     CCP3CONbits.FMT=1;
  6764  0076' 8926               	bsf	38,4,b	;volatile
  6765                           
  6766                           ;MazeRobot.X/dc_motor.c: 64:     CCP3CONbits.CCP3MODE=0b1100;
  6767  0078' 5126               	movf	38,w,b	;volatile
  6768  007A' 0BF0               	andlw	-16
  6769  007C' 090C               	iorlw	12
  6770  007E' 6F26               	movwf	38,b	;volatile
  6771  0080'                    
  6772                           ; BSR set to: 15
  6773                           ;MazeRobot.X/dc_motor.c: 65:     CCP3CONbits.EN=1;
  6774  0080' 8F26               	bsf	38,7,b	;volatile
  6775  0082'                    
  6776                           ; BSR set to: 15
  6777                           ;MazeRobot.X/dc_motor.c: 67:     CCP4CONbits.FMT=1;
  6778  0082' 8922               	bsf	34,4,b	;volatile
  6779                           
  6780                           ;MazeRobot.X/dc_motor.c: 68:     CCP4CONbits.CCP4MODE=0b1100;
  6781  0084' 5122               	movf	34,w,b	;volatile
  6782  0086' 0BF0               	andlw	-16
  6783  0088' 090C               	iorlw	12
  6784  008A' 6F22               	movwf	34,b	;volatile
  6785  008C'                    
  6786                           ; BSR set to: 15
  6787                           ;MazeRobot.X/dc_motor.c: 69:     CCP4CONbits.EN=1;
  6788  008C' 8F22               	bsf	34,7,b	;volatile
  6789  008E'                    
  6790                           ; BSR set to: 15
  6791  008E' 0012               	return		;funcret
  6792  0090'                    __end_of_initDCmotorsPWM:
  6793                           	callstack 0
  6794                           
  6795 ;; *************** function _color_click_init *****************
  6796 ;; Defined at:
  6797 ;;		line 7 in file "MazeRobot.X/color.c"
  6798 ;; Parameters:    Size  Location     Type
  6799 ;;		None
  6800 ;; Auto vars:     Size  Location     Type
  6801 ;;		None
  6802 ;; Return value:  Size  Location     Type
  6803 ;;                  1    wreg      void 
  6804 ;; Registers used:
  6805 ;;		wreg, status,2, status,0, cstack
  6806 ;; Tracked objects:
  6807 ;;		On entry : 0/0
  6808 ;;		On exit  : 0/0
  6809 ;;		Unchanged: 0/0
  6810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6812 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6813 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6814 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6815 ;;Total ram usage:        1 bytes
  6816 ;; Hardware stack levels used: 1
  6817 ;; Hardware stack levels required when called: 5
  6818 ;; This function calls:
  6819 ;;		_I2C_2_Master_Init
  6820 ;;		_color_writetoaddr
  6821 ;; This function is called by:
  6822 ;;		_main
  6823 ;; This function uses a non-reentrant model
  6824 ;;
  6825                           
  6826                           	psect	text30
  6827  0000'                    __ptext30:
  6828                           	callstack 0
  6829  0000'                    _color_click_init:
  6830                           	callstack 25
  6831  0000'                    
  6832                           ;MazeRobot.X/color.c: 10:     I2C_2_Master_Init();
  6833  0000' EC00' F000'        	call	_I2C_2_Master_Init	;wreg free
  6834  0004'                    
  6835                           ;MazeRobot.X/color.c: 13:   color_writetoaddr(0x00, 0x01);
  6836  0004' 0E01               	movlw	1
  6837  0006' 6E00'              	movwf	color_writetoaddr@value^0,c
  6838  0008' 0E00               	movlw	0
  6839  000A' EC00' F000'        	call	_color_writetoaddr
  6840  000E'                    
  6841                           ;MazeRobot.X/color.c: 14:     _delay((unsigned long)((3)*(64000000/4000.0)));
  6842  000E' 0E3F               	movlw	63
  6843  0010' 6E00'              	movwf	??_color_click_init^0,c
  6844  0012' 0E55               	movlw	85
  6845  0014'                    u6737:
  6846  0014' 2EE8               	decfsz	wreg,f,c
  6847  0016' D7FE               	bra	u6737
  6848  0018' 2E00'              	decfsz	??_color_click_init^0,f,c
  6849  001A' D7FC               	bra	u6737
  6850  001C' F000               	nop	
  6851  001E'                    
  6852                           ;MazeRobot.X/color.c: 17:  color_writetoaddr(0x00, 0x03);
  6853  001E' 0E03               	movlw	3
  6854  0020' 6E00'              	movwf	color_writetoaddr@value^0,c
  6855  0022' 0E00               	movlw	0
  6856  0024' EC00' F000'        	call	_color_writetoaddr
  6857  0028'                    
  6858                           ;MazeRobot.X/color.c: 20:  color_writetoaddr(0x01, 0xD5);
  6859  0028' 0ED5               	movlw	213
  6860  002A' 6E00'              	movwf	color_writetoaddr@value^0,c
  6861  002C' 0E01               	movlw	1
  6862  002E' EC00' F000'        	call	_color_writetoaddr
  6863  0032' 0012               	return		;funcret
  6864  0034'                    __end_of_color_click_init:
  6865                           	callstack 0
  6866                           
  6867 ;; *************** function _color_writetoaddr *****************
  6868 ;; Defined at:
  6869 ;;		line 24 in file "MazeRobot.X/color.c"
  6870 ;; Parameters:    Size  Location     Type
  6871 ;;  address         1    wreg     unsigned char 
  6872 ;;  value           1    6[COMRAM] unsigned char 
  6873 ;; Auto vars:     Size  Location     Type
  6874 ;;  address         1    7[COMRAM] unsigned char 
  6875 ;; Return value:  Size  Location     Type
  6876 ;;                  1    wreg      void 
  6877 ;; Registers used:
  6878 ;;		wreg, status,2, status,0, cstack
  6879 ;; Tracked objects:
  6880 ;;		On entry : 0/0
  6881 ;;		On exit  : 0/0
  6882 ;;		Unchanged: 0/0
  6883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6884 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6885 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6887 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6888 ;;Total ram usage:        2 bytes
  6889 ;; Hardware stack levels used: 1
  6890 ;; Hardware stack levels required when called: 4
  6891 ;; This function calls:
  6892 ;;		_I2C_2_Master_Start
  6893 ;;		_I2C_2_Master_Stop
  6894 ;;		_I2C_2_Master_Write
  6895 ;; This function is called by:
  6896 ;;		_color_click_init
  6897 ;; This function uses a non-reentrant model
  6898 ;;
  6899                           
  6900                           	psect	text31
  6901  0000'                    __ptext31:
  6902                           	callstack 0
  6903  0000'                    _color_writetoaddr:
  6904                           	callstack 25
  6905                           
  6906                           ;incstack = 0
  6907                           ;color_writetoaddr@address stored from wreg
  6908  0000' 6E00'              	movwf	color_writetoaddr@address^0,c
  6909  0002'                    
  6910                           ;MazeRobot.X/color.c: 25:     I2C_2_Master_Start();
  6911  0002' EC00' F000'        	call	_I2C_2_Master_Start	;wreg free
  6912                           
  6913                           ;MazeRobot.X/color.c: 26:     I2C_2_Master_Write(0x52 | 0x00);
  6914  0006' 0E52               	movlw	82
  6915  0008' EC00' F000'        	call	_I2C_2_Master_Write
  6916                           
  6917                           ;MazeRobot.X/color.c: 27:     I2C_2_Master_Write(0x80 | address);
  6918  000C' 5000'              	movf	color_writetoaddr@address^0,w,c
  6919  000E' 0980               	iorlw	128
  6920  0010' EC00' F000'        	call	_I2C_2_Master_Write
  6921                           
  6922                           ;MazeRobot.X/color.c: 28:     I2C_2_Master_Write(value);
  6923  0014' 5000'              	movf	color_writetoaddr@value^0,w,c
  6924  0016' EC00' F000'        	call	_I2C_2_Master_Write
  6925                           
  6926                           ;MazeRobot.X/color.c: 29:     I2C_2_Master_Stop();
  6927  001A' EC00' F000'        	call	_I2C_2_Master_Stop	;wreg free
  6928  001E' 0012               	return		;funcret
  6929  0020'                    __end_of_color_writetoaddr:
  6930                           	callstack 0
  6931                           
  6932 ;; *************** function _I2C_2_Master_Init *****************
  6933 ;; Defined at:
  6934 ;;		line 4 in file "MazeRobot.X/i2c.c"
  6935 ;; Parameters:    Size  Location     Type
  6936 ;;		None
  6937 ;; Auto vars:     Size  Location     Type
  6938 ;;		None
  6939 ;; Return value:  Size  Location     Type
  6940 ;;                  1    wreg      void 
  6941 ;; Registers used:
  6942 ;;		wreg, status,2
  6943 ;; Tracked objects:
  6944 ;;		On entry : 0/0
  6945 ;;		On exit  : 0/0
  6946 ;;		Unchanged: 0/0
  6947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6951 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6952 ;;Total ram usage:        0 bytes
  6953 ;; Hardware stack levels used: 1
  6954 ;; Hardware stack levels required when called: 2
  6955 ;; This function calls:
  6956 ;;		Nothing
  6957 ;; This function is called by:
  6958 ;;		_color_click_init
  6959 ;; This function uses a non-reentrant model
  6960 ;;
  6961                           
  6962                           	psect	text32
  6963  0000'                    __ptext32:
  6964                           	callstack 0
  6965  0000'                    _I2C_2_Master_Init:
  6966                           	callstack 27
  6967  0000'                    
  6968                           ;MazeRobot.X/i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  6969  0000' 010E               	movlb	14	; () banked
  6970  0002' 51D9               	movf	217,w,b	;volatile
  6971  0004' 0BF0               	andlw	-16
  6972  0006' 0908               	iorlw	8
  6973  0008' 6FD9               	movwf	217,b	;volatile
  6974  000A'                    
  6975                           ; BSR set to: 14
  6976                           ;MazeRobot.X/i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  6977  000A' 8BD9               	bsf	217,5,b	;volatile
  6978                           
  6979                           ;MazeRobot.X/i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  6980  000C' 0E9F               	movlw	159
  6981  000E' 6FD6               	movwf	214,b	;volatile
  6982  0010'                    
  6983                           ; BSR set to: 14
  6984                           ;MazeRobot.X/i2c.c: 12:   TRISDbits.TRISD5 = 1;
  6985  0010' 8A84               	bsf	132,5,c	;volatile
  6986  0012'                    
  6987                           ; BSR set to: 14
  6988                           ;MazeRobot.X/i2c.c: 13:   TRISDbits.TRISD6 = 1;
  6989  0012' 8C84               	bsf	132,6,c	;volatile
  6990  0014'                    
  6991                           ; BSR set to: 14
  6992                           ;MazeRobot.X/i2c.c: 14:   ANSELDbits.ANSELD5=0;
  6993  0014' 9BA7               	bcf	167,5,b	;volatile
  6994  0016'                    
  6995                           ; BSR set to: 14
  6996                           ;MazeRobot.X/i2c.c: 15:   ANSELDbits.ANSELD6=0;
  6997  0016' 9DA7               	bcf	167,6,b	;volatile
  6998                           
  6999                           ;MazeRobot.X/i2c.c: 16:   SSP2DATPPS=0x1D;
  7000  0018' 0E1D               	movlw	29
  7001  001A' 6F1D               	movwf	29,b	;volatile
  7002                           
  7003                           ;MazeRobot.X/i2c.c: 17:   SSP2CLKPPS=0x1E;
  7004  001C' 0E1E               	movlw	30
  7005  001E' 6F1C               	movwf	28,b	;volatile
  7006                           
  7007                           ;MazeRobot.X/i2c.c: 18:   RD5PPS=0x1C;
  7008  0020' 0E1C               	movlw	28
  7009  0022' 6F6F               	movwf	111,b	;volatile
  7010                           
  7011                           ;MazeRobot.X/i2c.c: 19:   RD6PPS=0x1B;
  7012  0024' 0E1B               	movlw	27
  7013  0026' 6F70               	movwf	112,b	;volatile
  7014  0028'                    
  7015                           ; BSR set to: 14
  7016  0028' 0012               	return		;funcret
  7017  002A'                    __end_of_I2C_2_Master_Init:
  7018                           	callstack 0
  7019                           
  7020 ;; *************** function _colorDetect *****************
  7021 ;; Defined at:
  7022 ;;		line 129 in file "MazeRobot.X/color.c"
  7023 ;; Parameters:    Size  Location     Type
  7024 ;;  clearRef        4    0[BANK0 ] void 
  7025 ;;  ambientRGBVa    2    4[BANK0 ] PTR struct RGB
  7026 ;;		 -> main@ambientRGBVal(8), 
  7027 ;;  whiteRGBVal     2    6[BANK0 ] PTR struct RGB
  7028 ;;		 -> main@whiteRGBVal(8), 
  7029 ;;  mL              2    8[BANK0 ] PTR struct DC_motor
  7030 ;;		 -> main@motorLeft(9), 
  7031 ;;  mR              2   10[BANK0 ] PTR struct DC_motor
  7032 ;;		 -> main@motorRight(9), 
  7033 ;; Auto vars:     Size  Location     Type
  7034 ;;  RGBVal          8   30[BANK0 ] struct RGB
  7035 ;;  bluePrint       4   46[BANK0 ] float 
  7036 ;;  greenPrint      4   42[BANK0 ] float 
  7037 ;;  redPrint        4   38[BANK0 ] float 
  7038 ;;  whiteB          4   20[BANK0 ] float 
  7039 ;;  whiteG          4   16[BANK0 ] float 
  7040 ;;  whiteR          4   12[BANK0 ] float 
  7041 ;;  whiteC          4    0        float 
  7042 ;;  ambientB        2   28[BANK0 ] unsigned int 
  7043 ;;  ambientG        2   26[BANK0 ] unsigned int 
  7044 ;;  ambientR        2   24[BANK0 ] unsigned int 
  7045 ;; Return value:  Size  Location     Type
  7046 ;;                  1    wreg      void 
  7047 ;; Registers used:
  7048 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, bsr, status,2, status,0, pcl, pclath, pclatu, btemp, b
      +temp+1, btemp+2, btemp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, btemp+12, btemp+13, 
      +btemp+14, btemp+15, btemp+16, btemp+17, btemp+18, btemp+19, btemp+20, btemp+21, btemp+22, btemp+23, btemp+24, btemp+25, 
      +btemp+26, btemp+27, btemp+28, btemp+29, btemp+30, btemp+31, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, cs
      +tack
  7049 ;; Tracked objects:
  7050 ;;		On entry : 0/0
  7051 ;;		On exit  : 0/0
  7052 ;;		Unchanged: 0/0
  7053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7054 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7055 ;;      Locals:         0      38       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7056 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7057 ;;      Totals:         2      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7058 ;;Total ram usage:       52 bytes
  7059 ;; Hardware stack levels used: 1
  7060 ;; Hardware stack levels required when called: 6
  7061 ;; This function calls:
  7062 ;;		___fldiv
  7063 ;;		___flge
  7064 ;;		___flmul
  7065 ;;		___flsub
  7066 ;;		___xxtofl
  7067 ;;		_fullSpeedAhead
  7068 ;;		_getColor
  7069 ;;		_right45
  7070 ;; This function is called by:
  7071 ;;		_main
  7072 ;; This function uses a non-reentrant model
  7073 ;;
  7074                           
  7075                           	psect	text33
  7076  0000'                    __ptext33:
  7077                           	callstack 0
  7078  0000'                    _colorDetect:
  7079                           	callstack 24
  7080  0000'                    
  7081                           ;MazeRobot.X/color.c: 132:         RGB RGBVal;;MazeRobot.X/color.c: 133:         getColo
      +                          r(&RGBVal);
  7082  0000' 0E00'              	movlw	low colorDetect@RGBVal
  7083  0002' 6E00'              	movwf	getColor@v^0,c
  7084  0004' 0E00'              	movlw	high colorDetect@RGBVal
  7085  0006' 6E00'              	movwf	(getColor@v+1)^0,c
  7086  0008' EC00' F000'        	call	_getColor	;wreg free
  7087  000C'                    
  7088                           ;MazeRobot.X/color.c: 135:         unsigned int ambientR = ambientRGBVal->R;
  7089  000C' C004' FFD9         	movff	colorDetect@ambientRGBVal,fsr2l
  7090  0010' C005' FFDA         	movff	colorDetect@ambientRGBVal+1,fsr2h
  7091  0014' CFDE F018'         	movff	postinc2,colorDetect@ambientR
  7092  0018' CFDD F019'         	movff	postdec2,colorDetect@ambientR+1
  7093  001C'                    
  7094                           ;MazeRobot.X/color.c: 136:         unsigned int ambientG = ambientRGBVal->G;
  7095  001C' 0100               	movlb	0	; () banked
  7096  001E' EE20 F002          	lfsr	2,2
  7097  0022' 5100'              	movf	colorDetect@ambientRGBVal& (0+255),w,b
  7098  0024' 26D9               	addwf	fsr2l,f,c
  7099  0026' 5100'              	movf	(colorDetect@ambientRGBVal+1)& (0+255),w,b
  7100  0028' 22DA               	addwfc	fsr2h,f,c
  7101  002A' CFDE F01A'         	movff	postinc2,colorDetect@ambientG
  7102  002E' CFDD F01B'         	movff	postdec2,colorDetect@ambientG+1
  7103  0032'                    
  7104                           ; BSR set to: 0
  7105                           ;MazeRobot.X/color.c: 137:         unsigned int ambientB = ambientRGBVal->B;
  7106  0032' EE20 F004          	lfsr	2,4
  7107  0036' 5100'              	movf	colorDetect@ambientRGBVal& (0+255),w,b
  7108  0038' 26D9               	addwf	fsr2l,f,c
  7109  003A' 5100'              	movf	(colorDetect@ambientRGBVal+1)& (0+255),w,b
  7110  003C' 22DA               	addwfc	fsr2h,f,c
  7111  003E' CFDE F01C'         	movff	postinc2,colorDetect@ambientB
  7112  0042' CFDD F01D'         	movff	postdec2,colorDetect@ambientB+1
  7113  0046'                    
  7114                           ; BSR set to: 0
  7115                           ;MazeRobot.X/color.c: 139:         float whiteR = whiteRGBVal->R;
  7116  0046' C006' FFD9         	movff	colorDetect@whiteRGBVal,fsr2l
  7117  004A' C007' FFDA         	movff	colorDetect@whiteRGBVal+1,fsr2h
  7118  004E' CFDE F04E'         	movff	postinc2,??_colorDetect
  7119  0052' CFDD F04F'         	movff	postdec2,??_colorDetect+1
  7120  0056' C04E' F004'        	movff	??_colorDetect,___xxtofl@val
  7121  005A' C04F' F005'        	movff	??_colorDetect+1,___xxtofl@val+1
  7122  005E' 6A00'              	clrf	(___xxtofl@val+2)^0,c
  7123  0060' 6A00'              	clrf	(___xxtofl@val+3)^0,c
  7124  0062' 0E00               	movlw	0
  7125  0064' EC00' F000'        	call	___xxtofl
  7126  0068' C004' F00C'        	movff	?___xxtofl,colorDetect@whiteR
  7127  006C' C005' F00D'        	movff	?___xxtofl+1,colorDetect@whiteR+1
  7128  0070' C006' F00E'        	movff	?___xxtofl+2,colorDetect@whiteR+2
  7129  0074' C007' F00F'        	movff	?___xxtofl+3,colorDetect@whiteR+3
  7130  0078'                    
  7131                           ;MazeRobot.X/color.c: 140:         float whiteG = whiteRGBVal->G;
  7132  0078' 0100               	movlb	0	; () banked
  7133  007A' EE20 F002          	lfsr	2,2
  7134  007E' 5100'              	movf	colorDetect@whiteRGBVal& (0+255),w,b
  7135  0080' 26D9               	addwf	fsr2l,f,c
  7136  0082' 5100'              	movf	(colorDetect@whiteRGBVal+1)& (0+255),w,b
  7137  0084' 22DA               	addwfc	fsr2h,f,c
  7138  0086' CFDE F04E'         	movff	postinc2,??_colorDetect
  7139  008A' CFDD F04F'         	movff	postdec2,??_colorDetect+1
  7140  008E' C04E' F004'        	movff	??_colorDetect,___xxtofl@val
  7141  0092' C04F' F005'        	movff	??_colorDetect+1,___xxtofl@val+1
  7142  0096' 6A00'              	clrf	(___xxtofl@val+2)^0,c
  7143  0098' 6A00'              	clrf	(___xxtofl@val+3)^0,c
  7144  009A' 0E00               	movlw	0
  7145  009C' EC00' F000'        	call	___xxtofl
  7146  00A0' C004' F010'        	movff	?___xxtofl,colorDetect@whiteG
  7147  00A4' C005' F011'        	movff	?___xxtofl+1,colorDetect@whiteG+1
  7148  00A8' C006' F012'        	movff	?___xxtofl+2,colorDetect@whiteG+2
  7149  00AC' C007' F013'        	movff	?___xxtofl+3,colorDetect@whiteG+3
  7150  00B0'                    
  7151                           ;MazeRobot.X/color.c: 141:         float whiteB = whiteRGBVal->B;
  7152  00B0' 0100               	movlb	0	; () banked
  7153  00B2' EE20 F004          	lfsr	2,4
  7154  00B6' 5100'              	movf	colorDetect@whiteRGBVal& (0+255),w,b
  7155  00B8' 26D9               	addwf	fsr2l,f,c
  7156  00BA' 5100'              	movf	(colorDetect@whiteRGBVal+1)& (0+255),w,b
  7157  00BC' 22DA               	addwfc	fsr2h,f,c
  7158  00BE' CFDE F04E'         	movff	postinc2,??_colorDetect
  7159  00C2' CFDD F04F'         	movff	postdec2,??_colorDetect+1
  7160  00C6' C04E' F004'        	movff	??_colorDetect,___xxtofl@val
  7161  00CA' C04F' F005'        	movff	??_colorDetect+1,___xxtofl@val+1
  7162  00CE' 6A00'              	clrf	(___xxtofl@val+2)^0,c
  7163  00D0' 6A00'              	clrf	(___xxtofl@val+3)^0,c
  7164  00D2' 0E00               	movlw	0
  7165  00D4' EC00' F000'        	call	___xxtofl
  7166  00D8' C004' F014'        	movff	?___xxtofl,colorDetect@whiteB
  7167  00DC' C005' F015'        	movff	?___xxtofl+1,colorDetect@whiteB+1
  7168  00E0' C006' F016'        	movff	?___xxtofl+2,colorDetect@whiteB+2
  7169  00E4' C007' F017'        	movff	?___xxtofl+3,colorDetect@whiteB+3
  7170  00E8' 0100               	movlb	0	; () banked
  7171  00EA' EE20 F006          	lfsr	2,6
  7172  00EE' 5100'              	movf	colorDetect@whiteRGBVal& (0+255),w,b
  7173  00F0' 26D9               	addwf	fsr2l,f,c
  7174  00F2' 5100'              	movf	(colorDetect@whiteRGBVal+1)& (0+255),w,b
  7175  00F4' 22DA               	addwfc	fsr2h,f,c
  7176  00F6' CFDE F04E'         	movff	postinc2,??_colorDetect
  7177  00FA' CFDD F04F'         	movff	postdec2,??_colorDetect+1
  7178  00FE' C04E' F004'        	movff	??_colorDetect,___xxtofl@val
  7179  0102' C04F' F005'        	movff	??_colorDetect+1,___xxtofl@val+1
  7180  0106' 6A00'              	clrf	(___xxtofl@val+2)^0,c
  7181  0108' 6A00'              	clrf	(___xxtofl@val+3)^0,c
  7182  010A' 0E00               	movlw	0
  7183  010C' EC00' F000'        	call	___xxtofl
  7184  0110'                    
  7185                           ;MazeRobot.X/color.c: 144:         float redPrint = (RGBVal.R-ambientR)/((whiteR-(float)
      +                          ambientR)*(clearRef));
  7186  0110' 0100               	movlb	0	; () banked
  7187  0112' 5100'              	movf	colorDetect@ambientR& (0+255),w,b
  7188  0114' 5D00'              	subwf	colorDetect@RGBVal& (0+255),w,b
  7189  0116' 6E00'              	movwf	??_colorDetect^0,c
  7190  0118' 5100'              	movf	(colorDetect@ambientR+1)& (0+255),w,b
  7191  011A' 5900'              	subwfb	(colorDetect@RGBVal+1)& (0+255),w,b
  7192  011C' 6E00'              	movwf	(??_colorDetect+1)^0,c
  7193  011E' C04E' F004'        	movff	??_colorDetect,___xxtofl@val
  7194  0122' C04F' F005'        	movff	??_colorDetect+1,___xxtofl@val+1
  7195  0126' 6A00'              	clrf	(___xxtofl@val+2)^0,c
  7196  0128' 6A00'              	clrf	(___xxtofl@val+3)^0,c
  7197  012A' 0E00               	movlw	0
  7198  012C' EC00' F000'        	call	___xxtofl
  7199  0130' C004' F035'        	movff	?___xxtofl,___fldiv@b
  7200  0134' C005' F036'        	movff	?___xxtofl+1,___fldiv@b+1
  7201  0138' C006' F037'        	movff	?___xxtofl+2,___fldiv@b+2
  7202  013C' C007' F038'        	movff	?___xxtofl+3,___fldiv@b+3
  7203  0140' C000' F018'        	movff	colorDetect@clearRef,___flmul@a
  7204  0144' C001' F019'        	movff	colorDetect@clearRef+1,___flmul@a+1
  7205  0148' C002' F01A'        	movff	colorDetect@clearRef+2,___flmul@a+2
  7206  014C' C003' F01B'        	movff	colorDetect@clearRef+3,___flmul@a+3
  7207  0150' C018' F004'        	movff	colorDetect@ambientR,___xxtofl@val
  7208  0154' C019' F005'        	movff	colorDetect@ambientR+1,___xxtofl@val+1
  7209  0158' 6A00'              	clrf	(___xxtofl@val+2)^0,c
  7210  015A' 6A00'              	clrf	(___xxtofl@val+3)^0,c
  7211  015C' 0E00               	movlw	0
  7212  015E' EC00' F000'        	call	___xxtofl
  7213  0162' C004' F031'        	movff	?___xxtofl,___flsub@a
  7214  0166' C005' F032'        	movff	?___xxtofl+1,___flsub@a+1
  7215  016A' C006' F033'        	movff	?___xxtofl+2,___flsub@a+2
  7216  016E' C007' F034'        	movff	?___xxtofl+3,___flsub@a+3
  7217  0172' C00C' F02D'        	movff	colorDetect@whiteR,___flsub@b
  7218  0176' C00D' F02E'        	movff	colorDetect@whiteR+1,___flsub@b+1
  7219  017A' C00E' F02F'        	movff	colorDetect@whiteR+2,___flsub@b+2
  7220  017E' C00F' F030'        	movff	colorDetect@whiteR+3,___flsub@b+3
  7221  0182' EC00' F000'        	call	___flsub	;wreg free
  7222  0186' C02D' F014'        	movff	?___flsub,___flmul@b
  7223  018A' C02E' F015'        	movff	?___flsub+1,___flmul@b+1
  7224  018E' C02F' F016'        	movff	?___flsub+2,___flmul@b+2
  7225  0192' C030' F017'        	movff	?___flsub+3,___flmul@b+3
  7226  0196' EC00' F000'        	call	___flmul	;wreg free
  7227  019A' C014' F039'        	movff	?___flmul,___fldiv@a
  7228  019E' C015' F03A'        	movff	?___flmul+1,___fldiv@a+1
  7229  01A2' C016' F03B'        	movff	?___flmul+2,___fldiv@a+2
  7230  01A6' C017' F03C'        	movff	?___flmul+3,___fldiv@a+3
  7231  01AA' EC00' F000'        	call	___fldiv	;wreg free
  7232  01AE' C035' F026'        	movff	?___fldiv,colorDetect@redPrint
  7233  01B2' C036' F027'        	movff	?___fldiv+1,colorDetect@redPrint+1
  7234  01B6' C037' F028'        	movff	?___fldiv+2,colorDetect@redPrint+2
  7235  01BA' C038' F029'        	movff	?___fldiv+3,colorDetect@redPrint+3
  7236  01BE'                    
  7237                           ;MazeRobot.X/color.c: 145:         float greenPrint = (RGBVal.G-ambientG)/((whiteG-(floa
      +                          t)ambientG)*(clearRef));
  7238  01BE' 0100               	movlb	0	; () banked
  7239  01C0' 5100'              	movf	colorDetect@ambientG& (0+255),w,b
  7240  01C2' 5D00'              	subwf	(colorDetect@RGBVal+2)& (0+255),w,b
  7241  01C4' 6E00'              	movwf	??_colorDetect^0,c
  7242  01C6' 5100'              	movf	(colorDetect@ambientG+1)& (0+255),w,b
  7243  01C8' 5900'              	subwfb	(colorDetect@RGBVal+3)& (0+255),w,b
  7244  01CA' 6E00'              	movwf	(??_colorDetect+1)^0,c
  7245  01CC' C04E' F004'        	movff	??_colorDetect,___xxtofl@val
  7246  01D0' C04F' F005'        	movff	??_colorDetect+1,___xxtofl@val+1
  7247  01D4' 6A00'              	clrf	(___xxtofl@val+2)^0,c
  7248  01D6' 6A00'              	clrf	(___xxtofl@val+3)^0,c
  7249  01D8' 0E00               	movlw	0
  7250  01DA' EC00' F000'        	call	___xxtofl
  7251  01DE' C004' F035'        	movff	?___xxtofl,___fldiv@b
  7252  01E2' C005' F036'        	movff	?___xxtofl+1,___fldiv@b+1
  7253  01E6' C006' F037'        	movff	?___xxtofl+2,___fldiv@b+2
  7254  01EA' C007' F038'        	movff	?___xxtofl+3,___fldiv@b+3
  7255  01EE' C000' F018'        	movff	colorDetect@clearRef,___flmul@a
  7256  01F2' C001' F019'        	movff	colorDetect@clearRef+1,___flmul@a+1
  7257  01F6' C002' F01A'        	movff	colorDetect@clearRef+2,___flmul@a+2
  7258  01FA' C003' F01B'        	movff	colorDetect@clearRef+3,___flmul@a+3
  7259  01FE' C01A' F004'        	movff	colorDetect@ambientG,___xxtofl@val
  7260  0202' C01B' F005'        	movff	colorDetect@ambientG+1,___xxtofl@val+1
  7261  0206' 6A00'              	clrf	(___xxtofl@val+2)^0,c
  7262  0208' 6A00'              	clrf	(___xxtofl@val+3)^0,c
  7263  020A' 0E00               	movlw	0
  7264  020C' EC00' F000'        	call	___xxtofl
  7265  0210' C004' F031'        	movff	?___xxtofl,___flsub@a
  7266  0214' C005' F032'        	movff	?___xxtofl+1,___flsub@a+1
  7267  0218' C006' F033'        	movff	?___xxtofl+2,___flsub@a+2
  7268  021C' C007' F034'        	movff	?___xxtofl+3,___flsub@a+3
  7269  0220' C010' F02D'        	movff	colorDetect@whiteG,___flsub@b
  7270  0224' C011' F02E'        	movff	colorDetect@whiteG+1,___flsub@b+1
  7271  0228' C012' F02F'        	movff	colorDetect@whiteG+2,___flsub@b+2
  7272  022C' C013' F030'        	movff	colorDetect@whiteG+3,___flsub@b+3
  7273  0230' EC00' F000'        	call	___flsub	;wreg free
  7274  0234' C02D' F014'        	movff	?___flsub,___flmul@b
  7275  0238' C02E' F015'        	movff	?___flsub+1,___flmul@b+1
  7276  023C' C02F' F016'        	movff	?___flsub+2,___flmul@b+2
  7277  0240' C030' F017'        	movff	?___flsub+3,___flmul@b+3
  7278  0244' EC00' F000'        	call	___flmul	;wreg free
  7279  0248' C014' F039'        	movff	?___flmul,___fldiv@a
  7280  024C' C015' F03A'        	movff	?___flmul+1,___fldiv@a+1
  7281  0250' C016' F03B'        	movff	?___flmul+2,___fldiv@a+2
  7282  0254' C017' F03C'        	movff	?___flmul+3,___fldiv@a+3
  7283  0258' EC00' F000'        	call	___fldiv	;wreg free
  7284  025C' C035' F02A'        	movff	?___fldiv,colorDetect@greenPrint
  7285  0260' C036' F02B'        	movff	?___fldiv+1,colorDetect@greenPrint+1
  7286  0264' C037' F02C'        	movff	?___fldiv+2,colorDetect@greenPrint+2
  7287  0268' C038' F02D'        	movff	?___fldiv+3,colorDetect@greenPrint+3
  7288  026C'                    
  7289                           ;MazeRobot.X/color.c: 146:         float bluePrint = (RGBVal.B-ambientB)/((whiteB-(float
      +                          )ambientB)*(clearRef));
  7290  026C' 0100               	movlb	0	; () banked
  7291  026E' 5100'              	movf	colorDetect@ambientB& (0+255),w,b
  7292  0270' 5D00'              	subwf	(colorDetect@RGBVal+4)& (0+255),w,b
  7293  0272' 6E00'              	movwf	??_colorDetect^0,c
  7294  0274' 5100'              	movf	(colorDetect@ambientB+1)& (0+255),w,b
  7295  0276' 5900'              	subwfb	(colorDetect@RGBVal+5)& (0+255),w,b
  7296  0278' 6E00'              	movwf	(??_colorDetect+1)^0,c
  7297  027A' C04E' F004'        	movff	??_colorDetect,___xxtofl@val
  7298  027E' C04F' F005'        	movff	??_colorDetect+1,___xxtofl@val+1
  7299  0282' 6A00'              	clrf	(___xxtofl@val+2)^0,c
  7300  0284' 6A00'              	clrf	(___xxtofl@val+3)^0,c
  7301  0286' 0E00               	movlw	0
  7302  0288' EC00' F000'        	call	___xxtofl
  7303  028C' C004' F035'        	movff	?___xxtofl,___fldiv@b
  7304  0290' C005' F036'        	movff	?___xxtofl+1,___fldiv@b+1
  7305  0294' C006' F037'        	movff	?___xxtofl+2,___fldiv@b+2
  7306  0298' C007' F038'        	movff	?___xxtofl+3,___fldiv@b+3
  7307  029C' C000' F018'        	movff	colorDetect@clearRef,___flmul@a
  7308  02A0' C001' F019'        	movff	colorDetect@clearRef+1,___flmul@a+1
  7309  02A4' C002' F01A'        	movff	colorDetect@clearRef+2,___flmul@a+2
  7310  02A8' C003' F01B'        	movff	colorDetect@clearRef+3,___flmul@a+3
  7311  02AC' C01C' F004'        	movff	colorDetect@ambientB,___xxtofl@val
  7312  02B0' C01D' F005'        	movff	colorDetect@ambientB+1,___xxtofl@val+1
  7313  02B4' 6A00'              	clrf	(___xxtofl@val+2)^0,c
  7314  02B6' 6A00'              	clrf	(___xxtofl@val+3)^0,c
  7315  02B8' 0E00               	movlw	0
  7316  02BA' EC00' F000'        	call	___xxtofl
  7317  02BE' C004' F031'        	movff	?___xxtofl,___flsub@a
  7318  02C2' C005' F032'        	movff	?___xxtofl+1,___flsub@a+1
  7319  02C6' C006' F033'        	movff	?___xxtofl+2,___flsub@a+2
  7320  02CA' C007' F034'        	movff	?___xxtofl+3,___flsub@a+3
  7321  02CE' C014' F02D'        	movff	colorDetect@whiteB,___flsub@b
  7322  02D2' C015' F02E'        	movff	colorDetect@whiteB+1,___flsub@b+1
  7323  02D6' C016' F02F'        	movff	colorDetect@whiteB+2,___flsub@b+2
  7324  02DA' C017' F030'        	movff	colorDetect@whiteB+3,___flsub@b+3
  7325  02DE' EC00' F000'        	call	___flsub	;wreg free
  7326  02E2' C02D' F014'        	movff	?___flsub,___flmul@b
  7327  02E6' C02E' F015'        	movff	?___flsub+1,___flmul@b+1
  7328  02EA' C02F' F016'        	movff	?___flsub+2,___flmul@b+2
  7329  02EE' C030' F017'        	movff	?___flsub+3,___flmul@b+3
  7330  02F2' EC00' F000'        	call	___flmul	;wreg free
  7331  02F6' C014' F039'        	movff	?___flmul,___fldiv@a
  7332  02FA' C015' F03A'        	movff	?___flmul+1,___fldiv@a+1
  7333  02FE' C016' F03B'        	movff	?___flmul+2,___fldiv@a+2
  7334  0302' C017' F03C'        	movff	?___flmul+3,___fldiv@a+3
  7335  0306' EC00' F000'        	call	___fldiv	;wreg free
  7336  030A' C035' F02E'        	movff	?___fldiv,colorDetect@bluePrint
  7337  030E' C036' F02F'        	movff	?___fldiv+1,colorDetect@bluePrint+1
  7338  0312' C037' F030'        	movff	?___fldiv+2,colorDetect@bluePrint+2
  7339  0316' C038' F031'        	movff	?___fldiv+3,colorDetect@bluePrint+3
  7340  031A'                    
  7341                           ;MazeRobot.X/color.c: 148:         if ((redPrint < 0) | (redPrint > 2)) { redPrint = 0.0
      +                          ;}
  7342  031A' 0100               	movlb	0	; () banked
  7343  031C' BF00'              	btfsc	(colorDetect@redPrint+3)& (0+255),7,b
  7344  031E' EF00' F000'        	goto	u6291
  7345  0322' EF00' F000'        	goto	u6290
  7346  0326'                    u6291:
  7347  0326' EF00' F000'        	goto	l5703
  7348  032A'                    u6290:
  7349  032A'                    
  7350                           ; BSR set to: 0
  7351  032A' 0E00               	movlw	0
  7352  032C' 6E00'              	movwf	___flge@ff1^0,c
  7353  032E' 0E00               	movlw	0
  7354  0330' 6E00'              	movwf	(___flge@ff1+1)^0,c
  7355  0332' 0E00               	movlw	0
  7356  0334' 6E00'              	movwf	(___flge@ff1+2)^0,c
  7357  0336' 0E40               	movlw	64
  7358  0338' 6E00'              	movwf	(___flge@ff1+3)^0,c
  7359  033A' C026' F039'        	movff	colorDetect@redPrint,___flge@ff2
  7360  033E' C027' F03A'        	movff	colorDetect@redPrint+1,___flge@ff2+1
  7361  0342' C028' F03B'        	movff	colorDetect@redPrint+2,___flge@ff2+2
  7362  0346' C029' F03C'        	movff	colorDetect@redPrint+3,___flge@ff2+3
  7363  034A' EC00' F000'        	call	___flge	;wreg free
  7364  034E' B0D8               	btfsc	status,0,c
  7365  0350' EF00' F000'        	goto	u6301
  7366  0354' EF00' F000'        	goto	u6300
  7367  0358'                    u6301:
  7368  0358' EF00' F000'        	goto	l5705
  7369  035C'                    u6300:
  7370  035C'                    l5703:
  7371  035C' 0E00               	movlw	0
  7372  035E' 0100               	movlb	0	; () banked
  7373  0360' 6F00'              	movwf	colorDetect@redPrint& (0+255),b
  7374  0362' 0E00               	movlw	0
  7375  0364' 6F00'              	movwf	(colorDetect@redPrint+1)& (0+255),b
  7376  0366' 0E00               	movlw	0
  7377  0368' 6F00'              	movwf	(colorDetect@redPrint+2)& (0+255),b
  7378  036A' 0E00               	movlw	0
  7379  036C' 6F00'              	movwf	(colorDetect@redPrint+3)& (0+255),b
  7380  036E'                    l5705:
  7381                           
  7382                           ;MazeRobot.X/color.c: 149:         if ((greenPrint < 0) | (greenPrint > 2)) {greenPrint 
      +                          = 0.0;}
  7383  036E' 0100               	movlb	0	; () banked
  7384  0370' BF00'              	btfsc	(colorDetect@greenPrint+3)& (0+255),7,b
  7385  0372' EF00' F000'        	goto	u6311
  7386  0376' EF00' F000'        	goto	u6310
  7387  037A'                    u6311:
  7388  037A' EF00' F000'        	goto	l5709
  7389  037E'                    u6310:
  7390  037E'                    
  7391                           ; BSR set to: 0
  7392  037E' 0E00               	movlw	0
  7393  0380' 6E00'              	movwf	___flge@ff1^0,c
  7394  0382' 0E00               	movlw	0
  7395  0384' 6E00'              	movwf	(___flge@ff1+1)^0,c
  7396  0386' 0E00               	movlw	0
  7397  0388' 6E00'              	movwf	(___flge@ff1+2)^0,c
  7398  038A' 0E40               	movlw	64
  7399  038C' 6E00'              	movwf	(___flge@ff1+3)^0,c
  7400  038E' C02A' F039'        	movff	colorDetect@greenPrint,___flge@ff2
  7401  0392' C02B' F03A'        	movff	colorDetect@greenPrint+1,___flge@ff2+1
  7402  0396' C02C' F03B'        	movff	colorDetect@greenPrint+2,___flge@ff2+2
  7403  039A' C02D' F03C'        	movff	colorDetect@greenPrint+3,___flge@ff2+3
  7404  039E' EC00' F000'        	call	___flge	;wreg free
  7405  03A2' B0D8               	btfsc	status,0,c
  7406  03A4' EF00' F000'        	goto	u6321
  7407  03A8' EF00' F000'        	goto	u6320
  7408  03AC'                    u6321:
  7409  03AC' EF00' F000'        	goto	l5711
  7410  03B0'                    u6320:
  7411  03B0'                    l5709:
  7412  03B0' 0E00               	movlw	0
  7413  03B2' 0100               	movlb	0	; () banked
  7414  03B4' 6F00'              	movwf	colorDetect@greenPrint& (0+255),b
  7415  03B6' 0E00               	movlw	0
  7416  03B8' 6F00'              	movwf	(colorDetect@greenPrint+1)& (0+255),b
  7417  03BA' 0E00               	movlw	0
  7418  03BC' 6F00'              	movwf	(colorDetect@greenPrint+2)& (0+255),b
  7419  03BE' 0E00               	movlw	0
  7420  03C0' 6F00'              	movwf	(colorDetect@greenPrint+3)& (0+255),b
  7421  03C2'                    l5711:
  7422                           
  7423                           ;MazeRobot.X/color.c: 150:         if ((bluePrint < 0) | (bluePrint > 2)){ bluePrint = 0
      +                          .0;}
  7424  03C2' 0100               	movlb	0	; () banked
  7425  03C4' BF00'              	btfsc	(colorDetect@bluePrint+3)& (0+255),7,b
  7426  03C6' EF00' F000'        	goto	u6331
  7427  03CA' EF00' F000'        	goto	u6330
  7428  03CE'                    u6331:
  7429  03CE' EF00' F000'        	goto	l5715
  7430  03D2'                    u6330:
  7431  03D2'                    
  7432                           ; BSR set to: 0
  7433  03D2' 0E00               	movlw	0
  7434  03D4' 6E00'              	movwf	___flge@ff1^0,c
  7435  03D6' 0E00               	movlw	0
  7436  03D8' 6E00'              	movwf	(___flge@ff1+1)^0,c
  7437  03DA' 0E00               	movlw	0
  7438  03DC' 6E00'              	movwf	(___flge@ff1+2)^0,c
  7439  03DE' 0E40               	movlw	64
  7440  03E0' 6E00'              	movwf	(___flge@ff1+3)^0,c
  7441  03E2' C02E' F039'        	movff	colorDetect@bluePrint,___flge@ff2
  7442  03E6' C02F' F03A'        	movff	colorDetect@bluePrint+1,___flge@ff2+1
  7443  03EA' C030' F03B'        	movff	colorDetect@bluePrint+2,___flge@ff2+2
  7444  03EE' C031' F03C'        	movff	colorDetect@bluePrint+3,___flge@ff2+3
  7445  03F2' EC00' F000'        	call	___flge	;wreg free
  7446  03F6' B0D8               	btfsc	status,0,c
  7447  03F8' EF00' F000'        	goto	u6341
  7448  03FC' EF00' F000'        	goto	u6340
  7449  0400'                    u6341:
  7450  0400' EF00' F000'        	goto	l5717
  7451  0404'                    u6340:
  7452  0404'                    l5715:
  7453  0404' 0E00               	movlw	0
  7454  0406' 0100               	movlb	0	; () banked
  7455  0408' 6F00'              	movwf	colorDetect@bluePrint& (0+255),b
  7456  040A' 0E00               	movlw	0
  7457  040C' 6F00'              	movwf	(colorDetect@bluePrint+1)& (0+255),b
  7458  040E' 0E00               	movlw	0
  7459  0410' 6F00'              	movwf	(colorDetect@bluePrint+2)& (0+255),b
  7460  0412' 0E00               	movlw	0
  7461  0414' 6F00'              	movwf	(colorDetect@bluePrint+3)& (0+255),b
  7462  0416'                    l5717:
  7463                           
  7464                           ;MazeRobot.X/color.c: 153:         if ((redPrint > 0.9) & (greenPrint > 0.9) & (bluePrin
      +                          t > 0.9)){
  7465  0416' 0E66               	movlw	102
  7466  0418' 6E00'              	movwf	___flge@ff1^0,c
  7467  041A' 0E66               	movlw	102
  7468  041C' 6E00'              	movwf	(___flge@ff1+1)^0,c
  7469  041E' 0E66               	movlw	102
  7470  0420' 6E00'              	movwf	(___flge@ff1+2)^0,c
  7471  0422' 0E3F               	movlw	63
  7472  0424' 6E00'              	movwf	(___flge@ff1+3)^0,c
  7473  0426' C026' F039'        	movff	colorDetect@redPrint,___flge@ff2
  7474  042A' C027' F03A'        	movff	colorDetect@redPrint+1,___flge@ff2+1
  7475  042E' C028' F03B'        	movff	colorDetect@redPrint+2,___flge@ff2+2
  7476  0432' C029' F03C'        	movff	colorDetect@redPrint+3,___flge@ff2+3
  7477  0436' EC00' F000'        	call	___flge	;wreg free
  7478  043A' B0D8               	btfsc	status,0,c
  7479  043C' EF00' F000'        	goto	u6351
  7480  0440' EF00' F000'        	goto	u6350
  7481  0444'                    u6351:
  7482  0444' EF00' F000'        	goto	l5729
  7483  0448'                    u6350:
  7484  0448' 0E66               	movlw	102
  7485  044A' 6E00'              	movwf	___flge@ff1^0,c
  7486  044C' 0E66               	movlw	102
  7487  044E' 6E00'              	movwf	(___flge@ff1+1)^0,c
  7488  0450' 0E66               	movlw	102
  7489  0452' 6E00'              	movwf	(___flge@ff1+2)^0,c
  7490  0454' 0E3F               	movlw	63
  7491  0456' 6E00'              	movwf	(___flge@ff1+3)^0,c
  7492  0458' C02A' F039'        	movff	colorDetect@greenPrint,___flge@ff2
  7493  045C' C02B' F03A'        	movff	colorDetect@greenPrint+1,___flge@ff2+1
  7494  0460' C02C' F03B'        	movff	colorDetect@greenPrint+2,___flge@ff2+2
  7495  0464' C02D' F03C'        	movff	colorDetect@greenPrint+3,___flge@ff2+3
  7496  0468' EC00' F000'        	call	___flge	;wreg free
  7497  046C' B0D8               	btfsc	status,0,c
  7498  046E' EF00' F000'        	goto	u6361
  7499  0472' EF00' F000'        	goto	u6360
  7500  0476'                    u6361:
  7501  0476' EF00' F000'        	goto	l5729
  7502  047A'                    u6360:
  7503  047A' 0E66               	movlw	102
  7504  047C' 6E00'              	movwf	___flge@ff1^0,c
  7505  047E' 0E66               	movlw	102
  7506  0480' 6E00'              	movwf	(___flge@ff1+1)^0,c
  7507  0482' 0E66               	movlw	102
  7508  0484' 6E00'              	movwf	(___flge@ff1+2)^0,c
  7509  0486' 0E3F               	movlw	63
  7510  0488' 6E00'              	movwf	(___flge@ff1+3)^0,c
  7511  048A' C02E' F039'        	movff	colorDetect@bluePrint,___flge@ff2
  7512  048E' C02F' F03A'        	movff	colorDetect@bluePrint+1,___flge@ff2+1
  7513  0492' C030' F03B'        	movff	colorDetect@bluePrint+2,___flge@ff2+2
  7514  0496' C031' F03C'        	movff	colorDetect@bluePrint+3,___flge@ff2+3
  7515  049A' EC00' F000'        	call	___flge	;wreg free
  7516  049E' B0D8               	btfsc	status,0,c
  7517  04A0' EF00' F000'        	goto	u6371
  7518  04A4' EF00' F000'        	goto	u6370
  7519  04A8'                    u6371:
  7520  04A8' EF00' F000'        	goto	l5729
  7521  04AC'                    u6370:
  7522  04AC'                    
  7523                           ;MazeRobot.X/color.c: 154:         _delay((unsigned long)((2)*(64000000/4000.0)));
  7524  04AC' 0E2A               	movlw	42
  7525  04AE' 6E00'              	movwf	??_colorDetect^0,c
  7526  04B0' 0E8E               	movlw	142
  7527  04B2'                    u6747:
  7528  04B2' 2EE8               	decfsz	wreg,f,c
  7529  04B4' D7FE               	bra	u6747
  7530  04B6' 2E00'              	decfsz	??_colorDetect^0,f,c
  7531  04B8' D7FC               	bra	u6747
  7532  04BA'                    
  7533                           ;MazeRobot.X/color.c: 155:         fullSpeedAhead(mL,mR);
  7534  04BA' C008' F000'        	movff	colorDetect@mL,?_fullSpeedAhead
  7535  04BE' C009' F001'        	movff	colorDetect@mL+1,?_fullSpeedAhead+1
  7536  04C2' C00A' F002'        	movff	colorDetect@mR,?_fullSpeedAhead+2
  7537  04C6' C00B' F003'        	movff	colorDetect@mR+1,?_fullSpeedAhead+3
  7538  04CA' EC00' F000'        	call	_fullSpeedAhead	;wreg free
  7539  04CE'                    
  7540                           ;MazeRobot.X/color.c: 156:         _delay((unsigned long)((2)*(64000000/4000.0)));
  7541  04CE' 0E2A               	movlw	42
  7542  04D0' 6E00'              	movwf	??_colorDetect^0,c
  7543  04D2' 0E8E               	movlw	142
  7544  04D4'                    u6757:
  7545  04D4' 2EE8               	decfsz	wreg,f,c
  7546  04D6' D7FE               	bra	u6757
  7547  04D8' 2E00'              	decfsz	??_colorDetect^0,f,c
  7548  04DA' D7FC               	bra	u6757
  7549  04DC'                    l5729:
  7550                           
  7551                           ;MazeRobot.X/color.c: 160:         if ((redPrint > 1.5) & (redPrint - greenPrint > 0.8) 
      +                          & (redPrint -bluePrint > 0.8)){
  7552  04DC' 0E00               	movlw	0
  7553  04DE' 6E00'              	movwf	___flge@ff1^0,c
  7554  04E0' 0E00               	movlw	0
  7555  04E2' 6E00'              	movwf	(___flge@ff1+1)^0,c
  7556  04E4' 0EC0               	movlw	192
  7557  04E6' 6E00'              	movwf	(___flge@ff1+2)^0,c
  7558  04E8' 0E3F               	movlw	63
  7559  04EA' 6E00'              	movwf	(___flge@ff1+3)^0,c
  7560  04EC' C026' F039'        	movff	colorDetect@redPrint,___flge@ff2
  7561  04F0' C027' F03A'        	movff	colorDetect@redPrint+1,___flge@ff2+1
  7562  04F4' C028' F03B'        	movff	colorDetect@redPrint+2,___flge@ff2+2
  7563  04F8' C029' F03C'        	movff	colorDetect@redPrint+3,___flge@ff2+3
  7564  04FC' EC00' F000'        	call	___flge	;wreg free
  7565  0500' B0D8               	btfsc	status,0,c
  7566  0502' EF00' F000'        	goto	u6381
  7567  0506' EF00' F000'        	goto	u6380
  7568  050A'                    u6381:
  7569  050A' EF00' F000'        	goto	l5739
  7570  050E'                    u6380:
  7571  050E' 0ECD               	movlw	205
  7572  0510' 6E00'              	movwf	___flge@ff1^0,c
  7573  0512' 0ECC               	movlw	204
  7574  0514' 6E00'              	movwf	(___flge@ff1+1)^0,c
  7575  0516' 0E4C               	movlw	76
  7576  0518' 6E00'              	movwf	(___flge@ff1+2)^0,c
  7577  051A' 0E3F               	movlw	63
  7578  051C' 6E00'              	movwf	(___flge@ff1+3)^0,c
  7579  051E' C02A' F031'        	movff	colorDetect@greenPrint,___flsub@a
  7580  0522' C02B' F032'        	movff	colorDetect@greenPrint+1,___flsub@a+1
  7581  0526' C02C' F033'        	movff	colorDetect@greenPrint+2,___flsub@a+2
  7582  052A' C02D' F034'        	movff	colorDetect@greenPrint+3,___flsub@a+3
  7583  052E' C026' F02D'        	movff	colorDetect@redPrint,___flsub@b
  7584  0532' C027' F02E'        	movff	colorDetect@redPrint+1,___flsub@b+1
  7585  0536' C028' F02F'        	movff	colorDetect@redPrint+2,___flsub@b+2
  7586  053A' C029' F030'        	movff	colorDetect@redPrint+3,___flsub@b+3
  7587  053E' EC00' F000'        	call	___flsub	;wreg free
  7588  0542' C02D' F039'        	movff	?___flsub,___flge@ff2
  7589  0546' C02E' F03A'        	movff	?___flsub+1,___flge@ff2+1
  7590  054A' C02F' F03B'        	movff	?___flsub+2,___flge@ff2+2
  7591  054E' C030' F03C'        	movff	?___flsub+3,___flge@ff2+3
  7592  0552' EC00' F000'        	call	___flge	;wreg free
  7593  0556' B0D8               	btfsc	status,0,c
  7594  0558' EF00' F000'        	goto	u6391
  7595  055C' EF00' F000'        	goto	u6390
  7596  0560'                    u6391:
  7597  0560' EF00' F000'        	goto	l5739
  7598  0564'                    u6390:
  7599  0564' 0ECD               	movlw	205
  7600  0566' 6E00'              	movwf	___flge@ff1^0,c
  7601  0568' 0ECC               	movlw	204
  7602  056A' 6E00'              	movwf	(___flge@ff1+1)^0,c
  7603  056C' 0E4C               	movlw	76
  7604  056E' 6E00'              	movwf	(___flge@ff1+2)^0,c
  7605  0570' 0E3F               	movlw	63
  7606  0572' 6E00'              	movwf	(___flge@ff1+3)^0,c
  7607  0574' C02E' F031'        	movff	colorDetect@bluePrint,___flsub@a
  7608  0578' C02F' F032'        	movff	colorDetect@bluePrint+1,___flsub@a+1
  7609  057C' C030' F033'        	movff	colorDetect@bluePrint+2,___flsub@a+2
  7610  0580' C031' F034'        	movff	colorDetect@bluePrint+3,___flsub@a+3
  7611  0584' C026' F02D'        	movff	colorDetect@redPrint,___flsub@b
  7612  0588' C027' F02E'        	movff	colorDetect@redPrint+1,___flsub@b+1
  7613  058C' C028' F02F'        	movff	colorDetect@redPrint+2,___flsub@b+2
  7614  0590' C029' F030'        	movff	colorDetect@redPrint+3,___flsub@b+3
  7615  0594' EC00' F000'        	call	___flsub	;wreg free
  7616  0598' C02D' F039'        	movff	?___flsub,___flge@ff2
  7617  059C' C02E' F03A'        	movff	?___flsub+1,___flge@ff2+1
  7618  05A0' C02F' F03B'        	movff	?___flsub+2,___flge@ff2+2
  7619  05A4' C030' F03C'        	movff	?___flsub+3,___flge@ff2+3
  7620  05A8' EC00' F000'        	call	___flge	;wreg free
  7621  05AC' B0D8               	btfsc	status,0,c
  7622  05AE' EF00' F000'        	goto	u6401
  7623  05B2' EF00' F000'        	goto	u6400
  7624  05B6'                    u6401:
  7625  05B6' EF00' F000'        	goto	l5739
  7626  05BA'                    u6400:
  7627  05BA'                    
  7628                           ;MazeRobot.X/color.c: 161:             right45(mL,mR);
  7629  05BA' C008' F000'        	movff	colorDetect@mL,?_right45
  7630  05BE' C009' F001'        	movff	colorDetect@mL+1,?_right45+1
  7631  05C2' C00A' F002'        	movff	colorDetect@mR,?_right45+2
  7632  05C6' C00B' F003'        	movff	colorDetect@mR+1,?_right45+3
  7633  05CA' EC00' F000'        	call	_right45	;wreg free
  7634  05CE'                    
  7635                           ;MazeRobot.X/color.c: 162:             _delay((unsigned long)((2)*(64000000/4000.0)));
  7636  05CE' 0E2A               	movlw	42
  7637  05D0' 6E00'              	movwf	??_colorDetect^0,c
  7638  05D2' 0E8E               	movlw	142
  7639  05D4'                    u6767:
  7640  05D4' 2EE8               	decfsz	wreg,f,c
  7641  05D6' D7FE               	bra	u6767
  7642  05D8' 2E00'              	decfsz	??_colorDetect^0,f,c
  7643  05DA' D7FC               	bra	u6767
  7644  05DC'                    l5739:
  7645                           
  7646                           ;MazeRobot.X/color.c: 166:         if ((redPrint > 1.3) & (greenPrint > 0.5) & (bluePrin
      +                          t > 0.5)){
  7647  05DC' 0E66               	movlw	102
  7648  05DE' 6E00'              	movwf	___flge@ff1^0,c
  7649  05E0' 0E66               	movlw	102
  7650  05E2' 6E00'              	movwf	(___flge@ff1+1)^0,c
  7651  05E4' 0EA6               	movlw	166
  7652  05E6' 6E00'              	movwf	(___flge@ff1+2)^0,c
  7653  05E8' 0E3F               	movlw	63
  7654  05EA' 6E00'              	movwf	(___flge@ff1+3)^0,c
  7655  05EC' C026' F039'        	movff	colorDetect@redPrint,___flge@ff2
  7656  05F0' C027' F03A'        	movff	colorDetect@redPrint+1,___flge@ff2+1
  7657  05F4' C028' F03B'        	movff	colorDetect@redPrint+2,___flge@ff2+2
  7658  05F8' C029' F03C'        	movff	colorDetect@redPrint+3,___flge@ff2+3
  7659  05FC' EC00' F000'        	call	___flge	;wreg free
  7660  0600' B0D8               	btfsc	status,0,c
  7661  0602' EF00' F000'        	goto	u6411
  7662  0606' EF00' F000'        	goto	u6410
  7663  060A'                    u6411:
  7664  060A' EF00' F000'        	goto	l5747
  7665  060E'                    u6410:
  7666  060E' 0E00               	movlw	0
  7667  0610' 6E00'              	movwf	___flge@ff1^0,c
  7668  0612' 0E00               	movlw	0
  7669  0614' 6E00'              	movwf	(___flge@ff1+1)^0,c
  7670  0616' 0E00               	movlw	0
  7671  0618' 6E00'              	movwf	(___flge@ff1+2)^0,c
  7672  061A' 0E3F               	movlw	63
  7673  061C' 6E00'              	movwf	(___flge@ff1+3)^0,c
  7674  061E' C02A' F039'        	movff	colorDetect@greenPrint,___flge@ff2
  7675  0622' C02B' F03A'        	movff	colorDetect@greenPrint+1,___flge@ff2+1
  7676  0626' C02C' F03B'        	movff	colorDetect@greenPrint+2,___flge@ff2+2
  7677  062A' C02D' F03C'        	movff	colorDetect@greenPrint+3,___flge@ff2+3
  7678  062E' EC00' F000'        	call	___flge	;wreg free
  7679  0632' B0D8               	btfsc	status,0,c
  7680  0634' EF00' F000'        	goto	u6421
  7681  0638' EF00' F000'        	goto	u6420
  7682  063C'                    u6421:
  7683  063C' EF00' F000'        	goto	l5747
  7684  0640'                    u6420:
  7685  0640' 0E00               	movlw	0
  7686  0642' 6E00'              	movwf	___flge@ff1^0,c
  7687  0644' 0E00               	movlw	0
  7688  0646' 6E00'              	movwf	(___flge@ff1+1)^0,c
  7689  0648' 0E00               	movlw	0
  7690  064A' 6E00'              	movwf	(___flge@ff1+2)^0,c
  7691  064C' 0E3F               	movlw	63
  7692  064E' 6E00'              	movwf	(___flge@ff1+3)^0,c
  7693  0650' C02E' F039'        	movff	colorDetect@bluePrint,___flge@ff2
  7694  0654' C02F' F03A'        	movff	colorDetect@bluePrint+1,___flge@ff2+1
  7695  0658' C030' F03B'        	movff	colorDetect@bluePrint+2,___flge@ff2+2
  7696  065C' C031' F03C'        	movff	colorDetect@bluePrint+3,___flge@ff2+3
  7697  0660' EC00' F000'        	call	___flge	;wreg free
  7698  0664' B0D8               	btfsc	status,0,c
  7699  0666' EF00' F000'        	goto	u6431
  7700  066A' EF00' F000'        	goto	u6430
  7701  066E'                    u6431:
  7702  066E' EF00' F000'        	goto	l5747
  7703  0672'                    u6430:
  7704  0672'                    
  7705                           ;MazeRobot.X/color.c: 167:         _delay((unsigned long)((2)*(64000000/4000.0)));
  7706  0672' 0E2A               	movlw	42
  7707  0674' 6E00'              	movwf	??_colorDetect^0,c
  7708  0676' 0E8E               	movlw	142
  7709  0678'                    u6777:
  7710  0678' 2EE8               	decfsz	wreg,f,c
  7711  067A' D7FE               	bra	u6777
  7712  067C' 2E00'              	decfsz	??_colorDetect^0,f,c
  7713  067E' D7FC               	bra	u6777
  7714  0680'                    l5747:
  7715                           
  7716                           ;MazeRobot.X/color.c: 171:         if ((redPrint > 1.0) & (greenPrint > 0.8) & (bluePrin
      +                          t < 0.8)){
  7717  0680' 0E00               	movlw	0
  7718  0682' 6E00'              	movwf	___flge@ff1^0,c
  7719  0684' 0E00               	movlw	0
  7720  0686' 6E00'              	movwf	(___flge@ff1+1)^0,c
  7721  0688' 0E80               	movlw	128
  7722  068A' 6E00'              	movwf	(___flge@ff1+2)^0,c
  7723  068C' 0E3F               	movlw	63
  7724  068E' 6E00'              	movwf	(___flge@ff1+3)^0,c
  7725  0690' C026' F039'        	movff	colorDetect@redPrint,___flge@ff2
  7726  0694' C027' F03A'        	movff	colorDetect@redPrint+1,___flge@ff2+1
  7727  0698' C028' F03B'        	movff	colorDetect@redPrint+2,___flge@ff2+2
  7728  069C' C029' F03C'        	movff	colorDetect@redPrint+3,___flge@ff2+3
  7729  06A0' EC00' F000'        	call	___flge	;wreg free
  7730  06A4' B0D8               	btfsc	status,0,c
  7731  06A6' EF00' F000'        	goto	u6441
  7732  06AA' EF00' F000'        	goto	u6440
  7733  06AE'                    u6441:
  7734  06AE' EF00' F000'        	goto	l5755
  7735  06B2'                    u6440:
  7736  06B2' 0ECD               	movlw	205
  7737  06B4' 6E00'              	movwf	___flge@ff1^0,c
  7738  06B6' 0ECC               	movlw	204
  7739  06B8' 6E00'              	movwf	(___flge@ff1+1)^0,c
  7740  06BA' 0E4C               	movlw	76
  7741  06BC' 6E00'              	movwf	(___flge@ff1+2)^0,c
  7742  06BE' 0E3F               	movlw	63
  7743  06C0' 6E00'              	movwf	(___flge@ff1+3)^0,c
  7744  06C2' C02A' F039'        	movff	colorDetect@greenPrint,___flge@ff2
  7745  06C6' C02B' F03A'        	movff	colorDetect@greenPrint+1,___flge@ff2+1
  7746  06CA' C02C' F03B'        	movff	colorDetect@greenPrint+2,___flge@ff2+2
  7747  06CE' C02D' F03C'        	movff	colorDetect@greenPrint+3,___flge@ff2+3
  7748  06D2' EC00' F000'        	call	___flge	;wreg free
  7749  06D6' B0D8               	btfsc	status,0,c
  7750  06D8' EF00' F000'        	goto	u6451
  7751  06DC' EF00' F000'        	goto	u6450
  7752  06E0'                    u6451:
  7753  06E0' EF00' F000'        	goto	l5755
  7754  06E4'                    u6450:
  7755  06E4' C02E' F035'        	movff	colorDetect@bluePrint,___flge@ff1
  7756  06E8' C02F' F036'        	movff	colorDetect@bluePrint+1,___flge@ff1+1
  7757  06EC' C030' F037'        	movff	colorDetect@bluePrint+2,___flge@ff1+2
  7758  06F0' C031' F038'        	movff	colorDetect@bluePrint+3,___flge@ff1+3
  7759  06F4' 0ECD               	movlw	205
  7760  06F6' 6E00'              	movwf	___flge@ff2^0,c
  7761  06F8' 0ECC               	movlw	204
  7762  06FA' 6E00'              	movwf	(___flge@ff2+1)^0,c
  7763  06FC' 0E4C               	movlw	76
  7764  06FE' 6E00'              	movwf	(___flge@ff2+2)^0,c
  7765  0700' 0E3F               	movlw	63
  7766  0702' 6E00'              	movwf	(___flge@ff2+3)^0,c
  7767  0704' EC00' F000'        	call	___flge	;wreg free
  7768  0708' B0D8               	btfsc	status,0,c
  7769  070A' EF00' F000'        	goto	u6461
  7770  070E' EF00' F000'        	goto	u6460
  7771  0712'                    u6461:
  7772  0712' EF00' F000'        	goto	l5755
  7773  0716'                    u6460:
  7774  0716'                    
  7775                           ;MazeRobot.X/color.c: 172:         _delay((unsigned long)((2)*(64000000/4000.0)));
  7776  0716' 0E2A               	movlw	42
  7777  0718' 6E00'              	movwf	??_colorDetect^0,c
  7778  071A' 0E8E               	movlw	142
  7779  071C'                    u6787:
  7780  071C' 2EE8               	decfsz	wreg,f,c
  7781  071E' D7FE               	bra	u6787
  7782  0720' 2E00'              	decfsz	??_colorDetect^0,f,c
  7783  0722' D7FC               	bra	u6787
  7784  0724'                    l5755:
  7785                           
  7786                           ;MazeRobot.X/color.c: 176:         if ((bluePrint - redPrint > 0.7) & (bluePrint - green
      +                          Print > 0.3) & (bluePrint > 0.7 )){
  7787  0724' 0E33               	movlw	51
  7788  0726' 6E00'              	movwf	___flge@ff1^0,c
  7789  0728' 0E33               	movlw	51
  7790  072A' 6E00'              	movwf	(___flge@ff1+1)^0,c
  7791  072C' 0E33               	movlw	51
  7792  072E' 6E00'              	movwf	(___flge@ff1+2)^0,c
  7793  0730' 0E3F               	movlw	63
  7794  0732' 6E00'              	movwf	(___flge@ff1+3)^0,c
  7795  0734' C026' F031'        	movff	colorDetect@redPrint,___flsub@a
  7796  0738' C027' F032'        	movff	colorDetect@redPrint+1,___flsub@a+1
  7797  073C' C028' F033'        	movff	colorDetect@redPrint+2,___flsub@a+2
  7798  0740' C029' F034'        	movff	colorDetect@redPrint+3,___flsub@a+3
  7799  0744' C02E' F02D'        	movff	colorDetect@bluePrint,___flsub@b
  7800  0748' C02F' F02E'        	movff	colorDetect@bluePrint+1,___flsub@b+1
  7801  074C' C030' F02F'        	movff	colorDetect@bluePrint+2,___flsub@b+2
  7802  0750' C031' F030'        	movff	colorDetect@bluePrint+3,___flsub@b+3
  7803  0754' EC00' F000'        	call	___flsub	;wreg free
  7804  0758' C02D' F039'        	movff	?___flsub,___flge@ff2
  7805  075C' C02E' F03A'        	movff	?___flsub+1,___flge@ff2+1
  7806  0760' C02F' F03B'        	movff	?___flsub+2,___flge@ff2+2
  7807  0764' C030' F03C'        	movff	?___flsub+3,___flge@ff2+3
  7808  0768' EC00' F000'        	call	___flge	;wreg free
  7809  076C' B0D8               	btfsc	status,0,c
  7810  076E' EF00' F000'        	goto	u6471
  7811  0772' EF00' F000'        	goto	u6470
  7812  0776'                    u6471:
  7813  0776' EF00' F000'        	goto	l5763
  7814  077A'                    u6470:
  7815  077A' 0E9A               	movlw	154
  7816  077C' 6E00'              	movwf	___flge@ff1^0,c
  7817  077E' 0E99               	movlw	153
  7818  0780' 6E00'              	movwf	(___flge@ff1+1)^0,c
  7819  0782' 0E99               	movlw	153
  7820  0784' 6E00'              	movwf	(___flge@ff1+2)^0,c
  7821  0786' 0E3E               	movlw	62
  7822  0788' 6E00'              	movwf	(___flge@ff1+3)^0,c
  7823  078A' C02A' F031'        	movff	colorDetect@greenPrint,___flsub@a
  7824  078E' C02B' F032'        	movff	colorDetect@greenPrint+1,___flsub@a+1
  7825  0792' C02C' F033'        	movff	colorDetect@greenPrint+2,___flsub@a+2
  7826  0796' C02D' F034'        	movff	colorDetect@greenPrint+3,___flsub@a+3
  7827  079A' C02E' F02D'        	movff	colorDetect@bluePrint,___flsub@b
  7828  079E' C02F' F02E'        	movff	colorDetect@bluePrint+1,___flsub@b+1
  7829  07A2' C030' F02F'        	movff	colorDetect@bluePrint+2,___flsub@b+2
  7830  07A6' C031' F030'        	movff	colorDetect@bluePrint+3,___flsub@b+3
  7831  07AA' EC00' F000'        	call	___flsub	;wreg free
  7832  07AE' C02D' F039'        	movff	?___flsub,___flge@ff2
  7833  07B2' C02E' F03A'        	movff	?___flsub+1,___flge@ff2+1
  7834  07B6' C02F' F03B'        	movff	?___flsub+2,___flge@ff2+2
  7835  07BA' C030' F03C'        	movff	?___flsub+3,___flge@ff2+3
  7836  07BE' EC00' F000'        	call	___flge	;wreg free
  7837  07C2' B0D8               	btfsc	status,0,c
  7838  07C4' EF00' F000'        	goto	u6481
  7839  07C8' EF00' F000'        	goto	u6480
  7840  07CC'                    u6481:
  7841  07CC' EF00' F000'        	goto	l5763
  7842  07D0'                    u6480:
  7843  07D0' 0E33               	movlw	51
  7844  07D2' 6E00'              	movwf	___flge@ff1^0,c
  7845  07D4' 0E33               	movlw	51
  7846  07D6' 6E00'              	movwf	(___flge@ff1+1)^0,c
  7847  07D8' 0E33               	movlw	51
  7848  07DA' 6E00'              	movwf	(___flge@ff1+2)^0,c
  7849  07DC' 0E3F               	movlw	63
  7850  07DE' 6E00'              	movwf	(___flge@ff1+3)^0,c
  7851  07E0' C02E' F039'        	movff	colorDetect@bluePrint,___flge@ff2
  7852  07E4' C02F' F03A'        	movff	colorDetect@bluePrint+1,___flge@ff2+1
  7853  07E8' C030' F03B'        	movff	colorDetect@bluePrint+2,___flge@ff2+2
  7854  07EC' C031' F03C'        	movff	colorDetect@bluePrint+3,___flge@ff2+3
  7855  07F0' EC00' F000'        	call	___flge	;wreg free
  7856  07F4' B0D8               	btfsc	status,0,c
  7857  07F6' EF00' F000'        	goto	u6491
  7858  07FA' EF00' F000'        	goto	u6490
  7859  07FE'                    u6491:
  7860  07FE' EF00' F000'        	goto	l5763
  7861  0802'                    u6490:
  7862  0802'                    
  7863                           ;MazeRobot.X/color.c: 177:         _delay((unsigned long)((2)*(64000000/4000.0)));
  7864  0802' 0E2A               	movlw	42
  7865  0804' 6E00'              	movwf	??_colorDetect^0,c
  7866  0806' 0E8E               	movlw	142
  7867  0808'                    u6797:
  7868  0808' 2EE8               	decfsz	wreg,f,c
  7869  080A' D7FE               	bra	u6797
  7870  080C' 2E00'              	decfsz	??_colorDetect^0,f,c
  7871  080E' D7FC               	bra	u6797
  7872  0810'                    l5763:
  7873                           
  7874                           ;MazeRobot.X/color.c: 181:         if ((greenPrint - redPrint > 0.4 ) & (greenPrint > 1)
      +                           & (greenPrint - bluePrint > 0.4 )){
  7875  0810' 0ECD               	movlw	205
  7876  0812' 6E00'              	movwf	___flge@ff1^0,c
  7877  0814' 0ECC               	movlw	204
  7878  0816' 6E00'              	movwf	(___flge@ff1+1)^0,c
  7879  0818' 0ECC               	movlw	204
  7880  081A' 6E00'              	movwf	(___flge@ff1+2)^0,c
  7881  081C' 0E3E               	movlw	62
  7882  081E' 6E00'              	movwf	(___flge@ff1+3)^0,c
  7883  0820' C026' F031'        	movff	colorDetect@redPrint,___flsub@a
  7884  0824' C027' F032'        	movff	colorDetect@redPrint+1,___flsub@a+1
  7885  0828' C028' F033'        	movff	colorDetect@redPrint+2,___flsub@a+2
  7886  082C' C029' F034'        	movff	colorDetect@redPrint+3,___flsub@a+3
  7887  0830' C02A' F02D'        	movff	colorDetect@greenPrint,___flsub@b
  7888  0834' C02B' F02E'        	movff	colorDetect@greenPrint+1,___flsub@b+1
  7889  0838' C02C' F02F'        	movff	colorDetect@greenPrint+2,___flsub@b+2
  7890  083C' C02D' F030'        	movff	colorDetect@greenPrint+3,___flsub@b+3
  7891  0840' EC00' F000'        	call	___flsub	;wreg free
  7892  0844' C02D' F039'        	movff	?___flsub,___flge@ff2
  7893  0848' C02E' F03A'        	movff	?___flsub+1,___flge@ff2+1
  7894  084C' C02F' F03B'        	movff	?___flsub+2,___flge@ff2+2
  7895  0850' C030' F03C'        	movff	?___flsub+3,___flge@ff2+3
  7896  0854' EC00' F000'        	call	___flge	;wreg free
  7897  0858' B0D8               	btfsc	status,0,c
  7898  085A' EF00' F000'        	goto	u6501
  7899  085E' EF00' F000'        	goto	u6500
  7900  0862'                    u6501:
  7901  0862' EF00' F000'        	goto	l5771
  7902  0866'                    u6500:
  7903  0866' 0E00               	movlw	0
  7904  0868' 6E00'              	movwf	___flge@ff1^0,c
  7905  086A' 0E00               	movlw	0
  7906  086C' 6E00'              	movwf	(___flge@ff1+1)^0,c
  7907  086E' 0E80               	movlw	128
  7908  0870' 6E00'              	movwf	(___flge@ff1+2)^0,c
  7909  0872' 0E3F               	movlw	63
  7910  0874' 6E00'              	movwf	(___flge@ff1+3)^0,c
  7911  0876' C02A' F039'        	movff	colorDetect@greenPrint,___flge@ff2
  7912  087A' C02B' F03A'        	movff	colorDetect@greenPrint+1,___flge@ff2+1
  7913  087E' C02C' F03B'        	movff	colorDetect@greenPrint+2,___flge@ff2+2
  7914  0882' C02D' F03C'        	movff	colorDetect@greenPrint+3,___flge@ff2+3
  7915  0886' EC00' F000'        	call	___flge	;wreg free
  7916  088A' B0D8               	btfsc	status,0,c
  7917  088C' EF00' F000'        	goto	u6511
  7918  0890' EF00' F000'        	goto	u6510
  7919  0894'                    u6511:
  7920  0894' EF00' F000'        	goto	l5771
  7921  0898'                    u6510:
  7922  0898' 0ECD               	movlw	205
  7923  089A' 6E00'              	movwf	___flge@ff1^0,c
  7924  089C' 0ECC               	movlw	204
  7925  089E' 6E00'              	movwf	(___flge@ff1+1)^0,c
  7926  08A0' 0ECC               	movlw	204
  7927  08A2' 6E00'              	movwf	(___flge@ff1+2)^0,c
  7928  08A4' 0E3E               	movlw	62
  7929  08A6' 6E00'              	movwf	(___flge@ff1+3)^0,c
  7930  08A8' C02E' F031'        	movff	colorDetect@bluePrint,___flsub@a
  7931  08AC' C02F' F032'        	movff	colorDetect@bluePrint+1,___flsub@a+1
  7932  08B0' C030' F033'        	movff	colorDetect@bluePrint+2,___flsub@a+2
  7933  08B4' C031' F034'        	movff	colorDetect@bluePrint+3,___flsub@a+3
  7934  08B8' C02A' F02D'        	movff	colorDetect@greenPrint,___flsub@b
  7935  08BC' C02B' F02E'        	movff	colorDetect@greenPrint+1,___flsub@b+1
  7936  08C0' C02C' F02F'        	movff	colorDetect@greenPrint+2,___flsub@b+2
  7937  08C4' C02D' F030'        	movff	colorDetect@greenPrint+3,___flsub@b+3
  7938  08C8' EC00' F000'        	call	___flsub	;wreg free
  7939  08CC' C02D' F039'        	movff	?___flsub,___flge@ff2
  7940  08D0' C02E' F03A'        	movff	?___flsub+1,___flge@ff2+1
  7941  08D4' C02F' F03B'        	movff	?___flsub+2,___flge@ff2+2
  7942  08D8' C030' F03C'        	movff	?___flsub+3,___flge@ff2+3
  7943  08DC' EC00' F000'        	call	___flge	;wreg free
  7944  08E0' B0D8               	btfsc	status,0,c
  7945  08E2' EF00' F000'        	goto	u6521
  7946  08E6' EF00' F000'        	goto	u6520
  7947  08EA'                    u6521:
  7948  08EA' EF00' F000'        	goto	l5771
  7949  08EE'                    u6520:
  7950  08EE'                    
  7951                           ;MazeRobot.X/color.c: 182:         _delay((unsigned long)((2)*(64000000/4000.0)));
  7952  08EE' 0E2A               	movlw	42
  7953  08F0' 6E00'              	movwf	??_colorDetect^0,c
  7954  08F2' 0E8E               	movlw	142
  7955  08F4'                    u6807:
  7956  08F4' 2EE8               	decfsz	wreg,f,c
  7957  08F6' D7FE               	bra	u6807
  7958  08F8' 2E00'              	decfsz	??_colorDetect^0,f,c
  7959  08FA' D7FC               	bra	u6807
  7960  08FC'                    l5771:
  7961                           
  7962                           ;MazeRobot.X/color.c: 186:         if ((redPrint < 0.7) & (greenPrint > 1.0)& (bluePrint
      +                           > 1.0)){
  7963  08FC' C026' F035'        	movff	colorDetect@redPrint,___flge@ff1
  7964  0900' C027' F036'        	movff	colorDetect@redPrint+1,___flge@ff1+1
  7965  0904' C028' F037'        	movff	colorDetect@redPrint+2,___flge@ff1+2
  7966  0908' C029' F038'        	movff	colorDetect@redPrint+3,___flge@ff1+3
  7967  090C' 0E33               	movlw	51
  7968  090E' 6E00'              	movwf	___flge@ff2^0,c
  7969  0910' 0E33               	movlw	51
  7970  0912' 6E00'              	movwf	(___flge@ff2+1)^0,c
  7971  0914' 0E33               	movlw	51
  7972  0916' 6E00'              	movwf	(___flge@ff2+2)^0,c
  7973  0918' 0E3F               	movlw	63
  7974  091A' 6E00'              	movwf	(___flge@ff2+3)^0,c
  7975  091C' EC00' F000'        	call	___flge	;wreg free
  7976  0920' B0D8               	btfsc	status,0,c
  7977  0922' EF00' F000'        	goto	u6531
  7978  0926' EF00' F000'        	goto	u6530
  7979  092A'                    u6531:
  7980  092A' EF00' F000'        	goto	l5779
  7981  092E'                    u6530:
  7982  092E' 0E00               	movlw	0
  7983  0930' 6E00'              	movwf	___flge@ff1^0,c
  7984  0932' 0E00               	movlw	0
  7985  0934' 6E00'              	movwf	(___flge@ff1+1)^0,c
  7986  0936' 0E80               	movlw	128
  7987  0938' 6E00'              	movwf	(___flge@ff1+2)^0,c
  7988  093A' 0E3F               	movlw	63
  7989  093C' 6E00'              	movwf	(___flge@ff1+3)^0,c
  7990  093E' C02A' F039'        	movff	colorDetect@greenPrint,___flge@ff2
  7991  0942' C02B' F03A'        	movff	colorDetect@greenPrint+1,___flge@ff2+1
  7992  0946' C02C' F03B'        	movff	colorDetect@greenPrint+2,___flge@ff2+2
  7993  094A' C02D' F03C'        	movff	colorDetect@greenPrint+3,___flge@ff2+3
  7994  094E' EC00' F000'        	call	___flge	;wreg free
  7995  0952' B0D8               	btfsc	status,0,c
  7996  0954' EF00' F000'        	goto	u6541
  7997  0958' EF00' F000'        	goto	u6540
  7998  095C'                    u6541:
  7999  095C' EF00' F000'        	goto	l5779
  8000  0960'                    u6540:
  8001  0960' 0E00               	movlw	0
  8002  0962' 6E00'              	movwf	___flge@ff1^0,c
  8003  0964' 0E00               	movlw	0
  8004  0966' 6E00'              	movwf	(___flge@ff1+1)^0,c
  8005  0968' 0E80               	movlw	128
  8006  096A' 6E00'              	movwf	(___flge@ff1+2)^0,c
  8007  096C' 0E3F               	movlw	63
  8008  096E' 6E00'              	movwf	(___flge@ff1+3)^0,c
  8009  0970' C02E' F039'        	movff	colorDetect@bluePrint,___flge@ff2
  8010  0974' C02F' F03A'        	movff	colorDetect@bluePrint+1,___flge@ff2+1
  8011  0978' C030' F03B'        	movff	colorDetect@bluePrint+2,___flge@ff2+2
  8012  097C' C031' F03C'        	movff	colorDetect@bluePrint+3,___flge@ff2+3
  8013  0980' EC00' F000'        	call	___flge	;wreg free
  8014  0984' B0D8               	btfsc	status,0,c
  8015  0986' EF00' F000'        	goto	u6551
  8016  098A' EF00' F000'        	goto	u6550
  8017  098E'                    u6551:
  8018  098E' EF00' F000'        	goto	l5779
  8019  0992'                    u6550:
  8020  0992'                    
  8021                           ;MazeRobot.X/color.c: 187:         _delay((unsigned long)((2)*(64000000/4000.0)));
  8022  0992' 0E2A               	movlw	42
  8023  0994' 6E00'              	movwf	??_colorDetect^0,c
  8024  0996' 0E8E               	movlw	142
  8025  0998'                    u6817:
  8026  0998' 2EE8               	decfsz	wreg,f,c
  8027  099A' D7FE               	bra	u6817
  8028  099C' 2E00'              	decfsz	??_colorDetect^0,f,c
  8029  099E' D7FC               	bra	u6817
  8030  09A0'                    l5779:
  8031                           
  8032                           ;MazeRobot.X/color.c: 191:         if ((redPrint > 0.95) & (greenPrint > 0.8 & greenPrin
      +                          t < 0.9) & (bluePrint > 0.8 & bluePrint < 0.95)){
  8033  09A0' 0E33               	movlw	51
  8034  09A2' 6E00'              	movwf	___flge@ff1^0,c
  8035  09A4' 0E33               	movlw	51
  8036  09A6' 6E00'              	movwf	(___flge@ff1+1)^0,c
  8037  09A8' 0E73               	movlw	115
  8038  09AA' 6E00'              	movwf	(___flge@ff1+2)^0,c
  8039  09AC' 0E3F               	movlw	63
  8040  09AE' 6E00'              	movwf	(___flge@ff1+3)^0,c
  8041  09B0' C026' F039'        	movff	colorDetect@redPrint,___flge@ff2
  8042  09B4' C027' F03A'        	movff	colorDetect@redPrint+1,___flge@ff2+1
  8043  09B8' C028' F03B'        	movff	colorDetect@redPrint+2,___flge@ff2+2
  8044  09BC' C029' F03C'        	movff	colorDetect@redPrint+3,___flge@ff2+3
  8045  09C0' EC00' F000'        	call	___flge	;wreg free
  8046  09C4' B0D8               	btfsc	status,0,c
  8047  09C6' EF00' F000'        	goto	u6561
  8048  09CA' EF00' F000'        	goto	u6560
  8049  09CE'                    u6561:
  8050  09CE' EF00' F000'        	goto	l77
  8051  09D2'                    u6560:
  8052  09D2' 0ECD               	movlw	205
  8053  09D4' 6E00'              	movwf	___flge@ff1^0,c
  8054  09D6' 0ECC               	movlw	204
  8055  09D8' 6E00'              	movwf	(___flge@ff1+1)^0,c
  8056  09DA' 0E4C               	movlw	76
  8057  09DC' 6E00'              	movwf	(___flge@ff1+2)^0,c
  8058  09DE' 0E3F               	movlw	63
  8059  09E0' 6E00'              	movwf	(___flge@ff1+3)^0,c
  8060  09E2' C02A' F039'        	movff	colorDetect@greenPrint,___flge@ff2
  8061  09E6' C02B' F03A'        	movff	colorDetect@greenPrint+1,___flge@ff2+1
  8062  09EA' C02C' F03B'        	movff	colorDetect@greenPrint+2,___flge@ff2+2
  8063  09EE' C02D' F03C'        	movff	colorDetect@greenPrint+3,___flge@ff2+3
  8064  09F2' EC00' F000'        	call	___flge	;wreg free
  8065  09F6' B0D8               	btfsc	status,0,c
  8066  09F8' EF00' F000'        	goto	u6571
  8067  09FC' EF00' F000'        	goto	u6570
  8068  0A00'                    u6571:
  8069  0A00' EF00' F000'        	goto	l77
  8070  0A04'                    u6570:
  8071  0A04' C02A' F035'        	movff	colorDetect@greenPrint,___flge@ff1
  8072  0A08' C02B' F036'        	movff	colorDetect@greenPrint+1,___flge@ff1+1
  8073  0A0C' C02C' F037'        	movff	colorDetect@greenPrint+2,___flge@ff1+2
  8074  0A10' C02D' F038'        	movff	colorDetect@greenPrint+3,___flge@ff1+3
  8075  0A14' 0E66               	movlw	102
  8076  0A16' 6E00'              	movwf	___flge@ff2^0,c
  8077  0A18' 0E66               	movlw	102
  8078  0A1A' 6E00'              	movwf	(___flge@ff2+1)^0,c
  8079  0A1C' 0E66               	movlw	102
  8080  0A1E' 6E00'              	movwf	(___flge@ff2+2)^0,c
  8081  0A20' 0E3F               	movlw	63
  8082  0A22' 6E00'              	movwf	(___flge@ff2+3)^0,c
  8083  0A24' EC00' F000'        	call	___flge	;wreg free
  8084  0A28' B0D8               	btfsc	status,0,c
  8085  0A2A' EF00' F000'        	goto	u6581
  8086  0A2E' EF00' F000'        	goto	u6580
  8087  0A32'                    u6581:
  8088  0A32' EF00' F000'        	goto	l77
  8089  0A36'                    u6580:
  8090  0A36' 0ECD               	movlw	205
  8091  0A38' 6E00'              	movwf	___flge@ff1^0,c
  8092  0A3A' 0ECC               	movlw	204
  8093  0A3C' 6E00'              	movwf	(___flge@ff1+1)^0,c
  8094  0A3E' 0E4C               	movlw	76
  8095  0A40' 6E00'              	movwf	(___flge@ff1+2)^0,c
  8096  0A42' 0E3F               	movlw	63
  8097  0A44' 6E00'              	movwf	(___flge@ff1+3)^0,c
  8098  0A46' C02E' F039'        	movff	colorDetect@bluePrint,___flge@ff2
  8099  0A4A' C02F' F03A'        	movff	colorDetect@bluePrint+1,___flge@ff2+1
  8100  0A4E' C030' F03B'        	movff	colorDetect@bluePrint+2,___flge@ff2+2
  8101  0A52' C031' F03C'        	movff	colorDetect@bluePrint+3,___flge@ff2+3
  8102  0A56' EC00' F000'        	call	___flge	;wreg free
  8103  0A5A' B0D8               	btfsc	status,0,c
  8104  0A5C' EF00' F000'        	goto	u6591
  8105  0A60' EF00' F000'        	goto	u6590
  8106  0A64'                    u6591:
  8107  0A64' EF00' F000'        	goto	l77
  8108  0A68'                    u6590:
  8109  0A68' C02E' F035'        	movff	colorDetect@bluePrint,___flge@ff1
  8110  0A6C' C02F' F036'        	movff	colorDetect@bluePrint+1,___flge@ff1+1
  8111  0A70' C030' F037'        	movff	colorDetect@bluePrint+2,___flge@ff1+2
  8112  0A74' C031' F038'        	movff	colorDetect@bluePrint+3,___flge@ff1+3
  8113  0A78' 0E33               	movlw	51
  8114  0A7A' 6E00'              	movwf	___flge@ff2^0,c
  8115  0A7C' 0E33               	movlw	51
  8116  0A7E' 6E00'              	movwf	(___flge@ff2+1)^0,c
  8117  0A80' 0E73               	movlw	115
  8118  0A82' 6E00'              	movwf	(___flge@ff2+2)^0,c
  8119  0A84' 0E3F               	movlw	63
  8120  0A86' 6E00'              	movwf	(___flge@ff2+3)^0,c
  8121  0A88' EC00' F000'        	call	___flge	;wreg free
  8122  0A8C' B0D8               	btfsc	status,0,c
  8123  0A8E' EF00' F000'        	goto	u6601
  8124  0A92' EF00' F000'        	goto	u6600
  8125  0A96'                    u6601:
  8126  0A96' EF00' F000'        	goto	l77
  8127  0A9A'                    u6600:
  8128  0A9A'                    
  8129                           ;MazeRobot.X/color.c: 192:         _delay((unsigned long)((2)*(64000000/4000.0)));
  8130  0A9A' 0E2A               	movlw	42
  8131  0A9C' 6E00'              	movwf	??_colorDetect^0,c
  8132  0A9E' 0E8E               	movlw	142
  8133  0AA0'                    u6827:
  8134  0AA0' 2EE8               	decfsz	wreg,f,c
  8135  0AA2' D7FE               	bra	u6827
  8136  0AA4' 2E00'              	decfsz	??_colorDetect^0,f,c
  8137  0AA6' D7FC               	bra	u6827
  8138  0AA8'                    l77:
  8139  0AA8' 0012               	return		;funcret
  8140  0AAA'                    __end_of_colorDetect:
  8141                           	callstack 0
  8142                           
  8143 ;; *************** function ___xxtofl *****************
  8144 ;; Defined at:
  8145 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\xxtofl.c"
  8146 ;; Parameters:    Size  Location     Type
  8147 ;;  sign            1    wreg     unsigned char 
  8148 ;;  val             4    4[COMRAM] long 
  8149 ;; Auto vars:     Size  Location     Type
  8150 ;;  sign            1   12[COMRAM] unsigned char 
  8151 ;;  arg             4   14[COMRAM] unsigned long 
  8152 ;;  exp             1   13[COMRAM] unsigned char 
  8153 ;; Return value:  Size  Location     Type
  8154 ;;                  4    4[COMRAM] unsigned char 
  8155 ;; Registers used:
  8156 ;;		wreg, status,2, status,0
  8157 ;; Tracked objects:
  8158 ;;		On entry : 0/0
  8159 ;;		On exit  : 0/0
  8160 ;;		Unchanged: 0/0
  8161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8162 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8163 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8164 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8165 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8166 ;;Total ram usage:       14 bytes
  8167 ;; Hardware stack levels used: 1
  8168 ;; Hardware stack levels required when called: 2
  8169 ;; This function calls:
  8170 ;;		Nothing
  8171 ;; This function is called by:
  8172 ;;		_colorDetect
  8173 ;;		_main
  8174 ;;		_turnLeft
  8175 ;;		_turnRight
  8176 ;;		_turnLeft_90
  8177 ;;		_turnRight_90
  8178 ;;		_turn_180
  8179 ;;		_turnRight_135
  8180 ;;		_turnLeft_135
  8181 ;; This function uses a non-reentrant model
  8182 ;;
  8183                           
  8184                           	psect	text34
  8185  0000'                    __ptext34:
  8186                           	callstack 0
  8187  0000'                    ___xxtofl:
  8188                           	callstack 27
  8189                           
  8190                           ;incstack = 0
  8191                           ;___xxtofl@sign stored from wreg
  8192  0000' 6E00'              	movwf	___xxtofl@sign^0,c
  8193  0002' 5000'              	movf	___xxtofl@sign^0,w,c
  8194  0004' B4D8               	btfsc	status,2,c
  8195  0006' EF00' F000'        	goto	u4921
  8196  000A' EF00' F000'        	goto	u4920
  8197  000E'                    u4921:
  8198  000E' EF00' F000'        	goto	l1143
  8199  0012'                    u4920:
  8200  0012' BE00'              	btfsc	(___xxtofl@val+3)^0,7,c
  8201  0014' EF00' F000'        	goto	u4930
  8202  0018' EF00' F000'        	goto	u4931
  8203  001C'                    u4931:
  8204  001C' EF00' F000'        	goto	l1143
  8205  0020'                    u4930:
  8206  0020' C004' F008'        	movff	___xxtofl@val,??___xxtofl
  8207  0024' C005' F009'        	movff	___xxtofl@val+1,??___xxtofl+1
  8208  0028' C006' F00A'        	movff	___xxtofl@val+2,??___xxtofl+2
  8209  002C' C007' F00B'        	movff	___xxtofl@val+3,??___xxtofl+3
  8210  0030' 1E00'              	comf	??___xxtofl^0,f,c
  8211  0032' 1E00'              	comf	(??___xxtofl+1)^0,f,c
  8212  0034' 1E00'              	comf	(??___xxtofl+2)^0,f,c
  8213  0036' 1E00'              	comf	(??___xxtofl+3)^0,f,c
  8214  0038' 2A00'              	incf	??___xxtofl^0,f,c
  8215  003A' 0E00               	movlw	0
  8216  003C' 2200'              	addwfc	(??___xxtofl+1)^0,f,c
  8217  003E' 2200'              	addwfc	(??___xxtofl+2)^0,f,c
  8218  0040' 2200'              	addwfc	(??___xxtofl+3)^0,f,c
  8219  0042' C008' F00E'        	movff	??___xxtofl,___xxtofl@arg
  8220  0046' C009' F00F'        	movff	??___xxtofl+1,___xxtofl@arg+1
  8221  004A' C00A' F010'        	movff	??___xxtofl+2,___xxtofl@arg+2
  8222  004E' C00B' F011'        	movff	??___xxtofl+3,___xxtofl@arg+3
  8223  0052' EF00' F000'        	goto	l4635
  8224  0056'                    l1143:
  8225  0056' C004' F00E'        	movff	___xxtofl@val,___xxtofl@arg
  8226  005A' C005' F00F'        	movff	___xxtofl@val+1,___xxtofl@arg+1
  8227  005E' C006' F010'        	movff	___xxtofl@val+2,___xxtofl@arg+2
  8228  0062' C007' F011'        	movff	___xxtofl@val+3,___xxtofl@arg+3
  8229  0066'                    l4635:
  8230  0066' 5000'              	movf	___xxtofl@val^0,w,c
  8231  0068' 1000'              	iorwf	(___xxtofl@val+1)^0,w,c
  8232  006A' 1000'              	iorwf	(___xxtofl@val+2)^0,w,c
  8233  006C' 1000'              	iorwf	(___xxtofl@val+3)^0,w,c
  8234  006E' A4D8               	btfss	status,2,c
  8235  0070' EF00' F000'        	goto	u4941
  8236  0074' EF00' F000'        	goto	u4940
  8237  0078'                    u4941:
  8238  0078' EF00' F000'        	goto	l4641
  8239  007C'                    u4940:
  8240  007C' 0E00               	movlw	0
  8241  007E' 6E00'              	movwf	?___xxtofl^0,c
  8242  0080' 0E00               	movlw	0
  8243  0082' 6E00'              	movwf	(?___xxtofl+1)^0,c
  8244  0084' 0E00               	movlw	0
  8245  0086' 6E00'              	movwf	(?___xxtofl+2)^0,c
  8246  0088' 0E00               	movlw	0
  8247  008A' 6E00'              	movwf	(?___xxtofl+3)^0,c
  8248  008C' EF00' F000'        	goto	l1146
  8249  0090'                    l4641:
  8250  0090' 0E96               	movlw	150
  8251  0092' 6E00'              	movwf	___xxtofl@exp^0,c
  8252  0094' EF00' F000'        	goto	l4645
  8253  0098'                    l4643:
  8254  0098' 2A00'              	incf	___xxtofl@exp^0,f,c
  8255  009A' 90D8               	bcf	status,0,c
  8256  009C' 3200'              	rrcf	(___xxtofl@arg+3)^0,f,c
  8257  009E' 3200'              	rrcf	(___xxtofl@arg+2)^0,f,c
  8258  00A0' 3200'              	rrcf	(___xxtofl@arg+1)^0,f,c
  8259  00A2' 3200'              	rrcf	___xxtofl@arg^0,f,c
  8260  00A4'                    l4645:
  8261  00A4' 0E00               	movlw	0
  8262  00A6' 1400'              	andwf	___xxtofl@arg^0,w,c
  8263  00A8' 6E00'              	movwf	??___xxtofl^0,c
  8264  00AA' 0E00               	movlw	0
  8265  00AC' 1400'              	andwf	(___xxtofl@arg+1)^0,w,c
  8266  00AE' 6E00'              	movwf	(??___xxtofl+1)^0,c
  8267  00B0' 0E00               	movlw	0
  8268  00B2' 1400'              	andwf	(___xxtofl@arg+2)^0,w,c
  8269  00B4' 6E00'              	movwf	(??___xxtofl+2)^0,c
  8270  00B6' 0EFE               	movlw	254
  8271  00B8' 1400'              	andwf	(___xxtofl@arg+3)^0,w,c
  8272  00BA' 6E00'              	movwf	(??___xxtofl+3)^0,c
  8273  00BC' 5000'              	movf	??___xxtofl^0,w,c
  8274  00BE' 1000'              	iorwf	(??___xxtofl+1)^0,w,c
  8275  00C0' 1000'              	iorwf	(??___xxtofl+2)^0,w,c
  8276  00C2' 1000'              	iorwf	(??___xxtofl+3)^0,w,c
  8277  00C4' A4D8               	btfss	status,2,c
  8278  00C6' EF00' F000'        	goto	u4951
  8279  00CA' EF00' F000'        	goto	u4950
  8280  00CE'                    u4951:
  8281  00CE' EF00' F000'        	goto	l4643
  8282  00D2'                    u4950:
  8283  00D2' EF00' F000'        	goto	l1150
  8284  00D6'                    l4647:
  8285  00D6' 2A00'              	incf	___xxtofl@exp^0,f,c
  8286  00D8' 0E01               	movlw	1
  8287  00DA' 2600'              	addwf	___xxtofl@arg^0,f,c
  8288  00DC' 0E00               	movlw	0
  8289  00DE' 2200'              	addwfc	(___xxtofl@arg+1)^0,f,c
  8290  00E0' 2200'              	addwfc	(___xxtofl@arg+2)^0,f,c
  8291  00E2' 2200'              	addwfc	(___xxtofl@arg+3)^0,f,c
  8292  00E4' 90D8               	bcf	status,0,c
  8293  00E6' 3200'              	rrcf	(___xxtofl@arg+3)^0,f,c
  8294  00E8' 3200'              	rrcf	(___xxtofl@arg+2)^0,f,c
  8295  00EA' 3200'              	rrcf	(___xxtofl@arg+1)^0,f,c
  8296  00EC' 3200'              	rrcf	___xxtofl@arg^0,f,c
  8297  00EE'                    l1150:
  8298  00EE' 0E00               	movlw	0
  8299  00F0' 1400'              	andwf	___xxtofl@arg^0,w,c
  8300  00F2' 6E00'              	movwf	??___xxtofl^0,c
  8301  00F4' 0E00               	movlw	0
  8302  00F6' 1400'              	andwf	(___xxtofl@arg+1)^0,w,c
  8303  00F8' 6E00'              	movwf	(??___xxtofl+1)^0,c
  8304  00FA' 0E00               	movlw	0
  8305  00FC' 1400'              	andwf	(___xxtofl@arg+2)^0,w,c
  8306  00FE' 6E00'              	movwf	(??___xxtofl+2)^0,c
  8307  0100' 0EFF               	movlw	255
  8308  0102' 1400'              	andwf	(___xxtofl@arg+3)^0,w,c
  8309  0104' 6E00'              	movwf	(??___xxtofl+3)^0,c
  8310  0106' 5000'              	movf	??___xxtofl^0,w,c
  8311  0108' 1000'              	iorwf	(??___xxtofl+1)^0,w,c
  8312  010A' 1000'              	iorwf	(??___xxtofl+2)^0,w,c
  8313  010C' 1000'              	iorwf	(??___xxtofl+3)^0,w,c
  8314  010E' A4D8               	btfss	status,2,c
  8315  0110' EF00' F000'        	goto	u4961
  8316  0114' EF00' F000'        	goto	u4960
  8317  0118'                    u4961:
  8318  0118' EF00' F000'        	goto	l4647
  8319  011C'                    u4960:
  8320  011C' EF00' F000'        	goto	l4655
  8321  0120'                    l4653:
  8322  0120' 0600'              	decf	___xxtofl@exp^0,f,c
  8323  0122' 90D8               	bcf	status,0,c
  8324  0124' 3600'              	rlcf	___xxtofl@arg^0,f,c
  8325  0126' 3600'              	rlcf	(___xxtofl@arg+1)^0,f,c
  8326  0128' 3600'              	rlcf	(___xxtofl@arg+2)^0,f,c
  8327  012A' 3600'              	rlcf	(___xxtofl@arg+3)^0,f,c
  8328  012C'                    l4655:
  8329  012C' BE00'              	btfsc	(___xxtofl@arg+2)^0,7,c
  8330  012E' EF00' F000'        	goto	u4971
  8331  0132' EF00' F000'        	goto	u4970
  8332  0136'                    u4971:
  8333  0136' EF00' F000'        	goto	l1157
  8334  013A'                    u4970:
  8335  013A' 0E02               	movlw	2
  8336  013C' 6000'              	cpfslt	___xxtofl@exp^0,c
  8337  013E' EF00' F000'        	goto	u4981
  8338  0142' EF00' F000'        	goto	u4980
  8339  0146'                    u4981:
  8340  0146' EF00' F000'        	goto	l4653
  8341  014A'                    u4980:
  8342  014A'                    l1157:
  8343  014A' B000'              	btfsc	___xxtofl@exp^0,0,c
  8344  014C' EF00' F000'        	goto	u4991
  8345  0150' EF00' F000'        	goto	u4990
  8346  0154'                    u4991:
  8347  0154' EF00' F000'        	goto	l4661
  8348  0158'                    u4990:
  8349  0158' 9E00'              	bcf	(___xxtofl@arg+2)^0,7,c
  8350  015A'                    l4661:
  8351  015A' 90D8               	bcf	status,0,c
  8352  015C' 3200'              	rrcf	___xxtofl@exp^0,f,c
  8353  015E' C00D' F008'        	movff	___xxtofl@exp,??___xxtofl
  8354  0162' 6A00'              	clrf	(??___xxtofl+1)^0,c
  8355  0164' 6A00'              	clrf	(??___xxtofl+2)^0,c
  8356  0166' 6A00'              	clrf	(??___xxtofl+3)^0,c
  8357  0168' C008' F00B'        	movff	??___xxtofl,??___xxtofl+3
  8358  016C' 6A00'              	clrf	(??___xxtofl+2)^0,c
  8359  016E' 6A00'              	clrf	(??___xxtofl+1)^0,c
  8360  0170' 6A00'              	clrf	??___xxtofl^0,c
  8361  0172' 5000'              	movf	??___xxtofl^0,w,c
  8362  0174' 1200'              	iorwf	___xxtofl@arg^0,f,c
  8363  0176' 5000'              	movf	(??___xxtofl+1)^0,w,c
  8364  0178' 1200'              	iorwf	(___xxtofl@arg+1)^0,f,c
  8365  017A' 5000'              	movf	(??___xxtofl+2)^0,w,c
  8366  017C' 1200'              	iorwf	(___xxtofl@arg+2)^0,f,c
  8367  017E' 5000'              	movf	(??___xxtofl+3)^0,w,c
  8368  0180' 1200'              	iorwf	(___xxtofl@arg+3)^0,f,c
  8369  0182' 5000'              	movf	___xxtofl@sign^0,w,c
  8370  0184' B4D8               	btfsc	status,2,c
  8371  0186' EF00' F000'        	goto	u5001
  8372  018A' EF00' F000'        	goto	u5000
  8373  018E'                    u5001:
  8374  018E' EF00' F000'        	goto	l4671
  8375  0192'                    u5000:
  8376  0192' BE00'              	btfsc	(___xxtofl@val+3)^0,7,c
  8377  0194' EF00' F000'        	goto	u5010
  8378  0198' EF00' F000'        	goto	u5011
  8379  019C'                    u5011:
  8380  019C' EF00' F000'        	goto	l4671
  8381  01A0'                    u5010:
  8382  01A0' 8E00'              	bsf	(___xxtofl@arg+3)^0,7,c
  8383  01A2'                    l4671:
  8384  01A2' C00E' F004'        	movff	___xxtofl@arg,?___xxtofl
  8385  01A6' C00F' F005'        	movff	___xxtofl@arg+1,?___xxtofl+1
  8386  01AA' C010' F006'        	movff	___xxtofl@arg+2,?___xxtofl+2
  8387  01AE' C011' F007'        	movff	___xxtofl@arg+3,?___xxtofl+3
  8388  01B2'                    l1146:
  8389  01B2' 0012               	return		;funcret
  8390  01B4'                    __end_of___xxtofl:
  8391                           	callstack 0
  8392                           
  8393 ;; *************** function ___flsub *****************
  8394 ;; Defined at:
  8395 ;;		line 245 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\sprcadd.c"
  8396 ;; Parameters:    Size  Location     Type
  8397 ;;  b               4   45[COMRAM] unsigned char 
  8398 ;;  a               4   49[COMRAM] unsigned char 
  8399 ;; Auto vars:     Size  Location     Type
  8400 ;;		None
  8401 ;; Return value:  Size  Location     Type
  8402 ;;                  4   45[COMRAM] unsigned char 
  8403 ;; Registers used:
  8404 ;;		wreg, status,2, status,0, cstack
  8405 ;; Tracked objects:
  8406 ;;		On entry : 0/0
  8407 ;;		On exit  : 0/0
  8408 ;;		Unchanged: 0/0
  8409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8410 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8413 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8414 ;;Total ram usage:        8 bytes
  8415 ;; Hardware stack levels used: 1
  8416 ;; Hardware stack levels required when called: 3
  8417 ;; This function calls:
  8418 ;;		___fladd
  8419 ;; This function is called by:
  8420 ;;		_colorDetect
  8421 ;;		_efgtoa
  8422 ;; This function uses a non-reentrant model
  8423 ;;
  8424                           
  8425                           	psect	text35
  8426  0000'                    __ptext35:
  8427                           	callstack 0
  8428  0000'                    ___flsub:
  8429                           	callstack 23
  8430  0000' 0E00               	movlw	0
  8431  0002' 1A00'              	xorwf	___flsub@a^0,f,c
  8432  0004' 0E00               	movlw	0
  8433  0006' 1A00'              	xorwf	(___flsub@a+1)^0,f,c
  8434  0008' 0E00               	movlw	0
  8435  000A' 1A00'              	xorwf	(___flsub@a+2)^0,f,c
  8436  000C' 0E80               	movlw	128
  8437  000E' 1A00'              	xorwf	(___flsub@a+3)^0,f,c
  8438  0010' C02D' F004'        	movff	___flsub@b,___fladd@b
  8439  0014' C02E' F005'        	movff	___flsub@b+1,___fladd@b+1
  8440  0018' C02F' F006'        	movff	___flsub@b+2,___fladd@b+2
  8441  001C' C030' F007'        	movff	___flsub@b+3,___fladd@b+3
  8442  0020' C031' F008'        	movff	___flsub@a,___fladd@a
  8443  0024' C032' F009'        	movff	___flsub@a+1,___fladd@a+1
  8444  0028' C033' F00A'        	movff	___flsub@a+2,___fladd@a+2
  8445  002C' C034' F00B'        	movff	___flsub@a+3,___fladd@a+3
  8446  0030' EC00' F000'        	call	___fladd	;wreg free
  8447  0034' C004' F02D'        	movff	?___fladd,?___flsub
  8448  0038' C005' F02E'        	movff	?___fladd+1,?___flsub+1
  8449  003C' C006' F02F'        	movff	?___fladd+2,?___flsub+2
  8450  0040' C007' F030'        	movff	?___fladd+3,?___flsub+3
  8451  0044' 0012               	return		;funcret
  8452  0046'                    __end_of___flsub:
  8453                           	callstack 0
  8454                           
  8455 ;; *************** function ___fladd *****************
  8456 ;; Defined at:
  8457 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\sprcadd.c"
  8458 ;; Parameters:    Size  Location     Type
  8459 ;;  b               4    4[COMRAM] unsigned char 
  8460 ;;  a               4    8[COMRAM] unsigned char 
  8461 ;; Auto vars:     Size  Location     Type
  8462 ;;  grs             1   19[COMRAM] unsigned char 
  8463 ;;  bexp            1   18[COMRAM] unsigned char 
  8464 ;;  aexp            1   17[COMRAM] unsigned char 
  8465 ;;  signs           1   16[COMRAM] unsigned char 
  8466 ;; Return value:  Size  Location     Type
  8467 ;;                  4    4[COMRAM] unsigned char 
  8468 ;; Registers used:
  8469 ;;		wreg, status,2, status,0
  8470 ;; Tracked objects:
  8471 ;;		On entry : 0/0
  8472 ;;		On exit  : 0/0
  8473 ;;		Unchanged: 0/0
  8474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8475 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8476 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8477 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8478 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8479 ;;Total ram usage:       16 bytes
  8480 ;; Hardware stack levels used: 1
  8481 ;; Hardware stack levels required when called: 2
  8482 ;; This function calls:
  8483 ;;		Nothing
  8484 ;; This function is called by:
  8485 ;;		___flsub
  8486 ;;		_efgtoa
  8487 ;; This function uses a non-reentrant model
  8488 ;;
  8489                           
  8490                           	psect	text36
  8491  0000'                    __ptext36:
  8492                           	callstack 0
  8493  0000'                    ___fladd:
  8494                           	callstack 23
  8495  0000' 5000'              	movf	(___fladd@b+3)^0,w,c
  8496  0002' 0B80               	andlw	128
  8497  0004' 6E00'              	movwf	___fladd@signs^0,c
  8498  0006' 5000'              	movf	(___fladd@b+3)^0,w,c
  8499  0008' 2400'              	addwf	(___fladd@b+3)^0,w,c
  8500  000A' 6E00'              	movwf	___fladd@bexp^0,c
  8501  000C' AE00'              	btfss	(___fladd@b+2)^0,7,c
  8502  000E' EF00' F000'        	goto	u2981
  8503  0012' EF00' F000'        	goto	u2980
  8504  0016'                    u2981:
  8505  0016' EF00' F000'        	goto	l3395
  8506  001A'                    u2980:
  8507  001A' 8000'              	bsf	___fladd@bexp^0,0,c
  8508  001C'                    l3395:
  8509  001C' 5000'              	movf	___fladd@bexp^0,w,c
  8510  001E' B4D8               	btfsc	status,2,c
  8511  0020' EF00' F000'        	goto	u2991
  8512  0024' EF00' F000'        	goto	u2990
  8513  0028'                    u2991:
  8514  0028' EF00' F000'        	goto	l3405
  8515  002C'                    u2990:
  8516  002C' 2800'              	incf	___fladd@bexp^0,w,c
  8517  002E' A4D8               	btfss	status,2,c
  8518  0030' EF00' F000'        	goto	u3001
  8519  0034' EF00' F000'        	goto	u3000
  8520  0038'                    u3001:
  8521  0038' EF00' F000'        	goto	l3401
  8522  003C'                    u3000:
  8523  003C' 0E00               	movlw	0
  8524  003E' 6E00'              	movwf	___fladd@b^0,c
  8525  0040' 0E00               	movlw	0
  8526  0042' 6E00'              	movwf	(___fladd@b+1)^0,c
  8527  0044' 0E00               	movlw	0
  8528  0046' 6E00'              	movwf	(___fladd@b+2)^0,c
  8529  0048' 0E00               	movlw	0
  8530  004A' 6E00'              	movwf	(___fladd@b+3)^0,c
  8531  004C'                    l3401:
  8532  004C' 8E00'              	bsf	(___fladd@b+2)^0,7,c
  8533  004E' 0E00               	movlw	0
  8534  0050' 6E00'              	movwf	(___fladd@b+3)^0,c
  8535  0052' EF00' F000'        	goto	l3407
  8536  0056'                    l3405:
  8537  0056' 0E00               	movlw	0
  8538  0058' 6E00'              	movwf	___fladd@b^0,c
  8539  005A' 0E00               	movlw	0
  8540  005C' 6E00'              	movwf	(___fladd@b+1)^0,c
  8541  005E' 0E00               	movlw	0
  8542  0060' 6E00'              	movwf	(___fladd@b+2)^0,c
  8543  0062' 0E00               	movlw	0
  8544  0064' 6E00'              	movwf	(___fladd@b+3)^0,c
  8545  0066'                    l3407:
  8546  0066' 5000'              	movf	(___fladd@a+3)^0,w,c
  8547  0068' 0B80               	andlw	128
  8548  006A' 6E00'              	movwf	___fladd@aexp^0,c
  8549  006C' 5000'              	movf	___fladd@signs^0,w,c
  8550  006E' 1800'              	xorwf	___fladd@aexp^0,w,c
  8551  0070' B4D8               	btfsc	status,2,c
  8552  0072' EF00' F000'        	goto	u3011
  8553  0076' EF00' F000'        	goto	u3010
  8554  007A'                    u3011:
  8555  007A' EF00' F000'        	goto	l3413
  8556  007E'                    u3010:
  8557  007E' 8C00'              	bsf	___fladd@signs^0,6,c
  8558  0080'                    l3413:
  8559  0080' 5000'              	movf	(___fladd@a+3)^0,w,c
  8560  0082' 2400'              	addwf	(___fladd@a+3)^0,w,c
  8561  0084' 6E00'              	movwf	___fladd@aexp^0,c
  8562  0086' AE00'              	btfss	(___fladd@a+2)^0,7,c
  8563  0088' EF00' F000'        	goto	u3021
  8564  008C' EF00' F000'        	goto	u3020
  8565  0090'                    u3021:
  8566  0090' EF00' F000'        	goto	l3419
  8567  0094'                    u3020:
  8568  0094' 8000'              	bsf	___fladd@aexp^0,0,c
  8569  0096'                    l3419:
  8570  0096' 5000'              	movf	___fladd@aexp^0,w,c
  8571  0098' B4D8               	btfsc	status,2,c
  8572  009A' EF00' F000'        	goto	u3031
  8573  009E' EF00' F000'        	goto	u3030
  8574  00A2'                    u3031:
  8575  00A2' EF00' F000'        	goto	l3429
  8576  00A6'                    u3030:
  8577  00A6' 2800'              	incf	___fladd@aexp^0,w,c
  8578  00A8' A4D8               	btfss	status,2,c
  8579  00AA' EF00' F000'        	goto	u3041
  8580  00AE' EF00' F000'        	goto	u3040
  8581  00B2'                    u3041:
  8582  00B2' EF00' F000'        	goto	l3425
  8583  00B6'                    u3040:
  8584  00B6' 0E00               	movlw	0
  8585  00B8' 6E00'              	movwf	___fladd@a^0,c
  8586  00BA' 0E00               	movlw	0
  8587  00BC' 6E00'              	movwf	(___fladd@a+1)^0,c
  8588  00BE' 0E00               	movlw	0
  8589  00C0' 6E00'              	movwf	(___fladd@a+2)^0,c
  8590  00C2' 0E00               	movlw	0
  8591  00C4' 6E00'              	movwf	(___fladd@a+3)^0,c
  8592  00C6'                    l3425:
  8593  00C6' 8E00'              	bsf	(___fladd@a+2)^0,7,c
  8594  00C8' 0E00               	movlw	0
  8595  00CA' 6E00'              	movwf	(___fladd@a+3)^0,c
  8596  00CC' EF00' F000'        	goto	l3431
  8597  00D0'                    l3429:
  8598  00D0' 0E00               	movlw	0
  8599  00D2' 6E00'              	movwf	___fladd@a^0,c
  8600  00D4' 0E00               	movlw	0
  8601  00D6' 6E00'              	movwf	(___fladd@a+1)^0,c
  8602  00D8' 0E00               	movlw	0
  8603  00DA' 6E00'              	movwf	(___fladd@a+2)^0,c
  8604  00DC' 0E00               	movlw	0
  8605  00DE' 6E00'              	movwf	(___fladd@a+3)^0,c
  8606  00E0'                    l3431:
  8607  00E0' 5000'              	movf	___fladd@bexp^0,w,c
  8608  00E2' 5C00'              	subwf	___fladd@aexp^0,w,c
  8609  00E4' B0D8               	btfsc	status,0,c
  8610  00E6' EF00' F000'        	goto	u3051
  8611  00EA' EF00' F000'        	goto	u3050
  8612  00EE'                    u3051:
  8613  00EE' EF00' F000'        	goto	l3467
  8614  00F2'                    u3050:
  8615  00F2' AC00'              	btfss	___fladd@signs^0,6,c
  8616  00F4' EF00' F000'        	goto	u3061
  8617  00F8' EF00' F000'        	goto	u3060
  8618  00FC'                    u3061:
  8619  00FC' EF00' F000'        	goto	l3437
  8620  0100'                    u3060:
  8621  0100' 0E80               	movlw	128
  8622  0102' 1A00'              	xorwf	___fladd@signs^0,f,c
  8623  0104'                    l3437:
  8624  0104' C012' F013'        	movff	___fladd@bexp,___fladd@grs
  8625  0108' C011' F012'        	movff	___fladd@aexp,___fladd@bexp
  8626  010C' C013' F011'        	movff	___fladd@grs,___fladd@aexp
  8627  0110' C004' F013'        	movff	___fladd@b,___fladd@grs
  8628  0114' C008' F004'        	movff	___fladd@a,___fladd@b
  8629  0118' C013' F008'        	movff	___fladd@grs,___fladd@a
  8630  011C' C005' F013'        	movff	___fladd@b+1,___fladd@grs
  8631  0120' C009' F005'        	movff	___fladd@a+1,___fladd@b+1
  8632  0124' C013' F009'        	movff	___fladd@grs,___fladd@a+1
  8633  0128' C006' F013'        	movff	___fladd@b+2,___fladd@grs
  8634  012C' C00A' F006'        	movff	___fladd@a+2,___fladd@b+2
  8635  0130' C013' F00A'        	movff	___fladd@grs,___fladd@a+2
  8636  0134' C007' F013'        	movff	___fladd@b+3,___fladd@grs
  8637  0138' C00B' F007'        	movff	___fladd@a+3,___fladd@b+3
  8638  013C' C013' F00B'        	movff	___fladd@grs,___fladd@a+3
  8639  0140'                    l3467:
  8640  0140' 0E00               	movlw	0
  8641  0142' 6E00'              	movwf	___fladd@grs^0,c
  8642  0144' 5000'              	movf	___fladd@bexp^0,w,c
  8643  0146' C011' F00C'        	movff	___fladd@aexp,??___fladd
  8644  014A' 6A00'              	clrf	(??___fladd+1)^0,c
  8645  014C' 5E00'              	subwf	??___fladd^0,f,c
  8646  014E' 0E00               	movlw	0
  8647  0150' 5A00'              	subwfb	(??___fladd+1)^0,f,c
  8648  0152' BE00'              	btfsc	(??___fladd+1)^0,7,c
  8649  0154' EF00' F000'        	goto	u3071
  8650  0158' 5000'              	movf	(??___fladd+1)^0,w,c
  8651  015A' E109               	bnz	u3070
  8652  015C' 0E1A               	movlw	26
  8653  015E' 5C00'              	subwf	??___fladd^0,w,c
  8654  0160' A0D8               	btfss	status,0,c
  8655  0162' EF00' F000'        	goto	u3071
  8656  0166' EF00' F000'        	goto	u3070
  8657  016A'                    u3071:
  8658  016A' EF00' F000'        	goto	l1017
  8659  016E'                    u3070:
  8660  016E' 5000'              	movf	___fladd@b^0,w,c
  8661  0170' 1000'              	iorwf	(___fladd@b+1)^0,w,c
  8662  0172' 1000'              	iorwf	(___fladd@b+2)^0,w,c
  8663  0174' 1000'              	iorwf	(___fladd@b+3)^0,w,c
  8664  0176' A4D8               	btfss	status,2,c
  8665  0178' EF00' F000'        	goto	u3081
  8666  017C' EF00' F000'        	goto	u3080
  8667  0180'                    u3081:
  8668  0180' 0E01               	movlw	1
  8669  0182' EF00' F000'        	goto	u3090
  8670  0186'                    u3080:
  8671  0186' 0E00               	movlw	0
  8672  0188'                    u3090:
  8673  0188' 6E00'              	movwf	___fladd@grs^0,c
  8674  018A' 0E00               	movlw	0
  8675  018C' 6E00'              	movwf	___fladd@b^0,c
  8676  018E' 0E00               	movlw	0
  8677  0190' 6E00'              	movwf	(___fladd@b+1)^0,c
  8678  0192' 0E00               	movlw	0
  8679  0194' 6E00'              	movwf	(___fladd@b+2)^0,c
  8680  0196' 0E00               	movlw	0
  8681  0198' 6E00'              	movwf	(___fladd@b+3)^0,c
  8682  019A' C011' F012'        	movff	___fladd@aexp,___fladd@bexp
  8683  019E' EF00' F000'        	goto	l1016
  8684  01A2'                    l1018:
  8685  01A2' A000'              	btfss	___fladd@grs^0,0,c
  8686  01A4' EF00' F000'        	goto	u3101
  8687  01A8' EF00' F000'        	goto	u3100
  8688  01AC'                    u3101:
  8689  01AC' EF00' F000'        	goto	l3479
  8690  01B0'                    u3100:
  8691  01B0' 90D8               	bcf	status,0,c
  8692  01B2' 3000'              	rrcf	___fladd@grs^0,w,c
  8693  01B4' 0901               	iorlw	1
  8694  01B6' 6E00'              	movwf	___fladd@grs^0,c
  8695  01B8' EF00' F000'        	goto	l3481
  8696  01BC'                    l3479:
  8697  01BC' 90D8               	bcf	status,0,c
  8698  01BE' 3200'              	rrcf	___fladd@grs^0,f,c
  8699  01C0'                    l3481:
  8700  01C0' A000'              	btfss	___fladd@b^0,0,c
  8701  01C2' EF00' F000'        	goto	u3111
  8702  01C6' EF00' F000'        	goto	u3110
  8703  01CA'                    u3111:
  8704  01CA' EF00' F000'        	goto	l3485
  8705  01CE'                    u3110:
  8706  01CE' 8E00'              	bsf	___fladd@grs^0,7,c
  8707  01D0'                    l3485:
  8708  01D0' 3400'              	rlcf	(___fladd@b+3)^0,w,c
  8709  01D2' 3200'              	rrcf	(___fladd@b+3)^0,f,c
  8710  01D4' 3200'              	rrcf	(___fladd@b+2)^0,f,c
  8711  01D6' 3200'              	rrcf	(___fladd@b+1)^0,f,c
  8712  01D8' 3200'              	rrcf	___fladd@b^0,f,c
  8713  01DA' 2A00'              	incf	___fladd@bexp^0,f,c
  8714  01DC'                    l1017:
  8715  01DC' 5000'              	movf	___fladd@aexp^0,w,c
  8716  01DE' 5C00'              	subwf	___fladd@bexp^0,w,c
  8717  01E0' A0D8               	btfss	status,0,c
  8718  01E2' EF00' F000'        	goto	u3121
  8719  01E6' EF00' F000'        	goto	u3120
  8720  01EA'                    u3121:
  8721  01EA' EF00' F000'        	goto	l1018
  8722  01EE'                    u3120:
  8723  01EE'                    l1016:
  8724  01EE' BC00'              	btfsc	___fladd@signs^0,6,c
  8725  01F0' EF00' F000'        	goto	u3131
  8726  01F4' EF00' F000'        	goto	u3130
  8727  01F8'                    u3131:
  8728  01F8' EF00' F000'        	goto	l3513
  8729  01FC'                    u3130:
  8730  01FC' 5000'              	movf	___fladd@bexp^0,w,c
  8731  01FE' A4D8               	btfss	status,2,c
  8732  0200' EF00' F000'        	goto	u3141
  8733  0204' EF00' F000'        	goto	u3140
  8734  0208'                    u3141:
  8735  0208' EF00' F000'        	goto	l3495
  8736  020C'                    u3140:
  8737  020C' 0E00               	movlw	0
  8738  020E' 6E00'              	movwf	?___fladd^0,c
  8739  0210' 0E00               	movlw	0
  8740  0212' 6E00'              	movwf	(?___fladd+1)^0,c
  8741  0214' 0E00               	movlw	0
  8742  0216' 6E00'              	movwf	(?___fladd+2)^0,c
  8743  0218' 0E00               	movlw	0
  8744  021A' 6E00'              	movwf	(?___fladd+3)^0,c
  8745  021C' EF00' F000'        	goto	l1025
  8746  0220'                    l3495:
  8747  0220' 5000'              	movf	___fladd@a^0,w,c
  8748  0222' 2600'              	addwf	___fladd@b^0,f,c
  8749  0224' 5000'              	movf	(___fladd@a+1)^0,w,c
  8750  0226' 2200'              	addwfc	(___fladd@b+1)^0,f,c
  8751  0228' 5000'              	movf	(___fladd@a+2)^0,w,c
  8752  022A' 2200'              	addwfc	(___fladd@b+2)^0,f,c
  8753  022C' 5000'              	movf	(___fladd@a+3)^0,w,c
  8754  022E' 2200'              	addwfc	(___fladd@b+3)^0,f,c
  8755  0230' A000'              	btfss	(___fladd@b+3)^0,0,c
  8756  0232' EF00' F000'        	goto	u3151
  8757  0236' EF00' F000'        	goto	u3150
  8758  023A'                    u3151:
  8759  023A' EF00' F000'        	goto	l3549
  8760  023E'                    u3150:
  8761  023E' A000'              	btfss	___fladd@grs^0,0,c
  8762  0240' EF00' F000'        	goto	u3161
  8763  0244' EF00' F000'        	goto	u3160
  8764  0248'                    u3161:
  8765  0248' EF00' F000'        	goto	l3503
  8766  024C'                    u3160:
  8767  024C' 90D8               	bcf	status,0,c
  8768  024E' 3000'              	rrcf	___fladd@grs^0,w,c
  8769  0250' 0901               	iorlw	1
  8770  0252' 6E00'              	movwf	___fladd@grs^0,c
  8771  0254' EF00' F000'        	goto	l3505
  8772  0258'                    l3503:
  8773  0258' 90D8               	bcf	status,0,c
  8774  025A' 3200'              	rrcf	___fladd@grs^0,f,c
  8775  025C'                    l3505:
  8776  025C' A000'              	btfss	___fladd@b^0,0,c
  8777  025E' EF00' F000'        	goto	u3171
  8778  0262' EF00' F000'        	goto	u3170
  8779  0266'                    u3171:
  8780  0266' EF00' F000'        	goto	l3509
  8781  026A'                    u3170:
  8782  026A' 8E00'              	bsf	___fladd@grs^0,7,c
  8783  026C'                    l3509:
  8784  026C' 3400'              	rlcf	(___fladd@b+3)^0,w,c
  8785  026E' 3200'              	rrcf	(___fladd@b+3)^0,f,c
  8786  0270' 3200'              	rrcf	(___fladd@b+2)^0,f,c
  8787  0272' 3200'              	rrcf	(___fladd@b+1)^0,f,c
  8788  0274' 3200'              	rrcf	___fladd@b^0,f,c
  8789  0276' 2A00'              	incf	___fladd@bexp^0,f,c
  8790  0278' EF00' F000'        	goto	l3549
  8791  027C'                    l3513:
  8792  027C' 5000'              	movf	___fladd@a^0,w,c
  8793  027E' 5C00'              	subwf	___fladd@b^0,w,c
  8794  0280' 5000'              	movf	(___fladd@a+1)^0,w,c
  8795  0282' 5800'              	subwfb	(___fladd@b+1)^0,w,c
  8796  0284' 5000'              	movf	(___fladd@a+2)^0,w,c
  8797  0286' 5800'              	subwfb	(___fladd@b+2)^0,w,c
  8798  0288' 5000'              	movf	(___fladd@b+3)^0,w,c
  8799  028A' 0A80               	xorlw	128
  8800  028C' 6E00'              	movwf	??___fladd^0,c
  8801  028E' 5000'              	movf	(___fladd@a+3)^0,w,c
  8802  0290' 0A80               	xorlw	128
  8803  0292' 5800'              	subwfb	??___fladd^0,w,c
  8804  0294' B0D8               	btfsc	status,0,c
  8805  0296' EF00' F000'        	goto	u3181
  8806  029A' EF00' F000'        	goto	u3180
  8807  029E'                    u3181:
  8808  029E' EF00' F000'        	goto	l3523
  8809  02A2'                    u3180:
  8810  02A2' 5000'              	movf	___fladd@b^0,w,c
  8811  02A4' 5C00'              	subwf	___fladd@a^0,w,c
  8812  02A6' 6E00'              	movwf	??___fladd^0,c
  8813  02A8' 5000'              	movf	(___fladd@b+1)^0,w,c
  8814  02AA' 5800'              	subwfb	(___fladd@a+1)^0,w,c
  8815  02AC' 6E00'              	movwf	(??___fladd+1)^0,c
  8816  02AE' 5000'              	movf	(___fladd@b+2)^0,w,c
  8817  02B0' 5800'              	subwfb	(___fladd@a+2)^0,w,c
  8818  02B2' 6E00'              	movwf	(??___fladd+2)^0,c
  8819  02B4' 5000'              	movf	(___fladd@b+3)^0,w,c
  8820  02B6' 5800'              	subwfb	(___fladd@a+3)^0,w,c
  8821  02B8' 6E00'              	movwf	(??___fladd+3)^0,c
  8822  02BA' 0EFF               	movlw	255
  8823  02BC' 2400'              	addwf	??___fladd^0,w,c
  8824  02BE' 6E00'              	movwf	___fladd@b^0,c
  8825  02C0' 0EFF               	movlw	255
  8826  02C2' 2000'              	addwfc	(??___fladd+1)^0,w,c
  8827  02C4' 6E00'              	movwf	(___fladd@b+1)^0,c
  8828  02C6' 0EFF               	movlw	255
  8829  02C8' 2000'              	addwfc	(??___fladd+2)^0,w,c
  8830  02CA' 6E00'              	movwf	(___fladd@b+2)^0,c
  8831  02CC' 0EFF               	movlw	255
  8832  02CE' 2000'              	addwfc	(??___fladd+3)^0,w,c
  8833  02D0' 6E00'              	movwf	(___fladd@b+3)^0,c
  8834  02D2' 0E80               	movlw	128
  8835  02D4' 1A00'              	xorwf	___fladd@signs^0,f,c
  8836  02D6' 6C00'              	negf	___fladd@grs^0,c
  8837  02D8' 5000'              	movf	___fladd@grs^0,w,c
  8838  02DA' A4D8               	btfss	status,2,c
  8839  02DC' EF00' F000'        	goto	u3191
  8840  02E0' EF00' F000'        	goto	u3190
  8841  02E4'                    u3191:
  8842  02E4' EF00' F000'        	goto	l1033
  8843  02E8'                    u3190:
  8844  02E8' 0E01               	movlw	1
  8845  02EA' 2600'              	addwf	___fladd@b^0,f,c
  8846  02EC' 0E00               	movlw	0
  8847  02EE' 2200'              	addwfc	(___fladd@b+1)^0,f,c
  8848  02F0' 2200'              	addwfc	(___fladd@b+2)^0,f,c
  8849  02F2' 2200'              	addwfc	(___fladd@b+3)^0,f,c
  8850  02F4' EF00' F000'        	goto	l1033
  8851  02F8'                    l3523:
  8852  02F8' 5000'              	movf	___fladd@a^0,w,c
  8853  02FA' 5E00'              	subwf	___fladd@b^0,f,c
  8854  02FC' 5000'              	movf	(___fladd@a+1)^0,w,c
  8855  02FE' 5A00'              	subwfb	(___fladd@b+1)^0,f,c
  8856  0300' 5000'              	movf	(___fladd@a+2)^0,w,c
  8857  0302' 5A00'              	subwfb	(___fladd@b+2)^0,f,c
  8858  0304' 5000'              	movf	(___fladd@a+3)^0,w,c
  8859  0306' 5A00'              	subwfb	(___fladd@b+3)^0,f,c
  8860  0308'                    l1033:
  8861  0308' 5000'              	movf	___fladd@b^0,w,c
  8862  030A' 1000'              	iorwf	(___fladd@b+1)^0,w,c
  8863  030C' 1000'              	iorwf	(___fladd@b+2)^0,w,c
  8864  030E' 1000'              	iorwf	(___fladd@b+3)^0,w,c
  8865  0310' A4D8               	btfss	status,2,c
  8866  0312' EF00' F000'        	goto	u3201
  8867  0316' EF00' F000'        	goto	u3200
  8868  031A'                    u3201:
  8869  031A' EF00' F000'        	goto	l3547
  8870  031E'                    u3200:
  8871  031E' 5000'              	movf	___fladd@grs^0,w,c
  8872  0320' A4D8               	btfss	status,2,c
  8873  0322' EF00' F000'        	goto	u3211
  8874  0326' EF00' F000'        	goto	u3210
  8875  032A'                    u3211:
  8876  032A' EF00' F000'        	goto	l3547
  8877  032E'                    u3210:
  8878  032E' 0E00               	movlw	0
  8879  0330' 6E00'              	movwf	?___fladd^0,c
  8880  0332' 0E00               	movlw	0
  8881  0334' 6E00'              	movwf	(?___fladd+1)^0,c
  8882  0336' 0E00               	movlw	0
  8883  0338' 6E00'              	movwf	(?___fladd+2)^0,c
  8884  033A' 0E00               	movlw	0
  8885  033C' 6E00'              	movwf	(?___fladd+3)^0,c
  8886  033E' EF00' F000'        	goto	l1025
  8887  0342'                    l3531:
  8888  0342' 90D8               	bcf	status,0,c
  8889  0344' 3600'              	rlcf	___fladd@b^0,f,c
  8890  0346' 3600'              	rlcf	(___fladd@b+1)^0,f,c
  8891  0348' 3600'              	rlcf	(___fladd@b+2)^0,f,c
  8892  034A' 3600'              	rlcf	(___fladd@b+3)^0,f,c
  8893  034C' AE00'              	btfss	___fladd@grs^0,7,c
  8894  034E' EF00' F000'        	goto	u3221
  8895  0352' EF00' F000'        	goto	u3220
  8896  0356'                    u3221:
  8897  0356' EF00' F000'        	goto	l3537
  8898  035A'                    u3220:
  8899  035A' 8000'              	bsf	___fladd@b^0,0,c
  8900  035C'                    l3537:
  8901  035C' A000'              	btfss	___fladd@grs^0,0,c
  8902  035E' EF00' F000'        	goto	u3231
  8903  0362' EF00' F000'        	goto	u3230
  8904  0366'                    u3231:
  8905  0366' EF00' F000'        	goto	l3541
  8906  036A'                    u3230:
  8907  036A' 80D8               	bsf	status,0,c
  8908  036C' 3600'              	rlcf	___fladd@grs^0,f,c
  8909  036E' EF00' F000'        	goto	l3543
  8910  0372'                    l3541:
  8911  0372' 90D8               	bcf	status,0,c
  8912  0374' 3600'              	rlcf	___fladd@grs^0,f,c
  8913  0376'                    l3543:
  8914  0376' 5000'              	movf	___fladd@bexp^0,w,c
  8915  0378' B4D8               	btfsc	status,2,c
  8916  037A' EF00' F000'        	goto	u3241
  8917  037E' EF00' F000'        	goto	u3240
  8918  0382'                    u3241:
  8919  0382' EF00' F000'        	goto	l3547
  8920  0386'                    u3240:
  8921  0386' 0600'              	decf	___fladd@bexp^0,f,c
  8922  0388'                    l3547:
  8923  0388' AE00'              	btfss	(___fladd@b+2)^0,7,c
  8924  038A' EF00' F000'        	goto	u3251
  8925  038E' EF00' F000'        	goto	u3250
  8926  0392'                    u3251:
  8927  0392' EF00' F000'        	goto	l3531
  8928  0396'                    u3250:
  8929  0396'                    l3549:
  8930  0396' 0E00               	movlw	0
  8931  0398' 6E00'              	movwf	___fladd@aexp^0,c
  8932  039A' AE00'              	btfss	___fladd@grs^0,7,c
  8933  039C' EF00' F000'        	goto	u3261
  8934  03A0' EF00' F000'        	goto	u3260
  8935  03A4'                    u3261:
  8936  03A4' EF00' F000'        	goto	l1042
  8937  03A8'                    u3260:
  8938  03A8' C013' F00C'        	movff	___fladd@grs,??___fladd
  8939  03AC' 0E7F               	movlw	127
  8940  03AE' 1600'              	andwf	??___fladd^0,f,c
  8941  03B0' B4D8               	btfsc	status,2,c
  8942  03B2' EF00' F000'        	goto	u3271
  8943  03B6' EF00' F000'        	goto	u3270
  8944  03BA'                    u3271:
  8945  03BA' EF00' F000'        	goto	l1043
  8946  03BE'                    u3270:
  8947  03BE'                    l3555:
  8948  03BE' 0E01               	movlw	1
  8949  03C0' 6E00'              	movwf	___fladd@aexp^0,c
  8950  03C2' EF00' F000'        	goto	l1042
  8951  03C6'                    l1043:
  8952  03C6' A000'              	btfss	___fladd@b^0,0,c
  8953  03C8' EF00' F000'        	goto	u3281
  8954  03CC' EF00' F000'        	goto	u3280
  8955  03D0'                    u3281:
  8956  03D0' EF00' F000'        	goto	l1042
  8957  03D4'                    u3280:
  8958  03D4' EF00' F000'        	goto	l3555
  8959  03D8'                    l1042:
  8960  03D8' 5000'              	movf	___fladd@aexp^0,w,c
  8961  03DA' B4D8               	btfsc	status,2,c
  8962  03DC' EF00' F000'        	goto	u3291
  8963  03E0' EF00' F000'        	goto	u3290
  8964  03E4'                    u3291:
  8965  03E4' EF00' F000'        	goto	l3567
  8966  03E8'                    u3290:
  8967  03E8' 0E01               	movlw	1
  8968  03EA' 2600'              	addwf	___fladd@b^0,f,c
  8969  03EC' 0E00               	movlw	0
  8970  03EE' 2200'              	addwfc	(___fladd@b+1)^0,f,c
  8971  03F0' 2200'              	addwfc	(___fladd@b+2)^0,f,c
  8972  03F2' 2200'              	addwfc	(___fladd@b+3)^0,f,c
  8973  03F4' A000'              	btfss	(___fladd@b+3)^0,0,c
  8974  03F6' EF00' F000'        	goto	u3301
  8975  03FA' EF00' F000'        	goto	u3300
  8976  03FE'                    u3301:
  8977  03FE' EF00' F000'        	goto	l3567
  8978  0402'                    u3300:
  8979  0402' C004' F00C'        	movff	___fladd@b,??___fladd
  8980  0406' C005' F00D'        	movff	___fladd@b+1,??___fladd+1
  8981  040A' C006' F00E'        	movff	___fladd@b+2,??___fladd+2
  8982  040E' C007' F00F'        	movff	___fladd@b+3,??___fladd+3
  8983  0412' 3400'              	rlcf	(??___fladd+3)^0,w,c
  8984  0414' 3200'              	rrcf	(??___fladd+3)^0,f,c
  8985  0416' 3200'              	rrcf	(??___fladd+2)^0,f,c
  8986  0418' 3200'              	rrcf	(??___fladd+1)^0,f,c
  8987  041A' 3200'              	rrcf	??___fladd^0,f,c
  8988  041C' C00C' F004'        	movff	??___fladd,___fladd@b
  8989  0420' C00D' F005'        	movff	??___fladd+1,___fladd@b+1
  8990  0424' C00E' F006'        	movff	??___fladd+2,___fladd@b+2
  8991  0428' C00F' F007'        	movff	??___fladd+3,___fladd@b+3
  8992  042C' 2800'              	incf	___fladd@bexp^0,w,c
  8993  042E' B4D8               	btfsc	status,2,c
  8994  0430' EF00' F000'        	goto	u3311
  8995  0434' EF00' F000'        	goto	u3310
  8996  0438'                    u3311:
  8997  0438' EF00' F000'        	goto	l3567
  8998  043C'                    u3310:
  8999  043C' 2A00'              	incf	___fladd@bexp^0,f,c
  9000  043E'                    l3567:
  9001  043E' 2800'              	incf	___fladd@bexp^0,w,c
  9002  0440' B4D8               	btfsc	status,2,c
  9003  0442' EF00' F000'        	goto	u3321
  9004  0446' EF00' F000'        	goto	u3320
  9005  044A'                    u3321:
  9006  044A' EF00' F000'        	goto	l3571
  9007  044E'                    u3320:
  9008  044E' 5000'              	movf	___fladd@bexp^0,w,c
  9009  0450' A4D8               	btfss	status,2,c
  9010  0452' EF00' F000'        	goto	u3331
  9011  0456' EF00' F000'        	goto	u3330
  9012  045A'                    u3331:
  9013  045A' EF00' F000'        	goto	l3575
  9014  045E'                    u3330:
  9015  045E'                    l3571:
  9016  045E' 0E00               	movlw	0
  9017  0460' 6E00'              	movwf	___fladd@b^0,c
  9018  0462' 0E00               	movlw	0
  9019  0464' 6E00'              	movwf	(___fladd@b+1)^0,c
  9020  0466' 0E00               	movlw	0
  9021  0468' 6E00'              	movwf	(___fladd@b+2)^0,c
  9022  046A' 0E00               	movlw	0
  9023  046C' 6E00'              	movwf	(___fladd@b+3)^0,c
  9024  046E' 5000'              	movf	___fladd@bexp^0,w,c
  9025  0470' A4D8               	btfss	status,2,c
  9026  0472' EF00' F000'        	goto	u3341
  9027  0476' EF00' F000'        	goto	u3340
  9028  047A'                    u3341:
  9029  047A' EF00' F000'        	goto	l3575
  9030  047E'                    u3340:
  9031  047E' 0E00               	movlw	0
  9032  0480' 6E00'              	movwf	___fladd@signs^0,c
  9033  0482'                    l3575:
  9034  0482' A000'              	btfss	___fladd@bexp^0,0,c
  9035  0484' EF00' F000'        	goto	u3351
  9036  0488' EF00' F000'        	goto	u3350
  9037  048C'                    u3351:
  9038  048C' EF00' F000'        	goto	l3579
  9039  0490'                    u3350:
  9040  0490' 8E00'              	bsf	(___fladd@b+2)^0,7,c
  9041  0492' EF00' F000'        	goto	l3581
  9042  0496'                    l3579:
  9043  0496' 9E00'              	bcf	(___fladd@b+2)^0,7,c
  9044  0498'                    l3581:
  9045  0498' 90D8               	bcf	status,0,c
  9046  049A' 3000'              	rrcf	___fladd@bexp^0,w,c
  9047  049C' 6E00'              	movwf	(___fladd@b+3)^0,c
  9048  049E' AE00'              	btfss	___fladd@signs^0,7,c
  9049  04A0' EF00' F000'        	goto	u3361
  9050  04A4' EF00' F000'        	goto	u3360
  9051  04A8'                    u3361:
  9052  04A8' EF00' F000'        	goto	l3587
  9053  04AC'                    u3360:
  9054  04AC' 8E00'              	bsf	(___fladd@b+3)^0,7,c
  9055  04AE'                    l3587:
  9056  04AE' C004' F004'        	movff	___fladd@b,?___fladd
  9057  04B2' C005' F005'        	movff	___fladd@b+1,?___fladd+1
  9058  04B6' C006' F006'        	movff	___fladd@b+2,?___fladd+2
  9059  04BA' C007' F007'        	movff	___fladd@b+3,?___fladd+3
  9060  04BE'                    l1025:
  9061  04BE' 0012               	return		;funcret
  9062  04C0'                    __end_of___fladd:
  9063                           	callstack 0
  9064                           
  9065 ;; *************** function ___flmul *****************
  9066 ;; Defined at:
  9067 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\sprcmul.c"
  9068 ;; Parameters:    Size  Location     Type
  9069 ;;  b               4   20[COMRAM] unsigned char 
  9070 ;;  a               4   24[COMRAM] unsigned char 
  9071 ;; Auto vars:     Size  Location     Type
  9072 ;;  prod            4   39[COMRAM] struct .
  9073 ;;  grs             4   33[COMRAM] unsigned long 
  9074 ;;  temp            2   43[COMRAM] struct .
  9075 ;;  bexp            1   38[COMRAM] unsigned char 
  9076 ;;  aexp            1   37[COMRAM] unsigned char 
  9077 ;;  sign            1   32[COMRAM] unsigned char 
  9078 ;; Return value:  Size  Location     Type
  9079 ;;                  4   20[COMRAM] unsigned char 
  9080 ;; Registers used:
  9081 ;;		wreg, status,2, status,0, prodl, prodh
  9082 ;; Tracked objects:
  9083 ;;		On entry : 0/0
  9084 ;;		On exit  : 0/0
  9085 ;;		Unchanged: 0/0
  9086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9087 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9088 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9089 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9090 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9091 ;;Total ram usage:       25 bytes
  9092 ;; Hardware stack levels used: 1
  9093 ;; Hardware stack levels required when called: 2
  9094 ;; This function calls:
  9095 ;;		Nothing
  9096 ;; This function is called by:
  9097 ;;		_colorDetect
  9098 ;;		_efgtoa
  9099 ;;		_turnLeft
  9100 ;;		_turnRight
  9101 ;;		_turnLeft_90
  9102 ;;		_turnRight_90
  9103 ;;		_turn_180
  9104 ;;		_turnRight_135
  9105 ;;		_turnLeft_135
  9106 ;; This function uses a non-reentrant model
  9107 ;;
  9108                           
  9109                           	psect	text37
  9110  0000'                    __ptext37:
  9111                           	callstack 0
  9112  0000'                    ___flmul:
  9113                           	callstack 24
  9114  0000' 5000'              	movf	(___flmul@b+3)^0,w,c
  9115  0002' 0B80               	andlw	128
  9116  0004' 6E00'              	movwf	___flmul@sign^0,c
  9117  0006' 5000'              	movf	(___flmul@b+3)^0,w,c
  9118  0008' 2400'              	addwf	(___flmul@b+3)^0,w,c
  9119  000A' 6E00'              	movwf	___flmul@bexp^0,c
  9120  000C' AE00'              	btfss	(___flmul@b+2)^0,7,c
  9121  000E' EF00' F000'        	goto	u3761
  9122  0012' EF00' F000'        	goto	u3760
  9123  0016'                    u3761:
  9124  0016' EF00' F000'        	goto	l3827
  9125  001A'                    u3760:
  9126  001A' 8000'              	bsf	___flmul@bexp^0,0,c
  9127  001C'                    l3827:
  9128  001C' 5000'              	movf	___flmul@bexp^0,w,c
  9129  001E' B4D8               	btfsc	status,2,c
  9130  0020' EF00' F000'        	goto	u3771
  9131  0024' EF00' F000'        	goto	u3770
  9132  0028'                    u3771:
  9133  0028' EF00' F000'        	goto	l3835
  9134  002C'                    u3770:
  9135  002C' 2800'              	incf	___flmul@bexp^0,w,c
  9136  002E' A4D8               	btfss	status,2,c
  9137  0030' EF00' F000'        	goto	u3781
  9138  0034' EF00' F000'        	goto	u3780
  9139  0038'                    u3781:
  9140  0038' EF00' F000'        	goto	l3833
  9141  003C'                    u3780:
  9142  003C' 0E00               	movlw	0
  9143  003E' 6E00'              	movwf	___flmul@b^0,c
  9144  0040' 0E00               	movlw	0
  9145  0042' 6E00'              	movwf	(___flmul@b+1)^0,c
  9146  0044' 0E00               	movlw	0
  9147  0046' 6E00'              	movwf	(___flmul@b+2)^0,c
  9148  0048' 0E00               	movlw	0
  9149  004A' 6E00'              	movwf	(___flmul@b+3)^0,c
  9150  004C'                    l3833:
  9151  004C' 8E00'              	bsf	(___flmul@b+2)^0,7,c
  9152  004E' EF00' F000'        	goto	l3837
  9153  0052'                    l3835:
  9154  0052' 0E00               	movlw	0
  9155  0054' 6E00'              	movwf	___flmul@b^0,c
  9156  0056' 0E00               	movlw	0
  9157  0058' 6E00'              	movwf	(___flmul@b+1)^0,c
  9158  005A' 0E00               	movlw	0
  9159  005C' 6E00'              	movwf	(___flmul@b+2)^0,c
  9160  005E' 0E00               	movlw	0
  9161  0060' 6E00'              	movwf	(___flmul@b+3)^0,c
  9162  0062'                    l3837:
  9163  0062' 5000'              	movf	(___flmul@a+3)^0,w,c
  9164  0064' 0B80               	andlw	128
  9165  0066' 1A00'              	xorwf	___flmul@sign^0,f,c
  9166  0068' 5000'              	movf	(___flmul@a+3)^0,w,c
  9167  006A' 2400'              	addwf	(___flmul@a+3)^0,w,c
  9168  006C' 6E00'              	movwf	___flmul@aexp^0,c
  9169  006E' AE00'              	btfss	(___flmul@a+2)^0,7,c
  9170  0070' EF00' F000'        	goto	u3791
  9171  0074' EF00' F000'        	goto	u3790
  9172  0078'                    u3791:
  9173  0078' EF00' F000'        	goto	l3845
  9174  007C'                    u3790:
  9175  007C' 8000'              	bsf	___flmul@aexp^0,0,c
  9176  007E'                    l3845:
  9177  007E' 5000'              	movf	___flmul@aexp^0,w,c
  9178  0080' B4D8               	btfsc	status,2,c
  9179  0082' EF00' F000'        	goto	u3801
  9180  0086' EF00' F000'        	goto	u3800
  9181  008A'                    u3801:
  9182  008A' EF00' F000'        	goto	l3853
  9183  008E'                    u3800:
  9184  008E' 2800'              	incf	___flmul@aexp^0,w,c
  9185  0090' A4D8               	btfss	status,2,c
  9186  0092' EF00' F000'        	goto	u3811
  9187  0096' EF00' F000'        	goto	u3810
  9188  009A'                    u3811:
  9189  009A' EF00' F000'        	goto	l3851
  9190  009E'                    u3810:
  9191  009E' 0E00               	movlw	0
  9192  00A0' 6E00'              	movwf	___flmul@a^0,c
  9193  00A2' 0E00               	movlw	0
  9194  00A4' 6E00'              	movwf	(___flmul@a+1)^0,c
  9195  00A6' 0E00               	movlw	0
  9196  00A8' 6E00'              	movwf	(___flmul@a+2)^0,c
  9197  00AA' 0E00               	movlw	0
  9198  00AC' 6E00'              	movwf	(___flmul@a+3)^0,c
  9199  00AE'                    l3851:
  9200  00AE' 8E00'              	bsf	(___flmul@a+2)^0,7,c
  9201  00B0' EF00' F000'        	goto	l1102
  9202  00B4'                    l3853:
  9203  00B4' 0E00               	movlw	0
  9204  00B6' 6E00'              	movwf	___flmul@a^0,c
  9205  00B8' 0E00               	movlw	0
  9206  00BA' 6E00'              	movwf	(___flmul@a+1)^0,c
  9207  00BC' 0E00               	movlw	0
  9208  00BE' 6E00'              	movwf	(___flmul@a+2)^0,c
  9209  00C0' 0E00               	movlw	0
  9210  00C2' 6E00'              	movwf	(___flmul@a+3)^0,c
  9211  00C4'                    l1102:
  9212  00C4' 5000'              	movf	___flmul@aexp^0,w,c
  9213  00C6' B4D8               	btfsc	status,2,c
  9214  00C8' EF00' F000'        	goto	u3821
  9215  00CC' EF00' F000'        	goto	u3820
  9216  00D0'                    u3821:
  9217  00D0' EF00' F000'        	goto	l3857
  9218  00D4'                    u3820:
  9219  00D4' 5000'              	movf	___flmul@bexp^0,w,c
  9220  00D6' A4D8               	btfss	status,2,c
  9221  00D8' EF00' F000'        	goto	u3831
  9222  00DC' EF00' F000'        	goto	u3830
  9223  00E0'                    u3831:
  9224  00E0' EF00' F000'        	goto	l3861
  9225  00E4'                    u3830:
  9226  00E4'                    l3857:
  9227  00E4' 0E00               	movlw	0
  9228  00E6' 6E00'              	movwf	?___flmul^0,c
  9229  00E8' 0E00               	movlw	0
  9230  00EA' 6E00'              	movwf	(?___flmul+1)^0,c
  9231  00EC' 0E00               	movlw	0
  9232  00EE' 6E00'              	movwf	(?___flmul+2)^0,c
  9233  00F0' 0E00               	movlw	0
  9234  00F2' 6E00'              	movwf	(?___flmul+3)^0,c
  9235  00F4' EF00' F000'        	goto	l1106
  9236  00F8'                    l3861:
  9237  00F8' 5000'              	movf	(___flmul@a+2)^0,w,c
  9238  00FA' 0200'              	mulwf	___flmul@b^0,c
  9239  00FC' CFF3 F02B'         	movff	prodl,___flmul@temp
  9240  0100' CFF4 F02C'         	movff	prodh,___flmul@temp+1
  9241  0104' 5000'              	movf	___flmul@temp^0,w,c
  9242  0106' 6E00'              	movwf	___flmul@grs^0,c
  9243  0108' 6A00'              	clrf	(___flmul@grs+1)^0,c
  9244  010A' 6A00'              	clrf	(___flmul@grs+2)^0,c
  9245  010C' 6A00'              	clrf	(___flmul@grs+3)^0,c
  9246  010E' 5000'              	movf	(___flmul@temp+1)^0,w,c
  9247  0110' 6E00'              	movwf	___flmul@prod^0,c
  9248  0112' 6A00'              	clrf	(___flmul@prod+1)^0,c
  9249  0114' 6A00'              	clrf	(___flmul@prod+2)^0,c
  9250  0116' 6A00'              	clrf	(___flmul@prod+3)^0,c
  9251  0118' 5000'              	movf	(___flmul@a+1)^0,w,c
  9252  011A' 0200'              	mulwf	(___flmul@b+1)^0,c
  9253  011C' CFF3 F02B'         	movff	prodl,___flmul@temp
  9254  0120' CFF4 F02C'         	movff	prodh,___flmul@temp+1
  9255  0124' 5000'              	movf	___flmul@temp^0,w,c
  9256  0126' 2600'              	addwf	___flmul@grs^0,f,c
  9257  0128' 0E00               	movlw	0
  9258  012A' 2200'              	addwfc	(___flmul@grs+1)^0,f,c
  9259  012C' 2200'              	addwfc	(___flmul@grs+2)^0,f,c
  9260  012E' 2200'              	addwfc	(___flmul@grs+3)^0,f,c
  9261  0130' 5000'              	movf	(___flmul@temp+1)^0,w,c
  9262  0132' 2600'              	addwf	___flmul@prod^0,f,c
  9263  0134' 0E00               	movlw	0
  9264  0136' 2200'              	addwfc	(___flmul@prod+1)^0,f,c
  9265  0138' 2200'              	addwfc	(___flmul@prod+2)^0,f,c
  9266  013A' 2200'              	addwfc	(___flmul@prod+3)^0,f,c
  9267  013C' 5000'              	movf	___flmul@a^0,w,c
  9268  013E' 0200'              	mulwf	(___flmul@b+2)^0,c
  9269  0140' CFF3 F02B'         	movff	prodl,___flmul@temp
  9270  0144' CFF4 F02C'         	movff	prodh,___flmul@temp+1
  9271  0148' 5000'              	movf	___flmul@temp^0,w,c
  9272  014A' 2600'              	addwf	___flmul@grs^0,f,c
  9273  014C' 0E00               	movlw	0
  9274  014E' 2200'              	addwfc	(___flmul@grs+1)^0,f,c
  9275  0150' 2200'              	addwfc	(___flmul@grs+2)^0,f,c
  9276  0152' 2200'              	addwfc	(___flmul@grs+3)^0,f,c
  9277  0154' 5000'              	movf	(___flmul@temp+1)^0,w,c
  9278  0156' 2600'              	addwf	___flmul@prod^0,f,c
  9279  0158' 0E00               	movlw	0
  9280  015A' 2200'              	addwfc	(___flmul@prod+1)^0,f,c
  9281  015C' 2200'              	addwfc	(___flmul@prod+2)^0,f,c
  9282  015E' 2200'              	addwfc	(___flmul@prod+3)^0,f,c
  9283  0160' C023' F024'        	movff	___flmul@grs+2,___flmul@grs+3
  9284  0164' C022' F023'        	movff	___flmul@grs+1,___flmul@grs+2
  9285  0168' C021' F022'        	movff	___flmul@grs,___flmul@grs+1
  9286  016C' 6A00'              	clrf	___flmul@grs^0,c
  9287  016E' 5000'              	movf	___flmul@a^0,w,c
  9288  0170' 0200'              	mulwf	(___flmul@b+1)^0,c
  9289  0172' CFF3 F02B'         	movff	prodl,___flmul@temp
  9290  0176' CFF4 F02C'         	movff	prodh,___flmul@temp+1
  9291  017A' 5000'              	movf	___flmul@temp^0,w,c
  9292  017C' 2600'              	addwf	___flmul@grs^0,f,c
  9293  017E' 5000'              	movf	(___flmul@temp+1)^0,w,c
  9294  0180' 2200'              	addwfc	(___flmul@grs+1)^0,f,c
  9295  0182' 0E00               	movlw	0
  9296  0184' 2200'              	addwfc	(___flmul@grs+2)^0,f,c
  9297  0186' 0E00               	movlw	0
  9298  0188' 2200'              	addwfc	(___flmul@grs+3)^0,f,c
  9299  018A' 5000'              	movf	(___flmul@a+1)^0,w,c
  9300  018C' 0200'              	mulwf	___flmul@b^0,c
  9301  018E' CFF3 F02B'         	movff	prodl,___flmul@temp
  9302  0192' CFF4 F02C'         	movff	prodh,___flmul@temp+1
  9303  0196' 5000'              	movf	___flmul@temp^0,w,c
  9304  0198' 2600'              	addwf	___flmul@grs^0,f,c
  9305  019A' 5000'              	movf	(___flmul@temp+1)^0,w,c
  9306  019C' 2200'              	addwfc	(___flmul@grs+1)^0,f,c
  9307  019E' 0E00               	movlw	0
  9308  01A0' 2200'              	addwfc	(___flmul@grs+2)^0,f,c
  9309  01A2' 0E00               	movlw	0
  9310  01A4' 2200'              	addwfc	(___flmul@grs+3)^0,f,c
  9311  01A6' C023' F024'        	movff	___flmul@grs+2,___flmul@grs+3
  9312  01AA' C022' F023'        	movff	___flmul@grs+1,___flmul@grs+2
  9313  01AE' C021' F022'        	movff	___flmul@grs,___flmul@grs+1
  9314  01B2' 6A00'              	clrf	___flmul@grs^0,c
  9315  01B4' 5000'              	movf	___flmul@a^0,w,c
  9316  01B6' 0200'              	mulwf	___flmul@b^0,c
  9317  01B8' CFF3 F02B'         	movff	prodl,___flmul@temp
  9318  01BC' CFF4 F02C'         	movff	prodh,___flmul@temp+1
  9319  01C0' 5000'              	movf	___flmul@temp^0,w,c
  9320  01C2' 2600'              	addwf	___flmul@grs^0,f,c
  9321  01C4' 5000'              	movf	(___flmul@temp+1)^0,w,c
  9322  01C6' 2200'              	addwfc	(___flmul@grs+1)^0,f,c
  9323  01C8' 0E00               	movlw	0
  9324  01CA' 2200'              	addwfc	(___flmul@grs+2)^0,f,c
  9325  01CC' 0E00               	movlw	0
  9326  01CE' 2200'              	addwfc	(___flmul@grs+3)^0,f,c
  9327  01D0' 5000'              	movf	(___flmul@a+2)^0,w,c
  9328  01D2' 0200'              	mulwf	(___flmul@b+1)^0,c
  9329  01D4' CFF3 F02B'         	movff	prodl,___flmul@temp
  9330  01D8' CFF4 F02C'         	movff	prodh,___flmul@temp+1
  9331  01DC' 5000'              	movf	___flmul@temp^0,w,c
  9332  01DE' 2600'              	addwf	___flmul@prod^0,f,c
  9333  01E0' 5000'              	movf	(___flmul@temp+1)^0,w,c
  9334  01E2' 2200'              	addwfc	(___flmul@prod+1)^0,f,c
  9335  01E4' 0E00               	movlw	0
  9336  01E6' 2200'              	addwfc	(___flmul@prod+2)^0,f,c
  9337  01E8' 0E00               	movlw	0
  9338  01EA' 2200'              	addwfc	(___flmul@prod+3)^0,f,c
  9339  01EC' 5000'              	movf	(___flmul@a+1)^0,w,c
  9340  01EE' 0200'              	mulwf	(___flmul@b+2)^0,c
  9341  01F0' CFF3 F02B'         	movff	prodl,___flmul@temp
  9342  01F4' CFF4 F02C'         	movff	prodh,___flmul@temp+1
  9343  01F8' 5000'              	movf	___flmul@temp^0,w,c
  9344  01FA' 2600'              	addwf	___flmul@prod^0,f,c
  9345  01FC' 5000'              	movf	(___flmul@temp+1)^0,w,c
  9346  01FE' 2200'              	addwfc	(___flmul@prod+1)^0,f,c
  9347  0200' 0E00               	movlw	0
  9348  0202' 2200'              	addwfc	(___flmul@prod+2)^0,f,c
  9349  0204' 0E00               	movlw	0
  9350  0206' 2200'              	addwfc	(___flmul@prod+3)^0,f,c
  9351  0208' 5000'              	movf	(___flmul@a+2)^0,w,c
  9352  020A' 0200'              	mulwf	(___flmul@b+2)^0,c
  9353  020C' CFF3 F02B'         	movff	prodl,___flmul@temp
  9354  0210' CFF4 F02C'         	movff	prodh,___flmul@temp+1
  9355  0214' 5000'              	movf	___flmul@temp^0,w,c
  9356  0216' 6E00'              	movwf	??___flmul^0,c
  9357  0218' 5000'              	movf	(___flmul@temp+1)^0,w,c
  9358  021A' 6E00'              	movwf	(??___flmul+1)^0,c
  9359  021C' 6A00'              	clrf	(??___flmul+2)^0,c
  9360  021E' 6A00'              	clrf	(??___flmul+3)^0,c
  9361  0220' C01E' F01F'        	movff	??___flmul+2,??___flmul+3
  9362  0224' C01D' F01E'        	movff	??___flmul+1,??___flmul+2
  9363  0228' C01C' F01D'        	movff	??___flmul,??___flmul+1
  9364  022C' 6A00'              	clrf	??___flmul^0,c
  9365  022E' 5000'              	movf	??___flmul^0,w,c
  9366  0230' 2600'              	addwf	___flmul@prod^0,f,c
  9367  0232' 5000'              	movf	(??___flmul+1)^0,w,c
  9368  0234' 2200'              	addwfc	(___flmul@prod+1)^0,f,c
  9369  0236' 5000'              	movf	(??___flmul+2)^0,w,c
  9370  0238' 2200'              	addwfc	(___flmul@prod+2)^0,f,c
  9371  023A' 5000'              	movf	(??___flmul+3)^0,w,c
  9372  023C' 2200'              	addwfc	(___flmul@prod+3)^0,f,c
  9373  023E' C021' F01C'        	movff	___flmul@grs,??___flmul
  9374  0242' C022' F01D'        	movff	___flmul@grs+1,??___flmul+1
  9375  0246' C023' F01E'        	movff	___flmul@grs+2,??___flmul+2
  9376  024A' C024' F01F'        	movff	___flmul@grs+3,??___flmul+3
  9377  024E' 0E19               	movlw	25
  9378  0250' EF00' F000'        	goto	u3840
  9379  0254'                    u3845:
  9380  0254' 90D8               	bcf	status,0,c
  9381  0256' 3200'              	rrcf	(??___flmul+3)^0,f,c
  9382  0258' 3200'              	rrcf	(??___flmul+2)^0,f,c
  9383  025A' 3200'              	rrcf	(??___flmul+1)^0,f,c
  9384  025C' 3200'              	rrcf	??___flmul^0,f,c
  9385  025E'                    u3840:
  9386  025E' 2EE8               	decfsz	wreg,f,c
  9387  0260' EF00' F000'        	goto	u3845
  9388  0264' 5000'              	movf	??___flmul^0,w,c
  9389  0266' 2600'              	addwf	___flmul@prod^0,f,c
  9390  0268' 5000'              	movf	(??___flmul+1)^0,w,c
  9391  026A' 2200'              	addwfc	(___flmul@prod+1)^0,f,c
  9392  026C' 5000'              	movf	(??___flmul+2)^0,w,c
  9393  026E' 2200'              	addwfc	(___flmul@prod+2)^0,f,c
  9394  0270' 5000'              	movf	(??___flmul+3)^0,w,c
  9395  0272' 2200'              	addwfc	(___flmul@prod+3)^0,f,c
  9396  0274' C023' F024'        	movff	___flmul@grs+2,___flmul@grs+3
  9397  0278' C022' F023'        	movff	___flmul@grs+1,___flmul@grs+2
  9398  027C' C021' F022'        	movff	___flmul@grs,___flmul@grs+1
  9399  0280' 6A00'              	clrf	___flmul@grs^0,c
  9400  0282' 5000'              	movf	___flmul@aexp^0,w,c
  9401  0284' C026' F01C'        	movff	___flmul@bexp,??___flmul
  9402  0288' 6A00'              	clrf	(??___flmul+1)^0,c
  9403  028A' 2600'              	addwf	??___flmul^0,f,c
  9404  028C' 0E00               	movlw	0
  9405  028E' 2200'              	addwfc	(??___flmul+1)^0,f,c
  9406  0290' 0E82               	movlw	130
  9407  0292' 2400'              	addwf	??___flmul^0,w,c
  9408  0294' 6E00'              	movwf	___flmul@temp^0,c
  9409  0296' 0EFF               	movlw	255
  9410  0298' 2000'              	addwfc	(??___flmul+1)^0,w,c
  9411  029A' 6E00'              	movwf	(___flmul@temp+1)^0,c
  9412  029C' EF00' F000'        	goto	l3909
  9413  02A0'                    l3903:
  9414  02A0' 90D8               	bcf	status,0,c
  9415  02A2' 3600'              	rlcf	___flmul@prod^0,f,c
  9416  02A4' 3600'              	rlcf	(___flmul@prod+1)^0,f,c
  9417  02A6' 3600'              	rlcf	(___flmul@prod+2)^0,f,c
  9418  02A8' 3600'              	rlcf	(___flmul@prod+3)^0,f,c
  9419  02AA' AE00'              	btfss	(___flmul@grs+3)^0,7,c
  9420  02AC' EF00' F000'        	goto	u3851
  9421  02B0' EF00' F000'        	goto	u3850
  9422  02B4'                    u3851:
  9423  02B4' EF00' F000'        	goto	l1109
  9424  02B8'                    u3850:
  9425  02B8' 8000'              	bsf	___flmul@prod^0,0,c
  9426  02BA'                    l1109:
  9427  02BA' 90D8               	bcf	status,0,c
  9428  02BC' 3600'              	rlcf	___flmul@grs^0,f,c
  9429  02BE' 3600'              	rlcf	(___flmul@grs+1)^0,f,c
  9430  02C0' 3600'              	rlcf	(___flmul@grs+2)^0,f,c
  9431  02C2' 3600'              	rlcf	(___flmul@grs+3)^0,f,c
  9432  02C4' 0600'              	decf	___flmul@temp^0,f,c
  9433  02C6' A0D8               	btfss	status,0,c
  9434  02C8' 0600'              	decf	(___flmul@temp+1)^0,f,c
  9435  02CA'                    l3909:
  9436  02CA' AE00'              	btfss	(___flmul@prod+2)^0,7,c
  9437  02CC' EF00' F000'        	goto	u3861
  9438  02D0' EF00' F000'        	goto	u3860
  9439  02D4'                    u3861:
  9440  02D4' EF00' F000'        	goto	l3903
  9441  02D8'                    u3860:
  9442  02D8' 0E00               	movlw	0
  9443  02DA' 6E00'              	movwf	___flmul@aexp^0,c
  9444  02DC' AE00'              	btfss	(___flmul@grs+3)^0,7,c
  9445  02DE' EF00' F000'        	goto	u3871
  9446  02E2' EF00' F000'        	goto	u3870
  9447  02E6'                    u3871:
  9448  02E6' EF00' F000'        	goto	l1111
  9449  02EA'                    u3870:
  9450  02EA' 0EFF               	movlw	255
  9451  02EC' 1400'              	andwf	___flmul@grs^0,w,c
  9452  02EE' 6E00'              	movwf	??___flmul^0,c
  9453  02F0' 0EFF               	movlw	255
  9454  02F2' 1400'              	andwf	(___flmul@grs+1)^0,w,c
  9455  02F4' 6E00'              	movwf	(??___flmul+1)^0,c
  9456  02F6' 0EFF               	movlw	255
  9457  02F8' 1400'              	andwf	(___flmul@grs+2)^0,w,c
  9458  02FA' 6E00'              	movwf	(??___flmul+2)^0,c
  9459  02FC' 0E7F               	movlw	127
  9460  02FE' 1400'              	andwf	(___flmul@grs+3)^0,w,c
  9461  0300' 6E00'              	movwf	(??___flmul+3)^0,c
  9462  0302' 5000'              	movf	??___flmul^0,w,c
  9463  0304' 1000'              	iorwf	(??___flmul+1)^0,w,c
  9464  0306' 1000'              	iorwf	(??___flmul+2)^0,w,c
  9465  0308' 1000'              	iorwf	(??___flmul+3)^0,w,c
  9466  030A' B4D8               	btfsc	status,2,c
  9467  030C' EF00' F000'        	goto	u3881
  9468  0310' EF00' F000'        	goto	u3880
  9469  0314'                    u3881:
  9470  0314' EF00' F000'        	goto	l1112
  9471  0318'                    u3880:
  9472  0318'                    l3917:
  9473  0318' 0E01               	movlw	1
  9474  031A' 6E00'              	movwf	___flmul@aexp^0,c
  9475  031C' EF00' F000'        	goto	l1111
  9476  0320'                    l1112:
  9477  0320' A000'              	btfss	___flmul@prod^0,0,c
  9478  0322' EF00' F000'        	goto	u3891
  9479  0326' EF00' F000'        	goto	u3890
  9480  032A'                    u3891:
  9481  032A' EF00' F000'        	goto	l1111
  9482  032E'                    u3890:
  9483  032E' EF00' F000'        	goto	l3917
  9484  0332'                    l1111:
  9485  0332' 5000'              	movf	___flmul@aexp^0,w,c
  9486  0334' B4D8               	btfsc	status,2,c
  9487  0336' EF00' F000'        	goto	u3901
  9488  033A' EF00' F000'        	goto	u3900
  9489  033E'                    u3901:
  9490  033E' EF00' F000'        	goto	l3929
  9491  0342'                    u3900:
  9492  0342' 0E01               	movlw	1
  9493  0344' 2600'              	addwf	___flmul@prod^0,f,c
  9494  0346' 0E00               	movlw	0
  9495  0348' 2200'              	addwfc	(___flmul@prod+1)^0,f,c
  9496  034A' 2200'              	addwfc	(___flmul@prod+2)^0,f,c
  9497  034C' 2200'              	addwfc	(___flmul@prod+3)^0,f,c
  9498  034E' A000'              	btfss	(___flmul@prod+3)^0,0,c
  9499  0350' EF00' F000'        	goto	u3911
  9500  0354' EF00' F000'        	goto	u3910
  9501  0358'                    u3911:
  9502  0358' EF00' F000'        	goto	l3929
  9503  035C'                    u3910:
  9504  035C' C027' F01C'        	movff	___flmul@prod,??___flmul
  9505  0360' C028' F01D'        	movff	___flmul@prod+1,??___flmul+1
  9506  0364' C029' F01E'        	movff	___flmul@prod+2,??___flmul+2
  9507  0368' C02A' F01F'        	movff	___flmul@prod+3,??___flmul+3
  9508  036C' 3400'              	rlcf	(??___flmul+3)^0,w,c
  9509  036E' 3200'              	rrcf	(??___flmul+3)^0,f,c
  9510  0370' 3200'              	rrcf	(??___flmul+2)^0,f,c
  9511  0372' 3200'              	rrcf	(??___flmul+1)^0,f,c
  9512  0374' 3200'              	rrcf	??___flmul^0,f,c
  9513  0376' C01C' F027'        	movff	??___flmul,___flmul@prod
  9514  037A' C01D' F028'        	movff	??___flmul+1,___flmul@prod+1
  9515  037E' C01E' F029'        	movff	??___flmul+2,___flmul@prod+2
  9516  0382' C01F' F02A'        	movff	??___flmul+3,___flmul@prod+3
  9517  0386' 4A00'              	infsnz	___flmul@temp^0,f,c
  9518  0388' 2A00'              	incf	(___flmul@temp+1)^0,f,c
  9519  038A'                    l3929:
  9520  038A' BE00'              	btfsc	(___flmul@temp+1)^0,7,c
  9521  038C' EF00' F000'        	goto	u3921
  9522  0390' 5000'              	movf	(___flmul@temp+1)^0,w,c
  9523  0392' E108               	bnz	u3920
  9524  0394' 2800'              	incf	___flmul@temp^0,w,c
  9525  0396' A0D8               	btfss	status,0,c
  9526  0398' EF00' F000'        	goto	u3921
  9527  039C' EF00' F000'        	goto	u3920
  9528  03A0'                    u3921:
  9529  03A0' EF00' F000'        	goto	l3933
  9530  03A4'                    u3920:
  9531  03A4' 0E00               	movlw	0
  9532  03A6' 6E00'              	movwf	___flmul@prod^0,c
  9533  03A8' 0E00               	movlw	0
  9534  03AA' 6E00'              	movwf	(___flmul@prod+1)^0,c
  9535  03AC' 0E80               	movlw	128
  9536  03AE' 6E00'              	movwf	(___flmul@prod+2)^0,c
  9537  03B0' 0E7F               	movlw	127
  9538  03B2' 6E00'              	movwf	(___flmul@prod+3)^0,c
  9539  03B4' EF00' F000'        	goto	l3945
  9540  03B8'                    l3933:
  9541  03B8' BE00'              	btfsc	(___flmul@temp+1)^0,7,c
  9542  03BA' EF00' F000'        	goto	u3930
  9543  03BE' 5000'              	movf	(___flmul@temp+1)^0,w,c
  9544  03C0' E106               	bnz	u3931
  9545  03C2' 0400'              	decf	___flmul@temp^0,w,c
  9546  03C4' B0D8               	btfsc	status,0,c
  9547  03C6' EF00' F000'        	goto	u3931
  9548  03CA' EF00' F000'        	goto	u3930
  9549  03CE'                    u3931:
  9550  03CE' EF00' F000'        	goto	l1119
  9551  03D2'                    u3930:
  9552  03D2' 0E00               	movlw	0
  9553  03D4' 6E00'              	movwf	___flmul@prod^0,c
  9554  03D6' 0E00               	movlw	0
  9555  03D8' 6E00'              	movwf	(___flmul@prod+1)^0,c
  9556  03DA' 0E00               	movlw	0
  9557  03DC' 6E00'              	movwf	(___flmul@prod+2)^0,c
  9558  03DE' 0E00               	movlw	0
  9559  03E0' 6E00'              	movwf	(___flmul@prod+3)^0,c
  9560  03E2' 0E00               	movlw	0
  9561  03E4' 6E00'              	movwf	___flmul@sign^0,c
  9562  03E6' EF00' F000'        	goto	l3945
  9563  03EA'                    l1119:
  9564  03EA' C02B' F026'        	movff	___flmul@temp,___flmul@bexp
  9565  03EE' 0EFF               	movlw	255
  9566  03F0' 1600'              	andwf	___flmul@prod^0,f,c
  9567  03F2' 0EFF               	movlw	255
  9568  03F4' 1600'              	andwf	(___flmul@prod+1)^0,f,c
  9569  03F6' 0E7F               	movlw	127
  9570  03F8' 1600'              	andwf	(___flmul@prod+2)^0,f,c
  9571  03FA' 0E00               	movlw	0
  9572  03FC' 1600'              	andwf	(___flmul@prod+3)^0,f,c
  9573  03FE' A000'              	btfss	___flmul@bexp^0,0,c
  9574  0400' EF00' F000'        	goto	u3941
  9575  0404' EF00' F000'        	goto	u3940
  9576  0408'                    u3941:
  9577  0408' EF00' F000'        	goto	l3943
  9578  040C'                    u3940:
  9579  040C' 8E00'              	bsf	(___flmul@prod+2)^0,7,c
  9580  040E'                    l3943:
  9581  040E' 90D8               	bcf	status,0,c
  9582  0410' 3000'              	rrcf	___flmul@bexp^0,w,c
  9583  0412' 6E00'              	movwf	(___flmul@prod+3)^0,c
  9584  0414'                    l3945:
  9585  0414' 5000'              	movf	___flmul@sign^0,w,c
  9586  0416' 1200'              	iorwf	(___flmul@prod+3)^0,f,c
  9587  0418' C027' F014'        	movff	___flmul@prod,?___flmul
  9588  041C' C028' F015'        	movff	___flmul@prod+1,?___flmul+1
  9589  0420' C029' F016'        	movff	___flmul@prod+2,?___flmul+2
  9590  0424' C02A' F017'        	movff	___flmul@prod+3,?___flmul+3
  9591  0428'                    l1106:
  9592  0428' 0012               	return		;funcret
  9593  042A'                    __end_of___flmul:
  9594                           	callstack 0
  9595                           
  9596 ;; *************** function ___flge *****************
  9597 ;; Defined at:
  9598 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\flge.c"
  9599 ;; Parameters:    Size  Location     Type
  9600 ;;  ff1             4   53[COMRAM] unsigned char 
  9601 ;;  ff2             4   57[COMRAM] unsigned char 
  9602 ;; Auto vars:     Size  Location     Type
  9603 ;;		None
  9604 ;; Return value:  Size  Location     Type
  9605 ;;		None               void
  9606 ;; Registers used:
  9607 ;;		wreg, status,2, status,0
  9608 ;; Tracked objects:
  9609 ;;		On entry : 0/0
  9610 ;;		On exit  : 0/0
  9611 ;;		Unchanged: 0/0
  9612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9613 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9615 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9616 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9617 ;;Total ram usage:       12 bytes
  9618 ;; Hardware stack levels used: 1
  9619 ;; Hardware stack levels required when called: 2
  9620 ;; This function calls:
  9621 ;;		Nothing
  9622 ;; This function is called by:
  9623 ;;		_colorDetect
  9624 ;;		_main
  9625 ;;		_efgtoa
  9626 ;; This function uses a non-reentrant model
  9627 ;;
  9628                           
  9629                           	psect	text38
  9630  0000'                    __ptext38:
  9631                           	callstack 0
  9632  0000'                    ___flge:
  9633                           	callstack 24
  9634  0000' 0E00               	movlw	0
  9635  0002' 1400'              	andwf	___flge@ff1^0,w,c
  9636  0004' 6E00'              	movwf	??___flge^0,c
  9637  0006' 0E00               	movlw	0
  9638  0008' 1400'              	andwf	(___flge@ff1+1)^0,w,c
  9639  000A' 6E00'              	movwf	(??___flge+1)^0,c
  9640  000C' 0E80               	movlw	128
  9641  000E' 1400'              	andwf	(___flge@ff1+2)^0,w,c
  9642  0010' 6E00'              	movwf	(??___flge+2)^0,c
  9643  0012' 0E7F               	movlw	127
  9644  0014' 1400'              	andwf	(___flge@ff1+3)^0,w,c
  9645  0016' 6E00'              	movwf	(??___flge+3)^0,c
  9646  0018' 5000'              	movf	??___flge^0,w,c
  9647  001A' 1000'              	iorwf	(??___flge+1)^0,w,c
  9648  001C' 1000'              	iorwf	(??___flge+2)^0,w,c
  9649  001E' 1000'              	iorwf	(??___flge+3)^0,w,c
  9650  0020' A4D8               	btfss	status,2,c
  9651  0022' EF00' F000'        	goto	u3981
  9652  0026' EF00' F000'        	goto	u3980
  9653  002A'                    u3981:
  9654  002A' EF00' F000'        	goto	l3977
  9655  002E'                    u3980:
  9656  002E' 0E00               	movlw	0
  9657  0030' 6E00'              	movwf	___flge@ff1^0,c
  9658  0032' 0E00               	movlw	0
  9659  0034' 6E00'              	movwf	(___flge@ff1+1)^0,c
  9660  0036' 0E00               	movlw	0
  9661  0038' 6E00'              	movwf	(___flge@ff1+2)^0,c
  9662  003A' 0E00               	movlw	0
  9663  003C' 6E00'              	movwf	(___flge@ff1+3)^0,c
  9664  003E'                    l3977:
  9665  003E' 0E00               	movlw	0
  9666  0040' 1400'              	andwf	___flge@ff2^0,w,c
  9667  0042' 6E00'              	movwf	??___flge^0,c
  9668  0044' 0E00               	movlw	0
  9669  0046' 1400'              	andwf	(___flge@ff2+1)^0,w,c
  9670  0048' 6E00'              	movwf	(??___flge+1)^0,c
  9671  004A' 0E80               	movlw	128
  9672  004C' 1400'              	andwf	(___flge@ff2+2)^0,w,c
  9673  004E' 6E00'              	movwf	(??___flge+2)^0,c
  9674  0050' 0E7F               	movlw	127
  9675  0052' 1400'              	andwf	(___flge@ff2+3)^0,w,c
  9676  0054' 6E00'              	movwf	(??___flge+3)^0,c
  9677  0056' 5000'              	movf	??___flge^0,w,c
  9678  0058' 1000'              	iorwf	(??___flge+1)^0,w,c
  9679  005A' 1000'              	iorwf	(??___flge+2)^0,w,c
  9680  005C' 1000'              	iorwf	(??___flge+3)^0,w,c
  9681  005E' A4D8               	btfss	status,2,c
  9682  0060' EF00' F000'        	goto	u3991
  9683  0064' EF00' F000'        	goto	u3990
  9684  0068'                    u3991:
  9685  0068' EF00' F000'        	goto	l3981
  9686  006C'                    u3990:
  9687  006C' 0E00               	movlw	0
  9688  006E' 6E00'              	movwf	___flge@ff2^0,c
  9689  0070' 0E00               	movlw	0
  9690  0072' 6E00'              	movwf	(___flge@ff2+1)^0,c
  9691  0074' 0E00               	movlw	0
  9692  0076' 6E00'              	movwf	(___flge@ff2+2)^0,c
  9693  0078' 0E00               	movlw	0
  9694  007A' 6E00'              	movwf	(___flge@ff2+3)^0,c
  9695  007C'                    l3981:
  9696  007C' AE00'              	btfss	(___flge@ff1+3)^0,7,c
  9697  007E' EF00' F000'        	goto	u4001
  9698  0082' EF00' F000'        	goto	u4000
  9699  0086'                    u4001:
  9700  0086' EF00' F000'        	goto	l3985
  9701  008A'                    u4000:
  9702  008A' 6C00'              	negf	___flge@ff1^0,c
  9703  008C' 1E00'              	comf	(___flge@ff1+1)^0,f,c
  9704  008E' B0D8               	btfsc	status,0,c
  9705  0090' 2A00'              	incf	(___flge@ff1+1)^0,f,c
  9706  0092' 1E00'              	comf	(___flge@ff1+2)^0,f,c
  9707  0094' B0D8               	btfsc	status,0,c
  9708  0096' 2A00'              	incf	(___flge@ff1+2)^0,f,c
  9709  0098' 0E80               	movlw	128
  9710  009A' 5600'              	subfwb	(___flge@ff1+3)^0,f,c
  9711  009C'                    l3985:
  9712  009C' AE00'              	btfss	(___flge@ff2+3)^0,7,c
  9713  009E' EF00' F000'        	goto	u4011
  9714  00A2' EF00' F000'        	goto	u4010
  9715  00A6'                    u4011:
  9716  00A6' EF00' F000'        	goto	l753
  9717  00AA'                    u4010:
  9718  00AA' 6C00'              	negf	___flge@ff2^0,c
  9719  00AC' 1E00'              	comf	(___flge@ff2+1)^0,f,c
  9720  00AE' B0D8               	btfsc	status,0,c
  9721  00B0' 2A00'              	incf	(___flge@ff2+1)^0,f,c
  9722  00B2' 1E00'              	comf	(___flge@ff2+2)^0,f,c
  9723  00B4' B0D8               	btfsc	status,0,c
  9724  00B6' 2A00'              	incf	(___flge@ff2+2)^0,f,c
  9725  00B8' 0E80               	movlw	128
  9726  00BA' 5600'              	subfwb	(___flge@ff2+3)^0,f,c
  9727  00BC'                    l753:
  9728  00BC' 0E00               	movlw	0
  9729  00BE' 1A00'              	xorwf	___flge@ff1^0,f,c
  9730  00C0' 0E00               	movlw	0
  9731  00C2' 1A00'              	xorwf	(___flge@ff1+1)^0,f,c
  9732  00C4' 0E00               	movlw	0
  9733  00C6' 1A00'              	xorwf	(___flge@ff1+2)^0,f,c
  9734  00C8' 0E80               	movlw	128
  9735  00CA' 1A00'              	xorwf	(___flge@ff1+3)^0,f,c
  9736  00CC' 0E00               	movlw	0
  9737  00CE' 1A00'              	xorwf	___flge@ff2^0,f,c
  9738  00D0' 0E00               	movlw	0
  9739  00D2' 1A00'              	xorwf	(___flge@ff2+1)^0,f,c
  9740  00D4' 0E00               	movlw	0
  9741  00D6' 1A00'              	xorwf	(___flge@ff2+2)^0,f,c
  9742  00D8' 0E80               	movlw	128
  9743  00DA' 1A00'              	xorwf	(___flge@ff2+3)^0,f,c
  9744  00DC' 5000'              	movf	___flge@ff2^0,w,c
  9745  00DE' 5C00'              	subwf	___flge@ff1^0,w,c
  9746  00E0' 5000'              	movf	(___flge@ff2+1)^0,w,c
  9747  00E2' 5800'              	subwfb	(___flge@ff1+1)^0,w,c
  9748  00E4' 5000'              	movf	(___flge@ff2+2)^0,w,c
  9749  00E6' 5800'              	subwfb	(___flge@ff1+2)^0,w,c
  9750  00E8' 5000'              	movf	(___flge@ff2+3)^0,w,c
  9751  00EA' 5800'              	subwfb	(___flge@ff1+3)^0,w,c
  9752  00EC' B0D8               	btfsc	status,0,c
  9753  00EE' EF00' F000'        	goto	u4021
  9754  00F2' EF00' F000'        	goto	u4020
  9755  00F6'                    u4021:
  9756  00F6' EF00' F000'        	goto	l3991
  9757  00FA'                    u4020:
  9758  00FA' 90D8               	bcf	status,0,c
  9759  00FC' EF00' F000'        	goto	l758
  9760  0100'                    l3991:
  9761  0100' 80D8               	bsf	status,0,c
  9762  0102'                    l758:
  9763  0102' 0012               	return		;funcret
  9764  0104'                    __end_of___flge:
  9765                           	callstack 0
  9766                           
  9767 ;; *************** function ___fldiv *****************
  9768 ;; Defined at:
  9769 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\sprcdiv.c"
  9770 ;; Parameters:    Size  Location     Type
  9771 ;;  b               4   53[COMRAM] unsigned char 
  9772 ;;  a               4   57[COMRAM] unsigned char 
  9773 ;; Auto vars:     Size  Location     Type
  9774 ;;  grs             4   72[COMRAM] unsigned long 
  9775 ;;  rem             4   65[COMRAM] unsigned long 
  9776 ;;  new_exp         2   70[COMRAM] short 
  9777 ;;  aexp            1   77[COMRAM] unsigned char 
  9778 ;;  bexp            1   76[COMRAM] unsigned char 
  9779 ;;  sign            1   69[COMRAM] unsigned char 
  9780 ;; Return value:  Size  Location     Type
  9781 ;;                  4   53[COMRAM] unsigned char 
  9782 ;; Registers used:
  9783 ;;		wreg, status,2, status,0
  9784 ;; Tracked objects:
  9785 ;;		On entry : 0/0
  9786 ;;		On exit  : 0/0
  9787 ;;		Unchanged: 0/0
  9788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9789 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9790 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9791 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9792 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9793 ;;Total ram usage:       25 bytes
  9794 ;; Hardware stack levels used: 1
  9795 ;; Hardware stack levels required when called: 2
  9796 ;; This function calls:
  9797 ;;		Nothing
  9798 ;; This function is called by:
  9799 ;;		_colorDetect
  9800 ;;		_main
  9801 ;;		_efgtoa
  9802 ;; This function uses a non-reentrant model
  9803 ;;
  9804                           
  9805                           	psect	text39
  9806  0000'                    __ptext39:
  9807                           	callstack 0
  9808  0000'                    ___fldiv:
  9809                           	callstack 24
  9810  0000' 5000'              	movf	(___fldiv@b+3)^0,w,c
  9811  0002' 0B80               	andlw	128
  9812  0004' 6E00'              	movwf	___fldiv@sign^0,c
  9813  0006' 5000'              	movf	(___fldiv@b+3)^0,w,c
  9814  0008' 2400'              	addwf	(___fldiv@b+3)^0,w,c
  9815  000A' 6E00'              	movwf	___fldiv@bexp^0,c
  9816  000C' AE00'              	btfss	(___fldiv@b+2)^0,7,c
  9817  000E' EF00' F000'        	goto	u3531
  9818  0012' EF00' F000'        	goto	u3530
  9819  0016'                    u3531:
  9820  0016' EF00' F000'        	goto	l3689
  9821  001A'                    u3530:
  9822  001A' 8000'              	bsf	___fldiv@bexp^0,0,c
  9823  001C'                    l3689:
  9824  001C' 5000'              	movf	___fldiv@bexp^0,w,c
  9825  001E' B4D8               	btfsc	status,2,c
  9826  0020' EF00' F000'        	goto	u3541
  9827  0024' EF00' F000'        	goto	u3540
  9828  0028'                    u3541:
  9829  0028' EF00' F000'        	goto	l3699
  9830  002C'                    u3540:
  9831  002C' 2800'              	incf	___fldiv@bexp^0,w,c
  9832  002E' A4D8               	btfss	status,2,c
  9833  0030' EF00' F000'        	goto	u3551
  9834  0034' EF00' F000'        	goto	u3550
  9835  0038'                    u3551:
  9836  0038' EF00' F000'        	goto	l3695
  9837  003C'                    u3550:
  9838  003C' 0E00               	movlw	0
  9839  003E' 6E00'              	movwf	___fldiv@b^0,c
  9840  0040' 0E00               	movlw	0
  9841  0042' 6E00'              	movwf	(___fldiv@b+1)^0,c
  9842  0044' 0E00               	movlw	0
  9843  0046' 6E00'              	movwf	(___fldiv@b+2)^0,c
  9844  0048' 0E00               	movlw	0
  9845  004A' 6E00'              	movwf	(___fldiv@b+3)^0,c
  9846  004C'                    l3695:
  9847  004C' 8E00'              	bsf	(___fldiv@b+2)^0,7,c
  9848  004E' 0E00               	movlw	0
  9849  0050' 6E00'              	movwf	(___fldiv@b+3)^0,c
  9850  0052' EF00' F000'        	goto	l3701
  9851  0056'                    l3699:
  9852  0056' 0E00               	movlw	0
  9853  0058' 6E00'              	movwf	___fldiv@b^0,c
  9854  005A' 0E00               	movlw	0
  9855  005C' 6E00'              	movwf	(___fldiv@b+1)^0,c
  9856  005E' 0E00               	movlw	0
  9857  0060' 6E00'              	movwf	(___fldiv@b+2)^0,c
  9858  0062' 0E00               	movlw	0
  9859  0064' 6E00'              	movwf	(___fldiv@b+3)^0,c
  9860  0066'                    l3701:
  9861  0066' 5000'              	movf	(___fldiv@a+3)^0,w,c
  9862  0068' 0B80               	andlw	128
  9863  006A' 1A00'              	xorwf	___fldiv@sign^0,f,c
  9864  006C' 5000'              	movf	(___fldiv@a+3)^0,w,c
  9865  006E' 2400'              	addwf	(___fldiv@a+3)^0,w,c
  9866  0070' 6E00'              	movwf	___fldiv@aexp^0,c
  9867  0072' AE00'              	btfss	(___fldiv@a+2)^0,7,c
  9868  0074' EF00' F000'        	goto	u3561
  9869  0078' EF00' F000'        	goto	u3560
  9870  007C'                    u3561:
  9871  007C' EF00' F000'        	goto	l3709
  9872  0080'                    u3560:
  9873  0080' 8000'              	bsf	___fldiv@aexp^0,0,c
  9874  0082'                    l3709:
  9875  0082' 5000'              	movf	___fldiv@aexp^0,w,c
  9876  0084' B4D8               	btfsc	status,2,c
  9877  0086' EF00' F000'        	goto	u3571
  9878  008A' EF00' F000'        	goto	u3570
  9879  008E'                    u3571:
  9880  008E' EF00' F000'        	goto	l3719
  9881  0092'                    u3570:
  9882  0092' 2800'              	incf	___fldiv@aexp^0,w,c
  9883  0094' A4D8               	btfss	status,2,c
  9884  0096' EF00' F000'        	goto	u3581
  9885  009A' EF00' F000'        	goto	u3580
  9886  009E'                    u3581:
  9887  009E' EF00' F000'        	goto	l3715
  9888  00A2'                    u3580:
  9889  00A2' 0E00               	movlw	0
  9890  00A4' 6E00'              	movwf	___fldiv@a^0,c
  9891  00A6' 0E00               	movlw	0
  9892  00A8' 6E00'              	movwf	(___fldiv@a+1)^0,c
  9893  00AA' 0E00               	movlw	0
  9894  00AC' 6E00'              	movwf	(___fldiv@a+2)^0,c
  9895  00AE' 0E00               	movlw	0
  9896  00B0' 6E00'              	movwf	(___fldiv@a+3)^0,c
  9897  00B2'                    l3715:
  9898  00B2' 8E00'              	bsf	(___fldiv@a+2)^0,7,c
  9899  00B4' 0E00               	movlw	0
  9900  00B6' 6E00'              	movwf	(___fldiv@a+3)^0,c
  9901  00B8' EF00' F000'        	goto	l3721
  9902  00BC'                    l3719:
  9903  00BC' 0E00               	movlw	0
  9904  00BE' 6E00'              	movwf	___fldiv@a^0,c
  9905  00C0' 0E00               	movlw	0
  9906  00C2' 6E00'              	movwf	(___fldiv@a+1)^0,c
  9907  00C4' 0E00               	movlw	0
  9908  00C6' 6E00'              	movwf	(___fldiv@a+2)^0,c
  9909  00C8' 0E00               	movlw	0
  9910  00CA' 6E00'              	movwf	(___fldiv@a+3)^0,c
  9911  00CC'                    l3721:
  9912  00CC' 5000'              	movf	___fldiv@a^0,w,c
  9913  00CE' 1000'              	iorwf	(___fldiv@a+1)^0,w,c
  9914  00D0' 1000'              	iorwf	(___fldiv@a+2)^0,w,c
  9915  00D2' 1000'              	iorwf	(___fldiv@a+3)^0,w,c
  9916  00D4' A4D8               	btfss	status,2,c
  9917  00D6' EF00' F000'        	goto	u3591
  9918  00DA' EF00' F000'        	goto	u3590
  9919  00DE'                    u3591:
  9920  00DE' EF00' F000'        	goto	l3733
  9921  00E2'                    u3590:
  9922  00E2' 0E00               	movlw	0
  9923  00E4' 6E00'              	movwf	___fldiv@b^0,c
  9924  00E6' 0E00               	movlw	0
  9925  00E8' 6E00'              	movwf	(___fldiv@b+1)^0,c
  9926  00EA' 0E00               	movlw	0
  9927  00EC' 6E00'              	movwf	(___fldiv@b+2)^0,c
  9928  00EE' 0E00               	movlw	0
  9929  00F0' 6E00'              	movwf	(___fldiv@b+3)^0,c
  9930  00F2' 0E80               	movlw	128
  9931  00F4' 1200'              	iorwf	(___fldiv@b+2)^0,f,c
  9932  00F6' 0E7F               	movlw	127
  9933  00F8' 1200'              	iorwf	(___fldiv@b+3)^0,f,c
  9934  00FA'                    l3727:
  9935  00FA' 5000'              	movf	___fldiv@sign^0,w,c
  9936  00FC' 1200'              	iorwf	(___fldiv@b+3)^0,f,c
  9937  00FE' C035' F035'        	movff	___fldiv@b,?___fldiv
  9938  0102' C036' F036'        	movff	___fldiv@b+1,?___fldiv+1
  9939  0106' C037' F037'        	movff	___fldiv@b+2,?___fldiv+2
  9940  010A' C038' F038'        	movff	___fldiv@b+3,?___fldiv+3
  9941  010E' EF00' F000'        	goto	l1070
  9942  0112'                    l3733:
  9943  0112' 5000'              	movf	___fldiv@bexp^0,w,c
  9944  0114' A4D8               	btfss	status,2,c
  9945  0116' EF00' F000'        	goto	u3601
  9946  011A' EF00' F000'        	goto	u3600
  9947  011E'                    u3601:
  9948  011E' EF00' F000'        	goto	l3741
  9949  0122'                    u3600:
  9950  0122' 0E00               	movlw	0
  9951  0124' 6E00'              	movwf	?___fldiv^0,c
  9952  0126' 0E00               	movlw	0
  9953  0128' 6E00'              	movwf	(?___fldiv+1)^0,c
  9954  012A' 0E00               	movlw	0
  9955  012C' 6E00'              	movwf	(?___fldiv+2)^0,c
  9956  012E' 0E00               	movlw	0
  9957  0130' 6E00'              	movwf	(?___fldiv+3)^0,c
  9958  0132' EF00' F000'        	goto	l1070
  9959  0136'                    l3741:
  9960  0136' 5000'              	movf	___fldiv@aexp^0,w,c
  9961  0138' C04C' F03D'        	movff	___fldiv@bexp,??___fldiv
  9962  013C' 6A00'              	clrf	(??___fldiv+1)^0,c
  9963  013E' 5E00'              	subwf	??___fldiv^0,f,c
  9964  0140' 0E00               	movlw	0
  9965  0142' 5A00'              	subwfb	(??___fldiv+1)^0,f,c
  9966  0144' 0E7F               	movlw	127
  9967  0146' 2400'              	addwf	??___fldiv^0,w,c
  9968  0148' 6E00'              	movwf	___fldiv@new_exp^0,c
  9969  014A' 0E00               	movlw	0
  9970  014C' 2000'              	addwfc	(??___fldiv+1)^0,w,c
  9971  014E' 6E00'              	movwf	(___fldiv@new_exp+1)^0,c
  9972  0150' C035' F041'        	movff	___fldiv@b,___fldiv@rem
  9973  0154' C036' F042'        	movff	___fldiv@b+1,___fldiv@rem+1
  9974  0158' C037' F043'        	movff	___fldiv@b+2,___fldiv@rem+2
  9975  015C' C038' F044'        	movff	___fldiv@b+3,___fldiv@rem+3
  9976  0160' 0E00               	movlw	0
  9977  0162' 6E00'              	movwf	___fldiv@b^0,c
  9978  0164' 0E00               	movlw	0
  9979  0166' 6E00'              	movwf	(___fldiv@b+1)^0,c
  9980  0168' 0E00               	movlw	0
  9981  016A' 6E00'              	movwf	(___fldiv@b+2)^0,c
  9982  016C' 0E00               	movlw	0
  9983  016E' 6E00'              	movwf	(___fldiv@b+3)^0,c
  9984  0170' 0E00               	movlw	0
  9985  0172' 6E00'              	movwf	___fldiv@grs^0,c
  9986  0174' 0E00               	movlw	0
  9987  0176' 6E00'              	movwf	(___fldiv@grs+1)^0,c
  9988  0178' 0E00               	movlw	0
  9989  017A' 6E00'              	movwf	(___fldiv@grs+2)^0,c
  9990  017C' 0E00               	movlw	0
  9991  017E' 6E00'              	movwf	(___fldiv@grs+3)^0,c
  9992  0180' 0E00               	movlw	0
  9993  0182' 6E00'              	movwf	___fldiv@aexp^0,c
  9994  0184' EF00' F000'        	goto	l1072
  9995  0188'                    l3751:
  9996  0188' 5000'              	movf	___fldiv@aexp^0,w,c
  9997  018A' B4D8               	btfsc	status,2,c
  9998  018C' EF00' F000'        	goto	u3611
  9999  0190' EF00' F000'        	goto	u3610
 10000  0194'                    u3611:
 10001  0194' EF00' F000'        	goto	l3759
 10002  0198'                    u3610:
 10003  0198' 90D8               	bcf	status,0,c
 10004  019A' 3600'              	rlcf	___fldiv@rem^0,f,c
 10005  019C' 3600'              	rlcf	(___fldiv@rem+1)^0,f,c
 10006  019E' 3600'              	rlcf	(___fldiv@rem+2)^0,f,c
 10007  01A0' 3600'              	rlcf	(___fldiv@rem+3)^0,f,c
 10008  01A2' 90D8               	bcf	status,0,c
 10009  01A4' 3600'              	rlcf	___fldiv@b^0,f,c
 10010  01A6' 3600'              	rlcf	(___fldiv@b+1)^0,f,c
 10011  01A8' 3600'              	rlcf	(___fldiv@b+2)^0,f,c
 10012  01AA' 3600'              	rlcf	(___fldiv@b+3)^0,f,c
 10013  01AC' AE00'              	btfss	(___fldiv@grs+3)^0,7,c
 10014  01AE' EF00' F000'        	goto	u3621
 10015  01B2' EF00' F000'        	goto	u3620
 10016  01B6'                    u3621:
 10017  01B6' EF00' F000'        	goto	l1075
 10018  01BA'                    u3620:
 10019  01BA' 8000'              	bsf	___fldiv@b^0,0,c
 10020  01BC'                    l1075:
 10021  01BC' 90D8               	bcf	status,0,c
 10022  01BE' 3600'              	rlcf	___fldiv@grs^0,f,c
 10023  01C0' 3600'              	rlcf	(___fldiv@grs+1)^0,f,c
 10024  01C2' 3600'              	rlcf	(___fldiv@grs+2)^0,f,c
 10025  01C4' 3600'              	rlcf	(___fldiv@grs+3)^0,f,c
 10026  01C6'                    l3759:
 10027  01C6' 5000'              	movf	___fldiv@a^0,w,c
 10028  01C8' 5C00'              	subwf	___fldiv@rem^0,w,c
 10029  01CA' 5000'              	movf	(___fldiv@a+1)^0,w,c
 10030  01CC' 5800'              	subwfb	(___fldiv@rem+1)^0,w,c
 10031  01CE' 5000'              	movf	(___fldiv@a+2)^0,w,c
 10032  01D0' 5800'              	subwfb	(___fldiv@rem+2)^0,w,c
 10033  01D2' 5000'              	movf	(___fldiv@a+3)^0,w,c
 10034  01D4' 5800'              	subwfb	(___fldiv@rem+3)^0,w,c
 10035  01D6' A0D8               	btfss	status,0,c
 10036  01D8' EF00' F000'        	goto	u3631
 10037  01DC' EF00' F000'        	goto	u3630
 10038  01E0'                    u3631:
 10039  01E0' EF00' F000'        	goto	l3765
 10040  01E4'                    u3630:
 10041  01E4' 8C00'              	bsf	(___fldiv@grs+3)^0,6,c
 10042  01E6' 5000'              	movf	___fldiv@a^0,w,c
 10043  01E8' 5E00'              	subwf	___fldiv@rem^0,f,c
 10044  01EA' 5000'              	movf	(___fldiv@a+1)^0,w,c
 10045  01EC' 5A00'              	subwfb	(___fldiv@rem+1)^0,f,c
 10046  01EE' 5000'              	movf	(___fldiv@a+2)^0,w,c
 10047  01F0' 5A00'              	subwfb	(___fldiv@rem+2)^0,f,c
 10048  01F2' 5000'              	movf	(___fldiv@a+3)^0,w,c
 10049  01F4' 5A00'              	subwfb	(___fldiv@rem+3)^0,f,c
 10050  01F6'                    l3765:
 10051  01F6' 2A00'              	incf	___fldiv@aexp^0,f,c
 10052  01F8'                    l1072:
 10053  01F8' 0E19               	movlw	25
 10054  01FA' 6400'              	cpfsgt	___fldiv@aexp^0,c
 10055  01FC' EF00' F000'        	goto	u3641
 10056  0200' EF00' F000'        	goto	u3640
 10057  0204'                    u3641:
 10058  0204' EF00' F000'        	goto	l3751
 10059  0208'                    u3640:
 10060  0208' 5000'              	movf	___fldiv@rem^0,w,c
 10061  020A' 1000'              	iorwf	(___fldiv@rem+1)^0,w,c
 10062  020C' 1000'              	iorwf	(___fldiv@rem+2)^0,w,c
 10063  020E' 1000'              	iorwf	(___fldiv@rem+3)^0,w,c
 10064  0210' B4D8               	btfsc	status,2,c
 10065  0212' EF00' F000'        	goto	u3651
 10066  0216' EF00' F000'        	goto	u3650
 10067  021A'                    u3651:
 10068  021A' EF00' F000'        	goto	l3777
 10069  021E'                    u3650:
 10070  021E' 8000'              	bsf	___fldiv@grs^0,0,c
 10071  0220' EF00' F000'        	goto	l3777
 10072  0224'                    l3771:
 10073  0224' 90D8               	bcf	status,0,c
 10074  0226' 3600'              	rlcf	___fldiv@b^0,f,c
 10075  0228' 3600'              	rlcf	(___fldiv@b+1)^0,f,c
 10076  022A' 3600'              	rlcf	(___fldiv@b+2)^0,f,c
 10077  022C' 3600'              	rlcf	(___fldiv@b+3)^0,f,c
 10078  022E' AE00'              	btfss	(___fldiv@grs+3)^0,7,c
 10079  0230' EF00' F000'        	goto	u3661
 10080  0234' EF00' F000'        	goto	u3660
 10081  0238'                    u3661:
 10082  0238' EF00' F000'        	goto	l1081
 10083  023C'                    u3660:
 10084  023C' 8000'              	bsf	___fldiv@b^0,0,c
 10085  023E'                    l1081:
 10086  023E' 90D8               	bcf	status,0,c
 10087  0240' 3600'              	rlcf	___fldiv@grs^0,f,c
 10088  0242' 3600'              	rlcf	(___fldiv@grs+1)^0,f,c
 10089  0244' 3600'              	rlcf	(___fldiv@grs+2)^0,f,c
 10090  0246' 3600'              	rlcf	(___fldiv@grs+3)^0,f,c
 10091  0248' 0600'              	decf	___fldiv@new_exp^0,f,c
 10092  024A' A0D8               	btfss	status,0,c
 10093  024C' 0600'              	decf	(___fldiv@new_exp+1)^0,f,c
 10094  024E'                    l3777:
 10095  024E' AE00'              	btfss	(___fldiv@b+2)^0,7,c
 10096  0250' EF00' F000'        	goto	u3671
 10097  0254' EF00' F000'        	goto	u3670
 10098  0258'                    u3671:
 10099  0258' EF00' F000'        	goto	l3771
 10100  025C'                    u3670:
 10101  025C' 0E00               	movlw	0
 10102  025E' 6E00'              	movwf	___fldiv@aexp^0,c
 10103  0260' AE00'              	btfss	(___fldiv@grs+3)^0,7,c
 10104  0262' EF00' F000'        	goto	u3681
 10105  0266' EF00' F000'        	goto	u3680
 10106  026A'                    u3681:
 10107  026A' EF00' F000'        	goto	l1083
 10108  026E'                    u3680:
 10109  026E' 0EFF               	movlw	255
 10110  0270' 1400'              	andwf	___fldiv@grs^0,w,c
 10111  0272' 6E00'              	movwf	??___fldiv^0,c
 10112  0274' 0EFF               	movlw	255
 10113  0276' 1400'              	andwf	(___fldiv@grs+1)^0,w,c
 10114  0278' 6E00'              	movwf	(??___fldiv+1)^0,c
 10115  027A' 0EFF               	movlw	255
 10116  027C' 1400'              	andwf	(___fldiv@grs+2)^0,w,c
 10117  027E' 6E00'              	movwf	(??___fldiv+2)^0,c
 10118  0280' 0E7F               	movlw	127
 10119  0282' 1400'              	andwf	(___fldiv@grs+3)^0,w,c
 10120  0284' 6E00'              	movwf	(??___fldiv+3)^0,c
 10121  0286' 5000'              	movf	??___fldiv^0,w,c
 10122  0288' 1000'              	iorwf	(??___fldiv+1)^0,w,c
 10123  028A' 1000'              	iorwf	(??___fldiv+2)^0,w,c
 10124  028C' 1000'              	iorwf	(??___fldiv+3)^0,w,c
 10125  028E' B4D8               	btfsc	status,2,c
 10126  0290' EF00' F000'        	goto	u3691
 10127  0294' EF00' F000'        	goto	u3690
 10128  0298'                    u3691:
 10129  0298' EF00' F000'        	goto	l1084
 10130  029C'                    u3690:
 10131  029C'                    l3785:
 10132  029C' 0E01               	movlw	1
 10133  029E' 6E00'              	movwf	___fldiv@aexp^0,c
 10134  02A0' EF00' F000'        	goto	l1083
 10135  02A4'                    l1084:
 10136  02A4' A000'              	btfss	___fldiv@b^0,0,c
 10137  02A6' EF00' F000'        	goto	u3701
 10138  02AA' EF00' F000'        	goto	u3700
 10139  02AE'                    u3701:
 10140  02AE' EF00' F000'        	goto	l1083
 10141  02B2'                    u3700:
 10142  02B2' EF00' F000'        	goto	l3785
 10143  02B6'                    l1083:
 10144  02B6' 5000'              	movf	___fldiv@aexp^0,w,c
 10145  02B8' B4D8               	btfsc	status,2,c
 10146  02BA' EF00' F000'        	goto	u3711
 10147  02BE' EF00' F000'        	goto	u3710
 10148  02C2'                    u3711:
 10149  02C2' EF00' F000'        	goto	l3797
 10150  02C6'                    u3710:
 10151  02C6' 0E01               	movlw	1
 10152  02C8' 2600'              	addwf	___fldiv@b^0,f,c
 10153  02CA' 0E00               	movlw	0
 10154  02CC' 2200'              	addwfc	(___fldiv@b+1)^0,f,c
 10155  02CE' 2200'              	addwfc	(___fldiv@b+2)^0,f,c
 10156  02D0' 2200'              	addwfc	(___fldiv@b+3)^0,f,c
 10157  02D2' A000'              	btfss	(___fldiv@b+3)^0,0,c
 10158  02D4' EF00' F000'        	goto	u3721
 10159  02D8' EF00' F000'        	goto	u3720
 10160  02DC'                    u3721:
 10161  02DC' EF00' F000'        	goto	l3797
 10162  02E0'                    u3720:
 10163  02E0' C035' F03D'        	movff	___fldiv@b,??___fldiv
 10164  02E4' C036' F03E'        	movff	___fldiv@b+1,??___fldiv+1
 10165  02E8' C037' F03F'        	movff	___fldiv@b+2,??___fldiv+2
 10166  02EC' C038' F040'        	movff	___fldiv@b+3,??___fldiv+3
 10167  02F0' 3400'              	rlcf	(??___fldiv+3)^0,w,c
 10168  02F2' 3200'              	rrcf	(??___fldiv+3)^0,f,c
 10169  02F4' 3200'              	rrcf	(??___fldiv+2)^0,f,c
 10170  02F6' 3200'              	rrcf	(??___fldiv+1)^0,f,c
 10171  02F8' 3200'              	rrcf	??___fldiv^0,f,c
 10172  02FA' C03D' F035'        	movff	??___fldiv,___fldiv@b
 10173  02FE' C03E' F036'        	movff	??___fldiv+1,___fldiv@b+1
 10174  0302' C03F' F037'        	movff	??___fldiv+2,___fldiv@b+2
 10175  0306' C040' F038'        	movff	??___fldiv+3,___fldiv@b+3
 10176  030A' 4A00'              	infsnz	___fldiv@new_exp^0,f,c
 10177  030C' 2A00'              	incf	(___fldiv@new_exp+1)^0,f,c
 10178  030E'                    l3797:
 10179  030E' BE00'              	btfsc	(___fldiv@new_exp+1)^0,7,c
 10180  0310' EF00' F000'        	goto	u3731
 10181  0314' 5000'              	movf	(___fldiv@new_exp+1)^0,w,c
 10182  0316' E108               	bnz	u3730
 10183  0318' 2800'              	incf	___fldiv@new_exp^0,w,c
 10184  031A' A0D8               	btfss	status,0,c
 10185  031C' EF00' F000'        	goto	u3731
 10186  0320' EF00' F000'        	goto	u3730
 10187  0324'                    u3731:
 10188  0324' EF00' F000'        	goto	l3801
 10189  0328'                    u3730:
 10190  0328' 0E00               	movlw	0
 10191  032A' 6E00'              	movwf	(___fldiv@new_exp+1)^0,c
 10192  032C' 6800'              	setf	___fldiv@new_exp^0,c
 10193  032E' 0E00               	movlw	0
 10194  0330' 6E00'              	movwf	___fldiv@b^0,c
 10195  0332' 0E00               	movlw	0
 10196  0334' 6E00'              	movwf	(___fldiv@b+1)^0,c
 10197  0336' 0E00               	movlw	0
 10198  0338' 6E00'              	movwf	(___fldiv@b+2)^0,c
 10199  033A' 0E00               	movlw	0
 10200  033C' 6E00'              	movwf	(___fldiv@b+3)^0,c
 10201  033E'                    l3801:
 10202  033E' BE00'              	btfsc	(___fldiv@new_exp+1)^0,7,c
 10203  0340' EF00' F000'        	goto	u3740
 10204  0344' 5000'              	movf	(___fldiv@new_exp+1)^0,w,c
 10205  0346' E106               	bnz	u3741
 10206  0348' 0400'              	decf	___fldiv@new_exp^0,w,c
 10207  034A' B0D8               	btfsc	status,0,c
 10208  034C' EF00' F000'        	goto	u3741
 10209  0350' EF00' F000'        	goto	u3740
 10210  0354'                    u3741:
 10211  0354' EF00' F000'        	goto	l3805
 10212  0358'                    u3740:
 10213  0358' 0E00               	movlw	0
 10214  035A' 6E00'              	movwf	(___fldiv@new_exp+1)^0,c
 10215  035C' 0E00               	movlw	0
 10216  035E' 6E00'              	movwf	___fldiv@new_exp^0,c
 10217  0360' 0E00               	movlw	0
 10218  0362' 6E00'              	movwf	___fldiv@b^0,c
 10219  0364' 0E00               	movlw	0
 10220  0366' 6E00'              	movwf	(___fldiv@b+1)^0,c
 10221  0368' 0E00               	movlw	0
 10222  036A' 6E00'              	movwf	(___fldiv@b+2)^0,c
 10223  036C' 0E00               	movlw	0
 10224  036E' 6E00'              	movwf	(___fldiv@b+3)^0,c
 10225  0370' 0E00               	movlw	0
 10226  0372' 6E00'              	movwf	___fldiv@sign^0,c
 10227  0374'                    l3805:
 10228  0374' C046' F04C'        	movff	___fldiv@new_exp,___fldiv@bexp
 10229  0378' A000'              	btfss	___fldiv@bexp^0,0,c
 10230  037A' EF00' F000'        	goto	u3751
 10231  037E' EF00' F000'        	goto	u3750
 10232  0382'                    u3751:
 10233  0382' EF00' F000'        	goto	l3811
 10234  0386'                    u3750:
 10235  0386' 8E00'              	bsf	(___fldiv@b+2)^0,7,c
 10236  0388' EF00' F000'        	goto	l3813
 10237  038C'                    l3811:
 10238  038C' 9E00'              	bcf	(___fldiv@b+2)^0,7,c
 10239  038E'                    l3813:
 10240  038E' 90D8               	bcf	status,0,c
 10241  0390' 3000'              	rrcf	___fldiv@bexp^0,w,c
 10242  0392' 6E00'              	movwf	(___fldiv@b+3)^0,c
 10243  0394' EF00' F000'        	goto	l3727
 10244  0398'                    l1070:
 10245  0398' 0012               	return		;funcret
 10246  039A'                    __end_of___fldiv:
 10247                           	callstack 0
 10248                           
 10249 ;; *************** function _ambientCal *****************
 10250 ;; Defined at:
 10251 ;;		line 98 in file "MazeRobot.X/color.c"
 10252 ;; Parameters:    Size  Location     Type
 10253 ;;  v               2   17[COMRAM] PTR struct RGB
 10254 ;;		 -> main@ambientRGBVal(8), 
 10255 ;; Auto vars:     Size  Location     Type
 10256 ;;  i               2   21[COMRAM] int 
 10257 ;; Return value:  Size  Location     Type
 10258 ;;                  1    wreg      void 
 10259 ;; Registers used:
 10260 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10261 ;; Tracked objects:
 10262 ;;		On entry : 0/0
 10263 ;;		On exit  : 0/0
 10264 ;;		Unchanged: 0/0
 10265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10266 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10267 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10268 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10269 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10270 ;;Total ram usage:        6 bytes
 10271 ;; Hardware stack levels used: 1
 10272 ;; Hardware stack levels required when called: 6
 10273 ;; This function calls:
 10274 ;;		_getColor
 10275 ;; This function is called by:
 10276 ;;		_main
 10277 ;; This function uses a non-reentrant model
 10278 ;;
 10279                           
 10280                           	psect	text40
 10281  0000'                    __ptext40:
 10282                           	callstack 0
 10283  0000'                    _ambientCal:
 10284                           	callstack 24
 10285  0000'                    
 10286                           ;MazeRobot.X/color.c: 101:     for(int i = 0;i<20;i++){
 10287  0000' 0E00               	movlw	0
 10288  0002' 6E00'              	movwf	(ambientCal@i+1)^0,c
 10289  0004' 0E00               	movlw	0
 10290  0006' 6E00'              	movwf	ambientCal@i^0,c
 10291  0008'                    l4701:
 10292                           
 10293                           ;MazeRobot.X/color.c: 102:             LATDbits.LATD7 = !LATDbits.LATD7;
 10294  0008' AE7C               	btfss	124,7,c	;volatile
 10295  000A' EF00' F000'        	goto	u5031
 10296  000E' EF00' F000'        	goto	u5030
 10297  0012'                    u5031:
 10298  0012' 6A00'              	clrf	??_ambientCal^0,c
 10299  0014' 2A00'              	incf	??_ambientCal^0,f,c
 10300  0016' EF00' F000'        	goto	u5048
 10301  001A'                    u5030:
 10302  001A' 6A00'              	clrf	??_ambientCal^0,c
 10303  001C'                    u5048:
 10304  001C' 3200'              	rrcf	??_ambientCal^0,f,c
 10305  001E' 3200'              	rrcf	??_ambientCal^0,f,c
 10306  0020' 507C               	movf	124,w,c	;volatile
 10307  0022' 1800'              	xorwf	??_ambientCal^0,w,c
 10308  0024' 0B7F               	andlw	-129
 10309  0026' 1800'              	xorwf	??_ambientCal^0,w,c
 10310  0028' 6E7C               	movwf	124,c	;volatile
 10311  002A'                    
 10312                           ;MazeRobot.X/color.c: 103:             _delay((unsigned long)((100)*(64000000/4000.0)));
 10313  002A' 0E09               	movlw	9
 10314  002C' 6E00'              	movwf	(??_ambientCal+1)^0,c
 10315  002E' 0E1E               	movlw	30
 10316  0030' 6E00'              	movwf	??_ambientCal^0,c
 10317  0032' 0EE4               	movlw	228
 10318  0034'                    u6837:
 10319  0034' 2EE8               	decfsz	wreg,f,c
 10320  0036' D7FE               	bra	u6837
 10321  0038' 2E00'              	decfsz	??_ambientCal^0,f,c
 10322  003A' D7FC               	bra	u6837
 10323  003C' 2E00'              	decfsz	(??_ambientCal+1)^0,f,c
 10324  003E' D7FA               	bra	u6837
 10325  0040' D000               	nop2	
 10326                           
 10327                           ;MazeRobot.X/color.c: 104:             }
 10328  0042' 4A00'              	infsnz	ambientCal@i^0,f,c
 10329  0044' 2A00'              	incf	(ambientCal@i+1)^0,f,c
 10330  0046' BE00'              	btfsc	(ambientCal@i+1)^0,7,c
 10331  0048' EF00' F000'        	goto	u5051
 10332  004C' 5000'              	movf	(ambientCal@i+1)^0,w,c
 10333  004E' E109               	bnz	u5050
 10334  0050' 0E14               	movlw	20
 10335  0052' 5C00'              	subwf	ambientCal@i^0,w,c
 10336  0054' A0D8               	btfss	status,0,c
 10337  0056' EF00' F000'        	goto	u5051
 10338  005A' EF00' F000'        	goto	u5050
 10339  005E'                    u5051:
 10340  005E' EF00' F000'        	goto	l4701
 10341  0062'                    u5050:
 10342  0062'                    
 10343                           ;MazeRobot.X/color.c: 105:             LATDbits.LATD7 = !LATDbits.LATD7;
 10344  0062' AE7C               	btfss	124,7,c	;volatile
 10345  0064' EF00' F000'        	goto	u5061
 10346  0068' EF00' F000'        	goto	u5060
 10347  006C'                    u5061:
 10348  006C' 6A00'              	clrf	??_ambientCal^0,c
 10349  006E' 2A00'              	incf	??_ambientCal^0,f,c
 10350  0070' EF00' F000'        	goto	u5078
 10351  0074'                    u5060:
 10352  0074' 6A00'              	clrf	??_ambientCal^0,c
 10353  0076'                    u5078:
 10354  0076' 3200'              	rrcf	??_ambientCal^0,f,c
 10355  0078' 3200'              	rrcf	??_ambientCal^0,f,c
 10356  007A' 507C               	movf	124,w,c	;volatile
 10357  007C' 1800'              	xorwf	??_ambientCal^0,w,c
 10358  007E' 0B7F               	andlw	-129
 10359  0080' 1800'              	xorwf	??_ambientCal^0,w,c
 10360  0082' 6E7C               	movwf	124,c	;volatile
 10361  0084'                    
 10362                           ;MazeRobot.X/color.c: 106:             _delay((unsigned long)((500)*(64000000/4000.0)));
 10363  0084' 0E29               	movlw	41
 10364  0086' 6E00'              	movwf	(??_ambientCal+1)^0,c
 10365  0088' 0E96               	movlw	150
 10366  008A' 6E00'              	movwf	??_ambientCal^0,c
 10367  008C' 0E7F               	movlw	127
 10368  008E'                    u6847:
 10369  008E' 2EE8               	decfsz	wreg,f,c
 10370  0090' D7FE               	bra	u6847
 10371  0092' 2E00'              	decfsz	??_ambientCal^0,f,c
 10372  0094' D7FC               	bra	u6847
 10373  0096' 2E00'              	decfsz	(??_ambientCal+1)^0,f,c
 10374  0098' D7FA               	bra	u6847
 10375  009A' F000               	nop	
 10376  009C'                    
 10377                           ;MazeRobot.X/color.c: 107:             getColor(v);
 10378  009C' C011' F00F'        	movff	ambientCal@v,getColor@v
 10379  00A0' C012' F010'        	movff	ambientCal@v+1,getColor@v+1
 10380  00A4' EC00' F000'        	call	_getColor	;wreg free
 10381  00A8'                    
 10382                           ;MazeRobot.X/color.c: 108:             _delay((unsigned long)((500)*(64000000/4000.0)));
 10383  00A8' 0E29               	movlw	41
 10384  00AA' 6E00'              	movwf	(??_ambientCal+1)^0,c
 10385  00AC' 0E96               	movlw	150
 10386  00AE' 6E00'              	movwf	??_ambientCal^0,c
 10387  00B0' 0E7F               	movlw	127
 10388  00B2'                    u6857:
 10389  00B2' 2EE8               	decfsz	wreg,f,c
 10390  00B4' D7FE               	bra	u6857
 10391  00B6' 2E00'              	decfsz	??_ambientCal^0,f,c
 10392  00B8' D7FC               	bra	u6857
 10393  00BA' 2E00'              	decfsz	(??_ambientCal+1)^0,f,c
 10394  00BC' D7FA               	bra	u6857
 10395  00BE' F000               	nop	
 10396  00C0'                    
 10397                           ;MazeRobot.X/color.c: 109:             LATDbits.LATD7 = !LATDbits.LATD7;
 10398  00C0' AE7C               	btfss	124,7,c	;volatile
 10399  00C2' EF00' F000'        	goto	u5081
 10400  00C6' EF00' F000'        	goto	u5080
 10401  00CA'                    u5081:
 10402  00CA' 6A00'              	clrf	??_ambientCal^0,c
 10403  00CC' 2A00'              	incf	??_ambientCal^0,f,c
 10404  00CE' EF00' F000'        	goto	u5098
 10405  00D2'                    u5080:
 10406  00D2' 6A00'              	clrf	??_ambientCal^0,c
 10407  00D4'                    u5098:
 10408  00D4' 3200'              	rrcf	??_ambientCal^0,f,c
 10409  00D6' 3200'              	rrcf	??_ambientCal^0,f,c
 10410  00D8' 507C               	movf	124,w,c	;volatile
 10411  00DA' 1800'              	xorwf	??_ambientCal^0,w,c
 10412  00DC' 0B7F               	andlw	-129
 10413  00DE' 1800'              	xorwf	??_ambientCal^0,w,c
 10414  00E0' 6E7C               	movwf	124,c	;volatile
 10415  00E2' 0012               	return		;funcret
 10416  00E4'                    __end_of_ambientCal:
 10417                           	callstack 0
 10418                           
 10419 ;; *************** function _getColor *****************
 10420 ;; Defined at:
 10421 ;;		line 90 in file "MazeRobot.X/color.c"
 10422 ;; Parameters:    Size  Location     Type
 10423 ;;  v               2   15[COMRAM] PTR struct RGB
 10424 ;;		 -> main@whiteRGBVal(8), main@ambientRGBVal(8), main@RGBVal(8), colorDetect@RGBVal(8), 
 10425 ;; Auto vars:     Size  Location     Type
 10426 ;;		None
 10427 ;; Return value:  Size  Location     Type
 10428 ;;                  1    wreg      void 
 10429 ;; Registers used:
 10430 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10431 ;; Tracked objects:
 10432 ;;		On entry : 0/0
 10433 ;;		On exit  : 0/0
 10434 ;;		Unchanged: 0/0
 10435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10436 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10439 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10440 ;;Total ram usage:        2 bytes
 10441 ;; Hardware stack levels used: 1
 10442 ;; Hardware stack levels required when called: 5
 10443 ;; This function calls:
 10444 ;;		_color_read_Blue
 10445 ;;		_color_read_Clear
 10446 ;;		_color_read_Green
 10447 ;;		_color_read_Red
 10448 ;; This function is called by:
 10449 ;;		_ambientCal
 10450 ;;		_whiteCal
 10451 ;;		_colorDetect
 10452 ;;		_main
 10453 ;; This function uses a non-reentrant model
 10454 ;;
 10455                           
 10456                           	psect	text41
 10457  0000'                    __ptext41:
 10458                           	callstack 0
 10459  0000'                    _getColor:
 10460                           	callstack 24
 10461  0000'                    
 10462                           ;MazeRobot.X/color.c: 91:     v->R = color_read_Red();
 10463  0000' EC00' F000'        	call	_color_read_Red	;wreg free
 10464  0004' C00F' FFD9         	movff	getColor@v,fsr2l
 10465  0008' C010' FFDA         	movff	getColor@v+1,fsr2h
 10466  000C' C008' FFDE         	movff	?_color_read_Red,postinc2
 10467  0010' C009' FFDD         	movff	?_color_read_Red+1,postdec2
 10468                           
 10469                           ;MazeRobot.X/color.c: 92:     v->G = color_read_Green();
 10470  0014' EC00' F000'        	call	_color_read_Green	;wreg free
 10471  0018' EE20 F002          	lfsr	2,2
 10472  001C' 5000'              	movf	getColor@v^0,w,c
 10473  001E' 26D9               	addwf	fsr2l,f,c
 10474  0020' 5000'              	movf	(getColor@v+1)^0,w,c
 10475  0022' 22DA               	addwfc	fsr2h,f,c
 10476  0024' C008' FFDE         	movff	?_color_read_Green,postinc2
 10477  0028' C009' FFDD         	movff	?_color_read_Green+1,postdec2
 10478                           
 10479                           ;MazeRobot.X/color.c: 93:     v->B = color_read_Blue();
 10480  002C' EC00' F000'        	call	_color_read_Blue	;wreg free
 10481  0030' EE20 F004          	lfsr	2,4
 10482  0034' 5000'              	movf	getColor@v^0,w,c
 10483  0036' 26D9               	addwf	fsr2l,f,c
 10484  0038' 5000'              	movf	(getColor@v+1)^0,w,c
 10485  003A' 22DA               	addwfc	fsr2h,f,c
 10486  003C' C008' FFDE         	movff	?_color_read_Blue,postinc2
 10487  0040' C009' FFDD         	movff	?_color_read_Blue+1,postdec2
 10488                           
 10489                           ;MazeRobot.X/color.c: 94:     v->C = color_read_Clear();
 10490  0044' EC00' F000'        	call	_color_read_Clear	;wreg free
 10491  0048' EE20 F006          	lfsr	2,6
 10492  004C' 5000'              	movf	getColor@v^0,w,c
 10493  004E' 26D9               	addwf	fsr2l,f,c
 10494  0050' 5000'              	movf	(getColor@v+1)^0,w,c
 10495  0052' 22DA               	addwfc	fsr2h,f,c
 10496  0054' C008' FFDE         	movff	?_color_read_Clear,postinc2
 10497  0058' C009' FFDD         	movff	?_color_read_Clear+1,postdec2
 10498  005C' 0012               	return		;funcret
 10499  005E'                    __end_of_getColor:
 10500                           	callstack 0
 10501                           
 10502 ;; *************** function _color_read_Red *****************
 10503 ;; Defined at:
 10504 ;;		line 32 in file "MazeRobot.X/color.c"
 10505 ;; Parameters:    Size  Location     Type
 10506 ;;		None
 10507 ;; Auto vars:     Size  Location     Type
 10508 ;;  tmp             2   13[COMRAM] unsigned int 
 10509 ;; Return value:  Size  Location     Type
 10510 ;;                  2    8[COMRAM] unsigned int 
 10511 ;; Registers used:
 10512 ;;		wreg, status,2, status,0, cstack
 10513 ;; Tracked objects:
 10514 ;;		On entry : 0/0
 10515 ;;		On exit  : 0/0
 10516 ;;		Unchanged: 0/0
 10517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10518 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10519 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10520 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10521 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10522 ;;Total ram usage:        7 bytes
 10523 ;; Hardware stack levels used: 1
 10524 ;; Hardware stack levels required when called: 4
 10525 ;; This function calls:
 10526 ;;		_I2C_2_Master_Read
 10527 ;;		_I2C_2_Master_RepStart
 10528 ;;		_I2C_2_Master_Start
 10529 ;;		_I2C_2_Master_Stop
 10530 ;;		_I2C_2_Master_Write
 10531 ;; This function is called by:
 10532 ;;		_getColor
 10533 ;; This function uses a non-reentrant model
 10534 ;;
 10535                           
 10536                           	psect	text42
 10537  0000'                    __ptext42:
 10538                           	callstack 0
 10539  0000'                    _color_read_Red:
 10540                           	callstack 24
 10541  0000'                    
 10542                           ;MazeRobot.X/color.c: 34:  unsigned int tmp;;MazeRobot.X/color.c: 35:  I2C_2_Master_Star
      +                          t();
 10543  0000' EC00' F000'        	call	_I2C_2_Master_Start	;wreg free
 10544                           
 10545                           ;MazeRobot.X/color.c: 36:  I2C_2_Master_Write(0x52 | 0x00);
 10546  0004' 0E52               	movlw	82
 10547  0006' EC00' F000'        	call	_I2C_2_Master_Write
 10548                           
 10549                           ;MazeRobot.X/color.c: 37:  I2C_2_Master_Write(0xA0 | 0x16);
 10550  000A' 0EB6               	movlw	182
 10551  000C' EC00' F000'        	call	_I2C_2_Master_Write
 10552                           
 10553                           ;MazeRobot.X/color.c: 38:  I2C_2_Master_RepStart();
 10554  0010' EC00' F000'        	call	_I2C_2_Master_RepStart	;wreg free
 10555                           
 10556                           ;MazeRobot.X/color.c: 39:  I2C_2_Master_Write(0x52 | 0x01);
 10557  0014' 0E53               	movlw	83
 10558  0016' EC00' F000'        	call	_I2C_2_Master_Write
 10559                           
 10560                           ;MazeRobot.X/color.c: 40:  tmp=I2C_2_Master_Read(1);
 10561  001A' 0E01               	movlw	1
 10562  001C' EC00' F000'        	call	_I2C_2_Master_Read
 10563  0020' 6E00'              	movwf	??_color_read_Red^0,c
 10564  0022' 5000'              	movf	??_color_read_Red^0,w,c
 10565  0024' 6E00'              	movwf	color_read_Red@tmp^0,c
 10566  0026' 6A00'              	clrf	(color_read_Red@tmp+1)^0,c
 10567                           
 10568                           ;MazeRobot.X/color.c: 41:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10569  0028' 0E00               	movlw	0
 10570  002A' EC00' F000'        	call	_I2C_2_Master_Read
 10571  002E' 6E00'              	movwf	??_color_read_Red^0,c
 10572  0030' 5000'              	movf	??_color_read_Red^0,w,c
 10573  0032' 6E00'              	movwf	(??_color_read_Red+2)^0,c
 10574  0034' 6A00'              	clrf	(??_color_read_Red+1)^0,c
 10575  0036' 5000'              	movf	color_read_Red@tmp^0,w,c
 10576  0038' 1000'              	iorwf	(??_color_read_Red+1)^0,w,c
 10577  003A' 6E00'              	movwf	color_read_Red@tmp^0,c
 10578  003C' 5000'              	movf	(color_read_Red@tmp+1)^0,w,c
 10579  003E' 1000'              	iorwf	(??_color_read_Red+2)^0,w,c
 10580  0040' 6E00'              	movwf	(color_read_Red@tmp+1)^0,c
 10581                           
 10582                           ;MazeRobot.X/color.c: 42:  I2C_2_Master_Stop();
 10583  0042' EC00' F000'        	call	_I2C_2_Master_Stop	;wreg free
 10584  0046'                    
 10585                           ;MazeRobot.X/color.c: 43:  return tmp;
 10586  0046' C00D' F008'        	movff	color_read_Red@tmp,?_color_read_Red
 10587  004A' C00E' F009'        	movff	color_read_Red@tmp+1,?_color_read_Red+1
 10588  004E' 0012               	return		;funcret
 10589  0050'                    __end_of_color_read_Red:
 10590                           	callstack 0
 10591                           
 10592 ;; *************** function _color_read_Green *****************
 10593 ;; Defined at:
 10594 ;;		line 46 in file "MazeRobot.X/color.c"
 10595 ;; Parameters:    Size  Location     Type
 10596 ;;		None
 10597 ;; Auto vars:     Size  Location     Type
 10598 ;;  tmp             2   13[COMRAM] unsigned int 
 10599 ;; Return value:  Size  Location     Type
 10600 ;;                  2    8[COMRAM] unsigned int 
 10601 ;; Registers used:
 10602 ;;		wreg, status,2, status,0, cstack
 10603 ;; Tracked objects:
 10604 ;;		On entry : 0/0
 10605 ;;		On exit  : 0/0
 10606 ;;		Unchanged: 0/0
 10607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10608 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10609 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10610 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10611 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10612 ;;Total ram usage:        7 bytes
 10613 ;; Hardware stack levels used: 1
 10614 ;; Hardware stack levels required when called: 4
 10615 ;; This function calls:
 10616 ;;		_I2C_2_Master_Read
 10617 ;;		_I2C_2_Master_RepStart
 10618 ;;		_I2C_2_Master_Start
 10619 ;;		_I2C_2_Master_Stop
 10620 ;;		_I2C_2_Master_Write
 10621 ;; This function is called by:
 10622 ;;		_getColor
 10623 ;; This function uses a non-reentrant model
 10624 ;;
 10625                           
 10626                           	psect	text43
 10627  0000'                    __ptext43:
 10628                           	callstack 0
 10629  0000'                    _color_read_Green:
 10630                           	callstack 24
 10631  0000'                    
 10632                           ;MazeRobot.X/color.c: 48:  unsigned int tmp;;MazeRobot.X/color.c: 49:  I2C_2_Master_Star
      +                          t();
 10633  0000' EC00' F000'        	call	_I2C_2_Master_Start	;wreg free
 10634                           
 10635                           ;MazeRobot.X/color.c: 50:  I2C_2_Master_Write(0x52 | 0x00);
 10636  0004' 0E52               	movlw	82
 10637  0006' EC00' F000'        	call	_I2C_2_Master_Write
 10638                           
 10639                           ;MazeRobot.X/color.c: 51:  I2C_2_Master_Write(0xA0 | 0x18);
 10640  000A' 0EB8               	movlw	184
 10641  000C' EC00' F000'        	call	_I2C_2_Master_Write
 10642                           
 10643                           ;MazeRobot.X/color.c: 52:  I2C_2_Master_RepStart();
 10644  0010' EC00' F000'        	call	_I2C_2_Master_RepStart	;wreg free
 10645                           
 10646                           ;MazeRobot.X/color.c: 53:  I2C_2_Master_Write(0x52 | 0x01);
 10647  0014' 0E53               	movlw	83
 10648  0016' EC00' F000'        	call	_I2C_2_Master_Write
 10649                           
 10650                           ;MazeRobot.X/color.c: 54:  tmp=I2C_2_Master_Read(1);
 10651  001A' 0E01               	movlw	1
 10652  001C' EC00' F000'        	call	_I2C_2_Master_Read
 10653  0020' 6E00'              	movwf	??_color_read_Green^0,c
 10654  0022' 5000'              	movf	??_color_read_Green^0,w,c
 10655  0024' 6E00'              	movwf	color_read_Green@tmp^0,c
 10656  0026' 6A00'              	clrf	(color_read_Green@tmp+1)^0,c
 10657                           
 10658                           ;MazeRobot.X/color.c: 55:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10659  0028' 0E00               	movlw	0
 10660  002A' EC00' F000'        	call	_I2C_2_Master_Read
 10661  002E' 6E00'              	movwf	??_color_read_Green^0,c
 10662  0030' 5000'              	movf	??_color_read_Green^0,w,c
 10663  0032' 6E00'              	movwf	(??_color_read_Green+2)^0,c
 10664  0034' 6A00'              	clrf	(??_color_read_Green+1)^0,c
 10665  0036' 5000'              	movf	color_read_Green@tmp^0,w,c
 10666  0038' 1000'              	iorwf	(??_color_read_Green+1)^0,w,c
 10667  003A' 6E00'              	movwf	color_read_Green@tmp^0,c
 10668  003C' 5000'              	movf	(color_read_Green@tmp+1)^0,w,c
 10669  003E' 1000'              	iorwf	(??_color_read_Green+2)^0,w,c
 10670  0040' 6E00'              	movwf	(color_read_Green@tmp+1)^0,c
 10671                           
 10672                           ;MazeRobot.X/color.c: 56:  I2C_2_Master_Stop();
 10673  0042' EC00' F000'        	call	_I2C_2_Master_Stop	;wreg free
 10674  0046'                    
 10675                           ;MazeRobot.X/color.c: 57:  return tmp;
 10676  0046' C00D' F008'        	movff	color_read_Green@tmp,?_color_read_Green
 10677  004A' C00E' F009'        	movff	color_read_Green@tmp+1,?_color_read_Green+1
 10678  004E' 0012               	return		;funcret
 10679  0050'                    __end_of_color_read_Green:
 10680                           	callstack 0
 10681                           
 10682 ;; *************** function _color_read_Clear *****************
 10683 ;; Defined at:
 10684 ;;		line 75 in file "MazeRobot.X/color.c"
 10685 ;; Parameters:    Size  Location     Type
 10686 ;;		None
 10687 ;; Auto vars:     Size  Location     Type
 10688 ;;  tmp             2   13[COMRAM] unsigned int 
 10689 ;; Return value:  Size  Location     Type
 10690 ;;                  2    8[COMRAM] unsigned int 
 10691 ;; Registers used:
 10692 ;;		wreg, status,2, status,0, cstack
 10693 ;; Tracked objects:
 10694 ;;		On entry : 0/0
 10695 ;;		On exit  : 0/0
 10696 ;;		Unchanged: 0/0
 10697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10698 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10699 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10700 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10701 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10702 ;;Total ram usage:        7 bytes
 10703 ;; Hardware stack levels used: 1
 10704 ;; Hardware stack levels required when called: 4
 10705 ;; This function calls:
 10706 ;;		_I2C_2_Master_Read
 10707 ;;		_I2C_2_Master_RepStart
 10708 ;;		_I2C_2_Master_Start
 10709 ;;		_I2C_2_Master_Stop
 10710 ;;		_I2C_2_Master_Write
 10711 ;; This function is called by:
 10712 ;;		_getColor
 10713 ;; This function uses a non-reentrant model
 10714 ;;
 10715                           
 10716                           	psect	text44
 10717  0000'                    __ptext44:
 10718                           	callstack 0
 10719  0000'                    _color_read_Clear:
 10720                           	callstack 24
 10721  0000'                    
 10722                           ;MazeRobot.X/color.c: 77:  unsigned int tmp;;MazeRobot.X/color.c: 78:  I2C_2_Master_Star
      +                          t();
 10723  0000' EC00' F000'        	call	_I2C_2_Master_Start	;wreg free
 10724                           
 10725                           ;MazeRobot.X/color.c: 79:  I2C_2_Master_Write(0x52 | 0x00);
 10726  0004' 0E52               	movlw	82
 10727  0006' EC00' F000'        	call	_I2C_2_Master_Write
 10728                           
 10729                           ;MazeRobot.X/color.c: 80:  I2C_2_Master_Write(0xA0 | 0x14);
 10730  000A' 0EB4               	movlw	180
 10731  000C' EC00' F000'        	call	_I2C_2_Master_Write
 10732                           
 10733                           ;MazeRobot.X/color.c: 81:  I2C_2_Master_RepStart();
 10734  0010' EC00' F000'        	call	_I2C_2_Master_RepStart	;wreg free
 10735                           
 10736                           ;MazeRobot.X/color.c: 82:  I2C_2_Master_Write(0x52 | 0x01);
 10737  0014' 0E53               	movlw	83
 10738  0016' EC00' F000'        	call	_I2C_2_Master_Write
 10739                           
 10740                           ;MazeRobot.X/color.c: 83:  tmp=I2C_2_Master_Read(1);
 10741  001A' 0E01               	movlw	1
 10742  001C' EC00' F000'        	call	_I2C_2_Master_Read
 10743  0020' 6E00'              	movwf	??_color_read_Clear^0,c
 10744  0022' 5000'              	movf	??_color_read_Clear^0,w,c
 10745  0024' 6E00'              	movwf	color_read_Clear@tmp^0,c
 10746  0026' 6A00'              	clrf	(color_read_Clear@tmp+1)^0,c
 10747                           
 10748                           ;MazeRobot.X/color.c: 84:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10749  0028' 0E00               	movlw	0
 10750  002A' EC00' F000'        	call	_I2C_2_Master_Read
 10751  002E' 6E00'              	movwf	??_color_read_Clear^0,c
 10752  0030' 5000'              	movf	??_color_read_Clear^0,w,c
 10753  0032' 6E00'              	movwf	(??_color_read_Clear+2)^0,c
 10754  0034' 6A00'              	clrf	(??_color_read_Clear+1)^0,c
 10755  0036' 5000'              	movf	color_read_Clear@tmp^0,w,c
 10756  0038' 1000'              	iorwf	(??_color_read_Clear+1)^0,w,c
 10757  003A' 6E00'              	movwf	color_read_Clear@tmp^0,c
 10758  003C' 5000'              	movf	(color_read_Clear@tmp+1)^0,w,c
 10759  003E' 1000'              	iorwf	(??_color_read_Clear+2)^0,w,c
 10760  0040' 6E00'              	movwf	(color_read_Clear@tmp+1)^0,c
 10761                           
 10762                           ;MazeRobot.X/color.c: 85:  I2C_2_Master_Stop();
 10763  0042' EC00' F000'        	call	_I2C_2_Master_Stop	;wreg free
 10764  0046'                    
 10765                           ;MazeRobot.X/color.c: 86:  return tmp;
 10766  0046' C00D' F008'        	movff	color_read_Clear@tmp,?_color_read_Clear
 10767  004A' C00E' F009'        	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
 10768  004E' 0012               	return		;funcret
 10769  0050'                    __end_of_color_read_Clear:
 10770                           	callstack 0
 10771                           
 10772 ;; *************** function _color_read_Blue *****************
 10773 ;; Defined at:
 10774 ;;		line 61 in file "MazeRobot.X/color.c"
 10775 ;; Parameters:    Size  Location     Type
 10776 ;;		None
 10777 ;; Auto vars:     Size  Location     Type
 10778 ;;  tmp             2   13[COMRAM] unsigned int 
 10779 ;; Return value:  Size  Location     Type
 10780 ;;                  2    8[COMRAM] unsigned int 
 10781 ;; Registers used:
 10782 ;;		wreg, status,2, status,0, cstack
 10783 ;; Tracked objects:
 10784 ;;		On entry : 0/0
 10785 ;;		On exit  : 0/0
 10786 ;;		Unchanged: 0/0
 10787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10788 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10789 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10790 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10791 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10792 ;;Total ram usage:        7 bytes
 10793 ;; Hardware stack levels used: 1
 10794 ;; Hardware stack levels required when called: 4
 10795 ;; This function calls:
 10796 ;;		_I2C_2_Master_Read
 10797 ;;		_I2C_2_Master_RepStart
 10798 ;;		_I2C_2_Master_Start
 10799 ;;		_I2C_2_Master_Stop
 10800 ;;		_I2C_2_Master_Write
 10801 ;; This function is called by:
 10802 ;;		_getColor
 10803 ;; This function uses a non-reentrant model
 10804 ;;
 10805                           
 10806                           	psect	text45
 10807  0000'                    __ptext45:
 10808                           	callstack 0
 10809  0000'                    _color_read_Blue:
 10810                           	callstack 24
 10811  0000'                    
 10812                           ;MazeRobot.X/color.c: 63:  unsigned int tmp;;MazeRobot.X/color.c: 64:  I2C_2_Master_Star
      +                          t();
 10813  0000' EC00' F000'        	call	_I2C_2_Master_Start	;wreg free
 10814                           
 10815                           ;MazeRobot.X/color.c: 65:  I2C_2_Master_Write(0x52 | 0x00);
 10816  0004' 0E52               	movlw	82
 10817  0006' EC00' F000'        	call	_I2C_2_Master_Write
 10818                           
 10819                           ;MazeRobot.X/color.c: 66:  I2C_2_Master_Write(0xA0 | 0x1A);
 10820  000A' 0EBA               	movlw	186
 10821  000C' EC00' F000'        	call	_I2C_2_Master_Write
 10822                           
 10823                           ;MazeRobot.X/color.c: 67:  I2C_2_Master_RepStart();
 10824  0010' EC00' F000'        	call	_I2C_2_Master_RepStart	;wreg free
 10825                           
 10826                           ;MazeRobot.X/color.c: 68:  I2C_2_Master_Write(0x52 | 0x01);
 10827  0014' 0E53               	movlw	83
 10828  0016' EC00' F000'        	call	_I2C_2_Master_Write
 10829                           
 10830                           ;MazeRobot.X/color.c: 69:  tmp=I2C_2_Master_Read(1);
 10831  001A' 0E01               	movlw	1
 10832  001C' EC00' F000'        	call	_I2C_2_Master_Read
 10833  0020' 6E00'              	movwf	??_color_read_Blue^0,c
 10834  0022' 5000'              	movf	??_color_read_Blue^0,w,c
 10835  0024' 6E00'              	movwf	color_read_Blue@tmp^0,c
 10836  0026' 6A00'              	clrf	(color_read_Blue@tmp+1)^0,c
 10837                           
 10838                           ;MazeRobot.X/color.c: 70:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 10839  0028' 0E00               	movlw	0
 10840  002A' EC00' F000'        	call	_I2C_2_Master_Read
 10841  002E' 6E00'              	movwf	??_color_read_Blue^0,c
 10842  0030' 5000'              	movf	??_color_read_Blue^0,w,c
 10843  0032' 6E00'              	movwf	(??_color_read_Blue+2)^0,c
 10844  0034' 6A00'              	clrf	(??_color_read_Blue+1)^0,c
 10845  0036' 5000'              	movf	color_read_Blue@tmp^0,w,c
 10846  0038' 1000'              	iorwf	(??_color_read_Blue+1)^0,w,c
 10847  003A' 6E00'              	movwf	color_read_Blue@tmp^0,c
 10848  003C' 5000'              	movf	(color_read_Blue@tmp+1)^0,w,c
 10849  003E' 1000'              	iorwf	(??_color_read_Blue+2)^0,w,c
 10850  0040' 6E00'              	movwf	(color_read_Blue@tmp+1)^0,c
 10851                           
 10852                           ;MazeRobot.X/color.c: 71:  I2C_2_Master_Stop();
 10853  0042' EC00' F000'        	call	_I2C_2_Master_Stop	;wreg free
 10854  0046'                    
 10855                           ;MazeRobot.X/color.c: 72:  return tmp;
 10856  0046' C00D' F008'        	movff	color_read_Blue@tmp,?_color_read_Blue
 10857  004A' C00E' F009'        	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
 10858  004E' 0012               	return		;funcret
 10859  0050'                    __end_of_color_read_Blue:
 10860                           	callstack 0
 10861                           
 10862 ;; *************** function _I2C_2_Master_Write *****************
 10863 ;; Defined at:
 10864 ;;		line 45 in file "MazeRobot.X/i2c.c"
 10865 ;; Parameters:    Size  Location     Type
 10866 ;;  data_byte       1    wreg     unsigned char 
 10867 ;; Auto vars:     Size  Location     Type
 10868 ;;  data_byte       1    5[COMRAM] unsigned char 
 10869 ;; Return value:  Size  Location     Type
 10870 ;;                  1    wreg      void 
 10871 ;; Registers used:
 10872 ;;		wreg, status,2, status,0, cstack
 10873 ;; Tracked objects:
 10874 ;;		On entry : 0/0
 10875 ;;		On exit  : 0/0
 10876 ;;		Unchanged: 0/0
 10877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10879 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10881 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10882 ;;Total ram usage:        1 bytes
 10883 ;; Hardware stack levels used: 1
 10884 ;; Hardware stack levels required when called: 3
 10885 ;; This function calls:
 10886 ;;		_I2C_2_Master_Idle
 10887 ;; This function is called by:
 10888 ;;		_color_writetoaddr
 10889 ;;		_color_read_Red
 10890 ;;		_color_read_Green
 10891 ;;		_color_read_Blue
 10892 ;;		_color_read_Clear
 10893 ;; This function uses a non-reentrant model
 10894 ;;
 10895                           
 10896                           	psect	text46
 10897  0000'                    __ptext46:
 10898                           	callstack 0
 10899  0000'                    _I2C_2_Master_Write:
 10900                           	callstack 24
 10901                           
 10902                           ;incstack = 0
 10903                           ;I2C_2_Master_Write@data_byte stored from wreg
 10904  0000' 6E00'              	movwf	I2C_2_Master_Write@data_byte^0,c
 10905  0002'                    
 10906                           ;MazeRobot.X/i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);MazeRobot.X/i2c
      +                          .c: 46: {;MazeRobot.X/i2c.c: 47:   I2C_2_Master_Idle();
 10907  0002' EC00' F000'        	call	_I2C_2_Master_Idle	;wreg free
 10908  0006'                    
 10909                           ;MazeRobot.X/i2c.c: 48:   SSP2BUF = data_byte;
 10910  0006' C005' FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
 10911  000A' 0012               	return		;funcret
 10912  000C'                    __end_of_I2C_2_Master_Write:
 10913                           	callstack 0
 10914                           
 10915 ;; *************** function _I2C_2_Master_Stop *****************
 10916 ;; Defined at:
 10917 ;;		line 39 in file "MazeRobot.X/i2c.c"
 10918 ;; Parameters:    Size  Location     Type
 10919 ;;		None
 10920 ;; Auto vars:     Size  Location     Type
 10921 ;;		None
 10922 ;; Return value:  Size  Location     Type
 10923 ;;                  1    wreg      void 
 10924 ;; Registers used:
 10925 ;;		wreg, status,2, status,0, cstack
 10926 ;; Tracked objects:
 10927 ;;		On entry : 0/0
 10928 ;;		On exit  : 0/0
 10929 ;;		Unchanged: 0/0
 10930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10932 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10934 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10935 ;;Total ram usage:        0 bytes
 10936 ;; Hardware stack levels used: 1
 10937 ;; Hardware stack levels required when called: 3
 10938 ;; This function calls:
 10939 ;;		_I2C_2_Master_Idle
 10940 ;; This function is called by:
 10941 ;;		_color_writetoaddr
 10942 ;;		_color_read_Red
 10943 ;;		_color_read_Green
 10944 ;;		_color_read_Blue
 10945 ;;		_color_read_Clear
 10946 ;; This function uses a non-reentrant model
 10947 ;;
 10948                           
 10949                           	psect	text47
 10950  0000'                    __ptext47:
 10951                           	callstack 0
 10952  0000'                    _I2C_2_Master_Stop:
 10953                           	callstack 24
 10954  0000'                    
 10955                           ;MazeRobot.X/i2c.c: 41:   I2C_2_Master_Idle();
 10956  0000' EC00' F000'        	call	_I2C_2_Master_Idle	;wreg free
 10957  0004'                    
 10958                           ;MazeRobot.X/i2c.c: 42:   SSP2CON2bits.PEN = 1;
 10959  0004' 010E               	movlb	14	; () banked
 10960  0006' 85DA               	bsf	218,2,b	;volatile
 10961  0008'                    
 10962                           ; BSR set to: 14
 10963  0008' 0012               	return		;funcret
 10964  000A'                    __end_of_I2C_2_Master_Stop:
 10965                           	callstack 0
 10966                           
 10967 ;; *************** function _I2C_2_Master_Start *****************
 10968 ;; Defined at:
 10969 ;;		line 27 in file "MazeRobot.X/i2c.c"
 10970 ;; Parameters:    Size  Location     Type
 10971 ;;		None
 10972 ;; Auto vars:     Size  Location     Type
 10973 ;;		None
 10974 ;; Return value:  Size  Location     Type
 10975 ;;                  1    wreg      void 
 10976 ;; Registers used:
 10977 ;;		wreg, status,2, status,0, cstack
 10978 ;; Tracked objects:
 10979 ;;		On entry : 0/0
 10980 ;;		On exit  : 0/0
 10981 ;;		Unchanged: 0/0
 10982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10986 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10987 ;;Total ram usage:        0 bytes
 10988 ;; Hardware stack levels used: 1
 10989 ;; Hardware stack levels required when called: 3
 10990 ;; This function calls:
 10991 ;;		_I2C_2_Master_Idle
 10992 ;; This function is called by:
 10993 ;;		_color_writetoaddr
 10994 ;;		_color_read_Red
 10995 ;;		_color_read_Green
 10996 ;;		_color_read_Blue
 10997 ;;		_color_read_Clear
 10998 ;; This function uses a non-reentrant model
 10999 ;;
 11000                           
 11001                           	psect	text48
 11002  0000'                    __ptext48:
 11003                           	callstack 0
 11004  0000'                    _I2C_2_Master_Start:
 11005                           	callstack 24
 11006  0000'                    
 11007                           ;MazeRobot.X/i2c.c: 29:   I2C_2_Master_Idle();
 11008  0000' EC00' F000'        	call	_I2C_2_Master_Idle	;wreg free
 11009  0004'                    
 11010                           ;MazeRobot.X/i2c.c: 30:   SSP2CON2bits.SEN = 1;
 11011  0004' 010E               	movlb	14	; () banked
 11012  0006' 81DA               	bsf	218,0,b	;volatile
 11013  0008'                    
 11014                           ; BSR set to: 14
 11015  0008' 0012               	return		;funcret
 11016  000A'                    __end_of_I2C_2_Master_Start:
 11017                           	callstack 0
 11018                           
 11019 ;; *************** function _I2C_2_Master_RepStart *****************
 11020 ;; Defined at:
 11021 ;;		line 33 in file "MazeRobot.X/i2c.c"
 11022 ;; Parameters:    Size  Location     Type
 11023 ;;		None
 11024 ;; Auto vars:     Size  Location     Type
 11025 ;;		None
 11026 ;; Return value:  Size  Location     Type
 11027 ;;                  1    wreg      void 
 11028 ;; Registers used:
 11029 ;;		wreg, status,2, status,0, cstack
 11030 ;; Tracked objects:
 11031 ;;		On entry : 0/0
 11032 ;;		On exit  : 0/0
 11033 ;;		Unchanged: 0/0
 11034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11036 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11038 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11039 ;;Total ram usage:        0 bytes
 11040 ;; Hardware stack levels used: 1
 11041 ;; Hardware stack levels required when called: 3
 11042 ;; This function calls:
 11043 ;;		_I2C_2_Master_Idle
 11044 ;; This function is called by:
 11045 ;;		_color_read_Red
 11046 ;;		_color_read_Green
 11047 ;;		_color_read_Blue
 11048 ;;		_color_read_Clear
 11049 ;; This function uses a non-reentrant model
 11050 ;;
 11051                           
 11052                           	psect	text49
 11053  0000'                    __ptext49:
 11054                           	callstack 0
 11055  0000'                    _I2C_2_Master_RepStart:
 11056                           	callstack 24
 11057  0000'                    
 11058                           ;MazeRobot.X/i2c.c: 35:   I2C_2_Master_Idle();
 11059  0000' EC00' F000'        	call	_I2C_2_Master_Idle	;wreg free
 11060  0004'                    
 11061                           ;MazeRobot.X/i2c.c: 36:   SSP2CON2bits.RSEN = 1;
 11062  0004' 010E               	movlb	14	; () banked
 11063  0006' 83DA               	bsf	218,1,b	;volatile
 11064  0008'                    
 11065                           ; BSR set to: 14
 11066  0008' 0012               	return		;funcret
 11067  000A'                    __end_of_I2C_2_Master_RepStart:
 11068                           	callstack 0
 11069                           
 11070 ;; *************** function _I2C_2_Master_Read *****************
 11071 ;; Defined at:
 11072 ;;		line 51 in file "MazeRobot.X/i2c.c"
 11073 ;; Parameters:    Size  Location     Type
 11074 ;;  ack             1    wreg     unsigned char 
 11075 ;; Auto vars:     Size  Location     Type
 11076 ;;  ack             1    6[COMRAM] unsigned char 
 11077 ;;  tmp             1    7[COMRAM] unsigned char 
 11078 ;; Return value:  Size  Location     Type
 11079 ;;                  1    wreg      unsigned char 
 11080 ;; Registers used:
 11081 ;;		wreg, status,2, status,0, cstack
 11082 ;; Tracked objects:
 11083 ;;		On entry : 0/0
 11084 ;;		On exit  : 0/0
 11085 ;;		Unchanged: 0/0
 11086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11088 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11089 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11090 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11091 ;;Total ram usage:        3 bytes
 11092 ;; Hardware stack levels used: 1
 11093 ;; Hardware stack levels required when called: 3
 11094 ;; This function calls:
 11095 ;;		_I2C_2_Master_Idle
 11096 ;; This function is called by:
 11097 ;;		_color_read_Red
 11098 ;;		_color_read_Green
 11099 ;;		_color_read_Blue
 11100 ;;		_color_read_Clear
 11101 ;; This function uses a non-reentrant model
 11102 ;;
 11103                           
 11104                           	psect	text50
 11105  0000'                    __ptext50:
 11106                           	callstack 0
 11107  0000'                    _I2C_2_Master_Read:
 11108                           	callstack 24
 11109                           
 11110                           ; BSR set to: 14
 11111                           ;incstack = 0
 11112                           ;I2C_2_Master_Read@ack stored from wreg
 11113  0000' 6E00'              	movwf	I2C_2_Master_Read@ack^0,c
 11114  0002'                    
 11115                           ;MazeRobot.X/i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);MazeRobot.X/i
      +                          2c.c: 52: {;MazeRobot.X/i2c.c: 53:   unsigned char tmp;;MazeRobot.X/i2c.c: 54:   I2C_2_M
      +                          aster_Idle();
 11116  0002' EC00' F000'        	call	_I2C_2_Master_Idle	;wreg free
 11117  0006'                    
 11118                           ;MazeRobot.X/i2c.c: 55:   SSP2CON2bits.RCEN = 1;
 11119  0006' 010E               	movlb	14	; () banked
 11120  0008' 87DA               	bsf	218,3,b	;volatile
 11121                           
 11122                           ;MazeRobot.X/i2c.c: 56:   I2C_2_Master_Idle();
 11123  000A' EC00' F000'        	call	_I2C_2_Master_Idle	;wreg free
 11124  000E'                    
 11125                           ;MazeRobot.X/i2c.c: 57:   tmp = SSP2BUF;
 11126  000E' CED5 F007'         	movff	3797,I2C_2_Master_Read@tmp	;volatile
 11127                           
 11128                           ;MazeRobot.X/i2c.c: 58:   I2C_2_Master_Idle();
 11129  0012' EC00' F000'        	call	_I2C_2_Master_Idle	;wreg free
 11130  0016'                    
 11131                           ;MazeRobot.X/i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
 11132  0016' 5000'              	movf	I2C_2_Master_Read@ack^0,w,c
 11133  0018' B4D8               	btfsc	status,2,c
 11134  001A' EF00' F000'        	goto	u4341
 11135  001E' EF00' F000'        	goto	u4340
 11136  0022'                    u4341:
 11137  0022' 6A00'              	clrf	??_I2C_2_Master_Read^0,c
 11138  0024' 2A00'              	incf	??_I2C_2_Master_Read^0,f,c
 11139  0026' EF00' F000'        	goto	u4358
 11140  002A'                    u4340:
 11141  002A' 6A00'              	clrf	??_I2C_2_Master_Read^0,c
 11142  002C'                    u4358:
 11143  002C' 3A00'              	swapf	??_I2C_2_Master_Read^0,f,c
 11144  002E' 4600'              	rlncf	??_I2C_2_Master_Read^0,f,c
 11145  0030' 010E               	movlb	14	; () banked
 11146  0032' 51DA               	movf	218,w,b	;volatile
 11147  0034' 1800'              	xorwf	??_I2C_2_Master_Read^0,w,c
 11148  0036' 0BDF               	andlw	-33
 11149  0038' 1800'              	xorwf	??_I2C_2_Master_Read^0,w,c
 11150  003A' 6FDA               	movwf	218,b	;volatile
 11151  003C'                    
 11152                           ; BSR set to: 14
 11153                           ;MazeRobot.X/i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
 11154  003C' 89DA               	bsf	218,4,b	;volatile
 11155  003E'                    
 11156                           ; BSR set to: 14
 11157                           ;MazeRobot.X/i2c.c: 61:   return tmp;
 11158  003E' 5000'              	movf	I2C_2_Master_Read@tmp^0,w,c
 11159  0040'                    
 11160                           ; BSR set to: 14
 11161  0040' 0012               	return		;funcret
 11162  0042'                    __end_of_I2C_2_Master_Read:
 11163                           	callstack 0
 11164                           
 11165 ;; *************** function _I2C_2_Master_Idle *****************
 11166 ;; Defined at:
 11167 ;;		line 22 in file "MazeRobot.X/i2c.c"
 11168 ;; Parameters:    Size  Location     Type
 11169 ;;		None
 11170 ;; Auto vars:     Size  Location     Type
 11171 ;;		None
 11172 ;; Return value:  Size  Location     Type
 11173 ;;                  1    wreg      void 
 11174 ;; Registers used:
 11175 ;;		wreg, status,2, status,0
 11176 ;; Tracked objects:
 11177 ;;		On entry : 0/0
 11178 ;;		On exit  : 0/0
 11179 ;;		Unchanged: 0/0
 11180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11183 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11184 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11185 ;;Total ram usage:        1 bytes
 11186 ;; Hardware stack levels used: 1
 11187 ;; Hardware stack levels required when called: 2
 11188 ;; This function calls:
 11189 ;;		Nothing
 11190 ;; This function is called by:
 11191 ;;		_I2C_2_Master_Start
 11192 ;;		_I2C_2_Master_RepStart
 11193 ;;		_I2C_2_Master_Stop
 11194 ;;		_I2C_2_Master_Write
 11195 ;;		_I2C_2_Master_Read
 11196 ;; This function uses a non-reentrant model
 11197 ;;
 11198                           
 11199                           	psect	text51
 11200  0000'                    __ptext51:
 11201                           	callstack 0
 11202  0000'                    _I2C_2_Master_Idle:
 11203                           	callstack 24
 11204  0000'                    l254:
 11205  0000' 010E               	movlb	14	; () banked
 11206  0002' B5D8               	btfsc	216,2,b	;volatile
 11207  0004' EF00' F000'        	goto	u3381
 11208  0008' EF00' F000'        	goto	u3380
 11209  000C'                    u3381:
 11210  000C' EF00' F000'        	goto	l254
 11211  0010'                    u3380:
 11212  0010'                    
 11213                           ; BSR set to: 14
 11214  0010' CEDA F004'         	movff	3802,??_I2C_2_Master_Idle	;volatile
 11215  0014' 0E1F               	movlw	31
 11216  0016' 1600'              	andwf	??_I2C_2_Master_Idle^0,f,c
 11217  0018' A4D8               	btfss	status,2,c
 11218  001A' EF00' F000'        	goto	u3391
 11219  001E' EF00' F000'        	goto	u3390
 11220  0022'                    u3391:
 11221  0022' EF00' F000'        	goto	l254
 11222  0026'                    u3390:
 11223  0026'                    
 11224                           ; BSR set to: 14
 11225  0026' 0012               	return		;funcret
 11226  0028'                    __end_of_I2C_2_Master_Idle:
 11227                           	callstack 0
 11228                           
 11229 ;; *************** function _TxBufferedString *****************
 11230 ;; Defined at:
 11231 ;;		line 88 in file "MazeRobot.X/serial.c"
 11232 ;; Parameters:    Size  Location     Type
 11233 ;;  string          2    5[COMRAM] PTR unsigned char 
 11234 ;;		 -> main@string4(20), 
 11235 ;; Auto vars:     Size  Location     Type
 11236 ;;		None
 11237 ;; Return value:  Size  Location     Type
 11238 ;;                  1    wreg      void 
 11239 ;; Registers used:
 11240 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11241 ;; Tracked objects:
 11242 ;;		On entry : 0/0
 11243 ;;		On exit  : 0/0
 11244 ;;		Unchanged: 0/0
 11245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11246 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11247 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11249 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11250 ;;Total ram usage:        2 bytes
 11251 ;; Hardware stack levels used: 1
 11252 ;; Hardware stack levels required when called: 3
 11253 ;; This function calls:
 11254 ;;		_putCharToTxBuf
 11255 ;; This function is called by:
 11256 ;;		_main
 11257 ;; This function uses a non-reentrant model
 11258 ;;
 11259                           
 11260                           	psect	text52
 11261  0000'                    __ptext52:
 11262                           	callstack 0
 11263  0000'                    _TxBufferedString:
 11264                           	callstack 27
 11265  0000'                    
 11266                           ;MazeRobot.X/serial.c: 90:     while(*string != 0){
 11267  0000' EF00' F000'        	goto	l4977
 11268  0004'                    l4973:
 11269                           
 11270                           ;MazeRobot.X/serial.c: 91:   putCharToTxBuf(*string++);}
 11271  0004' C005' FFD9         	movff	TxBufferedString@string,fsr2l
 11272  0008' C006' FFDA         	movff	TxBufferedString@string+1,fsr2h
 11273  000C' 50DF               	movf	indf2,w,c
 11274  000E' EC00' F000'        	call	_putCharToTxBuf
 11275  0012' 4A00'              	infsnz	TxBufferedString@string^0,f,c
 11276  0014' 2A00'              	incf	(TxBufferedString@string+1)^0,f,c
 11277  0016'                    l4977:
 11278                           
 11279                           ;MazeRobot.X/serial.c: 90:     while(*string != 0){
 11280  0016' C005' FFD9         	movff	TxBufferedString@string,fsr2l
 11281  001A' C006' FFDA         	movff	TxBufferedString@string+1,fsr2h
 11282  001E' 50DF               	movf	indf2,w,c
 11283  0020' A4D8               	btfss	status,2,c
 11284  0022' EF00' F000'        	goto	u5571
 11285  0026' EF00' F000'        	goto	u5570
 11286  002A'                    u5571:
 11287  002A' EF00' F000'        	goto	l4973
 11288  002E'                    u5570:
 11289  002E' 0012               	return		;funcret
 11290  0030'                    __end_of_TxBufferedString:
 11291                           	callstack 0
 11292                           
 11293 ;; *************** function _putCharToTxBuf *****************
 11294 ;; Defined at:
 11295 ;;		line 75 in file "MazeRobot.X/serial.c"
 11296 ;; Parameters:    Size  Location     Type
 11297 ;;  byte            1    wreg     unsigned char 
 11298 ;; Auto vars:     Size  Location     Type
 11299 ;;  byte            1    4[COMRAM] unsigned char 
 11300 ;; Return value:  Size  Location     Type
 11301 ;;                  1    wreg      void 
 11302 ;; Registers used:
 11303 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11304 ;; Tracked objects:
 11305 ;;		On entry : 0/0
 11306 ;;		On exit  : 0/0
 11307 ;;		Unchanged: 0/0
 11308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11310 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11312 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11313 ;;Total ram usage:        1 bytes
 11314 ;; Hardware stack levels used: 1
 11315 ;; Hardware stack levels required when called: 2
 11316 ;; This function calls:
 11317 ;;		Nothing
 11318 ;; This function is called by:
 11319 ;;		_TxBufferedString
 11320 ;; This function uses a non-reentrant model
 11321 ;;
 11322                           
 11323                           	psect	text53
 11324  0000'                    __ptext53:
 11325                           	callstack 0
 11326  0000'                    _putCharToTxBuf:
 11327                           	callstack 27
 11328                           
 11329                           ;incstack = 0
 11330                           ;putCharToTxBuf@byte stored from wreg
 11331  0000' 6E00'              	movwf	putCharToTxBuf@byte^0,c
 11332  0002'                    
 11333                           ;MazeRobot.X/serial.c: 76:     if (TxBufWriteCnt>=60) {TxBufWriteCnt=0;}
 11334  0002' 0E3B               	movlw	59
 11335  0004' 6400'              	cpfsgt	_TxBufWriteCnt^0,c	;volatile
 11336  0006' EF00' F000'        	goto	u4891
 11337  000A' EF00' F000'        	goto	u4890
 11338  000E'                    u4891:
 11339  000E' EF00' F000'        	goto	l4621
 11340  0012'                    u4890:
 11341  0012' 0E00               	movlw	0
 11342  0014' 6E00'              	movwf	_TxBufWriteCnt^0,c	;volatile
 11343  0016'                    l4621:
 11344                           
 11345                           ;MazeRobot.X/serial.c: 77:     EUSART4TXbuf[TxBufWriteCnt++]=byte;
 11346  0016' 0E00'              	movlw	low _EUSART4TXbuf
 11347  0018' 2400'              	addwf	_TxBufWriteCnt^0,w,c	;volatile
 11348  001A' 6ED9               	movwf	fsr2l,c
 11349  001C' 6ADA               	clrf	fsr2h,c
 11350  001E' 0E00'              	movlw	high _EUSART4TXbuf
 11351  0020' 22DA               	addwfc	fsr2h,f,c
 11352  0022' C004' FFDF         	movff	putCharToTxBuf@byte,indf2
 11353  0026' 2A00'              	incf	_TxBufWriteCnt^0,f,c	;volatile
 11354  0028' 0012               	return		;funcret
 11355  002A'                    __end_of_putCharToTxBuf:
 11356                           	callstack 0
 11357                           
 11358 ;; *************** function _DCmotorsInit *****************
 11359 ;; Defined at:
 11360 ;;		line 73 in file "MazeRobot.X/dc_motor.c"
 11361 ;; Parameters:    Size  Location     Type
 11362 ;;  mL              2    4[COMRAM] PTR struct DC_motor
 11363 ;;		 -> main@motorLeft(9), 
 11364 ;;  mR              2    6[COMRAM] PTR struct DC_motor
 11365 ;;		 -> main@motorRight(9), 
 11366 ;; Auto vars:     Size  Location     Type
 11367 ;;		None
 11368 ;; Return value:  Size  Location     Type
 11369 ;;                  1    wreg      void 
 11370 ;; Registers used:
 11371 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11372 ;; Tracked objects:
 11373 ;;		On entry : 0/0
 11374 ;;		On exit  : 0/0
 11375 ;;		Unchanged: 0/0
 11376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11377 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11378 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11380 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11381 ;;Total ram usage:        4 bytes
 11382 ;; Hardware stack levels used: 1
 11383 ;; Hardware stack levels required when called: 2
 11384 ;; This function calls:
 11385 ;;		Nothing
 11386 ;; This function is called by:
 11387 ;;		_main
 11388 ;; This function uses a non-reentrant model
 11389 ;;
 11390                           
 11391                           	psect	text54
 11392  0000'                    __ptext54:
 11393                           	callstack 0
 11394  0000'                    _DCmotorsInit:
 11395                           	callstack 28
 11396  0000'                    
 11397                           ;MazeRobot.X/dc_motor.c: 75:     mL->power = 0;
 11398  0000' C004' FFD9         	movff	DCmotorsInit@mL,fsr2l
 11399  0004' C005' FFDA         	movff	DCmotorsInit@mL+1,fsr2h
 11400  0008' 0E00               	movlw	0
 11401  000A' 6EDF               	movwf	indf2,c
 11402  000C'                    
 11403                           ;MazeRobot.X/dc_motor.c: 76:     mL->direction = 1;
 11404  000C' EE20 F001          	lfsr	2,1
 11405  0010' 5000'              	movf	DCmotorsInit@mL^0,w,c
 11406  0012' 26D9               	addwf	fsr2l,f,c
 11407  0014' 5000'              	movf	(DCmotorsInit@mL+1)^0,w,c
 11408  0016' 22DA               	addwfc	fsr2h,f,c
 11409  0018' 0E01               	movlw	1
 11410  001A' 6EDF               	movwf	indf2,c
 11411  001C'                    
 11412                           ;MazeRobot.X/dc_motor.c: 77:     mL->brakemode = 1;
 11413  001C' EE20 F002          	lfsr	2,2
 11414  0020' 5000'              	movf	DCmotorsInit@mL^0,w,c
 11415  0022' 26D9               	addwf	fsr2l,f,c
 11416  0024' 5000'              	movf	(DCmotorsInit@mL+1)^0,w,c
 11417  0026' 22DA               	addwfc	fsr2h,f,c
 11418  0028' 0E01               	movlw	1
 11419  002A' 6EDF               	movwf	indf2,c
 11420  002C'                    
 11421                           ;MazeRobot.X/dc_motor.c: 78:     mL->posDutyHighByte = (unsigned char *)(&CCPR1H);
 11422  002C' EE20 F005          	lfsr	2,5
 11423  0030' 5000'              	movf	DCmotorsInit@mL^0,w,c
 11424  0032' 26D9               	addwf	fsr2l,f,c
 11425  0034' 5000'              	movf	(DCmotorsInit@mL+1)^0,w,c
 11426  0036' 22DA               	addwfc	fsr2h,f,c
 11427  0038' 0EAA               	movlw	170
 11428  003A' 6EDE               	movwf	postinc2,c
 11429  003C' 0E0F               	movlw	15
 11430  003E' 6EDD               	movwf	postdec2,c
 11431  0040'                    
 11432                           ;MazeRobot.X/dc_motor.c: 79:     mL->negDutyHighByte = (unsigned char *)(&CCPR2H);
 11433  0040' EE20 F007          	lfsr	2,7
 11434  0044' 5000'              	movf	DCmotorsInit@mL^0,w,c
 11435  0046' 26D9               	addwf	fsr2l,f,c
 11436  0048' 5000'              	movf	(DCmotorsInit@mL+1)^0,w,c
 11437  004A' 22DA               	addwfc	fsr2h,f,c
 11438  004C' 0EA6               	movlw	166
 11439  004E' 6EDE               	movwf	postinc2,c
 11440  0050' 0E0F               	movlw	15
 11441  0052' 6EDD               	movwf	postdec2,c
 11442  0054'                    
 11443                           ;MazeRobot.X/dc_motor.c: 80:     mL->PWMperiod = 199 ;
 11444  0054' EE20 F003          	lfsr	2,3
 11445  0058' 5000'              	movf	DCmotorsInit@mL^0,w,c
 11446  005A' 26D9               	addwf	fsr2l,f,c
 11447  005C' 5000'              	movf	(DCmotorsInit@mL+1)^0,w,c
 11448  005E' 22DA               	addwfc	fsr2h,f,c
 11449  0060' 0EC7               	movlw	199
 11450  0062' 6EDE               	movwf	postinc2,c
 11451  0064' 0E00               	movlw	0
 11452  0066' 6EDD               	movwf	postdec2,c
 11453  0068'                    
 11454                           ;MazeRobot.X/dc_motor.c: 82:     mR->power = 0;
 11455  0068' C006' FFD9         	movff	DCmotorsInit@mR,fsr2l
 11456  006C' C007' FFDA         	movff	DCmotorsInit@mR+1,fsr2h
 11457  0070' 0E00               	movlw	0
 11458  0072' 6EDF               	movwf	indf2,c
 11459                           
 11460                           ;MazeRobot.X/dc_motor.c: 83:     mR->direction = 1;
 11461  0074' EE20 F001          	lfsr	2,1
 11462  0078' 5000'              	movf	DCmotorsInit@mR^0,w,c
 11463  007A' 26D9               	addwf	fsr2l,f,c
 11464  007C' 5000'              	movf	(DCmotorsInit@mR+1)^0,w,c
 11465  007E' 22DA               	addwfc	fsr2h,f,c
 11466  0080' 0E01               	movlw	1
 11467  0082' 6EDF               	movwf	indf2,c
 11468                           
 11469                           ;MazeRobot.X/dc_motor.c: 84:     mR->brakemode = 1;
 11470  0084' EE20 F002          	lfsr	2,2
 11471  0088' 5000'              	movf	DCmotorsInit@mR^0,w,c
 11472  008A' 26D9               	addwf	fsr2l,f,c
 11473  008C' 5000'              	movf	(DCmotorsInit@mR+1)^0,w,c
 11474  008E' 22DA               	addwfc	fsr2h,f,c
 11475  0090' 0E01               	movlw	1
 11476  0092' 6EDF               	movwf	indf2,c
 11477                           
 11478                           ;MazeRobot.X/dc_motor.c: 85:     mR->posDutyHighByte = (unsigned char *)(&CCPR3H);
 11479  0094' EE20 F005          	lfsr	2,5
 11480  0098' 5000'              	movf	DCmotorsInit@mR^0,w,c
 11481  009A' 26D9               	addwf	fsr2l,f,c
 11482  009C' 5000'              	movf	(DCmotorsInit@mR+1)^0,w,c
 11483  009E' 22DA               	addwfc	fsr2h,f,c
 11484  00A0' 0E25               	movlw	37
 11485  00A2' 6EDE               	movwf	postinc2,c
 11486  00A4' 0E0F               	movlw	15
 11487  00A6' 6EDD               	movwf	postdec2,c
 11488                           
 11489                           ;MazeRobot.X/dc_motor.c: 86:     mR->negDutyHighByte = (unsigned char *)(&CCPR4H);
 11490  00A8' EE20 F007          	lfsr	2,7
 11491  00AC' 5000'              	movf	DCmotorsInit@mR^0,w,c
 11492  00AE' 26D9               	addwf	fsr2l,f,c
 11493  00B0' 5000'              	movf	(DCmotorsInit@mR+1)^0,w,c
 11494  00B2' 22DA               	addwfc	fsr2h,f,c
 11495  00B4' 0E21               	movlw	33
 11496  00B6' 6EDE               	movwf	postinc2,c
 11497  00B8' 0E0F               	movlw	15
 11498  00BA' 6EDD               	movwf	postdec2,c
 11499                           
 11500                           ;MazeRobot.X/dc_motor.c: 87:     mR->PWMperiod = 199 ;
 11501  00BC' EE20 F003          	lfsr	2,3
 11502  00C0' 5000'              	movf	DCmotorsInit@mR^0,w,c
 11503  00C2' 26D9               	addwf	fsr2l,f,c
 11504  00C4' 5000'              	movf	(DCmotorsInit@mR+1)^0,w,c
 11505  00C6' 22DA               	addwfc	fsr2h,f,c
 11506  00C8' 0EC7               	movlw	199
 11507  00CA' 6EDE               	movwf	postinc2,c
 11508  00CC' 0E00               	movlw	0
 11509  00CE' 6EDD               	movwf	postdec2,c
 11510  00D0' 0012               	return		;funcret
 11511  00D2'                    __end_of_DCmotorsInit:
 11512                           	callstack 0
 11513                           
 11514 ;; *************** function _HighISR *****************
 11515 ;; Defined at:
 11516 ;;		line 122 in file "MazeRobot.X/serial.c"
 11517 ;; Parameters:    Size  Location     Type
 11518 ;;		None
 11519 ;; Auto vars:     Size  Location     Type
 11520 ;;		None
 11521 ;; Return value:  Size  Location     Type
 11522 ;;                  1    wreg      void 
 11523 ;; Registers used:
 11524 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11525 ;; Tracked objects:
 11526 ;;		On entry : 0/0
 11527 ;;		On exit  : 0/0
 11528 ;;		Unchanged: 0/0
 11529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11532 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11533 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11534 ;;Total ram usage:        2 bytes
 11535 ;; Hardware stack levels used: 1
 11536 ;; Hardware stack levels required when called: 1
 11537 ;; This function calls:
 11538 ;;		_getCharFromTxBuf
 11539 ;;		_putCharToRxBuf
 11540 ;;		i2_isDataInTxBuf
 11541 ;; This function is called by:
 11542 ;;		Interrupt level 2
 11543 ;; This function uses a non-reentrant model
 11544 ;;
 11545                           
 11546                           	psect	intcode
 11547  0000'                    __pintcode:
 11548                           	callstack 0
 11549  0000'                    _HighISR:
 11550                           	callstack 21
 11551                           
 11552                           ;incstack = 0
 11553  0000' 8200'              	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
 11554  0002' CFD9 F002'         	movff	fsr2l,??_HighISR
 11555  0006' CFDA F003'         	movff	fsr2h,??_HighISR+1
 11556  000A'                    
 11557                           ;MazeRobot.X/serial.c: 124:     if(PIR4bits.RC4IF == 1){
 11558  000A' 010E               	movlb	14	; () banked
 11559  000C' A737               	btfss	55,3,b	;volatile
 11560  000E' EF00' F000'        	goto	i2u579_41
 11561  0012' EF00' F000'        	goto	i2u579_40
 11562  0016'                    i2u579_41:
 11563  0016' EF00' F000'        	goto	i2l5239
 11564  001A'                    i2u579_40:
 11565  001A'                    
 11566                           ; BSR set to: 14
 11567                           ;MazeRobot.X/serial.c: 125:         putCharToRxBuf(RC4REG);
 11568  001A' 51E3               	movf	227,w,b	;volatile
 11569  001C' EC00' F000'        	call	_putCharToRxBuf
 11570  0020'                    i2l5239:
 11571                           
 11572                           ;MazeRobot.X/serial.c: 128:     if(PIR4bits.TX4IF == 1){
 11573  0020' 010E               	movlb	14	; () banked
 11574  0022' A537               	btfss	55,2,b	;volatile
 11575  0024' EF00' F000'        	goto	i2u580_41
 11576  0028' EF00' F000'        	goto	i2u580_40
 11577  002C'                    i2u580_41:
 11578  002C' EF00' F000'        	goto	i2l467
 11579  0030'                    i2u580_40:
 11580  0030'                    
 11581                           ; BSR set to: 14
 11582                           ;MazeRobot.X/serial.c: 129:         if(isDataInTxBuf()){
 11583  0030' EC00' F000'        	call	i2_isDataInTxBuf	;wreg free
 11584  0034' 0900               	iorlw	0
 11585  0036' B4D8               	btfsc	status,2,c
 11586  0038' EF00' F000'        	goto	i2u581_41
 11587  003C' EF00' F000'        	goto	i2u581_40
 11588  0040'                    i2u581_41:
 11589  0040' EF00' F000'        	goto	i2l465
 11590  0044'                    i2u581_40:
 11591  0044'                    
 11592                           ;MazeRobot.X/serial.c: 130:             TX4REG = getCharFromTxBuf();
 11593  0044' EC00' F000'        	call	_getCharFromTxBuf	;wreg free
 11594  0048' 010E               	movlb	14	; () banked
 11595  004A' 6FE4               	movwf	228,b	;volatile
 11596                           
 11597                           ;MazeRobot.X/serial.c: 132:         }
 11598  004C' EF00' F000'        	goto	i2l467
 11599  0050'                    i2l465:
 11600                           
 11601                           ;MazeRobot.X/serial.c: 134:     PIE4bits.TX4IE = 0;
 11602  0050' 010E               	movlb	14	; () banked
 11603  0052' 952D               	bcf	45,2,b	;volatile
 11604  0054'                    i2l467:
 11605                           
 11606                           ; BSR set to: 14
 11607  0054' C003' FFDA         	movff	??_HighISR+1,fsr2h
 11608  0058' C002' FFD9         	movff	??_HighISR,fsr2l
 11609  005C' 9200'              	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
 11610  005E' 0011               	retfie		f
 11611  0060'                    __end_of_HighISR:
 11612                           	callstack 0
 11613                           
 11614 ;; *************** function i2_isDataInTxBuf *****************
 11615 ;; Defined at:
 11616 ;;		line 83 in file "MazeRobot.X/serial.c"
 11617 ;; Parameters:    Size  Location     Type
 11618 ;;		None
 11619 ;; Auto vars:     Size  Location     Type
 11620 ;;		None
 11621 ;; Return value:  Size  Location     Type
 11622 ;;                  1    wreg      unsigned char 
 11623 ;; Registers used:
 11624 ;;		wreg, status,2, status,0
 11625 ;; Tracked objects:
 11626 ;;		On entry : 0/0
 11627 ;;		On exit  : 0/0
 11628 ;;		Unchanged: 0/0
 11629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11633 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11634 ;;Total ram usage:        0 bytes
 11635 ;; Hardware stack levels used: 1
 11636 ;; This function calls:
 11637 ;;		Nothing
 11638 ;; This function is called by:
 11639 ;;		_HighISR
 11640 ;; This function uses a non-reentrant model
 11641 ;;
 11642                           
 11643                           	psect	text56
 11644  0000'                    __ptext56:
 11645                           	callstack 0
 11646  0000'                    i2_isDataInTxBuf:
 11647                           	callstack 21
 11648  0000'                    
 11649                           ;MazeRobot.X/serial.c: 84:     return (TxBufWriteCnt!=TxBufReadCnt);
 11650  0000' 5000'              	movf	_TxBufReadCnt^0,w,c	;volatile
 11651  0002' 1800'              	xorwf	_TxBufWriteCnt^0,w,c	;volatile
 11652  0004' A4D8               	btfss	status,2,c
 11653  0006' EF00' F000'        	goto	i2u269_41
 11654  000A' EF00' F000'        	goto	i2u269_40
 11655  000E'                    i2u269_41:
 11656  000E' 0E01               	movlw	1
 11657  0010' EF00' F000'        	goto	i2u270_40
 11658  0014'                    i2u269_40:
 11659  0014' 0E00               	movlw	0
 11660  0016'                    i2u270_40:
 11661  0016' 0012               	return		;funcret
 11662  0018'                    __end_ofi2_isDataInTxBuf:
 11663                           	callstack 0
 11664                           
 11665 ;; *************** function _putCharToRxBuf *****************
 11666 ;; Defined at:
 11667 ;;		line 54 in file "MazeRobot.X/serial.c"
 11668 ;; Parameters:    Size  Location     Type
 11669 ;;  byte            1    wreg     unsigned char 
 11670 ;; Auto vars:     Size  Location     Type
 11671 ;;  byte            1    0[COMRAM] unsigned char 
 11672 ;; Return value:  Size  Location     Type
 11673 ;;                  1    wreg      void 
 11674 ;; Registers used:
 11675 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11676 ;; Tracked objects:
 11677 ;;		On entry : 0/0
 11678 ;;		On exit  : 0/0
 11679 ;;		Unchanged: 0/0
 11680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11682 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11684 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11685 ;;Total ram usage:        1 bytes
 11686 ;; Hardware stack levels used: 1
 11687 ;; This function calls:
 11688 ;;		Nothing
 11689 ;; This function is called by:
 11690 ;;		_HighISR
 11691 ;; This function uses a non-reentrant model
 11692 ;;
 11693                           
 11694                           	psect	text57
 11695  0000'                    __ptext57:
 11696                           	callstack 0
 11697  0000'                    _putCharToRxBuf:
 11698                           	callstack 21
 11699                           
 11700                           ;incstack = 0
 11701                           ;putCharToRxBuf@byte stored from wreg
 11702  0000' 6E00'              	movwf	putCharToRxBuf@byte^0,c
 11703  0002'                    
 11704                           ;MazeRobot.X/serial.c: 55:     if (RxBufWriteCnt>=20) {RxBufWriteCnt=0;}
 11705  0002' 0E13               	movlw	19
 11706  0004' 6400'              	cpfsgt	_RxBufWriteCnt^0,c	;volatile
 11707  0006' EF00' F000'        	goto	i2u559_41
 11708  000A' EF00' F000'        	goto	i2u559_40
 11709  000E'                    i2u559_41:
 11710  000E' EF00' F000'        	goto	i2l4987
 11711  0012'                    i2u559_40:
 11712  0012' 0E00               	movlw	0
 11713  0014' 6E00'              	movwf	_RxBufWriteCnt^0,c	;volatile
 11714  0016'                    i2l4987:
 11715                           
 11716                           ;MazeRobot.X/serial.c: 56:     EUSART4RXbuf[RxBufWriteCnt++]=byte;
 11717  0016' 0E00'              	movlw	low _EUSART4RXbuf
 11718  0018' 2400'              	addwf	_RxBufWriteCnt^0,w,c	;volatile
 11719  001A' 6ED9               	movwf	fsr2l,c
 11720  001C' 6ADA               	clrf	fsr2h,c
 11721  001E' 0E00'              	movlw	high _EUSART4RXbuf
 11722  0020' 22DA               	addwfc	fsr2h,f,c
 11723  0022' C000' FFDF         	movff	putCharToRxBuf@byte,indf2
 11724  0026' 2A00'              	incf	_RxBufWriteCnt^0,f,c	;volatile
 11725  0028' 0012               	return		;funcret
 11726  002A'                    __end_of_putCharToRxBuf:
 11727                           	callstack 0
 11728                           
 11729 ;; *************** function _getCharFromTxBuf *****************
 11730 ;; Defined at:
 11731 ;;		line 69 in file "MazeRobot.X/serial.c"
 11732 ;; Parameters:    Size  Location     Type
 11733 ;;		None
 11734 ;; Auto vars:     Size  Location     Type
 11735 ;;		None
 11736 ;; Return value:  Size  Location     Type
 11737 ;;                  1    wreg      unsigned char 
 11738 ;; Registers used:
 11739 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11740 ;; Tracked objects:
 11741 ;;		On entry : 0/0
 11742 ;;		On exit  : 0/0
 11743 ;;		Unchanged: 0/0
 11744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11747 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11748 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11749 ;;Total ram usage:        2 bytes
 11750 ;; Hardware stack levels used: 1
 11751 ;; This function calls:
 11752 ;;		Nothing
 11753 ;; This function is called by:
 11754 ;;		_HighISR
 11755 ;; This function uses a non-reentrant model
 11756 ;;
 11757                           
 11758                           	psect	text58
 11759  0000'                    __ptext58:
 11760                           	callstack 0
 11761  0000'                    _getCharFromTxBuf:
 11762                           	callstack 21
 11763  0000'                    
 11764                           ;MazeRobot.X/serial.c: 70:     if (TxBufReadCnt>=60) {TxBufReadCnt=0;}
 11765  0000' 0E3B               	movlw	59
 11766  0002' 6400'              	cpfsgt	_TxBufReadCnt^0,c	;volatile
 11767  0004' EF00' F000'        	goto	i2u560_41
 11768  0008' EF00' F000'        	goto	i2u560_40
 11769  000C'                    i2u560_41:
 11770  000C' EF00' F000'        	goto	i2l4995
 11771  0010'                    i2u560_40:
 11772  0010' 0E00               	movlw	0
 11773  0012' 6E00'              	movwf	_TxBufReadCnt^0,c	;volatile
 11774  0014'                    i2l4995:
 11775                           
 11776                           ;MazeRobot.X/serial.c: 71:     return EUSART4TXbuf[TxBufReadCnt++];
 11777  0014' 2A00'              	incf	_TxBufReadCnt^0,f,c	;volatile
 11778  0016' 0400'              	decf	_TxBufReadCnt^0,w,c	;volatile
 11779  0018' 6E00'              	movwf	??_getCharFromTxBuf^0,c
 11780  001A' 6A00'              	clrf	(??_getCharFromTxBuf+1)^0,c
 11781  001C' 0E00'              	movlw	low _EUSART4TXbuf
 11782  001E' 2400'              	addwf	??_getCharFromTxBuf^0,w,c
 11783  0020' 6ED9               	movwf	fsr2l,c
 11784  0022' 0E00'              	movlw	high _EUSART4TXbuf
 11785  0024' 2000'              	addwfc	(??_getCharFromTxBuf+1)^0,w,c
 11786  0026' 6EDA               	movwf	fsr2h,c
 11787  0028' 50DF               	movf	indf2,w,c
 11788  002A' 0012               	return		;funcret
 11789  002C'                    __end_of_getCharFromTxBuf:
 11790                           	callstack 0
 11791                           
 11792                           	psect	rparam
 11793  0000                     
 11794                           	psect	temp
 11795  0000'                    btemp:
 11796                           	callstack 0
 11797  0000'                    	ds	1
 11798  0000                     int$flags	set	btemp
 11799  0000                     wtemp8	set	btemp+1
 11800  0000                     ttemp5	set	btemp+1
 11801  0000                     ttemp6	set	btemp+4
 11802  0000                     ttemp7	set	btemp+8
 11803                           
 11804                           	psect	idloc
 11805                           
 11806                           ;Config register IDLOC0 @ 0x200000
 11807                           ;	unspecified, using default values
 11808  200000                     	org	2097152
 11809  200000  0FFF               	dw	4095
 11810                           
 11811                           ;Config register IDLOC1 @ 0x200002
 11812                           ;	unspecified, using default values
 11813  200002                     	org	2097154
 11814  200002  0FFF               	dw	4095
 11815                           
 11816                           ;Config register IDLOC2 @ 0x200004
 11817                           ;	unspecified, using default values
 11818  200004                     	org	2097156
 11819  200004  0FFF               	dw	4095
 11820                           
 11821                           ;Config register IDLOC3 @ 0x200006
 11822                           ;	unspecified, using default values
 11823  200006                     	org	2097158
 11824  200006  0FFF               	dw	4095
 11825                           
 11826                           ;Config register IDLOC4 @ 0x200008
 11827                           ;	unspecified, using default values
 11828  200008                     	org	2097160
 11829  200008  0FFF               	dw	4095
 11830                           
 11831                           ;Config register IDLOC5 @ 0x20000A
 11832                           ;	unspecified, using default values
 11833  20000A                     	org	2097162
 11834  20000A  0FFF               	dw	4095
 11835                           
 11836                           ;Config register IDLOC6 @ 0x20000C
 11837                           ;	unspecified, using default values
 11838  20000C                     	org	2097164
 11839  20000C  0FFF               	dw	4095
 11840                           
 11841                           ;Config register IDLOC7 @ 0x20000E
 11842                           ;	unspecified, using default values
 11843  20000E                     	org	2097166
 11844  20000E  0FFF               	dw	4095
 11845                           
 11846                           	psect	config
 11847                           
 11848                           ;Config register CONFIG1L @ 0x300000
 11849                           ;	External Oscillator mode Selection bits
 11850                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
 11851                           ;	Power-up default value for COSC bits
 11852                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
 11853  300000                     	org	3145728
 11854  300000  AA                 	db	170
 11855                           
 11856                           ;Config register CONFIG1H @ 0x300001
 11857                           ;	unspecified, using default values
 11858                           ;	Clock Out Enable bit
 11859                           ;	CLKOUTEN = 0x1, unprogrammed default
 11860                           ;	Clock Switch Enable bit
 11861                           ;	CSWEN = 0x1, unprogrammed default
 11862                           ;	Fail-Safe Clock Monitor Enable bit
 11863                           ;	FCMEN = 0x1, unprogrammed default
 11864  300001                     	org	3145729
 11865  300001  FF                 	db	255
 11866                           
 11867                           ;Config register CONFIG2L @ 0x300002
 11868                           ;	unspecified, using default values
 11869                           ;	Master Clear Enable bit
 11870                           ;	MCLRE = 0x1, unprogrammed default
 11871                           ;	Power-up Timer Enable bit
 11872                           ;	PWRTE = 0x1, unprogrammed default
 11873                           ;	Low-power BOR enable bit
 11874                           ;	LPBOREN = 0x1, unprogrammed default
 11875                           ;	Brown-out Reset Enable bits
 11876                           ;	BOREN = 0x3, unprogrammed default
 11877  300002                     	org	3145730
 11878  300002  FF                 	db	255
 11879                           
 11880                           ;Config register CONFIG2H @ 0x300003
 11881                           ;	unspecified, using default values
 11882                           ;	Brown Out Reset Voltage selection bits
 11883                           ;	BORV = 0x3, unprogrammed default
 11884                           ;	ZCD Disable bit
 11885                           ;	ZCD = 0x1, unprogrammed default
 11886                           ;	PPSLOCK bit One-Way Set Enable bit
 11887                           ;	PPS1WAY = 0x1, unprogrammed default
 11888                           ;	Stack Full/Underflow Reset Enable bit
 11889                           ;	STVREN = 0x1, unprogrammed default
 11890                           ;	Debugger Enable bit
 11891                           ;	DEBUG = 0x1, unprogrammed default
 11892                           ;	Extended Instruction Set Enable bit
 11893                           ;	XINST = 0x1, unprogrammed default
 11894  300003                     	org	3145731
 11895  300003  FF                 	db	255
 11896                           
 11897                           ;Config register CONFIG3L @ 0x300004
 11898                           ;	WDT Period Select bits
 11899                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
 11900                           ;	WDT operating mode
 11901                           ;	WDTE = OFF, WDT Disabled
 11902  300004                     	org	3145732
 11903  300004  9F                 	db	159
 11904                           
 11905                           ;Config register CONFIG3H @ 0x300005
 11906                           ;	unspecified, using default values
 11907                           ;	WDT Window Select bits
 11908                           ;	WDTCWS = 0x7, unprogrammed default
 11909                           ;	WDT input clock selector
 11910                           ;	WDTCCS = 0x7, unprogrammed default
 11911  300005                     	org	3145733
 11912  300005  FF                 	db	255
 11913                           
 11914                           ;Config register CONFIG4L @ 0x300006
 11915                           ;	unspecified, using default values
 11916                           ;	Write Protection Block 0
 11917                           ;	WRT0 = 0x1, unprogrammed default
 11918                           ;	Write Protection Block 1
 11919                           ;	WRT1 = 0x1, unprogrammed default
 11920                           ;	Write Protection Block 2
 11921                           ;	WRT2 = 0x1, unprogrammed default
 11922                           ;	Write Protection Block 3
 11923                           ;	WRT3 = 0x1, unprogrammed default
 11924                           ;	Write Protection Block 3
 11925                           ;	WRT4 = 0x1, unprogrammed default
 11926                           ;	Write Protection Block 3
 11927                           ;	WRT5 = 0x1, unprogrammed default
 11928                           ;	Write Protection Block 3
 11929                           ;	WRT6 = 0x1, unprogrammed default
 11930                           ;	Write Protection Block 3
 11931                           ;	WRT7 = 0x1, unprogrammed default
 11932  300006                     	org	3145734
 11933  300006  FF                 	db	255
 11934                           
 11935                           ;Config register CONFIG4H @ 0x300007
 11936                           ;	unspecified, using default values
 11937                           ;	Configuration Register Write Protection bit
 11938                           ;	WRTC = 0x1, unprogrammed default
 11939                           ;	Boot Block Write Protection bit
 11940                           ;	WRTB = 0x1, unprogrammed default
 11941                           ;	Data EEPROM Write Protection bit
 11942                           ;	WRTD = 0x1, unprogrammed default
 11943                           ;	Scanner Enable bit
 11944                           ;	SCANE = 0x1, unprogrammed default
 11945                           ;	Low Voltage Programming Enable bit
 11946                           ;	LVP = 0x1, unprogrammed default
 11947  300007                     	org	3145735
 11948  300007  FF                 	db	255
 11949                           
 11950                           ;Config register CONFIG5L @ 0x300008
 11951                           ;	unspecified, using default values
 11952                           ;	UserNVM Program Memory Code Protection bit
 11953                           ;	CP = 0x1, unprogrammed default
 11954                           ;	DataNVM Memory Code Protection bit
 11955                           ;	CPD = 0x1, unprogrammed default
 11956  300008                     	org	3145736
 11957  300008  FF                 	db	255
 11958                           
 11959                           ;Config register CONFIG5H @ 0x300009
 11960                           ;	unspecified, using default values
 11961  300009                     	org	3145737
 11962  300009  FF                 	db	255
 11963                           
 11964                           ;Config register CONFIG6L @ 0x30000A
 11965                           ;	unspecified, using default values
 11966                           ;	Table Read Protection Block 0
 11967                           ;	EBTR0 = 0x1, unprogrammed default
 11968                           ;	Table Read Protection Block 1
 11969                           ;	EBTR1 = 0x1, unprogrammed default
 11970                           ;	Table Read Protection Block 2
 11971                           ;	EBTR2 = 0x1, unprogrammed default
 11972                           ;	Table Read Protection Block 3
 11973                           ;	EBTR3 = 0x1, unprogrammed default
 11974                           ;	Table Read Protection Block 4
 11975                           ;	EBTR4 = 0x1, unprogrammed default
 11976                           ;	Table Read Protection Block 5
 11977                           ;	EBTR5 = 0x1, unprogrammed default
 11978                           ;	Table Read Protection Block 6
 11979                           ;	EBTR6 = 0x1, unprogrammed default
 11980                           ;	Table Read Protection Block 7
 11981                           ;	EBTR7 = 0x1, unprogrammed default
 11982  30000A                     	org	3145738
 11983  30000A  FF                 	db	255
 11984                           
 11985                           ;Config register CONFIG6H @ 0x30000B
 11986                           ;	unspecified, using default values
 11987                           ;	Boot Block Table Read Protection bit
 11988                           ;	EBTRB = 0x1, unprogrammed default
 11989  30000B                     	org	3145739
 11990  30000B  FF                 	db	255
 11991                           tosu	equ	0xFFF
 11992                           tosh	equ	0xFFE
 11993                           tosl	equ	0xFFD
 11994                           stkptr	equ	0xFFC
 11995                           pclatu	equ	0xFFB
 11996                           pclath	equ	0xFFA
 11997                           pcl	equ	0xFF9
 11998                           tblptru	equ	0xFF8
 11999                           tblptrh	equ	0xFF7
 12000                           tblptrl	equ	0xFF6
 12001                           tablat	equ	0xFF5
 12002                           prodh	equ	0xFF4
 12003                           prodl	equ	0xFF3
 12004                           indf0	equ	0xFEF
 12005                           postinc0	equ	0xFEE
 12006                           postdec0	equ	0xFED
 12007                           preinc0	equ	0xFEC
 12008                           plusw0	equ	0xFEB
 12009                           fsr0h	equ	0xFEA
 12010                           fsr0l	equ	0xFE9
 12011                           wreg	equ	0xFE8
 12012                           indf1	equ	0xFE7
 12013                           postinc1	equ	0xFE6
 12014                           postdec1	equ	0xFE5
 12015                           preinc1	equ	0xFE4
 12016                           plusw1	equ	0xFE3
 12017                           fsr1h	equ	0xFE2
 12018                           fsr1l	equ	0xFE1
 12019                           bsr	equ	0xFE0
 12020                           indf2	equ	0xFDF
 12021                           postinc2	equ	0xFDE
 12022                           postdec2	equ	0xFDD
 12023                           preinc2	equ	0xFDC
 12024                           plusw2	equ	0xFDB
 12025                           fsr2h	equ	0xFDA
 12026                           fsr2l	equ	0xFD9
 12027                           status	equ	0xFD8

Data Sizes:
    Strings     26
    Constant    0
    Data        4
    BSS         181
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     86      90
    BANK0           160    119     160
    BANK1           256     70     210
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    strcpy@dest	PTR unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    strcpy@d	PTR unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    strcpy@src	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_5(CODE[4]), STR_2(CODE[4]), 

    strcpy@s	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_5(CODE[4]), STR_2(CODE[4]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    memcpy@d1	PTR void  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    memcpy@s1	PTR const void  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_1(CODE[18]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 18
		 -> STR_1(CODE[18]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 18
		 -> STR_1(CODE[18]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    S2634$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    sp__memcpy	PTR void  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    efgtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_1(CODE[18]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 20
		 -> main@string4(BANK1[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2550$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2550$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    TxBufferedString@string	PTR unsigned char  size(2) Largest target is 20
		 -> main@string4(BANK1[20]), 

    motorRight.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    motorRight.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    motorLeft.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    motorLeft.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft_135@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft_135@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft_135@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft_135@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight_135@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight_135@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight_135@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight_135@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turn_180@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turn_180@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turn_180@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turn_180@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight_90@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight_90@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight_90@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight_90@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft_90@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft_90@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft_90@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft_90@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    reverse@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    reverse@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    reverse@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    reverse@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    forward@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    forward@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    forward@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    forward@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), main@motorLeft(BANK1[9]), 

    DCmotorsInit@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    S107DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    S107DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    colorDetect@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    colorDetect@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    colorDetect@whiteRGBVal	PTR struct RGB size(2) Largest target is 8
		 -> main@whiteRGBVal(BANK1[8]), 

    colorDetect@ambientRGBVal	PTR struct RGB size(2) Largest target is 8
		 -> main@ambientRGBVal(BANK1[8]), 

    whiteCal@v	PTR struct RGB size(2) Largest target is 8
		 -> main@whiteRGBVal(BANK1[8]), 

    ambientCal@v	PTR struct RGB size(2) Largest target is 8
		 -> main@ambientRGBVal(BANK1[8]), 

    getColor@v	PTR struct RGB size(2) Largest target is 8
		 -> main@whiteRGBVal(BANK1[8]), main@ambientRGBVal(BANK1[8]), main@RGBVal(BANK1[8]), colorDetect@RGBVal(BANK0[8]), 


Critical Paths under _main in COMRAM

    _whiteCal->_getColor
    _stop->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_efgtoa
    _efgtoa->_floorf
    _floorf->___fldiv
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _colorDetect->___fldiv
    ___flsub->___flmul
    ___flmul->___fladd
    ___flge->___flsub
    ___fldiv->___flsub
    _ambientCal->_getColor
    _getColor->_color_read_Blue
    _getColor->_color_read_Clear
    _getColor->_color_read_Green
    _getColor->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _TxBufferedString->_putCharToTxBuf

Critical Paths under _HighISR in COMRAM

    _HighISR->_getCharFromTxBuf

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_efgtoa
    _efgtoa->_floorf

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               172   172      0   81162
                                            117 BANK0      2     2      0
                                              0 BANK1     70    70      0
                       _DCmotorsInit
                   _TxBufferedString
                            ___fldiv
                             ___flge
                           ___xxtofl
                         _ambientCal
                        _colorDetect
                   _color_click_init
                           _getColor
                    _initDCmotorsPWM
                         _initUSART4
                          _sendTxBuf
                            _sprintf
                               _stop
                           _whiteCal
 ---------------------------------------------------------------------------------
 (1) _whiteCal                                             6     4      2     988
                                             17 COMRAM     6     4      2
                           _getColor
 ---------------------------------------------------------------------------------
 (1) _stop                                                 6     2      4    6853
                                             23 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          6     4      2    2725
                                             17 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     491
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     358
                                             10 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             27    15     12   37021
                                             92 BANK0     25    13     12
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6   36523
                                             84 BANK0      8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           23    17      6   36053
                                             84 COMRAM     2     2      0
                                             67 BANK0     17    11      6
                               _dtoa
                             _efgtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _efgtoa                                              54    47      7   29904
                                             82 COMRAM     2     2      0
                                             16 BANK0     51    44      7
                            ___fladd
                            ___fldiv
                             ___fleq
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                      ___fpclassifyf
                             _floorf
                               _labs
                             _memcpy
                                _pad
                             _strcpy
 ---------------------------------------------------------------------------------
 (5) _strcpy                                               8     4      4     400
                                              4 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (5) _memcpy                                              11     5      6     371
                                              4 COMRAM    11     5      6
 ---------------------------------------------------------------------------------
 (5) _labs                                                 8     4      4     294
                                              4 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (5) _floorf                                              20    16      4     669
                                             78 COMRAM     4     0      4
                                              0 BANK0     16    16      0
                            ___fldiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fpclassifyf                                       14    10      4     287
                                              4 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (5) ___fltol                                             10     6      4    1409
                                              4 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (5) ___flneg                                              4     0      4     121
                                              4 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (5) ___fleq                                              12     4      8     646
                                              4 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                35    25     10    4333
                                             31 COMRAM    35    25     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2683
                                             20 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4     931
                                             13 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     682
                                              4 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             22 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              4 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              4 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _sendTxBuf                                            0     0      0       0
                      _isDataInTxBuf
 ---------------------------------------------------------------------------------
 (2) _isDataInTxBuf                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      76
                                              4 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              8 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              6 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _colorDetect                                         56    44     12   22542
                                             78 COMRAM     2     2      0
                                              0 BANK0     50    38     12
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                           ___xxtofl
                     _fullSpeedAhead
                           _getColor
                            _right45
 ---------------------------------------------------------------------------------
 (2) _right45                                              4     0      4       0
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       4     0      4       0
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4    2078
                                              4 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (5) ___flsub                                              8     0      8    4257
                                             45 COMRAM     8     0      8
                            ___fladd
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (6) ___fladd                                             16     8      8    2414
                                              4 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 (5) ___flmul                                             25    17      8    4864
                                             20 COMRAM    25    17      8
                            ___fladd (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flge                                              12     4      8    5350
                                             53 COMRAM    12     4      8
                            ___flmul (ARG)
                            ___flsub (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fldiv                                             25    17      8    2615
                                             53 COMRAM    25    17      8
                            ___flmul (ARG)
                            ___flsub (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _ambientCal                                           6     4      2     988
                                             17 COMRAM     6     4      2
                           _getColor
 ---------------------------------------------------------------------------------
 (2) _getColor                                             2     0      2     844
                                             15 COMRAM     2     0      2
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (3) _color_read_Red                                       7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Green                                     7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Clear                                     7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Blue                                      7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Write                                   1     1      0      22
                                              5 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Read                                    3     3      0      45
                                              5 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Idle                                    1     1      0       0
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _TxBufferedString                                     2     0      2     143
                                              5 COMRAM     2     0      2
                     _putCharToTxBuf
 ---------------------------------------------------------------------------------
 (2) _putCharToTxBuf                                       1     1      0      22
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DCmotorsInit                                         4     0      4     416
                                              4 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _HighISR                                              2     2      0      22
                                              2 COMRAM     2     2      0
                   _getCharFromTxBuf
                     _putCharToRxBuf
                    i2_isDataInTxBuf
 ---------------------------------------------------------------------------------
 (10) i2_isDataInTxBuf                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _putCharToRxBuf                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (10) _getCharFromTxBuf                                    2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DCmotorsInit
   _TxBufferedString
     _putCharToTxBuf
   ___fldiv
     ___flmul (ARG)
       ___fladd (ARG)
       ___xxtofl (ARG)
     ___flsub (ARG)
       ___fladd
       ___flmul (ARG)
       ___xxtofl (ARG)
     ___xxtofl (ARG)
   ___flge
     ___flmul (ARG)
     ___flsub (ARG)
   ___xxtofl
   _ambientCal
     _getColor
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_read_Clear
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
   _colorDetect
     ___fldiv
     ___flge
     ___flmul
     ___flsub
     ___xxtofl
     _fullSpeedAhead
     _getColor
     _right45
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _getColor
   _initDCmotorsPWM
   _initUSART4
   _sendTxBuf
     _isDataInTxBuf
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
         _efgtoa
           ___fladd
           ___fldiv
           ___fleq
           ___flge
           ___flmul
           ___flneg
           ___flsub
           ___fltol
           ___fpclassifyf
           _floorf
             ___fldiv (ARG)
           _labs
           _memcpy
           _pad
           _strcpy
         _fputc
   _stop
     _setMotorPWM
       ___lwdiv
         ___wmul (ARG)
       ___wmul
   _whiteCal
     _getColor

 _HighISR (ROOT)
   _getCharFromTxBuf
   _putCharToRxBuf
   i2_isDataInTxBuf

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      62        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     46      D2       7       82.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     77      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     56      5A       1       95.7%
BITBIGSFRlhhhhl     52      0       0      42        0.0%
BITBIGSFRlhhhll     37      0       0      44        0.0%
BITBIGSFRlllhlh     2A      0       0      55        0.0%
BITBIGSFRlllll      26      0       0      60        0.0%
BITBIGSFRlhhhll     20      0       0      47        0.0%
BITBIGSFRlhhhll     1E      0       0      49        0.0%
BITBIGSFRhhhhhl     1B      0       0      33        0.0%
BITBIGSFRhhhhll     17      0       0      38        0.0%
BITBIGSFRhhhhhl     13      0       0      34        0.0%
BITBIGSFRlhhl       11      0       0      50        0.0%
BITBIGSFRhhhhlh      E      0       0      35        0.0%
BITBIGSFRhhhhhh      D      0       0      32        0.0%
BITBIGSFRlhhhll      C      0       0      48        0.0%
BITBIGSFRlllhll      9      0       0      57        0.0%
BITBIGSFRlllhll      9      0       0      56        0.0%
BITBIGSFRlhhhll      8      0       0      45        0.0%
BITBIGSFRllllh       6      0       0      59        0.0%
BITBIGSFRlllhh       6      0       0      54        0.0%
BITBIGSFRlllhll      5      0       0      58        0.0%
BITBIGSFRllhl        5      0       0      53        0.0%
BITBIGSFRhhhhll      5      0       0      39        0.0%
BITBIGSFRllhh        3      0       0      52        0.0%
BITBIGSFRlhhhlh      2      0       0      43        0.0%
BITBIGSFRhhhhll      2      0       0      37        0.0%
BITBIGSFRlhhhhh      1      0       0      41        0.0%
BITBIGSFRlhhhll      1      0       0      46        0.0%
BITBIGSFRhhhhlh      1      0       0      36        0.0%
BITBIGSFRlhl         1      0       0      51        0.0%
BITBIGSFRhhll        1      0       0      40        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1CC      61        0.0%
DATA                 0      0     1CC       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Tue Dec 13 18:10:21 2022

               _color_read_Red 000000                   ___fldiv@aexp 00004D                   ___fldiv@bexp 00004C  
                 ___fldiv@sign 000045                _color_read_Blue 000000                             l32 00001E  
                           l41 00004E                             l35 00004E                             l44 00004E  
                           l52 0000E2                             l29 000032                             l38 00004E  
                           l47 00005C                             l57 0000E2                             l77 000AA8  
          ___wmul@multiplicand 000006               _color_read_Clear 000000               _color_read_Green 000000  
                          l136 00008E                            l146 00016A                            l139 0000D0  
                          l251 000028                            l260 000008                            l156 0000AC  
                          l405 00001E                            l254 000000                            l263 000008  
                          l272 000040                            l257 000026                            l442 000028  
                          l266 000008                            l602 000186                            l451 00002E  
                          l269 00000A                            l445 000016                            l455 000018  
                          l615 000162                            l488 000024                            l753 0000BC  
                          l762 000036                            l747 0000A8                            l758 000102  
                          l785 000104                            l986 000072                            l979 00006A  
                          _abs 000000                            _pad 000000                            wreg 000FE8  
                 ___flmul@aexp 000025                   ___flmul@bexp 000026                   ___flmul@sign 000020  
                 ___flmul@temp 00002B                   ___flmul@prod 000027                   ___fltol@exp1 00000D  
                         l1102 0000C4                           l1111 000332                           l1112 000320  
                         l1016 0001EE                           l1033 000308                           l1025 0004BE  
                         l1017 0001DC                           l1106 000428                           l1042 0003D8  
                         l1018 0001A2                           l1202 000078                           l1210 0000DA  
                         l1043 0003C6                           ?_abs 000016                           l1109 0002BA  
                         l1221 00027C                           l1070 000398                           l1150 0000EE  
                         l1302 000054                           l1119 0003EA                           l1143 000056  
                         l1207 00008C                           l1072 0001F8                           l1320 00003E  
                         l1312 0000FC                           l1232 0009F8                           l1081 00023E  
                         l1209 000094                           l1058 000044                           l1146 0001B2  
                         l1083 0002B6                           l1075 0001BC                           l1235 000392  
                         l1084 0002A4                           l1340 000064                           l1157 00014A  
                         l1317 000036                           l1237 0001D8                           l1326 000214  
                         l1166 000050                           l1280 000304                           l1329 000158  
                         l1337 000054                           l1265 0007DA                           l1346 00004E  
                         l4011 000054                           l4003 000000                           l4013 000056  
                         l4005 000016                           l1358 0000C8                           l1366 000042  
                         l1198 000022                           l4015 000066                           l1375 000042  
                         l3401 00004C                           l1369 000000                           l4201 0001E4  
                         l4041 0000E4                           l4025 000090                           l4017 00006A  
                         l4009 00002A                           l3411 00007E                           l3403 00004E  
                         l4051 00001A                           l4211 00024C                           l4203 0001FE  
                         l4043 0000F4                           l4035 0000B8                           l4027 00009A  
                         l4019 000078                           l4131 000030                           l4123 000000  
                         l4141 000006                           l3501 00024C                           l3421 0000A6  
                         l3413 000080                           l3405 000056                           l4061 000000  
                         l4053 00002E                           l4213 00025C                           l4205 00021C  
                         l4037 0000C4                           l4029 0000A4                           l4125 000014  
                         l4133 000034                           l4151 000002                           l4135 000000  
                         l4143 000000                           l3511 000276                           l3503 000258  
                         l3431 0000E0                           l3423 0000B6                           l3415 000086  
                         l3407 000066                           l4063 00001A                           l4055 000042  
                         l4047 000000                           l4207 000236                           l4039 0000D4  
                         l4071 000086                           l4127 000020                           l3601 000010  
                         l4161 00003E                           l4153 000006                           l4137 000004  
                         l4145 000004                           l3521 0002E8                           l3505 00025C  
                         l3513 00027C                           l3441 00010C                           l3433 0000F2  
                         l3425 0000C6                           l3417 000094                           l3409 00006C  
                         l4057 000046                           l4049 00000E                           l4209 000246  
                         l4073 000092                           l4065 000000                           l4129 000024  
                         l6001 0002B8                           l4155 00000E                           l4147 000000  
                         l4139 000002                           l3531 000342                           l3515 0002A2  
                         l3523 0002F8                           l3507 00026A                           l3451 000120  
                         l3443 000110                           l3435 000100                           l3427 0000C8  
                         l3419 000096                           l3611 000036                           l3603 000000  
                         l4059 000064                           l4171 000044                           l4083 0000F4  
                         l4067 000020                           l4091 000000                           l4157 000016  
                         l4149 000004                           l3701 000066                           l3541 000372  
                         l3533 00034C                           l3525 00031E                           l3517 0002D6  
                         l3509 00026C                           l3461 000134                           l3453 000124  
                         l3445 000114                           l3437 000104                           l3429 0000D0  
                         l3621 000092                           l3613 000044                           l3605 000004  
                         l3381 00002E                           l4181 0000B2                           l4173 000064  
                         l4165 000000                           l4069 00005E                           l4077 00009E  
                         l4093 00001E                           l4159 00003C                           l3711 000092  
                         l3703 00006C                           l3551 00039A                           l3543 000376  
                         l3535 00035A                           l3527 00032E                           l3519 0002D8  
                         l3471 00016E                           l3463 000138                           l3455 000128  
                         l3447 000118                           l3439 000108                           l3391 00000C  
                         l3631 0000FC                           l3623 00009A                           l3615 000064  
                         l3607 000012                           l3383 00004C                           l3375 000000  
                         l4191 0000EC                           l4183 0000C2                           l4175 000080  
                         l4167 000020                           l4079 0000B0                           l4087 000000  
                         l4441 000046                           l3801 00033E                           l3721 0000CC  
                         l3713 0000A2                           l3705 000072                           l3561 0003F4  
                         l3553 0003A8                           l3545 000386                           l3537 00035C  
                         l3481 0001C0                           l3473 00018A                           l3465 00013C  
                         l3457 00012C                           l3449 00011C                           l3393 00001A  
                         l3641 000146                           l3633 00011C                           l3625 0000AE  
                         l3617 000068                           l3609 000032                           l3385 000082  
                         l3377 000012                           l4193 0000F2                           l4185 0000CE  
                         l4177 00009C                           l4169 000034                           l4089 000010  
                         l5401 000102                           l4601 0000E6                           l4451 000000  
                         l3811 00038C                           l3803 000358                           l3723 0000E2  
                         l3715 0000B2                           l3707 000080                           l3571 00045E  
                         l3563 000402                           l3555 0003BE                           l3539 00036A  
                         l3547 000388                           l3491 00020C                           l3483 0001CE  
                         l3475 00019A                           l3459 000130                           l3467 000140  
                         l3395 00001C                           l3643 000166                           l3635 00011E  
                         l3627 0000BC                           l3619 000074                           l3651 000012  
                         l3379 000024                           l4195 000174                           l4187 0000D6  
                         l4179 0000AC                           l5411 00015E                           l4603 00012A  
                         l4621 000016                           l4453 000046                           l4445 000000  
                         l4701 000008                           l3813 00038E                           l3805 000374  
                         l3741 000136                           l3725 0000F2                           l3733 000112  
                         l3717 0000B4                           l3709 000082                           l3901 000282  
                         l3821 000000                           l3581 000498                           l3573 00047E  
                         l3565 00043C                           l3549 000396                           l3485 0001D0  
                         l3477 0001B0                           l3469 000144                           l3397 00002C  
                         l3389 000000                           l3637 000130                           l3629 0000CE  
                         l3661 000082                           l3653 000032                           l4197 00017A  
                         l4189 0000E2                           l5341 00008C                           l5501 00065E  
                         l5413 000164                           l5405 000122                           ?_pad 000014  
                         l4623 000026                           l4447 000046                           l4439 000000  
                         l4711 00009C                           l4703 00002A                           l3807 000378  
                         l3751 000188                           l3743 000150                           l3735 000122  
                         l3727 0000FA                           l3719 0000BC                           l3911 0002D8  
                         l3903 0002A0                           l3831 00003C                           l3823 00000C  
                         l3583 00049E                           l3575 000482                           l3559 0003E8  
                         l3567 00043E                           l3495 000220                           l3487 0001DA  
                         l3479 0001BC                           l3399 00003C                           l4631 000012  
                         l3639 000136                           l3671 0000FA                           l3663 00008A  
                         l3655 000036                           l3647 000000                           l3591 000000  
                         l4199 000180                           l5343 00009A                           l5351 00017C  
                         l5335 000000                           l5503 0006B4                           l5511 000706  
                         l5431 0001EE                           l5415 00016C                           l5407 000148  
                         l5423 000188                           l4471 000008                           l4463 000000  
                         l4617 000002                           l4457 000000                           l4713 0000A8  
                         l4705 000046                           l3809 000386                           l3761 0001E4  
                         l3753 000198                           l3745 000160                           l3737 000122  
                         l3729 0000FE                           l3921 000342                           l3913 0002DC  
                         l3905 0002AA                           l3841 00006E                           l3833 00004C  
                         l3825 00001A                           l3585 0004AC                           l3577 000490  
                         l3569 00044E                           l3497 000230                           l3489 0001FC  
                         l4641 000090                           l4633 000020                           l4625 000000  
                         l3673 00010C                           l3665 00009E                           l3657 000044  
                         l3649 000004                           l3593 00000C                           l5353 0001B8  
                         l5337 000020                           l5521 000738                           l5513 000716  
                         l5505 0006BA                           l5441 0002E4                           l5433 000222  
                         l5425 0001A2                           l5409 00015A                           l5601 0000EE  
                         l4481 00003E                           l4473 00001A                           l4465 00001C  
                         l4619 000012                           l4459 000046                           l4715 0000C0  
                         l4707 000062                           l3771 000224                           l3763 0001E6  
                         l3755 0001AC                           l3747 000170                           l3691 00002C  
                         l3683 000000                           l3931 0003A4                           l3923 00034E  
                         l3915 0002EA                           l3907 0002B8                           l3851 0000AE  
                         l3843 00007C                           l3835 000052                           l3827 00001C  
                         l3587 0004AE                           l3579 000496                           l3499 00023E  
                         l4651 0000E4                           l4643 000098                           l4635 000066  
                         l3667 0000AC                           l3675 000112                           l3659 000064  
                         l3595 00001E                           l5355 0001CC                           l5347 00010C  
                         l5339 000078                           l5531 00080A                           l5523 0007B0  
                         l5515 00071E                           l5507 0006EE                           l5451 00039A  
                         l5443 000318                           l5435 000260                           l5371 000028  
                         l5363 000000                           l5611 00014C                           l4483 000054  
                         l4475 000022                           l4731 000084                           l4723 000008  
                         l4709 000084                           l3781 000260                           l3773 00022E  
                         l3765 0001F6                           l3757 0001BA                           l3749 000180  
                         l3693 00003C                           l3685 00000C                           l3941 00040C  
                         l3933 0003B8                           l3925 00035C                           l3917 000318  
                         l3909 0002CA                           l3861 0000F8                           l3853 0000B4  
                         l3845 00007E                           l3837 000062                           l3829 00002C  
                         l4661 00015A                           l4653 000120                           l4645 0000A4  
                         l4637 00007C                           l4629 000002                           l5701 00032A  
                         l4581 000014                           l4573 000000                           l3677 000122  
                         l3669 0000DA                           l3597 000022                           l5357 0001F4  
                         l5349 000148                           l5541 000830                           l5533 00080E  
                         l5525 0007D0                           l5517 000724                           l5509 000702  
                         l5461 0003CA                           l5453 0003AA                           l5445 000320  
                         l5437 000292                           l5429 0001E8                           l5381 00007E  
                         l5373 00004C                           l5365 000006                           l5621 0001B2  
                         l5613 000154                           l5605 00011E                           l4485 00005C  
                         l4477 00002A                           l4469 000000                           l4901 000058  
                         l4733 00009C                           l4725 00002A                           l4717 000000  
                         l3599 000000                           l3791 0002D2                           l3783 00026E  
                         l3775 00023C                           l3767 000208                           l3759 0001C6  
                         l3695 00004C                           l3687 00001A                           l3943 00040E  
                         l3935 0003D2                           l3927 000386                           l3871 000148  
                         l3863 000104                           l3855 0000D4                           l3847 00008E  
                         l3839 000068                           l3951 000000                           l4671 0001A2  
                         l4663 00015E                           l4655 00012C                           l4647 0000D6  
                         l5711 0003C2                           l5703 00035C                           l4583 000016  
                         l4575 00000A                           l3679 000142                           l5359 000204  
                         l5551 000864                           l5543 000836                           l5535 000814  
                         l5527 0007EC                           l5519 00072C                           l5463 0003DC  
                         l5471 00041C                           l5455 0003B6                           l5439 0002D0  
                         l5391 0000CE                           l5383 00008A                           l5375 000056  
                         l5367 000016                           l5631 000264                           l5623 0001E6  
                         l5607 00012E                           l4487 00005E                           l4479 000038  
                         l4591 00001C                           l4903 000064                           l4735 0000A8  
                         l4727 000046                           l3793 0002E0                           l3785 00029C  
                         l3769 00021E                           l3777 00024E                           l3697 00004E  
                         l3689 00001C                           l3937 0003EE                           l3945 000414  
                         l3929 00038A                           l3881 00018A                           l3873 000154  
                         l3865 00010E                           l3857 0000E4                           l3849 00009E  
                         l3953 000010                           l4665 000182                           l4657 00013A  
                         l4649 0000D8                           l5721 00047A                           l5713 0003D2  
                         l5705 00036E                           l4577 000010                           l4585 000002  
                         l3961 00003E                           l5553 00086A                           l5537 00081C  
                         l5529 0007FA                           l5545 00083C                           l5561 000902  
                         l5481 000504                           l5473 000424                           l5465 0003EA  
                         l5457 0003BE                           l5449 000360                           l5393 0000D2  
                         l5385 000092                           l5377 00005E                           l5369 000024  
                         l5609 000144                           l5617 00015C                           l4489 000064  
                         l4593 000070                           l4905 00007C                           l4737 0000C0  
                         l4729 000062                           l4587 000000                           l3795 00030A  
                         l3779 00025C                           l3699 000056                           l3947 000418  
                         l3939 0003FE                           l3891 0001EC                           l3883 000196  
                         l3875 000160                           l3867 000124                           l4667 000192  
                         l4659 000158                           l5731 00050E                           l5723 0004AC  
                         l5715 000404                           l5707 00037E                           l4579 000012  
                         l4691 00001E                           l3963 00006C                           l5571 000984  
                         l5563 000920                           l5555 0008C2                           l5547 00084E  
                         l5539 00082C                           l5491 0005C2                           l5483 000538  
                         l5475 000434                           l5467 000402                           l5459 0003C6  
                         l5395 0000D8                           l5379 00006E                           l5387 000096  
                         l5627 00021A                           l5619 00018E                           l5643 0002D8  
                         l4595 000084                           l4907 000094                           l5811 000016  
                         l5803 000000                           l3789 0002C6                           l3797 00030E  
                         l3981 00007C                           l3973 000000                           l3893 0001F8  
                         l3885 0001A6                           l3877 00016E                           l3869 000130  
                         l4669 0001A0                           l5741 00060E                           l5733 000564  
                         l5725 0004BA                           l5717 000416                           l5709 0003B0  
                         l4693 000028                           l4685 000000                           l4861 000068  
                         l4853 000000                           l3965 00007C                           l3957 000000  
                         l5581 0009D8                           l5573 000992                           l5565 00093C  
                         l5557 0008F6                           l5549 000860                           l5493 0005D8  
                         l5477 000448                           l5485 00053E                           l5469 000414  
                         l5397 0000E0                           l5389 0000BC                           l5637 000296  
                         l5629 000244                           l4597 000088                           l4589 000000  
                         l5901 00021C                           l5821 000020                           l5813 000018  
                         l5805 000004                           l4695 000000                           l3799 000328  
                         l3991 000100                           l3983 00008A                           l3975 00002E  
                         l3895 000214                           l3887 0001C0                           l3879 00017A  
                         l5751 0006E4                           l5743 000640                           l5735 0005BA  
                         l5727 0004CE                           l5719 000448                           l4687 000004  
                         l4871 000082                           l4863 00006A                           l4855 000010  
                         l4951 00000E                           l3967 0000A0                           l3959 00002E  
                         l5575 0009AA                           l5567 000944                           l5559 0008FE  
                         l5495 00060A                           l5487 00055C                           l5479 0004AC  
                         l5399 0000F8                           l5639 0002C6                           l5591 000044  
                         l5671 00002A                           l4599 0000CA                           l5903 000228  
                         l5831 00002A                           l5823 000022                           l5815 00001A  
                         l5807 000008                           l4881 00002C                           l3985 00009C  
                         l3977 00003E                           l3897 00023E                           l3889 0001D0  
                         l5761 000802                           l5753 000716                           l5745 000672  
                         l5737 0005CE                           l5729 0004DC                           l5681 00001C  
                         l4689 00000E                           l4873 00008C                           l4865 000074  
                         l4857 00003A                           l4953 000018                           l4945 000000  
                         l3969 0000A6                           l5577 0009BA                           l5569 000954  
                         l5497 00061A                           l5489 000590                           l5593 000048  
                         l5585 000000                           l5673 00004A                           l5905 00022C  
                         l5841 000034                           l5833 00002C                           l5825 000024  
                         l5817 00001C                           l5809 000014                           l4883 000040  
                         l4875 000000                           l4971 000000                           l3987 0000AA  
                         l3979 00006C                           l3899 000274                           l5771 0008FC  
                         l5763 000810                           l5755 000724                           l5747 000680  
                         l5739 0005DC                           l5691 0000E8                           l5683 000032  
                         l4867 000076                           l4859 00005E                           l4955 00001A  
                         l4947 00000A                           l3995 000000                           l5579 0009D0  
                         l5499 00062A                           l5595 000058                           l5587 000028  
                         l5667 000000                           l4891 000004                           l5851 00003E  
                         l5843 000036                           l5835 00002E                           l5827 000026  
                         l5819 00001E                           l4885 000054                           l4877 00000C  
                         l4973 000004                           l3989 0000FA                           l5781 0009D2  
                         l5773 00092E                           l5765 000866                           l5757 00077A  
                         l5749 0006B2                           l5693 000110                           l5685 000046  
                         l5677 000000                           l4869 000080                           l4957 00001C  
                         l4949 00000C                           l4981 000014                           l3997 000016  
                         l5597 000078                           l5589 000036                           l5669 00000C  
                         l4893 00001C                           l5861 000048                           l5853 000040  
                         l5845 000038                           l5837 000030                           l5829 000028  
                         l4887 000068                           l4879 00001C                           l4975 000012  
                         l5783 000A04                           l5775 000960                           l5767 000898  
                         l5759 0007D0                           l5695 0001BE                           l5687 000078  
                         l5679 00000C                           l3999 000026                           l5599 000098  
                         l5791 000000                           l4895 000028                           l5871 000050  
                         l5863 00004C                           l5855 000042                           l5847 00003A  
                         l5839 000032                           l4977 000016                           l5785 000A36  
                         l5777 000992                           l5769 0008EE                           l5697 00026C  
                         l5689 0000B0                           l5793 000012                           l4897 000040  
                         l4889 000000                           l5881 000098                           l5873 000064  
                         l5865 00004E                           l5857 000044                           l5849 00003C  
                         l5787 000A68                           l5779 0009A0                           l5699 00031A  
                         l4979 000000                           l5795 00001A                           l4899 00004C  
                         l5891 000166                           l5883 0000A4                           l5875 000070  
                         l5867 000050                           l5859 000046                           l5789 000A9A  
                         l5797 000022                           l5893 00019C                           l5885 0000CC  
                         l5877 00007E                           l5869 000050                           l5799 00003E  
                         l5895 0001B8                           l5887 0000EE                           l5879 00008A  
                         l5897 0001CC                           l5889 000134                           l5899 0001E6  
                         l5997 000170                           l5999 00022E                           STR_1 000001  
                         STR_2 000013                           STR_5 000017                           u3000 00003C  
                         u3001 000038                           u3010 00007E                           u3011 00007A  
                         u3100 0001B0                           u3020 000094                           u3101 0001AC  
                         u3021 000090                           u3110 0001CE                           u3030 0000A6  
                         u3111 0001CA                           u3031 0000A2                           u4000 00008A  
                         u3200 00031E                           u3120 0001EE                           u3040 0000B6  
                 _BAUD4CONbits 000EE9                           u4001 000086                           u3201 00031A  
                         u3121 0001EA                           u3041 0000B2                           u4010 0000AA  
                         u3210 00032E                           u3130 0001FC                           u3050 0000F2  
                         u4011 0000A6                           u3211 00032A                           u3131 0001F8  
                         u3051 0000EE                           u4020 0000FA                           u3300 000402  
                         u3220 00035A                           u3140 00020C                           u3060 000100  
                         u4100 0000E4                           u4021 0000F6                           u3301 0003FE  
                         u3221 000356                           u3141 000208                           u3061 0000FC  
                         u4101 0000E0                           u3310 00043C                           u3230 00036A  
                         u3150 00023E                           u3070 00016E                           u4110 00000E  
                         u4030 000016                           u3311 000438                           u3231 000366  
                         u3151 00023A                           u3071 00016A                           u4111 00000A  
                         u4031 000012                           u3320 00044E                           u3240 000386  
                         u3160 00024C                           u3080 000186                           u5000 000192  
                         u3400 000012                           u4120 000064                           u4040 000016  
                         u4200 0000EC                           u3321 00044A                           u3241 000382  
                         u3161 000248                           u3081 000180                           u5001 00018E  
                         u3401 00000E                           u4121 000060                           u4041 000012  
                         u3330 00045E                           u3250 000396                           u3170 00026A  
                         u3090 000188                           u5010 0001A0                           u3410 000044  
                         u4130 00001A                           u4050 00004A                           u4210 000042  
                         _T2PR 000FBC                           u3331 00045A                           u3251 000392  
                         u3171 000266                           u5011 00019C                           u3411 000040  
                         u4131 000016                           u4211 00003E                           u3340 00047E  
                         u3260 0003A8                           u3180 0002A2                           u3500 0000AC  
                         u4060 000078                           u4140 000040                           u4220 00001E  
                         u5100 00001A                           u3341 00047A                           u3261 0003A4  
                         u3181 00029E                           u3421 00006E                           u3501 0000A8  
                         u4061 000074                           u4221 00001A                           u5101 000012  
                         u5030 00001A                           u3350 000490                           u3270 0003BE  
                         u3190 0002E8                           u3430 000092                           u3510 0000DA  
                         u4070 00008C                           u4150 00005E                           u5031 000012  
                         u3351 00048C                           u3271 0003BA                           u3191 0002E4  
                         u3431 00008E                           u3511 0000D6                           u4071 000088  
                         u4055 000040                           u4151 00005A                           u3600 000122  
                         u3360 0004AC                           u3280 0003D4                           u3440 0000BC  
                         u3520 000122                           u4400 0000AC                           u4080 0000B4  
                         u4160 000086                           u6000 000260                           u5120 000062  
                         u3601 00011E                           u3361 0004A8                           u3281 0003D0  
                         u3441 0000B8                           u3521 00011E                           u4401 0000A8  
                         u4081 0000B0                           u4161 000082                           u4145 000036  
                         u6001 00025C                           u5121 00005E                           u5050 000062  
                         u3610 000198                           u3530 00001A                           u3290 0003E8  
                         u3450 0000FC                           u3370 000042                           u4410 0000C2  
                         u4090 0000D4                           u4170 0000B0                           u4330 00004E  
                         u6010 000292                           u5130 000074                           u5051 00005E  
                         u3611 000194                           u3531 000016                           u3291 0003E4  
                         u3451 0000F8                           u3371 00003E                           u4411 0000BE  
                         u4091 0000D0                           u4171 0000AC                           u4331 00004A  
                         u6011 00028E                           u5131 00006C                           u3380 000010  
                         u4340 00002A                           u5060 000074                           u3700 0002B2  
                         u3620 0001BA                           u3540 00002C                           u3460 000146  
                         u4420 0001FE                           u6100 0005C2                           u6020 0002D0  
                         u3381 00000C                           u4341 000022                           u5061 00006C  
                         u3701 0002AE                           u3621 0001B6                           u3541 000028  
                         u3461 000142                           u4421 0001FA                           u6101 0005BE  
                         u6021 0002CC                           u3390 000026                           u3710 0002C6  
                         u3630 0001E4                           u3550 00003C                           u3470 000012  
                         u4430 00021C                           u4190 0000EA                           u6110 00060A  
                         u6030 00035C                           u5150 0000D2                           u5118 00001C  
                         u3391 000022                           u3711 0002C2                           u3631 0001E0  
                         u3551 000038                           u3471 00000E                           u4431 000218  
                         u4191 0000E4                           u6111 000606                           u6031 000358  
                         u5151 0000CA                           u5080 0000D2                           u5048 00001C  
                         u3720 0002E0                           u3640 000208                           u3560 000080  
                         u3800 00008E                           u3480 000044                           u4440 000236  
                         u4360 000030                           u6200 00093C                           u6120 00061A  
                         u6040 000392                           u5081 0000CA                           u3721 0002DC  
                         u3641 000204                           u3561 00007C                           u3801 00008A  
                         u3481 000040                           u4441 000232                           u4361 00002A  
                         u4185 0000C2                           u6201 000938                           u6121 000616  
                         u6041 00038E                           u3730 000328                           u3650 00021E  
                         u3570 000092                           u3810 00009E                           u3490 000082  
                         u4450 000246                           u4370 000032                           u6210 0009A4  
                         u6130 0006B4                           u6050 0003AA                           u3731 000324  
                         u3651 00021A                           u3571 00008E                           u3811 00009A  
                         u3491 00007E                           u4451 000242                           u6211 00099E  
                         u6131 0006B0                           u6051 0003A6                           u3740 000358  
                         u3660 00023C                           u3580 0000A2                           u3900 000342  
                         u3820 0000D4                           u6300 00035C                           u2940 000012  
                         u4380 000044                           u6220 0009A6                           u6140 000702  
                         u6060 0003DC                           u5500 000040                           u5148 000076  
                         u3741 000354                           u3661 000238                           u3581 00009E  
                         u3901 00033E                           u3821 0000D0                           u6301 000358  
                         u2941 00000E                           u4381 000040                           u6141 0006FE  
                         u6061 0003D8                           u5501 00003C                           u4358 00002C  
                         u5078 000076                           u3750 000386                           u3670 00025C  
                         u3590 0000E2                           u3910 00035C                           u3830 0000E4  
                         u6310 00037E                           u2950 000024                           u4390 000080  
                         u6230 0009BA                           u6150 0007B0                           u6070 0003EA  
                         u5510 00007C                           u3751 000382                           u3671 000258  
                         u3591 0000DE                           u3911 000358                           u3831 0000E0  
                         u6311 00037A                           u2951 000020                           u4391 00007C  
                         u6231 0009B6                           u6151 0007AC                           u6071 0003E6  
                         u5511 000078                           u3680 00026E                           u3920 0003A4  
                         u3840 00025E                           u3760 00001A                           u6400 0005BA  
                         u6320 0003B0                           u2960 00004C                           u6160 0007EC  
                         u6080 000414                           u6240 000028                           u4800 000054  
                         u5520 000094                           u5168 0000D4                           u3681 00026A  
                         u3921 0003A0                           u3761 000016                           u6401 0005B6  
                         u6321 0003AC                           u2961 000048                           u6161 0007E8  
                         u6081 000410                           u6241 000024                           u4801 000050  
                         u5521 000090                           u5098 0000D4                           u3690 00029C  
                         u3930 0003D2                           u3850 0002B8                           u3770 00002C  
                         u6410 00060E                           u6330 0003D2                           u2970 000082  
                         u6170 0007FA                           u6090 00055C                           u6250 000078  
                         u3691 000298                           u3931 0003CE                           u3851 0002B4  
                         u3771 000028                           u6411 00060A                           u6331 0003CE  
                         u2971 00007E                           u6171 0007F6                           u6091 000558  
                         u6251 000074                           u3940 00040C                           u3860 0002D8  
                         u3780 00003C                           u2980 00001A                           u6500 000866  
                         u6420 000640                           u6340 000404                           u4900 000014  
                         u6180 00084E                           u6260 000098                           u3941 000408  
                         u3861 0002D4                           u3845 000254                           u3781 000038  
                         u2981 000016                           u6501 000862                           u6421 00063C  
                         u6341 000400                           u4901 00000E                           u6181 00084A  
                         u6261 000094                           u3870 0002EA                           u3790 00007C  
                         u2990 00002C                           u6510 000898                           u6430 000672  
                         u6350 000448                           u4910 000016                           u3950 00002E  
                         u6190 000920                           u6270 0001AE                           u3871 0002E6  
                         u3791 000078                           u2991 000028                           u6511 000894  
                         u6431 00066E                           u6351 000444                           u3951 00002A  
                         u6191 00091C                           u6271 0001AA                           u3880 000318  
                         u4920 000012                           u6600 000A9A                           u6520 0008EE  
                         u6440 0006B2                           u6360 00047A                           u3960 00006C  
                         u6280 00004A                           u3881 000314                           u4921 00000E  
                         u6601 000A96                           u6521 0008EA                           u6441 0006AE  
                         u6361 000476                           u3961 000068                           u6281 000046  
                         u5570 00002E                           u3890 00032E                           u4930 000020  
                         u6530 00092E                           u6450 0006E4                           u6370 0004AC  
                         u6290 00032A                           u3970 0000A0                           u4850 00001C  
                         u5490 00001C                           u6610 00007E                           u5571 00002A  
                         u3891 00032A                           u4931 00001C                           u6531 00092A  
                         u6451 0006E0                           u6371 0004A8                           u6291 000326  
                         u3971 00009C                           u4851 000018                           u5491 000018  
                         u6611 00007A                           u3980 00002E                           u4940 00007C  
                         u6540 000960                           u6460 000716                           u6380 00050E  
                         u5580 000014                           u5900 0001B8                           u5820 00004A  
                         u4780 00001A                           u4860 0000E6                           u6620 000098  
                         u3981 00002A                           u4941 000078                           u6541 00095C  
                         u6461 000712                           u6381 00050A                           u5581 000010  
                         u5901 0001B4                           u4781 000016                           u4861 0000E2  
                         u6621 000094                           u3990 00006C                           u4950 0000D2  
                         u6550 000992                           u6470 00077A                           u6390 000564  
                         u5910 0001F4                           u5830 000078                           u4790 000038  
                         u6630 0000B8                           u3991 000068                           u4951 0000CE  
                         u6551 00098E                           u6471 000776                           u6391 000560  
                         u5911 0001F0                           u5831 000074                           u4791 000034  
                         u6631 0000AE                           u4960 00011C                           u6560 0009D2  
                         u6480 0007D0                           u5840 00009A                           u5920 000024  
                         u4961 000118                           u6561 0009CE                           u6481 0007CC  
                         u5841 000096                           u5825 000040                           u5921 000020  
                         u4890 000012                           u4970 00013A                           u6570 000A04  
                         u6490 000802                           u5930 00006E                           u6650 000166  
                         u4891 00000E                           u4971 000136                           u6571 000A00  
                         u6491 0007FE                           u5931 00006A                           u6707 00008E  
                         u6651 000162                           u4980 00014A                           u6580 000A36  
                         u5860 000108                           u5940 00007E                           u4981 000146  
                         u6581 000A32                           u5861 000104                           u5941 00007A  
                         u6717 0000B2                           u4990 000158                           u6590 000A68  
                         u5870 00012C                           u5950 0000BC                           u4991 000154  
                         u6591 000A64                           u6807 0008F4                           u5855 0000AE  
                         u5951 0000B8                           u6727 00009E                           u5880 000148  
                         u5856 0000B8                           u5960 0000CE                           u6648 0000BC  
                         u6817 000998                           u6737 000014                           u5881 000144  
                         u5857 0000C8                           u5961 0000CA                           u5890 00019C  
                         u5970 000148                           u6827 000AA0                           u6747 0004B2  
                         u5875 000122                           u5971 000144                           u6667 0001A8  
                         u5980 00015A                           u6837 000034                           u6757 0004D4  
                         u5981 000156                           u6677 0001D8                           u5990 0001D4  
                         u6847 00008E                           u6767 0005D4                           u5895 000192  
                         u5991 0001D0                           u6687 000234                           u6857 0000B2  
                         u6777 000678                           u6697 000034                           u6787 00071C  
                         u6797 000808                           abs@a 000016                           _dbuf 00003C  
                         _labs 000000                           _main 000000                           _dtoa 000000  
                         _prec 00001E                           pad@i 00001B                           pad@p 000018  
                         fsr1h 000FE2                           fsr2h 000FDA                           indf2 000FDF  
                         fsr1l 000FE1                           pad@w 00001D                           fsr2l 000FD9  
                         btemp 000000                           _stop 000000                  ___fpclassifyf 000000  
                         prodh 000FF4                           prodl 000FF3                           start 000000* 
              ___fldiv@new_exp 000046                    main@string4 000000         __end_of_color_read_Red 000050  
              __end_of_HighISR 000060                   ___param_bank 000000                   main@clearRef 000018  
                        ??_abs 000018                          ??_pad 00001A                  ___fltol@sign1 00000C  
              __end_of___aodiv 000188                          ?_labs 000004                __end_of___fladd 0004C0  
                        ?_main 000000                          ?_dtoa 00001F                __end_of___aomod 000164  
              __end_of___fldiv 00039A                __end_of___flneg 000038                __end_of___flmul 00042A  
              __end_of___flsub 000046                __end_of___fltol 000106                          ?_stop 000017  
              __end_of___lwdiv 000074                          i2l431 000028                          i2l445 000016  
                        i2l438 00002A                          i2l465 000050                          i2l467 000054  
                 vfpfcnvrt@fmt 000045                          _TMR0H 000FD4                          _TMR0L 000FD3  
   __end_of_I2C_2_Master_Start 00000A     __end_of_I2C_2_Master_Write 00000C                          _flags 000024  
                        _fputc 000000                          _fputs 000000                          labs@a 000004  
                        pad@fp 000014                          _width 00001C                          _putch 000000  
                        dtoa@d 000021                          dtoa@i 00003F                          dtoa@n 000037  
                        dtoa@p 000033                          dtoa@s 000041                          dtoa@w 000035  
                        tablat 000FF5                          ttemp5 000001                          ttemp6 000004  
                        ttemp7 000008                          status 000FD8                          wtemp8 000001  
              __end_of_sprintf 000052                 ?___fpclassifyf 000004        __end_of_color_read_Blue 000050  
        _I2C_2_Master_RepStart 000000             putCharToRxBuf@byte 000000                ?_color_read_Red 000008  
              __initialization 000000                   __end_of_labs 000066                   __end_of_main 000246  
                 __end_of_dtoa 00027E                i2_isDataInTxBuf 000000                   __end_of_stop 0000AE  
           putCharToTxBuf@byte 000004                  colorDetect@mL 000008                         ??_labs 000008  
                colorDetect@mR 00000A                         ??_main 000075                         ??_dtoa 000029  
                       ??_stop 00001B                  __activetblptr 000003                   ?_setMotorPWM 000011  
                       ?_fputc 000004                         ?_fputs 00000D                         _CCPR1H 000FAA  
                       _CCPR2H 000FA6                         _CCPR3H 000F25                         _CCPR4H 000F21  
                       ?_putch 000000          colorDetect@greenPrint 00002A                         _RC0PPS 000E62  
                       _RC4REG 000EE3                         _RE2PPS 000E74                         _RD5PPS 000E6F  
                       _RC7PPS 000E69                         _RD6PPS 000E70                         _RE4PPS 000E76  
                       i2l3005 000000                         i2l5241 000030                         i2l5243 000044  
                       i2l5235 00000A                         i2l5237 00001A                         i2l5239 000020  
                       _RG6PPS 000E88                         i2l4991 000000                         i2l4983 000002  
                       i2l4993 000010                         i2l4985 000012                         i2l4995 000014  
                       i2l4987 000016                         i2l4989 000026                      ??_HighISR 000002  
     __end_of_color_click_init 000034                         _RX4PPS 000E15                         _TX4REG 000EE4  
             __end_of___xxtofl 0001B4               __end_of_getColor 00005E                   _CCPTMRS0bits 000FAD  
                 vfprintf@cfmt 00005A                         ___flge 000000               _getCharFromTxBuf 000000  
                       ___fleq 000000                      ??___aodiv 000014                      ??___fladd 00000C  
                    ??___aomod 000014                         ___wmul 000000                      ??___fldiv 00003D  
                    ??___flneg 000008                      ??___flmul 00001C                      ??___flsub 000035  
                    ??___fltol 000008                         _efgtoa 000000                      ??___lwdiv 00000E  
                       _floorf 000000                         _memcpy 000000                         clear_0 000026  
                       clear_1 000032                         isa$std 000001                         pad@buf 000016  
                main@motorLeft 000034                         dtoa@fp 00001F                         _strcpy 000000  
                       fputc@c 000004              ?_TxBufferedString 000005                         fputs@c 000011  
                       fputs@i 000012                         fputs@s 00000D                ___fpclassifyf@e 00000C  
              ___fpclassifyf@u 00000E                ___fpclassifyf@x 000004                      ??_right45 000000  
                 __mediumconst 000000*                        tblptrh 000FF7                         tblptrl 000FF6  
                       tblptru 000FF8             ??_TxBufferedString 000007               __end_of_whiteCal 0000E4  
                       putch@c 000000               __end_of_vfprintf 000056                         stop@mL 000017  
                       stop@mR 000019              ??_initDCmotorsPWM 000006                      ??_sprintf 000056  
                   ___flge@ff1 000035                     ___flge@ff2 000039                ??___fpclassifyf 000008  
                 ___xxtofl@arg 00000E                   ___xxtofl@exp 00000D                   ___xxtofl@val 000004  
                   ___fleq@ff1 000004                     ___fleq@ff2 000008          __end_of_isDataInTxBuf 000018  
                   __accesstop 000000*       __end_of__initialization 000040       __end_of_color_read_Clear 000050  
                   ___flneg@f1 000004       __end_of_color_read_Green 000050         ?_I2C_2_Master_RepStart 000000  
      __end_ofi2_isDataInTxBuf 000018                  ___rparam_used 000001                     ___fltol@f1 000004  
             ?_color_read_Blue 000008              main@ambientRGBVal 00001C                 __pcstackCOMRAM 000000  
                ?_DCmotorsInit 000004                   __pidataBANK0 000000                  __end_of_fputc 0000CA  
                __end_of_fputs 000044                  __end_of_putch 000002                        ??_fputc 000008  
                      ??_fputs 000011                        ??_putch 000004                     __pbssBANK0 000000  
                   __pbssBANK1 000000                     _ambientCal 000000              _color_writetoaddr 000000  
                 _T2CLKCONbits 000FBF                 ??_DCmotorsInit 000008                        ?___flge 000035  
                      ?___fleq 000004             ?_color_writetoaddr 000006                        ?___wmul 000004  
                      ?_efgtoa 000010                        ?_floorf 00004E                        ?_memcpy 000004  
          ??_color_writetoaddr 000007                        ?_strcpy 000004                      ?___xxtofl 000004  
                      _SP4BRGH 000EE6                        _SP4BRGL 000EE5                      ?_getColor 00000F  
                      _SSP2ADD 000ED6                        _SSP2BUF 000ED5         color_writetoaddr@value 000006  
             ??_color_read_Red 00000A                        _HighISR 000000      __end_of_color_writetoaddr 000020  
             ?i2_isDataInTxBuf 000000             _I2C_2_Master_Start 000000                     _initUSART4 000000  
           _I2C_2_Master_Write 000000                        __Hparam 000000                        __Lparam 000000  
            color_read_Red@tmp 00000D                        ___aodiv 000000                        ___fladd 000000  
                      ___aomod 000000                        ___fldiv 000000                        ___flneg 000000  
                      ___flmul 000000                      ?_whiteCal 000011                        ___flsub 000000  
                      ___fltol 000000            ?_I2C_2_Master_Start 000000                        ___lwdiv 000000  
          ?_I2C_2_Master_Write 000000                     _off_period 000020                      ?_vfprintf 000054  
                 __psmallconst 000000                        __pcinit 000000                        __ramtop 000000* 
                      __ptext0 000000                        __ptext1 000000                        __ptext2 000000  
                      __ptext3 000000                        __ptext4 000000                        __ptext5 000000  
                      __ptext6 000000                        __ptext7 000000                        __ptext8 000000  
                      __ptext9 000000              colorDetect@RGBVal 00001E                      _T2CONbits 000FBD  
                   ??___xxtofl 000008                        _right45 000000*                     _T2HLTbits 000FBE  
                      efgtoa@c 000016                        efgtoa@d 000022                        efgtoa@e 000026  
                      efgtoa@f 000012                        efgtoa@g 000039                        efgtoa@h 000030  
                      efgtoa@i 00002E                        efgtoa@l 000034                        efgtoa@m 000024  
                      efgtoa@n 00003D                        efgtoa@p 000019                        efgtoa@t 00001B  
                      efgtoa@u 00003F                        efgtoa@w 000028                     ??_getColor 000011  
                _RxBufWriteCnt 000003       __end_of_getCharFromTxBuf 00002C                 main@motorRight 00003D  
                      _sprintf 000000           ??_I2C_2_Master_Start 000005           ??_I2C_2_Master_Write 000005  
         end_of_initialization 000040              __end_of_sendTxBuf 00001A                        floorf@e 00000A  
                      floorf@m 000006                        floorf@u 00000C                        floorf@x 00004E  
               DCmotorsInit@mL 000004                 DCmotorsInit@mR 000006                        memcpy@d 00000A  
                      memcpy@n 000008                        memcpy@s 00000C                    ?_ambientCal 000011  
                      fputc@fp 000006                        fputs@fp 00000F              ?_color_click_init 000000  
            colorDetect@whiteB 000014              colorDetect@whiteG 000010              colorDetect@whiteR 00000C  
           ??_color_click_init 000008              __end_of_vfpfcnvrt 000306                     efgtoa@mode 000020  
                   efgtoa@sign 000038                        postdec1 000FE5                        postdec2 000FDD  
                      postinc0 000FEE                        postinc1 000FE6                        postinc2 000FDE  
             vfpfcnvrt@convarg 000049                     ??_whiteCal 000013                     ??_vfprintf 000056  
                      strcpy@d 00000A                        strcpy@s 000008                _initDCmotorsPWM 000000  
                    _PORTFbits 000F8E             setMotorPWM@negDuty 000016                    ___fladd@grs 000013  
                   main@RGBVal 000024                  ___xxtofl@sign 00000C                      _TRISAbits 000F81  
           setMotorPWM@posDuty 000015                      _TRISCbits 000F83                      _TRISDbits 000F84  
                    _TRISEbits 000F85                      _TRISFbits 000F86                      _TRISGbits 000F87  
                    _TRISHbits 000F88           __end_of_DCmotorsInit 0000D2                    ___fldiv@grs 000048  
                  ___fldiv@rem 000041       color_writetoaddr@address 000007        ??_I2C_2_Master_RepStart 000005  
                  ___flmul@grs 000021                    _CCP1CONbits 000FAB              ?_color_read_Clear 000008  
                 _EUSART4RXbuf 000000                   _EUSART4TXbuf 000000                    _CCP2CONbits 000FA7  
            ?_color_read_Green 000008                    _CCP3CONbits 000F26                    ?_initUSART4 000000  
                  _CCP4CONbits 000F22                     main@whiteC 000014             ??_color_read_Clear 00000A  
           ??_color_read_Green 00000A                  ??_colorDetect 00004E                 __end_of___flge 000104  
               __end_of___fleq 0000AA                 _fullSpeedAhead 000000*                   vfpfcnvrt@ap 000047  
                  vfpfcnvrt@cp 000052                    vfpfcnvrt@fp 000043                 __end_of___wmul 000026  
               __end_of_efgtoa 0009FA                 __end_of_floorf 000216                 __end_of_memcpy 000050  
                   floorf@F526 000014         colorDetect@whiteRGBVal 000006                 __end_of_strcpy 000044  
          color_read_Clear@tmp 00000D            start_initialization 000000           colorDetect@bluePrint 00002E  
                  __end_of_abs 000040                    __end_of_pad 00007A                  _TxBufWriteCnt 000001  
        __end_of___fpclassifyf 0000FE            color_read_Green@tmp 00000D        __end_of_initDCmotorsPWM 000090  
                  vfprintf@fmt 000056                       ??___flge 00003D                       ??___fleq 00000C  
                     ??___wmul 000008                       ??_efgtoa 000052                 _putCharToRxBuf 000000  
               _putCharToTxBuf 000000                    __pdataBANK0 000000                       ??_floorf 000000  
                     ??_memcpy 00000A            __end_of_colorDetect 000AAA                       ??_strcpy 000008  
                    ___fladd@a 000008                      ___fladd@b 000004                      ___fldiv@a 000039  
                    ___fldiv@b 000035                      ___flmul@a 000018                      ___flmul@b 000014  
                  __pbssCOMRAM 000000                      ___flsub@a 000031                      ___flsub@b 00002D  
                __pcstackBANK0 000000                  __pcstackBANK1 000000               ___aodiv@dividend 000004  
                     ?_HighISR 000000                    _efgtoa$2693 00001D               ___lwdiv@dividend 00000A  
                    _dtoa$2662 000031         __end_of_putCharToRxBuf 00002A         __end_of_putCharToTxBuf 00002A  
              ?_fullSpeedAhead 000000                      __pintcode 000000                       ?___aodiv 000004  
                     ?___fladd 000004                       ?___aomod 000004                       ?___fldiv 000035  
             ___aodiv@quotient 000016                       ?___flneg 000004                       ?___flmul 000014  
                     ?___flsub 00002D                       ?___fltol 000004                       ?___lwdiv 00000A  
       TxBufferedString@string 000005           I2C_2_Master_Read@ack 000006           I2C_2_Master_Read@tmp 000007  
                  __smallconst 000000*             _I2C_2_Master_Idle 000000              _I2C_2_Master_Init 000000  
            _I2C_2_Master_Read 000000                       ?_right45 000000              _I2C_2_Master_Stop 000000  
                 _RxBufReadCnt 000002             ?_I2C_2_Master_Idle 000000             ?_I2C_2_Master_Init 000000  
           ?_I2C_2_Master_Read 000000                  ??_setMotorPWM 000013             ?_I2C_2_Master_Stop 000000  
             ___lwdiv@quotient 00000E       initDCmotorsPWM@PWMperiod 000004                       ?_sprintf 00005C  
            ?_getCharFromTxBuf 000000             ??_getCharFromTxBuf 000000                   ??_ambientCal 000013  
          ??_I2C_2_Master_Idle 000004            ??_I2C_2_Master_Init 000004            ??_I2C_2_Master_Read 000005  
               ___wmul@product 000008                       _LATAbits 000F79            ??_I2C_2_Master_Stop 000005  
                     _LATCbits 000F7B                  _isDataInTxBuf 000000                       _LATDbits 000F7C  
                     _LATEbits 000F7D                       _LATFbits 000F7E                      _on_period 000022  
             _TxBufferedString 000000                       _LATGbits 000F7F                       _LATHbits 000F80  
                    _sendTxBuf 000000                       _IPR4bits 000E23                       _PIE4bits 000E2D  
                    getColor@v 00000F                       i2u270_40 000016                       i2u269_40 000014  
                     i2u269_41 00000E                       _PIR4bits 000E37                       i2u560_40 000010  
                     i2u560_41 00000C                       i2u580_40 000030                       i2u580_41 00002C  
                     i2u581_40 000044                       i2u581_41 000040                       i2u559_40 000012  
                     i2u559_41 00000E                       i2u579_40 00001A                       i2u579_41 000016  
              ?_putCharToRxBuf 000000               ?_initDCmotorsPWM 000004                    _colorDetect 000000  
              ?_putCharToTxBuf 000000                   _DCmotorsInit 000000                       _SSP2CON2 000EDA  
                     _SSP2STAT 000ED8                      _vfpfcnvrt 000000      __end_of_I2C_2_Master_Idle 000028  
    __end_of_I2C_2_Master_Init 00002A      __end_of_I2C_2_Master_Read 000042              ___wmul@multiplier 000004  
    __end_of_I2C_2_Master_Stop 00000A                   setMotorPWM@m 000011    I2C_2_Master_Write@data_byte 000005  
           __end_of_ambientCal 0000E4              ??_color_read_Blue 00000A                   _TxBufReadCnt 000000  
                   vfpfcnvrt@c 000051                      copy_data0 000014            colorDetect@ambientB 00001C  
          colorDetect@ambientG 00001A            colorDetect@ambientR 000018            colorDetect@clearRef 000000  
               ?_isDataInTxBuf 000000  __end_of_I2C_2_Master_RepStart 00000A             color_read_Blue@tmp 00000D  
          __end_of_setMotorPWM 00016C                     ?_sendTxBuf 000000                   ??_initUSART4 000004  
                     __Hrparam 000000*           colorDetect@redPrint 000026                      memcpy@tmp 00000E  
                   vfprintf@ap 000058                       __Lrparam 000000*                    vfprintf@fp 000054  
                   ?_vfpfcnvrt 000043       colorDetect@ambientRGBVal 000004                ___aodiv@divisor 00000C  
              ___aodiv@counter 000014                     _ANSELDbits 000EA7             ___fpclassifyf@F465 000018  
                   _ANSELFbits 000EB4                     sprintf@fmt 00005E                       ___xxtofl 000000  
                   _T0CON0bits 000FD5                     _T0CON1bits 000FD6                ___lwdiv@divisor 00000C  
           __end_of_initUSART4 000020                       _getColor 000000                ___lwdiv@counter 000010  
                     __ptext10 000000                       __ptext11 000000                       __ptext20 000000  
                     __ptext12 000000                       __ptext21 000000                       __ptext13 000000  
                     __ptext30 000000                       __ptext22 000000                       __ptext14 000000  
                     __ptext31 000000                       __ptext23 000000                       __ptext15 000000  
                     __ptext40 000000                       __ptext32 000000                       __ptext24 000000  
                     __ptext16 000000                       __ptext41 000000                       __ptext33 000000  
                     __ptext25 000000                       __ptext17 000000                       __ptext50 000000  
                     __ptext42 000000                       __ptext34 000000                       __ptext26 000000  
                     __ptext18 000000                       __ptext51 000000                       __ptext43 000000  
                     __ptext35 000000                       __ptext27 000000                       __ptext19 000000  
                     __ptext52 000000                       __ptext44 000000                       __ptext36 000000  
                     __ptext28 000000                       __ptext53 000000                       __ptext45 000000  
                     __ptext37 000000                       __ptext29 000000                       __ptext54 000000  
                     __ptext46 000000                       __ptext38 000000                       __ptext47 000000  
                     __ptext39 000000                       __ptext56 000000                       __ptext48 000000  
                     __ptext57 000000                       __ptext49 000000                       __ptext58 000000  
                  ambientCal@i 000015                    ambientCal@v 000011                   _SSP2CON1bits 000ED9  
                 _SSP2CON2bits 000EDA                     strcpy@dest 000004                       efgtoa@fp 000010  
                     efgtoa@ne 000017                       efgtoa@pp 00001F                       efgtoa@ou 00002A  
               _turning_time45 000002                       isa$xinst 000000                     _RC4STAbits 000EE7  
                     int$flags 000000                       _whiteCal 000000                       _vfprintf 000000  
             ___aomod@dividend 000004                      whiteCal@i 000015                      whiteCal@v 000011  
                   _INTCONbits 000FF2              ??i2_isDataInTxBuf 000000                       memcpy@d1 000004  
                 _reverse_time 000000                       memcpy@s1 000006                    _setMotorPWM 000000  
              ??_isDataInTxBuf 000004                       intlevel2 000000*                     sprintf@ap 000068  
             ??_fullSpeedAhead 000000                    ??_sendTxBuf 000004                main@whiteRGBVal 00002C  
                    strcpy@src 000006                    efgtoa@nmode 000021                ___aomod@divisor 00000C  
                  ??_vfpfcnvrt 000054                ___aomod@counter 000014               _color_click_init 000000  
     __end_of_TxBufferedString 000030                       sprintf@f 00006A                       sprintf@s 00005C  
                   _SSP2DATPPS 000E1D                     _SSP2CLKPPS 000E1C                  ___fladd@signs 000010  
                   _TX4STAbits 000EE8                   ___aodiv@sign 000015                   ___fladd@aexp 000011  
                 ___fladd@bexp 000012               ??_putCharToRxBuf 000000               ??_putCharToTxBuf 000004  
                 ___aomod@sign 000015                   ?_colorDetect 000000  

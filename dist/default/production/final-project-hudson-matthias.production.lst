

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Tue Dec 13 19:47:10 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=3
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=3
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=3
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=3
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=3
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=3
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=2
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=2
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=2
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=2
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=2
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=2
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=2
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=3
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=3
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=3
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=3
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=2
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=2
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=2
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=2
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=2
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    81                           	psect	text65,global,reloc=2,class=CODE,delta=1
    82                           	psect	text66,global,reloc=2,class=CODE,delta=1
    83                           	psect	text67,global,reloc=2,class=CODE,delta=1
    84                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    85                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    86                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    87                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    88                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    89   000000                     
    90                           ; Version 2.35
    91                           ; Generated 05/05/2021 GMT
    92                           ; 
    93                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    94                           ; All rights reserved.
    95                           ; 
    96                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    97                           ; 
    98                           ; Redistribution and use in source and binary forms, with or without modification, are
    99                           ; permitted provided that the following conditions are met:
   100                           ; 
   101                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   102                           ;        conditions and the following disclaimer.
   103                           ; 
   104                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   105                           ;        of conditions and the following disclaimer in the documentation and/or other
   106                           ;        materials provided with the distribution. Publication is not required when
   107                           ;        this file is used in an embedded application.
   108                           ; 
   109                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   110                           ;        software without specific prior written permission.
   111                           ; 
   112                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   113                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   114                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   115                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   116                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   117                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   118                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   119                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   120                           ; 
   121                           ; 
   122                           ; Code-generator required, PIC18F67K40 Definitions
   123                           ; 
   124                           ; SFR Addresses
   125   000000                     
   126                           	psect	idataBANK0
   127   005ACA                     __pidataBANK0:
   128                           	callstack 0
   129                           
   130                           ;initializer for _reverse_time
   131   005ACA  00C8               	dw	200
   132                           
   133                           ;initializer for _turning_time45
   134   005ACC  00C8               	dw	200
   135   000000                     _TX4REG	set	3812
   136   000000                     _RC4STAbits	set	3815
   137   000000                     _SP4BRGH	set	3814
   138   000000                     _TRISFbits	set	3974
   139   000000                     _LATFbits	set	3966
   140   000000                     _TRISDbits	set	3972
   141   000000                     _TRISGbits	set	3975
   142   000000                     _LATGbits	set	3967
   143   000000                     _LATEbits	set	3965
   144   000000                     _SSP2CON2bits	set	3802
   145   000000                     _RX4PPS	set	3605
   146   000000                     _SSP2CLKPPS	set	3612
   147   000000                     _SSP2DATPPS	set	3613
   148   000000                     _RC7PPS	set	3689
   149   000000                     _RE2PPS	set	3700
   150   000000                     _LATCbits	set	3963
   151   000000                     _LATDbits	set	3964
   152   000000                     _TRISAbits	set	3969
   153   000000                     _LATHbits	set	3968
   154   000000                     _TRISCbits	set	3971
   155   000000                     _TRISEbits	set	3973
   156   000000                     _PORTFbits	set	3982
   157   000000                     _TRISHbits	set	3976
   158   000000                     _T2PR	set	4028
   159   000000                     _T2CONbits	set	4029
   160   000000                     _CCPR2H	set	4006
   161   000000                     _CCPR1H	set	4010
   162   000000                     _RE4PPS	set	3702
   163   000000                     _RG6PPS	set	3720
   164   000000                     _RD5PPS	set	3695
   165   000000                     _ANSELDbits	set	3751
   166   000000                     _SSP2ADD	set	3798
   167   000000                     _SSP2CON1bits	set	3801
   168   000000                     _CCPR4H	set	3873
   169   000000                     _CCPR3H	set	3877
   170   000000                     _TMR0L	set	4051
   171   000000                     _TMR0H	set	4052
   172   000000                     _T0CON0bits	set	4053
   173   000000                     _T0CON1bits	set	4054
   174   000000                     _T2CLKCONbits	set	4031
   175   000000                     _T2HLTbits	set	4030
   176   000000                     _CCP1CONbits	set	4011
   177   000000                     _CCPTMRS0bits	set	4013
   178   000000                     _CCP2CONbits	set	4007
   179   000000                     _LATAbits	set	3961
   180   000000                     _CCP3CONbits	set	3878
   181   000000                     _CCP4CONbits	set	3874
   182   000000                     _RC4REG	set	3811
   183   000000                     _SP4BRGL	set	3813
   184   000000                     _TX4STAbits	set	3816
   185   000000                     _BAUD4CONbits	set	3817
   186   000000                     _SSP2CON2	set	3802
   187   000000                     _SSP2STAT	set	3800
   188   000000                     _ANSELFbits	set	3764
   189   000000                     _SSP2BUF	set	3797
   190   000000                     _IPR4bits	set	3619
   191   000000                     _PIE4bits	set	3629
   192   000000                     _RC0PPS	set	3682
   193   000000                     _RD6PPS	set	3696
   194   000000                     _INTCONbits	set	4082
   195   000000                     _PIR4bits	set	3639
   196                           
   197                           	psect	smallconst
   198   000E00                     __psmallconst:
   199                           	callstack 0
   200   000E00  00                 	db	0
   201   000E01                     STR_1:
   202   000E01  52                 	db	82	;'R'
   203   000E02  3A                 	db	58	;':'
   204   000E03  20                 	db	32
   205   000E04  25                 	db	37
   206   000E05  66                 	db	102	;'f'
   207   000E06  20                 	db	32
   208   000E07  47                 	db	71	;'G'
   209   000E08  3A                 	db	58	;':'
   210   000E09  20                 	db	32
   211   000E0A  25                 	db	37
   212   000E0B  66                 	db	102	;'f'
   213   000E0C  20                 	db	32
   214   000E0D  42                 	db	66	;'B'
   215   000E0E  3A                 	db	58	;':'
   216   000E0F  25                 	db	37
   217   000E10  66                 	db	102	;'f'
   218   000E11  20                 	db	32
   219   000E12  0D                 	db	13
   220   000E13  00                 	db	0
   221   000E14  25                 	db	37
   222   000E15  64                 	db	100	;'d'
   223   000E16  2C                 	db	44
   224   000E17  25                 	db	37
   225   000E18  64                 	db	100	;'d'
   226   000E19  2C                 	db	44
   227   000E1A  25                 	db	37
   228   000E1B  64                 	db	100	;'d'
   229   000E1C  2C                 	db	44
   230   000E1D  25                 	db	37
   231   000E1E  64                 	db	100	;'d'
   232   000E1F  20                 	db	32
   233   000E20  0D                 	db	13
   234   000E21  0A                 	db	10
   235   000E22  00                 	db	0
   236   000E23                     STR_3:
   237   000E23  69                 	db	105	;'i'
   238   000E24  6E                 	db	110	;'n'
   239   000E25  66                 	db	102	;'f'
   240   000E26  00                 	db	0
   241   000E27                     STR_6:
   242   000E27  6E                 	db	110	;'n'
   243   000E28  61                 	db	97	;'a'
   244   000E29  6E                 	db	110	;'n'
   245   000E2A  00                 	db	0
   246   000E2B  00                 	db	0	; dummy byte at the end
   247   000000                     
   248                           ; #config settings
   249                           
   250                           	psect	cinit
   251   005496                     __pcinit:
   252                           	callstack 0
   253   005496                     start_initialization:
   254                           	callstack 0
   255   005496                     __initialization:
   256                           	callstack 0
   257                           
   258                           ; Initialize objects allocated to BANK0 (4 bytes)
   259                           ; load TBLPTR registers with __pidataBANK0
   260   005496  0ECA               	movlw	low __pidataBANK0
   261   005498  6EF6               	movwf	tblptrl,c
   262   00549A  0E5A               	movlw	high __pidataBANK0
   263   00549C  6EF7               	movwf	tblptrh,c
   264   00549E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   265   0054A0  6EF8               	movwf	tblptru,c
   266   0054A2  EE00  F0FB         	lfsr	0,__pdataBANK0
   267   0054A6  EE10 F004          	lfsr	1,4
   268   0054AA                     copy_data0:
   269   0054AA  0009               	tblrd		*+
   270   0054AC  CFF5 FFEE          	movff	tablat,postinc0
   271   0054B0  50E5               	movf	postdec1,w,c
   272   0054B2  50E1               	movf	fsr1l,w,c
   273   0054B4  E1FA               	bnz	copy_data0
   274                           
   275                           ; Clear objects allocated to BANK2 (60 bytes)
   276   0054B6  EE02  F000         	lfsr	0,__pbssBANK2
   277   0054BA  0E3C               	movlw	60
   278   0054BC                     clear_0:
   279   0054BC  6AEE               	clrf	postinc0,c
   280   0054BE  06E8               	decf	wreg,f,c
   281   0054C0  E1FD               	bnz	clear_0
   282                           
   283                           ; Clear objects allocated to BANK1 (100 bytes)
   284   0054C2  EE01  F06D         	lfsr	0,__pbssBANK1
   285   0054C6  0E64               	movlw	100
   286   0054C8                     clear_1:
   287   0054C8  6AEE               	clrf	postinc0,c
   288   0054CA  06E8               	decf	wreg,f,c
   289   0054CC  E1FD               	bnz	clear_1
   290                           
   291                           ; Clear objects allocated to BANK0 (17 bytes)
   292   0054CE  EE00  F0EA         	lfsr	0,__pbssBANK0
   293   0054D2  0E11               	movlw	17
   294   0054D4                     clear_2:
   295   0054D4  6AEE               	clrf	postinc0,c
   296   0054D6  06E8               	decf	wreg,f,c
   297   0054D8  E1FD               	bnz	clear_2
   298                           
   299                           ; Clear objects allocated to COMRAM (4 bytes)
   300   0054DA  6A5A               	clrf	(__pbssCOMRAM+3)& (0+255),c
   301   0054DC  6A59               	clrf	(__pbssCOMRAM+2)& (0+255),c
   302   0054DE  6A58               	clrf	(__pbssCOMRAM+1)& (0+255),c
   303   0054E0  6A57               	clrf	__pbssCOMRAM& (0+255),c
   304   0054E2                     end_of_initialization:
   305                           	callstack 0
   306   0054E2                     __end_of__initialization:
   307                           	callstack 0
   308   0054E2  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   309   0054E4  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   310   0054E6  0100               	movlb	0
   311   0054E8  EF6A  F018         	goto	_main	;jump to C main() function
   312                           
   313                           	psect	bssCOMRAM
   314   000057                     __pbssCOMRAM:
   315                           	callstack 0
   316   000057                     _TxBufReadCnt:
   317                           	callstack 0
   318   000057                     	ds	1
   319   000058                     _TxBufWriteCnt:
   320                           	callstack 0
   321   000058                     	ds	1
   322   000059                     _RxBufReadCnt:
   323                           	callstack 0
   324   000059                     	ds	1
   325   00005A                     _RxBufWriteCnt:
   326                           	callstack 0
   327   00005A                     	ds	1
   328                           
   329                           	psect	bssBANK0
   330   0000EA                     __pbssBANK0:
   331                           	callstack 0
   332   0000EA                     floorf@F526:
   333                           	callstack 0
   334   0000EA                     	ds	4
   335   0000EE                     ___fpclassifyf@F465:
   336                           	callstack 0
   337   0000EE                     	ds	4
   338   0000F2                     _width:
   339                           	callstack 0
   340   0000F2                     	ds	2
   341   0000F4                     _prec:
   342                           	callstack 0
   343   0000F4                     	ds	2
   344   0000F6                     _off_period:
   345                           	callstack 0
   346   0000F6                     	ds	2
   347   0000F8                     _on_period:
   348                           	callstack 0
   349   0000F8                     	ds	2
   350   0000FA                     _flags:
   351                           	callstack 0
   352   0000FA                     	ds	1
   353                           
   354                           	psect	dataBANK0
   355   0000FB                     __pdataBANK0:
   356                           	callstack 0
   357   0000FB                     _reverse_time:
   358                           	callstack 0
   359   0000FB                     	ds	2
   360   0000FD                     _turning_time45:
   361                           	callstack 0
   362   0000FD                     	ds	2
   363                           
   364                           	psect	bssBANK1
   365   00016D                     __pbssBANK1:
   366                           	callstack 0
   367   00016D                     _EUSART4RXbuf:
   368                           	callstack 0
   369   00016D                     	ds	20
   370   000181                     _dbuf:
   371                           	callstack 0
   372   000181                     	ds	80
   373                           
   374                           	psect	bssBANK2
   375   000200                     __pbssBANK2:
   376                           	callstack 0
   377   000200                     _EUSART4TXbuf:
   378                           	callstack 0
   379   000200                     	ds	60
   380                           
   381                           	psect	cstackBANK1
   382   000100                     __pcstackBANK1:
   383                           	callstack 0
   384   000100                     colorDetect@string1:
   385                           	callstack 0
   386                           
   387                           ; 20 bytes @ 0x0
   388   000100                     	ds	20
   389   000114                     colorDetect@whiteR:
   390                           	callstack 0
   391                           
   392                           ; 4 bytes @ 0x14
   393   000114                     	ds	4
   394   000118                     colorDetect@whiteG:
   395                           	callstack 0
   396                           
   397                           ; 4 bytes @ 0x18
   398   000118                     	ds	4
   399   00011C                     colorDetect@whiteB:
   400                           	callstack 0
   401                           
   402                           ; 4 bytes @ 0x1C
   403   00011C                     	ds	4
   404   000120                     colorDetect@ambientR:
   405                           	callstack 0
   406                           
   407                           ; 2 bytes @ 0x20
   408   000120                     	ds	2
   409   000122                     colorDetect@ambientG:
   410                           	callstack 0
   411                           
   412                           ; 2 bytes @ 0x22
   413   000122                     	ds	2
   414   000124                     colorDetect@ambientB:
   415                           	callstack 0
   416                           
   417                           ; 2 bytes @ 0x24
   418   000124                     	ds	2
   419   000126                     colorDetect@RGBVal:
   420                           	callstack 0
   421                           
   422                           ; 8 bytes @ 0x26
   423   000126                     	ds	8
   424   00012E                     colorDetect@redPrint:
   425                           	callstack 0
   426                           
   427                           ; 4 bytes @ 0x2E
   428   00012E                     	ds	4
   429   000132                     colorDetect@greenPrint:
   430                           	callstack 0
   431                           
   432                           ; 4 bytes @ 0x32
   433   000132                     	ds	4
   434   000136                     colorDetect@bluePrint:
   435                           	callstack 0
   436                           
   437                           ; 4 bytes @ 0x36
   438   000136                     	ds	4
   439   00013A                     main@whiteC:
   440                           	callstack 0
   441                           
   442                           ; 4 bytes @ 0x3A
   443   00013A                     	ds	4
   444   00013E                     main@clearRef:
   445                           	callstack 0
   446                           
   447                           ; 4 bytes @ 0x3E
   448   00013E                     	ds	4
   449   000142                     main@RGBVal:
   450                           	callstack 0
   451                           
   452                           ; 8 bytes @ 0x42
   453   000142                     	ds	8
   454   00014A                     main@carGo:
   455                           	callstack 0
   456                           
   457                           ; 1 bytes @ 0x4A
   458   00014A                     	ds	1
   459   00014B                     main@ambientRGBVal:
   460                           	callstack 0
   461                           
   462                           ; 8 bytes @ 0x4B
   463   00014B                     	ds	8
   464   000153                     main@whiteRGBVal:
   465                           	callstack 0
   466                           
   467                           ; 8 bytes @ 0x53
   468   000153                     	ds	8
   469   00015B                     main@motorRight:
   470                           	callstack 0
   471                           
   472                           ; 9 bytes @ 0x5B
   473   00015B                     	ds	9
   474   000164                     main@motorLeft:
   475                           	callstack 0
   476                           
   477                           ; 9 bytes @ 0x64
   478   000164                     	ds	9
   479                           
   480                           	psect	cstackBANK0
   481   000060                     __pcstackBANK0:
   482                           	callstack 0
   483   000060                     ??_floorf:
   484                           
   485                           ; 1 bytes @ 0x0
   486   000060                     	ds	6
   487   000066                     floorf@m:
   488                           	callstack 0
   489                           
   490                           ; 4 bytes @ 0x6
   491   000066                     	ds	4
   492   00006A                     floorf@e:
   493                           	callstack 0
   494                           
   495                           ; 2 bytes @ 0xA
   496   00006A                     	ds	2
   497   00006C                     floorf@u:
   498                           	callstack 0
   499                           
   500                           ; 4 bytes @ 0xC
   501   00006C                     	ds	4
   502   000070                     efgtoa@fp:
   503                           	callstack 0
   504                           
   505                           ; 2 bytes @ 0x10
   506   000070                     	ds	2
   507   000072                     efgtoa@f:
   508                           	callstack 0
   509                           
   510                           ; 4 bytes @ 0x12
   511   000072                     	ds	4
   512   000076                     efgtoa@c:
   513                           	callstack 0
   514                           
   515                           ; 1 bytes @ 0x16
   516   000076                     	ds	1
   517   000077                     efgtoa@ne:
   518                           	callstack 0
   519                           
   520                           ; 2 bytes @ 0x17
   521   000077                     	ds	2
   522   000079                     efgtoa@p:
   523                           	callstack 0
   524                           
   525                           ; 2 bytes @ 0x19
   526   000079                     	ds	2
   527   00007B                     efgtoa@t:
   528                           	callstack 0
   529                           
   530                           ; 2 bytes @ 0x1B
   531   00007B                     	ds	2
   532   00007D                     _efgtoa$2743:
   533                           	callstack 0
   534                           
   535                           ; 2 bytes @ 0x1D
   536   00007D                     	ds	2
   537   00007F                     efgtoa@pp:
   538                           	callstack 0
   539                           
   540                           ; 1 bytes @ 0x1F
   541   00007F                     	ds	1
   542   000080                     efgtoa@mode:
   543                           	callstack 0
   544                           
   545                           ; 1 bytes @ 0x20
   546   000080                     	ds	1
   547   000081                     efgtoa@nmode:
   548                           	callstack 0
   549                           
   550                           ; 1 bytes @ 0x21
   551   000081                     	ds	1
   552   000082                     efgtoa@d:
   553                           	callstack 0
   554                           
   555                           ; 2 bytes @ 0x22
   556   000082                     	ds	2
   557   000084                     efgtoa@m:
   558                           	callstack 0
   559                           
   560                           ; 2 bytes @ 0x24
   561   000084                     	ds	2
   562   000086                     efgtoa@e:
   563                           	callstack 0
   564                           
   565                           ; 2 bytes @ 0x26
   566   000086                     	ds	2
   567   000088                     efgtoa@w:
   568                           	callstack 0
   569                           
   570                           ; 2 bytes @ 0x28
   571   000088                     	ds	2
   572   00008A                     efgtoa@ou:
   573                           	callstack 0
   574                           
   575                           ; 4 bytes @ 0x2A
   576   00008A                     	ds	4
   577   00008E                     efgtoa@i:
   578                           	callstack 0
   579                           
   580                           ; 2 bytes @ 0x2E
   581   00008E                     	ds	2
   582   000090                     efgtoa@h:
   583                           	callstack 0
   584                           
   585                           ; 4 bytes @ 0x30
   586   000090                     	ds	4
   587   000094                     efgtoa@l:
   588                           	callstack 0
   589                           
   590                           ; 4 bytes @ 0x34
   591   000094                     	ds	4
   592   000098                     efgtoa@sign:
   593                           	callstack 0
   594                           
   595                           ; 1 bytes @ 0x38
   596   000098                     	ds	1
   597   000099                     efgtoa@g:
   598                           	callstack 0
   599                           
   600                           ; 4 bytes @ 0x39
   601   000099                     	ds	4
   602   00009D                     efgtoa@n:
   603                           	callstack 0
   604                           
   605                           ; 2 bytes @ 0x3D
   606   00009D                     	ds	2
   607   00009F                     efgtoa@u:
   608                           	callstack 0
   609                           
   610                           ; 4 bytes @ 0x3F
   611   00009F                     	ds	4
   612   0000A3                     vfpfcnvrt@fp:
   613                           	callstack 0
   614                           
   615                           ; 2 bytes @ 0x43
   616   0000A3                     	ds	2
   617   0000A5                     vfpfcnvrt@fmt:
   618                           	callstack 0
   619                           
   620                           ; 2 bytes @ 0x45
   621   0000A5                     	ds	2
   622   0000A7                     vfpfcnvrt@ap:
   623                           	callstack 0
   624                           
   625                           ; 2 bytes @ 0x47
   626   0000A7                     	ds	2
   627   0000A9                     vfpfcnvrt@convarg:
   628                           	callstack 0
   629                           
   630                           ; 8 bytes @ 0x49
   631   0000A9                     	ds	8
   632   0000B1                     vfpfcnvrt@c:
   633                           	callstack 0
   634                           
   635                           ; 1 bytes @ 0x51
   636   0000B1                     	ds	1
   637   0000B2                     vfpfcnvrt@cp:
   638                           	callstack 0
   639                           
   640                           ; 2 bytes @ 0x52
   641   0000B2                     	ds	2
   642   0000B4                     ?_vfprintf:
   643                           	callstack 0
   644   0000B4                     vfprintf@fp:
   645                           	callstack 0
   646                           
   647                           ; 2 bytes @ 0x54
   648   0000B4                     	ds	2
   649   0000B6                     vfprintf@fmt:
   650                           	callstack 0
   651                           
   652                           ; 2 bytes @ 0x56
   653   0000B6                     	ds	2
   654   0000B8                     vfprintf@ap:
   655                           	callstack 0
   656                           
   657                           ; 2 bytes @ 0x58
   658   0000B8                     	ds	2
   659   0000BA                     vfprintf@cfmt:
   660                           	callstack 0
   661                           
   662                           ; 2 bytes @ 0x5A
   663   0000BA                     	ds	2
   664   0000BC                     ?_sprintf:
   665                           	callstack 0
   666   0000BC                     sprintf@s:
   667                           	callstack 0
   668                           
   669                           ; 2 bytes @ 0x5C
   670   0000BC                     	ds	2
   671   0000BE                     sprintf@fmt:
   672                           	callstack 0
   673                           
   674                           ; 2 bytes @ 0x5E
   675   0000BE                     	ds	14
   676   0000CC                     sprintf@ap:
   677                           	callstack 0
   678                           
   679                           ; 2 bytes @ 0x6C
   680   0000CC                     	ds	2
   681   0000CE                     sprintf@f:
   682                           	callstack 0
   683                           
   684                           ; 11 bytes @ 0x6E
   685   0000CE                     	ds	11
   686   0000D9                     colorDetect@clearRef:
   687                           	callstack 0
   688                           
   689                           ; 4 bytes @ 0x79
   690   0000D9                     	ds	4
   691   0000DD                     colorDetect@ambientRGBVal:
   692                           	callstack 0
   693                           
   694                           ; 2 bytes @ 0x7D
   695   0000DD                     	ds	2
   696   0000DF                     colorDetect@whiteRGBVal:
   697                           	callstack 0
   698                           
   699                           ; 2 bytes @ 0x7F
   700   0000DF                     	ds	2
   701   0000E1                     colorDetect@mL:
   702                           	callstack 0
   703                           
   704                           ; 2 bytes @ 0x81
   705   0000E1                     	ds	2
   706   0000E3                     colorDetect@mR:
   707                           	callstack 0
   708                           
   709                           ; 2 bytes @ 0x83
   710   0000E3                     	ds	2
   711   0000E5                     ??_colorDetect:
   712                           
   713                           ; 1 bytes @ 0x85
   714   0000E5                     	ds	2
   715   0000E7                     ??_main:
   716                           
   717                           ; 1 bytes @ 0x87
   718   0000E7                     	ds	3
   719                           
   720                           	psect	cstackCOMRAM
   721   000001                     __pcstackCOMRAM:
   722                           	callstack 0
   723   000001                     ??_getCharFromTxBuf:
   724   000001                     putCharToRxBuf@byte:
   725                           	callstack 0
   726   000001                     
   727                           ; 1 bytes @ 0x0
   728   000001                     	ds	2
   729   000003                     ??_HighISR:
   730                           
   731                           ; 1 bytes @ 0x2
   732   000003                     	ds	2
   733   000005                     ??_I2C_2_Master_Idle:
   734   000005                     ?___fpclassifyf:
   735                           	callstack 0
   736   000005                     ?___wmul:
   737                           	callstack 0
   738   000005                     ?___fladd:
   739                           	callstack 0
   740   000005                     ?_labs:
   741                           	callstack 0
   742   000005                     ?___flneg:
   743                           	callstack 0
   744   000005                     ?___fltol:
   745                           	callstack 0
   746   000005                     ?___xxtofl:
   747                           	callstack 0
   748   000005                     ?___aodiv:
   749                           	callstack 0
   750   000005                     ?___aomod:
   751                           	callstack 0
   752   000005                     putCharToTxBuf@byte:
   753                           	callstack 0
   754   000005                     initDCmotorsPWM@PWMperiod:
   755                           	callstack 0
   756   000005                     DCmotorsInit@mL:
   757                           	callstack 0
   758   000005                     ___wmul@multiplier:
   759                           	callstack 0
   760   000005                     memcpy@d1:
   761                           	callstack 0
   762   000005                     fputc@c:
   763                           	callstack 0
   764   000005                     strcpy@dest:
   765                           	callstack 0
   766   000005                     ___fleq@ff1:
   767                           	callstack 0
   768   000005                     ___flneg@f1:
   769                           	callstack 0
   770   000005                     ___fltol@f1:
   771                           	callstack 0
   772   000005                     ___fladd@b:
   773                           	callstack 0
   774   000005                     ___xxtofl@val:
   775                           	callstack 0
   776   000005                     ___fpclassifyf@x:
   777                           	callstack 0
   778   000005                     labs@a:
   779                           	callstack 0
   780   000005                     ___aodiv@dividend:
   781                           	callstack 0
   782   000005                     ___aomod@dividend:
   783                           	callstack 0
   784                           
   785                           ; 8 bytes @ 0x4
   786   000005                     	ds	1
   787   000006                     ??_I2C_2_Master_Read:
   788   000006                     I2C_2_Master_Write@data_byte:
   789                           	callstack 0
   790   000006                     TxBufferedString@string:
   791                           	callstack 0
   792                           
   793                           ; 2 bytes @ 0x5
   794   000006                     	ds	1
   795   000007                     color_writetoaddr@value:
   796                           	callstack 0
   797   000007                     I2C_2_Master_Read@ack:
   798                           	callstack 0
   799   000007                     DCmotorsInit@mR:
   800                           	callstack 0
   801   000007                     ___wmul@multiplicand:
   802                           	callstack 0
   803   000007                     memcpy@s1:
   804                           	callstack 0
   805   000007                     fputc@fp:
   806                           	callstack 0
   807   000007                     strcpy@src:
   808                           	callstack 0
   809                           
   810                           ; 2 bytes @ 0x6
   811   000007                     	ds	1
   812   000008                     color_writetoaddr@address:
   813                           	callstack 0
   814   000008                     I2C_2_Master_Read@tmp:
   815                           	callstack 0
   816                           
   817                           ; 1 bytes @ 0x7
   818   000008                     	ds	1
   819   000009                     ??_fputc:
   820   000009                     ??___fpclassifyf:
   821   000009                     ??_labs:
   822   000009                     ??_color_click_init:
   823   000009                     ??___fltol:
   824   000009                     ??___xxtofl:
   825   000009                     ?_color_read_Red:
   826                           	callstack 0
   827   000009                     ?_color_read_Green:
   828                           	callstack 0
   829   000009                     ?_color_read_Blue:
   830                           	callstack 0
   831   000009                     ?_color_read_Clear:
   832                           	callstack 0
   833   000009                     ___wmul@product:
   834                           	callstack 0
   835   000009                     memcpy@n:
   836                           	callstack 0
   837   000009                     strcpy@s:
   838                           	callstack 0
   839   000009                     ___fleq@ff2:
   840                           	callstack 0
   841   000009                     ___fladd@a:
   842                           	callstack 0
   843                           
   844                           ; 4 bytes @ 0x8
   845   000009                     	ds	2
   846   00000B                     ??_color_read_Red:
   847   00000B                     ??_color_read_Green:
   848   00000B                     ??_color_read_Blue:
   849   00000B                     ??_color_read_Clear:
   850   00000B                     ?___lwdiv:
   851                           	callstack 0
   852   00000B                     ___lwdiv@dividend:
   853                           	callstack 0
   854   00000B                     memcpy@d:
   855                           	callstack 0
   856   00000B                     strcpy@d:
   857                           	callstack 0
   858                           
   859                           ; 2 bytes @ 0xA
   860   00000B                     	ds	2
   861   00000D                     ??___fladd:
   862   00000D                     ??___fleq:
   863   00000D                     ___fltol@sign1:
   864                           	callstack 0
   865   00000D                     ___xxtofl@sign:
   866                           	callstack 0
   867   00000D                     ___lwdiv@divisor:
   868                           	callstack 0
   869   00000D                     ___fpclassifyf@e:
   870                           	callstack 0
   871   00000D                     memcpy@s:
   872                           	callstack 0
   873   00000D                     ___aodiv@divisor:
   874                           	callstack 0
   875   00000D                     ___aomod@divisor:
   876                           	callstack 0
   877                           
   878                           ; 8 bytes @ 0xC
   879   00000D                     	ds	1
   880   00000E                     ___fltol@exp1:
   881                           	callstack 0
   882   00000E                     ___xxtofl@exp:
   883                           	callstack 0
   884   00000E                     color_read_Red@tmp:
   885                           	callstack 0
   886   00000E                     color_read_Green@tmp:
   887                           	callstack 0
   888   00000E                     color_read_Blue@tmp:
   889                           	callstack 0
   890   00000E                     color_read_Clear@tmp:
   891                           	callstack 0
   892   00000E                     fputs@s:
   893                           	callstack 0
   894                           
   895                           ; 2 bytes @ 0xD
   896   00000E                     	ds	1
   897   00000F                     memcpy@tmp:
   898                           	callstack 0
   899   00000F                     ___lwdiv@quotient:
   900                           	callstack 0
   901   00000F                     ___xxtofl@arg:
   902                           	callstack 0
   903   00000F                     ___fpclassifyf@u:
   904                           	callstack 0
   905                           
   906                           ; 4 bytes @ 0xE
   907   00000F                     	ds	1
   908   000010                     getColor@v:
   909                           	callstack 0
   910   000010                     fputs@fp:
   911                           	callstack 0
   912                           
   913                           ; 2 bytes @ 0xF
   914   000010                     	ds	1
   915   000011                     ___lwdiv@counter:
   916                           	callstack 0
   917   000011                     ___fladd@signs:
   918                           	callstack 0
   919                           
   920                           ; 1 bytes @ 0x10
   921   000011                     	ds	1
   922   000012                     ___fladd@aexp:
   923                           	callstack 0
   924   000012                     fputs@c:
   925                           	callstack 0
   926   000012                     ambientCal@v:
   927                           	callstack 0
   928   000012                     whiteCal@v:
   929                           	callstack 0
   930   000012                     setMotorPWM@m:
   931                           	callstack 0
   932                           
   933                           ; 2 bytes @ 0x11
   934   000012                     	ds	1
   935   000013                     ___fladd@bexp:
   936                           	callstack 0
   937   000013                     fputs@i:
   938                           	callstack 0
   939                           
   940                           ; 2 bytes @ 0x12
   941   000013                     	ds	1
   942   000014                     ??_ambientCal:
   943   000014                     ??_whiteCal:
   944   000014                     ??_setMotorPWM:
   945   000014                     ___fladd@grs:
   946                           	callstack 0
   947                           
   948                           ; 1 bytes @ 0x13
   949   000014                     	ds	1
   950   000015                     ?___flsub:
   951                           	callstack 0
   952   000015                     ___aodiv@counter:
   953                           	callstack 0
   954   000015                     ___aomod@counter:
   955                           	callstack 0
   956   000015                     pad@fp:
   957                           	callstack 0
   958   000015                     ___flsub@b:
   959                           	callstack 0
   960                           
   961                           ; 4 bytes @ 0x14
   962   000015                     	ds	1
   963   000016                     setMotorPWM@posDuty:
   964                           	callstack 0
   965   000016                     ___aodiv@sign:
   966                           	callstack 0
   967   000016                     ___aomod@sign:
   968                           	callstack 0
   969   000016                     ambientCal@i:
   970                           	callstack 0
   971   000016                     whiteCal@i:
   972                           	callstack 0
   973                           
   974                           ; 2 bytes @ 0x15
   975   000016                     	ds	1
   976   000017                     ?_abs:
   977                           	callstack 0
   978   000017                     setMotorPWM@negDuty:
   979                           	callstack 0
   980   000017                     pad@buf:
   981                           	callstack 0
   982   000017                     abs@a:
   983                           	callstack 0
   984   000017                     ___aodiv@quotient:
   985                           	callstack 0
   986                           
   987                           ; 8 bytes @ 0x16
   988   000017                     	ds	1
   989   000018                     stop@mL:
   990                           	callstack 0
   991   000018                     forward@mL:
   992                           	callstack 0
   993   000018                     reverse@mL:
   994                           	callstack 0
   995                           
   996                           ; 2 bytes @ 0x17
   997   000018                     	ds	1
   998   000019                     ??_abs:
   999   000019                     pad@p:
  1000                           	callstack 0
  1001   000019                     ___flsub@a:
  1002                           	callstack 0
  1003                           
  1004                           ; 4 bytes @ 0x18
  1005   000019                     	ds	1
  1006   00001A                     stop@mR:
  1007                           	callstack 0
  1008   00001A                     forward@mR:
  1009                           	callstack 0
  1010   00001A                     reverse@mR:
  1011                           	callstack 0
  1012                           
  1013                           ; 2 bytes @ 0x19
  1014   00001A                     	ds	1
  1015   00001B                     ??_pad:
  1016                           
  1017                           ; 1 bytes @ 0x1A
  1018   00001B                     	ds	1
  1019   00001C                     ??_stop:
  1020   00001C                     pad@i:
  1021                           	callstack 0
  1022                           
  1023                           ; 2 bytes @ 0x1B
  1024   00001C                     	ds	1
  1025   00001D                     ?___flmul:
  1026                           	callstack 0
  1027   00001D                     ___flmul@b:
  1028                           	callstack 0
  1029                           
  1030                           ; 4 bytes @ 0x1C
  1031   00001D                     	ds	1
  1032   00001E                     turnLeft_90@mL:
  1033                           	callstack 0
  1034   00001E                     turnRight_90@mL:
  1035                           	callstack 0
  1036   00001E                     turn_180@mL:
  1037                           	callstack 0
  1038   00001E                     turnRight_135@mL:
  1039                           	callstack 0
  1040   00001E                     turnLeft_135@mL:
  1041                           	callstack 0
  1042   00001E                     pad@w:
  1043                           	callstack 0
  1044                           
  1045                           ; 2 bytes @ 0x1D
  1046   00001E                     	ds	2
  1047   000020                     turnLeft_90@mR:
  1048                           	callstack 0
  1049   000020                     turnRight_90@mR:
  1050                           	callstack 0
  1051   000020                     turn_180@mR:
  1052                           	callstack 0
  1053   000020                     turnRight_135@mR:
  1054                           	callstack 0
  1055   000020                     turnLeft_135@mR:
  1056                           	callstack 0
  1057   000020                     dtoa@fp:
  1058                           	callstack 0
  1059                           
  1060                           ; 2 bytes @ 0x1F
  1061   000020                     	ds	1
  1062   000021                     ___flmul@a:
  1063                           	callstack 0
  1064                           
  1065                           ; 4 bytes @ 0x20
  1066   000021                     	ds	1
  1067   000022                     ??_turnRight_90:
  1068   000022                     ??_turnRight_135:
  1069   000022                     ??_turn_180:
  1070   000022                     ??_turnLeft_90:
  1071   000022                     ??_turnLeft_135:
  1072   000022                     dtoa@d:
  1073                           	callstack 0
  1074                           
  1075                           ; 8 bytes @ 0x21
  1076   000022                     	ds	2
  1077   000024                     reverseSquareRight@mL:
  1078                           	callstack 0
  1079   000024                     reverseSquareLeft@mL:
  1080                           	callstack 0
  1081                           
  1082                           ; 2 bytes @ 0x23
  1083   000024                     	ds	1
  1084   000025                     ??___flmul:
  1085                           
  1086                           ; 1 bytes @ 0x24
  1087   000025                     	ds	1
  1088   000026                     reverseSquareRight@mR:
  1089                           	callstack 0
  1090   000026                     reverseSquareLeft@mR:
  1091                           	callstack 0
  1092                           
  1093                           ; 2 bytes @ 0x25
  1094   000026                     	ds	2
  1095   000028                     ??_reverseSquareRight:
  1096   000028                     ??_reverseSquareLeft:
  1097                           
  1098                           ; 1 bytes @ 0x27
  1099   000028                     	ds	1
  1100   000029                     ___flmul@sign:
  1101                           	callstack 0
  1102                           
  1103                           ; 1 bytes @ 0x28
  1104   000029                     	ds	1
  1105   00002A                     ??_dtoa:
  1106   00002A                     ___flmul@grs:
  1107                           	callstack 0
  1108                           
  1109                           ; 4 bytes @ 0x29
  1110   00002A                     	ds	4
  1111   00002E                     ___flmul@aexp:
  1112                           	callstack 0
  1113                           
  1114                           ; 1 bytes @ 0x2D
  1115   00002E                     	ds	1
  1116   00002F                     ___flmul@bexp:
  1117                           	callstack 0
  1118                           
  1119                           ; 1 bytes @ 0x2E
  1120   00002F                     	ds	1
  1121   000030                     ___flmul@prod:
  1122                           	callstack 0
  1123                           
  1124                           ; 4 bytes @ 0x2F
  1125   000030                     	ds	2
  1126   000032                     _dtoa$2712:
  1127                           	callstack 0
  1128                           
  1129                           ; 2 bytes @ 0x31
  1130   000032                     	ds	2
  1131   000034                     ___flmul@temp:
  1132                           	callstack 0
  1133   000034                     dtoa@p:
  1134                           	callstack 0
  1135                           
  1136                           ; 2 bytes @ 0x33
  1137   000034                     	ds	2
  1138   000036                     ?___fldiv:
  1139                           	callstack 0
  1140   000036                     dtoa@w:
  1141                           	callstack 0
  1142   000036                     ___flge@ff1:
  1143                           	callstack 0
  1144   000036                     ___fldiv@b:
  1145                           	callstack 0
  1146                           
  1147                           ; 4 bytes @ 0x35
  1148   000036                     	ds	2
  1149   000038                     dtoa@n:
  1150                           	callstack 0
  1151                           
  1152                           ; 8 bytes @ 0x37
  1153   000038                     	ds	2
  1154   00003A                     ___flge@ff2:
  1155                           	callstack 0
  1156   00003A                     ___fldiv@a:
  1157                           	callstack 0
  1158                           
  1159                           ; 4 bytes @ 0x39
  1160   00003A                     	ds	4
  1161   00003E                     ??___fldiv:
  1162   00003E                     ??___flge:
  1163                           
  1164                           ; 1 bytes @ 0x3D
  1165   00003E                     	ds	2
  1166   000040                     dtoa@i:
  1167                           	callstack 0
  1168                           
  1169                           ; 2 bytes @ 0x3F
  1170   000040                     	ds	2
  1171   000042                     dtoa@s:
  1172                           	callstack 0
  1173   000042                     ___fldiv@rem:
  1174                           	callstack 0
  1175                           
  1176                           ; 4 bytes @ 0x41
  1177   000042                     	ds	4
  1178   000046                     ___fldiv@sign:
  1179                           	callstack 0
  1180                           
  1181                           ; 1 bytes @ 0x45
  1182   000046                     	ds	1
  1183   000047                     ___fldiv@new_exp:
  1184                           	callstack 0
  1185                           
  1186                           ; 2 bytes @ 0x46
  1187   000047                     	ds	2
  1188   000049                     ___fldiv@grs:
  1189                           	callstack 0
  1190                           
  1191                           ; 4 bytes @ 0x48
  1192   000049                     	ds	4
  1193   00004D                     ___fldiv@bexp:
  1194                           	callstack 0
  1195                           
  1196                           ; 1 bytes @ 0x4C
  1197   00004D                     	ds	1
  1198   00004E                     ___fldiv@aexp:
  1199                           	callstack 0
  1200                           
  1201                           ; 1 bytes @ 0x4D
  1202   00004E                     	ds	1
  1203   00004F                     ?_floorf:
  1204                           	callstack 0
  1205   00004F                     floorf@x:
  1206                           	callstack 0
  1207                           
  1208                           ; 4 bytes @ 0x4E
  1209   00004F                     	ds	4
  1210   000053                     ??_efgtoa:
  1211                           
  1212                           ; 1 bytes @ 0x52
  1213   000053                     	ds	2
  1214   000055                     ??_vfpfcnvrt:
  1215                           
  1216                           ; 1 bytes @ 0x54
  1217   000055                     	ds	2
  1218   000057                     
  1219                           ; 1 bytes @ 0x56
  1220 ;;
  1221 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1222 ;;
  1223 ;; *************** function _main *****************
  1224 ;; Defined at:
  1225 ;;		line 25 in file "MazeRobot.X/main.c"
  1226 ;; Parameters:    Size  Location     Type
  1227 ;;		None
  1228 ;; Auto vars:     Size  Location     Type
  1229 ;;  string5        20    0        unsigned char [20]
  1230 ;;  string4        20    0        unsigned char [20]
  1231 ;;  string3        20    0        unsigned char [20]
  1232 ;;  string2        20    0        unsigned char [20]
  1233 ;;  string1        20    0        unsigned char [20]
  1234 ;;  testString     20    0        unsigned char [20]
  1235 ;;  motorLeft       9  100[BANK1 ] struct DC_motor
  1236 ;;  motorRight      9   91[BANK1 ] struct DC_motor
  1237 ;;  whiteRGBVal     8   83[BANK1 ] struct RGB
  1238 ;;  ambientRGBVa    8   75[BANK1 ] struct RGB
  1239 ;;  RGBVal          8   66[BANK1 ] struct RGB
  1240 ;;  clearRef        4   62[BANK1 ] struct RGB
  1241 ;;  whiteC          4   58[BANK1 ] struct RGB
  1242 ;;  carGo           1   74[BANK1 ] unsigned char 
  1243 ;; Return value:  Size  Location     Type
  1244 ;;                  1    wreg      void 
  1245 ;; Registers used:
  1246 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1247 ;; Tracked objects:
  1248 ;;		On entry : 0/0
  1249 ;;		On exit  : 0/0
  1250 ;;		Unchanged: 0/0
  1251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1253 ;;      Locals:         0       0      51       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1254 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1255 ;;      Totals:         0       3      51       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1256 ;;Total ram usage:       54 bytes
  1257 ;; Hardware stack levels required when called: 11
  1258 ;; This function calls:
  1259 ;;		_DCmotorsInit
  1260 ;;		___fldiv
  1261 ;;		___flge
  1262 ;;		___xxtofl
  1263 ;;		_ambientCal
  1264 ;;		_colorDetect
  1265 ;;		_color_click_init
  1266 ;;		_forward
  1267 ;;		_getColor
  1268 ;;		_initDCmotorsPWM
  1269 ;;		_initUSART4
  1270 ;;		_stop
  1271 ;;		_whiteCal
  1272 ;; This function is called by:
  1273 ;;		Startup code after reset
  1274 ;; This function uses a non-reentrant model
  1275 ;;
  1276                           
  1277                           	psect	text0
  1278   0030D4                     __ptext0:
  1279                           	callstack 0
  1280   0030D4                     _main:
  1281                           	callstack 20
  1282   0030D4                     
  1283                           ;MazeRobot.X/main.c: 27:     color_click_init();
  1284   0030D4  EC56  F02C         	call	_color_click_init	;wreg free
  1285   0030D8                     
  1286                           ;MazeRobot.X/main.c: 28:     initUSART4();
  1287   0030D8  EC88  F02C         	call	_initUSART4	;wreg free
  1288   0030DC                     
  1289                           ;MazeRobot.X/main.c: 29:     initDCmotorsPWM(199);
  1290   0030DC  0E00               	movlw	0
  1291   0030DE  6E06               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
  1292   0030E0  0EC7               	movlw	199
  1293   0030E2  6E05               	movwf	initDCmotorsPWM@PWMperiod^0,c
  1294   0030E4  ECA8  F028         	call	_initDCmotorsPWM	;wreg free
  1295   0030E8                     
  1296                           ;MazeRobot.X/main.c: 36:     LATDbits.LATD7=0;
  1297   0030E8  9E7C               	bcf	124,7,c	;volatile
  1298   0030EA                     
  1299                           ;MazeRobot.X/main.c: 37:     TRISDbits.TRISD7=0;
  1300   0030EA  9E84               	bcf	132,7,c	;volatile
  1301   0030EC                     
  1302                           ;MazeRobot.X/main.c: 39:     LATHbits.LATH3=0;
  1303   0030EC  9680               	bcf	128,3,c	;volatile
  1304   0030EE                     
  1305                           ;MazeRobot.X/main.c: 40:     TRISHbits.TRISH3=0;
  1306   0030EE  9688               	bcf	136,3,c	;volatile
  1307   0030F0                     
  1308                           ;MazeRobot.X/main.c: 42:     LATDbits.LATD4 = 0;
  1309   0030F0  987C               	bcf	124,4,c	;volatile
  1310   0030F2                     
  1311                           ;MazeRobot.X/main.c: 43:     TRISDbits.TRISD4 = 0;
  1312   0030F2  9884               	bcf	132,4,c	;volatile
  1313   0030F4                     
  1314                           ;MazeRobot.X/main.c: 45:     LATHbits.LATH0 = 0;
  1315   0030F4  9080               	bcf	128,0,c	;volatile
  1316   0030F6                     
  1317                           ;MazeRobot.X/main.c: 46:     TRISHbits.TRISH0 = 0;
  1318   0030F6  9088               	bcf	136,0,c	;volatile
  1319   0030F8                     
  1320                           ;MazeRobot.X/main.c: 48:     LATFbits.LATF0 = 0;
  1321   0030F8  907E               	bcf	126,0,c	;volatile
  1322   0030FA                     
  1323                           ;MazeRobot.X/main.c: 49:     TRISFbits.TRISF0 = 0;
  1324   0030FA  9086               	bcf	134,0,c	;volatile
  1325   0030FC                     
  1326                           ;MazeRobot.X/main.c: 51:     LATHbits.LATH1 = 0;
  1327   0030FC  9280               	bcf	128,1,c	;volatile
  1328   0030FE                     
  1329                           ;MazeRobot.X/main.c: 52:     TRISHbits.TRISH1 = 0;
  1330   0030FE  9288               	bcf	136,1,c	;volatile
  1331   003100                     
  1332                           ;MazeRobot.X/main.c: 54:     LATDbits.LATD3 = 0;
  1333   003100  967C               	bcf	124,3,c	;volatile
  1334   003102                     
  1335                           ;MazeRobot.X/main.c: 55:     TRISDbits.TRISD3 = 0;
  1336   003102  9684               	bcf	132,3,c	;volatile
  1337   003104                     
  1338                           ;MazeRobot.X/main.c: 58:     LATDbits.LATD4 = 1;
  1339   003104  887C               	bsf	124,4,c	;volatile
  1340   003106                     
  1341                           ;MazeRobot.X/main.c: 59:     LATFbits.LATF0 = 1;
  1342   003106  807E               	bsf	126,0,c	;volatile
  1343   003108                     
  1344                           ;MazeRobot.X/main.c: 60:     LATHbits.LATH0 = 1;
  1345   003108  8080               	bsf	128,0,c	;volatile
  1346   00310A                     
  1347                           ;MazeRobot.X/main.c: 61:     LATFbits.LATF0 = 1;
  1348   00310A  807E               	bsf	126,0,c	;volatile
  1349   00310C                     
  1350                           ;MazeRobot.X/main.c: 62:     LATDbits.LATD3 = 1;
  1351   00310C  867C               	bsf	124,3,c	;volatile
  1352   00310E                     
  1353                           ;MazeRobot.X/main.c: 67:     LATGbits.LATG0=1;
  1354   00310E  807F               	bsf	127,0,c	;volatile
  1355   003110                     
  1356                           ;MazeRobot.X/main.c: 68:     LATEbits.LATE7=1;
  1357   003110  8E7D               	bsf	125,7,c	;volatile
  1358   003112                     
  1359                           ;MazeRobot.X/main.c: 69:     LATAbits.LATA3=1;
  1360   003112  8679               	bsf	121,3,c	;volatile
  1361   003114                     
  1362                           ;MazeRobot.X/main.c: 71:     TRISGbits.TRISG0=0;
  1363   003114  9087               	bcf	135,0,c	;volatile
  1364   003116                     
  1365                           ;MazeRobot.X/main.c: 72:     TRISEbits.TRISE7=0;
  1366   003116  9E85               	bcf	133,7,c	;volatile
  1367   003118                     
  1368                           ;MazeRobot.X/main.c: 73:     TRISAbits.TRISA3=0;
  1369   003118  9681               	bcf	129,3,c	;volatile
  1370   00311A                     
  1371                           ;MazeRobot.X/main.c: 76:     TRISFbits.TRISF2=1;
  1372   00311A  8486               	bsf	134,2,c	;volatile
  1373   00311C                     
  1374                           ;MazeRobot.X/main.c: 77:     ANSELFbits.ANSELF2=0;
  1375   00311C  010E               	movlb	14	; () banked
  1376   00311E  95B4               	bcf	180,2,b	;volatile
  1377   003120                     
  1378                           ; BSR set to: 14
  1379                           ;MazeRobot.X/main.c: 79:     TRISFbits.TRISF3=1;
  1380   003120  8686               	bsf	134,3,c	;volatile
  1381   003122                     
  1382                           ; BSR set to: 14
  1383                           ;MazeRobot.X/main.c: 80:     ANSELFbits.ANSELF3=0;
  1384   003122  97B4               	bcf	180,3,b	;volatile
  1385   003124                     
  1386                           ; BSR set to: 14
  1387                           ;MazeRobot.X/main.c: 95:     unsigned char carGo = 0;
  1388   003124  0E00               	movlw	0
  1389   003126  0101               	movlb	1	; () banked
  1390   003128  6F4A               	movwf	main@carGo& (0+255),b
  1391   00312A                     
  1392                           ; BSR set to: 1
  1393                           ;MazeRobot.X/main.c: 97:     DC_motor motorLeft,motorRight;;MazeRobot.X/main.c: 98:     
      +                          DCmotorsInit(&motorLeft,&motorRight);
  1394   00312A  0E64               	movlw	low main@motorLeft
  1395   00312C  6E05               	movwf	DCmotorsInit@mL^0,c
  1396   00312E  0E01               	movlw	high main@motorLeft
  1397   003130  6E06               	movwf	(DCmotorsInit@mL+1)^0,c
  1398   003132  0E5B               	movlw	low main@motorRight
  1399   003134  6E07               	movwf	DCmotorsInit@mR^0,c
  1400   003136  0E01               	movlw	high main@motorRight
  1401   003138  6E08               	movwf	(DCmotorsInit@mR+1)^0,c
  1402   00313A  EC2E  F027         	call	_DCmotorsInit	;wreg free
  1403   00313E                     
  1404                           ;MazeRobot.X/main.c: 118:     ambientCal (&ambientRGBVal);
  1405   00313E  0E4B               	movlw	low main@ambientRGBVal
  1406   003140  6E12               	movwf	ambientCal@v^0,c
  1407   003142  0E01               	movlw	high main@ambientRGBVal
  1408   003144  6E13               	movwf	(ambientCal@v+1)^0,c
  1409   003146  ECE6  F025         	call	_ambientCal	;wreg free
  1410   00314A                     l6189:
  1411                           
  1412                           ;MazeRobot.X/main.c: 121:         getColor(&RGBVal);
  1413   00314A  0E42               	movlw	low main@RGBVal
  1414   00314C  6E10               	movwf	getColor@v^0,c
  1415   00314E  0E01               	movlw	high main@RGBVal
  1416   003150  6E11               	movwf	(getColor@v+1)^0,c
  1417   003152  EC1C  F02A         	call	_getColor	;wreg free
  1418   003156                     
  1419                           ;MazeRobot.X/main.c: 123:         if(!PORTFbits.RF2 & !PORTFbits.RF3){
  1420   003156  A68E               	btfss	142,3,c	;volatile
  1421   003158  EFB0  F018         	goto	u6991
  1422   00315C  EFB3  F018         	goto	u6990
  1423   003160                     u6991:
  1424   003160  0E01               	movlw	1
  1425   003162  EFB4  F018         	goto	u6992
  1426   003166                     u6990:
  1427   003166  0E00               	movlw	0
  1428   003168                     u6992:
  1429   003168  0100               	movlb	0	; () banked
  1430   00316A  6FE7               	movwf	??_main& (0+255),b
  1431   00316C  A48E               	btfss	142,2,c	;volatile
  1432   00316E  EFBB  F018         	goto	u7001
  1433   003172  EFBE  F018         	goto	u7000
  1434   003176                     u7001:
  1435   003176  0E01               	movlw	1
  1436   003178  EFBF  F018         	goto	u7002
  1437   00317C                     u7000:
  1438   00317C  0E00               	movlw	0
  1439   00317E                     u7002:
  1440   00317E  15E7               	andwf	??_main& (0+255),w,b
  1441   003180  A0E8               	btfss	wreg,0,c
  1442   003182  EFC5  F018         	goto	u7011
  1443   003186  EFC7  F018         	goto	u7010
  1444   00318A                     u7011:
  1445   00318A  EFE4  F018         	goto	l6203
  1446   00318E                     u7010:
  1447   00318E                     
  1448                           ; BSR set to: 0
  1449                           ;MazeRobot.X/main.c: 124:             LATDbits.LATD7 = 1 , LATHbits.LATH3 = 1;
  1450   00318E  8E7C               	bsf	124,7,c	;volatile
  1451   003190  8680               	bsf	128,3,c	;volatile
  1452   003192                     
  1453                           ; BSR set to: 0
  1454                           ;MazeRobot.X/main.c: 125:             _delay((unsigned long)((1000)*(64000000/4000.0)));
  1455   003192  0E52               	movlw	82
  1456   003194  0100               	movlb	0	; () banked
  1457   003196  6FE8               	movwf	(??_main+1)& (0+255),b
  1458   003198  0E2B               	movlw	43
  1459   00319A  6FE7               	movwf	??_main& (0+255),b
  1460   00319C  0E00               	movlw	0
  1461   00319E                     u7187:
  1462   00319E  2EE8               	decfsz	wreg,f,c
  1463   0031A0  D7FE               	bra	u7187
  1464   0031A2  2FE7               	decfsz	??_main& (0+255),f,b
  1465   0031A4  D7FC               	bra	u7187
  1466   0031A6  2FE8               	decfsz	(??_main+1)& (0+255),f,b
  1467   0031A8  D7FA               	bra	u7187
  1468   0031AA  F000               	nop	
  1469   0031AC                     
  1470                           ;MazeRobot.X/main.c: 126:             LATDbits.LATD7 = 0 , LATHbits.LATH3 = 0;
  1471   0031AC  9E7C               	bcf	124,7,c	;volatile
  1472   0031AE  9680               	bcf	128,3,c	;volatile
  1473   0031B0                     
  1474                           ;MazeRobot.X/main.c: 127:             carGo = !carGo;}
  1475   0031B0  0101               	movlb	1	; () banked
  1476   0031B2  514A               	movf	main@carGo& (0+255),w,b
  1477   0031B4  B4D8               	btfsc	status,2,c
  1478   0031B6  EFDF  F018         	goto	u7021
  1479   0031BA  EFE2  F018         	goto	u7020
  1480   0031BE                     u7021:
  1481   0031BE  0E01               	movlw	1
  1482   0031C0  EFE3  F018         	goto	u7030
  1483   0031C4                     u7020:
  1484   0031C4  0E00               	movlw	0
  1485   0031C6                     u7030:
  1486   0031C6  6F4A               	movwf	main@carGo& (0+255),b
  1487   0031C8                     l6203:
  1488                           
  1489                           ;MazeRobot.X/main.c: 130:         if (!PORTFbits.RF2 & PORTFbits.RF3){
  1490   0031C8  A48E               	btfss	142,2,c	;volatile
  1491   0031CA  EFE9  F018         	goto	u7041
  1492   0031CE  EFEC  F018         	goto	u7040
  1493   0031D2                     u7041:
  1494   0031D2  0E01               	movlw	1
  1495   0031D4  EFED  F018         	goto	u7050
  1496   0031D8                     u7040:
  1497   0031D8  0E00               	movlw	0
  1498   0031DA                     u7050:
  1499   0031DA  0100               	movlb	0	; () banked
  1500   0031DC  6FE7               	movwf	??_main& (0+255),b
  1501   0031DE  6BE8               	clrf	(??_main+1)& (0+255),b
  1502   0031E0  B68E               	btfsc	142,3,c	;volatile
  1503   0031E2  EFF5  F018         	goto	u7061
  1504   0031E6  EFF9  F018         	goto	u7060
  1505   0031EA                     u7061:
  1506   0031EA  6BE9               	clrf	(??_main+2)& (0+255),b
  1507   0031EC  2BE9               	incf	(??_main+2)& (0+255),f,b
  1508   0031EE  EFFB  F018         	goto	u7068
  1509   0031F2                     u7060:
  1510   0031F2  0100               	movlb	0	; () banked
  1511   0031F4  6BE9               	clrf	(??_main+2)& (0+255),b
  1512   0031F6                     u7068:
  1513   0031F6  51E9               	movf	(??_main+2)& (0+255),w,b
  1514   0031F8  17E7               	andwf	??_main& (0+255),f,b
  1515   0031FA  0E00               	movlw	0
  1516   0031FC  17E8               	andwf	(??_main+1)& (0+255),f,b
  1517   0031FE  51E7               	movf	??_main& (0+255),w,b
  1518   003200  11E8               	iorwf	(??_main+1)& (0+255),w,b
  1519   003202  B4D8               	btfsc	status,2,c
  1520   003204  EF06  F019         	goto	u7071
  1521   003208  EF08  F019         	goto	u7070
  1522   00320C                     u7071:
  1523   00320C  EF0E  F019         	goto	l6207
  1524   003210                     u7070:
  1525   003210                     
  1526                           ; BSR set to: 0
  1527                           ;MazeRobot.X/main.c: 131:             ambientCal (&ambientRGBVal);
  1528   003210  0E4B               	movlw	low main@ambientRGBVal
  1529   003212  6E12               	movwf	ambientCal@v^0,c
  1530   003214  0E01               	movlw	high main@ambientRGBVal
  1531   003216  6E13               	movwf	(ambientCal@v+1)^0,c
  1532   003218  ECE6  F025         	call	_ambientCal	;wreg free
  1533   00321C                     l6207:
  1534                           
  1535                           ;MazeRobot.X/main.c: 134:         if (!PORTFbits.RF3 & PORTFbits.RF2){
  1536   00321C  A68E               	btfss	142,3,c	;volatile
  1537   00321E  EF13  F019         	goto	u7081
  1538   003222  EF16  F019         	goto	u7080
  1539   003226                     u7081:
  1540   003226  0E01               	movlw	1
  1541   003228  EF17  F019         	goto	u7090
  1542   00322C                     u7080:
  1543   00322C  0E00               	movlw	0
  1544   00322E                     u7090:
  1545   00322E  0100               	movlb	0	; () banked
  1546   003230  6FE7               	movwf	??_main& (0+255),b
  1547   003232  6BE8               	clrf	(??_main+1)& (0+255),b
  1548   003234  B48E               	btfsc	142,2,c	;volatile
  1549   003236  EF1F  F019         	goto	u7101
  1550   00323A  EF23  F019         	goto	u7100
  1551   00323E                     u7101:
  1552   00323E  6BE9               	clrf	(??_main+2)& (0+255),b
  1553   003240  2BE9               	incf	(??_main+2)& (0+255),f,b
  1554   003242  EF25  F019         	goto	u7108
  1555   003246                     u7100:
  1556   003246  0100               	movlb	0	; () banked
  1557   003248  6BE9               	clrf	(??_main+2)& (0+255),b
  1558   00324A                     u7108:
  1559   00324A  51E9               	movf	(??_main+2)& (0+255),w,b
  1560   00324C  17E7               	andwf	??_main& (0+255),f,b
  1561   00324E  0E00               	movlw	0
  1562   003250  17E8               	andwf	(??_main+1)& (0+255),f,b
  1563   003252  51E7               	movf	??_main& (0+255),w,b
  1564   003254  11E8               	iorwf	(??_main+1)& (0+255),w,b
  1565   003256  B4D8               	btfsc	status,2,c
  1566   003258  EF30  F019         	goto	u7111
  1567   00325C  EF32  F019         	goto	u7110
  1568   003260                     u7111:
  1569   003260  EF38  F019         	goto	l6211
  1570   003264                     u7110:
  1571   003264                     
  1572                           ; BSR set to: 0
  1573                           ;MazeRobot.X/main.c: 135:             whiteCal (&whiteRGBVal);
  1574   003264  0E53               	movlw	low main@whiteRGBVal
  1575   003266  6E12               	movwf	whiteCal@v^0,c
  1576   003268  0E01               	movlw	high main@whiteRGBVal
  1577   00326A  6E13               	movwf	(whiteCal@v+1)^0,c
  1578   00326C  EC74  F025         	call	_whiteCal	;wreg free
  1579   003270                     l6211:
  1580                           
  1581                           ;MazeRobot.X/main.c: 138:         LATHbits.LATH3=!LATHbits.LATH3;
  1582   003270  A680               	btfss	128,3,c	;volatile
  1583   003272  EF3D  F019         	goto	u7121
  1584   003276  EF42  F019         	goto	u7120
  1585   00327A                     u7121:
  1586   00327A  0100               	movlb	0	; () banked
  1587   00327C  6BE7               	clrf	??_main& (0+255),b
  1588   00327E  2BE7               	incf	??_main& (0+255),f,b
  1589   003280  EF44  F019         	goto	u7138
  1590   003284                     u7120:
  1591   003284  0100               	movlb	0	; () banked
  1592   003286  6BE7               	clrf	??_main& (0+255),b
  1593   003288                     u7138:
  1594   003288  47E7               	rlncf	??_main& (0+255),f,b
  1595   00328A  47E7               	rlncf	??_main& (0+255),f,b
  1596   00328C  47E7               	rlncf	??_main& (0+255),f,b
  1597   00328E  5080               	movf	128,w,c	;volatile
  1598   003290  19E7               	xorwf	??_main& (0+255),w,b
  1599   003292  0BF7               	andlw	-9
  1600   003294  19E7               	xorwf	??_main& (0+255),w,b
  1601   003296  6E80               	movwf	128,c	;volatile
  1602   003298                     
  1603                           ; BSR set to: 0
  1604                           ;MazeRobot.X/main.c: 141:         whiteC = whiteRGBVal.C;
  1605   003298  C159  F005         	movff	main@whiteRGBVal+6,___xxtofl@val
  1606   00329C  C15A  F006         	movff	main@whiteRGBVal+7,___xxtofl@val+1
  1607   0032A0  6A07               	clrf	(___xxtofl@val+2)^0,c
  1608   0032A2  6A08               	clrf	(___xxtofl@val+3)^0,c
  1609   0032A4  0E00               	movlw	0
  1610   0032A6  ECD0  F01D         	call	___xxtofl
  1611   0032AA  C005  F13A         	movff	?___xxtofl,main@whiteC
  1612   0032AE  C006  F13B         	movff	?___xxtofl+1,main@whiteC+1
  1613   0032B2  C007  F13C         	movff	?___xxtofl+2,main@whiteC+2
  1614   0032B6  C008  F13D         	movff	?___xxtofl+3,main@whiteC+3
  1615   0032BA                     
  1616                           ;MazeRobot.X/main.c: 142:         clearRef = RGBVal.C/whiteC;
  1617   0032BA  C148  F005         	movff	main@RGBVal+6,___xxtofl@val
  1618   0032BE  C149  F006         	movff	main@RGBVal+7,___xxtofl@val+1
  1619   0032C2  6A07               	clrf	(___xxtofl@val+2)^0,c
  1620   0032C4  6A08               	clrf	(___xxtofl@val+3)^0,c
  1621   0032C6  0E00               	movlw	0
  1622   0032C8  ECD0  F01D         	call	___xxtofl
  1623   0032CC  C005  F036         	movff	?___xxtofl,___fldiv@b
  1624   0032D0  C006  F037         	movff	?___xxtofl+1,___fldiv@b+1
  1625   0032D4  C007  F038         	movff	?___xxtofl+2,___fldiv@b+2
  1626   0032D8  C008  F039         	movff	?___xxtofl+3,___fldiv@b+3
  1627   0032DC  C13A  F03A         	movff	main@whiteC,___fldiv@a
  1628   0032E0  C13B  F03B         	movff	main@whiteC+1,___fldiv@a+1
  1629   0032E4  C13C  F03C         	movff	main@whiteC+2,___fldiv@a+2
  1630   0032E8  C13D  F03D         	movff	main@whiteC+3,___fldiv@a+3
  1631   0032EC  EC9D  F016         	call	___fldiv	;wreg free
  1632   0032F0  C036  F13E         	movff	?___fldiv,main@clearRef
  1633   0032F4  C037  F13F         	movff	?___fldiv+1,main@clearRef+1
  1634   0032F8  C038  F140         	movff	?___fldiv+2,main@clearRef+2
  1635   0032FC  C039  F141         	movff	?___fldiv+3,main@clearRef+3
  1636   003300                     
  1637                           ;MazeRobot.X/main.c: 144:         if ((clearRef > 0.12) & carGo){
  1638   003300  0E8F               	movlw	143
  1639   003302  6E36               	movwf	___flge@ff1^0,c
  1640   003304  0EC2               	movlw	194
  1641   003306  6E37               	movwf	(___flge@ff1+1)^0,c
  1642   003308  0EF5               	movlw	245
  1643   00330A  6E38               	movwf	(___flge@ff1+2)^0,c
  1644   00330C  0E3D               	movlw	61
  1645   00330E  6E39               	movwf	(___flge@ff1+3)^0,c
  1646   003310  C13E  F03A         	movff	main@clearRef,___flge@ff2
  1647   003314  C13F  F03B         	movff	main@clearRef+1,___flge@ff2+1
  1648   003318  C140  F03C         	movff	main@clearRef+2,___flge@ff2+2
  1649   00331C  C141  F03D         	movff	main@clearRef+3,___flge@ff2+3
  1650   003320  EC73  F024         	call	___flge	;wreg free
  1651   003324  A0D8               	btfss	status,0,c
  1652   003326  EF97  F019         	goto	u7141
  1653   00332A  EF9A  F019         	goto	u7140
  1654   00332E                     u7141:
  1655   00332E  0E01               	movlw	1
  1656   003330  EF9B  F019         	goto	u7150
  1657   003334                     u7140:
  1658   003334  0E00               	movlw	0
  1659   003336                     u7150:
  1660   003336  0100               	movlb	0	; () banked
  1661   003338  6FE7               	movwf	??_main& (0+255),b
  1662   00333A  6BE8               	clrf	(??_main+1)& (0+255),b
  1663   00333C  0101               	movlb	1	; () banked
  1664   00333E  514A               	movf	main@carGo& (0+255),w,b
  1665   003340  0100               	movlb	0	; () banked
  1666   003342  17E7               	andwf	??_main& (0+255),f,b
  1667   003344  0E00               	movlw	0
  1668   003346  17E8               	andwf	(??_main+1)& (0+255),f,b
  1669   003348  51E7               	movf	??_main& (0+255),w,b
  1670   00334A  11E8               	iorwf	(??_main+1)& (0+255),w,b
  1671   00334C  B4D8               	btfsc	status,2,c
  1672   00334E  EFAB  F019         	goto	u7161
  1673   003352  EFAD  F019         	goto	u7160
  1674   003356                     u7161:
  1675   003356  EFD3  F019         	goto	l6223
  1676   00335A                     u7160:
  1677   00335A                     
  1678                           ; BSR set to: 0
  1679                           ;MazeRobot.X/main.c: 145:             colorDetect (clearRef,&ambientRGBVal,&whiteRGBVal,
      +                          &motorLeft,&motorRight);
  1680   00335A  C13E  F0D9         	movff	main@clearRef,colorDetect@clearRef
  1681   00335E  C13F  F0DA         	movff	main@clearRef+1,colorDetect@clearRef+1
  1682   003362  C140  F0DB         	movff	main@clearRef+2,colorDetect@clearRef+2
  1683   003366  C141  F0DC         	movff	main@clearRef+3,colorDetect@clearRef+3
  1684   00336A  0E4B               	movlw	low main@ambientRGBVal
  1685   00336C  6FDD               	movwf	colorDetect@ambientRGBVal& (0+255),b
  1686   00336E  0E01               	movlw	high main@ambientRGBVal
  1687   003370  6FDE               	movwf	(colorDetect@ambientRGBVal+1)& (0+255),b
  1688   003372  0E53               	movlw	low main@whiteRGBVal
  1689   003374  6FDF               	movwf	colorDetect@whiteRGBVal& (0+255),b
  1690   003376  0E01               	movlw	high main@whiteRGBVal
  1691   003378  6FE0               	movwf	(colorDetect@whiteRGBVal+1)& (0+255),b
  1692   00337A  0E64               	movlw	low main@motorLeft
  1693   00337C  6FE1               	movwf	colorDetect@mL& (0+255),b
  1694   00337E  0E01               	movlw	high main@motorLeft
  1695   003380  6FE2               	movwf	(colorDetect@mL+1)& (0+255),b
  1696   003382  0E5B               	movlw	low main@motorRight
  1697   003384  6FE3               	movwf	colorDetect@mR& (0+255),b
  1698   003386  0E01               	movlw	high main@motorRight
  1699   003388  6FE4               	movwf	(colorDetect@mR+1)& (0+255),b
  1700   00338A  EC16  F007         	call	_colorDetect	;wreg free
  1701   00338E                     
  1702                           ;MazeRobot.X/main.c: 147:             _delay((unsigned long)((500)*(64000000/4000.0)));
  1703   00338E  0E29               	movlw	41
  1704   003390  0100               	movlb	0	; () banked
  1705   003392  6FE8               	movwf	(??_main+1)& (0+255),b
  1706   003394  0E96               	movlw	150
  1707   003396  6FE7               	movwf	??_main& (0+255),b
  1708   003398  0E7F               	movlw	127
  1709   00339A                     u7197:
  1710   00339A  2EE8               	decfsz	wreg,f,c
  1711   00339C  D7FE               	bra	u7197
  1712   00339E  2FE7               	decfsz	??_main& (0+255),f,b
  1713   0033A0  D7FC               	bra	u7197
  1714   0033A2  2FE8               	decfsz	(??_main+1)& (0+255),f,b
  1715   0033A4  D7FA               	bra	u7197
  1716   0033A6                     l6223:
  1717                           
  1718                           ;MazeRobot.X/main.c: 150:         if (carGo){forward(&motorLeft,&motorRight);}
  1719   0033A6  0101               	movlb	1	; () banked
  1720   0033A8  514A               	movf	main@carGo& (0+255),w,b
  1721   0033AA  B4D8               	btfsc	status,2,c
  1722   0033AC  EFDA  F019         	goto	u7171
  1723   0033B0  EFDC  F019         	goto	u7170
  1724   0033B4                     u7171:
  1725   0033B4  EFE8  F019         	goto	l6227
  1726   0033B8                     u7170:
  1727   0033B8                     
  1728                           ; BSR set to: 1
  1729   0033B8  0E64               	movlw	low main@motorLeft
  1730   0033BA  6E18               	movwf	forward@mL^0,c
  1731   0033BC  0E01               	movlw	high main@motorLeft
  1732   0033BE  6E19               	movwf	(forward@mL+1)^0,c
  1733   0033C0  0E5B               	movlw	low main@motorRight
  1734   0033C2  6E1A               	movwf	forward@mR^0,c
  1735   0033C4  0E01               	movlw	high main@motorRight
  1736   0033C6  6E1B               	movwf	(forward@mR+1)^0,c
  1737   0033C8  EC58  F026         	call	_forward	;wreg free
  1738   0033CC  EFF2  F019         	goto	l6229
  1739   0033D0                     l6227:
  1740                           
  1741                           ; BSR set to: 1
  1742   0033D0  0E64               	movlw	low main@motorLeft
  1743   0033D2  6E18               	movwf	stop@mL^0,c
  1744   0033D4  0E01               	movlw	high main@motorLeft
  1745   0033D6  6E19               	movwf	(stop@mL+1)^0,c
  1746   0033D8  0E5B               	movlw	low main@motorRight
  1747   0033DA  6E1A               	movwf	stop@mR^0,c
  1748   0033DC  0E01               	movlw	high main@motorRight
  1749   0033DE  6E1B               	movwf	(stop@mR+1)^0,c
  1750   0033E0  ECFC  F027         	call	_stop	;wreg free
  1751   0033E4                     l6229:
  1752                           
  1753                           ;MazeRobot.X/main.c: 154:         _delay((unsigned long)((100)*(64000000/4000.0)));
  1754   0033E4  0E09               	movlw	9
  1755   0033E6  0100               	movlb	0	; () banked
  1756   0033E8  6FE8               	movwf	(??_main+1)& (0+255),b
  1757   0033EA  0E1E               	movlw	30
  1758   0033EC  6FE7               	movwf	??_main& (0+255),b
  1759   0033EE  0EE4               	movlw	228
  1760   0033F0                     u7207:
  1761   0033F0  2EE8               	decfsz	wreg,f,c
  1762   0033F2  D7FE               	bra	u7207
  1763   0033F4  2FE7               	decfsz	??_main& (0+255),f,b
  1764   0033F6  D7FC               	bra	u7207
  1765   0033F8  2FE8               	decfsz	(??_main+1)& (0+255),f,b
  1766   0033FA  D7FA               	bra	u7207
  1767   0033FC  F000               	nop	
  1768   0033FE  EFA5  F018         	goto	l6189
  1769   003402  EF3B  F000         	goto	start
  1770   003406                     __end_of_main:
  1771                           	callstack 0
  1772                           
  1773 ;; *************** function _whiteCal *****************
  1774 ;; Defined at:
  1775 ;;		line 115 in file "MazeRobot.X/color.c"
  1776 ;; Parameters:    Size  Location     Type
  1777 ;;  v               2   17[COMRAM] PTR struct RGB
  1778 ;;		 -> main@whiteRGBVal(8), 
  1779 ;; Auto vars:     Size  Location     Type
  1780 ;;  i               2   21[COMRAM] int 
  1781 ;; Return value:  Size  Location     Type
  1782 ;;                  1    wreg      void 
  1783 ;; Registers used:
  1784 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1785 ;; Tracked objects:
  1786 ;;		On entry : 0/0
  1787 ;;		On exit  : 0/0
  1788 ;;		Unchanged: 0/0
  1789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1790 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1791 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1792 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1793 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1794 ;;Total ram usage:        6 bytes
  1795 ;; Hardware stack levels used: 1
  1796 ;; Hardware stack levels required when called: 6
  1797 ;; This function calls:
  1798 ;;		_getColor
  1799 ;; This function is called by:
  1800 ;;		_main
  1801 ;; This function uses a non-reentrant model
  1802 ;;
  1803                           
  1804                           	psect	text1
  1805   004AE8                     __ptext1:
  1806                           	callstack 0
  1807   004AE8                     _whiteCal:
  1808                           	callstack 24
  1809   004AE8                     
  1810                           ;MazeRobot.X/color.c: 117:     for(int i = 0;i<20;i++){
  1811   004AE8  0E00               	movlw	0
  1812   004AEA  6E17               	movwf	(whiteCal@i+1)^0,c
  1813   004AEC  0E00               	movlw	0
  1814   004AEE  6E16               	movwf	whiteCal@i^0,c
  1815   004AF0                     l5095:
  1816                           
  1817                           ;MazeRobot.X/color.c: 118:             LATDbits.LATD7 = !LATDbits.LATD7;
  1818   004AF0  AE7C               	btfss	124,7,c	;volatile
  1819   004AF2  EF7D  F025         	goto	u5471
  1820   004AF6  EF81  F025         	goto	u5470
  1821   004AFA                     u5471:
  1822   004AFA  6A14               	clrf	??_whiteCal^0,c
  1823   004AFC  2A14               	incf	??_whiteCal^0,f,c
  1824   004AFE  EF82  F025         	goto	u5488
  1825   004B02                     u5470:
  1826   004B02  6A14               	clrf	??_whiteCal^0,c
  1827   004B04                     u5488:
  1828   004B04  3214               	rrcf	??_whiteCal^0,f,c
  1829   004B06  3214               	rrcf	??_whiteCal^0,f,c
  1830   004B08  507C               	movf	124,w,c	;volatile
  1831   004B0A  1814               	xorwf	??_whiteCal^0,w,c
  1832   004B0C  0B7F               	andlw	-129
  1833   004B0E  1814               	xorwf	??_whiteCal^0,w,c
  1834   004B10  6E7C               	movwf	124,c	;volatile
  1835   004B12                     
  1836                           ;MazeRobot.X/color.c: 119:             _delay((unsigned long)((100)*(64000000/4000.0)));
  1837   004B12  0E09               	movlw	9
  1838   004B14  6E15               	movwf	(??_whiteCal+1)^0,c
  1839   004B16  0E1E               	movlw	30
  1840   004B18  6E14               	movwf	??_whiteCal^0,c
  1841   004B1A  0EE4               	movlw	228
  1842   004B1C                     u7217:
  1843   004B1C  2EE8               	decfsz	wreg,f,c
  1844   004B1E  D7FE               	bra	u7217
  1845   004B20  2E14               	decfsz	??_whiteCal^0,f,c
  1846   004B22  D7FC               	bra	u7217
  1847   004B24  2E15               	decfsz	(??_whiteCal+1)^0,f,c
  1848   004B26  D7FA               	bra	u7217
  1849   004B28  D000               	nop2	
  1850                           
  1851                           ;MazeRobot.X/color.c: 120:             }
  1852   004B2A  4A16               	infsnz	whiteCal@i^0,f,c
  1853   004B2C  2A17               	incf	(whiteCal@i+1)^0,f,c
  1854   004B2E  BE17               	btfsc	(whiteCal@i+1)^0,7,c
  1855   004B30  EFA3  F025         	goto	u5491
  1856   004B34  5017               	movf	(whiteCal@i+1)^0,w,c
  1857   004B36  E109               	bnz	u5490
  1858   004B38  0E14               	movlw	20
  1859   004B3A  5C16               	subwf	whiteCal@i^0,w,c
  1860   004B3C  A0D8               	btfss	status,0,c
  1861   004B3E  EFA3  F025         	goto	u5491
  1862   004B42  EFA5  F025         	goto	u5490
  1863   004B46                     u5491:
  1864   004B46  EF78  F025         	goto	l5095
  1865   004B4A                     u5490:
  1866   004B4A                     
  1867                           ;MazeRobot.X/color.c: 121:             LATDbits.LATD7 = !LATDbits.LATD7;
  1868   004B4A  AE7C               	btfss	124,7,c	;volatile
  1869   004B4C  EFAA  F025         	goto	u5501
  1870   004B50  EFAE  F025         	goto	u5500
  1871   004B54                     u5501:
  1872   004B54  6A14               	clrf	??_whiteCal^0,c
  1873   004B56  2A14               	incf	??_whiteCal^0,f,c
  1874   004B58  EFAF  F025         	goto	u5518
  1875   004B5C                     u5500:
  1876   004B5C  6A14               	clrf	??_whiteCal^0,c
  1877   004B5E                     u5518:
  1878   004B5E  3214               	rrcf	??_whiteCal^0,f,c
  1879   004B60  3214               	rrcf	??_whiteCal^0,f,c
  1880   004B62  507C               	movf	124,w,c	;volatile
  1881   004B64  1814               	xorwf	??_whiteCal^0,w,c
  1882   004B66  0B7F               	andlw	-129
  1883   004B68  1814               	xorwf	??_whiteCal^0,w,c
  1884   004B6A  6E7C               	movwf	124,c	;volatile
  1885   004B6C                     
  1886                           ;MazeRobot.X/color.c: 122:             _delay((unsigned long)((500)*(64000000/4000.0)));
  1887   004B6C  0E29               	movlw	41
  1888   004B6E  6E15               	movwf	(??_whiteCal+1)^0,c
  1889   004B70  0E96               	movlw	150
  1890   004B72  6E14               	movwf	??_whiteCal^0,c
  1891   004B74  0E7F               	movlw	127
  1892   004B76                     u7227:
  1893   004B76  2EE8               	decfsz	wreg,f,c
  1894   004B78  D7FE               	bra	u7227
  1895   004B7A  2E14               	decfsz	??_whiteCal^0,f,c
  1896   004B7C  D7FC               	bra	u7227
  1897   004B7E  2E15               	decfsz	(??_whiteCal+1)^0,f,c
  1898   004B80  D7FA               	bra	u7227
  1899   004B82  F000               	nop	
  1900   004B84                     
  1901                           ;MazeRobot.X/color.c: 123:             getColor(v);
  1902   004B84  C012  F010         	movff	whiteCal@v,getColor@v
  1903   004B88  C013  F011         	movff	whiteCal@v+1,getColor@v+1
  1904   004B8C  EC1C  F02A         	call	_getColor	;wreg free
  1905   004B90                     
  1906                           ;MazeRobot.X/color.c: 124:             _delay((unsigned long)((500)*(64000000/4000.0)));
  1907   004B90  0E29               	movlw	41
  1908   004B92  6E15               	movwf	(??_whiteCal+1)^0,c
  1909   004B94  0E96               	movlw	150
  1910   004B96  6E14               	movwf	??_whiteCal^0,c
  1911   004B98  0E7F               	movlw	127
  1912   004B9A                     u7237:
  1913   004B9A  2EE8               	decfsz	wreg,f,c
  1914   004B9C  D7FE               	bra	u7237
  1915   004B9E  2E14               	decfsz	??_whiteCal^0,f,c
  1916   004BA0  D7FC               	bra	u7237
  1917   004BA2  2E15               	decfsz	(??_whiteCal+1)^0,f,c
  1918   004BA4  D7FA               	bra	u7237
  1919   004BA6  F000               	nop	
  1920   004BA8                     
  1921                           ;MazeRobot.X/color.c: 125:             LATDbits.LATD7 = !LATDbits.LATD7;
  1922   004BA8  AE7C               	btfss	124,7,c	;volatile
  1923   004BAA  EFD9  F025         	goto	u5521
  1924   004BAE  EFDD  F025         	goto	u5520
  1925   004BB2                     u5521:
  1926   004BB2  6A14               	clrf	??_whiteCal^0,c
  1927   004BB4  2A14               	incf	??_whiteCal^0,f,c
  1928   004BB6  EFDE  F025         	goto	u5538
  1929   004BBA                     u5520:
  1930   004BBA  6A14               	clrf	??_whiteCal^0,c
  1931   004BBC                     u5538:
  1932   004BBC  3214               	rrcf	??_whiteCal^0,f,c
  1933   004BBE  3214               	rrcf	??_whiteCal^0,f,c
  1934   004BC0  507C               	movf	124,w,c	;volatile
  1935   004BC2  1814               	xorwf	??_whiteCal^0,w,c
  1936   004BC4  0B7F               	andlw	-129
  1937   004BC6  1814               	xorwf	??_whiteCal^0,w,c
  1938   004BC8  6E7C               	movwf	124,c	;volatile
  1939   004BCA  0012               	return		;funcret
  1940   004BCC                     __end_of_whiteCal:
  1941                           	callstack 0
  1942                           
  1943 ;; *************** function _initUSART4 *****************
  1944 ;; Defined at:
  1945 ;;		line 5 in file "serialTest.c"
  1946 ;; Parameters:    Size  Location     Type
  1947 ;;		None
  1948 ;; Auto vars:     Size  Location     Type
  1949 ;;		None
  1950 ;; Return value:  Size  Location     Type
  1951 ;;                  1    wreg      void 
  1952 ;; Registers used:
  1953 ;;		wreg, status,2
  1954 ;; Tracked objects:
  1955 ;;		On entry : 0/0
  1956 ;;		On exit  : 0/0
  1957 ;;		Unchanged: 0/0
  1958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1960 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1962 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1963 ;;Total ram usage:        0 bytes
  1964 ;; Hardware stack levels used: 1
  1965 ;; Hardware stack levels required when called: 2
  1966 ;; This function calls:
  1967 ;;		Nothing
  1968 ;; This function is called by:
  1969 ;;		_main
  1970 ;; This function uses a non-reentrant model
  1971 ;;
  1972                           
  1973                           	psect	text2
  1974   005910                     __ptext2:
  1975                           	callstack 0
  1976   005910                     _initUSART4:
  1977                           	callstack 28
  1978   005910                     
  1979                           ;serialTest.c: 9:     BAUD4CONbits.BRG16 = 0;
  1980   005910  010E               	movlb	14	; () banked
  1981   005912  97E9               	bcf	233,3,b	;volatile
  1982                           
  1983                           ;serialTest.c: 10:     TX4STAbits.BRGH = 0;
  1984   005914  95E8               	bcf	232,2,b	;volatile
  1985   005916                     
  1986                           ; BSR set to: 14
  1987                           ;serialTest.c: 19:     SP4BRGL = 51;
  1988   005916  0E33               	movlw	51
  1989   005918  6FE5               	movwf	229,b	;volatile
  1990                           
  1991                           ;serialTest.c: 20:     SP4BRGH = 0;
  1992   00591A  0E00               	movlw	0
  1993   00591C  6FE6               	movwf	230,b	;volatile
  1994   00591E                     
  1995                           ; BSR set to: 14
  1996                           ;serialTest.c: 22:     RC4STAbits.CREN = 1;
  1997   00591E  89E7               	bsf	231,4,b	;volatile
  1998   005920                     
  1999                           ; BSR set to: 14
  2000                           ;serialTest.c: 23:     TX4STAbits.TXEN = 1;
  2001   005920  8BE8               	bsf	232,5,b	;volatile
  2002   005922                     
  2003                           ; BSR set to: 14
  2004                           ;serialTest.c: 24:     RC4STAbits.SPEN = 1;
  2005   005922  8FE7               	bsf	231,7,b	;volatile
  2006   005924                     
  2007                           ; BSR set to: 14
  2008                           ;serialTest.c: 26:     TRISCbits.TRISC1 = 1;
  2009   005924  8283               	bsf	131,1,c	;volatile
  2010                           
  2011                           ;serialTest.c: 28:     RC0PPS = 0x12;
  2012   005926  0E12               	movlw	18
  2013   005928  6F62               	movwf	98,b	;volatile
  2014                           
  2015                           ;serialTest.c: 29:     RX4PPS = 0x11;
  2016   00592A  0E11               	movlw	17
  2017   00592C  6F15               	movwf	21,b	;volatile
  2018   00592E                     
  2019                           ; BSR set to: 14
  2020                           ;serialTest.c: 32:     INTCONbits.GIE = 1;
  2021   00592E  8EF2               	bsf	242,7,c	;volatile
  2022   005930                     
  2023                           ; BSR set to: 14
  2024                           ;serialTest.c: 33:     INTCONbits.IPEN = 1;
  2025   005930  8AF2               	bsf	242,5,c	;volatile
  2026   005932                     
  2027                           ; BSR set to: 14
  2028                           ;serialTest.c: 34:     INTCONbits.PEIE = 1;
  2029   005932  8CF2               	bsf	242,6,c	;volatile
  2030   005934                     
  2031                           ; BSR set to: 14
  2032                           ;serialTest.c: 36:     PIE4bits.RC4IE=1;
  2033   005934  872D               	bsf	45,3,b	;volatile
  2034   005936                     
  2035                           ; BSR set to: 14
  2036                           ;serialTest.c: 37:     PIE4bits.TX4IE=0;
  2037   005936  952D               	bcf	45,2,b	;volatile
  2038   005938                     
  2039                           ; BSR set to: 14
  2040                           ;serialTest.c: 39:     IPR4bits.RC4IP = 1;
  2041   005938  8723               	bsf	35,3,b	;volatile
  2042   00593A                     
  2043                           ; BSR set to: 14
  2044                           ;serialTest.c: 40:     IPR4bits.TX4IP = 1;
  2045   00593A  8523               	bsf	35,2,b	;volatile
  2046   00593C                     
  2047                           ; BSR set to: 14
  2048   00593C  0012               	return		;funcret
  2049   00593E                     __end_of_initUSART4:
  2050                           	callstack 0
  2051                           
  2052 ;; *************** function _initDCmotorsPWM *****************
  2053 ;; Defined at:
  2054 ;;		line 10 in file "MazeRobot.X/dc_motor.c"
  2055 ;; Parameters:    Size  Location     Type
  2056 ;;  PWMperiod       2    4[COMRAM] int 
  2057 ;; Auto vars:     Size  Location     Type
  2058 ;;		None
  2059 ;; Return value:  Size  Location     Type
  2060 ;;                  1    wreg      void 
  2061 ;; Registers used:
  2062 ;;		wreg, status,2
  2063 ;; Tracked objects:
  2064 ;;		On entry : 0/0
  2065 ;;		On exit  : 0/0
  2066 ;;		Unchanged: 0/0
  2067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2068 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2071 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2072 ;;Total ram usage:        2 bytes
  2073 ;; Hardware stack levels used: 1
  2074 ;; Hardware stack levels required when called: 2
  2075 ;; This function calls:
  2076 ;;		Nothing
  2077 ;; This function is called by:
  2078 ;;		_main
  2079 ;; This function uses a non-reentrant model
  2080 ;;
  2081                           
  2082                           	psect	text3
  2083   005150                     __ptext3:
  2084                           	callstack 0
  2085   005150                     _initDCmotorsPWM:
  2086                           	callstack 28
  2087   005150                     
  2088                           ;MazeRobot.X/dc_motor.c: 14:     LATEbits.LATE2 = 0;
  2089   005150  947D               	bcf	125,2,c	;volatile
  2090                           
  2091                           ;MazeRobot.X/dc_motor.c: 15:     LATEbits.LATE4 = 0;
  2092   005152  987D               	bcf	125,4,c	;volatile
  2093                           
  2094                           ;MazeRobot.X/dc_motor.c: 16:     LATCbits.LATC7 = 0;
  2095   005154  9E7B               	bcf	123,7,c	;volatile
  2096                           
  2097                           ;MazeRobot.X/dc_motor.c: 17:     LATGbits.LATG6 = 0;
  2098   005156  9C7F               	bcf	127,6,c	;volatile
  2099                           
  2100                           ;MazeRobot.X/dc_motor.c: 20:     TRISEbits.TRISE2 = 0 ;
  2101   005158  9485               	bcf	133,2,c	;volatile
  2102                           
  2103                           ;MazeRobot.X/dc_motor.c: 21:     TRISEbits.TRISE4 = 0 ;
  2104   00515A  9885               	bcf	133,4,c	;volatile
  2105                           
  2106                           ;MazeRobot.X/dc_motor.c: 22:     TRISCbits.TRISC7 = 0 ;
  2107   00515C  9E83               	bcf	131,7,c	;volatile
  2108                           
  2109                           ;MazeRobot.X/dc_motor.c: 23:     TRISGbits.TRISG6 = 0 ;
  2110   00515E  9C87               	bcf	135,6,c	;volatile
  2111   005160                     
  2112                           ;MazeRobot.X/dc_motor.c: 26:     RE2PPS=0x05;
  2113   005160  0E05               	movlw	5
  2114   005162  010E               	movlb	14	; () banked
  2115   005164  6F74               	movwf	116,b	;volatile
  2116                           
  2117                           ;MazeRobot.X/dc_motor.c: 27:     RE4PPS=0x06;
  2118   005166  0E06               	movlw	6
  2119   005168  6F76               	movwf	118,b	;volatile
  2120                           
  2121                           ;MazeRobot.X/dc_motor.c: 28:     RC7PPS=0x07;
  2122   00516A  0E07               	movlw	7
  2123   00516C  6F69               	movwf	105,b	;volatile
  2124                           
  2125                           ;MazeRobot.X/dc_motor.c: 29:     RG6PPS=0x08;
  2126   00516E  0E08               	movlw	8
  2127   005170  6F88               	movwf	136,b	;volatile
  2128                           
  2129                           ;MazeRobot.X/dc_motor.c: 32:     T2CONbits.CKPS=0b011;
  2130   005172  50BD               	movf	189,w,c	;volatile
  2131   005174  0B8F               	andlw	-113
  2132   005176  0930               	iorlw	48
  2133   005178  6EBD               	movwf	189,c	;volatile
  2134                           
  2135                           ;MazeRobot.X/dc_motor.c: 33:     T2HLTbits.MODE=0b00000;
  2136   00517A  0EE0               	movlw	-32
  2137   00517C  16BE               	andwf	190,f,c	;volatile
  2138                           
  2139                           ;MazeRobot.X/dc_motor.c: 34:     T2CLKCONbits.CS=0b0001;
  2140   00517E  50BF               	movf	191,w,c	;volatile
  2141   005180  0BF0               	andlw	-16
  2142   005182  0901               	iorlw	1
  2143   005184  6EBF               	movwf	191,c	;volatile
  2144                           
  2145                           ;MazeRobot.X/dc_motor.c: 38:     T2PR=199;
  2146   005186  0EC7               	movlw	199
  2147   005188  6EBC               	movwf	188,c	;volatile
  2148   00518A                     
  2149                           ; BSR set to: 14
  2150                           ;MazeRobot.X/dc_motor.c: 39:     T2CONbits.ON=1;
  2151   00518A  8EBD               	bsf	189,7,c	;volatile
  2152                           
  2153                           ;MazeRobot.X/dc_motor.c: 43:     CCPR1H=0;
  2154   00518C  0E00               	movlw	0
  2155   00518E  6EAA               	movwf	170,c	;volatile
  2156                           
  2157                           ;MazeRobot.X/dc_motor.c: 44:     CCPR2H=0;
  2158   005190  0E00               	movlw	0
  2159   005192  6EA6               	movwf	166,c	;volatile
  2160                           
  2161                           ;MazeRobot.X/dc_motor.c: 45:     CCPR3H=0;
  2162   005194  0E00               	movlw	0
  2163   005196  010F               	movlb	15	; () banked
  2164   005198  6F25               	movwf	37,b	;volatile
  2165                           
  2166                           ;MazeRobot.X/dc_motor.c: 46:     CCPR4H=0;
  2167   00519A  0E00               	movlw	0
  2168   00519C  6F21               	movwf	33,b	;volatile
  2169                           
  2170                           ;MazeRobot.X/dc_motor.c: 49:     CCPTMRS0bits.C1TSEL=0;
  2171   00519E  0EFC               	movlw	-4
  2172   0051A0  16AD               	andwf	173,f,c	;volatile
  2173                           
  2174                           ;MazeRobot.X/dc_motor.c: 50:     CCPTMRS0bits.C2TSEL=0;
  2175   0051A2  0EF3               	movlw	-13
  2176   0051A4  16AD               	andwf	173,f,c	;volatile
  2177                           
  2178                           ;MazeRobot.X/dc_motor.c: 51:     CCPTMRS0bits.C3TSEL=0;
  2179   0051A6  0ECF               	movlw	-49
  2180   0051A8  16AD               	andwf	173,f,c	;volatile
  2181                           
  2182                           ;MazeRobot.X/dc_motor.c: 52:     CCPTMRS0bits.C4TSEL=0;
  2183   0051AA  0E3F               	movlw	-193
  2184   0051AC  16AD               	andwf	173,f,c	;volatile
  2185   0051AE                     
  2186                           ; BSR set to: 15
  2187                           ;MazeRobot.X/dc_motor.c: 55:     CCP1CONbits.FMT=1;
  2188   0051AE  88AB               	bsf	171,4,c	;volatile
  2189                           
  2190                           ;MazeRobot.X/dc_motor.c: 56:     CCP1CONbits.CCP1MODE=0b1100;
  2191   0051B0  50AB               	movf	171,w,c	;volatile
  2192   0051B2  0BF0               	andlw	-16
  2193   0051B4  090C               	iorlw	12
  2194   0051B6  6EAB               	movwf	171,c	;volatile
  2195   0051B8                     
  2196                           ; BSR set to: 15
  2197                           ;MazeRobot.X/dc_motor.c: 57:     CCP1CONbits.EN=1;
  2198   0051B8  8EAB               	bsf	171,7,c	;volatile
  2199   0051BA                     
  2200                           ; BSR set to: 15
  2201                           ;MazeRobot.X/dc_motor.c: 59:     CCP2CONbits.FMT=1;
  2202   0051BA  88A7               	bsf	167,4,c	;volatile
  2203                           
  2204                           ;MazeRobot.X/dc_motor.c: 60:     CCP2CONbits.CCP2MODE=0b1100;
  2205   0051BC  50A7               	movf	167,w,c	;volatile
  2206   0051BE  0BF0               	andlw	-16
  2207   0051C0  090C               	iorlw	12
  2208   0051C2  6EA7               	movwf	167,c	;volatile
  2209   0051C4                     
  2210                           ; BSR set to: 15
  2211                           ;MazeRobot.X/dc_motor.c: 61:     CCP2CONbits.EN=1;
  2212   0051C4  8EA7               	bsf	167,7,c	;volatile
  2213   0051C6                     
  2214                           ; BSR set to: 15
  2215                           ;MazeRobot.X/dc_motor.c: 63:     CCP3CONbits.FMT=1;
  2216   0051C6  8926               	bsf	38,4,b	;volatile
  2217                           
  2218                           ;MazeRobot.X/dc_motor.c: 64:     CCP3CONbits.CCP3MODE=0b1100;
  2219   0051C8  5126               	movf	38,w,b	;volatile
  2220   0051CA  0BF0               	andlw	-16
  2221   0051CC  090C               	iorlw	12
  2222   0051CE  6F26               	movwf	38,b	;volatile
  2223   0051D0                     
  2224                           ; BSR set to: 15
  2225                           ;MazeRobot.X/dc_motor.c: 65:     CCP3CONbits.EN=1;
  2226   0051D0  8F26               	bsf	38,7,b	;volatile
  2227   0051D2                     
  2228                           ; BSR set to: 15
  2229                           ;MazeRobot.X/dc_motor.c: 67:     CCP4CONbits.FMT=1;
  2230   0051D2  8922               	bsf	34,4,b	;volatile
  2231                           
  2232                           ;MazeRobot.X/dc_motor.c: 68:     CCP4CONbits.CCP4MODE=0b1100;
  2233   0051D4  5122               	movf	34,w,b	;volatile
  2234   0051D6  0BF0               	andlw	-16
  2235   0051D8  090C               	iorlw	12
  2236   0051DA  6F22               	movwf	34,b	;volatile
  2237   0051DC                     
  2238                           ; BSR set to: 15
  2239                           ;MazeRobot.X/dc_motor.c: 69:     CCP4CONbits.EN=1;
  2240   0051DC  8F22               	bsf	34,7,b	;volatile
  2241   0051DE                     
  2242                           ; BSR set to: 15
  2243   0051DE  0012               	return		;funcret
  2244   0051E0                     __end_of_initDCmotorsPWM:
  2245                           	callstack 0
  2246                           
  2247 ;; *************** function _forward *****************
  2248 ;; Defined at:
  2249 ;;		line 132 in file "MazeRobot.X/dc_motor.c"
  2250 ;; Parameters:    Size  Location     Type
  2251 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  2252 ;;		 -> main@motorLeft(9), 
  2253 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  2254 ;;		 -> main@motorRight(9), 
  2255 ;; Auto vars:     Size  Location     Type
  2256 ;;		None
  2257 ;; Return value:  Size  Location     Type
  2258 ;;                  1    wreg      void 
  2259 ;; Registers used:
  2260 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2261 ;; Tracked objects:
  2262 ;;		On entry : 0/0
  2263 ;;		On exit  : 0/0
  2264 ;;		Unchanged: 0/0
  2265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2266 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2268 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2269 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2270 ;;Total ram usage:        5 bytes
  2271 ;; Hardware stack levels used: 1
  2272 ;; Hardware stack levels required when called: 4
  2273 ;; This function calls:
  2274 ;;		_setMotorPWM
  2275 ;; This function is called by:
  2276 ;;		_main
  2277 ;; This function uses a non-reentrant model
  2278 ;;
  2279                           
  2280                           	psect	text4
  2281   004CB0                     __ptext4:
  2282                           	callstack 0
  2283   004CB0                     _forward:
  2284                           	callstack 26
  2285   004CB0                     
  2286                           ;MazeRobot.X/dc_motor.c: 132: void forward(DC_motor *mL, DC_motor *mR);MazeRobot.X/dc_mo
      +                          tor.c: 133: {;MazeRobot.X/dc_motor.c: 134:     mL->direction = 1;
  2287   004CB0  EE20 F001          	lfsr	2,1
  2288   004CB4  5018               	movf	forward@mL^0,w,c
  2289   004CB6  26D9               	addwf	fsr2l,f,c
  2290   004CB8  5019               	movf	(forward@mL+1)^0,w,c
  2291   004CBA  22DA               	addwfc	fsr2h,f,c
  2292   004CBC  0E01               	movlw	1
  2293   004CBE  6EDF               	movwf	indf2,c
  2294                           
  2295                           ;MazeRobot.X/dc_motor.c: 135:     mR->direction = 1;
  2296   004CC0  EE20 F001          	lfsr	2,1
  2297   004CC4  501A               	movf	forward@mR^0,w,c
  2298   004CC6  26D9               	addwf	fsr2l,f,c
  2299   004CC8  501B               	movf	(forward@mR+1)^0,w,c
  2300   004CCA  22DA               	addwfc	fsr2h,f,c
  2301   004CCC  0E01               	movlw	1
  2302   004CCE  6EDF               	movwf	indf2,c
  2303                           
  2304                           ;MazeRobot.X/dc_motor.c: 137:     mL->brakemode = 1;
  2305   004CD0  EE20 F002          	lfsr	2,2
  2306   004CD4  5018               	movf	forward@mL^0,w,c
  2307   004CD6  26D9               	addwf	fsr2l,f,c
  2308   004CD8  5019               	movf	(forward@mL+1)^0,w,c
  2309   004CDA  22DA               	addwfc	fsr2h,f,c
  2310   004CDC  0E01               	movlw	1
  2311   004CDE  6EDF               	movwf	indf2,c
  2312                           
  2313                           ;MazeRobot.X/dc_motor.c: 138:     mL->brakemode = 1;
  2314   004CE0  EE20 F002          	lfsr	2,2
  2315   004CE4  5018               	movf	forward@mL^0,w,c
  2316   004CE6  26D9               	addwf	fsr2l,f,c
  2317   004CE8  5019               	movf	(forward@mL+1)^0,w,c
  2318   004CEA  22DA               	addwfc	fsr2h,f,c
  2319   004CEC  0E01               	movlw	1
  2320   004CEE  6EDF               	movwf	indf2,c
  2321                           
  2322                           ;MazeRobot.X/dc_motor.c: 140:     while ((mL->power)<25 && (mR->power)<25){
  2323   004CF0  EF9E  F026         	goto	l5301
  2324   004CF4                     l5293:
  2325                           
  2326                           ;MazeRobot.X/dc_motor.c: 141:         if ((mL->power) < 25){
  2327   004CF4  C018  FFD9         	movff	forward@mL,fsr2l
  2328   004CF8  C019  FFDA         	movff	forward@mL+1,fsr2h
  2329   004CFC  0E19               	movlw	25
  2330   004CFE  60DF               	cpfslt	indf2,c
  2331   004D00  EF84  F026         	goto	u5861
  2332   004D04  EF86  F026         	goto	u5860
  2333   004D08                     u5861:
  2334   004D08  EF8C  F026         	goto	l5297
  2335   004D0C                     u5860:
  2336   004D0C                     
  2337                           ;MazeRobot.X/dc_motor.c: 142:             mL->power += 5;
  2338   004D0C  C018  FFD9         	movff	forward@mL,fsr2l
  2339   004D10  C019  FFDA         	movff	forward@mL+1,fsr2h
  2340   004D14  0E05               	movlw	5
  2341   004D16  26DF               	addwf	indf2,f,c
  2342   004D18                     l5297:
  2343                           
  2344                           ;MazeRobot.X/dc_motor.c: 144:         if ((mR->power) <25){
  2345   004D18  C01A  FFD9         	movff	forward@mR,fsr2l
  2346   004D1C  C01B  FFDA         	movff	forward@mR+1,fsr2h
  2347   004D20  0E19               	movlw	25
  2348   004D22  60DF               	cpfslt	indf2,c
  2349   004D24  EF96  F026         	goto	u5871
  2350   004D28  EF98  F026         	goto	u5870
  2351   004D2C                     u5871:
  2352   004D2C  EF9E  F026         	goto	l5301
  2353   004D30                     u5870:
  2354   004D30                     
  2355                           ;MazeRobot.X/dc_motor.c: 145:             mR->power += 5;
  2356   004D30  C01A  FFD9         	movff	forward@mR,fsr2l
  2357   004D34  C01B  FFDA         	movff	forward@mR+1,fsr2h
  2358   004D38  0E05               	movlw	5
  2359   004D3A  26DF               	addwf	indf2,f,c
  2360   004D3C                     l5301:
  2361                           
  2362                           ;MazeRobot.X/dc_motor.c: 140:     while ((mL->power)<25 && (mR->power)<25){
  2363   004D3C  C018  FFD9         	movff	forward@mL,fsr2l
  2364   004D40  C019  FFDA         	movff	forward@mL+1,fsr2h
  2365   004D44  0E19               	movlw	25
  2366   004D46  60DF               	cpfslt	indf2,c
  2367   004D48  EFA8  F026         	goto	u5881
  2368   004D4C  EFAA  F026         	goto	u5880
  2369   004D50                     u5881:
  2370   004D50  EFB6  F026         	goto	l5305
  2371   004D54                     u5880:
  2372   004D54  C01A  FFD9         	movff	forward@mR,fsr2l
  2373   004D58  C01B  FFDA         	movff	forward@mR+1,fsr2h
  2374   004D5C  0E18               	movlw	24
  2375   004D5E  64DF               	cpfsgt	indf2,c
  2376   004D60  EFB4  F026         	goto	u5891
  2377   004D64  EFB6  F026         	goto	u5890
  2378   004D68                     u5891:
  2379   004D68  EF7A  F026         	goto	l5293
  2380   004D6C                     u5890:
  2381   004D6C                     l5305:
  2382                           
  2383                           ;MazeRobot.X/dc_motor.c: 149:     setMotorPWM(mL);
  2384   004D6C  C018  F012         	movff	forward@mL,setMotorPWM@m
  2385   004D70  C019  F013         	movff	forward@mL+1,setMotorPWM@m+1
  2386   004D74  EC6E  F01F         	call	_setMotorPWM	;wreg free
  2387                           
  2388                           ;MazeRobot.X/dc_motor.c: 150:     setMotorPWM(mR);
  2389   004D78  C01A  F012         	movff	forward@mR,setMotorPWM@m
  2390   004D7C  C01B  F013         	movff	forward@mR+1,setMotorPWM@m+1
  2391   004D80  EC6E  F01F         	call	_setMotorPWM	;wreg free
  2392   004D84  0012               	return		;funcret
  2393   004D86                     __end_of_forward:
  2394                           	callstack 0
  2395                           
  2396 ;; *************** function _color_click_init *****************
  2397 ;; Defined at:
  2398 ;;		line 8 in file "MazeRobot.X/color.c"
  2399 ;; Parameters:    Size  Location     Type
  2400 ;;		None
  2401 ;; Auto vars:     Size  Location     Type
  2402 ;;		None
  2403 ;; Return value:  Size  Location     Type
  2404 ;;                  1    wreg      void 
  2405 ;; Registers used:
  2406 ;;		wreg, status,2, status,0, cstack
  2407 ;; Tracked objects:
  2408 ;;		On entry : 0/0
  2409 ;;		On exit  : 0/0
  2410 ;;		Unchanged: 0/0
  2411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2414 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2415 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2416 ;;Total ram usage:        1 bytes
  2417 ;; Hardware stack levels used: 1
  2418 ;; Hardware stack levels required when called: 5
  2419 ;; This function calls:
  2420 ;;		_I2C_2_Master_Init
  2421 ;;		_color_writetoaddr
  2422 ;; This function is called by:
  2423 ;;		_main
  2424 ;; This function uses a non-reentrant model
  2425 ;;
  2426                           
  2427                           	psect	text5
  2428   0058AC                     __ptext5:
  2429                           	callstack 0
  2430   0058AC                     _color_click_init:
  2431                           	callstack 25
  2432   0058AC                     
  2433                           ;MazeRobot.X/color.c: 11:     I2C_2_Master_Init();
  2434   0058AC  ECB5  F02C         	call	_I2C_2_Master_Init	;wreg free
  2435   0058B0                     
  2436                           ;MazeRobot.X/color.c: 14:   color_writetoaddr(0x00, 0x01);
  2437   0058B0  0E01               	movlw	1
  2438   0058B2  6E07               	movwf	color_writetoaddr@value^0,c
  2439   0058B4  0E00               	movlw	0
  2440   0058B6  EC1B  F02D         	call	_color_writetoaddr
  2441   0058BA                     
  2442                           ;MazeRobot.X/color.c: 15:     _delay((unsigned long)((3)*(64000000/4000.0)));
  2443   0058BA  0E3F               	movlw	63
  2444   0058BC  6E09               	movwf	??_color_click_init^0,c
  2445   0058BE  0E55               	movlw	85
  2446   0058C0                     u7247:
  2447   0058C0  2EE8               	decfsz	wreg,f,c
  2448   0058C2  D7FE               	bra	u7247
  2449   0058C4  2E09               	decfsz	??_color_click_init^0,f,c
  2450   0058C6  D7FC               	bra	u7247
  2451   0058C8  F000               	nop	
  2452   0058CA                     
  2453                           ;MazeRobot.X/color.c: 18:  color_writetoaddr(0x00, 0x03);
  2454   0058CA  0E03               	movlw	3
  2455   0058CC  6E07               	movwf	color_writetoaddr@value^0,c
  2456   0058CE  0E00               	movlw	0
  2457   0058D0  EC1B  F02D         	call	_color_writetoaddr
  2458   0058D4                     
  2459                           ;MazeRobot.X/color.c: 21:  color_writetoaddr(0x01, 0xD5);
  2460   0058D4  0ED5               	movlw	213
  2461   0058D6  6E07               	movwf	color_writetoaddr@value^0,c
  2462   0058D8  0E01               	movlw	1
  2463   0058DA  EC1B  F02D         	call	_color_writetoaddr
  2464   0058DE  0012               	return		;funcret
  2465   0058E0                     __end_of_color_click_init:
  2466                           	callstack 0
  2467                           
  2468 ;; *************** function _color_writetoaddr *****************
  2469 ;; Defined at:
  2470 ;;		line 25 in file "MazeRobot.X/color.c"
  2471 ;; Parameters:    Size  Location     Type
  2472 ;;  address         1    wreg     unsigned char 
  2473 ;;  value           1    6[COMRAM] unsigned char 
  2474 ;; Auto vars:     Size  Location     Type
  2475 ;;  address         1    7[COMRAM] unsigned char 
  2476 ;; Return value:  Size  Location     Type
  2477 ;;                  1    wreg      void 
  2478 ;; Registers used:
  2479 ;;		wreg, status,2, status,0, cstack
  2480 ;; Tracked objects:
  2481 ;;		On entry : 0/0
  2482 ;;		On exit  : 0/0
  2483 ;;		Unchanged: 0/0
  2484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2485 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2486 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2488 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2489 ;;Total ram usage:        2 bytes
  2490 ;; Hardware stack levels used: 1
  2491 ;; Hardware stack levels required when called: 4
  2492 ;; This function calls:
  2493 ;;		_I2C_2_Master_Start
  2494 ;;		_I2C_2_Master_Stop
  2495 ;;		_I2C_2_Master_Write
  2496 ;; This function is called by:
  2497 ;;		_color_click_init
  2498 ;; This function uses a non-reentrant model
  2499 ;;
  2500                           
  2501                           	psect	text6
  2502   005A36                     __ptext6:
  2503                           	callstack 0
  2504   005A36                     _color_writetoaddr:
  2505                           	callstack 25
  2506                           
  2507                           ;incstack = 0
  2508                           ;color_writetoaddr@address stored from wreg
  2509   005A36  6E08               	movwf	color_writetoaddr@address^0,c
  2510   005A38                     
  2511                           ;MazeRobot.X/color.c: 26:     I2C_2_Master_Start();
  2512   005A38  EC5B  F02D         	call	_I2C_2_Master_Start	;wreg free
  2513                           
  2514                           ;MazeRobot.X/color.c: 27:     I2C_2_Master_Write(0x52 | 0x00);
  2515   005A3C  0E52               	movlw	82
  2516   005A3E  EC50  F02D         	call	_I2C_2_Master_Write
  2517                           
  2518                           ;MazeRobot.X/color.c: 28:     I2C_2_Master_Write(0x80 | address);
  2519   005A42  5008               	movf	color_writetoaddr@address^0,w,c
  2520   005A44  0980               	iorlw	128
  2521   005A46  EC50  F02D         	call	_I2C_2_Master_Write
  2522                           
  2523                           ;MazeRobot.X/color.c: 29:     I2C_2_Master_Write(value);
  2524   005A4A  5007               	movf	color_writetoaddr@value^0,w,c
  2525   005A4C  EC50  F02D         	call	_I2C_2_Master_Write
  2526                           
  2527                           ;MazeRobot.X/color.c: 30:     I2C_2_Master_Stop();
  2528   005A50  EC56  F02D         	call	_I2C_2_Master_Stop	;wreg free
  2529   005A54  0012               	return		;funcret
  2530   005A56                     __end_of_color_writetoaddr:
  2531                           	callstack 0
  2532                           
  2533 ;; *************** function _I2C_2_Master_Init *****************
  2534 ;; Defined at:
  2535 ;;		line 4 in file "MazeRobot.X/i2c.c"
  2536 ;; Parameters:    Size  Location     Type
  2537 ;;		None
  2538 ;; Auto vars:     Size  Location     Type
  2539 ;;		None
  2540 ;; Return value:  Size  Location     Type
  2541 ;;                  1    wreg      void 
  2542 ;; Registers used:
  2543 ;;		wreg, status,2
  2544 ;; Tracked objects:
  2545 ;;		On entry : 0/0
  2546 ;;		On exit  : 0/0
  2547 ;;		Unchanged: 0/0
  2548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2552 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2553 ;;Total ram usage:        0 bytes
  2554 ;; Hardware stack levels used: 1
  2555 ;; Hardware stack levels required when called: 2
  2556 ;; This function calls:
  2557 ;;		Nothing
  2558 ;; This function is called by:
  2559 ;;		_color_click_init
  2560 ;; This function uses a non-reentrant model
  2561 ;;
  2562                           
  2563                           	psect	text7
  2564   00596A                     __ptext7:
  2565                           	callstack 0
  2566   00596A                     _I2C_2_Master_Init:
  2567                           	callstack 27
  2568   00596A                     
  2569                           ;MazeRobot.X/i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  2570   00596A  010E               	movlb	14	; () banked
  2571   00596C  51D9               	movf	217,w,b	;volatile
  2572   00596E  0BF0               	andlw	-16
  2573   005970  0908               	iorlw	8
  2574   005972  6FD9               	movwf	217,b	;volatile
  2575   005974                     
  2576                           ; BSR set to: 14
  2577                           ;MazeRobot.X/i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  2578   005974  8BD9               	bsf	217,5,b	;volatile
  2579                           
  2580                           ;MazeRobot.X/i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  2581   005976  0E9F               	movlw	159
  2582   005978  6FD6               	movwf	214,b	;volatile
  2583   00597A                     
  2584                           ; BSR set to: 14
  2585                           ;MazeRobot.X/i2c.c: 12:   TRISDbits.TRISD5 = 1;
  2586   00597A  8A84               	bsf	132,5,c	;volatile
  2587   00597C                     
  2588                           ; BSR set to: 14
  2589                           ;MazeRobot.X/i2c.c: 13:   TRISDbits.TRISD6 = 1;
  2590   00597C  8C84               	bsf	132,6,c	;volatile
  2591   00597E                     
  2592                           ; BSR set to: 14
  2593                           ;MazeRobot.X/i2c.c: 14:   ANSELDbits.ANSELD5=0;
  2594   00597E  9BA7               	bcf	167,5,b	;volatile
  2595   005980                     
  2596                           ; BSR set to: 14
  2597                           ;MazeRobot.X/i2c.c: 15:   ANSELDbits.ANSELD6=0;
  2598   005980  9DA7               	bcf	167,6,b	;volatile
  2599                           
  2600                           ;MazeRobot.X/i2c.c: 16:   SSP2DATPPS=0x1D;
  2601   005982  0E1D               	movlw	29
  2602   005984  6F1D               	movwf	29,b	;volatile
  2603                           
  2604                           ;MazeRobot.X/i2c.c: 17:   SSP2CLKPPS=0x1E;
  2605   005986  0E1E               	movlw	30
  2606   005988  6F1C               	movwf	28,b	;volatile
  2607                           
  2608                           ;MazeRobot.X/i2c.c: 18:   RD5PPS=0x1C;
  2609   00598A  0E1C               	movlw	28
  2610   00598C  6F6F               	movwf	111,b	;volatile
  2611                           
  2612                           ;MazeRobot.X/i2c.c: 19:   RD6PPS=0x1B;
  2613   00598E  0E1B               	movlw	27
  2614   005990  6F70               	movwf	112,b	;volatile
  2615   005992                     
  2616                           ; BSR set to: 14
  2617   005992  0012               	return		;funcret
  2618   005994                     __end_of_I2C_2_Master_Init:
  2619                           	callstack 0
  2620                           
  2621 ;; *************** function _colorDetect *****************
  2622 ;; Defined at:
  2623 ;;		line 130 in file "MazeRobot.X/color.c"
  2624 ;; Parameters:    Size  Location     Type
  2625 ;;  clearRef        4  121[BANK0 ] void 
  2626 ;;  ambientRGBVa    2  125[BANK0 ] PTR struct RGB
  2627 ;;		 -> main@ambientRGBVal(8), 
  2628 ;;  whiteRGBVal     2  127[BANK0 ] PTR struct RGB
  2629 ;;		 -> main@whiteRGBVal(8), 
  2630 ;;  mL              2  129[BANK0 ] PTR struct DC_motor
  2631 ;;		 -> main@motorLeft(9), 
  2632 ;;  mR              2  131[BANK0 ] PTR struct DC_motor
  2633 ;;		 -> main@motorRight(9), 
  2634 ;; Auto vars:     Size  Location     Type
  2635 ;;  string1        20    0[BANK1 ] unsigned char [20]
  2636 ;;  RGBVal          8   38[BANK1 ] struct RGB
  2637 ;;  bluePrint       4   54[BANK1 ] float 
  2638 ;;  greenPrint      4   50[BANK1 ] float 
  2639 ;;  redPrint        4   46[BANK1 ] float 
  2640 ;;  whiteB          4   28[BANK1 ] float 
  2641 ;;  whiteG          4   24[BANK1 ] float 
  2642 ;;  whiteR          4   20[BANK1 ] float 
  2643 ;;  whiteC          4    0        float 
  2644 ;;  ambientB        2   36[BANK1 ] unsigned int 
  2645 ;;  ambientG        2   34[BANK1 ] unsigned int 
  2646 ;;  ambientR        2   32[BANK1 ] unsigned int 
  2647 ;; Return value:  Size  Location     Type
  2648 ;;                  1    wreg      void 
  2649 ;; Registers used:
  2650 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2651 ;; Tracked objects:
  2652 ;;		On entry : 0/0
  2653 ;;		On exit  : 0/0
  2654 ;;		Unchanged: 0/0
  2655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2656 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2657 ;;      Locals:         0       0      58       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2658 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2659 ;;      Totals:         0      14      58       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2660 ;;Total ram usage:       72 bytes
  2661 ;; Hardware stack levels used: 1
  2662 ;; Hardware stack levels required when called: 10
  2663 ;; This function calls:
  2664 ;;		_TxBufferedString
  2665 ;;		___fldiv
  2666 ;;		___flge
  2667 ;;		___flmul
  2668 ;;		___flsub
  2669 ;;		___xxtofl
  2670 ;;		_getColor
  2671 ;;		_reverseSquareLeft
  2672 ;;		_reverseSquareRight
  2673 ;;		_sendTxBuf
  2674 ;;		_sprintf
  2675 ;;		_turnLeft_135
  2676 ;;		_turnLeft_90
  2677 ;;		_turnRight_135
  2678 ;;		_turnRight_90
  2679 ;;		_turn_180
  2680 ;; This function is called by:
  2681 ;;		_main
  2682 ;; This function uses a non-reentrant model
  2683 ;;
  2684                           
  2685                           	psect	text8
  2686   000E2C                     __ptext8:
  2687                           	callstack 0
  2688   000E2C                     _colorDetect:
  2689                           	callstack 20
  2690   000E2C                     
  2691                           ;MazeRobot.X/color.c: 133:         RGB RGBVal;;MazeRobot.X/color.c: 134:         getColo
      +                          r(&RGBVal);
  2692   000E2C  0E26               	movlw	low colorDetect@RGBVal
  2693   000E2E  6E10               	movwf	getColor@v^0,c
  2694   000E30  0E01               	movlw	high colorDetect@RGBVal
  2695   000E32  6E11               	movwf	(getColor@v+1)^0,c
  2696   000E34  EC1C  F02A         	call	_getColor	;wreg free
  2697   000E38                     
  2698                           ;MazeRobot.X/color.c: 136:         unsigned int ambientR = ambientRGBVal->R;
  2699   000E38  C0DD  FFD9         	movff	colorDetect@ambientRGBVal,fsr2l
  2700   000E3C  C0DE  FFDA         	movff	colorDetect@ambientRGBVal+1,fsr2h
  2701   000E40  CFDE F120          	movff	postinc2,colorDetect@ambientR
  2702   000E44  CFDD F121          	movff	postdec2,colorDetect@ambientR+1
  2703   000E48                     
  2704                           ;MazeRobot.X/color.c: 137:         unsigned int ambientG = ambientRGBVal->G;
  2705   000E48  0100               	movlb	0	; () banked
  2706   000E4A  EE20 F002          	lfsr	2,2
  2707   000E4E  51DD               	movf	colorDetect@ambientRGBVal& (0+255),w,b
  2708   000E50  26D9               	addwf	fsr2l,f,c
  2709   000E52  51DE               	movf	(colorDetect@ambientRGBVal+1)& (0+255),w,b
  2710   000E54  22DA               	addwfc	fsr2h,f,c
  2711   000E56  CFDE F122          	movff	postinc2,colorDetect@ambientG
  2712   000E5A  CFDD F123          	movff	postdec2,colorDetect@ambientG+1
  2713   000E5E                     
  2714                           ; BSR set to: 0
  2715                           ;MazeRobot.X/color.c: 138:         unsigned int ambientB = ambientRGBVal->B;
  2716   000E5E  EE20 F004          	lfsr	2,4
  2717   000E62  51DD               	movf	colorDetect@ambientRGBVal& (0+255),w,b
  2718   000E64  26D9               	addwf	fsr2l,f,c
  2719   000E66  51DE               	movf	(colorDetect@ambientRGBVal+1)& (0+255),w,b
  2720   000E68  22DA               	addwfc	fsr2h,f,c
  2721   000E6A  CFDE F124          	movff	postinc2,colorDetect@ambientB
  2722   000E6E  CFDD F125          	movff	postdec2,colorDetect@ambientB+1
  2723   000E72                     
  2724                           ; BSR set to: 0
  2725                           ;MazeRobot.X/color.c: 140:         float whiteR = whiteRGBVal->R;
  2726   000E72  C0DF  FFD9         	movff	colorDetect@whiteRGBVal,fsr2l
  2727   000E76  C0E0  FFDA         	movff	colorDetect@whiteRGBVal+1,fsr2h
  2728   000E7A  CFDE F0E5          	movff	postinc2,??_colorDetect
  2729   000E7E  CFDD F0E6          	movff	postdec2,??_colorDetect+1
  2730   000E82  C0E5  F005         	movff	??_colorDetect,___xxtofl@val
  2731   000E86  C0E6  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  2732   000E8A  6A07               	clrf	(___xxtofl@val+2)^0,c
  2733   000E8C  6A08               	clrf	(___xxtofl@val+3)^0,c
  2734   000E8E  0E00               	movlw	0
  2735   000E90  ECD0  F01D         	call	___xxtofl
  2736   000E94  C005  F114         	movff	?___xxtofl,colorDetect@whiteR
  2737   000E98  C006  F115         	movff	?___xxtofl+1,colorDetect@whiteR+1
  2738   000E9C  C007  F116         	movff	?___xxtofl+2,colorDetect@whiteR+2
  2739   000EA0  C008  F117         	movff	?___xxtofl+3,colorDetect@whiteR+3
  2740   000EA4                     
  2741                           ;MazeRobot.X/color.c: 141:         float whiteG = whiteRGBVal->G;
  2742   000EA4  0100               	movlb	0	; () banked
  2743   000EA6  EE20 F002          	lfsr	2,2
  2744   000EAA  51DF               	movf	colorDetect@whiteRGBVal& (0+255),w,b
  2745   000EAC  26D9               	addwf	fsr2l,f,c
  2746   000EAE  51E0               	movf	(colorDetect@whiteRGBVal+1)& (0+255),w,b
  2747   000EB0  22DA               	addwfc	fsr2h,f,c
  2748   000EB2  CFDE F0E5          	movff	postinc2,??_colorDetect
  2749   000EB6  CFDD F0E6          	movff	postdec2,??_colorDetect+1
  2750   000EBA  C0E5  F005         	movff	??_colorDetect,___xxtofl@val
  2751   000EBE  C0E6  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  2752   000EC2  6A07               	clrf	(___xxtofl@val+2)^0,c
  2753   000EC4  6A08               	clrf	(___xxtofl@val+3)^0,c
  2754   000EC6  0E00               	movlw	0
  2755   000EC8  ECD0  F01D         	call	___xxtofl
  2756   000ECC  C005  F118         	movff	?___xxtofl,colorDetect@whiteG
  2757   000ED0  C006  F119         	movff	?___xxtofl+1,colorDetect@whiteG+1
  2758   000ED4  C007  F11A         	movff	?___xxtofl+2,colorDetect@whiteG+2
  2759   000ED8  C008  F11B         	movff	?___xxtofl+3,colorDetect@whiteG+3
  2760   000EDC                     
  2761                           ;MazeRobot.X/color.c: 142:         float whiteB = whiteRGBVal->B;
  2762   000EDC  0100               	movlb	0	; () banked
  2763   000EDE  EE20 F004          	lfsr	2,4
  2764   000EE2  51DF               	movf	colorDetect@whiteRGBVal& (0+255),w,b
  2765   000EE4  26D9               	addwf	fsr2l,f,c
  2766   000EE6  51E0               	movf	(colorDetect@whiteRGBVal+1)& (0+255),w,b
  2767   000EE8  22DA               	addwfc	fsr2h,f,c
  2768   000EEA  CFDE F0E5          	movff	postinc2,??_colorDetect
  2769   000EEE  CFDD F0E6          	movff	postdec2,??_colorDetect+1
  2770   000EF2  C0E5  F005         	movff	??_colorDetect,___xxtofl@val
  2771   000EF6  C0E6  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  2772   000EFA  6A07               	clrf	(___xxtofl@val+2)^0,c
  2773   000EFC  6A08               	clrf	(___xxtofl@val+3)^0,c
  2774   000EFE  0E00               	movlw	0
  2775   000F00  ECD0  F01D         	call	___xxtofl
  2776   000F04  C005  F11C         	movff	?___xxtofl,colorDetect@whiteB
  2777   000F08  C006  F11D         	movff	?___xxtofl+1,colorDetect@whiteB+1
  2778   000F0C  C007  F11E         	movff	?___xxtofl+2,colorDetect@whiteB+2
  2779   000F10  C008  F11F         	movff	?___xxtofl+3,colorDetect@whiteB+3
  2780   000F14  0100               	movlb	0	; () banked
  2781   000F16  EE20 F006          	lfsr	2,6
  2782   000F1A  51DF               	movf	colorDetect@whiteRGBVal& (0+255),w,b
  2783   000F1C  26D9               	addwf	fsr2l,f,c
  2784   000F1E  51E0               	movf	(colorDetect@whiteRGBVal+1)& (0+255),w,b
  2785   000F20  22DA               	addwfc	fsr2h,f,c
  2786   000F22  CFDE F0E5          	movff	postinc2,??_colorDetect
  2787   000F26  CFDD F0E6          	movff	postdec2,??_colorDetect+1
  2788   000F2A  C0E5  F005         	movff	??_colorDetect,___xxtofl@val
  2789   000F2E  C0E6  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  2790   000F32  6A07               	clrf	(___xxtofl@val+2)^0,c
  2791   000F34  6A08               	clrf	(___xxtofl@val+3)^0,c
  2792   000F36  0E00               	movlw	0
  2793   000F38  ECD0  F01D         	call	___xxtofl
  2794   000F3C                     
  2795                           ;MazeRobot.X/color.c: 145:         float redPrint = (RGBVal.R-ambientR)/((whiteR-(float)
      +                          ambientR)*(clearRef));
  2796   000F3C  0101               	movlb	1	; () banked
  2797   000F3E  5120               	movf	colorDetect@ambientR& (0+255),w,b
  2798   000F40  5D26               	subwf	colorDetect@RGBVal& (0+255),w,b
  2799   000F42  0100               	movlb	0	; () banked
  2800   000F44  6FE5               	movwf	??_colorDetect& (0+255),b
  2801   000F46  0101               	movlb	1	; () banked
  2802   000F48  5121               	movf	(colorDetect@ambientR+1)& (0+255),w,b
  2803   000F4A  5927               	subwfb	(colorDetect@RGBVal+1)& (0+255),w,b
  2804   000F4C  0100               	movlb	0	; () banked
  2805   000F4E  6FE6               	movwf	(??_colorDetect+1)& (0+255),b
  2806   000F50  C0E5  F005         	movff	??_colorDetect,___xxtofl@val
  2807   000F54  C0E6  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  2808   000F58  6A07               	clrf	(___xxtofl@val+2)^0,c
  2809   000F5A  6A08               	clrf	(___xxtofl@val+3)^0,c
  2810   000F5C  0E00               	movlw	0
  2811   000F5E  ECD0  F01D         	call	___xxtofl
  2812   000F62  C005  F036         	movff	?___xxtofl,___fldiv@b
  2813   000F66  C006  F037         	movff	?___xxtofl+1,___fldiv@b+1
  2814   000F6A  C007  F038         	movff	?___xxtofl+2,___fldiv@b+2
  2815   000F6E  C008  F039         	movff	?___xxtofl+3,___fldiv@b+3
  2816   000F72  C0D9  F021         	movff	colorDetect@clearRef,___flmul@a
  2817   000F76  C0DA  F022         	movff	colorDetect@clearRef+1,___flmul@a+1
  2818   000F7A  C0DB  F023         	movff	colorDetect@clearRef+2,___flmul@a+2
  2819   000F7E  C0DC  F024         	movff	colorDetect@clearRef+3,___flmul@a+3
  2820   000F82  C120  F005         	movff	colorDetect@ambientR,___xxtofl@val
  2821   000F86  C121  F006         	movff	colorDetect@ambientR+1,___xxtofl@val+1
  2822   000F8A  6A07               	clrf	(___xxtofl@val+2)^0,c
  2823   000F8C  6A08               	clrf	(___xxtofl@val+3)^0,c
  2824   000F8E  0E00               	movlw	0
  2825   000F90  ECD0  F01D         	call	___xxtofl
  2826   000F94  C005  F019         	movff	?___xxtofl,___flsub@a
  2827   000F98  C006  F01A         	movff	?___xxtofl+1,___flsub@a+1
  2828   000F9C  C007  F01B         	movff	?___xxtofl+2,___flsub@a+2
  2829   000FA0  C008  F01C         	movff	?___xxtofl+3,___flsub@a+3
  2830   000FA4  C114  F015         	movff	colorDetect@whiteR,___flsub@b
  2831   000FA8  C115  F016         	movff	colorDetect@whiteR+1,___flsub@b+1
  2832   000FAC  C116  F017         	movff	colorDetect@whiteR+2,___flsub@b+2
  2833   000FB0  C117  F018         	movff	colorDetect@whiteR+3,___flsub@b+3
  2834   000FB4  EC92  F02B         	call	___flsub	;wreg free
  2835   000FB8  C015  F01D         	movff	?___flsub,___flmul@b
  2836   000FBC  C016  F01E         	movff	?___flsub+1,___flmul@b+1
  2837   000FC0  C017  F01F         	movff	?___flsub+2,___flmul@b+2
  2838   000FC4  C018  F020         	movff	?___flsub+3,___flmul@b+3
  2839   000FC8  EC88  F014         	call	___flmul	;wreg free
  2840   000FCC  C01D  F03A         	movff	?___flmul,___fldiv@a
  2841   000FD0  C01E  F03B         	movff	?___flmul+1,___fldiv@a+1
  2842   000FD4  C01F  F03C         	movff	?___flmul+2,___fldiv@a+2
  2843   000FD8  C020  F03D         	movff	?___flmul+3,___fldiv@a+3
  2844   000FDC  EC9D  F016         	call	___fldiv	;wreg free
  2845   000FE0  C036  F12E         	movff	?___fldiv,colorDetect@redPrint
  2846   000FE4  C037  F12F         	movff	?___fldiv+1,colorDetect@redPrint+1
  2847   000FE8  C038  F130         	movff	?___fldiv+2,colorDetect@redPrint+2
  2848   000FEC  C039  F131         	movff	?___fldiv+3,colorDetect@redPrint+3
  2849   000FF0                     
  2850                           ;MazeRobot.X/color.c: 146:         float greenPrint = (RGBVal.G-ambientG)/((whiteG-(floa
      +                          t)ambientG)*(clearRef));
  2851   000FF0  0101               	movlb	1	; () banked
  2852   000FF2  5122               	movf	colorDetect@ambientG& (0+255),w,b
  2853   000FF4  5D28               	subwf	(colorDetect@RGBVal+2)& (0+255),w,b
  2854   000FF6  0100               	movlb	0	; () banked
  2855   000FF8  6FE5               	movwf	??_colorDetect& (0+255),b
  2856   000FFA  0101               	movlb	1	; () banked
  2857   000FFC  5123               	movf	(colorDetect@ambientG+1)& (0+255),w,b
  2858   000FFE  5929               	subwfb	(colorDetect@RGBVal+3)& (0+255),w,b
  2859   001000  0100               	movlb	0	; () banked
  2860   001002  6FE6               	movwf	(??_colorDetect+1)& (0+255),b
  2861   001004  C0E5  F005         	movff	??_colorDetect,___xxtofl@val
  2862   001008  C0E6  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  2863   00100C  6A07               	clrf	(___xxtofl@val+2)^0,c
  2864   00100E  6A08               	clrf	(___xxtofl@val+3)^0,c
  2865   001010  0E00               	movlw	0
  2866   001012  ECD0  F01D         	call	___xxtofl
  2867   001016  C005  F036         	movff	?___xxtofl,___fldiv@b
  2868   00101A  C006  F037         	movff	?___xxtofl+1,___fldiv@b+1
  2869   00101E  C007  F038         	movff	?___xxtofl+2,___fldiv@b+2
  2870   001022  C008  F039         	movff	?___xxtofl+3,___fldiv@b+3
  2871   001026  C0D9  F021         	movff	colorDetect@clearRef,___flmul@a
  2872   00102A  C0DA  F022         	movff	colorDetect@clearRef+1,___flmul@a+1
  2873   00102E  C0DB  F023         	movff	colorDetect@clearRef+2,___flmul@a+2
  2874   001032  C0DC  F024         	movff	colorDetect@clearRef+3,___flmul@a+3
  2875   001036  C122  F005         	movff	colorDetect@ambientG,___xxtofl@val
  2876   00103A  C123  F006         	movff	colorDetect@ambientG+1,___xxtofl@val+1
  2877   00103E  6A07               	clrf	(___xxtofl@val+2)^0,c
  2878   001040  6A08               	clrf	(___xxtofl@val+3)^0,c
  2879   001042  0E00               	movlw	0
  2880   001044  ECD0  F01D         	call	___xxtofl
  2881   001048  C005  F019         	movff	?___xxtofl,___flsub@a
  2882   00104C  C006  F01A         	movff	?___xxtofl+1,___flsub@a+1
  2883   001050  C007  F01B         	movff	?___xxtofl+2,___flsub@a+2
  2884   001054  C008  F01C         	movff	?___xxtofl+3,___flsub@a+3
  2885   001058  C118  F015         	movff	colorDetect@whiteG,___flsub@b
  2886   00105C  C119  F016         	movff	colorDetect@whiteG+1,___flsub@b+1
  2887   001060  C11A  F017         	movff	colorDetect@whiteG+2,___flsub@b+2
  2888   001064  C11B  F018         	movff	colorDetect@whiteG+3,___flsub@b+3
  2889   001068  EC92  F02B         	call	___flsub	;wreg free
  2890   00106C  C015  F01D         	movff	?___flsub,___flmul@b
  2891   001070  C016  F01E         	movff	?___flsub+1,___flmul@b+1
  2892   001074  C017  F01F         	movff	?___flsub+2,___flmul@b+2
  2893   001078  C018  F020         	movff	?___flsub+3,___flmul@b+3
  2894   00107C  EC88  F014         	call	___flmul	;wreg free
  2895   001080  C01D  F03A         	movff	?___flmul,___fldiv@a
  2896   001084  C01E  F03B         	movff	?___flmul+1,___fldiv@a+1
  2897   001088  C01F  F03C         	movff	?___flmul+2,___fldiv@a+2
  2898   00108C  C020  F03D         	movff	?___flmul+3,___fldiv@a+3
  2899   001090  EC9D  F016         	call	___fldiv	;wreg free
  2900   001094  C036  F132         	movff	?___fldiv,colorDetect@greenPrint
  2901   001098  C037  F133         	movff	?___fldiv+1,colorDetect@greenPrint+1
  2902   00109C  C038  F134         	movff	?___fldiv+2,colorDetect@greenPrint+2
  2903   0010A0  C039  F135         	movff	?___fldiv+3,colorDetect@greenPrint+3
  2904   0010A4                     
  2905                           ;MazeRobot.X/color.c: 147:         float bluePrint = (RGBVal.B-ambientB)/((whiteB-(float
      +                          )ambientB)*(clearRef));
  2906   0010A4  0101               	movlb	1	; () banked
  2907   0010A6  5124               	movf	colorDetect@ambientB& (0+255),w,b
  2908   0010A8  5D2A               	subwf	(colorDetect@RGBVal+4)& (0+255),w,b
  2909   0010AA  0100               	movlb	0	; () banked
  2910   0010AC  6FE5               	movwf	??_colorDetect& (0+255),b
  2911   0010AE  0101               	movlb	1	; () banked
  2912   0010B0  5125               	movf	(colorDetect@ambientB+1)& (0+255),w,b
  2913   0010B2  592B               	subwfb	(colorDetect@RGBVal+5)& (0+255),w,b
  2914   0010B4  0100               	movlb	0	; () banked
  2915   0010B6  6FE6               	movwf	(??_colorDetect+1)& (0+255),b
  2916   0010B8  C0E5  F005         	movff	??_colorDetect,___xxtofl@val
  2917   0010BC  C0E6  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  2918   0010C0  6A07               	clrf	(___xxtofl@val+2)^0,c
  2919   0010C2  6A08               	clrf	(___xxtofl@val+3)^0,c
  2920   0010C4  0E00               	movlw	0
  2921   0010C6  ECD0  F01D         	call	___xxtofl
  2922   0010CA  C005  F036         	movff	?___xxtofl,___fldiv@b
  2923   0010CE  C006  F037         	movff	?___xxtofl+1,___fldiv@b+1
  2924   0010D2  C007  F038         	movff	?___xxtofl+2,___fldiv@b+2
  2925   0010D6  C008  F039         	movff	?___xxtofl+3,___fldiv@b+3
  2926   0010DA  C0D9  F021         	movff	colorDetect@clearRef,___flmul@a
  2927   0010DE  C0DA  F022         	movff	colorDetect@clearRef+1,___flmul@a+1
  2928   0010E2  C0DB  F023         	movff	colorDetect@clearRef+2,___flmul@a+2
  2929   0010E6  C0DC  F024         	movff	colorDetect@clearRef+3,___flmul@a+3
  2930   0010EA  C124  F005         	movff	colorDetect@ambientB,___xxtofl@val
  2931   0010EE  C125  F006         	movff	colorDetect@ambientB+1,___xxtofl@val+1
  2932   0010F2  6A07               	clrf	(___xxtofl@val+2)^0,c
  2933   0010F4  6A08               	clrf	(___xxtofl@val+3)^0,c
  2934   0010F6  0E00               	movlw	0
  2935   0010F8  ECD0  F01D         	call	___xxtofl
  2936   0010FC  C005  F019         	movff	?___xxtofl,___flsub@a
  2937   001100  C006  F01A         	movff	?___xxtofl+1,___flsub@a+1
  2938   001104  C007  F01B         	movff	?___xxtofl+2,___flsub@a+2
  2939   001108  C008  F01C         	movff	?___xxtofl+3,___flsub@a+3
  2940   00110C  C11C  F015         	movff	colorDetect@whiteB,___flsub@b
  2941   001110  C11D  F016         	movff	colorDetect@whiteB+1,___flsub@b+1
  2942   001114  C11E  F017         	movff	colorDetect@whiteB+2,___flsub@b+2
  2943   001118  C11F  F018         	movff	colorDetect@whiteB+3,___flsub@b+3
  2944   00111C  EC92  F02B         	call	___flsub	;wreg free
  2945   001120  C015  F01D         	movff	?___flsub,___flmul@b
  2946   001124  C016  F01E         	movff	?___flsub+1,___flmul@b+1
  2947   001128  C017  F01F         	movff	?___flsub+2,___flmul@b+2
  2948   00112C  C018  F020         	movff	?___flsub+3,___flmul@b+3
  2949   001130  EC88  F014         	call	___flmul	;wreg free
  2950   001134  C01D  F03A         	movff	?___flmul,___fldiv@a
  2951   001138  C01E  F03B         	movff	?___flmul+1,___fldiv@a+1
  2952   00113C  C01F  F03C         	movff	?___flmul+2,___fldiv@a+2
  2953   001140  C020  F03D         	movff	?___flmul+3,___fldiv@a+3
  2954   001144  EC9D  F016         	call	___fldiv	;wreg free
  2955   001148  C036  F136         	movff	?___fldiv,colorDetect@bluePrint
  2956   00114C  C037  F137         	movff	?___fldiv+1,colorDetect@bluePrint+1
  2957   001150  C038  F138         	movff	?___fldiv+2,colorDetect@bluePrint+2
  2958   001154  C039  F139         	movff	?___fldiv+3,colorDetect@bluePrint+3
  2959   001158                     
  2960                           ;MazeRobot.X/color.c: 149:         char string1[20];;MazeRobot.X/color.c: 150:         _
      +                          delay((unsigned long)((2)*(64000000/4000.0)));
  2961   001158  0E2A               	movlw	42
  2962   00115A  0100               	movlb	0	; () banked
  2963   00115C  6FE5               	movwf	??_colorDetect& (0+255),b
  2964   00115E  0E8D               	movlw	141
  2965   001160                     u7257:
  2966   001160  2EE8               	decfsz	wreg,f,c
  2967   001162  D7FE               	bra	u7257
  2968   001164  2FE5               	decfsz	??_colorDetect& (0+255),f,b
  2969   001166  D7FC               	bra	u7257
  2970   001168  D000               	nop2	
  2971   00116A                     
  2972                           ;MazeRobot.X/color.c: 151:         sprintf(string1,"R: %f G: %f B:%f \r",redPrint,greenP
      +                          rint,bluePrint);
  2973   00116A  0E00               	movlw	low colorDetect@string1
  2974   00116C  0100               	movlb	0	; () banked
  2975   00116E  6FBC               	movwf	sprintf@s& (0+255),b
  2976   001170  0E01               	movlw	high colorDetect@string1
  2977   001172  6FBD               	movwf	(sprintf@s+1)& (0+255),b
  2978   001174  0E01               	movlw	low STR_1
  2979   001176  6FBE               	movwf	sprintf@fmt& (0+255),b
  2980   001178  0E0E               	movlw	high STR_1
  2981   00117A  6FBF               	movwf	(sprintf@fmt+1)& (0+255),b
  2982   00117C  C12E  F0C0         	movff	colorDetect@redPrint,?_sprintf+4
  2983   001180  C12F  F0C1         	movff	colorDetect@redPrint+1,?_sprintf+5
  2984   001184  C130  F0C2         	movff	colorDetect@redPrint+2,?_sprintf+6
  2985   001188  C131  F0C3         	movff	colorDetect@redPrint+3,?_sprintf+7
  2986   00118C  C132  F0C4         	movff	colorDetect@greenPrint,?_sprintf+8
  2987   001190  C133  F0C5         	movff	colorDetect@greenPrint+1,?_sprintf+9
  2988   001194  C134  F0C6         	movff	colorDetect@greenPrint+2,?_sprintf+10
  2989   001198  C135  F0C7         	movff	colorDetect@greenPrint+3,?_sprintf+11
  2990   00119C  C136  F0C8         	movff	colorDetect@bluePrint,?_sprintf+12
  2991   0011A0  C137  F0C9         	movff	colorDetect@bluePrint+1,?_sprintf+13
  2992   0011A4  C138  F0CA         	movff	colorDetect@bluePrint+2,?_sprintf+14
  2993   0011A8  C139  F0CB         	movff	colorDetect@bluePrint+3,?_sprintf+15
  2994   0011AC  ECA1  F02A         	call	_sprintf	;wreg free
  2995   0011B0                     
  2996                           ;MazeRobot.X/color.c: 152:         TxBufferedString(string1);
  2997   0011B0  0E00               	movlw	low colorDetect@string1
  2998   0011B2  6E06               	movwf	TxBufferedString@string^0,c
  2999   0011B4  0E01               	movlw	high colorDetect@string1
  3000   0011B6  6E07               	movwf	(TxBufferedString@string+1)^0,c
  3001   0011B8  EC70  F02C         	call	_TxBufferedString	;wreg free
  3002   0011BC                     
  3003                           ;MazeRobot.X/color.c: 153:         sendTxBuf();
  3004   0011BC  EC2B  F02D         	call	_sendTxBuf	;wreg free
  3005   0011C0                     
  3006                           ;MazeRobot.X/color.c: 154:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3007   0011C0  0E2A               	movlw	42
  3008   0011C2  0100               	movlb	0	; () banked
  3009   0011C4  6FE5               	movwf	??_colorDetect& (0+255),b
  3010   0011C6  0E8D               	movlw	141
  3011   0011C8                     u7267:
  3012   0011C8  2EE8               	decfsz	wreg,f,c
  3013   0011CA  D7FE               	bra	u7267
  3014   0011CC  2FE5               	decfsz	??_colorDetect& (0+255),f,b
  3015   0011CE  D7FC               	bra	u7267
  3016   0011D0  D000               	nop2	
  3017   0011D2                     
  3018                           ;MazeRobot.X/color.c: 156:         if ((redPrint < 0) | (redPrint > 2)) { redPrint = 0.0
      +                          ;}
  3019   0011D2  0101               	movlb	1	; () banked
  3020   0011D4  BF31               	btfsc	(colorDetect@redPrint+3)& (0+255),7,b
  3021   0011D6  EFEF  F008         	goto	u6671
  3022   0011DA  EFF1  F008         	goto	u6670
  3023   0011DE                     u6671:
  3024   0011DE  EF0A  F009         	goto	l6007
  3025   0011E2                     u6670:
  3026   0011E2                     
  3027                           ; BSR set to: 1
  3028   0011E2  0E00               	movlw	0
  3029   0011E4  6E36               	movwf	___flge@ff1^0,c
  3030   0011E6  0E00               	movlw	0
  3031   0011E8  6E37               	movwf	(___flge@ff1+1)^0,c
  3032   0011EA  0E00               	movlw	0
  3033   0011EC  6E38               	movwf	(___flge@ff1+2)^0,c
  3034   0011EE  0E40               	movlw	64
  3035   0011F0  6E39               	movwf	(___flge@ff1+3)^0,c
  3036   0011F2  C12E  F03A         	movff	colorDetect@redPrint,___flge@ff2
  3037   0011F6  C12F  F03B         	movff	colorDetect@redPrint+1,___flge@ff2+1
  3038   0011FA  C130  F03C         	movff	colorDetect@redPrint+2,___flge@ff2+2
  3039   0011FE  C131  F03D         	movff	colorDetect@redPrint+3,___flge@ff2+3
  3040   001202  EC73  F024         	call	___flge	;wreg free
  3041   001206  B0D8               	btfsc	status,0,c
  3042   001208  EF08  F009         	goto	u6681
  3043   00120C  EF0A  F009         	goto	u6680
  3044   001210                     u6681:
  3045   001210  EF13  F009         	goto	l6009
  3046   001214                     u6680:
  3047   001214                     l6007:
  3048   001214  0E00               	movlw	0
  3049   001216  0101               	movlb	1	; () banked
  3050   001218  6F2E               	movwf	colorDetect@redPrint& (0+255),b
  3051   00121A  0E00               	movlw	0
  3052   00121C  6F2F               	movwf	(colorDetect@redPrint+1)& (0+255),b
  3053   00121E  0E00               	movlw	0
  3054   001220  6F30               	movwf	(colorDetect@redPrint+2)& (0+255),b
  3055   001222  0E00               	movlw	0
  3056   001224  6F31               	movwf	(colorDetect@redPrint+3)& (0+255),b
  3057   001226                     l6009:
  3058                           
  3059                           ;MazeRobot.X/color.c: 157:         if ((greenPrint < 0) | (greenPrint > 2)) {greenPrint 
      +                          = 0.0;}
  3060   001226  0101               	movlb	1	; () banked
  3061   001228  BF35               	btfsc	(colorDetect@greenPrint+3)& (0+255),7,b
  3062   00122A  EF19  F009         	goto	u6691
  3063   00122E  EF1B  F009         	goto	u6690
  3064   001232                     u6691:
  3065   001232  EF34  F009         	goto	l6013
  3066   001236                     u6690:
  3067   001236                     
  3068                           ; BSR set to: 1
  3069   001236  0E00               	movlw	0
  3070   001238  6E36               	movwf	___flge@ff1^0,c
  3071   00123A  0E00               	movlw	0
  3072   00123C  6E37               	movwf	(___flge@ff1+1)^0,c
  3073   00123E  0E00               	movlw	0
  3074   001240  6E38               	movwf	(___flge@ff1+2)^0,c
  3075   001242  0E40               	movlw	64
  3076   001244  6E39               	movwf	(___flge@ff1+3)^0,c
  3077   001246  C132  F03A         	movff	colorDetect@greenPrint,___flge@ff2
  3078   00124A  C133  F03B         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  3079   00124E  C134  F03C         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  3080   001252  C135  F03D         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  3081   001256  EC73  F024         	call	___flge	;wreg free
  3082   00125A  B0D8               	btfsc	status,0,c
  3083   00125C  EF32  F009         	goto	u6701
  3084   001260  EF34  F009         	goto	u6700
  3085   001264                     u6701:
  3086   001264  EF3D  F009         	goto	l6015
  3087   001268                     u6700:
  3088   001268                     l6013:
  3089   001268  0E00               	movlw	0
  3090   00126A  0101               	movlb	1	; () banked
  3091   00126C  6F32               	movwf	colorDetect@greenPrint& (0+255),b
  3092   00126E  0E00               	movlw	0
  3093   001270  6F33               	movwf	(colorDetect@greenPrint+1)& (0+255),b
  3094   001272  0E00               	movlw	0
  3095   001274  6F34               	movwf	(colorDetect@greenPrint+2)& (0+255),b
  3096   001276  0E00               	movlw	0
  3097   001278  6F35               	movwf	(colorDetect@greenPrint+3)& (0+255),b
  3098   00127A                     l6015:
  3099                           
  3100                           ;MazeRobot.X/color.c: 158:         if ((bluePrint < 0) | (bluePrint > 2)){ bluePrint = 0
      +                          .0;}
  3101   00127A  0101               	movlb	1	; () banked
  3102   00127C  BF39               	btfsc	(colorDetect@bluePrint+3)& (0+255),7,b
  3103   00127E  EF43  F009         	goto	u6711
  3104   001282  EF45  F009         	goto	u6710
  3105   001286                     u6711:
  3106   001286  EF5E  F009         	goto	l6019
  3107   00128A                     u6710:
  3108   00128A                     
  3109                           ; BSR set to: 1
  3110   00128A  0E00               	movlw	0
  3111   00128C  6E36               	movwf	___flge@ff1^0,c
  3112   00128E  0E00               	movlw	0
  3113   001290  6E37               	movwf	(___flge@ff1+1)^0,c
  3114   001292  0E00               	movlw	0
  3115   001294  6E38               	movwf	(___flge@ff1+2)^0,c
  3116   001296  0E40               	movlw	64
  3117   001298  6E39               	movwf	(___flge@ff1+3)^0,c
  3118   00129A  C136  F03A         	movff	colorDetect@bluePrint,___flge@ff2
  3119   00129E  C137  F03B         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  3120   0012A2  C138  F03C         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  3121   0012A6  C139  F03D         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  3122   0012AA  EC73  F024         	call	___flge	;wreg free
  3123   0012AE  B0D8               	btfsc	status,0,c
  3124   0012B0  EF5C  F009         	goto	u6721
  3125   0012B4  EF5E  F009         	goto	u6720
  3126   0012B8                     u6721:
  3127   0012B8  EF67  F009         	goto	l6021
  3128   0012BC                     u6720:
  3129   0012BC                     l6019:
  3130   0012BC  0E00               	movlw	0
  3131   0012BE  0101               	movlb	1	; () banked
  3132   0012C0  6F36               	movwf	colorDetect@bluePrint& (0+255),b
  3133   0012C2  0E00               	movlw	0
  3134   0012C4  6F37               	movwf	(colorDetect@bluePrint+1)& (0+255),b
  3135   0012C6  0E00               	movlw	0
  3136   0012C8  6F38               	movwf	(colorDetect@bluePrint+2)& (0+255),b
  3137   0012CA  0E00               	movlw	0
  3138   0012CC  6F39               	movwf	(colorDetect@bluePrint+3)& (0+255),b
  3139   0012CE                     l6021:
  3140                           
  3141                           ;MazeRobot.X/color.c: 161:         if ((redPrint > 0.9) & (greenPrint > 0.9) & (bluePrin
      +                          t > 0.9)){
  3142   0012CE  0E66               	movlw	102
  3143   0012D0  6E36               	movwf	___flge@ff1^0,c
  3144   0012D2  0E66               	movlw	102
  3145   0012D4  6E37               	movwf	(___flge@ff1+1)^0,c
  3146   0012D6  0E66               	movlw	102
  3147   0012D8  6E38               	movwf	(___flge@ff1+2)^0,c
  3148   0012DA  0E3F               	movlw	63
  3149   0012DC  6E39               	movwf	(___flge@ff1+3)^0,c
  3150   0012DE  C12E  F03A         	movff	colorDetect@redPrint,___flge@ff2
  3151   0012E2  C12F  F03B         	movff	colorDetect@redPrint+1,___flge@ff2+1
  3152   0012E6  C130  F03C         	movff	colorDetect@redPrint+2,___flge@ff2+2
  3153   0012EA  C131  F03D         	movff	colorDetect@redPrint+3,___flge@ff2+3
  3154   0012EE  EC73  F024         	call	___flge	;wreg free
  3155   0012F2  B0D8               	btfsc	status,0,c
  3156   0012F4  EF7E  F009         	goto	u6731
  3157   0012F8  EF80  F009         	goto	u6730
  3158   0012FC                     u6731:
  3159   0012FC  EFC4  F009         	goto	l6029
  3160   001300                     u6730:
  3161   001300  0E66               	movlw	102
  3162   001302  6E36               	movwf	___flge@ff1^0,c
  3163   001304  0E66               	movlw	102
  3164   001306  6E37               	movwf	(___flge@ff1+1)^0,c
  3165   001308  0E66               	movlw	102
  3166   00130A  6E38               	movwf	(___flge@ff1+2)^0,c
  3167   00130C  0E3F               	movlw	63
  3168   00130E  6E39               	movwf	(___flge@ff1+3)^0,c
  3169   001310  C132  F03A         	movff	colorDetect@greenPrint,___flge@ff2
  3170   001314  C133  F03B         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  3171   001318  C134  F03C         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  3172   00131C  C135  F03D         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  3173   001320  EC73  F024         	call	___flge	;wreg free
  3174   001324  B0D8               	btfsc	status,0,c
  3175   001326  EF97  F009         	goto	u6741
  3176   00132A  EF99  F009         	goto	u6740
  3177   00132E                     u6741:
  3178   00132E  EFC4  F009         	goto	l6029
  3179   001332                     u6740:
  3180   001332  0E66               	movlw	102
  3181   001334  6E36               	movwf	___flge@ff1^0,c
  3182   001336  0E66               	movlw	102
  3183   001338  6E37               	movwf	(___flge@ff1+1)^0,c
  3184   00133A  0E66               	movlw	102
  3185   00133C  6E38               	movwf	(___flge@ff1+2)^0,c
  3186   00133E  0E3F               	movlw	63
  3187   001340  6E39               	movwf	(___flge@ff1+3)^0,c
  3188   001342  C136  F03A         	movff	colorDetect@bluePrint,___flge@ff2
  3189   001346  C137  F03B         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  3190   00134A  C138  F03C         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  3191   00134E  C139  F03D         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  3192   001352  EC73  F024         	call	___flge	;wreg free
  3193   001356  B0D8               	btfsc	status,0,c
  3194   001358  EFB0  F009         	goto	u6751
  3195   00135C  EFB2  F009         	goto	u6750
  3196   001360                     u6751:
  3197   001360  EFC4  F009         	goto	l6029
  3198   001364                     u6750:
  3199   001364                     
  3200                           ;MazeRobot.X/color.c: 162:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3201   001364  0E2A               	movlw	42
  3202   001366  0100               	movlb	0	; () banked
  3203   001368  6FE5               	movwf	??_colorDetect& (0+255),b
  3204   00136A  0E8D               	movlw	141
  3205   00136C                     u7277:
  3206   00136C  2EE8               	decfsz	wreg,f,c
  3207   00136E  D7FE               	bra	u7277
  3208   001370  2FE5               	decfsz	??_colorDetect& (0+255),f,b
  3209   001372  D7FC               	bra	u7277
  3210   001374  D000               	nop2	
  3211                           
  3212                           ;MazeRobot.X/color.c: 164:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3213   001376  0E2A               	movlw	42
  3214   001378  0100               	movlb	0	; () banked
  3215   00137A  6FE5               	movwf	??_colorDetect& (0+255),b
  3216   00137C  0E8D               	movlw	141
  3217   00137E                     u7287:
  3218   00137E  2EE8               	decfsz	wreg,f,c
  3219   001380  D7FE               	bra	u7287
  3220   001382  2FE5               	decfsz	??_colorDetect& (0+255),f,b
  3221   001384  D7FC               	bra	u7287
  3222   001386  D000               	nop2	
  3223   001388                     l6029:
  3224                           
  3225                           ;MazeRobot.X/color.c: 168:         if ((redPrint > 1.5) & (redPrint - greenPrint > 0.8) 
      +                          & (redPrint -bluePrint > 0.8)){
  3226   001388  0E00               	movlw	0
  3227   00138A  6E36               	movwf	___flge@ff1^0,c
  3228   00138C  0E00               	movlw	0
  3229   00138E  6E37               	movwf	(___flge@ff1+1)^0,c
  3230   001390  0EC0               	movlw	192
  3231   001392  6E38               	movwf	(___flge@ff1+2)^0,c
  3232   001394  0E3F               	movlw	63
  3233   001396  6E39               	movwf	(___flge@ff1+3)^0,c
  3234   001398  C12E  F03A         	movff	colorDetect@redPrint,___flge@ff2
  3235   00139C  C12F  F03B         	movff	colorDetect@redPrint+1,___flge@ff2+1
  3236   0013A0  C130  F03C         	movff	colorDetect@redPrint+2,___flge@ff2+2
  3237   0013A4  C131  F03D         	movff	colorDetect@redPrint+3,___flge@ff2+3
  3238   0013A8  EC73  F024         	call	___flge	;wreg free
  3239   0013AC  B0D8               	btfsc	status,0,c
  3240   0013AE  EFDB  F009         	goto	u6761
  3241   0013B2  EFDD  F009         	goto	u6760
  3242   0013B6                     u6761:
  3243   0013B6  EF46  F00A         	goto	l6039
  3244   0013BA                     u6760:
  3245   0013BA  0ECD               	movlw	205
  3246   0013BC  6E36               	movwf	___flge@ff1^0,c
  3247   0013BE  0ECC               	movlw	204
  3248   0013C0  6E37               	movwf	(___flge@ff1+1)^0,c
  3249   0013C2  0E4C               	movlw	76
  3250   0013C4  6E38               	movwf	(___flge@ff1+2)^0,c
  3251   0013C6  0E3F               	movlw	63
  3252   0013C8  6E39               	movwf	(___flge@ff1+3)^0,c
  3253   0013CA  C132  F019         	movff	colorDetect@greenPrint,___flsub@a
  3254   0013CE  C133  F01A         	movff	colorDetect@greenPrint+1,___flsub@a+1
  3255   0013D2  C134  F01B         	movff	colorDetect@greenPrint+2,___flsub@a+2
  3256   0013D6  C135  F01C         	movff	colorDetect@greenPrint+3,___flsub@a+3
  3257   0013DA  C12E  F015         	movff	colorDetect@redPrint,___flsub@b
  3258   0013DE  C12F  F016         	movff	colorDetect@redPrint+1,___flsub@b+1
  3259   0013E2  C130  F017         	movff	colorDetect@redPrint+2,___flsub@b+2
  3260   0013E6  C131  F018         	movff	colorDetect@redPrint+3,___flsub@b+3
  3261   0013EA  EC92  F02B         	call	___flsub	;wreg free
  3262   0013EE  C015  F03A         	movff	?___flsub,___flge@ff2
  3263   0013F2  C016  F03B         	movff	?___flsub+1,___flge@ff2+1
  3264   0013F6  C017  F03C         	movff	?___flsub+2,___flge@ff2+2
  3265   0013FA  C018  F03D         	movff	?___flsub+3,___flge@ff2+3
  3266   0013FE  EC73  F024         	call	___flge	;wreg free
  3267   001402  B0D8               	btfsc	status,0,c
  3268   001404  EF06  F00A         	goto	u6771
  3269   001408  EF08  F00A         	goto	u6770
  3270   00140C                     u6771:
  3271   00140C  EF46  F00A         	goto	l6039
  3272   001410                     u6770:
  3273   001410  0ECD               	movlw	205
  3274   001412  6E36               	movwf	___flge@ff1^0,c
  3275   001414  0ECC               	movlw	204
  3276   001416  6E37               	movwf	(___flge@ff1+1)^0,c
  3277   001418  0E4C               	movlw	76
  3278   00141A  6E38               	movwf	(___flge@ff1+2)^0,c
  3279   00141C  0E3F               	movlw	63
  3280   00141E  6E39               	movwf	(___flge@ff1+3)^0,c
  3281   001420  C136  F019         	movff	colorDetect@bluePrint,___flsub@a
  3282   001424  C137  F01A         	movff	colorDetect@bluePrint+1,___flsub@a+1
  3283   001428  C138  F01B         	movff	colorDetect@bluePrint+2,___flsub@a+2
  3284   00142C  C139  F01C         	movff	colorDetect@bluePrint+3,___flsub@a+3
  3285   001430  C12E  F015         	movff	colorDetect@redPrint,___flsub@b
  3286   001434  C12F  F016         	movff	colorDetect@redPrint+1,___flsub@b+1
  3287   001438  C130  F017         	movff	colorDetect@redPrint+2,___flsub@b+2
  3288   00143C  C131  F018         	movff	colorDetect@redPrint+3,___flsub@b+3
  3289   001440  EC92  F02B         	call	___flsub	;wreg free
  3290   001444  C015  F03A         	movff	?___flsub,___flge@ff2
  3291   001448  C016  F03B         	movff	?___flsub+1,___flge@ff2+1
  3292   00144C  C017  F03C         	movff	?___flsub+2,___flge@ff2+2
  3293   001450  C018  F03D         	movff	?___flsub+3,___flge@ff2+3
  3294   001454  EC73  F024         	call	___flge	;wreg free
  3295   001458  B0D8               	btfsc	status,0,c
  3296   00145A  EF31  F00A         	goto	u6781
  3297   00145E  EF33  F00A         	goto	u6780
  3298   001462                     u6781:
  3299   001462  EF46  F00A         	goto	l6039
  3300   001466                     u6780:
  3301   001466                     
  3302                           ;MazeRobot.X/color.c: 169:             turnRight_90(mL,mR);
  3303   001466  C0E1  F01E         	movff	colorDetect@mL,turnRight_90@mL
  3304   00146A  C0E2  F01F         	movff	colorDetect@mL+1,turnRight_90@mL+1
  3305   00146E  C0E3  F020         	movff	colorDetect@mR,turnRight_90@mR
  3306   001472  C0E4  F021         	movff	colorDetect@mR+1,turnRight_90@mR+1
  3307   001476  EC14  F022         	call	_turnRight_90	;wreg free
  3308   00147A                     
  3309                           ;MazeRobot.X/color.c: 170:             _delay((unsigned long)((2)*(64000000/4000.0)));
  3310   00147A  0E2A               	movlw	42
  3311   00147C  0100               	movlb	0	; () banked
  3312   00147E  6FE5               	movwf	??_colorDetect& (0+255),b
  3313   001480  0E8D               	movlw	141
  3314   001482                     u7297:
  3315   001482  2EE8               	decfsz	wreg,f,c
  3316   001484  D7FE               	bra	u7297
  3317   001486  2FE5               	decfsz	??_colorDetect& (0+255),f,b
  3318   001488  D7FC               	bra	u7297
  3319   00148A  D000               	nop2	
  3320   00148C                     l6039:
  3321                           
  3322                           ;MazeRobot.X/color.c: 174:         if ((redPrint > 1.3) & (greenPrint > 0.5) & (bluePrin
      +                          t > 0.5)){
  3323   00148C  0E66               	movlw	102
  3324   00148E  6E36               	movwf	___flge@ff1^0,c
  3325   001490  0E66               	movlw	102
  3326   001492  6E37               	movwf	(___flge@ff1+1)^0,c
  3327   001494  0EA6               	movlw	166
  3328   001496  6E38               	movwf	(___flge@ff1+2)^0,c
  3329   001498  0E3F               	movlw	63
  3330   00149A  6E39               	movwf	(___flge@ff1+3)^0,c
  3331   00149C  C12E  F03A         	movff	colorDetect@redPrint,___flge@ff2
  3332   0014A0  C12F  F03B         	movff	colorDetect@redPrint+1,___flge@ff2+1
  3333   0014A4  C130  F03C         	movff	colorDetect@redPrint+2,___flge@ff2+2
  3334   0014A8  C131  F03D         	movff	colorDetect@redPrint+3,___flge@ff2+3
  3335   0014AC  EC73  F024         	call	___flge	;wreg free
  3336   0014B0  B0D8               	btfsc	status,0,c
  3337   0014B2  EF5D  F00A         	goto	u6791
  3338   0014B6  EF5F  F00A         	goto	u6790
  3339   0014BA                     u6791:
  3340   0014BA  EFAD  F00A         	goto	l6051
  3341   0014BE                     u6790:
  3342   0014BE  0E00               	movlw	0
  3343   0014C0  6E36               	movwf	___flge@ff1^0,c
  3344   0014C2  0E00               	movlw	0
  3345   0014C4  6E37               	movwf	(___flge@ff1+1)^0,c
  3346   0014C6  0E00               	movlw	0
  3347   0014C8  6E38               	movwf	(___flge@ff1+2)^0,c
  3348   0014CA  0E3F               	movlw	63
  3349   0014CC  6E39               	movwf	(___flge@ff1+3)^0,c
  3350   0014CE  C132  F03A         	movff	colorDetect@greenPrint,___flge@ff2
  3351   0014D2  C133  F03B         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  3352   0014D6  C134  F03C         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  3353   0014DA  C135  F03D         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  3354   0014DE  EC73  F024         	call	___flge	;wreg free
  3355   0014E2  B0D8               	btfsc	status,0,c
  3356   0014E4  EF76  F00A         	goto	u6801
  3357   0014E8  EF78  F00A         	goto	u6800
  3358   0014EC                     u6801:
  3359   0014EC  EFAD  F00A         	goto	l6051
  3360   0014F0                     u6800:
  3361   0014F0  0E00               	movlw	0
  3362   0014F2  6E36               	movwf	___flge@ff1^0,c
  3363   0014F4  0E00               	movlw	0
  3364   0014F6  6E37               	movwf	(___flge@ff1+1)^0,c
  3365   0014F8  0E00               	movlw	0
  3366   0014FA  6E38               	movwf	(___flge@ff1+2)^0,c
  3367   0014FC  0E3F               	movlw	63
  3368   0014FE  6E39               	movwf	(___flge@ff1+3)^0,c
  3369   001500  C136  F03A         	movff	colorDetect@bluePrint,___flge@ff2
  3370   001504  C137  F03B         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  3371   001508  C138  F03C         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  3372   00150C  C139  F03D         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  3373   001510  EC73  F024         	call	___flge	;wreg free
  3374   001514  B0D8               	btfsc	status,0,c
  3375   001516  EF8F  F00A         	goto	u6811
  3376   00151A  EF91  F00A         	goto	u6810
  3377   00151E                     u6811:
  3378   00151E  EFAD  F00A         	goto	l6051
  3379   001522                     u6810:
  3380   001522                     
  3381                           ;MazeRobot.X/color.c: 175:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3382   001522  0E2A               	movlw	42
  3383   001524  0100               	movlb	0	; () banked
  3384   001526  6FE5               	movwf	??_colorDetect& (0+255),b
  3385   001528  0E8D               	movlw	141
  3386   00152A                     u7307:
  3387   00152A  2EE8               	decfsz	wreg,f,c
  3388   00152C  D7FE               	bra	u7307
  3389   00152E  2FE5               	decfsz	??_colorDetect& (0+255),f,b
  3390   001530  D7FC               	bra	u7307
  3391   001532  D000               	nop2	
  3392   001534                     
  3393                           ;MazeRobot.X/color.c: 176:         turnRight_135(mL,mR);
  3394   001534  C0E1  F01E         	movff	colorDetect@mL,turnRight_135@mL
  3395   001538  C0E2  F01F         	movff	colorDetect@mL+1,turnRight_135@mL+1
  3396   00153C  C0E3  F020         	movff	colorDetect@mR,turnRight_135@mR
  3397   001540  C0E4  F021         	movff	colorDetect@mR+1,turnRight_135@mR+1
  3398   001544  EC75  F021         	call	_turnRight_135	;wreg free
  3399   001548                     
  3400                           ;MazeRobot.X/color.c: 177:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3401   001548  0E2A               	movlw	42
  3402   00154A  0100               	movlb	0	; () banked
  3403   00154C  6FE5               	movwf	??_colorDetect& (0+255),b
  3404   00154E  0E8D               	movlw	141
  3405   001550                     u7317:
  3406   001550  2EE8               	decfsz	wreg,f,c
  3407   001552  D7FE               	bra	u7317
  3408   001554  2FE5               	decfsz	??_colorDetect& (0+255),f,b
  3409   001556  D7FC               	bra	u7317
  3410   001558  D000               	nop2	
  3411   00155A                     l6051:
  3412                           
  3413                           ;MazeRobot.X/color.c: 182:         if ((redPrint > 1.0) & (greenPrint > 0.8) & (bluePrin
      +                          t < 0.8)){
  3414   00155A  0E00               	movlw	0
  3415   00155C  6E36               	movwf	___flge@ff1^0,c
  3416   00155E  0E00               	movlw	0
  3417   001560  6E37               	movwf	(___flge@ff1+1)^0,c
  3418   001562  0E80               	movlw	128
  3419   001564  6E38               	movwf	(___flge@ff1+2)^0,c
  3420   001566  0E3F               	movlw	63
  3421   001568  6E39               	movwf	(___flge@ff1+3)^0,c
  3422   00156A  C12E  F03A         	movff	colorDetect@redPrint,___flge@ff2
  3423   00156E  C12F  F03B         	movff	colorDetect@redPrint+1,___flge@ff2+1
  3424   001572  C130  F03C         	movff	colorDetect@redPrint+2,___flge@ff2+2
  3425   001576  C131  F03D         	movff	colorDetect@redPrint+3,___flge@ff2+3
  3426   00157A  EC73  F024         	call	___flge	;wreg free
  3427   00157E  B0D8               	btfsc	status,0,c
  3428   001580  EFC4  F00A         	goto	u6821
  3429   001584  EFC6  F00A         	goto	u6820
  3430   001588                     u6821:
  3431   001588  EF14  F00B         	goto	l6063
  3432   00158C                     u6820:
  3433   00158C  0ECD               	movlw	205
  3434   00158E  6E36               	movwf	___flge@ff1^0,c
  3435   001590  0ECC               	movlw	204
  3436   001592  6E37               	movwf	(___flge@ff1+1)^0,c
  3437   001594  0E4C               	movlw	76
  3438   001596  6E38               	movwf	(___flge@ff1+2)^0,c
  3439   001598  0E3F               	movlw	63
  3440   00159A  6E39               	movwf	(___flge@ff1+3)^0,c
  3441   00159C  C132  F03A         	movff	colorDetect@greenPrint,___flge@ff2
  3442   0015A0  C133  F03B         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  3443   0015A4  C134  F03C         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  3444   0015A8  C135  F03D         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  3445   0015AC  EC73  F024         	call	___flge	;wreg free
  3446   0015B0  B0D8               	btfsc	status,0,c
  3447   0015B2  EFDD  F00A         	goto	u6831
  3448   0015B6  EFDF  F00A         	goto	u6830
  3449   0015BA                     u6831:
  3450   0015BA  EF14  F00B         	goto	l6063
  3451   0015BE                     u6830:
  3452   0015BE  C136  F036         	movff	colorDetect@bluePrint,___flge@ff1
  3453   0015C2  C137  F037         	movff	colorDetect@bluePrint+1,___flge@ff1+1
  3454   0015C6  C138  F038         	movff	colorDetect@bluePrint+2,___flge@ff1+2
  3455   0015CA  C139  F039         	movff	colorDetect@bluePrint+3,___flge@ff1+3
  3456   0015CE  0ECD               	movlw	205
  3457   0015D0  6E3A               	movwf	___flge@ff2^0,c
  3458   0015D2  0ECC               	movlw	204
  3459   0015D4  6E3B               	movwf	(___flge@ff2+1)^0,c
  3460   0015D6  0E4C               	movlw	76
  3461   0015D8  6E3C               	movwf	(___flge@ff2+2)^0,c
  3462   0015DA  0E3F               	movlw	63
  3463   0015DC  6E3D               	movwf	(___flge@ff2+3)^0,c
  3464   0015DE  EC73  F024         	call	___flge	;wreg free
  3465   0015E2  B0D8               	btfsc	status,0,c
  3466   0015E4  EFF6  F00A         	goto	u6841
  3467   0015E8  EFF8  F00A         	goto	u6840
  3468   0015EC                     u6841:
  3469   0015EC  EF14  F00B         	goto	l6063
  3470   0015F0                     u6840:
  3471   0015F0                     
  3472                           ;MazeRobot.X/color.c: 184:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3473   0015F0  0E2A               	movlw	42
  3474   0015F2  0100               	movlb	0	; () banked
  3475   0015F4  6FE5               	movwf	??_colorDetect& (0+255),b
  3476   0015F6  0E8D               	movlw	141
  3477   0015F8                     u7327:
  3478   0015F8  2EE8               	decfsz	wreg,f,c
  3479   0015FA  D7FE               	bra	u7327
  3480   0015FC  2FE5               	decfsz	??_colorDetect& (0+255),f,b
  3481   0015FE  D7FC               	bra	u7327
  3482   001600  D000               	nop2	
  3483   001602                     
  3484                           ;MazeRobot.X/color.c: 185:         reverseSquareRight(mL,mR);
  3485   001602  C0E1  F024         	movff	colorDetect@mL,reverseSquareRight@mL
  3486   001606  C0E2  F025         	movff	colorDetect@mL+1,reverseSquareRight@mL+1
  3487   00160A  C0E3  F026         	movff	colorDetect@mR,reverseSquareRight@mR
  3488   00160E  C0E4  F027         	movff	colorDetect@mR+1,reverseSquareRight@mR+1
  3489   001612  ECF0  F028         	call	_reverseSquareRight	;wreg free
  3490   001616                     
  3491                           ;MazeRobot.X/color.c: 186:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3492   001616  0E2A               	movlw	42
  3493   001618  0100               	movlb	0	; () banked
  3494   00161A  6FE5               	movwf	??_colorDetect& (0+255),b
  3495   00161C  0E8D               	movlw	141
  3496   00161E                     u7337:
  3497   00161E  2EE8               	decfsz	wreg,f,c
  3498   001620  D7FE               	bra	u7337
  3499   001622  2FE5               	decfsz	??_colorDetect& (0+255),f,b
  3500   001624  D7FC               	bra	u7337
  3501   001626  D000               	nop2	
  3502   001628                     l6063:
  3503                           
  3504                           ;MazeRobot.X/color.c: 190:         if ((bluePrint - redPrint > 0.7) & (bluePrint - green
      +                          Print > 0.3) & (bluePrint > 0.7 )){
  3505   001628  0E33               	movlw	51
  3506   00162A  6E36               	movwf	___flge@ff1^0,c
  3507   00162C  0E33               	movlw	51
  3508   00162E  6E37               	movwf	(___flge@ff1+1)^0,c
  3509   001630  0E33               	movlw	51
  3510   001632  6E38               	movwf	(___flge@ff1+2)^0,c
  3511   001634  0E3F               	movlw	63
  3512   001636  6E39               	movwf	(___flge@ff1+3)^0,c
  3513   001638  C12E  F019         	movff	colorDetect@redPrint,___flsub@a
  3514   00163C  C12F  F01A         	movff	colorDetect@redPrint+1,___flsub@a+1
  3515   001640  C130  F01B         	movff	colorDetect@redPrint+2,___flsub@a+2
  3516   001644  C131  F01C         	movff	colorDetect@redPrint+3,___flsub@a+3
  3517   001648  C136  F015         	movff	colorDetect@bluePrint,___flsub@b
  3518   00164C  C137  F016         	movff	colorDetect@bluePrint+1,___flsub@b+1
  3519   001650  C138  F017         	movff	colorDetect@bluePrint+2,___flsub@b+2
  3520   001654  C139  F018         	movff	colorDetect@bluePrint+3,___flsub@b+3
  3521   001658  EC92  F02B         	call	___flsub	;wreg free
  3522   00165C  C015  F03A         	movff	?___flsub,___flge@ff2
  3523   001660  C016  F03B         	movff	?___flsub+1,___flge@ff2+1
  3524   001664  C017  F03C         	movff	?___flsub+2,___flge@ff2+2
  3525   001668  C018  F03D         	movff	?___flsub+3,___flge@ff2+3
  3526   00166C  EC73  F024         	call	___flge	;wreg free
  3527   001670  B0D8               	btfsc	status,0,c
  3528   001672  EF3D  F00B         	goto	u6851
  3529   001676  EF3F  F00B         	goto	u6850
  3530   00167A                     u6851:
  3531   00167A  EF9F  F00B         	goto	l6075
  3532   00167E                     u6850:
  3533   00167E  0E9A               	movlw	154
  3534   001680  6E36               	movwf	___flge@ff1^0,c
  3535   001682  0E99               	movlw	153
  3536   001684  6E37               	movwf	(___flge@ff1+1)^0,c
  3537   001686  0E99               	movlw	153
  3538   001688  6E38               	movwf	(___flge@ff1+2)^0,c
  3539   00168A  0E3E               	movlw	62
  3540   00168C  6E39               	movwf	(___flge@ff1+3)^0,c
  3541   00168E  C132  F019         	movff	colorDetect@greenPrint,___flsub@a
  3542   001692  C133  F01A         	movff	colorDetect@greenPrint+1,___flsub@a+1
  3543   001696  C134  F01B         	movff	colorDetect@greenPrint+2,___flsub@a+2
  3544   00169A  C135  F01C         	movff	colorDetect@greenPrint+3,___flsub@a+3
  3545   00169E  C136  F015         	movff	colorDetect@bluePrint,___flsub@b
  3546   0016A2  C137  F016         	movff	colorDetect@bluePrint+1,___flsub@b+1
  3547   0016A6  C138  F017         	movff	colorDetect@bluePrint+2,___flsub@b+2
  3548   0016AA  C139  F018         	movff	colorDetect@bluePrint+3,___flsub@b+3
  3549   0016AE  EC92  F02B         	call	___flsub	;wreg free
  3550   0016B2  C015  F03A         	movff	?___flsub,___flge@ff2
  3551   0016B6  C016  F03B         	movff	?___flsub+1,___flge@ff2+1
  3552   0016BA  C017  F03C         	movff	?___flsub+2,___flge@ff2+2
  3553   0016BE  C018  F03D         	movff	?___flsub+3,___flge@ff2+3
  3554   0016C2  EC73  F024         	call	___flge	;wreg free
  3555   0016C6  B0D8               	btfsc	status,0,c
  3556   0016C8  EF68  F00B         	goto	u6861
  3557   0016CC  EF6A  F00B         	goto	u6860
  3558   0016D0                     u6861:
  3559   0016D0  EF9F  F00B         	goto	l6075
  3560   0016D4                     u6860:
  3561   0016D4  0E33               	movlw	51
  3562   0016D6  6E36               	movwf	___flge@ff1^0,c
  3563   0016D8  0E33               	movlw	51
  3564   0016DA  6E37               	movwf	(___flge@ff1+1)^0,c
  3565   0016DC  0E33               	movlw	51
  3566   0016DE  6E38               	movwf	(___flge@ff1+2)^0,c
  3567   0016E0  0E3F               	movlw	63
  3568   0016E2  6E39               	movwf	(___flge@ff1+3)^0,c
  3569   0016E4  C136  F03A         	movff	colorDetect@bluePrint,___flge@ff2
  3570   0016E8  C137  F03B         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  3571   0016EC  C138  F03C         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  3572   0016F0  C139  F03D         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  3573   0016F4  EC73  F024         	call	___flge	;wreg free
  3574   0016F8  B0D8               	btfsc	status,0,c
  3575   0016FA  EF81  F00B         	goto	u6871
  3576   0016FE  EF83  F00B         	goto	u6870
  3577   001702                     u6871:
  3578   001702  EF9F  F00B         	goto	l6075
  3579   001706                     u6870:
  3580   001706                     
  3581                           ;MazeRobot.X/color.c: 191:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3582   001706  0E2A               	movlw	42
  3583   001708  0100               	movlb	0	; () banked
  3584   00170A  6FE5               	movwf	??_colorDetect& (0+255),b
  3585   00170C  0E8D               	movlw	141
  3586   00170E                     u7347:
  3587   00170E  2EE8               	decfsz	wreg,f,c
  3588   001710  D7FE               	bra	u7347
  3589   001712  2FE5               	decfsz	??_colorDetect& (0+255),f,b
  3590   001714  D7FC               	bra	u7347
  3591   001716  D000               	nop2	
  3592   001718                     
  3593                           ;MazeRobot.X/color.c: 192:         turn_180(mL,mR);
  3594   001718  C0E1  F01E         	movff	colorDetect@mL,turn_180@mL
  3595   00171C  C0E2  F01F         	movff	colorDetect@mL+1,turn_180@mL+1
  3596   001720  C0E3  F020         	movff	colorDetect@mR,turn_180@mR
  3597   001724  C0E4  F021         	movff	colorDetect@mR+1,turn_180@mR+1
  3598   001728  ECD6  F020         	call	_turn_180	;wreg free
  3599   00172C                     
  3600                           ;MazeRobot.X/color.c: 193:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3601   00172C  0E2A               	movlw	42
  3602   00172E  0100               	movlb	0	; () banked
  3603   001730  6FE5               	movwf	??_colorDetect& (0+255),b
  3604   001732  0E8D               	movlw	141
  3605   001734                     u7357:
  3606   001734  2EE8               	decfsz	wreg,f,c
  3607   001736  D7FE               	bra	u7357
  3608   001738  2FE5               	decfsz	??_colorDetect& (0+255),f,b
  3609   00173A  D7FC               	bra	u7357
  3610   00173C  D000               	nop2	
  3611   00173E                     l6075:
  3612                           
  3613                           ;MazeRobot.X/color.c: 197:         if ((greenPrint - redPrint > 0.4 ) & (greenPrint > 1)
      +                           & (greenPrint - bluePrint > 0.4 )){
  3614   00173E  0ECD               	movlw	205
  3615   001740  6E36               	movwf	___flge@ff1^0,c
  3616   001742  0ECC               	movlw	204
  3617   001744  6E37               	movwf	(___flge@ff1+1)^0,c
  3618   001746  0ECC               	movlw	204
  3619   001748  6E38               	movwf	(___flge@ff1+2)^0,c
  3620   00174A  0E3E               	movlw	62
  3621   00174C  6E39               	movwf	(___flge@ff1+3)^0,c
  3622   00174E  C12E  F019         	movff	colorDetect@redPrint,___flsub@a
  3623   001752  C12F  F01A         	movff	colorDetect@redPrint+1,___flsub@a+1
  3624   001756  C130  F01B         	movff	colorDetect@redPrint+2,___flsub@a+2
  3625   00175A  C131  F01C         	movff	colorDetect@redPrint+3,___flsub@a+3
  3626   00175E  C132  F015         	movff	colorDetect@greenPrint,___flsub@b
  3627   001762  C133  F016         	movff	colorDetect@greenPrint+1,___flsub@b+1
  3628   001766  C134  F017         	movff	colorDetect@greenPrint+2,___flsub@b+2
  3629   00176A  C135  F018         	movff	colorDetect@greenPrint+3,___flsub@b+3
  3630   00176E  EC92  F02B         	call	___flsub	;wreg free
  3631   001772  C015  F03A         	movff	?___flsub,___flge@ff2
  3632   001776  C016  F03B         	movff	?___flsub+1,___flge@ff2+1
  3633   00177A  C017  F03C         	movff	?___flsub+2,___flge@ff2+2
  3634   00177E  C018  F03D         	movff	?___flsub+3,___flge@ff2+3
  3635   001782  EC73  F024         	call	___flge	;wreg free
  3636   001786  B0D8               	btfsc	status,0,c
  3637   001788  EFC8  F00B         	goto	u6881
  3638   00178C  EFCA  F00B         	goto	u6880
  3639   001790                     u6881:
  3640   001790  EF2A  F00C         	goto	l6087
  3641   001794                     u6880:
  3642   001794  0E00               	movlw	0
  3643   001796  6E36               	movwf	___flge@ff1^0,c
  3644   001798  0E00               	movlw	0
  3645   00179A  6E37               	movwf	(___flge@ff1+1)^0,c
  3646   00179C  0E80               	movlw	128
  3647   00179E  6E38               	movwf	(___flge@ff1+2)^0,c
  3648   0017A0  0E3F               	movlw	63
  3649   0017A2  6E39               	movwf	(___flge@ff1+3)^0,c
  3650   0017A4  C132  F03A         	movff	colorDetect@greenPrint,___flge@ff2
  3651   0017A8  C133  F03B         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  3652   0017AC  C134  F03C         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  3653   0017B0  C135  F03D         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  3654   0017B4  EC73  F024         	call	___flge	;wreg free
  3655   0017B8  B0D8               	btfsc	status,0,c
  3656   0017BA  EFE1  F00B         	goto	u6891
  3657   0017BE  EFE3  F00B         	goto	u6890
  3658   0017C2                     u6891:
  3659   0017C2  EF2A  F00C         	goto	l6087
  3660   0017C6                     u6890:
  3661   0017C6  0ECD               	movlw	205
  3662   0017C8  6E36               	movwf	___flge@ff1^0,c
  3663   0017CA  0ECC               	movlw	204
  3664   0017CC  6E37               	movwf	(___flge@ff1+1)^0,c
  3665   0017CE  0ECC               	movlw	204
  3666   0017D0  6E38               	movwf	(___flge@ff1+2)^0,c
  3667   0017D2  0E3E               	movlw	62
  3668   0017D4  6E39               	movwf	(___flge@ff1+3)^0,c
  3669   0017D6  C136  F019         	movff	colorDetect@bluePrint,___flsub@a
  3670   0017DA  C137  F01A         	movff	colorDetect@bluePrint+1,___flsub@a+1
  3671   0017DE  C138  F01B         	movff	colorDetect@bluePrint+2,___flsub@a+2
  3672   0017E2  C139  F01C         	movff	colorDetect@bluePrint+3,___flsub@a+3
  3673   0017E6  C132  F015         	movff	colorDetect@greenPrint,___flsub@b
  3674   0017EA  C133  F016         	movff	colorDetect@greenPrint+1,___flsub@b+1
  3675   0017EE  C134  F017         	movff	colorDetect@greenPrint+2,___flsub@b+2
  3676   0017F2  C135  F018         	movff	colorDetect@greenPrint+3,___flsub@b+3
  3677   0017F6  EC92  F02B         	call	___flsub	;wreg free
  3678   0017FA  C015  F03A         	movff	?___flsub,___flge@ff2
  3679   0017FE  C016  F03B         	movff	?___flsub+1,___flge@ff2+1
  3680   001802  C017  F03C         	movff	?___flsub+2,___flge@ff2+2
  3681   001806  C018  F03D         	movff	?___flsub+3,___flge@ff2+3
  3682   00180A  EC73  F024         	call	___flge	;wreg free
  3683   00180E  B0D8               	btfsc	status,0,c
  3684   001810  EF0C  F00C         	goto	u6901
  3685   001814  EF0E  F00C         	goto	u6900
  3686   001818                     u6901:
  3687   001818  EF2A  F00C         	goto	l6087
  3688   00181C                     u6900:
  3689   00181C                     
  3690                           ;MazeRobot.X/color.c: 198:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3691   00181C  0E2A               	movlw	42
  3692   00181E  0100               	movlb	0	; () banked
  3693   001820  6FE5               	movwf	??_colorDetect& (0+255),b
  3694   001822  0E8D               	movlw	141
  3695   001824                     u7367:
  3696   001824  2EE8               	decfsz	wreg,f,c
  3697   001826  D7FE               	bra	u7367
  3698   001828  2FE5               	decfsz	??_colorDetect& (0+255),f,b
  3699   00182A  D7FC               	bra	u7367
  3700   00182C  D000               	nop2	
  3701   00182E                     
  3702                           ;MazeRobot.X/color.c: 199:         turnLeft_90(mL,mR);
  3703   00182E  C0E1  F01E         	movff	colorDetect@mL,turnLeft_90@mL
  3704   001832  C0E2  F01F         	movff	colorDetect@mL+1,turnLeft_90@mL+1
  3705   001836  C0E3  F020         	movff	colorDetect@mR,turnLeft_90@mR
  3706   00183A  C0E4  F021         	movff	colorDetect@mR+1,turnLeft_90@mR+1
  3707   00183E  ECB3  F022         	call	_turnLeft_90	;wreg free
  3708   001842                     
  3709                           ;MazeRobot.X/color.c: 200:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3710   001842  0E2A               	movlw	42
  3711   001844  0100               	movlb	0	; () banked
  3712   001846  6FE5               	movwf	??_colorDetect& (0+255),b
  3713   001848  0E8D               	movlw	141
  3714   00184A                     u7377:
  3715   00184A  2EE8               	decfsz	wreg,f,c
  3716   00184C  D7FE               	bra	u7377
  3717   00184E  2FE5               	decfsz	??_colorDetect& (0+255),f,b
  3718   001850  D7FC               	bra	u7377
  3719   001852  D000               	nop2	
  3720   001854                     l6087:
  3721                           
  3722                           ;MazeRobot.X/color.c: 204:         if ((redPrint < 0.7) & (greenPrint > 1.0)& (bluePrint
      +                           > 1.0)){
  3723   001854  C12E  F036         	movff	colorDetect@redPrint,___flge@ff1
  3724   001858  C12F  F037         	movff	colorDetect@redPrint+1,___flge@ff1+1
  3725   00185C  C130  F038         	movff	colorDetect@redPrint+2,___flge@ff1+2
  3726   001860  C131  F039         	movff	colorDetect@redPrint+3,___flge@ff1+3
  3727   001864  0E33               	movlw	51
  3728   001866  6E3A               	movwf	___flge@ff2^0,c
  3729   001868  0E33               	movlw	51
  3730   00186A  6E3B               	movwf	(___flge@ff2+1)^0,c
  3731   00186C  0E33               	movlw	51
  3732   00186E  6E3C               	movwf	(___flge@ff2+2)^0,c
  3733   001870  0E3F               	movlw	63
  3734   001872  6E3D               	movwf	(___flge@ff2+3)^0,c
  3735   001874  EC73  F024         	call	___flge	;wreg free
  3736   001878  B0D8               	btfsc	status,0,c
  3737   00187A  EF41  F00C         	goto	u6911
  3738   00187E  EF43  F00C         	goto	u6910
  3739   001882                     u6911:
  3740   001882  EF91  F00C         	goto	l6099
  3741   001886                     u6910:
  3742   001886  0E00               	movlw	0
  3743   001888  6E36               	movwf	___flge@ff1^0,c
  3744   00188A  0E00               	movlw	0
  3745   00188C  6E37               	movwf	(___flge@ff1+1)^0,c
  3746   00188E  0E80               	movlw	128
  3747   001890  6E38               	movwf	(___flge@ff1+2)^0,c
  3748   001892  0E3F               	movlw	63
  3749   001894  6E39               	movwf	(___flge@ff1+3)^0,c
  3750   001896  C132  F03A         	movff	colorDetect@greenPrint,___flge@ff2
  3751   00189A  C133  F03B         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  3752   00189E  C134  F03C         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  3753   0018A2  C135  F03D         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  3754   0018A6  EC73  F024         	call	___flge	;wreg free
  3755   0018AA  B0D8               	btfsc	status,0,c
  3756   0018AC  EF5A  F00C         	goto	u6921
  3757   0018B0  EF5C  F00C         	goto	u6920
  3758   0018B4                     u6921:
  3759   0018B4  EF91  F00C         	goto	l6099
  3760   0018B8                     u6920:
  3761   0018B8  0E00               	movlw	0
  3762   0018BA  6E36               	movwf	___flge@ff1^0,c
  3763   0018BC  0E00               	movlw	0
  3764   0018BE  6E37               	movwf	(___flge@ff1+1)^0,c
  3765   0018C0  0E80               	movlw	128
  3766   0018C2  6E38               	movwf	(___flge@ff1+2)^0,c
  3767   0018C4  0E3F               	movlw	63
  3768   0018C6  6E39               	movwf	(___flge@ff1+3)^0,c
  3769   0018C8  C136  F03A         	movff	colorDetect@bluePrint,___flge@ff2
  3770   0018CC  C137  F03B         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  3771   0018D0  C138  F03C         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  3772   0018D4  C139  F03D         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  3773   0018D8  EC73  F024         	call	___flge	;wreg free
  3774   0018DC  B0D8               	btfsc	status,0,c
  3775   0018DE  EF73  F00C         	goto	u6931
  3776   0018E2  EF75  F00C         	goto	u6930
  3777   0018E6                     u6931:
  3778   0018E6  EF91  F00C         	goto	l6099
  3779   0018EA                     u6930:
  3780   0018EA                     
  3781                           ;MazeRobot.X/color.c: 205:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3782   0018EA  0E2A               	movlw	42
  3783   0018EC  0100               	movlb	0	; () banked
  3784   0018EE  6FE5               	movwf	??_colorDetect& (0+255),b
  3785   0018F0  0E8D               	movlw	141
  3786   0018F2                     u7387:
  3787   0018F2  2EE8               	decfsz	wreg,f,c
  3788   0018F4  D7FE               	bra	u7387
  3789   0018F6  2FE5               	decfsz	??_colorDetect& (0+255),f,b
  3790   0018F8  D7FC               	bra	u7387
  3791   0018FA  D000               	nop2	
  3792   0018FC                     
  3793                           ;MazeRobot.X/color.c: 206:         turnLeft_135(mL,mR);
  3794   0018FC  C0E1  F01E         	movff	colorDetect@mL,turnLeft_135@mL
  3795   001900  C0E2  F01F         	movff	colorDetect@mL+1,turnLeft_135@mL+1
  3796   001904  C0E3  F020         	movff	colorDetect@mR,turnLeft_135@mR
  3797   001908  C0E4  F021         	movff	colorDetect@mR+1,turnLeft_135@mR+1
  3798   00190C  EC52  F023         	call	_turnLeft_135	;wreg free
  3799   001910                     
  3800                           ;MazeRobot.X/color.c: 207:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3801   001910  0E2A               	movlw	42
  3802   001912  0100               	movlb	0	; () banked
  3803   001914  6FE5               	movwf	??_colorDetect& (0+255),b
  3804   001916  0E8D               	movlw	141
  3805   001918                     u7397:
  3806   001918  2EE8               	decfsz	wreg,f,c
  3807   00191A  D7FE               	bra	u7397
  3808   00191C  2FE5               	decfsz	??_colorDetect& (0+255),f,b
  3809   00191E  D7FC               	bra	u7397
  3810   001920  D000               	nop2	
  3811   001922                     l6099:
  3812                           
  3813                           ;MazeRobot.X/color.c: 211:         if ((redPrint > 0.95) & (greenPrint > 0.8 & greenPrin
      +                          t < 0.9) & (bluePrint > 0.8 & bluePrint < 0.95)){
  3814   001922  0E33               	movlw	51
  3815   001924  6E36               	movwf	___flge@ff1^0,c
  3816   001926  0E33               	movlw	51
  3817   001928  6E37               	movwf	(___flge@ff1+1)^0,c
  3818   00192A  0E73               	movlw	115
  3819   00192C  6E38               	movwf	(___flge@ff1+2)^0,c
  3820   00192E  0E3F               	movlw	63
  3821   001930  6E39               	movwf	(___flge@ff1+3)^0,c
  3822   001932  C12E  F03A         	movff	colorDetect@redPrint,___flge@ff2
  3823   001936  C12F  F03B         	movff	colorDetect@redPrint+1,___flge@ff2+1
  3824   00193A  C130  F03C         	movff	colorDetect@redPrint+2,___flge@ff2+2
  3825   00193E  C131  F03D         	movff	colorDetect@redPrint+3,___flge@ff2+3
  3826   001942  EC73  F024         	call	___flge	;wreg free
  3827   001946  B0D8               	btfsc	status,0,c
  3828   001948  EFA8  F00C         	goto	u6941
  3829   00194C  EFAA  F00C         	goto	u6940
  3830   001950                     u6941:
  3831   001950  EF2A  F00D         	goto	l105
  3832   001954                     u6940:
  3833   001954  0ECD               	movlw	205
  3834   001956  6E36               	movwf	___flge@ff1^0,c
  3835   001958  0ECC               	movlw	204
  3836   00195A  6E37               	movwf	(___flge@ff1+1)^0,c
  3837   00195C  0E4C               	movlw	76
  3838   00195E  6E38               	movwf	(___flge@ff1+2)^0,c
  3839   001960  0E3F               	movlw	63
  3840   001962  6E39               	movwf	(___flge@ff1+3)^0,c
  3841   001964  C132  F03A         	movff	colorDetect@greenPrint,___flge@ff2
  3842   001968  C133  F03B         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  3843   00196C  C134  F03C         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  3844   001970  C135  F03D         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  3845   001974  EC73  F024         	call	___flge	;wreg free
  3846   001978  B0D8               	btfsc	status,0,c
  3847   00197A  EFC1  F00C         	goto	u6951
  3848   00197E  EFC3  F00C         	goto	u6950
  3849   001982                     u6951:
  3850   001982  EF2A  F00D         	goto	l105
  3851   001986                     u6950:
  3852   001986  C132  F036         	movff	colorDetect@greenPrint,___flge@ff1
  3853   00198A  C133  F037         	movff	colorDetect@greenPrint+1,___flge@ff1+1
  3854   00198E  C134  F038         	movff	colorDetect@greenPrint+2,___flge@ff1+2
  3855   001992  C135  F039         	movff	colorDetect@greenPrint+3,___flge@ff1+3
  3856   001996  0E66               	movlw	102
  3857   001998  6E3A               	movwf	___flge@ff2^0,c
  3858   00199A  0E66               	movlw	102
  3859   00199C  6E3B               	movwf	(___flge@ff2+1)^0,c
  3860   00199E  0E66               	movlw	102
  3861   0019A0  6E3C               	movwf	(___flge@ff2+2)^0,c
  3862   0019A2  0E3F               	movlw	63
  3863   0019A4  6E3D               	movwf	(___flge@ff2+3)^0,c
  3864   0019A6  EC73  F024         	call	___flge	;wreg free
  3865   0019AA  B0D8               	btfsc	status,0,c
  3866   0019AC  EFDA  F00C         	goto	u6961
  3867   0019B0  EFDC  F00C         	goto	u6960
  3868   0019B4                     u6961:
  3869   0019B4  EF2A  F00D         	goto	l105
  3870   0019B8                     u6960:
  3871   0019B8  0ECD               	movlw	205
  3872   0019BA  6E36               	movwf	___flge@ff1^0,c
  3873   0019BC  0ECC               	movlw	204
  3874   0019BE  6E37               	movwf	(___flge@ff1+1)^0,c
  3875   0019C0  0E4C               	movlw	76
  3876   0019C2  6E38               	movwf	(___flge@ff1+2)^0,c
  3877   0019C4  0E3F               	movlw	63
  3878   0019C6  6E39               	movwf	(___flge@ff1+3)^0,c
  3879   0019C8  C136  F03A         	movff	colorDetect@bluePrint,___flge@ff2
  3880   0019CC  C137  F03B         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  3881   0019D0  C138  F03C         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  3882   0019D4  C139  F03D         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  3883   0019D8  EC73  F024         	call	___flge	;wreg free
  3884   0019DC  B0D8               	btfsc	status,0,c
  3885   0019DE  EFF3  F00C         	goto	u6971
  3886   0019E2  EFF5  F00C         	goto	u6970
  3887   0019E6                     u6971:
  3888   0019E6  EF2A  F00D         	goto	l105
  3889   0019EA                     u6970:
  3890   0019EA  C136  F036         	movff	colorDetect@bluePrint,___flge@ff1
  3891   0019EE  C137  F037         	movff	colorDetect@bluePrint+1,___flge@ff1+1
  3892   0019F2  C138  F038         	movff	colorDetect@bluePrint+2,___flge@ff1+2
  3893   0019F6  C139  F039         	movff	colorDetect@bluePrint+3,___flge@ff1+3
  3894   0019FA  0E33               	movlw	51
  3895   0019FC  6E3A               	movwf	___flge@ff2^0,c
  3896   0019FE  0E33               	movlw	51
  3897   001A00  6E3B               	movwf	(___flge@ff2+1)^0,c
  3898   001A02  0E73               	movlw	115
  3899   001A04  6E3C               	movwf	(___flge@ff2+2)^0,c
  3900   001A06  0E3F               	movlw	63
  3901   001A08  6E3D               	movwf	(___flge@ff2+3)^0,c
  3902   001A0A  EC73  F024         	call	___flge	;wreg free
  3903   001A0E  B0D8               	btfsc	status,0,c
  3904   001A10  EF0C  F00D         	goto	u6981
  3905   001A14  EF0E  F00D         	goto	u6980
  3906   001A18                     u6981:
  3907   001A18  EF2A  F00D         	goto	l105
  3908   001A1C                     u6980:
  3909   001A1C                     
  3910                           ;MazeRobot.X/color.c: 212:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3911   001A1C  0E2A               	movlw	42
  3912   001A1E  0100               	movlb	0	; () banked
  3913   001A20  6FE5               	movwf	??_colorDetect& (0+255),b
  3914   001A22  0E8D               	movlw	141
  3915   001A24                     u7407:
  3916   001A24  2EE8               	decfsz	wreg,f,c
  3917   001A26  D7FE               	bra	u7407
  3918   001A28  2FE5               	decfsz	??_colorDetect& (0+255),f,b
  3919   001A2A  D7FC               	bra	u7407
  3920   001A2C  D000               	nop2	
  3921   001A2E                     
  3922                           ;MazeRobot.X/color.c: 213:         reverseSquareLeft(mL,mR);
  3923   001A2E  C0E1  F024         	movff	colorDetect@mL,reverseSquareLeft@mL
  3924   001A32  C0E2  F025         	movff	colorDetect@mL+1,reverseSquareLeft@mL+1
  3925   001A36  C0E3  F026         	movff	colorDetect@mR,reverseSquareLeft@mR
  3926   001A3A  C0E4  F027         	movff	colorDetect@mR+1,reverseSquareLeft@mR+1
  3927   001A3E  EC31  F029         	call	_reverseSquareLeft	;wreg free
  3928   001A42                     
  3929                           ;MazeRobot.X/color.c: 214:         _delay((unsigned long)((2)*(64000000/4000.0)));
  3930   001A42  0E2A               	movlw	42
  3931   001A44  0100               	movlb	0	; () banked
  3932   001A46  6FE5               	movwf	??_colorDetect& (0+255),b
  3933   001A48  0E8D               	movlw	141
  3934   001A4A                     u7417:
  3935   001A4A  2EE8               	decfsz	wreg,f,c
  3936   001A4C  D7FE               	bra	u7417
  3937   001A4E  2FE5               	decfsz	??_colorDetect& (0+255),f,b
  3938   001A50  D7FC               	bra	u7417
  3939   001A52  D000               	nop2	
  3940   001A54                     l105:
  3941   001A54  0012               	return		;funcret
  3942   001A56                     __end_of_colorDetect:
  3943                           	callstack 0
  3944                           
  3945 ;; *************** function _turn_180 *****************
  3946 ;; Defined at:
  3947 ;;		line 295 in file "MazeRobot.X/dc_motor.c"
  3948 ;; Parameters:    Size  Location     Type
  3949 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  3950 ;;		 -> main@motorLeft(9), 
  3951 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  3952 ;;		 -> main@motorRight(9), 
  3953 ;; Auto vars:     Size  Location     Type
  3954 ;;		None
  3955 ;; Return value:  Size  Location     Type
  3956 ;;                  1    wreg      void 
  3957 ;; Registers used:
  3958 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3959 ;; Tracked objects:
  3960 ;;		On entry : 0/0
  3961 ;;		On exit  : 0/0
  3962 ;;		Unchanged: 0/0
  3963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3964 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3966 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3967 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3968 ;;Total ram usage:        6 bytes
  3969 ;; Hardware stack levels used: 1
  3970 ;; Hardware stack levels required when called: 5
  3971 ;; This function calls:
  3972 ;;		_reverse
  3973 ;;		_setMotorPWM
  3974 ;;		_stop
  3975 ;; This function is called by:
  3976 ;;		_colorDetect
  3977 ;; This function uses a non-reentrant model
  3978 ;;
  3979                           
  3980                           	psect	text9
  3981   0041AC                     __ptext9:
  3982                           	callstack 0
  3983   0041AC                     _turn_180:
  3984                           	callstack 24
  3985   0041AC                     
  3986                           ;MazeRobot.X/dc_motor.c: 295: void turn_180(DC_motor *mL, DC_motor *mR);MazeRobot.X/dc_m
      +                          otor.c: 296: {;MazeRobot.X/dc_motor.c: 298:     stop(mL, mR);
  3987   0041AC  C01E  F018         	movff	turn_180@mL,stop@mL
  3988   0041B0  C01F  F019         	movff	turn_180@mL+1,stop@mL+1
  3989   0041B4  C020  F01A         	movff	turn_180@mR,stop@mR
  3990   0041B8  C021  F01B         	movff	turn_180@mR+1,stop@mR+1
  3991   0041BC  ECFC  F027         	call	_stop	;wreg free
  3992   0041C0                     
  3993                           ;MazeRobot.X/dc_motor.c: 299:     _delay((unsigned long)((100)*(64000000/4000.0)));
  3994   0041C0  0E09               	movlw	9
  3995   0041C2  6E23               	movwf	(??_turn_180+1)^0,c
  3996   0041C4  0E1E               	movlw	30
  3997   0041C6  6E22               	movwf	??_turn_180^0,c
  3998   0041C8  0EE4               	movlw	228
  3999   0041CA                     u7427:
  4000   0041CA  2EE8               	decfsz	wreg,f,c
  4001   0041CC  D7FE               	bra	u7427
  4002   0041CE  2E22               	decfsz	??_turn_180^0,f,c
  4003   0041D0  D7FC               	bra	u7427
  4004   0041D2  2E23               	decfsz	(??_turn_180+1)^0,f,c
  4005   0041D4  D7FA               	bra	u7427
  4006   0041D6  D000               	nop2	
  4007   0041D8                     
  4008                           ;MazeRobot.X/dc_motor.c: 301:     reverse(mL, mR);
  4009   0041D8  C01E  F018         	movff	turn_180@mL,reverse@mL
  4010   0041DC  C01F  F019         	movff	turn_180@mL+1,reverse@mL+1
  4011   0041E0  C020  F01A         	movff	turn_180@mR,reverse@mR
  4012   0041E4  C021  F01B         	movff	turn_180@mR+1,reverse@mR+1
  4013   0041E8  ECC3  F026         	call	_reverse	;wreg free
  4014                           
  4015                           ;MazeRobot.X/dc_motor.c: 302:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  4016   0041EC  0E11               	movlw	17
  4017   0041EE  6E23               	movwf	(??_turn_180+1)^0,c
  4018   0041F0  0E3C               	movlw	60
  4019   0041F2  6E22               	movwf	??_turn_180^0,c
  4020   0041F4  0ECB               	movlw	203
  4021   0041F6                     u7437:
  4022   0041F6  2EE8               	decfsz	wreg,f,c
  4023   0041F8  D7FE               	bra	u7437
  4024   0041FA  2E22               	decfsz	??_turn_180^0,f,c
  4025   0041FC  D7FC               	bra	u7437
  4026   0041FE  2E23               	decfsz	(??_turn_180+1)^0,f,c
  4027   004200  D7FA               	bra	u7437
  4028   004202  F000               	nop	
  4029   004204                     
  4030                           ;MazeRobot.X/dc_motor.c: 304:     stop(mL, mR);
  4031   004204  C01E  F018         	movff	turn_180@mL,stop@mL
  4032   004208  C01F  F019         	movff	turn_180@mL+1,stop@mL+1
  4033   00420C  C020  F01A         	movff	turn_180@mR,stop@mR
  4034   004210  C021  F01B         	movff	turn_180@mR+1,stop@mR+1
  4035   004214  ECFC  F027         	call	_stop	;wreg free
  4036   004218                     
  4037                           ;MazeRobot.X/dc_motor.c: 306:     mL->direction = 0;
  4038   004218  EE20 F001          	lfsr	2,1
  4039   00421C  501E               	movf	turn_180@mL^0,w,c
  4040   00421E  26D9               	addwf	fsr2l,f,c
  4041   004220  501F               	movf	(turn_180@mL+1)^0,w,c
  4042   004222  22DA               	addwfc	fsr2h,f,c
  4043   004224  0E00               	movlw	0
  4044   004226  6EDF               	movwf	indf2,c
  4045   004228                     
  4046                           ;MazeRobot.X/dc_motor.c: 307:     mR->direction = 1;
  4047   004228  EE20 F001          	lfsr	2,1
  4048   00422C  5020               	movf	turn_180@mR^0,w,c
  4049   00422E  26D9               	addwf	fsr2l,f,c
  4050   004230  5021               	movf	(turn_180@mR+1)^0,w,c
  4051   004232  22DA               	addwfc	fsr2h,f,c
  4052   004234  0E01               	movlw	1
  4053   004236  6EDF               	movwf	indf2,c
  4054   004238                     
  4055                           ;MazeRobot.X/dc_motor.c: 309:     mL->brakemode = 1;
  4056   004238  EE20 F002          	lfsr	2,2
  4057   00423C  501E               	movf	turn_180@mL^0,w,c
  4058   00423E  26D9               	addwf	fsr2l,f,c
  4059   004240  501F               	movf	(turn_180@mL+1)^0,w,c
  4060   004242  22DA               	addwfc	fsr2h,f,c
  4061   004244  0E01               	movlw	1
  4062   004246  6EDF               	movwf	indf2,c
  4063   004248                     
  4064                           ;MazeRobot.X/dc_motor.c: 310:     mL->brakemode = 1;
  4065   004248  EE20 F002          	lfsr	2,2
  4066   00424C  501E               	movf	turn_180@mL^0,w,c
  4067   00424E  26D9               	addwf	fsr2l,f,c
  4068   004250  501F               	movf	(turn_180@mL+1)^0,w,c
  4069   004252  22DA               	addwfc	fsr2h,f,c
  4070   004254  0E01               	movlw	1
  4071   004256  6EDF               	movwf	indf2,c
  4072                           
  4073                           ;MazeRobot.X/dc_motor.c: 312:     while((mL->power < 70) || (mR->power < 70)){
  4074   004258  EF46  F021         	goto	l4963
  4075   00425C                     l4957:
  4076                           
  4077                           ;MazeRobot.X/dc_motor.c: 313:         mL->power += 10;
  4078   00425C  C01E  FFD9         	movff	turn_180@mL,fsr2l
  4079   004260  C01F  FFDA         	movff	turn_180@mL+1,fsr2h
  4080   004264  0E0A               	movlw	10
  4081   004266  26DF               	addwf	indf2,f,c
  4082                           
  4083                           ;MazeRobot.X/dc_motor.c: 314:         mR->power += 10;
  4084   004268  C020  FFD9         	movff	turn_180@mR,fsr2l
  4085   00426C  C021  FFDA         	movff	turn_180@mR+1,fsr2h
  4086   004270  0E0A               	movlw	10
  4087   004272  26DF               	addwf	indf2,f,c
  4088   004274                     
  4089                           ;MazeRobot.X/dc_motor.c: 315:         setMotorPWM(mL);
  4090   004274  C01E  F012         	movff	turn_180@mL,setMotorPWM@m
  4091   004278  C01F  F013         	movff	turn_180@mL+1,setMotorPWM@m+1
  4092   00427C  EC6E  F01F         	call	_setMotorPWM	;wreg free
  4093   004280                     
  4094                           ;MazeRobot.X/dc_motor.c: 316:         setMotorPWM(mR);
  4095   004280  C020  F012         	movff	turn_180@mR,setMotorPWM@m
  4096   004284  C021  F013         	movff	turn_180@mR+1,setMotorPWM@m+1
  4097   004288  EC6E  F01F         	call	_setMotorPWM	;wreg free
  4098   00428C                     l4963:
  4099                           
  4100                           ;MazeRobot.X/dc_motor.c: 312:     while((mL->power < 70) || (mR->power < 70)){
  4101   00428C  C01E  FFD9         	movff	turn_180@mL,fsr2l
  4102   004290  C01F  FFDA         	movff	turn_180@mL+1,fsr2h
  4103   004294  0E45               	movlw	69
  4104   004296  64DF               	cpfsgt	indf2,c
  4105   004298  EF50  F021         	goto	u5261
  4106   00429C  EF52  F021         	goto	u5260
  4107   0042A0                     u5261:
  4108   0042A0  EF2E  F021         	goto	l4957
  4109   0042A4                     u5260:
  4110   0042A4  C020  FFD9         	movff	turn_180@mR,fsr2l
  4111   0042A8  C021  FFDA         	movff	turn_180@mR+1,fsr2h
  4112   0042AC  0E45               	movlw	69
  4113   0042AE  64DF               	cpfsgt	indf2,c
  4114   0042B0  EF5C  F021         	goto	u5271
  4115   0042B4  EF5E  F021         	goto	u5270
  4116   0042B8                     u5271:
  4117   0042B8  EF2E  F021         	goto	l4957
  4118   0042BC                     u5270:
  4119   0042BC                     
  4120                           ;MazeRobot.X/dc_motor.c: 318:    _delay((unsigned long)((4*turning_time45)*(64000000/400
      +                          0.0)));
  4121   0042BC  0E41               	movlw	65
  4122   0042BE  6E23               	movwf	(??_turn_180+1)^0,c
  4123   0042C0  0EF0               	movlw	240
  4124   0042C2  6E22               	movwf	??_turn_180^0,c
  4125   0042C4  0E33               	movlw	51
  4126   0042C6                     u7447:
  4127   0042C6  2EE8               	decfsz	wreg,f,c
  4128   0042C8  D7FE               	bra	u7447
  4129   0042CA  2E22               	decfsz	??_turn_180^0,f,c
  4130   0042CC  D7FC               	bra	u7447
  4131   0042CE  2E23               	decfsz	(??_turn_180+1)^0,f,c
  4132   0042D0  D7FA               	bra	u7447
  4133   0042D2  F000               	nop	
  4134   0042D4                     
  4135                           ;MazeRobot.X/dc_motor.c: 319:     stop(mL, mR);
  4136   0042D4  C01E  F018         	movff	turn_180@mL,stop@mL
  4137   0042D8  C01F  F019         	movff	turn_180@mL+1,stop@mL+1
  4138   0042DC  C020  F01A         	movff	turn_180@mR,stop@mR
  4139   0042E0  C021  F01B         	movff	turn_180@mR+1,stop@mR+1
  4140   0042E4  ECFC  F027         	call	_stop	;wreg free
  4141   0042E8  0012               	return		;funcret
  4142   0042EA                     __end_of_turn_180:
  4143                           	callstack 0
  4144                           
  4145 ;; *************** function _turnRight_135 *****************
  4146 ;; Defined at:
  4147 ;;		line 323 in file "MazeRobot.X/dc_motor.c"
  4148 ;; Parameters:    Size  Location     Type
  4149 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  4150 ;;		 -> main@motorLeft(9), 
  4151 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  4152 ;;		 -> main@motorRight(9), 
  4153 ;; Auto vars:     Size  Location     Type
  4154 ;;		None
  4155 ;; Return value:  Size  Location     Type
  4156 ;;                  1    wreg      void 
  4157 ;; Registers used:
  4158 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4159 ;; Tracked objects:
  4160 ;;		On entry : 0/0
  4161 ;;		On exit  : 0/0
  4162 ;;		Unchanged: 0/0
  4163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4164 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4166 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4167 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4168 ;;Total ram usage:        6 bytes
  4169 ;; Hardware stack levels used: 1
  4170 ;; Hardware stack levels required when called: 5
  4171 ;; This function calls:
  4172 ;;		_reverse
  4173 ;;		_setMotorPWM
  4174 ;;		_stop
  4175 ;; This function is called by:
  4176 ;;		_colorDetect
  4177 ;; This function uses a non-reentrant model
  4178 ;;
  4179                           
  4180                           	psect	text10
  4181   0042EA                     __ptext10:
  4182                           	callstack 0
  4183   0042EA                     _turnRight_135:
  4184                           	callstack 24
  4185   0042EA                     
  4186                           ;MazeRobot.X/dc_motor.c: 323: void turnRight_135(DC_motor *mL, DC_motor *mR);MazeRobot.X
      +                          /dc_motor.c: 324: {;MazeRobot.X/dc_motor.c: 325:     stop(mL, mR);
  4187   0042EA  C01E  F018         	movff	turnRight_135@mL,stop@mL
  4188   0042EE  C01F  F019         	movff	turnRight_135@mL+1,stop@mL+1
  4189   0042F2  C020  F01A         	movff	turnRight_135@mR,stop@mR
  4190   0042F6  C021  F01B         	movff	turnRight_135@mR+1,stop@mR+1
  4191   0042FA  ECFC  F027         	call	_stop	;wreg free
  4192   0042FE                     
  4193                           ;MazeRobot.X/dc_motor.c: 326:     _delay((unsigned long)((100)*(64000000/4000.0)));
  4194   0042FE  0E09               	movlw	9
  4195   004300  6E23               	movwf	(??_turnRight_135+1)^0,c
  4196   004302  0E1E               	movlw	30
  4197   004304  6E22               	movwf	??_turnRight_135^0,c
  4198   004306  0EE4               	movlw	228
  4199   004308                     u7457:
  4200   004308  2EE8               	decfsz	wreg,f,c
  4201   00430A  D7FE               	bra	u7457
  4202   00430C  2E22               	decfsz	??_turnRight_135^0,f,c
  4203   00430E  D7FC               	bra	u7457
  4204   004310  2E23               	decfsz	(??_turnRight_135+1)^0,f,c
  4205   004312  D7FA               	bra	u7457
  4206   004314  D000               	nop2	
  4207   004316                     
  4208                           ;MazeRobot.X/dc_motor.c: 328:     reverse(mL, mR);
  4209   004316  C01E  F018         	movff	turnRight_135@mL,reverse@mL
  4210   00431A  C01F  F019         	movff	turnRight_135@mL+1,reverse@mL+1
  4211   00431E  C020  F01A         	movff	turnRight_135@mR,reverse@mR
  4212   004322  C021  F01B         	movff	turnRight_135@mR+1,reverse@mR+1
  4213   004326  ECC3  F026         	call	_reverse	;wreg free
  4214                           
  4215                           ;MazeRobot.X/dc_motor.c: 329:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  4216   00432A  0E11               	movlw	17
  4217   00432C  6E23               	movwf	(??_turnRight_135+1)^0,c
  4218   00432E  0E3C               	movlw	60
  4219   004330  6E22               	movwf	??_turnRight_135^0,c
  4220   004332  0ECB               	movlw	203
  4221   004334                     u7467:
  4222   004334  2EE8               	decfsz	wreg,f,c
  4223   004336  D7FE               	bra	u7467
  4224   004338  2E22               	decfsz	??_turnRight_135^0,f,c
  4225   00433A  D7FC               	bra	u7467
  4226   00433C  2E23               	decfsz	(??_turnRight_135+1)^0,f,c
  4227   00433E  D7FA               	bra	u7467
  4228   004340  F000               	nop	
  4229   004342                     
  4230                           ;MazeRobot.X/dc_motor.c: 331:     stop(mL, mR);
  4231   004342  C01E  F018         	movff	turnRight_135@mL,stop@mL
  4232   004346  C01F  F019         	movff	turnRight_135@mL+1,stop@mL+1
  4233   00434A  C020  F01A         	movff	turnRight_135@mR,stop@mR
  4234   00434E  C021  F01B         	movff	turnRight_135@mR+1,stop@mR+1
  4235   004352  ECFC  F027         	call	_stop	;wreg free
  4236   004356                     
  4237                           ;MazeRobot.X/dc_motor.c: 333:     mL->direction = 1;
  4238   004356  EE20 F001          	lfsr	2,1
  4239   00435A  501E               	movf	turnRight_135@mL^0,w,c
  4240   00435C  26D9               	addwf	fsr2l,f,c
  4241   00435E  501F               	movf	(turnRight_135@mL+1)^0,w,c
  4242   004360  22DA               	addwfc	fsr2h,f,c
  4243   004362  0E01               	movlw	1
  4244   004364  6EDF               	movwf	indf2,c
  4245   004366                     
  4246                           ;MazeRobot.X/dc_motor.c: 334:     mR->direction = 0;
  4247   004366  EE20 F001          	lfsr	2,1
  4248   00436A  5020               	movf	turnRight_135@mR^0,w,c
  4249   00436C  26D9               	addwf	fsr2l,f,c
  4250   00436E  5021               	movf	(turnRight_135@mR+1)^0,w,c
  4251   004370  22DA               	addwfc	fsr2h,f,c
  4252   004372  0E00               	movlw	0
  4253   004374  6EDF               	movwf	indf2,c
  4254   004376                     
  4255                           ;MazeRobot.X/dc_motor.c: 336:     mL->brakemode = 1;
  4256   004376  EE20 F002          	lfsr	2,2
  4257   00437A  501E               	movf	turnRight_135@mL^0,w,c
  4258   00437C  26D9               	addwf	fsr2l,f,c
  4259   00437E  501F               	movf	(turnRight_135@mL+1)^0,w,c
  4260   004380  22DA               	addwfc	fsr2h,f,c
  4261   004382  0E01               	movlw	1
  4262   004384  6EDF               	movwf	indf2,c
  4263   004386                     
  4264                           ;MazeRobot.X/dc_motor.c: 337:     mL->brakemode = 1;
  4265   004386  EE20 F002          	lfsr	2,2
  4266   00438A  501E               	movf	turnRight_135@mL^0,w,c
  4267   00438C  26D9               	addwf	fsr2l,f,c
  4268   00438E  501F               	movf	(turnRight_135@mL+1)^0,w,c
  4269   004390  22DA               	addwfc	fsr2h,f,c
  4270   004392  0E01               	movlw	1
  4271   004394  6EDF               	movwf	indf2,c
  4272                           
  4273                           ;MazeRobot.X/dc_motor.c: 339:     while((mL->power < 80) || (mR->power < 80)){
  4274   004396  EFE5  F021         	goto	l4923
  4275   00439A                     l4917:
  4276                           
  4277                           ;MazeRobot.X/dc_motor.c: 340:         mL->power += 10;
  4278   00439A  C01E  FFD9         	movff	turnRight_135@mL,fsr2l
  4279   00439E  C01F  FFDA         	movff	turnRight_135@mL+1,fsr2h
  4280   0043A2  0E0A               	movlw	10
  4281   0043A4  26DF               	addwf	indf2,f,c
  4282                           
  4283                           ;MazeRobot.X/dc_motor.c: 341:         mR->power += 10;
  4284   0043A6  C020  FFD9         	movff	turnRight_135@mR,fsr2l
  4285   0043AA  C021  FFDA         	movff	turnRight_135@mR+1,fsr2h
  4286   0043AE  0E0A               	movlw	10
  4287   0043B0  26DF               	addwf	indf2,f,c
  4288   0043B2                     
  4289                           ;MazeRobot.X/dc_motor.c: 342:         setMotorPWM(mL);
  4290   0043B2  C01E  F012         	movff	turnRight_135@mL,setMotorPWM@m
  4291   0043B6  C01F  F013         	movff	turnRight_135@mL+1,setMotorPWM@m+1
  4292   0043BA  EC6E  F01F         	call	_setMotorPWM	;wreg free
  4293   0043BE                     
  4294                           ;MazeRobot.X/dc_motor.c: 343:         setMotorPWM(mR);
  4295   0043BE  C020  F012         	movff	turnRight_135@mR,setMotorPWM@m
  4296   0043C2  C021  F013         	movff	turnRight_135@mR+1,setMotorPWM@m+1
  4297   0043C6  EC6E  F01F         	call	_setMotorPWM	;wreg free
  4298   0043CA                     l4923:
  4299                           
  4300                           ;MazeRobot.X/dc_motor.c: 339:     while((mL->power < 80) || (mR->power < 80)){
  4301   0043CA  C01E  FFD9         	movff	turnRight_135@mL,fsr2l
  4302   0043CE  C01F  FFDA         	movff	turnRight_135@mL+1,fsr2h
  4303   0043D2  0E4F               	movlw	79
  4304   0043D4  64DF               	cpfsgt	indf2,c
  4305   0043D6  EFEF  F021         	goto	u5241
  4306   0043DA  EFF1  F021         	goto	u5240
  4307   0043DE                     u5241:
  4308   0043DE  EFCD  F021         	goto	l4917
  4309   0043E2                     u5240:
  4310   0043E2  C020  FFD9         	movff	turnRight_135@mR,fsr2l
  4311   0043E6  C021  FFDA         	movff	turnRight_135@mR+1,fsr2h
  4312   0043EA  0E4F               	movlw	79
  4313   0043EC  64DF               	cpfsgt	indf2,c
  4314   0043EE  EFFB  F021         	goto	u5251
  4315   0043F2  EFFD  F021         	goto	u5250
  4316   0043F6                     u5251:
  4317   0043F6  EFCD  F021         	goto	l4917
  4318   0043FA                     u5250:
  4319   0043FA                     
  4320                           ;MazeRobot.X/dc_motor.c: 345:    _delay((unsigned long)((turning_time45)*(64000000/4000.
      +                          0)));
  4321   0043FA  0E11               	movlw	17
  4322   0043FC  6E23               	movwf	(??_turnRight_135+1)^0,c
  4323   0043FE  0E3C               	movlw	60
  4324   004400  6E22               	movwf	??_turnRight_135^0,c
  4325   004402  0ECB               	movlw	203
  4326   004404                     u7477:
  4327   004404  2EE8               	decfsz	wreg,f,c
  4328   004406  D7FE               	bra	u7477
  4329   004408  2E22               	decfsz	??_turnRight_135^0,f,c
  4330   00440A  D7FC               	bra	u7477
  4331   00440C  2E23               	decfsz	(??_turnRight_135+1)^0,f,c
  4332   00440E  D7FA               	bra	u7477
  4333   004410  F000               	nop	
  4334   004412                     
  4335                           ;MazeRobot.X/dc_motor.c: 347:     stop(mL, mR);
  4336   004412  C01E  F018         	movff	turnRight_135@mL,stop@mL
  4337   004416  C01F  F019         	movff	turnRight_135@mL+1,stop@mL+1
  4338   00441A  C020  F01A         	movff	turnRight_135@mR,stop@mR
  4339   00441E  C021  F01B         	movff	turnRight_135@mR+1,stop@mR+1
  4340   004422  ECFC  F027         	call	_stop	;wreg free
  4341   004426  0012               	return		;funcret
  4342   004428                     __end_of_turnRight_135:
  4343                           	callstack 0
  4344                           
  4345 ;; *************** function _turnLeft_135 *****************
  4346 ;; Defined at:
  4347 ;;		line 352 in file "MazeRobot.X/dc_motor.c"
  4348 ;; Parameters:    Size  Location     Type
  4349 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  4350 ;;		 -> main@motorLeft(9), 
  4351 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  4352 ;;		 -> main@motorRight(9), 
  4353 ;; Auto vars:     Size  Location     Type
  4354 ;;		None
  4355 ;; Return value:  Size  Location     Type
  4356 ;;                  1    wreg      void 
  4357 ;; Registers used:
  4358 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4359 ;; Tracked objects:
  4360 ;;		On entry : 0/0
  4361 ;;		On exit  : 0/0
  4362 ;;		Unchanged: 0/0
  4363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4364 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4365 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4366 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4367 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4368 ;;Total ram usage:        6 bytes
  4369 ;; Hardware stack levels used: 1
  4370 ;; Hardware stack levels required when called: 5
  4371 ;; This function calls:
  4372 ;;		_reverse
  4373 ;;		_setMotorPWM
  4374 ;;		_stop
  4375 ;; This function is called by:
  4376 ;;		_colorDetect
  4377 ;; This function uses a non-reentrant model
  4378 ;;
  4379                           
  4380                           	psect	text11
  4381   0046A4                     __ptext11:
  4382                           	callstack 0
  4383   0046A4                     _turnLeft_135:
  4384                           	callstack 24
  4385   0046A4                     
  4386                           ;MazeRobot.X/dc_motor.c: 352: void turnLeft_135(DC_motor *mL, DC_motor *mR);MazeRobot.X/
      +                          dc_motor.c: 353: {;MazeRobot.X/dc_motor.c: 355:     stop(mL, mR);
  4387   0046A4  C01E  F018         	movff	turnLeft_135@mL,stop@mL
  4388   0046A8  C01F  F019         	movff	turnLeft_135@mL+1,stop@mL+1
  4389   0046AC  C020  F01A         	movff	turnLeft_135@mR,stop@mR
  4390   0046B0  C021  F01B         	movff	turnLeft_135@mR+1,stop@mR+1
  4391   0046B4  ECFC  F027         	call	_stop	;wreg free
  4392   0046B8                     
  4393                           ;MazeRobot.X/dc_motor.c: 356:     _delay((unsigned long)((100)*(64000000/4000.0)));
  4394   0046B8  0E09               	movlw	9
  4395   0046BA  6E23               	movwf	(??_turnLeft_135+1)^0,c
  4396   0046BC  0E1E               	movlw	30
  4397   0046BE  6E22               	movwf	??_turnLeft_135^0,c
  4398   0046C0  0EE4               	movlw	228
  4399   0046C2                     u7487:
  4400   0046C2  2EE8               	decfsz	wreg,f,c
  4401   0046C4  D7FE               	bra	u7487
  4402   0046C6  2E22               	decfsz	??_turnLeft_135^0,f,c
  4403   0046C8  D7FC               	bra	u7487
  4404   0046CA  2E23               	decfsz	(??_turnLeft_135+1)^0,f,c
  4405   0046CC  D7FA               	bra	u7487
  4406   0046CE  D000               	nop2	
  4407   0046D0                     
  4408                           ;MazeRobot.X/dc_motor.c: 358:     reverse(mL, mR);
  4409   0046D0  C01E  F018         	movff	turnLeft_135@mL,reverse@mL
  4410   0046D4  C01F  F019         	movff	turnLeft_135@mL+1,reverse@mL+1
  4411   0046D8  C020  F01A         	movff	turnLeft_135@mR,reverse@mR
  4412   0046DC  C021  F01B         	movff	turnLeft_135@mR+1,reverse@mR+1
  4413   0046E0  ECC3  F026         	call	_reverse	;wreg free
  4414                           
  4415                           ;MazeRobot.X/dc_motor.c: 359:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  4416   0046E4  0E11               	movlw	17
  4417   0046E6  6E23               	movwf	(??_turnLeft_135+1)^0,c
  4418   0046E8  0E3C               	movlw	60
  4419   0046EA  6E22               	movwf	??_turnLeft_135^0,c
  4420   0046EC  0ECB               	movlw	203
  4421   0046EE                     u7497:
  4422   0046EE  2EE8               	decfsz	wreg,f,c
  4423   0046F0  D7FE               	bra	u7497
  4424   0046F2  2E22               	decfsz	??_turnLeft_135^0,f,c
  4425   0046F4  D7FC               	bra	u7497
  4426   0046F6  2E23               	decfsz	(??_turnLeft_135+1)^0,f,c
  4427   0046F8  D7FA               	bra	u7497
  4428   0046FA  F000               	nop	
  4429   0046FC                     
  4430                           ;MazeRobot.X/dc_motor.c: 361:     stop(mL, mR);
  4431   0046FC  C01E  F018         	movff	turnLeft_135@mL,stop@mL
  4432   004700  C01F  F019         	movff	turnLeft_135@mL+1,stop@mL+1
  4433   004704  C020  F01A         	movff	turnLeft_135@mR,stop@mR
  4434   004708  C021  F01B         	movff	turnLeft_135@mR+1,stop@mR+1
  4435   00470C  ECFC  F027         	call	_stop	;wreg free
  4436   004710                     
  4437                           ;MazeRobot.X/dc_motor.c: 363:     mL->direction = 0;
  4438   004710  EE20 F001          	lfsr	2,1
  4439   004714  501E               	movf	turnLeft_135@mL^0,w,c
  4440   004716  26D9               	addwf	fsr2l,f,c
  4441   004718  501F               	movf	(turnLeft_135@mL+1)^0,w,c
  4442   00471A  22DA               	addwfc	fsr2h,f,c
  4443   00471C  0E00               	movlw	0
  4444   00471E  6EDF               	movwf	indf2,c
  4445   004720                     
  4446                           ;MazeRobot.X/dc_motor.c: 364:     mR->direction = 1;
  4447   004720  EE20 F001          	lfsr	2,1
  4448   004724  5020               	movf	turnLeft_135@mR^0,w,c
  4449   004726  26D9               	addwf	fsr2l,f,c
  4450   004728  5021               	movf	(turnLeft_135@mR+1)^0,w,c
  4451   00472A  22DA               	addwfc	fsr2h,f,c
  4452   00472C  0E01               	movlw	1
  4453   00472E  6EDF               	movwf	indf2,c
  4454   004730                     
  4455                           ;MazeRobot.X/dc_motor.c: 366:     mL->brakemode = 1;
  4456   004730  EE20 F002          	lfsr	2,2
  4457   004734  501E               	movf	turnLeft_135@mL^0,w,c
  4458   004736  26D9               	addwf	fsr2l,f,c
  4459   004738  501F               	movf	(turnLeft_135@mL+1)^0,w,c
  4460   00473A  22DA               	addwfc	fsr2h,f,c
  4461   00473C  0E01               	movlw	1
  4462   00473E  6EDF               	movwf	indf2,c
  4463   004740                     
  4464                           ;MazeRobot.X/dc_motor.c: 367:     mL->brakemode = 1;
  4465   004740  EE20 F002          	lfsr	2,2
  4466   004744  501E               	movf	turnLeft_135@mL^0,w,c
  4467   004746  26D9               	addwf	fsr2l,f,c
  4468   004748  501F               	movf	(turnLeft_135@mL+1)^0,w,c
  4469   00474A  22DA               	addwfc	fsr2h,f,c
  4470   00474C  0E01               	movlw	1
  4471   00474E  6EDF               	movwf	indf2,c
  4472                           
  4473                           ;MazeRobot.X/dc_motor.c: 369:     while((mL->power < 80) || (mR->power < 80)){
  4474   004750  EFC2  F023         	goto	l4993
  4475   004754                     l4987:
  4476                           
  4477                           ;MazeRobot.X/dc_motor.c: 370:         mL->power += 10;
  4478   004754  C01E  FFD9         	movff	turnLeft_135@mL,fsr2l
  4479   004758  C01F  FFDA         	movff	turnLeft_135@mL+1,fsr2h
  4480   00475C  0E0A               	movlw	10
  4481   00475E  26DF               	addwf	indf2,f,c
  4482                           
  4483                           ;MazeRobot.X/dc_motor.c: 371:         mR->power += 10;
  4484   004760  C020  FFD9         	movff	turnLeft_135@mR,fsr2l
  4485   004764  C021  FFDA         	movff	turnLeft_135@mR+1,fsr2h
  4486   004768  0E0A               	movlw	10
  4487   00476A  26DF               	addwf	indf2,f,c
  4488   00476C                     
  4489                           ;MazeRobot.X/dc_motor.c: 372:         setMotorPWM(mL);
  4490   00476C  C01E  F012         	movff	turnLeft_135@mL,setMotorPWM@m
  4491   004770  C01F  F013         	movff	turnLeft_135@mL+1,setMotorPWM@m+1
  4492   004774  EC6E  F01F         	call	_setMotorPWM	;wreg free
  4493   004778                     
  4494                           ;MazeRobot.X/dc_motor.c: 373:         setMotorPWM(mR);
  4495   004778  C020  F012         	movff	turnLeft_135@mR,setMotorPWM@m
  4496   00477C  C021  F013         	movff	turnLeft_135@mR+1,setMotorPWM@m+1
  4497   004780  EC6E  F01F         	call	_setMotorPWM	;wreg free
  4498   004784                     l4993:
  4499                           
  4500                           ;MazeRobot.X/dc_motor.c: 369:     while((mL->power < 80) || (mR->power < 80)){
  4501   004784  C01E  FFD9         	movff	turnLeft_135@mL,fsr2l
  4502   004788  C01F  FFDA         	movff	turnLeft_135@mL+1,fsr2h
  4503   00478C  0E4F               	movlw	79
  4504   00478E  64DF               	cpfsgt	indf2,c
  4505   004790  EFCC  F023         	goto	u5281
  4506   004794  EFCE  F023         	goto	u5280
  4507   004798                     u5281:
  4508   004798  EFAA  F023         	goto	l4987
  4509   00479C                     u5280:
  4510   00479C  C020  FFD9         	movff	turnLeft_135@mR,fsr2l
  4511   0047A0  C021  FFDA         	movff	turnLeft_135@mR+1,fsr2h
  4512   0047A4  0E4F               	movlw	79
  4513   0047A6  64DF               	cpfsgt	indf2,c
  4514   0047A8  EFD8  F023         	goto	u5291
  4515   0047AC  EFDA  F023         	goto	u5290
  4516   0047B0                     u5291:
  4517   0047B0  EFAA  F023         	goto	l4987
  4518   0047B4                     u5290:
  4519   0047B4                     
  4520                           ;MazeRobot.X/dc_motor.c: 375:    _delay((unsigned long)((3*turning_time45)*(64000000/400
      +                          0.0)));
  4521   0047B4  0E31               	movlw	49
  4522   0047B6  6E23               	movwf	(??_turnLeft_135+1)^0,c
  4523   0047B8  0EB4               	movlw	180
  4524   0047BA  6E22               	movwf	??_turnLeft_135^0,c
  4525   0047BC  0E66               	movlw	102
  4526   0047BE                     u7507:
  4527   0047BE  2EE8               	decfsz	wreg,f,c
  4528   0047C0  D7FE               	bra	u7507
  4529   0047C2  2E22               	decfsz	??_turnLeft_135^0,f,c
  4530   0047C4  D7FC               	bra	u7507
  4531   0047C6  2E23               	decfsz	(??_turnLeft_135+1)^0,f,c
  4532   0047C8  D7FA               	bra	u7507
  4533   0047CA                     
  4534                           ;MazeRobot.X/dc_motor.c: 376:     stop(mL, mR);
  4535   0047CA  C01E  F018         	movff	turnLeft_135@mL,stop@mL
  4536   0047CE  C01F  F019         	movff	turnLeft_135@mL+1,stop@mL+1
  4537   0047D2  C020  F01A         	movff	turnLeft_135@mR,stop@mR
  4538   0047D6  C021  F01B         	movff	turnLeft_135@mR+1,stop@mR+1
  4539   0047DA  ECFC  F027         	call	_stop	;wreg free
  4540   0047DE  0012               	return		;funcret
  4541   0047E0                     __end_of_turnLeft_135:
  4542                           	callstack 0
  4543                           
  4544 ;; *************** function _sprintf *****************
  4545 ;; Defined at:
  4546 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_sprintf.c"
  4547 ;; Parameters:    Size  Location     Type
  4548 ;;  s               2   92[BANK0 ] PTR unsigned char 
  4549 ;;		 -> ADC2String@buf(40), colorDetect@string1(20), 
  4550 ;;  fmt             2   94[BANK0 ] PTR const unsigned char 
  4551 ;;		 -> STR_2(15), STR_1(19), 
  4552 ;; Auto vars:     Size  Location     Type
  4553 ;;  f              11  110[BANK0 ] struct _IO_FILE
  4554 ;;  ap              2  108[BANK0 ] PTR void [1]
  4555 ;;		 -> ?_sprintf(2), 
  4556 ;;  ret             2    0        int 
  4557 ;; Return value:  Size  Location     Type
  4558 ;;                  2   92[BANK0 ] int 
  4559 ;; Registers used:
  4560 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4561 ;; Tracked objects:
  4562 ;;		On entry : 0/0
  4563 ;;		On exit  : 0/0
  4564 ;;		Unchanged: 0/0
  4565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4566 ;;      Params:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4567 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4569 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4570 ;;Total ram usage:       29 bytes
  4571 ;; Hardware stack levels used: 1
  4572 ;; Hardware stack levels required when called: 9
  4573 ;; This function calls:
  4574 ;;		_vfprintf
  4575 ;; This function is called by:
  4576 ;;		_colorDetect
  4577 ;;		_ADC2String
  4578 ;; This function uses a non-reentrant model
  4579 ;;
  4580                           
  4581                           	psect	text12
  4582   005542                     __ptext12:
  4583                           	callstack 0
  4584   005542                     _sprintf:
  4585                           	callstack 20
  4586   005542  0EC0               	movlw	low (?_sprintf+4)
  4587   005544  0100               	movlb	0	; () banked
  4588   005546  6FCC               	movwf	sprintf@ap& (0+255),b
  4589   005548  0E00               	movlw	high (?_sprintf+4)
  4590   00554A  6FCD               	movwf	(sprintf@ap+1)& (0+255),b
  4591   00554C  C0BC  F0CE         	movff	sprintf@s,sprintf@f
  4592   005550  C0BD  F0CF         	movff	sprintf@s+1,sprintf@f+1
  4593   005554                     
  4594                           ; BSR set to: 0
  4595   005554  0E00               	movlw	0
  4596   005556  6FD2               	movwf	(sprintf@f+4)& (0+255),b
  4597   005558  0E00               	movlw	0
  4598   00555A  6FD1               	movwf	(sprintf@f+3)& (0+255),b
  4599   00555C                     
  4600                           ; BSR set to: 0
  4601   00555C  0E00               	movlw	0
  4602   00555E  6FD8               	movwf	(sprintf@f+10)& (0+255),b
  4603   005560  0E00               	movlw	0
  4604   005562  6FD7               	movwf	(sprintf@f+9)& (0+255),b
  4605   005564                     
  4606                           ; BSR set to: 0
  4607   005564  0ECE               	movlw	low sprintf@f
  4608   005566  6FB4               	movwf	vfprintf@fp& (0+255),b
  4609   005568  0E00               	movlw	high sprintf@f
  4610   00556A  6FB5               	movwf	(vfprintf@fp+1)& (0+255),b
  4611   00556C  C0BE  F0B6         	movff	sprintf@fmt,vfprintf@fmt
  4612   005570  C0BF  F0B7         	movff	sprintf@fmt+1,vfprintf@fmt+1
  4613   005574  0ECC               	movlw	low sprintf@ap
  4614   005576  6FB8               	movwf	vfprintf@ap& (0+255),b
  4615   005578  0E00               	movlw	high sprintf@ap
  4616   00557A  6FB9               	movwf	(vfprintf@ap+1)& (0+255),b
  4617   00557C  EC76  F02A         	call	_vfprintf	;wreg free
  4618   005580  0100               	movlb	0	; () banked
  4619   005582  51D1               	movf	(sprintf@f+3)& (0+255),w,b
  4620   005584  25BC               	addwf	sprintf@s& (0+255),w,b
  4621   005586  6ED9               	movwf	fsr2l,c
  4622   005588  51D2               	movf	(sprintf@f+4)& (0+255),w,b
  4623   00558A  21BD               	addwfc	(sprintf@s+1)& (0+255),w,b
  4624   00558C  6EDA               	movwf	fsr2h,c
  4625   00558E  0E00               	movlw	0
  4626   005590  6EDF               	movwf	indf2,c
  4627   005592                     
  4628                           ; BSR set to: 0
  4629   005592  0012               	return		;funcret
  4630   005594                     __end_of_sprintf:
  4631                           	callstack 0
  4632                           
  4633 ;; *************** function _vfprintf *****************
  4634 ;; Defined at:
  4635 ;;		line 1520 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  4636 ;; Parameters:    Size  Location     Type
  4637 ;;  fp              2   84[BANK0 ] PTR struct _IO_FILE
  4638 ;;		 -> sprintf@f(11), 
  4639 ;;  fmt             2   86[BANK0 ] PTR const unsigned char 
  4640 ;;		 -> STR_2(15), STR_1(19), 
  4641 ;;  ap              2   88[BANK0 ] PTR PTR void 
  4642 ;;		 -> sprintf@ap(2), 
  4643 ;; Auto vars:     Size  Location     Type
  4644 ;;  cfmt            2   90[BANK0 ] PTR unsigned char 
  4645 ;;		 -> STR_2(15), STR_1(19), 
  4646 ;; Return value:  Size  Location     Type
  4647 ;;                  2   84[BANK0 ] int 
  4648 ;; Registers used:
  4649 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4650 ;; Tracked objects:
  4651 ;;		On entry : 0/0
  4652 ;;		On exit  : 0/0
  4653 ;;		Unchanged: 0/0
  4654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4655 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4656 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4658 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4659 ;;Total ram usage:        8 bytes
  4660 ;; Hardware stack levels used: 1
  4661 ;; Hardware stack levels required when called: 8
  4662 ;; This function calls:
  4663 ;;		_vfpfcnvrt
  4664 ;; This function is called by:
  4665 ;;		_sprintf
  4666 ;; This function uses a non-reentrant model
  4667 ;;
  4668                           
  4669                           	psect	text13
  4670   0054EC                     __ptext13:
  4671                           	callstack 0
  4672   0054EC                     _vfprintf:
  4673                           	callstack 20
  4674   0054EC                     
  4675                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1520: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\source
      +                          s\c99\common\doprnt.c: 1521: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\comm
      +                          on\doprnt.c: 1523:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\
      +                          common\doprnt.c: 1525:     cfmt = (char *)fmt;
  4676   0054EC  C0B6  F0BA         	movff	vfprintf@fmt,vfprintf@cfmt
  4677   0054F0  C0B7  F0BB         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  4678                           
  4679                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  4680   0054F4  EF8B  F02A         	goto	l5953
  4681   0054F8                     l5951:
  4682                           
  4683                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1533:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  4684   0054F8  C0B4  F0A3         	movff	vfprintf@fp,vfpfcnvrt@fp
  4685   0054FC  C0B5  F0A4         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  4686   005500  0EBA               	movlw	low vfprintf@cfmt
  4687   005502  0100               	movlb	0	; () banked
  4688   005504  6FA5               	movwf	vfpfcnvrt@fmt& (0+255),b
  4689   005506  0E00               	movlw	high vfprintf@cfmt
  4690   005508  6FA6               	movwf	(vfpfcnvrt@fmt+1)& (0+255),b
  4691   00550A  C0B8  F0A7         	movff	vfprintf@ap,vfpfcnvrt@ap
  4692   00550E  C0B9  F0A8         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  4693   005512  EC03  F01A         	call	_vfpfcnvrt	;wreg free
  4694   005516                     l5953:
  4695                           
  4696                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  4697   005516  C0BA  FFF6         	movff	vfprintf@cfmt,tblptrl
  4698   00551A  C0BB  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  4699   00551E                     	if	0	;tblptru may be non-zero
  4700   00551E                     	endif
  4701   00551E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4702   00551E  0E00               	movlw	low (__mediumconst shr (0+16))
  4703   005520  6EF8               	movwf	tblptru,c
  4704   005522                     	endif
  4705   005522  0008               	tblrd		*
  4706   005524  50F5               	movf	tablat,w,c
  4707   005526  0900               	iorlw	0
  4708   005528  A4D8               	btfss	status,2,c
  4709   00552A  EF99  F02A         	goto	u6661
  4710   00552E  EF9B  F02A         	goto	u6660
  4711   005532                     u6661:
  4712   005532  EF7C  F02A         	goto	l5951
  4713   005536                     u6660:
  4714   005536                     
  4715                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1538:  return 0;
  4716   005536  0E00               	movlw	0
  4717   005538  0100               	movlb	0	; () banked
  4718   00553A  6FB5               	movwf	(?_vfprintf+1)& (0+255),b
  4719   00553C  0E00               	movlw	0
  4720   00553E  6FB4               	movwf	?_vfprintf& (0+255),b
  4721   005540                     
  4722                           ; BSR set to: 0
  4723   005540  0012               	return		;funcret
  4724   005542                     __end_of_vfprintf:
  4725                           	callstack 0
  4726                           
  4727 ;; *************** function _vfpfcnvrt *****************
  4728 ;; Defined at:
  4729 ;;		line 1007 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  4730 ;; Parameters:    Size  Location     Type
  4731 ;;  fp              2   67[BANK0 ] PTR struct _IO_FILE
  4732 ;;		 -> sprintf@f(11), 
  4733 ;;  fmt             2   69[BANK0 ] PTR PTR unsigned char 
  4734 ;;		 -> vfprintf@cfmt(2), 
  4735 ;;  ap              2   71[BANK0 ] PTR PTR void 
  4736 ;;		 -> sprintf@ap(2), 
  4737 ;; Auto vars:     Size  Location     Type
  4738 ;;  convarg         8   73[BANK0 ] struct .
  4739 ;;  cp              2   82[BANK0 ] PTR unsigned char 
  4740 ;;		 -> STR_2(15), STR_1(19), 
  4741 ;;  i               2    0        int 
  4742 ;;  done            2    0        int 
  4743 ;;  c               1   81[BANK0 ] unsigned char 
  4744 ;; Return value:  Size  Location     Type
  4745 ;;                  1    wreg      void 
  4746 ;; Registers used:
  4747 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4748 ;; Tracked objects:
  4749 ;;		On entry : 0/0
  4750 ;;		On exit  : 0/0
  4751 ;;		Unchanged: 0/0
  4752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4753 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4754 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4755 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4756 ;;      Totals:         2      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4757 ;;Total ram usage:       19 bytes
  4758 ;; Hardware stack levels used: 1
  4759 ;; Hardware stack levels required when called: 7
  4760 ;; This function calls:
  4761 ;;		_dtoa
  4762 ;;		_efgtoa
  4763 ;;		_fputc
  4764 ;; This function is called by:
  4765 ;;		_vfprintf
  4766 ;; This function uses a non-reentrant model
  4767 ;;
  4768                           
  4769                           	psect	text14
  4770   003406                     __ptext14:
  4771                           	callstack 0
  4772   003406                     _vfpfcnvrt:
  4773                           	callstack 20
  4774   003406                     
  4775                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1007: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1008: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\dopr
      +                          nt.c: 1009:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 1010:     int done, i;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1016:  } convarg;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1019:     if ((*fmt)[0] == '%') {
  4776   003406  C0A5  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4777   00340A  C0A6  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4778   00340E  CFDE FFF6          	movff	postinc2,tblptrl
  4779   003412  CFDD FFF7          	movff	postdec2,tblptrh
  4780   003416                     	if	0	;tblptru may be non-zero
  4781   003416                     	endif
  4782   003416                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4783   003416  0E00               	movlw	low (__mediumconst shr (0+16))
  4784   003418  6EF8               	movwf	tblptru,c
  4785   00341A                     	endif
  4786   00341A  0008               	tblrd		*
  4787   00341C  50F5               	movf	tablat,w,c
  4788   00341E  0A25               	xorlw	37
  4789   003420  A4D8               	btfss	status,2,c
  4790   003422  EF15  F01A         	goto	u6621
  4791   003426  EF17  F01A         	goto	u6620
  4792   00342A                     u6621:
  4793   00342A  EF6F  F01B         	goto	l5925
  4794   00342E                     u6620:
  4795   00342E                     
  4796                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1020:         ++*
      +                          fmt;
  4797   00342E  C0A5  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4798   003432  C0A6  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4799   003436  2ADE               	incf	postinc2,f,c
  4800   003438  0E00               	movlw	0
  4801   00343A  22DD               	addwfc	postdec2,f,c
  4802   00343C                     
  4803                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1022:         fla
      +                          gs = width = 0;
  4804   00343C  0E00               	movlw	0
  4805   00343E  0100               	movlb	0	; () banked
  4806   003440  6FF3               	movwf	(_width+1)& (0+255),b
  4807   003442  0E00               	movlw	0
  4808   003444  6FF2               	movwf	_width& (0+255),b
  4809   003446  C0F2  F0FA         	movff	_width,_flags
  4810   00344A                     
  4811                           ; BSR set to: 0
  4812                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1023:         pre
      +                          c = -1;
  4813   00344A  69F4               	setf	_prec& (0+255),b
  4814   00344C  69F5               	setf	(_prec+1)& (0+255),b
  4815   00344E                     
  4816                           ; BSR set to: 0
  4817                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1117:   cp = *fmt
      +                          ;
  4818   00344E  C0A5  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4819   003452  C0A6  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4820   003456  CFDE F0B2          	movff	postinc2,vfpfcnvrt@cp
  4821   00345A  CFDD F0B3          	movff	postdec2,vfpfcnvrt@cp+1
  4822   00345E                     
  4823                           ; BSR set to: 0
  4824                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1187:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  4825   00345E  C0B2  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  4826   003462  C0B3  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  4827   003466                     	if	0	;tblptru may be non-zero
  4828   003466                     	endif
  4829   003466                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4830   003466  0E00               	movlw	low (__mediumconst shr (0+16))
  4831   003468  6EF8               	movwf	tblptru,c
  4832   00346A                     	endif
  4833   00346A  0008               	tblrd		*
  4834   00346C  50F5               	movf	tablat,w,c
  4835   00346E  0A64               	xorlw	100
  4836   003470  B4D8               	btfsc	status,2,c
  4837   003472  EF3D  F01A         	goto	u6631
  4838   003476  EF3F  F01A         	goto	u6630
  4839   00347A                     u6631:
  4840   00347A  EF4F  F01A         	goto	l5881
  4841   00347E                     u6630:
  4842   00347E                     
  4843                           ; BSR set to: 0
  4844   00347E  C0B2  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  4845   003482  C0B3  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  4846   003486                     	if	0	;tblptru may be non-zero
  4847   003486                     	endif
  4848   003486                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4849   003486  0E00               	movlw	low (__mediumconst shr (0+16))
  4850   003488  6EF8               	movwf	tblptru,c
  4851   00348A                     	endif
  4852   00348A  0008               	tblrd		*
  4853   00348C  50F5               	movf	tablat,w,c
  4854   00348E  0A69               	xorlw	105
  4855   003490  A4D8               	btfss	status,2,c
  4856   003492  EF4D  F01A         	goto	u6641
  4857   003496  EF4F  F01A         	goto	u6640
  4858   00349A                     u6641:
  4859   00349A  EF92  F01A         	goto	l5887
  4860   00349E                     u6640:
  4861   00349E                     l5881:
  4862                           
  4863                           ; BSR set to: 0
  4864                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1230:    convarg.
      +                          ll = (long long)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  4865   00349E  C0A7  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  4866   0034A2  C0A8  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  4867   0034A6  CFDF F055          	movff	indf2,??_vfpfcnvrt
  4868   0034AA  0E02               	movlw	2
  4869   0034AC  26DE               	addwf	postinc2,f,c
  4870   0034AE  CFDF F056          	movff	indf2,??_vfpfcnvrt+1
  4871   0034B2  0E00               	movlw	0
  4872   0034B4  22DD               	addwfc	postdec2,f,c
  4873   0034B6  C055  FFD9         	movff	??_vfpfcnvrt,fsr2l
  4874   0034BA  C056  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  4875   0034BE  CFDE F0A9          	movff	postinc2,vfpfcnvrt@convarg
  4876   0034C2  CFDD F0AA          	movff	postdec2,vfpfcnvrt@convarg+1
  4877   0034C6  0E00               	movlw	0
  4878   0034C8  BFAA               	btfsc	(vfpfcnvrt@convarg+1)& (0+255),7,b
  4879   0034CA  0EFF               	movlw	-1
  4880   0034CC  6FAB               	movwf	(vfpfcnvrt@convarg+2)& (0+255),b
  4881   0034CE  6FAC               	movwf	(vfpfcnvrt@convarg+3)& (0+255),b
  4882   0034D0  6FAD               	movwf	(vfpfcnvrt@convarg+4)& (0+255),b
  4883   0034D2  6FAE               	movwf	(vfpfcnvrt@convarg+5)& (0+255),b
  4884   0034D4  6FAF               	movwf	(vfpfcnvrt@convarg+6)& (0+255),b
  4885   0034D6  6FB0               	movwf	(vfpfcnvrt@convarg+7)& (0+255),b
  4886                           
  4887                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1232:    *fmt = c
      +                          p+1;
  4888   0034D8  0E01               	movlw	1
  4889   0034DA  25B2               	addwf	vfpfcnvrt@cp& (0+255),w,b
  4890   0034DC  6E55               	movwf	??_vfpfcnvrt^0,c
  4891   0034DE  0E00               	movlw	0
  4892   0034E0  21B3               	addwfc	(vfpfcnvrt@cp+1)& (0+255),w,b
  4893   0034E2  6E56               	movwf	(??_vfpfcnvrt+1)^0,c
  4894   0034E4  C0A5  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4895   0034E8  C0A6  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4896   0034EC  C055  FFDE         	movff	??_vfpfcnvrt,postinc2
  4897   0034F0  C056  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  4898   0034F4                     
  4899                           ; BSR set to: 0
  4900                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1233:    return (
      +                          void) dtoa(fp, convarg.ll);;	Return value of _vfpfcnvrt is never used
  4901   0034F4  C0A3  F020         	movff	vfpfcnvrt@fp,dtoa@fp
  4902   0034F8  C0A4  F021         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  4903   0034FC  C0A9  F022         	movff	vfpfcnvrt@convarg,dtoa@d
  4904   003500  C0AA  F023         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  4905   003504  C0AB  F024         	movff	vfpfcnvrt@convarg+2,dtoa@d+2
  4906   003508  C0AC  F025         	movff	vfpfcnvrt@convarg+3,dtoa@d+3
  4907   00350C  C0AD  F026         	movff	vfpfcnvrt@convarg+4,dtoa@d+4
  4908   003510  C0AE  F027         	movff	vfpfcnvrt@convarg+5,dtoa@d+5
  4909   003514  C0AF  F028         	movff	vfpfcnvrt@convarg+6,dtoa@d+6
  4910   003518  C0B0  F029         	movff	vfpfcnvrt@convarg+7,dtoa@d+7
  4911   00351C  EC86  F01B         	call	_dtoa	;wreg free
  4912   003520  EF85  F01B         	goto	l1308
  4913   003524                     l5887:
  4914                           
  4915                           ; BSR set to: 0
  4916                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1392:   cp = *fmt
      +                          ;
  4917   003524  C0A5  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4918   003528  C0A6  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4919   00352C  CFDE F0B2          	movff	postinc2,vfpfcnvrt@cp
  4920   003530  CFDD F0B3          	movff	postdec2,vfpfcnvrt@cp+1
  4921   003534                     
  4922                           ; BSR set to: 0
  4923                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1393:   c = *cp;
  4924   003534  C0B2  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  4925   003538  C0B3  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  4926   00353C                     	if	0	;tblptru may be non-zero
  4927   00353C                     	endif
  4928   00353C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4929   00353C  0E00               	movlw	low (__mediumconst shr (0+16))
  4930   00353E  6EF8               	movwf	tblptru,c
  4931   003540                     	endif
  4932   003540  0008               	tblrd		*
  4933   003542  CFF5 F0B1          	movff	tablat,vfpfcnvrt@c
  4934                           
  4935                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1394:   switch(c)
      +                           {
  4936   003546  EFB1  F01A         	goto	l5899
  4937   00354A                     l5891:
  4938                           
  4939                           ; BSR set to: 0
  4940                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1398:     cp++;
  4941   00354A  4BB2               	infsnz	vfpfcnvrt@cp& (0+255),f,b
  4942   00354C  2BB3               	incf	(vfpfcnvrt@cp+1)& (0+255),f,b
  4943                           
  4944                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1399:     break;
  4945   00354E  EFCA  F01A         	goto	l5901
  4946   003552                     l5893:
  4947                           
  4948                           ; BSR set to: 0
  4949                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1424:     c = 'l'
      +                          ;
  4950   003552  0E6C               	movlw	108
  4951   003554  6FB1               	movwf	vfpfcnvrt@c& (0+255),b
  4952                           
  4953                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1425:     break;
  4954   003556  EFCA  F01A         	goto	l5901
  4955   00355A                     l5895:
  4956                           
  4957                           ; BSR set to: 0
  4958                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1427:     c = 0;
  4959   00355A  0E00               	movlw	0
  4960   00355C  6FB1               	movwf	vfpfcnvrt@c& (0+255),b
  4961                           
  4962                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1428:     break;
  4963   00355E  EFCA  F01A         	goto	l5901
  4964   003562                     l5899:
  4965                           
  4966                           ; BSR set to: 0
  4967   003562  51B1               	movf	vfpfcnvrt@c& (0+255),w,b
  4968   003564  6E55               	movwf	??_vfpfcnvrt^0,c
  4969   003566  6A56               	clrf	(??_vfpfcnvrt+1)^0,c
  4970                           
  4971                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4972                           ; Switch size 1, requested type "simple"
  4973                           ; Number of cases is 1, Range of values is 0 to 0
  4974                           ; switch strategies available:
  4975                           ; Name         Instructions Cycles
  4976                           ; simple_byte            4     3 (average)
  4977                           ;	Chosen strategy is simple_byte
  4978   003568  5056               	movf	(??_vfpfcnvrt+1)^0,w,c
  4979   00356A  0A00               	xorlw	0	; case 0
  4980   00356C  B4D8               	btfsc	status,2,c
  4981   00356E  EFBB  F01A         	goto	l6325
  4982   003572  EFAD  F01A         	goto	l5895
  4983   003576                     l6325:
  4984                           
  4985                           ; BSR set to: 0
  4986                           ; Switch size 1, requested type "simple"
  4987                           ; Number of cases is 3, Range of values is 76 to 108
  4988                           ; switch strategies available:
  4989                           ; Name         Instructions Cycles
  4990                           ; simple_byte           10     6 (average)
  4991                           ;	Chosen strategy is simple_byte
  4992   003576  5055               	movf	??_vfpfcnvrt^0,w,c
  4993   003578  0A4C               	xorlw	76	; case 76
  4994   00357A  B4D8               	btfsc	status,2,c
  4995   00357C  EFA5  F01A         	goto	l5891
  4996   003580  0A2A               	xorlw	42	; case 102
  4997   003582  B4D8               	btfsc	status,2,c
  4998   003584  EFA9  F01A         	goto	l5893
  4999   003588  0A0A               	xorlw	10	; case 108
  5000   00358A  B4D8               	btfsc	status,2,c
  5001   00358C  EFA5  F01A         	goto	l5891
  5002   003590  EFAD  F01A         	goto	l5895
  5003   003594                     l5901:
  5004                           
  5005                           ; BSR set to: 0
  5006   003594  C0B2  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  5007   003598  C0B3  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  5008   00359C                     	if	0	;tblptru may be non-zero
  5009   00359C                     	endif
  5010   00359C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  5011   00359C  0E00               	movlw	low (__mediumconst shr (0+16))
  5012   00359E  6EF8               	movwf	tblptru,c
  5013   0035A0                     	endif
  5014   0035A0  0008               	tblrd		*
  5015   0035A2  50F5               	movf	tablat,w,c
  5016   0035A4  0A66               	xorlw	102
  5017   0035A6  A4D8               	btfss	status,2,c
  5018   0035A8  EFD8  F01A         	goto	u6651
  5019   0035AC  EFDA  F01A         	goto	u6650
  5020   0035B0                     u6651:
  5021   0035B0  EF66  F01B         	goto	l5921
  5022   0035B4                     u6650:
  5023   0035B4  EF10  F01B         	goto	l5909
  5024   0035B8                     l5903:
  5025                           
  5026                           ; BSR set to: 0
  5027                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1459:      convar
      +                          g.f = (long double)(*(double *)__va_arg(*(double **)ap, (double)0));
  5028   0035B8  C0A7  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  5029   0035BC  C0A8  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  5030   0035C0  CFDF F055          	movff	indf2,??_vfpfcnvrt
  5031   0035C4  0E04               	movlw	4
  5032   0035C6  26DE               	addwf	postinc2,f,c
  5033   0035C8  CFDF F056          	movff	indf2,??_vfpfcnvrt+1
  5034   0035CC  0E00               	movlw	0
  5035   0035CE  22DD               	addwfc	postdec2,f,c
  5036   0035D0  C055  FFD9         	movff	??_vfpfcnvrt,fsr2l
  5037   0035D4  C056  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  5038   0035D8  CFDE F0A9          	movff	postinc2,vfpfcnvrt@convarg
  5039   0035DC  CFDE F0AA          	movff	postinc2,vfpfcnvrt@convarg+1
  5040   0035E0  CFDE F0AB          	movff	postinc2,vfpfcnvrt@convarg+2
  5041   0035E4  CFDE F0AC          	movff	postinc2,vfpfcnvrt@convarg+3
  5042                           
  5043                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1460:      break;
  5044   0035E8  EF25  F01B         	goto	l5911
  5045   0035EC                     l5905:
  5046                           
  5047                           ; BSR set to: 0
  5048                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1462:      convar
      +                          g.f = (long double)(*(long double *)__va_arg(*(long double **)ap, (long double)0));
  5049   0035EC  C0A7  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  5050   0035F0  C0A8  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  5051   0035F4  CFDF F055          	movff	indf2,??_vfpfcnvrt
  5052   0035F8  0E04               	movlw	4
  5053   0035FA  26DE               	addwf	postinc2,f,c
  5054   0035FC  CFDF F056          	movff	indf2,??_vfpfcnvrt+1
  5055   003600  0E00               	movlw	0
  5056   003602  22DD               	addwfc	postdec2,f,c
  5057   003604  C055  FFD9         	movff	??_vfpfcnvrt,fsr2l
  5058   003608  C056  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  5059   00360C  CFDE F0A9          	movff	postinc2,vfpfcnvrt@convarg
  5060   003610  CFDE F0AA          	movff	postinc2,vfpfcnvrt@convarg+1
  5061   003614  CFDE F0AB          	movff	postinc2,vfpfcnvrt@convarg+2
  5062   003618  CFDE F0AC          	movff	postinc2,vfpfcnvrt@convarg+3
  5063                           
  5064                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1463:      break;
  5065   00361C  EF25  F01B         	goto	l5911
  5066   003620                     l5909:
  5067                           
  5068                           ; BSR set to: 0
  5069   003620  51B1               	movf	vfpfcnvrt@c& (0+255),w,b
  5070   003622  6E55               	movwf	??_vfpfcnvrt^0,c
  5071   003624  6A56               	clrf	(??_vfpfcnvrt+1)^0,c
  5072                           
  5073                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5074                           ; Switch size 1, requested type "simple"
  5075                           ; Number of cases is 1, Range of values is 0 to 0
  5076                           ; switch strategies available:
  5077                           ; Name         Instructions Cycles
  5078                           ; simple_byte            4     3 (average)
  5079                           ;	Chosen strategy is simple_byte
  5080   003626  5056               	movf	(??_vfpfcnvrt+1)^0,w,c
  5081   003628  0A00               	xorlw	0	; case 0
  5082   00362A  B4D8               	btfsc	status,2,c
  5083   00362C  EF1A  F01B         	goto	l6327
  5084   003630  EF25  F01B         	goto	l5911
  5085   003634                     l6327:
  5086                           
  5087                           ; BSR set to: 0
  5088                           ; Switch size 1, requested type "simple"
  5089                           ; Number of cases is 2, Range of values is 76 to 108
  5090                           ; switch strategies available:
  5091                           ; Name         Instructions Cycles
  5092                           ; simple_byte            7     4 (average)
  5093                           ;	Chosen strategy is simple_byte
  5094   003634  5055               	movf	??_vfpfcnvrt^0,w,c
  5095   003636  0A4C               	xorlw	76	; case 76
  5096   003638  B4D8               	btfsc	status,2,c
  5097   00363A  EFF6  F01A         	goto	l5905
  5098   00363E  0A20               	xorlw	32	; case 108
  5099   003640  B4D8               	btfsc	status,2,c
  5100   003642  EFDC  F01A         	goto	l5903
  5101   003646  EF25  F01B         	goto	l5911
  5102   00364A                     l5911:
  5103                           
  5104                           ; BSR set to: 0
  5105                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1465:    *fmt = c
      +                          p+1;
  5106   00364A  0E01               	movlw	1
  5107   00364C  25B2               	addwf	vfpfcnvrt@cp& (0+255),w,b
  5108   00364E  6E55               	movwf	??_vfpfcnvrt^0,c
  5109   003650  0E00               	movlw	0
  5110   003652  21B3               	addwfc	(vfpfcnvrt@cp+1)& (0+255),w,b
  5111   003654  6E56               	movwf	(??_vfpfcnvrt+1)^0,c
  5112   003656  C0A5  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  5113   00365A  C0A6  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  5114   00365E  C055  FFDE         	movff	??_vfpfcnvrt,postinc2
  5115   003662  C056  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  5116                           
  5117                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1466:    switch (
      +                          *cp) {
  5118   003666  EF4E  F01B         	goto	l5919
  5119   00366A                     l5913:
  5120                           
  5121                           ; BSR set to: 0
  5122                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1493:      return
      +                           (void) efgtoa(fp, convarg.f, *cp);;	Return value of _vfpfcnvrt is never used
  5123   00366A  C0A3  F070         	movff	vfpfcnvrt@fp,efgtoa@fp
  5124   00366E  C0A4  F071         	movff	vfpfcnvrt@fp+1,efgtoa@fp+1
  5125   003672  C0A9  F072         	movff	vfpfcnvrt@convarg,efgtoa@f
  5126   003676  C0AA  F073         	movff	vfpfcnvrt@convarg+1,efgtoa@f+1
  5127   00367A  C0AB  F074         	movff	vfpfcnvrt@convarg+2,efgtoa@f+2
  5128   00367E  C0AC  F075         	movff	vfpfcnvrt@convarg+3,efgtoa@f+3
  5129   003682  C0B2  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  5130   003686  C0B3  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  5131   00368A                     	if	0	;tblptru may be non-zero
  5132   00368A                     	endif
  5133   00368A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  5134   00368A  0E00               	movlw	low (__mediumconst shr (0+16))
  5135   00368C  6EF8               	movwf	tblptru,c
  5136   00368E                     	endif
  5137   00368E  0008               	tblrd		*
  5138   003690  CFF5 F076          	movff	tablat,efgtoa@c
  5139   003694  EC2B  F00D         	call	_efgtoa	;wreg free
  5140   003698  EF85  F01B         	goto	l1308
  5141   00369C                     l5919:
  5142                           
  5143                           ; BSR set to: 0
  5144   00369C  C0B2  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  5145   0036A0  C0B3  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  5146   0036A4                     	if	0	;tblptru may be non-zero
  5147   0036A4                     	endif
  5148   0036A4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  5149   0036A4  0E00               	movlw	low (__mediumconst shr (0+16))
  5150   0036A6  6EF8               	movwf	tblptru,c
  5151   0036A8                     	endif
  5152   0036A8  0008               	tblrd		*
  5153   0036AA  50F5               	movf	tablat,w,c
  5154   0036AC  6E55               	movwf	??_vfpfcnvrt^0,c
  5155   0036AE  6A56               	clrf	(??_vfpfcnvrt+1)^0,c
  5156                           
  5157                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5158                           ; Switch size 1, requested type "simple"
  5159                           ; Number of cases is 1, Range of values is 0 to 0
  5160                           ; switch strategies available:
  5161                           ; Name         Instructions Cycles
  5162                           ; simple_byte            4     3 (average)
  5163                           ;	Chosen strategy is simple_byte
  5164   0036B0  5056               	movf	(??_vfpfcnvrt+1)^0,w,c
  5165   0036B2  0A00               	xorlw	0	; case 0
  5166   0036B4  B4D8               	btfsc	status,2,c
  5167   0036B6  EF5F  F01B         	goto	l6329
  5168   0036BA  EF66  F01B         	goto	l5921
  5169   0036BE                     l6329:
  5170                           
  5171                           ; BSR set to: 0
  5172                           ; Switch size 1, requested type "simple"
  5173                           ; Number of cases is 1, Range of values is 102 to 102
  5174                           ; switch strategies available:
  5175                           ; Name         Instructions Cycles
  5176                           ; simple_byte            4     3 (average)
  5177                           ;	Chosen strategy is simple_byte
  5178   0036BE  5055               	movf	??_vfpfcnvrt^0,w,c
  5179   0036C0  0A66               	xorlw	102	; case 102
  5180   0036C2  B4D8               	btfsc	status,2,c
  5181   0036C4  EF35  F01B         	goto	l5913
  5182   0036C8  EF66  F01B         	goto	l5921
  5183   0036CC                     l5921:
  5184                           
  5185                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1509:         ++*
      +                          fmt;
  5186   0036CC  C0A5  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  5187   0036D0  C0A6  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  5188   0036D4  2ADE               	incf	postinc2,f,c
  5189   0036D6  0E00               	movlw	0
  5190   0036D8  22DD               	addwfc	postdec2,f,c
  5191   0036DA  EF85  F01B         	goto	l1308
  5192   0036DE                     l5925:
  5193                           
  5194                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1514:     fputc((
      +                          int)(*fmt)[0], fp);
  5195   0036DE  C0A5  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  5196   0036E2  C0A6  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  5197   0036E6  CFDE FFF6          	movff	postinc2,tblptrl
  5198   0036EA  CFDD FFF7          	movff	postdec2,tblptrh
  5199   0036EE                     	if	0	;tblptru may be non-zero
  5200   0036EE                     	endif
  5201   0036EE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  5202   0036EE  0E00               	movlw	low (__mediumconst shr (0+16))
  5203   0036F0  6EF8               	movwf	tblptru,c
  5204   0036F2                     	endif
  5205   0036F2  0008               	tblrd		*
  5206   0036F4  50F5               	movf	tablat,w,c
  5207   0036F6  6E05               	movwf	fputc@c^0,c
  5208   0036F8  6A06               	clrf	(fputc@c+1)^0,c
  5209   0036FA  C0A3  F007         	movff	vfpfcnvrt@fp,fputc@fp
  5210   0036FE  C0A4  F008         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  5211   003702  EC97  F027         	call	_fputc	;wreg free
  5212   003706  EF66  F01B         	goto	l5921
  5213   00370A                     l1308:
  5214   00370A  0012               	return		;funcret
  5215   00370C                     __end_of_vfpfcnvrt:
  5216                           	callstack 0
  5217                           
  5218 ;; *************** function _efgtoa *****************
  5219 ;; Defined at:
  5220 ;;		line 506 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  5221 ;; Parameters:    Size  Location     Type
  5222 ;;  fp              2   16[BANK0 ] PTR struct _IO_FILE
  5223 ;;		 -> sprintf@f(11), 
  5224 ;;  f               4   18[BANK0 ] PTR struct _IO_FILE
  5225 ;;  c               1   22[BANK0 ] unsigned char 
  5226 ;; Auto vars:     Size  Location     Type
  5227 ;;  u               4   63[BANK0 ] struct flui
  5228 ;;  g               4   57[BANK0 ] struct flui
  5229 ;;  l               4   52[BANK0 ] struct flui
  5230 ;;  h               4   48[BANK0 ] struct flui
  5231 ;;  ou              4   42[BANK0 ] struct flui
  5232 ;;  n               2   61[BANK0 ] int 
  5233 ;;  i               2   46[BANK0 ] int 
  5234 ;;  w               2   40[BANK0 ] int 
  5235 ;;  e               2   38[BANK0 ] int 
  5236 ;;  m               2   36[BANK0 ] int 
  5237 ;;  d               2   34[BANK0 ] int 
  5238 ;;  t               2   27[BANK0 ] int 
  5239 ;;  p               2   25[BANK0 ] int 
  5240 ;;  ne              2   23[BANK0 ] int 
  5241 ;;  sign            1   56[BANK0 ] unsigned char 
  5242 ;;  nmode           1   33[BANK0 ] unsigned char 
  5243 ;;  mode            1   32[BANK0 ] unsigned char 
  5244 ;;  pp              1   31[BANK0 ] unsigned char 
  5245 ;;  esign           1    0        unsigned char 
  5246 ;; Return value:  Size  Location     Type
  5247 ;;                  1    wreg      void 
  5248 ;; Registers used:
  5249 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5250 ;; Tracked objects:
  5251 ;;		On entry : 0/0
  5252 ;;		On exit  : 0/0
  5253 ;;		Unchanged: 0/0
  5254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5255 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5256 ;;      Locals:         0      44       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5257 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5258 ;;      Totals:         2      51       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5259 ;;Total ram usage:       53 bytes
  5260 ;; Hardware stack levels used: 1
  5261 ;; Hardware stack levels required when called: 6
  5262 ;; This function calls:
  5263 ;;		___fladd
  5264 ;;		___fldiv
  5265 ;;		___fleq
  5266 ;;		___flge
  5267 ;;		___flmul
  5268 ;;		___flneg
  5269 ;;		___flsub
  5270 ;;		___fltol
  5271 ;;		___fpclassifyf
  5272 ;;		_floorf
  5273 ;;		_labs
  5274 ;;		_memcpy
  5275 ;;		_pad
  5276 ;;		_strcpy
  5277 ;; This function is called by:
  5278 ;;		_vfpfcnvrt
  5279 ;; This function uses a non-reentrant model
  5280 ;;
  5281                           
  5282                           	psect	text15
  5283   001A56                     __ptext15:
  5284                           	callstack 0
  5285   001A56                     _efgtoa:
  5286                           	callstack 20
  5287   001A56                     
  5288                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 506: static void 
      +                          efgtoa(FILE *fp, long double f, char c);C:\Program Files\Microchip\xc8\v2.40\pic\sources
      +                          \c99\common\doprnt.c: 507: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 508:     char mode, nmode, pp, sign, esign;;C:\Program Files\Microchip\xc8\v2
      +                          .40\pic\sources\c99\common\doprnt.c: 509:     int d, e, i, m, n, ne, p, t, w;;C:\Program
      +                           Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 510:     long double h, l;
  5289   001A56  0E00               	movlw	0
  5290   001A58  0100               	movlb	0	; () banked
  5291   001A5A  6F98               	movwf	efgtoa@sign& (0+255),b
  5292   001A5C                     
  5293                           ; BSR set to: 0
  5294                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 515:     g.f = f;
  5295   001A5C  C072  F099         	movff	efgtoa@f,efgtoa@g
  5296   001A60  C073  F09A         	movff	efgtoa@f+1,efgtoa@g+1
  5297   001A64  C074  F09B         	movff	efgtoa@f+2,efgtoa@g+2
  5298   001A68  C075  F09C         	movff	efgtoa@f+3,efgtoa@g+3
  5299   001A6C                     
  5300                           ; BSR set to: 0
  5301                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 516:     if (g.f 
      +                          < 0.0) {
  5302   001A6C  BF9C               	btfsc	(efgtoa@g+3)& (0+255),7,b
  5303   001A6E  EF3D  F00D         	goto	u6300
  5304   001A72  EF3B  F00D         	goto	u6301
  5305   001A76                     u6301:
  5306   001A76  EF51  F00D         	goto	l5655
  5307   001A7A                     u6300:
  5308   001A7A                     
  5309                           ; BSR set to: 0
  5310                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 517:         sign
      +                           = 1;
  5311   001A7A  0E01               	movlw	1
  5312   001A7C  6F98               	movwf	efgtoa@sign& (0+255),b
  5313   001A7E                     
  5314                           ; BSR set to: 0
  5315                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 518:         g.f 
      +                          = -g.f;
  5316   001A7E  C099  F005         	movff	efgtoa@g,___flneg@f1
  5317   001A82  C09A  F006         	movff	efgtoa@g+1,___flneg@f1+1
  5318   001A86  C09B  F007         	movff	efgtoa@g+2,___flneg@f1+2
  5319   001A8A  C09C  F008         	movff	efgtoa@g+3,___flneg@f1+3
  5320   001A8E  EC3A  F02C         	call	___flneg	;wreg free
  5321   001A92  C005  F099         	movff	?___flneg,efgtoa@g
  5322   001A96  C006  F09A         	movff	?___flneg+1,efgtoa@g+1
  5323   001A9A  C007  F09B         	movff	?___flneg+2,efgtoa@g+2
  5324   001A9E  C008  F09C         	movff	?___flneg+3,efgtoa@g+3
  5325   001AA2                     l5655:
  5326                           
  5327                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 522:     n = 0;
  5328   001AA2  0E00               	movlw	0
  5329   001AA4  0100               	movlb	0	; () banked
  5330   001AA6  6F9E               	movwf	(efgtoa@n+1)& (0+255),b
  5331   001AA8  0E00               	movlw	0
  5332   001AAA  6F9D               	movwf	efgtoa@n& (0+255),b
  5333   001AAC                     
  5334                           ; BSR set to: 0
  5335                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 523:     w = widt
      +                          h;
  5336   001AAC  C0F2  F088         	movff	_width,efgtoa@w
  5337   001AB0  C0F3  F089         	movff	_width+1,efgtoa@w+1
  5338   001AB4                     
  5339                           ; BSR set to: 0
  5340                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 524:     if (sign
  5341   001AB4  5198               	movf	efgtoa@sign& (0+255),w,b
  5342   001AB6  B4D8               	btfsc	status,2,c
  5343   001AB8  EF60  F00D         	goto	u6311
  5344   001ABC  EF62  F00D         	goto	u6310
  5345   001AC0                     u6311:
  5346   001AC0  EF76  F00D         	goto	l5669
  5347   001AC4                     u6310:
  5348   001AC4                     
  5349                           ; BSR set to: 0
  5350                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 528:    ) {;C:\Pr
      +                          ogram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 529:   sign = sign ? '-
      +                          ' : '+';
  5351   001AC4  5198               	movf	efgtoa@sign& (0+255),w,b
  5352   001AC6  A4D8               	btfss	status,2,c
  5353   001AC8  EF68  F00D         	goto	u6321
  5354   001ACC  EF6A  F00D         	goto	u6320
  5355   001AD0                     u6321:
  5356   001AD0  EF70  F00D         	goto	l5665
  5357   001AD4                     u6320:
  5358   001AD4                     
  5359                           ; BSR set to: 0
  5360   001AD4  0E00               	movlw	0
  5361   001AD6  6F7E               	movwf	(_efgtoa$2743+1)& (0+255),b
  5362   001AD8  0E2B               	movlw	43
  5363   001ADA  6F7D               	movwf	_efgtoa$2743& (0+255),b
  5364   001ADC  EF74  F00D         	goto	l5667
  5365   001AE0                     l5665:
  5366                           
  5367                           ; BSR set to: 0
  5368   001AE0  0E00               	movlw	0
  5369   001AE2  6F7E               	movwf	(_efgtoa$2743+1)& (0+255),b
  5370   001AE4  0E2D               	movlw	45
  5371   001AE6  6F7D               	movwf	_efgtoa$2743& (0+255),b
  5372   001AE8                     l5667:
  5373                           
  5374                           ; BSR set to: 0
  5375   001AE8  C07D  F098         	movff	_efgtoa$2743,efgtoa@sign
  5376   001AEC                     l5669:
  5377                           
  5378                           ; BSR set to: 0
  5379                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 538:     if (( __
      +                          fpclassifyf(g.f) == 1 )) {
  5380   001AEC  C099  F005         	movff	efgtoa@g,___fpclassifyf@x
  5381   001AF0  C09A  F006         	movff	efgtoa@g+1,___fpclassifyf@x+1
  5382   001AF4  C09B  F007         	movff	efgtoa@g+2,___fpclassifyf@x+2
  5383   001AF8  C09C  F008         	movff	efgtoa@g+3,___fpclassifyf@x+3
  5384   001AFC  ECF5  F024         	call	___fpclassifyf	;wreg free
  5385   001B00  0405               	decf	?___fpclassifyf^0,w,c
  5386   001B02  1006               	iorwf	(?___fpclassifyf+1)^0,w,c
  5387   001B04  A4D8               	btfss	status,2,c
  5388   001B06  EF87  F00D         	goto	u6331
  5389   001B0A  EF89  F00D         	goto	u6330
  5390   001B0E                     u6331:
  5391   001B0E  EFBC  F00D         	goto	l5687
  5392   001B12                     u6330:
  5393   001B12                     
  5394                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 539:   if (sign) 
      +                          {
  5395   001B12  0100               	movlb	0	; () banked
  5396   001B14  5198               	movf	efgtoa@sign& (0+255),w,b
  5397   001B16  B4D8               	btfsc	status,2,c
  5398   001B18  EF90  F00D         	goto	u6341
  5399   001B1C  EF92  F00D         	goto	u6340
  5400   001B20                     u6341:
  5401   001B20  EF9B  F00D         	goto	l5679
  5402   001B24                     u6340:
  5403   001B24                     
  5404                           ; BSR set to: 0
  5405                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 540:    dbuf[0] =
      +                           sign;
  5406   001B24  C098  F181         	movff	efgtoa@sign,_dbuf
  5407   001B28                     
  5408                           ; BSR set to: 0
  5409                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 541:    w--;
  5410   001B28  0788               	decf	efgtoa@w& (0+255),f,b
  5411   001B2A  A0D8               	btfss	status,0,c
  5412   001B2C  0789               	decf	(efgtoa@w+1)& (0+255),f,b
  5413   001B2E                     
  5414                           ; BSR set to: 0
  5415                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 542:    n = 1;
  5416   001B2E  0E00               	movlw	0
  5417   001B30  6F9E               	movwf	(efgtoa@n+1)& (0+255),b
  5418   001B32  0E01               	movlw	1
  5419   001B34  6F9D               	movwf	efgtoa@n& (0+255),b
  5420   001B36                     l5679:
  5421                           
  5422                           ; BSR set to: 0
  5423                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 550:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 551:             strcpy(&d
      +                          buf[n], "inf");
  5424   001B36  0E81               	movlw	low _dbuf
  5425   001B38  259D               	addwf	efgtoa@n& (0+255),w,b
  5426   001B3A  6E05               	movwf	strcpy@dest^0,c
  5427   001B3C  0E01               	movlw	high _dbuf
  5428   001B3E  219E               	addwfc	(efgtoa@n+1)& (0+255),w,b
  5429   001B40  6E06               	movwf	(strcpy@dest+1)^0,c
  5430   001B42  0E23               	movlw	low STR_3
  5431   001B44  6E07               	movwf	strcpy@src^0,c
  5432   001B46  0E0E               	movlw	high STR_3
  5433   001B48  6E08               	movwf	(strcpy@src+1)^0,c
  5434   001B4A  ECB5  F02B         	call	_strcpy	;wreg free
  5435   001B4E                     l5681:
  5436                           
  5437                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 552:         };C:
      +                          \Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 553:         w -= ((
      +                          sizeof("inf")/sizeof("inf"[0]))-1);
  5438   001B4E  0100               	movlb	0	; () banked
  5439   001B50  0EFD               	movlw	253
  5440   001B52  2788               	addwf	efgtoa@w& (0+255),f,b
  5441   001B54  0EFF               	movlw	255
  5442   001B56  2389               	addwfc	(efgtoa@w+1)& (0+255),f,b
  5443   001B58                     
  5444                           ; BSR set to: 0
  5445                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 554:         retu
      +                          rn (void) pad(fp, &dbuf[0], w);
  5446   001B58  C070  F015         	movff	efgtoa@fp,pad@fp
  5447   001B5C  C071  F016         	movff	efgtoa@fp+1,pad@fp+1
  5448   001B60  0E81               	movlw	low _dbuf
  5449   001B62  6E17               	movwf	pad@buf^0,c
  5450   001B64  0E01               	movlw	high _dbuf
  5451   001B66  6E18               	movwf	(pad@buf+1)^0,c
  5452   001B68  C088  F019         	movff	efgtoa@w,pad@p
  5453   001B6C  C089  F01A         	movff	efgtoa@w+1,pad@p+1
  5454   001B70  EC72  F029         	call	_pad	;wreg free
  5455   001B74  EF27  F012         	goto	l1260
  5456   001B78                     l5687:
  5457                           
  5458                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 556:     if (( __
      +                          fpclassifyf(g.f) == 0 )) {
  5459   001B78  C099  F005         	movff	efgtoa@g,___fpclassifyf@x
  5460   001B7C  C09A  F006         	movff	efgtoa@g+1,___fpclassifyf@x+1
  5461   001B80  C09B  F007         	movff	efgtoa@g+2,___fpclassifyf@x+2
  5462   001B84  C09C  F008         	movff	efgtoa@g+3,___fpclassifyf@x+3
  5463   001B88  ECF5  F024         	call	___fpclassifyf	;wreg free
  5464   001B8C  5005               	movf	?___fpclassifyf^0,w,c
  5465   001B8E  1006               	iorwf	(?___fpclassifyf+1)^0,w,c
  5466   001B90  A4D8               	btfss	status,2,c
  5467   001B92  EFCD  F00D         	goto	u6351
  5468   001B96  EFCF  F00D         	goto	u6350
  5469   001B9A                     u6351:
  5470   001B9A  EFEF  F00D         	goto	l5705
  5471   001B9E                     u6350:
  5472   001B9E                     
  5473                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 557:   if (sign) 
      +                          {
  5474   001B9E  0100               	movlb	0	; () banked
  5475   001BA0  5198               	movf	efgtoa@sign& (0+255),w,b
  5476   001BA2  B4D8               	btfsc	status,2,c
  5477   001BA4  EFD6  F00D         	goto	u6361
  5478   001BA8  EFD8  F00D         	goto	u6360
  5479   001BAC                     u6361:
  5480   001BAC  EFE1  F00D         	goto	l5697
  5481   001BB0                     u6360:
  5482   001BB0                     
  5483                           ; BSR set to: 0
  5484                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 558:    dbuf[0] =
      +                           sign;
  5485   001BB0  C098  F181         	movff	efgtoa@sign,_dbuf
  5486   001BB4                     
  5487                           ; BSR set to: 0
  5488                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 559:    w--;
  5489   001BB4  0788               	decf	efgtoa@w& (0+255),f,b
  5490   001BB6  A0D8               	btfss	status,0,c
  5491   001BB8  0789               	decf	(efgtoa@w+1)& (0+255),f,b
  5492   001BBA                     
  5493                           ; BSR set to: 0
  5494                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 560:    n = 1;
  5495   001BBA  0E00               	movlw	0
  5496   001BBC  6F9E               	movwf	(efgtoa@n+1)& (0+255),b
  5497   001BBE  0E01               	movlw	1
  5498   001BC0  6F9D               	movwf	efgtoa@n& (0+255),b
  5499   001BC2                     l5697:
  5500                           
  5501                           ; BSR set to: 0
  5502                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 568:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 569:             strcpy(&d
      +                          buf[n], "nan");
  5503   001BC2  0E81               	movlw	low _dbuf
  5504   001BC4  259D               	addwf	efgtoa@n& (0+255),w,b
  5505   001BC6  6E05               	movwf	strcpy@dest^0,c
  5506   001BC8  0E01               	movlw	high _dbuf
  5507   001BCA  219E               	addwfc	(efgtoa@n+1)& (0+255),w,b
  5508   001BCC  6E06               	movwf	(strcpy@dest+1)^0,c
  5509   001BCE  0E27               	movlw	low STR_6
  5510   001BD0  6E07               	movwf	strcpy@src^0,c
  5511   001BD2  0E0E               	movlw	high STR_6
  5512   001BD4  6E08               	movwf	(strcpy@src+1)^0,c
  5513   001BD6  ECB5  F02B         	call	_strcpy	;wreg free
  5514   001BDA  EFA7  F00D         	goto	l5681
  5515   001BDE                     l5705:
  5516                           
  5517                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 576:     u.f = 1.
      +                          0;
  5518   001BDE  0E00               	movlw	0
  5519   001BE0  0100               	movlb	0	; () banked
  5520   001BE2  6F9F               	movwf	efgtoa@u& (0+255),b
  5521   001BE4  0E00               	movlw	0
  5522   001BE6  6FA0               	movwf	(efgtoa@u+1)& (0+255),b
  5523   001BE8  0E80               	movlw	128
  5524   001BEA  6FA1               	movwf	(efgtoa@u+2)& (0+255),b
  5525   001BEC  0E3F               	movlw	63
  5526   001BEE  6FA2               	movwf	(efgtoa@u+3)& (0+255),b
  5527                           
  5528                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 577:     e = 0;
  5529   001BF0  0E00               	movlw	0
  5530   001BF2  6F87               	movwf	(efgtoa@e+1)& (0+255),b
  5531   001BF4  0E00               	movlw	0
  5532   001BF6  6F86               	movwf	efgtoa@e& (0+255),b
  5533   001BF8                     
  5534                           ; BSR set to: 0
  5535                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 578:  if (!(g.f =
      +                          = 0.0)) {
  5536   001BF8  C099  F005         	movff	efgtoa@g,___fleq@ff1
  5537   001BFC  C09A  F006         	movff	efgtoa@g+1,___fleq@ff1+1
  5538   001C00  C09B  F007         	movff	efgtoa@g+2,___fleq@ff1+2
  5539   001C04  C09C  F008         	movff	efgtoa@g+3,___fleq@ff1+3
  5540   001C08  0E00               	movlw	0
  5541   001C0A  6E09               	movwf	___fleq@ff2^0,c
  5542   001C0C  0E00               	movlw	0
  5543   001C0E  6E0A               	movwf	(___fleq@ff2+1)^0,c
  5544   001C10  0E00               	movlw	0
  5545   001C12  6E0B               	movwf	(___fleq@ff2+2)^0,c
  5546   001C14  0E00               	movlw	0
  5547   001C16  6E0C               	movwf	(___fleq@ff2+3)^0,c
  5548   001C18  EC53  F028         	call	___fleq	;wreg free
  5549   001C1C  B0D8               	btfsc	status,0,c
  5550   001C1E  EF13  F00E         	goto	u6371
  5551   001C22  EF15  F00E         	goto	u6370
  5552   001C26                     u6371:
  5553   001C26  EFF4  F00E         	goto	l1263
  5554   001C2A                     u6370:
  5555   001C2A  EF22  F00E         	goto	l5713
  5556   001C2E                     l1265:
  5557                           
  5558                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 580:    u = ou;
  5559   001C2E  C08A  F09F         	movff	efgtoa@ou,efgtoa@u
  5560   001C32  C08B  F0A0         	movff	efgtoa@ou+1,efgtoa@u+1
  5561   001C36  C08C  F0A1         	movff	efgtoa@ou+2,efgtoa@u+2
  5562   001C3A  C08D  F0A2         	movff	efgtoa@ou+3,efgtoa@u+3
  5563   001C3E                     
  5564                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 581:    ++e;
  5565   001C3E  0100               	movlb	0	; () banked
  5566   001C40  4B86               	infsnz	efgtoa@e& (0+255),f,b
  5567   001C42  2B87               	incf	(efgtoa@e+1)& (0+255),f,b
  5568   001C44                     l5713:
  5569                           
  5570                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 579:   while ((la
      +                          bs((g).u-((ou.f = u.f*10.0,ou)).u) <= 1) || g.f > ou.f) {
  5571   001C44  C09F  F01D         	movff	efgtoa@u,___flmul@b
  5572   001C48  C0A0  F01E         	movff	efgtoa@u+1,___flmul@b+1
  5573   001C4C  C0A1  F01F         	movff	efgtoa@u+2,___flmul@b+2
  5574   001C50  C0A2  F020         	movff	efgtoa@u+3,___flmul@b+3
  5575   001C54  0E00               	movlw	0
  5576   001C56  6E21               	movwf	___flmul@a^0,c
  5577   001C58  0E00               	movlw	0
  5578   001C5A  6E22               	movwf	(___flmul@a+1)^0,c
  5579   001C5C  0E20               	movlw	32
  5580   001C5E  6E23               	movwf	(___flmul@a+2)^0,c
  5581   001C60  0E41               	movlw	65
  5582   001C62  6E24               	movwf	(___flmul@a+3)^0,c
  5583   001C64  EC88  F014         	call	___flmul	;wreg free
  5584   001C68  C01D  F08A         	movff	?___flmul,efgtoa@ou
  5585   001C6C  C01E  F08B         	movff	?___flmul+1,efgtoa@ou+1
  5586   001C70  C01F  F08C         	movff	?___flmul+2,efgtoa@ou+2
  5587   001C74  C020  F08D         	movff	?___flmul+3,efgtoa@ou+3
  5588   001C78  0100               	movlb	0	; () banked
  5589   001C7A  518A               	movf	efgtoa@ou& (0+255),w,b
  5590   001C7C  5D99               	subwf	efgtoa@g& (0+255),w,b
  5591   001C7E  6E05               	movwf	labs@a^0,c
  5592   001C80  518B               	movf	(efgtoa@ou+1)& (0+255),w,b
  5593   001C82  599A               	subwfb	(efgtoa@g+1)& (0+255),w,b
  5594   001C84  6E06               	movwf	(labs@a+1)^0,c
  5595   001C86  518C               	movf	(efgtoa@ou+2)& (0+255),w,b
  5596   001C88  599B               	subwfb	(efgtoa@g+2)& (0+255),w,b
  5597   001C8A  6E07               	movwf	(labs@a+2)^0,c
  5598   001C8C  518D               	movf	(efgtoa@ou+3)& (0+255),w,b
  5599   001C8E  599C               	subwfb	(efgtoa@g+3)& (0+255),w,b
  5600   001C90  6E08               	movwf	(labs@a+3)^0,c
  5601   001C92  ECE9  F029         	call	_labs	;wreg free
  5602   001C96  BE08               	btfsc	(?_labs+3)^0,7,c
  5603   001C98  EF59  F00E         	goto	u6381
  5604   001C9C  5008               	movf	(?_labs+3)^0,w,c
  5605   001C9E  1007               	iorwf	(?_labs+2)^0,w,c
  5606   001CA0  1006               	iorwf	(?_labs+1)^0,w,c
  5607   001CA2  E109               	bnz	u6380
  5608   001CA4  0E02               	movlw	2
  5609   001CA6  5C05               	subwf	?_labs^0,w,c
  5610   001CA8  A0D8               	btfss	status,0,c
  5611   001CAA  EF59  F00E         	goto	u6381
  5612   001CAE  EF5B  F00E         	goto	u6380
  5613   001CB2                     u6381:
  5614   001CB2  EF17  F00E         	goto	l1265
  5615   001CB6                     u6380:
  5616   001CB6  C08A  F036         	movff	efgtoa@ou,___flge@ff1
  5617   001CBA  C08B  F037         	movff	efgtoa@ou+1,___flge@ff1+1
  5618   001CBE  C08C  F038         	movff	efgtoa@ou+2,___flge@ff1+2
  5619   001CC2  C08D  F039         	movff	efgtoa@ou+3,___flge@ff1+3
  5620   001CC6  C099  F03A         	movff	efgtoa@g,___flge@ff2
  5621   001CCA  C09A  F03B         	movff	efgtoa@g+1,___flge@ff2+1
  5622   001CCE  C09B  F03C         	movff	efgtoa@g+2,___flge@ff2+2
  5623   001CD2  C09C  F03D         	movff	efgtoa@g+3,___flge@ff2+3
  5624   001CD6  EC73  F024         	call	___flge	;wreg free
  5625   001CDA  A0D8               	btfss	status,0,c
  5626   001CDC  EF72  F00E         	goto	u6391
  5627   001CE0  EF74  F00E         	goto	u6390
  5628   001CE4                     u6391:
  5629   001CE4  EF17  F00E         	goto	l1265
  5630   001CE8                     u6390:
  5631   001CE8                     
  5632                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 583:   if ((labs(
      +                          (g).u-(u).u) <= 1)) {
  5633   001CE8  0100               	movlb	0	; () banked
  5634   001CEA  519F               	movf	efgtoa@u& (0+255),w,b
  5635   001CEC  5D99               	subwf	efgtoa@g& (0+255),w,b
  5636   001CEE  6E05               	movwf	labs@a^0,c
  5637   001CF0  51A0               	movf	(efgtoa@u+1)& (0+255),w,b
  5638   001CF2  599A               	subwfb	(efgtoa@g+1)& (0+255),w,b
  5639   001CF4  6E06               	movwf	(labs@a+1)^0,c
  5640   001CF6  51A1               	movf	(efgtoa@u+2)& (0+255),w,b
  5641   001CF8  599B               	subwfb	(efgtoa@g+2)& (0+255),w,b
  5642   001CFA  6E07               	movwf	(labs@a+2)^0,c
  5643   001CFC  51A2               	movf	(efgtoa@u+3)& (0+255),w,b
  5644   001CFE  599C               	subwfb	(efgtoa@g+3)& (0+255),w,b
  5645   001D00  6E08               	movwf	(labs@a+3)^0,c
  5646   001D02  ECE9  F029         	call	_labs	;wreg free
  5647   001D06  BE08               	btfsc	(?_labs+3)^0,7,c
  5648   001D08  EF93  F00E         	goto	u6400
  5649   001D0C  5008               	movf	(?_labs+3)^0,w,c
  5650   001D0E  1007               	iorwf	(?_labs+2)^0,w,c
  5651   001D10  1006               	iorwf	(?_labs+1)^0,w,c
  5652   001D12  E107               	bnz	u6401
  5653   001D14  0E02               	movlw	2
  5654   001D16  5C05               	subwf	?_labs^0,w,c
  5655   001D18  B0D8               	btfsc	status,0,c
  5656   001D1A  EF91  F00E         	goto	u6401
  5657   001D1E  EF93  F00E         	goto	u6400
  5658   001D22                     u6401:
  5659   001D22  EFDB  F00E         	goto	l5731
  5660   001D26                     u6400:
  5661   001D26                     l5721:
  5662                           
  5663                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 584:    g = u;
  5664   001D26  C09F  F099         	movff	efgtoa@u,efgtoa@g
  5665   001D2A  C0A0  F09A         	movff	efgtoa@u+1,efgtoa@g+1
  5666   001D2E  C0A1  F09B         	movff	efgtoa@u+2,efgtoa@g+2
  5667   001D32  C0A2  F09C         	movff	efgtoa@u+3,efgtoa@g+3
  5668                           
  5669                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 585:   }
  5670   001D36  EFF4  F00E         	goto	l1263
  5671   001D3A                     l5723:
  5672                           
  5673                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 588:     u.f = u.
      +                          f/10.0;
  5674   001D3A  C09F  F036         	movff	efgtoa@u,___fldiv@b
  5675   001D3E  C0A0  F037         	movff	efgtoa@u+1,___fldiv@b+1
  5676   001D42  C0A1  F038         	movff	efgtoa@u+2,___fldiv@b+2
  5677   001D46  C0A2  F039         	movff	efgtoa@u+3,___fldiv@b+3
  5678   001D4A  0E00               	movlw	0
  5679   001D4C  6E3A               	movwf	___fldiv@a^0,c
  5680   001D4E  0E00               	movlw	0
  5681   001D50  6E3B               	movwf	(___fldiv@a+1)^0,c
  5682   001D52  0E20               	movlw	32
  5683   001D54  6E3C               	movwf	(___fldiv@a+2)^0,c
  5684   001D56  0E41               	movlw	65
  5685   001D58  6E3D               	movwf	(___fldiv@a+3)^0,c
  5686   001D5A  EC9D  F016         	call	___fldiv	;wreg free
  5687   001D5E  C036  F09F         	movff	?___fldiv,efgtoa@u
  5688   001D62  C037  F0A0         	movff	?___fldiv+1,efgtoa@u+1
  5689   001D66  C038  F0A1         	movff	?___fldiv+2,efgtoa@u+2
  5690   001D6A  C039  F0A2         	movff	?___fldiv+3,efgtoa@u+3
  5691   001D6E                     
  5692                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 589:     --e;
  5693   001D6E  0100               	movlb	0	; () banked
  5694   001D70  0786               	decf	efgtoa@e& (0+255),f,b
  5695   001D72  A0D8               	btfss	status,0,c
  5696   001D74  0787               	decf	(efgtoa@e+1)& (0+255),f,b
  5697   001D76                     
  5698                           ; BSR set to: 0
  5699                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 590:     if ((lab
      +                          s((g).u-(u).u) <= 1)) {
  5700   001D76  519F               	movf	efgtoa@u& (0+255),w,b
  5701   001D78  5D99               	subwf	efgtoa@g& (0+255),w,b
  5702   001D7A  6E05               	movwf	labs@a^0,c
  5703   001D7C  51A0               	movf	(efgtoa@u+1)& (0+255),w,b
  5704   001D7E  599A               	subwfb	(efgtoa@g+1)& (0+255),w,b
  5705   001D80  6E06               	movwf	(labs@a+1)^0,c
  5706   001D82  51A1               	movf	(efgtoa@u+2)& (0+255),w,b
  5707   001D84  599B               	subwfb	(efgtoa@g+2)& (0+255),w,b
  5708   001D86  6E07               	movwf	(labs@a+2)^0,c
  5709   001D88  51A2               	movf	(efgtoa@u+3)& (0+255),w,b
  5710   001D8A  599C               	subwfb	(efgtoa@g+3)& (0+255),w,b
  5711   001D8C  6E08               	movwf	(labs@a+3)^0,c
  5712   001D8E  ECE9  F029         	call	_labs	;wreg free
  5713   001D92  BE08               	btfsc	(?_labs+3)^0,7,c
  5714   001D94  EFD9  F00E         	goto	u6410
  5715   001D98  5008               	movf	(?_labs+3)^0,w,c
  5716   001D9A  1007               	iorwf	(?_labs+2)^0,w,c
  5717   001D9C  1006               	iorwf	(?_labs+1)^0,w,c
  5718   001D9E  E107               	bnz	u6411
  5719   001DA0  0E02               	movlw	2
  5720   001DA2  5C05               	subwf	?_labs^0,w,c
  5721   001DA4  B0D8               	btfsc	status,0,c
  5722   001DA6  EFD7  F00E         	goto	u6411
  5723   001DAA  EFD9  F00E         	goto	u6410
  5724   001DAE                     u6411:
  5725   001DAE  EFDB  F00E         	goto	l5731
  5726   001DB2                     u6410:
  5727   001DB2  EF93  F00E         	goto	l5721
  5728   001DB6                     l5731:
  5729                           
  5730                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 587:    while (g.
      +                          f < u.f) {
  5731   001DB6  C099  F036         	movff	efgtoa@g,___flge@ff1
  5732   001DBA  C09A  F037         	movff	efgtoa@g+1,___flge@ff1+1
  5733   001DBE  C09B  F038         	movff	efgtoa@g+2,___flge@ff1+2
  5734   001DC2  C09C  F039         	movff	efgtoa@g+3,___flge@ff1+3
  5735   001DC6  C09F  F03A         	movff	efgtoa@u,___flge@ff2
  5736   001DCA  C0A0  F03B         	movff	efgtoa@u+1,___flge@ff2+1
  5737   001DCE  C0A1  F03C         	movff	efgtoa@u+2,___flge@ff2+2
  5738   001DD2  C0A2  F03D         	movff	efgtoa@u+3,___flge@ff2+3
  5739   001DD6  EC73  F024         	call	___flge	;wreg free
  5740   001DDA  A0D8               	btfss	status,0,c
  5741   001DDC  EFF2  F00E         	goto	u6421
  5742   001DE0  EFF4  F00E         	goto	u6420
  5743   001DE4                     u6421:
  5744   001DE4  EF9D  F00E         	goto	l5723
  5745   001DE8                     u6420:
  5746   001DE8                     l1263:
  5747                           
  5748                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 602:  mode = c;
  5749   001DE8  C076  F080         	movff	efgtoa@c,efgtoa@mode
  5750                           
  5751                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 604:     nmode = 
      +                          mode;
  5752   001DEC  C080  F081         	movff	efgtoa@mode,efgtoa@nmode
  5753   001DF0                     
  5754                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 614:  {;C:\Progra
      +                          m Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 615:         p = (prec < 0)
      +                           ? 6 : prec;
  5755   001DF0  0100               	movlb	0	; () banked
  5756   001DF2  BFF5               	btfsc	(_prec+1)& (0+255),7,b
  5757   001DF4  EFFE  F00E         	goto	u6431
  5758   001DF8  EF00  F00F         	goto	u6430
  5759   001DFC                     u6431:
  5760   001DFC  EF06  F00F         	goto	l5737
  5761   001E00                     u6430:
  5762   001E00                     
  5763                           ; BSR set to: 0
  5764   001E00  C0F4  F079         	movff	_prec,efgtoa@p
  5765   001E04  C0F5  F07A         	movff	_prec+1,efgtoa@p+1
  5766   001E08  EF0A  F00F         	goto	l5739
  5767   001E0C                     l5737:
  5768                           
  5769                           ; BSR set to: 0
  5770   001E0C  0E00               	movlw	0
  5771   001E0E  6F7A               	movwf	(efgtoa@p+1)& (0+255),b
  5772   001E10  0E06               	movlw	6
  5773   001E12  6F79               	movwf	efgtoa@p& (0+255),b
  5774   001E14                     l5739:
  5775                           
  5776                           ; BSR set to: 0
  5777                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 616:     };C:\Pro
      +                          gram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 630:     m = p;
  5778   001E14  C079  F084         	movff	efgtoa@p,efgtoa@m
  5779   001E18  C07A  F085         	movff	efgtoa@p+1,efgtoa@m+1
  5780   001E1C                     
  5781                           ; BSR set to: 0
  5782                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 634:  {;C:\Progra
      +                          m Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 635:         ++m;
  5783   001E1C  4B84               	infsnz	efgtoa@m& (0+255),f,b
  5784   001E1E  2B85               	incf	(efgtoa@m+1)& (0+255),f,b
  5785   001E20                     
  5786                           ; BSR set to: 0
  5787                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 636:     };C:\Pro
      +                          gram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 640:     if (nmode == 'f
      +                          ') {
  5788   001E20  0E66               	movlw	102
  5789   001E22  1981               	xorwf	efgtoa@nmode& (0+255),w,b
  5790   001E24  A4D8               	btfss	status,2,c
  5791   001E26  EF17  F00F         	goto	u6441
  5792   001E2A  EF19  F00F         	goto	u6440
  5793   001E2E                     u6441:
  5794   001E2E  EF39  F00F         	goto	l5753
  5795   001E32                     u6440:
  5796   001E32                     
  5797                           ; BSR set to: 0
  5798                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 641:         if (
      +                          e < 0) {
  5799   001E32  BF87               	btfsc	(efgtoa@e+1)& (0+255),7,b
  5800   001E34  EF20  F00F         	goto	u6450
  5801   001E38  EF1E  F00F         	goto	u6451
  5802   001E3C                     u6451:
  5803   001E3C  EF2C  F00F         	goto	l5749
  5804   001E40                     u6450:
  5805   001E40                     
  5806                           ; BSR set to: 0
  5807                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 642:             
      +                          u.f = 1.0;
  5808   001E40  0E00               	movlw	0
  5809   001E42  6F9F               	movwf	efgtoa@u& (0+255),b
  5810   001E44  0E00               	movlw	0
  5811   001E46  6FA0               	movwf	(efgtoa@u+1)& (0+255),b
  5812   001E48  0E80               	movlw	128
  5813   001E4A  6FA1               	movwf	(efgtoa@u+2)& (0+255),b
  5814   001E4C  0E3F               	movlw	63
  5815   001E4E  6FA2               	movwf	(efgtoa@u+3)& (0+255),b
  5816                           
  5817                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 643:             
      +                          e = 0;
  5818   001E50  0E00               	movlw	0
  5819   001E52  6F87               	movwf	(efgtoa@e+1)& (0+255),b
  5820   001E54  0E00               	movlw	0
  5821   001E56  6F86               	movwf	efgtoa@e& (0+255),b
  5822   001E58                     l5749:
  5823                           
  5824                           ; BSR set to: 0
  5825                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 645:         if (
      +                          !(mode == 'g')) {
  5826   001E58  0E67               	movlw	103
  5827   001E5A  1980               	xorwf	efgtoa@mode& (0+255),w,b
  5828   001E5C  B4D8               	btfsc	status,2,c
  5829   001E5E  EF33  F00F         	goto	u6461
  5830   001E62  EF35  F00F         	goto	u6460
  5831   001E66                     u6461:
  5832   001E66  EF39  F00F         	goto	l5753
  5833   001E6A                     u6460:
  5834   001E6A                     
  5835                           ; BSR set to: 0
  5836                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 646:             
      +                          m += e;
  5837   001E6A  5186               	movf	efgtoa@e& (0+255),w,b
  5838   001E6C  2784               	addwf	efgtoa@m& (0+255),f,b
  5839   001E6E  5187               	movf	(efgtoa@e+1)& (0+255),w,b
  5840   001E70  2385               	addwfc	(efgtoa@m+1)& (0+255),f,b
  5841   001E72                     l5753:
  5842                           
  5843                           ; BSR set to: 0
  5844                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 652:     i = 0;
  5845   001E72  0E00               	movlw	0
  5846   001E74  6F8F               	movwf	(efgtoa@i+1)& (0+255),b
  5847   001E76  0E00               	movlw	0
  5848   001E78  6F8E               	movwf	efgtoa@i& (0+255),b
  5849   001E7A                     
  5850                           ; BSR set to: 0
  5851                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 653:     h = g.f;
  5852   001E7A  C099  F090         	movff	efgtoa@g,efgtoa@h
  5853   001E7E  C09A  F091         	movff	efgtoa@g+1,efgtoa@h+1
  5854   001E82  C09B  F092         	movff	efgtoa@g+2,efgtoa@h+2
  5855   001E86  C09C  F093         	movff	efgtoa@g+3,efgtoa@h+3
  5856   001E8A                     
  5857                           ; BSR set to: 0
  5858                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 654:     ou = u;
  5859   001E8A  C09F  F08A         	movff	efgtoa@u,efgtoa@ou
  5860   001E8E  C0A0  F08B         	movff	efgtoa@u+1,efgtoa@ou+1
  5861   001E92  C0A1  F08C         	movff	efgtoa@u+2,efgtoa@ou+2
  5862   001E96  C0A2  F08D         	movff	efgtoa@u+3,efgtoa@ou+3
  5863                           
  5864                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 655:     while (i
      +                           < m) {
  5865   001E9A  EFCA  F00F         	goto	l5767
  5866   001E9E                     l5759:
  5867                           
  5868                           ; BSR set to: 0
  5869                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 656:         l = 
      +                          floorf(h/u.f);
  5870   001E9E  C090  F036         	movff	efgtoa@h,___fldiv@b
  5871   001EA2  C091  F037         	movff	efgtoa@h+1,___fldiv@b+1
  5872   001EA6  C092  F038         	movff	efgtoa@h+2,___fldiv@b+2
  5873   001EAA  C093  F039         	movff	efgtoa@h+3,___fldiv@b+3
  5874   001EAE  C09F  F03A         	movff	efgtoa@u,___fldiv@a
  5875   001EB2  C0A0  F03B         	movff	efgtoa@u+1,___fldiv@a+1
  5876   001EB6  C0A1  F03C         	movff	efgtoa@u+2,___fldiv@a+2
  5877   001EBA  C0A2  F03D         	movff	efgtoa@u+3,___fldiv@a+3
  5878   001EBE  EC9D  F016         	call	___fldiv	;wreg free
  5879   001EC2  C036  F04F         	movff	?___fldiv,floorf@x
  5880   001EC6  C037  F050         	movff	?___fldiv+1,floorf@x+1
  5881   001ECA  C038  F051         	movff	?___fldiv+2,floorf@x+2
  5882   001ECE  C039  F052         	movff	?___fldiv+3,floorf@x+3
  5883   001ED2  ECC5  F01C         	call	_floorf	;wreg free
  5884   001ED6  C04F  F094         	movff	?_floorf,efgtoa@l
  5885   001EDA  C050  F095         	movff	?_floorf+1,efgtoa@l+1
  5886   001EDE  C051  F096         	movff	?_floorf+2,efgtoa@l+2
  5887   001EE2  C052  F097         	movff	?_floorf+3,efgtoa@l+3
  5888                           
  5889                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 657:         d = 
      +                          (int)l;
  5890   001EE6  C094  F005         	movff	efgtoa@l,___fltol@f1
  5891   001EEA  C095  F006         	movff	efgtoa@l+1,___fltol@f1+1
  5892   001EEE  C096  F007         	movff	efgtoa@l+2,___fltol@f1+2
  5893   001EF2  C097  F008         	movff	efgtoa@l+3,___fltol@f1+3
  5894   001EF6  ECF0  F023         	call	___fltol	;wreg free
  5895   001EFA  C005  F082         	movff	?___fltol,efgtoa@d
  5896   001EFE  C006  F083         	movff	?___fltol+1,efgtoa@d+1
  5897   001F02                     
  5898                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 658:         h -=
      +                           l*u.f;
  5899   001F02  C090  F015         	movff	efgtoa@h,___flsub@b
  5900   001F06  C091  F016         	movff	efgtoa@h+1,___flsub@b+1
  5901   001F0A  C092  F017         	movff	efgtoa@h+2,___flsub@b+2
  5902   001F0E  C093  F018         	movff	efgtoa@h+3,___flsub@b+3
  5903   001F12  C094  F021         	movff	efgtoa@l,___flmul@a
  5904   001F16  C095  F022         	movff	efgtoa@l+1,___flmul@a+1
  5905   001F1A  C096  F023         	movff	efgtoa@l+2,___flmul@a+2
  5906   001F1E  C097  F024         	movff	efgtoa@l+3,___flmul@a+3
  5907   001F22  C09F  F01D         	movff	efgtoa@u,___flmul@b
  5908   001F26  C0A0  F01E         	movff	efgtoa@u+1,___flmul@b+1
  5909   001F2A  C0A1  F01F         	movff	efgtoa@u+2,___flmul@b+2
  5910   001F2E  C0A2  F020         	movff	efgtoa@u+3,___flmul@b+3
  5911   001F32  EC88  F014         	call	___flmul	;wreg free
  5912   001F36  C01D  F019         	movff	?___flmul,___flsub@a
  5913   001F3A  C01E  F01A         	movff	?___flmul+1,___flsub@a+1
  5914   001F3E  C01F  F01B         	movff	?___flmul+2,___flsub@a+2
  5915   001F42  C020  F01C         	movff	?___flmul+3,___flsub@a+3
  5916   001F46  EC92  F02B         	call	___flsub	;wreg free
  5917   001F4A  C015  F090         	movff	?___flsub,efgtoa@h
  5918   001F4E  C016  F091         	movff	?___flsub+1,efgtoa@h+1
  5919   001F52  C017  F092         	movff	?___flsub+2,efgtoa@h+2
  5920   001F56  C018  F093         	movff	?___flsub+3,efgtoa@h+3
  5921   001F5A                     
  5922                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 659:         u.f 
      +                          = u.f/10.0;
  5923   001F5A  C09F  F036         	movff	efgtoa@u,___fldiv@b
  5924   001F5E  C0A0  F037         	movff	efgtoa@u+1,___fldiv@b+1
  5925   001F62  C0A1  F038         	movff	efgtoa@u+2,___fldiv@b+2
  5926   001F66  C0A2  F039         	movff	efgtoa@u+3,___fldiv@b+3
  5927   001F6A  0E00               	movlw	0
  5928   001F6C  6E3A               	movwf	___fldiv@a^0,c
  5929   001F6E  0E00               	movlw	0
  5930   001F70  6E3B               	movwf	(___fldiv@a+1)^0,c
  5931   001F72  0E20               	movlw	32
  5932   001F74  6E3C               	movwf	(___fldiv@a+2)^0,c
  5933   001F76  0E41               	movlw	65
  5934   001F78  6E3D               	movwf	(___fldiv@a+3)^0,c
  5935   001F7A  EC9D  F016         	call	___fldiv	;wreg free
  5936   001F7E  C036  F09F         	movff	?___fldiv,efgtoa@u
  5937   001F82  C037  F0A0         	movff	?___fldiv+1,efgtoa@u+1
  5938   001F86  C038  F0A1         	movff	?___fldiv+2,efgtoa@u+2
  5939   001F8A  C039  F0A2         	movff	?___fldiv+3,efgtoa@u+3
  5940   001F8E                     
  5941                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 660:         ++i;
  5942   001F8E  0100               	movlb	0	; () banked
  5943   001F90  4B8E               	infsnz	efgtoa@i& (0+255),f,b
  5944   001F92  2B8F               	incf	(efgtoa@i+1)& (0+255),f,b
  5945   001F94                     l5767:
  5946                           
  5947                           ; BSR set to: 0
  5948                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 655:     while (i
      +                           < m) {
  5949   001F94  5184               	movf	efgtoa@m& (0+255),w,b
  5950   001F96  5D8E               	subwf	efgtoa@i& (0+255),w,b
  5951   001F98  518F               	movf	(efgtoa@i+1)& (0+255),w,b
  5952   001F9A  0A80               	xorlw	128
  5953   001F9C  6E53               	movwf	??_efgtoa^0,c
  5954   001F9E  5185               	movf	(efgtoa@m+1)& (0+255),w,b
  5955   001FA0  0A80               	xorlw	128
  5956   001FA2  5853               	subwfb	??_efgtoa^0,w,c
  5957   001FA4  A0D8               	btfss	status,0,c
  5958   001FA6  EFD7  F00F         	goto	u6471
  5959   001FAA  EFD9  F00F         	goto	u6470
  5960   001FAE                     u6471:
  5961   001FAE  EF4F  F00F         	goto	l5759
  5962   001FB2                     u6470:
  5963   001FB2                     
  5964                           ; BSR set to: 0
  5965                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 664:     l = u.f*
      +                          5.0;
  5966   001FB2  C09F  F01D         	movff	efgtoa@u,___flmul@b
  5967   001FB6  C0A0  F01E         	movff	efgtoa@u+1,___flmul@b+1
  5968   001FBA  C0A1  F01F         	movff	efgtoa@u+2,___flmul@b+2
  5969   001FBE  C0A2  F020         	movff	efgtoa@u+3,___flmul@b+3
  5970   001FC2  0E00               	movlw	0
  5971   001FC4  6E21               	movwf	___flmul@a^0,c
  5972   001FC6  0E00               	movlw	0
  5973   001FC8  6E22               	movwf	(___flmul@a+1)^0,c
  5974   001FCA  0EA0               	movlw	160
  5975   001FCC  6E23               	movwf	(___flmul@a+2)^0,c
  5976   001FCE  0E40               	movlw	64
  5977   001FD0  6E24               	movwf	(___flmul@a+3)^0,c
  5978   001FD2  EC88  F014         	call	___flmul	;wreg free
  5979   001FD6  C01D  F094         	movff	?___flmul,efgtoa@l
  5980   001FDA  C01E  F095         	movff	?___flmul+1,efgtoa@l+1
  5981   001FDE  C01F  F096         	movff	?___flmul+2,efgtoa@l+2
  5982   001FE2  C020  F097         	movff	?___flmul+3,efgtoa@l+3
  5983   001FE6                     
  5984                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 665:     if (h < 
      +                          l) {
  5985   001FE6  C090  F036         	movff	efgtoa@h,___flge@ff1
  5986   001FEA  C091  F037         	movff	efgtoa@h+1,___flge@ff1+1
  5987   001FEE  C092  F038         	movff	efgtoa@h+2,___flge@ff1+2
  5988   001FF2  C093  F039         	movff	efgtoa@h+3,___flge@ff1+3
  5989   001FF6  C094  F03A         	movff	efgtoa@l,___flge@ff2
  5990   001FFA  C095  F03B         	movff	efgtoa@l+1,___flge@ff2+1
  5991   001FFE  C096  F03C         	movff	efgtoa@l+2,___flge@ff2+2
  5992   002002  C097  F03D         	movff	efgtoa@l+3,___flge@ff2+3
  5993   002006  EC73  F024         	call	___flge	;wreg free
  5994   00200A  B0D8               	btfsc	status,0,c
  5995   00200C  EF0A  F010         	goto	u6481
  5996   002010  EF0C  F010         	goto	u6480
  5997   002014                     u6481:
  5998   002014  EF17  F010         	goto	l5775
  5999   002018                     u6480:
  6000   002018                     
  6001                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 666:         l = 
      +                          0.0;
  6002   002018  0E00               	movlw	0
  6003   00201A  0100               	movlb	0	; () banked
  6004   00201C  6F94               	movwf	efgtoa@l& (0+255),b
  6005   00201E  0E00               	movlw	0
  6006   002020  6F95               	movwf	(efgtoa@l+1)& (0+255),b
  6007   002022  0E00               	movlw	0
  6008   002024  6F96               	movwf	(efgtoa@l+2)& (0+255),b
  6009   002026  0E00               	movlw	0
  6010   002028  6F97               	movwf	(efgtoa@l+3)& (0+255),b
  6011                           
  6012                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 667:     } else {
  6013   00202A  EF40  F010         	goto	l5781
  6014   00202E                     l5775:
  6015                           
  6016                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 669:         if (
      +                          (h == l) && !(d % 2)) {
  6017   00202E  C090  F005         	movff	efgtoa@h,___fleq@ff1
  6018   002032  C091  F006         	movff	efgtoa@h+1,___fleq@ff1+1
  6019   002036  C092  F007         	movff	efgtoa@h+2,___fleq@ff1+2
  6020   00203A  C093  F008         	movff	efgtoa@h+3,___fleq@ff1+3
  6021   00203E  C094  F009         	movff	efgtoa@l,___fleq@ff2
  6022   002042  C095  F00A         	movff	efgtoa@l+1,___fleq@ff2+1
  6023   002046  C096  F00B         	movff	efgtoa@l+2,___fleq@ff2+2
  6024   00204A  C097  F00C         	movff	efgtoa@l+3,___fleq@ff2+3
  6025   00204E  EC53  F028         	call	___fleq	;wreg free
  6026   002052  A0D8               	btfss	status,0,c
  6027   002054  EF2E  F010         	goto	u6491
  6028   002058  EF30  F010         	goto	u6490
  6029   00205C                     u6491:
  6030   00205C  EF40  F010         	goto	l5781
  6031   002060                     u6490:
  6032   002060  0100               	movlb	0	; () banked
  6033   002062  B182               	btfsc	efgtoa@d& (0+255),0,b
  6034   002064  EF36  F010         	goto	u6501
  6035   002068  EF38  F010         	goto	u6500
  6036   00206C                     u6501:
  6037   00206C  EF40  F010         	goto	l5781
  6038   002070                     u6500:
  6039   002070                     
  6040                           ; BSR set to: 0
  6041                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 670:             
      +                          l = 0.0;
  6042   002070  0E00               	movlw	0
  6043   002072  6F94               	movwf	efgtoa@l& (0+255),b
  6044   002074  0E00               	movlw	0
  6045   002076  6F95               	movwf	(efgtoa@l+1)& (0+255),b
  6046   002078  0E00               	movlw	0
  6047   00207A  6F96               	movwf	(efgtoa@l+2)& (0+255),b
  6048   00207C  0E00               	movlw	0
  6049   00207E  6F97               	movwf	(efgtoa@l+3)& (0+255),b
  6050   002080                     l5781:
  6051                           
  6052                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 675:     h = g.f 
      +                          + l;
  6053   002080  C099  F005         	movff	efgtoa@g,___fladd@b
  6054   002084  C09A  F006         	movff	efgtoa@g+1,___fladd@b+1
  6055   002088  C09B  F007         	movff	efgtoa@g+2,___fladd@b+2
  6056   00208C  C09C  F008         	movff	efgtoa@g+3,___fladd@b+3
  6057   002090  C094  F009         	movff	efgtoa@l,___fladd@a
  6058   002094  C095  F00A         	movff	efgtoa@l+1,___fladd@a+1
  6059   002098  C096  F00B         	movff	efgtoa@l+2,___fladd@a+2
  6060   00209C  C097  F00C         	movff	efgtoa@l+3,___fladd@a+3
  6061   0020A0  EC28  F012         	call	___fladd	;wreg free
  6062   0020A4  C005  F090         	movff	?___fladd,efgtoa@h
  6063   0020A8  C006  F091         	movff	?___fladd+1,efgtoa@h+1
  6064   0020AC  C007  F092         	movff	?___fladd+2,efgtoa@h+2
  6065   0020B0  C008  F093         	movff	?___fladd+3,efgtoa@h+3
  6066   0020B4                     
  6067                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 677:  if (h >= (o
      +                          u.f*10.0)) {
  6068   0020B4  C090  F036         	movff	efgtoa@h,___flge@ff1
  6069   0020B8  C091  F037         	movff	efgtoa@h+1,___flge@ff1+1
  6070   0020BC  C092  F038         	movff	efgtoa@h+2,___flge@ff1+2
  6071   0020C0  C093  F039         	movff	efgtoa@h+3,___flge@ff1+3
  6072   0020C4  0E00               	movlw	0
  6073   0020C6  6E21               	movwf	___flmul@a^0,c
  6074   0020C8  0E00               	movlw	0
  6075   0020CA  6E22               	movwf	(___flmul@a+1)^0,c
  6076   0020CC  0E20               	movlw	32
  6077   0020CE  6E23               	movwf	(___flmul@a+2)^0,c
  6078   0020D0  0E41               	movlw	65
  6079   0020D2  6E24               	movwf	(___flmul@a+3)^0,c
  6080   0020D4  C08A  F01D         	movff	efgtoa@ou,___flmul@b
  6081   0020D8  C08B  F01E         	movff	efgtoa@ou+1,___flmul@b+1
  6082   0020DC  C08C  F01F         	movff	efgtoa@ou+2,___flmul@b+2
  6083   0020E0  C08D  F020         	movff	efgtoa@ou+3,___flmul@b+3
  6084   0020E4  EC88  F014         	call	___flmul	;wreg free
  6085   0020E8  C01D  F03A         	movff	?___flmul,___flge@ff2
  6086   0020EC  C01E  F03B         	movff	?___flmul+1,___flge@ff2+1
  6087   0020F0  C01F  F03C         	movff	?___flmul+2,___flge@ff2+2
  6088   0020F4  C020  F03D         	movff	?___flmul+3,___flge@ff2+3
  6089   0020F8  EC73  F024         	call	___flge	;wreg free
  6090   0020FC  A0D8               	btfss	status,0,c
  6091   0020FE  EF83  F010         	goto	u6511
  6092   002102  EF85  F010         	goto	u6510
  6093   002106                     u6511:
  6094   002106  EFAE  F010         	goto	l5793
  6095   00210A                     u6510:
  6096   00210A                     
  6097                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 678:   e++;
  6098   00210A  0100               	movlb	0	; () banked
  6099   00210C  4B86               	infsnz	efgtoa@e& (0+255),f,b
  6100   00210E  2B87               	incf	(efgtoa@e+1)& (0+255),f,b
  6101   002110                     
  6102                           ; BSR set to: 0
  6103                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 679:   ou.f *= 10
      +                          .0;
  6104   002110  C08A  F01D         	movff	efgtoa@ou,___flmul@b
  6105   002114  C08B  F01E         	movff	efgtoa@ou+1,___flmul@b+1
  6106   002118  C08C  F01F         	movff	efgtoa@ou+2,___flmul@b+2
  6107   00211C  C08D  F020         	movff	efgtoa@ou+3,___flmul@b+3
  6108   002120  0E00               	movlw	0
  6109   002122  6E21               	movwf	___flmul@a^0,c
  6110   002124  0E00               	movlw	0
  6111   002126  6E22               	movwf	(___flmul@a+1)^0,c
  6112   002128  0E20               	movlw	32
  6113   00212A  6E23               	movwf	(___flmul@a+2)^0,c
  6114   00212C  0E41               	movlw	65
  6115   00212E  6E24               	movwf	(___flmul@a+3)^0,c
  6116   002130  EC88  F014         	call	___flmul	;wreg free
  6117   002134  C01D  F08A         	movff	?___flmul,efgtoa@ou
  6118   002138  C01E  F08B         	movff	?___flmul+1,efgtoa@ou+1
  6119   00213C  C01F  F08C         	movff	?___flmul+2,efgtoa@ou+2
  6120   002140  C020  F08D         	movff	?___flmul+3,efgtoa@ou+3
  6121   002144                     
  6122                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 681:   if (nmode 
      +                          == 'f') {
  6123   002144  0E66               	movlw	102
  6124   002146  0100               	movlb	0	; () banked
  6125   002148  1981               	xorwf	efgtoa@nmode& (0+255),w,b
  6126   00214A  A4D8               	btfss	status,2,c
  6127   00214C  EFAA  F010         	goto	u6521
  6128   002150  EFAC  F010         	goto	u6520
  6129   002154                     u6521:
  6130   002154  EFAE  F010         	goto	l5793
  6131   002158                     u6520:
  6132   002158                     
  6133                           ; BSR set to: 0
  6134                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 683:    m++;
  6135   002158  4B84               	infsnz	efgtoa@m& (0+255),f,b
  6136   00215A  2B85               	incf	(efgtoa@m+1)& (0+255),f,b
  6137   00215C                     l5793:
  6138                           
  6139                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 689:     u = ou;
  6140   00215C  C08A  F09F         	movff	efgtoa@ou,efgtoa@u
  6141   002160  C08B  F0A0         	movff	efgtoa@ou+1,efgtoa@u+1
  6142   002164  C08C  F0A1         	movff	efgtoa@ou+2,efgtoa@u+2
  6143   002168  C08D  F0A2         	movff	efgtoa@ou+3,efgtoa@u+3
  6144   00216C                     
  6145                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 693:  ne = e;
  6146   00216C  C086  F077         	movff	efgtoa@e,efgtoa@ne
  6147   002170  C087  F078         	movff	efgtoa@e+1,efgtoa@ne+1
  6148   002174                     
  6149                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 695:     pp = 0;
  6150   002174  0E00               	movlw	0
  6151   002176  0100               	movlb	0	; () banked
  6152   002178  6F7F               	movwf	efgtoa@pp& (0+255),b
  6153   00217A                     
  6154                           ; BSR set to: 0
  6155                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 696:     t = 0;
  6156   00217A  0E00               	movlw	0
  6157   00217C  6F7C               	movwf	(efgtoa@t+1)& (0+255),b
  6158   00217E  0E00               	movlw	0
  6159   002180  6F7B               	movwf	efgtoa@t& (0+255),b
  6160   002182                     
  6161                           ; BSR set to: 0
  6162                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 697:     i = 0;
  6163   002182  0E00               	movlw	0
  6164   002184  6F8F               	movwf	(efgtoa@i+1)& (0+255),b
  6165   002186  0E00               	movlw	0
  6166   002188  6F8E               	movwf	efgtoa@i& (0+255),b
  6167                           
  6168                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 698:     while ((
      +                          i < m) && (n < (80 - 5))) {
  6169   00218A  EFAC  F011         	goto	l5843
  6170   00218E                     l5803:
  6171                           
  6172                           ; BSR set to: 0
  6173                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 699:         l = 
      +                          floorf(h/u.f);
  6174   00218E  C090  F036         	movff	efgtoa@h,___fldiv@b
  6175   002192  C091  F037         	movff	efgtoa@h+1,___fldiv@b+1
  6176   002196  C092  F038         	movff	efgtoa@h+2,___fldiv@b+2
  6177   00219A  C093  F039         	movff	efgtoa@h+3,___fldiv@b+3
  6178   00219E  C09F  F03A         	movff	efgtoa@u,___fldiv@a
  6179   0021A2  C0A0  F03B         	movff	efgtoa@u+1,___fldiv@a+1
  6180   0021A6  C0A1  F03C         	movff	efgtoa@u+2,___fldiv@a+2
  6181   0021AA  C0A2  F03D         	movff	efgtoa@u+3,___fldiv@a+3
  6182   0021AE  EC9D  F016         	call	___fldiv	;wreg free
  6183   0021B2  C036  F04F         	movff	?___fldiv,floorf@x
  6184   0021B6  C037  F050         	movff	?___fldiv+1,floorf@x+1
  6185   0021BA  C038  F051         	movff	?___fldiv+2,floorf@x+2
  6186   0021BE  C039  F052         	movff	?___fldiv+3,floorf@x+3
  6187   0021C2  ECC5  F01C         	call	_floorf	;wreg free
  6188   0021C6  C04F  F094         	movff	?_floorf,efgtoa@l
  6189   0021CA  C050  F095         	movff	?_floorf+1,efgtoa@l+1
  6190   0021CE  C051  F096         	movff	?_floorf+2,efgtoa@l+2
  6191   0021D2  C052  F097         	movff	?_floorf+3,efgtoa@l+3
  6192                           
  6193                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 700:         d = 
      +                          (int)l > 9 ? 9 : (int)l;
  6194   0021D6  C094  F005         	movff	efgtoa@l,___fltol@f1
  6195   0021DA  C095  F006         	movff	efgtoa@l+1,___fltol@f1+1
  6196   0021DE  C096  F007         	movff	efgtoa@l+2,___fltol@f1+2
  6197   0021E2  C097  F008         	movff	efgtoa@l+3,___fltol@f1+3
  6198   0021E6  ECF0  F023         	call	___fltol	;wreg free
  6199   0021EA  BE06               	btfsc	(?___fltol+1)^0,7,c
  6200   0021EC  EF03  F011         	goto	u6530
  6201   0021F0  5006               	movf	(?___fltol+1)^0,w,c
  6202   0021F2  E107               	bnz	u6531
  6203   0021F4  0E0A               	movlw	10
  6204   0021F6  5C05               	subwf	?___fltol^0,w,c
  6205   0021F8  B0D8               	btfsc	status,0,c
  6206   0021FA  EF01  F011         	goto	u6531
  6207   0021FE  EF03  F011         	goto	u6530
  6208   002202                     u6531:
  6209   002202  EF13  F011         	goto	l5807
  6210   002206                     u6530:
  6211   002206  C094  F005         	movff	efgtoa@l,___fltol@f1
  6212   00220A  C095  F006         	movff	efgtoa@l+1,___fltol@f1+1
  6213   00220E  C096  F007         	movff	efgtoa@l+2,___fltol@f1+2
  6214   002212  C097  F008         	movff	efgtoa@l+3,___fltol@f1+3
  6215   002216  ECF0  F023         	call	___fltol	;wreg free
  6216   00221A  C005  F082         	movff	?___fltol,efgtoa@d
  6217   00221E  C006  F083         	movff	?___fltol+1,efgtoa@d+1
  6218   002222  EF18  F011         	goto	l1293
  6219   002226                     l5807:
  6220   002226  0E00               	movlw	0
  6221   002228  0100               	movlb	0	; () banked
  6222   00222A  6F83               	movwf	(efgtoa@d+1)& (0+255),b
  6223   00222C  0E09               	movlw	9
  6224   00222E  6F82               	movwf	efgtoa@d& (0+255),b
  6225   002230                     l1293:
  6226                           
  6227                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 711:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 712:             if (!pp &
      +                          & (ne < 0)) {
  6228   002230  0100               	movlb	0	; () banked
  6229   002232  517F               	movf	efgtoa@pp& (0+255),w,b
  6230   002234  A4D8               	btfss	status,2,c
  6231   002236  EF1F  F011         	goto	u6541
  6232   00223A  EF21  F011         	goto	u6540
  6233   00223E                     u6541:
  6234   00223E  EF49  F011         	goto	l5827
  6235   002242                     u6540:
  6236   002242                     
  6237                           ; BSR set to: 0
  6238   002242  BF78               	btfsc	(efgtoa@ne+1)& (0+255),7,b
  6239   002244  EF28  F011         	goto	u6550
  6240   002248  EF26  F011         	goto	u6551
  6241   00224C                     u6551:
  6242   00224C  EF49  F011         	goto	l5827
  6243   002250                     u6550:
  6244   002250                     
  6245                           ; BSR set to: 0
  6246                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 713:             
      +                              dbuf[n++] = '.';
  6247   002250  0E81               	movlw	low _dbuf
  6248   002252  259D               	addwf	efgtoa@n& (0+255),w,b
  6249   002254  6ED9               	movwf	fsr2l,c
  6250   002256  0E01               	movlw	high _dbuf
  6251   002258  219E               	addwfc	(efgtoa@n+1)& (0+255),w,b
  6252   00225A  6EDA               	movwf	fsr2h,c
  6253   00225C  0E2E               	movlw	46
  6254   00225E  6EDF               	movwf	indf2,c
  6255   002260                     
  6256                           ; BSR set to: 0
  6257   002260  4B9D               	infsnz	efgtoa@n& (0+255),f,b
  6258   002262  2B9E               	incf	(efgtoa@n+1)& (0+255),f,b
  6259   002264                     
  6260                           ; BSR set to: 0
  6261                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 714:             
      +                              --w;
  6262   002264  0788               	decf	efgtoa@w& (0+255),f,b
  6263   002266  A0D8               	btfss	status,0,c
  6264   002268  0789               	decf	(efgtoa@w+1)& (0+255),f,b
  6265   00226A                     
  6266                           ; BSR set to: 0
  6267                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 715:             
      +                              pp = 1;
  6268   00226A  0E01               	movlw	1
  6269   00226C  6F7F               	movwf	efgtoa@pp& (0+255),b
  6270   00226E  EF49  F011         	goto	l5827
  6271   002272                     l5819:
  6272                           
  6273                           ; BSR set to: 0
  6274                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 718:             
      +                              dbuf[n++] = '0';
  6275   002272  0E81               	movlw	low _dbuf
  6276   002274  259D               	addwf	efgtoa@n& (0+255),w,b
  6277   002276  6ED9               	movwf	fsr2l,c
  6278   002278  0E01               	movlw	high _dbuf
  6279   00227A  219E               	addwfc	(efgtoa@n+1)& (0+255),w,b
  6280   00227C  6EDA               	movwf	fsr2h,c
  6281   00227E  0E30               	movlw	48
  6282   002280  6EDF               	movwf	indf2,c
  6283   002282                     
  6284                           ; BSR set to: 0
  6285   002282  4B9D               	infsnz	efgtoa@n& (0+255),f,b
  6286   002284  2B9E               	incf	(efgtoa@n+1)& (0+255),f,b
  6287   002286                     
  6288                           ; BSR set to: 0
  6289                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 719:             
      +                              --w;
  6290   002286  0788               	decf	efgtoa@w& (0+255),f,b
  6291   002288  A0D8               	btfss	status,0,c
  6292   00228A  0789               	decf	(efgtoa@w+1)& (0+255),f,b
  6293   00228C                     
  6294                           ; BSR set to: 0
  6295                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 720:             
      +                              --t;
  6296   00228C  077B               	decf	efgtoa@t& (0+255),f,b
  6297   00228E  A0D8               	btfss	status,0,c
  6298   002290  077C               	decf	(efgtoa@t+1)& (0+255),f,b
  6299   002292                     l5827:
  6300                           
  6301                           ; BSR set to: 0
  6302                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 717:             
      +                          while (t) {
  6303   002292  517B               	movf	efgtoa@t& (0+255),w,b
  6304   002294  117C               	iorwf	(efgtoa@t+1)& (0+255),w,b
  6305   002296  A4D8               	btfss	status,2,c
  6306   002298  EF50  F011         	goto	u6561
  6307   00229C  EF52  F011         	goto	u6560
  6308   0022A0                     u6561:
  6309   0022A0  EF39  F011         	goto	l5819
  6310   0022A4                     u6560:
  6311   0022A4                     
  6312                           ; BSR set to: 0
  6313                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 722:             
      +                          dbuf[n++] = (char)((int)'0' + d);
  6314   0022A4  0E81               	movlw	low _dbuf
  6315   0022A6  259D               	addwf	efgtoa@n& (0+255),w,b
  6316   0022A8  6ED9               	movwf	fsr2l,c
  6317   0022AA  0E01               	movlw	high _dbuf
  6318   0022AC  219E               	addwfc	(efgtoa@n+1)& (0+255),w,b
  6319   0022AE  6EDA               	movwf	fsr2h,c
  6320   0022B0  5182               	movf	efgtoa@d& (0+255),w,b
  6321   0022B2  0F30               	addlw	48
  6322   0022B4  6EDF               	movwf	indf2,c
  6323   0022B6                     
  6324                           ; BSR set to: 0
  6325   0022B6  4B9D               	infsnz	efgtoa@n& (0+255),f,b
  6326   0022B8  2B9E               	incf	(efgtoa@n+1)& (0+255),f,b
  6327   0022BA                     
  6328                           ; BSR set to: 0
  6329                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 723:             
      +                          --w;
  6330   0022BA  0788               	decf	efgtoa@w& (0+255),f,b
  6331   0022BC  A0D8               	btfss	status,0,c
  6332   0022BE  0789               	decf	(efgtoa@w+1)& (0+255),f,b
  6333   0022C0                     
  6334                           ; BSR set to: 0
  6335                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 724:         };C:
      +                          \Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 725:         h -= l*
      +                          u.f;
  6336   0022C0  C090  F015         	movff	efgtoa@h,___flsub@b
  6337   0022C4  C091  F016         	movff	efgtoa@h+1,___flsub@b+1
  6338   0022C8  C092  F017         	movff	efgtoa@h+2,___flsub@b+2
  6339   0022CC  C093  F018         	movff	efgtoa@h+3,___flsub@b+3
  6340   0022D0  C094  F021         	movff	efgtoa@l,___flmul@a
  6341   0022D4  C095  F022         	movff	efgtoa@l+1,___flmul@a+1
  6342   0022D8  C096  F023         	movff	efgtoa@l+2,___flmul@a+2
  6343   0022DC  C097  F024         	movff	efgtoa@l+3,___flmul@a+3
  6344   0022E0  C09F  F01D         	movff	efgtoa@u,___flmul@b
  6345   0022E4  C0A0  F01E         	movff	efgtoa@u+1,___flmul@b+1
  6346   0022E8  C0A1  F01F         	movff	efgtoa@u+2,___flmul@b+2
  6347   0022EC  C0A2  F020         	movff	efgtoa@u+3,___flmul@b+3
  6348   0022F0  EC88  F014         	call	___flmul	;wreg free
  6349   0022F4  C01D  F019         	movff	?___flmul,___flsub@a
  6350   0022F8  C01E  F01A         	movff	?___flmul+1,___flsub@a+1
  6351   0022FC  C01F  F01B         	movff	?___flmul+2,___flsub@a+2
  6352   002300  C020  F01C         	movff	?___flmul+3,___flsub@a+3
  6353   002304  EC92  F02B         	call	___flsub	;wreg free
  6354   002308  C015  F090         	movff	?___flsub,efgtoa@h
  6355   00230C  C016  F091         	movff	?___flsub+1,efgtoa@h+1
  6356   002310  C017  F092         	movff	?___flsub+2,efgtoa@h+2
  6357   002314  C018  F093         	movff	?___flsub+3,efgtoa@h+3
  6358   002318                     
  6359                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 726:         u.f 
      +                          = u.f/10.0;
  6360   002318  C09F  F036         	movff	efgtoa@u,___fldiv@b
  6361   00231C  C0A0  F037         	movff	efgtoa@u+1,___fldiv@b+1
  6362   002320  C0A1  F038         	movff	efgtoa@u+2,___fldiv@b+2
  6363   002324  C0A2  F039         	movff	efgtoa@u+3,___fldiv@b+3
  6364   002328  0E00               	movlw	0
  6365   00232A  6E3A               	movwf	___fldiv@a^0,c
  6366   00232C  0E00               	movlw	0
  6367   00232E  6E3B               	movwf	(___fldiv@a+1)^0,c
  6368   002330  0E20               	movlw	32
  6369   002332  6E3C               	movwf	(___fldiv@a+2)^0,c
  6370   002334  0E41               	movlw	65
  6371   002336  6E3D               	movwf	(___fldiv@a+3)^0,c
  6372   002338  EC9D  F016         	call	___fldiv	;wreg free
  6373   00233C  C036  F09F         	movff	?___fldiv,efgtoa@u
  6374   002340  C037  F0A0         	movff	?___fldiv+1,efgtoa@u+1
  6375   002344  C038  F0A1         	movff	?___fldiv+2,efgtoa@u+2
  6376   002348  C039  F0A2         	movff	?___fldiv+3,efgtoa@u+3
  6377   00234C                     
  6378                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 727:         --ne
      +                          ;
  6379   00234C  0100               	movlb	0	; () banked
  6380   00234E  0777               	decf	efgtoa@ne& (0+255),f,b
  6381   002350  A0D8               	btfss	status,0,c
  6382   002352  0778               	decf	(efgtoa@ne+1)& (0+255),f,b
  6383   002354                     
  6384                           ; BSR set to: 0
  6385                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 728:         ++i;
  6386   002354  4B8E               	infsnz	efgtoa@i& (0+255),f,b
  6387   002356  2B8F               	incf	(efgtoa@i+1)& (0+255),f,b
  6388   002358                     l5843:
  6389                           
  6390                           ; BSR set to: 0
  6391                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 698:     while ((
      +                          i < m) && (n < (80 - 5))) {
  6392   002358  5184               	movf	efgtoa@m& (0+255),w,b
  6393   00235A  5D8E               	subwf	efgtoa@i& (0+255),w,b
  6394   00235C  518F               	movf	(efgtoa@i+1)& (0+255),w,b
  6395   00235E  0A80               	xorlw	128
  6396   002360  6E53               	movwf	??_efgtoa^0,c
  6397   002362  5185               	movf	(efgtoa@m+1)& (0+255),w,b
  6398   002364  0A80               	xorlw	128
  6399   002366  5853               	subwfb	??_efgtoa^0,w,c
  6400   002368  B0D8               	btfsc	status,0,c
  6401   00236A  EFB9  F011         	goto	u6571
  6402   00236E  EFBB  F011         	goto	u6570
  6403   002372                     u6571:
  6404   002372  EFC9  F011         	goto	l5847
  6405   002376                     u6570:
  6406   002376                     
  6407                           ; BSR set to: 0
  6408   002376  BF9E               	btfsc	(efgtoa@n+1)& (0+255),7,b
  6409   002378  EFC7  F011         	goto	u6581
  6410   00237C  519E               	movf	(efgtoa@n+1)& (0+255),w,b
  6411   00237E  E109               	bnz	u6580
  6412   002380  0E4B               	movlw	75
  6413   002382  5D9D               	subwf	efgtoa@n& (0+255),w,b
  6414   002384  A0D8               	btfss	status,0,c
  6415   002386  EFC7  F011         	goto	u6581
  6416   00238A  EFC9  F011         	goto	u6580
  6417   00238E                     u6581:
  6418   00238E  EFC7  F010         	goto	l5803
  6419   002392                     u6580:
  6420   002392                     l5847:
  6421                           
  6422                           ; BSR set to: 0
  6423                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 735:  i = sizeof(
      +                          dbuf) - 1;
  6424   002392  0E00               	movlw	0
  6425   002394  6F8F               	movwf	(efgtoa@i+1)& (0+255),b
  6426   002396  0E4F               	movlw	79
  6427   002398  6F8E               	movwf	efgtoa@i& (0+255),b
  6428   00239A                     
  6429                           ; BSR set to: 0
  6430                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 736:     dbuf[i] 
      +                          = '\0';
  6431   00239A  0E81               	movlw	low _dbuf
  6432   00239C  258E               	addwf	efgtoa@i& (0+255),w,b
  6433   00239E  6ED9               	movwf	fsr2l,c
  6434   0023A0  0E01               	movlw	high _dbuf
  6435   0023A2  218F               	addwfc	(efgtoa@i+1)& (0+255),w,b
  6436   0023A4  6EDA               	movwf	fsr2h,c
  6437   0023A6  0E00               	movlw	0
  6438   0023A8  6EDF               	movwf	indf2,c
  6439   0023AA                     
  6440                           ; BSR set to: 0
  6441                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 767:  memcpy(&dbu
      +                          f[i-n], &dbuf[0], (size_t)n);
  6442   0023AA  0E81               	movlw	low _dbuf
  6443   0023AC  6E53               	movwf	??_efgtoa^0,c
  6444   0023AE  0E01               	movlw	high _dbuf
  6445   0023B0  6E54               	movwf	(??_efgtoa+1)^0,c
  6446   0023B2  519D               	movf	efgtoa@n& (0+255),w,b
  6447   0023B4  5E53               	subwf	??_efgtoa^0,f,c
  6448   0023B6  519E               	movf	(efgtoa@n+1)& (0+255),w,b
  6449   0023B8  5A54               	subwfb	(??_efgtoa+1)^0,f,c
  6450   0023BA  518E               	movf	efgtoa@i& (0+255),w,b
  6451   0023BC  2453               	addwf	??_efgtoa^0,w,c
  6452   0023BE  6E05               	movwf	memcpy@d1^0,c
  6453   0023C0  518F               	movf	(efgtoa@i+1)& (0+255),w,b
  6454   0023C2  2054               	addwfc	(??_efgtoa+1)^0,w,c
  6455   0023C4  6E06               	movwf	(memcpy@d1+1)^0,c
  6456   0023C6  0E81               	movlw	low _dbuf
  6457   0023C8  6E07               	movwf	memcpy@s1^0,c
  6458   0023CA  0E01               	movlw	high _dbuf
  6459   0023CC  6E08               	movwf	(memcpy@s1+1)^0,c
  6460   0023CE  C09D  F009         	movff	efgtoa@n,memcpy@n
  6461   0023D2  C09E  F00A         	movff	efgtoa@n+1,memcpy@n+1
  6462   0023D6  ECCA  F02A         	call	_memcpy	;wreg free
  6463   0023DA                     
  6464                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 768:  n = i-n;
  6465   0023DA  0100               	movlb	0	; () banked
  6466   0023DC  519D               	movf	efgtoa@n& (0+255),w,b
  6467   0023DE  5D8E               	subwf	efgtoa@i& (0+255),w,b
  6468   0023E0  6F9D               	movwf	efgtoa@n& (0+255),b
  6469   0023E2  519E               	movf	(efgtoa@n+1)& (0+255),w,b
  6470   0023E4  598F               	subwfb	(efgtoa@i+1)& (0+255),w,b
  6471   0023E6  6F9E               	movwf	(efgtoa@n+1)& (0+255),b
  6472   0023E8                     
  6473                           ; BSR set to: 0
  6474                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 769:  i = sign ==
      +                           0 ? 0 : 1;
  6475   0023E8  5198               	movf	efgtoa@sign& (0+255),w,b
  6476   0023EA  A4D8               	btfss	status,2,c
  6477   0023EC  EFFA  F011         	goto	u6591
  6478   0023F0  EFFD  F011         	goto	u6590
  6479   0023F4                     u6591:
  6480   0023F4  0E01               	movlw	1
  6481   0023F6  EFFE  F011         	goto	u6600
  6482   0023FA                     u6590:
  6483   0023FA  0E00               	movlw	0
  6484   0023FC                     u6600:
  6485   0023FC  6F8E               	movwf	efgtoa@i& (0+255),b
  6486   0023FE  6B8F               	clrf	(efgtoa@i+1)& (0+255),b
  6487   002400                     
  6488                           ; BSR set to: 0
  6489                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 780:  if (sign) {
  6490   002400  5198               	movf	efgtoa@sign& (0+255),w,b
  6491   002402  B4D8               	btfsc	status,2,c
  6492   002404  EF06  F012         	goto	u6611
  6493   002408  EF08  F012         	goto	u6610
  6494   00240C                     u6611:
  6495   00240C  EF13  F012         	goto	l5861
  6496   002410                     u6610:
  6497   002410                     
  6498                           ; BSR set to: 0
  6499                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 781:   dbuf[--n] 
      +                          = sign;
  6500   002410  079D               	decf	efgtoa@n& (0+255),f,b
  6501   002412  A0D8               	btfss	status,0,c
  6502   002414  079E               	decf	(efgtoa@n+1)& (0+255),f,b
  6503   002416  0E81               	movlw	low _dbuf
  6504   002418  259D               	addwf	efgtoa@n& (0+255),w,b
  6505   00241A  6ED9               	movwf	fsr2l,c
  6506   00241C  0E01               	movlw	high _dbuf
  6507   00241E  219E               	addwfc	(efgtoa@n+1)& (0+255),w,b
  6508   002420  6EDA               	movwf	fsr2h,c
  6509   002422  C098  FFDF         	movff	efgtoa@sign,indf2
  6510   002426                     l5861:
  6511                           
  6512                           ; BSR set to: 0
  6513                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 783:  w -= i;
  6514   002426  518E               	movf	efgtoa@i& (0+255),w,b
  6515   002428  5F88               	subwf	efgtoa@w& (0+255),f,b
  6516   00242A  518F               	movf	(efgtoa@i+1)& (0+255),w,b
  6517   00242C  5B89               	subwfb	(efgtoa@w+1)& (0+255),f,b
  6518   00242E                     
  6519                           ; BSR set to: 0
  6520                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 786:     return (
      +                          void) pad(fp, &dbuf[n], w);
  6521   00242E  C070  F015         	movff	efgtoa@fp,pad@fp
  6522   002432  C071  F016         	movff	efgtoa@fp+1,pad@fp+1
  6523   002436  0E81               	movlw	low _dbuf
  6524   002438  259D               	addwf	efgtoa@n& (0+255),w,b
  6525   00243A  6E17               	movwf	pad@buf^0,c
  6526   00243C  0E01               	movlw	high _dbuf
  6527   00243E  219E               	addwfc	(efgtoa@n+1)& (0+255),w,b
  6528   002440  6E18               	movwf	(pad@buf+1)^0,c
  6529   002442  C088  F019         	movff	efgtoa@w,pad@p
  6530   002446  C089  F01A         	movff	efgtoa@w+1,pad@p+1
  6531   00244A  EC72  F029         	call	_pad	;wreg free
  6532   00244E                     l1260:
  6533   00244E  0012               	return		;funcret
  6534   002450                     __end_of_efgtoa:
  6535                           	callstack 0
  6536                           
  6537 ;; *************** function _strcpy *****************
  6538 ;; Defined at:
  6539 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\strcpy.c"
  6540 ;; Parameters:    Size  Location     Type
  6541 ;;  dest            2    4[COMRAM] PTR unsigned char 
  6542 ;;		 -> dbuf(80), 
  6543 ;;  src             2    6[COMRAM] PTR const unsigned char 
  6544 ;;		 -> STR_6(4), STR_3(4), 
  6545 ;; Auto vars:     Size  Location     Type
  6546 ;;  d               2   10[COMRAM] PTR unsigned char 
  6547 ;;		 -> dbuf(80), 
  6548 ;;  s               2    8[COMRAM] PTR const unsigned char 
  6549 ;;		 -> STR_6(4), STR_3(4), 
  6550 ;; Return value:  Size  Location     Type
  6551 ;;                  2    4[COMRAM] PTR unsigned char 
  6552 ;; Registers used:
  6553 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  6554 ;; Tracked objects:
  6555 ;;		On entry : 0/0
  6556 ;;		On exit  : 0/0
  6557 ;;		Unchanged: 0/0
  6558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6559 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6560 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6562 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6563 ;;Total ram usage:        8 bytes
  6564 ;; Hardware stack levels used: 1
  6565 ;; Hardware stack levels required when called: 2
  6566 ;; This function calls:
  6567 ;;		Nothing
  6568 ;; This function is called by:
  6569 ;;		_efgtoa
  6570 ;; This function uses a non-reentrant model
  6571 ;;
  6572                           
  6573                           	psect	text16
  6574   00576A                     __ptext16:
  6575                           	callstack 0
  6576   00576A                     _strcpy:
  6577                           	callstack 23
  6578   00576A  C007  F009         	movff	strcpy@src,strcpy@s
  6579   00576E  C008  F00A         	movff	strcpy@src+1,strcpy@s+1
  6580   005772  C005  F00B         	movff	strcpy@dest,strcpy@d
  6581   005776  C006  F00C         	movff	strcpy@dest+1,strcpy@d+1
  6582   00577A                     l4267:
  6583   00577A  C009  FFF6         	movff	strcpy@s,tblptrl
  6584   00577E  C00A  FFF7         	movff	strcpy@s+1,tblptrh
  6585   005782  4A09               	infsnz	strcpy@s^0,f,c
  6586   005784  2A0A               	incf	(strcpy@s+1)^0,f,c
  6587   005786                     	if	0	;tblptru may be non-zero
  6588   005786                     	endif
  6589   005786                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  6590   005786  0E00               	movlw	low (__mediumconst shr (0+16))
  6591   005788  6EF8               	movwf	tblptru,c
  6592   00578A                     	endif
  6593   00578A  C00B  FFD9         	movff	strcpy@d,fsr2l
  6594   00578E  C00C  FFDA         	movff	strcpy@d+1,fsr2h
  6595   005792  4A0B               	infsnz	strcpy@d^0,f,c
  6596   005794  2A0C               	incf	(strcpy@d+1)^0,f,c
  6597   005796  0008               	tblrd		*
  6598   005798  CFF5 FFDF          	movff	tablat,indf2
  6599   00579C  50DF               	movf	indf2,w,c
  6600   00579E  A4D8               	btfss	status,2,c
  6601   0057A0  EFD4  F02B         	goto	u4411
  6602   0057A4  EFD6  F02B         	goto	u4410
  6603   0057A8                     u4411:
  6604   0057A8  EFBD  F02B         	goto	l4267
  6605   0057AC                     u4410:
  6606   0057AC  0012               	return		;funcret
  6607   0057AE                     __end_of_strcpy:
  6608                           	callstack 0
  6609                           
  6610 ;; *************** function _memcpy *****************
  6611 ;; Defined at:
  6612 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\memcpy.c"
  6613 ;; Parameters:    Size  Location     Type
  6614 ;;  d1              2    4[COMRAM] PTR void 
  6615 ;;		 -> dbuf(80), 
  6616 ;;  s1              2    6[COMRAM] PTR const void 
  6617 ;;		 -> dbuf(80), 
  6618 ;;  n               2    8[COMRAM] unsigned int 
  6619 ;; Auto vars:     Size  Location     Type
  6620 ;;  s               2   12[COMRAM] PTR const unsigned char 
  6621 ;;		 -> dbuf(80), 
  6622 ;;  d               2   10[COMRAM] PTR unsigned char 
  6623 ;;		 -> dbuf(80), 
  6624 ;;  tmp             1   14[COMRAM] unsigned char 
  6625 ;; Return value:  Size  Location     Type
  6626 ;;                  2    4[COMRAM] PTR void 
  6627 ;; Registers used:
  6628 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6629 ;; Tracked objects:
  6630 ;;		On entry : 0/0
  6631 ;;		On exit  : 0/0
  6632 ;;		Unchanged: 0/0
  6633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6634 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6635 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6637 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6638 ;;Total ram usage:       11 bytes
  6639 ;; Hardware stack levels used: 1
  6640 ;; Hardware stack levels required when called: 2
  6641 ;; This function calls:
  6642 ;;		Nothing
  6643 ;; This function is called by:
  6644 ;;		_efgtoa
  6645 ;; This function uses a non-reentrant model
  6646 ;;
  6647                           
  6648                           	psect	text17
  6649   005594                     __ptext17:
  6650                           	callstack 0
  6651   005594                     _memcpy:
  6652                           	callstack 23
  6653   005594  C007  F00D         	movff	memcpy@s1,memcpy@s
  6654   005598  C008  F00E         	movff	memcpy@s1+1,memcpy@s+1
  6655   00559C  C005  F00B         	movff	memcpy@d1,memcpy@d
  6656   0055A0  C006  F00C         	movff	memcpy@d1+1,memcpy@d+1
  6657   0055A4  EFE4  F02A         	goto	l4311
  6658   0055A8                     l4303:
  6659   0055A8  C00D  FFD9         	movff	memcpy@s,fsr2l
  6660   0055AC  C00E  FFDA         	movff	memcpy@s+1,fsr2h
  6661   0055B0  50DF               	movf	indf2,w,c
  6662   0055B2  6E0F               	movwf	memcpy@tmp^0,c
  6663   0055B4  4A0D               	infsnz	memcpy@s^0,f,c
  6664   0055B6  2A0E               	incf	(memcpy@s+1)^0,f,c
  6665   0055B8  C00B  FFD9         	movff	memcpy@d,fsr2l
  6666   0055BC  C00C  FFDA         	movff	memcpy@d+1,fsr2h
  6667   0055C0  C00F  FFDF         	movff	memcpy@tmp,indf2
  6668   0055C4  4A0B               	infsnz	memcpy@d^0,f,c
  6669   0055C6  2A0C               	incf	(memcpy@d+1)^0,f,c
  6670   0055C8                     l4311:
  6671   0055C8  0609               	decf	memcpy@n^0,f,c
  6672   0055CA  A0D8               	btfss	status,0,c
  6673   0055CC  060A               	decf	(memcpy@n+1)^0,f,c
  6674   0055CE  2809               	incf	memcpy@n^0,w,c
  6675   0055D0  E106               	bnz	u4531
  6676   0055D2  280A               	incf	(memcpy@n+1)^0,w,c
  6677   0055D4  A4D8               	btfss	status,2,c
  6678   0055D6  EFEF  F02A         	goto	u4531
  6679   0055DA  EFF1  F02A         	goto	u4530
  6680   0055DE                     u4531:
  6681   0055DE  EFD4  F02A         	goto	l4303
  6682   0055E2                     u4530:
  6683   0055E2  0012               	return		;funcret
  6684   0055E4                     __end_of_memcpy:
  6685                           	callstack 0
  6686                           
  6687 ;; *************** function _labs *****************
  6688 ;; Defined at:
  6689 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\labs.c"
  6690 ;; Parameters:    Size  Location     Type
  6691 ;;  a               4    4[COMRAM] long 
  6692 ;; Auto vars:     Size  Location     Type
  6693 ;;		None
  6694 ;; Return value:  Size  Location     Type
  6695 ;;                  4    4[COMRAM] long 
  6696 ;; Registers used:
  6697 ;;		wreg, status,2, status,0
  6698 ;; Tracked objects:
  6699 ;;		On entry : 0/0
  6700 ;;		On exit  : 0/0
  6701 ;;		Unchanged: 0/0
  6702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6703 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6705 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6706 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6707 ;;Total ram usage:        8 bytes
  6708 ;; Hardware stack levels used: 1
  6709 ;; Hardware stack levels required when called: 2
  6710 ;; This function calls:
  6711 ;;		Nothing
  6712 ;; This function is called by:
  6713 ;;		_efgtoa
  6714 ;; This function uses a non-reentrant model
  6715 ;;
  6716                           
  6717                           	psect	text18
  6718   0053D2                     __ptext18:
  6719                           	callstack 0
  6720   0053D2                     _labs:
  6721                           	callstack 23
  6722   0053D2  BE08               	btfsc	(labs@a+3)^0,7,c
  6723   0053D4  EFF8  F029         	goto	u4420
  6724   0053D8  5008               	movf	(labs@a+3)^0,w,c
  6725   0053DA  1007               	iorwf	(labs@a+2)^0,w,c
  6726   0053DC  1006               	iorwf	(labs@a+1)^0,w,c
  6727   0053DE  E106               	bnz	u4421
  6728   0053E0  0405               	decf	labs@a^0,w,c
  6729   0053E2  B0D8               	btfsc	status,0,c
  6730   0053E4  EFF6  F029         	goto	u4421
  6731   0053E8  EFF8  F029         	goto	u4420
  6732   0053EC                     u4421:
  6733   0053EC  EF13  F02A         	goto	l1365
  6734   0053F0                     u4420:
  6735   0053F0  C005  F009         	movff	labs@a,??_labs
  6736   0053F4  C006  F00A         	movff	labs@a+1,??_labs+1
  6737   0053F8  C007  F00B         	movff	labs@a+2,??_labs+2
  6738   0053FC  C008  F00C         	movff	labs@a+3,??_labs+3
  6739   005400  1E09               	comf	??_labs^0,f,c
  6740   005402  1E0A               	comf	(??_labs+1)^0,f,c
  6741   005404  1E0B               	comf	(??_labs+2)^0,f,c
  6742   005406  1E0C               	comf	(??_labs+3)^0,f,c
  6743   005408  2A09               	incf	??_labs^0,f,c
  6744   00540A  0E00               	movlw	0
  6745   00540C  220A               	addwfc	(??_labs+1)^0,f,c
  6746   00540E  220B               	addwfc	(??_labs+2)^0,f,c
  6747   005410  220C               	addwfc	(??_labs+3)^0,f,c
  6748   005412  C009  F005         	movff	??_labs,?_labs
  6749   005416  C00A  F006         	movff	??_labs+1,?_labs+1
  6750   00541A  C00B  F007         	movff	??_labs+2,?_labs+2
  6751   00541E  C00C  F008         	movff	??_labs+3,?_labs+3
  6752   005422  EF1B  F02A         	goto	l1368
  6753   005426                     l1365:
  6754   005426  C005  F005         	movff	labs@a,?_labs
  6755   00542A  C006  F006         	movff	labs@a+1,?_labs+1
  6756   00542E  C007  F007         	movff	labs@a+2,?_labs+2
  6757   005432  C008  F008         	movff	labs@a+3,?_labs+3
  6758   005436                     l1368:
  6759   005436  0012               	return		;funcret
  6760   005438                     __end_of_labs:
  6761                           	callstack 0
  6762                           
  6763 ;; *************** function _floorf *****************
  6764 ;; Defined at:
  6765 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\floorf.c"
  6766 ;; Parameters:    Size  Location     Type
  6767 ;;  x               4   78[COMRAM] float 
  6768 ;; Auto vars:     Size  Location     Type
  6769 ;;  u               4   12[BANK0 ] struct .
  6770 ;;  m               4    6[BANK0 ] unsigned long 
  6771 ;;  e               2   10[BANK0 ] int 
  6772 ;; Return value:  Size  Location     Type
  6773 ;;                  4   78[COMRAM] float 
  6774 ;; Registers used:
  6775 ;;		wreg, status,2, status,0
  6776 ;; Tracked objects:
  6777 ;;		On entry : 0/0
  6778 ;;		On exit  : 0/0
  6779 ;;		Unchanged: 0/0
  6780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6781 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6782 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6783 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6784 ;;      Totals:         4      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6785 ;;Total ram usage:       20 bytes
  6786 ;; Hardware stack levels used: 1
  6787 ;; Hardware stack levels required when called: 2
  6788 ;; This function calls:
  6789 ;;		Nothing
  6790 ;; This function is called by:
  6791 ;;		_efgtoa
  6792 ;; This function uses a non-reentrant model
  6793 ;;
  6794                           
  6795                           	psect	text19
  6796   00398A                     __ptext19:
  6797                           	callstack 0
  6798   00398A                     _floorf:
  6799                           	callstack 23
  6800   00398A  C0EA  F06C         	movff	floorf@F526,floorf@u
  6801   00398E  C0EB  F06D         	movff	floorf@F526+1,floorf@u+1
  6802   003992  C0EC  F06E         	movff	floorf@F526+2,floorf@u+2
  6803   003996  C0ED  F06F         	movff	floorf@F526+3,floorf@u+3
  6804   00399A  C04F  F06C         	movff	floorf@x,floorf@u
  6805   00399E  C050  F06D         	movff	floorf@x+1,floorf@u+1
  6806   0039A2  C051  F06E         	movff	floorf@x+2,floorf@u+2
  6807   0039A6  C052  F06F         	movff	floorf@x+3,floorf@u+3
  6808   0039AA  0E81               	movlw	129
  6809   0039AC  0100               	movlb	0	; () banked
  6810   0039AE  6F60               	movwf	??_floorf& (0+255),b
  6811   0039B0  0EFF               	movlw	255
  6812   0039B2  6F61               	movwf	(??_floorf+1)& (0+255),b
  6813   0039B4  C06C  F062         	movff	floorf@u,??_floorf+2
  6814   0039B8  C06D  F063         	movff	floorf@u+1,??_floorf+3
  6815   0039BC  C06E  F064         	movff	floorf@u+2,??_floorf+4
  6816   0039C0  C06F  F065         	movff	floorf@u+3,??_floorf+5
  6817   0039C4  0E18               	movlw	24
  6818   0039C6  EFEA  F01C         	goto	u6200
  6819   0039CA                     u6205:
  6820   0039CA  90D8               	bcf	status,0,c
  6821   0039CC  3365               	rrcf	(??_floorf+5)& (0+255),f,b
  6822   0039CE  3364               	rrcf	(??_floorf+4)& (0+255),f,b
  6823   0039D0  3363               	rrcf	(??_floorf+3)& (0+255),f,b
  6824   0039D2  3362               	rrcf	(??_floorf+2)& (0+255),f,b
  6825   0039D4                     u6200:
  6826   0039D4  2EE8               	decfsz	wreg,f,c
  6827   0039D6  EFE5  F01C         	goto	u6205
  6828   0039DA  5162               	movf	(??_floorf+2)& (0+255),w,b
  6829   0039DC  2560               	addwf	??_floorf& (0+255),w,b
  6830   0039DE  6F6A               	movwf	floorf@e& (0+255),b
  6831   0039E0  0E00               	movlw	0
  6832   0039E2  2161               	addwfc	(??_floorf+1)& (0+255),w,b
  6833   0039E4  6F6B               	movwf	(floorf@e+1)& (0+255),b
  6834   0039E6  BF6B               	btfsc	(floorf@e+1)& (0+255),7,b
  6835   0039E8  EFFF  F01C         	goto	u6211
  6836   0039EC  516B               	movf	(floorf@e+1)& (0+255),w,b
  6837   0039EE  E109               	bnz	u6210
  6838   0039F0  0E17               	movlw	23
  6839   0039F2  5D6A               	subwf	floorf@e& (0+255),w,b
  6840   0039F4  A0D8               	btfss	status,0,c
  6841   0039F6  EFFF  F01C         	goto	u6211
  6842   0039FA  EF01  F01D         	goto	u6210
  6843   0039FE                     u6211:
  6844   0039FE  EF0B  F01D         	goto	l5623
  6845   003A02                     u6210:
  6846   003A02                     l5621:
  6847                           
  6848                           ; BSR set to: 0
  6849   003A02  C04F  F04F         	movff	floorf@x,?_floorf
  6850   003A06  C050  F050         	movff	floorf@x+1,?_floorf+1
  6851   003A0A  C051  F051         	movff	floorf@x+2,?_floorf+2
  6852   003A0E  C052  F052         	movff	floorf@x+3,?_floorf+3
  6853   003A12  EFCF  F01D         	goto	l1354
  6854   003A16                     l5623:
  6855                           
  6856                           ; BSR set to: 0
  6857   003A16  BF6B               	btfsc	(floorf@e+1)& (0+255),7,b
  6858   003A18  EF10  F01D         	goto	u6221
  6859   003A1C  EF12  F01D         	goto	u6220
  6860   003A20                     u6221:
  6861   003A20  EF83  F01D         	goto	l5633
  6862   003A24                     u6220:
  6863   003A24                     
  6864                           ; BSR set to: 0
  6865   003A24  C06A  F060         	movff	floorf@e,??_floorf
  6866   003A28  0EFF               	movlw	255
  6867   003A2A  6F61               	movwf	(??_floorf+1)& (0+255),b
  6868   003A2C  0EFF               	movlw	255
  6869   003A2E  6F62               	movwf	(??_floorf+2)& (0+255),b
  6870   003A30  0E7F               	movlw	127
  6871   003A32  6F63               	movwf	(??_floorf+3)& (0+255),b
  6872   003A34  0E00               	movlw	0
  6873   003A36  6F64               	movwf	(??_floorf+4)& (0+255),b
  6874   003A38                     u6235:
  6875   003A38  6760               	tstfsz	??_floorf& (0+255),b
  6876   003A3A  EF21  F01D         	goto	u6236
  6877   003A3E  EF29  F01D         	goto	u6237
  6878   003A42                     u6236:
  6879   003A42  3564               	rlcf	(??_floorf+4)& (0+255),w,b
  6880   003A44  3364               	rrcf	(??_floorf+4)& (0+255),f,b
  6881   003A46  3363               	rrcf	(??_floorf+3)& (0+255),f,b
  6882   003A48  3362               	rrcf	(??_floorf+2)& (0+255),f,b
  6883   003A4A  3361               	rrcf	(??_floorf+1)& (0+255),f,b
  6884   003A4C  2F60               	decfsz	??_floorf& (0+255),f,b
  6885   003A4E  EF1C  F01D         	goto	u6235
  6886   003A52                     u6237:
  6887   003A52  C061  F066         	movff	??_floorf+1,floorf@m
  6888   003A56  C062  F067         	movff	??_floorf+2,floorf@m+1
  6889   003A5A  C063  F068         	movff	??_floorf+3,floorf@m+2
  6890   003A5E  C064  F069         	movff	??_floorf+4,floorf@m+3
  6891   003A62  0100               	movlb	0	; () banked
  6892   003A64  5166               	movf	floorf@m& (0+255),w,b
  6893   003A66  156C               	andwf	floorf@u& (0+255),w,b
  6894   003A68  6F60               	movwf	??_floorf& (0+255),b
  6895   003A6A  5167               	movf	(floorf@m+1)& (0+255),w,b
  6896   003A6C  156D               	andwf	(floorf@u+1)& (0+255),w,b
  6897   003A6E  6F61               	movwf	(??_floorf+1)& (0+255),b
  6898   003A70  5168               	movf	(floorf@m+2)& (0+255),w,b
  6899   003A72  156E               	andwf	(floorf@u+2)& (0+255),w,b
  6900   003A74  6F62               	movwf	(??_floorf+2)& (0+255),b
  6901   003A76  5169               	movf	(floorf@m+3)& (0+255),w,b
  6902   003A78  156F               	andwf	(floorf@u+3)& (0+255),w,b
  6903   003A7A  6F63               	movwf	(??_floorf+3)& (0+255),b
  6904   003A7C  5160               	movf	??_floorf& (0+255),w,b
  6905   003A7E  1161               	iorwf	(??_floorf+1)& (0+255),w,b
  6906   003A80  1162               	iorwf	(??_floorf+2)& (0+255),w,b
  6907   003A82  1163               	iorwf	(??_floorf+3)& (0+255),w,b
  6908   003A84  A4D8               	btfss	status,2,c
  6909   003A86  EF47  F01D         	goto	u6241
  6910   003A8A  EF49  F01D         	goto	u6240
  6911   003A8E                     u6241:
  6912   003A8E  EF4B  F01D         	goto	l5629
  6913   003A92                     u6240:
  6914   003A92  EF01  F01D         	goto	l5621
  6915   003A96                     l5629:
  6916                           
  6917                           ; BSR set to: 0
  6918   003A96  C06C  F060         	movff	floorf@u,??_floorf
  6919   003A9A  C06D  F061         	movff	floorf@u+1,??_floorf+1
  6920   003A9E  C06E  F062         	movff	floorf@u+2,??_floorf+2
  6921   003AA2  C06F  F063         	movff	floorf@u+3,??_floorf+3
  6922   003AA6  0E20               	movlw	32
  6923   003AA8  EF5B  F01D         	goto	u6250
  6924   003AAC                     u6255:
  6925   003AAC  90D8               	bcf	status,0,c
  6926   003AAE  3363               	rrcf	(??_floorf+3)& (0+255),f,b
  6927   003AB0  3362               	rrcf	(??_floorf+2)& (0+255),f,b
  6928   003AB2  3361               	rrcf	(??_floorf+1)& (0+255),f,b
  6929   003AB4  3360               	rrcf	??_floorf& (0+255),f,b
  6930   003AB6                     u6250:
  6931   003AB6  2EE8               	decfsz	wreg,f,c
  6932   003AB8  EF56  F01D         	goto	u6255
  6933   003ABC  5160               	movf	??_floorf& (0+255),w,b
  6934   003ABE  1161               	iorwf	(??_floorf+1)& (0+255),w,b
  6935   003AC0  1162               	iorwf	(??_floorf+2)& (0+255),w,b
  6936   003AC2  1163               	iorwf	(??_floorf+3)& (0+255),w,b
  6937   003AC4  B4D8               	btfsc	status,2,c
  6938   003AC6  EF67  F01D         	goto	u6261
  6939   003ACA  EF69  F01D         	goto	u6260
  6940   003ACE                     u6261:
  6941   003ACE  EF71  F01D         	goto	l1357
  6942   003AD2                     u6260:
  6943   003AD2                     
  6944                           ; BSR set to: 0
  6945   003AD2  5166               	movf	floorf@m& (0+255),w,b
  6946   003AD4  276C               	addwf	floorf@u& (0+255),f,b
  6947   003AD6  5167               	movf	(floorf@m+1)& (0+255),w,b
  6948   003AD8  236D               	addwfc	(floorf@u+1)& (0+255),f,b
  6949   003ADA  5168               	movf	(floorf@m+2)& (0+255),w,b
  6950   003ADC  236E               	addwfc	(floorf@u+2)& (0+255),f,b
  6951   003ADE  5169               	movf	(floorf@m+3)& (0+255),w,b
  6952   003AE0  236F               	addwfc	(floorf@u+3)& (0+255),f,b
  6953   003AE2                     l1357:
  6954                           
  6955                           ; BSR set to: 0
  6956   003AE2  1D66               	comf	floorf@m& (0+255),w,b
  6957   003AE4  6F60               	movwf	??_floorf& (0+255),b
  6958   003AE6  1D67               	comf	(floorf@m+1)& (0+255),w,b
  6959   003AE8  6F61               	movwf	(??_floorf+1)& (0+255),b
  6960   003AEA  1D68               	comf	(floorf@m+2)& (0+255),w,b
  6961   003AEC  6F62               	movwf	(??_floorf+2)& (0+255),b
  6962   003AEE  1D69               	comf	(floorf@m+3)& (0+255),w,b
  6963   003AF0  6F63               	movwf	(??_floorf+3)& (0+255),b
  6964   003AF2  5160               	movf	??_floorf& (0+255),w,b
  6965   003AF4  176C               	andwf	floorf@u& (0+255),f,b
  6966   003AF6  5161               	movf	(??_floorf+1)& (0+255),w,b
  6967   003AF8  176D               	andwf	(floorf@u+1)& (0+255),f,b
  6968   003AFA  5162               	movf	(??_floorf+2)& (0+255),w,b
  6969   003AFC  176E               	andwf	(floorf@u+2)& (0+255),f,b
  6970   003AFE  5163               	movf	(??_floorf+3)& (0+255),w,b
  6971   003B00  176F               	andwf	(floorf@u+3)& (0+255),f,b
  6972   003B02  EFC7  F01D         	goto	l5641
  6973   003B06                     l5633:
  6974                           
  6975                           ; BSR set to: 0
  6976   003B06  C06C  F060         	movff	floorf@u,??_floorf
  6977   003B0A  C06D  F061         	movff	floorf@u+1,??_floorf+1
  6978   003B0E  C06E  F062         	movff	floorf@u+2,??_floorf+2
  6979   003B12  C06F  F063         	movff	floorf@u+3,??_floorf+3
  6980   003B16  0E20               	movlw	32
  6981   003B18  EF93  F01D         	goto	u6270
  6982   003B1C                     u6275:
  6983   003B1C  90D8               	bcf	status,0,c
  6984   003B1E  3363               	rrcf	(??_floorf+3)& (0+255),f,b
  6985   003B20  3362               	rrcf	(??_floorf+2)& (0+255),f,b
  6986   003B22  3361               	rrcf	(??_floorf+1)& (0+255),f,b
  6987   003B24  3360               	rrcf	??_floorf& (0+255),f,b
  6988   003B26                     u6270:
  6989   003B26  2EE8               	decfsz	wreg,f,c
  6990   003B28  EF8E  F01D         	goto	u6275
  6991   003B2C  5160               	movf	??_floorf& (0+255),w,b
  6992   003B2E  1161               	iorwf	(??_floorf+1)& (0+255),w,b
  6993   003B30  1162               	iorwf	(??_floorf+2)& (0+255),w,b
  6994   003B32  1163               	iorwf	(??_floorf+3)& (0+255),w,b
  6995   003B34  A4D8               	btfss	status,2,c
  6996   003B36  EF9F  F01D         	goto	u6281
  6997   003B3A  EFA1  F01D         	goto	u6280
  6998   003B3E                     u6281:
  6999   003B3E  EFAB  F01D         	goto	l5637
  7000   003B42                     u6280:
  7001   003B42                     
  7002                           ; BSR set to: 0
  7003   003B42  0E00               	movlw	0
  7004   003B44  6F6C               	movwf	floorf@u& (0+255),b
  7005   003B46  0E00               	movlw	0
  7006   003B48  6F6D               	movwf	(floorf@u+1)& (0+255),b
  7007   003B4A  0E00               	movlw	0
  7008   003B4C  6F6E               	movwf	(floorf@u+2)& (0+255),b
  7009   003B4E  0E00               	movlw	0
  7010   003B50  6F6F               	movwf	(floorf@u+3)& (0+255),b
  7011   003B52  EFC7  F01D         	goto	l5641
  7012   003B56                     l5637:
  7013                           
  7014                           ; BSR set to: 0
  7015   003B56  90D8               	bcf	status,0,c
  7016   003B58  356C               	rlcf	floorf@u& (0+255),w,b
  7017   003B5A  6F60               	movwf	??_floorf& (0+255),b
  7018   003B5C  356D               	rlcf	(floorf@u+1)& (0+255),w,b
  7019   003B5E  6F61               	movwf	(??_floorf+1)& (0+255),b
  7020   003B60  356E               	rlcf	(floorf@u+2)& (0+255),w,b
  7021   003B62  6F62               	movwf	(??_floorf+2)& (0+255),b
  7022   003B64  356F               	rlcf	(floorf@u+3)& (0+255),w,b
  7023   003B66  6F63               	movwf	(??_floorf+3)& (0+255),b
  7024   003B68  5160               	movf	??_floorf& (0+255),w,b
  7025   003B6A  1161               	iorwf	(??_floorf+1)& (0+255),w,b
  7026   003B6C  1162               	iorwf	(??_floorf+2)& (0+255),w,b
  7027   003B6E  1163               	iorwf	(??_floorf+3)& (0+255),w,b
  7028   003B70  B4D8               	btfsc	status,2,c
  7029   003B72  EFBD  F01D         	goto	u6291
  7030   003B76  EFBF  F01D         	goto	u6290
  7031   003B7A                     u6291:
  7032   003B7A  EFC7  F01D         	goto	l5641
  7033   003B7E                     u6290:
  7034   003B7E                     
  7035                           ; BSR set to: 0
  7036   003B7E  0E00               	movlw	0
  7037   003B80  6F6C               	movwf	floorf@u& (0+255),b
  7038   003B82  0E00               	movlw	0
  7039   003B84  6F6D               	movwf	(floorf@u+1)& (0+255),b
  7040   003B86  0E80               	movlw	128
  7041   003B88  6F6E               	movwf	(floorf@u+2)& (0+255),b
  7042   003B8A  0EBF               	movlw	191
  7043   003B8C  6F6F               	movwf	(floorf@u+3)& (0+255),b
  7044   003B8E                     l5641:
  7045                           
  7046                           ; BSR set to: 0
  7047   003B8E  C06C  F04F         	movff	floorf@u,?_floorf
  7048   003B92  C06D  F050         	movff	floorf@u+1,?_floorf+1
  7049   003B96  C06E  F051         	movff	floorf@u+2,?_floorf+2
  7050   003B9A  C06F  F052         	movff	floorf@u+3,?_floorf+3
  7051   003B9E                     l1354:
  7052                           
  7053                           ; BSR set to: 0
  7054   003B9E  0012               	return		;funcret
  7055   003BA0                     __end_of_floorf:
  7056                           	callstack 0
  7057                           
  7058 ;; *************** function ___fpclassifyf *****************
  7059 ;; Defined at:
  7060 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\__fpclassifyf.c"
  7061 ;; Parameters:    Size  Location     Type
  7062 ;;  x               4    4[COMRAM] float 
  7063 ;; Auto vars:     Size  Location     Type
  7064 ;;  u               4   14[COMRAM] struct .
  7065 ;;  e               2   12[COMRAM] int 
  7066 ;; Return value:  Size  Location     Type
  7067 ;;                  2    4[COMRAM] int 
  7068 ;; Registers used:
  7069 ;;		wreg, status,2, status,0
  7070 ;; Tracked objects:
  7071 ;;		On entry : 0/0
  7072 ;;		On exit  : 0/0
  7073 ;;		Unchanged: 0/0
  7074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7075 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7076 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7077 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7078 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7079 ;;Total ram usage:       14 bytes
  7080 ;; Hardware stack levels used: 1
  7081 ;; Hardware stack levels required when called: 2
  7082 ;; This function calls:
  7083 ;;		Nothing
  7084 ;; This function is called by:
  7085 ;;		_efgtoa
  7086 ;; This function uses a non-reentrant model
  7087 ;;
  7088                           
  7089                           	psect	text20
  7090   0049EA                     __ptext20:
  7091                           	callstack 0
  7092   0049EA                     ___fpclassifyf:
  7093                           	callstack 23
  7094   0049EA  C0EE  F00F         	movff	___fpclassifyf@F465,___fpclassifyf@u
  7095   0049EE  C0EF  F010         	movff	___fpclassifyf@F465+1,___fpclassifyf@u+1
  7096   0049F2  C0F0  F011         	movff	___fpclassifyf@F465+2,___fpclassifyf@u+2
  7097   0049F6  C0F1  F012         	movff	___fpclassifyf@F465+3,___fpclassifyf@u+3
  7098   0049FA  C005  F00F         	movff	___fpclassifyf@x,___fpclassifyf@u
  7099   0049FE  C006  F010         	movff	___fpclassifyf@x+1,___fpclassifyf@u+1
  7100   004A02  C007  F011         	movff	___fpclassifyf@x+2,___fpclassifyf@u+2
  7101   004A06  C008  F012         	movff	___fpclassifyf@x+3,___fpclassifyf@u+3
  7102   004A0A  C00F  F009         	movff	___fpclassifyf@u,??___fpclassifyf
  7103   004A0E  C010  F00A         	movff	___fpclassifyf@u+1,??___fpclassifyf+1
  7104   004A12  C011  F00B         	movff	___fpclassifyf@u+2,??___fpclassifyf+2
  7105   004A16  C012  F00C         	movff	___fpclassifyf@u+3,??___fpclassifyf+3
  7106   004A1A  0E18               	movlw	24
  7107   004A1C  EF15  F025         	goto	u4340
  7108   004A20                     u4345:
  7109   004A20  90D8               	bcf	status,0,c
  7110   004A22  320C               	rrcf	(??___fpclassifyf+3)^0,f,c
  7111   004A24  320B               	rrcf	(??___fpclassifyf+2)^0,f,c
  7112   004A26  320A               	rrcf	(??___fpclassifyf+1)^0,f,c
  7113   004A28  3209               	rrcf	??___fpclassifyf^0,f,c
  7114   004A2A                     u4340:
  7115   004A2A  2EE8               	decfsz	wreg,f,c
  7116   004A2C  EF10  F025         	goto	u4345
  7117   004A30  5009               	movf	??___fpclassifyf^0,w,c
  7118   004A32  6E0D               	movwf	___fpclassifyf@e^0,c
  7119   004A34  6A0E               	clrf	(___fpclassifyf@e+1)^0,c
  7120   004A36  500D               	movf	___fpclassifyf@e^0,w,c
  7121   004A38  100E               	iorwf	(___fpclassifyf@e+1)^0,w,c
  7122   004A3A  A4D8               	btfss	status,2,c
  7123   004A3C  EF22  F025         	goto	u4351
  7124   004A40  EF24  F025         	goto	u4350
  7125   004A44                     u4351:
  7126   004A44  EF44  F025         	goto	l4255
  7127   004A48                     u4350:
  7128   004A48  90D8               	bcf	status,0,c
  7129   004A4A  340F               	rlcf	___fpclassifyf@u^0,w,c
  7130   004A4C  6E09               	movwf	??___fpclassifyf^0,c
  7131   004A4E  3410               	rlcf	(___fpclassifyf@u+1)^0,w,c
  7132   004A50  6E0A               	movwf	(??___fpclassifyf+1)^0,c
  7133   004A52  3411               	rlcf	(___fpclassifyf@u+2)^0,w,c
  7134   004A54  6E0B               	movwf	(??___fpclassifyf+2)^0,c
  7135   004A56  3412               	rlcf	(___fpclassifyf@u+3)^0,w,c
  7136   004A58  6E0C               	movwf	(??___fpclassifyf+3)^0,c
  7137   004A5A  5009               	movf	??___fpclassifyf^0,w,c
  7138   004A5C  100A               	iorwf	(??___fpclassifyf+1)^0,w,c
  7139   004A5E  100B               	iorwf	(??___fpclassifyf+2)^0,w,c
  7140   004A60  100C               	iorwf	(??___fpclassifyf+3)^0,w,c
  7141   004A62  A4D8               	btfss	status,2,c
  7142   004A64  EF36  F025         	goto	u4361
  7143   004A68  EF38  F025         	goto	u4360
  7144   004A6C                     u4361:
  7145   004A6C  EF3E  F025         	goto	l4251
  7146   004A70                     u4360:
  7147   004A70  0E00               	movlw	0
  7148   004A72  6E06               	movwf	(?___fpclassifyf+1)^0,c
  7149   004A74  0E02               	movlw	2
  7150   004A76  6E05               	movwf	?___fpclassifyf^0,c
  7151   004A78  EF73  F025         	goto	l1340
  7152   004A7C                     l4251:
  7153   004A7C  0E00               	movlw	0
  7154   004A7E  6E06               	movwf	(?___fpclassifyf+1)^0,c
  7155   004A80  0E03               	movlw	3
  7156   004A82  6E05               	movwf	?___fpclassifyf^0,c
  7157   004A84  EF73  F025         	goto	l1340
  7158   004A88                     l4255:
  7159   004A88  280D               	incf	___fpclassifyf@e^0,w,c
  7160   004A8A  100E               	iorwf	(___fpclassifyf@e+1)^0,w,c
  7161   004A8C  A4D8               	btfss	status,2,c
  7162   004A8E  EF4B  F025         	goto	u4371
  7163   004A92  EF4D  F025         	goto	u4370
  7164   004A96                     u4371:
  7165   004A96  EF6F  F025         	goto	l4261
  7166   004A9A                     u4370:
  7167   004A9A  C00F  F009         	movff	___fpclassifyf@u,??___fpclassifyf
  7168   004A9E  C010  F00A         	movff	___fpclassifyf@u+1,??___fpclassifyf+1
  7169   004AA2  C011  F00B         	movff	___fpclassifyf@u+2,??___fpclassifyf+2
  7170   004AA6  C012  F00C         	movff	___fpclassifyf@u+3,??___fpclassifyf+3
  7171   004AAA  0E09               	movlw	9
  7172   004AAC                     u4385:
  7173   004AAC  90D8               	bcf	status,0,c
  7174   004AAE  3609               	rlcf	??___fpclassifyf^0,f,c
  7175   004AB0  360A               	rlcf	(??___fpclassifyf+1)^0,f,c
  7176   004AB2  360B               	rlcf	(??___fpclassifyf+2)^0,f,c
  7177   004AB4  360C               	rlcf	(??___fpclassifyf+3)^0,f,c
  7178   004AB6  2EE8               	decfsz	wreg,f,c
  7179   004AB8  EF56  F025         	goto	u4385
  7180   004ABC  5009               	movf	??___fpclassifyf^0,w,c
  7181   004ABE  100A               	iorwf	(??___fpclassifyf+1)^0,w,c
  7182   004AC0  100B               	iorwf	(??___fpclassifyf+2)^0,w,c
  7183   004AC2  100C               	iorwf	(??___fpclassifyf+3)^0,w,c
  7184   004AC4  B4D8               	btfsc	status,2,c
  7185   004AC6  EF67  F025         	goto	u4391
  7186   004ACA  EF6A  F025         	goto	u4390
  7187   004ACE                     u4391:
  7188   004ACE  0E01               	movlw	1
  7189   004AD0  EF6B  F025         	goto	u4400
  7190   004AD4                     u4390:
  7191   004AD4  0E00               	movlw	0
  7192   004AD6                     u4400:
  7193   004AD6  6E05               	movwf	?___fpclassifyf^0,c
  7194   004AD8  6A06               	clrf	(?___fpclassifyf+1)^0,c
  7195   004ADA  EF73  F025         	goto	l1340
  7196   004ADE                     l4261:
  7197   004ADE  0E00               	movlw	0
  7198   004AE0  6E06               	movwf	(?___fpclassifyf+1)^0,c
  7199   004AE2  0E04               	movlw	4
  7200   004AE4  6E05               	movwf	?___fpclassifyf^0,c
  7201   004AE6                     l1340:
  7202   004AE6  0012               	return		;funcret
  7203   004AE8                     __end_of___fpclassifyf:
  7204                           	callstack 0
  7205                           
  7206 ;; *************** function ___fltol *****************
  7207 ;; Defined at:
  7208 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\fltol.c"
  7209 ;; Parameters:    Size  Location     Type
  7210 ;;  f1              4    4[COMRAM] int 
  7211 ;; Auto vars:     Size  Location     Type
  7212 ;;  exp1            1   13[COMRAM] unsigned char 
  7213 ;;  sign1           1   12[COMRAM] unsigned char 
  7214 ;; Return value:  Size  Location     Type
  7215 ;;                  4    4[COMRAM] long 
  7216 ;; Registers used:
  7217 ;;		wreg, status,2, status,0
  7218 ;; Tracked objects:
  7219 ;;		On entry : 0/0
  7220 ;;		On exit  : 0/0
  7221 ;;		Unchanged: 0/0
  7222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7223 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7224 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7225 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7226 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7227 ;;Total ram usage:       10 bytes
  7228 ;; Hardware stack levels used: 1
  7229 ;; Hardware stack levels required when called: 2
  7230 ;; This function calls:
  7231 ;;		Nothing
  7232 ;; This function is called by:
  7233 ;;		_turnLeft_90
  7234 ;;		_turnRight_90
  7235 ;;		_turn_180
  7236 ;;		_turnRight_135
  7237 ;;		_turnLeft_135
  7238 ;;		_efgtoa
  7239 ;;		_turnLeft
  7240 ;;		_turnRight
  7241 ;; This function uses a non-reentrant model
  7242 ;;
  7243                           
  7244                           	psect	text21
  7245   0047E0                     __ptext21:
  7246                           	callstack 0
  7247   0047E0                     ___fltol:
  7248                           	callstack 23
  7249   0047E0  3407               	rlcf	(___fltol@f1+2)^0,w,c
  7250   0047E2  3408               	rlcf	(___fltol@f1+3)^0,w,c
  7251   0047E4  6E0E               	movwf	___fltol@exp1^0,c
  7252   0047E6  500E               	movf	___fltol@exp1^0,w,c
  7253   0047E8  A4D8               	btfss	status,2,c
  7254   0047EA  EFF9  F023         	goto	u4211
  7255   0047EE  EFFB  F023         	goto	u4210
  7256   0047F2                     u4211:
  7257   0047F2  EF05  F024         	goto	l4165
  7258   0047F6                     u4210:
  7259   0047F6                     l4161:
  7260   0047F6  0E00               	movlw	0
  7261   0047F8  6E05               	movwf	?___fltol^0,c
  7262   0047FA  0E00               	movlw	0
  7263   0047FC  6E06               	movwf	(?___fltol+1)^0,c
  7264   0047FE  0E00               	movlw	0
  7265   004800  6E07               	movwf	(?___fltol+2)^0,c
  7266   004802  0E00               	movlw	0
  7267   004804  6E08               	movwf	(?___fltol+3)^0,c
  7268   004806  EF72  F024         	goto	l813
  7269   00480A                     l4165:
  7270   00480A  C005  F009         	movff	___fltol@f1,??___fltol
  7271   00480E  C006  F00A         	movff	___fltol@f1+1,??___fltol+1
  7272   004812  C007  F00B         	movff	___fltol@f1+2,??___fltol+2
  7273   004816  C008  F00C         	movff	___fltol@f1+3,??___fltol+3
  7274   00481A  0E20               	movlw	32
  7275   00481C  EF15  F024         	goto	u4220
  7276   004820                     u4225:
  7277   004820  90D8               	bcf	status,0,c
  7278   004822  320C               	rrcf	(??___fltol+3)^0,f,c
  7279   004824  320B               	rrcf	(??___fltol+2)^0,f,c
  7280   004826  320A               	rrcf	(??___fltol+1)^0,f,c
  7281   004828  3209               	rrcf	??___fltol^0,f,c
  7282   00482A                     u4220:
  7283   00482A  2EE8               	decfsz	wreg,f,c
  7284   00482C  EF10  F024         	goto	u4225
  7285   004830  5009               	movf	??___fltol^0,w,c
  7286   004832  6E0D               	movwf	___fltol@sign1^0,c
  7287   004834  8E07               	bsf	(___fltol@f1+2)^0,7,c
  7288   004836  0EFF               	movlw	255
  7289   004838  1605               	andwf	___fltol@f1^0,f,c
  7290   00483A  0EFF               	movlw	255
  7291   00483C  1606               	andwf	(___fltol@f1+1)^0,f,c
  7292   00483E  0EFF               	movlw	255
  7293   004840  1607               	andwf	(___fltol@f1+2)^0,f,c
  7294   004842  0E00               	movlw	0
  7295   004844  1608               	andwf	(___fltol@f1+3)^0,f,c
  7296   004846  0E96               	movlw	150
  7297   004848  5E0E               	subwf	___fltol@exp1^0,f,c
  7298   00484A  BE0E               	btfsc	___fltol@exp1^0,7,c
  7299   00484C  EF2C  F024         	goto	u4230
  7300   004850  EF2A  F024         	goto	u4231
  7301   004854                     u4231:
  7302   004854  EF42  F024         	goto	l4185
  7303   004858                     u4230:
  7304   004858  500E               	movf	___fltol@exp1^0,w,c
  7305   00485A  0A80               	xorlw	128
  7306   00485C  0F97               	addlw	151
  7307   00485E  B0D8               	btfsc	status,0,c
  7308   004860  EF34  F024         	goto	u4241
  7309   004864  EF36  F024         	goto	u4240
  7310   004868                     u4241:
  7311   004868  EF38  F024         	goto	l4181
  7312   00486C                     u4240:
  7313   00486C  EFFB  F023         	goto	l4161
  7314   004870                     l4181:
  7315   004870  90D8               	bcf	status,0,c
  7316   004872  3208               	rrcf	(___fltol@f1+3)^0,f,c
  7317   004874  3207               	rrcf	(___fltol@f1+2)^0,f,c
  7318   004876  3206               	rrcf	(___fltol@f1+1)^0,f,c
  7319   004878  3205               	rrcf	___fltol@f1^0,f,c
  7320   00487A  3E0E               	incfsz	___fltol@exp1^0,f,c
  7321   00487C  EF38  F024         	goto	l4181
  7322   004880  EF5A  F024         	goto	l4195
  7323   004884                     l4185:
  7324   004884  0E1F               	movlw	31
  7325   004886  640E               	cpfsgt	___fltol@exp1^0,c
  7326   004888  EF48  F024         	goto	u4251
  7327   00488C  EF4A  F024         	goto	u4250
  7328   004890                     u4251:
  7329   004890  EF52  F024         	goto	l4193
  7330   004894                     u4250:
  7331   004894  EFFB  F023         	goto	l4161
  7332   004898                     l4191:
  7333   004898  90D8               	bcf	status,0,c
  7334   00489A  3605               	rlcf	___fltol@f1^0,f,c
  7335   00489C  3606               	rlcf	(___fltol@f1+1)^0,f,c
  7336   00489E  3607               	rlcf	(___fltol@f1+2)^0,f,c
  7337   0048A0  3608               	rlcf	(___fltol@f1+3)^0,f,c
  7338   0048A2  060E               	decf	___fltol@exp1^0,f,c
  7339   0048A4                     l4193:
  7340   0048A4  500E               	movf	___fltol@exp1^0,w,c
  7341   0048A6  A4D8               	btfss	status,2,c
  7342   0048A8  EF58  F024         	goto	u4261
  7343   0048AC  EF5A  F024         	goto	u4260
  7344   0048B0                     u4261:
  7345   0048B0  EF4C  F024         	goto	l4191
  7346   0048B4                     u4260:
  7347   0048B4                     l4195:
  7348   0048B4  500D               	movf	___fltol@sign1^0,w,c
  7349   0048B6  B4D8               	btfsc	status,2,c
  7350   0048B8  EF60  F024         	goto	u4271
  7351   0048BC  EF62  F024         	goto	u4270
  7352   0048C0                     u4271:
  7353   0048C0  EF6A  F024         	goto	l4199
  7354   0048C4                     u4270:
  7355   0048C4  1E08               	comf	(___fltol@f1+3)^0,f,c
  7356   0048C6  1E07               	comf	(___fltol@f1+2)^0,f,c
  7357   0048C8  1E06               	comf	(___fltol@f1+1)^0,f,c
  7358   0048CA  6C05               	negf	___fltol@f1^0,c
  7359   0048CC  0E00               	movlw	0
  7360   0048CE  2206               	addwfc	(___fltol@f1+1)^0,f,c
  7361   0048D0  2207               	addwfc	(___fltol@f1+2)^0,f,c
  7362   0048D2  2208               	addwfc	(___fltol@f1+3)^0,f,c
  7363   0048D4                     l4199:
  7364   0048D4  C005  F005         	movff	___fltol@f1,?___fltol
  7365   0048D8  C006  F006         	movff	___fltol@f1+1,?___fltol+1
  7366   0048DC  C007  F007         	movff	___fltol@f1+2,?___fltol+2
  7367   0048E0  C008  F008         	movff	___fltol@f1+3,?___fltol+3
  7368   0048E4                     l813:
  7369   0048E4  0012               	return		;funcret
  7370   0048E6                     __end_of___fltol:
  7371                           	callstack 0
  7372                           
  7373 ;; *************** function ___flsub *****************
  7374 ;; Defined at:
  7375 ;;		line 245 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\sprcadd.c"
  7376 ;; Parameters:    Size  Location     Type
  7377 ;;  b               4   20[COMRAM] long 
  7378 ;;  a               4   24[COMRAM] long 
  7379 ;; Auto vars:     Size  Location     Type
  7380 ;;		None
  7381 ;; Return value:  Size  Location     Type
  7382 ;;                  4   20[COMRAM] long 
  7383 ;; Registers used:
  7384 ;;		wreg, status,2, status,0, cstack
  7385 ;; Tracked objects:
  7386 ;;		On entry : 0/0
  7387 ;;		On exit  : 0/0
  7388 ;;		Unchanged: 0/0
  7389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7390 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7391 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7393 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7394 ;;Total ram usage:        8 bytes
  7395 ;; Hardware stack levels used: 1
  7396 ;; Hardware stack levels required when called: 3
  7397 ;; This function calls:
  7398 ;;		___fladd
  7399 ;; This function is called by:
  7400 ;;		_colorDetect
  7401 ;;		_efgtoa
  7402 ;; This function uses a non-reentrant model
  7403 ;;
  7404                           
  7405                           	psect	text22
  7406   005724                     __ptext22:
  7407                           	callstack 0
  7408   005724                     ___flsub:
  7409                           	callstack 22
  7410   005724  0E00               	movlw	0
  7411   005726  1A19               	xorwf	___flsub@a^0,f,c
  7412   005728  0E00               	movlw	0
  7413   00572A  1A1A               	xorwf	(___flsub@a+1)^0,f,c
  7414   00572C  0E00               	movlw	0
  7415   00572E  1A1B               	xorwf	(___flsub@a+2)^0,f,c
  7416   005730  0E80               	movlw	128
  7417   005732  1A1C               	xorwf	(___flsub@a+3)^0,f,c
  7418   005734  C015  F005         	movff	___flsub@b,___fladd@b
  7419   005738  C016  F006         	movff	___flsub@b+1,___fladd@b+1
  7420   00573C  C017  F007         	movff	___flsub@b+2,___fladd@b+2
  7421   005740  C018  F008         	movff	___flsub@b+3,___fladd@b+3
  7422   005744  C019  F009         	movff	___flsub@a,___fladd@a
  7423   005748  C01A  F00A         	movff	___flsub@a+1,___fladd@a+1
  7424   00574C  C01B  F00B         	movff	___flsub@a+2,___fladd@a+2
  7425   005750  C01C  F00C         	movff	___flsub@a+3,___fladd@a+3
  7426   005754  EC28  F012         	call	___fladd	;wreg free
  7427   005758  C005  F015         	movff	?___fladd,?___flsub
  7428   00575C  C006  F016         	movff	?___fladd+1,?___flsub+1
  7429   005760  C007  F017         	movff	?___fladd+2,?___flsub+2
  7430   005764  C008  F018         	movff	?___fladd+3,?___flsub+3
  7431   005768  0012               	return		;funcret
  7432   00576A                     __end_of___flsub:
  7433                           	callstack 0
  7434                           
  7435 ;; *************** function ___fladd *****************
  7436 ;; Defined at:
  7437 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\sprcadd.c"
  7438 ;; Parameters:    Size  Location     Type
  7439 ;;  b               4    4[COMRAM] long 
  7440 ;;  a               4    8[COMRAM] long 
  7441 ;; Auto vars:     Size  Location     Type
  7442 ;;  grs             1   19[COMRAM] unsigned char 
  7443 ;;  bexp            1   18[COMRAM] unsigned char 
  7444 ;;  aexp            1   17[COMRAM] unsigned char 
  7445 ;;  signs           1   16[COMRAM] unsigned char 
  7446 ;; Return value:  Size  Location     Type
  7447 ;;                  4    4[COMRAM] unsigned char 
  7448 ;; Registers used:
  7449 ;;		wreg, status,2, status,0
  7450 ;; Tracked objects:
  7451 ;;		On entry : 0/0
  7452 ;;		On exit  : 0/0
  7453 ;;		Unchanged: 0/0
  7454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7455 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7456 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7457 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7458 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7459 ;;Total ram usage:       16 bytes
  7460 ;; Hardware stack levels used: 1
  7461 ;; Hardware stack levels required when called: 2
  7462 ;; This function calls:
  7463 ;;		Nothing
  7464 ;; This function is called by:
  7465 ;;		___flsub
  7466 ;;		_efgtoa
  7467 ;; This function uses a non-reentrant model
  7468 ;;
  7469                           
  7470                           	psect	text23
  7471   002450                     __ptext23:
  7472                           	callstack 0
  7473   002450                     ___fladd:
  7474                           	callstack 22
  7475   002450  5008               	movf	(___fladd@b+3)^0,w,c
  7476   002452  0B80               	andlw	128
  7477   002454  6E11               	movwf	___fladd@signs^0,c
  7478   002456  5008               	movf	(___fladd@b+3)^0,w,c
  7479   002458  2408               	addwf	(___fladd@b+3)^0,w,c
  7480   00245A  6E13               	movwf	___fladd@bexp^0,c
  7481   00245C  AE07               	btfss	(___fladd@b+2)^0,7,c
  7482   00245E  EF33  F012         	goto	u3171
  7483   002462  EF35  F012         	goto	u3170
  7484   002466                     u3171:
  7485   002466  EF36  F012         	goto	l3549
  7486   00246A                     u3170:
  7487   00246A  8013               	bsf	___fladd@bexp^0,0,c
  7488   00246C                     l3549:
  7489   00246C  5013               	movf	___fladd@bexp^0,w,c
  7490   00246E  B4D8               	btfsc	status,2,c
  7491   002470  EF3C  F012         	goto	u3181
  7492   002474  EF3E  F012         	goto	u3180
  7493   002478                     u3181:
  7494   002478  EF53  F012         	goto	l3559
  7495   00247C                     u3180:
  7496   00247C  2813               	incf	___fladd@bexp^0,w,c
  7497   00247E  A4D8               	btfss	status,2,c
  7498   002480  EF44  F012         	goto	u3191
  7499   002484  EF46  F012         	goto	u3190
  7500   002488                     u3191:
  7501   002488  EF4E  F012         	goto	l3555
  7502   00248C                     u3190:
  7503   00248C  0E00               	movlw	0
  7504   00248E  6E05               	movwf	___fladd@b^0,c
  7505   002490  0E00               	movlw	0
  7506   002492  6E06               	movwf	(___fladd@b+1)^0,c
  7507   002494  0E00               	movlw	0
  7508   002496  6E07               	movwf	(___fladd@b+2)^0,c
  7509   002498  0E00               	movlw	0
  7510   00249A  6E08               	movwf	(___fladd@b+3)^0,c
  7511   00249C                     l3555:
  7512   00249C  8E07               	bsf	(___fladd@b+2)^0,7,c
  7513   00249E  0E00               	movlw	0
  7514   0024A0  6E08               	movwf	(___fladd@b+3)^0,c
  7515   0024A2  EF5B  F012         	goto	l3561
  7516   0024A6                     l3559:
  7517   0024A6  0E00               	movlw	0
  7518   0024A8  6E05               	movwf	___fladd@b^0,c
  7519   0024AA  0E00               	movlw	0
  7520   0024AC  6E06               	movwf	(___fladd@b+1)^0,c
  7521   0024AE  0E00               	movlw	0
  7522   0024B0  6E07               	movwf	(___fladd@b+2)^0,c
  7523   0024B2  0E00               	movlw	0
  7524   0024B4  6E08               	movwf	(___fladd@b+3)^0,c
  7525   0024B6                     l3561:
  7526   0024B6  500C               	movf	(___fladd@a+3)^0,w,c
  7527   0024B8  0B80               	andlw	128
  7528   0024BA  6E12               	movwf	___fladd@aexp^0,c
  7529   0024BC  5011               	movf	___fladd@signs^0,w,c
  7530   0024BE  1812               	xorwf	___fladd@aexp^0,w,c
  7531   0024C0  B4D8               	btfsc	status,2,c
  7532   0024C2  EF65  F012         	goto	u3201
  7533   0024C6  EF67  F012         	goto	u3200
  7534   0024CA                     u3201:
  7535   0024CA  EF68  F012         	goto	l3567
  7536   0024CE                     u3200:
  7537   0024CE  8C11               	bsf	___fladd@signs^0,6,c
  7538   0024D0                     l3567:
  7539   0024D0  500C               	movf	(___fladd@a+3)^0,w,c
  7540   0024D2  240C               	addwf	(___fladd@a+3)^0,w,c
  7541   0024D4  6E12               	movwf	___fladd@aexp^0,c
  7542   0024D6  AE0B               	btfss	(___fladd@a+2)^0,7,c
  7543   0024D8  EF70  F012         	goto	u3211
  7544   0024DC  EF72  F012         	goto	u3210
  7545   0024E0                     u3211:
  7546   0024E0  EF73  F012         	goto	l3573
  7547   0024E4                     u3210:
  7548   0024E4  8012               	bsf	___fladd@aexp^0,0,c
  7549   0024E6                     l3573:
  7550   0024E6  5012               	movf	___fladd@aexp^0,w,c
  7551   0024E8  B4D8               	btfsc	status,2,c
  7552   0024EA  EF79  F012         	goto	u3221
  7553   0024EE  EF7B  F012         	goto	u3220
  7554   0024F2                     u3221:
  7555   0024F2  EF90  F012         	goto	l3583
  7556   0024F6                     u3220:
  7557   0024F6  2812               	incf	___fladd@aexp^0,w,c
  7558   0024F8  A4D8               	btfss	status,2,c
  7559   0024FA  EF81  F012         	goto	u3231
  7560   0024FE  EF83  F012         	goto	u3230
  7561   002502                     u3231:
  7562   002502  EF8B  F012         	goto	l3579
  7563   002506                     u3230:
  7564   002506  0E00               	movlw	0
  7565   002508  6E09               	movwf	___fladd@a^0,c
  7566   00250A  0E00               	movlw	0
  7567   00250C  6E0A               	movwf	(___fladd@a+1)^0,c
  7568   00250E  0E00               	movlw	0
  7569   002510  6E0B               	movwf	(___fladd@a+2)^0,c
  7570   002512  0E00               	movlw	0
  7571   002514  6E0C               	movwf	(___fladd@a+3)^0,c
  7572   002516                     l3579:
  7573   002516  8E0B               	bsf	(___fladd@a+2)^0,7,c
  7574   002518  0E00               	movlw	0
  7575   00251A  6E0C               	movwf	(___fladd@a+3)^0,c
  7576   00251C  EF98  F012         	goto	l3585
  7577   002520                     l3583:
  7578   002520  0E00               	movlw	0
  7579   002522  6E09               	movwf	___fladd@a^0,c
  7580   002524  0E00               	movlw	0
  7581   002526  6E0A               	movwf	(___fladd@a+1)^0,c
  7582   002528  0E00               	movlw	0
  7583   00252A  6E0B               	movwf	(___fladd@a+2)^0,c
  7584   00252C  0E00               	movlw	0
  7585   00252E  6E0C               	movwf	(___fladd@a+3)^0,c
  7586   002530                     l3585:
  7587   002530  5013               	movf	___fladd@bexp^0,w,c
  7588   002532  5C12               	subwf	___fladd@aexp^0,w,c
  7589   002534  B0D8               	btfsc	status,0,c
  7590   002536  EF9F  F012         	goto	u3241
  7591   00253A  EFA1  F012         	goto	u3240
  7592   00253E                     u3241:
  7593   00253E  EFC8  F012         	goto	l3621
  7594   002542                     u3240:
  7595   002542  AC11               	btfss	___fladd@signs^0,6,c
  7596   002544  EFA6  F012         	goto	u3251
  7597   002548  EFA8  F012         	goto	u3250
  7598   00254C                     u3251:
  7599   00254C  EFAA  F012         	goto	l3591
  7600   002550                     u3250:
  7601   002550  0E80               	movlw	128
  7602   002552  1A11               	xorwf	___fladd@signs^0,f,c
  7603   002554                     l3591:
  7604   002554  C013  F014         	movff	___fladd@bexp,___fladd@grs
  7605   002558  C012  F013         	movff	___fladd@aexp,___fladd@bexp
  7606   00255C  C014  F012         	movff	___fladd@grs,___fladd@aexp
  7607   002560  C005  F014         	movff	___fladd@b,___fladd@grs
  7608   002564  C009  F005         	movff	___fladd@a,___fladd@b
  7609   002568  C014  F009         	movff	___fladd@grs,___fladd@a
  7610   00256C  C006  F014         	movff	___fladd@b+1,___fladd@grs
  7611   002570  C00A  F006         	movff	___fladd@a+1,___fladd@b+1
  7612   002574  C014  F00A         	movff	___fladd@grs,___fladd@a+1
  7613   002578  C007  F014         	movff	___fladd@b+2,___fladd@grs
  7614   00257C  C00B  F007         	movff	___fladd@a+2,___fladd@b+2
  7615   002580  C014  F00B         	movff	___fladd@grs,___fladd@a+2
  7616   002584  C008  F014         	movff	___fladd@b+3,___fladd@grs
  7617   002588  C00C  F008         	movff	___fladd@a+3,___fladd@b+3
  7618   00258C  C014  F00C         	movff	___fladd@grs,___fladd@a+3
  7619   002590                     l3621:
  7620   002590  0E00               	movlw	0
  7621   002592  6E14               	movwf	___fladd@grs^0,c
  7622   002594  5013               	movf	___fladd@bexp^0,w,c
  7623   002596  C012  F00D         	movff	___fladd@aexp,??___fladd
  7624   00259A  6A0E               	clrf	(??___fladd+1)^0,c
  7625   00259C  5E0D               	subwf	??___fladd^0,f,c
  7626   00259E  0E00               	movlw	0
  7627   0025A0  5A0E               	subwfb	(??___fladd+1)^0,f,c
  7628   0025A2  BE0E               	btfsc	(??___fladd+1)^0,7,c
  7629   0025A4  EFDD  F012         	goto	u3261
  7630   0025A8  500E               	movf	(??___fladd+1)^0,w,c
  7631   0025AA  E109               	bnz	u3260
  7632   0025AC  0E1A               	movlw	26
  7633   0025AE  5C0D               	subwf	??___fladd^0,w,c
  7634   0025B0  A0D8               	btfss	status,0,c
  7635   0025B2  EFDD  F012         	goto	u3261
  7636   0025B6  EFDF  F012         	goto	u3260
  7637   0025BA                     u3261:
  7638   0025BA  EF16  F013         	goto	l1045
  7639   0025BE                     u3260:
  7640   0025BE  5005               	movf	___fladd@b^0,w,c
  7641   0025C0  1006               	iorwf	(___fladd@b+1)^0,w,c
  7642   0025C2  1007               	iorwf	(___fladd@b+2)^0,w,c
  7643   0025C4  1008               	iorwf	(___fladd@b+3)^0,w,c
  7644   0025C6  A4D8               	btfss	status,2,c
  7645   0025C8  EFE8  F012         	goto	u3271
  7646   0025CC  EFEB  F012         	goto	u3270
  7647   0025D0                     u3271:
  7648   0025D0  0E01               	movlw	1
  7649   0025D2  EFEC  F012         	goto	u3280
  7650   0025D6                     u3270:
  7651   0025D6  0E00               	movlw	0
  7652   0025D8                     u3280:
  7653   0025D8  6E14               	movwf	___fladd@grs^0,c
  7654   0025DA  0E00               	movlw	0
  7655   0025DC  6E05               	movwf	___fladd@b^0,c
  7656   0025DE  0E00               	movlw	0
  7657   0025E0  6E06               	movwf	(___fladd@b+1)^0,c
  7658   0025E2  0E00               	movlw	0
  7659   0025E4  6E07               	movwf	(___fladd@b+2)^0,c
  7660   0025E6  0E00               	movlw	0
  7661   0025E8  6E08               	movwf	(___fladd@b+3)^0,c
  7662   0025EA  C012  F013         	movff	___fladd@aexp,___fladd@bexp
  7663   0025EE  EF1F  F013         	goto	l1044
  7664   0025F2                     l1046:
  7665   0025F2  A014               	btfss	___fladd@grs^0,0,c
  7666   0025F4  EFFE  F012         	goto	u3291
  7667   0025F8  EF00  F013         	goto	u3290
  7668   0025FC                     u3291:
  7669   0025FC  EF06  F013         	goto	l3633
  7670   002600                     u3290:
  7671   002600  90D8               	bcf	status,0,c
  7672   002602  3014               	rrcf	___fladd@grs^0,w,c
  7673   002604  0901               	iorlw	1
  7674   002606  6E14               	movwf	___fladd@grs^0,c
  7675   002608  EF08  F013         	goto	l3635
  7676   00260C                     l3633:
  7677   00260C  90D8               	bcf	status,0,c
  7678   00260E  3214               	rrcf	___fladd@grs^0,f,c
  7679   002610                     l3635:
  7680   002610  A005               	btfss	___fladd@b^0,0,c
  7681   002612  EF0D  F013         	goto	u3301
  7682   002616  EF0F  F013         	goto	u3300
  7683   00261A                     u3301:
  7684   00261A  EF10  F013         	goto	l3639
  7685   00261E                     u3300:
  7686   00261E  8E14               	bsf	___fladd@grs^0,7,c
  7687   002620                     l3639:
  7688   002620  3408               	rlcf	(___fladd@b+3)^0,w,c
  7689   002622  3208               	rrcf	(___fladd@b+3)^0,f,c
  7690   002624  3207               	rrcf	(___fladd@b+2)^0,f,c
  7691   002626  3206               	rrcf	(___fladd@b+1)^0,f,c
  7692   002628  3205               	rrcf	___fladd@b^0,f,c
  7693   00262A  2A13               	incf	___fladd@bexp^0,f,c
  7694   00262C                     l1045:
  7695   00262C  5012               	movf	___fladd@aexp^0,w,c
  7696   00262E  5C13               	subwf	___fladd@bexp^0,w,c
  7697   002630  A0D8               	btfss	status,0,c
  7698   002632  EF1D  F013         	goto	u3311
  7699   002636  EF1F  F013         	goto	u3310
  7700   00263A                     u3311:
  7701   00263A  EFF9  F012         	goto	l1046
  7702   00263E                     u3310:
  7703   00263E                     l1044:
  7704   00263E  BC11               	btfsc	___fladd@signs^0,6,c
  7705   002640  EF24  F013         	goto	u3321
  7706   002644  EF26  F013         	goto	u3320
  7707   002648                     u3321:
  7708   002648  EF66  F013         	goto	l3667
  7709   00264C                     u3320:
  7710   00264C  5013               	movf	___fladd@bexp^0,w,c
  7711   00264E  A4D8               	btfss	status,2,c
  7712   002650  EF2C  F013         	goto	u3331
  7713   002654  EF2E  F013         	goto	u3330
  7714   002658                     u3331:
  7715   002658  EF38  F013         	goto	l3649
  7716   00265C                     u3330:
  7717   00265C  0E00               	movlw	0
  7718   00265E  6E05               	movwf	?___fladd^0,c
  7719   002660  0E00               	movlw	0
  7720   002662  6E06               	movwf	(?___fladd+1)^0,c
  7721   002664  0E00               	movlw	0
  7722   002666  6E07               	movwf	(?___fladd+2)^0,c
  7723   002668  0E00               	movlw	0
  7724   00266A  6E08               	movwf	(?___fladd+3)^0,c
  7725   00266C  EF87  F014         	goto	l1053
  7726   002670                     l3649:
  7727   002670  5009               	movf	___fladd@a^0,w,c
  7728   002672  2605               	addwf	___fladd@b^0,f,c
  7729   002674  500A               	movf	(___fladd@a+1)^0,w,c
  7730   002676  2206               	addwfc	(___fladd@b+1)^0,f,c
  7731   002678  500B               	movf	(___fladd@a+2)^0,w,c
  7732   00267A  2207               	addwfc	(___fladd@b+2)^0,f,c
  7733   00267C  500C               	movf	(___fladd@a+3)^0,w,c
  7734   00267E  2208               	addwfc	(___fladd@b+3)^0,f,c
  7735   002680  A008               	btfss	(___fladd@b+3)^0,0,c
  7736   002682  EF45  F013         	goto	u3341
  7737   002686  EF47  F013         	goto	u3340
  7738   00268A                     u3341:
  7739   00268A  EFF3  F013         	goto	l3703
  7740   00268E                     u3340:
  7741   00268E  A014               	btfss	___fladd@grs^0,0,c
  7742   002690  EF4C  F013         	goto	u3351
  7743   002694  EF4E  F013         	goto	u3350
  7744   002698                     u3351:
  7745   002698  EF54  F013         	goto	l3657
  7746   00269C                     u3350:
  7747   00269C  90D8               	bcf	status,0,c
  7748   00269E  3014               	rrcf	___fladd@grs^0,w,c
  7749   0026A0  0901               	iorlw	1
  7750   0026A2  6E14               	movwf	___fladd@grs^0,c
  7751   0026A4  EF56  F013         	goto	l3659
  7752   0026A8                     l3657:
  7753   0026A8  90D8               	bcf	status,0,c
  7754   0026AA  3214               	rrcf	___fladd@grs^0,f,c
  7755   0026AC                     l3659:
  7756   0026AC  A005               	btfss	___fladd@b^0,0,c
  7757   0026AE  EF5B  F013         	goto	u3361
  7758   0026B2  EF5D  F013         	goto	u3360
  7759   0026B6                     u3361:
  7760   0026B6  EF5E  F013         	goto	l3663
  7761   0026BA                     u3360:
  7762   0026BA  8E14               	bsf	___fladd@grs^0,7,c
  7763   0026BC                     l3663:
  7764   0026BC  3408               	rlcf	(___fladd@b+3)^0,w,c
  7765   0026BE  3208               	rrcf	(___fladd@b+3)^0,f,c
  7766   0026C0  3207               	rrcf	(___fladd@b+2)^0,f,c
  7767   0026C2  3206               	rrcf	(___fladd@b+1)^0,f,c
  7768   0026C4  3205               	rrcf	___fladd@b^0,f,c
  7769   0026C6  2A13               	incf	___fladd@bexp^0,f,c
  7770   0026C8  EFF3  F013         	goto	l3703
  7771   0026CC                     l3667:
  7772   0026CC  5009               	movf	___fladd@a^0,w,c
  7773   0026CE  5C05               	subwf	___fladd@b^0,w,c
  7774   0026D0  500A               	movf	(___fladd@a+1)^0,w,c
  7775   0026D2  5806               	subwfb	(___fladd@b+1)^0,w,c
  7776   0026D4  500B               	movf	(___fladd@a+2)^0,w,c
  7777   0026D6  5807               	subwfb	(___fladd@b+2)^0,w,c
  7778   0026D8  5008               	movf	(___fladd@b+3)^0,w,c
  7779   0026DA  0A80               	xorlw	128
  7780   0026DC  6E0D               	movwf	??___fladd^0,c
  7781   0026DE  500C               	movf	(___fladd@a+3)^0,w,c
  7782   0026E0  0A80               	xorlw	128
  7783   0026E2  580D               	subwfb	??___fladd^0,w,c
  7784   0026E4  B0D8               	btfsc	status,0,c
  7785   0026E6  EF77  F013         	goto	u3371
  7786   0026EA  EF79  F013         	goto	u3370
  7787   0026EE                     u3371:
  7788   0026EE  EFA4  F013         	goto	l3677
  7789   0026F2                     u3370:
  7790   0026F2  5005               	movf	___fladd@b^0,w,c
  7791   0026F4  5C09               	subwf	___fladd@a^0,w,c
  7792   0026F6  6E0D               	movwf	??___fladd^0,c
  7793   0026F8  5006               	movf	(___fladd@b+1)^0,w,c
  7794   0026FA  580A               	subwfb	(___fladd@a+1)^0,w,c
  7795   0026FC  6E0E               	movwf	(??___fladd+1)^0,c
  7796   0026FE  5007               	movf	(___fladd@b+2)^0,w,c
  7797   002700  580B               	subwfb	(___fladd@a+2)^0,w,c
  7798   002702  6E0F               	movwf	(??___fladd+2)^0,c
  7799   002704  5008               	movf	(___fladd@b+3)^0,w,c
  7800   002706  580C               	subwfb	(___fladd@a+3)^0,w,c
  7801   002708  6E10               	movwf	(??___fladd+3)^0,c
  7802   00270A  0EFF               	movlw	255
  7803   00270C  240D               	addwf	??___fladd^0,w,c
  7804   00270E  6E05               	movwf	___fladd@b^0,c
  7805   002710  0EFF               	movlw	255
  7806   002712  200E               	addwfc	(??___fladd+1)^0,w,c
  7807   002714  6E06               	movwf	(___fladd@b+1)^0,c
  7808   002716  0EFF               	movlw	255
  7809   002718  200F               	addwfc	(??___fladd+2)^0,w,c
  7810   00271A  6E07               	movwf	(___fladd@b+2)^0,c
  7811   00271C  0EFF               	movlw	255
  7812   00271E  2010               	addwfc	(??___fladd+3)^0,w,c
  7813   002720  6E08               	movwf	(___fladd@b+3)^0,c
  7814   002722  0E80               	movlw	128
  7815   002724  1A11               	xorwf	___fladd@signs^0,f,c
  7816   002726  6C14               	negf	___fladd@grs^0,c
  7817   002728  5014               	movf	___fladd@grs^0,w,c
  7818   00272A  A4D8               	btfss	status,2,c
  7819   00272C  EF9A  F013         	goto	u3381
  7820   002730  EF9C  F013         	goto	u3380
  7821   002734                     u3381:
  7822   002734  EFAC  F013         	goto	l1061
  7823   002738                     u3380:
  7824   002738  0E01               	movlw	1
  7825   00273A  2605               	addwf	___fladd@b^0,f,c
  7826   00273C  0E00               	movlw	0
  7827   00273E  2206               	addwfc	(___fladd@b+1)^0,f,c
  7828   002740  2207               	addwfc	(___fladd@b+2)^0,f,c
  7829   002742  2208               	addwfc	(___fladd@b+3)^0,f,c
  7830   002744  EFAC  F013         	goto	l1061
  7831   002748                     l3677:
  7832   002748  5009               	movf	___fladd@a^0,w,c
  7833   00274A  5E05               	subwf	___fladd@b^0,f,c
  7834   00274C  500A               	movf	(___fladd@a+1)^0,w,c
  7835   00274E  5A06               	subwfb	(___fladd@b+1)^0,f,c
  7836   002750  500B               	movf	(___fladd@a+2)^0,w,c
  7837   002752  5A07               	subwfb	(___fladd@b+2)^0,f,c
  7838   002754  500C               	movf	(___fladd@a+3)^0,w,c
  7839   002756  5A08               	subwfb	(___fladd@b+3)^0,f,c
  7840   002758                     l1061:
  7841   002758  5005               	movf	___fladd@b^0,w,c
  7842   00275A  1006               	iorwf	(___fladd@b+1)^0,w,c
  7843   00275C  1007               	iorwf	(___fladd@b+2)^0,w,c
  7844   00275E  1008               	iorwf	(___fladd@b+3)^0,w,c
  7845   002760  A4D8               	btfss	status,2,c
  7846   002762  EFB5  F013         	goto	u3391
  7847   002766  EFB7  F013         	goto	u3390
  7848   00276A                     u3391:
  7849   00276A  EFEC  F013         	goto	l3701
  7850   00276E                     u3390:
  7851   00276E  5014               	movf	___fladd@grs^0,w,c
  7852   002770  A4D8               	btfss	status,2,c
  7853   002772  EFBD  F013         	goto	u3401
  7854   002776  EFBF  F013         	goto	u3400
  7855   00277A                     u3401:
  7856   00277A  EFEC  F013         	goto	l3701
  7857   00277E                     u3400:
  7858   00277E  0E00               	movlw	0
  7859   002780  6E05               	movwf	?___fladd^0,c
  7860   002782  0E00               	movlw	0
  7861   002784  6E06               	movwf	(?___fladd+1)^0,c
  7862   002786  0E00               	movlw	0
  7863   002788  6E07               	movwf	(?___fladd+2)^0,c
  7864   00278A  0E00               	movlw	0
  7865   00278C  6E08               	movwf	(?___fladd+3)^0,c
  7866   00278E  EF87  F014         	goto	l1053
  7867   002792                     l3685:
  7868   002792  90D8               	bcf	status,0,c
  7869   002794  3605               	rlcf	___fladd@b^0,f,c
  7870   002796  3606               	rlcf	(___fladd@b+1)^0,f,c
  7871   002798  3607               	rlcf	(___fladd@b+2)^0,f,c
  7872   00279A  3608               	rlcf	(___fladd@b+3)^0,f,c
  7873   00279C  AE14               	btfss	___fladd@grs^0,7,c
  7874   00279E  EFD3  F013         	goto	u3411
  7875   0027A2  EFD5  F013         	goto	u3410
  7876   0027A6                     u3411:
  7877   0027A6  EFD6  F013         	goto	l3691
  7878   0027AA                     u3410:
  7879   0027AA  8005               	bsf	___fladd@b^0,0,c
  7880   0027AC                     l3691:
  7881   0027AC  A014               	btfss	___fladd@grs^0,0,c
  7882   0027AE  EFDB  F013         	goto	u3421
  7883   0027B2  EFDD  F013         	goto	u3420
  7884   0027B6                     u3421:
  7885   0027B6  EFE1  F013         	goto	l3695
  7886   0027BA                     u3420:
  7887   0027BA  80D8               	bsf	status,0,c
  7888   0027BC  3614               	rlcf	___fladd@grs^0,f,c
  7889   0027BE  EFE3  F013         	goto	l3697
  7890   0027C2                     l3695:
  7891   0027C2  90D8               	bcf	status,0,c
  7892   0027C4  3614               	rlcf	___fladd@grs^0,f,c
  7893   0027C6                     l3697:
  7894   0027C6  5013               	movf	___fladd@bexp^0,w,c
  7895   0027C8  B4D8               	btfsc	status,2,c
  7896   0027CA  EFE9  F013         	goto	u3431
  7897   0027CE  EFEB  F013         	goto	u3430
  7898   0027D2                     u3431:
  7899   0027D2  EFEC  F013         	goto	l3701
  7900   0027D6                     u3430:
  7901   0027D6  0613               	decf	___fladd@bexp^0,f,c
  7902   0027D8                     l3701:
  7903   0027D8  AE07               	btfss	(___fladd@b+2)^0,7,c
  7904   0027DA  EFF1  F013         	goto	u3441
  7905   0027DE  EFF3  F013         	goto	u3440
  7906   0027E2                     u3441:
  7907   0027E2  EFC9  F013         	goto	l3685
  7908   0027E6                     u3440:
  7909   0027E6                     l3703:
  7910   0027E6  0E00               	movlw	0
  7911   0027E8  6E12               	movwf	___fladd@aexp^0,c
  7912   0027EA  AE14               	btfss	___fladd@grs^0,7,c
  7913   0027EC  EFFA  F013         	goto	u3451
  7914   0027F0  EFFC  F013         	goto	u3450
  7915   0027F4                     u3451:
  7916   0027F4  EF14  F014         	goto	l1070
  7917   0027F8                     u3450:
  7918   0027F8  C014  F00D         	movff	___fladd@grs,??___fladd
  7919   0027FC  0E7F               	movlw	127
  7920   0027FE  160D               	andwf	??___fladd^0,f,c
  7921   002800  B4D8               	btfsc	status,2,c
  7922   002802  EF05  F014         	goto	u3461
  7923   002806  EF07  F014         	goto	u3460
  7924   00280A                     u3461:
  7925   00280A  EF0B  F014         	goto	l1071
  7926   00280E                     u3460:
  7927   00280E                     l3709:
  7928   00280E  0E01               	movlw	1
  7929   002810  6E12               	movwf	___fladd@aexp^0,c
  7930   002812  EF14  F014         	goto	l1070
  7931   002816                     l1071:
  7932   002816  A005               	btfss	___fladd@b^0,0,c
  7933   002818  EF10  F014         	goto	u3471
  7934   00281C  EF12  F014         	goto	u3470
  7935   002820                     u3471:
  7936   002820  EF14  F014         	goto	l1070
  7937   002824                     u3470:
  7938   002824  EF07  F014         	goto	l3709
  7939   002828                     l1070:
  7940   002828  5012               	movf	___fladd@aexp^0,w,c
  7941   00282A  B4D8               	btfsc	status,2,c
  7942   00282C  EF1A  F014         	goto	u3481
  7943   002830  EF1C  F014         	goto	u3480
  7944   002834                     u3481:
  7945   002834  EF47  F014         	goto	l3721
  7946   002838                     u3480:
  7947   002838  0E01               	movlw	1
  7948   00283A  2605               	addwf	___fladd@b^0,f,c
  7949   00283C  0E00               	movlw	0
  7950   00283E  2206               	addwfc	(___fladd@b+1)^0,f,c
  7951   002840  2207               	addwfc	(___fladd@b+2)^0,f,c
  7952   002842  2208               	addwfc	(___fladd@b+3)^0,f,c
  7953   002844  A008               	btfss	(___fladd@b+3)^0,0,c
  7954   002846  EF27  F014         	goto	u3491
  7955   00284A  EF29  F014         	goto	u3490
  7956   00284E                     u3491:
  7957   00284E  EF47  F014         	goto	l3721
  7958   002852                     u3490:
  7959   002852  C005  F00D         	movff	___fladd@b,??___fladd
  7960   002856  C006  F00E         	movff	___fladd@b+1,??___fladd+1
  7961   00285A  C007  F00F         	movff	___fladd@b+2,??___fladd+2
  7962   00285E  C008  F010         	movff	___fladd@b+3,??___fladd+3
  7963   002862  3410               	rlcf	(??___fladd+3)^0,w,c
  7964   002864  3210               	rrcf	(??___fladd+3)^0,f,c
  7965   002866  320F               	rrcf	(??___fladd+2)^0,f,c
  7966   002868  320E               	rrcf	(??___fladd+1)^0,f,c
  7967   00286A  320D               	rrcf	??___fladd^0,f,c
  7968   00286C  C00D  F005         	movff	??___fladd,___fladd@b
  7969   002870  C00E  F006         	movff	??___fladd+1,___fladd@b+1
  7970   002874  C00F  F007         	movff	??___fladd+2,___fladd@b+2
  7971   002878  C010  F008         	movff	??___fladd+3,___fladd@b+3
  7972   00287C  2813               	incf	___fladd@bexp^0,w,c
  7973   00287E  B4D8               	btfsc	status,2,c
  7974   002880  EF44  F014         	goto	u3501
  7975   002884  EF46  F014         	goto	u3500
  7976   002888                     u3501:
  7977   002888  EF47  F014         	goto	l3721
  7978   00288C                     u3500:
  7979   00288C  2A13               	incf	___fladd@bexp^0,f,c
  7980   00288E                     l3721:
  7981   00288E  2813               	incf	___fladd@bexp^0,w,c
  7982   002890  B4D8               	btfsc	status,2,c
  7983   002892  EF4D  F014         	goto	u3511
  7984   002896  EF4F  F014         	goto	u3510
  7985   00289A                     u3511:
  7986   00289A  EF57  F014         	goto	l3725
  7987   00289E                     u3510:
  7988   00289E  5013               	movf	___fladd@bexp^0,w,c
  7989   0028A0  A4D8               	btfss	status,2,c
  7990   0028A2  EF55  F014         	goto	u3521
  7991   0028A6  EF57  F014         	goto	u3520
  7992   0028AA                     u3521:
  7993   0028AA  EF69  F014         	goto	l3729
  7994   0028AE                     u3520:
  7995   0028AE                     l3725:
  7996   0028AE  0E00               	movlw	0
  7997   0028B0  6E05               	movwf	___fladd@b^0,c
  7998   0028B2  0E00               	movlw	0
  7999   0028B4  6E06               	movwf	(___fladd@b+1)^0,c
  8000   0028B6  0E00               	movlw	0
  8001   0028B8  6E07               	movwf	(___fladd@b+2)^0,c
  8002   0028BA  0E00               	movlw	0
  8003   0028BC  6E08               	movwf	(___fladd@b+3)^0,c
  8004   0028BE  5013               	movf	___fladd@bexp^0,w,c
  8005   0028C0  A4D8               	btfss	status,2,c
  8006   0028C2  EF65  F014         	goto	u3531
  8007   0028C6  EF67  F014         	goto	u3530
  8008   0028CA                     u3531:
  8009   0028CA  EF69  F014         	goto	l3729
  8010   0028CE                     u3530:
  8011   0028CE  0E00               	movlw	0
  8012   0028D0  6E11               	movwf	___fladd@signs^0,c
  8013   0028D2                     l3729:
  8014   0028D2  A013               	btfss	___fladd@bexp^0,0,c
  8015   0028D4  EF6E  F014         	goto	u3541
  8016   0028D8  EF70  F014         	goto	u3540
  8017   0028DC                     u3541:
  8018   0028DC  EF73  F014         	goto	l3733
  8019   0028E0                     u3540:
  8020   0028E0  8E07               	bsf	(___fladd@b+2)^0,7,c
  8021   0028E2  EF74  F014         	goto	l3735
  8022   0028E6                     l3733:
  8023   0028E6  9E07               	bcf	(___fladd@b+2)^0,7,c
  8024   0028E8                     l3735:
  8025   0028E8  90D8               	bcf	status,0,c
  8026   0028EA  3013               	rrcf	___fladd@bexp^0,w,c
  8027   0028EC  6E08               	movwf	(___fladd@b+3)^0,c
  8028   0028EE  AE11               	btfss	___fladd@signs^0,7,c
  8029   0028F0  EF7C  F014         	goto	u3551
  8030   0028F4  EF7E  F014         	goto	u3550
  8031   0028F8                     u3551:
  8032   0028F8  EF7F  F014         	goto	l3741
  8033   0028FC                     u3550:
  8034   0028FC  8E08               	bsf	(___fladd@b+3)^0,7,c
  8035   0028FE                     l3741:
  8036   0028FE  C005  F005         	movff	___fladd@b,?___fladd
  8037   002902  C006  F006         	movff	___fladd@b+1,?___fladd+1
  8038   002906  C007  F007         	movff	___fladd@b+2,?___fladd+2
  8039   00290A  C008  F008         	movff	___fladd@b+3,?___fladd+3
  8040   00290E                     l1053:
  8041   00290E  0012               	return		;funcret
  8042   002910                     __end_of___fladd:
  8043                           	callstack 0
  8044                           
  8045 ;; *************** function ___flneg *****************
  8046 ;; Defined at:
  8047 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\flneg.c"
  8048 ;; Parameters:    Size  Location     Type
  8049 ;;  f1              4    4[COMRAM] unsigned char 
  8050 ;; Auto vars:     Size  Location     Type
  8051 ;;		None
  8052 ;; Return value:  Size  Location     Type
  8053 ;;                  4    4[COMRAM] unsigned char 
  8054 ;; Registers used:
  8055 ;;		wreg, status,2, status,0
  8056 ;; Tracked objects:
  8057 ;;		On entry : 0/0
  8058 ;;		On exit  : 0/0
  8059 ;;		Unchanged: 0/0
  8060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8061 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8064 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8065 ;;Total ram usage:        4 bytes
  8066 ;; Hardware stack levels used: 1
  8067 ;; Hardware stack levels required when called: 2
  8068 ;; This function calls:
  8069 ;;		Nothing
  8070 ;; This function is called by:
  8071 ;;		_efgtoa
  8072 ;; This function uses a non-reentrant model
  8073 ;;
  8074                           
  8075                           	psect	text24
  8076   005874                     __ptext24:
  8077                           	callstack 0
  8078   005874                     ___flneg:
  8079                           	callstack 23
  8080   005874  5005               	movf	___flneg@f1^0,w,c
  8081   005876  1006               	iorwf	(___flneg@f1+1)^0,w,c
  8082   005878  1007               	iorwf	(___flneg@f1+2)^0,w,c
  8083   00587A  1008               	iorwf	(___flneg@f1+3)^0,w,c
  8084   00587C  B4D8               	btfsc	status,2,c
  8085   00587E  EF43  F02C         	goto	u4201
  8086   005882  EF45  F02C         	goto	u4200
  8087   005886                     u4201:
  8088   005886  EF4D  F02C         	goto	l4155
  8089   00588A                     u4200:
  8090   00588A  0E00               	movlw	0
  8091   00588C  1A05               	xorwf	___flneg@f1^0,f,c
  8092   00588E  0E00               	movlw	0
  8093   005890  1A06               	xorwf	(___flneg@f1+1)^0,f,c
  8094   005892  0E00               	movlw	0
  8095   005894  1A07               	xorwf	(___flneg@f1+2)^0,f,c
  8096   005896  0E80               	movlw	128
  8097   005898  1A08               	xorwf	(___flneg@f1+3)^0,f,c
  8098   00589A                     l4155:
  8099   00589A  C005  F005         	movff	___flneg@f1,?___flneg
  8100   00589E  C006  F006         	movff	___flneg@f1+1,?___flneg+1
  8101   0058A2  C007  F007         	movff	___flneg@f1+2,?___flneg+2
  8102   0058A6  C008  F008         	movff	___flneg@f1+3,?___flneg+3
  8103   0058AA  0012               	return		;funcret
  8104   0058AC                     __end_of___flneg:
  8105                           	callstack 0
  8106                           
  8107 ;; *************** function ___flmul *****************
  8108 ;; Defined at:
  8109 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\sprcmul.c"
  8110 ;; Parameters:    Size  Location     Type
  8111 ;;  b               4   28[COMRAM] unsigned char 
  8112 ;;  a               4   32[COMRAM] unsigned char 
  8113 ;; Auto vars:     Size  Location     Type
  8114 ;;  prod            4   47[COMRAM] struct .
  8115 ;;  grs             4   41[COMRAM] unsigned long 
  8116 ;;  temp            2   51[COMRAM] struct .
  8117 ;;  bexp            1   46[COMRAM] unsigned char 
  8118 ;;  aexp            1   45[COMRAM] unsigned char 
  8119 ;;  sign            1   40[COMRAM] unsigned char 
  8120 ;; Return value:  Size  Location     Type
  8121 ;;                  4   28[COMRAM] unsigned char 
  8122 ;; Registers used:
  8123 ;;		wreg, status,2, status,0, prodl, prodh
  8124 ;; Tracked objects:
  8125 ;;		On entry : 0/0
  8126 ;;		On exit  : 0/0
  8127 ;;		Unchanged: 0/0
  8128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8129 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8130 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8131 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8132 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8133 ;;Total ram usage:       25 bytes
  8134 ;; Hardware stack levels used: 1
  8135 ;; Hardware stack levels required when called: 2
  8136 ;; This function calls:
  8137 ;;		Nothing
  8138 ;; This function is called by:
  8139 ;;		_colorDetect
  8140 ;;		_turnLeft_90
  8141 ;;		_turnRight_90
  8142 ;;		_turn_180
  8143 ;;		_turnRight_135
  8144 ;;		_turnLeft_135
  8145 ;;		_efgtoa
  8146 ;;		_turnLeft
  8147 ;;		_turnRight
  8148 ;; This function uses a non-reentrant model
  8149 ;;
  8150                           
  8151                           	psect	text25
  8152   002910                     __ptext25:
  8153                           	callstack 0
  8154   002910                     ___flmul:
  8155                           	callstack 23
  8156   002910  5020               	movf	(___flmul@b+3)^0,w,c
  8157   002912  0B80               	andlw	128
  8158   002914  6E29               	movwf	___flmul@sign^0,c
  8159   002916  5020               	movf	(___flmul@b+3)^0,w,c
  8160   002918  2420               	addwf	(___flmul@b+3)^0,w,c
  8161   00291A  6E2F               	movwf	___flmul@bexp^0,c
  8162   00291C  AE1F               	btfss	(___flmul@b+2)^0,7,c
  8163   00291E  EF93  F014         	goto	u3931
  8164   002922  EF95  F014         	goto	u3930
  8165   002926                     u3931:
  8166   002926  EF96  F014         	goto	l3983
  8167   00292A                     u3930:
  8168   00292A  802F               	bsf	___flmul@bexp^0,0,c
  8169   00292C                     l3983:
  8170   00292C  502F               	movf	___flmul@bexp^0,w,c
  8171   00292E  B4D8               	btfsc	status,2,c
  8172   002930  EF9C  F014         	goto	u3941
  8173   002934  EF9E  F014         	goto	u3940
  8174   002938                     u3941:
  8175   002938  EFB1  F014         	goto	l3991
  8176   00293C                     u3940:
  8177   00293C  282F               	incf	___flmul@bexp^0,w,c
  8178   00293E  A4D8               	btfss	status,2,c
  8179   002940  EFA4  F014         	goto	u3951
  8180   002944  EFA6  F014         	goto	u3950
  8181   002948                     u3951:
  8182   002948  EFAE  F014         	goto	l3989
  8183   00294C                     u3950:
  8184   00294C  0E00               	movlw	0
  8185   00294E  6E1D               	movwf	___flmul@b^0,c
  8186   002950  0E00               	movlw	0
  8187   002952  6E1E               	movwf	(___flmul@b+1)^0,c
  8188   002954  0E00               	movlw	0
  8189   002956  6E1F               	movwf	(___flmul@b+2)^0,c
  8190   002958  0E00               	movlw	0
  8191   00295A  6E20               	movwf	(___flmul@b+3)^0,c
  8192   00295C                     l3989:
  8193   00295C  8E1F               	bsf	(___flmul@b+2)^0,7,c
  8194   00295E  EFB9  F014         	goto	l3993
  8195   002962                     l3991:
  8196   002962  0E00               	movlw	0
  8197   002964  6E1D               	movwf	___flmul@b^0,c
  8198   002966  0E00               	movlw	0
  8199   002968  6E1E               	movwf	(___flmul@b+1)^0,c
  8200   00296A  0E00               	movlw	0
  8201   00296C  6E1F               	movwf	(___flmul@b+2)^0,c
  8202   00296E  0E00               	movlw	0
  8203   002970  6E20               	movwf	(___flmul@b+3)^0,c
  8204   002972                     l3993:
  8205   002972  5024               	movf	(___flmul@a+3)^0,w,c
  8206   002974  0B80               	andlw	128
  8207   002976  1A29               	xorwf	___flmul@sign^0,f,c
  8208   002978  5024               	movf	(___flmul@a+3)^0,w,c
  8209   00297A  2424               	addwf	(___flmul@a+3)^0,w,c
  8210   00297C  6E2E               	movwf	___flmul@aexp^0,c
  8211   00297E  AE23               	btfss	(___flmul@a+2)^0,7,c
  8212   002980  EFC4  F014         	goto	u3961
  8213   002984  EFC6  F014         	goto	u3960
  8214   002988                     u3961:
  8215   002988  EFC7  F014         	goto	l4001
  8216   00298C                     u3960:
  8217   00298C  802E               	bsf	___flmul@aexp^0,0,c
  8218   00298E                     l4001:
  8219   00298E  502E               	movf	___flmul@aexp^0,w,c
  8220   002990  B4D8               	btfsc	status,2,c
  8221   002992  EFCD  F014         	goto	u3971
  8222   002996  EFCF  F014         	goto	u3970
  8223   00299A                     u3971:
  8224   00299A  EFE2  F014         	goto	l4009
  8225   00299E                     u3970:
  8226   00299E  282E               	incf	___flmul@aexp^0,w,c
  8227   0029A0  A4D8               	btfss	status,2,c
  8228   0029A2  EFD5  F014         	goto	u3981
  8229   0029A6  EFD7  F014         	goto	u3980
  8230   0029AA                     u3981:
  8231   0029AA  EFDF  F014         	goto	l4007
  8232   0029AE                     u3980:
  8233   0029AE  0E00               	movlw	0
  8234   0029B0  6E21               	movwf	___flmul@a^0,c
  8235   0029B2  0E00               	movlw	0
  8236   0029B4  6E22               	movwf	(___flmul@a+1)^0,c
  8237   0029B6  0E00               	movlw	0
  8238   0029B8  6E23               	movwf	(___flmul@a+2)^0,c
  8239   0029BA  0E00               	movlw	0
  8240   0029BC  6E24               	movwf	(___flmul@a+3)^0,c
  8241   0029BE                     l4007:
  8242   0029BE  8E23               	bsf	(___flmul@a+2)^0,7,c
  8243   0029C0  EFEA  F014         	goto	l1130
  8244   0029C4                     l4009:
  8245   0029C4  0E00               	movlw	0
  8246   0029C6  6E21               	movwf	___flmul@a^0,c
  8247   0029C8  0E00               	movlw	0
  8248   0029CA  6E22               	movwf	(___flmul@a+1)^0,c
  8249   0029CC  0E00               	movlw	0
  8250   0029CE  6E23               	movwf	(___flmul@a+2)^0,c
  8251   0029D0  0E00               	movlw	0
  8252   0029D2  6E24               	movwf	(___flmul@a+3)^0,c
  8253   0029D4                     l1130:
  8254   0029D4  502E               	movf	___flmul@aexp^0,w,c
  8255   0029D6  B4D8               	btfsc	status,2,c
  8256   0029D8  EFF0  F014         	goto	u3991
  8257   0029DC  EFF2  F014         	goto	u3990
  8258   0029E0                     u3991:
  8259   0029E0  EFFA  F014         	goto	l4013
  8260   0029E4                     u3990:
  8261   0029E4  502F               	movf	___flmul@bexp^0,w,c
  8262   0029E6  A4D8               	btfss	status,2,c
  8263   0029E8  EFF8  F014         	goto	u4001
  8264   0029EC  EFFA  F014         	goto	u4000
  8265   0029F0                     u4001:
  8266   0029F0  EF04  F015         	goto	l4017
  8267   0029F4                     u4000:
  8268   0029F4                     l4013:
  8269   0029F4  0E00               	movlw	0
  8270   0029F6  6E1D               	movwf	?___flmul^0,c
  8271   0029F8  0E00               	movlw	0
  8272   0029FA  6E1E               	movwf	(?___flmul+1)^0,c
  8273   0029FC  0E00               	movlw	0
  8274   0029FE  6E1F               	movwf	(?___flmul+2)^0,c
  8275   002A00  0E00               	movlw	0
  8276   002A02  6E20               	movwf	(?___flmul+3)^0,c
  8277   002A04  EF9C  F016         	goto	l1134
  8278   002A08                     l4017:
  8279   002A08  5023               	movf	(___flmul@a+2)^0,w,c
  8280   002A0A  021D               	mulwf	___flmul@b^0,c
  8281   002A0C  CFF3 F034          	movff	prodl,___flmul@temp
  8282   002A10  CFF4 F035          	movff	prodh,___flmul@temp+1
  8283   002A14  5034               	movf	___flmul@temp^0,w,c
  8284   002A16  6E2A               	movwf	___flmul@grs^0,c
  8285   002A18  6A2B               	clrf	(___flmul@grs+1)^0,c
  8286   002A1A  6A2C               	clrf	(___flmul@grs+2)^0,c
  8287   002A1C  6A2D               	clrf	(___flmul@grs+3)^0,c
  8288   002A1E  5035               	movf	(___flmul@temp+1)^0,w,c
  8289   002A20  6E30               	movwf	___flmul@prod^0,c
  8290   002A22  6A31               	clrf	(___flmul@prod+1)^0,c
  8291   002A24  6A32               	clrf	(___flmul@prod+2)^0,c
  8292   002A26  6A33               	clrf	(___flmul@prod+3)^0,c
  8293   002A28  5022               	movf	(___flmul@a+1)^0,w,c
  8294   002A2A  021E               	mulwf	(___flmul@b+1)^0,c
  8295   002A2C  CFF3 F034          	movff	prodl,___flmul@temp
  8296   002A30  CFF4 F035          	movff	prodh,___flmul@temp+1
  8297   002A34  5034               	movf	___flmul@temp^0,w,c
  8298   002A36  262A               	addwf	___flmul@grs^0,f,c
  8299   002A38  0E00               	movlw	0
  8300   002A3A  222B               	addwfc	(___flmul@grs+1)^0,f,c
  8301   002A3C  222C               	addwfc	(___flmul@grs+2)^0,f,c
  8302   002A3E  222D               	addwfc	(___flmul@grs+3)^0,f,c
  8303   002A40  5035               	movf	(___flmul@temp+1)^0,w,c
  8304   002A42  2630               	addwf	___flmul@prod^0,f,c
  8305   002A44  0E00               	movlw	0
  8306   002A46  2231               	addwfc	(___flmul@prod+1)^0,f,c
  8307   002A48  2232               	addwfc	(___flmul@prod+2)^0,f,c
  8308   002A4A  2233               	addwfc	(___flmul@prod+3)^0,f,c
  8309   002A4C  5021               	movf	___flmul@a^0,w,c
  8310   002A4E  021F               	mulwf	(___flmul@b+2)^0,c
  8311   002A50  CFF3 F034          	movff	prodl,___flmul@temp
  8312   002A54  CFF4 F035          	movff	prodh,___flmul@temp+1
  8313   002A58  5034               	movf	___flmul@temp^0,w,c
  8314   002A5A  262A               	addwf	___flmul@grs^0,f,c
  8315   002A5C  0E00               	movlw	0
  8316   002A5E  222B               	addwfc	(___flmul@grs+1)^0,f,c
  8317   002A60  222C               	addwfc	(___flmul@grs+2)^0,f,c
  8318   002A62  222D               	addwfc	(___flmul@grs+3)^0,f,c
  8319   002A64  5035               	movf	(___flmul@temp+1)^0,w,c
  8320   002A66  2630               	addwf	___flmul@prod^0,f,c
  8321   002A68  0E00               	movlw	0
  8322   002A6A  2231               	addwfc	(___flmul@prod+1)^0,f,c
  8323   002A6C  2232               	addwfc	(___flmul@prod+2)^0,f,c
  8324   002A6E  2233               	addwfc	(___flmul@prod+3)^0,f,c
  8325   002A70  C02C  F02D         	movff	___flmul@grs+2,___flmul@grs+3
  8326   002A74  C02B  F02C         	movff	___flmul@grs+1,___flmul@grs+2
  8327   002A78  C02A  F02B         	movff	___flmul@grs,___flmul@grs+1
  8328   002A7C  6A2A               	clrf	___flmul@grs^0,c
  8329   002A7E  5021               	movf	___flmul@a^0,w,c
  8330   002A80  021E               	mulwf	(___flmul@b+1)^0,c
  8331   002A82  CFF3 F034          	movff	prodl,___flmul@temp
  8332   002A86  CFF4 F035          	movff	prodh,___flmul@temp+1
  8333   002A8A  5034               	movf	___flmul@temp^0,w,c
  8334   002A8C  262A               	addwf	___flmul@grs^0,f,c
  8335   002A8E  5035               	movf	(___flmul@temp+1)^0,w,c
  8336   002A90  222B               	addwfc	(___flmul@grs+1)^0,f,c
  8337   002A92  0E00               	movlw	0
  8338   002A94  222C               	addwfc	(___flmul@grs+2)^0,f,c
  8339   002A96  0E00               	movlw	0
  8340   002A98  222D               	addwfc	(___flmul@grs+3)^0,f,c
  8341   002A9A  5022               	movf	(___flmul@a+1)^0,w,c
  8342   002A9C  021D               	mulwf	___flmul@b^0,c
  8343   002A9E  CFF3 F034          	movff	prodl,___flmul@temp
  8344   002AA2  CFF4 F035          	movff	prodh,___flmul@temp+1
  8345   002AA6  5034               	movf	___flmul@temp^0,w,c
  8346   002AA8  262A               	addwf	___flmul@grs^0,f,c
  8347   002AAA  5035               	movf	(___flmul@temp+1)^0,w,c
  8348   002AAC  222B               	addwfc	(___flmul@grs+1)^0,f,c
  8349   002AAE  0E00               	movlw	0
  8350   002AB0  222C               	addwfc	(___flmul@grs+2)^0,f,c
  8351   002AB2  0E00               	movlw	0
  8352   002AB4  222D               	addwfc	(___flmul@grs+3)^0,f,c
  8353   002AB6  C02C  F02D         	movff	___flmul@grs+2,___flmul@grs+3
  8354   002ABA  C02B  F02C         	movff	___flmul@grs+1,___flmul@grs+2
  8355   002ABE  C02A  F02B         	movff	___flmul@grs,___flmul@grs+1
  8356   002AC2  6A2A               	clrf	___flmul@grs^0,c
  8357   002AC4  5021               	movf	___flmul@a^0,w,c
  8358   002AC6  021D               	mulwf	___flmul@b^0,c
  8359   002AC8  CFF3 F034          	movff	prodl,___flmul@temp
  8360   002ACC  CFF4 F035          	movff	prodh,___flmul@temp+1
  8361   002AD0  5034               	movf	___flmul@temp^0,w,c
  8362   002AD2  262A               	addwf	___flmul@grs^0,f,c
  8363   002AD4  5035               	movf	(___flmul@temp+1)^0,w,c
  8364   002AD6  222B               	addwfc	(___flmul@grs+1)^0,f,c
  8365   002AD8  0E00               	movlw	0
  8366   002ADA  222C               	addwfc	(___flmul@grs+2)^0,f,c
  8367   002ADC  0E00               	movlw	0
  8368   002ADE  222D               	addwfc	(___flmul@grs+3)^0,f,c
  8369   002AE0  5023               	movf	(___flmul@a+2)^0,w,c
  8370   002AE2  021E               	mulwf	(___flmul@b+1)^0,c
  8371   002AE4  CFF3 F034          	movff	prodl,___flmul@temp
  8372   002AE8  CFF4 F035          	movff	prodh,___flmul@temp+1
  8373   002AEC  5034               	movf	___flmul@temp^0,w,c
  8374   002AEE  2630               	addwf	___flmul@prod^0,f,c
  8375   002AF0  5035               	movf	(___flmul@temp+1)^0,w,c
  8376   002AF2  2231               	addwfc	(___flmul@prod+1)^0,f,c
  8377   002AF4  0E00               	movlw	0
  8378   002AF6  2232               	addwfc	(___flmul@prod+2)^0,f,c
  8379   002AF8  0E00               	movlw	0
  8380   002AFA  2233               	addwfc	(___flmul@prod+3)^0,f,c
  8381   002AFC  5022               	movf	(___flmul@a+1)^0,w,c
  8382   002AFE  021F               	mulwf	(___flmul@b+2)^0,c
  8383   002B00  CFF3 F034          	movff	prodl,___flmul@temp
  8384   002B04  CFF4 F035          	movff	prodh,___flmul@temp+1
  8385   002B08  5034               	movf	___flmul@temp^0,w,c
  8386   002B0A  2630               	addwf	___flmul@prod^0,f,c
  8387   002B0C  5035               	movf	(___flmul@temp+1)^0,w,c
  8388   002B0E  2231               	addwfc	(___flmul@prod+1)^0,f,c
  8389   002B10  0E00               	movlw	0
  8390   002B12  2232               	addwfc	(___flmul@prod+2)^0,f,c
  8391   002B14  0E00               	movlw	0
  8392   002B16  2233               	addwfc	(___flmul@prod+3)^0,f,c
  8393   002B18  5023               	movf	(___flmul@a+2)^0,w,c
  8394   002B1A  021F               	mulwf	(___flmul@b+2)^0,c
  8395   002B1C  CFF3 F034          	movff	prodl,___flmul@temp
  8396   002B20  CFF4 F035          	movff	prodh,___flmul@temp+1
  8397   002B24  5034               	movf	___flmul@temp^0,w,c
  8398   002B26  6E25               	movwf	??___flmul^0,c
  8399   002B28  5035               	movf	(___flmul@temp+1)^0,w,c
  8400   002B2A  6E26               	movwf	(??___flmul+1)^0,c
  8401   002B2C  6A27               	clrf	(??___flmul+2)^0,c
  8402   002B2E  6A28               	clrf	(??___flmul+3)^0,c
  8403   002B30  C027  F028         	movff	??___flmul+2,??___flmul+3
  8404   002B34  C026  F027         	movff	??___flmul+1,??___flmul+2
  8405   002B38  C025  F026         	movff	??___flmul,??___flmul+1
  8406   002B3C  6A25               	clrf	??___flmul^0,c
  8407   002B3E  5025               	movf	??___flmul^0,w,c
  8408   002B40  2630               	addwf	___flmul@prod^0,f,c
  8409   002B42  5026               	movf	(??___flmul+1)^0,w,c
  8410   002B44  2231               	addwfc	(___flmul@prod+1)^0,f,c
  8411   002B46  5027               	movf	(??___flmul+2)^0,w,c
  8412   002B48  2232               	addwfc	(___flmul@prod+2)^0,f,c
  8413   002B4A  5028               	movf	(??___flmul+3)^0,w,c
  8414   002B4C  2233               	addwfc	(___flmul@prod+3)^0,f,c
  8415   002B4E  C02A  F025         	movff	___flmul@grs,??___flmul
  8416   002B52  C02B  F026         	movff	___flmul@grs+1,??___flmul+1
  8417   002B56  C02C  F027         	movff	___flmul@grs+2,??___flmul+2
  8418   002B5A  C02D  F028         	movff	___flmul@grs+3,??___flmul+3
  8419   002B5E  0E19               	movlw	25
  8420   002B60  EFB7  F015         	goto	u4010
  8421   002B64                     u4015:
  8422   002B64  90D8               	bcf	status,0,c
  8423   002B66  3228               	rrcf	(??___flmul+3)^0,f,c
  8424   002B68  3227               	rrcf	(??___flmul+2)^0,f,c
  8425   002B6A  3226               	rrcf	(??___flmul+1)^0,f,c
  8426   002B6C  3225               	rrcf	??___flmul^0,f,c
  8427   002B6E                     u4010:
  8428   002B6E  2EE8               	decfsz	wreg,f,c
  8429   002B70  EFB2  F015         	goto	u4015
  8430   002B74  5025               	movf	??___flmul^0,w,c
  8431   002B76  2630               	addwf	___flmul@prod^0,f,c
  8432   002B78  5026               	movf	(??___flmul+1)^0,w,c
  8433   002B7A  2231               	addwfc	(___flmul@prod+1)^0,f,c
  8434   002B7C  5027               	movf	(??___flmul+2)^0,w,c
  8435   002B7E  2232               	addwfc	(___flmul@prod+2)^0,f,c
  8436   002B80  5028               	movf	(??___flmul+3)^0,w,c
  8437   002B82  2233               	addwfc	(___flmul@prod+3)^0,f,c
  8438   002B84  C02C  F02D         	movff	___flmul@grs+2,___flmul@grs+3
  8439   002B88  C02B  F02C         	movff	___flmul@grs+1,___flmul@grs+2
  8440   002B8C  C02A  F02B         	movff	___flmul@grs,___flmul@grs+1
  8441   002B90  6A2A               	clrf	___flmul@grs^0,c
  8442   002B92  502E               	movf	___flmul@aexp^0,w,c
  8443   002B94  C02F  F025         	movff	___flmul@bexp,??___flmul
  8444   002B98  6A26               	clrf	(??___flmul+1)^0,c
  8445   002B9A  2625               	addwf	??___flmul^0,f,c
  8446   002B9C  0E00               	movlw	0
  8447   002B9E  2226               	addwfc	(??___flmul+1)^0,f,c
  8448   002BA0  0E82               	movlw	130
  8449   002BA2  2425               	addwf	??___flmul^0,w,c
  8450   002BA4  6E34               	movwf	___flmul@temp^0,c
  8451   002BA6  0EFF               	movlw	255
  8452   002BA8  2026               	addwfc	(??___flmul+1)^0,w,c
  8453   002BAA  6E35               	movwf	(___flmul@temp+1)^0,c
  8454   002BAC  EFED  F015         	goto	l4065
  8455   002BB0                     l4059:
  8456   002BB0  90D8               	bcf	status,0,c
  8457   002BB2  3630               	rlcf	___flmul@prod^0,f,c
  8458   002BB4  3631               	rlcf	(___flmul@prod+1)^0,f,c
  8459   002BB6  3632               	rlcf	(___flmul@prod+2)^0,f,c
  8460   002BB8  3633               	rlcf	(___flmul@prod+3)^0,f,c
  8461   002BBA  AE2D               	btfss	(___flmul@grs+3)^0,7,c
  8462   002BBC  EFE2  F015         	goto	u4021
  8463   002BC0  EFE4  F015         	goto	u4020
  8464   002BC4                     u4021:
  8465   002BC4  EFE5  F015         	goto	l1137
  8466   002BC8                     u4020:
  8467   002BC8  8030               	bsf	___flmul@prod^0,0,c
  8468   002BCA                     l1137:
  8469   002BCA  90D8               	bcf	status,0,c
  8470   002BCC  362A               	rlcf	___flmul@grs^0,f,c
  8471   002BCE  362B               	rlcf	(___flmul@grs+1)^0,f,c
  8472   002BD0  362C               	rlcf	(___flmul@grs+2)^0,f,c
  8473   002BD2  362D               	rlcf	(___flmul@grs+3)^0,f,c
  8474   002BD4  0634               	decf	___flmul@temp^0,f,c
  8475   002BD6  A0D8               	btfss	status,0,c
  8476   002BD8  0635               	decf	(___flmul@temp+1)^0,f,c
  8477   002BDA                     l4065:
  8478   002BDA  AE32               	btfss	(___flmul@prod+2)^0,7,c
  8479   002BDC  EFF2  F015         	goto	u4031
  8480   002BE0  EFF4  F015         	goto	u4030
  8481   002BE4                     u4031:
  8482   002BE4  EFD8  F015         	goto	l4059
  8483   002BE8                     u4030:
  8484   002BE8  0E00               	movlw	0
  8485   002BEA  6E2E               	movwf	___flmul@aexp^0,c
  8486   002BEC  AE2D               	btfss	(___flmul@grs+3)^0,7,c
  8487   002BEE  EFFB  F015         	goto	u4041
  8488   002BF2  EFFD  F015         	goto	u4040
  8489   002BF6                     u4041:
  8490   002BF6  EF21  F016         	goto	l1139
  8491   002BFA                     u4040:
  8492   002BFA  0EFF               	movlw	255
  8493   002BFC  142A               	andwf	___flmul@grs^0,w,c
  8494   002BFE  6E25               	movwf	??___flmul^0,c
  8495   002C00  0EFF               	movlw	255
  8496   002C02  142B               	andwf	(___flmul@grs+1)^0,w,c
  8497   002C04  6E26               	movwf	(??___flmul+1)^0,c
  8498   002C06  0EFF               	movlw	255
  8499   002C08  142C               	andwf	(___flmul@grs+2)^0,w,c
  8500   002C0A  6E27               	movwf	(??___flmul+2)^0,c
  8501   002C0C  0E7F               	movlw	127
  8502   002C0E  142D               	andwf	(___flmul@grs+3)^0,w,c
  8503   002C10  6E28               	movwf	(??___flmul+3)^0,c
  8504   002C12  5025               	movf	??___flmul^0,w,c
  8505   002C14  1026               	iorwf	(??___flmul+1)^0,w,c
  8506   002C16  1027               	iorwf	(??___flmul+2)^0,w,c
  8507   002C18  1028               	iorwf	(??___flmul+3)^0,w,c
  8508   002C1A  B4D8               	btfsc	status,2,c
  8509   002C1C  EF12  F016         	goto	u4051
  8510   002C20  EF14  F016         	goto	u4050
  8511   002C24                     u4051:
  8512   002C24  EF18  F016         	goto	l1140
  8513   002C28                     u4050:
  8514   002C28                     l4073:
  8515   002C28  0E01               	movlw	1
  8516   002C2A  6E2E               	movwf	___flmul@aexp^0,c
  8517   002C2C  EF21  F016         	goto	l1139
  8518   002C30                     l1140:
  8519   002C30  A030               	btfss	___flmul@prod^0,0,c
  8520   002C32  EF1D  F016         	goto	u4061
  8521   002C36  EF1F  F016         	goto	u4060
  8522   002C3A                     u4061:
  8523   002C3A  EF21  F016         	goto	l1139
  8524   002C3E                     u4060:
  8525   002C3E  EF14  F016         	goto	l4073
  8526   002C42                     l1139:
  8527   002C42  502E               	movf	___flmul@aexp^0,w,c
  8528   002C44  B4D8               	btfsc	status,2,c
  8529   002C46  EF27  F016         	goto	u4071
  8530   002C4A  EF29  F016         	goto	u4070
  8531   002C4E                     u4071:
  8532   002C4E  EF4D  F016         	goto	l4085
  8533   002C52                     u4070:
  8534   002C52  0E01               	movlw	1
  8535   002C54  2630               	addwf	___flmul@prod^0,f,c
  8536   002C56  0E00               	movlw	0
  8537   002C58  2231               	addwfc	(___flmul@prod+1)^0,f,c
  8538   002C5A  2232               	addwfc	(___flmul@prod+2)^0,f,c
  8539   002C5C  2233               	addwfc	(___flmul@prod+3)^0,f,c
  8540   002C5E  A033               	btfss	(___flmul@prod+3)^0,0,c
  8541   002C60  EF34  F016         	goto	u4081
  8542   002C64  EF36  F016         	goto	u4080
  8543   002C68                     u4081:
  8544   002C68  EF4D  F016         	goto	l4085
  8545   002C6C                     u4080:
  8546   002C6C  C030  F025         	movff	___flmul@prod,??___flmul
  8547   002C70  C031  F026         	movff	___flmul@prod+1,??___flmul+1
  8548   002C74  C032  F027         	movff	___flmul@prod+2,??___flmul+2
  8549   002C78  C033  F028         	movff	___flmul@prod+3,??___flmul+3
  8550   002C7C  3428               	rlcf	(??___flmul+3)^0,w,c
  8551   002C7E  3228               	rrcf	(??___flmul+3)^0,f,c
  8552   002C80  3227               	rrcf	(??___flmul+2)^0,f,c
  8553   002C82  3226               	rrcf	(??___flmul+1)^0,f,c
  8554   002C84  3225               	rrcf	??___flmul^0,f,c
  8555   002C86  C025  F030         	movff	??___flmul,___flmul@prod
  8556   002C8A  C026  F031         	movff	??___flmul+1,___flmul@prod+1
  8557   002C8E  C027  F032         	movff	??___flmul+2,___flmul@prod+2
  8558   002C92  C028  F033         	movff	??___flmul+3,___flmul@prod+3
  8559   002C96  4A34               	infsnz	___flmul@temp^0,f,c
  8560   002C98  2A35               	incf	(___flmul@temp+1)^0,f,c
  8561   002C9A                     l4085:
  8562   002C9A  BE35               	btfsc	(___flmul@temp+1)^0,7,c
  8563   002C9C  EF58  F016         	goto	u4091
  8564   002CA0  5035               	movf	(___flmul@temp+1)^0,w,c
  8565   002CA2  E108               	bnz	u4090
  8566   002CA4  2834               	incf	___flmul@temp^0,w,c
  8567   002CA6  A0D8               	btfss	status,0,c
  8568   002CA8  EF58  F016         	goto	u4091
  8569   002CAC  EF5A  F016         	goto	u4090
  8570   002CB0                     u4091:
  8571   002CB0  EF64  F016         	goto	l4089
  8572   002CB4                     u4090:
  8573   002CB4  0E00               	movlw	0
  8574   002CB6  6E30               	movwf	___flmul@prod^0,c
  8575   002CB8  0E00               	movlw	0
  8576   002CBA  6E31               	movwf	(___flmul@prod+1)^0,c
  8577   002CBC  0E80               	movlw	128
  8578   002CBE  6E32               	movwf	(___flmul@prod+2)^0,c
  8579   002CC0  0E7F               	movlw	127
  8580   002CC2  6E33               	movwf	(___flmul@prod+3)^0,c
  8581   002CC4  EF92  F016         	goto	l4101
  8582   002CC8                     l4089:
  8583   002CC8  BE35               	btfsc	(___flmul@temp+1)^0,7,c
  8584   002CCA  EF71  F016         	goto	u4100
  8585   002CCE  5035               	movf	(___flmul@temp+1)^0,w,c
  8586   002CD0  E106               	bnz	u4101
  8587   002CD2  0434               	decf	___flmul@temp^0,w,c
  8588   002CD4  B0D8               	btfsc	status,0,c
  8589   002CD6  EF6F  F016         	goto	u4101
  8590   002CDA  EF71  F016         	goto	u4100
  8591   002CDE                     u4101:
  8592   002CDE  EF7D  F016         	goto	l1147
  8593   002CE2                     u4100:
  8594   002CE2  0E00               	movlw	0
  8595   002CE4  6E30               	movwf	___flmul@prod^0,c
  8596   002CE6  0E00               	movlw	0
  8597   002CE8  6E31               	movwf	(___flmul@prod+1)^0,c
  8598   002CEA  0E00               	movlw	0
  8599   002CEC  6E32               	movwf	(___flmul@prod+2)^0,c
  8600   002CEE  0E00               	movlw	0
  8601   002CF0  6E33               	movwf	(___flmul@prod+3)^0,c
  8602   002CF2  0E00               	movlw	0
  8603   002CF4  6E29               	movwf	___flmul@sign^0,c
  8604   002CF6  EF92  F016         	goto	l4101
  8605   002CFA                     l1147:
  8606   002CFA  C034  F02F         	movff	___flmul@temp,___flmul@bexp
  8607   002CFE  0EFF               	movlw	255
  8608   002D00  1630               	andwf	___flmul@prod^0,f,c
  8609   002D02  0EFF               	movlw	255
  8610   002D04  1631               	andwf	(___flmul@prod+1)^0,f,c
  8611   002D06  0E7F               	movlw	127
  8612   002D08  1632               	andwf	(___flmul@prod+2)^0,f,c
  8613   002D0A  0E00               	movlw	0
  8614   002D0C  1633               	andwf	(___flmul@prod+3)^0,f,c
  8615   002D0E  A02F               	btfss	___flmul@bexp^0,0,c
  8616   002D10  EF8C  F016         	goto	u4111
  8617   002D14  EF8E  F016         	goto	u4110
  8618   002D18                     u4111:
  8619   002D18  EF8F  F016         	goto	l4099
  8620   002D1C                     u4110:
  8621   002D1C  8E32               	bsf	(___flmul@prod+2)^0,7,c
  8622   002D1E                     l4099:
  8623   002D1E  90D8               	bcf	status,0,c
  8624   002D20  302F               	rrcf	___flmul@bexp^0,w,c
  8625   002D22  6E33               	movwf	(___flmul@prod+3)^0,c
  8626   002D24                     l4101:
  8627   002D24  5029               	movf	___flmul@sign^0,w,c
  8628   002D26  1233               	iorwf	(___flmul@prod+3)^0,f,c
  8629   002D28  C030  F01D         	movff	___flmul@prod,?___flmul
  8630   002D2C  C031  F01E         	movff	___flmul@prod+1,?___flmul+1
  8631   002D30  C032  F01F         	movff	___flmul@prod+2,?___flmul+2
  8632   002D34  C033  F020         	movff	___flmul@prod+3,?___flmul+3
  8633   002D38                     l1134:
  8634   002D38  0012               	return		;funcret
  8635   002D3A                     __end_of___flmul:
  8636                           	callstack 0
  8637                           
  8638 ;; *************** function ___flge *****************
  8639 ;; Defined at:
  8640 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\flge.c"
  8641 ;; Parameters:    Size  Location     Type
  8642 ;;  ff1             4   53[COMRAM] unsigned char 
  8643 ;;  ff2             4   57[COMRAM] unsigned char 
  8644 ;; Auto vars:     Size  Location     Type
  8645 ;;		None
  8646 ;; Return value:  Size  Location     Type
  8647 ;;		None               void
  8648 ;; Registers used:
  8649 ;;		wreg, status,2, status,0
  8650 ;; Tracked objects:
  8651 ;;		On entry : 0/0
  8652 ;;		On exit  : 0/0
  8653 ;;		Unchanged: 0/0
  8654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8655 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8656 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8657 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8658 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8659 ;;Total ram usage:       12 bytes
  8660 ;; Hardware stack levels used: 1
  8661 ;; Hardware stack levels required when called: 2
  8662 ;; This function calls:
  8663 ;;		Nothing
  8664 ;; This function is called by:
  8665 ;;		_colorDetect
  8666 ;;		_main
  8667 ;;		_efgtoa
  8668 ;; This function uses a non-reentrant model
  8669 ;;
  8670                           
  8671                           	psect	text26
  8672   0048E6                     __ptext26:
  8673                           	callstack 0
  8674   0048E6                     ___flge:
  8675                           	callstack 23
  8676   0048E6  0E00               	movlw	0
  8677   0048E8  1436               	andwf	___flge@ff1^0,w,c
  8678   0048EA  6E3E               	movwf	??___flge^0,c
  8679   0048EC  0E00               	movlw	0
  8680   0048EE  1437               	andwf	(___flge@ff1+1)^0,w,c
  8681   0048F0  6E3F               	movwf	(??___flge+1)^0,c
  8682   0048F2  0E80               	movlw	128
  8683   0048F4  1438               	andwf	(___flge@ff1+2)^0,w,c
  8684   0048F6  6E40               	movwf	(??___flge+2)^0,c
  8685   0048F8  0E7F               	movlw	127
  8686   0048FA  1439               	andwf	(___flge@ff1+3)^0,w,c
  8687   0048FC  6E41               	movwf	(??___flge+3)^0,c
  8688   0048FE  503E               	movf	??___flge^0,w,c
  8689   004900  103F               	iorwf	(??___flge+1)^0,w,c
  8690   004902  1040               	iorwf	(??___flge+2)^0,w,c
  8691   004904  1041               	iorwf	(??___flge+3)^0,w,c
  8692   004906  A4D8               	btfss	status,2,c
  8693   004908  EF88  F024         	goto	u4151
  8694   00490C  EF8A  F024         	goto	u4150
  8695   004910                     u4151:
  8696   004910  EF92  F024         	goto	l4133
  8697   004914                     u4150:
  8698   004914  0E00               	movlw	0
  8699   004916  6E36               	movwf	___flge@ff1^0,c
  8700   004918  0E00               	movlw	0
  8701   00491A  6E37               	movwf	(___flge@ff1+1)^0,c
  8702   00491C  0E00               	movlw	0
  8703   00491E  6E38               	movwf	(___flge@ff1+2)^0,c
  8704   004920  0E00               	movlw	0
  8705   004922  6E39               	movwf	(___flge@ff1+3)^0,c
  8706   004924                     l4133:
  8707   004924  0E00               	movlw	0
  8708   004926  143A               	andwf	___flge@ff2^0,w,c
  8709   004928  6E3E               	movwf	??___flge^0,c
  8710   00492A  0E00               	movlw	0
  8711   00492C  143B               	andwf	(___flge@ff2+1)^0,w,c
  8712   00492E  6E3F               	movwf	(??___flge+1)^0,c
  8713   004930  0E80               	movlw	128
  8714   004932  143C               	andwf	(___flge@ff2+2)^0,w,c
  8715   004934  6E40               	movwf	(??___flge+2)^0,c
  8716   004936  0E7F               	movlw	127
  8717   004938  143D               	andwf	(___flge@ff2+3)^0,w,c
  8718   00493A  6E41               	movwf	(??___flge+3)^0,c
  8719   00493C  503E               	movf	??___flge^0,w,c
  8720   00493E  103F               	iorwf	(??___flge+1)^0,w,c
  8721   004940  1040               	iorwf	(??___flge+2)^0,w,c
  8722   004942  1041               	iorwf	(??___flge+3)^0,w,c
  8723   004944  A4D8               	btfss	status,2,c
  8724   004946  EFA7  F024         	goto	u4161
  8725   00494A  EFA9  F024         	goto	u4160
  8726   00494E                     u4161:
  8727   00494E  EFB1  F024         	goto	l4137
  8728   004952                     u4160:
  8729   004952  0E00               	movlw	0
  8730   004954  6E3A               	movwf	___flge@ff2^0,c
  8731   004956  0E00               	movlw	0
  8732   004958  6E3B               	movwf	(___flge@ff2+1)^0,c
  8733   00495A  0E00               	movlw	0
  8734   00495C  6E3C               	movwf	(___flge@ff2+2)^0,c
  8735   00495E  0E00               	movlw	0
  8736   004960  6E3D               	movwf	(___flge@ff2+3)^0,c
  8737   004962                     l4137:
  8738   004962  AE39               	btfss	(___flge@ff1+3)^0,7,c
  8739   004964  EFB6  F024         	goto	u4171
  8740   004968  EFB8  F024         	goto	u4170
  8741   00496C                     u4171:
  8742   00496C  EFC1  F024         	goto	l4141
  8743   004970                     u4170:
  8744   004970  6C36               	negf	___flge@ff1^0,c
  8745   004972  1E37               	comf	(___flge@ff1+1)^0,f,c
  8746   004974  B0D8               	btfsc	status,0,c
  8747   004976  2A37               	incf	(___flge@ff1+1)^0,f,c
  8748   004978  1E38               	comf	(___flge@ff1+2)^0,f,c
  8749   00497A  B0D8               	btfsc	status,0,c
  8750   00497C  2A38               	incf	(___flge@ff1+2)^0,f,c
  8751   00497E  0E80               	movlw	128
  8752   004980  5639               	subfwb	(___flge@ff1+3)^0,f,c
  8753   004982                     l4141:
  8754   004982  AE3D               	btfss	(___flge@ff2+3)^0,7,c
  8755   004984  EFC6  F024         	goto	u4181
  8756   004988  EFC8  F024         	goto	u4180
  8757   00498C                     u4181:
  8758   00498C  EFD1  F024         	goto	l781
  8759   004990                     u4180:
  8760   004990  6C3A               	negf	___flge@ff2^0,c
  8761   004992  1E3B               	comf	(___flge@ff2+1)^0,f,c
  8762   004994  B0D8               	btfsc	status,0,c
  8763   004996  2A3B               	incf	(___flge@ff2+1)^0,f,c
  8764   004998  1E3C               	comf	(___flge@ff2+2)^0,f,c
  8765   00499A  B0D8               	btfsc	status,0,c
  8766   00499C  2A3C               	incf	(___flge@ff2+2)^0,f,c
  8767   00499E  0E80               	movlw	128
  8768   0049A0  563D               	subfwb	(___flge@ff2+3)^0,f,c
  8769   0049A2                     l781:
  8770   0049A2  0E00               	movlw	0
  8771   0049A4  1A36               	xorwf	___flge@ff1^0,f,c
  8772   0049A6  0E00               	movlw	0
  8773   0049A8  1A37               	xorwf	(___flge@ff1+1)^0,f,c
  8774   0049AA  0E00               	movlw	0
  8775   0049AC  1A38               	xorwf	(___flge@ff1+2)^0,f,c
  8776   0049AE  0E80               	movlw	128
  8777   0049B0  1A39               	xorwf	(___flge@ff1+3)^0,f,c
  8778   0049B2  0E00               	movlw	0
  8779   0049B4  1A3A               	xorwf	___flge@ff2^0,f,c
  8780   0049B6  0E00               	movlw	0
  8781   0049B8  1A3B               	xorwf	(___flge@ff2+1)^0,f,c
  8782   0049BA  0E00               	movlw	0
  8783   0049BC  1A3C               	xorwf	(___flge@ff2+2)^0,f,c
  8784   0049BE  0E80               	movlw	128
  8785   0049C0  1A3D               	xorwf	(___flge@ff2+3)^0,f,c
  8786   0049C2  503A               	movf	___flge@ff2^0,w,c
  8787   0049C4  5C36               	subwf	___flge@ff1^0,w,c
  8788   0049C6  503B               	movf	(___flge@ff2+1)^0,w,c
  8789   0049C8  5837               	subwfb	(___flge@ff1+1)^0,w,c
  8790   0049CA  503C               	movf	(___flge@ff2+2)^0,w,c
  8791   0049CC  5838               	subwfb	(___flge@ff1+2)^0,w,c
  8792   0049CE  503D               	movf	(___flge@ff2+3)^0,w,c
  8793   0049D0  5839               	subwfb	(___flge@ff1+3)^0,w,c
  8794   0049D2  B0D8               	btfsc	status,0,c
  8795   0049D4  EFEE  F024         	goto	u4191
  8796   0049D8  EFF0  F024         	goto	u4190
  8797   0049DC                     u4191:
  8798   0049DC  EFF3  F024         	goto	l4147
  8799   0049E0                     u4190:
  8800   0049E0  90D8               	bcf	status,0,c
  8801   0049E2  EFF4  F024         	goto	l786
  8802   0049E6                     l4147:
  8803   0049E6  80D8               	bsf	status,0,c
  8804   0049E8                     l786:
  8805   0049E8  0012               	return		;funcret
  8806   0049EA                     __end_of___flge:
  8807                           	callstack 0
  8808                           
  8809 ;; *************** function ___fleq *****************
  8810 ;; Defined at:
  8811 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\fleq.c"
  8812 ;; Parameters:    Size  Location     Type
  8813 ;;  ff1             4    4[COMRAM] unsigned char 
  8814 ;;  ff2             4    8[COMRAM] unsigned char 
  8815 ;; Auto vars:     Size  Location     Type
  8816 ;;		None
  8817 ;; Return value:  Size  Location     Type
  8818 ;;		None               void
  8819 ;; Registers used:
  8820 ;;		wreg, status,2, status,0
  8821 ;; Tracked objects:
  8822 ;;		On entry : 0/0
  8823 ;;		On exit  : 0/0
  8824 ;;		Unchanged: 0/0
  8825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8826 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8827 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8828 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8829 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8830 ;;Total ram usage:       12 bytes
  8831 ;; Hardware stack levels used: 1
  8832 ;; Hardware stack levels required when called: 2
  8833 ;; This function calls:
  8834 ;;		Nothing
  8835 ;; This function is called by:
  8836 ;;		_efgtoa
  8837 ;; This function uses a non-reentrant model
  8838 ;;
  8839                           
  8840                           	psect	text27
  8841   0050A6                     __ptext27:
  8842                           	callstack 0
  8843   0050A6                     ___fleq:
  8844                           	callstack 23
  8845   0050A6  0E00               	movlw	0
  8846   0050A8  1405               	andwf	___fleq@ff1^0,w,c
  8847   0050AA  6E0D               	movwf	??___fleq^0,c
  8848   0050AC  0E00               	movlw	0
  8849   0050AE  1406               	andwf	(___fleq@ff1+1)^0,w,c
  8850   0050B0  6E0E               	movwf	(??___fleq+1)^0,c
  8851   0050B2  0E80               	movlw	128
  8852   0050B4  1407               	andwf	(___fleq@ff1+2)^0,w,c
  8853   0050B6  6E0F               	movwf	(??___fleq+2)^0,c
  8854   0050B8  0E7F               	movlw	127
  8855   0050BA  1408               	andwf	(___fleq@ff1+3)^0,w,c
  8856   0050BC  6E10               	movwf	(??___fleq+3)^0,c
  8857   0050BE  500D               	movf	??___fleq^0,w,c
  8858   0050C0  100E               	iorwf	(??___fleq+1)^0,w,c
  8859   0050C2  100F               	iorwf	(??___fleq+2)^0,w,c
  8860   0050C4  1010               	iorwf	(??___fleq+3)^0,w,c
  8861   0050C6  A4D8               	btfss	status,2,c
  8862   0050C8  EF68  F028         	goto	u4121
  8863   0050CC  EF6A  F028         	goto	u4120
  8864   0050D0                     u4121:
  8865   0050D0  EF72  F028         	goto	l4117
  8866   0050D4                     u4120:
  8867   0050D4  0E00               	movlw	0
  8868   0050D6  6E05               	movwf	___fleq@ff1^0,c
  8869   0050D8  0E00               	movlw	0
  8870   0050DA  6E06               	movwf	(___fleq@ff1+1)^0,c
  8871   0050DC  0E00               	movlw	0
  8872   0050DE  6E07               	movwf	(___fleq@ff1+2)^0,c
  8873   0050E0  0E00               	movlw	0
  8874   0050E2  6E08               	movwf	(___fleq@ff1+3)^0,c
  8875   0050E4                     l4117:
  8876   0050E4  0E00               	movlw	0
  8877   0050E6  1409               	andwf	___fleq@ff2^0,w,c
  8878   0050E8  6E0D               	movwf	??___fleq^0,c
  8879   0050EA  0E00               	movlw	0
  8880   0050EC  140A               	andwf	(___fleq@ff2+1)^0,w,c
  8881   0050EE  6E0E               	movwf	(??___fleq+1)^0,c
  8882   0050F0  0E80               	movlw	128
  8883   0050F2  140B               	andwf	(___fleq@ff2+2)^0,w,c
  8884   0050F4  6E0F               	movwf	(??___fleq+2)^0,c
  8885   0050F6  0E7F               	movlw	127
  8886   0050F8  140C               	andwf	(___fleq@ff2+3)^0,w,c
  8887   0050FA  6E10               	movwf	(??___fleq+3)^0,c
  8888   0050FC  500D               	movf	??___fleq^0,w,c
  8889   0050FE  100E               	iorwf	(??___fleq+1)^0,w,c
  8890   005100  100F               	iorwf	(??___fleq+2)^0,w,c
  8891   005102  1010               	iorwf	(??___fleq+3)^0,w,c
  8892   005104  A4D8               	btfss	status,2,c
  8893   005106  EF87  F028         	goto	u4131
  8894   00510A  EF89  F028         	goto	u4130
  8895   00510E                     u4131:
  8896   00510E  EF91  F028         	goto	l4121
  8897   005112                     u4130:
  8898   005112  0E00               	movlw	0
  8899   005114  6E09               	movwf	___fleq@ff2^0,c
  8900   005116  0E00               	movlw	0
  8901   005118  6E0A               	movwf	(___fleq@ff2+1)^0,c
  8902   00511A  0E00               	movlw	0
  8903   00511C  6E0B               	movwf	(___fleq@ff2+2)^0,c
  8904   00511E  0E00               	movlw	0
  8905   005120  6E0C               	movwf	(___fleq@ff2+3)^0,c
  8906   005122                     l4121:
  8907   005122  5009               	movf	___fleq@ff2^0,w,c
  8908   005124  1805               	xorwf	___fleq@ff1^0,w,c
  8909   005126  E10F               	bnz	u4140
  8910   005128  500A               	movf	(___fleq@ff2+1)^0,w,c
  8911   00512A  1806               	xorwf	(___fleq@ff1+1)^0,w,c
  8912   00512C  E10C               	bnz	u4140
  8913   00512E  500B               	movf	(___fleq@ff2+2)^0,w,c
  8914   005130  1807               	xorwf	(___fleq@ff1+2)^0,w,c
  8915   005132  E109               	bnz	u4140
  8916   005134  500C               	movf	(___fleq@ff2+3)^0,w,c
  8917   005136  1808               	xorwf	(___fleq@ff1+3)^0,w,c
  8918   005138  B4D8               	btfsc	status,2,c
  8919   00513A  EFA1  F028         	goto	u4141
  8920   00513E  EFA3  F028         	goto	u4140
  8921   005142                     u4141:
  8922   005142  EFA6  F028         	goto	l4125
  8923   005146                     u4140:
  8924   005146  90D8               	bcf	status,0,c
  8925   005148  EFA7  F028         	goto	l775
  8926   00514C                     l4125:
  8927   00514C  80D8               	bsf	status,0,c
  8928   00514E                     l775:
  8929   00514E  0012               	return		;funcret
  8930   005150                     __end_of___fleq:
  8931                           	callstack 0
  8932                           
  8933 ;; *************** function ___fldiv *****************
  8934 ;; Defined at:
  8935 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\sprcdiv.c"
  8936 ;; Parameters:    Size  Location     Type
  8937 ;;  b               4   53[COMRAM] unsigned char 
  8938 ;;  a               4   57[COMRAM] unsigned char 
  8939 ;; Auto vars:     Size  Location     Type
  8940 ;;  grs             4   72[COMRAM] unsigned long 
  8941 ;;  rem             4   65[COMRAM] unsigned long 
  8942 ;;  new_exp         2   70[COMRAM] short 
  8943 ;;  aexp            1   77[COMRAM] unsigned char 
  8944 ;;  bexp            1   76[COMRAM] unsigned char 
  8945 ;;  sign            1   69[COMRAM] unsigned char 
  8946 ;; Return value:  Size  Location     Type
  8947 ;;                  4   53[COMRAM] unsigned char 
  8948 ;; Registers used:
  8949 ;;		wreg, status,2, status,0
  8950 ;; Tracked objects:
  8951 ;;		On entry : 0/0
  8952 ;;		On exit  : 0/0
  8953 ;;		Unchanged: 0/0
  8954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8955 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8956 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8957 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8958 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8959 ;;Total ram usage:       25 bytes
  8960 ;; Hardware stack levels used: 1
  8961 ;; Hardware stack levels required when called: 2
  8962 ;; This function calls:
  8963 ;;		Nothing
  8964 ;; This function is called by:
  8965 ;;		_colorDetect
  8966 ;;		_main
  8967 ;;		_efgtoa
  8968 ;; This function uses a non-reentrant model
  8969 ;;
  8970                           
  8971                           	psect	text28
  8972   002D3A                     __ptext28:
  8973                           	callstack 0
  8974   002D3A                     ___fldiv:
  8975                           	callstack 23
  8976   002D3A  5039               	movf	(___fldiv@b+3)^0,w,c
  8977   002D3C  0B80               	andlw	128
  8978   002D3E  6E46               	movwf	___fldiv@sign^0,c
  8979   002D40  5039               	movf	(___fldiv@b+3)^0,w,c
  8980   002D42  2439               	addwf	(___fldiv@b+3)^0,w,c
  8981   002D44  6E4D               	movwf	___fldiv@bexp^0,c
  8982   002D46  AE38               	btfss	(___fldiv@b+2)^0,7,c
  8983   002D48  EFA8  F016         	goto	u3701
  8984   002D4C  EFAA  F016         	goto	u3700
  8985   002D50                     u3701:
  8986   002D50  EFAB  F016         	goto	l3845
  8987   002D54                     u3700:
  8988   002D54  804D               	bsf	___fldiv@bexp^0,0,c
  8989   002D56                     l3845:
  8990   002D56  504D               	movf	___fldiv@bexp^0,w,c
  8991   002D58  B4D8               	btfsc	status,2,c
  8992   002D5A  EFB1  F016         	goto	u3711
  8993   002D5E  EFB3  F016         	goto	u3710
  8994   002D62                     u3711:
  8995   002D62  EFC8  F016         	goto	l3855
  8996   002D66                     u3710:
  8997   002D66  284D               	incf	___fldiv@bexp^0,w,c
  8998   002D68  A4D8               	btfss	status,2,c
  8999   002D6A  EFB9  F016         	goto	u3721
  9000   002D6E  EFBB  F016         	goto	u3720
  9001   002D72                     u3721:
  9002   002D72  EFC3  F016         	goto	l3851
  9003   002D76                     u3720:
  9004   002D76  0E00               	movlw	0
  9005   002D78  6E36               	movwf	___fldiv@b^0,c
  9006   002D7A  0E00               	movlw	0
  9007   002D7C  6E37               	movwf	(___fldiv@b+1)^0,c
  9008   002D7E  0E00               	movlw	0
  9009   002D80  6E38               	movwf	(___fldiv@b+2)^0,c
  9010   002D82  0E00               	movlw	0
  9011   002D84  6E39               	movwf	(___fldiv@b+3)^0,c
  9012   002D86                     l3851:
  9013   002D86  8E38               	bsf	(___fldiv@b+2)^0,7,c
  9014   002D88  0E00               	movlw	0
  9015   002D8A  6E39               	movwf	(___fldiv@b+3)^0,c
  9016   002D8C  EFD0  F016         	goto	l3857
  9017   002D90                     l3855:
  9018   002D90  0E00               	movlw	0
  9019   002D92  6E36               	movwf	___fldiv@b^0,c
  9020   002D94  0E00               	movlw	0
  9021   002D96  6E37               	movwf	(___fldiv@b+1)^0,c
  9022   002D98  0E00               	movlw	0
  9023   002D9A  6E38               	movwf	(___fldiv@b+2)^0,c
  9024   002D9C  0E00               	movlw	0
  9025   002D9E  6E39               	movwf	(___fldiv@b+3)^0,c
  9026   002DA0                     l3857:
  9027   002DA0  503D               	movf	(___fldiv@a+3)^0,w,c
  9028   002DA2  0B80               	andlw	128
  9029   002DA4  1A46               	xorwf	___fldiv@sign^0,f,c
  9030   002DA6  503D               	movf	(___fldiv@a+3)^0,w,c
  9031   002DA8  243D               	addwf	(___fldiv@a+3)^0,w,c
  9032   002DAA  6E4E               	movwf	___fldiv@aexp^0,c
  9033   002DAC  AE3C               	btfss	(___fldiv@a+2)^0,7,c
  9034   002DAE  EFDB  F016         	goto	u3731
  9035   002DB2  EFDD  F016         	goto	u3730
  9036   002DB6                     u3731:
  9037   002DB6  EFDE  F016         	goto	l3865
  9038   002DBA                     u3730:
  9039   002DBA  804E               	bsf	___fldiv@aexp^0,0,c
  9040   002DBC                     l3865:
  9041   002DBC  504E               	movf	___fldiv@aexp^0,w,c
  9042   002DBE  B4D8               	btfsc	status,2,c
  9043   002DC0  EFE4  F016         	goto	u3741
  9044   002DC4  EFE6  F016         	goto	u3740
  9045   002DC8                     u3741:
  9046   002DC8  EFFB  F016         	goto	l3875
  9047   002DCC                     u3740:
  9048   002DCC  284E               	incf	___fldiv@aexp^0,w,c
  9049   002DCE  A4D8               	btfss	status,2,c
  9050   002DD0  EFEC  F016         	goto	u3751
  9051   002DD4  EFEE  F016         	goto	u3750
  9052   002DD8                     u3751:
  9053   002DD8  EFF6  F016         	goto	l3871
  9054   002DDC                     u3750:
  9055   002DDC  0E00               	movlw	0
  9056   002DDE  6E3A               	movwf	___fldiv@a^0,c
  9057   002DE0  0E00               	movlw	0
  9058   002DE2  6E3B               	movwf	(___fldiv@a+1)^0,c
  9059   002DE4  0E00               	movlw	0
  9060   002DE6  6E3C               	movwf	(___fldiv@a+2)^0,c
  9061   002DE8  0E00               	movlw	0
  9062   002DEA  6E3D               	movwf	(___fldiv@a+3)^0,c
  9063   002DEC                     l3871:
  9064   002DEC  8E3C               	bsf	(___fldiv@a+2)^0,7,c
  9065   002DEE  0E00               	movlw	0
  9066   002DF0  6E3D               	movwf	(___fldiv@a+3)^0,c
  9067   002DF2  EF03  F017         	goto	l3877
  9068   002DF6                     l3875:
  9069   002DF6  0E00               	movlw	0
  9070   002DF8  6E3A               	movwf	___fldiv@a^0,c
  9071   002DFA  0E00               	movlw	0
  9072   002DFC  6E3B               	movwf	(___fldiv@a+1)^0,c
  9073   002DFE  0E00               	movlw	0
  9074   002E00  6E3C               	movwf	(___fldiv@a+2)^0,c
  9075   002E02  0E00               	movlw	0
  9076   002E04  6E3D               	movwf	(___fldiv@a+3)^0,c
  9077   002E06                     l3877:
  9078   002E06  503A               	movf	___fldiv@a^0,w,c
  9079   002E08  103B               	iorwf	(___fldiv@a+1)^0,w,c
  9080   002E0A  103C               	iorwf	(___fldiv@a+2)^0,w,c
  9081   002E0C  103D               	iorwf	(___fldiv@a+3)^0,w,c
  9082   002E0E  A4D8               	btfss	status,2,c
  9083   002E10  EF0C  F017         	goto	u3761
  9084   002E14  EF0E  F017         	goto	u3760
  9085   002E18                     u3761:
  9086   002E18  EF26  F017         	goto	l3889
  9087   002E1C                     u3760:
  9088   002E1C  0E00               	movlw	0
  9089   002E1E  6E36               	movwf	___fldiv@b^0,c
  9090   002E20  0E00               	movlw	0
  9091   002E22  6E37               	movwf	(___fldiv@b+1)^0,c
  9092   002E24  0E00               	movlw	0
  9093   002E26  6E38               	movwf	(___fldiv@b+2)^0,c
  9094   002E28  0E00               	movlw	0
  9095   002E2A  6E39               	movwf	(___fldiv@b+3)^0,c
  9096   002E2C  0E80               	movlw	128
  9097   002E2E  1238               	iorwf	(___fldiv@b+2)^0,f,c
  9098   002E30  0E7F               	movlw	127
  9099   002E32  1239               	iorwf	(___fldiv@b+3)^0,f,c
  9100   002E34                     l3883:
  9101   002E34  5046               	movf	___fldiv@sign^0,w,c
  9102   002E36  1239               	iorwf	(___fldiv@b+3)^0,f,c
  9103   002E38  C036  F036         	movff	___fldiv@b,?___fldiv
  9104   002E3C  C037  F037         	movff	___fldiv@b+1,?___fldiv+1
  9105   002E40  C038  F038         	movff	___fldiv@b+2,?___fldiv+2
  9106   002E44  C039  F039         	movff	___fldiv@b+3,?___fldiv+3
  9107   002E48  EF69  F018         	goto	l1098
  9108   002E4C                     l3889:
  9109   002E4C  504D               	movf	___fldiv@bexp^0,w,c
  9110   002E4E  A4D8               	btfss	status,2,c
  9111   002E50  EF2C  F017         	goto	u3771
  9112   002E54  EF2E  F017         	goto	u3770
  9113   002E58                     u3771:
  9114   002E58  EF38  F017         	goto	l3897
  9115   002E5C                     u3770:
  9116   002E5C  0E00               	movlw	0
  9117   002E5E  6E36               	movwf	?___fldiv^0,c
  9118   002E60  0E00               	movlw	0
  9119   002E62  6E37               	movwf	(?___fldiv+1)^0,c
  9120   002E64  0E00               	movlw	0
  9121   002E66  6E38               	movwf	(?___fldiv+2)^0,c
  9122   002E68  0E00               	movlw	0
  9123   002E6A  6E39               	movwf	(?___fldiv+3)^0,c
  9124   002E6C  EF69  F018         	goto	l1098
  9125   002E70                     l3897:
  9126   002E70  504E               	movf	___fldiv@aexp^0,w,c
  9127   002E72  C04D  F03E         	movff	___fldiv@bexp,??___fldiv
  9128   002E76  6A3F               	clrf	(??___fldiv+1)^0,c
  9129   002E78  5E3E               	subwf	??___fldiv^0,f,c
  9130   002E7A  0E00               	movlw	0
  9131   002E7C  5A3F               	subwfb	(??___fldiv+1)^0,f,c
  9132   002E7E  0E7F               	movlw	127
  9133   002E80  243E               	addwf	??___fldiv^0,w,c
  9134   002E82  6E47               	movwf	___fldiv@new_exp^0,c
  9135   002E84  0E00               	movlw	0
  9136   002E86  203F               	addwfc	(??___fldiv+1)^0,w,c
  9137   002E88  6E48               	movwf	(___fldiv@new_exp+1)^0,c
  9138   002E8A  C036  F042         	movff	___fldiv@b,___fldiv@rem
  9139   002E8E  C037  F043         	movff	___fldiv@b+1,___fldiv@rem+1
  9140   002E92  C038  F044         	movff	___fldiv@b+2,___fldiv@rem+2
  9141   002E96  C039  F045         	movff	___fldiv@b+3,___fldiv@rem+3
  9142   002E9A  0E00               	movlw	0
  9143   002E9C  6E36               	movwf	___fldiv@b^0,c
  9144   002E9E  0E00               	movlw	0
  9145   002EA0  6E37               	movwf	(___fldiv@b+1)^0,c
  9146   002EA2  0E00               	movlw	0
  9147   002EA4  6E38               	movwf	(___fldiv@b+2)^0,c
  9148   002EA6  0E00               	movlw	0
  9149   002EA8  6E39               	movwf	(___fldiv@b+3)^0,c
  9150   002EAA  0E00               	movlw	0
  9151   002EAC  6E49               	movwf	___fldiv@grs^0,c
  9152   002EAE  0E00               	movlw	0
  9153   002EB0  6E4A               	movwf	(___fldiv@grs+1)^0,c
  9154   002EB2  0E00               	movlw	0
  9155   002EB4  6E4B               	movwf	(___fldiv@grs+2)^0,c
  9156   002EB6  0E00               	movlw	0
  9157   002EB8  6E4C               	movwf	(___fldiv@grs+3)^0,c
  9158   002EBA  0E00               	movlw	0
  9159   002EBC  6E4E               	movwf	___fldiv@aexp^0,c
  9160   002EBE  EF99  F017         	goto	l1100
  9161   002EC2                     l3907:
  9162   002EC2  504E               	movf	___fldiv@aexp^0,w,c
  9163   002EC4  B4D8               	btfsc	status,2,c
  9164   002EC6  EF67  F017         	goto	u3781
  9165   002ECA  EF69  F017         	goto	u3780
  9166   002ECE                     u3781:
  9167   002ECE  EF80  F017         	goto	l3915
  9168   002ED2                     u3780:
  9169   002ED2  90D8               	bcf	status,0,c
  9170   002ED4  3642               	rlcf	___fldiv@rem^0,f,c
  9171   002ED6  3643               	rlcf	(___fldiv@rem+1)^0,f,c
  9172   002ED8  3644               	rlcf	(___fldiv@rem+2)^0,f,c
  9173   002EDA  3645               	rlcf	(___fldiv@rem+3)^0,f,c
  9174   002EDC  90D8               	bcf	status,0,c
  9175   002EDE  3636               	rlcf	___fldiv@b^0,f,c
  9176   002EE0  3637               	rlcf	(___fldiv@b+1)^0,f,c
  9177   002EE2  3638               	rlcf	(___fldiv@b+2)^0,f,c
  9178   002EE4  3639               	rlcf	(___fldiv@b+3)^0,f,c
  9179   002EE6  AE4C               	btfss	(___fldiv@grs+3)^0,7,c
  9180   002EE8  EF78  F017         	goto	u3791
  9181   002EEC  EF7A  F017         	goto	u3790
  9182   002EF0                     u3791:
  9183   002EF0  EF7B  F017         	goto	l1103
  9184   002EF4                     u3790:
  9185   002EF4  8036               	bsf	___fldiv@b^0,0,c
  9186   002EF6                     l1103:
  9187   002EF6  90D8               	bcf	status,0,c
  9188   002EF8  3649               	rlcf	___fldiv@grs^0,f,c
  9189   002EFA  364A               	rlcf	(___fldiv@grs+1)^0,f,c
  9190   002EFC  364B               	rlcf	(___fldiv@grs+2)^0,f,c
  9191   002EFE  364C               	rlcf	(___fldiv@grs+3)^0,f,c
  9192   002F00                     l3915:
  9193   002F00  503A               	movf	___fldiv@a^0,w,c
  9194   002F02  5C42               	subwf	___fldiv@rem^0,w,c
  9195   002F04  503B               	movf	(___fldiv@a+1)^0,w,c
  9196   002F06  5843               	subwfb	(___fldiv@rem+1)^0,w,c
  9197   002F08  503C               	movf	(___fldiv@a+2)^0,w,c
  9198   002F0A  5844               	subwfb	(___fldiv@rem+2)^0,w,c
  9199   002F0C  503D               	movf	(___fldiv@a+3)^0,w,c
  9200   002F0E  5845               	subwfb	(___fldiv@rem+3)^0,w,c
  9201   002F10  A0D8               	btfss	status,0,c
  9202   002F12  EF8D  F017         	goto	u3801
  9203   002F16  EF8F  F017         	goto	u3800
  9204   002F1A                     u3801:
  9205   002F1A  EF98  F017         	goto	l3921
  9206   002F1E                     u3800:
  9207   002F1E  8C4C               	bsf	(___fldiv@grs+3)^0,6,c
  9208   002F20  503A               	movf	___fldiv@a^0,w,c
  9209   002F22  5E42               	subwf	___fldiv@rem^0,f,c
  9210   002F24  503B               	movf	(___fldiv@a+1)^0,w,c
  9211   002F26  5A43               	subwfb	(___fldiv@rem+1)^0,f,c
  9212   002F28  503C               	movf	(___fldiv@a+2)^0,w,c
  9213   002F2A  5A44               	subwfb	(___fldiv@rem+2)^0,f,c
  9214   002F2C  503D               	movf	(___fldiv@a+3)^0,w,c
  9215   002F2E  5A45               	subwfb	(___fldiv@rem+3)^0,f,c
  9216   002F30                     l3921:
  9217   002F30  2A4E               	incf	___fldiv@aexp^0,f,c
  9218   002F32                     l1100:
  9219   002F32  0E19               	movlw	25
  9220   002F34  644E               	cpfsgt	___fldiv@aexp^0,c
  9221   002F36  EF9F  F017         	goto	u3811
  9222   002F3A  EFA1  F017         	goto	u3810
  9223   002F3E                     u3811:
  9224   002F3E  EF61  F017         	goto	l3907
  9225   002F42                     u3810:
  9226   002F42  5042               	movf	___fldiv@rem^0,w,c
  9227   002F44  1043               	iorwf	(___fldiv@rem+1)^0,w,c
  9228   002F46  1044               	iorwf	(___fldiv@rem+2)^0,w,c
  9229   002F48  1045               	iorwf	(___fldiv@rem+3)^0,w,c
  9230   002F4A  B4D8               	btfsc	status,2,c
  9231   002F4C  EFAA  F017         	goto	u3821
  9232   002F50  EFAC  F017         	goto	u3820
  9233   002F54                     u3821:
  9234   002F54  EFC4  F017         	goto	l3933
  9235   002F58                     u3820:
  9236   002F58  8049               	bsf	___fldiv@grs^0,0,c
  9237   002F5A  EFC4  F017         	goto	l3933
  9238   002F5E                     l3927:
  9239   002F5E  90D8               	bcf	status,0,c
  9240   002F60  3636               	rlcf	___fldiv@b^0,f,c
  9241   002F62  3637               	rlcf	(___fldiv@b+1)^0,f,c
  9242   002F64  3638               	rlcf	(___fldiv@b+2)^0,f,c
  9243   002F66  3639               	rlcf	(___fldiv@b+3)^0,f,c
  9244   002F68  AE4C               	btfss	(___fldiv@grs+3)^0,7,c
  9245   002F6A  EFB9  F017         	goto	u3831
  9246   002F6E  EFBB  F017         	goto	u3830
  9247   002F72                     u3831:
  9248   002F72  EFBC  F017         	goto	l1109
  9249   002F76                     u3830:
  9250   002F76  8036               	bsf	___fldiv@b^0,0,c
  9251   002F78                     l1109:
  9252   002F78  90D8               	bcf	status,0,c
  9253   002F7A  3649               	rlcf	___fldiv@grs^0,f,c
  9254   002F7C  364A               	rlcf	(___fldiv@grs+1)^0,f,c
  9255   002F7E  364B               	rlcf	(___fldiv@grs+2)^0,f,c
  9256   002F80  364C               	rlcf	(___fldiv@grs+3)^0,f,c
  9257   002F82  0647               	decf	___fldiv@new_exp^0,f,c
  9258   002F84  A0D8               	btfss	status,0,c
  9259   002F86  0648               	decf	(___fldiv@new_exp+1)^0,f,c
  9260   002F88                     l3933:
  9261   002F88  AE38               	btfss	(___fldiv@b+2)^0,7,c
  9262   002F8A  EFC9  F017         	goto	u3841
  9263   002F8E  EFCB  F017         	goto	u3840
  9264   002F92                     u3841:
  9265   002F92  EFAF  F017         	goto	l3927
  9266   002F96                     u3840:
  9267   002F96  0E00               	movlw	0
  9268   002F98  6E4E               	movwf	___fldiv@aexp^0,c
  9269   002F9A  AE4C               	btfss	(___fldiv@grs+3)^0,7,c
  9270   002F9C  EFD2  F017         	goto	u3851
  9271   002FA0  EFD4  F017         	goto	u3850
  9272   002FA4                     u3851:
  9273   002FA4  EFF8  F017         	goto	l1111
  9274   002FA8                     u3850:
  9275   002FA8  0EFF               	movlw	255
  9276   002FAA  1449               	andwf	___fldiv@grs^0,w,c
  9277   002FAC  6E3E               	movwf	??___fldiv^0,c
  9278   002FAE  0EFF               	movlw	255
  9279   002FB0  144A               	andwf	(___fldiv@grs+1)^0,w,c
  9280   002FB2  6E3F               	movwf	(??___fldiv+1)^0,c
  9281   002FB4  0EFF               	movlw	255
  9282   002FB6  144B               	andwf	(___fldiv@grs+2)^0,w,c
  9283   002FB8  6E40               	movwf	(??___fldiv+2)^0,c
  9284   002FBA  0E7F               	movlw	127
  9285   002FBC  144C               	andwf	(___fldiv@grs+3)^0,w,c
  9286   002FBE  6E41               	movwf	(??___fldiv+3)^0,c
  9287   002FC0  503E               	movf	??___fldiv^0,w,c
  9288   002FC2  103F               	iorwf	(??___fldiv+1)^0,w,c
  9289   002FC4  1040               	iorwf	(??___fldiv+2)^0,w,c
  9290   002FC6  1041               	iorwf	(??___fldiv+3)^0,w,c
  9291   002FC8  B4D8               	btfsc	status,2,c
  9292   002FCA  EFE9  F017         	goto	u3861
  9293   002FCE  EFEB  F017         	goto	u3860
  9294   002FD2                     u3861:
  9295   002FD2  EFEF  F017         	goto	l1112
  9296   002FD6                     u3860:
  9297   002FD6                     l3941:
  9298   002FD6  0E01               	movlw	1
  9299   002FD8  6E4E               	movwf	___fldiv@aexp^0,c
  9300   002FDA  EFF8  F017         	goto	l1111
  9301   002FDE                     l1112:
  9302   002FDE  A036               	btfss	___fldiv@b^0,0,c
  9303   002FE0  EFF4  F017         	goto	u3871
  9304   002FE4  EFF6  F017         	goto	u3870
  9305   002FE8                     u3871:
  9306   002FE8  EFF8  F017         	goto	l1111
  9307   002FEC                     u3870:
  9308   002FEC  EFEB  F017         	goto	l3941
  9309   002FF0                     l1111:
  9310   002FF0  504E               	movf	___fldiv@aexp^0,w,c
  9311   002FF2  B4D8               	btfsc	status,2,c
  9312   002FF4  EFFE  F017         	goto	u3881
  9313   002FF8  EF00  F018         	goto	u3880
  9314   002FFC                     u3881:
  9315   002FFC  EF24  F018         	goto	l3953
  9316   003000                     u3880:
  9317   003000  0E01               	movlw	1
  9318   003002  2636               	addwf	___fldiv@b^0,f,c
  9319   003004  0E00               	movlw	0
  9320   003006  2237               	addwfc	(___fldiv@b+1)^0,f,c
  9321   003008  2238               	addwfc	(___fldiv@b+2)^0,f,c
  9322   00300A  2239               	addwfc	(___fldiv@b+3)^0,f,c
  9323   00300C  A039               	btfss	(___fldiv@b+3)^0,0,c
  9324   00300E  EF0B  F018         	goto	u3891
  9325   003012  EF0D  F018         	goto	u3890
  9326   003016                     u3891:
  9327   003016  EF24  F018         	goto	l3953
  9328   00301A                     u3890:
  9329   00301A  C036  F03E         	movff	___fldiv@b,??___fldiv
  9330   00301E  C037  F03F         	movff	___fldiv@b+1,??___fldiv+1
  9331   003022  C038  F040         	movff	___fldiv@b+2,??___fldiv+2
  9332   003026  C039  F041         	movff	___fldiv@b+3,??___fldiv+3
  9333   00302A  3441               	rlcf	(??___fldiv+3)^0,w,c
  9334   00302C  3241               	rrcf	(??___fldiv+3)^0,f,c
  9335   00302E  3240               	rrcf	(??___fldiv+2)^0,f,c
  9336   003030  323F               	rrcf	(??___fldiv+1)^0,f,c
  9337   003032  323E               	rrcf	??___fldiv^0,f,c
  9338   003034  C03E  F036         	movff	??___fldiv,___fldiv@b
  9339   003038  C03F  F037         	movff	??___fldiv+1,___fldiv@b+1
  9340   00303C  C040  F038         	movff	??___fldiv+2,___fldiv@b+2
  9341   003040  C041  F039         	movff	??___fldiv+3,___fldiv@b+3
  9342   003044  4A47               	infsnz	___fldiv@new_exp^0,f,c
  9343   003046  2A48               	incf	(___fldiv@new_exp+1)^0,f,c
  9344   003048                     l3953:
  9345   003048  BE48               	btfsc	(___fldiv@new_exp+1)^0,7,c
  9346   00304A  EF2F  F018         	goto	u3901
  9347   00304E  5048               	movf	(___fldiv@new_exp+1)^0,w,c
  9348   003050  E108               	bnz	u3900
  9349   003052  2847               	incf	___fldiv@new_exp^0,w,c
  9350   003054  A0D8               	btfss	status,0,c
  9351   003056  EF2F  F018         	goto	u3901
  9352   00305A  EF31  F018         	goto	u3900
  9353   00305E                     u3901:
  9354   00305E  EF3C  F018         	goto	l3957
  9355   003062                     u3900:
  9356   003062  0E00               	movlw	0
  9357   003064  6E48               	movwf	(___fldiv@new_exp+1)^0,c
  9358   003066  6847               	setf	___fldiv@new_exp^0,c
  9359   003068  0E00               	movlw	0
  9360   00306A  6E36               	movwf	___fldiv@b^0,c
  9361   00306C  0E00               	movlw	0
  9362   00306E  6E37               	movwf	(___fldiv@b+1)^0,c
  9363   003070  0E00               	movlw	0
  9364   003072  6E38               	movwf	(___fldiv@b+2)^0,c
  9365   003074  0E00               	movlw	0
  9366   003076  6E39               	movwf	(___fldiv@b+3)^0,c
  9367   003078                     l3957:
  9368   003078  BE48               	btfsc	(___fldiv@new_exp+1)^0,7,c
  9369   00307A  EF49  F018         	goto	u3910
  9370   00307E  5048               	movf	(___fldiv@new_exp+1)^0,w,c
  9371   003080  E106               	bnz	u3911
  9372   003082  0447               	decf	___fldiv@new_exp^0,w,c
  9373   003084  B0D8               	btfsc	status,0,c
  9374   003086  EF47  F018         	goto	u3911
  9375   00308A  EF49  F018         	goto	u3910
  9376   00308E                     u3911:
  9377   00308E  EF57  F018         	goto	l3961
  9378   003092                     u3910:
  9379   003092  0E00               	movlw	0
  9380   003094  6E48               	movwf	(___fldiv@new_exp+1)^0,c
  9381   003096  0E00               	movlw	0
  9382   003098  6E47               	movwf	___fldiv@new_exp^0,c
  9383   00309A  0E00               	movlw	0
  9384   00309C  6E36               	movwf	___fldiv@b^0,c
  9385   00309E  0E00               	movlw	0
  9386   0030A0  6E37               	movwf	(___fldiv@b+1)^0,c
  9387   0030A2  0E00               	movlw	0
  9388   0030A4  6E38               	movwf	(___fldiv@b+2)^0,c
  9389   0030A6  0E00               	movlw	0
  9390   0030A8  6E39               	movwf	(___fldiv@b+3)^0,c
  9391   0030AA  0E00               	movlw	0
  9392   0030AC  6E46               	movwf	___fldiv@sign^0,c
  9393   0030AE                     l3961:
  9394   0030AE  C047  F04D         	movff	___fldiv@new_exp,___fldiv@bexp
  9395   0030B2  A04D               	btfss	___fldiv@bexp^0,0,c
  9396   0030B4  EF5E  F018         	goto	u3921
  9397   0030B8  EF60  F018         	goto	u3920
  9398   0030BC                     u3921:
  9399   0030BC  EF63  F018         	goto	l3967
  9400   0030C0                     u3920:
  9401   0030C0  8E38               	bsf	(___fldiv@b+2)^0,7,c
  9402   0030C2  EF64  F018         	goto	l3969
  9403   0030C6                     l3967:
  9404   0030C6  9E38               	bcf	(___fldiv@b+2)^0,7,c
  9405   0030C8                     l3969:
  9406   0030C8  90D8               	bcf	status,0,c
  9407   0030CA  304D               	rrcf	___fldiv@bexp^0,w,c
  9408   0030CC  6E39               	movwf	(___fldiv@b+3)^0,c
  9409   0030CE  EF1A  F017         	goto	l3883
  9410   0030D2                     l1098:
  9411   0030D2  0012               	return		;funcret
  9412   0030D4                     __end_of___fldiv:
  9413                           	callstack 0
  9414                           
  9415 ;; *************** function _dtoa *****************
  9416 ;; Defined at:
  9417 ;;		line 443 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  9418 ;; Parameters:    Size  Location     Type
  9419 ;;  fp              2   31[COMRAM] PTR struct _IO_FILE
  9420 ;;		 -> sprintf@f(11), 
  9421 ;;  d               8   33[COMRAM] long long 
  9422 ;; Auto vars:     Size  Location     Type
  9423 ;;  n               8   55[COMRAM] long long 
  9424 ;;  i               2   63[COMRAM] int 
  9425 ;;  w               2   53[COMRAM] int 
  9426 ;;  p               2   51[COMRAM] int 
  9427 ;;  s               1   65[COMRAM] unsigned char 
  9428 ;; Return value:  Size  Location     Type
  9429 ;;                  1    wreg      void 
  9430 ;; Registers used:
  9431 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9432 ;; Tracked objects:
  9433 ;;		On entry : 0/0
  9434 ;;		On exit  : 0/0
  9435 ;;		Unchanged: 0/0
  9436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9437 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9438 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9439 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9440 ;;      Totals:        35       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9441 ;;Total ram usage:       35 bytes
  9442 ;; Hardware stack levels used: 1
  9443 ;; Hardware stack levels required when called: 6
  9444 ;; This function calls:
  9445 ;;		___aodiv
  9446 ;;		___aomod
  9447 ;;		_abs
  9448 ;;		_pad
  9449 ;; This function is called by:
  9450 ;;		_vfpfcnvrt
  9451 ;; This function uses a non-reentrant model
  9452 ;;
  9453                           
  9454                           	psect	text29
  9455   00370C                     __ptext29:
  9456                           	callstack 0
  9457   00370C                     _dtoa:
  9458                           	callstack 20
  9459   00370C                     
  9460                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 443: static void 
      +                          dtoa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\
      +                          doprnt.c: 444: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          45:  char s;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 446: 
      +                              int i, p, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          47:     long long n;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 450:     n = d;
  9461   00370C  C022  F038         	movff	dtoa@d,dtoa@n
  9462   003710  C023  F039         	movff	dtoa@d+1,dtoa@n+1
  9463   003714  C024  F03A         	movff	dtoa@d+2,dtoa@n+2
  9464   003718  C025  F03B         	movff	dtoa@d+3,dtoa@n+3
  9465   00371C  C026  F03C         	movff	dtoa@d+4,dtoa@n+4
  9466   003720  C027  F03D         	movff	dtoa@d+5,dtoa@n+5
  9467   003724  C028  F03E         	movff	dtoa@d+6,dtoa@n+6
  9468   003728  C029  F03F         	movff	dtoa@d+7,dtoa@n+7
  9469   00372C                     
  9470                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 451:     s = n < 
      +                          0 ? 1 : 0;
  9471   00372C  BE3F               	btfsc	(dtoa@n+7)^0,7,c
  9472   00372E  EF9B  F01B         	goto	u4581
  9473   003732  EF9E  F01B         	goto	u4580
  9474   003736                     u4581:
  9475   003736  0E01               	movlw	1
  9476   003738  EF9F  F01B         	goto	u4590
  9477   00373C                     u4580:
  9478   00373C  0E00               	movlw	0
  9479   00373E                     u4590:
  9480   00373E  6E42               	movwf	dtoa@s^0,c
  9481   003740                     
  9482                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 452:     if (s) {
  9483   003740  5042               	movf	dtoa@s^0,w,c
  9484   003742  B4D8               	btfsc	status,2,c
  9485   003744  EFA6  F01B         	goto	u4601
  9486   003748  EFA8  F01B         	goto	u4600
  9487   00374C                     u4601:
  9488   00374C  EFB8  F01B         	goto	l4341
  9489   003750                     u4600:
  9490   003750                     
  9491                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 453:         n = 
      +                          -n;
  9492   003750  1E3F               	comf	(dtoa@n+7)^0,f,c
  9493   003752  1E3E               	comf	(dtoa@n+6)^0,f,c
  9494   003754  1E3D               	comf	(dtoa@n+5)^0,f,c
  9495   003756  1E3C               	comf	(dtoa@n+4)^0,f,c
  9496   003758  1E3B               	comf	(dtoa@n+3)^0,f,c
  9497   00375A  1E3A               	comf	(dtoa@n+2)^0,f,c
  9498   00375C  1E39               	comf	(dtoa@n+1)^0,f,c
  9499   00375E  6C38               	negf	dtoa@n^0,c
  9500   003760  0E00               	movlw	0
  9501   003762  2239               	addwfc	(dtoa@n+1)^0,f,c
  9502   003764  223A               	addwfc	(dtoa@n+2)^0,f,c
  9503   003766  223B               	addwfc	(dtoa@n+3)^0,f,c
  9504   003768  223C               	addwfc	(dtoa@n+4)^0,f,c
  9505   00376A  223D               	addwfc	(dtoa@n+5)^0,f,c
  9506   00376C  223E               	addwfc	(dtoa@n+6)^0,f,c
  9507   00376E  223F               	addwfc	(dtoa@n+7)^0,f,c
  9508   003770                     l4341:
  9509                           
  9510                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 462:     p = (0 <
      +                           prec) ? prec : 1;
  9511   003770  0100               	movlb	0	; () banked
  9512   003772  BFF5               	btfsc	(_prec+1)& (0+255),7,b
  9513   003774  EFC6  F01B         	goto	u4610
  9514   003778  51F5               	movf	(_prec+1)& (0+255),w,b
  9515   00377A  E106               	bnz	u4611
  9516   00377C  05F4               	decf	_prec& (0+255),w,b
  9517   00377E  B0D8               	btfsc	status,0,c
  9518   003780  EFC4  F01B         	goto	u4611
  9519   003784  EFC6  F01B         	goto	u4610
  9520   003788                     u4611:
  9521   003788  EFCC  F01B         	goto	l1235
  9522   00378C                     u4610:
  9523   00378C                     
  9524                           ; BSR set to: 0
  9525   00378C  0E00               	movlw	0
  9526   00378E  6E35               	movwf	(dtoa@p+1)^0,c
  9527   003790  0E01               	movlw	1
  9528   003792  6E34               	movwf	dtoa@p^0,c
  9529   003794  EFD0  F01B         	goto	l1237
  9530   003798                     l1235:
  9531                           
  9532                           ; BSR set to: 0
  9533   003798  C0F4  F034         	movff	_prec,dtoa@p
  9534   00379C  C0F5  F035         	movff	_prec+1,dtoa@p+1
  9535   0037A0                     l1237:
  9536                           
  9537                           ; BSR set to: 0
  9538                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 463:     w = widt
      +                          h;
  9539   0037A0  C0F2  F036         	movff	_width,dtoa@w
  9540   0037A4  C0F3  F037         	movff	_width+1,dtoa@w+1
  9541   0037A8                     
  9542                           ; BSR set to: 0
  9543                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 464:     if (s
  9544   0037A8  5042               	movf	dtoa@s^0,w,c
  9545   0037AA  B4D8               	btfsc	status,2,c
  9546   0037AC  EFDA  F01B         	goto	u4621
  9547   0037B0  EFDC  F01B         	goto	u4620
  9548   0037B4                     u4621:
  9549   0037B4  EFF3  F01B         	goto	l1238
  9550   0037B8                     u4620:
  9551   0037B8                     
  9552                           ; BSR set to: 0
  9553                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 468:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 469:         --w;
  9554   0037B8  0636               	decf	dtoa@w^0,f,c
  9555   0037BA  A0D8               	btfss	status,0,c
  9556   0037BC  0637               	decf	(dtoa@w+1)^0,f,c
  9557   0037BE                     
  9558                           ; BSR set to: 0
  9559                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 470:   s = s ? '-
      +                          ' : '+';
  9560   0037BE  5042               	movf	dtoa@s^0,w,c
  9561   0037C0  A4D8               	btfss	status,2,c
  9562   0037C2  EFE5  F01B         	goto	u4631
  9563   0037C6  EFE7  F01B         	goto	u4630
  9564   0037CA                     u4631:
  9565   0037CA  EFED  F01B         	goto	l4353
  9566   0037CE                     u4630:
  9567   0037CE                     
  9568                           ; BSR set to: 0
  9569   0037CE  0E00               	movlw	0
  9570   0037D0  6E33               	movwf	(_dtoa$2712+1)^0,c
  9571   0037D2  0E2B               	movlw	43
  9572   0037D4  6E32               	movwf	_dtoa$2712^0,c
  9573   0037D6  EFF1  F01B         	goto	l4355
  9574   0037DA                     l4353:
  9575                           
  9576                           ; BSR set to: 0
  9577   0037DA  0E00               	movlw	0
  9578   0037DC  6E33               	movwf	(_dtoa$2712+1)^0,c
  9579   0037DE  0E2D               	movlw	45
  9580   0037E0  6E32               	movwf	_dtoa$2712^0,c
  9581   0037E2                     l4355:
  9582                           
  9583                           ; BSR set to: 0
  9584   0037E2  C032  F042         	movff	_dtoa$2712,dtoa@s
  9585   0037E6                     l1238:
  9586                           
  9587                           ; BSR set to: 0
  9588                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 480:     i = size
      +                          of(dbuf) - 1;
  9589   0037E6  0E00               	movlw	0
  9590   0037E8  6E41               	movwf	(dtoa@i+1)^0,c
  9591   0037EA  0E4F               	movlw	79
  9592   0037EC  6E40               	movwf	dtoa@i^0,c
  9593   0037EE                     
  9594                           ; BSR set to: 0
  9595                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 481:     dbuf[i] 
      +                          = '\0';
  9596   0037EE  0E00               	movlw	0
  9597   0037F0  0101               	movlb	1	; () banked
  9598   0037F2  6FD0               	movwf	(_dbuf+79)& (0+255),b
  9599                           
  9600                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  9601   0037F4  EF78  F01C         	goto	l4369
  9602   0037F8                     l4359:
  9603                           
  9604                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 486:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 487:         --i;
  9605   0037F8  0640               	decf	dtoa@i^0,f,c
  9606   0037FA  A0D8               	btfss	status,0,c
  9607   0037FC  0641               	decf	(dtoa@i+1)^0,f,c
  9608   0037FE                     
  9609                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 488:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  9610   0037FE  0E81               	movlw	low _dbuf
  9611   003800  2440               	addwf	dtoa@i^0,w,c
  9612   003802  6ED9               	movwf	fsr2l,c
  9613   003804  0E01               	movlw	high _dbuf
  9614   003806  2041               	addwfc	(dtoa@i+1)^0,w,c
  9615   003808  6EDA               	movwf	fsr2h,c
  9616   00380A  C038  F005         	movff	dtoa@n,___aomod@dividend
  9617   00380E  C039  F006         	movff	dtoa@n+1,___aomod@dividend+1
  9618   003812  C03A  F007         	movff	dtoa@n+2,___aomod@dividend+2
  9619   003816  C03B  F008         	movff	dtoa@n+3,___aomod@dividend+3
  9620   00381A  C03C  F009         	movff	dtoa@n+4,___aomod@dividend+4
  9621   00381E  C03D  F00A         	movff	dtoa@n+5,___aomod@dividend+5
  9622   003822  C03E  F00B         	movff	dtoa@n+6,___aomod@dividend+6
  9623   003826  C03F  F00C         	movff	dtoa@n+7,___aomod@dividend+7
  9624   00382A  0E0A               	movlw	10
  9625   00382C  6E0D               	movwf	___aomod@divisor^0,c
  9626   00382E  0E00               	movlw	0
  9627   003830  6E0E               	movwf	(___aomod@divisor+1)^0,c
  9628   003832  0E00               	movlw	0
  9629   003834  6E0F               	movwf	(___aomod@divisor+2)^0,c
  9630   003836  0E00               	movlw	0
  9631   003838  6E10               	movwf	(___aomod@divisor+3)^0,c
  9632   00383A  0E00               	movlw	0
  9633   00383C  6E11               	movwf	(___aomod@divisor+4)^0,c
  9634   00383E  0E00               	movlw	0
  9635   003840  6E12               	movwf	(___aomod@divisor+5)^0,c
  9636   003842  0E00               	movlw	0
  9637   003844  6E13               	movwf	(___aomod@divisor+6)^0,c
  9638   003846  0E00               	movlw	0
  9639   003848  6E14               	movwf	(___aomod@divisor+7)^0,c
  9640   00384A  EC24  F020         	call	___aomod	;wreg free
  9641   00384E  C005  F02A         	movff	?___aomod,??_dtoa
  9642   003852  C006  F02B         	movff	?___aomod+1,??_dtoa+1
  9643   003856  C007  F02C         	movff	?___aomod+2,??_dtoa+2
  9644   00385A  C008  F02D         	movff	?___aomod+3,??_dtoa+3
  9645   00385E  C009  F02E         	movff	?___aomod+4,??_dtoa+4
  9646   003862  C00A  F02F         	movff	?___aomod+5,??_dtoa+5
  9647   003866  C00B  F030         	movff	?___aomod+6,??_dtoa+6
  9648   00386A  C00C  F031         	movff	?___aomod+7,??_dtoa+7
  9649   00386E  C02A  F017         	movff	??_dtoa,abs@a
  9650   003872  C02B  F018         	movff	??_dtoa+1,abs@a+1
  9651   003876  EC1A  F02C         	call	_abs	;wreg free
  9652   00387A  5017               	movf	?_abs^0,w,c
  9653   00387C  0F30               	addlw	48
  9654   00387E  6EDF               	movwf	indf2,c
  9655   003880                     
  9656                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 489:         --p;
  9657   003880  0634               	decf	dtoa@p^0,f,c
  9658   003882  A0D8               	btfss	status,0,c
  9659   003884  0635               	decf	(dtoa@p+1)^0,f,c
  9660   003886                     
  9661                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 490:         --w;
  9662   003886  0636               	decf	dtoa@w^0,f,c
  9663   003888  A0D8               	btfss	status,0,c
  9664   00388A  0637               	decf	(dtoa@w+1)^0,f,c
  9665   00388C                     
  9666                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 491:         n = 
      +                          n / 10;
  9667   00388C  C038  F005         	movff	dtoa@n,___aodiv@dividend
  9668   003890  C039  F006         	movff	dtoa@n+1,___aodiv@dividend+1
  9669   003894  C03A  F007         	movff	dtoa@n+2,___aodiv@dividend+2
  9670   003898  C03B  F008         	movff	dtoa@n+3,___aodiv@dividend+3
  9671   00389C  C03C  F009         	movff	dtoa@n+4,___aodiv@dividend+4
  9672   0038A0  C03D  F00A         	movff	dtoa@n+5,___aodiv@dividend+5
  9673   0038A4  C03E  F00B         	movff	dtoa@n+6,___aodiv@dividend+6
  9674   0038A8  C03F  F00C         	movff	dtoa@n+7,___aodiv@dividend+7
  9675   0038AC  0E0A               	movlw	10
  9676   0038AE  6E0D               	movwf	___aodiv@divisor^0,c
  9677   0038B0  0E00               	movlw	0
  9678   0038B2  6E0E               	movwf	(___aodiv@divisor+1)^0,c
  9679   0038B4  0E00               	movlw	0
  9680   0038B6  6E0F               	movwf	(___aodiv@divisor+2)^0,c
  9681   0038B8  0E00               	movlw	0
  9682   0038BA  6E10               	movwf	(___aodiv@divisor+3)^0,c
  9683   0038BC  0E00               	movlw	0
  9684   0038BE  6E11               	movwf	(___aodiv@divisor+4)^0,c
  9685   0038C0  0E00               	movlw	0
  9686   0038C2  6E12               	movwf	(___aodiv@divisor+5)^0,c
  9687   0038C4  0E00               	movlw	0
  9688   0038C6  6E13               	movwf	(___aodiv@divisor+6)^0,c
  9689   0038C8  0E00               	movlw	0
  9690   0038CA  6E14               	movwf	(___aodiv@divisor+7)^0,c
  9691   0038CC  ECAA  F01E         	call	___aodiv	;wreg free
  9692   0038D0  C005  F038         	movff	?___aodiv,dtoa@n
  9693   0038D4  C006  F039         	movff	?___aodiv+1,dtoa@n+1
  9694   0038D8  C007  F03A         	movff	?___aodiv+2,dtoa@n+2
  9695   0038DC  C008  F03B         	movff	?___aodiv+3,dtoa@n+3
  9696   0038E0  C009  F03C         	movff	?___aodiv+4,dtoa@n+4
  9697   0038E4  C00A  F03D         	movff	?___aodiv+5,dtoa@n+5
  9698   0038E8  C00B  F03E         	movff	?___aodiv+6,dtoa@n+6
  9699   0038EC  C00C  F03F         	movff	?___aodiv+7,dtoa@n+7
  9700   0038F0                     l4369:
  9701                           
  9702                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  9703   0038F0  BE41               	btfsc	(dtoa@i+1)^0,7,c
  9704   0038F2  EF83  F01C         	goto	u4641
  9705   0038F6  5041               	movf	(dtoa@i+1)^0,w,c
  9706   0038F8  E108               	bnz	u4640
  9707   0038FA  0440               	decf	dtoa@i^0,w,c
  9708   0038FC  A0D8               	btfss	status,0,c
  9709   0038FE  EF83  F01C         	goto	u4641
  9710   003902  EF85  F01C         	goto	u4640
  9711   003906                     u4641:
  9712   003906  EFA1  F01C         	goto	l4375
  9713   00390A                     u4640:
  9714   00390A  5038               	movf	dtoa@n^0,w,c
  9715   00390C  1039               	iorwf	(dtoa@n+1)^0,w,c
  9716   00390E  103A               	iorwf	(dtoa@n+2)^0,w,c
  9717   003910  103B               	iorwf	(dtoa@n+3)^0,w,c
  9718   003912  103C               	iorwf	(dtoa@n+4)^0,w,c
  9719   003914  103D               	iorwf	(dtoa@n+5)^0,w,c
  9720   003916  103E               	iorwf	(dtoa@n+6)^0,w,c
  9721   003918  103F               	iorwf	(dtoa@n+7)^0,w,c
  9722   00391A  A4D8               	btfss	status,2,c
  9723   00391C  EF92  F01C         	goto	u4651
  9724   003920  EF94  F01C         	goto	u4650
  9725   003924                     u4651:
  9726   003924  EFFC  F01B         	goto	l4359
  9727   003928                     u4650:
  9728   003928  BE35               	btfsc	(dtoa@p+1)^0,7,c
  9729   00392A  EFA1  F01C         	goto	u4660
  9730   00392E  5035               	movf	(dtoa@p+1)^0,w,c
  9731   003930  E106               	bnz	u4661
  9732   003932  0434               	decf	dtoa@p^0,w,c
  9733   003934  B0D8               	btfsc	status,0,c
  9734   003936  EF9F  F01C         	goto	u4661
  9735   00393A  EFA1  F01C         	goto	u4660
  9736   00393E                     u4661:
  9737   00393E  EFFC  F01B         	goto	l4359
  9738   003942                     u4660:
  9739   003942                     l4375:
  9740                           
  9741                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 495:     if (s !=
      +                           0) {
  9742   003942  5042               	movf	dtoa@s^0,w,c
  9743   003944  B4D8               	btfsc	status,2,c
  9744   003946  EFA7  F01C         	goto	u4671
  9745   00394A  EFA9  F01C         	goto	u4670
  9746   00394E                     u4671:
  9747   00394E  EFB4  F01C         	goto	l4381
  9748   003952                     u4670:
  9749   003952                     
  9750                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 496:         --i;
  9751   003952  0640               	decf	dtoa@i^0,f,c
  9752   003954  A0D8               	btfss	status,0,c
  9753   003956  0641               	decf	(dtoa@i+1)^0,f,c
  9754   003958                     
  9755                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 497:         dbuf
      +                          [i] = s;
  9756   003958  0E81               	movlw	low _dbuf
  9757   00395A  2440               	addwf	dtoa@i^0,w,c
  9758   00395C  6ED9               	movwf	fsr2l,c
  9759   00395E  0E01               	movlw	high _dbuf
  9760   003960  2041               	addwfc	(dtoa@i+1)^0,w,c
  9761   003962  6EDA               	movwf	fsr2h,c
  9762   003964  C042  FFDF         	movff	dtoa@s,indf2
  9763   003968                     l4381:
  9764                           
  9765                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 501:     return (
      +                          void) pad(fp, &dbuf[i], w);
  9766   003968  C020  F015         	movff	dtoa@fp,pad@fp
  9767   00396C  C021  F016         	movff	dtoa@fp+1,pad@fp+1
  9768   003970  0E81               	movlw	low _dbuf
  9769   003972  2440               	addwf	dtoa@i^0,w,c
  9770   003974  6E17               	movwf	pad@buf^0,c
  9771   003976  0E01               	movlw	high _dbuf
  9772   003978  2041               	addwfc	(dtoa@i+1)^0,w,c
  9773   00397A  6E18               	movwf	(pad@buf+1)^0,c
  9774   00397C  C036  F019         	movff	dtoa@w,pad@p
  9775   003980  C037  F01A         	movff	dtoa@w+1,pad@p+1
  9776   003984  EC72  F029         	call	_pad	;wreg free
  9777   003988  0012               	return		;funcret
  9778   00398A                     __end_of_dtoa:
  9779                           	callstack 0
  9780                           
  9781 ;; *************** function _pad *****************
  9782 ;; Defined at:
  9783 ;;		line 133 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  9784 ;; Parameters:    Size  Location     Type
  9785 ;;  fp              2   20[COMRAM] PTR struct _IO_FILE
  9786 ;;		 -> sprintf@f(11), 
  9787 ;;  buf             2   22[COMRAM] PTR unsigned char 
  9788 ;;		 -> dbuf(80), 
  9789 ;;  p               2   24[COMRAM] int 
  9790 ;; Auto vars:     Size  Location     Type
  9791 ;;  w               2   29[COMRAM] int 
  9792 ;;  i               2   27[COMRAM] int 
  9793 ;; Return value:  Size  Location     Type
  9794 ;;                  1    wreg      void 
  9795 ;; Registers used:
  9796 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9797 ;; Tracked objects:
  9798 ;;		On entry : 0/0
  9799 ;;		On exit  : 0/0
  9800 ;;		Unchanged: 0/0
  9801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9802 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9803 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9804 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9805 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9806 ;;Total ram usage:       11 bytes
  9807 ;; Hardware stack levels used: 1
  9808 ;; Hardware stack levels required when called: 5
  9809 ;; This function calls:
  9810 ;;		_fputc
  9811 ;;		_fputs
  9812 ;; This function is called by:
  9813 ;;		_dtoa
  9814 ;;		_efgtoa
  9815 ;; This function uses a non-reentrant model
  9816 ;;
  9817                           
  9818                           	psect	text30
  9819   0052E4                     __ptext30:
  9820                           	callstack 0
  9821   0052E4                     _pad:
  9822                           	callstack 20
  9823   0052E4                     
  9824                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 133: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\com
      +                          mon\doprnt.c: 134: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 135:     int i, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt
      +                          .c: 145:     w = (p < 0) ? 0 : p;
  9825   0052E4  BE1A               	btfsc	(pad@p+1)^0,7,c
  9826   0052E6  EF77  F029         	goto	u4311
  9827   0052EA  EF79  F029         	goto	u4310
  9828   0052EE                     u4311:
  9829   0052EE  EF7F  F029         	goto	l4229
  9830   0052F2                     u4310:
  9831   0052F2  C019  F01E         	movff	pad@p,pad@w
  9832   0052F6  C01A  F01F         	movff	pad@p+1,pad@w+1
  9833   0052FA  EF83  F029         	goto	l1226
  9834   0052FE                     l4229:
  9835   0052FE  0E00               	movlw	0
  9836   005300  6E1F               	movwf	(pad@w+1)^0,c
  9837   005302  0E00               	movlw	0
  9838   005304  6E1E               	movwf	pad@w^0,c
  9839   005306                     l1226:
  9840                           
  9841                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 146:     i = 0;
  9842   005306  0E00               	movlw	0
  9843   005308  6E1D               	movwf	(pad@i+1)^0,c
  9844   00530A  0E00               	movlw	0
  9845   00530C  6E1C               	movwf	pad@i^0,c
  9846                           
  9847                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  9848   00530E  EF95  F029         	goto	l4235
  9849   005312                     l4231:
  9850                           
  9851                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 148:         fput
      +                          c(' ', fp);
  9852   005312  0E00               	movlw	0
  9853   005314  6E06               	movwf	(fputc@c+1)^0,c
  9854   005316  0E20               	movlw	32
  9855   005318  6E05               	movwf	fputc@c^0,c
  9856   00531A  C015  F007         	movff	pad@fp,fputc@fp
  9857   00531E  C016  F008         	movff	pad@fp+1,fputc@fp+1
  9858   005322  EC97  F027         	call	_fputc	;wreg free
  9859   005326                     
  9860                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 149:         ++i;
  9861   005326  4A1C               	infsnz	pad@i^0,f,c
  9862   005328  2A1D               	incf	(pad@i+1)^0,f,c
  9863   00532A                     l4235:
  9864                           
  9865                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  9866   00532A  501E               	movf	pad@w^0,w,c
  9867   00532C  5C1C               	subwf	pad@i^0,w,c
  9868   00532E  501D               	movf	(pad@i+1)^0,w,c
  9869   005330  0A80               	xorlw	128
  9870   005332  6E1B               	movwf	??_pad^0,c
  9871   005334  501F               	movf	(pad@w+1)^0,w,c
  9872   005336  0A80               	xorlw	128
  9873   005338  581B               	subwfb	??_pad^0,w,c
  9874   00533A  A0D8               	btfss	status,0,c
  9875   00533C  EFA2  F029         	goto	u4321
  9876   005340  EFA4  F029         	goto	u4320
  9877   005344                     u4321:
  9878   005344  EF89  F029         	goto	l4231
  9879   005348                     u4320:
  9880   005348                     
  9881                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 156:         fput
      +                          s((const char *)buf, fp);
  9882   005348  C017  F00E         	movff	pad@buf,fputs@s
  9883   00534C  C018  F00F         	movff	pad@buf+1,fputs@s+1
  9884   005350  C015  F010         	movff	pad@fp,fputs@fp
  9885   005354  C016  F011         	movff	pad@fp+1,fputs@fp+1
  9886   005358  ECD7  F02B         	call	_fputs	;wreg free
  9887   00535C  0012               	return		;funcret
  9888   00535E                     __end_of_pad:
  9889                           	callstack 0
  9890                           
  9891 ;; *************** function _fputs *****************
  9892 ;; Defined at:
  9893 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputs.c"
  9894 ;; Parameters:    Size  Location     Type
  9895 ;;  s               2   13[COMRAM] PTR const unsigned char 
  9896 ;;		 -> dbuf(80), 
  9897 ;;  fp              2   15[COMRAM] PTR struct _IO_FILE
  9898 ;;		 -> sprintf@f(11), 
  9899 ;; Auto vars:     Size  Location     Type
  9900 ;;  i               2   18[COMRAM] int 
  9901 ;;  c               1   17[COMRAM] unsigned char 
  9902 ;; Return value:  Size  Location     Type
  9903 ;;                  2   13[COMRAM] int 
  9904 ;; Registers used:
  9905 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9906 ;; Tracked objects:
  9907 ;;		On entry : 0/0
  9908 ;;		On exit  : 0/0
  9909 ;;		Unchanged: 0/0
  9910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9911 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9912 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9914 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9915 ;;Total ram usage:        7 bytes
  9916 ;; Hardware stack levels used: 1
  9917 ;; Hardware stack levels required when called: 4
  9918 ;; This function calls:
  9919 ;;		_fputc
  9920 ;; This function is called by:
  9921 ;;		_pad
  9922 ;; This function uses a non-reentrant model
  9923 ;;
  9924                           
  9925                           	psect	text31
  9926   0057AE                     __ptext31:
  9927                           	callstack 0
  9928   0057AE                     _fputs:
  9929                           	callstack 20
  9930   0057AE  0E00               	movlw	0
  9931   0057B0  6E14               	movwf	(fputs@i+1)^0,c
  9932   0057B2  0E00               	movlw	0
  9933   0057B4  6E13               	movwf	fputs@i^0,c
  9934   0057B6  EFE8  F02B         	goto	l3751
  9935   0057BA                     l3747:
  9936   0057BA  C012  F005         	movff	fputs@c,fputc@c
  9937   0057BE  6A06               	clrf	(fputc@c+1)^0,c
  9938   0057C0  C010  F007         	movff	fputs@fp,fputc@fp
  9939   0057C4  C011  F008         	movff	fputs@fp+1,fputc@fp+1
  9940   0057C8  EC97  F027         	call	_fputc	;wreg free
  9941   0057CC  4A13               	infsnz	fputs@i^0,f,c
  9942   0057CE  2A14               	incf	(fputs@i+1)^0,f,c
  9943   0057D0                     l3751:
  9944   0057D0  5013               	movf	fputs@i^0,w,c
  9945   0057D2  240E               	addwf	fputs@s^0,w,c
  9946   0057D4  6ED9               	movwf	fsr2l,c
  9947   0057D6  5014               	movf	(fputs@i+1)^0,w,c
  9948   0057D8  200F               	addwfc	(fputs@s+1)^0,w,c
  9949   0057DA  6EDA               	movwf	fsr2h,c
  9950   0057DC  50DF               	movf	indf2,w,c
  9951   0057DE  6E12               	movwf	fputs@c^0,c
  9952   0057E0  5012               	movf	fputs@c^0,w,c
  9953   0057E2  A4D8               	btfss	status,2,c
  9954   0057E4  EFF6  F02B         	goto	u3561
  9955   0057E8  EFF8  F02B         	goto	u3560
  9956   0057EC                     u3561:
  9957   0057EC  EFDD  F02B         	goto	l3747
  9958   0057F0                     u3560:
  9959   0057F0  0012               	return		;funcret
  9960   0057F2                     __end_of_fputs:
  9961                           	callstack 0
  9962                           
  9963 ;; *************** function _fputc *****************
  9964 ;; Defined at:
  9965 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputc.c"
  9966 ;; Parameters:    Size  Location     Type
  9967 ;;  c               2    4[COMRAM] int 
  9968 ;;  fp              2    6[COMRAM] PTR struct _IO_FILE
  9969 ;;		 -> sprintf@f(11), 
  9970 ;; Auto vars:     Size  Location     Type
  9971 ;;		None
  9972 ;; Return value:  Size  Location     Type
  9973 ;;                  2    4[COMRAM] int 
  9974 ;; Registers used:
  9975 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9976 ;; Tracked objects:
  9977 ;;		On entry : 0/0
  9978 ;;		On exit  : 0/0
  9979 ;;		Unchanged: 0/0
  9980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9981 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9983 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9984 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9985 ;;Total ram usage:        9 bytes
  9986 ;; Hardware stack levels used: 1
  9987 ;; Hardware stack levels required when called: 3
  9988 ;; This function calls:
  9989 ;;		_putch
  9990 ;; This function is called by:
  9991 ;;		_pad
  9992 ;;		_vfpfcnvrt
  9993 ;;		_fputs
  9994 ;; This function uses a non-reentrant model
  9995 ;;
  9996                           
  9997                           	psect	text32
  9998   004F2E                     __ptext32:
  9999                           	callstack 0
 10000   004F2E                     _fputc:
 10001                           	callstack 23
 10002   004F2E  5007               	movf	fputc@fp^0,w,c
 10003   004F30  1008               	iorwf	(fputc@fp+1)^0,w,c
 10004   004F32  B4D8               	btfsc	status,2,c
 10005   004F34  EF9E  F027         	goto	u3131
 10006   004F38  EFA0  F027         	goto	u3130
 10007   004F3C                     u3131:
 10008   004F3C  EFA9  F027         	goto	l3533
 10009   004F40                     u3130:
 10010   004F40  5007               	movf	fputc@fp^0,w,c
 10011   004F42  1008               	iorwf	(fputc@fp+1)^0,w,c
 10012   004F44  A4D8               	btfss	status,2,c
 10013   004F46  EFA7  F027         	goto	u3141
 10014   004F4A  EFA9  F027         	goto	u3140
 10015   004F4E                     u3141:
 10016   004F4E  EFAE  F027         	goto	l3535
 10017   004F52                     u3140:
 10018   004F52                     l3533:
 10019   004F52  5005               	movf	fputc@c^0,w,c
 10020   004F54  EC67  F02D         	call	_putch
 10021   004F58  EFFB  F027         	goto	l1386
 10022   004F5C                     l3535:
 10023   004F5C  EE20 F009          	lfsr	2,9
 10024   004F60  5007               	movf	fputc@fp^0,w,c
 10025   004F62  26D9               	addwf	fsr2l,f,c
 10026   004F64  5008               	movf	(fputc@fp+1)^0,w,c
 10027   004F66  22DA               	addwfc	fsr2h,f,c
 10028   004F68  50DE               	movf	postinc2,w,c
 10029   004F6A  10DE               	iorwf	postinc2,w,c
 10030   004F6C  B4D8               	btfsc	status,2,c
 10031   004F6E  EFBB  F027         	goto	u3151
 10032   004F72  EFBD  F027         	goto	u3150
 10033   004F76                     u3151:
 10034   004F76  EFD8  F027         	goto	l3539
 10035   004F7A                     u3150:
 10036   004F7A  EE20 F009          	lfsr	2,9
 10037   004F7E  5007               	movf	fputc@fp^0,w,c
 10038   004F80  26D9               	addwf	fsr2l,f,c
 10039   004F82  5008               	movf	(fputc@fp+1)^0,w,c
 10040   004F84  22DA               	addwfc	fsr2h,f,c
 10041   004F86  EE10 F003          	lfsr	1,3
 10042   004F8A  5007               	movf	fputc@fp^0,w,c
 10043   004F8C  26E1               	addwf	fsr1l,f,c
 10044   004F8E  5008               	movf	(fputc@fp+1)^0,w,c
 10045   004F90  22E2               	addwfc	fsr1h,f,c
 10046   004F92  50DE               	movf	postinc2,w,c
 10047   004F94  5CE6               	subwf	postinc1,w,c
 10048   004F96  50E6               	movf	postinc1,w,c
 10049   004F98  0A80               	xorlw	128
 10050   004F9A  6E0D               	movwf	(??_fputc+4)^0,c
 10051   004F9C  50DE               	movf	postinc2,w,c
 10052   004F9E  0A80               	xorlw	128
 10053   004FA0  580D               	subwfb	(??_fputc+4)^0,w,c
 10054   004FA2  B0D8               	btfsc	status,0,c
 10055   004FA4  EFD6  F027         	goto	u3161
 10056   004FA8  EFD8  F027         	goto	u3160
 10057   004FAC                     u3161:
 10058   004FAC  EFFB  F027         	goto	l1386
 10059   004FB0                     u3160:
 10060   004FB0                     l3539:
 10061   004FB0  EE20 F003          	lfsr	2,3
 10062   004FB4  5007               	movf	fputc@fp^0,w,c
 10063   004FB6  26D9               	addwf	fsr2l,f,c
 10064   004FB8  5008               	movf	(fputc@fp+1)^0,w,c
 10065   004FBA  22DA               	addwfc	fsr2h,f,c
 10066   004FBC  CFDE F009          	movff	postinc2,??_fputc
 10067   004FC0  CFDD F00A          	movff	postdec2,??_fputc+1
 10068   004FC4  C007  FFD9         	movff	fputc@fp,fsr2l
 10069   004FC8  C008  FFDA         	movff	fputc@fp+1,fsr2h
 10070   004FCC  CFDE F00B          	movff	postinc2,??_fputc+2
 10071   004FD0  CFDD F00C          	movff	postdec2,??_fputc+3
 10072   004FD4  5009               	movf	??_fputc^0,w,c
 10073   004FD6  240B               	addwf	(??_fputc+2)^0,w,c
 10074   004FD8  6ED9               	movwf	fsr2l,c
 10075   004FDA  500A               	movf	(??_fputc+1)^0,w,c
 10076   004FDC  200C               	addwfc	(??_fputc+3)^0,w,c
 10077   004FDE  6EDA               	movwf	fsr2h,c
 10078   004FE0  C005  FFDF         	movff	fputc@c,indf2
 10079   004FE4  EE20 F003          	lfsr	2,3
 10080   004FE8  5007               	movf	fputc@fp^0,w,c
 10081   004FEA  26D9               	addwf	fsr2l,f,c
 10082   004FEC  5008               	movf	(fputc@fp+1)^0,w,c
 10083   004FEE  22DA               	addwfc	fsr2h,f,c
 10084   004FF0  2ADE               	incf	postinc2,f,c
 10085   004FF2  0E00               	movlw	0
 10086   004FF4  22DD               	addwfc	postdec2,f,c
 10087   004FF6                     l1386:
 10088   004FF6  0012               	return		;funcret
 10089   004FF8                     __end_of_fputc:
 10090                           	callstack 0
 10091                           
 10092 ;; *************** function _putch *****************
 10093 ;; Defined at:
 10094 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\putch.c"
 10095 ;; Parameters:    Size  Location     Type
 10096 ;;  c               1    wreg     unsigned char 
 10097 ;; Auto vars:     Size  Location     Type
 10098 ;;  c               1    0[COMRAM] unsigned char 
 10099 ;; Return value:  Size  Location     Type
 10100 ;;                  1    wreg      void 
 10101 ;; Registers used:
 10102 ;;		wreg
 10103 ;; Tracked objects:
 10104 ;;		On entry : 0/0
 10105 ;;		On exit  : 0/0
 10106 ;;		Unchanged: 0/0
 10107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10111 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10112 ;;Total ram usage:        0 bytes
 10113 ;; Hardware stack levels used: 1
 10114 ;; Hardware stack levels required when called: 2
 10115 ;; This function calls:
 10116 ;;		Nothing
 10117 ;; This function is called by:
 10118 ;;		_fputc
 10119 ;; This function uses a non-reentrant model
 10120 ;;
 10121                           
 10122                           	psect	text33
 10123   005ACE                     __ptext33:
 10124                           	callstack 0
 10125   005ACE                     _putch:
 10126                           	callstack 23
 10127   005ACE  0012               	return		;funcret
 10128   005AD0                     __end_of_putch:
 10129                           	callstack 0
 10130                           
 10131 ;; *************** function _abs *****************
 10132 ;; Defined at:
 10133 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\abs.c"
 10134 ;; Parameters:    Size  Location     Type
 10135 ;;  a               2   22[COMRAM] int 
 10136 ;; Auto vars:     Size  Location     Type
 10137 ;;		None
 10138 ;; Return value:  Size  Location     Type
 10139 ;;                  2   22[COMRAM] int 
 10140 ;; Registers used:
 10141 ;;		wreg, status,2, status,0
 10142 ;; Tracked objects:
 10143 ;;		On entry : 0/0
 10144 ;;		On exit  : 0/0
 10145 ;;		Unchanged: 0/0
 10146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10147 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10148 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10149 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10150 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10151 ;;Total ram usage:        4 bytes
 10152 ;; Hardware stack levels used: 1
 10153 ;; Hardware stack levels required when called: 2
 10154 ;; This function calls:
 10155 ;;		Nothing
 10156 ;; This function is called by:
 10157 ;;		_dtoa
 10158 ;; This function uses a non-reentrant model
 10159 ;;
 10160                           
 10161                           	psect	text34
 10162   005834                     __ptext34:
 10163                           	callstack 0
 10164   005834                     _abs:
 10165                           	callstack 23
 10166   005834  BE18               	btfsc	(abs@a+1)^0,7,c
 10167   005836  EF27  F02C         	goto	u4330
 10168   00583A  5018               	movf	(abs@a+1)^0,w,c
 10169   00583C  E106               	bnz	u4331
 10170   00583E  0417               	decf	abs@a^0,w,c
 10171   005840  B0D8               	btfsc	status,0,c
 10172   005842  EF25  F02C         	goto	u4331
 10173   005846  EF27  F02C         	goto	u4330
 10174   00584A                     u4331:
 10175   00584A  EF35  F02C         	goto	l1345
 10176   00584E                     u4330:
 10177   00584E  C017  F019         	movff	abs@a,??_abs
 10178   005852  C018  F01A         	movff	abs@a+1,??_abs+1
 10179   005856  1E19               	comf	??_abs^0,f,c
 10180   005858  1E1A               	comf	(??_abs+1)^0,f,c
 10181   00585A  4A19               	infsnz	??_abs^0,f,c
 10182   00585C  2A1A               	incf	(??_abs+1)^0,f,c
 10183   00585E  C019  F017         	movff	??_abs,?_abs
 10184   005862  C01A  F018         	movff	??_abs+1,?_abs+1
 10185   005866  EF39  F02C         	goto	l1348
 10186   00586A                     l1345:
 10187   00586A  C017  F017         	movff	abs@a,?_abs
 10188   00586E  C018  F018         	movff	abs@a+1,?_abs+1
 10189   005872                     l1348:
 10190   005872  0012               	return		;funcret
 10191   005874                     __end_of_abs:
 10192                           	callstack 0
 10193                           
 10194 ;; *************** function ___aomod *****************
 10195 ;; Defined at:
 10196 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aomod.c"
 10197 ;; Parameters:    Size  Location     Type
 10198 ;;  dividend        8    4[COMRAM] long long 
 10199 ;;  divisor         8   12[COMRAM] long long 
 10200 ;; Auto vars:     Size  Location     Type
 10201 ;;  sign            1   21[COMRAM] unsigned char 
 10202 ;;  counter         1   20[COMRAM] unsigned char 
 10203 ;; Return value:  Size  Location     Type
 10204 ;;                  8    4[COMRAM] long long 
 10205 ;; Registers used:
 10206 ;;		wreg, status,2, status,0
 10207 ;; Tracked objects:
 10208 ;;		On entry : 0/0
 10209 ;;		On exit  : 0/0
 10210 ;;		Unchanged: 0/0
 10211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10212 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10213 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10215 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10216 ;;Total ram usage:       18 bytes
 10217 ;; Hardware stack levels used: 1
 10218 ;; Hardware stack levels required when called: 2
 10219 ;; This function calls:
 10220 ;;		Nothing
 10221 ;; This function is called by:
 10222 ;;		_dtoa
 10223 ;; This function uses a non-reentrant model
 10224 ;;
 10225                           
 10226                           	psect	text35
 10227   004048                     __ptext35:
 10228                           	callstack 0
 10229   004048                     ___aomod:
 10230                           	callstack 23
 10231   004048  0E00               	movlw	0
 10232   00404A  6E16               	movwf	___aomod@sign^0,c
 10233   00404C  BE0C               	btfsc	(___aomod@dividend+7)^0,7,c
 10234   00404E  EF2D  F020         	goto	u3640
 10235   004052  EF2B  F020         	goto	u3641
 10236   004056                     u3641:
 10237   004056  EF3F  F020         	goto	l3811
 10238   00405A                     u3640:
 10239   00405A  1E0C               	comf	(___aomod@dividend+7)^0,f,c
 10240   00405C  1E0B               	comf	(___aomod@dividend+6)^0,f,c
 10241   00405E  1E0A               	comf	(___aomod@dividend+5)^0,f,c
 10242   004060  1E09               	comf	(___aomod@dividend+4)^0,f,c
 10243   004062  1E08               	comf	(___aomod@dividend+3)^0,f,c
 10244   004064  1E07               	comf	(___aomod@dividend+2)^0,f,c
 10245   004066  1E06               	comf	(___aomod@dividend+1)^0,f,c
 10246   004068  6C05               	negf	___aomod@dividend^0,c
 10247   00406A  0E00               	movlw	0
 10248   00406C  2206               	addwfc	(___aomod@dividend+1)^0,f,c
 10249   00406E  2207               	addwfc	(___aomod@dividend+2)^0,f,c
 10250   004070  2208               	addwfc	(___aomod@dividend+3)^0,f,c
 10251   004072  2209               	addwfc	(___aomod@dividend+4)^0,f,c
 10252   004074  220A               	addwfc	(___aomod@dividend+5)^0,f,c
 10253   004076  220B               	addwfc	(___aomod@dividend+6)^0,f,c
 10254   004078  220C               	addwfc	(___aomod@dividend+7)^0,f,c
 10255   00407A  0E01               	movlw	1
 10256   00407C  6E16               	movwf	___aomod@sign^0,c
 10257   00407E                     l3811:
 10258   00407E  BE14               	btfsc	(___aomod@divisor+7)^0,7,c
 10259   004080  EF46  F020         	goto	u3650
 10260   004084  EF44  F020         	goto	u3651
 10261   004088                     u3651:
 10262   004088  EF56  F020         	goto	l3815
 10263   00408C                     u3650:
 10264   00408C  1E14               	comf	(___aomod@divisor+7)^0,f,c
 10265   00408E  1E13               	comf	(___aomod@divisor+6)^0,f,c
 10266   004090  1E12               	comf	(___aomod@divisor+5)^0,f,c
 10267   004092  1E11               	comf	(___aomod@divisor+4)^0,f,c
 10268   004094  1E10               	comf	(___aomod@divisor+3)^0,f,c
 10269   004096  1E0F               	comf	(___aomod@divisor+2)^0,f,c
 10270   004098  1E0E               	comf	(___aomod@divisor+1)^0,f,c
 10271   00409A  6C0D               	negf	___aomod@divisor^0,c
 10272   00409C  0E00               	movlw	0
 10273   00409E  220E               	addwfc	(___aomod@divisor+1)^0,f,c
 10274   0040A0  220F               	addwfc	(___aomod@divisor+2)^0,f,c
 10275   0040A2  2210               	addwfc	(___aomod@divisor+3)^0,f,c
 10276   0040A4  2211               	addwfc	(___aomod@divisor+4)^0,f,c
 10277   0040A6  2212               	addwfc	(___aomod@divisor+5)^0,f,c
 10278   0040A8  2213               	addwfc	(___aomod@divisor+6)^0,f,c
 10279   0040AA  2214               	addwfc	(___aomod@divisor+7)^0,f,c
 10280   0040AC                     l3815:
 10281   0040AC  500D               	movf	___aomod@divisor^0,w,c
 10282   0040AE  100E               	iorwf	(___aomod@divisor+1)^0,w,c
 10283   0040B0  100F               	iorwf	(___aomod@divisor+2)^0,w,c
 10284   0040B2  1010               	iorwf	(___aomod@divisor+3)^0,w,c
 10285   0040B4  1011               	iorwf	(___aomod@divisor+4)^0,w,c
 10286   0040B6  1012               	iorwf	(___aomod@divisor+5)^0,w,c
 10287   0040B8  1013               	iorwf	(___aomod@divisor+6)^0,w,c
 10288   0040BA  1014               	iorwf	(___aomod@divisor+7)^0,w,c
 10289   0040BC  B4D8               	btfsc	status,2,c
 10290   0040BE  EF63  F020         	goto	u3661
 10291   0040C2  EF65  F020         	goto	u3660
 10292   0040C6                     u3661:
 10293   0040C6  EFAD  F020         	goto	l3831
 10294   0040CA                     u3660:
 10295   0040CA  0E01               	movlw	1
 10296   0040CC  6E15               	movwf	___aomod@counter^0,c
 10297   0040CE  EF73  F020         	goto	l3821
 10298   0040D2                     l3819:
 10299   0040D2  90D8               	bcf	status,0,c
 10300   0040D4  360D               	rlcf	___aomod@divisor^0,f,c
 10301   0040D6  360E               	rlcf	(___aomod@divisor+1)^0,f,c
 10302   0040D8  360F               	rlcf	(___aomod@divisor+2)^0,f,c
 10303   0040DA  3610               	rlcf	(___aomod@divisor+3)^0,f,c
 10304   0040DC  3611               	rlcf	(___aomod@divisor+4)^0,f,c
 10305   0040DE  3612               	rlcf	(___aomod@divisor+5)^0,f,c
 10306   0040E0  3613               	rlcf	(___aomod@divisor+6)^0,f,c
 10307   0040E2  3614               	rlcf	(___aomod@divisor+7)^0,f,c
 10308   0040E4  2A15               	incf	___aomod@counter^0,f,c
 10309   0040E6                     l3821:
 10310   0040E6  AE14               	btfss	(___aomod@divisor+7)^0,7,c
 10311   0040E8  EF78  F020         	goto	u3671
 10312   0040EC  EF7A  F020         	goto	u3670
 10313   0040F0                     u3671:
 10314   0040F0  EF69  F020         	goto	l3819
 10315   0040F4                     u3670:
 10316   0040F4                     l3823:
 10317   0040F4  500D               	movf	___aomod@divisor^0,w,c
 10318   0040F6  5C05               	subwf	___aomod@dividend^0,w,c
 10319   0040F8  500E               	movf	(___aomod@divisor+1)^0,w,c
 10320   0040FA  5806               	subwfb	(___aomod@dividend+1)^0,w,c
 10321   0040FC  500F               	movf	(___aomod@divisor+2)^0,w,c
 10322   0040FE  5807               	subwfb	(___aomod@dividend+2)^0,w,c
 10323   004100  5010               	movf	(___aomod@divisor+3)^0,w,c
 10324   004102  5808               	subwfb	(___aomod@dividend+3)^0,w,c
 10325   004104  5011               	movf	(___aomod@divisor+4)^0,w,c
 10326   004106  5809               	subwfb	(___aomod@dividend+4)^0,w,c
 10327   004108  5012               	movf	(___aomod@divisor+5)^0,w,c
 10328   00410A  580A               	subwfb	(___aomod@dividend+5)^0,w,c
 10329   00410C  5013               	movf	(___aomod@divisor+6)^0,w,c
 10330   00410E  580B               	subwfb	(___aomod@dividend+6)^0,w,c
 10331   004110  5014               	movf	(___aomod@divisor+7)^0,w,c
 10332   004112  580C               	subwfb	(___aomod@dividend+7)^0,w,c
 10333   004114  A0D8               	btfss	status,0,c
 10334   004116  EF8F  F020         	goto	u3681
 10335   00411A  EF91  F020         	goto	u3680
 10336   00411E                     u3681:
 10337   00411E  EFA1  F020         	goto	l3827
 10338   004122                     u3680:
 10339   004122  500D               	movf	___aomod@divisor^0,w,c
 10340   004124  5E05               	subwf	___aomod@dividend^0,f,c
 10341   004126  500E               	movf	(___aomod@divisor+1)^0,w,c
 10342   004128  5A06               	subwfb	(___aomod@dividend+1)^0,f,c
 10343   00412A  500F               	movf	(___aomod@divisor+2)^0,w,c
 10344   00412C  5A07               	subwfb	(___aomod@dividend+2)^0,f,c
 10345   00412E  5010               	movf	(___aomod@divisor+3)^0,w,c
 10346   004130  5A08               	subwfb	(___aomod@dividend+3)^0,f,c
 10347   004132  5011               	movf	(___aomod@divisor+4)^0,w,c
 10348   004134  5A09               	subwfb	(___aomod@dividend+4)^0,f,c
 10349   004136  5012               	movf	(___aomod@divisor+5)^0,w,c
 10350   004138  5A0A               	subwfb	(___aomod@dividend+5)^0,f,c
 10351   00413A  5013               	movf	(___aomod@divisor+6)^0,w,c
 10352   00413C  5A0B               	subwfb	(___aomod@dividend+6)^0,f,c
 10353   00413E  5014               	movf	(___aomod@divisor+7)^0,w,c
 10354   004140  5A0C               	subwfb	(___aomod@dividend+7)^0,f,c
 10355   004142                     l3827:
 10356   004142  90D8               	bcf	status,0,c
 10357   004144  3214               	rrcf	(___aomod@divisor+7)^0,f,c
 10358   004146  3213               	rrcf	(___aomod@divisor+6)^0,f,c
 10359   004148  3212               	rrcf	(___aomod@divisor+5)^0,f,c
 10360   00414A  3211               	rrcf	(___aomod@divisor+4)^0,f,c
 10361   00414C  3210               	rrcf	(___aomod@divisor+3)^0,f,c
 10362   00414E  320F               	rrcf	(___aomod@divisor+2)^0,f,c
 10363   004150  320E               	rrcf	(___aomod@divisor+1)^0,f,c
 10364   004152  320D               	rrcf	___aomod@divisor^0,f,c
 10365   004154  2E15               	decfsz	___aomod@counter^0,f,c
 10366   004156  EF7A  F020         	goto	l3823
 10367   00415A                     l3831:
 10368   00415A  5016               	movf	___aomod@sign^0,w,c
 10369   00415C  B4D8               	btfsc	status,2,c
 10370   00415E  EFB3  F020         	goto	u3691
 10371   004162  EFB5  F020         	goto	u3690
 10372   004166                     u3691:
 10373   004166  EFC5  F020         	goto	l3835
 10374   00416A                     u3690:
 10375   00416A  1E0C               	comf	(___aomod@dividend+7)^0,f,c
 10376   00416C  1E0B               	comf	(___aomod@dividend+6)^0,f,c
 10377   00416E  1E0A               	comf	(___aomod@dividend+5)^0,f,c
 10378   004170  1E09               	comf	(___aomod@dividend+4)^0,f,c
 10379   004172  1E08               	comf	(___aomod@dividend+3)^0,f,c
 10380   004174  1E07               	comf	(___aomod@dividend+2)^0,f,c
 10381   004176  1E06               	comf	(___aomod@dividend+1)^0,f,c
 10382   004178  6C05               	negf	___aomod@dividend^0,c
 10383   00417A  0E00               	movlw	0
 10384   00417C  2206               	addwfc	(___aomod@dividend+1)^0,f,c
 10385   00417E  2207               	addwfc	(___aomod@dividend+2)^0,f,c
 10386   004180  2208               	addwfc	(___aomod@dividend+3)^0,f,c
 10387   004182  2209               	addwfc	(___aomod@dividend+4)^0,f,c
 10388   004184  220A               	addwfc	(___aomod@dividend+5)^0,f,c
 10389   004186  220B               	addwfc	(___aomod@dividend+6)^0,f,c
 10390   004188  220C               	addwfc	(___aomod@dividend+7)^0,f,c
 10391   00418A                     l3835:
 10392   00418A  C005  F005         	movff	___aomod@dividend,?___aomod
 10393   00418E  C006  F006         	movff	___aomod@dividend+1,?___aomod+1
 10394   004192  C007  F007         	movff	___aomod@dividend+2,?___aomod+2
 10395   004196  C008  F008         	movff	___aomod@dividend+3,?___aomod+3
 10396   00419A  C009  F009         	movff	___aomod@dividend+4,?___aomod+4
 10397   00419E  C00A  F00A         	movff	___aomod@dividend+5,?___aomod+5
 10398   0041A2  C00B  F00B         	movff	___aomod@dividend+6,?___aomod+6
 10399   0041A6  C00C  F00C         	movff	___aomod@dividend+7,?___aomod+7
 10400   0041AA  0012               	return		;funcret
 10401   0041AC                     __end_of___aomod:
 10402                           	callstack 0
 10403                           
 10404 ;; *************** function ___aodiv *****************
 10405 ;; Defined at:
 10406 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aodiv.c"
 10407 ;; Parameters:    Size  Location     Type
 10408 ;;  dividend        8    4[COMRAM] long long 
 10409 ;;  divisor         8   12[COMRAM] long long 
 10410 ;; Auto vars:     Size  Location     Type
 10411 ;;  quotient        8   22[COMRAM] long long 
 10412 ;;  sign            1   21[COMRAM] unsigned char 
 10413 ;;  counter         1   20[COMRAM] unsigned char 
 10414 ;; Return value:  Size  Location     Type
 10415 ;;                  8    4[COMRAM] long long 
 10416 ;; Registers used:
 10417 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10418 ;; Tracked objects:
 10419 ;;		On entry : 0/0
 10420 ;;		On exit  : 0/0
 10421 ;;		Unchanged: 0/0
 10422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10423 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10424 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10426 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10427 ;;Total ram usage:       26 bytes
 10428 ;; Hardware stack levels used: 1
 10429 ;; Hardware stack levels required when called: 2
 10430 ;; This function calls:
 10431 ;;		Nothing
 10432 ;; This function is called by:
 10433 ;;		_dtoa
 10434 ;; This function uses a non-reentrant model
 10435 ;;
 10436                           
 10437                           	psect	text36
 10438   003D54                     __ptext36:
 10439                           	callstack 0
 10440   003D54                     ___aodiv:
 10441                           	callstack 23
 10442   003D54  0E00               	movlw	0
 10443   003D56  6E16               	movwf	___aodiv@sign^0,c
 10444   003D58  BE14               	btfsc	(___aodiv@divisor+7)^0,7,c
 10445   003D5A  EFB3  F01E         	goto	u3570
 10446   003D5E  EFB1  F01E         	goto	u3571
 10447   003D62                     u3571:
 10448   003D62  EFC5  F01E         	goto	l3767
 10449   003D66                     u3570:
 10450   003D66  1E14               	comf	(___aodiv@divisor+7)^0,f,c
 10451   003D68  1E13               	comf	(___aodiv@divisor+6)^0,f,c
 10452   003D6A  1E12               	comf	(___aodiv@divisor+5)^0,f,c
 10453   003D6C  1E11               	comf	(___aodiv@divisor+4)^0,f,c
 10454   003D6E  1E10               	comf	(___aodiv@divisor+3)^0,f,c
 10455   003D70  1E0F               	comf	(___aodiv@divisor+2)^0,f,c
 10456   003D72  1E0E               	comf	(___aodiv@divisor+1)^0,f,c
 10457   003D74  6C0D               	negf	___aodiv@divisor^0,c
 10458   003D76  0E00               	movlw	0
 10459   003D78  220E               	addwfc	(___aodiv@divisor+1)^0,f,c
 10460   003D7A  220F               	addwfc	(___aodiv@divisor+2)^0,f,c
 10461   003D7C  2210               	addwfc	(___aodiv@divisor+3)^0,f,c
 10462   003D7E  2211               	addwfc	(___aodiv@divisor+4)^0,f,c
 10463   003D80  2212               	addwfc	(___aodiv@divisor+5)^0,f,c
 10464   003D82  2213               	addwfc	(___aodiv@divisor+6)^0,f,c
 10465   003D84  2214               	addwfc	(___aodiv@divisor+7)^0,f,c
 10466   003D86  0E01               	movlw	1
 10467   003D88  6E16               	movwf	___aodiv@sign^0,c
 10468   003D8A                     l3767:
 10469   003D8A  BE0C               	btfsc	(___aodiv@dividend+7)^0,7,c
 10470   003D8C  EFCC  F01E         	goto	u3580
 10471   003D90  EFCA  F01E         	goto	u3581
 10472   003D94                     u3581:
 10473   003D94  EFDE  F01E         	goto	l3773
 10474   003D98                     u3580:
 10475   003D98  1E0C               	comf	(___aodiv@dividend+7)^0,f,c
 10476   003D9A  1E0B               	comf	(___aodiv@dividend+6)^0,f,c
 10477   003D9C  1E0A               	comf	(___aodiv@dividend+5)^0,f,c
 10478   003D9E  1E09               	comf	(___aodiv@dividend+4)^0,f,c
 10479   003DA0  1E08               	comf	(___aodiv@dividend+3)^0,f,c
 10480   003DA2  1E07               	comf	(___aodiv@dividend+2)^0,f,c
 10481   003DA4  1E06               	comf	(___aodiv@dividend+1)^0,f,c
 10482   003DA6  6C05               	negf	___aodiv@dividend^0,c
 10483   003DA8  0E00               	movlw	0
 10484   003DAA  2206               	addwfc	(___aodiv@dividend+1)^0,f,c
 10485   003DAC  2207               	addwfc	(___aodiv@dividend+2)^0,f,c
 10486   003DAE  2208               	addwfc	(___aodiv@dividend+3)^0,f,c
 10487   003DB0  2209               	addwfc	(___aodiv@dividend+4)^0,f,c
 10488   003DB2  220A               	addwfc	(___aodiv@dividend+5)^0,f,c
 10489   003DB4  220B               	addwfc	(___aodiv@dividend+6)^0,f,c
 10490   003DB6  220C               	addwfc	(___aodiv@dividend+7)^0,f,c
 10491   003DB8  0E01               	movlw	1
 10492   003DBA  1A16               	xorwf	___aodiv@sign^0,f,c
 10493   003DBC                     l3773:
 10494   003DBC  EE20  F017         	lfsr	2,___aodiv@quotient
 10495   003DC0  0E07               	movlw	7
 10496   003DC2                     u3591:
 10497   003DC2  6ADE               	clrf	postinc2,c
 10498   003DC4  06E8               	decf	wreg,f,c
 10499   003DC6  E2FD               	bc	u3591
 10500   003DC8  500D               	movf	___aodiv@divisor^0,w,c
 10501   003DCA  100E               	iorwf	(___aodiv@divisor+1)^0,w,c
 10502   003DCC  100F               	iorwf	(___aodiv@divisor+2)^0,w,c
 10503   003DCE  1010               	iorwf	(___aodiv@divisor+3)^0,w,c
 10504   003DD0  1011               	iorwf	(___aodiv@divisor+4)^0,w,c
 10505   003DD2  1012               	iorwf	(___aodiv@divisor+5)^0,w,c
 10506   003DD4  1013               	iorwf	(___aodiv@divisor+6)^0,w,c
 10507   003DD6  1014               	iorwf	(___aodiv@divisor+7)^0,w,c
 10508   003DD8  B4D8               	btfsc	status,2,c
 10509   003DDA  EFF1  F01E         	goto	u3601
 10510   003DDE  EFF3  F01E         	goto	u3600
 10511   003DE2                     u3601:
 10512   003DE2  EF45  F01F         	goto	l3795
 10513   003DE6                     u3600:
 10514   003DE6  0E01               	movlw	1
 10515   003DE8  6E15               	movwf	___aodiv@counter^0,c
 10516   003DEA  EF01  F01F         	goto	l3781
 10517   003DEE                     l3779:
 10518   003DEE  90D8               	bcf	status,0,c
 10519   003DF0  360D               	rlcf	___aodiv@divisor^0,f,c
 10520   003DF2  360E               	rlcf	(___aodiv@divisor+1)^0,f,c
 10521   003DF4  360F               	rlcf	(___aodiv@divisor+2)^0,f,c
 10522   003DF6  3610               	rlcf	(___aodiv@divisor+3)^0,f,c
 10523   003DF8  3611               	rlcf	(___aodiv@divisor+4)^0,f,c
 10524   003DFA  3612               	rlcf	(___aodiv@divisor+5)^0,f,c
 10525   003DFC  3613               	rlcf	(___aodiv@divisor+6)^0,f,c
 10526   003DFE  3614               	rlcf	(___aodiv@divisor+7)^0,f,c
 10527   003E00  2A15               	incf	___aodiv@counter^0,f,c
 10528   003E02                     l3781:
 10529   003E02  AE14               	btfss	(___aodiv@divisor+7)^0,7,c
 10530   003E04  EF06  F01F         	goto	u3611
 10531   003E08  EF08  F01F         	goto	u3610
 10532   003E0C                     u3611:
 10533   003E0C  EFF7  F01E         	goto	l3779
 10534   003E10                     u3610:
 10535   003E10                     l3783:
 10536   003E10  90D8               	bcf	status,0,c
 10537   003E12  3617               	rlcf	___aodiv@quotient^0,f,c
 10538   003E14  3618               	rlcf	(___aodiv@quotient+1)^0,f,c
 10539   003E16  3619               	rlcf	(___aodiv@quotient+2)^0,f,c
 10540   003E18  361A               	rlcf	(___aodiv@quotient+3)^0,f,c
 10541   003E1A  361B               	rlcf	(___aodiv@quotient+4)^0,f,c
 10542   003E1C  361C               	rlcf	(___aodiv@quotient+5)^0,f,c
 10543   003E1E  361D               	rlcf	(___aodiv@quotient+6)^0,f,c
 10544   003E20  361E               	rlcf	(___aodiv@quotient+7)^0,f,c
 10545   003E22  500D               	movf	___aodiv@divisor^0,w,c
 10546   003E24  5C05               	subwf	___aodiv@dividend^0,w,c
 10547   003E26  500E               	movf	(___aodiv@divisor+1)^0,w,c
 10548   003E28  5806               	subwfb	(___aodiv@dividend+1)^0,w,c
 10549   003E2A  500F               	movf	(___aodiv@divisor+2)^0,w,c
 10550   003E2C  5807               	subwfb	(___aodiv@dividend+2)^0,w,c
 10551   003E2E  5010               	movf	(___aodiv@divisor+3)^0,w,c
 10552   003E30  5808               	subwfb	(___aodiv@dividend+3)^0,w,c
 10553   003E32  5011               	movf	(___aodiv@divisor+4)^0,w,c
 10554   003E34  5809               	subwfb	(___aodiv@dividend+4)^0,w,c
 10555   003E36  5012               	movf	(___aodiv@divisor+5)^0,w,c
 10556   003E38  580A               	subwfb	(___aodiv@dividend+5)^0,w,c
 10557   003E3A  5013               	movf	(___aodiv@divisor+6)^0,w,c
 10558   003E3C  580B               	subwfb	(___aodiv@dividend+6)^0,w,c
 10559   003E3E  5014               	movf	(___aodiv@divisor+7)^0,w,c
 10560   003E40  580C               	subwfb	(___aodiv@dividend+7)^0,w,c
 10561   003E42  A0D8               	btfss	status,0,c
 10562   003E44  EF26  F01F         	goto	u3621
 10563   003E48  EF28  F01F         	goto	u3620
 10564   003E4C                     u3621:
 10565   003E4C  EF39  F01F         	goto	l3791
 10566   003E50                     u3620:
 10567   003E50  500D               	movf	___aodiv@divisor^0,w,c
 10568   003E52  5E05               	subwf	___aodiv@dividend^0,f,c
 10569   003E54  500E               	movf	(___aodiv@divisor+1)^0,w,c
 10570   003E56  5A06               	subwfb	(___aodiv@dividend+1)^0,f,c
 10571   003E58  500F               	movf	(___aodiv@divisor+2)^0,w,c
 10572   003E5A  5A07               	subwfb	(___aodiv@dividend+2)^0,f,c
 10573   003E5C  5010               	movf	(___aodiv@divisor+3)^0,w,c
 10574   003E5E  5A08               	subwfb	(___aodiv@dividend+3)^0,f,c
 10575   003E60  5011               	movf	(___aodiv@divisor+4)^0,w,c
 10576   003E62  5A09               	subwfb	(___aodiv@dividend+4)^0,f,c
 10577   003E64  5012               	movf	(___aodiv@divisor+5)^0,w,c
 10578   003E66  5A0A               	subwfb	(___aodiv@dividend+5)^0,f,c
 10579   003E68  5013               	movf	(___aodiv@divisor+6)^0,w,c
 10580   003E6A  5A0B               	subwfb	(___aodiv@dividend+6)^0,f,c
 10581   003E6C  5014               	movf	(___aodiv@divisor+7)^0,w,c
 10582   003E6E  5A0C               	subwfb	(___aodiv@dividend+7)^0,f,c
 10583   003E70  8017               	bsf	___aodiv@quotient^0,0,c
 10584   003E72                     l3791:
 10585   003E72  90D8               	bcf	status,0,c
 10586   003E74  3214               	rrcf	(___aodiv@divisor+7)^0,f,c
 10587   003E76  3213               	rrcf	(___aodiv@divisor+6)^0,f,c
 10588   003E78  3212               	rrcf	(___aodiv@divisor+5)^0,f,c
 10589   003E7A  3211               	rrcf	(___aodiv@divisor+4)^0,f,c
 10590   003E7C  3210               	rrcf	(___aodiv@divisor+3)^0,f,c
 10591   003E7E  320F               	rrcf	(___aodiv@divisor+2)^0,f,c
 10592   003E80  320E               	rrcf	(___aodiv@divisor+1)^0,f,c
 10593   003E82  320D               	rrcf	___aodiv@divisor^0,f,c
 10594   003E84  2E15               	decfsz	___aodiv@counter^0,f,c
 10595   003E86  EF08  F01F         	goto	l3783
 10596   003E8A                     l3795:
 10597   003E8A  5016               	movf	___aodiv@sign^0,w,c
 10598   003E8C  B4D8               	btfsc	status,2,c
 10599   003E8E  EF4B  F01F         	goto	u3631
 10600   003E92  EF4D  F01F         	goto	u3630
 10601   003E96                     u3631:
 10602   003E96  EF5D  F01F         	goto	l3799
 10603   003E9A                     u3630:
 10604   003E9A  1E1E               	comf	(___aodiv@quotient+7)^0,f,c
 10605   003E9C  1E1D               	comf	(___aodiv@quotient+6)^0,f,c
 10606   003E9E  1E1C               	comf	(___aodiv@quotient+5)^0,f,c
 10607   003EA0  1E1B               	comf	(___aodiv@quotient+4)^0,f,c
 10608   003EA2  1E1A               	comf	(___aodiv@quotient+3)^0,f,c
 10609   003EA4  1E19               	comf	(___aodiv@quotient+2)^0,f,c
 10610   003EA6  1E18               	comf	(___aodiv@quotient+1)^0,f,c
 10611   003EA8  6C17               	negf	___aodiv@quotient^0,c
 10612   003EAA  0E00               	movlw	0
 10613   003EAC  2218               	addwfc	(___aodiv@quotient+1)^0,f,c
 10614   003EAE  2219               	addwfc	(___aodiv@quotient+2)^0,f,c
 10615   003EB0  221A               	addwfc	(___aodiv@quotient+3)^0,f,c
 10616   003EB2  221B               	addwfc	(___aodiv@quotient+4)^0,f,c
 10617   003EB4  221C               	addwfc	(___aodiv@quotient+5)^0,f,c
 10618   003EB6  221D               	addwfc	(___aodiv@quotient+6)^0,f,c
 10619   003EB8  221E               	addwfc	(___aodiv@quotient+7)^0,f,c
 10620   003EBA                     l3799:
 10621   003EBA  C017  F005         	movff	___aodiv@quotient,?___aodiv
 10622   003EBE  C018  F006         	movff	___aodiv@quotient+1,?___aodiv+1
 10623   003EC2  C019  F007         	movff	___aodiv@quotient+2,?___aodiv+2
 10624   003EC6  C01A  F008         	movff	___aodiv@quotient+3,?___aodiv+3
 10625   003ECA  C01B  F009         	movff	___aodiv@quotient+4,?___aodiv+4
 10626   003ECE  C01C  F00A         	movff	___aodiv@quotient+5,?___aodiv+5
 10627   003ED2  C01D  F00B         	movff	___aodiv@quotient+6,?___aodiv+6
 10628   003ED6  C01E  F00C         	movff	___aodiv@quotient+7,?___aodiv+7
 10629   003EDA  0012               	return		;funcret
 10630   003EDC                     __end_of___aodiv:
 10631                           	callstack 0
 10632                           
 10633 ;; *************** function _sendTxBuf *****************
 10634 ;; Defined at:
 10635 ;;		line 126 in file "serialTest.c"
 10636 ;; Parameters:    Size  Location     Type
 10637 ;;		None
 10638 ;; Auto vars:     Size  Location     Type
 10639 ;;		None
 10640 ;; Return value:  Size  Location     Type
 10641 ;;                  1    wreg      void 
 10642 ;; Registers used:
 10643 ;;		wreg, status,2, status,0, cstack
 10644 ;; Tracked objects:
 10645 ;;		On entry : 0/0
 10646 ;;		On exit  : 0/0
 10647 ;;		Unchanged: 0/0
 10648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10652 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10653 ;;Total ram usage:        0 bytes
 10654 ;; Hardware stack levels used: 1
 10655 ;; Hardware stack levels required when called: 3
 10656 ;; This function calls:
 10657 ;;		_isDataInTxBuf
 10658 ;; This function is called by:
 10659 ;;		_colorDetect
 10660 ;; This function uses a non-reentrant model
 10661 ;;
 10662                           
 10663                           	psect	text37
 10664   005A56                     __ptext37:
 10665                           	callstack 0
 10666   005A56                     _sendTxBuf:
 10667                           	callstack 26
 10668   005A56                     
 10669                           ;serialTest.c: 127:     if (isDataInTxBuf()) {PIE4bits.TX4IE=1;}
 10670   005A56  EC38  F02D         	call	_isDataInTxBuf	;wreg free
 10671   005A5A  0900               	iorlw	0
 10672   005A5C  B4D8               	btfsc	status,2,c
 10673   005A5E  EF33  F02D         	goto	u5231
 10674   005A62  EF35  F02D         	goto	u5230
 10675   005A66                     u5231:
 10676   005A66  EF37  F02D         	goto	l504
 10677   005A6A                     u5230:
 10678   005A6A  010E               	movlb	14	; () banked
 10679   005A6C  852D               	bsf	45,2,b	;volatile
 10680   005A6E                     l504:
 10681   005A6E  0012               	return		;funcret
 10682   005A70                     __end_of_sendTxBuf:
 10683                           	callstack 0
 10684                           
 10685 ;; *************** function _isDataInTxBuf *****************
 10686 ;; Defined at:
 10687 ;;		line 113 in file "serialTest.c"
 10688 ;; Parameters:    Size  Location     Type
 10689 ;;		None
 10690 ;; Auto vars:     Size  Location     Type
 10691 ;;		None
 10692 ;; Return value:  Size  Location     Type
 10693 ;;                  1    wreg      unsigned char 
 10694 ;; Registers used:
 10695 ;;		wreg, status,2, status,0
 10696 ;; Tracked objects:
 10697 ;;		On entry : 0/0
 10698 ;;		On exit  : 0/0
 10699 ;;		Unchanged: 0/0
 10700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10704 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10705 ;;Total ram usage:        0 bytes
 10706 ;; Hardware stack levels used: 1
 10707 ;; Hardware stack levels required when called: 2
 10708 ;; This function calls:
 10709 ;;		Nothing
 10710 ;; This function is called by:
 10711 ;;		_sendTxBuf
 10712 ;; This function uses a non-reentrant model
 10713 ;;
 10714                           
 10715                           	psect	text38
 10716   005A70                     __ptext38:
 10717                           	callstack 0
 10718   005A70                     _isDataInTxBuf:
 10719                           	callstack 26
 10720   005A70                     
 10721                           ;serialTest.c: 114:     return (TxBufWriteCnt!=TxBufReadCnt);
 10722   005A70  5057               	movf	_TxBufReadCnt^0,w,c	;volatile
 10723   005A72  1858               	xorwf	_TxBufWriteCnt^0,w,c	;volatile
 10724   005A74  A4D8               	btfss	status,2,c
 10725   005A76  EF3F  F02D         	goto	u5191
 10726   005A7A  EF42  F02D         	goto	u5190
 10727   005A7E                     u5191:
 10728   005A7E  0E01               	movlw	1
 10729   005A80  EF43  F02D         	goto	u5200
 10730   005A84                     u5190:
 10731   005A84  0E00               	movlw	0
 10732   005A86                     u5200:
 10733   005A86  0012               	return		;funcret
 10734   005A88                     __end_of_isDataInTxBuf:
 10735                           	callstack 0
 10736                           
 10737 ;; *************** function _reverseSquareRight *****************
 10738 ;; Defined at:
 10739 ;;		line 380 in file "MazeRobot.X/dc_motor.c"
 10740 ;; Parameters:    Size  Location     Type
 10741 ;;  mL              2   35[COMRAM] PTR struct DC_motor
 10742 ;;		 -> main@motorLeft(9), 
 10743 ;;  mR              2   37[COMRAM] PTR struct DC_motor
 10744 ;;		 -> main@motorRight(9), 
 10745 ;; Auto vars:     Size  Location     Type
 10746 ;;		None
 10747 ;; Return value:  Size  Location     Type
 10748 ;;                  1    wreg      void 
 10749 ;; Registers used:
 10750 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10751 ;; Tracked objects:
 10752 ;;		On entry : 0/0
 10753 ;;		On exit  : 0/0
 10754 ;;		Unchanged: 0/0
 10755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10756 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10757 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10758 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10759 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10760 ;;Total ram usage:        6 bytes
 10761 ;; Hardware stack levels used: 1
 10762 ;; Hardware stack levels required when called: 6
 10763 ;; This function calls:
 10764 ;;		_reverse
 10765 ;;		_stop
 10766 ;;		_turnRight_90
 10767 ;; This function is called by:
 10768 ;;		_colorDetect
 10769 ;; This function uses a non-reentrant model
 10770 ;;
 10771                           
 10772                           	psect	text39
 10773   0051E0                     __ptext39:
 10774                           	callstack 0
 10775   0051E0                     _reverseSquareRight:
 10776                           	callstack 23
 10777   0051E0                     
 10778                           ;MazeRobot.X/dc_motor.c: 380: void reverseSquareRight(DC_motor *mL, DC_motor *mR);MazeRo
      +                          bot.X/dc_motor.c: 381: {;MazeRobot.X/dc_motor.c: 383:     stop(mL, mR);
 10779   0051E0  C024  F018         	movff	reverseSquareRight@mL,stop@mL
 10780   0051E4  C025  F019         	movff	reverseSquareRight@mL+1,stop@mL+1
 10781   0051E8  C026  F01A         	movff	reverseSquareRight@mR,stop@mR
 10782   0051EC  C027  F01B         	movff	reverseSquareRight@mR+1,stop@mR+1
 10783   0051F0  ECFC  F027         	call	_stop	;wreg free
 10784   0051F4                     
 10785                           ;MazeRobot.X/dc_motor.c: 384:     _delay((unsigned long)((100)*(64000000/4000.0)));
 10786   0051F4  0E09               	movlw	9
 10787   0051F6  6E29               	movwf	(??_reverseSquareRight+1)^0,c
 10788   0051F8  0E1E               	movlw	30
 10789   0051FA  6E28               	movwf	??_reverseSquareRight^0,c
 10790   0051FC  0EE4               	movlw	228
 10791   0051FE                     u7517:
 10792   0051FE  2EE8               	decfsz	wreg,f,c
 10793   005200  D7FE               	bra	u7517
 10794   005202  2E28               	decfsz	??_reverseSquareRight^0,f,c
 10795   005204  D7FC               	bra	u7517
 10796   005206  2E29               	decfsz	(??_reverseSquareRight+1)^0,f,c
 10797   005208  D7FA               	bra	u7517
 10798   00520A  D000               	nop2	
 10799   00520C                     
 10800                           ;MazeRobot.X/dc_motor.c: 386:     reverse(mL, mR);
 10801   00520C  C024  F018         	movff	reverseSquareRight@mL,reverse@mL
 10802   005210  C025  F019         	movff	reverseSquareRight@mL+1,reverse@mL+1
 10803   005214  C026  F01A         	movff	reverseSquareRight@mR,reverse@mR
 10804   005218  C027  F01B         	movff	reverseSquareRight@mR+1,reverse@mR+1
 10805   00521C  ECC3  F026         	call	_reverse	;wreg free
 10806                           
 10807                           ;MazeRobot.X/dc_motor.c: 387:     _delay((unsigned long)((500)*(64000000/4000.0)));
 10808   005220  0E29               	movlw	41
 10809   005222  6E29               	movwf	(??_reverseSquareRight+1)^0,c
 10810   005224  0E96               	movlw	150
 10811   005226  6E28               	movwf	??_reverseSquareRight^0,c
 10812   005228  0E7F               	movlw	127
 10813   00522A                     u7527:
 10814   00522A  2EE8               	decfsz	wreg,f,c
 10815   00522C  D7FE               	bra	u7527
 10816   00522E  2E28               	decfsz	??_reverseSquareRight^0,f,c
 10817   005230  D7FC               	bra	u7527
 10818   005232  2E29               	decfsz	(??_reverseSquareRight+1)^0,f,c
 10819   005234  D7FA               	bra	u7527
 10820   005236  F000               	nop	
 10821   005238                     
 10822                           ;MazeRobot.X/dc_motor.c: 389:     turnRight_90(mL,mR);
 10823   005238  C024  F01E         	movff	reverseSquareRight@mL,turnRight_90@mL
 10824   00523C  C025  F01F         	movff	reverseSquareRight@mL+1,turnRight_90@mL+1
 10825   005240  C026  F020         	movff	reverseSquareRight@mR,turnRight_90@mR
 10826   005244  C027  F021         	movff	reverseSquareRight@mR+1,turnRight_90@mR+1
 10827   005248  EC14  F022         	call	_turnRight_90	;wreg free
 10828   00524C                     
 10829                           ;MazeRobot.X/dc_motor.c: 391:     stop(mL, mR);
 10830   00524C  C024  F018         	movff	reverseSquareRight@mL,stop@mL
 10831   005250  C025  F019         	movff	reverseSquareRight@mL+1,stop@mL+1
 10832   005254  C026  F01A         	movff	reverseSquareRight@mR,stop@mR
 10833   005258  C027  F01B         	movff	reverseSquareRight@mR+1,stop@mR+1
 10834   00525C  ECFC  F027         	call	_stop	;wreg free
 10835   005260  0012               	return		;funcret
 10836   005262                     __end_of_reverseSquareRight:
 10837                           	callstack 0
 10838                           
 10839 ;; *************** function _turnRight_90 *****************
 10840 ;; Defined at:
 10841 ;;		line 267 in file "MazeRobot.X/dc_motor.c"
 10842 ;; Parameters:    Size  Location     Type
 10843 ;;  mL              2   29[COMRAM] PTR struct DC_motor
 10844 ;;		 -> main@motorLeft(9), 
 10845 ;;  mR              2   31[COMRAM] PTR struct DC_motor
 10846 ;;		 -> main@motorRight(9), 
 10847 ;; Auto vars:     Size  Location     Type
 10848 ;;		None
 10849 ;; Return value:  Size  Location     Type
 10850 ;;                  1    wreg      void 
 10851 ;; Registers used:
 10852 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10853 ;; Tracked objects:
 10854 ;;		On entry : 0/0
 10855 ;;		On exit  : 0/0
 10856 ;;		Unchanged: 0/0
 10857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10858 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10860 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10861 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10862 ;;Total ram usage:        6 bytes
 10863 ;; Hardware stack levels used: 1
 10864 ;; Hardware stack levels required when called: 5
 10865 ;; This function calls:
 10866 ;;		_reverse
 10867 ;;		_setMotorPWM
 10868 ;;		_stop
 10869 ;; This function is called by:
 10870 ;;		_colorDetect
 10871 ;;		_reverseSquareRight
 10872 ;; This function uses a non-reentrant model
 10873 ;;
 10874                           
 10875                           	psect	text40
 10876   004428                     __ptext40:
 10877                           	callstack 0
 10878   004428                     _turnRight_90:
 10879                           	callstack 24
 10880   004428                     
 10881                           ;MazeRobot.X/dc_motor.c: 267: void turnRight_90(DC_motor *mL, DC_motor *mR);MazeRobot.X/
      +                          dc_motor.c: 268: {;MazeRobot.X/dc_motor.c: 269:     stop(mL, mR);
 10882   004428  C01E  F018         	movff	turnRight_90@mL,stop@mL
 10883   00442C  C01F  F019         	movff	turnRight_90@mL+1,stop@mL+1
 10884   004430  C020  F01A         	movff	turnRight_90@mR,stop@mR
 10885   004434  C021  F01B         	movff	turnRight_90@mR+1,stop@mR+1
 10886   004438  ECFC  F027         	call	_stop	;wreg free
 10887   00443C                     
 10888                           ;MazeRobot.X/dc_motor.c: 270:     _delay((unsigned long)((100)*(64000000/4000.0)));
 10889   00443C  0E09               	movlw	9
 10890   00443E  6E23               	movwf	(??_turnRight_90+1)^0,c
 10891   004440  0E1E               	movlw	30
 10892   004442  6E22               	movwf	??_turnRight_90^0,c
 10893   004444  0EE4               	movlw	228
 10894   004446                     u7537:
 10895   004446  2EE8               	decfsz	wreg,f,c
 10896   004448  D7FE               	bra	u7537
 10897   00444A  2E22               	decfsz	??_turnRight_90^0,f,c
 10898   00444C  D7FC               	bra	u7537
 10899   00444E  2E23               	decfsz	(??_turnRight_90+1)^0,f,c
 10900   004450  D7FA               	bra	u7537
 10901   004452  D000               	nop2	
 10902   004454                     
 10903                           ;MazeRobot.X/dc_motor.c: 272:     reverse(mL, mR);
 10904   004454  C01E  F018         	movff	turnRight_90@mL,reverse@mL
 10905   004458  C01F  F019         	movff	turnRight_90@mL+1,reverse@mL+1
 10906   00445C  C020  F01A         	movff	turnRight_90@mR,reverse@mR
 10907   004460  C021  F01B         	movff	turnRight_90@mR+1,reverse@mR+1
 10908   004464  ECC3  F026         	call	_reverse	;wreg free
 10909                           
 10910                           ;MazeRobot.X/dc_motor.c: 273:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
 10911   004468  0E11               	movlw	17
 10912   00446A  6E23               	movwf	(??_turnRight_90+1)^0,c
 10913   00446C  0E3C               	movlw	60
 10914   00446E  6E22               	movwf	??_turnRight_90^0,c
 10915   004470  0ECB               	movlw	203
 10916   004472                     u7547:
 10917   004472  2EE8               	decfsz	wreg,f,c
 10918   004474  D7FE               	bra	u7547
 10919   004476  2E22               	decfsz	??_turnRight_90^0,f,c
 10920   004478  D7FC               	bra	u7547
 10921   00447A  2E23               	decfsz	(??_turnRight_90+1)^0,f,c
 10922   00447C  D7FA               	bra	u7547
 10923   00447E  F000               	nop	
 10924   004480                     
 10925                           ;MazeRobot.X/dc_motor.c: 275:     stop(mL, mR);
 10926   004480  C01E  F018         	movff	turnRight_90@mL,stop@mL
 10927   004484  C01F  F019         	movff	turnRight_90@mL+1,stop@mL+1
 10928   004488  C020  F01A         	movff	turnRight_90@mR,stop@mR
 10929   00448C  C021  F01B         	movff	turnRight_90@mR+1,stop@mR+1
 10930   004490  ECFC  F027         	call	_stop	;wreg free
 10931   004494                     
 10932                           ;MazeRobot.X/dc_motor.c: 277:     mL->direction = 1;
 10933   004494  EE20 F001          	lfsr	2,1
 10934   004498  501E               	movf	turnRight_90@mL^0,w,c
 10935   00449A  26D9               	addwf	fsr2l,f,c
 10936   00449C  501F               	movf	(turnRight_90@mL+1)^0,w,c
 10937   00449E  22DA               	addwfc	fsr2h,f,c
 10938   0044A0  0E01               	movlw	1
 10939   0044A2  6EDF               	movwf	indf2,c
 10940   0044A4                     
 10941                           ;MazeRobot.X/dc_motor.c: 278:     mR->direction = 0;
 10942   0044A4  EE20 F001          	lfsr	2,1
 10943   0044A8  5020               	movf	turnRight_90@mR^0,w,c
 10944   0044AA  26D9               	addwf	fsr2l,f,c
 10945   0044AC  5021               	movf	(turnRight_90@mR+1)^0,w,c
 10946   0044AE  22DA               	addwfc	fsr2h,f,c
 10947   0044B0  0E00               	movlw	0
 10948   0044B2  6EDF               	movwf	indf2,c
 10949   0044B4                     
 10950                           ;MazeRobot.X/dc_motor.c: 280:     mL->brakemode = 1;
 10951   0044B4  EE20 F002          	lfsr	2,2
 10952   0044B8  501E               	movf	turnRight_90@mL^0,w,c
 10953   0044BA  26D9               	addwf	fsr2l,f,c
 10954   0044BC  501F               	movf	(turnRight_90@mL+1)^0,w,c
 10955   0044BE  22DA               	addwfc	fsr2h,f,c
 10956   0044C0  0E01               	movlw	1
 10957   0044C2  6EDF               	movwf	indf2,c
 10958   0044C4                     
 10959                           ;MazeRobot.X/dc_motor.c: 281:     mL->brakemode = 1;
 10960   0044C4  EE20 F002          	lfsr	2,2
 10961   0044C8  501E               	movf	turnRight_90@mL^0,w,c
 10962   0044CA  26D9               	addwf	fsr2l,f,c
 10963   0044CC  501F               	movf	(turnRight_90@mL+1)^0,w,c
 10964   0044CE  22DA               	addwfc	fsr2h,f,c
 10965   0044D0  0E01               	movlw	1
 10966   0044D2  6EDF               	movwf	indf2,c
 10967                           
 10968                           ;MazeRobot.X/dc_motor.c: 283:     while((mL->power < 80) || (mR->power < 80)){
 10969   0044D4  EF84  F022         	goto	l4801
 10970   0044D8                     l4795:
 10971                           
 10972                           ;MazeRobot.X/dc_motor.c: 284:         mL->power += 10;
 10973   0044D8  C01E  FFD9         	movff	turnRight_90@mL,fsr2l
 10974   0044DC  C01F  FFDA         	movff	turnRight_90@mL+1,fsr2h
 10975   0044E0  0E0A               	movlw	10
 10976   0044E2  26DF               	addwf	indf2,f,c
 10977                           
 10978                           ;MazeRobot.X/dc_motor.c: 285:         mR->power += 10;
 10979   0044E4  C020  FFD9         	movff	turnRight_90@mR,fsr2l
 10980   0044E8  C021  FFDA         	movff	turnRight_90@mR+1,fsr2h
 10981   0044EC  0E0A               	movlw	10
 10982   0044EE  26DF               	addwf	indf2,f,c
 10983   0044F0                     
 10984                           ;MazeRobot.X/dc_motor.c: 286:         setMotorPWM(mL);
 10985   0044F0  C01E  F012         	movff	turnRight_90@mL,setMotorPWM@m
 10986   0044F4  C01F  F013         	movff	turnRight_90@mL+1,setMotorPWM@m+1
 10987   0044F8  EC6E  F01F         	call	_setMotorPWM	;wreg free
 10988   0044FC                     
 10989                           ;MazeRobot.X/dc_motor.c: 287:         setMotorPWM(mR);
 10990   0044FC  C020  F012         	movff	turnRight_90@mR,setMotorPWM@m
 10991   004500  C021  F013         	movff	turnRight_90@mR+1,setMotorPWM@m+1
 10992   004504  EC6E  F01F         	call	_setMotorPWM	;wreg free
 10993   004508                     l4801:
 10994                           
 10995                           ;MazeRobot.X/dc_motor.c: 283:     while((mL->power < 80) || (mR->power < 80)){
 10996   004508  C01E  FFD9         	movff	turnRight_90@mL,fsr2l
 10997   00450C  C01F  FFDA         	movff	turnRight_90@mL+1,fsr2h
 10998   004510  0E4F               	movlw	79
 10999   004512  64DF               	cpfsgt	indf2,c
 11000   004514  EF8E  F022         	goto	u5141
 11001   004518  EF90  F022         	goto	u5140
 11002   00451C                     u5141:
 11003   00451C  EF6C  F022         	goto	l4795
 11004   004520                     u5140:
 11005   004520  C020  FFD9         	movff	turnRight_90@mR,fsr2l
 11006   004524  C021  FFDA         	movff	turnRight_90@mR+1,fsr2h
 11007   004528  0E4F               	movlw	79
 11008   00452A  64DF               	cpfsgt	indf2,c
 11009   00452C  EF9A  F022         	goto	u5151
 11010   004530  EF9C  F022         	goto	u5150
 11011   004534                     u5151:
 11012   004534  EF6C  F022         	goto	l4795
 11013   004538                     u5150:
 11014   004538                     
 11015                           ;MazeRobot.X/dc_motor.c: 289:    _delay((unsigned long)((turning_time45)*(64000000/4000.
      +                          0)));
 11016   004538  0E11               	movlw	17
 11017   00453A  6E23               	movwf	(??_turnRight_90+1)^0,c
 11018   00453C  0E3C               	movlw	60
 11019   00453E  6E22               	movwf	??_turnRight_90^0,c
 11020   004540  0ECB               	movlw	203
 11021   004542                     u7557:
 11022   004542  2EE8               	decfsz	wreg,f,c
 11023   004544  D7FE               	bra	u7557
 11024   004546  2E22               	decfsz	??_turnRight_90^0,f,c
 11025   004548  D7FC               	bra	u7557
 11026   00454A  2E23               	decfsz	(??_turnRight_90+1)^0,f,c
 11027   00454C  D7FA               	bra	u7557
 11028   00454E  F000               	nop	
 11029   004550                     
 11030                           ;MazeRobot.X/dc_motor.c: 291:     stop(mL, mR);
 11031   004550  C01E  F018         	movff	turnRight_90@mL,stop@mL
 11032   004554  C01F  F019         	movff	turnRight_90@mL+1,stop@mL+1
 11033   004558  C020  F01A         	movff	turnRight_90@mR,stop@mR
 11034   00455C  C021  F01B         	movff	turnRight_90@mR+1,stop@mR+1
 11035   004560  ECFC  F027         	call	_stop	;wreg free
 11036   004564  0012               	return		;funcret
 11037   004566                     __end_of_turnRight_90:
 11038                           	callstack 0
 11039                           
 11040 ;; *************** function _reverseSquareLeft *****************
 11041 ;; Defined at:
 11042 ;;		line 396 in file "MazeRobot.X/dc_motor.c"
 11043 ;; Parameters:    Size  Location     Type
 11044 ;;  mL              2   35[COMRAM] PTR struct DC_motor
 11045 ;;		 -> main@motorLeft(9), 
 11046 ;;  mR              2   37[COMRAM] PTR struct DC_motor
 11047 ;;		 -> main@motorRight(9), 
 11048 ;; Auto vars:     Size  Location     Type
 11049 ;;		None
 11050 ;; Return value:  Size  Location     Type
 11051 ;;                  1    wreg      void 
 11052 ;; Registers used:
 11053 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11054 ;; Tracked objects:
 11055 ;;		On entry : 0/0
 11056 ;;		On exit  : 0/0
 11057 ;;		Unchanged: 0/0
 11058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11059 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11060 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11061 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11062 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11063 ;;Total ram usage:        6 bytes
 11064 ;; Hardware stack levels used: 1
 11065 ;; Hardware stack levels required when called: 6
 11066 ;; This function calls:
 11067 ;;		_reverse
 11068 ;;		_stop
 11069 ;;		_turnLeft_90
 11070 ;; This function is called by:
 11071 ;;		_colorDetect
 11072 ;; This function uses a non-reentrant model
 11073 ;;
 11074                           
 11075                           	psect	text41
 11076   005262                     __ptext41:
 11077                           	callstack 0
 11078   005262                     _reverseSquareLeft:
 11079                           	callstack 23
 11080   005262                     
 11081                           ;MazeRobot.X/dc_motor.c: 396: void reverseSquareLeft(DC_motor *mL, DC_motor *mR);MazeRob
      +                          ot.X/dc_motor.c: 397: {;MazeRobot.X/dc_motor.c: 399:     stop(mL, mR);
 11082   005262  C024  F018         	movff	reverseSquareLeft@mL,stop@mL
 11083   005266  C025  F019         	movff	reverseSquareLeft@mL+1,stop@mL+1
 11084   00526A  C026  F01A         	movff	reverseSquareLeft@mR,stop@mR
 11085   00526E  C027  F01B         	movff	reverseSquareLeft@mR+1,stop@mR+1
 11086   005272  ECFC  F027         	call	_stop	;wreg free
 11087   005276                     
 11088                           ;MazeRobot.X/dc_motor.c: 400:     _delay((unsigned long)((100)*(64000000/4000.0)));
 11089   005276  0E09               	movlw	9
 11090   005278  6E29               	movwf	(??_reverseSquareLeft+1)^0,c
 11091   00527A  0E1E               	movlw	30
 11092   00527C  6E28               	movwf	??_reverseSquareLeft^0,c
 11093   00527E  0EE4               	movlw	228
 11094   005280                     u7567:
 11095   005280  2EE8               	decfsz	wreg,f,c
 11096   005282  D7FE               	bra	u7567
 11097   005284  2E28               	decfsz	??_reverseSquareLeft^0,f,c
 11098   005286  D7FC               	bra	u7567
 11099   005288  2E29               	decfsz	(??_reverseSquareLeft+1)^0,f,c
 11100   00528A  D7FA               	bra	u7567
 11101   00528C  D000               	nop2	
 11102   00528E                     
 11103                           ;MazeRobot.X/dc_motor.c: 402:     reverse(mL, mR);
 11104   00528E  C024  F018         	movff	reverseSquareLeft@mL,reverse@mL
 11105   005292  C025  F019         	movff	reverseSquareLeft@mL+1,reverse@mL+1
 11106   005296  C026  F01A         	movff	reverseSquareLeft@mR,reverse@mR
 11107   00529A  C027  F01B         	movff	reverseSquareLeft@mR+1,reverse@mR+1
 11108   00529E  ECC3  F026         	call	_reverse	;wreg free
 11109                           
 11110                           ;MazeRobot.X/dc_motor.c: 403:     _delay((unsigned long)((500)*(64000000/4000.0)));
 11111   0052A2  0E29               	movlw	41
 11112   0052A4  6E29               	movwf	(??_reverseSquareLeft+1)^0,c
 11113   0052A6  0E96               	movlw	150
 11114   0052A8  6E28               	movwf	??_reverseSquareLeft^0,c
 11115   0052AA  0E7F               	movlw	127
 11116   0052AC                     u7577:
 11117   0052AC  2EE8               	decfsz	wreg,f,c
 11118   0052AE  D7FE               	bra	u7577
 11119   0052B0  2E28               	decfsz	??_reverseSquareLeft^0,f,c
 11120   0052B2  D7FC               	bra	u7577
 11121   0052B4  2E29               	decfsz	(??_reverseSquareLeft+1)^0,f,c
 11122   0052B6  D7FA               	bra	u7577
 11123   0052B8  F000               	nop	
 11124   0052BA                     
 11125                           ;MazeRobot.X/dc_motor.c: 405:     turnLeft_90(mL,mR);
 11126   0052BA  C024  F01E         	movff	reverseSquareLeft@mL,turnLeft_90@mL
 11127   0052BE  C025  F01F         	movff	reverseSquareLeft@mL+1,turnLeft_90@mL+1
 11128   0052C2  C026  F020         	movff	reverseSquareLeft@mR,turnLeft_90@mR
 11129   0052C6  C027  F021         	movff	reverseSquareLeft@mR+1,turnLeft_90@mR+1
 11130   0052CA  ECB3  F022         	call	_turnLeft_90	;wreg free
 11131   0052CE                     
 11132                           ;MazeRobot.X/dc_motor.c: 407:     stop(mL, mR);
 11133   0052CE  C024  F018         	movff	reverseSquareLeft@mL,stop@mL
 11134   0052D2  C025  F019         	movff	reverseSquareLeft@mL+1,stop@mL+1
 11135   0052D6  C026  F01A         	movff	reverseSquareLeft@mR,stop@mR
 11136   0052DA  C027  F01B         	movff	reverseSquareLeft@mR+1,stop@mR+1
 11137   0052DE  ECFC  F027         	call	_stop	;wreg free
 11138   0052E2  0012               	return		;funcret
 11139   0052E4                     __end_of_reverseSquareLeft:
 11140                           	callstack 0
 11141                           
 11142 ;; *************** function _turnLeft_90 *****************
 11143 ;; Defined at:
 11144 ;;		line 238 in file "MazeRobot.X/dc_motor.c"
 11145 ;; Parameters:    Size  Location     Type
 11146 ;;  mL              2   29[COMRAM] PTR struct DC_motor
 11147 ;;		 -> main@motorLeft(9), 
 11148 ;;  mR              2   31[COMRAM] PTR struct DC_motor
 11149 ;;		 -> main@motorRight(9), 
 11150 ;; Auto vars:     Size  Location     Type
 11151 ;;		None
 11152 ;; Return value:  Size  Location     Type
 11153 ;;                  1    wreg      void 
 11154 ;; Registers used:
 11155 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11156 ;; Tracked objects:
 11157 ;;		On entry : 0/0
 11158 ;;		On exit  : 0/0
 11159 ;;		Unchanged: 0/0
 11160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11161 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11163 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11164 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11165 ;;Total ram usage:        6 bytes
 11166 ;; Hardware stack levels used: 1
 11167 ;; Hardware stack levels required when called: 5
 11168 ;; This function calls:
 11169 ;;		_reverse
 11170 ;;		_setMotorPWM
 11171 ;;		_stop
 11172 ;; This function is called by:
 11173 ;;		_colorDetect
 11174 ;;		_reverseSquareLeft
 11175 ;; This function uses a non-reentrant model
 11176 ;;
 11177                           
 11178                           	psect	text42
 11179   004566                     __ptext42:
 11180                           	callstack 0
 11181   004566                     _turnLeft_90:
 11182                           	callstack 24
 11183   004566                     
 11184                           ;MazeRobot.X/dc_motor.c: 238: void turnLeft_90(DC_motor *mL, DC_motor *mR);MazeRobot.X/d
      +                          c_motor.c: 239: {;MazeRobot.X/dc_motor.c: 241:     stop(mL, mR);
 11185   004566  C01E  F018         	movff	turnLeft_90@mL,stop@mL
 11186   00456A  C01F  F019         	movff	turnLeft_90@mL+1,stop@mL+1
 11187   00456E  C020  F01A         	movff	turnLeft_90@mR,stop@mR
 11188   004572  C021  F01B         	movff	turnLeft_90@mR+1,stop@mR+1
 11189   004576  ECFC  F027         	call	_stop	;wreg free
 11190   00457A                     
 11191                           ;MazeRobot.X/dc_motor.c: 242:     _delay((unsigned long)((100)*(64000000/4000.0)));
 11192   00457A  0E09               	movlw	9
 11193   00457C  6E23               	movwf	(??_turnLeft_90+1)^0,c
 11194   00457E  0E1E               	movlw	30
 11195   004580  6E22               	movwf	??_turnLeft_90^0,c
 11196   004582  0EE4               	movlw	228
 11197   004584                     u7587:
 11198   004584  2EE8               	decfsz	wreg,f,c
 11199   004586  D7FE               	bra	u7587
 11200   004588  2E22               	decfsz	??_turnLeft_90^0,f,c
 11201   00458A  D7FC               	bra	u7587
 11202   00458C  2E23               	decfsz	(??_turnLeft_90+1)^0,f,c
 11203   00458E  D7FA               	bra	u7587
 11204   004590  D000               	nop2	
 11205   004592                     
 11206                           ;MazeRobot.X/dc_motor.c: 244:     reverse(mL, mR);
 11207   004592  C01E  F018         	movff	turnLeft_90@mL,reverse@mL
 11208   004596  C01F  F019         	movff	turnLeft_90@mL+1,reverse@mL+1
 11209   00459A  C020  F01A         	movff	turnLeft_90@mR,reverse@mR
 11210   00459E  C021  F01B         	movff	turnLeft_90@mR+1,reverse@mR+1
 11211   0045A2  ECC3  F026         	call	_reverse	;wreg free
 11212                           
 11213                           ;MazeRobot.X/dc_motor.c: 245:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
 11214   0045A6  0E11               	movlw	17
 11215   0045A8  6E23               	movwf	(??_turnLeft_90+1)^0,c
 11216   0045AA  0E3C               	movlw	60
 11217   0045AC  6E22               	movwf	??_turnLeft_90^0,c
 11218   0045AE  0ECB               	movlw	203
 11219   0045B0                     u7597:
 11220   0045B0  2EE8               	decfsz	wreg,f,c
 11221   0045B2  D7FE               	bra	u7597
 11222   0045B4  2E22               	decfsz	??_turnLeft_90^0,f,c
 11223   0045B6  D7FC               	bra	u7597
 11224   0045B8  2E23               	decfsz	(??_turnLeft_90+1)^0,f,c
 11225   0045BA  D7FA               	bra	u7597
 11226   0045BC  F000               	nop	
 11227   0045BE                     
 11228                           ;MazeRobot.X/dc_motor.c: 247:     stop(mL, mR);
 11229   0045BE  C01E  F018         	movff	turnLeft_90@mL,stop@mL
 11230   0045C2  C01F  F019         	movff	turnLeft_90@mL+1,stop@mL+1
 11231   0045C6  C020  F01A         	movff	turnLeft_90@mR,stop@mR
 11232   0045CA  C021  F01B         	movff	turnLeft_90@mR+1,stop@mR+1
 11233   0045CE  ECFC  F027         	call	_stop	;wreg free
 11234   0045D2                     
 11235                           ;MazeRobot.X/dc_motor.c: 249:     mL->direction = 0;
 11236   0045D2  EE20 F001          	lfsr	2,1
 11237   0045D6  501E               	movf	turnLeft_90@mL^0,w,c
 11238   0045D8  26D9               	addwf	fsr2l,f,c
 11239   0045DA  501F               	movf	(turnLeft_90@mL+1)^0,w,c
 11240   0045DC  22DA               	addwfc	fsr2h,f,c
 11241   0045DE  0E00               	movlw	0
 11242   0045E0  6EDF               	movwf	indf2,c
 11243   0045E2                     
 11244                           ;MazeRobot.X/dc_motor.c: 250:     mR->direction = 1;
 11245   0045E2  EE20 F001          	lfsr	2,1
 11246   0045E6  5020               	movf	turnLeft_90@mR^0,w,c
 11247   0045E8  26D9               	addwf	fsr2l,f,c
 11248   0045EA  5021               	movf	(turnLeft_90@mR+1)^0,w,c
 11249   0045EC  22DA               	addwfc	fsr2h,f,c
 11250   0045EE  0E01               	movlw	1
 11251   0045F0  6EDF               	movwf	indf2,c
 11252   0045F2                     
 11253                           ;MazeRobot.X/dc_motor.c: 252:     mL->brakemode = 1;
 11254   0045F2  EE20 F002          	lfsr	2,2
 11255   0045F6  501E               	movf	turnLeft_90@mL^0,w,c
 11256   0045F8  26D9               	addwf	fsr2l,f,c
 11257   0045FA  501F               	movf	(turnLeft_90@mL+1)^0,w,c
 11258   0045FC  22DA               	addwfc	fsr2h,f,c
 11259   0045FE  0E01               	movlw	1
 11260   004600  6EDF               	movwf	indf2,c
 11261   004602                     
 11262                           ;MazeRobot.X/dc_motor.c: 253:     mL->brakemode = 1;
 11263   004602  EE20 F002          	lfsr	2,2
 11264   004606  501E               	movf	turnLeft_90@mL^0,w,c
 11265   004608  26D9               	addwf	fsr2l,f,c
 11266   00460A  501F               	movf	(turnLeft_90@mL+1)^0,w,c
 11267   00460C  22DA               	addwfc	fsr2h,f,c
 11268   00460E  0E01               	movlw	1
 11269   004610  6EDF               	movwf	indf2,c
 11270                           
 11271                           ;MazeRobot.X/dc_motor.c: 255:     while((mL->power < 80) || (mR->power < 80)){
 11272   004612  EF23  F023         	goto	l4831
 11273   004616                     l4825:
 11274                           
 11275                           ;MazeRobot.X/dc_motor.c: 256:         mL->power += 10;
 11276   004616  C01E  FFD9         	movff	turnLeft_90@mL,fsr2l
 11277   00461A  C01F  FFDA         	movff	turnLeft_90@mL+1,fsr2h
 11278   00461E  0E0A               	movlw	10
 11279   004620  26DF               	addwf	indf2,f,c
 11280                           
 11281                           ;MazeRobot.X/dc_motor.c: 257:         mR->power += 10;
 11282   004622  C020  FFD9         	movff	turnLeft_90@mR,fsr2l
 11283   004626  C021  FFDA         	movff	turnLeft_90@mR+1,fsr2h
 11284   00462A  0E0A               	movlw	10
 11285   00462C  26DF               	addwf	indf2,f,c
 11286   00462E                     
 11287                           ;MazeRobot.X/dc_motor.c: 258:         setMotorPWM(mL);
 11288   00462E  C01E  F012         	movff	turnLeft_90@mL,setMotorPWM@m
 11289   004632  C01F  F013         	movff	turnLeft_90@mL+1,setMotorPWM@m+1
 11290   004636  EC6E  F01F         	call	_setMotorPWM	;wreg free
 11291   00463A                     
 11292                           ;MazeRobot.X/dc_motor.c: 259:         setMotorPWM(mR);
 11293   00463A  C020  F012         	movff	turnLeft_90@mR,setMotorPWM@m
 11294   00463E  C021  F013         	movff	turnLeft_90@mR+1,setMotorPWM@m+1
 11295   004642  EC6E  F01F         	call	_setMotorPWM	;wreg free
 11296   004646                     l4831:
 11297                           
 11298                           ;MazeRobot.X/dc_motor.c: 255:     while((mL->power < 80) || (mR->power < 80)){
 11299   004646  C01E  FFD9         	movff	turnLeft_90@mL,fsr2l
 11300   00464A  C01F  FFDA         	movff	turnLeft_90@mL+1,fsr2h
 11301   00464E  0E4F               	movlw	79
 11302   004650  64DF               	cpfsgt	indf2,c
 11303   004652  EF2D  F023         	goto	u5161
 11304   004656  EF2F  F023         	goto	u5160
 11305   00465A                     u5161:
 11306   00465A  EF0B  F023         	goto	l4825
 11307   00465E                     u5160:
 11308   00465E  C020  FFD9         	movff	turnLeft_90@mR,fsr2l
 11309   004662  C021  FFDA         	movff	turnLeft_90@mR+1,fsr2h
 11310   004666  0E4F               	movlw	79
 11311   004668  64DF               	cpfsgt	indf2,c
 11312   00466A  EF39  F023         	goto	u5171
 11313   00466E  EF3B  F023         	goto	u5170
 11314   004672                     u5171:
 11315   004672  EF0B  F023         	goto	l4825
 11316   004676                     u5170:
 11317   004676                     
 11318                           ;MazeRobot.X/dc_motor.c: 261:    _delay((unsigned long)((2*turning_time45)*(64000000/400
      +                          0.0)));
 11319   004676  0E21               	movlw	33
 11320   004678  6E23               	movwf	(??_turnLeft_90+1)^0,c
 11321   00467A  0E78               	movlw	120
 11322   00467C  6E22               	movwf	??_turnLeft_90^0,c
 11323   00467E  0E98               	movlw	152
 11324   004680                     u7607:
 11325   004680  2EE8               	decfsz	wreg,f,c
 11326   004682  D7FE               	bra	u7607
 11327   004684  2E22               	decfsz	??_turnLeft_90^0,f,c
 11328   004686  D7FC               	bra	u7607
 11329   004688  2E23               	decfsz	(??_turnLeft_90+1)^0,f,c
 11330   00468A  D7FA               	bra	u7607
 11331   00468C  D000               	nop2	
 11332   00468E                     
 11333                           ;MazeRobot.X/dc_motor.c: 262:     stop(mL, mR);
 11334   00468E  C01E  F018         	movff	turnLeft_90@mL,stop@mL
 11335   004692  C01F  F019         	movff	turnLeft_90@mL+1,stop@mL+1
 11336   004696  C020  F01A         	movff	turnLeft_90@mR,stop@mR
 11337   00469A  C021  F01B         	movff	turnLeft_90@mR+1,stop@mR+1
 11338   00469E  ECFC  F027         	call	_stop	;wreg free
 11339   0046A2  0012               	return		;funcret
 11340   0046A4                     __end_of_turnLeft_90:
 11341                           	callstack 0
 11342                           
 11343 ;; *************** function _stop *****************
 11344 ;; Defined at:
 11345 ;;		line 115 in file "MazeRobot.X/dc_motor.c"
 11346 ;; Parameters:    Size  Location     Type
 11347 ;;  mL              2   23[COMRAM] PTR struct DC_motor
 11348 ;;		 -> main@motorLeft(9), 
 11349 ;;  mR              2   25[COMRAM] PTR struct DC_motor
 11350 ;;		 -> main@motorRight(9), 
 11351 ;; Auto vars:     Size  Location     Type
 11352 ;;		None
 11353 ;; Return value:  Size  Location     Type
 11354 ;;                  1    wreg      void 
 11355 ;; Registers used:
 11356 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11357 ;; Tracked objects:
 11358 ;;		On entry : 0/0
 11359 ;;		On exit  : 0/0
 11360 ;;		Unchanged: 0/0
 11361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11362 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11363 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11364 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11365 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11366 ;;Total ram usage:        6 bytes
 11367 ;; Hardware stack levels used: 1
 11368 ;; Hardware stack levels required when called: 4
 11369 ;; This function calls:
 11370 ;;		_setMotorPWM
 11371 ;; This function is called by:
 11372 ;;		_turnLeft_90
 11373 ;;		_turnRight_90
 11374 ;;		_turn_180
 11375 ;;		_turnRight_135
 11376 ;;		_turnLeft_135
 11377 ;;		_reverseSquareRight
 11378 ;;		_reverseSquareLeft
 11379 ;;		_main
 11380 ;;		_turnLeft
 11381 ;;		_turnRight
 11382 ;; This function uses a non-reentrant model
 11383 ;;
 11384                           
 11385                           	psect	text43
 11386   004FF8                     __ptext43:
 11387                           	callstack 0
 11388   004FF8                     _stop:
 11389                           	callstack 26
 11390   004FF8                     
 11391                           ;MazeRobot.X/dc_motor.c: 117:     while ((mL->power)>0 && (mR->power)>0){
 11392   004FF8  EF2E  F028         	goto	l4651
 11393   004FFC                     l4639:
 11394                           
 11395                           ;MazeRobot.X/dc_motor.c: 118:         if ((mL->power) >0){
 11396   004FFC  C018  FFD9         	movff	stop@mL,fsr2l
 11397   005000  C019  FFDA         	movff	stop@mL+1,fsr2h
 11398   005004  50DF               	movf	indf2,w,c
 11399   005006  B4D8               	btfsc	status,2,c
 11400   005008  EF08  F028         	goto	u5021
 11401   00500C  EF0A  F028         	goto	u5020
 11402   005010                     u5021:
 11403   005010  EF10  F028         	goto	l4643
 11404   005014                     u5020:
 11405   005014                     
 11406                           ;MazeRobot.X/dc_motor.c: 119:             mL->power -= 5;
 11407   005014  C018  FFD9         	movff	stop@mL,fsr2l
 11408   005018  C019  FFDA         	movff	stop@mL+1,fsr2h
 11409   00501C  0E05               	movlw	5
 11410   00501E  5EDF               	subwf	indf2,f,c
 11411   005020                     l4643:
 11412                           
 11413                           ;MazeRobot.X/dc_motor.c: 121:         if ((mR->power) >0){
 11414   005020  C01A  FFD9         	movff	stop@mR,fsr2l
 11415   005024  C01B  FFDA         	movff	stop@mR+1,fsr2h
 11416   005028  50DF               	movf	indf2,w,c
 11417   00502A  B4D8               	btfsc	status,2,c
 11418   00502C  EF1A  F028         	goto	u5031
 11419   005030  EF1C  F028         	goto	u5030
 11420   005034                     u5031:
 11421   005034  EF22  F028         	goto	l4647
 11422   005038                     u5030:
 11423   005038                     
 11424                           ;MazeRobot.X/dc_motor.c: 122:             mR->power -= 5;
 11425   005038  C01A  FFD9         	movff	stop@mR,fsr2l
 11426   00503C  C01B  FFDA         	movff	stop@mR+1,fsr2h
 11427   005040  0E05               	movlw	5
 11428   005042  5EDF               	subwf	indf2,f,c
 11429   005044                     l4647:
 11430                           
 11431                           ;MazeRobot.X/dc_motor.c: 125:         setMotorPWM(mL);
 11432   005044  C018  F012         	movff	stop@mL,setMotorPWM@m
 11433   005048  C019  F013         	movff	stop@mL+1,setMotorPWM@m+1
 11434   00504C  EC6E  F01F         	call	_setMotorPWM	;wreg free
 11435   005050                     
 11436                           ;MazeRobot.X/dc_motor.c: 126:         setMotorPWM(mR);
 11437   005050  C01A  F012         	movff	stop@mR,setMotorPWM@m
 11438   005054  C01B  F013         	movff	stop@mR+1,setMotorPWM@m+1
 11439   005058  EC6E  F01F         	call	_setMotorPWM	;wreg free
 11440   00505C                     l4651:
 11441                           
 11442                           ;MazeRobot.X/dc_motor.c: 117:     while ((mL->power)>0 && (mR->power)>0){
 11443   00505C  C018  FFD9         	movff	stop@mL,fsr2l
 11444   005060  C019  FFDA         	movff	stop@mL+1,fsr2h
 11445   005064  50DF               	movf	indf2,w,c
 11446   005066  B4D8               	btfsc	status,2,c
 11447   005068  EF38  F028         	goto	u5041
 11448   00506C  EF3A  F028         	goto	u5040
 11449   005070                     u5041:
 11450   005070  EF46  F028         	goto	l4655
 11451   005074                     u5040:
 11452   005074  C01A  FFD9         	movff	stop@mR,fsr2l
 11453   005078  C01B  FFDA         	movff	stop@mR+1,fsr2h
 11454   00507C  50DF               	movf	indf2,w,c
 11455   00507E  A4D8               	btfss	status,2,c
 11456   005080  EF44  F028         	goto	u5051
 11457   005084  EF46  F028         	goto	u5050
 11458   005088                     u5051:
 11459   005088  EFFE  F027         	goto	l4639
 11460   00508C                     u5050:
 11461   00508C                     l4655:
 11462                           
 11463                           ;MazeRobot.X/dc_motor.c: 128:     _delay((unsigned long)((100)*(64000000/4000.0)));
 11464   00508C  0E09               	movlw	9
 11465   00508E  6E1D               	movwf	(??_stop+1)^0,c
 11466   005090  0E1E               	movlw	30
 11467   005092  6E1C               	movwf	??_stop^0,c
 11468   005094  0EE4               	movlw	228
 11469   005096                     u7617:
 11470   005096  2EE8               	decfsz	wreg,f,c
 11471   005098  D7FE               	bra	u7617
 11472   00509A  2E1C               	decfsz	??_stop^0,f,c
 11473   00509C  D7FC               	bra	u7617
 11474   00509E  2E1D               	decfsz	(??_stop+1)^0,f,c
 11475   0050A0  D7FA               	bra	u7617
 11476   0050A2  D000               	nop2	
 11477   0050A4  0012               	return		;funcret
 11478   0050A6                     __end_of_stop:
 11479                           	callstack 0
 11480                           
 11481 ;; *************** function _reverse *****************
 11482 ;; Defined at:
 11483 ;;		line 155 in file "MazeRobot.X/dc_motor.c"
 11484 ;; Parameters:    Size  Location     Type
 11485 ;;  mL              2   23[COMRAM] PTR struct DC_motor
 11486 ;;		 -> main@motorLeft(9), 
 11487 ;;  mR              2   25[COMRAM] PTR struct DC_motor
 11488 ;;		 -> main@motorRight(9), 
 11489 ;; Auto vars:     Size  Location     Type
 11490 ;;		None
 11491 ;; Return value:  Size  Location     Type
 11492 ;;                  1    wreg      void 
 11493 ;; Registers used:
 11494 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11495 ;; Tracked objects:
 11496 ;;		On entry : 0/0
 11497 ;;		On exit  : 0/0
 11498 ;;		Unchanged: 0/0
 11499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11500 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11501 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11502 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11503 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11504 ;;Total ram usage:        5 bytes
 11505 ;; Hardware stack levels used: 1
 11506 ;; Hardware stack levels required when called: 4
 11507 ;; This function calls:
 11508 ;;		_setMotorPWM
 11509 ;; This function is called by:
 11510 ;;		_turnLeft_90
 11511 ;;		_turnRight_90
 11512 ;;		_turn_180
 11513 ;;		_turnRight_135
 11514 ;;		_turnLeft_135
 11515 ;;		_reverseSquareRight
 11516 ;;		_reverseSquareLeft
 11517 ;;		_turnLeft
 11518 ;;		_turnRight
 11519 ;; This function uses a non-reentrant model
 11520 ;;
 11521                           
 11522                           	psect	text44
 11523   004D86                     __ptext44:
 11524                           	callstack 0
 11525   004D86                     _reverse:
 11526                           	callstack 24
 11527   004D86                     
 11528                           ;MazeRobot.X/dc_motor.c: 155: void reverse(DC_motor *mL, DC_motor *mR);MazeRobot.X/dc_mo
      +                          tor.c: 156: {;MazeRobot.X/dc_motor.c: 157:     mL->direction = 0;
 11529   004D86  EE20 F001          	lfsr	2,1
 11530   004D8A  5018               	movf	reverse@mL^0,w,c
 11531   004D8C  26D9               	addwf	fsr2l,f,c
 11532   004D8E  5019               	movf	(reverse@mL+1)^0,w,c
 11533   004D90  22DA               	addwfc	fsr2h,f,c
 11534   004D92  0E00               	movlw	0
 11535   004D94  6EDF               	movwf	indf2,c
 11536                           
 11537                           ;MazeRobot.X/dc_motor.c: 158:     mR->direction = 0;
 11538   004D96  EE20 F001          	lfsr	2,1
 11539   004D9A  501A               	movf	reverse@mR^0,w,c
 11540   004D9C  26D9               	addwf	fsr2l,f,c
 11541   004D9E  501B               	movf	(reverse@mR+1)^0,w,c
 11542   004DA0  22DA               	addwfc	fsr2h,f,c
 11543   004DA2  0E00               	movlw	0
 11544   004DA4  6EDF               	movwf	indf2,c
 11545                           
 11546                           ;MazeRobot.X/dc_motor.c: 160:     mL->brakemode = 1;
 11547   004DA6  EE20 F002          	lfsr	2,2
 11548   004DAA  5018               	movf	reverse@mL^0,w,c
 11549   004DAC  26D9               	addwf	fsr2l,f,c
 11550   004DAE  5019               	movf	(reverse@mL+1)^0,w,c
 11551   004DB0  22DA               	addwfc	fsr2h,f,c
 11552   004DB2  0E01               	movlw	1
 11553   004DB4  6EDF               	movwf	indf2,c
 11554                           
 11555                           ;MazeRobot.X/dc_motor.c: 161:     mL->brakemode = 1;
 11556   004DB6  EE20 F002          	lfsr	2,2
 11557   004DBA  5018               	movf	reverse@mL^0,w,c
 11558   004DBC  26D9               	addwf	fsr2l,f,c
 11559   004DBE  5019               	movf	(reverse@mL+1)^0,w,c
 11560   004DC0  22DA               	addwfc	fsr2h,f,c
 11561   004DC2  0E01               	movlw	1
 11562   004DC4  6EDF               	movwf	indf2,c
 11563                           
 11564                           ;MazeRobot.X/dc_motor.c: 163:     while ((mL->power)<25 && (mR->power)<25){
 11565   004DC6  EF09  F027         	goto	l4667
 11566   004DCA                     l4659:
 11567                           
 11568                           ;MazeRobot.X/dc_motor.c: 164:         if ((mL->power) < 25){
 11569   004DCA  C018  FFD9         	movff	reverse@mL,fsr2l
 11570   004DCE  C019  FFDA         	movff	reverse@mL+1,fsr2h
 11571   004DD2  0E19               	movlw	25
 11572   004DD4  60DF               	cpfslt	indf2,c
 11573   004DD6  EFEF  F026         	goto	u5061
 11574   004DDA  EFF1  F026         	goto	u5060
 11575   004DDE                     u5061:
 11576   004DDE  EFF7  F026         	goto	l4663
 11577   004DE2                     u5060:
 11578   004DE2                     
 11579                           ;MazeRobot.X/dc_motor.c: 165:             mL->power += 5;
 11580   004DE2  C018  FFD9         	movff	reverse@mL,fsr2l
 11581   004DE6  C019  FFDA         	movff	reverse@mL+1,fsr2h
 11582   004DEA  0E05               	movlw	5
 11583   004DEC  26DF               	addwf	indf2,f,c
 11584   004DEE                     l4663:
 11585                           
 11586                           ;MazeRobot.X/dc_motor.c: 167:         if ((mR->power) <25){
 11587   004DEE  C01A  FFD9         	movff	reverse@mR,fsr2l
 11588   004DF2  C01B  FFDA         	movff	reverse@mR+1,fsr2h
 11589   004DF6  0E19               	movlw	25
 11590   004DF8  60DF               	cpfslt	indf2,c
 11591   004DFA  EF01  F027         	goto	u5071
 11592   004DFE  EF03  F027         	goto	u5070
 11593   004E02                     u5071:
 11594   004E02  EF09  F027         	goto	l4667
 11595   004E06                     u5070:
 11596   004E06                     
 11597                           ;MazeRobot.X/dc_motor.c: 168:             mR->power += 5;
 11598   004E06  C01A  FFD9         	movff	reverse@mR,fsr2l
 11599   004E0A  C01B  FFDA         	movff	reverse@mR+1,fsr2h
 11600   004E0E  0E05               	movlw	5
 11601   004E10  26DF               	addwf	indf2,f,c
 11602   004E12                     l4667:
 11603                           
 11604                           ;MazeRobot.X/dc_motor.c: 163:     while ((mL->power)<25 && (mR->power)<25){
 11605   004E12  C018  FFD9         	movff	reverse@mL,fsr2l
 11606   004E16  C019  FFDA         	movff	reverse@mL+1,fsr2h
 11607   004E1A  0E19               	movlw	25
 11608   004E1C  60DF               	cpfslt	indf2,c
 11609   004E1E  EF13  F027         	goto	u5081
 11610   004E22  EF15  F027         	goto	u5080
 11611   004E26                     u5081:
 11612   004E26  EF21  F027         	goto	l4671
 11613   004E2A                     u5080:
 11614   004E2A  C01A  FFD9         	movff	reverse@mR,fsr2l
 11615   004E2E  C01B  FFDA         	movff	reverse@mR+1,fsr2h
 11616   004E32  0E18               	movlw	24
 11617   004E34  64DF               	cpfsgt	indf2,c
 11618   004E36  EF1F  F027         	goto	u5091
 11619   004E3A  EF21  F027         	goto	u5090
 11620   004E3E                     u5091:
 11621   004E3E  EFE5  F026         	goto	l4659
 11622   004E42                     u5090:
 11623   004E42                     l4671:
 11624                           
 11625                           ;MazeRobot.X/dc_motor.c: 172:     setMotorPWM(mL);
 11626   004E42  C018  F012         	movff	reverse@mL,setMotorPWM@m
 11627   004E46  C019  F013         	movff	reverse@mL+1,setMotorPWM@m+1
 11628   004E4A  EC6E  F01F         	call	_setMotorPWM	;wreg free
 11629                           
 11630                           ;MazeRobot.X/dc_motor.c: 173:     setMotorPWM(mR);
 11631   004E4E  C01A  F012         	movff	reverse@mR,setMotorPWM@m
 11632   004E52  C01B  F013         	movff	reverse@mR+1,setMotorPWM@m+1
 11633   004E56  EC6E  F01F         	call	_setMotorPWM	;wreg free
 11634   004E5A  0012               	return		;funcret
 11635   004E5C                     __end_of_reverse:
 11636                           	callstack 0
 11637                           
 11638 ;; *************** function _setMotorPWM *****************
 11639 ;; Defined at:
 11640 ;;		line 92 in file "MazeRobot.X/dc_motor.c"
 11641 ;; Parameters:    Size  Location     Type
 11642 ;;  m               2   17[COMRAM] PTR struct DC_motor
 11643 ;;		 -> main@motorRight(9), main@motorLeft(9), 
 11644 ;; Auto vars:     Size  Location     Type
 11645 ;;  negDuty         1   22[COMRAM] unsigned char 
 11646 ;;  posDuty         1   21[COMRAM] unsigned char 
 11647 ;; Return value:  Size  Location     Type
 11648 ;;                  1    wreg      void 
 11649 ;; Registers used:
 11650 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11651 ;; Tracked objects:
 11652 ;;		On entry : 0/0
 11653 ;;		On exit  : 0/0
 11654 ;;		Unchanged: 0/0
 11655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11656 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11657 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11658 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11659 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11660 ;;Total ram usage:        6 bytes
 11661 ;; Hardware stack levels used: 1
 11662 ;; Hardware stack levels required when called: 3
 11663 ;; This function calls:
 11664 ;;		___lwdiv
 11665 ;;		___wmul
 11666 ;; This function is called by:
 11667 ;;		_stop
 11668 ;;		_forward
 11669 ;;		_reverse
 11670 ;;		_turnLeft_90
 11671 ;;		_turnRight_90
 11672 ;;		_turn_180
 11673 ;;		_turnRight_135
 11674 ;;		_turnLeft_135
 11675 ;;		_turnLeft
 11676 ;;		_turnRight
 11677 ;; This function uses a non-reentrant model
 11678 ;;
 11679                           
 11680                           	psect	text45
 11681   003EDC                     __ptext45:
 11682                           	callstack 0
 11683   003EDC                     _setMotorPWM:
 11684                           	callstack 26
 11685   003EDC                     
 11686                           ;MazeRobot.X/dc_motor.c: 92: void setMotorPWM(DC_motor *m);MazeRobot.X/dc_motor.c: 93: {
      +                          ;MazeRobot.X/dc_motor.c: 94:     unsigned char posDuty, negDuty;;MazeRobot.X/dc_motor.c:
      +                           96:     if(m->brakemode) {
 11687   003EDC  EE20 F002          	lfsr	2,2
 11688   003EE0  5012               	movf	setMotorPWM@m^0,w,c
 11689   003EE2  26D9               	addwf	fsr2l,f,c
 11690   003EE4  5013               	movf	(setMotorPWM@m+1)^0,w,c
 11691   003EE6  22DA               	addwfc	fsr2h,f,c
 11692   003EE8  50DF               	movf	indf2,w,c
 11693   003EEA  B4D8               	btfsc	status,2,c
 11694   003EEC  EF7A  F01F         	goto	u4541
 11695   003EF0  EF7C  F01F         	goto	u4540
 11696   003EF4                     u4541:
 11697   003EF4  EFB0  F01F         	goto	l4319
 11698   003EF8                     u4540:
 11699   003EF8                     
 11700                           ;MazeRobot.X/dc_motor.c: 97:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m
      +                          ->PWMperiod))/100;
 11701   003EF8  C012  FFD9         	movff	setMotorPWM@m,fsr2l
 11702   003EFC  C013  FFDA         	movff	setMotorPWM@m+1,fsr2h
 11703   003F00  50DF               	movf	indf2,w,c
 11704   003F02  6E14               	movwf	??_setMotorPWM^0,c
 11705   003F04  5014               	movf	??_setMotorPWM^0,w,c
 11706   003F06  6E05               	movwf	___wmul@multiplier^0,c
 11707   003F08  6A06               	clrf	(___wmul@multiplier+1)^0,c
 11708   003F0A  EE20 F003          	lfsr	2,3
 11709   003F0E  5012               	movf	setMotorPWM@m^0,w,c
 11710   003F10  26D9               	addwf	fsr2l,f,c
 11711   003F12  5013               	movf	(setMotorPWM@m+1)^0,w,c
 11712   003F14  22DA               	addwfc	fsr2h,f,c
 11713   003F16  CFDE F007          	movff	postinc2,___wmul@multiplicand
 11714   003F1A  CFDD F008          	movff	postdec2,___wmul@multiplicand+1
 11715   003F1E  EC08  F02D         	call	___wmul	;wreg free
 11716   003F22  C005  F00B         	movff	?___wmul,___lwdiv@dividend
 11717   003F26  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
 11718   003F2A  0E00               	movlw	0
 11719   003F2C  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
 11720   003F2E  0E64               	movlw	100
 11721   003F30  6E0D               	movwf	___lwdiv@divisor^0,c
 11722   003F32  ECAF  F029         	call	___lwdiv	;wreg free
 11723   003F36  EE20 F003          	lfsr	2,3
 11724   003F3A  5012               	movf	setMotorPWM@m^0,w,c
 11725   003F3C  26D9               	addwf	fsr2l,f,c
 11726   003F3E  5013               	movf	(setMotorPWM@m+1)^0,w,c
 11727   003F40  22DA               	addwfc	fsr2h,f,c
 11728   003F42  50DF               	movf	indf2,w,c
 11729   003F44  6E15               	movwf	(??_setMotorPWM+1)^0,c
 11730   003F46  500B               	movf	?___lwdiv^0,w,c
 11731   003F48  5C15               	subwf	(??_setMotorPWM+1)^0,w,c
 11732   003F4A  6E16               	movwf	setMotorPWM@posDuty^0,c
 11733   003F4C                     
 11734                           ;MazeRobot.X/dc_motor.c: 98:         negDuty=m->PWMperiod;
 11735   003F4C  EE20 F003          	lfsr	2,3
 11736   003F50  5012               	movf	setMotorPWM@m^0,w,c
 11737   003F52  26D9               	addwf	fsr2l,f,c
 11738   003F54  5013               	movf	(setMotorPWM@m+1)^0,w,c
 11739   003F56  22DA               	addwfc	fsr2h,f,c
 11740   003F58  50DF               	movf	indf2,w,c
 11741   003F5A  6E17               	movwf	setMotorPWM@negDuty^0,c
 11742                           
 11743                           ;MazeRobot.X/dc_motor.c: 99:     }
 11744   003F5C  EFD3  F01F         	goto	l4323
 11745   003F60                     l4319:
 11746                           
 11747                           ;MazeRobot.X/dc_motor.c: 101:         posDuty=0;
 11748   003F60  0E00               	movlw	0
 11749   003F62  6E16               	movwf	setMotorPWM@posDuty^0,c
 11750   003F64                     
 11751                           ;MazeRobot.X/dc_motor.c: 102:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
 11752   003F64  C012  FFD9         	movff	setMotorPWM@m,fsr2l
 11753   003F68  C013  FFDA         	movff	setMotorPWM@m+1,fsr2h
 11754   003F6C  50DF               	movf	indf2,w,c
 11755   003F6E  6E14               	movwf	??_setMotorPWM^0,c
 11756   003F70  5014               	movf	??_setMotorPWM^0,w,c
 11757   003F72  6E05               	movwf	___wmul@multiplier^0,c
 11758   003F74  6A06               	clrf	(___wmul@multiplier+1)^0,c
 11759   003F76  EE20 F003          	lfsr	2,3
 11760   003F7A  5012               	movf	setMotorPWM@m^0,w,c
 11761   003F7C  26D9               	addwf	fsr2l,f,c
 11762   003F7E  5013               	movf	(setMotorPWM@m+1)^0,w,c
 11763   003F80  22DA               	addwfc	fsr2h,f,c
 11764   003F82  CFDE F007          	movff	postinc2,___wmul@multiplicand
 11765   003F86  CFDD F008          	movff	postdec2,___wmul@multiplicand+1
 11766   003F8A  EC08  F02D         	call	___wmul	;wreg free
 11767   003F8E  C005  F00B         	movff	?___wmul,___lwdiv@dividend
 11768   003F92  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
 11769   003F96  0E00               	movlw	0
 11770   003F98  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
 11771   003F9A  0E64               	movlw	100
 11772   003F9C  6E0D               	movwf	___lwdiv@divisor^0,c
 11773   003F9E  ECAF  F029         	call	___lwdiv	;wreg free
 11774   003FA2  500B               	movf	?___lwdiv^0,w,c
 11775   003FA4  6E17               	movwf	setMotorPWM@negDuty^0,c
 11776   003FA6                     l4323:
 11777                           
 11778                           ;MazeRobot.X/dc_motor.c: 105:     if (m->direction) {
 11779   003FA6  EE20 F001          	lfsr	2,1
 11780   003FAA  5012               	movf	setMotorPWM@m^0,w,c
 11781   003FAC  26D9               	addwf	fsr2l,f,c
 11782   003FAE  5013               	movf	(setMotorPWM@m+1)^0,w,c
 11783   003FB0  22DA               	addwfc	fsr2h,f,c
 11784   003FB2  50DF               	movf	indf2,w,c
 11785   003FB4  B4D8               	btfsc	status,2,c
 11786   003FB6  EFDF  F01F         	goto	u4551
 11787   003FBA  EFE1  F01F         	goto	u4550
 11788   003FBE                     u4551:
 11789   003FBE  EF03  F020         	goto	l4327
 11790   003FC2                     u4550:
 11791   003FC2                     
 11792                           ;MazeRobot.X/dc_motor.c: 106:         *(m->posDutyHighByte)=posDuty;
 11793   003FC2  EE20 F005          	lfsr	2,5
 11794   003FC6  5012               	movf	setMotorPWM@m^0,w,c
 11795   003FC8  26D9               	addwf	fsr2l,f,c
 11796   003FCA  5013               	movf	(setMotorPWM@m+1)^0,w,c
 11797   003FCC  22DA               	addwfc	fsr2h,f,c
 11798   003FCE  CFDE F014          	movff	postinc2,??_setMotorPWM
 11799   003FD2  CFDD F015          	movff	postdec2,??_setMotorPWM+1
 11800   003FD6  C014  FFD9         	movff	??_setMotorPWM,fsr2l
 11801   003FDA  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
 11802   003FDE  C016  FFDF         	movff	setMotorPWM@posDuty,indf2
 11803                           
 11804                           ;MazeRobot.X/dc_motor.c: 107:         *(m->negDutyHighByte)=negDuty;
 11805   003FE2  EE20 F007          	lfsr	2,7
 11806   003FE6  5012               	movf	setMotorPWM@m^0,w,c
 11807   003FE8  26D9               	addwf	fsr2l,f,c
 11808   003FEA  5013               	movf	(setMotorPWM@m+1)^0,w,c
 11809   003FEC  22DA               	addwfc	fsr2h,f,c
 11810   003FEE  CFDE F014          	movff	postinc2,??_setMotorPWM
 11811   003FF2  CFDD F015          	movff	postdec2,??_setMotorPWM+1
 11812   003FF6  C014  FFD9         	movff	??_setMotorPWM,fsr2l
 11813   003FFA  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
 11814   003FFE  C017  FFDF         	movff	setMotorPWM@negDuty,indf2
 11815                           
 11816                           ;MazeRobot.X/dc_motor.c: 108:     } else {
 11817   004002  EF23  F020         	goto	l174
 11818   004006                     l4327:
 11819                           
 11820                           ;MazeRobot.X/dc_motor.c: 109:         *(m->posDutyHighByte)=negDuty;
 11821   004006  EE20 F005          	lfsr	2,5
 11822   00400A  5012               	movf	setMotorPWM@m^0,w,c
 11823   00400C  26D9               	addwf	fsr2l,f,c
 11824   00400E  5013               	movf	(setMotorPWM@m+1)^0,w,c
 11825   004010  22DA               	addwfc	fsr2h,f,c
 11826   004012  CFDE F014          	movff	postinc2,??_setMotorPWM
 11827   004016  CFDD F015          	movff	postdec2,??_setMotorPWM+1
 11828   00401A  C014  FFD9         	movff	??_setMotorPWM,fsr2l
 11829   00401E  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
 11830   004022  C017  FFDF         	movff	setMotorPWM@negDuty,indf2
 11831                           
 11832                           ;MazeRobot.X/dc_motor.c: 110:         *(m->negDutyHighByte)=posDuty;
 11833   004026  EE20 F007          	lfsr	2,7
 11834   00402A  5012               	movf	setMotorPWM@m^0,w,c
 11835   00402C  26D9               	addwf	fsr2l,f,c
 11836   00402E  5013               	movf	(setMotorPWM@m+1)^0,w,c
 11837   004030  22DA               	addwfc	fsr2h,f,c
 11838   004032  CFDE F014          	movff	postinc2,??_setMotorPWM
 11839   004036  CFDD F015          	movff	postdec2,??_setMotorPWM+1
 11840   00403A  C014  FFD9         	movff	??_setMotorPWM,fsr2l
 11841   00403E  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
 11842   004042  C016  FFDF         	movff	setMotorPWM@posDuty,indf2
 11843   004046                     l174:
 11844   004046  0012               	return		;funcret
 11845   004048                     __end_of_setMotorPWM:
 11846                           	callstack 0
 11847                           
 11848 ;; *************** function ___wmul *****************
 11849 ;; Defined at:
 11850 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
 11851 ;; Parameters:    Size  Location     Type
 11852 ;;  multiplier      2    4[COMRAM] unsigned int 
 11853 ;;  multiplicand    2    6[COMRAM] unsigned int 
 11854 ;; Auto vars:     Size  Location     Type
 11855 ;;  product         2    8[COMRAM] unsigned int 
 11856 ;; Return value:  Size  Location     Type
 11857 ;;                  2    4[COMRAM] unsigned int 
 11858 ;; Registers used:
 11859 ;;		wreg, status,2, status,0, prodl, prodh
 11860 ;; Tracked objects:
 11861 ;;		On entry : 0/0
 11862 ;;		On exit  : 0/0
 11863 ;;		Unchanged: 0/0
 11864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11865 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11866 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11868 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11869 ;;Total ram usage:        6 bytes
 11870 ;; Hardware stack levels used: 1
 11871 ;; Hardware stack levels required when called: 2
 11872 ;; This function calls:
 11873 ;;		Nothing
 11874 ;; This function is called by:
 11875 ;;		_setMotorPWM
 11876 ;;		_turnLeft_135
 11877 ;; This function uses a non-reentrant model
 11878 ;;
 11879                           
 11880                           	psect	text46
 11881   005A10                     __ptext46:
 11882                           	callstack 0
 11883   005A10                     ___wmul:
 11884                           	callstack 26
 11885   005A10  5005               	movf	___wmul@multiplier^0,w,c
 11886   005A12  0207               	mulwf	___wmul@multiplicand^0,c
 11887   005A14  CFF3 F009          	movff	prodl,___wmul@product
 11888   005A18  CFF4 F00A          	movff	prodh,___wmul@product+1
 11889   005A1C  5005               	movf	___wmul@multiplier^0,w,c
 11890   005A1E  0208               	mulwf	(___wmul@multiplicand+1)^0,c
 11891   005A20  50F3               	movf	243,w,c
 11892   005A22  260A               	addwf	(___wmul@product+1)^0,f,c
 11893   005A24  5006               	movf	(___wmul@multiplier+1)^0,w,c
 11894   005A26  0207               	mulwf	___wmul@multiplicand^0,c
 11895   005A28  50F3               	movf	243,w,c
 11896   005A2A  260A               	addwf	(___wmul@product+1)^0,f,c
 11897   005A2C  C009  F005         	movff	___wmul@product,?___wmul
 11898   005A30  C00A  F006         	movff	___wmul@product+1,?___wmul+1
 11899   005A34  0012               	return		;funcret
 11900   005A36                     __end_of___wmul:
 11901                           	callstack 0
 11902                           
 11903 ;; *************** function ___lwdiv *****************
 11904 ;; Defined at:
 11905 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
 11906 ;; Parameters:    Size  Location     Type
 11907 ;;  dividend        2   10[COMRAM] unsigned int 
 11908 ;;  divisor         2   12[COMRAM] unsigned int 
 11909 ;; Auto vars:     Size  Location     Type
 11910 ;;  quotient        2   14[COMRAM] unsigned int 
 11911 ;;  counter         1   16[COMRAM] unsigned char 
 11912 ;; Return value:  Size  Location     Type
 11913 ;;                  2   10[COMRAM] unsigned int 
 11914 ;; Registers used:
 11915 ;;		wreg, status,2, status,0
 11916 ;; Tracked objects:
 11917 ;;		On entry : 0/0
 11918 ;;		On exit  : 0/0
 11919 ;;		Unchanged: 0/0
 11920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11921 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11922 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11924 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11925 ;;Total ram usage:        7 bytes
 11926 ;; Hardware stack levels used: 1
 11927 ;; Hardware stack levels required when called: 2
 11928 ;; This function calls:
 11929 ;;		Nothing
 11930 ;; This function is called by:
 11931 ;;		_setMotorPWM
 11932 ;; This function uses a non-reentrant model
 11933 ;;
 11934                           
 11935                           	psect	text47
 11936   00535E                     __ptext47:
 11937                           	callstack 0
 11938   00535E                     ___lwdiv:
 11939                           	callstack 26
 11940   00535E  0E00               	movlw	0
 11941   005360  6E10               	movwf	(___lwdiv@quotient+1)^0,c
 11942   005362  0E00               	movlw	0
 11943   005364  6E0F               	movwf	___lwdiv@quotient^0,c
 11944   005366  500D               	movf	___lwdiv@divisor^0,w,c
 11945   005368  100E               	iorwf	(___lwdiv@divisor+1)^0,w,c
 11946   00536A  B4D8               	btfsc	status,2,c
 11947   00536C  EFBA  F029         	goto	u4281
 11948   005370  EFBC  F029         	goto	u4280
 11949   005374                     u4281:
 11950   005374  EFE4  F029         	goto	l1007
 11951   005378                     u4280:
 11952   005378  0E01               	movlw	1
 11953   00537A  6E11               	movwf	___lwdiv@counter^0,c
 11954   00537C  EFC4  F029         	goto	l4211
 11955   005380                     l4209:
 11956   005380  90D8               	bcf	status,0,c
 11957   005382  360D               	rlcf	___lwdiv@divisor^0,f,c
 11958   005384  360E               	rlcf	(___lwdiv@divisor+1)^0,f,c
 11959   005386  2A11               	incf	___lwdiv@counter^0,f,c
 11960   005388                     l4211:
 11961   005388  AE0E               	btfss	(___lwdiv@divisor+1)^0,7,c
 11962   00538A  EFC9  F029         	goto	u4291
 11963   00538E  EFCB  F029         	goto	u4290
 11964   005392                     u4291:
 11965   005392  EFC0  F029         	goto	l4209
 11966   005396                     u4290:
 11967   005396                     l4213:
 11968   005396  90D8               	bcf	status,0,c
 11969   005398  360F               	rlcf	___lwdiv@quotient^0,f,c
 11970   00539A  3610               	rlcf	(___lwdiv@quotient+1)^0,f,c
 11971   00539C  500D               	movf	___lwdiv@divisor^0,w,c
 11972   00539E  5C0B               	subwf	___lwdiv@dividend^0,w,c
 11973   0053A0  500E               	movf	(___lwdiv@divisor+1)^0,w,c
 11974   0053A2  580C               	subwfb	(___lwdiv@dividend+1)^0,w,c
 11975   0053A4  A0D8               	btfss	status,0,c
 11976   0053A6  EFD7  F029         	goto	u4301
 11977   0053AA  EFD9  F029         	goto	u4300
 11978   0053AE                     u4301:
 11979   0053AE  EFDE  F029         	goto	l4221
 11980   0053B2                     u4300:
 11981   0053B2  500D               	movf	___lwdiv@divisor^0,w,c
 11982   0053B4  5E0B               	subwf	___lwdiv@dividend^0,f,c
 11983   0053B6  500E               	movf	(___lwdiv@divisor+1)^0,w,c
 11984   0053B8  5A0C               	subwfb	(___lwdiv@dividend+1)^0,f,c
 11985   0053BA  800F               	bsf	___lwdiv@quotient^0,0,c
 11986   0053BC                     l4221:
 11987   0053BC  90D8               	bcf	status,0,c
 11988   0053BE  320E               	rrcf	(___lwdiv@divisor+1)^0,f,c
 11989   0053C0  320D               	rrcf	___lwdiv@divisor^0,f,c
 11990   0053C2  2E11               	decfsz	___lwdiv@counter^0,f,c
 11991   0053C4  EFCB  F029         	goto	l4213
 11992   0053C8                     l1007:
 11993   0053C8  C00F  F00B         	movff	___lwdiv@quotient,?___lwdiv
 11994   0053CC  C010  F00C         	movff	___lwdiv@quotient+1,?___lwdiv+1
 11995   0053D0  0012               	return		;funcret
 11996   0053D2                     __end_of___lwdiv:
 11997                           	callstack 0
 11998                           
 11999 ;; *************** function ___xxtofl *****************
 12000 ;; Defined at:
 12001 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\xxtofl.c"
 12002 ;; Parameters:    Size  Location     Type
 12003 ;;  sign            1    wreg     unsigned char 
 12004 ;;  val             4    4[COMRAM] long 
 12005 ;; Auto vars:     Size  Location     Type
 12006 ;;  sign            1   12[COMRAM] unsigned char 
 12007 ;;  arg             4   14[COMRAM] unsigned long 
 12008 ;;  exp             1   13[COMRAM] unsigned char 
 12009 ;; Return value:  Size  Location     Type
 12010 ;;                  4    4[COMRAM] unsigned char 
 12011 ;; Registers used:
 12012 ;;		wreg, status,2, status,0
 12013 ;; Tracked objects:
 12014 ;;		On entry : 0/0
 12015 ;;		On exit  : 0/0
 12016 ;;		Unchanged: 0/0
 12017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12018 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12019 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12020 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12021 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12022 ;;Total ram usage:       14 bytes
 12023 ;; Hardware stack levels used: 1
 12024 ;; Hardware stack levels required when called: 2
 12025 ;; This function calls:
 12026 ;;		Nothing
 12027 ;; This function is called by:
 12028 ;;		_colorDetect
 12029 ;;		_turnLeft_90
 12030 ;;		_turnRight_90
 12031 ;;		_turn_180
 12032 ;;		_turnRight_135
 12033 ;;		_turnLeft_135
 12034 ;;		_main
 12035 ;;		_turnLeft
 12036 ;;		_turnRight
 12037 ;; This function uses a non-reentrant model
 12038 ;;
 12039                           
 12040                           	psect	text48
 12041   003BA0                     __ptext48:
 12042                           	callstack 0
 12043   003BA0                     ___xxtofl:
 12044                           	callstack 27
 12045                           
 12046                           ;incstack = 0
 12047                           ;___xxtofl@sign stored from wreg
 12048   003BA0  6E0D               	movwf	___xxtofl@sign^0,c
 12049   003BA2  500D               	movf	___xxtofl@sign^0,w,c
 12050   003BA4  B4D8               	btfsc	status,2,c
 12051   003BA6  EFD7  F01D         	goto	u5301
 12052   003BAA  EFD9  F01D         	goto	u5300
 12053   003BAE                     u5301:
 12054   003BAE  EFFB  F01D         	goto	l1171
 12055   003BB2                     u5300:
 12056   003BB2  BE08               	btfsc	(___xxtofl@val+3)^0,7,c
 12057   003BB4  EFE0  F01D         	goto	u5310
 12058   003BB8  EFDE  F01D         	goto	u5311
 12059   003BBC                     u5311:
 12060   003BBC  EFFB  F01D         	goto	l1171
 12061   003BC0                     u5310:
 12062   003BC0  C005  F009         	movff	___xxtofl@val,??___xxtofl
 12063   003BC4  C006  F00A         	movff	___xxtofl@val+1,??___xxtofl+1
 12064   003BC8  C007  F00B         	movff	___xxtofl@val+2,??___xxtofl+2
 12065   003BCC  C008  F00C         	movff	___xxtofl@val+3,??___xxtofl+3
 12066   003BD0  1E09               	comf	??___xxtofl^0,f,c
 12067   003BD2  1E0A               	comf	(??___xxtofl+1)^0,f,c
 12068   003BD4  1E0B               	comf	(??___xxtofl+2)^0,f,c
 12069   003BD6  1E0C               	comf	(??___xxtofl+3)^0,f,c
 12070   003BD8  2A09               	incf	??___xxtofl^0,f,c
 12071   003BDA  0E00               	movlw	0
 12072   003BDC  220A               	addwfc	(??___xxtofl+1)^0,f,c
 12073   003BDE  220B               	addwfc	(??___xxtofl+2)^0,f,c
 12074   003BE0  220C               	addwfc	(??___xxtofl+3)^0,f,c
 12075   003BE2  C009  F00F         	movff	??___xxtofl,___xxtofl@arg
 12076   003BE6  C00A  F010         	movff	??___xxtofl+1,___xxtofl@arg+1
 12077   003BEA  C00B  F011         	movff	??___xxtofl+2,___xxtofl@arg+2
 12078   003BEE  C00C  F012         	movff	??___xxtofl+3,___xxtofl@arg+3
 12079   003BF2  EF03  F01E         	goto	l5017
 12080   003BF6                     l1171:
 12081   003BF6  C005  F00F         	movff	___xxtofl@val,___xxtofl@arg
 12082   003BFA  C006  F010         	movff	___xxtofl@val+1,___xxtofl@arg+1
 12083   003BFE  C007  F011         	movff	___xxtofl@val+2,___xxtofl@arg+2
 12084   003C02  C008  F012         	movff	___xxtofl@val+3,___xxtofl@arg+3
 12085   003C06                     l5017:
 12086   003C06  5005               	movf	___xxtofl@val^0,w,c
 12087   003C08  1006               	iorwf	(___xxtofl@val+1)^0,w,c
 12088   003C0A  1007               	iorwf	(___xxtofl@val+2)^0,w,c
 12089   003C0C  1008               	iorwf	(___xxtofl@val+3)^0,w,c
 12090   003C0E  A4D8               	btfss	status,2,c
 12091   003C10  EF0C  F01E         	goto	u5321
 12092   003C14  EF0E  F01E         	goto	u5320
 12093   003C18                     u5321:
 12094   003C18  EF18  F01E         	goto	l5023
 12095   003C1C                     u5320:
 12096   003C1C  0E00               	movlw	0
 12097   003C1E  6E05               	movwf	?___xxtofl^0,c
 12098   003C20  0E00               	movlw	0
 12099   003C22  6E06               	movwf	(?___xxtofl+1)^0,c
 12100   003C24  0E00               	movlw	0
 12101   003C26  6E07               	movwf	(?___xxtofl+2)^0,c
 12102   003C28  0E00               	movlw	0
 12103   003C2A  6E08               	movwf	(?___xxtofl+3)^0,c
 12104   003C2C  EFA9  F01E         	goto	l1174
 12105   003C30                     l5023:
 12106   003C30  0E96               	movlw	150
 12107   003C32  6E0E               	movwf	___xxtofl@exp^0,c
 12108   003C34  EF22  F01E         	goto	l5027
 12109   003C38                     l5025:
 12110   003C38  2A0E               	incf	___xxtofl@exp^0,f,c
 12111   003C3A  90D8               	bcf	status,0,c
 12112   003C3C  3212               	rrcf	(___xxtofl@arg+3)^0,f,c
 12113   003C3E  3211               	rrcf	(___xxtofl@arg+2)^0,f,c
 12114   003C40  3210               	rrcf	(___xxtofl@arg+1)^0,f,c
 12115   003C42  320F               	rrcf	___xxtofl@arg^0,f,c
 12116   003C44                     l5027:
 12117   003C44  0E00               	movlw	0
 12118   003C46  140F               	andwf	___xxtofl@arg^0,w,c
 12119   003C48  6E09               	movwf	??___xxtofl^0,c
 12120   003C4A  0E00               	movlw	0
 12121   003C4C  1410               	andwf	(___xxtofl@arg+1)^0,w,c
 12122   003C4E  6E0A               	movwf	(??___xxtofl+1)^0,c
 12123   003C50  0E00               	movlw	0
 12124   003C52  1411               	andwf	(___xxtofl@arg+2)^0,w,c
 12125   003C54  6E0B               	movwf	(??___xxtofl+2)^0,c
 12126   003C56  0EFE               	movlw	254
 12127   003C58  1412               	andwf	(___xxtofl@arg+3)^0,w,c
 12128   003C5A  6E0C               	movwf	(??___xxtofl+3)^0,c
 12129   003C5C  5009               	movf	??___xxtofl^0,w,c
 12130   003C5E  100A               	iorwf	(??___xxtofl+1)^0,w,c
 12131   003C60  100B               	iorwf	(??___xxtofl+2)^0,w,c
 12132   003C62  100C               	iorwf	(??___xxtofl+3)^0,w,c
 12133   003C64  A4D8               	btfss	status,2,c
 12134   003C66  EF37  F01E         	goto	u5331
 12135   003C6A  EF39  F01E         	goto	u5330
 12136   003C6E                     u5331:
 12137   003C6E  EF1C  F01E         	goto	l5025
 12138   003C72                     u5330:
 12139   003C72  EF47  F01E         	goto	l1178
 12140   003C76                     l5029:
 12141   003C76  2A0E               	incf	___xxtofl@exp^0,f,c
 12142   003C78  0E01               	movlw	1
 12143   003C7A  260F               	addwf	___xxtofl@arg^0,f,c
 12144   003C7C  0E00               	movlw	0
 12145   003C7E  2210               	addwfc	(___xxtofl@arg+1)^0,f,c
 12146   003C80  2211               	addwfc	(___xxtofl@arg+2)^0,f,c
 12147   003C82  2212               	addwfc	(___xxtofl@arg+3)^0,f,c
 12148   003C84  90D8               	bcf	status,0,c
 12149   003C86  3212               	rrcf	(___xxtofl@arg+3)^0,f,c
 12150   003C88  3211               	rrcf	(___xxtofl@arg+2)^0,f,c
 12151   003C8A  3210               	rrcf	(___xxtofl@arg+1)^0,f,c
 12152   003C8C  320F               	rrcf	___xxtofl@arg^0,f,c
 12153   003C8E                     l1178:
 12154   003C8E  0E00               	movlw	0
 12155   003C90  140F               	andwf	___xxtofl@arg^0,w,c
 12156   003C92  6E09               	movwf	??___xxtofl^0,c
 12157   003C94  0E00               	movlw	0
 12158   003C96  1410               	andwf	(___xxtofl@arg+1)^0,w,c
 12159   003C98  6E0A               	movwf	(??___xxtofl+1)^0,c
 12160   003C9A  0E00               	movlw	0
 12161   003C9C  1411               	andwf	(___xxtofl@arg+2)^0,w,c
 12162   003C9E  6E0B               	movwf	(??___xxtofl+2)^0,c
 12163   003CA0  0EFF               	movlw	255
 12164   003CA2  1412               	andwf	(___xxtofl@arg+3)^0,w,c
 12165   003CA4  6E0C               	movwf	(??___xxtofl+3)^0,c
 12166   003CA6  5009               	movf	??___xxtofl^0,w,c
 12167   003CA8  100A               	iorwf	(??___xxtofl+1)^0,w,c
 12168   003CAA  100B               	iorwf	(??___xxtofl+2)^0,w,c
 12169   003CAC  100C               	iorwf	(??___xxtofl+3)^0,w,c
 12170   003CAE  A4D8               	btfss	status,2,c
 12171   003CB0  EF5C  F01E         	goto	u5341
 12172   003CB4  EF5E  F01E         	goto	u5340
 12173   003CB8                     u5341:
 12174   003CB8  EF3B  F01E         	goto	l5029
 12175   003CBC                     u5340:
 12176   003CBC  EF66  F01E         	goto	l5037
 12177   003CC0                     l5035:
 12178   003CC0  060E               	decf	___xxtofl@exp^0,f,c
 12179   003CC2  90D8               	bcf	status,0,c
 12180   003CC4  360F               	rlcf	___xxtofl@arg^0,f,c
 12181   003CC6  3610               	rlcf	(___xxtofl@arg+1)^0,f,c
 12182   003CC8  3611               	rlcf	(___xxtofl@arg+2)^0,f,c
 12183   003CCA  3612               	rlcf	(___xxtofl@arg+3)^0,f,c
 12184   003CCC                     l5037:
 12185   003CCC  BE11               	btfsc	(___xxtofl@arg+2)^0,7,c
 12186   003CCE  EF6B  F01E         	goto	u5351
 12187   003CD2  EF6D  F01E         	goto	u5350
 12188   003CD6                     u5351:
 12189   003CD6  EF75  F01E         	goto	l1185
 12190   003CDA                     u5350:
 12191   003CDA  0E02               	movlw	2
 12192   003CDC  600E               	cpfslt	___xxtofl@exp^0,c
 12193   003CDE  EF73  F01E         	goto	u5361
 12194   003CE2  EF75  F01E         	goto	u5360
 12195   003CE6                     u5361:
 12196   003CE6  EF60  F01E         	goto	l5035
 12197   003CEA                     u5360:
 12198   003CEA                     l1185:
 12199   003CEA  B00E               	btfsc	___xxtofl@exp^0,0,c
 12200   003CEC  EF7A  F01E         	goto	u5371
 12201   003CF0  EF7C  F01E         	goto	u5370
 12202   003CF4                     u5371:
 12203   003CF4  EF7D  F01E         	goto	l5043
 12204   003CF8                     u5370:
 12205   003CF8  9E11               	bcf	(___xxtofl@arg+2)^0,7,c
 12206   003CFA                     l5043:
 12207   003CFA  90D8               	bcf	status,0,c
 12208   003CFC  320E               	rrcf	___xxtofl@exp^0,f,c
 12209   003CFE  C00E  F009         	movff	___xxtofl@exp,??___xxtofl
 12210   003D02  6A0A               	clrf	(??___xxtofl+1)^0,c
 12211   003D04  6A0B               	clrf	(??___xxtofl+2)^0,c
 12212   003D06  6A0C               	clrf	(??___xxtofl+3)^0,c
 12213   003D08  C009  F00C         	movff	??___xxtofl,??___xxtofl+3
 12214   003D0C  6A0B               	clrf	(??___xxtofl+2)^0,c
 12215   003D0E  6A0A               	clrf	(??___xxtofl+1)^0,c
 12216   003D10  6A09               	clrf	??___xxtofl^0,c
 12217   003D12  5009               	movf	??___xxtofl^0,w,c
 12218   003D14  120F               	iorwf	___xxtofl@arg^0,f,c
 12219   003D16  500A               	movf	(??___xxtofl+1)^0,w,c
 12220   003D18  1210               	iorwf	(___xxtofl@arg+1)^0,f,c
 12221   003D1A  500B               	movf	(??___xxtofl+2)^0,w,c
 12222   003D1C  1211               	iorwf	(___xxtofl@arg+2)^0,f,c
 12223   003D1E  500C               	movf	(??___xxtofl+3)^0,w,c
 12224   003D20  1212               	iorwf	(___xxtofl@arg+3)^0,f,c
 12225   003D22  500D               	movf	___xxtofl@sign^0,w,c
 12226   003D24  B4D8               	btfsc	status,2,c
 12227   003D26  EF97  F01E         	goto	u5381
 12228   003D2A  EF99  F01E         	goto	u5380
 12229   003D2E                     u5381:
 12230   003D2E  EFA1  F01E         	goto	l5053
 12231   003D32                     u5380:
 12232   003D32  BE08               	btfsc	(___xxtofl@val+3)^0,7,c
 12233   003D34  EFA0  F01E         	goto	u5390
 12234   003D38  EF9E  F01E         	goto	u5391
 12235   003D3C                     u5391:
 12236   003D3C  EFA1  F01E         	goto	l5053
 12237   003D40                     u5390:
 12238   003D40  8E12               	bsf	(___xxtofl@arg+3)^0,7,c
 12239   003D42                     l5053:
 12240   003D42  C00F  F005         	movff	___xxtofl@arg,?___xxtofl
 12241   003D46  C010  F006         	movff	___xxtofl@arg+1,?___xxtofl+1
 12242   003D4A  C011  F007         	movff	___xxtofl@arg+2,?___xxtofl+2
 12243   003D4E  C012  F008         	movff	___xxtofl@arg+3,?___xxtofl+3
 12244   003D52                     l1174:
 12245   003D52  0012               	return		;funcret
 12246   003D54                     __end_of___xxtofl:
 12247                           	callstack 0
 12248                           
 12249 ;; *************** function _TxBufferedString *****************
 12250 ;; Defined at:
 12251 ;;		line 118 in file "serialTest.c"
 12252 ;; Parameters:    Size  Location     Type
 12253 ;;  string          2    5[COMRAM] PTR unsigned char 
 12254 ;;		 -> colorDetect@string1(20), 
 12255 ;; Auto vars:     Size  Location     Type
 12256 ;;		None
 12257 ;; Return value:  Size  Location     Type
 12258 ;;                  1    wreg      void 
 12259 ;; Registers used:
 12260 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12261 ;; Tracked objects:
 12262 ;;		On entry : 0/0
 12263 ;;		On exit  : 0/0
 12264 ;;		Unchanged: 0/0
 12265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12266 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12269 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12270 ;;Total ram usage:        2 bytes
 12271 ;; Hardware stack levels used: 1
 12272 ;; Hardware stack levels required when called: 3
 12273 ;; This function calls:
 12274 ;;		_putCharToTxBuf
 12275 ;; This function is called by:
 12276 ;;		_colorDetect
 12277 ;; This function uses a non-reentrant model
 12278 ;;
 12279                           
 12280                           	psect	text49
 12281   0058E0                     __ptext49:
 12282                           	callstack 0
 12283   0058E0                     _TxBufferedString:
 12284                           	callstack 26
 12285   0058E0                     
 12286                           ;serialTest.c: 121:     while(*string != 0) {putCharToTxBuf(*string++);}
 12287   0058E0  EF7B  F02C         	goto	l4895
 12288   0058E4                     l4891:
 12289   0058E4  C006  FFD9         	movff	TxBufferedString@string,fsr2l
 12290   0058E8  C007  FFDA         	movff	TxBufferedString@string+1,fsr2h
 12291   0058EC  50DF               	movf	indf2,w,c
 12292   0058EE  ECCA  F02C         	call	_putCharToTxBuf
 12293   0058F2  4A06               	infsnz	TxBufferedString@string^0,f,c
 12294   0058F4  2A07               	incf	(TxBufferedString@string+1)^0,f,c
 12295   0058F6                     l4895:
 12296   0058F6  C006  FFD9         	movff	TxBufferedString@string,fsr2l
 12297   0058FA  C007  FFDA         	movff	TxBufferedString@string+1,fsr2h
 12298   0058FE  50DF               	movf	indf2,w,c
 12299   005900  A4D8               	btfss	status,2,c
 12300   005902  EF85  F02C         	goto	u5221
 12301   005906  EF87  F02C         	goto	u5220
 12302   00590A                     u5221:
 12303   00590A  EF72  F02C         	goto	l4891
 12304   00590E                     u5220:
 12305   00590E  0012               	return		;funcret
 12306   005910                     __end_of_TxBufferedString:
 12307                           	callstack 0
 12308                           
 12309 ;; *************** function _putCharToTxBuf *****************
 12310 ;; Defined at:
 12311 ;;		line 105 in file "serialTest.c"
 12312 ;; Parameters:    Size  Location     Type
 12313 ;;  byte            1    wreg     unsigned char 
 12314 ;; Auto vars:     Size  Location     Type
 12315 ;;  byte            1    4[COMRAM] unsigned char 
 12316 ;; Return value:  Size  Location     Type
 12317 ;;                  1    wreg      void 
 12318 ;; Registers used:
 12319 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12320 ;; Tracked objects:
 12321 ;;		On entry : 0/0
 12322 ;;		On exit  : 0/0
 12323 ;;		Unchanged: 0/0
 12324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12326 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12328 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12329 ;;Total ram usage:        1 bytes
 12330 ;; Hardware stack levels used: 1
 12331 ;; Hardware stack levels required when called: 2
 12332 ;; This function calls:
 12333 ;;		Nothing
 12334 ;; This function is called by:
 12335 ;;		_TxBufferedString
 12336 ;; This function uses a non-reentrant model
 12337 ;;
 12338                           
 12339                           	psect	text50
 12340   005994                     __ptext50:
 12341                           	callstack 0
 12342   005994                     _putCharToTxBuf:
 12343                           	callstack 26
 12344                           
 12345                           ;incstack = 0
 12346                           ;putCharToTxBuf@byte stored from wreg
 12347   005994  6E05               	movwf	putCharToTxBuf@byte^0,c
 12348   005996                     
 12349                           ;serialTest.c: 106:     if (TxBufWriteCnt>=60) {TxBufWriteCnt=0;}
 12350   005996  0E3B               	movlw	59
 12351   005998  6458               	cpfsgt	_TxBufWriteCnt^0,c	;volatile
 12352   00599A  EFD1  F02C         	goto	u5181
 12353   00599E  EFD3  F02C         	goto	u5180
 12354   0059A2                     u5181:
 12355   0059A2  EFD5  F02C         	goto	l4843
 12356   0059A6                     u5180:
 12357   0059A6  0E00               	movlw	0
 12358   0059A8  6E58               	movwf	_TxBufWriteCnt^0,c	;volatile
 12359   0059AA                     l4843:
 12360                           
 12361                           ;serialTest.c: 107:     EUSART4TXbuf[TxBufWriteCnt++]=byte;
 12362   0059AA  0E00               	movlw	low _EUSART4TXbuf
 12363   0059AC  2458               	addwf	_TxBufWriteCnt^0,w,c	;volatile
 12364   0059AE  6ED9               	movwf	fsr2l,c
 12365   0059B0  6ADA               	clrf	fsr2h,c
 12366   0059B2  0E02               	movlw	high _EUSART4TXbuf
 12367   0059B4  22DA               	addwfc	fsr2h,f,c
 12368   0059B6  C005  FFDF         	movff	putCharToTxBuf@byte,indf2
 12369   0059BA  2A58               	incf	_TxBufWriteCnt^0,f,c	;volatile
 12370   0059BC  0012               	return		;funcret
 12371   0059BE                     __end_of_putCharToTxBuf:
 12372                           	callstack 0
 12373                           
 12374 ;; *************** function _ambientCal *****************
 12375 ;; Defined at:
 12376 ;;		line 99 in file "MazeRobot.X/color.c"
 12377 ;; Parameters:    Size  Location     Type
 12378 ;;  v               2   17[COMRAM] PTR struct RGB
 12379 ;;		 -> main@ambientRGBVal(8), 
 12380 ;; Auto vars:     Size  Location     Type
 12381 ;;  i               2   21[COMRAM] int 
 12382 ;; Return value:  Size  Location     Type
 12383 ;;                  1    wreg      void 
 12384 ;; Registers used:
 12385 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12386 ;; Tracked objects:
 12387 ;;		On entry : 0/0
 12388 ;;		On exit  : 0/0
 12389 ;;		Unchanged: 0/0
 12390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12391 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12392 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12393 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12394 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12395 ;;Total ram usage:        6 bytes
 12396 ;; Hardware stack levels used: 1
 12397 ;; Hardware stack levels required when called: 6
 12398 ;; This function calls:
 12399 ;;		_getColor
 12400 ;; This function is called by:
 12401 ;;		_main
 12402 ;; This function uses a non-reentrant model
 12403 ;;
 12404                           
 12405                           	psect	text51
 12406   004BCC                     __ptext51:
 12407                           	callstack 0
 12408   004BCC                     _ambientCal:
 12409                           	callstack 24
 12410   004BCC                     
 12411                           ;MazeRobot.X/color.c: 102:     for(int i = 0;i<20;i++){
 12412   004BCC  0E00               	movlw	0
 12413   004BCE  6E17               	movwf	(ambientCal@i+1)^0,c
 12414   004BD0  0E00               	movlw	0
 12415   004BD2  6E16               	movwf	ambientCal@i^0,c
 12416   004BD4                     l5073:
 12417                           
 12418                           ;MazeRobot.X/color.c: 103:             LATDbits.LATD7 = !LATDbits.LATD7;
 12419   004BD4  AE7C               	btfss	124,7,c	;volatile
 12420   004BD6  EFEF  F025         	goto	u5401
 12421   004BDA  EFF3  F025         	goto	u5400
 12422   004BDE                     u5401:
 12423   004BDE  6A14               	clrf	??_ambientCal^0,c
 12424   004BE0  2A14               	incf	??_ambientCal^0,f,c
 12425   004BE2  EFF4  F025         	goto	u5418
 12426   004BE6                     u5400:
 12427   004BE6  6A14               	clrf	??_ambientCal^0,c
 12428   004BE8                     u5418:
 12429   004BE8  3214               	rrcf	??_ambientCal^0,f,c
 12430   004BEA  3214               	rrcf	??_ambientCal^0,f,c
 12431   004BEC  507C               	movf	124,w,c	;volatile
 12432   004BEE  1814               	xorwf	??_ambientCal^0,w,c
 12433   004BF0  0B7F               	andlw	-129
 12434   004BF2  1814               	xorwf	??_ambientCal^0,w,c
 12435   004BF4  6E7C               	movwf	124,c	;volatile
 12436   004BF6                     
 12437                           ;MazeRobot.X/color.c: 104:             _delay((unsigned long)((100)*(64000000/4000.0)));
 12438   004BF6  0E09               	movlw	9
 12439   004BF8  6E15               	movwf	(??_ambientCal+1)^0,c
 12440   004BFA  0E1E               	movlw	30
 12441   004BFC  6E14               	movwf	??_ambientCal^0,c
 12442   004BFE  0EE4               	movlw	228
 12443   004C00                     u7627:
 12444   004C00  2EE8               	decfsz	wreg,f,c
 12445   004C02  D7FE               	bra	u7627
 12446   004C04  2E14               	decfsz	??_ambientCal^0,f,c
 12447   004C06  D7FC               	bra	u7627
 12448   004C08  2E15               	decfsz	(??_ambientCal+1)^0,f,c
 12449   004C0A  D7FA               	bra	u7627
 12450   004C0C  D000               	nop2	
 12451                           
 12452                           ;MazeRobot.X/color.c: 105:             }
 12453   004C0E  4A16               	infsnz	ambientCal@i^0,f,c
 12454   004C10  2A17               	incf	(ambientCal@i+1)^0,f,c
 12455   004C12  BE17               	btfsc	(ambientCal@i+1)^0,7,c
 12456   004C14  EF15  F026         	goto	u5421
 12457   004C18  5017               	movf	(ambientCal@i+1)^0,w,c
 12458   004C1A  E109               	bnz	u5420
 12459   004C1C  0E14               	movlw	20
 12460   004C1E  5C16               	subwf	ambientCal@i^0,w,c
 12461   004C20  A0D8               	btfss	status,0,c
 12462   004C22  EF15  F026         	goto	u5421
 12463   004C26  EF17  F026         	goto	u5420
 12464   004C2A                     u5421:
 12465   004C2A  EFEA  F025         	goto	l5073
 12466   004C2E                     u5420:
 12467   004C2E                     
 12468                           ;MazeRobot.X/color.c: 106:             LATDbits.LATD7 = !LATDbits.LATD7;
 12469   004C2E  AE7C               	btfss	124,7,c	;volatile
 12470   004C30  EF1C  F026         	goto	u5431
 12471   004C34  EF20  F026         	goto	u5430
 12472   004C38                     u5431:
 12473   004C38  6A14               	clrf	??_ambientCal^0,c
 12474   004C3A  2A14               	incf	??_ambientCal^0,f,c
 12475   004C3C  EF21  F026         	goto	u5448
 12476   004C40                     u5430:
 12477   004C40  6A14               	clrf	??_ambientCal^0,c
 12478   004C42                     u5448:
 12479   004C42  3214               	rrcf	??_ambientCal^0,f,c
 12480   004C44  3214               	rrcf	??_ambientCal^0,f,c
 12481   004C46  507C               	movf	124,w,c	;volatile
 12482   004C48  1814               	xorwf	??_ambientCal^0,w,c
 12483   004C4A  0B7F               	andlw	-129
 12484   004C4C  1814               	xorwf	??_ambientCal^0,w,c
 12485   004C4E  6E7C               	movwf	124,c	;volatile
 12486   004C50                     
 12487                           ;MazeRobot.X/color.c: 107:             _delay((unsigned long)((500)*(64000000/4000.0)));
 12488   004C50  0E29               	movlw	41
 12489   004C52  6E15               	movwf	(??_ambientCal+1)^0,c
 12490   004C54  0E96               	movlw	150
 12491   004C56  6E14               	movwf	??_ambientCal^0,c
 12492   004C58  0E7F               	movlw	127
 12493   004C5A                     u7637:
 12494   004C5A  2EE8               	decfsz	wreg,f,c
 12495   004C5C  D7FE               	bra	u7637
 12496   004C5E  2E14               	decfsz	??_ambientCal^0,f,c
 12497   004C60  D7FC               	bra	u7637
 12498   004C62  2E15               	decfsz	(??_ambientCal+1)^0,f,c
 12499   004C64  D7FA               	bra	u7637
 12500   004C66  F000               	nop	
 12501   004C68                     
 12502                           ;MazeRobot.X/color.c: 108:             getColor(v);
 12503   004C68  C012  F010         	movff	ambientCal@v,getColor@v
 12504   004C6C  C013  F011         	movff	ambientCal@v+1,getColor@v+1
 12505   004C70  EC1C  F02A         	call	_getColor	;wreg free
 12506   004C74                     
 12507                           ;MazeRobot.X/color.c: 109:             _delay((unsigned long)((500)*(64000000/4000.0)));
 12508   004C74  0E29               	movlw	41
 12509   004C76  6E15               	movwf	(??_ambientCal+1)^0,c
 12510   004C78  0E96               	movlw	150
 12511   004C7A  6E14               	movwf	??_ambientCal^0,c
 12512   004C7C  0E7F               	movlw	127
 12513   004C7E                     u7647:
 12514   004C7E  2EE8               	decfsz	wreg,f,c
 12515   004C80  D7FE               	bra	u7647
 12516   004C82  2E14               	decfsz	??_ambientCal^0,f,c
 12517   004C84  D7FC               	bra	u7647
 12518   004C86  2E15               	decfsz	(??_ambientCal+1)^0,f,c
 12519   004C88  D7FA               	bra	u7647
 12520   004C8A  F000               	nop	
 12521   004C8C                     
 12522                           ;MazeRobot.X/color.c: 110:             LATDbits.LATD7 = !LATDbits.LATD7;
 12523   004C8C  AE7C               	btfss	124,7,c	;volatile
 12524   004C8E  EF4B  F026         	goto	u5451
 12525   004C92  EF4F  F026         	goto	u5450
 12526   004C96                     u5451:
 12527   004C96  6A14               	clrf	??_ambientCal^0,c
 12528   004C98  2A14               	incf	??_ambientCal^0,f,c
 12529   004C9A  EF50  F026         	goto	u5468
 12530   004C9E                     u5450:
 12531   004C9E  6A14               	clrf	??_ambientCal^0,c
 12532   004CA0                     u5468:
 12533   004CA0  3214               	rrcf	??_ambientCal^0,f,c
 12534   004CA2  3214               	rrcf	??_ambientCal^0,f,c
 12535   004CA4  507C               	movf	124,w,c	;volatile
 12536   004CA6  1814               	xorwf	??_ambientCal^0,w,c
 12537   004CA8  0B7F               	andlw	-129
 12538   004CAA  1814               	xorwf	??_ambientCal^0,w,c
 12539   004CAC  6E7C               	movwf	124,c	;volatile
 12540   004CAE  0012               	return		;funcret
 12541   004CB0                     __end_of_ambientCal:
 12542                           	callstack 0
 12543                           
 12544 ;; *************** function _getColor *****************
 12545 ;; Defined at:
 12546 ;;		line 91 in file "MazeRobot.X/color.c"
 12547 ;; Parameters:    Size  Location     Type
 12548 ;;  v               2   15[COMRAM] PTR struct RGB
 12549 ;;		 -> main@whiteRGBVal(8), main@RGBVal(8), main@ambientRGBVal(8), colorDetect@RGBVal(8), 
 12550 ;; Auto vars:     Size  Location     Type
 12551 ;;		None
 12552 ;; Return value:  Size  Location     Type
 12553 ;;                  1    wreg      void 
 12554 ;; Registers used:
 12555 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12556 ;; Tracked objects:
 12557 ;;		On entry : 0/0
 12558 ;;		On exit  : 0/0
 12559 ;;		Unchanged: 0/0
 12560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12561 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12564 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12565 ;;Total ram usage:        2 bytes
 12566 ;; Hardware stack levels used: 1
 12567 ;; Hardware stack levels required when called: 5
 12568 ;; This function calls:
 12569 ;;		_color_read_Blue
 12570 ;;		_color_read_Clear
 12571 ;;		_color_read_Green
 12572 ;;		_color_read_Red
 12573 ;; This function is called by:
 12574 ;;		_ambientCal
 12575 ;;		_whiteCal
 12576 ;;		_colorDetect
 12577 ;;		_main
 12578 ;; This function uses a non-reentrant model
 12579 ;;
 12580                           
 12581                           	psect	text52
 12582   005438                     __ptext52:
 12583                           	callstack 0
 12584   005438                     _getColor:
 12585                           	callstack 24
 12586   005438                     
 12587                           ;MazeRobot.X/color.c: 92:     v->R = color_read_Red();
 12588   005438  ECF2  F02A         	call	_color_read_Red	;wreg free
 12589   00543C  C010  FFD9         	movff	getColor@v,fsr2l
 12590   005440  C011  FFDA         	movff	getColor@v+1,fsr2h
 12591   005444  C009  FFDE         	movff	?_color_read_Red,postinc2
 12592   005448  C00A  FFDD         	movff	?_color_read_Red+1,postdec2
 12593                           
 12594                           ;MazeRobot.X/color.c: 93:     v->G = color_read_Green();
 12595   00544C  EC1A  F02B         	call	_color_read_Green	;wreg free
 12596   005450  EE20 F002          	lfsr	2,2
 12597   005454  5010               	movf	getColor@v^0,w,c
 12598   005456  26D9               	addwf	fsr2l,f,c
 12599   005458  5011               	movf	(getColor@v+1)^0,w,c
 12600   00545A  22DA               	addwfc	fsr2h,f,c
 12601   00545C  C009  FFDE         	movff	?_color_read_Green,postinc2
 12602   005460  C00A  FFDD         	movff	?_color_read_Green+1,postdec2
 12603                           
 12604                           ;MazeRobot.X/color.c: 94:     v->B = color_read_Blue();
 12605   005464  EC6A  F02B         	call	_color_read_Blue	;wreg free
 12606   005468  EE20 F004          	lfsr	2,4
 12607   00546C  5010               	movf	getColor@v^0,w,c
 12608   00546E  26D9               	addwf	fsr2l,f,c
 12609   005470  5011               	movf	(getColor@v+1)^0,w,c
 12610   005472  22DA               	addwfc	fsr2h,f,c
 12611   005474  C009  FFDE         	movff	?_color_read_Blue,postinc2
 12612   005478  C00A  FFDD         	movff	?_color_read_Blue+1,postdec2
 12613                           
 12614                           ;MazeRobot.X/color.c: 95:     v->C = color_read_Clear();
 12615   00547C  EC42  F02B         	call	_color_read_Clear	;wreg free
 12616   005480  EE20 F006          	lfsr	2,6
 12617   005484  5010               	movf	getColor@v^0,w,c
 12618   005486  26D9               	addwf	fsr2l,f,c
 12619   005488  5011               	movf	(getColor@v+1)^0,w,c
 12620   00548A  22DA               	addwfc	fsr2h,f,c
 12621   00548C  C009  FFDE         	movff	?_color_read_Clear,postinc2
 12622   005490  C00A  FFDD         	movff	?_color_read_Clear+1,postdec2
 12623   005494  0012               	return		;funcret
 12624   005496                     __end_of_getColor:
 12625                           	callstack 0
 12626                           
 12627 ;; *************** function _color_read_Red *****************
 12628 ;; Defined at:
 12629 ;;		line 33 in file "MazeRobot.X/color.c"
 12630 ;; Parameters:    Size  Location     Type
 12631 ;;		None
 12632 ;; Auto vars:     Size  Location     Type
 12633 ;;  tmp             2   13[COMRAM] unsigned int 
 12634 ;; Return value:  Size  Location     Type
 12635 ;;                  2    8[COMRAM] unsigned int 
 12636 ;; Registers used:
 12637 ;;		wreg, status,2, status,0, cstack
 12638 ;; Tracked objects:
 12639 ;;		On entry : 0/0
 12640 ;;		On exit  : 0/0
 12641 ;;		Unchanged: 0/0
 12642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12643 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12644 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12645 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12646 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12647 ;;Total ram usage:        7 bytes
 12648 ;; Hardware stack levels used: 1
 12649 ;; Hardware stack levels required when called: 4
 12650 ;; This function calls:
 12651 ;;		_I2C_2_Master_Read
 12652 ;;		_I2C_2_Master_RepStart
 12653 ;;		_I2C_2_Master_Start
 12654 ;;		_I2C_2_Master_Stop
 12655 ;;		_I2C_2_Master_Write
 12656 ;; This function is called by:
 12657 ;;		_getColor
 12658 ;; This function uses a non-reentrant model
 12659 ;;
 12660                           
 12661                           	psect	text53
 12662   0055E4                     __ptext53:
 12663                           	callstack 0
 12664   0055E4                     _color_read_Red:
 12665                           	callstack 24
 12666   0055E4                     
 12667                           ;MazeRobot.X/color.c: 35:  unsigned int tmp;;MazeRobot.X/color.c: 36:  I2C_2_Master_Star
      +                          t();
 12668   0055E4  EC5B  F02D         	call	_I2C_2_Master_Start	;wreg free
 12669                           
 12670                           ;MazeRobot.X/color.c: 37:  I2C_2_Master_Write(0x52 | 0x00);
 12671   0055E8  0E52               	movlw	82
 12672   0055EA  EC50  F02D         	call	_I2C_2_Master_Write
 12673                           
 12674                           ;MazeRobot.X/color.c: 38:  I2C_2_Master_Write(0xA0 | 0x16);
 12675   0055EE  0EB6               	movlw	182
 12676   0055F0  EC50  F02D         	call	_I2C_2_Master_Write
 12677                           
 12678                           ;MazeRobot.X/color.c: 39:  I2C_2_Master_RepStart();
 12679   0055F4  EC60  F02D         	call	_I2C_2_Master_RepStart	;wreg free
 12680                           
 12681                           ;MazeRobot.X/color.c: 40:  I2C_2_Master_Write(0x52 | 0x01);
 12682   0055F8  0E53               	movlw	83
 12683   0055FA  EC50  F02D         	call	_I2C_2_Master_Write
 12684                           
 12685                           ;MazeRobot.X/color.c: 41:  tmp=I2C_2_Master_Read(1);
 12686   0055FE  0E01               	movlw	1
 12687   005600  ECF9  F02B         	call	_I2C_2_Master_Read
 12688   005604  6E0B               	movwf	??_color_read_Red^0,c
 12689   005606  500B               	movf	??_color_read_Red^0,w,c
 12690   005608  6E0E               	movwf	color_read_Red@tmp^0,c
 12691   00560A  6A0F               	clrf	(color_read_Red@tmp+1)^0,c
 12692                           
 12693                           ;MazeRobot.X/color.c: 42:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 12694   00560C  0E00               	movlw	0
 12695   00560E  ECF9  F02B         	call	_I2C_2_Master_Read
 12696   005612  6E0B               	movwf	??_color_read_Red^0,c
 12697   005614  500B               	movf	??_color_read_Red^0,w,c
 12698   005616  6E0D               	movwf	(??_color_read_Red+2)^0,c
 12699   005618  6A0C               	clrf	(??_color_read_Red+1)^0,c
 12700   00561A  500E               	movf	color_read_Red@tmp^0,w,c
 12701   00561C  100C               	iorwf	(??_color_read_Red+1)^0,w,c
 12702   00561E  6E0E               	movwf	color_read_Red@tmp^0,c
 12703   005620  500F               	movf	(color_read_Red@tmp+1)^0,w,c
 12704   005622  100D               	iorwf	(??_color_read_Red+2)^0,w,c
 12705   005624  6E0F               	movwf	(color_read_Red@tmp+1)^0,c
 12706                           
 12707                           ;MazeRobot.X/color.c: 43:  I2C_2_Master_Stop();
 12708   005626  EC56  F02D         	call	_I2C_2_Master_Stop	;wreg free
 12709   00562A                     
 12710                           ;MazeRobot.X/color.c: 44:  return tmp;
 12711   00562A  C00E  F009         	movff	color_read_Red@tmp,?_color_read_Red
 12712   00562E  C00F  F00A         	movff	color_read_Red@tmp+1,?_color_read_Red+1
 12713   005632  0012               	return		;funcret
 12714   005634                     __end_of_color_read_Red:
 12715                           	callstack 0
 12716                           
 12717 ;; *************** function _color_read_Green *****************
 12718 ;; Defined at:
 12719 ;;		line 47 in file "MazeRobot.X/color.c"
 12720 ;; Parameters:    Size  Location     Type
 12721 ;;		None
 12722 ;; Auto vars:     Size  Location     Type
 12723 ;;  tmp             2   13[COMRAM] unsigned int 
 12724 ;; Return value:  Size  Location     Type
 12725 ;;                  2    8[COMRAM] unsigned int 
 12726 ;; Registers used:
 12727 ;;		wreg, status,2, status,0, cstack
 12728 ;; Tracked objects:
 12729 ;;		On entry : 0/0
 12730 ;;		On exit  : 0/0
 12731 ;;		Unchanged: 0/0
 12732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12733 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12734 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12735 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12736 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12737 ;;Total ram usage:        7 bytes
 12738 ;; Hardware stack levels used: 1
 12739 ;; Hardware stack levels required when called: 4
 12740 ;; This function calls:
 12741 ;;		_I2C_2_Master_Read
 12742 ;;		_I2C_2_Master_RepStart
 12743 ;;		_I2C_2_Master_Start
 12744 ;;		_I2C_2_Master_Stop
 12745 ;;		_I2C_2_Master_Write
 12746 ;; This function is called by:
 12747 ;;		_getColor
 12748 ;; This function uses a non-reentrant model
 12749 ;;
 12750                           
 12751                           	psect	text54
 12752   005634                     __ptext54:
 12753                           	callstack 0
 12754   005634                     _color_read_Green:
 12755                           	callstack 24
 12756   005634                     
 12757                           ;MazeRobot.X/color.c: 49:  unsigned int tmp;;MazeRobot.X/color.c: 50:  I2C_2_Master_Star
      +                          t();
 12758   005634  EC5B  F02D         	call	_I2C_2_Master_Start	;wreg free
 12759                           
 12760                           ;MazeRobot.X/color.c: 51:  I2C_2_Master_Write(0x52 | 0x00);
 12761   005638  0E52               	movlw	82
 12762   00563A  EC50  F02D         	call	_I2C_2_Master_Write
 12763                           
 12764                           ;MazeRobot.X/color.c: 52:  I2C_2_Master_Write(0xA0 | 0x18);
 12765   00563E  0EB8               	movlw	184
 12766   005640  EC50  F02D         	call	_I2C_2_Master_Write
 12767                           
 12768                           ;MazeRobot.X/color.c: 53:  I2C_2_Master_RepStart();
 12769   005644  EC60  F02D         	call	_I2C_2_Master_RepStart	;wreg free
 12770                           
 12771                           ;MazeRobot.X/color.c: 54:  I2C_2_Master_Write(0x52 | 0x01);
 12772   005648  0E53               	movlw	83
 12773   00564A  EC50  F02D         	call	_I2C_2_Master_Write
 12774                           
 12775                           ;MazeRobot.X/color.c: 55:  tmp=I2C_2_Master_Read(1);
 12776   00564E  0E01               	movlw	1
 12777   005650  ECF9  F02B         	call	_I2C_2_Master_Read
 12778   005654  6E0B               	movwf	??_color_read_Green^0,c
 12779   005656  500B               	movf	??_color_read_Green^0,w,c
 12780   005658  6E0E               	movwf	color_read_Green@tmp^0,c
 12781   00565A  6A0F               	clrf	(color_read_Green@tmp+1)^0,c
 12782                           
 12783                           ;MazeRobot.X/color.c: 56:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 12784   00565C  0E00               	movlw	0
 12785   00565E  ECF9  F02B         	call	_I2C_2_Master_Read
 12786   005662  6E0B               	movwf	??_color_read_Green^0,c
 12787   005664  500B               	movf	??_color_read_Green^0,w,c
 12788   005666  6E0D               	movwf	(??_color_read_Green+2)^0,c
 12789   005668  6A0C               	clrf	(??_color_read_Green+1)^0,c
 12790   00566A  500E               	movf	color_read_Green@tmp^0,w,c
 12791   00566C  100C               	iorwf	(??_color_read_Green+1)^0,w,c
 12792   00566E  6E0E               	movwf	color_read_Green@tmp^0,c
 12793   005670  500F               	movf	(color_read_Green@tmp+1)^0,w,c
 12794   005672  100D               	iorwf	(??_color_read_Green+2)^0,w,c
 12795   005674  6E0F               	movwf	(color_read_Green@tmp+1)^0,c
 12796                           
 12797                           ;MazeRobot.X/color.c: 57:  I2C_2_Master_Stop();
 12798   005676  EC56  F02D         	call	_I2C_2_Master_Stop	;wreg free
 12799   00567A                     
 12800                           ;MazeRobot.X/color.c: 58:  return tmp;
 12801   00567A  C00E  F009         	movff	color_read_Green@tmp,?_color_read_Green
 12802   00567E  C00F  F00A         	movff	color_read_Green@tmp+1,?_color_read_Green+1
 12803   005682  0012               	return		;funcret
 12804   005684                     __end_of_color_read_Green:
 12805                           	callstack 0
 12806                           
 12807 ;; *************** function _color_read_Clear *****************
 12808 ;; Defined at:
 12809 ;;		line 76 in file "MazeRobot.X/color.c"
 12810 ;; Parameters:    Size  Location     Type
 12811 ;;		None
 12812 ;; Auto vars:     Size  Location     Type
 12813 ;;  tmp             2   13[COMRAM] unsigned int 
 12814 ;; Return value:  Size  Location     Type
 12815 ;;                  2    8[COMRAM] unsigned int 
 12816 ;; Registers used:
 12817 ;;		wreg, status,2, status,0, cstack
 12818 ;; Tracked objects:
 12819 ;;		On entry : 0/0
 12820 ;;		On exit  : 0/0
 12821 ;;		Unchanged: 0/0
 12822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12823 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12824 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12825 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12826 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12827 ;;Total ram usage:        7 bytes
 12828 ;; Hardware stack levels used: 1
 12829 ;; Hardware stack levels required when called: 4
 12830 ;; This function calls:
 12831 ;;		_I2C_2_Master_Read
 12832 ;;		_I2C_2_Master_RepStart
 12833 ;;		_I2C_2_Master_Start
 12834 ;;		_I2C_2_Master_Stop
 12835 ;;		_I2C_2_Master_Write
 12836 ;; This function is called by:
 12837 ;;		_getColor
 12838 ;; This function uses a non-reentrant model
 12839 ;;
 12840                           
 12841                           	psect	text55
 12842   005684                     __ptext55:
 12843                           	callstack 0
 12844   005684                     _color_read_Clear:
 12845                           	callstack 24
 12846   005684                     
 12847                           ;MazeRobot.X/color.c: 78:  unsigned int tmp;;MazeRobot.X/color.c: 79:  I2C_2_Master_Star
      +                          t();
 12848   005684  EC5B  F02D         	call	_I2C_2_Master_Start	;wreg free
 12849                           
 12850                           ;MazeRobot.X/color.c: 80:  I2C_2_Master_Write(0x52 | 0x00);
 12851   005688  0E52               	movlw	82
 12852   00568A  EC50  F02D         	call	_I2C_2_Master_Write
 12853                           
 12854                           ;MazeRobot.X/color.c: 81:  I2C_2_Master_Write(0xA0 | 0x14);
 12855   00568E  0EB4               	movlw	180
 12856   005690  EC50  F02D         	call	_I2C_2_Master_Write
 12857                           
 12858                           ;MazeRobot.X/color.c: 82:  I2C_2_Master_RepStart();
 12859   005694  EC60  F02D         	call	_I2C_2_Master_RepStart	;wreg free
 12860                           
 12861                           ;MazeRobot.X/color.c: 83:  I2C_2_Master_Write(0x52 | 0x01);
 12862   005698  0E53               	movlw	83
 12863   00569A  EC50  F02D         	call	_I2C_2_Master_Write
 12864                           
 12865                           ;MazeRobot.X/color.c: 84:  tmp=I2C_2_Master_Read(1);
 12866   00569E  0E01               	movlw	1
 12867   0056A0  ECF9  F02B         	call	_I2C_2_Master_Read
 12868   0056A4  6E0B               	movwf	??_color_read_Clear^0,c
 12869   0056A6  500B               	movf	??_color_read_Clear^0,w,c
 12870   0056A8  6E0E               	movwf	color_read_Clear@tmp^0,c
 12871   0056AA  6A0F               	clrf	(color_read_Clear@tmp+1)^0,c
 12872                           
 12873                           ;MazeRobot.X/color.c: 85:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 12874   0056AC  0E00               	movlw	0
 12875   0056AE  ECF9  F02B         	call	_I2C_2_Master_Read
 12876   0056B2  6E0B               	movwf	??_color_read_Clear^0,c
 12877   0056B4  500B               	movf	??_color_read_Clear^0,w,c
 12878   0056B6  6E0D               	movwf	(??_color_read_Clear+2)^0,c
 12879   0056B8  6A0C               	clrf	(??_color_read_Clear+1)^0,c
 12880   0056BA  500E               	movf	color_read_Clear@tmp^0,w,c
 12881   0056BC  100C               	iorwf	(??_color_read_Clear+1)^0,w,c
 12882   0056BE  6E0E               	movwf	color_read_Clear@tmp^0,c
 12883   0056C0  500F               	movf	(color_read_Clear@tmp+1)^0,w,c
 12884   0056C2  100D               	iorwf	(??_color_read_Clear+2)^0,w,c
 12885   0056C4  6E0F               	movwf	(color_read_Clear@tmp+1)^0,c
 12886                           
 12887                           ;MazeRobot.X/color.c: 86:  I2C_2_Master_Stop();
 12888   0056C6  EC56  F02D         	call	_I2C_2_Master_Stop	;wreg free
 12889   0056CA                     
 12890                           ;MazeRobot.X/color.c: 87:  return tmp;
 12891   0056CA  C00E  F009         	movff	color_read_Clear@tmp,?_color_read_Clear
 12892   0056CE  C00F  F00A         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
 12893   0056D2  0012               	return		;funcret
 12894   0056D4                     __end_of_color_read_Clear:
 12895                           	callstack 0
 12896                           
 12897 ;; *************** function _color_read_Blue *****************
 12898 ;; Defined at:
 12899 ;;		line 62 in file "MazeRobot.X/color.c"
 12900 ;; Parameters:    Size  Location     Type
 12901 ;;		None
 12902 ;; Auto vars:     Size  Location     Type
 12903 ;;  tmp             2   13[COMRAM] unsigned int 
 12904 ;; Return value:  Size  Location     Type
 12905 ;;                  2    8[COMRAM] unsigned int 
 12906 ;; Registers used:
 12907 ;;		wreg, status,2, status,0, cstack
 12908 ;; Tracked objects:
 12909 ;;		On entry : 0/0
 12910 ;;		On exit  : 0/0
 12911 ;;		Unchanged: 0/0
 12912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12913 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12914 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12915 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12916 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12917 ;;Total ram usage:        7 bytes
 12918 ;; Hardware stack levels used: 1
 12919 ;; Hardware stack levels required when called: 4
 12920 ;; This function calls:
 12921 ;;		_I2C_2_Master_Read
 12922 ;;		_I2C_2_Master_RepStart
 12923 ;;		_I2C_2_Master_Start
 12924 ;;		_I2C_2_Master_Stop
 12925 ;;		_I2C_2_Master_Write
 12926 ;; This function is called by:
 12927 ;;		_getColor
 12928 ;; This function uses a non-reentrant model
 12929 ;;
 12930                           
 12931                           	psect	text56
 12932   0056D4                     __ptext56:
 12933                           	callstack 0
 12934   0056D4                     _color_read_Blue:
 12935                           	callstack 24
 12936   0056D4                     
 12937                           ;MazeRobot.X/color.c: 64:  unsigned int tmp;;MazeRobot.X/color.c: 65:  I2C_2_Master_Star
      +                          t();
 12938   0056D4  EC5B  F02D         	call	_I2C_2_Master_Start	;wreg free
 12939                           
 12940                           ;MazeRobot.X/color.c: 66:  I2C_2_Master_Write(0x52 | 0x00);
 12941   0056D8  0E52               	movlw	82
 12942   0056DA  EC50  F02D         	call	_I2C_2_Master_Write
 12943                           
 12944                           ;MazeRobot.X/color.c: 67:  I2C_2_Master_Write(0xA0 | 0x1A);
 12945   0056DE  0EBA               	movlw	186
 12946   0056E0  EC50  F02D         	call	_I2C_2_Master_Write
 12947                           
 12948                           ;MazeRobot.X/color.c: 68:  I2C_2_Master_RepStart();
 12949   0056E4  EC60  F02D         	call	_I2C_2_Master_RepStart	;wreg free
 12950                           
 12951                           ;MazeRobot.X/color.c: 69:  I2C_2_Master_Write(0x52 | 0x01);
 12952   0056E8  0E53               	movlw	83
 12953   0056EA  EC50  F02D         	call	_I2C_2_Master_Write
 12954                           
 12955                           ;MazeRobot.X/color.c: 70:  tmp=I2C_2_Master_Read(1);
 12956   0056EE  0E01               	movlw	1
 12957   0056F0  ECF9  F02B         	call	_I2C_2_Master_Read
 12958   0056F4  6E0B               	movwf	??_color_read_Blue^0,c
 12959   0056F6  500B               	movf	??_color_read_Blue^0,w,c
 12960   0056F8  6E0E               	movwf	color_read_Blue@tmp^0,c
 12961   0056FA  6A0F               	clrf	(color_read_Blue@tmp+1)^0,c
 12962                           
 12963                           ;MazeRobot.X/color.c: 71:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 12964   0056FC  0E00               	movlw	0
 12965   0056FE  ECF9  F02B         	call	_I2C_2_Master_Read
 12966   005702  6E0B               	movwf	??_color_read_Blue^0,c
 12967   005704  500B               	movf	??_color_read_Blue^0,w,c
 12968   005706  6E0D               	movwf	(??_color_read_Blue+2)^0,c
 12969   005708  6A0C               	clrf	(??_color_read_Blue+1)^0,c
 12970   00570A  500E               	movf	color_read_Blue@tmp^0,w,c
 12971   00570C  100C               	iorwf	(??_color_read_Blue+1)^0,w,c
 12972   00570E  6E0E               	movwf	color_read_Blue@tmp^0,c
 12973   005710  500F               	movf	(color_read_Blue@tmp+1)^0,w,c
 12974   005712  100D               	iorwf	(??_color_read_Blue+2)^0,w,c
 12975   005714  6E0F               	movwf	(color_read_Blue@tmp+1)^0,c
 12976                           
 12977                           ;MazeRobot.X/color.c: 72:  I2C_2_Master_Stop();
 12978   005716  EC56  F02D         	call	_I2C_2_Master_Stop	;wreg free
 12979   00571A                     
 12980                           ;MazeRobot.X/color.c: 73:  return tmp;
 12981   00571A  C00E  F009         	movff	color_read_Blue@tmp,?_color_read_Blue
 12982   00571E  C00F  F00A         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
 12983   005722  0012               	return		;funcret
 12984   005724                     __end_of_color_read_Blue:
 12985                           	callstack 0
 12986                           
 12987 ;; *************** function _I2C_2_Master_Write *****************
 12988 ;; Defined at:
 12989 ;;		line 45 in file "MazeRobot.X/i2c.c"
 12990 ;; Parameters:    Size  Location     Type
 12991 ;;  data_byte       1    wreg     unsigned char 
 12992 ;; Auto vars:     Size  Location     Type
 12993 ;;  data_byte       1    5[COMRAM] unsigned char 
 12994 ;; Return value:  Size  Location     Type
 12995 ;;                  1    wreg      void 
 12996 ;; Registers used:
 12997 ;;		wreg, status,2, status,0, cstack
 12998 ;; Tracked objects:
 12999 ;;		On entry : 0/0
 13000 ;;		On exit  : 0/0
 13001 ;;		Unchanged: 0/0
 13002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13004 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13006 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13007 ;;Total ram usage:        1 bytes
 13008 ;; Hardware stack levels used: 1
 13009 ;; Hardware stack levels required when called: 3
 13010 ;; This function calls:
 13011 ;;		_I2C_2_Master_Idle
 13012 ;; This function is called by:
 13013 ;;		_color_writetoaddr
 13014 ;;		_color_read_Red
 13015 ;;		_color_read_Green
 13016 ;;		_color_read_Blue
 13017 ;;		_color_read_Clear
 13018 ;; This function uses a non-reentrant model
 13019 ;;
 13020                           
 13021                           	psect	text57
 13022   005AA0                     __ptext57:
 13023                           	callstack 0
 13024   005AA0                     _I2C_2_Master_Write:
 13025                           	callstack 24
 13026                           
 13027                           ;incstack = 0
 13028                           ;I2C_2_Master_Write@data_byte stored from wreg
 13029   005AA0  6E06               	movwf	I2C_2_Master_Write@data_byte^0,c
 13030   005AA2                     
 13031                           ;MazeRobot.X/i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);MazeRobot.X/i2c
      +                          .c: 46: {;MazeRobot.X/i2c.c: 47:   I2C_2_Master_Idle();
 13032   005AA2  ECF4  F02C         	call	_I2C_2_Master_Idle	;wreg free
 13033   005AA6                     
 13034                           ;MazeRobot.X/i2c.c: 48:   SSP2BUF = data_byte;
 13035   005AA6  C006  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
 13036   005AAA  0012               	return		;funcret
 13037   005AAC                     __end_of_I2C_2_Master_Write:
 13038                           	callstack 0
 13039                           
 13040 ;; *************** function _I2C_2_Master_Stop *****************
 13041 ;; Defined at:
 13042 ;;		line 39 in file "MazeRobot.X/i2c.c"
 13043 ;; Parameters:    Size  Location     Type
 13044 ;;		None
 13045 ;; Auto vars:     Size  Location     Type
 13046 ;;		None
 13047 ;; Return value:  Size  Location     Type
 13048 ;;                  1    wreg      void 
 13049 ;; Registers used:
 13050 ;;		wreg, status,2, status,0, cstack
 13051 ;; Tracked objects:
 13052 ;;		On entry : 0/0
 13053 ;;		On exit  : 0/0
 13054 ;;		Unchanged: 0/0
 13055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13057 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13059 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13060 ;;Total ram usage:        0 bytes
 13061 ;; Hardware stack levels used: 1
 13062 ;; Hardware stack levels required when called: 3
 13063 ;; This function calls:
 13064 ;;		_I2C_2_Master_Idle
 13065 ;; This function is called by:
 13066 ;;		_color_writetoaddr
 13067 ;;		_color_read_Red
 13068 ;;		_color_read_Green
 13069 ;;		_color_read_Blue
 13070 ;;		_color_read_Clear
 13071 ;; This function uses a non-reentrant model
 13072 ;;
 13073                           
 13074                           	psect	text58
 13075   005AAC                     __ptext58:
 13076                           	callstack 0
 13077   005AAC                     _I2C_2_Master_Stop:
 13078                           	callstack 24
 13079   005AAC                     
 13080                           ;MazeRobot.X/i2c.c: 41:   I2C_2_Master_Idle();
 13081   005AAC  ECF4  F02C         	call	_I2C_2_Master_Idle	;wreg free
 13082   005AB0                     
 13083                           ;MazeRobot.X/i2c.c: 42:   SSP2CON2bits.PEN = 1;
 13084   005AB0  010E               	movlb	14	; () banked
 13085   005AB2  85DA               	bsf	218,2,b	;volatile
 13086   005AB4                     
 13087                           ; BSR set to: 14
 13088   005AB4  0012               	return		;funcret
 13089   005AB6                     __end_of_I2C_2_Master_Stop:
 13090                           	callstack 0
 13091                           
 13092 ;; *************** function _I2C_2_Master_Start *****************
 13093 ;; Defined at:
 13094 ;;		line 27 in file "MazeRobot.X/i2c.c"
 13095 ;; Parameters:    Size  Location     Type
 13096 ;;		None
 13097 ;; Auto vars:     Size  Location     Type
 13098 ;;		None
 13099 ;; Return value:  Size  Location     Type
 13100 ;;                  1    wreg      void 
 13101 ;; Registers used:
 13102 ;;		wreg, status,2, status,0, cstack
 13103 ;; Tracked objects:
 13104 ;;		On entry : 0/0
 13105 ;;		On exit  : 0/0
 13106 ;;		Unchanged: 0/0
 13107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13111 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13112 ;;Total ram usage:        0 bytes
 13113 ;; Hardware stack levels used: 1
 13114 ;; Hardware stack levels required when called: 3
 13115 ;; This function calls:
 13116 ;;		_I2C_2_Master_Idle
 13117 ;; This function is called by:
 13118 ;;		_color_writetoaddr
 13119 ;;		_color_read_Red
 13120 ;;		_color_read_Green
 13121 ;;		_color_read_Blue
 13122 ;;		_color_read_Clear
 13123 ;; This function uses a non-reentrant model
 13124 ;;
 13125                           
 13126                           	psect	text59
 13127   005AB6                     __ptext59:
 13128                           	callstack 0
 13129   005AB6                     _I2C_2_Master_Start:
 13130                           	callstack 24
 13131   005AB6                     
 13132                           ;MazeRobot.X/i2c.c: 29:   I2C_2_Master_Idle();
 13133   005AB6  ECF4  F02C         	call	_I2C_2_Master_Idle	;wreg free
 13134   005ABA                     
 13135                           ;MazeRobot.X/i2c.c: 30:   SSP2CON2bits.SEN = 1;
 13136   005ABA  010E               	movlb	14	; () banked
 13137   005ABC  81DA               	bsf	218,0,b	;volatile
 13138   005ABE                     
 13139                           ; BSR set to: 14
 13140   005ABE  0012               	return		;funcret
 13141   005AC0                     __end_of_I2C_2_Master_Start:
 13142                           	callstack 0
 13143                           
 13144 ;; *************** function _I2C_2_Master_RepStart *****************
 13145 ;; Defined at:
 13146 ;;		line 33 in file "MazeRobot.X/i2c.c"
 13147 ;; Parameters:    Size  Location     Type
 13148 ;;		None
 13149 ;; Auto vars:     Size  Location     Type
 13150 ;;		None
 13151 ;; Return value:  Size  Location     Type
 13152 ;;                  1    wreg      void 
 13153 ;; Registers used:
 13154 ;;		wreg, status,2, status,0, cstack
 13155 ;; Tracked objects:
 13156 ;;		On entry : 0/0
 13157 ;;		On exit  : 0/0
 13158 ;;		Unchanged: 0/0
 13159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13163 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13164 ;;Total ram usage:        0 bytes
 13165 ;; Hardware stack levels used: 1
 13166 ;; Hardware stack levels required when called: 3
 13167 ;; This function calls:
 13168 ;;		_I2C_2_Master_Idle
 13169 ;; This function is called by:
 13170 ;;		_color_read_Red
 13171 ;;		_color_read_Green
 13172 ;;		_color_read_Blue
 13173 ;;		_color_read_Clear
 13174 ;; This function uses a non-reentrant model
 13175 ;;
 13176                           
 13177                           	psect	text60
 13178   005AC0                     __ptext60:
 13179                           	callstack 0
 13180   005AC0                     _I2C_2_Master_RepStart:
 13181                           	callstack 24
 13182   005AC0                     
 13183                           ;MazeRobot.X/i2c.c: 35:   I2C_2_Master_Idle();
 13184   005AC0  ECF4  F02C         	call	_I2C_2_Master_Idle	;wreg free
 13185   005AC4                     
 13186                           ;MazeRobot.X/i2c.c: 36:   SSP2CON2bits.RSEN = 1;
 13187   005AC4  010E               	movlb	14	; () banked
 13188   005AC6  83DA               	bsf	218,1,b	;volatile
 13189   005AC8                     
 13190                           ; BSR set to: 14
 13191   005AC8  0012               	return		;funcret
 13192   005ACA                     __end_of_I2C_2_Master_RepStart:
 13193                           	callstack 0
 13194                           
 13195 ;; *************** function _I2C_2_Master_Read *****************
 13196 ;; Defined at:
 13197 ;;		line 51 in file "MazeRobot.X/i2c.c"
 13198 ;; Parameters:    Size  Location     Type
 13199 ;;  ack             1    wreg     unsigned char 
 13200 ;; Auto vars:     Size  Location     Type
 13201 ;;  ack             1    6[COMRAM] unsigned char 
 13202 ;;  tmp             1    7[COMRAM] unsigned char 
 13203 ;; Return value:  Size  Location     Type
 13204 ;;                  1    wreg      unsigned char 
 13205 ;; Registers used:
 13206 ;;		wreg, status,2, status,0, cstack
 13207 ;; Tracked objects:
 13208 ;;		On entry : 0/0
 13209 ;;		On exit  : 0/0
 13210 ;;		Unchanged: 0/0
 13211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13213 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13214 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13215 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13216 ;;Total ram usage:        3 bytes
 13217 ;; Hardware stack levels used: 1
 13218 ;; Hardware stack levels required when called: 3
 13219 ;; This function calls:
 13220 ;;		_I2C_2_Master_Idle
 13221 ;; This function is called by:
 13222 ;;		_color_read_Red
 13223 ;;		_color_read_Green
 13224 ;;		_color_read_Blue
 13225 ;;		_color_read_Clear
 13226 ;; This function uses a non-reentrant model
 13227 ;;
 13228                           
 13229                           	psect	text61
 13230   0057F2                     __ptext61:
 13231                           	callstack 0
 13232   0057F2                     _I2C_2_Master_Read:
 13233                           	callstack 24
 13234                           
 13235                           ; BSR set to: 14
 13236                           ;incstack = 0
 13237                           ;I2C_2_Master_Read@ack stored from wreg
 13238   0057F2  6E07               	movwf	I2C_2_Master_Read@ack^0,c
 13239   0057F4                     
 13240                           ;MazeRobot.X/i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);MazeRobot.X/i
      +                          2c.c: 52: {;MazeRobot.X/i2c.c: 53:   unsigned char tmp;;MazeRobot.X/i2c.c: 54:   I2C_2_M
      +                          aster_Idle();
 13241   0057F4  ECF4  F02C         	call	_I2C_2_Master_Idle	;wreg free
 13242   0057F8                     
 13243                           ;MazeRobot.X/i2c.c: 55:   SSP2CON2bits.RCEN = 1;
 13244   0057F8  010E               	movlb	14	; () banked
 13245   0057FA  87DA               	bsf	218,3,b	;volatile
 13246                           
 13247                           ;MazeRobot.X/i2c.c: 56:   I2C_2_Master_Idle();
 13248   0057FC  ECF4  F02C         	call	_I2C_2_Master_Idle	;wreg free
 13249   005800                     
 13250                           ;MazeRobot.X/i2c.c: 57:   tmp = SSP2BUF;
 13251   005800  CED5 F008          	movff	3797,I2C_2_Master_Read@tmp	;volatile
 13252                           
 13253                           ;MazeRobot.X/i2c.c: 58:   I2C_2_Master_Idle();
 13254   005804  ECF4  F02C         	call	_I2C_2_Master_Idle	;wreg free
 13255   005808                     
 13256                           ;MazeRobot.X/i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
 13257   005808  5007               	movf	I2C_2_Master_Read@ack^0,w,c
 13258   00580A  B4D8               	btfsc	status,2,c
 13259   00580C  EF0A  F02C         	goto	u5001
 13260   005810  EF0E  F02C         	goto	u5000
 13261   005814                     u5001:
 13262   005814  6A06               	clrf	??_I2C_2_Master_Read^0,c
 13263   005816  2A06               	incf	??_I2C_2_Master_Read^0,f,c
 13264   005818  EF0F  F02C         	goto	u5018
 13265   00581C                     u5000:
 13266   00581C  6A06               	clrf	??_I2C_2_Master_Read^0,c
 13267   00581E                     u5018:
 13268   00581E  3A06               	swapf	??_I2C_2_Master_Read^0,f,c
 13269   005820  4606               	rlncf	??_I2C_2_Master_Read^0,f,c
 13270   005822  010E               	movlb	14	; () banked
 13271   005824  51DA               	movf	218,w,b	;volatile
 13272   005826  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
 13273   005828  0BDF               	andlw	-33
 13274   00582A  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
 13275   00582C  6FDA               	movwf	218,b	;volatile
 13276   00582E                     
 13277                           ; BSR set to: 14
 13278                           ;MazeRobot.X/i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
 13279   00582E  89DA               	bsf	218,4,b	;volatile
 13280   005830                     
 13281                           ; BSR set to: 14
 13282                           ;MazeRobot.X/i2c.c: 61:   return tmp;
 13283   005830  5008               	movf	I2C_2_Master_Read@tmp^0,w,c
 13284   005832                     
 13285                           ; BSR set to: 14
 13286   005832  0012               	return		;funcret
 13287   005834                     __end_of_I2C_2_Master_Read:
 13288                           	callstack 0
 13289                           
 13290 ;; *************** function _I2C_2_Master_Idle *****************
 13291 ;; Defined at:
 13292 ;;		line 22 in file "MazeRobot.X/i2c.c"
 13293 ;; Parameters:    Size  Location     Type
 13294 ;;		None
 13295 ;; Auto vars:     Size  Location     Type
 13296 ;;		None
 13297 ;; Return value:  Size  Location     Type
 13298 ;;                  1    wreg      void 
 13299 ;; Registers used:
 13300 ;;		wreg, status,2, status,0
 13301 ;; Tracked objects:
 13302 ;;		On entry : 0/0
 13303 ;;		On exit  : 0/0
 13304 ;;		Unchanged: 0/0
 13305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13308 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13309 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13310 ;;Total ram usage:        1 bytes
 13311 ;; Hardware stack levels used: 1
 13312 ;; Hardware stack levels required when called: 2
 13313 ;; This function calls:
 13314 ;;		Nothing
 13315 ;; This function is called by:
 13316 ;;		_I2C_2_Master_Start
 13317 ;;		_I2C_2_Master_RepStart
 13318 ;;		_I2C_2_Master_Stop
 13319 ;;		_I2C_2_Master_Write
 13320 ;;		_I2C_2_Master_Read
 13321 ;; This function uses a non-reentrant model
 13322 ;;
 13323                           
 13324                           	psect	text62
 13325   0059E8                     __ptext62:
 13326                           	callstack 0
 13327   0059E8                     _I2C_2_Master_Idle:
 13328                           	callstack 24
 13329   0059E8                     l282:
 13330   0059E8  010E               	movlb	14	; () banked
 13331   0059EA  B5D8               	btfsc	216,2,b	;volatile
 13332   0059EC  EFFA  F02C         	goto	u4561
 13333   0059F0  EFFC  F02C         	goto	u4560
 13334   0059F4                     u4561:
 13335   0059F4  EFF4  F02C         	goto	l282
 13336   0059F8                     u4560:
 13337   0059F8                     
 13338                           ; BSR set to: 14
 13339   0059F8  CEDA F005          	movff	3802,??_I2C_2_Master_Idle	;volatile
 13340   0059FC  0E1F               	movlw	31
 13341   0059FE  1605               	andwf	??_I2C_2_Master_Idle^0,f,c
 13342   005A00  A4D8               	btfss	status,2,c
 13343   005A02  EF05  F02D         	goto	u4571
 13344   005A06  EF07  F02D         	goto	u4570
 13345   005A0A                     u4571:
 13346   005A0A  EFF4  F02C         	goto	l282
 13347   005A0E                     u4570:
 13348   005A0E                     
 13349                           ; BSR set to: 14
 13350   005A0E  0012               	return		;funcret
 13351   005A10                     __end_of_I2C_2_Master_Idle:
 13352                           	callstack 0
 13353                           
 13354 ;; *************** function _DCmotorsInit *****************
 13355 ;; Defined at:
 13356 ;;		line 73 in file "MazeRobot.X/dc_motor.c"
 13357 ;; Parameters:    Size  Location     Type
 13358 ;;  mL              2    4[COMRAM] PTR struct DC_motor
 13359 ;;		 -> main@motorLeft(9), 
 13360 ;;  mR              2    6[COMRAM] PTR struct DC_motor
 13361 ;;		 -> main@motorRight(9), 
 13362 ;; Auto vars:     Size  Location     Type
 13363 ;;		None
 13364 ;; Return value:  Size  Location     Type
 13365 ;;                  1    wreg      void 
 13366 ;; Registers used:
 13367 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13368 ;; Tracked objects:
 13369 ;;		On entry : 0/0
 13370 ;;		On exit  : 0/0
 13371 ;;		Unchanged: 0/0
 13372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13373 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13374 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13376 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13377 ;;Total ram usage:        4 bytes
 13378 ;; Hardware stack levels used: 1
 13379 ;; Hardware stack levels required when called: 2
 13380 ;; This function calls:
 13381 ;;		Nothing
 13382 ;; This function is called by:
 13383 ;;		_main
 13384 ;; This function uses a non-reentrant model
 13385 ;;
 13386                           
 13387                           	psect	text63
 13388   004E5C                     __ptext63:
 13389                           	callstack 0
 13390   004E5C                     _DCmotorsInit:
 13391                           	callstack 28
 13392   004E5C                     
 13393                           ;MazeRobot.X/dc_motor.c: 75:     mL->power = 0;
 13394   004E5C  C005  FFD9         	movff	DCmotorsInit@mL,fsr2l
 13395   004E60  C006  FFDA         	movff	DCmotorsInit@mL+1,fsr2h
 13396   004E64  0E00               	movlw	0
 13397   004E66  6EDF               	movwf	indf2,c
 13398   004E68                     
 13399                           ;MazeRobot.X/dc_motor.c: 76:     mL->direction = 1;
 13400   004E68  EE20 F001          	lfsr	2,1
 13401   004E6C  5005               	movf	DCmotorsInit@mL^0,w,c
 13402   004E6E  26D9               	addwf	fsr2l,f,c
 13403   004E70  5006               	movf	(DCmotorsInit@mL+1)^0,w,c
 13404   004E72  22DA               	addwfc	fsr2h,f,c
 13405   004E74  0E01               	movlw	1
 13406   004E76  6EDF               	movwf	indf2,c
 13407   004E78                     
 13408                           ;MazeRobot.X/dc_motor.c: 77:     mL->brakemode = 1;
 13409   004E78  EE20 F002          	lfsr	2,2
 13410   004E7C  5005               	movf	DCmotorsInit@mL^0,w,c
 13411   004E7E  26D9               	addwf	fsr2l,f,c
 13412   004E80  5006               	movf	(DCmotorsInit@mL+1)^0,w,c
 13413   004E82  22DA               	addwfc	fsr2h,f,c
 13414   004E84  0E01               	movlw	1
 13415   004E86  6EDF               	movwf	indf2,c
 13416   004E88                     
 13417                           ;MazeRobot.X/dc_motor.c: 78:     mL->posDutyHighByte = (unsigned char *)(&CCPR1H);
 13418   004E88  EE20 F005          	lfsr	2,5
 13419   004E8C  5005               	movf	DCmotorsInit@mL^0,w,c
 13420   004E8E  26D9               	addwf	fsr2l,f,c
 13421   004E90  5006               	movf	(DCmotorsInit@mL+1)^0,w,c
 13422   004E92  22DA               	addwfc	fsr2h,f,c
 13423   004E94  0EAA               	movlw	170
 13424   004E96  6EDE               	movwf	postinc2,c
 13425   004E98  0E0F               	movlw	15
 13426   004E9A  6EDD               	movwf	postdec2,c
 13427   004E9C                     
 13428                           ;MazeRobot.X/dc_motor.c: 79:     mL->negDutyHighByte = (unsigned char *)(&CCPR2H);
 13429   004E9C  EE20 F007          	lfsr	2,7
 13430   004EA0  5005               	movf	DCmotorsInit@mL^0,w,c
 13431   004EA2  26D9               	addwf	fsr2l,f,c
 13432   004EA4  5006               	movf	(DCmotorsInit@mL+1)^0,w,c
 13433   004EA6  22DA               	addwfc	fsr2h,f,c
 13434   004EA8  0EA6               	movlw	166
 13435   004EAA  6EDE               	movwf	postinc2,c
 13436   004EAC  0E0F               	movlw	15
 13437   004EAE  6EDD               	movwf	postdec2,c
 13438   004EB0                     
 13439                           ;MazeRobot.X/dc_motor.c: 80:     mL->PWMperiod = 199 ;
 13440   004EB0  EE20 F003          	lfsr	2,3
 13441   004EB4  5005               	movf	DCmotorsInit@mL^0,w,c
 13442   004EB6  26D9               	addwf	fsr2l,f,c
 13443   004EB8  5006               	movf	(DCmotorsInit@mL+1)^0,w,c
 13444   004EBA  22DA               	addwfc	fsr2h,f,c
 13445   004EBC  0EC7               	movlw	199
 13446   004EBE  6EDE               	movwf	postinc2,c
 13447   004EC0  0E00               	movlw	0
 13448   004EC2  6EDD               	movwf	postdec2,c
 13449   004EC4                     
 13450                           ;MazeRobot.X/dc_motor.c: 82:     mR->power = 0;
 13451   004EC4  C007  FFD9         	movff	DCmotorsInit@mR,fsr2l
 13452   004EC8  C008  FFDA         	movff	DCmotorsInit@mR+1,fsr2h
 13453   004ECC  0E00               	movlw	0
 13454   004ECE  6EDF               	movwf	indf2,c
 13455                           
 13456                           ;MazeRobot.X/dc_motor.c: 83:     mR->direction = 1;
 13457   004ED0  EE20 F001          	lfsr	2,1
 13458   004ED4  5007               	movf	DCmotorsInit@mR^0,w,c
 13459   004ED6  26D9               	addwf	fsr2l,f,c
 13460   004ED8  5008               	movf	(DCmotorsInit@mR+1)^0,w,c
 13461   004EDA  22DA               	addwfc	fsr2h,f,c
 13462   004EDC  0E01               	movlw	1
 13463   004EDE  6EDF               	movwf	indf2,c
 13464                           
 13465                           ;MazeRobot.X/dc_motor.c: 84:     mR->brakemode = 1;
 13466   004EE0  EE20 F002          	lfsr	2,2
 13467   004EE4  5007               	movf	DCmotorsInit@mR^0,w,c
 13468   004EE6  26D9               	addwf	fsr2l,f,c
 13469   004EE8  5008               	movf	(DCmotorsInit@mR+1)^0,w,c
 13470   004EEA  22DA               	addwfc	fsr2h,f,c
 13471   004EEC  0E01               	movlw	1
 13472   004EEE  6EDF               	movwf	indf2,c
 13473                           
 13474                           ;MazeRobot.X/dc_motor.c: 85:     mR->posDutyHighByte = (unsigned char *)(&CCPR3H);
 13475   004EF0  EE20 F005          	lfsr	2,5
 13476   004EF4  5007               	movf	DCmotorsInit@mR^0,w,c
 13477   004EF6  26D9               	addwf	fsr2l,f,c
 13478   004EF8  5008               	movf	(DCmotorsInit@mR+1)^0,w,c
 13479   004EFA  22DA               	addwfc	fsr2h,f,c
 13480   004EFC  0E25               	movlw	37
 13481   004EFE  6EDE               	movwf	postinc2,c
 13482   004F00  0E0F               	movlw	15
 13483   004F02  6EDD               	movwf	postdec2,c
 13484                           
 13485                           ;MazeRobot.X/dc_motor.c: 86:     mR->negDutyHighByte = (unsigned char *)(&CCPR4H);
 13486   004F04  EE20 F007          	lfsr	2,7
 13487   004F08  5007               	movf	DCmotorsInit@mR^0,w,c
 13488   004F0A  26D9               	addwf	fsr2l,f,c
 13489   004F0C  5008               	movf	(DCmotorsInit@mR+1)^0,w,c
 13490   004F0E  22DA               	addwfc	fsr2h,f,c
 13491   004F10  0E21               	movlw	33
 13492   004F12  6EDE               	movwf	postinc2,c
 13493   004F14  0E0F               	movlw	15
 13494   004F16  6EDD               	movwf	postdec2,c
 13495                           
 13496                           ;MazeRobot.X/dc_motor.c: 87:     mR->PWMperiod = 199 ;
 13497   004F18  EE20 F003          	lfsr	2,3
 13498   004F1C  5007               	movf	DCmotorsInit@mR^0,w,c
 13499   004F1E  26D9               	addwf	fsr2l,f,c
 13500   004F20  5008               	movf	(DCmotorsInit@mR+1)^0,w,c
 13501   004F22  22DA               	addwfc	fsr2h,f,c
 13502   004F24  0EC7               	movlw	199
 13503   004F26  6EDE               	movwf	postinc2,c
 13504   004F28  0E00               	movlw	0
 13505   004F2A  6EDD               	movwf	postdec2,c
 13506   004F2C  0012               	return		;funcret
 13507   004F2E                     __end_of_DCmotorsInit:
 13508                           	callstack 0
 13509                           
 13510 ;; *************** function _HighISR *****************
 13511 ;; Defined at:
 13512 ;;		line 132 in file "serialTest.c"
 13513 ;; Parameters:    Size  Location     Type
 13514 ;;		None
 13515 ;; Auto vars:     Size  Location     Type
 13516 ;;		None
 13517 ;; Return value:  Size  Location     Type
 13518 ;;                  1    wreg      void 
 13519 ;; Registers used:
 13520 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13521 ;; Tracked objects:
 13522 ;;		On entry : 0/0
 13523 ;;		On exit  : 0/0
 13524 ;;		Unchanged: 0/0
 13525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13527 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13528 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13529 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13530 ;;Total ram usage:        2 bytes
 13531 ;; Hardware stack levels used: 1
 13532 ;; Hardware stack levels required when called: 1
 13533 ;; This function calls:
 13534 ;;		_getCharFromTxBuf
 13535 ;;		_putCharToRxBuf
 13536 ;;		i2_isDataInTxBuf
 13537 ;; This function is called by:
 13538 ;;		Interrupt level 2
 13539 ;; This function uses a non-reentrant model
 13540 ;;
 13541                           
 13542                           	psect	intcode
 13543   000008                     __pintcode:
 13544                           	callstack 0
 13545   000008                     _HighISR:
 13546                           	callstack 20
 13547                           
 13548                           ;incstack = 0
 13549   000008  825B               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
 13550   00000A  CFD9 F003          	movff	fsr2l,??_HighISR
 13551   00000E  CFDA F004          	movff	fsr2h,??_HighISR+1
 13552   000012                     
 13553                           ;serialTest.c: 134:     if (PIR4bits.RC4IF){
 13554   000012  010E               	movlb	14	; () banked
 13555   000014  A737               	btfss	55,3,b	;volatile
 13556   000016  EF0F  F000         	goto	i2u616_41
 13557   00001A  EF11  F000         	goto	i2u616_40
 13558   00001E                     i2u616_41:
 13559   00001E  EF14  F000         	goto	i2l5519
 13560   000022                     i2u616_40:
 13561   000022                     
 13562                           ; BSR set to: 14
 13563                           ;serialTest.c: 135:         putCharToRxBuf(RC4REG);
 13564   000022  51E3               	movf	227,w,b	;volatile
 13565   000024  ECDF  F02C         	call	_putCharToRxBuf
 13566   000028                     i2l5519:
 13567                           
 13568                           ;serialTest.c: 138:     if (PIR4bits.TX4IF && PIE4bits.TX4IE == 1){
 13569   000028  010E               	movlb	14	; () banked
 13570   00002A  A537               	btfss	55,2,b	;volatile
 13571   00002C  EF1A  F000         	goto	i2u617_41
 13572   000030  EF1C  F000         	goto	i2u617_40
 13573   000034                     i2u617_41:
 13574   000034  EF35  F000         	goto	i2l513
 13575   000038                     i2u617_40:
 13576   000038                     
 13577                           ; BSR set to: 14
 13578   000038  A52D               	btfss	45,2,b	;volatile
 13579   00003A  EF21  F000         	goto	i2u618_41
 13580   00003E  EF23  F000         	goto	i2u618_40
 13581   000042                     i2u618_41:
 13582   000042  EF35  F000         	goto	i2l513
 13583   000046                     i2u618_40:
 13584   000046                     
 13585                           ; BSR set to: 14
 13586                           ;serialTest.c: 139:         if (isDataInTxBuf() == 1){
 13587   000046  EC44  F02D         	call	i2_isDataInTxBuf	;wreg free
 13588   00004A  06E8               	decf	wreg,f,c
 13589   00004C  A4D8               	btfss	status,2,c
 13590   00004E  EF2B  F000         	goto	i2u619_41
 13591   000052  EF2D  F000         	goto	i2u619_40
 13592   000056                     i2u619_41:
 13593   000056  EF33  F000         	goto	i2l511
 13594   00005A                     i2u619_40:
 13595   00005A                     
 13596                           ;serialTest.c: 140:            TX4REG = getCharFromTxBuf();
 13597   00005A  EC9F  F02C         	call	_getCharFromTxBuf	;wreg free
 13598   00005E  010E               	movlb	14	; () banked
 13599   000060  6FE4               	movwf	228,b	;volatile
 13600                           
 13601                           ;serialTest.c: 141:         }
 13602   000062  EF35  F000         	goto	i2l513
 13603   000066                     i2l511:
 13604                           
 13605                           ;serialTest.c: 143:            PIE4bits.TX4IE = 0;
 13606   000066  010E               	movlb	14	; () banked
 13607   000068  952D               	bcf	45,2,b	;volatile
 13608   00006A                     i2l513:
 13609                           
 13610                           ; BSR set to: 14
 13611   00006A  C004  FFDA         	movff	??_HighISR+1,fsr2h
 13612   00006E  C003  FFD9         	movff	??_HighISR,fsr2l
 13613   000072  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
 13614   000074  0011               	retfie		f
 13615   000076                     __end_of_HighISR:
 13616                           	callstack 0
 13617                           
 13618 ;; *************** function i2_isDataInTxBuf *****************
 13619 ;; Defined at:
 13620 ;;		line 113 in file "serialTest.c"
 13621 ;; Parameters:    Size  Location     Type
 13622 ;;		None
 13623 ;; Auto vars:     Size  Location     Type
 13624 ;;		None
 13625 ;; Return value:  Size  Location     Type
 13626 ;;                  1    wreg      unsigned char 
 13627 ;; Registers used:
 13628 ;;		wreg, status,2, status,0
 13629 ;; Tracked objects:
 13630 ;;		On entry : 0/0
 13631 ;;		On exit  : 0/0
 13632 ;;		Unchanged: 0/0
 13633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13635 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13637 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13638 ;;Total ram usage:        0 bytes
 13639 ;; Hardware stack levels used: 1
 13640 ;; This function calls:
 13641 ;;		Nothing
 13642 ;; This function is called by:
 13643 ;;		_HighISR
 13644 ;; This function uses a non-reentrant model
 13645 ;;
 13646                           
 13647                           	psect	text65
 13648   005A88                     __ptext65:
 13649                           	callstack 0
 13650   005A88                     i2_isDataInTxBuf:
 13651                           	callstack 20
 13652   005A88                     
 13653                           ;serialTest.c: 114:     return (TxBufWriteCnt!=TxBufReadCnt);
 13654   005A88  5057               	movf	_TxBufReadCnt^0,w,c	;volatile
 13655   005A8A  1858               	xorwf	_TxBufWriteCnt^0,w,c	;volatile
 13656   005A8C  A4D8               	btfss	status,2,c
 13657   005A8E  EF4B  F02D         	goto	i2u282_41
 13658   005A92  EF4E  F02D         	goto	i2u282_40
 13659   005A96                     i2u282_41:
 13660   005A96  0E01               	movlw	1
 13661   005A98  EF4F  F02D         	goto	i2u283_40
 13662   005A9C                     i2u282_40:
 13663   005A9C  0E00               	movlw	0
 13664   005A9E                     i2u283_40:
 13665   005A9E  0012               	return		;funcret
 13666   005AA0                     __end_ofi2_isDataInTxBuf:
 13667                           	callstack 0
 13668                           
 13669 ;; *************** function _putCharToRxBuf *****************
 13670 ;; Defined at:
 13671 ;;		line 85 in file "serialTest.c"
 13672 ;; Parameters:    Size  Location     Type
 13673 ;;  byte            1    wreg     unsigned char 
 13674 ;; Auto vars:     Size  Location     Type
 13675 ;;  byte            1    0[COMRAM] unsigned char 
 13676 ;; Return value:  Size  Location     Type
 13677 ;;                  1    wreg      void 
 13678 ;; Registers used:
 13679 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13680 ;; Tracked objects:
 13681 ;;		On entry : 0/0
 13682 ;;		On exit  : 0/0
 13683 ;;		Unchanged: 0/0
 13684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13686 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13688 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13689 ;;Total ram usage:        1 bytes
 13690 ;; Hardware stack levels used: 1
 13691 ;; This function calls:
 13692 ;;		Nothing
 13693 ;; This function is called by:
 13694 ;;		_HighISR
 13695 ;; This function uses a non-reentrant model
 13696 ;;
 13697                           
 13698                           	psect	text66
 13699   0059BE                     __ptext66:
 13700                           	callstack 0
 13701   0059BE                     _putCharToRxBuf:
 13702                           	callstack 20
 13703                           
 13704                           ;incstack = 0
 13705                           ;putCharToRxBuf@byte stored from wreg
 13706   0059BE  6E01               	movwf	putCharToRxBuf@byte^0,c
 13707   0059C0                     
 13708                           ;serialTest.c: 86:     if (RxBufWriteCnt>=20) {RxBufWriteCnt=0;}
 13709   0059C0  0E13               	movlw	19
 13710   0059C2  645A               	cpfsgt	_RxBufWriteCnt^0,c	;volatile
 13711   0059C4  EFE6  F02C         	goto	i2u590_41
 13712   0059C8  EFE8  F02C         	goto	i2u590_40
 13713   0059CC                     i2u590_41:
 13714   0059CC  EFEA  F02C         	goto	i2l5337
 13715   0059D0                     i2u590_40:
 13716   0059D0  0E00               	movlw	0
 13717   0059D2  6E5A               	movwf	_RxBufWriteCnt^0,c	;volatile
 13718   0059D4                     i2l5337:
 13719                           
 13720                           ;serialTest.c: 87:     EUSART4RXbuf[RxBufWriteCnt++]=byte;
 13721   0059D4  0E6D               	movlw	low _EUSART4RXbuf
 13722   0059D6  245A               	addwf	_RxBufWriteCnt^0,w,c	;volatile
 13723   0059D8  6ED9               	movwf	fsr2l,c
 13724   0059DA  6ADA               	clrf	fsr2h,c
 13725   0059DC  0E01               	movlw	high _EUSART4RXbuf
 13726   0059DE  22DA               	addwfc	fsr2h,f,c
 13727   0059E0  C001  FFDF         	movff	putCharToRxBuf@byte,indf2
 13728   0059E4  2A5A               	incf	_RxBufWriteCnt^0,f,c	;volatile
 13729   0059E6  0012               	return		;funcret
 13730   0059E8                     __end_of_putCharToRxBuf:
 13731                           	callstack 0
 13732                           
 13733 ;; *************** function _getCharFromTxBuf *****************
 13734 ;; Defined at:
 13735 ;;		line 99 in file "serialTest.c"
 13736 ;; Parameters:    Size  Location     Type
 13737 ;;		None
 13738 ;; Auto vars:     Size  Location     Type
 13739 ;;		None
 13740 ;; Return value:  Size  Location     Type
 13741 ;;                  1    wreg      unsigned char 
 13742 ;; Registers used:
 13743 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13744 ;; Tracked objects:
 13745 ;;		On entry : 0/0
 13746 ;;		On exit  : 0/0
 13747 ;;		Unchanged: 0/0
 13748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13751 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13752 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13753 ;;Total ram usage:        2 bytes
 13754 ;; Hardware stack levels used: 1
 13755 ;; This function calls:
 13756 ;;		Nothing
 13757 ;; This function is called by:
 13758 ;;		_HighISR
 13759 ;; This function uses a non-reentrant model
 13760 ;;
 13761                           
 13762                           	psect	text67
 13763   00593E                     __ptext67:
 13764                           	callstack 0
 13765   00593E                     _getCharFromTxBuf:
 13766                           	callstack 20
 13767   00593E                     
 13768                           ;serialTest.c: 100:     if (TxBufReadCnt>=60) {TxBufReadCnt=0;}
 13769   00593E  0E3B               	movlw	59
 13770   005940  6457               	cpfsgt	_TxBufReadCnt^0,c	;volatile
 13771   005942  EFA5  F02C         	goto	i2u591_41
 13772   005946  EFA7  F02C         	goto	i2u591_40
 13773   00594A                     i2u591_41:
 13774   00594A  EFA9  F02C         	goto	i2l5345
 13775   00594E                     i2u591_40:
 13776   00594E  0E00               	movlw	0
 13777   005950  6E57               	movwf	_TxBufReadCnt^0,c	;volatile
 13778   005952                     i2l5345:
 13779                           
 13780                           ;serialTest.c: 101:     return EUSART4TXbuf[TxBufReadCnt++];
 13781   005952  2A57               	incf	_TxBufReadCnt^0,f,c	;volatile
 13782   005954  0457               	decf	_TxBufReadCnt^0,w,c	;volatile
 13783   005956  6E01               	movwf	??_getCharFromTxBuf^0,c
 13784   005958  6A02               	clrf	(??_getCharFromTxBuf+1)^0,c
 13785   00595A  0E00               	movlw	low _EUSART4TXbuf
 13786   00595C  2401               	addwf	??_getCharFromTxBuf^0,w,c
 13787   00595E  6ED9               	movwf	fsr2l,c
 13788   005960  0E02               	movlw	high _EUSART4TXbuf
 13789   005962  2002               	addwfc	(??_getCharFromTxBuf+1)^0,w,c
 13790   005964  6EDA               	movwf	fsr2h,c
 13791   005966  50DF               	movf	indf2,w,c
 13792   005968  0012               	return		;funcret
 13793   00596A                     __end_of_getCharFromTxBuf:
 13794                           	callstack 0
 13795                           
 13796                           	psect	rparam
 13797   000000                     
 13798                           	psect	temp
 13799   00005B                     btemp:
 13800                           	callstack 0
 13801   00005B                     	ds	1
 13802   000000                     int$flags	set	btemp
 13803   000000                     wtemp8	set	btemp+1
 13804   000000                     ttemp5	set	btemp+1
 13805   000000                     ttemp6	set	btemp+4
 13806   000000                     ttemp7	set	btemp+8
 13807                           
 13808                           	psect	idloc
 13809                           
 13810                           ;Config register IDLOC0 @ 0x200000
 13811                           ;	unspecified, using default values
 13812   200000                     	org	2097152
 13813   200000  0FFF               	dw	4095
 13814                           
 13815                           ;Config register IDLOC1 @ 0x200002
 13816                           ;	unspecified, using default values
 13817   200002                     	org	2097154
 13818   200002  0FFF               	dw	4095
 13819                           
 13820                           ;Config register IDLOC2 @ 0x200004
 13821                           ;	unspecified, using default values
 13822   200004                     	org	2097156
 13823   200004  0FFF               	dw	4095
 13824                           
 13825                           ;Config register IDLOC3 @ 0x200006
 13826                           ;	unspecified, using default values
 13827   200006                     	org	2097158
 13828   200006  0FFF               	dw	4095
 13829                           
 13830                           ;Config register IDLOC4 @ 0x200008
 13831                           ;	unspecified, using default values
 13832   200008                     	org	2097160
 13833   200008  0FFF               	dw	4095
 13834                           
 13835                           ;Config register IDLOC5 @ 0x20000A
 13836                           ;	unspecified, using default values
 13837   20000A                     	org	2097162
 13838   20000A  0FFF               	dw	4095
 13839                           
 13840                           ;Config register IDLOC6 @ 0x20000C
 13841                           ;	unspecified, using default values
 13842   20000C                     	org	2097164
 13843   20000C  0FFF               	dw	4095
 13844                           
 13845                           ;Config register IDLOC7 @ 0x20000E
 13846                           ;	unspecified, using default values
 13847   20000E                     	org	2097166
 13848   20000E  0FFF               	dw	4095
 13849                           
 13850                           	psect	config
 13851                           
 13852                           ;Config register CONFIG1L @ 0x300000
 13853                           ;	External Oscillator mode Selection bits
 13854                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
 13855                           ;	Power-up default value for COSC bits
 13856                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
 13857   300000                     	org	3145728
 13858   300000  AA                 	db	170
 13859                           
 13860                           ;Config register CONFIG1H @ 0x300001
 13861                           ;	unspecified, using default values
 13862                           ;	Clock Out Enable bit
 13863                           ;	CLKOUTEN = 0x1, unprogrammed default
 13864                           ;	Clock Switch Enable bit
 13865                           ;	CSWEN = 0x1, unprogrammed default
 13866                           ;	Fail-Safe Clock Monitor Enable bit
 13867                           ;	FCMEN = 0x1, unprogrammed default
 13868   300001                     	org	3145729
 13869   300001  FF                 	db	255
 13870                           
 13871                           ;Config register CONFIG2L @ 0x300002
 13872                           ;	unspecified, using default values
 13873                           ;	Master Clear Enable bit
 13874                           ;	MCLRE = 0x1, unprogrammed default
 13875                           ;	Power-up Timer Enable bit
 13876                           ;	PWRTE = 0x1, unprogrammed default
 13877                           ;	Low-power BOR enable bit
 13878                           ;	LPBOREN = 0x1, unprogrammed default
 13879                           ;	Brown-out Reset Enable bits
 13880                           ;	BOREN = 0x3, unprogrammed default
 13881   300002                     	org	3145730
 13882   300002  FF                 	db	255
 13883                           
 13884                           ;Config register CONFIG2H @ 0x300003
 13885                           ;	unspecified, using default values
 13886                           ;	Brown Out Reset Voltage selection bits
 13887                           ;	BORV = 0x3, unprogrammed default
 13888                           ;	ZCD Disable bit
 13889                           ;	ZCD = 0x1, unprogrammed default
 13890                           ;	PPSLOCK bit One-Way Set Enable bit
 13891                           ;	PPS1WAY = 0x1, unprogrammed default
 13892                           ;	Stack Full/Underflow Reset Enable bit
 13893                           ;	STVREN = 0x1, unprogrammed default
 13894                           ;	Debugger Enable bit
 13895                           ;	DEBUG = 0x1, unprogrammed default
 13896                           ;	Extended Instruction Set Enable bit
 13897                           ;	XINST = 0x1, unprogrammed default
 13898   300003                     	org	3145731
 13899   300003  FF                 	db	255
 13900                           
 13901                           ;Config register CONFIG3L @ 0x300004
 13902                           ;	WDT Period Select bits
 13903                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
 13904                           ;	WDT operating mode
 13905                           ;	WDTE = OFF, WDT Disabled
 13906   300004                     	org	3145732
 13907   300004  9F                 	db	159
 13908                           
 13909                           ;Config register CONFIG3H @ 0x300005
 13910                           ;	unspecified, using default values
 13911                           ;	WDT Window Select bits
 13912                           ;	WDTCWS = 0x7, unprogrammed default
 13913                           ;	WDT input clock selector
 13914                           ;	WDTCCS = 0x7, unprogrammed default
 13915   300005                     	org	3145733
 13916   300005  FF                 	db	255
 13917                           
 13918                           ;Config register CONFIG4L @ 0x300006
 13919                           ;	unspecified, using default values
 13920                           ;	Write Protection Block 0
 13921                           ;	WRT0 = 0x1, unprogrammed default
 13922                           ;	Write Protection Block 1
 13923                           ;	WRT1 = 0x1, unprogrammed default
 13924                           ;	Write Protection Block 2
 13925                           ;	WRT2 = 0x1, unprogrammed default
 13926                           ;	Write Protection Block 3
 13927                           ;	WRT3 = 0x1, unprogrammed default
 13928                           ;	Write Protection Block 3
 13929                           ;	WRT4 = 0x1, unprogrammed default
 13930                           ;	Write Protection Block 3
 13931                           ;	WRT5 = 0x1, unprogrammed default
 13932                           ;	Write Protection Block 3
 13933                           ;	WRT6 = 0x1, unprogrammed default
 13934                           ;	Write Protection Block 3
 13935                           ;	WRT7 = 0x1, unprogrammed default
 13936   300006                     	org	3145734
 13937   300006  FF                 	db	255
 13938                           
 13939                           ;Config register CONFIG4H @ 0x300007
 13940                           ;	unspecified, using default values
 13941                           ;	Configuration Register Write Protection bit
 13942                           ;	WRTC = 0x1, unprogrammed default
 13943                           ;	Boot Block Write Protection bit
 13944                           ;	WRTB = 0x1, unprogrammed default
 13945                           ;	Data EEPROM Write Protection bit
 13946                           ;	WRTD = 0x1, unprogrammed default
 13947                           ;	Scanner Enable bit
 13948                           ;	SCANE = 0x1, unprogrammed default
 13949                           ;	Low Voltage Programming Enable bit
 13950                           ;	LVP = 0x1, unprogrammed default
 13951   300007                     	org	3145735
 13952   300007  FF                 	db	255
 13953                           
 13954                           ;Config register CONFIG5L @ 0x300008
 13955                           ;	unspecified, using default values
 13956                           ;	UserNVM Program Memory Code Protection bit
 13957                           ;	CP = 0x1, unprogrammed default
 13958                           ;	DataNVM Memory Code Protection bit
 13959                           ;	CPD = 0x1, unprogrammed default
 13960   300008                     	org	3145736
 13961   300008  FF                 	db	255
 13962                           
 13963                           ;Config register CONFIG5H @ 0x300009
 13964                           ;	unspecified, using default values
 13965   300009                     	org	3145737
 13966   300009  FF                 	db	255
 13967                           
 13968                           ;Config register CONFIG6L @ 0x30000A
 13969                           ;	unspecified, using default values
 13970                           ;	Table Read Protection Block 0
 13971                           ;	EBTR0 = 0x1, unprogrammed default
 13972                           ;	Table Read Protection Block 1
 13973                           ;	EBTR1 = 0x1, unprogrammed default
 13974                           ;	Table Read Protection Block 2
 13975                           ;	EBTR2 = 0x1, unprogrammed default
 13976                           ;	Table Read Protection Block 3
 13977                           ;	EBTR3 = 0x1, unprogrammed default
 13978                           ;	Table Read Protection Block 4
 13979                           ;	EBTR4 = 0x1, unprogrammed default
 13980                           ;	Table Read Protection Block 5
 13981                           ;	EBTR5 = 0x1, unprogrammed default
 13982                           ;	Table Read Protection Block 6
 13983                           ;	EBTR6 = 0x1, unprogrammed default
 13984                           ;	Table Read Protection Block 7
 13985                           ;	EBTR7 = 0x1, unprogrammed default
 13986   30000A                     	org	3145738
 13987   30000A  FF                 	db	255
 13988                           
 13989                           ;Config register CONFIG6H @ 0x30000B
 13990                           ;	unspecified, using default values
 13991                           ;	Boot Block Table Read Protection bit
 13992                           ;	EBTRB = 0x1, unprogrammed default
 13993   30000B                     	org	3145739
 13994   30000B  FF                 	db	255
 13995                           tosu	equ	0xFFF
 13996                           tosh	equ	0xFFE
 13997                           tosl	equ	0xFFD
 13998                           stkptr	equ	0xFFC
 13999                           pclatu	equ	0xFFB
 14000                           pclath	equ	0xFFA
 14001                           pcl	equ	0xFF9
 14002                           tblptru	equ	0xFF8
 14003                           tblptrh	equ	0xFF7
 14004                           tblptrl	equ	0xFF6
 14005                           tablat	equ	0xFF5
 14006                           prodh	equ	0xFF4
 14007                           prodl	equ	0xFF3
 14008                           indf0	equ	0xFEF
 14009                           postinc0	equ	0xFEE
 14010                           postdec0	equ	0xFED
 14011                           preinc0	equ	0xFEC
 14012                           plusw0	equ	0xFEB
 14013                           fsr0h	equ	0xFEA
 14014                           fsr0l	equ	0xFE9
 14015                           wreg	equ	0xFE8
 14016                           indf1	equ	0xFE7
 14017                           postinc1	equ	0xFE6
 14018                           postdec1	equ	0xFE5
 14019                           preinc1	equ	0xFE4
 14020                           plusw1	equ	0xFE3
 14021                           fsr1h	equ	0xFE2
 14022                           fsr1l	equ	0xFE1
 14023                           bsr	equ	0xFE0
 14024                           indf2	equ	0xFDF
 14025                           postinc2	equ	0xFDE
 14026                           postdec2	equ	0xFDD
 14027                           preinc2	equ	0xFDC
 14028                           plusw2	equ	0xFDB
 14029                           fsr2h	equ	0xFDA
 14030                           fsr2l	equ	0xFD9
 14031                           status	equ	0xFD8

Data Sizes:
    Strings     42
    Constant    0
    Data        4
    BSS         181
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     86      90
    BANK0           160    138     159
    BANK1           256    109     209
    BANK2           256      0      60
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    strcpy@dest	PTR unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    strcpy@d	PTR unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    strcpy@src	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_6(CODE[4]), STR_3(CODE[4]), 

    strcpy@s	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_6(CODE[4]), STR_3(CODE[4]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    memcpy@d1	PTR void  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    memcpy@s1	PTR const void  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_2(CODE[15]), STR_1(CODE[19]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 19
		 -> STR_2(CODE[15]), STR_1(CODE[19]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 19
		 -> STR_2(CODE[15]), STR_1(CODE[19]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    S2684$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    sp__memcpy	PTR void  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    efgtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_2(CODE[15]), STR_1(CODE[19]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 40
		 -> ADC2String@buf(COMRAM[40]), colorDetect@string1(BANK1[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2600$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2600$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    TxBufferedString@string	PTR unsigned char  size(2) Largest target is 20
		 -> colorDetect@string1(BANK1[20]), 

    motorRight.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    motorRight.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    motorLeft.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    motorLeft.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    reverseSquareLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    reverseSquareLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    reverseSquareRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    reverseSquareRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    turnLeft_135@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft_135@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft_135@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft_135@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft_135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    turnLeft_135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    turnRight_135@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight_135@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight_135@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight_135@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight_135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    turnRight_135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    turn_180@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turn_180@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turn_180@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turn_180@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turn_180@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    turn_180@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    turnRight_90@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight_90@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight_90@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight_90@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight_90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    turnRight_90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    turnLeft_90@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft_90@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft_90@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft_90@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft_90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    turnLeft_90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    turnRight@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    reverse@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    reverse@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    reverse@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    reverse@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    reverse@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    reverse@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    forward@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    forward@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    forward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    forward@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    forward@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    forward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), main@motorLeft(BANK1[9]), 

    DCmotorsInit@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    S107DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    S107DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    colorDetect@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    colorDetect@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    colorDetect@whiteRGBVal	PTR struct RGB size(2) Largest target is 8
		 -> main@whiteRGBVal(BANK1[8]), 

    colorDetect@ambientRGBVal	PTR struct RGB size(2) Largest target is 8
		 -> main@ambientRGBVal(BANK1[8]), 

    whiteCal@v	PTR struct RGB size(2) Largest target is 8
		 -> main@whiteRGBVal(BANK1[8]), 

    ambientCal@v	PTR struct RGB size(2) Largest target is 8
		 -> main@ambientRGBVal(BANK1[8]), 

    getColor@v	PTR struct RGB size(2) Largest target is 8
		 -> main@whiteRGBVal(BANK1[8]), main@RGBVal(BANK1[8]), main@ambientRGBVal(BANK1[8]), colorDetect@RGBVal(BANK1[8]), 


Critical Paths under _main in COMRAM

    _whiteCal->_getColor
    _forward->_setMotorPWM
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _turn_180->_stop
    _turnRight_135->_stop
    _turnLeft_135->_stop
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_efgtoa
    _efgtoa->_floorf
    _floorf->___fldiv
    ___flsub->___fladd
    ___flmul->___flsub
    ___flge->___flmul
    ___fldiv->___flmul
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _reverseSquareRight->_turnRight_90
    _turnRight_90->_stop
    _reverseSquareLeft->_turnLeft_90
    _turnLeft_90->_stop
    _stop->_setMotorPWM
    _reverse->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _TxBufferedString->_putCharToTxBuf
    _ambientCal->_getColor
    _getColor->_color_read_Blue
    _getColor->_color_read_Clear
    _getColor->_color_read_Green
    _getColor->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle

Critical Paths under _HighISR in COMRAM

    _HighISR->_getCharFromTxBuf

Critical Paths under _main in BANK0

    _main->_colorDetect
    _colorDetect->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_efgtoa
    _efgtoa->_floorf

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_colorDetect

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               174   174      0  210426
                                            135 BANK0      3     3      0
                                             58 BANK1     51    51      0
                       _DCmotorsInit
                            ___fldiv
                             ___flge
                           ___xxtofl
                         _ambientCal
                        _colorDetect
                   _color_click_init
                            _forward
                           _getColor
                    _initDCmotorsPWM
                         _initUSART4
                               _stop
                           _whiteCal
 ---------------------------------------------------------------------------------
 (1) _whiteCal                                             6     4      2     988
                                             17 COMRAM     6     4      2
                           _getColor
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      76
                                              4 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _forward                                              5     1      4    3141
                                             23 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              8 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              6 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _colorDetect                                         76    64     12  185434
                                            121 BANK0     14     2     12
                                              0 BANK1     58    58      0
                   _TxBufferedString
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                           ___xxtofl
                           _getColor
                  _reverseSquareLeft
                 _reverseSquareRight
                          _sendTxBuf
                            _sprintf
                       _turnLeft_135
                        _turnLeft_90
                      _turnRight_135
                       _turnRight_90
                           _turn_180
 ---------------------------------------------------------------------------------
 (2) _turn_180                                             6     2      4   14483
                                             29 COMRAM     6     2      4
                            _reverse
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _turnRight_135                                        6     2      4   14483
                                             29 COMRAM     6     2      4
                            _reverse
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _turnLeft_135                                         6     2      4   14483
                                             29 COMRAM     6     2      4
                            _reverse
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             31    15     16   37201
                                             92 BANK0     29    13     16
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             8     2      6   36523
                                             84 BANK0      8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           23    17      6   36053
                                             84 COMRAM     2     2      0
                                             67 BANK0     17    11      6
                               _dtoa
                             _efgtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _efgtoa                                              54    47      7   29904
                                             82 COMRAM     2     2      0
                                             16 BANK0     51    44      7
                            ___fladd
                            ___fldiv
                             ___fleq
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                      ___fpclassifyf
                             _floorf
                               _labs
                             _memcpy
                                _pad
                             _strcpy
 ---------------------------------------------------------------------------------
 (6) _strcpy                                               8     4      4     400
                                              4 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (6) _memcpy                                              11     5      6     371
                                              4 COMRAM    11     5      6
 ---------------------------------------------------------------------------------
 (6) _labs                                                 8     4      4     294
                                              4 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (6) _floorf                                              20    16      4     669
                                             78 COMRAM     4     0      4
                                              0 BANK0     16    16      0
                            ___fldiv (ARG)
 ---------------------------------------------------------------------------------
 (6) ___fpclassifyf                                       14    10      4     287
                                              4 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (6) ___fltol                                             10     6      4    1409
                                              4 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (6) ___flsub                                              8     0      8    4257
                                             20 COMRAM     8     0      8
                            ___fladd
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (7) ___fladd                                             16     8      8    2414
                                              4 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 (6) ___flneg                                              4     0      4     121
                                              4 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (6) ___flmul                                             25    17      8    4864
                                             28 COMRAM    25    17      8
                            ___flsub (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (6) ___flge                                              12     4      8    5350
                                             53 COMRAM    12     4      8
                            ___flmul (ARG)
                            ___flsub (ARG)
 ---------------------------------------------------------------------------------
 (6) ___fleq                                              12     4      8     646
                                              4 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (6) ___fldiv                                             25    17      8    2615
                                             53 COMRAM    25    17      8
                            ___flmul (ARG)
                            ___flsub (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                35    25     10    4333
                                             31 COMRAM    35    25     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                 11     5      6    2683
                                             20 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (7) _fputs                                                7     3      4     931
                                             13 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                9     5      4     682
                                              4 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     142
                                             22 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___aomod                                             18     2     16     448
                                              4 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (6) ___aodiv                                             26    10     16     452
                                              4 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (2) _sendTxBuf                                            0     0      0       0
                      _isDataInTxBuf
 ---------------------------------------------------------------------------------
 (3) _isDataInTxBuf                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _reverseSquareRight                                   6     2      4   26173
                                             35 COMRAM     6     2      4
                            _reverse
                               _stop
                       _turnRight_90
 ---------------------------------------------------------------------------------
 (2) _turnRight_90                                         6     2      4   14635
                                             29 COMRAM     6     2      4
                            _reverse
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _reverseSquareLeft                                    6     2      4   26173
                                             35 COMRAM     6     2      4
                            _reverse
                               _stop
                        _turnLeft_90
 ---------------------------------------------------------------------------------
 (2) _turnLeft_90                                          6     2      4   14635
                                             29 COMRAM     6     2      4
                            _reverse
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 6     2      4    6853
                                             23 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _reverse                                              5     1      4    4357
                                             23 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          6     4      2    2725
                                             17 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     491
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     358
                                             10 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4    2078
                                              4 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (2) _TxBufferedString                                     2     0      2     143
                                              5 COMRAM     2     0      2
                     _putCharToTxBuf
 ---------------------------------------------------------------------------------
 (3) _putCharToTxBuf                                       1     1      0      22
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ambientCal                                           6     4      2    1064
                                             17 COMRAM     6     4      2
                           _getColor
 ---------------------------------------------------------------------------------
 (2) _getColor                                             2     0      2     844
                                             15 COMRAM     2     0      2
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (3) _color_read_Red                                       7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Green                                     7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Clear                                     7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Blue                                      7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Write                                   1     1      0      22
                                              5 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Read                                    3     3      0      45
                                              5 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Idle                                    1     1      0       0
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DCmotorsInit                                         4     0      4     416
                                              4 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _HighISR                                             2     2      0      22
                                              2 COMRAM     2     2      0
                   _getCharFromTxBuf
                     _putCharToRxBuf
                    i2_isDataInTxBuf
 ---------------------------------------------------------------------------------
 (11) i2_isDataInTxBuf                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _putCharToRxBuf                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (11) _getCharFromTxBuf                                    2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DCmotorsInit
   ___fldiv
     ___flmul (ARG)
       ___flsub (ARG)
         ___fladd
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___flsub (ARG)
     ___xxtofl (ARG)
   ___flge
     ___flmul (ARG)
     ___flsub (ARG)
   ___xxtofl
   _ambientCal
     _getColor
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_read_Clear
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
   _colorDetect
     _TxBufferedString
       _putCharToTxBuf
     ___fldiv
     ___flge
     ___flmul
     ___flsub
     ___xxtofl
     _getColor
     _reverseSquareLeft
       _reverse
         _setMotorPWM
           ___lwdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
       _turnLeft_90
         _reverse
         _setMotorPWM
         _stop
     _reverseSquareRight
       _reverse
       _stop
       _turnRight_90
         _reverse
         _setMotorPWM
         _stop
     _sendTxBuf
       _isDataInTxBuf
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
           _efgtoa
             ___fladd
             ___fldiv
             ___fleq
             ___flge
             ___flmul
             ___flneg
             ___flsub
             ___fltol
             ___fpclassifyf
             _floorf
               ___fldiv (ARG)
             _labs
             _memcpy
             _pad
             _strcpy
           _fputc
     _turnLeft_135
       _reverse
       _setMotorPWM
       _stop
     _turnLeft_90
     _turnRight_135
       _reverse
       _setMotorPWM
       _stop
     _turnRight_90
     _turn_180
       _reverse
       _setMotorPWM
       _stop
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _forward
     _setMotorPWM
   _getColor
   _initDCmotorsPWM
   _initUSART4
   _stop
   _whiteCal
     _getColor

 _HighISR (ROOT)
   _getCharFromTxBuf
   _putCharToRxBuf
   i2_isDataInTxBuf

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      62        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      3C       9       23.4%
BITBANK1           100      0       0       6        0.0%
BANK1              100     6D      D1       7       81.6%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     8A      9F       5       99.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     56      5A       1       95.7%
BITBIGSFRlhhhhl     52      0       0      42        0.0%
BITBIGSFRlhhhll     37      0       0      44        0.0%
BITBIGSFRlllhlh     2A      0       0      55        0.0%
BITBIGSFRlllll      26      0       0      60        0.0%
BITBIGSFRlhhhll     20      0       0      47        0.0%
BITBIGSFRlhhhll     1E      0       0      49        0.0%
BITBIGSFRhhhhhh     1B      0       0      33        0.0%
BITBIGSFRhhhhll     17      0       0      38        0.0%
BITBIGSFRhhhhhl     13      0       0      34        0.0%
BITBIGSFRlhhl       11      0       0      50        0.0%
BITBIGSFRhhhhlh      E      0       0      35        0.0%
BITBIGSFRhhhhhh      D      0       0      32        0.0%
BITBIGSFRlhhhll      C      0       0      48        0.0%
BITBIGSFRlllhll      9      0       0      57        0.0%
BITBIGSFRlllhlh      9      0       0      56        0.0%
BITBIGSFRlhhhll      8      0       0      45        0.0%
BITBIGSFRllllh       6      0       0      59        0.0%
BITBIGSFRlllhh       6      0       0      54        0.0%
BITBIGSFRlllhll      5      0       0      58        0.0%
BITBIGSFRllhl        5      0       0      53        0.0%
BITBIGSFRhhhhll      5      0       0      39        0.0%
BITBIGSFRllhh        3      0       0      52        0.0%
BITBIGSFRlhhhlh      2      0       0      43        0.0%
BITBIGSFRhhhhll      2      0       0      37        0.0%
BITBIGSFRlhhhhh      1      0       0      41        0.0%
BITBIGSFRlhhhll      1      0       0      46        0.0%
BITBIGSFRhhhhlh      1      0       0      36        0.0%
BITBIGSFRlhl         1      0       0      51        0.0%
BITBIGSFRhhll        1      0       0      40        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     206      61        0.0%
DATA                 0      0     206       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Tue Dec 13 19:47:10 2022

               _color_read_Red 55E4                   ___fldiv@aexp 004E                   ___fldiv@bexp 004D  
                 ___fldiv@sign 0046                _color_read_Blue 56D4                             l60 5A54  
                           l63 5632                             l72 56D2                             l80 4CAE  
                           l57 58DE                             l66 5682                             l75 5494  
                           l69 5722                             l85 4BCA            ___wmul@multiplicand 0007  
   __end_of_reverseSquareRight 5262               _color_read_Clear 5684               _color_read_Green 5634  
                          l105 1A54                            l300 5832                            l204 4E5A  
                          l222 46A2                            l240 4426                            l234 42E8  
                          l500 590E                            l252 52E2                            l228 4564  
                          l164 51DE                            l174 4046                            l246 47DE  
                          l167 4F2C                            l184 50A4                            l504 5A6E  
                          l249 5260                            l282 59E8                            l194 4D84  
                          l291 5AC8                            l451 593C                            l516 5A34  
                          l285 5A0E                            l294 5AB4                            l630 3EDA  
                          l279 5992                            l288 5ABE                            l297 5AAA  
                          l491 59BC                            l643 41AA                            l813 48E4  
                          l494 5A86                            l781 49A2                            l790 58AA  
                          l775 514E                            l786 49E8                            _abs 5834  
                          _pad 52E4                            wreg 000FE8                   ___flmul@aexp 002E  
                 ___flmul@bexp 002F                   ___flmul@sign 0029                   ___flmul@temp 0034  
                 ___flmul@prod 0030           reverseSquareRight@mL 0024           reverseSquareRight@mR 0026  
                 ___fltol@exp1 000E                           l1100 2F32                           l1014 53D0  
                         l1007 53C8                           l1111 2FF0                           l1103 2EF6  
                         l1112 2FDE                           l1130 29D4                           ?_abs 0017  
                         l1140 2C30                           l1044 263E                           l1109 2F78  
                         l1061 2758                           l1053 290E                           l1045 262C  
                         l1230 535C                           l1134 2D38                           l1070 2828  
                         l1046 25F2                           l1071 2816                           l1137 2BCA  
                         l1226 5306                           l1330 5540                           l1171 3BF6  
                         l1235 3798                           l1147 2CFA                           l1139 2C42  
                         l1403 57AC                           l1340 4AE6                           l1260 244E  
                         l1308 370A                           l1237 37A0                           l1174 3D52  
                         l1238 37E6                           l1086 5768                           l1263 1DE8  
                         l1185 3CEA                           l1345 586A                           l1249 3988  
                         l4001 298E                           l1265 1C2E                           l1178 3C8E  
                         l1098 30D2                           l1354 3B9E                           l1194 5592  
                         l4011 29E4                           l4003 299E                           l1348 5872  
                         l4101 2D24                           l4021 2A1E                           l4013 29F4  
                         l4005 29AE                           l1357 3AE2                           l1365 5426  
                         l1293 2230                           l1374 55E2                           l4103 2D28  
                         l4031 2A70                           l4023 2A34                           l4007 29BE  
                         l1368 5436                           l5001 5262                           l4121 5122  
                         l4113 50A6                           l4041 2AB6                           l4033 2A7E  
                         l4025 2A40                           l4017 2A08                           l4009 29C4  
                         l1386 4FF6                           l1394 57F0                           l5011 3BA2  
                         l4211 5388                           l4203 535E                           l5003 5276  
                         l4123 5146                           l4115 50D4                           l4131 4914  
                         l4051 2B24                           l4043 2AD0                           l4035 2A8A  
                         l4027 2A58                           l4019 2A14                           l4107 5724  
                         l5013 3BB2                           l4221 53BC                           l4213 5396  
                         l4205 5366                           l5005 528E                           l1397 5ACE  
                         l4125 514C                           l4117 50E4                           l4141 4982  
                         l4133 4924                           l4061 2BBA                           l4053 2B4E  
                         l4045 2AE0                           l4037 2A9A                           l4029 2A64  
                         l4109 5734                           l4301 5594                           l5101 4B4A  
                         l5031 3C78                           l5023 3C30                           l5015 3BC0  
                         l4223 53C2                           l4215 539C                           l4207 5378  
                         l5007 52BA                           l4231 5312                           l4119 5112  
                         l4143 4990                           l4135 4952                           l4071 2BFA  
                         l4063 2BC8                           l4055 2B84                           l4047 2AFC  
                         l4039 2AA6                           l4151 5874                           l4303 55A8  
                         l4311 55C8                           l5103 4B6C                           l5041 3CF8  
                         l5033 3C84                           l5025 3C38                           l5017 3C06  
                         l4217 53B2                           l4209 5380                           l4321 3F64  
                         l4313 3EDC                           l5009 52CE                           l4241 584E  
                         l4233 5326                           l4225 52E4                           l4145 49E0  
                         l4137 4962                           l4129 48E6                           l4081 2C6C  
                         l4073 2C28                           l4065 2BDA                           l4057 2B92  
                         l4049 2B08                           l4153 588A                           l3601 2568  
                         l4161 47F6                           l4305 55B4                           l6001 11C0  
                         l5105 4B84                           l4331 59F8                           l5051 3D40  
                         l5043 3CFA                           l5035 3CC0                           l5027 3C44  
                         l5019 3C1C                           l4219 53BA                           l4323 3FA6  
                         l4315 3EF8                           l3531 4F40                           l4235 532A  
                         l4227 52F2                           l4147 49E6                           l4139 4970  
                         l4091 2CE2                           l4083 2C96                           l4067 2BE8  
                         l4059 2BB0                           l4155 589A                           l3611 257C  
                         l3603 256C                           l4171 4846                           l4251 4A7C  
                         l4243 49EA                           l4307 55B8                           l6011 1236  
                         l6003 11D2                           l5107 4B90                           l5053 3D42  
                         l5045 3CFE                           l5037 3CCC                           l5029 3C76  
                         l4325 3FC2                           l4317 3F4C                           l3533 4F52  
                         l4237 5348                           l4229 52FE                           l4341 3770  
                         l4333 370C                           l4093 2CFE                           l4077 2C52  
                         l4085 2C9A                           l4069 2BEC                           l3701 27D8  
                         l3613 2580                           l3605 2570                           l3621 2590  
                         l4181 4870                           l4173 484A                           l4165 480A  
                         l4261 4ADE                           l4245 4A0A                           l4309 55C4  
                         l6101 1954                           l6021 12CE                           l6013 1268  
                         l6005 11E2                           l5061 58BA                           l5301 4D3C  
                         l5109 4BA8                           l5047 3D22                           l5039 3CDA  
                         l4327 4006                           l4319 3F60                           l4239 5834  
                         l3535 4F5C                           l4351 37CE                           l4343 378C  
                         l4335 372C                           l4095 2D0E                           l4087 2CB4  
                         l4079 2C5E                           l3703 27E6                           l3631 2600  
                         l3623 2594                           l3615 2584                           l3607 2574  
                         l3551 247C                           l3543 2450                           l4191 4898  
                         l4183 487A                           l4175 4858                           l4167 4834  
                         l4159 47E0                           l4247 4A48                           l4255 4A88  
                         l4271 53F0                           l6111 1A2E                           l6103 1986  
                         l6031 13BA                           l6023 1300                           l6015 127A  
                         l6007 1214                           l5063 58CA                           l5303 4D54  
                         l5311 591E                           l4329 59E8                           l5081 4C50  
                         l5073 4BD4                           l5049 3D32                           l3537 4F7A  
                         l3529 4F2E                           l4361 37FE                           l4353 37DA  
                         l4345 37A8                           l4337 3740                           l4097 2D1C  
                         l4089 2CC8                           l3713 2838                           l3721 288E  
                         l3705 27EA                           l3641 262A                           l3633 260C  
                         l3625 25BE                           l3617 2588                           l3609 2578  
                         l3561 24B6                           l3553 248C                           l3545 245C  
                         l4193 48A4                           l4185 4884                           l4169 4836  
                         l4257 4A9A                           l4249 4A70                           l4265 576A  
                         l6113 1A42                           l6105 19B8                           l6041 14BE  
                         l6033 1410                           l6025 1332                           l6017 128A  
                         l6009 1226                           l5065 58D4                           l5057 58AC  
                         l5305 4D6C                           l5321 5930                           l5313 5920  
                         l6201 31B0                           l6121 30E8                           l4611 5AA2  
                         l5083 4C68                           l5075 4BF6                           l5067 4BCC  
                         l3811 407E                           l3803 4048                           l3539 4FB0  
                         l4371 390A                           l4363 3880                           l4355 37E2  
                         l4347 37B8                           l4339 3750                           l4099 2D1E  
                         l3731 28E0                           l3723 289E                           l3715 2844  
                         l3707 27F8                           l3651 2680                           l3643 264C  
                         l3635 2610                           l3627 25DA                           l3619 258C  
                         l3571 24E4                           l3563 24BC                           l3555 249C  
                         l3547 246A                           l4195 48B4                           l4267 577A  
                         l6107 19EA                           l6043 14F0                           l6051 155A  
                         l6035 1466                           l6027 1364                           l6019 12BC  
                         l5059 58B0                           l5331 593A                           l5323 5932  
                         l5315 5922                           l5307 5910                           l6211 3270  
                         l6203 31C8                           l6131 30F2                           l6123 30EA  
                         l6115 30D4                           l4621 5AC4                           l4613 5AA6  
                         l5085 4C74                           l5077 4C12                           l3821 40E6  
                         l3813 408C                           l3805 404C                           l4381 3968  
                         l4373 3928                           l4365 3886                           l4357 37EE  
                         l4349 37BE                           l3901 2E9A                           l3741 28FE  
                         l3733 28E6                           l3725 28AE                           l3717 2852  
                         l3709 280E                           l3661 26BA                           l3653 268E  
                         l3645 265C                           l3637 261E                           l3629 25EA  
                         l3581 2518                           l3573 24E6                           l3565 24CE  
                         l3557 249E                           l3549 246C                           l4197 48C4  
                         l4269 53D2                           l6109 1A1C                           l6061 1616  
                         l6053 158C                           l6045 1522                           l6037 147A  
                         l6029 1388                           l5261 51AE                           l5325 5934  
                         l5317 5924                           l5309 5916                           l6221 338E  
                         l6213 3298                           l6205 3210                           l6141 30FC  
                         l6133 30F4                           l6125 30EC                           l6117 30D8  
                         ?_pad 0015                           l4631 582E                           l4623 57F4  
                         l4607 5AB6                           l4615 5AAC                           l5087 4C8C  
                         l5079 4C2E                           l3823 40F4                           l3831 415A  
                         l3815 40AC                           l3807 405A                           l3751 57D0  
                         l4375 3942                           l4367 388C                           l4359 37F8  
                         l3911 2EE6                           l3903 2EAA                           l3735 28E8  
                         l3727 28CE                           l3719 288C                           l3671 2726  
                         l3663 26BC                           l3655 269C                           l3639 2620  
                         l3591 2554                           l3575 24F6                           l3583 2520  
                         l3567 24D0                           l3559 24A6                           l4199 48D4  
                         l6071 1718                           l6055 15BE                           l6063 1628  
                         l6047 1534                           l6039 148C                           l5271 51D0  
                         l5263 51B8                           l5255 5150                           l5327 5936  
                         l5319 592E                           l5095 4AF0                           l6223 33A6  
                         l6215 32BA                           l6207 321C                           l6151 3106  
                         l6143 30FE                           l6135 30F6                           l6127 30EE  
                         l6119 30DC                           l5281 4E78                           l4633 5830  
                         l4625 57F8                           l4609 5ABA                           l4617 5AB0  
                         l3753 5A10                           l4641 5014                           l4801 4508  
                         l3761 3D58                           l3833 416A                           l3825 4122  
                         l3817 40CA                           l3809 407A                           l3745 57AE  
                         l4377 3952                           l4369 38F0                           l3921 2F30  
                         l3913 2EF4                           l3905 2EBA                           l3841 2D46  
                         l3737 28EE                           l3729 28D2                           l3681 277E  
                         l3673 2728                           l3665 26C6                           l3657 26A8  
                         l3649 2670                           l3593 2558                           l3585 2530  
                         l3577 2506                           l3569 24D6                           l6081 181C  
                         l6073 172C                           l6065 167E                           l6057 15F0  
                         l6049 1548                           l5273 51D2                           l5265 51BA  
                         l5257 5160                           l5329 5938                           l5097 4B12  
                         l5089 4AE8                           l6225 33B8                           l6217 3300  
                         l6209 3264                           l6161 3110                           l6153 3108  
                         l6145 3100                           l6137 30F8                           l6129 30F0  
                         l5283 4E88                           l4627 5800                           l4619 5AC0  
                         l3755 5A2C                           l4643 5020                           l4651 505C  
                         l4811 457A                           l4803 4520                           l3771 3DB8  
                         l3763 3D66                           l3835 418A                           l3827 4142  
                         l3819 40D2                           l3747 57BA                           l4379 3958  
                         l3931 2F76                           l3923 2F42                           l3915 2F00  
                         l3907 2EC2                           l3851 2D86                           l3843 2D54  
                         l3739 28FC                           l3691 27AC                           l3675 2738  
                         l3659 26AC                           l3667 26CC                           l3595 255C  
                         l3587 2542                           l3579 2516                           l6091 18B8  
                         l6083 182E                           l6067 16D4                           l6075 173E  
                         l6059 1602                           l5291 4CB0                           l5275 51DC  
                         l5267 51C4                           l5259 518A                           l5099 4B2E  
                         l6227 33D0                           l6219 335A                           l6171 311A  
                         l6163 3112                           l6155 310A                           l6147 3102  
                         l6139 30FA                           l5285 4E9C                           l5277 4E5C  
                         l4629 5808                           l4661 4DE2                           l4653 5074  
                         l4645 5038                           l4637 4FF8                           l4821 45F2  
                         l4813 4592                           l4805 4538                           l3781 3E02  
                         l3773 3DBC                           l3765 3D86                           l3829 4154  
                         l3749 57CC                           l3941 2FD6                           l3925 2F58  
                         l3933 2F88                           l3917 2F1E                           l3909 2ED2  
                         l3861 2DAC                           l3853 2D88                           l3845 2D56  
                         l3693 27BA                           l3685 2792                           l3669 26F2  
                         l3677 2748                           l3597 2560                           l3589 2550  
                         l5621 3A02                           l6325 3576                           l4901 42EA  
                         l6093 18EA                           l6085 1842                           l6077 1794  
                         l6069 1706                           l5293 4CF4                           l5269 51C6  
                         l6229 33E4                           l6181 3124                           l6173 311C  
                         l6165 3114                           l6157 310C                           l6149 3104  
                         l5287 4EB0                           l5279 4E68                           l4671 4E42  
                         l4663 4DEE                           l4655 508C                           l4647 5044  
                         l4639 4FFC                           l4831 4646                           l4823 4602  
                         l4815 45BE                           l4807 4550                           l3791 3E72  
                         l3783 3E10                           l3775 3DC8                           l3767 3D8A  
                         l3759 3D54                           l3951 3044                           l3935 2F96  
                         l3927 2F5E                           l3919 2F20                           l3871 2DEC  
                         l3863 2DBA                           l3847 2D66                           l3855 2D90  
                         l3839 2D3A                           l3695 27C2                           l3687 279C  
                         l3679 276E                           l3599 2564                           l5631 3AD2  
                         l5623 3A16                           l5711 1C3E                           l6327 3634  
                         l4911 4366                           l4903 42FE                           l6095 18FC  
                         l6079 17C6                           l6087 1854                           l5295 4D0C  
                         l6191 3156                           l6183 3124                           l6175 3120  
                         l6167 3116                           l6159 310E                           l5289 4EC4  
                         l4761 5634                           l4841 59A6                           l4665 4E06  
                         l4657 4D86                           l4649 5050                           l4833 465E  
                         l4825 4616                           l4817 45D2                           l4809 4566  
                         l3793 3E84                           l3785 3E22                           l3777 3DE6  
                         l3769 3D98                           l3961 30AE                           l3945 3000  
                         l3953 3048                           l3937 2F9A                           l3929 2F68  
                         l3881 2E2C                           l3873 2DEE                           l3865 2DBC  
                         l3857 2DA0                           l3849 2D76                           l3697 27C6  
                         l3689 27AA                           l5641 3B8E                           l5625 3A24  
                         l5633 3B06                           l5617 398A                           l5801 2182  
                         l5721 1D26                           l5713 1C44                           l5705 1BDE  
                         l6329 36BE                           l4921 43BE                           l4913 4376  
                         l4905 4316                           l6097 1910                           l6089 1886  
                         l5297 4D18                           l6193 318E                           l6185 312A  
                         l6177 3122                           l6169 3118                           l4763 567A  
                         l4755 55E4                           l4843 59AA                           l4659 4DCA  
                         l4667 4E12                           l4835 4676                           l4827 462E  
                         l4819 45E2                           l4931 51E0                           l3787 3E50  
                         l3779 3DEE                           l3795 3E8A                           l3963 30B2  
                         l3955 3062                           l3947 300C                           l3939 2FA8  
                         l3891 2E5C                           l3883 2E34                           l3867 2DCC  
                         l3875 2DF6                           l3859 2DA6                           l3699 27D6  
                         l5635 3B42                           l5619 39AA                           l5811 2250  
                         l5803 218E                           l5723 1D3A                           l5731 1DB6  
                         l5715 1C78                           l5707 1BF8                           l5651 1A7A  
                         l4923 43CA                           l4915 4386                           l4907 4342  
                         l6099 1922                           l5299 4D30                           l6195 3192  
                         l6187 313E                           l6179 3124                           l4773 5684  
                         l4757 562A                           l4845 59BA                           l4669 4E2A  
                         l4837 468E                           l4829 463A                           l4781 443C  
                         l4933 51F4                           l3797 3E9A                           l3789 3E70  
                         l3965 30C0                           l3957 3078                           l3949 301A  
                         l3893 2E5C                           l3885 2E38                           l3877 2E06  
                         l3869 2DDC                           l3981 292A                           l5637 3B56  
                         l5629 3A96                           l5821 2282                           l5813 2260  
                         l5805 2206                           l5741 1E1C                           l5733 1DF0  
                         l5725 1D6E                           l5717 1CB6                           l5661 1AC4  
                         l5653 1A7E                           l5645 1A56                           l5901 3594  
                         l4925 43E2                           l4917 439A                           l4909 4356  
                         l4941 41AC                           l4861 596A                           l6197 31AC  
                         l6189 314A                           l4767 56D4                           l4775 56CA  
                         l4839 5996                           l4791 44B4                           l4783 4454  
                         l4935 520C                           l4847 5A70                           l3799 3EBA  
                         l3967 30C6                           l3959 3092                           l3879 2E1C  
                         l3991 2962                           l3983 292C                           l5639 3B7E  
                         l5831 22B6                           l5823 2286                           l5815 2264  
                         l5807 2226                           l5751 1E6A                           l5743 1E20  
                         l5735 1E00                           l5727 1D76                           l5719 1CE8  
                         l5671 1B12                           l5663 1AD4                           l5655 1AA2  
                         l5647 1A5C                           l5911 364A                           l5903 35B8  
                         l4927 43FA                           l4919 43B2                           l4951 4228  
                         l4943 41C0                           l4871 5980                           l4863 5974  
                         l6199 31AE                           l4769 571A                           l4793 44C4  
                         l4785 4480                           l4937 5238                           l3969 30C8  
                         l3897 2E70                           l3889 2E4C                           l3993 2972  
                         l3985 293C                           l3977 2910                           l5841 2354  
                         l5833 22BA                           l5825 228C                           l5817 226A  
                         l5809 2242                           l5761 1F02                           l5745 1E32  
                         l5753 1E72                           l5737 1E0C                           l5681 1B4E  
                         l5673 1B24                           l5665 1AE0                           l5657 1AAC  
                         l5649 1A6C                           l5913 366A                           l5905 35EC  
                         l5921 36CC                           l4929 4412                           l4961 4280  
                         l4953 4238                           l4945 41D8                           l4865 597A  
                         l4873 5A38                           l4875 5438                           l4891 58E4  
                         l4795 44D8                           l4787 4494                           l4779 4428  
                         l4939 524C                           l3899 2E8A                           l3995 2978  
                         l3987 294C                           l3979 291C                           l5851 23AA  
                         l5835 22C0                           l5819 2272                           l5827 2292  
                         l5843 2358                           l5771 1FE6                           l5763 1F5A  
                         l5755 1E7A                           l5747 1E40                           l5739 1E14  
                         l5691 1BB0                           l5683 1B58                           l5675 1B28  
                         l5667 1AE8                           l5659 1AB4                           l4971 46A4  
                         l4963 428C                           l4955 4248                           l4947 4204  
                         l4867 597C                           l4893 58F2                           l4797 44F0  
                         l4789 44A4                           l3997 297E                           l3989 295C  
                         l5861 2426                           l5853 23DA                           l5845 2376  
                         l5837 2318                           l5829 22A4                           l5781 2080  
                         l5773 2018                           l5765 1F8E                           l5757 1E8A  
                         l5749 1E58                           l5693 1BB4                           l5677 1B2E  
                         l5669 1AEC                           l5909 3620                           l5925 36DE  
                         l4981 4720                           l4973 46B8                           l4965 42A4  
                         l4957 425C                           l4949 4218                           l4869 597E  
                         l4895 58F6                           l4799 44FC                           l3999 298C  
                         l5863 242E                           l5855 23E8                           l5847 2392  
                         l5839 234C                           l5791 2158                           l5783 20B4  
                         l5775 202E                           l5759 1E9E                           l5767 1F94  
                         l5695 1BBA                           l5679 1B36                           l5687 1B78  
                         l5919 369C                           l5871 343C                           l5951 54F8  
                         l4991 4778                           l4983 4730                           l4975 46D0  
                         l4967 42BC                           l4959 4274                           l4889 58E0  
                         l4897 5A56                           l5857 2400                           l5849 239A  
                         l5785 210A                           l5793 215C                           l5777 2060  
                         l5769 1FB2                           l5697 1BC2                           l5689 1B9E  
                         l5881 349E                           l5873 344A                           l5953 5516  
                         l5961 5554                           l4993 4784                           l4985 4740  
                         l4977 46FC                           l4969 42D4                           l4899 5A6A  
                         l5859 2410                           l5795 216C                           l5787 2110  
                         l5779 2070                           l5891 354A                           l5883 34F4  
                         l5875 344E                           l5867 3406                           l5955 5536  
                         l5963 555C                           l4995 479C                           l4987 4754  
                         l4979 4710                           l5971 0E2C                           l5797 2174  
                         l5789 2144                           l5893 3552                           l5877 345E  
                         l5869 342E                           l5949 54EC                           l5965 5564  
                         l4997 47B4                           l4989 476C                           l5981 0EA4  
                         l5973 0E38                           l5799 217A                           l5895 355A  
                         l5887 3524                           l5879 347E                           l5967 5580  
                         l5959 5542                           l4999 47CA                           l5991 10A4  
                         l5983 0EDC                           l5975 0E48                           l5889 3534  
                         l5993 1158                           l5985 0F14                           l5977 0E5E  
                         l5899 3562                           l5995 116A                           l5987 0F3C  
                         l5979 0E72                           l5997 11B0                           l5989 0FF0  
                         l5999 11BC                           STR_1 0E01                           STR_2 0E14  
                         STR_3 0E23                           STR_6 0E27                           u4000 29F4  
                         u3200 24CE                   _BAUD4CONbits 000EE9                           u4001 29F0  
                         u3201 24CA                           u3130 4F40                           u4010 2B6E  
                         u3210 24E4                           u3131 4F3C                           u3211 24E0  
                         u3140 4F52                           u4100 2CE2                           u4020 2BC8  
                         u3300 261E                           u3220 24F6                           u3141 4F4E  
                         u4101 2CDE                           u4021 2BC4                           u3301 261A  
                         u3221 24F2                           u3150 4F7A                           u4110 2D1C  
                         u4030 2BE8                           u3310 263E                           u3230 2506  
                         u3151 4F76                           u4111 2D18                           u4031 2BE4  
                         u4015 2B64                           u3311 263A                           u3231 2502  
                         u5000 581C                           u3160 4FB0                           u4120 50D4  
                         u4040 2BFA                           u4200 588A                           u3400 277E  
                         u3320 264C                           u3240 2542                           u5001 5814  
                         u3161 4FAC                           u4121 50D0                           u4041 2BF6  
                         u4201 5886                           u3401 277A                           u3321 2648  
                         u3241 253E                           u4130 5112                           u4050 2C28  
                         u3410 27AA                           u3330 265C                           u3250 2550  
                         u3170 246A                           u4210 47F6                           _T2PR 000FBC  
                         u4131 510E                           u4051 2C24                           u3411 27A6  
                         u3331 2658                           u3251 254C                           u3171 2466  
                         u4211 47F2                           u4300 53B2                           u5020 5014  
                         u4140 5146                           u4060 2C3E                           u3500 288C  
                         u3420 27BA                           u3340 268E                           u3260 25BE  
                         u3180 247C                           u4220 482A                           u4301 53AE  
                         u5021 5010                           u4141 5142                           u4061 2C3A  
                         u3501 2888                           u3421 27B6                           u3341 268A  
                         u3261 25BA                           u3181 2478                           u5030 5038  
                         u4310 52F2                           u4150 4914                           u4070 2C52  
                         u3510 289E                           u3430 27D6                           u3350 269C  
                         u3270 25D6                           u3190 248C                           u4230 4858  
                         u5031 5034                           u4311 52EE                           u4151 4910  
                         u4071 2C4E                           u3511 289A                           u3431 27D2  
                         u3351 2698                           u3271 25D0                           u3191 2488  
                         u4231 4854                           u5040 5074                           u5200 5A86  
                         u3600 3DE6                           u4320 5348                           u4160 4952  
                         u4080 2C6C                           u3520 28AE                           u3440 27E6  
                         u3360 26BA                           u3280 25D8                           u4240 486C  
                         u4400 4AD6                           u5041 5070                           u3601 3DE2  
                         u4321 5344                           u4161 494E                           u4081 2C68  
                         u3521 28AA                           u3441 27E2                           u3361 26B6  
                         u4241 4868                           u4225 4820                           u5018 581E  
                         u5050 508C                           u3610 3E10                           u4330 584E  
                         u4170 4970                           u4090 2CB4                           u3530 28CE  
                         u3450 27F8                           u3370 26F2                           u3290 2600  
                         u4250 4894                           u4410 57AC                           u5051 5088  
                         u3611 3E0C                           u4331 584A                           u4171 496C  
                         u4091 2CB0                           u3531 28CA                           u3451 27F4  
                         u3371 26EE                           u3291 25FC                           u4251 4890  
                         u4411 57A8                           u5220 590E                           u5300 3BB2  
                         u5060 4DE2                           u5140 4520                           u3620 3E50  
                         u3700 2D54                           u4180 4990                           u3540 28E0  
                         u3460 280E                           u3380 2738                           u4260 48B4  
                         u4340 4A2A                           u4420 53F0                           u5221 590A  
                         u5301 3BAE                           u5061 4DDE                           u5141 451C  
                         u3621 3E4C                           u3701 2D50                           u4181 498C  
                         u3541 28DC                           u3461 280A                           u3381 2734  
                         u4261 48B0                           u4421 53EC                           u5310 3BC0  
                         u5070 4E06                           u5150 4538                           u5230 5A6A  
                         u3630 3E9A                           u3710 2D66                           u4190 49E0  
                         u3550 28FC                           u3470 2824                           u3390 276E  
                         u4270 48C4                           u4350 4A48                           u5311 3BBC  
                         u5071 4E02                           u5151 4534                           u5231 5A66  
                         u3631 3E96                           u3711 2D62                           u4191 49DC  
                         u3551 28F8                           u3471 2820                           u3391 276A  
                         u4271 48C0                           u4351 4A44                           u5400 4BE6  
                         u5320 3C1C                           u4280 5378                           u5080 4E2A  
                         u5160 465E                           u3640 405A                           u3560 57F0  
                         u4600 3750                           u3800 2F1E                           u3720 2D76  
                         u3480 2838                           u4360 4A70                           u6200 39D4  
                         u5240 43E2                           u7000 317C                           u5401 4BDE  
                         u5321 3C18                           u4281 5374                           u5081 4E26  
                         u5161 465A                           u3641 4056                           u3561 57EC  
                         u4601 374C                           u3801 2F1A                           u3721 2D72  
                         u3481 2834                           u4361 4A6C                           u4345 4A20  
                         u5241 43DE                           u7001 3176                           u5330 3C72  
                         u4290 5396                           u5090 4E42                           u5170 4676  
                         u3570 3D66                           u3650 408C                           u4610 378C  
                         u3810 2F42                           u3730 2DBA                           u3490 2852  
                         u4370 4A9A                           u6210 3A02                           u4530 55E2  
                         u5250 43FA                           u7010 318E                           u7002 317E  
                         u5331 3C6E                           u4291 5392                           u5091 4E3E  
                         u5171 4672                           u3571 3D62                           u3651 4088  
                         u4611 3788                           u3811 2F3E                           u3731 2DB6  
                         u3491 284E                           u4371 4A96                           u6211 39FE  
                         u4531 55DE                           u5251 43F6                           u7011 318A  
                         u5420 4C2E                           u5180 59A6                           u5340 3CBC  
                         u4540 3EF8                           u3580 3D98                           u3660 40CA  
                         u4620 37B8                           u3900 3062                           u3820 2F58  
                         u3740 2DCC                           u6220 3A24                           u6300 1A7A  
                         u5260 42A4                           u5500 4B5C                           u7100 3246  
                         u7020 31C4                           u5421 4C2A                           u5181 59A2  
                         u5341 3CB8                           u4541 3EF4                           u3581 3D94  
                         u3661 40C6                           u4621 37B4                           u3901 305E  
                         u3821 2F54                           u3741 2DC8                           u6221 3A20  
                         u6205 39CA                           u6301 1A76                           u5261 42A0  
                         u5501 4B54                           u7101 323E                           u7021 31BE  
                         u5430 4C40                           u5350 3CDA                           u4550 3FC2  
                         u5190 5A84                           u3670 40F4                           u4630 37CE  
                         u3910 3092                           u3830 2F76                           u3750 2DDC  
                         u4390 4AD4                           u6310 1AC4                           u5270 42BC  
                         u7110 3264                           u7030 31C6                           u5431 4C38  
                         u5351 3CD6                           u4551 3FBE                           u5191 5A7E  
                         u3591 3DC2                           u3671 40F0                           u4631 37CA  
                         u3911 308E                           u3831 2F72                           u3751 2DD8  
                         u4391 4ACE                           u6311 1AC0                           u5271 42B8  
                         u7111 3260                           u4560 59F8                           u5360 3CEA  
                         u3680 4122                           u4640 390A                           u3920 30C0  
                         u3840 2F96                           u3760 2E1C                           u6240 3A92  
                         u6400 1D26                           u6320 1AD4                           u5280 479C  
                         u5520 4BBA                           u7120 3284                           u7040 31D8  
                         u4561 59F4                           u5361 3CE6                           u3681 411E  
                         u4641 3906                           u3921 30BC                           u3841 2F92  
                         u3761 2E18                           u4385 4AAC                           u6241 3A8E  
                         u6401 1D22                           u6321 1AD0                           u5281 4798  
                         u5521 4BB2                           u7121 327A                           u7041 31D2  
                         u4570 5A0E                           u5450 4C9E                           u5418 4BE8  
                         u5370 3CF8                           u3690 416A                           u4650 3928  
                         u3850 2FA8                           u3770 2E5C                           u3930 292A  
                         u6250 3AB6                           u6410 1DB2                           u6330 1B12  
                         u5290 47B4                           u7050 31DA                           u4571 5A0A  
                         u5451 4C96                           u5371 3CF4                           u3691 4166  
                         u4651 3924                           u3851 2FA4                           u3771 2E58  
                         u3931 2926                           u6235 3A38                           u6411 1DAE  
                         u6331 1B0E                           u5291 47B0                           u5380 3D32  
                         u4660 3942                           u4580 373C                           u3860 2FD6  
                         u3780 2ED2                           u3940 293C                           u6260 3AD2  
                         u6236 3A42                           u6500 2070                           u6420 1DE8  
                         u6340 1B24                           u7140 3334                           u7108 324A  
                         u7060 31F2                           u5381 3D2E                           u4661 393E  
                         u4581 3736                           u3861 2FD2                           u3781 2ECE  
                         u3941 2938                           u6261 3ACE                           u6237 3A52  
                         u6501 206C                           u6421 1DE4                           u6341 1B20  
                         u7141 332E                           u7061 31EA                           u5390 3D40  
                         u4670 3952                           u4590 373E                           u3870 2FEC  
                         u3790 2EF4                           u3950 294C                           u6270 3B26  
                         u6510 210A                           u6430 1E00                           u6350 1B9E  
                         u5518 4B5E                           u5470 4B02                           u7150 3336  
                         u7070 3210                           u5391 3D3C                           u4671 394E  
                         u3871 2FE8                           u3791 2EF0                           u3951 2948  
                         u6255 3AAC                           u6511 2106                           u6431 1DFC  
                         u6351 1B9A                           u5471 4AFA                           u7207 33F0  
                         u7071 320C                           u5448 4C42                           u3880 3000  
                         u3960 298C                           u6280 3B42                           u6600 23FC  
                         u6520 2158                           u6440 1E32                           u6360 1BB0  
                         u7160 335A                           u7080 322C                           u3881 2FFC  
                         u3961 2988                           u6281 3B3E                           u6521 2154  
                         u6441 1E2E                           u6361 1BAC                           u7217 4B1C  
                         u7161 3356                           u7081 3226                           u3890 301A  
                         u3970 299E                           u6290 3B7E                           u6610 2410  
                         u6530 2206                           u6450 1E40                           u6370 1C2A  
                         u5538 4BBC                           u5490 4B4A                           u7170 33B8  
                         u7138 3288                           u7090 322E                           u3891 3016  
                         u3971 299A                           u6291 3B7A                           u6275 3B1C  
                         u6611 240C                           u6531 2202                           u6451 1E3C  
                         u6371 1C26                           u7307 152A                           u7227 4B76  
                         u5491 4B46                           u7171 33B4                           u5468 4CA0  
                         u3980 29AE                           u6540 2242                           u6460 1E6A  
                         u6380 1CB6                           u6620 342E                           u6700 1268  
                         u7068 31F6                           u3981 29AA                           u6541 223E  
                         u6461 1E66                           u6381 1CB2                           u6621 342A  
                         u7317 1550                           u6701 1264                           u7237 4B9A  
                         u3990 29E4                           u6550 2250                           u6470 1FB2  
                         u6390 1CE8                           u6630 347E                           u6710 128A  
                         u3991 29E0                           u6551 224C                           u6471 1FAE  
                         u6391 1CE4                           u6631 347A                           u7407 1A24  
                         u7327 15F8                           u6711 1286                           u7247 58C0  
                         u6560 22A4                           u6480 2018                           u6640 349E  
                         u6800 14F0                           u6720 12BC                           u5488 4B04  
                         u6561 22A0                           u6481 2014                           u6641 349A  
                         u7417 1A4A                           u7337 161E                           u6801 14EC  
                         u6721 12B8                           u7257 1160                           u6570 2376  
                         u6490 2060                           u6650 35B4                           u6810 1522  
                         u6730 1300                           u6571 2372                           u6491 205C  
                         u6651 35B0                           u7507 47BE                           u7427 41CA  
                         u7347 170E                           u6811 151E                           u6731 12FC  
                         u7267 11C8                           u7187 319E                           u6580 2392  
                         u6660 5536                           u6900 181C                           u6820 158C  
                         u6740 1332                           u5860 4D0C                           u7517 51FE  
                         u6581 238E                           u6661 5532                           u7437 41F6  
                         u6901 1818                           u7357 1734                           u6821 1588  
                         u7277 136C                           u6741 132E                           u5861 4D08  
                         u7197 339A                           u6590 23FA                           u6910 1886  
                         u6830 15BE                           u6750 1364                           u6670 11E2  
                         u5870 4D30                           u7607 4680                           u7527 522A  
                         u6591 23F4                           u7447 42C6                           u6911 1882  
                         u7367 1824                           u6831 15BA                           u7287 137E  
                         u6751 1360                           u6671 11DE                           u5871 4D2C  
                         u6920 18B8                           u6840 15F0                           u6760 13BA  
                         u6680 1214                           u5880 4D54                           u7617 5096  
                         u7537 4446                           u7457 4308                           u6921 18B4  
                         u7377 184A                           u6841 15EC                           u7297 1482  
                         u6761 13B6                           u6681 1210                           u5881 4D50  
                         u6930 18EA                           u6850 167E                           u6770 1410  
                         u6690 1236                           u5890 4D6C                           u7627 4C00  
                         u7547 4472                           u7467 4334                           u7387 18F2  
                         u6931 18E6                           u6851 167A                           u6771 140C  
                         u6691 1232                           u5891 4D68                           u6940 1954  
                         u6860 16D4                           u6780 1466                           u7637 4C5A  
                         u7557 4542                           u7477 4404                           u6941 1950  
                         u7397 1918                           u6861 16D0                           u6781 1462  
                         u6950 1986                           u6870 1706                           u6790 14BE  
                         u7647 4C7E                           u7567 5280                           u7487 46C2  
                         u6951 1982                           u6871 1702                           u6791 14BA  
                         u6960 19B8                           u6880 1794                           u7577 52AC  
                         u7497 46EE                           u6961 19B4                           u6881 1790  
                         u6970 19EA                           u6890 17C6                           u7587 4584  
                         u6971 19E6                           u6891 17C2                           u6980 1A1C  
                         u7597 45B0                           u6981 1A18                           u6990 3166  
                         u6991 3160                           u6992 3168                           abs@a 0017  
                         _dbuf 0181                           _labs 53D2                           _main 30D4  
                         _dtoa 370C                           _prec 00F4                           pad@i 001C  
                         pad@p 0019                           fsr1h 000FE2                           fsr2h 000FDA  
                         indf2 000FDF                           fsr1l 000FE1                           pad@w 001E  
                         fsr2l 000FD9                           btemp 005B                           _stop 4FF8  
                ___fpclassifyf 49EA                           prodh 000FF4                           prodl 000FF3  
                         start 0076                ___fldiv@new_exp 0047         __end_of_color_read_Red 5634  
              __end_of_HighISR 0076                   ___param_bank 000000                    _turnLeft_90 4566  
                 main@clearRef 013E                          ??_abs 0019                          ??_pad 001B  
                ___fltol@sign1 000D                __end_of___aodiv 3EDC                          ?_labs 0005  
              __end_of___fladd 2910                          ?_main 0001                          ?_dtoa 0020  
              __end_of___aomod 41AC                __end_of___fldiv 30D4                __end_of___flneg 58AC  
              __end_of___flmul 2D3A                __end_of___flsub 576A                __end_of___fltol 48E6  
                        ?_stop 0018                __end_of___lwdiv 53D2                          i2l511 0066  
                        i2l513 006A                          i2l480 59E6                          i2l494 5A9E  
                        i2l487 5968                   vfpfcnvrt@fmt 00A5                          _TMR0H 000FD4  
                        _TMR0L 000FD3     __end_of_I2C_2_Master_Start 5AC0     __end_of_I2C_2_Master_Write 5AAC  
                        _flags 00FA                          _fputc 4F2E                __end_of_forward 4D86  
                        _fputs 57AE                          labs@a 0005                          pad@fp 0015  
                        _width 00F2                          _putch 5ACE                          dtoa@d 0022  
                        dtoa@i 0040                          dtoa@n 0038                          dtoa@p 0034  
                        dtoa@s 0042                          dtoa@w 0036                          tablat 000FF5  
              __end_of_reverse 4E5C                          ttemp5 005C                          ttemp6 005F  
                        ttemp7 0063                          status 000FD8                          wtemp8 005C  
              __end_of_sprintf 5594                 ?___fpclassifyf 0005        __end_of_color_read_Blue 5724  
        _I2C_2_Master_RepStart 5AC0             putCharToRxBuf@byte 0001                ?_color_read_Red 0009  
              __initialization 5496                   __end_of_labs 5438                   __end_of_main 3406  
                 __end_of_dtoa 398A                i2_isDataInTxBuf 5A88                   __end_of_stop 50A6  
                 _turnLeft_135 46A4             putCharToTxBuf@byte 0005                  colorDetect@mL 00E1  
                       ??_labs 0009                  colorDetect@mR 00E3                         ??_main 00E7  
                       ??_dtoa 002A                         ??_stop 001C                  __activetblptr 000003  
                 _turnRight_90 4428                   ?_setMotorPWM 0012                         ?_fputc 0005  
                       ?_fputs 000E                         _CCPR1H 000FAA                         _CCPR2H 000FA6  
                       _CCPR3H 000F25                         _CCPR4H 000F21                         ?_putch 0001  
        colorDetect@greenPrint 0132                         _RC0PPS 000E62                         _RC4REG 000EE3  
                       _RE2PPS 000E74                         _RD5PPS 000E6F                         _RC7PPS 000E69  
                       _RD6PPS 000E70                         _RE4PPS 000E76                         i2l3237 5A88  
                       i2l5341 593E                         i2l5333 59C0                         i2l5343 594E  
                       i2l5335 59D0                         i2l5345 5952                         i2l5337 59D4  
                       i2l5521 0038                         i2l5339 59E4                         i2l5523 0046  
                       i2l5515 0012                         _RG6PPS 000E88                         i2l5525 005A  
                       i2l5517 0022                         i2l5519 0028                      ??_HighISR 0003  
     __end_of_color_click_init 58E0                         _RX4PPS 000E15                         _TX4REG 000EE4  
             __end_of___xxtofl 3D54               __end_of_getColor 5496                   _CCPTMRS0bits 000FAD  
                 vfprintf@cfmt 00BA                         ___flge 48E6               _getCharFromTxBuf 593E  
                       ___fleq 50A6                      ??___aodiv 0015                      ??___fladd 000D  
                    ??___aomod 0015                         ___wmul 5A10                      ??___fldiv 003E  
                    ??___flneg 0009                      ??___flmul 0025                      ??___flsub 001D  
                    ??___fltol 0009                         _efgtoa 1A56                      ??___lwdiv 000F  
                       _floorf 398A                         _memcpy 5594                         clear_0 54BC  
                       clear_1 54C8                         clear_2 54D4                         isa$std 000001  
                       pad@buf 0017                  main@motorLeft 0164                         dtoa@fp 0020  
                       _strcpy 576A                         fputc@c 0005              ?_TxBufferedString 0006  
                       fputs@c 0012                         fputs@i 0013                         fputs@s 000E  
                    ??_forward 001C                ___fpclassifyf@e 000D                ___fpclassifyf@u 000F  
              ___fpclassifyf@x 0005                   __mediumconst 0000                         tblptrh 000FF7  
                       tblptrl 000FF6                         tblptru 000FF8             ??_TxBufferedString 0008  
                    ??_reverse 001C               __end_of_whiteCal 4BCC                         putch@c 0001  
             __end_of_vfprintf 5542                         stop@mL 0018                         stop@mR 001A  
            ??_initDCmotorsPWM 0007                      ??_sprintf 0057               __end_of_turn_180 42EA  
                   ___flge@ff1 0036                     ___flge@ff2 003A                ??___fpclassifyf 0009  
                 ___xxtofl@arg 000F                   ___xxtofl@exp 000E                   ___xxtofl@val 0005  
                   ___fleq@ff1 0005                     ___fleq@ff2 0009          __end_of_isDataInTxBuf 5A88  
                   __accesstop 0060        __end_of__initialization 54E2       __end_of_color_read_Clear 56D4  
                   ___flneg@f1 0005       __end_of_color_read_Green 5684         ?_I2C_2_Master_RepStart 0001  
      __end_ofi2_isDataInTxBuf 5AA0                  ___rparam_used 000001                     ___fltol@f1 0005  
             ?_color_read_Blue 0009              main@ambientRGBVal 014B                 __pcstackCOMRAM 0001  
                ?_DCmotorsInit 0005                   __pidataBANK0 5ACA                  __end_of_fputc 4FF8  
                __end_of_fputs 57F2                  __end_of_putch 5AD0                        ??_fputc 0009  
                      ??_fputs 0012             _reverseSquareRight 51E0                        ??_putch 0005  
                   __pbssBANK0 00EA                     __pbssBANK1 016D                     __pbssBANK2 0200  
                   _ambientCal 4BCC            ?_reverseSquareRight 0024                  _turnRight_135 42EA  
            _color_writetoaddr 5A36                   _T2CLKCONbits 000FBF                 ??_DCmotorsInit 0009  
                      ?___flge 0036                        ?___fleq 0005                   ?_turnLeft_90 001E  
           ?_color_writetoaddr 0007                        ?___wmul 0005                        ?_efgtoa 0070  
                      ?_floorf 004F                        ?_memcpy 0005            ??_color_writetoaddr 0008  
                      ?_strcpy 0005           ??_reverseSquareRight 0028                      ?___xxtofl 0005  
                      _SP4BRGH 000EE6                        _SP4BRGL 000EE5                      ?_getColor 0010  
                      _SSP2ADD 000ED6                        _SSP2BUF 000ED5         color_writetoaddr@value 0007  
             ??_color_read_Red 000B                        _HighISR 0008                 ?_turnRight_135 001E  
    __end_of_color_writetoaddr 5A56               ?i2_isDataInTxBuf 0001             _I2C_2_Master_Start 5AB6  
                   _initUSART4 5910             _I2C_2_Master_Write 5AA0                        __Hparam 0000  
                      __Lparam 0000              color_read_Red@tmp 000E                        ___aodiv 3D54  
                      ___fladd 2450                        ___aomod 4048                        ___fldiv 2D3A  
                      ___flneg 5874                        ___flmul 2910                      ?_whiteCal 0012  
                      ___flsub 5724                        ___fltol 47E0            ?_I2C_2_Master_Start 0001  
                      ___lwdiv 535E            ?_I2C_2_Master_Write 0001                     _off_period 00F6  
                    ?_vfprintf 00B4                   __psmallconst 0E00                      ?_turn_180 001E  
                      __pcinit 5496                        __ramtop 0E00                        __ptext0 30D4  
                      __ptext1 4AE8                        __ptext2 5910                        __ptext3 5150  
                      __ptext4 4CB0                        __ptext5 58AC                        __ptext6 5A36  
                      __ptext7 596A                        __ptext8 0E2C                        __ptext9 41AC  
            colorDetect@RGBVal 0126                      _T2CONbits 000FBD                        _forward 4CB0  
                   ??___xxtofl 0009                      _T2HLTbits 000FBE                        efgtoa@c 0076  
                      efgtoa@d 0082                        efgtoa@e 0086                        efgtoa@f 0072  
                      efgtoa@g 0099                        efgtoa@h 0090                        efgtoa@i 008E  
                      efgtoa@l 0094                        efgtoa@m 0084                        efgtoa@n 009D  
                      efgtoa@p 0079                        efgtoa@t 007B                        efgtoa@u 009F  
                      efgtoa@w 0088                        _reverse 4D86                     ??_getColor 0012  
                _RxBufWriteCnt 005A       __end_of_getCharFromTxBuf 596A                 main@motorRight 015B  
                      _sprintf 5542           ??_I2C_2_Master_Start 0006           ??_I2C_2_Master_Write 0006  
         end_of_initialization 54E2              __end_of_sendTxBuf 5A70                        floorf@e 006A  
                      floorf@m 0066                        floorf@u 006C                        floorf@x 004F  
               DCmotorsInit@mL 0005                 DCmotorsInit@mR 0007                        memcpy@d 000B  
                      memcpy@n 0009                        memcpy@s 000D                    ?_ambientCal 0012  
                      fputc@fp 0007                        fputs@fp 0010              ?_color_click_init 0001  
            colorDetect@whiteB 011C              colorDetect@whiteG 0118              colorDetect@whiteR 0114  
           ??_color_click_init 0009              __end_of_vfpfcnvrt 370C                     efgtoa@mode 0080  
                   efgtoa@sign 0098                        postdec1 000FE5                        postdec2 000FDD  
                      postinc0 000FEE                        postinc1 000FE6                        postinc2 000FDE  
             vfpfcnvrt@convarg 00A9                     ??_whiteCal 0014                     ??_vfprintf 0057  
                   ??_turn_180 0022                        strcpy@d 000B                        strcpy@s 0009  
              _initDCmotorsPWM 5150                      _PORTFbits 000F8E             setMotorPWM@negDuty 0017  
                  ___fladd@grs 0014                     main@RGBVal 0142                  ___xxtofl@sign 000D  
                    _TRISAbits 000F81             setMotorPWM@posDuty 0016                      _TRISCbits 000F83  
                    _TRISDbits 000F84                      _TRISEbits 000F85                      _TRISFbits 000F86  
                    _TRISGbits 000F87                      _TRISHbits 000F88           __end_of_DCmotorsInit 4F2E  
                  ___fldiv@grs 0049                    ___fldiv@rem 0042            reverseSquareLeft@mL 0024  
          reverseSquareLeft@mR 0026       color_writetoaddr@address 0008        ??_I2C_2_Master_RepStart 0006  
              ??_turnRight_135 0022                    ___flmul@grs 002A                    _CCP1CONbits 000FAB  
            ?_color_read_Clear 0009                   _EUSART4RXbuf 016D                   _EUSART4TXbuf 0200  
                  _CCP2CONbits 000FA7              ?_color_read_Green 0009                    _CCP3CONbits 000F26  
                  ?_initUSART4 0001                    _CCP4CONbits 000F22                     main@whiteC 013A  
           ??_color_read_Clear 000B             ??_color_read_Green 000B                  ??_colorDetect 00E5  
               __end_of___flge 49EA                 __end_of___fleq 5150                    vfpfcnvrt@ap 00A7  
                  vfpfcnvrt@cp 00B2                    vfpfcnvrt@fp 00A3                 __end_of___wmul 5A36  
               __end_of_efgtoa 2450                 __end_of_floorf 3BA0                 __end_of_memcpy 55E4  
                   floorf@F526 00EA         colorDetect@whiteRGBVal 00DF                 __end_of_strcpy 57AE  
          color_read_Clear@tmp 000E            start_initialization 5496           colorDetect@bluePrint 0136  
                  __end_of_abs 5874                    __end_of_pad 535E                  _TxBufWriteCnt 0058  
        __end_of___fpclassifyf 4AE8            color_read_Green@tmp 000E        __end_of_initDCmotorsPWM 51E0  
                  vfprintf@fmt 00B6                       ??___flge 003E                       ??___fleq 000D  
                     ??___wmul 0009                       ??_efgtoa 0053                 _putCharToRxBuf 59BE  
               _putCharToTxBuf 5994                    __pdataBANK0 00FB                       ??_floorf 0060  
                     ??_memcpy 000B            __end_of_colorDetect 1A56                       ??_strcpy 0009  
                    ___fladd@a 0009                      ___fladd@b 0005                      ___fldiv@a 003A  
                    ___fldiv@b 0036                      ___flmul@a 0021                      ___flmul@b 001D  
                  __pbssCOMRAM 0057                      ___flsub@a 0019                      ___flsub@b 0015  
                __pcstackBANK0 0060                  __pcstackBANK1 0100               ___aodiv@dividend 0005  
                     ?_HighISR 0001              _reverseSquareLeft 5262             ?_reverseSquareLeft 0024  
                  _efgtoa$2743 007D               ___lwdiv@dividend 000B                      _dtoa$2712 0032  
       __end_of_putCharToRxBuf 59E8         __end_of_putCharToTxBuf 59BE                      __pintcode 0008  
                     ?___aodiv 0005                       ?___fladd 0005                       ?___aomod 0005  
                     ?___fldiv 0036               ___aodiv@quotient 0017                       ?___flneg 0005  
                     ?___flmul 001D                       ?___flsub 0015                  ?_turnLeft_135 001E  
                     ?___fltol 0005                       ?___lwdiv 000B            ??_reverseSquareLeft 0028  
              turnRight_135@mL 001E                turnRight_135@mR 0020         TxBufferedString@string 0006  
               turnLeft_135@mL 001E                 turnLeft_135@mR 0020           I2C_2_Master_Read@ack 0007  
         I2C_2_Master_Read@tmp 0008                    __smallconst 0E00                       ?_forward 0018  
            _I2C_2_Master_Idle 59E8                  ?_turnRight_90 001E              _I2C_2_Master_Init 596A  
            _I2C_2_Master_Read 57F2              _I2C_2_Master_Stop 5AAC                   _RxBufReadCnt 0059  
                     ?_reverse 0018             ?_I2C_2_Master_Idle 0001             ?_I2C_2_Master_Init 0001  
           ?_I2C_2_Master_Read 0001                  ??_setMotorPWM 0014             ?_I2C_2_Master_Stop 0001  
             ___lwdiv@quotient 000F       initDCmotorsPWM@PWMperiod 0005                       ?_sprintf 00BC  
            ?_getCharFromTxBuf 0001      __end_of_reverseSquareLeft 52E4             ??_getCharFromTxBuf 0001  
                 ??_ambientCal 0014            ??_I2C_2_Master_Idle 0005            ??_I2C_2_Master_Init 0005  
          ??_I2C_2_Master_Read 0006                 ___wmul@product 0009                       _LATAbits 000F79  
          ??_I2C_2_Master_Stop 0006                       _LATCbits 000F7B                  _isDataInTxBuf 5A70  
                     _LATDbits 000F7C                       _LATEbits 000F7D                       _LATFbits 000F7E  
                    _on_period 00F8               _TxBufferedString 58E0                       _LATGbits 000F7F  
                     _LATHbits 000F80                      _sendTxBuf 5A56                       _IPR4bits 000E23  
                     _PIE4bits 000E2D                      getColor@v 0010                       i2u282_40 5A9C  
                     i2u282_41 5A96                       i2u283_40 5A9E                       _PIR4bits 000E37  
                     i2u616_40 0022                       i2u616_41 001E                       i2u617_40 0038  
                     i2u617_41 0034                       i2u618_40 0046                       i2u618_41 0042  
                     i2u619_40 005A                       i2u619_41 0056                       i2u590_40 59D0  
                     i2u590_41 59CC                       i2u591_40 594E                       i2u591_41 594A  
              ?_putCharToRxBuf 0001               ?_initDCmotorsPWM 0005                    _colorDetect 0E2C  
              ?_putCharToTxBuf 0001                 ??_turnLeft_135 0022                   _DCmotorsInit 4E5C  
                     _SSP2CON2 000EDA                       _SSP2STAT 000ED8                      _vfpfcnvrt 3406  
    __end_of_I2C_2_Master_Idle 5A10      __end_of_I2C_2_Master_Init 5994      __end_of_I2C_2_Master_Read 5834  
            ___wmul@multiplier 0005      __end_of_I2C_2_Master_Stop 5AB6                 ??_turnRight_90 0022  
                 setMotorPWM@m 0012                      main@carGo 014A    I2C_2_Master_Write@data_byte 0006  
           __end_of_ambientCal 4CB0              ??_color_read_Blue 000B                   _TxBufReadCnt 0057  
                   vfpfcnvrt@c 00B1                      copy_data0 54AA            colorDetect@ambientB 0124  
          colorDetect@ambientG 0122            colorDetect@ambientR 0120            colorDetect@clearRef 00D9  
               ?_isDataInTxBuf 0001  __end_of_I2C_2_Master_RepStart 5ACA             color_read_Blue@tmp 000E  
          __end_of_setMotorPWM 4048                     ?_sendTxBuf 0001                   ??_initUSART4 0005  
                     __Hrparam 0000            colorDetect@redPrint 012E                      memcpy@tmp 000F  
                   vfprintf@ap 00B8                       __Lrparam 0000                     vfprintf@fp 00B4  
                    forward@mL 0018                      forward@mR 001A                     ?_vfpfcnvrt 00A3  
     colorDetect@ambientRGBVal 00DD                ___aodiv@divisor 000D                ___aodiv@counter 0015  
                   _ANSELDbits 000EA7             ___fpclassifyf@F465 00EE                     _ANSELFbits 000EB4  
                   sprintf@fmt 00BE                     turn_180@mL 001E                     turn_180@mR 0020  
                     ___xxtofl 3BA0                     _T0CON0bits 000FD5                     _T0CON1bits 000FD6  
              ___lwdiv@divisor 000D             __end_of_initUSART4 593E                       _getColor 5438  
              ___lwdiv@counter 0011                       __ptext10 42EA                       __ptext11 46A4  
                     __ptext20 49EA                       __ptext12 5542                       __ptext21 47E0  
                     __ptext13 54EC                       __ptext30 52E4                       __ptext22 5724  
                     __ptext14 3406                       __ptext31 57AE                       __ptext23 2450  
                     __ptext15 1A56                       __ptext40 4428                       __ptext32 4F2E  
                     __ptext24 5874                       __ptext16 576A                       __ptext41 5262  
                     __ptext33 5ACE                       __ptext25 2910                       __ptext17 5594  
                     __ptext50 5994                       __ptext42 4566                       __ptext34 5834  
                     __ptext26 48E6                       __ptext18 53D2                       __ptext51 4BCC  
                     __ptext43 4FF8                       __ptext35 4048                       __ptext27 50A6  
                     __ptext19 398A                       __ptext60 5AC0                       __ptext52 5438  
                     __ptext44 4D86                       __ptext36 3D54                       __ptext28 2D3A  
                     __ptext61 57F2                       __ptext53 55E4                       __ptext45 3EDC  
                     __ptext37 5A56                       __ptext29 370C                       __ptext62 59E8  
                     __ptext54 5634                       __ptext46 5A10                       __ptext38 5A70  
                     __ptext63 4E5C                       __ptext55 5684                       __ptext47 535E  
                     __ptext39 51E0                       __ptext56 56D4                       __ptext48 3BA0  
                     __ptext65 5A88                       __ptext57 5AA0                       __ptext49 58E0  
                     __ptext66 59BE                       __ptext58 5AAC                       __ptext67 593E  
                     __ptext59 5AB6                    ambientCal@i 0016                    ambientCal@v 0012  
               turnRight_90@mL 001E                 turnRight_90@mR 0020                   _SSP2CON1bits 000ED9  
                 _SSP2CON2bits 000EDA                  turnLeft_90@mL 001E                  turnLeft_90@mR 0020  
                   strcpy@dest 0005          __end_of_turnRight_135 4428                      reverse@mL 0018  
                    reverse@mR 001A                       efgtoa@fp 0070                       efgtoa@ne 0077  
                     efgtoa@pp 007F                       efgtoa@ou 008A                  ??_turnLeft_90 0022  
               _turning_time45 00FD                       isa$xinst 000000                     _RC4STAbits 000EE7  
                     int$flags 005B                       _whiteCal 4AE8                       _vfprintf 54EC  
                     _turn_180 41AC               ___aomod@dividend 0005                      whiteCal@i 0016  
                    whiteCal@v 0012                     _INTCONbits 000FF2              ??i2_isDataInTxBuf 0001  
                     memcpy@d1 0005                   _reverse_time 00FB                       memcpy@s1 0007  
                  _setMotorPWM 3EDC           __end_of_turnLeft_135 47E0                ??_isDataInTxBuf 0005  
                     intlevel2 0000                      sprintf@ap 00CC             colorDetect@string1 0100  
                  ??_sendTxBuf 0005                main@whiteRGBVal 0153                      strcpy@src 0007  
         __end_of_turnRight_90 4566                    efgtoa@nmode 0081                ___aomod@divisor 000D  
                  ??_vfpfcnvrt 0055                ___aomod@counter 0015               _color_click_init 58AC  
          __end_of_turnLeft_90 46A4       __end_of_TxBufferedString 5910                       sprintf@f 00CE  
                     sprintf@s 00BC                     _SSP2DATPPS 000E1D                     _SSP2CLKPPS 000E1C  
                ___fladd@signs 0011                     _TX4STAbits 000EE8                   ___aodiv@sign 0016  
                 ___fladd@aexp 0012                   ___fladd@bexp 0013               ??_putCharToRxBuf 0001  
             ??_putCharToTxBuf 0005                   ___aomod@sign 0016                   ?_colorDetect 00D9  

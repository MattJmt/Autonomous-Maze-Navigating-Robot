

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Tue Dec 13 18:21:38 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=3
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=3
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=3
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=3
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=3
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=3
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=2
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=2
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=2
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=2
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=2
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=2
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=2
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=2
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=2
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=2
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    83                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    84                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    85                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    86                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    87   000000                     
    88                           ; Version 2.35
    89                           ; Generated 05/05/2021 GMT
    90                           ; 
    91                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    92                           ; All rights reserved.
    93                           ; 
    94                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    95                           ; 
    96                           ; Redistribution and use in source and binary forms, with or without modification, are
    97                           ; permitted provided that the following conditions are met:
    98                           ; 
    99                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   100                           ;        conditions and the following disclaimer.
   101                           ; 
   102                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   103                           ;        of conditions and the following disclaimer in the documentation and/or other
   104                           ;        materials provided with the distribution. Publication is not required when
   105                           ;        this file is used in an embedded application.
   106                           ; 
   107                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   108                           ;        software without specific prior written permission.
   109                           ; 
   110                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   111                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   112                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   113                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   114                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   115                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   116                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   117                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   118                           ; 
   119                           ; 
   120                           ; Code-generator required, PIC18F67K40 Definitions
   121                           ; 
   122                           ; SFR Addresses
   123   000000                     
   124                           	psect	idataBANK0
   125   005816                     __pidataBANK0:
   126                           	callstack 0
   127                           
   128                           ;initializer for _reverse_time
   129   005816  00C8               	dw	200
   130                           
   131                           ;initializer for _turning_time45
   132   005818  0048               	dw	72
   133   000000                     _TX4REG	set	3812
   134   000000                     _RC4STAbits	set	3815
   135   000000                     _SP4BRGH	set	3814
   136   000000                     _TRISFbits	set	3974
   137   000000                     _LATFbits	set	3966
   138   000000                     _TRISDbits	set	3972
   139   000000                     _TRISGbits	set	3975
   140   000000                     _LATGbits	set	3967
   141   000000                     _LATEbits	set	3965
   142   000000                     _SSP2CON2bits	set	3802
   143   000000                     _RX4PPS	set	3605
   144   000000                     _SSP2CLKPPS	set	3612
   145   000000                     _SSP2DATPPS	set	3613
   146   000000                     _RC7PPS	set	3689
   147   000000                     _RE2PPS	set	3700
   148   000000                     _LATCbits	set	3963
   149   000000                     _LATDbits	set	3964
   150   000000                     _TRISAbits	set	3969
   151   000000                     _LATHbits	set	3968
   152   000000                     _TRISCbits	set	3971
   153   000000                     _TRISEbits	set	3973
   154   000000                     _PORTFbits	set	3982
   155   000000                     _TRISHbits	set	3976
   156   000000                     _T2PR	set	4028
   157   000000                     _T2CONbits	set	4029
   158   000000                     _CCPR2H	set	4006
   159   000000                     _CCPR1H	set	4010
   160   000000                     _RE4PPS	set	3702
   161   000000                     _RG6PPS	set	3720
   162   000000                     _RD5PPS	set	3695
   163   000000                     _ANSELDbits	set	3751
   164   000000                     _SSP2ADD	set	3798
   165   000000                     _SSP2CON1bits	set	3801
   166   000000                     _CCPR4H	set	3873
   167   000000                     _CCPR3H	set	3877
   168   000000                     _TMR0L	set	4051
   169   000000                     _TMR0H	set	4052
   170   000000                     _T0CON0bits	set	4053
   171   000000                     _T0CON1bits	set	4054
   172   000000                     _INTCONbits	set	4082
   173   000000                     _T2CLKCONbits	set	4031
   174   000000                     _T2HLTbits	set	4030
   175   000000                     _CCP1CONbits	set	4011
   176   000000                     _CCPTMRS0bits	set	4013
   177   000000                     _CCP2CONbits	set	4007
   178   000000                     _LATAbits	set	3961
   179   000000                     _CCP3CONbits	set	3878
   180   000000                     _CCP4CONbits	set	3874
   181   000000                     _RC4REG	set	3811
   182   000000                     _SP4BRGL	set	3813
   183   000000                     _TX4STAbits	set	3816
   184   000000                     _BAUD4CONbits	set	3817
   185   000000                     _SSP2CON2	set	3802
   186   000000                     _SSP2STAT	set	3800
   187   000000                     _ANSELFbits	set	3764
   188   000000                     _SSP2BUF	set	3797
   189   000000                     _IPR4bits	set	3619
   190   000000                     _PIE4bits	set	3629
   191   000000                     _PIR4bits	set	3639
   192   000000                     _RC0PPS	set	3682
   193   000000                     _RD6PPS	set	3696
   194                           
   195                           	psect	smallconst
   196   000E00                     __psmallconst:
   197                           	callstack 0
   198   000E00  00                 	db	0
   199   000E01                     STR_1:
   200   000E01  20                 	db	32
   201   000E02  20                 	db	32
   202   000E03  43                 	db	67	;'C'
   203   000E04  3A                 	db	58	;':'
   204   000E05  20                 	db	32
   205   000E06  25                 	db	37
   206   000E07  64                 	db	100	;'d'
   207   000E08  20                 	db	32
   208   000E09  20                 	db	32
   209   000E0A  25                 	db	37
   210   000E0B  64                 	db	100	;'d'
   211   000E0C  20                 	db	32
   212   000E0D  20                 	db	32
   213   000E0E  25                 	db	37
   214   000E0F  66                 	db	102	;'f'
   215   000E10  20                 	db	32
   216   000E11  0D                 	db	13
   217   000E12  00                 	db	0
   218   000E13                     STR_2:
   219   000E13  69                 	db	105	;'i'
   220   000E14  6E                 	db	110	;'n'
   221   000E15  66                 	db	102	;'f'
   222   000E16  00                 	db	0
   223   000E17                     STR_5:
   224   000E17  6E                 	db	110	;'n'
   225   000E18  61                 	db	97	;'a'
   226   000E19  6E                 	db	110	;'n'
   227   000E1A  00                 	db	0
   228   000E1B  00                 	db	0	; dummy byte at the end
   229   000000                     
   230                           ; #config settings
   231                           
   232                           	psect	cinit
   233   005434                     __pcinit:
   234                           	callstack 0
   235   005434                     start_initialization:
   236                           	callstack 0
   237   005434                     __initialization:
   238                           	callstack 0
   239                           
   240                           ; Initialize objects allocated to BANK0 (4 bytes)
   241                           ; load TBLPTR registers with __pidataBANK0
   242   005434  0E16               	movlw	low __pidataBANK0
   243   005436  6EF6               	movwf	tblptrl,c
   244   005438  0E58               	movlw	high __pidataBANK0
   245   00543A  6EF7               	movwf	tblptrh,c
   246   00543C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   247   00543E  6EF8               	movwf	tblptru,c
   248   005440  EE00  F0FC         	lfsr	0,__pdataBANK0
   249   005444  EE10 F004          	lfsr	1,4
   250   005448                     copy_data0:
   251   005448  0009               	tblrd		*+
   252   00544A  CFF5 FFEE          	movff	tablat,postinc0
   253   00544E  50E5               	movf	postdec1,w,c
   254   005450  50E1               	movf	fsr1l,w,c
   255   005452  E1FA               	bnz	copy_data0
   256                           
   257                           ; Clear objects allocated to BANK1 (140 bytes)
   258   005454  EE01  F000         	lfsr	0,__pbssBANK1
   259   005458  0E8C               	movlw	140
   260   00545A                     clear_0:
   261   00545A  6AEE               	clrf	postinc0,c
   262   00545C  06E8               	decf	wreg,f,c
   263   00545E  E1FD               	bnz	clear_0
   264                           
   265                           ; Clear objects allocated to BANK0 (37 bytes)
   266   005460  EE00  F0D7         	lfsr	0,__pbssBANK0
   267   005464  0E25               	movlw	37
   268   005466                     clear_1:
   269   005466  6AEE               	clrf	postinc0,c
   270   005468  06E8               	decf	wreg,f,c
   271   00546A  E1FD               	bnz	clear_1
   272                           
   273                           ; Clear objects allocated to COMRAM (4 bytes)
   274   00546C  6A5A               	clrf	(__pbssCOMRAM+3)& (0+255),c
   275   00546E  6A59               	clrf	(__pbssCOMRAM+2)& (0+255),c
   276   005470  6A58               	clrf	(__pbssCOMRAM+1)& (0+255),c
   277   005472  6A57               	clrf	__pbssCOMRAM& (0+255),c
   278   005474                     end_of_initialization:
   279                           	callstack 0
   280   005474                     __end_of__initialization:
   281                           	callstack 0
   282   005474  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   283   005476  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   284   005478  0100               	movlb	0
   285   00547A  EFC0  F01A         	goto	_main	;jump to C main() function
   286                           
   287                           	psect	bssCOMRAM
   288   000057                     __pbssCOMRAM:
   289                           	callstack 0
   290   000057                     _TxBufReadCnt:
   291                           	callstack 0
   292   000057                     	ds	1
   293   000058                     _TxBufWriteCnt:
   294                           	callstack 0
   295   000058                     	ds	1
   296   000059                     _RxBufReadCnt:
   297                           	callstack 0
   298   000059                     	ds	1
   299   00005A                     _RxBufWriteCnt:
   300                           	callstack 0
   301   00005A                     	ds	1
   302                           
   303                           	psect	bssBANK0
   304   0000D7                     __pbssBANK0:
   305                           	callstack 0
   306   0000D7                     _EUSART4RXbuf:
   307                           	callstack 0
   308   0000D7                     	ds	20
   309   0000EB                     floorf@F526:
   310                           	callstack 0
   311   0000EB                     	ds	4
   312   0000EF                     ___fpclassifyf@F465:
   313                           	callstack 0
   314   0000EF                     	ds	4
   315   0000F3                     _width:
   316                           	callstack 0
   317   0000F3                     	ds	2
   318   0000F5                     _prec:
   319                           	callstack 0
   320   0000F5                     	ds	2
   321   0000F7                     _off_period:
   322                           	callstack 0
   323   0000F7                     	ds	2
   324   0000F9                     _on_period:
   325                           	callstack 0
   326   0000F9                     	ds	2
   327   0000FB                     _flags:
   328                           	callstack 0
   329   0000FB                     	ds	1
   330                           
   331                           	psect	dataBANK0
   332   0000FC                     __pdataBANK0:
   333                           	callstack 0
   334   0000FC                     _reverse_time:
   335                           	callstack 0
   336   0000FC                     	ds	2
   337   0000FE                     _turning_time45:
   338                           	callstack 0
   339   0000FE                     	ds	2
   340                           
   341                           	psect	bssBANK1
   342   000100                     __pbssBANK1:
   343                           	callstack 0
   344   000100                     _EUSART4TXbuf:
   345                           	callstack 0
   346   000100                     	ds	60
   347   00013C                     _dbuf:
   348                           	callstack 0
   349   00013C                     	ds	80
   350                           
   351                           	psect	cstackBANK1
   352   00018C                     __pcstackBANK1:
   353                           	callstack 0
   354   00018C                     main@string4:
   355                           	callstack 0
   356                           
   357                           ; 20 bytes @ 0x0
   358   00018C                     	ds	20
   359   0001A0                     main@whiteC:
   360                           	callstack 0
   361                           
   362                           ; 4 bytes @ 0x14
   363   0001A0                     	ds	4
   364   0001A4                     main@clearRef:
   365                           	callstack 0
   366                           
   367                           ; 4 bytes @ 0x18
   368   0001A4                     	ds	4
   369   0001A8                     main@ambientRGBVal:
   370                           	callstack 0
   371                           
   372                           ; 8 bytes @ 0x1C
   373   0001A8                     	ds	8
   374   0001B0                     main@RGBVal:
   375                           	callstack 0
   376                           
   377                           ; 8 bytes @ 0x24
   378   0001B0                     	ds	8
   379   0001B8                     main@whiteRGBVal:
   380                           	callstack 0
   381                           
   382                           ; 8 bytes @ 0x2C
   383   0001B8                     	ds	8
   384   0001C0                     main@motorRight:
   385                           	callstack 0
   386                           
   387                           ; 9 bytes @ 0x34
   388   0001C0                     	ds	9
   389   0001C9                     main@motorLeft:
   390                           	callstack 0
   391                           
   392                           ; 9 bytes @ 0x3D
   393   0001C9                     	ds	9
   394                           
   395                           	psect	cstackBANK0
   396   000060                     __pcstackBANK0:
   397                           	callstack 0
   398   000060                     ??_floorf:
   399   000060                     colorDetect@clearRef:
   400                           	callstack 0
   401                           
   402                           ; 4 bytes @ 0x0
   403   000060                     	ds	4
   404   000064                     colorDetect@ambientRGBVal:
   405                           	callstack 0
   406                           
   407                           ; 2 bytes @ 0x4
   408   000064                     	ds	2
   409   000066                     colorDetect@whiteRGBVal:
   410                           	callstack 0
   411   000066                     floorf@m:
   412                           	callstack 0
   413                           
   414                           ; 4 bytes @ 0x6
   415   000066                     	ds	2
   416   000068                     colorDetect@mL:
   417                           	callstack 0
   418                           
   419                           ; 2 bytes @ 0x8
   420   000068                     	ds	2
   421   00006A                     colorDetect@mR:
   422                           	callstack 0
   423   00006A                     floorf@e:
   424                           	callstack 0
   425                           
   426                           ; 2 bytes @ 0xA
   427   00006A                     	ds	2
   428   00006C                     colorDetect@whiteR:
   429                           	callstack 0
   430   00006C                     floorf@u:
   431                           	callstack 0
   432                           
   433                           ; 4 bytes @ 0xC
   434   00006C                     	ds	4
   435   000070                     efgtoa@fp:
   436                           	callstack 0
   437   000070                     colorDetect@whiteG:
   438                           	callstack 0
   439                           
   440                           ; 4 bytes @ 0x10
   441   000070                     	ds	2
   442   000072                     efgtoa@f:
   443                           	callstack 0
   444                           
   445                           ; 4 bytes @ 0x12
   446   000072                     	ds	2
   447   000074                     colorDetect@whiteB:
   448                           	callstack 0
   449                           
   450                           ; 4 bytes @ 0x14
   451   000074                     	ds	2
   452   000076                     efgtoa@c:
   453                           	callstack 0
   454                           
   455                           ; 1 bytes @ 0x16
   456   000076                     	ds	1
   457   000077                     efgtoa@ne:
   458                           	callstack 0
   459                           
   460                           ; 2 bytes @ 0x17
   461   000077                     	ds	1
   462   000078                     colorDetect@ambientR:
   463                           	callstack 0
   464                           
   465                           ; 2 bytes @ 0x18
   466   000078                     	ds	1
   467   000079                     efgtoa@p:
   468                           	callstack 0
   469                           
   470                           ; 2 bytes @ 0x19
   471   000079                     	ds	1
   472   00007A                     colorDetect@ambientG:
   473                           	callstack 0
   474                           
   475                           ; 2 bytes @ 0x1A
   476   00007A                     	ds	1
   477   00007B                     efgtoa@t:
   478                           	callstack 0
   479                           
   480                           ; 2 bytes @ 0x1B
   481   00007B                     	ds	1
   482   00007C                     colorDetect@ambientB:
   483                           	callstack 0
   484                           
   485                           ; 2 bytes @ 0x1C
   486   00007C                     	ds	1
   487   00007D                     _efgtoa$2725:
   488                           	callstack 0
   489                           
   490                           ; 2 bytes @ 0x1D
   491   00007D                     	ds	1
   492   00007E                     colorDetect@RGBVal:
   493                           	callstack 0
   494                           
   495                           ; 8 bytes @ 0x1E
   496   00007E                     	ds	1
   497   00007F                     efgtoa@pp:
   498                           	callstack 0
   499                           
   500                           ; 1 bytes @ 0x1F
   501   00007F                     	ds	1
   502   000080                     efgtoa@mode:
   503                           	callstack 0
   504                           
   505                           ; 1 bytes @ 0x20
   506   000080                     	ds	1
   507   000081                     efgtoa@nmode:
   508                           	callstack 0
   509                           
   510                           ; 1 bytes @ 0x21
   511   000081                     	ds	1
   512   000082                     efgtoa@d:
   513                           	callstack 0
   514                           
   515                           ; 2 bytes @ 0x22
   516   000082                     	ds	2
   517   000084                     efgtoa@m:
   518                           	callstack 0
   519                           
   520                           ; 2 bytes @ 0x24
   521   000084                     	ds	2
   522   000086                     efgtoa@e:
   523                           	callstack 0
   524   000086                     colorDetect@redPrint:
   525                           	callstack 0
   526                           
   527                           ; 4 bytes @ 0x26
   528   000086                     	ds	2
   529   000088                     efgtoa@w:
   530                           	callstack 0
   531                           
   532                           ; 2 bytes @ 0x28
   533   000088                     	ds	2
   534   00008A                     colorDetect@greenPrint:
   535                           	callstack 0
   536   00008A                     efgtoa@ou:
   537                           	callstack 0
   538                           
   539                           ; 4 bytes @ 0x2A
   540   00008A                     	ds	4
   541   00008E                     efgtoa@i:
   542                           	callstack 0
   543   00008E                     colorDetect@bluePrint:
   544                           	callstack 0
   545                           
   546                           ; 4 bytes @ 0x2E
   547   00008E                     	ds	2
   548   000090                     efgtoa@h:
   549                           	callstack 0
   550                           
   551                           ; 4 bytes @ 0x30
   552   000090                     	ds	4
   553   000094                     efgtoa@l:
   554                           	callstack 0
   555                           
   556                           ; 4 bytes @ 0x34
   557   000094                     	ds	4
   558   000098                     efgtoa@sign:
   559                           	callstack 0
   560                           
   561                           ; 1 bytes @ 0x38
   562   000098                     	ds	1
   563   000099                     efgtoa@g:
   564                           	callstack 0
   565                           
   566                           ; 4 bytes @ 0x39
   567   000099                     	ds	4
   568   00009D                     efgtoa@n:
   569                           	callstack 0
   570                           
   571                           ; 2 bytes @ 0x3D
   572   00009D                     	ds	2
   573   00009F                     efgtoa@u:
   574                           	callstack 0
   575                           
   576                           ; 4 bytes @ 0x3F
   577   00009F                     	ds	4
   578   0000A3                     vfpfcnvrt@fp:
   579                           	callstack 0
   580                           
   581                           ; 2 bytes @ 0x43
   582   0000A3                     	ds	2
   583   0000A5                     vfpfcnvrt@fmt:
   584                           	callstack 0
   585                           
   586                           ; 2 bytes @ 0x45
   587   0000A5                     	ds	2
   588   0000A7                     vfpfcnvrt@ap:
   589                           	callstack 0
   590                           
   591                           ; 2 bytes @ 0x47
   592   0000A7                     	ds	2
   593   0000A9                     vfpfcnvrt@convarg:
   594                           	callstack 0
   595                           
   596                           ; 8 bytes @ 0x49
   597   0000A9                     	ds	8
   598   0000B1                     vfpfcnvrt@c:
   599                           	callstack 0
   600                           
   601                           ; 1 bytes @ 0x51
   602   0000B1                     	ds	1
   603   0000B2                     vfpfcnvrt@cp:
   604                           	callstack 0
   605                           
   606                           ; 2 bytes @ 0x52
   607   0000B2                     	ds	2
   608   0000B4                     ?_vfprintf:
   609                           	callstack 0
   610   0000B4                     vfprintf@fp:
   611                           	callstack 0
   612                           
   613                           ; 2 bytes @ 0x54
   614   0000B4                     	ds	2
   615   0000B6                     vfprintf@fmt:
   616                           	callstack 0
   617                           
   618                           ; 2 bytes @ 0x56
   619   0000B6                     	ds	2
   620   0000B8                     vfprintf@ap:
   621                           	callstack 0
   622                           
   623                           ; 2 bytes @ 0x58
   624   0000B8                     	ds	2
   625   0000BA                     vfprintf@cfmt:
   626                           	callstack 0
   627                           
   628                           ; 2 bytes @ 0x5A
   629   0000BA                     	ds	2
   630   0000BC                     ?_sprintf:
   631                           	callstack 0
   632   0000BC                     sprintf@s:
   633                           	callstack 0
   634                           
   635                           ; 2 bytes @ 0x5C
   636   0000BC                     	ds	2
   637   0000BE                     sprintf@fmt:
   638                           	callstack 0
   639                           
   640                           ; 2 bytes @ 0x5E
   641   0000BE                     	ds	10
   642   0000C8                     sprintf@ap:
   643                           	callstack 0
   644                           
   645                           ; 2 bytes @ 0x68
   646   0000C8                     	ds	2
   647   0000CA                     sprintf@f:
   648                           	callstack 0
   649                           
   650                           ; 11 bytes @ 0x6A
   651   0000CA                     	ds	11
   652   0000D5                     ??_main:
   653                           
   654                           ; 1 bytes @ 0x75
   655   0000D5                     	ds	2
   656                           
   657                           	psect	cstackCOMRAM
   658   000001                     __pcstackCOMRAM:
   659                           	callstack 0
   660   000001                     ??_getCharFromTxBuf:
   661   000001                     putCharToRxBuf@byte:
   662                           	callstack 0
   663   000001                     
   664                           ; 1 bytes @ 0x0
   665   000001                     	ds	2
   666   000003                     ??_HighISR:
   667                           
   668                           ; 1 bytes @ 0x2
   669   000003                     	ds	2
   670   000005                     ??_I2C_2_Master_Idle:
   671   000005                     ?___fpclassifyf:
   672                           	callstack 0
   673   000005                     ?___wmul:
   674                           	callstack 0
   675   000005                     ?___fladd:
   676                           	callstack 0
   677   000005                     ?_labs:
   678                           	callstack 0
   679   000005                     ?___flneg:
   680                           	callstack 0
   681   000005                     ?___fltol:
   682                           	callstack 0
   683   000005                     ?___xxtofl:
   684                           	callstack 0
   685   000005                     ?___aodiv:
   686                           	callstack 0
   687   000005                     ?___aomod:
   688                           	callstack 0
   689   000005                     putCharToTxBuf@byte:
   690                           	callstack 0
   691   000005                     initDCmotorsPWM@PWMperiod:
   692                           	callstack 0
   693   000005                     DCmotorsInit@mL:
   694                           	callstack 0
   695   000005                     ___wmul@multiplier:
   696                           	callstack 0
   697   000005                     memcpy@d1:
   698                           	callstack 0
   699   000005                     fputc@c:
   700                           	callstack 0
   701   000005                     strcpy@dest:
   702                           	callstack 0
   703   000005                     ___fleq@ff1:
   704                           	callstack 0
   705   000005                     ___flneg@f1:
   706                           	callstack 0
   707   000005                     ___fltol@f1:
   708                           	callstack 0
   709   000005                     ___fladd@b:
   710                           	callstack 0
   711   000005                     ___xxtofl@val:
   712                           	callstack 0
   713   000005                     ___fpclassifyf@x:
   714                           	callstack 0
   715   000005                     labs@a:
   716                           	callstack 0
   717   000005                     ___aodiv@dividend:
   718                           	callstack 0
   719   000005                     ___aomod@dividend:
   720                           	callstack 0
   721                           
   722                           ; 8 bytes @ 0x4
   723   000005                     	ds	1
   724   000006                     ??_I2C_2_Master_Read:
   725   000006                     I2C_2_Master_Write@data_byte:
   726                           	callstack 0
   727   000006                     TxBufferedString@string:
   728                           	callstack 0
   729                           
   730                           ; 2 bytes @ 0x5
   731   000006                     	ds	1
   732   000007                     color_writetoaddr@value:
   733                           	callstack 0
   734   000007                     I2C_2_Master_Read@ack:
   735                           	callstack 0
   736   000007                     DCmotorsInit@mR:
   737                           	callstack 0
   738   000007                     ___wmul@multiplicand:
   739                           	callstack 0
   740   000007                     memcpy@s1:
   741                           	callstack 0
   742   000007                     fputc@fp:
   743                           	callstack 0
   744   000007                     strcpy@src:
   745                           	callstack 0
   746                           
   747                           ; 2 bytes @ 0x6
   748   000007                     	ds	1
   749   000008                     color_writetoaddr@address:
   750                           	callstack 0
   751   000008                     I2C_2_Master_Read@tmp:
   752                           	callstack 0
   753                           
   754                           ; 1 bytes @ 0x7
   755   000008                     	ds	1
   756   000009                     ??_fputc:
   757   000009                     ??___fpclassifyf:
   758   000009                     ??_labs:
   759   000009                     ??_color_click_init:
   760   000009                     ??___fltol:
   761   000009                     ??___xxtofl:
   762   000009                     ?_color_read_Red:
   763                           	callstack 0
   764   000009                     ?_color_read_Green:
   765                           	callstack 0
   766   000009                     ?_color_read_Blue:
   767                           	callstack 0
   768   000009                     ?_color_read_Clear:
   769                           	callstack 0
   770   000009                     ___wmul@product:
   771                           	callstack 0
   772   000009                     memcpy@n:
   773                           	callstack 0
   774   000009                     strcpy@s:
   775                           	callstack 0
   776   000009                     ___fleq@ff2:
   777                           	callstack 0
   778   000009                     ___fladd@a:
   779                           	callstack 0
   780                           
   781                           ; 4 bytes @ 0x8
   782   000009                     	ds	2
   783   00000B                     ??_color_read_Red:
   784   00000B                     ??_color_read_Green:
   785   00000B                     ??_color_read_Blue:
   786   00000B                     ??_color_read_Clear:
   787   00000B                     ?___lwdiv:
   788                           	callstack 0
   789   00000B                     ___lwdiv@dividend:
   790                           	callstack 0
   791   00000B                     memcpy@d:
   792                           	callstack 0
   793   00000B                     strcpy@d:
   794                           	callstack 0
   795                           
   796                           ; 2 bytes @ 0xA
   797   00000B                     	ds	2
   798   00000D                     ??___fladd:
   799   00000D                     ??___fleq:
   800   00000D                     ___fltol@sign1:
   801                           	callstack 0
   802   00000D                     ___xxtofl@sign:
   803                           	callstack 0
   804   00000D                     ___lwdiv@divisor:
   805                           	callstack 0
   806   00000D                     ___fpclassifyf@e:
   807                           	callstack 0
   808   00000D                     memcpy@s:
   809                           	callstack 0
   810   00000D                     ___aodiv@divisor:
   811                           	callstack 0
   812   00000D                     ___aomod@divisor:
   813                           	callstack 0
   814                           
   815                           ; 8 bytes @ 0xC
   816   00000D                     	ds	1
   817   00000E                     ___fltol@exp1:
   818                           	callstack 0
   819   00000E                     ___xxtofl@exp:
   820                           	callstack 0
   821   00000E                     color_read_Red@tmp:
   822                           	callstack 0
   823   00000E                     color_read_Green@tmp:
   824                           	callstack 0
   825   00000E                     color_read_Blue@tmp:
   826                           	callstack 0
   827   00000E                     color_read_Clear@tmp:
   828                           	callstack 0
   829   00000E                     fputs@s:
   830                           	callstack 0
   831                           
   832                           ; 2 bytes @ 0xD
   833   00000E                     	ds	1
   834   00000F                     memcpy@tmp:
   835                           	callstack 0
   836   00000F                     ___lwdiv@quotient:
   837                           	callstack 0
   838   00000F                     ___xxtofl@arg:
   839                           	callstack 0
   840   00000F                     ___fpclassifyf@u:
   841                           	callstack 0
   842                           
   843                           ; 4 bytes @ 0xE
   844   00000F                     	ds	1
   845   000010                     getColor@v:
   846                           	callstack 0
   847   000010                     fputs@fp:
   848                           	callstack 0
   849                           
   850                           ; 2 bytes @ 0xF
   851   000010                     	ds	1
   852   000011                     ___lwdiv@counter:
   853                           	callstack 0
   854   000011                     ___fladd@signs:
   855                           	callstack 0
   856                           
   857                           ; 1 bytes @ 0x10
   858   000011                     	ds	1
   859   000012                     ___fladd@aexp:
   860                           	callstack 0
   861   000012                     fputs@c:
   862                           	callstack 0
   863   000012                     ambientCal@v:
   864                           	callstack 0
   865   000012                     whiteCal@v:
   866                           	callstack 0
   867   000012                     setMotorPWM@m:
   868                           	callstack 0
   869                           
   870                           ; 2 bytes @ 0x11
   871   000012                     	ds	1
   872   000013                     ___fladd@bexp:
   873                           	callstack 0
   874   000013                     fputs@i:
   875                           	callstack 0
   876                           
   877                           ; 2 bytes @ 0x12
   878   000013                     	ds	1
   879   000014                     ??_ambientCal:
   880   000014                     ??_whiteCal:
   881   000014                     ??_setMotorPWM:
   882   000014                     ___fladd@grs:
   883                           	callstack 0
   884                           
   885                           ; 1 bytes @ 0x13
   886   000014                     	ds	1
   887   000015                     ?___flmul:
   888                           	callstack 0
   889   000015                     ___aodiv@counter:
   890                           	callstack 0
   891   000015                     ___aomod@counter:
   892                           	callstack 0
   893   000015                     pad@fp:
   894                           	callstack 0
   895   000015                     ___flmul@b:
   896                           	callstack 0
   897                           
   898                           ; 4 bytes @ 0x14
   899   000015                     	ds	1
   900   000016                     setMotorPWM@posDuty:
   901                           	callstack 0
   902   000016                     ___aodiv@sign:
   903                           	callstack 0
   904   000016                     ___aomod@sign:
   905                           	callstack 0
   906   000016                     ambientCal@i:
   907                           	callstack 0
   908   000016                     whiteCal@i:
   909                           	callstack 0
   910                           
   911                           ; 2 bytes @ 0x15
   912   000016                     	ds	1
   913   000017                     ?_abs:
   914                           	callstack 0
   915   000017                     setMotorPWM@negDuty:
   916                           	callstack 0
   917   000017                     pad@buf:
   918                           	callstack 0
   919   000017                     abs@a:
   920                           	callstack 0
   921   000017                     ___aodiv@quotient:
   922                           	callstack 0
   923                           
   924                           ; 8 bytes @ 0x16
   925   000017                     	ds	1
   926   000018                     stop@mL:
   927                           	callstack 0
   928   000018                     reverse@mL:
   929                           	callstack 0
   930                           
   931                           ; 2 bytes @ 0x17
   932   000018                     	ds	1
   933   000019                     ??_abs:
   934   000019                     pad@p:
   935                           	callstack 0
   936   000019                     ___flmul@a:
   937                           	callstack 0
   938                           
   939                           ; 4 bytes @ 0x18
   940   000019                     	ds	1
   941   00001A                     stop@mR:
   942                           	callstack 0
   943   00001A                     reverse@mR:
   944                           	callstack 0
   945                           
   946                           ; 2 bytes @ 0x19
   947   00001A                     	ds	1
   948   00001B                     ??_pad:
   949                           
   950                           ; 1 bytes @ 0x1A
   951   00001B                     	ds	1
   952   00001C                     ??_stop:
   953   00001C                     pad@i:
   954                           	callstack 0
   955                           
   956                           ; 2 bytes @ 0x1B
   957   00001C                     	ds	1
   958   00001D                     ??___flmul:
   959                           
   960                           ; 1 bytes @ 0x1C
   961   00001D                     	ds	1
   962   00001E                     turnLeft_90@mL:
   963                           	callstack 0
   964   00001E                     turnRight_90@mL:
   965                           	callstack 0
   966   00001E                     turn_180@mL:
   967                           	callstack 0
   968   00001E                     turnRight_135@mL:
   969                           	callstack 0
   970   00001E                     turnLeft_135@mL:
   971                           	callstack 0
   972   00001E                     pad@w:
   973                           	callstack 0
   974                           
   975                           ; 2 bytes @ 0x1D
   976   00001E                     	ds	2
   977   000020                     turnLeft_90@mR:
   978                           	callstack 0
   979   000020                     turnRight_90@mR:
   980                           	callstack 0
   981   000020                     turn_180@mR:
   982                           	callstack 0
   983   000020                     turnRight_135@mR:
   984                           	callstack 0
   985   000020                     turnLeft_135@mR:
   986                           	callstack 0
   987   000020                     dtoa@fp:
   988                           	callstack 0
   989                           
   990                           ; 2 bytes @ 0x1F
   991   000020                     	ds	1
   992   000021                     ___flmul@sign:
   993                           	callstack 0
   994                           
   995                           ; 1 bytes @ 0x20
   996   000021                     	ds	1
   997   000022                     ??_turnRight_90:
   998   000022                     ??_turnRight_135:
   999   000022                     ??_turn_180:
  1000   000022                     ??_turnLeft_90:
  1001   000022                     ??_turnLeft_135:
  1002   000022                     ___flmul@grs:
  1003                           	callstack 0
  1004   000022                     dtoa@d:
  1005                           	callstack 0
  1006                           
  1007                           ; 8 bytes @ 0x21
  1008   000022                     	ds	2
  1009   000024                     reverseSquareRight@mL:
  1010                           	callstack 0
  1011   000024                     reverseSquareLeft@mL:
  1012                           	callstack 0
  1013                           
  1014                           ; 2 bytes @ 0x23
  1015   000024                     	ds	2
  1016   000026                     ___flmul@aexp:
  1017                           	callstack 0
  1018   000026                     reverseSquareRight@mR:
  1019                           	callstack 0
  1020   000026                     reverseSquareLeft@mR:
  1021                           	callstack 0
  1022                           
  1023                           ; 2 bytes @ 0x25
  1024   000026                     	ds	1
  1025   000027                     ___flmul@bexp:
  1026                           	callstack 0
  1027                           
  1028                           ; 1 bytes @ 0x26
  1029   000027                     	ds	1
  1030   000028                     ??_reverseSquareRight:
  1031   000028                     ??_reverseSquareLeft:
  1032   000028                     ___flmul@prod:
  1033                           	callstack 0
  1034                           
  1035                           ; 4 bytes @ 0x27
  1036   000028                     	ds	2
  1037   00002A                     ??_dtoa:
  1038                           
  1039                           ; 1 bytes @ 0x29
  1040   00002A                     	ds	2
  1041   00002C                     ___flmul@temp:
  1042                           	callstack 0
  1043                           
  1044                           ; 2 bytes @ 0x2B
  1045   00002C                     	ds	2
  1046   00002E                     ?___flsub:
  1047                           	callstack 0
  1048   00002E                     ___flsub@b:
  1049                           	callstack 0
  1050                           
  1051                           ; 4 bytes @ 0x2D
  1052   00002E                     	ds	4
  1053   000032                     _dtoa$2694:
  1054                           	callstack 0
  1055   000032                     ___flsub@a:
  1056                           	callstack 0
  1057                           
  1058                           ; 4 bytes @ 0x31
  1059   000032                     	ds	2
  1060   000034                     dtoa@p:
  1061                           	callstack 0
  1062                           
  1063                           ; 2 bytes @ 0x33
  1064   000034                     	ds	2
  1065   000036                     ?___fldiv:
  1066                           	callstack 0
  1067   000036                     dtoa@w:
  1068                           	callstack 0
  1069   000036                     ___flge@ff1:
  1070                           	callstack 0
  1071   000036                     ___fldiv@b:
  1072                           	callstack 0
  1073                           
  1074                           ; 4 bytes @ 0x35
  1075   000036                     	ds	2
  1076   000038                     dtoa@n:
  1077                           	callstack 0
  1078                           
  1079                           ; 8 bytes @ 0x37
  1080   000038                     	ds	2
  1081   00003A                     ___flge@ff2:
  1082                           	callstack 0
  1083   00003A                     ___fldiv@a:
  1084                           	callstack 0
  1085                           
  1086                           ; 4 bytes @ 0x39
  1087   00003A                     	ds	4
  1088   00003E                     ??___fldiv:
  1089   00003E                     ??___flge:
  1090                           
  1091                           ; 1 bytes @ 0x3D
  1092   00003E                     	ds	2
  1093   000040                     dtoa@i:
  1094                           	callstack 0
  1095                           
  1096                           ; 2 bytes @ 0x3F
  1097   000040                     	ds	2
  1098   000042                     dtoa@s:
  1099                           	callstack 0
  1100   000042                     ___fldiv@rem:
  1101                           	callstack 0
  1102                           
  1103                           ; 4 bytes @ 0x41
  1104   000042                     	ds	4
  1105   000046                     ___fldiv@sign:
  1106                           	callstack 0
  1107                           
  1108                           ; 1 bytes @ 0x45
  1109   000046                     	ds	1
  1110   000047                     ___fldiv@new_exp:
  1111                           	callstack 0
  1112                           
  1113                           ; 2 bytes @ 0x46
  1114   000047                     	ds	2
  1115   000049                     ___fldiv@grs:
  1116                           	callstack 0
  1117                           
  1118                           ; 4 bytes @ 0x48
  1119   000049                     	ds	4
  1120   00004D                     ___fldiv@bexp:
  1121                           	callstack 0
  1122                           
  1123                           ; 1 bytes @ 0x4C
  1124   00004D                     	ds	1
  1125   00004E                     ___fldiv@aexp:
  1126                           	callstack 0
  1127                           
  1128                           ; 1 bytes @ 0x4D
  1129   00004E                     	ds	1
  1130   00004F                     ??_colorDetect:
  1131   00004F                     ?_floorf:
  1132                           	callstack 0
  1133   00004F                     floorf@x:
  1134                           	callstack 0
  1135                           
  1136                           ; 4 bytes @ 0x4E
  1137   00004F                     	ds	4
  1138   000053                     ??_efgtoa:
  1139                           
  1140                           ; 1 bytes @ 0x52
  1141   000053                     	ds	2
  1142   000055                     ??_vfpfcnvrt:
  1143                           
  1144                           ; 1 bytes @ 0x54
  1145   000055                     	ds	2
  1146   000057                     
  1147                           ; 1 bytes @ 0x56
  1148 ;;
  1149 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1150 ;;
  1151 ;; *************** function _main *****************
  1152 ;; Defined at:
  1153 ;;		line 24 in file "MazeRobot.X/main.c"
  1154 ;; Parameters:    Size  Location     Type
  1155 ;;		None
  1156 ;; Auto vars:     Size  Location     Type
  1157 ;;  string4        20    0[BANK1 ] unsigned char [20]
  1158 ;;  string5        20    0        unsigned char [20]
  1159 ;;  string3        20    0        unsigned char [20]
  1160 ;;  string2        20    0        unsigned char [20]
  1161 ;;  string1        20    0        unsigned char [20]
  1162 ;;  testString     20    0        unsigned char [20]
  1163 ;;  motorLeft       9   61[BANK1 ] struct DC_motor
  1164 ;;  motorRight      9   52[BANK1 ] struct DC_motor
  1165 ;;  whiteRGBVal     8   44[BANK1 ] struct RGB
  1166 ;;  RGBVal          8   36[BANK1 ] struct RGB
  1167 ;;  ambientRGBVa    8   28[BANK1 ] struct RGB
  1168 ;;  clearRef        4   24[BANK1 ] struct RGB
  1169 ;;  whiteC          4   20[BANK1 ] struct RGB
  1170 ;; Return value:  Size  Location     Type
  1171 ;;                  1    wreg      void 
  1172 ;; Registers used:
  1173 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1174 ;; Tracked objects:
  1175 ;;		On entry : 0/0
  1176 ;;		On exit  : 0/0
  1177 ;;		Unchanged: 0/0
  1178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1180 ;;      Locals:         0       0      70       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1181 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1182 ;;      Totals:         0       2      70       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1183 ;;Total ram usage:       72 bytes
  1184 ;; Hardware stack levels required when called: 10
  1185 ;; This function calls:
  1186 ;;		_DCmotorsInit
  1187 ;;		_TxBufferedString
  1188 ;;		___fldiv
  1189 ;;		___flge
  1190 ;;		___xxtofl
  1191 ;;		_ambientCal
  1192 ;;		_colorDetect
  1193 ;;		_color_click_init
  1194 ;;		_getColor
  1195 ;;		_initDCmotorsPWM
  1196 ;;		_initUSART4
  1197 ;;		_sendTxBuf
  1198 ;;		_sprintf
  1199 ;;		_stop
  1200 ;;		_whiteCal
  1201 ;; This function is called by:
  1202 ;;		Startup code after reset
  1203 ;; This function uses a non-reentrant model
  1204 ;;
  1205                           
  1206                           	psect	text0
  1207   003580                     __ptext0:
  1208                           	callstack 0
  1209   003580                     _main:
  1210                           	callstack 21
  1211   003580                     
  1212                           ;MazeRobot.X/main.c: 26:     color_click_init();
  1213   003580  EC03  F02B         	call	_color_click_init	;wreg free
  1214   003584                     
  1215                           ;MazeRobot.X/main.c: 27:     initUSART4();
  1216   003584  ECB1  F02B         	call	_initUSART4	;wreg free
  1217   003588                     
  1218                           ;MazeRobot.X/main.c: 28:     initDCmotorsPWM(199);
  1219   003588  0E00               	movlw	0
  1220   00358A  6E06               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
  1221   00358C  0EC7               	movlw	199
  1222   00358E  6E05               	movwf	initDCmotorsPWM@PWMperiod^0,c
  1223   003590  EC5B  F027         	call	_initDCmotorsPWM	;wreg free
  1224   003594                     
  1225                           ;MazeRobot.X/main.c: 35:     LATDbits.LATD7=0;
  1226   003594  9E7C               	bcf	124,7,c	;volatile
  1227   003596                     
  1228                           ;MazeRobot.X/main.c: 36:     TRISDbits.TRISD7=0;
  1229   003596  9E84               	bcf	132,7,c	;volatile
  1230   003598                     
  1231                           ;MazeRobot.X/main.c: 38:     LATHbits.LATH3=0;
  1232   003598  9680               	bcf	128,3,c	;volatile
  1233   00359A                     
  1234                           ;MazeRobot.X/main.c: 39:     TRISHbits.TRISH3=0;
  1235   00359A  9688               	bcf	136,3,c	;volatile
  1236   00359C                     
  1237                           ;MazeRobot.X/main.c: 41:     LATDbits.LATD4 = 0;
  1238   00359C  987C               	bcf	124,4,c	;volatile
  1239   00359E                     
  1240                           ;MazeRobot.X/main.c: 42:     TRISDbits.TRISD4 = 0;
  1241   00359E  9884               	bcf	132,4,c	;volatile
  1242   0035A0                     
  1243                           ;MazeRobot.X/main.c: 44:     LATHbits.LATH0 = 0;
  1244   0035A0  9080               	bcf	128,0,c	;volatile
  1245   0035A2                     
  1246                           ;MazeRobot.X/main.c: 45:     TRISHbits.TRISH0 = 0;
  1247   0035A2  9088               	bcf	136,0,c	;volatile
  1248   0035A4                     
  1249                           ;MazeRobot.X/main.c: 47:     LATFbits.LATF0 = 0;
  1250   0035A4  907E               	bcf	126,0,c	;volatile
  1251   0035A6                     
  1252                           ;MazeRobot.X/main.c: 48:     TRISFbits.TRISF0 = 0;
  1253   0035A6  9086               	bcf	134,0,c	;volatile
  1254   0035A8                     
  1255                           ;MazeRobot.X/main.c: 50:     LATHbits.LATH1 = 0;
  1256   0035A8  9280               	bcf	128,1,c	;volatile
  1257   0035AA                     
  1258                           ;MazeRobot.X/main.c: 51:     TRISHbits.TRISH1 = 0;
  1259   0035AA  9288               	bcf	136,1,c	;volatile
  1260   0035AC                     
  1261                           ;MazeRobot.X/main.c: 53:     LATDbits.LATD3 = 0;
  1262   0035AC  967C               	bcf	124,3,c	;volatile
  1263   0035AE                     
  1264                           ;MazeRobot.X/main.c: 54:     TRISDbits.TRISD3 = 0;
  1265   0035AE  9684               	bcf	132,3,c	;volatile
  1266   0035B0                     
  1267                           ;MazeRobot.X/main.c: 57:     LATDbits.LATD4 = 1;
  1268   0035B0  887C               	bsf	124,4,c	;volatile
  1269   0035B2                     
  1270                           ;MazeRobot.X/main.c: 58:     LATFbits.LATF0 = 1;
  1271   0035B2  807E               	bsf	126,0,c	;volatile
  1272   0035B4                     
  1273                           ;MazeRobot.X/main.c: 59:     LATHbits.LATH0 = 1;
  1274   0035B4  8080               	bsf	128,0,c	;volatile
  1275   0035B6                     
  1276                           ;MazeRobot.X/main.c: 60:     LATFbits.LATF0 = 1;
  1277   0035B6  807E               	bsf	126,0,c	;volatile
  1278   0035B8                     
  1279                           ;MazeRobot.X/main.c: 61:     LATDbits.LATD3 = 1;
  1280   0035B8  867C               	bsf	124,3,c	;volatile
  1281   0035BA                     
  1282                           ;MazeRobot.X/main.c: 66:     LATGbits.LATG0=1;
  1283   0035BA  807F               	bsf	127,0,c	;volatile
  1284   0035BC                     
  1285                           ;MazeRobot.X/main.c: 67:     LATEbits.LATE7=1;
  1286   0035BC  8E7D               	bsf	125,7,c	;volatile
  1287   0035BE                     
  1288                           ;MazeRobot.X/main.c: 68:     LATAbits.LATA3=1;
  1289   0035BE  8679               	bsf	121,3,c	;volatile
  1290   0035C0                     
  1291                           ;MazeRobot.X/main.c: 70:     TRISGbits.TRISG0=0;
  1292   0035C0  9087               	bcf	135,0,c	;volatile
  1293   0035C2                     
  1294                           ;MazeRobot.X/main.c: 71:     TRISEbits.TRISE7=0;
  1295   0035C2  9E85               	bcf	133,7,c	;volatile
  1296   0035C4                     
  1297                           ;MazeRobot.X/main.c: 72:     TRISAbits.TRISA3=0;
  1298   0035C4  9681               	bcf	129,3,c	;volatile
  1299   0035C6                     
  1300                           ;MazeRobot.X/main.c: 75:     TRISFbits.TRISF2=1;
  1301   0035C6  8486               	bsf	134,2,c	;volatile
  1302   0035C8                     
  1303                           ;MazeRobot.X/main.c: 76:     ANSELFbits.ANSELF2=0;
  1304   0035C8  010E               	movlb	14	; () banked
  1305   0035CA  95B4               	bcf	180,2,b	;volatile
  1306   0035CC                     
  1307                           ; BSR set to: 14
  1308                           ;MazeRobot.X/main.c: 78:     TRISFbits.TRISF3=1;
  1309   0035CC  8686               	bsf	134,3,c	;volatile
  1310   0035CE                     
  1311                           ; BSR set to: 14
  1312                           ;MazeRobot.X/main.c: 79:     ANSELFbits.ANSELF3=0;
  1313   0035CE  97B4               	bcf	180,3,b	;volatile
  1314   0035D0                     
  1315                           ; BSR set to: 14
  1316                           ;MazeRobot.X/main.c: 95:     DC_motor motorLeft,motorRight;;MazeRobot.X/main.c: 96:     
      +                          DCmotorsInit(&motorLeft,&motorRight);
  1317   0035D0  0EC9               	movlw	low main@motorLeft
  1318   0035D2  6E05               	movwf	DCmotorsInit@mL^0,c
  1319   0035D4  0E01               	movlw	high main@motorLeft
  1320   0035D6  6E06               	movwf	(DCmotorsInit@mL+1)^0,c
  1321   0035D8  0EC0               	movlw	low main@motorRight
  1322   0035DA  6E07               	movwf	DCmotorsInit@mR^0,c
  1323   0035DC  0E01               	movlw	high main@motorRight
  1324   0035DE  6E08               	movwf	(DCmotorsInit@mR+1)^0,c
  1325   0035E0  ECE1  F025         	call	_DCmotorsInit	;wreg free
  1326   0035E4                     l6071:
  1327                           
  1328                           ;MazeRobot.X/main.c: 117:         getColor(&RGBVal);
  1329   0035E4  0EB0               	movlw	low main@RGBVal
  1330   0035E6  6E10               	movwf	getColor@v^0,c
  1331   0035E8  0E01               	movlw	high main@RGBVal
  1332   0035EA  6E11               	movwf	(getColor@v+1)^0,c
  1333   0035EC  ECCF  F028         	call	_getColor	;wreg free
  1334   0035F0                     
  1335                           ;MazeRobot.X/main.c: 120:         if (!PORTFbits.RF2){
  1336   0035F0  B48E               	btfsc	142,2,c	;volatile
  1337   0035F2  EFFD  F01A         	goto	u6651
  1338   0035F6  EFFF  F01A         	goto	u6650
  1339   0035FA                     u6651:
  1340   0035FA  EF05  F01B         	goto	l6077
  1341   0035FE                     u6650:
  1342   0035FE                     
  1343                           ;MazeRobot.X/main.c: 121:             ambientCal (&ambientRGBVal);
  1344   0035FE  0EA8               	movlw	low main@ambientRGBVal
  1345   003600  6E12               	movwf	ambientCal@v^0,c
  1346   003602  0E01               	movlw	high main@ambientRGBVal
  1347   003604  6E13               	movwf	(ambientCal@v+1)^0,c
  1348   003606  EC04  F025         	call	_ambientCal	;wreg free
  1349   00360A                     l6077:
  1350                           
  1351                           ;MazeRobot.X/main.c: 124:         if (!PORTFbits.RF3){
  1352   00360A  B68E               	btfsc	142,3,c	;volatile
  1353   00360C  EF0A  F01B         	goto	u6661
  1354   003610  EF0C  F01B         	goto	u6660
  1355   003614                     u6661:
  1356   003614  EF12  F01B         	goto	l6081
  1357   003618                     u6660:
  1358   003618                     
  1359                           ;MazeRobot.X/main.c: 125:             whiteCal (&whiteRGBVal);
  1360   003618  0EB8               	movlw	low main@whiteRGBVal
  1361   00361A  6E12               	movwf	whiteCal@v^0,c
  1362   00361C  0E01               	movlw	high main@whiteRGBVal
  1363   00361E  6E13               	movwf	(whiteCal@v+1)^0,c
  1364   003620  EC92  F024         	call	_whiteCal	;wreg free
  1365   003624                     l6081:
  1366                           
  1367                           ;MazeRobot.X/main.c: 129:         LATHbits.LATH3=!LATHbits.LATH3;
  1368   003624  A680               	btfss	128,3,c	;volatile
  1369   003626  EF17  F01B         	goto	u6671
  1370   00362A  EF1C  F01B         	goto	u6670
  1371   00362E                     u6671:
  1372   00362E  0100               	movlb	0	; () banked
  1373   003630  6BD5               	clrf	??_main& (0+255),b
  1374   003632  2BD5               	incf	??_main& (0+255),f,b
  1375   003634  EF1E  F01B         	goto	u6688
  1376   003638                     u6670:
  1377   003638  0100               	movlb	0	; () banked
  1378   00363A  6BD5               	clrf	??_main& (0+255),b
  1379   00363C                     u6688:
  1380   00363C  47D5               	rlncf	??_main& (0+255),f,b
  1381   00363E  47D5               	rlncf	??_main& (0+255),f,b
  1382   003640  47D5               	rlncf	??_main& (0+255),f,b
  1383   003642  5080               	movf	128,w,c	;volatile
  1384   003644  19D5               	xorwf	??_main& (0+255),w,b
  1385   003646  0BF7               	andlw	-9
  1386   003648  19D5               	xorwf	??_main& (0+255),w,b
  1387   00364A  6E80               	movwf	128,c	;volatile
  1388   00364C                     
  1389                           ; BSR set to: 0
  1390                           ;MazeRobot.X/main.c: 132:         whiteC = whiteRGBVal.C;
  1391   00364C  C1BE  F005         	movff	main@whiteRGBVal+6,___xxtofl@val
  1392   003650  C1BF  F006         	movff	main@whiteRGBVal+7,___xxtofl@val+1
  1393   003654  6A07               	clrf	(___xxtofl@val+2)^0,c
  1394   003656  6A08               	clrf	(___xxtofl@val+3)^0,c
  1395   003658  0E00               	movlw	0
  1396   00365A  ECEE  F01C         	call	___xxtofl
  1397   00365E  C005  F1A0         	movff	?___xxtofl,main@whiteC
  1398   003662  C006  F1A1         	movff	?___xxtofl+1,main@whiteC+1
  1399   003666  C007  F1A2         	movff	?___xxtofl+2,main@whiteC+2
  1400   00366A  C008  F1A3         	movff	?___xxtofl+3,main@whiteC+3
  1401   00366E                     
  1402                           ;MazeRobot.X/main.c: 133:         clearRef = RGBVal.C/whiteC;
  1403   00366E  C1B6  F005         	movff	main@RGBVal+6,___xxtofl@val
  1404   003672  C1B7  F006         	movff	main@RGBVal+7,___xxtofl@val+1
  1405   003676  6A07               	clrf	(___xxtofl@val+2)^0,c
  1406   003678  6A08               	clrf	(___xxtofl@val+3)^0,c
  1407   00367A  0E00               	movlw	0
  1408   00367C  ECEE  F01C         	call	___xxtofl
  1409   003680  C005  F036         	movff	?___xxtofl,___fldiv@b
  1410   003684  C006  F037         	movff	?___xxtofl+1,___fldiv@b+1
  1411   003688  C007  F038         	movff	?___xxtofl+2,___fldiv@b+2
  1412   00368C  C008  F039         	movff	?___xxtofl+3,___fldiv@b+3
  1413   003690  C1A0  F03A         	movff	main@whiteC,___fldiv@a
  1414   003694  C1A1  F03B         	movff	main@whiteC+1,___fldiv@a+1
  1415   003698  C1A2  F03C         	movff	main@whiteC+2,___fldiv@a+2
  1416   00369C  C1A3  F03D         	movff	main@whiteC+3,___fldiv@a+3
  1417   0036A0  EC31  F016         	call	___fldiv	;wreg free
  1418   0036A4  C036  F1A4         	movff	?___fldiv,main@clearRef
  1419   0036A8  C037  F1A5         	movff	?___fldiv+1,main@clearRef+1
  1420   0036AC  C038  F1A6         	movff	?___fldiv+2,main@clearRef+2
  1421   0036B0  C039  F1A7         	movff	?___fldiv+3,main@clearRef+3
  1422   0036B4                     
  1423                           ;MazeRobot.X/main.c: 135:         if (clearRef > 0.12){
  1424   0036B4  0E8F               	movlw	143
  1425   0036B6  6E36               	movwf	___flge@ff1^0,c
  1426   0036B8  0EC2               	movlw	194
  1427   0036BA  6E37               	movwf	(___flge@ff1+1)^0,c
  1428   0036BC  0EF5               	movlw	245
  1429   0036BE  6E38               	movwf	(___flge@ff1+2)^0,c
  1430   0036C0  0E3D               	movlw	61
  1431   0036C2  6E39               	movwf	(___flge@ff1+3)^0,c
  1432   0036C4  C1A4  F03A         	movff	main@clearRef,___flge@ff2
  1433   0036C8  C1A5  F03B         	movff	main@clearRef+1,___flge@ff2+1
  1434   0036CC  C1A6  F03C         	movff	main@clearRef+2,___flge@ff2+2
  1435   0036D0  C1A7  F03D         	movff	main@clearRef+3,___flge@ff2+3
  1436   0036D4  EC91  F023         	call	___flge	;wreg free
  1437   0036D8  B0D8               	btfsc	status,0,c
  1438   0036DA  EF71  F01B         	goto	u6691
  1439   0036DE  EF73  F01B         	goto	u6690
  1440   0036E2                     u6691:
  1441   0036E2  EF9C  F01B         	goto	l6093
  1442   0036E6                     u6690:
  1443   0036E6                     
  1444                           ;MazeRobot.X/main.c: 136:             colorDetect (clearRef,&ambientRGBVal,&whiteRGBVal,
      +                          &motorLeft,&motorRight);
  1445   0036E6  C1A4  F060         	movff	main@clearRef,colorDetect@clearRef
  1446   0036EA  C1A5  F061         	movff	main@clearRef+1,colorDetect@clearRef+1
  1447   0036EE  C1A6  F062         	movff	main@clearRef+2,colorDetect@clearRef+2
  1448   0036F2  C1A7  F063         	movff	main@clearRef+3,colorDetect@clearRef+3
  1449   0036F6  0EA8               	movlw	low main@ambientRGBVal
  1450   0036F8  0100               	movlb	0	; () banked
  1451   0036FA  6F64               	movwf	colorDetect@ambientRGBVal& (0+255),b
  1452   0036FC  0E01               	movlw	high main@ambientRGBVal
  1453   0036FE  6F65               	movwf	(colorDetect@ambientRGBVal+1)& (0+255),b
  1454   003700  0EB8               	movlw	low main@whiteRGBVal
  1455   003702  6F66               	movwf	colorDetect@whiteRGBVal& (0+255),b
  1456   003704  0E01               	movlw	high main@whiteRGBVal
  1457   003706  6F67               	movwf	(colorDetect@whiteRGBVal+1)& (0+255),b
  1458   003708  0EC9               	movlw	low main@motorLeft
  1459   00370A  6F68               	movwf	colorDetect@mL& (0+255),b
  1460   00370C  0E01               	movlw	high main@motorLeft
  1461   00370E  6F69               	movwf	(colorDetect@mL+1)& (0+255),b
  1462   003710  0EC0               	movlw	low main@motorRight
  1463   003712  6F6A               	movwf	colorDetect@mR& (0+255),b
  1464   003714  0E01               	movlw	high main@motorRight
  1465   003716  6F6B               	movwf	(colorDetect@mR+1)& (0+255),b
  1466   003718  EC0E  F007         	call	_colorDetect	;wreg free
  1467   00371C                     
  1468                           ;MazeRobot.X/main.c: 138:             _delay((unsigned long)((500)*(64000000/4000.0)));
  1469   00371C  0E29               	movlw	41
  1470   00371E  0100               	movlb	0	; () banked
  1471   003720  6FD6               	movwf	(??_main+1)& (0+255),b
  1472   003722  0E96               	movlw	150
  1473   003724  6FD5               	movwf	??_main& (0+255),b
  1474   003726  0E7F               	movlw	127
  1475   003728                     u6707:
  1476   003728  2EE8               	decfsz	wreg,f,c
  1477   00372A  D7FE               	bra	u6707
  1478   00372C  2FD5               	decfsz	??_main& (0+255),f,b
  1479   00372E  D7FC               	bra	u6707
  1480   003730  2FD6               	decfsz	(??_main+1)& (0+255),f,b
  1481   003732  D7FA               	bra	u6707
  1482                           
  1483                           ;MazeRobot.X/main.c: 139:         }
  1484   003734  EFA6  F01B         	goto	l6095
  1485   003738                     l6093:
  1486   003738  0EC9               	movlw	low main@motorLeft
  1487   00373A  6E18               	movwf	stop@mL^0,c
  1488   00373C  0E01               	movlw	high main@motorLeft
  1489   00373E  6E19               	movwf	(stop@mL+1)^0,c
  1490   003740  0EC0               	movlw	low main@motorRight
  1491   003742  6E1A               	movwf	stop@mR^0,c
  1492   003744  0E01               	movlw	high main@motorRight
  1493   003746  6E1B               	movwf	(stop@mR+1)^0,c
  1494   003748  ECAF  F026         	call	_stop	;wreg free
  1495   00374C                     l6095:
  1496                           
  1497                           ;MazeRobot.X/main.c: 142:         _delay((unsigned long)((100)*(64000000/4000.0)));
  1498   00374C  0E09               	movlw	9
  1499   00374E  0100               	movlb	0	; () banked
  1500   003750  6FD6               	movwf	(??_main+1)& (0+255),b
  1501   003752  0E1E               	movlw	30
  1502   003754  6FD5               	movwf	??_main& (0+255),b
  1503   003756  0EE4               	movlw	228
  1504   003758                     u6717:
  1505   003758  2EE8               	decfsz	wreg,f,c
  1506   00375A  D7FE               	bra	u6717
  1507   00375C  2FD5               	decfsz	??_main& (0+255),f,b
  1508   00375E  D7FC               	bra	u6717
  1509   003760  2FD6               	decfsz	(??_main+1)& (0+255),f,b
  1510   003762  D7FA               	bra	u6717
  1511   003764  F000               	nop	
  1512   003766                     
  1513                           ;MazeRobot.X/main.c: 145:         sprintf(string4,"  C: %d  %d  %f \r",RGBVal.C, whiteRG
      +                          BVal.C, clearRef);
  1514   003766  0E8C               	movlw	low main@string4
  1515   003768  0100               	movlb	0	; () banked
  1516   00376A  6FBC               	movwf	sprintf@s& (0+255),b
  1517   00376C  0E01               	movlw	high main@string4
  1518   00376E  6FBD               	movwf	(sprintf@s+1)& (0+255),b
  1519   003770  0E01               	movlw	low STR_1
  1520   003772  6FBE               	movwf	sprintf@fmt& (0+255),b
  1521   003774  0E0E               	movlw	high STR_1
  1522   003776  6FBF               	movwf	(sprintf@fmt+1)& (0+255),b
  1523   003778  C1B6  F0C0         	movff	main@RGBVal+6,?_sprintf+4
  1524   00377C  C1B7  F0C1         	movff	main@RGBVal+7,?_sprintf+5
  1525   003780  C1BE  F0C2         	movff	main@whiteRGBVal+6,?_sprintf+6
  1526   003784  C1BF  F0C3         	movff	main@whiteRGBVal+7,?_sprintf+7
  1527   003788  C1A4  F0C4         	movff	main@clearRef,?_sprintf+8
  1528   00378C  C1A5  F0C5         	movff	main@clearRef+1,?_sprintf+9
  1529   003790  C1A6  F0C6         	movff	main@clearRef+2,?_sprintf+10
  1530   003794  C1A7  F0C7         	movff	main@clearRef+3,?_sprintf+11
  1531   003798  EC29  F029         	call	_sprintf	;wreg free
  1532   00379C                     
  1533                           ;MazeRobot.X/main.c: 146:         TxBufferedString(string4);
  1534   00379C  0E8C               	movlw	low main@string4
  1535   00379E  6E06               	movwf	TxBufferedString@string^0,c
  1536   0037A0  0E01               	movlw	high main@string4
  1537   0037A2  6E07               	movwf	(TxBufferedString@string+1)^0,c
  1538   0037A4  EC1D  F02B         	call	_TxBufferedString	;wreg free
  1539   0037A8                     
  1540                           ;MazeRobot.X/main.c: 147:         sendTxBuf();
  1541   0037A8  ECD1  F02B         	call	_sendTxBuf	;wreg free
  1542   0037AC                     
  1543                           ;MazeRobot.X/main.c: 148:         _delay((unsigned long)((2)*(64000000/4000.0)));
  1544   0037AC  0E2A               	movlw	42
  1545   0037AE  0100               	movlb	0	; () banked
  1546   0037B0  6FD5               	movwf	??_main& (0+255),b
  1547   0037B2  0E8D               	movlw	141
  1548   0037B4                     u6727:
  1549   0037B4  2EE8               	decfsz	wreg,f,c
  1550   0037B6  D7FE               	bra	u6727
  1551   0037B8  2FD5               	decfsz	??_main& (0+255),f,b
  1552   0037BA  D7FC               	bra	u6727
  1553   0037BC  D000               	nop2	
  1554   0037BE  EFF2  F01A         	goto	l6071
  1555   0037C2  EF34  F000         	goto	start
  1556   0037C6                     __end_of_main:
  1557                           	callstack 0
  1558                           
  1559 ;; *************** function _whiteCal *****************
  1560 ;; Defined at:
  1561 ;;		line 114 in file "MazeRobot.X/color.c"
  1562 ;; Parameters:    Size  Location     Type
  1563 ;;  v               2   17[COMRAM] PTR struct RGB
  1564 ;;		 -> main@whiteRGBVal(8), 
  1565 ;; Auto vars:     Size  Location     Type
  1566 ;;  i               2   21[COMRAM] int 
  1567 ;; Return value:  Size  Location     Type
  1568 ;;                  1    wreg      void 
  1569 ;; Registers used:
  1570 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1571 ;; Tracked objects:
  1572 ;;		On entry : 0/0
  1573 ;;		On exit  : 0/0
  1574 ;;		Unchanged: 0/0
  1575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1576 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1577 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1578 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1579 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1580 ;;Total ram usage:        6 bytes
  1581 ;; Hardware stack levels used: 1
  1582 ;; Hardware stack levels required when called: 6
  1583 ;; This function calls:
  1584 ;;		_getColor
  1585 ;; This function is called by:
  1586 ;;		_main
  1587 ;; This function uses a non-reentrant model
  1588 ;;
  1589                           
  1590                           	psect	text1
  1591   004924                     __ptext1:
  1592                           	callstack 0
  1593   004924                     _whiteCal:
  1594                           	callstack 24
  1595   004924                     
  1596                           ;MazeRobot.X/color.c: 116:     for(int i = 0;i<20;i++){
  1597   004924  0E00               	movlw	0
  1598   004926  6E17               	movwf	(whiteCal@i+1)^0,c
  1599   004928  0E00               	movlw	0
  1600   00492A  6E16               	movwf	whiteCal@i^0,c
  1601   00492C                     l5011:
  1602                           
  1603                           ;MazeRobot.X/color.c: 117:             LATDbits.LATD7 = !LATDbits.LATD7;
  1604   00492C  AE7C               	btfss	124,7,c	;volatile
  1605   00492E  EF9B  F024         	goto	u5281
  1606   004932  EF9F  F024         	goto	u5280
  1607   004936                     u5281:
  1608   004936  6A14               	clrf	??_whiteCal^0,c
  1609   004938  2A14               	incf	??_whiteCal^0,f,c
  1610   00493A  EFA0  F024         	goto	u5298
  1611   00493E                     u5280:
  1612   00493E  6A14               	clrf	??_whiteCal^0,c
  1613   004940                     u5298:
  1614   004940  3214               	rrcf	??_whiteCal^0,f,c
  1615   004942  3214               	rrcf	??_whiteCal^0,f,c
  1616   004944  507C               	movf	124,w,c	;volatile
  1617   004946  1814               	xorwf	??_whiteCal^0,w,c
  1618   004948  0B7F               	andlw	-129
  1619   00494A  1814               	xorwf	??_whiteCal^0,w,c
  1620   00494C  6E7C               	movwf	124,c	;volatile
  1621   00494E                     
  1622                           ;MazeRobot.X/color.c: 118:             _delay((unsigned long)((100)*(64000000/4000.0)));
  1623   00494E  0E09               	movlw	9
  1624   004950  6E15               	movwf	(??_whiteCal+1)^0,c
  1625   004952  0E1E               	movlw	30
  1626   004954  6E14               	movwf	??_whiteCal^0,c
  1627   004956  0EE4               	movlw	228
  1628   004958                     u6737:
  1629   004958  2EE8               	decfsz	wreg,f,c
  1630   00495A  D7FE               	bra	u6737
  1631   00495C  2E14               	decfsz	??_whiteCal^0,f,c
  1632   00495E  D7FC               	bra	u6737
  1633   004960  2E15               	decfsz	(??_whiteCal+1)^0,f,c
  1634   004962  D7FA               	bra	u6737
  1635   004964  D000               	nop2	
  1636                           
  1637                           ;MazeRobot.X/color.c: 119:             }
  1638   004966  4A16               	infsnz	whiteCal@i^0,f,c
  1639   004968  2A17               	incf	(whiteCal@i+1)^0,f,c
  1640   00496A  BE17               	btfsc	(whiteCal@i+1)^0,7,c
  1641   00496C  EFC1  F024         	goto	u5301
  1642   004970  5017               	movf	(whiteCal@i+1)^0,w,c
  1643   004972  E109               	bnz	u5300
  1644   004974  0E14               	movlw	20
  1645   004976  5C16               	subwf	whiteCal@i^0,w,c
  1646   004978  A0D8               	btfss	status,0,c
  1647   00497A  EFC1  F024         	goto	u5301
  1648   00497E  EFC3  F024         	goto	u5300
  1649   004982                     u5301:
  1650   004982  EF96  F024         	goto	l5011
  1651   004986                     u5300:
  1652   004986                     
  1653                           ;MazeRobot.X/color.c: 120:             LATDbits.LATD7 = !LATDbits.LATD7;
  1654   004986  AE7C               	btfss	124,7,c	;volatile
  1655   004988  EFC8  F024         	goto	u5311
  1656   00498C  EFCC  F024         	goto	u5310
  1657   004990                     u5311:
  1658   004990  6A14               	clrf	??_whiteCal^0,c
  1659   004992  2A14               	incf	??_whiteCal^0,f,c
  1660   004994  EFCD  F024         	goto	u5328
  1661   004998                     u5310:
  1662   004998  6A14               	clrf	??_whiteCal^0,c
  1663   00499A                     u5328:
  1664   00499A  3214               	rrcf	??_whiteCal^0,f,c
  1665   00499C  3214               	rrcf	??_whiteCal^0,f,c
  1666   00499E  507C               	movf	124,w,c	;volatile
  1667   0049A0  1814               	xorwf	??_whiteCal^0,w,c
  1668   0049A2  0B7F               	andlw	-129
  1669   0049A4  1814               	xorwf	??_whiteCal^0,w,c
  1670   0049A6  6E7C               	movwf	124,c	;volatile
  1671   0049A8                     
  1672                           ;MazeRobot.X/color.c: 121:             _delay((unsigned long)((500)*(64000000/4000.0)));
  1673   0049A8  0E29               	movlw	41
  1674   0049AA  6E15               	movwf	(??_whiteCal+1)^0,c
  1675   0049AC  0E96               	movlw	150
  1676   0049AE  6E14               	movwf	??_whiteCal^0,c
  1677   0049B0  0E7F               	movlw	127
  1678   0049B2                     u6747:
  1679   0049B2  2EE8               	decfsz	wreg,f,c
  1680   0049B4  D7FE               	bra	u6747
  1681   0049B6  2E14               	decfsz	??_whiteCal^0,f,c
  1682   0049B8  D7FC               	bra	u6747
  1683   0049BA  2E15               	decfsz	(??_whiteCal+1)^0,f,c
  1684   0049BC  D7FA               	bra	u6747
  1685   0049BE  F000               	nop	
  1686   0049C0                     
  1687                           ;MazeRobot.X/color.c: 122:             getColor(v);
  1688   0049C0  C012  F010         	movff	whiteCal@v,getColor@v
  1689   0049C4  C013  F011         	movff	whiteCal@v+1,getColor@v+1
  1690   0049C8  ECCF  F028         	call	_getColor	;wreg free
  1691   0049CC                     
  1692                           ;MazeRobot.X/color.c: 123:             _delay((unsigned long)((500)*(64000000/4000.0)));
  1693   0049CC  0E29               	movlw	41
  1694   0049CE  6E15               	movwf	(??_whiteCal+1)^0,c
  1695   0049D0  0E96               	movlw	150
  1696   0049D2  6E14               	movwf	??_whiteCal^0,c
  1697   0049D4  0E7F               	movlw	127
  1698   0049D6                     u6757:
  1699   0049D6  2EE8               	decfsz	wreg,f,c
  1700   0049D8  D7FE               	bra	u6757
  1701   0049DA  2E14               	decfsz	??_whiteCal^0,f,c
  1702   0049DC  D7FC               	bra	u6757
  1703   0049DE  2E15               	decfsz	(??_whiteCal+1)^0,f,c
  1704   0049E0  D7FA               	bra	u6757
  1705   0049E2  F000               	nop	
  1706   0049E4                     
  1707                           ;MazeRobot.X/color.c: 124:             LATDbits.LATD7 = !LATDbits.LATD7;
  1708   0049E4  AE7C               	btfss	124,7,c	;volatile
  1709   0049E6  EFF7  F024         	goto	u5331
  1710   0049EA  EFFB  F024         	goto	u5330
  1711   0049EE                     u5331:
  1712   0049EE  6A14               	clrf	??_whiteCal^0,c
  1713   0049F0  2A14               	incf	??_whiteCal^0,f,c
  1714   0049F2  EFFC  F024         	goto	u5348
  1715   0049F6                     u5330:
  1716   0049F6  6A14               	clrf	??_whiteCal^0,c
  1717   0049F8                     u5348:
  1718   0049F8  3214               	rrcf	??_whiteCal^0,f,c
  1719   0049FA  3214               	rrcf	??_whiteCal^0,f,c
  1720   0049FC  507C               	movf	124,w,c	;volatile
  1721   0049FE  1814               	xorwf	??_whiteCal^0,w,c
  1722   004A00  0B7F               	andlw	-129
  1723   004A02  1814               	xorwf	??_whiteCal^0,w,c
  1724   004A04  6E7C               	movwf	124,c	;volatile
  1725   004A06  0012               	return		;funcret
  1726   004A08                     __end_of_whiteCal:
  1727                           	callstack 0
  1728                           
  1729 ;; *************** function _sprintf *****************
  1730 ;; Defined at:
  1731 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_sprintf.c"
  1732 ;; Parameters:    Size  Location     Type
  1733 ;;  s               2   92[BANK0 ] PTR unsigned char 
  1734 ;;		 -> main@string4(20), 
  1735 ;;  fmt             2   94[BANK0 ] PTR const unsigned char 
  1736 ;;		 -> STR_1(18), 
  1737 ;; Auto vars:     Size  Location     Type
  1738 ;;  f              11  106[BANK0 ] struct _IO_FILE
  1739 ;;  ap              2  104[BANK0 ] PTR void [1]
  1740 ;;		 -> ?_sprintf(2), 
  1741 ;;  ret             2    0        int 
  1742 ;; Return value:  Size  Location     Type
  1743 ;;                  2   92[BANK0 ] int 
  1744 ;; Registers used:
  1745 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1746 ;; Tracked objects:
  1747 ;;		On entry : 0/0
  1748 ;;		On exit  : 0/0
  1749 ;;		Unchanged: 0/0
  1750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1751 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1752 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1754 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1755 ;;Total ram usage:       25 bytes
  1756 ;; Hardware stack levels used: 1
  1757 ;; Hardware stack levels required when called: 9
  1758 ;; This function calls:
  1759 ;;		_vfprintf
  1760 ;; This function is called by:
  1761 ;;		_main
  1762 ;; This function uses a non-reentrant model
  1763 ;;
  1764                           
  1765                           	psect	text2
  1766   005252                     __ptext2:
  1767                           	callstack 0
  1768   005252                     _sprintf:
  1769                           	callstack 21
  1770   005252  0EC0               	movlw	low (?_sprintf+4)
  1771   005254  0100               	movlb	0	; () banked
  1772   005256  6FC8               	movwf	sprintf@ap& (0+255),b
  1773   005258  0E00               	movlw	high (?_sprintf+4)
  1774   00525A  6FC9               	movwf	(sprintf@ap+1)& (0+255),b
  1775   00525C  C0BC  F0CA         	movff	sprintf@s,sprintf@f
  1776   005260  C0BD  F0CB         	movff	sprintf@s+1,sprintf@f+1
  1777   005264                     
  1778                           ; BSR set to: 0
  1779   005264  0E00               	movlw	0
  1780   005266  6FCE               	movwf	(sprintf@f+4)& (0+255),b
  1781   005268  0E00               	movlw	0
  1782   00526A  6FCD               	movwf	(sprintf@f+3)& (0+255),b
  1783   00526C                     
  1784                           ; BSR set to: 0
  1785   00526C  0E00               	movlw	0
  1786   00526E  6FD4               	movwf	(sprintf@f+10)& (0+255),b
  1787   005270  0E00               	movlw	0
  1788   005272  6FD3               	movwf	(sprintf@f+9)& (0+255),b
  1789   005274                     
  1790                           ; BSR set to: 0
  1791   005274  0ECA               	movlw	low sprintf@f
  1792   005276  6FB4               	movwf	vfprintf@fp& (0+255),b
  1793   005278  0E00               	movlw	high sprintf@f
  1794   00527A  6FB5               	movwf	(vfprintf@fp+1)& (0+255),b
  1795   00527C  C0BE  F0B6         	movff	sprintf@fmt,vfprintf@fmt
  1796   005280  C0BF  F0B7         	movff	sprintf@fmt+1,vfprintf@fmt+1
  1797   005284  0EC8               	movlw	low sprintf@ap
  1798   005286  6FB8               	movwf	vfprintf@ap& (0+255),b
  1799   005288  0E00               	movlw	high sprintf@ap
  1800   00528A  6FB9               	movwf	(vfprintf@ap+1)& (0+255),b
  1801   00528C  ECFE  F028         	call	_vfprintf	;wreg free
  1802   005290  0100               	movlb	0	; () banked
  1803   005292  51CD               	movf	(sprintf@f+3)& (0+255),w,b
  1804   005294  25BC               	addwf	sprintf@s& (0+255),w,b
  1805   005296  6ED9               	movwf	fsr2l,c
  1806   005298  51CE               	movf	(sprintf@f+4)& (0+255),w,b
  1807   00529A  21BD               	addwfc	(sprintf@s+1)& (0+255),w,b
  1808   00529C  6EDA               	movwf	fsr2h,c
  1809   00529E  0E00               	movlw	0
  1810   0052A0  6EDF               	movwf	indf2,c
  1811   0052A2                     
  1812                           ; BSR set to: 0
  1813   0052A2  0012               	return		;funcret
  1814   0052A4                     __end_of_sprintf:
  1815                           	callstack 0
  1816                           
  1817 ;; *************** function _vfprintf *****************
  1818 ;; Defined at:
  1819 ;;		line 1520 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  1820 ;; Parameters:    Size  Location     Type
  1821 ;;  fp              2   84[BANK0 ] PTR struct _IO_FILE
  1822 ;;		 -> sprintf@f(11), 
  1823 ;;  fmt             2   86[BANK0 ] PTR const unsigned char 
  1824 ;;		 -> STR_1(18), 
  1825 ;;  ap              2   88[BANK0 ] PTR PTR void 
  1826 ;;		 -> sprintf@ap(2), 
  1827 ;; Auto vars:     Size  Location     Type
  1828 ;;  cfmt            2   90[BANK0 ] PTR unsigned char 
  1829 ;;		 -> STR_1(18), 
  1830 ;; Return value:  Size  Location     Type
  1831 ;;                  2   84[BANK0 ] int 
  1832 ;; Registers used:
  1833 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1834 ;; Tracked objects:
  1835 ;;		On entry : 0/0
  1836 ;;		On exit  : 0/0
  1837 ;;		Unchanged: 0/0
  1838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1839 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1840 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1842 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1843 ;;Total ram usage:        8 bytes
  1844 ;; Hardware stack levels used: 1
  1845 ;; Hardware stack levels required when called: 8
  1846 ;; This function calls:
  1847 ;;		_vfpfcnvrt
  1848 ;; This function is called by:
  1849 ;;		_sprintf
  1850 ;; This function uses a non-reentrant model
  1851 ;;
  1852                           
  1853                           	psect	text3
  1854   0051FC                     __ptext3:
  1855                           	callstack 0
  1856   0051FC                     _vfprintf:
  1857                           	callstack 21
  1858   0051FC                     
  1859                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1520: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\source
      +                          s\c99\common\doprnt.c: 1521: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\comm
      +                          on\doprnt.c: 1523:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\
      +                          common\doprnt.c: 1525:     cfmt = (char *)fmt;
  1860   0051FC  C0B6  F0BA         	movff	vfprintf@fmt,vfprintf@cfmt
  1861   005200  C0B7  F0BB         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  1862                           
  1863                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  1864   005204  EF13  F029         	goto	l5849
  1865   005208                     l5847:
  1866                           
  1867                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1533:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  1868   005208  C0B4  F0A3         	movff	vfprintf@fp,vfpfcnvrt@fp
  1869   00520C  C0B5  F0A4         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  1870   005210  0EBA               	movlw	low vfprintf@cfmt
  1871   005212  0100               	movlb	0	; () banked
  1872   005214  6FA5               	movwf	vfpfcnvrt@fmt& (0+255),b
  1873   005216  0E00               	movlw	high vfprintf@cfmt
  1874   005218  6FA6               	movwf	(vfpfcnvrt@fmt+1)& (0+255),b
  1875   00521A  C0B8  F0A7         	movff	vfprintf@ap,vfpfcnvrt@ap
  1876   00521E  C0B9  F0A8         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  1877   005222  ECFE  F017         	call	_vfpfcnvrt	;wreg free
  1878   005226                     l5849:
  1879                           
  1880                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  1881   005226  C0BA  FFF6         	movff	vfprintf@cfmt,tblptrl
  1882   00522A  C0BB  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  1883   00522E                     	if	0	;tblptru may be non-zero
  1884   00522E                     	endif
  1885   00522E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1886   00522E  0E00               	movlw	low (__mediumconst shr (0+16))
  1887   005230  6EF8               	movwf	tblptru,c
  1888   005232                     	endif
  1889   005232  0008               	tblrd		*
  1890   005234  50F5               	movf	tablat,w,c
  1891   005236  0900               	iorlw	0
  1892   005238  A4D8               	btfss	status,2,c
  1893   00523A  EF21  F029         	goto	u6321
  1894   00523E  EF23  F029         	goto	u6320
  1895   005242                     u6321:
  1896   005242  EF04  F029         	goto	l5847
  1897   005246                     u6320:
  1898   005246                     
  1899                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1538:  return 0;
  1900   005246  0E00               	movlw	0
  1901   005248  0100               	movlb	0	; () banked
  1902   00524A  6FB5               	movwf	(?_vfprintf+1)& (0+255),b
  1903   00524C  0E00               	movlw	0
  1904   00524E  6FB4               	movwf	?_vfprintf& (0+255),b
  1905   005250                     
  1906                           ; BSR set to: 0
  1907   005250  0012               	return		;funcret
  1908   005252                     __end_of_vfprintf:
  1909                           	callstack 0
  1910                           
  1911 ;; *************** function _vfpfcnvrt *****************
  1912 ;; Defined at:
  1913 ;;		line 1007 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  1914 ;; Parameters:    Size  Location     Type
  1915 ;;  fp              2   67[BANK0 ] PTR struct _IO_FILE
  1916 ;;		 -> sprintf@f(11), 
  1917 ;;  fmt             2   69[BANK0 ] PTR PTR unsigned char 
  1918 ;;		 -> vfprintf@cfmt(2), 
  1919 ;;  ap              2   71[BANK0 ] PTR PTR void 
  1920 ;;		 -> sprintf@ap(2), 
  1921 ;; Auto vars:     Size  Location     Type
  1922 ;;  convarg         8   73[BANK0 ] struct .
  1923 ;;  cp              2   82[BANK0 ] PTR unsigned char 
  1924 ;;		 -> STR_1(18), 
  1925 ;;  i               2    0        int 
  1926 ;;  done            2    0        int 
  1927 ;;  c               1   81[BANK0 ] unsigned char 
  1928 ;; Return value:  Size  Location     Type
  1929 ;;                  1    wreg      void 
  1930 ;; Registers used:
  1931 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1932 ;; Tracked objects:
  1933 ;;		On entry : 0/0
  1934 ;;		On exit  : 0/0
  1935 ;;		Unchanged: 0/0
  1936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1937 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1938 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1939 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1940 ;;      Totals:         2      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1941 ;;Total ram usage:       19 bytes
  1942 ;; Hardware stack levels used: 1
  1943 ;; Hardware stack levels required when called: 7
  1944 ;; This function calls:
  1945 ;;		_dtoa
  1946 ;;		_efgtoa
  1947 ;;		_fputc
  1948 ;; This function is called by:
  1949 ;;		_vfprintf
  1950 ;; This function uses a non-reentrant model
  1951 ;;
  1952                           
  1953                           	psect	text4
  1954   002FFC                     __ptext4:
  1955                           	callstack 0
  1956   002FFC                     _vfpfcnvrt:
  1957                           	callstack 21
  1958   002FFC                     
  1959                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1007: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1008: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\dopr
      +                          nt.c: 1009:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 1010:     int done, i;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1016:  } convarg;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1019:     if ((*fmt)[0] == '%') {
  1960   002FFC  C0A5  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1961   003000  C0A6  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1962   003004  CFDE FFF6          	movff	postinc2,tblptrl
  1963   003008  CFDD FFF7          	movff	postdec2,tblptrh
  1964   00300C                     	if	0	;tblptru may be non-zero
  1965   00300C                     	endif
  1966   00300C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1967   00300C  0E00               	movlw	low (__mediumconst shr (0+16))
  1968   00300E  6EF8               	movwf	tblptru,c
  1969   003010                     	endif
  1970   003010  0008               	tblrd		*
  1971   003012  50F5               	movf	tablat,w,c
  1972   003014  0A25               	xorlw	37
  1973   003016  A4D8               	btfss	status,2,c
  1974   003018  EF10  F018         	goto	u6281
  1975   00301C  EF12  F018         	goto	u6280
  1976   003020                     u6281:
  1977   003020  EF6A  F019         	goto	l5821
  1978   003024                     u6280:
  1979   003024                     
  1980                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1020:         ++*
      +                          fmt;
  1981   003024  C0A5  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1982   003028  C0A6  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1983   00302C  2ADE               	incf	postinc2,f,c
  1984   00302E  0E00               	movlw	0
  1985   003030  22DD               	addwfc	postdec2,f,c
  1986   003032                     
  1987                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1022:         fla
      +                          gs = width = 0;
  1988   003032  0E00               	movlw	0
  1989   003034  0100               	movlb	0	; () banked
  1990   003036  6FF4               	movwf	(_width+1)& (0+255),b
  1991   003038  0E00               	movlw	0
  1992   00303A  6FF3               	movwf	_width& (0+255),b
  1993   00303C  C0F3  F0FB         	movff	_width,_flags
  1994   003040                     
  1995                           ; BSR set to: 0
  1996                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1023:         pre
      +                          c = -1;
  1997   003040  69F5               	setf	_prec& (0+255),b
  1998   003042  69F6               	setf	(_prec+1)& (0+255),b
  1999   003044                     
  2000                           ; BSR set to: 0
  2001                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1117:   cp = *fmt
      +                          ;
  2002   003044  C0A5  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2003   003048  C0A6  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2004   00304C  CFDE F0B2          	movff	postinc2,vfpfcnvrt@cp
  2005   003050  CFDD F0B3          	movff	postdec2,vfpfcnvrt@cp+1
  2006   003054                     
  2007                           ; BSR set to: 0
  2008                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1187:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  2009   003054  C0B2  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2010   003058  C0B3  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  2011   00305C                     	if	0	;tblptru may be non-zero
  2012   00305C                     	endif
  2013   00305C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2014   00305C  0E00               	movlw	low (__mediumconst shr (0+16))
  2015   00305E  6EF8               	movwf	tblptru,c
  2016   003060                     	endif
  2017   003060  0008               	tblrd		*
  2018   003062  50F5               	movf	tablat,w,c
  2019   003064  0A64               	xorlw	100
  2020   003066  B4D8               	btfsc	status,2,c
  2021   003068  EF38  F018         	goto	u6291
  2022   00306C  EF3A  F018         	goto	u6290
  2023   003070                     u6291:
  2024   003070  EF4A  F018         	goto	l5777
  2025   003074                     u6290:
  2026   003074                     
  2027                           ; BSR set to: 0
  2028   003074  C0B2  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2029   003078  C0B3  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  2030   00307C                     	if	0	;tblptru may be non-zero
  2031   00307C                     	endif
  2032   00307C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2033   00307C  0E00               	movlw	low (__mediumconst shr (0+16))
  2034   00307E  6EF8               	movwf	tblptru,c
  2035   003080                     	endif
  2036   003080  0008               	tblrd		*
  2037   003082  50F5               	movf	tablat,w,c
  2038   003084  0A69               	xorlw	105
  2039   003086  A4D8               	btfss	status,2,c
  2040   003088  EF48  F018         	goto	u6301
  2041   00308C  EF4A  F018         	goto	u6300
  2042   003090                     u6301:
  2043   003090  EF8D  F018         	goto	l5783
  2044   003094                     u6300:
  2045   003094                     l5777:
  2046                           
  2047                           ; BSR set to: 0
  2048                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1230:    convarg.
      +                          ll = (long long)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  2049   003094  C0A7  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2050   003098  C0A8  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2051   00309C  CFDF F055          	movff	indf2,??_vfpfcnvrt
  2052   0030A0  0E02               	movlw	2
  2053   0030A2  26DE               	addwf	postinc2,f,c
  2054   0030A4  CFDF F056          	movff	indf2,??_vfpfcnvrt+1
  2055   0030A8  0E00               	movlw	0
  2056   0030AA  22DD               	addwfc	postdec2,f,c
  2057   0030AC  C055  FFD9         	movff	??_vfpfcnvrt,fsr2l
  2058   0030B0  C056  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2059   0030B4  CFDE F0A9          	movff	postinc2,vfpfcnvrt@convarg
  2060   0030B8  CFDD F0AA          	movff	postdec2,vfpfcnvrt@convarg+1
  2061   0030BC  0E00               	movlw	0
  2062   0030BE  BFAA               	btfsc	(vfpfcnvrt@convarg+1)& (0+255),7,b
  2063   0030C0  0EFF               	movlw	-1
  2064   0030C2  6FAB               	movwf	(vfpfcnvrt@convarg+2)& (0+255),b
  2065   0030C4  6FAC               	movwf	(vfpfcnvrt@convarg+3)& (0+255),b
  2066   0030C6  6FAD               	movwf	(vfpfcnvrt@convarg+4)& (0+255),b
  2067   0030C8  6FAE               	movwf	(vfpfcnvrt@convarg+5)& (0+255),b
  2068   0030CA  6FAF               	movwf	(vfpfcnvrt@convarg+6)& (0+255),b
  2069   0030CC  6FB0               	movwf	(vfpfcnvrt@convarg+7)& (0+255),b
  2070                           
  2071                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1232:    *fmt = c
      +                          p+1;
  2072   0030CE  0E01               	movlw	1
  2073   0030D0  25B2               	addwf	vfpfcnvrt@cp& (0+255),w,b
  2074   0030D2  6E55               	movwf	??_vfpfcnvrt^0,c
  2075   0030D4  0E00               	movlw	0
  2076   0030D6  21B3               	addwfc	(vfpfcnvrt@cp+1)& (0+255),w,b
  2077   0030D8  6E56               	movwf	(??_vfpfcnvrt+1)^0,c
  2078   0030DA  C0A5  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2079   0030DE  C0A6  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2080   0030E2  C055  FFDE         	movff	??_vfpfcnvrt,postinc2
  2081   0030E6  C056  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  2082   0030EA                     
  2083                           ; BSR set to: 0
  2084                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1233:    return (
      +                          void) dtoa(fp, convarg.ll);;	Return value of _vfpfcnvrt is never used
  2085   0030EA  C0A3  F020         	movff	vfpfcnvrt@fp,dtoa@fp
  2086   0030EE  C0A4  F021         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  2087   0030F2  C0A9  F022         	movff	vfpfcnvrt@convarg,dtoa@d
  2088   0030F6  C0AA  F023         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  2089   0030FA  C0AB  F024         	movff	vfpfcnvrt@convarg+2,dtoa@d+2
  2090   0030FE  C0AC  F025         	movff	vfpfcnvrt@convarg+3,dtoa@d+3
  2091   003102  C0AD  F026         	movff	vfpfcnvrt@convarg+4,dtoa@d+4
  2092   003106  C0AE  F027         	movff	vfpfcnvrt@convarg+5,dtoa@d+5
  2093   00310A  C0AF  F028         	movff	vfpfcnvrt@convarg+6,dtoa@d+6
  2094   00310E  C0B0  F029         	movff	vfpfcnvrt@convarg+7,dtoa@d+7
  2095   003112  EC81  F019         	call	_dtoa	;wreg free
  2096   003116  EF80  F019         	goto	l1290
  2097   00311A                     l5783:
  2098                           
  2099                           ; BSR set to: 0
  2100                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1392:   cp = *fmt
      +                          ;
  2101   00311A  C0A5  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2102   00311E  C0A6  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2103   003122  CFDE F0B2          	movff	postinc2,vfpfcnvrt@cp
  2104   003126  CFDD F0B3          	movff	postdec2,vfpfcnvrt@cp+1
  2105   00312A                     
  2106                           ; BSR set to: 0
  2107                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1393:   c = *cp;
  2108   00312A  C0B2  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2109   00312E  C0B3  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  2110   003132                     	if	0	;tblptru may be non-zero
  2111   003132                     	endif
  2112   003132                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2113   003132  0E00               	movlw	low (__mediumconst shr (0+16))
  2114   003134  6EF8               	movwf	tblptru,c
  2115   003136                     	endif
  2116   003136  0008               	tblrd		*
  2117   003138  CFF5 F0B1          	movff	tablat,vfpfcnvrt@c
  2118                           
  2119                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1394:   switch(c)
      +                           {
  2120   00313C  EFAC  F018         	goto	l5795
  2121   003140                     l5787:
  2122                           
  2123                           ; BSR set to: 0
  2124                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1398:     cp++;
  2125   003140  4BB2               	infsnz	vfpfcnvrt@cp& (0+255),f,b
  2126   003142  2BB3               	incf	(vfpfcnvrt@cp+1)& (0+255),f,b
  2127                           
  2128                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1399:     break;
  2129   003144  EFC5  F018         	goto	l5797
  2130   003148                     l5789:
  2131                           
  2132                           ; BSR set to: 0
  2133                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1424:     c = 'l'
      +                          ;
  2134   003148  0E6C               	movlw	108
  2135   00314A  6FB1               	movwf	vfpfcnvrt@c& (0+255),b
  2136                           
  2137                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1425:     break;
  2138   00314C  EFC5  F018         	goto	l5797
  2139   003150                     l5791:
  2140                           
  2141                           ; BSR set to: 0
  2142                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1427:     c = 0;
  2143   003150  0E00               	movlw	0
  2144   003152  6FB1               	movwf	vfpfcnvrt@c& (0+255),b
  2145                           
  2146                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1428:     break;
  2147   003154  EFC5  F018         	goto	l5797
  2148   003158                     l5795:
  2149                           
  2150                           ; BSR set to: 0
  2151   003158  51B1               	movf	vfpfcnvrt@c& (0+255),w,b
  2152   00315A  6E55               	movwf	??_vfpfcnvrt^0,c
  2153   00315C  6A56               	clrf	(??_vfpfcnvrt+1)^0,c
  2154                           
  2155                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2156                           ; Switch size 1, requested type "simple"
  2157                           ; Number of cases is 1, Range of values is 0 to 0
  2158                           ; switch strategies available:
  2159                           ; Name         Instructions Cycles
  2160                           ; simple_byte            4     3 (average)
  2161                           ;	Chosen strategy is simple_byte
  2162   00315E  5056               	movf	(??_vfpfcnvrt+1)^0,w,c
  2163   003160  0A00               	xorlw	0	; case 0
  2164   003162  B4D8               	btfsc	status,2,c
  2165   003164  EFB6  F018         	goto	l6195
  2166   003168  EFA8  F018         	goto	l5791
  2167   00316C                     l6195:
  2168                           
  2169                           ; BSR set to: 0
  2170                           ; Switch size 1, requested type "simple"
  2171                           ; Number of cases is 3, Range of values is 76 to 108
  2172                           ; switch strategies available:
  2173                           ; Name         Instructions Cycles
  2174                           ; simple_byte           10     6 (average)
  2175                           ;	Chosen strategy is simple_byte
  2176   00316C  5055               	movf	??_vfpfcnvrt^0,w,c
  2177   00316E  0A4C               	xorlw	76	; case 76
  2178   003170  B4D8               	btfsc	status,2,c
  2179   003172  EFA0  F018         	goto	l5787
  2180   003176  0A2A               	xorlw	42	; case 102
  2181   003178  B4D8               	btfsc	status,2,c
  2182   00317A  EFA4  F018         	goto	l5789
  2183   00317E  0A0A               	xorlw	10	; case 108
  2184   003180  B4D8               	btfsc	status,2,c
  2185   003182  EFA0  F018         	goto	l5787
  2186   003186  EFA8  F018         	goto	l5791
  2187   00318A                     l5797:
  2188                           
  2189                           ; BSR set to: 0
  2190   00318A  C0B2  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2191   00318E  C0B3  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  2192   003192                     	if	0	;tblptru may be non-zero
  2193   003192                     	endif
  2194   003192                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2195   003192  0E00               	movlw	low (__mediumconst shr (0+16))
  2196   003194  6EF8               	movwf	tblptru,c
  2197   003196                     	endif
  2198   003196  0008               	tblrd		*
  2199   003198  50F5               	movf	tablat,w,c
  2200   00319A  0A66               	xorlw	102
  2201   00319C  A4D8               	btfss	status,2,c
  2202   00319E  EFD3  F018         	goto	u6311
  2203   0031A2  EFD5  F018         	goto	u6310
  2204   0031A6                     u6311:
  2205   0031A6  EF61  F019         	goto	l5817
  2206   0031AA                     u6310:
  2207   0031AA  EF0B  F019         	goto	l5805
  2208   0031AE                     l5799:
  2209                           
  2210                           ; BSR set to: 0
  2211                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1459:      convar
      +                          g.f = (long double)(*(double *)__va_arg(*(double **)ap, (double)0));
  2212   0031AE  C0A7  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2213   0031B2  C0A8  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2214   0031B6  CFDF F055          	movff	indf2,??_vfpfcnvrt
  2215   0031BA  0E04               	movlw	4
  2216   0031BC  26DE               	addwf	postinc2,f,c
  2217   0031BE  CFDF F056          	movff	indf2,??_vfpfcnvrt+1
  2218   0031C2  0E00               	movlw	0
  2219   0031C4  22DD               	addwfc	postdec2,f,c
  2220   0031C6  C055  FFD9         	movff	??_vfpfcnvrt,fsr2l
  2221   0031CA  C056  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2222   0031CE  CFDE F0A9          	movff	postinc2,vfpfcnvrt@convarg
  2223   0031D2  CFDE F0AA          	movff	postinc2,vfpfcnvrt@convarg+1
  2224   0031D6  CFDE F0AB          	movff	postinc2,vfpfcnvrt@convarg+2
  2225   0031DA  CFDE F0AC          	movff	postinc2,vfpfcnvrt@convarg+3
  2226                           
  2227                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1460:      break;
  2228   0031DE  EF20  F019         	goto	l5807
  2229   0031E2                     l5801:
  2230                           
  2231                           ; BSR set to: 0
  2232                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1462:      convar
      +                          g.f = (long double)(*(long double *)__va_arg(*(long double **)ap, (long double)0));
  2233   0031E2  C0A7  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2234   0031E6  C0A8  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2235   0031EA  CFDF F055          	movff	indf2,??_vfpfcnvrt
  2236   0031EE  0E04               	movlw	4
  2237   0031F0  26DE               	addwf	postinc2,f,c
  2238   0031F2  CFDF F056          	movff	indf2,??_vfpfcnvrt+1
  2239   0031F6  0E00               	movlw	0
  2240   0031F8  22DD               	addwfc	postdec2,f,c
  2241   0031FA  C055  FFD9         	movff	??_vfpfcnvrt,fsr2l
  2242   0031FE  C056  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2243   003202  CFDE F0A9          	movff	postinc2,vfpfcnvrt@convarg
  2244   003206  CFDE F0AA          	movff	postinc2,vfpfcnvrt@convarg+1
  2245   00320A  CFDE F0AB          	movff	postinc2,vfpfcnvrt@convarg+2
  2246   00320E  CFDE F0AC          	movff	postinc2,vfpfcnvrt@convarg+3
  2247                           
  2248                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1463:      break;
  2249   003212  EF20  F019         	goto	l5807
  2250   003216                     l5805:
  2251                           
  2252                           ; BSR set to: 0
  2253   003216  51B1               	movf	vfpfcnvrt@c& (0+255),w,b
  2254   003218  6E55               	movwf	??_vfpfcnvrt^0,c
  2255   00321A  6A56               	clrf	(??_vfpfcnvrt+1)^0,c
  2256                           
  2257                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2258                           ; Switch size 1, requested type "simple"
  2259                           ; Number of cases is 1, Range of values is 0 to 0
  2260                           ; switch strategies available:
  2261                           ; Name         Instructions Cycles
  2262                           ; simple_byte            4     3 (average)
  2263                           ;	Chosen strategy is simple_byte
  2264   00321C  5056               	movf	(??_vfpfcnvrt+1)^0,w,c
  2265   00321E  0A00               	xorlw	0	; case 0
  2266   003220  B4D8               	btfsc	status,2,c
  2267   003222  EF15  F019         	goto	l6197
  2268   003226  EF20  F019         	goto	l5807
  2269   00322A                     l6197:
  2270                           
  2271                           ; BSR set to: 0
  2272                           ; Switch size 1, requested type "simple"
  2273                           ; Number of cases is 2, Range of values is 76 to 108
  2274                           ; switch strategies available:
  2275                           ; Name         Instructions Cycles
  2276                           ; simple_byte            7     4 (average)
  2277                           ;	Chosen strategy is simple_byte
  2278   00322A  5055               	movf	??_vfpfcnvrt^0,w,c
  2279   00322C  0A4C               	xorlw	76	; case 76
  2280   00322E  B4D8               	btfsc	status,2,c
  2281   003230  EFF1  F018         	goto	l5801
  2282   003234  0A20               	xorlw	32	; case 108
  2283   003236  B4D8               	btfsc	status,2,c
  2284   003238  EFD7  F018         	goto	l5799
  2285   00323C  EF20  F019         	goto	l5807
  2286   003240                     l5807:
  2287                           
  2288                           ; BSR set to: 0
  2289                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1465:    *fmt = c
      +                          p+1;
  2290   003240  0E01               	movlw	1
  2291   003242  25B2               	addwf	vfpfcnvrt@cp& (0+255),w,b
  2292   003244  6E55               	movwf	??_vfpfcnvrt^0,c
  2293   003246  0E00               	movlw	0
  2294   003248  21B3               	addwfc	(vfpfcnvrt@cp+1)& (0+255),w,b
  2295   00324A  6E56               	movwf	(??_vfpfcnvrt+1)^0,c
  2296   00324C  C0A5  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2297   003250  C0A6  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2298   003254  C055  FFDE         	movff	??_vfpfcnvrt,postinc2
  2299   003258  C056  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  2300                           
  2301                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1466:    switch (
      +                          *cp) {
  2302   00325C  EF49  F019         	goto	l5815
  2303   003260                     l5809:
  2304                           
  2305                           ; BSR set to: 0
  2306                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1493:      return
      +                           (void) efgtoa(fp, convarg.f, *cp);;	Return value of _vfpfcnvrt is never used
  2307   003260  C0A3  F070         	movff	vfpfcnvrt@fp,efgtoa@fp
  2308   003264  C0A4  F071         	movff	vfpfcnvrt@fp+1,efgtoa@fp+1
  2309   003268  C0A9  F072         	movff	vfpfcnvrt@convarg,efgtoa@f
  2310   00326C  C0AA  F073         	movff	vfpfcnvrt@convarg+1,efgtoa@f+1
  2311   003270  C0AB  F074         	movff	vfpfcnvrt@convarg+2,efgtoa@f+2
  2312   003274  C0AC  F075         	movff	vfpfcnvrt@convarg+3,efgtoa@f+3
  2313   003278  C0B2  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2314   00327C  C0B3  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  2315   003280                     	if	0	;tblptru may be non-zero
  2316   003280                     	endif
  2317   003280                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2318   003280  0E00               	movlw	low (__mediumconst shr (0+16))
  2319   003282  6EF8               	movwf	tblptru,c
  2320   003284                     	endif
  2321   003284  0008               	tblrd		*
  2322   003286  CFF5 F076          	movff	tablat,efgtoa@c
  2323   00328A  ECBF  F00C         	call	_efgtoa	;wreg free
  2324   00328E  EF80  F019         	goto	l1290
  2325   003292                     l5815:
  2326                           
  2327                           ; BSR set to: 0
  2328   003292  C0B2  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2329   003296  C0B3  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  2330   00329A                     	if	0	;tblptru may be non-zero
  2331   00329A                     	endif
  2332   00329A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2333   00329A  0E00               	movlw	low (__mediumconst shr (0+16))
  2334   00329C  6EF8               	movwf	tblptru,c
  2335   00329E                     	endif
  2336   00329E  0008               	tblrd		*
  2337   0032A0  50F5               	movf	tablat,w,c
  2338   0032A2  6E55               	movwf	??_vfpfcnvrt^0,c
  2339   0032A4  6A56               	clrf	(??_vfpfcnvrt+1)^0,c
  2340                           
  2341                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2342                           ; Switch size 1, requested type "simple"
  2343                           ; Number of cases is 1, Range of values is 0 to 0
  2344                           ; switch strategies available:
  2345                           ; Name         Instructions Cycles
  2346                           ; simple_byte            4     3 (average)
  2347                           ;	Chosen strategy is simple_byte
  2348   0032A6  5056               	movf	(??_vfpfcnvrt+1)^0,w,c
  2349   0032A8  0A00               	xorlw	0	; case 0
  2350   0032AA  B4D8               	btfsc	status,2,c
  2351   0032AC  EF5A  F019         	goto	l6199
  2352   0032B0  EF61  F019         	goto	l5817
  2353   0032B4                     l6199:
  2354                           
  2355                           ; BSR set to: 0
  2356                           ; Switch size 1, requested type "simple"
  2357                           ; Number of cases is 1, Range of values is 102 to 102
  2358                           ; switch strategies available:
  2359                           ; Name         Instructions Cycles
  2360                           ; simple_byte            4     3 (average)
  2361                           ;	Chosen strategy is simple_byte
  2362   0032B4  5055               	movf	??_vfpfcnvrt^0,w,c
  2363   0032B6  0A66               	xorlw	102	; case 102
  2364   0032B8  B4D8               	btfsc	status,2,c
  2365   0032BA  EF30  F019         	goto	l5809
  2366   0032BE  EF61  F019         	goto	l5817
  2367   0032C2                     l5817:
  2368                           
  2369                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1509:         ++*
      +                          fmt;
  2370   0032C2  C0A5  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2371   0032C6  C0A6  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2372   0032CA  2ADE               	incf	postinc2,f,c
  2373   0032CC  0E00               	movlw	0
  2374   0032CE  22DD               	addwfc	postdec2,f,c
  2375   0032D0  EF80  F019         	goto	l1290
  2376   0032D4                     l5821:
  2377                           
  2378                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1514:     fputc((
      +                          int)(*fmt)[0], fp);
  2379   0032D4  C0A5  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2380   0032D8  C0A6  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2381   0032DC  CFDE FFF6          	movff	postinc2,tblptrl
  2382   0032E0  CFDD FFF7          	movff	postdec2,tblptrh
  2383   0032E4                     	if	0	;tblptru may be non-zero
  2384   0032E4                     	endif
  2385   0032E4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2386   0032E4  0E00               	movlw	low (__mediumconst shr (0+16))
  2387   0032E6  6EF8               	movwf	tblptru,c
  2388   0032E8                     	endif
  2389   0032E8  0008               	tblrd		*
  2390   0032EA  50F5               	movf	tablat,w,c
  2391   0032EC  6E05               	movwf	fputc@c^0,c
  2392   0032EE  6A06               	clrf	(fputc@c+1)^0,c
  2393   0032F0  C0A3  F007         	movff	vfpfcnvrt@fp,fputc@fp
  2394   0032F4  C0A4  F008         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2395   0032F8  EC4A  F026         	call	_fputc	;wreg free
  2396   0032FC  EF61  F019         	goto	l5817
  2397   003300                     l1290:
  2398   003300  0012               	return		;funcret
  2399   003302                     __end_of_vfpfcnvrt:
  2400                           	callstack 0
  2401                           
  2402 ;; *************** function _efgtoa *****************
  2403 ;; Defined at:
  2404 ;;		line 506 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2405 ;; Parameters:    Size  Location     Type
  2406 ;;  fp              2   16[BANK0 ] PTR struct _IO_FILE
  2407 ;;		 -> sprintf@f(11), 
  2408 ;;  f               4   18[BANK0 ] PTR struct _IO_FILE
  2409 ;;  c               1   22[BANK0 ] unsigned char 
  2410 ;; Auto vars:     Size  Location     Type
  2411 ;;  u               4   63[BANK0 ] struct flui
  2412 ;;  g               4   57[BANK0 ] struct flui
  2413 ;;  l               4   52[BANK0 ] struct flui
  2414 ;;  h               4   48[BANK0 ] struct flui
  2415 ;;  ou              4   42[BANK0 ] struct flui
  2416 ;;  n               2   61[BANK0 ] int 
  2417 ;;  i               2   46[BANK0 ] int 
  2418 ;;  w               2   40[BANK0 ] int 
  2419 ;;  e               2   38[BANK0 ] int 
  2420 ;;  m               2   36[BANK0 ] int 
  2421 ;;  d               2   34[BANK0 ] int 
  2422 ;;  t               2   27[BANK0 ] int 
  2423 ;;  p               2   25[BANK0 ] int 
  2424 ;;  ne              2   23[BANK0 ] int 
  2425 ;;  sign            1   56[BANK0 ] unsigned char 
  2426 ;;  nmode           1   33[BANK0 ] unsigned char 
  2427 ;;  mode            1   32[BANK0 ] unsigned char 
  2428 ;;  pp              1   31[BANK0 ] unsigned char 
  2429 ;;  esign           1    0        unsigned char 
  2430 ;; Return value:  Size  Location     Type
  2431 ;;                  1    wreg      void 
  2432 ;; Registers used:
  2433 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2434 ;; Tracked objects:
  2435 ;;		On entry : 0/0
  2436 ;;		On exit  : 0/0
  2437 ;;		Unchanged: 0/0
  2438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2439 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2440 ;;      Locals:         0      44       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2441 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2442 ;;      Totals:         2      51       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2443 ;;Total ram usage:       53 bytes
  2444 ;; Hardware stack levels used: 1
  2445 ;; Hardware stack levels required when called: 6
  2446 ;; This function calls:
  2447 ;;		___fladd
  2448 ;;		___fldiv
  2449 ;;		___fleq
  2450 ;;		___flge
  2451 ;;		___flmul
  2452 ;;		___flneg
  2453 ;;		___flsub
  2454 ;;		___fltol
  2455 ;;		___fpclassifyf
  2456 ;;		_floorf
  2457 ;;		_labs
  2458 ;;		_memcpy
  2459 ;;		_pad
  2460 ;;		_strcpy
  2461 ;; This function is called by:
  2462 ;;		_vfpfcnvrt
  2463 ;; This function uses a non-reentrant model
  2464 ;;
  2465                           
  2466                           	psect	text5
  2467   00197E                     __ptext5:
  2468                           	callstack 0
  2469   00197E                     _efgtoa:
  2470                           	callstack 21
  2471   00197E                     
  2472                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 506: static void 
      +                          efgtoa(FILE *fp, long double f, char c);C:\Program Files\Microchip\xc8\v2.40\pic\sources
      +                          \c99\common\doprnt.c: 507: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 508:     char mode, nmode, pp, sign, esign;;C:\Program Files\Microchip\xc8\v2
      +                          .40\pic\sources\c99\common\doprnt.c: 509:     int d, e, i, m, n, ne, p, t, w;;C:\Program
      +                           Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 510:     long double h, l;
  2473   00197E  0E00               	movlw	0
  2474   001980  0100               	movlb	0	; () banked
  2475   001982  6F98               	movwf	efgtoa@sign& (0+255),b
  2476   001984                     
  2477                           ; BSR set to: 0
  2478                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 515:     g.f = f;
  2479   001984  C072  F099         	movff	efgtoa@f,efgtoa@g
  2480   001988  C073  F09A         	movff	efgtoa@f+1,efgtoa@g+1
  2481   00198C  C074  F09B         	movff	efgtoa@f+2,efgtoa@g+2
  2482   001990  C075  F09C         	movff	efgtoa@f+3,efgtoa@g+3
  2483   001994                     
  2484                           ; BSR set to: 0
  2485                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 516:     if (g.f 
      +                          < 0.0) {
  2486   001994  BF9C               	btfsc	(efgtoa@g+3)& (0+255),7,b
  2487   001996  EFD1  F00C         	goto	u5960
  2488   00199A  EFCF  F00C         	goto	u5961
  2489   00199E                     u5961:
  2490   00199E  EFE5  F00C         	goto	l5551
  2491   0019A2                     u5960:
  2492   0019A2                     
  2493                           ; BSR set to: 0
  2494                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 517:         sign
      +                           = 1;
  2495   0019A2  0E01               	movlw	1
  2496   0019A4  6F98               	movwf	efgtoa@sign& (0+255),b
  2497   0019A6                     
  2498                           ; BSR set to: 0
  2499                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 518:         g.f 
      +                          = -g.f;
  2500   0019A6  C099  F005         	movff	efgtoa@g,___flneg@f1
  2501   0019AA  C09A  F006         	movff	efgtoa@g+1,___flneg@f1+1
  2502   0019AE  C09B  F007         	movff	efgtoa@g+2,___flneg@f1+2
  2503   0019B2  C09C  F008         	movff	efgtoa@g+3,___flneg@f1+3
  2504   0019B6  ECE7  F02A         	call	___flneg	;wreg free
  2505   0019BA  C005  F099         	movff	?___flneg,efgtoa@g
  2506   0019BE  C006  F09A         	movff	?___flneg+1,efgtoa@g+1
  2507   0019C2  C007  F09B         	movff	?___flneg+2,efgtoa@g+2
  2508   0019C6  C008  F09C         	movff	?___flneg+3,efgtoa@g+3
  2509   0019CA                     l5551:
  2510                           
  2511                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 522:     n = 0;
  2512   0019CA  0E00               	movlw	0
  2513   0019CC  0100               	movlb	0	; () banked
  2514   0019CE  6F9E               	movwf	(efgtoa@n+1)& (0+255),b
  2515   0019D0  0E00               	movlw	0
  2516   0019D2  6F9D               	movwf	efgtoa@n& (0+255),b
  2517   0019D4                     
  2518                           ; BSR set to: 0
  2519                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 523:     w = widt
      +                          h;
  2520   0019D4  C0F3  F088         	movff	_width,efgtoa@w
  2521   0019D8  C0F4  F089         	movff	_width+1,efgtoa@w+1
  2522   0019DC                     
  2523                           ; BSR set to: 0
  2524                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 524:     if (sign
  2525   0019DC  5198               	movf	efgtoa@sign& (0+255),w,b
  2526   0019DE  B4D8               	btfsc	status,2,c
  2527   0019E0  EFF4  F00C         	goto	u5971
  2528   0019E4  EFF6  F00C         	goto	u5970
  2529   0019E8                     u5971:
  2530   0019E8  EF0A  F00D         	goto	l5565
  2531   0019EC                     u5970:
  2532   0019EC                     
  2533                           ; BSR set to: 0
  2534                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 528:    ) {;C:\Pr
      +                          ogram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 529:   sign = sign ? '-
      +                          ' : '+';
  2535   0019EC  5198               	movf	efgtoa@sign& (0+255),w,b
  2536   0019EE  A4D8               	btfss	status,2,c
  2537   0019F0  EFFC  F00C         	goto	u5981
  2538   0019F4  EFFE  F00C         	goto	u5980
  2539   0019F8                     u5981:
  2540   0019F8  EF04  F00D         	goto	l5561
  2541   0019FC                     u5980:
  2542   0019FC                     
  2543                           ; BSR set to: 0
  2544   0019FC  0E00               	movlw	0
  2545   0019FE  6F7E               	movwf	(_efgtoa$2725+1)& (0+255),b
  2546   001A00  0E2B               	movlw	43
  2547   001A02  6F7D               	movwf	_efgtoa$2725& (0+255),b
  2548   001A04  EF08  F00D         	goto	l5563
  2549   001A08                     l5561:
  2550                           
  2551                           ; BSR set to: 0
  2552   001A08  0E00               	movlw	0
  2553   001A0A  6F7E               	movwf	(_efgtoa$2725+1)& (0+255),b
  2554   001A0C  0E2D               	movlw	45
  2555   001A0E  6F7D               	movwf	_efgtoa$2725& (0+255),b
  2556   001A10                     l5563:
  2557                           
  2558                           ; BSR set to: 0
  2559   001A10  C07D  F098         	movff	_efgtoa$2725,efgtoa@sign
  2560   001A14                     l5565:
  2561                           
  2562                           ; BSR set to: 0
  2563                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 538:     if (( __
      +                          fpclassifyf(g.f) == 1 )) {
  2564   001A14  C099  F005         	movff	efgtoa@g,___fpclassifyf@x
  2565   001A18  C09A  F006         	movff	efgtoa@g+1,___fpclassifyf@x+1
  2566   001A1C  C09B  F007         	movff	efgtoa@g+2,___fpclassifyf@x+2
  2567   001A20  C09C  F008         	movff	efgtoa@g+3,___fpclassifyf@x+3
  2568   001A24  EC13  F024         	call	___fpclassifyf	;wreg free
  2569   001A28  0405               	decf	?___fpclassifyf^0,w,c
  2570   001A2A  1006               	iorwf	(?___fpclassifyf+1)^0,w,c
  2571   001A2C  A4D8               	btfss	status,2,c
  2572   001A2E  EF1B  F00D         	goto	u5991
  2573   001A32  EF1D  F00D         	goto	u5990
  2574   001A36                     u5991:
  2575   001A36  EF50  F00D         	goto	l5583
  2576   001A3A                     u5990:
  2577   001A3A                     
  2578                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 539:   if (sign) 
      +                          {
  2579   001A3A  0100               	movlb	0	; () banked
  2580   001A3C  5198               	movf	efgtoa@sign& (0+255),w,b
  2581   001A3E  B4D8               	btfsc	status,2,c
  2582   001A40  EF24  F00D         	goto	u6001
  2583   001A44  EF26  F00D         	goto	u6000
  2584   001A48                     u6001:
  2585   001A48  EF2F  F00D         	goto	l5575
  2586   001A4C                     u6000:
  2587   001A4C                     
  2588                           ; BSR set to: 0
  2589                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 540:    dbuf[0] =
      +                           sign;
  2590   001A4C  C098  F13C         	movff	efgtoa@sign,_dbuf
  2591   001A50                     
  2592                           ; BSR set to: 0
  2593                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 541:    w--;
  2594   001A50  0788               	decf	efgtoa@w& (0+255),f,b
  2595   001A52  A0D8               	btfss	status,0,c
  2596   001A54  0789               	decf	(efgtoa@w+1)& (0+255),f,b
  2597   001A56                     
  2598                           ; BSR set to: 0
  2599                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 542:    n = 1;
  2600   001A56  0E00               	movlw	0
  2601   001A58  6F9E               	movwf	(efgtoa@n+1)& (0+255),b
  2602   001A5A  0E01               	movlw	1
  2603   001A5C  6F9D               	movwf	efgtoa@n& (0+255),b
  2604   001A5E                     l5575:
  2605                           
  2606                           ; BSR set to: 0
  2607                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 550:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 551:             strcpy(&d
      +                          buf[n], "inf");
  2608   001A5E  0E3C               	movlw	low _dbuf
  2609   001A60  259D               	addwf	efgtoa@n& (0+255),w,b
  2610   001A62  6E05               	movwf	strcpy@dest^0,c
  2611   001A64  0E01               	movlw	high _dbuf
  2612   001A66  219E               	addwfc	(efgtoa@n+1)& (0+255),w,b
  2613   001A68  6E06               	movwf	(strcpy@dest+1)^0,c
  2614   001A6A  0E13               	movlw	low STR_2
  2615   001A6C  6E07               	movwf	strcpy@src^0,c
  2616   001A6E  0E0E               	movlw	high STR_2
  2617   001A70  6E08               	movwf	(strcpy@src+1)^0,c
  2618   001A72  EC62  F02A         	call	_strcpy	;wreg free
  2619   001A76                     l5577:
  2620                           
  2621                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 552:         };C:
      +                          \Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 553:         w -= ((
      +                          sizeof("inf")/sizeof("inf"[0]))-1);
  2622   001A76  0100               	movlb	0	; () banked
  2623   001A78  0EFD               	movlw	253
  2624   001A7A  2788               	addwf	efgtoa@w& (0+255),f,b
  2625   001A7C  0EFF               	movlw	255
  2626   001A7E  2389               	addwfc	(efgtoa@w+1)& (0+255),f,b
  2627   001A80                     
  2628                           ; BSR set to: 0
  2629                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 554:         retu
      +                          rn (void) pad(fp, &dbuf[0], w);
  2630   001A80  C070  F015         	movff	efgtoa@fp,pad@fp
  2631   001A84  C071  F016         	movff	efgtoa@fp+1,pad@fp+1
  2632   001A88  0E3C               	movlw	low _dbuf
  2633   001A8A  6E17               	movwf	pad@buf^0,c
  2634   001A8C  0E01               	movlw	high _dbuf
  2635   001A8E  6E18               	movwf	(pad@buf+1)^0,c
  2636   001A90  C088  F019         	movff	efgtoa@w,pad@p
  2637   001A94  C089  F01A         	movff	efgtoa@w+1,pad@p+1
  2638   001A98  EC25  F028         	call	_pad	;wreg free
  2639   001A9C  EFBB  F011         	goto	l1242
  2640   001AA0                     l5583:
  2641                           
  2642                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 556:     if (( __
      +                          fpclassifyf(g.f) == 0 )) {
  2643   001AA0  C099  F005         	movff	efgtoa@g,___fpclassifyf@x
  2644   001AA4  C09A  F006         	movff	efgtoa@g+1,___fpclassifyf@x+1
  2645   001AA8  C09B  F007         	movff	efgtoa@g+2,___fpclassifyf@x+2
  2646   001AAC  C09C  F008         	movff	efgtoa@g+3,___fpclassifyf@x+3
  2647   001AB0  EC13  F024         	call	___fpclassifyf	;wreg free
  2648   001AB4  5005               	movf	?___fpclassifyf^0,w,c
  2649   001AB6  1006               	iorwf	(?___fpclassifyf+1)^0,w,c
  2650   001AB8  A4D8               	btfss	status,2,c
  2651   001ABA  EF61  F00D         	goto	u6011
  2652   001ABE  EF63  F00D         	goto	u6010
  2653   001AC2                     u6011:
  2654   001AC2  EF83  F00D         	goto	l5601
  2655   001AC6                     u6010:
  2656   001AC6                     
  2657                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 557:   if (sign) 
      +                          {
  2658   001AC6  0100               	movlb	0	; () banked
  2659   001AC8  5198               	movf	efgtoa@sign& (0+255),w,b
  2660   001ACA  B4D8               	btfsc	status,2,c
  2661   001ACC  EF6A  F00D         	goto	u6021
  2662   001AD0  EF6C  F00D         	goto	u6020
  2663   001AD4                     u6021:
  2664   001AD4  EF75  F00D         	goto	l5593
  2665   001AD8                     u6020:
  2666   001AD8                     
  2667                           ; BSR set to: 0
  2668                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 558:    dbuf[0] =
      +                           sign;
  2669   001AD8  C098  F13C         	movff	efgtoa@sign,_dbuf
  2670   001ADC                     
  2671                           ; BSR set to: 0
  2672                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 559:    w--;
  2673   001ADC  0788               	decf	efgtoa@w& (0+255),f,b
  2674   001ADE  A0D8               	btfss	status,0,c
  2675   001AE0  0789               	decf	(efgtoa@w+1)& (0+255),f,b
  2676   001AE2                     
  2677                           ; BSR set to: 0
  2678                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 560:    n = 1;
  2679   001AE2  0E00               	movlw	0
  2680   001AE4  6F9E               	movwf	(efgtoa@n+1)& (0+255),b
  2681   001AE6  0E01               	movlw	1
  2682   001AE8  6F9D               	movwf	efgtoa@n& (0+255),b
  2683   001AEA                     l5593:
  2684                           
  2685                           ; BSR set to: 0
  2686                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 568:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 569:             strcpy(&d
      +                          buf[n], "nan");
  2687   001AEA  0E3C               	movlw	low _dbuf
  2688   001AEC  259D               	addwf	efgtoa@n& (0+255),w,b
  2689   001AEE  6E05               	movwf	strcpy@dest^0,c
  2690   001AF0  0E01               	movlw	high _dbuf
  2691   001AF2  219E               	addwfc	(efgtoa@n+1)& (0+255),w,b
  2692   001AF4  6E06               	movwf	(strcpy@dest+1)^0,c
  2693   001AF6  0E17               	movlw	low STR_5
  2694   001AF8  6E07               	movwf	strcpy@src^0,c
  2695   001AFA  0E0E               	movlw	high STR_5
  2696   001AFC  6E08               	movwf	(strcpy@src+1)^0,c
  2697   001AFE  EC62  F02A         	call	_strcpy	;wreg free
  2698   001B02  EF3B  F00D         	goto	l5577
  2699   001B06                     l5601:
  2700                           
  2701                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 576:     u.f = 1.
      +                          0;
  2702   001B06  0E00               	movlw	0
  2703   001B08  0100               	movlb	0	; () banked
  2704   001B0A  6F9F               	movwf	efgtoa@u& (0+255),b
  2705   001B0C  0E00               	movlw	0
  2706   001B0E  6FA0               	movwf	(efgtoa@u+1)& (0+255),b
  2707   001B10  0E80               	movlw	128
  2708   001B12  6FA1               	movwf	(efgtoa@u+2)& (0+255),b
  2709   001B14  0E3F               	movlw	63
  2710   001B16  6FA2               	movwf	(efgtoa@u+3)& (0+255),b
  2711                           
  2712                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 577:     e = 0;
  2713   001B18  0E00               	movlw	0
  2714   001B1A  6F87               	movwf	(efgtoa@e+1)& (0+255),b
  2715   001B1C  0E00               	movlw	0
  2716   001B1E  6F86               	movwf	efgtoa@e& (0+255),b
  2717   001B20                     
  2718                           ; BSR set to: 0
  2719                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 578:  if (!(g.f =
      +                          = 0.0)) {
  2720   001B20  C099  F005         	movff	efgtoa@g,___fleq@ff1
  2721   001B24  C09A  F006         	movff	efgtoa@g+1,___fleq@ff1+1
  2722   001B28  C09B  F007         	movff	efgtoa@g+2,___fleq@ff1+2
  2723   001B2C  C09C  F008         	movff	efgtoa@g+3,___fleq@ff1+3
  2724   001B30  0E00               	movlw	0
  2725   001B32  6E09               	movwf	___fleq@ff2^0,c
  2726   001B34  0E00               	movlw	0
  2727   001B36  6E0A               	movwf	(___fleq@ff2+1)^0,c
  2728   001B38  0E00               	movlw	0
  2729   001B3A  6E0B               	movwf	(___fleq@ff2+2)^0,c
  2730   001B3C  0E00               	movlw	0
  2731   001B3E  6E0C               	movwf	(___fleq@ff2+3)^0,c
  2732   001B40  EC06  F027         	call	___fleq	;wreg free
  2733   001B44  B0D8               	btfsc	status,0,c
  2734   001B46  EFA7  F00D         	goto	u6031
  2735   001B4A  EFA9  F00D         	goto	u6030
  2736   001B4E                     u6031:
  2737   001B4E  EF88  F00E         	goto	l1245
  2738   001B52                     u6030:
  2739   001B52  EFB6  F00D         	goto	l5609
  2740   001B56                     l1247:
  2741                           
  2742                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 580:    u = ou;
  2743   001B56  C08A  F09F         	movff	efgtoa@ou,efgtoa@u
  2744   001B5A  C08B  F0A0         	movff	efgtoa@ou+1,efgtoa@u+1
  2745   001B5E  C08C  F0A1         	movff	efgtoa@ou+2,efgtoa@u+2
  2746   001B62  C08D  F0A2         	movff	efgtoa@ou+3,efgtoa@u+3
  2747   001B66                     
  2748                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 581:    ++e;
  2749   001B66  0100               	movlb	0	; () banked
  2750   001B68  4B86               	infsnz	efgtoa@e& (0+255),f,b
  2751   001B6A  2B87               	incf	(efgtoa@e+1)& (0+255),f,b
  2752   001B6C                     l5609:
  2753                           
  2754                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 579:   while ((la
      +                          bs((g).u-((ou.f = u.f*10.0,ou)).u) <= 1) || g.f > ou.f) {
  2755   001B6C  C09F  F015         	movff	efgtoa@u,___flmul@b
  2756   001B70  C0A0  F016         	movff	efgtoa@u+1,___flmul@b+1
  2757   001B74  C0A1  F017         	movff	efgtoa@u+2,___flmul@b+2
  2758   001B78  C0A2  F018         	movff	efgtoa@u+3,___flmul@b+3
  2759   001B7C  0E00               	movlw	0
  2760   001B7E  6E19               	movwf	___flmul@a^0,c
  2761   001B80  0E00               	movlw	0
  2762   001B82  6E1A               	movwf	(___flmul@a+1)^0,c
  2763   001B84  0E20               	movlw	32
  2764   001B86  6E1B               	movwf	(___flmul@a+2)^0,c
  2765   001B88  0E41               	movlw	65
  2766   001B8A  6E1C               	movwf	(___flmul@a+3)^0,c
  2767   001B8C  EC1C  F014         	call	___flmul	;wreg free
  2768   001B90  C015  F08A         	movff	?___flmul,efgtoa@ou
  2769   001B94  C016  F08B         	movff	?___flmul+1,efgtoa@ou+1
  2770   001B98  C017  F08C         	movff	?___flmul+2,efgtoa@ou+2
  2771   001B9C  C018  F08D         	movff	?___flmul+3,efgtoa@ou+3
  2772   001BA0  0100               	movlb	0	; () banked
  2773   001BA2  518A               	movf	efgtoa@ou& (0+255),w,b
  2774   001BA4  5D99               	subwf	efgtoa@g& (0+255),w,b
  2775   001BA6  6E05               	movwf	labs@a^0,c
  2776   001BA8  518B               	movf	(efgtoa@ou+1)& (0+255),w,b
  2777   001BAA  599A               	subwfb	(efgtoa@g+1)& (0+255),w,b
  2778   001BAC  6E06               	movwf	(labs@a+1)^0,c
  2779   001BAE  518C               	movf	(efgtoa@ou+2)& (0+255),w,b
  2780   001BB0  599B               	subwfb	(efgtoa@g+2)& (0+255),w,b
  2781   001BB2  6E07               	movwf	(labs@a+2)^0,c
  2782   001BB4  518D               	movf	(efgtoa@ou+3)& (0+255),w,b
  2783   001BB6  599C               	subwfb	(efgtoa@g+3)& (0+255),w,b
  2784   001BB8  6E08               	movwf	(labs@a+3)^0,c
  2785   001BBA  EC9C  F028         	call	_labs	;wreg free
  2786   001BBE  BE08               	btfsc	(?_labs+3)^0,7,c
  2787   001BC0  EFED  F00D         	goto	u6041
  2788   001BC4  5008               	movf	(?_labs+3)^0,w,c
  2789   001BC6  1007               	iorwf	(?_labs+2)^0,w,c
  2790   001BC8  1006               	iorwf	(?_labs+1)^0,w,c
  2791   001BCA  E109               	bnz	u6040
  2792   001BCC  0E02               	movlw	2
  2793   001BCE  5C05               	subwf	?_labs^0,w,c
  2794   001BD0  A0D8               	btfss	status,0,c
  2795   001BD2  EFED  F00D         	goto	u6041
  2796   001BD6  EFEF  F00D         	goto	u6040
  2797   001BDA                     u6041:
  2798   001BDA  EFAB  F00D         	goto	l1247
  2799   001BDE                     u6040:
  2800   001BDE  C08A  F036         	movff	efgtoa@ou,___flge@ff1
  2801   001BE2  C08B  F037         	movff	efgtoa@ou+1,___flge@ff1+1
  2802   001BE6  C08C  F038         	movff	efgtoa@ou+2,___flge@ff1+2
  2803   001BEA  C08D  F039         	movff	efgtoa@ou+3,___flge@ff1+3
  2804   001BEE  C099  F03A         	movff	efgtoa@g,___flge@ff2
  2805   001BF2  C09A  F03B         	movff	efgtoa@g+1,___flge@ff2+1
  2806   001BF6  C09B  F03C         	movff	efgtoa@g+2,___flge@ff2+2
  2807   001BFA  C09C  F03D         	movff	efgtoa@g+3,___flge@ff2+3
  2808   001BFE  EC91  F023         	call	___flge	;wreg free
  2809   001C02  A0D8               	btfss	status,0,c
  2810   001C04  EF06  F00E         	goto	u6051
  2811   001C08  EF08  F00E         	goto	u6050
  2812   001C0C                     u6051:
  2813   001C0C  EFAB  F00D         	goto	l1247
  2814   001C10                     u6050:
  2815   001C10                     
  2816                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 583:   if ((labs(
      +                          (g).u-(u).u) <= 1)) {
  2817   001C10  0100               	movlb	0	; () banked
  2818   001C12  519F               	movf	efgtoa@u& (0+255),w,b
  2819   001C14  5D99               	subwf	efgtoa@g& (0+255),w,b
  2820   001C16  6E05               	movwf	labs@a^0,c
  2821   001C18  51A0               	movf	(efgtoa@u+1)& (0+255),w,b
  2822   001C1A  599A               	subwfb	(efgtoa@g+1)& (0+255),w,b
  2823   001C1C  6E06               	movwf	(labs@a+1)^0,c
  2824   001C1E  51A1               	movf	(efgtoa@u+2)& (0+255),w,b
  2825   001C20  599B               	subwfb	(efgtoa@g+2)& (0+255),w,b
  2826   001C22  6E07               	movwf	(labs@a+2)^0,c
  2827   001C24  51A2               	movf	(efgtoa@u+3)& (0+255),w,b
  2828   001C26  599C               	subwfb	(efgtoa@g+3)& (0+255),w,b
  2829   001C28  6E08               	movwf	(labs@a+3)^0,c
  2830   001C2A  EC9C  F028         	call	_labs	;wreg free
  2831   001C2E  BE08               	btfsc	(?_labs+3)^0,7,c
  2832   001C30  EF27  F00E         	goto	u6060
  2833   001C34  5008               	movf	(?_labs+3)^0,w,c
  2834   001C36  1007               	iorwf	(?_labs+2)^0,w,c
  2835   001C38  1006               	iorwf	(?_labs+1)^0,w,c
  2836   001C3A  E107               	bnz	u6061
  2837   001C3C  0E02               	movlw	2
  2838   001C3E  5C05               	subwf	?_labs^0,w,c
  2839   001C40  B0D8               	btfsc	status,0,c
  2840   001C42  EF25  F00E         	goto	u6061
  2841   001C46  EF27  F00E         	goto	u6060
  2842   001C4A                     u6061:
  2843   001C4A  EF6F  F00E         	goto	l5627
  2844   001C4E                     u6060:
  2845   001C4E                     l5617:
  2846                           
  2847                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 584:    g = u;
  2848   001C4E  C09F  F099         	movff	efgtoa@u,efgtoa@g
  2849   001C52  C0A0  F09A         	movff	efgtoa@u+1,efgtoa@g+1
  2850   001C56  C0A1  F09B         	movff	efgtoa@u+2,efgtoa@g+2
  2851   001C5A  C0A2  F09C         	movff	efgtoa@u+3,efgtoa@g+3
  2852                           
  2853                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 585:   }
  2854   001C5E  EF88  F00E         	goto	l1245
  2855   001C62                     l5619:
  2856                           
  2857                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 588:     u.f = u.
      +                          f/10.0;
  2858   001C62  C09F  F036         	movff	efgtoa@u,___fldiv@b
  2859   001C66  C0A0  F037         	movff	efgtoa@u+1,___fldiv@b+1
  2860   001C6A  C0A1  F038         	movff	efgtoa@u+2,___fldiv@b+2
  2861   001C6E  C0A2  F039         	movff	efgtoa@u+3,___fldiv@b+3
  2862   001C72  0E00               	movlw	0
  2863   001C74  6E3A               	movwf	___fldiv@a^0,c
  2864   001C76  0E00               	movlw	0
  2865   001C78  6E3B               	movwf	(___fldiv@a+1)^0,c
  2866   001C7A  0E20               	movlw	32
  2867   001C7C  6E3C               	movwf	(___fldiv@a+2)^0,c
  2868   001C7E  0E41               	movlw	65
  2869   001C80  6E3D               	movwf	(___fldiv@a+3)^0,c
  2870   001C82  EC31  F016         	call	___fldiv	;wreg free
  2871   001C86  C036  F09F         	movff	?___fldiv,efgtoa@u
  2872   001C8A  C037  F0A0         	movff	?___fldiv+1,efgtoa@u+1
  2873   001C8E  C038  F0A1         	movff	?___fldiv+2,efgtoa@u+2
  2874   001C92  C039  F0A2         	movff	?___fldiv+3,efgtoa@u+3
  2875   001C96                     
  2876                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 589:     --e;
  2877   001C96  0100               	movlb	0	; () banked
  2878   001C98  0786               	decf	efgtoa@e& (0+255),f,b
  2879   001C9A  A0D8               	btfss	status,0,c
  2880   001C9C  0787               	decf	(efgtoa@e+1)& (0+255),f,b
  2881   001C9E                     
  2882                           ; BSR set to: 0
  2883                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 590:     if ((lab
      +                          s((g).u-(u).u) <= 1)) {
  2884   001C9E  519F               	movf	efgtoa@u& (0+255),w,b
  2885   001CA0  5D99               	subwf	efgtoa@g& (0+255),w,b
  2886   001CA2  6E05               	movwf	labs@a^0,c
  2887   001CA4  51A0               	movf	(efgtoa@u+1)& (0+255),w,b
  2888   001CA6  599A               	subwfb	(efgtoa@g+1)& (0+255),w,b
  2889   001CA8  6E06               	movwf	(labs@a+1)^0,c
  2890   001CAA  51A1               	movf	(efgtoa@u+2)& (0+255),w,b
  2891   001CAC  599B               	subwfb	(efgtoa@g+2)& (0+255),w,b
  2892   001CAE  6E07               	movwf	(labs@a+2)^0,c
  2893   001CB0  51A2               	movf	(efgtoa@u+3)& (0+255),w,b
  2894   001CB2  599C               	subwfb	(efgtoa@g+3)& (0+255),w,b
  2895   001CB4  6E08               	movwf	(labs@a+3)^0,c
  2896   001CB6  EC9C  F028         	call	_labs	;wreg free
  2897   001CBA  BE08               	btfsc	(?_labs+3)^0,7,c
  2898   001CBC  EF6D  F00E         	goto	u6070
  2899   001CC0  5008               	movf	(?_labs+3)^0,w,c
  2900   001CC2  1007               	iorwf	(?_labs+2)^0,w,c
  2901   001CC4  1006               	iorwf	(?_labs+1)^0,w,c
  2902   001CC6  E107               	bnz	u6071
  2903   001CC8  0E02               	movlw	2
  2904   001CCA  5C05               	subwf	?_labs^0,w,c
  2905   001CCC  B0D8               	btfsc	status,0,c
  2906   001CCE  EF6B  F00E         	goto	u6071
  2907   001CD2  EF6D  F00E         	goto	u6070
  2908   001CD6                     u6071:
  2909   001CD6  EF6F  F00E         	goto	l5627
  2910   001CDA                     u6070:
  2911   001CDA  EF27  F00E         	goto	l5617
  2912   001CDE                     l5627:
  2913                           
  2914                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 587:    while (g.
      +                          f < u.f) {
  2915   001CDE  C099  F036         	movff	efgtoa@g,___flge@ff1
  2916   001CE2  C09A  F037         	movff	efgtoa@g+1,___flge@ff1+1
  2917   001CE6  C09B  F038         	movff	efgtoa@g+2,___flge@ff1+2
  2918   001CEA  C09C  F039         	movff	efgtoa@g+3,___flge@ff1+3
  2919   001CEE  C09F  F03A         	movff	efgtoa@u,___flge@ff2
  2920   001CF2  C0A0  F03B         	movff	efgtoa@u+1,___flge@ff2+1
  2921   001CF6  C0A1  F03C         	movff	efgtoa@u+2,___flge@ff2+2
  2922   001CFA  C0A2  F03D         	movff	efgtoa@u+3,___flge@ff2+3
  2923   001CFE  EC91  F023         	call	___flge	;wreg free
  2924   001D02  A0D8               	btfss	status,0,c
  2925   001D04  EF86  F00E         	goto	u6081
  2926   001D08  EF88  F00E         	goto	u6080
  2927   001D0C                     u6081:
  2928   001D0C  EF31  F00E         	goto	l5619
  2929   001D10                     u6080:
  2930   001D10                     l1245:
  2931                           
  2932                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 602:  mode = c;
  2933   001D10  C076  F080         	movff	efgtoa@c,efgtoa@mode
  2934                           
  2935                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 604:     nmode = 
      +                          mode;
  2936   001D14  C080  F081         	movff	efgtoa@mode,efgtoa@nmode
  2937   001D18                     
  2938                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 614:  {;C:\Progra
      +                          m Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 615:         p = (prec < 0)
      +                           ? 6 : prec;
  2939   001D18  0100               	movlb	0	; () banked
  2940   001D1A  BFF6               	btfsc	(_prec+1)& (0+255),7,b
  2941   001D1C  EF92  F00E         	goto	u6091
  2942   001D20  EF94  F00E         	goto	u6090
  2943   001D24                     u6091:
  2944   001D24  EF9A  F00E         	goto	l5633
  2945   001D28                     u6090:
  2946   001D28                     
  2947                           ; BSR set to: 0
  2948   001D28  C0F5  F079         	movff	_prec,efgtoa@p
  2949   001D2C  C0F6  F07A         	movff	_prec+1,efgtoa@p+1
  2950   001D30  EF9E  F00E         	goto	l5635
  2951   001D34                     l5633:
  2952                           
  2953                           ; BSR set to: 0
  2954   001D34  0E00               	movlw	0
  2955   001D36  6F7A               	movwf	(efgtoa@p+1)& (0+255),b
  2956   001D38  0E06               	movlw	6
  2957   001D3A  6F79               	movwf	efgtoa@p& (0+255),b
  2958   001D3C                     l5635:
  2959                           
  2960                           ; BSR set to: 0
  2961                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 616:     };C:\Pro
      +                          gram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 630:     m = p;
  2962   001D3C  C079  F084         	movff	efgtoa@p,efgtoa@m
  2963   001D40  C07A  F085         	movff	efgtoa@p+1,efgtoa@m+1
  2964   001D44                     
  2965                           ; BSR set to: 0
  2966                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 634:  {;C:\Progra
      +                          m Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 635:         ++m;
  2967   001D44  4B84               	infsnz	efgtoa@m& (0+255),f,b
  2968   001D46  2B85               	incf	(efgtoa@m+1)& (0+255),f,b
  2969   001D48                     
  2970                           ; BSR set to: 0
  2971                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 636:     };C:\Pro
      +                          gram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 640:     if (nmode == 'f
      +                          ') {
  2972   001D48  0E66               	movlw	102
  2973   001D4A  1981               	xorwf	efgtoa@nmode& (0+255),w,b
  2974   001D4C  A4D8               	btfss	status,2,c
  2975   001D4E  EFAB  F00E         	goto	u6101
  2976   001D52  EFAD  F00E         	goto	u6100
  2977   001D56                     u6101:
  2978   001D56  EFCD  F00E         	goto	l5649
  2979   001D5A                     u6100:
  2980   001D5A                     
  2981                           ; BSR set to: 0
  2982                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 641:         if (
      +                          e < 0) {
  2983   001D5A  BF87               	btfsc	(efgtoa@e+1)& (0+255),7,b
  2984   001D5C  EFB4  F00E         	goto	u6110
  2985   001D60  EFB2  F00E         	goto	u6111
  2986   001D64                     u6111:
  2987   001D64  EFC0  F00E         	goto	l5645
  2988   001D68                     u6110:
  2989   001D68                     
  2990                           ; BSR set to: 0
  2991                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 642:             
      +                          u.f = 1.0;
  2992   001D68  0E00               	movlw	0
  2993   001D6A  6F9F               	movwf	efgtoa@u& (0+255),b
  2994   001D6C  0E00               	movlw	0
  2995   001D6E  6FA0               	movwf	(efgtoa@u+1)& (0+255),b
  2996   001D70  0E80               	movlw	128
  2997   001D72  6FA1               	movwf	(efgtoa@u+2)& (0+255),b
  2998   001D74  0E3F               	movlw	63
  2999   001D76  6FA2               	movwf	(efgtoa@u+3)& (0+255),b
  3000                           
  3001                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 643:             
      +                          e = 0;
  3002   001D78  0E00               	movlw	0
  3003   001D7A  6F87               	movwf	(efgtoa@e+1)& (0+255),b
  3004   001D7C  0E00               	movlw	0
  3005   001D7E  6F86               	movwf	efgtoa@e& (0+255),b
  3006   001D80                     l5645:
  3007                           
  3008                           ; BSR set to: 0
  3009                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 645:         if (
      +                          !(mode == 'g')) {
  3010   001D80  0E67               	movlw	103
  3011   001D82  1980               	xorwf	efgtoa@mode& (0+255),w,b
  3012   001D84  B4D8               	btfsc	status,2,c
  3013   001D86  EFC7  F00E         	goto	u6121
  3014   001D8A  EFC9  F00E         	goto	u6120
  3015   001D8E                     u6121:
  3016   001D8E  EFCD  F00E         	goto	l5649
  3017   001D92                     u6120:
  3018   001D92                     
  3019                           ; BSR set to: 0
  3020                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 646:             
      +                          m += e;
  3021   001D92  5186               	movf	efgtoa@e& (0+255),w,b
  3022   001D94  2784               	addwf	efgtoa@m& (0+255),f,b
  3023   001D96  5187               	movf	(efgtoa@e+1)& (0+255),w,b
  3024   001D98  2385               	addwfc	(efgtoa@m+1)& (0+255),f,b
  3025   001D9A                     l5649:
  3026                           
  3027                           ; BSR set to: 0
  3028                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 652:     i = 0;
  3029   001D9A  0E00               	movlw	0
  3030   001D9C  6F8F               	movwf	(efgtoa@i+1)& (0+255),b
  3031   001D9E  0E00               	movlw	0
  3032   001DA0  6F8E               	movwf	efgtoa@i& (0+255),b
  3033   001DA2                     
  3034                           ; BSR set to: 0
  3035                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 653:     h = g.f;
  3036   001DA2  C099  F090         	movff	efgtoa@g,efgtoa@h
  3037   001DA6  C09A  F091         	movff	efgtoa@g+1,efgtoa@h+1
  3038   001DAA  C09B  F092         	movff	efgtoa@g+2,efgtoa@h+2
  3039   001DAE  C09C  F093         	movff	efgtoa@g+3,efgtoa@h+3
  3040   001DB2                     
  3041                           ; BSR set to: 0
  3042                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 654:     ou = u;
  3043   001DB2  C09F  F08A         	movff	efgtoa@u,efgtoa@ou
  3044   001DB6  C0A0  F08B         	movff	efgtoa@u+1,efgtoa@ou+1
  3045   001DBA  C0A1  F08C         	movff	efgtoa@u+2,efgtoa@ou+2
  3046   001DBE  C0A2  F08D         	movff	efgtoa@u+3,efgtoa@ou+3
  3047                           
  3048                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 655:     while (i
      +                           < m) {
  3049   001DC2  EF5E  F00F         	goto	l5663
  3050   001DC6                     l5655:
  3051                           
  3052                           ; BSR set to: 0
  3053                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 656:         l = 
      +                          floorf(h/u.f);
  3054   001DC6  C090  F036         	movff	efgtoa@h,___fldiv@b
  3055   001DCA  C091  F037         	movff	efgtoa@h+1,___fldiv@b+1
  3056   001DCE  C092  F038         	movff	efgtoa@h+2,___fldiv@b+2
  3057   001DD2  C093  F039         	movff	efgtoa@h+3,___fldiv@b+3
  3058   001DD6  C09F  F03A         	movff	efgtoa@u,___fldiv@a
  3059   001DDA  C0A0  F03B         	movff	efgtoa@u+1,___fldiv@a+1
  3060   001DDE  C0A1  F03C         	movff	efgtoa@u+2,___fldiv@a+2
  3061   001DE2  C0A2  F03D         	movff	efgtoa@u+3,___fldiv@a+3
  3062   001DE6  EC31  F016         	call	___fldiv	;wreg free
  3063   001DEA  C036  F04F         	movff	?___fldiv,floorf@x
  3064   001DEE  C037  F050         	movff	?___fldiv+1,floorf@x+1
  3065   001DF2  C038  F051         	movff	?___fldiv+2,floorf@x+2
  3066   001DF6  C039  F052         	movff	?___fldiv+3,floorf@x+3
  3067   001DFA  ECE3  F01B         	call	_floorf	;wreg free
  3068   001DFE  C04F  F094         	movff	?_floorf,efgtoa@l
  3069   001E02  C050  F095         	movff	?_floorf+1,efgtoa@l+1
  3070   001E06  C051  F096         	movff	?_floorf+2,efgtoa@l+2
  3071   001E0A  C052  F097         	movff	?_floorf+3,efgtoa@l+3
  3072                           
  3073                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 657:         d = 
      +                          (int)l;
  3074   001E0E  C094  F005         	movff	efgtoa@l,___fltol@f1
  3075   001E12  C095  F006         	movff	efgtoa@l+1,___fltol@f1+1
  3076   001E16  C096  F007         	movff	efgtoa@l+2,___fltol@f1+2
  3077   001E1A  C097  F008         	movff	efgtoa@l+3,___fltol@f1+3
  3078   001E1E  EC0E  F023         	call	___fltol	;wreg free
  3079   001E22  C005  F082         	movff	?___fltol,efgtoa@d
  3080   001E26  C006  F083         	movff	?___fltol+1,efgtoa@d+1
  3081   001E2A                     
  3082                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 658:         h -=
      +                           l*u.f;
  3083   001E2A  C090  F02E         	movff	efgtoa@h,___flsub@b
  3084   001E2E  C091  F02F         	movff	efgtoa@h+1,___flsub@b+1
  3085   001E32  C092  F030         	movff	efgtoa@h+2,___flsub@b+2
  3086   001E36  C093  F031         	movff	efgtoa@h+3,___flsub@b+3
  3087   001E3A  C094  F019         	movff	efgtoa@l,___flmul@a
  3088   001E3E  C095  F01A         	movff	efgtoa@l+1,___flmul@a+1
  3089   001E42  C096  F01B         	movff	efgtoa@l+2,___flmul@a+2
  3090   001E46  C097  F01C         	movff	efgtoa@l+3,___flmul@a+3
  3091   001E4A  C09F  F015         	movff	efgtoa@u,___flmul@b
  3092   001E4E  C0A0  F016         	movff	efgtoa@u+1,___flmul@b+1
  3093   001E52  C0A1  F017         	movff	efgtoa@u+2,___flmul@b+2
  3094   001E56  C0A2  F018         	movff	efgtoa@u+3,___flmul@b+3
  3095   001E5A  EC1C  F014         	call	___flmul	;wreg free
  3096   001E5E  C015  F032         	movff	?___flmul,___flsub@a
  3097   001E62  C016  F033         	movff	?___flmul+1,___flsub@a+1
  3098   001E66  C017  F034         	movff	?___flmul+2,___flsub@a+2
  3099   001E6A  C018  F035         	movff	?___flmul+3,___flsub@a+3
  3100   001E6E  EC3F  F02A         	call	___flsub	;wreg free
  3101   001E72  C02E  F090         	movff	?___flsub,efgtoa@h
  3102   001E76  C02F  F091         	movff	?___flsub+1,efgtoa@h+1
  3103   001E7A  C030  F092         	movff	?___flsub+2,efgtoa@h+2
  3104   001E7E  C031  F093         	movff	?___flsub+3,efgtoa@h+3
  3105   001E82                     
  3106                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 659:         u.f 
      +                          = u.f/10.0;
  3107   001E82  C09F  F036         	movff	efgtoa@u,___fldiv@b
  3108   001E86  C0A0  F037         	movff	efgtoa@u+1,___fldiv@b+1
  3109   001E8A  C0A1  F038         	movff	efgtoa@u+2,___fldiv@b+2
  3110   001E8E  C0A2  F039         	movff	efgtoa@u+3,___fldiv@b+3
  3111   001E92  0E00               	movlw	0
  3112   001E94  6E3A               	movwf	___fldiv@a^0,c
  3113   001E96  0E00               	movlw	0
  3114   001E98  6E3B               	movwf	(___fldiv@a+1)^0,c
  3115   001E9A  0E20               	movlw	32
  3116   001E9C  6E3C               	movwf	(___fldiv@a+2)^0,c
  3117   001E9E  0E41               	movlw	65
  3118   001EA0  6E3D               	movwf	(___fldiv@a+3)^0,c
  3119   001EA2  EC31  F016         	call	___fldiv	;wreg free
  3120   001EA6  C036  F09F         	movff	?___fldiv,efgtoa@u
  3121   001EAA  C037  F0A0         	movff	?___fldiv+1,efgtoa@u+1
  3122   001EAE  C038  F0A1         	movff	?___fldiv+2,efgtoa@u+2
  3123   001EB2  C039  F0A2         	movff	?___fldiv+3,efgtoa@u+3
  3124   001EB6                     
  3125                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 660:         ++i;
  3126   001EB6  0100               	movlb	0	; () banked
  3127   001EB8  4B8E               	infsnz	efgtoa@i& (0+255),f,b
  3128   001EBA  2B8F               	incf	(efgtoa@i+1)& (0+255),f,b
  3129   001EBC                     l5663:
  3130                           
  3131                           ; BSR set to: 0
  3132                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 655:     while (i
      +                           < m) {
  3133   001EBC  5184               	movf	efgtoa@m& (0+255),w,b
  3134   001EBE  5D8E               	subwf	efgtoa@i& (0+255),w,b
  3135   001EC0  518F               	movf	(efgtoa@i+1)& (0+255),w,b
  3136   001EC2  0A80               	xorlw	128
  3137   001EC4  6E53               	movwf	??_efgtoa^0,c
  3138   001EC6  5185               	movf	(efgtoa@m+1)& (0+255),w,b
  3139   001EC8  0A80               	xorlw	128
  3140   001ECA  5853               	subwfb	??_efgtoa^0,w,c
  3141   001ECC  A0D8               	btfss	status,0,c
  3142   001ECE  EF6B  F00F         	goto	u6131
  3143   001ED2  EF6D  F00F         	goto	u6130
  3144   001ED6                     u6131:
  3145   001ED6  EFE3  F00E         	goto	l5655
  3146   001EDA                     u6130:
  3147   001EDA                     
  3148                           ; BSR set to: 0
  3149                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 664:     l = u.f*
      +                          5.0;
  3150   001EDA  C09F  F015         	movff	efgtoa@u,___flmul@b
  3151   001EDE  C0A0  F016         	movff	efgtoa@u+1,___flmul@b+1
  3152   001EE2  C0A1  F017         	movff	efgtoa@u+2,___flmul@b+2
  3153   001EE6  C0A2  F018         	movff	efgtoa@u+3,___flmul@b+3
  3154   001EEA  0E00               	movlw	0
  3155   001EEC  6E19               	movwf	___flmul@a^0,c
  3156   001EEE  0E00               	movlw	0
  3157   001EF0  6E1A               	movwf	(___flmul@a+1)^0,c
  3158   001EF2  0EA0               	movlw	160
  3159   001EF4  6E1B               	movwf	(___flmul@a+2)^0,c
  3160   001EF6  0E40               	movlw	64
  3161   001EF8  6E1C               	movwf	(___flmul@a+3)^0,c
  3162   001EFA  EC1C  F014         	call	___flmul	;wreg free
  3163   001EFE  C015  F094         	movff	?___flmul,efgtoa@l
  3164   001F02  C016  F095         	movff	?___flmul+1,efgtoa@l+1
  3165   001F06  C017  F096         	movff	?___flmul+2,efgtoa@l+2
  3166   001F0A  C018  F097         	movff	?___flmul+3,efgtoa@l+3
  3167   001F0E                     
  3168                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 665:     if (h < 
      +                          l) {
  3169   001F0E  C090  F036         	movff	efgtoa@h,___flge@ff1
  3170   001F12  C091  F037         	movff	efgtoa@h+1,___flge@ff1+1
  3171   001F16  C092  F038         	movff	efgtoa@h+2,___flge@ff1+2
  3172   001F1A  C093  F039         	movff	efgtoa@h+3,___flge@ff1+3
  3173   001F1E  C094  F03A         	movff	efgtoa@l,___flge@ff2
  3174   001F22  C095  F03B         	movff	efgtoa@l+1,___flge@ff2+1
  3175   001F26  C096  F03C         	movff	efgtoa@l+2,___flge@ff2+2
  3176   001F2A  C097  F03D         	movff	efgtoa@l+3,___flge@ff2+3
  3177   001F2E  EC91  F023         	call	___flge	;wreg free
  3178   001F32  B0D8               	btfsc	status,0,c
  3179   001F34  EF9E  F00F         	goto	u6141
  3180   001F38  EFA0  F00F         	goto	u6140
  3181   001F3C                     u6141:
  3182   001F3C  EFAB  F00F         	goto	l5671
  3183   001F40                     u6140:
  3184   001F40                     
  3185                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 666:         l = 
      +                          0.0;
  3186   001F40  0E00               	movlw	0
  3187   001F42  0100               	movlb	0	; () banked
  3188   001F44  6F94               	movwf	efgtoa@l& (0+255),b
  3189   001F46  0E00               	movlw	0
  3190   001F48  6F95               	movwf	(efgtoa@l+1)& (0+255),b
  3191   001F4A  0E00               	movlw	0
  3192   001F4C  6F96               	movwf	(efgtoa@l+2)& (0+255),b
  3193   001F4E  0E00               	movlw	0
  3194   001F50  6F97               	movwf	(efgtoa@l+3)& (0+255),b
  3195                           
  3196                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 667:     } else {
  3197   001F52  EFD4  F00F         	goto	l5677
  3198   001F56                     l5671:
  3199                           
  3200                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 669:         if (
      +                          (h == l) && !(d % 2)) {
  3201   001F56  C090  F005         	movff	efgtoa@h,___fleq@ff1
  3202   001F5A  C091  F006         	movff	efgtoa@h+1,___fleq@ff1+1
  3203   001F5E  C092  F007         	movff	efgtoa@h+2,___fleq@ff1+2
  3204   001F62  C093  F008         	movff	efgtoa@h+3,___fleq@ff1+3
  3205   001F66  C094  F009         	movff	efgtoa@l,___fleq@ff2
  3206   001F6A  C095  F00A         	movff	efgtoa@l+1,___fleq@ff2+1
  3207   001F6E  C096  F00B         	movff	efgtoa@l+2,___fleq@ff2+2
  3208   001F72  C097  F00C         	movff	efgtoa@l+3,___fleq@ff2+3
  3209   001F76  EC06  F027         	call	___fleq	;wreg free
  3210   001F7A  A0D8               	btfss	status,0,c
  3211   001F7C  EFC2  F00F         	goto	u6151
  3212   001F80  EFC4  F00F         	goto	u6150
  3213   001F84                     u6151:
  3214   001F84  EFD4  F00F         	goto	l5677
  3215   001F88                     u6150:
  3216   001F88  0100               	movlb	0	; () banked
  3217   001F8A  B182               	btfsc	efgtoa@d& (0+255),0,b
  3218   001F8C  EFCA  F00F         	goto	u6161
  3219   001F90  EFCC  F00F         	goto	u6160
  3220   001F94                     u6161:
  3221   001F94  EFD4  F00F         	goto	l5677
  3222   001F98                     u6160:
  3223   001F98                     
  3224                           ; BSR set to: 0
  3225                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 670:             
      +                          l = 0.0;
  3226   001F98  0E00               	movlw	0
  3227   001F9A  6F94               	movwf	efgtoa@l& (0+255),b
  3228   001F9C  0E00               	movlw	0
  3229   001F9E  6F95               	movwf	(efgtoa@l+1)& (0+255),b
  3230   001FA0  0E00               	movlw	0
  3231   001FA2  6F96               	movwf	(efgtoa@l+2)& (0+255),b
  3232   001FA4  0E00               	movlw	0
  3233   001FA6  6F97               	movwf	(efgtoa@l+3)& (0+255),b
  3234   001FA8                     l5677:
  3235                           
  3236                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 675:     h = g.f 
      +                          + l;
  3237   001FA8  C099  F005         	movff	efgtoa@g,___fladd@b
  3238   001FAC  C09A  F006         	movff	efgtoa@g+1,___fladd@b+1
  3239   001FB0  C09B  F007         	movff	efgtoa@g+2,___fladd@b+2
  3240   001FB4  C09C  F008         	movff	efgtoa@g+3,___fladd@b+3
  3241   001FB8  C094  F009         	movff	efgtoa@l,___fladd@a
  3242   001FBC  C095  F00A         	movff	efgtoa@l+1,___fladd@a+1
  3243   001FC0  C096  F00B         	movff	efgtoa@l+2,___fladd@a+2
  3244   001FC4  C097  F00C         	movff	efgtoa@l+3,___fladd@a+3
  3245   001FC8  ECBC  F011         	call	___fladd	;wreg free
  3246   001FCC  C005  F090         	movff	?___fladd,efgtoa@h
  3247   001FD0  C006  F091         	movff	?___fladd+1,efgtoa@h+1
  3248   001FD4  C007  F092         	movff	?___fladd+2,efgtoa@h+2
  3249   001FD8  C008  F093         	movff	?___fladd+3,efgtoa@h+3
  3250   001FDC                     
  3251                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 677:  if (h >= (o
      +                          u.f*10.0)) {
  3252   001FDC  C090  F036         	movff	efgtoa@h,___flge@ff1
  3253   001FE0  C091  F037         	movff	efgtoa@h+1,___flge@ff1+1
  3254   001FE4  C092  F038         	movff	efgtoa@h+2,___flge@ff1+2
  3255   001FE8  C093  F039         	movff	efgtoa@h+3,___flge@ff1+3
  3256   001FEC  0E00               	movlw	0
  3257   001FEE  6E19               	movwf	___flmul@a^0,c
  3258   001FF0  0E00               	movlw	0
  3259   001FF2  6E1A               	movwf	(___flmul@a+1)^0,c
  3260   001FF4  0E20               	movlw	32
  3261   001FF6  6E1B               	movwf	(___flmul@a+2)^0,c
  3262   001FF8  0E41               	movlw	65
  3263   001FFA  6E1C               	movwf	(___flmul@a+3)^0,c
  3264   001FFC  C08A  F015         	movff	efgtoa@ou,___flmul@b
  3265   002000  C08B  F016         	movff	efgtoa@ou+1,___flmul@b+1
  3266   002004  C08C  F017         	movff	efgtoa@ou+2,___flmul@b+2
  3267   002008  C08D  F018         	movff	efgtoa@ou+3,___flmul@b+3
  3268   00200C  EC1C  F014         	call	___flmul	;wreg free
  3269   002010  C015  F03A         	movff	?___flmul,___flge@ff2
  3270   002014  C016  F03B         	movff	?___flmul+1,___flge@ff2+1
  3271   002018  C017  F03C         	movff	?___flmul+2,___flge@ff2+2
  3272   00201C  C018  F03D         	movff	?___flmul+3,___flge@ff2+3
  3273   002020  EC91  F023         	call	___flge	;wreg free
  3274   002024  A0D8               	btfss	status,0,c
  3275   002026  EF17  F010         	goto	u6171
  3276   00202A  EF19  F010         	goto	u6170
  3277   00202E                     u6171:
  3278   00202E  EF42  F010         	goto	l5689
  3279   002032                     u6170:
  3280   002032                     
  3281                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 678:   e++;
  3282   002032  0100               	movlb	0	; () banked
  3283   002034  4B86               	infsnz	efgtoa@e& (0+255),f,b
  3284   002036  2B87               	incf	(efgtoa@e+1)& (0+255),f,b
  3285   002038                     
  3286                           ; BSR set to: 0
  3287                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 679:   ou.f *= 10
      +                          .0;
  3288   002038  C08A  F015         	movff	efgtoa@ou,___flmul@b
  3289   00203C  C08B  F016         	movff	efgtoa@ou+1,___flmul@b+1
  3290   002040  C08C  F017         	movff	efgtoa@ou+2,___flmul@b+2
  3291   002044  C08D  F018         	movff	efgtoa@ou+3,___flmul@b+3
  3292   002048  0E00               	movlw	0
  3293   00204A  6E19               	movwf	___flmul@a^0,c
  3294   00204C  0E00               	movlw	0
  3295   00204E  6E1A               	movwf	(___flmul@a+1)^0,c
  3296   002050  0E20               	movlw	32
  3297   002052  6E1B               	movwf	(___flmul@a+2)^0,c
  3298   002054  0E41               	movlw	65
  3299   002056  6E1C               	movwf	(___flmul@a+3)^0,c
  3300   002058  EC1C  F014         	call	___flmul	;wreg free
  3301   00205C  C015  F08A         	movff	?___flmul,efgtoa@ou
  3302   002060  C016  F08B         	movff	?___flmul+1,efgtoa@ou+1
  3303   002064  C017  F08C         	movff	?___flmul+2,efgtoa@ou+2
  3304   002068  C018  F08D         	movff	?___flmul+3,efgtoa@ou+3
  3305   00206C                     
  3306                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 681:   if (nmode 
      +                          == 'f') {
  3307   00206C  0E66               	movlw	102
  3308   00206E  0100               	movlb	0	; () banked
  3309   002070  1981               	xorwf	efgtoa@nmode& (0+255),w,b
  3310   002072  A4D8               	btfss	status,2,c
  3311   002074  EF3E  F010         	goto	u6181
  3312   002078  EF40  F010         	goto	u6180
  3313   00207C                     u6181:
  3314   00207C  EF42  F010         	goto	l5689
  3315   002080                     u6180:
  3316   002080                     
  3317                           ; BSR set to: 0
  3318                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 683:    m++;
  3319   002080  4B84               	infsnz	efgtoa@m& (0+255),f,b
  3320   002082  2B85               	incf	(efgtoa@m+1)& (0+255),f,b
  3321   002084                     l5689:
  3322                           
  3323                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 689:     u = ou;
  3324   002084  C08A  F09F         	movff	efgtoa@ou,efgtoa@u
  3325   002088  C08B  F0A0         	movff	efgtoa@ou+1,efgtoa@u+1
  3326   00208C  C08C  F0A1         	movff	efgtoa@ou+2,efgtoa@u+2
  3327   002090  C08D  F0A2         	movff	efgtoa@ou+3,efgtoa@u+3
  3328   002094                     
  3329                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 693:  ne = e;
  3330   002094  C086  F077         	movff	efgtoa@e,efgtoa@ne
  3331   002098  C087  F078         	movff	efgtoa@e+1,efgtoa@ne+1
  3332   00209C                     
  3333                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 695:     pp = 0;
  3334   00209C  0E00               	movlw	0
  3335   00209E  0100               	movlb	0	; () banked
  3336   0020A0  6F7F               	movwf	efgtoa@pp& (0+255),b
  3337   0020A2                     
  3338                           ; BSR set to: 0
  3339                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 696:     t = 0;
  3340   0020A2  0E00               	movlw	0
  3341   0020A4  6F7C               	movwf	(efgtoa@t+1)& (0+255),b
  3342   0020A6  0E00               	movlw	0
  3343   0020A8  6F7B               	movwf	efgtoa@t& (0+255),b
  3344   0020AA                     
  3345                           ; BSR set to: 0
  3346                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 697:     i = 0;
  3347   0020AA  0E00               	movlw	0
  3348   0020AC  6F8F               	movwf	(efgtoa@i+1)& (0+255),b
  3349   0020AE  0E00               	movlw	0
  3350   0020B0  6F8E               	movwf	efgtoa@i& (0+255),b
  3351                           
  3352                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 698:     while ((
      +                          i < m) && (n < (80 - 5))) {
  3353   0020B2  EF40  F011         	goto	l5739
  3354   0020B6                     l5699:
  3355                           
  3356                           ; BSR set to: 0
  3357                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 699:         l = 
      +                          floorf(h/u.f);
  3358   0020B6  C090  F036         	movff	efgtoa@h,___fldiv@b
  3359   0020BA  C091  F037         	movff	efgtoa@h+1,___fldiv@b+1
  3360   0020BE  C092  F038         	movff	efgtoa@h+2,___fldiv@b+2
  3361   0020C2  C093  F039         	movff	efgtoa@h+3,___fldiv@b+3
  3362   0020C6  C09F  F03A         	movff	efgtoa@u,___fldiv@a
  3363   0020CA  C0A0  F03B         	movff	efgtoa@u+1,___fldiv@a+1
  3364   0020CE  C0A1  F03C         	movff	efgtoa@u+2,___fldiv@a+2
  3365   0020D2  C0A2  F03D         	movff	efgtoa@u+3,___fldiv@a+3
  3366   0020D6  EC31  F016         	call	___fldiv	;wreg free
  3367   0020DA  C036  F04F         	movff	?___fldiv,floorf@x
  3368   0020DE  C037  F050         	movff	?___fldiv+1,floorf@x+1
  3369   0020E2  C038  F051         	movff	?___fldiv+2,floorf@x+2
  3370   0020E6  C039  F052         	movff	?___fldiv+3,floorf@x+3
  3371   0020EA  ECE3  F01B         	call	_floorf	;wreg free
  3372   0020EE  C04F  F094         	movff	?_floorf,efgtoa@l
  3373   0020F2  C050  F095         	movff	?_floorf+1,efgtoa@l+1
  3374   0020F6  C051  F096         	movff	?_floorf+2,efgtoa@l+2
  3375   0020FA  C052  F097         	movff	?_floorf+3,efgtoa@l+3
  3376                           
  3377                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 700:         d = 
      +                          (int)l > 9 ? 9 : (int)l;
  3378   0020FE  C094  F005         	movff	efgtoa@l,___fltol@f1
  3379   002102  C095  F006         	movff	efgtoa@l+1,___fltol@f1+1
  3380   002106  C096  F007         	movff	efgtoa@l+2,___fltol@f1+2
  3381   00210A  C097  F008         	movff	efgtoa@l+3,___fltol@f1+3
  3382   00210E  EC0E  F023         	call	___fltol	;wreg free
  3383   002112  BE06               	btfsc	(?___fltol+1)^0,7,c
  3384   002114  EF97  F010         	goto	u6190
  3385   002118  5006               	movf	(?___fltol+1)^0,w,c
  3386   00211A  E107               	bnz	u6191
  3387   00211C  0E0A               	movlw	10
  3388   00211E  5C05               	subwf	?___fltol^0,w,c
  3389   002120  B0D8               	btfsc	status,0,c
  3390   002122  EF95  F010         	goto	u6191
  3391   002126  EF97  F010         	goto	u6190
  3392   00212A                     u6191:
  3393   00212A  EFA7  F010         	goto	l5703
  3394   00212E                     u6190:
  3395   00212E  C094  F005         	movff	efgtoa@l,___fltol@f1
  3396   002132  C095  F006         	movff	efgtoa@l+1,___fltol@f1+1
  3397   002136  C096  F007         	movff	efgtoa@l+2,___fltol@f1+2
  3398   00213A  C097  F008         	movff	efgtoa@l+3,___fltol@f1+3
  3399   00213E  EC0E  F023         	call	___fltol	;wreg free
  3400   002142  C005  F082         	movff	?___fltol,efgtoa@d
  3401   002146  C006  F083         	movff	?___fltol+1,efgtoa@d+1
  3402   00214A  EFAC  F010         	goto	l1275
  3403   00214E                     l5703:
  3404   00214E  0E00               	movlw	0
  3405   002150  0100               	movlb	0	; () banked
  3406   002152  6F83               	movwf	(efgtoa@d+1)& (0+255),b
  3407   002154  0E09               	movlw	9
  3408   002156  6F82               	movwf	efgtoa@d& (0+255),b
  3409   002158                     l1275:
  3410                           
  3411                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 711:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 712:             if (!pp &
      +                          & (ne < 0)) {
  3412   002158  0100               	movlb	0	; () banked
  3413   00215A  517F               	movf	efgtoa@pp& (0+255),w,b
  3414   00215C  A4D8               	btfss	status,2,c
  3415   00215E  EFB3  F010         	goto	u6201
  3416   002162  EFB5  F010         	goto	u6200
  3417   002166                     u6201:
  3418   002166  EFDD  F010         	goto	l5723
  3419   00216A                     u6200:
  3420   00216A                     
  3421                           ; BSR set to: 0
  3422   00216A  BF78               	btfsc	(efgtoa@ne+1)& (0+255),7,b
  3423   00216C  EFBC  F010         	goto	u6210
  3424   002170  EFBA  F010         	goto	u6211
  3425   002174                     u6211:
  3426   002174  EFDD  F010         	goto	l5723
  3427   002178                     u6210:
  3428   002178                     
  3429                           ; BSR set to: 0
  3430                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 713:             
      +                              dbuf[n++] = '.';
  3431   002178  0E3C               	movlw	low _dbuf
  3432   00217A  259D               	addwf	efgtoa@n& (0+255),w,b
  3433   00217C  6ED9               	movwf	fsr2l,c
  3434   00217E  0E01               	movlw	high _dbuf
  3435   002180  219E               	addwfc	(efgtoa@n+1)& (0+255),w,b
  3436   002182  6EDA               	movwf	fsr2h,c
  3437   002184  0E2E               	movlw	46
  3438   002186  6EDF               	movwf	indf2,c
  3439   002188                     
  3440                           ; BSR set to: 0
  3441   002188  4B9D               	infsnz	efgtoa@n& (0+255),f,b
  3442   00218A  2B9E               	incf	(efgtoa@n+1)& (0+255),f,b
  3443   00218C                     
  3444                           ; BSR set to: 0
  3445                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 714:             
      +                              --w;
  3446   00218C  0788               	decf	efgtoa@w& (0+255),f,b
  3447   00218E  A0D8               	btfss	status,0,c
  3448   002190  0789               	decf	(efgtoa@w+1)& (0+255),f,b
  3449   002192                     
  3450                           ; BSR set to: 0
  3451                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 715:             
      +                              pp = 1;
  3452   002192  0E01               	movlw	1
  3453   002194  6F7F               	movwf	efgtoa@pp& (0+255),b
  3454   002196  EFDD  F010         	goto	l5723
  3455   00219A                     l5715:
  3456                           
  3457                           ; BSR set to: 0
  3458                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 718:             
      +                              dbuf[n++] = '0';
  3459   00219A  0E3C               	movlw	low _dbuf
  3460   00219C  259D               	addwf	efgtoa@n& (0+255),w,b
  3461   00219E  6ED9               	movwf	fsr2l,c
  3462   0021A0  0E01               	movlw	high _dbuf
  3463   0021A2  219E               	addwfc	(efgtoa@n+1)& (0+255),w,b
  3464   0021A4  6EDA               	movwf	fsr2h,c
  3465   0021A6  0E30               	movlw	48
  3466   0021A8  6EDF               	movwf	indf2,c
  3467   0021AA                     
  3468                           ; BSR set to: 0
  3469   0021AA  4B9D               	infsnz	efgtoa@n& (0+255),f,b
  3470   0021AC  2B9E               	incf	(efgtoa@n+1)& (0+255),f,b
  3471   0021AE                     
  3472                           ; BSR set to: 0
  3473                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 719:             
      +                              --w;
  3474   0021AE  0788               	decf	efgtoa@w& (0+255),f,b
  3475   0021B0  A0D8               	btfss	status,0,c
  3476   0021B2  0789               	decf	(efgtoa@w+1)& (0+255),f,b
  3477   0021B4                     
  3478                           ; BSR set to: 0
  3479                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 720:             
      +                              --t;
  3480   0021B4  077B               	decf	efgtoa@t& (0+255),f,b
  3481   0021B6  A0D8               	btfss	status,0,c
  3482   0021B8  077C               	decf	(efgtoa@t+1)& (0+255),f,b
  3483   0021BA                     l5723:
  3484                           
  3485                           ; BSR set to: 0
  3486                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 717:             
      +                          while (t) {
  3487   0021BA  517B               	movf	efgtoa@t& (0+255),w,b
  3488   0021BC  117C               	iorwf	(efgtoa@t+1)& (0+255),w,b
  3489   0021BE  A4D8               	btfss	status,2,c
  3490   0021C0  EFE4  F010         	goto	u6221
  3491   0021C4  EFE6  F010         	goto	u6220
  3492   0021C8                     u6221:
  3493   0021C8  EFCD  F010         	goto	l5715
  3494   0021CC                     u6220:
  3495   0021CC                     
  3496                           ; BSR set to: 0
  3497                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 722:             
      +                          dbuf[n++] = (char)((int)'0' + d);
  3498   0021CC  0E3C               	movlw	low _dbuf
  3499   0021CE  259D               	addwf	efgtoa@n& (0+255),w,b
  3500   0021D0  6ED9               	movwf	fsr2l,c
  3501   0021D2  0E01               	movlw	high _dbuf
  3502   0021D4  219E               	addwfc	(efgtoa@n+1)& (0+255),w,b
  3503   0021D6  6EDA               	movwf	fsr2h,c
  3504   0021D8  5182               	movf	efgtoa@d& (0+255),w,b
  3505   0021DA  0F30               	addlw	48
  3506   0021DC  6EDF               	movwf	indf2,c
  3507   0021DE                     
  3508                           ; BSR set to: 0
  3509   0021DE  4B9D               	infsnz	efgtoa@n& (0+255),f,b
  3510   0021E0  2B9E               	incf	(efgtoa@n+1)& (0+255),f,b
  3511   0021E2                     
  3512                           ; BSR set to: 0
  3513                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 723:             
      +                          --w;
  3514   0021E2  0788               	decf	efgtoa@w& (0+255),f,b
  3515   0021E4  A0D8               	btfss	status,0,c
  3516   0021E6  0789               	decf	(efgtoa@w+1)& (0+255),f,b
  3517   0021E8                     
  3518                           ; BSR set to: 0
  3519                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 724:         };C:
      +                          \Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 725:         h -= l*
      +                          u.f;
  3520   0021E8  C090  F02E         	movff	efgtoa@h,___flsub@b
  3521   0021EC  C091  F02F         	movff	efgtoa@h+1,___flsub@b+1
  3522   0021F0  C092  F030         	movff	efgtoa@h+2,___flsub@b+2
  3523   0021F4  C093  F031         	movff	efgtoa@h+3,___flsub@b+3
  3524   0021F8  C094  F019         	movff	efgtoa@l,___flmul@a
  3525   0021FC  C095  F01A         	movff	efgtoa@l+1,___flmul@a+1
  3526   002200  C096  F01B         	movff	efgtoa@l+2,___flmul@a+2
  3527   002204  C097  F01C         	movff	efgtoa@l+3,___flmul@a+3
  3528   002208  C09F  F015         	movff	efgtoa@u,___flmul@b
  3529   00220C  C0A0  F016         	movff	efgtoa@u+1,___flmul@b+1
  3530   002210  C0A1  F017         	movff	efgtoa@u+2,___flmul@b+2
  3531   002214  C0A2  F018         	movff	efgtoa@u+3,___flmul@b+3
  3532   002218  EC1C  F014         	call	___flmul	;wreg free
  3533   00221C  C015  F032         	movff	?___flmul,___flsub@a
  3534   002220  C016  F033         	movff	?___flmul+1,___flsub@a+1
  3535   002224  C017  F034         	movff	?___flmul+2,___flsub@a+2
  3536   002228  C018  F035         	movff	?___flmul+3,___flsub@a+3
  3537   00222C  EC3F  F02A         	call	___flsub	;wreg free
  3538   002230  C02E  F090         	movff	?___flsub,efgtoa@h
  3539   002234  C02F  F091         	movff	?___flsub+1,efgtoa@h+1
  3540   002238  C030  F092         	movff	?___flsub+2,efgtoa@h+2
  3541   00223C  C031  F093         	movff	?___flsub+3,efgtoa@h+3
  3542   002240                     
  3543                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 726:         u.f 
      +                          = u.f/10.0;
  3544   002240  C09F  F036         	movff	efgtoa@u,___fldiv@b
  3545   002244  C0A0  F037         	movff	efgtoa@u+1,___fldiv@b+1
  3546   002248  C0A1  F038         	movff	efgtoa@u+2,___fldiv@b+2
  3547   00224C  C0A2  F039         	movff	efgtoa@u+3,___fldiv@b+3
  3548   002250  0E00               	movlw	0
  3549   002252  6E3A               	movwf	___fldiv@a^0,c
  3550   002254  0E00               	movlw	0
  3551   002256  6E3B               	movwf	(___fldiv@a+1)^0,c
  3552   002258  0E20               	movlw	32
  3553   00225A  6E3C               	movwf	(___fldiv@a+2)^0,c
  3554   00225C  0E41               	movlw	65
  3555   00225E  6E3D               	movwf	(___fldiv@a+3)^0,c
  3556   002260  EC31  F016         	call	___fldiv	;wreg free
  3557   002264  C036  F09F         	movff	?___fldiv,efgtoa@u
  3558   002268  C037  F0A0         	movff	?___fldiv+1,efgtoa@u+1
  3559   00226C  C038  F0A1         	movff	?___fldiv+2,efgtoa@u+2
  3560   002270  C039  F0A2         	movff	?___fldiv+3,efgtoa@u+3
  3561   002274                     
  3562                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 727:         --ne
      +                          ;
  3563   002274  0100               	movlb	0	; () banked
  3564   002276  0777               	decf	efgtoa@ne& (0+255),f,b
  3565   002278  A0D8               	btfss	status,0,c
  3566   00227A  0778               	decf	(efgtoa@ne+1)& (0+255),f,b
  3567   00227C                     
  3568                           ; BSR set to: 0
  3569                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 728:         ++i;
  3570   00227C  4B8E               	infsnz	efgtoa@i& (0+255),f,b
  3571   00227E  2B8F               	incf	(efgtoa@i+1)& (0+255),f,b
  3572   002280                     l5739:
  3573                           
  3574                           ; BSR set to: 0
  3575                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 698:     while ((
      +                          i < m) && (n < (80 - 5))) {
  3576   002280  5184               	movf	efgtoa@m& (0+255),w,b
  3577   002282  5D8E               	subwf	efgtoa@i& (0+255),w,b
  3578   002284  518F               	movf	(efgtoa@i+1)& (0+255),w,b
  3579   002286  0A80               	xorlw	128
  3580   002288  6E53               	movwf	??_efgtoa^0,c
  3581   00228A  5185               	movf	(efgtoa@m+1)& (0+255),w,b
  3582   00228C  0A80               	xorlw	128
  3583   00228E  5853               	subwfb	??_efgtoa^0,w,c
  3584   002290  B0D8               	btfsc	status,0,c
  3585   002292  EF4D  F011         	goto	u6231
  3586   002296  EF4F  F011         	goto	u6230
  3587   00229A                     u6231:
  3588   00229A  EF5D  F011         	goto	l5743
  3589   00229E                     u6230:
  3590   00229E                     
  3591                           ; BSR set to: 0
  3592   00229E  BF9E               	btfsc	(efgtoa@n+1)& (0+255),7,b
  3593   0022A0  EF5B  F011         	goto	u6241
  3594   0022A4  519E               	movf	(efgtoa@n+1)& (0+255),w,b
  3595   0022A6  E109               	bnz	u6240
  3596   0022A8  0E4B               	movlw	75
  3597   0022AA  5D9D               	subwf	efgtoa@n& (0+255),w,b
  3598   0022AC  A0D8               	btfss	status,0,c
  3599   0022AE  EF5B  F011         	goto	u6241
  3600   0022B2  EF5D  F011         	goto	u6240
  3601   0022B6                     u6241:
  3602   0022B6  EF5B  F010         	goto	l5699
  3603   0022BA                     u6240:
  3604   0022BA                     l5743:
  3605                           
  3606                           ; BSR set to: 0
  3607                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 735:  i = sizeof(
      +                          dbuf) - 1;
  3608   0022BA  0E00               	movlw	0
  3609   0022BC  6F8F               	movwf	(efgtoa@i+1)& (0+255),b
  3610   0022BE  0E4F               	movlw	79
  3611   0022C0  6F8E               	movwf	efgtoa@i& (0+255),b
  3612   0022C2                     
  3613                           ; BSR set to: 0
  3614                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 736:     dbuf[i] 
      +                          = '\0';
  3615   0022C2  0E3C               	movlw	low _dbuf
  3616   0022C4  258E               	addwf	efgtoa@i& (0+255),w,b
  3617   0022C6  6ED9               	movwf	fsr2l,c
  3618   0022C8  0E01               	movlw	high _dbuf
  3619   0022CA  218F               	addwfc	(efgtoa@i+1)& (0+255),w,b
  3620   0022CC  6EDA               	movwf	fsr2h,c
  3621   0022CE  0E00               	movlw	0
  3622   0022D0  6EDF               	movwf	indf2,c
  3623   0022D2                     
  3624                           ; BSR set to: 0
  3625                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 767:  memcpy(&dbu
      +                          f[i-n], &dbuf[0], (size_t)n);
  3626   0022D2  0E3C               	movlw	low _dbuf
  3627   0022D4  6E53               	movwf	??_efgtoa^0,c
  3628   0022D6  0E01               	movlw	high _dbuf
  3629   0022D8  6E54               	movwf	(??_efgtoa+1)^0,c
  3630   0022DA  519D               	movf	efgtoa@n& (0+255),w,b
  3631   0022DC  5E53               	subwf	??_efgtoa^0,f,c
  3632   0022DE  519E               	movf	(efgtoa@n+1)& (0+255),w,b
  3633   0022E0  5A54               	subwfb	(??_efgtoa+1)^0,f,c
  3634   0022E2  518E               	movf	efgtoa@i& (0+255),w,b
  3635   0022E4  2453               	addwf	??_efgtoa^0,w,c
  3636   0022E6  6E05               	movwf	memcpy@d1^0,c
  3637   0022E8  518F               	movf	(efgtoa@i+1)& (0+255),w,b
  3638   0022EA  2054               	addwfc	(??_efgtoa+1)^0,w,c
  3639   0022EC  6E06               	movwf	(memcpy@d1+1)^0,c
  3640   0022EE  0E3C               	movlw	low _dbuf
  3641   0022F0  6E07               	movwf	memcpy@s1^0,c
  3642   0022F2  0E01               	movlw	high _dbuf
  3643   0022F4  6E08               	movwf	(memcpy@s1+1)^0,c
  3644   0022F6  C09D  F009         	movff	efgtoa@n,memcpy@n
  3645   0022FA  C09E  F00A         	movff	efgtoa@n+1,memcpy@n+1
  3646   0022FE  EC52  F029         	call	_memcpy	;wreg free
  3647   002302                     
  3648                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 768:  n = i-n;
  3649   002302  0100               	movlb	0	; () banked
  3650   002304  519D               	movf	efgtoa@n& (0+255),w,b
  3651   002306  5D8E               	subwf	efgtoa@i& (0+255),w,b
  3652   002308  6F9D               	movwf	efgtoa@n& (0+255),b
  3653   00230A  519E               	movf	(efgtoa@n+1)& (0+255),w,b
  3654   00230C  598F               	subwfb	(efgtoa@i+1)& (0+255),w,b
  3655   00230E  6F9E               	movwf	(efgtoa@n+1)& (0+255),b
  3656   002310                     
  3657                           ; BSR set to: 0
  3658                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 769:  i = sign ==
      +                           0 ? 0 : 1;
  3659   002310  5198               	movf	efgtoa@sign& (0+255),w,b
  3660   002312  A4D8               	btfss	status,2,c
  3661   002314  EF8E  F011         	goto	u6251
  3662   002318  EF91  F011         	goto	u6250
  3663   00231C                     u6251:
  3664   00231C  0E01               	movlw	1
  3665   00231E  EF92  F011         	goto	u6260
  3666   002322                     u6250:
  3667   002322  0E00               	movlw	0
  3668   002324                     u6260:
  3669   002324  6F8E               	movwf	efgtoa@i& (0+255),b
  3670   002326  6B8F               	clrf	(efgtoa@i+1)& (0+255),b
  3671   002328                     
  3672                           ; BSR set to: 0
  3673                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 780:  if (sign) {
  3674   002328  5198               	movf	efgtoa@sign& (0+255),w,b
  3675   00232A  B4D8               	btfsc	status,2,c
  3676   00232C  EF9A  F011         	goto	u6271
  3677   002330  EF9C  F011         	goto	u6270
  3678   002334                     u6271:
  3679   002334  EFA7  F011         	goto	l5757
  3680   002338                     u6270:
  3681   002338                     
  3682                           ; BSR set to: 0
  3683                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 781:   dbuf[--n] 
      +                          = sign;
  3684   002338  079D               	decf	efgtoa@n& (0+255),f,b
  3685   00233A  A0D8               	btfss	status,0,c
  3686   00233C  079E               	decf	(efgtoa@n+1)& (0+255),f,b
  3687   00233E  0E3C               	movlw	low _dbuf
  3688   002340  259D               	addwf	efgtoa@n& (0+255),w,b
  3689   002342  6ED9               	movwf	fsr2l,c
  3690   002344  0E01               	movlw	high _dbuf
  3691   002346  219E               	addwfc	(efgtoa@n+1)& (0+255),w,b
  3692   002348  6EDA               	movwf	fsr2h,c
  3693   00234A  C098  FFDF         	movff	efgtoa@sign,indf2
  3694   00234E                     l5757:
  3695                           
  3696                           ; BSR set to: 0
  3697                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 783:  w -= i;
  3698   00234E  518E               	movf	efgtoa@i& (0+255),w,b
  3699   002350  5F88               	subwf	efgtoa@w& (0+255),f,b
  3700   002352  518F               	movf	(efgtoa@i+1)& (0+255),w,b
  3701   002354  5B89               	subwfb	(efgtoa@w+1)& (0+255),f,b
  3702   002356                     
  3703                           ; BSR set to: 0
  3704                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 786:     return (
      +                          void) pad(fp, &dbuf[n], w);
  3705   002356  C070  F015         	movff	efgtoa@fp,pad@fp
  3706   00235A  C071  F016         	movff	efgtoa@fp+1,pad@fp+1
  3707   00235E  0E3C               	movlw	low _dbuf
  3708   002360  259D               	addwf	efgtoa@n& (0+255),w,b
  3709   002362  6E17               	movwf	pad@buf^0,c
  3710   002364  0E01               	movlw	high _dbuf
  3711   002366  219E               	addwfc	(efgtoa@n+1)& (0+255),w,b
  3712   002368  6E18               	movwf	(pad@buf+1)^0,c
  3713   00236A  C088  F019         	movff	efgtoa@w,pad@p
  3714   00236E  C089  F01A         	movff	efgtoa@w+1,pad@p+1
  3715   002372  EC25  F028         	call	_pad	;wreg free
  3716   002376                     l1242:
  3717   002376  0012               	return		;funcret
  3718   002378                     __end_of_efgtoa:
  3719                           	callstack 0
  3720                           
  3721 ;; *************** function _strcpy *****************
  3722 ;; Defined at:
  3723 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\strcpy.c"
  3724 ;; Parameters:    Size  Location     Type
  3725 ;;  dest            2    4[COMRAM] PTR unsigned char 
  3726 ;;		 -> dbuf(80), 
  3727 ;;  src             2    6[COMRAM] PTR const unsigned char 
  3728 ;;		 -> STR_5(4), STR_2(4), 
  3729 ;; Auto vars:     Size  Location     Type
  3730 ;;  d               2   10[COMRAM] PTR unsigned char 
  3731 ;;		 -> dbuf(80), 
  3732 ;;  s               2    8[COMRAM] PTR const unsigned char 
  3733 ;;		 -> STR_5(4), STR_2(4), 
  3734 ;; Return value:  Size  Location     Type
  3735 ;;                  2    4[COMRAM] PTR unsigned char 
  3736 ;; Registers used:
  3737 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  3738 ;; Tracked objects:
  3739 ;;		On entry : 0/0
  3740 ;;		On exit  : 0/0
  3741 ;;		Unchanged: 0/0
  3742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3743 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3744 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3746 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3747 ;;Total ram usage:        8 bytes
  3748 ;; Hardware stack levels used: 1
  3749 ;; Hardware stack levels required when called: 2
  3750 ;; This function calls:
  3751 ;;		Nothing
  3752 ;; This function is called by:
  3753 ;;		_efgtoa
  3754 ;; This function uses a non-reentrant model
  3755 ;;
  3756                           
  3757                           	psect	text6
  3758   0054C4                     __ptext6:
  3759                           	callstack 0
  3760   0054C4                     _strcpy:
  3761                           	callstack 24
  3762   0054C4  C007  F009         	movff	strcpy@src,strcpy@s
  3763   0054C8  C008  F00A         	movff	strcpy@src+1,strcpy@s+1
  3764   0054CC  C005  F00B         	movff	strcpy@dest,strcpy@d
  3765   0054D0  C006  F00C         	movff	strcpy@dest+1,strcpy@d+1
  3766   0054D4                     l4227:
  3767   0054D4  C009  FFF6         	movff	strcpy@s,tblptrl
  3768   0054D8  C00A  FFF7         	movff	strcpy@s+1,tblptrh
  3769   0054DC  4A09               	infsnz	strcpy@s^0,f,c
  3770   0054DE  2A0A               	incf	(strcpy@s+1)^0,f,c
  3771   0054E0                     	if	0	;tblptru may be non-zero
  3772   0054E0                     	endif
  3773   0054E0                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3774   0054E0  0E00               	movlw	low (__mediumconst shr (0+16))
  3775   0054E2  6EF8               	movwf	tblptru,c
  3776   0054E4                     	endif
  3777   0054E4  C00B  FFD9         	movff	strcpy@d,fsr2l
  3778   0054E8  C00C  FFDA         	movff	strcpy@d+1,fsr2h
  3779   0054EC  4A0B               	infsnz	strcpy@d^0,f,c
  3780   0054EE  2A0C               	incf	(strcpy@d+1)^0,f,c
  3781   0054F0  0008               	tblrd		*
  3782   0054F2  CFF5 FFDF          	movff	tablat,indf2
  3783   0054F6  50DF               	movf	indf2,w,c
  3784   0054F8  A4D8               	btfss	status,2,c
  3785   0054FA  EF81  F02A         	goto	u4281
  3786   0054FE  EF83  F02A         	goto	u4280
  3787   005502                     u4281:
  3788   005502  EF6A  F02A         	goto	l4227
  3789   005506                     u4280:
  3790   005506  0012               	return		;funcret
  3791   005508                     __end_of_strcpy:
  3792                           	callstack 0
  3793                           
  3794 ;; *************** function _memcpy *****************
  3795 ;; Defined at:
  3796 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\memcpy.c"
  3797 ;; Parameters:    Size  Location     Type
  3798 ;;  d1              2    4[COMRAM] PTR void 
  3799 ;;		 -> dbuf(80), 
  3800 ;;  s1              2    6[COMRAM] PTR const void 
  3801 ;;		 -> dbuf(80), 
  3802 ;;  n               2    8[COMRAM] unsigned int 
  3803 ;; Auto vars:     Size  Location     Type
  3804 ;;  s               2   12[COMRAM] PTR const unsigned char 
  3805 ;;		 -> dbuf(80), 
  3806 ;;  d               2   10[COMRAM] PTR unsigned char 
  3807 ;;		 -> dbuf(80), 
  3808 ;;  tmp             1   14[COMRAM] unsigned char 
  3809 ;; Return value:  Size  Location     Type
  3810 ;;                  2    4[COMRAM] PTR void 
  3811 ;; Registers used:
  3812 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3813 ;; Tracked objects:
  3814 ;;		On entry : 0/0
  3815 ;;		On exit  : 0/0
  3816 ;;		Unchanged: 0/0
  3817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3818 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3819 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3821 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3822 ;;Total ram usage:       11 bytes
  3823 ;; Hardware stack levels used: 1
  3824 ;; Hardware stack levels required when called: 2
  3825 ;; This function calls:
  3826 ;;		Nothing
  3827 ;; This function is called by:
  3828 ;;		_efgtoa
  3829 ;; This function uses a non-reentrant model
  3830 ;;
  3831                           
  3832                           	psect	text7
  3833   0052A4                     __ptext7:
  3834                           	callstack 0
  3835   0052A4                     _memcpy:
  3836                           	callstack 24
  3837   0052A4  C007  F00D         	movff	memcpy@s1,memcpy@s
  3838   0052A8  C008  F00E         	movff	memcpy@s1+1,memcpy@s+1
  3839   0052AC  C005  F00B         	movff	memcpy@d1,memcpy@d
  3840   0052B0  C006  F00C         	movff	memcpy@d1+1,memcpy@d+1
  3841   0052B4  EF6C  F029         	goto	l4271
  3842   0052B8                     l4263:
  3843   0052B8  C00D  FFD9         	movff	memcpy@s,fsr2l
  3844   0052BC  C00E  FFDA         	movff	memcpy@s+1,fsr2h
  3845   0052C0  50DF               	movf	indf2,w,c
  3846   0052C2  6E0F               	movwf	memcpy@tmp^0,c
  3847   0052C4  4A0D               	infsnz	memcpy@s^0,f,c
  3848   0052C6  2A0E               	incf	(memcpy@s+1)^0,f,c
  3849   0052C8  C00B  FFD9         	movff	memcpy@d,fsr2l
  3850   0052CC  C00C  FFDA         	movff	memcpy@d+1,fsr2h
  3851   0052D0  C00F  FFDF         	movff	memcpy@tmp,indf2
  3852   0052D4  4A0B               	infsnz	memcpy@d^0,f,c
  3853   0052D6  2A0C               	incf	(memcpy@d+1)^0,f,c
  3854   0052D8                     l4271:
  3855   0052D8  0609               	decf	memcpy@n^0,f,c
  3856   0052DA  A0D8               	btfss	status,0,c
  3857   0052DC  060A               	decf	(memcpy@n+1)^0,f,c
  3858   0052DE  2809               	incf	memcpy@n^0,w,c
  3859   0052E0  E106               	bnz	u4401
  3860   0052E2  280A               	incf	(memcpy@n+1)^0,w,c
  3861   0052E4  A4D8               	btfss	status,2,c
  3862   0052E6  EF77  F029         	goto	u4401
  3863   0052EA  EF79  F029         	goto	u4400
  3864   0052EE                     u4401:
  3865   0052EE  EF5C  F029         	goto	l4263
  3866   0052F2                     u4400:
  3867   0052F2  0012               	return		;funcret
  3868   0052F4                     __end_of_memcpy:
  3869                           	callstack 0
  3870                           
  3871 ;; *************** function _labs *****************
  3872 ;; Defined at:
  3873 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\labs.c"
  3874 ;; Parameters:    Size  Location     Type
  3875 ;;  a               4    4[COMRAM] long 
  3876 ;; Auto vars:     Size  Location     Type
  3877 ;;		None
  3878 ;; Return value:  Size  Location     Type
  3879 ;;                  4    4[COMRAM] long 
  3880 ;; Registers used:
  3881 ;;		wreg, status,2, status,0
  3882 ;; Tracked objects:
  3883 ;;		On entry : 0/0
  3884 ;;		On exit  : 0/0
  3885 ;;		Unchanged: 0/0
  3886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3887 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3888 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3889 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3890 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3891 ;;Total ram usage:        8 bytes
  3892 ;; Hardware stack levels used: 1
  3893 ;; Hardware stack levels required when called: 2
  3894 ;; This function calls:
  3895 ;;		Nothing
  3896 ;; This function is called by:
  3897 ;;		_efgtoa
  3898 ;; This function uses a non-reentrant model
  3899 ;;
  3900                           
  3901                           	psect	text8
  3902   005138                     __ptext8:
  3903                           	callstack 0
  3904   005138                     _labs:
  3905                           	callstack 24
  3906   005138  BE08               	btfsc	(labs@a+3)^0,7,c
  3907   00513A  EFAB  F028         	goto	u4290
  3908   00513E  5008               	movf	(labs@a+3)^0,w,c
  3909   005140  1007               	iorwf	(labs@a+2)^0,w,c
  3910   005142  1006               	iorwf	(labs@a+1)^0,w,c
  3911   005144  E106               	bnz	u4291
  3912   005146  0405               	decf	labs@a^0,w,c
  3913   005148  B0D8               	btfsc	status,0,c
  3914   00514A  EFA9  F028         	goto	u4291
  3915   00514E  EFAB  F028         	goto	u4290
  3916   005152                     u4291:
  3917   005152  EFC6  F028         	goto	l1347
  3918   005156                     u4290:
  3919   005156  C005  F009         	movff	labs@a,??_labs
  3920   00515A  C006  F00A         	movff	labs@a+1,??_labs+1
  3921   00515E  C007  F00B         	movff	labs@a+2,??_labs+2
  3922   005162  C008  F00C         	movff	labs@a+3,??_labs+3
  3923   005166  1E09               	comf	??_labs^0,f,c
  3924   005168  1E0A               	comf	(??_labs+1)^0,f,c
  3925   00516A  1E0B               	comf	(??_labs+2)^0,f,c
  3926   00516C  1E0C               	comf	(??_labs+3)^0,f,c
  3927   00516E  2A09               	incf	??_labs^0,f,c
  3928   005170  0E00               	movlw	0
  3929   005172  220A               	addwfc	(??_labs+1)^0,f,c
  3930   005174  220B               	addwfc	(??_labs+2)^0,f,c
  3931   005176  220C               	addwfc	(??_labs+3)^0,f,c
  3932   005178  C009  F005         	movff	??_labs,?_labs
  3933   00517C  C00A  F006         	movff	??_labs+1,?_labs+1
  3934   005180  C00B  F007         	movff	??_labs+2,?_labs+2
  3935   005184  C00C  F008         	movff	??_labs+3,?_labs+3
  3936   005188  EFCE  F028         	goto	l1350
  3937   00518C                     l1347:
  3938   00518C  C005  F005         	movff	labs@a,?_labs
  3939   005190  C006  F006         	movff	labs@a+1,?_labs+1
  3940   005194  C007  F007         	movff	labs@a+2,?_labs+2
  3941   005198  C008  F008         	movff	labs@a+3,?_labs+3
  3942   00519C                     l1350:
  3943   00519C  0012               	return		;funcret
  3944   00519E                     __end_of_labs:
  3945                           	callstack 0
  3946                           
  3947 ;; *************** function _floorf *****************
  3948 ;; Defined at:
  3949 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\floorf.c"
  3950 ;; Parameters:    Size  Location     Type
  3951 ;;  x               4   78[COMRAM] float 
  3952 ;; Auto vars:     Size  Location     Type
  3953 ;;  u               4   12[BANK0 ] struct .
  3954 ;;  m               4    6[BANK0 ] unsigned long 
  3955 ;;  e               2   10[BANK0 ] int 
  3956 ;; Return value:  Size  Location     Type
  3957 ;;                  4   78[COMRAM] float 
  3958 ;; Registers used:
  3959 ;;		wreg, status,2, status,0
  3960 ;; Tracked objects:
  3961 ;;		On entry : 0/0
  3962 ;;		On exit  : 0/0
  3963 ;;		Unchanged: 0/0
  3964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3965 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3966 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3967 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3968 ;;      Totals:         4      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3969 ;;Total ram usage:       20 bytes
  3970 ;; Hardware stack levels used: 1
  3971 ;; Hardware stack levels required when called: 2
  3972 ;; This function calls:
  3973 ;;		Nothing
  3974 ;; This function is called by:
  3975 ;;		_efgtoa
  3976 ;; This function uses a non-reentrant model
  3977 ;;
  3978                           
  3979                           	psect	text9
  3980   0037C6                     __ptext9:
  3981                           	callstack 0
  3982   0037C6                     _floorf:
  3983                           	callstack 24
  3984   0037C6  C0EB  F06C         	movff	floorf@F526,floorf@u
  3985   0037CA  C0EC  F06D         	movff	floorf@F526+1,floorf@u+1
  3986   0037CE  C0ED  F06E         	movff	floorf@F526+2,floorf@u+2
  3987   0037D2  C0EE  F06F         	movff	floorf@F526+3,floorf@u+3
  3988   0037D6  C04F  F06C         	movff	floorf@x,floorf@u
  3989   0037DA  C050  F06D         	movff	floorf@x+1,floorf@u+1
  3990   0037DE  C051  F06E         	movff	floorf@x+2,floorf@u+2
  3991   0037E2  C052  F06F         	movff	floorf@x+3,floorf@u+3
  3992   0037E6  0E81               	movlw	129
  3993   0037E8  0100               	movlb	0	; () banked
  3994   0037EA  6F60               	movwf	??_floorf& (0+255),b
  3995   0037EC  0EFF               	movlw	255
  3996   0037EE  6F61               	movwf	(??_floorf+1)& (0+255),b
  3997   0037F0  C06C  F062         	movff	floorf@u,??_floorf+2
  3998   0037F4  C06D  F063         	movff	floorf@u+1,??_floorf+3
  3999   0037F8  C06E  F064         	movff	floorf@u+2,??_floorf+4
  4000   0037FC  C06F  F065         	movff	floorf@u+3,??_floorf+5
  4001   003800  0E18               	movlw	24
  4002   003802  EF08  F01C         	goto	u5860
  4003   003806                     u5865:
  4004   003806  90D8               	bcf	status,0,c
  4005   003808  3365               	rrcf	(??_floorf+5)& (0+255),f,b
  4006   00380A  3364               	rrcf	(??_floorf+4)& (0+255),f,b
  4007   00380C  3363               	rrcf	(??_floorf+3)& (0+255),f,b
  4008   00380E  3362               	rrcf	(??_floorf+2)& (0+255),f,b
  4009   003810                     u5860:
  4010   003810  2EE8               	decfsz	wreg,f,c
  4011   003812  EF03  F01C         	goto	u5865
  4012   003816  5162               	movf	(??_floorf+2)& (0+255),w,b
  4013   003818  2560               	addwf	??_floorf& (0+255),w,b
  4014   00381A  6F6A               	movwf	floorf@e& (0+255),b
  4015   00381C  0E00               	movlw	0
  4016   00381E  2161               	addwfc	(??_floorf+1)& (0+255),w,b
  4017   003820  6F6B               	movwf	(floorf@e+1)& (0+255),b
  4018   003822  BF6B               	btfsc	(floorf@e+1)& (0+255),7,b
  4019   003824  EF1D  F01C         	goto	u5871
  4020   003828  516B               	movf	(floorf@e+1)& (0+255),w,b
  4021   00382A  E109               	bnz	u5870
  4022   00382C  0E17               	movlw	23
  4023   00382E  5D6A               	subwf	floorf@e& (0+255),w,b
  4024   003830  A0D8               	btfss	status,0,c
  4025   003832  EF1D  F01C         	goto	u5871
  4026   003836  EF1F  F01C         	goto	u5870
  4027   00383A                     u5871:
  4028   00383A  EF29  F01C         	goto	l5519
  4029   00383E                     u5870:
  4030   00383E                     l5517:
  4031                           
  4032                           ; BSR set to: 0
  4033   00383E  C04F  F04F         	movff	floorf@x,?_floorf
  4034   003842  C050  F050         	movff	floorf@x+1,?_floorf+1
  4035   003846  C051  F051         	movff	floorf@x+2,?_floorf+2
  4036   00384A  C052  F052         	movff	floorf@x+3,?_floorf+3
  4037   00384E  EFED  F01C         	goto	l1336
  4038   003852                     l5519:
  4039                           
  4040                           ; BSR set to: 0
  4041   003852  BF6B               	btfsc	(floorf@e+1)& (0+255),7,b
  4042   003854  EF2E  F01C         	goto	u5881
  4043   003858  EF30  F01C         	goto	u5880
  4044   00385C                     u5881:
  4045   00385C  EFA1  F01C         	goto	l5529
  4046   003860                     u5880:
  4047   003860                     
  4048                           ; BSR set to: 0
  4049   003860  C06A  F060         	movff	floorf@e,??_floorf
  4050   003864  0EFF               	movlw	255
  4051   003866  6F61               	movwf	(??_floorf+1)& (0+255),b
  4052   003868  0EFF               	movlw	255
  4053   00386A  6F62               	movwf	(??_floorf+2)& (0+255),b
  4054   00386C  0E7F               	movlw	127
  4055   00386E  6F63               	movwf	(??_floorf+3)& (0+255),b
  4056   003870  0E00               	movlw	0
  4057   003872  6F64               	movwf	(??_floorf+4)& (0+255),b
  4058   003874                     u5895:
  4059   003874  6760               	tstfsz	??_floorf& (0+255),b
  4060   003876  EF3F  F01C         	goto	u5896
  4061   00387A  EF47  F01C         	goto	u5897
  4062   00387E                     u5896:
  4063   00387E  3564               	rlcf	(??_floorf+4)& (0+255),w,b
  4064   003880  3364               	rrcf	(??_floorf+4)& (0+255),f,b
  4065   003882  3363               	rrcf	(??_floorf+3)& (0+255),f,b
  4066   003884  3362               	rrcf	(??_floorf+2)& (0+255),f,b
  4067   003886  3361               	rrcf	(??_floorf+1)& (0+255),f,b
  4068   003888  2F60               	decfsz	??_floorf& (0+255),f,b
  4069   00388A  EF3A  F01C         	goto	u5895
  4070   00388E                     u5897:
  4071   00388E  C061  F066         	movff	??_floorf+1,floorf@m
  4072   003892  C062  F067         	movff	??_floorf+2,floorf@m+1
  4073   003896  C063  F068         	movff	??_floorf+3,floorf@m+2
  4074   00389A  C064  F069         	movff	??_floorf+4,floorf@m+3
  4075   00389E  0100               	movlb	0	; () banked
  4076   0038A0  5166               	movf	floorf@m& (0+255),w,b
  4077   0038A2  156C               	andwf	floorf@u& (0+255),w,b
  4078   0038A4  6F60               	movwf	??_floorf& (0+255),b
  4079   0038A6  5167               	movf	(floorf@m+1)& (0+255),w,b
  4080   0038A8  156D               	andwf	(floorf@u+1)& (0+255),w,b
  4081   0038AA  6F61               	movwf	(??_floorf+1)& (0+255),b
  4082   0038AC  5168               	movf	(floorf@m+2)& (0+255),w,b
  4083   0038AE  156E               	andwf	(floorf@u+2)& (0+255),w,b
  4084   0038B0  6F62               	movwf	(??_floorf+2)& (0+255),b
  4085   0038B2  5169               	movf	(floorf@m+3)& (0+255),w,b
  4086   0038B4  156F               	andwf	(floorf@u+3)& (0+255),w,b
  4087   0038B6  6F63               	movwf	(??_floorf+3)& (0+255),b
  4088   0038B8  5160               	movf	??_floorf& (0+255),w,b
  4089   0038BA  1161               	iorwf	(??_floorf+1)& (0+255),w,b
  4090   0038BC  1162               	iorwf	(??_floorf+2)& (0+255),w,b
  4091   0038BE  1163               	iorwf	(??_floorf+3)& (0+255),w,b
  4092   0038C0  A4D8               	btfss	status,2,c
  4093   0038C2  EF65  F01C         	goto	u5901
  4094   0038C6  EF67  F01C         	goto	u5900
  4095   0038CA                     u5901:
  4096   0038CA  EF69  F01C         	goto	l5525
  4097   0038CE                     u5900:
  4098   0038CE  EF1F  F01C         	goto	l5517
  4099   0038D2                     l5525:
  4100                           
  4101                           ; BSR set to: 0
  4102   0038D2  C06C  F060         	movff	floorf@u,??_floorf
  4103   0038D6  C06D  F061         	movff	floorf@u+1,??_floorf+1
  4104   0038DA  C06E  F062         	movff	floorf@u+2,??_floorf+2
  4105   0038DE  C06F  F063         	movff	floorf@u+3,??_floorf+3
  4106   0038E2  0E20               	movlw	32
  4107   0038E4  EF79  F01C         	goto	u5910
  4108   0038E8                     u5915:
  4109   0038E8  90D8               	bcf	status,0,c
  4110   0038EA  3363               	rrcf	(??_floorf+3)& (0+255),f,b
  4111   0038EC  3362               	rrcf	(??_floorf+2)& (0+255),f,b
  4112   0038EE  3361               	rrcf	(??_floorf+1)& (0+255),f,b
  4113   0038F0  3360               	rrcf	??_floorf& (0+255),f,b
  4114   0038F2                     u5910:
  4115   0038F2  2EE8               	decfsz	wreg,f,c
  4116   0038F4  EF74  F01C         	goto	u5915
  4117   0038F8  5160               	movf	??_floorf& (0+255),w,b
  4118   0038FA  1161               	iorwf	(??_floorf+1)& (0+255),w,b
  4119   0038FC  1162               	iorwf	(??_floorf+2)& (0+255),w,b
  4120   0038FE  1163               	iorwf	(??_floorf+3)& (0+255),w,b
  4121   003900  B4D8               	btfsc	status,2,c
  4122   003902  EF85  F01C         	goto	u5921
  4123   003906  EF87  F01C         	goto	u5920
  4124   00390A                     u5921:
  4125   00390A  EF8F  F01C         	goto	l1339
  4126   00390E                     u5920:
  4127   00390E                     
  4128                           ; BSR set to: 0
  4129   00390E  5166               	movf	floorf@m& (0+255),w,b
  4130   003910  276C               	addwf	floorf@u& (0+255),f,b
  4131   003912  5167               	movf	(floorf@m+1)& (0+255),w,b
  4132   003914  236D               	addwfc	(floorf@u+1)& (0+255),f,b
  4133   003916  5168               	movf	(floorf@m+2)& (0+255),w,b
  4134   003918  236E               	addwfc	(floorf@u+2)& (0+255),f,b
  4135   00391A  5169               	movf	(floorf@m+3)& (0+255),w,b
  4136   00391C  236F               	addwfc	(floorf@u+3)& (0+255),f,b
  4137   00391E                     l1339:
  4138                           
  4139                           ; BSR set to: 0
  4140   00391E  1D66               	comf	floorf@m& (0+255),w,b
  4141   003920  6F60               	movwf	??_floorf& (0+255),b
  4142   003922  1D67               	comf	(floorf@m+1)& (0+255),w,b
  4143   003924  6F61               	movwf	(??_floorf+1)& (0+255),b
  4144   003926  1D68               	comf	(floorf@m+2)& (0+255),w,b
  4145   003928  6F62               	movwf	(??_floorf+2)& (0+255),b
  4146   00392A  1D69               	comf	(floorf@m+3)& (0+255),w,b
  4147   00392C  6F63               	movwf	(??_floorf+3)& (0+255),b
  4148   00392E  5160               	movf	??_floorf& (0+255),w,b
  4149   003930  176C               	andwf	floorf@u& (0+255),f,b
  4150   003932  5161               	movf	(??_floorf+1)& (0+255),w,b
  4151   003934  176D               	andwf	(floorf@u+1)& (0+255),f,b
  4152   003936  5162               	movf	(??_floorf+2)& (0+255),w,b
  4153   003938  176E               	andwf	(floorf@u+2)& (0+255),f,b
  4154   00393A  5163               	movf	(??_floorf+3)& (0+255),w,b
  4155   00393C  176F               	andwf	(floorf@u+3)& (0+255),f,b
  4156   00393E  EFE5  F01C         	goto	l5537
  4157   003942                     l5529:
  4158                           
  4159                           ; BSR set to: 0
  4160   003942  C06C  F060         	movff	floorf@u,??_floorf
  4161   003946  C06D  F061         	movff	floorf@u+1,??_floorf+1
  4162   00394A  C06E  F062         	movff	floorf@u+2,??_floorf+2
  4163   00394E  C06F  F063         	movff	floorf@u+3,??_floorf+3
  4164   003952  0E20               	movlw	32
  4165   003954  EFB1  F01C         	goto	u5930
  4166   003958                     u5935:
  4167   003958  90D8               	bcf	status,0,c
  4168   00395A  3363               	rrcf	(??_floorf+3)& (0+255),f,b
  4169   00395C  3362               	rrcf	(??_floorf+2)& (0+255),f,b
  4170   00395E  3361               	rrcf	(??_floorf+1)& (0+255),f,b
  4171   003960  3360               	rrcf	??_floorf& (0+255),f,b
  4172   003962                     u5930:
  4173   003962  2EE8               	decfsz	wreg,f,c
  4174   003964  EFAC  F01C         	goto	u5935
  4175   003968  5160               	movf	??_floorf& (0+255),w,b
  4176   00396A  1161               	iorwf	(??_floorf+1)& (0+255),w,b
  4177   00396C  1162               	iorwf	(??_floorf+2)& (0+255),w,b
  4178   00396E  1163               	iorwf	(??_floorf+3)& (0+255),w,b
  4179   003970  A4D8               	btfss	status,2,c
  4180   003972  EFBD  F01C         	goto	u5941
  4181   003976  EFBF  F01C         	goto	u5940
  4182   00397A                     u5941:
  4183   00397A  EFC9  F01C         	goto	l5533
  4184   00397E                     u5940:
  4185   00397E                     
  4186                           ; BSR set to: 0
  4187   00397E  0E00               	movlw	0
  4188   003980  6F6C               	movwf	floorf@u& (0+255),b
  4189   003982  0E00               	movlw	0
  4190   003984  6F6D               	movwf	(floorf@u+1)& (0+255),b
  4191   003986  0E00               	movlw	0
  4192   003988  6F6E               	movwf	(floorf@u+2)& (0+255),b
  4193   00398A  0E00               	movlw	0
  4194   00398C  6F6F               	movwf	(floorf@u+3)& (0+255),b
  4195   00398E  EFE5  F01C         	goto	l5537
  4196   003992                     l5533:
  4197                           
  4198                           ; BSR set to: 0
  4199   003992  90D8               	bcf	status,0,c
  4200   003994  356C               	rlcf	floorf@u& (0+255),w,b
  4201   003996  6F60               	movwf	??_floorf& (0+255),b
  4202   003998  356D               	rlcf	(floorf@u+1)& (0+255),w,b
  4203   00399A  6F61               	movwf	(??_floorf+1)& (0+255),b
  4204   00399C  356E               	rlcf	(floorf@u+2)& (0+255),w,b
  4205   00399E  6F62               	movwf	(??_floorf+2)& (0+255),b
  4206   0039A0  356F               	rlcf	(floorf@u+3)& (0+255),w,b
  4207   0039A2  6F63               	movwf	(??_floorf+3)& (0+255),b
  4208   0039A4  5160               	movf	??_floorf& (0+255),w,b
  4209   0039A6  1161               	iorwf	(??_floorf+1)& (0+255),w,b
  4210   0039A8  1162               	iorwf	(??_floorf+2)& (0+255),w,b
  4211   0039AA  1163               	iorwf	(??_floorf+3)& (0+255),w,b
  4212   0039AC  B4D8               	btfsc	status,2,c
  4213   0039AE  EFDB  F01C         	goto	u5951
  4214   0039B2  EFDD  F01C         	goto	u5950
  4215   0039B6                     u5951:
  4216   0039B6  EFE5  F01C         	goto	l5537
  4217   0039BA                     u5950:
  4218   0039BA                     
  4219                           ; BSR set to: 0
  4220   0039BA  0E00               	movlw	0
  4221   0039BC  6F6C               	movwf	floorf@u& (0+255),b
  4222   0039BE  0E00               	movlw	0
  4223   0039C0  6F6D               	movwf	(floorf@u+1)& (0+255),b
  4224   0039C2  0E80               	movlw	128
  4225   0039C4  6F6E               	movwf	(floorf@u+2)& (0+255),b
  4226   0039C6  0EBF               	movlw	191
  4227   0039C8  6F6F               	movwf	(floorf@u+3)& (0+255),b
  4228   0039CA                     l5537:
  4229                           
  4230                           ; BSR set to: 0
  4231   0039CA  C06C  F04F         	movff	floorf@u,?_floorf
  4232   0039CE  C06D  F050         	movff	floorf@u+1,?_floorf+1
  4233   0039D2  C06E  F051         	movff	floorf@u+2,?_floorf+2
  4234   0039D6  C06F  F052         	movff	floorf@u+3,?_floorf+3
  4235   0039DA                     l1336:
  4236                           
  4237                           ; BSR set to: 0
  4238   0039DA  0012               	return		;funcret
  4239   0039DC                     __end_of_floorf:
  4240                           	callstack 0
  4241                           
  4242 ;; *************** function ___fpclassifyf *****************
  4243 ;; Defined at:
  4244 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\__fpclassifyf.c"
  4245 ;; Parameters:    Size  Location     Type
  4246 ;;  x               4    4[COMRAM] float 
  4247 ;; Auto vars:     Size  Location     Type
  4248 ;;  u               4   14[COMRAM] struct .
  4249 ;;  e               2   12[COMRAM] int 
  4250 ;; Return value:  Size  Location     Type
  4251 ;;                  2    4[COMRAM] int 
  4252 ;; Registers used:
  4253 ;;		wreg, status,2, status,0
  4254 ;; Tracked objects:
  4255 ;;		On entry : 0/0
  4256 ;;		On exit  : 0/0
  4257 ;;		Unchanged: 0/0
  4258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4259 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4260 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4261 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4262 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4263 ;;Total ram usage:       14 bytes
  4264 ;; Hardware stack levels used: 1
  4265 ;; Hardware stack levels required when called: 2
  4266 ;; This function calls:
  4267 ;;		Nothing
  4268 ;; This function is called by:
  4269 ;;		_efgtoa
  4270 ;; This function uses a non-reentrant model
  4271 ;;
  4272                           
  4273                           	psect	text10
  4274   004826                     __ptext10:
  4275                           	callstack 0
  4276   004826                     ___fpclassifyf:
  4277                           	callstack 24
  4278   004826  C0EF  F00F         	movff	___fpclassifyf@F465,___fpclassifyf@u
  4279   00482A  C0F0  F010         	movff	___fpclassifyf@F465+1,___fpclassifyf@u+1
  4280   00482E  C0F1  F011         	movff	___fpclassifyf@F465+2,___fpclassifyf@u+2
  4281   004832  C0F2  F012         	movff	___fpclassifyf@F465+3,___fpclassifyf@u+3
  4282   004836  C005  F00F         	movff	___fpclassifyf@x,___fpclassifyf@u
  4283   00483A  C006  F010         	movff	___fpclassifyf@x+1,___fpclassifyf@u+1
  4284   00483E  C007  F011         	movff	___fpclassifyf@x+2,___fpclassifyf@u+2
  4285   004842  C008  F012         	movff	___fpclassifyf@x+3,___fpclassifyf@u+3
  4286   004846  C00F  F009         	movff	___fpclassifyf@u,??___fpclassifyf
  4287   00484A  C010  F00A         	movff	___fpclassifyf@u+1,??___fpclassifyf+1
  4288   00484E  C011  F00B         	movff	___fpclassifyf@u+2,??___fpclassifyf+2
  4289   004852  C012  F00C         	movff	___fpclassifyf@u+3,??___fpclassifyf+3
  4290   004856  0E18               	movlw	24
  4291   004858  EF33  F024         	goto	u4210
  4292   00485C                     u4215:
  4293   00485C  90D8               	bcf	status,0,c
  4294   00485E  320C               	rrcf	(??___fpclassifyf+3)^0,f,c
  4295   004860  320B               	rrcf	(??___fpclassifyf+2)^0,f,c
  4296   004862  320A               	rrcf	(??___fpclassifyf+1)^0,f,c
  4297   004864  3209               	rrcf	??___fpclassifyf^0,f,c
  4298   004866                     u4210:
  4299   004866  2EE8               	decfsz	wreg,f,c
  4300   004868  EF2E  F024         	goto	u4215
  4301   00486C  5009               	movf	??___fpclassifyf^0,w,c
  4302   00486E  6E0D               	movwf	___fpclassifyf@e^0,c
  4303   004870  6A0E               	clrf	(___fpclassifyf@e+1)^0,c
  4304   004872  500D               	movf	___fpclassifyf@e^0,w,c
  4305   004874  100E               	iorwf	(___fpclassifyf@e+1)^0,w,c
  4306   004876  A4D8               	btfss	status,2,c
  4307   004878  EF40  F024         	goto	u4221
  4308   00487C  EF42  F024         	goto	u4220
  4309   004880                     u4221:
  4310   004880  EF62  F024         	goto	l4215
  4311   004884                     u4220:
  4312   004884  90D8               	bcf	status,0,c
  4313   004886  340F               	rlcf	___fpclassifyf@u^0,w,c
  4314   004888  6E09               	movwf	??___fpclassifyf^0,c
  4315   00488A  3410               	rlcf	(___fpclassifyf@u+1)^0,w,c
  4316   00488C  6E0A               	movwf	(??___fpclassifyf+1)^0,c
  4317   00488E  3411               	rlcf	(___fpclassifyf@u+2)^0,w,c
  4318   004890  6E0B               	movwf	(??___fpclassifyf+2)^0,c
  4319   004892  3412               	rlcf	(___fpclassifyf@u+3)^0,w,c
  4320   004894  6E0C               	movwf	(??___fpclassifyf+3)^0,c
  4321   004896  5009               	movf	??___fpclassifyf^0,w,c
  4322   004898  100A               	iorwf	(??___fpclassifyf+1)^0,w,c
  4323   00489A  100B               	iorwf	(??___fpclassifyf+2)^0,w,c
  4324   00489C  100C               	iorwf	(??___fpclassifyf+3)^0,w,c
  4325   00489E  A4D8               	btfss	status,2,c
  4326   0048A0  EF54  F024         	goto	u4231
  4327   0048A4  EF56  F024         	goto	u4230
  4328   0048A8                     u4231:
  4329   0048A8  EF5C  F024         	goto	l4211
  4330   0048AC                     u4230:
  4331   0048AC  0E00               	movlw	0
  4332   0048AE  6E06               	movwf	(?___fpclassifyf+1)^0,c
  4333   0048B0  0E02               	movlw	2
  4334   0048B2  6E05               	movwf	?___fpclassifyf^0,c
  4335   0048B4  EF91  F024         	goto	l1322
  4336   0048B8                     l4211:
  4337   0048B8  0E00               	movlw	0
  4338   0048BA  6E06               	movwf	(?___fpclassifyf+1)^0,c
  4339   0048BC  0E03               	movlw	3
  4340   0048BE  6E05               	movwf	?___fpclassifyf^0,c
  4341   0048C0  EF91  F024         	goto	l1322
  4342   0048C4                     l4215:
  4343   0048C4  280D               	incf	___fpclassifyf@e^0,w,c
  4344   0048C6  100E               	iorwf	(___fpclassifyf@e+1)^0,w,c
  4345   0048C8  A4D8               	btfss	status,2,c
  4346   0048CA  EF69  F024         	goto	u4241
  4347   0048CE  EF6B  F024         	goto	u4240
  4348   0048D2                     u4241:
  4349   0048D2  EF8D  F024         	goto	l4221
  4350   0048D6                     u4240:
  4351   0048D6  C00F  F009         	movff	___fpclassifyf@u,??___fpclassifyf
  4352   0048DA  C010  F00A         	movff	___fpclassifyf@u+1,??___fpclassifyf+1
  4353   0048DE  C011  F00B         	movff	___fpclassifyf@u+2,??___fpclassifyf+2
  4354   0048E2  C012  F00C         	movff	___fpclassifyf@u+3,??___fpclassifyf+3
  4355   0048E6  0E09               	movlw	9
  4356   0048E8                     u4255:
  4357   0048E8  90D8               	bcf	status,0,c
  4358   0048EA  3609               	rlcf	??___fpclassifyf^0,f,c
  4359   0048EC  360A               	rlcf	(??___fpclassifyf+1)^0,f,c
  4360   0048EE  360B               	rlcf	(??___fpclassifyf+2)^0,f,c
  4361   0048F0  360C               	rlcf	(??___fpclassifyf+3)^0,f,c
  4362   0048F2  2EE8               	decfsz	wreg,f,c
  4363   0048F4  EF74  F024         	goto	u4255
  4364   0048F8  5009               	movf	??___fpclassifyf^0,w,c
  4365   0048FA  100A               	iorwf	(??___fpclassifyf+1)^0,w,c
  4366   0048FC  100B               	iorwf	(??___fpclassifyf+2)^0,w,c
  4367   0048FE  100C               	iorwf	(??___fpclassifyf+3)^0,w,c
  4368   004900  B4D8               	btfsc	status,2,c
  4369   004902  EF85  F024         	goto	u4261
  4370   004906  EF88  F024         	goto	u4260
  4371   00490A                     u4261:
  4372   00490A  0E01               	movlw	1
  4373   00490C  EF89  F024         	goto	u4270
  4374   004910                     u4260:
  4375   004910  0E00               	movlw	0
  4376   004912                     u4270:
  4377   004912  6E05               	movwf	?___fpclassifyf^0,c
  4378   004914  6A06               	clrf	(?___fpclassifyf+1)^0,c
  4379   004916  EF91  F024         	goto	l1322
  4380   00491A                     l4221:
  4381   00491A  0E00               	movlw	0
  4382   00491C  6E06               	movwf	(?___fpclassifyf+1)^0,c
  4383   00491E  0E04               	movlw	4
  4384   004920  6E05               	movwf	?___fpclassifyf^0,c
  4385   004922                     l1322:
  4386   004922  0012               	return		;funcret
  4387   004924                     __end_of___fpclassifyf:
  4388                           	callstack 0
  4389                           
  4390 ;; *************** function ___fltol *****************
  4391 ;; Defined at:
  4392 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\fltol.c"
  4393 ;; Parameters:    Size  Location     Type
  4394 ;;  f1              4    4[COMRAM] int 
  4395 ;; Auto vars:     Size  Location     Type
  4396 ;;  exp1            1   13[COMRAM] unsigned char 
  4397 ;;  sign1           1   12[COMRAM] unsigned char 
  4398 ;; Return value:  Size  Location     Type
  4399 ;;                  4    4[COMRAM] long 
  4400 ;; Registers used:
  4401 ;;		wreg, status,2, status,0
  4402 ;; Tracked objects:
  4403 ;;		On entry : 0/0
  4404 ;;		On exit  : 0/0
  4405 ;;		Unchanged: 0/0
  4406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4407 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4408 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4409 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4410 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4411 ;;Total ram usage:       10 bytes
  4412 ;; Hardware stack levels used: 1
  4413 ;; Hardware stack levels required when called: 2
  4414 ;; This function calls:
  4415 ;;		Nothing
  4416 ;; This function is called by:
  4417 ;;		_turnLeft_90
  4418 ;;		_turnRight_90
  4419 ;;		_turn_180
  4420 ;;		_turnRight_135
  4421 ;;		_turnLeft_135
  4422 ;;		_efgtoa
  4423 ;;		_turnLeft
  4424 ;;		_turnRight
  4425 ;; This function uses a non-reentrant model
  4426 ;;
  4427                           
  4428                           	psect	text11
  4429   00461C                     __ptext11:
  4430                           	callstack 0
  4431   00461C                     ___fltol:
  4432                           	callstack 24
  4433   00461C  3407               	rlcf	(___fltol@f1+2)^0,w,c
  4434   00461E  3408               	rlcf	(___fltol@f1+3)^0,w,c
  4435   004620  6E0E               	movwf	___fltol@exp1^0,c
  4436   004622  500E               	movf	___fltol@exp1^0,w,c
  4437   004624  A4D8               	btfss	status,2,c
  4438   004626  EF17  F023         	goto	u4111
  4439   00462A  EF19  F023         	goto	u4110
  4440   00462E                     u4111:
  4441   00462E  EF23  F023         	goto	l4147
  4442   004632                     u4110:
  4443   004632                     l4143:
  4444   004632  0E00               	movlw	0
  4445   004634  6E05               	movwf	?___fltol^0,c
  4446   004636  0E00               	movlw	0
  4447   004638  6E06               	movwf	(?___fltol+1)^0,c
  4448   00463A  0E00               	movlw	0
  4449   00463C  6E07               	movwf	(?___fltol+2)^0,c
  4450   00463E  0E00               	movlw	0
  4451   004640  6E08               	movwf	(?___fltol+3)^0,c
  4452   004642  EF90  F023         	goto	l795
  4453   004646                     l4147:
  4454   004646  C005  F009         	movff	___fltol@f1,??___fltol
  4455   00464A  C006  F00A         	movff	___fltol@f1+1,??___fltol+1
  4456   00464E  C007  F00B         	movff	___fltol@f1+2,??___fltol+2
  4457   004652  C008  F00C         	movff	___fltol@f1+3,??___fltol+3
  4458   004656  0E20               	movlw	32
  4459   004658  EF33  F023         	goto	u4120
  4460   00465C                     u4125:
  4461   00465C  90D8               	bcf	status,0,c
  4462   00465E  320C               	rrcf	(??___fltol+3)^0,f,c
  4463   004660  320B               	rrcf	(??___fltol+2)^0,f,c
  4464   004662  320A               	rrcf	(??___fltol+1)^0,f,c
  4465   004664  3209               	rrcf	??___fltol^0,f,c
  4466   004666                     u4120:
  4467   004666  2EE8               	decfsz	wreg,f,c
  4468   004668  EF2E  F023         	goto	u4125
  4469   00466C  5009               	movf	??___fltol^0,w,c
  4470   00466E  6E0D               	movwf	___fltol@sign1^0,c
  4471   004670  8E07               	bsf	(___fltol@f1+2)^0,7,c
  4472   004672  0EFF               	movlw	255
  4473   004674  1605               	andwf	___fltol@f1^0,f,c
  4474   004676  0EFF               	movlw	255
  4475   004678  1606               	andwf	(___fltol@f1+1)^0,f,c
  4476   00467A  0EFF               	movlw	255
  4477   00467C  1607               	andwf	(___fltol@f1+2)^0,f,c
  4478   00467E  0E00               	movlw	0
  4479   004680  1608               	andwf	(___fltol@f1+3)^0,f,c
  4480   004682  0E96               	movlw	150
  4481   004684  5E0E               	subwf	___fltol@exp1^0,f,c
  4482   004686  BE0E               	btfsc	___fltol@exp1^0,7,c
  4483   004688  EF4A  F023         	goto	u4130
  4484   00468C  EF48  F023         	goto	u4131
  4485   004690                     u4131:
  4486   004690  EF60  F023         	goto	l4167
  4487   004694                     u4130:
  4488   004694  500E               	movf	___fltol@exp1^0,w,c
  4489   004696  0A80               	xorlw	128
  4490   004698  0F97               	addlw	151
  4491   00469A  B0D8               	btfsc	status,0,c
  4492   00469C  EF52  F023         	goto	u4141
  4493   0046A0  EF54  F023         	goto	u4140
  4494   0046A4                     u4141:
  4495   0046A4  EF56  F023         	goto	l4163
  4496   0046A8                     u4140:
  4497   0046A8  EF19  F023         	goto	l4143
  4498   0046AC                     l4163:
  4499   0046AC  90D8               	bcf	status,0,c
  4500   0046AE  3208               	rrcf	(___fltol@f1+3)^0,f,c
  4501   0046B0  3207               	rrcf	(___fltol@f1+2)^0,f,c
  4502   0046B2  3206               	rrcf	(___fltol@f1+1)^0,f,c
  4503   0046B4  3205               	rrcf	___fltol@f1^0,f,c
  4504   0046B6  3E0E               	incfsz	___fltol@exp1^0,f,c
  4505   0046B8  EF56  F023         	goto	l4163
  4506   0046BC  EF78  F023         	goto	l4177
  4507   0046C0                     l4167:
  4508   0046C0  0E1F               	movlw	31
  4509   0046C2  640E               	cpfsgt	___fltol@exp1^0,c
  4510   0046C4  EF66  F023         	goto	u4151
  4511   0046C8  EF68  F023         	goto	u4150
  4512   0046CC                     u4151:
  4513   0046CC  EF70  F023         	goto	l4175
  4514   0046D0                     u4150:
  4515   0046D0  EF19  F023         	goto	l4143
  4516   0046D4                     l4173:
  4517   0046D4  90D8               	bcf	status,0,c
  4518   0046D6  3605               	rlcf	___fltol@f1^0,f,c
  4519   0046D8  3606               	rlcf	(___fltol@f1+1)^0,f,c
  4520   0046DA  3607               	rlcf	(___fltol@f1+2)^0,f,c
  4521   0046DC  3608               	rlcf	(___fltol@f1+3)^0,f,c
  4522   0046DE  060E               	decf	___fltol@exp1^0,f,c
  4523   0046E0                     l4175:
  4524   0046E0  500E               	movf	___fltol@exp1^0,w,c
  4525   0046E2  A4D8               	btfss	status,2,c
  4526   0046E4  EF76  F023         	goto	u4161
  4527   0046E8  EF78  F023         	goto	u4160
  4528   0046EC                     u4161:
  4529   0046EC  EF6A  F023         	goto	l4173
  4530   0046F0                     u4160:
  4531   0046F0                     l4177:
  4532   0046F0  500D               	movf	___fltol@sign1^0,w,c
  4533   0046F2  B4D8               	btfsc	status,2,c
  4534   0046F4  EF7E  F023         	goto	u4171
  4535   0046F8  EF80  F023         	goto	u4170
  4536   0046FC                     u4171:
  4537   0046FC  EF88  F023         	goto	l4181
  4538   004700                     u4170:
  4539   004700  1E08               	comf	(___fltol@f1+3)^0,f,c
  4540   004702  1E07               	comf	(___fltol@f1+2)^0,f,c
  4541   004704  1E06               	comf	(___fltol@f1+1)^0,f,c
  4542   004706  6C05               	negf	___fltol@f1^0,c
  4543   004708  0E00               	movlw	0
  4544   00470A  2206               	addwfc	(___fltol@f1+1)^0,f,c
  4545   00470C  2207               	addwfc	(___fltol@f1+2)^0,f,c
  4546   00470E  2208               	addwfc	(___fltol@f1+3)^0,f,c
  4547   004710                     l4181:
  4548   004710  C005  F005         	movff	___fltol@f1,?___fltol
  4549   004714  C006  F006         	movff	___fltol@f1+1,?___fltol+1
  4550   004718  C007  F007         	movff	___fltol@f1+2,?___fltol+2
  4551   00471C  C008  F008         	movff	___fltol@f1+3,?___fltol+3
  4552   004720                     l795:
  4553   004720  0012               	return		;funcret
  4554   004722                     __end_of___fltol:
  4555                           	callstack 0
  4556                           
  4557 ;; *************** function ___flneg *****************
  4558 ;; Defined at:
  4559 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\flneg.c"
  4560 ;; Parameters:    Size  Location     Type
  4561 ;;  f1              4    4[COMRAM] long 
  4562 ;; Auto vars:     Size  Location     Type
  4563 ;;		None
  4564 ;; Return value:  Size  Location     Type
  4565 ;;                  4    4[COMRAM] long 
  4566 ;; Registers used:
  4567 ;;		wreg, status,2, status,0
  4568 ;; Tracked objects:
  4569 ;;		On entry : 0/0
  4570 ;;		On exit  : 0/0
  4571 ;;		Unchanged: 0/0
  4572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4573 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4574 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4576 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4577 ;;Total ram usage:        4 bytes
  4578 ;; Hardware stack levels used: 1
  4579 ;; Hardware stack levels required when called: 2
  4580 ;; This function calls:
  4581 ;;		Nothing
  4582 ;; This function is called by:
  4583 ;;		_efgtoa
  4584 ;; This function uses a non-reentrant model
  4585 ;;
  4586                           
  4587                           	psect	text12
  4588   0055CE                     __ptext12:
  4589                           	callstack 0
  4590   0055CE                     ___flneg:
  4591                           	callstack 24
  4592   0055CE  5005               	movf	___flneg@f1^0,w,c
  4593   0055D0  1006               	iorwf	(___flneg@f1+1)^0,w,c
  4594   0055D2  1007               	iorwf	(___flneg@f1+2)^0,w,c
  4595   0055D4  1008               	iorwf	(___flneg@f1+3)^0,w,c
  4596   0055D6  B4D8               	btfsc	status,2,c
  4597   0055D8  EFF0  F02A         	goto	u4101
  4598   0055DC  EFF2  F02A         	goto	u4100
  4599   0055E0                     u4101:
  4600   0055E0  EFFA  F02A         	goto	l4137
  4601   0055E4                     u4100:
  4602   0055E4  0E00               	movlw	0
  4603   0055E6  1A05               	xorwf	___flneg@f1^0,f,c
  4604   0055E8  0E00               	movlw	0
  4605   0055EA  1A06               	xorwf	(___flneg@f1+1)^0,f,c
  4606   0055EC  0E00               	movlw	0
  4607   0055EE  1A07               	xorwf	(___flneg@f1+2)^0,f,c
  4608   0055F0  0E80               	movlw	128
  4609   0055F2  1A08               	xorwf	(___flneg@f1+3)^0,f,c
  4610   0055F4                     l4137:
  4611   0055F4  C005  F005         	movff	___flneg@f1,?___flneg
  4612   0055F8  C006  F006         	movff	___flneg@f1+1,?___flneg+1
  4613   0055FC  C007  F007         	movff	___flneg@f1+2,?___flneg+2
  4614   005600  C008  F008         	movff	___flneg@f1+3,?___flneg+3
  4615   005604  0012               	return		;funcret
  4616   005606                     __end_of___flneg:
  4617                           	callstack 0
  4618                           
  4619 ;; *************** function ___fleq *****************
  4620 ;; Defined at:
  4621 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\fleq.c"
  4622 ;; Parameters:    Size  Location     Type
  4623 ;;  ff1             4    4[COMRAM] long 
  4624 ;;  ff2             4    8[COMRAM] long 
  4625 ;; Auto vars:     Size  Location     Type
  4626 ;;		None
  4627 ;; Return value:  Size  Location     Type
  4628 ;;		None               void
  4629 ;; Registers used:
  4630 ;;		wreg, status,2, status,0
  4631 ;; Tracked objects:
  4632 ;;		On entry : 0/0
  4633 ;;		On exit  : 0/0
  4634 ;;		Unchanged: 0/0
  4635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4636 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4638 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4639 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4640 ;;Total ram usage:       12 bytes
  4641 ;; Hardware stack levels used: 1
  4642 ;; Hardware stack levels required when called: 2
  4643 ;; This function calls:
  4644 ;;		Nothing
  4645 ;; This function is called by:
  4646 ;;		_efgtoa
  4647 ;; This function uses a non-reentrant model
  4648 ;;
  4649                           
  4650                           	psect	text13
  4651   004E0C                     __ptext13:
  4652                           	callstack 0
  4653   004E0C                     ___fleq:
  4654                           	callstack 24
  4655   004E0C  0E00               	movlw	0
  4656   004E0E  1405               	andwf	___fleq@ff1^0,w,c
  4657   004E10  6E0D               	movwf	??___fleq^0,c
  4658   004E12  0E00               	movlw	0
  4659   004E14  1406               	andwf	(___fleq@ff1+1)^0,w,c
  4660   004E16  6E0E               	movwf	(??___fleq+1)^0,c
  4661   004E18  0E80               	movlw	128
  4662   004E1A  1407               	andwf	(___fleq@ff1+2)^0,w,c
  4663   004E1C  6E0F               	movwf	(??___fleq+2)^0,c
  4664   004E1E  0E7F               	movlw	127
  4665   004E20  1408               	andwf	(___fleq@ff1+3)^0,w,c
  4666   004E22  6E10               	movwf	(??___fleq+3)^0,c
  4667   004E24  500D               	movf	??___fleq^0,w,c
  4668   004E26  100E               	iorwf	(??___fleq+1)^0,w,c
  4669   004E28  100F               	iorwf	(??___fleq+2)^0,w,c
  4670   004E2A  1010               	iorwf	(??___fleq+3)^0,w,c
  4671   004E2C  A4D8               	btfss	status,2,c
  4672   004E2E  EF1B  F027         	goto	u4021
  4673   004E32  EF1D  F027         	goto	u4020
  4674   004E36                     u4021:
  4675   004E36  EF25  F027         	goto	l4099
  4676   004E3A                     u4020:
  4677   004E3A  0E00               	movlw	0
  4678   004E3C  6E05               	movwf	___fleq@ff1^0,c
  4679   004E3E  0E00               	movlw	0
  4680   004E40  6E06               	movwf	(___fleq@ff1+1)^0,c
  4681   004E42  0E00               	movlw	0
  4682   004E44  6E07               	movwf	(___fleq@ff1+2)^0,c
  4683   004E46  0E00               	movlw	0
  4684   004E48  6E08               	movwf	(___fleq@ff1+3)^0,c
  4685   004E4A                     l4099:
  4686   004E4A  0E00               	movlw	0
  4687   004E4C  1409               	andwf	___fleq@ff2^0,w,c
  4688   004E4E  6E0D               	movwf	??___fleq^0,c
  4689   004E50  0E00               	movlw	0
  4690   004E52  140A               	andwf	(___fleq@ff2+1)^0,w,c
  4691   004E54  6E0E               	movwf	(??___fleq+1)^0,c
  4692   004E56  0E80               	movlw	128
  4693   004E58  140B               	andwf	(___fleq@ff2+2)^0,w,c
  4694   004E5A  6E0F               	movwf	(??___fleq+2)^0,c
  4695   004E5C  0E7F               	movlw	127
  4696   004E5E  140C               	andwf	(___fleq@ff2+3)^0,w,c
  4697   004E60  6E10               	movwf	(??___fleq+3)^0,c
  4698   004E62  500D               	movf	??___fleq^0,w,c
  4699   004E64  100E               	iorwf	(??___fleq+1)^0,w,c
  4700   004E66  100F               	iorwf	(??___fleq+2)^0,w,c
  4701   004E68  1010               	iorwf	(??___fleq+3)^0,w,c
  4702   004E6A  A4D8               	btfss	status,2,c
  4703   004E6C  EF3A  F027         	goto	u4031
  4704   004E70  EF3C  F027         	goto	u4030
  4705   004E74                     u4031:
  4706   004E74  EF44  F027         	goto	l4103
  4707   004E78                     u4030:
  4708   004E78  0E00               	movlw	0
  4709   004E7A  6E09               	movwf	___fleq@ff2^0,c
  4710   004E7C  0E00               	movlw	0
  4711   004E7E  6E0A               	movwf	(___fleq@ff2+1)^0,c
  4712   004E80  0E00               	movlw	0
  4713   004E82  6E0B               	movwf	(___fleq@ff2+2)^0,c
  4714   004E84  0E00               	movlw	0
  4715   004E86  6E0C               	movwf	(___fleq@ff2+3)^0,c
  4716   004E88                     l4103:
  4717   004E88  5009               	movf	___fleq@ff2^0,w,c
  4718   004E8A  1805               	xorwf	___fleq@ff1^0,w,c
  4719   004E8C  E10F               	bnz	u4040
  4720   004E8E  500A               	movf	(___fleq@ff2+1)^0,w,c
  4721   004E90  1806               	xorwf	(___fleq@ff1+1)^0,w,c
  4722   004E92  E10C               	bnz	u4040
  4723   004E94  500B               	movf	(___fleq@ff2+2)^0,w,c
  4724   004E96  1807               	xorwf	(___fleq@ff1+2)^0,w,c
  4725   004E98  E109               	bnz	u4040
  4726   004E9A  500C               	movf	(___fleq@ff2+3)^0,w,c
  4727   004E9C  1808               	xorwf	(___fleq@ff1+3)^0,w,c
  4728   004E9E  B4D8               	btfsc	status,2,c
  4729   004EA0  EF54  F027         	goto	u4041
  4730   004EA4  EF56  F027         	goto	u4040
  4731   004EA8                     u4041:
  4732   004EA8  EF59  F027         	goto	l4107
  4733   004EAC                     u4040:
  4734   004EAC  90D8               	bcf	status,0,c
  4735   004EAE  EF5A  F027         	goto	l757
  4736   004EB2                     l4107:
  4737   004EB2  80D8               	bsf	status,0,c
  4738   004EB4                     l757:
  4739   004EB4  0012               	return		;funcret
  4740   004EB6                     __end_of___fleq:
  4741                           	callstack 0
  4742                           
  4743 ;; *************** function _dtoa *****************
  4744 ;; Defined at:
  4745 ;;		line 443 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  4746 ;; Parameters:    Size  Location     Type
  4747 ;;  fp              2   31[COMRAM] PTR struct _IO_FILE
  4748 ;;		 -> sprintf@f(11), 
  4749 ;;  d               8   33[COMRAM] long long 
  4750 ;; Auto vars:     Size  Location     Type
  4751 ;;  n               8   55[COMRAM] long long 
  4752 ;;  i               2   63[COMRAM] int 
  4753 ;;  w               2   53[COMRAM] int 
  4754 ;;  p               2   51[COMRAM] int 
  4755 ;;  s               1   65[COMRAM] unsigned char 
  4756 ;; Return value:  Size  Location     Type
  4757 ;;                  1    wreg      void 
  4758 ;; Registers used:
  4759 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4760 ;; Tracked objects:
  4761 ;;		On entry : 0/0
  4762 ;;		On exit  : 0/0
  4763 ;;		Unchanged: 0/0
  4764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4765 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4766 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4767 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4768 ;;      Totals:        35       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4769 ;;Total ram usage:       35 bytes
  4770 ;; Hardware stack levels used: 1
  4771 ;; Hardware stack levels required when called: 6
  4772 ;; This function calls:
  4773 ;;		___aodiv
  4774 ;;		___aomod
  4775 ;;		_abs
  4776 ;;		_pad
  4777 ;; This function is called by:
  4778 ;;		_vfpfcnvrt
  4779 ;; This function uses a non-reentrant model
  4780 ;;
  4781                           
  4782                           	psect	text14
  4783   003302                     __ptext14:
  4784                           	callstack 0
  4785   003302                     _dtoa:
  4786                           	callstack 21
  4787   003302                     
  4788                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 443: static void 
      +                          dtoa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\
      +                          doprnt.c: 444: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          45:  char s;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 446: 
      +                              int i, p, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          47:     long long n;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 450:     n = d;
  4789   003302  C022  F038         	movff	dtoa@d,dtoa@n
  4790   003306  C023  F039         	movff	dtoa@d+1,dtoa@n+1
  4791   00330A  C024  F03A         	movff	dtoa@d+2,dtoa@n+2
  4792   00330E  C025  F03B         	movff	dtoa@d+3,dtoa@n+3
  4793   003312  C026  F03C         	movff	dtoa@d+4,dtoa@n+4
  4794   003316  C027  F03D         	movff	dtoa@d+5,dtoa@n+5
  4795   00331A  C028  F03E         	movff	dtoa@d+6,dtoa@n+6
  4796   00331E  C029  F03F         	movff	dtoa@d+7,dtoa@n+7
  4797   003322                     
  4798                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 451:     s = n < 
      +                          0 ? 1 : 0;
  4799   003322  BE3F               	btfsc	(dtoa@n+7)^0,7,c
  4800   003324  EF96  F019         	goto	u4511
  4801   003328  EF99  F019         	goto	u4510
  4802   00332C                     u4511:
  4803   00332C  0E01               	movlw	1
  4804   00332E  EF9A  F019         	goto	u4520
  4805   003332                     u4510:
  4806   003332  0E00               	movlw	0
  4807   003334                     u4520:
  4808   003334  6E42               	movwf	dtoa@s^0,c
  4809   003336                     
  4810                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 452:     if (s) {
  4811   003336  5042               	movf	dtoa@s^0,w,c
  4812   003338  B4D8               	btfsc	status,2,c
  4813   00333A  EFA1  F019         	goto	u4531
  4814   00333E  EFA3  F019         	goto	u4530
  4815   003342                     u4531:
  4816   003342  EFB3  F019         	goto	l4347
  4817   003346                     u4530:
  4818   003346                     
  4819                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 453:         n = 
      +                          -n;
  4820   003346  1E3F               	comf	(dtoa@n+7)^0,f,c
  4821   003348  1E3E               	comf	(dtoa@n+6)^0,f,c
  4822   00334A  1E3D               	comf	(dtoa@n+5)^0,f,c
  4823   00334C  1E3C               	comf	(dtoa@n+4)^0,f,c
  4824   00334E  1E3B               	comf	(dtoa@n+3)^0,f,c
  4825   003350  1E3A               	comf	(dtoa@n+2)^0,f,c
  4826   003352  1E39               	comf	(dtoa@n+1)^0,f,c
  4827   003354  6C38               	negf	dtoa@n^0,c
  4828   003356  0E00               	movlw	0
  4829   003358  2239               	addwfc	(dtoa@n+1)^0,f,c
  4830   00335A  223A               	addwfc	(dtoa@n+2)^0,f,c
  4831   00335C  223B               	addwfc	(dtoa@n+3)^0,f,c
  4832   00335E  223C               	addwfc	(dtoa@n+4)^0,f,c
  4833   003360  223D               	addwfc	(dtoa@n+5)^0,f,c
  4834   003362  223E               	addwfc	(dtoa@n+6)^0,f,c
  4835   003364  223F               	addwfc	(dtoa@n+7)^0,f,c
  4836   003366                     l4347:
  4837                           
  4838                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 462:     p = (0 <
      +                           prec) ? prec : 1;
  4839   003366  0100               	movlb	0	; () banked
  4840   003368  BFF6               	btfsc	(_prec+1)& (0+255),7,b
  4841   00336A  EFC1  F019         	goto	u4540
  4842   00336E  51F6               	movf	(_prec+1)& (0+255),w,b
  4843   003370  E106               	bnz	u4541
  4844   003372  05F5               	decf	_prec& (0+255),w,b
  4845   003374  B0D8               	btfsc	status,0,c
  4846   003376  EFBF  F019         	goto	u4541
  4847   00337A  EFC1  F019         	goto	u4540
  4848   00337E                     u4541:
  4849   00337E  EFC7  F019         	goto	l1217
  4850   003382                     u4540:
  4851   003382                     
  4852                           ; BSR set to: 0
  4853   003382  0E00               	movlw	0
  4854   003384  6E35               	movwf	(dtoa@p+1)^0,c
  4855   003386  0E01               	movlw	1
  4856   003388  6E34               	movwf	dtoa@p^0,c
  4857   00338A  EFCB  F019         	goto	l1219
  4858   00338E                     l1217:
  4859                           
  4860                           ; BSR set to: 0
  4861   00338E  C0F5  F034         	movff	_prec,dtoa@p
  4862   003392  C0F6  F035         	movff	_prec+1,dtoa@p+1
  4863   003396                     l1219:
  4864                           
  4865                           ; BSR set to: 0
  4866                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 463:     w = widt
      +                          h;
  4867   003396  C0F3  F036         	movff	_width,dtoa@w
  4868   00339A  C0F4  F037         	movff	_width+1,dtoa@w+1
  4869   00339E                     
  4870                           ; BSR set to: 0
  4871                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 464:     if (s
  4872   00339E  5042               	movf	dtoa@s^0,w,c
  4873   0033A0  B4D8               	btfsc	status,2,c
  4874   0033A2  EFD5  F019         	goto	u4551
  4875   0033A6  EFD7  F019         	goto	u4550
  4876   0033AA                     u4551:
  4877   0033AA  EFEE  F019         	goto	l1220
  4878   0033AE                     u4550:
  4879   0033AE                     
  4880                           ; BSR set to: 0
  4881                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 468:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 469:         --w;
  4882   0033AE  0636               	decf	dtoa@w^0,f,c
  4883   0033B0  A0D8               	btfss	status,0,c
  4884   0033B2  0637               	decf	(dtoa@w+1)^0,f,c
  4885   0033B4                     
  4886                           ; BSR set to: 0
  4887                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 470:   s = s ? '-
      +                          ' : '+';
  4888   0033B4  5042               	movf	dtoa@s^0,w,c
  4889   0033B6  A4D8               	btfss	status,2,c
  4890   0033B8  EFE0  F019         	goto	u4561
  4891   0033BC  EFE2  F019         	goto	u4560
  4892   0033C0                     u4561:
  4893   0033C0  EFE8  F019         	goto	l4359
  4894   0033C4                     u4560:
  4895   0033C4                     
  4896                           ; BSR set to: 0
  4897   0033C4  0E00               	movlw	0
  4898   0033C6  6E33               	movwf	(_dtoa$2694+1)^0,c
  4899   0033C8  0E2B               	movlw	43
  4900   0033CA  6E32               	movwf	_dtoa$2694^0,c
  4901   0033CC  EFEC  F019         	goto	l4361
  4902   0033D0                     l4359:
  4903                           
  4904                           ; BSR set to: 0
  4905   0033D0  0E00               	movlw	0
  4906   0033D2  6E33               	movwf	(_dtoa$2694+1)^0,c
  4907   0033D4  0E2D               	movlw	45
  4908   0033D6  6E32               	movwf	_dtoa$2694^0,c
  4909   0033D8                     l4361:
  4910                           
  4911                           ; BSR set to: 0
  4912   0033D8  C032  F042         	movff	_dtoa$2694,dtoa@s
  4913   0033DC                     l1220:
  4914                           
  4915                           ; BSR set to: 0
  4916                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 480:     i = size
      +                          of(dbuf) - 1;
  4917   0033DC  0E00               	movlw	0
  4918   0033DE  6E41               	movwf	(dtoa@i+1)^0,c
  4919   0033E0  0E4F               	movlw	79
  4920   0033E2  6E40               	movwf	dtoa@i^0,c
  4921   0033E4                     
  4922                           ; BSR set to: 0
  4923                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 481:     dbuf[i] 
      +                          = '\0';
  4924   0033E4  0E00               	movlw	0
  4925   0033E6  0101               	movlb	1	; () banked
  4926   0033E8  6F8B               	movwf	(_dbuf+79)& (0+255),b
  4927                           
  4928                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  4929   0033EA  EF73  F01A         	goto	l4375
  4930   0033EE                     l4365:
  4931                           
  4932                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 486:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 487:         --i;
  4933   0033EE  0640               	decf	dtoa@i^0,f,c
  4934   0033F0  A0D8               	btfss	status,0,c
  4935   0033F2  0641               	decf	(dtoa@i+1)^0,f,c
  4936   0033F4                     
  4937                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 488:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  4938   0033F4  0E3C               	movlw	low _dbuf
  4939   0033F6  2440               	addwf	dtoa@i^0,w,c
  4940   0033F8  6ED9               	movwf	fsr2l,c
  4941   0033FA  0E01               	movlw	high _dbuf
  4942   0033FC  2041               	addwfc	(dtoa@i+1)^0,w,c
  4943   0033FE  6EDA               	movwf	fsr2h,c
  4944   003400  C038  F005         	movff	dtoa@n,___aomod@dividend
  4945   003404  C039  F006         	movff	dtoa@n+1,___aomod@dividend+1
  4946   003408  C03A  F007         	movff	dtoa@n+2,___aomod@dividend+2
  4947   00340C  C03B  F008         	movff	dtoa@n+3,___aomod@dividend+3
  4948   003410  C03C  F009         	movff	dtoa@n+4,___aomod@dividend+4
  4949   003414  C03D  F00A         	movff	dtoa@n+5,___aomod@dividend+5
  4950   003418  C03E  F00B         	movff	dtoa@n+6,___aomod@dividend+6
  4951   00341C  C03F  F00C         	movff	dtoa@n+7,___aomod@dividend+7
  4952   003420  0E0A               	movlw	10
  4953   003422  6E0D               	movwf	___aomod@divisor^0,c
  4954   003424  0E00               	movlw	0
  4955   003426  6E0E               	movwf	(___aomod@divisor+1)^0,c
  4956   003428  0E00               	movlw	0
  4957   00342A  6E0F               	movwf	(___aomod@divisor+2)^0,c
  4958   00342C  0E00               	movlw	0
  4959   00342E  6E10               	movwf	(___aomod@divisor+3)^0,c
  4960   003430  0E00               	movlw	0
  4961   003432  6E11               	movwf	(___aomod@divisor+4)^0,c
  4962   003434  0E00               	movlw	0
  4963   003436  6E12               	movwf	(___aomod@divisor+5)^0,c
  4964   003438  0E00               	movlw	0
  4965   00343A  6E13               	movwf	(___aomod@divisor+6)^0,c
  4966   00343C  0E00               	movlw	0
  4967   00343E  6E14               	movwf	(___aomod@divisor+7)^0,c
  4968   003440  EC42  F01F         	call	___aomod	;wreg free
  4969   003444  C005  F02A         	movff	?___aomod,??_dtoa
  4970   003448  C006  F02B         	movff	?___aomod+1,??_dtoa+1
  4971   00344C  C007  F02C         	movff	?___aomod+2,??_dtoa+2
  4972   003450  C008  F02D         	movff	?___aomod+3,??_dtoa+3
  4973   003454  C009  F02E         	movff	?___aomod+4,??_dtoa+4
  4974   003458  C00A  F02F         	movff	?___aomod+5,??_dtoa+5
  4975   00345C  C00B  F030         	movff	?___aomod+6,??_dtoa+6
  4976   003460  C00C  F031         	movff	?___aomod+7,??_dtoa+7
  4977   003464  C02A  F017         	movff	??_dtoa,abs@a
  4978   003468  C02B  F018         	movff	??_dtoa+1,abs@a+1
  4979   00346C  ECC7  F02A         	call	_abs	;wreg free
  4980   003470  5017               	movf	?_abs^0,w,c
  4981   003472  0F30               	addlw	48
  4982   003474  6EDF               	movwf	indf2,c
  4983   003476                     
  4984                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 489:         --p;
  4985   003476  0634               	decf	dtoa@p^0,f,c
  4986   003478  A0D8               	btfss	status,0,c
  4987   00347A  0635               	decf	(dtoa@p+1)^0,f,c
  4988   00347C                     
  4989                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 490:         --w;
  4990   00347C  0636               	decf	dtoa@w^0,f,c
  4991   00347E  A0D8               	btfss	status,0,c
  4992   003480  0637               	decf	(dtoa@w+1)^0,f,c
  4993   003482                     
  4994                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 491:         n = 
      +                          n / 10;
  4995   003482  C038  F005         	movff	dtoa@n,___aodiv@dividend
  4996   003486  C039  F006         	movff	dtoa@n+1,___aodiv@dividend+1
  4997   00348A  C03A  F007         	movff	dtoa@n+2,___aodiv@dividend+2
  4998   00348E  C03B  F008         	movff	dtoa@n+3,___aodiv@dividend+3
  4999   003492  C03C  F009         	movff	dtoa@n+4,___aodiv@dividend+4
  5000   003496  C03D  F00A         	movff	dtoa@n+5,___aodiv@dividend+5
  5001   00349A  C03E  F00B         	movff	dtoa@n+6,___aodiv@dividend+6
  5002   00349E  C03F  F00C         	movff	dtoa@n+7,___aodiv@dividend+7
  5003   0034A2  0E0A               	movlw	10
  5004   0034A4  6E0D               	movwf	___aodiv@divisor^0,c
  5005   0034A6  0E00               	movlw	0
  5006   0034A8  6E0E               	movwf	(___aodiv@divisor+1)^0,c
  5007   0034AA  0E00               	movlw	0
  5008   0034AC  6E0F               	movwf	(___aodiv@divisor+2)^0,c
  5009   0034AE  0E00               	movlw	0
  5010   0034B0  6E10               	movwf	(___aodiv@divisor+3)^0,c
  5011   0034B2  0E00               	movlw	0
  5012   0034B4  6E11               	movwf	(___aodiv@divisor+4)^0,c
  5013   0034B6  0E00               	movlw	0
  5014   0034B8  6E12               	movwf	(___aodiv@divisor+5)^0,c
  5015   0034BA  0E00               	movlw	0
  5016   0034BC  6E13               	movwf	(___aodiv@divisor+6)^0,c
  5017   0034BE  0E00               	movlw	0
  5018   0034C0  6E14               	movwf	(___aodiv@divisor+7)^0,c
  5019   0034C2  ECC8  F01D         	call	___aodiv	;wreg free
  5020   0034C6  C005  F038         	movff	?___aodiv,dtoa@n
  5021   0034CA  C006  F039         	movff	?___aodiv+1,dtoa@n+1
  5022   0034CE  C007  F03A         	movff	?___aodiv+2,dtoa@n+2
  5023   0034D2  C008  F03B         	movff	?___aodiv+3,dtoa@n+3
  5024   0034D6  C009  F03C         	movff	?___aodiv+4,dtoa@n+4
  5025   0034DA  C00A  F03D         	movff	?___aodiv+5,dtoa@n+5
  5026   0034DE  C00B  F03E         	movff	?___aodiv+6,dtoa@n+6
  5027   0034E2  C00C  F03F         	movff	?___aodiv+7,dtoa@n+7
  5028   0034E6                     l4375:
  5029                           
  5030                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  5031   0034E6  BE41               	btfsc	(dtoa@i+1)^0,7,c
  5032   0034E8  EF7E  F01A         	goto	u4571
  5033   0034EC  5041               	movf	(dtoa@i+1)^0,w,c
  5034   0034EE  E108               	bnz	u4570
  5035   0034F0  0440               	decf	dtoa@i^0,w,c
  5036   0034F2  A0D8               	btfss	status,0,c
  5037   0034F4  EF7E  F01A         	goto	u4571
  5038   0034F8  EF80  F01A         	goto	u4570
  5039   0034FC                     u4571:
  5040   0034FC  EF9C  F01A         	goto	l4381
  5041   003500                     u4570:
  5042   003500  5038               	movf	dtoa@n^0,w,c
  5043   003502  1039               	iorwf	(dtoa@n+1)^0,w,c
  5044   003504  103A               	iorwf	(dtoa@n+2)^0,w,c
  5045   003506  103B               	iorwf	(dtoa@n+3)^0,w,c
  5046   003508  103C               	iorwf	(dtoa@n+4)^0,w,c
  5047   00350A  103D               	iorwf	(dtoa@n+5)^0,w,c
  5048   00350C  103E               	iorwf	(dtoa@n+6)^0,w,c
  5049   00350E  103F               	iorwf	(dtoa@n+7)^0,w,c
  5050   003510  A4D8               	btfss	status,2,c
  5051   003512  EF8D  F01A         	goto	u4581
  5052   003516  EF8F  F01A         	goto	u4580
  5053   00351A                     u4581:
  5054   00351A  EFF7  F019         	goto	l4365
  5055   00351E                     u4580:
  5056   00351E  BE35               	btfsc	(dtoa@p+1)^0,7,c
  5057   003520  EF9C  F01A         	goto	u4590
  5058   003524  5035               	movf	(dtoa@p+1)^0,w,c
  5059   003526  E106               	bnz	u4591
  5060   003528  0434               	decf	dtoa@p^0,w,c
  5061   00352A  B0D8               	btfsc	status,0,c
  5062   00352C  EF9A  F01A         	goto	u4591
  5063   003530  EF9C  F01A         	goto	u4590
  5064   003534                     u4591:
  5065   003534  EFF7  F019         	goto	l4365
  5066   003538                     u4590:
  5067   003538                     l4381:
  5068                           
  5069                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 495:     if (s !=
      +                           0) {
  5070   003538  5042               	movf	dtoa@s^0,w,c
  5071   00353A  B4D8               	btfsc	status,2,c
  5072   00353C  EFA2  F01A         	goto	u4601
  5073   003540  EFA4  F01A         	goto	u4600
  5074   003544                     u4601:
  5075   003544  EFAF  F01A         	goto	l4387
  5076   003548                     u4600:
  5077   003548                     
  5078                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 496:         --i;
  5079   003548  0640               	decf	dtoa@i^0,f,c
  5080   00354A  A0D8               	btfss	status,0,c
  5081   00354C  0641               	decf	(dtoa@i+1)^0,f,c
  5082   00354E                     
  5083                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 497:         dbuf
      +                          [i] = s;
  5084   00354E  0E3C               	movlw	low _dbuf
  5085   003550  2440               	addwf	dtoa@i^0,w,c
  5086   003552  6ED9               	movwf	fsr2l,c
  5087   003554  0E01               	movlw	high _dbuf
  5088   003556  2041               	addwfc	(dtoa@i+1)^0,w,c
  5089   003558  6EDA               	movwf	fsr2h,c
  5090   00355A  C042  FFDF         	movff	dtoa@s,indf2
  5091   00355E                     l4387:
  5092                           
  5093                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 501:     return (
      +                          void) pad(fp, &dbuf[i], w);
  5094   00355E  C020  F015         	movff	dtoa@fp,pad@fp
  5095   003562  C021  F016         	movff	dtoa@fp+1,pad@fp+1
  5096   003566  0E3C               	movlw	low _dbuf
  5097   003568  2440               	addwf	dtoa@i^0,w,c
  5098   00356A  6E17               	movwf	pad@buf^0,c
  5099   00356C  0E01               	movlw	high _dbuf
  5100   00356E  2041               	addwfc	(dtoa@i+1)^0,w,c
  5101   003570  6E18               	movwf	(pad@buf+1)^0,c
  5102   003572  C036  F019         	movff	dtoa@w,pad@p
  5103   003576  C037  F01A         	movff	dtoa@w+1,pad@p+1
  5104   00357A  EC25  F028         	call	_pad	;wreg free
  5105   00357E  0012               	return		;funcret
  5106   003580                     __end_of_dtoa:
  5107                           	callstack 0
  5108                           
  5109 ;; *************** function _pad *****************
  5110 ;; Defined at:
  5111 ;;		line 133 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  5112 ;; Parameters:    Size  Location     Type
  5113 ;;  fp              2   20[COMRAM] PTR struct _IO_FILE
  5114 ;;		 -> sprintf@f(11), 
  5115 ;;  buf             2   22[COMRAM] PTR unsigned char 
  5116 ;;		 -> dbuf(80), 
  5117 ;;  p               2   24[COMRAM] int 
  5118 ;; Auto vars:     Size  Location     Type
  5119 ;;  w               2   29[COMRAM] int 
  5120 ;;  i               2   27[COMRAM] int 
  5121 ;; Return value:  Size  Location     Type
  5122 ;;                  1    wreg      void 
  5123 ;; Registers used:
  5124 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5125 ;; Tracked objects:
  5126 ;;		On entry : 0/0
  5127 ;;		On exit  : 0/0
  5128 ;;		Unchanged: 0/0
  5129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5130 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5131 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5132 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5133 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5134 ;;Total ram usage:       11 bytes
  5135 ;; Hardware stack levels used: 1
  5136 ;; Hardware stack levels required when called: 5
  5137 ;; This function calls:
  5138 ;;		_fputc
  5139 ;;		_fputs
  5140 ;; This function is called by:
  5141 ;;		_dtoa
  5142 ;;		_efgtoa
  5143 ;; This function uses a non-reentrant model
  5144 ;;
  5145                           
  5146                           	psect	text15
  5147   00504A                     __ptext15:
  5148                           	callstack 0
  5149   00504A                     _pad:
  5150                           	callstack 21
  5151   00504A                     
  5152                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 133: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\com
      +                          mon\doprnt.c: 134: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 135:     int i, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt
      +                          .c: 145:     w = (p < 0) ? 0 : p;
  5153   00504A  BE1A               	btfsc	(pad@p+1)^0,7,c
  5154   00504C  EF2A  F028         	goto	u4181
  5155   005050  EF2C  F028         	goto	u4180
  5156   005054                     u4181:
  5157   005054  EF32  F028         	goto	l4189
  5158   005058                     u4180:
  5159   005058  C019  F01E         	movff	pad@p,pad@w
  5160   00505C  C01A  F01F         	movff	pad@p+1,pad@w+1
  5161   005060  EF36  F028         	goto	l1208
  5162   005064                     l4189:
  5163   005064  0E00               	movlw	0
  5164   005066  6E1F               	movwf	(pad@w+1)^0,c
  5165   005068  0E00               	movlw	0
  5166   00506A  6E1E               	movwf	pad@w^0,c
  5167   00506C                     l1208:
  5168                           
  5169                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 146:     i = 0;
  5170   00506C  0E00               	movlw	0
  5171   00506E  6E1D               	movwf	(pad@i+1)^0,c
  5172   005070  0E00               	movlw	0
  5173   005072  6E1C               	movwf	pad@i^0,c
  5174                           
  5175                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  5176   005074  EF48  F028         	goto	l4195
  5177   005078                     l4191:
  5178                           
  5179                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 148:         fput
      +                          c(' ', fp);
  5180   005078  0E00               	movlw	0
  5181   00507A  6E06               	movwf	(fputc@c+1)^0,c
  5182   00507C  0E20               	movlw	32
  5183   00507E  6E05               	movwf	fputc@c^0,c
  5184   005080  C015  F007         	movff	pad@fp,fputc@fp
  5185   005084  C016  F008         	movff	pad@fp+1,fputc@fp+1
  5186   005088  EC4A  F026         	call	_fputc	;wreg free
  5187   00508C                     
  5188                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 149:         ++i;
  5189   00508C  4A1C               	infsnz	pad@i^0,f,c
  5190   00508E  2A1D               	incf	(pad@i+1)^0,f,c
  5191   005090                     l4195:
  5192                           
  5193                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  5194   005090  501E               	movf	pad@w^0,w,c
  5195   005092  5C1C               	subwf	pad@i^0,w,c
  5196   005094  501D               	movf	(pad@i+1)^0,w,c
  5197   005096  0A80               	xorlw	128
  5198   005098  6E1B               	movwf	??_pad^0,c
  5199   00509A  501F               	movf	(pad@w+1)^0,w,c
  5200   00509C  0A80               	xorlw	128
  5201   00509E  581B               	subwfb	??_pad^0,w,c
  5202   0050A0  A0D8               	btfss	status,0,c
  5203   0050A2  EF55  F028         	goto	u4191
  5204   0050A6  EF57  F028         	goto	u4190
  5205   0050AA                     u4191:
  5206   0050AA  EF3C  F028         	goto	l4191
  5207   0050AE                     u4190:
  5208   0050AE                     
  5209                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 156:         fput
      +                          s((const char *)buf, fp);
  5210   0050AE  C017  F00E         	movff	pad@buf,fputs@s
  5211   0050B2  C018  F00F         	movff	pad@buf+1,fputs@s+1
  5212   0050B6  C015  F010         	movff	pad@fp,fputs@fp
  5213   0050BA  C016  F011         	movff	pad@fp+1,fputs@fp+1
  5214   0050BE  EC84  F02A         	call	_fputs	;wreg free
  5215   0050C2  0012               	return		;funcret
  5216   0050C4                     __end_of_pad:
  5217                           	callstack 0
  5218                           
  5219 ;; *************** function _fputs *****************
  5220 ;; Defined at:
  5221 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputs.c"
  5222 ;; Parameters:    Size  Location     Type
  5223 ;;  s               2   13[COMRAM] PTR const unsigned char 
  5224 ;;		 -> dbuf(80), 
  5225 ;;  fp              2   15[COMRAM] PTR struct _IO_FILE
  5226 ;;		 -> sprintf@f(11), 
  5227 ;; Auto vars:     Size  Location     Type
  5228 ;;  i               2   18[COMRAM] int 
  5229 ;;  c               1   17[COMRAM] unsigned char 
  5230 ;; Return value:  Size  Location     Type
  5231 ;;                  2   13[COMRAM] int 
  5232 ;; Registers used:
  5233 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5234 ;; Tracked objects:
  5235 ;;		On entry : 0/0
  5236 ;;		On exit  : 0/0
  5237 ;;		Unchanged: 0/0
  5238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5239 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5240 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5242 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5243 ;;Total ram usage:        7 bytes
  5244 ;; Hardware stack levels used: 1
  5245 ;; Hardware stack levels required when called: 4
  5246 ;; This function calls:
  5247 ;;		_fputc
  5248 ;; This function is called by:
  5249 ;;		_pad
  5250 ;; This function uses a non-reentrant model
  5251 ;;
  5252                           
  5253                           	psect	text16
  5254   005508                     __ptext16:
  5255                           	callstack 0
  5256   005508                     _fputs:
  5257                           	callstack 21
  5258   005508  0E00               	movlw	0
  5259   00550A  6E14               	movwf	(fputs@i+1)^0,c
  5260   00550C  0E00               	movlw	0
  5261   00550E  6E13               	movwf	fputs@i^0,c
  5262   005510  EF95  F02A         	goto	l3719
  5263   005514                     l3715:
  5264   005514  C012  F005         	movff	fputs@c,fputc@c
  5265   005518  6A06               	clrf	(fputc@c+1)^0,c
  5266   00551A  C010  F007         	movff	fputs@fp,fputc@fp
  5267   00551E  C011  F008         	movff	fputs@fp+1,fputc@fp+1
  5268   005522  EC4A  F026         	call	_fputc	;wreg free
  5269   005526  4A13               	infsnz	fputs@i^0,f,c
  5270   005528  2A14               	incf	(fputs@i+1)^0,f,c
  5271   00552A                     l3719:
  5272   00552A  5013               	movf	fputs@i^0,w,c
  5273   00552C  240E               	addwf	fputs@s^0,w,c
  5274   00552E  6ED9               	movwf	fsr2l,c
  5275   005530  5014               	movf	(fputs@i+1)^0,w,c
  5276   005532  200F               	addwfc	(fputs@s+1)^0,w,c
  5277   005534  6EDA               	movwf	fsr2h,c
  5278   005536  50DF               	movf	indf2,w,c
  5279   005538  6E12               	movwf	fputs@c^0,c
  5280   00553A  5012               	movf	fputs@c^0,w,c
  5281   00553C  A4D8               	btfss	status,2,c
  5282   00553E  EFA3  F02A         	goto	u3421
  5283   005542  EFA5  F02A         	goto	u3420
  5284   005546                     u3421:
  5285   005546  EF8A  F02A         	goto	l3715
  5286   00554A                     u3420:
  5287   00554A  0012               	return		;funcret
  5288   00554C                     __end_of_fputs:
  5289                           	callstack 0
  5290                           
  5291 ;; *************** function _fputc *****************
  5292 ;; Defined at:
  5293 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputc.c"
  5294 ;; Parameters:    Size  Location     Type
  5295 ;;  c               2    4[COMRAM] int 
  5296 ;;  fp              2    6[COMRAM] PTR struct _IO_FILE
  5297 ;;		 -> sprintf@f(11), 
  5298 ;; Auto vars:     Size  Location     Type
  5299 ;;		None
  5300 ;; Return value:  Size  Location     Type
  5301 ;;                  2    4[COMRAM] int 
  5302 ;; Registers used:
  5303 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5304 ;; Tracked objects:
  5305 ;;		On entry : 0/0
  5306 ;;		On exit  : 0/0
  5307 ;;		Unchanged: 0/0
  5308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5309 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5311 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5312 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5313 ;;Total ram usage:        9 bytes
  5314 ;; Hardware stack levels used: 1
  5315 ;; Hardware stack levels required when called: 3
  5316 ;; This function calls:
  5317 ;;		_putch
  5318 ;; This function is called by:
  5319 ;;		_pad
  5320 ;;		_vfpfcnvrt
  5321 ;;		_fputs
  5322 ;; This function uses a non-reentrant model
  5323 ;;
  5324                           
  5325                           	psect	text17
  5326   004C94                     __ptext17:
  5327                           	callstack 0
  5328   004C94                     _fputc:
  5329                           	callstack 24
  5330   004C94  5007               	movf	fputc@fp^0,w,c
  5331   004C96  1008               	iorwf	(fputc@fp+1)^0,w,c
  5332   004C98  B4D8               	btfsc	status,2,c
  5333   004C9A  EF51  F026         	goto	u2961
  5334   004C9E  EF53  F026         	goto	u2960
  5335   004CA2                     u2961:
  5336   004CA2  EF5C  F026         	goto	l3473
  5337   004CA6                     u2960:
  5338   004CA6  5007               	movf	fputc@fp^0,w,c
  5339   004CA8  1008               	iorwf	(fputc@fp+1)^0,w,c
  5340   004CAA  A4D8               	btfss	status,2,c
  5341   004CAC  EF5A  F026         	goto	u2971
  5342   004CB0  EF5C  F026         	goto	u2970
  5343   004CB4                     u2971:
  5344   004CB4  EF61  F026         	goto	l3475
  5345   004CB8                     u2970:
  5346   004CB8                     l3473:
  5347   004CB8  5005               	movf	fputc@c^0,w,c
  5348   004CBA  EC0D  F02C         	call	_putch
  5349   004CBE  EFAE  F026         	goto	l1368
  5350   004CC2                     l3475:
  5351   004CC2  EE20 F009          	lfsr	2,9
  5352   004CC6  5007               	movf	fputc@fp^0,w,c
  5353   004CC8  26D9               	addwf	fsr2l,f,c
  5354   004CCA  5008               	movf	(fputc@fp+1)^0,w,c
  5355   004CCC  22DA               	addwfc	fsr2h,f,c
  5356   004CCE  50DE               	movf	postinc2,w,c
  5357   004CD0  10DE               	iorwf	postinc2,w,c
  5358   004CD2  B4D8               	btfsc	status,2,c
  5359   004CD4  EF6E  F026         	goto	u2981
  5360   004CD8  EF70  F026         	goto	u2980
  5361   004CDC                     u2981:
  5362   004CDC  EF8B  F026         	goto	l3479
  5363   004CE0                     u2980:
  5364   004CE0  EE20 F009          	lfsr	2,9
  5365   004CE4  5007               	movf	fputc@fp^0,w,c
  5366   004CE6  26D9               	addwf	fsr2l,f,c
  5367   004CE8  5008               	movf	(fputc@fp+1)^0,w,c
  5368   004CEA  22DA               	addwfc	fsr2h,f,c
  5369   004CEC  EE10 F003          	lfsr	1,3
  5370   004CF0  5007               	movf	fputc@fp^0,w,c
  5371   004CF2  26E1               	addwf	fsr1l,f,c
  5372   004CF4  5008               	movf	(fputc@fp+1)^0,w,c
  5373   004CF6  22E2               	addwfc	fsr1h,f,c
  5374   004CF8  50DE               	movf	postinc2,w,c
  5375   004CFA  5CE6               	subwf	postinc1,w,c
  5376   004CFC  50E6               	movf	postinc1,w,c
  5377   004CFE  0A80               	xorlw	128
  5378   004D00  6E0D               	movwf	(??_fputc+4)^0,c
  5379   004D02  50DE               	movf	postinc2,w,c
  5380   004D04  0A80               	xorlw	128
  5381   004D06  580D               	subwfb	(??_fputc+4)^0,w,c
  5382   004D08  B0D8               	btfsc	status,0,c
  5383   004D0A  EF89  F026         	goto	u2991
  5384   004D0E  EF8B  F026         	goto	u2990
  5385   004D12                     u2991:
  5386   004D12  EFAE  F026         	goto	l1368
  5387   004D16                     u2990:
  5388   004D16                     l3479:
  5389   004D16  EE20 F003          	lfsr	2,3
  5390   004D1A  5007               	movf	fputc@fp^0,w,c
  5391   004D1C  26D9               	addwf	fsr2l,f,c
  5392   004D1E  5008               	movf	(fputc@fp+1)^0,w,c
  5393   004D20  22DA               	addwfc	fsr2h,f,c
  5394   004D22  CFDE F009          	movff	postinc2,??_fputc
  5395   004D26  CFDD F00A          	movff	postdec2,??_fputc+1
  5396   004D2A  C007  FFD9         	movff	fputc@fp,fsr2l
  5397   004D2E  C008  FFDA         	movff	fputc@fp+1,fsr2h
  5398   004D32  CFDE F00B          	movff	postinc2,??_fputc+2
  5399   004D36  CFDD F00C          	movff	postdec2,??_fputc+3
  5400   004D3A  5009               	movf	??_fputc^0,w,c
  5401   004D3C  240B               	addwf	(??_fputc+2)^0,w,c
  5402   004D3E  6ED9               	movwf	fsr2l,c
  5403   004D40  500A               	movf	(??_fputc+1)^0,w,c
  5404   004D42  200C               	addwfc	(??_fputc+3)^0,w,c
  5405   004D44  6EDA               	movwf	fsr2h,c
  5406   004D46  C005  FFDF         	movff	fputc@c,indf2
  5407   004D4A  EE20 F003          	lfsr	2,3
  5408   004D4E  5007               	movf	fputc@fp^0,w,c
  5409   004D50  26D9               	addwf	fsr2l,f,c
  5410   004D52  5008               	movf	(fputc@fp+1)^0,w,c
  5411   004D54  22DA               	addwfc	fsr2h,f,c
  5412   004D56  2ADE               	incf	postinc2,f,c
  5413   004D58  0E00               	movlw	0
  5414   004D5A  22DD               	addwfc	postdec2,f,c
  5415   004D5C                     l1368:
  5416   004D5C  0012               	return		;funcret
  5417   004D5E                     __end_of_fputc:
  5418                           	callstack 0
  5419                           
  5420 ;; *************** function _putch *****************
  5421 ;; Defined at:
  5422 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\putch.c"
  5423 ;; Parameters:    Size  Location     Type
  5424 ;;  c               1    wreg     unsigned char 
  5425 ;; Auto vars:     Size  Location     Type
  5426 ;;  c               1    0[COMRAM] unsigned char 
  5427 ;; Return value:  Size  Location     Type
  5428 ;;                  1    wreg      void 
  5429 ;; Registers used:
  5430 ;;		wreg
  5431 ;; Tracked objects:
  5432 ;;		On entry : 0/0
  5433 ;;		On exit  : 0/0
  5434 ;;		Unchanged: 0/0
  5435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5439 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5440 ;;Total ram usage:        0 bytes
  5441 ;; Hardware stack levels used: 1
  5442 ;; Hardware stack levels required when called: 2
  5443 ;; This function calls:
  5444 ;;		Nothing
  5445 ;; This function is called by:
  5446 ;;		_fputc
  5447 ;; This function uses a non-reentrant model
  5448 ;;
  5449                           
  5450                           	psect	text18
  5451   00581A                     __ptext18:
  5452                           	callstack 0
  5453   00581A                     _putch:
  5454                           	callstack 24
  5455   00581A  0012               	return		;funcret
  5456   00581C                     __end_of_putch:
  5457                           	callstack 0
  5458                           
  5459 ;; *************** function _abs *****************
  5460 ;; Defined at:
  5461 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\abs.c"
  5462 ;; Parameters:    Size  Location     Type
  5463 ;;  a               2   22[COMRAM] int 
  5464 ;; Auto vars:     Size  Location     Type
  5465 ;;		None
  5466 ;; Return value:  Size  Location     Type
  5467 ;;                  2   22[COMRAM] int 
  5468 ;; Registers used:
  5469 ;;		wreg, status,2, status,0
  5470 ;; Tracked objects:
  5471 ;;		On entry : 0/0
  5472 ;;		On exit  : 0/0
  5473 ;;		Unchanged: 0/0
  5474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5475 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5477 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5478 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5479 ;;Total ram usage:        4 bytes
  5480 ;; Hardware stack levels used: 1
  5481 ;; Hardware stack levels required when called: 2
  5482 ;; This function calls:
  5483 ;;		Nothing
  5484 ;; This function is called by:
  5485 ;;		_dtoa
  5486 ;; This function uses a non-reentrant model
  5487 ;;
  5488                           
  5489                           	psect	text19
  5490   00558E                     __ptext19:
  5491                           	callstack 0
  5492   00558E                     _abs:
  5493                           	callstack 24
  5494   00558E  BE18               	btfsc	(abs@a+1)^0,7,c
  5495   005590  EFD4  F02A         	goto	u4200
  5496   005594  5018               	movf	(abs@a+1)^0,w,c
  5497   005596  E106               	bnz	u4201
  5498   005598  0417               	decf	abs@a^0,w,c
  5499   00559A  B0D8               	btfsc	status,0,c
  5500   00559C  EFD2  F02A         	goto	u4201
  5501   0055A0  EFD4  F02A         	goto	u4200
  5502   0055A4                     u4201:
  5503   0055A4  EFE2  F02A         	goto	l1327
  5504   0055A8                     u4200:
  5505   0055A8  C017  F019         	movff	abs@a,??_abs
  5506   0055AC  C018  F01A         	movff	abs@a+1,??_abs+1
  5507   0055B0  1E19               	comf	??_abs^0,f,c
  5508   0055B2  1E1A               	comf	(??_abs+1)^0,f,c
  5509   0055B4  4A19               	infsnz	??_abs^0,f,c
  5510   0055B6  2A1A               	incf	(??_abs+1)^0,f,c
  5511   0055B8  C019  F017         	movff	??_abs,?_abs
  5512   0055BC  C01A  F018         	movff	??_abs+1,?_abs+1
  5513   0055C0  EFE6  F02A         	goto	l1330
  5514   0055C4                     l1327:
  5515   0055C4  C017  F017         	movff	abs@a,?_abs
  5516   0055C8  C018  F018         	movff	abs@a+1,?_abs+1
  5517   0055CC                     l1330:
  5518   0055CC  0012               	return		;funcret
  5519   0055CE                     __end_of_abs:
  5520                           	callstack 0
  5521                           
  5522 ;; *************** function ___aomod *****************
  5523 ;; Defined at:
  5524 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aomod.c"
  5525 ;; Parameters:    Size  Location     Type
  5526 ;;  dividend        8    4[COMRAM] long long 
  5527 ;;  divisor         8   12[COMRAM] long long 
  5528 ;; Auto vars:     Size  Location     Type
  5529 ;;  sign            1   21[COMRAM] unsigned char 
  5530 ;;  counter         1   20[COMRAM] unsigned char 
  5531 ;; Return value:  Size  Location     Type
  5532 ;;                  8    4[COMRAM] long long 
  5533 ;; Registers used:
  5534 ;;		wreg, status,2, status,0
  5535 ;; Tracked objects:
  5536 ;;		On entry : 0/0
  5537 ;;		On exit  : 0/0
  5538 ;;		Unchanged: 0/0
  5539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5540 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5541 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5543 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5544 ;;Total ram usage:       18 bytes
  5545 ;; Hardware stack levels used: 1
  5546 ;; Hardware stack levels required when called: 2
  5547 ;; This function calls:
  5548 ;;		Nothing
  5549 ;; This function is called by:
  5550 ;;		_dtoa
  5551 ;; This function uses a non-reentrant model
  5552 ;;
  5553                           
  5554                           	psect	text20
  5555   003E84                     __ptext20:
  5556                           	callstack 0
  5557   003E84                     ___aomod:
  5558                           	callstack 24
  5559   003E84  0E00               	movlw	0
  5560   003E86  6E16               	movwf	___aomod@sign^0,c
  5561   003E88  BE0C               	btfsc	(___aomod@dividend+7)^0,7,c
  5562   003E8A  EF4B  F01F         	goto	u3540
  5563   003E8E  EF49  F01F         	goto	u3541
  5564   003E92                     u3541:
  5565   003E92  EF5D  F01F         	goto	l3793
  5566   003E96                     u3540:
  5567   003E96  1E0C               	comf	(___aomod@dividend+7)^0,f,c
  5568   003E98  1E0B               	comf	(___aomod@dividend+6)^0,f,c
  5569   003E9A  1E0A               	comf	(___aomod@dividend+5)^0,f,c
  5570   003E9C  1E09               	comf	(___aomod@dividend+4)^0,f,c
  5571   003E9E  1E08               	comf	(___aomod@dividend+3)^0,f,c
  5572   003EA0  1E07               	comf	(___aomod@dividend+2)^0,f,c
  5573   003EA2  1E06               	comf	(___aomod@dividend+1)^0,f,c
  5574   003EA4  6C05               	negf	___aomod@dividend^0,c
  5575   003EA6  0E00               	movlw	0
  5576   003EA8  2206               	addwfc	(___aomod@dividend+1)^0,f,c
  5577   003EAA  2207               	addwfc	(___aomod@dividend+2)^0,f,c
  5578   003EAC  2208               	addwfc	(___aomod@dividend+3)^0,f,c
  5579   003EAE  2209               	addwfc	(___aomod@dividend+4)^0,f,c
  5580   003EB0  220A               	addwfc	(___aomod@dividend+5)^0,f,c
  5581   003EB2  220B               	addwfc	(___aomod@dividend+6)^0,f,c
  5582   003EB4  220C               	addwfc	(___aomod@dividend+7)^0,f,c
  5583   003EB6  0E01               	movlw	1
  5584   003EB8  6E16               	movwf	___aomod@sign^0,c
  5585   003EBA                     l3793:
  5586   003EBA  BE14               	btfsc	(___aomod@divisor+7)^0,7,c
  5587   003EBC  EF64  F01F         	goto	u3550
  5588   003EC0  EF62  F01F         	goto	u3551
  5589   003EC4                     u3551:
  5590   003EC4  EF74  F01F         	goto	l3797
  5591   003EC8                     u3550:
  5592   003EC8  1E14               	comf	(___aomod@divisor+7)^0,f,c
  5593   003ECA  1E13               	comf	(___aomod@divisor+6)^0,f,c
  5594   003ECC  1E12               	comf	(___aomod@divisor+5)^0,f,c
  5595   003ECE  1E11               	comf	(___aomod@divisor+4)^0,f,c
  5596   003ED0  1E10               	comf	(___aomod@divisor+3)^0,f,c
  5597   003ED2  1E0F               	comf	(___aomod@divisor+2)^0,f,c
  5598   003ED4  1E0E               	comf	(___aomod@divisor+1)^0,f,c
  5599   003ED6  6C0D               	negf	___aomod@divisor^0,c
  5600   003ED8  0E00               	movlw	0
  5601   003EDA  220E               	addwfc	(___aomod@divisor+1)^0,f,c
  5602   003EDC  220F               	addwfc	(___aomod@divisor+2)^0,f,c
  5603   003EDE  2210               	addwfc	(___aomod@divisor+3)^0,f,c
  5604   003EE0  2211               	addwfc	(___aomod@divisor+4)^0,f,c
  5605   003EE2  2212               	addwfc	(___aomod@divisor+5)^0,f,c
  5606   003EE4  2213               	addwfc	(___aomod@divisor+6)^0,f,c
  5607   003EE6  2214               	addwfc	(___aomod@divisor+7)^0,f,c
  5608   003EE8                     l3797:
  5609   003EE8  500D               	movf	___aomod@divisor^0,w,c
  5610   003EEA  100E               	iorwf	(___aomod@divisor+1)^0,w,c
  5611   003EEC  100F               	iorwf	(___aomod@divisor+2)^0,w,c
  5612   003EEE  1010               	iorwf	(___aomod@divisor+3)^0,w,c
  5613   003EF0  1011               	iorwf	(___aomod@divisor+4)^0,w,c
  5614   003EF2  1012               	iorwf	(___aomod@divisor+5)^0,w,c
  5615   003EF4  1013               	iorwf	(___aomod@divisor+6)^0,w,c
  5616   003EF6  1014               	iorwf	(___aomod@divisor+7)^0,w,c
  5617   003EF8  B4D8               	btfsc	status,2,c
  5618   003EFA  EF81  F01F         	goto	u3561
  5619   003EFE  EF83  F01F         	goto	u3560
  5620   003F02                     u3561:
  5621   003F02  EFCB  F01F         	goto	l3813
  5622   003F06                     u3560:
  5623   003F06  0E01               	movlw	1
  5624   003F08  6E15               	movwf	___aomod@counter^0,c
  5625   003F0A  EF91  F01F         	goto	l3803
  5626   003F0E                     l3801:
  5627   003F0E  90D8               	bcf	status,0,c
  5628   003F10  360D               	rlcf	___aomod@divisor^0,f,c
  5629   003F12  360E               	rlcf	(___aomod@divisor+1)^0,f,c
  5630   003F14  360F               	rlcf	(___aomod@divisor+2)^0,f,c
  5631   003F16  3610               	rlcf	(___aomod@divisor+3)^0,f,c
  5632   003F18  3611               	rlcf	(___aomod@divisor+4)^0,f,c
  5633   003F1A  3612               	rlcf	(___aomod@divisor+5)^0,f,c
  5634   003F1C  3613               	rlcf	(___aomod@divisor+6)^0,f,c
  5635   003F1E  3614               	rlcf	(___aomod@divisor+7)^0,f,c
  5636   003F20  2A15               	incf	___aomod@counter^0,f,c
  5637   003F22                     l3803:
  5638   003F22  AE14               	btfss	(___aomod@divisor+7)^0,7,c
  5639   003F24  EF96  F01F         	goto	u3571
  5640   003F28  EF98  F01F         	goto	u3570
  5641   003F2C                     u3571:
  5642   003F2C  EF87  F01F         	goto	l3801
  5643   003F30                     u3570:
  5644   003F30                     l3805:
  5645   003F30  500D               	movf	___aomod@divisor^0,w,c
  5646   003F32  5C05               	subwf	___aomod@dividend^0,w,c
  5647   003F34  500E               	movf	(___aomod@divisor+1)^0,w,c
  5648   003F36  5806               	subwfb	(___aomod@dividend+1)^0,w,c
  5649   003F38  500F               	movf	(___aomod@divisor+2)^0,w,c
  5650   003F3A  5807               	subwfb	(___aomod@dividend+2)^0,w,c
  5651   003F3C  5010               	movf	(___aomod@divisor+3)^0,w,c
  5652   003F3E  5808               	subwfb	(___aomod@dividend+3)^0,w,c
  5653   003F40  5011               	movf	(___aomod@divisor+4)^0,w,c
  5654   003F42  5809               	subwfb	(___aomod@dividend+4)^0,w,c
  5655   003F44  5012               	movf	(___aomod@divisor+5)^0,w,c
  5656   003F46  580A               	subwfb	(___aomod@dividend+5)^0,w,c
  5657   003F48  5013               	movf	(___aomod@divisor+6)^0,w,c
  5658   003F4A  580B               	subwfb	(___aomod@dividend+6)^0,w,c
  5659   003F4C  5014               	movf	(___aomod@divisor+7)^0,w,c
  5660   003F4E  580C               	subwfb	(___aomod@dividend+7)^0,w,c
  5661   003F50  A0D8               	btfss	status,0,c
  5662   003F52  EFAD  F01F         	goto	u3581
  5663   003F56  EFAF  F01F         	goto	u3580
  5664   003F5A                     u3581:
  5665   003F5A  EFBF  F01F         	goto	l3809
  5666   003F5E                     u3580:
  5667   003F5E  500D               	movf	___aomod@divisor^0,w,c
  5668   003F60  5E05               	subwf	___aomod@dividend^0,f,c
  5669   003F62  500E               	movf	(___aomod@divisor+1)^0,w,c
  5670   003F64  5A06               	subwfb	(___aomod@dividend+1)^0,f,c
  5671   003F66  500F               	movf	(___aomod@divisor+2)^0,w,c
  5672   003F68  5A07               	subwfb	(___aomod@dividend+2)^0,f,c
  5673   003F6A  5010               	movf	(___aomod@divisor+3)^0,w,c
  5674   003F6C  5A08               	subwfb	(___aomod@dividend+3)^0,f,c
  5675   003F6E  5011               	movf	(___aomod@divisor+4)^0,w,c
  5676   003F70  5A09               	subwfb	(___aomod@dividend+4)^0,f,c
  5677   003F72  5012               	movf	(___aomod@divisor+5)^0,w,c
  5678   003F74  5A0A               	subwfb	(___aomod@dividend+5)^0,f,c
  5679   003F76  5013               	movf	(___aomod@divisor+6)^0,w,c
  5680   003F78  5A0B               	subwfb	(___aomod@dividend+6)^0,f,c
  5681   003F7A  5014               	movf	(___aomod@divisor+7)^0,w,c
  5682   003F7C  5A0C               	subwfb	(___aomod@dividend+7)^0,f,c
  5683   003F7E                     l3809:
  5684   003F7E  90D8               	bcf	status,0,c
  5685   003F80  3214               	rrcf	(___aomod@divisor+7)^0,f,c
  5686   003F82  3213               	rrcf	(___aomod@divisor+6)^0,f,c
  5687   003F84  3212               	rrcf	(___aomod@divisor+5)^0,f,c
  5688   003F86  3211               	rrcf	(___aomod@divisor+4)^0,f,c
  5689   003F88  3210               	rrcf	(___aomod@divisor+3)^0,f,c
  5690   003F8A  320F               	rrcf	(___aomod@divisor+2)^0,f,c
  5691   003F8C  320E               	rrcf	(___aomod@divisor+1)^0,f,c
  5692   003F8E  320D               	rrcf	___aomod@divisor^0,f,c
  5693   003F90  2E15               	decfsz	___aomod@counter^0,f,c
  5694   003F92  EF98  F01F         	goto	l3805
  5695   003F96                     l3813:
  5696   003F96  5016               	movf	___aomod@sign^0,w,c
  5697   003F98  B4D8               	btfsc	status,2,c
  5698   003F9A  EFD1  F01F         	goto	u3591
  5699   003F9E  EFD3  F01F         	goto	u3590
  5700   003FA2                     u3591:
  5701   003FA2  EFE3  F01F         	goto	l3817
  5702   003FA6                     u3590:
  5703   003FA6  1E0C               	comf	(___aomod@dividend+7)^0,f,c
  5704   003FA8  1E0B               	comf	(___aomod@dividend+6)^0,f,c
  5705   003FAA  1E0A               	comf	(___aomod@dividend+5)^0,f,c
  5706   003FAC  1E09               	comf	(___aomod@dividend+4)^0,f,c
  5707   003FAE  1E08               	comf	(___aomod@dividend+3)^0,f,c
  5708   003FB0  1E07               	comf	(___aomod@dividend+2)^0,f,c
  5709   003FB2  1E06               	comf	(___aomod@dividend+1)^0,f,c
  5710   003FB4  6C05               	negf	___aomod@dividend^0,c
  5711   003FB6  0E00               	movlw	0
  5712   003FB8  2206               	addwfc	(___aomod@dividend+1)^0,f,c
  5713   003FBA  2207               	addwfc	(___aomod@dividend+2)^0,f,c
  5714   003FBC  2208               	addwfc	(___aomod@dividend+3)^0,f,c
  5715   003FBE  2209               	addwfc	(___aomod@dividend+4)^0,f,c
  5716   003FC0  220A               	addwfc	(___aomod@dividend+5)^0,f,c
  5717   003FC2  220B               	addwfc	(___aomod@dividend+6)^0,f,c
  5718   003FC4  220C               	addwfc	(___aomod@dividend+7)^0,f,c
  5719   003FC6                     l3817:
  5720   003FC6  C005  F005         	movff	___aomod@dividend,?___aomod
  5721   003FCA  C006  F006         	movff	___aomod@dividend+1,?___aomod+1
  5722   003FCE  C007  F007         	movff	___aomod@dividend+2,?___aomod+2
  5723   003FD2  C008  F008         	movff	___aomod@dividend+3,?___aomod+3
  5724   003FD6  C009  F009         	movff	___aomod@dividend+4,?___aomod+4
  5725   003FDA  C00A  F00A         	movff	___aomod@dividend+5,?___aomod+5
  5726   003FDE  C00B  F00B         	movff	___aomod@dividend+6,?___aomod+6
  5727   003FE2  C00C  F00C         	movff	___aomod@dividend+7,?___aomod+7
  5728   003FE6  0012               	return		;funcret
  5729   003FE8                     __end_of___aomod:
  5730                           	callstack 0
  5731                           
  5732 ;; *************** function ___aodiv *****************
  5733 ;; Defined at:
  5734 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aodiv.c"
  5735 ;; Parameters:    Size  Location     Type
  5736 ;;  dividend        8    4[COMRAM] long long 
  5737 ;;  divisor         8   12[COMRAM] long long 
  5738 ;; Auto vars:     Size  Location     Type
  5739 ;;  quotient        8   22[COMRAM] long long 
  5740 ;;  sign            1   21[COMRAM] unsigned char 
  5741 ;;  counter         1   20[COMRAM] unsigned char 
  5742 ;; Return value:  Size  Location     Type
  5743 ;;                  8    4[COMRAM] long long 
  5744 ;; Registers used:
  5745 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5746 ;; Tracked objects:
  5747 ;;		On entry : 0/0
  5748 ;;		On exit  : 0/0
  5749 ;;		Unchanged: 0/0
  5750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5751 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5752 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5754 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5755 ;;Total ram usage:       26 bytes
  5756 ;; Hardware stack levels used: 1
  5757 ;; Hardware stack levels required when called: 2
  5758 ;; This function calls:
  5759 ;;		Nothing
  5760 ;; This function is called by:
  5761 ;;		_dtoa
  5762 ;; This function uses a non-reentrant model
  5763 ;;
  5764                           
  5765                           	psect	text21
  5766   003B90                     __ptext21:
  5767                           	callstack 0
  5768   003B90                     ___aodiv:
  5769                           	callstack 24
  5770   003B90  0E00               	movlw	0
  5771   003B92  6E16               	movwf	___aodiv@sign^0,c
  5772   003B94  BE14               	btfsc	(___aodiv@divisor+7)^0,7,c
  5773   003B96  EFD1  F01D         	goto	u3470
  5774   003B9A  EFCF  F01D         	goto	u3471
  5775   003B9E                     u3471:
  5776   003B9E  EFE3  F01D         	goto	l3749
  5777   003BA2                     u3470:
  5778   003BA2  1E14               	comf	(___aodiv@divisor+7)^0,f,c
  5779   003BA4  1E13               	comf	(___aodiv@divisor+6)^0,f,c
  5780   003BA6  1E12               	comf	(___aodiv@divisor+5)^0,f,c
  5781   003BA8  1E11               	comf	(___aodiv@divisor+4)^0,f,c
  5782   003BAA  1E10               	comf	(___aodiv@divisor+3)^0,f,c
  5783   003BAC  1E0F               	comf	(___aodiv@divisor+2)^0,f,c
  5784   003BAE  1E0E               	comf	(___aodiv@divisor+1)^0,f,c
  5785   003BB0  6C0D               	negf	___aodiv@divisor^0,c
  5786   003BB2  0E00               	movlw	0
  5787   003BB4  220E               	addwfc	(___aodiv@divisor+1)^0,f,c
  5788   003BB6  220F               	addwfc	(___aodiv@divisor+2)^0,f,c
  5789   003BB8  2210               	addwfc	(___aodiv@divisor+3)^0,f,c
  5790   003BBA  2211               	addwfc	(___aodiv@divisor+4)^0,f,c
  5791   003BBC  2212               	addwfc	(___aodiv@divisor+5)^0,f,c
  5792   003BBE  2213               	addwfc	(___aodiv@divisor+6)^0,f,c
  5793   003BC0  2214               	addwfc	(___aodiv@divisor+7)^0,f,c
  5794   003BC2  0E01               	movlw	1
  5795   003BC4  6E16               	movwf	___aodiv@sign^0,c
  5796   003BC6                     l3749:
  5797   003BC6  BE0C               	btfsc	(___aodiv@dividend+7)^0,7,c
  5798   003BC8  EFEA  F01D         	goto	u3480
  5799   003BCC  EFE8  F01D         	goto	u3481
  5800   003BD0                     u3481:
  5801   003BD0  EFFC  F01D         	goto	l3755
  5802   003BD4                     u3480:
  5803   003BD4  1E0C               	comf	(___aodiv@dividend+7)^0,f,c
  5804   003BD6  1E0B               	comf	(___aodiv@dividend+6)^0,f,c
  5805   003BD8  1E0A               	comf	(___aodiv@dividend+5)^0,f,c
  5806   003BDA  1E09               	comf	(___aodiv@dividend+4)^0,f,c
  5807   003BDC  1E08               	comf	(___aodiv@dividend+3)^0,f,c
  5808   003BDE  1E07               	comf	(___aodiv@dividend+2)^0,f,c
  5809   003BE0  1E06               	comf	(___aodiv@dividend+1)^0,f,c
  5810   003BE2  6C05               	negf	___aodiv@dividend^0,c
  5811   003BE4  0E00               	movlw	0
  5812   003BE6  2206               	addwfc	(___aodiv@dividend+1)^0,f,c
  5813   003BE8  2207               	addwfc	(___aodiv@dividend+2)^0,f,c
  5814   003BEA  2208               	addwfc	(___aodiv@dividend+3)^0,f,c
  5815   003BEC  2209               	addwfc	(___aodiv@dividend+4)^0,f,c
  5816   003BEE  220A               	addwfc	(___aodiv@dividend+5)^0,f,c
  5817   003BF0  220B               	addwfc	(___aodiv@dividend+6)^0,f,c
  5818   003BF2  220C               	addwfc	(___aodiv@dividend+7)^0,f,c
  5819   003BF4  0E01               	movlw	1
  5820   003BF6  1A16               	xorwf	___aodiv@sign^0,f,c
  5821   003BF8                     l3755:
  5822   003BF8  EE20  F017         	lfsr	2,___aodiv@quotient
  5823   003BFC  0E07               	movlw	7
  5824   003BFE                     u3491:
  5825   003BFE  6ADE               	clrf	postinc2,c
  5826   003C00  06E8               	decf	wreg,f,c
  5827   003C02  E2FD               	bc	u3491
  5828   003C04  500D               	movf	___aodiv@divisor^0,w,c
  5829   003C06  100E               	iorwf	(___aodiv@divisor+1)^0,w,c
  5830   003C08  100F               	iorwf	(___aodiv@divisor+2)^0,w,c
  5831   003C0A  1010               	iorwf	(___aodiv@divisor+3)^0,w,c
  5832   003C0C  1011               	iorwf	(___aodiv@divisor+4)^0,w,c
  5833   003C0E  1012               	iorwf	(___aodiv@divisor+5)^0,w,c
  5834   003C10  1013               	iorwf	(___aodiv@divisor+6)^0,w,c
  5835   003C12  1014               	iorwf	(___aodiv@divisor+7)^0,w,c
  5836   003C14  B4D8               	btfsc	status,2,c
  5837   003C16  EF0F  F01E         	goto	u3501
  5838   003C1A  EF11  F01E         	goto	u3500
  5839   003C1E                     u3501:
  5840   003C1E  EF63  F01E         	goto	l3777
  5841   003C22                     u3500:
  5842   003C22  0E01               	movlw	1
  5843   003C24  6E15               	movwf	___aodiv@counter^0,c
  5844   003C26  EF1F  F01E         	goto	l3763
  5845   003C2A                     l3761:
  5846   003C2A  90D8               	bcf	status,0,c
  5847   003C2C  360D               	rlcf	___aodiv@divisor^0,f,c
  5848   003C2E  360E               	rlcf	(___aodiv@divisor+1)^0,f,c
  5849   003C30  360F               	rlcf	(___aodiv@divisor+2)^0,f,c
  5850   003C32  3610               	rlcf	(___aodiv@divisor+3)^0,f,c
  5851   003C34  3611               	rlcf	(___aodiv@divisor+4)^0,f,c
  5852   003C36  3612               	rlcf	(___aodiv@divisor+5)^0,f,c
  5853   003C38  3613               	rlcf	(___aodiv@divisor+6)^0,f,c
  5854   003C3A  3614               	rlcf	(___aodiv@divisor+7)^0,f,c
  5855   003C3C  2A15               	incf	___aodiv@counter^0,f,c
  5856   003C3E                     l3763:
  5857   003C3E  AE14               	btfss	(___aodiv@divisor+7)^0,7,c
  5858   003C40  EF24  F01E         	goto	u3511
  5859   003C44  EF26  F01E         	goto	u3510
  5860   003C48                     u3511:
  5861   003C48  EF15  F01E         	goto	l3761
  5862   003C4C                     u3510:
  5863   003C4C                     l3765:
  5864   003C4C  90D8               	bcf	status,0,c
  5865   003C4E  3617               	rlcf	___aodiv@quotient^0,f,c
  5866   003C50  3618               	rlcf	(___aodiv@quotient+1)^0,f,c
  5867   003C52  3619               	rlcf	(___aodiv@quotient+2)^0,f,c
  5868   003C54  361A               	rlcf	(___aodiv@quotient+3)^0,f,c
  5869   003C56  361B               	rlcf	(___aodiv@quotient+4)^0,f,c
  5870   003C58  361C               	rlcf	(___aodiv@quotient+5)^0,f,c
  5871   003C5A  361D               	rlcf	(___aodiv@quotient+6)^0,f,c
  5872   003C5C  361E               	rlcf	(___aodiv@quotient+7)^0,f,c
  5873   003C5E  500D               	movf	___aodiv@divisor^0,w,c
  5874   003C60  5C05               	subwf	___aodiv@dividend^0,w,c
  5875   003C62  500E               	movf	(___aodiv@divisor+1)^0,w,c
  5876   003C64  5806               	subwfb	(___aodiv@dividend+1)^0,w,c
  5877   003C66  500F               	movf	(___aodiv@divisor+2)^0,w,c
  5878   003C68  5807               	subwfb	(___aodiv@dividend+2)^0,w,c
  5879   003C6A  5010               	movf	(___aodiv@divisor+3)^0,w,c
  5880   003C6C  5808               	subwfb	(___aodiv@dividend+3)^0,w,c
  5881   003C6E  5011               	movf	(___aodiv@divisor+4)^0,w,c
  5882   003C70  5809               	subwfb	(___aodiv@dividend+4)^0,w,c
  5883   003C72  5012               	movf	(___aodiv@divisor+5)^0,w,c
  5884   003C74  580A               	subwfb	(___aodiv@dividend+5)^0,w,c
  5885   003C76  5013               	movf	(___aodiv@divisor+6)^0,w,c
  5886   003C78  580B               	subwfb	(___aodiv@dividend+6)^0,w,c
  5887   003C7A  5014               	movf	(___aodiv@divisor+7)^0,w,c
  5888   003C7C  580C               	subwfb	(___aodiv@dividend+7)^0,w,c
  5889   003C7E  A0D8               	btfss	status,0,c
  5890   003C80  EF44  F01E         	goto	u3521
  5891   003C84  EF46  F01E         	goto	u3520
  5892   003C88                     u3521:
  5893   003C88  EF57  F01E         	goto	l3773
  5894   003C8C                     u3520:
  5895   003C8C  500D               	movf	___aodiv@divisor^0,w,c
  5896   003C8E  5E05               	subwf	___aodiv@dividend^0,f,c
  5897   003C90  500E               	movf	(___aodiv@divisor+1)^0,w,c
  5898   003C92  5A06               	subwfb	(___aodiv@dividend+1)^0,f,c
  5899   003C94  500F               	movf	(___aodiv@divisor+2)^0,w,c
  5900   003C96  5A07               	subwfb	(___aodiv@dividend+2)^0,f,c
  5901   003C98  5010               	movf	(___aodiv@divisor+3)^0,w,c
  5902   003C9A  5A08               	subwfb	(___aodiv@dividend+3)^0,f,c
  5903   003C9C  5011               	movf	(___aodiv@divisor+4)^0,w,c
  5904   003C9E  5A09               	subwfb	(___aodiv@dividend+4)^0,f,c
  5905   003CA0  5012               	movf	(___aodiv@divisor+5)^0,w,c
  5906   003CA2  5A0A               	subwfb	(___aodiv@dividend+5)^0,f,c
  5907   003CA4  5013               	movf	(___aodiv@divisor+6)^0,w,c
  5908   003CA6  5A0B               	subwfb	(___aodiv@dividend+6)^0,f,c
  5909   003CA8  5014               	movf	(___aodiv@divisor+7)^0,w,c
  5910   003CAA  5A0C               	subwfb	(___aodiv@dividend+7)^0,f,c
  5911   003CAC  8017               	bsf	___aodiv@quotient^0,0,c
  5912   003CAE                     l3773:
  5913   003CAE  90D8               	bcf	status,0,c
  5914   003CB0  3214               	rrcf	(___aodiv@divisor+7)^0,f,c
  5915   003CB2  3213               	rrcf	(___aodiv@divisor+6)^0,f,c
  5916   003CB4  3212               	rrcf	(___aodiv@divisor+5)^0,f,c
  5917   003CB6  3211               	rrcf	(___aodiv@divisor+4)^0,f,c
  5918   003CB8  3210               	rrcf	(___aodiv@divisor+3)^0,f,c
  5919   003CBA  320F               	rrcf	(___aodiv@divisor+2)^0,f,c
  5920   003CBC  320E               	rrcf	(___aodiv@divisor+1)^0,f,c
  5921   003CBE  320D               	rrcf	___aodiv@divisor^0,f,c
  5922   003CC0  2E15               	decfsz	___aodiv@counter^0,f,c
  5923   003CC2  EF26  F01E         	goto	l3765
  5924   003CC6                     l3777:
  5925   003CC6  5016               	movf	___aodiv@sign^0,w,c
  5926   003CC8  B4D8               	btfsc	status,2,c
  5927   003CCA  EF69  F01E         	goto	u3531
  5928   003CCE  EF6B  F01E         	goto	u3530
  5929   003CD2                     u3531:
  5930   003CD2  EF7B  F01E         	goto	l3781
  5931   003CD6                     u3530:
  5932   003CD6  1E1E               	comf	(___aodiv@quotient+7)^0,f,c
  5933   003CD8  1E1D               	comf	(___aodiv@quotient+6)^0,f,c
  5934   003CDA  1E1C               	comf	(___aodiv@quotient+5)^0,f,c
  5935   003CDC  1E1B               	comf	(___aodiv@quotient+4)^0,f,c
  5936   003CDE  1E1A               	comf	(___aodiv@quotient+3)^0,f,c
  5937   003CE0  1E19               	comf	(___aodiv@quotient+2)^0,f,c
  5938   003CE2  1E18               	comf	(___aodiv@quotient+1)^0,f,c
  5939   003CE4  6C17               	negf	___aodiv@quotient^0,c
  5940   003CE6  0E00               	movlw	0
  5941   003CE8  2218               	addwfc	(___aodiv@quotient+1)^0,f,c
  5942   003CEA  2219               	addwfc	(___aodiv@quotient+2)^0,f,c
  5943   003CEC  221A               	addwfc	(___aodiv@quotient+3)^0,f,c
  5944   003CEE  221B               	addwfc	(___aodiv@quotient+4)^0,f,c
  5945   003CF0  221C               	addwfc	(___aodiv@quotient+5)^0,f,c
  5946   003CF2  221D               	addwfc	(___aodiv@quotient+6)^0,f,c
  5947   003CF4  221E               	addwfc	(___aodiv@quotient+7)^0,f,c
  5948   003CF6                     l3781:
  5949   003CF6  C017  F005         	movff	___aodiv@quotient,?___aodiv
  5950   003CFA  C018  F006         	movff	___aodiv@quotient+1,?___aodiv+1
  5951   003CFE  C019  F007         	movff	___aodiv@quotient+2,?___aodiv+2
  5952   003D02  C01A  F008         	movff	___aodiv@quotient+3,?___aodiv+3
  5953   003D06  C01B  F009         	movff	___aodiv@quotient+4,?___aodiv+4
  5954   003D0A  C01C  F00A         	movff	___aodiv@quotient+5,?___aodiv+5
  5955   003D0E  C01D  F00B         	movff	___aodiv@quotient+6,?___aodiv+6
  5956   003D12  C01E  F00C         	movff	___aodiv@quotient+7,?___aodiv+7
  5957   003D16  0012               	return		;funcret
  5958   003D18                     __end_of___aodiv:
  5959                           	callstack 0
  5960                           
  5961 ;; *************** function _sendTxBuf *****************
  5962 ;; Defined at:
  5963 ;;		line 96 in file "MazeRobot.X/serial.c"
  5964 ;; Parameters:    Size  Location     Type
  5965 ;;		None
  5966 ;; Auto vars:     Size  Location     Type
  5967 ;;		None
  5968 ;; Return value:  Size  Location     Type
  5969 ;;                  1    wreg      void 
  5970 ;; Registers used:
  5971 ;;		wreg, status,2, status,0, cstack
  5972 ;; Tracked objects:
  5973 ;;		On entry : 0/0
  5974 ;;		On exit  : 0/0
  5975 ;;		Unchanged: 0/0
  5976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5980 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5981 ;;Total ram usage:        0 bytes
  5982 ;; Hardware stack levels used: 1
  5983 ;; Hardware stack levels required when called: 3
  5984 ;; This function calls:
  5985 ;;		_isDataInTxBuf
  5986 ;; This function is called by:
  5987 ;;		_main
  5988 ;; This function uses a non-reentrant model
  5989 ;;
  5990                           
  5991                           	psect	text22
  5992   0057A2                     __ptext22:
  5993                           	callstack 0
  5994   0057A2                     _sendTxBuf:
  5995                           	callstack 27
  5996   0057A2                     
  5997                           ;MazeRobot.X/serial.c: 97:     if (isDataInTxBuf()) {PIE4bits.TX4IE=1;}
  5998   0057A2  ECDE  F02B         	call	_isDataInTxBuf	;wreg free
  5999   0057A6  0900               	iorlw	0
  6000   0057A8  B4D8               	btfsc	status,2,c
  6001   0057AA  EFD9  F02B         	goto	u5681
  6002   0057AE  EFDB  F02B         	goto	u5680
  6003   0057B2                     u5681:
  6004   0057B2  EFDD  F02B         	goto	l465
  6005   0057B6                     u5680:
  6006   0057B6  010E               	movlb	14	; () banked
  6007   0057B8  852D               	bsf	45,2,b	;volatile
  6008   0057BA                     l465:
  6009   0057BA  0012               	return		;funcret
  6010   0057BC                     __end_of_sendTxBuf:
  6011                           	callstack 0
  6012                           
  6013 ;; *************** function _isDataInTxBuf *****************
  6014 ;; Defined at:
  6015 ;;		line 83 in file "MazeRobot.X/serial.c"
  6016 ;; Parameters:    Size  Location     Type
  6017 ;;		None
  6018 ;; Auto vars:     Size  Location     Type
  6019 ;;		None
  6020 ;; Return value:  Size  Location     Type
  6021 ;;                  1    wreg      unsigned char 
  6022 ;; Registers used:
  6023 ;;		wreg, status,2, status,0
  6024 ;; Tracked objects:
  6025 ;;		On entry : 0/0
  6026 ;;		On exit  : 0/0
  6027 ;;		Unchanged: 0/0
  6028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6030 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6032 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6033 ;;Total ram usage:        0 bytes
  6034 ;; Hardware stack levels used: 1
  6035 ;; Hardware stack levels required when called: 2
  6036 ;; This function calls:
  6037 ;;		Nothing
  6038 ;; This function is called by:
  6039 ;;		_sendTxBuf
  6040 ;; This function uses a non-reentrant model
  6041 ;;
  6042                           
  6043                           	psect	text23
  6044   0057BC                     __ptext23:
  6045                           	callstack 0
  6046   0057BC                     _isDataInTxBuf:
  6047                           	callstack 27
  6048   0057BC                     
  6049                           ;MazeRobot.X/serial.c: 84:     return (TxBufWriteCnt!=TxBufReadCnt);
  6050   0057BC  5057               	movf	_TxBufReadCnt^0,w,c	;volatile
  6051   0057BE  1858               	xorwf	_TxBufWriteCnt^0,w,c	;volatile
  6052   0057C0  A4D8               	btfss	status,2,c
  6053   0057C2  EFE5  F02B         	goto	u5081
  6054   0057C6  EFE8  F02B         	goto	u5080
  6055   0057CA                     u5081:
  6056   0057CA  0E01               	movlw	1
  6057   0057CC  EFE9  F02B         	goto	u5090
  6058   0057D0                     u5080:
  6059   0057D0  0E00               	movlw	0
  6060   0057D2                     u5090:
  6061   0057D2  0012               	return		;funcret
  6062   0057D4                     __end_of_isDataInTxBuf:
  6063                           	callstack 0
  6064                           
  6065 ;; *************** function _initUSART4 *****************
  6066 ;; Defined at:
  6067 ;;		line 5 in file "MazeRobot.X/serial.c"
  6068 ;; Parameters:    Size  Location     Type
  6069 ;;		None
  6070 ;; Auto vars:     Size  Location     Type
  6071 ;;		None
  6072 ;; Return value:  Size  Location     Type
  6073 ;;                  1    wreg      void 
  6074 ;; Registers used:
  6075 ;;		wreg, status,2
  6076 ;; Tracked objects:
  6077 ;;		On entry : 0/0
  6078 ;;		On exit  : 0/0
  6079 ;;		Unchanged: 0/0
  6080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6082 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6084 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6085 ;;Total ram usage:        0 bytes
  6086 ;; Hardware stack levels used: 1
  6087 ;; Hardware stack levels required when called: 2
  6088 ;; This function calls:
  6089 ;;		Nothing
  6090 ;; This function is called by:
  6091 ;;		_main
  6092 ;; This function uses a non-reentrant model
  6093 ;;
  6094                           
  6095                           	psect	text24
  6096   005762                     __ptext24:
  6097                           	callstack 0
  6098   005762                     _initUSART4:
  6099                           	callstack 28
  6100   005762                     
  6101                           ;MazeRobot.X/serial.c: 9:     RC0PPS = 0x12;
  6102   005762  0E12               	movlw	18
  6103   005764  010E               	movlb	14	; () banked
  6104   005766  6F62               	movwf	98,b	;volatile
  6105                           
  6106                           ;MazeRobot.X/serial.c: 10:     RX4PPS = 0x11;
  6107   005768  0E11               	movlw	17
  6108   00576A  6F15               	movwf	21,b	;volatile
  6109   00576C                     
  6110                           ; BSR set to: 14
  6111                           ;MazeRobot.X/serial.c: 11:     TRISCbits.TRISC1=1;
  6112   00576C  8283               	bsf	131,1,c	;volatile
  6113   00576E                     
  6114                           ; BSR set to: 14
  6115                           ;MazeRobot.X/serial.c: 13:     BAUD4CONbits.BRG16 = 0;
  6116   00576E  97E9               	bcf	233,3,b	;volatile
  6117   005770                     
  6118                           ; BSR set to: 14
  6119                           ;MazeRobot.X/serial.c: 14:     TX4STAbits.BRGH = 0;
  6120   005770  95E8               	bcf	232,2,b	;volatile
  6121                           
  6122                           ;MazeRobot.X/serial.c: 15:     SP4BRGL = 51;
  6123   005772  0E33               	movlw	51
  6124   005774  6FE5               	movwf	229,b	;volatile
  6125                           
  6126                           ;MazeRobot.X/serial.c: 16:     SP4BRGH = 0;
  6127   005776  0E00               	movlw	0
  6128   005778  6FE6               	movwf	230,b	;volatile
  6129   00577A                     
  6130                           ; BSR set to: 14
  6131                           ;MazeRobot.X/serial.c: 18:     RC4STAbits.CREN = 1;
  6132   00577A  89E7               	bsf	231,4,b	;volatile
  6133   00577C                     
  6134                           ; BSR set to: 14
  6135                           ;MazeRobot.X/serial.c: 19:     TX4STAbits.TXEN = 1;
  6136   00577C  8BE8               	bsf	232,5,b	;volatile
  6137   00577E                     
  6138                           ; BSR set to: 14
  6139                           ;MazeRobot.X/serial.c: 20:     RC4STAbits.SPEN = 1;
  6140   00577E  8FE7               	bsf	231,7,b	;volatile
  6141   005780                     
  6142                           ; BSR set to: 14
  6143   005780  0012               	return		;funcret
  6144   005782                     __end_of_initUSART4:
  6145                           	callstack 0
  6146                           
  6147 ;; *************** function _initDCmotorsPWM *****************
  6148 ;; Defined at:
  6149 ;;		line 10 in file "MazeRobot.X/dc_motor.c"
  6150 ;; Parameters:    Size  Location     Type
  6151 ;;  PWMperiod       2    4[COMRAM] int 
  6152 ;; Auto vars:     Size  Location     Type
  6153 ;;		None
  6154 ;; Return value:  Size  Location     Type
  6155 ;;                  1    wreg      void 
  6156 ;; Registers used:
  6157 ;;		wreg, status,2
  6158 ;; Tracked objects:
  6159 ;;		On entry : 0/0
  6160 ;;		On exit  : 0/0
  6161 ;;		Unchanged: 0/0
  6162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6163 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6164 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6166 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6167 ;;Total ram usage:        2 bytes
  6168 ;; Hardware stack levels used: 1
  6169 ;; Hardware stack levels required when called: 2
  6170 ;; This function calls:
  6171 ;;		Nothing
  6172 ;; This function is called by:
  6173 ;;		_main
  6174 ;; This function uses a non-reentrant model
  6175 ;;
  6176                           
  6177                           	psect	text25
  6178   004EB6                     __ptext25:
  6179                           	callstack 0
  6180   004EB6                     _initDCmotorsPWM:
  6181                           	callstack 28
  6182   004EB6                     
  6183                           ;MazeRobot.X/dc_motor.c: 14:     LATEbits.LATE2 = 0;
  6184   004EB6  947D               	bcf	125,2,c	;volatile
  6185                           
  6186                           ;MazeRobot.X/dc_motor.c: 15:     LATEbits.LATE4 = 0;
  6187   004EB8  987D               	bcf	125,4,c	;volatile
  6188                           
  6189                           ;MazeRobot.X/dc_motor.c: 16:     LATCbits.LATC7 = 0;
  6190   004EBA  9E7B               	bcf	123,7,c	;volatile
  6191                           
  6192                           ;MazeRobot.X/dc_motor.c: 17:     LATGbits.LATG6 = 0;
  6193   004EBC  9C7F               	bcf	127,6,c	;volatile
  6194                           
  6195                           ;MazeRobot.X/dc_motor.c: 20:     TRISEbits.TRISE2 = 0 ;
  6196   004EBE  9485               	bcf	133,2,c	;volatile
  6197                           
  6198                           ;MazeRobot.X/dc_motor.c: 21:     TRISEbits.TRISE4 = 0 ;
  6199   004EC0  9885               	bcf	133,4,c	;volatile
  6200                           
  6201                           ;MazeRobot.X/dc_motor.c: 22:     TRISCbits.TRISC7 = 0 ;
  6202   004EC2  9E83               	bcf	131,7,c	;volatile
  6203                           
  6204                           ;MazeRobot.X/dc_motor.c: 23:     TRISGbits.TRISG6 = 0 ;
  6205   004EC4  9C87               	bcf	135,6,c	;volatile
  6206   004EC6                     
  6207                           ;MazeRobot.X/dc_motor.c: 26:     RE2PPS=0x05;
  6208   004EC6  0E05               	movlw	5
  6209   004EC8  010E               	movlb	14	; () banked
  6210   004ECA  6F74               	movwf	116,b	;volatile
  6211                           
  6212                           ;MazeRobot.X/dc_motor.c: 27:     RE4PPS=0x06;
  6213   004ECC  0E06               	movlw	6
  6214   004ECE  6F76               	movwf	118,b	;volatile
  6215                           
  6216                           ;MazeRobot.X/dc_motor.c: 28:     RC7PPS=0x07;
  6217   004ED0  0E07               	movlw	7
  6218   004ED2  6F69               	movwf	105,b	;volatile
  6219                           
  6220                           ;MazeRobot.X/dc_motor.c: 29:     RG6PPS=0x08;
  6221   004ED4  0E08               	movlw	8
  6222   004ED6  6F88               	movwf	136,b	;volatile
  6223                           
  6224                           ;MazeRobot.X/dc_motor.c: 32:     T2CONbits.CKPS=0b011;
  6225   004ED8  50BD               	movf	189,w,c	;volatile
  6226   004EDA  0B8F               	andlw	-113
  6227   004EDC  0930               	iorlw	48
  6228   004EDE  6EBD               	movwf	189,c	;volatile
  6229                           
  6230                           ;MazeRobot.X/dc_motor.c: 33:     T2HLTbits.MODE=0b00000;
  6231   004EE0  0EE0               	movlw	-32
  6232   004EE2  16BE               	andwf	190,f,c	;volatile
  6233                           
  6234                           ;MazeRobot.X/dc_motor.c: 34:     T2CLKCONbits.CS=0b0001;
  6235   004EE4  50BF               	movf	191,w,c	;volatile
  6236   004EE6  0BF0               	andlw	-16
  6237   004EE8  0901               	iorlw	1
  6238   004EEA  6EBF               	movwf	191,c	;volatile
  6239                           
  6240                           ;MazeRobot.X/dc_motor.c: 38:     T2PR=199;
  6241   004EEC  0EC7               	movlw	199
  6242   004EEE  6EBC               	movwf	188,c	;volatile
  6243   004EF0                     
  6244                           ; BSR set to: 14
  6245                           ;MazeRobot.X/dc_motor.c: 39:     T2CONbits.ON=1;
  6246   004EF0  8EBD               	bsf	189,7,c	;volatile
  6247                           
  6248                           ;MazeRobot.X/dc_motor.c: 43:     CCPR1H=0;
  6249   004EF2  0E00               	movlw	0
  6250   004EF4  6EAA               	movwf	170,c	;volatile
  6251                           
  6252                           ;MazeRobot.X/dc_motor.c: 44:     CCPR2H=0;
  6253   004EF6  0E00               	movlw	0
  6254   004EF8  6EA6               	movwf	166,c	;volatile
  6255                           
  6256                           ;MazeRobot.X/dc_motor.c: 45:     CCPR3H=0;
  6257   004EFA  0E00               	movlw	0
  6258   004EFC  010F               	movlb	15	; () banked
  6259   004EFE  6F25               	movwf	37,b	;volatile
  6260                           
  6261                           ;MazeRobot.X/dc_motor.c: 46:     CCPR4H=0;
  6262   004F00  0E00               	movlw	0
  6263   004F02  6F21               	movwf	33,b	;volatile
  6264                           
  6265                           ;MazeRobot.X/dc_motor.c: 49:     CCPTMRS0bits.C1TSEL=0;
  6266   004F04  0EFC               	movlw	-4
  6267   004F06  16AD               	andwf	173,f,c	;volatile
  6268                           
  6269                           ;MazeRobot.X/dc_motor.c: 50:     CCPTMRS0bits.C2TSEL=0;
  6270   004F08  0EF3               	movlw	-13
  6271   004F0A  16AD               	andwf	173,f,c	;volatile
  6272                           
  6273                           ;MazeRobot.X/dc_motor.c: 51:     CCPTMRS0bits.C3TSEL=0;
  6274   004F0C  0ECF               	movlw	-49
  6275   004F0E  16AD               	andwf	173,f,c	;volatile
  6276                           
  6277                           ;MazeRobot.X/dc_motor.c: 52:     CCPTMRS0bits.C4TSEL=0;
  6278   004F10  0E3F               	movlw	-193
  6279   004F12  16AD               	andwf	173,f,c	;volatile
  6280   004F14                     
  6281                           ; BSR set to: 15
  6282                           ;MazeRobot.X/dc_motor.c: 55:     CCP1CONbits.FMT=1;
  6283   004F14  88AB               	bsf	171,4,c	;volatile
  6284                           
  6285                           ;MazeRobot.X/dc_motor.c: 56:     CCP1CONbits.CCP1MODE=0b1100;
  6286   004F16  50AB               	movf	171,w,c	;volatile
  6287   004F18  0BF0               	andlw	-16
  6288   004F1A  090C               	iorlw	12
  6289   004F1C  6EAB               	movwf	171,c	;volatile
  6290   004F1E                     
  6291                           ; BSR set to: 15
  6292                           ;MazeRobot.X/dc_motor.c: 57:     CCP1CONbits.EN=1;
  6293   004F1E  8EAB               	bsf	171,7,c	;volatile
  6294   004F20                     
  6295                           ; BSR set to: 15
  6296                           ;MazeRobot.X/dc_motor.c: 59:     CCP2CONbits.FMT=1;
  6297   004F20  88A7               	bsf	167,4,c	;volatile
  6298                           
  6299                           ;MazeRobot.X/dc_motor.c: 60:     CCP2CONbits.CCP2MODE=0b1100;
  6300   004F22  50A7               	movf	167,w,c	;volatile
  6301   004F24  0BF0               	andlw	-16
  6302   004F26  090C               	iorlw	12
  6303   004F28  6EA7               	movwf	167,c	;volatile
  6304   004F2A                     
  6305                           ; BSR set to: 15
  6306                           ;MazeRobot.X/dc_motor.c: 61:     CCP2CONbits.EN=1;
  6307   004F2A  8EA7               	bsf	167,7,c	;volatile
  6308   004F2C                     
  6309                           ; BSR set to: 15
  6310                           ;MazeRobot.X/dc_motor.c: 63:     CCP3CONbits.FMT=1;
  6311   004F2C  8926               	bsf	38,4,b	;volatile
  6312                           
  6313                           ;MazeRobot.X/dc_motor.c: 64:     CCP3CONbits.CCP3MODE=0b1100;
  6314   004F2E  5126               	movf	38,w,b	;volatile
  6315   004F30  0BF0               	andlw	-16
  6316   004F32  090C               	iorlw	12
  6317   004F34  6F26               	movwf	38,b	;volatile
  6318   004F36                     
  6319                           ; BSR set to: 15
  6320                           ;MazeRobot.X/dc_motor.c: 65:     CCP3CONbits.EN=1;
  6321   004F36  8F26               	bsf	38,7,b	;volatile
  6322   004F38                     
  6323                           ; BSR set to: 15
  6324                           ;MazeRobot.X/dc_motor.c: 67:     CCP4CONbits.FMT=1;
  6325   004F38  8922               	bsf	34,4,b	;volatile
  6326                           
  6327                           ;MazeRobot.X/dc_motor.c: 68:     CCP4CONbits.CCP4MODE=0b1100;
  6328   004F3A  5122               	movf	34,w,b	;volatile
  6329   004F3C  0BF0               	andlw	-16
  6330   004F3E  090C               	iorlw	12
  6331   004F40  6F22               	movwf	34,b	;volatile
  6332   004F42                     
  6333                           ; BSR set to: 15
  6334                           ;MazeRobot.X/dc_motor.c: 69:     CCP4CONbits.EN=1;
  6335   004F42  8F22               	bsf	34,7,b	;volatile
  6336   004F44                     
  6337                           ; BSR set to: 15
  6338   004F44  0012               	return		;funcret
  6339   004F46                     __end_of_initDCmotorsPWM:
  6340                           	callstack 0
  6341                           
  6342 ;; *************** function _color_click_init *****************
  6343 ;; Defined at:
  6344 ;;		line 7 in file "MazeRobot.X/color.c"
  6345 ;; Parameters:    Size  Location     Type
  6346 ;;		None
  6347 ;; Auto vars:     Size  Location     Type
  6348 ;;		None
  6349 ;; Return value:  Size  Location     Type
  6350 ;;                  1    wreg      void 
  6351 ;; Registers used:
  6352 ;;		wreg, status,2, status,0, cstack
  6353 ;; Tracked objects:
  6354 ;;		On entry : 0/0
  6355 ;;		On exit  : 0/0
  6356 ;;		Unchanged: 0/0
  6357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6360 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6361 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6362 ;;Total ram usage:        1 bytes
  6363 ;; Hardware stack levels used: 1
  6364 ;; Hardware stack levels required when called: 5
  6365 ;; This function calls:
  6366 ;;		_I2C_2_Master_Init
  6367 ;;		_color_writetoaddr
  6368 ;; This function is called by:
  6369 ;;		_main
  6370 ;; This function uses a non-reentrant model
  6371 ;;
  6372                           
  6373                           	psect	text26
  6374   005606                     __ptext26:
  6375                           	callstack 0
  6376   005606                     _color_click_init:
  6377                           	callstack 25
  6378   005606                     
  6379                           ;MazeRobot.X/color.c: 10:     I2C_2_Master_Init();
  6380   005606  EC4B  F02B         	call	_I2C_2_Master_Init	;wreg free
  6381   00560A                     
  6382                           ;MazeRobot.X/color.c: 13:   color_writetoaddr(0x00, 0x01);
  6383   00560A  0E01               	movlw	1
  6384   00560C  6E07               	movwf	color_writetoaddr@value^0,c
  6385   00560E  0E00               	movlw	0
  6386   005610  ECC1  F02B         	call	_color_writetoaddr
  6387   005614                     
  6388                           ;MazeRobot.X/color.c: 14:     _delay((unsigned long)((3)*(64000000/4000.0)));
  6389   005614  0E3F               	movlw	63
  6390   005616  6E09               	movwf	??_color_click_init^0,c
  6391   005618  0E55               	movlw	85
  6392   00561A                     u6767:
  6393   00561A  2EE8               	decfsz	wreg,f,c
  6394   00561C  D7FE               	bra	u6767
  6395   00561E  2E09               	decfsz	??_color_click_init^0,f,c
  6396   005620  D7FC               	bra	u6767
  6397   005622  F000               	nop	
  6398   005624                     
  6399                           ;MazeRobot.X/color.c: 17:  color_writetoaddr(0x00, 0x03);
  6400   005624  0E03               	movlw	3
  6401   005626  6E07               	movwf	color_writetoaddr@value^0,c
  6402   005628  0E00               	movlw	0
  6403   00562A  ECC1  F02B         	call	_color_writetoaddr
  6404   00562E                     
  6405                           ;MazeRobot.X/color.c: 20:  color_writetoaddr(0x01, 0xD5);
  6406   00562E  0ED5               	movlw	213
  6407   005630  6E07               	movwf	color_writetoaddr@value^0,c
  6408   005632  0E01               	movlw	1
  6409   005634  ECC1  F02B         	call	_color_writetoaddr
  6410   005638  0012               	return		;funcret
  6411   00563A                     __end_of_color_click_init:
  6412                           	callstack 0
  6413                           
  6414 ;; *************** function _color_writetoaddr *****************
  6415 ;; Defined at:
  6416 ;;		line 24 in file "MazeRobot.X/color.c"
  6417 ;; Parameters:    Size  Location     Type
  6418 ;;  address         1    wreg     unsigned char 
  6419 ;;  value           1    6[COMRAM] unsigned char 
  6420 ;; Auto vars:     Size  Location     Type
  6421 ;;  address         1    7[COMRAM] unsigned char 
  6422 ;; Return value:  Size  Location     Type
  6423 ;;                  1    wreg      void 
  6424 ;; Registers used:
  6425 ;;		wreg, status,2, status,0, cstack
  6426 ;; Tracked objects:
  6427 ;;		On entry : 0/0
  6428 ;;		On exit  : 0/0
  6429 ;;		Unchanged: 0/0
  6430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6431 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6432 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6434 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6435 ;;Total ram usage:        2 bytes
  6436 ;; Hardware stack levels used: 1
  6437 ;; Hardware stack levels required when called: 4
  6438 ;; This function calls:
  6439 ;;		_I2C_2_Master_Start
  6440 ;;		_I2C_2_Master_Stop
  6441 ;;		_I2C_2_Master_Write
  6442 ;; This function is called by:
  6443 ;;		_color_click_init
  6444 ;; This function uses a non-reentrant model
  6445 ;;
  6446                           
  6447                           	psect	text27
  6448   005782                     __ptext27:
  6449                           	callstack 0
  6450   005782                     _color_writetoaddr:
  6451                           	callstack 25
  6452                           
  6453                           ;incstack = 0
  6454                           ;color_writetoaddr@address stored from wreg
  6455   005782  6E08               	movwf	color_writetoaddr@address^0,c
  6456   005784                     
  6457                           ;MazeRobot.X/color.c: 25:     I2C_2_Master_Start();
  6458   005784  EC01  F02C         	call	_I2C_2_Master_Start	;wreg free
  6459                           
  6460                           ;MazeRobot.X/color.c: 26:     I2C_2_Master_Write(0x52 | 0x00);
  6461   005788  0E52               	movlw	82
  6462   00578A  ECF6  F02B         	call	_I2C_2_Master_Write
  6463                           
  6464                           ;MazeRobot.X/color.c: 27:     I2C_2_Master_Write(0x80 | address);
  6465   00578E  5008               	movf	color_writetoaddr@address^0,w,c
  6466   005790  0980               	iorlw	128
  6467   005792  ECF6  F02B         	call	_I2C_2_Master_Write
  6468                           
  6469                           ;MazeRobot.X/color.c: 28:     I2C_2_Master_Write(value);
  6470   005796  5007               	movf	color_writetoaddr@value^0,w,c
  6471   005798  ECF6  F02B         	call	_I2C_2_Master_Write
  6472                           
  6473                           ;MazeRobot.X/color.c: 29:     I2C_2_Master_Stop();
  6474   00579C  ECFC  F02B         	call	_I2C_2_Master_Stop	;wreg free
  6475   0057A0  0012               	return		;funcret
  6476   0057A2                     __end_of_color_writetoaddr:
  6477                           	callstack 0
  6478                           
  6479 ;; *************** function _I2C_2_Master_Init *****************
  6480 ;; Defined at:
  6481 ;;		line 4 in file "MazeRobot.X/i2c.c"
  6482 ;; Parameters:    Size  Location     Type
  6483 ;;		None
  6484 ;; Auto vars:     Size  Location     Type
  6485 ;;		None
  6486 ;; Return value:  Size  Location     Type
  6487 ;;                  1    wreg      void 
  6488 ;; Registers used:
  6489 ;;		wreg, status,2
  6490 ;; Tracked objects:
  6491 ;;		On entry : 0/0
  6492 ;;		On exit  : 0/0
  6493 ;;		Unchanged: 0/0
  6494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6498 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6499 ;;Total ram usage:        0 bytes
  6500 ;; Hardware stack levels used: 1
  6501 ;; Hardware stack levels required when called: 2
  6502 ;; This function calls:
  6503 ;;		Nothing
  6504 ;; This function is called by:
  6505 ;;		_color_click_init
  6506 ;; This function uses a non-reentrant model
  6507 ;;
  6508                           
  6509                           	psect	text28
  6510   005696                     __ptext28:
  6511                           	callstack 0
  6512   005696                     _I2C_2_Master_Init:
  6513                           	callstack 27
  6514   005696                     
  6515                           ;MazeRobot.X/i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  6516   005696  010E               	movlb	14	; () banked
  6517   005698  51D9               	movf	217,w,b	;volatile
  6518   00569A  0BF0               	andlw	-16
  6519   00569C  0908               	iorlw	8
  6520   00569E  6FD9               	movwf	217,b	;volatile
  6521   0056A0                     
  6522                           ; BSR set to: 14
  6523                           ;MazeRobot.X/i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  6524   0056A0  8BD9               	bsf	217,5,b	;volatile
  6525                           
  6526                           ;MazeRobot.X/i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  6527   0056A2  0E9F               	movlw	159
  6528   0056A4  6FD6               	movwf	214,b	;volatile
  6529   0056A6                     
  6530                           ; BSR set to: 14
  6531                           ;MazeRobot.X/i2c.c: 12:   TRISDbits.TRISD5 = 1;
  6532   0056A6  8A84               	bsf	132,5,c	;volatile
  6533   0056A8                     
  6534                           ; BSR set to: 14
  6535                           ;MazeRobot.X/i2c.c: 13:   TRISDbits.TRISD6 = 1;
  6536   0056A8  8C84               	bsf	132,6,c	;volatile
  6537   0056AA                     
  6538                           ; BSR set to: 14
  6539                           ;MazeRobot.X/i2c.c: 14:   ANSELDbits.ANSELD5=0;
  6540   0056AA  9BA7               	bcf	167,5,b	;volatile
  6541   0056AC                     
  6542                           ; BSR set to: 14
  6543                           ;MazeRobot.X/i2c.c: 15:   ANSELDbits.ANSELD6=0;
  6544   0056AC  9DA7               	bcf	167,6,b	;volatile
  6545                           
  6546                           ;MazeRobot.X/i2c.c: 16:   SSP2DATPPS=0x1D;
  6547   0056AE  0E1D               	movlw	29
  6548   0056B0  6F1D               	movwf	29,b	;volatile
  6549                           
  6550                           ;MazeRobot.X/i2c.c: 17:   SSP2CLKPPS=0x1E;
  6551   0056B2  0E1E               	movlw	30
  6552   0056B4  6F1C               	movwf	28,b	;volatile
  6553                           
  6554                           ;MazeRobot.X/i2c.c: 18:   RD5PPS=0x1C;
  6555   0056B6  0E1C               	movlw	28
  6556   0056B8  6F6F               	movwf	111,b	;volatile
  6557                           
  6558                           ;MazeRobot.X/i2c.c: 19:   RD6PPS=0x1B;
  6559   0056BA  0E1B               	movlw	27
  6560   0056BC  6F70               	movwf	112,b	;volatile
  6561   0056BE                     
  6562                           ; BSR set to: 14
  6563   0056BE  0012               	return		;funcret
  6564   0056C0                     __end_of_I2C_2_Master_Init:
  6565                           	callstack 0
  6566                           
  6567 ;; *************** function _colorDetect *****************
  6568 ;; Defined at:
  6569 ;;		line 129 in file "MazeRobot.X/color.c"
  6570 ;; Parameters:    Size  Location     Type
  6571 ;;  clearRef        4    0[BANK0 ] void 
  6572 ;;  ambientRGBVa    2    4[BANK0 ] PTR struct RGB
  6573 ;;		 -> main@ambientRGBVal(8), 
  6574 ;;  whiteRGBVal     2    6[BANK0 ] PTR struct RGB
  6575 ;;		 -> main@whiteRGBVal(8), 
  6576 ;;  mL              2    8[BANK0 ] PTR struct DC_motor
  6577 ;;		 -> main@motorLeft(9), 
  6578 ;;  mR              2   10[BANK0 ] PTR struct DC_motor
  6579 ;;		 -> main@motorRight(9), 
  6580 ;; Auto vars:     Size  Location     Type
  6581 ;;  RGBVal          8   30[BANK0 ] struct RGB
  6582 ;;  bluePrint       4   46[BANK0 ] float 
  6583 ;;  greenPrint      4   42[BANK0 ] float 
  6584 ;;  redPrint        4   38[BANK0 ] float 
  6585 ;;  whiteB          4   20[BANK0 ] float 
  6586 ;;  whiteG          4   16[BANK0 ] float 
  6587 ;;  whiteR          4   12[BANK0 ] float 
  6588 ;;  whiteC          4    0        float 
  6589 ;;  ambientB        2   28[BANK0 ] unsigned int 
  6590 ;;  ambientG        2   26[BANK0 ] unsigned int 
  6591 ;;  ambientR        2   24[BANK0 ] unsigned int 
  6592 ;; Return value:  Size  Location     Type
  6593 ;;                  1    wreg      void 
  6594 ;; Registers used:
  6595 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6596 ;; Tracked objects:
  6597 ;;		On entry : 0/0
  6598 ;;		On exit  : 0/0
  6599 ;;		Unchanged: 0/0
  6600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6601 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6602 ;;      Locals:         0      38       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6603 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6604 ;;      Totals:         2      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6605 ;;Total ram usage:       52 bytes
  6606 ;; Hardware stack levels used: 1
  6607 ;; Hardware stack levels required when called: 7
  6608 ;; This function calls:
  6609 ;;		___fldiv
  6610 ;;		___flge
  6611 ;;		___flmul
  6612 ;;		___flsub
  6613 ;;		___xxtofl
  6614 ;;		_getColor
  6615 ;;		_reverseSquareLeft
  6616 ;;		_reverseSquareRight
  6617 ;;		_turnLeft_135
  6618 ;;		_turnLeft_90
  6619 ;;		_turnRight_135
  6620 ;;		_turnRight_90
  6621 ;;		_turn_180
  6622 ;; This function is called by:
  6623 ;;		_main
  6624 ;; This function uses a non-reentrant model
  6625 ;;
  6626                           
  6627                           	psect	text29
  6628   000E1C                     __ptext29:
  6629                           	callstack 0
  6630   000E1C                     _colorDetect:
  6631                           	callstack 23
  6632   000E1C                     
  6633                           ;MazeRobot.X/color.c: 132:         RGB RGBVal;;MazeRobot.X/color.c: 133:         getColo
      +                          r(&RGBVal);
  6634   000E1C  0E7E               	movlw	low colorDetect@RGBVal
  6635   000E1E  6E10               	movwf	getColor@v^0,c
  6636   000E20  0E00               	movlw	high colorDetect@RGBVal
  6637   000E22  6E11               	movwf	(getColor@v+1)^0,c
  6638   000E24  ECCF  F028         	call	_getColor	;wreg free
  6639   000E28                     
  6640                           ;MazeRobot.X/color.c: 135:         unsigned int ambientR = ambientRGBVal->R;
  6641   000E28  C064  FFD9         	movff	colorDetect@ambientRGBVal,fsr2l
  6642   000E2C  C065  FFDA         	movff	colorDetect@ambientRGBVal+1,fsr2h
  6643   000E30  CFDE F078          	movff	postinc2,colorDetect@ambientR
  6644   000E34  CFDD F079          	movff	postdec2,colorDetect@ambientR+1
  6645   000E38                     
  6646                           ;MazeRobot.X/color.c: 136:         unsigned int ambientG = ambientRGBVal->G;
  6647   000E38  0100               	movlb	0	; () banked
  6648   000E3A  EE20 F002          	lfsr	2,2
  6649   000E3E  5164               	movf	colorDetect@ambientRGBVal& (0+255),w,b
  6650   000E40  26D9               	addwf	fsr2l,f,c
  6651   000E42  5165               	movf	(colorDetect@ambientRGBVal+1)& (0+255),w,b
  6652   000E44  22DA               	addwfc	fsr2h,f,c
  6653   000E46  CFDE F07A          	movff	postinc2,colorDetect@ambientG
  6654   000E4A  CFDD F07B          	movff	postdec2,colorDetect@ambientG+1
  6655   000E4E                     
  6656                           ; BSR set to: 0
  6657                           ;MazeRobot.X/color.c: 137:         unsigned int ambientB = ambientRGBVal->B;
  6658   000E4E  EE20 F004          	lfsr	2,4
  6659   000E52  5164               	movf	colorDetect@ambientRGBVal& (0+255),w,b
  6660   000E54  26D9               	addwf	fsr2l,f,c
  6661   000E56  5165               	movf	(colorDetect@ambientRGBVal+1)& (0+255),w,b
  6662   000E58  22DA               	addwfc	fsr2h,f,c
  6663   000E5A  CFDE F07C          	movff	postinc2,colorDetect@ambientB
  6664   000E5E  CFDD F07D          	movff	postdec2,colorDetect@ambientB+1
  6665   000E62                     
  6666                           ; BSR set to: 0
  6667                           ;MazeRobot.X/color.c: 139:         float whiteR = whiteRGBVal->R;
  6668   000E62  C066  FFD9         	movff	colorDetect@whiteRGBVal,fsr2l
  6669   000E66  C067  FFDA         	movff	colorDetect@whiteRGBVal+1,fsr2h
  6670   000E6A  CFDE F04F          	movff	postinc2,??_colorDetect
  6671   000E6E  CFDD F050          	movff	postdec2,??_colorDetect+1
  6672   000E72  C04F  F005         	movff	??_colorDetect,___xxtofl@val
  6673   000E76  C050  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  6674   000E7A  6A07               	clrf	(___xxtofl@val+2)^0,c
  6675   000E7C  6A08               	clrf	(___xxtofl@val+3)^0,c
  6676   000E7E  0E00               	movlw	0
  6677   000E80  ECEE  F01C         	call	___xxtofl
  6678   000E84  C005  F06C         	movff	?___xxtofl,colorDetect@whiteR
  6679   000E88  C006  F06D         	movff	?___xxtofl+1,colorDetect@whiteR+1
  6680   000E8C  C007  F06E         	movff	?___xxtofl+2,colorDetect@whiteR+2
  6681   000E90  C008  F06F         	movff	?___xxtofl+3,colorDetect@whiteR+3
  6682   000E94                     
  6683                           ;MazeRobot.X/color.c: 140:         float whiteG = whiteRGBVal->G;
  6684   000E94  0100               	movlb	0	; () banked
  6685   000E96  EE20 F002          	lfsr	2,2
  6686   000E9A  5166               	movf	colorDetect@whiteRGBVal& (0+255),w,b
  6687   000E9C  26D9               	addwf	fsr2l,f,c
  6688   000E9E  5167               	movf	(colorDetect@whiteRGBVal+1)& (0+255),w,b
  6689   000EA0  22DA               	addwfc	fsr2h,f,c
  6690   000EA2  CFDE F04F          	movff	postinc2,??_colorDetect
  6691   000EA6  CFDD F050          	movff	postdec2,??_colorDetect+1
  6692   000EAA  C04F  F005         	movff	??_colorDetect,___xxtofl@val
  6693   000EAE  C050  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  6694   000EB2  6A07               	clrf	(___xxtofl@val+2)^0,c
  6695   000EB4  6A08               	clrf	(___xxtofl@val+3)^0,c
  6696   000EB6  0E00               	movlw	0
  6697   000EB8  ECEE  F01C         	call	___xxtofl
  6698   000EBC  C005  F070         	movff	?___xxtofl,colorDetect@whiteG
  6699   000EC0  C006  F071         	movff	?___xxtofl+1,colorDetect@whiteG+1
  6700   000EC4  C007  F072         	movff	?___xxtofl+2,colorDetect@whiteG+2
  6701   000EC8  C008  F073         	movff	?___xxtofl+3,colorDetect@whiteG+3
  6702   000ECC                     
  6703                           ;MazeRobot.X/color.c: 141:         float whiteB = whiteRGBVal->B;
  6704   000ECC  0100               	movlb	0	; () banked
  6705   000ECE  EE20 F004          	lfsr	2,4
  6706   000ED2  5166               	movf	colorDetect@whiteRGBVal& (0+255),w,b
  6707   000ED4  26D9               	addwf	fsr2l,f,c
  6708   000ED6  5167               	movf	(colorDetect@whiteRGBVal+1)& (0+255),w,b
  6709   000ED8  22DA               	addwfc	fsr2h,f,c
  6710   000EDA  CFDE F04F          	movff	postinc2,??_colorDetect
  6711   000EDE  CFDD F050          	movff	postdec2,??_colorDetect+1
  6712   000EE2  C04F  F005         	movff	??_colorDetect,___xxtofl@val
  6713   000EE6  C050  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  6714   000EEA  6A07               	clrf	(___xxtofl@val+2)^0,c
  6715   000EEC  6A08               	clrf	(___xxtofl@val+3)^0,c
  6716   000EEE  0E00               	movlw	0
  6717   000EF0  ECEE  F01C         	call	___xxtofl
  6718   000EF4  C005  F074         	movff	?___xxtofl,colorDetect@whiteB
  6719   000EF8  C006  F075         	movff	?___xxtofl+1,colorDetect@whiteB+1
  6720   000EFC  C007  F076         	movff	?___xxtofl+2,colorDetect@whiteB+2
  6721   000F00  C008  F077         	movff	?___xxtofl+3,colorDetect@whiteB+3
  6722   000F04  0100               	movlb	0	; () banked
  6723   000F06  EE20 F006          	lfsr	2,6
  6724   000F0A  5166               	movf	colorDetect@whiteRGBVal& (0+255),w,b
  6725   000F0C  26D9               	addwf	fsr2l,f,c
  6726   000F0E  5167               	movf	(colorDetect@whiteRGBVal+1)& (0+255),w,b
  6727   000F10  22DA               	addwfc	fsr2h,f,c
  6728   000F12  CFDE F04F          	movff	postinc2,??_colorDetect
  6729   000F16  CFDD F050          	movff	postdec2,??_colorDetect+1
  6730   000F1A  C04F  F005         	movff	??_colorDetect,___xxtofl@val
  6731   000F1E  C050  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  6732   000F22  6A07               	clrf	(___xxtofl@val+2)^0,c
  6733   000F24  6A08               	clrf	(___xxtofl@val+3)^0,c
  6734   000F26  0E00               	movlw	0
  6735   000F28  ECEE  F01C         	call	___xxtofl
  6736   000F2C                     
  6737                           ;MazeRobot.X/color.c: 144:         float redPrint = (RGBVal.R-ambientR)/((whiteR-(float)
      +                          ambientR)*(clearRef));
  6738   000F2C  0100               	movlb	0	; () banked
  6739   000F2E  5178               	movf	colorDetect@ambientR& (0+255),w,b
  6740   000F30  5D7E               	subwf	colorDetect@RGBVal& (0+255),w,b
  6741   000F32  6E4F               	movwf	??_colorDetect^0,c
  6742   000F34  5179               	movf	(colorDetect@ambientR+1)& (0+255),w,b
  6743   000F36  597F               	subwfb	(colorDetect@RGBVal+1)& (0+255),w,b
  6744   000F38  6E50               	movwf	(??_colorDetect+1)^0,c
  6745   000F3A  C04F  F005         	movff	??_colorDetect,___xxtofl@val
  6746   000F3E  C050  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  6747   000F42  6A07               	clrf	(___xxtofl@val+2)^0,c
  6748   000F44  6A08               	clrf	(___xxtofl@val+3)^0,c
  6749   000F46  0E00               	movlw	0
  6750   000F48  ECEE  F01C         	call	___xxtofl
  6751   000F4C  C005  F036         	movff	?___xxtofl,___fldiv@b
  6752   000F50  C006  F037         	movff	?___xxtofl+1,___fldiv@b+1
  6753   000F54  C007  F038         	movff	?___xxtofl+2,___fldiv@b+2
  6754   000F58  C008  F039         	movff	?___xxtofl+3,___fldiv@b+3
  6755   000F5C  C060  F019         	movff	colorDetect@clearRef,___flmul@a
  6756   000F60  C061  F01A         	movff	colorDetect@clearRef+1,___flmul@a+1
  6757   000F64  C062  F01B         	movff	colorDetect@clearRef+2,___flmul@a+2
  6758   000F68  C063  F01C         	movff	colorDetect@clearRef+3,___flmul@a+3
  6759   000F6C  C078  F005         	movff	colorDetect@ambientR,___xxtofl@val
  6760   000F70  C079  F006         	movff	colorDetect@ambientR+1,___xxtofl@val+1
  6761   000F74  6A07               	clrf	(___xxtofl@val+2)^0,c
  6762   000F76  6A08               	clrf	(___xxtofl@val+3)^0,c
  6763   000F78  0E00               	movlw	0
  6764   000F7A  ECEE  F01C         	call	___xxtofl
  6765   000F7E  C005  F032         	movff	?___xxtofl,___flsub@a
  6766   000F82  C006  F033         	movff	?___xxtofl+1,___flsub@a+1
  6767   000F86  C007  F034         	movff	?___xxtofl+2,___flsub@a+2
  6768   000F8A  C008  F035         	movff	?___xxtofl+3,___flsub@a+3
  6769   000F8E  C06C  F02E         	movff	colorDetect@whiteR,___flsub@b
  6770   000F92  C06D  F02F         	movff	colorDetect@whiteR+1,___flsub@b+1
  6771   000F96  C06E  F030         	movff	colorDetect@whiteR+2,___flsub@b+2
  6772   000F9A  C06F  F031         	movff	colorDetect@whiteR+3,___flsub@b+3
  6773   000F9E  EC3F  F02A         	call	___flsub	;wreg free
  6774   000FA2  C02E  F015         	movff	?___flsub,___flmul@b
  6775   000FA6  C02F  F016         	movff	?___flsub+1,___flmul@b+1
  6776   000FAA  C030  F017         	movff	?___flsub+2,___flmul@b+2
  6777   000FAE  C031  F018         	movff	?___flsub+3,___flmul@b+3
  6778   000FB2  EC1C  F014         	call	___flmul	;wreg free
  6779   000FB6  C015  F03A         	movff	?___flmul,___fldiv@a
  6780   000FBA  C016  F03B         	movff	?___flmul+1,___fldiv@a+1
  6781   000FBE  C017  F03C         	movff	?___flmul+2,___fldiv@a+2
  6782   000FC2  C018  F03D         	movff	?___flmul+3,___fldiv@a+3
  6783   000FC6  EC31  F016         	call	___fldiv	;wreg free
  6784   000FCA  C036  F086         	movff	?___fldiv,colorDetect@redPrint
  6785   000FCE  C037  F087         	movff	?___fldiv+1,colorDetect@redPrint+1
  6786   000FD2  C038  F088         	movff	?___fldiv+2,colorDetect@redPrint+2
  6787   000FD6  C039  F089         	movff	?___fldiv+3,colorDetect@redPrint+3
  6788   000FDA                     
  6789                           ;MazeRobot.X/color.c: 145:         float greenPrint = (RGBVal.G-ambientG)/((whiteG-(floa
      +                          t)ambientG)*(clearRef));
  6790   000FDA  0100               	movlb	0	; () banked
  6791   000FDC  517A               	movf	colorDetect@ambientG& (0+255),w,b
  6792   000FDE  5D80               	subwf	(colorDetect@RGBVal+2)& (0+255),w,b
  6793   000FE0  6E4F               	movwf	??_colorDetect^0,c
  6794   000FE2  517B               	movf	(colorDetect@ambientG+1)& (0+255),w,b
  6795   000FE4  5981               	subwfb	(colorDetect@RGBVal+3)& (0+255),w,b
  6796   000FE6  6E50               	movwf	(??_colorDetect+1)^0,c
  6797   000FE8  C04F  F005         	movff	??_colorDetect,___xxtofl@val
  6798   000FEC  C050  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  6799   000FF0  6A07               	clrf	(___xxtofl@val+2)^0,c
  6800   000FF2  6A08               	clrf	(___xxtofl@val+3)^0,c
  6801   000FF4  0E00               	movlw	0
  6802   000FF6  ECEE  F01C         	call	___xxtofl
  6803   000FFA  C005  F036         	movff	?___xxtofl,___fldiv@b
  6804   000FFE  C006  F037         	movff	?___xxtofl+1,___fldiv@b+1
  6805   001002  C007  F038         	movff	?___xxtofl+2,___fldiv@b+2
  6806   001006  C008  F039         	movff	?___xxtofl+3,___fldiv@b+3
  6807   00100A  C060  F019         	movff	colorDetect@clearRef,___flmul@a
  6808   00100E  C061  F01A         	movff	colorDetect@clearRef+1,___flmul@a+1
  6809   001012  C062  F01B         	movff	colorDetect@clearRef+2,___flmul@a+2
  6810   001016  C063  F01C         	movff	colorDetect@clearRef+3,___flmul@a+3
  6811   00101A  C07A  F005         	movff	colorDetect@ambientG,___xxtofl@val
  6812   00101E  C07B  F006         	movff	colorDetect@ambientG+1,___xxtofl@val+1
  6813   001022  6A07               	clrf	(___xxtofl@val+2)^0,c
  6814   001024  6A08               	clrf	(___xxtofl@val+3)^0,c
  6815   001026  0E00               	movlw	0
  6816   001028  ECEE  F01C         	call	___xxtofl
  6817   00102C  C005  F032         	movff	?___xxtofl,___flsub@a
  6818   001030  C006  F033         	movff	?___xxtofl+1,___flsub@a+1
  6819   001034  C007  F034         	movff	?___xxtofl+2,___flsub@a+2
  6820   001038  C008  F035         	movff	?___xxtofl+3,___flsub@a+3
  6821   00103C  C070  F02E         	movff	colorDetect@whiteG,___flsub@b
  6822   001040  C071  F02F         	movff	colorDetect@whiteG+1,___flsub@b+1
  6823   001044  C072  F030         	movff	colorDetect@whiteG+2,___flsub@b+2
  6824   001048  C073  F031         	movff	colorDetect@whiteG+3,___flsub@b+3
  6825   00104C  EC3F  F02A         	call	___flsub	;wreg free
  6826   001050  C02E  F015         	movff	?___flsub,___flmul@b
  6827   001054  C02F  F016         	movff	?___flsub+1,___flmul@b+1
  6828   001058  C030  F017         	movff	?___flsub+2,___flmul@b+2
  6829   00105C  C031  F018         	movff	?___flsub+3,___flmul@b+3
  6830   001060  EC1C  F014         	call	___flmul	;wreg free
  6831   001064  C015  F03A         	movff	?___flmul,___fldiv@a
  6832   001068  C016  F03B         	movff	?___flmul+1,___fldiv@a+1
  6833   00106C  C017  F03C         	movff	?___flmul+2,___fldiv@a+2
  6834   001070  C018  F03D         	movff	?___flmul+3,___fldiv@a+3
  6835   001074  EC31  F016         	call	___fldiv	;wreg free
  6836   001078  C036  F08A         	movff	?___fldiv,colorDetect@greenPrint
  6837   00107C  C037  F08B         	movff	?___fldiv+1,colorDetect@greenPrint+1
  6838   001080  C038  F08C         	movff	?___fldiv+2,colorDetect@greenPrint+2
  6839   001084  C039  F08D         	movff	?___fldiv+3,colorDetect@greenPrint+3
  6840   001088                     
  6841                           ;MazeRobot.X/color.c: 146:         float bluePrint = (RGBVal.B-ambientB)/((whiteB-(float
      +                          )ambientB)*(clearRef));
  6842   001088  0100               	movlb	0	; () banked
  6843   00108A  517C               	movf	colorDetect@ambientB& (0+255),w,b
  6844   00108C  5D82               	subwf	(colorDetect@RGBVal+4)& (0+255),w,b
  6845   00108E  6E4F               	movwf	??_colorDetect^0,c
  6846   001090  517D               	movf	(colorDetect@ambientB+1)& (0+255),w,b
  6847   001092  5983               	subwfb	(colorDetect@RGBVal+5)& (0+255),w,b
  6848   001094  6E50               	movwf	(??_colorDetect+1)^0,c
  6849   001096  C04F  F005         	movff	??_colorDetect,___xxtofl@val
  6850   00109A  C050  F006         	movff	??_colorDetect+1,___xxtofl@val+1
  6851   00109E  6A07               	clrf	(___xxtofl@val+2)^0,c
  6852   0010A0  6A08               	clrf	(___xxtofl@val+3)^0,c
  6853   0010A2  0E00               	movlw	0
  6854   0010A4  ECEE  F01C         	call	___xxtofl
  6855   0010A8  C005  F036         	movff	?___xxtofl,___fldiv@b
  6856   0010AC  C006  F037         	movff	?___xxtofl+1,___fldiv@b+1
  6857   0010B0  C007  F038         	movff	?___xxtofl+2,___fldiv@b+2
  6858   0010B4  C008  F039         	movff	?___xxtofl+3,___fldiv@b+3
  6859   0010B8  C060  F019         	movff	colorDetect@clearRef,___flmul@a
  6860   0010BC  C061  F01A         	movff	colorDetect@clearRef+1,___flmul@a+1
  6861   0010C0  C062  F01B         	movff	colorDetect@clearRef+2,___flmul@a+2
  6862   0010C4  C063  F01C         	movff	colorDetect@clearRef+3,___flmul@a+3
  6863   0010C8  C07C  F005         	movff	colorDetect@ambientB,___xxtofl@val
  6864   0010CC  C07D  F006         	movff	colorDetect@ambientB+1,___xxtofl@val+1
  6865   0010D0  6A07               	clrf	(___xxtofl@val+2)^0,c
  6866   0010D2  6A08               	clrf	(___xxtofl@val+3)^0,c
  6867   0010D4  0E00               	movlw	0
  6868   0010D6  ECEE  F01C         	call	___xxtofl
  6869   0010DA  C005  F032         	movff	?___xxtofl,___flsub@a
  6870   0010DE  C006  F033         	movff	?___xxtofl+1,___flsub@a+1
  6871   0010E2  C007  F034         	movff	?___xxtofl+2,___flsub@a+2
  6872   0010E6  C008  F035         	movff	?___xxtofl+3,___flsub@a+3
  6873   0010EA  C074  F02E         	movff	colorDetect@whiteB,___flsub@b
  6874   0010EE  C075  F02F         	movff	colorDetect@whiteB+1,___flsub@b+1
  6875   0010F2  C076  F030         	movff	colorDetect@whiteB+2,___flsub@b+2
  6876   0010F6  C077  F031         	movff	colorDetect@whiteB+3,___flsub@b+3
  6877   0010FA  EC3F  F02A         	call	___flsub	;wreg free
  6878   0010FE  C02E  F015         	movff	?___flsub,___flmul@b
  6879   001102  C02F  F016         	movff	?___flsub+1,___flmul@b+1
  6880   001106  C030  F017         	movff	?___flsub+2,___flmul@b+2
  6881   00110A  C031  F018         	movff	?___flsub+3,___flmul@b+3
  6882   00110E  EC1C  F014         	call	___flmul	;wreg free
  6883   001112  C015  F03A         	movff	?___flmul,___fldiv@a
  6884   001116  C016  F03B         	movff	?___flmul+1,___fldiv@a+1
  6885   00111A  C017  F03C         	movff	?___flmul+2,___fldiv@a+2
  6886   00111E  C018  F03D         	movff	?___flmul+3,___fldiv@a+3
  6887   001122  EC31  F016         	call	___fldiv	;wreg free
  6888   001126  C036  F08E         	movff	?___fldiv,colorDetect@bluePrint
  6889   00112A  C037  F08F         	movff	?___fldiv+1,colorDetect@bluePrint+1
  6890   00112E  C038  F090         	movff	?___fldiv+2,colorDetect@bluePrint+2
  6891   001132  C039  F091         	movff	?___fldiv+3,colorDetect@bluePrint+3
  6892   001136                     
  6893                           ;MazeRobot.X/color.c: 148:         if ((redPrint < 0) | (redPrint > 2)) { redPrint = 0.0
      +                          ;}
  6894   001136  0100               	movlb	0	; () banked
  6895   001138  BF89               	btfsc	(colorDetect@redPrint+3)& (0+255),7,b
  6896   00113A  EFA1  F008         	goto	u6331
  6897   00113E  EFA3  F008         	goto	u6330
  6898   001142                     u6331:
  6899   001142  EFBC  F008         	goto	l5881
  6900   001146                     u6330:
  6901   001146                     
  6902                           ; BSR set to: 0
  6903   001146  0E00               	movlw	0
  6904   001148  6E36               	movwf	___flge@ff1^0,c
  6905   00114A  0E00               	movlw	0
  6906   00114C  6E37               	movwf	(___flge@ff1+1)^0,c
  6907   00114E  0E00               	movlw	0
  6908   001150  6E38               	movwf	(___flge@ff1+2)^0,c
  6909   001152  0E40               	movlw	64
  6910   001154  6E39               	movwf	(___flge@ff1+3)^0,c
  6911   001156  C086  F03A         	movff	colorDetect@redPrint,___flge@ff2
  6912   00115A  C087  F03B         	movff	colorDetect@redPrint+1,___flge@ff2+1
  6913   00115E  C088  F03C         	movff	colorDetect@redPrint+2,___flge@ff2+2
  6914   001162  C089  F03D         	movff	colorDetect@redPrint+3,___flge@ff2+3
  6915   001166  EC91  F023         	call	___flge	;wreg free
  6916   00116A  B0D8               	btfsc	status,0,c
  6917   00116C  EFBA  F008         	goto	u6341
  6918   001170  EFBC  F008         	goto	u6340
  6919   001174                     u6341:
  6920   001174  EFC5  F008         	goto	l5883
  6921   001178                     u6340:
  6922   001178                     l5881:
  6923   001178  0E00               	movlw	0
  6924   00117A  0100               	movlb	0	; () banked
  6925   00117C  6F86               	movwf	colorDetect@redPrint& (0+255),b
  6926   00117E  0E00               	movlw	0
  6927   001180  6F87               	movwf	(colorDetect@redPrint+1)& (0+255),b
  6928   001182  0E00               	movlw	0
  6929   001184  6F88               	movwf	(colorDetect@redPrint+2)& (0+255),b
  6930   001186  0E00               	movlw	0
  6931   001188  6F89               	movwf	(colorDetect@redPrint+3)& (0+255),b
  6932   00118A                     l5883:
  6933                           
  6934                           ;MazeRobot.X/color.c: 149:         if ((greenPrint < 0) | (greenPrint > 2)) {greenPrint 
      +                          = 0.0;}
  6935   00118A  0100               	movlb	0	; () banked
  6936   00118C  BF8D               	btfsc	(colorDetect@greenPrint+3)& (0+255),7,b
  6937   00118E  EFCB  F008         	goto	u6351
  6938   001192  EFCD  F008         	goto	u6350
  6939   001196                     u6351:
  6940   001196  EFE6  F008         	goto	l5887
  6941   00119A                     u6350:
  6942   00119A                     
  6943                           ; BSR set to: 0
  6944   00119A  0E00               	movlw	0
  6945   00119C  6E36               	movwf	___flge@ff1^0,c
  6946   00119E  0E00               	movlw	0
  6947   0011A0  6E37               	movwf	(___flge@ff1+1)^0,c
  6948   0011A2  0E00               	movlw	0
  6949   0011A4  6E38               	movwf	(___flge@ff1+2)^0,c
  6950   0011A6  0E40               	movlw	64
  6951   0011A8  6E39               	movwf	(___flge@ff1+3)^0,c
  6952   0011AA  C08A  F03A         	movff	colorDetect@greenPrint,___flge@ff2
  6953   0011AE  C08B  F03B         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  6954   0011B2  C08C  F03C         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  6955   0011B6  C08D  F03D         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  6956   0011BA  EC91  F023         	call	___flge	;wreg free
  6957   0011BE  B0D8               	btfsc	status,0,c
  6958   0011C0  EFE4  F008         	goto	u6361
  6959   0011C4  EFE6  F008         	goto	u6360
  6960   0011C8                     u6361:
  6961   0011C8  EFEF  F008         	goto	l5889
  6962   0011CC                     u6360:
  6963   0011CC                     l5887:
  6964   0011CC  0E00               	movlw	0
  6965   0011CE  0100               	movlb	0	; () banked
  6966   0011D0  6F8A               	movwf	colorDetect@greenPrint& (0+255),b
  6967   0011D2  0E00               	movlw	0
  6968   0011D4  6F8B               	movwf	(colorDetect@greenPrint+1)& (0+255),b
  6969   0011D6  0E00               	movlw	0
  6970   0011D8  6F8C               	movwf	(colorDetect@greenPrint+2)& (0+255),b
  6971   0011DA  0E00               	movlw	0
  6972   0011DC  6F8D               	movwf	(colorDetect@greenPrint+3)& (0+255),b
  6973   0011DE                     l5889:
  6974                           
  6975                           ;MazeRobot.X/color.c: 150:         if ((bluePrint < 0) | (bluePrint > 2)){ bluePrint = 0
      +                          .0;}
  6976   0011DE  0100               	movlb	0	; () banked
  6977   0011E0  BF91               	btfsc	(colorDetect@bluePrint+3)& (0+255),7,b
  6978   0011E2  EFF5  F008         	goto	u6371
  6979   0011E6  EFF7  F008         	goto	u6370
  6980   0011EA                     u6371:
  6981   0011EA  EF10  F009         	goto	l5893
  6982   0011EE                     u6370:
  6983   0011EE                     
  6984                           ; BSR set to: 0
  6985   0011EE  0E00               	movlw	0
  6986   0011F0  6E36               	movwf	___flge@ff1^0,c
  6987   0011F2  0E00               	movlw	0
  6988   0011F4  6E37               	movwf	(___flge@ff1+1)^0,c
  6989   0011F6  0E00               	movlw	0
  6990   0011F8  6E38               	movwf	(___flge@ff1+2)^0,c
  6991   0011FA  0E40               	movlw	64
  6992   0011FC  6E39               	movwf	(___flge@ff1+3)^0,c
  6993   0011FE  C08E  F03A         	movff	colorDetect@bluePrint,___flge@ff2
  6994   001202  C08F  F03B         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  6995   001206  C090  F03C         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  6996   00120A  C091  F03D         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  6997   00120E  EC91  F023         	call	___flge	;wreg free
  6998   001212  B0D8               	btfsc	status,0,c
  6999   001214  EF0E  F009         	goto	u6381
  7000   001218  EF10  F009         	goto	u6380
  7001   00121C                     u6381:
  7002   00121C  EF19  F009         	goto	l5895
  7003   001220                     u6380:
  7004   001220                     l5893:
  7005   001220  0E00               	movlw	0
  7006   001222  0100               	movlb	0	; () banked
  7007   001224  6F8E               	movwf	colorDetect@bluePrint& (0+255),b
  7008   001226  0E00               	movlw	0
  7009   001228  6F8F               	movwf	(colorDetect@bluePrint+1)& (0+255),b
  7010   00122A  0E00               	movlw	0
  7011   00122C  6F90               	movwf	(colorDetect@bluePrint+2)& (0+255),b
  7012   00122E  0E00               	movlw	0
  7013   001230  6F91               	movwf	(colorDetect@bluePrint+3)& (0+255),b
  7014   001232                     l5895:
  7015                           
  7016                           ;MazeRobot.X/color.c: 153:         if ((redPrint > 0.9) & (greenPrint > 0.9) & (bluePrin
      +                          t > 0.9)){
  7017   001232  0E66               	movlw	102
  7018   001234  6E36               	movwf	___flge@ff1^0,c
  7019   001236  0E66               	movlw	102
  7020   001238  6E37               	movwf	(___flge@ff1+1)^0,c
  7021   00123A  0E66               	movlw	102
  7022   00123C  6E38               	movwf	(___flge@ff1+2)^0,c
  7023   00123E  0E3F               	movlw	63
  7024   001240  6E39               	movwf	(___flge@ff1+3)^0,c
  7025   001242  C086  F03A         	movff	colorDetect@redPrint,___flge@ff2
  7026   001246  C087  F03B         	movff	colorDetect@redPrint+1,___flge@ff2+1
  7027   00124A  C088  F03C         	movff	colorDetect@redPrint+2,___flge@ff2+2
  7028   00124E  C089  F03D         	movff	colorDetect@redPrint+3,___flge@ff2+3
  7029   001252  EC91  F023         	call	___flge	;wreg free
  7030   001256  B0D8               	btfsc	status,0,c
  7031   001258  EF30  F009         	goto	u6391
  7032   00125C  EF32  F009         	goto	u6390
  7033   001260                     u6391:
  7034   001260  EF72  F009         	goto	l5903
  7035   001264                     u6390:
  7036   001264  0E66               	movlw	102
  7037   001266  6E36               	movwf	___flge@ff1^0,c
  7038   001268  0E66               	movlw	102
  7039   00126A  6E37               	movwf	(___flge@ff1+1)^0,c
  7040   00126C  0E66               	movlw	102
  7041   00126E  6E38               	movwf	(___flge@ff1+2)^0,c
  7042   001270  0E3F               	movlw	63
  7043   001272  6E39               	movwf	(___flge@ff1+3)^0,c
  7044   001274  C08A  F03A         	movff	colorDetect@greenPrint,___flge@ff2
  7045   001278  C08B  F03B         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  7046   00127C  C08C  F03C         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  7047   001280  C08D  F03D         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  7048   001284  EC91  F023         	call	___flge	;wreg free
  7049   001288  B0D8               	btfsc	status,0,c
  7050   00128A  EF49  F009         	goto	u6401
  7051   00128E  EF4B  F009         	goto	u6400
  7052   001292                     u6401:
  7053   001292  EF72  F009         	goto	l5903
  7054   001296                     u6400:
  7055   001296  0E66               	movlw	102
  7056   001298  6E36               	movwf	___flge@ff1^0,c
  7057   00129A  0E66               	movlw	102
  7058   00129C  6E37               	movwf	(___flge@ff1+1)^0,c
  7059   00129E  0E66               	movlw	102
  7060   0012A0  6E38               	movwf	(___flge@ff1+2)^0,c
  7061   0012A2  0E3F               	movlw	63
  7062   0012A4  6E39               	movwf	(___flge@ff1+3)^0,c
  7063   0012A6  C08E  F03A         	movff	colorDetect@bluePrint,___flge@ff2
  7064   0012AA  C08F  F03B         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  7065   0012AE  C090  F03C         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  7066   0012B2  C091  F03D         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  7067   0012B6  EC91  F023         	call	___flge	;wreg free
  7068   0012BA  B0D8               	btfsc	status,0,c
  7069   0012BC  EF62  F009         	goto	u6411
  7070   0012C0  EF64  F009         	goto	u6410
  7071   0012C4                     u6411:
  7072   0012C4  EF72  F009         	goto	l5903
  7073   0012C8                     u6410:
  7074   0012C8                     
  7075                           ;MazeRobot.X/color.c: 154:         _delay((unsigned long)((2)*(64000000/4000.0)));
  7076   0012C8  0E2A               	movlw	42
  7077   0012CA  6E4F               	movwf	??_colorDetect^0,c
  7078   0012CC  0E8E               	movlw	142
  7079   0012CE                     u6777:
  7080   0012CE  2EE8               	decfsz	wreg,f,c
  7081   0012D0  D7FE               	bra	u6777
  7082   0012D2  2E4F               	decfsz	??_colorDetect^0,f,c
  7083   0012D4  D7FC               	bra	u6777
  7084                           
  7085                           ;MazeRobot.X/color.c: 156:         _delay((unsigned long)((2)*(64000000/4000.0)));
  7086   0012D6  0E2A               	movlw	42
  7087   0012D8  6E4F               	movwf	??_colorDetect^0,c
  7088   0012DA  0E8E               	movlw	142
  7089   0012DC                     u6787:
  7090   0012DC  2EE8               	decfsz	wreg,f,c
  7091   0012DE  D7FE               	bra	u6787
  7092   0012E0  2E4F               	decfsz	??_colorDetect^0,f,c
  7093   0012E2  D7FC               	bra	u6787
  7094   0012E4                     l5903:
  7095                           
  7096                           ;MazeRobot.X/color.c: 160:         if ((redPrint > 1.5) & (redPrint - greenPrint > 0.8) 
      +                          & (redPrint -bluePrint > 0.8)){
  7097   0012E4  0E00               	movlw	0
  7098   0012E6  6E36               	movwf	___flge@ff1^0,c
  7099   0012E8  0E00               	movlw	0
  7100   0012EA  6E37               	movwf	(___flge@ff1+1)^0,c
  7101   0012EC  0EC0               	movlw	192
  7102   0012EE  6E38               	movwf	(___flge@ff1+2)^0,c
  7103   0012F0  0E3F               	movlw	63
  7104   0012F2  6E39               	movwf	(___flge@ff1+3)^0,c
  7105   0012F4  C086  F03A         	movff	colorDetect@redPrint,___flge@ff2
  7106   0012F8  C087  F03B         	movff	colorDetect@redPrint+1,___flge@ff2+1
  7107   0012FC  C088  F03C         	movff	colorDetect@redPrint+2,___flge@ff2+2
  7108   001300  C089  F03D         	movff	colorDetect@redPrint+3,___flge@ff2+3
  7109   001304  EC91  F023         	call	___flge	;wreg free
  7110   001308  B0D8               	btfsc	status,0,c
  7111   00130A  EF89  F009         	goto	u6421
  7112   00130E  EF8B  F009         	goto	u6420
  7113   001312                     u6421:
  7114   001312  EFF2  F009         	goto	l5913
  7115   001316                     u6420:
  7116   001316  0ECD               	movlw	205
  7117   001318  6E36               	movwf	___flge@ff1^0,c
  7118   00131A  0ECC               	movlw	204
  7119   00131C  6E37               	movwf	(___flge@ff1+1)^0,c
  7120   00131E  0E4C               	movlw	76
  7121   001320  6E38               	movwf	(___flge@ff1+2)^0,c
  7122   001322  0E3F               	movlw	63
  7123   001324  6E39               	movwf	(___flge@ff1+3)^0,c
  7124   001326  C08A  F032         	movff	colorDetect@greenPrint,___flsub@a
  7125   00132A  C08B  F033         	movff	colorDetect@greenPrint+1,___flsub@a+1
  7126   00132E  C08C  F034         	movff	colorDetect@greenPrint+2,___flsub@a+2
  7127   001332  C08D  F035         	movff	colorDetect@greenPrint+3,___flsub@a+3
  7128   001336  C086  F02E         	movff	colorDetect@redPrint,___flsub@b
  7129   00133A  C087  F02F         	movff	colorDetect@redPrint+1,___flsub@b+1
  7130   00133E  C088  F030         	movff	colorDetect@redPrint+2,___flsub@b+2
  7131   001342  C089  F031         	movff	colorDetect@redPrint+3,___flsub@b+3
  7132   001346  EC3F  F02A         	call	___flsub	;wreg free
  7133   00134A  C02E  F03A         	movff	?___flsub,___flge@ff2
  7134   00134E  C02F  F03B         	movff	?___flsub+1,___flge@ff2+1
  7135   001352  C030  F03C         	movff	?___flsub+2,___flge@ff2+2
  7136   001356  C031  F03D         	movff	?___flsub+3,___flge@ff2+3
  7137   00135A  EC91  F023         	call	___flge	;wreg free
  7138   00135E  B0D8               	btfsc	status,0,c
  7139   001360  EFB4  F009         	goto	u6431
  7140   001364  EFB6  F009         	goto	u6430
  7141   001368                     u6431:
  7142   001368  EFF2  F009         	goto	l5913
  7143   00136C                     u6430:
  7144   00136C  0ECD               	movlw	205
  7145   00136E  6E36               	movwf	___flge@ff1^0,c
  7146   001370  0ECC               	movlw	204
  7147   001372  6E37               	movwf	(___flge@ff1+1)^0,c
  7148   001374  0E4C               	movlw	76
  7149   001376  6E38               	movwf	(___flge@ff1+2)^0,c
  7150   001378  0E3F               	movlw	63
  7151   00137A  6E39               	movwf	(___flge@ff1+3)^0,c
  7152   00137C  C08E  F032         	movff	colorDetect@bluePrint,___flsub@a
  7153   001380  C08F  F033         	movff	colorDetect@bluePrint+1,___flsub@a+1
  7154   001384  C090  F034         	movff	colorDetect@bluePrint+2,___flsub@a+2
  7155   001388  C091  F035         	movff	colorDetect@bluePrint+3,___flsub@a+3
  7156   00138C  C086  F02E         	movff	colorDetect@redPrint,___flsub@b
  7157   001390  C087  F02F         	movff	colorDetect@redPrint+1,___flsub@b+1
  7158   001394  C088  F030         	movff	colorDetect@redPrint+2,___flsub@b+2
  7159   001398  C089  F031         	movff	colorDetect@redPrint+3,___flsub@b+3
  7160   00139C  EC3F  F02A         	call	___flsub	;wreg free
  7161   0013A0  C02E  F03A         	movff	?___flsub,___flge@ff2
  7162   0013A4  C02F  F03B         	movff	?___flsub+1,___flge@ff2+1
  7163   0013A8  C030  F03C         	movff	?___flsub+2,___flge@ff2+2
  7164   0013AC  C031  F03D         	movff	?___flsub+3,___flge@ff2+3
  7165   0013B0  EC91  F023         	call	___flge	;wreg free
  7166   0013B4  B0D8               	btfsc	status,0,c
  7167   0013B6  EFDF  F009         	goto	u6441
  7168   0013BA  EFE1  F009         	goto	u6440
  7169   0013BE                     u6441:
  7170   0013BE  EFF2  F009         	goto	l5913
  7171   0013C2                     u6440:
  7172   0013C2                     
  7173                           ;MazeRobot.X/color.c: 161:             turnRight_90(mL,mR);
  7174   0013C2  C068  F01E         	movff	colorDetect@mL,turnRight_90@mL
  7175   0013C6  C069  F01F         	movff	colorDetect@mL+1,turnRight_90@mL+1
  7176   0013CA  C06A  F020         	movff	colorDetect@mR,turnRight_90@mR
  7177   0013CE  C06B  F021         	movff	colorDetect@mR+1,turnRight_90@mR+1
  7178   0013D2  EC32  F021         	call	_turnRight_90	;wreg free
  7179   0013D6                     
  7180                           ;MazeRobot.X/color.c: 162:             _delay((unsigned long)((2)*(64000000/4000.0)));
  7181   0013D6  0E2A               	movlw	42
  7182   0013D8  6E4F               	movwf	??_colorDetect^0,c
  7183   0013DA  0E8E               	movlw	142
  7184   0013DC                     u6797:
  7185   0013DC  2EE8               	decfsz	wreg,f,c
  7186   0013DE  D7FE               	bra	u6797
  7187   0013E0  2E4F               	decfsz	??_colorDetect^0,f,c
  7188   0013E2  D7FC               	bra	u6797
  7189   0013E4                     l5913:
  7190                           
  7191                           ;MazeRobot.X/color.c: 166:         if ((redPrint > 1.3) & (greenPrint > 0.5) & (bluePrin
      +                          t > 0.5)){
  7192   0013E4  0E66               	movlw	102
  7193   0013E6  6E36               	movwf	___flge@ff1^0,c
  7194   0013E8  0E66               	movlw	102
  7195   0013EA  6E37               	movwf	(___flge@ff1+1)^0,c
  7196   0013EC  0EA6               	movlw	166
  7197   0013EE  6E38               	movwf	(___flge@ff1+2)^0,c
  7198   0013F0  0E3F               	movlw	63
  7199   0013F2  6E39               	movwf	(___flge@ff1+3)^0,c
  7200   0013F4  C086  F03A         	movff	colorDetect@redPrint,___flge@ff2
  7201   0013F8  C087  F03B         	movff	colorDetect@redPrint+1,___flge@ff2+1
  7202   0013FC  C088  F03C         	movff	colorDetect@redPrint+2,___flge@ff2+2
  7203   001400  C089  F03D         	movff	colorDetect@redPrint+3,___flge@ff2+3
  7204   001404  EC91  F023         	call	___flge	;wreg free
  7205   001408  B0D8               	btfsc	status,0,c
  7206   00140A  EF09  F00A         	goto	u6451
  7207   00140E  EF0B  F00A         	goto	u6450
  7208   001412                     u6451:
  7209   001412  EF55  F00A         	goto	l5925
  7210   001416                     u6450:
  7211   001416  0E00               	movlw	0
  7212   001418  6E36               	movwf	___flge@ff1^0,c
  7213   00141A  0E00               	movlw	0
  7214   00141C  6E37               	movwf	(___flge@ff1+1)^0,c
  7215   00141E  0E00               	movlw	0
  7216   001420  6E38               	movwf	(___flge@ff1+2)^0,c
  7217   001422  0E3F               	movlw	63
  7218   001424  6E39               	movwf	(___flge@ff1+3)^0,c
  7219   001426  C08A  F03A         	movff	colorDetect@greenPrint,___flge@ff2
  7220   00142A  C08B  F03B         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  7221   00142E  C08C  F03C         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  7222   001432  C08D  F03D         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  7223   001436  EC91  F023         	call	___flge	;wreg free
  7224   00143A  B0D8               	btfsc	status,0,c
  7225   00143C  EF22  F00A         	goto	u6461
  7226   001440  EF24  F00A         	goto	u6460
  7227   001444                     u6461:
  7228   001444  EF55  F00A         	goto	l5925
  7229   001448                     u6460:
  7230   001448  0E00               	movlw	0
  7231   00144A  6E36               	movwf	___flge@ff1^0,c
  7232   00144C  0E00               	movlw	0
  7233   00144E  6E37               	movwf	(___flge@ff1+1)^0,c
  7234   001450  0E00               	movlw	0
  7235   001452  6E38               	movwf	(___flge@ff1+2)^0,c
  7236   001454  0E3F               	movlw	63
  7237   001456  6E39               	movwf	(___flge@ff1+3)^0,c
  7238   001458  C08E  F03A         	movff	colorDetect@bluePrint,___flge@ff2
  7239   00145C  C08F  F03B         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  7240   001460  C090  F03C         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  7241   001464  C091  F03D         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  7242   001468  EC91  F023         	call	___flge	;wreg free
  7243   00146C  B0D8               	btfsc	status,0,c
  7244   00146E  EF3B  F00A         	goto	u6471
  7245   001472  EF3D  F00A         	goto	u6470
  7246   001476                     u6471:
  7247   001476  EF55  F00A         	goto	l5925
  7248   00147A                     u6470:
  7249   00147A                     
  7250                           ;MazeRobot.X/color.c: 167:         _delay((unsigned long)((2)*(64000000/4000.0)));
  7251   00147A  0E2A               	movlw	42
  7252   00147C  6E4F               	movwf	??_colorDetect^0,c
  7253   00147E  0E8E               	movlw	142
  7254   001480                     u6807:
  7255   001480  2EE8               	decfsz	wreg,f,c
  7256   001482  D7FE               	bra	u6807
  7257   001484  2E4F               	decfsz	??_colorDetect^0,f,c
  7258   001486  D7FC               	bra	u6807
  7259   001488                     
  7260                           ;MazeRobot.X/color.c: 168:         turnRight_135(mL,mR);
  7261   001488  C068  F01E         	movff	colorDetect@mL,turnRight_135@mL
  7262   00148C  C069  F01F         	movff	colorDetect@mL+1,turnRight_135@mL+1
  7263   001490  C06A  F020         	movff	colorDetect@mR,turnRight_135@mR
  7264   001494  C06B  F021         	movff	colorDetect@mR+1,turnRight_135@mR+1
  7265   001498  EC93  F020         	call	_turnRight_135	;wreg free
  7266   00149C                     
  7267                           ;MazeRobot.X/color.c: 169:         _delay((unsigned long)((2)*(64000000/4000.0)));
  7268   00149C  0E2A               	movlw	42
  7269   00149E  6E4F               	movwf	??_colorDetect^0,c
  7270   0014A0  0E8E               	movlw	142
  7271   0014A2                     u6817:
  7272   0014A2  2EE8               	decfsz	wreg,f,c
  7273   0014A4  D7FE               	bra	u6817
  7274   0014A6  2E4F               	decfsz	??_colorDetect^0,f,c
  7275   0014A8  D7FC               	bra	u6817
  7276   0014AA                     l5925:
  7277                           
  7278                           ;MazeRobot.X/color.c: 174:         if ((redPrint > 1.0) & (greenPrint > 0.8) & (bluePrin
      +                          t < 0.8)){
  7279   0014AA  0E00               	movlw	0
  7280   0014AC  6E36               	movwf	___flge@ff1^0,c
  7281   0014AE  0E00               	movlw	0
  7282   0014B0  6E37               	movwf	(___flge@ff1+1)^0,c
  7283   0014B2  0E80               	movlw	128
  7284   0014B4  6E38               	movwf	(___flge@ff1+2)^0,c
  7285   0014B6  0E3F               	movlw	63
  7286   0014B8  6E39               	movwf	(___flge@ff1+3)^0,c
  7287   0014BA  C086  F03A         	movff	colorDetect@redPrint,___flge@ff2
  7288   0014BE  C087  F03B         	movff	colorDetect@redPrint+1,___flge@ff2+1
  7289   0014C2  C088  F03C         	movff	colorDetect@redPrint+2,___flge@ff2+2
  7290   0014C6  C089  F03D         	movff	colorDetect@redPrint+3,___flge@ff2+3
  7291   0014CA  EC91  F023         	call	___flge	;wreg free
  7292   0014CE  B0D8               	btfsc	status,0,c
  7293   0014D0  EF6C  F00A         	goto	u6481
  7294   0014D4  EF6E  F00A         	goto	u6480
  7295   0014D8                     u6481:
  7296   0014D8  EFB8  F00A         	goto	l5937
  7297   0014DC                     u6480:
  7298   0014DC  0ECD               	movlw	205
  7299   0014DE  6E36               	movwf	___flge@ff1^0,c
  7300   0014E0  0ECC               	movlw	204
  7301   0014E2  6E37               	movwf	(___flge@ff1+1)^0,c
  7302   0014E4  0E4C               	movlw	76
  7303   0014E6  6E38               	movwf	(___flge@ff1+2)^0,c
  7304   0014E8  0E3F               	movlw	63
  7305   0014EA  6E39               	movwf	(___flge@ff1+3)^0,c
  7306   0014EC  C08A  F03A         	movff	colorDetect@greenPrint,___flge@ff2
  7307   0014F0  C08B  F03B         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  7308   0014F4  C08C  F03C         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  7309   0014F8  C08D  F03D         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  7310   0014FC  EC91  F023         	call	___flge	;wreg free
  7311   001500  B0D8               	btfsc	status,0,c
  7312   001502  EF85  F00A         	goto	u6491
  7313   001506  EF87  F00A         	goto	u6490
  7314   00150A                     u6491:
  7315   00150A  EFB8  F00A         	goto	l5937
  7316   00150E                     u6490:
  7317   00150E  C08E  F036         	movff	colorDetect@bluePrint,___flge@ff1
  7318   001512  C08F  F037         	movff	colorDetect@bluePrint+1,___flge@ff1+1
  7319   001516  C090  F038         	movff	colorDetect@bluePrint+2,___flge@ff1+2
  7320   00151A  C091  F039         	movff	colorDetect@bluePrint+3,___flge@ff1+3
  7321   00151E  0ECD               	movlw	205
  7322   001520  6E3A               	movwf	___flge@ff2^0,c
  7323   001522  0ECC               	movlw	204
  7324   001524  6E3B               	movwf	(___flge@ff2+1)^0,c
  7325   001526  0E4C               	movlw	76
  7326   001528  6E3C               	movwf	(___flge@ff2+2)^0,c
  7327   00152A  0E3F               	movlw	63
  7328   00152C  6E3D               	movwf	(___flge@ff2+3)^0,c
  7329   00152E  EC91  F023         	call	___flge	;wreg free
  7330   001532  B0D8               	btfsc	status,0,c
  7331   001534  EF9E  F00A         	goto	u6501
  7332   001538  EFA0  F00A         	goto	u6500
  7333   00153C                     u6501:
  7334   00153C  EFB8  F00A         	goto	l5937
  7335   001540                     u6500:
  7336   001540                     
  7337                           ;MazeRobot.X/color.c: 176:         _delay((unsigned long)((2)*(64000000/4000.0)));
  7338   001540  0E2A               	movlw	42
  7339   001542  6E4F               	movwf	??_colorDetect^0,c
  7340   001544  0E8E               	movlw	142
  7341   001546                     u6827:
  7342   001546  2EE8               	decfsz	wreg,f,c
  7343   001548  D7FE               	bra	u6827
  7344   00154A  2E4F               	decfsz	??_colorDetect^0,f,c
  7345   00154C  D7FC               	bra	u6827
  7346   00154E                     
  7347                           ;MazeRobot.X/color.c: 177:         reverseSquareRight(mL,mR);
  7348   00154E  C068  F024         	movff	colorDetect@mL,reverseSquareRight@mL
  7349   001552  C069  F025         	movff	colorDetect@mL+1,reverseSquareRight@mL+1
  7350   001556  C06A  F026         	movff	colorDetect@mR,reverseSquareRight@mR
  7351   00155A  C06B  F027         	movff	colorDetect@mR+1,reverseSquareRight@mR+1
  7352   00155E  ECA3  F027         	call	_reverseSquareRight	;wreg free
  7353   001562                     
  7354                           ;MazeRobot.X/color.c: 178:         _delay((unsigned long)((2)*(64000000/4000.0)));
  7355   001562  0E2A               	movlw	42
  7356   001564  6E4F               	movwf	??_colorDetect^0,c
  7357   001566  0E8E               	movlw	142
  7358   001568                     u6837:
  7359   001568  2EE8               	decfsz	wreg,f,c
  7360   00156A  D7FE               	bra	u6837
  7361   00156C  2E4F               	decfsz	??_colorDetect^0,f,c
  7362   00156E  D7FC               	bra	u6837
  7363   001570                     l5937:
  7364                           
  7365                           ;MazeRobot.X/color.c: 182:         if ((bluePrint - redPrint > 0.7) & (bluePrint - green
      +                          Print > 0.3) & (bluePrint > 0.7 )){
  7366   001570  0E33               	movlw	51
  7367   001572  6E36               	movwf	___flge@ff1^0,c
  7368   001574  0E33               	movlw	51
  7369   001576  6E37               	movwf	(___flge@ff1+1)^0,c
  7370   001578  0E33               	movlw	51
  7371   00157A  6E38               	movwf	(___flge@ff1+2)^0,c
  7372   00157C  0E3F               	movlw	63
  7373   00157E  6E39               	movwf	(___flge@ff1+3)^0,c
  7374   001580  C086  F032         	movff	colorDetect@redPrint,___flsub@a
  7375   001584  C087  F033         	movff	colorDetect@redPrint+1,___flsub@a+1
  7376   001588  C088  F034         	movff	colorDetect@redPrint+2,___flsub@a+2
  7377   00158C  C089  F035         	movff	colorDetect@redPrint+3,___flsub@a+3
  7378   001590  C08E  F02E         	movff	colorDetect@bluePrint,___flsub@b
  7379   001594  C08F  F02F         	movff	colorDetect@bluePrint+1,___flsub@b+1
  7380   001598  C090  F030         	movff	colorDetect@bluePrint+2,___flsub@b+2
  7381   00159C  C091  F031         	movff	colorDetect@bluePrint+3,___flsub@b+3
  7382   0015A0  EC3F  F02A         	call	___flsub	;wreg free
  7383   0015A4  C02E  F03A         	movff	?___flsub,___flge@ff2
  7384   0015A8  C02F  F03B         	movff	?___flsub+1,___flge@ff2+1
  7385   0015AC  C030  F03C         	movff	?___flsub+2,___flge@ff2+2
  7386   0015B0  C031  F03D         	movff	?___flsub+3,___flge@ff2+3
  7387   0015B4  EC91  F023         	call	___flge	;wreg free
  7388   0015B8  B0D8               	btfsc	status,0,c
  7389   0015BA  EFE1  F00A         	goto	u6511
  7390   0015BE  EFE3  F00A         	goto	u6510
  7391   0015C2                     u6511:
  7392   0015C2  EF3F  F00B         	goto	l5949
  7393   0015C6                     u6510:
  7394   0015C6  0E9A               	movlw	154
  7395   0015C8  6E36               	movwf	___flge@ff1^0,c
  7396   0015CA  0E99               	movlw	153
  7397   0015CC  6E37               	movwf	(___flge@ff1+1)^0,c
  7398   0015CE  0E99               	movlw	153
  7399   0015D0  6E38               	movwf	(___flge@ff1+2)^0,c
  7400   0015D2  0E3E               	movlw	62
  7401   0015D4  6E39               	movwf	(___flge@ff1+3)^0,c
  7402   0015D6  C08A  F032         	movff	colorDetect@greenPrint,___flsub@a
  7403   0015DA  C08B  F033         	movff	colorDetect@greenPrint+1,___flsub@a+1
  7404   0015DE  C08C  F034         	movff	colorDetect@greenPrint+2,___flsub@a+2
  7405   0015E2  C08D  F035         	movff	colorDetect@greenPrint+3,___flsub@a+3
  7406   0015E6  C08E  F02E         	movff	colorDetect@bluePrint,___flsub@b
  7407   0015EA  C08F  F02F         	movff	colorDetect@bluePrint+1,___flsub@b+1
  7408   0015EE  C090  F030         	movff	colorDetect@bluePrint+2,___flsub@b+2
  7409   0015F2  C091  F031         	movff	colorDetect@bluePrint+3,___flsub@b+3
  7410   0015F6  EC3F  F02A         	call	___flsub	;wreg free
  7411   0015FA  C02E  F03A         	movff	?___flsub,___flge@ff2
  7412   0015FE  C02F  F03B         	movff	?___flsub+1,___flge@ff2+1
  7413   001602  C030  F03C         	movff	?___flsub+2,___flge@ff2+2
  7414   001606  C031  F03D         	movff	?___flsub+3,___flge@ff2+3
  7415   00160A  EC91  F023         	call	___flge	;wreg free
  7416   00160E  B0D8               	btfsc	status,0,c
  7417   001610  EF0C  F00B         	goto	u6521
  7418   001614  EF0E  F00B         	goto	u6520
  7419   001618                     u6521:
  7420   001618  EF3F  F00B         	goto	l5949
  7421   00161C                     u6520:
  7422   00161C  0E33               	movlw	51
  7423   00161E  6E36               	movwf	___flge@ff1^0,c
  7424   001620  0E33               	movlw	51
  7425   001622  6E37               	movwf	(___flge@ff1+1)^0,c
  7426   001624  0E33               	movlw	51
  7427   001626  6E38               	movwf	(___flge@ff1+2)^0,c
  7428   001628  0E3F               	movlw	63
  7429   00162A  6E39               	movwf	(___flge@ff1+3)^0,c
  7430   00162C  C08E  F03A         	movff	colorDetect@bluePrint,___flge@ff2
  7431   001630  C08F  F03B         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  7432   001634  C090  F03C         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  7433   001638  C091  F03D         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  7434   00163C  EC91  F023         	call	___flge	;wreg free
  7435   001640  B0D8               	btfsc	status,0,c
  7436   001642  EF25  F00B         	goto	u6531
  7437   001646  EF27  F00B         	goto	u6530
  7438   00164A                     u6531:
  7439   00164A  EF3F  F00B         	goto	l5949
  7440   00164E                     u6530:
  7441   00164E                     
  7442                           ;MazeRobot.X/color.c: 183:         _delay((unsigned long)((2)*(64000000/4000.0)));
  7443   00164E  0E2A               	movlw	42
  7444   001650  6E4F               	movwf	??_colorDetect^0,c
  7445   001652  0E8E               	movlw	142
  7446   001654                     u6847:
  7447   001654  2EE8               	decfsz	wreg,f,c
  7448   001656  D7FE               	bra	u6847
  7449   001658  2E4F               	decfsz	??_colorDetect^0,f,c
  7450   00165A  D7FC               	bra	u6847
  7451   00165C                     
  7452                           ;MazeRobot.X/color.c: 184:         turn_180(mL,mR);
  7453   00165C  C068  F01E         	movff	colorDetect@mL,turn_180@mL
  7454   001660  C069  F01F         	movff	colorDetect@mL+1,turn_180@mL+1
  7455   001664  C06A  F020         	movff	colorDetect@mR,turn_180@mR
  7456   001668  C06B  F021         	movff	colorDetect@mR+1,turn_180@mR+1
  7457   00166C  ECF4  F01F         	call	_turn_180	;wreg free
  7458   001670                     
  7459                           ;MazeRobot.X/color.c: 185:         _delay((unsigned long)((2)*(64000000/4000.0)));
  7460   001670  0E2A               	movlw	42
  7461   001672  6E4F               	movwf	??_colorDetect^0,c
  7462   001674  0E8E               	movlw	142
  7463   001676                     u6857:
  7464   001676  2EE8               	decfsz	wreg,f,c
  7465   001678  D7FE               	bra	u6857
  7466   00167A  2E4F               	decfsz	??_colorDetect^0,f,c
  7467   00167C  D7FC               	bra	u6857
  7468   00167E                     l5949:
  7469                           
  7470                           ;MazeRobot.X/color.c: 189:         if ((greenPrint - redPrint > 0.4 ) & (greenPrint > 1)
      +                           & (greenPrint - bluePrint > 0.4 )){
  7471   00167E  0ECD               	movlw	205
  7472   001680  6E36               	movwf	___flge@ff1^0,c
  7473   001682  0ECC               	movlw	204
  7474   001684  6E37               	movwf	(___flge@ff1+1)^0,c
  7475   001686  0ECC               	movlw	204
  7476   001688  6E38               	movwf	(___flge@ff1+2)^0,c
  7477   00168A  0E3E               	movlw	62
  7478   00168C  6E39               	movwf	(___flge@ff1+3)^0,c
  7479   00168E  C086  F032         	movff	colorDetect@redPrint,___flsub@a
  7480   001692  C087  F033         	movff	colorDetect@redPrint+1,___flsub@a+1
  7481   001696  C088  F034         	movff	colorDetect@redPrint+2,___flsub@a+2
  7482   00169A  C089  F035         	movff	colorDetect@redPrint+3,___flsub@a+3
  7483   00169E  C08A  F02E         	movff	colorDetect@greenPrint,___flsub@b
  7484   0016A2  C08B  F02F         	movff	colorDetect@greenPrint+1,___flsub@b+1
  7485   0016A6  C08C  F030         	movff	colorDetect@greenPrint+2,___flsub@b+2
  7486   0016AA  C08D  F031         	movff	colorDetect@greenPrint+3,___flsub@b+3
  7487   0016AE  EC3F  F02A         	call	___flsub	;wreg free
  7488   0016B2  C02E  F03A         	movff	?___flsub,___flge@ff2
  7489   0016B6  C02F  F03B         	movff	?___flsub+1,___flge@ff2+1
  7490   0016BA  C030  F03C         	movff	?___flsub+2,___flge@ff2+2
  7491   0016BE  C031  F03D         	movff	?___flsub+3,___flge@ff2+3
  7492   0016C2  EC91  F023         	call	___flge	;wreg free
  7493   0016C6  B0D8               	btfsc	status,0,c
  7494   0016C8  EF68  F00B         	goto	u6541
  7495   0016CC  EF6A  F00B         	goto	u6540
  7496   0016D0                     u6541:
  7497   0016D0  EFC6  F00B         	goto	l5961
  7498   0016D4                     u6540:
  7499   0016D4  0E00               	movlw	0
  7500   0016D6  6E36               	movwf	___flge@ff1^0,c
  7501   0016D8  0E00               	movlw	0
  7502   0016DA  6E37               	movwf	(___flge@ff1+1)^0,c
  7503   0016DC  0E80               	movlw	128
  7504   0016DE  6E38               	movwf	(___flge@ff1+2)^0,c
  7505   0016E0  0E3F               	movlw	63
  7506   0016E2  6E39               	movwf	(___flge@ff1+3)^0,c
  7507   0016E4  C08A  F03A         	movff	colorDetect@greenPrint,___flge@ff2
  7508   0016E8  C08B  F03B         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  7509   0016EC  C08C  F03C         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  7510   0016F0  C08D  F03D         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  7511   0016F4  EC91  F023         	call	___flge	;wreg free
  7512   0016F8  B0D8               	btfsc	status,0,c
  7513   0016FA  EF81  F00B         	goto	u6551
  7514   0016FE  EF83  F00B         	goto	u6550
  7515   001702                     u6551:
  7516   001702  EFC6  F00B         	goto	l5961
  7517   001706                     u6550:
  7518   001706  0ECD               	movlw	205
  7519   001708  6E36               	movwf	___flge@ff1^0,c
  7520   00170A  0ECC               	movlw	204
  7521   00170C  6E37               	movwf	(___flge@ff1+1)^0,c
  7522   00170E  0ECC               	movlw	204
  7523   001710  6E38               	movwf	(___flge@ff1+2)^0,c
  7524   001712  0E3E               	movlw	62
  7525   001714  6E39               	movwf	(___flge@ff1+3)^0,c
  7526   001716  C08E  F032         	movff	colorDetect@bluePrint,___flsub@a
  7527   00171A  C08F  F033         	movff	colorDetect@bluePrint+1,___flsub@a+1
  7528   00171E  C090  F034         	movff	colorDetect@bluePrint+2,___flsub@a+2
  7529   001722  C091  F035         	movff	colorDetect@bluePrint+3,___flsub@a+3
  7530   001726  C08A  F02E         	movff	colorDetect@greenPrint,___flsub@b
  7531   00172A  C08B  F02F         	movff	colorDetect@greenPrint+1,___flsub@b+1
  7532   00172E  C08C  F030         	movff	colorDetect@greenPrint+2,___flsub@b+2
  7533   001732  C08D  F031         	movff	colorDetect@greenPrint+3,___flsub@b+3
  7534   001736  EC3F  F02A         	call	___flsub	;wreg free
  7535   00173A  C02E  F03A         	movff	?___flsub,___flge@ff2
  7536   00173E  C02F  F03B         	movff	?___flsub+1,___flge@ff2+1
  7537   001742  C030  F03C         	movff	?___flsub+2,___flge@ff2+2
  7538   001746  C031  F03D         	movff	?___flsub+3,___flge@ff2+3
  7539   00174A  EC91  F023         	call	___flge	;wreg free
  7540   00174E  B0D8               	btfsc	status,0,c
  7541   001750  EFAC  F00B         	goto	u6561
  7542   001754  EFAE  F00B         	goto	u6560
  7543   001758                     u6561:
  7544   001758  EFC6  F00B         	goto	l5961
  7545   00175C                     u6560:
  7546   00175C                     
  7547                           ;MazeRobot.X/color.c: 190:         _delay((unsigned long)((2)*(64000000/4000.0)));
  7548   00175C  0E2A               	movlw	42
  7549   00175E  6E4F               	movwf	??_colorDetect^0,c
  7550   001760  0E8E               	movlw	142
  7551   001762                     u6867:
  7552   001762  2EE8               	decfsz	wreg,f,c
  7553   001764  D7FE               	bra	u6867
  7554   001766  2E4F               	decfsz	??_colorDetect^0,f,c
  7555   001768  D7FC               	bra	u6867
  7556   00176A                     
  7557                           ;MazeRobot.X/color.c: 191:         turnLeft_90(mL,mR);
  7558   00176A  C068  F01E         	movff	colorDetect@mL,turnLeft_90@mL
  7559   00176E  C069  F01F         	movff	colorDetect@mL+1,turnLeft_90@mL+1
  7560   001772  C06A  F020         	movff	colorDetect@mR,turnLeft_90@mR
  7561   001776  C06B  F021         	movff	colorDetect@mR+1,turnLeft_90@mR+1
  7562   00177A  ECD1  F021         	call	_turnLeft_90	;wreg free
  7563   00177E                     
  7564                           ;MazeRobot.X/color.c: 192:         _delay((unsigned long)((2)*(64000000/4000.0)));
  7565   00177E  0E2A               	movlw	42
  7566   001780  6E4F               	movwf	??_colorDetect^0,c
  7567   001782  0E8E               	movlw	142
  7568   001784                     u6877:
  7569   001784  2EE8               	decfsz	wreg,f,c
  7570   001786  D7FE               	bra	u6877
  7571   001788  2E4F               	decfsz	??_colorDetect^0,f,c
  7572   00178A  D7FC               	bra	u6877
  7573   00178C                     l5961:
  7574                           
  7575                           ;MazeRobot.X/color.c: 196:         if ((redPrint < 0.7) & (greenPrint > 1.0)& (bluePrint
      +                           > 1.0)){
  7576   00178C  C086  F036         	movff	colorDetect@redPrint,___flge@ff1
  7577   001790  C087  F037         	movff	colorDetect@redPrint+1,___flge@ff1+1
  7578   001794  C088  F038         	movff	colorDetect@redPrint+2,___flge@ff1+2
  7579   001798  C089  F039         	movff	colorDetect@redPrint+3,___flge@ff1+3
  7580   00179C  0E33               	movlw	51
  7581   00179E  6E3A               	movwf	___flge@ff2^0,c
  7582   0017A0  0E33               	movlw	51
  7583   0017A2  6E3B               	movwf	(___flge@ff2+1)^0,c
  7584   0017A4  0E33               	movlw	51
  7585   0017A6  6E3C               	movwf	(___flge@ff2+2)^0,c
  7586   0017A8  0E3F               	movlw	63
  7587   0017AA  6E3D               	movwf	(___flge@ff2+3)^0,c
  7588   0017AC  EC91  F023         	call	___flge	;wreg free
  7589   0017B0  B0D8               	btfsc	status,0,c
  7590   0017B2  EFDD  F00B         	goto	u6571
  7591   0017B6  EFDF  F00B         	goto	u6570
  7592   0017BA                     u6571:
  7593   0017BA  EF29  F00C         	goto	l5973
  7594   0017BE                     u6570:
  7595   0017BE  0E00               	movlw	0
  7596   0017C0  6E36               	movwf	___flge@ff1^0,c
  7597   0017C2  0E00               	movlw	0
  7598   0017C4  6E37               	movwf	(___flge@ff1+1)^0,c
  7599   0017C6  0E80               	movlw	128
  7600   0017C8  6E38               	movwf	(___flge@ff1+2)^0,c
  7601   0017CA  0E3F               	movlw	63
  7602   0017CC  6E39               	movwf	(___flge@ff1+3)^0,c
  7603   0017CE  C08A  F03A         	movff	colorDetect@greenPrint,___flge@ff2
  7604   0017D2  C08B  F03B         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  7605   0017D6  C08C  F03C         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  7606   0017DA  C08D  F03D         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  7607   0017DE  EC91  F023         	call	___flge	;wreg free
  7608   0017E2  B0D8               	btfsc	status,0,c
  7609   0017E4  EFF6  F00B         	goto	u6581
  7610   0017E8  EFF8  F00B         	goto	u6580
  7611   0017EC                     u6581:
  7612   0017EC  EF29  F00C         	goto	l5973
  7613   0017F0                     u6580:
  7614   0017F0  0E00               	movlw	0
  7615   0017F2  6E36               	movwf	___flge@ff1^0,c
  7616   0017F4  0E00               	movlw	0
  7617   0017F6  6E37               	movwf	(___flge@ff1+1)^0,c
  7618   0017F8  0E80               	movlw	128
  7619   0017FA  6E38               	movwf	(___flge@ff1+2)^0,c
  7620   0017FC  0E3F               	movlw	63
  7621   0017FE  6E39               	movwf	(___flge@ff1+3)^0,c
  7622   001800  C08E  F03A         	movff	colorDetect@bluePrint,___flge@ff2
  7623   001804  C08F  F03B         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  7624   001808  C090  F03C         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  7625   00180C  C091  F03D         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  7626   001810  EC91  F023         	call	___flge	;wreg free
  7627   001814  B0D8               	btfsc	status,0,c
  7628   001816  EF0F  F00C         	goto	u6591
  7629   00181A  EF11  F00C         	goto	u6590
  7630   00181E                     u6591:
  7631   00181E  EF29  F00C         	goto	l5973
  7632   001822                     u6590:
  7633   001822                     
  7634                           ;MazeRobot.X/color.c: 197:         _delay((unsigned long)((2)*(64000000/4000.0)));
  7635   001822  0E2A               	movlw	42
  7636   001824  6E4F               	movwf	??_colorDetect^0,c
  7637   001826  0E8E               	movlw	142
  7638   001828                     u6887:
  7639   001828  2EE8               	decfsz	wreg,f,c
  7640   00182A  D7FE               	bra	u6887
  7641   00182C  2E4F               	decfsz	??_colorDetect^0,f,c
  7642   00182E  D7FC               	bra	u6887
  7643   001830                     
  7644                           ;MazeRobot.X/color.c: 198:         turnLeft_135(mL,mR);
  7645   001830  C068  F01E         	movff	colorDetect@mL,turnLeft_135@mL
  7646   001834  C069  F01F         	movff	colorDetect@mL+1,turnLeft_135@mL+1
  7647   001838  C06A  F020         	movff	colorDetect@mR,turnLeft_135@mR
  7648   00183C  C06B  F021         	movff	colorDetect@mR+1,turnLeft_135@mR+1
  7649   001840  EC70  F022         	call	_turnLeft_135	;wreg free
  7650   001844                     
  7651                           ;MazeRobot.X/color.c: 199:         _delay((unsigned long)((2)*(64000000/4000.0)));
  7652   001844  0E2A               	movlw	42
  7653   001846  6E4F               	movwf	??_colorDetect^0,c
  7654   001848  0E8E               	movlw	142
  7655   00184A                     u6897:
  7656   00184A  2EE8               	decfsz	wreg,f,c
  7657   00184C  D7FE               	bra	u6897
  7658   00184E  2E4F               	decfsz	??_colorDetect^0,f,c
  7659   001850  D7FC               	bra	u6897
  7660   001852                     l5973:
  7661                           
  7662                           ;MazeRobot.X/color.c: 203:         if ((redPrint > 0.95) & (greenPrint > 0.8 & greenPrin
      +                          t < 0.9) & (bluePrint > 0.8 & bluePrint < 0.95)){
  7663   001852  0E33               	movlw	51
  7664   001854  6E36               	movwf	___flge@ff1^0,c
  7665   001856  0E33               	movlw	51
  7666   001858  6E37               	movwf	(___flge@ff1+1)^0,c
  7667   00185A  0E73               	movlw	115
  7668   00185C  6E38               	movwf	(___flge@ff1+2)^0,c
  7669   00185E  0E3F               	movlw	63
  7670   001860  6E39               	movwf	(___flge@ff1+3)^0,c
  7671   001862  C086  F03A         	movff	colorDetect@redPrint,___flge@ff2
  7672   001866  C087  F03B         	movff	colorDetect@redPrint+1,___flge@ff2+1
  7673   00186A  C088  F03C         	movff	colorDetect@redPrint+2,___flge@ff2+2
  7674   00186E  C089  F03D         	movff	colorDetect@redPrint+3,___flge@ff2+3
  7675   001872  EC91  F023         	call	___flge	;wreg free
  7676   001876  B0D8               	btfsc	status,0,c
  7677   001878  EF40  F00C         	goto	u6601
  7678   00187C  EF42  F00C         	goto	u6600
  7679   001880                     u6601:
  7680   001880  EFBE  F00C         	goto	l87
  7681   001884                     u6600:
  7682   001884  0ECD               	movlw	205
  7683   001886  6E36               	movwf	___flge@ff1^0,c
  7684   001888  0ECC               	movlw	204
  7685   00188A  6E37               	movwf	(___flge@ff1+1)^0,c
  7686   00188C  0E4C               	movlw	76
  7687   00188E  6E38               	movwf	(___flge@ff1+2)^0,c
  7688   001890  0E3F               	movlw	63
  7689   001892  6E39               	movwf	(___flge@ff1+3)^0,c
  7690   001894  C08A  F03A         	movff	colorDetect@greenPrint,___flge@ff2
  7691   001898  C08B  F03B         	movff	colorDetect@greenPrint+1,___flge@ff2+1
  7692   00189C  C08C  F03C         	movff	colorDetect@greenPrint+2,___flge@ff2+2
  7693   0018A0  C08D  F03D         	movff	colorDetect@greenPrint+3,___flge@ff2+3
  7694   0018A4  EC91  F023         	call	___flge	;wreg free
  7695   0018A8  B0D8               	btfsc	status,0,c
  7696   0018AA  EF59  F00C         	goto	u6611
  7697   0018AE  EF5B  F00C         	goto	u6610
  7698   0018B2                     u6611:
  7699   0018B2  EFBE  F00C         	goto	l87
  7700   0018B6                     u6610:
  7701   0018B6  C08A  F036         	movff	colorDetect@greenPrint,___flge@ff1
  7702   0018BA  C08B  F037         	movff	colorDetect@greenPrint+1,___flge@ff1+1
  7703   0018BE  C08C  F038         	movff	colorDetect@greenPrint+2,___flge@ff1+2
  7704   0018C2  C08D  F039         	movff	colorDetect@greenPrint+3,___flge@ff1+3
  7705   0018C6  0E66               	movlw	102
  7706   0018C8  6E3A               	movwf	___flge@ff2^0,c
  7707   0018CA  0E66               	movlw	102
  7708   0018CC  6E3B               	movwf	(___flge@ff2+1)^0,c
  7709   0018CE  0E66               	movlw	102
  7710   0018D0  6E3C               	movwf	(___flge@ff2+2)^0,c
  7711   0018D2  0E3F               	movlw	63
  7712   0018D4  6E3D               	movwf	(___flge@ff2+3)^0,c
  7713   0018D6  EC91  F023         	call	___flge	;wreg free
  7714   0018DA  B0D8               	btfsc	status,0,c
  7715   0018DC  EF72  F00C         	goto	u6621
  7716   0018E0  EF74  F00C         	goto	u6620
  7717   0018E4                     u6621:
  7718   0018E4  EFBE  F00C         	goto	l87
  7719   0018E8                     u6620:
  7720   0018E8  0ECD               	movlw	205
  7721   0018EA  6E36               	movwf	___flge@ff1^0,c
  7722   0018EC  0ECC               	movlw	204
  7723   0018EE  6E37               	movwf	(___flge@ff1+1)^0,c
  7724   0018F0  0E4C               	movlw	76
  7725   0018F2  6E38               	movwf	(___flge@ff1+2)^0,c
  7726   0018F4  0E3F               	movlw	63
  7727   0018F6  6E39               	movwf	(___flge@ff1+3)^0,c
  7728   0018F8  C08E  F03A         	movff	colorDetect@bluePrint,___flge@ff2
  7729   0018FC  C08F  F03B         	movff	colorDetect@bluePrint+1,___flge@ff2+1
  7730   001900  C090  F03C         	movff	colorDetect@bluePrint+2,___flge@ff2+2
  7731   001904  C091  F03D         	movff	colorDetect@bluePrint+3,___flge@ff2+3
  7732   001908  EC91  F023         	call	___flge	;wreg free
  7733   00190C  B0D8               	btfsc	status,0,c
  7734   00190E  EF8B  F00C         	goto	u6631
  7735   001912  EF8D  F00C         	goto	u6630
  7736   001916                     u6631:
  7737   001916  EFBE  F00C         	goto	l87
  7738   00191A                     u6630:
  7739   00191A  C08E  F036         	movff	colorDetect@bluePrint,___flge@ff1
  7740   00191E  C08F  F037         	movff	colorDetect@bluePrint+1,___flge@ff1+1
  7741   001922  C090  F038         	movff	colorDetect@bluePrint+2,___flge@ff1+2
  7742   001926  C091  F039         	movff	colorDetect@bluePrint+3,___flge@ff1+3
  7743   00192A  0E33               	movlw	51
  7744   00192C  6E3A               	movwf	___flge@ff2^0,c
  7745   00192E  0E33               	movlw	51
  7746   001930  6E3B               	movwf	(___flge@ff2+1)^0,c
  7747   001932  0E73               	movlw	115
  7748   001934  6E3C               	movwf	(___flge@ff2+2)^0,c
  7749   001936  0E3F               	movlw	63
  7750   001938  6E3D               	movwf	(___flge@ff2+3)^0,c
  7751   00193A  EC91  F023         	call	___flge	;wreg free
  7752   00193E  B0D8               	btfsc	status,0,c
  7753   001940  EFA4  F00C         	goto	u6641
  7754   001944  EFA6  F00C         	goto	u6640
  7755   001948                     u6641:
  7756   001948  EFBE  F00C         	goto	l87
  7757   00194C                     u6640:
  7758   00194C                     
  7759                           ;MazeRobot.X/color.c: 204:         _delay((unsigned long)((2)*(64000000/4000.0)));
  7760   00194C  0E2A               	movlw	42
  7761   00194E  6E4F               	movwf	??_colorDetect^0,c
  7762   001950  0E8E               	movlw	142
  7763   001952                     u6907:
  7764   001952  2EE8               	decfsz	wreg,f,c
  7765   001954  D7FE               	bra	u6907
  7766   001956  2E4F               	decfsz	??_colorDetect^0,f,c
  7767   001958  D7FC               	bra	u6907
  7768   00195A                     
  7769                           ;MazeRobot.X/color.c: 205:         reverseSquareLeft(mL,mR);
  7770   00195A  C068  F024         	movff	colorDetect@mL,reverseSquareLeft@mL
  7771   00195E  C069  F025         	movff	colorDetect@mL+1,reverseSquareLeft@mL+1
  7772   001962  C06A  F026         	movff	colorDetect@mR,reverseSquareLeft@mR
  7773   001966  C06B  F027         	movff	colorDetect@mR+1,reverseSquareLeft@mR+1
  7774   00196A  ECE4  F027         	call	_reverseSquareLeft	;wreg free
  7775   00196E                     
  7776                           ;MazeRobot.X/color.c: 206:         _delay((unsigned long)((2)*(64000000/4000.0)));
  7777   00196E  0E2A               	movlw	42
  7778   001970  6E4F               	movwf	??_colorDetect^0,c
  7779   001972  0E8E               	movlw	142
  7780   001974                     u6917:
  7781   001974  2EE8               	decfsz	wreg,f,c
  7782   001976  D7FE               	bra	u6917
  7783   001978  2E4F               	decfsz	??_colorDetect^0,f,c
  7784   00197A  D7FC               	bra	u6917
  7785   00197C                     l87:
  7786   00197C  0012               	return		;funcret
  7787   00197E                     __end_of_colorDetect:
  7788                           	callstack 0
  7789                           
  7790 ;; *************** function _turn_180 *****************
  7791 ;; Defined at:
  7792 ;;		line 295 in file "MazeRobot.X/dc_motor.c"
  7793 ;; Parameters:    Size  Location     Type
  7794 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  7795 ;;		 -> main@motorLeft(9), 
  7796 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  7797 ;;		 -> main@motorRight(9), 
  7798 ;; Auto vars:     Size  Location     Type
  7799 ;;		None
  7800 ;; Return value:  Size  Location     Type
  7801 ;;                  1    wreg      void 
  7802 ;; Registers used:
  7803 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7804 ;; Tracked objects:
  7805 ;;		On entry : 0/0
  7806 ;;		On exit  : 0/0
  7807 ;;		Unchanged: 0/0
  7808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7809 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7811 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7812 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7813 ;;Total ram usage:        6 bytes
  7814 ;; Hardware stack levels used: 1
  7815 ;; Hardware stack levels required when called: 5
  7816 ;; This function calls:
  7817 ;;		_reverse
  7818 ;;		_setMotorPWM
  7819 ;;		_stop
  7820 ;; This function is called by:
  7821 ;;		_colorDetect
  7822 ;; This function uses a non-reentrant model
  7823 ;;
  7824                           
  7825                           	psect	text30
  7826   003FE8                     __ptext30:
  7827                           	callstack 0
  7828   003FE8                     _turn_180:
  7829                           	callstack 24
  7830   003FE8                     
  7831                           ;MazeRobot.X/dc_motor.c: 295: void turn_180(DC_motor *mL, DC_motor *mR);MazeRobot.X/dc_m
      +                          otor.c: 296: {;MazeRobot.X/dc_motor.c: 298:     stop(mL, mR);
  7832   003FE8  C01E  F018         	movff	turn_180@mL,stop@mL
  7833   003FEC  C01F  F019         	movff	turn_180@mL+1,stop@mL+1
  7834   003FF0  C020  F01A         	movff	turn_180@mR,stop@mR
  7835   003FF4  C021  F01B         	movff	turn_180@mR+1,stop@mR+1
  7836   003FF8  ECAF  F026         	call	_stop	;wreg free
  7837   003FFC                     
  7838                           ;MazeRobot.X/dc_motor.c: 299:     _delay((unsigned long)((100)*(64000000/4000.0)));
  7839   003FFC  0E09               	movlw	9
  7840   003FFE  6E23               	movwf	(??_turn_180+1)^0,c
  7841   004000  0E1E               	movlw	30
  7842   004002  6E22               	movwf	??_turn_180^0,c
  7843   004004  0EE4               	movlw	228
  7844   004006                     u6927:
  7845   004006  2EE8               	decfsz	wreg,f,c
  7846   004008  D7FE               	bra	u6927
  7847   00400A  2E22               	decfsz	??_turn_180^0,f,c
  7848   00400C  D7FC               	bra	u6927
  7849   00400E  2E23               	decfsz	(??_turn_180+1)^0,f,c
  7850   004010  D7FA               	bra	u6927
  7851   004012  D000               	nop2	
  7852   004014                     
  7853                           ;MazeRobot.X/dc_motor.c: 301:     reverse(mL, mR);
  7854   004014  C01E  F018         	movff	turn_180@mL,reverse@mL
  7855   004018  C01F  F019         	movff	turn_180@mL+1,reverse@mL+1
  7856   00401C  C020  F01A         	movff	turn_180@mR,reverse@mR
  7857   004020  C021  F01B         	movff	turn_180@mR+1,reverse@mR+1
  7858   004024  EC76  F025         	call	_reverse	;wreg free
  7859                           
  7860                           ;MazeRobot.X/dc_motor.c: 302:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  7861   004028  0E11               	movlw	17
  7862   00402A  6E23               	movwf	(??_turn_180+1)^0,c
  7863   00402C  0E3C               	movlw	60
  7864   00402E  6E22               	movwf	??_turn_180^0,c
  7865   004030  0ECB               	movlw	203
  7866   004032                     u6937:
  7867   004032  2EE8               	decfsz	wreg,f,c
  7868   004034  D7FE               	bra	u6937
  7869   004036  2E22               	decfsz	??_turn_180^0,f,c
  7870   004038  D7FC               	bra	u6937
  7871   00403A  2E23               	decfsz	(??_turn_180+1)^0,f,c
  7872   00403C  D7FA               	bra	u6937
  7873   00403E  F000               	nop	
  7874   004040                     
  7875                           ;MazeRobot.X/dc_motor.c: 304:     stop(mL, mR);
  7876   004040  C01E  F018         	movff	turn_180@mL,stop@mL
  7877   004044  C01F  F019         	movff	turn_180@mL+1,stop@mL+1
  7878   004048  C020  F01A         	movff	turn_180@mR,stop@mR
  7879   00404C  C021  F01B         	movff	turn_180@mR+1,stop@mR+1
  7880   004050  ECAF  F026         	call	_stop	;wreg free
  7881   004054                     
  7882                           ;MazeRobot.X/dc_motor.c: 306:     mL->direction = 0;
  7883   004054  EE20 F001          	lfsr	2,1
  7884   004058  501E               	movf	turn_180@mL^0,w,c
  7885   00405A  26D9               	addwf	fsr2l,f,c
  7886   00405C  501F               	movf	(turn_180@mL+1)^0,w,c
  7887   00405E  22DA               	addwfc	fsr2h,f,c
  7888   004060  0E00               	movlw	0
  7889   004062  6EDF               	movwf	indf2,c
  7890   004064                     
  7891                           ;MazeRobot.X/dc_motor.c: 307:     mR->direction = 1;
  7892   004064  EE20 F001          	lfsr	2,1
  7893   004068  5020               	movf	turn_180@mR^0,w,c
  7894   00406A  26D9               	addwf	fsr2l,f,c
  7895   00406C  5021               	movf	(turn_180@mR+1)^0,w,c
  7896   00406E  22DA               	addwfc	fsr2h,f,c
  7897   004070  0E01               	movlw	1
  7898   004072  6EDF               	movwf	indf2,c
  7899   004074                     
  7900                           ;MazeRobot.X/dc_motor.c: 309:     mL->brakemode = 1;
  7901   004074  EE20 F002          	lfsr	2,2
  7902   004078  501E               	movf	turn_180@mL^0,w,c
  7903   00407A  26D9               	addwf	fsr2l,f,c
  7904   00407C  501F               	movf	(turn_180@mL+1)^0,w,c
  7905   00407E  22DA               	addwfc	fsr2h,f,c
  7906   004080  0E01               	movlw	1
  7907   004082  6EDF               	movwf	indf2,c
  7908   004084                     
  7909                           ;MazeRobot.X/dc_motor.c: 310:     mL->brakemode = 1;
  7910   004084  EE20 F002          	lfsr	2,2
  7911   004088  501E               	movf	turn_180@mL^0,w,c
  7912   00408A  26D9               	addwf	fsr2l,f,c
  7913   00408C  501F               	movf	(turn_180@mL+1)^0,w,c
  7914   00408E  22DA               	addwfc	fsr2h,f,c
  7915   004090  0E01               	movlw	1
  7916   004092  6EDF               	movwf	indf2,c
  7917                           
  7918                           ;MazeRobot.X/dc_motor.c: 312:     while((mL->power < 70) || (mR->power < 70)){
  7919   004094  EF64  F020         	goto	l4857
  7920   004098                     l4851:
  7921                           
  7922                           ;MazeRobot.X/dc_motor.c: 313:         mL->power += 10;
  7923   004098  C01E  FFD9         	movff	turn_180@mL,fsr2l
  7924   00409C  C01F  FFDA         	movff	turn_180@mL+1,fsr2h
  7925   0040A0  0E0A               	movlw	10
  7926   0040A2  26DF               	addwf	indf2,f,c
  7927                           
  7928                           ;MazeRobot.X/dc_motor.c: 314:         mR->power += 10;
  7929   0040A4  C020  FFD9         	movff	turn_180@mR,fsr2l
  7930   0040A8  C021  FFDA         	movff	turn_180@mR+1,fsr2h
  7931   0040AC  0E0A               	movlw	10
  7932   0040AE  26DF               	addwf	indf2,f,c
  7933   0040B0                     
  7934                           ;MazeRobot.X/dc_motor.c: 315:         setMotorPWM(mL);
  7935   0040B0  C01E  F012         	movff	turn_180@mL,setMotorPWM@m
  7936   0040B4  C01F  F013         	movff	turn_180@mL+1,setMotorPWM@m+1
  7937   0040B8  EC8C  F01E         	call	_setMotorPWM	;wreg free
  7938   0040BC                     
  7939                           ;MazeRobot.X/dc_motor.c: 316:         setMotorPWM(mR);
  7940   0040BC  C020  F012         	movff	turn_180@mR,setMotorPWM@m
  7941   0040C0  C021  F013         	movff	turn_180@mR+1,setMotorPWM@m+1
  7942   0040C4  EC8C  F01E         	call	_setMotorPWM	;wreg free
  7943   0040C8                     l4857:
  7944                           
  7945                           ;MazeRobot.X/dc_motor.c: 312:     while((mL->power < 70) || (mR->power < 70)){
  7946   0040C8  C01E  FFD9         	movff	turn_180@mL,fsr2l
  7947   0040CC  C01F  FFDA         	movff	turn_180@mL+1,fsr2h
  7948   0040D0  0E45               	movlw	69
  7949   0040D2  64DF               	cpfsgt	indf2,c
  7950   0040D4  EF6E  F020         	goto	u5031
  7951   0040D8  EF70  F020         	goto	u5030
  7952   0040DC                     u5031:
  7953   0040DC  EF4C  F020         	goto	l4851
  7954   0040E0                     u5030:
  7955   0040E0  C020  FFD9         	movff	turn_180@mR,fsr2l
  7956   0040E4  C021  FFDA         	movff	turn_180@mR+1,fsr2h
  7957   0040E8  0E45               	movlw	69
  7958   0040EA  64DF               	cpfsgt	indf2,c
  7959   0040EC  EF7A  F020         	goto	u5041
  7960   0040F0  EF7C  F020         	goto	u5040
  7961   0040F4                     u5041:
  7962   0040F4  EF4C  F020         	goto	l4851
  7963   0040F8                     u5040:
  7964   0040F8                     
  7965                           ;MazeRobot.X/dc_motor.c: 318:    _delay((unsigned long)((4*turning_time45)*(64000000/400
      +                          0.0)));
  7966   0040F8  0E18               	movlw	24
  7967   0040FA  6E23               	movwf	(??_turn_180+1)^0,c
  7968   0040FC  0E61               	movlw	97
  7969   0040FE  6E22               	movwf	??_turn_180^0,c
  7970   004100  0E58               	movlw	88
  7971   004102                     u6947:
  7972   004102  2EE8               	decfsz	wreg,f,c
  7973   004104  D7FE               	bra	u6947
  7974   004106  2E22               	decfsz	??_turn_180^0,f,c
  7975   004108  D7FC               	bra	u6947
  7976   00410A  2E23               	decfsz	(??_turn_180+1)^0,f,c
  7977   00410C  D7FA               	bra	u6947
  7978   00410E  D000               	nop2	
  7979   004110                     
  7980                           ;MazeRobot.X/dc_motor.c: 319:     stop(mL, mR);
  7981   004110  C01E  F018         	movff	turn_180@mL,stop@mL
  7982   004114  C01F  F019         	movff	turn_180@mL+1,stop@mL+1
  7983   004118  C020  F01A         	movff	turn_180@mR,stop@mR
  7984   00411C  C021  F01B         	movff	turn_180@mR+1,stop@mR+1
  7985   004120  ECAF  F026         	call	_stop	;wreg free
  7986   004124  0012               	return		;funcret
  7987   004126                     __end_of_turn_180:
  7988                           	callstack 0
  7989                           
  7990 ;; *************** function _turnRight_135 *****************
  7991 ;; Defined at:
  7992 ;;		line 323 in file "MazeRobot.X/dc_motor.c"
  7993 ;; Parameters:    Size  Location     Type
  7994 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  7995 ;;		 -> main@motorLeft(9), 
  7996 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  7997 ;;		 -> main@motorRight(9), 
  7998 ;; Auto vars:     Size  Location     Type
  7999 ;;		None
  8000 ;; Return value:  Size  Location     Type
  8001 ;;                  1    wreg      void 
  8002 ;; Registers used:
  8003 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8004 ;; Tracked objects:
  8005 ;;		On entry : 0/0
  8006 ;;		On exit  : 0/0
  8007 ;;		Unchanged: 0/0
  8008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8009 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8011 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8012 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8013 ;;Total ram usage:        6 bytes
  8014 ;; Hardware stack levels used: 1
  8015 ;; Hardware stack levels required when called: 5
  8016 ;; This function calls:
  8017 ;;		_reverse
  8018 ;;		_setMotorPWM
  8019 ;;		_stop
  8020 ;; This function is called by:
  8021 ;;		_colorDetect
  8022 ;; This function uses a non-reentrant model
  8023 ;;
  8024                           
  8025                           	psect	text31
  8026   004126                     __ptext31:
  8027                           	callstack 0
  8028   004126                     _turnRight_135:
  8029                           	callstack 24
  8030   004126                     
  8031                           ;MazeRobot.X/dc_motor.c: 323: void turnRight_135(DC_motor *mL, DC_motor *mR);MazeRobot.X
      +                          /dc_motor.c: 324: {;MazeRobot.X/dc_motor.c: 325:     stop(mL, mR);
  8032   004126  C01E  F018         	movff	turnRight_135@mL,stop@mL
  8033   00412A  C01F  F019         	movff	turnRight_135@mL+1,stop@mL+1
  8034   00412E  C020  F01A         	movff	turnRight_135@mR,stop@mR
  8035   004132  C021  F01B         	movff	turnRight_135@mR+1,stop@mR+1
  8036   004136  ECAF  F026         	call	_stop	;wreg free
  8037   00413A                     
  8038                           ;MazeRobot.X/dc_motor.c: 326:     _delay((unsigned long)((100)*(64000000/4000.0)));
  8039   00413A  0E09               	movlw	9
  8040   00413C  6E23               	movwf	(??_turnRight_135+1)^0,c
  8041   00413E  0E1E               	movlw	30
  8042   004140  6E22               	movwf	??_turnRight_135^0,c
  8043   004142  0EE4               	movlw	228
  8044   004144                     u6957:
  8045   004144  2EE8               	decfsz	wreg,f,c
  8046   004146  D7FE               	bra	u6957
  8047   004148  2E22               	decfsz	??_turnRight_135^0,f,c
  8048   00414A  D7FC               	bra	u6957
  8049   00414C  2E23               	decfsz	(??_turnRight_135+1)^0,f,c
  8050   00414E  D7FA               	bra	u6957
  8051   004150  D000               	nop2	
  8052   004152                     
  8053                           ;MazeRobot.X/dc_motor.c: 328:     reverse(mL, mR);
  8054   004152  C01E  F018         	movff	turnRight_135@mL,reverse@mL
  8055   004156  C01F  F019         	movff	turnRight_135@mL+1,reverse@mL+1
  8056   00415A  C020  F01A         	movff	turnRight_135@mR,reverse@mR
  8057   00415E  C021  F01B         	movff	turnRight_135@mR+1,reverse@mR+1
  8058   004162  EC76  F025         	call	_reverse	;wreg free
  8059                           
  8060                           ;MazeRobot.X/dc_motor.c: 329:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  8061   004166  0E11               	movlw	17
  8062   004168  6E23               	movwf	(??_turnRight_135+1)^0,c
  8063   00416A  0E3C               	movlw	60
  8064   00416C  6E22               	movwf	??_turnRight_135^0,c
  8065   00416E  0ECB               	movlw	203
  8066   004170                     u6967:
  8067   004170  2EE8               	decfsz	wreg,f,c
  8068   004172  D7FE               	bra	u6967
  8069   004174  2E22               	decfsz	??_turnRight_135^0,f,c
  8070   004176  D7FC               	bra	u6967
  8071   004178  2E23               	decfsz	(??_turnRight_135+1)^0,f,c
  8072   00417A  D7FA               	bra	u6967
  8073   00417C  F000               	nop	
  8074   00417E                     
  8075                           ;MazeRobot.X/dc_motor.c: 331:     stop(mL, mR);
  8076   00417E  C01E  F018         	movff	turnRight_135@mL,stop@mL
  8077   004182  C01F  F019         	movff	turnRight_135@mL+1,stop@mL+1
  8078   004186  C020  F01A         	movff	turnRight_135@mR,stop@mR
  8079   00418A  C021  F01B         	movff	turnRight_135@mR+1,stop@mR+1
  8080   00418E  ECAF  F026         	call	_stop	;wreg free
  8081   004192                     
  8082                           ;MazeRobot.X/dc_motor.c: 333:     mL->direction = 1;
  8083   004192  EE20 F001          	lfsr	2,1
  8084   004196  501E               	movf	turnRight_135@mL^0,w,c
  8085   004198  26D9               	addwf	fsr2l,f,c
  8086   00419A  501F               	movf	(turnRight_135@mL+1)^0,w,c
  8087   00419C  22DA               	addwfc	fsr2h,f,c
  8088   00419E  0E01               	movlw	1
  8089   0041A0  6EDF               	movwf	indf2,c
  8090   0041A2                     
  8091                           ;MazeRobot.X/dc_motor.c: 334:     mR->direction = 0;
  8092   0041A2  EE20 F001          	lfsr	2,1
  8093   0041A6  5020               	movf	turnRight_135@mR^0,w,c
  8094   0041A8  26D9               	addwf	fsr2l,f,c
  8095   0041AA  5021               	movf	(turnRight_135@mR+1)^0,w,c
  8096   0041AC  22DA               	addwfc	fsr2h,f,c
  8097   0041AE  0E00               	movlw	0
  8098   0041B0  6EDF               	movwf	indf2,c
  8099   0041B2                     
  8100                           ;MazeRobot.X/dc_motor.c: 336:     mL->brakemode = 1;
  8101   0041B2  EE20 F002          	lfsr	2,2
  8102   0041B6  501E               	movf	turnRight_135@mL^0,w,c
  8103   0041B8  26D9               	addwf	fsr2l,f,c
  8104   0041BA  501F               	movf	(turnRight_135@mL+1)^0,w,c
  8105   0041BC  22DA               	addwfc	fsr2h,f,c
  8106   0041BE  0E01               	movlw	1
  8107   0041C0  6EDF               	movwf	indf2,c
  8108   0041C2                     
  8109                           ;MazeRobot.X/dc_motor.c: 337:     mL->brakemode = 1;
  8110   0041C2  EE20 F002          	lfsr	2,2
  8111   0041C6  501E               	movf	turnRight_135@mL^0,w,c
  8112   0041C8  26D9               	addwf	fsr2l,f,c
  8113   0041CA  501F               	movf	(turnRight_135@mL+1)^0,w,c
  8114   0041CC  22DA               	addwfc	fsr2h,f,c
  8115   0041CE  0E01               	movlw	1
  8116   0041D0  6EDF               	movwf	indf2,c
  8117                           
  8118                           ;MazeRobot.X/dc_motor.c: 339:     while((mL->power < 80) || (mR->power < 80)){
  8119   0041D2  EF03  F021         	goto	l4817
  8120   0041D6                     l4811:
  8121                           
  8122                           ;MazeRobot.X/dc_motor.c: 340:         mL->power += 10;
  8123   0041D6  C01E  FFD9         	movff	turnRight_135@mL,fsr2l
  8124   0041DA  C01F  FFDA         	movff	turnRight_135@mL+1,fsr2h
  8125   0041DE  0E0A               	movlw	10
  8126   0041E0  26DF               	addwf	indf2,f,c
  8127                           
  8128                           ;MazeRobot.X/dc_motor.c: 341:         mR->power += 10;
  8129   0041E2  C020  FFD9         	movff	turnRight_135@mR,fsr2l
  8130   0041E6  C021  FFDA         	movff	turnRight_135@mR+1,fsr2h
  8131   0041EA  0E0A               	movlw	10
  8132   0041EC  26DF               	addwf	indf2,f,c
  8133   0041EE                     
  8134                           ;MazeRobot.X/dc_motor.c: 342:         setMotorPWM(mL);
  8135   0041EE  C01E  F012         	movff	turnRight_135@mL,setMotorPWM@m
  8136   0041F2  C01F  F013         	movff	turnRight_135@mL+1,setMotorPWM@m+1
  8137   0041F6  EC8C  F01E         	call	_setMotorPWM	;wreg free
  8138   0041FA                     
  8139                           ;MazeRobot.X/dc_motor.c: 343:         setMotorPWM(mR);
  8140   0041FA  C020  F012         	movff	turnRight_135@mR,setMotorPWM@m
  8141   0041FE  C021  F013         	movff	turnRight_135@mR+1,setMotorPWM@m+1
  8142   004202  EC8C  F01E         	call	_setMotorPWM	;wreg free
  8143   004206                     l4817:
  8144                           
  8145                           ;MazeRobot.X/dc_motor.c: 339:     while((mL->power < 80) || (mR->power < 80)){
  8146   004206  C01E  FFD9         	movff	turnRight_135@mL,fsr2l
  8147   00420A  C01F  FFDA         	movff	turnRight_135@mL+1,fsr2h
  8148   00420E  0E4F               	movlw	79
  8149   004210  64DF               	cpfsgt	indf2,c
  8150   004212  EF0D  F021         	goto	u5011
  8151   004216  EF0F  F021         	goto	u5010
  8152   00421A                     u5011:
  8153   00421A  EFEB  F020         	goto	l4811
  8154   00421E                     u5010:
  8155   00421E  C020  FFD9         	movff	turnRight_135@mR,fsr2l
  8156   004222  C021  FFDA         	movff	turnRight_135@mR+1,fsr2h
  8157   004226  0E4F               	movlw	79
  8158   004228  64DF               	cpfsgt	indf2,c
  8159   00422A  EF19  F021         	goto	u5021
  8160   00422E  EF1B  F021         	goto	u5020
  8161   004232                     u5021:
  8162   004232  EFEB  F020         	goto	l4811
  8163   004236                     u5020:
  8164   004236                     
  8165                           ;MazeRobot.X/dc_motor.c: 345:    _delay((unsigned long)((turning_time45)*(64000000/4000.
      +                          0)));
  8166   004236  0E06               	movlw	6
  8167   004238  6E23               	movwf	(??_turnRight_135+1)^0,c
  8168   00423A  0ED9               	movlw	217
  8169   00423C  6E22               	movwf	??_turnRight_135^0,c
  8170   00423E  0E14               	movlw	20
  8171   004240                     u6977:
  8172   004240  2EE8               	decfsz	wreg,f,c
  8173   004242  D7FE               	bra	u6977
  8174   004244  2E22               	decfsz	??_turnRight_135^0,f,c
  8175   004246  D7FC               	bra	u6977
  8176   004248  2E23               	decfsz	(??_turnRight_135+1)^0,f,c
  8177   00424A  D7FA               	bra	u6977
  8178   00424C  D000               	nop2	
  8179   00424E                     
  8180                           ;MazeRobot.X/dc_motor.c: 347:     stop(mL, mR);
  8181   00424E  C01E  F018         	movff	turnRight_135@mL,stop@mL
  8182   004252  C01F  F019         	movff	turnRight_135@mL+1,stop@mL+1
  8183   004256  C020  F01A         	movff	turnRight_135@mR,stop@mR
  8184   00425A  C021  F01B         	movff	turnRight_135@mR+1,stop@mR+1
  8185   00425E  ECAF  F026         	call	_stop	;wreg free
  8186   004262  0012               	return		;funcret
  8187   004264                     __end_of_turnRight_135:
  8188                           	callstack 0
  8189                           
  8190 ;; *************** function _turnLeft_135 *****************
  8191 ;; Defined at:
  8192 ;;		line 352 in file "MazeRobot.X/dc_motor.c"
  8193 ;; Parameters:    Size  Location     Type
  8194 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  8195 ;;		 -> main@motorLeft(9), 
  8196 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  8197 ;;		 -> main@motorRight(9), 
  8198 ;; Auto vars:     Size  Location     Type
  8199 ;;		None
  8200 ;; Return value:  Size  Location     Type
  8201 ;;                  1    wreg      void 
  8202 ;; Registers used:
  8203 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8204 ;; Tracked objects:
  8205 ;;		On entry : 0/0
  8206 ;;		On exit  : 0/0
  8207 ;;		Unchanged: 0/0
  8208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8209 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8210 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8211 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8212 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8213 ;;Total ram usage:        6 bytes
  8214 ;; Hardware stack levels used: 1
  8215 ;; Hardware stack levels required when called: 5
  8216 ;; This function calls:
  8217 ;;		_reverse
  8218 ;;		_setMotorPWM
  8219 ;;		_stop
  8220 ;; This function is called by:
  8221 ;;		_colorDetect
  8222 ;; This function uses a non-reentrant model
  8223 ;;
  8224                           
  8225                           	psect	text32
  8226   0044E0                     __ptext32:
  8227                           	callstack 0
  8228   0044E0                     _turnLeft_135:
  8229                           	callstack 24
  8230   0044E0                     
  8231                           ;MazeRobot.X/dc_motor.c: 352: void turnLeft_135(DC_motor *mL, DC_motor *mR);MazeRobot.X/
      +                          dc_motor.c: 353: {;MazeRobot.X/dc_motor.c: 355:     stop(mL, mR);
  8232   0044E0  C01E  F018         	movff	turnLeft_135@mL,stop@mL
  8233   0044E4  C01F  F019         	movff	turnLeft_135@mL+1,stop@mL+1
  8234   0044E8  C020  F01A         	movff	turnLeft_135@mR,stop@mR
  8235   0044EC  C021  F01B         	movff	turnLeft_135@mR+1,stop@mR+1
  8236   0044F0  ECAF  F026         	call	_stop	;wreg free
  8237   0044F4                     
  8238                           ;MazeRobot.X/dc_motor.c: 356:     _delay((unsigned long)((100)*(64000000/4000.0)));
  8239   0044F4  0E09               	movlw	9
  8240   0044F6  6E23               	movwf	(??_turnLeft_135+1)^0,c
  8241   0044F8  0E1E               	movlw	30
  8242   0044FA  6E22               	movwf	??_turnLeft_135^0,c
  8243   0044FC  0EE4               	movlw	228
  8244   0044FE                     u6987:
  8245   0044FE  2EE8               	decfsz	wreg,f,c
  8246   004500  D7FE               	bra	u6987
  8247   004502  2E22               	decfsz	??_turnLeft_135^0,f,c
  8248   004504  D7FC               	bra	u6987
  8249   004506  2E23               	decfsz	(??_turnLeft_135+1)^0,f,c
  8250   004508  D7FA               	bra	u6987
  8251   00450A  D000               	nop2	
  8252   00450C                     
  8253                           ;MazeRobot.X/dc_motor.c: 358:     reverse(mL, mR);
  8254   00450C  C01E  F018         	movff	turnLeft_135@mL,reverse@mL
  8255   004510  C01F  F019         	movff	turnLeft_135@mL+1,reverse@mL+1
  8256   004514  C020  F01A         	movff	turnLeft_135@mR,reverse@mR
  8257   004518  C021  F01B         	movff	turnLeft_135@mR+1,reverse@mR+1
  8258   00451C  EC76  F025         	call	_reverse	;wreg free
  8259                           
  8260                           ;MazeRobot.X/dc_motor.c: 359:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  8261   004520  0E11               	movlw	17
  8262   004522  6E23               	movwf	(??_turnLeft_135+1)^0,c
  8263   004524  0E3C               	movlw	60
  8264   004526  6E22               	movwf	??_turnLeft_135^0,c
  8265   004528  0ECB               	movlw	203
  8266   00452A                     u6997:
  8267   00452A  2EE8               	decfsz	wreg,f,c
  8268   00452C  D7FE               	bra	u6997
  8269   00452E  2E22               	decfsz	??_turnLeft_135^0,f,c
  8270   004530  D7FC               	bra	u6997
  8271   004532  2E23               	decfsz	(??_turnLeft_135+1)^0,f,c
  8272   004534  D7FA               	bra	u6997
  8273   004536  F000               	nop	
  8274   004538                     
  8275                           ;MazeRobot.X/dc_motor.c: 361:     stop(mL, mR);
  8276   004538  C01E  F018         	movff	turnLeft_135@mL,stop@mL
  8277   00453C  C01F  F019         	movff	turnLeft_135@mL+1,stop@mL+1
  8278   004540  C020  F01A         	movff	turnLeft_135@mR,stop@mR
  8279   004544  C021  F01B         	movff	turnLeft_135@mR+1,stop@mR+1
  8280   004548  ECAF  F026         	call	_stop	;wreg free
  8281   00454C                     
  8282                           ;MazeRobot.X/dc_motor.c: 363:     mL->direction = 0;
  8283   00454C  EE20 F001          	lfsr	2,1
  8284   004550  501E               	movf	turnLeft_135@mL^0,w,c
  8285   004552  26D9               	addwf	fsr2l,f,c
  8286   004554  501F               	movf	(turnLeft_135@mL+1)^0,w,c
  8287   004556  22DA               	addwfc	fsr2h,f,c
  8288   004558  0E00               	movlw	0
  8289   00455A  6EDF               	movwf	indf2,c
  8290   00455C                     
  8291                           ;MazeRobot.X/dc_motor.c: 364:     mR->direction = 1;
  8292   00455C  EE20 F001          	lfsr	2,1
  8293   004560  5020               	movf	turnLeft_135@mR^0,w,c
  8294   004562  26D9               	addwf	fsr2l,f,c
  8295   004564  5021               	movf	(turnLeft_135@mR+1)^0,w,c
  8296   004566  22DA               	addwfc	fsr2h,f,c
  8297   004568  0E01               	movlw	1
  8298   00456A  6EDF               	movwf	indf2,c
  8299   00456C                     
  8300                           ;MazeRobot.X/dc_motor.c: 366:     mL->brakemode = 1;
  8301   00456C  EE20 F002          	lfsr	2,2
  8302   004570  501E               	movf	turnLeft_135@mL^0,w,c
  8303   004572  26D9               	addwf	fsr2l,f,c
  8304   004574  501F               	movf	(turnLeft_135@mL+1)^0,w,c
  8305   004576  22DA               	addwfc	fsr2h,f,c
  8306   004578  0E01               	movlw	1
  8307   00457A  6EDF               	movwf	indf2,c
  8308   00457C                     
  8309                           ;MazeRobot.X/dc_motor.c: 367:     mL->brakemode = 1;
  8310   00457C  EE20 F002          	lfsr	2,2
  8311   004580  501E               	movf	turnLeft_135@mL^0,w,c
  8312   004582  26D9               	addwf	fsr2l,f,c
  8313   004584  501F               	movf	(turnLeft_135@mL+1)^0,w,c
  8314   004586  22DA               	addwfc	fsr2h,f,c
  8315   004588  0E01               	movlw	1
  8316   00458A  6EDF               	movwf	indf2,c
  8317                           
  8318                           ;MazeRobot.X/dc_motor.c: 369:     while((mL->power < 80) || (mR->power < 80)){
  8319   00458C  EFE0  F022         	goto	l4887
  8320   004590                     l4881:
  8321                           
  8322                           ;MazeRobot.X/dc_motor.c: 370:         mL->power += 10;
  8323   004590  C01E  FFD9         	movff	turnLeft_135@mL,fsr2l
  8324   004594  C01F  FFDA         	movff	turnLeft_135@mL+1,fsr2h
  8325   004598  0E0A               	movlw	10
  8326   00459A  26DF               	addwf	indf2,f,c
  8327                           
  8328                           ;MazeRobot.X/dc_motor.c: 371:         mR->power += 10;
  8329   00459C  C020  FFD9         	movff	turnLeft_135@mR,fsr2l
  8330   0045A0  C021  FFDA         	movff	turnLeft_135@mR+1,fsr2h
  8331   0045A4  0E0A               	movlw	10
  8332   0045A6  26DF               	addwf	indf2,f,c
  8333   0045A8                     
  8334                           ;MazeRobot.X/dc_motor.c: 372:         setMotorPWM(mL);
  8335   0045A8  C01E  F012         	movff	turnLeft_135@mL,setMotorPWM@m
  8336   0045AC  C01F  F013         	movff	turnLeft_135@mL+1,setMotorPWM@m+1
  8337   0045B0  EC8C  F01E         	call	_setMotorPWM	;wreg free
  8338   0045B4                     
  8339                           ;MazeRobot.X/dc_motor.c: 373:         setMotorPWM(mR);
  8340   0045B4  C020  F012         	movff	turnLeft_135@mR,setMotorPWM@m
  8341   0045B8  C021  F013         	movff	turnLeft_135@mR+1,setMotorPWM@m+1
  8342   0045BC  EC8C  F01E         	call	_setMotorPWM	;wreg free
  8343   0045C0                     l4887:
  8344                           
  8345                           ;MazeRobot.X/dc_motor.c: 369:     while((mL->power < 80) || (mR->power < 80)){
  8346   0045C0  C01E  FFD9         	movff	turnLeft_135@mL,fsr2l
  8347   0045C4  C01F  FFDA         	movff	turnLeft_135@mL+1,fsr2h
  8348   0045C8  0E4F               	movlw	79
  8349   0045CA  64DF               	cpfsgt	indf2,c
  8350   0045CC  EFEA  F022         	goto	u5051
  8351   0045D0  EFEC  F022         	goto	u5050
  8352   0045D4                     u5051:
  8353   0045D4  EFC8  F022         	goto	l4881
  8354   0045D8                     u5050:
  8355   0045D8  C020  FFD9         	movff	turnLeft_135@mR,fsr2l
  8356   0045DC  C021  FFDA         	movff	turnLeft_135@mR+1,fsr2h
  8357   0045E0  0E4F               	movlw	79
  8358   0045E2  64DF               	cpfsgt	indf2,c
  8359   0045E4  EFF6  F022         	goto	u5061
  8360   0045E8  EFF8  F022         	goto	u5060
  8361   0045EC                     u5061:
  8362   0045EC  EFC8  F022         	goto	l4881
  8363   0045F0                     u5060:
  8364   0045F0                     
  8365                           ;MazeRobot.X/dc_motor.c: 375:    _delay((unsigned long)((3*turning_time45)*(64000000/400
      +                          0.0)));
  8366   0045F0  0E12               	movlw	18
  8367   0045F2  6E23               	movwf	(??_turnLeft_135+1)^0,c
  8368   0045F4  0E89               	movlw	137
  8369   0045F6  6E22               	movwf	??_turnLeft_135^0,c
  8370   0045F8  0E42               	movlw	66
  8371   0045FA                     u7007:
  8372   0045FA  2EE8               	decfsz	wreg,f,c
  8373   0045FC  D7FE               	bra	u7007
  8374   0045FE  2E22               	decfsz	??_turnLeft_135^0,f,c
  8375   004600  D7FC               	bra	u7007
  8376   004602  2E23               	decfsz	(??_turnLeft_135+1)^0,f,c
  8377   004604  D7FA               	bra	u7007
  8378   004606                     
  8379                           ;MazeRobot.X/dc_motor.c: 376:     stop(mL, mR);
  8380   004606  C01E  F018         	movff	turnLeft_135@mL,stop@mL
  8381   00460A  C01F  F019         	movff	turnLeft_135@mL+1,stop@mL+1
  8382   00460E  C020  F01A         	movff	turnLeft_135@mR,stop@mR
  8383   004612  C021  F01B         	movff	turnLeft_135@mR+1,stop@mR+1
  8384   004616  ECAF  F026         	call	_stop	;wreg free
  8385   00461A  0012               	return		;funcret
  8386   00461C                     __end_of_turnLeft_135:
  8387                           	callstack 0
  8388                           
  8389 ;; *************** function _reverseSquareRight *****************
  8390 ;; Defined at:
  8391 ;;		line 380 in file "MazeRobot.X/dc_motor.c"
  8392 ;; Parameters:    Size  Location     Type
  8393 ;;  mL              2   35[COMRAM] PTR struct DC_motor
  8394 ;;		 -> main@motorLeft(9), 
  8395 ;;  mR              2   37[COMRAM] PTR struct DC_motor
  8396 ;;		 -> main@motorRight(9), 
  8397 ;; Auto vars:     Size  Location     Type
  8398 ;;		None
  8399 ;; Return value:  Size  Location     Type
  8400 ;;                  1    wreg      void 
  8401 ;; Registers used:
  8402 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8403 ;; Tracked objects:
  8404 ;;		On entry : 0/0
  8405 ;;		On exit  : 0/0
  8406 ;;		Unchanged: 0/0
  8407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8408 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8409 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8410 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8411 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8412 ;;Total ram usage:        6 bytes
  8413 ;; Hardware stack levels used: 1
  8414 ;; Hardware stack levels required when called: 6
  8415 ;; This function calls:
  8416 ;;		_reverse
  8417 ;;		_stop
  8418 ;;		_turnRight_90
  8419 ;; This function is called by:
  8420 ;;		_colorDetect
  8421 ;; This function uses a non-reentrant model
  8422 ;;
  8423                           
  8424                           	psect	text33
  8425   004F46                     __ptext33:
  8426                           	callstack 0
  8427   004F46                     _reverseSquareRight:
  8428                           	callstack 23
  8429   004F46                     
  8430                           ;MazeRobot.X/dc_motor.c: 380: void reverseSquareRight(DC_motor *mL, DC_motor *mR);MazeRo
      +                          bot.X/dc_motor.c: 381: {;MazeRobot.X/dc_motor.c: 383:     stop(mL, mR);
  8431   004F46  C024  F018         	movff	reverseSquareRight@mL,stop@mL
  8432   004F4A  C025  F019         	movff	reverseSquareRight@mL+1,stop@mL+1
  8433   004F4E  C026  F01A         	movff	reverseSquareRight@mR,stop@mR
  8434   004F52  C027  F01B         	movff	reverseSquareRight@mR+1,stop@mR+1
  8435   004F56  ECAF  F026         	call	_stop	;wreg free
  8436   004F5A                     
  8437                           ;MazeRobot.X/dc_motor.c: 384:     _delay((unsigned long)((100)*(64000000/4000.0)));
  8438   004F5A  0E09               	movlw	9
  8439   004F5C  6E29               	movwf	(??_reverseSquareRight+1)^0,c
  8440   004F5E  0E1E               	movlw	30
  8441   004F60  6E28               	movwf	??_reverseSquareRight^0,c
  8442   004F62  0EE4               	movlw	228
  8443   004F64                     u7017:
  8444   004F64  2EE8               	decfsz	wreg,f,c
  8445   004F66  D7FE               	bra	u7017
  8446   004F68  2E28               	decfsz	??_reverseSquareRight^0,f,c
  8447   004F6A  D7FC               	bra	u7017
  8448   004F6C  2E29               	decfsz	(??_reverseSquareRight+1)^0,f,c
  8449   004F6E  D7FA               	bra	u7017
  8450   004F70  D000               	nop2	
  8451   004F72                     
  8452                           ;MazeRobot.X/dc_motor.c: 386:     reverse(mL, mR);
  8453   004F72  C024  F018         	movff	reverseSquareRight@mL,reverse@mL
  8454   004F76  C025  F019         	movff	reverseSquareRight@mL+1,reverse@mL+1
  8455   004F7A  C026  F01A         	movff	reverseSquareRight@mR,reverse@mR
  8456   004F7E  C027  F01B         	movff	reverseSquareRight@mR+1,reverse@mR+1
  8457   004F82  EC76  F025         	call	_reverse	;wreg free
  8458                           
  8459                           ;MazeRobot.X/dc_motor.c: 387:     _delay((unsigned long)((500)*(64000000/4000.0)));
  8460   004F86  0E29               	movlw	41
  8461   004F88  6E29               	movwf	(??_reverseSquareRight+1)^0,c
  8462   004F8A  0E96               	movlw	150
  8463   004F8C  6E28               	movwf	??_reverseSquareRight^0,c
  8464   004F8E  0E7F               	movlw	127
  8465   004F90                     u7027:
  8466   004F90  2EE8               	decfsz	wreg,f,c
  8467   004F92  D7FE               	bra	u7027
  8468   004F94  2E28               	decfsz	??_reverseSquareRight^0,f,c
  8469   004F96  D7FC               	bra	u7027
  8470   004F98  2E29               	decfsz	(??_reverseSquareRight+1)^0,f,c
  8471   004F9A  D7FA               	bra	u7027
  8472   004F9C  F000               	nop	
  8473   004F9E                     
  8474                           ;MazeRobot.X/dc_motor.c: 389:     turnRight_90(mL,mR);
  8475   004F9E  C024  F01E         	movff	reverseSquareRight@mL,turnRight_90@mL
  8476   004FA2  C025  F01F         	movff	reverseSquareRight@mL+1,turnRight_90@mL+1
  8477   004FA6  C026  F020         	movff	reverseSquareRight@mR,turnRight_90@mR
  8478   004FAA  C027  F021         	movff	reverseSquareRight@mR+1,turnRight_90@mR+1
  8479   004FAE  EC32  F021         	call	_turnRight_90	;wreg free
  8480   004FB2                     
  8481                           ;MazeRobot.X/dc_motor.c: 391:     stop(mL, mR);
  8482   004FB2  C024  F018         	movff	reverseSquareRight@mL,stop@mL
  8483   004FB6  C025  F019         	movff	reverseSquareRight@mL+1,stop@mL+1
  8484   004FBA  C026  F01A         	movff	reverseSquareRight@mR,stop@mR
  8485   004FBE  C027  F01B         	movff	reverseSquareRight@mR+1,stop@mR+1
  8486   004FC2  ECAF  F026         	call	_stop	;wreg free
  8487   004FC6  0012               	return		;funcret
  8488   004FC8                     __end_of_reverseSquareRight:
  8489                           	callstack 0
  8490                           
  8491 ;; *************** function _turnRight_90 *****************
  8492 ;; Defined at:
  8493 ;;		line 267 in file "MazeRobot.X/dc_motor.c"
  8494 ;; Parameters:    Size  Location     Type
  8495 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  8496 ;;		 -> main@motorLeft(9), 
  8497 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  8498 ;;		 -> main@motorRight(9), 
  8499 ;; Auto vars:     Size  Location     Type
  8500 ;;		None
  8501 ;; Return value:  Size  Location     Type
  8502 ;;                  1    wreg      void 
  8503 ;; Registers used:
  8504 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8505 ;; Tracked objects:
  8506 ;;		On entry : 0/0
  8507 ;;		On exit  : 0/0
  8508 ;;		Unchanged: 0/0
  8509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8510 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8512 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8513 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8514 ;;Total ram usage:        6 bytes
  8515 ;; Hardware stack levels used: 1
  8516 ;; Hardware stack levels required when called: 5
  8517 ;; This function calls:
  8518 ;;		_reverse
  8519 ;;		_setMotorPWM
  8520 ;;		_stop
  8521 ;; This function is called by:
  8522 ;;		_colorDetect
  8523 ;;		_reverseSquareRight
  8524 ;; This function uses a non-reentrant model
  8525 ;;
  8526                           
  8527                           	psect	text34
  8528   004264                     __ptext34:
  8529                           	callstack 0
  8530   004264                     _turnRight_90:
  8531                           	callstack 24
  8532   004264                     
  8533                           ;MazeRobot.X/dc_motor.c: 267: void turnRight_90(DC_motor *mL, DC_motor *mR);MazeRobot.X/
      +                          dc_motor.c: 268: {;MazeRobot.X/dc_motor.c: 269:     stop(mL, mR);
  8534   004264  C01E  F018         	movff	turnRight_90@mL,stop@mL
  8535   004268  C01F  F019         	movff	turnRight_90@mL+1,stop@mL+1
  8536   00426C  C020  F01A         	movff	turnRight_90@mR,stop@mR
  8537   004270  C021  F01B         	movff	turnRight_90@mR+1,stop@mR+1
  8538   004274  ECAF  F026         	call	_stop	;wreg free
  8539   004278                     
  8540                           ;MazeRobot.X/dc_motor.c: 270:     _delay((unsigned long)((100)*(64000000/4000.0)));
  8541   004278  0E09               	movlw	9
  8542   00427A  6E23               	movwf	(??_turnRight_90+1)^0,c
  8543   00427C  0E1E               	movlw	30
  8544   00427E  6E22               	movwf	??_turnRight_90^0,c
  8545   004280  0EE4               	movlw	228
  8546   004282                     u7037:
  8547   004282  2EE8               	decfsz	wreg,f,c
  8548   004284  D7FE               	bra	u7037
  8549   004286  2E22               	decfsz	??_turnRight_90^0,f,c
  8550   004288  D7FC               	bra	u7037
  8551   00428A  2E23               	decfsz	(??_turnRight_90+1)^0,f,c
  8552   00428C  D7FA               	bra	u7037
  8553   00428E  D000               	nop2	
  8554   004290                     
  8555                           ;MazeRobot.X/dc_motor.c: 272:     reverse(mL, mR);
  8556   004290  C01E  F018         	movff	turnRight_90@mL,reverse@mL
  8557   004294  C01F  F019         	movff	turnRight_90@mL+1,reverse@mL+1
  8558   004298  C020  F01A         	movff	turnRight_90@mR,reverse@mR
  8559   00429C  C021  F01B         	movff	turnRight_90@mR+1,reverse@mR+1
  8560   0042A0  EC76  F025         	call	_reverse	;wreg free
  8561                           
  8562                           ;MazeRobot.X/dc_motor.c: 273:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  8563   0042A4  0E11               	movlw	17
  8564   0042A6  6E23               	movwf	(??_turnRight_90+1)^0,c
  8565   0042A8  0E3C               	movlw	60
  8566   0042AA  6E22               	movwf	??_turnRight_90^0,c
  8567   0042AC  0ECB               	movlw	203
  8568   0042AE                     u7047:
  8569   0042AE  2EE8               	decfsz	wreg,f,c
  8570   0042B0  D7FE               	bra	u7047
  8571   0042B2  2E22               	decfsz	??_turnRight_90^0,f,c
  8572   0042B4  D7FC               	bra	u7047
  8573   0042B6  2E23               	decfsz	(??_turnRight_90+1)^0,f,c
  8574   0042B8  D7FA               	bra	u7047
  8575   0042BA  F000               	nop	
  8576   0042BC                     
  8577                           ;MazeRobot.X/dc_motor.c: 275:     stop(mL, mR);
  8578   0042BC  C01E  F018         	movff	turnRight_90@mL,stop@mL
  8579   0042C0  C01F  F019         	movff	turnRight_90@mL+1,stop@mL+1
  8580   0042C4  C020  F01A         	movff	turnRight_90@mR,stop@mR
  8581   0042C8  C021  F01B         	movff	turnRight_90@mR+1,stop@mR+1
  8582   0042CC  ECAF  F026         	call	_stop	;wreg free
  8583   0042D0                     
  8584                           ;MazeRobot.X/dc_motor.c: 277:     mL->direction = 1;
  8585   0042D0  EE20 F001          	lfsr	2,1
  8586   0042D4  501E               	movf	turnRight_90@mL^0,w,c
  8587   0042D6  26D9               	addwf	fsr2l,f,c
  8588   0042D8  501F               	movf	(turnRight_90@mL+1)^0,w,c
  8589   0042DA  22DA               	addwfc	fsr2h,f,c
  8590   0042DC  0E01               	movlw	1
  8591   0042DE  6EDF               	movwf	indf2,c
  8592   0042E0                     
  8593                           ;MazeRobot.X/dc_motor.c: 278:     mR->direction = 0;
  8594   0042E0  EE20 F001          	lfsr	2,1
  8595   0042E4  5020               	movf	turnRight_90@mR^0,w,c
  8596   0042E6  26D9               	addwf	fsr2l,f,c
  8597   0042E8  5021               	movf	(turnRight_90@mR+1)^0,w,c
  8598   0042EA  22DA               	addwfc	fsr2h,f,c
  8599   0042EC  0E00               	movlw	0
  8600   0042EE  6EDF               	movwf	indf2,c
  8601   0042F0                     
  8602                           ;MazeRobot.X/dc_motor.c: 280:     mL->brakemode = 1;
  8603   0042F0  EE20 F002          	lfsr	2,2
  8604   0042F4  501E               	movf	turnRight_90@mL^0,w,c
  8605   0042F6  26D9               	addwf	fsr2l,f,c
  8606   0042F8  501F               	movf	(turnRight_90@mL+1)^0,w,c
  8607   0042FA  22DA               	addwfc	fsr2h,f,c
  8608   0042FC  0E01               	movlw	1
  8609   0042FE  6EDF               	movwf	indf2,c
  8610   004300                     
  8611                           ;MazeRobot.X/dc_motor.c: 281:     mL->brakemode = 1;
  8612   004300  EE20 F002          	lfsr	2,2
  8613   004304  501E               	movf	turnRight_90@mL^0,w,c
  8614   004306  26D9               	addwf	fsr2l,f,c
  8615   004308  501F               	movf	(turnRight_90@mL+1)^0,w,c
  8616   00430A  22DA               	addwfc	fsr2h,f,c
  8617   00430C  0E01               	movlw	1
  8618   00430E  6EDF               	movwf	indf2,c
  8619                           
  8620                           ;MazeRobot.X/dc_motor.c: 283:     while((mL->power < 80) || (mR->power < 80)){
  8621   004310  EFA2  F021         	goto	l4659
  8622   004314                     l4653:
  8623                           
  8624                           ;MazeRobot.X/dc_motor.c: 284:         mL->power += 10;
  8625   004314  C01E  FFD9         	movff	turnRight_90@mL,fsr2l
  8626   004318  C01F  FFDA         	movff	turnRight_90@mL+1,fsr2h
  8627   00431C  0E0A               	movlw	10
  8628   00431E  26DF               	addwf	indf2,f,c
  8629                           
  8630                           ;MazeRobot.X/dc_motor.c: 285:         mR->power += 10;
  8631   004320  C020  FFD9         	movff	turnRight_90@mR,fsr2l
  8632   004324  C021  FFDA         	movff	turnRight_90@mR+1,fsr2h
  8633   004328  0E0A               	movlw	10
  8634   00432A  26DF               	addwf	indf2,f,c
  8635   00432C                     
  8636                           ;MazeRobot.X/dc_motor.c: 286:         setMotorPWM(mL);
  8637   00432C  C01E  F012         	movff	turnRight_90@mL,setMotorPWM@m
  8638   004330  C01F  F013         	movff	turnRight_90@mL+1,setMotorPWM@m+1
  8639   004334  EC8C  F01E         	call	_setMotorPWM	;wreg free
  8640   004338                     
  8641                           ;MazeRobot.X/dc_motor.c: 287:         setMotorPWM(mR);
  8642   004338  C020  F012         	movff	turnRight_90@mR,setMotorPWM@m
  8643   00433C  C021  F013         	movff	turnRight_90@mR+1,setMotorPWM@m+1
  8644   004340  EC8C  F01E         	call	_setMotorPWM	;wreg free
  8645   004344                     l4659:
  8646                           
  8647                           ;MazeRobot.X/dc_motor.c: 283:     while((mL->power < 80) || (mR->power < 80)){
  8648   004344  C01E  FFD9         	movff	turnRight_90@mL,fsr2l
  8649   004348  C01F  FFDA         	movff	turnRight_90@mL+1,fsr2h
  8650   00434C  0E4F               	movlw	79
  8651   00434E  64DF               	cpfsgt	indf2,c
  8652   004350  EFAC  F021         	goto	u4931
  8653   004354  EFAE  F021         	goto	u4930
  8654   004358                     u4931:
  8655   004358  EF8A  F021         	goto	l4653
  8656   00435C                     u4930:
  8657   00435C  C020  FFD9         	movff	turnRight_90@mR,fsr2l
  8658   004360  C021  FFDA         	movff	turnRight_90@mR+1,fsr2h
  8659   004364  0E4F               	movlw	79
  8660   004366  64DF               	cpfsgt	indf2,c
  8661   004368  EFB8  F021         	goto	u4941
  8662   00436C  EFBA  F021         	goto	u4940
  8663   004370                     u4941:
  8664   004370  EF8A  F021         	goto	l4653
  8665   004374                     u4940:
  8666   004374                     
  8667                           ;MazeRobot.X/dc_motor.c: 289:    _delay((unsigned long)((turning_time45)*(64000000/4000.
      +                          0)));
  8668   004374  0E06               	movlw	6
  8669   004376  6E23               	movwf	(??_turnRight_90+1)^0,c
  8670   004378  0ED9               	movlw	217
  8671   00437A  6E22               	movwf	??_turnRight_90^0,c
  8672   00437C  0E14               	movlw	20
  8673   00437E                     u7057:
  8674   00437E  2EE8               	decfsz	wreg,f,c
  8675   004380  D7FE               	bra	u7057
  8676   004382  2E22               	decfsz	??_turnRight_90^0,f,c
  8677   004384  D7FC               	bra	u7057
  8678   004386  2E23               	decfsz	(??_turnRight_90+1)^0,f,c
  8679   004388  D7FA               	bra	u7057
  8680   00438A  D000               	nop2	
  8681   00438C                     
  8682                           ;MazeRobot.X/dc_motor.c: 291:     stop(mL, mR);
  8683   00438C  C01E  F018         	movff	turnRight_90@mL,stop@mL
  8684   004390  C01F  F019         	movff	turnRight_90@mL+1,stop@mL+1
  8685   004394  C020  F01A         	movff	turnRight_90@mR,stop@mR
  8686   004398  C021  F01B         	movff	turnRight_90@mR+1,stop@mR+1
  8687   00439C  ECAF  F026         	call	_stop	;wreg free
  8688   0043A0  0012               	return		;funcret
  8689   0043A2                     __end_of_turnRight_90:
  8690                           	callstack 0
  8691                           
  8692 ;; *************** function _reverseSquareLeft *****************
  8693 ;; Defined at:
  8694 ;;		line 396 in file "MazeRobot.X/dc_motor.c"
  8695 ;; Parameters:    Size  Location     Type
  8696 ;;  mL              2   35[COMRAM] PTR struct DC_motor
  8697 ;;		 -> main@motorLeft(9), 
  8698 ;;  mR              2   37[COMRAM] PTR struct DC_motor
  8699 ;;		 -> main@motorRight(9), 
  8700 ;; Auto vars:     Size  Location     Type
  8701 ;;		None
  8702 ;; Return value:  Size  Location     Type
  8703 ;;                  1    wreg      void 
  8704 ;; Registers used:
  8705 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8706 ;; Tracked objects:
  8707 ;;		On entry : 0/0
  8708 ;;		On exit  : 0/0
  8709 ;;		Unchanged: 0/0
  8710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8711 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8713 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8714 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8715 ;;Total ram usage:        6 bytes
  8716 ;; Hardware stack levels used: 1
  8717 ;; Hardware stack levels required when called: 6
  8718 ;; This function calls:
  8719 ;;		_reverse
  8720 ;;		_stop
  8721 ;;		_turnLeft_90
  8722 ;; This function is called by:
  8723 ;;		_colorDetect
  8724 ;; This function uses a non-reentrant model
  8725 ;;
  8726                           
  8727                           	psect	text35
  8728   004FC8                     __ptext35:
  8729                           	callstack 0
  8730   004FC8                     _reverseSquareLeft:
  8731                           	callstack 23
  8732   004FC8                     
  8733                           ;MazeRobot.X/dc_motor.c: 396: void reverseSquareLeft(DC_motor *mL, DC_motor *mR);MazeRob
      +                          ot.X/dc_motor.c: 397: {;MazeRobot.X/dc_motor.c: 399:     stop(mL, mR);
  8734   004FC8  C024  F018         	movff	reverseSquareLeft@mL,stop@mL
  8735   004FCC  C025  F019         	movff	reverseSquareLeft@mL+1,stop@mL+1
  8736   004FD0  C026  F01A         	movff	reverseSquareLeft@mR,stop@mR
  8737   004FD4  C027  F01B         	movff	reverseSquareLeft@mR+1,stop@mR+1
  8738   004FD8  ECAF  F026         	call	_stop	;wreg free
  8739   004FDC                     
  8740                           ;MazeRobot.X/dc_motor.c: 400:     _delay((unsigned long)((100)*(64000000/4000.0)));
  8741   004FDC  0E09               	movlw	9
  8742   004FDE  6E29               	movwf	(??_reverseSquareLeft+1)^0,c
  8743   004FE0  0E1E               	movlw	30
  8744   004FE2  6E28               	movwf	??_reverseSquareLeft^0,c
  8745   004FE4  0EE4               	movlw	228
  8746   004FE6                     u7067:
  8747   004FE6  2EE8               	decfsz	wreg,f,c
  8748   004FE8  D7FE               	bra	u7067
  8749   004FEA  2E28               	decfsz	??_reverseSquareLeft^0,f,c
  8750   004FEC  D7FC               	bra	u7067
  8751   004FEE  2E29               	decfsz	(??_reverseSquareLeft+1)^0,f,c
  8752   004FF0  D7FA               	bra	u7067
  8753   004FF2  D000               	nop2	
  8754   004FF4                     
  8755                           ;MazeRobot.X/dc_motor.c: 402:     reverse(mL, mR);
  8756   004FF4  C024  F018         	movff	reverseSquareLeft@mL,reverse@mL
  8757   004FF8  C025  F019         	movff	reverseSquareLeft@mL+1,reverse@mL+1
  8758   004FFC  C026  F01A         	movff	reverseSquareLeft@mR,reverse@mR
  8759   005000  C027  F01B         	movff	reverseSquareLeft@mR+1,reverse@mR+1
  8760   005004  EC76  F025         	call	_reverse	;wreg free
  8761                           
  8762                           ;MazeRobot.X/dc_motor.c: 403:     _delay((unsigned long)((500)*(64000000/4000.0)));
  8763   005008  0E29               	movlw	41
  8764   00500A  6E29               	movwf	(??_reverseSquareLeft+1)^0,c
  8765   00500C  0E96               	movlw	150
  8766   00500E  6E28               	movwf	??_reverseSquareLeft^0,c
  8767   005010  0E7F               	movlw	127
  8768   005012                     u7077:
  8769   005012  2EE8               	decfsz	wreg,f,c
  8770   005014  D7FE               	bra	u7077
  8771   005016  2E28               	decfsz	??_reverseSquareLeft^0,f,c
  8772   005018  D7FC               	bra	u7077
  8773   00501A  2E29               	decfsz	(??_reverseSquareLeft+1)^0,f,c
  8774   00501C  D7FA               	bra	u7077
  8775   00501E  F000               	nop	
  8776   005020                     
  8777                           ;MazeRobot.X/dc_motor.c: 405:     turnLeft_90(mL,mR);
  8778   005020  C024  F01E         	movff	reverseSquareLeft@mL,turnLeft_90@mL
  8779   005024  C025  F01F         	movff	reverseSquareLeft@mL+1,turnLeft_90@mL+1
  8780   005028  C026  F020         	movff	reverseSquareLeft@mR,turnLeft_90@mR
  8781   00502C  C027  F021         	movff	reverseSquareLeft@mR+1,turnLeft_90@mR+1
  8782   005030  ECD1  F021         	call	_turnLeft_90	;wreg free
  8783   005034                     
  8784                           ;MazeRobot.X/dc_motor.c: 407:     stop(mL, mR);
  8785   005034  C024  F018         	movff	reverseSquareLeft@mL,stop@mL
  8786   005038  C025  F019         	movff	reverseSquareLeft@mL+1,stop@mL+1
  8787   00503C  C026  F01A         	movff	reverseSquareLeft@mR,stop@mR
  8788   005040  C027  F01B         	movff	reverseSquareLeft@mR+1,stop@mR+1
  8789   005044  ECAF  F026         	call	_stop	;wreg free
  8790   005048  0012               	return		;funcret
  8791   00504A                     __end_of_reverseSquareLeft:
  8792                           	callstack 0
  8793                           
  8794 ;; *************** function _turnLeft_90 *****************
  8795 ;; Defined at:
  8796 ;;		line 238 in file "MazeRobot.X/dc_motor.c"
  8797 ;; Parameters:    Size  Location     Type
  8798 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  8799 ;;		 -> main@motorLeft(9), 
  8800 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  8801 ;;		 -> main@motorRight(9), 
  8802 ;; Auto vars:     Size  Location     Type
  8803 ;;		None
  8804 ;; Return value:  Size  Location     Type
  8805 ;;                  1    wreg      void 
  8806 ;; Registers used:
  8807 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8808 ;; Tracked objects:
  8809 ;;		On entry : 0/0
  8810 ;;		On exit  : 0/0
  8811 ;;		Unchanged: 0/0
  8812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8813 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8815 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8816 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8817 ;;Total ram usage:        6 bytes
  8818 ;; Hardware stack levels used: 1
  8819 ;; Hardware stack levels required when called: 5
  8820 ;; This function calls:
  8821 ;;		_reverse
  8822 ;;		_setMotorPWM
  8823 ;;		_stop
  8824 ;; This function is called by:
  8825 ;;		_colorDetect
  8826 ;;		_reverseSquareLeft
  8827 ;; This function uses a non-reentrant model
  8828 ;;
  8829                           
  8830                           	psect	text36
  8831   0043A2                     __ptext36:
  8832                           	callstack 0
  8833   0043A2                     _turnLeft_90:
  8834                           	callstack 24
  8835   0043A2                     
  8836                           ;MazeRobot.X/dc_motor.c: 238: void turnLeft_90(DC_motor *mL, DC_motor *mR);MazeRobot.X/d
      +                          c_motor.c: 239: {;MazeRobot.X/dc_motor.c: 241:     stop(mL, mR);
  8837   0043A2  C01E  F018         	movff	turnLeft_90@mL,stop@mL
  8838   0043A6  C01F  F019         	movff	turnLeft_90@mL+1,stop@mL+1
  8839   0043AA  C020  F01A         	movff	turnLeft_90@mR,stop@mR
  8840   0043AE  C021  F01B         	movff	turnLeft_90@mR+1,stop@mR+1
  8841   0043B2  ECAF  F026         	call	_stop	;wreg free
  8842   0043B6                     
  8843                           ;MazeRobot.X/dc_motor.c: 242:     _delay((unsigned long)((100)*(64000000/4000.0)));
  8844   0043B6  0E09               	movlw	9
  8845   0043B8  6E23               	movwf	(??_turnLeft_90+1)^0,c
  8846   0043BA  0E1E               	movlw	30
  8847   0043BC  6E22               	movwf	??_turnLeft_90^0,c
  8848   0043BE  0EE4               	movlw	228
  8849   0043C0                     u7087:
  8850   0043C0  2EE8               	decfsz	wreg,f,c
  8851   0043C2  D7FE               	bra	u7087
  8852   0043C4  2E22               	decfsz	??_turnLeft_90^0,f,c
  8853   0043C6  D7FC               	bra	u7087
  8854   0043C8  2E23               	decfsz	(??_turnLeft_90+1)^0,f,c
  8855   0043CA  D7FA               	bra	u7087
  8856   0043CC  D000               	nop2	
  8857   0043CE                     
  8858                           ;MazeRobot.X/dc_motor.c: 244:     reverse(mL, mR);
  8859   0043CE  C01E  F018         	movff	turnLeft_90@mL,reverse@mL
  8860   0043D2  C01F  F019         	movff	turnLeft_90@mL+1,reverse@mL+1
  8861   0043D6  C020  F01A         	movff	turnLeft_90@mR,reverse@mR
  8862   0043DA  C021  F01B         	movff	turnLeft_90@mR+1,reverse@mR+1
  8863   0043DE  EC76  F025         	call	_reverse	;wreg free
  8864                           
  8865                           ;MazeRobot.X/dc_motor.c: 245:     _delay((unsigned long)((reverse_time)*(64000000/4000.0
      +                          )));
  8866   0043E2  0E11               	movlw	17
  8867   0043E4  6E23               	movwf	(??_turnLeft_90+1)^0,c
  8868   0043E6  0E3C               	movlw	60
  8869   0043E8  6E22               	movwf	??_turnLeft_90^0,c
  8870   0043EA  0ECB               	movlw	203
  8871   0043EC                     u7097:
  8872   0043EC  2EE8               	decfsz	wreg,f,c
  8873   0043EE  D7FE               	bra	u7097
  8874   0043F0  2E22               	decfsz	??_turnLeft_90^0,f,c
  8875   0043F2  D7FC               	bra	u7097
  8876   0043F4  2E23               	decfsz	(??_turnLeft_90+1)^0,f,c
  8877   0043F6  D7FA               	bra	u7097
  8878   0043F8  F000               	nop	
  8879   0043FA                     
  8880                           ;MazeRobot.X/dc_motor.c: 247:     stop(mL, mR);
  8881   0043FA  C01E  F018         	movff	turnLeft_90@mL,stop@mL
  8882   0043FE  C01F  F019         	movff	turnLeft_90@mL+1,stop@mL+1
  8883   004402  C020  F01A         	movff	turnLeft_90@mR,stop@mR
  8884   004406  C021  F01B         	movff	turnLeft_90@mR+1,stop@mR+1
  8885   00440A  ECAF  F026         	call	_stop	;wreg free
  8886   00440E                     
  8887                           ;MazeRobot.X/dc_motor.c: 249:     mL->direction = 0;
  8888   00440E  EE20 F001          	lfsr	2,1
  8889   004412  501E               	movf	turnLeft_90@mL^0,w,c
  8890   004414  26D9               	addwf	fsr2l,f,c
  8891   004416  501F               	movf	(turnLeft_90@mL+1)^0,w,c
  8892   004418  22DA               	addwfc	fsr2h,f,c
  8893   00441A  0E00               	movlw	0
  8894   00441C  6EDF               	movwf	indf2,c
  8895   00441E                     
  8896                           ;MazeRobot.X/dc_motor.c: 250:     mR->direction = 1;
  8897   00441E  EE20 F001          	lfsr	2,1
  8898   004422  5020               	movf	turnLeft_90@mR^0,w,c
  8899   004424  26D9               	addwf	fsr2l,f,c
  8900   004426  5021               	movf	(turnLeft_90@mR+1)^0,w,c
  8901   004428  22DA               	addwfc	fsr2h,f,c
  8902   00442A  0E01               	movlw	1
  8903   00442C  6EDF               	movwf	indf2,c
  8904   00442E                     
  8905                           ;MazeRobot.X/dc_motor.c: 252:     mL->brakemode = 1;
  8906   00442E  EE20 F002          	lfsr	2,2
  8907   004432  501E               	movf	turnLeft_90@mL^0,w,c
  8908   004434  26D9               	addwf	fsr2l,f,c
  8909   004436  501F               	movf	(turnLeft_90@mL+1)^0,w,c
  8910   004438  22DA               	addwfc	fsr2h,f,c
  8911   00443A  0E01               	movlw	1
  8912   00443C  6EDF               	movwf	indf2,c
  8913   00443E                     
  8914                           ;MazeRobot.X/dc_motor.c: 253:     mL->brakemode = 1;
  8915   00443E  EE20 F002          	lfsr	2,2
  8916   004442  501E               	movf	turnLeft_90@mL^0,w,c
  8917   004444  26D9               	addwf	fsr2l,f,c
  8918   004446  501F               	movf	(turnLeft_90@mL+1)^0,w,c
  8919   004448  22DA               	addwfc	fsr2h,f,c
  8920   00444A  0E01               	movlw	1
  8921   00444C  6EDF               	movwf	indf2,c
  8922                           
  8923                           ;MazeRobot.X/dc_motor.c: 255:     while((mL->power < 80) || (mR->power < 80)){
  8924   00444E  EF41  F022         	goto	l4689
  8925   004452                     l4683:
  8926                           
  8927                           ;MazeRobot.X/dc_motor.c: 256:         mL->power += 10;
  8928   004452  C01E  FFD9         	movff	turnLeft_90@mL,fsr2l
  8929   004456  C01F  FFDA         	movff	turnLeft_90@mL+1,fsr2h
  8930   00445A  0E0A               	movlw	10
  8931   00445C  26DF               	addwf	indf2,f,c
  8932                           
  8933                           ;MazeRobot.X/dc_motor.c: 257:         mR->power += 10;
  8934   00445E  C020  FFD9         	movff	turnLeft_90@mR,fsr2l
  8935   004462  C021  FFDA         	movff	turnLeft_90@mR+1,fsr2h
  8936   004466  0E0A               	movlw	10
  8937   004468  26DF               	addwf	indf2,f,c
  8938   00446A                     
  8939                           ;MazeRobot.X/dc_motor.c: 258:         setMotorPWM(mL);
  8940   00446A  C01E  F012         	movff	turnLeft_90@mL,setMotorPWM@m
  8941   00446E  C01F  F013         	movff	turnLeft_90@mL+1,setMotorPWM@m+1
  8942   004472  EC8C  F01E         	call	_setMotorPWM	;wreg free
  8943   004476                     
  8944                           ;MazeRobot.X/dc_motor.c: 259:         setMotorPWM(mR);
  8945   004476  C020  F012         	movff	turnLeft_90@mR,setMotorPWM@m
  8946   00447A  C021  F013         	movff	turnLeft_90@mR+1,setMotorPWM@m+1
  8947   00447E  EC8C  F01E         	call	_setMotorPWM	;wreg free
  8948   004482                     l4689:
  8949                           
  8950                           ;MazeRobot.X/dc_motor.c: 255:     while((mL->power < 80) || (mR->power < 80)){
  8951   004482  C01E  FFD9         	movff	turnLeft_90@mL,fsr2l
  8952   004486  C01F  FFDA         	movff	turnLeft_90@mL+1,fsr2h
  8953   00448A  0E4F               	movlw	79
  8954   00448C  64DF               	cpfsgt	indf2,c
  8955   00448E  EF4B  F022         	goto	u4951
  8956   004492  EF4D  F022         	goto	u4950
  8957   004496                     u4951:
  8958   004496  EF29  F022         	goto	l4683
  8959   00449A                     u4950:
  8960   00449A  C020  FFD9         	movff	turnLeft_90@mR,fsr2l
  8961   00449E  C021  FFDA         	movff	turnLeft_90@mR+1,fsr2h
  8962   0044A2  0E4F               	movlw	79
  8963   0044A4  64DF               	cpfsgt	indf2,c
  8964   0044A6  EF57  F022         	goto	u4961
  8965   0044AA  EF59  F022         	goto	u4960
  8966   0044AE                     u4961:
  8967   0044AE  EF29  F022         	goto	l4683
  8968   0044B2                     u4960:
  8969   0044B2                     
  8970                           ;MazeRobot.X/dc_motor.c: 261:    _delay((unsigned long)((2*turning_time45)*(64000000/400
      +                          0.0)));
  8971   0044B2  0E0C               	movlw	12
  8972   0044B4  6E23               	movwf	(??_turnLeft_90+1)^0,c
  8973   0044B6  0EB1               	movlw	177
  8974   0044B8  6E22               	movwf	??_turnLeft_90^0,c
  8975   0044BA  0E2B               	movlw	43
  8976   0044BC                     u7107:
  8977   0044BC  2EE8               	decfsz	wreg,f,c
  8978   0044BE  D7FE               	bra	u7107
  8979   0044C0  2E22               	decfsz	??_turnLeft_90^0,f,c
  8980   0044C2  D7FC               	bra	u7107
  8981   0044C4  2E23               	decfsz	(??_turnLeft_90+1)^0,f,c
  8982   0044C6  D7FA               	bra	u7107
  8983   0044C8  F000               	nop	
  8984   0044CA                     
  8985                           ;MazeRobot.X/dc_motor.c: 262:     stop(mL, mR);
  8986   0044CA  C01E  F018         	movff	turnLeft_90@mL,stop@mL
  8987   0044CE  C01F  F019         	movff	turnLeft_90@mL+1,stop@mL+1
  8988   0044D2  C020  F01A         	movff	turnLeft_90@mR,stop@mR
  8989   0044D6  C021  F01B         	movff	turnLeft_90@mR+1,stop@mR+1
  8990   0044DA  ECAF  F026         	call	_stop	;wreg free
  8991   0044DE  0012               	return		;funcret
  8992   0044E0                     __end_of_turnLeft_90:
  8993                           	callstack 0
  8994                           
  8995 ;; *************** function _stop *****************
  8996 ;; Defined at:
  8997 ;;		line 115 in file "MazeRobot.X/dc_motor.c"
  8998 ;; Parameters:    Size  Location     Type
  8999 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  9000 ;;		 -> main@motorLeft(9), 
  9001 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  9002 ;;		 -> main@motorRight(9), 
  9003 ;; Auto vars:     Size  Location     Type
  9004 ;;		None
  9005 ;; Return value:  Size  Location     Type
  9006 ;;                  1    wreg      void 
  9007 ;; Registers used:
  9008 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9009 ;; Tracked objects:
  9010 ;;		On entry : 0/0
  9011 ;;		On exit  : 0/0
  9012 ;;		Unchanged: 0/0
  9013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9014 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9016 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9017 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9018 ;;Total ram usage:        6 bytes
  9019 ;; Hardware stack levels used: 1
  9020 ;; Hardware stack levels required when called: 4
  9021 ;; This function calls:
  9022 ;;		_setMotorPWM
  9023 ;; This function is called by:
  9024 ;;		_turnLeft_90
  9025 ;;		_turnRight_90
  9026 ;;		_turn_180
  9027 ;;		_turnRight_135
  9028 ;;		_turnLeft_135
  9029 ;;		_reverseSquareRight
  9030 ;;		_reverseSquareLeft
  9031 ;;		_main
  9032 ;;		_turnLeft
  9033 ;;		_turnRight
  9034 ;; This function uses a non-reentrant model
  9035 ;;
  9036                           
  9037                           	psect	text37
  9038   004D5E                     __ptext37:
  9039                           	callstack 0
  9040   004D5E                     _stop:
  9041                           	callstack 26
  9042   004D5E                     
  9043                           ;MazeRobot.X/dc_motor.c: 117:     while ((mL->power)>0 && (mR->power)>0){
  9044   004D5E  EFE1  F026         	goto	l4317
  9045   004D62                     l4305:
  9046                           
  9047                           ;MazeRobot.X/dc_motor.c: 118:         if ((mL->power) >0){
  9048   004D62  C018  FFD9         	movff	stop@mL,fsr2l
  9049   004D66  C019  FFDA         	movff	stop@mL+1,fsr2h
  9050   004D6A  50DF               	movf	indf2,w,c
  9051   004D6C  B4D8               	btfsc	status,2,c
  9052   004D6E  EFBB  F026         	goto	u4431
  9053   004D72  EFBD  F026         	goto	u4430
  9054   004D76                     u4431:
  9055   004D76  EFC3  F026         	goto	l4309
  9056   004D7A                     u4430:
  9057   004D7A                     
  9058                           ;MazeRobot.X/dc_motor.c: 119:             mL->power -= 5;
  9059   004D7A  C018  FFD9         	movff	stop@mL,fsr2l
  9060   004D7E  C019  FFDA         	movff	stop@mL+1,fsr2h
  9061   004D82  0E05               	movlw	5
  9062   004D84  5EDF               	subwf	indf2,f,c
  9063   004D86                     l4309:
  9064                           
  9065                           ;MazeRobot.X/dc_motor.c: 121:         if ((mR->power) >0){
  9066   004D86  C01A  FFD9         	movff	stop@mR,fsr2l
  9067   004D8A  C01B  FFDA         	movff	stop@mR+1,fsr2h
  9068   004D8E  50DF               	movf	indf2,w,c
  9069   004D90  B4D8               	btfsc	status,2,c
  9070   004D92  EFCD  F026         	goto	u4441
  9071   004D96  EFCF  F026         	goto	u4440
  9072   004D9A                     u4441:
  9073   004D9A  EFD5  F026         	goto	l4313
  9074   004D9E                     u4440:
  9075   004D9E                     
  9076                           ;MazeRobot.X/dc_motor.c: 122:             mR->power -= 5;
  9077   004D9E  C01A  FFD9         	movff	stop@mR,fsr2l
  9078   004DA2  C01B  FFDA         	movff	stop@mR+1,fsr2h
  9079   004DA6  0E05               	movlw	5
  9080   004DA8  5EDF               	subwf	indf2,f,c
  9081   004DAA                     l4313:
  9082                           
  9083                           ;MazeRobot.X/dc_motor.c: 125:         setMotorPWM(mL);
  9084   004DAA  C018  F012         	movff	stop@mL,setMotorPWM@m
  9085   004DAE  C019  F013         	movff	stop@mL+1,setMotorPWM@m+1
  9086   004DB2  EC8C  F01E         	call	_setMotorPWM	;wreg free
  9087   004DB6                     
  9088                           ;MazeRobot.X/dc_motor.c: 126:         setMotorPWM(mR);
  9089   004DB6  C01A  F012         	movff	stop@mR,setMotorPWM@m
  9090   004DBA  C01B  F013         	movff	stop@mR+1,setMotorPWM@m+1
  9091   004DBE  EC8C  F01E         	call	_setMotorPWM	;wreg free
  9092   004DC2                     l4317:
  9093                           
  9094                           ;MazeRobot.X/dc_motor.c: 117:     while ((mL->power)>0 && (mR->power)>0){
  9095   004DC2  C018  FFD9         	movff	stop@mL,fsr2l
  9096   004DC6  C019  FFDA         	movff	stop@mL+1,fsr2h
  9097   004DCA  50DF               	movf	indf2,w,c
  9098   004DCC  B4D8               	btfsc	status,2,c
  9099   004DCE  EFEB  F026         	goto	u4451
  9100   004DD2  EFED  F026         	goto	u4450
  9101   004DD6                     u4451:
  9102   004DD6  EFF9  F026         	goto	l4321
  9103   004DDA                     u4450:
  9104   004DDA  C01A  FFD9         	movff	stop@mR,fsr2l
  9105   004DDE  C01B  FFDA         	movff	stop@mR+1,fsr2h
  9106   004DE2  50DF               	movf	indf2,w,c
  9107   004DE4  A4D8               	btfss	status,2,c
  9108   004DE6  EFF7  F026         	goto	u4461
  9109   004DEA  EFF9  F026         	goto	u4460
  9110   004DEE                     u4461:
  9111   004DEE  EFB1  F026         	goto	l4305
  9112   004DF2                     u4460:
  9113   004DF2                     l4321:
  9114                           
  9115                           ;MazeRobot.X/dc_motor.c: 128:     _delay((unsigned long)((100)*(64000000/4000.0)));
  9116   004DF2  0E09               	movlw	9
  9117   004DF4  6E1D               	movwf	(??_stop+1)^0,c
  9118   004DF6  0E1E               	movlw	30
  9119   004DF8  6E1C               	movwf	??_stop^0,c
  9120   004DFA  0EE4               	movlw	228
  9121   004DFC                     u7117:
  9122   004DFC  2EE8               	decfsz	wreg,f,c
  9123   004DFE  D7FE               	bra	u7117
  9124   004E00  2E1C               	decfsz	??_stop^0,f,c
  9125   004E02  D7FC               	bra	u7117
  9126   004E04  2E1D               	decfsz	(??_stop+1)^0,f,c
  9127   004E06  D7FA               	bra	u7117
  9128   004E08  D000               	nop2	
  9129   004E0A  0012               	return		;funcret
  9130   004E0C                     __end_of_stop:
  9131                           	callstack 0
  9132                           
  9133 ;; *************** function _reverse *****************
  9134 ;; Defined at:
  9135 ;;		line 155 in file "MazeRobot.X/dc_motor.c"
  9136 ;; Parameters:    Size  Location     Type
  9137 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  9138 ;;		 -> main@motorLeft(9), 
  9139 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  9140 ;;		 -> main@motorRight(9), 
  9141 ;; Auto vars:     Size  Location     Type
  9142 ;;		None
  9143 ;; Return value:  Size  Location     Type
  9144 ;;                  1    wreg      void 
  9145 ;; Registers used:
  9146 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9147 ;; Tracked objects:
  9148 ;;		On entry : 0/0
  9149 ;;		On exit  : 0/0
  9150 ;;		Unchanged: 0/0
  9151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9152 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9154 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9155 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9156 ;;Total ram usage:        5 bytes
  9157 ;; Hardware stack levels used: 1
  9158 ;; Hardware stack levels required when called: 4
  9159 ;; This function calls:
  9160 ;;		_setMotorPWM
  9161 ;; This function is called by:
  9162 ;;		_turnLeft_90
  9163 ;;		_turnRight_90
  9164 ;;		_turn_180
  9165 ;;		_turnRight_135
  9166 ;;		_turnLeft_135
  9167 ;;		_reverseSquareRight
  9168 ;;		_reverseSquareLeft
  9169 ;;		_turnLeft
  9170 ;;		_turnRight
  9171 ;; This function uses a non-reentrant model
  9172 ;;
  9173                           
  9174                           	psect	text38
  9175   004AEC                     __ptext38:
  9176                           	callstack 0
  9177   004AEC                     _reverse:
  9178                           	callstack 24
  9179   004AEC                     
  9180                           ;MazeRobot.X/dc_motor.c: 155: void reverse(DC_motor *mL, DC_motor *mR);MazeRobot.X/dc_mo
      +                          tor.c: 156: {;MazeRobot.X/dc_motor.c: 157:     mL->direction = 0;
  9181   004AEC  EE20 F001          	lfsr	2,1
  9182   004AF0  5018               	movf	reverse@mL^0,w,c
  9183   004AF2  26D9               	addwf	fsr2l,f,c
  9184   004AF4  5019               	movf	(reverse@mL+1)^0,w,c
  9185   004AF6  22DA               	addwfc	fsr2h,f,c
  9186   004AF8  0E00               	movlw	0
  9187   004AFA  6EDF               	movwf	indf2,c
  9188                           
  9189                           ;MazeRobot.X/dc_motor.c: 158:     mR->direction = 0;
  9190   004AFC  EE20 F001          	lfsr	2,1
  9191   004B00  501A               	movf	reverse@mR^0,w,c
  9192   004B02  26D9               	addwf	fsr2l,f,c
  9193   004B04  501B               	movf	(reverse@mR+1)^0,w,c
  9194   004B06  22DA               	addwfc	fsr2h,f,c
  9195   004B08  0E00               	movlw	0
  9196   004B0A  6EDF               	movwf	indf2,c
  9197                           
  9198                           ;MazeRobot.X/dc_motor.c: 160:     mL->brakemode = 1;
  9199   004B0C  EE20 F002          	lfsr	2,2
  9200   004B10  5018               	movf	reverse@mL^0,w,c
  9201   004B12  26D9               	addwf	fsr2l,f,c
  9202   004B14  5019               	movf	(reverse@mL+1)^0,w,c
  9203   004B16  22DA               	addwfc	fsr2h,f,c
  9204   004B18  0E01               	movlw	1
  9205   004B1A  6EDF               	movwf	indf2,c
  9206                           
  9207                           ;MazeRobot.X/dc_motor.c: 161:     mL->brakemode = 1;
  9208   004B1C  EE20 F002          	lfsr	2,2
  9209   004B20  5018               	movf	reverse@mL^0,w,c
  9210   004B22  26D9               	addwf	fsr2l,f,c
  9211   004B24  5019               	movf	(reverse@mL+1)^0,w,c
  9212   004B26  22DA               	addwfc	fsr2h,f,c
  9213   004B28  0E01               	movlw	1
  9214   004B2A  6EDF               	movwf	indf2,c
  9215                           
  9216                           ;MazeRobot.X/dc_motor.c: 163:     while ((mL->power)<25 && (mR->power)<25){
  9217   004B2C  EFBC  F025         	goto	l4333
  9218   004B30                     l4325:
  9219                           
  9220                           ;MazeRobot.X/dc_motor.c: 164:         if ((mL->power) < 25){
  9221   004B30  C018  FFD9         	movff	reverse@mL,fsr2l
  9222   004B34  C019  FFDA         	movff	reverse@mL+1,fsr2h
  9223   004B38  0E19               	movlw	25
  9224   004B3A  60DF               	cpfslt	indf2,c
  9225   004B3C  EFA2  F025         	goto	u4471
  9226   004B40  EFA4  F025         	goto	u4470
  9227   004B44                     u4471:
  9228   004B44  EFAA  F025         	goto	l4329
  9229   004B48                     u4470:
  9230   004B48                     
  9231                           ;MazeRobot.X/dc_motor.c: 165:             mL->power += 5;
  9232   004B48  C018  FFD9         	movff	reverse@mL,fsr2l
  9233   004B4C  C019  FFDA         	movff	reverse@mL+1,fsr2h
  9234   004B50  0E05               	movlw	5
  9235   004B52  26DF               	addwf	indf2,f,c
  9236   004B54                     l4329:
  9237                           
  9238                           ;MazeRobot.X/dc_motor.c: 167:         if ((mR->power) <25){
  9239   004B54  C01A  FFD9         	movff	reverse@mR,fsr2l
  9240   004B58  C01B  FFDA         	movff	reverse@mR+1,fsr2h
  9241   004B5C  0E19               	movlw	25
  9242   004B5E  60DF               	cpfslt	indf2,c
  9243   004B60  EFB4  F025         	goto	u4481
  9244   004B64  EFB6  F025         	goto	u4480
  9245   004B68                     u4481:
  9246   004B68  EFBC  F025         	goto	l4333
  9247   004B6C                     u4480:
  9248   004B6C                     
  9249                           ;MazeRobot.X/dc_motor.c: 168:             mR->power += 5;
  9250   004B6C  C01A  FFD9         	movff	reverse@mR,fsr2l
  9251   004B70  C01B  FFDA         	movff	reverse@mR+1,fsr2h
  9252   004B74  0E05               	movlw	5
  9253   004B76  26DF               	addwf	indf2,f,c
  9254   004B78                     l4333:
  9255                           
  9256                           ;MazeRobot.X/dc_motor.c: 163:     while ((mL->power)<25 && (mR->power)<25){
  9257   004B78  C018  FFD9         	movff	reverse@mL,fsr2l
  9258   004B7C  C019  FFDA         	movff	reverse@mL+1,fsr2h
  9259   004B80  0E19               	movlw	25
  9260   004B82  60DF               	cpfslt	indf2,c
  9261   004B84  EFC6  F025         	goto	u4491
  9262   004B88  EFC8  F025         	goto	u4490
  9263   004B8C                     u4491:
  9264   004B8C  EFD4  F025         	goto	l4337
  9265   004B90                     u4490:
  9266   004B90  C01A  FFD9         	movff	reverse@mR,fsr2l
  9267   004B94  C01B  FFDA         	movff	reverse@mR+1,fsr2h
  9268   004B98  0E18               	movlw	24
  9269   004B9A  64DF               	cpfsgt	indf2,c
  9270   004B9C  EFD2  F025         	goto	u4501
  9271   004BA0  EFD4  F025         	goto	u4500
  9272   004BA4                     u4501:
  9273   004BA4  EF98  F025         	goto	l4325
  9274   004BA8                     u4500:
  9275   004BA8                     l4337:
  9276                           
  9277                           ;MazeRobot.X/dc_motor.c: 172:     setMotorPWM(mL);
  9278   004BA8  C018  F012         	movff	reverse@mL,setMotorPWM@m
  9279   004BAC  C019  F013         	movff	reverse@mL+1,setMotorPWM@m+1
  9280   004BB0  EC8C  F01E         	call	_setMotorPWM	;wreg free
  9281                           
  9282                           ;MazeRobot.X/dc_motor.c: 173:     setMotorPWM(mR);
  9283   004BB4  C01A  F012         	movff	reverse@mR,setMotorPWM@m
  9284   004BB8  C01B  F013         	movff	reverse@mR+1,setMotorPWM@m+1
  9285   004BBC  EC8C  F01E         	call	_setMotorPWM	;wreg free
  9286   004BC0  0012               	return		;funcret
  9287   004BC2                     __end_of_reverse:
  9288                           	callstack 0
  9289                           
  9290 ;; *************** function _setMotorPWM *****************
  9291 ;; Defined at:
  9292 ;;		line 92 in file "MazeRobot.X/dc_motor.c"
  9293 ;; Parameters:    Size  Location     Type
  9294 ;;  m               2   17[COMRAM] PTR struct DC_motor
  9295 ;;		 -> main@motorRight(9), main@motorLeft(9), 
  9296 ;; Auto vars:     Size  Location     Type
  9297 ;;  negDuty         1   22[COMRAM] unsigned char 
  9298 ;;  posDuty         1   21[COMRAM] unsigned char 
  9299 ;; Return value:  Size  Location     Type
  9300 ;;                  1    wreg      void 
  9301 ;; Registers used:
  9302 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9303 ;; Tracked objects:
  9304 ;;		On entry : 0/0
  9305 ;;		On exit  : 0/0
  9306 ;;		Unchanged: 0/0
  9307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9308 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9309 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9310 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9311 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9312 ;;Total ram usage:        6 bytes
  9313 ;; Hardware stack levels used: 1
  9314 ;; Hardware stack levels required when called: 3
  9315 ;; This function calls:
  9316 ;;		___lwdiv
  9317 ;;		___wmul
  9318 ;; This function is called by:
  9319 ;;		_stop
  9320 ;;		_reverse
  9321 ;;		_turnLeft_90
  9322 ;;		_turnRight_90
  9323 ;;		_turn_180
  9324 ;;		_turnRight_135
  9325 ;;		_turnLeft_135
  9326 ;;		_forward
  9327 ;;		_turnLeft
  9328 ;;		_turnRight
  9329 ;; This function uses a non-reentrant model
  9330 ;;
  9331                           
  9332                           	psect	text39
  9333   003D18                     __ptext39:
  9334                           	callstack 0
  9335   003D18                     _setMotorPWM:
  9336                           	callstack 26
  9337   003D18                     
  9338                           ;MazeRobot.X/dc_motor.c: 92: void setMotorPWM(DC_motor *m);MazeRobot.X/dc_motor.c: 93: {
      +                          ;MazeRobot.X/dc_motor.c: 94:     unsigned char posDuty, negDuty;;MazeRobot.X/dc_motor.c:
      +                           96:     if(m->brakemode) {
  9339   003D18  EE20 F002          	lfsr	2,2
  9340   003D1C  5012               	movf	setMotorPWM@m^0,w,c
  9341   003D1E  26D9               	addwf	fsr2l,f,c
  9342   003D20  5013               	movf	(setMotorPWM@m+1)^0,w,c
  9343   003D22  22DA               	addwfc	fsr2h,f,c
  9344   003D24  50DF               	movf	indf2,w,c
  9345   003D26  B4D8               	btfsc	status,2,c
  9346   003D28  EF98  F01E         	goto	u3431
  9347   003D2C  EF9A  F01E         	goto	u3430
  9348   003D30                     u3431:
  9349   003D30  EFCE  F01E         	goto	l3727
  9350   003D34                     u3430:
  9351   003D34                     
  9352                           ;MazeRobot.X/dc_motor.c: 97:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m
      +                          ->PWMperiod))/100;
  9353   003D34  C012  FFD9         	movff	setMotorPWM@m,fsr2l
  9354   003D38  C013  FFDA         	movff	setMotorPWM@m+1,fsr2h
  9355   003D3C  50DF               	movf	indf2,w,c
  9356   003D3E  6E14               	movwf	??_setMotorPWM^0,c
  9357   003D40  5014               	movf	??_setMotorPWM^0,w,c
  9358   003D42  6E05               	movwf	___wmul@multiplier^0,c
  9359   003D44  6A06               	clrf	(___wmul@multiplier+1)^0,c
  9360   003D46  EE20 F003          	lfsr	2,3
  9361   003D4A  5012               	movf	setMotorPWM@m^0,w,c
  9362   003D4C  26D9               	addwf	fsr2l,f,c
  9363   003D4E  5013               	movf	(setMotorPWM@m+1)^0,w,c
  9364   003D50  22DA               	addwfc	fsr2h,f,c
  9365   003D52  CFDE F007          	movff	postinc2,___wmul@multiplicand
  9366   003D56  CFDD F008          	movff	postdec2,___wmul@multiplicand+1
  9367   003D5A  EC9E  F02B         	call	___wmul	;wreg free
  9368   003D5E  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  9369   003D62  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  9370   003D66  0E00               	movlw	0
  9371   003D68  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  9372   003D6A  0E64               	movlw	100
  9373   003D6C  6E0D               	movwf	___lwdiv@divisor^0,c
  9374   003D6E  EC62  F028         	call	___lwdiv	;wreg free
  9375   003D72  EE20 F003          	lfsr	2,3
  9376   003D76  5012               	movf	setMotorPWM@m^0,w,c
  9377   003D78  26D9               	addwf	fsr2l,f,c
  9378   003D7A  5013               	movf	(setMotorPWM@m+1)^0,w,c
  9379   003D7C  22DA               	addwfc	fsr2h,f,c
  9380   003D7E  50DF               	movf	indf2,w,c
  9381   003D80  6E15               	movwf	(??_setMotorPWM+1)^0,c
  9382   003D82  500B               	movf	?___lwdiv^0,w,c
  9383   003D84  5C15               	subwf	(??_setMotorPWM+1)^0,w,c
  9384   003D86  6E16               	movwf	setMotorPWM@posDuty^0,c
  9385   003D88                     
  9386                           ;MazeRobot.X/dc_motor.c: 98:         negDuty=m->PWMperiod;
  9387   003D88  EE20 F003          	lfsr	2,3
  9388   003D8C  5012               	movf	setMotorPWM@m^0,w,c
  9389   003D8E  26D9               	addwf	fsr2l,f,c
  9390   003D90  5013               	movf	(setMotorPWM@m+1)^0,w,c
  9391   003D92  22DA               	addwfc	fsr2h,f,c
  9392   003D94  50DF               	movf	indf2,w,c
  9393   003D96  6E17               	movwf	setMotorPWM@negDuty^0,c
  9394                           
  9395                           ;MazeRobot.X/dc_motor.c: 99:     }
  9396   003D98  EFF1  F01E         	goto	l3731
  9397   003D9C                     l3727:
  9398                           
  9399                           ;MazeRobot.X/dc_motor.c: 101:         posDuty=0;
  9400   003D9C  0E00               	movlw	0
  9401   003D9E  6E16               	movwf	setMotorPWM@posDuty^0,c
  9402   003DA0                     
  9403                           ;MazeRobot.X/dc_motor.c: 102:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  9404   003DA0  C012  FFD9         	movff	setMotorPWM@m,fsr2l
  9405   003DA4  C013  FFDA         	movff	setMotorPWM@m+1,fsr2h
  9406   003DA8  50DF               	movf	indf2,w,c
  9407   003DAA  6E14               	movwf	??_setMotorPWM^0,c
  9408   003DAC  5014               	movf	??_setMotorPWM^0,w,c
  9409   003DAE  6E05               	movwf	___wmul@multiplier^0,c
  9410   003DB0  6A06               	clrf	(___wmul@multiplier+1)^0,c
  9411   003DB2  EE20 F003          	lfsr	2,3
  9412   003DB6  5012               	movf	setMotorPWM@m^0,w,c
  9413   003DB8  26D9               	addwf	fsr2l,f,c
  9414   003DBA  5013               	movf	(setMotorPWM@m+1)^0,w,c
  9415   003DBC  22DA               	addwfc	fsr2h,f,c
  9416   003DBE  CFDE F007          	movff	postinc2,___wmul@multiplicand
  9417   003DC2  CFDD F008          	movff	postdec2,___wmul@multiplicand+1
  9418   003DC6  EC9E  F02B         	call	___wmul	;wreg free
  9419   003DCA  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  9420   003DCE  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  9421   003DD2  0E00               	movlw	0
  9422   003DD4  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  9423   003DD6  0E64               	movlw	100
  9424   003DD8  6E0D               	movwf	___lwdiv@divisor^0,c
  9425   003DDA  EC62  F028         	call	___lwdiv	;wreg free
  9426   003DDE  500B               	movf	?___lwdiv^0,w,c
  9427   003DE0  6E17               	movwf	setMotorPWM@negDuty^0,c
  9428   003DE2                     l3731:
  9429                           
  9430                           ;MazeRobot.X/dc_motor.c: 105:     if (m->direction) {
  9431   003DE2  EE20 F001          	lfsr	2,1
  9432   003DE6  5012               	movf	setMotorPWM@m^0,w,c
  9433   003DE8  26D9               	addwf	fsr2l,f,c
  9434   003DEA  5013               	movf	(setMotorPWM@m+1)^0,w,c
  9435   003DEC  22DA               	addwfc	fsr2h,f,c
  9436   003DEE  50DF               	movf	indf2,w,c
  9437   003DF0  B4D8               	btfsc	status,2,c
  9438   003DF2  EFFD  F01E         	goto	u3441
  9439   003DF6  EFFF  F01E         	goto	u3440
  9440   003DFA                     u3441:
  9441   003DFA  EF21  F01F         	goto	l3735
  9442   003DFE                     u3440:
  9443   003DFE                     
  9444                           ;MazeRobot.X/dc_motor.c: 106:         *(m->posDutyHighByte)=posDuty;
  9445   003DFE  EE20 F005          	lfsr	2,5
  9446   003E02  5012               	movf	setMotorPWM@m^0,w,c
  9447   003E04  26D9               	addwf	fsr2l,f,c
  9448   003E06  5013               	movf	(setMotorPWM@m+1)^0,w,c
  9449   003E08  22DA               	addwfc	fsr2h,f,c
  9450   003E0A  CFDE F014          	movff	postinc2,??_setMotorPWM
  9451   003E0E  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  9452   003E12  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  9453   003E16  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  9454   003E1A  C016  FFDF         	movff	setMotorPWM@posDuty,indf2
  9455                           
  9456                           ;MazeRobot.X/dc_motor.c: 107:         *(m->negDutyHighByte)=negDuty;
  9457   003E1E  EE20 F007          	lfsr	2,7
  9458   003E22  5012               	movf	setMotorPWM@m^0,w,c
  9459   003E24  26D9               	addwf	fsr2l,f,c
  9460   003E26  5013               	movf	(setMotorPWM@m+1)^0,w,c
  9461   003E28  22DA               	addwfc	fsr2h,f,c
  9462   003E2A  CFDE F014          	movff	postinc2,??_setMotorPWM
  9463   003E2E  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  9464   003E32  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  9465   003E36  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  9466   003E3A  C017  FFDF         	movff	setMotorPWM@negDuty,indf2
  9467                           
  9468                           ;MazeRobot.X/dc_motor.c: 108:     } else {
  9469   003E3E  EF41  F01F         	goto	l156
  9470   003E42                     l3735:
  9471                           
  9472                           ;MazeRobot.X/dc_motor.c: 109:         *(m->posDutyHighByte)=negDuty;
  9473   003E42  EE20 F005          	lfsr	2,5
  9474   003E46  5012               	movf	setMotorPWM@m^0,w,c
  9475   003E48  26D9               	addwf	fsr2l,f,c
  9476   003E4A  5013               	movf	(setMotorPWM@m+1)^0,w,c
  9477   003E4C  22DA               	addwfc	fsr2h,f,c
  9478   003E4E  CFDE F014          	movff	postinc2,??_setMotorPWM
  9479   003E52  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  9480   003E56  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  9481   003E5A  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  9482   003E5E  C017  FFDF         	movff	setMotorPWM@negDuty,indf2
  9483                           
  9484                           ;MazeRobot.X/dc_motor.c: 110:         *(m->negDutyHighByte)=posDuty;
  9485   003E62  EE20 F007          	lfsr	2,7
  9486   003E66  5012               	movf	setMotorPWM@m^0,w,c
  9487   003E68  26D9               	addwf	fsr2l,f,c
  9488   003E6A  5013               	movf	(setMotorPWM@m+1)^0,w,c
  9489   003E6C  22DA               	addwfc	fsr2h,f,c
  9490   003E6E  CFDE F014          	movff	postinc2,??_setMotorPWM
  9491   003E72  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  9492   003E76  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  9493   003E7A  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  9494   003E7E  C016  FFDF         	movff	setMotorPWM@posDuty,indf2
  9495   003E82                     l156:
  9496   003E82  0012               	return		;funcret
  9497   003E84                     __end_of_setMotorPWM:
  9498                           	callstack 0
  9499                           
  9500 ;; *************** function ___wmul *****************
  9501 ;; Defined at:
  9502 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  9503 ;; Parameters:    Size  Location     Type
  9504 ;;  multiplier      2    4[COMRAM] unsigned int 
  9505 ;;  multiplicand    2    6[COMRAM] unsigned int 
  9506 ;; Auto vars:     Size  Location     Type
  9507 ;;  product         2    8[COMRAM] unsigned int 
  9508 ;; Return value:  Size  Location     Type
  9509 ;;                  2    4[COMRAM] unsigned int 
  9510 ;; Registers used:
  9511 ;;		wreg, status,2, status,0, prodl, prodh
  9512 ;; Tracked objects:
  9513 ;;		On entry : 0/0
  9514 ;;		On exit  : 0/0
  9515 ;;		Unchanged: 0/0
  9516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9517 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9518 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9520 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9521 ;;Total ram usage:        6 bytes
  9522 ;; Hardware stack levels used: 1
  9523 ;; Hardware stack levels required when called: 2
  9524 ;; This function calls:
  9525 ;;		Nothing
  9526 ;; This function is called by:
  9527 ;;		_setMotorPWM
  9528 ;;		_turnLeft_135
  9529 ;; This function uses a non-reentrant model
  9530 ;;
  9531                           
  9532                           	psect	text40
  9533   00573C                     __ptext40:
  9534                           	callstack 0
  9535   00573C                     ___wmul:
  9536                           	callstack 26
  9537   00573C  5005               	movf	___wmul@multiplier^0,w,c
  9538   00573E  0207               	mulwf	___wmul@multiplicand^0,c
  9539   005740  CFF3 F009          	movff	prodl,___wmul@product
  9540   005744  CFF4 F00A          	movff	prodh,___wmul@product+1
  9541   005748  5005               	movf	___wmul@multiplier^0,w,c
  9542   00574A  0208               	mulwf	(___wmul@multiplicand+1)^0,c
  9543   00574C  50F3               	movf	243,w,c
  9544   00574E  260A               	addwf	(___wmul@product+1)^0,f,c
  9545   005750  5006               	movf	(___wmul@multiplier+1)^0,w,c
  9546   005752  0207               	mulwf	___wmul@multiplicand^0,c
  9547   005754  50F3               	movf	243,w,c
  9548   005756  260A               	addwf	(___wmul@product+1)^0,f,c
  9549   005758  C009  F005         	movff	___wmul@product,?___wmul
  9550   00575C  C00A  F006         	movff	___wmul@product+1,?___wmul+1
  9551   005760  0012               	return		;funcret
  9552   005762                     __end_of___wmul:
  9553                           	callstack 0
  9554                           
  9555 ;; *************** function ___lwdiv *****************
  9556 ;; Defined at:
  9557 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  9558 ;; Parameters:    Size  Location     Type
  9559 ;;  dividend        2   10[COMRAM] unsigned int 
  9560 ;;  divisor         2   12[COMRAM] unsigned int 
  9561 ;; Auto vars:     Size  Location     Type
  9562 ;;  quotient        2   14[COMRAM] unsigned int 
  9563 ;;  counter         1   16[COMRAM] unsigned char 
  9564 ;; Return value:  Size  Location     Type
  9565 ;;                  2   10[COMRAM] unsigned int 
  9566 ;; Registers used:
  9567 ;;		wreg, status,2, status,0
  9568 ;; Tracked objects:
  9569 ;;		On entry : 0/0
  9570 ;;		On exit  : 0/0
  9571 ;;		Unchanged: 0/0
  9572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9573 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9574 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9576 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9577 ;;Total ram usage:        7 bytes
  9578 ;; Hardware stack levels used: 1
  9579 ;; Hardware stack levels required when called: 2
  9580 ;; This function calls:
  9581 ;;		Nothing
  9582 ;; This function is called by:
  9583 ;;		_setMotorPWM
  9584 ;; This function uses a non-reentrant model
  9585 ;;
  9586                           
  9587                           	psect	text41
  9588   0050C4                     __ptext41:
  9589                           	callstack 0
  9590   0050C4                     ___lwdiv:
  9591                           	callstack 26
  9592   0050C4  0E00               	movlw	0
  9593   0050C6  6E10               	movwf	(___lwdiv@quotient+1)^0,c
  9594   0050C8  0E00               	movlw	0
  9595   0050CA  6E0F               	movwf	___lwdiv@quotient^0,c
  9596   0050CC  500D               	movf	___lwdiv@divisor^0,w,c
  9597   0050CE  100E               	iorwf	(___lwdiv@divisor+1)^0,w,c
  9598   0050D0  B4D8               	btfsc	status,2,c
  9599   0050D2  EF6D  F028         	goto	u3391
  9600   0050D6  EF6F  F028         	goto	u3390
  9601   0050DA                     u3391:
  9602   0050DA  EF97  F028         	goto	l989
  9603   0050DE                     u3390:
  9604   0050DE  0E01               	movlw	1
  9605   0050E0  6E11               	movwf	___lwdiv@counter^0,c
  9606   0050E2  EF77  F028         	goto	l3699
  9607   0050E6                     l3697:
  9608   0050E6  90D8               	bcf	status,0,c
  9609   0050E8  360D               	rlcf	___lwdiv@divisor^0,f,c
  9610   0050EA  360E               	rlcf	(___lwdiv@divisor+1)^0,f,c
  9611   0050EC  2A11               	incf	___lwdiv@counter^0,f,c
  9612   0050EE                     l3699:
  9613   0050EE  AE0E               	btfss	(___lwdiv@divisor+1)^0,7,c
  9614   0050F0  EF7C  F028         	goto	u3401
  9615   0050F4  EF7E  F028         	goto	u3400
  9616   0050F8                     u3401:
  9617   0050F8  EF73  F028         	goto	l3697
  9618   0050FC                     u3400:
  9619   0050FC                     l3701:
  9620   0050FC  90D8               	bcf	status,0,c
  9621   0050FE  360F               	rlcf	___lwdiv@quotient^0,f,c
  9622   005100  3610               	rlcf	(___lwdiv@quotient+1)^0,f,c
  9623   005102  500D               	movf	___lwdiv@divisor^0,w,c
  9624   005104  5C0B               	subwf	___lwdiv@dividend^0,w,c
  9625   005106  500E               	movf	(___lwdiv@divisor+1)^0,w,c
  9626   005108  580C               	subwfb	(___lwdiv@dividend+1)^0,w,c
  9627   00510A  A0D8               	btfss	status,0,c
  9628   00510C  EF8A  F028         	goto	u3411
  9629   005110  EF8C  F028         	goto	u3410
  9630   005114                     u3411:
  9631   005114  EF91  F028         	goto	l3709
  9632   005118                     u3410:
  9633   005118  500D               	movf	___lwdiv@divisor^0,w,c
  9634   00511A  5E0B               	subwf	___lwdiv@dividend^0,f,c
  9635   00511C  500E               	movf	(___lwdiv@divisor+1)^0,w,c
  9636   00511E  5A0C               	subwfb	(___lwdiv@dividend+1)^0,f,c
  9637   005120  800F               	bsf	___lwdiv@quotient^0,0,c
  9638   005122                     l3709:
  9639   005122  90D8               	bcf	status,0,c
  9640   005124  320E               	rrcf	(___lwdiv@divisor+1)^0,f,c
  9641   005126  320D               	rrcf	___lwdiv@divisor^0,f,c
  9642   005128  2E11               	decfsz	___lwdiv@counter^0,f,c
  9643   00512A  EF7E  F028         	goto	l3701
  9644   00512E                     l989:
  9645   00512E  C00F  F00B         	movff	___lwdiv@quotient,?___lwdiv
  9646   005132  C010  F00C         	movff	___lwdiv@quotient+1,?___lwdiv+1
  9647   005136  0012               	return		;funcret
  9648   005138                     __end_of___lwdiv:
  9649                           	callstack 0
  9650                           
  9651 ;; *************** function ___xxtofl *****************
  9652 ;; Defined at:
  9653 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\xxtofl.c"
  9654 ;; Parameters:    Size  Location     Type
  9655 ;;  sign            1    wreg     unsigned char 
  9656 ;;  val             4    4[COMRAM] long 
  9657 ;; Auto vars:     Size  Location     Type
  9658 ;;  sign            1   12[COMRAM] unsigned char 
  9659 ;;  arg             4   14[COMRAM] unsigned long 
  9660 ;;  exp             1   13[COMRAM] unsigned char 
  9661 ;; Return value:  Size  Location     Type
  9662 ;;                  4    4[COMRAM] unsigned char 
  9663 ;; Registers used:
  9664 ;;		wreg, status,2, status,0
  9665 ;; Tracked objects:
  9666 ;;		On entry : 0/0
  9667 ;;		On exit  : 0/0
  9668 ;;		Unchanged: 0/0
  9669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9670 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9671 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9672 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9673 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9674 ;;Total ram usage:       14 bytes
  9675 ;; Hardware stack levels used: 1
  9676 ;; Hardware stack levels required when called: 2
  9677 ;; This function calls:
  9678 ;;		Nothing
  9679 ;; This function is called by:
  9680 ;;		_colorDetect
  9681 ;;		_turnLeft_90
  9682 ;;		_turnRight_90
  9683 ;;		_turn_180
  9684 ;;		_turnRight_135
  9685 ;;		_turnLeft_135
  9686 ;;		_main
  9687 ;;		_turnLeft
  9688 ;;		_turnRight
  9689 ;; This function uses a non-reentrant model
  9690 ;;
  9691                           
  9692                           	psect	text42
  9693   0039DC                     __ptext42:
  9694                           	callstack 0
  9695   0039DC                     ___xxtofl:
  9696                           	callstack 27
  9697                           
  9698                           ;incstack = 0
  9699                           ;___xxtofl@sign stored from wreg
  9700   0039DC  6E0D               	movwf	___xxtofl@sign^0,c
  9701   0039DE  500D               	movf	___xxtofl@sign^0,w,c
  9702   0039E0  B4D8               	btfsc	status,2,c
  9703   0039E2  EFF5  F01C         	goto	u5101
  9704   0039E6  EFF7  F01C         	goto	u5100
  9705   0039EA                     u5101:
  9706   0039EA  EF19  F01D         	goto	l1153
  9707   0039EE                     u5100:
  9708   0039EE  BE08               	btfsc	(___xxtofl@val+3)^0,7,c
  9709   0039F0  EFFE  F01C         	goto	u5110
  9710   0039F4  EFFC  F01C         	goto	u5111
  9711   0039F8                     u5111:
  9712   0039F8  EF19  F01D         	goto	l1153
  9713   0039FC                     u5110:
  9714   0039FC  C005  F009         	movff	___xxtofl@val,??___xxtofl
  9715   003A00  C006  F00A         	movff	___xxtofl@val+1,??___xxtofl+1
  9716   003A04  C007  F00B         	movff	___xxtofl@val+2,??___xxtofl+2
  9717   003A08  C008  F00C         	movff	___xxtofl@val+3,??___xxtofl+3
  9718   003A0C  1E09               	comf	??___xxtofl^0,f,c
  9719   003A0E  1E0A               	comf	(??___xxtofl+1)^0,f,c
  9720   003A10  1E0B               	comf	(??___xxtofl+2)^0,f,c
  9721   003A12  1E0C               	comf	(??___xxtofl+3)^0,f,c
  9722   003A14  2A09               	incf	??___xxtofl^0,f,c
  9723   003A16  0E00               	movlw	0
  9724   003A18  220A               	addwfc	(??___xxtofl+1)^0,f,c
  9725   003A1A  220B               	addwfc	(??___xxtofl+2)^0,f,c
  9726   003A1C  220C               	addwfc	(??___xxtofl+3)^0,f,c
  9727   003A1E  C009  F00F         	movff	??___xxtofl,___xxtofl@arg
  9728   003A22  C00A  F010         	movff	??___xxtofl+1,___xxtofl@arg+1
  9729   003A26  C00B  F011         	movff	??___xxtofl+2,___xxtofl@arg+2
  9730   003A2A  C00C  F012         	movff	??___xxtofl+3,___xxtofl@arg+3
  9731   003A2E  EF21  F01D         	goto	l4923
  9732   003A32                     l1153:
  9733   003A32  C005  F00F         	movff	___xxtofl@val,___xxtofl@arg
  9734   003A36  C006  F010         	movff	___xxtofl@val+1,___xxtofl@arg+1
  9735   003A3A  C007  F011         	movff	___xxtofl@val+2,___xxtofl@arg+2
  9736   003A3E  C008  F012         	movff	___xxtofl@val+3,___xxtofl@arg+3
  9737   003A42                     l4923:
  9738   003A42  5005               	movf	___xxtofl@val^0,w,c
  9739   003A44  1006               	iorwf	(___xxtofl@val+1)^0,w,c
  9740   003A46  1007               	iorwf	(___xxtofl@val+2)^0,w,c
  9741   003A48  1008               	iorwf	(___xxtofl@val+3)^0,w,c
  9742   003A4A  A4D8               	btfss	status,2,c
  9743   003A4C  EF2A  F01D         	goto	u5121
  9744   003A50  EF2C  F01D         	goto	u5120
  9745   003A54                     u5121:
  9746   003A54  EF36  F01D         	goto	l4929
  9747   003A58                     u5120:
  9748   003A58  0E00               	movlw	0
  9749   003A5A  6E05               	movwf	?___xxtofl^0,c
  9750   003A5C  0E00               	movlw	0
  9751   003A5E  6E06               	movwf	(?___xxtofl+1)^0,c
  9752   003A60  0E00               	movlw	0
  9753   003A62  6E07               	movwf	(?___xxtofl+2)^0,c
  9754   003A64  0E00               	movlw	0
  9755   003A66  6E08               	movwf	(?___xxtofl+3)^0,c
  9756   003A68  EFC7  F01D         	goto	l1156
  9757   003A6C                     l4929:
  9758   003A6C  0E96               	movlw	150
  9759   003A6E  6E0E               	movwf	___xxtofl@exp^0,c
  9760   003A70  EF40  F01D         	goto	l4933
  9761   003A74                     l4931:
  9762   003A74  2A0E               	incf	___xxtofl@exp^0,f,c
  9763   003A76  90D8               	bcf	status,0,c
  9764   003A78  3212               	rrcf	(___xxtofl@arg+3)^0,f,c
  9765   003A7A  3211               	rrcf	(___xxtofl@arg+2)^0,f,c
  9766   003A7C  3210               	rrcf	(___xxtofl@arg+1)^0,f,c
  9767   003A7E  320F               	rrcf	___xxtofl@arg^0,f,c
  9768   003A80                     l4933:
  9769   003A80  0E00               	movlw	0
  9770   003A82  140F               	andwf	___xxtofl@arg^0,w,c
  9771   003A84  6E09               	movwf	??___xxtofl^0,c
  9772   003A86  0E00               	movlw	0
  9773   003A88  1410               	andwf	(___xxtofl@arg+1)^0,w,c
  9774   003A8A  6E0A               	movwf	(??___xxtofl+1)^0,c
  9775   003A8C  0E00               	movlw	0
  9776   003A8E  1411               	andwf	(___xxtofl@arg+2)^0,w,c
  9777   003A90  6E0B               	movwf	(??___xxtofl+2)^0,c
  9778   003A92  0EFE               	movlw	254
  9779   003A94  1412               	andwf	(___xxtofl@arg+3)^0,w,c
  9780   003A96  6E0C               	movwf	(??___xxtofl+3)^0,c
  9781   003A98  5009               	movf	??___xxtofl^0,w,c
  9782   003A9A  100A               	iorwf	(??___xxtofl+1)^0,w,c
  9783   003A9C  100B               	iorwf	(??___xxtofl+2)^0,w,c
  9784   003A9E  100C               	iorwf	(??___xxtofl+3)^0,w,c
  9785   003AA0  A4D8               	btfss	status,2,c
  9786   003AA2  EF55  F01D         	goto	u5131
  9787   003AA6  EF57  F01D         	goto	u5130
  9788   003AAA                     u5131:
  9789   003AAA  EF3A  F01D         	goto	l4931
  9790   003AAE                     u5130:
  9791   003AAE  EF65  F01D         	goto	l1160
  9792   003AB2                     l4935:
  9793   003AB2  2A0E               	incf	___xxtofl@exp^0,f,c
  9794   003AB4  0E01               	movlw	1
  9795   003AB6  260F               	addwf	___xxtofl@arg^0,f,c
  9796   003AB8  0E00               	movlw	0
  9797   003ABA  2210               	addwfc	(___xxtofl@arg+1)^0,f,c
  9798   003ABC  2211               	addwfc	(___xxtofl@arg+2)^0,f,c
  9799   003ABE  2212               	addwfc	(___xxtofl@arg+3)^0,f,c
  9800   003AC0  90D8               	bcf	status,0,c
  9801   003AC2  3212               	rrcf	(___xxtofl@arg+3)^0,f,c
  9802   003AC4  3211               	rrcf	(___xxtofl@arg+2)^0,f,c
  9803   003AC6  3210               	rrcf	(___xxtofl@arg+1)^0,f,c
  9804   003AC8  320F               	rrcf	___xxtofl@arg^0,f,c
  9805   003ACA                     l1160:
  9806   003ACA  0E00               	movlw	0
  9807   003ACC  140F               	andwf	___xxtofl@arg^0,w,c
  9808   003ACE  6E09               	movwf	??___xxtofl^0,c
  9809   003AD0  0E00               	movlw	0
  9810   003AD2  1410               	andwf	(___xxtofl@arg+1)^0,w,c
  9811   003AD4  6E0A               	movwf	(??___xxtofl+1)^0,c
  9812   003AD6  0E00               	movlw	0
  9813   003AD8  1411               	andwf	(___xxtofl@arg+2)^0,w,c
  9814   003ADA  6E0B               	movwf	(??___xxtofl+2)^0,c
  9815   003ADC  0EFF               	movlw	255
  9816   003ADE  1412               	andwf	(___xxtofl@arg+3)^0,w,c
  9817   003AE0  6E0C               	movwf	(??___xxtofl+3)^0,c
  9818   003AE2  5009               	movf	??___xxtofl^0,w,c
  9819   003AE4  100A               	iorwf	(??___xxtofl+1)^0,w,c
  9820   003AE6  100B               	iorwf	(??___xxtofl+2)^0,w,c
  9821   003AE8  100C               	iorwf	(??___xxtofl+3)^0,w,c
  9822   003AEA  A4D8               	btfss	status,2,c
  9823   003AEC  EF7A  F01D         	goto	u5141
  9824   003AF0  EF7C  F01D         	goto	u5140
  9825   003AF4                     u5141:
  9826   003AF4  EF59  F01D         	goto	l4935
  9827   003AF8                     u5140:
  9828   003AF8  EF84  F01D         	goto	l4943
  9829   003AFC                     l4941:
  9830   003AFC  060E               	decf	___xxtofl@exp^0,f,c
  9831   003AFE  90D8               	bcf	status,0,c
  9832   003B00  360F               	rlcf	___xxtofl@arg^0,f,c
  9833   003B02  3610               	rlcf	(___xxtofl@arg+1)^0,f,c
  9834   003B04  3611               	rlcf	(___xxtofl@arg+2)^0,f,c
  9835   003B06  3612               	rlcf	(___xxtofl@arg+3)^0,f,c
  9836   003B08                     l4943:
  9837   003B08  BE11               	btfsc	(___xxtofl@arg+2)^0,7,c
  9838   003B0A  EF89  F01D         	goto	u5151
  9839   003B0E  EF8B  F01D         	goto	u5150
  9840   003B12                     u5151:
  9841   003B12  EF93  F01D         	goto	l1167
  9842   003B16                     u5150:
  9843   003B16  0E02               	movlw	2
  9844   003B18  600E               	cpfslt	___xxtofl@exp^0,c
  9845   003B1A  EF91  F01D         	goto	u5161
  9846   003B1E  EF93  F01D         	goto	u5160
  9847   003B22                     u5161:
  9848   003B22  EF7E  F01D         	goto	l4941
  9849   003B26                     u5160:
  9850   003B26                     l1167:
  9851   003B26  B00E               	btfsc	___xxtofl@exp^0,0,c
  9852   003B28  EF98  F01D         	goto	u5171
  9853   003B2C  EF9A  F01D         	goto	u5170
  9854   003B30                     u5171:
  9855   003B30  EF9B  F01D         	goto	l4949
  9856   003B34                     u5170:
  9857   003B34  9E11               	bcf	(___xxtofl@arg+2)^0,7,c
  9858   003B36                     l4949:
  9859   003B36  90D8               	bcf	status,0,c
  9860   003B38  320E               	rrcf	___xxtofl@exp^0,f,c
  9861   003B3A  C00E  F009         	movff	___xxtofl@exp,??___xxtofl
  9862   003B3E  6A0A               	clrf	(??___xxtofl+1)^0,c
  9863   003B40  6A0B               	clrf	(??___xxtofl+2)^0,c
  9864   003B42  6A0C               	clrf	(??___xxtofl+3)^0,c
  9865   003B44  C009  F00C         	movff	??___xxtofl,??___xxtofl+3
  9866   003B48  6A0B               	clrf	(??___xxtofl+2)^0,c
  9867   003B4A  6A0A               	clrf	(??___xxtofl+1)^0,c
  9868   003B4C  6A09               	clrf	??___xxtofl^0,c
  9869   003B4E  5009               	movf	??___xxtofl^0,w,c
  9870   003B50  120F               	iorwf	___xxtofl@arg^0,f,c
  9871   003B52  500A               	movf	(??___xxtofl+1)^0,w,c
  9872   003B54  1210               	iorwf	(___xxtofl@arg+1)^0,f,c
  9873   003B56  500B               	movf	(??___xxtofl+2)^0,w,c
  9874   003B58  1211               	iorwf	(___xxtofl@arg+2)^0,f,c
  9875   003B5A  500C               	movf	(??___xxtofl+3)^0,w,c
  9876   003B5C  1212               	iorwf	(___xxtofl@arg+3)^0,f,c
  9877   003B5E  500D               	movf	___xxtofl@sign^0,w,c
  9878   003B60  B4D8               	btfsc	status,2,c
  9879   003B62  EFB5  F01D         	goto	u5181
  9880   003B66  EFB7  F01D         	goto	u5180
  9881   003B6A                     u5181:
  9882   003B6A  EFBF  F01D         	goto	l4959
  9883   003B6E                     u5180:
  9884   003B6E  BE08               	btfsc	(___xxtofl@val+3)^0,7,c
  9885   003B70  EFBE  F01D         	goto	u5190
  9886   003B74  EFBC  F01D         	goto	u5191
  9887   003B78                     u5191:
  9888   003B78  EFBF  F01D         	goto	l4959
  9889   003B7C                     u5190:
  9890   003B7C  8E12               	bsf	(___xxtofl@arg+3)^0,7,c
  9891   003B7E                     l4959:
  9892   003B7E  C00F  F005         	movff	___xxtofl@arg,?___xxtofl
  9893   003B82  C010  F006         	movff	___xxtofl@arg+1,?___xxtofl+1
  9894   003B86  C011  F007         	movff	___xxtofl@arg+2,?___xxtofl+2
  9895   003B8A  C012  F008         	movff	___xxtofl@arg+3,?___xxtofl+3
  9896   003B8E                     l1156:
  9897   003B8E  0012               	return		;funcret
  9898   003B90                     __end_of___xxtofl:
  9899                           	callstack 0
  9900                           
  9901 ;; *************** function ___flsub *****************
  9902 ;; Defined at:
  9903 ;;		line 245 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\sprcadd.c"
  9904 ;; Parameters:    Size  Location     Type
  9905 ;;  b               4   45[COMRAM] unsigned char 
  9906 ;;  a               4   49[COMRAM] unsigned char 
  9907 ;; Auto vars:     Size  Location     Type
  9908 ;;		None
  9909 ;; Return value:  Size  Location     Type
  9910 ;;                  4   45[COMRAM] unsigned char 
  9911 ;; Registers used:
  9912 ;;		wreg, status,2, status,0, cstack
  9913 ;; Tracked objects:
  9914 ;;		On entry : 0/0
  9915 ;;		On exit  : 0/0
  9916 ;;		Unchanged: 0/0
  9917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9918 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9921 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9922 ;;Total ram usage:        8 bytes
  9923 ;; Hardware stack levels used: 1
  9924 ;; Hardware stack levels required when called: 3
  9925 ;; This function calls:
  9926 ;;		___fladd
  9927 ;; This function is called by:
  9928 ;;		_colorDetect
  9929 ;;		_efgtoa
  9930 ;; This function uses a non-reentrant model
  9931 ;;
  9932                           
  9933                           	psect	text43
  9934   00547E                     __ptext43:
  9935                           	callstack 0
  9936   00547E                     ___flsub:
  9937                           	callstack 23
  9938   00547E  0E00               	movlw	0
  9939   005480  1A32               	xorwf	___flsub@a^0,f,c
  9940   005482  0E00               	movlw	0
  9941   005484  1A33               	xorwf	(___flsub@a+1)^0,f,c
  9942   005486  0E00               	movlw	0
  9943   005488  1A34               	xorwf	(___flsub@a+2)^0,f,c
  9944   00548A  0E80               	movlw	128
  9945   00548C  1A35               	xorwf	(___flsub@a+3)^0,f,c
  9946   00548E  C02E  F005         	movff	___flsub@b,___fladd@b
  9947   005492  C02F  F006         	movff	___flsub@b+1,___fladd@b+1
  9948   005496  C030  F007         	movff	___flsub@b+2,___fladd@b+2
  9949   00549A  C031  F008         	movff	___flsub@b+3,___fladd@b+3
  9950   00549E  C032  F009         	movff	___flsub@a,___fladd@a
  9951   0054A2  C033  F00A         	movff	___flsub@a+1,___fladd@a+1
  9952   0054A6  C034  F00B         	movff	___flsub@a+2,___fladd@a+2
  9953   0054AA  C035  F00C         	movff	___flsub@a+3,___fladd@a+3
  9954   0054AE  ECBC  F011         	call	___fladd	;wreg free
  9955   0054B2  C005  F02E         	movff	?___fladd,?___flsub
  9956   0054B6  C006  F02F         	movff	?___fladd+1,?___flsub+1
  9957   0054BA  C007  F030         	movff	?___fladd+2,?___flsub+2
  9958   0054BE  C008  F031         	movff	?___fladd+3,?___flsub+3
  9959   0054C2  0012               	return		;funcret
  9960   0054C4                     __end_of___flsub:
  9961                           	callstack 0
  9962                           
  9963 ;; *************** function ___fladd *****************
  9964 ;; Defined at:
  9965 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\sprcadd.c"
  9966 ;; Parameters:    Size  Location     Type
  9967 ;;  b               4    4[COMRAM] unsigned char 
  9968 ;;  a               4    8[COMRAM] unsigned char 
  9969 ;; Auto vars:     Size  Location     Type
  9970 ;;  grs             1   19[COMRAM] unsigned char 
  9971 ;;  bexp            1   18[COMRAM] unsigned char 
  9972 ;;  aexp            1   17[COMRAM] unsigned char 
  9973 ;;  signs           1   16[COMRAM] unsigned char 
  9974 ;; Return value:  Size  Location     Type
  9975 ;;                  4    4[COMRAM] unsigned char 
  9976 ;; Registers used:
  9977 ;;		wreg, status,2, status,0
  9978 ;; Tracked objects:
  9979 ;;		On entry : 0/0
  9980 ;;		On exit  : 0/0
  9981 ;;		Unchanged: 0/0
  9982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9983 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9984 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9985 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9986 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9987 ;;Total ram usage:       16 bytes
  9988 ;; Hardware stack levels used: 1
  9989 ;; Hardware stack levels required when called: 2
  9990 ;; This function calls:
  9991 ;;		Nothing
  9992 ;; This function is called by:
  9993 ;;		___flsub
  9994 ;;		_efgtoa
  9995 ;; This function uses a non-reentrant model
  9996 ;;
  9997                           
  9998                           	psect	text44
  9999   002378                     __ptext44:
 10000                           	callstack 0
 10001   002378                     ___fladd:
 10002                           	callstack 23
 10003   002378  5008               	movf	(___fladd@b+3)^0,w,c
 10004   00237A  0B80               	andlw	128
 10005   00237C  6E11               	movwf	___fladd@signs^0,c
 10006   00237E  5008               	movf	(___fladd@b+3)^0,w,c
 10007   002380  2408               	addwf	(___fladd@b+3)^0,w,c
 10008   002382  6E13               	movwf	___fladd@bexp^0,c
 10009   002384  AE07               	btfss	(___fladd@b+2)^0,7,c
 10010   002386  EFC7  F011         	goto	u3001
 10011   00238A  EFC9  F011         	goto	u3000
 10012   00238E                     u3001:
 10013   00238E  EFCA  F011         	goto	l3495
 10014   002392                     u3000:
 10015   002392  8013               	bsf	___fladd@bexp^0,0,c
 10016   002394                     l3495:
 10017   002394  5013               	movf	___fladd@bexp^0,w,c
 10018   002396  B4D8               	btfsc	status,2,c
 10019   002398  EFD0  F011         	goto	u3011
 10020   00239C  EFD2  F011         	goto	u3010
 10021   0023A0                     u3011:
 10022   0023A0  EFE7  F011         	goto	l3505
 10023   0023A4                     u3010:
 10024   0023A4  2813               	incf	___fladd@bexp^0,w,c
 10025   0023A6  A4D8               	btfss	status,2,c
 10026   0023A8  EFD8  F011         	goto	u3021
 10027   0023AC  EFDA  F011         	goto	u3020
 10028   0023B0                     u3021:
 10029   0023B0  EFE2  F011         	goto	l3501
 10030   0023B4                     u3020:
 10031   0023B4  0E00               	movlw	0
 10032   0023B6  6E05               	movwf	___fladd@b^0,c
 10033   0023B8  0E00               	movlw	0
 10034   0023BA  6E06               	movwf	(___fladd@b+1)^0,c
 10035   0023BC  0E00               	movlw	0
 10036   0023BE  6E07               	movwf	(___fladd@b+2)^0,c
 10037   0023C0  0E00               	movlw	0
 10038   0023C2  6E08               	movwf	(___fladd@b+3)^0,c
 10039   0023C4                     l3501:
 10040   0023C4  8E07               	bsf	(___fladd@b+2)^0,7,c
 10041   0023C6  0E00               	movlw	0
 10042   0023C8  6E08               	movwf	(___fladd@b+3)^0,c
 10043   0023CA  EFEF  F011         	goto	l3507
 10044   0023CE                     l3505:
 10045   0023CE  0E00               	movlw	0
 10046   0023D0  6E05               	movwf	___fladd@b^0,c
 10047   0023D2  0E00               	movlw	0
 10048   0023D4  6E06               	movwf	(___fladd@b+1)^0,c
 10049   0023D6  0E00               	movlw	0
 10050   0023D8  6E07               	movwf	(___fladd@b+2)^0,c
 10051   0023DA  0E00               	movlw	0
 10052   0023DC  6E08               	movwf	(___fladd@b+3)^0,c
 10053   0023DE                     l3507:
 10054   0023DE  500C               	movf	(___fladd@a+3)^0,w,c
 10055   0023E0  0B80               	andlw	128
 10056   0023E2  6E12               	movwf	___fladd@aexp^0,c
 10057   0023E4  5011               	movf	___fladd@signs^0,w,c
 10058   0023E6  1812               	xorwf	___fladd@aexp^0,w,c
 10059   0023E8  B4D8               	btfsc	status,2,c
 10060   0023EA  EFF9  F011         	goto	u3031
 10061   0023EE  EFFB  F011         	goto	u3030
 10062   0023F2                     u3031:
 10063   0023F2  EFFC  F011         	goto	l3513
 10064   0023F6                     u3030:
 10065   0023F6  8C11               	bsf	___fladd@signs^0,6,c
 10066   0023F8                     l3513:
 10067   0023F8  500C               	movf	(___fladd@a+3)^0,w,c
 10068   0023FA  240C               	addwf	(___fladd@a+3)^0,w,c
 10069   0023FC  6E12               	movwf	___fladd@aexp^0,c
 10070   0023FE  AE0B               	btfss	(___fladd@a+2)^0,7,c
 10071   002400  EF04  F012         	goto	u3041
 10072   002404  EF06  F012         	goto	u3040
 10073   002408                     u3041:
 10074   002408  EF07  F012         	goto	l3519
 10075   00240C                     u3040:
 10076   00240C  8012               	bsf	___fladd@aexp^0,0,c
 10077   00240E                     l3519:
 10078   00240E  5012               	movf	___fladd@aexp^0,w,c
 10079   002410  B4D8               	btfsc	status,2,c
 10080   002412  EF0D  F012         	goto	u3051
 10081   002416  EF0F  F012         	goto	u3050
 10082   00241A                     u3051:
 10083   00241A  EF24  F012         	goto	l3529
 10084   00241E                     u3050:
 10085   00241E  2812               	incf	___fladd@aexp^0,w,c
 10086   002420  A4D8               	btfss	status,2,c
 10087   002422  EF15  F012         	goto	u3061
 10088   002426  EF17  F012         	goto	u3060
 10089   00242A                     u3061:
 10090   00242A  EF1F  F012         	goto	l3525
 10091   00242E                     u3060:
 10092   00242E  0E00               	movlw	0
 10093   002430  6E09               	movwf	___fladd@a^0,c
 10094   002432  0E00               	movlw	0
 10095   002434  6E0A               	movwf	(___fladd@a+1)^0,c
 10096   002436  0E00               	movlw	0
 10097   002438  6E0B               	movwf	(___fladd@a+2)^0,c
 10098   00243A  0E00               	movlw	0
 10099   00243C  6E0C               	movwf	(___fladd@a+3)^0,c
 10100   00243E                     l3525:
 10101   00243E  8E0B               	bsf	(___fladd@a+2)^0,7,c
 10102   002440  0E00               	movlw	0
 10103   002442  6E0C               	movwf	(___fladd@a+3)^0,c
 10104   002444  EF2C  F012         	goto	l3531
 10105   002448                     l3529:
 10106   002448  0E00               	movlw	0
 10107   00244A  6E09               	movwf	___fladd@a^0,c
 10108   00244C  0E00               	movlw	0
 10109   00244E  6E0A               	movwf	(___fladd@a+1)^0,c
 10110   002450  0E00               	movlw	0
 10111   002452  6E0B               	movwf	(___fladd@a+2)^0,c
 10112   002454  0E00               	movlw	0
 10113   002456  6E0C               	movwf	(___fladd@a+3)^0,c
 10114   002458                     l3531:
 10115   002458  5013               	movf	___fladd@bexp^0,w,c
 10116   00245A  5C12               	subwf	___fladd@aexp^0,w,c
 10117   00245C  B0D8               	btfsc	status,0,c
 10118   00245E  EF33  F012         	goto	u3071
 10119   002462  EF35  F012         	goto	u3070
 10120   002466                     u3071:
 10121   002466  EF5C  F012         	goto	l3567
 10122   00246A                     u3070:
 10123   00246A  AC11               	btfss	___fladd@signs^0,6,c
 10124   00246C  EF3A  F012         	goto	u3081
 10125   002470  EF3C  F012         	goto	u3080
 10126   002474                     u3081:
 10127   002474  EF3E  F012         	goto	l3537
 10128   002478                     u3080:
 10129   002478  0E80               	movlw	128
 10130   00247A  1A11               	xorwf	___fladd@signs^0,f,c
 10131   00247C                     l3537:
 10132   00247C  C013  F014         	movff	___fladd@bexp,___fladd@grs
 10133   002480  C012  F013         	movff	___fladd@aexp,___fladd@bexp
 10134   002484  C014  F012         	movff	___fladd@grs,___fladd@aexp
 10135   002488  C005  F014         	movff	___fladd@b,___fladd@grs
 10136   00248C  C009  F005         	movff	___fladd@a,___fladd@b
 10137   002490  C014  F009         	movff	___fladd@grs,___fladd@a
 10138   002494  C006  F014         	movff	___fladd@b+1,___fladd@grs
 10139   002498  C00A  F006         	movff	___fladd@a+1,___fladd@b+1
 10140   00249C  C014  F00A         	movff	___fladd@grs,___fladd@a+1
 10141   0024A0  C007  F014         	movff	___fladd@b+2,___fladd@grs
 10142   0024A4  C00B  F007         	movff	___fladd@a+2,___fladd@b+2
 10143   0024A8  C014  F00B         	movff	___fladd@grs,___fladd@a+2
 10144   0024AC  C008  F014         	movff	___fladd@b+3,___fladd@grs
 10145   0024B0  C00C  F008         	movff	___fladd@a+3,___fladd@b+3
 10146   0024B4  C014  F00C         	movff	___fladd@grs,___fladd@a+3
 10147   0024B8                     l3567:
 10148   0024B8  0E00               	movlw	0
 10149   0024BA  6E14               	movwf	___fladd@grs^0,c
 10150   0024BC  5013               	movf	___fladd@bexp^0,w,c
 10151   0024BE  C012  F00D         	movff	___fladd@aexp,??___fladd
 10152   0024C2  6A0E               	clrf	(??___fladd+1)^0,c
 10153   0024C4  5E0D               	subwf	??___fladd^0,f,c
 10154   0024C6  0E00               	movlw	0
 10155   0024C8  5A0E               	subwfb	(??___fladd+1)^0,f,c
 10156   0024CA  BE0E               	btfsc	(??___fladd+1)^0,7,c
 10157   0024CC  EF71  F012         	goto	u3091
 10158   0024D0  500E               	movf	(??___fladd+1)^0,w,c
 10159   0024D2  E109               	bnz	u3090
 10160   0024D4  0E1A               	movlw	26
 10161   0024D6  5C0D               	subwf	??___fladd^0,w,c
 10162   0024D8  A0D8               	btfss	status,0,c
 10163   0024DA  EF71  F012         	goto	u3091
 10164   0024DE  EF73  F012         	goto	u3090
 10165   0024E2                     u3091:
 10166   0024E2  EFAA  F012         	goto	l1027
 10167   0024E6                     u3090:
 10168   0024E6  5005               	movf	___fladd@b^0,w,c
 10169   0024E8  1006               	iorwf	(___fladd@b+1)^0,w,c
 10170   0024EA  1007               	iorwf	(___fladd@b+2)^0,w,c
 10171   0024EC  1008               	iorwf	(___fladd@b+3)^0,w,c
 10172   0024EE  A4D8               	btfss	status,2,c
 10173   0024F0  EF7C  F012         	goto	u3101
 10174   0024F4  EF7F  F012         	goto	u3100
 10175   0024F8                     u3101:
 10176   0024F8  0E01               	movlw	1
 10177   0024FA  EF80  F012         	goto	u3110
 10178   0024FE                     u3100:
 10179   0024FE  0E00               	movlw	0
 10180   002500                     u3110:
 10181   002500  6E14               	movwf	___fladd@grs^0,c
 10182   002502  0E00               	movlw	0
 10183   002504  6E05               	movwf	___fladd@b^0,c
 10184   002506  0E00               	movlw	0
 10185   002508  6E06               	movwf	(___fladd@b+1)^0,c
 10186   00250A  0E00               	movlw	0
 10187   00250C  6E07               	movwf	(___fladd@b+2)^0,c
 10188   00250E  0E00               	movlw	0
 10189   002510  6E08               	movwf	(___fladd@b+3)^0,c
 10190   002512  C012  F013         	movff	___fladd@aexp,___fladd@bexp
 10191   002516  EFB3  F012         	goto	l1026
 10192   00251A                     l1028:
 10193   00251A  A014               	btfss	___fladd@grs^0,0,c
 10194   00251C  EF92  F012         	goto	u3121
 10195   002520  EF94  F012         	goto	u3120
 10196   002524                     u3121:
 10197   002524  EF9A  F012         	goto	l3579
 10198   002528                     u3120:
 10199   002528  90D8               	bcf	status,0,c
 10200   00252A  3014               	rrcf	___fladd@grs^0,w,c
 10201   00252C  0901               	iorlw	1
 10202   00252E  6E14               	movwf	___fladd@grs^0,c
 10203   002530  EF9C  F012         	goto	l3581
 10204   002534                     l3579:
 10205   002534  90D8               	bcf	status,0,c
 10206   002536  3214               	rrcf	___fladd@grs^0,f,c
 10207   002538                     l3581:
 10208   002538  A005               	btfss	___fladd@b^0,0,c
 10209   00253A  EFA1  F012         	goto	u3131
 10210   00253E  EFA3  F012         	goto	u3130
 10211   002542                     u3131:
 10212   002542  EFA4  F012         	goto	l3585
 10213   002546                     u3130:
 10214   002546  8E14               	bsf	___fladd@grs^0,7,c
 10215   002548                     l3585:
 10216   002548  3408               	rlcf	(___fladd@b+3)^0,w,c
 10217   00254A  3208               	rrcf	(___fladd@b+3)^0,f,c
 10218   00254C  3207               	rrcf	(___fladd@b+2)^0,f,c
 10219   00254E  3206               	rrcf	(___fladd@b+1)^0,f,c
 10220   002550  3205               	rrcf	___fladd@b^0,f,c
 10221   002552  2A13               	incf	___fladd@bexp^0,f,c
 10222   002554                     l1027:
 10223   002554  5012               	movf	___fladd@aexp^0,w,c
 10224   002556  5C13               	subwf	___fladd@bexp^0,w,c
 10225   002558  A0D8               	btfss	status,0,c
 10226   00255A  EFB1  F012         	goto	u3141
 10227   00255E  EFB3  F012         	goto	u3140
 10228   002562                     u3141:
 10229   002562  EF8D  F012         	goto	l1028
 10230   002566                     u3140:
 10231   002566                     l1026:
 10232   002566  BC11               	btfsc	___fladd@signs^0,6,c
 10233   002568  EFB8  F012         	goto	u3151
 10234   00256C  EFBA  F012         	goto	u3150
 10235   002570                     u3151:
 10236   002570  EFFA  F012         	goto	l3613
 10237   002574                     u3150:
 10238   002574  5013               	movf	___fladd@bexp^0,w,c
 10239   002576  A4D8               	btfss	status,2,c
 10240   002578  EFC0  F012         	goto	u3161
 10241   00257C  EFC2  F012         	goto	u3160
 10242   002580                     u3161:
 10243   002580  EFCC  F012         	goto	l3595
 10244   002584                     u3160:
 10245   002584  0E00               	movlw	0
 10246   002586  6E05               	movwf	?___fladd^0,c
 10247   002588  0E00               	movlw	0
 10248   00258A  6E06               	movwf	(?___fladd+1)^0,c
 10249   00258C  0E00               	movlw	0
 10250   00258E  6E07               	movwf	(?___fladd+2)^0,c
 10251   002590  0E00               	movlw	0
 10252   002592  6E08               	movwf	(?___fladd+3)^0,c
 10253   002594  EF1B  F014         	goto	l1035
 10254   002598                     l3595:
 10255   002598  5009               	movf	___fladd@a^0,w,c
 10256   00259A  2605               	addwf	___fladd@b^0,f,c
 10257   00259C  500A               	movf	(___fladd@a+1)^0,w,c
 10258   00259E  2206               	addwfc	(___fladd@b+1)^0,f,c
 10259   0025A0  500B               	movf	(___fladd@a+2)^0,w,c
 10260   0025A2  2207               	addwfc	(___fladd@b+2)^0,f,c
 10261   0025A4  500C               	movf	(___fladd@a+3)^0,w,c
 10262   0025A6  2208               	addwfc	(___fladd@b+3)^0,f,c
 10263   0025A8  A008               	btfss	(___fladd@b+3)^0,0,c
 10264   0025AA  EFD9  F012         	goto	u3171
 10265   0025AE  EFDB  F012         	goto	u3170
 10266   0025B2                     u3171:
 10267   0025B2  EF87  F013         	goto	l3649
 10268   0025B6                     u3170:
 10269   0025B6  A014               	btfss	___fladd@grs^0,0,c
 10270   0025B8  EFE0  F012         	goto	u3181
 10271   0025BC  EFE2  F012         	goto	u3180
 10272   0025C0                     u3181:
 10273   0025C0  EFE8  F012         	goto	l3603
 10274   0025C4                     u3180:
 10275   0025C4  90D8               	bcf	status,0,c
 10276   0025C6  3014               	rrcf	___fladd@grs^0,w,c
 10277   0025C8  0901               	iorlw	1
 10278   0025CA  6E14               	movwf	___fladd@grs^0,c
 10279   0025CC  EFEA  F012         	goto	l3605
 10280   0025D0                     l3603:
 10281   0025D0  90D8               	bcf	status,0,c
 10282   0025D2  3214               	rrcf	___fladd@grs^0,f,c
 10283   0025D4                     l3605:
 10284   0025D4  A005               	btfss	___fladd@b^0,0,c
 10285   0025D6  EFEF  F012         	goto	u3191
 10286   0025DA  EFF1  F012         	goto	u3190
 10287   0025DE                     u3191:
 10288   0025DE  EFF2  F012         	goto	l3609
 10289   0025E2                     u3190:
 10290   0025E2  8E14               	bsf	___fladd@grs^0,7,c
 10291   0025E4                     l3609:
 10292   0025E4  3408               	rlcf	(___fladd@b+3)^0,w,c
 10293   0025E6  3208               	rrcf	(___fladd@b+3)^0,f,c
 10294   0025E8  3207               	rrcf	(___fladd@b+2)^0,f,c
 10295   0025EA  3206               	rrcf	(___fladd@b+1)^0,f,c
 10296   0025EC  3205               	rrcf	___fladd@b^0,f,c
 10297   0025EE  2A13               	incf	___fladd@bexp^0,f,c
 10298   0025F0  EF87  F013         	goto	l3649
 10299   0025F4                     l3613:
 10300   0025F4  5009               	movf	___fladd@a^0,w,c
 10301   0025F6  5C05               	subwf	___fladd@b^0,w,c
 10302   0025F8  500A               	movf	(___fladd@a+1)^0,w,c
 10303   0025FA  5806               	subwfb	(___fladd@b+1)^0,w,c
 10304   0025FC  500B               	movf	(___fladd@a+2)^0,w,c
 10305   0025FE  5807               	subwfb	(___fladd@b+2)^0,w,c
 10306   002600  5008               	movf	(___fladd@b+3)^0,w,c
 10307   002602  0A80               	xorlw	128
 10308   002604  6E0D               	movwf	??___fladd^0,c
 10309   002606  500C               	movf	(___fladd@a+3)^0,w,c
 10310   002608  0A80               	xorlw	128
 10311   00260A  580D               	subwfb	??___fladd^0,w,c
 10312   00260C  B0D8               	btfsc	status,0,c
 10313   00260E  EF0B  F013         	goto	u3201
 10314   002612  EF0D  F013         	goto	u3200
 10315   002616                     u3201:
 10316   002616  EF38  F013         	goto	l3623
 10317   00261A                     u3200:
 10318   00261A  5005               	movf	___fladd@b^0,w,c
 10319   00261C  5C09               	subwf	___fladd@a^0,w,c
 10320   00261E  6E0D               	movwf	??___fladd^0,c
 10321   002620  5006               	movf	(___fladd@b+1)^0,w,c
 10322   002622  580A               	subwfb	(___fladd@a+1)^0,w,c
 10323   002624  6E0E               	movwf	(??___fladd+1)^0,c
 10324   002626  5007               	movf	(___fladd@b+2)^0,w,c
 10325   002628  580B               	subwfb	(___fladd@a+2)^0,w,c
 10326   00262A  6E0F               	movwf	(??___fladd+2)^0,c
 10327   00262C  5008               	movf	(___fladd@b+3)^0,w,c
 10328   00262E  580C               	subwfb	(___fladd@a+3)^0,w,c
 10329   002630  6E10               	movwf	(??___fladd+3)^0,c
 10330   002632  0EFF               	movlw	255
 10331   002634  240D               	addwf	??___fladd^0,w,c
 10332   002636  6E05               	movwf	___fladd@b^0,c
 10333   002638  0EFF               	movlw	255
 10334   00263A  200E               	addwfc	(??___fladd+1)^0,w,c
 10335   00263C  6E06               	movwf	(___fladd@b+1)^0,c
 10336   00263E  0EFF               	movlw	255
 10337   002640  200F               	addwfc	(??___fladd+2)^0,w,c
 10338   002642  6E07               	movwf	(___fladd@b+2)^0,c
 10339   002644  0EFF               	movlw	255
 10340   002646  2010               	addwfc	(??___fladd+3)^0,w,c
 10341   002648  6E08               	movwf	(___fladd@b+3)^0,c
 10342   00264A  0E80               	movlw	128
 10343   00264C  1A11               	xorwf	___fladd@signs^0,f,c
 10344   00264E  6C14               	negf	___fladd@grs^0,c
 10345   002650  5014               	movf	___fladd@grs^0,w,c
 10346   002652  A4D8               	btfss	status,2,c
 10347   002654  EF2E  F013         	goto	u3211
 10348   002658  EF30  F013         	goto	u3210
 10349   00265C                     u3211:
 10350   00265C  EF40  F013         	goto	l1043
 10351   002660                     u3210:
 10352   002660  0E01               	movlw	1
 10353   002662  2605               	addwf	___fladd@b^0,f,c
 10354   002664  0E00               	movlw	0
 10355   002666  2206               	addwfc	(___fladd@b+1)^0,f,c
 10356   002668  2207               	addwfc	(___fladd@b+2)^0,f,c
 10357   00266A  2208               	addwfc	(___fladd@b+3)^0,f,c
 10358   00266C  EF40  F013         	goto	l1043
 10359   002670                     l3623:
 10360   002670  5009               	movf	___fladd@a^0,w,c
 10361   002672  5E05               	subwf	___fladd@b^0,f,c
 10362   002674  500A               	movf	(___fladd@a+1)^0,w,c
 10363   002676  5A06               	subwfb	(___fladd@b+1)^0,f,c
 10364   002678  500B               	movf	(___fladd@a+2)^0,w,c
 10365   00267A  5A07               	subwfb	(___fladd@b+2)^0,f,c
 10366   00267C  500C               	movf	(___fladd@a+3)^0,w,c
 10367   00267E  5A08               	subwfb	(___fladd@b+3)^0,f,c
 10368   002680                     l1043:
 10369   002680  5005               	movf	___fladd@b^0,w,c
 10370   002682  1006               	iorwf	(___fladd@b+1)^0,w,c
 10371   002684  1007               	iorwf	(___fladd@b+2)^0,w,c
 10372   002686  1008               	iorwf	(___fladd@b+3)^0,w,c
 10373   002688  A4D8               	btfss	status,2,c
 10374   00268A  EF49  F013         	goto	u3221
 10375   00268E  EF4B  F013         	goto	u3220
 10376   002692                     u3221:
 10377   002692  EF80  F013         	goto	l3647
 10378   002696                     u3220:
 10379   002696  5014               	movf	___fladd@grs^0,w,c
 10380   002698  A4D8               	btfss	status,2,c
 10381   00269A  EF51  F013         	goto	u3231
 10382   00269E  EF53  F013         	goto	u3230
 10383   0026A2                     u3231:
 10384   0026A2  EF80  F013         	goto	l3647
 10385   0026A6                     u3230:
 10386   0026A6  0E00               	movlw	0
 10387   0026A8  6E05               	movwf	?___fladd^0,c
 10388   0026AA  0E00               	movlw	0
 10389   0026AC  6E06               	movwf	(?___fladd+1)^0,c
 10390   0026AE  0E00               	movlw	0
 10391   0026B0  6E07               	movwf	(?___fladd+2)^0,c
 10392   0026B2  0E00               	movlw	0
 10393   0026B4  6E08               	movwf	(?___fladd+3)^0,c
 10394   0026B6  EF1B  F014         	goto	l1035
 10395   0026BA                     l3631:
 10396   0026BA  90D8               	bcf	status,0,c
 10397   0026BC  3605               	rlcf	___fladd@b^0,f,c
 10398   0026BE  3606               	rlcf	(___fladd@b+1)^0,f,c
 10399   0026C0  3607               	rlcf	(___fladd@b+2)^0,f,c
 10400   0026C2  3608               	rlcf	(___fladd@b+3)^0,f,c
 10401   0026C4  AE14               	btfss	___fladd@grs^0,7,c
 10402   0026C6  EF67  F013         	goto	u3241
 10403   0026CA  EF69  F013         	goto	u3240
 10404   0026CE                     u3241:
 10405   0026CE  EF6A  F013         	goto	l3637
 10406   0026D2                     u3240:
 10407   0026D2  8005               	bsf	___fladd@b^0,0,c
 10408   0026D4                     l3637:
 10409   0026D4  A014               	btfss	___fladd@grs^0,0,c
 10410   0026D6  EF6F  F013         	goto	u3251
 10411   0026DA  EF71  F013         	goto	u3250
 10412   0026DE                     u3251:
 10413   0026DE  EF75  F013         	goto	l3641
 10414   0026E2                     u3250:
 10415   0026E2  80D8               	bsf	status,0,c
 10416   0026E4  3614               	rlcf	___fladd@grs^0,f,c
 10417   0026E6  EF77  F013         	goto	l3643
 10418   0026EA                     l3641:
 10419   0026EA  90D8               	bcf	status,0,c
 10420   0026EC  3614               	rlcf	___fladd@grs^0,f,c
 10421   0026EE                     l3643:
 10422   0026EE  5013               	movf	___fladd@bexp^0,w,c
 10423   0026F0  B4D8               	btfsc	status,2,c
 10424   0026F2  EF7D  F013         	goto	u3261
 10425   0026F6  EF7F  F013         	goto	u3260
 10426   0026FA                     u3261:
 10427   0026FA  EF80  F013         	goto	l3647
 10428   0026FE                     u3260:
 10429   0026FE  0613               	decf	___fladd@bexp^0,f,c
 10430   002700                     l3647:
 10431   002700  AE07               	btfss	(___fladd@b+2)^0,7,c
 10432   002702  EF85  F013         	goto	u3271
 10433   002706  EF87  F013         	goto	u3270
 10434   00270A                     u3271:
 10435   00270A  EF5D  F013         	goto	l3631
 10436   00270E                     u3270:
 10437   00270E                     l3649:
 10438   00270E  0E00               	movlw	0
 10439   002710  6E12               	movwf	___fladd@aexp^0,c
 10440   002712  AE14               	btfss	___fladd@grs^0,7,c
 10441   002714  EF8E  F013         	goto	u3281
 10442   002718  EF90  F013         	goto	u3280
 10443   00271C                     u3281:
 10444   00271C  EFA8  F013         	goto	l1052
 10445   002720                     u3280:
 10446   002720  C014  F00D         	movff	___fladd@grs,??___fladd
 10447   002724  0E7F               	movlw	127
 10448   002726  160D               	andwf	??___fladd^0,f,c
 10449   002728  B4D8               	btfsc	status,2,c
 10450   00272A  EF99  F013         	goto	u3291
 10451   00272E  EF9B  F013         	goto	u3290
 10452   002732                     u3291:
 10453   002732  EF9F  F013         	goto	l1053
 10454   002736                     u3290:
 10455   002736                     l3655:
 10456   002736  0E01               	movlw	1
 10457   002738  6E12               	movwf	___fladd@aexp^0,c
 10458   00273A  EFA8  F013         	goto	l1052
 10459   00273E                     l1053:
 10460   00273E  A005               	btfss	___fladd@b^0,0,c
 10461   002740  EFA4  F013         	goto	u3301
 10462   002744  EFA6  F013         	goto	u3300
 10463   002748                     u3301:
 10464   002748  EFA8  F013         	goto	l1052
 10465   00274C                     u3300:
 10466   00274C  EF9B  F013         	goto	l3655
 10467   002750                     l1052:
 10468   002750  5012               	movf	___fladd@aexp^0,w,c
 10469   002752  B4D8               	btfsc	status,2,c
 10470   002754  EFAE  F013         	goto	u3311
 10471   002758  EFB0  F013         	goto	u3310
 10472   00275C                     u3311:
 10473   00275C  EFDB  F013         	goto	l3667
 10474   002760                     u3310:
 10475   002760  0E01               	movlw	1
 10476   002762  2605               	addwf	___fladd@b^0,f,c
 10477   002764  0E00               	movlw	0
 10478   002766  2206               	addwfc	(___fladd@b+1)^0,f,c
 10479   002768  2207               	addwfc	(___fladd@b+2)^0,f,c
 10480   00276A  2208               	addwfc	(___fladd@b+3)^0,f,c
 10481   00276C  A008               	btfss	(___fladd@b+3)^0,0,c
 10482   00276E  EFBB  F013         	goto	u3321
 10483   002772  EFBD  F013         	goto	u3320
 10484   002776                     u3321:
 10485   002776  EFDB  F013         	goto	l3667
 10486   00277A                     u3320:
 10487   00277A  C005  F00D         	movff	___fladd@b,??___fladd
 10488   00277E  C006  F00E         	movff	___fladd@b+1,??___fladd+1
 10489   002782  C007  F00F         	movff	___fladd@b+2,??___fladd+2
 10490   002786  C008  F010         	movff	___fladd@b+3,??___fladd+3
 10491   00278A  3410               	rlcf	(??___fladd+3)^0,w,c
 10492   00278C  3210               	rrcf	(??___fladd+3)^0,f,c
 10493   00278E  320F               	rrcf	(??___fladd+2)^0,f,c
 10494   002790  320E               	rrcf	(??___fladd+1)^0,f,c
 10495   002792  320D               	rrcf	??___fladd^0,f,c
 10496   002794  C00D  F005         	movff	??___fladd,___fladd@b
 10497   002798  C00E  F006         	movff	??___fladd+1,___fladd@b+1
 10498   00279C  C00F  F007         	movff	??___fladd+2,___fladd@b+2
 10499   0027A0  C010  F008         	movff	??___fladd+3,___fladd@b+3
 10500   0027A4  2813               	incf	___fladd@bexp^0,w,c
 10501   0027A6  B4D8               	btfsc	status,2,c
 10502   0027A8  EFD8  F013         	goto	u3331
 10503   0027AC  EFDA  F013         	goto	u3330
 10504   0027B0                     u3331:
 10505   0027B0  EFDB  F013         	goto	l3667
 10506   0027B4                     u3330:
 10507   0027B4  2A13               	incf	___fladd@bexp^0,f,c
 10508   0027B6                     l3667:
 10509   0027B6  2813               	incf	___fladd@bexp^0,w,c
 10510   0027B8  B4D8               	btfsc	status,2,c
 10511   0027BA  EFE1  F013         	goto	u3341
 10512   0027BE  EFE3  F013         	goto	u3340
 10513   0027C2                     u3341:
 10514   0027C2  EFEB  F013         	goto	l3671
 10515   0027C6                     u3340:
 10516   0027C6  5013               	movf	___fladd@bexp^0,w,c
 10517   0027C8  A4D8               	btfss	status,2,c
 10518   0027CA  EFE9  F013         	goto	u3351
 10519   0027CE  EFEB  F013         	goto	u3350
 10520   0027D2                     u3351:
 10521   0027D2  EFFD  F013         	goto	l3675
 10522   0027D6                     u3350:
 10523   0027D6                     l3671:
 10524   0027D6  0E00               	movlw	0
 10525   0027D8  6E05               	movwf	___fladd@b^0,c
 10526   0027DA  0E00               	movlw	0
 10527   0027DC  6E06               	movwf	(___fladd@b+1)^0,c
 10528   0027DE  0E00               	movlw	0
 10529   0027E0  6E07               	movwf	(___fladd@b+2)^0,c
 10530   0027E2  0E00               	movlw	0
 10531   0027E4  6E08               	movwf	(___fladd@b+3)^0,c
 10532   0027E6  5013               	movf	___fladd@bexp^0,w,c
 10533   0027E8  A4D8               	btfss	status,2,c
 10534   0027EA  EFF9  F013         	goto	u3361
 10535   0027EE  EFFB  F013         	goto	u3360
 10536   0027F2                     u3361:
 10537   0027F2  EFFD  F013         	goto	l3675
 10538   0027F6                     u3360:
 10539   0027F6  0E00               	movlw	0
 10540   0027F8  6E11               	movwf	___fladd@signs^0,c
 10541   0027FA                     l3675:
 10542   0027FA  A013               	btfss	___fladd@bexp^0,0,c
 10543   0027FC  EF02  F014         	goto	u3371
 10544   002800  EF04  F014         	goto	u3370
 10545   002804                     u3371:
 10546   002804  EF07  F014         	goto	l3679
 10547   002808                     u3370:
 10548   002808  8E07               	bsf	(___fladd@b+2)^0,7,c
 10549   00280A  EF08  F014         	goto	l3681
 10550   00280E                     l3679:
 10551   00280E  9E07               	bcf	(___fladd@b+2)^0,7,c
 10552   002810                     l3681:
 10553   002810  90D8               	bcf	status,0,c
 10554   002812  3013               	rrcf	___fladd@bexp^0,w,c
 10555   002814  6E08               	movwf	(___fladd@b+3)^0,c
 10556   002816  AE11               	btfss	___fladd@signs^0,7,c
 10557   002818  EF10  F014         	goto	u3381
 10558   00281C  EF12  F014         	goto	u3380
 10559   002820                     u3381:
 10560   002820  EF13  F014         	goto	l3687
 10561   002824                     u3380:
 10562   002824  8E08               	bsf	(___fladd@b+3)^0,7,c
 10563   002826                     l3687:
 10564   002826  C005  F005         	movff	___fladd@b,?___fladd
 10565   00282A  C006  F006         	movff	___fladd@b+1,?___fladd+1
 10566   00282E  C007  F007         	movff	___fladd@b+2,?___fladd+2
 10567   002832  C008  F008         	movff	___fladd@b+3,?___fladd+3
 10568   002836                     l1035:
 10569   002836  0012               	return		;funcret
 10570   002838                     __end_of___fladd:
 10571                           	callstack 0
 10572                           
 10573 ;; *************** function ___flmul *****************
 10574 ;; Defined at:
 10575 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\sprcmul.c"
 10576 ;; Parameters:    Size  Location     Type
 10577 ;;  b               4   20[COMRAM] unsigned char 
 10578 ;;  a               4   24[COMRAM] unsigned char 
 10579 ;; Auto vars:     Size  Location     Type
 10580 ;;  prod            4   39[COMRAM] struct .
 10581 ;;  grs             4   33[COMRAM] unsigned long 
 10582 ;;  temp            2   43[COMRAM] struct .
 10583 ;;  bexp            1   38[COMRAM] unsigned char 
 10584 ;;  aexp            1   37[COMRAM] unsigned char 
 10585 ;;  sign            1   32[COMRAM] unsigned char 
 10586 ;; Return value:  Size  Location     Type
 10587 ;;                  4   20[COMRAM] unsigned char 
 10588 ;; Registers used:
 10589 ;;		wreg, status,2, status,0, prodl, prodh
 10590 ;; Tracked objects:
 10591 ;;		On entry : 0/0
 10592 ;;		On exit  : 0/0
 10593 ;;		Unchanged: 0/0
 10594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10595 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10596 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10597 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10598 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10599 ;;Total ram usage:       25 bytes
 10600 ;; Hardware stack levels used: 1
 10601 ;; Hardware stack levels required when called: 2
 10602 ;; This function calls:
 10603 ;;		Nothing
 10604 ;; This function is called by:
 10605 ;;		_colorDetect
 10606 ;;		_turnLeft_90
 10607 ;;		_turnRight_90
 10608 ;;		_turn_180
 10609 ;;		_turnRight_135
 10610 ;;		_turnLeft_135
 10611 ;;		_efgtoa
 10612 ;;		_turnLeft
 10613 ;;		_turnRight
 10614 ;; This function uses a non-reentrant model
 10615 ;;
 10616                           
 10617                           	psect	text45
 10618   002838                     __ptext45:
 10619                           	callstack 0
 10620   002838                     ___flmul:
 10621                           	callstack 24
 10622   002838  5018               	movf	(___flmul@b+3)^0,w,c
 10623   00283A  0B80               	andlw	128
 10624   00283C  6E21               	movwf	___flmul@sign^0,c
 10625   00283E  5018               	movf	(___flmul@b+3)^0,w,c
 10626   002840  2418               	addwf	(___flmul@b+3)^0,w,c
 10627   002842  6E27               	movwf	___flmul@bexp^0,c
 10628   002844  AE17               	btfss	(___flmul@b+2)^0,7,c
 10629   002846  EF27  F014         	goto	u3831
 10630   00284A  EF29  F014         	goto	u3830
 10631   00284E                     u3831:
 10632   00284E  EF2A  F014         	goto	l3965
 10633   002852                     u3830:
 10634   002852  8027               	bsf	___flmul@bexp^0,0,c
 10635   002854                     l3965:
 10636   002854  5027               	movf	___flmul@bexp^0,w,c
 10637   002856  B4D8               	btfsc	status,2,c
 10638   002858  EF30  F014         	goto	u3841
 10639   00285C  EF32  F014         	goto	u3840
 10640   002860                     u3841:
 10641   002860  EF45  F014         	goto	l3973
 10642   002864                     u3840:
 10643   002864  2827               	incf	___flmul@bexp^0,w,c
 10644   002866  A4D8               	btfss	status,2,c
 10645   002868  EF38  F014         	goto	u3851
 10646   00286C  EF3A  F014         	goto	u3850
 10647   002870                     u3851:
 10648   002870  EF42  F014         	goto	l3971
 10649   002874                     u3850:
 10650   002874  0E00               	movlw	0
 10651   002876  6E15               	movwf	___flmul@b^0,c
 10652   002878  0E00               	movlw	0
 10653   00287A  6E16               	movwf	(___flmul@b+1)^0,c
 10654   00287C  0E00               	movlw	0
 10655   00287E  6E17               	movwf	(___flmul@b+2)^0,c
 10656   002880  0E00               	movlw	0
 10657   002882  6E18               	movwf	(___flmul@b+3)^0,c
 10658   002884                     l3971:
 10659   002884  8E17               	bsf	(___flmul@b+2)^0,7,c
 10660   002886  EF4D  F014         	goto	l3975
 10661   00288A                     l3973:
 10662   00288A  0E00               	movlw	0
 10663   00288C  6E15               	movwf	___flmul@b^0,c
 10664   00288E  0E00               	movlw	0
 10665   002890  6E16               	movwf	(___flmul@b+1)^0,c
 10666   002892  0E00               	movlw	0
 10667   002894  6E17               	movwf	(___flmul@b+2)^0,c
 10668   002896  0E00               	movlw	0
 10669   002898  6E18               	movwf	(___flmul@b+3)^0,c
 10670   00289A                     l3975:
 10671   00289A  501C               	movf	(___flmul@a+3)^0,w,c
 10672   00289C  0B80               	andlw	128
 10673   00289E  1A21               	xorwf	___flmul@sign^0,f,c
 10674   0028A0  501C               	movf	(___flmul@a+3)^0,w,c
 10675   0028A2  241C               	addwf	(___flmul@a+3)^0,w,c
 10676   0028A4  6E26               	movwf	___flmul@aexp^0,c
 10677   0028A6  AE1B               	btfss	(___flmul@a+2)^0,7,c
 10678   0028A8  EF58  F014         	goto	u3861
 10679   0028AC  EF5A  F014         	goto	u3860
 10680   0028B0                     u3861:
 10681   0028B0  EF5B  F014         	goto	l3983
 10682   0028B4                     u3860:
 10683   0028B4  8026               	bsf	___flmul@aexp^0,0,c
 10684   0028B6                     l3983:
 10685   0028B6  5026               	movf	___flmul@aexp^0,w,c
 10686   0028B8  B4D8               	btfsc	status,2,c
 10687   0028BA  EF61  F014         	goto	u3871
 10688   0028BE  EF63  F014         	goto	u3870
 10689   0028C2                     u3871:
 10690   0028C2  EF76  F014         	goto	l3991
 10691   0028C6                     u3870:
 10692   0028C6  2826               	incf	___flmul@aexp^0,w,c
 10693   0028C8  A4D8               	btfss	status,2,c
 10694   0028CA  EF69  F014         	goto	u3881
 10695   0028CE  EF6B  F014         	goto	u3880
 10696   0028D2                     u3881:
 10697   0028D2  EF73  F014         	goto	l3989
 10698   0028D6                     u3880:
 10699   0028D6  0E00               	movlw	0
 10700   0028D8  6E19               	movwf	___flmul@a^0,c
 10701   0028DA  0E00               	movlw	0
 10702   0028DC  6E1A               	movwf	(___flmul@a+1)^0,c
 10703   0028DE  0E00               	movlw	0
 10704   0028E0  6E1B               	movwf	(___flmul@a+2)^0,c
 10705   0028E2  0E00               	movlw	0
 10706   0028E4  6E1C               	movwf	(___flmul@a+3)^0,c
 10707   0028E6                     l3989:
 10708   0028E6  8E1B               	bsf	(___flmul@a+2)^0,7,c
 10709   0028E8  EF7E  F014         	goto	l1112
 10710   0028EC                     l3991:
 10711   0028EC  0E00               	movlw	0
 10712   0028EE  6E19               	movwf	___flmul@a^0,c
 10713   0028F0  0E00               	movlw	0
 10714   0028F2  6E1A               	movwf	(___flmul@a+1)^0,c
 10715   0028F4  0E00               	movlw	0
 10716   0028F6  6E1B               	movwf	(___flmul@a+2)^0,c
 10717   0028F8  0E00               	movlw	0
 10718   0028FA  6E1C               	movwf	(___flmul@a+3)^0,c
 10719   0028FC                     l1112:
 10720   0028FC  5026               	movf	___flmul@aexp^0,w,c
 10721   0028FE  B4D8               	btfsc	status,2,c
 10722   002900  EF84  F014         	goto	u3891
 10723   002904  EF86  F014         	goto	u3890
 10724   002908                     u3891:
 10725   002908  EF8E  F014         	goto	l3995
 10726   00290C                     u3890:
 10727   00290C  5027               	movf	___flmul@bexp^0,w,c
 10728   00290E  A4D8               	btfss	status,2,c
 10729   002910  EF8C  F014         	goto	u3901
 10730   002914  EF8E  F014         	goto	u3900
 10731   002918                     u3901:
 10732   002918  EF98  F014         	goto	l3999
 10733   00291C                     u3900:
 10734   00291C                     l3995:
 10735   00291C  0E00               	movlw	0
 10736   00291E  6E15               	movwf	?___flmul^0,c
 10737   002920  0E00               	movlw	0
 10738   002922  6E16               	movwf	(?___flmul+1)^0,c
 10739   002924  0E00               	movlw	0
 10740   002926  6E17               	movwf	(?___flmul+2)^0,c
 10741   002928  0E00               	movlw	0
 10742   00292A  6E18               	movwf	(?___flmul+3)^0,c
 10743   00292C  EF30  F016         	goto	l1116
 10744   002930                     l3999:
 10745   002930  501B               	movf	(___flmul@a+2)^0,w,c
 10746   002932  0215               	mulwf	___flmul@b^0,c
 10747   002934  CFF3 F02C          	movff	prodl,___flmul@temp
 10748   002938  CFF4 F02D          	movff	prodh,___flmul@temp+1
 10749   00293C  502C               	movf	___flmul@temp^0,w,c
 10750   00293E  6E22               	movwf	___flmul@grs^0,c
 10751   002940  6A23               	clrf	(___flmul@grs+1)^0,c
 10752   002942  6A24               	clrf	(___flmul@grs+2)^0,c
 10753   002944  6A25               	clrf	(___flmul@grs+3)^0,c
 10754   002946  502D               	movf	(___flmul@temp+1)^0,w,c
 10755   002948  6E28               	movwf	___flmul@prod^0,c
 10756   00294A  6A29               	clrf	(___flmul@prod+1)^0,c
 10757   00294C  6A2A               	clrf	(___flmul@prod+2)^0,c
 10758   00294E  6A2B               	clrf	(___flmul@prod+3)^0,c
 10759   002950  501A               	movf	(___flmul@a+1)^0,w,c
 10760   002952  0216               	mulwf	(___flmul@b+1)^0,c
 10761   002954  CFF3 F02C          	movff	prodl,___flmul@temp
 10762   002958  CFF4 F02D          	movff	prodh,___flmul@temp+1
 10763   00295C  502C               	movf	___flmul@temp^0,w,c
 10764   00295E  2622               	addwf	___flmul@grs^0,f,c
 10765   002960  0E00               	movlw	0
 10766   002962  2223               	addwfc	(___flmul@grs+1)^0,f,c
 10767   002964  2224               	addwfc	(___flmul@grs+2)^0,f,c
 10768   002966  2225               	addwfc	(___flmul@grs+3)^0,f,c
 10769   002968  502D               	movf	(___flmul@temp+1)^0,w,c
 10770   00296A  2628               	addwf	___flmul@prod^0,f,c
 10771   00296C  0E00               	movlw	0
 10772   00296E  2229               	addwfc	(___flmul@prod+1)^0,f,c
 10773   002970  222A               	addwfc	(___flmul@prod+2)^0,f,c
 10774   002972  222B               	addwfc	(___flmul@prod+3)^0,f,c
 10775   002974  5019               	movf	___flmul@a^0,w,c
 10776   002976  0217               	mulwf	(___flmul@b+2)^0,c
 10777   002978  CFF3 F02C          	movff	prodl,___flmul@temp
 10778   00297C  CFF4 F02D          	movff	prodh,___flmul@temp+1
 10779   002980  502C               	movf	___flmul@temp^0,w,c
 10780   002982  2622               	addwf	___flmul@grs^0,f,c
 10781   002984  0E00               	movlw	0
 10782   002986  2223               	addwfc	(___flmul@grs+1)^0,f,c
 10783   002988  2224               	addwfc	(___flmul@grs+2)^0,f,c
 10784   00298A  2225               	addwfc	(___flmul@grs+3)^0,f,c
 10785   00298C  502D               	movf	(___flmul@temp+1)^0,w,c
 10786   00298E  2628               	addwf	___flmul@prod^0,f,c
 10787   002990  0E00               	movlw	0
 10788   002992  2229               	addwfc	(___flmul@prod+1)^0,f,c
 10789   002994  222A               	addwfc	(___flmul@prod+2)^0,f,c
 10790   002996  222B               	addwfc	(___flmul@prod+3)^0,f,c
 10791   002998  C024  F025         	movff	___flmul@grs+2,___flmul@grs+3
 10792   00299C  C023  F024         	movff	___flmul@grs+1,___flmul@grs+2
 10793   0029A0  C022  F023         	movff	___flmul@grs,___flmul@grs+1
 10794   0029A4  6A22               	clrf	___flmul@grs^0,c
 10795   0029A6  5019               	movf	___flmul@a^0,w,c
 10796   0029A8  0216               	mulwf	(___flmul@b+1)^0,c
 10797   0029AA  CFF3 F02C          	movff	prodl,___flmul@temp
 10798   0029AE  CFF4 F02D          	movff	prodh,___flmul@temp+1
 10799   0029B2  502C               	movf	___flmul@temp^0,w,c
 10800   0029B4  2622               	addwf	___flmul@grs^0,f,c
 10801   0029B6  502D               	movf	(___flmul@temp+1)^0,w,c
 10802   0029B8  2223               	addwfc	(___flmul@grs+1)^0,f,c
 10803   0029BA  0E00               	movlw	0
 10804   0029BC  2224               	addwfc	(___flmul@grs+2)^0,f,c
 10805   0029BE  0E00               	movlw	0
 10806   0029C0  2225               	addwfc	(___flmul@grs+3)^0,f,c
 10807   0029C2  501A               	movf	(___flmul@a+1)^0,w,c
 10808   0029C4  0215               	mulwf	___flmul@b^0,c
 10809   0029C6  CFF3 F02C          	movff	prodl,___flmul@temp
 10810   0029CA  CFF4 F02D          	movff	prodh,___flmul@temp+1
 10811   0029CE  502C               	movf	___flmul@temp^0,w,c
 10812   0029D0  2622               	addwf	___flmul@grs^0,f,c
 10813   0029D2  502D               	movf	(___flmul@temp+1)^0,w,c
 10814   0029D4  2223               	addwfc	(___flmul@grs+1)^0,f,c
 10815   0029D6  0E00               	movlw	0
 10816   0029D8  2224               	addwfc	(___flmul@grs+2)^0,f,c
 10817   0029DA  0E00               	movlw	0
 10818   0029DC  2225               	addwfc	(___flmul@grs+3)^0,f,c
 10819   0029DE  C024  F025         	movff	___flmul@grs+2,___flmul@grs+3
 10820   0029E2  C023  F024         	movff	___flmul@grs+1,___flmul@grs+2
 10821   0029E6  C022  F023         	movff	___flmul@grs,___flmul@grs+1
 10822   0029EA  6A22               	clrf	___flmul@grs^0,c
 10823   0029EC  5019               	movf	___flmul@a^0,w,c
 10824   0029EE  0215               	mulwf	___flmul@b^0,c
 10825   0029F0  CFF3 F02C          	movff	prodl,___flmul@temp
 10826   0029F4  CFF4 F02D          	movff	prodh,___flmul@temp+1
 10827   0029F8  502C               	movf	___flmul@temp^0,w,c
 10828   0029FA  2622               	addwf	___flmul@grs^0,f,c
 10829   0029FC  502D               	movf	(___flmul@temp+1)^0,w,c
 10830   0029FE  2223               	addwfc	(___flmul@grs+1)^0,f,c
 10831   002A00  0E00               	movlw	0
 10832   002A02  2224               	addwfc	(___flmul@grs+2)^0,f,c
 10833   002A04  0E00               	movlw	0
 10834   002A06  2225               	addwfc	(___flmul@grs+3)^0,f,c
 10835   002A08  501B               	movf	(___flmul@a+2)^0,w,c
 10836   002A0A  0216               	mulwf	(___flmul@b+1)^0,c
 10837   002A0C  CFF3 F02C          	movff	prodl,___flmul@temp
 10838   002A10  CFF4 F02D          	movff	prodh,___flmul@temp+1
 10839   002A14  502C               	movf	___flmul@temp^0,w,c
 10840   002A16  2628               	addwf	___flmul@prod^0,f,c
 10841   002A18  502D               	movf	(___flmul@temp+1)^0,w,c
 10842   002A1A  2229               	addwfc	(___flmul@prod+1)^0,f,c
 10843   002A1C  0E00               	movlw	0
 10844   002A1E  222A               	addwfc	(___flmul@prod+2)^0,f,c
 10845   002A20  0E00               	movlw	0
 10846   002A22  222B               	addwfc	(___flmul@prod+3)^0,f,c
 10847   002A24  501A               	movf	(___flmul@a+1)^0,w,c
 10848   002A26  0217               	mulwf	(___flmul@b+2)^0,c
 10849   002A28  CFF3 F02C          	movff	prodl,___flmul@temp
 10850   002A2C  CFF4 F02D          	movff	prodh,___flmul@temp+1
 10851   002A30  502C               	movf	___flmul@temp^0,w,c
 10852   002A32  2628               	addwf	___flmul@prod^0,f,c
 10853   002A34  502D               	movf	(___flmul@temp+1)^0,w,c
 10854   002A36  2229               	addwfc	(___flmul@prod+1)^0,f,c
 10855   002A38  0E00               	movlw	0
 10856   002A3A  222A               	addwfc	(___flmul@prod+2)^0,f,c
 10857   002A3C  0E00               	movlw	0
 10858   002A3E  222B               	addwfc	(___flmul@prod+3)^0,f,c
 10859   002A40  501B               	movf	(___flmul@a+2)^0,w,c
 10860   002A42  0217               	mulwf	(___flmul@b+2)^0,c
 10861   002A44  CFF3 F02C          	movff	prodl,___flmul@temp
 10862   002A48  CFF4 F02D          	movff	prodh,___flmul@temp+1
 10863   002A4C  502C               	movf	___flmul@temp^0,w,c
 10864   002A4E  6E1D               	movwf	??___flmul^0,c
 10865   002A50  502D               	movf	(___flmul@temp+1)^0,w,c
 10866   002A52  6E1E               	movwf	(??___flmul+1)^0,c
 10867   002A54  6A1F               	clrf	(??___flmul+2)^0,c
 10868   002A56  6A20               	clrf	(??___flmul+3)^0,c
 10869   002A58  C01F  F020         	movff	??___flmul+2,??___flmul+3
 10870   002A5C  C01E  F01F         	movff	??___flmul+1,??___flmul+2
 10871   002A60  C01D  F01E         	movff	??___flmul,??___flmul+1
 10872   002A64  6A1D               	clrf	??___flmul^0,c
 10873   002A66  501D               	movf	??___flmul^0,w,c
 10874   002A68  2628               	addwf	___flmul@prod^0,f,c
 10875   002A6A  501E               	movf	(??___flmul+1)^0,w,c
 10876   002A6C  2229               	addwfc	(___flmul@prod+1)^0,f,c
 10877   002A6E  501F               	movf	(??___flmul+2)^0,w,c
 10878   002A70  222A               	addwfc	(___flmul@prod+2)^0,f,c
 10879   002A72  5020               	movf	(??___flmul+3)^0,w,c
 10880   002A74  222B               	addwfc	(___flmul@prod+3)^0,f,c
 10881   002A76  C022  F01D         	movff	___flmul@grs,??___flmul
 10882   002A7A  C023  F01E         	movff	___flmul@grs+1,??___flmul+1
 10883   002A7E  C024  F01F         	movff	___flmul@grs+2,??___flmul+2
 10884   002A82  C025  F020         	movff	___flmul@grs+3,??___flmul+3
 10885   002A86  0E19               	movlw	25
 10886   002A88  EF4B  F015         	goto	u3910
 10887   002A8C                     u3915:
 10888   002A8C  90D8               	bcf	status,0,c
 10889   002A8E  3220               	rrcf	(??___flmul+3)^0,f,c
 10890   002A90  321F               	rrcf	(??___flmul+2)^0,f,c
 10891   002A92  321E               	rrcf	(??___flmul+1)^0,f,c
 10892   002A94  321D               	rrcf	??___flmul^0,f,c
 10893   002A96                     u3910:
 10894   002A96  2EE8               	decfsz	wreg,f,c
 10895   002A98  EF46  F015         	goto	u3915
 10896   002A9C  501D               	movf	??___flmul^0,w,c
 10897   002A9E  2628               	addwf	___flmul@prod^0,f,c
 10898   002AA0  501E               	movf	(??___flmul+1)^0,w,c
 10899   002AA2  2229               	addwfc	(___flmul@prod+1)^0,f,c
 10900   002AA4  501F               	movf	(??___flmul+2)^0,w,c
 10901   002AA6  222A               	addwfc	(___flmul@prod+2)^0,f,c
 10902   002AA8  5020               	movf	(??___flmul+3)^0,w,c
 10903   002AAA  222B               	addwfc	(___flmul@prod+3)^0,f,c
 10904   002AAC  C024  F025         	movff	___flmul@grs+2,___flmul@grs+3
 10905   002AB0  C023  F024         	movff	___flmul@grs+1,___flmul@grs+2
 10906   002AB4  C022  F023         	movff	___flmul@grs,___flmul@grs+1
 10907   002AB8  6A22               	clrf	___flmul@grs^0,c
 10908   002ABA  5026               	movf	___flmul@aexp^0,w,c
 10909   002ABC  C027  F01D         	movff	___flmul@bexp,??___flmul
 10910   002AC0  6A1E               	clrf	(??___flmul+1)^0,c
 10911   002AC2  261D               	addwf	??___flmul^0,f,c
 10912   002AC4  0E00               	movlw	0
 10913   002AC6  221E               	addwfc	(??___flmul+1)^0,f,c
 10914   002AC8  0E82               	movlw	130
 10915   002ACA  241D               	addwf	??___flmul^0,w,c
 10916   002ACC  6E2C               	movwf	___flmul@temp^0,c
 10917   002ACE  0EFF               	movlw	255
 10918   002AD0  201E               	addwfc	(??___flmul+1)^0,w,c
 10919   002AD2  6E2D               	movwf	(___flmul@temp+1)^0,c
 10920   002AD4  EF81  F015         	goto	l4047
 10921   002AD8                     l4041:
 10922   002AD8  90D8               	bcf	status,0,c
 10923   002ADA  3628               	rlcf	___flmul@prod^0,f,c
 10924   002ADC  3629               	rlcf	(___flmul@prod+1)^0,f,c
 10925   002ADE  362A               	rlcf	(___flmul@prod+2)^0,f,c
 10926   002AE0  362B               	rlcf	(___flmul@prod+3)^0,f,c
 10927   002AE2  AE25               	btfss	(___flmul@grs+3)^0,7,c
 10928   002AE4  EF76  F015         	goto	u3921
 10929   002AE8  EF78  F015         	goto	u3920
 10930   002AEC                     u3921:
 10931   002AEC  EF79  F015         	goto	l1119
 10932   002AF0                     u3920:
 10933   002AF0  8028               	bsf	___flmul@prod^0,0,c
 10934   002AF2                     l1119:
 10935   002AF2  90D8               	bcf	status,0,c
 10936   002AF4  3622               	rlcf	___flmul@grs^0,f,c
 10937   002AF6  3623               	rlcf	(___flmul@grs+1)^0,f,c
 10938   002AF8  3624               	rlcf	(___flmul@grs+2)^0,f,c
 10939   002AFA  3625               	rlcf	(___flmul@grs+3)^0,f,c
 10940   002AFC  062C               	decf	___flmul@temp^0,f,c
 10941   002AFE  A0D8               	btfss	status,0,c
 10942   002B00  062D               	decf	(___flmul@temp+1)^0,f,c
 10943   002B02                     l4047:
 10944   002B02  AE2A               	btfss	(___flmul@prod+2)^0,7,c
 10945   002B04  EF86  F015         	goto	u3931
 10946   002B08  EF88  F015         	goto	u3930
 10947   002B0C                     u3931:
 10948   002B0C  EF6C  F015         	goto	l4041
 10949   002B10                     u3930:
 10950   002B10  0E00               	movlw	0
 10951   002B12  6E26               	movwf	___flmul@aexp^0,c
 10952   002B14  AE25               	btfss	(___flmul@grs+3)^0,7,c
 10953   002B16  EF8F  F015         	goto	u3941
 10954   002B1A  EF91  F015         	goto	u3940
 10955   002B1E                     u3941:
 10956   002B1E  EFB5  F015         	goto	l1121
 10957   002B22                     u3940:
 10958   002B22  0EFF               	movlw	255
 10959   002B24  1422               	andwf	___flmul@grs^0,w,c
 10960   002B26  6E1D               	movwf	??___flmul^0,c
 10961   002B28  0EFF               	movlw	255
 10962   002B2A  1423               	andwf	(___flmul@grs+1)^0,w,c
 10963   002B2C  6E1E               	movwf	(??___flmul+1)^0,c
 10964   002B2E  0EFF               	movlw	255
 10965   002B30  1424               	andwf	(___flmul@grs+2)^0,w,c
 10966   002B32  6E1F               	movwf	(??___flmul+2)^0,c
 10967   002B34  0E7F               	movlw	127
 10968   002B36  1425               	andwf	(___flmul@grs+3)^0,w,c
 10969   002B38  6E20               	movwf	(??___flmul+3)^0,c
 10970   002B3A  501D               	movf	??___flmul^0,w,c
 10971   002B3C  101E               	iorwf	(??___flmul+1)^0,w,c
 10972   002B3E  101F               	iorwf	(??___flmul+2)^0,w,c
 10973   002B40  1020               	iorwf	(??___flmul+3)^0,w,c
 10974   002B42  B4D8               	btfsc	status,2,c
 10975   002B44  EFA6  F015         	goto	u3951
 10976   002B48  EFA8  F015         	goto	u3950
 10977   002B4C                     u3951:
 10978   002B4C  EFAC  F015         	goto	l1122
 10979   002B50                     u3950:
 10980   002B50                     l4055:
 10981   002B50  0E01               	movlw	1
 10982   002B52  6E26               	movwf	___flmul@aexp^0,c
 10983   002B54  EFB5  F015         	goto	l1121
 10984   002B58                     l1122:
 10985   002B58  A028               	btfss	___flmul@prod^0,0,c
 10986   002B5A  EFB1  F015         	goto	u3961
 10987   002B5E  EFB3  F015         	goto	u3960
 10988   002B62                     u3961:
 10989   002B62  EFB5  F015         	goto	l1121
 10990   002B66                     u3960:
 10991   002B66  EFA8  F015         	goto	l4055
 10992   002B6A                     l1121:
 10993   002B6A  5026               	movf	___flmul@aexp^0,w,c
 10994   002B6C  B4D8               	btfsc	status,2,c
 10995   002B6E  EFBB  F015         	goto	u3971
 10996   002B72  EFBD  F015         	goto	u3970
 10997   002B76                     u3971:
 10998   002B76  EFE1  F015         	goto	l4067
 10999   002B7A                     u3970:
 11000   002B7A  0E01               	movlw	1
 11001   002B7C  2628               	addwf	___flmul@prod^0,f,c
 11002   002B7E  0E00               	movlw	0
 11003   002B80  2229               	addwfc	(___flmul@prod+1)^0,f,c
 11004   002B82  222A               	addwfc	(___flmul@prod+2)^0,f,c
 11005   002B84  222B               	addwfc	(___flmul@prod+3)^0,f,c
 11006   002B86  A02B               	btfss	(___flmul@prod+3)^0,0,c
 11007   002B88  EFC8  F015         	goto	u3981
 11008   002B8C  EFCA  F015         	goto	u3980
 11009   002B90                     u3981:
 11010   002B90  EFE1  F015         	goto	l4067
 11011   002B94                     u3980:
 11012   002B94  C028  F01D         	movff	___flmul@prod,??___flmul
 11013   002B98  C029  F01E         	movff	___flmul@prod+1,??___flmul+1
 11014   002B9C  C02A  F01F         	movff	___flmul@prod+2,??___flmul+2
 11015   002BA0  C02B  F020         	movff	___flmul@prod+3,??___flmul+3
 11016   002BA4  3420               	rlcf	(??___flmul+3)^0,w,c
 11017   002BA6  3220               	rrcf	(??___flmul+3)^0,f,c
 11018   002BA8  321F               	rrcf	(??___flmul+2)^0,f,c
 11019   002BAA  321E               	rrcf	(??___flmul+1)^0,f,c
 11020   002BAC  321D               	rrcf	??___flmul^0,f,c
 11021   002BAE  C01D  F028         	movff	??___flmul,___flmul@prod
 11022   002BB2  C01E  F029         	movff	??___flmul+1,___flmul@prod+1
 11023   002BB6  C01F  F02A         	movff	??___flmul+2,___flmul@prod+2
 11024   002BBA  C020  F02B         	movff	??___flmul+3,___flmul@prod+3
 11025   002BBE  4A2C               	infsnz	___flmul@temp^0,f,c
 11026   002BC0  2A2D               	incf	(___flmul@temp+1)^0,f,c
 11027   002BC2                     l4067:
 11028   002BC2  BE2D               	btfsc	(___flmul@temp+1)^0,7,c
 11029   002BC4  EFEC  F015         	goto	u3991
 11030   002BC8  502D               	movf	(___flmul@temp+1)^0,w,c
 11031   002BCA  E108               	bnz	u3990
 11032   002BCC  282C               	incf	___flmul@temp^0,w,c
 11033   002BCE  A0D8               	btfss	status,0,c
 11034   002BD0  EFEC  F015         	goto	u3991
 11035   002BD4  EFEE  F015         	goto	u3990
 11036   002BD8                     u3991:
 11037   002BD8  EFF8  F015         	goto	l4071
 11038   002BDC                     u3990:
 11039   002BDC  0E00               	movlw	0
 11040   002BDE  6E28               	movwf	___flmul@prod^0,c
 11041   002BE0  0E00               	movlw	0
 11042   002BE2  6E29               	movwf	(___flmul@prod+1)^0,c
 11043   002BE4  0E80               	movlw	128
 11044   002BE6  6E2A               	movwf	(___flmul@prod+2)^0,c
 11045   002BE8  0E7F               	movlw	127
 11046   002BEA  6E2B               	movwf	(___flmul@prod+3)^0,c
 11047   002BEC  EF26  F016         	goto	l4083
 11048   002BF0                     l4071:
 11049   002BF0  BE2D               	btfsc	(___flmul@temp+1)^0,7,c
 11050   002BF2  EF05  F016         	goto	u4000
 11051   002BF6  502D               	movf	(___flmul@temp+1)^0,w,c
 11052   002BF8  E106               	bnz	u4001
 11053   002BFA  042C               	decf	___flmul@temp^0,w,c
 11054   002BFC  B0D8               	btfsc	status,0,c
 11055   002BFE  EF03  F016         	goto	u4001
 11056   002C02  EF05  F016         	goto	u4000
 11057   002C06                     u4001:
 11058   002C06  EF11  F016         	goto	l1129
 11059   002C0A                     u4000:
 11060   002C0A  0E00               	movlw	0
 11061   002C0C  6E28               	movwf	___flmul@prod^0,c
 11062   002C0E  0E00               	movlw	0
 11063   002C10  6E29               	movwf	(___flmul@prod+1)^0,c
 11064   002C12  0E00               	movlw	0
 11065   002C14  6E2A               	movwf	(___flmul@prod+2)^0,c
 11066   002C16  0E00               	movlw	0
 11067   002C18  6E2B               	movwf	(___flmul@prod+3)^0,c
 11068   002C1A  0E00               	movlw	0
 11069   002C1C  6E21               	movwf	___flmul@sign^0,c
 11070   002C1E  EF26  F016         	goto	l4083
 11071   002C22                     l1129:
 11072   002C22  C02C  F027         	movff	___flmul@temp,___flmul@bexp
 11073   002C26  0EFF               	movlw	255
 11074   002C28  1628               	andwf	___flmul@prod^0,f,c
 11075   002C2A  0EFF               	movlw	255
 11076   002C2C  1629               	andwf	(___flmul@prod+1)^0,f,c
 11077   002C2E  0E7F               	movlw	127
 11078   002C30  162A               	andwf	(___flmul@prod+2)^0,f,c
 11079   002C32  0E00               	movlw	0
 11080   002C34  162B               	andwf	(___flmul@prod+3)^0,f,c
 11081   002C36  A027               	btfss	___flmul@bexp^0,0,c
 11082   002C38  EF20  F016         	goto	u4011
 11083   002C3C  EF22  F016         	goto	u4010
 11084   002C40                     u4011:
 11085   002C40  EF23  F016         	goto	l4081
 11086   002C44                     u4010:
 11087   002C44  8E2A               	bsf	(___flmul@prod+2)^0,7,c
 11088   002C46                     l4081:
 11089   002C46  90D8               	bcf	status,0,c
 11090   002C48  3027               	rrcf	___flmul@bexp^0,w,c
 11091   002C4A  6E2B               	movwf	(___flmul@prod+3)^0,c
 11092   002C4C                     l4083:
 11093   002C4C  5021               	movf	___flmul@sign^0,w,c
 11094   002C4E  122B               	iorwf	(___flmul@prod+3)^0,f,c
 11095   002C50  C028  F015         	movff	___flmul@prod,?___flmul
 11096   002C54  C029  F016         	movff	___flmul@prod+1,?___flmul+1
 11097   002C58  C02A  F017         	movff	___flmul@prod+2,?___flmul+2
 11098   002C5C  C02B  F018         	movff	___flmul@prod+3,?___flmul+3
 11099   002C60                     l1116:
 11100   002C60  0012               	return		;funcret
 11101   002C62                     __end_of___flmul:
 11102                           	callstack 0
 11103                           
 11104 ;; *************** function ___flge *****************
 11105 ;; Defined at:
 11106 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\flge.c"
 11107 ;; Parameters:    Size  Location     Type
 11108 ;;  ff1             4   53[COMRAM] unsigned char 
 11109 ;;  ff2             4   57[COMRAM] unsigned char 
 11110 ;; Auto vars:     Size  Location     Type
 11111 ;;		None
 11112 ;; Return value:  Size  Location     Type
 11113 ;;		None               void
 11114 ;; Registers used:
 11115 ;;		wreg, status,2, status,0
 11116 ;; Tracked objects:
 11117 ;;		On entry : 0/0
 11118 ;;		On exit  : 0/0
 11119 ;;		Unchanged: 0/0
 11120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11121 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11122 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11123 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11124 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11125 ;;Total ram usage:       12 bytes
 11126 ;; Hardware stack levels used: 1
 11127 ;; Hardware stack levels required when called: 2
 11128 ;; This function calls:
 11129 ;;		Nothing
 11130 ;; This function is called by:
 11131 ;;		_colorDetect
 11132 ;;		_main
 11133 ;;		_efgtoa
 11134 ;; This function uses a non-reentrant model
 11135 ;;
 11136                           
 11137                           	psect	text46
 11138   004722                     __ptext46:
 11139                           	callstack 0
 11140   004722                     ___flge:
 11141                           	callstack 24
 11142   004722  0E00               	movlw	0
 11143   004724  1436               	andwf	___flge@ff1^0,w,c
 11144   004726  6E3E               	movwf	??___flge^0,c
 11145   004728  0E00               	movlw	0
 11146   00472A  1437               	andwf	(___flge@ff1+1)^0,w,c
 11147   00472C  6E3F               	movwf	(??___flge+1)^0,c
 11148   00472E  0E80               	movlw	128
 11149   004730  1438               	andwf	(___flge@ff1+2)^0,w,c
 11150   004732  6E40               	movwf	(??___flge+2)^0,c
 11151   004734  0E7F               	movlw	127
 11152   004736  1439               	andwf	(___flge@ff1+3)^0,w,c
 11153   004738  6E41               	movwf	(??___flge+3)^0,c
 11154   00473A  503E               	movf	??___flge^0,w,c
 11155   00473C  103F               	iorwf	(??___flge+1)^0,w,c
 11156   00473E  1040               	iorwf	(??___flge+2)^0,w,c
 11157   004740  1041               	iorwf	(??___flge+3)^0,w,c
 11158   004742  A4D8               	btfss	status,2,c
 11159   004744  EFA6  F023         	goto	u4051
 11160   004748  EFA8  F023         	goto	u4050
 11161   00474C                     u4051:
 11162   00474C  EFB0  F023         	goto	l4115
 11163   004750                     u4050:
 11164   004750  0E00               	movlw	0
 11165   004752  6E36               	movwf	___flge@ff1^0,c
 11166   004754  0E00               	movlw	0
 11167   004756  6E37               	movwf	(___flge@ff1+1)^0,c
 11168   004758  0E00               	movlw	0
 11169   00475A  6E38               	movwf	(___flge@ff1+2)^0,c
 11170   00475C  0E00               	movlw	0
 11171   00475E  6E39               	movwf	(___flge@ff1+3)^0,c
 11172   004760                     l4115:
 11173   004760  0E00               	movlw	0
 11174   004762  143A               	andwf	___flge@ff2^0,w,c
 11175   004764  6E3E               	movwf	??___flge^0,c
 11176   004766  0E00               	movlw	0
 11177   004768  143B               	andwf	(___flge@ff2+1)^0,w,c
 11178   00476A  6E3F               	movwf	(??___flge+1)^0,c
 11179   00476C  0E80               	movlw	128
 11180   00476E  143C               	andwf	(___flge@ff2+2)^0,w,c
 11181   004770  6E40               	movwf	(??___flge+2)^0,c
 11182   004772  0E7F               	movlw	127
 11183   004774  143D               	andwf	(___flge@ff2+3)^0,w,c
 11184   004776  6E41               	movwf	(??___flge+3)^0,c
 11185   004778  503E               	movf	??___flge^0,w,c
 11186   00477A  103F               	iorwf	(??___flge+1)^0,w,c
 11187   00477C  1040               	iorwf	(??___flge+2)^0,w,c
 11188   00477E  1041               	iorwf	(??___flge+3)^0,w,c
 11189   004780  A4D8               	btfss	status,2,c
 11190   004782  EFC5  F023         	goto	u4061
 11191   004786  EFC7  F023         	goto	u4060
 11192   00478A                     u4061:
 11193   00478A  EFCF  F023         	goto	l4119
 11194   00478E                     u4060:
 11195   00478E  0E00               	movlw	0
 11196   004790  6E3A               	movwf	___flge@ff2^0,c
 11197   004792  0E00               	movlw	0
 11198   004794  6E3B               	movwf	(___flge@ff2+1)^0,c
 11199   004796  0E00               	movlw	0
 11200   004798  6E3C               	movwf	(___flge@ff2+2)^0,c
 11201   00479A  0E00               	movlw	0
 11202   00479C  6E3D               	movwf	(___flge@ff2+3)^0,c
 11203   00479E                     l4119:
 11204   00479E  AE39               	btfss	(___flge@ff1+3)^0,7,c
 11205   0047A0  EFD4  F023         	goto	u4071
 11206   0047A4  EFD6  F023         	goto	u4070
 11207   0047A8                     u4071:
 11208   0047A8  EFDF  F023         	goto	l4123
 11209   0047AC                     u4070:
 11210   0047AC  6C36               	negf	___flge@ff1^0,c
 11211   0047AE  1E37               	comf	(___flge@ff1+1)^0,f,c
 11212   0047B0  B0D8               	btfsc	status,0,c
 11213   0047B2  2A37               	incf	(___flge@ff1+1)^0,f,c
 11214   0047B4  1E38               	comf	(___flge@ff1+2)^0,f,c
 11215   0047B6  B0D8               	btfsc	status,0,c
 11216   0047B8  2A38               	incf	(___flge@ff1+2)^0,f,c
 11217   0047BA  0E80               	movlw	128
 11218   0047BC  5639               	subfwb	(___flge@ff1+3)^0,f,c
 11219   0047BE                     l4123:
 11220   0047BE  AE3D               	btfss	(___flge@ff2+3)^0,7,c
 11221   0047C0  EFE4  F023         	goto	u4081
 11222   0047C4  EFE6  F023         	goto	u4080
 11223   0047C8                     u4081:
 11224   0047C8  EFEF  F023         	goto	l763
 11225   0047CC                     u4080:
 11226   0047CC  6C3A               	negf	___flge@ff2^0,c
 11227   0047CE  1E3B               	comf	(___flge@ff2+1)^0,f,c
 11228   0047D0  B0D8               	btfsc	status,0,c
 11229   0047D2  2A3B               	incf	(___flge@ff2+1)^0,f,c
 11230   0047D4  1E3C               	comf	(___flge@ff2+2)^0,f,c
 11231   0047D6  B0D8               	btfsc	status,0,c
 11232   0047D8  2A3C               	incf	(___flge@ff2+2)^0,f,c
 11233   0047DA  0E80               	movlw	128
 11234   0047DC  563D               	subfwb	(___flge@ff2+3)^0,f,c
 11235   0047DE                     l763:
 11236   0047DE  0E00               	movlw	0
 11237   0047E0  1A36               	xorwf	___flge@ff1^0,f,c
 11238   0047E2  0E00               	movlw	0
 11239   0047E4  1A37               	xorwf	(___flge@ff1+1)^0,f,c
 11240   0047E6  0E00               	movlw	0
 11241   0047E8  1A38               	xorwf	(___flge@ff1+2)^0,f,c
 11242   0047EA  0E80               	movlw	128
 11243   0047EC  1A39               	xorwf	(___flge@ff1+3)^0,f,c
 11244   0047EE  0E00               	movlw	0
 11245   0047F0  1A3A               	xorwf	___flge@ff2^0,f,c
 11246   0047F2  0E00               	movlw	0
 11247   0047F4  1A3B               	xorwf	(___flge@ff2+1)^0,f,c
 11248   0047F6  0E00               	movlw	0
 11249   0047F8  1A3C               	xorwf	(___flge@ff2+2)^0,f,c
 11250   0047FA  0E80               	movlw	128
 11251   0047FC  1A3D               	xorwf	(___flge@ff2+3)^0,f,c
 11252   0047FE  503A               	movf	___flge@ff2^0,w,c
 11253   004800  5C36               	subwf	___flge@ff1^0,w,c
 11254   004802  503B               	movf	(___flge@ff2+1)^0,w,c
 11255   004804  5837               	subwfb	(___flge@ff1+1)^0,w,c
 11256   004806  503C               	movf	(___flge@ff2+2)^0,w,c
 11257   004808  5838               	subwfb	(___flge@ff1+2)^0,w,c
 11258   00480A  503D               	movf	(___flge@ff2+3)^0,w,c
 11259   00480C  5839               	subwfb	(___flge@ff1+3)^0,w,c
 11260   00480E  B0D8               	btfsc	status,0,c
 11261   004810  EF0C  F024         	goto	u4091
 11262   004814  EF0E  F024         	goto	u4090
 11263   004818                     u4091:
 11264   004818  EF11  F024         	goto	l4129
 11265   00481C                     u4090:
 11266   00481C  90D8               	bcf	status,0,c
 11267   00481E  EF12  F024         	goto	l768
 11268   004822                     l4129:
 11269   004822  80D8               	bsf	status,0,c
 11270   004824                     l768:
 11271   004824  0012               	return		;funcret
 11272   004826                     __end_of___flge:
 11273                           	callstack 0
 11274                           
 11275 ;; *************** function ___fldiv *****************
 11276 ;; Defined at:
 11277 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\sprcdiv.c"
 11278 ;; Parameters:    Size  Location     Type
 11279 ;;  b               4   53[COMRAM] unsigned char 
 11280 ;;  a               4   57[COMRAM] unsigned char 
 11281 ;; Auto vars:     Size  Location     Type
 11282 ;;  grs             4   72[COMRAM] unsigned long 
 11283 ;;  rem             4   65[COMRAM] unsigned long 
 11284 ;;  new_exp         2   70[COMRAM] short 
 11285 ;;  aexp            1   77[COMRAM] unsigned char 
 11286 ;;  bexp            1   76[COMRAM] unsigned char 
 11287 ;;  sign            1   69[COMRAM] unsigned char 
 11288 ;; Return value:  Size  Location     Type
 11289 ;;                  4   53[COMRAM] unsigned char 
 11290 ;; Registers used:
 11291 ;;		wreg, status,2, status,0
 11292 ;; Tracked objects:
 11293 ;;		On entry : 0/0
 11294 ;;		On exit  : 0/0
 11295 ;;		Unchanged: 0/0
 11296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11297 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11298 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11299 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11300 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11301 ;;Total ram usage:       25 bytes
 11302 ;; Hardware stack levels used: 1
 11303 ;; Hardware stack levels required when called: 2
 11304 ;; This function calls:
 11305 ;;		Nothing
 11306 ;; This function is called by:
 11307 ;;		_colorDetect
 11308 ;;		_main
 11309 ;;		_efgtoa
 11310 ;; This function uses a non-reentrant model
 11311 ;;
 11312                           
 11313                           	psect	text47
 11314   002C62                     __ptext47:
 11315                           	callstack 0
 11316   002C62                     ___fldiv:
 11317                           	callstack 24
 11318   002C62  5039               	movf	(___fldiv@b+3)^0,w,c
 11319   002C64  0B80               	andlw	128
 11320   002C66  6E46               	movwf	___fldiv@sign^0,c
 11321   002C68  5039               	movf	(___fldiv@b+3)^0,w,c
 11322   002C6A  2439               	addwf	(___fldiv@b+3)^0,w,c
 11323   002C6C  6E4D               	movwf	___fldiv@bexp^0,c
 11324   002C6E  AE38               	btfss	(___fldiv@b+2)^0,7,c
 11325   002C70  EF3C  F016         	goto	u3601
 11326   002C74  EF3E  F016         	goto	u3600
 11327   002C78                     u3601:
 11328   002C78  EF3F  F016         	goto	l3827
 11329   002C7C                     u3600:
 11330   002C7C  804D               	bsf	___fldiv@bexp^0,0,c
 11331   002C7E                     l3827:
 11332   002C7E  504D               	movf	___fldiv@bexp^0,w,c
 11333   002C80  B4D8               	btfsc	status,2,c
 11334   002C82  EF45  F016         	goto	u3611
 11335   002C86  EF47  F016         	goto	u3610
 11336   002C8A                     u3611:
 11337   002C8A  EF5C  F016         	goto	l3837
 11338   002C8E                     u3610:
 11339   002C8E  284D               	incf	___fldiv@bexp^0,w,c
 11340   002C90  A4D8               	btfss	status,2,c
 11341   002C92  EF4D  F016         	goto	u3621
 11342   002C96  EF4F  F016         	goto	u3620
 11343   002C9A                     u3621:
 11344   002C9A  EF57  F016         	goto	l3833
 11345   002C9E                     u3620:
 11346   002C9E  0E00               	movlw	0
 11347   002CA0  6E36               	movwf	___fldiv@b^0,c
 11348   002CA2  0E00               	movlw	0
 11349   002CA4  6E37               	movwf	(___fldiv@b+1)^0,c
 11350   002CA6  0E00               	movlw	0
 11351   002CA8  6E38               	movwf	(___fldiv@b+2)^0,c
 11352   002CAA  0E00               	movlw	0
 11353   002CAC  6E39               	movwf	(___fldiv@b+3)^0,c
 11354   002CAE                     l3833:
 11355   002CAE  8E38               	bsf	(___fldiv@b+2)^0,7,c
 11356   002CB0  0E00               	movlw	0
 11357   002CB2  6E39               	movwf	(___fldiv@b+3)^0,c
 11358   002CB4  EF64  F016         	goto	l3839
 11359   002CB8                     l3837:
 11360   002CB8  0E00               	movlw	0
 11361   002CBA  6E36               	movwf	___fldiv@b^0,c
 11362   002CBC  0E00               	movlw	0
 11363   002CBE  6E37               	movwf	(___fldiv@b+1)^0,c
 11364   002CC0  0E00               	movlw	0
 11365   002CC2  6E38               	movwf	(___fldiv@b+2)^0,c
 11366   002CC4  0E00               	movlw	0
 11367   002CC6  6E39               	movwf	(___fldiv@b+3)^0,c
 11368   002CC8                     l3839:
 11369   002CC8  503D               	movf	(___fldiv@a+3)^0,w,c
 11370   002CCA  0B80               	andlw	128
 11371   002CCC  1A46               	xorwf	___fldiv@sign^0,f,c
 11372   002CCE  503D               	movf	(___fldiv@a+3)^0,w,c
 11373   002CD0  243D               	addwf	(___fldiv@a+3)^0,w,c
 11374   002CD2  6E4E               	movwf	___fldiv@aexp^0,c
 11375   002CD4  AE3C               	btfss	(___fldiv@a+2)^0,7,c
 11376   002CD6  EF6F  F016         	goto	u3631
 11377   002CDA  EF71  F016         	goto	u3630
 11378   002CDE                     u3631:
 11379   002CDE  EF72  F016         	goto	l3847
 11380   002CE2                     u3630:
 11381   002CE2  804E               	bsf	___fldiv@aexp^0,0,c
 11382   002CE4                     l3847:
 11383   002CE4  504E               	movf	___fldiv@aexp^0,w,c
 11384   002CE6  B4D8               	btfsc	status,2,c
 11385   002CE8  EF78  F016         	goto	u3641
 11386   002CEC  EF7A  F016         	goto	u3640
 11387   002CF0                     u3641:
 11388   002CF0  EF8F  F016         	goto	l3857
 11389   002CF4                     u3640:
 11390   002CF4  284E               	incf	___fldiv@aexp^0,w,c
 11391   002CF6  A4D8               	btfss	status,2,c
 11392   002CF8  EF80  F016         	goto	u3651
 11393   002CFC  EF82  F016         	goto	u3650
 11394   002D00                     u3651:
 11395   002D00  EF8A  F016         	goto	l3853
 11396   002D04                     u3650:
 11397   002D04  0E00               	movlw	0
 11398   002D06  6E3A               	movwf	___fldiv@a^0,c
 11399   002D08  0E00               	movlw	0
 11400   002D0A  6E3B               	movwf	(___fldiv@a+1)^0,c
 11401   002D0C  0E00               	movlw	0
 11402   002D0E  6E3C               	movwf	(___fldiv@a+2)^0,c
 11403   002D10  0E00               	movlw	0
 11404   002D12  6E3D               	movwf	(___fldiv@a+3)^0,c
 11405   002D14                     l3853:
 11406   002D14  8E3C               	bsf	(___fldiv@a+2)^0,7,c
 11407   002D16  0E00               	movlw	0
 11408   002D18  6E3D               	movwf	(___fldiv@a+3)^0,c
 11409   002D1A  EF97  F016         	goto	l3859
 11410   002D1E                     l3857:
 11411   002D1E  0E00               	movlw	0
 11412   002D20  6E3A               	movwf	___fldiv@a^0,c
 11413   002D22  0E00               	movlw	0
 11414   002D24  6E3B               	movwf	(___fldiv@a+1)^0,c
 11415   002D26  0E00               	movlw	0
 11416   002D28  6E3C               	movwf	(___fldiv@a+2)^0,c
 11417   002D2A  0E00               	movlw	0
 11418   002D2C  6E3D               	movwf	(___fldiv@a+3)^0,c
 11419   002D2E                     l3859:
 11420   002D2E  503A               	movf	___fldiv@a^0,w,c
 11421   002D30  103B               	iorwf	(___fldiv@a+1)^0,w,c
 11422   002D32  103C               	iorwf	(___fldiv@a+2)^0,w,c
 11423   002D34  103D               	iorwf	(___fldiv@a+3)^0,w,c
 11424   002D36  A4D8               	btfss	status,2,c
 11425   002D38  EFA0  F016         	goto	u3661
 11426   002D3C  EFA2  F016         	goto	u3660
 11427   002D40                     u3661:
 11428   002D40  EFBA  F016         	goto	l3871
 11429   002D44                     u3660:
 11430   002D44  0E00               	movlw	0
 11431   002D46  6E36               	movwf	___fldiv@b^0,c
 11432   002D48  0E00               	movlw	0
 11433   002D4A  6E37               	movwf	(___fldiv@b+1)^0,c
 11434   002D4C  0E00               	movlw	0
 11435   002D4E  6E38               	movwf	(___fldiv@b+2)^0,c
 11436   002D50  0E00               	movlw	0
 11437   002D52  6E39               	movwf	(___fldiv@b+3)^0,c
 11438   002D54  0E80               	movlw	128
 11439   002D56  1238               	iorwf	(___fldiv@b+2)^0,f,c
 11440   002D58  0E7F               	movlw	127
 11441   002D5A  1239               	iorwf	(___fldiv@b+3)^0,f,c
 11442   002D5C                     l3865:
 11443   002D5C  5046               	movf	___fldiv@sign^0,w,c
 11444   002D5E  1239               	iorwf	(___fldiv@b+3)^0,f,c
 11445   002D60  C036  F036         	movff	___fldiv@b,?___fldiv
 11446   002D64  C037  F037         	movff	___fldiv@b+1,?___fldiv+1
 11447   002D68  C038  F038         	movff	___fldiv@b+2,?___fldiv+2
 11448   002D6C  C039  F039         	movff	___fldiv@b+3,?___fldiv+3
 11449   002D70  EFFD  F017         	goto	l1080
 11450   002D74                     l3871:
 11451   002D74  504D               	movf	___fldiv@bexp^0,w,c
 11452   002D76  A4D8               	btfss	status,2,c
 11453   002D78  EFC0  F016         	goto	u3671
 11454   002D7C  EFC2  F016         	goto	u3670
 11455   002D80                     u3671:
 11456   002D80  EFCC  F016         	goto	l3879
 11457   002D84                     u3670:
 11458   002D84  0E00               	movlw	0
 11459   002D86  6E36               	movwf	?___fldiv^0,c
 11460   002D88  0E00               	movlw	0
 11461   002D8A  6E37               	movwf	(?___fldiv+1)^0,c
 11462   002D8C  0E00               	movlw	0
 11463   002D8E  6E38               	movwf	(?___fldiv+2)^0,c
 11464   002D90  0E00               	movlw	0
 11465   002D92  6E39               	movwf	(?___fldiv+3)^0,c
 11466   002D94  EFFD  F017         	goto	l1080
 11467   002D98                     l3879:
 11468   002D98  504E               	movf	___fldiv@aexp^0,w,c
 11469   002D9A  C04D  F03E         	movff	___fldiv@bexp,??___fldiv
 11470   002D9E  6A3F               	clrf	(??___fldiv+1)^0,c
 11471   002DA0  5E3E               	subwf	??___fldiv^0,f,c
 11472   002DA2  0E00               	movlw	0
 11473   002DA4  5A3F               	subwfb	(??___fldiv+1)^0,f,c
 11474   002DA6  0E7F               	movlw	127
 11475   002DA8  243E               	addwf	??___fldiv^0,w,c
 11476   002DAA  6E47               	movwf	___fldiv@new_exp^0,c
 11477   002DAC  0E00               	movlw	0
 11478   002DAE  203F               	addwfc	(??___fldiv+1)^0,w,c
 11479   002DB0  6E48               	movwf	(___fldiv@new_exp+1)^0,c
 11480   002DB2  C036  F042         	movff	___fldiv@b,___fldiv@rem
 11481   002DB6  C037  F043         	movff	___fldiv@b+1,___fldiv@rem+1
 11482   002DBA  C038  F044         	movff	___fldiv@b+2,___fldiv@rem+2
 11483   002DBE  C039  F045         	movff	___fldiv@b+3,___fldiv@rem+3
 11484   002DC2  0E00               	movlw	0
 11485   002DC4  6E36               	movwf	___fldiv@b^0,c
 11486   002DC6  0E00               	movlw	0
 11487   002DC8  6E37               	movwf	(___fldiv@b+1)^0,c
 11488   002DCA  0E00               	movlw	0
 11489   002DCC  6E38               	movwf	(___fldiv@b+2)^0,c
 11490   002DCE  0E00               	movlw	0
 11491   002DD0  6E39               	movwf	(___fldiv@b+3)^0,c
 11492   002DD2  0E00               	movlw	0
 11493   002DD4  6E49               	movwf	___fldiv@grs^0,c
 11494   002DD6  0E00               	movlw	0
 11495   002DD8  6E4A               	movwf	(___fldiv@grs+1)^0,c
 11496   002DDA  0E00               	movlw	0
 11497   002DDC  6E4B               	movwf	(___fldiv@grs+2)^0,c
 11498   002DDE  0E00               	movlw	0
 11499   002DE0  6E4C               	movwf	(___fldiv@grs+3)^0,c
 11500   002DE2  0E00               	movlw	0
 11501   002DE4  6E4E               	movwf	___fldiv@aexp^0,c
 11502   002DE6  EF2D  F017         	goto	l1082
 11503   002DEA                     l3889:
 11504   002DEA  504E               	movf	___fldiv@aexp^0,w,c
 11505   002DEC  B4D8               	btfsc	status,2,c
 11506   002DEE  EFFB  F016         	goto	u3681
 11507   002DF2  EFFD  F016         	goto	u3680
 11508   002DF6                     u3681:
 11509   002DF6  EF14  F017         	goto	l3897
 11510   002DFA                     u3680:
 11511   002DFA  90D8               	bcf	status,0,c
 11512   002DFC  3642               	rlcf	___fldiv@rem^0,f,c
 11513   002DFE  3643               	rlcf	(___fldiv@rem+1)^0,f,c
 11514   002E00  3644               	rlcf	(___fldiv@rem+2)^0,f,c
 11515   002E02  3645               	rlcf	(___fldiv@rem+3)^0,f,c
 11516   002E04  90D8               	bcf	status,0,c
 11517   002E06  3636               	rlcf	___fldiv@b^0,f,c
 11518   002E08  3637               	rlcf	(___fldiv@b+1)^0,f,c
 11519   002E0A  3638               	rlcf	(___fldiv@b+2)^0,f,c
 11520   002E0C  3639               	rlcf	(___fldiv@b+3)^0,f,c
 11521   002E0E  AE4C               	btfss	(___fldiv@grs+3)^0,7,c
 11522   002E10  EF0C  F017         	goto	u3691
 11523   002E14  EF0E  F017         	goto	u3690
 11524   002E18                     u3691:
 11525   002E18  EF0F  F017         	goto	l1085
 11526   002E1C                     u3690:
 11527   002E1C  8036               	bsf	___fldiv@b^0,0,c
 11528   002E1E                     l1085:
 11529   002E1E  90D8               	bcf	status,0,c
 11530   002E20  3649               	rlcf	___fldiv@grs^0,f,c
 11531   002E22  364A               	rlcf	(___fldiv@grs+1)^0,f,c
 11532   002E24  364B               	rlcf	(___fldiv@grs+2)^0,f,c
 11533   002E26  364C               	rlcf	(___fldiv@grs+3)^0,f,c
 11534   002E28                     l3897:
 11535   002E28  503A               	movf	___fldiv@a^0,w,c
 11536   002E2A  5C42               	subwf	___fldiv@rem^0,w,c
 11537   002E2C  503B               	movf	(___fldiv@a+1)^0,w,c
 11538   002E2E  5843               	subwfb	(___fldiv@rem+1)^0,w,c
 11539   002E30  503C               	movf	(___fldiv@a+2)^0,w,c
 11540   002E32  5844               	subwfb	(___fldiv@rem+2)^0,w,c
 11541   002E34  503D               	movf	(___fldiv@a+3)^0,w,c
 11542   002E36  5845               	subwfb	(___fldiv@rem+3)^0,w,c
 11543   002E38  A0D8               	btfss	status,0,c
 11544   002E3A  EF21  F017         	goto	u3701
 11545   002E3E  EF23  F017         	goto	u3700
 11546   002E42                     u3701:
 11547   002E42  EF2C  F017         	goto	l3903
 11548   002E46                     u3700:
 11549   002E46  8C4C               	bsf	(___fldiv@grs+3)^0,6,c
 11550   002E48  503A               	movf	___fldiv@a^0,w,c
 11551   002E4A  5E42               	subwf	___fldiv@rem^0,f,c
 11552   002E4C  503B               	movf	(___fldiv@a+1)^0,w,c
 11553   002E4E  5A43               	subwfb	(___fldiv@rem+1)^0,f,c
 11554   002E50  503C               	movf	(___fldiv@a+2)^0,w,c
 11555   002E52  5A44               	subwfb	(___fldiv@rem+2)^0,f,c
 11556   002E54  503D               	movf	(___fldiv@a+3)^0,w,c
 11557   002E56  5A45               	subwfb	(___fldiv@rem+3)^0,f,c
 11558   002E58                     l3903:
 11559   002E58  2A4E               	incf	___fldiv@aexp^0,f,c
 11560   002E5A                     l1082:
 11561   002E5A  0E19               	movlw	25
 11562   002E5C  644E               	cpfsgt	___fldiv@aexp^0,c
 11563   002E5E  EF33  F017         	goto	u3711
 11564   002E62  EF35  F017         	goto	u3710
 11565   002E66                     u3711:
 11566   002E66  EFF5  F016         	goto	l3889
 11567   002E6A                     u3710:
 11568   002E6A  5042               	movf	___fldiv@rem^0,w,c
 11569   002E6C  1043               	iorwf	(___fldiv@rem+1)^0,w,c
 11570   002E6E  1044               	iorwf	(___fldiv@rem+2)^0,w,c
 11571   002E70  1045               	iorwf	(___fldiv@rem+3)^0,w,c
 11572   002E72  B4D8               	btfsc	status,2,c
 11573   002E74  EF3E  F017         	goto	u3721
 11574   002E78  EF40  F017         	goto	u3720
 11575   002E7C                     u3721:
 11576   002E7C  EF58  F017         	goto	l3915
 11577   002E80                     u3720:
 11578   002E80  8049               	bsf	___fldiv@grs^0,0,c
 11579   002E82  EF58  F017         	goto	l3915
 11580   002E86                     l3909:
 11581   002E86  90D8               	bcf	status,0,c
 11582   002E88  3636               	rlcf	___fldiv@b^0,f,c
 11583   002E8A  3637               	rlcf	(___fldiv@b+1)^0,f,c
 11584   002E8C  3638               	rlcf	(___fldiv@b+2)^0,f,c
 11585   002E8E  3639               	rlcf	(___fldiv@b+3)^0,f,c
 11586   002E90  AE4C               	btfss	(___fldiv@grs+3)^0,7,c
 11587   002E92  EF4D  F017         	goto	u3731
 11588   002E96  EF4F  F017         	goto	u3730
 11589   002E9A                     u3731:
 11590   002E9A  EF50  F017         	goto	l1091
 11591   002E9E                     u3730:
 11592   002E9E  8036               	bsf	___fldiv@b^0,0,c
 11593   002EA0                     l1091:
 11594   002EA0  90D8               	bcf	status,0,c
 11595   002EA2  3649               	rlcf	___fldiv@grs^0,f,c
 11596   002EA4  364A               	rlcf	(___fldiv@grs+1)^0,f,c
 11597   002EA6  364B               	rlcf	(___fldiv@grs+2)^0,f,c
 11598   002EA8  364C               	rlcf	(___fldiv@grs+3)^0,f,c
 11599   002EAA  0647               	decf	___fldiv@new_exp^0,f,c
 11600   002EAC  A0D8               	btfss	status,0,c
 11601   002EAE  0648               	decf	(___fldiv@new_exp+1)^0,f,c
 11602   002EB0                     l3915:
 11603   002EB0  AE38               	btfss	(___fldiv@b+2)^0,7,c
 11604   002EB2  EF5D  F017         	goto	u3741
 11605   002EB6  EF5F  F017         	goto	u3740
 11606   002EBA                     u3741:
 11607   002EBA  EF43  F017         	goto	l3909
 11608   002EBE                     u3740:
 11609   002EBE  0E00               	movlw	0
 11610   002EC0  6E4E               	movwf	___fldiv@aexp^0,c
 11611   002EC2  AE4C               	btfss	(___fldiv@grs+3)^0,7,c
 11612   002EC4  EF66  F017         	goto	u3751
 11613   002EC8  EF68  F017         	goto	u3750
 11614   002ECC                     u3751:
 11615   002ECC  EF8C  F017         	goto	l1093
 11616   002ED0                     u3750:
 11617   002ED0  0EFF               	movlw	255
 11618   002ED2  1449               	andwf	___fldiv@grs^0,w,c
 11619   002ED4  6E3E               	movwf	??___fldiv^0,c
 11620   002ED6  0EFF               	movlw	255
 11621   002ED8  144A               	andwf	(___fldiv@grs+1)^0,w,c
 11622   002EDA  6E3F               	movwf	(??___fldiv+1)^0,c
 11623   002EDC  0EFF               	movlw	255
 11624   002EDE  144B               	andwf	(___fldiv@grs+2)^0,w,c
 11625   002EE0  6E40               	movwf	(??___fldiv+2)^0,c
 11626   002EE2  0E7F               	movlw	127
 11627   002EE4  144C               	andwf	(___fldiv@grs+3)^0,w,c
 11628   002EE6  6E41               	movwf	(??___fldiv+3)^0,c
 11629   002EE8  503E               	movf	??___fldiv^0,w,c
 11630   002EEA  103F               	iorwf	(??___fldiv+1)^0,w,c
 11631   002EEC  1040               	iorwf	(??___fldiv+2)^0,w,c
 11632   002EEE  1041               	iorwf	(??___fldiv+3)^0,w,c
 11633   002EF0  B4D8               	btfsc	status,2,c
 11634   002EF2  EF7D  F017         	goto	u3761
 11635   002EF6  EF7F  F017         	goto	u3760
 11636   002EFA                     u3761:
 11637   002EFA  EF83  F017         	goto	l1094
 11638   002EFE                     u3760:
 11639   002EFE                     l3923:
 11640   002EFE  0E01               	movlw	1
 11641   002F00  6E4E               	movwf	___fldiv@aexp^0,c
 11642   002F02  EF8C  F017         	goto	l1093
 11643   002F06                     l1094:
 11644   002F06  A036               	btfss	___fldiv@b^0,0,c
 11645   002F08  EF88  F017         	goto	u3771
 11646   002F0C  EF8A  F017         	goto	u3770
 11647   002F10                     u3771:
 11648   002F10  EF8C  F017         	goto	l1093
 11649   002F14                     u3770:
 11650   002F14  EF7F  F017         	goto	l3923
 11651   002F18                     l1093:
 11652   002F18  504E               	movf	___fldiv@aexp^0,w,c
 11653   002F1A  B4D8               	btfsc	status,2,c
 11654   002F1C  EF92  F017         	goto	u3781
 11655   002F20  EF94  F017         	goto	u3780
 11656   002F24                     u3781:
 11657   002F24  EFB8  F017         	goto	l3935
 11658   002F28                     u3780:
 11659   002F28  0E01               	movlw	1
 11660   002F2A  2636               	addwf	___fldiv@b^0,f,c
 11661   002F2C  0E00               	movlw	0
 11662   002F2E  2237               	addwfc	(___fldiv@b+1)^0,f,c
 11663   002F30  2238               	addwfc	(___fldiv@b+2)^0,f,c
 11664   002F32  2239               	addwfc	(___fldiv@b+3)^0,f,c
 11665   002F34  A039               	btfss	(___fldiv@b+3)^0,0,c
 11666   002F36  EF9F  F017         	goto	u3791
 11667   002F3A  EFA1  F017         	goto	u3790
 11668   002F3E                     u3791:
 11669   002F3E  EFB8  F017         	goto	l3935
 11670   002F42                     u3790:
 11671   002F42  C036  F03E         	movff	___fldiv@b,??___fldiv
 11672   002F46  C037  F03F         	movff	___fldiv@b+1,??___fldiv+1
 11673   002F4A  C038  F040         	movff	___fldiv@b+2,??___fldiv+2
 11674   002F4E  C039  F041         	movff	___fldiv@b+3,??___fldiv+3
 11675   002F52  3441               	rlcf	(??___fldiv+3)^0,w,c
 11676   002F54  3241               	rrcf	(??___fldiv+3)^0,f,c
 11677   002F56  3240               	rrcf	(??___fldiv+2)^0,f,c
 11678   002F58  323F               	rrcf	(??___fldiv+1)^0,f,c
 11679   002F5A  323E               	rrcf	??___fldiv^0,f,c
 11680   002F5C  C03E  F036         	movff	??___fldiv,___fldiv@b
 11681   002F60  C03F  F037         	movff	??___fldiv+1,___fldiv@b+1
 11682   002F64  C040  F038         	movff	??___fldiv+2,___fldiv@b+2
 11683   002F68  C041  F039         	movff	??___fldiv+3,___fldiv@b+3
 11684   002F6C  4A47               	infsnz	___fldiv@new_exp^0,f,c
 11685   002F6E  2A48               	incf	(___fldiv@new_exp+1)^0,f,c
 11686   002F70                     l3935:
 11687   002F70  BE48               	btfsc	(___fldiv@new_exp+1)^0,7,c
 11688   002F72  EFC3  F017         	goto	u3801
 11689   002F76  5048               	movf	(___fldiv@new_exp+1)^0,w,c
 11690   002F78  E108               	bnz	u3800
 11691   002F7A  2847               	incf	___fldiv@new_exp^0,w,c
 11692   002F7C  A0D8               	btfss	status,0,c
 11693   002F7E  EFC3  F017         	goto	u3801
 11694   002F82  EFC5  F017         	goto	u3800
 11695   002F86                     u3801:
 11696   002F86  EFD0  F017         	goto	l3939
 11697   002F8A                     u3800:
 11698   002F8A  0E00               	movlw	0
 11699   002F8C  6E48               	movwf	(___fldiv@new_exp+1)^0,c
 11700   002F8E  6847               	setf	___fldiv@new_exp^0,c
 11701   002F90  0E00               	movlw	0
 11702   002F92  6E36               	movwf	___fldiv@b^0,c
 11703   002F94  0E00               	movlw	0
 11704   002F96  6E37               	movwf	(___fldiv@b+1)^0,c
 11705   002F98  0E00               	movlw	0
 11706   002F9A  6E38               	movwf	(___fldiv@b+2)^0,c
 11707   002F9C  0E00               	movlw	0
 11708   002F9E  6E39               	movwf	(___fldiv@b+3)^0,c
 11709   002FA0                     l3939:
 11710   002FA0  BE48               	btfsc	(___fldiv@new_exp+1)^0,7,c
 11711   002FA2  EFDD  F017         	goto	u3810
 11712   002FA6  5048               	movf	(___fldiv@new_exp+1)^0,w,c
 11713   002FA8  E106               	bnz	u3811
 11714   002FAA  0447               	decf	___fldiv@new_exp^0,w,c
 11715   002FAC  B0D8               	btfsc	status,0,c
 11716   002FAE  EFDB  F017         	goto	u3811
 11717   002FB2  EFDD  F017         	goto	u3810
 11718   002FB6                     u3811:
 11719   002FB6  EFEB  F017         	goto	l3943
 11720   002FBA                     u3810:
 11721   002FBA  0E00               	movlw	0
 11722   002FBC  6E48               	movwf	(___fldiv@new_exp+1)^0,c
 11723   002FBE  0E00               	movlw	0
 11724   002FC0  6E47               	movwf	___fldiv@new_exp^0,c
 11725   002FC2  0E00               	movlw	0
 11726   002FC4  6E36               	movwf	___fldiv@b^0,c
 11727   002FC6  0E00               	movlw	0
 11728   002FC8  6E37               	movwf	(___fldiv@b+1)^0,c
 11729   002FCA  0E00               	movlw	0
 11730   002FCC  6E38               	movwf	(___fldiv@b+2)^0,c
 11731   002FCE  0E00               	movlw	0
 11732   002FD0  6E39               	movwf	(___fldiv@b+3)^0,c
 11733   002FD2  0E00               	movlw	0
 11734   002FD4  6E46               	movwf	___fldiv@sign^0,c
 11735   002FD6                     l3943:
 11736   002FD6  C047  F04D         	movff	___fldiv@new_exp,___fldiv@bexp
 11737   002FDA  A04D               	btfss	___fldiv@bexp^0,0,c
 11738   002FDC  EFF2  F017         	goto	u3821
 11739   002FE0  EFF4  F017         	goto	u3820
 11740   002FE4                     u3821:
 11741   002FE4  EFF7  F017         	goto	l3949
 11742   002FE8                     u3820:
 11743   002FE8  8E38               	bsf	(___fldiv@b+2)^0,7,c
 11744   002FEA  EFF8  F017         	goto	l3951
 11745   002FEE                     l3949:
 11746   002FEE  9E38               	bcf	(___fldiv@b+2)^0,7,c
 11747   002FF0                     l3951:
 11748   002FF0  90D8               	bcf	status,0,c
 11749   002FF2  304D               	rrcf	___fldiv@bexp^0,w,c
 11750   002FF4  6E39               	movwf	(___fldiv@b+3)^0,c
 11751   002FF6  EFAE  F016         	goto	l3865
 11752   002FFA                     l1080:
 11753   002FFA  0012               	return		;funcret
 11754   002FFC                     __end_of___fldiv:
 11755                           	callstack 0
 11756                           
 11757 ;; *************** function _ambientCal *****************
 11758 ;; Defined at:
 11759 ;;		line 98 in file "MazeRobot.X/color.c"
 11760 ;; Parameters:    Size  Location     Type
 11761 ;;  v               2   17[COMRAM] PTR struct RGB
 11762 ;;		 -> main@ambientRGBVal(8), 
 11763 ;; Auto vars:     Size  Location     Type
 11764 ;;  i               2   21[COMRAM] int 
 11765 ;; Return value:  Size  Location     Type
 11766 ;;                  1    wreg      void 
 11767 ;; Registers used:
 11768 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11769 ;; Tracked objects:
 11770 ;;		On entry : 0/0
 11771 ;;		On exit  : 0/0
 11772 ;;		Unchanged: 0/0
 11773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11774 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11775 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11776 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11777 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11778 ;;Total ram usage:        6 bytes
 11779 ;; Hardware stack levels used: 1
 11780 ;; Hardware stack levels required when called: 6
 11781 ;; This function calls:
 11782 ;;		_getColor
 11783 ;; This function is called by:
 11784 ;;		_main
 11785 ;; This function uses a non-reentrant model
 11786 ;;
 11787                           
 11788                           	psect	text48
 11789   004A08                     __ptext48:
 11790                           	callstack 0
 11791   004A08                     _ambientCal:
 11792                           	callstack 24
 11793   004A08                     
 11794                           ;MazeRobot.X/color.c: 101:     for(int i = 0;i<20;i++){
 11795   004A08  0E00               	movlw	0
 11796   004A0A  6E17               	movwf	(ambientCal@i+1)^0,c
 11797   004A0C  0E00               	movlw	0
 11798   004A0E  6E16               	movwf	ambientCal@i^0,c
 11799   004A10                     l4989:
 11800                           
 11801                           ;MazeRobot.X/color.c: 102:             LATDbits.LATD7 = !LATDbits.LATD7;
 11802   004A10  AE7C               	btfss	124,7,c	;volatile
 11803   004A12  EF0D  F025         	goto	u5211
 11804   004A16  EF11  F025         	goto	u5210
 11805   004A1A                     u5211:
 11806   004A1A  6A14               	clrf	??_ambientCal^0,c
 11807   004A1C  2A14               	incf	??_ambientCal^0,f,c
 11808   004A1E  EF12  F025         	goto	u5228
 11809   004A22                     u5210:
 11810   004A22  6A14               	clrf	??_ambientCal^0,c
 11811   004A24                     u5228:
 11812   004A24  3214               	rrcf	??_ambientCal^0,f,c
 11813   004A26  3214               	rrcf	??_ambientCal^0,f,c
 11814   004A28  507C               	movf	124,w,c	;volatile
 11815   004A2A  1814               	xorwf	??_ambientCal^0,w,c
 11816   004A2C  0B7F               	andlw	-129
 11817   004A2E  1814               	xorwf	??_ambientCal^0,w,c
 11818   004A30  6E7C               	movwf	124,c	;volatile
 11819   004A32                     
 11820                           ;MazeRobot.X/color.c: 103:             _delay((unsigned long)((100)*(64000000/4000.0)));
 11821   004A32  0E09               	movlw	9
 11822   004A34  6E15               	movwf	(??_ambientCal+1)^0,c
 11823   004A36  0E1E               	movlw	30
 11824   004A38  6E14               	movwf	??_ambientCal^0,c
 11825   004A3A  0EE4               	movlw	228
 11826   004A3C                     u7127:
 11827   004A3C  2EE8               	decfsz	wreg,f,c
 11828   004A3E  D7FE               	bra	u7127
 11829   004A40  2E14               	decfsz	??_ambientCal^0,f,c
 11830   004A42  D7FC               	bra	u7127
 11831   004A44  2E15               	decfsz	(??_ambientCal+1)^0,f,c
 11832   004A46  D7FA               	bra	u7127
 11833   004A48  D000               	nop2	
 11834                           
 11835                           ;MazeRobot.X/color.c: 104:             }
 11836   004A4A  4A16               	infsnz	ambientCal@i^0,f,c
 11837   004A4C  2A17               	incf	(ambientCal@i+1)^0,f,c
 11838   004A4E  BE17               	btfsc	(ambientCal@i+1)^0,7,c
 11839   004A50  EF33  F025         	goto	u5231
 11840   004A54  5017               	movf	(ambientCal@i+1)^0,w,c
 11841   004A56  E109               	bnz	u5230
 11842   004A58  0E14               	movlw	20
 11843   004A5A  5C16               	subwf	ambientCal@i^0,w,c
 11844   004A5C  A0D8               	btfss	status,0,c
 11845   004A5E  EF33  F025         	goto	u5231
 11846   004A62  EF35  F025         	goto	u5230
 11847   004A66                     u5231:
 11848   004A66  EF08  F025         	goto	l4989
 11849   004A6A                     u5230:
 11850   004A6A                     
 11851                           ;MazeRobot.X/color.c: 105:             LATDbits.LATD7 = !LATDbits.LATD7;
 11852   004A6A  AE7C               	btfss	124,7,c	;volatile
 11853   004A6C  EF3A  F025         	goto	u5241
 11854   004A70  EF3E  F025         	goto	u5240
 11855   004A74                     u5241:
 11856   004A74  6A14               	clrf	??_ambientCal^0,c
 11857   004A76  2A14               	incf	??_ambientCal^0,f,c
 11858   004A78  EF3F  F025         	goto	u5258
 11859   004A7C                     u5240:
 11860   004A7C  6A14               	clrf	??_ambientCal^0,c
 11861   004A7E                     u5258:
 11862   004A7E  3214               	rrcf	??_ambientCal^0,f,c
 11863   004A80  3214               	rrcf	??_ambientCal^0,f,c
 11864   004A82  507C               	movf	124,w,c	;volatile
 11865   004A84  1814               	xorwf	??_ambientCal^0,w,c
 11866   004A86  0B7F               	andlw	-129
 11867   004A88  1814               	xorwf	??_ambientCal^0,w,c
 11868   004A8A  6E7C               	movwf	124,c	;volatile
 11869   004A8C                     
 11870                           ;MazeRobot.X/color.c: 106:             _delay((unsigned long)((500)*(64000000/4000.0)));
 11871   004A8C  0E29               	movlw	41
 11872   004A8E  6E15               	movwf	(??_ambientCal+1)^0,c
 11873   004A90  0E96               	movlw	150
 11874   004A92  6E14               	movwf	??_ambientCal^0,c
 11875   004A94  0E7F               	movlw	127
 11876   004A96                     u7137:
 11877   004A96  2EE8               	decfsz	wreg,f,c
 11878   004A98  D7FE               	bra	u7137
 11879   004A9A  2E14               	decfsz	??_ambientCal^0,f,c
 11880   004A9C  D7FC               	bra	u7137
 11881   004A9E  2E15               	decfsz	(??_ambientCal+1)^0,f,c
 11882   004AA0  D7FA               	bra	u7137
 11883   004AA2  F000               	nop	
 11884   004AA4                     
 11885                           ;MazeRobot.X/color.c: 107:             getColor(v);
 11886   004AA4  C012  F010         	movff	ambientCal@v,getColor@v
 11887   004AA8  C013  F011         	movff	ambientCal@v+1,getColor@v+1
 11888   004AAC  ECCF  F028         	call	_getColor	;wreg free
 11889   004AB0                     
 11890                           ;MazeRobot.X/color.c: 108:             _delay((unsigned long)((500)*(64000000/4000.0)));
 11891   004AB0  0E29               	movlw	41
 11892   004AB2  6E15               	movwf	(??_ambientCal+1)^0,c
 11893   004AB4  0E96               	movlw	150
 11894   004AB6  6E14               	movwf	??_ambientCal^0,c
 11895   004AB8  0E7F               	movlw	127
 11896   004ABA                     u7147:
 11897   004ABA  2EE8               	decfsz	wreg,f,c
 11898   004ABC  D7FE               	bra	u7147
 11899   004ABE  2E14               	decfsz	??_ambientCal^0,f,c
 11900   004AC0  D7FC               	bra	u7147
 11901   004AC2  2E15               	decfsz	(??_ambientCal+1)^0,f,c
 11902   004AC4  D7FA               	bra	u7147
 11903   004AC6  F000               	nop	
 11904   004AC8                     
 11905                           ;MazeRobot.X/color.c: 109:             LATDbits.LATD7 = !LATDbits.LATD7;
 11906   004AC8  AE7C               	btfss	124,7,c	;volatile
 11907   004ACA  EF69  F025         	goto	u5261
 11908   004ACE  EF6D  F025         	goto	u5260
 11909   004AD2                     u5261:
 11910   004AD2  6A14               	clrf	??_ambientCal^0,c
 11911   004AD4  2A14               	incf	??_ambientCal^0,f,c
 11912   004AD6  EF6E  F025         	goto	u5278
 11913   004ADA                     u5260:
 11914   004ADA  6A14               	clrf	??_ambientCal^0,c
 11915   004ADC                     u5278:
 11916   004ADC  3214               	rrcf	??_ambientCal^0,f,c
 11917   004ADE  3214               	rrcf	??_ambientCal^0,f,c
 11918   004AE0  507C               	movf	124,w,c	;volatile
 11919   004AE2  1814               	xorwf	??_ambientCal^0,w,c
 11920   004AE4  0B7F               	andlw	-129
 11921   004AE6  1814               	xorwf	??_ambientCal^0,w,c
 11922   004AE8  6E7C               	movwf	124,c	;volatile
 11923   004AEA  0012               	return		;funcret
 11924   004AEC                     __end_of_ambientCal:
 11925                           	callstack 0
 11926                           
 11927 ;; *************** function _getColor *****************
 11928 ;; Defined at:
 11929 ;;		line 90 in file "MazeRobot.X/color.c"
 11930 ;; Parameters:    Size  Location     Type
 11931 ;;  v               2   15[COMRAM] PTR struct RGB
 11932 ;;		 -> main@whiteRGBVal(8), main@ambientRGBVal(8), main@RGBVal(8), colorDetect@RGBVal(8), 
 11933 ;; Auto vars:     Size  Location     Type
 11934 ;;		None
 11935 ;; Return value:  Size  Location     Type
 11936 ;;                  1    wreg      void 
 11937 ;; Registers used:
 11938 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11939 ;; Tracked objects:
 11940 ;;		On entry : 0/0
 11941 ;;		On exit  : 0/0
 11942 ;;		Unchanged: 0/0
 11943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11944 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11945 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11947 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11948 ;;Total ram usage:        2 bytes
 11949 ;; Hardware stack levels used: 1
 11950 ;; Hardware stack levels required when called: 5
 11951 ;; This function calls:
 11952 ;;		_color_read_Blue
 11953 ;;		_color_read_Clear
 11954 ;;		_color_read_Green
 11955 ;;		_color_read_Red
 11956 ;; This function is called by:
 11957 ;;		_ambientCal
 11958 ;;		_whiteCal
 11959 ;;		_colorDetect
 11960 ;;		_main
 11961 ;; This function uses a non-reentrant model
 11962 ;;
 11963                           
 11964                           	psect	text49
 11965   00519E                     __ptext49:
 11966                           	callstack 0
 11967   00519E                     _getColor:
 11968                           	callstack 24
 11969   00519E                     
 11970                           ;MazeRobot.X/color.c: 91:     v->R = color_read_Red();
 11971   00519E  EC7A  F029         	call	_color_read_Red	;wreg free
 11972   0051A2  C010  FFD9         	movff	getColor@v,fsr2l
 11973   0051A6  C011  FFDA         	movff	getColor@v+1,fsr2h
 11974   0051AA  C009  FFDE         	movff	?_color_read_Red,postinc2
 11975   0051AE  C00A  FFDD         	movff	?_color_read_Red+1,postdec2
 11976                           
 11977                           ;MazeRobot.X/color.c: 92:     v->G = color_read_Green();
 11978   0051B2  ECA2  F029         	call	_color_read_Green	;wreg free
 11979   0051B6  EE20 F002          	lfsr	2,2
 11980   0051BA  5010               	movf	getColor@v^0,w,c
 11981   0051BC  26D9               	addwf	fsr2l,f,c
 11982   0051BE  5011               	movf	(getColor@v+1)^0,w,c
 11983   0051C0  22DA               	addwfc	fsr2h,f,c
 11984   0051C2  C009  FFDE         	movff	?_color_read_Green,postinc2
 11985   0051C6  C00A  FFDD         	movff	?_color_read_Green+1,postdec2
 11986                           
 11987                           ;MazeRobot.X/color.c: 93:     v->B = color_read_Blue();
 11988   0051CA  ECF2  F029         	call	_color_read_Blue	;wreg free
 11989   0051CE  EE20 F004          	lfsr	2,4
 11990   0051D2  5010               	movf	getColor@v^0,w,c
 11991   0051D4  26D9               	addwf	fsr2l,f,c
 11992   0051D6  5011               	movf	(getColor@v+1)^0,w,c
 11993   0051D8  22DA               	addwfc	fsr2h,f,c
 11994   0051DA  C009  FFDE         	movff	?_color_read_Blue,postinc2
 11995   0051DE  C00A  FFDD         	movff	?_color_read_Blue+1,postdec2
 11996                           
 11997                           ;MazeRobot.X/color.c: 94:     v->C = color_read_Clear();
 11998   0051E2  ECCA  F029         	call	_color_read_Clear	;wreg free
 11999   0051E6  EE20 F006          	lfsr	2,6
 12000   0051EA  5010               	movf	getColor@v^0,w,c
 12001   0051EC  26D9               	addwf	fsr2l,f,c
 12002   0051EE  5011               	movf	(getColor@v+1)^0,w,c
 12003   0051F0  22DA               	addwfc	fsr2h,f,c
 12004   0051F2  C009  FFDE         	movff	?_color_read_Clear,postinc2
 12005   0051F6  C00A  FFDD         	movff	?_color_read_Clear+1,postdec2
 12006   0051FA  0012               	return		;funcret
 12007   0051FC                     __end_of_getColor:
 12008                           	callstack 0
 12009                           
 12010 ;; *************** function _color_read_Red *****************
 12011 ;; Defined at:
 12012 ;;		line 32 in file "MazeRobot.X/color.c"
 12013 ;; Parameters:    Size  Location     Type
 12014 ;;		None
 12015 ;; Auto vars:     Size  Location     Type
 12016 ;;  tmp             2   13[COMRAM] unsigned int 
 12017 ;; Return value:  Size  Location     Type
 12018 ;;                  2    8[COMRAM] unsigned int 
 12019 ;; Registers used:
 12020 ;;		wreg, status,2, status,0, cstack
 12021 ;; Tracked objects:
 12022 ;;		On entry : 0/0
 12023 ;;		On exit  : 0/0
 12024 ;;		Unchanged: 0/0
 12025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12026 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12027 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12028 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12029 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12030 ;;Total ram usage:        7 bytes
 12031 ;; Hardware stack levels used: 1
 12032 ;; Hardware stack levels required when called: 4
 12033 ;; This function calls:
 12034 ;;		_I2C_2_Master_Read
 12035 ;;		_I2C_2_Master_RepStart
 12036 ;;		_I2C_2_Master_Start
 12037 ;;		_I2C_2_Master_Stop
 12038 ;;		_I2C_2_Master_Write
 12039 ;; This function is called by:
 12040 ;;		_getColor
 12041 ;; This function uses a non-reentrant model
 12042 ;;
 12043                           
 12044                           	psect	text50
 12045   0052F4                     __ptext50:
 12046                           	callstack 0
 12047   0052F4                     _color_read_Red:
 12048                           	callstack 24
 12049   0052F4                     
 12050                           ;MazeRobot.X/color.c: 34:  unsigned int tmp;;MazeRobot.X/color.c: 35:  I2C_2_Master_Star
      +                          t();
 12051   0052F4  EC01  F02C         	call	_I2C_2_Master_Start	;wreg free
 12052                           
 12053                           ;MazeRobot.X/color.c: 36:  I2C_2_Master_Write(0x52 | 0x00);
 12054   0052F8  0E52               	movlw	82
 12055   0052FA  ECF6  F02B         	call	_I2C_2_Master_Write
 12056                           
 12057                           ;MazeRobot.X/color.c: 37:  I2C_2_Master_Write(0xA0 | 0x16);
 12058   0052FE  0EB6               	movlw	182
 12059   005300  ECF6  F02B         	call	_I2C_2_Master_Write
 12060                           
 12061                           ;MazeRobot.X/color.c: 38:  I2C_2_Master_RepStart();
 12062   005304  EC06  F02C         	call	_I2C_2_Master_RepStart	;wreg free
 12063                           
 12064                           ;MazeRobot.X/color.c: 39:  I2C_2_Master_Write(0x52 | 0x01);
 12065   005308  0E53               	movlw	83
 12066   00530A  ECF6  F02B         	call	_I2C_2_Master_Write
 12067                           
 12068                           ;MazeRobot.X/color.c: 40:  tmp=I2C_2_Master_Read(1);
 12069   00530E  0E01               	movlw	1
 12070   005310  ECA6  F02A         	call	_I2C_2_Master_Read
 12071   005314  6E0B               	movwf	??_color_read_Red^0,c
 12072   005316  500B               	movf	??_color_read_Red^0,w,c
 12073   005318  6E0E               	movwf	color_read_Red@tmp^0,c
 12074   00531A  6A0F               	clrf	(color_read_Red@tmp+1)^0,c
 12075                           
 12076                           ;MazeRobot.X/color.c: 41:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 12077   00531C  0E00               	movlw	0
 12078   00531E  ECA6  F02A         	call	_I2C_2_Master_Read
 12079   005322  6E0B               	movwf	??_color_read_Red^0,c
 12080   005324  500B               	movf	??_color_read_Red^0,w,c
 12081   005326  6E0D               	movwf	(??_color_read_Red+2)^0,c
 12082   005328  6A0C               	clrf	(??_color_read_Red+1)^0,c
 12083   00532A  500E               	movf	color_read_Red@tmp^0,w,c
 12084   00532C  100C               	iorwf	(??_color_read_Red+1)^0,w,c
 12085   00532E  6E0E               	movwf	color_read_Red@tmp^0,c
 12086   005330  500F               	movf	(color_read_Red@tmp+1)^0,w,c
 12087   005332  100D               	iorwf	(??_color_read_Red+2)^0,w,c
 12088   005334  6E0F               	movwf	(color_read_Red@tmp+1)^0,c
 12089                           
 12090                           ;MazeRobot.X/color.c: 42:  I2C_2_Master_Stop();
 12091   005336  ECFC  F02B         	call	_I2C_2_Master_Stop	;wreg free
 12092   00533A                     
 12093                           ;MazeRobot.X/color.c: 43:  return tmp;
 12094   00533A  C00E  F009         	movff	color_read_Red@tmp,?_color_read_Red
 12095   00533E  C00F  F00A         	movff	color_read_Red@tmp+1,?_color_read_Red+1
 12096   005342  0012               	return		;funcret
 12097   005344                     __end_of_color_read_Red:
 12098                           	callstack 0
 12099                           
 12100 ;; *************** function _color_read_Green *****************
 12101 ;; Defined at:
 12102 ;;		line 46 in file "MazeRobot.X/color.c"
 12103 ;; Parameters:    Size  Location     Type
 12104 ;;		None
 12105 ;; Auto vars:     Size  Location     Type
 12106 ;;  tmp             2   13[COMRAM] unsigned int 
 12107 ;; Return value:  Size  Location     Type
 12108 ;;                  2    8[COMRAM] unsigned int 
 12109 ;; Registers used:
 12110 ;;		wreg, status,2, status,0, cstack
 12111 ;; Tracked objects:
 12112 ;;		On entry : 0/0
 12113 ;;		On exit  : 0/0
 12114 ;;		Unchanged: 0/0
 12115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12116 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12117 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12118 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12119 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12120 ;;Total ram usage:        7 bytes
 12121 ;; Hardware stack levels used: 1
 12122 ;; Hardware stack levels required when called: 4
 12123 ;; This function calls:
 12124 ;;		_I2C_2_Master_Read
 12125 ;;		_I2C_2_Master_RepStart
 12126 ;;		_I2C_2_Master_Start
 12127 ;;		_I2C_2_Master_Stop
 12128 ;;		_I2C_2_Master_Write
 12129 ;; This function is called by:
 12130 ;;		_getColor
 12131 ;; This function uses a non-reentrant model
 12132 ;;
 12133                           
 12134                           	psect	text51
 12135   005344                     __ptext51:
 12136                           	callstack 0
 12137   005344                     _color_read_Green:
 12138                           	callstack 24
 12139   005344                     
 12140                           ;MazeRobot.X/color.c: 48:  unsigned int tmp;;MazeRobot.X/color.c: 49:  I2C_2_Master_Star
      +                          t();
 12141   005344  EC01  F02C         	call	_I2C_2_Master_Start	;wreg free
 12142                           
 12143                           ;MazeRobot.X/color.c: 50:  I2C_2_Master_Write(0x52 | 0x00);
 12144   005348  0E52               	movlw	82
 12145   00534A  ECF6  F02B         	call	_I2C_2_Master_Write
 12146                           
 12147                           ;MazeRobot.X/color.c: 51:  I2C_2_Master_Write(0xA0 | 0x18);
 12148   00534E  0EB8               	movlw	184
 12149   005350  ECF6  F02B         	call	_I2C_2_Master_Write
 12150                           
 12151                           ;MazeRobot.X/color.c: 52:  I2C_2_Master_RepStart();
 12152   005354  EC06  F02C         	call	_I2C_2_Master_RepStart	;wreg free
 12153                           
 12154                           ;MazeRobot.X/color.c: 53:  I2C_2_Master_Write(0x52 | 0x01);
 12155   005358  0E53               	movlw	83
 12156   00535A  ECF6  F02B         	call	_I2C_2_Master_Write
 12157                           
 12158                           ;MazeRobot.X/color.c: 54:  tmp=I2C_2_Master_Read(1);
 12159   00535E  0E01               	movlw	1
 12160   005360  ECA6  F02A         	call	_I2C_2_Master_Read
 12161   005364  6E0B               	movwf	??_color_read_Green^0,c
 12162   005366  500B               	movf	??_color_read_Green^0,w,c
 12163   005368  6E0E               	movwf	color_read_Green@tmp^0,c
 12164   00536A  6A0F               	clrf	(color_read_Green@tmp+1)^0,c
 12165                           
 12166                           ;MazeRobot.X/color.c: 55:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 12167   00536C  0E00               	movlw	0
 12168   00536E  ECA6  F02A         	call	_I2C_2_Master_Read
 12169   005372  6E0B               	movwf	??_color_read_Green^0,c
 12170   005374  500B               	movf	??_color_read_Green^0,w,c
 12171   005376  6E0D               	movwf	(??_color_read_Green+2)^0,c
 12172   005378  6A0C               	clrf	(??_color_read_Green+1)^0,c
 12173   00537A  500E               	movf	color_read_Green@tmp^0,w,c
 12174   00537C  100C               	iorwf	(??_color_read_Green+1)^0,w,c
 12175   00537E  6E0E               	movwf	color_read_Green@tmp^0,c
 12176   005380  500F               	movf	(color_read_Green@tmp+1)^0,w,c
 12177   005382  100D               	iorwf	(??_color_read_Green+2)^0,w,c
 12178   005384  6E0F               	movwf	(color_read_Green@tmp+1)^0,c
 12179                           
 12180                           ;MazeRobot.X/color.c: 56:  I2C_2_Master_Stop();
 12181   005386  ECFC  F02B         	call	_I2C_2_Master_Stop	;wreg free
 12182   00538A                     
 12183                           ;MazeRobot.X/color.c: 57:  return tmp;
 12184   00538A  C00E  F009         	movff	color_read_Green@tmp,?_color_read_Green
 12185   00538E  C00F  F00A         	movff	color_read_Green@tmp+1,?_color_read_Green+1
 12186   005392  0012               	return		;funcret
 12187   005394                     __end_of_color_read_Green:
 12188                           	callstack 0
 12189                           
 12190 ;; *************** function _color_read_Clear *****************
 12191 ;; Defined at:
 12192 ;;		line 75 in file "MazeRobot.X/color.c"
 12193 ;; Parameters:    Size  Location     Type
 12194 ;;		None
 12195 ;; Auto vars:     Size  Location     Type
 12196 ;;  tmp             2   13[COMRAM] unsigned int 
 12197 ;; Return value:  Size  Location     Type
 12198 ;;                  2    8[COMRAM] unsigned int 
 12199 ;; Registers used:
 12200 ;;		wreg, status,2, status,0, cstack
 12201 ;; Tracked objects:
 12202 ;;		On entry : 0/0
 12203 ;;		On exit  : 0/0
 12204 ;;		Unchanged: 0/0
 12205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12206 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12207 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12208 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12209 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12210 ;;Total ram usage:        7 bytes
 12211 ;; Hardware stack levels used: 1
 12212 ;; Hardware stack levels required when called: 4
 12213 ;; This function calls:
 12214 ;;		_I2C_2_Master_Read
 12215 ;;		_I2C_2_Master_RepStart
 12216 ;;		_I2C_2_Master_Start
 12217 ;;		_I2C_2_Master_Stop
 12218 ;;		_I2C_2_Master_Write
 12219 ;; This function is called by:
 12220 ;;		_getColor
 12221 ;; This function uses a non-reentrant model
 12222 ;;
 12223                           
 12224                           	psect	text52
 12225   005394                     __ptext52:
 12226                           	callstack 0
 12227   005394                     _color_read_Clear:
 12228                           	callstack 24
 12229   005394                     
 12230                           ;MazeRobot.X/color.c: 77:  unsigned int tmp;;MazeRobot.X/color.c: 78:  I2C_2_Master_Star
      +                          t();
 12231   005394  EC01  F02C         	call	_I2C_2_Master_Start	;wreg free
 12232                           
 12233                           ;MazeRobot.X/color.c: 79:  I2C_2_Master_Write(0x52 | 0x00);
 12234   005398  0E52               	movlw	82
 12235   00539A  ECF6  F02B         	call	_I2C_2_Master_Write
 12236                           
 12237                           ;MazeRobot.X/color.c: 80:  I2C_2_Master_Write(0xA0 | 0x14);
 12238   00539E  0EB4               	movlw	180
 12239   0053A0  ECF6  F02B         	call	_I2C_2_Master_Write
 12240                           
 12241                           ;MazeRobot.X/color.c: 81:  I2C_2_Master_RepStart();
 12242   0053A4  EC06  F02C         	call	_I2C_2_Master_RepStart	;wreg free
 12243                           
 12244                           ;MazeRobot.X/color.c: 82:  I2C_2_Master_Write(0x52 | 0x01);
 12245   0053A8  0E53               	movlw	83
 12246   0053AA  ECF6  F02B         	call	_I2C_2_Master_Write
 12247                           
 12248                           ;MazeRobot.X/color.c: 83:  tmp=I2C_2_Master_Read(1);
 12249   0053AE  0E01               	movlw	1
 12250   0053B0  ECA6  F02A         	call	_I2C_2_Master_Read
 12251   0053B4  6E0B               	movwf	??_color_read_Clear^0,c
 12252   0053B6  500B               	movf	??_color_read_Clear^0,w,c
 12253   0053B8  6E0E               	movwf	color_read_Clear@tmp^0,c
 12254   0053BA  6A0F               	clrf	(color_read_Clear@tmp+1)^0,c
 12255                           
 12256                           ;MazeRobot.X/color.c: 84:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 12257   0053BC  0E00               	movlw	0
 12258   0053BE  ECA6  F02A         	call	_I2C_2_Master_Read
 12259   0053C2  6E0B               	movwf	??_color_read_Clear^0,c
 12260   0053C4  500B               	movf	??_color_read_Clear^0,w,c
 12261   0053C6  6E0D               	movwf	(??_color_read_Clear+2)^0,c
 12262   0053C8  6A0C               	clrf	(??_color_read_Clear+1)^0,c
 12263   0053CA  500E               	movf	color_read_Clear@tmp^0,w,c
 12264   0053CC  100C               	iorwf	(??_color_read_Clear+1)^0,w,c
 12265   0053CE  6E0E               	movwf	color_read_Clear@tmp^0,c
 12266   0053D0  500F               	movf	(color_read_Clear@tmp+1)^0,w,c
 12267   0053D2  100D               	iorwf	(??_color_read_Clear+2)^0,w,c
 12268   0053D4  6E0F               	movwf	(color_read_Clear@tmp+1)^0,c
 12269                           
 12270                           ;MazeRobot.X/color.c: 85:  I2C_2_Master_Stop();
 12271   0053D6  ECFC  F02B         	call	_I2C_2_Master_Stop	;wreg free
 12272   0053DA                     
 12273                           ;MazeRobot.X/color.c: 86:  return tmp;
 12274   0053DA  C00E  F009         	movff	color_read_Clear@tmp,?_color_read_Clear
 12275   0053DE  C00F  F00A         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
 12276   0053E2  0012               	return		;funcret
 12277   0053E4                     __end_of_color_read_Clear:
 12278                           	callstack 0
 12279                           
 12280 ;; *************** function _color_read_Blue *****************
 12281 ;; Defined at:
 12282 ;;		line 61 in file "MazeRobot.X/color.c"
 12283 ;; Parameters:    Size  Location     Type
 12284 ;;		None
 12285 ;; Auto vars:     Size  Location     Type
 12286 ;;  tmp             2   13[COMRAM] unsigned int 
 12287 ;; Return value:  Size  Location     Type
 12288 ;;                  2    8[COMRAM] unsigned int 
 12289 ;; Registers used:
 12290 ;;		wreg, status,2, status,0, cstack
 12291 ;; Tracked objects:
 12292 ;;		On entry : 0/0
 12293 ;;		On exit  : 0/0
 12294 ;;		Unchanged: 0/0
 12295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12296 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12297 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12298 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12299 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12300 ;;Total ram usage:        7 bytes
 12301 ;; Hardware stack levels used: 1
 12302 ;; Hardware stack levels required when called: 4
 12303 ;; This function calls:
 12304 ;;		_I2C_2_Master_Read
 12305 ;;		_I2C_2_Master_RepStart
 12306 ;;		_I2C_2_Master_Start
 12307 ;;		_I2C_2_Master_Stop
 12308 ;;		_I2C_2_Master_Write
 12309 ;; This function is called by:
 12310 ;;		_getColor
 12311 ;; This function uses a non-reentrant model
 12312 ;;
 12313                           
 12314                           	psect	text53
 12315   0053E4                     __ptext53:
 12316                           	callstack 0
 12317   0053E4                     _color_read_Blue:
 12318                           	callstack 24
 12319   0053E4                     
 12320                           ;MazeRobot.X/color.c: 63:  unsigned int tmp;;MazeRobot.X/color.c: 64:  I2C_2_Master_Star
      +                          t();
 12321   0053E4  EC01  F02C         	call	_I2C_2_Master_Start	;wreg free
 12322                           
 12323                           ;MazeRobot.X/color.c: 65:  I2C_2_Master_Write(0x52 | 0x00);
 12324   0053E8  0E52               	movlw	82
 12325   0053EA  ECF6  F02B         	call	_I2C_2_Master_Write
 12326                           
 12327                           ;MazeRobot.X/color.c: 66:  I2C_2_Master_Write(0xA0 | 0x1A);
 12328   0053EE  0EBA               	movlw	186
 12329   0053F0  ECF6  F02B         	call	_I2C_2_Master_Write
 12330                           
 12331                           ;MazeRobot.X/color.c: 67:  I2C_2_Master_RepStart();
 12332   0053F4  EC06  F02C         	call	_I2C_2_Master_RepStart	;wreg free
 12333                           
 12334                           ;MazeRobot.X/color.c: 68:  I2C_2_Master_Write(0x52 | 0x01);
 12335   0053F8  0E53               	movlw	83
 12336   0053FA  ECF6  F02B         	call	_I2C_2_Master_Write
 12337                           
 12338                           ;MazeRobot.X/color.c: 69:  tmp=I2C_2_Master_Read(1);
 12339   0053FE  0E01               	movlw	1
 12340   005400  ECA6  F02A         	call	_I2C_2_Master_Read
 12341   005404  6E0B               	movwf	??_color_read_Blue^0,c
 12342   005406  500B               	movf	??_color_read_Blue^0,w,c
 12343   005408  6E0E               	movwf	color_read_Blue@tmp^0,c
 12344   00540A  6A0F               	clrf	(color_read_Blue@tmp+1)^0,c
 12345                           
 12346                           ;MazeRobot.X/color.c: 70:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
 12347   00540C  0E00               	movlw	0
 12348   00540E  ECA6  F02A         	call	_I2C_2_Master_Read
 12349   005412  6E0B               	movwf	??_color_read_Blue^0,c
 12350   005414  500B               	movf	??_color_read_Blue^0,w,c
 12351   005416  6E0D               	movwf	(??_color_read_Blue+2)^0,c
 12352   005418  6A0C               	clrf	(??_color_read_Blue+1)^0,c
 12353   00541A  500E               	movf	color_read_Blue@tmp^0,w,c
 12354   00541C  100C               	iorwf	(??_color_read_Blue+1)^0,w,c
 12355   00541E  6E0E               	movwf	color_read_Blue@tmp^0,c
 12356   005420  500F               	movf	(color_read_Blue@tmp+1)^0,w,c
 12357   005422  100D               	iorwf	(??_color_read_Blue+2)^0,w,c
 12358   005424  6E0F               	movwf	(color_read_Blue@tmp+1)^0,c
 12359                           
 12360                           ;MazeRobot.X/color.c: 71:  I2C_2_Master_Stop();
 12361   005426  ECFC  F02B         	call	_I2C_2_Master_Stop	;wreg free
 12362   00542A                     
 12363                           ;MazeRobot.X/color.c: 72:  return tmp;
 12364   00542A  C00E  F009         	movff	color_read_Blue@tmp,?_color_read_Blue
 12365   00542E  C00F  F00A         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
 12366   005432  0012               	return		;funcret
 12367   005434                     __end_of_color_read_Blue:
 12368                           	callstack 0
 12369                           
 12370 ;; *************** function _I2C_2_Master_Write *****************
 12371 ;; Defined at:
 12372 ;;		line 45 in file "MazeRobot.X/i2c.c"
 12373 ;; Parameters:    Size  Location     Type
 12374 ;;  data_byte       1    wreg     unsigned char 
 12375 ;; Auto vars:     Size  Location     Type
 12376 ;;  data_byte       1    5[COMRAM] unsigned char 
 12377 ;; Return value:  Size  Location     Type
 12378 ;;                  1    wreg      void 
 12379 ;; Registers used:
 12380 ;;		wreg, status,2, status,0, cstack
 12381 ;; Tracked objects:
 12382 ;;		On entry : 0/0
 12383 ;;		On exit  : 0/0
 12384 ;;		Unchanged: 0/0
 12385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12387 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12389 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12390 ;;Total ram usage:        1 bytes
 12391 ;; Hardware stack levels used: 1
 12392 ;; Hardware stack levels required when called: 3
 12393 ;; This function calls:
 12394 ;;		_I2C_2_Master_Idle
 12395 ;; This function is called by:
 12396 ;;		_color_writetoaddr
 12397 ;;		_color_read_Red
 12398 ;;		_color_read_Green
 12399 ;;		_color_read_Blue
 12400 ;;		_color_read_Clear
 12401 ;; This function uses a non-reentrant model
 12402 ;;
 12403                           
 12404                           	psect	text54
 12405   0057EC                     __ptext54:
 12406                           	callstack 0
 12407   0057EC                     _I2C_2_Master_Write:
 12408                           	callstack 24
 12409                           
 12410                           ;incstack = 0
 12411                           ;I2C_2_Master_Write@data_byte stored from wreg
 12412   0057EC  6E06               	movwf	I2C_2_Master_Write@data_byte^0,c
 12413   0057EE                     
 12414                           ;MazeRobot.X/i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);MazeRobot.X/i2c
      +                          .c: 46: {;MazeRobot.X/i2c.c: 47:   I2C_2_Master_Idle();
 12415   0057EE  EC8A  F02B         	call	_I2C_2_Master_Idle	;wreg free
 12416   0057F2                     
 12417                           ;MazeRobot.X/i2c.c: 48:   SSP2BUF = data_byte;
 12418   0057F2  C006  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
 12419   0057F6  0012               	return		;funcret
 12420   0057F8                     __end_of_I2C_2_Master_Write:
 12421                           	callstack 0
 12422                           
 12423 ;; *************** function _I2C_2_Master_Stop *****************
 12424 ;; Defined at:
 12425 ;;		line 39 in file "MazeRobot.X/i2c.c"
 12426 ;; Parameters:    Size  Location     Type
 12427 ;;		None
 12428 ;; Auto vars:     Size  Location     Type
 12429 ;;		None
 12430 ;; Return value:  Size  Location     Type
 12431 ;;                  1    wreg      void 
 12432 ;; Registers used:
 12433 ;;		wreg, status,2, status,0, cstack
 12434 ;; Tracked objects:
 12435 ;;		On entry : 0/0
 12436 ;;		On exit  : 0/0
 12437 ;;		Unchanged: 0/0
 12438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12442 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12443 ;;Total ram usage:        0 bytes
 12444 ;; Hardware stack levels used: 1
 12445 ;; Hardware stack levels required when called: 3
 12446 ;; This function calls:
 12447 ;;		_I2C_2_Master_Idle
 12448 ;; This function is called by:
 12449 ;;		_color_writetoaddr
 12450 ;;		_color_read_Red
 12451 ;;		_color_read_Green
 12452 ;;		_color_read_Blue
 12453 ;;		_color_read_Clear
 12454 ;; This function uses a non-reentrant model
 12455 ;;
 12456                           
 12457                           	psect	text55
 12458   0057F8                     __ptext55:
 12459                           	callstack 0
 12460   0057F8                     _I2C_2_Master_Stop:
 12461                           	callstack 24
 12462   0057F8                     
 12463                           ;MazeRobot.X/i2c.c: 41:   I2C_2_Master_Idle();
 12464   0057F8  EC8A  F02B         	call	_I2C_2_Master_Idle	;wreg free
 12465   0057FC                     
 12466                           ;MazeRobot.X/i2c.c: 42:   SSP2CON2bits.PEN = 1;
 12467   0057FC  010E               	movlb	14	; () banked
 12468   0057FE  85DA               	bsf	218,2,b	;volatile
 12469   005800                     
 12470                           ; BSR set to: 14
 12471   005800  0012               	return		;funcret
 12472   005802                     __end_of_I2C_2_Master_Stop:
 12473                           	callstack 0
 12474                           
 12475 ;; *************** function _I2C_2_Master_Start *****************
 12476 ;; Defined at:
 12477 ;;		line 27 in file "MazeRobot.X/i2c.c"
 12478 ;; Parameters:    Size  Location     Type
 12479 ;;		None
 12480 ;; Auto vars:     Size  Location     Type
 12481 ;;		None
 12482 ;; Return value:  Size  Location     Type
 12483 ;;                  1    wreg      void 
 12484 ;; Registers used:
 12485 ;;		wreg, status,2, status,0, cstack
 12486 ;; Tracked objects:
 12487 ;;		On entry : 0/0
 12488 ;;		On exit  : 0/0
 12489 ;;		Unchanged: 0/0
 12490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12494 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12495 ;;Total ram usage:        0 bytes
 12496 ;; Hardware stack levels used: 1
 12497 ;; Hardware stack levels required when called: 3
 12498 ;; This function calls:
 12499 ;;		_I2C_2_Master_Idle
 12500 ;; This function is called by:
 12501 ;;		_color_writetoaddr
 12502 ;;		_color_read_Red
 12503 ;;		_color_read_Green
 12504 ;;		_color_read_Blue
 12505 ;;		_color_read_Clear
 12506 ;; This function uses a non-reentrant model
 12507 ;;
 12508                           
 12509                           	psect	text56
 12510   005802                     __ptext56:
 12511                           	callstack 0
 12512   005802                     _I2C_2_Master_Start:
 12513                           	callstack 24
 12514   005802                     
 12515                           ;MazeRobot.X/i2c.c: 29:   I2C_2_Master_Idle();
 12516   005802  EC8A  F02B         	call	_I2C_2_Master_Idle	;wreg free
 12517   005806                     
 12518                           ;MazeRobot.X/i2c.c: 30:   SSP2CON2bits.SEN = 1;
 12519   005806  010E               	movlb	14	; () banked
 12520   005808  81DA               	bsf	218,0,b	;volatile
 12521   00580A                     
 12522                           ; BSR set to: 14
 12523   00580A  0012               	return		;funcret
 12524   00580C                     __end_of_I2C_2_Master_Start:
 12525                           	callstack 0
 12526                           
 12527 ;; *************** function _I2C_2_Master_RepStart *****************
 12528 ;; Defined at:
 12529 ;;		line 33 in file "MazeRobot.X/i2c.c"
 12530 ;; Parameters:    Size  Location     Type
 12531 ;;		None
 12532 ;; Auto vars:     Size  Location     Type
 12533 ;;		None
 12534 ;; Return value:  Size  Location     Type
 12535 ;;                  1    wreg      void 
 12536 ;; Registers used:
 12537 ;;		wreg, status,2, status,0, cstack
 12538 ;; Tracked objects:
 12539 ;;		On entry : 0/0
 12540 ;;		On exit  : 0/0
 12541 ;;		Unchanged: 0/0
 12542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12546 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12547 ;;Total ram usage:        0 bytes
 12548 ;; Hardware stack levels used: 1
 12549 ;; Hardware stack levels required when called: 3
 12550 ;; This function calls:
 12551 ;;		_I2C_2_Master_Idle
 12552 ;; This function is called by:
 12553 ;;		_color_read_Red
 12554 ;;		_color_read_Green
 12555 ;;		_color_read_Blue
 12556 ;;		_color_read_Clear
 12557 ;; This function uses a non-reentrant model
 12558 ;;
 12559                           
 12560                           	psect	text57
 12561   00580C                     __ptext57:
 12562                           	callstack 0
 12563   00580C                     _I2C_2_Master_RepStart:
 12564                           	callstack 24
 12565   00580C                     
 12566                           ;MazeRobot.X/i2c.c: 35:   I2C_2_Master_Idle();
 12567   00580C  EC8A  F02B         	call	_I2C_2_Master_Idle	;wreg free
 12568   005810                     
 12569                           ;MazeRobot.X/i2c.c: 36:   SSP2CON2bits.RSEN = 1;
 12570   005810  010E               	movlb	14	; () banked
 12571   005812  83DA               	bsf	218,1,b	;volatile
 12572   005814                     
 12573                           ; BSR set to: 14
 12574   005814  0012               	return		;funcret
 12575   005816                     __end_of_I2C_2_Master_RepStart:
 12576                           	callstack 0
 12577                           
 12578 ;; *************** function _I2C_2_Master_Read *****************
 12579 ;; Defined at:
 12580 ;;		line 51 in file "MazeRobot.X/i2c.c"
 12581 ;; Parameters:    Size  Location     Type
 12582 ;;  ack             1    wreg     unsigned char 
 12583 ;; Auto vars:     Size  Location     Type
 12584 ;;  ack             1    6[COMRAM] unsigned char 
 12585 ;;  tmp             1    7[COMRAM] unsigned char 
 12586 ;; Return value:  Size  Location     Type
 12587 ;;                  1    wreg      unsigned char 
 12588 ;; Registers used:
 12589 ;;		wreg, status,2, status,0, cstack
 12590 ;; Tracked objects:
 12591 ;;		On entry : 0/0
 12592 ;;		On exit  : 0/0
 12593 ;;		Unchanged: 0/0
 12594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12596 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12597 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12598 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12599 ;;Total ram usage:        3 bytes
 12600 ;; Hardware stack levels used: 1
 12601 ;; Hardware stack levels required when called: 3
 12602 ;; This function calls:
 12603 ;;		_I2C_2_Master_Idle
 12604 ;; This function is called by:
 12605 ;;		_color_read_Red
 12606 ;;		_color_read_Green
 12607 ;;		_color_read_Blue
 12608 ;;		_color_read_Clear
 12609 ;; This function uses a non-reentrant model
 12610 ;;
 12611                           
 12612                           	psect	text58
 12613   00554C                     __ptext58:
 12614                           	callstack 0
 12615   00554C                     _I2C_2_Master_Read:
 12616                           	callstack 24
 12617                           
 12618                           ; BSR set to: 14
 12619                           ;incstack = 0
 12620                           ;I2C_2_Master_Read@ack stored from wreg
 12621   00554C  6E07               	movwf	I2C_2_Master_Read@ack^0,c
 12622   00554E                     
 12623                           ;MazeRobot.X/i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);MazeRobot.X/i
      +                          2c.c: 52: {;MazeRobot.X/i2c.c: 53:   unsigned char tmp;;MazeRobot.X/i2c.c: 54:   I2C_2_M
      +                          aster_Idle();
 12624   00554E  EC8A  F02B         	call	_I2C_2_Master_Idle	;wreg free
 12625   005552                     
 12626                           ;MazeRobot.X/i2c.c: 55:   SSP2CON2bits.RCEN = 1;
 12627   005552  010E               	movlb	14	; () banked
 12628   005554  87DA               	bsf	218,3,b	;volatile
 12629                           
 12630                           ;MazeRobot.X/i2c.c: 56:   I2C_2_Master_Idle();
 12631   005556  EC8A  F02B         	call	_I2C_2_Master_Idle	;wreg free
 12632   00555A                     
 12633                           ;MazeRobot.X/i2c.c: 57:   tmp = SSP2BUF;
 12634   00555A  CED5 F008          	movff	3797,I2C_2_Master_Read@tmp	;volatile
 12635                           
 12636                           ;MazeRobot.X/i2c.c: 58:   I2C_2_Master_Idle();
 12637   00555E  EC8A  F02B         	call	_I2C_2_Master_Idle	;wreg free
 12638   005562                     
 12639                           ;MazeRobot.X/i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
 12640   005562  5007               	movf	I2C_2_Master_Read@ack^0,w,c
 12641   005564  B4D8               	btfsc	status,2,c
 12642   005566  EFB7  F02A         	goto	u4411
 12643   00556A  EFBB  F02A         	goto	u4410
 12644   00556E                     u4411:
 12645   00556E  6A06               	clrf	??_I2C_2_Master_Read^0,c
 12646   005570  2A06               	incf	??_I2C_2_Master_Read^0,f,c
 12647   005572  EFBC  F02A         	goto	u4428
 12648   005576                     u4410:
 12649   005576  6A06               	clrf	??_I2C_2_Master_Read^0,c
 12650   005578                     u4428:
 12651   005578  3A06               	swapf	??_I2C_2_Master_Read^0,f,c
 12652   00557A  4606               	rlncf	??_I2C_2_Master_Read^0,f,c
 12653   00557C  010E               	movlb	14	; () banked
 12654   00557E  51DA               	movf	218,w,b	;volatile
 12655   005580  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
 12656   005582  0BDF               	andlw	-33
 12657   005584  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
 12658   005586  6FDA               	movwf	218,b	;volatile
 12659   005588                     
 12660                           ; BSR set to: 14
 12661                           ;MazeRobot.X/i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
 12662   005588  89DA               	bsf	218,4,b	;volatile
 12663   00558A                     
 12664                           ; BSR set to: 14
 12665                           ;MazeRobot.X/i2c.c: 61:   return tmp;
 12666   00558A  5008               	movf	I2C_2_Master_Read@tmp^0,w,c
 12667   00558C                     
 12668                           ; BSR set to: 14
 12669   00558C  0012               	return		;funcret
 12670   00558E                     __end_of_I2C_2_Master_Read:
 12671                           	callstack 0
 12672                           
 12673 ;; *************** function _I2C_2_Master_Idle *****************
 12674 ;; Defined at:
 12675 ;;		line 22 in file "MazeRobot.X/i2c.c"
 12676 ;; Parameters:    Size  Location     Type
 12677 ;;		None
 12678 ;; Auto vars:     Size  Location     Type
 12679 ;;		None
 12680 ;; Return value:  Size  Location     Type
 12681 ;;                  1    wreg      void 
 12682 ;; Registers used:
 12683 ;;		wreg, status,2, status,0
 12684 ;; Tracked objects:
 12685 ;;		On entry : 0/0
 12686 ;;		On exit  : 0/0
 12687 ;;		Unchanged: 0/0
 12688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12690 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12691 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12692 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12693 ;;Total ram usage:        1 bytes
 12694 ;; Hardware stack levels used: 1
 12695 ;; Hardware stack levels required when called: 2
 12696 ;; This function calls:
 12697 ;;		Nothing
 12698 ;; This function is called by:
 12699 ;;		_I2C_2_Master_Start
 12700 ;;		_I2C_2_Master_RepStart
 12701 ;;		_I2C_2_Master_Stop
 12702 ;;		_I2C_2_Master_Write
 12703 ;;		_I2C_2_Master_Read
 12704 ;; This function uses a non-reentrant model
 12705 ;;
 12706                           
 12707                           	psect	text59
 12708   005714                     __ptext59:
 12709                           	callstack 0
 12710   005714                     _I2C_2_Master_Idle:
 12711                           	callstack 24
 12712   005714                     l264:
 12713   005714  010E               	movlb	14	; () banked
 12714   005716  B5D8               	btfsc	216,2,b	;volatile
 12715   005718  EF90  F02B         	goto	u3451
 12716   00571C  EF92  F02B         	goto	u3450
 12717   005720                     u3451:
 12718   005720  EF8A  F02B         	goto	l264
 12719   005724                     u3450:
 12720   005724                     
 12721                           ; BSR set to: 14
 12722   005724  CEDA F005          	movff	3802,??_I2C_2_Master_Idle	;volatile
 12723   005728  0E1F               	movlw	31
 12724   00572A  1605               	andwf	??_I2C_2_Master_Idle^0,f,c
 12725   00572C  A4D8               	btfss	status,2,c
 12726   00572E  EF9B  F02B         	goto	u3461
 12727   005732  EF9D  F02B         	goto	u3460
 12728   005736                     u3461:
 12729   005736  EF8A  F02B         	goto	l264
 12730   00573A                     u3460:
 12731   00573A                     
 12732                           ; BSR set to: 14
 12733   00573A  0012               	return		;funcret
 12734   00573C                     __end_of_I2C_2_Master_Idle:
 12735                           	callstack 0
 12736                           
 12737 ;; *************** function _TxBufferedString *****************
 12738 ;; Defined at:
 12739 ;;		line 88 in file "MazeRobot.X/serial.c"
 12740 ;; Parameters:    Size  Location     Type
 12741 ;;  string          2    5[COMRAM] PTR unsigned char 
 12742 ;;		 -> main@string4(20), 
 12743 ;; Auto vars:     Size  Location     Type
 12744 ;;		None
 12745 ;; Return value:  Size  Location     Type
 12746 ;;                  1    wreg      void 
 12747 ;; Registers used:
 12748 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12749 ;; Tracked objects:
 12750 ;;		On entry : 0/0
 12751 ;;		On exit  : 0/0
 12752 ;;		Unchanged: 0/0
 12753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12754 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12757 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12758 ;;Total ram usage:        2 bytes
 12759 ;; Hardware stack levels used: 1
 12760 ;; Hardware stack levels required when called: 3
 12761 ;; This function calls:
 12762 ;;		_putCharToTxBuf
 12763 ;; This function is called by:
 12764 ;;		_main
 12765 ;; This function uses a non-reentrant model
 12766 ;;
 12767                           
 12768                           	psect	text60
 12769   00563A                     __ptext60:
 12770                           	callstack 0
 12771   00563A                     _TxBufferedString:
 12772                           	callstack 27
 12773   00563A                     
 12774                           ;MazeRobot.X/serial.c: 90:     while(*string != 0){
 12775   00563A  EF28  F02B         	goto	l5229
 12776   00563E                     l5225:
 12777                           
 12778                           ;MazeRobot.X/serial.c: 91:   putCharToTxBuf(*string++);}
 12779   00563E  C006  FFD9         	movff	TxBufferedString@string,fsr2l
 12780   005642  C007  FFDA         	movff	TxBufferedString@string+1,fsr2h
 12781   005646  50DF               	movf	indf2,w,c
 12782   005648  EC60  F02B         	call	_putCharToTxBuf
 12783   00564C  4A06               	infsnz	TxBufferedString@string^0,f,c
 12784   00564E  2A07               	incf	(TxBufferedString@string+1)^0,f,c
 12785   005650                     l5229:
 12786                           
 12787                           ;MazeRobot.X/serial.c: 90:     while(*string != 0){
 12788   005650  C006  FFD9         	movff	TxBufferedString@string,fsr2l
 12789   005654  C007  FFDA         	movff	TxBufferedString@string+1,fsr2h
 12790   005658  50DF               	movf	indf2,w,c
 12791   00565A  A4D8               	btfss	status,2,c
 12792   00565C  EF32  F02B         	goto	u5671
 12793   005660  EF34  F02B         	goto	u5670
 12794   005664                     u5671:
 12795   005664  EF1F  F02B         	goto	l5225
 12796   005668                     u5670:
 12797   005668  0012               	return		;funcret
 12798   00566A                     __end_of_TxBufferedString:
 12799                           	callstack 0
 12800                           
 12801 ;; *************** function _putCharToTxBuf *****************
 12802 ;; Defined at:
 12803 ;;		line 75 in file "MazeRobot.X/serial.c"
 12804 ;; Parameters:    Size  Location     Type
 12805 ;;  byte            1    wreg     unsigned char 
 12806 ;; Auto vars:     Size  Location     Type
 12807 ;;  byte            1    4[COMRAM] unsigned char 
 12808 ;; Return value:  Size  Location     Type
 12809 ;;                  1    wreg      void 
 12810 ;; Registers used:
 12811 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12812 ;; Tracked objects:
 12813 ;;		On entry : 0/0
 12814 ;;		On exit  : 0/0
 12815 ;;		Unchanged: 0/0
 12816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12818 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12820 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12821 ;;Total ram usage:        1 bytes
 12822 ;; Hardware stack levels used: 1
 12823 ;; Hardware stack levels required when called: 2
 12824 ;; This function calls:
 12825 ;;		Nothing
 12826 ;; This function is called by:
 12827 ;;		_TxBufferedString
 12828 ;; This function uses a non-reentrant model
 12829 ;;
 12830                           
 12831                           	psect	text61
 12832   0056C0                     __ptext61:
 12833                           	callstack 0
 12834   0056C0                     _putCharToTxBuf:
 12835                           	callstack 27
 12836                           
 12837                           ;incstack = 0
 12838                           ;putCharToTxBuf@byte stored from wreg
 12839   0056C0  6E05               	movwf	putCharToTxBuf@byte^0,c
 12840   0056C2                     
 12841                           ;MazeRobot.X/serial.c: 76:     if (TxBufWriteCnt>=60) {TxBufWriteCnt=0;}
 12842   0056C2  0E3B               	movlw	59
 12843   0056C4  6458               	cpfsgt	_TxBufWriteCnt^0,c	;volatile
 12844   0056C6  EF67  F02B         	goto	u5071
 12845   0056CA  EF69  F02B         	goto	u5070
 12846   0056CE                     u5071:
 12847   0056CE  EF6B  F02B         	goto	l4909
 12848   0056D2                     u5070:
 12849   0056D2  0E00               	movlw	0
 12850   0056D4  6E58               	movwf	_TxBufWriteCnt^0,c	;volatile
 12851   0056D6                     l4909:
 12852                           
 12853                           ;MazeRobot.X/serial.c: 77:     EUSART4TXbuf[TxBufWriteCnt++]=byte;
 12854   0056D6  0E00               	movlw	low _EUSART4TXbuf
 12855   0056D8  2458               	addwf	_TxBufWriteCnt^0,w,c	;volatile
 12856   0056DA  6ED9               	movwf	fsr2l,c
 12857   0056DC  6ADA               	clrf	fsr2h,c
 12858   0056DE  0E01               	movlw	high _EUSART4TXbuf
 12859   0056E0  22DA               	addwfc	fsr2h,f,c
 12860   0056E2  C005  FFDF         	movff	putCharToTxBuf@byte,indf2
 12861   0056E6  2A58               	incf	_TxBufWriteCnt^0,f,c	;volatile
 12862   0056E8  0012               	return		;funcret
 12863   0056EA                     __end_of_putCharToTxBuf:
 12864                           	callstack 0
 12865                           
 12866 ;; *************** function _DCmotorsInit *****************
 12867 ;; Defined at:
 12868 ;;		line 73 in file "MazeRobot.X/dc_motor.c"
 12869 ;; Parameters:    Size  Location     Type
 12870 ;;  mL              2    4[COMRAM] PTR struct DC_motor
 12871 ;;		 -> main@motorLeft(9), 
 12872 ;;  mR              2    6[COMRAM] PTR struct DC_motor
 12873 ;;		 -> main@motorRight(9), 
 12874 ;; Auto vars:     Size  Location     Type
 12875 ;;		None
 12876 ;; Return value:  Size  Location     Type
 12877 ;;                  1    wreg      void 
 12878 ;; Registers used:
 12879 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12880 ;; Tracked objects:
 12881 ;;		On entry : 0/0
 12882 ;;		On exit  : 0/0
 12883 ;;		Unchanged: 0/0
 12884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12885 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12886 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12887 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12888 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12889 ;;Total ram usage:        4 bytes
 12890 ;; Hardware stack levels used: 1
 12891 ;; Hardware stack levels required when called: 2
 12892 ;; This function calls:
 12893 ;;		Nothing
 12894 ;; This function is called by:
 12895 ;;		_main
 12896 ;; This function uses a non-reentrant model
 12897 ;;
 12898                           
 12899                           	psect	text62
 12900   004BC2                     __ptext62:
 12901                           	callstack 0
 12902   004BC2                     _DCmotorsInit:
 12903                           	callstack 28
 12904   004BC2                     
 12905                           ;MazeRobot.X/dc_motor.c: 75:     mL->power = 0;
 12906   004BC2  C005  FFD9         	movff	DCmotorsInit@mL,fsr2l
 12907   004BC6  C006  FFDA         	movff	DCmotorsInit@mL+1,fsr2h
 12908   004BCA  0E00               	movlw	0
 12909   004BCC  6EDF               	movwf	indf2,c
 12910   004BCE                     
 12911                           ;MazeRobot.X/dc_motor.c: 76:     mL->direction = 1;
 12912   004BCE  EE20 F001          	lfsr	2,1
 12913   004BD2  5005               	movf	DCmotorsInit@mL^0,w,c
 12914   004BD4  26D9               	addwf	fsr2l,f,c
 12915   004BD6  5006               	movf	(DCmotorsInit@mL+1)^0,w,c
 12916   004BD8  22DA               	addwfc	fsr2h,f,c
 12917   004BDA  0E01               	movlw	1
 12918   004BDC  6EDF               	movwf	indf2,c
 12919   004BDE                     
 12920                           ;MazeRobot.X/dc_motor.c: 77:     mL->brakemode = 1;
 12921   004BDE  EE20 F002          	lfsr	2,2
 12922   004BE2  5005               	movf	DCmotorsInit@mL^0,w,c
 12923   004BE4  26D9               	addwf	fsr2l,f,c
 12924   004BE6  5006               	movf	(DCmotorsInit@mL+1)^0,w,c
 12925   004BE8  22DA               	addwfc	fsr2h,f,c
 12926   004BEA  0E01               	movlw	1
 12927   004BEC  6EDF               	movwf	indf2,c
 12928   004BEE                     
 12929                           ;MazeRobot.X/dc_motor.c: 78:     mL->posDutyHighByte = (unsigned char *)(&CCPR1H);
 12930   004BEE  EE20 F005          	lfsr	2,5
 12931   004BF2  5005               	movf	DCmotorsInit@mL^0,w,c
 12932   004BF4  26D9               	addwf	fsr2l,f,c
 12933   004BF6  5006               	movf	(DCmotorsInit@mL+1)^0,w,c
 12934   004BF8  22DA               	addwfc	fsr2h,f,c
 12935   004BFA  0EAA               	movlw	170
 12936   004BFC  6EDE               	movwf	postinc2,c
 12937   004BFE  0E0F               	movlw	15
 12938   004C00  6EDD               	movwf	postdec2,c
 12939   004C02                     
 12940                           ;MazeRobot.X/dc_motor.c: 79:     mL->negDutyHighByte = (unsigned char *)(&CCPR2H);
 12941   004C02  EE20 F007          	lfsr	2,7
 12942   004C06  5005               	movf	DCmotorsInit@mL^0,w,c
 12943   004C08  26D9               	addwf	fsr2l,f,c
 12944   004C0A  5006               	movf	(DCmotorsInit@mL+1)^0,w,c
 12945   004C0C  22DA               	addwfc	fsr2h,f,c
 12946   004C0E  0EA6               	movlw	166
 12947   004C10  6EDE               	movwf	postinc2,c
 12948   004C12  0E0F               	movlw	15
 12949   004C14  6EDD               	movwf	postdec2,c
 12950   004C16                     
 12951                           ;MazeRobot.X/dc_motor.c: 80:     mL->PWMperiod = 199 ;
 12952   004C16  EE20 F003          	lfsr	2,3
 12953   004C1A  5005               	movf	DCmotorsInit@mL^0,w,c
 12954   004C1C  26D9               	addwf	fsr2l,f,c
 12955   004C1E  5006               	movf	(DCmotorsInit@mL+1)^0,w,c
 12956   004C20  22DA               	addwfc	fsr2h,f,c
 12957   004C22  0EC7               	movlw	199
 12958   004C24  6EDE               	movwf	postinc2,c
 12959   004C26  0E00               	movlw	0
 12960   004C28  6EDD               	movwf	postdec2,c
 12961   004C2A                     
 12962                           ;MazeRobot.X/dc_motor.c: 82:     mR->power = 0;
 12963   004C2A  C007  FFD9         	movff	DCmotorsInit@mR,fsr2l
 12964   004C2E  C008  FFDA         	movff	DCmotorsInit@mR+1,fsr2h
 12965   004C32  0E00               	movlw	0
 12966   004C34  6EDF               	movwf	indf2,c
 12967                           
 12968                           ;MazeRobot.X/dc_motor.c: 83:     mR->direction = 1;
 12969   004C36  EE20 F001          	lfsr	2,1
 12970   004C3A  5007               	movf	DCmotorsInit@mR^0,w,c
 12971   004C3C  26D9               	addwf	fsr2l,f,c
 12972   004C3E  5008               	movf	(DCmotorsInit@mR+1)^0,w,c
 12973   004C40  22DA               	addwfc	fsr2h,f,c
 12974   004C42  0E01               	movlw	1
 12975   004C44  6EDF               	movwf	indf2,c
 12976                           
 12977                           ;MazeRobot.X/dc_motor.c: 84:     mR->brakemode = 1;
 12978   004C46  EE20 F002          	lfsr	2,2
 12979   004C4A  5007               	movf	DCmotorsInit@mR^0,w,c
 12980   004C4C  26D9               	addwf	fsr2l,f,c
 12981   004C4E  5008               	movf	(DCmotorsInit@mR+1)^0,w,c
 12982   004C50  22DA               	addwfc	fsr2h,f,c
 12983   004C52  0E01               	movlw	1
 12984   004C54  6EDF               	movwf	indf2,c
 12985                           
 12986                           ;MazeRobot.X/dc_motor.c: 85:     mR->posDutyHighByte = (unsigned char *)(&CCPR3H);
 12987   004C56  EE20 F005          	lfsr	2,5
 12988   004C5A  5007               	movf	DCmotorsInit@mR^0,w,c
 12989   004C5C  26D9               	addwf	fsr2l,f,c
 12990   004C5E  5008               	movf	(DCmotorsInit@mR+1)^0,w,c
 12991   004C60  22DA               	addwfc	fsr2h,f,c
 12992   004C62  0E25               	movlw	37
 12993   004C64  6EDE               	movwf	postinc2,c
 12994   004C66  0E0F               	movlw	15
 12995   004C68  6EDD               	movwf	postdec2,c
 12996                           
 12997                           ;MazeRobot.X/dc_motor.c: 86:     mR->negDutyHighByte = (unsigned char *)(&CCPR4H);
 12998   004C6A  EE20 F007          	lfsr	2,7
 12999   004C6E  5007               	movf	DCmotorsInit@mR^0,w,c
 13000   004C70  26D9               	addwf	fsr2l,f,c
 13001   004C72  5008               	movf	(DCmotorsInit@mR+1)^0,w,c
 13002   004C74  22DA               	addwfc	fsr2h,f,c
 13003   004C76  0E21               	movlw	33
 13004   004C78  6EDE               	movwf	postinc2,c
 13005   004C7A  0E0F               	movlw	15
 13006   004C7C  6EDD               	movwf	postdec2,c
 13007                           
 13008                           ;MazeRobot.X/dc_motor.c: 87:     mR->PWMperiod = 199 ;
 13009   004C7E  EE20 F003          	lfsr	2,3
 13010   004C82  5007               	movf	DCmotorsInit@mR^0,w,c
 13011   004C84  26D9               	addwf	fsr2l,f,c
 13012   004C86  5008               	movf	(DCmotorsInit@mR+1)^0,w,c
 13013   004C88  22DA               	addwfc	fsr2h,f,c
 13014   004C8A  0EC7               	movlw	199
 13015   004C8C  6EDE               	movwf	postinc2,c
 13016   004C8E  0E00               	movlw	0
 13017   004C90  6EDD               	movwf	postdec2,c
 13018   004C92  0012               	return		;funcret
 13019   004C94                     __end_of_DCmotorsInit:
 13020                           	callstack 0
 13021                           
 13022 ;; *************** function _HighISR *****************
 13023 ;; Defined at:
 13024 ;;		line 122 in file "MazeRobot.X/serial.c"
 13025 ;; Parameters:    Size  Location     Type
 13026 ;;		None
 13027 ;; Auto vars:     Size  Location     Type
 13028 ;;		None
 13029 ;; Return value:  Size  Location     Type
 13030 ;;                  1    wreg      void 
 13031 ;; Registers used:
 13032 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13033 ;; Tracked objects:
 13034 ;;		On entry : 0/0
 13035 ;;		On exit  : 0/0
 13036 ;;		Unchanged: 0/0
 13037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13040 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13041 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13042 ;;Total ram usage:        2 bytes
 13043 ;; Hardware stack levels used: 1
 13044 ;; Hardware stack levels required when called: 1
 13045 ;; This function calls:
 13046 ;;		_getCharFromTxBuf
 13047 ;;		_putCharToRxBuf
 13048 ;;		i2_isDataInTxBuf
 13049 ;; This function is called by:
 13050 ;;		Interrupt level 2
 13051 ;; This function uses a non-reentrant model
 13052 ;;
 13053                           
 13054                           	psect	intcode
 13055   000008                     __pintcode:
 13056                           	callstack 0
 13057   000008                     _HighISR:
 13058                           	callstack 21
 13059                           
 13060                           ;incstack = 0
 13061   000008  825B               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
 13062   00000A  CFD9 F003          	movff	fsr2l,??_HighISR
 13063   00000E  CFDA F004          	movff	fsr2h,??_HighISR+1
 13064   000012                     
 13065                           ;MazeRobot.X/serial.c: 124:     if(PIR4bits.RC4IF == 1){
 13066   000012  010E               	movlb	14	; () banked
 13067   000014  A737               	btfss	55,3,b	;volatile
 13068   000016  EF0F  F000         	goto	i2u583_41
 13069   00001A  EF11  F000         	goto	i2u583_40
 13070   00001E                     i2u583_41:
 13071   00001E  EF14  F000         	goto	i2l5417
 13072   000022                     i2u583_40:
 13073   000022                     
 13074                           ; BSR set to: 14
 13075                           ;MazeRobot.X/serial.c: 125:         putCharToRxBuf(RC4REG);
 13076   000022  51E3               	movf	227,w,b	;volatile
 13077   000024  EC75  F02B         	call	_putCharToRxBuf
 13078   000028                     i2l5417:
 13079                           
 13080                           ;MazeRobot.X/serial.c: 128:     if(PIR4bits.TX4IF == 1){
 13081   000028  010E               	movlb	14	; () banked
 13082   00002A  A537               	btfss	55,2,b	;volatile
 13083   00002C  EF1A  F000         	goto	i2u584_41
 13084   000030  EF1C  F000         	goto	i2u584_40
 13085   000034                     i2u584_41:
 13086   000034  EF2E  F000         	goto	i2l477
 13087   000038                     i2u584_40:
 13088   000038                     
 13089                           ; BSR set to: 14
 13090                           ;MazeRobot.X/serial.c: 129:         if(isDataInTxBuf()){
 13091   000038  ECEA  F02B         	call	i2_isDataInTxBuf	;wreg free
 13092   00003C  0900               	iorlw	0
 13093   00003E  B4D8               	btfsc	status,2,c
 13094   000040  EF24  F000         	goto	i2u585_41
 13095   000044  EF26  F000         	goto	i2u585_40
 13096   000048                     i2u585_41:
 13097   000048  EF2C  F000         	goto	i2l475
 13098   00004C                     i2u585_40:
 13099   00004C                     
 13100                           ;MazeRobot.X/serial.c: 130:             TX4REG = getCharFromTxBuf();
 13101   00004C  EC35  F02B         	call	_getCharFromTxBuf	;wreg free
 13102   000050  010E               	movlb	14	; () banked
 13103   000052  6FE4               	movwf	228,b	;volatile
 13104                           
 13105                           ;MazeRobot.X/serial.c: 132:         }
 13106   000054  EF2E  F000         	goto	i2l477
 13107   000058                     i2l475:
 13108                           
 13109                           ;MazeRobot.X/serial.c: 134:     PIE4bits.TX4IE = 0;
 13110   000058  010E               	movlb	14	; () banked
 13111   00005A  952D               	bcf	45,2,b	;volatile
 13112   00005C                     i2l477:
 13113                           
 13114                           ; BSR set to: 14
 13115   00005C  C004  FFDA         	movff	??_HighISR+1,fsr2h
 13116   000060  C003  FFD9         	movff	??_HighISR,fsr2l
 13117   000064  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
 13118   000066  0011               	retfie		f
 13119   000068                     __end_of_HighISR:
 13120                           	callstack 0
 13121                           
 13122 ;; *************** function i2_isDataInTxBuf *****************
 13123 ;; Defined at:
 13124 ;;		line 83 in file "MazeRobot.X/serial.c"
 13125 ;; Parameters:    Size  Location     Type
 13126 ;;		None
 13127 ;; Auto vars:     Size  Location     Type
 13128 ;;		None
 13129 ;; Return value:  Size  Location     Type
 13130 ;;                  1    wreg      unsigned char 
 13131 ;; Registers used:
 13132 ;;		wreg, status,2, status,0
 13133 ;; Tracked objects:
 13134 ;;		On entry : 0/0
 13135 ;;		On exit  : 0/0
 13136 ;;		Unchanged: 0/0
 13137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13139 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13141 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13142 ;;Total ram usage:        0 bytes
 13143 ;; Hardware stack levels used: 1
 13144 ;; This function calls:
 13145 ;;		Nothing
 13146 ;; This function is called by:
 13147 ;;		_HighISR
 13148 ;; This function uses a non-reentrant model
 13149 ;;
 13150                           
 13151                           	psect	text64
 13152   0057D4                     __ptext64:
 13153                           	callstack 0
 13154   0057D4                     i2_isDataInTxBuf:
 13155                           	callstack 21
 13156   0057D4                     
 13157                           ;MazeRobot.X/serial.c: 84:     return (TxBufWriteCnt!=TxBufReadCnt);
 13158   0057D4  5057               	movf	_TxBufReadCnt^0,w,c	;volatile
 13159   0057D6  1858               	xorwf	_TxBufWriteCnt^0,w,c	;volatile
 13160   0057D8  A4D8               	btfss	status,2,c
 13161   0057DA  EFF1  F02B         	goto	i2u277_41
 13162   0057DE  EFF4  F02B         	goto	i2u277_40
 13163   0057E2                     i2u277_41:
 13164   0057E2  0E01               	movlw	1
 13165   0057E4  EFF5  F02B         	goto	i2u278_40
 13166   0057E8                     i2u277_40:
 13167   0057E8  0E00               	movlw	0
 13168   0057EA                     i2u278_40:
 13169   0057EA  0012               	return		;funcret
 13170   0057EC                     __end_ofi2_isDataInTxBuf:
 13171                           	callstack 0
 13172                           
 13173 ;; *************** function _putCharToRxBuf *****************
 13174 ;; Defined at:
 13175 ;;		line 54 in file "MazeRobot.X/serial.c"
 13176 ;; Parameters:    Size  Location     Type
 13177 ;;  byte            1    wreg     unsigned char 
 13178 ;; Auto vars:     Size  Location     Type
 13179 ;;  byte            1    0[COMRAM] unsigned char 
 13180 ;; Return value:  Size  Location     Type
 13181 ;;                  1    wreg      void 
 13182 ;; Registers used:
 13183 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13184 ;; Tracked objects:
 13185 ;;		On entry : 0/0
 13186 ;;		On exit  : 0/0
 13187 ;;		Unchanged: 0/0
 13188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13190 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13192 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13193 ;;Total ram usage:        1 bytes
 13194 ;; Hardware stack levels used: 1
 13195 ;; This function calls:
 13196 ;;		Nothing
 13197 ;; This function is called by:
 13198 ;;		_HighISR
 13199 ;; This function uses a non-reentrant model
 13200 ;;
 13201                           
 13202                           	psect	text65
 13203   0056EA                     __ptext65:
 13204                           	callstack 0
 13205   0056EA                     _putCharToRxBuf:
 13206                           	callstack 21
 13207                           
 13208                           ;incstack = 0
 13209                           ;putCharToRxBuf@byte stored from wreg
 13210   0056EA  6E01               	movwf	putCharToRxBuf@byte^0,c
 13211   0056EC                     
 13212                           ;MazeRobot.X/serial.c: 55:     if (RxBufWriteCnt>=20) {RxBufWriteCnt=0;}
 13213   0056EC  0E13               	movlw	19
 13214   0056EE  645A               	cpfsgt	_RxBufWriteCnt^0,c	;volatile
 13215   0056F0  EF7C  F02B         	goto	i2u569_41
 13216   0056F4  EF7E  F02B         	goto	i2u569_40
 13217   0056F8                     i2u569_41:
 13218   0056F8  EF80  F02B         	goto	i2l5239
 13219   0056FC                     i2u569_40:
 13220   0056FC  0E00               	movlw	0
 13221   0056FE  6E5A               	movwf	_RxBufWriteCnt^0,c	;volatile
 13222   005700                     i2l5239:
 13223                           
 13224                           ;MazeRobot.X/serial.c: 56:     EUSART4RXbuf[RxBufWriteCnt++]=byte;
 13225   005700  0ED7               	movlw	low _EUSART4RXbuf
 13226   005702  245A               	addwf	_RxBufWriteCnt^0,w,c	;volatile
 13227   005704  6ED9               	movwf	fsr2l,c
 13228   005706  6ADA               	clrf	fsr2h,c
 13229   005708  0E00               	movlw	high _EUSART4RXbuf
 13230   00570A  22DA               	addwfc	fsr2h,f,c
 13231   00570C  C001  FFDF         	movff	putCharToRxBuf@byte,indf2
 13232   005710  2A5A               	incf	_RxBufWriteCnt^0,f,c	;volatile
 13233   005712  0012               	return		;funcret
 13234   005714                     __end_of_putCharToRxBuf:
 13235                           	callstack 0
 13236                           
 13237 ;; *************** function _getCharFromTxBuf *****************
 13238 ;; Defined at:
 13239 ;;		line 69 in file "MazeRobot.X/serial.c"
 13240 ;; Parameters:    Size  Location     Type
 13241 ;;		None
 13242 ;; Auto vars:     Size  Location     Type
 13243 ;;		None
 13244 ;; Return value:  Size  Location     Type
 13245 ;;                  1    wreg      unsigned char 
 13246 ;; Registers used:
 13247 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13248 ;; Tracked objects:
 13249 ;;		On entry : 0/0
 13250 ;;		On exit  : 0/0
 13251 ;;		Unchanged: 0/0
 13252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13254 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13255 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13256 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13257 ;;Total ram usage:        2 bytes
 13258 ;; Hardware stack levels used: 1
 13259 ;; This function calls:
 13260 ;;		Nothing
 13261 ;; This function is called by:
 13262 ;;		_HighISR
 13263 ;; This function uses a non-reentrant model
 13264 ;;
 13265                           
 13266                           	psect	text66
 13267   00566A                     __ptext66:
 13268                           	callstack 0
 13269   00566A                     _getCharFromTxBuf:
 13270                           	callstack 21
 13271   00566A                     
 13272                           ;MazeRobot.X/serial.c: 70:     if (TxBufReadCnt>=60) {TxBufReadCnt=0;}
 13273   00566A  0E3B               	movlw	59
 13274   00566C  6457               	cpfsgt	_TxBufReadCnt^0,c	;volatile
 13275   00566E  EF3B  F02B         	goto	i2u570_41
 13276   005672  EF3D  F02B         	goto	i2u570_40
 13277   005676                     i2u570_41:
 13278   005676  EF3F  F02B         	goto	i2l5247
 13279   00567A                     i2u570_40:
 13280   00567A  0E00               	movlw	0
 13281   00567C  6E57               	movwf	_TxBufReadCnt^0,c	;volatile
 13282   00567E                     i2l5247:
 13283                           
 13284                           ;MazeRobot.X/serial.c: 71:     return EUSART4TXbuf[TxBufReadCnt++];
 13285   00567E  2A57               	incf	_TxBufReadCnt^0,f,c	;volatile
 13286   005680  0457               	decf	_TxBufReadCnt^0,w,c	;volatile
 13287   005682  6E01               	movwf	??_getCharFromTxBuf^0,c
 13288   005684  6A02               	clrf	(??_getCharFromTxBuf+1)^0,c
 13289   005686  0E00               	movlw	low _EUSART4TXbuf
 13290   005688  2401               	addwf	??_getCharFromTxBuf^0,w,c
 13291   00568A  6ED9               	movwf	fsr2l,c
 13292   00568C  0E01               	movlw	high _EUSART4TXbuf
 13293   00568E  2002               	addwfc	(??_getCharFromTxBuf+1)^0,w,c
 13294   005690  6EDA               	movwf	fsr2h,c
 13295   005692  50DF               	movf	indf2,w,c
 13296   005694  0012               	return		;funcret
 13297   005696                     __end_of_getCharFromTxBuf:
 13298                           	callstack 0
 13299                           
 13300                           	psect	rparam
 13301   000000                     
 13302                           	psect	temp
 13303   00005B                     btemp:
 13304                           	callstack 0
 13305   00005B                     	ds	1
 13306   000000                     int$flags	set	btemp
 13307   000000                     wtemp8	set	btemp+1
 13308   000000                     ttemp5	set	btemp+1
 13309   000000                     ttemp6	set	btemp+4
 13310   000000                     ttemp7	set	btemp+8
 13311                           
 13312                           	psect	idloc
 13313                           
 13314                           ;Config register IDLOC0 @ 0x200000
 13315                           ;	unspecified, using default values
 13316   200000                     	org	2097152
 13317   200000  0FFF               	dw	4095
 13318                           
 13319                           ;Config register IDLOC1 @ 0x200002
 13320                           ;	unspecified, using default values
 13321   200002                     	org	2097154
 13322   200002  0FFF               	dw	4095
 13323                           
 13324                           ;Config register IDLOC2 @ 0x200004
 13325                           ;	unspecified, using default values
 13326   200004                     	org	2097156
 13327   200004  0FFF               	dw	4095
 13328                           
 13329                           ;Config register IDLOC3 @ 0x200006
 13330                           ;	unspecified, using default values
 13331   200006                     	org	2097158
 13332   200006  0FFF               	dw	4095
 13333                           
 13334                           ;Config register IDLOC4 @ 0x200008
 13335                           ;	unspecified, using default values
 13336   200008                     	org	2097160
 13337   200008  0FFF               	dw	4095
 13338                           
 13339                           ;Config register IDLOC5 @ 0x20000A
 13340                           ;	unspecified, using default values
 13341   20000A                     	org	2097162
 13342   20000A  0FFF               	dw	4095
 13343                           
 13344                           ;Config register IDLOC6 @ 0x20000C
 13345                           ;	unspecified, using default values
 13346   20000C                     	org	2097164
 13347   20000C  0FFF               	dw	4095
 13348                           
 13349                           ;Config register IDLOC7 @ 0x20000E
 13350                           ;	unspecified, using default values
 13351   20000E                     	org	2097166
 13352   20000E  0FFF               	dw	4095
 13353                           
 13354                           	psect	config
 13355                           
 13356                           ;Config register CONFIG1L @ 0x300000
 13357                           ;	External Oscillator mode Selection bits
 13358                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
 13359                           ;	Power-up default value for COSC bits
 13360                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
 13361   300000                     	org	3145728
 13362   300000  AA                 	db	170
 13363                           
 13364                           ;Config register CONFIG1H @ 0x300001
 13365                           ;	unspecified, using default values
 13366                           ;	Clock Out Enable bit
 13367                           ;	CLKOUTEN = 0x1, unprogrammed default
 13368                           ;	Clock Switch Enable bit
 13369                           ;	CSWEN = 0x1, unprogrammed default
 13370                           ;	Fail-Safe Clock Monitor Enable bit
 13371                           ;	FCMEN = 0x1, unprogrammed default
 13372   300001                     	org	3145729
 13373   300001  FF                 	db	255
 13374                           
 13375                           ;Config register CONFIG2L @ 0x300002
 13376                           ;	unspecified, using default values
 13377                           ;	Master Clear Enable bit
 13378                           ;	MCLRE = 0x1, unprogrammed default
 13379                           ;	Power-up Timer Enable bit
 13380                           ;	PWRTE = 0x1, unprogrammed default
 13381                           ;	Low-power BOR enable bit
 13382                           ;	LPBOREN = 0x1, unprogrammed default
 13383                           ;	Brown-out Reset Enable bits
 13384                           ;	BOREN = 0x3, unprogrammed default
 13385   300002                     	org	3145730
 13386   300002  FF                 	db	255
 13387                           
 13388                           ;Config register CONFIG2H @ 0x300003
 13389                           ;	unspecified, using default values
 13390                           ;	Brown Out Reset Voltage selection bits
 13391                           ;	BORV = 0x3, unprogrammed default
 13392                           ;	ZCD Disable bit
 13393                           ;	ZCD = 0x1, unprogrammed default
 13394                           ;	PPSLOCK bit One-Way Set Enable bit
 13395                           ;	PPS1WAY = 0x1, unprogrammed default
 13396                           ;	Stack Full/Underflow Reset Enable bit
 13397                           ;	STVREN = 0x1, unprogrammed default
 13398                           ;	Debugger Enable bit
 13399                           ;	DEBUG = 0x1, unprogrammed default
 13400                           ;	Extended Instruction Set Enable bit
 13401                           ;	XINST = 0x1, unprogrammed default
 13402   300003                     	org	3145731
 13403   300003  FF                 	db	255
 13404                           
 13405                           ;Config register CONFIG3L @ 0x300004
 13406                           ;	WDT Period Select bits
 13407                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
 13408                           ;	WDT operating mode
 13409                           ;	WDTE = OFF, WDT Disabled
 13410   300004                     	org	3145732
 13411   300004  9F                 	db	159
 13412                           
 13413                           ;Config register CONFIG3H @ 0x300005
 13414                           ;	unspecified, using default values
 13415                           ;	WDT Window Select bits
 13416                           ;	WDTCWS = 0x7, unprogrammed default
 13417                           ;	WDT input clock selector
 13418                           ;	WDTCCS = 0x7, unprogrammed default
 13419   300005                     	org	3145733
 13420   300005  FF                 	db	255
 13421                           
 13422                           ;Config register CONFIG4L @ 0x300006
 13423                           ;	unspecified, using default values
 13424                           ;	Write Protection Block 0
 13425                           ;	WRT0 = 0x1, unprogrammed default
 13426                           ;	Write Protection Block 1
 13427                           ;	WRT1 = 0x1, unprogrammed default
 13428                           ;	Write Protection Block 2
 13429                           ;	WRT2 = 0x1, unprogrammed default
 13430                           ;	Write Protection Block 3
 13431                           ;	WRT3 = 0x1, unprogrammed default
 13432                           ;	Write Protection Block 3
 13433                           ;	WRT4 = 0x1, unprogrammed default
 13434                           ;	Write Protection Block 3
 13435                           ;	WRT5 = 0x1, unprogrammed default
 13436                           ;	Write Protection Block 3
 13437                           ;	WRT6 = 0x1, unprogrammed default
 13438                           ;	Write Protection Block 3
 13439                           ;	WRT7 = 0x1, unprogrammed default
 13440   300006                     	org	3145734
 13441   300006  FF                 	db	255
 13442                           
 13443                           ;Config register CONFIG4H @ 0x300007
 13444                           ;	unspecified, using default values
 13445                           ;	Configuration Register Write Protection bit
 13446                           ;	WRTC = 0x1, unprogrammed default
 13447                           ;	Boot Block Write Protection bit
 13448                           ;	WRTB = 0x1, unprogrammed default
 13449                           ;	Data EEPROM Write Protection bit
 13450                           ;	WRTD = 0x1, unprogrammed default
 13451                           ;	Scanner Enable bit
 13452                           ;	SCANE = 0x1, unprogrammed default
 13453                           ;	Low Voltage Programming Enable bit
 13454                           ;	LVP = 0x1, unprogrammed default
 13455   300007                     	org	3145735
 13456   300007  FF                 	db	255
 13457                           
 13458                           ;Config register CONFIG5L @ 0x300008
 13459                           ;	unspecified, using default values
 13460                           ;	UserNVM Program Memory Code Protection bit
 13461                           ;	CP = 0x1, unprogrammed default
 13462                           ;	DataNVM Memory Code Protection bit
 13463                           ;	CPD = 0x1, unprogrammed default
 13464   300008                     	org	3145736
 13465   300008  FF                 	db	255
 13466                           
 13467                           ;Config register CONFIG5H @ 0x300009
 13468                           ;	unspecified, using default values
 13469   300009                     	org	3145737
 13470   300009  FF                 	db	255
 13471                           
 13472                           ;Config register CONFIG6L @ 0x30000A
 13473                           ;	unspecified, using default values
 13474                           ;	Table Read Protection Block 0
 13475                           ;	EBTR0 = 0x1, unprogrammed default
 13476                           ;	Table Read Protection Block 1
 13477                           ;	EBTR1 = 0x1, unprogrammed default
 13478                           ;	Table Read Protection Block 2
 13479                           ;	EBTR2 = 0x1, unprogrammed default
 13480                           ;	Table Read Protection Block 3
 13481                           ;	EBTR3 = 0x1, unprogrammed default
 13482                           ;	Table Read Protection Block 4
 13483                           ;	EBTR4 = 0x1, unprogrammed default
 13484                           ;	Table Read Protection Block 5
 13485                           ;	EBTR5 = 0x1, unprogrammed default
 13486                           ;	Table Read Protection Block 6
 13487                           ;	EBTR6 = 0x1, unprogrammed default
 13488                           ;	Table Read Protection Block 7
 13489                           ;	EBTR7 = 0x1, unprogrammed default
 13490   30000A                     	org	3145738
 13491   30000A  FF                 	db	255
 13492                           
 13493                           ;Config register CONFIG6H @ 0x30000B
 13494                           ;	unspecified, using default values
 13495                           ;	Boot Block Table Read Protection bit
 13496                           ;	EBTRB = 0x1, unprogrammed default
 13497   30000B                     	org	3145739
 13498   30000B  FF                 	db	255
 13499                           tosu	equ	0xFFF
 13500                           tosh	equ	0xFFE
 13501                           tosl	equ	0xFFD
 13502                           stkptr	equ	0xFFC
 13503                           pclatu	equ	0xFFB
 13504                           pclath	equ	0xFFA
 13505                           pcl	equ	0xFF9
 13506                           tblptru	equ	0xFF8
 13507                           tblptrh	equ	0xFF7
 13508                           tblptrl	equ	0xFF6
 13509                           tablat	equ	0xFF5
 13510                           prodh	equ	0xFF4
 13511                           prodl	equ	0xFF3
 13512                           indf0	equ	0xFEF
 13513                           postinc0	equ	0xFEE
 13514                           postdec0	equ	0xFED
 13515                           preinc0	equ	0xFEC
 13516                           plusw0	equ	0xFEB
 13517                           fsr0h	equ	0xFEA
 13518                           fsr0l	equ	0xFE9
 13519                           wreg	equ	0xFE8
 13520                           indf1	equ	0xFE7
 13521                           postinc1	equ	0xFE6
 13522                           postdec1	equ	0xFE5
 13523                           preinc1	equ	0xFE4
 13524                           plusw1	equ	0xFE3
 13525                           fsr1h	equ	0xFE2
 13526                           fsr1l	equ	0xFE1
 13527                           bsr	equ	0xFE0
 13528                           indf2	equ	0xFDF
 13529                           postinc2	equ	0xFDE
 13530                           postdec2	equ	0xFDD
 13531                           preinc2	equ	0xFDC
 13532                           plusw2	equ	0xFDB
 13533                           fsr2h	equ	0xFDA
 13534                           fsr2l	equ	0xFD9
 13535                           status	equ	0xFD8

Data Sizes:
    Strings     26
    Constant    0
    Data        4
    BSS         181
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     86      90
    BANK0           160    119     160
    BANK1           256     70     210
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    strcpy@dest	PTR unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    strcpy@d	PTR unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    strcpy@src	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_5(CODE[4]), STR_2(CODE[4]), 

    strcpy@s	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_5(CODE[4]), STR_2(CODE[4]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    memcpy@d1	PTR void  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    memcpy@s1	PTR const void  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_1(CODE[18]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 18
		 -> STR_1(CODE[18]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 18
		 -> STR_1(CODE[18]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    S2666$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    sp__memcpy	PTR void  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    efgtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK1[80]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_1(CODE[18]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 20
		 -> main@string4(BANK1[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2582$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2582$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    TxBufferedString@string	PTR unsigned char  size(2) Largest target is 20
		 -> main@string4(BANK1[20]), 

    motorRight.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    motorRight.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    motorLeft.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    motorLeft.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    reverseSquareLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    reverseSquareLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    reverseSquareRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    reverseSquareRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    turnLeft_135@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft_135@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft_135@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft_135@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft_135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    turnLeft_135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    turnRight_135@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight_135@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight_135@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight_135@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight_135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    turnRight_135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    turn_180@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turn_180@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turn_180@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turn_180@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turn_180@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    turn_180@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    turnRight_90@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight_90@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight_90@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight_90@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight_90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    turnRight_90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    turnLeft_90@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft_90@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft_90@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft_90@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft_90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    turnLeft_90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    turnRight@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    reverse@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    reverse@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    reverse@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    reverse@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    reverse@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    reverse@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    forward@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    forward@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    forward@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    forward@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), main@motorLeft(BANK1[9]), 

    DCmotorsInit@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    S107DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    S107DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    colorDetect@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK1[9]), 

    colorDetect@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK1[9]), 

    colorDetect@whiteRGBVal	PTR struct RGB size(2) Largest target is 8
		 -> main@whiteRGBVal(BANK1[8]), 

    colorDetect@ambientRGBVal	PTR struct RGB size(2) Largest target is 8
		 -> main@ambientRGBVal(BANK1[8]), 

    whiteCal@v	PTR struct RGB size(2) Largest target is 8
		 -> main@whiteRGBVal(BANK1[8]), 

    ambientCal@v	PTR struct RGB size(2) Largest target is 8
		 -> main@ambientRGBVal(BANK1[8]), 

    getColor@v	PTR struct RGB size(2) Largest target is 8
		 -> main@whiteRGBVal(BANK1[8]), main@ambientRGBVal(BANK1[8]), main@RGBVal(BANK1[8]), colorDetect@RGBVal(BANK0[8]), 


Critical Paths under _main in COMRAM

    _whiteCal->_getColor
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_efgtoa
    _efgtoa->_floorf
    _floorf->___fldiv
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _colorDetect->___fldiv
    _turn_180->_stop
    _turnRight_135->_stop
    _turnLeft_135->_stop
    _reverseSquareRight->_turnRight_90
    _turnRight_90->_stop
    _reverseSquareLeft->_turnLeft_90
    _turnLeft_90->_stop
    _stop->_setMotorPWM
    _reverse->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    ___flsub->___flmul
    ___flmul->___fladd
    ___flge->___flsub
    ___fldiv->___flsub
    _ambientCal->_getColor
    _getColor->_color_read_Blue
    _getColor->_color_read_Clear
    _getColor->_color_read_Green
    _getColor->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _TxBufferedString->_putCharToTxBuf

Critical Paths under _HighISR in COMRAM

    _HighISR->_getCharFromTxBuf

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_efgtoa
    _efgtoa->_floorf

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               172   172      0  206795
                                            117 BANK0      2     2      0
                                              0 BANK1     70    70      0
                       _DCmotorsInit
                   _TxBufferedString
                            ___fldiv
                             ___flge
                           ___xxtofl
                         _ambientCal
                        _colorDetect
                   _color_click_init
                           _getColor
                    _initDCmotorsPWM
                         _initUSART4
                          _sendTxBuf
                            _sprintf
                               _stop
                           _whiteCal
 ---------------------------------------------------------------------------------
 (1) _whiteCal                                             6     4      2     988
                                             17 COMRAM     6     4      2
                           _getColor
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             27    15     12   37021
                                             92 BANK0     25    13     12
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6   36523
                                             84 BANK0      8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           23    17      6   36053
                                             84 COMRAM     2     2      0
                                             67 BANK0     17    11      6
                               _dtoa
                             _efgtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _efgtoa                                              54    47      7   29904
                                             82 COMRAM     2     2      0
                                             16 BANK0     51    44      7
                            ___fladd
                            ___fldiv
                             ___fleq
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                      ___fpclassifyf
                             _floorf
                               _labs
                             _memcpy
                                _pad
                             _strcpy
 ---------------------------------------------------------------------------------
 (5) _strcpy                                               8     4      4     400
                                              4 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (5) _memcpy                                              11     5      6     371
                                              4 COMRAM    11     5      6
 ---------------------------------------------------------------------------------
 (5) _labs                                                 8     4      4     294
                                              4 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (5) _floorf                                              20    16      4     669
                                             78 COMRAM     4     0      4
                                              0 BANK0     16    16      0
                            ___fldiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fpclassifyf                                       14    10      4     287
                                              4 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (5) ___fltol                                             10     6      4    1409
                                              4 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (5) ___flneg                                              4     0      4     121
                                              4 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (5) ___fleq                                              12     4      8     646
                                              4 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                35    25     10    4333
                                             31 COMRAM    35    25     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2683
                                             20 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4     931
                                             13 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     682
                                              4 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             22 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              4 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              4 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _sendTxBuf                                            0     0      0       0
                      _isDataInTxBuf
 ---------------------------------------------------------------------------------
 (2) _isDataInTxBuf                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      76
                                              4 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              8 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              6 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _colorDetect                                         56    44     12  147917
                                             78 COMRAM     2     2      0
                                              0 BANK0     50    38     12
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                           ___xxtofl
                           _getColor
                  _reverseSquareLeft
                 _reverseSquareRight
                       _turnLeft_135
                        _turnLeft_90
                      _turnRight_135
                       _turnRight_90
                           _turn_180
 ---------------------------------------------------------------------------------
 (2) _turn_180                                             6     2      4   14483
                                             29 COMRAM     6     2      4
                            _reverse
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _turnRight_135                                        6     2      4   14483
                                             29 COMRAM     6     2      4
                            _reverse
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _turnLeft_135                                         6     2      4   14483
                                             29 COMRAM     6     2      4
                            _reverse
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _reverseSquareRight                                   6     2      4   26173
                                             35 COMRAM     6     2      4
                            _reverse
                               _stop
                       _turnRight_90
 ---------------------------------------------------------------------------------
 (2) _turnRight_90                                         6     2      4   14635
                                             29 COMRAM     6     2      4
                            _reverse
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _reverseSquareLeft                                    6     2      4   26173
                                             35 COMRAM     6     2      4
                            _reverse
                               _stop
                        _turnLeft_90
 ---------------------------------------------------------------------------------
 (2) _turnLeft_90                                          6     2      4   14635
                                             29 COMRAM     6     2      4
                            _reverse
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 6     2      4    6853
                                             23 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _reverse                                              5     1      4    4357
                                             23 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          6     4      2    2725
                                             17 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     491
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     358
                                             10 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4    2078
                                              4 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (5) ___flsub                                              8     0      8    4257
                                             45 COMRAM     8     0      8
                            ___fladd
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (6) ___fladd                                             16     8      8    2414
                                              4 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 (5) ___flmul                                             25    17      8    4864
                                             20 COMRAM    25    17      8
                            ___fladd (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flge                                              12     4      8    5350
                                             53 COMRAM    12     4      8
                            ___flmul (ARG)
                            ___flsub (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fldiv                                             25    17      8    2615
                                             53 COMRAM    25    17      8
                            ___flmul (ARG)
                            ___flsub (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _ambientCal                                           6     4      2     988
                                             17 COMRAM     6     4      2
                           _getColor
 ---------------------------------------------------------------------------------
 (2) _getColor                                             2     0      2     844
                                             15 COMRAM     2     0      2
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (3) _color_read_Red                                       7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Green                                     7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Clear                                     7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Blue                                      7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Write                                   1     1      0      22
                                              5 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Read                                    3     3      0      45
                                              5 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Idle                                    1     1      0       0
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _TxBufferedString                                     2     0      2     143
                                              5 COMRAM     2     0      2
                     _putCharToTxBuf
 ---------------------------------------------------------------------------------
 (2) _putCharToTxBuf                                       1     1      0      22
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DCmotorsInit                                         4     0      4     416
                                              4 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _HighISR                                              2     2      0      22
                                              2 COMRAM     2     2      0
                   _getCharFromTxBuf
                     _putCharToRxBuf
                    i2_isDataInTxBuf
 ---------------------------------------------------------------------------------
 (10) i2_isDataInTxBuf                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _putCharToRxBuf                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (10) _getCharFromTxBuf                                    2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DCmotorsInit
   _TxBufferedString
     _putCharToTxBuf
   ___fldiv
     ___flmul (ARG)
       ___fladd (ARG)
       ___xxtofl (ARG)
     ___flsub (ARG)
       ___fladd
       ___flmul (ARG)
       ___xxtofl (ARG)
     ___xxtofl (ARG)
   ___flge
     ___flmul (ARG)
     ___flsub (ARG)
   ___xxtofl
   _ambientCal
     _getColor
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_read_Clear
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
   _colorDetect
     ___fldiv
     ___flge
     ___flmul
     ___flsub
     ___xxtofl
     _getColor
     _reverseSquareLeft
       _reverse
         _setMotorPWM
           ___lwdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
       _turnLeft_90
         _reverse
         _setMotorPWM
         _stop
     _reverseSquareRight
       _reverse
       _stop
       _turnRight_90
         _reverse
         _setMotorPWM
         _stop
     _turnLeft_135
       _reverse
       _setMotorPWM
       _stop
     _turnLeft_90
     _turnRight_135
       _reverse
       _setMotorPWM
       _stop
     _turnRight_90
     _turn_180
       _reverse
       _setMotorPWM
       _stop
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _getColor
   _initDCmotorsPWM
   _initUSART4
   _sendTxBuf
     _isDataInTxBuf
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
         _efgtoa
           ___fladd
           ___fldiv
           ___fleq
           ___flge
           ___flmul
           ___flneg
           ___flsub
           ___fltol
           ___fpclassifyf
           _floorf
             ___fldiv (ARG)
           _labs
           _memcpy
           _pad
           _strcpy
         _fputc
   _stop
   _whiteCal
     _getColor

 _HighISR (ROOT)
   _getCharFromTxBuf
   _putCharToRxBuf
   i2_isDataInTxBuf

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      62        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     46      D2       7       82.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     77      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     56      5A       1       95.7%
BITBIGSFRlhhhhl     52      0       0      42        0.0%
BITBIGSFRlhhhll     37      0       0      44        0.0%
BITBIGSFRlllhlh     2A      0       0      55        0.0%
BITBIGSFRlllll      26      0       0      60        0.0%
BITBIGSFRlhhhll     20      0       0      47        0.0%
BITBIGSFRlhhhll     1E      0       0      49        0.0%
BITBIGSFRhhhhhl     1B      0       0      33        0.0%
BITBIGSFRhhhhll     17      0       0      38        0.0%
BITBIGSFRhhhhhl     13      0       0      34        0.0%
BITBIGSFRlhhl       11      0       0      50        0.0%
BITBIGSFRhhhhlh      E      0       0      35        0.0%
BITBIGSFRhhhhhh      D      0       0      32        0.0%
BITBIGSFRlhhhll      C      0       0      48        0.0%
BITBIGSFRlllhll      9      0       0      57        0.0%
BITBIGSFRlllhll      9      0       0      56        0.0%
BITBIGSFRlhhhll      8      0       0      45        0.0%
BITBIGSFRllllh       6      0       0      59        0.0%
BITBIGSFRlllhh       6      0       0      54        0.0%
BITBIGSFRlllhll      5      0       0      58        0.0%
BITBIGSFRllhl        5      0       0      53        0.0%
BITBIGSFRhhhhll      5      0       0      39        0.0%
BITBIGSFRllhh        3      0       0      52        0.0%
BITBIGSFRlhhhlh      2      0       0      43        0.0%
BITBIGSFRhhhhll      2      0       0      37        0.0%
BITBIGSFRlhhhhh      1      0       0      41        0.0%
BITBIGSFRlhhhll      1      0       0      46        0.0%
BITBIGSFRhhhhlh      1      0       0      36        0.0%
BITBIGSFRlhl         1      0       0      51        0.0%
BITBIGSFRhhll        1      0       0      40        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1CC      61        0.0%
DATA                 0      0     1CC       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Tue Dec 13 18:21:38 2022

               _color_read_Red 52F4                   ___fldiv@aexp 004E                   ___fldiv@bexp 004D  
                 ___fldiv@sign 0046                _color_read_Blue 53E4                             l42 57A0  
                           l51 5432                             l45 5342                             l54 53E2  
                           l62 4AEA                             l39 5638                             l48 5392  
                           l57 51FA                             l67 4A06                             l87 197C  
          ___wmul@multiplicand 0007     __end_of_reverseSquareRight 4FC8               _color_read_Clear 5394  
             _color_read_Green 5344                            l210 43A0                            l204 44DE  
                          l222 4262                            l231 4FC6                            l216 4124  
                          l234 5048                            l146 4F44                            l156 3E82  
                          l228 461A                            l149 4C92                            l261 56BE  
                          l270 580A                            l166 4E0A                            l415 5780  
                          l264 5714                            l273 5814                            l282 558C  
                          l186 4BC0                            l267 573A                            l452 56E8  
                          l276 5800                            l612 3D16                            l461 5668  
                          l279 57F6                            l455 57D2                            l465 57BA  
                          l625 3FE6                            l498 5760                            l763 47DE  
                          l772 5604                            l757 4EB4                            l768 4824  
                          l795 4720                            l996 5136                            l989 512E  
                          _abs 558E                            _pad 504A                            wreg 000FE8  
                 ___flmul@aexp 0026                   ___flmul@bexp 0027                   ___flmul@sign 0021  
                 ___flmul@temp 002C                   ___flmul@prod 0028           reverseSquareRight@mL 0024  
         reverseSquareRight@mR 0026                   ___fltol@exp1 000E                           l1112 28FC  
                         l1121 2B6A                           l1122 2B58                           l1026 2566  
                         l1043 2680                           l1035 2836                           l1027 2554  
                         ?_abs 0017                           l1116 2C60                           l1052 2750  
                         l1028 251A                           l1212 50C2                           l1220 33DC  
                         l1053 273E                           l1119 2AF2                           l1231 357E  
                         l1080 2FFA                           l1160 3ACA                           l1208 506C  
                         l1312 5250                           l1129 2C22                           l1153 3A32  
                         l1217 338E                           l1082 2E5A                           l1330 55CC  
                         l1322 4922                           l1242 2376                           l1091 2EA0  
                         l1219 3396                           l1068 54C2                           l1156 3B8E  
                         l1093 2F18                           l1085 2E1E                           l1245 1D10  
                         l1094 2F06                           l1350 519C                           l1167 3B26  
                         l1327 55C4                           l1247 1B56                           l1336 39DA  
                         l1176 52A2                           l4001 293C                           l1290 3300  
                         l4011 298C                           l4003 2946                           l1339 391E  
                         l1347 518C                           l1275 2158                           l1356 52F2  
                         l4021 29CE                           l4013 2998                           l4005 295C  
                         l4101 4E78                           l4111 4722                           l4031 2A30  
                         l4023 29DE                           l4015 29A6                           l4007 2968  
                         l4103 4E88                           l1368 4D5C                           l1376 554A  
                         l5001 4AB0                           l4121 47AC                           l4113 4750  
                         l4041 2AD8                           l4033 2A4C                           l4025 29F8  
                         l4017 29B2                           l4009 2980                           l4201 55A8  
                         l4105 4EAC                           l1385 5506                           l5003 4AC8  
                         l4123 47BE                           l4115 4760                           l4051 2B14  
                         l4043 2AE2                           l4035 2A76                           l4027 2A08  
                         l4019 29C2                           l1379 581A                           l4107 4EB2  
                         l4211 48B8                           l4203 4826                           l5011 492C  
                         l4125 47CC                           l4117 478E                           l4061 2B86  
                         l4053 2B22                           l4045 2AF0                           l4037 2AAC  
                         l4029 2A24                           l3501 23C4                           l4133 55CE  
                         l4141 461C                           l4221 491A                           l4205 4846  
                         l5021 49C0                           l5013 494E                           l5005 4924  
                         l4127 481C                           l4119 479E                           l4071 2BF0  
                         l4063 2B94                           l4055 2B50                           l4047 2B02  
                         l4039 2ABA                           l3511 23F6                           l3503 23C6  
                         l4311 4D9E                           l4303 4D5E                           l4135 55E4  
                         l4151 4672                           l4143 4632                           l4207 4884  
                         l4215 48C4                           l4231 5156                           l5023 49CC  
                         l5015 496A                           l4129 4822                           l4081 2C46  
                         l4073 2C0A                           l4065 2BBE                           l4049 2B10  
                         l3601 25C4                           l3521 241E                           l3513 23F8  
                         l3505 23CE                           l4321 4DF2                           l4313 4DAA  
                         l4305 4D62                           l5201 576E                           l4137 55F4  
                         l4153 4682                           l4217 48D6                           l4209 48AC  
                         l4225 54C4                           l5025 49E4                           l5017 4986  
                         l6001 3580                           l4075 2C26                           l4083 2C4C  
                         l4059 2B7A                           l4067 2BC2                           l3611 25EE  
                         l3603 25D0                           l3531 2458                           l3523 242E  
                         l3515 23FE                           l3507 23DE                           l4091 548E  
                         l4331 4B6C                           l4323 4AEC                           l4315 4DB6  
                         l4307 4D7A                           l5203 5770                           l4163 46AC  
                         l4155 4686                           l4147 4646                           l4227 54D4  
                         l5019 49A8                           l6011 3598                           l6003 3584  
                         l4085 2C50                           l4077 2C36                           l4069 2BDC  
                         l3621 2660                           l3605 25D4                           l3613 25F4  
                         l3541 2484                           l3533 246A                           l3525 243E  
                         l3517 240C                           l3509 23E4                           l3701 50FC  
                         l4325 4B30                           l4333 4B78                           l4309 4D86  
                         l4317 4DC2                           l5205 577A                           l4341 3322  
                         l4181 4710                           l4173 46D4                           l4165 46B6  
                         l4157 4694                           l4149 4670                           l4229 5138  
                         l4261 52A4                           l6101 37A8                           l6021 35A2  
                         l6013 359A                           l6005 3588                           l5223 563A  
                         l4079 2C44                           l3631 26BA                           l3615 261A  
                         l3623 2670                           l3607 25E2                           l3551 2498  
                         l3543 2488                           l3535 2478                           l3527 2440  
                         l3519 240E                           l3711 5128                           l3703 5102  
                         l4335 4B90                           l4327 4B48                           l4319 4DDA  
                         l5207 577C                           l5231 57A2                           l3471 4CA6  
                         l4191 5078                           l4351 339E                           l4343 3336  
                         l4095 4E0C                           l4175 46E0                           l4167 46C0  
                         l4263 52B8                           l4271 52D8                           l6103 37AC  
                         l6031 35AC                           l6023 35A4                           l6015 359C  
                         l6007 3594                           l5225 563E                           l4273 5802  
                         l4281 57F8                           l3641 26EA                           l3633 26C4  
                         l3625 2696                           l3617 264E                           l3609 25E4  
                         l3561 24AC                           l3553 249C                           l3545 248C  
                         l3537 247C                           l3529 2448                           l4089 547E  
                         l3705 5118                           l3721 3D18                           l4337 4BA8  
                         l4329 4B54                           l5161 4EB6                           l5209 577E  
                         l5233 57B6                           l3801 3F0E                           l3473 4CB8  
                         l3713 5508                           l4193 508C                           l4185 504A  
                         l4361 33D8                           l4353 33AE                           l4345 3346  
                         l4097 4E3A                           l4177 46F0                           l4265 52C4  
                         l6041 35B6                           l6033 35AE                           l6025 35A6  
                         l6017 359E                           l6009 3596                           l5227 564C  
                         l4291 5552                           l4275 5806                           l4283 57FC  
                         l3651 2712                           l3643 26EE                           l3635 26D2  
                         l3627 26A6                           l3619 2650                           l3571 24E6  
                         l3563 24B0                           l3555 24A0                           l3547 2490  
                         l3539 2480                           l3491 2384                           l3707 5120  
                         l3483 573C                           l3731 3DE2                           l3723 3D34  
                         l5171 4F20                           l5163 4EC6                           l3811 3F90  
                         l3803 3F22                           l3475 4CC2                           l3715 5514  
                         l4195 5090                           l4187 5058                           l4371 347C  
                         l4363 33E4                           l4355 33B4                           l4347 3366  
                         l4339 3302                           l4099 4E4A                           l4179 4700  
                         l4267 52C8                           l6051 35C0                           l6043 35B8  
                         l6035 35B0                           l6027 35A8                           l6019 35A0  
                         l5229 5650                           l4293 555A                           l4285 580C  
                         l4277 57EE                           l4621 538A                           l4613 52F4  
                         l3901 2E48                           l3821 2C62                           l3661 276C  
                         l3653 2720                           l3645 26FE                           l3637 26D4  
                         l3581 2538                           l3573 2502                           l3565 24B4  
                         l3557 24A4                           l3549 2494                           l3493 2392  
                         l3709 5122                           l3485 5758                           l3733 3DFE  
                         l3725 3D88                           l5181 4F42                           l5173 4F2A  
                         l5165 4EF0                           l3741 3B90                           l3805 3F30  
                         l3813 3F96                           l3477 4CE0                           l3469 4C94  
                         l3717 5526                           l4197 50AE                           l4189 5064  
                         l4381 3538                           l4373 3482                           l4365 33EE  
                         l4357 33C4                           l4349 3382                           l4269 52D4  
                         l6061 35CC                           l6053 35C2                           l6045 35BA  
                         l6037 35B2                           l6029 35AA                           ?_pad 0015  
                         l5191 4C02                           l5183 4BC2                           l4295 5562  
                         l4287 5810                           l4279 57F2                           l4631 5394  
                         l4615 533A                           l3911 2E90                           l3903 2E58  
                         l3831 2C9E                           l3823 2C6E                           l3671 27D6  
                         l3663 277A                           l3655 2736                           l3639 26E2  
                         l3647 2700                           l3591 2584                           l3583 2546  
                         l3575 2512                           l3559 24A8                           l3567 24B8  
                         l3495 2394                           l3735 3E42                           l3727 3D9C  
                         l5175 4F2C                           l5167 4F14                           l3751 3BD4  
                         l3743 3B94                           l3815 3FA6                           l3807 3F5E  
                         l4199 558E                           l3479 4D16                           l3719 552A  
                         l4383 3548                           l4367 33F4                           l4375 34E6  
                         l4359 33D0                           l6071 35E4                           l6063 35CE  
                         l6055 35C4                           l6047 35BC                           l6039 35B4  
                         l5193 4C16                           l5185 4BCE                           l3737 5714  
                         l4297 5588                           l4289 554E                           l4625 53E4  
                         l4633 53DA                           l3921 2ED0                           l3913 2E9E  
                         l3905 2E6A                           l3841 2CCE                           l3833 2CAE  
                         l3825 2C7C                           l3681 2810                           l3673 27F6  
                         l3665 27B4                           l3649 270E                           l3585 2548  
                         l3577 2528                           l3569 24BC                           l3497 23A4  
                         l3489 2378                           l3729 3DA0                           l4641 4290  
                         l4801 417E                           l5177 4F36                           l5169 4F1E  
                         l3761 3C2A                           l3753 3BF4                           l3745 3BA2  
                         l3817 3FC6                           l3809 3F7E                           l4385 354E  
                         l4377 3500                           l4369 3476                           l5521 3860  
                         l5513 37C6                           l5601 1B06                           l6081 3624  
                         l6073 35F0                           l6065 35D0                           l6057 35C6  
                         l6049 35BE                           l5195 4C2A                           l5187 4BDE  
                         l3739 5724                           l4299 558A                           l4627 542A  
                         l4619 5344                           l3931 2F42                           l3923 2EFE  
                         l3907 2E80                           l3915 2EB0                           l3851 2D04  
                         l3843 2CD4                           l3835 2CB0                           l3827 2C7E  
                         l3683 2816                           l3675 27FA                           l3659 2760  
                         l3667 27B6                           l3595 2598                           l3587 2552  
                         l3579 2534                           l3499 23B4                           l3691 50C4  
                         l4651 4300                           l4643 42BC                           l4811 41D6  
                         l4803 4192                           l5179 4F38                           l3771 3CAC  
                         l3763 3C3E                           l3755 3BF8                           l3747 3BC2  
                         l4387 355E                           l4379 351E                           l5531 397E  
                         l5515 37E6                           l5611 1BA0                           l5603 1B20  
                         l6091 371C                           l6083 364C                           l6075 35FE  
                         l6067 35D0                           l6059 35C8                           l5189 4BEE  
                         l3941 2FBA                           l3933 2F6C                           l3917 2EBE  
                         l3909 2E86                           l3861 2D44                           l3853 2D14  
                         l3845 2CE2                           l3829 2C8E                           l3837 2CB8  
                         l3685 2824                           l3677 2808                           l3669 27C6  
                         l3597 25A8                           l3589 2574                           l3693 50CC  
                         l4901 5020                           l4661 435C                           l4653 4314  
                         l4645 42D0                           l4637 4264                           l4821 4236  
                         l4813 41EE                           l4805 41A2                           l5197 5762  
                         l3781 3CF6                           l3773 3CAE                           l3765 3C4C  
                         l3757 3C04                           l3749 3BC6                           l5533 3992  
                         l5525 38D2                           l5517 383E                           l5701 212E  
                         l5621 1C96                           l5613 1BDE                           l5541 197E  
                         l6093 3738                           l6085 366E                           l6077 360A  
                         l6069 35D0                           l4911 56E6                           l3951 2FF0  
                         l3943 2FD6                           l3927 2F28                           l3935 2F70  
                         l3919 2EC2                           l3863 2D54                           l3871 2D74  
                         l3855 2D16                           l3847 2CE4                           l3839 2CC8  
                         l3687 2826                           l3679 280E                           l3599 25B6  
                         l3695 50DE                           l4671 43CE                           l4903 5034  
                         l4663 4374                           l4655 432C                           l4647 42E0  
                         l4639 4278                           l4831 4F9E                           l4823 424E  
                         l4815 41FA                           l4807 41B2                           l5199 576C  
                         l3775 3CC0                           l3767 3C5E                           l3759 3C22  
                         l3791 3EB6                           l5535 39BA                           l5527 390E  
                         l5519 3852                           l5711 218C                           l5703 214E  
                         l5631 1D28                           l5623 1C9E                           l5615 1C10  
                         l5607 1B66                           l5551 19CA                           l5543 1984  
                         l6095 374C                           l6087 36B4                           l6079 3618  
                         l4905 56C2                           l3945 2FDA                           l3937 2F8A  
                         l3929 2F34                           l3881 2DB2                           l3873 2D84  
                         l3865 2D5C                           l3849 2CF4                           l3857 2D1E  
                         l3961 2844                           l4921 39FC                           l3697 50E6  
                         l4681 443E                           l4673 43FA                           l4665 438C  
                         l4657 4338                           l4649 42F0                           l4833 4FB2  
                         l4825 4F46                           l4817 4206                           l4809 41C2  
                         l4841 4040                           l4913 57BC                           l3769 3C8C  
                         l3777 3CC6                           l3793 3EBA                           l3785 3E84  
                         l5537 39CA                           l5529 3942                           l5721 21B4  
                         l5713 2192                           l5705 216A                           l5641 1D5A  
                         l5633 1D34                           l5617 1C4E                           l5609 1B6C  
                         l5561 1A08                           l5553 19D4                           l5545 1994  
                         l5801 31E2                           l6097 3766                           l6089 36E6  
                         l4907 56D2                           l3947 2FE8                           l3939 2FA0  
                         l3891 2DFA                           l3883 2DC2                           l3875 2D84  
                         l3867 2D60                           l3859 2D2E                           l3971 2884  
                         l3963 2852                           l4931 3A74                           l4923 3A42  
                         l3699 50EE                           l4691 449A                           l4683 4452  
                         l4675 440E                           l4667 43A2                           l4659 4344  
                         l4827 4F5A                           l4819 421E                           l4851 4098  
                         l4843 4054                           l4835 3FE8                           l3779 3CD6  
                         l3795 3EC8                           l3787 3E88                           l5731 21E8  
                         l5715 219A                           l5707 2178                           l5723 21BA  
                         l5651 1DA2                           l5643 1D68                           l5635 1D3C  
                         l5619 1C62                           l5627 1CDE                           l5571 1A50  
                         l5563 1A10                           l5555 19DC                           l5547 19A2  
                         l6195 316C                           l6099 379C                           l4909 56D6  
                         l3949 2FEE                           l3893 2E0E                           l3885 2DD2  
                         l3981 28B4                           l3973 288A                           l3965 2854  
                         l4941 3AFC                           l4933 3A80                           l4925 3A58  
                         l4917 39DE                           l4693 44B2                           l4685 446A  
                         l4677 441E                           l4669 43B6                           l4829 4F72  
                         l4861 40F8                           l4853 40B0                           l4845 4064  
                         l4837 3FFC                           l5901 12C8                           l4781 56A0  
                         l3797 3EE8                           l3789 3E96                           l5741 229E  
                         l5733 2240                           l5725 21CC                           l5717 21AA  
                         l5709 2188                           l5661 1EB6                           l5653 1DB2  
                         l5645 1D80                           l5637 1D44                           l5629 1D18  
                         l5573 1A56                           l5557 19EC                           l5565 1A14  
                         l5549 19A6                           l6197 322A                           l5805 3216  
                         l5821 32D4                           l3895 2E1C                           l3887 2DE2  
                         l3879 2D98                           l3991 28EC                           l3983 28B6  
                         l3975 289A                           l3967 2864                           l3959 2838  
                         l4951 3B3A                           l4943 3B08                           l4935 3AB2  
                         l4919 39EE                           l4695 44CA                           l4687 4476  
                         l4679 442E                           l4871 4538                           l4863 4110  
                         l4855 40BC                           l4847 4074                           l4839 4014  
                         l5911 13D6                           l5903 12E4                           l4783 56A6  
                         l4791 5784                           l3799 3F06                           l5751 2310  
                         l5743 22BA                           l5735 2274                           l5727 21DE  
                         l5719 21AE                           l5671 1F56                           l5655 1DC6  
                         l5663 1EBC                           l5647 1D92                           l5639 1D48  
                         l5591 1AE2                           l5575 1A5E                           l5567 1A3A  
                         l5583 1AA0                           l5559 19FC                           l6199 32B4  
                         l5815 3292                           l5807 3240                           l4793 519E  
                         l3897 2E28                           l3889 2DEA                           l3993 290C  
                         l3985 28C6                           l3977 28A0                           l3969 2874  
                         l4953 3B5E                           l4945 3B16                           l4937 3AB4  
                         l4929 3A6C                           l4689 4482                           l4881 4590  
                         l4873 454C                           l4865 44E0                           l4857 40C8  
                         l4849 4084                           l5921 1488                           l5905 1316  
                         l5913 13E4                           l4785 56A8                           l5753 2328  
                         l5745 22C2                           l5737 227C                           l5729 21E2  
                         l5681 2032                           l5673 1F88                           l5665 1EDA  
                         l5657 1E2A                           l5649 1D9A                           l5593 1AEA  
                         l5585 1AC6                           l5577 1A76                           l5569 1A4C  
                         l5809 3260                           l5817 32C2                           l3899 2E46  
                         l3995 291C                           l3987 28D6                           l3979 28A6  
                         l4955 3B6E                           l4947 3B34                           l4939 3AC0  
                         l4891 45F0                           l4883 45A8                           l4875 455C  
                         l4867 44F4                           l4795 4126                           l4859 40E0  
                         l5931 1540                           l5923 149C                           l5915 1416  
                         l5907 136C                           l4787 56AA                           l4779 5696  
                         l5755 2338                           l5747 22D2                           l5739 2280  
                         l5691 2094                           l5683 2038                           l5675 1F98  
                         l5667 1F0E                           l5659 1E82                           l5587 1AD8  
                         l5579 1A80                           l5771 3044                           l5763 2FFC  
                         l5851 5246                           l3989 28E6                           l4957 3B7C  
                         l4949 3B36                           l4893 4606                           l4885 45B4  
                         l4877 456C                           l4869 450C                           l4797 413A  
                         l5941 161C                           l5933 154E                           l5917 1448  
                         l5925 14AA                           l5909 13C2                           l5861 0E4E  
                         l4789 56AC                           l4981 562E                           l4973 5606  
                         l5757 234E                           l5749 2302                           l5693 209C  
                         l5685 206C                           l5677 1FA8                           l5669 1F40  
                         l5589 1ADC                           l5773 3054                           l5765 3024  
                         l5845 51FC                           l4991 4A32                           l4983 4A08  
                         l3999 2930                           l4959 3B7E                           l4895 4FC8  
                         l4887 45C0                           l4879 457C                           l4799 4152  
                         l5951 16D4                           l5943 164E                           l5935 1562  
                         l5927 14DC                           l5919 147A                           l5871 0F2C  
                         l5863 0E62                           l5855 0E1C                           l4975 560A  
                         l5759 2356                           l5695 20A2                           l5687 2080  
                         l5679 1FDC                           l5791 3150                           l5783 311A  
                         l5775 3074                           l5767 3032                           l5847 5208  
                         l4993 4A4E                           l4897 4FDC                           l4889 45D8  
                         l5953 1706                           l5961 178C                           l5945 165C  
                         l5929 150E                           l5937 1570                           l5881 1178  
                         l5873 0FDA                           l5865 0E94                           l5857 0E28  
                         l4977 5614                           l5697 20AA                           l5689 2084  
                         l5785 312A                           l5777 3094                           l5769 3040  
                         l5849 5226                           l4995 4A6A                           l4899 4FF4  
                         l5971 1844                           l5963 17BE                           l5955 175C  
                         l5947 1670                           l5939 15C6                           l5891 11EE  
                         l5883 118A                           l5875 1088                           l5867 0ECC  
                         l5859 0E38                           l4979 5624                           l5699 20B6  
                         l5787 3140                           l5795 3158                           l5779 30EA  
                         l4997 4A8C                           l4989 4A10                           l5981 191A  
                         l5965 17F0                           l5973 1852                           l5957 176A  
                         l5949 167E                           l5893 1220                           l5885 119A  
                         l5877 1136                           l5869 0F04                           l5789 3148  
                         l5797 318A                           l4999 4AA4                           l5983 194C  
                         l5975 1884                           l5967 1822                           l5959 177E  
                         l5895 1232                           l5887 11CC                           l5879 1146  
                         l5799 31AE                           l5991 5264                           l5985 195A  
                         l5977 18B6                           l5969 1830                           l5897 1264  
                         l5889 11DE                           l5993 526C                           l5987 196E  
                         l5979 18E8                           l5899 1296                           l5995 5274  
                         l5997 5290                           l5989 5252                           STR_1 0E01  
                         STR_2 0E13                           STR_5 0E17                           u3000 2392  
                         u3001 238E                           u3010 23A4                           u3011 23A0  
                         u3100 24FE                           u3020 23B4                           u3101 24F8  
                         u3021 23B0                           u3110 2500                           u3030 23F6  
                         u3031 23F2                           u4000 2C0A                           u3200 261A  
                         u3120 2528                           u3040 240C                   _BAUD4CONbits 000EE9  
                         u4001 2C06                           u3201 2616                           u3121 2524  
                         u3041 2408                           u4010 2C44                           u3210 2660  
                         u3130 2546                           u3050 241E                           u4011 2C40  
                         u3211 265C                           u3131 2542                           u3051 241A  
                         u3300 274C                           u3220 2696                           u3140 2566  
                         u3060 242E                           u4020 4E3A                           u4100 55E4  
                         u3301 2748                           u3221 2692                           u3141 2562  
                         u3061 242A                           u4021 4E36                           u4101 55E0  
                         u3310 2760                           u3230 26A6                           u3150 2574  
                         u3070 246A                           u4030 4E78                           u4110 4632  
                         u3311 275C                           u3231 26A2                           u3151 2570  
                         u3071 2466                           u4031 4E74                           u4111 462E  
                         u3320 277A                           u3240 26D2                           u3160 2584  
                         u3080 2478                           u3400 50FC                           u4200 55A8  
                         u4040 4EAC                           u4120 4666                           u3321 2776  
                         u3241 26CE                           u3161 2580                           u3081 2474  
                         u3401 50F8                           u4201 55A4                           u4041 4EA8  
                         u4050 4750                           u3330 27B4                           u3250 26E2  
                         u3170 25B6                           u3090 24E6                           u3410 5118  
                         u5010 421E                           u4130 4694                           u4210 4866  
                         _T2PR 000FBC                           u4051 474C                           u3331 27B0  
                         u3251 26DE                           u3171 25B2                           u3091 24E2  
                         u3411 5114                           u5011 421A                           u4131 4690  
                         u4060 478E                           u3340 27C6                           u3260 26FE  
                         u3180 25C4                           u5100 39EE                           u5020 4236  
                         u3500 3C22                           u3420 554A                           u4140 46A8  
                         u4220 4884                           u4061 478A                           u3341 27C2  
                         u3261 26FA                           u3181 25C0                           u5101 39EA  
                         u5021 4232                           u3501 3C1E                           u3421 5546  
                         u4141 46A4                           u4125 465C                           u4221 4880  
                         u4070 47AC                           u3350 27D6                           u3270 270E  
                         u3190 25E2                           u5110 39FC                           u3430 3D34  
                         u5030 40E0                           u3510 3C4C                           u4150 46D0  
                         u4230 48AC                           u4071 47A8                           u3351 27D2  
                         u3271 270A                           u3191 25DE                           u5111 39F8  
                         u3431 3D30                           u5031 40DC                           u3511 3C48  
                         u4151 46CC                           u4231 48A8                           u4215 485C  
                         u3600 2C7C                           u4080 47CC                           u3360 27F6  
                         u3280 2720                           u5120 3A58                           u3440 3DFE  
                         u5040 40F8                           u3520 3C8C                           u4160 46F0  
                         u4240 48D6                           u4400 52F2                           u6000 1A4C  
                         u3601 2C78                           u4081 47C8                           u3361 27F2  
                         u3281 271C                           u5121 3A54                           u3441 3DFA  
                         u5041 40F4                           u3521 3C88                           u4161 46EC  
                         u4241 48D2                           u4401 52EE                           u6001 1A48  
                         u3450 5724                           u4410 5576                           u5210 4A22  
                         u3610 2C8E                           u4090 481C                           u3370 2808  
                         u3290 2736                           u5130 3AAE                           u5050 45D8  
                         u3530 3CD6                           u4170 4700                           u6010 1AC6  
                         u3451 5720                           u4411 556E                           u5211 4A1A  
                         u3611 2C8A                           u4091 4818                           u3371 2804  
                         u3291 2732                           u5131 3AAA                           u5051 45D4  
                         u3531 3CD2                           u4171 46FC                           u6011 1AC2  
                         u3460 573A                           u3700 2E46                           u3620 2C9E  
                         u3380 2824                           u5140 3AF8                           u4500 4BA8  
                         u5060 45F0                           u3540 3E96                           u4180 5058  
                         u4260 4910                           u6100 1D5A                           u6020 1AD8  
                         u5300 4986                           u3461 5736                           u3701 2E42  
                         u3621 2C9A                           u3381 2820                           u5141 3AF4  
                         u4501 4BA4                           u5061 45EC                           u3541 3E92  
                         u4181 5054                           u4261 490A                           u6101 1D56  
                         u6021 1AD4                           u5301 4982                           u5070 56D2  
                         u5230 4A6A                           u3710 2E6A                           u3630 2CE2  
                         u5150 3B16                           u3390 50DE                           u4430 4D7A  
                         u3470 3BA2                           u3550 3EC8                           u4190 50AE  
                         u4510 3332                           u4270 4912                           u6110 1D68  
                         u6030 1B52                           u5310 4998                           u5071 56CE  
                         u5231 4A66                           u3711 2E66                           u3631 2CDE  
                         u5151 3B12                           u3391 50DA                           u4431 4D76  
                         u3471 3B9E                           u3551 3EC4                           u4191 50AA  
                         u4511 332C                           u4255 48E8                           u6111 1D64  
                         u6031 1B4E                           u5311 4990                           u5240 4A7C  
                         u3800 2F8A                           u3720 2E80                           u3640 2CF4  
                         u5160 3B26                           u4440 4D9E                           u5080 57D0  
                         u3480 3BD4                           u3560 3F06                           u4600 3548  
                         u4520 3334                           u4280 5506                           u6200 216A  
                         u6120 1D92                           u6040 1BDE                           u5241 4A74  
                         u3801 2F86                           u3721 2E7C                           u3641 2CF0  
                         u5161 3B22                           u4441 4D9A                           u5081 57CA  
                         u3481 3BD0                           u3561 3F02                           u4601 3544  
                         u4281 5502                           u6201 2166                           u6121 1D8E  
                         u6041 1BDA                           u3810 2FBA                           u3730 2E9E  
                         u3650 2D04                           u5170 3B34                           u4450 4DDA  
                         u5090 57D2                           u3570 3F30                           u4530 3346  
                         u4290 5156                           u6210 2178                           u6130 1EDA  
                         u6050 1C10                           u5330 49F6                           u3811 2FB6  
                         u3731 2E9A                           u3651 2D00                           u5171 3B30  
                         u4451 4DD6                           u3491 3BFE                           u3571 3F2C  
                         u4531 3342                           u4291 5152                           u6211 2174  
                         u6131 1ED6                           u6051 1C0C                           u5331 49EE  
                         u4428 5578                           u5260 4ADA                           u5228 4A24  
                         u3820 2FE8                           u3740 2EBE                           u3660 2D44  
                         u3900 291C                           u5180 3B6E                           u4460 4DF2  
                         u3580 3F5E                           u4540 3382                           u6220 21CC  
                         u6140 1F40                           u6060 1C4E                           u6300 3094  
                         u5261 4AD2                           u3821 2FE4                           u3741 2EBA  
                         u3661 2D40                           u3901 2918                           u5181 3B6A  
                         u4461 4DEE                           u3581 3F5A                           u4541 337E  
                         u6221 21C8                           u6141 1F3C                           u6061 1C4A  
                         u6301 3090                           u3750 2ED0                           u3670 2D84  
                         u3910 2A96                           u3830 2852                           u5190 3B7C  
                         u4470 4B48                           u3590 3FA6                           u4550 33AE  
                         u6230 229E                           u6150 1F88                           u6070 1CDA  
                         u6310 31AA                           u3751 2ECC                           u3671 2D80  
                         u3831 284E                           u5191 3B78                           u4471 4B44  
                         u7007 45FA                           u3591 3FA2                           u4551 33AA  
                         u6231 229A                           u6151 1F84                           u6071 1CD6  
                         u6311 31A6                           u3760 2EFE                           u3680 2DFA  
                         u3920 2AF0                           u3840 2864                           u4480 4B6C  
                         u6400 1296                           u2960 4CA6                           u4560 33C4  
                         u6240 22BA                           u6160 1F98                           u6080 1D10  
                         u6320 5246                           u5328 499A                           u5280 493E  
                         u3761 2EFA                           u3681 2DF6                           u3921 2AEC  
                         u3841 2860                           u4481 4B68                           u7017 4F64  
                         u6401 1292                           u2961 4CA2                           u4561 33C0  
                         u6241 22B6                           u6161 1F94                           u6081 1D0C  
                         u6321 5242                           u5281 4936                           u5258 4A7E  
                         u3770 2F14                           u3690 2E1C                           u3930 2B10  
                         u3850 2874                           u4490 4B90                           u6410 12C8  
                         u6330 1146                           u2970 4CB8                           u4570 3500  
                         u6250 2322                           u6170 2032                           u6090 1D28  
                         u3771 2F10                           u3691 2E18                           u3931 2B0C  
                         u3915 2A8C                           u3851 2870                           u4491 4B8C  
                         u7107 44BC                           u7027 4F90                           u6411 12C4  
                         u6331 1142                           u2971 4CB4                           u4571 34FC  
                         u6251 231C                           u6171 202E                           u6091 1D24  
                         u3780 2F28                           u3940 2B22                           u3860 28B4  
                         u6500 1540                           u6420 1316                           u6340 1178  
                         u2980 4CE0                           u4580 351E                           u6260 2324  
                         u6180 2080                           u5348 49F8                           u3781 2F24  
                         u3941 2B1E                           u3861 28B0                           u7117 4DFC  
                         u7037 4282                           u6501 153C                           u6421 1312  
                         u6341 1174                           u2981 4CDC                           u4581 351A  
                         u6181 207C                           u5278 4ADC                           u3790 2F42  
                         u3950 2B50                           u3870 28C6                           u6510 15C6  
                         u6430 136C                           u6350 119A                           u2990 4D16  
                         u4590 3538                           u6270 2338                           u6190 212E  
                         u7127 4A3C                           u3791 2F3E                           u3951 2B4C  
                         u3871 28C2                           u7047 42AE                           u6511 15C2  
                         u6431 1368                           u6351 1196                           u2991 4D12  
                         u4591 3534                           u6271 2334                           u6191 212A  
                         u3960 2B66                           u3880 28D6                           u6600 1884  
                         u6520 161C                           u6440 13C2                           u6360 11CC  
                         u6280 3024                           u7137 4A96                           u3961 2B62  
                         u3881 28D2                           u7057 437E                           u6601 1880  
                         u6521 1618                           u6441 13BE                           u6361 11C8  
                         u6281 3020                           u3970 2B7A                           u3890 290C  
                         u4930 435C                           u6610 18B6                           u6530 164E  
                         u6450 1416                           u6370 11EE                           u6290 3074  
                         u5298 4940                           u7147 4ABA                           u3971 2B76  
                         u3891 2908                           u7067 4FE6                           u4931 4358  
                         u6611 18B2                           u6531 164A                           u6451 1412  
                         u6371 11EA                           u6291 3070                           u3980 2B94  
                         u4940 4374                           u6620 18E8                           u6540 16D4  
                         u6460 1448                           u6380 1220                           u5900 38CE  
                         u3981 2B90                           u7077 5012                           u4941 4370  
                         u6621 18E4                           u6541 16D0                           u6461 1444  
                         u6381 121C                           u5901 38CA                           u5670 5668  
                         u3990 2BDC                           u4950 449A                           u6630 191A  
                         u6550 1706                           u6470 147A                           u6390 1264  
                         u5910 38F2                           u5671 5664                           u3991 2BD8  
                         u4951 4496                           u7087 43C0                           u6631 1916  
                         u6551 1702                           u6471 1476                           u6391 1260  
                         u4960 44B2                           u6640 194C                           u6560 175C  
                         u6480 14DC                           u5680 57B6                           u5920 390E  
                         u4961 44AE                           u7097 43EC                           u6641 1948  
                         u6561 1758                           u6481 14D8                           u5681 57B2  
                         u5921 390A                           u6570 17BE                           u6490 150E  
                         u5930 3962                           u6650 35FE                           u6571 17BA  
                         u6491 150A                           u5915 38E8                           u6707 3728  
                         u6651 35FA                           u6580 17F0                           u5940 397E  
                         u5860 3810                           u6660 3618                           u6581 17EC  
                         u5941 397A                           u6717 3758                           u6661 3614  
                         u6590 1822                           u5950 39BA                           u5870 383E  
                         u6670 3638                           u6591 181E                           u6807 1480  
                         u5951 39B6                           u5935 3958                           u5871 383A  
                         u6727 37B4                           u6671 362E                           u5880 3860  
                         u5960 19A2                           u6817 14A2                           u5881 385C  
                         u5865 3806                           u5961 199E                           u6737 4958  
                         u5970 19EC                           u6690 36E6                           u6907 1952  
                         u6827 1546                           u5971 19E8                           u6747 49B2  
                         u6691 36E2                           u5980 19FC                           u6917 1974  
                         u6837 1568                           u5981 19F8                           u6757 49D6  
                         u5990 1A3A                           u6927 4006                           u6847 1654  
                         u6767 561A                           u5895 3874                           u5991 1A36  
                         u5896 387E                           u6688 363C                           u6937 4032  
                         u6857 1676                           u6777 12CE                           u5897 388E  
                         u6947 4102                           u6867 1762                           u6787 12DC  
                         u6957 4144                           u6877 1784                           u6797 13DC  
                         u6967 4170                           u6887 1828                           u6977 4240  
                         u6897 184A                           u6987 44FE                           u6997 452A  
                         abs@a 0017                           _dbuf 013C                           _labs 5138  
                         _main 3580                           _dtoa 3302                           _prec 00F5  
                         pad@i 001C                           pad@p 0019                           fsr1h 000FE2  
                         fsr2h 000FDA                           indf2 000FDF                           fsr1l 000FE1  
                         pad@w 001E                           fsr2l 000FD9                           btemp 005B  
                         _stop 4D5E                  ___fpclassifyf 4826                           prodh 000FF4  
                         prodl 000FF3                           start 0068                ___fldiv@new_exp 0047  
                  main@string4 018C         __end_of_color_read_Red 5344                __end_of_HighISR 0068  
                 ___param_bank 000000                    _turnLeft_90 43A2                   main@clearRef 01A4  
                        ??_abs 0019                          ??_pad 001B                  ___fltol@sign1 000D  
              __end_of___aodiv 3D18                          ?_labs 0005                __end_of___fladd 2838  
                        ?_main 0001                          ?_dtoa 0020                __end_of___aomod 3FE8  
              __end_of___fldiv 2FFC                __end_of___flneg 5606                __end_of___flmul 2C62  
              __end_of___flsub 54C4                __end_of___fltol 4722                          ?_stop 0018  
              __end_of___lwdiv 5138                          i2l441 5712                          i2l455 57EA  
                        i2l448 5694                          i2l475 0058                          i2l477 005C  
                 vfpfcnvrt@fmt 00A5                          _TMR0H 000FD4                          _TMR0L 000FD3  
   __end_of_I2C_2_Master_Start 580C     __end_of_I2C_2_Master_Write 57F8                          _flags 00FB  
                        _fputc 4C94                          _fputs 5508                          labs@a 0005  
                        pad@fp 0015                          _width 00F3                          _putch 581A  
                        dtoa@d 0022                          dtoa@i 0040                          dtoa@n 0038  
                        dtoa@p 0034                          dtoa@s 0042                          dtoa@w 0036  
                        tablat 000FF5                __end_of_reverse 4BC2                          ttemp5 005C  
                        ttemp6 005F                          ttemp7 0063                          status 000FD8  
                        wtemp8 005C                __end_of_sprintf 52A4                 ?___fpclassifyf 0005  
      __end_of_color_read_Blue 5434          _I2C_2_Master_RepStart 580C             putCharToRxBuf@byte 0001  
              ?_color_read_Red 0009                __initialization 5434                   __end_of_labs 519E  
                 __end_of_main 37C6                   __end_of_dtoa 3580                i2_isDataInTxBuf 57D4  
                 __end_of_stop 4E0C                   _turnLeft_135 44E0             putCharToTxBuf@byte 0005  
                colorDetect@mL 0068                         ??_labs 0009                  colorDetect@mR 006A  
                       ??_main 00D5                         ??_dtoa 002A                         ??_stop 001C  
                __activetblptr 000003                   _turnRight_90 4264                   ?_setMotorPWM 0012  
                       ?_fputc 0005                         ?_fputs 000E                         _CCPR1H 000FAA  
                       _CCPR2H 000FA6                         _CCPR3H 000F25                         _CCPR4H 000F21  
                       ?_putch 0001          colorDetect@greenPrint 008A                         _RC0PPS 000E62  
                       _RC4REG 000EE3                         _RE2PPS 000E74                         _RD5PPS 000E6F  
                       _RC7PPS 000E69                         _RD6PPS 000E70                         _RE4PPS 000E76  
                       i2l3173 57D4                         i2l5241 5710                         i2l5243 566A  
                       i2l5235 56EC                         i2l5245 567A                         i2l5237 56FC  
                       i2l5421 004C                         i2l5413 0012                         i2l5247 567E  
                       i2l5239 5700                         i2l5415 0022                         i2l5417 0028  
                       i2l5419 0038                         _RG6PPS 000E88                      ??_HighISR 0003  
     __end_of_color_click_init 563A                         _RX4PPS 000E15                         _TX4REG 000EE4  
             __end_of___xxtofl 3B90               __end_of_getColor 51FC                   _CCPTMRS0bits 000FAD  
                 vfprintf@cfmt 00BA                         ___flge 4722               _getCharFromTxBuf 566A  
                       ___fleq 4E0C                      ??___aodiv 0015                      ??___fladd 000D  
                    ??___aomod 0015                         ___wmul 573C                      ??___fldiv 003E  
                    ??___flneg 0009                      ??___flmul 001D                      ??___flsub 0036  
                    ??___fltol 0009                         _efgtoa 197E                      ??___lwdiv 000F  
                       _floorf 37C6                         _memcpy 52A4                         clear_0 545A  
                       clear_1 5466                         isa$std 000001                         pad@buf 0017  
                main@motorLeft 01C9                         dtoa@fp 0020                         _strcpy 54C4  
                       fputc@c 0005              ?_TxBufferedString 0006                         fputs@c 0012  
                       fputs@i 0013                         fputs@s 000E                ___fpclassifyf@e 000D  
              ___fpclassifyf@u 000F                ___fpclassifyf@x 0005                   __mediumconst 0000  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
           ??_TxBufferedString 0008                      ??_reverse 001C               __end_of_whiteCal 4A08  
                       putch@c 0001               __end_of_vfprintf 5252                         stop@mL 0018  
                       stop@mR 001A              ??_initDCmotorsPWM 0007                      ??_sprintf 0057  
             __end_of_turn_180 4126                     ___flge@ff1 0036                     ___flge@ff2 003A  
              ??___fpclassifyf 0009                   ___xxtofl@arg 000F                   ___xxtofl@exp 000E  
                 ___xxtofl@val 0005                     ___fleq@ff1 0005                     ___fleq@ff2 0009  
        __end_of_isDataInTxBuf 57D4                     __accesstop 0060        __end_of__initialization 5474  
     __end_of_color_read_Clear 53E4                     ___flneg@f1 0005       __end_of_color_read_Green 5394  
       ?_I2C_2_Master_RepStart 0001        __end_ofi2_isDataInTxBuf 57EC                  ___rparam_used 000001  
                   ___fltol@f1 0005               ?_color_read_Blue 0009              main@ambientRGBVal 01A8  
               __pcstackCOMRAM 0001                  ?_DCmotorsInit 0005                   __pidataBANK0 5816  
                __end_of_fputc 4D5E                  __end_of_fputs 554C                  __end_of_putch 581C  
                      ??_fputc 0009                        ??_fputs 0012             _reverseSquareRight 4F46  
                      ??_putch 0005                     __pbssBANK0 00D7                     __pbssBANK1 0100  
                   _ambientCal 4A08            ?_reverseSquareRight 0024                  _turnRight_135 4126  
            _color_writetoaddr 5782                   _T2CLKCONbits 000FBF                 ??_DCmotorsInit 0009  
                      ?___flge 0036                        ?___fleq 0005                   ?_turnLeft_90 001E  
           ?_color_writetoaddr 0007                        ?___wmul 0005                        ?_efgtoa 0070  
                      ?_floorf 004F                        ?_memcpy 0005            ??_color_writetoaddr 0008  
                      ?_strcpy 0005           ??_reverseSquareRight 0028                      ?___xxtofl 0005  
                      _SP4BRGH 000EE6                        _SP4BRGL 000EE5                      ?_getColor 0010  
                      _SSP2ADD 000ED6                        _SSP2BUF 000ED5         color_writetoaddr@value 0007  
             ??_color_read_Red 000B                        _HighISR 0008                 ?_turnRight_135 001E  
    __end_of_color_writetoaddr 57A2               ?i2_isDataInTxBuf 0001             _I2C_2_Master_Start 5802  
                   _initUSART4 5762             _I2C_2_Master_Write 57EC                        __Hparam 0000  
                      __Lparam 0000              color_read_Red@tmp 000E                        ___aodiv 3B90  
                      ___fladd 2378                        ___aomod 3E84                        ___fldiv 2C62  
                      ___flneg 55CE                        ___flmul 2838                      ?_whiteCal 0012  
                      ___flsub 547E                        ___fltol 461C            ?_I2C_2_Master_Start 0001  
                      ___lwdiv 50C4            ?_I2C_2_Master_Write 0001                     _off_period 00F7  
                    ?_vfprintf 00B4                   __psmallconst 0E00                      ?_turn_180 001E  
                      __pcinit 5434                        __ramtop 0E00                        __ptext0 3580  
                      __ptext1 4924                        __ptext2 5252                        __ptext3 51FC  
                      __ptext4 2FFC                        __ptext5 197E                        __ptext6 54C4  
                      __ptext7 52A4                        __ptext8 5138                        __ptext9 37C6  
            colorDetect@RGBVal 007E                      _T2CONbits 000FBD                     ??___xxtofl 0009  
                    _T2HLTbits 000FBE                        efgtoa@c 0076                        efgtoa@d 0082  
                      efgtoa@e 0086                        efgtoa@f 0072                        efgtoa@g 0099  
                      efgtoa@h 0090                        efgtoa@i 008E                        efgtoa@l 0094  
                      efgtoa@m 0084                        efgtoa@n 009D                        efgtoa@p 0079  
                      efgtoa@t 007B                        efgtoa@u 009F                        efgtoa@w 0088  
                      _reverse 4AEC                     ??_getColor 0012                  _RxBufWriteCnt 005A  
     __end_of_getCharFromTxBuf 5696                 main@motorRight 01C0                        _sprintf 5252  
         ??_I2C_2_Master_Start 0006           ??_I2C_2_Master_Write 0006           end_of_initialization 5474  
            __end_of_sendTxBuf 57BC                        floorf@e 006A                        floorf@m 0066  
                      floorf@u 006C                        floorf@x 004F                 DCmotorsInit@mL 0005  
               DCmotorsInit@mR 0007                        memcpy@d 000B                        memcpy@n 0009  
                      memcpy@s 000D                    ?_ambientCal 0012                        fputc@fp 0007  
                      fputs@fp 0010              ?_color_click_init 0001              colorDetect@whiteB 0074  
            colorDetect@whiteG 0070              colorDetect@whiteR 006C             ??_color_click_init 0009  
            __end_of_vfpfcnvrt 3302                     efgtoa@mode 0080                     efgtoa@sign 0098  
                      postdec1 000FE5                        postdec2 000FDD                        postinc0 000FEE  
                      postinc1 000FE6                        postinc2 000FDE               vfpfcnvrt@convarg 00A9  
                   ??_whiteCal 0014                     ??_vfprintf 0057                     ??_turn_180 0022  
                      strcpy@d 000B                        strcpy@s 0009                _initDCmotorsPWM 4EB6  
                    _PORTFbits 000F8E             setMotorPWM@negDuty 0017                    ___fladd@grs 0014  
                   main@RGBVal 01B0                  ___xxtofl@sign 000D                      _TRISAbits 000F81  
           setMotorPWM@posDuty 0016                      _TRISCbits 000F83                      _TRISDbits 000F84  
                    _TRISEbits 000F85                      _TRISFbits 000F86                      _TRISGbits 000F87  
                    _TRISHbits 000F88           __end_of_DCmotorsInit 4C94                    ___fldiv@grs 0049  
                  ___fldiv@rem 0042            reverseSquareLeft@mL 0024            reverseSquareLeft@mR 0026  
     color_writetoaddr@address 0008        ??_I2C_2_Master_RepStart 0006                ??_turnRight_135 0022  
                  ___flmul@grs 0022                    _CCP1CONbits 000FAB              ?_color_read_Clear 0009  
                 _EUSART4RXbuf 00D7                   _EUSART4TXbuf 0100                    _CCP2CONbits 000FA7  
            ?_color_read_Green 0009                    _CCP3CONbits 000F26                    ?_initUSART4 0001  
                  _CCP4CONbits 000F22                     main@whiteC 01A0             ??_color_read_Clear 000B  
           ??_color_read_Green 000B                  ??_colorDetect 004F                 __end_of___flge 4826  
               __end_of___fleq 4EB6                    vfpfcnvrt@ap 00A7                    vfpfcnvrt@cp 00B2  
                  vfpfcnvrt@fp 00A3                 __end_of___wmul 5762                 __end_of_efgtoa 2378  
               __end_of_floorf 39DC                 __end_of_memcpy 52F4                     floorf@F526 00EB  
       colorDetect@whiteRGBVal 0066                 __end_of_strcpy 5508            color_read_Clear@tmp 000E  
          start_initialization 5434           colorDetect@bluePrint 008E                    __end_of_abs 55CE  
                  __end_of_pad 50C4                  _TxBufWriteCnt 0058          __end_of___fpclassifyf 4924  
          color_read_Green@tmp 000E        __end_of_initDCmotorsPWM 4F46                    vfprintf@fmt 00B6  
                     ??___flge 003E                       ??___fleq 000D                       ??___wmul 0009  
                     ??_efgtoa 0053                 _putCharToRxBuf 56EA                 _putCharToTxBuf 56C0  
                  __pdataBANK0 00FC                       ??_floorf 0060                       ??_memcpy 000B  
          __end_of_colorDetect 197E                       ??_strcpy 0009                      ___fladd@a 0009  
                    ___fladd@b 0005                      ___fldiv@a 003A                      ___fldiv@b 0036  
                    ___flmul@a 0019                      ___flmul@b 0015                    __pbssCOMRAM 0057  
                    ___flsub@a 0032                      ___flsub@b 002E                  __pcstackBANK0 0060  
                __pcstackBANK1 018C               ___aodiv@dividend 0005                       ?_HighISR 0001  
            _reverseSquareLeft 4FC8             ?_reverseSquareLeft 0024                    _efgtoa$2725 007D  
             ___lwdiv@dividend 000B                      _dtoa$2694 0032         __end_of_putCharToRxBuf 5714  
       __end_of_putCharToTxBuf 56EA                      __pintcode 0008                       ?___aodiv 0005  
                     ?___fladd 0005                       ?___aomod 0005                       ?___fldiv 0036  
             ___aodiv@quotient 0017                       ?___flneg 0005                       ?___flmul 0015  
                     ?___flsub 002E                  ?_turnLeft_135 001E                       ?___fltol 0005  
                     ?___lwdiv 000B            ??_reverseSquareLeft 0028                turnRight_135@mL 001E  
              turnRight_135@mR 0020         TxBufferedString@string 0006                 turnLeft_135@mL 001E  
               turnLeft_135@mR 0020           I2C_2_Master_Read@ack 0007           I2C_2_Master_Read@tmp 0008  
                  __smallconst 0E00              _I2C_2_Master_Idle 5714                  ?_turnRight_90 001E  
            _I2C_2_Master_Init 5696              _I2C_2_Master_Read 554C              _I2C_2_Master_Stop 57F8  
                 _RxBufReadCnt 0059                       ?_reverse 0018             ?_I2C_2_Master_Idle 0001  
           ?_I2C_2_Master_Init 0001             ?_I2C_2_Master_Read 0001                  ??_setMotorPWM 0014  
           ?_I2C_2_Master_Stop 0001               ___lwdiv@quotient 000F       initDCmotorsPWM@PWMperiod 0005  
                     ?_sprintf 00BC              ?_getCharFromTxBuf 0001      __end_of_reverseSquareLeft 504A  
           ??_getCharFromTxBuf 0001                   ??_ambientCal 0014            ??_I2C_2_Master_Idle 0005  
          ??_I2C_2_Master_Init 0005            ??_I2C_2_Master_Read 0006                 ___wmul@product 0009  
                     _LATAbits 000F79            ??_I2C_2_Master_Stop 0006                       _LATCbits 000F7B  
                _isDataInTxBuf 57BC                       _LATDbits 000F7C                       _LATEbits 000F7D  
                     _LATFbits 000F7E                      _on_period 00F9               _TxBufferedString 563A  
                     _LATGbits 000F7F                       _LATHbits 000F80                      _sendTxBuf 57A2  
                     _IPR4bits 000E23                       _PIE4bits 000E2D                      getColor@v 0010  
                     i2u277_40 57E8                       i2u277_41 57E2                       i2u278_40 57EA  
                     _PIR4bits 000E37                       i2u570_40 567A                       i2u570_41 5676  
                     i2u583_40 0022                       i2u583_41 001E                       i2u584_40 0038  
                     i2u584_41 0034                       i2u569_40 56FC                       i2u585_40 004C  
                     i2u569_41 56F8                       i2u585_41 0048                ?_putCharToRxBuf 0001  
             ?_initDCmotorsPWM 0005                    _colorDetect 0E1C                ?_putCharToTxBuf 0001  
               ??_turnLeft_135 0022                   _DCmotorsInit 4BC2                       _SSP2CON2 000EDA  
                     _SSP2STAT 000ED8                      _vfpfcnvrt 2FFC      __end_of_I2C_2_Master_Idle 573C  
    __end_of_I2C_2_Master_Init 56C0      __end_of_I2C_2_Master_Read 558E              ___wmul@multiplier 0005  
    __end_of_I2C_2_Master_Stop 5802                 ??_turnRight_90 0022                   setMotorPWM@m 0012  
  I2C_2_Master_Write@data_byte 0006             __end_of_ambientCal 4AEC              ??_color_read_Blue 000B  
                 _TxBufReadCnt 0057                     vfpfcnvrt@c 00B1                      copy_data0 5448  
          colorDetect@ambientB 007C            colorDetect@ambientG 007A            colorDetect@ambientR 0078  
          colorDetect@clearRef 0060                 ?_isDataInTxBuf 0001  __end_of_I2C_2_Master_RepStart 5816  
           color_read_Blue@tmp 000E            __end_of_setMotorPWM 3E84                     ?_sendTxBuf 0001  
                 ??_initUSART4 0005                       __Hrparam 0000            colorDetect@redPrint 0086  
                    memcpy@tmp 000F                     vfprintf@ap 00B8                       __Lrparam 0000  
                   vfprintf@fp 00B4                     ?_vfpfcnvrt 00A3       colorDetect@ambientRGBVal 0064  
              ___aodiv@divisor 000D                ___aodiv@counter 0015                     _ANSELDbits 000EA7  
           ___fpclassifyf@F465 00EF                     _ANSELFbits 000EB4                     sprintf@fmt 00BE  
                   turn_180@mL 001E                     turn_180@mR 0020                       ___xxtofl 39DC  
                   _T0CON0bits 000FD5                     _T0CON1bits 000FD6                ___lwdiv@divisor 000D  
           __end_of_initUSART4 5782                       _getColor 519E                ___lwdiv@counter 0011  
                     __ptext10 4826                       __ptext11 461C                       __ptext20 3E84  
                     __ptext12 55CE                       __ptext21 3B90                       __ptext13 4E0C  
                     __ptext30 3FE8                       __ptext22 57A2                       __ptext14 3302  
                     __ptext31 4126                       __ptext23 57BC                       __ptext15 504A  
                     __ptext40 573C                       __ptext32 44E0                       __ptext24 5762  
                     __ptext16 5508                       __ptext41 50C4                       __ptext33 4F46  
                     __ptext25 4EB6                       __ptext17 4C94                       __ptext50 52F4  
                     __ptext42 39DC                       __ptext34 4264                       __ptext26 5606  
                     __ptext18 581A                       __ptext51 5344                       __ptext43 547E  
                     __ptext35 4FC8                       __ptext27 5782                       __ptext19 558E  
                     __ptext60 563A                       __ptext52 5394                       __ptext44 2378  
                     __ptext36 43A2                       __ptext28 5696                       __ptext61 56C0  
                     __ptext53 53E4                       __ptext45 2838                       __ptext37 4D5E  
                     __ptext29 0E1C                       __ptext62 4BC2                       __ptext54 57EC  
                     __ptext46 4722                       __ptext38 4AEC                       __ptext55 57F8  
                     __ptext47 2C62                       __ptext39 3D18                       __ptext64 57D4  
                     __ptext56 5802                       __ptext48 4A08                       __ptext65 56EA  
                     __ptext57 580C                       __ptext49 519E                       __ptext66 566A  
                     __ptext58 554C                       __ptext59 5714                    ambientCal@i 0016  
                  ambientCal@v 0012                 turnRight_90@mL 001E                 turnRight_90@mR 0020  
                 _SSP2CON1bits 000ED9                   _SSP2CON2bits 000EDA                  turnLeft_90@mL 001E  
                turnLeft_90@mR 0020                     strcpy@dest 0005          __end_of_turnRight_135 4264  
                    reverse@mL 0018                      reverse@mR 001A                       efgtoa@fp 0070  
                     efgtoa@ne 0077                       efgtoa@pp 007F                       efgtoa@ou 008A  
                ??_turnLeft_90 0022                 _turning_time45 00FE                       isa$xinst 000000  
                   _RC4STAbits 000EE7                       int$flags 005B                       _whiteCal 4924  
                     _vfprintf 51FC                       _turn_180 3FE8               ___aomod@dividend 0005  
                    whiteCal@i 0016                      whiteCal@v 0012                     _INTCONbits 000FF2  
            ??i2_isDataInTxBuf 0001                       memcpy@d1 0005                   _reverse_time 00FC  
                     memcpy@s1 0007                    _setMotorPWM 3D18           __end_of_turnLeft_135 461C  
              ??_isDataInTxBuf 0005                       intlevel2 0000                      sprintf@ap 00C8  
                  ??_sendTxBuf 0005                main@whiteRGBVal 01B8                      strcpy@src 0007  
         __end_of_turnRight_90 43A2                    efgtoa@nmode 0081                ___aomod@divisor 000D  
                  ??_vfpfcnvrt 0055                ___aomod@counter 0015               _color_click_init 5606  
          __end_of_turnLeft_90 44E0       __end_of_TxBufferedString 566A                       sprintf@f 00CA  
                     sprintf@s 00BC                     _SSP2DATPPS 000E1D                     _SSP2CLKPPS 000E1C  
                ___fladd@signs 0011                     _TX4STAbits 000EE8                   ___aodiv@sign 0016  
                 ___fladd@aexp 0012                   ___fladd@bexp 0013               ??_putCharToRxBuf 0001  
             ??_putCharToTxBuf 0005                   ___aomod@sign 0016                   ?_colorDetect 0060  

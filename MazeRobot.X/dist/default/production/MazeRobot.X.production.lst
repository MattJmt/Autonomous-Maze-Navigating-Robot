

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Tue Dec 13 16:46:23 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    24                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    25                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    26                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    27                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    28   000000                     
    29                           ; Version 2.35
    30                           ; Generated 05/05/2021 GMT
    31                           ; 
    32                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    33                           ; All rights reserved.
    34                           ; 
    35                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    36                           ; 
    37                           ; Redistribution and use in source and binary forms, with or without modification, are
    38                           ; permitted provided that the following conditions are met:
    39                           ; 
    40                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    41                           ;        conditions and the following disclaimer.
    42                           ; 
    43                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    44                           ;        of conditions and the following disclaimer in the documentation and/or other
    45                           ;        materials provided with the distribution. Publication is not required when
    46                           ;        this file is used in an embedded application.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC18F67K40 Definitions
    62                           ; 
    63                           ; SFR Addresses
    64   000000                     
    65                           	psect	idataCOMRAM
    66   000760                     __pidataCOMRAM:
    67                           	callstack 0
    68                           
    69                           ;initializer for _reverse_time
    70   000760  00C8               	dw	200
    71                           
    72                           ;initializer for _turning_time45
    73   000762  0048               	dw	72
    74   000000                     _TRISFbits	set	3974
    75   000000                     _TRISGbits	set	3975
    76   000000                     _TRISEbits	set	3973
    77   000000                     _SSP2CON2bits	set	3802
    78   000000                     _SSP2CLKPPS	set	3612
    79   000000                     _SSP2DATPPS	set	3613
    80   000000                     _ANSELDbits	set	3751
    81   000000                     _SSP2ADD	set	3798
    82   000000                     _SSP2CON1bits	set	3801
    83   000000                     _LATCbits	set	3963
    84   000000                     _LATEbits	set	3965
    85   000000                     _SSP2CON2	set	3802
    86   000000                     _TRISDbits	set	3972
    87   000000                     _CCPR4H	set	3873
    88   000000                     _CCPR3H	set	3877
    89   000000                     _SSP2STAT	set	3800
    90   000000                     _ANSELFbits	set	3764
    91   000000                     _SSP2BUF	set	3797
    92   000000                     _PIE0bits	set	3625
    93   000000                     _RC7PPS	set	3689
    94   000000                     _RD5PPS	set	3695
    95   000000                     _RE2PPS	set	3700
    96   000000                     _RD6PPS	set	3696
    97   000000                     _LATGbits	set	3967
    98   000000                     _TRISCbits	set	3971
    99   000000                     _PORTFbits	set	3982
   100   000000                     _T2PR	set	4028
   101   000000                     _T2CONbits	set	4029
   102   000000                     _CCPR2H	set	4006
   103   000000                     _CCPR1H	set	4010
   104   000000                     _RE4PPS	set	3702
   105   000000                     _RG6PPS	set	3720
   106   000000                     _TMR0L	set	4051
   107   000000                     _TMR0H	set	4052
   108   000000                     _T0CON0bits	set	4053
   109   000000                     _T0CON1bits	set	4054
   110   000000                     _T2CLKCONbits	set	4031
   111   000000                     _T2HLTbits	set	4030
   112   000000                     _CCP1CONbits	set	4011
   113   000000                     _CCPTMRS0bits	set	4013
   114   000000                     _CCP2CONbits	set	4007
   115   000000                     _CCP3CONbits	set	3878
   116   000000                     _CCP4CONbits	set	3874
   117   000000                     _INTCONbits	set	4082
   118   000000                     _PIR0bits	set	3635
   119                           
   120                           ; #config settings
   121                           
   122                           	psect	cinit
   123   0006D2                     __pcinit:
   124                           	callstack 0
   125   0006D2                     start_initialization:
   126                           	callstack 0
   127   0006D2                     __initialization:
   128                           	callstack 0
   129                           
   130                           ; Initialize objects allocated to COMRAM (4 bytes)
   131                           ; load TBLPTR registers with __pidataCOMRAM
   132   0006D2  0E60               	movlw	low __pidataCOMRAM
   133   0006D4  6EF6               	movwf	tblptrl,c
   134   0006D6  0E07               	movlw	high __pidataCOMRAM
   135   0006D8  6EF7               	movwf	tblptrh,c
   136   0006DA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   137   0006DC  6EF8               	movwf	tblptru,c
   138   0006DE  EE00  F03F         	lfsr	0,__pdataCOMRAM
   139   0006E2  EE10 F004          	lfsr	1,4
   140   0006E6                     copy_data0:
   141   0006E6  0009               	tblrd		*+
   142   0006E8  CFF5 FFEE          	movff	tablat,postinc0
   143   0006EC  50E5               	movf	postdec1,w,c
   144   0006EE  50E1               	movf	fsr1l,w,c
   145   0006F0  E1FA               	bnz	copy_data0
   146                           
   147                           ; Clear objects allocated to COMRAM (4 bytes)
   148   0006F2  6A3E               	clrf	(__pbssCOMRAM+3)& (0+255),c
   149   0006F4  6A3D               	clrf	(__pbssCOMRAM+2)& (0+255),c
   150   0006F6  6A3C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   151   0006F8  6A3B               	clrf	__pbssCOMRAM& (0+255),c
   152   0006FA                     end_of_initialization:
   153                           	callstack 0
   154   0006FA                     __end_of__initialization:
   155                           	callstack 0
   156   0006FA  9043               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   157   0006FC  9243               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   158   0006FE  0100               	movlb	0
   159   000700  EFEA  F001         	goto	_main	;jump to C main() function
   160                           
   161                           	psect	bssCOMRAM
   162   00003B                     __pbssCOMRAM:
   163                           	callstack 0
   164   00003B                     _off_period:
   165                           	callstack 0
   166   00003B                     	ds	2
   167   00003D                     _on_period:
   168                           	callstack 0
   169   00003D                     	ds	2
   170                           
   171                           	psect	dataCOMRAM
   172   00003F                     __pdataCOMRAM:
   173                           	callstack 0
   174   00003F                     _reverse_time:
   175                           	callstack 0
   176   00003F                     	ds	2
   177   000041                     _turning_time45:
   178                           	callstack 0
   179   000041                     	ds	2
   180                           
   181                           	psect	cstackCOMRAM
   182   000001                     __pcstackCOMRAM:
   183                           	callstack 0
   184   000001                     write16bitTMR0val@tmp:
   185                           	callstack 0
   186                           
   187                           ; 2 bytes @ 0x0
   188   000001                     	ds	2
   189   000003                     ?___wmul:
   190                           	callstack 0
   191   000003                     initDCmotorsPWM@PWMperiod:
   192                           	callstack 0
   193   000003                     ___wmul@multiplier:
   194                           	callstack 0
   195                           
   196                           ; 2 bytes @ 0x2
   197   000003                     	ds	2
   198   000005                     ___wmul@multiplicand:
   199                           	callstack 0
   200                           
   201                           ; 2 bytes @ 0x4
   202   000005                     	ds	2
   203   000007                     ___wmul@product:
   204                           	callstack 0
   205                           
   206                           ; 2 bytes @ 0x6
   207   000007                     	ds	2
   208   000009                     ?___lwdiv:
   209                           	callstack 0
   210   000009                     ___lwdiv@dividend:
   211                           	callstack 0
   212                           
   213                           ; 2 bytes @ 0x8
   214   000009                     	ds	2
   215   00000B                     ___lwdiv@divisor:
   216                           	callstack 0
   217                           
   218                           ; 2 bytes @ 0xA
   219   00000B                     	ds	2
   220   00000D                     ___lwdiv@quotient:
   221                           	callstack 0
   222                           
   223                           ; 2 bytes @ 0xC
   224   00000D                     	ds	2
   225   00000F                     ___lwdiv@counter:
   226                           	callstack 0
   227                           
   228                           ; 1 bytes @ 0xE
   229   00000F                     	ds	1
   230   000010                     setMotorPWM@m:
   231                           	callstack 0
   232                           
   233                           ; 2 bytes @ 0xF
   234   000010                     	ds	2
   235   000012                     ??_setMotorPWM:
   236                           
   237                           ; 1 bytes @ 0x11
   238   000012                     	ds	2
   239   000014                     setMotorPWM@posDuty:
   240                           	callstack 0
   241                           
   242                           ; 1 bytes @ 0x13
   243   000014                     	ds	1
   244   000015                     setMotorPWM@negDuty:
   245                           	callstack 0
   246                           
   247                           ; 1 bytes @ 0x14
   248   000015                     	ds	1
   249   000016                     stop@mL:
   250                           	callstack 0
   251   000016                     reverse@mL:
   252                           	callstack 0
   253                           
   254                           ; 2 bytes @ 0x15
   255   000016                     	ds	2
   256   000018                     stop@mR:
   257                           	callstack 0
   258   000018                     reverse@mR:
   259                           	callstack 0
   260                           
   261                           ; 2 bytes @ 0x17
   262   000018                     	ds	2
   263   00001A                     ??_stop:
   264   00001A                     
   265                           ; 1 bytes @ 0x19
   266   00001A                     	ds	2
   267   00001C                     turnRight_90@mL:
   268                           	callstack 0
   269                           
   270                           ; 2 bytes @ 0x1B
   271   00001C                     	ds	2
   272   00001E                     turnRight_90@mR:
   273                           	callstack 0
   274                           
   275                           ; 2 bytes @ 0x1D
   276   00001E                     	ds	2
   277   000020                     ??_turnRight_90:
   278                           
   279                           ; 1 bytes @ 0x1F
   280   000020                     	ds	2
   281   000022                     reverseSquareRight@mL:
   282                           	callstack 0
   283                           
   284                           ; 2 bytes @ 0x21
   285   000022                     	ds	2
   286   000024                     reverseSquareRight@mR:
   287                           	callstack 0
   288                           
   289                           ; 2 bytes @ 0x23
   290   000024                     	ds	2
   291   000026                     ??_reverseSquareRight:
   292                           
   293                           ; 1 bytes @ 0x25
   294   000026                     	ds	2
   295   000028                     main@count:
   296                           	callstack 0
   297                           
   298                           ; 1 bytes @ 0x27
   299   000028                     	ds	1
   300   000029                     main@motorRight:
   301                           	callstack 0
   302                           
   303                           ; 9 bytes @ 0x28
   304   000029                     	ds	9
   305   000032                     main@motorLeft:
   306                           	callstack 0
   307                           
   308                           ; 9 bytes @ 0x31
   309   000032                     	ds	9
   310                           
   311 ;;
   312 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   313 ;;
   314 ;; *************** function _main *****************
   315 ;; Defined at:
   316 ;;		line 16 in file "main.c"
   317 ;; Parameters:    Size  Location     Type
   318 ;;		None
   319 ;; Auto vars:     Size  Location     Type
   320 ;;  motorLeft       9   49[COMRAM] struct DC_motor
   321 ;;  motorRight      9   40[COMRAM] struct DC_motor
   322 ;;  count           1   39[COMRAM] unsigned char 
   323 ;; Return value:  Size  Location     Type
   324 ;;                  1    wreg      void 
   325 ;; Registers used:
   326 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   327 ;; Tracked objects:
   328 ;;		On entry : 0/0
   329 ;;		On exit  : 0/0
   330 ;;		Unchanged: 0/0
   331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   333 ;;      Locals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   335 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   336 ;;Total ram usage:       19 bytes
   337 ;; Hardware stack levels required when called: 7
   338 ;; This function calls:
   339 ;;		_Interrupts_init
   340 ;;		_Timer0_init
   341 ;;		_initDCmotorsPWM
   342 ;;		_reverseSquareRight
   343 ;;		_stop
   344 ;; This function is called by:
   345 ;;		Startup code after reset
   346 ;; This function uses a non-reentrant model
   347 ;;
   348                           
   349                           	psect	text0
   350   0003D4                     __ptext0:
   351                           	callstack 0
   352   0003D4                     _main:
   353                           	callstack 24
   354   0003D4                     
   355                           ;main.c: 17:     Timer0_init();
   356   0003D4  EC95  F003         	call	_Timer0_init	;wreg free
   357   0003D8                     
   358                           ;main.c: 18:     Interrupts_init();
   359   0003D8  ECA5  F003         	call	_Interrupts_init	;wreg free
   360   0003DC                     
   361                           ;main.c: 19:     initDCmotorsPWM(199);
   362   0003DC  0E00               	movlw	0
   363   0003DE  6E04               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   364   0003E0  0EC7               	movlw	199
   365   0003E2  6E03               	movwf	initDCmotorsPWM@PWMperiod^0,c
   366   0003E4  ECA6  F002         	call	_initDCmotorsPWM	;wreg free
   367   0003E8                     
   368                           ;main.c: 21:     TRISCbits.TRISC5 = 0;
   369   0003E8  9A83               	bcf	131,5,c	;volatile
   370   0003EA                     
   371                           ;main.c: 24:     DC_motor motorLeft,motorRight;;main.c: 26:     motorLeft.power = 0;
   372   0003EA  0E00               	movlw	0
   373   0003EC  6E32               	movwf	main@motorLeft^0,c
   374   0003EE                     
   375                           ;main.c: 27:     motorLeft.direction = 1;
   376   0003EE  0E01               	movlw	1
   377   0003F0  6E33               	movwf	(main@motorLeft+1)^0,c
   378   0003F2                     
   379                           ;main.c: 28:     motorLeft.brakemode = 1;
   380   0003F2  0E01               	movlw	1
   381   0003F4  6E34               	movwf	(main@motorLeft+2)^0,c
   382   0003F6                     
   383                           ;main.c: 29:     motorLeft.posDutyHighByte = (unsigned char *)(&CCPR1H);
   384   0003F6  0EAA               	movlw	170
   385   0003F8  6E37               	movwf	(main@motorLeft+5)^0,c
   386   0003FA  0E0F               	movlw	15
   387   0003FC  6E38               	movwf	(main@motorLeft+6)^0,c
   388   0003FE                     
   389                           ;main.c: 30:     motorLeft.negDutyHighByte = (unsigned char *)(&CCPR2H);
   390   0003FE  0EA6               	movlw	166
   391   000400  6E39               	movwf	(main@motorLeft+7)^0,c
   392   000402  0E0F               	movlw	15
   393   000404  6E3A               	movwf	(main@motorLeft+8)^0,c
   394   000406                     
   395                           ;main.c: 31:     motorLeft.PWMperiod = 199 ;
   396   000406  0E00               	movlw	0
   397   000408  6E36               	movwf	(main@motorLeft+4)^0,c
   398   00040A  0EC7               	movlw	199
   399   00040C  6E35               	movwf	(main@motorLeft+3)^0,c
   400   00040E                     
   401                           ;main.c: 33:     motorRight.power = 0;
   402   00040E  0E00               	movlw	0
   403   000410  6E29               	movwf	main@motorRight^0,c
   404   000412                     
   405                           ;main.c: 34:     motorRight.direction = 1;
   406   000412  0E01               	movlw	1
   407   000414  6E2A               	movwf	(main@motorRight+1)^0,c
   408   000416                     
   409                           ;main.c: 35:     motorRight.brakemode = 1;
   410   000416  0E01               	movlw	1
   411   000418  6E2B               	movwf	(main@motorRight+2)^0,c
   412   00041A                     
   413                           ;main.c: 36:     motorRight.posDutyHighByte = (unsigned char *)(&CCPR3H);
   414   00041A  0E25               	movlw	37
   415   00041C  6E2E               	movwf	(main@motorRight+5)^0,c
   416   00041E  0E0F               	movlw	15
   417   000420  6E2F               	movwf	(main@motorRight+6)^0,c
   418   000422                     
   419                           ;main.c: 37:     motorRight.negDutyHighByte = (unsigned char *)(&CCPR4H);
   420   000422  0E21               	movlw	33
   421   000424  6E30               	movwf	(main@motorRight+7)^0,c
   422   000426  0E0F               	movlw	15
   423   000428  6E31               	movwf	(main@motorRight+8)^0,c
   424   00042A                     
   425                           ;main.c: 38:     motorRight.PWMperiod = 199 ;
   426   00042A  0E00               	movlw	0
   427   00042C  6E2D               	movwf	(main@motorRight+4)^0,c
   428   00042E  0EC7               	movlw	199
   429   000430  6E2C               	movwf	(main@motorRight+3)^0,c
   430   000432                     
   431                           ;main.c: 40:     char count = 0;
   432   000432  0E00               	movlw	0
   433   000434  6E28               	movwf	main@count^0,c
   434   000436                     
   435                           ;main.c: 42:     TRISFbits.TRISF2=1;
   436   000436  8486               	bsf	134,2,c	;volatile
   437   000438                     
   438                           ;main.c: 43:     ANSELFbits.ANSELF2=0;
   439   000438  010E               	movlb	14	; () banked
   440   00043A  95B4               	bcf	180,2,b	;volatile
   441   00043C                     
   442                           ; BSR set to: 14
   443                           ;main.c: 45:     if (!PORTFbits.RF2){
   444   00043C  B48E               	btfsc	142,2,c	;volatile
   445   00043E  EF23  F002         	goto	u1031
   446   000442  EF25  F002         	goto	u1030
   447   000446                     u1031:
   448   000446  EF4D  F002         	goto	l265
   449   00044A                     u1030:
   450   00044A                     l1934:
   451                           
   452                           ;main.c: 48:             if (count < 4 ){
   453   00044A  0E04               	movlw	4
   454   00044C  6028               	cpfslt	main@count^0,c
   455   00044E  EF2B  F002         	goto	u1041
   456   000452  EF2D  F002         	goto	u1040
   457   000456                     u1041:
   458   000456  EF25  F002         	goto	l1934
   459   00045A                     u1040:
   460   00045A                     
   461                           ;main.c: 54:                 stop(&motorLeft, &motorRight);
   462   00045A  0E32               	movlw	low main@motorLeft
   463   00045C  6E16               	movwf	stop@mL^0,c
   464   00045E  0E00               	movlw	high main@motorLeft
   465   000460  6E17               	movwf	(stop@mL+1)^0,c
   466   000462  0E29               	movlw	low main@motorRight
   467   000464  6E18               	movwf	stop@mR^0,c
   468   000466  0E00               	movlw	high main@motorRight
   469   000468  6E19               	movwf	(stop@mR+1)^0,c
   470   00046A  EC4F  F002         	call	_stop	;wreg free
   471                           
   472                           ;main.c: 56:                 reverseSquareRight(&motorLeft, &motorRight);
   473   00046E  0E32               	movlw	low main@motorLeft
   474   000470  6E22               	movwf	reverseSquareRight@mL^0,c
   475   000472  0E00               	movlw	high main@motorLeft
   476   000474  6E23               	movwf	(reverseSquareRight@mL+1)^0,c
   477   000476  0E29               	movlw	low main@motorRight
   478   000478  6E24               	movwf	reverseSquareRight@mR^0,c
   479   00047A  0E00               	movlw	high main@motorRight
   480   00047C  6E25               	movwf	(reverseSquareRight@mR+1)^0,c
   481   00047E  ECEE  F002         	call	_reverseSquareRight	;wreg free
   482                           
   483                           ;main.c: 58:                 stop(&motorLeft, &motorRight);
   484   000482  0E32               	movlw	low main@motorLeft
   485   000484  6E16               	movwf	stop@mL^0,c
   486   000486  0E00               	movlw	high main@motorLeft
   487   000488  6E17               	movwf	(stop@mL+1)^0,c
   488   00048A  0E29               	movlw	low main@motorRight
   489   00048C  6E18               	movwf	stop@mR^0,c
   490   00048E  0E00               	movlw	high main@motorRight
   491   000490  6E19               	movwf	(stop@mR+1)^0,c
   492   000492  EC4F  F002         	call	_stop	;wreg free
   493   000496  EF25  F002         	goto	l1934
   494   00049A                     l265:
   495                           
   496                           ; BSR set to: 14
   497   00049A  EF28  F000         	goto	start
   498   00049E                     __end_of_main:
   499                           	callstack 0
   500                           
   501 ;; *************** function _reverseSquareRight *****************
   502 ;; Defined at:
   503 ;;		line 366 in file "dc_motor.c"
   504 ;; Parameters:    Size  Location     Type
   505 ;;  mL              2   33[COMRAM] PTR struct DC_motor
   506 ;;		 -> main@motorLeft(9), 
   507 ;;  mR              2   35[COMRAM] PTR struct DC_motor
   508 ;;		 -> main@motorRight(9), 
   509 ;; Auto vars:     Size  Location     Type
   510 ;;		None
   511 ;; Return value:  Size  Location     Type
   512 ;;                  1    wreg      void 
   513 ;; Registers used:
   514 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   515 ;; Tracked objects:
   516 ;;		On entry : 0/0
   517 ;;		On exit  : 0/0
   518 ;;		Unchanged: 0/0
   519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   520 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   521 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   522 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   523 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   524 ;;Total ram usage:        6 bytes
   525 ;; Hardware stack levels used: 1
   526 ;; Hardware stack levels required when called: 6
   527 ;; This function calls:
   528 ;;		_reverse
   529 ;;		_stop
   530 ;;		_turnRight_90
   531 ;; This function is called by:
   532 ;;		_main
   533 ;; This function uses a non-reentrant model
   534 ;;
   535                           
   536                           	psect	text1
   537   0005DC                     __ptext1:
   538                           	callstack 0
   539   0005DC                     _reverseSquareRight:
   540                           	callstack 24
   541   0005DC                     
   542                           ;dc_motor.c: 366: void reverseSquareRight(DC_motor *mL, DC_motor *mR);dc_motor.c: 367: {
      +                          ;dc_motor.c: 369:     stop(mL, mR);
   543   0005DC  C022  F016         	movff	reverseSquareRight@mL,stop@mL
   544   0005E0  C023  F017         	movff	reverseSquareRight@mL+1,stop@mL+1
   545   0005E4  C024  F018         	movff	reverseSquareRight@mR,stop@mR
   546   0005E8  C025  F019         	movff	reverseSquareRight@mR+1,stop@mR+1
   547   0005EC  EC4F  F002         	call	_stop	;wreg free
   548   0005F0                     
   549                           ;dc_motor.c: 370:     _delay((unsigned long)((100)*(64000000/4000.0)));
   550   0005F0  0E09               	movlw	9
   551   0005F2  6E27               	movwf	(??_reverseSquareRight+1)^0,c
   552   0005F4  0E1E               	movlw	30
   553   0005F6  6E26               	movwf	??_reverseSquareRight^0,c
   554   0005F8  0EE4               	movlw	228
   555   0005FA                     u1077:
   556   0005FA  2EE8               	decfsz	wreg,f,c
   557   0005FC  D7FE               	bra	u1077
   558   0005FE  2E26               	decfsz	??_reverseSquareRight^0,f,c
   559   000600  D7FC               	bra	u1077
   560   000602  2E27               	decfsz	(??_reverseSquareRight+1)^0,f,c
   561   000604  D7FA               	bra	u1077
   562   000606  D000               	nop2	
   563   000608                     
   564                           ;dc_motor.c: 372:     reverse(mL, mR);
   565   000608  C022  F016         	movff	reverseSquareRight@mL,reverse@mL
   566   00060C  C023  F017         	movff	reverseSquareRight@mL+1,reverse@mL+1
   567   000610  C024  F018         	movff	reverseSquareRight@mR,reverse@mR
   568   000614  C025  F019         	movff	reverseSquareRight@mR+1,reverse@mR+1
   569   000618  EC7F  F001         	call	_reverse	;wreg free
   570                           
   571                           ;dc_motor.c: 373:     _delay((unsigned long)((500)*(64000000/4000.0)));
   572   00061C  0E29               	movlw	41
   573   00061E  6E27               	movwf	(??_reverseSquareRight+1)^0,c
   574   000620  0E96               	movlw	150
   575   000622  6E26               	movwf	??_reverseSquareRight^0,c
   576   000624  0E7F               	movlw	127
   577   000626                     u1087:
   578   000626  2EE8               	decfsz	wreg,f,c
   579   000628  D7FE               	bra	u1087
   580   00062A  2E26               	decfsz	??_reverseSquareRight^0,f,c
   581   00062C  D7FC               	bra	u1087
   582   00062E  2E27               	decfsz	(??_reverseSquareRight+1)^0,f,c
   583   000630  D7FA               	bra	u1087
   584   000632  F000               	nop	
   585   000634                     
   586                           ;dc_motor.c: 375:     turnRight_90(mL,mR);
   587   000634  C022  F01C         	movff	reverseSquareRight@mL,turnRight_90@mL
   588   000638  C023  F01D         	movff	reverseSquareRight@mL+1,turnRight_90@mL+1
   589   00063C  C024  F01E         	movff	reverseSquareRight@mR,turnRight_90@mR
   590   000640  C025  F01F         	movff	reverseSquareRight@mR+1,turnRight_90@mR+1
   591   000644  ECE0  F000         	call	_turnRight_90	;wreg free
   592   000648                     
   593                           ;dc_motor.c: 377:     stop(mL, mR);
   594   000648  C022  F016         	movff	reverseSquareRight@mL,stop@mL
   595   00064C  C023  F017         	movff	reverseSquareRight@mL+1,stop@mL+1
   596   000650  C024  F018         	movff	reverseSquareRight@mR,stop@mR
   597   000654  C025  F019         	movff	reverseSquareRight@mR+1,stop@mR+1
   598   000658  EC4F  F002         	call	_stop	;wreg free
   599   00065C  0012               	return		;funcret
   600   00065E                     __end_of_reverseSquareRight:
   601                           	callstack 0
   602                           
   603 ;; *************** function _turnRight_90 *****************
   604 ;; Defined at:
   605 ;;		line 253 in file "dc_motor.c"
   606 ;; Parameters:    Size  Location     Type
   607 ;;  mL              2   27[COMRAM] PTR struct DC_motor
   608 ;;		 -> main@motorLeft(9), 
   609 ;;  mR              2   29[COMRAM] PTR struct DC_motor
   610 ;;		 -> main@motorRight(9), 
   611 ;; Auto vars:     Size  Location     Type
   612 ;;		None
   613 ;; Return value:  Size  Location     Type
   614 ;;                  1    wreg      void 
   615 ;; Registers used:
   616 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   617 ;; Tracked objects:
   618 ;;		On entry : 0/0
   619 ;;		On exit  : 0/0
   620 ;;		Unchanged: 0/0
   621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   622 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   623 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   624 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   625 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   626 ;;Total ram usage:        6 bytes
   627 ;; Hardware stack levels used: 1
   628 ;; Hardware stack levels required when called: 5
   629 ;; This function calls:
   630 ;;		_reverse
   631 ;;		_setMotorPWM
   632 ;;		_stop
   633 ;; This function is called by:
   634 ;;		_reverseSquareRight
   635 ;; This function uses a non-reentrant model
   636 ;;
   637                           
   638                           	psect	text2
   639   0001C0                     __ptext2:
   640                           	callstack 0
   641   0001C0                     _turnRight_90:
   642                           	callstack 24
   643   0001C0                     
   644                           ;dc_motor.c: 253: void turnRight_90(DC_motor *mL, DC_motor *mR);dc_motor.c: 254: {;dc_mo
      +                          tor.c: 255:     stop(mL, mR);
   645   0001C0  C01C  F016         	movff	turnRight_90@mL,stop@mL
   646   0001C4  C01D  F017         	movff	turnRight_90@mL+1,stop@mL+1
   647   0001C8  C01E  F018         	movff	turnRight_90@mR,stop@mR
   648   0001CC  C01F  F019         	movff	turnRight_90@mR+1,stop@mR+1
   649   0001D0  EC4F  F002         	call	_stop	;wreg free
   650   0001D4                     
   651                           ;dc_motor.c: 256:     _delay((unsigned long)((100)*(64000000/4000.0)));
   652   0001D4  0E09               	movlw	9
   653   0001D6  6E21               	movwf	(??_turnRight_90+1)^0,c
   654   0001D8  0E1E               	movlw	30
   655   0001DA  6E20               	movwf	??_turnRight_90^0,c
   656   0001DC  0EE4               	movlw	228
   657   0001DE                     u1097:
   658   0001DE  2EE8               	decfsz	wreg,f,c
   659   0001E0  D7FE               	bra	u1097
   660   0001E2  2E20               	decfsz	??_turnRight_90^0,f,c
   661   0001E4  D7FC               	bra	u1097
   662   0001E6  2E21               	decfsz	(??_turnRight_90+1)^0,f,c
   663   0001E8  D7FA               	bra	u1097
   664   0001EA  D000               	nop2	
   665   0001EC                     
   666                           ;dc_motor.c: 258:     reverse(mL, mR);
   667   0001EC  C01C  F016         	movff	turnRight_90@mL,reverse@mL
   668   0001F0  C01D  F017         	movff	turnRight_90@mL+1,reverse@mL+1
   669   0001F4  C01E  F018         	movff	turnRight_90@mR,reverse@mR
   670   0001F8  C01F  F019         	movff	turnRight_90@mR+1,reverse@mR+1
   671   0001FC  EC7F  F001         	call	_reverse	;wreg free
   672                           
   673                           ;dc_motor.c: 259:     _delay((unsigned long)((reverse_time)*(64000000/4000.0)));
   674   000200  0E11               	movlw	17
   675   000202  6E21               	movwf	(??_turnRight_90+1)^0,c
   676   000204  0E3C               	movlw	60
   677   000206  6E20               	movwf	??_turnRight_90^0,c
   678   000208  0ECB               	movlw	203
   679   00020A                     u1107:
   680   00020A  2EE8               	decfsz	wreg,f,c
   681   00020C  D7FE               	bra	u1107
   682   00020E  2E20               	decfsz	??_turnRight_90^0,f,c
   683   000210  D7FC               	bra	u1107
   684   000212  2E21               	decfsz	(??_turnRight_90+1)^0,f,c
   685   000214  D7FA               	bra	u1107
   686   000216  F000               	nop	
   687   000218                     
   688                           ;dc_motor.c: 261:     stop(mL, mR);
   689   000218  C01C  F016         	movff	turnRight_90@mL,stop@mL
   690   00021C  C01D  F017         	movff	turnRight_90@mL+1,stop@mL+1
   691   000220  C01E  F018         	movff	turnRight_90@mR,stop@mR
   692   000224  C01F  F019         	movff	turnRight_90@mR+1,stop@mR+1
   693   000228  EC4F  F002         	call	_stop	;wreg free
   694   00022C                     
   695                           ;dc_motor.c: 263:     mL->direction = 1;
   696   00022C  EE20 F001          	lfsr	2,1
   697   000230  501C               	movf	turnRight_90@mL^0,w,c
   698   000232  26D9               	addwf	fsr2l,f,c
   699   000234  501D               	movf	(turnRight_90@mL+1)^0,w,c
   700   000236  22DA               	addwfc	fsr2h,f,c
   701   000238  0E01               	movlw	1
   702   00023A  6EDF               	movwf	indf2,c
   703   00023C                     
   704                           ;dc_motor.c: 264:     mR->direction = 0;
   705   00023C  EE20 F001          	lfsr	2,1
   706   000240  501E               	movf	turnRight_90@mR^0,w,c
   707   000242  26D9               	addwf	fsr2l,f,c
   708   000244  501F               	movf	(turnRight_90@mR+1)^0,w,c
   709   000246  22DA               	addwfc	fsr2h,f,c
   710   000248  0E00               	movlw	0
   711   00024A  6EDF               	movwf	indf2,c
   712   00024C                     
   713                           ;dc_motor.c: 266:     mL->brakemode = 1;
   714   00024C  EE20 F002          	lfsr	2,2
   715   000250  501C               	movf	turnRight_90@mL^0,w,c
   716   000252  26D9               	addwf	fsr2l,f,c
   717   000254  501D               	movf	(turnRight_90@mL+1)^0,w,c
   718   000256  22DA               	addwfc	fsr2h,f,c
   719   000258  0E01               	movlw	1
   720   00025A  6EDF               	movwf	indf2,c
   721   00025C                     
   722                           ;dc_motor.c: 267:     mL->brakemode = 1;
   723   00025C  EE20 F002          	lfsr	2,2
   724   000260  501C               	movf	turnRight_90@mL^0,w,c
   725   000262  26D9               	addwf	fsr2l,f,c
   726   000264  501D               	movf	(turnRight_90@mL+1)^0,w,c
   727   000266  22DA               	addwfc	fsr2h,f,c
   728   000268  0E01               	movlw	1
   729   00026A  6EDF               	movwf	indf2,c
   730                           
   731                           ;dc_motor.c: 269:     while((mL->power < 80) || (mR->power < 80)){
   732   00026C  EF50  F001         	goto	l1720
   733   000270                     l1714:
   734                           
   735                           ;dc_motor.c: 270:         mL->power += 10;
   736   000270  C01C  FFD9         	movff	turnRight_90@mL,fsr2l
   737   000274  C01D  FFDA         	movff	turnRight_90@mL+1,fsr2h
   738   000278  0E0A               	movlw	10
   739   00027A  26DF               	addwf	indf2,f,c
   740                           
   741                           ;dc_motor.c: 271:         mR->power += 10;
   742   00027C  C01E  FFD9         	movff	turnRight_90@mR,fsr2l
   743   000280  C01F  FFDA         	movff	turnRight_90@mR+1,fsr2h
   744   000284  0E0A               	movlw	10
   745   000286  26DF               	addwf	indf2,f,c
   746   000288                     
   747                           ;dc_motor.c: 272:         setMotorPWM(mL);
   748   000288  C01C  F010         	movff	turnRight_90@mL,setMotorPWM@m
   749   00028C  C01D  F011         	movff	turnRight_90@mL+1,setMotorPWM@m+1
   750   000290  EC2A  F000         	call	_setMotorPWM	;wreg free
   751   000294                     
   752                           ;dc_motor.c: 273:         setMotorPWM(mR);
   753   000294  C01E  F010         	movff	turnRight_90@mR,setMotorPWM@m
   754   000298  C01F  F011         	movff	turnRight_90@mR+1,setMotorPWM@m+1
   755   00029C  EC2A  F000         	call	_setMotorPWM	;wreg free
   756   0002A0                     l1720:
   757                           
   758                           ;dc_motor.c: 269:     while((mL->power < 80) || (mR->power < 80)){
   759   0002A0  C01C  FFD9         	movff	turnRight_90@mL,fsr2l
   760   0002A4  C01D  FFDA         	movff	turnRight_90@mL+1,fsr2h
   761   0002A8  0E4F               	movlw	79
   762   0002AA  64DF               	cpfsgt	indf2,c
   763   0002AC  EF5A  F001         	goto	u871
   764   0002B0  EF5C  F001         	goto	u870
   765   0002B4                     u871:
   766   0002B4  EF38  F001         	goto	l1714
   767   0002B8                     u870:
   768   0002B8  C01E  FFD9         	movff	turnRight_90@mR,fsr2l
   769   0002BC  C01F  FFDA         	movff	turnRight_90@mR+1,fsr2h
   770   0002C0  0E4F               	movlw	79
   771   0002C2  64DF               	cpfsgt	indf2,c
   772   0002C4  EF66  F001         	goto	u881
   773   0002C8  EF68  F001         	goto	u880
   774   0002CC                     u881:
   775   0002CC  EF38  F001         	goto	l1714
   776   0002D0                     u880:
   777   0002D0                     
   778                           ;dc_motor.c: 275:    _delay((unsigned long)((turning_time45)*(64000000/4000.0)));
   779   0002D0  0E06               	movlw	6
   780   0002D2  6E21               	movwf	(??_turnRight_90+1)^0,c
   781   0002D4  0ED9               	movlw	217
   782   0002D6  6E20               	movwf	??_turnRight_90^0,c
   783   0002D8  0E14               	movlw	20
   784   0002DA                     u1117:
   785   0002DA  2EE8               	decfsz	wreg,f,c
   786   0002DC  D7FE               	bra	u1117
   787   0002DE  2E20               	decfsz	??_turnRight_90^0,f,c
   788   0002E0  D7FC               	bra	u1117
   789   0002E2  2E21               	decfsz	(??_turnRight_90+1)^0,f,c
   790   0002E4  D7FA               	bra	u1117
   791   0002E6  D000               	nop2	
   792   0002E8                     
   793                           ;dc_motor.c: 277:     stop(mL, mR);
   794   0002E8  C01C  F016         	movff	turnRight_90@mL,stop@mL
   795   0002EC  C01D  F017         	movff	turnRight_90@mL+1,stop@mL+1
   796   0002F0  C01E  F018         	movff	turnRight_90@mR,stop@mR
   797   0002F4  C01F  F019         	movff	turnRight_90@mR+1,stop@mR+1
   798   0002F8  EC4F  F002         	call	_stop	;wreg free
   799   0002FC  0012               	return		;funcret
   800   0002FE                     __end_of_turnRight_90:
   801                           	callstack 0
   802                           
   803 ;; *************** function _stop *****************
   804 ;; Defined at:
   805 ;;		line 101 in file "dc_motor.c"
   806 ;; Parameters:    Size  Location     Type
   807 ;;  mL              2   21[COMRAM] PTR struct DC_motor
   808 ;;		 -> main@motorLeft(9), 
   809 ;;  mR              2   23[COMRAM] PTR struct DC_motor
   810 ;;		 -> main@motorRight(9), 
   811 ;; Auto vars:     Size  Location     Type
   812 ;;		None
   813 ;; Return value:  Size  Location     Type
   814 ;;                  1    wreg      void 
   815 ;; Registers used:
   816 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   817 ;; Tracked objects:
   818 ;;		On entry : 0/0
   819 ;;		On exit  : 0/0
   820 ;;		Unchanged: 0/0
   821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   822 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   824 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   825 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   826 ;;Total ram usage:        6 bytes
   827 ;; Hardware stack levels used: 1
   828 ;; Hardware stack levels required when called: 4
   829 ;; This function calls:
   830 ;;		_setMotorPWM
   831 ;; This function is called by:
   832 ;;		_turnRight_90
   833 ;;		_reverseSquareRight
   834 ;;		_main
   835 ;;		_turnLeft
   836 ;;		_turnRight
   837 ;;		_turnLeft_90
   838 ;;		_turn_180
   839 ;;		_turnRight_135
   840 ;;		_turnLeft_135
   841 ;;		_reverseSquareLeft
   842 ;; This function uses a non-reentrant model
   843 ;;
   844                           
   845                           	psect	text3
   846   00049E                     __ptext3:
   847                           	callstack 0
   848   00049E                     _stop:
   849                           	callstack 26
   850   00049E                     
   851                           ;dc_motor.c: 103:     while ((mL->power)>0 && (mR->power)>0){
   852   00049E  EF81  F002         	goto	l1676
   853   0004A2                     l1664:
   854                           
   855                           ;dc_motor.c: 104:         if ((mL->power) >0){
   856   0004A2  C016  FFD9         	movff	stop@mL,fsr2l
   857   0004A6  C017  FFDA         	movff	stop@mL+1,fsr2h
   858   0004AA  50DF               	movf	indf2,w,c
   859   0004AC  B4D8               	btfsc	status,2,c
   860   0004AE  EF5B  F002         	goto	u791
   861   0004B2  EF5D  F002         	goto	u790
   862   0004B6                     u791:
   863   0004B6  EF63  F002         	goto	l1668
   864   0004BA                     u790:
   865   0004BA                     
   866                           ;dc_motor.c: 105:             mL->power -= 5;
   867   0004BA  C016  FFD9         	movff	stop@mL,fsr2l
   868   0004BE  C017  FFDA         	movff	stop@mL+1,fsr2h
   869   0004C2  0E05               	movlw	5
   870   0004C4  5EDF               	subwf	indf2,f,c
   871   0004C6                     l1668:
   872                           
   873                           ;dc_motor.c: 107:         if ((mR->power) >0){
   874   0004C6  C018  FFD9         	movff	stop@mR,fsr2l
   875   0004CA  C019  FFDA         	movff	stop@mR+1,fsr2h
   876   0004CE  50DF               	movf	indf2,w,c
   877   0004D0  B4D8               	btfsc	status,2,c
   878   0004D2  EF6D  F002         	goto	u801
   879   0004D6  EF6F  F002         	goto	u800
   880   0004DA                     u801:
   881   0004DA  EF75  F002         	goto	l1672
   882   0004DE                     u800:
   883   0004DE                     
   884                           ;dc_motor.c: 108:             mR->power -= 5;
   885   0004DE  C018  FFD9         	movff	stop@mR,fsr2l
   886   0004E2  C019  FFDA         	movff	stop@mR+1,fsr2h
   887   0004E6  0E05               	movlw	5
   888   0004E8  5EDF               	subwf	indf2,f,c
   889   0004EA                     l1672:
   890                           
   891                           ;dc_motor.c: 111:         setMotorPWM(mL);
   892   0004EA  C016  F010         	movff	stop@mL,setMotorPWM@m
   893   0004EE  C017  F011         	movff	stop@mL+1,setMotorPWM@m+1
   894   0004F2  EC2A  F000         	call	_setMotorPWM	;wreg free
   895   0004F6                     
   896                           ;dc_motor.c: 112:         setMotorPWM(mR);
   897   0004F6  C018  F010         	movff	stop@mR,setMotorPWM@m
   898   0004FA  C019  F011         	movff	stop@mR+1,setMotorPWM@m+1
   899   0004FE  EC2A  F000         	call	_setMotorPWM	;wreg free
   900   000502                     l1676:
   901                           
   902                           ;dc_motor.c: 103:     while ((mL->power)>0 && (mR->power)>0){
   903   000502  C016  FFD9         	movff	stop@mL,fsr2l
   904   000506  C017  FFDA         	movff	stop@mL+1,fsr2h
   905   00050A  50DF               	movf	indf2,w,c
   906   00050C  B4D8               	btfsc	status,2,c
   907   00050E  EF8B  F002         	goto	u811
   908   000512  EF8D  F002         	goto	u810
   909   000516                     u811:
   910   000516  EF99  F002         	goto	l1680
   911   00051A                     u810:
   912   00051A  C018  FFD9         	movff	stop@mR,fsr2l
   913   00051E  C019  FFDA         	movff	stop@mR+1,fsr2h
   914   000522  50DF               	movf	indf2,w,c
   915   000524  A4D8               	btfss	status,2,c
   916   000526  EF97  F002         	goto	u821
   917   00052A  EF99  F002         	goto	u820
   918   00052E                     u821:
   919   00052E  EF51  F002         	goto	l1664
   920   000532                     u820:
   921   000532                     l1680:
   922                           
   923                           ;dc_motor.c: 114:     _delay((unsigned long)((100)*(64000000/4000.0)));
   924   000532  0E09               	movlw	9
   925   000534  6E1B               	movwf	(??_stop+1)^0,c
   926   000536  0E1E               	movlw	30
   927   000538  6E1A               	movwf	??_stop^0,c
   928   00053A  0EE4               	movlw	228
   929   00053C                     u1127:
   930   00053C  2EE8               	decfsz	wreg,f,c
   931   00053E  D7FE               	bra	u1127
   932   000540  2E1A               	decfsz	??_stop^0,f,c
   933   000542  D7FC               	bra	u1127
   934   000544  2E1B               	decfsz	(??_stop+1)^0,f,c
   935   000546  D7FA               	bra	u1127
   936   000548  D000               	nop2	
   937   00054A  0012               	return		;funcret
   938   00054C                     __end_of_stop:
   939                           	callstack 0
   940                           
   941 ;; *************** function _reverse *****************
   942 ;; Defined at:
   943 ;;		line 141 in file "dc_motor.c"
   944 ;; Parameters:    Size  Location     Type
   945 ;;  mL              2   21[COMRAM] PTR struct DC_motor
   946 ;;		 -> main@motorLeft(9), 
   947 ;;  mR              2   23[COMRAM] PTR struct DC_motor
   948 ;;		 -> main@motorRight(9), 
   949 ;; Auto vars:     Size  Location     Type
   950 ;;		None
   951 ;; Return value:  Size  Location     Type
   952 ;;                  1    wreg      void 
   953 ;; Registers used:
   954 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   955 ;; Tracked objects:
   956 ;;		On entry : 0/0
   957 ;;		On exit  : 0/0
   958 ;;		Unchanged: 0/0
   959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   960 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   961 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   962 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   963 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   964 ;;Total ram usage:        5 bytes
   965 ;; Hardware stack levels used: 1
   966 ;; Hardware stack levels required when called: 4
   967 ;; This function calls:
   968 ;;		_setMotorPWM
   969 ;; This function is called by:
   970 ;;		_turnRight_90
   971 ;;		_reverseSquareRight
   972 ;;		_turnLeft
   973 ;;		_turnRight
   974 ;;		_turnLeft_90
   975 ;;		_turn_180
   976 ;;		_turnRight_135
   977 ;;		_turnLeft_135
   978 ;;		_reverseSquareLeft
   979 ;; This function uses a non-reentrant model
   980 ;;
   981                           
   982                           	psect	text4
   983   0002FE                     __ptext4:
   984                           	callstack 0
   985   0002FE                     _reverse:
   986                           	callstack 24
   987   0002FE                     
   988                           ;dc_motor.c: 141: void reverse(DC_motor *mL, DC_motor *mR);dc_motor.c: 142: {;dc_motor.c
      +                          : 143:     mL->direction = 0;
   989   0002FE  EE20 F001          	lfsr	2,1
   990   000302  5016               	movf	reverse@mL^0,w,c
   991   000304  26D9               	addwf	fsr2l,f,c
   992   000306  5017               	movf	(reverse@mL+1)^0,w,c
   993   000308  22DA               	addwfc	fsr2h,f,c
   994   00030A  0E00               	movlw	0
   995   00030C  6EDF               	movwf	indf2,c
   996                           
   997                           ;dc_motor.c: 144:     mR->direction = 0;
   998   00030E  EE20 F001          	lfsr	2,1
   999   000312  5018               	movf	reverse@mR^0,w,c
  1000   000314  26D9               	addwf	fsr2l,f,c
  1001   000316  5019               	movf	(reverse@mR+1)^0,w,c
  1002   000318  22DA               	addwfc	fsr2h,f,c
  1003   00031A  0E00               	movlw	0
  1004   00031C  6EDF               	movwf	indf2,c
  1005                           
  1006                           ;dc_motor.c: 146:     mL->brakemode = 1;
  1007   00031E  EE20 F002          	lfsr	2,2
  1008   000322  5016               	movf	reverse@mL^0,w,c
  1009   000324  26D9               	addwf	fsr2l,f,c
  1010   000326  5017               	movf	(reverse@mL+1)^0,w,c
  1011   000328  22DA               	addwfc	fsr2h,f,c
  1012   00032A  0E01               	movlw	1
  1013   00032C  6EDF               	movwf	indf2,c
  1014                           
  1015                           ;dc_motor.c: 147:     mL->brakemode = 1;
  1016   00032E  EE20 F002          	lfsr	2,2
  1017   000332  5016               	movf	reverse@mL^0,w,c
  1018   000334  26D9               	addwf	fsr2l,f,c
  1019   000336  5017               	movf	(reverse@mL+1)^0,w,c
  1020   000338  22DA               	addwfc	fsr2h,f,c
  1021   00033A  0E01               	movlw	1
  1022   00033C  6EDF               	movwf	indf2,c
  1023                           
  1024                           ;dc_motor.c: 149:     while ((mL->power)<25 && (mR->power)<25){
  1025   00033E  EFC5  F001         	goto	l1692
  1026   000342                     l1684:
  1027                           
  1028                           ;dc_motor.c: 150:         if ((mL->power) < 25){
  1029   000342  C016  FFD9         	movff	reverse@mL,fsr2l
  1030   000346  C017  FFDA         	movff	reverse@mL+1,fsr2h
  1031   00034A  0E19               	movlw	25
  1032   00034C  60DF               	cpfslt	indf2,c
  1033   00034E  EFAB  F001         	goto	u831
  1034   000352  EFAD  F001         	goto	u830
  1035   000356                     u831:
  1036   000356  EFB3  F001         	goto	l1688
  1037   00035A                     u830:
  1038   00035A                     
  1039                           ;dc_motor.c: 151:             mL->power += 5;
  1040   00035A  C016  FFD9         	movff	reverse@mL,fsr2l
  1041   00035E  C017  FFDA         	movff	reverse@mL+1,fsr2h
  1042   000362  0E05               	movlw	5
  1043   000364  26DF               	addwf	indf2,f,c
  1044   000366                     l1688:
  1045                           
  1046                           ;dc_motor.c: 153:         if ((mR->power) <25){
  1047   000366  C018  FFD9         	movff	reverse@mR,fsr2l
  1048   00036A  C019  FFDA         	movff	reverse@mR+1,fsr2h
  1049   00036E  0E19               	movlw	25
  1050   000370  60DF               	cpfslt	indf2,c
  1051   000372  EFBD  F001         	goto	u841
  1052   000376  EFBF  F001         	goto	u840
  1053   00037A                     u841:
  1054   00037A  EFC5  F001         	goto	l1692
  1055   00037E                     u840:
  1056   00037E                     
  1057                           ;dc_motor.c: 154:             mR->power += 5;
  1058   00037E  C018  FFD9         	movff	reverse@mR,fsr2l
  1059   000382  C019  FFDA         	movff	reverse@mR+1,fsr2h
  1060   000386  0E05               	movlw	5
  1061   000388  26DF               	addwf	indf2,f,c
  1062   00038A                     l1692:
  1063                           
  1064                           ;dc_motor.c: 149:     while ((mL->power)<25 && (mR->power)<25){
  1065   00038A  C016  FFD9         	movff	reverse@mL,fsr2l
  1066   00038E  C017  FFDA         	movff	reverse@mL+1,fsr2h
  1067   000392  0E19               	movlw	25
  1068   000394  60DF               	cpfslt	indf2,c
  1069   000396  EFCF  F001         	goto	u851
  1070   00039A  EFD1  F001         	goto	u850
  1071   00039E                     u851:
  1072   00039E  EFDD  F001         	goto	l1696
  1073   0003A2                     u850:
  1074   0003A2  C018  FFD9         	movff	reverse@mR,fsr2l
  1075   0003A6  C019  FFDA         	movff	reverse@mR+1,fsr2h
  1076   0003AA  0E18               	movlw	24
  1077   0003AC  64DF               	cpfsgt	indf2,c
  1078   0003AE  EFDB  F001         	goto	u861
  1079   0003B2  EFDD  F001         	goto	u860
  1080   0003B6                     u861:
  1081   0003B6  EFA1  F001         	goto	l1684
  1082   0003BA                     u860:
  1083   0003BA                     l1696:
  1084                           
  1085                           ;dc_motor.c: 158:     setMotorPWM(mL);
  1086   0003BA  C016  F010         	movff	reverse@mL,setMotorPWM@m
  1087   0003BE  C017  F011         	movff	reverse@mL+1,setMotorPWM@m+1
  1088   0003C2  EC2A  F000         	call	_setMotorPWM	;wreg free
  1089                           
  1090                           ;dc_motor.c: 159:     setMotorPWM(mR);
  1091   0003C6  C018  F010         	movff	reverse@mR,setMotorPWM@m
  1092   0003CA  C019  F011         	movff	reverse@mR+1,setMotorPWM@m+1
  1093   0003CE  EC2A  F000         	call	_setMotorPWM	;wreg free
  1094   0003D2  0012               	return		;funcret
  1095   0003D4                     __end_of_reverse:
  1096                           	callstack 0
  1097                           
  1098 ;; *************** function _setMotorPWM *****************
  1099 ;; Defined at:
  1100 ;;		line 78 in file "dc_motor.c"
  1101 ;; Parameters:    Size  Location     Type
  1102 ;;  m               2   15[COMRAM] PTR struct DC_motor
  1103 ;;		 -> main@motorRight(9), main@motorLeft(9), 
  1104 ;; Auto vars:     Size  Location     Type
  1105 ;;  negDuty         1   20[COMRAM] unsigned char 
  1106 ;;  posDuty         1   19[COMRAM] unsigned char 
  1107 ;; Return value:  Size  Location     Type
  1108 ;;                  1    wreg      void 
  1109 ;; Registers used:
  1110 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1111 ;; Tracked objects:
  1112 ;;		On entry : 0/0
  1113 ;;		On exit  : 0/0
  1114 ;;		Unchanged: 0/0
  1115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1116 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1117 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1118 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1119 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1120 ;;Total ram usage:        6 bytes
  1121 ;; Hardware stack levels used: 1
  1122 ;; Hardware stack levels required when called: 3
  1123 ;; This function calls:
  1124 ;;		___lwdiv
  1125 ;;		___wmul
  1126 ;; This function is called by:
  1127 ;;		_stop
  1128 ;;		_reverse
  1129 ;;		_turnRight_90
  1130 ;;		_forward
  1131 ;;		_turnLeft
  1132 ;;		_turnRight
  1133 ;;		_turnLeft_90
  1134 ;;		_turn_180
  1135 ;;		_turnRight_135
  1136 ;;		_turnLeft_135
  1137 ;; This function uses a non-reentrant model
  1138 ;;
  1139                           
  1140                           	psect	text5
  1141   000054                     __ptext5:
  1142                           	callstack 0
  1143   000054                     _setMotorPWM:
  1144                           	callstack 26
  1145   000054                     
  1146                           ;dc_motor.c: 78: void setMotorPWM(DC_motor *m);dc_motor.c: 79: {;dc_motor.c: 80:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 82:     if(m->brakemode) {
  1147   000054  EE20 F002          	lfsr	2,2
  1148   000058  5010               	movf	setMotorPWM@m^0,w,c
  1149   00005A  26D9               	addwf	fsr2l,f,c
  1150   00005C  5011               	movf	(setMotorPWM@m+1)^0,w,c
  1151   00005E  22DA               	addwfc	fsr2h,f,c
  1152   000060  50DF               	movf	indf2,w,c
  1153   000062  B4D8               	btfsc	status,2,c
  1154   000064  EF36  F000         	goto	u771
  1155   000068  EF38  F000         	goto	u770
  1156   00006C                     u771:
  1157   00006C  EF6C  F000         	goto	l1652
  1158   000070                     u770:
  1159   000070                     
  1160                           ;dc_motor.c: 83:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  1161   000070  C010  FFD9         	movff	setMotorPWM@m,fsr2l
  1162   000074  C011  FFDA         	movff	setMotorPWM@m+1,fsr2h
  1163   000078  50DF               	movf	indf2,w,c
  1164   00007A  6E12               	movwf	??_setMotorPWM^0,c
  1165   00007C  5012               	movf	??_setMotorPWM^0,w,c
  1166   00007E  6E03               	movwf	___wmul@multiplier^0,c
  1167   000080  6A04               	clrf	(___wmul@multiplier+1)^0,c
  1168   000082  EE20 F003          	lfsr	2,3
  1169   000086  5010               	movf	setMotorPWM@m^0,w,c
  1170   000088  26D9               	addwf	fsr2l,f,c
  1171   00008A  5011               	movf	(setMotorPWM@m+1)^0,w,c
  1172   00008C  22DA               	addwfc	fsr2h,f,c
  1173   00008E  CFDE F005          	movff	postinc2,___wmul@multiplicand
  1174   000092  CFDD F006          	movff	postdec2,___wmul@multiplicand+1
  1175   000096  EC82  F003         	call	___wmul	;wreg free
  1176   00009A  C003  F009         	movff	?___wmul,___lwdiv@dividend
  1177   00009E  C004  F00A         	movff	?___wmul+1,___lwdiv@dividend+1
  1178   0000A2  0E00               	movlw	0
  1179   0000A4  6E0C               	movwf	(___lwdiv@divisor+1)^0,c
  1180   0000A6  0E64               	movlw	100
  1181   0000A8  6E0B               	movwf	___lwdiv@divisor^0,c
  1182   0000AA  EC2F  F003         	call	___lwdiv	;wreg free
  1183   0000AE  EE20 F003          	lfsr	2,3
  1184   0000B2  5010               	movf	setMotorPWM@m^0,w,c
  1185   0000B4  26D9               	addwf	fsr2l,f,c
  1186   0000B6  5011               	movf	(setMotorPWM@m+1)^0,w,c
  1187   0000B8  22DA               	addwfc	fsr2h,f,c
  1188   0000BA  50DF               	movf	indf2,w,c
  1189   0000BC  6E13               	movwf	(??_setMotorPWM+1)^0,c
  1190   0000BE  5009               	movf	?___lwdiv^0,w,c
  1191   0000C0  5C13               	subwf	(??_setMotorPWM+1)^0,w,c
  1192   0000C2  6E14               	movwf	setMotorPWM@posDuty^0,c
  1193   0000C4                     
  1194                           ;dc_motor.c: 84:         negDuty=m->PWMperiod;
  1195   0000C4  EE20 F003          	lfsr	2,3
  1196   0000C8  5010               	movf	setMotorPWM@m^0,w,c
  1197   0000CA  26D9               	addwf	fsr2l,f,c
  1198   0000CC  5011               	movf	(setMotorPWM@m+1)^0,w,c
  1199   0000CE  22DA               	addwfc	fsr2h,f,c
  1200   0000D0  50DF               	movf	indf2,w,c
  1201   0000D2  6E15               	movwf	setMotorPWM@negDuty^0,c
  1202                           
  1203                           ;dc_motor.c: 85:     }
  1204   0000D4  EF8F  F000         	goto	l1656
  1205   0000D8                     l1652:
  1206                           
  1207                           ;dc_motor.c: 87:         posDuty=0;
  1208   0000D8  0E00               	movlw	0
  1209   0000DA  6E14               	movwf	setMotorPWM@posDuty^0,c
  1210   0000DC                     
  1211                           ;dc_motor.c: 88:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  1212   0000DC  C010  FFD9         	movff	setMotorPWM@m,fsr2l
  1213   0000E0  C011  FFDA         	movff	setMotorPWM@m+1,fsr2h
  1214   0000E4  50DF               	movf	indf2,w,c
  1215   0000E6  6E12               	movwf	??_setMotorPWM^0,c
  1216   0000E8  5012               	movf	??_setMotorPWM^0,w,c
  1217   0000EA  6E03               	movwf	___wmul@multiplier^0,c
  1218   0000EC  6A04               	clrf	(___wmul@multiplier+1)^0,c
  1219   0000EE  EE20 F003          	lfsr	2,3
  1220   0000F2  5010               	movf	setMotorPWM@m^0,w,c
  1221   0000F4  26D9               	addwf	fsr2l,f,c
  1222   0000F6  5011               	movf	(setMotorPWM@m+1)^0,w,c
  1223   0000F8  22DA               	addwfc	fsr2h,f,c
  1224   0000FA  CFDE F005          	movff	postinc2,___wmul@multiplicand
  1225   0000FE  CFDD F006          	movff	postdec2,___wmul@multiplicand+1
  1226   000102  EC82  F003         	call	___wmul	;wreg free
  1227   000106  C003  F009         	movff	?___wmul,___lwdiv@dividend
  1228   00010A  C004  F00A         	movff	?___wmul+1,___lwdiv@dividend+1
  1229   00010E  0E00               	movlw	0
  1230   000110  6E0C               	movwf	(___lwdiv@divisor+1)^0,c
  1231   000112  0E64               	movlw	100
  1232   000114  6E0B               	movwf	___lwdiv@divisor^0,c
  1233   000116  EC2F  F003         	call	___lwdiv	;wreg free
  1234   00011A  5009               	movf	?___lwdiv^0,w,c
  1235   00011C  6E15               	movwf	setMotorPWM@negDuty^0,c
  1236   00011E                     l1656:
  1237                           
  1238                           ;dc_motor.c: 91:     if (m->direction) {
  1239   00011E  EE20 F001          	lfsr	2,1
  1240   000122  5010               	movf	setMotorPWM@m^0,w,c
  1241   000124  26D9               	addwf	fsr2l,f,c
  1242   000126  5011               	movf	(setMotorPWM@m+1)^0,w,c
  1243   000128  22DA               	addwfc	fsr2h,f,c
  1244   00012A  50DF               	movf	indf2,w,c
  1245   00012C  B4D8               	btfsc	status,2,c
  1246   00012E  EF9B  F000         	goto	u781
  1247   000132  EF9D  F000         	goto	u780
  1248   000136                     u781:
  1249   000136  EFBF  F000         	goto	l1660
  1250   00013A                     u780:
  1251   00013A                     
  1252                           ;dc_motor.c: 92:         *(m->posDutyHighByte)=posDuty;
  1253   00013A  EE20 F005          	lfsr	2,5
  1254   00013E  5010               	movf	setMotorPWM@m^0,w,c
  1255   000140  26D9               	addwf	fsr2l,f,c
  1256   000142  5011               	movf	(setMotorPWM@m+1)^0,w,c
  1257   000144  22DA               	addwfc	fsr2h,f,c
  1258   000146  CFDE F012          	movff	postinc2,??_setMotorPWM
  1259   00014A  CFDD F013          	movff	postdec2,??_setMotorPWM+1
  1260   00014E  C012  FFD9         	movff	??_setMotorPWM,fsr2l
  1261   000152  C013  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1262   000156  C014  FFDF         	movff	setMotorPWM@posDuty,indf2
  1263                           
  1264                           ;dc_motor.c: 93:         *(m->negDutyHighByte)=negDuty;
  1265   00015A  EE20 F007          	lfsr	2,7
  1266   00015E  5010               	movf	setMotorPWM@m^0,w,c
  1267   000160  26D9               	addwf	fsr2l,f,c
  1268   000162  5011               	movf	(setMotorPWM@m+1)^0,w,c
  1269   000164  22DA               	addwfc	fsr2h,f,c
  1270   000166  CFDE F012          	movff	postinc2,??_setMotorPWM
  1271   00016A  CFDD F013          	movff	postdec2,??_setMotorPWM+1
  1272   00016E  C012  FFD9         	movff	??_setMotorPWM,fsr2l
  1273   000172  C013  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1274   000176  C015  FFDF         	movff	setMotorPWM@negDuty,indf2
  1275                           
  1276                           ;dc_motor.c: 94:     } else {
  1277   00017A  EFDF  F000         	goto	l139
  1278   00017E                     l1660:
  1279                           
  1280                           ;dc_motor.c: 95:         *(m->posDutyHighByte)=negDuty;
  1281   00017E  EE20 F005          	lfsr	2,5
  1282   000182  5010               	movf	setMotorPWM@m^0,w,c
  1283   000184  26D9               	addwf	fsr2l,f,c
  1284   000186  5011               	movf	(setMotorPWM@m+1)^0,w,c
  1285   000188  22DA               	addwfc	fsr2h,f,c
  1286   00018A  CFDE F012          	movff	postinc2,??_setMotorPWM
  1287   00018E  CFDD F013          	movff	postdec2,??_setMotorPWM+1
  1288   000192  C012  FFD9         	movff	??_setMotorPWM,fsr2l
  1289   000196  C013  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1290   00019A  C015  FFDF         	movff	setMotorPWM@negDuty,indf2
  1291                           
  1292                           ;dc_motor.c: 96:         *(m->negDutyHighByte)=posDuty;
  1293   00019E  EE20 F007          	lfsr	2,7
  1294   0001A2  5010               	movf	setMotorPWM@m^0,w,c
  1295   0001A4  26D9               	addwf	fsr2l,f,c
  1296   0001A6  5011               	movf	(setMotorPWM@m+1)^0,w,c
  1297   0001A8  22DA               	addwfc	fsr2h,f,c
  1298   0001AA  CFDE F012          	movff	postinc2,??_setMotorPWM
  1299   0001AE  CFDD F013          	movff	postdec2,??_setMotorPWM+1
  1300   0001B2  C012  FFD9         	movff	??_setMotorPWM,fsr2l
  1301   0001B6  C013  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1302   0001BA  C014  FFDF         	movff	setMotorPWM@posDuty,indf2
  1303   0001BE                     l139:
  1304   0001BE  0012               	return		;funcret
  1305   0001C0                     __end_of_setMotorPWM:
  1306                           	callstack 0
  1307                           
  1308 ;; *************** function ___wmul *****************
  1309 ;; Defined at:
  1310 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  1311 ;; Parameters:    Size  Location     Type
  1312 ;;  multiplier      2    2[COMRAM] unsigned int 
  1313 ;;  multiplicand    2    4[COMRAM] unsigned int 
  1314 ;; Auto vars:     Size  Location     Type
  1315 ;;  product         2    6[COMRAM] unsigned int 
  1316 ;; Return value:  Size  Location     Type
  1317 ;;                  2    2[COMRAM] unsigned int 
  1318 ;; Registers used:
  1319 ;;		wreg, status,2, status,0, prodl, prodh
  1320 ;; Tracked objects:
  1321 ;;		On entry : 0/0
  1322 ;;		On exit  : 0/0
  1323 ;;		Unchanged: 0/0
  1324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1325 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1326 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1328 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1329 ;;Total ram usage:        6 bytes
  1330 ;; Hardware stack levels used: 1
  1331 ;; Hardware stack levels required when called: 2
  1332 ;; This function calls:
  1333 ;;		Nothing
  1334 ;; This function is called by:
  1335 ;;		_setMotorPWM
  1336 ;;		_turnLeft_135
  1337 ;; This function uses a non-reentrant model
  1338 ;;
  1339                           
  1340                           	psect	text6
  1341   000704                     __ptext6:
  1342                           	callstack 0
  1343   000704                     ___wmul:
  1344                           	callstack 26
  1345   000704  5003               	movf	___wmul@multiplier^0,w,c
  1346   000706  0205               	mulwf	___wmul@multiplicand^0,c
  1347   000708  CFF3 F007          	movff	prodl,___wmul@product
  1348   00070C  CFF4 F008          	movff	prodh,___wmul@product+1
  1349   000710  5003               	movf	___wmul@multiplier^0,w,c
  1350   000712  0206               	mulwf	(___wmul@multiplicand+1)^0,c
  1351   000714  50F3               	movf	243,w,c
  1352   000716  2608               	addwf	(___wmul@product+1)^0,f,c
  1353   000718  5004               	movf	(___wmul@multiplier+1)^0,w,c
  1354   00071A  0205               	mulwf	___wmul@multiplicand^0,c
  1355   00071C  50F3               	movf	243,w,c
  1356   00071E  2608               	addwf	(___wmul@product+1)^0,f,c
  1357   000720  C007  F003         	movff	___wmul@product,?___wmul
  1358   000724  C008  F004         	movff	___wmul@product+1,?___wmul+1
  1359   000728  0012               	return		;funcret
  1360   00072A                     __end_of___wmul:
  1361                           	callstack 0
  1362                           
  1363 ;; *************** function ___lwdiv *****************
  1364 ;; Defined at:
  1365 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  1366 ;; Parameters:    Size  Location     Type
  1367 ;;  dividend        2    8[COMRAM] unsigned int 
  1368 ;;  divisor         2   10[COMRAM] unsigned int 
  1369 ;; Auto vars:     Size  Location     Type
  1370 ;;  quotient        2   12[COMRAM] unsigned int 
  1371 ;;  counter         1   14[COMRAM] unsigned char 
  1372 ;; Return value:  Size  Location     Type
  1373 ;;                  2    8[COMRAM] unsigned int 
  1374 ;; Registers used:
  1375 ;;		wreg, status,2, status,0
  1376 ;; Tracked objects:
  1377 ;;		On entry : 0/0
  1378 ;;		On exit  : 0/0
  1379 ;;		Unchanged: 0/0
  1380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1381 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1382 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1384 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1385 ;;Total ram usage:        7 bytes
  1386 ;; Hardware stack levels used: 1
  1387 ;; Hardware stack levels required when called: 2
  1388 ;; This function calls:
  1389 ;;		Nothing
  1390 ;; This function is called by:
  1391 ;;		_setMotorPWM
  1392 ;; This function uses a non-reentrant model
  1393 ;;
  1394                           
  1395                           	psect	text7
  1396   00065E                     __ptext7:
  1397                           	callstack 0
  1398   00065E                     ___lwdiv:
  1399                           	callstack 26
  1400   00065E  0E00               	movlw	0
  1401   000660  6E0E               	movwf	(___lwdiv@quotient+1)^0,c
  1402   000662  0E00               	movlw	0
  1403   000664  6E0D               	movwf	___lwdiv@quotient^0,c
  1404   000666  500B               	movf	___lwdiv@divisor^0,w,c
  1405   000668  100C               	iorwf	(___lwdiv@divisor+1)^0,w,c
  1406   00066A  B4D8               	btfsc	status,2,c
  1407   00066C  EF3A  F003         	goto	u741
  1408   000670  EF3C  F003         	goto	u740
  1409   000674                     u741:
  1410   000674  EF64  F003         	goto	l806
  1411   000678                     u740:
  1412   000678  0E01               	movlw	1
  1413   00067A  6E0F               	movwf	___lwdiv@counter^0,c
  1414   00067C  EF44  F003         	goto	l1632
  1415   000680                     l1630:
  1416   000680  90D8               	bcf	status,0,c
  1417   000682  360B               	rlcf	___lwdiv@divisor^0,f,c
  1418   000684  360C               	rlcf	(___lwdiv@divisor+1)^0,f,c
  1419   000686  2A0F               	incf	___lwdiv@counter^0,f,c
  1420   000688                     l1632:
  1421   000688  AE0C               	btfss	(___lwdiv@divisor+1)^0,7,c
  1422   00068A  EF49  F003         	goto	u751
  1423   00068E  EF4B  F003         	goto	u750
  1424   000692                     u751:
  1425   000692  EF40  F003         	goto	l1630
  1426   000696                     u750:
  1427   000696                     l1634:
  1428   000696  90D8               	bcf	status,0,c
  1429   000698  360D               	rlcf	___lwdiv@quotient^0,f,c
  1430   00069A  360E               	rlcf	(___lwdiv@quotient+1)^0,f,c
  1431   00069C  500B               	movf	___lwdiv@divisor^0,w,c
  1432   00069E  5C09               	subwf	___lwdiv@dividend^0,w,c
  1433   0006A0  500C               	movf	(___lwdiv@divisor+1)^0,w,c
  1434   0006A2  580A               	subwfb	(___lwdiv@dividend+1)^0,w,c
  1435   0006A4  A0D8               	btfss	status,0,c
  1436   0006A6  EF57  F003         	goto	u761
  1437   0006AA  EF59  F003         	goto	u760
  1438   0006AE                     u761:
  1439   0006AE  EF5E  F003         	goto	l1642
  1440   0006B2                     u760:
  1441   0006B2  500B               	movf	___lwdiv@divisor^0,w,c
  1442   0006B4  5E09               	subwf	___lwdiv@dividend^0,f,c
  1443   0006B6  500C               	movf	(___lwdiv@divisor+1)^0,w,c
  1444   0006B8  5A0A               	subwfb	(___lwdiv@dividend+1)^0,f,c
  1445   0006BA  800D               	bsf	___lwdiv@quotient^0,0,c
  1446   0006BC                     l1642:
  1447   0006BC  90D8               	bcf	status,0,c
  1448   0006BE  320C               	rrcf	(___lwdiv@divisor+1)^0,f,c
  1449   0006C0  320B               	rrcf	___lwdiv@divisor^0,f,c
  1450   0006C2  2E0F               	decfsz	___lwdiv@counter^0,f,c
  1451   0006C4  EF4B  F003         	goto	l1634
  1452   0006C8                     l806:
  1453   0006C8  C00D  F009         	movff	___lwdiv@quotient,?___lwdiv
  1454   0006CC  C00E  F00A         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1455   0006D0  0012               	return		;funcret
  1456   0006D2                     __end_of___lwdiv:
  1457                           	callstack 0
  1458                           
  1459 ;; *************** function _initDCmotorsPWM *****************
  1460 ;; Defined at:
  1461 ;;		line 10 in file "dc_motor.c"
  1462 ;; Parameters:    Size  Location     Type
  1463 ;;  PWMperiod       2    2[COMRAM] int 
  1464 ;; Auto vars:     Size  Location     Type
  1465 ;;		None
  1466 ;; Return value:  Size  Location     Type
  1467 ;;                  1    wreg      void 
  1468 ;; Registers used:
  1469 ;;		wreg, status,2
  1470 ;; Tracked objects:
  1471 ;;		On entry : 0/0
  1472 ;;		On exit  : 0/0
  1473 ;;		Unchanged: 0/0
  1474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1475 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1478 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1479 ;;Total ram usage:        2 bytes
  1480 ;; Hardware stack levels used: 1
  1481 ;; Hardware stack levels required when called: 2
  1482 ;; This function calls:
  1483 ;;		Nothing
  1484 ;; This function is called by:
  1485 ;;		_main
  1486 ;; This function uses a non-reentrant model
  1487 ;;
  1488                           
  1489                           	psect	text8
  1490   00054C                     __ptext8:
  1491                           	callstack 0
  1492   00054C                     _initDCmotorsPWM:
  1493                           	callstack 28
  1494   00054C                     
  1495                           ;dc_motor.c: 14:     LATEbits.LATE2 = 0;
  1496   00054C  947D               	bcf	125,2,c	;volatile
  1497                           
  1498                           ;dc_motor.c: 15:     LATEbits.LATE4 = 0;
  1499   00054E  987D               	bcf	125,4,c	;volatile
  1500                           
  1501                           ;dc_motor.c: 16:     LATCbits.LATC7 = 0;
  1502   000550  9E7B               	bcf	123,7,c	;volatile
  1503                           
  1504                           ;dc_motor.c: 17:     LATGbits.LATG6 = 0;
  1505   000552  9C7F               	bcf	127,6,c	;volatile
  1506                           
  1507                           ;dc_motor.c: 20:     TRISEbits.TRISE2 = 0 ;
  1508   000554  9485               	bcf	133,2,c	;volatile
  1509                           
  1510                           ;dc_motor.c: 21:     TRISEbits.TRISE4 = 0 ;
  1511   000556  9885               	bcf	133,4,c	;volatile
  1512                           
  1513                           ;dc_motor.c: 22:     TRISCbits.TRISC7 = 0 ;
  1514   000558  9E83               	bcf	131,7,c	;volatile
  1515                           
  1516                           ;dc_motor.c: 23:     TRISGbits.TRISG6 = 0 ;
  1517   00055A  9C87               	bcf	135,6,c	;volatile
  1518   00055C                     
  1519                           ;dc_motor.c: 26:     RE2PPS=0x05;
  1520   00055C  0E05               	movlw	5
  1521   00055E  010E               	movlb	14	; () banked
  1522   000560  6F74               	movwf	116,b	;volatile
  1523                           
  1524                           ;dc_motor.c: 27:     RE4PPS=0x06;
  1525   000562  0E06               	movlw	6
  1526   000564  6F76               	movwf	118,b	;volatile
  1527                           
  1528                           ;dc_motor.c: 28:     RC7PPS=0x07;
  1529   000566  0E07               	movlw	7
  1530   000568  6F69               	movwf	105,b	;volatile
  1531                           
  1532                           ;dc_motor.c: 29:     RG6PPS=0x08;
  1533   00056A  0E08               	movlw	8
  1534   00056C  6F88               	movwf	136,b	;volatile
  1535                           
  1536                           ;dc_motor.c: 32:     T2CONbits.CKPS=0b011;
  1537   00056E  50BD               	movf	189,w,c	;volatile
  1538   000570  0B8F               	andlw	-113
  1539   000572  0930               	iorlw	48
  1540   000574  6EBD               	movwf	189,c	;volatile
  1541                           
  1542                           ;dc_motor.c: 33:     T2HLTbits.MODE=0b00000;
  1543   000576  0EE0               	movlw	-32
  1544   000578  16BE               	andwf	190,f,c	;volatile
  1545                           
  1546                           ;dc_motor.c: 34:     T2CLKCONbits.CS=0b0001;
  1547   00057A  50BF               	movf	191,w,c	;volatile
  1548   00057C  0BF0               	andlw	-16
  1549   00057E  0901               	iorlw	1
  1550   000580  6EBF               	movwf	191,c	;volatile
  1551                           
  1552                           ;dc_motor.c: 38:     T2PR=199;
  1553   000582  0EC7               	movlw	199
  1554   000584  6EBC               	movwf	188,c	;volatile
  1555   000586                     
  1556                           ; BSR set to: 14
  1557                           ;dc_motor.c: 39:     T2CONbits.ON=1;
  1558   000586  8EBD               	bsf	189,7,c	;volatile
  1559                           
  1560                           ;dc_motor.c: 43:     CCPR1H=0;
  1561   000588  0E00               	movlw	0
  1562   00058A  6EAA               	movwf	170,c	;volatile
  1563                           
  1564                           ;dc_motor.c: 44:     CCPR2H=0;
  1565   00058C  0E00               	movlw	0
  1566   00058E  6EA6               	movwf	166,c	;volatile
  1567                           
  1568                           ;dc_motor.c: 45:     CCPR3H=0;
  1569   000590  0E00               	movlw	0
  1570   000592  010F               	movlb	15	; () banked
  1571   000594  6F25               	movwf	37,b	;volatile
  1572                           
  1573                           ;dc_motor.c: 46:     CCPR4H=0;
  1574   000596  0E00               	movlw	0
  1575   000598  6F21               	movwf	33,b	;volatile
  1576                           
  1577                           ;dc_motor.c: 49:     CCPTMRS0bits.C1TSEL=0;
  1578   00059A  0EFC               	movlw	-4
  1579   00059C  16AD               	andwf	173,f,c	;volatile
  1580                           
  1581                           ;dc_motor.c: 50:     CCPTMRS0bits.C2TSEL=0;
  1582   00059E  0EF3               	movlw	-13
  1583   0005A0  16AD               	andwf	173,f,c	;volatile
  1584                           
  1585                           ;dc_motor.c: 51:     CCPTMRS0bits.C3TSEL=0;
  1586   0005A2  0ECF               	movlw	-49
  1587   0005A4  16AD               	andwf	173,f,c	;volatile
  1588                           
  1589                           ;dc_motor.c: 52:     CCPTMRS0bits.C4TSEL=0;
  1590   0005A6  0E3F               	movlw	-193
  1591   0005A8  16AD               	andwf	173,f,c	;volatile
  1592   0005AA                     
  1593                           ; BSR set to: 15
  1594                           ;dc_motor.c: 55:     CCP1CONbits.FMT=1;
  1595   0005AA  88AB               	bsf	171,4,c	;volatile
  1596                           
  1597                           ;dc_motor.c: 56:     CCP1CONbits.CCP1MODE=0b1100;
  1598   0005AC  50AB               	movf	171,w,c	;volatile
  1599   0005AE  0BF0               	andlw	-16
  1600   0005B0  090C               	iorlw	12
  1601   0005B2  6EAB               	movwf	171,c	;volatile
  1602   0005B4                     
  1603                           ; BSR set to: 15
  1604                           ;dc_motor.c: 57:     CCP1CONbits.EN=1;
  1605   0005B4  8EAB               	bsf	171,7,c	;volatile
  1606   0005B6                     
  1607                           ; BSR set to: 15
  1608                           ;dc_motor.c: 59:     CCP2CONbits.FMT=1;
  1609   0005B6  88A7               	bsf	167,4,c	;volatile
  1610                           
  1611                           ;dc_motor.c: 60:     CCP2CONbits.CCP2MODE=0b1100;
  1612   0005B8  50A7               	movf	167,w,c	;volatile
  1613   0005BA  0BF0               	andlw	-16
  1614   0005BC  090C               	iorlw	12
  1615   0005BE  6EA7               	movwf	167,c	;volatile
  1616   0005C0                     
  1617                           ; BSR set to: 15
  1618                           ;dc_motor.c: 61:     CCP2CONbits.EN=1;
  1619   0005C0  8EA7               	bsf	167,7,c	;volatile
  1620   0005C2                     
  1621                           ; BSR set to: 15
  1622                           ;dc_motor.c: 63:     CCP3CONbits.FMT=1;
  1623   0005C2  8926               	bsf	38,4,b	;volatile
  1624                           
  1625                           ;dc_motor.c: 64:     CCP3CONbits.CCP3MODE=0b1100;
  1626   0005C4  5126               	movf	38,w,b	;volatile
  1627   0005C6  0BF0               	andlw	-16
  1628   0005C8  090C               	iorlw	12
  1629   0005CA  6F26               	movwf	38,b	;volatile
  1630   0005CC                     
  1631                           ; BSR set to: 15
  1632                           ;dc_motor.c: 65:     CCP3CONbits.EN=1;
  1633   0005CC  8F26               	bsf	38,7,b	;volatile
  1634   0005CE                     
  1635                           ; BSR set to: 15
  1636                           ;dc_motor.c: 67:     CCP4CONbits.FMT=1;
  1637   0005CE  8922               	bsf	34,4,b	;volatile
  1638                           
  1639                           ;dc_motor.c: 68:     CCP4CONbits.CCP4MODE=0b1100;
  1640   0005D0  5122               	movf	34,w,b	;volatile
  1641   0005D2  0BF0               	andlw	-16
  1642   0005D4  090C               	iorlw	12
  1643   0005D6  6F22               	movwf	34,b	;volatile
  1644   0005D8                     
  1645                           ; BSR set to: 15
  1646                           ;dc_motor.c: 69:     CCP4CONbits.EN=1;
  1647   0005D8  8F22               	bsf	34,7,b	;volatile
  1648   0005DA                     
  1649                           ; BSR set to: 15
  1650   0005DA  0012               	return		;funcret
  1651   0005DC                     __end_of_initDCmotorsPWM:
  1652                           	callstack 0
  1653                           
  1654 ;; *************** function _Timer0_init *****************
  1655 ;; Defined at:
  1656 ;;		line 7 in file "timers.c"
  1657 ;; Parameters:    Size  Location     Type
  1658 ;;		None
  1659 ;; Auto vars:     Size  Location     Type
  1660 ;;		None
  1661 ;; Return value:  Size  Location     Type
  1662 ;;                  1    wreg      void 
  1663 ;; Registers used:
  1664 ;;		wreg, status,2
  1665 ;; Tracked objects:
  1666 ;;		On entry : 0/0
  1667 ;;		On exit  : 0/0
  1668 ;;		Unchanged: 0/0
  1669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1673 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1674 ;;Total ram usage:        0 bytes
  1675 ;; Hardware stack levels used: 1
  1676 ;; Hardware stack levels required when called: 2
  1677 ;; This function calls:
  1678 ;;		Nothing
  1679 ;; This function is called by:
  1680 ;;		_main
  1681 ;; This function uses a non-reentrant model
  1682 ;;
  1683                           
  1684                           	psect	text9
  1685   00072A                     __ptext9:
  1686                           	callstack 0
  1687   00072A                     _Timer0_init:
  1688                           	callstack 28
  1689   00072A                     
  1690                           ;timers.c: 9:     T0CON1bits.T0CS=0b010;
  1691   00072A  50D6               	movf	214,w,c	;volatile
  1692   00072C  0B1F               	andlw	-225
  1693   00072E  0940               	iorlw	64
  1694   000730  6ED6               	movwf	214,c	;volatile
  1695   000732                     
  1696                           ;timers.c: 10:     T0CON1bits.T0ASYNC=1;
  1697   000732  88D6               	bsf	214,4,c	;volatile
  1698                           
  1699                           ;timers.c: 11:     T0CON1bits.T0CKPS=0b111;
  1700   000734  50D6               	movf	214,w,c	;volatile
  1701   000736  0BF0               	andlw	-16
  1702   000738  0907               	iorlw	7
  1703   00073A  6ED6               	movwf	214,c	;volatile
  1704   00073C                     
  1705                           ;timers.c: 12:     T0CON0bits.T016BIT=1;
  1706   00073C  88D5               	bsf	213,4,c	;volatile
  1707                           
  1708                           ;timers.c: 15:     TMR0H=(65535-2500)>>8;
  1709   00073E  0EF6               	movlw	246
  1710   000740  6ED4               	movwf	212,c	;volatile
  1711                           
  1712                           ;timers.c: 16:     TMR0L=(unsigned char)(65535-2500);
  1713   000742  0E3B               	movlw	59
  1714   000744  6ED3               	movwf	211,c	;volatile
  1715   000746                     
  1716                           ;timers.c: 17:     T0CON0bits.T0EN=1;
  1717   000746  8ED5               	bsf	213,7,c	;volatile
  1718   000748  0012               	return		;funcret
  1719   00074A                     __end_of_Timer0_init:
  1720                           	callstack 0
  1721                           
  1722 ;; *************** function _Interrupts_init *****************
  1723 ;; Defined at:
  1724 ;;		line 8 in file "interrupts.c"
  1725 ;; Parameters:    Size  Location     Type
  1726 ;;		None
  1727 ;; Auto vars:     Size  Location     Type
  1728 ;;		None
  1729 ;; Return value:  Size  Location     Type
  1730 ;;                  1    wreg      void 
  1731 ;; Registers used:
  1732 ;;		None
  1733 ;; Tracked objects:
  1734 ;;		On entry : 0/0
  1735 ;;		On exit  : 0/0
  1736 ;;		Unchanged: 0/0
  1737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1739 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1741 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1742 ;;Total ram usage:        0 bytes
  1743 ;; Hardware stack levels used: 1
  1744 ;; Hardware stack levels required when called: 2
  1745 ;; This function calls:
  1746 ;;		Nothing
  1747 ;; This function is called by:
  1748 ;;		_main
  1749 ;; This function uses a non-reentrant model
  1750 ;;
  1751                           
  1752                           	psect	text10
  1753   00074A                     __ptext10:
  1754                           	callstack 0
  1755   00074A                     _Interrupts_init:
  1756                           	callstack 28
  1757   00074A                     
  1758                           ;interrupts.c: 10:     PIE0bits.TMR0IE=1;
  1759   00074A  010E               	movlb	14	; () banked
  1760   00074C  8B29               	bsf	41,5,b	;volatile
  1761                           
  1762                           ;interrupts.c: 11:     INTCONbits.PEIE=1;
  1763   00074E  8CF2               	bsf	242,6,c	;volatile
  1764                           
  1765                           ;interrupts.c: 12:     INTCONbits.IPEN=0;
  1766   000750  9AF2               	bcf	242,5,c	;volatile
  1767                           
  1768                           ;interrupts.c: 13:     INTCONbits.GIE=1;
  1769   000752  8EF2               	bsf	242,7,c	;volatile
  1770   000754                     
  1771                           ; BSR set to: 14
  1772   000754  0012               	return		;funcret
  1773   000756                     __end_of_Interrupts_init:
  1774                           	callstack 0
  1775                           
  1776 ;; *************** function _HighISR *****************
  1777 ;; Defined at:
  1778 ;;		line 20 in file "interrupts.c"
  1779 ;; Parameters:    Size  Location     Type
  1780 ;;		None
  1781 ;; Auto vars:     Size  Location     Type
  1782 ;;		None
  1783 ;; Return value:  Size  Location     Type
  1784 ;;                  1    wreg      void 
  1785 ;; Registers used:
  1786 ;;		wreg, status,2, status,0, cstack
  1787 ;; Tracked objects:
  1788 ;;		On entry : 0/0
  1789 ;;		On exit  : 0/0
  1790 ;;		Unchanged: 0/0
  1791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1795 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1796 ;;Total ram usage:        0 bytes
  1797 ;; Hardware stack levels used: 1
  1798 ;; Hardware stack levels required when called: 1
  1799 ;; This function calls:
  1800 ;;		_write16bitTMR0val
  1801 ;; This function is called by:
  1802 ;;		Interrupt level 2
  1803 ;; This function uses a non-reentrant model
  1804 ;;
  1805                           
  1806                           	psect	intcode
  1807   000008                     __pintcode:
  1808                           	callstack 0
  1809   000008                     _HighISR:
  1810                           	callstack 24
  1811                           
  1812                           ; BSR set to: 14
  1813                           ;incstack = 0
  1814   000008  8243               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  1815   00000A                     
  1816                           ;interrupts.c: 22:     if (PIR0bits.TMR0IF)
  1817   00000A  010E               	movlb	14	; () banked
  1818   00000C  AB33               	btfss	51,5,b	;volatile
  1819   00000E  EF0B  F000         	goto	i2u105_41
  1820   000012  EF0D  F000         	goto	i2u105_40
  1821   000016                     i2u105_41:
  1822   000016  EF24  F000         	goto	i2l1950
  1823   00001A                     i2u105_40:
  1824   00001A                     
  1825                           ; BSR set to: 14
  1826                           ;interrupts.c: 23:     {;interrupts.c: 24:         if(LATCbits.LATC5){
  1827   00001A  AA7B               	btfss	123,5,c	;volatile
  1828   00001C  EF12  F000         	goto	i2u106_41
  1829   000020  EF14  F000         	goto	i2u106_40
  1830   000024                     i2u106_41:
  1831   000024  EF1D  F000         	goto	i2l1946
  1832   000028                     i2u106_40:
  1833   000028                     
  1834                           ; BSR set to: 14
  1835                           ;interrupts.c: 25:             write16bitTMR0val(65535-off_period);
  1836   000028  1C3B               	comf	_off_period^0,w,c
  1837   00002A  6E01               	movwf	write16bitTMR0val@tmp^0,c
  1838   00002C  1C3C               	comf	(_off_period+1)^0,w,c
  1839   00002E  6E02               	movwf	(write16bitTMR0val@tmp+1)^0,c
  1840   000030  ECAB  F003         	call	_write16bitTMR0val	;wreg free
  1841   000034                     
  1842                           ;interrupts.c: 26:             LATCbits.LATC5=0;
  1843   000034  9A7B               	bcf	123,5,c	;volatile
  1844                           
  1845                           ;interrupts.c: 27:         } else {
  1846   000036  EF24  F000         	goto	i2l1950
  1847   00003A                     i2l1946:
  1848                           
  1849                           ; BSR set to: 14
  1850                           ;interrupts.c: 28:             write16bitTMR0val(65535-on_period);
  1851   00003A  1C3D               	comf	_on_period^0,w,c
  1852   00003C  6E01               	movwf	write16bitTMR0val@tmp^0,c
  1853   00003E  1C3E               	comf	(_on_period+1)^0,w,c
  1854   000040  6E02               	movwf	(write16bitTMR0val@tmp+1)^0,c
  1855   000042  ECAB  F003         	call	_write16bitTMR0val	;wreg free
  1856   000046                     
  1857                           ;interrupts.c: 29:             LATCbits.LATC5=1;
  1858   000046  8A7B               	bsf	123,5,c	;volatile
  1859   000048                     i2l1950:
  1860                           
  1861                           ;interrupts.c: 32:     PIR0bits.TMR0IF=0;
  1862   000048  010E               	movlb	14	; () banked
  1863   00004A  9B33               	bcf	51,5,b	;volatile
  1864   00004C                     
  1865                           ; BSR set to: 14
  1866   00004C  9243               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1867   00004E  0011               	retfie		f
  1868   000050                     __end_of_HighISR:
  1869                           	callstack 0
  1870                           
  1871 ;; *************** function _write16bitTMR0val *****************
  1872 ;; Defined at:
  1873 ;;		line 24 in file "timers.c"
  1874 ;; Parameters:    Size  Location     Type
  1875 ;;  tmp             2    0[COMRAM] unsigned int 
  1876 ;; Auto vars:     Size  Location     Type
  1877 ;;		None
  1878 ;; Return value:  Size  Location     Type
  1879 ;;                  1    wreg      void 
  1880 ;; Registers used:
  1881 ;;		wreg, status,2
  1882 ;; Tracked objects:
  1883 ;;		On entry : 0/0
  1884 ;;		On exit  : 0/0
  1885 ;;		Unchanged: 0/0
  1886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1887 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1888 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1890 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1891 ;;Total ram usage:        2 bytes
  1892 ;; Hardware stack levels used: 1
  1893 ;; This function calls:
  1894 ;;		Nothing
  1895 ;; This function is called by:
  1896 ;;		_HighISR
  1897 ;; This function uses a non-reentrant model
  1898 ;;
  1899                           
  1900                           	psect	text12
  1901   000756                     __ptext12:
  1902                           	callstack 0
  1903   000756                     _write16bitTMR0val:
  1904                           	callstack 24
  1905   000756                     
  1906                           ;timers.c: 24: void write16bitTMR0val(unsigned int tmp);timers.c: 25: {;timers.c: 26:   
      +                            TMR0H=tmp>>8;
  1907   000756  5002               	movf	(write16bitTMR0val@tmp+1)^0,w,c
  1908   000758  6ED4               	movwf	212,c	;volatile
  1909   00075A                     
  1910                           ;timers.c: 27:     TMR0L=tmp;
  1911   00075A  C001  FFD3         	movff	write16bitTMR0val@tmp,4051	;volatile
  1912   00075E  0012               	return		;funcret
  1913   000760                     __end_of_write16bitTMR0val:
  1914                           	callstack 0
  1915   000000                     
  1916                           	psect	rparam
  1917   000000                     
  1918                           	psect	temp
  1919   000043                     btemp:
  1920                           	callstack 0
  1921   000043                     	ds	1
  1922   000000                     int$flags	set	btemp
  1923   000000                     wtemp8	set	btemp+1
  1924   000000                     ttemp5	set	btemp+1
  1925   000000                     ttemp6	set	btemp+4
  1926   000000                     ttemp7	set	btemp+8
  1927                           
  1928                           	psect	idloc
  1929                           
  1930                           ;Config register IDLOC0 @ 0x200000
  1931                           ;	unspecified, using default values
  1932   200000                     	org	2097152
  1933   200000  0FFF               	dw	4095
  1934                           
  1935                           ;Config register IDLOC1 @ 0x200002
  1936                           ;	unspecified, using default values
  1937   200002                     	org	2097154
  1938   200002  0FFF               	dw	4095
  1939                           
  1940                           ;Config register IDLOC2 @ 0x200004
  1941                           ;	unspecified, using default values
  1942   200004                     	org	2097156
  1943   200004  0FFF               	dw	4095
  1944                           
  1945                           ;Config register IDLOC3 @ 0x200006
  1946                           ;	unspecified, using default values
  1947   200006                     	org	2097158
  1948   200006  0FFF               	dw	4095
  1949                           
  1950                           ;Config register IDLOC4 @ 0x200008
  1951                           ;	unspecified, using default values
  1952   200008                     	org	2097160
  1953   200008  0FFF               	dw	4095
  1954                           
  1955                           ;Config register IDLOC5 @ 0x20000A
  1956                           ;	unspecified, using default values
  1957   20000A                     	org	2097162
  1958   20000A  0FFF               	dw	4095
  1959                           
  1960                           ;Config register IDLOC6 @ 0x20000C
  1961                           ;	unspecified, using default values
  1962   20000C                     	org	2097164
  1963   20000C  0FFF               	dw	4095
  1964                           
  1965                           ;Config register IDLOC7 @ 0x20000E
  1966                           ;	unspecified, using default values
  1967   20000E                     	org	2097166
  1968   20000E  0FFF               	dw	4095
  1969                           
  1970                           	psect	config
  1971                           
  1972                           ;Config register CONFIG1L @ 0x300000
  1973                           ;	External Oscillator mode Selection bits
  1974                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  1975                           ;	Power-up default value for COSC bits
  1976                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  1977   300000                     	org	3145728
  1978   300000  AA                 	db	170
  1979                           
  1980                           ;Config register CONFIG1H @ 0x300001
  1981                           ;	unspecified, using default values
  1982                           ;	Clock Out Enable bit
  1983                           ;	CLKOUTEN = 0x1, unprogrammed default
  1984                           ;	Clock Switch Enable bit
  1985                           ;	CSWEN = 0x1, unprogrammed default
  1986                           ;	Fail-Safe Clock Monitor Enable bit
  1987                           ;	FCMEN = 0x1, unprogrammed default
  1988   300001                     	org	3145729
  1989   300001  FF                 	db	255
  1990                           
  1991                           ;Config register CONFIG2L @ 0x300002
  1992                           ;	unspecified, using default values
  1993                           ;	Master Clear Enable bit
  1994                           ;	MCLRE = 0x1, unprogrammed default
  1995                           ;	Power-up Timer Enable bit
  1996                           ;	PWRTE = 0x1, unprogrammed default
  1997                           ;	Low-power BOR enable bit
  1998                           ;	LPBOREN = 0x1, unprogrammed default
  1999                           ;	Brown-out Reset Enable bits
  2000                           ;	BOREN = 0x3, unprogrammed default
  2001   300002                     	org	3145730
  2002   300002  FF                 	db	255
  2003                           
  2004                           ;Config register CONFIG2H @ 0x300003
  2005                           ;	unspecified, using default values
  2006                           ;	Brown Out Reset Voltage selection bits
  2007                           ;	BORV = 0x3, unprogrammed default
  2008                           ;	ZCD Disable bit
  2009                           ;	ZCD = 0x1, unprogrammed default
  2010                           ;	PPSLOCK bit One-Way Set Enable bit
  2011                           ;	PPS1WAY = 0x1, unprogrammed default
  2012                           ;	Stack Full/Underflow Reset Enable bit
  2013                           ;	STVREN = 0x1, unprogrammed default
  2014                           ;	Debugger Enable bit
  2015                           ;	DEBUG = 0x1, unprogrammed default
  2016                           ;	Extended Instruction Set Enable bit
  2017                           ;	XINST = 0x1, unprogrammed default
  2018   300003                     	org	3145731
  2019   300003  FF                 	db	255
  2020                           
  2021                           ;Config register CONFIG3L @ 0x300004
  2022                           ;	WDT Period Select bits
  2023                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  2024                           ;	WDT operating mode
  2025                           ;	WDTE = OFF, WDT Disabled
  2026   300004                     	org	3145732
  2027   300004  9F                 	db	159
  2028                           
  2029                           ;Config register CONFIG3H @ 0x300005
  2030                           ;	unspecified, using default values
  2031                           ;	WDT Window Select bits
  2032                           ;	WDTCWS = 0x7, unprogrammed default
  2033                           ;	WDT input clock selector
  2034                           ;	WDTCCS = 0x7, unprogrammed default
  2035   300005                     	org	3145733
  2036   300005  FF                 	db	255
  2037                           
  2038                           ;Config register CONFIG4L @ 0x300006
  2039                           ;	unspecified, using default values
  2040                           ;	Write Protection Block 0
  2041                           ;	WRT0 = 0x1, unprogrammed default
  2042                           ;	Write Protection Block 1
  2043                           ;	WRT1 = 0x1, unprogrammed default
  2044                           ;	Write Protection Block 2
  2045                           ;	WRT2 = 0x1, unprogrammed default
  2046                           ;	Write Protection Block 3
  2047                           ;	WRT3 = 0x1, unprogrammed default
  2048                           ;	Write Protection Block 3
  2049                           ;	WRT4 = 0x1, unprogrammed default
  2050                           ;	Write Protection Block 3
  2051                           ;	WRT5 = 0x1, unprogrammed default
  2052                           ;	Write Protection Block 3
  2053                           ;	WRT6 = 0x1, unprogrammed default
  2054                           ;	Write Protection Block 3
  2055                           ;	WRT7 = 0x1, unprogrammed default
  2056   300006                     	org	3145734
  2057   300006  FF                 	db	255
  2058                           
  2059                           ;Config register CONFIG4H @ 0x300007
  2060                           ;	unspecified, using default values
  2061                           ;	Configuration Register Write Protection bit
  2062                           ;	WRTC = 0x1, unprogrammed default
  2063                           ;	Boot Block Write Protection bit
  2064                           ;	WRTB = 0x1, unprogrammed default
  2065                           ;	Data EEPROM Write Protection bit
  2066                           ;	WRTD = 0x1, unprogrammed default
  2067                           ;	Scanner Enable bit
  2068                           ;	SCANE = 0x1, unprogrammed default
  2069                           ;	Low Voltage Programming Enable bit
  2070                           ;	LVP = 0x1, unprogrammed default
  2071   300007                     	org	3145735
  2072   300007  FF                 	db	255
  2073                           
  2074                           ;Config register CONFIG5L @ 0x300008
  2075                           ;	unspecified, using default values
  2076                           ;	UserNVM Program Memory Code Protection bit
  2077                           ;	CP = 0x1, unprogrammed default
  2078                           ;	DataNVM Memory Code Protection bit
  2079                           ;	CPD = 0x1, unprogrammed default
  2080   300008                     	org	3145736
  2081   300008  FF                 	db	255
  2082                           
  2083                           ;Config register CONFIG5H @ 0x300009
  2084                           ;	unspecified, using default values
  2085   300009                     	org	3145737
  2086   300009  FF                 	db	255
  2087                           
  2088                           ;Config register CONFIG6L @ 0x30000A
  2089                           ;	unspecified, using default values
  2090                           ;	Table Read Protection Block 0
  2091                           ;	EBTR0 = 0x1, unprogrammed default
  2092                           ;	Table Read Protection Block 1
  2093                           ;	EBTR1 = 0x1, unprogrammed default
  2094                           ;	Table Read Protection Block 2
  2095                           ;	EBTR2 = 0x1, unprogrammed default
  2096                           ;	Table Read Protection Block 3
  2097                           ;	EBTR3 = 0x1, unprogrammed default
  2098                           ;	Table Read Protection Block 4
  2099                           ;	EBTR4 = 0x1, unprogrammed default
  2100                           ;	Table Read Protection Block 5
  2101                           ;	EBTR5 = 0x1, unprogrammed default
  2102                           ;	Table Read Protection Block 6
  2103                           ;	EBTR6 = 0x1, unprogrammed default
  2104                           ;	Table Read Protection Block 7
  2105                           ;	EBTR7 = 0x1, unprogrammed default
  2106   30000A                     	org	3145738
  2107   30000A  FF                 	db	255
  2108                           
  2109                           ;Config register CONFIG6H @ 0x30000B
  2110                           ;	unspecified, using default values
  2111                           ;	Boot Block Table Read Protection bit
  2112                           ;	EBTRB = 0x1, unprogrammed default
  2113   30000B                     	org	3145739
  2114   30000B  FF                 	db	255
  2115                           tosu	equ	0xFFF
  2116                           tosh	equ	0xFFE
  2117                           tosl	equ	0xFFD
  2118                           stkptr	equ	0xFFC
  2119                           pclatu	equ	0xFFB
  2120                           pclath	equ	0xFFA
  2121                           pcl	equ	0xFF9
  2122                           tblptru	equ	0xFF8
  2123                           tblptrh	equ	0xFF7
  2124                           tblptrl	equ	0xFF6
  2125                           tablat	equ	0xFF5
  2126                           prodh	equ	0xFF4
  2127                           prodl	equ	0xFF3
  2128                           indf0	equ	0xFEF
  2129                           postinc0	equ	0xFEE
  2130                           postdec0	equ	0xFED
  2131                           preinc0	equ	0xFEC
  2132                           plusw0	equ	0xFEB
  2133                           fsr0h	equ	0xFEA
  2134                           fsr0l	equ	0xFE9
  2135                           wreg	equ	0xFE8
  2136                           indf1	equ	0xFE7
  2137                           postinc1	equ	0xFE6
  2138                           postdec1	equ	0xFE5
  2139                           preinc1	equ	0xFE4
  2140                           plusw1	equ	0xFE3
  2141                           fsr1h	equ	0xFE2
  2142                           fsr1l	equ	0xFE1
  2143                           bsr	equ	0xFE0
  2144                           indf2	equ	0xFDF
  2145                           postinc2	equ	0xFDE
  2146                           postdec2	equ	0xFDD
  2147                           preinc2	equ	0xFDC
  2148                           plusw2	equ	0xFDB
  2149                           fsr2h	equ	0xFDA
  2150                           fsr2l	equ	0xFD9
  2151                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        4
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     58      66
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    motorRight.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    motorRight.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    motorLeft.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    motorLeft.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    reverseSquareRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(COMRAM[9]), 

    reverseSquareRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(COMRAM[9]), 

    turnLeft_135@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    turnLeft_135@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    turnLeft_135@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    turnLeft_135@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    turnRight_135@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    turnRight_135@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    turnRight_135@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    turnRight_135@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    turn_180@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    turn_180@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    turn_180@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    turn_180@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    turnRight_90@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    turnRight_90@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    turnRight_90@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    turnRight_90@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    turnRight_90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(COMRAM[9]), 

    turnRight_90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(COMRAM[9]), 

    turnLeft_90@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    turnLeft_90@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    turnLeft_90@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    turnLeft_90@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    turnRight@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    turnRight@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    turnRight@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    turnRight@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    turnLeft@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    turnLeft@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    turnLeft@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    turnLeft@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    reverse@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    reverse@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    reverse@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(COMRAM[9]), 

    reverse@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    reverse@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    reverse@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(COMRAM[9]), 

    forward@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    forward@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    forward@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    forward@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(COMRAM[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(COMRAM[9]), 

    S845DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    S845DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(COMRAM[9]), main@motorLeft(COMRAM[9]), 


Critical Paths under _main in COMRAM

    _main->_reverseSquareRight
    _reverseSquareRight->_turnRight_90
    _turnRight_90->_stop
    _stop->_setMotorPWM
    _reverse->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _HighISR in COMRAM

    _HighISR->_write16bitTMR0val

Critical Paths under _main in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                19    19      0   33865
                                             39 COMRAM    19    19      0
                    _Interrupts_init
                        _Timer0_init
                    _initDCmotorsPWM
                 _reverseSquareRight
                               _stop
 ---------------------------------------------------------------------------------
 (1) _reverseSquareRight                                   6     2      4   26325
                                             33 COMRAM     6     2      4
                            _reverse
                               _stop
                       _turnRight_90
 ---------------------------------------------------------------------------------
 (2) _turnRight_90                                         6     2      4   14635
                                             27 COMRAM     6     2      4
                            _reverse
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 6     2      4    7005
                                             21 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _reverse                                              5     1      4    4357
                                             21 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          6     4      2    2725
                                             15 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     491
                                              2 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     358
                                              8 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      76
                                              2 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _HighISR                                              0     0      0     196
                  _write16bitTMR0val
 ---------------------------------------------------------------------------------
 (7) _write16bitTMR0val                                    2     0      2     196
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Interrupts_init
   _Timer0_init
   _initDCmotorsPWM
   _reverseSquareRight
     _reverse
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
     _stop
       _setMotorPWM
     _turnRight_90
       _reverse
       _setMotorPWM
       _stop
   _stop

 _HighISR (ROOT)
   _write16bitTMR0val

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      59        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3A      42       1       70.2%
BITBIGSFRhlllh      54      0       0      43        0.0%
BITBIGSFRhlllll     46      0       0      45        0.0%
BITBIGSFRlllhll     35      0       0      54        0.0%
BITBIGSFRllll       2D      0       0      57        0.0%
BITBIGSFRllhh       20      0       0      47        0.0%
BITBIGSFRlllhhh     1E      0       0      49        0.0%
BITBIGSFRhhhhhl     1B      0       0      33        0.0%
BITBIGSFRhhhlll     17      0       0      38        0.0%
BITBIGSFRhhhhl      13      0       0      34        0.0%
BITBIGSFRlllhhh     11      0       0      50        0.0%
BITBIGSFRhhhlhh      E      0       0      35        0.0%
BITBIGSFRhhhhhh      D      0       0      32        0.0%
BITBIGSFRllhl        C      0       0      48        0.0%
BITBIGSFRlllhll      B      0       0      56        0.0%
BITBIGSFRlllhll      9      0       0      55        0.0%
BITBIGSFRhhhlll      6      0       0      39        0.0%
BITBIGSFRlllhlh      5      0       0      53        0.0%
BITBIGSFRhlhh        3      0       0      40        0.0%
BITBIGSFRlllhhl      3      0       0      52        0.0%
BITBIGSFRhllllh      2      0       0      44        0.0%
BITBIGSFRhhhllh      2      0       0      37        0.0%
BITBIGSFRhhhlhl      1      0       0      36        0.0%
BITBIGSFRlllhhh      1      0       0      51        0.0%
BITBIGSFRhllh        1      0       0      42        0.0%
BITBIGSFRhlhl        1      0       0      41        0.0%
BITBIGSFRlh          1      0       0      46        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      42      58        0.0%
DATA                 0      0      42       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Tue Dec 13 16:46:23 2022

       ___wmul@multiplicand 0005  __end_of_reverseSquareRight 065E           ??_Interrupts_init 0003  
                       l132 05DA                         l214 065C                         l304 0754  
                       l315 0728                         l139 01BE                         l149 054A  
                       l280 0748                         l169 03D2                         l193 02FC  
                       l265 049A                         l813 06D0                         l806 06C8  
                       u800 04DE                         u801 04DA                         u810 051A  
                       u811 0516                         u740 0678                         u820 0532  
                       u741 0674                         u821 052E                         u750 0696  
                       u830 035A                         u751 0692                         u831 0356  
                       u760 06B2                         u840 037E                         u761 06AE  
                       u841 037A                         u770 0070                         u850 03A2  
                       u771 006C                         u851 039E                         u780 013A  
                       u860 03BA                         u781 0136                         u861 03B6  
                       u790 04BA                         u870 02B8                         u791 04B6  
                       u871 02B4                         u880 02D0                         u881 02CC  
                       wreg 000FE8        reverseSquareRight@mL 0022        reverseSquareRight@mR 0024  
                      l1160 074A                        l1152 072A                        l1154 0732  
                      l1156 073C                        l1158 0746                        l1620 0720  
                      l1700 01D4                        l1630 0680                        l1710 024C  
                      l1702 01EC                        l1640 06BA                        l1632 0688  
                      l1624 065E                        l1720 02A0                        l1712 025C  
                      l1704 0218                        l1730 055C                        l1642 06BC  
                      l1634 0696                        l1626 0666                        l1618 0704  
                      l1650 00C4                        l1722 02B8                        l1714 0270  
                      l1706 022C                        l1740 05C0                        l1732 0586  
                      l1644 06C2                        l1636 069C                        l1628 0678  
                      l1660 017E                        l1652 00D8                        l1724 02D0  
                      l1716 0288                        l1708 023C                        l1900 03E8  
                      l1742 05C2                        l1734 05AA                        l1638 06B2  
                      l1654 00DC                        l1646 0054                        l1670 04DE  
                      l1662 049E                        l1726 02E8                        l1718 0294  
                      l1910 03FE                        l1902 03EA                        l1744 05CC  
                      l1736 05B4                        l1728 054C                        l1656 011E  
                      l1648 0070                        l1680 0532                        l1672 04EA  
                      l1664 04A2                        l1920 041A                        l1912 0406  
                      l1904 03EE                        l1746 05CE                        l1738 05B6  
                      l1658 013A                        l1690 037E                        l1682 02FE  
                      l1674 04F6                        l1666 04BA                        l1770 05F0  
                      l1930 0438                        l1922 0422                        l1914 040E  
                      l1906 03F2                        l1748 05D8                        l1684 0342  
                      l1692 038A                        l1668 04C6                        l1676 0502  
                      l1772 0608                        l1932 043C                        l1924 042A  
                      l1916 0412                        l1908 03F6                        l1694 03A2  
                      l1686 035A                        l1678 051A                        l1774 0634  
                      l1934 044A                        l1926 0432                        l1918 0416  
                      l1696 03BA                        l1688 0366                        l1776 0648  
                      l1768 05DC                        l1936 045A                        l1928 0436  
                      l1698 01C0                        l1894 03D4                        l1896 03D8  
                      l1898 03DC                        u1030 044A                        u1031 0446  
                      u1040 045A                        u1041 0456                        u1107 020A  
                      u1117 02DA                        u1127 053C                        u1077 05FA  
                      u1087 0626                        u1097 01DE                        _T2PR 000FBC  
                      _main 03D4                        fsr2h 000FDA                        indf2 000FDF  
                      fsr1l 000FE1                        fsr2l 000FD9                        btemp 0043  
                      _stop 049E                        prodh 000FF4                        prodl 000FF3  
                      start 0050             __end_of_HighISR 0050                ___param_bank 000000  
                     ?_main 0001                       ?_stop 0016             __end_of___lwdiv 06D2  
                     i2l312 004C                       i2l283 075E                       _TMR0H 000FD4  
                     _TMR0L 000FD3                       tablat 000FF5             __end_of_reverse 03D4  
                     ttemp5 0044                       ttemp6 0047                       ttemp7 004B  
                     status 000FD8                       wtemp8 0044             __initialization 06D2  
              __end_of_main 049E                __end_of_stop 054C                      ??_main 0028  
                    ??_stop 001A               __activetblptr 000000                _turnRight_90 01C0  
              ?_setMotorPWM 0010                      _CCPR1H 000FAA                      _CCPR2H 000FA6  
                    _CCPR3H 000F25                      _CCPR4H 000F21                      _RE2PPS 000E74  
                    _RD5PPS 000E6F                      _RC7PPS 000E69                      _RE4PPS 000E76  
                    _RD6PPS 000E70                      i2l1780 075A                      i2l1940 001A  
                    i2l1942 0028                      i2l1950 0048                      i2l1944 0034  
                    i2l1778 0756                      i2l1946 003A                      i2l1938 000A  
                    i2l1948 0046                      _RG6PPS 000E88                   ??_HighISR 0003  
             ??_Timer0_init 0003                _CCPTMRS0bits 000FAD                      ___wmul 0704  
                 ??___lwdiv 000D                      isa$std 000001               main@motorLeft 0032  
              __pdataCOMRAM 003F                      tblptrh 000FF7                      tblptrl 000FF6  
                    tblptru 000FF8                   ??_reverse 001A                      stop@mL 0016  
                    stop@mR 0018           ??_initDCmotorsPWM 0005                  __accesstop 0060  
   __end_of__initialization 06FA               ___rparam_used 000001             _Interrupts_init 074A  
            __pcstackCOMRAM 0001         __end_of_Timer0_init 074A          _reverseSquareRight 05DC  
       ?_reverseSquareRight 0022                _T2CLKCONbits 000FBF                     ?___wmul 0003  
      ??_reverseSquareRight 0026                     _SSP2ADD 000ED6                     _SSP2BUF 000ED5  
   __end_of_Interrupts_init 0756                     _HighISR 0008                     __Hparam 0000  
                   __Lparam 0000                 _Timer0_init 072A                     ___lwdiv 065E  
                _off_period 003B                     __pcinit 06D2                     __ramtop 0E00  
                   __ptext0 03D4                     __ptext1 05DC                     __ptext2 01C0  
                   __ptext3 049E                     __ptext4 02FE                     __ptext5 0054  
                   __ptext6 0704                     __ptext7 065E                     __ptext8 054C  
                   __ptext9 072A                   _T2CONbits 000FBD                   _T2HLTbits 000FBE  
                   _reverse 02FE              main@motorRight 0029        end_of_initialization 06FA  
                   postdec1 000FE5                     postdec2 000FDD                     postinc0 000FEE  
                   postinc2 000FDE             _initDCmotorsPWM 054C                   _PORTFbits 000F8E  
        setMotorPWM@negDuty 0015          setMotorPWM@posDuty 0014                   _TRISCbits 000F83  
                 _TRISDbits 000F84                   _TRISEbits 000F85                   _TRISFbits 000F86  
                 _TRISGbits 000F87            ?_Interrupts_init 0001                 _CCP1CONbits 000FAB  
               _CCP2CONbits 000FA7                 _CCP3CONbits 000F26                 _CCP4CONbits 000F22  
            __end_of___wmul 072A               __pidataCOMRAM 0760         start_initialization 06D2  
   __end_of_initDCmotorsPWM 05DC                    ??___wmul 0007                 __pbssCOMRAM 003B  
                  ?_HighISR 0001            ___lwdiv@dividend 0009                ?_Timer0_init 0001  
                 __pintcode 0008                    ?___lwdiv 0009               ?_turnRight_90 001C  
                  ?_reverse 0016               ??_setMotorPWM 0012            ___lwdiv@quotient 000D  
  initDCmotorsPWM@PWMperiod 0003              ___wmul@product 0007                    _LATCbits 000F7B  
                  _LATEbits 000F7D                   _on_period 003D                    _LATGbits 000F7F  
                  _PIE0bits 000E29                    i2u105_40 001A                    i2u105_41 0016  
                  i2u106_40 0028                    i2u106_41 0024                    _PIR0bits 000E33  
          ?_initDCmotorsPWM 0003                    _SSP2CON2 000EDA                    _SSP2STAT 000ED8  
         ___wmul@multiplier 0003        write16bitTMR0val@tmp 0001              ??_turnRight_90 0020  
              setMotorPWM@m 0010                   main@count 0028           _write16bitTMR0val 0756  
        ?_write16bitTMR0val 0001                   copy_data0 06E6         ??_write16bitTMR0val 0003  
       __end_of_setMotorPWM 01C0                    __Hrparam 0000                    __Lrparam 0000  
 __end_of_write16bitTMR0val 0760                  _ANSELDbits 000EA7                  _ANSELFbits 000EB4  
                _T0CON0bits 000FD5                  _T0CON1bits 000FD6             ___lwdiv@divisor 000B  
           ___lwdiv@counter 000F                    __ptext10 074A                    __ptext12 0756  
            turnRight_90@mL 001C              turnRight_90@mR 001E                _SSP2CON1bits 000ED9  
              _SSP2CON2bits 000EDA                   reverse@mL 0016                   reverse@mR 0018  
            _turning_time45 0041                    isa$xinst 000000                    int$flags 0043  
                _INTCONbits 000FF2                _reverse_time 003F                 _setMotorPWM 0054  
                  intlevel2 0000        __end_of_turnRight_90 02FE                  _SSP2DATPPS 000E1D  
                _SSP2CLKPPS 000E1C  

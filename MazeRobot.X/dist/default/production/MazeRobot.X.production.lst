

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Tue Dec 13 20:37:05 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    37                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    38                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    39                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    40   000000                     
    41                           ; Version 2.35
    42                           ; Generated 05/05/2021 GMT
    43                           ; 
    44                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    45                           ; All rights reserved.
    46                           ; 
    47                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    48                           ; 
    49                           ; Redistribution and use in source and binary forms, with or without modification, are
    50                           ; permitted provided that the following conditions are met:
    51                           ; 
    52                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    53                           ;        conditions and the following disclaimer.
    54                           ; 
    55                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    56                           ;        of conditions and the following disclaimer in the documentation and/or other
    57                           ;        materials provided with the distribution. Publication is not required when
    58                           ;        this file is used in an embedded application.
    59                           ; 
    60                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    61                           ;        software without specific prior written permission.
    62                           ; 
    63                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    64                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    65                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    66                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    67                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    68                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    69                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    70                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    71                           ; 
    72                           ; 
    73                           ; Code-generator required, PIC18F67K40 Definitions
    74                           ; 
    75                           ; SFR Addresses
    76   000000                     
    77                           	psect	idataCOMRAM
    78   00171A                     __pidataCOMRAM:
    79                           	callstack 0
    80                           
    81                           ;initializer for _reverse_time
    82   00171A  02BC               	dw	700
    83                           
    84                           ;initializer for _turning_time45
    85   00171C  00BB               	dw	187
    86   000000                     _TX4REG	set	3812
    87   000000                     _RC4STAbits	set	3815
    88   000000                     _SP4BRGH	set	3814
    89   000000                     _TRISFbits	set	3974
    90   000000                     _LATFbits	set	3966
    91   000000                     _TRISDbits	set	3972
    92   000000                     _TRISGbits	set	3975
    93   000000                     _LATGbits	set	3967
    94   000000                     _LATEbits	set	3965
    95   000000                     _SSP2CON2bits	set	3802
    96   000000                     _RX4PPS	set	3605
    97   000000                     _SSP2CLKPPS	set	3612
    98   000000                     _SSP2DATPPS	set	3613
    99   000000                     _RC7PPS	set	3689
   100   000000                     _RE2PPS	set	3700
   101   000000                     _LATCbits	set	3963
   102   000000                     _LATDbits	set	3964
   103   000000                     _TRISAbits	set	3969
   104   000000                     _LATHbits	set	3968
   105   000000                     _TRISCbits	set	3971
   106   000000                     _TRISEbits	set	3973
   107   000000                     _PORTFbits	set	3982
   108   000000                     _TRISHbits	set	3976
   109   000000                     _T2PR	set	4028
   110   000000                     _T2CONbits	set	4029
   111   000000                     _CCPR2H	set	4006
   112   000000                     _CCPR1H	set	4010
   113   000000                     _RE4PPS	set	3702
   114   000000                     _RG6PPS	set	3720
   115   000000                     _RD5PPS	set	3695
   116   000000                     _ANSELDbits	set	3751
   117   000000                     _SSP2ADD	set	3798
   118   000000                     _SSP2CON1bits	set	3801
   119   000000                     _CCPR4H	set	3873
   120   000000                     _CCPR3H	set	3877
   121   000000                     _TMR0L	set	4051
   122   000000                     _TMR0H	set	4052
   123   000000                     _T0CON0bits	set	4053
   124   000000                     _T0CON1bits	set	4054
   125   000000                     _INTCONbits	set	4082
   126   000000                     _T2CLKCONbits	set	4031
   127   000000                     _T2HLTbits	set	4030
   128   000000                     _CCP1CONbits	set	4011
   129   000000                     _CCPTMRS0bits	set	4013
   130   000000                     _CCP2CONbits	set	4007
   131   000000                     _LATAbits	set	3961
   132   000000                     _CCP3CONbits	set	3878
   133   000000                     _CCP4CONbits	set	3874
   134   000000                     _RC4REG	set	3811
   135   000000                     _SP4BRGL	set	3813
   136   000000                     _TX4STAbits	set	3816
   137   000000                     _BAUD4CONbits	set	3817
   138   000000                     _SSP2CON2	set	3802
   139   000000                     _SSP2STAT	set	3800
   140   000000                     _ANSELFbits	set	3764
   141   000000                     _SSP2BUF	set	3797
   142   000000                     _IPR4bits	set	3619
   143   000000                     _PIE4bits	set	3629
   144   000000                     _PIR4bits	set	3639
   145   000000                     _RC0PPS	set	3682
   146   000000                     _RD6PPS	set	3696
   147                           
   148                           	psect	smallconst
   149   000E00                     __psmallconst:
   150                           	callstack 0
   151   000E00  00                 	db	0
   152   000E01  25                 	db	37
   153   000E02  64                 	db	100	;'d'
   154   000E03  20                 	db	32
   155   000E04  20                 	db	32
   156   000E05  25                 	db	37
   157   000E06  66                 	db	102	;'f'
   158   000E07  20                 	db	32
   159   000E08  20                 	db	32
   160   000E09  25                 	db	37
   161   000E0A  66                 	db	102	;'f'
   162   000E0B  20                 	db	32
   163   000E0C  0D                 	db	13
   164   000E0D  00                 	db	0
   165   000E0E  00                 	db	0	; dummy byte at the end
   166   000000                     
   167                           ; #config settings
   168                           
   169                           	psect	cinit
   170   001556                     __pcinit:
   171                           	callstack 0
   172   001556                     start_initialization:
   173                           	callstack 0
   174   001556                     __initialization:
   175                           	callstack 0
   176                           
   177                           ; Initialize objects allocated to COMRAM (4 bytes)
   178                           ; load TBLPTR registers with __pidataCOMRAM
   179   001556  0E1A               	movlw	low __pidataCOMRAM
   180   001558  6EF6               	movwf	tblptrl,c
   181   00155A  0E17               	movlw	high __pidataCOMRAM
   182   00155C  6EF7               	movwf	tblptrh,c
   183   00155E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   184   001560  6EF8               	movwf	tblptru,c
   185   001562  EE00  F048         	lfsr	0,__pdataCOMRAM
   186   001566  EE10 F004          	lfsr	1,4
   187   00156A                     copy_data0:
   188   00156A  0009               	tblrd		*+
   189   00156C  CFF5 FFEE          	movff	tablat,postinc0
   190   001570  50E5               	movf	postdec1,w,c
   191   001572  50E1               	movf	fsr1l,w,c
   192   001574  E1FA               	bnz	copy_data0
   193                           
   194                           ; Clear objects allocated to BANK0 (60 bytes)
   195   001576  EE00  F060         	lfsr	0,__pbssBANK0
   196   00157A  0E3C               	movlw	60
   197   00157C                     clear_0:
   198   00157C  6AEE               	clrf	postinc0,c
   199   00157E  06E8               	decf	wreg,f,c
   200   001580  E1FD               	bnz	clear_0
   201                           
   202                           ; Clear objects allocated to COMRAM (28 bytes)
   203   001582  EE00  F02C         	lfsr	0,__pbssCOMRAM
   204   001586  0E1C               	movlw	28
   205   001588                     clear_1:
   206   001588  6AEE               	clrf	postinc0,c
   207   00158A  06E8               	decf	wreg,f,c
   208   00158C  E1FD               	bnz	clear_1
   209   00158E                     end_of_initialization:
   210                           	callstack 0
   211   00158E                     __end_of__initialization:
   212                           	callstack 0
   213   00158E  904C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   214   001590  924C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   215   001592  0E00               	movlw	low (__Lsmallconst shr (0+16))
   216   001594  6EF8               	movwf	tblptru,c
   217   001596  0E0E               	movlw	high __Lsmallconst
   218   001598  6EF7               	movwf	tblptrh,c
   219   00159A  0100               	movlb	0
   220   00159C  EF88  F009         	goto	_main	;jump to C main() function
   221                           
   222                           	psect	bssCOMRAM
   223   00002C                     __pbssCOMRAM:
   224                           	callstack 0
   225   00002C                     _EUSART4RXbuf:
   226                           	callstack 0
   227   00002C                     	ds	20
   228   000040                     _off_period:
   229                           	callstack 0
   230   000040                     	ds	2
   231   000042                     _on_period:
   232                           	callstack 0
   233   000042                     	ds	2
   234   000044                     _TxBufReadCnt:
   235                           	callstack 0
   236   000044                     	ds	1
   237   000045                     _TxBufWriteCnt:
   238                           	callstack 0
   239   000045                     	ds	1
   240   000046                     _RxBufReadCnt:
   241                           	callstack 0
   242   000046                     	ds	1
   243   000047                     _RxBufWriteCnt:
   244                           	callstack 0
   245   000047                     	ds	1
   246                           
   247                           	psect	dataCOMRAM
   248   000048                     __pdataCOMRAM:
   249                           	callstack 0
   250   000048                     _reverse_time:
   251                           	callstack 0
   252   000048                     	ds	2
   253   00004A                     _turning_time45:
   254                           	callstack 0
   255   00004A                     	ds	2
   256                           
   257                           	psect	bssBANK0
   258   000060                     __pbssBANK0:
   259                           	callstack 0
   260   000060                     _EUSART4TXbuf:
   261                           	callstack 0
   262   000060                     	ds	60
   263                           
   264                           	psect	cstackBANK0
   265   00009C                     __pcstackBANK0:
   266                           	callstack 0
   267   00009C                     main@motorRight:
   268                           	callstack 0
   269                           
   270                           ; 9 bytes @ 0x0
   271   00009C                     	ds	9
   272   0000A5                     main@motorLeft:
   273                           	callstack 0
   274                           
   275                           ; 9 bytes @ 0x9
   276   0000A5                     	ds	9
   277                           
   278                           	psect	cstackCOMRAM
   279   000001                     __pcstackCOMRAM:
   280                           	callstack 0
   281   000001                     ??_getCharFromTxBuf:
   282   000001                     putCharToRxBuf@byte:
   283                           	callstack 0
   284                           
   285                           ; 1 bytes @ 0x0
   286   000001                     	ds	2
   287   000003                     ??_HighISR:
   288                           
   289                           ; 1 bytes @ 0x2
   290   000003                     	ds	2
   291   000005                     ??_I2C_2_Master_Idle:
   292   000005                     ?___wmul:
   293                           	callstack 0
   294   000005                     initDCmotorsPWM@PWMperiod:
   295                           	callstack 0
   296   000005                     DCmotorsInit@mL:
   297                           	callstack 0
   298   000005                     ___wmul@multiplier:
   299                           	callstack 0
   300                           
   301                           ; 2 bytes @ 0x4
   302   000005                     	ds	1
   303   000006                     I2C_2_Master_Write@data_byte:
   304                           	callstack 0
   305                           
   306                           ; 1 bytes @ 0x5
   307   000006                     	ds	1
   308   000007                     color_writetoaddr@value:
   309                           	callstack 0
   310   000007                     DCmotorsInit@mR:
   311                           	callstack 0
   312   000007                     ___wmul@multiplicand:
   313                           	callstack 0
   314                           
   315                           ; 2 bytes @ 0x6
   316   000007                     	ds	1
   317   000008                     color_writetoaddr@address:
   318                           	callstack 0
   319                           
   320                           ; 1 bytes @ 0x7
   321   000008                     	ds	1
   322   000009                     ??_color_click_init:
   323   000009                     ___wmul@product:
   324                           	callstack 0
   325                           
   326                           ; 2 bytes @ 0x8
   327   000009                     	ds	2
   328   00000B                     ?___lwdiv:
   329                           	callstack 0
   330   00000B                     ___lwdiv@dividend:
   331                           	callstack 0
   332                           
   333                           ; 2 bytes @ 0xA
   334   00000B                     	ds	2
   335   00000D                     ___lwdiv@divisor:
   336                           	callstack 0
   337                           
   338                           ; 2 bytes @ 0xC
   339   00000D                     	ds	2
   340   00000F                     ___lwdiv@counter:
   341                           	callstack 0
   342                           
   343                           ; 1 bytes @ 0xE
   344   00000F                     	ds	1
   345   000010                     ___lwdiv@quotient:
   346                           	callstack 0
   347                           
   348                           ; 2 bytes @ 0xF
   349   000010                     	ds	2
   350   000012                     setMotorPWM@m:
   351                           	callstack 0
   352                           
   353                           ; 2 bytes @ 0x11
   354   000012                     	ds	2
   355   000014                     ??_setMotorPWM:
   356                           
   357                           ; 1 bytes @ 0x13
   358   000014                     	ds	2
   359   000016                     setMotorPWM@posDuty:
   360                           	callstack 0
   361                           
   362                           ; 1 bytes @ 0x15
   363   000016                     	ds	1
   364   000017                     setMotorPWM@negDuty:
   365                           	callstack 0
   366                           
   367                           ; 1 bytes @ 0x16
   368   000017                     	ds	1
   369   000018                     stop@mL:
   370                           	callstack 0
   371   000018                     reverse@mL:
   372                           	callstack 0
   373                           
   374                           ; 2 bytes @ 0x17
   375   000018                     	ds	2
   376   00001A                     stop@mR:
   377                           	callstack 0
   378   00001A                     reverse@mR:
   379                           	callstack 0
   380                           
   381                           ; 2 bytes @ 0x19
   382   00001A                     	ds	2
   383   00001C                     ??_stop:
   384   00001C                     
   385                           ; 1 bytes @ 0x1B
   386   00001C                     	ds	2
   387   00001E                     turnRight_90@mL:
   388                           	callstack 0
   389                           
   390                           ; 2 bytes @ 0x1D
   391   00001E                     	ds	2
   392   000020                     turnRight_90@mR:
   393                           	callstack 0
   394                           
   395                           ; 2 bytes @ 0x1F
   396   000020                     	ds	2
   397   000022                     ??_turnRight_90:
   398                           
   399                           ; 1 bytes @ 0x21
   400   000022                     	ds	2
   401   000024                     reverseSquareRight@mL:
   402                           	callstack 0
   403                           
   404                           ; 2 bytes @ 0x23
   405   000024                     	ds	2
   406   000026                     reverseSquareRight@mR:
   407                           	callstack 0
   408                           
   409                           ; 2 bytes @ 0x25
   410   000026                     	ds	2
   411   000028                     ??_reverseSquareRight:
   412                           
   413                           ; 1 bytes @ 0x27
   414   000028                     	ds	2
   415   00002A                     ??_main:
   416                           
   417                           ; 1 bytes @ 0x29
   418   00002A                     	ds	2
   419                           
   420 ;;
   421 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   422 ;;
   423 ;; *************** function _main *****************
   424 ;; Defined at:
   425 ;;		line 24 in file "main.c"
   426 ;; Parameters:    Size  Location     Type
   427 ;;		None
   428 ;; Auto vars:     Size  Location     Type
   429 ;;  string5        20    0        unsigned char [20]
   430 ;;  string4        20    0        unsigned char [20]
   431 ;;  string3        20    0        unsigned char [20]
   432 ;;  string2        20    0        unsigned char [20]
   433 ;;  string1        20    0        unsigned char [20]
   434 ;;  testString     20    0        unsigned char [20]
   435 ;;  motorLeft       9    9[BANK0 ] struct DC_motor
   436 ;;  motorRight      9    0[BANK0 ] struct DC_motor
   437 ;;  whiteRGBVal     8    0        struct RGB
   438 ;;  ambientRGBVa    8    0        struct RGB
   439 ;;  RGBVal          8    0        struct RGB
   440 ;;  whiteC          4    0        struct RGB
   441 ;;  clearRef        4    0        struct RGB
   442 ;; Return value:  Size  Location     Type
   443 ;;                  1    wreg      void 
   444 ;; Registers used:
   445 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   446 ;; Tracked objects:
   447 ;;		On entry : 0/0
   448 ;;		On exit  : 0/0
   449 ;;		Unchanged: 0/0
   450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   452 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   453 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   454 ;;      Totals:         2      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   455 ;;Total ram usage:       20 bytes
   456 ;; Hardware stack levels required when called: 7
   457 ;; This function calls:
   458 ;;		_DCmotorsInit
   459 ;;		_color_click_init
   460 ;;		_initDCmotorsPWM
   461 ;;		_initUSART4
   462 ;;		_reverseSquareRight
   463 ;; This function is called by:
   464 ;;		Startup code after reset
   465 ;; This function uses a non-reentrant model
   466 ;;
   467                           
   468                           	psect	text0
   469   001310                     __ptext0:
   470                           	callstack 0
   471   001310                     _main:
   472                           	callstack 24
   473   001310                     
   474                           ;main.c: 26:     color_click_init();
   475   001310  ECD0  F00A         	call	_color_click_init	;wreg free
   476   001314                     
   477                           ;main.c: 27:     initUSART4();
   478   001314  EC51  F00B         	call	_initUSART4	;wreg free
   479   001318                     
   480                           ;main.c: 28:     initDCmotorsPWM(199);
   481   001318  0E00               	movlw	0
   482   00131A  6E06               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   483   00131C  0EC7               	movlw	199
   484   00131E  6E05               	movwf	initDCmotorsPWM@PWMperiod^0,c
   485   001320  EC29  F00A         	call	_initDCmotorsPWM	;wreg free
   486   001324                     
   487                           ;main.c: 35:     LATDbits.LATD7=0;
   488   001324  9E7C               	bcf	124,7,c	;volatile
   489   001326                     
   490                           ;main.c: 36:     TRISDbits.TRISD7=0;
   491   001326  9E84               	bcf	132,7,c	;volatile
   492   001328                     
   493                           ;main.c: 38:     LATHbits.LATH3=0;
   494   001328  9680               	bcf	128,3,c	;volatile
   495   00132A                     
   496                           ;main.c: 39:     TRISHbits.TRISH3=0;
   497   00132A  9688               	bcf	136,3,c	;volatile
   498   00132C                     
   499                           ;main.c: 41:     LATDbits.LATD4 = 0;
   500   00132C  987C               	bcf	124,4,c	;volatile
   501   00132E                     
   502                           ;main.c: 42:     TRISDbits.TRISD4 = 0;
   503   00132E  9884               	bcf	132,4,c	;volatile
   504   001330                     
   505                           ;main.c: 44:     LATHbits.LATH0 = 0;
   506   001330  9080               	bcf	128,0,c	;volatile
   507   001332                     
   508                           ;main.c: 45:     TRISHbits.TRISH0 = 0;
   509   001332  9088               	bcf	136,0,c	;volatile
   510   001334                     
   511                           ;main.c: 47:     LATFbits.LATF0 = 0;
   512   001334  907E               	bcf	126,0,c	;volatile
   513   001336                     
   514                           ;main.c: 48:     TRISFbits.TRISF0 = 0;
   515   001336  9086               	bcf	134,0,c	;volatile
   516   001338                     
   517                           ;main.c: 50:     LATHbits.LATH1 = 0;
   518   001338  9280               	bcf	128,1,c	;volatile
   519   00133A                     
   520                           ;main.c: 51:     TRISHbits.TRISH1 = 0;
   521   00133A  9288               	bcf	136,1,c	;volatile
   522   00133C                     
   523                           ;main.c: 53:     LATDbits.LATD3 = 0;
   524   00133C  967C               	bcf	124,3,c	;volatile
   525   00133E                     
   526                           ;main.c: 54:     TRISDbits.TRISD3 = 0;
   527   00133E  9684               	bcf	132,3,c	;volatile
   528   001340                     
   529                           ;main.c: 57:     LATDbits.LATD4 = 1;
   530   001340  887C               	bsf	124,4,c	;volatile
   531   001342                     
   532                           ;main.c: 58:     LATFbits.LATF0 = 1;
   533   001342  807E               	bsf	126,0,c	;volatile
   534   001344                     
   535                           ;main.c: 59:     LATHbits.LATH0 = 1;
   536   001344  8080               	bsf	128,0,c	;volatile
   537   001346                     
   538                           ;main.c: 60:     LATFbits.LATF0 = 1;
   539   001346  807E               	bsf	126,0,c	;volatile
   540   001348                     
   541                           ;main.c: 61:     LATDbits.LATD3 = 1;
   542   001348  867C               	bsf	124,3,c	;volatile
   543   00134A                     
   544                           ;main.c: 66:     LATGbits.LATG0=1;
   545   00134A  807F               	bsf	127,0,c	;volatile
   546   00134C                     
   547                           ;main.c: 67:     LATEbits.LATE7=1;
   548   00134C  8E7D               	bsf	125,7,c	;volatile
   549   00134E                     
   550                           ;main.c: 68:     LATAbits.LATA3=1;
   551   00134E  8679               	bsf	121,3,c	;volatile
   552   001350                     
   553                           ;main.c: 70:     TRISGbits.TRISG0=0;
   554   001350  9087               	bcf	135,0,c	;volatile
   555   001352                     
   556                           ;main.c: 71:     TRISEbits.TRISE7=0;
   557   001352  9E85               	bcf	133,7,c	;volatile
   558   001354                     
   559                           ;main.c: 72:     TRISAbits.TRISA3=0;
   560   001354  9681               	bcf	129,3,c	;volatile
   561   001356                     
   562                           ;main.c: 75:     TRISFbits.TRISF2=1;
   563   001356  8486               	bsf	134,2,c	;volatile
   564   001358                     
   565                           ;main.c: 76:     ANSELFbits.ANSELF2=0;
   566   001358  010E               	movlb	14	; () banked
   567   00135A  95B4               	bcf	180,2,b	;volatile
   568   00135C                     
   569                           ; BSR set to: 14
   570                           ;main.c: 78:     TRISFbits.TRISF3=1;
   571   00135C  8686               	bsf	134,3,c	;volatile
   572   00135E                     
   573                           ; BSR set to: 14
   574                           ;main.c: 79:     ANSELFbits.ANSELF3=0;
   575   00135E  97B4               	bcf	180,3,b	;volatile
   576   001360                     
   577                           ; BSR set to: 14
   578                           ;main.c: 95:     DC_motor motorLeft,motorRight;;main.c: 96:     DCmotorsInit(&motorLeft,
      +                          &motorRight);
   579   001360  0EA5               	movlw	low main@motorLeft
   580   001362  6E05               	movwf	DCmotorsInit@mL^0,c
   581   001364  0E00               	movlw	high main@motorLeft
   582   001366  6E06               	movwf	(DCmotorsInit@mL+1)^0,c
   583   001368  0E9C               	movlw	low main@motorRight
   584   00136A  6E07               	movwf	DCmotorsInit@mR^0,c
   585   00136C  0E00               	movlw	high main@motorRight
   586   00136E  6E08               	movwf	(DCmotorsInit@mR+1)^0,c
   587   001370  ECC8  F008         	call	_DCmotorsInit	;wreg free
   588   001374                     
   589                           ;main.c: 249:     TRISFbits.TRISF2=1;
   590   001374  8486               	bsf	134,2,c	;volatile
   591   001376                     
   592                           ;main.c: 250:     ANSELFbits.ANSELF2=0;
   593   001376  010E               	movlb	14	; () banked
   594   001378  95B4               	bcf	180,2,b	;volatile
   595   00137A                     
   596                           ; BSR set to: 14
   597                           ;main.c: 252:     if (!PORTFbits.RF2){
   598   00137A  B48E               	btfsc	142,2,c	;volatile
   599   00137C  EFC2  F009         	goto	u2721
   600   001380  EFC4  F009         	goto	u2720
   601   001384                     u2721:
   602   001384  EFDC  F009         	goto	l370
   603   001388                     u2720:
   604   001388                     l3304:
   605                           
   606                           ;main.c: 257:             reverseSquareRight(&motorLeft, &motorRight);
   607   001388  0EA5               	movlw	low main@motorLeft
   608   00138A  6E24               	movwf	reverseSquareRight@mL^0,c
   609   00138C  0E00               	movlw	high main@motorLeft
   610   00138E  6E25               	movwf	(reverseSquareRight@mL+1)^0,c
   611   001390  0E9C               	movlw	low main@motorRight
   612   001392  6E26               	movwf	reverseSquareRight@mR^0,c
   613   001394  0E00               	movlw	high main@motorRight
   614   001396  6E27               	movwf	(reverseSquareRight@mR+1)^0,c
   615   001398  ECDE  F009         	call	_reverseSquareRight	;wreg free
   616   00139C                     
   617                           ;main.c: 258:             _delay((unsigned long)((100)*(64000000/4000.0)));
   618   00139C  0E09               	movlw	9
   619   00139E  6E2B               	movwf	(??_main+1)^0,c
   620   0013A0  0E1E               	movlw	30
   621   0013A2  6E2A               	movwf	??_main^0,c
   622   0013A4  0EE4               	movlw	228
   623   0013A6                     u3097:
   624   0013A6  2EE8               	decfsz	wreg,f,c
   625   0013A8  D7FE               	bra	u3097
   626   0013AA  2E2A               	decfsz	??_main^0,f,c
   627   0013AC  D7FC               	bra	u3097
   628   0013AE  2E2B               	decfsz	(??_main+1)^0,f,c
   629   0013B0  D7FA               	bra	u3097
   630   0013B2  D000               	nop2	
   631   0013B4  EFC4  F009         	goto	l3304
   632   0013B8                     l370:
   633                           
   634                           ; BSR set to: 14
   635   0013B8  EF34  F000         	goto	start
   636   0013BC                     __end_of_main:
   637                           	callstack 0
   638                           
   639 ;; *************** function _reverseSquareRight *****************
   640 ;; Defined at:
   641 ;;		line 361 in file "dc_motor.c"
   642 ;; Parameters:    Size  Location     Type
   643 ;;  mL              2   35[COMRAM] PTR struct DC_motor
   644 ;;		 -> main@motorLeft(9), 
   645 ;;  mR              2   37[COMRAM] PTR struct DC_motor
   646 ;;		 -> main@motorRight(9), 
   647 ;; Auto vars:     Size  Location     Type
   648 ;;		None
   649 ;; Return value:  Size  Location     Type
   650 ;;                  1    wreg      void 
   651 ;; Registers used:
   652 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   653 ;; Tracked objects:
   654 ;;		On entry : 0/0
   655 ;;		On exit  : 0/0
   656 ;;		Unchanged: 0/0
   657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   658 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   660 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   661 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   662 ;;Total ram usage:        6 bytes
   663 ;; Hardware stack levels used: 1
   664 ;; Hardware stack levels required when called: 6
   665 ;; This function calls:
   666 ;;		_reverse
   667 ;;		_stop
   668 ;;		_turnRight_90
   669 ;; This function is called by:
   670 ;;		_main
   671 ;;		_colorDetect
   672 ;; This function uses a non-reentrant model
   673 ;;
   674                           
   675                           	psect	text1
   676   0013BC                     __ptext1:
   677                           	callstack 0
   678   0013BC                     _reverseSquareRight:
   679                           	callstack 24
   680   0013BC                     
   681                           ;dc_motor.c: 361: void reverseSquareRight(DC_motor *mL, DC_motor *mR);dc_motor.c: 362: {
      +                          ;dc_motor.c: 364:     reverse(mL, mR);
   682   0013BC  C024  F018         	movff	reverseSquareRight@mL,reverse@mL
   683   0013C0  C025  F019         	movff	reverseSquareRight@mL+1,reverse@mL+1
   684   0013C4  C026  F01A         	movff	reverseSquareRight@mR,reverse@mR
   685   0013C8  C027  F01B         	movff	reverseSquareRight@mR+1,reverse@mR+1
   686   0013CC  EC5D  F008         	call	_reverse	;wreg free
   687   0013D0                     
   688                           ;dc_motor.c: 365:     _delay((unsigned long)((reverse_time)*(64000000/4000.0)));
   689   0013D0  0E39               	movlw	57
   690   0013D2  6E29               	movwf	(??_reverseSquareRight+1)^0,c
   691   0013D4  0ED2               	movlw	210
   692   0013D6  6E28               	movwf	??_reverseSquareRight^0,c
   693   0013D8  0E4C               	movlw	76
   694   0013DA                     u3107:
   695   0013DA  2EE8               	decfsz	wreg,f,c
   696   0013DC  D7FE               	bra	u3107
   697   0013DE  2E28               	decfsz	??_reverseSquareRight^0,f,c
   698   0013E0  D7FC               	bra	u3107
   699   0013E2  2E29               	decfsz	(??_reverseSquareRight+1)^0,f,c
   700   0013E4  D7FA               	bra	u3107
   701   0013E6  D000               	nop2	
   702   0013E8                     
   703                           ;dc_motor.c: 367:     stop(mL, mR);
   704   0013E8  C024  F018         	movff	reverseSquareRight@mL,stop@mL
   705   0013EC  C025  F019         	movff	reverseSquareRight@mL+1,stop@mL+1
   706   0013F0  C026  F01A         	movff	reverseSquareRight@mR,stop@mR
   707   0013F4  C027  F01B         	movff	reverseSquareRight@mR+1,stop@mR+1
   708   0013F8  EC31  F009         	call	_stop	;wreg free
   709   0013FC                     
   710                           ;dc_motor.c: 369:     reverse(mL, mR);
   711   0013FC  C024  F018         	movff	reverseSquareRight@mL,reverse@mL
   712   001400  C025  F019         	movff	reverseSquareRight@mL+1,reverse@mL+1
   713   001404  C026  F01A         	movff	reverseSquareRight@mR,reverse@mR
   714   001408  C027  F01B         	movff	reverseSquareRight@mR+1,reverse@mR+1
   715   00140C  EC5D  F008         	call	_reverse	;wreg free
   716   001410                     
   717                           ;dc_motor.c: 370:     _delay((unsigned long)((2*reverse_time)*(64000000/4000.0)));
   718   001410  0E72               	movlw	114
   719   001412  6E29               	movwf	(??_reverseSquareRight+1)^0,c
   720   001414  0EA3               	movlw	163
   721   001416  6E28               	movwf	??_reverseSquareRight^0,c
   722   001418  0E9B               	movlw	155
   723   00141A                     u3117:
   724   00141A  2EE8               	decfsz	wreg,f,c
   725   00141C  D7FE               	bra	u3117
   726   00141E  2E28               	decfsz	??_reverseSquareRight^0,f,c
   727   001420  D7FC               	bra	u3117
   728   001422  2E29               	decfsz	(??_reverseSquareRight+1)^0,f,c
   729   001424  D7FA               	bra	u3117
   730   001426  F000               	nop	
   731                           
   732                           ;dc_motor.c: 372:     turnRight_90(mL,mR);
   733   001428  C024  F01E         	movff	reverseSquareRight@mL,turnRight_90@mL
   734   00142C  C025  F01F         	movff	reverseSquareRight@mL+1,turnRight_90@mL+1
   735   001430  C026  F020         	movff	reverseSquareRight@mR,turnRight_90@mR
   736   001434  C027  F021         	movff	reverseSquareRight@mR+1,turnRight_90@mR+1
   737   001438  ECBE  F007         	call	_turnRight_90	;wreg free
   738                           
   739                           ;dc_motor.c: 374:     stop(mL, mR);
   740   00143C  C024  F018         	movff	reverseSquareRight@mL,stop@mL
   741   001440  C025  F019         	movff	reverseSquareRight@mL+1,stop@mL+1
   742   001444  C026  F01A         	movff	reverseSquareRight@mR,stop@mR
   743   001448  C027  F01B         	movff	reverseSquareRight@mR+1,stop@mR+1
   744   00144C  EC31  F009         	call	_stop	;wreg free
   745   001450  0012               	return		;funcret
   746   001452                     __end_of_reverseSquareRight:
   747                           	callstack 0
   748                           
   749 ;; *************** function _turnRight_90 *****************
   750 ;; Defined at:
   751 ;;		line 267 in file "dc_motor.c"
   752 ;; Parameters:    Size  Location     Type
   753 ;;  mL              2   29[COMRAM] PTR struct DC_motor
   754 ;;		 -> main@motorLeft(9), 
   755 ;;  mR              2   31[COMRAM] PTR struct DC_motor
   756 ;;		 -> main@motorRight(9), 
   757 ;; Auto vars:     Size  Location     Type
   758 ;;		None
   759 ;; Return value:  Size  Location     Type
   760 ;;                  1    wreg      void 
   761 ;; Registers used:
   762 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   763 ;; Tracked objects:
   764 ;;		On entry : 0/0
   765 ;;		On exit  : 0/0
   766 ;;		Unchanged: 0/0
   767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   768 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   770 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   771 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   772 ;;Total ram usage:        6 bytes
   773 ;; Hardware stack levels used: 1
   774 ;; Hardware stack levels required when called: 5
   775 ;; This function calls:
   776 ;;		_reverse
   777 ;;		_setMotorPWM
   778 ;;		_stop
   779 ;; This function is called by:
   780 ;;		_reverseSquareRight
   781 ;;		_colorDetect
   782 ;; This function uses a non-reentrant model
   783 ;;
   784                           
   785                           	psect	text2
   786   000F7C                     __ptext2:
   787                           	callstack 0
   788   000F7C                     _turnRight_90:
   789                           	callstack 24
   790   000F7C                     
   791                           ;dc_motor.c: 267: void turnRight_90(DC_motor *mL, DC_motor *mR);dc_motor.c: 268: {;dc_mo
      +                          tor.c: 269:     stop(mL, mR);
   792   000F7C  C01E  F018         	movff	turnRight_90@mL,stop@mL
   793   000F80  C01F  F019         	movff	turnRight_90@mL+1,stop@mL+1
   794   000F84  C020  F01A         	movff	turnRight_90@mR,stop@mR
   795   000F88  C021  F01B         	movff	turnRight_90@mR+1,stop@mR+1
   796   000F8C  EC31  F009         	call	_stop	;wreg free
   797   000F90                     
   798                           ;dc_motor.c: 270:     _delay((unsigned long)((100)*(64000000/4000.0)));
   799   000F90  0E09               	movlw	9
   800   000F92  6E23               	movwf	(??_turnRight_90+1)^0,c
   801   000F94  0E1E               	movlw	30
   802   000F96  6E22               	movwf	??_turnRight_90^0,c
   803   000F98  0EE4               	movlw	228
   804   000F9A                     u3127:
   805   000F9A  2EE8               	decfsz	wreg,f,c
   806   000F9C  D7FE               	bra	u3127
   807   000F9E  2E22               	decfsz	??_turnRight_90^0,f,c
   808   000FA0  D7FC               	bra	u3127
   809   000FA2  2E23               	decfsz	(??_turnRight_90+1)^0,f,c
   810   000FA4  D7FA               	bra	u3127
   811   000FA6  D000               	nop2	
   812   000FA8                     
   813                           ;dc_motor.c: 272:     reverse(mL, mR);
   814   000FA8  C01E  F018         	movff	turnRight_90@mL,reverse@mL
   815   000FAC  C01F  F019         	movff	turnRight_90@mL+1,reverse@mL+1
   816   000FB0  C020  F01A         	movff	turnRight_90@mR,reverse@mR
   817   000FB4  C021  F01B         	movff	turnRight_90@mR+1,reverse@mR+1
   818   000FB8  EC5D  F008         	call	_reverse	;wreg free
   819                           
   820                           ;dc_motor.c: 273:     _delay((unsigned long)((reverse_time)*(64000000/4000.0)));
   821   000FBC  0E39               	movlw	57
   822   000FBE  6E23               	movwf	(??_turnRight_90+1)^0,c
   823   000FC0  0ED2               	movlw	210
   824   000FC2  6E22               	movwf	??_turnRight_90^0,c
   825   000FC4  0E4C               	movlw	76
   826   000FC6                     u3137:
   827   000FC6  2EE8               	decfsz	wreg,f,c
   828   000FC8  D7FE               	bra	u3137
   829   000FCA  2E22               	decfsz	??_turnRight_90^0,f,c
   830   000FCC  D7FC               	bra	u3137
   831   000FCE  2E23               	decfsz	(??_turnRight_90+1)^0,f,c
   832   000FD0  D7FA               	bra	u3137
   833   000FD2  D000               	nop2	
   834   000FD4                     
   835                           ;dc_motor.c: 275:     stop(mL, mR);
   836   000FD4  C01E  F018         	movff	turnRight_90@mL,stop@mL
   837   000FD8  C01F  F019         	movff	turnRight_90@mL+1,stop@mL+1
   838   000FDC  C020  F01A         	movff	turnRight_90@mR,stop@mR
   839   000FE0  C021  F01B         	movff	turnRight_90@mR+1,stop@mR+1
   840   000FE4  EC31  F009         	call	_stop	;wreg free
   841   000FE8                     
   842                           ;dc_motor.c: 277:     mL->direction = 1;
   843   000FE8  EE20 F001          	lfsr	2,1
   844   000FEC  501E               	movf	turnRight_90@mL^0,w,c
   845   000FEE  26D9               	addwf	fsr2l,f,c
   846   000FF0  501F               	movf	(turnRight_90@mL+1)^0,w,c
   847   000FF2  22DA               	addwfc	fsr2h,f,c
   848   000FF4  0E01               	movlw	1
   849   000FF6  6EDF               	movwf	indf2,c
   850   000FF8                     
   851                           ;dc_motor.c: 278:     mR->direction = 0;
   852   000FF8  EE20 F001          	lfsr	2,1
   853   000FFC  5020               	movf	turnRight_90@mR^0,w,c
   854   000FFE  26D9               	addwf	fsr2l,f,c
   855   001000  5021               	movf	(turnRight_90@mR+1)^0,w,c
   856   001002  22DA               	addwfc	fsr2h,f,c
   857   001004  0E00               	movlw	0
   858   001006  6EDF               	movwf	indf2,c
   859   001008                     
   860                           ;dc_motor.c: 280:     mL->brakemode = 1;
   861   001008  EE20 F002          	lfsr	2,2
   862   00100C  501E               	movf	turnRight_90@mL^0,w,c
   863   00100E  26D9               	addwf	fsr2l,f,c
   864   001010  501F               	movf	(turnRight_90@mL+1)^0,w,c
   865   001012  22DA               	addwfc	fsr2h,f,c
   866   001014  0E01               	movlw	1
   867   001016  6EDF               	movwf	indf2,c
   868   001018                     
   869                           ;dc_motor.c: 281:     mL->brakemode = 1;
   870   001018  EE20 F002          	lfsr	2,2
   871   00101C  501E               	movf	turnRight_90@mL^0,w,c
   872   00101E  26D9               	addwf	fsr2l,f,c
   873   001020  501F               	movf	(turnRight_90@mL+1)^0,w,c
   874   001022  22DA               	addwfc	fsr2h,f,c
   875   001024  0E01               	movlw	1
   876   001026  6EDF               	movwf	indf2,c
   877                           
   878                           ;dc_motor.c: 283:     while((mL->power < 80) || (mR->power < 80)){
   879   001028  EF2E  F008         	goto	l2830
   880   00102C                     l2824:
   881                           
   882                           ;dc_motor.c: 284:         mL->power += 10;
   883   00102C  C01E  FFD9         	movff	turnRight_90@mL,fsr2l
   884   001030  C01F  FFDA         	movff	turnRight_90@mL+1,fsr2h
   885   001034  0E0A               	movlw	10
   886   001036  26DF               	addwf	indf2,f,c
   887                           
   888                           ;dc_motor.c: 285:         mR->power += 10;
   889   001038  C020  FFD9         	movff	turnRight_90@mR,fsr2l
   890   00103C  C021  FFDA         	movff	turnRight_90@mR+1,fsr2h
   891   001040  0E0A               	movlw	10
   892   001042  26DF               	addwf	indf2,f,c
   893   001044                     
   894                           ;dc_motor.c: 286:         setMotorPWM(mL);
   895   001044  C01E  F012         	movff	turnRight_90@mL,setMotorPWM@m
   896   001048  C01F  F013         	movff	turnRight_90@mL+1,setMotorPWM@m+1
   897   00104C  EC08  F007         	call	_setMotorPWM	;wreg free
   898   001050                     
   899                           ;dc_motor.c: 287:         setMotorPWM(mR);
   900   001050  C020  F012         	movff	turnRight_90@mR,setMotorPWM@m
   901   001054  C021  F013         	movff	turnRight_90@mR+1,setMotorPWM@m+1
   902   001058  EC08  F007         	call	_setMotorPWM	;wreg free
   903   00105C                     l2830:
   904                           
   905                           ;dc_motor.c: 283:     while((mL->power < 80) || (mR->power < 80)){
   906   00105C  C01E  FFD9         	movff	turnRight_90@mL,fsr2l
   907   001060  C01F  FFDA         	movff	turnRight_90@mL+1,fsr2h
   908   001064  0E4F               	movlw	79
   909   001066  64DF               	cpfsgt	indf2,c
   910   001068  EF38  F008         	goto	u2101
   911   00106C  EF3A  F008         	goto	u2100
   912   001070                     u2101:
   913   001070  EF16  F008         	goto	l2824
   914   001074                     u2100:
   915   001074  C020  FFD9         	movff	turnRight_90@mR,fsr2l
   916   001078  C021  FFDA         	movff	turnRight_90@mR+1,fsr2h
   917   00107C  0E4F               	movlw	79
   918   00107E  64DF               	cpfsgt	indf2,c
   919   001080  EF44  F008         	goto	u2111
   920   001084  EF46  F008         	goto	u2110
   921   001088                     u2111:
   922   001088  EF16  F008         	goto	l2824
   923   00108C                     u2110:
   924   00108C                     
   925                           ;dc_motor.c: 289:    _delay((unsigned long)((turning_time45)*(64000000/4000.0)));
   926   00108C  0E10               	movlw	16
   927   00108E  6E23               	movwf	(??_turnRight_90+1)^0,c
   928   001090  0E2E               	movlw	46
   929   001092  6E22               	movwf	??_turnRight_90^0,c
   930   001094  0EAA               	movlw	170
   931   001096                     u3147:
   932   001096  2EE8               	decfsz	wreg,f,c
   933   001098  D7FE               	bra	u3147
   934   00109A  2E22               	decfsz	??_turnRight_90^0,f,c
   935   00109C  D7FC               	bra	u3147
   936   00109E  2E23               	decfsz	(??_turnRight_90+1)^0,f,c
   937   0010A0  D7FA               	bra	u3147
   938   0010A2  D000               	nop2	
   939   0010A4                     
   940                           ;dc_motor.c: 291:     stop(mL, mR);
   941   0010A4  C01E  F018         	movff	turnRight_90@mL,stop@mL
   942   0010A8  C01F  F019         	movff	turnRight_90@mL+1,stop@mL+1
   943   0010AC  C020  F01A         	movff	turnRight_90@mR,stop@mR
   944   0010B0  C021  F01B         	movff	turnRight_90@mR+1,stop@mR+1
   945   0010B4  EC31  F009         	call	_stop	;wreg free
   946   0010B8  0012               	return		;funcret
   947   0010BA                     __end_of_turnRight_90:
   948                           	callstack 0
   949                           
   950 ;; *************** function _stop *****************
   951 ;; Defined at:
   952 ;;		line 115 in file "dc_motor.c"
   953 ;; Parameters:    Size  Location     Type
   954 ;;  mL              2   23[COMRAM] PTR struct DC_motor
   955 ;;		 -> main@motorLeft(9), 
   956 ;;  mR              2   25[COMRAM] PTR struct DC_motor
   957 ;;		 -> main@motorRight(9), 
   958 ;; Auto vars:     Size  Location     Type
   959 ;;		None
   960 ;; Return value:  Size  Location     Type
   961 ;;                  1    wreg      void 
   962 ;; Registers used:
   963 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   964 ;; Tracked objects:
   965 ;;		On entry : 0/0
   966 ;;		On exit  : 0/0
   967 ;;		Unchanged: 0/0
   968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   969 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   970 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   971 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   972 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   973 ;;Total ram usage:        6 bytes
   974 ;; Hardware stack levels used: 1
   975 ;; Hardware stack levels required when called: 4
   976 ;; This function calls:
   977 ;;		_setMotorPWM
   978 ;; This function is called by:
   979 ;;		_turnRight_90
   980 ;;		_reverseSquareRight
   981 ;;		_turnLeft
   982 ;;		_turnRight
   983 ;;		_turnLeft_90
   984 ;;		_turn_180
   985 ;;		_turnRight_135
   986 ;;		_turnLeft_135
   987 ;;		_reverseSquareLeft
   988 ;; This function uses a non-reentrant model
   989 ;;
   990                           
   991                           	psect	text3
   992   001262                     __ptext3:
   993                           	callstack 0
   994   001262                     _stop:
   995                           	callstack 24
   996   001262                     
   997                           ;dc_motor.c: 117:     while ((mL->power)>0 && (mR->power)>0){
   998   001262  EF63  F009         	goto	l2748
   999   001266                     l2736:
  1000                           
  1001                           ;dc_motor.c: 118:         if ((mL->power) >0){
  1002   001266  C018  FFD9         	movff	stop@mL,fsr2l
  1003   00126A  C019  FFDA         	movff	stop@mL+1,fsr2h
  1004   00126E  50DF               	movf	indf2,w,c
  1005   001270  B4D8               	btfsc	status,2,c
  1006   001272  EF3D  F009         	goto	u2021
  1007   001276  EF3F  F009         	goto	u2020
  1008   00127A                     u2021:
  1009   00127A  EF45  F009         	goto	l2740
  1010   00127E                     u2020:
  1011   00127E                     
  1012                           ;dc_motor.c: 119:             mL->power -= 5;
  1013   00127E  C018  FFD9         	movff	stop@mL,fsr2l
  1014   001282  C019  FFDA         	movff	stop@mL+1,fsr2h
  1015   001286  0E05               	movlw	5
  1016   001288  5EDF               	subwf	indf2,f,c
  1017   00128A                     l2740:
  1018                           
  1019                           ;dc_motor.c: 121:         if ((mR->power) >0){
  1020   00128A  C01A  FFD9         	movff	stop@mR,fsr2l
  1021   00128E  C01B  FFDA         	movff	stop@mR+1,fsr2h
  1022   001292  50DF               	movf	indf2,w,c
  1023   001294  B4D8               	btfsc	status,2,c
  1024   001296  EF4F  F009         	goto	u2031
  1025   00129A  EF51  F009         	goto	u2030
  1026   00129E                     u2031:
  1027   00129E  EF57  F009         	goto	l2744
  1028   0012A2                     u2030:
  1029   0012A2                     
  1030                           ;dc_motor.c: 122:             mR->power -= 5;
  1031   0012A2  C01A  FFD9         	movff	stop@mR,fsr2l
  1032   0012A6  C01B  FFDA         	movff	stop@mR+1,fsr2h
  1033   0012AA  0E05               	movlw	5
  1034   0012AC  5EDF               	subwf	indf2,f,c
  1035   0012AE                     l2744:
  1036                           
  1037                           ;dc_motor.c: 125:         setMotorPWM(mL);
  1038   0012AE  C018  F012         	movff	stop@mL,setMotorPWM@m
  1039   0012B2  C019  F013         	movff	stop@mL+1,setMotorPWM@m+1
  1040   0012B6  EC08  F007         	call	_setMotorPWM	;wreg free
  1041   0012BA                     
  1042                           ;dc_motor.c: 126:         setMotorPWM(mR);
  1043   0012BA  C01A  F012         	movff	stop@mR,setMotorPWM@m
  1044   0012BE  C01B  F013         	movff	stop@mR+1,setMotorPWM@m+1
  1045   0012C2  EC08  F007         	call	_setMotorPWM	;wreg free
  1046   0012C6                     l2748:
  1047                           
  1048                           ;dc_motor.c: 117:     while ((mL->power)>0 && (mR->power)>0){
  1049   0012C6  C018  FFD9         	movff	stop@mL,fsr2l
  1050   0012CA  C019  FFDA         	movff	stop@mL+1,fsr2h
  1051   0012CE  50DF               	movf	indf2,w,c
  1052   0012D0  B4D8               	btfsc	status,2,c
  1053   0012D2  EF6D  F009         	goto	u2041
  1054   0012D6  EF6F  F009         	goto	u2040
  1055   0012DA                     u2041:
  1056   0012DA  EF7B  F009         	goto	l2752
  1057   0012DE                     u2040:
  1058   0012DE  C01A  FFD9         	movff	stop@mR,fsr2l
  1059   0012E2  C01B  FFDA         	movff	stop@mR+1,fsr2h
  1060   0012E6  50DF               	movf	indf2,w,c
  1061   0012E8  A4D8               	btfss	status,2,c
  1062   0012EA  EF79  F009         	goto	u2051
  1063   0012EE  EF7B  F009         	goto	u2050
  1064   0012F2                     u2051:
  1065   0012F2  EF33  F009         	goto	l2736
  1066   0012F6                     u2050:
  1067   0012F6                     l2752:
  1068                           
  1069                           ;dc_motor.c: 128:     _delay((unsigned long)((100)*(64000000/4000.0)));
  1070   0012F6  0E09               	movlw	9
  1071   0012F8  6E1D               	movwf	(??_stop+1)^0,c
  1072   0012FA  0E1E               	movlw	30
  1073   0012FC  6E1C               	movwf	??_stop^0,c
  1074   0012FE  0EE4               	movlw	228
  1075   001300                     u3157:
  1076   001300  2EE8               	decfsz	wreg,f,c
  1077   001302  D7FE               	bra	u3157
  1078   001304  2E1C               	decfsz	??_stop^0,f,c
  1079   001306  D7FC               	bra	u3157
  1080   001308  2E1D               	decfsz	(??_stop+1)^0,f,c
  1081   00130A  D7FA               	bra	u3157
  1082   00130C  D000               	nop2	
  1083   00130E  0012               	return		;funcret
  1084   001310                     __end_of_stop:
  1085                           	callstack 0
  1086                           
  1087 ;; *************** function _reverse *****************
  1088 ;; Defined at:
  1089 ;;		line 155 in file "dc_motor.c"
  1090 ;; Parameters:    Size  Location     Type
  1091 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  1092 ;;		 -> main@motorLeft(9), 
  1093 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  1094 ;;		 -> main@motorRight(9), 
  1095 ;; Auto vars:     Size  Location     Type
  1096 ;;		None
  1097 ;; Return value:  Size  Location     Type
  1098 ;;                  1    wreg      void 
  1099 ;; Registers used:
  1100 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1101 ;; Tracked objects:
  1102 ;;		On entry : 0/0
  1103 ;;		On exit  : 0/0
  1104 ;;		Unchanged: 0/0
  1105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1106 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1108 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1109 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1110 ;;Total ram usage:        5 bytes
  1111 ;; Hardware stack levels used: 1
  1112 ;; Hardware stack levels required when called: 4
  1113 ;; This function calls:
  1114 ;;		_setMotorPWM
  1115 ;; This function is called by:
  1116 ;;		_turnRight_90
  1117 ;;		_reverseSquareRight
  1118 ;;		_turnLeft
  1119 ;;		_turnRight
  1120 ;;		_turnLeft_90
  1121 ;;		_turnRight_135
  1122 ;;		_turnLeft_135
  1123 ;;		_reverseSquareLeft
  1124 ;; This function uses a non-reentrant model
  1125 ;;
  1126                           
  1127                           	psect	text4
  1128   0010BA                     __ptext4:
  1129                           	callstack 0
  1130   0010BA                     _reverse:
  1131                           	callstack 24
  1132   0010BA                     
  1133                           ;dc_motor.c: 155: void reverse(DC_motor *mL, DC_motor *mR);dc_motor.c: 156: {;dc_motor.c
      +                          : 157:     mL->direction = 0;
  1134   0010BA  EE20 F001          	lfsr	2,1
  1135   0010BE  5018               	movf	reverse@mL^0,w,c
  1136   0010C0  26D9               	addwf	fsr2l,f,c
  1137   0010C2  5019               	movf	(reverse@mL+1)^0,w,c
  1138   0010C4  22DA               	addwfc	fsr2h,f,c
  1139   0010C6  0E00               	movlw	0
  1140   0010C8  6EDF               	movwf	indf2,c
  1141                           
  1142                           ;dc_motor.c: 158:     mR->direction = 0;
  1143   0010CA  EE20 F001          	lfsr	2,1
  1144   0010CE  501A               	movf	reverse@mR^0,w,c
  1145   0010D0  26D9               	addwf	fsr2l,f,c
  1146   0010D2  501B               	movf	(reverse@mR+1)^0,w,c
  1147   0010D4  22DA               	addwfc	fsr2h,f,c
  1148   0010D6  0E00               	movlw	0
  1149   0010D8  6EDF               	movwf	indf2,c
  1150                           
  1151                           ;dc_motor.c: 160:     mL->brakemode = 1;
  1152   0010DA  EE20 F002          	lfsr	2,2
  1153   0010DE  5018               	movf	reverse@mL^0,w,c
  1154   0010E0  26D9               	addwf	fsr2l,f,c
  1155   0010E2  5019               	movf	(reverse@mL+1)^0,w,c
  1156   0010E4  22DA               	addwfc	fsr2h,f,c
  1157   0010E6  0E01               	movlw	1
  1158   0010E8  6EDF               	movwf	indf2,c
  1159                           
  1160                           ;dc_motor.c: 161:     mL->brakemode = 1;
  1161   0010EA  EE20 F002          	lfsr	2,2
  1162   0010EE  5018               	movf	reverse@mL^0,w,c
  1163   0010F0  26D9               	addwf	fsr2l,f,c
  1164   0010F2  5019               	movf	(reverse@mL+1)^0,w,c
  1165   0010F4  22DA               	addwfc	fsr2h,f,c
  1166   0010F6  0E01               	movlw	1
  1167   0010F8  6EDF               	movwf	indf2,c
  1168                           
  1169                           ;dc_motor.c: 163:     while ((mL->power)<25 && (mR->power)<25){
  1170   0010FA  EFA3  F008         	goto	l2764
  1171   0010FE                     l2756:
  1172                           
  1173                           ;dc_motor.c: 164:         if ((mL->power) < 25){
  1174   0010FE  C018  FFD9         	movff	reverse@mL,fsr2l
  1175   001102  C019  FFDA         	movff	reverse@mL+1,fsr2h
  1176   001106  0E19               	movlw	25
  1177   001108  60DF               	cpfslt	indf2,c
  1178   00110A  EF89  F008         	goto	u2061
  1179   00110E  EF8B  F008         	goto	u2060
  1180   001112                     u2061:
  1181   001112  EF91  F008         	goto	l2760
  1182   001116                     u2060:
  1183   001116                     
  1184                           ;dc_motor.c: 165:             mL->power += 5;
  1185   001116  C018  FFD9         	movff	reverse@mL,fsr2l
  1186   00111A  C019  FFDA         	movff	reverse@mL+1,fsr2h
  1187   00111E  0E05               	movlw	5
  1188   001120  26DF               	addwf	indf2,f,c
  1189   001122                     l2760:
  1190                           
  1191                           ;dc_motor.c: 167:         if ((mR->power) <25){
  1192   001122  C01A  FFD9         	movff	reverse@mR,fsr2l
  1193   001126  C01B  FFDA         	movff	reverse@mR+1,fsr2h
  1194   00112A  0E19               	movlw	25
  1195   00112C  60DF               	cpfslt	indf2,c
  1196   00112E  EF9B  F008         	goto	u2071
  1197   001132  EF9D  F008         	goto	u2070
  1198   001136                     u2071:
  1199   001136  EFA3  F008         	goto	l2764
  1200   00113A                     u2070:
  1201   00113A                     
  1202                           ;dc_motor.c: 168:             mR->power += 5;
  1203   00113A  C01A  FFD9         	movff	reverse@mR,fsr2l
  1204   00113E  C01B  FFDA         	movff	reverse@mR+1,fsr2h
  1205   001142  0E05               	movlw	5
  1206   001144  26DF               	addwf	indf2,f,c
  1207   001146                     l2764:
  1208                           
  1209                           ;dc_motor.c: 163:     while ((mL->power)<25 && (mR->power)<25){
  1210   001146  C018  FFD9         	movff	reverse@mL,fsr2l
  1211   00114A  C019  FFDA         	movff	reverse@mL+1,fsr2h
  1212   00114E  0E19               	movlw	25
  1213   001150  60DF               	cpfslt	indf2,c
  1214   001152  EFAD  F008         	goto	u2081
  1215   001156  EFAF  F008         	goto	u2080
  1216   00115A                     u2081:
  1217   00115A  EFBB  F008         	goto	l2768
  1218   00115E                     u2080:
  1219   00115E  C01A  FFD9         	movff	reverse@mR,fsr2l
  1220   001162  C01B  FFDA         	movff	reverse@mR+1,fsr2h
  1221   001166  0E18               	movlw	24
  1222   001168  64DF               	cpfsgt	indf2,c
  1223   00116A  EFB9  F008         	goto	u2091
  1224   00116E  EFBB  F008         	goto	u2090
  1225   001172                     u2091:
  1226   001172  EF7F  F008         	goto	l2756
  1227   001176                     u2090:
  1228   001176                     l2768:
  1229                           
  1230                           ;dc_motor.c: 172:     setMotorPWM(mL);
  1231   001176  C018  F012         	movff	reverse@mL,setMotorPWM@m
  1232   00117A  C019  F013         	movff	reverse@mL+1,setMotorPWM@m+1
  1233   00117E  EC08  F007         	call	_setMotorPWM	;wreg free
  1234                           
  1235                           ;dc_motor.c: 173:     setMotorPWM(mR);
  1236   001182  C01A  F012         	movff	reverse@mR,setMotorPWM@m
  1237   001186  C01B  F013         	movff	reverse@mR+1,setMotorPWM@m+1
  1238   00118A  EC08  F007         	call	_setMotorPWM	;wreg free
  1239   00118E  0012               	return		;funcret
  1240   001190                     __end_of_reverse:
  1241                           	callstack 0
  1242                           
  1243 ;; *************** function _setMotorPWM *****************
  1244 ;; Defined at:
  1245 ;;		line 92 in file "dc_motor.c"
  1246 ;; Parameters:    Size  Location     Type
  1247 ;;  m               2   17[COMRAM] PTR struct DC_motor
  1248 ;;		 -> main@motorRight(9), main@motorLeft(9), 
  1249 ;; Auto vars:     Size  Location     Type
  1250 ;;  negDuty         1   22[COMRAM] unsigned char 
  1251 ;;  posDuty         1   21[COMRAM] unsigned char 
  1252 ;; Return value:  Size  Location     Type
  1253 ;;                  1    wreg      void 
  1254 ;; Registers used:
  1255 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1256 ;; Tracked objects:
  1257 ;;		On entry : 0/0
  1258 ;;		On exit  : 0/0
  1259 ;;		Unchanged: 0/0
  1260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1261 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1262 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1263 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1264 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1265 ;;Total ram usage:        6 bytes
  1266 ;; Hardware stack levels used: 1
  1267 ;; Hardware stack levels required when called: 3
  1268 ;; This function calls:
  1269 ;;		___lwdiv
  1270 ;;		___wmul
  1271 ;; This function is called by:
  1272 ;;		_stop
  1273 ;;		_reverse
  1274 ;;		_turnRight_90
  1275 ;;		_forward
  1276 ;;		_turnLeft
  1277 ;;		_turnRight
  1278 ;;		_turnLeft_90
  1279 ;;		_turnRight_135
  1280 ;;		_turnLeft_135
  1281 ;; This function uses a non-reentrant model
  1282 ;;
  1283                           
  1284                           	psect	text5
  1285   000E10                     __ptext5:
  1286                           	callstack 0
  1287   000E10                     _setMotorPWM:
  1288                           	callstack 24
  1289   000E10                     
  1290                           ;dc_motor.c: 92: void setMotorPWM(DC_motor *m);dc_motor.c: 93: {;dc_motor.c: 94:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 96:     if(m->brakemode) {
  1291   000E10  EE20 F002          	lfsr	2,2
  1292   000E14  5012               	movf	setMotorPWM@m^0,w,c
  1293   000E16  26D9               	addwf	fsr2l,f,c
  1294   000E18  5013               	movf	(setMotorPWM@m+1)^0,w,c
  1295   000E1A  22DA               	addwfc	fsr2h,f,c
  1296   000E1C  50DF               	movf	indf2,w,c
  1297   000E1E  B4D8               	btfsc	status,2,c
  1298   000E20  EF14  F007         	goto	u1981
  1299   000E24  EF16  F007         	goto	u1980
  1300   000E28                     u1981:
  1301   000E28  EF4A  F007         	goto	l2708
  1302   000E2C                     u1980:
  1303   000E2C                     
  1304                           ;dc_motor.c: 97:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  1305   000E2C  C012  FFD9         	movff	setMotorPWM@m,fsr2l
  1306   000E30  C013  FFDA         	movff	setMotorPWM@m+1,fsr2h
  1307   000E34  50DF               	movf	indf2,w,c
  1308   000E36  6E14               	movwf	??_setMotorPWM^0,c
  1309   000E38  5014               	movf	??_setMotorPWM^0,w,c
  1310   000E3A  6E05               	movwf	___wmul@multiplier^0,c
  1311   000E3C  6A06               	clrf	(___wmul@multiplier+1)^0,c
  1312   000E3E  EE20 F003          	lfsr	2,3
  1313   000E42  5012               	movf	setMotorPWM@m^0,w,c
  1314   000E44  26D9               	addwf	fsr2l,f,c
  1315   000E46  5013               	movf	(setMotorPWM@m+1)^0,w,c
  1316   000E48  22DA               	addwfc	fsr2h,f,c
  1317   000E4A  CFDE F007          	movff	postinc2,___wmul@multiplicand
  1318   000E4E  CFDD F008          	movff	postdec2,___wmul@multiplicand+1
  1319   000E52  EC3E  F00B         	call	___wmul	;wreg free
  1320   000E56  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  1321   000E5A  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  1322   000E5E  0E00               	movlw	0
  1323   000E60  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  1324   000E62  0E64               	movlw	100
  1325   000E64  6E0D               	movwf	___lwdiv@divisor^0,c
  1326   000E66  EC71  F00A         	call	___lwdiv	;wreg free
  1327   000E6A  EE20 F003          	lfsr	2,3
  1328   000E6E  5012               	movf	setMotorPWM@m^0,w,c
  1329   000E70  26D9               	addwf	fsr2l,f,c
  1330   000E72  5013               	movf	(setMotorPWM@m+1)^0,w,c
  1331   000E74  22DA               	addwfc	fsr2h,f,c
  1332   000E76  50DF               	movf	indf2,w,c
  1333   000E78  6E15               	movwf	(??_setMotorPWM+1)^0,c
  1334   000E7A  500B               	movf	?___lwdiv^0,w,c
  1335   000E7C  5C15               	subwf	(??_setMotorPWM+1)^0,w,c
  1336   000E7E  6E16               	movwf	setMotorPWM@posDuty^0,c
  1337   000E80                     
  1338                           ;dc_motor.c: 98:         negDuty=m->PWMperiod;
  1339   000E80  EE20 F003          	lfsr	2,3
  1340   000E84  5012               	movf	setMotorPWM@m^0,w,c
  1341   000E86  26D9               	addwf	fsr2l,f,c
  1342   000E88  5013               	movf	(setMotorPWM@m+1)^0,w,c
  1343   000E8A  22DA               	addwfc	fsr2h,f,c
  1344   000E8C  50DF               	movf	indf2,w,c
  1345   000E8E  6E17               	movwf	setMotorPWM@negDuty^0,c
  1346                           
  1347                           ;dc_motor.c: 99:     }
  1348   000E90  EF6D  F007         	goto	l2712
  1349   000E94                     l2708:
  1350                           
  1351                           ;dc_motor.c: 101:         posDuty=0;
  1352   000E94  0E00               	movlw	0
  1353   000E96  6E16               	movwf	setMotorPWM@posDuty^0,c
  1354   000E98                     
  1355                           ;dc_motor.c: 102:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  1356   000E98  C012  FFD9         	movff	setMotorPWM@m,fsr2l
  1357   000E9C  C013  FFDA         	movff	setMotorPWM@m+1,fsr2h
  1358   000EA0  50DF               	movf	indf2,w,c
  1359   000EA2  6E14               	movwf	??_setMotorPWM^0,c
  1360   000EA4  5014               	movf	??_setMotorPWM^0,w,c
  1361   000EA6  6E05               	movwf	___wmul@multiplier^0,c
  1362   000EA8  6A06               	clrf	(___wmul@multiplier+1)^0,c
  1363   000EAA  EE20 F003          	lfsr	2,3
  1364   000EAE  5012               	movf	setMotorPWM@m^0,w,c
  1365   000EB0  26D9               	addwf	fsr2l,f,c
  1366   000EB2  5013               	movf	(setMotorPWM@m+1)^0,w,c
  1367   000EB4  22DA               	addwfc	fsr2h,f,c
  1368   000EB6  CFDE F007          	movff	postinc2,___wmul@multiplicand
  1369   000EBA  CFDD F008          	movff	postdec2,___wmul@multiplicand+1
  1370   000EBE  EC3E  F00B         	call	___wmul	;wreg free
  1371   000EC2  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  1372   000EC6  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  1373   000ECA  0E00               	movlw	0
  1374   000ECC  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  1375   000ECE  0E64               	movlw	100
  1376   000ED0  6E0D               	movwf	___lwdiv@divisor^0,c
  1377   000ED2  EC71  F00A         	call	___lwdiv	;wreg free
  1378   000ED6  500B               	movf	?___lwdiv^0,w,c
  1379   000ED8  6E17               	movwf	setMotorPWM@negDuty^0,c
  1380   000EDA                     l2712:
  1381                           
  1382                           ;dc_motor.c: 105:     if (m->direction) {
  1383   000EDA  EE20 F001          	lfsr	2,1
  1384   000EDE  5012               	movf	setMotorPWM@m^0,w,c
  1385   000EE0  26D9               	addwf	fsr2l,f,c
  1386   000EE2  5013               	movf	(setMotorPWM@m+1)^0,w,c
  1387   000EE4  22DA               	addwfc	fsr2h,f,c
  1388   000EE6  50DF               	movf	indf2,w,c
  1389   000EE8  B4D8               	btfsc	status,2,c
  1390   000EEA  EF79  F007         	goto	u1991
  1391   000EEE  EF7B  F007         	goto	u1990
  1392   000EF2                     u1991:
  1393   000EF2  EF9D  F007         	goto	l2716
  1394   000EF6                     u1990:
  1395   000EF6                     
  1396                           ;dc_motor.c: 106:         *(m->posDutyHighByte)=posDuty;
  1397   000EF6  EE20 F005          	lfsr	2,5
  1398   000EFA  5012               	movf	setMotorPWM@m^0,w,c
  1399   000EFC  26D9               	addwf	fsr2l,f,c
  1400   000EFE  5013               	movf	(setMotorPWM@m+1)^0,w,c
  1401   000F00  22DA               	addwfc	fsr2h,f,c
  1402   000F02  CFDE F014          	movff	postinc2,??_setMotorPWM
  1403   000F06  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  1404   000F0A  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  1405   000F0E  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1406   000F12  C016  FFDF         	movff	setMotorPWM@posDuty,indf2
  1407                           
  1408                           ;dc_motor.c: 107:         *(m->negDutyHighByte)=negDuty;
  1409   000F16  EE20 F007          	lfsr	2,7
  1410   000F1A  5012               	movf	setMotorPWM@m^0,w,c
  1411   000F1C  26D9               	addwf	fsr2l,f,c
  1412   000F1E  5013               	movf	(setMotorPWM@m+1)^0,w,c
  1413   000F20  22DA               	addwfc	fsr2h,f,c
  1414   000F22  CFDE F014          	movff	postinc2,??_setMotorPWM
  1415   000F26  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  1416   000F2A  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  1417   000F2E  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1418   000F32  C017  FFDF         	movff	setMotorPWM@negDuty,indf2
  1419                           
  1420                           ;dc_motor.c: 108:     } else {
  1421   000F36  EFBD  F007         	goto	l174
  1422   000F3A                     l2716:
  1423                           
  1424                           ;dc_motor.c: 109:         *(m->posDutyHighByte)=negDuty;
  1425   000F3A  EE20 F005          	lfsr	2,5
  1426   000F3E  5012               	movf	setMotorPWM@m^0,w,c
  1427   000F40  26D9               	addwf	fsr2l,f,c
  1428   000F42  5013               	movf	(setMotorPWM@m+1)^0,w,c
  1429   000F44  22DA               	addwfc	fsr2h,f,c
  1430   000F46  CFDE F014          	movff	postinc2,??_setMotorPWM
  1431   000F4A  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  1432   000F4E  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  1433   000F52  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1434   000F56  C017  FFDF         	movff	setMotorPWM@negDuty,indf2
  1435                           
  1436                           ;dc_motor.c: 110:         *(m->negDutyHighByte)=posDuty;
  1437   000F5A  EE20 F007          	lfsr	2,7
  1438   000F5E  5012               	movf	setMotorPWM@m^0,w,c
  1439   000F60  26D9               	addwf	fsr2l,f,c
  1440   000F62  5013               	movf	(setMotorPWM@m+1)^0,w,c
  1441   000F64  22DA               	addwfc	fsr2h,f,c
  1442   000F66  CFDE F014          	movff	postinc2,??_setMotorPWM
  1443   000F6A  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  1444   000F6E  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  1445   000F72  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1446   000F76  C016  FFDF         	movff	setMotorPWM@posDuty,indf2
  1447   000F7A                     l174:
  1448   000F7A  0012               	return		;funcret
  1449   000F7C                     __end_of_setMotorPWM:
  1450                           	callstack 0
  1451                           
  1452 ;; *************** function ___wmul *****************
  1453 ;; Defined at:
  1454 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  1455 ;; Parameters:    Size  Location     Type
  1456 ;;  multiplier      2    4[COMRAM] unsigned int 
  1457 ;;  multiplicand    2    6[COMRAM] unsigned int 
  1458 ;; Auto vars:     Size  Location     Type
  1459 ;;  product         2    8[COMRAM] unsigned int 
  1460 ;; Return value:  Size  Location     Type
  1461 ;;                  2    4[COMRAM] unsigned int 
  1462 ;; Registers used:
  1463 ;;		wreg, status,2, status,0, prodl, prodh
  1464 ;; Tracked objects:
  1465 ;;		On entry : 0/0
  1466 ;;		On exit  : 0/0
  1467 ;;		Unchanged: 0/0
  1468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1469 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1470 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1472 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1473 ;;Total ram usage:        6 bytes
  1474 ;; Hardware stack levels used: 1
  1475 ;; Hardware stack levels required when called: 2
  1476 ;; This function calls:
  1477 ;;		Nothing
  1478 ;; This function is called by:
  1479 ;;		_setMotorPWM
  1480 ;;		_turnLeft_135
  1481 ;; This function uses a non-reentrant model
  1482 ;;
  1483                           
  1484                           	psect	text6
  1485   00167C                     __ptext6:
  1486                           	callstack 0
  1487   00167C                     ___wmul:
  1488                           	callstack 24
  1489   00167C  5005               	movf	___wmul@multiplier^0,w,c
  1490   00167E  0207               	mulwf	___wmul@multiplicand^0,c
  1491   001680  CFF3 F009          	movff	prodl,___wmul@product
  1492   001684  CFF4 F00A          	movff	prodh,___wmul@product+1
  1493   001688  5005               	movf	___wmul@multiplier^0,w,c
  1494   00168A  0208               	mulwf	(___wmul@multiplicand+1)^0,c
  1495   00168C  50F3               	movf	243,w,c
  1496   00168E  260A               	addwf	(___wmul@product+1)^0,f,c
  1497   001690  5006               	movf	(___wmul@multiplier+1)^0,w,c
  1498   001692  0207               	mulwf	___wmul@multiplicand^0,c
  1499   001694  50F3               	movf	243,w,c
  1500   001696  260A               	addwf	(___wmul@product+1)^0,f,c
  1501   001698  C009  F005         	movff	___wmul@product,?___wmul
  1502   00169C  C00A  F006         	movff	___wmul@product+1,?___wmul+1
  1503   0016A0  0012               	return		;funcret
  1504   0016A2                     __end_of___wmul:
  1505                           	callstack 0
  1506                           
  1507 ;; *************** function ___lwdiv *****************
  1508 ;; Defined at:
  1509 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  1510 ;; Parameters:    Size  Location     Type
  1511 ;;  dividend        2   10[COMRAM] unsigned int 
  1512 ;;  divisor         2   12[COMRAM] unsigned int 
  1513 ;; Auto vars:     Size  Location     Type
  1514 ;;  quotient        2   15[COMRAM] unsigned int 
  1515 ;;  counter         1   14[COMRAM] unsigned char 
  1516 ;; Return value:  Size  Location     Type
  1517 ;;                  2   10[COMRAM] unsigned int 
  1518 ;; Registers used:
  1519 ;;		wreg, status,2, status,0
  1520 ;; Tracked objects:
  1521 ;;		On entry : 0/0
  1522 ;;		On exit  : 0/0
  1523 ;;		Unchanged: 0/0
  1524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1525 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1526 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1528 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1529 ;;Total ram usage:        7 bytes
  1530 ;; Hardware stack levels used: 1
  1531 ;; Hardware stack levels required when called: 2
  1532 ;; This function calls:
  1533 ;;		Nothing
  1534 ;; This function is called by:
  1535 ;;		_setMotorPWM
  1536 ;; This function uses a non-reentrant model
  1537 ;;
  1538                           
  1539                           	psect	text7
  1540   0014E2                     __ptext7:
  1541                           	callstack 0
  1542   0014E2                     ___lwdiv:
  1543                           	callstack 24
  1544   0014E2  0E00               	movlw	0
  1545   0014E4  6E11               	movwf	(___lwdiv@quotient+1)^0,c
  1546   0014E6  0E00               	movlw	0
  1547   0014E8  6E10               	movwf	___lwdiv@quotient^0,c
  1548   0014EA  500D               	movf	___lwdiv@divisor^0,w,c
  1549   0014EC  100E               	iorwf	(___lwdiv@divisor+1)^0,w,c
  1550   0014EE  B4D8               	btfsc	status,2,c
  1551   0014F0  EF7C  F00A         	goto	u1951
  1552   0014F4  EF7E  F00A         	goto	u1950
  1553   0014F8                     u1951:
  1554   0014F8  EFA6  F00A         	goto	l987
  1555   0014FC                     u1950:
  1556   0014FC  0E01               	movlw	1
  1557   0014FE  6E0F               	movwf	___lwdiv@counter^0,c
  1558   001500  EF86  F00A         	goto	l2688
  1559   001504                     l2686:
  1560   001504  90D8               	bcf	status,0,c
  1561   001506  360D               	rlcf	___lwdiv@divisor^0,f,c
  1562   001508  360E               	rlcf	(___lwdiv@divisor+1)^0,f,c
  1563   00150A  2A0F               	incf	___lwdiv@counter^0,f,c
  1564   00150C                     l2688:
  1565   00150C  AE0E               	btfss	(___lwdiv@divisor+1)^0,7,c
  1566   00150E  EF8B  F00A         	goto	u1961
  1567   001512  EF8D  F00A         	goto	u1960
  1568   001516                     u1961:
  1569   001516  EF82  F00A         	goto	l2686
  1570   00151A                     u1960:
  1571   00151A                     l2690:
  1572   00151A  90D8               	bcf	status,0,c
  1573   00151C  3610               	rlcf	___lwdiv@quotient^0,f,c
  1574   00151E  3611               	rlcf	(___lwdiv@quotient+1)^0,f,c
  1575   001520  500D               	movf	___lwdiv@divisor^0,w,c
  1576   001522  5C0B               	subwf	___lwdiv@dividend^0,w,c
  1577   001524  500E               	movf	(___lwdiv@divisor+1)^0,w,c
  1578   001526  580C               	subwfb	(___lwdiv@dividend+1)^0,w,c
  1579   001528  A0D8               	btfss	status,0,c
  1580   00152A  EF99  F00A         	goto	u1971
  1581   00152E  EF9B  F00A         	goto	u1970
  1582   001532                     u1971:
  1583   001532  EFA0  F00A         	goto	l2698
  1584   001536                     u1970:
  1585   001536  500D               	movf	___lwdiv@divisor^0,w,c
  1586   001538  5E0B               	subwf	___lwdiv@dividend^0,f,c
  1587   00153A  500E               	movf	(___lwdiv@divisor+1)^0,w,c
  1588   00153C  5A0C               	subwfb	(___lwdiv@dividend+1)^0,f,c
  1589   00153E  8010               	bsf	___lwdiv@quotient^0,0,c
  1590   001540                     l2698:
  1591   001540  90D8               	bcf	status,0,c
  1592   001542  320E               	rrcf	(___lwdiv@divisor+1)^0,f,c
  1593   001544  320D               	rrcf	___lwdiv@divisor^0,f,c
  1594   001546  2E0F               	decfsz	___lwdiv@counter^0,f,c
  1595   001548  EF8D  F00A         	goto	l2690
  1596   00154C                     l987:
  1597   00154C  C010  F00B         	movff	___lwdiv@quotient,?___lwdiv
  1598   001550  C011  F00C         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1599   001554  0012               	return		;funcret
  1600   001556                     __end_of___lwdiv:
  1601                           	callstack 0
  1602                           
  1603 ;; *************** function _initUSART4 *****************
  1604 ;; Defined at:
  1605 ;;		line 5 in file "serial.c"
  1606 ;; Parameters:    Size  Location     Type
  1607 ;;		None
  1608 ;; Auto vars:     Size  Location     Type
  1609 ;;		None
  1610 ;; Return value:  Size  Location     Type
  1611 ;;                  1    wreg      void 
  1612 ;; Registers used:
  1613 ;;		wreg, status,2
  1614 ;; Tracked objects:
  1615 ;;		On entry : 0/0
  1616 ;;		On exit  : 0/0
  1617 ;;		Unchanged: 0/0
  1618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1622 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1623 ;;Total ram usage:        0 bytes
  1624 ;; Hardware stack levels used: 1
  1625 ;; Hardware stack levels required when called: 2
  1626 ;; This function calls:
  1627 ;;		Nothing
  1628 ;; This function is called by:
  1629 ;;		_main
  1630 ;; This function uses a non-reentrant model
  1631 ;;
  1632                           
  1633                           	psect	text8
  1634   0016A2                     __ptext8:
  1635                           	callstack 0
  1636   0016A2                     _initUSART4:
  1637                           	callstack 28
  1638   0016A2                     
  1639                           ;serial.c: 9:     RC0PPS = 0x12;
  1640   0016A2  0E12               	movlw	18
  1641   0016A4  010E               	movlb	14	; () banked
  1642   0016A6  6F62               	movwf	98,b	;volatile
  1643                           
  1644                           ;serial.c: 10:     RX4PPS = 0x11;
  1645   0016A8  0E11               	movlw	17
  1646   0016AA  6F15               	movwf	21,b	;volatile
  1647   0016AC                     
  1648                           ; BSR set to: 14
  1649                           ;serial.c: 11:     TRISCbits.TRISC1=1;
  1650   0016AC  8283               	bsf	131,1,c	;volatile
  1651   0016AE                     
  1652                           ; BSR set to: 14
  1653                           ;serial.c: 13:     BAUD4CONbits.BRG16 = 0;
  1654   0016AE  97E9               	bcf	233,3,b	;volatile
  1655   0016B0                     
  1656                           ; BSR set to: 14
  1657                           ;serial.c: 14:     TX4STAbits.BRGH = 0;
  1658   0016B0  95E8               	bcf	232,2,b	;volatile
  1659                           
  1660                           ;serial.c: 15:     SP4BRGL = 51;
  1661   0016B2  0E33               	movlw	51
  1662   0016B4  6FE5               	movwf	229,b	;volatile
  1663                           
  1664                           ;serial.c: 16:     SP4BRGH = 0;
  1665   0016B6  0E00               	movlw	0
  1666   0016B8  6FE6               	movwf	230,b	;volatile
  1667   0016BA                     
  1668                           ; BSR set to: 14
  1669                           ;serial.c: 18:     RC4STAbits.CREN = 1;
  1670   0016BA  89E7               	bsf	231,4,b	;volatile
  1671   0016BC                     
  1672                           ; BSR set to: 14
  1673                           ;serial.c: 19:     TX4STAbits.TXEN = 1;
  1674   0016BC  8BE8               	bsf	232,5,b	;volatile
  1675   0016BE                     
  1676                           ; BSR set to: 14
  1677                           ;serial.c: 20:     RC4STAbits.SPEN = 1;
  1678   0016BE  8FE7               	bsf	231,7,b	;volatile
  1679   0016C0                     
  1680                           ; BSR set to: 14
  1681   0016C0  0012               	return		;funcret
  1682   0016C2                     __end_of_initUSART4:
  1683                           	callstack 0
  1684                           
  1685 ;; *************** function _initDCmotorsPWM *****************
  1686 ;; Defined at:
  1687 ;;		line 10 in file "dc_motor.c"
  1688 ;; Parameters:    Size  Location     Type
  1689 ;;  PWMperiod       2    4[COMRAM] int 
  1690 ;; Auto vars:     Size  Location     Type
  1691 ;;		None
  1692 ;; Return value:  Size  Location     Type
  1693 ;;                  1    wreg      void 
  1694 ;; Registers used:
  1695 ;;		wreg, status,2
  1696 ;; Tracked objects:
  1697 ;;		On entry : 0/0
  1698 ;;		On exit  : 0/0
  1699 ;;		Unchanged: 0/0
  1700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1701 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1704 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1705 ;;Total ram usage:        2 bytes
  1706 ;; Hardware stack levels used: 1
  1707 ;; Hardware stack levels required when called: 2
  1708 ;; This function calls:
  1709 ;;		Nothing
  1710 ;; This function is called by:
  1711 ;;		_main
  1712 ;; This function uses a non-reentrant model
  1713 ;;
  1714                           
  1715                           	psect	text9
  1716   001452                     __ptext9:
  1717                           	callstack 0
  1718   001452                     _initDCmotorsPWM:
  1719                           	callstack 28
  1720   001452                     
  1721                           ;dc_motor.c: 14:     LATEbits.LATE2 = 0;
  1722   001452  947D               	bcf	125,2,c	;volatile
  1723                           
  1724                           ;dc_motor.c: 15:     LATEbits.LATE4 = 0;
  1725   001454  987D               	bcf	125,4,c	;volatile
  1726                           
  1727                           ;dc_motor.c: 16:     LATCbits.LATC7 = 0;
  1728   001456  9E7B               	bcf	123,7,c	;volatile
  1729                           
  1730                           ;dc_motor.c: 17:     LATGbits.LATG6 = 0;
  1731   001458  9C7F               	bcf	127,6,c	;volatile
  1732                           
  1733                           ;dc_motor.c: 20:     TRISEbits.TRISE2 = 0 ;
  1734   00145A  9485               	bcf	133,2,c	;volatile
  1735                           
  1736                           ;dc_motor.c: 21:     TRISEbits.TRISE4 = 0 ;
  1737   00145C  9885               	bcf	133,4,c	;volatile
  1738                           
  1739                           ;dc_motor.c: 22:     TRISCbits.TRISC7 = 0 ;
  1740   00145E  9E83               	bcf	131,7,c	;volatile
  1741                           
  1742                           ;dc_motor.c: 23:     TRISGbits.TRISG6 = 0 ;
  1743   001460  9C87               	bcf	135,6,c	;volatile
  1744   001462                     
  1745                           ;dc_motor.c: 26:     RE2PPS=0x05;
  1746   001462  0E05               	movlw	5
  1747   001464  010E               	movlb	14	; () banked
  1748   001466  6F74               	movwf	116,b	;volatile
  1749                           
  1750                           ;dc_motor.c: 27:     RE4PPS=0x06;
  1751   001468  0E06               	movlw	6
  1752   00146A  6F76               	movwf	118,b	;volatile
  1753                           
  1754                           ;dc_motor.c: 28:     RC7PPS=0x07;
  1755   00146C  0E07               	movlw	7
  1756   00146E  6F69               	movwf	105,b	;volatile
  1757                           
  1758                           ;dc_motor.c: 29:     RG6PPS=0x08;
  1759   001470  0E08               	movlw	8
  1760   001472  6F88               	movwf	136,b	;volatile
  1761                           
  1762                           ;dc_motor.c: 32:     T2CONbits.CKPS=0b011;
  1763   001474  50BD               	movf	189,w,c	;volatile
  1764   001476  0B8F               	andlw	-113
  1765   001478  0930               	iorlw	48
  1766   00147A  6EBD               	movwf	189,c	;volatile
  1767                           
  1768                           ;dc_motor.c: 33:     T2HLTbits.MODE=0b00000;
  1769   00147C  0EE0               	movlw	-32
  1770   00147E  16BE               	andwf	190,f,c	;volatile
  1771                           
  1772                           ;dc_motor.c: 34:     T2CLKCONbits.CS=0b0001;
  1773   001480  50BF               	movf	191,w,c	;volatile
  1774   001482  0BF0               	andlw	-16
  1775   001484  0901               	iorlw	1
  1776   001486  6EBF               	movwf	191,c	;volatile
  1777                           
  1778                           ;dc_motor.c: 38:     T2PR=199;
  1779   001488  0EC7               	movlw	199
  1780   00148A  6EBC               	movwf	188,c	;volatile
  1781   00148C                     
  1782                           ; BSR set to: 14
  1783                           ;dc_motor.c: 39:     T2CONbits.ON=1;
  1784   00148C  8EBD               	bsf	189,7,c	;volatile
  1785                           
  1786                           ;dc_motor.c: 43:     CCPR1H=0;
  1787   00148E  0E00               	movlw	0
  1788   001490  6EAA               	movwf	170,c	;volatile
  1789                           
  1790                           ;dc_motor.c: 44:     CCPR2H=0;
  1791   001492  0E00               	movlw	0
  1792   001494  6EA6               	movwf	166,c	;volatile
  1793                           
  1794                           ;dc_motor.c: 45:     CCPR3H=0;
  1795   001496  0E00               	movlw	0
  1796   001498  010F               	movlb	15	; () banked
  1797   00149A  6F25               	movwf	37,b	;volatile
  1798                           
  1799                           ;dc_motor.c: 46:     CCPR4H=0;
  1800   00149C  0E00               	movlw	0
  1801   00149E  6F21               	movwf	33,b	;volatile
  1802                           
  1803                           ;dc_motor.c: 49:     CCPTMRS0bits.C1TSEL=0;
  1804   0014A0  0EFC               	movlw	-4
  1805   0014A2  16AD               	andwf	173,f,c	;volatile
  1806                           
  1807                           ;dc_motor.c: 50:     CCPTMRS0bits.C2TSEL=0;
  1808   0014A4  0EF3               	movlw	-13
  1809   0014A6  16AD               	andwf	173,f,c	;volatile
  1810                           
  1811                           ;dc_motor.c: 51:     CCPTMRS0bits.C3TSEL=0;
  1812   0014A8  0ECF               	movlw	-49
  1813   0014AA  16AD               	andwf	173,f,c	;volatile
  1814                           
  1815                           ;dc_motor.c: 52:     CCPTMRS0bits.C4TSEL=0;
  1816   0014AC  0E3F               	movlw	-193
  1817   0014AE  16AD               	andwf	173,f,c	;volatile
  1818   0014B0                     
  1819                           ; BSR set to: 15
  1820                           ;dc_motor.c: 55:     CCP1CONbits.FMT=1;
  1821   0014B0  88AB               	bsf	171,4,c	;volatile
  1822                           
  1823                           ;dc_motor.c: 56:     CCP1CONbits.CCP1MODE=0b1100;
  1824   0014B2  50AB               	movf	171,w,c	;volatile
  1825   0014B4  0BF0               	andlw	-16
  1826   0014B6  090C               	iorlw	12
  1827   0014B8  6EAB               	movwf	171,c	;volatile
  1828   0014BA                     
  1829                           ; BSR set to: 15
  1830                           ;dc_motor.c: 57:     CCP1CONbits.EN=1;
  1831   0014BA  8EAB               	bsf	171,7,c	;volatile
  1832   0014BC                     
  1833                           ; BSR set to: 15
  1834                           ;dc_motor.c: 59:     CCP2CONbits.FMT=1;
  1835   0014BC  88A7               	bsf	167,4,c	;volatile
  1836                           
  1837                           ;dc_motor.c: 60:     CCP2CONbits.CCP2MODE=0b1100;
  1838   0014BE  50A7               	movf	167,w,c	;volatile
  1839   0014C0  0BF0               	andlw	-16
  1840   0014C2  090C               	iorlw	12
  1841   0014C4  6EA7               	movwf	167,c	;volatile
  1842   0014C6                     
  1843                           ; BSR set to: 15
  1844                           ;dc_motor.c: 61:     CCP2CONbits.EN=1;
  1845   0014C6  8EA7               	bsf	167,7,c	;volatile
  1846   0014C8                     
  1847                           ; BSR set to: 15
  1848                           ;dc_motor.c: 63:     CCP3CONbits.FMT=1;
  1849   0014C8  8926               	bsf	38,4,b	;volatile
  1850                           
  1851                           ;dc_motor.c: 64:     CCP3CONbits.CCP3MODE=0b1100;
  1852   0014CA  5126               	movf	38,w,b	;volatile
  1853   0014CC  0BF0               	andlw	-16
  1854   0014CE  090C               	iorlw	12
  1855   0014D0  6F26               	movwf	38,b	;volatile
  1856   0014D2                     
  1857                           ; BSR set to: 15
  1858                           ;dc_motor.c: 65:     CCP3CONbits.EN=1;
  1859   0014D2  8F26               	bsf	38,7,b	;volatile
  1860   0014D4                     
  1861                           ; BSR set to: 15
  1862                           ;dc_motor.c: 67:     CCP4CONbits.FMT=1;
  1863   0014D4  8922               	bsf	34,4,b	;volatile
  1864                           
  1865                           ;dc_motor.c: 68:     CCP4CONbits.CCP4MODE=0b1100;
  1866   0014D6  5122               	movf	34,w,b	;volatile
  1867   0014D8  0BF0               	andlw	-16
  1868   0014DA  090C               	iorlw	12
  1869   0014DC  6F22               	movwf	34,b	;volatile
  1870   0014DE                     
  1871                           ; BSR set to: 15
  1872                           ;dc_motor.c: 69:     CCP4CONbits.EN=1;
  1873   0014DE  8F22               	bsf	34,7,b	;volatile
  1874   0014E0                     
  1875                           ; BSR set to: 15
  1876   0014E0  0012               	return		;funcret
  1877   0014E2                     __end_of_initDCmotorsPWM:
  1878                           	callstack 0
  1879                           
  1880 ;; *************** function _color_click_init *****************
  1881 ;; Defined at:
  1882 ;;		line 7 in file "color.c"
  1883 ;; Parameters:    Size  Location     Type
  1884 ;;		None
  1885 ;; Auto vars:     Size  Location     Type
  1886 ;;		None
  1887 ;; Return value:  Size  Location     Type
  1888 ;;                  1    wreg      void 
  1889 ;; Registers used:
  1890 ;;		wreg, status,2, status,0, cstack
  1891 ;; Tracked objects:
  1892 ;;		On entry : 0/0
  1893 ;;		On exit  : 0/0
  1894 ;;		Unchanged: 0/0
  1895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1897 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1898 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1899 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1900 ;;Total ram usage:        1 bytes
  1901 ;; Hardware stack levels used: 1
  1902 ;; Hardware stack levels required when called: 5
  1903 ;; This function calls:
  1904 ;;		_I2C_2_Master_Init
  1905 ;;		_color_writetoaddr
  1906 ;; This function is called by:
  1907 ;;		_main
  1908 ;; This function uses a non-reentrant model
  1909 ;;
  1910                           
  1911                           	psect	text10
  1912   0015A0                     __ptext10:
  1913                           	callstack 0
  1914   0015A0                     _color_click_init:
  1915                           	callstack 25
  1916   0015A0                     
  1917                           ;color.c: 10:     I2C_2_Master_Init();
  1918   0015A0  EC00  F00B         	call	_I2C_2_Master_Init	;wreg free
  1919   0015A4                     
  1920                           ;color.c: 13:   color_writetoaddr(0x00, 0x01);
  1921   0015A4  0E01               	movlw	1
  1922   0015A6  6E07               	movwf	color_writetoaddr@value^0,c
  1923   0015A8  0E00               	movlw	0
  1924   0015AA  EC61  F00B         	call	_color_writetoaddr
  1925   0015AE                     
  1926                           ;color.c: 14:     _delay((unsigned long)((3)*(64000000/4000.0)));
  1927   0015AE  0E3F               	movlw	63
  1928   0015B0  6E09               	movwf	??_color_click_init^0,c
  1929   0015B2  0E55               	movlw	85
  1930   0015B4                     u3167:
  1931   0015B4  2EE8               	decfsz	wreg,f,c
  1932   0015B6  D7FE               	bra	u3167
  1933   0015B8  2E09               	decfsz	??_color_click_init^0,f,c
  1934   0015BA  D7FC               	bra	u3167
  1935   0015BC  F000               	nop	
  1936   0015BE                     
  1937                           ;color.c: 17:  color_writetoaddr(0x00, 0x03);
  1938   0015BE  0E03               	movlw	3
  1939   0015C0  6E07               	movwf	color_writetoaddr@value^0,c
  1940   0015C2  0E00               	movlw	0
  1941   0015C4  EC61  F00B         	call	_color_writetoaddr
  1942   0015C8                     
  1943                           ;color.c: 20:  color_writetoaddr(0x01, 0xD5);
  1944   0015C8  0ED5               	movlw	213
  1945   0015CA  6E07               	movwf	color_writetoaddr@value^0,c
  1946   0015CC  0E01               	movlw	1
  1947   0015CE  EC61  F00B         	call	_color_writetoaddr
  1948   0015D2  0012               	return		;funcret
  1949   0015D4                     __end_of_color_click_init:
  1950                           	callstack 0
  1951                           
  1952 ;; *************** function _color_writetoaddr *****************
  1953 ;; Defined at:
  1954 ;;		line 24 in file "color.c"
  1955 ;; Parameters:    Size  Location     Type
  1956 ;;  address         1    wreg     unsigned char 
  1957 ;;  value           1    6[COMRAM] unsigned char 
  1958 ;; Auto vars:     Size  Location     Type
  1959 ;;  address         1    7[COMRAM] unsigned char 
  1960 ;; Return value:  Size  Location     Type
  1961 ;;                  1    wreg      void 
  1962 ;; Registers used:
  1963 ;;		wreg, status,2, status,0, cstack
  1964 ;; Tracked objects:
  1965 ;;		On entry : 0/0
  1966 ;;		On exit  : 0/0
  1967 ;;		Unchanged: 0/0
  1968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1969 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1970 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1972 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1973 ;;Total ram usage:        2 bytes
  1974 ;; Hardware stack levels used: 1
  1975 ;; Hardware stack levels required when called: 4
  1976 ;; This function calls:
  1977 ;;		_I2C_2_Master_Start
  1978 ;;		_I2C_2_Master_Stop
  1979 ;;		_I2C_2_Master_Write
  1980 ;; This function is called by:
  1981 ;;		_color_click_init
  1982 ;; This function uses a non-reentrant model
  1983 ;;
  1984                           
  1985                           	psect	text11
  1986   0016C2                     __ptext11:
  1987                           	callstack 0
  1988   0016C2                     _color_writetoaddr:
  1989                           	callstack 25
  1990                           
  1991                           ;incstack = 0
  1992                           ;color_writetoaddr@address stored from wreg
  1993   0016C2  6E08               	movwf	color_writetoaddr@address^0,c
  1994   0016C4                     
  1995                           ;color.c: 25:     I2C_2_Master_Start();
  1996   0016C4  EC88  F00B         	call	_I2C_2_Master_Start	;wreg free
  1997                           
  1998                           ;color.c: 26:     I2C_2_Master_Write(0x52 | 0x00);
  1999   0016C8  0E52               	movlw	82
  2000   0016CA  EC7D  F00B         	call	_I2C_2_Master_Write
  2001                           
  2002                           ;color.c: 27:     I2C_2_Master_Write(0x80 | address);
  2003   0016CE  5008               	movf	color_writetoaddr@address^0,w,c
  2004   0016D0  0980               	iorlw	128
  2005   0016D2  EC7D  F00B         	call	_I2C_2_Master_Write
  2006                           
  2007                           ;color.c: 28:     I2C_2_Master_Write(value);
  2008   0016D6  5007               	movf	color_writetoaddr@value^0,w,c
  2009   0016D8  EC7D  F00B         	call	_I2C_2_Master_Write
  2010                           
  2011                           ;color.c: 29:     I2C_2_Master_Stop();
  2012   0016DC  EC83  F00B         	call	_I2C_2_Master_Stop	;wreg free
  2013   0016E0  0012               	return		;funcret
  2014   0016E2                     __end_of_color_writetoaddr:
  2015                           	callstack 0
  2016                           
  2017 ;; *************** function _I2C_2_Master_Write *****************
  2018 ;; Defined at:
  2019 ;;		line 45 in file "i2c.c"
  2020 ;; Parameters:    Size  Location     Type
  2021 ;;  data_byte       1    wreg     unsigned char 
  2022 ;; Auto vars:     Size  Location     Type
  2023 ;;  data_byte       1    5[COMRAM] unsigned char 
  2024 ;; Return value:  Size  Location     Type
  2025 ;;                  1    wreg      void 
  2026 ;; Registers used:
  2027 ;;		wreg, status,2, status,0, cstack
  2028 ;; Tracked objects:
  2029 ;;		On entry : 0/0
  2030 ;;		On exit  : 0/0
  2031 ;;		Unchanged: 0/0
  2032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2034 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2036 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2037 ;;Total ram usage:        1 bytes
  2038 ;; Hardware stack levels used: 1
  2039 ;; Hardware stack levels required when called: 3
  2040 ;; This function calls:
  2041 ;;		_I2C_2_Master_Idle
  2042 ;; This function is called by:
  2043 ;;		_color_writetoaddr
  2044 ;;		_color_read_Red
  2045 ;;		_color_read_Green
  2046 ;;		_color_read_Blue
  2047 ;;		_color_read_Clear
  2048 ;; This function uses a non-reentrant model
  2049 ;;
  2050                           
  2051                           	psect	text12
  2052   0016FA                     __ptext12:
  2053                           	callstack 0
  2054   0016FA                     _I2C_2_Master_Write:
  2055                           	callstack 25
  2056                           
  2057                           ;incstack = 0
  2058                           ;I2C_2_Master_Write@data_byte stored from wreg
  2059   0016FA  6E06               	movwf	I2C_2_Master_Write@data_byte^0,c
  2060   0016FC                     
  2061                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  2062   0016FC  EC2A  F00B         	call	_I2C_2_Master_Idle	;wreg free
  2063   001700                     
  2064                           ;i2c.c: 48:   SSP2BUF = data_byte;
  2065   001700  C006  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  2066   001704  0012               	return		;funcret
  2067   001706                     __end_of_I2C_2_Master_Write:
  2068                           	callstack 0
  2069                           
  2070 ;; *************** function _I2C_2_Master_Stop *****************
  2071 ;; Defined at:
  2072 ;;		line 39 in file "i2c.c"
  2073 ;; Parameters:    Size  Location     Type
  2074 ;;		None
  2075 ;; Auto vars:     Size  Location     Type
  2076 ;;		None
  2077 ;; Return value:  Size  Location     Type
  2078 ;;                  1    wreg      void 
  2079 ;; Registers used:
  2080 ;;		wreg, status,2, status,0, cstack
  2081 ;; Tracked objects:
  2082 ;;		On entry : 0/0
  2083 ;;		On exit  : 0/0
  2084 ;;		Unchanged: 0/0
  2085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2089 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2090 ;;Total ram usage:        0 bytes
  2091 ;; Hardware stack levels used: 1
  2092 ;; Hardware stack levels required when called: 3
  2093 ;; This function calls:
  2094 ;;		_I2C_2_Master_Idle
  2095 ;; This function is called by:
  2096 ;;		_color_writetoaddr
  2097 ;;		_color_read_Red
  2098 ;;		_color_read_Green
  2099 ;;		_color_read_Blue
  2100 ;;		_color_read_Clear
  2101 ;; This function uses a non-reentrant model
  2102 ;;
  2103                           
  2104                           	psect	text13
  2105   001706                     __ptext13:
  2106                           	callstack 0
  2107   001706                     _I2C_2_Master_Stop:
  2108                           	callstack 25
  2109   001706                     
  2110                           ;i2c.c: 41:   I2C_2_Master_Idle();
  2111   001706  EC2A  F00B         	call	_I2C_2_Master_Idle	;wreg free
  2112   00170A                     
  2113                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  2114   00170A  010E               	movlb	14	; () banked
  2115   00170C  85DA               	bsf	218,2,b	;volatile
  2116   00170E                     
  2117                           ; BSR set to: 14
  2118   00170E  0012               	return		;funcret
  2119   001710                     __end_of_I2C_2_Master_Stop:
  2120                           	callstack 0
  2121                           
  2122 ;; *************** function _I2C_2_Master_Start *****************
  2123 ;; Defined at:
  2124 ;;		line 27 in file "i2c.c"
  2125 ;; Parameters:    Size  Location     Type
  2126 ;;		None
  2127 ;; Auto vars:     Size  Location     Type
  2128 ;;		None
  2129 ;; Return value:  Size  Location     Type
  2130 ;;                  1    wreg      void 
  2131 ;; Registers used:
  2132 ;;		wreg, status,2, status,0, cstack
  2133 ;; Tracked objects:
  2134 ;;		On entry : 0/0
  2135 ;;		On exit  : 0/0
  2136 ;;		Unchanged: 0/0
  2137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2139 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2141 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2142 ;;Total ram usage:        0 bytes
  2143 ;; Hardware stack levels used: 1
  2144 ;; Hardware stack levels required when called: 3
  2145 ;; This function calls:
  2146 ;;		_I2C_2_Master_Idle
  2147 ;; This function is called by:
  2148 ;;		_color_writetoaddr
  2149 ;;		_color_read_Red
  2150 ;;		_color_read_Green
  2151 ;;		_color_read_Blue
  2152 ;;		_color_read_Clear
  2153 ;; This function uses a non-reentrant model
  2154 ;;
  2155                           
  2156                           	psect	text14
  2157   001710                     __ptext14:
  2158                           	callstack 0
  2159   001710                     _I2C_2_Master_Start:
  2160                           	callstack 25
  2161   001710                     
  2162                           ;i2c.c: 29:   I2C_2_Master_Idle();
  2163   001710  EC2A  F00B         	call	_I2C_2_Master_Idle	;wreg free
  2164   001714                     
  2165                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  2166   001714  010E               	movlb	14	; () banked
  2167   001716  81DA               	bsf	218,0,b	;volatile
  2168   001718                     
  2169                           ; BSR set to: 14
  2170   001718  0012               	return		;funcret
  2171   00171A                     __end_of_I2C_2_Master_Start:
  2172                           	callstack 0
  2173                           
  2174 ;; *************** function _I2C_2_Master_Idle *****************
  2175 ;; Defined at:
  2176 ;;		line 22 in file "i2c.c"
  2177 ;; Parameters:    Size  Location     Type
  2178 ;;		None
  2179 ;; Auto vars:     Size  Location     Type
  2180 ;;		None
  2181 ;; Return value:  Size  Location     Type
  2182 ;;                  1    wreg      void 
  2183 ;; Registers used:
  2184 ;;		wreg, status,2, status,0
  2185 ;; Tracked objects:
  2186 ;;		On entry : 0/0
  2187 ;;		On exit  : 0/0
  2188 ;;		Unchanged: 0/0
  2189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2191 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2192 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2193 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2194 ;;Total ram usage:        1 bytes
  2195 ;; Hardware stack levels used: 1
  2196 ;; Hardware stack levels required when called: 2
  2197 ;; This function calls:
  2198 ;;		Nothing
  2199 ;; This function is called by:
  2200 ;;		_I2C_2_Master_Start
  2201 ;;		_I2C_2_Master_Stop
  2202 ;;		_I2C_2_Master_Write
  2203 ;;		_I2C_2_Master_RepStart
  2204 ;;		_I2C_2_Master_Read
  2205 ;; This function uses a non-reentrant model
  2206 ;;
  2207                           
  2208                           	psect	text15
  2209   001654                     __ptext15:
  2210                           	callstack 0
  2211   001654                     _I2C_2_Master_Idle:
  2212                           	callstack 25
  2213   001654                     l279:
  2214   001654  010E               	movlb	14	; () banked
  2215   001656  B5D8               	btfsc	216,2,b	;volatile
  2216   001658  EF30  F00B         	goto	u2001
  2217   00165C  EF32  F00B         	goto	u2000
  2218   001660                     u2001:
  2219   001660  EF2A  F00B         	goto	l279
  2220   001664                     u2000:
  2221   001664                     
  2222                           ; BSR set to: 14
  2223   001664  CEDA F005          	movff	3802,??_I2C_2_Master_Idle	;volatile
  2224   001668  0E1F               	movlw	31
  2225   00166A  1605               	andwf	??_I2C_2_Master_Idle^0,f,c
  2226   00166C  A4D8               	btfss	status,2,c
  2227   00166E  EF3B  F00B         	goto	u2011
  2228   001672  EF3D  F00B         	goto	u2010
  2229   001676                     u2011:
  2230   001676  EF2A  F00B         	goto	l279
  2231   00167A                     u2010:
  2232   00167A                     
  2233                           ; BSR set to: 14
  2234   00167A  0012               	return		;funcret
  2235   00167C                     __end_of_I2C_2_Master_Idle:
  2236                           	callstack 0
  2237                           
  2238 ;; *************** function _I2C_2_Master_Init *****************
  2239 ;; Defined at:
  2240 ;;		line 4 in file "i2c.c"
  2241 ;; Parameters:    Size  Location     Type
  2242 ;;		None
  2243 ;; Auto vars:     Size  Location     Type
  2244 ;;		None
  2245 ;; Return value:  Size  Location     Type
  2246 ;;                  1    wreg      void 
  2247 ;; Registers used:
  2248 ;;		wreg, status,2
  2249 ;; Tracked objects:
  2250 ;;		On entry : 0/0
  2251 ;;		On exit  : 0/0
  2252 ;;		Unchanged: 0/0
  2253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2257 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2258 ;;Total ram usage:        0 bytes
  2259 ;; Hardware stack levels used: 1
  2260 ;; Hardware stack levels required when called: 2
  2261 ;; This function calls:
  2262 ;;		Nothing
  2263 ;; This function is called by:
  2264 ;;		_color_click_init
  2265 ;; This function uses a non-reentrant model
  2266 ;;
  2267                           
  2268                           	psect	text16
  2269   001600                     __ptext16:
  2270                           	callstack 0
  2271   001600                     _I2C_2_Master_Init:
  2272                           	callstack 27
  2273   001600                     
  2274                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  2275   001600  010E               	movlb	14	; () banked
  2276   001602  51D9               	movf	217,w,b	;volatile
  2277   001604  0BF0               	andlw	-16
  2278   001606  0908               	iorlw	8
  2279   001608  6FD9               	movwf	217,b	;volatile
  2280   00160A                     
  2281                           ; BSR set to: 14
  2282                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  2283   00160A  8BD9               	bsf	217,5,b	;volatile
  2284                           
  2285                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  2286   00160C  0E9F               	movlw	159
  2287   00160E  6FD6               	movwf	214,b	;volatile
  2288   001610                     
  2289                           ; BSR set to: 14
  2290                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  2291   001610  8A84               	bsf	132,5,c	;volatile
  2292   001612                     
  2293                           ; BSR set to: 14
  2294                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  2295   001612  8C84               	bsf	132,6,c	;volatile
  2296   001614                     
  2297                           ; BSR set to: 14
  2298                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  2299   001614  9BA7               	bcf	167,5,b	;volatile
  2300   001616                     
  2301                           ; BSR set to: 14
  2302                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  2303   001616  9DA7               	bcf	167,6,b	;volatile
  2304                           
  2305                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  2306   001618  0E1D               	movlw	29
  2307   00161A  6F1D               	movwf	29,b	;volatile
  2308                           
  2309                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  2310   00161C  0E1E               	movlw	30
  2311   00161E  6F1C               	movwf	28,b	;volatile
  2312                           
  2313                           ;i2c.c: 18:   RD5PPS=0x1C;
  2314   001620  0E1C               	movlw	28
  2315   001622  6F6F               	movwf	111,b	;volatile
  2316                           
  2317                           ;i2c.c: 19:   RD6PPS=0x1B;
  2318   001624  0E1B               	movlw	27
  2319   001626  6F70               	movwf	112,b	;volatile
  2320   001628                     
  2321                           ; BSR set to: 14
  2322   001628  0012               	return		;funcret
  2323   00162A                     __end_of_I2C_2_Master_Init:
  2324                           	callstack 0
  2325                           
  2326 ;; *************** function _DCmotorsInit *****************
  2327 ;; Defined at:
  2328 ;;		line 73 in file "dc_motor.c"
  2329 ;; Parameters:    Size  Location     Type
  2330 ;;  mL              2    4[COMRAM] PTR struct DC_motor
  2331 ;;		 -> main@motorLeft(9), 
  2332 ;;  mR              2    6[COMRAM] PTR struct DC_motor
  2333 ;;		 -> main@motorRight(9), 
  2334 ;; Auto vars:     Size  Location     Type
  2335 ;;		None
  2336 ;; Return value:  Size  Location     Type
  2337 ;;                  1    wreg      void 
  2338 ;; Registers used:
  2339 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2340 ;; Tracked objects:
  2341 ;;		On entry : 0/0
  2342 ;;		On exit  : 0/0
  2343 ;;		Unchanged: 0/0
  2344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2345 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2348 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2349 ;;Total ram usage:        4 bytes
  2350 ;; Hardware stack levels used: 1
  2351 ;; Hardware stack levels required when called: 2
  2352 ;; This function calls:
  2353 ;;		Nothing
  2354 ;; This function is called by:
  2355 ;;		_main
  2356 ;; This function uses a non-reentrant model
  2357 ;;
  2358                           
  2359                           	psect	text17
  2360   001190                     __ptext17:
  2361                           	callstack 0
  2362   001190                     _DCmotorsInit:
  2363                           	callstack 28
  2364   001190                     
  2365                           ;dc_motor.c: 75:     mL->power = 0;
  2366   001190  C005  FFD9         	movff	DCmotorsInit@mL,fsr2l
  2367   001194  C006  FFDA         	movff	DCmotorsInit@mL+1,fsr2h
  2368   001198  0E00               	movlw	0
  2369   00119A  6EDF               	movwf	indf2,c
  2370   00119C                     
  2371                           ;dc_motor.c: 76:     mL->direction = 1;
  2372   00119C  EE20 F001          	lfsr	2,1
  2373   0011A0  5005               	movf	DCmotorsInit@mL^0,w,c
  2374   0011A2  26D9               	addwf	fsr2l,f,c
  2375   0011A4  5006               	movf	(DCmotorsInit@mL+1)^0,w,c
  2376   0011A6  22DA               	addwfc	fsr2h,f,c
  2377   0011A8  0E01               	movlw	1
  2378   0011AA  6EDF               	movwf	indf2,c
  2379   0011AC                     
  2380                           ;dc_motor.c: 77:     mL->brakemode = 1;
  2381   0011AC  EE20 F002          	lfsr	2,2
  2382   0011B0  5005               	movf	DCmotorsInit@mL^0,w,c
  2383   0011B2  26D9               	addwf	fsr2l,f,c
  2384   0011B4  5006               	movf	(DCmotorsInit@mL+1)^0,w,c
  2385   0011B6  22DA               	addwfc	fsr2h,f,c
  2386   0011B8  0E01               	movlw	1
  2387   0011BA  6EDF               	movwf	indf2,c
  2388   0011BC                     
  2389                           ;dc_motor.c: 78:     mL->posDutyHighByte = (unsigned char *)(&CCPR1H);
  2390   0011BC  EE20 F005          	lfsr	2,5
  2391   0011C0  5005               	movf	DCmotorsInit@mL^0,w,c
  2392   0011C2  26D9               	addwf	fsr2l,f,c
  2393   0011C4  5006               	movf	(DCmotorsInit@mL+1)^0,w,c
  2394   0011C6  22DA               	addwfc	fsr2h,f,c
  2395   0011C8  0EAA               	movlw	170
  2396   0011CA  6EDE               	movwf	postinc2,c
  2397   0011CC  0E0F               	movlw	15
  2398   0011CE  6EDD               	movwf	postdec2,c
  2399   0011D0                     
  2400                           ;dc_motor.c: 79:     mL->negDutyHighByte = (unsigned char *)(&CCPR2H);
  2401   0011D0  EE20 F007          	lfsr	2,7
  2402   0011D4  5005               	movf	DCmotorsInit@mL^0,w,c
  2403   0011D6  26D9               	addwf	fsr2l,f,c
  2404   0011D8  5006               	movf	(DCmotorsInit@mL+1)^0,w,c
  2405   0011DA  22DA               	addwfc	fsr2h,f,c
  2406   0011DC  0EA6               	movlw	166
  2407   0011DE  6EDE               	movwf	postinc2,c
  2408   0011E0  0E0F               	movlw	15
  2409   0011E2  6EDD               	movwf	postdec2,c
  2410   0011E4                     
  2411                           ;dc_motor.c: 80:     mL->PWMperiod = 199 ;
  2412   0011E4  EE20 F003          	lfsr	2,3
  2413   0011E8  5005               	movf	DCmotorsInit@mL^0,w,c
  2414   0011EA  26D9               	addwf	fsr2l,f,c
  2415   0011EC  5006               	movf	(DCmotorsInit@mL+1)^0,w,c
  2416   0011EE  22DA               	addwfc	fsr2h,f,c
  2417   0011F0  0EC7               	movlw	199
  2418   0011F2  6EDE               	movwf	postinc2,c
  2419   0011F4  0E00               	movlw	0
  2420   0011F6  6EDD               	movwf	postdec2,c
  2421   0011F8                     
  2422                           ;dc_motor.c: 82:     mR->power = 0;
  2423   0011F8  C007  FFD9         	movff	DCmotorsInit@mR,fsr2l
  2424   0011FC  C008  FFDA         	movff	DCmotorsInit@mR+1,fsr2h
  2425   001200  0E00               	movlw	0
  2426   001202  6EDF               	movwf	indf2,c
  2427                           
  2428                           ;dc_motor.c: 83:     mR->direction = 1;
  2429   001204  EE20 F001          	lfsr	2,1
  2430   001208  5007               	movf	DCmotorsInit@mR^0,w,c
  2431   00120A  26D9               	addwf	fsr2l,f,c
  2432   00120C  5008               	movf	(DCmotorsInit@mR+1)^0,w,c
  2433   00120E  22DA               	addwfc	fsr2h,f,c
  2434   001210  0E01               	movlw	1
  2435   001212  6EDF               	movwf	indf2,c
  2436                           
  2437                           ;dc_motor.c: 84:     mR->brakemode = 1;
  2438   001214  EE20 F002          	lfsr	2,2
  2439   001218  5007               	movf	DCmotorsInit@mR^0,w,c
  2440   00121A  26D9               	addwf	fsr2l,f,c
  2441   00121C  5008               	movf	(DCmotorsInit@mR+1)^0,w,c
  2442   00121E  22DA               	addwfc	fsr2h,f,c
  2443   001220  0E01               	movlw	1
  2444   001222  6EDF               	movwf	indf2,c
  2445                           
  2446                           ;dc_motor.c: 85:     mR->posDutyHighByte = (unsigned char *)(&CCPR3H);
  2447   001224  EE20 F005          	lfsr	2,5
  2448   001228  5007               	movf	DCmotorsInit@mR^0,w,c
  2449   00122A  26D9               	addwf	fsr2l,f,c
  2450   00122C  5008               	movf	(DCmotorsInit@mR+1)^0,w,c
  2451   00122E  22DA               	addwfc	fsr2h,f,c
  2452   001230  0E25               	movlw	37
  2453   001232  6EDE               	movwf	postinc2,c
  2454   001234  0E0F               	movlw	15
  2455   001236  6EDD               	movwf	postdec2,c
  2456                           
  2457                           ;dc_motor.c: 86:     mR->negDutyHighByte = (unsigned char *)(&CCPR4H);
  2458   001238  EE20 F007          	lfsr	2,7
  2459   00123C  5007               	movf	DCmotorsInit@mR^0,w,c
  2460   00123E  26D9               	addwf	fsr2l,f,c
  2461   001240  5008               	movf	(DCmotorsInit@mR+1)^0,w,c
  2462   001242  22DA               	addwfc	fsr2h,f,c
  2463   001244  0E21               	movlw	33
  2464   001246  6EDE               	movwf	postinc2,c
  2465   001248  0E0F               	movlw	15
  2466   00124A  6EDD               	movwf	postdec2,c
  2467                           
  2468                           ;dc_motor.c: 87:     mR->PWMperiod = 199 ;
  2469   00124C  EE20 F003          	lfsr	2,3
  2470   001250  5007               	movf	DCmotorsInit@mR^0,w,c
  2471   001252  26D9               	addwf	fsr2l,f,c
  2472   001254  5008               	movf	(DCmotorsInit@mR+1)^0,w,c
  2473   001256  22DA               	addwfc	fsr2h,f,c
  2474   001258  0EC7               	movlw	199
  2475   00125A  6EDE               	movwf	postinc2,c
  2476   00125C  0E00               	movlw	0
  2477   00125E  6EDD               	movwf	postdec2,c
  2478   001260  0012               	return		;funcret
  2479   001262                     __end_of_DCmotorsInit:
  2480                           	callstack 0
  2481                           
  2482 ;; *************** function _HighISR *****************
  2483 ;; Defined at:
  2484 ;;		line 122 in file "serial.c"
  2485 ;; Parameters:    Size  Location     Type
  2486 ;;		None
  2487 ;; Auto vars:     Size  Location     Type
  2488 ;;		None
  2489 ;; Return value:  Size  Location     Type
  2490 ;;                  1    wreg      void 
  2491 ;; Registers used:
  2492 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2493 ;; Tracked objects:
  2494 ;;		On entry : 0/0
  2495 ;;		On exit  : 0/0
  2496 ;;		Unchanged: 0/0
  2497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2500 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2501 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2502 ;;Total ram usage:        2 bytes
  2503 ;; Hardware stack levels used: 1
  2504 ;; Hardware stack levels required when called: 1
  2505 ;; This function calls:
  2506 ;;		_getCharFromTxBuf
  2507 ;;		_isDataInTxBuf
  2508 ;;		_putCharToRxBuf
  2509 ;; This function is called by:
  2510 ;;		Interrupt level 2
  2511 ;; This function uses a non-reentrant model
  2512 ;;
  2513                           
  2514                           	psect	intcode
  2515   000008                     __pintcode:
  2516                           	callstack 0
  2517   000008                     _HighISR:
  2518                           	callstack 24
  2519                           
  2520                           ;incstack = 0
  2521   000008  824C               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  2522   00000A  CFD9 F003          	movff	fsr2l,??_HighISR
  2523   00000E  CFDA F004          	movff	fsr2h,??_HighISR+1
  2524   000012                     
  2525                           ;serial.c: 124:     if(PIR4bits.RC4IF == 1){
  2526   000012  010E               	movlb	14	; () banked
  2527   000014  A737               	btfss	55,3,b	;volatile
  2528   000016  EF0F  F000         	goto	i2u192_41
  2529   00001A  EF11  F000         	goto	i2u192_40
  2530   00001E                     i2u192_41:
  2531   00001E  EF14  F000         	goto	i2l2668
  2532   000022                     i2u192_40:
  2533   000022                     
  2534                           ; BSR set to: 14
  2535                           ;serial.c: 125:         putCharToRxBuf(RC4REG);
  2536   000022  51E3               	movf	227,w,b	;volatile
  2537   000024  EC15  F00B         	call	_putCharToRxBuf
  2538   000028                     i2l2668:
  2539                           
  2540                           ;serial.c: 128:     if(PIR4bits.TX4IF == 1){
  2541   000028  010E               	movlb	14	; () banked
  2542   00002A  A537               	btfss	55,2,b	;volatile
  2543   00002C  EF1A  F000         	goto	i2u193_41
  2544   000030  EF1C  F000         	goto	i2u193_40
  2545   000034                     i2u193_41:
  2546   000034  EF2E  F000         	goto	i2l475
  2547   000038                     i2u193_40:
  2548   000038                     
  2549                           ; BSR set to: 14
  2550                           ;serial.c: 129:         if(isDataInTxBuf()){
  2551   000038  EC71  F00B         	call	_isDataInTxBuf	;wreg free
  2552   00003C  0900               	iorlw	0
  2553   00003E  B4D8               	btfsc	status,2,c
  2554   000040  EF24  F000         	goto	i2u194_41
  2555   000044  EF26  F000         	goto	i2u194_40
  2556   000048                     i2u194_41:
  2557   000048  EF2C  F000         	goto	i2l473
  2558   00004C                     i2u194_40:
  2559   00004C                     
  2560                           ;serial.c: 130:             TX4REG = getCharFromTxBuf();
  2561   00004C  ECEA  F00A         	call	_getCharFromTxBuf	;wreg free
  2562   000050  010E               	movlb	14	; () banked
  2563   000052  6FE4               	movwf	228,b	;volatile
  2564                           
  2565                           ;serial.c: 132:         }
  2566   000054  EF2E  F000         	goto	i2l475
  2567   000058                     i2l473:
  2568                           
  2569                           ;serial.c: 134:     PIE4bits.TX4IE = 0;
  2570   000058  010E               	movlb	14	; () banked
  2571   00005A  952D               	bcf	45,2,b	;volatile
  2572   00005C                     i2l475:
  2573                           
  2574                           ; BSR set to: 14
  2575   00005C  C004  FFDA         	movff	??_HighISR+1,fsr2h
  2576   000060  C003  FFD9         	movff	??_HighISR,fsr2l
  2577   000064  924C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2578   000066  0011               	retfie		f
  2579   000068                     __end_of_HighISR:
  2580                           	callstack 0
  2581                           
  2582 ;; *************** function _putCharToRxBuf *****************
  2583 ;; Defined at:
  2584 ;;		line 54 in file "serial.c"
  2585 ;; Parameters:    Size  Location     Type
  2586 ;;  byte            1    wreg     unsigned char 
  2587 ;; Auto vars:     Size  Location     Type
  2588 ;;  byte            1    0[COMRAM] unsigned char 
  2589 ;; Return value:  Size  Location     Type
  2590 ;;                  1    wreg      void 
  2591 ;; Registers used:
  2592 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2593 ;; Tracked objects:
  2594 ;;		On entry : 0/0
  2595 ;;		On exit  : 0/0
  2596 ;;		Unchanged: 0/0
  2597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2599 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2601 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2602 ;;Total ram usage:        1 bytes
  2603 ;; Hardware stack levels used: 1
  2604 ;; This function calls:
  2605 ;;		Nothing
  2606 ;; This function is called by:
  2607 ;;		_HighISR
  2608 ;; This function uses a non-reentrant model
  2609 ;;
  2610                           
  2611                           	psect	text19
  2612   00162A                     __ptext19:
  2613                           	callstack 0
  2614   00162A                     _putCharToRxBuf:
  2615                           	callstack 24
  2616                           
  2617                           ; BSR set to: 14
  2618                           ;incstack = 0
  2619                           ;putCharToRxBuf@byte stored from wreg
  2620   00162A  6E01               	movwf	putCharToRxBuf@byte^0,c
  2621   00162C                     
  2622                           ;serial.c: 55:     if (RxBufWriteCnt>=20) {RxBufWriteCnt=0;}
  2623   00162C  0E13               	movlw	19
  2624   00162E  6447               	cpfsgt	_RxBufWriteCnt^0,c	;volatile
  2625   001630  EF1C  F00B         	goto	i2u23_41
  2626   001634  EF1E  F00B         	goto	i2u23_40
  2627   001638                     i2u23_41:
  2628   001638  EF20  F00B         	goto	i2l1480
  2629   00163C                     i2u23_40:
  2630   00163C  0E00               	movlw	0
  2631   00163E  6E47               	movwf	_RxBufWriteCnt^0,c	;volatile
  2632   001640                     i2l1480:
  2633                           
  2634                           ;serial.c: 56:     EUSART4RXbuf[RxBufWriteCnt++]=byte;
  2635   001640  0E2C               	movlw	low _EUSART4RXbuf
  2636   001642  2447               	addwf	_RxBufWriteCnt^0,w,c	;volatile
  2637   001644  6ED9               	movwf	fsr2l,c
  2638   001646  6ADA               	clrf	fsr2h,c
  2639   001648  0E00               	movlw	high _EUSART4RXbuf
  2640   00164A  22DA               	addwfc	fsr2h,f,c
  2641   00164C  C001  FFDF         	movff	putCharToRxBuf@byte,indf2
  2642   001650  2A47               	incf	_RxBufWriteCnt^0,f,c	;volatile
  2643   001652  0012               	return		;funcret
  2644   001654                     __end_of_putCharToRxBuf:
  2645                           	callstack 0
  2646                           
  2647 ;; *************** function _isDataInTxBuf *****************
  2648 ;; Defined at:
  2649 ;;		line 83 in file "serial.c"
  2650 ;; Parameters:    Size  Location     Type
  2651 ;;		None
  2652 ;; Auto vars:     Size  Location     Type
  2653 ;;		None
  2654 ;; Return value:  Size  Location     Type
  2655 ;;                  1    wreg      unsigned char 
  2656 ;; Registers used:
  2657 ;;		wreg, status,2, status,0
  2658 ;; Tracked objects:
  2659 ;;		On entry : 0/0
  2660 ;;		On exit  : 0/0
  2661 ;;		Unchanged: 0/0
  2662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2666 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2667 ;;Total ram usage:        0 bytes
  2668 ;; Hardware stack levels used: 1
  2669 ;; This function calls:
  2670 ;;		Nothing
  2671 ;; This function is called by:
  2672 ;;		_HighISR
  2673 ;;		_sendTxBuf
  2674 ;; This function uses a non-reentrant model
  2675 ;;
  2676                           
  2677                           	psect	text20
  2678   0016E2                     __ptext20:
  2679                           	callstack 0
  2680   0016E2                     _isDataInTxBuf:
  2681                           	callstack 24
  2682   0016E2                     
  2683                           ;serial.c: 84:     return (TxBufWriteCnt!=TxBufReadCnt);
  2684   0016E2  5044               	movf	_TxBufReadCnt^0,w,c	;volatile
  2685   0016E4  1845               	xorwf	_TxBufWriteCnt^0,w,c	;volatile
  2686   0016E6  A4D8               	btfss	status,2,c
  2687   0016E8  EF78  F00B         	goto	i2u26_41
  2688   0016EC  EF7B  F00B         	goto	i2u26_40
  2689   0016F0                     i2u26_41:
  2690   0016F0  0E01               	movlw	1
  2691   0016F2  EF7C  F00B         	goto	i2u27_40
  2692   0016F6                     i2u26_40:
  2693   0016F6  0E00               	movlw	0
  2694   0016F8                     i2u27_40:
  2695   0016F8  0012               	return		;funcret
  2696   0016FA                     __end_of_isDataInTxBuf:
  2697                           	callstack 0
  2698                           
  2699 ;; *************** function _getCharFromTxBuf *****************
  2700 ;; Defined at:
  2701 ;;		line 69 in file "serial.c"
  2702 ;; Parameters:    Size  Location     Type
  2703 ;;		None
  2704 ;; Auto vars:     Size  Location     Type
  2705 ;;		None
  2706 ;; Return value:  Size  Location     Type
  2707 ;;                  1    wreg      unsigned char 
  2708 ;; Registers used:
  2709 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2710 ;; Tracked objects:
  2711 ;;		On entry : 0/0
  2712 ;;		On exit  : 0/0
  2713 ;;		Unchanged: 0/0
  2714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2717 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2718 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2719 ;;Total ram usage:        2 bytes
  2720 ;; Hardware stack levels used: 1
  2721 ;; This function calls:
  2722 ;;		Nothing
  2723 ;; This function is called by:
  2724 ;;		_HighISR
  2725 ;; This function uses a non-reentrant model
  2726 ;;
  2727                           
  2728                           	psect	text21
  2729   0015D4                     __ptext21:
  2730                           	callstack 0
  2731   0015D4                     _getCharFromTxBuf:
  2732                           	callstack 24
  2733   0015D4                     
  2734                           ;serial.c: 70:     if (TxBufReadCnt>=60) {TxBufReadCnt=0;}
  2735   0015D4  0E3B               	movlw	59
  2736   0015D6  6444               	cpfsgt	_TxBufReadCnt^0,c	;volatile
  2737   0015D8  EFF0  F00A         	goto	i2u148_41
  2738   0015DC  EFF2  F00A         	goto	i2u148_40
  2739   0015E0                     i2u148_41:
  2740   0015E0  EFF4  F00A         	goto	i2l2344
  2741   0015E4                     i2u148_40:
  2742   0015E4  0E00               	movlw	0
  2743   0015E6  6E44               	movwf	_TxBufReadCnt^0,c	;volatile
  2744   0015E8                     i2l2344:
  2745                           
  2746                           ;serial.c: 71:     return EUSART4TXbuf[TxBufReadCnt++];
  2747   0015E8  2A44               	incf	_TxBufReadCnt^0,f,c	;volatile
  2748   0015EA  0444               	decf	_TxBufReadCnt^0,w,c	;volatile
  2749   0015EC  6E01               	movwf	??_getCharFromTxBuf^0,c
  2750   0015EE  6A02               	clrf	(??_getCharFromTxBuf+1)^0,c
  2751   0015F0  0E60               	movlw	low _EUSART4TXbuf
  2752   0015F2  2401               	addwf	??_getCharFromTxBuf^0,w,c
  2753   0015F4  6ED9               	movwf	fsr2l,c
  2754   0015F6  0E00               	movlw	high _EUSART4TXbuf
  2755   0015F8  2002               	addwfc	(??_getCharFromTxBuf+1)^0,w,c
  2756   0015FA  6EDA               	movwf	fsr2h,c
  2757   0015FC  50DF               	movf	indf2,w,c
  2758   0015FE  0012               	return		;funcret
  2759   001600                     __end_of_getCharFromTxBuf:
  2760                           	callstack 0
  2761                           
  2762                           	psect	rparam
  2763   000000                     
  2764                           	psect	temp
  2765   00004C                     btemp:
  2766                           	callstack 0
  2767   00004C                     	ds	1
  2768   000000                     int$flags	set	btemp
  2769   000000                     wtemp8	set	btemp+1
  2770   000000                     ttemp5	set	btemp+1
  2771   000000                     ttemp6	set	btemp+4
  2772   000000                     ttemp7	set	btemp+8
  2773                           
  2774                           	psect	idloc
  2775                           
  2776                           ;Config register IDLOC0 @ 0x200000
  2777                           ;	unspecified, using default values
  2778   200000                     	org	2097152
  2779   200000  0FFF               	dw	4095
  2780                           
  2781                           ;Config register IDLOC1 @ 0x200002
  2782                           ;	unspecified, using default values
  2783   200002                     	org	2097154
  2784   200002  0FFF               	dw	4095
  2785                           
  2786                           ;Config register IDLOC2 @ 0x200004
  2787                           ;	unspecified, using default values
  2788   200004                     	org	2097156
  2789   200004  0FFF               	dw	4095
  2790                           
  2791                           ;Config register IDLOC3 @ 0x200006
  2792                           ;	unspecified, using default values
  2793   200006                     	org	2097158
  2794   200006  0FFF               	dw	4095
  2795                           
  2796                           ;Config register IDLOC4 @ 0x200008
  2797                           ;	unspecified, using default values
  2798   200008                     	org	2097160
  2799   200008  0FFF               	dw	4095
  2800                           
  2801                           ;Config register IDLOC5 @ 0x20000A
  2802                           ;	unspecified, using default values
  2803   20000A                     	org	2097162
  2804   20000A  0FFF               	dw	4095
  2805                           
  2806                           ;Config register IDLOC6 @ 0x20000C
  2807                           ;	unspecified, using default values
  2808   20000C                     	org	2097164
  2809   20000C  0FFF               	dw	4095
  2810                           
  2811                           ;Config register IDLOC7 @ 0x20000E
  2812                           ;	unspecified, using default values
  2813   20000E                     	org	2097166
  2814   20000E  0FFF               	dw	4095
  2815                           
  2816                           	psect	config
  2817                           
  2818                           ;Config register CONFIG1L @ 0x300000
  2819                           ;	External Oscillator mode Selection bits
  2820                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  2821                           ;	Power-up default value for COSC bits
  2822                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  2823   300000                     	org	3145728
  2824   300000  AA                 	db	170
  2825                           
  2826                           ;Config register CONFIG1H @ 0x300001
  2827                           ;	unspecified, using default values
  2828                           ;	Clock Out Enable bit
  2829                           ;	CLKOUTEN = 0x1, unprogrammed default
  2830                           ;	Clock Switch Enable bit
  2831                           ;	CSWEN = 0x1, unprogrammed default
  2832                           ;	Fail-Safe Clock Monitor Enable bit
  2833                           ;	FCMEN = 0x1, unprogrammed default
  2834   300001                     	org	3145729
  2835   300001  FF                 	db	255
  2836                           
  2837                           ;Config register CONFIG2L @ 0x300002
  2838                           ;	unspecified, using default values
  2839                           ;	Master Clear Enable bit
  2840                           ;	MCLRE = 0x1, unprogrammed default
  2841                           ;	Power-up Timer Enable bit
  2842                           ;	PWRTE = 0x1, unprogrammed default
  2843                           ;	Low-power BOR enable bit
  2844                           ;	LPBOREN = 0x1, unprogrammed default
  2845                           ;	Brown-out Reset Enable bits
  2846                           ;	BOREN = 0x3, unprogrammed default
  2847   300002                     	org	3145730
  2848   300002  FF                 	db	255
  2849                           
  2850                           ;Config register CONFIG2H @ 0x300003
  2851                           ;	unspecified, using default values
  2852                           ;	Brown Out Reset Voltage selection bits
  2853                           ;	BORV = 0x3, unprogrammed default
  2854                           ;	ZCD Disable bit
  2855                           ;	ZCD = 0x1, unprogrammed default
  2856                           ;	PPSLOCK bit One-Way Set Enable bit
  2857                           ;	PPS1WAY = 0x1, unprogrammed default
  2858                           ;	Stack Full/Underflow Reset Enable bit
  2859                           ;	STVREN = 0x1, unprogrammed default
  2860                           ;	Debugger Enable bit
  2861                           ;	DEBUG = 0x1, unprogrammed default
  2862                           ;	Extended Instruction Set Enable bit
  2863                           ;	XINST = 0x1, unprogrammed default
  2864   300003                     	org	3145731
  2865   300003  FF                 	db	255
  2866                           
  2867                           ;Config register CONFIG3L @ 0x300004
  2868                           ;	WDT Period Select bits
  2869                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  2870                           ;	WDT operating mode
  2871                           ;	WDTE = OFF, WDT Disabled
  2872   300004                     	org	3145732
  2873   300004  9F                 	db	159
  2874                           
  2875                           ;Config register CONFIG3H @ 0x300005
  2876                           ;	unspecified, using default values
  2877                           ;	WDT Window Select bits
  2878                           ;	WDTCWS = 0x7, unprogrammed default
  2879                           ;	WDT input clock selector
  2880                           ;	WDTCCS = 0x7, unprogrammed default
  2881   300005                     	org	3145733
  2882   300005  FF                 	db	255
  2883                           
  2884                           ;Config register CONFIG4L @ 0x300006
  2885                           ;	unspecified, using default values
  2886                           ;	Write Protection Block 0
  2887                           ;	WRT0 = 0x1, unprogrammed default
  2888                           ;	Write Protection Block 1
  2889                           ;	WRT1 = 0x1, unprogrammed default
  2890                           ;	Write Protection Block 2
  2891                           ;	WRT2 = 0x1, unprogrammed default
  2892                           ;	Write Protection Block 3
  2893                           ;	WRT3 = 0x1, unprogrammed default
  2894                           ;	Write Protection Block 3
  2895                           ;	WRT4 = 0x1, unprogrammed default
  2896                           ;	Write Protection Block 3
  2897                           ;	WRT5 = 0x1, unprogrammed default
  2898                           ;	Write Protection Block 3
  2899                           ;	WRT6 = 0x1, unprogrammed default
  2900                           ;	Write Protection Block 3
  2901                           ;	WRT7 = 0x1, unprogrammed default
  2902   300006                     	org	3145734
  2903   300006  FF                 	db	255
  2904                           
  2905                           ;Config register CONFIG4H @ 0x300007
  2906                           ;	unspecified, using default values
  2907                           ;	Configuration Register Write Protection bit
  2908                           ;	WRTC = 0x1, unprogrammed default
  2909                           ;	Boot Block Write Protection bit
  2910                           ;	WRTB = 0x1, unprogrammed default
  2911                           ;	Data EEPROM Write Protection bit
  2912                           ;	WRTD = 0x1, unprogrammed default
  2913                           ;	Scanner Enable bit
  2914                           ;	SCANE = 0x1, unprogrammed default
  2915                           ;	Low Voltage Programming Enable bit
  2916                           ;	LVP = 0x1, unprogrammed default
  2917   300007                     	org	3145735
  2918   300007  FF                 	db	255
  2919                           
  2920                           ;Config register CONFIG5L @ 0x300008
  2921                           ;	unspecified, using default values
  2922                           ;	UserNVM Program Memory Code Protection bit
  2923                           ;	CP = 0x1, unprogrammed default
  2924                           ;	DataNVM Memory Code Protection bit
  2925                           ;	CPD = 0x1, unprogrammed default
  2926   300008                     	org	3145736
  2927   300008  FF                 	db	255
  2928                           
  2929                           ;Config register CONFIG5H @ 0x300009
  2930                           ;	unspecified, using default values
  2931   300009                     	org	3145737
  2932   300009  FF                 	db	255
  2933                           
  2934                           ;Config register CONFIG6L @ 0x30000A
  2935                           ;	unspecified, using default values
  2936                           ;	Table Read Protection Block 0
  2937                           ;	EBTR0 = 0x1, unprogrammed default
  2938                           ;	Table Read Protection Block 1
  2939                           ;	EBTR1 = 0x1, unprogrammed default
  2940                           ;	Table Read Protection Block 2
  2941                           ;	EBTR2 = 0x1, unprogrammed default
  2942                           ;	Table Read Protection Block 3
  2943                           ;	EBTR3 = 0x1, unprogrammed default
  2944                           ;	Table Read Protection Block 4
  2945                           ;	EBTR4 = 0x1, unprogrammed default
  2946                           ;	Table Read Protection Block 5
  2947                           ;	EBTR5 = 0x1, unprogrammed default
  2948                           ;	Table Read Protection Block 6
  2949                           ;	EBTR6 = 0x1, unprogrammed default
  2950                           ;	Table Read Protection Block 7
  2951                           ;	EBTR7 = 0x1, unprogrammed default
  2952   30000A                     	org	3145738
  2953   30000A  FF                 	db	255
  2954                           
  2955                           ;Config register CONFIG6H @ 0x30000B
  2956                           ;	unspecified, using default values
  2957                           ;	Boot Block Table Read Protection bit
  2958                           ;	EBTRB = 0x1, unprogrammed default
  2959   30000B                     	org	3145739
  2960   30000B  FF                 	db	255
  2961                           tosu	equ	0xFFF
  2962                           tosh	equ	0xFFE
  2963                           tosl	equ	0xFFD
  2964                           stkptr	equ	0xFFC
  2965                           pclatu	equ	0xFFB
  2966                           pclath	equ	0xFFA
  2967                           pcl	equ	0xFF9
  2968                           tblptru	equ	0xFF8
  2969                           tblptrh	equ	0xFF7
  2970                           tblptrl	equ	0xFF6
  2971                           tablat	equ	0xFF5
  2972                           prodh	equ	0xFF4
  2973                           prodl	equ	0xFF3
  2974                           indf0	equ	0xFEF
  2975                           postinc0	equ	0xFEE
  2976                           postdec0	equ	0xFED
  2977                           preinc0	equ	0xFEC
  2978                           plusw0	equ	0xFEB
  2979                           fsr0h	equ	0xFEA
  2980                           fsr0l	equ	0xFE9
  2981                           wreg	equ	0xFE8
  2982                           indf1	equ	0xFE7
  2983                           postinc1	equ	0xFE6
  2984                           postdec1	equ	0xFE5
  2985                           preinc1	equ	0xFE4
  2986                           plusw1	equ	0xFE3
  2987                           fsr1h	equ	0xFE2
  2988                           fsr1l	equ	0xFE1
  2989                           bsr	equ	0xFE0
  2990                           indf2	equ	0xFDF
  2991                           postinc2	equ	0xFDE
  2992                           postdec2	equ	0xFDD
  2993                           preinc2	equ	0xFDC
  2994                           plusw2	equ	0xFDB
  2995                           fsr2h	equ	0xFDA
  2996                           fsr2l	equ	0xFD9
  2997                           status	equ	0xFD8

Data Sizes:
    Strings     13
    Constant    0
    Data        4
    BSS         88
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     43      75
    BANK0           160     18      78
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    vfprintf$2	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfprintf$1	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_1(CODE[13]), 

    vfprintf$0	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    S2569$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2569$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    motorRight.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    motorRight.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    motorLeft.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    motorLeft.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    reverseSquareRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK0[9]), 

    reverseSquareRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK0[9]), 

    turnLeft_135@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft_135@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft_135@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft_135@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight_135@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight_135@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight_135@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight_135@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight_90@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight_90@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight_90@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight_90@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight_90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK0[9]), 

    turnRight_90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK0[9]), 

    turnLeft_90@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft_90@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft_90@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft_90@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnRight@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnRight@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    turnLeft@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    turnLeft@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    reverse@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    reverse@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    reverse@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK0[9]), 

    reverse@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    reverse@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    reverse@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK0[9]), 

    forward@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    forward@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    forward@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    forward@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK0[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK0[9]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK0[9]), main@motorLeft(BANK0[9]), 

    DCmotorsInit@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(BANK0[9]), 

    S107DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlhhhlllll[1]), CCPR2H(BITBIGSFRhhhhllll[1]), 

    S107DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlhhhlllll[1]), CCPR1H(BITBIGSFRhhhhllll[1]), 

    DCmotorsInit@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(BANK0[9]), 


Critical Paths under _main in COMRAM

    _main->_reverseSquareRight
    _reverseSquareRight->_turnRight_90
    _turnRight_90->_stop
    _stop->_setMotorPWM
    _reverse->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle

Critical Paths under _HighISR in COMRAM

    _HighISR->_getCharFromTxBuf

Critical Paths under _main in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               172   172      0   32257
                                             41 COMRAM     2     2      0
                                              0 BANK0     18    18      0
                       _DCmotorsInit
                   _color_click_init
                    _initDCmotorsPWM
                         _initUSART4
                 _reverseSquareRight
 ---------------------------------------------------------------------------------
 (1) _reverseSquareRight                                   6     2      4   30873
                                             35 COMRAM     6     2      4
                            _reverse
                               _stop
                       _turnRight_90
 ---------------------------------------------------------------------------------
 (2) _turnRight_90                                         6     2      4   17177
                                             29 COMRAM     6     2      4
                            _reverse
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (3) _stop                                                 6     2      4    7621
                                             23 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _reverse                                              5     1      4    5405
                                             23 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _setMotorPWM                                          6     4      2    3233
                                             17 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     624
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     481
                                             10 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      90
                                              4 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     354
                                              8 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     354
                                              6 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              5 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DCmotorsInit                                         4     0      4     552
                                              4 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _HighISR                                              2     2      0      15
                                              2 COMRAM     2     2      0
                   _getCharFromTxBuf
                      _isDataInTxBuf
                     _putCharToRxBuf
 ---------------------------------------------------------------------------------
 (7) _putCharToRxBuf                                       1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _isDataInTxBuf                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _getCharFromTxBuf                                     2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DCmotorsInit
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _initDCmotorsPWM
   _initUSART4
   _reverseSquareRight
     _reverse
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
     _stop
       _setMotorPWM
     _turnRight_90
       _reverse
       _setMotorPWM
       _stop

 _HighISR (ROOT)
   _getCharFromTxBuf
   _isDataInTxBuf
   _putCharToRxBuf

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      62        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     12      4E       5       48.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2B      4B       1       79.8%
BITBIGSFRlhhhhl     52      0       0      42        0.0%
BITBIGSFRlhhhll     37      0       0      44        0.0%
BITBIGSFRlllhlh     2A      0       0      55        0.0%
BITBIGSFRlllll      26      0       0      60        0.0%
BITBIGSFRlhhhll     20      0       0      47        0.0%
BITBIGSFRlhhhll     1E      0       0      49        0.0%
BITBIGSFRhhhhhl     1B      0       0      33        0.0%
BITBIGSFRhhhhll     17      0       0      38        0.0%
BITBIGSFRhhhhhl     13      0       0      34        0.0%
BITBIGSFRlhhl       11      0       0      50        0.0%
BITBIGSFRhhhhlh      E      0       0      35        0.0%
BITBIGSFRhhhhhh      D      0       0      32        0.0%
BITBIGSFRlhhhll      C      0       0      48        0.0%
BITBIGSFRlllhll      9      0       0      57        0.0%
BITBIGSFRlllhll      9      0       0      56        0.0%
BITBIGSFRlhhhll      8      0       0      45        0.0%
BITBIGSFRllllh       6      0       0      59        0.0%
BITBIGSFRlllhh       6      0       0      54        0.0%
BITBIGSFRlllhll      5      0       0      58        0.0%
BITBIGSFRllhl        5      0       0      53        0.0%
BITBIGSFRhhhhll      5      0       0      39        0.0%
BITBIGSFRllhh        3      0       0      52        0.0%
BITBIGSFRlhhhlh      2      0       0      43        0.0%
BITBIGSFRhhhhll      2      0       0      37        0.0%
BITBIGSFRlhhhhh      1      0       0      41        0.0%
BITBIGSFRlhhhll      1      0       0      46        0.0%
BITBIGSFRhhhhlh      1      0       0      36        0.0%
BITBIGSFRlhl         1      0       0      51        0.0%
BITBIGSFRhhll        1      0       0      40        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      99      61        0.0%
DATA                 0      0      99       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Tue Dec 13 20:37:05 2022

                         l60 16E0                           l57 15D2          ___wmul@multiplicand 0007  
 __end_of_reverseSquareRight 1452                          l204 118E                          l164 14E0  
                        l228 10B8                          l413 16C0                          l174 0F7A  
                        l246 1450                          l167 1260                          l184 130E  
                        l282 167A                          l370 13B8                          l291 170E  
                        l276 1628                          l285 1718                          l294 1704  
                        l279 1654                          l496 16A0                          l994 1554  
                        l987 154C                          wreg 000FE8         reverseSquareRight@mL 0024  
       reverseSquareRight@mR 0026                         l3300 1376                         l3302 137A  
                       l3230 1314                         l3304 1388                         l3240 132A  
                       l3232 1318                         l3306 139C                         l3250 1334  
                       l3242 132C                         l3234 1324                         l2700 1546  
                       l3260 133E                         l3252 1336                         l3244 132E  
                       l3236 1326                         l3228 1310                         l2710 0E98  
                       l2702 0E10                         l3270 1348                         l3262 1340  
                       l3254 1338                         l3246 1330                         l3238 1328  
                       l2720 1664                         l2712 0EDA                         l2704 0E2C  
                       l3280 1352                         l3272 134A                         l3264 1342  
                       l3256 133A                         l3248 1332                         l2722 1710  
                       l2730 1706                         l2714 0EF6                         l2706 0E80  
                       l2810 0F90                         l3290 135E                         l3282 1354  
                       l3274 134C                         l3266 1344                         l3258 133C  
                       l2900 1190                         l2724 1714                         l2732 170A  
                       l2716 0F3A                         l2708 0E94                         l2740 128A  
                       l2820 1008                         l2812 0FA8                         l3292 1360  
                       l3284 1356                         l3276 134E                         l3268 1346  
                       l2910 11E4                         l2902 119C                         l2718 1654  
                       l2726 16FC                         l2750 12DE                         l2742 12A2  
                       l2734 1262                         l2830 105C                         l2822 1018  
                       l2814 0FD4                         l3294 1360                         l3286 1358  
                       l3278 1350                         l2912 11F8                         l2904 11AC  
                       l2728 1700                         l2840 15A4                         l2680 14E2  
                       l2760 1122                         l2752 12F6                         l2744 12AE  
                       l2736 1266                         l2832 1074                         l2824 102C  
                       l2816 0FE8                         l2808 0F7C                         l3296 1360  
                       l3288 135C                         l2906 11BC                         l2770 1600  
                       l2842 15AE                         l2690 151A                         l2682 14EA  
                       l2674 167C                         l2762 113A                         l2754 10BA  
                       l2746 12BA                         l2738 127E                         l2834 108C  
                       l2826 1044                         l2818 0FF8                         l2850 13BC  
                       l3298 1374                         l2908 11D0                         l2780 1616  
                       l2772 160A                         l2844 15BE                         l2940 16BA  
                       l2932 16A2                         l2692 1520                         l2684 14FC  
                       l2676 1698                         l2756 10FE                         l2764 1146  
                       l2748 12C6                         l2836 10A4                         l2828 1050  
                       l2852 13D0                         l2774 1610                         l2782 16C4  
                       l2846 15C8                         l2838 15A0                         l2942 16BC  
                       l2934 16AC                         l2694 1536                         l2686 1504  
                       l2766 115E                         l2758 1116                         l2854 13E8  
                       l2776 1612                         l2880 1462                         l2944 16BE  
                       l2936 16AE                         l2696 153E                         l2688 150C  
                       l2768 1176                         l2856 13FC                         l2778 1614  
                       l2890 14C6                         l2882 148C                         l2938 16B0  
                       l2698 1540                         l2858 1410                         l2892 14C8  
                       l2884 14B0                         l2894 14D2                         l2886 14BA  
                       l2878 1452                         l2896 14D4                         l2888 14BC  
                       l2898 14DE                         STR_1 0E01                         u2000 1664  
                       u2001 1660                         u2010 167A                         u2011 1676  
                       u2020 127E                         u2100 1074                         u2021 127A  
                       u2101 1070                         u2030 12A2                         u2110 108C  
                       u2031 129E                         u2111 1088                         u2040 12DE  
                       u2041 12DA                         u2050 12F6                         u2051 12F2  
                       u2060 1116                         u2061 1112                         u2070 113A  
                       u2071 1136                         u2080 115E                 _BAUD4CONbits 000EE9  
                       u2081 115A                         u2090 1176                         u2091 1172  
                       u3107 13DA                         u3117 141A                         u3127 0F9A  
                       u3137 0FC6                         _T2PR 000FBC                         u3147 1096  
                       u3157 1300                         u3167 15B4                         u2720 1388  
                       u3097 13A6                         u2721 1384                         u1950 14FC  
                       u1951 14F8                         u1960 151A                         u1961 1516  
                       u1970 1536                         u1971 1532                         u1980 0E2C  
                       u1981 0E28                         u1990 0EF6                         u1991 0EF2  
                       _main 1310                         fsr2h 000FDA                         indf2 000FDF  
                       fsr1l 000FE1                         fsr2l 000FD9                         btemp 004C  
                       _stop 1262                         prodh 000FF4                         prodl 000FF3  
                       start 0068              __end_of_HighISR 0068                 ___param_bank 000000  
                      ?_main 0001                        ?_stop 0018              __end_of___lwdiv 1556  
                      i2l453 16F8                        i2l446 15FE                        i2l439 1652  
                      i2l473 0058                        i2l475 005C                        _TMR0H 000FD4  
                      _TMR0L 000FD3   __end_of_I2C_2_Master_Start 171A   __end_of_I2C_2_Master_Write 1706  
                      tablat 000FF5              __end_of_reverse 1190                        ttemp5 004D  
                      ttemp6 0050                        ttemp7 0054                        status 000FD8  
                      wtemp8 004D           putCharToRxBuf@byte 0001              __initialization 1556  
               __end_of_main 13BC                 __end_of_stop 1310                       ??_main 002A  
                     ??_stop 001C                __activetblptr 000001                 _turnRight_90 0F7C  
               ?_setMotorPWM 0012                       _CCPR1H 000FAA                       _CCPR2H 000FA6  
                     _CCPR3H 000F25                       _CCPR4H 000F21                       _RC0PPS 000E62  
                     _RC4REG 000EE3                       _RE2PPS 000E74                       _RD5PPS 000E6F  
                     _RC7PPS 000E69                       _RD6PPS 000E70                       _RE4PPS 000E76  
                     i2l1500 16E2                       i2l2340 15D4                       i2l2342 15E4  
                     i2l2344 15E8                       i2l1480 1640                       i2l1482 1650  
                     i2l1476 162C                       i2l1478 163C                       i2l2670 0038  
                     i2l2672 004C                       i2l2664 0012                       i2l2666 0022  
                     i2l2668 0028                       _RG6PPS 000E88                    ??_HighISR 0003  
   __end_of_color_click_init 15D4                       _RX4PPS 000E15                       _TX4REG 000EE4  
               _CCPTMRS0bits 000FAD             _getCharFromTxBuf 15D4                       ___wmul 167C  
                  ??___lwdiv 000F                       clear_0 157C                       clear_1 1588  
                     isa$std 000001                main@motorLeft 00A5                 __pdataCOMRAM 0048  
               __mediumconst 0000                       tblptrh 000FF7                       tblptrl 000FF6  
                     tblptru 000FF8                    ??_reverse 001C                       stop@mL 0018  
                     stop@mR 001A            ??_initDCmotorsPWM 0007        __end_of_isDataInTxBuf 16FA  
                 __accesstop 0060      __end_of__initialization 158E                ___rparam_used 000001  
             __pcstackCOMRAM 0001                ?_DCmotorsInit 0005           _reverseSquareRight 13BC  
                 __pbssBANK0 0060          ?_reverseSquareRight 0024            _color_writetoaddr 16C2  
               _T2CLKCONbits 000FBF               ??_DCmotorsInit 0009           ?_color_writetoaddr 0007  
                    ?___wmul 0005          ??_color_writetoaddr 0008         ??_reverseSquareRight 0028  
                    _SP4BRGH 000EE6                      _SP4BRGL 000EE5                      i2u23_40 163C  
                    i2u23_41 1638                      i2u26_40 16F6                      i2u26_41 16F0  
                    i2u27_40 16F8                      _SSP2ADD 000ED6                      _SSP2BUF 000ED5  
     color_writetoaddr@value 0007                      _HighISR 0008    __end_of_color_writetoaddr 16E2  
         _I2C_2_Master_Start 1710                   _initUSART4 16A2           _I2C_2_Master_Write 16FA  
                    __Hparam 0000                      __Lparam 0000          ?_I2C_2_Master_Start 0001  
                    ___lwdiv 14E2          ?_I2C_2_Master_Write 0001                   _off_period 0040  
               __psmallconst 0E00                      __pcinit 1556                      __ramtop 0E00  
                    __ptext0 1310                      __ptext1 13BC                      __ptext2 0F7C  
                    __ptext3 1262                      __ptext4 10BA                      __ptext5 0E10  
                    __ptext6 167C                      __ptext7 14E2                      __ptext8 16A2  
                    __ptext9 1452                    _T2CONbits 000FBD                    _T2HLTbits 000FBE  
                    _reverse 10BA                _RxBufWriteCnt 0047     __end_of_getCharFromTxBuf 1600  
             main@motorRight 009C         ??_I2C_2_Master_Start 0006         ??_I2C_2_Master_Write 0006  
       end_of_initialization 158E               DCmotorsInit@mL 0005               DCmotorsInit@mR 0007  
          ?_color_click_init 0001           ??_color_click_init 0009                      postdec1 000FE5  
                    postdec2 000FDD                      postinc0 000FEE                      postinc2 000FDE  
            _initDCmotorsPWM 1452                    _PORTFbits 000F8E           setMotorPWM@negDuty 0017  
                  _TRISAbits 000F81           setMotorPWM@posDuty 0016                    _TRISCbits 000F83  
                  _TRISDbits 000F84                    _TRISEbits 000F85                    _TRISFbits 000F86  
                  _TRISGbits 000F87                    _TRISHbits 000F88         __end_of_DCmotorsInit 1262  
   color_writetoaddr@address 0008                  _CCP1CONbits 000FAB                 _EUSART4RXbuf 002C  
               _EUSART4TXbuf 0060                  _CCP2CONbits 000FA7                  _CCP3CONbits 000F26  
                ?_initUSART4 0001                  _CCP4CONbits 000F22               __end_of___wmul 16A2  
              __pidataCOMRAM 171A          start_initialization 1556                _TxBufWriteCnt 0045  
    __end_of_initDCmotorsPWM 14E2                     ??___wmul 0009               _putCharToRxBuf 162A  
                __pbssCOMRAM 002C                __pcstackBANK0 009C                     ?_HighISR 0001  
           ___lwdiv@dividend 000B       __end_of_putCharToRxBuf 1654                    __pintcode 0008  
                   ?___lwdiv 000B                  __smallconst 0E00            _I2C_2_Master_Idle 1654  
              ?_turnRight_90 001E            _I2C_2_Master_Init 1600            _I2C_2_Master_Stop 1706  
               _RxBufReadCnt 0046                     ?_reverse 0018           ?_I2C_2_Master_Idle 0001  
         ?_I2C_2_Master_Init 0001                ??_setMotorPWM 0014           ?_I2C_2_Master_Stop 0001  
           ___lwdiv@quotient 0010     initDCmotorsPWM@PWMperiod 0005            ?_getCharFromTxBuf 0001  
         ??_getCharFromTxBuf 0001          ??_I2C_2_Master_Idle 0005          ??_I2C_2_Master_Init 0005  
             ___wmul@product 0009                     _LATAbits 000F79          ??_I2C_2_Master_Stop 0006  
                   _LATCbits 000F7B                _isDataInTxBuf 16E2                     _LATDbits 000F7C  
                   _LATEbits 000F7D                     _LATFbits 000F7E                    _on_period 0042  
                   _LATGbits 000F7F                     _LATHbits 000F80                     _IPR4bits 000E23  
                   _PIE4bits 000E2D                     i2u148_40 15E4                     i2u148_41 15E0  
                   i2u192_40 0022                     i2u192_41 001E                     i2u193_40 0038  
                   i2u193_41 0034                     i2u194_40 004C                     i2u194_41 0048  
                   _PIR4bits 000E37              ?_putCharToRxBuf 0001             ?_initDCmotorsPWM 0005  
               _DCmotorsInit 1190                     _SSP2CON2 000EDA                     _SSP2STAT 000ED8  
  __end_of_I2C_2_Master_Idle 167C    __end_of_I2C_2_Master_Init 162A            ___wmul@multiplier 0005  
  __end_of_I2C_2_Master_Stop 1710               ??_turnRight_90 0022                 setMotorPWM@m 0012  
I2C_2_Master_Write@data_byte 0006                 _TxBufReadCnt 0044                    copy_data0 156A  
             ?_isDataInTxBuf 0001          __end_of_setMotorPWM 0F7C                 ??_initUSART4 0005  
                   __Hrparam 0000                     __Lrparam 0000                 __Lsmallconst 0E00  
                 _ANSELDbits 000EA7                   _ANSELFbits 000EB4                   _T0CON0bits 000FD5  
                 _T0CON1bits 000FD6              ___lwdiv@divisor 000D           __end_of_initUSART4 16C2  
            ___lwdiv@counter 000F                     __ptext10 15A0                     __ptext11 16C2  
                   __ptext20 16E2                     __ptext12 16FA                     __ptext21 15D4  
                   __ptext13 1706                     __ptext14 1710                     __ptext15 1654  
                   __ptext16 1600                     __ptext17 1190                     __ptext19 162A  
             turnRight_90@mL 001E               turnRight_90@mR 0020                 _SSP2CON1bits 000ED9  
               _SSP2CON2bits 000EDA                    reverse@mL 0018                    reverse@mR 001A  
             _turning_time45 004A                     isa$xinst 000000                   _RC4STAbits 000EE7  
                   int$flags 004C                   _INTCONbits 000FF2                 _reverse_time 0048  
                _setMotorPWM 0E10              ??_isDataInTxBuf 0001                     intlevel2 0000  
       __end_of_turnRight_90 10BA             _color_click_init 15A0                   _SSP2DATPPS 000E1D  
                 _SSP2CLKPPS 000E1C                   _TX4STAbits 000EE8             ??_putCharToRxBuf 0001  

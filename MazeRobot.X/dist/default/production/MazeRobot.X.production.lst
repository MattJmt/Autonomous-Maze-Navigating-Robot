

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Tue Dec 13 12:36:50 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    24                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    25                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    26                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    27                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    28   000000                     
    29                           ; Version 2.35
    30                           ; Generated 05/05/2021 GMT
    31                           ; 
    32                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    33                           ; All rights reserved.
    34                           ; 
    35                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    36                           ; 
    37                           ; Redistribution and use in source and binary forms, with or without modification, are
    38                           ; permitted provided that the following conditions are met:
    39                           ; 
    40                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    41                           ;        conditions and the following disclaimer.
    42                           ; 
    43                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    44                           ;        of conditions and the following disclaimer in the documentation and/or other
    45                           ;        materials provided with the distribution. Publication is not required when
    46                           ;        this file is used in an embedded application.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC18F67K40 Definitions
    62                           ; 
    63                           ; SFR Addresses
    64   000000                     
    65                           	psect	idataCOMRAM
    66   00081C                     __pidataCOMRAM:
    67                           	callstack 0
    68                           
    69                           ;initializer for _reverse_time
    70   00081C  00C8               	dw	200
    71                           
    72                           ;initializer for _turning_time45
    73   00081E  0074               	dw	116
    74   000000                     _TRISFbits	set	3974
    75   000000                     _TRISGbits	set	3975
    76   000000                     _TRISEbits	set	3973
    77   000000                     _SSP2CON2bits	set	3802
    78   000000                     _SSP2CLKPPS	set	3612
    79   000000                     _SSP2DATPPS	set	3613
    80   000000                     _ANSELDbits	set	3751
    81   000000                     _SSP2ADD	set	3798
    82   000000                     _SSP2CON1bits	set	3801
    83   000000                     _LATCbits	set	3963
    84   000000                     _LATEbits	set	3965
    85   000000                     _SSP2CON2	set	3802
    86   000000                     _TRISDbits	set	3972
    87   000000                     _CCPR4H	set	3873
    88   000000                     _CCPR3H	set	3877
    89   000000                     _SSP2STAT	set	3800
    90   000000                     _ANSELFbits	set	3764
    91   000000                     _SSP2BUF	set	3797
    92   000000                     _PIE0bits	set	3625
    93   000000                     _RC7PPS	set	3689
    94   000000                     _RD5PPS	set	3695
    95   000000                     _RE2PPS	set	3700
    96   000000                     _RD6PPS	set	3696
    97   000000                     _LATGbits	set	3967
    98   000000                     _TRISCbits	set	3971
    99   000000                     _PORTFbits	set	3982
   100   000000                     _T2PR	set	4028
   101   000000                     _T2CONbits	set	4029
   102   000000                     _CCPR2H	set	4006
   103   000000                     _CCPR1H	set	4010
   104   000000                     _RE4PPS	set	3702
   105   000000                     _RG6PPS	set	3720
   106   000000                     _TMR0L	set	4051
   107   000000                     _TMR0H	set	4052
   108   000000                     _T0CON0bits	set	4053
   109   000000                     _T0CON1bits	set	4054
   110   000000                     _T2CLKCONbits	set	4031
   111   000000                     _T2HLTbits	set	4030
   112   000000                     _CCP1CONbits	set	4011
   113   000000                     _CCPTMRS0bits	set	4013
   114   000000                     _CCP2CONbits	set	4007
   115   000000                     _CCP3CONbits	set	3878
   116   000000                     _CCP4CONbits	set	3874
   117   000000                     _INTCONbits	set	4082
   118   000000                     _PIR0bits	set	3635
   119                           
   120                           ; #config settings
   121                           
   122                           	psect	cinit
   123   00078E                     __pcinit:
   124                           	callstack 0
   125   00078E                     start_initialization:
   126                           	callstack 0
   127   00078E                     __initialization:
   128                           	callstack 0
   129                           
   130                           ; Initialize objects allocated to COMRAM (4 bytes)
   131                           ; load TBLPTR registers with __pidataCOMRAM
   132   00078E  0E1C               	movlw	low __pidataCOMRAM
   133   000790  6EF6               	movwf	tblptrl,c
   134   000792  0E08               	movlw	high __pidataCOMRAM
   135   000794  6EF7               	movwf	tblptrh,c
   136   000796  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   137   000798  6EF8               	movwf	tblptru,c
   138   00079A  EE00  F03A         	lfsr	0,__pdataCOMRAM
   139   00079E  EE10 F004          	lfsr	1,4
   140   0007A2                     copy_data0:
   141   0007A2  0009               	tblrd		*+
   142   0007A4  CFF5 FFEE          	movff	tablat,postinc0
   143   0007A8  50E5               	movf	postdec1,w,c
   144   0007AA  50E1               	movf	fsr1l,w,c
   145   0007AC  E1FA               	bnz	copy_data0
   146                           
   147                           ; Clear objects allocated to COMRAM (4 bytes)
   148   0007AE  6A39               	clrf	(__pbssCOMRAM+3)& (0+255),c
   149   0007B0  6A38               	clrf	(__pbssCOMRAM+2)& (0+255),c
   150   0007B2  6A37               	clrf	(__pbssCOMRAM+1)& (0+255),c
   151   0007B4  6A36               	clrf	__pbssCOMRAM& (0+255),c
   152   0007B6                     end_of_initialization:
   153                           	callstack 0
   154   0007B6                     __end_of__initialization:
   155                           	callstack 0
   156   0007B6  903E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   157   0007B8  923E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   158   0007BA  0100               	movlb	0
   159   0007BC  EF8B  F001         	goto	_main	;jump to C main() function
   160                           
   161                           	psect	bssCOMRAM
   162   000036                     __pbssCOMRAM:
   163                           	callstack 0
   164   000036                     _off_period:
   165                           	callstack 0
   166   000036                     	ds	2
   167   000038                     _on_period:
   168                           	callstack 0
   169   000038                     	ds	2
   170                           
   171                           	psect	dataCOMRAM
   172   00003A                     __pdataCOMRAM:
   173                           	callstack 0
   174   00003A                     _reverse_time:
   175                           	callstack 0
   176   00003A                     	ds	2
   177   00003C                     _turning_time45:
   178                           	callstack 0
   179   00003C                     	ds	2
   180                           
   181                           	psect	cstackCOMRAM
   182   000001                     __pcstackCOMRAM:
   183                           	callstack 0
   184   000001                     write16bitTMR0val@tmp:
   185                           	callstack 0
   186                           
   187                           ; 2 bytes @ 0x0
   188   000001                     	ds	2
   189   000003                     ?___wmul:
   190                           	callstack 0
   191   000003                     initDCmotorsPWM@PWMperiod:
   192                           	callstack 0
   193   000003                     ___wmul@multiplier:
   194                           	callstack 0
   195                           
   196                           ; 2 bytes @ 0x2
   197   000003                     	ds	2
   198   000005                     ___wmul@multiplicand:
   199                           	callstack 0
   200                           
   201                           ; 2 bytes @ 0x4
   202   000005                     	ds	2
   203   000007                     ___wmul@product:
   204                           	callstack 0
   205                           
   206                           ; 2 bytes @ 0x6
   207   000007                     	ds	2
   208   000009                     ?___lwdiv:
   209                           	callstack 0
   210   000009                     ___lwdiv@dividend:
   211                           	callstack 0
   212                           
   213                           ; 2 bytes @ 0x8
   214   000009                     	ds	2
   215   00000B                     ___lwdiv@divisor:
   216                           	callstack 0
   217                           
   218                           ; 2 bytes @ 0xA
   219   00000B                     	ds	2
   220   00000D                     ___lwdiv@quotient:
   221                           	callstack 0
   222                           
   223                           ; 2 bytes @ 0xC
   224   00000D                     	ds	2
   225   00000F                     ___lwdiv@counter:
   226                           	callstack 0
   227                           
   228                           ; 1 bytes @ 0xE
   229   00000F                     	ds	1
   230   000010                     setMotorPWM@m:
   231                           	callstack 0
   232                           
   233                           ; 2 bytes @ 0xF
   234   000010                     	ds	2
   235   000012                     ??_setMotorPWM:
   236                           
   237                           ; 1 bytes @ 0x11
   238   000012                     	ds	2
   239   000014                     setMotorPWM@posDuty:
   240                           	callstack 0
   241                           
   242                           ; 1 bytes @ 0x13
   243   000014                     	ds	1
   244   000015                     setMotorPWM@negDuty:
   245                           	callstack 0
   246                           
   247                           ; 1 bytes @ 0x14
   248   000015                     	ds	1
   249   000016                     stop@mL:
   250                           	callstack 0
   251   000016                     forward@mL:
   252                           	callstack 0
   253   000016                     reverse@mL:
   254                           	callstack 0
   255                           
   256                           ; 2 bytes @ 0x15
   257   000016                     	ds	2
   258   000018                     stop@mR:
   259                           	callstack 0
   260   000018                     forward@mR:
   261                           	callstack 0
   262   000018                     reverse@mR:
   263                           	callstack 0
   264                           
   265                           ; 2 bytes @ 0x17
   266   000018                     	ds	2
   267   00001A                     
   268                           ; 1 bytes @ 0x19
   269   00001A                     	ds	1
   270   00001B                     turnLeft@mL:
   271                           	callstack 0
   272                           
   273                           ; 2 bytes @ 0x1A
   274   00001B                     	ds	2
   275   00001D                     turnLeft@mR:
   276                           	callstack 0
   277                           
   278                           ; 2 bytes @ 0x1C
   279   00001D                     	ds	2
   280   00001F                     ??_turnLeft:
   281                           
   282                           ; 1 bytes @ 0x1E
   283   00001F                     	ds	2
   284   000021                     ??_main:
   285                           
   286                           ; 1 bytes @ 0x20
   287   000021                     	ds	2
   288   000023                     main@count:
   289                           	callstack 0
   290                           
   291                           ; 1 bytes @ 0x22
   292   000023                     	ds	1
   293   000024                     main@motorRight:
   294                           	callstack 0
   295                           
   296                           ; 9 bytes @ 0x23
   297   000024                     	ds	9
   298   00002D                     main@motorLeft:
   299                           	callstack 0
   300                           
   301                           ; 9 bytes @ 0x2C
   302   00002D                     	ds	9
   303                           
   304 ;;
   305 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   306 ;;
   307 ;; *************** function _main *****************
   308 ;; Defined at:
   309 ;;		line 16 in file "main.c"
   310 ;; Parameters:    Size  Location     Type
   311 ;;		None
   312 ;; Auto vars:     Size  Location     Type
   313 ;;  motorLeft       9   44[COMRAM] struct DC_motor
   314 ;;  motorRight      9   35[COMRAM] struct DC_motor
   315 ;;  count           1   34[COMRAM] unsigned char 
   316 ;; Return value:  Size  Location     Type
   317 ;;                  1    wreg      void 
   318 ;; Registers used:
   319 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   320 ;; Tracked objects:
   321 ;;		On entry : 0/0
   322 ;;		On exit  : 0/0
   323 ;;		Unchanged: 0/0
   324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   326 ;;      Locals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   327 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   328 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   329 ;;Total ram usage:       21 bytes
   330 ;; Hardware stack levels required when called: 6
   331 ;; This function calls:
   332 ;;		_Interrupts_init
   333 ;;		_Timer0_init
   334 ;;		_forward
   335 ;;		_initDCmotorsPWM
   336 ;;		_reverse
   337 ;;		_stop
   338 ;;		_turnLeft
   339 ;; This function is called by:
   340 ;;		Startup code after reset
   341 ;; This function uses a non-reentrant model
   342 ;;
   343                           
   344                           	psect	text0
   345   000316                     __ptext0:
   346                           	callstack 0
   347   000316                     _main:
   348                           	callstack 25
   349   000316                     
   350                           ;main.c: 17:     Timer0_init();
   351   000316  ECF3  F003         	call	_Timer0_init	;wreg free
   352   00031A                     
   353                           ;main.c: 18:     Interrupts_init();
   354   00031A  EC03  F004         	call	_Interrupts_init	;wreg free
   355   00031E                     
   356                           ;main.c: 19:     initDCmotorsPWM(199);
   357   00031E  0E00               	movlw	0
   358   000320  6E04               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   359   000322  0EC7               	movlw	199
   360   000324  6E03               	movwf	initDCmotorsPWM@PWMperiod^0,c
   361   000326  EC45  F003         	call	_initDCmotorsPWM	;wreg free
   362   00032A                     
   363                           ;main.c: 21:     TRISCbits.TRISC5 = 0;
   364   00032A  9A83               	bcf	131,5,c	;volatile
   365   00032C                     
   366                           ;main.c: 24:     DC_motor motorLeft,motorRight;;main.c: 26:     motorLeft.power = 0;
   367   00032C  0E00               	movlw	0
   368   00032E  6E2D               	movwf	main@motorLeft^0,c
   369   000330                     
   370                           ;main.c: 27:     motorLeft.direction = 1;
   371   000330  0E01               	movlw	1
   372   000332  6E2E               	movwf	(main@motorLeft+1)^0,c
   373   000334                     
   374                           ;main.c: 28:     motorLeft.brakemode = 1;
   375   000334  0E01               	movlw	1
   376   000336  6E2F               	movwf	(main@motorLeft+2)^0,c
   377   000338                     
   378                           ;main.c: 29:     motorLeft.posDutyHighByte = (unsigned char *)(&CCPR1H);
   379   000338  0EAA               	movlw	170
   380   00033A  6E32               	movwf	(main@motorLeft+5)^0,c
   381   00033C  0E0F               	movlw	15
   382   00033E  6E33               	movwf	(main@motorLeft+6)^0,c
   383   000340                     
   384                           ;main.c: 30:     motorLeft.negDutyHighByte = (unsigned char *)(&CCPR2H);
   385   000340  0EA6               	movlw	166
   386   000342  6E34               	movwf	(main@motorLeft+7)^0,c
   387   000344  0E0F               	movlw	15
   388   000346  6E35               	movwf	(main@motorLeft+8)^0,c
   389   000348                     
   390                           ;main.c: 31:     motorLeft.PWMperiod = 199 ;
   391   000348  0E00               	movlw	0
   392   00034A  6E31               	movwf	(main@motorLeft+4)^0,c
   393   00034C  0EC7               	movlw	199
   394   00034E  6E30               	movwf	(main@motorLeft+3)^0,c
   395   000350                     
   396                           ;main.c: 33:     motorRight.power = 0;
   397   000350  0E00               	movlw	0
   398   000352  6E24               	movwf	main@motorRight^0,c
   399   000354                     
   400                           ;main.c: 34:     motorRight.direction = 1;
   401   000354  0E01               	movlw	1
   402   000356  6E25               	movwf	(main@motorRight+1)^0,c
   403   000358                     
   404                           ;main.c: 35:     motorRight.brakemode = 1;
   405   000358  0E01               	movlw	1
   406   00035A  6E26               	movwf	(main@motorRight+2)^0,c
   407   00035C                     
   408                           ;main.c: 36:     motorRight.posDutyHighByte = (unsigned char *)(&CCPR3H);
   409   00035C  0E25               	movlw	37
   410   00035E  6E29               	movwf	(main@motorRight+5)^0,c
   411   000360  0E0F               	movlw	15
   412   000362  6E2A               	movwf	(main@motorRight+6)^0,c
   413   000364                     
   414                           ;main.c: 37:     motorRight.negDutyHighByte = (unsigned char *)(&CCPR4H);
   415   000364  0E21               	movlw	33
   416   000366  6E2B               	movwf	(main@motorRight+7)^0,c
   417   000368  0E0F               	movlw	15
   418   00036A  6E2C               	movwf	(main@motorRight+8)^0,c
   419   00036C                     
   420                           ;main.c: 38:     motorRight.PWMperiod = 199 ;
   421   00036C  0E00               	movlw	0
   422   00036E  6E28               	movwf	(main@motorRight+4)^0,c
   423   000370  0EC7               	movlw	199
   424   000372  6E27               	movwf	(main@motorRight+3)^0,c
   425   000374                     
   426                           ;main.c: 40:     char count = 0;
   427   000374  0E00               	movlw	0
   428   000376  6E23               	movwf	main@count^0,c
   429   000378                     
   430                           ;main.c: 42:     TRISFbits.TRISF2=1;
   431   000378  8486               	bsf	134,2,c	;volatile
   432   00037A                     
   433                           ;main.c: 43:     ANSELFbits.ANSELF2=0;
   434   00037A  010E               	movlb	14	; () banked
   435   00037C  95B4               	bcf	180,2,b	;volatile
   436   00037E                     
   437                           ; BSR set to: 14
   438                           ;main.c: 45:     if (!PORTFbits.RF2){
   439   00037E  B48E               	btfsc	142,2,c	;volatile
   440   000380  EFC4  F001         	goto	u801
   441   000384  EFC6  F001         	goto	u800
   442   000388                     u801:
   443   000388  EF22  F002         	goto	l232
   444   00038C                     u800:
   445   00038C                     l1667:
   446   00038C                     
   447                           ;main.c: 49:             reverse(&motorLeft,&motorRight);
   448   00038C  0E2D               	movlw	low main@motorLeft
   449   00038E  6E16               	movwf	reverse@mL^0,c
   450   000390  0E00               	movlw	high main@motorLeft
   451   000392  6E17               	movwf	(reverse@mL+1)^0,c
   452   000394  0E24               	movlw	low main@motorRight
   453   000396  6E18               	movwf	reverse@mR^0,c
   454   000398  0E00               	movlw	high main@motorRight
   455   00039A  6E19               	movwf	(reverse@mR+1)^0,c
   456   00039C  EC24  F002         	call	_reverse	;wreg free
   457   0003A0                     
   458                           ;main.c: 50:             _delay((unsigned long)((500)*(64000000/4000.0)));
   459   0003A0  0E29               	movlw	41
   460   0003A2  6E22               	movwf	(??_main+1)^0,c
   461   0003A4  0E96               	movlw	150
   462   0003A6  6E21               	movwf	??_main^0,c
   463   0003A8  0E7F               	movlw	127
   464   0003AA                     u837:
   465   0003AA  2EE8               	decfsz	wreg,f,c
   466   0003AC  D7FE               	bra	u837
   467   0003AE  2E21               	decfsz	??_main^0,f,c
   468   0003B0  D7FC               	bra	u837
   469   0003B2  2E22               	decfsz	(??_main+1)^0,f,c
   470   0003B4  D7FA               	bra	u837
   471   0003B6  F000               	nop	
   472   0003B8                     
   473                           ;main.c: 52:             count++;
   474   0003B8  2A23               	incf	main@count^0,f,c
   475   0003BA                     
   476                           ;main.c: 54:             stop(&motorLeft,&motorRight);
   477   0003BA  0E2D               	movlw	low main@motorLeft
   478   0003BC  6E16               	movwf	stop@mL^0,c
   479   0003BE  0E00               	movlw	high main@motorLeft
   480   0003C0  6E17               	movwf	(stop@mL+1)^0,c
   481   0003C2  0E24               	movlw	low main@motorRight
   482   0003C4  6E18               	movwf	stop@mR^0,c
   483   0003C6  0E00               	movlw	high main@motorRight
   484   0003C8  6E19               	movwf	(stop@mR+1)^0,c
   485   0003CA  ECFA  F002         	call	_stop	;wreg free
   486   0003CE                     
   487                           ;main.c: 55:             _delay((unsigned long)((300)*(64000000/4000.0)));
   488   0003CE  0E19               	movlw	25
   489   0003D0  6E22               	movwf	(??_main+1)^0,c
   490   0003D2  0E5A               	movlw	90
   491   0003D4  6E21               	movwf	??_main^0,c
   492   0003D6  0EB2               	movlw	178
   493   0003D8                     u847:
   494   0003D8  2EE8               	decfsz	wreg,f,c
   495   0003DA  D7FE               	bra	u847
   496   0003DC  2E21               	decfsz	??_main^0,f,c
   497   0003DE  D7FC               	bra	u847
   498   0003E0  2E22               	decfsz	(??_main+1)^0,f,c
   499   0003E2  D7FA               	bra	u847
   500   0003E4                     
   501                           ;main.c: 57:             forward(&motorLeft,&motorRight);
   502   0003E4  0E2D               	movlw	low main@motorLeft
   503   0003E6  6E16               	movwf	forward@mL^0,c
   504   0003E8  0E00               	movlw	high main@motorLeft
   505   0003EA  6E17               	movwf	(forward@mL+1)^0,c
   506   0003EC  0E24               	movlw	low main@motorRight
   507   0003EE  6E18               	movwf	forward@mR^0,c
   508   0003F0  0E00               	movlw	high main@motorRight
   509   0003F2  6E19               	movwf	(forward@mR+1)^0,c
   510   0003F4  EC8F  F002         	call	_forward	;wreg free
   511   0003F8                     
   512                           ;main.c: 58:             _delay((unsigned long)((500)*(64000000/4000.0)));
   513   0003F8  0E29               	movlw	41
   514   0003FA  6E22               	movwf	(??_main+1)^0,c
   515   0003FC  0E96               	movlw	150
   516   0003FE  6E21               	movwf	??_main^0,c
   517   000400  0E7F               	movlw	127
   518   000402                     u857:
   519   000402  2EE8               	decfsz	wreg,f,c
   520   000404  D7FE               	bra	u857
   521   000406  2E21               	decfsz	??_main^0,f,c
   522   000408  D7FC               	bra	u857
   523   00040A  2E22               	decfsz	(??_main+1)^0,f,c
   524   00040C  D7FA               	bra	u857
   525   00040E  F000               	nop	
   526   000410                     
   527                           ;main.c: 60:             turnLeft(&motorLeft,&motorRight);
   528   000410  0E2D               	movlw	low main@motorLeft
   529   000412  6E1B               	movwf	turnLeft@mL^0,c
   530   000414  0E00               	movlw	high main@motorLeft
   531   000416  6E1C               	movwf	(turnLeft@mL+1)^0,c
   532   000418  0E24               	movlw	low main@motorRight
   533   00041A  6E1D               	movwf	turnLeft@mR^0,c
   534   00041C  0E00               	movlw	high main@motorRight
   535   00041E  6E1E               	movwf	(turnLeft@mR+1)^0,c
   536   000420  ECE0  F000         	call	_turnLeft	;wreg free
   537   000424                     
   538                           ;main.c: 61:             _delay((unsigned long)((200)*(64000000/4000.0)));
   539   000424  0E11               	movlw	17
   540   000426  6E22               	movwf	(??_main+1)^0,c
   541   000428  0E3C               	movlw	60
   542   00042A  6E21               	movwf	??_main^0,c
   543   00042C  0ECB               	movlw	203
   544   00042E                     u867:
   545   00042E  2EE8               	decfsz	wreg,f,c
   546   000430  D7FE               	bra	u867
   547   000432  2E21               	decfsz	??_main^0,f,c
   548   000434  D7FC               	bra	u867
   549   000436  2E22               	decfsz	(??_main+1)^0,f,c
   550   000438  D7FA               	bra	u867
   551   00043A  F000               	nop	
   552   00043C                     
   553                           ;main.c: 63:             count = 0;
   554   00043C  0E00               	movlw	0
   555   00043E  6E23               	movwf	main@count^0,c
   556   000440  EFC6  F001         	goto	l1667
   557   000444                     l232:
   558                           
   559                           ; BSR set to: 14
   560   000444  EF28  F000         	goto	start
   561   000448                     __end_of_main:
   562                           	callstack 0
   563                           
   564 ;; *************** function _turnLeft *****************
   565 ;; Defined at:
   566 ;;		line 161 in file "dc_motor.c"
   567 ;; Parameters:    Size  Location     Type
   568 ;;  mL              2   26[COMRAM] PTR struct DC_motor
   569 ;;		 -> main@motorLeft(9), 
   570 ;;  mR              2   28[COMRAM] PTR struct DC_motor
   571 ;;		 -> main@motorRight(9), 
   572 ;; Auto vars:     Size  Location     Type
   573 ;;		None
   574 ;; Return value:  Size  Location     Type
   575 ;;                  1    wreg      void 
   576 ;; Registers used:
   577 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   578 ;; Tracked objects:
   579 ;;		On entry : 0/0
   580 ;;		On exit  : 0/0
   581 ;;		Unchanged: 0/0
   582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   583 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   584 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   585 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   586 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   587 ;;Total ram usage:        6 bytes
   588 ;; Hardware stack levels used: 1
   589 ;; Hardware stack levels required when called: 5
   590 ;; This function calls:
   591 ;;		_reverse
   592 ;;		_setMotorPWM
   593 ;;		_stop
   594 ;; This function is called by:
   595 ;;		_main
   596 ;; This function uses a non-reentrant model
   597 ;;
   598                           
   599                           	psect	text1
   600   0001C0                     __ptext1:
   601                           	callstack 0
   602   0001C0                     _turnLeft:
   603                           	callstack 25
   604   0001C0                     
   605                           ;dc_motor.c: 161: void turnLeft(DC_motor *mL, DC_motor *mR);dc_motor.c: 162: {;dc_motor.
      +                          c: 164:     stop(mL, mR);
   606   0001C0  C01B  F016         	movff	turnLeft@mL,stop@mL
   607   0001C4  C01C  F017         	movff	turnLeft@mL+1,stop@mL+1
   608   0001C8  C01D  F018         	movff	turnLeft@mR,stop@mR
   609   0001CC  C01E  F019         	movff	turnLeft@mR+1,stop@mR+1
   610   0001D0  ECFA  F002         	call	_stop	;wreg free
   611   0001D4                     
   612                           ;dc_motor.c: 165:     _delay((unsigned long)((100)*(64000000/4000.0)));
   613   0001D4  0E09               	movlw	9
   614   0001D6  6E20               	movwf	(??_turnLeft+1)^0,c
   615   0001D8  0E1E               	movlw	30
   616   0001DA  6E1F               	movwf	??_turnLeft^0,c
   617   0001DC  0EE4               	movlw	228
   618   0001DE                     u877:
   619   0001DE  2EE8               	decfsz	wreg,f,c
   620   0001E0  D7FE               	bra	u877
   621   0001E2  2E1F               	decfsz	??_turnLeft^0,f,c
   622   0001E4  D7FC               	bra	u877
   623   0001E6  2E20               	decfsz	(??_turnLeft+1)^0,f,c
   624   0001E8  D7FA               	bra	u877
   625   0001EA  D000               	nop2	
   626   0001EC                     
   627                           ;dc_motor.c: 167:     reverse(mL, mR);
   628   0001EC  C01B  F016         	movff	turnLeft@mL,reverse@mL
   629   0001F0  C01C  F017         	movff	turnLeft@mL+1,reverse@mL+1
   630   0001F4  C01D  F018         	movff	turnLeft@mR,reverse@mR
   631   0001F8  C01E  F019         	movff	turnLeft@mR+1,reverse@mR+1
   632   0001FC  EC24  F002         	call	_reverse	;wreg free
   633                           
   634                           ;dc_motor.c: 168:     _delay((unsigned long)((reverse_time)*(64000000/4000.0)));
   635   000200  0E11               	movlw	17
   636   000202  6E20               	movwf	(??_turnLeft+1)^0,c
   637   000204  0E3C               	movlw	60
   638   000206  6E1F               	movwf	??_turnLeft^0,c
   639   000208  0ECB               	movlw	203
   640   00020A                     u887:
   641   00020A  2EE8               	decfsz	wreg,f,c
   642   00020C  D7FE               	bra	u887
   643   00020E  2E1F               	decfsz	??_turnLeft^0,f,c
   644   000210  D7FC               	bra	u887
   645   000212  2E20               	decfsz	(??_turnLeft+1)^0,f,c
   646   000214  D7FA               	bra	u887
   647   000216  F000               	nop	
   648   000218                     
   649                           ;dc_motor.c: 170:     stop(mL, mR);
   650   000218  C01B  F016         	movff	turnLeft@mL,stop@mL
   651   00021C  C01C  F017         	movff	turnLeft@mL+1,stop@mL+1
   652   000220  C01D  F018         	movff	turnLeft@mR,stop@mR
   653   000224  C01E  F019         	movff	turnLeft@mR+1,stop@mR+1
   654   000228  ECFA  F002         	call	_stop	;wreg free
   655   00022C                     
   656                           ;dc_motor.c: 171:     _delay((unsigned long)((100)*(64000000/4000.0)));
   657   00022C  0E09               	movlw	9
   658   00022E  6E20               	movwf	(??_turnLeft+1)^0,c
   659   000230  0E1E               	movlw	30
   660   000232  6E1F               	movwf	??_turnLeft^0,c
   661   000234  0EE4               	movlw	228
   662   000236                     u897:
   663   000236  2EE8               	decfsz	wreg,f,c
   664   000238  D7FE               	bra	u897
   665   00023A  2E1F               	decfsz	??_turnLeft^0,f,c
   666   00023C  D7FC               	bra	u897
   667   00023E  2E20               	decfsz	(??_turnLeft+1)^0,f,c
   668   000240  D7FA               	bra	u897
   669   000242  D000               	nop2	
   670   000244                     
   671                           ;dc_motor.c: 173:     mL->direction = 0;
   672   000244  EE20 F001          	lfsr	2,1
   673   000248  501B               	movf	turnLeft@mL^0,w,c
   674   00024A  26D9               	addwf	fsr2l,f,c
   675   00024C  501C               	movf	(turnLeft@mL+1)^0,w,c
   676   00024E  22DA               	addwfc	fsr2h,f,c
   677   000250  0E00               	movlw	0
   678   000252  6EDF               	movwf	indf2,c
   679   000254                     
   680                           ;dc_motor.c: 174:     mR->direction = 1;
   681   000254  EE20 F001          	lfsr	2,1
   682   000258  501D               	movf	turnLeft@mR^0,w,c
   683   00025A  26D9               	addwf	fsr2l,f,c
   684   00025C  501E               	movf	(turnLeft@mR+1)^0,w,c
   685   00025E  22DA               	addwfc	fsr2h,f,c
   686   000260  0E01               	movlw	1
   687   000262  6EDF               	movwf	indf2,c
   688   000264                     
   689                           ;dc_motor.c: 176:     mL->brakemode = 1;
   690   000264  EE20 F002          	lfsr	2,2
   691   000268  501B               	movf	turnLeft@mL^0,w,c
   692   00026A  26D9               	addwf	fsr2l,f,c
   693   00026C  501C               	movf	(turnLeft@mL+1)^0,w,c
   694   00026E  22DA               	addwfc	fsr2h,f,c
   695   000270  0E01               	movlw	1
   696   000272  6EDF               	movwf	indf2,c
   697   000274                     
   698                           ;dc_motor.c: 177:     mL->brakemode = 1;
   699   000274  EE20 F002          	lfsr	2,2
   700   000278  501B               	movf	turnLeft@mL^0,w,c
   701   00027A  26D9               	addwf	fsr2l,f,c
   702   00027C  501C               	movf	(turnLeft@mL+1)^0,w,c
   703   00027E  22DA               	addwfc	fsr2h,f,c
   704   000280  0E01               	movlw	1
   705   000282  6EDF               	movwf	indf2,c
   706                           
   707                           ;dc_motor.c: 179:    while ((mR->power) < 70){
   708   000284  EF50  F001         	goto	l1613
   709   000288                     l1611:
   710                           
   711                           ;dc_motor.c: 180:         mR->power += 5;
   712   000288  C01D  FFD9         	movff	turnLeft@mR,fsr2l
   713   00028C  C01E  FFDA         	movff	turnLeft@mR+1,fsr2h
   714   000290  0E05               	movlw	5
   715   000292  26DF               	addwf	indf2,f,c
   716                           
   717                           ;dc_motor.c: 181:         mL->power += 5;
   718   000294  C01B  FFD9         	movff	turnLeft@mL,fsr2l
   719   000298  C01C  FFDA         	movff	turnLeft@mL+1,fsr2h
   720   00029C  0E05               	movlw	5
   721   00029E  26DF               	addwf	indf2,f,c
   722   0002A0                     l1613:
   723                           
   724                           ;dc_motor.c: 179:    while ((mR->power) < 70){
   725   0002A0  C01D  FFD9         	movff	turnLeft@mR,fsr2l
   726   0002A4  C01E  FFDA         	movff	turnLeft@mR+1,fsr2h
   727   0002A8  0E45               	movlw	69
   728   0002AA  64DF               	cpfsgt	indf2,c
   729   0002AC  EF5A  F001         	goto	u791
   730   0002B0  EF5C  F001         	goto	u790
   731   0002B4                     u791:
   732   0002B4  EF44  F001         	goto	l1611
   733   0002B8                     u790:
   734   0002B8                     
   735                           ;dc_motor.c: 183:    _delay((unsigned long)((turning_time45)*(64000000/4000.0)));
   736   0002B8  0E0A               	movlw	10
   737   0002BA  6E20               	movwf	(??_turnLeft+1)^0,c
   738   0002BC  0E6B               	movlw	107
   739   0002BE  6E1F               	movwf	??_turnLeft^0,c
   740   0002C0  0E5B               	movlw	91
   741   0002C2                     u907:
   742   0002C2  2EE8               	decfsz	wreg,f,c
   743   0002C4  D7FE               	bra	u907
   744   0002C6  2E1F               	decfsz	??_turnLeft^0,f,c
   745   0002C8  D7FC               	bra	u907
   746   0002CA  2E20               	decfsz	(??_turnLeft+1)^0,f,c
   747   0002CC  D7FA               	bra	u907
   748   0002CE  F000               	nop	
   749   0002D0                     
   750                           ;dc_motor.c: 185:     stop(mL, mR);
   751   0002D0  C01B  F016         	movff	turnLeft@mL,stop@mL
   752   0002D4  C01C  F017         	movff	turnLeft@mL+1,stop@mL+1
   753   0002D8  C01D  F018         	movff	turnLeft@mR,stop@mR
   754   0002DC  C01E  F019         	movff	turnLeft@mR+1,stop@mR+1
   755   0002E0  ECFA  F002         	call	_stop	;wreg free
   756   0002E4                     
   757                           ;dc_motor.c: 186:     _delay((unsigned long)((100)*(64000000/4000.0)));
   758   0002E4  0E09               	movlw	9
   759   0002E6  6E20               	movwf	(??_turnLeft+1)^0,c
   760   0002E8  0E1E               	movlw	30
   761   0002EA  6E1F               	movwf	??_turnLeft^0,c
   762   0002EC  0EE4               	movlw	228
   763   0002EE                     u917:
   764   0002EE  2EE8               	decfsz	wreg,f,c
   765   0002F0  D7FE               	bra	u917
   766   0002F2  2E1F               	decfsz	??_turnLeft^0,f,c
   767   0002F4  D7FC               	bra	u917
   768   0002F6  2E20               	decfsz	(??_turnLeft+1)^0,f,c
   769   0002F8  D7FA               	bra	u917
   770   0002FA  D000               	nop2	
   771                           
   772                           ;dc_motor.c: 188:     setMotorPWM(mL);
   773   0002FC  C01B  F010         	movff	turnLeft@mL,setMotorPWM@m
   774   000300  C01C  F011         	movff	turnLeft@mL+1,setMotorPWM@m+1
   775   000304  EC2A  F000         	call	_setMotorPWM	;wreg free
   776                           
   777                           ;dc_motor.c: 189:     setMotorPWM(mR);
   778   000308  C01D  F010         	movff	turnLeft@mR,setMotorPWM@m
   779   00030C  C01E  F011         	movff	turnLeft@mR+1,setMotorPWM@m+1
   780   000310  EC2A  F000         	call	_setMotorPWM	;wreg free
   781   000314  0012               	return		;funcret
   782   000316                     __end_of_turnLeft:
   783                           	callstack 0
   784                           
   785 ;; *************** function _stop *****************
   786 ;; Defined at:
   787 ;;		line 101 in file "dc_motor.c"
   788 ;; Parameters:    Size  Location     Type
   789 ;;  mL              2   21[COMRAM] PTR struct DC_motor
   790 ;;		 -> main@motorLeft(9), 
   791 ;;  mR              2   23[COMRAM] PTR struct DC_motor
   792 ;;		 -> main@motorRight(9), 
   793 ;; Auto vars:     Size  Location     Type
   794 ;;		None
   795 ;; Return value:  Size  Location     Type
   796 ;;                  1    wreg      void 
   797 ;; Registers used:
   798 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   799 ;; Tracked objects:
   800 ;;		On entry : 0/0
   801 ;;		On exit  : 0/0
   802 ;;		Unchanged: 0/0
   803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   804 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   807 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   808 ;;Total ram usage:        4 bytes
   809 ;; Hardware stack levels used: 1
   810 ;; Hardware stack levels required when called: 4
   811 ;; This function calls:
   812 ;;		_setMotorPWM
   813 ;; This function is called by:
   814 ;;		_turnLeft
   815 ;;		_main
   816 ;; This function uses a non-reentrant model
   817 ;;
   818                           
   819                           	psect	text2
   820   0005F4                     __ptext2:
   821                           	callstack 0
   822   0005F4                     _stop:
   823                           	callstack 25
   824   0005F4                     
   825                           ;dc_motor.c: 103:     while ((mL->power)>0 && (mR->power)>0){
   826   0005F4  EF2C  F003         	goto	l1535
   827   0005F8                     l1523:
   828                           
   829                           ;dc_motor.c: 104:         if ((mL->power) >0){
   830   0005F8  C016  FFD9         	movff	stop@mL,fsr2l
   831   0005FC  C017  FFDA         	movff	stop@mL+1,fsr2h
   832   000600  50DF               	movf	indf2,w,c
   833   000602  B4D8               	btfsc	status,2,c
   834   000604  EF06  F003         	goto	u671
   835   000608  EF08  F003         	goto	u670
   836   00060C                     u671:
   837   00060C  EF0E  F003         	goto	l1527
   838   000610                     u670:
   839   000610                     
   840                           ;dc_motor.c: 105:             mL->power -= 5;
   841   000610  C016  FFD9         	movff	stop@mL,fsr2l
   842   000614  C017  FFDA         	movff	stop@mL+1,fsr2h
   843   000618  0E05               	movlw	5
   844   00061A  5EDF               	subwf	indf2,f,c
   845   00061C                     l1527:
   846                           
   847                           ;dc_motor.c: 107:         if ((mR->power) >0){
   848   00061C  C018  FFD9         	movff	stop@mR,fsr2l
   849   000620  C019  FFDA         	movff	stop@mR+1,fsr2h
   850   000624  50DF               	movf	indf2,w,c
   851   000626  B4D8               	btfsc	status,2,c
   852   000628  EF18  F003         	goto	u681
   853   00062C  EF1A  F003         	goto	u680
   854   000630                     u681:
   855   000630  EF20  F003         	goto	l1531
   856   000634                     u680:
   857   000634                     
   858                           ;dc_motor.c: 108:             mR->power -= 5;
   859   000634  C018  FFD9         	movff	stop@mR,fsr2l
   860   000638  C019  FFDA         	movff	stop@mR+1,fsr2h
   861   00063C  0E05               	movlw	5
   862   00063E  5EDF               	subwf	indf2,f,c
   863   000640                     l1531:
   864                           
   865                           ;dc_motor.c: 111:         setMotorPWM(mL);
   866   000640  C016  F010         	movff	stop@mL,setMotorPWM@m
   867   000644  C017  F011         	movff	stop@mL+1,setMotorPWM@m+1
   868   000648  EC2A  F000         	call	_setMotorPWM	;wreg free
   869   00064C                     
   870                           ;dc_motor.c: 112:         setMotorPWM(mR);
   871   00064C  C018  F010         	movff	stop@mR,setMotorPWM@m
   872   000650  C019  F011         	movff	stop@mR+1,setMotorPWM@m+1
   873   000654  EC2A  F000         	call	_setMotorPWM	;wreg free
   874   000658                     l1535:
   875                           
   876                           ;dc_motor.c: 103:     while ((mL->power)>0 && (mR->power)>0){
   877   000658  C016  FFD9         	movff	stop@mL,fsr2l
   878   00065C  C017  FFDA         	movff	stop@mL+1,fsr2h
   879   000660  50DF               	movf	indf2,w,c
   880   000662  B4D8               	btfsc	status,2,c
   881   000664  EF36  F003         	goto	u691
   882   000668  EF38  F003         	goto	u690
   883   00066C                     u691:
   884   00066C  EF44  F003         	goto	l149
   885   000670                     u690:
   886   000670  C018  FFD9         	movff	stop@mR,fsr2l
   887   000674  C019  FFDA         	movff	stop@mR+1,fsr2h
   888   000678  50DF               	movf	indf2,w,c
   889   00067A  A4D8               	btfss	status,2,c
   890   00067C  EF42  F003         	goto	u701
   891   000680  EF44  F003         	goto	u700
   892   000684                     u701:
   893   000684  EFFC  F002         	goto	l1523
   894   000688                     u700:
   895   000688                     l149:
   896   000688  0012               	return		;funcret
   897   00068A                     __end_of_stop:
   898                           	callstack 0
   899                           
   900 ;; *************** function _reverse *****************
   901 ;; Defined at:
   902 ;;		line 139 in file "dc_motor.c"
   903 ;; Parameters:    Size  Location     Type
   904 ;;  mL              2   21[COMRAM] PTR struct DC_motor
   905 ;;		 -> main@motorLeft(9), 
   906 ;;  mR              2   23[COMRAM] PTR struct DC_motor
   907 ;;		 -> main@motorRight(9), 
   908 ;; Auto vars:     Size  Location     Type
   909 ;;		None
   910 ;; Return value:  Size  Location     Type
   911 ;;                  1    wreg      void 
   912 ;; Registers used:
   913 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   914 ;; Tracked objects:
   915 ;;		On entry : 0/0
   916 ;;		On exit  : 0/0
   917 ;;		Unchanged: 0/0
   918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   919 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   920 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   921 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   922 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   923 ;;Total ram usage:        5 bytes
   924 ;; Hardware stack levels used: 1
   925 ;; Hardware stack levels required when called: 4
   926 ;; This function calls:
   927 ;;		_setMotorPWM
   928 ;; This function is called by:
   929 ;;		_turnLeft
   930 ;;		_main
   931 ;; This function uses a non-reentrant model
   932 ;;
   933                           
   934                           	psect	text3
   935   000448                     __ptext3:
   936                           	callstack 0
   937   000448                     _reverse:
   938                           	callstack 25
   939   000448                     
   940                           ;dc_motor.c: 139: void reverse(DC_motor *mL, DC_motor *mR);dc_motor.c: 140: {;dc_motor.c
      +                          : 141:     mL->direction = 0;
   941   000448  EE20 F001          	lfsr	2,1
   942   00044C  5016               	movf	reverse@mL^0,w,c
   943   00044E  26D9               	addwf	fsr2l,f,c
   944   000450  5017               	movf	(reverse@mL+1)^0,w,c
   945   000452  22DA               	addwfc	fsr2h,f,c
   946   000454  0E00               	movlw	0
   947   000456  6EDF               	movwf	indf2,c
   948                           
   949                           ;dc_motor.c: 142:     mR->direction = 0;
   950   000458  EE20 F001          	lfsr	2,1
   951   00045C  5018               	movf	reverse@mR^0,w,c
   952   00045E  26D9               	addwf	fsr2l,f,c
   953   000460  5019               	movf	(reverse@mR+1)^0,w,c
   954   000462  22DA               	addwfc	fsr2h,f,c
   955   000464  0E00               	movlw	0
   956   000466  6EDF               	movwf	indf2,c
   957                           
   958                           ;dc_motor.c: 144:     mL->brakemode = 1;
   959   000468  EE20 F002          	lfsr	2,2
   960   00046C  5016               	movf	reverse@mL^0,w,c
   961   00046E  26D9               	addwf	fsr2l,f,c
   962   000470  5017               	movf	(reverse@mL+1)^0,w,c
   963   000472  22DA               	addwfc	fsr2h,f,c
   964   000474  0E01               	movlw	1
   965   000476  6EDF               	movwf	indf2,c
   966                           
   967                           ;dc_motor.c: 145:     mL->brakemode = 1;
   968   000478  EE20 F002          	lfsr	2,2
   969   00047C  5016               	movf	reverse@mL^0,w,c
   970   00047E  26D9               	addwf	fsr2l,f,c
   971   000480  5017               	movf	(reverse@mL+1)^0,w,c
   972   000482  22DA               	addwfc	fsr2h,f,c
   973   000484  0E01               	movlw	1
   974   000486  6EDF               	movwf	indf2,c
   975                           
   976                           ;dc_motor.c: 147:     while ((mL->power)<25 && (mR->power)<25){
   977   000488  EF6A  F002         	goto	l1549
   978   00048C                     l1541:
   979                           
   980                           ;dc_motor.c: 148:         if ((mL->power) < 25){
   981   00048C  C016  FFD9         	movff	reverse@mL,fsr2l
   982   000490  C017  FFDA         	movff	reverse@mL+1,fsr2h
   983   000494  0E19               	movlw	25
   984   000496  60DF               	cpfslt	indf2,c
   985   000498  EF50  F002         	goto	u711
   986   00049C  EF52  F002         	goto	u710
   987   0004A0                     u711:
   988   0004A0  EF58  F002         	goto	l1545
   989   0004A4                     u710:
   990   0004A4                     
   991                           ;dc_motor.c: 149:             mL->power += 5;
   992   0004A4  C016  FFD9         	movff	reverse@mL,fsr2l
   993   0004A8  C017  FFDA         	movff	reverse@mL+1,fsr2h
   994   0004AC  0E05               	movlw	5
   995   0004AE  26DF               	addwf	indf2,f,c
   996   0004B0                     l1545:
   997                           
   998                           ;dc_motor.c: 151:         if ((mR->power) <25){
   999   0004B0  C018  FFD9         	movff	reverse@mR,fsr2l
  1000   0004B4  C019  FFDA         	movff	reverse@mR+1,fsr2h
  1001   0004B8  0E19               	movlw	25
  1002   0004BA  60DF               	cpfslt	indf2,c
  1003   0004BC  EF62  F002         	goto	u721
  1004   0004C0  EF64  F002         	goto	u720
  1005   0004C4                     u721:
  1006   0004C4  EF6A  F002         	goto	l1549
  1007   0004C8                     u720:
  1008   0004C8                     
  1009                           ;dc_motor.c: 152:             mR->power += 5;
  1010   0004C8  C018  FFD9         	movff	reverse@mR,fsr2l
  1011   0004CC  C019  FFDA         	movff	reverse@mR+1,fsr2h
  1012   0004D0  0E05               	movlw	5
  1013   0004D2  26DF               	addwf	indf2,f,c
  1014   0004D4                     l1549:
  1015                           
  1016                           ;dc_motor.c: 147:     while ((mL->power)<25 && (mR->power)<25){
  1017   0004D4  C016  FFD9         	movff	reverse@mL,fsr2l
  1018   0004D8  C017  FFDA         	movff	reverse@mL+1,fsr2h
  1019   0004DC  0E19               	movlw	25
  1020   0004DE  60DF               	cpfslt	indf2,c
  1021   0004E0  EF74  F002         	goto	u731
  1022   0004E4  EF76  F002         	goto	u730
  1023   0004E8                     u731:
  1024   0004E8  EF82  F002         	goto	l1553
  1025   0004EC                     u730:
  1026   0004EC  C018  FFD9         	movff	reverse@mR,fsr2l
  1027   0004F0  C019  FFDA         	movff	reverse@mR+1,fsr2h
  1028   0004F4  0E18               	movlw	24
  1029   0004F6  64DF               	cpfsgt	indf2,c
  1030   0004F8  EF80  F002         	goto	u741
  1031   0004FC  EF82  F002         	goto	u740
  1032   000500                     u741:
  1033   000500  EF46  F002         	goto	l1541
  1034   000504                     u740:
  1035   000504                     l1553:
  1036                           
  1037                           ;dc_motor.c: 156:     setMotorPWM(mL);
  1038   000504  C016  F010         	movff	reverse@mL,setMotorPWM@m
  1039   000508  C017  F011         	movff	reverse@mL+1,setMotorPWM@m+1
  1040   00050C  EC2A  F000         	call	_setMotorPWM	;wreg free
  1041                           
  1042                           ;dc_motor.c: 157:     setMotorPWM(mR);
  1043   000510  C018  F010         	movff	reverse@mR,setMotorPWM@m
  1044   000514  C019  F011         	movff	reverse@mR+1,setMotorPWM@m+1
  1045   000518  EC2A  F000         	call	_setMotorPWM	;wreg free
  1046   00051C  0012               	return		;funcret
  1047   00051E                     __end_of_reverse:
  1048                           	callstack 0
  1049                           
  1050 ;; *************** function _initDCmotorsPWM *****************
  1051 ;; Defined at:
  1052 ;;		line 10 in file "dc_motor.c"
  1053 ;; Parameters:    Size  Location     Type
  1054 ;;  PWMperiod       2    2[COMRAM] int 
  1055 ;; Auto vars:     Size  Location     Type
  1056 ;;		None
  1057 ;; Return value:  Size  Location     Type
  1058 ;;                  1    wreg      void 
  1059 ;; Registers used:
  1060 ;;		wreg, status,2
  1061 ;; Tracked objects:
  1062 ;;		On entry : 0/0
  1063 ;;		On exit  : 0/0
  1064 ;;		Unchanged: 0/0
  1065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1066 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1067 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1069 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1070 ;;Total ram usage:        2 bytes
  1071 ;; Hardware stack levels used: 1
  1072 ;; Hardware stack levels required when called: 2
  1073 ;; This function calls:
  1074 ;;		Nothing
  1075 ;; This function is called by:
  1076 ;;		_main
  1077 ;; This function uses a non-reentrant model
  1078 ;;
  1079                           
  1080                           	psect	text4
  1081   00068A                     __ptext4:
  1082                           	callstack 0
  1083   00068A                     _initDCmotorsPWM:
  1084                           	callstack 28
  1085   00068A                     
  1086                           ;dc_motor.c: 14:     LATEbits.LATE2 = 0;
  1087   00068A  947D               	bcf	125,2,c	;volatile
  1088                           
  1089                           ;dc_motor.c: 15:     LATEbits.LATE4 = 0;
  1090   00068C  987D               	bcf	125,4,c	;volatile
  1091                           
  1092                           ;dc_motor.c: 16:     LATCbits.LATC7 = 0;
  1093   00068E  9E7B               	bcf	123,7,c	;volatile
  1094                           
  1095                           ;dc_motor.c: 17:     LATGbits.LATG6 = 0;
  1096   000690  9C7F               	bcf	127,6,c	;volatile
  1097                           
  1098                           ;dc_motor.c: 20:     TRISEbits.TRISE2 = 0 ;
  1099   000692  9485               	bcf	133,2,c	;volatile
  1100                           
  1101                           ;dc_motor.c: 21:     TRISEbits.TRISE4 = 0 ;
  1102   000694  9885               	bcf	133,4,c	;volatile
  1103                           
  1104                           ;dc_motor.c: 22:     TRISCbits.TRISC7 = 0 ;
  1105   000696  9E83               	bcf	131,7,c	;volatile
  1106                           
  1107                           ;dc_motor.c: 23:     TRISGbits.TRISG6 = 0 ;
  1108   000698  9C87               	bcf	135,6,c	;volatile
  1109   00069A                     
  1110                           ;dc_motor.c: 26:     RE2PPS=0x05;
  1111   00069A  0E05               	movlw	5
  1112   00069C  010E               	movlb	14	; () banked
  1113   00069E  6F74               	movwf	116,b	;volatile
  1114                           
  1115                           ;dc_motor.c: 27:     RE4PPS=0x06;
  1116   0006A0  0E06               	movlw	6
  1117   0006A2  6F76               	movwf	118,b	;volatile
  1118                           
  1119                           ;dc_motor.c: 28:     RC7PPS=0x07;
  1120   0006A4  0E07               	movlw	7
  1121   0006A6  6F69               	movwf	105,b	;volatile
  1122                           
  1123                           ;dc_motor.c: 29:     RG6PPS=0x08;
  1124   0006A8  0E08               	movlw	8
  1125   0006AA  6F88               	movwf	136,b	;volatile
  1126                           
  1127                           ;dc_motor.c: 32:     T2CONbits.CKPS=0b011;
  1128   0006AC  50BD               	movf	189,w,c	;volatile
  1129   0006AE  0B8F               	andlw	-113
  1130   0006B0  0930               	iorlw	48
  1131   0006B2  6EBD               	movwf	189,c	;volatile
  1132                           
  1133                           ;dc_motor.c: 33:     T2HLTbits.MODE=0b00000;
  1134   0006B4  0EE0               	movlw	-32
  1135   0006B6  16BE               	andwf	190,f,c	;volatile
  1136                           
  1137                           ;dc_motor.c: 34:     T2CLKCONbits.CS=0b0001;
  1138   0006B8  50BF               	movf	191,w,c	;volatile
  1139   0006BA  0BF0               	andlw	-16
  1140   0006BC  0901               	iorlw	1
  1141   0006BE  6EBF               	movwf	191,c	;volatile
  1142                           
  1143                           ;dc_motor.c: 38:     T2PR=199;
  1144   0006C0  0EC7               	movlw	199
  1145   0006C2  6EBC               	movwf	188,c	;volatile
  1146   0006C4                     
  1147                           ; BSR set to: 14
  1148                           ;dc_motor.c: 39:     T2CONbits.ON=1;
  1149   0006C4  8EBD               	bsf	189,7,c	;volatile
  1150                           
  1151                           ;dc_motor.c: 43:     CCPR1H=0;
  1152   0006C6  0E00               	movlw	0
  1153   0006C8  6EAA               	movwf	170,c	;volatile
  1154                           
  1155                           ;dc_motor.c: 44:     CCPR2H=0;
  1156   0006CA  0E00               	movlw	0
  1157   0006CC  6EA6               	movwf	166,c	;volatile
  1158                           
  1159                           ;dc_motor.c: 45:     CCPR3H=0;
  1160   0006CE  0E00               	movlw	0
  1161   0006D0  010F               	movlb	15	; () banked
  1162   0006D2  6F25               	movwf	37,b	;volatile
  1163                           
  1164                           ;dc_motor.c: 46:     CCPR4H=0;
  1165   0006D4  0E00               	movlw	0
  1166   0006D6  6F21               	movwf	33,b	;volatile
  1167                           
  1168                           ;dc_motor.c: 49:     CCPTMRS0bits.C1TSEL=0;
  1169   0006D8  0EFC               	movlw	-4
  1170   0006DA  16AD               	andwf	173,f,c	;volatile
  1171                           
  1172                           ;dc_motor.c: 50:     CCPTMRS0bits.C2TSEL=0;
  1173   0006DC  0EF3               	movlw	-13
  1174   0006DE  16AD               	andwf	173,f,c	;volatile
  1175                           
  1176                           ;dc_motor.c: 51:     CCPTMRS0bits.C3TSEL=0;
  1177   0006E0  0ECF               	movlw	-49
  1178   0006E2  16AD               	andwf	173,f,c	;volatile
  1179                           
  1180                           ;dc_motor.c: 52:     CCPTMRS0bits.C4TSEL=0;
  1181   0006E4  0E3F               	movlw	-193
  1182   0006E6  16AD               	andwf	173,f,c	;volatile
  1183   0006E8                     
  1184                           ; BSR set to: 15
  1185                           ;dc_motor.c: 55:     CCP1CONbits.FMT=1;
  1186   0006E8  88AB               	bsf	171,4,c	;volatile
  1187                           
  1188                           ;dc_motor.c: 56:     CCP1CONbits.CCP1MODE=0b1100;
  1189   0006EA  50AB               	movf	171,w,c	;volatile
  1190   0006EC  0BF0               	andlw	-16
  1191   0006EE  090C               	iorlw	12
  1192   0006F0  6EAB               	movwf	171,c	;volatile
  1193   0006F2                     
  1194                           ; BSR set to: 15
  1195                           ;dc_motor.c: 57:     CCP1CONbits.EN=1;
  1196   0006F2  8EAB               	bsf	171,7,c	;volatile
  1197   0006F4                     
  1198                           ; BSR set to: 15
  1199                           ;dc_motor.c: 59:     CCP2CONbits.FMT=1;
  1200   0006F4  88A7               	bsf	167,4,c	;volatile
  1201                           
  1202                           ;dc_motor.c: 60:     CCP2CONbits.CCP2MODE=0b1100;
  1203   0006F6  50A7               	movf	167,w,c	;volatile
  1204   0006F8  0BF0               	andlw	-16
  1205   0006FA  090C               	iorlw	12
  1206   0006FC  6EA7               	movwf	167,c	;volatile
  1207   0006FE                     
  1208                           ; BSR set to: 15
  1209                           ;dc_motor.c: 61:     CCP2CONbits.EN=1;
  1210   0006FE  8EA7               	bsf	167,7,c	;volatile
  1211   000700                     
  1212                           ; BSR set to: 15
  1213                           ;dc_motor.c: 63:     CCP3CONbits.FMT=1;
  1214   000700  8926               	bsf	38,4,b	;volatile
  1215                           
  1216                           ;dc_motor.c: 64:     CCP3CONbits.CCP3MODE=0b1100;
  1217   000702  5126               	movf	38,w,b	;volatile
  1218   000704  0BF0               	andlw	-16
  1219   000706  090C               	iorlw	12
  1220   000708  6F26               	movwf	38,b	;volatile
  1221   00070A                     
  1222                           ; BSR set to: 15
  1223                           ;dc_motor.c: 65:     CCP3CONbits.EN=1;
  1224   00070A  8F26               	bsf	38,7,b	;volatile
  1225   00070C                     
  1226                           ; BSR set to: 15
  1227                           ;dc_motor.c: 67:     CCP4CONbits.FMT=1;
  1228   00070C  8922               	bsf	34,4,b	;volatile
  1229                           
  1230                           ;dc_motor.c: 68:     CCP4CONbits.CCP4MODE=0b1100;
  1231   00070E  5122               	movf	34,w,b	;volatile
  1232   000710  0BF0               	andlw	-16
  1233   000712  090C               	iorlw	12
  1234   000714  6F22               	movwf	34,b	;volatile
  1235   000716                     
  1236                           ; BSR set to: 15
  1237                           ;dc_motor.c: 69:     CCP4CONbits.EN=1;
  1238   000716  8F22               	bsf	34,7,b	;volatile
  1239   000718                     
  1240                           ; BSR set to: 15
  1241   000718  0012               	return		;funcret
  1242   00071A                     __end_of_initDCmotorsPWM:
  1243                           	callstack 0
  1244                           
  1245 ;; *************** function _forward *****************
  1246 ;; Defined at:
  1247 ;;		line 117 in file "dc_motor.c"
  1248 ;; Parameters:    Size  Location     Type
  1249 ;;  mL              2   21[COMRAM] PTR struct DC_motor
  1250 ;;		 -> main@motorLeft(9), 
  1251 ;;  mR              2   23[COMRAM] PTR struct DC_motor
  1252 ;;		 -> main@motorRight(9), 
  1253 ;; Auto vars:     Size  Location     Type
  1254 ;;		None
  1255 ;; Return value:  Size  Location     Type
  1256 ;;                  1    wreg      void 
  1257 ;; Registers used:
  1258 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1259 ;; Tracked objects:
  1260 ;;		On entry : 0/0
  1261 ;;		On exit  : 0/0
  1262 ;;		Unchanged: 0/0
  1263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1264 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1266 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1267 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1268 ;;Total ram usage:        5 bytes
  1269 ;; Hardware stack levels used: 1
  1270 ;; Hardware stack levels required when called: 4
  1271 ;; This function calls:
  1272 ;;		_setMotorPWM
  1273 ;; This function is called by:
  1274 ;;		_main
  1275 ;; This function uses a non-reentrant model
  1276 ;;
  1277                           
  1278                           	psect	text5
  1279   00051E                     __ptext5:
  1280                           	callstack 0
  1281   00051E                     _forward:
  1282                           	callstack 26
  1283   00051E                     
  1284                           ;dc_motor.c: 117: void forward(DC_motor *mL, DC_motor *mR);dc_motor.c: 118: {;dc_motor.c
      +                          : 119:     mL->direction = 1;
  1285   00051E  EE20 F001          	lfsr	2,1
  1286   000522  5016               	movf	forward@mL^0,w,c
  1287   000524  26D9               	addwf	fsr2l,f,c
  1288   000526  5017               	movf	(forward@mL+1)^0,w,c
  1289   000528  22DA               	addwfc	fsr2h,f,c
  1290   00052A  0E01               	movlw	1
  1291   00052C  6EDF               	movwf	indf2,c
  1292                           
  1293                           ;dc_motor.c: 120:     mR->direction = 1;
  1294   00052E  EE20 F001          	lfsr	2,1
  1295   000532  5018               	movf	forward@mR^0,w,c
  1296   000534  26D9               	addwf	fsr2l,f,c
  1297   000536  5019               	movf	(forward@mR+1)^0,w,c
  1298   000538  22DA               	addwfc	fsr2h,f,c
  1299   00053A  0E01               	movlw	1
  1300   00053C  6EDF               	movwf	indf2,c
  1301                           
  1302                           ;dc_motor.c: 122:     mL->brakemode = 1;
  1303   00053E  EE20 F002          	lfsr	2,2
  1304   000542  5016               	movf	forward@mL^0,w,c
  1305   000544  26D9               	addwf	fsr2l,f,c
  1306   000546  5017               	movf	(forward@mL+1)^0,w,c
  1307   000548  22DA               	addwfc	fsr2h,f,c
  1308   00054A  0E01               	movlw	1
  1309   00054C  6EDF               	movwf	indf2,c
  1310                           
  1311                           ;dc_motor.c: 123:     mL->brakemode = 1;
  1312   00054E  EE20 F002          	lfsr	2,2
  1313   000552  5016               	movf	forward@mL^0,w,c
  1314   000554  26D9               	addwf	fsr2l,f,c
  1315   000556  5017               	movf	(forward@mL+1)^0,w,c
  1316   000558  22DA               	addwfc	fsr2h,f,c
  1317   00055A  0E01               	movlw	1
  1318   00055C  6EDF               	movwf	indf2,c
  1319                           
  1320                           ;dc_motor.c: 125:     while ((mL->power)<25 && (mR->power)<25){
  1321   00055E  EFD5  F002         	goto	l1587
  1322   000562                     l1579:
  1323                           
  1324                           ;dc_motor.c: 126:         if ((mL->power) < 25){
  1325   000562  C016  FFD9         	movff	forward@mL,fsr2l
  1326   000566  C017  FFDA         	movff	forward@mL+1,fsr2h
  1327   00056A  0E19               	movlw	25
  1328   00056C  60DF               	cpfslt	indf2,c
  1329   00056E  EFBB  F002         	goto	u751
  1330   000572  EFBD  F002         	goto	u750
  1331   000576                     u751:
  1332   000576  EFC3  F002         	goto	l1583
  1333   00057A                     u750:
  1334   00057A                     
  1335                           ;dc_motor.c: 127:             mL->power += 5;
  1336   00057A  C016  FFD9         	movff	forward@mL,fsr2l
  1337   00057E  C017  FFDA         	movff	forward@mL+1,fsr2h
  1338   000582  0E05               	movlw	5
  1339   000584  26DF               	addwf	indf2,f,c
  1340   000586                     l1583:
  1341                           
  1342                           ;dc_motor.c: 129:         if ((mR->power) <25){
  1343   000586  C018  FFD9         	movff	forward@mR,fsr2l
  1344   00058A  C019  FFDA         	movff	forward@mR+1,fsr2h
  1345   00058E  0E19               	movlw	25
  1346   000590  60DF               	cpfslt	indf2,c
  1347   000592  EFCD  F002         	goto	u761
  1348   000596  EFCF  F002         	goto	u760
  1349   00059A                     u761:
  1350   00059A  EFD5  F002         	goto	l1587
  1351   00059E                     u760:
  1352   00059E                     
  1353                           ;dc_motor.c: 130:             mR->power += 5;
  1354   00059E  C018  FFD9         	movff	forward@mR,fsr2l
  1355   0005A2  C019  FFDA         	movff	forward@mR+1,fsr2h
  1356   0005A6  0E05               	movlw	5
  1357   0005A8  26DF               	addwf	indf2,f,c
  1358   0005AA                     l1587:
  1359                           
  1360                           ;dc_motor.c: 125:     while ((mL->power)<25 && (mR->power)<25){
  1361   0005AA  C016  FFD9         	movff	forward@mL,fsr2l
  1362   0005AE  C017  FFDA         	movff	forward@mL+1,fsr2h
  1363   0005B2  0E19               	movlw	25
  1364   0005B4  60DF               	cpfslt	indf2,c
  1365   0005B6  EFDF  F002         	goto	u771
  1366   0005BA  EFE1  F002         	goto	u770
  1367   0005BE                     u771:
  1368   0005BE  EFED  F002         	goto	l1591
  1369   0005C2                     u770:
  1370   0005C2  C018  FFD9         	movff	forward@mR,fsr2l
  1371   0005C6  C019  FFDA         	movff	forward@mR+1,fsr2h
  1372   0005CA  0E18               	movlw	24
  1373   0005CC  64DF               	cpfsgt	indf2,c
  1374   0005CE  EFEB  F002         	goto	u781
  1375   0005D2  EFED  F002         	goto	u780
  1376   0005D6                     u781:
  1377   0005D6  EFB1  F002         	goto	l1579
  1378   0005DA                     u780:
  1379   0005DA                     l1591:
  1380                           
  1381                           ;dc_motor.c: 134:     setMotorPWM(mL);
  1382   0005DA  C016  F010         	movff	forward@mL,setMotorPWM@m
  1383   0005DE  C017  F011         	movff	forward@mL+1,setMotorPWM@m+1
  1384   0005E2  EC2A  F000         	call	_setMotorPWM	;wreg free
  1385                           
  1386                           ;dc_motor.c: 135:     setMotorPWM(mR);
  1387   0005E6  C018  F010         	movff	forward@mR,setMotorPWM@m
  1388   0005EA  C019  F011         	movff	forward@mR+1,setMotorPWM@m+1
  1389   0005EE  EC2A  F000         	call	_setMotorPWM	;wreg free
  1390   0005F2  0012               	return		;funcret
  1391   0005F4                     __end_of_forward:
  1392                           	callstack 0
  1393                           
  1394 ;; *************** function _setMotorPWM *****************
  1395 ;; Defined at:
  1396 ;;		line 78 in file "dc_motor.c"
  1397 ;; Parameters:    Size  Location     Type
  1398 ;;  m               2   15[COMRAM] PTR struct DC_motor
  1399 ;;		 -> main@motorRight(9), main@motorLeft(9), 
  1400 ;; Auto vars:     Size  Location     Type
  1401 ;;  negDuty         1   20[COMRAM] unsigned char 
  1402 ;;  posDuty         1   19[COMRAM] unsigned char 
  1403 ;; Return value:  Size  Location     Type
  1404 ;;                  1    wreg      void 
  1405 ;; Registers used:
  1406 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1407 ;; Tracked objects:
  1408 ;;		On entry : 0/0
  1409 ;;		On exit  : 0/0
  1410 ;;		Unchanged: 0/0
  1411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1412 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1413 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1414 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1415 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1416 ;;Total ram usage:        6 bytes
  1417 ;; Hardware stack levels used: 1
  1418 ;; Hardware stack levels required when called: 3
  1419 ;; This function calls:
  1420 ;;		___lwdiv
  1421 ;;		___wmul
  1422 ;; This function is called by:
  1423 ;;		_stop
  1424 ;;		_forward
  1425 ;;		_reverse
  1426 ;;		_turnLeft
  1427 ;;		_turnRight
  1428 ;; This function uses a non-reentrant model
  1429 ;;
  1430                           
  1431                           	psect	text6
  1432   000054                     __ptext6:
  1433                           	callstack 0
  1434   000054                     _setMotorPWM:
  1435                           	callstack 25
  1436   000054                     
  1437                           ;dc_motor.c: 78: void setMotorPWM(DC_motor *m);dc_motor.c: 79: {;dc_motor.c: 80:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 82:     if(m->brakemode) {
  1438   000054  EE20 F002          	lfsr	2,2
  1439   000058  5010               	movf	setMotorPWM@m^0,w,c
  1440   00005A  26D9               	addwf	fsr2l,f,c
  1441   00005C  5011               	movf	(setMotorPWM@m+1)^0,w,c
  1442   00005E  22DA               	addwfc	fsr2h,f,c
  1443   000060  50DF               	movf	indf2,w,c
  1444   000062  B4D8               	btfsc	status,2,c
  1445   000064  EF36  F000         	goto	u651
  1446   000068  EF38  F000         	goto	u650
  1447   00006C                     u651:
  1448   00006C  EF6C  F000         	goto	l1511
  1449   000070                     u650:
  1450   000070                     
  1451                           ;dc_motor.c: 83:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  1452   000070  C010  FFD9         	movff	setMotorPWM@m,fsr2l
  1453   000074  C011  FFDA         	movff	setMotorPWM@m+1,fsr2h
  1454   000078  50DF               	movf	indf2,w,c
  1455   00007A  6E12               	movwf	??_setMotorPWM^0,c
  1456   00007C  5012               	movf	??_setMotorPWM^0,w,c
  1457   00007E  6E03               	movwf	___wmul@multiplier^0,c
  1458   000080  6A04               	clrf	(___wmul@multiplier+1)^0,c
  1459   000082  EE20 F003          	lfsr	2,3
  1460   000086  5010               	movf	setMotorPWM@m^0,w,c
  1461   000088  26D9               	addwf	fsr2l,f,c
  1462   00008A  5011               	movf	(setMotorPWM@m+1)^0,w,c
  1463   00008C  22DA               	addwfc	fsr2h,f,c
  1464   00008E  CFDE F005          	movff	postinc2,___wmul@multiplicand
  1465   000092  CFDD F006          	movff	postdec2,___wmul@multiplicand+1
  1466   000096  ECE0  F003         	call	___wmul	;wreg free
  1467   00009A  C003  F009         	movff	?___wmul,___lwdiv@dividend
  1468   00009E  C004  F00A         	movff	?___wmul+1,___lwdiv@dividend+1
  1469   0000A2  0E00               	movlw	0
  1470   0000A4  6E0C               	movwf	(___lwdiv@divisor+1)^0,c
  1471   0000A6  0E64               	movlw	100
  1472   0000A8  6E0B               	movwf	___lwdiv@divisor^0,c
  1473   0000AA  EC8D  F003         	call	___lwdiv	;wreg free
  1474   0000AE  EE20 F003          	lfsr	2,3
  1475   0000B2  5010               	movf	setMotorPWM@m^0,w,c
  1476   0000B4  26D9               	addwf	fsr2l,f,c
  1477   0000B6  5011               	movf	(setMotorPWM@m+1)^0,w,c
  1478   0000B8  22DA               	addwfc	fsr2h,f,c
  1479   0000BA  50DF               	movf	indf2,w,c
  1480   0000BC  6E13               	movwf	(??_setMotorPWM+1)^0,c
  1481   0000BE  5009               	movf	?___lwdiv^0,w,c
  1482   0000C0  5C13               	subwf	(??_setMotorPWM+1)^0,w,c
  1483   0000C2  6E14               	movwf	setMotorPWM@posDuty^0,c
  1484   0000C4                     
  1485                           ;dc_motor.c: 84:         negDuty=m->PWMperiod;
  1486   0000C4  EE20 F003          	lfsr	2,3
  1487   0000C8  5010               	movf	setMotorPWM@m^0,w,c
  1488   0000CA  26D9               	addwf	fsr2l,f,c
  1489   0000CC  5011               	movf	(setMotorPWM@m+1)^0,w,c
  1490   0000CE  22DA               	addwfc	fsr2h,f,c
  1491   0000D0  50DF               	movf	indf2,w,c
  1492   0000D2  6E15               	movwf	setMotorPWM@negDuty^0,c
  1493                           
  1494                           ;dc_motor.c: 85:     }
  1495   0000D4  EF8F  F000         	goto	l1515
  1496   0000D8                     l1511:
  1497                           
  1498                           ;dc_motor.c: 87:         posDuty=0;
  1499   0000D8  0E00               	movlw	0
  1500   0000DA  6E14               	movwf	setMotorPWM@posDuty^0,c
  1501   0000DC                     
  1502                           ;dc_motor.c: 88:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  1503   0000DC  C010  FFD9         	movff	setMotorPWM@m,fsr2l
  1504   0000E0  C011  FFDA         	movff	setMotorPWM@m+1,fsr2h
  1505   0000E4  50DF               	movf	indf2,w,c
  1506   0000E6  6E12               	movwf	??_setMotorPWM^0,c
  1507   0000E8  5012               	movf	??_setMotorPWM^0,w,c
  1508   0000EA  6E03               	movwf	___wmul@multiplier^0,c
  1509   0000EC  6A04               	clrf	(___wmul@multiplier+1)^0,c
  1510   0000EE  EE20 F003          	lfsr	2,3
  1511   0000F2  5010               	movf	setMotorPWM@m^0,w,c
  1512   0000F4  26D9               	addwf	fsr2l,f,c
  1513   0000F6  5011               	movf	(setMotorPWM@m+1)^0,w,c
  1514   0000F8  22DA               	addwfc	fsr2h,f,c
  1515   0000FA  CFDE F005          	movff	postinc2,___wmul@multiplicand
  1516   0000FE  CFDD F006          	movff	postdec2,___wmul@multiplicand+1
  1517   000102  ECE0  F003         	call	___wmul	;wreg free
  1518   000106  C003  F009         	movff	?___wmul,___lwdiv@dividend
  1519   00010A  C004  F00A         	movff	?___wmul+1,___lwdiv@dividend+1
  1520   00010E  0E00               	movlw	0
  1521   000110  6E0C               	movwf	(___lwdiv@divisor+1)^0,c
  1522   000112  0E64               	movlw	100
  1523   000114  6E0B               	movwf	___lwdiv@divisor^0,c
  1524   000116  EC8D  F003         	call	___lwdiv	;wreg free
  1525   00011A  5009               	movf	?___lwdiv^0,w,c
  1526   00011C  6E15               	movwf	setMotorPWM@negDuty^0,c
  1527   00011E                     l1515:
  1528                           
  1529                           ;dc_motor.c: 91:     if (m->direction) {
  1530   00011E  EE20 F001          	lfsr	2,1
  1531   000122  5010               	movf	setMotorPWM@m^0,w,c
  1532   000124  26D9               	addwf	fsr2l,f,c
  1533   000126  5011               	movf	(setMotorPWM@m+1)^0,w,c
  1534   000128  22DA               	addwfc	fsr2h,f,c
  1535   00012A  50DF               	movf	indf2,w,c
  1536   00012C  B4D8               	btfsc	status,2,c
  1537   00012E  EF9B  F000         	goto	u661
  1538   000132  EF9D  F000         	goto	u660
  1539   000136                     u661:
  1540   000136  EFBF  F000         	goto	l1519
  1541   00013A                     u660:
  1542   00013A                     
  1543                           ;dc_motor.c: 92:         *(m->posDutyHighByte)=posDuty;
  1544   00013A  EE20 F005          	lfsr	2,5
  1545   00013E  5010               	movf	setMotorPWM@m^0,w,c
  1546   000140  26D9               	addwf	fsr2l,f,c
  1547   000142  5011               	movf	(setMotorPWM@m+1)^0,w,c
  1548   000144  22DA               	addwfc	fsr2h,f,c
  1549   000146  CFDE F012          	movff	postinc2,??_setMotorPWM
  1550   00014A  CFDD F013          	movff	postdec2,??_setMotorPWM+1
  1551   00014E  C012  FFD9         	movff	??_setMotorPWM,fsr2l
  1552   000152  C013  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1553   000156  C014  FFDF         	movff	setMotorPWM@posDuty,indf2
  1554                           
  1555                           ;dc_motor.c: 93:         *(m->negDutyHighByte)=negDuty;
  1556   00015A  EE20 F007          	lfsr	2,7
  1557   00015E  5010               	movf	setMotorPWM@m^0,w,c
  1558   000160  26D9               	addwf	fsr2l,f,c
  1559   000162  5011               	movf	(setMotorPWM@m+1)^0,w,c
  1560   000164  22DA               	addwfc	fsr2h,f,c
  1561   000166  CFDE F012          	movff	postinc2,??_setMotorPWM
  1562   00016A  CFDD F013          	movff	postdec2,??_setMotorPWM+1
  1563   00016E  C012  FFD9         	movff	??_setMotorPWM,fsr2l
  1564   000172  C013  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1565   000176  C015  FFDF         	movff	setMotorPWM@negDuty,indf2
  1566                           
  1567                           ;dc_motor.c: 94:     } else {
  1568   00017A  EFDF  F000         	goto	l139
  1569   00017E                     l1519:
  1570                           
  1571                           ;dc_motor.c: 95:         *(m->posDutyHighByte)=negDuty;
  1572   00017E  EE20 F005          	lfsr	2,5
  1573   000182  5010               	movf	setMotorPWM@m^0,w,c
  1574   000184  26D9               	addwf	fsr2l,f,c
  1575   000186  5011               	movf	(setMotorPWM@m+1)^0,w,c
  1576   000188  22DA               	addwfc	fsr2h,f,c
  1577   00018A  CFDE F012          	movff	postinc2,??_setMotorPWM
  1578   00018E  CFDD F013          	movff	postdec2,??_setMotorPWM+1
  1579   000192  C012  FFD9         	movff	??_setMotorPWM,fsr2l
  1580   000196  C013  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1581   00019A  C015  FFDF         	movff	setMotorPWM@negDuty,indf2
  1582                           
  1583                           ;dc_motor.c: 96:         *(m->negDutyHighByte)=posDuty;
  1584   00019E  EE20 F007          	lfsr	2,7
  1585   0001A2  5010               	movf	setMotorPWM@m^0,w,c
  1586   0001A4  26D9               	addwf	fsr2l,f,c
  1587   0001A6  5011               	movf	(setMotorPWM@m+1)^0,w,c
  1588   0001A8  22DA               	addwfc	fsr2h,f,c
  1589   0001AA  CFDE F012          	movff	postinc2,??_setMotorPWM
  1590   0001AE  CFDD F013          	movff	postdec2,??_setMotorPWM+1
  1591   0001B2  C012  FFD9         	movff	??_setMotorPWM,fsr2l
  1592   0001B6  C013  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1593   0001BA  C014  FFDF         	movff	setMotorPWM@posDuty,indf2
  1594   0001BE                     l139:
  1595   0001BE  0012               	return		;funcret
  1596   0001C0                     __end_of_setMotorPWM:
  1597                           	callstack 0
  1598                           
  1599 ;; *************** function ___wmul *****************
  1600 ;; Defined at:
  1601 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  1602 ;; Parameters:    Size  Location     Type
  1603 ;;  multiplier      2    2[COMRAM] unsigned int 
  1604 ;;  multiplicand    2    4[COMRAM] unsigned int 
  1605 ;; Auto vars:     Size  Location     Type
  1606 ;;  product         2    6[COMRAM] unsigned int 
  1607 ;; Return value:  Size  Location     Type
  1608 ;;                  2    2[COMRAM] unsigned int 
  1609 ;; Registers used:
  1610 ;;		wreg, status,2, status,0, prodl, prodh
  1611 ;; Tracked objects:
  1612 ;;		On entry : 0/0
  1613 ;;		On exit  : 0/0
  1614 ;;		Unchanged: 0/0
  1615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1616 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1617 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1619 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1620 ;;Total ram usage:        6 bytes
  1621 ;; Hardware stack levels used: 1
  1622 ;; Hardware stack levels required when called: 2
  1623 ;; This function calls:
  1624 ;;		Nothing
  1625 ;; This function is called by:
  1626 ;;		_setMotorPWM
  1627 ;; This function uses a non-reentrant model
  1628 ;;
  1629                           
  1630                           	psect	text7
  1631   0007C0                     __ptext7:
  1632                           	callstack 0
  1633   0007C0                     ___wmul:
  1634                           	callstack 25
  1635   0007C0  5003               	movf	___wmul@multiplier^0,w,c
  1636   0007C2  0205               	mulwf	___wmul@multiplicand^0,c
  1637   0007C4  CFF3 F007          	movff	prodl,___wmul@product
  1638   0007C8  CFF4 F008          	movff	prodh,___wmul@product+1
  1639   0007CC  5003               	movf	___wmul@multiplier^0,w,c
  1640   0007CE  0206               	mulwf	(___wmul@multiplicand+1)^0,c
  1641   0007D0  50F3               	movf	243,w,c
  1642   0007D2  2608               	addwf	(___wmul@product+1)^0,f,c
  1643   0007D4  5004               	movf	(___wmul@multiplier+1)^0,w,c
  1644   0007D6  0205               	mulwf	___wmul@multiplicand^0,c
  1645   0007D8  50F3               	movf	243,w,c
  1646   0007DA  2608               	addwf	(___wmul@product+1)^0,f,c
  1647   0007DC  C007  F003         	movff	___wmul@product,?___wmul
  1648   0007E0  C008  F004         	movff	___wmul@product+1,?___wmul+1
  1649   0007E4  0012               	return		;funcret
  1650   0007E6                     __end_of___wmul:
  1651                           	callstack 0
  1652                           
  1653 ;; *************** function ___lwdiv *****************
  1654 ;; Defined at:
  1655 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  1656 ;; Parameters:    Size  Location     Type
  1657 ;;  dividend        2    8[COMRAM] unsigned int 
  1658 ;;  divisor         2   10[COMRAM] unsigned int 
  1659 ;; Auto vars:     Size  Location     Type
  1660 ;;  quotient        2   12[COMRAM] unsigned int 
  1661 ;;  counter         1   14[COMRAM] unsigned char 
  1662 ;; Return value:  Size  Location     Type
  1663 ;;                  2    8[COMRAM] unsigned int 
  1664 ;; Registers used:
  1665 ;;		wreg, status,2, status,0
  1666 ;; Tracked objects:
  1667 ;;		On entry : 0/0
  1668 ;;		On exit  : 0/0
  1669 ;;		Unchanged: 0/0
  1670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1671 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1672 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1674 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1675 ;;Total ram usage:        7 bytes
  1676 ;; Hardware stack levels used: 1
  1677 ;; Hardware stack levels required when called: 2
  1678 ;; This function calls:
  1679 ;;		Nothing
  1680 ;; This function is called by:
  1681 ;;		_setMotorPWM
  1682 ;; This function uses a non-reentrant model
  1683 ;;
  1684                           
  1685                           	psect	text8
  1686   00071A                     __ptext8:
  1687                           	callstack 0
  1688   00071A                     ___lwdiv:
  1689                           	callstack 25
  1690   00071A  0E00               	movlw	0
  1691   00071C  6E0E               	movwf	(___lwdiv@quotient+1)^0,c
  1692   00071E  0E00               	movlw	0
  1693   000720  6E0D               	movwf	___lwdiv@quotient^0,c
  1694   000722  500B               	movf	___lwdiv@divisor^0,w,c
  1695   000724  100C               	iorwf	(___lwdiv@divisor+1)^0,w,c
  1696   000726  B4D8               	btfsc	status,2,c
  1697   000728  EF98  F003         	goto	u621
  1698   00072C  EF9A  F003         	goto	u620
  1699   000730                     u621:
  1700   000730  EFC2  F003         	goto	l773
  1701   000734                     u620:
  1702   000734  0E01               	movlw	1
  1703   000736  6E0F               	movwf	___lwdiv@counter^0,c
  1704   000738  EFA2  F003         	goto	l1491
  1705   00073C                     l1489:
  1706   00073C  90D8               	bcf	status,0,c
  1707   00073E  360B               	rlcf	___lwdiv@divisor^0,f,c
  1708   000740  360C               	rlcf	(___lwdiv@divisor+1)^0,f,c
  1709   000742  2A0F               	incf	___lwdiv@counter^0,f,c
  1710   000744                     l1491:
  1711   000744  AE0C               	btfss	(___lwdiv@divisor+1)^0,7,c
  1712   000746  EFA7  F003         	goto	u631
  1713   00074A  EFA9  F003         	goto	u630
  1714   00074E                     u631:
  1715   00074E  EF9E  F003         	goto	l1489
  1716   000752                     u630:
  1717   000752                     l1493:
  1718   000752  90D8               	bcf	status,0,c
  1719   000754  360D               	rlcf	___lwdiv@quotient^0,f,c
  1720   000756  360E               	rlcf	(___lwdiv@quotient+1)^0,f,c
  1721   000758  500B               	movf	___lwdiv@divisor^0,w,c
  1722   00075A  5C09               	subwf	___lwdiv@dividend^0,w,c
  1723   00075C  500C               	movf	(___lwdiv@divisor+1)^0,w,c
  1724   00075E  580A               	subwfb	(___lwdiv@dividend+1)^0,w,c
  1725   000760  A0D8               	btfss	status,0,c
  1726   000762  EFB5  F003         	goto	u641
  1727   000766  EFB7  F003         	goto	u640
  1728   00076A                     u641:
  1729   00076A  EFBC  F003         	goto	l1501
  1730   00076E                     u640:
  1731   00076E  500B               	movf	___lwdiv@divisor^0,w,c
  1732   000770  5E09               	subwf	___lwdiv@dividend^0,f,c
  1733   000772  500C               	movf	(___lwdiv@divisor+1)^0,w,c
  1734   000774  5A0A               	subwfb	(___lwdiv@dividend+1)^0,f,c
  1735   000776  800D               	bsf	___lwdiv@quotient^0,0,c
  1736   000778                     l1501:
  1737   000778  90D8               	bcf	status,0,c
  1738   00077A  320C               	rrcf	(___lwdiv@divisor+1)^0,f,c
  1739   00077C  320B               	rrcf	___lwdiv@divisor^0,f,c
  1740   00077E  2E0F               	decfsz	___lwdiv@counter^0,f,c
  1741   000780  EFA9  F003         	goto	l1493
  1742   000784                     l773:
  1743   000784  C00D  F009         	movff	___lwdiv@quotient,?___lwdiv
  1744   000788  C00E  F00A         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1745   00078C  0012               	return		;funcret
  1746   00078E                     __end_of___lwdiv:
  1747                           	callstack 0
  1748                           
  1749 ;; *************** function _Timer0_init *****************
  1750 ;; Defined at:
  1751 ;;		line 7 in file "timers.c"
  1752 ;; Parameters:    Size  Location     Type
  1753 ;;		None
  1754 ;; Auto vars:     Size  Location     Type
  1755 ;;		None
  1756 ;; Return value:  Size  Location     Type
  1757 ;;                  1    wreg      void 
  1758 ;; Registers used:
  1759 ;;		wreg, status,2
  1760 ;; Tracked objects:
  1761 ;;		On entry : 0/0
  1762 ;;		On exit  : 0/0
  1763 ;;		Unchanged: 0/0
  1764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1768 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1769 ;;Total ram usage:        0 bytes
  1770 ;; Hardware stack levels used: 1
  1771 ;; Hardware stack levels required when called: 2
  1772 ;; This function calls:
  1773 ;;		Nothing
  1774 ;; This function is called by:
  1775 ;;		_main
  1776 ;; This function uses a non-reentrant model
  1777 ;;
  1778                           
  1779                           	psect	text9
  1780   0007E6                     __ptext9:
  1781                           	callstack 0
  1782   0007E6                     _Timer0_init:
  1783                           	callstack 28
  1784   0007E6                     
  1785                           ;timers.c: 9:     T0CON1bits.T0CS=0b010;
  1786   0007E6  50D6               	movf	214,w,c	;volatile
  1787   0007E8  0B1F               	andlw	-225
  1788   0007EA  0940               	iorlw	64
  1789   0007EC  6ED6               	movwf	214,c	;volatile
  1790   0007EE                     
  1791                           ;timers.c: 10:     T0CON1bits.T0ASYNC=1;
  1792   0007EE  88D6               	bsf	214,4,c	;volatile
  1793                           
  1794                           ;timers.c: 11:     T0CON1bits.T0CKPS=0b111;
  1795   0007F0  50D6               	movf	214,w,c	;volatile
  1796   0007F2  0BF0               	andlw	-16
  1797   0007F4  0907               	iorlw	7
  1798   0007F6  6ED6               	movwf	214,c	;volatile
  1799   0007F8                     
  1800                           ;timers.c: 12:     T0CON0bits.T016BIT=1;
  1801   0007F8  88D5               	bsf	213,4,c	;volatile
  1802                           
  1803                           ;timers.c: 15:     TMR0H=(65535-2500)>>8;
  1804   0007FA  0EF6               	movlw	246
  1805   0007FC  6ED4               	movwf	212,c	;volatile
  1806                           
  1807                           ;timers.c: 16:     TMR0L=(unsigned char)(65535-2500);
  1808   0007FE  0E3B               	movlw	59
  1809   000800  6ED3               	movwf	211,c	;volatile
  1810   000802                     
  1811                           ;timers.c: 17:     T0CON0bits.T0EN=1;
  1812   000802  8ED5               	bsf	213,7,c	;volatile
  1813   000804  0012               	return		;funcret
  1814   000806                     __end_of_Timer0_init:
  1815                           	callstack 0
  1816                           
  1817 ;; *************** function _Interrupts_init *****************
  1818 ;; Defined at:
  1819 ;;		line 8 in file "interrupts.c"
  1820 ;; Parameters:    Size  Location     Type
  1821 ;;		None
  1822 ;; Auto vars:     Size  Location     Type
  1823 ;;		None
  1824 ;; Return value:  Size  Location     Type
  1825 ;;                  1    wreg      void 
  1826 ;; Registers used:
  1827 ;;		None
  1828 ;; Tracked objects:
  1829 ;;		On entry : 0/0
  1830 ;;		On exit  : 0/0
  1831 ;;		Unchanged: 0/0
  1832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1836 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1837 ;;Total ram usage:        0 bytes
  1838 ;; Hardware stack levels used: 1
  1839 ;; Hardware stack levels required when called: 2
  1840 ;; This function calls:
  1841 ;;		Nothing
  1842 ;; This function is called by:
  1843 ;;		_main
  1844 ;; This function uses a non-reentrant model
  1845 ;;
  1846                           
  1847                           	psect	text10
  1848   000806                     __ptext10:
  1849                           	callstack 0
  1850   000806                     _Interrupts_init:
  1851                           	callstack 28
  1852   000806                     
  1853                           ;interrupts.c: 10:     PIE0bits.TMR0IE=1;
  1854   000806  010E               	movlb	14	; () banked
  1855   000808  8B29               	bsf	41,5,b	;volatile
  1856                           
  1857                           ;interrupts.c: 11:     INTCONbits.PEIE=1;
  1858   00080A  8CF2               	bsf	242,6,c	;volatile
  1859                           
  1860                           ;interrupts.c: 12:     INTCONbits.IPEN=0;
  1861   00080C  9AF2               	bcf	242,5,c	;volatile
  1862                           
  1863                           ;interrupts.c: 13:     INTCONbits.GIE=1;
  1864   00080E  8EF2               	bsf	242,7,c	;volatile
  1865   000810                     
  1866                           ; BSR set to: 14
  1867   000810  0012               	return		;funcret
  1868   000812                     __end_of_Interrupts_init:
  1869                           	callstack 0
  1870                           
  1871 ;; *************** function _HighISR *****************
  1872 ;; Defined at:
  1873 ;;		line 20 in file "interrupts.c"
  1874 ;; Parameters:    Size  Location     Type
  1875 ;;		None
  1876 ;; Auto vars:     Size  Location     Type
  1877 ;;		None
  1878 ;; Return value:  Size  Location     Type
  1879 ;;                  1    wreg      void 
  1880 ;; Registers used:
  1881 ;;		wreg, status,2, status,0, cstack
  1882 ;; Tracked objects:
  1883 ;;		On entry : 0/0
  1884 ;;		On exit  : 0/0
  1885 ;;		Unchanged: 0/0
  1886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1888 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1890 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1891 ;;Total ram usage:        0 bytes
  1892 ;; Hardware stack levels used: 1
  1893 ;; Hardware stack levels required when called: 1
  1894 ;; This function calls:
  1895 ;;		_write16bitTMR0val
  1896 ;; This function is called by:
  1897 ;;		Interrupt level 2
  1898 ;; This function uses a non-reentrant model
  1899 ;;
  1900                           
  1901                           	psect	intcode
  1902   000008                     __pintcode:
  1903                           	callstack 0
  1904   000008                     _HighISR:
  1905                           	callstack 25
  1906                           
  1907                           ; BSR set to: 14
  1908                           ;incstack = 0
  1909   000008  823E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  1910   00000A                     
  1911                           ;interrupts.c: 22:     if (PIR0bits.TMR0IF)
  1912   00000A  010E               	movlb	14	; () banked
  1913   00000C  AB33               	btfss	51,5,b	;volatile
  1914   00000E  EF0B  F000         	goto	i2u81_41
  1915   000012  EF0D  F000         	goto	i2u81_40
  1916   000016                     i2u81_41:
  1917   000016  EF24  F000         	goto	i2l1701
  1918   00001A                     i2u81_40:
  1919   00001A                     
  1920                           ; BSR set to: 14
  1921                           ;interrupts.c: 23:     {;interrupts.c: 24:         if(LATCbits.LATC5){
  1922   00001A  AA7B               	btfss	123,5,c	;volatile
  1923   00001C  EF12  F000         	goto	i2u82_41
  1924   000020  EF14  F000         	goto	i2u82_40
  1925   000024                     i2u82_41:
  1926   000024  EF1D  F000         	goto	i2l1697
  1927   000028                     i2u82_40:
  1928   000028                     
  1929                           ; BSR set to: 14
  1930                           ;interrupts.c: 25:             write16bitTMR0val(65535-off_period);
  1931   000028  1C36               	comf	_off_period^0,w,c
  1932   00002A  6E01               	movwf	write16bitTMR0val@tmp^0,c
  1933   00002C  1C37               	comf	(_off_period+1)^0,w,c
  1934   00002E  6E02               	movwf	(write16bitTMR0val@tmp+1)^0,c
  1935   000030  EC09  F004         	call	_write16bitTMR0val	;wreg free
  1936   000034                     
  1937                           ;interrupts.c: 26:             LATCbits.LATC5=0;
  1938   000034  9A7B               	bcf	123,5,c	;volatile
  1939                           
  1940                           ;interrupts.c: 27:         } else {
  1941   000036  EF24  F000         	goto	i2l1701
  1942   00003A                     i2l1697:
  1943                           
  1944                           ; BSR set to: 14
  1945                           ;interrupts.c: 28:             write16bitTMR0val(65535-on_period);
  1946   00003A  1C38               	comf	_on_period^0,w,c
  1947   00003C  6E01               	movwf	write16bitTMR0val@tmp^0,c
  1948   00003E  1C39               	comf	(_on_period+1)^0,w,c
  1949   000040  6E02               	movwf	(write16bitTMR0val@tmp+1)^0,c
  1950   000042  EC09  F004         	call	_write16bitTMR0val	;wreg free
  1951   000046                     
  1952                           ;interrupts.c: 29:             LATCbits.LATC5=1;
  1953   000046  8A7B               	bsf	123,5,c	;volatile
  1954   000048                     i2l1701:
  1955                           
  1956                           ;interrupts.c: 32:     PIR0bits.TMR0IF=0;
  1957   000048  010E               	movlb	14	; () banked
  1958   00004A  9B33               	bcf	51,5,b	;volatile
  1959   00004C                     
  1960                           ; BSR set to: 14
  1961   00004C  923E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1962   00004E  0011               	retfie		f
  1963   000050                     __end_of_HighISR:
  1964                           	callstack 0
  1965                           
  1966 ;; *************** function _write16bitTMR0val *****************
  1967 ;; Defined at:
  1968 ;;		line 24 in file "timers.c"
  1969 ;; Parameters:    Size  Location     Type
  1970 ;;  tmp             2    0[COMRAM] unsigned int 
  1971 ;; Auto vars:     Size  Location     Type
  1972 ;;		None
  1973 ;; Return value:  Size  Location     Type
  1974 ;;                  1    wreg      void 
  1975 ;; Registers used:
  1976 ;;		wreg, status,2
  1977 ;; Tracked objects:
  1978 ;;		On entry : 0/0
  1979 ;;		On exit  : 0/0
  1980 ;;		Unchanged: 0/0
  1981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1982 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1985 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1986 ;;Total ram usage:        2 bytes
  1987 ;; Hardware stack levels used: 1
  1988 ;; This function calls:
  1989 ;;		Nothing
  1990 ;; This function is called by:
  1991 ;;		_HighISR
  1992 ;; This function uses a non-reentrant model
  1993 ;;
  1994                           
  1995                           	psect	text12
  1996   000812                     __ptext12:
  1997                           	callstack 0
  1998   000812                     _write16bitTMR0val:
  1999                           	callstack 25
  2000   000812                     
  2001                           ;timers.c: 24: void write16bitTMR0val(unsigned int tmp);timers.c: 25: {;timers.c: 26:   
      +                            TMR0H=tmp>>8;
  2002   000812  5002               	movf	(write16bitTMR0val@tmp+1)^0,w,c
  2003   000814  6ED4               	movwf	212,c	;volatile
  2004   000816                     
  2005                           ;timers.c: 27:     TMR0L=tmp;
  2006   000816  C001  FFD3         	movff	write16bitTMR0val@tmp,4051	;volatile
  2007   00081A  0012               	return		;funcret
  2008   00081C                     __end_of_write16bitTMR0val:
  2009                           	callstack 0
  2010   000000                     
  2011                           	psect	rparam
  2012   000000                     
  2013                           	psect	temp
  2014   00003E                     btemp:
  2015                           	callstack 0
  2016   00003E                     	ds	1
  2017   000000                     int$flags	set	btemp
  2018   000000                     wtemp8	set	btemp+1
  2019   000000                     ttemp5	set	btemp+1
  2020   000000                     ttemp6	set	btemp+4
  2021   000000                     ttemp7	set	btemp+8
  2022                           
  2023                           	psect	idloc
  2024                           
  2025                           ;Config register IDLOC0 @ 0x200000
  2026                           ;	unspecified, using default values
  2027   200000                     	org	2097152
  2028   200000  0FFF               	dw	4095
  2029                           
  2030                           ;Config register IDLOC1 @ 0x200002
  2031                           ;	unspecified, using default values
  2032   200002                     	org	2097154
  2033   200002  0FFF               	dw	4095
  2034                           
  2035                           ;Config register IDLOC2 @ 0x200004
  2036                           ;	unspecified, using default values
  2037   200004                     	org	2097156
  2038   200004  0FFF               	dw	4095
  2039                           
  2040                           ;Config register IDLOC3 @ 0x200006
  2041                           ;	unspecified, using default values
  2042   200006                     	org	2097158
  2043   200006  0FFF               	dw	4095
  2044                           
  2045                           ;Config register IDLOC4 @ 0x200008
  2046                           ;	unspecified, using default values
  2047   200008                     	org	2097160
  2048   200008  0FFF               	dw	4095
  2049                           
  2050                           ;Config register IDLOC5 @ 0x20000A
  2051                           ;	unspecified, using default values
  2052   20000A                     	org	2097162
  2053   20000A  0FFF               	dw	4095
  2054                           
  2055                           ;Config register IDLOC6 @ 0x20000C
  2056                           ;	unspecified, using default values
  2057   20000C                     	org	2097164
  2058   20000C  0FFF               	dw	4095
  2059                           
  2060                           ;Config register IDLOC7 @ 0x20000E
  2061                           ;	unspecified, using default values
  2062   20000E                     	org	2097166
  2063   20000E  0FFF               	dw	4095
  2064                           
  2065                           	psect	config
  2066                           
  2067                           ;Config register CONFIG1L @ 0x300000
  2068                           ;	External Oscillator mode Selection bits
  2069                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  2070                           ;	Power-up default value for COSC bits
  2071                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  2072   300000                     	org	3145728
  2073   300000  AA                 	db	170
  2074                           
  2075                           ;Config register CONFIG1H @ 0x300001
  2076                           ;	unspecified, using default values
  2077                           ;	Clock Out Enable bit
  2078                           ;	CLKOUTEN = 0x1, unprogrammed default
  2079                           ;	Clock Switch Enable bit
  2080                           ;	CSWEN = 0x1, unprogrammed default
  2081                           ;	Fail-Safe Clock Monitor Enable bit
  2082                           ;	FCMEN = 0x1, unprogrammed default
  2083   300001                     	org	3145729
  2084   300001  FF                 	db	255
  2085                           
  2086                           ;Config register CONFIG2L @ 0x300002
  2087                           ;	unspecified, using default values
  2088                           ;	Master Clear Enable bit
  2089                           ;	MCLRE = 0x1, unprogrammed default
  2090                           ;	Power-up Timer Enable bit
  2091                           ;	PWRTE = 0x1, unprogrammed default
  2092                           ;	Low-power BOR enable bit
  2093                           ;	LPBOREN = 0x1, unprogrammed default
  2094                           ;	Brown-out Reset Enable bits
  2095                           ;	BOREN = 0x3, unprogrammed default
  2096   300002                     	org	3145730
  2097   300002  FF                 	db	255
  2098                           
  2099                           ;Config register CONFIG2H @ 0x300003
  2100                           ;	unspecified, using default values
  2101                           ;	Brown Out Reset Voltage selection bits
  2102                           ;	BORV = 0x3, unprogrammed default
  2103                           ;	ZCD Disable bit
  2104                           ;	ZCD = 0x1, unprogrammed default
  2105                           ;	PPSLOCK bit One-Way Set Enable bit
  2106                           ;	PPS1WAY = 0x1, unprogrammed default
  2107                           ;	Stack Full/Underflow Reset Enable bit
  2108                           ;	STVREN = 0x1, unprogrammed default
  2109                           ;	Debugger Enable bit
  2110                           ;	DEBUG = 0x1, unprogrammed default
  2111                           ;	Extended Instruction Set Enable bit
  2112                           ;	XINST = 0x1, unprogrammed default
  2113   300003                     	org	3145731
  2114   300003  FF                 	db	255
  2115                           
  2116                           ;Config register CONFIG3L @ 0x300004
  2117                           ;	WDT Period Select bits
  2118                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  2119                           ;	WDT operating mode
  2120                           ;	WDTE = OFF, WDT Disabled
  2121   300004                     	org	3145732
  2122   300004  9F                 	db	159
  2123                           
  2124                           ;Config register CONFIG3H @ 0x300005
  2125                           ;	unspecified, using default values
  2126                           ;	WDT Window Select bits
  2127                           ;	WDTCWS = 0x7, unprogrammed default
  2128                           ;	WDT input clock selector
  2129                           ;	WDTCCS = 0x7, unprogrammed default
  2130   300005                     	org	3145733
  2131   300005  FF                 	db	255
  2132                           
  2133                           ;Config register CONFIG4L @ 0x300006
  2134                           ;	unspecified, using default values
  2135                           ;	Write Protection Block 0
  2136                           ;	WRT0 = 0x1, unprogrammed default
  2137                           ;	Write Protection Block 1
  2138                           ;	WRT1 = 0x1, unprogrammed default
  2139                           ;	Write Protection Block 2
  2140                           ;	WRT2 = 0x1, unprogrammed default
  2141                           ;	Write Protection Block 3
  2142                           ;	WRT3 = 0x1, unprogrammed default
  2143                           ;	Write Protection Block 3
  2144                           ;	WRT4 = 0x1, unprogrammed default
  2145                           ;	Write Protection Block 3
  2146                           ;	WRT5 = 0x1, unprogrammed default
  2147                           ;	Write Protection Block 3
  2148                           ;	WRT6 = 0x1, unprogrammed default
  2149                           ;	Write Protection Block 3
  2150                           ;	WRT7 = 0x1, unprogrammed default
  2151   300006                     	org	3145734
  2152   300006  FF                 	db	255
  2153                           
  2154                           ;Config register CONFIG4H @ 0x300007
  2155                           ;	unspecified, using default values
  2156                           ;	Configuration Register Write Protection bit
  2157                           ;	WRTC = 0x1, unprogrammed default
  2158                           ;	Boot Block Write Protection bit
  2159                           ;	WRTB = 0x1, unprogrammed default
  2160                           ;	Data EEPROM Write Protection bit
  2161                           ;	WRTD = 0x1, unprogrammed default
  2162                           ;	Scanner Enable bit
  2163                           ;	SCANE = 0x1, unprogrammed default
  2164                           ;	Low Voltage Programming Enable bit
  2165                           ;	LVP = 0x1, unprogrammed default
  2166   300007                     	org	3145735
  2167   300007  FF                 	db	255
  2168                           
  2169                           ;Config register CONFIG5L @ 0x300008
  2170                           ;	unspecified, using default values
  2171                           ;	UserNVM Program Memory Code Protection bit
  2172                           ;	CP = 0x1, unprogrammed default
  2173                           ;	DataNVM Memory Code Protection bit
  2174                           ;	CPD = 0x1, unprogrammed default
  2175   300008                     	org	3145736
  2176   300008  FF                 	db	255
  2177                           
  2178                           ;Config register CONFIG5H @ 0x300009
  2179                           ;	unspecified, using default values
  2180   300009                     	org	3145737
  2181   300009  FF                 	db	255
  2182                           
  2183                           ;Config register CONFIG6L @ 0x30000A
  2184                           ;	unspecified, using default values
  2185                           ;	Table Read Protection Block 0
  2186                           ;	EBTR0 = 0x1, unprogrammed default
  2187                           ;	Table Read Protection Block 1
  2188                           ;	EBTR1 = 0x1, unprogrammed default
  2189                           ;	Table Read Protection Block 2
  2190                           ;	EBTR2 = 0x1, unprogrammed default
  2191                           ;	Table Read Protection Block 3
  2192                           ;	EBTR3 = 0x1, unprogrammed default
  2193                           ;	Table Read Protection Block 4
  2194                           ;	EBTR4 = 0x1, unprogrammed default
  2195                           ;	Table Read Protection Block 5
  2196                           ;	EBTR5 = 0x1, unprogrammed default
  2197                           ;	Table Read Protection Block 6
  2198                           ;	EBTR6 = 0x1, unprogrammed default
  2199                           ;	Table Read Protection Block 7
  2200                           ;	EBTR7 = 0x1, unprogrammed default
  2201   30000A                     	org	3145738
  2202   30000A  FF                 	db	255
  2203                           
  2204                           ;Config register CONFIG6H @ 0x30000B
  2205                           ;	unspecified, using default values
  2206                           ;	Boot Block Table Read Protection bit
  2207                           ;	EBTRB = 0x1, unprogrammed default
  2208   30000B                     	org	3145739
  2209   30000B  FF                 	db	255
  2210                           tosu	equ	0xFFF
  2211                           tosh	equ	0xFFE
  2212                           tosl	equ	0xFFD
  2213                           stkptr	equ	0xFFC
  2214                           pclatu	equ	0xFFB
  2215                           pclath	equ	0xFFA
  2216                           pcl	equ	0xFF9
  2217                           tblptru	equ	0xFF8
  2218                           tblptrh	equ	0xFF7
  2219                           tblptrl	equ	0xFF6
  2220                           tablat	equ	0xFF5
  2221                           prodh	equ	0xFF4
  2222                           prodl	equ	0xFF3
  2223                           indf0	equ	0xFEF
  2224                           postinc0	equ	0xFEE
  2225                           postdec0	equ	0xFED
  2226                           preinc0	equ	0xFEC
  2227                           plusw0	equ	0xFEB
  2228                           fsr0h	equ	0xFEA
  2229                           fsr0l	equ	0xFE9
  2230                           wreg	equ	0xFE8
  2231                           indf1	equ	0xFE7
  2232                           postinc1	equ	0xFE6
  2233                           postdec1	equ	0xFE5
  2234                           preinc1	equ	0xFE4
  2235                           plusw1	equ	0xFE3
  2236                           fsr1h	equ	0xFE2
  2237                           fsr1l	equ	0xFE1
  2238                           bsr	equ	0xFE0
  2239                           indf2	equ	0xFDF
  2240                           postinc2	equ	0xFDE
  2241                           postdec2	equ	0xFDD
  2242                           preinc2	equ	0xFDC
  2243                           plusw2	equ	0xFDB
  2244                           fsr2h	equ	0xFDA
  2245                           fsr2l	equ	0xFD9
  2246                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        4
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     53      61
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    motorRight.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    motorRight.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    motorLeft.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    motorLeft.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    turnRight@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    turnRight@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    turnRight@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    turnRight@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    turnLeft@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    turnLeft@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    turnLeft@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    turnLeft@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(COMRAM[9]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(COMRAM[9]), 

    reverse@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    reverse@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    reverse@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(COMRAM[9]), 

    reverse@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    reverse@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    reverse@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(COMRAM[9]), 

    forward@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    forward@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    forward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(COMRAM[9]), 

    forward@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    forward@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    forward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(COMRAM[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(COMRAM[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorLeft(COMRAM[9]), 

    S845DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    S845DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorRight(COMRAM[9]), main@motorLeft(COMRAM[9]), 


Critical Paths under _main in COMRAM

    _main->_turnLeft
    _turnLeft->_reverse
    _stop->_setMotorPWM
    _reverse->_setMotorPWM
    _forward->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _HighISR in COMRAM

    _HighISR->_write16bitTMR0val

Critical Paths under _main in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                21    21      0   15216
                                             32 COMRAM    21    21      0
                    _Interrupts_init
                        _Timer0_init
                            _forward
                    _initDCmotorsPWM
                            _reverse
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                             6     2      4    7365
                                             26 COMRAM     6     2      4
                            _reverse
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _stop                                                 4     0      4    2613
                                             21 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _reverse                                              5     1      4    2397
                                             21 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      76
                                              2 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _forward                                              5     1      4    2245
                                             21 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          6     4      2    1829
                                             15 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     355
                                              2 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     358
                                              8 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _HighISR                                              0     0      0     196
                  _write16bitTMR0val
 ---------------------------------------------------------------------------------
 (6) _write16bitTMR0val                                    2     0      2     196
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Interrupts_init
   _Timer0_init
   _forward
     _setMotorPWM
       ___lwdiv
         ___wmul (ARG)
       ___wmul
   _initDCmotorsPWM
   _reverse
     _setMotorPWM
   _stop
     _setMotorPWM
   _turnLeft
     _reverse
     _setMotorPWM
     _stop

 _HighISR (ROOT)
   _write16bitTMR0val

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      59        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     35      3D       1       64.9%
BITBIGSFRhlllh      54      0       0      43        0.0%
BITBIGSFRhlllll     46      0       0      45        0.0%
BITBIGSFRlllhll     35      0       0      54        0.0%
BITBIGSFRllll       2D      0       0      57        0.0%
BITBIGSFRllhh       20      0       0      47        0.0%
BITBIGSFRlllhhh     1E      0       0      49        0.0%
BITBIGSFRhhhhhl     1B      0       0      33        0.0%
BITBIGSFRhhhlll     17      0       0      38        0.0%
BITBIGSFRhhhhl      13      0       0      34        0.0%
BITBIGSFRlllhhh     11      0       0      50        0.0%
BITBIGSFRhhhlhh      E      0       0      35        0.0%
BITBIGSFRhhhhhh      D      0       0      32        0.0%
BITBIGSFRllhl        C      0       0      48        0.0%
BITBIGSFRlllhll      B      0       0      56        0.0%
BITBIGSFRlllhll      9      0       0      55        0.0%
BITBIGSFRhhhlll      6      0       0      39        0.0%
BITBIGSFRlllhlh      5      0       0      53        0.0%
BITBIGSFRhlhh        3      0       0      40        0.0%
BITBIGSFRlllhhl      3      0       0      52        0.0%
BITBIGSFRhllllh      2      0       0      44        0.0%
BITBIGSFRhhhllh      2      0       0      37        0.0%
BITBIGSFRhhhlhl      1      0       0      36        0.0%
BITBIGSFRlllhhh      1      0       0      51        0.0%
BITBIGSFRhllh        1      0       0      42        0.0%
BITBIGSFRhlhl        1      0       0      41        0.0%
BITBIGSFRlh          1      0       0      46        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      3D      58        0.0%
DATA                 0      0      3D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Tue Dec 13 12:36:50 2022

      ___wmul@multiplicand 0005          ??_Interrupts_init 0003                        l132 0718  
                      l232 0444                        l139 01BE                        l149 0688  
                      l271 0810                        l247 0804                        l159 05F2  
                      l175 0314                        l169 051C                        l282 07E4  
                      l780 078C                        l773 0784                        u620 0734  
                      u700 0688                        u621 0730                        u701 0684  
                      u630 0752                        u710 04A4                        u631 074E  
                      u711 04A0                        u640 076E                        u720 04C8  
                      u800 038C                        u641 076A                        u721 04C4  
                      u801 0388                        u650 0070                        u730 04EC  
                      u651 006C                        u731 04E8                        u660 013A  
                      u740 0504                        u661 0136                        u741 0500  
                      u750 057A                        u670 0610                        u751 0576  
                      u671 060C                        u760 059E                        u680 0634  
                      u761 059A                        u681 0630                        u770 05C2  
                      u690 0670                        u771 05BE                        u691 066C  
                      u907 02C2                        u780 05DA                        u781 05D6  
                      u917 02EE                        u837 03AA                        u790 02B8  
                      u791 02B4                        u847 03D8                        u857 0402  
                      u867 042E                        u877 01DE                        u887 020A  
                      u897 0236                        wreg 000FE8                       l1111 0806  
                     l1103 07E6                       l1105 07EE                       l1107 07F8  
                     l1109 0802                       l1501 0778                       l1503 077E  
                     l1511 00D8                       l1513 00DC                       l1505 0054  
                     l1521 05F4                       l1601 022C                       l1515 011E  
                     l1507 0070                       l1531 0640                       l1523 05F8  
                     l1611 0288                       l1603 0244                       l1517 013A  
                     l1509 00C4                       l1541 048C                       l1533 064C  
                     l1525 0610                       l1613 02A0                       l1605 0254  
                     l1519 017E                       l1551 04EC                       l1543 04A4  
                     l1527 061C                       l1535 0658                       l1615 02B8  
                     l1607 0264                       l1631 031E                       l1561 06E8  
                     l1553 0504                       l1545 04B0                       l1537 0670  
                     l1529 0634                       l1617 02D0                       l1609 0274  
                     l1641 0338                       l1633 032A                       l1491 0744  
                     l1483 071A                       l1571 070A                       l1563 06F2  
                     l1555 068A                       l1547 04C8                       l1539 0448  
                     l1619 02E4                       l1651 0358                       l1643 0340  
                     l1635 032C                       l1627 0316                       l1493 0752  
                     l1485 0722                       l1477 07C0                       l1581 057A  
                     l1573 070C                       l1565 06F4                       l1557 069A  
                     l1549 04D4                       l1661 0378                       l1653 035C  
                     l1645 0348                       l1637 0330                       l1629 031A  
                     l1495 0758                       l1487 0734                       l1479 07DC  
                     l1591 05DA                       l1583 0586                       l1575 0716  
                     l1567 06FE                       l1559 06C4                       l1671 03A0  
                     l1663 037A                       l1655 0364                       l1647 0350  
                     l1639 0334                       l1497 076E                       l1489 073C  
                     l1585 059E                       l1577 051E                       l1569 0700  
                     l1593 01C0                       l1681 03F8                       l1673 03B8  
                     l1665 037E                       l1657 036C                       l1649 0354  
                     l1499 0776                       l1579 0562                       l1587 05AA  
                     l1595 01D4                       l1683 0410                       l1675 03BA  
                     l1667 038C                       l1659 0374                       l1589 05C2  
                     l1597 01EC                       l1685 0424                       l1677 03CE  
                     l1669 038C                       l1599 0218                       l1687 043C  
                     l1679 03E4                       _T2PR 000FBC                       _main 0316  
                     fsr2h 000FDA                       indf2 000FDF                       fsr1l 000FE1  
                     fsr2l 000FD9                       btemp 003E                       _stop 05F4  
                     prodh 000FF4                       prodl 000FF3                       start 0050  
          __end_of_HighISR 0050               ___param_bank 000000                      ?_main 0001  
                    ?_stop 0016            __end_of___lwdiv 078E                      i2l250 081A  
                    i2l279 004C                      _TMR0H 000FD4                      _TMR0L 000FD3  
          __end_of_forward 05F4                      tablat 000FF5            __end_of_reverse 051E  
                    ttemp5 003F                      ttemp6 0042                      ttemp7 0046  
                    status 000FD8                      wtemp8 003F            __initialization 078E  
             __end_of_main 0448               __end_of_stop 068A                     ??_main 0021  
                   ??_stop 001A              __activetblptr 000000               ?_setMotorPWM 0010  
                   _CCPR1H 000FAA                     _CCPR2H 000FA6                     _CCPR3H 000F25  
                   _CCPR4H 000F21                     _RE2PPS 000E74                     _RD5PPS 000E6F  
                   _RC7PPS 000E69                     _RE4PPS 000E76                     _RD6PPS 000E70  
                   i2l1621 0812                     i2l1701 0048                     i2l1623 0816  
                   i2l1691 001A                     i2l1693 0028                     i2l1695 0034  
                   i2l1697 003A                     i2l1689 000A                     i2l1699 0046  
                   _RG6PPS 000E88                  ??_HighISR 0003              ??_Timer0_init 0003  
             _CCPTMRS0bits 000FAD                     ___wmul 07C0                  ??___lwdiv 000D  
                   isa$std 000001              main@motorLeft 002D               __pdataCOMRAM 003A  
                ??_forward 001A                     tblptrh 000FF7                     tblptrl 000FF6  
                   tblptru 000FF8                  ??_reverse 001A                     stop@mL 0016  
                   stop@mR 0018          ??_initDCmotorsPWM 0005           __end_of_turnLeft 0316  
               __accesstop 0060    __end_of__initialization 07B6              ___rparam_used 000001  
          _Interrupts_init 0806             __pcstackCOMRAM 0001        __end_of_Timer0_init 0806  
             _T2CLKCONbits 000FBF                    ?___wmul 0003                    i2u81_40 001A  
                  i2u81_41 0016                    i2u82_40 0028                    i2u82_41 0024  
                  _SSP2ADD 000ED6                    _SSP2BUF 000ED5    __end_of_Interrupts_init 0812  
                  _HighISR 0008                    __Hparam 0000                    __Lparam 0000  
              _Timer0_init 07E6                    ___lwdiv 071A                 _off_period 0036  
                  __pcinit 078E                    __ramtop 0E00                  ?_turnLeft 001B  
                  __ptext0 0316                    __ptext1 01C0                    __ptext2 05F4  
                  __ptext3 0448                    __ptext4 068A                    __ptext5 051E  
                  __ptext6 0054                    __ptext7 07C0                    __ptext8 071A  
                  __ptext9 07E6                  _T2CONbits 000FBD                    _forward 051E  
                _T2HLTbits 000FBE                    _reverse 0448             main@motorRight 0024  
     end_of_initialization 07B6                    postdec1 000FE5                    postdec2 000FDD  
                  postinc0 000FEE                    postinc2 000FDE            _initDCmotorsPWM 068A  
               ??_turnLeft 001F                  _PORTFbits 000F8E         setMotorPWM@negDuty 0015  
       setMotorPWM@posDuty 0014                  _TRISCbits 000F83                  _TRISDbits 000F84  
                _TRISEbits 000F85                  _TRISFbits 000F86                  _TRISGbits 000F87  
         ?_Interrupts_init 0001                _CCP1CONbits 000FAB                _CCP2CONbits 000FA7  
              _CCP3CONbits 000F26                _CCP4CONbits 000F22             __end_of___wmul 07E6  
            __pidataCOMRAM 081C        start_initialization 078E    __end_of_initDCmotorsPWM 071A  
                 ??___wmul 0007                __pbssCOMRAM 0036                   ?_HighISR 0001  
         ___lwdiv@dividend 0009               ?_Timer0_init 0001                  __pintcode 0008  
                 ?___lwdiv 0009                   ?_forward 0016                   ?_reverse 0016  
            ??_setMotorPWM 0012           ___lwdiv@quotient 000D   initDCmotorsPWM@PWMperiod 0003  
           ___wmul@product 0007                   _LATCbits 000F7B                   _LATEbits 000F7D  
                _on_period 0038                   _LATGbits 000F7F                   _PIE0bits 000E29  
                 _PIR0bits 000E33           ?_initDCmotorsPWM 0003                   _SSP2CON2 000EDA  
                 _SSP2STAT 000ED8          ___wmul@multiplier 0003       write16bitTMR0val@tmp 0001  
             setMotorPWM@m 0010                  main@count 0023          _write16bitTMR0val 0812  
       ?_write16bitTMR0val 0001                  copy_data0 07A2        ??_write16bitTMR0val 0003  
      __end_of_setMotorPWM 01C0                   __Hrparam 0000                   __Lrparam 0000  
                forward@mL 0016                  forward@mR 0018  __end_of_write16bitTMR0val 081C  
               _ANSELDbits 000EA7                 _ANSELFbits 000EB4                 _T0CON0bits 000FD5  
               _T0CON1bits 000FD6            ___lwdiv@divisor 000B            ___lwdiv@counter 000F  
                 __ptext10 0806                   __ptext12 0812               _SSP2CON1bits 000ED9  
             _SSP2CON2bits 000EDA                 turnLeft@mL 001B                 turnLeft@mR 001D  
                reverse@mL 0016                  reverse@mR 0018             _turning_time45 003C  
                 isa$xinst 000000                   int$flags 003E                   _turnLeft 01C0  
               _INTCONbits 000FF2               _reverse_time 003A                _setMotorPWM 0054  
                 intlevel2 0000                 _SSP2DATPPS 000E1D                 _SSP2CLKPPS 000E1C  
